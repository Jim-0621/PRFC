File: flyway-core/src/main/java/org/flywaydb/core/extensibility/RootTelemetryModel.java
Patch:
@@ -44,6 +44,9 @@ public class RootTelemetryModel {
     private String containerType;
     private String secretsManagementType;
     private String databaseHosting;
+    private boolean isExperimentalMode;
+    private String connectionType;
+    private String customParameters;
 
     private Instant startTime = Instant.now();
 }

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/VerbExtension.java
Patch:
@@ -19,11 +19,12 @@
  */
 package org.flywaydb.core.extensibility;
 
+import org.flywaydb.core.FlywayTelemetryManager;
 import org.flywaydb.core.api.configuration.Configuration;
 
 public interface VerbExtension extends Plugin {
 
     boolean handlesVerb(String verb);
 
-    Object executeVerb(Configuration configuration);
+    Object executeVerb(Configuration configuration, FlywayTelemetryManager flywayTelemetryManager);
 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigurationValidator.java
Patch:
@@ -38,7 +38,7 @@ public void validate(Configuration configuration) {
                                       CoreErrorCode.CONFIGURATION);
         }
 
-        if (ExperimentalModeUtils.isExperimentalModeActivated()
+        if (!ExperimentalModeUtils.canCreateDataSource(configuration)
           && !StringUtils.hasText(configuration.getUrl())) {
             String errorMessage = "Unable to connect to the database. A URL must be configured to use Experimental Mode!";
             throw new FlywayException(errorMessage, CoreErrorCode.CONFIGURATION);

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/FlywayDbWebsiteLinks.java
Patch:
@@ -73,4 +73,6 @@ public class FlywayDbWebsiteLinks {
 
     public static final String OFFLINE_LICENSE_PERMITS = "https://rd.gt/3UHAJwO";
     public static final String V10_BLOG = "https://rd.gt/4hA3C7Y";
+    public static final String MONGOSH = "https://rd.gt/3VudXc6";
+    public static final String OSS_DOCKER_REPOSITORY = "https://rd.gt/3OSaoZA";
 }

File: flyway-experimental/flyway-experimental-scanners/src/main/java/org/flywaydb/scanners/ClasspathSqlMigrationScanner.java
Patch:
@@ -73,7 +73,7 @@ public Collection<Pair<LoadableResource, SqlScriptMetadata>> scan(final Location
                 throw new FlywayException("Failed to find classpath location: " + location.getRootPath());
             }
 
-            LOG.error("Skipping classpath location: " + location.getRootPath());
+            LOG.debug("Skipping classpath location: " + location.getRootPath());
             return Collections.emptyList();
         }
 

File: flyway-experimental/flyway-verb-utils/src/main/java/org/flywaydb/verb/info/VersionOrderMigrationComparator.java
Patch:
@@ -50,6 +50,9 @@ public Comparator<MigrationInfo> getComparator(final Configuration configuration
                 || o2.getState() == MigrationState.BASELINE_IGNORED
                 || o2.getState() == MigrationState.BASELINE;
             if(o1BaselineOrdering && o2BaselineOrdering) {
+                if (o1.getState() == o2.getState()) {
+                    return o1.getVersion().compareTo(o2.getVersion());
+                }
                 return o1.getState().compareTo(o2.getState());
             }
 

File: flyway-experimental/flyway-experimental-scanners/src/main/java/org/flywaydb/scanners/BaseSqlMigrationScanner.java
Patch:
@@ -43,7 +43,7 @@
 @CustomLog
 public abstract class BaseSqlMigrationScanner implements ExperimentalMigrationScanner {
    
-    public Collection<Pair<LoadableResource, SqlScriptMetadata>> scan(final File dir, final Location location, final Configuration configuration, final ParsingContext parsingContext) {
+    protected Collection<Pair<LoadableResource, SqlScriptMetadata>> scanFromFileSystem(final File dir, final Location location, final Configuration configuration, final ParsingContext parsingContext) {
         final DirectoryValidationResult validationResult = getDirectoryValidationResult(dir);
         final String fileOrClasspath = location.isFileSystem() ? "filesystem" : "classpath";
         if (validationResult != DirectoryValidationResult.VALID) {

File: flyway-experimental/flyway-experimental-scanners/src/main/java/org/flywaydb/scanners/FileSystemSqlMigrationScanner.java
Patch:
@@ -39,7 +39,7 @@ public Collection<Pair<LoadableResource, SqlScriptMetadata>> scan(final Location
 
         final File dir = new File(path);
 
-        return scan(dir, location, configuration, parsingContext);
+        return scanFromFileSystem(dir, location, configuration, parsingContext);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -2039,7 +2039,7 @@ public void configure(Map<String, String> props) {
             setFailOnMissingLocations(failOnMissingLocationsProp);
         }
 
-        Map<String, String> jdbcPropertiesFromProps = getPropertiesUnderNamespace(props, getPlaceholders(),
+        Map<String, String> jdbcPropertiesFromProps = getPropertiesUnderNamespace(props, getJdbcProperties(),
             ConfigUtils.JDBC_PROPERTIES_PREFIX);
         if (!jdbcPropertiesFromProps.isEmpty()) {
             setJdbcProperties(jdbcPropertiesFromProps);

File: flyway-core/src/main/java/org/flywaydb/core/experimental/schemahistory/SchemaHistoryItem.java
Patch:
@@ -24,7 +24,7 @@
 import lombok.Value;
 
 @Value
-@Builder
+@Builder (toBuilder = true)
 public class SchemaHistoryItem {
     int installedRank;
     String version;

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigurationValidator.java
Patch:
@@ -46,8 +46,8 @@ public void validate(Configuration configuration) {
         }
 
         for (String key : configuration.getPlaceholders().keySet()) {
-            if (key.toLowerCase(Locale.ENGLISH).startsWith("flyway:")) {
-                throw new FlywayException("Invalid placeholder ('flyway:' prefix is reserved): " + key);
+            if (key.toLowerCase(Locale.ENGLISH).startsWith("flyway" + configuration.getPlaceholderSeparator())) {
+                throw new FlywayException("Invalid placeholder ('flyway"+ configuration.getPlaceholderSeparator() + "' prefix is reserved): " + key);
             }
         }
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/EnvironmentModel.java
Patch:
@@ -19,6 +19,7 @@
  */
 package org.flywaydb.core.internal.configuration.models;
 
+import java.util.HashMap;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
 import lombok.Setter;
@@ -42,7 +43,7 @@ public class EnvironmentModel {
     private Integer connectRetries;
     private Integer connectRetriesInterval;
     private String initSql;
-    private Map<String, String> jdbcProperties;
+    private Map<String, String> jdbcProperties = new HashMap<>();
     private Map<String, Map<String, Object>> resolvers;
     private String provisioner;
     private FlywayEnvironmentModel flyway = new FlywayEnvironmentModel();

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Database.java
Patch:
@@ -106,7 +106,7 @@ private CompatibilityMode determineCompatibilityMode() {
     @Override
     public void ensureSupported(Configuration configuration) {
         ensureDatabaseIsRecentEnough("1.2.137");
-        recommendFlywayUpgradeIfNecessary("2.2.224");
+        recommendFlywayUpgradeIfNecessary("2.3.232");
         supportsDropSchemaCascade = getVersion().isAtLeast("1.4.200");
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/proprietaryStubs/DiffCommandExtensionStub.java
Patch:
@@ -31,7 +31,7 @@
 public class DiffCommandExtensionStub implements CommandExtension {
     private static final String FEATURE_NAME = "Diff";
     public static final String COMMAND = FEATURE_NAME.toLowerCase(Locale.ROOT);
-    public static final String DESCRIPTION = "Calculates the differences between a specified source and target. The result of a diff command can then be used with the generate, diffApply and diffText commands to generate scripts and apply changes";
+    public static final String DESCRIPTION = "Calculates the differences between a specified source and target. The result of a diff command can then be used with the generate, model and diffText commands to generate scripts and apply changes";
 
     @Override
     public boolean handlesCommand(final String command) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/FlywayDbWebsiteLinks.java
Patch:
@@ -70,4 +70,7 @@ public class FlywayDbWebsiteLinks {
     public static final String COMMUNITY_CONTRIBUTED_DATABASES = "https://rd.gt/3SXtLDt";
 
     public static final String ORACLE_DATABASE = "https://rd.gt/3SISqKJ";
+
+    public static final String OFFLINE_LICENSE_PERMITS = "https://rd.gt/3UHAJwO";
+    public static final String V10_BLOG = "https://rd.gt/4hA3C7Y";
 }

File: flyway-database/flyway-mysql/src/main/java/org/flywaydb/database/mysql/MySQLDatabase.java
Patch:
@@ -195,7 +195,7 @@ public String getRawCreateScript(Table table, boolean baseline) {
                 "    `execution_time` INT NOT NULL,\n" +
                 "    `success` BOOL NOT NULL,\n" +
                 "    CONSTRAINT " + getConstraintName(table.getName()) + " PRIMARY KEY (`installed_rank`)\n" +
-                ")" + tablespace + " ENGINE=InnoDB" +
+                ")" + tablespace +
                 baselineMarker +
                 ";\n" +
                 "CREATE INDEX `" + table.getName() + "_s_idx` ON " + table + " (`success`);";

File: flyway-experimental/flyway-verb-utils/src/main/java/org/flywaydb/verb/info/VersionOrderMigrationComparator.java
Patch:
@@ -65,7 +65,7 @@ public Comparator<MigrationInfo> getComparator(final Configuration configuration
                 return o2.getState().compareTo(o1.getState());
             }
 
-            if (o1.getInstalledRank() != null && o2.getInstalledRank() != null) {
+            if (o1.isApplied() && o2.isApplied()) {
                 return Integer.compare(o1.getInstalledRank(), o2.getInstalledRank());
             }
             

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -356,6 +356,8 @@ private static OperationResult executeOperation(final Flyway flyway,
             }
         } else if ("repair".equals(operation)) {
             result = flyway.repair();
+        } else if ("undo".equals(operation)) {
+            result = flyway.undo();
         } else {
             result = CommandExtensionUtils.runCommandExtension(configuration,
                 operation,

File: flyway-commandline/src/main/java/org/flywaydb/commandline/configuration/ConfigurationManagerImpl.java
Patch:
@@ -116,6 +116,9 @@ private Boolean useModernConfigBasedOnFileLists(List<File> tomlConfigFiles, List
             return true;
         } else {
             if (!legacyConfigFiles.isEmpty()) {
+                LOG.debug("Using legacy configuration as CONF files detected on disk or specified in commandline or environment variables: " + legacyConfigFiles.stream()
+                    .map(File::getAbsolutePath)
+                    .collect(Collectors.joining(", ")) + System.lineSeparator());
                 return false;
             }
         }

File: flyway-core/src/main/java/org/flywaydb/core/experimental/ExperimentalDatabase.java
Patch:
@@ -57,7 +57,7 @@ public interface ExperimentalDatabase extends Plugin, AutoCloseable  {
      */
     void initialize(ResolvedEnvironment environment, Configuration configuration) throws SQLException;
 
-    void doExecute(String executionUnit);
+    void doExecute(String executionUnit, final boolean outputQueryResults);
 
     /**
      * Gets connection important metadata from the database.
@@ -182,4 +182,6 @@ default void createSchemaHistoryTableIfNotExists(final String tableName) {
             createSchemaHistoryTable(tableName);
         }
     }
+
+    void removeFailedSchemaHistoryItems(final String tableName);
 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/ParserContext.java
Patch:
@@ -62,7 +62,7 @@ public void increaseBlockDepth(String blockInitiator) {
 
     public void decreaseBlockDepth() {
         if (blockDepth == 0) {
-            throw new FlywayException("Flyway parsing bug: unable to decrease block depth below 0");
+            throw new FlywayException("Parsing failed: unable to decrease block depth below 0");
         }
         blockDepth--;
         lastClosedBlockInitiator = blockInitiators.pop();

File: flyway-database/flyway-database-mongodb/src/main/java/org/flywaydb/database/mongodb/MongoDBDatabase.java
Patch:
@@ -126,7 +126,7 @@ public Pair<String, Object> getDeleteStatement(Table table, boolean version, Str
         String deleteStatement =  "db.getSiblingDB('" + table.getSchema().getName() + "')." + table.getName() + ".deleteMany({ 'success': " + getBooleanFalse() + ", " +
                 (version ?
                         "'version': ? " :
-                        "'desciption': ? ") +
+                        "'description': ? ") +
                 "})";
 
         return Pair.of(deleteStatement, filter);

File: flyway-experimental/flyway-verb-migrate/src/main/java/org/flywaydb/verb/migrate/migrators/ApiMigrator.java
Patch:
@@ -83,8 +83,8 @@ private void doIndividualMigration(final MigrationInfo migrationInfo, final Expe
             } else {
                 LOG.debug("Starting migration of " + migrationText + " ...");
                 LOG.info("Migrating " + migrationText);
-                final String executionUnit = String.join("\n", Files.readAllLines(Path.of(migrationInfo.getScript())));
-                experimentalDatabase.doExecute(executionUnit);
+                final String executionUnit = String.join("\n", Files.readAllLines(Path.of(migrationInfo.getPhysicalLocation())));
+                experimentalDatabase.doExecute(executionUnit, configuration.isOutputQueryResults());
             }
         } catch (final Exception e) {
             watch.stop();

File: flyway-experimental/flyway-verb-utils/src/main/java/org/flywaydb/verb/info/CoreMigrationStateCalculator.java
Patch:
@@ -134,6 +134,9 @@ private static MigrationState calculateSHTStates(final Pair<ResolvedSchemaHistor
         }
         if (migration.getRight() == null) {
             final MigrationVersion maxLocalVersion = highestLocalVersion(sortedMigrations);
+            if (migration.getLeft().isRepeatable()) {
+                return MigrationState.MISSING_FAILED;
+            }
             return migration.getLeft().getVersion().isNewerThan(maxLocalVersion) ? MigrationState.FUTURE_FAILED : MigrationState.MISSING_FAILED;
         }
         return MigrationState.FAILED;

File: flyway-experimental/flyway-verb-utils/src/main/java/org/flywaydb/verb/info/ExperimentalMigrationInfoImpl.java
Patch:
@@ -79,7 +79,7 @@ public String getScript() {
         if(migration.getLeft() != null) {
             return migration.getLeft().getScript();
         }
-        return migration.getRight().loadableResource().getAbsolutePath();
+        return migration.getRight().loadableResource().getFilename();
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -396,8 +396,6 @@ public interface Configuration {
      *
      * Use in conjunction with {@code cherryPick} to skip specific migrations instead of all pending ones.
      *
-     * <i>Flyway Teams only</i>
-     *
      * @return {@code true} if executing the migrations should be skipped on migrate, {@code false} if not. (default: {@code false})
      */
     boolean isSkipExecutingMigrations();

File: flyway-core/src/main/java/org/flywaydb/core/experimental/ExperimentalModeUtils.java
Patch:
@@ -32,11 +32,11 @@ public static boolean isExperimentalModeActivated() {
     }
 
     public static boolean canUseExperimentalMode(final Configuration config,  String verb) {
-        Map<String, List<String>> acceptedVerbs = Map.of("mongodb", List.of("info", "validate", "migrate"),
+        Map<String, List<String>> acceptedVerbs = Map.of("mongodb", List.of("info", "validate", "migrate", "clean", "baseline"),
 
 
 
-            "SQLite", List.of("info", "validate", "migrate"));
+            "SQLite", List.of("info", "validate", "migrate", "clean", "undo"));
 
         String database = getCurrentDatabase(config);
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbSchemas.java
Patch:
@@ -84,6 +84,7 @@ public DbSchemas(Database database, Schema[] schemas, SchemaHistory schemaHistor
      */
     public void create(final boolean baseline) {
         callbackExecutor.onEvent(Event.CREATE_SCHEMA);
+        callbackExecutor.onEvent(Event.BEFORE_CREATE_SCHEMA);
         int retries = 0;
         while (true) {
             try {

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/FlywayEnvironmentModel.java
Patch:
@@ -152,7 +152,7 @@ public FlywayEnvironmentModel merge(FlywayEnvironmentModel otherPojo) {
         result.placeholders = MergeUtils.merge(placeholders, otherPojo.placeholders, (a,b) -> b != null ? b : a);
         result.reportEnabled = reportEnabled.merge(otherPojo.reportEnabled);
         result.propertyResolvers = MergeUtils.merge(propertyResolvers, otherPojo.propertyResolvers, (a,b) -> b != null ? b : a); // TODO: more granular merge
-        result.pluginConfigurations = MergeUtils.merge(pluginConfigurations, otherPojo.pluginConfigurations, (a,b) -> b != null ? b : a);
+        result.pluginConfigurations = MergeUtils.merge(pluginConfigurations, otherPojo.pluginConfigurations, MergeUtils::mergeObjects);
         return result;
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/FlywayModel.java
Patch:
@@ -158,7 +158,7 @@ public FlywayModel merge(FlywayModel otherPojo) {
         result.setReportEnabled(getReportEnabled().merge(otherPojo.getReportEnabled()));
         result.setPlaceholders(MergeUtils.merge(getPlaceholders(),otherPojo.getPlaceholders(), (a,b) -> b != null ? b : a));
         result.setPropertyResolvers(MergeUtils.merge(getPropertyResolvers(),otherPojo.getPropertyResolvers(), (a,b) -> b != null ? b : a)); // TODO: more granular merge
-        result.setPluginConfigurations(MergeUtils.merge(getPluginConfigurations(), otherPojo.getPluginConfigurations(), (a,b) -> b != null ? b : a));
+        result.setPluginConfigurations(MergeUtils.merge(getPluginConfigurations(), otherPojo.getPluginConfigurations(), MergeUtils::mergeObjects));
         return result;
     }
 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/JsonUtils.java
Patch:
@@ -88,9 +88,10 @@ public static <T> List<T> toList(final String json) {
 
     public static String getFromJson(final String json, final String key) {
         try {
-            return getJsonMapper().readTree(json).get(key).asText();
+            final var jsonNode = getJsonMapper().readTree(json).get(key);
+            return jsonNode == null ? null : jsonNode.asText();
         } catch (final JsonProcessingException e) {
-            return "";
+            throw new FlywayException("Unable to parse JSON: " + json, e);
         }
     }
 

File: flyway-database/flyway-database-postgresql/src/main/java/org/flywaydb/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -49,7 +49,7 @@ public void ensureSupported(Configuration configuration) {
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("10", Tier.PREMIUM, configuration);
 
-        recommendFlywayUpgradeIfNecessaryForMajorVersion("16");
+        recommendFlywayUpgradeIfNecessaryForMajorVersion("17");
     }
 
     @Override

File: flyway-experimental/flyway-verb-migrate/src/main/java/org/flywaydb/verb/migrate/migrators/Migrator.java
Patch:
@@ -59,6 +59,7 @@ static void updateSchemaHistoryTable(final String tableName,
         final int totalTimeMillis,
         final int installedRank,
         final ExperimentalDatabase experimentalDatabase,
+        final String installedBy,
         final boolean success) {
         final SchemaHistoryItemBuilder schemaHistoryItem = SchemaHistoryItem.builder()
             .executionTime(totalTimeMillis)
@@ -67,7 +68,7 @@ static void updateSchemaHistoryTable(final String tableName,
             .script(migrationInfo.getScript())
             .installedRank(installedRank)
             .checksum(migrationInfo.getChecksum())
-            .installedBy(experimentalDatabase.getCurrentUser())
+            .installedBy(installedBy)
             .success(success);
         if (migrationInfo.isVersioned()) {
             schemaHistoryItem.version(migrationInfo.getVersion().getVersion());

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -354,7 +354,6 @@ public abstract class AbstractFlywayTask extends DefaultTask {
      * This should be used when you have applied a migration manually (via executing the sql yourself, or via an ide), and
      * just want the schema history table to reflect this.
      * Use in conjunction with {@code cherryPick} to skip specific migrations instead of all pending ones.
-     * <i>Flyway Teams only</i>
      */
     public Boolean skipExecutingMigrations;
 

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -368,7 +368,6 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      * This should be used when you have applied a migration manually (via executing the sql yourself, or via an IDE), and
      * just want the schema history table to reflect this.
      * Use in conjunction with {@code cherryPick} to skip specific migrations instead of all pending ones.
-     * <i>Flyway Teams only</i>
      */
     @Parameter(property = ConfigUtils.SKIP_EXECUTING_MIGRATIONS)
     private Boolean skipExecutingMigrations;

File: flyway-core/src/main/java/org/flywaydb/core/api/output/HtmlResult.java
Patch:
@@ -39,6 +39,9 @@ public class HtmlResult implements OperationResult {
     @Getter
     @Setter
     private boolean licenseFailed;
+    @Getter
+    @Setter
+    private boolean deleteFileOnJvmExit = false;
 
     public HtmlResult(final LocalDateTime timestamp, final String operation) {
         setTimestamp(timestamp);

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/LicenseGuard.java
Patch:
@@ -54,6 +54,8 @@ public class LicenseGuard {
 
 
 
+
+
      private static final FlywayPermit OSS_PERMIT = new FlywayPermit("Anonymous", null, null, false, false, false);
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/ParsingContext.java
Patch:
@@ -68,6 +68,8 @@ public void populate(final ExperimentalDatabase database, final Configuration co
             placeholders.put(generateName(DEFAULT_SCHEMA_PLACEHOLDER,configuration), defaultSchemaName);
         }
 
+        // placeholders.put(generateName(DATABASE_PLACEHOLDER,configuration), null); // TODO Need to do this when we support a database engine that has Databases and Schemas
+        placeholders.put(generateName(USER_PLACEHOLDER,configuration), database.getCurrentUser());
         placeholders.put(generateName(TIMESTAMP_PLACEHOLDER,configuration), new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
         placeholders.put(generateName(WORKING_DIRECTORY_PLACEHOLDER,configuration), System.getProperty("user.dir"));
         placeholders.put(generateName(TABLE_PLACEHOLDER,configuration), configuration.getTable());

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/FlywaySqlScriptException.java
Patch:
@@ -39,7 +39,7 @@ public class FlywaySqlScriptException extends FlywaySqlException {
 
     private final SqlStatement statement;
 
-    private static final String STATEMENT_MESSAGE = "Run Flyway with -X option to see the actual statement causing the problem";
+    public static final String STATEMENT_MESSAGE = "Run Flyway with -X option to see the actual statement causing the problem";
 
     /**
      * Creates new instance of FlywaySqlScriptException.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/JsonUtils.java
Patch:
@@ -97,7 +97,7 @@ public static String getFromJson(final String json, final String key) {
     public static ArrayNode parseJsonArray(final String json) {
         try {
             return (ArrayNode) getJsonMapper().readTree(json);
-        } catch (final JsonProcessingException e) {
+        } catch (final Exception e) {
             throw new FlywayException("Unable to parse JSON: " + json, e);
         }
     }

File: flyway-experimental/flyway-verb-utils/src/main/java/org/flywaydb/verb/info/ExperimentalMigrationInfoService.java
Patch:
@@ -51,7 +51,7 @@ public ExperimentalMigrationInfoService(final MigrationInfo[] migrations, final
 
     private MigrationInfo[] getApplicableMigrations(final MigrationInfo[] migrations, final Configuration configuration) {
         final MigrationInfo[] applicableMigrations;
-        final List<ExperimentalMigrationInfoFilter> filters = configuration.getPluginRegister().getPlugins(ExperimentalMigrationInfoFilter.class);
+        final List<ExperimentalMigrationInfoFilter> filters = configuration.getPluginRegister().getLicensedPlugins(ExperimentalMigrationInfoFilter.class, configuration);
         MigrationInfo[] tempMigrations = Arrays.copyOf(migrations, migrations.length);
         for(final ExperimentalMigrationInfoFilter filter : filters) {
             final Predicate<MigrationInfo> predicate = filter.getFilter(configuration);

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -316,7 +316,7 @@ public ResolvedEnvironment getResolvedEnvironment(String envName, ProvisionerMod
             unresolved,
             provisionerMode,
             this,
-            progress == null ? createProgress("environment") : progress);
+            progress == null ? new ProgressLoggerEmpty() : progress);
         resolvedEnvironments.put(envName, resolved);
         return resolved;
     }

File: flyway-core/src/main/java/org/flywaydb/core/FlywayExecutor.java
Patch:
@@ -133,12 +133,13 @@ public <T> T execute(Command<T> command, boolean scannerRequired, FlywayTelemetr
 
 
 
-        resourceNameValidator.validateSQLMigrationNaming(resourceProvider, configuration);
-
         JdbcConnectionFactory jdbcConnectionFactory = new JdbcConnectionFactory(configuration.getDataSource(), configuration, statementInterceptor);
 
         final DatabaseType databaseType = jdbcConnectionFactory.getDatabaseType();
         final SqlScriptFactory sqlScriptFactory = databaseType.createSqlScriptFactory(configuration, parsingContext);
+
+        resourceNameValidator.validateSQLMigrationNaming(resourceProvider, configuration, databaseType);
+
         RetryStrategy.setNumberOfRetries(configuration.getLockRetryCount());
 
         final SqlScriptExecutorFactory noCallbackSqlScriptExecutorFactory = databaseType.createSqlScriptExecutorFactory(

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Database.java
Patch:
@@ -49,10 +49,10 @@
 import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_AWS_VM;
 import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_AZURE_URL_IDENTIFIER;
 import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_AZURE_VM;
+import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_EC2_URL_IDENTIFIER;
 import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_GCP_URL_IDENTIFIER;
 import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_GCP_VM;
 import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_LOCAL;
-import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_RDS_URL_IDENTIFIER;
 import static org.flywaydb.core.internal.util.FlywayDbWebsiteLinks.COMMUNITY_SUPPORT;
 
 /**
@@ -507,7 +507,7 @@ public String getDatabaseHosting() {
 
         if (DATABASE_HOSTING_AZURE_URL_IDENTIFIER.matcher(url).find()) {
             return DATABASE_HOSTING_AZURE_VM;
-        } else if (DATABASE_HOSTING_RDS_URL_IDENTIFIER.matcher(url).find()) {
+        } else if (DATABASE_HOSTING_EC2_URL_IDENTIFIER.matcher(url).find()) {
             return DATABASE_HOSTING_AWS_VM;
         } else if (url.contains(DATABASE_HOSTING_GCP_URL_IDENTIFIER)) {
             return DATABASE_HOSTING_GCP_VM;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/DatabaseConstants.java
Patch:
@@ -25,7 +25,10 @@ public class DatabaseConstants {
 
     public static final Pattern DATABASE_HOSTING_AZURE_URL_IDENTIFIER = Pattern.compile(".+\\.azure\\.com");
     public static final Pattern DATABASE_HOSTING_RDS_URL_IDENTIFIER = Pattern.compile(".+\\.rds\\.([\\w-]+\\.)*amazon(aws)?\\.com(\\.\\w+)?");
+    public static final Pattern DATABASE_HOSTING_EC2_URL_IDENTIFIER = Pattern.compile("^ec2.*\\.compute(-\\d+)?\\.amazonaws\\.com");
+    public static final String DATABASE_HOSTING_EC2_HOSTNAME_IDENTIFIER = "ec2amaz";
     public static final String DATABASE_HOSTING_GCP_URL_IDENTIFIER = "socketFactory=com.google.cloud";
+
     public static final String DATABASE_HOSTING_AZURE_SQL_DATABASE = "azure-sql-database";
     public static final String DATABASE_HOSTING_AZURE_SQL_MANAGED_INSTANCE = "azure-sql-managed-instance";
     public static final String DATABASE_HOSTING_AWS_RDS = "aws-rds";

File: flyway-core/src/main/java/org/flywaydb/core/internal/reports/ResultReportGenerator.java
Patch:
@@ -26,5 +26,5 @@
 
 public interface ResultReportGenerator extends Plugin {
 
-    ReportDetails generateReport(OperationResult operationResult, Configuration configuration, LocalDateTime executionTime) throws Exception;
+    ReportGenerationOutput generateReport(OperationResult operationResult, Configuration configuration, LocalDateTime executionTime);
 }

File: flyway-database/flyway-database-oracle/src/main/java/org/flywaydb/database/oracle/OracleDatabase.java
Patch:
@@ -20,6 +20,7 @@
 package org.flywaydb.database.oracle;
 
 import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_AWS_RDS;
+import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_RDS_URL_IDENTIFIER;
 
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.extensibility.Tier;
@@ -328,7 +329,7 @@ public List<String> mapRow(ResultSet rs) throws SQLException {
 
     @Override
     public String getDatabaseHosting() {
-        if (getMainConnection().isAwsRds()) {
+        if (getMainConnection().isAwsRds() || DATABASE_HOSTING_RDS_URL_IDENTIFIER.matcher(configuration.getUrl()).find()) {
             return DATABASE_HOSTING_AWS_RDS;
         } else {
             return super.getDatabaseHosting();

File: flyway-database/flyway-database-postgresql/src/main/java/org/flywaydb/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -20,6 +20,7 @@
 package org.flywaydb.database.postgresql;
 
 import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_AWS_RDS;
+import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_RDS_URL_IDENTIFIER;
 
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.extensibility.Tier;
@@ -139,7 +140,7 @@ public String getSelectStatement(Table table) {
 
     @Override
     public String getDatabaseHosting() {
-        if (getMainConnection().isAwsRds()) {
+        if (getMainConnection().isAwsRds() || DATABASE_HOSTING_RDS_URL_IDENTIFIER.matcher(configuration.getUrl()).find()) {
             return DATABASE_HOSTING_AWS_RDS;
         } else {
             return super.getDatabaseHosting();

File: flyway-database/flyway-mysql/src/main/java/org/flywaydb/database/mysql/MySQLDatabase.java
Patch:
@@ -20,6 +20,7 @@
 package org.flywaydb.database.mysql;
 
 import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_AWS_RDS;
+import static org.flywaydb.core.internal.database.base.DatabaseConstants.DATABASE_HOSTING_RDS_URL_IDENTIFIER;
 
 import lombok.CustomLog;
 import org.flywaydb.core.api.CoreMigrationType;
@@ -306,7 +307,7 @@ public boolean useSingleConnection() {
 
     @Override
     public String getDatabaseHosting() {
-        if (getMainConnection().isAwsRds()) {
+        if (getMainConnection().isAwsRds() || DATABASE_HOSTING_RDS_URL_IDENTIFIER.matcher(configuration.getUrl()).find()) {
             return DATABASE_HOSTING_AWS_RDS;
         } else {
             return super.getDatabaseHosting();

File: flyway-experimental/flyway-experimental-mongodb/src/main/java/org/flywaydb/experimental/mongodb/ExperimentalMongoDB.java
Patch:
@@ -32,8 +32,6 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
-import java.util.Objects;
-import org.bson.BsonDocument;
 import org.bson.Document;
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.experimental.ConnectionType;

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayExtension.java
Patch:
@@ -330,6 +330,7 @@ public class FlywayExtension {
     public Boolean validateOnMigrate;
 
     /**
+     * Deprecated, will be removed in a future release. <br>
      * Whether to automatically call clean or not when a validation error occurs. (default: {@code false})<br>
      * This is exclusively intended as a convenience for development. even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -371,6 +371,7 @@ public abstract class AbstractFlywayTask extends DefaultTask {
     public Boolean validateOnMigrate;
 
     /**
+     * Deprecated, will be removed in a future release. <br>
      * Whether to automatically call clean or not when a validation error occurs. (default: {@code false})
      * This is exclusively intended as a convenience for development. even though we strongly recommend not to change
      * migration scripts once they have been checked into SCM and run, this provides a way of dealing with this case in

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -289,6 +289,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
     private String[] sqlMigrationSuffixes;
 
     /**
+     * Deprecated, will be removed in a future release. <br>
      * Whether to automatically call clean or not when a validation error occurs. (default: {@code false})
      * <p>This is exclusively intended as a convenience for development. even though we strongly recommend not to
      * change migration scripts once they have been checked into SCM and run, this provides a way of dealing with this

File: flyway-database/flyway-sqlserver/src/main/java/org/flywaydb/database/sqlserver/SQLServerSchema.java
Patch:
@@ -305,8 +305,8 @@ protected List<DBObject> queryDBObjects(ObjectType... types) throws SQLException
      * @throws SQLException when the retrieval failed.
      */
     private List<DBObject> queryDBObjectsWithParent(DBObject parent, ObjectType... types) throws SQLException {
-        StringBuilder query = new StringBuilder("SELECT obj.object_id, obj.name FROM sys.objects AS obj " +
-                                                        "LEFT JOIN sys.extended_properties AS eps " +
+        StringBuilder query = new StringBuilder("SELECT obj.object_id, obj.name FROM sys.objects AS obj WITH (NOLOCK)" +
+                                                        "LEFT JOIN sys.extended_properties AS eps WITH (NOLOCK)" +
                                                         "ON obj.object_id = eps.major_id " +
                                                         "AND eps.class = 1 " +    // Class 1 = objects and columns (we are only interested in objects).
                                                         "AND eps.minor_id = 0 " + // Minor ID, always 0 for objects.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/MigrateOutput.java
Patch:
@@ -20,15 +20,17 @@
 package org.flywaydb.core.api.output;
 
 import lombok.AllArgsConstructor;
+import lombok.NoArgsConstructor;
 
 @AllArgsConstructor
+@NoArgsConstructor
 public class MigrateOutput {
     public String category;
     public String version;
     public String description;
     public String type;
     public String filepath;
     public int executionTime;
-    
+
     public transient Boolean rolledBack;
 }

File: flyway-core/src/main/java/org/flywaydb/core/experimental/migration/ExperimentalMigrationScanner.java
Patch:
@@ -24,9 +24,10 @@
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.resource.LoadableResource;
 import org.flywaydb.core.extensibility.Plugin;
+import org.flywaydb.core.internal.parser.ParsingContext;
 import org.flywaydb.core.internal.sqlscript.SqlScriptMetadata;
 import org.flywaydb.core.internal.util.Pair;
 
 public interface ExperimentalMigrationScanner extends Plugin  {
-    Collection<Pair<LoadableResource, SqlScriptMetadata>> scan(Location location, Configuration configuration);
+    Collection<Pair<LoadableResource, SqlScriptMetadata>> scan(Location location, Configuration configuration, ParsingContext parsingContext);
 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/EnvironmentModel.java
Patch:
@@ -39,7 +39,6 @@ public class EnvironmentModel {
     private String password;
     private String driver;
     private List<String> schemas = new ArrayList<>();
-    private List<String> jarDirs = new ArrayList<>();
     private Integer connectRetries;
     private Integer connectRetriesInterval;
     private String initSql;
@@ -55,7 +54,6 @@ public EnvironmentModel merge(EnvironmentModel otherPojo) {
         result.password = MergeUtils.merge(password, otherPojo.password);
         result.driver = MergeUtils.merge(driver, otherPojo.driver);
         result.schemas = MergeUtils.merge(schemas, otherPojo.schemas);
-        result.jarDirs = MergeUtils.merge(jarDirs, otherPojo.jarDirs);
         result.connectRetries = MergeUtils.merge(connectRetries, otherPojo.connectRetries);
         result.connectRetriesInterval = MergeUtils.merge(connectRetriesInterval, otherPojo.connectRetriesInterval);
         result.initSql = MergeUtils.merge(initSql, otherPojo.initSql);

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/FlywayEnvironmentModel.java
Patch:
@@ -20,6 +20,7 @@
 package org.flywaydb.core.internal.configuration.models;
 
 import com.fasterxml.jackson.annotation.JsonAnySetter;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -57,6 +58,7 @@ public class FlywayEnvironmentModel {
     private Boolean cleanOnValidationError;
     private Boolean communityDBSupportEnabled;
     private List<String> locations;
+    private List<String> jarDirs;
     private String table;
     private String tablespace;
     private String target;
@@ -115,6 +117,7 @@ public FlywayEnvironmentModel merge(FlywayEnvironmentModel otherPojo) {
         result.cleanOnValidationError = cleanOnValidationError.merge(otherPojo.cleanOnValidationError);
         result.communityDBSupportEnabled = communityDBSupportEnabled.merge(otherPojo.communityDBSupportEnabled);
         result.locations = locations.merge(otherPojo.locations);
+        result.jarDirs = jarDirs.merge(otherPojo.jarDirs);
         result.table = table.merge(otherPojo.table);
         result.tablespace = tablespace.merge(otherPojo.tablespace);
         result.target = target.merge(otherPojo.target);

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/FlywayModel.java
Patch:
@@ -62,6 +62,7 @@ public static FlywayModel defaults(){
         model.setCleanOnValidationError(false);
         model.setCommunityDBSupportEnabled(true);
         model.setLocations(new ArrayList<>(Collections.singletonList("db/migration")));
+        model.setJarDirs(new ArrayList<>());
         model.setTarget("latest");
         model.setTable("flyway_schema_history");
         model.setFailOnMissingTarget(false);
@@ -117,6 +118,7 @@ public FlywayModel merge(FlywayModel otherPojo) {
         result.setCleanOnValidationError(getCleanOnValidationError().merge(otherPojo.getCleanOnValidationError()));
         result.setCommunityDBSupportEnabled(getCommunityDBSupportEnabled().merge(otherPojo.getCommunityDBSupportEnabled()));
         result.setLocations(getLocations().merge(otherPojo.getLocations()));
+        result.setJarDirs(getJarDirs().merge(otherPojo.getJarDirs()));
         result.setTable(getTable().merge(otherPojo.getTable()));
         result.setTablespace(getTablespace().merge(otherPojo.getTablespace()));
         result.setTarget(getTarget().merge(otherPojo.getTarget()));

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/ResolvedEnvironment.java
Patch:
@@ -34,7 +34,6 @@ public class ResolvedEnvironment {
     private String password;
     private String driver;
     private List<String> schemas;
-    private List<String> jarDirs;
     private String token;
     private Integer connectRetries;
     private Integer connectRetriesInterval;
@@ -49,7 +48,6 @@ public EnvironmentModel toEnvironmentModel() {
         result.setUser(user);
         result.setDriver(driver);
         result.setSchemas(schemas);
-        result.setJarDirs(jarDirs);
         result.setConnectRetries(connectRetries);
         result.setConnectRetriesInterval(connectRetriesInterval);
         result.setInitSql(initSql);

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentResolver.java
Patch:
@@ -62,7 +62,6 @@ public ResolvedEnvironment resolve(final String environmentName, final Environme
         result.setConnectRetriesInterval(environment.getConnectRetriesInterval());
         result.setInitSql(environment.getInitSql());
         result.setSchemas(environment.getSchemas());
-        result.setJarDirs(environment.getJarDirs());
 
         progress.pushSteps(2);
         final ProgressLogger provisionProgress = progress.subTask("provision");

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -141,7 +141,7 @@ public final SqlStatementIterator parse(LoadableResource resource, SqlScriptMeta
      * @return The new reader with placeholder replacement.
      */
     protected Reader replacePlaceholders(Reader reader, SqlScriptMetadata metadata) {
-        if (configuration.isPlaceholderReplacement() && (metadata == null || metadata.placeholderReplacement())) {
+        if ((metadata == null || metadata.placeholderReplacement() == null) ? configuration.isPlaceholderReplacement() : metadata.placeholderReplacement()) {
             return PlaceholderReplacingReader.create(configuration, parsingContext, reader);
         }
         return reader;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/CompositeMigrationResolver.java
Patch:
@@ -72,9 +72,7 @@ public CompositeMigrationResolver(ResourceProvider resourceProvider,
 
             migrationResolvers.addAll(configuration.getPluginRegister().getPlugins(MigrationResolver.class));
 
-
-
-
+            migrationResolvers.add(new ScriptMigrationResolver(resourceProvider, configuration, parsingContext, statementInterceptor));
         }
 
         migrationResolvers.add(new FixedJavaMigrationResolver(configuration.getJavaMigrations()));

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/script/ScriptMigrationExecutor.java
Patch:
@@ -33,6 +33,7 @@
 import org.flywaydb.core.internal.parser.ParsingContext;
 import org.flywaydb.core.internal.resource.ResourceName;
 import org.flywaydb.core.internal.util.FileUtils;
+import org.flywaydb.core.internal.util.OsUtils;
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.io.File;
@@ -104,7 +105,7 @@ List<String> getProcessArgs() {
             args.add("/c");
             args.add(resourcePath);
         } else if ("ps1".equalsIgnoreCase(resourceExt)) {
-            args.add("powershell");
+            args.add(OsUtils.isWindows() ? "powershell" : "pwsh");
             args.add("-File");
             args.add(resourcePath);
         } else if ("py".equalsIgnoreCase(resourceExt)) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolver.java
Patch:
@@ -110,8 +110,8 @@ public Reader read() {
         return list.toArray(new LoadableResource[0]);
     }
 
-    private Integer getChecksumForLoadableResource(boolean repeatable, List<LoadableResource> loadableResources, ResourceName resourceName) {
-        if (repeatable && configuration.isPlaceholderReplacement()) {
+    private Integer getChecksumForLoadableResource(boolean repeatable, List<LoadableResource> loadableResources, ResourceName resourceName, boolean placeholderReplacement) {
+        if (repeatable && placeholderReplacement) {
             parsingContext.updateFilenamePlaceholder(resourceName, configuration);
             return ChecksumCalculator.calculate(createPlaceholderReplacingLoadableResources(loadableResources));
         }
@@ -155,7 +155,7 @@ private void addMigrations(List<ResolvedMigration> migrations, String prefix, St
 
 
 
-            Integer checksum = getChecksumForLoadableResource(repeatable, resources, resourceName);
+            Integer checksum = getChecksumForLoadableResource(repeatable, resources, resourceName, sqlScript.placeholderReplacement());
             Integer equivalentChecksum = getEquivalentChecksumForLoadableResource(repeatable, resources);
 
             migrations.add(new ResolvedMigrationImpl(

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/SqlScriptMetadata.java
Patch:
@@ -45,7 +45,7 @@ public class SqlScriptMetadata {
 
     private final Boolean executeInTransaction;
     private final String encoding;
-    private final boolean placeholderReplacement;
+    private final Boolean placeholderReplacement;
     private String shouldExecuteExpression;
     private boolean shouldExecute;
 
@@ -56,7 +56,7 @@ private SqlScriptMetadata(Map<String, String> metadata, Map<String, String> unma
         this.executeInTransaction = removeBoolean(metadata, EXECUTE_IN_TRANSACTION);
         this.encoding = metadata.remove(ENCODING);
 
-        this.placeholderReplacement = Boolean.parseBoolean(metadata.getOrDefault(PLACEHOLDER_REPLACEMENT, "true"));
+        this.placeholderReplacement = removeBoolean(metadata, PLACEHOLDER_REPLACEMENT);
         metadata.remove(PLACEHOLDER_REPLACEMENT);
 
         this.shouldExecute = true;
@@ -85,7 +85,7 @@ public String encoding() {
         return encoding;
     }
 
-    public boolean placeholderReplacement() {
+    public Boolean placeholderReplacement() {
         return placeholderReplacement;
     }
 

File: flyway-experimental/flyway-experimental-scanners/src/main/java/org/flywaydb/scanners/ClasspathSqlMigrationScanner.java
Patch:
@@ -29,13 +29,14 @@
 import org.flywaydb.core.api.Location;
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.resource.LoadableResource;
+import org.flywaydb.core.internal.parser.ParsingContext;
 import org.flywaydb.core.internal.sqlscript.SqlScriptMetadata;
 import org.flywaydb.core.internal.util.Pair;
 
 @CustomLog
 public class ClasspathSqlMigrationScanner extends BaseSqlMigrationScanner {
     @Override
-    public Collection<Pair<LoadableResource, SqlScriptMetadata>> scan(final Location location, final Configuration configuration) {
+    public Collection<Pair<LoadableResource, SqlScriptMetadata>> scan(final Location location, final Configuration configuration, final ParsingContext parsingContext) {
         if (!location.isClassPath()){
             return List.of();
         }
@@ -53,7 +54,7 @@ public Collection<Pair<LoadableResource, SqlScriptMetadata>> scan(final Location
             return Collections.emptyList();
         }
         final File directory = new File(resource.getPath());
-        return scan(directory, location, configuration);
+        return scan(directory, location, configuration, parsingContext);
     }
 
     @Override

File: flyway-experimental/flyway-experimental-scanners/src/main/java/org/flywaydb/scanners/FileSystemSqlMigrationScanner.java
Patch:
@@ -25,20 +25,21 @@
 import org.flywaydb.core.api.Location;
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.resource.LoadableResource;
+import org.flywaydb.core.internal.parser.ParsingContext;
 import org.flywaydb.core.internal.sqlscript.SqlScriptMetadata;
 import org.flywaydb.core.internal.util.Pair;
 
 @CustomLog
 public class FileSystemSqlMigrationScanner extends BaseSqlMigrationScanner {
 
     @Override
-    public Collection<Pair<LoadableResource, SqlScriptMetadata>> scan(final Location location, final Configuration configuration) {
+    public Collection<Pair<LoadableResource, SqlScriptMetadata>> scan(final Location location, final Configuration configuration, final ParsingContext parsingContext) {
         final String path = location.getRootPath();
         LOG.debug("Scanning for filesystem resources at '" + path + "'");
 
         final File dir = new File(path);
 
-        return scan(dir, location, configuration);
+        return scan(dir, location, configuration, parsingContext);
     }
 
     @Override

File: flyway-reports/src/main/java/org/flywaydb/reports/api/extensibility/HtmlRenderer.java
Patch:
@@ -1,6 +1,6 @@
 /*-
  * ========================LICENSE_START=================================
- * flyway-core
+ * flyway-reports
  * ========================================================================
  * Copyright (C) 2010 - 2024 Red Gate Software Ltd
  * ========================================================================
@@ -17,11 +17,12 @@
  * limitations under the License.
  * =========================LICENSE_END==================================
  */
-package org.flywaydb.core.extensibility;
+package org.flywaydb.reports.api.extensibility;
 
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.output.HtmlResult;
 import java.util.List;
+import org.flywaydb.core.extensibility.Plugin;
 
 public interface HtmlRenderer<T extends HtmlResult> extends Plugin {
     String render(T result, Configuration config);

File: flyway-reports/src/main/java/org/flywaydb/reports/output/DashboardResult.java
Patch:
@@ -1,6 +1,6 @@
 /*-
  * ========================LICENSE_START=================================
- * flyway-core
+ * flyway-reports
  * ========================================================================
  * Copyright (C) 2010 - 2024 Red Gate Software Ltd
  * ========================================================================
@@ -17,12 +17,13 @@
  * limitations under the License.
  * =========================LICENSE_END==================================
  */
-package org.flywaydb.core.api.output;
+package org.flywaydb.reports.output;
 
 import lombok.Getter;
 import lombok.Setter;
 
 import java.util.List;
+import org.flywaydb.core.api.output.HtmlResult;
 
 @Getter
 @Setter

File: flyway-reports/src/main/java/org/flywaydb/reports/output/HoldingRenderer.java
Patch:
@@ -1,6 +1,6 @@
 /*-
  * ========================LICENSE_START=================================
- * flyway-core
+ * flyway-reports
  * ========================================================================
  * Copyright (C) 2010 - 2024 Red Gate Software Ltd
  * ========================================================================
@@ -17,10 +17,10 @@
  * limitations under the License.
  * =========================LICENSE_END==================================
  */
-package org.flywaydb.core.api.output;
+package org.flywaydb.reports.output;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.extensibility.HtmlRenderer;
+import org.flywaydb.reports.api.extensibility.HtmlRenderer;
 
 public class HoldingRenderer implements HtmlRenderer<HoldingResult> {
     @Override

File: flyway-reports/src/main/java/org/flywaydb/reports/output/HoldingResult.java
Patch:
@@ -1,6 +1,6 @@
 /*-
  * ========================LICENSE_START=================================
- * flyway-core
+ * flyway-reports
  * ========================================================================
  * Copyright (C) 2010 - 2024 Red Gate Software Ltd
  * ========================================================================
@@ -17,10 +17,11 @@
  * limitations under the License.
  * =========================LICENSE_END==================================
  */
-package org.flywaydb.core.api.output;
+package org.flywaydb.reports.output;
 
 import lombok.Getter;
 import lombok.Setter;
+import org.flywaydb.core.api.output.HtmlResult;
 
 @Getter
 @Setter

File: flyway-reports/src/main/java/org/flywaydb/reports/output/HtmlTableRenderer.java
Patch:
@@ -1,6 +1,6 @@
 /*-
  * ========================LICENSE_START=================================
- * flyway-core
+ * flyway-reports
  * ========================================================================
  * Copyright (C) 2010 - 2024 Red Gate Software Ltd
  * ========================================================================
@@ -17,7 +17,7 @@
  * limitations under the License.
  * =========================LICENSE_END==================================
  */
-package org.flywaydb.core.api.output;
+package org.flywaydb.reports.output;
 
 import org.flywaydb.core.api.FlywayException;
 

File: flyway-reports/src/main/java/org/flywaydb/reports/utils/HtmlUtils.java
Patch:
@@ -1,6 +1,6 @@
 /*-
  * ========================LICENSE_START=================================
- * flyway-core
+ * flyway-reports
  * ========================================================================
  * Copyright (C) 2010 - 2024 Red Gate Software Ltd
  * ========================================================================
@@ -17,7 +17,7 @@
  * limitations under the License.
  * =========================LICENSE_END==================================
  */
-package org.flywaydb.core.internal.util;
+package org.flywaydb.reports.utils;
 
 import org.apache.commons.text.StringEscapeUtils;
 import org.flywaydb.core.api.configuration.Configuration;
@@ -29,7 +29,7 @@
 import java.io.FileWriter;
 import java.time.format.DateTimeFormatter;
 
-import static org.flywaydb.core.internal.reports.html.HtmlReportGenerator.generateHtml;
+import static org.flywaydb.reports.html.HtmlReportGenerator.generateHtml;
 import static org.flywaydb.core.internal.util.FileUtils.createDirIfNotExists;
 
 public class HtmlUtils {

File: flyway-commandline/src/main/java/org/flywaydb/commandline/configuration/ModernConfigurationManager.java
Patch:
@@ -40,6 +40,7 @@
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
@@ -264,7 +265,7 @@ private void processParametersByNamespace(String namespace, ConfigurationModel c
 
                 final Map<String, Object> finalValues = values;
                 Arrays.stream(configurationExtension.getClass().getDeclaredFields())
-                    .filter(f -> List.of(List.class, String[].class).contains(f.getType()))
+                    .filter(f -> List.of(Collection.class, List.class, String[].class).contains(f.getType()))
                     .forEach(f -> {
                         String fieldName = f.getName();
                         Object fieldValue = finalValues.get(fieldName);

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -286,6 +286,7 @@ private void applyMigrations(final LinkedHashMap<MigrationInfoImpl, Boolean> gro
         } catch (FlywayMigrateException e) {
             MigrationInfo migration = e.getMigration();
             String failedMsg = "Migration of " + toMigrationText(migration, e.isExecutableInTransaction(), e.isOutOfOrder()) + " failed!";
+            stopWatch.stop();
             int executionTime = (int) stopWatch.getTotalTimeMillis();
             
             migrateResult.putFailedMigration(migration, executionTime);
@@ -295,7 +296,6 @@ private void applyMigrations(final LinkedHashMap<MigrationInfoImpl, Boolean> gro
                 migrateResult.markAsRolledBack(group.keySet().stream().toList());
             } else {
                 LOG.error(failedMsg + " Please restore backups and roll back database and code!");
-                stopWatch.stop();
                 schemaHistory.addAppliedMigration(migration.getVersion(), migration.getDescription(),
                                                   migration.getType(), migration.getScript(), migration.getChecksum(), executionTime, false);
             }

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/ParsingContext.java
Patch:
@@ -83,7 +83,7 @@ public void populate(Database database, Configuration configuration) {
 
         placeholders.put(generateName(USER_PLACEHOLDER,configuration), currentUser);
         placeholders.put(generateName(TIMESTAMP_PLACEHOLDER,configuration), new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
-        placeholders.put(generateName(WORKING_DIRECTORY_PLACEHOLDER,configuration), System.getProperty("user.dir"));
+        placeholders.put(generateName(WORKING_DIRECTORY_PLACEHOLDER,configuration), configuration.getWorkingDirectory() != null ? configuration.getWorkingDirectory() :  System.getProperty("user.dir"));
         placeholders.put(generateName(TABLE_PLACEHOLDER,configuration), configuration.getTable());
         placeholders.put(generateName(ENVIRONMENT_PLACEHOLDER, configuration), configuration.getCurrentEnvironmentName());
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/StopWatch.java
Patch:
@@ -42,6 +42,7 @@ private long nanoTime() {
 
     /**
      * @return The total run time in millis of the stop watch between start and stop calls.
+     * Or an undefined number if stop has not been called.
      */
     public long getTotalTimeMillis() {
         long duration = stop - start;

File: flyway-commandline/src/main/java/org/flywaydb/commandline/configuration/ModernConfigurationManager.java
Patch:
@@ -115,6 +115,8 @@ public Configuration getConfiguration(CommandLineArguments commandLineArguments)
                     if(entry.getKey().startsWith("jdbcProperties.")) {
                         envValueObject.computeIfAbsent("jdbcProperties", s -> new HashMap<String, String>());
                         ((Map<String, String>)envValueObject.get("jdbcProperties")).put(entry.getKey().substring("jdbcProperties.".length()), entry.getValue());
+                    } else if (entry.getKey().equals("schemas") || entry.getKey().equals("jarDirs")) {
+                        envValueObject.put(entry.getKey(), Arrays.stream(entry.getValue().split(",")).map(String::trim).toList());
                     } else {
                         envValueObject.put(entry.getKey(), entry.getValue());
                     }

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -245,7 +245,7 @@ public MigrationInfoService info() {
         if (isExperimentalModeActivated() && canUseExperimentalMode(configuration)) {
             final var verb = configuration.getPluginRegister().getPlugins(VerbExtension.class).stream().filter(verbExtension -> verbExtension.handlesVerb("info")).findFirst();
             if (verb.isPresent()) {
-                return (MigrationInfoService) verb.get().executeVerb();
+                return (MigrationInfoService) verb.get().executeVerb(configuration);
             }
         }
         return flywayExecutor.execute((migrationResolver, schemaHistory, database, defaultSchema, schemas, callbackExecutor, statementInterceptor) -> {

File: flyway-core/src/main/java/org/flywaydb/core/FlywayExecutor.java
Patch:
@@ -194,8 +194,8 @@ public <T> T execute(Command<T> command, boolean scannerRequired, FlywayTelemetr
 
             database.ensureSupported(configuration);
 
-            DefaultCallbackExecutor callbackExecutor = new DefaultCallbackExecutor(configuration, database, defaultSchema, prepareCallbacks(
-                    database, resourceProvider, jdbcConnectionFactory, sqlScriptFactory, statementInterceptor, defaultSchema, parsingContext));
+            DefaultCallbackExecutor callbackExecutor = new DefaultCallbackExecutor(configuration, database, defaultSchema, flywayTelemetryManager, prepareCallbacks(
+                    database, resourceProvider, jdbcConnectionFactory, sqlScriptFactory, statementInterceptor, defaultSchema, parsingContext, flywayTelemetryManager));
 
             SqlScriptExecutorFactory sqlScriptExecutorFactory = databaseType.createSqlScriptExecutorFactory(jdbcConnectionFactory, callbackExecutor, statementInterceptor);
 
@@ -274,7 +274,7 @@ private Pair<ResourceProvider, ClassProvider<JavaMigration>> createResourceAndCl
     private List<Callback> prepareCallbacks(Database database, ResourceProvider resourceProvider,
                                             JdbcConnectionFactory jdbcConnectionFactory,
                                             SqlScriptFactory sqlScriptFactory, StatementInterceptor statementInterceptor,
-                                            Schema schema, ParsingContext parsingContext) {
+                                            Schema schema, ParsingContext parsingContext, FlywayTelemetryManager flywayTelemetryManager) {
         List<Callback> effectiveCallbacks = new ArrayList<>();
         CallbackExecutor callbackExecutor = NoopCallbackExecutor.INSTANCE;
 

File: flyway-core/src/main/java/org/flywaydb/core/api/executor/MigrationExecutor.java
Patch:
@@ -20,6 +20,8 @@
 package org.flywaydb.core.api.executor;
 
 import java.sql.SQLException;
+import java.util.List;
+import org.flywaydb.core.internal.jdbc.Results;
 
 /**
  * Executes a migration.
@@ -31,7 +33,7 @@ public interface MigrationExecutor {
      * @param context The context to use to execute the migration against the DB.
      * @throws SQLException when the execution of a statement failed.
      */
-    void execute(Context context) throws SQLException;
+    List<Results> execute(Context context) throws SQLException;
 
     /**
      * Whether the execution can take place inside a transaction. Almost all implementation should return {@code true}.

File: flyway-core/src/main/java/org/flywaydb/core/api/resource/LoadableResource.java
Patch:
@@ -20,6 +20,7 @@
 package org.flywaydb.core.api.resource;
 
 import java.io.Reader;
+import java.util.Objects;
 
 /**
  * A loadable resource.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/RootTelemetryModel.java
Patch:
@@ -41,6 +41,7 @@ public class RootTelemetryModel {
     private boolean isTrial;
     private boolean isSignedIn;
     private String containerType;
+    private String secretsManagementType;
 
     private Instant startTime = Instant.now();
 }

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/VerbExtension.java
Patch:
@@ -19,9 +19,11 @@
  */
 package org.flywaydb.core.extensibility;
 
+import org.flywaydb.core.api.configuration.Configuration;
+
 public interface VerbExtension extends Plugin {
 
     boolean handlesVerb(String verb);
 
-    Object executeVerb();
+    Object executeVerb(Configuration configuration);
 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/SqlScriptExecutor.java
Patch:
@@ -19,7 +19,9 @@
  */
 package org.flywaydb.core.internal.sqlscript;
 
+import java.util.List;
 import org.flywaydb.core.api.configuration.Configuration;
+import org.flywaydb.core.internal.jdbc.Results;
 
 /**
  * Executor for SQL scripts.
@@ -30,5 +32,5 @@ public interface SqlScriptExecutor {
      *
      * @param sqlScript The SQL script.
      */
-    void execute(SqlScript sqlScript, Configuration config);
+    List<Results> execute(SqlScript sqlScript, Configuration config);
 }

File: flyway-database/flyway-database-sybasease/src/main/java/org/flywaydb/database/sybasease/SybaseASEDatabase.java
Patch:
@@ -167,11 +167,11 @@ boolean getDdlInTranOption() {
             String getDatabaseMetadataQuery = "sp_helpdb " + databaseName + " -- ";
             Results results = getMainConnection().getJdbcTemplate().executeStatement(getDatabaseMetadataQuery);
             for (int resultsIndex = 0; resultsIndex < results.getResults().size(); resultsIndex++) {
-                List<String> columns = results.getResults().get(resultsIndex).getColumns();
+                List<String> columns = results.getResults().get(resultsIndex).columns();
                 if (columns != null) {
                     int statusIndex = getStatusIndex(columns);
                     if (statusIndex > -1) {
-                        String options = results.getResults().get(resultsIndex).getData().get(0).get(statusIndex);
+                        String options = results.getResults().get(resultsIndex).data().get(0).get(statusIndex);
                         return options.contains("ddl in tran");
                     }
                 }

File: flyway-database/flyway-gcp-spanner/src/main/java/org/flywaydb/database/spanner/SpannerSchema.java
Patch:
@@ -149,7 +149,7 @@ private List<String[]> doAllForeignKeys() {
                                                                      "AND TABLE_SCHEMA=''");
 
         for (Result result : foreignKeyRs.getResults()) {
-            for (List<String> row : result.getData()) {
+            for (List<String> row : result.data()) {
                 String[] foreignKeyAndTable = {row.get(0), row.get(1)};
                 foreignKeyAndTableList.add(foreignKeyAndTable);
             }

File: flyway-database/flyway-sqlserver/src/main/java/org/flywaydb/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -381,6 +381,8 @@ public String getDatabaseHosting() {
             } else if (code == 8) {
                 return DATABASE_HOSTING_AZURE_SQL_MANAGED_INSTANCE;
             }
+        } else if (getMainConnection().isAwsRds()) {
+            return DATABASE_HOSTING_AWS_RDS;
         } else {
             return super.getDatabaseHosting();
         }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -300,6 +300,8 @@ private static OperationResult executeOperation(Flyway flyway, String operation,
         }
 
         if (configuration.getPluginRegister().getPlugin(PublishingConfigurationExtension.class).isPublishResult()){
+            LOG.warn("flyway.publishResult is enabled. This feature is experimental in the version of flyway "
+                   + "you're currently using. Please upgrade to the latest version.");
             publishOperationResult(configuration, result);
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -630,6 +630,7 @@ public interface Configuration {
 
     /**
      * Get the Database type determined by the URL or Datasource
+     * If there are multiple matching DatabaseTypes for the URL, the first candidate will be returned.
      */
     DatabaseType getDatabaseType();
 

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CommandResultFactory.java
Patch:
@@ -55,9 +55,9 @@ public static InfoResult createInfoResult(Configuration configuration, Database
                 allSchemasEmpty);
     }
 
-    public static MigrateResult createMigrateResult(String databaseName, Configuration configuration) {
+    public static MigrateResult createMigrateResult(String databaseName, String databaseType, Configuration configuration) {
         String flywayVersion = VersionPrinter.getVersion();
-        return new MigrateResult(flywayVersion, databaseName, String.join(", ", configuration.getSchemas()));
+        return new MigrateResult(flywayVersion, databaseName, String.join(", ", configuration.getSchemas()), databaseType);
     }
 
     public static CleanResult createCleanResult(String databaseName) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/ResolvedEnvironment.java
Patch:
@@ -24,6 +24,7 @@
 
 import java.util.List;
 import java.util.Map;
+import org.flywaydb.core.internal.configuration.resolvers.ProvisionerMode;
 
 @Getter
 @Setter
@@ -39,6 +40,7 @@ public class ResolvedEnvironment {
     private Integer connectRetriesInterval;
     private String initSql;
     private Map<String, String> jdbcProperties;
+    private ProvisionerMode provisionerMode;
 
     public EnvironmentModel toEnvironmentModel() {
         EnvironmentModel result = new EnvironmentModel();

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentResolver.java
Patch:
@@ -89,6 +89,7 @@ public ResolvedEnvironment resolve(final String environmentName, final Environme
         result.setPassword(context.resolveValue(environment.getPassword(), resolveProgress));
         result.setUser(context.resolveValue(environment.getUser(), resolveProgress));
         result.setUrl(context.resolveValue(environment.getUrl(), resolveProgress));
+        result.setProvisionerMode(mode);
 
         if (mode == ProvisionerMode.Provision) {
             progress.log("Provisioning environment " + environmentName + " with " + provisioner.getName());

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/JdbcTemplate.java
Patch:
@@ -218,7 +218,7 @@ public Results executeStatement(String sql) {
         return results;
     }
 
-    private void extractWarnings(Results results, Statement statement) throws SQLException {
+    protected void extractWarnings(Results results, Statement statement) throws SQLException {
         SQLWarning warning = statement.getWarnings();
         while (warning != null) {
             int code = warning.getErrorCode();
@@ -249,7 +249,7 @@ public void extractErrors(Results results, SQLException e) {
         results.setException(e);
     }
 
-    private void extractResults(Results results, Statement statement, String sql, boolean hasResults) throws SQLException {
+    protected void extractResults(Results results, Statement statement, String sql, boolean hasResults) throws SQLException {
         // retrieve all results to ensure all errors are detected
         int updateCount = -1;
         while (hasResults || (updateCount = statement.getUpdateCount()) != -1) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/JsonUtils.java
Patch:
@@ -101,7 +101,7 @@ public static <T extends OperationResult> CompositeResult<T> appendIfExists(Stri
         return existingObject;
     }
 
-    public static Object parseJsonArray(String json) {
+    public static JsonArray parseJsonArray(String json) {
         return JsonParser.parseString(json).getAsJsonArray();
     }
 

File: flyway-database/flyway-database-db2/src/main/java/org/flywaydb/database/db2/DB2DatabaseType.java
Patch:
@@ -58,7 +58,7 @@ public String getDriverClass(String url, ClassLoader classLoader) {
 
     @Override
     public boolean handlesDatabaseProductNameAndVersion(String databaseProductName, String databaseProductVersion, Connection connection) {
-        return databaseProductName.startsWith("DB2");
+        return databaseProductName.startsWith("DB2") && !databaseProductVersion.startsWith("DSN");
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/FlywayExecutor.java
Patch:
@@ -169,6 +169,7 @@ public <T> T execute(Command<T> command, boolean scannerRequired, FlywayTelemetr
                 }
 
                 LOG.info("Database: " + redactJdbcUrl(jdbcConnectionFactory.getJdbcUrl()) + " (" + jdbcConnectionFactory.getProductName() + ")");
+                LOG.debug("Database Type: " + database.getDatabaseType().getName());
                 LOG.debug("Driver: " + jdbcConnectionFactory.getDriverInfo());
 
                 if (flywayTelemetryManager != null) {

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Event.java
Patch:
@@ -52,19 +52,16 @@ public enum Event {
     /**
      * Fired before each individual statement in a migration is executed. This event will be fired within the same transaction (if any)
      * as the migration and can be used for things like asserting a statement complies with policy (for example: no grant statements allowed).
-     * <p><i>Flyway Teams Edition only</i></p>
      */
     BEFORE_EACH_MIGRATE_STATEMENT("beforeEachMigrateStatement"),
     /**
      * Fired after each individual statement in a migration that succeeded. This event will be fired within the same transaction (if any)
      * as the migration.
-     * <p><i>Flyway Teams Edition only</i></p>
      */
     AFTER_EACH_MIGRATE_STATEMENT("afterEachMigrateStatement"),
     /**
      * Fired after each individual statement in a migration that failed. This event will be fired within the same transaction (if any)
      * as the migration.
-     * <p><i>Flyway Teams Edition only</i></p>
      */
     AFTER_EACH_MIGRATE_STATEMENT_ERROR("afterEachMigrateStatementError"),
     /**

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -412,10 +412,9 @@ public interface Configuration {
     /**
      * Ignore migrations that match this comma-separated list of patterns when validating migrations.
      * Each pattern is of the form <migration_type>:<migration_state>
-     * See https://documentation.red-gate.com/fd/ignore-migration-patterns-184127507.html for full details
+     * See https://documentation.red-gate.com/flyway/flyway-cli-and-api/configuration/parameters/flyway/ignore-migration-patterns for full details
      * Example: repeatable:missing,versioned:pending,*:failed
      * (default: *:future)
-     * <i>Flyway Teams only</i>
      */
     ValidatePattern[] getIgnoreMigrationPatterns();
 

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/LicenseGuard.java
Patch:
@@ -30,6 +30,7 @@
 
 
 
+
 import java.util.Date;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicReference;
@@ -42,7 +43,6 @@ public class LicenseGuard {
 
 
 
-
      private static final FlywayPermit OSS_PERMIT = new FlywayPermit("Anonymous", null, null, false, false, false);
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/TomlUtils.java
Patch:
@@ -101,7 +101,7 @@ private static ConfigurationModel toConfiguration(Map<String, Object> properties
         }
     }
 
-    private static Map<String, Object> unflattenMap(Map<String, String> map) {
+    public static Map<String, Object> unflattenMap(Map<String, String> map) {
         Map<String, Object> result = new HashMap<>();
         for (Map.Entry<String, String> entry : map.entrySet()) {
             String[] parts = entry.getKey().split("\\.");

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/EnvironmentModel.java
Patch:
@@ -41,7 +41,6 @@ public class EnvironmentModel {
     private String driver;
     private List<String> schemas = new ArrayList<>();
     private List<String> jarDirs = new ArrayList<>();
-    private String token;
     private Integer connectRetries;
     private Integer connectRetriesInterval;
     private String initSql;
@@ -56,7 +55,6 @@ public EnvironmentModel merge(EnvironmentModel otherPojo) {
         result.driver = driver.merge(otherPojo.driver);
         result.schemas = schemas.merge(otherPojo.schemas);
         result.jarDirs = jarDirs.merge(otherPojo.jarDirs);
-        result.token = token.merge(otherPojo.token);
         result.connectRetries = connectRetries.merge(otherPojo.connectRetries);
         result.connectRetriesInterval = connectRetriesInterval.merge(otherPojo.connectRetriesInterval);
         result.initSql = initSql.merge(otherPojo.initSql);

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/ResolvedEnvironment.java
Patch:
@@ -48,7 +48,6 @@ public EnvironmentModel toEnvironmentModel() {
         result.setDriver(driver);
         result.setSchemas(schemas);
         result.setJarDirs(jarDirs);
-        result.setToken(token);
         result.setConnectRetries(connectRetries);
         result.setConnectRetriesInterval(connectRetriesInterval);
         result.setInitSql(initSql);

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentResolver.java
Patch:
@@ -89,7 +89,6 @@ public ResolvedEnvironment resolve(final String environmentName, final Environme
         result.setPassword(context.resolveValue(environment.getPassword(), resolveProgress));
         result.setUser(context.resolveValue(environment.getUser(), resolveProgress));
         result.setUrl(context.resolveValue(environment.getUrl(), resolveProgress));
-        result.setToken(context.resolveValue(environment.getToken(), resolveProgress));
 
         if (mode == ProvisionerMode.Provision) {
             progress.log("Provisioning environment " + environmentName + " with " + provisioner.getName());

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/FlywaySqlScriptException.java
Patch:
@@ -45,7 +45,7 @@ public class FlywaySqlScriptException extends FlywaySqlException {
      * @param sqlException Cause of the problem.
      */
     public FlywaySqlScriptException(Resource resource, SqlStatement statement, SQLException sqlException) {
-        super(resource == null ? "Script failed" : "Migration " + resource.getFilename() + " failed", sqlException);
+        super(resource == null ? "Script failed" : "Script " + resource.getFilename() + " failed", sqlException);
         this.resource = resource;
         this.statement = statement;
     }

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayExtension.java
Patch:
@@ -343,10 +343,9 @@ public class FlywayExtension {
     /**
      * Ignore migrations that match this comma-separated list of patterns when validating migrations.
      * Each pattern is of the form <migration_type>:<migration_state>
-     * See https://documentation.red-gate.com/fd/ignore-migration-patterns-184127507.html for full details
+     * See https://documentation.red-gate.com/flyway/flyway-cli-and-api/configuration/parameters/flyway/ignore-migration-patterns for full details
      * Example: repeatable:missing,versioned:pending,*:failed
      * (default: *:future)
-     * <i>Flyway Teams only</i>
      */
     public String[] ignoreMigrationPatterns;
 

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -384,10 +384,9 @@ public abstract class AbstractFlywayTask extends DefaultTask {
     /**
      * Ignore migrations that match this comma-separated list of patterns when validating migrations.
      * Each pattern is of the form <migration_type>:<migration_state>
-     * See https://documentation.red-gate.com/fd/ignore-migration-patterns-184127507.html for full details
+     * See https://documentation.red-gate.com/flyway/flyway-cli-and-api/configuration/parameters/flyway/ignore-migration-patterns for full details
      * Example: repeatable:missing,versioned:pending,*:failed
      * (default: *:future)
-     * <i>Flyway Teams only</i>
      */
     public String[] ignoreMigrationPatterns;
 

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -383,10 +383,9 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
     /**
      * Ignore migrations that match this comma-separated list of patterns when validating migrations.
      * Each pattern is of the form <migration_type>:<migration_state>
-     * See https://documentation.red-gate.com/fd/ignore-migration-patterns-184127507.html for full details
+     * See https://documentation.red-gate.com/flyway/flyway-cli-and-api/configuration/parameters/flyway/ignore-migration-patterns for full details
      * Example: repeatable:missing,versioned:pending,*:failed
      * (default: *:future)
-     * <i>Flyway Teams only</i>
      */
     @Parameter
     private String[] ignoreMigrationPatterns;

File: flyway-commandline/src/main/java/org/flywaydb/commandline/MavenVersionChecker.java
Patch:
@@ -85,7 +85,7 @@ public static void checkForVersionUpdates() {
             MigrationVersion latest = MigrationVersion.fromVersion(metadata.getVersioning().getRelease());
 
             if (current.compareTo(latest) < 0) {
-                LOG.warn("This version of Flyway is out of date. Upgrade to Flyway " + latest + ": "
+                LOG.info("A more recent version of Flyway is available. Find out more about Flyway " + latest + " at "
                                  + FlywayDbWebsiteLinks.STAYING_UP_TO_DATE + "\n");
             }
         } catch (Exception e) {

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -18,7 +18,7 @@
 import lombok.CustomLog;
 import lombok.Setter;
 import lombok.SneakyThrows;
-import org.flywaydb.core.api.ErrorCode;
+import org.flywaydb.core.api.CoreErrorCode;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.MigrationInfoService;
 import org.flywaydb.core.api.callback.Event;
@@ -191,7 +191,7 @@ public MigrateResult migrate() throws FlywayException {
                                     throw new FlywayException("Found non-empty schema(s) "
                                                                       + StringUtils.collectionToCommaDelimitedString(nonEmptySchemas)
                                                                       + " but no schema history table. Use baseline()"
-                                                                      + " or set baselineOnMigrate to true to initialize the schema history table.", ErrorCode.NON_EMPTY_SCHEMA_WITHOUT_SCHEMA_HISTORY_TABLE);
+                                                                      + " or set baselineOnMigrate to true to initialize the schema history table.", CoreErrorCode.NON_EMPTY_SCHEMA_WITHOUT_SCHEMA_HISTORY_TABLE);
                                 }
                             }
                         }

File: flyway-core/src/main/java/org/flywaydb/core/api/FlywayException.java
Patch:
@@ -23,7 +23,7 @@
 public class FlywayException extends RuntimeException {
 
     @Getter
-    private ErrorCode errorCode = ErrorCode.ERROR;
+    private ErrorCode errorCode = CoreErrorCode.ERROR;
 
     /**
      * Creates a new FlywayException with this message, cause, and error code.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/ErrorOutput.java
Patch:
@@ -19,6 +19,7 @@
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import org.flywaydb.core.api.ErrorCode;
+import org.flywaydb.core.api.CoreErrorCode;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.command.DbMigrate;
 import org.flywaydb.core.internal.sqlscript.FlywaySqlScriptException;
@@ -76,7 +77,7 @@ public static ErrorOutput fromException(final Exception exception) {
         }
 
         return new ErrorOutput(
-            ErrorCode.FAULT,
+            CoreErrorCode.FAULT,
             message == null ? "Fault occurred" : message,
             getStackTrace(exception),
             null,

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -17,6 +17,7 @@
 
 import lombok.CustomLog;
 import lombok.Getter;
+import org.flywaydb.core.api.CoreErrorCode;
 import org.flywaydb.core.api.ErrorCode;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.MigrationInfo;
@@ -429,9 +430,9 @@ public static class FlywayMigrateException extends FlywayException {
 
         public ErrorCode getMigrationErrorCode() {
             if (migration.getVersion() != null) {
-                return ErrorCode.FAILED_VERSIONED_MIGRATION;
+                return CoreErrorCode.FAILED_VERSIONED_MIGRATION;
             } else {
-                return ErrorCode.FAILED_REPEATABLE_MIGRATION;
+                return CoreErrorCode.FAILED_REPEATABLE_MIGRATION;
             }
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.command;
 
 import lombok.CustomLog;
-import org.flywaydb.core.api.ErrorCode;
+import org.flywaydb.core.api.CoreErrorCode;
 import org.flywaydb.core.api.ErrorDetails;
 import org.flywaydb.core.api.callback.Event;
 import org.flywaydb.core.api.configuration.Configuration;
@@ -85,7 +85,7 @@ public ValidateResult validate() {
         if (!schema.exists()) {
             if (!migrationResolver.resolveMigrations(configuration).isEmpty() && !ValidatePatternUtils.isPendingIgnored(ignorePatterns)) {
                 String validationErrorMessage = "Schema " + schema + " doesn't exist yet";
-                ErrorDetails validationError = new ErrorDetails(ErrorCode.SCHEMA_DOES_NOT_EXIST, validationErrorMessage);
+                ErrorDetails validationError = new ErrorDetails(CoreErrorCode.SCHEMA_DOES_NOT_EXIST, validationErrorMessage);
                 return CommandResultFactory.createValidateResult(database.getCatalog(), validationError, 0, null, new ArrayList<>());
             }
             return CommandResultFactory.createValidateResult(database.getCatalog(), null, 0, null, new ArrayList<>());
@@ -135,7 +135,7 @@ public ValidateResult validate() {
             }
             callbackExecutor.onEvent(Event.AFTER_VALIDATE);
         } else {
-            validationError = new ErrorDetails(ErrorCode.VALIDATE_ERROR, "Migrations have failed validation");
+            validationError = new ErrorDetails(CoreErrorCode.VALIDATE_ERROR, "Migrations have failed validation");
             callbackExecutor.onEvent(Event.AFTER_VALIDATE_ERROR);
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigurationValidator.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.configuration;
 
 import java.io.File;
-import org.flywaydb.core.api.ErrorCode;
+import org.flywaydb.core.api.CoreErrorCode;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.configuration.Configuration;
 
@@ -29,7 +29,7 @@ public void validate(Configuration configuration) {
             throw new FlywayException("flyway.batch configuration option is incompatible with flyway.errorOverrides.\n" +
                                               "It is impossible to intercept the errors in a batch process.\n" +
                                               "Set flyway.batch to false, or remove the error overrides.",
-                                      ErrorCode.CONFIGURATION);
+                                      CoreErrorCode.CONFIGURATION);
         }
 
         if (configuration.getDataSource() == null) {
@@ -38,7 +38,7 @@ public void validate(Configuration configuration) {
                 errorMessage += " Refer to the flyway.toml.example file in the /conf folder in the installation directory.";
             }
 
-            throw new FlywayException(errorMessage, ErrorCode.CONFIGURATION);
+            throw new FlywayException(errorMessage, CoreErrorCode.CONFIGURATION);
         }
 
         for (String key : configuration.getPlaceholders().keySet()) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/FlywayModel.java
Patch:
@@ -59,6 +59,7 @@ public class FlywayModel {
     private List<String> sqlMigrationSuffixes;
     private Boolean cleanDisabled;
     private Boolean cleanOnValidationError;
+    private Boolean communityDBSupportEnabled;
     private List<String> locations;
     private String table;
     private String tablespace;
@@ -116,6 +117,7 @@ public static FlywayModel defaults(){
          model.sqlMigrationSuffixes = Arrays.asList(".sql");
          model.cleanDisabled = true;
          model.cleanOnValidationError = false;
+         model.communityDBSupportEnabled = true;
          model.locations = new ArrayList<>(Collections.singletonList("db/migration"));
          model.target = "latest";
          model.table = "flyway_schema_history";
@@ -171,6 +173,7 @@ public FlywayModel merge(FlywayModel otherPojo) {
         result.sqlMigrationSuffixes = sqlMigrationSuffixes.merge(otherPojo.sqlMigrationSuffixes);
         result.cleanDisabled = cleanDisabled.merge(otherPojo.cleanDisabled);
         result.cleanOnValidationError = cleanOnValidationError.merge(otherPojo.cleanOnValidationError);
+        result.communityDBSupportEnabled = communityDBSupportEnabled.merge(otherPojo.communityDBSupportEnabled);
         result.locations = locations.merge(otherPojo.locations);
         result.table = table.merge(otherPojo.table);
         result.tablespace = tablespace.merge(otherPojo.tablespace);

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentResolver.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 import org.flywaydb.core.ProgressLogger;
-import org.flywaydb.core.api.ErrorCode;
+import org.flywaydb.core.api.CoreErrorCode;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.extensibility.ConfigurationExtension;
@@ -105,7 +105,7 @@ private EnvironmentProvisioner getProvisioner(final String provisionerName, fina
             if (!environmentProvisioners.containsKey(provisionerName)) {
                 throw new FlywayException(
                     "Unknown provisioner '" + provisionerName + "' for environment " + context.getEnvironmentName(),
-                    ErrorCode.CONFIGURATION);
+                    CoreErrorCode.CONFIGURATION);
             }
             return environmentProvisioners.get(provisionerName);
         }
@@ -135,7 +135,7 @@ private ConfigurationExtension getResolverConfig(final EnvironmentModel environm
                 final var data = environmentModel.getResolvers().get(key);
                 return (ConfigurationExtension) new ObjectMapper().convertValue(data, clazz);
             } catch (final IllegalArgumentException e) {
-                throw new FlywayException("Error reading resolver configuration for resolver " + key, e, ErrorCode.CONFIGURATION);
+                throw new FlywayException("Error reading resolver configuration for resolver " + key, e, CoreErrorCode.CONFIGURATION);
             }
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseType.java
Patch:
@@ -42,6 +42,8 @@ public interface DatabaseType extends Plugin {
      */
     String getName();
 
+    List<String> getSupportedEngines();
+
     /**
      * @return The JDBC type used to represent {@code null} in prepared statements.
      */

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywaySqlException.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.exception;
 
-import org.flywaydb.core.api.ErrorCode;
+import org.flywaydb.core.api.CoreErrorCode;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.util.ExceptionUtils;
 import org.flywaydb.core.internal.util.StringUtils;
@@ -28,7 +28,7 @@
 public class FlywaySqlException extends FlywayException {
 
     public FlywaySqlException(String message, SQLException sqlException) {
-        super(message, sqlException, ErrorCode.DB_CONNECTION);
+        super(message, sqlException, CoreErrorCode.DB_CONNECTION);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoServiceImpl.java
Patch:
@@ -359,7 +359,7 @@ private void markAsDeleted(MigrationVersion version, List<Pair<AppliedMigration,
             if (!av.getLeft().getType().isSynthetic() && version.equals(av.getLeft().getVersion())) {
                 if (av.getRight().deleted) {
                     throw new FlywayException("Corrupted schema history: multiple delete entries for version " + version,
-                                              ErrorCode.DUPLICATE_DELETED_MIGRATION);
+                                              CoreErrorCode.DUPLICATE_DELETED_MIGRATION);
                 } else {
                     av.getRight().deleted = true;
                     return;

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/JdbcConnectionFactory.java
Patch:
@@ -70,7 +70,7 @@ public JdbcConnectionFactory(DataSource dataSource, Configuration configuration,
         this.configuration = configuration;
 
         firstConnection = JdbcUtils.openConnection(dataSource, connectRetries, connectRetriesInterval);
-        this.databaseType = DatabaseTypeRegister.getDatabaseTypeForConnection(firstConnection);
+        this.databaseType = DatabaseTypeRegister.getDatabaseTypeForConnection(firstConnection, configuration);
 
         final DatabaseMetaData databaseMetaData = JdbcUtils.getDatabaseMetaData(firstConnection);
         this.jdbcUrl = getJdbcUrl(databaseMetaData);

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/java/JavaMigrationExecutor.java
Patch:
@@ -47,7 +47,7 @@ public void execute(final Context context) throws SQLException {
         if (statementInterceptor != null) {
             statementInterceptor.javaMigration(javaMigration);
         } else {
-            DatabaseType databaseType = DatabaseTypeRegister.getDatabaseTypeForConnection(context.getConnection());
+            DatabaseType databaseType = DatabaseTypeRegister.getDatabaseTypeForConnection(context.getConnection(), context.getConfiguration());
 
             DatabaseExecutionStrategy strategy = databaseType.createExecutionStrategy(context.getConnection());
             strategy.execute(() -> {

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/script/ScriptMigrationExecutor.java
Patch:
@@ -54,7 +54,7 @@ public void execute(final Context context) throws SQLException {
         } else if (context.getConnection() == null) {
             executeOnce(context);
         } else {
-            DatabaseType databaseType = DatabaseTypeRegister.getDatabaseTypeForConnection(context.getConnection());
+            DatabaseType databaseType = DatabaseTypeRegister.getDatabaseTypeForConnection(context.getConnection(), context.getConfiguration());
 
             DatabaseExecutionStrategy strategy = databaseType.createExecutionStrategy(context.getConnection());
             strategy.execute(() -> {

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationExecutor.java
Patch:
@@ -50,7 +50,7 @@ public class SqlMigrationExecutor implements MigrationExecutor {
 
     @Override
     public void execute(final Context context) throws SQLException {
-        DatabaseType databaseType = DatabaseTypeRegister.getDatabaseTypeForConnection(context.getConnection());
+        DatabaseType databaseType = DatabaseTypeRegister.getDatabaseTypeForConnection(context.getConnection(), context.getConfiguration());
 
         DatabaseExecutionStrategy strategy = databaseType.createExecutionStrategy(context.getConnection());
         strategy.execute(() -> {

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/ClasspathClassScanner.java
Patch:
@@ -35,7 +35,7 @@ public ClasspathClassScanner(ClassLoader classLoader) {
 
     public List<String> scanForType(String location, Class<?> classType, boolean errorOnNotFound) {
         ClassPathScanner<?> s = new ClassPathScanner<>(classType, classLoader, Charset.defaultCharset(), new Location("classpath:" + location),
-                                                       resourceNameCache, locationScannerCache, errorOnNotFound);
+                                                       resourceNameCache, locationScannerCache, errorOnNotFound, false);
 
         List<String> discoveredTypes = new ArrayList<>();
         for (LoadableResource resource : s.scanForResources()) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/Scanner.java
Patch:
@@ -93,7 +93,7 @@ public Scanner (
                     LOG.error("Can't read location " + location + "; AWS SDK not found");
                 }
             } else {
-                ResourceAndClassScanner<I> resourceAndClassScanner = new ClassPathScanner<>(implementedInterface, classLoader, encoding, location, resourceNameCache, locationScannerCache, throwOnMissingLocations);
+                ResourceAndClassScanner<I> resourceAndClassScanner = new ClassPathScanner<>(implementedInterface, classLoader, encoding, location, resourceNameCache, locationScannerCache, throwOnMissingLocations, stream);
                 resources.addAll(resourceAndClassScanner.scanForResources());
                 classes.addAll(resourceAndClassScanner.scanForClasses());
             }

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/filesystem/FileSystemScanner.java
Patch:
@@ -35,7 +35,7 @@ public class FileSystemScanner {
     private final Charset defaultEncoding;
     private final boolean detectEncoding;
     private final boolean throwOnMissingLocations;
-    private boolean stream = false;
+    private final boolean stream;
     private Configuration config;
 
     public FileSystemScanner(boolean stream, Configuration config) {

File: flyway-database/flyway-database-mongodb/src/main/java/org/flywaydb/database/mongodb/MongoDBConnection.java
Patch:
@@ -25,7 +25,7 @@
 public class MongoDBConnection extends Connection<MongoDBDatabase> {
     protected MongoDBConnection(MongoDBDatabase database, java.sql.Connection connection) {
         super(database, connection);
-        this.jdbcTemplate = new MongoDBJdbcTemplate(connection);
+        this.jdbcTemplate = new MongoDBJdbcTemplate(connection, database.getDatabaseType());
         logPreviewFeature("MongoDB support");
     }
 

File: flyway-database/flyway-gcp-bigquery/src/main/java/org/flywaydb/database/bigquery/BigQueryConnection.java
Patch:
@@ -32,7 +32,7 @@ public class BigQueryConnection extends Connection<BigQueryDatabase> {
 
     BigQueryConnection(BigQueryDatabase database, java.sql.Connection connection) {
         super(database, connection);
-        this.jdbcTemplate = new BigQueryJdbcTemplate(connection);
+        this.jdbcTemplate = new BigQueryJdbcTemplate(connection, database.getDatabaseType());
     }
 
     @Override

File: flyway-database/flyway-gcp-bigquery/src/main/java/org/flywaydb/database/bigquery/BigQueryDatabaseType.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.flywaydb.database.bigquery;
 
+import java.util.List;
 import lombok.CustomLog;
 import org.flywaydb.core.api.ResourceProvider;
 import org.flywaydb.core.api.configuration.Configuration;
@@ -45,7 +46,7 @@ public class BigQueryDatabaseType extends BaseDatabaseType {
 
     @Override
     public String getName() {
-        return "BigQuery";
+        return "Google Big Query";
     }
 
     @Override

File: flyway-database/flyway-gcp-spanner/src/main/java/org/flywaydb/database/spanner/SpannerConnection.java
Patch:
@@ -25,7 +25,7 @@
 public class SpannerConnection extends Connection<SpannerDatabase> {
     protected SpannerConnection(SpannerDatabase database, java.sql.Connection connection) {
         super(database, connection);
-        this.jdbcTemplate = new SpannerJdbcTemplate(connection);
+        this.jdbcTemplate = new SpannerJdbcTemplate(connection, database.getDatabaseType());
     }
 
     @Override

File: flyway-database/flyway-gcp-spanner/src/main/java/org/flywaydb/database/spanner/SpannerJdbcTemplate.java
Patch:
@@ -16,6 +16,7 @@
 package org.flywaydb.database.spanner;
 
 import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.internal.database.DatabaseType;
 import org.flywaydb.core.internal.database.DatabaseTypeRegister;
 import org.flywaydb.core.internal.jdbc.JdbcNullTypes;
 import org.flywaydb.core.internal.jdbc.JdbcTemplate;
@@ -24,8 +25,8 @@
 
 public class SpannerJdbcTemplate extends JdbcTemplate {
 
-    public SpannerJdbcTemplate(Connection connection) {
-        super(connection, DatabaseTypeRegister.getDatabaseTypeForConnection(connection));
+    public SpannerJdbcTemplate(Connection connection, DatabaseType databaseType) {
+        super(connection, databaseType);
     }
 
     @Override

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -82,7 +82,7 @@ public static void main(String[] args) throws Exception {
         FlywayTelemetryManager flywayTelemetryManager = null;
         if (!StringUtils.hasText(System.getenv("REDGATE_DISABLE_TELEMETRY"))) {
             flywayTelemetryManager = new FlywayTelemetryManager(pluginRegister);
-            flywayTelemetryManager.setRootTelemetryModel(populateRootTelemetry(flywayTelemetryManager.getRootTelemetryModel(), null, false));
+            flywayTelemetryManager.setRootTelemetryModel(populateRootTelemetry(flywayTelemetryManager.getRootTelemetryModel(), null, null));
         }
 
         try {
@@ -102,7 +102,7 @@ public static void main(String[] args) throws Exception {
                 Configuration configuration = new ConfigurationManagerImpl().getConfiguration(commandLineArguments);
 
                 if (flywayTelemetryManager != null) {
-                    flywayTelemetryManager.setRootTelemetryModel(populateRootTelemetry(flywayTelemetryManager.getRootTelemetryModel(), configuration, LicenseGuard.getPermit(configuration).isRedgateEmployee()));
+                    flywayTelemetryManager.setRootTelemetryModel(populateRootTelemetry(flywayTelemetryManager.getRootTelemetryModel(), configuration, LicenseGuard.getPermit(configuration)));
                 }
 
                 if (!commandLineArguments.skipCheckForUpdate()) {

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/RootTelemetryModel.java
Patch:
@@ -35,6 +35,7 @@ public class RootTelemetryModel {
     private String applicationEdition;
     private boolean redgateEmployee;
     private boolean isTrial;
+    private boolean isSignedIn;
 
     private Instant startTime = Instant.now();
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/FlywayModel.java
Patch:
@@ -203,7 +203,7 @@ public FlywayModel merge(FlywayModel otherPojo) {
         result.failOnMissingLocations = failOnMissingLocations.merge(otherPojo.failOnMissingLocations);
         result.loggers = loggers.merge(otherPojo.loggers);
         result.defaultSchema = defaultSchema.merge(otherPojo.defaultSchema);
-        result.placeholders = placeholders.merge(otherPojo.placeholders);
+        result.placeholders = MergeUtils.merge(placeholders, otherPojo.placeholders, (a,b) -> b != null ? b : a);
         result.reportEnabled = reportEnabled.merge(otherPojo.reportEnabled);
         result.propertyResolvers = MergeUtils.merge(propertyResolvers, otherPojo.propertyResolvers, (a,b) -> b != null ? b : a); // TODO: more granular merge
         result.pluginConfigurations = MergeUtils.merge(pluginConfigurations, otherPojo.pluginConfigurations, (a,b) -> b != null ? b : a);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/CommunityDatabaseType.java
Patch:
@@ -16,10 +16,11 @@
 package org.flywaydb.core.internal.database.base;
 
 import static org.flywaydb.core.internal.util.FlywayDbWebsiteLinks.COMMUNITY_CONTRIBUTED_DATABASES;
+import org.flywaydb.core.internal.database.DatabaseType;
 
-public abstract class CommunityDatabaseType extends BaseDatabaseType{
+public interface CommunityDatabaseType extends DatabaseType {
 
-    final public String announcementForCommunitySupport() {
+     default String announcementForCommunitySupport() {
         return getName() + " is a community contributed database, see "+ COMMUNITY_CONTRIBUTED_DATABASES + " for more details";
     }
 

File: flyway-commandline/src/main/java/org/flywaydb/commandline/utils/TelemetryUtils.java
Patch:
@@ -52,7 +52,7 @@ public static RootTelemetryModel populateRootTelemetry(RootTelemetryModel rootTe
             rootTelemetryModel.setTrial(LicenseGuard.getPermit(configuration).isTrial());
             ConfigurationModel modernConfig = configuration.getModernConfig();
             if (modernConfig != null && StringUtils.hasText(modernConfig.getId())) {
-                rootTelemetryModel.setProjectId(EncryptionUtils.hashProjectId(modernConfig.getId(), "fur"));
+                rootTelemetryModel.setProjectId(EncryptionUtils.hashString(modernConfig.getId(), "fur"));
             }
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CommandResultFactory.java
Patch:
@@ -91,6 +91,7 @@ public static InfoOutput createInfoOutput(Set<MigrationInfo> undoableMigrations,
                               migrationInfo.getPhysicalLocation() != null ? migrationInfo.getPhysicalLocation() : "",
                               getUndoablePath(migrationInfo, undoableMigrations),
                               migrationInfo.getInstalledBy() != null ? migrationInfo.getInstalledBy() : "",
+                              migrationInfo.getShouldExecuteExpression(),
                               migrationInfo.getExecutionTime() != null ? migrationInfo.getExecutionTime() : 0);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/license/EncryptionUtils.java
Patch:
@@ -94,13 +94,13 @@ public static SealedObject fromByteArray(byte[] byteArray) throws IOException, C
         return (SealedObject) new ObjectInputStream(new ByteArrayInputStream(byteArray)).readObject();
     }
 
-    public static String hashProjectId(String projectId, String hashInput) {
-        if (projectId == null) {
+    public static String hashString(String strInput, String hashInput) {
+        if (strInput == null) {
             return null;
         }
         try {
             MessageDigest md = MessageDigest.getInstance("SHA-256");
-            md.update(projectId.getBytes(StandardCharsets.UTF_8));
+            md.update(strInput.getBytes(StandardCharsets.UTF_8));
             byte[] hash = md.digest(hashInput.getBytes(StandardCharsets.UTF_8));
             BigInteger number = new BigInteger(1, hash);
             String result = number.toString(16);

File: flyway-community-db-support/flyway-database-ignite/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinDatabase.java
Patch:
@@ -55,7 +55,7 @@ protected MigrationVersion determineVersion() {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         notifyDatabaseIsNotFormallySupported();
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseType.java
Patch:
@@ -240,8 +240,6 @@ SqlScriptExecutorFactory createSqlScriptExecutorFactory(
 
     String instantiateClassExtendedErrorMessage();
 
-    void printMessages(Configuration configuration);
-
     default List<String> getSpecialResourceFilenames(Configuration configuration) {
         return Collections.emptyList();
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Database.java
Patch:
@@ -100,7 +100,7 @@ private CompatibilityMode determineCompatibilityMode() {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         ensureDatabaseIsRecentEnough("1.2.137");
         recommendFlywayUpgradeIfNecessary("2.2.220");
         supportsDropSchemaCascade = getVersion().isAtLeast("1.4.200");

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteDatabase.java
Patch:
@@ -34,7 +34,7 @@ protected SQLiteConnection doGetConnection(Connection connection) {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         // The minimum should really be 3.7.2. However the SQLite driver quality is really hit and miss, so we can't
         // reliably detect this.
         // #2221: Older versions of the Xerial JDBC driver misreport 3.x versions as being 3.0.

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/filesystem/FileSystemScanner.java
Patch:
@@ -41,9 +41,7 @@ public class FileSystemScanner {
     public FileSystemScanner(boolean stream, Configuration config) {
         this.defaultEncoding = config.getEncoding();
         this.detectEncoding = config.isDetectEncoding();
-
-
-
+        this.stream = stream;
         this.throwOnMissingLocations = config.isFailOnMissingLocations();
         this.config = config;
     }

File: flyway-database/flyway-database-db2/src/main/java/org/flywaydb/database/db2/DB2Database.java
Patch:
@@ -36,7 +36,7 @@ protected DB2Connection doGetConnection(Connection connection) {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         ensureDatabaseIsRecentEnough("9.7");
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("11.5", Tier.PREMIUM, configuration);

File: flyway-database/flyway-database-derby/src/main/java/org/flywaydb/database/derby/DerbyDatabase.java
Patch:
@@ -44,7 +44,7 @@ protected DerbyConnection doGetConnection(Connection connection) {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         ensureDatabaseIsRecentEnough("10.11.1.1");
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("10.14", Tier.PREMIUM, configuration);

File: flyway-database/flyway-database-hsqldb/src/main/java/org/flywaydb/database/hsqldb/HSQLDBDatabase.java
Patch:
@@ -43,7 +43,7 @@ protected HSQLDBConnection doGetConnection(Connection connection) {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         ensureDatabaseIsRecentEnough("1.8");
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("2.5", Tier.PREMIUM, configuration);

File: flyway-database/flyway-database-informix/src/main/java/org/flywaydb/database/informix/InformixDatabase.java
Patch:
@@ -39,7 +39,7 @@ protected InformixConnection doGetConnection(Connection connection) {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         ensureDatabaseIsRecentEnough("12.10");
         recommendFlywayUpgradeIfNecessary("12.10");
     }

File: flyway-database/flyway-database-oracle/src/main/java/org/flywaydb/database/oracle/OracleDatabase.java
Patch:
@@ -58,7 +58,7 @@ protected OracleConnection doGetConnection(Connection connection) {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         ensureDatabaseIsRecentEnough("10");
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("18.0", Tier.PREMIUM, configuration);

File: flyway-database/flyway-database-oracle/src/main/java/org/flywaydb/database/oracle/OracleParser.java
Patch:
@@ -263,6 +263,7 @@ protected ParsedSqlStatement createStatement(PeekingReader reader, Recorder reco
 
 
 
+            , boolean batchable
                                                 ) throws IOException {
 
 
@@ -330,6 +331,7 @@ protected ParsedSqlStatement createStatement(PeekingReader reader, Recorder reco
 
 
 
+                , batchable
                                     );
     }
 

File: flyway-database/flyway-database-postgresql/src/main/java/org/flywaydb/database/cockroachdb/CockroachDBDatabase.java
Patch:
@@ -43,7 +43,7 @@ protected CockroachDBConnection doGetConnection(Connection connection) {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         ensureDatabaseIsRecentEnough("1.1");
         recommendFlywayUpgradeIfNecessary("22.1");
     }

File: flyway-database/flyway-database-postgresql/src/main/java/org/flywaydb/database/postgresql/PostgreSQLParser.java
Patch:
@@ -56,6 +56,7 @@ protected ParsedSqlStatement createStatement(PeekingReader reader, Recorder reco
 
 
 
+            , boolean batchable
                                                 ) throws IOException {
         if (statementType == COPY) {
             return new PostgreSQLCopyParsedStatement(nonCommentPartPos, nonCommentPartLine, nonCommentPartCol,
@@ -68,6 +69,7 @@ protected ParsedSqlStatement createStatement(PeekingReader reader, Recorder reco
 
 
 
+                , batchable
                                     );
     }
 

File: flyway-database/flyway-database-redshift/src/main/java/org/flywaydb/database/redshift/RedshiftDatabase.java
Patch:
@@ -37,7 +37,7 @@ protected RedshiftConnection doGetConnection(Connection connection) {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         // Always latest Redshift version.
     }
 

File: flyway-database/flyway-gcp-bigquery/src/main/java/org/flywaydb/database/bigquery/BigQueryDatabase.java
Patch:
@@ -52,7 +52,7 @@ protected BigQueryConnection doGetConnection(Connection connection) {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         if (!LicenseGuard.isLicensed(configuration, Tier.PREMIUM)) {
             long databaseSize = getDatabaseSize();
             if (databaseSize > TEN_GB_DATABASE_SIZE_LIMIT) {

File: flyway-database/flyway-gcp-spanner/src/main/java/org/flywaydb/database/spanner/SpannerDatabase.java
Patch:
@@ -50,7 +50,7 @@ protected SpannerConnection doGetConnection(Connection connection) {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         if (!LicenseGuard.isLicensed(configuration, Tier.PREMIUM)) {
             long databaseSize = getDatabaseSize();
             if (databaseSize > TEN_GB_DATABASE_SIZE_LIMIT) {

File: flyway-database/flyway-singlestore/src/main/java/org/flywaydb/database/singlestore/SingleStoreDatabase.java
Patch:
@@ -55,7 +55,7 @@ protected SingleStoreConnection doGetConnection(Connection connection) {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         ensureDatabaseIsRecentEnough("7.1");
     }
 

File: flyway-database/flyway-sqlserver/src/main/java/org/flywaydb/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -49,7 +49,7 @@ protected SQLServerConnection doGetConnection(Connection connection) {
     }
 
     @Override
-    public final void ensureSupported(Configuration configuration) {
+    public void ensureSupported(Configuration configuration) {
         if (isAzure()) {
             ensureDatabaseIsRecentEnough("11.0");
 

File: flyway-commandline/src/main/java/org/flywaydb/commandline/JavaVersionPrinter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/MavenVersionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/command/dbsupport/DbInfoResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/command/dbsupport/DbSupportResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/command/dbsupport/ListEnginesCommandExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/command/version/PluginVersionResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/command/version/VersionCommandExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/command/version/VersionResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/configuration/CommandLineConfigurationUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/configuration/ConfigurationManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/configuration/ConfigurationManagerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/logging/LoggingUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/logging/console/ColorizedConsoleLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/logging/console/ConsoleLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/logging/console/ConsoleLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/logging/file/FileLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/logging/file/FileLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/utils/OperationsReportUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/utils/TelemetryUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-ignite/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-ignite/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-ignite/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-ignite/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-ignite/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-ignite/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-ignite/src/main/java/org/flywaydb/community/database/ignite/thin/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-tidb/src/main/java/org/flywaydb/community/database/mysql/tidb/TiDBConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-tidb/src/main/java/org/flywaydb/community/database/mysql/tidb/TiDBDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-tidb/src/main/java/org/flywaydb/community/database/mysql/tidb/TiDBDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-tidb/src/main/java/org/flywaydb/community/database/mysql/tidb/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-yugabytedb/src/main/java/org/flywaydb/community/database/postgresql/yugabytedb/YugabyteDBConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-yugabytedb/src/main/java/org/flywaydb/community/database/postgresql/yugabytedb/YugabyteDBDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-yugabytedb/src/main/java/org/flywaydb/community/database/postgresql/yugabytedb/YugabyteDBDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-yugabytedb/src/main/java/org/flywaydb/community/database/postgresql/yugabytedb/YugabyteDBParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-yugabytedb/src/main/java/org/flywaydb/community/database/postgresql/yugabytedb/YugabyteDBSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-yugabytedb/src/main/java/org/flywaydb/community/database/postgresql/yugabytedb/YugabyteDBTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/flyway-database-yugabytedb/src/main/java/org/flywaydb/community/database/postgresql/yugabytedb/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/FlywayExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/FlywayTelemetryManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/ProgressLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/ProgressLoggerEmpty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/ProgressLoggerJson.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/ProgressLoggerSynchronized.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/ProgressModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/ClassProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/CoreMigrationType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/ErrorCode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/ErrorDetails.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/FlywayException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/InfoOutputProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/Location.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationInfoService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationPattern.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/ResourceProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/BaseCallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Callback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Error.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Event.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Statement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Warning.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/S3ClientFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/exception/FlywayValidateException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/executor/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/executor/MigrationExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/executor/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/Log.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/LogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/LogFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/BaseJavaMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/JavaMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/baseline/BaselineAppliedMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/baseline/BaselineJavaMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/baseline/BaselineMigrationConfigurationExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/baseline/BaselineMigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/baseline/BaselineMigrationType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/baseline/BaselineResolvedMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/baseline/BaselineResourceTypeProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/BaselineResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CleanResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CommandResultFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CompositeResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/DashboardRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/DashboardResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/ErrorOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/HoldingRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/HoldingResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/HtmlResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/HtmlTableRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/InfoHtmlRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/InfoOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/InfoResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/MigrateErrorResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/MigrateHtmlRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/MigrateOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/MigrateResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/OperationResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/OperationResultBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/OperationResultJsonBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/RepairOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/RepairResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/ValidateOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/ValidateResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/pattern/ValidatePattern.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/ChecksumMatcher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/MigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/ResolvedMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resource/LoadableResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resource/Resource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resource/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/AppliedMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/CleanModePlugin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/CommandExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/ConfigurationExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/ConfigurationParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/ConfigurationProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/EventTelemetryModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/FlywayExpiredLicenseKeyException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/FlywayInvalidLicenseKeyException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/FlywayRedgateLicenseKeyException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/FlywayTrialExpiredException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/HtmlRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/HtmlReportSummary.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/InfoTelemetryModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/LicenseGuard.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/MigrationType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/Plugin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/PluginMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/ResourceType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/ResourceTypeProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/RootTelemetryModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/TelemetryPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/Tier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/authentication/ExternalAuthFileReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/authentication/ExternalAuthPropertiesProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/authentication/postgres/PgpassFileReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/ArbitraryScriptCallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/CallbackExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/DefaultCallbackExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/NoopCallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/NoopCallbackExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SimpleContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptCallbackFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/clazz/NoopClassProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/clazz/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbBaseline.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbSchemas.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/clean/CleanExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/clean/CleanModeConfigurationExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/clean/CleanModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/clean/DbClean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/clean/SchemaModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigurationValidator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ListDeserializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/ConfigurationModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/DataSourceModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/EnvironmentModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/FlywayModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/PropertyResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/ResolvedEnvironment.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentProvisioner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentProvisionerNone.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -135,7 +135,7 @@ private ConfigurationExtension getResolverConfig(final EnvironmentModel environm
                 final var data = environmentModel.getResolvers().get(key);
                 return (ConfigurationExtension) new ObjectMapper().convertValue(data, clazz);
             } catch (final IllegalArgumentException e) {
-                throw new FlywayException("Error reading resolver configuration for resolver " + key, e, ErrorCode.CONFIGURATION);
+                throw new FlywayException("Error reading resolver configuration for resolver " + key + ": " + e.getMessage(), e, ErrorCode.CONFIGURATION);
             }
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentVariableResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/PropertyResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/PropertyResolverContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2023
+ * Copyright (C) Red Gate Software Ltd 2010-2024
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DriverDataSource.java
Patch:
@@ -122,8 +122,8 @@ public DriverDataSource(ClassLoader classLoader, String driverClass, String url,
             this.additionalProperties = new HashMap<>();
         }
         this.defaultProperties = new Properties(defaultProperties);
-        type.setDefaultConnectionProps(url, defaultProperties, classLoader);
-        type.setConfigConnectionProps(configuration, defaultProperties, classLoader);
+        type.setDefaultConnectionProps(url, this.defaultProperties, classLoader);
+        type.setConfigConnectionProps(configuration, this.defaultProperties, classLoader);
         type.setOverridingConnectionProps(this.additionalProperties);
 
         try {
@@ -154,7 +154,7 @@ public DriverDataSource(ClassLoader classLoader, String driverClass, String url,
         this.password = detectFallbackPassword(password);
 
         if (type.externalAuthPropertiesRequired(url, user, password)) {
-            defaultProperties.putAll(type.getExternalAuthProperties(url, user));
+            this.defaultProperties.putAll(type.getExternalAuthProperties(url, user));
         }
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/PropertyResolverContext.java
Patch:
@@ -16,10 +16,12 @@
 package org.flywaydb.core.internal.configuration.resolvers;
 
 import org.flywaydb.core.ProgressLogger;
+import org.flywaydb.core.api.configuration.Configuration;
 
 import java.util.List;
 
 public interface PropertyResolverContext {
+    Configuration getConfiguration();
     String getWorkingDirectory();
     String getEnvironmentName();
     String resolveValue(String input, ProgressLogger progress);

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/ParsingContext.java
Patch:
@@ -38,6 +38,7 @@ public class ParsingContext {
     private static final String FILENAME_PLACEHOLDER = "filename";
     private static final String WORKING_DIRECTORY_PLACEHOLDER = "workingDirectory";
     private static final String TABLE_PLACEHOLDER = "table";
+    private static final String ENVIRONMENT_PLACEHOLDER = "environment";
 
     @Getter
     private final Map<String, String> placeholders = new HashMap<>();
@@ -80,6 +81,7 @@ public void populate(Database database, Configuration configuration) {
         placeholders.put(generateName(TIMESTAMP_PLACEHOLDER,configuration), new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
         placeholders.put(generateName(WORKING_DIRECTORY_PLACEHOLDER,configuration), System.getProperty("user.dir"));
         placeholders.put(generateName(TABLE_PLACEHOLDER,configuration), configuration.getTable());
+        placeholders.put(generateName(ENVIRONMENT_PLACEHOLDER, configuration), configuration.getCurrentEnvironmentName());
     }
 
     public void updateFilenamePlaceholder(ResourceName resourceName, Configuration configuration) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/FlywayModel.java
Patch:
@@ -44,6 +44,7 @@ public class FlywayModel {
     @Setter(lombok.AccessLevel.NONE)
     private String reportFilename;
     private String environment;
+    private String environmentProvisionMode;
     private Boolean detectEncoding;
     private String encoding;
     private String placeholderPrefix;
@@ -144,6 +145,7 @@ public static FlywayModel defaults(){
          model.loggers = Arrays.asList("auto");
          model.placeholders = new HashMap<>();
          model.environment = "default";
+         model.environmentProvisionMode = "provision";
          model.reportEnabled = false;
          return model;
     }
@@ -155,6 +157,7 @@ public FlywayModel merge(FlywayModel otherPojo) {
         result.reportFilename = reportFilename.merge(otherPojo.reportFilename);
         result.encoding = encoding.merge(otherPojo.encoding);
         result.environment = environment.merge(otherPojo.environment);
+        result.environmentProvisionMode = environmentProvisionMode.merge(otherPojo.environmentProvisionMode);
         result.detectEncoding = detectEncoding.merge(otherPojo.detectEncoding);
         result.placeholderPrefix = placeholderPrefix.merge(otherPojo.placeholderPrefix);
         result.placeholderSuffix = placeholderSuffix.merge(otherPojo.placeholderSuffix);

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/FlywayDbWebsiteLinks.java
Patch:
@@ -43,7 +43,6 @@ public class FlywayDbWebsiteLinks {
     public static final String AZURE_ACTIVE_DIRECTORY = "https://rd.gt/3unaRb8";
     public static final String TRIAL_UPGRADE = "https://rd.gt/2WNixqj";
     public static final String KNOWN_PARSER_LIMITATIONS = "https://rd.gt/3ipi7Pm";
-    public static final String CLOUD_SPANNER_BETA = "https://rd.gt/3yqM3jJ";
     public static final String TEAMS_FEATURES_FOR_BIG_QUERY = "https://rd.gt/3CWAuTb";
     public static final String TEAMS_FEATURES_FOR_CLOUD_SPANNER = "https://rd.gt/2ZvELhV";
     public static final String FILE_ENCODING_HELP = "https://rd.gt/3BzSFhr";

File: flyway-database/flyway-database-db2/src/main/java/org/flywaydb/database/db2/DB2Table.java
Patch:
@@ -48,6 +48,6 @@ protected boolean doExists() throws SQLException {
 
     @Override
     protected void doLock() throws SQLException {
-        jdbcTemplate.update("lock table " + this + " in exclusive mode");
+        jdbcTemplate.update( "lock table " + this + " in exclusive mode");
     }
 }
\ No newline at end of file

File: flyway-database/flyway-database-postgresql/src/main/java/org/flywaydb/database/cockroachdb/CockroachDBTable.java
Patch:
@@ -34,7 +34,7 @@ public class CockroachDBTable extends Table<CockroachDBDatabase, CockroachDBSche
 
     CockroachDBTable(JdbcTemplate jdbcTemplate, CockroachDBDatabase database, CockroachDBSchema schema, String name) {
         super(jdbcTemplate, database, schema, name);
-        this.insertRowLock = new InsertRowLock(jdbcTemplate, 10);
+        this.insertRowLock = new InsertRowLock(jdbcTemplate);
     }
 
     @Override

File: flyway-database/flyway-database-postgresql/src/main/java/org/flywaydb/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -62,7 +62,7 @@ public void ensureSupported(Configuration configuration) {
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("10", Tier.PREMIUM, configuration);
 
-        recommendFlywayUpgradeIfNecessaryForMajorVersion("15");
+        recommendFlywayUpgradeIfNecessaryForMajorVersion("16");
     }
 
     @Override

File: flyway-database/flyway-database-saphana/src/main/java/org/flywaydb/database/saphana/SAPHANATable.java
Patch:
@@ -48,6 +48,6 @@ protected boolean doExists() throws SQLException {
 
     @Override
     protected void doLock() throws SQLException {
-        jdbcTemplate.update("lock table " + this + " in exclusive mode");
+        jdbcTemplate.update( "lock table " + this + " in exclusive mode");
     }
 }
\ No newline at end of file

File: flyway-database/flyway-gcp-bigquery/src/main/java/org/flywaydb/database/bigquery/BigQueryTable.java
Patch:
@@ -26,7 +26,7 @@ public class BigQueryTable extends Table<BigQueryDatabase, BigQuerySchema> {
 
     BigQueryTable(JdbcTemplate jdbcTemplate, BigQueryDatabase database, BigQuerySchema schema, String name) {
         super(jdbcTemplate, database, schema, name);
-        this.insertRowLock = new InsertRowLock(jdbcTemplate, 10);
+        this.insertRowLock = new InsertRowLock(jdbcTemplate);
     }
 
     @Override

File: flyway-database/flyway-gcp-spanner/src/main/java/org/flywaydb/database/spanner/SpannerDatabaseType.java
Patch:
@@ -97,7 +97,6 @@ public boolean detectPasswordRequiredByUrl(String url) {
 
     @Override
     public void printMessages(Configuration configuration) {
-        LOG.info("Join the GCP Spanner beta via " + FlywayDbWebsiteLinks.CLOUD_SPANNER_BETA);
 
 
 

File: flyway-sqlserver/src/main/java/org/flywaydb/database/sqlserver/synapse/SynapseTable.java
Patch:
@@ -31,7 +31,7 @@ public class SynapseTable extends SQLServerTable {
 
     SynapseTable(JdbcTemplate jdbcTemplate, SQLServerDatabase database, String databaseName, SQLServerSchema schema, String name) {
         super(jdbcTemplate, database, databaseName, schema, name);
-        this.insertRowLock = new InsertRowLock(jdbcTemplate, 10);
+        this.insertRowLock = new InsertRowLock(jdbcTemplate);
     }
 
     @Override

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -392,7 +392,7 @@ private static void printUsage(Boolean fullVersion) {
             LOG.info(indent + "installedBy                    Username that will be recorded in the schema history table");
             LOG.info(indent + "target                         Target version up to which Flyway should use migrations");
             LOG.info(indent + "cherryPick                     [" + "teams] Comma separated list of migrations that Flyway should consider when migrating");
-            LOG.info(indent + "skipExecutingMigrations        [" + "teams] Whether Flyway should skip actually executing the contents of the migrations");
+            LOG.info(indent + "skipExecutingMigrations        Whether Flyway should skip actually executing the contents of the migrations");
             LOG.info(indent + "outOfOrder                     Allows migrations to be run \"out of order\"");
             LOG.info(indent + "callbacks                      Comma-separated list of FlywayCallback classes, or locations to scan for FlywayCallback classes");
             LOG.info(indent + "skipDefaultCallbacks           Skips default callbacks (sql)");

File: flyway-commandline/src/main/java/org/flywaydb/commandline/configuration/CommandLineArguments.java
Patch:
@@ -56,7 +56,7 @@ public class CommandLineArguments {
     private static final String INFO_UNTIL_VERSION = "infoUntilVersion";
     private static final String INFO_OF_STATE = "infoOfState";
     private static final Set<String> COMMAND_LINE_ONLY_OPTIONS = new HashSet<>(Arrays.asList(
-            OUTPUT_FILE, OUTPUT_TYPE, COLOR, WORKING_DIRECTORY, INFO_SINCE_DATE,
+            OUTPUT_FILE, COLOR, WORKING_DIRECTORY, INFO_SINCE_DATE,
             INFO_UNTIL_DATE, INFO_SINCE_VERSION, INFO_UNTIL_VERSION, INFO_OF_STATE));
     private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd/MM/yyyy HH:mm");
     private static final List<String> VALID_OPERATIONS_AND_FLAGS = getValidOperationsAndFlags();

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -30,6 +30,7 @@
 import java.io.File;
 import java.io.OutputStream;
 import java.nio.charset.Charset;
+import java.util.List;
 import java.util.Map;
 import java.util.Properties;
 
@@ -699,7 +700,6 @@ public FluentConfiguration outOfOrder(boolean outOfOrder) {
      * just want the schema history table to reflect this.
      *
      * Use in conjunction with {@code cherryPick} to skip specific migrations instead of all pending ones.
-     * <i>Flyway Teams only</i>
      */
     public FluentConfiguration skipExecutingMigrations(boolean skipExecutingMigrations) {
         config.setSkipExecutingMigrations(skipExecutingMigrations);
@@ -801,7 +801,6 @@ public FluentConfiguration lockRetryCount(int lockRetryCount) {
 
     /**
      * Properties to pass to the JDBC driver object
-     * <i>Flyway Teams only</i>
      *
      * @param jdbcProperties The properties to pass to the JDBC driver object
      */

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentProvisionerClean.java
Patch:
@@ -16,6 +16,7 @@
 package org.flywaydb.core.internal.configuration.resolvers;
 
 import lombok.CustomLog;
+import org.flywaydb.core.ProgressLogger;
 import org.flywaydb.core.internal.configuration.models.ResolvedEnvironment;
 
 @CustomLog
@@ -26,7 +27,7 @@ public String getName() {
     }
 
     @Override
-    public void postReprovision(PropertyResolverContext context, ResolvedEnvironment resolvedEnvironment) {
+    public void postReprovision(PropertyResolverContext context, ResolvedEnvironment resolvedEnvironment, ProgressLogger progress) {
         LOG.warn("Provisioner 'clean' specified for environment " + context.getEnvironmentName() + " was requested but not run.");
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentProvisionerClone.java
Patch:
@@ -16,6 +16,7 @@
 package org.flywaydb.core.internal.configuration.resolvers;
 
 import lombok.CustomLog;
+import org.flywaydb.core.ProgressLogger;
 
 @CustomLog
 public class EnvironmentProvisionerClone implements EnvironmentProvisioner {
@@ -25,12 +26,12 @@ public String getName() {
     }
 
     @Override
-    public void preProvision(PropertyResolverContext context) {
+    public void preProvision(PropertyResolverContext context, ProgressLogger progress) {
         LOG.warn("Provisioner 'clone' specified for environment " + context.getEnvironmentName() + " was requested (provision) but not run.");
     }
 
     @Override
-    public void preReprovision(PropertyResolverContext context) {
+    public void preReprovision(PropertyResolverContext context, ProgressLogger progress) {
         LOG.warn("Provisioner 'clone' specified for environment " + context.getEnvironmentName() + " was requested (reprovision) but not run.");
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentProvisionerNone.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.flywaydb.core.internal.configuration.resolvers;
 
+import org.flywaydb.core.ProgressLogger;
 import org.flywaydb.core.api.FlywayException;
 
 public class EnvironmentProvisionerNone implements EnvironmentProvisioner {
@@ -24,7 +25,7 @@ public String getName() {
     }
 
     @Override
-    public void preReprovision(PropertyResolverContext context) {
+    public void preReprovision(PropertyResolverContext context, ProgressLogger progress) {
         throw new FlywayException("Reprovisioning is not supported for environment " + context.getEnvironmentName());
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentVariableResolver.java
Patch:
@@ -15,14 +15,16 @@
  */
 package org.flywaydb.core.internal.configuration.resolvers;
 
+import org.flywaydb.core.ProgressLogger;
+
 public class EnvironmentVariableResolver implements PropertyResolver {
     @Override
     public String getName() {
         return "env";
     }
 
     @Override
-    public String resolve(String key, PropertyResolverContext context) {
+    public String resolve(String key, PropertyResolverContext context, ProgressLogger progress) {
         return System.getenv(key);
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/PropertyResolver.java
Patch:
@@ -15,9 +15,10 @@
  */
 package org.flywaydb.core.internal.configuration.resolvers;
 
+import org.flywaydb.core.ProgressLogger;
 import org.flywaydb.core.extensibility.Plugin;
 
 public interface PropertyResolver extends Plugin {
     String getName();
-    String resolve(String key, PropertyResolverContext context);
+    String resolve(String key, PropertyResolverContext context, ProgressLogger progress);
 }
\ No newline at end of file

File: flyway-commandline/src/main/java/org/flywaydb/commandline/command/version/VersionResult.java
Patch:
@@ -17,14 +17,14 @@
 
 import lombok.AllArgsConstructor;
 import org.flywaydb.core.api.output.OperationResult;
-import org.flywaydb.core.internal.license.Edition;
+import org.flywaydb.core.extensibility.Tier;
 
 import java.util.List;
 
 @AllArgsConstructor
 public class VersionResult implements OperationResult {
     public String version;
     public String command;
-    public Edition edition;
+    public Tier edition;
     public List<PluginVersionResult> pluginVersions;
 }
\ No newline at end of file

File: flyway-community-db-support/flyway-database-ignite/src/main/java/org/flywaydb/community/database/IgniteDatabaseExtension.java
Patch:
@@ -22,15 +22,15 @@
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 
-public class CommunityDatabaseExtension implements PluginMetadata {
+public class IgniteDatabaseExtension implements PluginMetadata {
     public String getDescription() {
-        return "Community-contributed database support extension " + readVersion() + " by Redgate";
+        return "Community-contributed Ignite database support extension " + readVersion() + " by Redgate";
     }
 
     private static String readVersion() {
         try {
             return FileUtils.copyToString(
-                    CommunityDatabaseExtension.class.getClassLoader().getResourceAsStream("org/flywaydb/community/database/version.txt"),
+                    IgniteDatabaseExtension.class.getClassLoader().getResourceAsStream("org/flywaydb/community/database/ignite/version.txt"),
                     StandardCharsets.UTF_8);
         } catch (IOException e) {
             throw new FlywayException("Unable to read extension version: " + e.getMessage(), e);

File: flyway-community-db-support/flyway-database-ignite/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinDatabase.java
Patch:
@@ -55,7 +55,7 @@ protected MigrationVersion determineVersion() {
     }
 
     @Override
-    public final void ensureSupported() {
+    public final void ensureSupported(Configuration configuration) {
         notifyDatabaseIsNotFormallySupported();
     }
 

File: flyway-community-db-support/flyway-database-tidb/src/main/java/org/flywaydb/community/database/mysql/tidb/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Community-supported package. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.database.cockroachdb;
\ No newline at end of file
+package org.flywaydb.community.database.mysql.tidb;
\ No newline at end of file

File: flyway-community-db-support/flyway-database-yugabytedb/src/main/java/org/flywaydb/community/database/postgresql/yugabytedb/YugabyteDBConnection.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.community.database.yugabytedb;
+package org.flywaydb.community.database.postgresql.yugabytedb;
 
 import org.flywaydb.core.internal.database.base.Schema;
-import org.flywaydb.core.internal.database.postgresql.PostgreSQLConnection;
+import org.flywaydb.database.postgresql.PostgreSQLConnection;
 
 public class YugabyteDBConnection extends PostgreSQLConnection {
 

File: flyway-community-db-support/flyway-database-yugabytedb/src/main/java/org/flywaydb/community/database/postgresql/yugabytedb/YugabyteDBDatabase.java
Patch:
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.community.database.yugabytedb;
+package org.flywaydb.community.database.postgresql.yugabytedb;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.postgresql.PostgreSQLDatabase;
 import org.flywaydb.core.internal.jdbc.JdbcConnectionFactory;
 import org.flywaydb.core.internal.jdbc.StatementInterceptor;
+import org.flywaydb.database.postgresql.PostgreSQLDatabase;
 
 import java.sql.Connection;
 
@@ -34,7 +34,7 @@ protected YugabyteDBConnection doGetConnection(Connection connection) {
     }
 
     @Override
-    public void ensureSupported() {
+    public void ensureSupported(Configuration configuration) {
         // Checks the Postgres version
         ensureDatabaseIsRecentEnough("11.2");
     }

File: flyway-community-db-support/flyway-database-yugabytedb/src/main/java/org/flywaydb/community/database/postgresql/yugabytedb/YugabyteDBDatabaseType.java
Patch:
@@ -13,16 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.community.database.yugabytedb;
+package org.flywaydb.community.database.postgresql.yugabytedb;
 
 import org.flywaydb.core.api.ResourceProvider;
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.database.postgresql.PostgreSQLDatabaseType;
 import org.flywaydb.core.internal.jdbc.JdbcConnectionFactory;
 import org.flywaydb.core.internal.jdbc.StatementInterceptor;
 import org.flywaydb.core.internal.parser.Parser;
 import org.flywaydb.core.internal.parser.ParsingContext;
+import org.flywaydb.database.postgresql.PostgreSQLDatabaseType;
 
 import java.sql.Connection;
 import java.util.regex.Pattern;

File: flyway-community-db-support/flyway-database-yugabytedb/src/main/java/org/flywaydb/community/database/postgresql/yugabytedb/YugabyteDBParser.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.community.database.yugabytedb;
+package org.flywaydb.community.database.postgresql.yugabytedb;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.postgresql.PostgreSQLParser;
 import org.flywaydb.core.internal.parser.ParsingContext;
+import org.flywaydb.database.postgresql.PostgreSQLParser;
 
 public class YugabyteDBParser extends PostgreSQLParser {
     protected YugabyteDBParser(Configuration configuration, ParsingContext parsingContext) {

File: flyway-community-db-support/flyway-database-yugabytedb/src/main/java/org/flywaydb/community/database/postgresql/yugabytedb/YugabyteDBSchema.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.community.database.yugabytedb;
+package org.flywaydb.community.database.postgresql.yugabytedb;
 
 import org.flywaydb.core.internal.database.base.Table;
-import org.flywaydb.core.internal.database.postgresql.PostgreSQLSchema;
 import org.flywaydb.core.internal.jdbc.JdbcTemplate;
+import org.flywaydb.database.postgresql.PostgreSQLSchema;
 
 public class YugabyteDBSchema extends PostgreSQLSchema {
     /**

File: flyway-community-db-support/flyway-database-yugabytedb/src/main/java/org/flywaydb/community/database/postgresql/yugabytedb/YugabyteDBTable.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.community.database.yugabytedb;
+package org.flywaydb.community.database.postgresql.yugabytedb;
 
-import org.flywaydb.core.internal.database.postgresql.PostgreSQLTable;
 import org.flywaydb.core.internal.jdbc.JdbcTemplate;
+import org.flywaydb.database.postgresql.PostgreSQLTable;
 
 public class YugabyteDBTable extends PostgreSQLTable {
     /**

File: flyway-core/src/main/java/org/flywaydb/core/FlywayTelemetryManager.java
Patch:
@@ -68,9 +68,7 @@ public FlywayTelemetryManager(PluginRegister pluginRegister){
                 }
                 try(FileWriter fileWriter = new FileWriter(userIdFile)) {
                     fileWriter.write(userId);
-                } catch (IOException ignore) {
-                    System.err.println(ignore.getMessage());
-                }
+                } catch (IOException ignore) {}
             }
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/api/ErrorCode.java
Patch:
@@ -40,5 +40,7 @@ public enum ErrorCode {
     OUTDATED_REPEATABLE_MIGRATION,
     TYPE_MISMATCH,
     CHECKSUM_MISMATCH,
-    DESCRIPTION_MISMATCH
+    DESCRIPTION_MISMATCH,
+    ENVIRONMENT_RESOLVE,
+    ENVIRONMENT_PROVISION
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Error.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.flywaydb.core.api.callback;
 
+import org.flywaydb.core.api.configuration.Configuration;
+
 /**
  * An error that occurred while executing a statement.
  * <p><i>Flyway Teams only</i></p>
@@ -49,5 +51,5 @@ public interface Error {
      * @param handled {@code true} if this error has already be handled or {@code false} if it should flow via the
      * default error handler.
      */
-    void setHandled(boolean handled);
+    void setHandled(boolean handled, Configuration config);
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Warning.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.flywaydb.core.api.callback;
 
+import org.flywaydb.core.api.configuration.Configuration;
+
 /**
  * A warning that occurred while executing a statement.
  * <p><i>Flyway Teams only</i></p>
@@ -49,5 +51,5 @@ public interface Warning {
      * @param handled {@code true} if this warning has already be handled or {@code false} if it should flow via the
      * default warning handler.
      */
-    void setHandled(boolean handled);
+    void setHandled(boolean handled, Configuration config);
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/baseline/BaselineMigrationConfigurationExtension.java
Patch:
@@ -18,9 +18,6 @@
 import lombok.Getter;
 import lombok.Setter;
 import org.flywaydb.core.extensibility.ConfigurationExtension;
-import org.flywaydb.core.internal.configuration.ConfigUtils;
-
-import java.util.Map;
 
 @Getter
 @Setter

File: flyway-core/src/main/java/org/flywaydb/core/api/output/HtmlResult.java
Patch:
@@ -36,7 +36,7 @@ public class HtmlResult implements OperationResult {
     @Setter
     private boolean licenseFailed;
 
-    protected HtmlResult(LocalDateTime timestamp, String operation) {
+    public HtmlResult(LocalDateTime timestamp, String operation) {
         setTimestamp(timestamp);
         this.operation = operation;
     }

File: flyway-core/src/main/java/org/flywaydb/core/api/output/InfoHtmlRenderer.java
Patch:
@@ -61,7 +61,7 @@ public List<HtmlReportSummary> getHtmlSummary(InfoResult result) {
         int pending = (int) result.migrations.stream().filter(f -> "Pending".equals(f.state)).count();
 
         HtmlReportSummary pendingSummary = new HtmlReportSummary();
-        pendingSummary.setSummaryText(pending + " script" + (pending != 1 ? "s" : "") + " pending");
+        pendingSummary.setSummaryText(pending + " script" + StringUtils.pluralizeSuffix(pending) + " pending");
         pendingSummary.setIcon("scriptOutlined");
         pendingSummary.setCssClass(pending > 0 ? "scInfo" : "scAmbivalent");
 
@@ -70,7 +70,7 @@ public List<HtmlReportSummary> getHtmlSummary(InfoResult result) {
         int deployed = (int) result.migrations.stream().filter(f -> "Success".equals(f.state)).count();
 
         HtmlReportSummary deployedSummary = new HtmlReportSummary();
-        deployedSummary.setSummaryText(deployed + " script" + (deployed != 1 ? "s" : "") + " succeeded");
+        deployedSummary.setSummaryText(deployed + " script" + StringUtils.pluralizeSuffix(deployed) + " succeeded");
         deployedSummary.setIcon("checkFilled");
         deployedSummary.setCssClass(deployed > 0 ? "scGood" : "scAmbivalent");
 

File: flyway-core/src/main/java/org/flywaydb/core/api/output/MigrateHtmlRenderer.java
Patch:
@@ -83,7 +83,7 @@ public List<HtmlReportSummary> getHtmlSummary(MigrateResult result) {
                 : result.targetSchemaVersion;
 
         htmlResult.add(new HtmlReportSummary(result.targetSchemaVersion != null? "scGood" : "scError", "infoOutlined", "Database version: " + databaseVersion));
-        htmlResult.add(new HtmlReportSummary(migratedCount > 0 ? "scGood" : "scWarn", "checkFilled", migratedCount + " script" + (migratedCount != 1 ? "s" : "") + " migrated"));
+        htmlResult.add(new HtmlReportSummary(migratedCount > 0 ? "scGood" : "scWarn", "checkFilled", migratedCount + " script" + StringUtils.pluralizeSuffix(migratedCount) + " migrated"));
         if (StringUtils.hasText(result.schemaName)) {
             htmlResult.add(new HtmlReportSummary("scNote", "database", "Database Schema: " + result.schemaName));
         }

File: flyway-core/src/main/java/org/flywaydb/core/api/pattern/ValidatePattern.java
Patch:
@@ -19,7 +19,7 @@
 import lombok.RequiredArgsConstructor;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.MigrationState;
-import org.flywaydb.core.internal.license.FlywayTeamsUpgradeRequiredException;
+import org.flywaydb.core.internal.license.FlywayRedgateEditionRequiredException;
 import org.flywaydb.core.internal.util.FlywayDbWebsiteLinks;
 
 import java.util.Arrays;
@@ -57,7 +57,7 @@ public static ValidatePattern fromPattern(String pattern) {
 
 
         if (migrationType.equals("repeatable") || migrationType.equals("versioned")) {
-            throw new FlywayTeamsUpgradeRequiredException("ignoreMigrationPattern with type '" + migrationType + "'");
+            throw new FlywayRedgateEditionRequiredException("ignoreMigrationPattern with type '" + migrationType + "'");
         }
 
 

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/FlywayInvalidLicenseKeyException.java
Patch:
@@ -15,9 +15,9 @@
  */
 package org.flywaydb.core.extensibility;
 
-import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.internal.license.FlywayLicensingException;
 
-public class FlywayInvalidLicenseKeyException extends FlywayException {
+public class FlywayInvalidLicenseKeyException extends FlywayLicensingException {
     public FlywayInvalidLicenseKeyException() {
         super("Invalid license key. Ensure flyway.licenseKey is set to a valid Flyway license key" +
                       " (\"FL01\" followed by 512 hex chars)");

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/FlywayRedgateLicenseKeyException.java
Patch:
@@ -15,9 +15,9 @@
  */
 package org.flywaydb.core.extensibility;
 
-import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.internal.license.FlywayLicensingException;
 
-public class FlywayRedgateLicenseKeyException extends FlywayException {
+public class FlywayRedgateLicenseKeyException extends FlywayLicensingException {
     public FlywayRedgateLicenseKeyException() {
         super("Invalid license key. You have provided a Redgate license key. Please contact sales@flywaydb.org to" +
                       " acquire a Flyway license key (\"FL01\" followed by 512 hex chars)");

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/RootTelemetryModel.java
Patch:
@@ -31,6 +31,8 @@ public class RootTelemetryModel {
     private String databaseEngine;
     private String databaseVersion;
     private String environment;
+    private String applicationVersion;
+    private String applicationEdition;
     private boolean redgateEmployee;
 
     private Instant startTime = Instant.now();

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptCallbackFactory.java
Patch:
@@ -126,7 +126,7 @@ public void handle(Event event, Context context) {
 
 
 
-            sqlScriptExecutorFactory.createSqlScriptExecutor(context.getConnection(), false, batch, outputQueryResults).execute(sqlScript);
+            sqlScriptExecutorFactory.createSqlScriptExecutor(context.getConnection(), false, batch, outputQueryResults).execute(sqlScript, context.getConfiguration());
         }
 
         @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -254,7 +254,7 @@ private void logSummary(int migrationSuccessCount, long executionTime, String ta
 
         String targetText = (targetVersion != null) ? ", now at version v" + targetVersion : "";
 
-        String migrationText = (migrationSuccessCount == 1) ? "migration" : "migrations";
+        String migrationText = "migration" + StringUtils.pluralizeSuffix(migrationSuccessCount);
 
         LOG.info("Successfully applied " + migrationSuccessCount + " " + migrationText + " to schema " + schema
                          + targetText + " (execution time " + TimeFormat.format(executionTime) + ")");

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -244,7 +244,7 @@ public String removedMessage() {
         }
 
         public String deletedMessage() {
-            return "Deleted missing migrations";
+            return "Marked missing migrations as deleted";
         }
 
         public String alignedMessage() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/ResolvedEnvironment.java
Patch:
@@ -29,6 +29,7 @@ public class ResolvedEnvironment {
     private String password;
     private String driver;
     private List<String> schemas;
+    private List<String> jarDirs;
     private String token;
     private Integer connectRetries;
     private Integer connectRetriesInterval;

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -1672,8 +1672,10 @@ public void configure(Map<String, String> props) {
         }
 
         if (StringUtils.hasText(getCurrentResolvedEnvironment().getUrl()) && (dataSource == null || StringUtils.hasText(urlProp) || StringUtils.hasText(driverProp) || StringUtils.hasText(userProp) || StringUtils.hasText(passwordProp))) {
+            Map<String, String> jdbcProperties = Optional.ofNullable(getCurrentResolvedEnvironment().getJdbcProperties()).orElse(new HashMap<>());
             Map<String, String> jdbcPropertiesFromProps = getPropertiesUnderNamespace(props, getPlaceholders(), ConfigUtils.JDBC_PROPERTIES_PREFIX);
-            setDataSource(new DriverDataSource(classLoader, getCurrentResolvedEnvironment().getDriver(), getCurrentResolvedEnvironment().getUrl(), getCurrentResolvedEnvironment().getUser(), getCurrentResolvedEnvironment().getPassword(), this, jdbcPropertiesFromProps));
+            jdbcProperties.putAll(jdbcPropertiesFromProps);
+            setDataSource(new DriverDataSource(classLoader, getCurrentResolvedEnvironment().getDriver(), getCurrentResolvedEnvironment().getUrl(), getCurrentResolvedEnvironment().getUser(), getCurrentResolvedEnvironment().getPassword(), this, jdbcProperties));
         }
 
         ConfigUtils.checkConfigurationForUnrecognisedProperties(props, "flyway.");

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/snowflake/SnowflakeDatabase.java
Patch:
@@ -83,7 +83,7 @@ public void ensureSupported() {
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("3", org.flywaydb.core.internal.license.Edition.ENTERPRISE);
 
-        recommendFlywayUpgradeIfNecessaryForMajorVersion("7.1");
+        recommendFlywayUpgradeIfNecessaryForMajorVersion("7.33");
     }
 
     @Override

File: flyway-gcp-bigquery/src/main/java/org/flywaydb/database/bigquery/BigQueryParser.java
Patch:
@@ -145,6 +145,7 @@ protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token
                 && !"WHILE".equalsIgnoreCase(keywordText)
                 && !"LOOP".equalsIgnoreCase(keywordText)
                 && !"AS".equalsIgnoreCase(keywordText)
+                && !"CASE".equalsIgnoreCase(keywordText)
                 && context.getBlockDepth() > 0) {
             context.decreaseBlockDepth();
         }

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/RootTelemetryModel.java
Patch:
@@ -25,6 +25,8 @@
 public class RootTelemetryModel {
     private String userId;
     private String sessionId;
+    private String projectId;
+    private String projectName;
     private String operationId;
     private String databaseEngine;
     private String databaseVersion;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/clean/DbClean.java
Patch:
@@ -63,7 +63,7 @@ public CleanResult clean() throws FlywayException {
 
         CleanResult cleanResult;
 
-        if (cleanMode == null || Mode.DEFAULT.name().equals(cleanMode) || !StringUtils.hasText(cleanMode)) {
+        if (cleanMode == null || Mode.DEFAULT.name().equalsIgnoreCase(cleanMode) || !StringUtils.hasText(cleanMode)) {
             cleanResult = CommandResultFactory.createCleanResult(database.getCatalog());
             new CleanExecutor(connection, database, schemaHistory, callbackExecutor).clean(defaultSchema, schemas, cleanResult);
         } else {

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/ResourceNameValidator.java
Patch:
@@ -73,7 +73,7 @@ private Collection<LoadableResource> getAllSqlResources(ResourceProvider provide
     private boolean isSpecialResourceFile(Configuration configuration, String filename) {
         try {
         DatabaseType databaseType = configuration.getDatabaseType();
-        return databaseType.getSpecialResourceFilenames(configuration).contains(filename);
+        return databaseType.getSpecialResourceFilenames(configuration).contains(filename.toLowerCase());
         } catch (Exception e) {
             return false;
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/SchemaHistory.java
Patch:
@@ -74,9 +74,7 @@ public abstract class SchemaHistory {
     public final boolean hasNonSyntheticAppliedMigrations() {
         for (AppliedMigration appliedMigration : allAppliedMigrations()) {
             if (!appliedMigration.getType().isSynthetic()
-
-
-
+                    && !appliedMigration.getType().isUndo()
             ) {
                 return true;
             }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/ClassUtils.java
Patch:
@@ -176,7 +176,8 @@ public static String getLocationOnDisk(Class<?> aClass) {
             //Custom classloader with for example classes defined using URLClassLoader#defineClass(String name, byte[] b, int off, int len)
             return null;
         }
-        return UrlUtils.decodeURL(codeSource.getLocation().getPath());
+
+        return UrlUtils.decodeURLSafe(codeSource.getLocation().getPath());
     }
 
     public static String getLibDir(Class<?> clazz) {

File: flyway-sqlserver/src/main/java/org/flywaydb/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -281,7 +281,7 @@ protected void doCleanPostSchemas(Schema[] schemas) throws SQLException {
         }
 
         String cleanMode = configuration.getPluginRegister().getPlugin(CleanModeConfigurationExtension.class).getClean().getMode();
-        if (Mode.ALL.name().equals(cleanMode)) {
+        if (Mode.ALL.name().equalsIgnoreCase(cleanMode)) {
             CleanModePlugin cleanModePlugin = configuration.getPluginRegister().getPlugins(CleanModePlugin.class).stream()
                                                            .filter(p -> p.handlesMode(Mode.valueOf(cleanMode)))
                                                            .filter(p -> p.handlesDatabase(this))

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/clean/DbClean.java
Patch:
@@ -83,7 +83,7 @@ public CleanResult clean() throws FlywayException {
     }
 
     private String toCommand(String mode) {
-        switch (mode) {
+        switch (mode.toUpperCase()) {
             case "SCHEMA":
                 return "clean-schemas";
             case "ALL":

File: flyway-commandline/src/main/java/org/flywaydb/commandline/CommandLineArguments.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/JavaVersionPrinter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/MavenVersionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/command/version/PluginVersionResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/command/version/VersionCommandExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/command/version/VersionResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/logging/console/ColorizedConsoleLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/logging/console/ConsoleLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/logging/console/ConsoleLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/logging/file/FileLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/logging/file/FileLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/utils/OperationsReportUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java17/org/flywaydb/commandline/JavaVersionPrinter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/CommunityDatabaseExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/ignite/thin/IgniteThinTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/ignite/thin/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/mysql/tidb/TiDBConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/mysql/tidb/TiDBDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/mysql/tidb/TiDBDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/yugabytedb/YugabyteDBConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/yugabytedb/YugabyteDBDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/yugabytedb/YugabyteDBDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/yugabytedb/YugabyteDBParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/yugabytedb/YugabyteDBSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/yugabytedb/YugabyteDBTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/yugabytedb/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/FlywayExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/FlywayTelemetryManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/ClassProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/CoreMigrationType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/ErrorCode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/ErrorDetails.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/FlywayException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/InfoOutputProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/Location.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationInfoService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationPattern.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/ResourceProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/BaseCallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Callback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Error.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Event.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Statement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Warning.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/S3ClientFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/exception/FlywayValidateException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/executor/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/executor/MigrationExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/executor/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/Log.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/LogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/LogFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/BaseJavaMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/JavaMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/BaselineResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CleanResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CommandResultFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CompositeResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/DashboardRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/DashboardResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/HoldingRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/HoldingResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/HtmlResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/HtmlTableRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/InfoHtmlRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/InfoOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/InfoResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/MigrateErrorResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/MigrateHtmlRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/MigrateOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/MigrateResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/OperationResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/OperationResultBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/OperationResultJsonBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/RepairOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/RepairResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/UndoOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/UndoResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/ValidateOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/ValidateResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/pattern/ValidatePattern.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/ChecksumMatcher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/MigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/ResolvedMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resource/LoadableResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resource/Resource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resource/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/AppliedMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/CleanModePlugin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/CommandExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/ConfigurationExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/ConfigurationParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/ConfigurationProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/EventTelemetryModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/HtmlRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/HtmlReportSummary.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/InfoTelemetryModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/MigrationType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/PluginMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/ResourceType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/ResourceTypeProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/RgDomainChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/RootTelemetryModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -29,6 +29,7 @@ public class RootTelemetryModel {
     private String applicationVersion;
     private String applicationEdition;
     private String databaseEngine;
+    private String databaseVersion;
     private String environment;
     private boolean redgateEmployee;
 

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/TelemetryPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/authentication/ExternalAuthFileReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/authentication/ExternalAuthPropertiesProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/authentication/postgres/PgpassFileReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/CallbackExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/NoopCallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/NoopCallbackExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SimpleContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptCallbackFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/clazz/NoopClassProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/clazz/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbBaseline.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbSchemas.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/clean/CleanExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/clean/CleanModeConfigurationExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/clean/DbClean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -98,6 +98,7 @@ public class ConfigUtils {
     public static final String LOGGERS = "flyway.loggers";
     public static final String KERBEROS_CONFIG_FILE = "flyway.kerberosConfigFile";
 
+    public static final String REPORT_ENABLED = "flyway.reportEnabled";
     public static final String REPORT_FILENAME = "flyway.reportFilename";
     // Oracle-specific
     public static final String ORACLE_SQLPLUS = "flyway.oracle.sqlplus";

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigurationValidator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ListDeserializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/TomlUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/ConfigurationModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/EnvironmentModel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/PropertyResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/ResolvedEnvironment.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/EnvironmentVariableResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/PropertyResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/PropertyResolverContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/resolvers/PropertyResolverContextImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseExecutionStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseTypeRegister.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DefaultExecutionStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/InsertRowLock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/BaseDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Connection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Function.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Schema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/SchemaObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Table.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/TestContainersDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Type.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBRetryingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachRetryingTransactionalExecutionTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Connection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Database.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2DatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Function.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Parser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Schema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Table.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Type.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbySchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Connection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Database.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2DatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Parser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Schema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Table.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLAdvisoryLockTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLConfigurationExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLCopyParsedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANADatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANADatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) Red Gate Software Ltd 2010-2022
+ * Copyright (C) Red Gate Software Ltd 2010-2023
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/CommandLineArguments.java
Patch:
@@ -147,6 +147,7 @@ private static List<String> getConfigFilesFromArgs(String[] args) {
     private static Map<String, String> getConfigurationFromArgs(String[] args) {
         return Arrays.stream(args)
                      .filter(CommandLineArguments::isConfigurationArg)
+                     .filter(arg -> !arg.startsWith("-" + CONFIG_FILES + "="))
                      .filter(f -> !isConfigurationOptionCommandlineOnly(getConfigurationOptionNameFromArg(f)))
                      .collect(Collectors.toMap(p -> (Arrays.stream((EnvironmentModel.class).getDeclaredFields()).anyMatch(x -> x.getName().equals(getConfigurationOptionNameFromArg(p)))
                                                        ? "environments." + ClassicConfiguration.TEMP_ENVIRONMENT_NAME + "."

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CommandResultFactory.java
Patch:
@@ -194,6 +194,9 @@ private static String getCategory(MigrationInfo migrationInfo) {
         if (migrationInfo.getType().isUndo()) {
             return "Undo";
         }
+        if (migrationInfo.getType().isBaseline()) {
+            return "Baseline";
+        }
         return "Versioned";
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -335,7 +335,7 @@ private static String convertKey(String key) {
             return ORACLE_WALLET_LOCATION;
         }
 
-        if ("FLYWAY_REPORT_FILENAME".endsWith(key)) {
+        if ("FLYWAY_REPORT_FILENAME".equals(key)) {
             return REPORT_FILENAME;
         }
 
@@ -379,10 +379,10 @@ public static Map<String, String> loadDefaultConfigurationFiles(File installatio
     }
 
     public static List<File> getDefaultTomlConfigFileLocations(File installationDir) {
-        return Arrays.asList(new File(installationDir.getAbsolutePath() + "/conf/flyway.toml"),
+        return new ArrayList<>(Arrays.asList(new File(installationDir.getAbsolutePath() + "/conf/flyway.toml"),
                       new File(System.getProperty("user.home") + "/flyway.toml"),
                       new File("flyway.toml"),
-                      new File("flyway.user.toml"));
+                      new File("flyway.user.toml")));
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/TomlUtils.java
Patch:
@@ -67,7 +67,7 @@ private static Map<String, Object> unflattenMap(Map<String, String> map) {
             for (int i = 0; i < parts.length; i++) {
                 if (i != parts.length - 1) {
                     //noinspection unchecked
-                    currentMap = (Map<String, Object>) currentMap.computeIfAbsent(parts[i], (x) -> new HashMap<>());
+                    currentMap = (Map<String, Object>) currentMap.computeIfAbsent(parts[i], (x) -> new HashMap<String, Object>());
                 } else {
                     currentMap.put(parts[i], entry.getValue());
                 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoDumper.java
Patch:
@@ -40,7 +40,7 @@ public class MigrationInfoDumper {
      */
     public static String dumpToAsciiTable(MigrationInfo[] migrationInfos) {
         Set<MigrationVersion> undoableVersions = getUndoableVersions(migrationInfos);
-        migrationInfos = removeAvailableUndos(migrationInfos);
+        migrationInfos = removeUndos(migrationInfos);
 
         List<String> columns = Arrays.asList("Category", "Version", "Description", "Type", "Installed On", "State", "Undoable");
 
@@ -104,10 +104,10 @@ private static Set<MigrationVersion> getUndoableVersions(MigrationInfo[] migrati
         return result;
     }
 
-    private static MigrationInfo[] removeAvailableUndos(MigrationInfo[] migrationInfos) {
+    private static MigrationInfo[] removeUndos(MigrationInfo[] migrationInfos) {
         List<MigrationInfo> result = new ArrayList<>();
         for (MigrationInfo migrationInfo : migrationInfos) {
-            if (!migrationInfo.getState().equals(MigrationState.AVAILABLE)) {
+            if (!migrationInfo.getType().isUndo()) {
                 result.add(migrationInfo);
             }
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -272,9 +272,7 @@ protected SqlStatement getNextStatement(Resource resource, PeekingReader reader,
 
                 if (keywords.size() <= getTransactionalDetectionCutoff()
                         && (tokenType == TokenType.KEYWORD
-
-
-
+                        || "@".equals(token.getText())
                 )
                         && parensDepth == 0
                         && (statementType == StatementType.UNKNOWN || canExecuteInTransaction == null)) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/FileSystemClassPathLocationScanner.java
Patch:
@@ -33,7 +33,7 @@ public Set<String> findResourceNames(String location, URL locationUrl) {
         File folder = new File(filePath);
         if (!folder.isDirectory()) {
             LOG.debug("Skipping path as it is not a directory: " + filePath);
-            return new TreeSet<>();
+            return new TreeSet<String>();
         }
 
         String classPathRootOnDisk = filePath.substring(0, filePath.length() - location.length());

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/jboss/JBossVFSv3ClassPathLocationScanner.java
Patch:
@@ -41,7 +41,7 @@ public Set<String> findResourceNames(String location, URL locationUrl) {
         }
         LOG.debug("Scanning starting at classpath root on JBoss VFS: " + classPathRootOnDisk);
 
-        Set<String> resourceNames = new TreeSet<>();
+        Set<String> resourceNames = new TreeSet<String>();
 
         List<VirtualFile> files;
         try {

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -136,7 +136,9 @@ public boolean isDetectEncoding() {
     }
 
     @Override
-    public String getReportFilename() { return getModernFlyway().getReportFilename(); }
+    public String getReportFilename() {
+        return getModernFlyway().getReportFilename();
+    }
 
     @Getter
     @Setter

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CommandResultFactory.java
Patch:
@@ -88,6 +88,7 @@ public static RepairResult createRepairResult(String databaseName) {
     public static InfoOutput createInfoOutput(Set<MigrationInfo> undoableMigrations, MigrationInfo migrationInfo) {
         return new InfoOutput(getCategory(migrationInfo),
                               migrationInfo.getVersion() != null ? migrationInfo.getVersion().getVersion() : "",
+                              migrationInfo.getVersion() != null ? migrationInfo.getVersion().getRawVersion() : "",
                               migrationInfo.getDescription(),
                               migrationInfo.getType() != null ? migrationInfo.getType().toString() : "",
                               migrationInfo.getInstalledOn() != null ? migrationInfo.getInstalledOn().toInstant().toString() : "",

File: flyway-core/src/main/java/org/flywaydb/core/api/output/InfoOutput.java
Patch:
@@ -21,6 +21,7 @@
 public class InfoOutput {
     public String category;
     public String version;
+    public String rawVersion;
     public String description;
     public String type;
     public String installedOnUTC;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -182,7 +182,7 @@ private Integer migrateGroup(boolean firstRun) {
             if (configuration.isOutOfOrder()) {
                 String outOfOrderWarning = "outOfOrder mode is active. Migration of schema " + schema + " may not be reproducible.";
                 LOG.warn(outOfOrderWarning);
-                migrateResult.warnings.add(outOfOrderWarning);
+                migrateResult.addWarning(outOfOrderWarning);
             }
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSchema.java
Patch:
@@ -815,7 +815,9 @@ public static Set<String> getObjectTypeNames(JdbcTemplate jdbcTemplate, OracleDa
 
 
                                     "UNION SELECT '" + CREDENTIAL.getName() + "' FROM DUAL WHERE EXISTS(" +
-                                            "SELECT * FROM ALL_SCHEDULER_CREDENTIALS WHERE OWNER = ?) "
+                                            "SELECT * FROM "+
+                                            (database.getVersion().isAtLeast("12.1")?"ALL_CREDENTIALS":"ALL_SCHEDULER_CREDENTIALS")
+                                            +" WHERE OWNER = ?) "
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -248,7 +248,7 @@ public ErrorDetails validate() {
             }
         }
 
-        if (!context.isIgnoredIgnored() && MigrationState.IGNORED == state && !resolvedMigration.getType().isBaseline()) {
+        if (!context.isIgnoredIgnored() && MigrationState.IGNORED == state && !resolvedMigration.getType().isBaseline() && !resolvedMigration.getType().isUndo()) {
             if (shouldNotExecuteMigration) {
                 return null;
             }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/JsonUtils.java
Patch:
@@ -73,6 +73,7 @@ public static <T extends OperationResult> CompositeResult<T> appendIfExists(Stri
         Type existingObjectType = new TypeToken<CompositeResult<T>>() { }.getType();
 
         try (FileReader reader = new FileReader(filename)) {
+
             existingObject = new GsonBuilder()
                     .registerTypeAdapter(existingObjectType, deserializer)
                     .create()

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/EnvironmentModel.java
Patch:
@@ -37,8 +37,8 @@ public class EnvironmentModel {
     private String driver;
     private List<String> schemas = new ArrayList<>();
     private String token;
-    private Integer connectRetries = 120;
-    private Integer connectRetriesInterval = 0;
+    private Integer connectRetries = 0;
+    private Integer connectRetriesInterval = 120;
     private String initSql;
     private Map<String, String> jdbcProperties;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/FlywayModel.java
Patch:
@@ -33,6 +33,7 @@
 @NoArgsConstructor
 @ExtensionMethod(MergeUtils.class)
 public class FlywayModel {
+    private String reportFilename;
     private String environment;
     private Boolean detectEncoding;
     private String encoding;
@@ -92,6 +93,7 @@ public class FlywayModel {
 
     public static FlywayModel defaults(){
          FlywayModel model = new FlywayModel();
+         model.reportFilename = "report.html";
          model.detectEncoding = false;
          model.encoding = "UTF-8";
          model.executeInTransaction = true;
@@ -145,6 +147,7 @@ public static FlywayModel defaults(){
 
     public FlywayModel merge(FlywayModel otherPojo) {
         FlywayModel result = new FlywayModel();
+        result.reportFilename = reportFilename.merge(otherPojo.reportFilename);
         result.encoding = encoding.merge(otherPojo.encoding);
         result.environment = environment.merge(otherPojo.environment);
         result.detectEncoding = detectEncoding.merge(otherPojo.detectEncoding);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/TestContainersDatabaseType.java
Patch:
@@ -27,7 +27,7 @@
 public class TestContainersDatabaseType extends BaseDatabaseType {
     @Override
     public String getName() {
-        return "Test Containers";
+        return "Testcontainers";
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftDatabaseType.java
Patch:
@@ -73,8 +73,7 @@ public String getBackupDriverClass(String url, ClassLoader classLoader) {
     @Override
     public boolean handlesDatabaseProductNameAndVersion(String databaseProductName, String databaseProductVersion, Connection connection) {
         if (databaseProductName.startsWith("PostgreSQL")) {
-            String selectVersionQueryOutput = getSelectVersionOutput(connection);
-            if (databaseProductName.startsWith("PostgreSQL 8") && selectVersionQueryOutput.contains("Redshift")) {
+            if (databaseProductName.startsWith("PostgreSQL 8") && getSelectVersionOutput(connection).contains("Redshift")) {
                 return true;
             }
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteDatabaseType.java
Patch:
@@ -23,7 +23,6 @@
 import org.flywaydb.core.internal.jdbc.StatementInterceptor;
 import org.flywaydb.core.internal.parser.Parser;
 import org.flywaydb.core.internal.parser.ParsingContext;
-import org.flywaydb.core.internal.util.FeatureDetector;
 
 import java.sql.Connection;
 import java.sql.Types;

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/Scanner.java
Patch:
@@ -65,8 +65,6 @@ public Scanner(
         FileSystemScanner fileSystemScanner = new FileSystemScanner(encoding, stream, detectEncoding, throwOnMissingLocations);
 
         FeatureDetector detector = new FeatureDetector(classLoader);
-        boolean aws = detector.isAwsAvailable();
-        boolean gcs = detector.isGCSAvailable();
         long cloudMigrationCount = 0;
 
         for (Location location : locations) {
@@ -86,7 +84,7 @@ public Scanner(
 
 
             } else if (location.isAwsS3()) {
-                if (aws) {
+                if (detector.isAwsAvailable()) {
                     Collection<LoadableResource> awsResources = new AwsS3Scanner(encoding, throwOnMissingLocations).scanForResources(location);
                     resources.addAll(awsResources);
                     cloudMigrationCount += awsResources.stream().filter(r -> r.getFilename().endsWith(".sql")).count();

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/ClassPathScanner.java
Patch:
@@ -282,7 +282,7 @@ private List<URL> getLocationUrlsForPath(Location location) {
      * @return The url resolver for this protocol.
      */
     private UrlResolver createUrlResolver(String protocol) {
-        if (new FeatureDetector(classLoader).isJBossVFSv2Available() && protocol.startsWith("vfs")) {
+        if (protocol.startsWith("vfs") && new FeatureDetector(classLoader).isJBossVFSv2Available()) {
             return new JBossVFSv2UrlResolver();
         }
 
@@ -316,13 +316,13 @@ private ClassPathLocationScanner createLocationScanner(String protocol) {
         }
 
         FeatureDetector featureDetector = new FeatureDetector(classLoader);
-        if (featureDetector.isJBossVFSv3Available() && "vfs".equals(protocol)) {
+        if ("vfs".equals(protocol) && featureDetector.isJBossVFSv3Available()) {
             JBossVFSv3ClassPathLocationScanner locationScanner = new JBossVFSv3ClassPathLocationScanner();
             locationScannerCache.put(protocol, locationScanner);
             resourceNameCache.put(locationScanner, new HashMap<>());
             return locationScanner;
         }
-        if (featureDetector.isOsgiFrameworkAvailable() && (isFelix(protocol) || isEquinox(protocol))) {
+        if ((isFelix(protocol) || isEquinox(protocol)) && featureDetector.isOsgiFrameworkAvailable()) {
             OsgiClassPathLocationScanner locationScanner = new OsgiClassPathLocationScanner();
             locationScannerCache.put(protocol, locationScanner);
             resourceNameCache.put(locationScanner, new HashMap<>());

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayExtension.java
Patch:
@@ -279,7 +279,7 @@ public class FlywayExtension {
      * <ul>
      *     <li>auto: Auto detect the logger (default behavior)</li>
      *     <li>console: Use stdout/stderr (only available when using the CLI)</li>
-     *     <li>slf4j2: Use the slf4j2 logger</li>
+     *     <li>slf4j: Use the slf4j logger</li>
      *     <li>log4j2: Use the log4j2 logger</li>
      *     <li>apache-commons: Use the Apache Commons logger</li>
      * </ul>

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -319,7 +319,7 @@ public abstract class AbstractFlywayTask extends DefaultTask {
      * <ul>
      *     <li>auto: Auto detect the logger (default behavior)</li>
      *     <li>console: Use stdout/stderr (only available when using the CLI)</li>
-     *     <li>slf4j2: Use the slf4j2 logger</li>
+     *     <li>slf4j: Use the slf4j logger</li>
      *     <li>log4j2: Use the log4j2 logger</li>
      *     <li>apache-commons: Use the Apache Commons logger</li>
      * </ul>

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -339,7 +339,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      * <ul>
      *     <li>auto: Auto detect the logger (default behavior)</li>
      *     <li>console: Use stdout/stderr (only available when using the CLI)</li>
-     *     <li>slf4j2: Use the slf4j2 logger</li>
+     *     <li>slf4j: Use the slf4j logger</li>
      *     <li>log4j2: Use the log4j2 logger</li>
      *     <li>apache-commons: Use the Apache Commons logger</li>
      * </ul>

File: flyway-mysql/src/main/java/org/flywaydb/database/mysql/MySQLConnection.java
Patch:
@@ -79,7 +79,7 @@ private boolean hasUserVariableResetCapability() {
         } catch (SQLException e) {
             LOG.debug("Disabled user variable reset as "
                               + (database.isMariaDB() ? USER_VARIABLES_TABLE_MARIADB : USER_VARIABLES_TABLE_MYSQL)
-                              + "cannot be queried (SQL State: " + e.getSQLState() + ", Error Code: " + e.getErrorCode() + ")");
+                              + " cannot be queried (SQL State: " + e.getSQLState() + ", Error Code: " + e.getErrorCode() + ")");
             return false;
         }
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlScriptExecutor.java
Patch:
@@ -308,6 +308,8 @@ public OracleSqlScriptExecutor(JdbcTemplate jdbcTemplate, CallbackExecutor callb
 
 
 
+
+
 
 
 

File: flyway-commandline/src/main/java/org/flywaydb/commandline/RedgateUpdateChecker.java
Patch:
@@ -55,7 +55,7 @@ public static class Context {
     private static final String CFU_ENDPOINT = "/flyway/cfu/api/v0/cfu";
 
     public static boolean isEnabled() {
-        return usageChecker("flyway-cfu", VersionPrinter.getVersion());
+        return !Boolean.parseBoolean(System.getenv("REDGATE_DISABLE_TELEMETRY")) && usageChecker("flyway-cfu", VersionPrinter.getVersion());
     }
 
     public static void checkForVersionUpdates(Context context) {

File: flyway-commandline/src/main/java/org/flywaydb/commandline/command/version/VersionResult.java
Patch:
@@ -19,9 +19,12 @@
 import org.flywaydb.core.api.output.OperationResult;
 import org.flywaydb.core.internal.license.Edition;
 
+import java.util.List;
+
 @AllArgsConstructor
 public class VersionResult implements OperationResult {
     public String version;
     public String command;
     public Edition edition;
+    public List<PluginVersionResult> pluginVersions;
 }
\ No newline at end of file

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -504,7 +504,7 @@ private static void printUsage() {
         LOG.info(indent + "mixed                          Allow mixing transactional and non-transactional statements");
         LOG.info(indent + "encoding                       Encoding of SQL migrations");
         LOG.info(indent + "detectEncoding                 [" + "teams] Whether Flyway should try to automatically detect SQL migration file encoding");
-        LOG.info(indent + "executionInTransaction         Whether SQL should execute within a transaction");
+        LOG.info(indent + "executeInTransaction           Whether SQL should execute within a transaction");
         LOG.info(indent + "placeholderReplacement         Whether placeholders should be replaced");
         LOG.info(indent + "placeholders                   Placeholders to replace in sql migrations");
         LOG.info(indent + "placeholderPrefix              Prefix of every placeholder");

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -661,7 +661,7 @@ public FluentConfiguration initSql(String initSql) {
      * @param baselineVersion The version to tag an existing schema with when executing baseline. (default: 1)
      */
     public FluentConfiguration baselineVersion(MigrationVersion baselineVersion) {
-        config.setBaselineVersion(baselineVersion.getVersion());
+        config.setBaselineVersion(baselineVersion);
         return this;
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/models/FlywayModel.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -108,7 +109,7 @@ public static FlywayModel defaults(){
          model.oracleSqlplusWarn = false;
          model.cleanDisabled = true;
          model.cleanOnValidationError = false;
-         model.locations = Arrays.asList("db/migration");
+         model.locations = new ArrayList<>(Collections.singletonList("db/migration"));
          model.target = "latest";
          model.table = "flyway_schema_history";
          model.failOnMissingTarget = false;

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/TomlUtils.java
Patch:
@@ -77,7 +77,7 @@ private static Map<String, Object> unflattenMap(Map<String, String> map) {
     }
 
     public static ConfigurationModel loadConfigurationFiles(List<File> files, String workingDirectory) {
-        ConfigurationModel defaultConfig = new ConfigurationModel().defaults();
+        ConfigurationModel defaultConfig = ConfigurationModel.defaults();
         return files.stream()
                     .map(f -> TomlUtils.loadConfigurationFile(f, workingDirectory))
                     .reduce(defaultConfig, ConfigurationModel::merge);

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/ExecutionTemplateFactory.java
Patch:
@@ -41,7 +41,7 @@ public static ExecutionTemplate createExecutionTemplate(Connection connection) {
      * @param database The database
      */
     public static ExecutionTemplate createExecutionTemplate(Connection connection, Database database) {
-        if (database.supportsMultiStatementTransactions()) {
+        if (database.supportsMultiStatementTransactions() && database.getConfiguration().isExecuteInTransaction()) {
             return createTransactionalExecutionTemplate(connection, true, database.getDatabaseType());
         }
 

File: flyway-commandline/src/main/java/org/flywaydb/commandline/RedgateUpdateChecker.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.gson.JsonObject;
 import lombok.*;
 import lombok.experimental.ExtensionMethod;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.extensibility.RgDomainChecker;
 import org.flywaydb.core.internal.license.VersionPrinter;
 import org.flywaydb.core.internal.plugin.PluginRegister;
@@ -42,7 +43,7 @@
 public class RedgateUpdateChecker {
     @RequiredArgsConstructor
     public static class Context {
-        public final Map<String, String> config;
+        public final Configuration config;
         public final List<String> verbs;
         public final String dbEngine;
         public final String dbVersion;

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.flywaydb.core.api.configuration;
 
+import lombok.Getter;
 import lombok.experimental.Delegate;
 import org.flywaydb.core.Flyway;
 import org.flywaydb.core.api.*;
@@ -37,7 +38,6 @@
  * This configuration can be passed to Flyway using the <code>new Flyway(Configuration)</code> constructor.
  */
 public class FluentConfiguration implements Configuration {
-
     @Delegate(types = Configuration.class)
     private final ClassicConfiguration config;
 
@@ -650,7 +650,7 @@ public FluentConfiguration initSql(String initSql) {
      * @param baselineVersion The version to tag an existing schema with when executing baseline. (default: 1)
      */
     public FluentConfiguration baselineVersion(MigrationVersion baselineVersion) {
-        config.setBaselineVersion(baselineVersion);
+        config.setBaselineVersion(baselineVersion.getVersion());
         return this;
     }
 
@@ -660,7 +660,7 @@ public FluentConfiguration baselineVersion(MigrationVersion baselineVersion) {
      * @param baselineVersion The version to tag an existing schema with when executing baseline. (default: 1)
      */
     public FluentConfiguration baselineVersion(String baselineVersion) {
-        config.setBaselineVersion(MigrationVersion.fromVersion(baselineVersion));
+        config.setBaselineVersion(baselineVersion);
         return this;
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/extensibility/RgDomainChecker.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.extensibility;
 
-import java.util.Map;
+import org.flywaydb.core.api.configuration.Configuration;
 
 public interface RgDomainChecker extends Plugin {
-    boolean isInDomain(Map<String, String> config);
+    boolean isInDomain(Configuration config);
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/FlywayDbWebsiteLinks.java
Patch:
@@ -42,7 +42,6 @@ public class FlywayDbWebsiteLinks {
     public static final String AZURE_ACTIVE_DIRECTORY = "https://rd.gt/3unaRb8";
     public static final String TRIAL_UPGRADE = "https://rd.gt/2WNixqj";
     public static final String KNOWN_PARSER_LIMITATIONS = "https://rd.gt/3ipi7Pm";
-    public static final String BIG_QUERY_BETA = "https://rd.gt/3fut40f";
     public static final String CLOUD_SPANNER_BETA = "https://rd.gt/3yqM3jJ";
     public static final String TEAMS_FEATURES_FOR_BIG_QUERY = "https://rd.gt/3CWAuTb";
     public static final String TEAMS_FEATURES_FOR_CLOUD_SPANNER = "https://rd.gt/2ZvELhV";

File: flyway-gcp-bigquery/src/main/java/org/flywaydb/database/BigQueryDatabaseExtension.java
Patch:
@@ -24,7 +24,7 @@
 
 public class BigQueryDatabaseExtension implements PluginMetadata {
     public String getDescription() {
-        return "GCP BigQuery database support (beta) " + readVersion() + " by Redgate";
+        return "GCP BigQuery database support " + readVersion() + " by Redgate";
     }
 
     private static String readVersion() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -83,8 +83,8 @@ public String getRawCreateScript(Table table, boolean baseline) {
                 "    \"success\" BOOLEAN NOT NULL\n" +
                 ")" + tablespace + ";\n" +
                 (baseline ? getBaselineStatement(table) + ";\n" : "") +
-                "ALTER TABLE " + table + " ADD CONSTRAINT \"" + table.getName() + "_pk\" PRIMARY KEY (\"installed_rank\");\n" +
-                "CREATE INDEX \"" + table.getName() + "_s_idx\" ON " + table + " (\"success\");";
+                "ALTER TABLE " + table + " ADD CONSTRAINT \"" + table.getName() + "_pk\" PRIMARY KEY (\"installed_rank\")" + (configuration.getTablespace() != null ? " USING INDEX" + tablespace : "" ) + ";\n" +
+                "CREATE INDEX \"" + table.getName() + "_s_idx\" ON " + table + " (\"success\")" + tablespace + ";";
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSchema.java
Patch:
@@ -295,7 +295,7 @@ private List<String> generateDropStatementsForDomains() throws SQLException {
 
         List<String> statements = new ArrayList<>();
         for (String domainName : domainNames) {
-            statements.add("DROP DOMAIN " + database.quote(name, domainName));
+            statements.add("DROP DOMAIN IF EXISTS " + database.quote(name, domainName) + " CASCADE");
         }
 
         return statements;

File: flyway-commandline/src/main/java/org/flywaydb/commandline/command/version/VersionCommandExtension.java
Patch:
@@ -57,7 +57,7 @@ public OperationResult handle(String command, Configuration config, List<String>
         LOG.debug("Java " + System.getProperty("java.version") + " (" + System.getProperty("java.vendor") + ")");
         LOG.debug(System.getProperty("os.name") + " " + System.getProperty("os.version") + " " + System.getProperty("os.arch") + "\n");
 
-        return new VersionResult(VersionPrinter.getVersion(), command);
+        return new VersionResult(VersionPrinter.getVersion(), command, VersionPrinter.EDITION);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Database.java
Patch:
@@ -194,8 +194,6 @@ protected String doGetCurrentUser() throws SQLException {
 
     public abstract boolean supportsDdlTransactions();
 
-    public abstract boolean supportsChangingCurrentSchema();
-
     /**
      * @return The representation of the value {@code true} in a boolean column.
      */

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -360,6 +360,7 @@ private static String convertKey(String key) {
     public static Map<String, String> loadDefaultConfigurationFiles(File installationDir, String encoding) {
         Map<String, String> configMap = new HashMap<>();
         configMap.putAll(ConfigUtils.loadConfigurationFile(new File(installationDir.getAbsolutePath() + "/conf/" + ConfigUtils.CONFIG_FILE_NAME), encoding, false));
+        configMap.putAll(TomlUtils.loadConfigurationFile(new File(installationDir.getAbsolutePath() + "/conf/flyway.toml"), encoding));
         configMap.putAll(ConfigUtils.loadConfigurationFile(new File(System.getProperty("user.home") + "/" + ConfigUtils.CONFIG_FILE_NAME), encoding, false));
         configMap.putAll(ConfigUtils.loadConfigurationFile(new File(ConfigUtils.CONFIG_FILE_NAME), encoding, false));
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Database.java
Patch:
@@ -345,7 +345,7 @@ public final String getBaselineStatement(Table table) {
                              "'" + CoreMigrationType.BASELINE + "'",
                              "'" + AbbreviationUtils.abbreviateScript(configuration.getBaselineDescription()) + "'",
                              "NULL",
-                             "'" + installedBy + "'",
+                             "'" + getInstalledBy() + "'",
                              0,
                              getBooleanTrue()
                             );

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -186,7 +186,7 @@ public static void main(String[] args) {
             }
 
             if (commandLineArguments.isCommunityFallback()) {
-                LOG.warn("A Flyway License was not been provided; fell back to Community Edition. Please contact sales at sales@flywaydb.org for license information.");
+                LOG.warn("A Flyway License was not provided; fell back to Community Edition. Please contact sales at sales@flywaydb.org for license information.");
             }
 
             if (commandLineArguments.shouldOutputJson()) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/snowflake/SnowflakeDatabase.java
Patch:
@@ -82,7 +82,7 @@ public void ensureSupported() {
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("3", org.flywaydb.core.internal.license.Edition.ENTERPRISE);
 
-        recommendFlywayUpgradeIfNecessaryForMajorVersion("5.22");
+        recommendFlywayUpgradeIfNecessaryForMajorVersion("6.29");
     }
 
     @Override

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -182,10 +182,11 @@ public static void main(String[] args) {
                 String operation = commandLineArguments.getOperations().get(0);
                 result = executeOperation(flyway, operation, commandLineArguments);
             } else {
-                result = new CompositeResult();
+                CompositeResult<OperationResult> compositeResult = new CompositeResult<>();
                 for (String operation : commandLineArguments.getOperations()) {
-                    ((CompositeResult) result).individualResults.add(executeOperation(flyway, operation, commandLineArguments));
+                    compositeResult.individualResults.add(executeOperation(flyway, operation, commandLineArguments));
                 }
+                result = compositeResult;
             }
 
             if (commandLineArguments.shouldOutputJson()) {
@@ -405,7 +406,6 @@ private static void printUsage() {
         LOG.info(indent + StringUtils.rightPad("clean", padSize, ' ') + "Drops all objects in the configured schemas");
         LOG.info(indent + StringUtils.rightPad("info", padSize, ' ') + "Prints the information about applied, current and pending migrations");
         LOG.info(indent + StringUtils.rightPad("validate", padSize, ' ') + "Validates the applied migrations against the ones on the classpath");
-        LOG.info(indent + StringUtils.rightPad("undo", padSize, ' ') + "[" + "teams] Undoes the most recently applied versioned migration");
         LOG.info(indent + StringUtils.rightPad("baseline", padSize, ' ') + "Baselines an existing database at the baselineVersion");
         LOG.info(indent + StringUtils.rightPad("repair", padSize, ' ') + "Repairs the schema history table");
         usages.forEach(u -> LOG.info(indent + StringUtils.rightPad(u.getLeft(), padSize, ' ') + u.getRight()));

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CompositeResult.java
Patch:
@@ -18,6 +18,6 @@
 import java.util.LinkedList;
 import java.util.List;
 
-public class CompositeResult implements OperationResult {
-    public List<OperationResult> individualResults = new LinkedList<>();
+public class CompositeResult<T extends OperationResult> implements OperationResult {
+    public List<T> individualResults = new LinkedList<>();
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/ResourceNameParser.java
Patch:
@@ -104,8 +104,8 @@ private Pair<String, ResourceType> findPrefix(String nameWithoutSuffix, List<Pai
 
     private Pair<String, String> stripSuffix(String name, String[] suffixes) {
         for (String suffix : suffixes) {
-            if (name.endsWith(suffix)) {
-                return Pair.of(name.substring(0, name.length() - suffix.length()), suffix);
+            if (name.toUpperCase().endsWith(suffix.toUpperCase())) {
+                return Pair.of(name.substring(0, name.length() - suffix.length()), name.substring(name.length() - suffix.length()));
             }
         }
         return Pair.of(name, "");

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/StringUtils.java
Patch:
@@ -331,7 +331,7 @@ public static boolean startsAndEndsWith(String str, String prefix, String... suf
             return false;
         }
         for (String suffix : suffixes) {
-            if (str.endsWith(suffix) && (str.length() > (prefix + suffix).length())) {
+            if (str.toUpperCase().endsWith(suffix.toUpperCase()) && (str.length() > (prefix + suffix).length())) {
                 return true;
             }
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/FlywayDbWebsiteLinks.java
Patch:
@@ -48,4 +48,5 @@ public class FlywayDbWebsiteLinks {
     public static final String TEAMS_FEATURES_FOR_CLOUD_SPANNER = "https://rd.gt/2ZvELhV";
     public static final String FILE_ENCODING_HELP = "https://rd.gt/3BzSFhr";
     public static final String TEAMS_ENTERPRISE_DOWNLOAD = "https://rd.gt/3aqhTXb";
+    public static final String SQLFLUFF_CONFIGURATION = "https://rd.gt/3dDFeFN";
 }
\ No newline at end of file

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -103,7 +103,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      * <p>Also configurable with Maven or System Property: ${flyway.connectRetries}</p>
      */
     @Parameter(property = ConfigUtils.CONNECT_RETRIES)
-    private int connectRetries;
+    private Integer connectRetries;
 
     /**
      * The maximum time between retries when attempting to connect to the database in seconds. This will cap the interval
@@ -112,7 +112,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      * <p>Also configurable with Maven or System Property: ${flyway.connectRetriesInterval}</p>
      */
     @Parameter(property = ConfigUtils.CONNECT_RETRIES_INTERVAL)
-    private int connectRetriesInterval;
+    private Integer connectRetriesInterval;
 
     /**
      * The SQL statements to run to initialize a new database connection immediately after opening it. (default: {@code null})

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleDatabase.java
Patch:
@@ -69,7 +69,7 @@ public final void ensureSupported() {
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("18.0", org.flywaydb.core.internal.license.Edition.ENTERPRISE);
 
-        recommendFlywayUpgradeIfNecessary("19.0");
+        recommendFlywayUpgradeIfNecessaryForMajorVersion("19.3");
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/snowflake/SnowflakeDatabase.java
Patch:
@@ -82,7 +82,7 @@ public void ensureSupported() {
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("3", org.flywaydb.core.internal.license.Edition.ENTERPRISE);
 
-        recommendFlywayUpgradeIfNecessaryForMajorVersion("5.1");
+        recommendFlywayUpgradeIfNecessaryForMajorVersion("5.22");
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -128,7 +128,7 @@ public boolean catalogIsSchema() {
 
     @Override
     public boolean useSingleConnection() {
-        return true;
+        return false;
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/DefaultSqlScriptExecutor.java
Patch:
@@ -257,7 +257,7 @@ protected void outputQueryResult(Result result) {
 
 
 
-                        result.getColumns() != null) {
+                        result.getColumns() != null && !result.getColumns().isEmpty()) {
             LOG.info(new AsciiTable(result.getColumns(), result.getData(),
                                     true, "", "No rows returned").render());
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/AsciiTable.java
Patch:
@@ -92,7 +92,7 @@ public String render() {
         result.append(ruler);
 
         if (rows.isEmpty()) {
-            result.append("| ").append(StringUtils.trimOrPad(emptyText, ruler.length() - 5)).append(" |\n");
+            result.append("| ").append(StringUtils.trimOrPad(emptyText, ruler.length() - Math.min(ruler.length(), 5))).append(" |\n");
         } else {
             for (List<String> row : rows) {
                 StringBuilder r = new StringBuilder("|");

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -125,13 +125,13 @@ public static void main(String[] args) {
             initializeDefaults(config, commandLineArguments);
             loadConfigurationFromConfigFiles(config, commandLineArguments, envVars);
 
+            config.putAll(envVars);
+            config = overrideConfiguration(config, commandLineArguments.getConfiguration());
+
             if (commandLineArguments.isWorkingDirectorySet()) {
                 makeRelativeLocationsBasedOnWorkingDirectory(commandLineArguments, config);
             }
 
-            config.putAll(envVars);
-            config = overrideConfiguration(config, commandLineArguments.getConfiguration());
-
             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
             List<File> jarFiles = new ArrayList<>();
             jarFiles.addAll(getJdbcDriverJarFiles());

File: flyway-commandline/src/main/java/org/flywaydb/commandline/MavenVersionChecker.java
Patch:
@@ -68,6 +68,7 @@ public static void checkForVersionUpdates() {
             URL url = new URL(FLYWAY_URL);
             @Cleanup(value = "disconnect") HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
             connection.setRequestMethod("GET");
+            connection.setConnectTimeout(1000);
 
             StringBuilder response = new StringBuilder();
 

File: flyway-commandline/src/main/java/org/flywaydb/commandline/RedgateUpdateChecker.java
Patch:
@@ -79,6 +79,7 @@ private static String cfu(Context context) {
             @Cleanup(value = "disconnect") HttpsURLConnection connection = (HttpsURLConnection) new URL(PLATFORM_URL_ROOT + CFU_ENDPOINT).openConnection();
             connection.setRequestMethod("POST");
             connection.setRequestProperty("Content-Type", "application/json; utf-8");
+            connection.setConnectTimeout(1000);
             connection.setDoOutput(true);
 
             try (OutputStream os = connection.getOutputStream()) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlScriptExecutor.java
Patch:
@@ -18,6 +18,7 @@
 import lombok.AccessLevel;
 import lombok.CustomLog;
 import lombok.Getter;
+import lombok.Setter;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.callback.Error;
 import org.flywaydb.core.internal.callback.CallbackExecutor;
@@ -66,6 +67,7 @@ public class OracleSqlScriptExecutor extends DefaultSqlScriptExecutor {
 
 
 
+
     public OracleSqlScriptExecutor(JdbcTemplate jdbcTemplate, CallbackExecutor callbackExecutor, boolean undo, boolean batch, boolean outputQueryResults, StatementInterceptor statementInterceptor) {
         super(jdbcTemplate, callbackExecutor, undo, batch, outputQueryResults, statementInterceptor);
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DriverDataSource.java
Patch:
@@ -246,6 +246,7 @@ public Connection getConnection(String username, String password) throws SQLExce
      */
     protected Connection getConnectionFromDriver(String username, String password) throws SQLException {
         Properties properties = new Properties(this.defaultProperties);
+        properties.putAll(additionalProperties);
 
         if (username != null) {
             properties.setProperty("user", username);
@@ -254,8 +255,6 @@ protected Connection getConnectionFromDriver(String username, String password) t
             properties.setProperty("password", password);
         }
 
-        properties.putAll(additionalProperties);
-
         Connection connection = driver.connect(url, properties);
         if (connection == null) {
             throw new FlywayException("Unable to connect to " + DatabaseTypeRegister.redactJdbcUrl(url));

File: flyway-commandline/src/main/java/org/flywaydb/commandline/command/version/VersionCommandExtension.java
Patch:
@@ -57,7 +57,7 @@ public OperationResult handle(String command, Configuration config, List<String>
         LOG.debug("Java " + System.getProperty("java.version") + " (" + System.getProperty("java.vendor") + ")");
         LOG.debug(System.getProperty("os.name") + " " + System.getProperty("os.version") + " " + System.getProperty("os.arch") + "\n");
 
-        return null;
+        return new OperationResult() {};
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleDatabase.java
Patch:
@@ -67,8 +67,6 @@ protected OracleConnection doGetConnection(Connection connection) {
 
 
 
-
-
     @Override
     public final void ensureSupported() {
         ensureDatabaseIsRecentEnough("10");

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Database.java
Patch:
@@ -42,6 +42,8 @@ public class H2Database extends Database<H2Connection> {
      */
     private enum CompatibilityMode {
         REGULAR,
+        STRICT,
+        LEGACY,
         DB2,
         Derby,
         HSQLDB,

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -115,7 +115,7 @@ public final SqlStatementIterator parse(LoadableResource resource, SqlScriptMeta
         LOG.debug("Parsing " + filename + " ...");
 
         ResourceName result = new ResourceNameParser(configuration).parse(filename);
-        parsingContext.updateFilenamePlaceholder(result);
+        parsingContext.updateFilenamePlaceholder(result, configuration);
 
         PeekingReader peekingReader = new PeekingReader(
                 new RecordingReader(recorder,

File: flyway-core/src/main/java/org/flywaydb/core/FlywayExecutor.java
Patch:
@@ -140,9 +140,7 @@ public <T> T execute(Command<T> command, boolean scannerRequired) {
 
 
 
-        if (configuration.isValidateMigrationNaming()) {
-            resourceNameValidator.validateSQLMigrationNaming(resourceProvider, configuration);
-        }
+        resourceNameValidator.validateSQLMigrationNaming(resourceProvider, configuration);
 
         JdbcConnectionFactory jdbcConnectionFactory = new JdbcConnectionFactory(configuration.getDataSource(), configuration, statementInterceptor);
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Database.java
Patch:
@@ -16,6 +16,7 @@
 package org.flywaydb.core.internal.database.base;
 
 import lombok.CustomLog;
+import lombok.Getter;
 import org.flywaydb.core.api.MigrationType;
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.api.configuration.Configuration;
@@ -44,6 +45,7 @@
 @CustomLog
 public abstract class Database<C extends Connection> implements Closeable {
     protected final DatabaseType databaseType;
+    @Getter
     protected final Configuration configuration;
     protected final StatementInterceptor statementInterceptor;
     protected final JdbcConnectionFactory jdbcConnectionFactory;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/FlywayDbWebsiteLinks.java
Patch:
@@ -17,8 +17,6 @@
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
-import org.flywaydb.core.api.MigrationVersion;
-import org.flywaydb.core.internal.license.VersionPrinter;
 
 
 

File: flyway-sqlserver/src/main/java/org/flywaydb/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -280,6 +280,9 @@ protected void doCleanPostSchemas(Schema[] schemas) throws SQLException {
     private List<String> cleanTypes(Schema[] schemas) throws SQLException {
         List<String> statements = new ArrayList<>();
         String schemaList = Arrays.stream(schemas).map(s -> "'" + s.getName() + "'").collect(Collectors.joining(","));
+        if (schemaList.isEmpty()) {
+            schemaList = "''";
+        }
         List<Map<String, String>> typesAndSchemas = jdbcTemplate.queryForList("" +
                                                                                       "SELECT t.name as type_name, s.name as schema_name " +
                                                                                       "FROM sys.types t INNER JOIN sys.schemas s ON t.schema_id = s.schema_id " +

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLConnection.java
Patch:
@@ -75,7 +75,7 @@ public void changeCurrentSchemaTo(Schema schema) {
             }
 
             if (StringUtils.hasText(originalSchemaNameOrSearchPath)) {
-                doChangeCurrentSchemaOrSearchPathTo(schema.toString() + "," + originalSchemaNameOrSearchPath);
+                doChangeCurrentSchemaOrSearchPathTo(schema + "," + originalSchemaNameOrSearchPath);
             } else {
                 doChangeCurrentSchemaOrSearchPathTo(schema.toString());
             }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Database.java
Patch:
@@ -111,7 +111,7 @@ public final void ensureSupported() {
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("1.4", org.flywaydb.core.internal.license.Edition.ENTERPRISE);
 
-        recommendFlywayUpgradeIfNecessary("2.0.206");
+        recommendFlywayUpgradeIfNecessary("2.1.210");
         supportsDropSchemaCascade = getVersion().isAtLeast("1.4.200");
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleParser.java
Patch:
@@ -21,6 +21,7 @@
 import org.flywaydb.core.internal.parser.*;
 import org.flywaydb.core.internal.sqlscript.Delimiter;
 import org.flywaydb.core.internal.sqlscript.ParsedSqlStatement;
+import org.flywaydb.core.internal.sqlscript.SqlScriptMetadata;
 import org.flywaydb.core.internal.sqlscript.SqlStatement;
 import org.flywaydb.core.internal.util.StringUtils;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/ParserSqlScript.java
Patch:
@@ -69,7 +69,7 @@ public ParserSqlScript(Parser parser, LoadableResource resource, LoadableResourc
     }
 
     protected void parse() {
-        try (SqlStatementIterator sqlStatementIterator = parser.parse(resource)) {
+        try (SqlStatementIterator sqlStatementIterator = parser.parse(resource, metadata)) {
             boolean transactionalStatementFound = false;
             while (sqlStatementIterator.hasNext()) {
                 SqlStatement sqlStatement = sqlStatementIterator.next();

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEParser.java
Patch:
@@ -35,7 +35,7 @@ protected Delimiter getDefaultDelimiter() {
     }
 
     @Override
-    protected boolean isDelimiter(String peek, ParserContext context, int col, int colIgnoringWhitepace) {
+    protected boolean isDelimiter(String peek, ParserContext context, int col, int colIgnoringWhitespace) {
         return peek.length() >= 2
                 && (peek.charAt(0) == 'G' || peek.charAt(0) == 'g')
                 && (peek.charAt(1) == 'O' || peek.charAt(1) == 'o')

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -594,7 +594,7 @@ protected boolean isAlternativeStringLiteral(String peek) {
         return alternativeStringLiteralQuote != 0 && peek.charAt(0) == alternativeStringLiteralQuote;
     }
 
-    protected boolean isDelimiter(String peek, ParserContext context, int col, int colIgnoringWhitepace) {
+    protected boolean isDelimiter(String peek, ParserContext context, int col, int colIgnoringWhitespace) {
         return peek.startsWith(context.getDelimiter().getDelimiter());
     }
 

File: flyway-mysql/src/main/java/org/flywaydb/database/mysql/MySQLDatabaseType.java
Patch:
@@ -90,9 +90,6 @@ public String getBackupDriverClass(String url, ClassLoader classLoader) {
         }
 
         if (ClassUtils.isPresent(MARIADB_JDBC_DRIVER, classLoader) && !url.contains("disableMariaDbDriver")) {
-            LOG.warn("You are attempting to connect to a MySQL database using the MariaDB driver." +
-                             " This is known to cause issues." +
-                             " An upgrade to Oracle's MySQL JDBC driver is highly recommended.");
             return MARIADB_JDBC_DRIVER;
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/DefaultSqlScriptExecutor.java
Patch:
@@ -33,7 +33,7 @@
 
 @CustomLog
 public class DefaultSqlScriptExecutor implements SqlScriptExecutor {
-    private final JdbcTemplate jdbcTemplate;
+    protected final JdbcTemplate jdbcTemplate;
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLParser.java
Patch:
@@ -102,12 +102,12 @@ && isDigit(text.charAt(6))
     }
 
     @Override
-    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context) {
+    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context, PeekingReader reader) {
         if (STORED_PROGRAM_REGEX.matcher(simplifiedStatement).matches()) {
             return STORED_PROGRAM_STATEMENT;
         }
 
-        return super.detectStatementType(simplifiedStatement, context);
+        return super.detectStatementType(simplifiedStatement, context, reader);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/mariadb/MariaDBParser.java
Patch:
@@ -32,12 +32,12 @@ public MariaDBParser(Configuration configuration, ParsingContext parsingContext)
     }
 
     @Override
-    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context) {
+    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context, PeekingReader reader) {
         if (BEGIN_NOT_ATOMIC_REGEX.matcher(simplifiedStatement).matches()) {
             return BEGIN_NOT_ATOMIC_STATEMENT;
         }
 
-        return super.detectStatementType(simplifiedStatement, context);
+        return super.detectStatementType(simplifiedStatement, context, reader);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLParser.java
Patch:
@@ -90,12 +90,12 @@ private String readCopyData(PeekingReader reader, Recorder recorder) throws IOEx
     }
 
     @Override
-    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context) {
+    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context, PeekingReader reader) {
         if (COPY_FROM_STDIN_REGEX.matcher(simplifiedStatement).matches()) {
             return COPY;
         }
 
-        return super.detectStatementType(simplifiedStatement, context);
+        return super.detectStatementType(simplifiedStatement, context, reader);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAParser.java
Patch:
@@ -36,15 +36,15 @@ public SAPHANAParser(Configuration configuration, ParsingContext parsingContext)
     }
 
     @Override
-    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context) {
+    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context, PeekingReader reader) {
         if (FUNCTION_OR_PROCEDURE_REGEX.matcher(simplifiedStatement).matches()) {
             return FUNCTION_OR_PROCEDURE_STATEMENT;
         }
         if (ANONYMOUS_BLOCK_REGEX.matcher(simplifiedStatement).matches()) {
             return ANONYMOUS_BLOCK_STATEMENT;
         }
 
-        return super.detectStatementType(simplifiedStatement, context);
+        return super.detectStatementType(simplifiedStatement, context, reader);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -286,7 +286,7 @@ protected SqlStatement getNextStatement(Resource resource, PeekingReader reader,
                         if (keywords.size() > getTransactionalDetectionCutoff()) {
                             statementType = StatementType.GENERIC;
                         } else {
-                            statementType = detectStatementType(simplifiedStatement, context);
+                            statementType = detectStatementType(simplifiedStatement, context, reader);
                             context.setStatementType(statementType);
                         }
                         adjustDelimiter(context, statementType);
@@ -444,7 +444,7 @@ protected ParsedSqlStatement createStatement(PeekingReader reader, Recorder reco
         );
     }
 
-    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context) {
+    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context, PeekingReader reader) {
         return StatementType.UNKNOWN;
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -59,7 +59,7 @@ public void ensureSupported() {
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("10", org.flywaydb.core.internal.license.Edition.ENTERPRISE);
 
-        recommendFlywayUpgradeIfNecessaryForMajorVersion("13");
+        recommendFlywayUpgradeIfNecessaryForMajorVersion("14");
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoServiceImpl.java
Patch:
@@ -570,7 +570,7 @@ public List<ValidateOutput> validate() {
     }
 
     public void setAllSchemasEmpty(Schema[] schemas) {
-        allSchemasEmpty = Arrays.stream(schemas).allMatch(Schema::empty);
+        allSchemasEmpty = Arrays.stream(schemas).filter(Schema::exists).allMatch(Schema::empty);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLParser.java
Patch:
@@ -128,7 +128,7 @@ protected boolean shouldAdjustBlockDepth(ParserContext context, List<Token> toke
     }
 
     private boolean doesDelimiterEndFunction(List<Token> tokens, Token delimiter) {
-        // if there's not enough tokens, its not the function
+        // if there's not enough tokens, it's not the function
         if (tokens.size() < 2) {
             return false;
         }
@@ -154,13 +154,13 @@ protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token
         int parensDepth = keyword.getParensDepth();
 
         if ("BEGIN".equalsIgnoreCase(keywordText) && context.getStatementType() == STORED_PROGRAM_STATEMENT) {
-            context.increaseBlockDepth("");
+            context.increaseBlockDepth(Integer.toString(parensDepth));
         }
 
         if (context.getBlockDepth() > 0 && lastTokenIs(tokens, parensDepth, "END") &&
                 !"IF".equalsIgnoreCase(keywordText) && !"LOOP".equalsIgnoreCase(keywordText)) {
             String initiator = context.getBlockInitiator();
-            if (initiator.equals("") || initiator.equals(keywordText) || "AS".equalsIgnoreCase(keywordText)) {
+            if (initiator.equals("") || initiator.equals(keywordText) || "AS".equalsIgnoreCase(keywordText) || initiator.equals(Integer.toString(parensDepth))) {
                 context.decreaseBlockDepth();
             }
         }

File: flyway-gcp-bigquery/src/main/java/org/flywaydb/database/bigquery/BigQueryTable.java
Patch:
@@ -45,7 +45,7 @@ protected boolean doExists() throws SQLException {
 
     @Override
     protected void doLock() throws SQLException {
-        String updateLockStatement = "UPDATE " + this + " SET installed_on = now() WHERE version = '?' AND DESCRIPTION = 'flyway-lock'";
+        String updateLockStatement = "UPDATE " + this + " SET installed_on = CURRENT_TIMESTAMP() WHERE version = '?' AND DESCRIPTION = 'flyway-lock'";
         String deleteExpiredLockStatement =
                 " DELETE FROM " + this +
                         " WHERE DESCRIPTION = 'flyway-lock'" +

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBConnection.java
Patch:
@@ -61,7 +61,7 @@ protected String getCurrentSchemaNameOrSearchPath() throws SQLException {
             // illegal in the corresponding SET query. Normally this simply results in an exception which we skip over,
             // but in dry runs the produced script will be invalid and error when you run it.
             if (sp.contains("$user")) {
-                LOG.warn("Search path contains $user; removing...");
+                LOG.debug("Search path contains $user; removing...");
                 ArrayList<String> paths = new ArrayList<>(Arrays.asList(sp.split(",")));
                 paths.remove("$user");
                 sp = String.join(",", paths);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabase.java
Patch:
@@ -235,6 +235,7 @@ private static MigrationVersion extractVersionFromString(String versionString, P
 
 
 
+
 
 
     @Override
@@ -244,7 +245,7 @@ public final void ensureSupported() {
 
             ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("10.3", org.flywaydb.core.internal.license.Edition.ENTERPRISE);
 
-            recommendFlywayUpgradeIfNecessary("10.5");
+            recommendFlywayUpgradeIfNecessary("10.6");
         } else {
 
             ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("8.0", org.flywaydb.core.internal.license.Edition.ENTERPRISE);

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/classpath/ClassPathResource.java
Patch:
@@ -19,6 +19,7 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.Location;
 import org.flywaydb.core.api.resource.LoadableResource;
+import org.flywaydb.core.internal.util.FlywayDbWebsiteLinks;
 import org.flywaydb.core.internal.util.UrlUtils;
 
 import java.io.*;
@@ -128,6 +129,7 @@ public Reader read() {
 
 
 
+
         return new InputStreamReader(inputStream, charset.newDecoder());
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/filesystem/FileSystemResource.java
Patch:
@@ -22,6 +22,7 @@
 
 
 import org.flywaydb.core.internal.util.BomStrippingReader;
+import org.flywaydb.core.internal.util.FlywayDbWebsiteLinks;
 
 import java.io.*;
 import java.nio.channels.Channels;
@@ -82,6 +83,7 @@ public Reader read() {
 
 
 
+
         try {
             return Channels.newReader(FileChannel.open(file.toPath(), StandardOpenOption.READ), charSet.newDecoder(), 4096);
         } catch (IOException e){

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/FlywayDbWebsiteLinks.java
Patch:
@@ -49,4 +49,5 @@ public class FlywayDbWebsiteLinks {
     public static final String CLOUD_SPANNER_BETA = "https://rd.gt/3yqM3jJ";
     public static final String TEAMS_FEATURES_FOR_BIG_QUERY = "https://rd.gt/3CWAuTb";
     public static final String TEAMS_FEATURES_FOR_CLOUD_SPANNER = "https://rd.gt/2ZvELhV";
+    public static final String FILE_ENCODING_HELP = "https://rd.gt/3BzSFhr";
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -340,6 +340,7 @@ public ErrorDetails validate() {
 
 
 
+
                 && (MigrationState.SUPERSEDED != state)
                 && (!context.missing || (MigrationState.MISSING_SUCCESS != state && MigrationState.MISSING_FAILED != state))
                 && (!context.future || (MigrationState.FUTURE_SUCCESS != state && MigrationState.FUTURE_FAILED != state))) {
@@ -383,6 +384,7 @@ && getType() != MigrationType.DELETE
 
 
 
+
         ) {
             String migrationIdentifier = appliedMigration.getVersion() == null ?
                     // Repeatable migrations

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -477,7 +477,7 @@ public static Map<String, String> loadConfigurationFromString(String configurati
                     boolean restoreMultilineDelimiter = false;
                     if (nextLine.isEmpty()) {
                         // blank line
-                    } else if (nextLine.contains("=")) {
+                    } else if (nextLine.trim().startsWith("flyway.") && nextLine.contains("=")) {
                         if (isMultilineBooleanExpression(nextLine)) {
                             // next line is an extension of a boolean expression
                             restoreMultilineDelimiter = true;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -228,6 +228,9 @@ private boolean checksumUpdateNeeded(ResolvedMigration resolved, AppliedMigratio
     }
 
     private boolean descriptionUpdateNeeded(ResolvedMigration resolved, AppliedMigration applied) {
+        if (!database.supportsEmptyMigrationDescription() && "".equals(resolved.getDescription())) {
+            return !Objects.equals(SchemaHistory.NO_DESCRIPTION_MARKER, applied.getDescription());
+        }
         return !Objects.equals(resolved.getDescription(), applied.getDescription());
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBParser.java
Patch:
@@ -92,7 +92,8 @@ protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token
                 || ((("IF".equalsIgnoreCase(keywordText) && !CONDITIONALLY_CREATABLE_OBJECTS.contains(previousKeywordText))  // excludes the IF in eg. CREATE TABLE IF EXISTS
                 || "FOR".equalsIgnoreCase(keywordText)
                 || "CASE".equalsIgnoreCase(keywordText))
-                && previousKeyword != null && !"END".equalsIgnoreCase(previousKeywordText))) {
+                && previousKeyword != null && !"END".equalsIgnoreCase(previousKeywordText)
+                && !"CURSOR".equalsIgnoreCase(previousKeywordText))) {  // DECLARE CURSOR FOR SELECT ... has no END
             context.increaseBlockDepth(keywordText);
         } else if (("EACH".equalsIgnoreCase(keywordText) || "SQLEXCEPTION".equalsIgnoreCase(keywordText))
                 && previousKeyword != null && "FOR".equalsIgnoreCase(previousKeywordText) && context.getBlockDepth() > 0) {

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/BaseJavaMigration.java
Patch:
@@ -27,12 +27,12 @@
  * <li><strong>Versioned Migrations:</strong> V2__Add_new_table</li>
  * <li><strong>Undo Migrations:</strong> U2__Add_new_table</li>
  * <li><strong>Repeatable Migrations:</strong> R__Add_new_table</li>
- * <li><strong>State scripts:</strong> S2__Add_new_table</li>
+ * <li><strong>Baseline Migrations:</strong> B2__Add_new_table</li>
  * </ul>
  *
  * <p>The file name consists of the following parts:</p>
  * <ul>
- * <li><strong>Prefix:</strong> V for versioned migrations, U for undo migrations, R for repeatable migrations, S for state scripts</li>
+ * <li><strong>Prefix:</strong> V for versioned migrations, U for undo migrations, R for repeatable migrations, B for baseline migrations</li>
  * <li><strong>Version:</strong> Underscores (automatically replaced by dots at runtime) separate as many parts as you like (Not for repeatable migrations)</li>
  * <li><strong>Separator:</strong> __ (two underscores)</li>
  * <li><strong>Description:</strong> Underscores (automatically replaced by spaces at runtime) separate the words</li>
@@ -112,7 +112,7 @@ public boolean isUndo() {
     }
 
     @Override
-    public boolean isStateScript() {
+    public boolean isBaselineMigration() {
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/JavaMigration.java
Patch:
@@ -60,11 +60,11 @@ public interface JavaMigration {
     boolean isUndo();
 
     /**
-     * Whether this is a state script.
+     * Whether this is a baseline migration.
      *
      * @return {@code true} if it is, {@code false} if not.
      */
-    boolean isStateScript();
+    boolean isBaselineMigration();
 
     /**
      * Whether the execution should take place inside a transaction. Almost all implementations should return {@code true}.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -83,7 +83,7 @@ public class ConfigUtils {
     public static final String SQL_MIGRATION_PREFIX = "flyway.sqlMigrationPrefix";
     public static final String SQL_MIGRATION_SEPARATOR = "flyway.sqlMigrationSeparator";
     public static final String SQL_MIGRATION_SUFFIXES = "flyway.sqlMigrationSuffixes";
-    public static final String STATE_SCRIPT_PREFIX = "flyway.stateScriptPrefix";
+    public static final String BASELINE_MIGRATION_PREFIX = "flyway.baselineMigrationPrefix";
     public static final String STREAM = "flyway.stream";
     public static final String TABLE = "flyway.table";
     public static final String TABLESPACE = "flyway.tablespace";
@@ -281,8 +281,8 @@ private static String convertKey(String key) {
         if ("FLYWAY_SQL_MIGRATION_SUFFIXES".equals(key)) {
             return SQL_MIGRATION_SUFFIXES;
         }
-        if ("FLYWAY_STATE_SCRIPT_PREFIX".equals(key)) {
-            return STATE_SCRIPT_PREFIX;
+        if ("FLYWAY_BASELINE_MIGRATION_PREFIX".equals(key)) {
+            return BASELINE_MIGRATION_PREFIX;
         }
         if ("FLYWAY_STREAM".equals(key)) {
             return STREAM;

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoContext.java
Patch:
@@ -35,7 +35,7 @@ public class MigrationInfoContext {
     public MigrationVersion baseline;
     public MigrationVersion lastResolved = MigrationVersion.EMPTY;
     public MigrationVersion lastApplied = MigrationVersion.EMPTY;
-    public MigrationVersion latestStateScript = MigrationVersion.EMPTY;
+    public MigrationVersion latestBaselineMigration = MigrationVersion.EMPTY;
     public Map<String, Integer> latestRepeatableRuns = new HashMap<>();
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -65,7 +65,7 @@ public final void ensureSupported() {
         if (isAzure()) {
             ensureDatabaseIsRecentEnough("11.0");
 
-            ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("13.0", org.flywaydb.core.internal.license.Edition.ENTERPRISE);
+            ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("12.0", org.flywaydb.core.internal.license.Edition.ENTERPRISE);
 
             recommendFlywayUpgradeIfNecessary("12.0");
         } else {

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/RecordingReader.java
Patch:
@@ -21,7 +21,7 @@
 
 public class RecordingReader extends FilterReader {
     private boolean paused;
-    private Recorder recorder;
+    private final Recorder recorder;
 
     RecordingReader(Recorder recorder, Reader in) {
         super(in);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/synapse/SynapseTable.java
Patch:
@@ -38,11 +38,9 @@ public class SynapseTable extends SQLServerTable {
     protected void doLock() throws SQLException {
         Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
         Timestamp currentDateTime = new Timestamp(cal.getTime().getTime());
-        cal.add(Calendar.MINUTE, -insertRowLock.lockTimeoutMins);
-        Timestamp timeoutTimeAgo = new Timestamp(cal.getTime().getTime());
 
         String updateLockStatement = "UPDATE " + this + " SET installed_on = '" + currentDateTime + "' WHERE version = '?' AND description = 'flyway-lock'";
-        String deleteExpiredLockStatement = "DELETE FROM " + this + " WHERE description = 'flyway-lock' AND installed_on < '" + timeoutTimeAgo + "'";
+        String deleteExpiredLockStatement = "DELETE FROM " + this + " WHERE description = 'flyway-lock' AND installed_on < '?'";
 
         if (lockDepth == 0) {
             insertRowLock.doLock(database.getInsertStatement(this), updateLockStatement, deleteExpiredLockStatement, database.getBooleanTrue());

File: flyway-gcp-bigquery/src/main/java/org/flywaydb/database/bigquery/BigQueryDatabaseType.java
Patch:
@@ -102,7 +102,7 @@ public String instantiateClassExtendedErrorMessage(){
 
     @Override
     public void printMessages() {
-        LOG.info("Join the GCP BigQuery beta via" + FlywayDbWebsiteLinks.BIG_QUERY_BETA);
+        LOG.info("Join the GCP BigQuery beta via " + FlywayDbWebsiteLinks.BIG_QUERY_BETA);
 
         LOG.info(""); //this can go when the beta message above is retired.
         LOG.info("Experiencing performance issues while using GCP BigQuery?");

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -415,6 +415,8 @@ private static void printUsage() {
         LOG.info("placeholders                 : Placeholders to replace in sql migrations");
         LOG.info("placeholderPrefix            : Prefix of every placeholder");
         LOG.info("placeholderSuffix            : Suffix of every placeholder");
+        LOG.info("scriptPlaceholderPrefix      : Prefix of every script placeholder");
+        LOG.info("scriptPlaceholderSuffix      : Suffix of every script placeholder");
         LOG.info("lockRetryCount               : The maximum number of retries when trying to obtain a lock");
         LOG.info("jdbcProperties               : Properties to pass to the JDBC driver object");
         LOG.info("installedBy                  : Username that will be recorded in the schema history table");

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLParser.java
Patch:
@@ -69,14 +69,14 @@ protected boolean isSingleLineComment(String peek, ParserContext context, int co
     @Override
     protected Token handleStringLiteral(PeekingReader reader, ParserContext context, int pos, int line, int col) throws IOException {
         reader.swallow();
-        reader.swallowUntilExcludingWithEscape('\'', true, '\\');
+        reader.swallowUntilIncludingWithEscape('\'', true, '\\');
         return new Token(TokenType.STRING, pos, line, col, null, null, context.getParensDepth());
     }
 
     @Override
     protected Token handleAlternativeStringLiteral(PeekingReader reader, ParserContext context, int pos, int line, int col) throws IOException {
         reader.swallow();
-        reader.swallowUntilExcludingWithEscape('"', true, '\\');
+        reader.swallowUntilIncludingWithEscape('"', true, '\\');
         return new Token(TokenType.STRING, pos, line, col, null, null, context.getParensDepth());
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -537,12 +537,12 @@ private Token readToken(PeekingReader reader, PositionTracker tracker, ParserCon
         }
         if (peek.startsWith("B'") || peek.startsWith("E'") || peek.startsWith("X'")) {
             reader.swallow(2);
-            reader.swallowUntilExcludingWithEscape('\'', true, '\\');
+            reader.swallowUntilIncludingWithEscape('\'', true, '\\');
             return new Token(TokenType.STRING, pos, line, col, null, null, context.getParensDepth());
         }
         if (peek.startsWith("U&'")) {
             reader.swallow(3);
-            reader.swallowUntilExcludingWithEscape('\'', true);
+            reader.swallowUntilIncludingWithEscape('\'', true);
             return new Token(TokenType.STRING, pos, line, col, null, null, context.getParensDepth());
         }
         if (isDelimiter(peek, context, col, colIgnoringWhitepace)) {
@@ -670,7 +670,7 @@ protected Token handleCommentDirective(PeekingReader reader, ParserContext conte
 
     protected Token handleStringLiteral(PeekingReader reader, ParserContext context, int pos, int line, int col) throws IOException {
         reader.swallow();
-        reader.swallowUntilExcludingWithEscape('\'', true);
+        reader.swallowUntilIncludingWithEscape('\'', true);
         return new Token(TokenType.STRING, pos, line, col, null, null, context.getParensDepth());
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/PeekingReader.java
Patch:
@@ -276,8 +276,8 @@ public String readUntilExcluding(char delimiter1, char delimiter2) throws IOExce
      * @param delimiter  The delimiting character.
      * @param selfEscape Whether the delimiter can escape itself by being present twice.
      */
-    public void swallowUntilExcludingWithEscape(char delimiter, boolean selfEscape) throws IOException {
-        swallowUntilExcludingWithEscape(delimiter, selfEscape, (char) 0);
+    public void swallowUntilIncludingWithEscape(char delimiter, boolean selfEscape) throws IOException {
+        swallowUntilIncludingWithEscape(delimiter, selfEscape, (char) 0);
     }
 
     /**
@@ -288,7 +288,7 @@ public void swallowUntilExcludingWithEscape(char delimiter, boolean selfEscape)
      * @param selfEscape Whether the delimiter can escape itself by being present twice.
      * @param escape     A separate escape character.
      */
-    public void swallowUntilExcludingWithEscape(char delimiter, boolean selfEscape, char escape) throws IOException {
+    public void swallowUntilIncludingWithEscape(char delimiter, boolean selfEscape, char escape) throws IOException {
         do {
             int r = read();
             if (r == -1) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleDatabaseType.java
Patch:
@@ -162,6 +162,9 @@ public void setConfigConnectionProps(Configuration config, Properties props, Cla
 
 
 
+
+
+
     }
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoContext.java
Patch:
@@ -35,6 +35,7 @@ public class MigrationInfoContext {
     public MigrationVersion baseline;
     public MigrationVersion lastResolved = MigrationVersion.EMPTY;
     public MigrationVersion lastApplied = MigrationVersion.EMPTY;
+    public MigrationVersion latestIntermediateBaseline = MigrationVersion.EMPTY;
     public Map<String, Integer> latestRepeatableRuns = new HashMap<>();
 
     @Override
@@ -56,7 +57,6 @@ public boolean equals(Object o) {
         if (lastApplied != null ? !lastApplied.equals(that.lastApplied) : that.lastApplied != null) return false;
         if (cherryPick != null ? !cherryPick.equals(that.cherryPick) : that.cherryPick != null) return false;
         return latestRepeatableRuns.equals(that.latestRepeatableRuns);
-
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/ResolvedMigrationComparator.java
Patch:
@@ -19,9 +19,6 @@
 
 import java.util.Comparator;
 
-/**
-* Comparator for ResolvedMigration.
-*/
 public class ResolvedMigrationComparator implements Comparator<ResolvedMigration> {
     @Override
     public int compare(ResolvedMigration o1, ResolvedMigration o2) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -143,6 +143,9 @@ private int migrateAll() {
             if (count == 0) {
                 // No further migrations available
                 break;
+            } else if (configuration.getTarget() == MigrationVersion.NEXT) {
+                // With target=next we only execute one migration
+                break;
             }
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -161,7 +161,7 @@ public MigrationState getState() {
 
 
 
-                if (context.target != null && resolvedMigration.getVersion().compareTo(context.target) > 0) {
+                if (context.target != null && context.target != MigrationVersion.NEXT && resolvedMigration.getVersion().compareTo(context.target) > 0) {
                     return MigrationState.ABOVE_TARGET;
                 }
                 if ((resolvedMigration.getVersion().compareTo(context.lastApplied) < 0) && !context.outOfOrder) {

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/yugabytedb/YugabyteDBDatabaseType.java
Patch:
@@ -46,9 +46,9 @@ public int getPriority() {
 
     @Override
     public boolean handlesDatabaseProductNameAndVersion(String databaseProductName, String databaseProductVersion, Connection connection) {
-        String selectVersionQueryOutput = getSelectVersionOutput(connection);
         // The YB is what distinguishes Yugabyte
-        return Pattern.matches("PostgreSQL\\s\\d{1,2}(\\.\\d{1,2})?-YB-\\d{1,2}(\\.\\d{1,2})?.*", selectVersionQueryOutput);
+        return databaseProductName.startsWith("PostgreSQL")
+                && Pattern.matches("PostgreSQL\\s\\d{1,2}(\\.\\d{1,2})?-YB-\\d{1,2}(\\.\\d{1,2})?.*", getSelectVersionOutput(connection));
     }
 
     @Override
@@ -60,5 +60,4 @@ public Database createDatabase(Configuration configuration, JdbcConnectionFactor
     public Parser createParser(Configuration configuration, ResourceProvider resourceProvider, ParsingContext parsingContext) {
         return new YugabyteDBParser(configuration, parsingContext);
     }
-
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywaySqlException.java
Patch:
@@ -36,6 +36,6 @@ public String getMessage() {
         String title = super.getMessage();
         String underline = StringUtils.trimOrPad("", title.length(), '-');
 
-        return "\n" + title + "\n" + underline + "\n" + ExceptionUtils.toMessage((SQLException) getCause());
+        return title + "\n" + underline + "\n" + ExceptionUtils.toMessage((SQLException) getCause());
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLConnection.java
Patch:
@@ -31,7 +31,7 @@
 public class PostgreSQLConnection extends Connection<PostgreSQLDatabase> {
     private final String originalRole;
 
-    PostgreSQLConnection(PostgreSQLDatabase database, java.sql.Connection connection) {
+    protected PostgreSQLConnection(PostgreSQLDatabase database, java.sql.Connection connection) {
         super(database, connection);
 
         try {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -53,7 +53,7 @@ protected PostgreSQLConnection doGetConnection(Connection connection) {
 
 
     @Override
-    public final void ensureSupported() {
+    public void ensureSupported() {
         ensureDatabaseIsRecentEnough("9.0");
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("9.5", org.flywaydb.core.internal.license.Edition.ENTERPRISE);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSchema.java
Patch:
@@ -38,7 +38,7 @@ public class PostgreSQLSchema extends Schema<PostgreSQLDatabase, PostgreSQLTable
      * @param database     The database-specific support.
      * @param name         The name of the schema.
      */
-    PostgreSQLSchema(JdbcTemplate jdbcTemplate, PostgreSQLDatabase database, String name) {
+    protected PostgreSQLSchema(JdbcTemplate jdbcTemplate, PostgreSQLDatabase database, String name) {
         super(jdbcTemplate, database, name);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLTable.java
Patch:
@@ -32,7 +32,7 @@ public class PostgreSQLTable extends Table<PostgreSQLDatabase, PostgreSQLSchema>
      * @param schema       The schema this table lives in.
      * @param name         The name of the table.
      */
-    PostgreSQLTable(JdbcTemplate jdbcTemplate, PostgreSQLDatabase database, PostgreSQLSchema schema, String name) {
+    protected PostgreSQLTable(JdbcTemplate jdbcTemplate, PostgreSQLDatabase database, PostgreSQLSchema schema, String name) {
         super(jdbcTemplate, database, schema, name);
     }
 

File: flyway-community-db-support/src/main/java/org/flywaydb/community/database/CommunityDatabaseExtension.java
Patch:
@@ -24,7 +24,7 @@
 
 public class CommunityDatabaseExtension implements FlywayExtension {
     public String getDescription() {
-        return "Flyway Community database support extension " + readVersion() + " by Redgate";
+        return "Community-contributed database support extension " + readVersion() + " by Redgate";
     }
 
     private static String readVersion() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseType.java
Patch:
@@ -258,4 +258,6 @@ SqlScriptExecutorFactory createSqlScriptExecutorFactory(
      * @param configuration The Flyway configuration.
      */
     Connection alterConnectionAsNeeded(Connection connection, Configuration configuration);
+
+    String instantiateClassExtendedErrorMessage();
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/ParsingContext.java
Patch:
@@ -40,6 +40,7 @@ public class ParsingContext {
     private static final String TIMESTAMP_PLACEHOLDER = "flyway:timestamp";
     private static final String FILENAME_PLACEHOLDER = "flyway:filename";
     private static final String WORKING_DIRECTORY_PLACEHOLDER = "flyway:workingDirectory";
+    private static final String TABLE_PLACEHOLDER = "flyway:table";
 
     private final Map<String, String> placeholders = new HashMap<>();
     private Database database;
@@ -86,6 +87,7 @@ public void populate(Database database, Configuration configuration) {
         placeholders.put(USER_PLACEHOLDER, currentUser);
         placeholders.put(TIMESTAMP_PLACEHOLDER, new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));
         placeholders.put(WORKING_DIRECTORY_PLACEHOLDER, System.getProperty("user.dir"));
+        placeholders.put(TABLE_PLACEHOLDER, configuration.getTable());
     }
 
     public void updateFilenamePlaceholder(ResourceName resourceName) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseTypeRegister.java
Patch:
@@ -34,7 +34,7 @@
 
 public class DatabaseTypeRegister {
     private static final Log LOG = LogFactory.getLog(DatabaseTypeRegister.class);
-    public static ClassLoader classLoader = DatabaseTypeRegister.class.getClassLoader();
+    public static ClassLoader classLoader = new DatabaseTypeRegister().getClass().getClassLoader();
 
     private static final List<DatabaseType> registeredDatabaseTypes = new ArrayList<>();
     private static boolean hasRegisteredDatabaseTypes = false;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/snowflake/SnowflakeConnection.java
Patch:
@@ -42,7 +42,7 @@ public class SnowflakeConnection extends Connection<SnowflakeDatabase> {
     @Override
     protected void doRestoreOriginalState() throws SQLException {
         // Reset the role to its original value in case a migration or callback changed it
-        jdbcTemplate.execute("USE ROLE " + originalRole);
+        jdbcTemplate.execute("USE ROLE " + database.doQuote(originalRole));
     }
 
      @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseTypeRegister.java
Patch:
@@ -34,6 +34,7 @@
 
 public class DatabaseTypeRegister {
     private static final Log LOG = LogFactory.getLog(DatabaseTypeRegister.class);
+    public static ClassLoader classLoader = DatabaseTypeRegister.class.getClassLoader();
 
     private static final List<DatabaseType> registeredDatabaseTypes = new ArrayList<>();
     private static boolean hasRegisteredDatabaseTypes = false;
@@ -51,7 +52,7 @@ private static void registerDatabaseTypes() {
 
 
 
-            ServiceLoader<DatabaseType> loader = ServiceLoader.load(DatabaseType.class);
+            ServiceLoader<DatabaseType> loader = ServiceLoader.load(DatabaseType.class, classLoader);
             for (DatabaseType dt : loader) {
                 registeredDatabaseTypes.add(dt);
             }

File: flyway-core/src/main/java/org/flywaydb/core/internal/license/VersionPrinter.java
Patch:
@@ -29,6 +29,7 @@
 
 public class VersionPrinter {
     private static final Log LOG = LogFactory.getLog(VersionPrinter.class);
+    public static ClassLoader classLoader = VersionPrinter.class.getClassLoader();
     private static final String version = readVersion();
 
     public static final Edition EDITION =
@@ -71,7 +72,7 @@ public static void printVersionOnly() {
     }
 
     private static void printExtensionVersions() {
-        ServiceLoader<FlywayExtension> loader = ServiceLoader.load(FlywayExtension.class);
+        ServiceLoader<FlywayExtension> loader = ServiceLoader.load(FlywayExtension.class, classLoader);
         for (FlywayExtension extension : loader) {
             LOG.info( ">\t" + extension.getDescription());
         }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -360,7 +360,7 @@ private static void printUsage() {
         LOG.info("batch                        : [" + "teams] Batch SQL statements when executing them");
         LOG.info("mixed                        : Allow mixing transactional and non-transactional statements");
         LOG.info("encoding                     : Encoding of SQL migrations");
-        LOG.info("detectEncoding               : [" + "teams] Whether or not Flyway should try to automatically detect SQL migration file encoding");
+        LOG.info("detectEncoding               : [" + "teams] Whether Flyway should try to automatically detect SQL migration file encoding");
         LOG.info("placeholderReplacement       : Whether placeholders should be replaced");
         LOG.info("placeholders                 : Placeholders to replace in sql migrations");
         LOG.info("placeholderPrefix            : Prefix of every placeholder");

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -810,7 +810,7 @@ public void setEncoding(Charset encoding) {
     }
 
     /**
-     * Whether or not Flyway should try to automatically detect SQL migration file encoding
+     * Whether Flyway should try to automatically detect SQL migration file encoding
      *
      * @param detectEncoding {@code true} to enable auto detection, {@code false} otherwise
      * <i>Flyway Teams only</i>

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -284,9 +284,9 @@ public interface Configuration {
     Charset getEncoding();
 
     /**
-     * Whether or not Flyway should try to automatically detect SQL migration file encoding
+     * Whether Flyway should try to automatically detect SQL migration file encoding
      *
-     * @param detectEncoding {@code true} to enable auto detection, {@code false} otherwise
+     * @return {@code true} to enable auto detection, {@code false} otherwise
      * <i>Flyway Teams only</i>
      */
     boolean getDetectEncoding();

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -649,7 +649,7 @@ public FluentConfiguration encoding(Charset encoding) {
     }
 
     /**
-     * Whether or not Flyway should try to automatically detect SQL migration file encoding
+     * Whether Flyway should try to automatically detect SQL migration file encoding
      *
      * @param detectEncoding {@code true} to enable auto detection, {@code false} otherwise
      * <i>Flyway Teams only</i>

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/classpath/ClassPathResource.java
Patch:
@@ -30,7 +30,6 @@
 import java.nio.file.Paths;
 
 public class ClassPathResource extends LoadableResource {
-
     private static final Log LOG = LogFactory.getLog(ClassPathResource.class);
     private final String fileNameWithAbsolutePath;
     private final String fileNameWithRelativePath;
@@ -93,7 +92,6 @@ public Reader read() {
 
 
 
-
         return new InputStreamReader(inputStream, charset.newDecoder());
     }
 

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayExtension.java
Patch:
@@ -184,7 +184,7 @@ public class FlywayExtension {
     public String encoding;
 
     /**
-     * Whether or not Flyway should try to automatically detect SQL migration file encoding
+     * Whether Flyway should try to automatically detect SQL migration file encoding
      * <i>Flyway Teams only</i>
      * <p>Also configurable with Gradle or System Property: ${flyway.detectEncoding}</p>
      */

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -228,7 +228,7 @@ public abstract class AbstractFlywayTask extends DefaultTask {
     public String encoding;
 
     /**
-     * Whether or not Flyway should try to automatically detect SQL migration file encoding
+     * Whether Flyway should try to automatically detect SQL migration file encoding
      * <i>Flyway Teams only</i>
      * <p>Also configurable with Gradle or System Property: ${flyway.detectEncoding}</p>
      */

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -208,7 +208,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
     private String encoding;
 
     /**
-     * Whether or not Flyway should try to automatically detect SQL migration file encoding
+     * Whether Flyway should try to automatically detect SQL migration file encoding
      * <i>Flyway Teams only</i>
      * <p>Also configurable with Maven or System Property: ${flyway.detectEncoding}</p>
      */

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -348,6 +348,7 @@ private static void printUsage() {
         LOG.info("schemas                      : Comma-separated list of the schemas managed by Flyway");
         LOG.info("table                        : Name of Flyway's schema history table");
         LOG.info("locations                    : Classpath locations to scan recursively for migrations");
+        LOG.info("failOnMissingLocations       : Whether to fail if a location specified in the flyway.locations option doesn't exist");
         LOG.info("resolvers                    : Comma-separated list of custom MigrationResolvers");
         LOG.info("skipDefaultResolvers         : Skips default resolvers (jdbc, sql and Spring-jdbc)");
         LOG.info("sqlMigrationPrefix           : File name prefix for versioned SQL migrations");

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -610,7 +610,8 @@ private Pair<ResourceProvider, ClassProvider<JavaMigration>> createResourceAndCl
                         configuration.getEncoding(),
                         stream,
                         resourceNameCache,
-                        locationScannerCache
+                        locationScannerCache,
+                        configuration.getFailOnMissingLocations()
                 );
                 // set the defaults
                 resourceProvider = scanner;

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -407,7 +407,7 @@ protected static boolean tokenAtIndexIs(List<Token> tokens, int index, String to
         return tokens.get(index).getText().equals(tokenText);
     }
 
-    protected static boolean doTokensMatchPattern(List<Token> previousTokens, Token current, Pattern regex) {
+    protected boolean doTokensMatchPattern(List<Token> previousTokens, Token current, Pattern regex) {
         ArrayList<String> tokenStrings = new ArrayList<>();
         tokenStrings.add(current.getText());
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -50,7 +50,6 @@ protected PostgreSQLConnection doGetConnection(Connection connection) {
 
 
 
-
     @Override
     public final void ensureSupported() {
         ensureDatabaseIsRecentEnough("9.0");

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBParser.java
Patch:
@@ -73,12 +73,12 @@ protected int getLastKeywordIndex(List<Token> tokens, int endIndex) {
     }
 
     @Override
-    protected boolean shouldAdjustBlockDepth(ParserContext context, Token token) {
+    protected boolean shouldAdjustBlockDepth(ParserContext context, List<Token> tokens, Token token) {
         String tokenText = token.getText();
         if (tokenText != null && getValidKeywords().contains(tokenText.toUpperCase(Locale.ENGLISH)) && token.getParensDepth() == 0) {
             return true;
         }
-        return super.shouldAdjustBlockDepth(context, token);
+        return super.shouldAdjustBlockDepth(context, tokens, token);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleParser.java
Patch:
@@ -417,7 +417,7 @@ protected void adjustDelimiter(ParserContext context, StatementType statementTyp
 
 
     @Override
-    protected boolean shouldAdjustBlockDepth(ParserContext context, Token token) {
+    protected boolean shouldAdjustBlockDepth(ParserContext context, List<Token> tokens, Token token) {
         // Package bodies can have an unbalanced BEGIN without END in the initialisation section.
         TokenType tokenType = token.getType();
         if (context.getStatementType() == PLSQL_PACKAGE_BODY_STATEMENT && (TokenType.EOF == tokenType || TokenType.DELIMITER == tokenType)) {
@@ -441,7 +441,7 @@ protected boolean shouldAdjustBlockDepth(ParserContext context, Token token) {
 
 
 
-        return super.shouldAdjustBlockDepth(context, token);
+        return super.shouldAdjustBlockDepth(context, tokens, token);
     }
 
     // These words increase the block depth - unless preceded by END (in which case the END will decrease the block depth)

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAParser.java
Patch:
@@ -48,14 +48,14 @@ protected StatementType detectStatementType(String simplifiedStatement, ParserCo
     }
 
     @Override
-    protected boolean shouldAdjustBlockDepth(ParserContext context, Token token) {
+    protected boolean shouldAdjustBlockDepth(ParserContext context, List<Token> tokens, Token token) {
         TokenType tokenType = token.getType();
         if ((context.getStatementType() == FUNCTION_OR_PROCEDURE_STATEMENT || context.getStatementType() == ANONYMOUS_BLOCK_STATEMENT) &&
                 (TokenType.EOF == tokenType || TokenType.DELIMITER == tokenType)) {
             return true;
         }
 
-        return super.shouldAdjustBlockDepth(context, token);
+        return super.shouldAdjustBlockDepth(context, tokens, token);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerParser.java
Patch:
@@ -91,15 +91,15 @@ protected Boolean detectCanExecuteInTransaction(String simplifiedStatement, List
     }
 
     @Override
-    protected boolean shouldAdjustBlockDepth(ParserContext context, Token token) {
+    protected boolean shouldAdjustBlockDepth(ParserContext context, List<Token> tokens, Token token) {
         TokenType tokenType = token.getType();
         if (TokenType.DELIMITER.equals(tokenType) || ";".equals(token.getText())) {
             return true;
         } else if (TokenType.EOF.equals(tokenType)) {
             return true;
         }
 
-        return super.shouldAdjustBlockDepth(context, token);
+        return super.shouldAdjustBlockDepth(context, tokens, token);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -215,7 +215,7 @@ protected SqlStatement getNextStatement(Resource resource, PeekingReader reader,
                     continue;
                 }
 
-                if (shouldAdjustBlockDepth(context, token)) {
+                if (shouldAdjustBlockDepth(context, tokens, token)) {
                     if (tokenType == TokenType.KEYWORD) {
                         keywords.add(token);
                     }
@@ -314,7 +314,7 @@ protected SqlStatement getNextStatement(Resource resource, PeekingReader reader,
         }
     }
 
-    protected boolean shouldAdjustBlockDepth(ParserContext context, Token token) {
+    protected boolean shouldAdjustBlockDepth(ParserContext context, List<Token> tokens, Token token) {
         return token.getType() == TokenType.KEYWORD && token.getParensDepth() == 0;
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSchema.java
Patch:
@@ -213,8 +213,7 @@ protected void doClean() throws SQLException {
             jdbcTemplate.execute(statement);
         }
 
-        // Use a 2-pass approach for cleaning indexes, computed columns and functions with SCHEMABINDING due to
-        // dependency errors
+        // Use a 2-pass approach for cleaning indexes, computed columns and functions with SCHEMABINDING due to dependency errors
         // Pass 1
         for (String statement : cleanIndexes(tables)) {
             executeIgnoringDependencyErrors(statement);

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayExtension.java
Patch:
@@ -15,8 +15,6 @@
  */
 package org.flywaydb.gradle;
 
-import org.flywaydb.core.api.pattern.ValidatePattern;
-
 import java.util.Map;
 
 /**
@@ -339,7 +337,7 @@ public class FlywayExtension {
      * Example: repeatable:missing,versioned:pending,*:failed
      * <i>Flyway Teams only</i>
      */
-    public ValidatePattern[] ignoreMigrationPatterns;
+    public String[] ignoreMigrationPatterns;
 
     /**
      * Whether to validate migrations and callbacks whose scripts do not obey the correct naming convention. A failure can be

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -391,7 +391,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      * Example: repeatable:missing,versioned:pending,*:failed
      * <i>Flyway Teams only</i>
      */
-    @Parameter(property = ConfigUtils.IGNORE_MIGRATION_PATTERNS)
+    @Parameter
     private String[] ignoreMigrationPatterns;
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabase.java
Patch:
@@ -244,6 +244,7 @@ private static MigrationVersion extractVersionFromString(String versionString, P
 
 
 
+
 
     @Override
     public final void ensureSupported() {
@@ -255,7 +256,7 @@ public final void ensureSupported() {
 
             ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("10.2", org.flywaydb.core.internal.license.Edition.PRO);
 
-            recommendFlywayUpgradeIfNecessary("10.4");
+            recommendFlywayUpgradeIfNecessary("10.5");
         } else {
 
             ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("5.7", org.flywaydb.core.internal.license.Edition.ENTERPRISE);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/mariadb/MariaDBDatabaseType.java
Patch:
@@ -82,7 +82,7 @@ public Database createDatabase(Configuration configuration, JdbcConnectionFactor
 
     @Override
     public Parser createParser(Configuration configuration, ResourceProvider resourceProvider, ParsingContext parsingContext) {
-        return new MySQLParser(configuration, parsingContext);
+        return new MariaDBParser(configuration, parsingContext);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleParser.java
Patch:
@@ -448,7 +448,7 @@ protected boolean shouldAdjustBlockDepth(ParserContext context, Token token) {
     private static final List<String> CONTROL_FLOW_KEYWORDS = Arrays.asList("IF", "LOOP", "CASE");
 
     @Override
-    protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword, PeekingReader reader) throws IOException {
+    protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword, PeekingReader reader) {
         TokenType tokenType = keyword.getType();
         String keywordText = keyword.getText();
         int parensDepth = keyword.getParensDepth();

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/DefaultSqlScriptExecutor.java
Patch:
@@ -260,9 +260,7 @@ protected void outputQueryResult(Result result) {
     }
 
     private void handleUpdateCount(long updateCount) {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Update Count: " + updateCount);
-        }
+        LOG.info(updateCount + " rows affected");
     }
 
     protected void handleException(Results results, SqlScript sqlScript, SqlStatement sqlStatement) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/ClassUtils.java
Patch:
@@ -189,7 +189,8 @@ public static String getLocationOnDisk(Class<?> aClass) {
             return null;
         }
         CodeSource codeSource = protectionDomain.getCodeSource();
-        if (codeSource == null) {
+
+        if (codeSource == null || codeSource.getLocation() == null) {
             //Custom classloader with for example classes defined using URLClassLoader#defineClass(String name, byte[] b, int off, int len)
             return null;
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/snowflake/SnowflakeDatabase.java
Patch:
@@ -46,10 +46,10 @@ public class SnowflakeDatabase extends Database<SnowflakeConnection> {
     public SnowflakeDatabase(Configuration configuration, JdbcConnectionFactory jdbcConnectionFactory, StatementInterceptor statementInterceptor) {
         super(configuration, jdbcConnectionFactory, statementInterceptor);
 
+        // There will be issues if the Flyway schema history table was created while this option was set false
+        // (it is set either at the account level, or the individual session level) and it is subsequently set true.
         quotedIdentifiersIgnoreCase = getQuotedIdentifiersIgnoreCase(jdbcTemplate);
-        if (quotedIdentifiersIgnoreCase) {
-            LOG.warn("Current Flyway history table can't be used with QUOTED_IDENTIFIERS_IGNORE_CASE option on");
-        }
+        LOG.info("QUOTED_IDENTIFIERS_IGNORE_CASE option is " + quotedIdentifiersIgnoreCase);
     }
 
     private static boolean getQuotedIdentifiersIgnoreCase(JdbcTemplate jdbcTemplate) {

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/ChecksumMatcher.java
Patch:
@@ -17,6 +17,5 @@
 
 interface ChecksumMatcher {
     boolean checksumMatches(Integer checksum);
-
     boolean checksumMatchesWithoutBeingIdentical(Integer checksum);
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerEngineEdition.java
Patch:
@@ -28,7 +28,8 @@ public enum SQLServerEngineEdition {
     EXPRESS(4),
     SQL_DATABASE(5),
     SQL_DATA_WAREHOUSE(6),
-    MANAGED_INSTANCE(8);
+    MANAGED_INSTANCE(8),
+    AZURE_SQL_EDGE(9);
 
     private final int code;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbClean.java
Patch:
@@ -185,7 +185,7 @@ private void dropDatabaseObjectsPostSchemas() {
                     database).execute(new Callable<Object>() {
                 @Override
                 public Void call() {
-                    database.cleanPostSchemas();
+                    database.cleanPostSchemas(schemas);
                     return null;
                 }
             });

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Schema.java
Patch:
@@ -61,7 +61,7 @@ public Schema(JdbcTemplate jdbcTemplate, D database, String name) {
     }
 
     /**
-     * @return The name of the schema, quoted for the database it lives in.
+     * @return The name of the schema.
      */
     public String getName() {
         return name;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerParser.java
Patch:
@@ -33,7 +33,8 @@ public class SQLServerParser extends Parser {
             "SP_ADDDISTPUBLISHER", "SP_DROPDISTPUBLISHER",
             "SP_ADDLINKEDSERVER", "SP_DROPLINKEDSERVER",
             "SP_ADDLINKEDSRVLOGIN", "SP_DROPLINKEDSRVLOGIN",
-            "SP_SERVEROPTION", "SP_REPLICATIONDBOPTION");
+            "SP_SERVEROPTION", "SP_REPLICATIONDBOPTION",
+            "SP_FULLTEXT_DATABASE");
 
     private static final Pattern TRANSACTION_REGEX = Pattern.compile("TRAN(SACTION)?");
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBParser.java
Patch:
@@ -95,10 +95,9 @@ protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token
                 && previousKeyword != null && !"END".equalsIgnoreCase(previousKeywordText))) {
             context.increaseBlockDepth(keywordText);
         } else if (("EACH".equalsIgnoreCase(keywordText) || "SQLEXCEPTION".equalsIgnoreCase(keywordText))
-                && previousKeyword != null
-                && "FOR".equalsIgnoreCase(previousKeywordText)) {
+                && previousKeyword != null && "FOR".equalsIgnoreCase(previousKeywordText) && context.getBlockDepth() > 0) {
             context.decreaseBlockDepth();
-        } else if ("END".equalsIgnoreCase(keywordText)) {
+        } else if ("END".equalsIgnoreCase(keywordText) && context.getBlockDepth() > 0) {
             context.decreaseBlockDepth();
         }
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -101,7 +101,7 @@ public class ConfigUtils {
 
     public static final String VAULT_URL = "flyway.vault.url";
     public static final String VAULT_TOKEN = "flyway.vault.token";
-    public static final String VAULT_SECRET = "flyway.vault.secret";
+    public static final String VAULT_SECRETS = "flyway.vault.secrets";
 
     // Oracle-specific
     public static final String ORACLE_SQLPLUS = "flyway.oracle.sqlplus";
@@ -331,8 +331,8 @@ private static String convertKey(String key) {
         if ("FLYWAY_VAULT_TOKEN".equals(key)) {
             return VAULT_TOKEN;
         }
-        if ("FLYWAY_VAULT_SECRET".equals(key)) {
-            return VAULT_SECRET;
+        if ("FLYWAY_VAULT_SECRETS".equals(key)) {
+            return VAULT_SECRETS;
         }
 
         // Command-line specific

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -345,11 +345,11 @@ protected int getTransactionalDetectionCutoff() {
     protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword, PeekingReader reader) throws IOException {
     }
 
-    protected static int getLastKeywordIndex(List<Token> tokens) {
+    protected int getLastKeywordIndex(List<Token> tokens) {
         return getLastKeywordIndex(tokens, tokens.size());
     }
 
-    protected static int getLastKeywordIndex(List<Token> tokens, int endIndex) {
+    protected int getLastKeywordIndex(List<Token> tokens, int endIndex) {
         for (int i = endIndex - 1; i >= 0; i--) {
             Token token = tokens.get(i);
             if (token.getType() == TokenType.KEYWORD) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -305,7 +305,7 @@ protected SqlStatement getNextStatement(Resource resource, PeekingReader reader,
     }
 
     protected boolean shouldAdjustBlockDepth(ParserContext context, Token token) {
-        return (token.getType() == TokenType.KEYWORD && token.getParensDepth() == 0);
+        return token.getType() == TokenType.KEYWORD && token.getParensDepth() == 0;
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -200,7 +200,7 @@ public MigrateResult execute(MigrationResolver migrationResolver,
                         }
                     } else {
                         if (configuration.getCreateSchemas()) {
-                            new DbSchemas(database, schemas, schemaHistory).create(false);
+                            new DbSchemas(database, schemas, schemaHistory, callbackExecutor).create(false);
                         } else {
                             LOG.warn("The configuration option 'createSchemas' is false.\n" +
                                     "However the schema history table still needs a schema to reside in.\n" +
@@ -405,7 +405,7 @@ public BaselineResult execute(MigrationResolver migrationResolver,
                                 SchemaHistory schemaHistory, Database database, Schema[] schemas, CallbackExecutor callbackExecutor,
                                 StatementInterceptor statementInterceptor) {
                 if (configuration.getCreateSchemas()) {
-                    new DbSchemas(database, schemas, schemaHistory).create(true);
+                    new DbSchemas(database, schemas, schemaHistory, callbackExecutor).create(true);
                 } else {
                     LOG.warn("The configuration option 'createSchemas' is false.\n" +
                             "Even though Flyway is configured not to create any schemas, the schema history table still needs a schema to reside in.\n" +

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/CallbackExecutor.java
Patch:
@@ -16,9 +16,9 @@
 package org.flywaydb.core.internal.callback;
 
 import org.flywaydb.core.api.MigrationInfo;
+import org.flywaydb.core.api.callback.Error;
 import org.flywaydb.core.api.callback.Event;
 import org.flywaydb.core.api.callback.Warning;
-import org.flywaydb.core.api.callback.Error;
 import org.flywaydb.core.api.output.OperationResult;
 
 import java.util.List;
@@ -30,14 +30,14 @@ public interface CallbackExecutor {
     /**
      * Executes the callbacks for this event on the main connection, within a separate transaction per callback if possible.
      *
-     * @param event The vent to handle.
+     * @param event The event to handle.
      */
     void onEvent(Event event);
 
     /**
      * Executes the callbacks for this event on the migration connection, within a separate transaction per callback if possible.
      *
-     * @param event The vent to handle.
+     * @param event The event to handle.
      */
     void onMigrateOrUndoEvent(Event event);
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/synapse/SynapseDatabaseType.java
Patch:
@@ -63,5 +63,4 @@ private JdbcTemplate getJdbcTemplate(Connection connection) {
     public Database createDatabase(Configuration configuration, JdbcConnectionFactory jdbcConnectionFactory, StatementInterceptor statementInterceptor) {
         return new SynapseDatabase(configuration, jdbcConnectionFactory, statementInterceptor);
     }
-
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBParser.java
Patch:
@@ -29,7 +29,7 @@ public class HSQLDBParser extends Parser {
      * List of objects which can be dropped with IF EXISTS
      */
     private static final List<String> CONDITIONALLY_CREATABLE_OBJECTS = Arrays.asList(
-            "CONSTRAINT", "TABLE", "COLUMN", "INDEX", "SEQUENCE", "VIEW", "SCHEMA"
+            "COLUMN", "CONSTRAINT", "INDEX", "PROCEDURE", "SCHEMA", "SEQUENCE", "TABLE", "VIEW"
     );
 
     public HSQLDBParser(Configuration configuration, ParsingContext parsingContext) {
@@ -49,8 +49,7 @@ protected Set<String> getValidKeywords() {
                 "HANDLER", "HAVING", "HOLD", "HOUR",
                 "IDENTITY", "IF", "IN", "INDEX", "INDICATOR", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INT", "INTEGER", "INTERSECT", "INTERSECTION", "INTERVAL", "INTO", "IS", "ITERATE",
                 "JOIN",
-                "LAG",
-                "LANGUAGE", "LARGE", "LAST_VALUE", "LATERAL", "LEAD", "LEADING", "LEAVE", "LEFT", "LIKE", "LIKE_REGEX", "LN", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOOP", "LOWER",
+                "LAG", "LANGUAGE", "LARGE", "LAST_VALUE", "LATERAL", "LEAD", "LEADING", "LEAVE", "LEFT", "LIKE", "LIKE_REGEX", "LN", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOOP", "LOWER",
                 "MATCH", "MAX", "MAX_CARDINALITY", "MEMBER", "MERGE", "METHOD", "MIN", "MINUTE", "MOD", "MODIFIES", "MODULE", "MONTH", "MULTISET",
                 "NATIONAL", "NATURAL", "NCHAR", "NCLOB", "NEW", "NO", "NONE", "NORMALIZE", "NOT", "NTH_VALUE", "NTILE", "NULL", "NULLIF", "NUMERIC",
                 "OCCURRENCES_REGEX", "OCTET_LENGTH", "OF", "OFFSET", "OLD", "ON", "ONLY", "OPEN", "OR", "ORDER", "OUT", "OUTER", "OVER", "OVERLAPS", "OVERLAY",

File: flyway-core/src/main/java/org/flywaydb/core/api/ResourceProvider.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.api;
 
-import org.flywaydb.core.internal.resource.LoadableResource;
+import org.flywaydb.core.api.resource.LoadableResource;
 
 import java.util.Collection;
 

File: flyway-core/src/main/java/org/flywaydb/core/api/resource/Resource.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.resource;
+package org.flywaydb.core.api.resource;
 
 /**
  * A resource (such as a .sql file) used by Flyway.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/DatabaseType.java
Patch:
@@ -19,13 +19,13 @@
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
+import org.flywaydb.core.api.resource.LoadableResource;
 import org.flywaydb.core.internal.callback.CallbackExecutor;
 import org.flywaydb.core.internal.database.DatabaseExecutionStrategy;
 import org.flywaydb.core.internal.database.DefaultExecutionStrategy;
 import org.flywaydb.core.internal.jdbc.*;
 import org.flywaydb.core.internal.parser.Parser;
 import org.flywaydb.core.internal.parser.ParsingContext;
-import org.flywaydb.core.internal.resource.LoadableResource;
 import org.flywaydb.core.internal.sqlscript.*;
 
 import java.sql.Connection;

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/StatementInterceptor.java
Patch:
@@ -15,16 +15,15 @@
  */
 package org.flywaydb.core.internal.jdbc;
 
+import org.flywaydb.core.api.resource.LoadableResource;
 import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.database.base.Table;
-import org.flywaydb.core.internal.resource.LoadableResource;
 import org.flywaydb.core.internal.schemahistory.AppliedMigration;
 import org.flywaydb.core.internal.sqlscript.SqlStatement;
 
 import java.util.Map;
 
 public interface StatementInterceptor {
-
     void init(Database database, Table table);
     void schemaHistoryTableCreate(boolean baseline);
     void schemaHistoryTableInsert(AppliedMigration appliedMigration);

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -19,8 +19,8 @@
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.resource.LoadableResource;
-import org.flywaydb.core.internal.resource.Resource;
+import org.flywaydb.core.api.resource.LoadableResource;
+import org.flywaydb.core.api.resource.Resource;
 import org.flywaydb.core.internal.resource.ResourceName;
 import org.flywaydb.core.internal.resource.ResourceNameParser;
 import org.flywaydb.core.internal.sqlscript.Delimiter;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/NoopResourceProvider.java
Patch:
@@ -16,6 +16,7 @@
 package org.flywaydb.core.internal.resource;
 
 import org.flywaydb.core.api.ResourceProvider;
+import org.flywaydb.core.api.resource.LoadableResource;
 
 import java.util.Collection;
 import java.util.Collections;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/ResourceNameValidator.java
Patch:
@@ -20,6 +20,8 @@
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
+import org.flywaydb.core.api.resource.LoadableResource;
+import org.flywaydb.core.api.resource.Resource;
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.util.ArrayList;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/StringResource.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.flywaydb.core.internal.resource;
 
+import org.flywaydb.core.api.resource.LoadableResource;
+
 import java.io.Reader;
 import java.io.StringReader;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/android/AndroidResource.java
Patch:
@@ -18,7 +18,7 @@
 import android.content.res.AssetManager;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.Location;
-import org.flywaydb.core.internal.resource.LoadableResource;
+import org.flywaydb.core.api.resource.LoadableResource;
 
 import java.io.IOException;
 import java.io.InputStreamReader;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/classpath/ClassPathResource.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.Location;
-import org.flywaydb.core.internal.resource.LoadableResource;
+import org.flywaydb.core.api.resource.LoadableResource;
 import org.flywaydb.core.internal.util.UrlUtils;
 
 import java.io.File;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/filesystem/FileSystemResource.java
Patch:
@@ -19,7 +19,7 @@
 import org.flywaydb.core.api.Location;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.resource.LoadableResource;
+import org.flywaydb.core.api.resource.LoadableResource;
 import org.flywaydb.core.internal.util.BomStrippingReader;
 
 import java.io.*;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/gcs/GCSResource.java
Patch:
@@ -19,7 +19,7 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.resource.LoadableResource;
+import org.flywaydb.core.api.resource.LoadableResource;
 
 import java.io.Reader;
 import java.nio.channels.Channels;
@@ -70,4 +70,4 @@ public String getFilename() {
     public String getRelativePath() {
         return getAbsolutePath();
     }
-} 
\ No newline at end of file
+}
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/ClasspathClassScanner.java
Patch:
@@ -16,15 +16,14 @@
 package org.flywaydb.core.internal.scanner;
 
 import org.flywaydb.core.api.Location;
-import org.flywaydb.core.internal.resource.LoadableResource;
+import org.flywaydb.core.api.resource.LoadableResource;
 import org.flywaydb.core.internal.scanner.classpath.ClassPathScanner;
 
 import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.List;
 
 public class ClasspathClassScanner {
-
     private final ResourceNameCache resourceNameCache = new ResourceNameCache();
     private final LocationScannerCache locationScannerCache = new LocationScannerCache();
 
@@ -53,5 +52,4 @@ private String toClassName(String resourceName) {
         String nameWithDots = resourceName.replace("/", ".");
         return nameWithDots.substring(0, (nameWithDots.length() - ".class".length()));
     }
-
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/android/AndroidScanner.java
Patch:
@@ -22,7 +22,7 @@
 import org.flywaydb.core.api.android.ContextHolder;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.resource.LoadableResource;
+import org.flywaydb.core.api.resource.LoadableResource;
 import org.flywaydb.core.internal.resource.android.AndroidResource;
 import org.flywaydb.core.internal.scanner.classpath.ResourceAndClassScanner;
 import org.flywaydb.core.internal.util.ClassUtils;

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/ClassPathScanner.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.Location;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.resource.LoadableResource;
+import org.flywaydb.core.api.resource.LoadableResource;
 import org.flywaydb.core.internal.resource.classpath.ClassPathResource;
 import org.flywaydb.core.internal.scanner.LocationScannerCache;
 import org.flywaydb.core.internal.scanner.ResourceNameCache;

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/ResourceAndClassScanner.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.scanner.classpath;
 
-import org.flywaydb.core.internal.resource.LoadableResource;
+import org.flywaydb.core.api.resource.LoadableResource;
 
 import java.util.Collection;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/cloud/CloudScanner.java
Patch:
@@ -16,14 +16,12 @@
 package org.flywaydb.core.internal.scanner.cloud;
 
 import org.flywaydb.core.api.Location;
-import org.flywaydb.core.internal.resource.LoadableResource;
+import org.flywaydb.core.api.resource.LoadableResource;
 
 import java.nio.charset.Charset;
 import java.util.Collection;
-import java.util.TreeSet;
 
 public abstract class CloudScanner {
-
     protected Charset encoding;
 
     public CloudScanner(Charset encoding) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/filesystem/FileSystemScanner.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.Location;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.resource.LoadableResource;
+import org.flywaydb.core.api.resource.LoadableResource;
 import org.flywaydb.core.internal.resource.filesystem.FileSystemResource;
 import org.flywaydb.core.internal.sqlscript.SqlScriptMetadata;
 
@@ -104,7 +104,6 @@ public Collection<LoadableResource> scanForResources(Location location) {
 
                 ));
 
-
                 LOG.debug("Found filesystem resource: " + resourceName + encodingBlurb);
             }
         }
@@ -119,7 +118,6 @@ public Collection<LoadableResource> scanForResources(Location location) {
      * @param folder           The folder to look for resources under on disk.
      * @return The resource names;
      */
-    @SuppressWarnings("ConstantConditions")
     private Set<String> findResourceNamesFromFileSystem(String scanRootLocation, File folder) {
         LOG.debug("Scanning for resources in path: " + folder.getPath() + " (" + scanRootLocation + ")");
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/FlywaySqlScriptException.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.sqlscript;
 
+import org.flywaydb.core.api.resource.Resource;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
-import org.flywaydb.core.internal.resource.Resource;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/SqlScript.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.sqlscript;
 
-import org.flywaydb.core.internal.resource.LoadableResource;
+import org.flywaydb.core.api.resource.LoadableResource;
 
 import java.util.Collection;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/SqlScriptFactory.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.sqlscript;
 
-import org.flywaydb.core.internal.resource.LoadableResource;
 import org.flywaydb.core.api.ResourceProvider;
+import org.flywaydb.core.api.resource.LoadableResource;
 
 public interface SqlScriptFactory {
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/SqlScriptMetadata.java
Patch:
@@ -18,10 +18,10 @@
 import org.flywaydb.core.api.ResourceProvider;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
+import org.flywaydb.core.api.resource.LoadableResource;
 import org.flywaydb.core.internal.configuration.ConfigUtils;
 import org.flywaydb.core.internal.parser.Parser;
 import org.flywaydb.core.internal.parser.PlaceholderReplacingReader;
-import org.flywaydb.core.internal.resource.LoadableResource;
 
 import java.util.HashMap;
 import java.util.Map;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLParser.java
Patch:
@@ -102,12 +102,12 @@ && isDigit(text.charAt(6))
     }
 
     @Override
-    protected StatementType detectStatementType(String simplifiedStatement) {
+    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context) {
         if (STORED_PROGRAM_REGEX.matcher(simplifiedStatement).matches()) {
             return STORED_PROGRAM_STATEMENT;
         }
 
-        return super.detectStatementType(simplifiedStatement);
+        return super.detectStatementType(simplifiedStatement, context);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLParser.java
Patch:
@@ -88,12 +88,12 @@ private String readCopyData(PeekingReader reader, Recorder recorder) throws IOEx
     }
 
     @Override
-    protected StatementType detectStatementType(String simplifiedStatement) {
+    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context) {
         if (COPY_FROM_STDIN_REGEX.matcher(simplifiedStatement).matches()) {
             return COPY;
         }
 
-        return super.detectStatementType(simplifiedStatement);
+        return super.detectStatementType(simplifiedStatement, context);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAParser.java
Patch:
@@ -36,15 +36,15 @@ public SAPHANAParser(Configuration configuration, ParsingContext parsingContext)
     }
 
     @Override
-    protected StatementType detectStatementType(String simplifiedStatement) {
+    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context) {
         if (FUNCTION_OR_PROCEDURE_REGEX.matcher(simplifiedStatement).matches()) {
             return FUNCTION_OR_PROCEDURE_STATEMENT;
         }
         if (ANONYMOUS_BLOCK_REGEX.matcher(simplifiedStatement).matches()) {
             return ANONYMOUS_BLOCK_STATEMENT;
         }
 
-        return super.detectStatementType(simplifiedStatement);
+        return super.detectStatementType(simplifiedStatement, context);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -277,7 +277,7 @@ protected SqlStatement getNextStatement(Resource resource, PeekingReader reader,
                         if (keywords.size() > getTransactionalDetectionCutoff()) {
                             statementType = StatementType.GENERIC;
                         } else {
-                            statementType = detectStatementType(simplifiedStatement);
+                            statementType = detectStatementType(simplifiedStatement, context);
                             context.setStatementType(statementType);
                         }
                         adjustDelimiter(context, statementType);
@@ -451,7 +451,7 @@ protected ParsedSqlStatement createStatement(PeekingReader reader, Recorder reco
         );
     }
 
-    protected StatementType detectStatementType(String simplifiedStatement) {
+    protected StatementType detectStatementType(String simplifiedStatement, ParserContext context) {
         return StatementType.UNKNOWN;
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoDumper.java
Patch:
@@ -124,7 +124,6 @@ private static String getVersionStr(MigrationInfo migrationInfo) {
 
 
 
-
 
 
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CommandResultFactory.java
Patch:
@@ -122,13 +122,13 @@ public InfoOutput createInfoOutput(Set<MigrationVersion> undoableVersions, Migra
                 migrationInfo.getExecutionTime() != null ? migrationInfo.getExecutionTime() : 0);
     }
 
-    public MigrateOutput createMigrateOutput(MigrationInfo migrationInfo) {
+    public MigrateOutput createMigrateOutput(MigrationInfo migrationInfo, int executionTime) {
         return new MigrateOutput(getCategory(migrationInfo),
                 migrationInfo.getVersion() != null ? migrationInfo.getVersion().getVersion() : "",
                 migrationInfo.getDescription(),
                 migrationInfo.getType() != null ? migrationInfo.getType().toString() : "",
                 migrationInfo.getPhysicalLocation() != null ? migrationInfo.getPhysicalLocation() : "",
-                migrationInfo.getExecutionTime() != null ? migrationInfo.getExecutionTime() : 0);
+                executionTime);
     }
 
     public UndoOutput createUndoOutput(ResolvedMigration migrationInfo) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -426,7 +426,6 @@ public java.sql.Connection getConnection() {
                     try {
                         LOG.info("Migrating " + migrationText);
                         migration.getResolvedMigration().getExecutor().execute(context);
-                        migrateResult.migrations.add(commandResultFactory.createMigrateOutput(migration));
                     } catch (FlywayException e) {
                         callbackExecutor.onEachMigrateOrUndoEvent(Event.AFTER_EACH_MIGRATE_ERROR);
                         throw new FlywayMigrateException(migration, isOutOfOrder, e);
@@ -445,6 +444,8 @@ public java.sql.Connection getConnection() {
             stopWatch.stop();
             int executionTime = (int) stopWatch.getTotalTimeMillis();
 
+            migrateResult.migrations.add(commandResultFactory.createMigrateOutput(migration, executionTime));
+
             schemaHistory.addAppliedMigration(migration.getVersion(), migration.getDescription(), migration.getType(),
                     migration.getScript(), migration.getResolvedMigration().getChecksum(), executionTime, true);
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/ParserSqlScript.java
Patch:
@@ -200,9 +200,7 @@ public boolean executeInTransaction() {
 
     @Override
     public boolean shouldExecute() {
-        boolean shouldExecute = metadata.shouldExecute();
-        LOG.debug("Using shouldExecute=" + shouldExecute + " from script configuration");
-        return shouldExecute;
+        return metadata.shouldExecute();
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/JdbcTableSchemaHistory.java
Patch:
@@ -21,6 +21,7 @@
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
+import org.flywaydb.core.api.output.CommandResultFactory;
 import org.flywaydb.core.api.output.RepairOutput;
 import org.flywaydb.core.api.output.RepairResult;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
@@ -248,8 +249,7 @@ public boolean removeFailedMigrations(RepairResult repairResult, MigrationPatter
         try {
             appliedMigrations.stream()
                     .filter(am -> !am.isSuccess())
-                    .forEach(am -> repairResult.migrationsRemoved.add(new RepairOutput(
-                            am.getVersion().toString(), am.getDescription(), "")));
+                    .forEach(am -> repairResult.migrationsRemoved.add(new CommandResultFactory().createRepairOutput(am)));
 
             for (AppliedMigration appliedMigration : appliedMigrations) {
                 jdbcTemplate.execute("DELETE FROM " + table +

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -49,13 +49,13 @@ public abstract class Parser {
 
 
 
-    private final Configuration configuration;
+    public final Configuration configuration;
     private final int peekDepth;
     private final char identifierQuote;
     private final char alternativeIdentifierQuote;
     private final char alternativeStringLiteralQuote;
     private final Set<String> validKeywords;
-    protected final ParsingContext parsingContext;
+    public final ParsingContext parsingContext;
 
     protected Parser(Configuration configuration, ParsingContext parsingContext, int peekDepth) {
         this.configuration = configuration;

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/filesystem/FileSystemScanner.java
Patch:
@@ -92,7 +92,7 @@ public Collection<LoadableResource> scanForResources(Location location) {
 
 
                     );
-                    SqlScriptMetadata metadata = SqlScriptMetadata.fromResource(metadataResource);
+                    SqlScriptMetadata metadata = SqlScriptMetadata.fromResource(metadataResource, null);
                     if (metadata.encoding() != null) {
                         encoding = Charset.forName(metadata.encoding());
                         encodingBlurb = " (with overriding encoding " + encoding + ")";

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -382,6 +382,8 @@ public FluentConfiguration dryRunOutput(File dryRunOutput) {
      * Sets the file where to output the SQL statements of a migration dry run. {@code null} to execute the SQL statements
      * directly against the database. If the file specified is in a non-existent directory, Flyway will create all
      * directories and parent directories as needed.
+     * Paths starting with s3: point to a bucket in AWS S3, which must exist. They are in the format s3:<bucket>(/optionalfolder/subfolder)/filename.sql
+     * Paths starting with gcs: point to a bucket in Google Cloud Storage, which must exist. They are in the format gcs:<bucket>(/optionalfolder/subfolder)/filename.sql
      * <p><i>Flyway Teams only</i></p>
      *
      * @param dryRunOutputFileName The name of the output file or {@code null} to execute the SQL statements directly

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/IOUtils.java
Patch:
@@ -19,6 +19,7 @@
  * General IO-related utilities.
  */
 public class IOUtils {
+
     private IOUtils() {
     }
 

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayExtension.java
Patch:
@@ -434,6 +434,8 @@ public class FlywayExtension {
     /**
      * The file where to output the SQL statements of a migration dry run. If the file specified is in a non-existent
      * directory, Flyway will create all directories and parent directories as needed.
+     * Paths starting with s3: point to a bucket in AWS S3, which must exist. They are in the format s3:<bucket>(/optionalfolder/subfolder)/filename.sql
+     * Paths starting with gcs: point to a bucket in Google Cloud Storage, which must exist. They are in the format gcs:<bucket>(/optionalfolder/subfolder)/filename.sql
      * <p>{@code null} to execute the SQL statements directly against the database. (default: {@code null})</p>
      * <p>Also configurable with Gradle or System Property: ${flyway.dryRunOutput}</p>
      * <p><i>Flyway Teams only</i></p>

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -478,6 +478,8 @@ public abstract class AbstractFlywayTask extends DefaultTask {
     /**
      * The file where to output the SQL statements of a migration dry run. If the file specified is in a non-existent
      * directory, Flyway will create all directories and parent directories as needed.
+     * Paths starting with s3: point to a bucket in AWS S3, which must exist. They are in the format s3:<bucket>(/optionalfolder/subfolder)/filename.sql
+     * Paths starting with gcs: point to a bucket in Google Cloud Storage, which must exist. They are in the format gcs:<bucket>(/optionalfolder/subfolder)/filename.sql
      * <p>{@code null} to execute the SQL statements directly against the database. (default: {@code null})</p>
      * <p>Also configurable with Gradle or System Property: ${flyway.dryRunOutput}</p>
      * <p><i>Flyway Teams only</i></p>

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -550,6 +550,8 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
     /**
      * The file where to output the SQL statements of a migration dry run. If the file specified is in a non-existent
      * directory, Flyway will create all directories and parent directories as needed.
+     * Paths starting with s3: point to a bucket in AWS S3, which must exist. They are in the format s3:<bucket>(/optionalfolder/subfolder)/filename.sql
+     * Paths starting with gcs: point to a bucket in Google Cloud Storage, which must exist. They are in the format gcs:<bucket>(/optionalfolder/subfolder)/filename.sql
      * <p>{@code null} to execute the SQL statements directly against the database. (default: {@code null})</p>
      * <p>Also configurable with Maven or System Property: ${flyway.dryRunOutput}</p>
      * <p><i>Flyway Teams only</i></p>

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/ParsingContext.java
Patch:
@@ -88,7 +88,7 @@ public void populate(Database database, Configuration configuration) {
 
     public void updateFilenamePlaceholder(ResourceName resourceName) {
         if (resourceName.isValid()) {
-            placeholders.put(FILENAME_PLACEHOLDER, resourceName.getDescription());
+            placeholders.put(FILENAME_PLACEHOLDER, resourceName.getFilename());
         } else {
             placeholders.remove(FILENAME_PLACEHOLDER);
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/ResourceNameParser.java
Patch:
@@ -83,7 +83,7 @@ public ResourceName parse(String resourceName, String[] suffixes) {
 
             String description = splitName.getRight().replace("_", " ");
             return new ResourceName(prefixResult.getLeft(), splitName.getLeft(),
-                    configuration.getSqlMigrationSeparator(), description, suffixResult.getRight(),
+                    configuration.getSqlMigrationSeparator(), description, splitName.getRight(), suffixResult.getRight(),
                     isValid, validationMessage);
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -40,7 +40,7 @@
  * The main parser all database-specific parsers derive from.
  */
 public abstract class Parser {
-    private static final Log LOG = LogFactory.getLog(Parser.class);
+    protected static final Log LOG = LogFactory.getLog(Parser.class);
 
 
 
@@ -55,7 +55,7 @@ public abstract class Parser {
     private final char alternativeIdentifierQuote;
     private final char alternativeStringLiteralQuote;
     private final Set<String> validKeywords;
-    private final ParsingContext parsingContext;
+    protected final ParsingContext parsingContext;
 
     protected Parser(Configuration configuration, ParsingContext parsingContext, int peekDepth) {
         this.configuration = configuration;

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -354,6 +354,7 @@ public ErrorDetails validate() {
 
 
 
+                && (MigrationState.SUPERSEDED != state)
                 && (!context.missing || (MigrationState.MISSING_SUCCESS != state && MigrationState.MISSING_FAILED != state))
                 && (!context.future || (MigrationState.FUTURE_SUCCESS != state && MigrationState.FUTURE_FAILED != state))) {
             if (appliedMigration.getVersion() != null) {

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -211,7 +211,7 @@ public MigrateResult execute(MigrationResolver migrationResolver,
                     }
                 }
 
-                 return new DbMigrate(database, schemaHistory, schemas, migrationResolver, configuration,
+                 return new DbMigrate(database, schemaHistory, schemas[0], migrationResolver, configuration,
                         callbackExecutor).migrate();
             }
         }, true);
@@ -317,7 +317,7 @@ public ValidateResult execute(MigrationResolver migrationResolver, SchemaHistory
      */
     private ValidateResult doValidate(Database database, MigrationResolver migrationResolver, SchemaHistory schemaHistory,
                             Schema[] schemas, CallbackExecutor callbackExecutor, boolean ignorePending) {
-        ValidateResult validateResult = new DbValidate(database, schemaHistory, schemas, migrationResolver,
+        ValidateResult validateResult = new DbValidate(database, schemaHistory, schemas[0], migrationResolver,
                 configuration, ignorePending, callbackExecutor).validate();
 
         if (!validateResult.validationSuccessful && configuration.isCleanOnValidationError()) {
@@ -410,7 +410,7 @@ public RepairResult repair() throws FlywayException {
             public RepairResult execute(MigrationResolver migrationResolver,
                                         SchemaHistory schemaHistory, Database database, Schema[] schemas, CallbackExecutor callbackExecutor,
                                         StatementInterceptor statementInterceptor) {
-                return new DbRepair(database, migrationResolver, schemaHistory, schemas, callbackExecutor, configuration).repair();
+                return new DbRepair(database, migrationResolver, schemaHistory, callbackExecutor, configuration).repair();
             }
         }, true);
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseTypeRegister.java
Patch:
@@ -28,7 +28,7 @@
 import org.flywaydb.core.internal.database.h2.H2DatabaseType;
 import org.flywaydb.core.internal.database.hsqldb.HSQLDBDatabaseType;
 import org.flywaydb.core.internal.database.informix.InformixDatabaseType;
-import org.flywaydb.core.internal.database.mysql.MariaDBDatabaseType;
+import org.flywaydb.core.internal.database.mysql.mariadb.MariaDBDatabaseType;
 import org.flywaydb.core.internal.database.mysql.MySQLDatabaseType;
 import org.flywaydb.core.internal.database.oracle.OracleDatabaseType;
 import org.flywaydb.core.internal.database.postgresql.PostgreSQLDatabaseType;

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/cloud/gcs/GCSScanner.java
Patch:
@@ -26,7 +26,6 @@
 import org.flywaydb.core.internal.resource.LoadableResource;
 import org.flywaydb.core.internal.resource.gcs.GCSResource;
 import org.flywaydb.core.internal.scanner.cloud.CloudScanner;
-import software.amazon.awssdk.core.exception.SdkClientException;
 
 import java.nio.charset.Charset;
 import java.util.*;

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -180,7 +180,7 @@ public MigrateResult execute(MigrationResolver migrationResolver,
                         }
                     }
 
-                    if (!nonEmptySchemas.isEmpty()) {
+                    if (!nonEmptySchemas.isEmpty() && !configuration.isSkipExecutingMigrations()) {
                         if (configuration.isBaselineOnMigrate()) {
                             doBaseline(schemaHistory, callbackExecutor, database);
                         } else {

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -372,6 +372,7 @@ private static void printUsage() {
         LOG.info("placeholders                 : Placeholders to replace in sql migrations");
         LOG.info("placeholderPrefix            : Prefix of every placeholder");
         LOG.info("placeholderSuffix            : Suffix of every placeholder");
+        LOG.info("lockRetryCount               : The maximum number of retries when trying to obtain a lock");
         LOG.info("jdbcProperties               : Properties to pass to the JDBC driver object");
         LOG.info("installedBy                  : Username that will be recorded in the schema history table");
         LOG.info("target                       : Target version up to which Flyway should use migrations");

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -31,6 +31,7 @@
 import org.flywaydb.core.internal.clazz.NoopClassProvider;
 import org.flywaydb.core.internal.command.*;
 import org.flywaydb.core.internal.configuration.ConfigurationValidator;
+import org.flywaydb.core.internal.strategy.RetryStrategy;
 import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.database.base.DatabaseType;
 import org.flywaydb.core.internal.database.base.Schema;
@@ -473,6 +474,7 @@ private MigrationResolver createMigrationResolver(ResourceProvider resourceProvi
         final DatabaseType databaseType = jdbcConnectionFactory.getDatabaseType();
         final ParsingContext parsingContext = new ParsingContext();
         final SqlScriptFactory sqlScriptFactory = databaseType.createSqlScriptFactory(configuration, parsingContext);
+        RetryStrategy.setNumberOfRetries(configuration.getLockRetryCount());
 
         final SqlScriptExecutorFactory noCallbackSqlScriptExecutorFactory = databaseType.createSqlScriptExecutorFactory(
                 jdbcConnectionFactory,

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -1781,7 +1781,7 @@ public boolean isOracleSqlplus() {
     }
 
     /**
-     * Whether to Flyway's support for Oracle SQL*Plus commands should be activated.
+     * Whether Flyway's support for Oracle SQL*Plus commands should be activated.
      * <p><i>Flyway Teams only</i></p>
      *
      * @param oracleSqlplus {@code true} to active SQL*Plus support. {@code false} to fail fast instead. (default: {@code false})

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -1093,7 +1093,7 @@ public FluentConfiguration jdbcProperties(Map<String,String> jdbcProperties) {
     }
 
     /**
-     * Whether to Flyway's support for Oracle SQL*Plus commands should be activated.
+     * Whether Flyway's support for Oracle SQL*Plus commands should be activated.
      * <p><i>Flyway Teams only</i></p>
      *
      * @param oracleSqlplus {@code true} to active SQL*Plus support. {@code false} to fail fast instead. (default: {@code false})

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -1781,7 +1781,7 @@ public boolean isOracleSqlplus() {
     }
 
     /**
-     * Whether to Flyway's support for Oracle SQL*Plus commands should be activated.
+     * Whether Flyway's support for Oracle SQL*Plus commands should be activated.
      * <p><i>Flyway Teams only</i></p>
      *
      * @param oracleSqlplus {@code true} to active SQL*Plus support. {@code false} to fail fast instead. (default: {@code false})

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -1093,7 +1093,7 @@ public FluentConfiguration jdbcProperties(Map<String,String> jdbcProperties) {
     }
 
     /**
-     * Whether to Flyway's support for Oracle SQL*Plus commands should be activated.
+     * Whether Flyway's support for Oracle SQL*Plus commands should be activated.
      * <p><i>Flyway Teams only</i></p>
      *
      * @param oracleSqlplus {@code true} to active SQL*Plus support. {@code false} to fail fast instead. (default: {@code false})

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DriverDataSource.java
Patch:
@@ -144,7 +144,7 @@ public DriverDataSource(ClassLoader classLoader, String driverClass, String url,
 
         if (!StringUtils.hasLength(driverClass)) {
             if (type == null) {
-                throw new FlywayException("Unable to autodetect JDBC driver for url: " + url);
+                throw new FlywayException("Unable to autodetect JDBC driver for url: " + DatabaseTypeRegister.redactJdbcUrl(url));
             }
 
             driverClass =  type.getDriverClass(url, classLoader);
@@ -317,7 +317,7 @@ protected Connection getConnectionFromDriver(String username, String password) t
 
         Connection connection = driver.connect(url, properties);
         if (connection == null) {
-            throw new FlywayException("Unable to connect to " + url);
+            throw new FlywayException("Unable to connect to " + DatabaseTypeRegister.redactJdbcUrl(url));
         }
         connection.setAutoCommit(autoCommit);
         return connection;

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/JdbcUtils.java
Patch:
@@ -18,6 +18,7 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
+import org.flywaydb.core.internal.database.DatabaseTypeRegister;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.ExceptionUtils;
 
@@ -85,7 +86,7 @@ private static String getDataSourceInfo(DataSource dataSource) {
             return "";
         }
         DriverDataSource driverDataSource = (DriverDataSource) dataSource;
-        return " (" + driverDataSource.getUrl() + ") for user '" + driverDataSource.getUser() + "'";
+        return " (" + DatabaseTypeRegister.redactJdbcUrl(driverDataSource.getUrl()) + ") for user '" + driverDataSource.getUser() + "'";
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/ChecksumCalculator.java
Patch:
@@ -73,7 +73,7 @@ private static int calculateChecksumForResource(LoadableResource resource) {
 
                 do {
                     //noinspection Since15
-                    crc32.update(StringUtils.trimLineBreak(line).getBytes(StandardCharsets.UTF_8));
+                    crc32.update(line.getBytes(StandardCharsets.UTF_8));
                 } while ((line = bufferedReader.readLine()) != null);
             }
         } catch (IOException e) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/Results.java
Patch:
@@ -31,7 +31,7 @@ public class Results {
     private final List<Result> results = new ArrayList<>();
     private final List<Warning> warnings = new ArrayList<>();
     private final List<Error> errors = new ArrayList<>();
-    private SQLException exception;
+    private SQLException exception = null;
 
     public void addResult(Result result) {
         results.add(result);

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -357,7 +357,7 @@ public MigrationInfoService info() {
             public MigrationInfoService execute(MigrationResolver migrationResolver, SchemaHistory schemaHistory,
                                                 final Database database, final Schema[] schemas, CallbackExecutor callbackExecutor,
                                                 StatementInterceptor statementInterceptor) {
-                return new DbInfo(migrationResolver, schemaHistory, configuration, callbackExecutor, schemas).info();
+                return new DbInfo(migrationResolver, schemaHistory, configuration, database, callbackExecutor, schemas).info();
             }
         }, true);
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -229,7 +229,7 @@ public Integer call() {
      */
     private Integer migrateGroup(boolean firstRun) {
         MigrationInfoServiceImpl infoService =
-                new MigrationInfoServiceImpl(migrationResolver, schemaHistory, schemas, configuration,
+                new MigrationInfoServiceImpl(migrationResolver, schemaHistory, schemas, database, configuration,
                         configuration.getTarget(), configuration.isOutOfOrder(), configuration.getCherryPick(),
                         true, true, true, true);
         infoService.refresh();

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -105,7 +105,7 @@ public DbRepair(Database database, MigrationResolver migrationResolver, SchemaHi
         this.callbackExecutor = callbackExecutor;
         this.configuration = configuration;
 
-        this.migrationInfoService = new MigrationInfoServiceImpl(migrationResolver, schemaHistory, schemas, configuration,
+        this.migrationInfoService = new MigrationInfoServiceImpl(migrationResolver, schemaHistory, schemas, database, configuration,
                 MigrationVersion.LATEST, true, configuration.getCherryPick(), true, true, true, true);
 
         this.commandResultFactory = new CommandResultFactory();

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java
Patch:
@@ -148,7 +148,7 @@ public Configuration getConfiguration() {
             @Override
             public Pair<Integer, String> call() {
                 MigrationInfoServiceImpl migrationInfoService =
-                        new MigrationInfoServiceImpl(migrationResolver, schemaHistory, schemas, configuration,
+                        new MigrationInfoServiceImpl(migrationResolver, schemaHistory, schemas, database, configuration,
                                 configuration.getTarget(),
                                 configuration.isOutOfOrder(),
                                 configuration.getCherryPick(),

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyDatabaseType.java
Patch:
@@ -21,7 +21,6 @@
 import org.flywaydb.core.internal.database.base.DatabaseType;
 import org.flywaydb.core.internal.jdbc.JdbcConnectionFactory;
 import org.flywaydb.core.internal.jdbc.StatementInterceptor;
-
 import org.flywaydb.core.internal.parser.Parser;
 import org.flywaydb.core.internal.parser.ParsingContext;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabaseType.java
Patch:
@@ -21,7 +21,6 @@
 import org.flywaydb.core.internal.database.base.DatabaseType;
 import org.flywaydb.core.internal.jdbc.JdbcConnectionFactory;
 import org.flywaydb.core.internal.jdbc.StatementInterceptor;
-
 import org.flywaydb.core.internal.parser.Parser;
 import org.flywaydb.core.internal.parser.ParsingContext;
 import org.flywaydb.core.internal.util.ClassUtils;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteDatabaseType.java
Patch:
@@ -21,7 +21,6 @@
 import org.flywaydb.core.internal.database.base.DatabaseType;
 import org.flywaydb.core.internal.jdbc.JdbcConnectionFactory;
 import org.flywaydb.core.internal.jdbc.StatementInterceptor;
-
 import org.flywaydb.core.internal.parser.Parser;
 import org.flywaydb.core.internal.parser.ParsingContext;
 import org.flywaydb.core.internal.util.FeatureDetector;

File: flyway-commandline/src/main/java/org/flywaydb/commandline/ColorizedConsoleLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/CommandLineArguments.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/ConsoleLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/ConsoleLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/FileLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/FileLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/MultiLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/MultiLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/ClassProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/ErrorCode.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/FlywayException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/InfoOutputProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/Location.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationInfoService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationPattern.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/ResourceProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/android/ContextHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/android/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/BaseCallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Callback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Error.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Event.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Statement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Warning.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/executor/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/executor/MigrationExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/executor/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/Log.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/LogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/LogFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/BaseJavaMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/JavaMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/BaselineResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CleanResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CommandResultFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CompositeResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/ErrorOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/InfoOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/InfoResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/MigrateOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/MigrateResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/OperationResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/OperationResultBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/RepairOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/RepairResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/UndoOutput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/UndoResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/ValidateResult.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/ChecksumMatcher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/MigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/ResolvedMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/CallbackExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/DefaultCallbackExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/NoopCallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/NoopCallbackExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SimpleContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptCallbackFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/clazz/NoopClassProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/clazz/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbBaseline.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbClean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbSchemas.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigurationValidator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseExecutionStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseTypeRegister.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DefaultExecutionStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/InsertRowLock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Connection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Database.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/DatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Function.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Schema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/SchemaObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Table.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/TestContainersDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Type.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBRetryingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachRetryingTransactionalExecutionTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Connection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Database.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2DatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Function.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Parser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Schema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Table.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Type.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbySchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/firebird/FirebirdConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/firebird/FirebirdDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/firebird/FirebirdDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/firebird/FirebirdParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/firebird/FirebirdSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/firebird/FirebirdTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/firebird/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Connection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Database.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2DatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Parser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Schema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Table.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MariaDBDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLNamedLockTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleResults.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlScriptExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLAdvisoryLockTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLCopyParsedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANADatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANADatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANASchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANATable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/snowflake/SnowflakeConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/snowflake/SnowflakeDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/snowflake/SnowflakeDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/snowflake/SnowflakeParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/snowflake/SnowflakeSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/snowflake/SnowflakeTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/snowflake/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerApplicationLockTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerEngineEdition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/synapse/SynapseConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/synapse/SynapseDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/synapse/SynapseDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/synapse/SynapseSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/synapse/SynapseTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEJConnectDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEJTDSDatabaseType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASESchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASETable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywayDbUpgradeRequiredException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywaySqlException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/AppliedMigrationAttributes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoDumper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoServiceImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DriverDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/ErrorImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/ExecutionTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/ExecutionTemplateFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/JdbcConnectionFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/JdbcNullTypes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/JdbcTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/JdbcUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/PlainExecutionTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/Result.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/Results.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/RowMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/StatementInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/TableLockingExecutionTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/TransactionalExecutionTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/WarningImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/license/Edition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/license/FlywayEditionUpgradeRequiredException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/license/FlywayTeamsUpgradeRequiredException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/license/VersionPrinter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/license/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/LogCreatorFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/android/AndroidLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/android/AndroidLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/apachecommons/ApacheCommonsLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/apachecommons/ApacheCommonsLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/apachecommons/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/javautil/JavaUtilLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/javautil/JavaUtilLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/javautil/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/slf4j/Slf4jLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/slf4j/Slf4jLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/slf4j/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/ParserContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/ParsingContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2020 Redgate Software Ltd
+ * Copyright © Red Gate Software Ltd 2010-2020
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/output/CommandResultFactory.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Set;
 
 public class CommandResultFactory {
-    public InfoResult createInfoResult(Configuration configuration, MigrationInfo[] migrationInfos, MigrationInfo current) {
+    public InfoResult createInfoResult(Configuration configuration, MigrationInfo[] migrationInfos, MigrationInfo current, boolean allSchemasEmpty) {
         String flywayVersion = VersionPrinter.getVersion();
         String databaseName = getDatabaseName(configuration);
 
@@ -53,7 +53,8 @@ public InfoResult createInfoResult(Configuration configuration, MigrationInfo[]
                 databaseName,
                 schemaVersion,
                 String.join(", ", configuration.getSchemas()),
-                infoOutputs);
+                infoOutputs,
+                allSchemasEmpty);
     }
 
     public MigrateResult createMigrateResult(String databaseName, Configuration configuration) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/ResolvedMigrationImpl.java
Patch:
@@ -184,7 +184,7 @@ public void validate() {
     @Override
     public boolean checksumMatches(Integer checksum) {
         return Objects.equals(checksum, this.checksum) ||
-                Objects.equals(checksum, this.equivalentChecksum);
+                (Objects.equals(checksum, this.equivalentChecksum) && this.equivalentChecksum != null);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -108,7 +108,9 @@ public final SqlStatementIterator parse(final LoadableResource resource) {
                                 new PositionTrackingReader(tracker,
                                         replacePlaceholders(
                                                 new BomStrippingReader(
-                                                        new BufferedReader(resource.read(), 4096))))),
+                                                        new UnboundedReadAheadReader(
+                                                                new BufferedReader(
+                                                                        resource.read(), 4096)))))),
                         supportsPeekingMultipleLines());
 
         return new ParserSqlStatementIterator(peekingReader, resource, recorder, tracker, context);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseTypeRegister.java
Patch:
@@ -19,6 +19,7 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.base.DatabaseType;
+import org.flywaydb.core.internal.database.base.TestContainersDatabaseType;
 import org.flywaydb.core.internal.database.cockroachdb.CockroachDBDatabaseType;
 import org.flywaydb.core.internal.database.db2.DB2DatabaseType;
 import org.flywaydb.core.internal.database.derby.DerbyDatabaseType;
@@ -88,6 +89,8 @@ private static void registerDatabaseTypes() {
             registeredDatabaseTypes.add(new SybaseASEJTDSDatabaseType());
             registeredDatabaseTypes.add(new SybaseASEJConnectDatabaseType());
 
+            registeredDatabaseTypes.add(new TestContainersDatabaseType());
+
             hasRegisteredDatabaseTypes = true;
         }
     }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -136,8 +136,6 @@ public static void main(String[] args) {
                 classLoader = ClassUtils.addJarsOrDirectoriesToClasspath(classLoader, jarFiles);
             }
 
-            DatabaseTypeRegister.registerDatabaseTypes(classLoader);
-
             if (!commandLineArguments.shouldSuppressPrompt()) {
                 promptForCredentialsIfMissing(config);
             }

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -526,7 +526,6 @@ public class ClassicConfiguration implements Configuration {
      */
     public ClassicConfiguration() {
         // Nothing to do.
-        DatabaseTypeRegister.registerDatabaseTypes(this.classLoader);
         classScanner = new ClasspathClassScanner(this.classLoader);
     }
 
@@ -539,7 +538,6 @@ public ClassicConfiguration(ClassLoader classLoader) {
         if (classLoader != null) {
             this.classLoader = classLoader;
         }
-        DatabaseTypeRegister.registerDatabaseTypes(this.classLoader);
         classScanner = new ClasspathClassScanner(this.classLoader);
     }
 
@@ -551,7 +549,6 @@ public ClassicConfiguration(ClassLoader classLoader) {
     public ClassicConfiguration(Configuration configuration) {
         this(configuration.getClassLoader());
         configure(configuration);
-        DatabaseTypeRegister.registerDatabaseTypes(this.classLoader);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/DefaultSqlScriptExecutor.java
Patch:
@@ -192,7 +192,6 @@ protected void logStatementExecution(SqlStatement sqlStatement) {
 
 
 
-
 
 
     protected void executeStatement(JdbcTemplate jdbcTemplate, SqlScript sqlScript, SqlStatement sqlStatement) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/DefaultSqlScriptExecutor.java
Patch:
@@ -193,7 +193,6 @@ protected void logStatementExecution(SqlStatement sqlStatement) {
 
 
 
-
 
 
     protected void executeStatement(JdbcTemplate jdbcTemplate, SqlScript sqlScript, SqlStatement sqlStatement) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseTypeRegister.java
Patch:
@@ -113,7 +113,7 @@ public static DatabaseType getDatabaseTypeForUrl(String url) {
                     builder.append(type.getName());
                 }
 
-                LOG.info("Multiple databases found that handle url '" + url + "'. " + builder);
+                LOG.debug("Multiple databases found that handle url '" + url + "'. " + builder);
             }
 
             return typesAcceptingUrl.get(0);

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolver.java
Patch:
@@ -196,6 +196,9 @@ private void addMigrations(List<ResolvedMigration> migrations, String prefix,
 
 
 
+
+                             , false, false
+
                     )) {
                 @Override
                 public void validate() {

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -340,6 +340,7 @@ private static void printUsage() {
         LOG.info("installedBy                  : Username that will be recorded in the schema history table");
         LOG.info("target                       : Target version up to which Flyway should use migrations");
         LOG.info("cherryPick                   : [" + "enterprise] Comma separated list of migrations that Flyway should consider when migrating");
+        LOG.info("skipExecutingMigrations      : [" + "enterprise] Whether Flyway should skip actually executing the contents of the migrations");
         LOG.info("outOfOrder                   : Allows migrations to be run \"out of order\"");
         LOG.info("callbacks                    : Comma-separated list of FlywayCallback classes, or locations to scan for FlywayCallback classes");
         LOG.info("skipDefaultCallbacks         : Skips default callbacks (sql)");

File: flyway-core/src/main/java/org/flywaydb/core/internal/output/InfoOutput.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.flywaydb.core.internal.output;
 
+import java.util.LinkedList;
 import java.util.List;
 
 public class InfoOutput {
@@ -23,6 +24,7 @@ public class InfoOutput {
     public String schemaVersion;
     public String schemaName;
     public List<MigrationOutput> migrations;
+    public List<String> warnings;
 
     public InfoOutput(String flywayVersion,
                       String database,
@@ -34,5 +36,6 @@ public InfoOutput(String flywayVersion,
         this.schemaVersion = schemaVersion;
         this.schemaName = schemaName;
         this.migrations = migrations;
+        this.warnings = new LinkedList<>();
     }
 }
\ No newline at end of file

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -336,7 +336,7 @@ private static void printUsage() {
         LOG.info("target                       : Target version up to which Flyway should use migrations");
         LOG.info("cherryPick                   : [" + "enterprise] Comma separated list of migrations that Flyway should consider when migrating");
         LOG.info("outOfOrder                   : Allows migrations to be run \"out of order\"");
-        LOG.info("callbacks                    : Comma-separated list of FlywayCallback classes");
+        LOG.info("callbacks                    : Comma-separated list of FlywayCallback classes, or locations to scan for FlywayCallback classes");
         LOG.info("skipDefaultCallbacks         : Skips default callbacks (sql)");
         LOG.info("validateOnMigrate            : Validate when running migrate");
         LOG.info("validateMigrationNaming      : Validate file names of SQL migrations (including callbacks)");

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -128,6 +128,9 @@ public static FluentConfiguration configure(ClassLoader classLoader) {
      */
     public Flyway(Configuration configuration) {
         this.configuration = new ClassicConfiguration(configuration);
+
+        // Load callbacks from default package
+        this.configuration.loadCallbackLocation("db/callback", false);
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -978,7 +978,7 @@ public FluentConfiguration callbacks(Callback... callbacks) {
     /**
      * Set the callbacks for lifecycle notifications.
      *
-     * @param callbacks The fully qualified class names of the callbacks for lifecycle notifications. (default: none)
+     * @param callbacks The fully qualified class names, or full qualified package to scan, of the callbacks for lifecycle notifications. (default: none)
      */
     public FluentConfiguration callbacks(String... callbacks) {
         config.setCallbacksAsClassNames(callbacks);

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayExtension.java
Patch:
@@ -236,7 +236,7 @@ public class FlywayExtension {
     public String[] cherryPick;
 
     /**
-     * An array of fully qualified FlywayCallback class implementations
+     * An array of fully qualified FlywayCallback class implementations, or packages to scan for FlywayCallback implementations
      */
     public String[] callbacks;
 

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -285,7 +285,7 @@ public abstract class AbstractFlywayTask extends DefaultTask {
     private String[] cherryPick;
 
     /**
-     * An array of fully qualified FlywayCallback class implementations
+     * An array of fully qualified FlywayCallback class implementations, or packages to scan for FlywayCallback implementations
      */
     public String[] callbacks;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DriverDataSource.java
Patch:
@@ -163,7 +163,7 @@ public DriverDataSource(ClassLoader classLoader, String driverClass, String url,
             } catch (Exception e1) {
                 // Only report original exception about primary driver
                 throw new FlywayException(
-                        "Unable to instantiate JDBC driver: " + driverClass + " => Check whether the jar file is present", e,
+                        "Unable to instantiate JDBC driver: " + driverClass + " or backup driver: " + backupDriverClass + " => Check whether the jar file is present", e,
                         ErrorCode.JDBC_DRIVER);
             }
         }

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -30,6 +30,7 @@
 import org.flywaydb.core.internal.clazz.NoopClassProvider;
 import org.flywaydb.core.internal.command.*;
 import org.flywaydb.core.internal.configuration.ConfigurationValidator;
+import org.flywaydb.core.internal.database.DatabaseTypeRegister;
 import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.database.base.DatabaseType;
 import org.flywaydb.core.internal.database.base.Schema;

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DriverDataSource.java
Patch:
@@ -129,6 +129,8 @@ public DriverDataSource(ClassLoader classLoader, String driverClass, String url,
                             Properties defaultProperties, Map<String, String> additionalProperties) throws FlywayException {
         this.classLoader = classLoader;
         this.url = detectFallbackUrl(url);
+
+        DatabaseTypeRegister.registerDatabaseTypes(classLoader);
         this.type = DatabaseTypeRegister.getDatabaseTypeForUrl(url);
 
         if (!StringUtils.hasLength(driverClass)) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/DatabaseType.java
Patch:
@@ -69,6 +69,8 @@ public DatabaseType(ClassLoader classLoader) {
 
 
 
+
+
     /**
      * Check if this database type should handle the given JDBC url
      * @param url The JDBC url.

File: flyway-core/src/main/java/org/flywaydb/core/api/ErrorCode.java
Patch:
@@ -23,5 +23,6 @@ public enum ErrorCode {
     DUPLICATE_VERSIONED_MIGRATION,
     DUPLICATE_REPEATABLE_MIGRATION,
     DUPLICATE_UNDO_MIGRATION,
+    DUPLICATE_DELETED_MIGRATION,
     CONFIGURATION;
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/AppliedMigrationAttributes.java
Patch:
@@ -17,6 +17,7 @@
 
 class AppliedMigrationAttributes {
     public boolean outOfOrder;
+    public boolean deleted;
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoDumper.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.flywaydb.core.api.MigrationInfo;
 import org.flywaydb.core.api.MigrationState;
+import org.flywaydb.core.api.MigrationType;
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.internal.util.AsciiTable;
 import org.flywaydb.core.internal.util.DateUtils;
@@ -125,6 +126,8 @@ private static String getVersionStr(MigrationInfo migrationInfo) {
 
 
 
+
+
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -199,8 +199,8 @@ private Integer migrateGroup(boolean firstRun) {
             List<MigrationInfo> resolved = Arrays.asList(infoService.resolved());
             Collections.reverse(resolved);
             if (resolved.isEmpty()) {
-                LOG.warn("Schema " + schema + " has version " + currentSchemaVersion
-                        + ", but no migration could be resolved in the configured locations ! Note this warning will become an error in Flyway 7.");
+                LOG.error("Schema " + schema + " has version " + currentSchemaVersion
+                        + ", but no migration could be resolved in the configured locations !");
             } else {
                 for (MigrationInfo migrationInfo : resolved) {
                     // Only consider versioned migrations

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/filesystem/FileSystemScanner.java
Patch:
@@ -72,15 +72,15 @@ public Collection<LoadableResource> scanForResources(Location location) {
 
         File dir = new File(path);
         if (!dir.exists()) {
-            LOG.warn("Skipping filesystem location:" + path + " (not found). Note this warning will become an error in Flyway 7.");
+            LOG.error("Skipping filesystem location:" + path + " (not found).");
             return Collections.emptyList();
         }
         if (!dir.canRead()) {
-            LOG.warn("Skipping filesystem location:" + path + " (not readable). Note this warning will become an error in Flyway 7.");
+            LOG.error("Skipping filesystem location:" + path + " (not readable).");
             return Collections.emptyList();
         }
         if (!dir.isDirectory()) {
-            LOG.warn("Skipping filesystem location:" + path + " (not a directory). Note this warning will become an error in Flyway 7.");
+            LOG.error("Skipping filesystem location:" + path + " (not a directory).");
             return Collections.emptyList();
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEDatabase.java
Patch:
@@ -68,6 +68,7 @@ protected SybaseASEConnection doGetConnection(Connection connection) {
 
 
 
+
     @Override
     public void ensureSupported() {
         ensureDatabaseIsRecentEnough("15.7");

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/Scanner.java
Patch:
@@ -75,7 +75,7 @@ public Scanner(Class<I> implementedInterface, Collection<Location> locations, Cl
     public LoadableResource getResource(String name) {
         for (LoadableResource resource : resources) {
             String relativePath = resource.getRelativePath();
-            if (relativePath.equals(name) || resource.getAbsolutePathOnDisk().equals(name)) {
+            if (relativePath.equalsIgnoreCase(name) || resource.getAbsolutePathOnDisk().equalsIgnoreCase(name)) {
                 return resource;
             }
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/Scanner.java
Patch:
@@ -74,8 +74,9 @@ public Scanner(Class<I> implementedInterface, Collection<Location> locations, Cl
     @Override
     public LoadableResource getResource(String name) {
         for (LoadableResource resource : resources) {
-            String fileName = resource.getRelativePath();
-            if (fileName.equals(name)) {
+            String absolutePath = resource.getAbsolutePathOnDisk();
+            String relativePath = resource.getRelativePath();
+            if (relativePath.equals(name) || absolutePath.equals(name)) {
                 return resource;
             }
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabase.java
Patch:
@@ -94,9 +94,10 @@ private static boolean isEventSchedulerQueryable(JdbcTemplate jdbcTemplate) {
 
     static boolean isRunningInPerconaXtraDBClusterWithStrictMode(JdbcTemplate jdbcTemplate) {
         try {
-            if ("ENFORCING".equals(jdbcTemplate.queryForString(
+            String pcx_strict_mode = jdbcTemplate.queryForString(
                     "select VARIABLE_VALUE from performance_schema.global_variables"
-                            + " where variable_name = 'pxc_strict_mode'"))) {
+                            + " where variable_name = 'pxc_strict_mode'");
+            if ("ENFORCING".equals(pcx_strict_mode) || "MASTER".equals(pcx_strict_mode)) {
                 LOG.debug("Detected Percona XtraDB Cluster in strict mode");
                 return true;
             }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -347,6 +347,7 @@ private static void printUsage() {
         LOG.info("configFiles                  : Comma-separated list of config files to use");
         LOG.info("configFileEncoding           : Encoding to use when loading the config files");
         LOG.info("jarDirs                      : Comma-separated list of dirs for Jdbc drivers & Java migrations");
+        LOG.info("createSchemas          : Whether Flyway should attempt to create the schemas specified in the schemas property");
         LOG.info("dryRunOutput                 : [" + "pro] File where to output the SQL statements of a migration dry run");
         LOG.info("errorOverrides               : [" + "pro] Rules to override specific SQL states and errors codes");
         LOG.info("oracle.sqlplus               : [" + "pro] Enable Oracle SQL*Plus command support");

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Schema.java
Patch:
@@ -155,7 +155,7 @@ protected void doClean() throws SQLException {
      */
     private List<String> generateDropStatementsForProcedures() throws SQLException {
         String dropProcGenQuery =
-                "select SPECIFICNAME from SYSCAT.ROUTINES where ROUTINETYPE='P' and ROUTINESCHEMA = '" + name + "'";
+                "select SPECIFICNAME from SYSCAT.ROUTINES where ROUTINETYPE='P' and ROUTINESCHEMA = '" + name + "'" + " and ROUTINEMODULENAME IS NULL";
         return buildDropStatements("DROP SPECIFIC PROCEDURE", dropProcGenQuery);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Parser.java
Patch:
@@ -58,7 +58,7 @@ protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token
                        ) {
             // But not END IF and END WHILE
             if (!previousTokenIsKeyword || !"END".equals(previousKeyword)) {
-                context.increaseBlockDepth();
+                context.increaseBlockDepth(keyword.getText());
 
             }
         } else if (

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBParser.java
Patch:
@@ -77,7 +77,7 @@ protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token
                 || "FOR".equals(keywordText)
                 || "CASE".equals(keywordText))
                 && previousKeyword != null && !"END".equals(previousKeywordText))) {
-            context.increaseBlockDepth();
+            context.increaseBlockDepth(keywordText);
         } else if (("EACH".equals(keywordText) || "SQLEXCEPTION".equals(keywordText))
                 && previousKeyword != null
                 && "FOR".equals(previousKeywordText)) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixParser.java
Patch:
@@ -39,7 +39,7 @@ protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token
 
             // CREATE( DBA)? (FUNCTION|PROCEDURE)
             if ("CREATE".equals(previous) || "DBA".equals(previous)) {
-                context.increaseBlockDepth();
+                context.increaseBlockDepth(previous);
             } else if ("END".equals(previous)) {
                 context.decreaseBlockDepth();
             }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLParser.java
Patch:
@@ -177,7 +177,7 @@ protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token
                 context.decreaseBlockDepth();
             }
 
-            context.increaseBlockDepth();
+            context.increaseBlockDepth(keywordText);
             if (reader.peekNextNonWhitespace() == '(') {
                 ifState = IfState.IF_FUNCTION;
             } else {
@@ -186,7 +186,7 @@ protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token
         }
 
         if ("BEGIN".equals(keywordText) || (CONTROL_FLOW_KEYWORDS.contains(keywordText) && !lastTokenIs(tokens, parensDepth, "END"))) {
-            context.increaseBlockDepth();
+            context.increaseBlockDepth(keywordText);
         }
 
         if ("END".equals(keywordText)) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAParser.java
Patch:
@@ -66,9 +66,9 @@ protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token
         if ("BEGIN".equals(keyword.getText()) || "CASE".equals(keyword.getText()) || "DO".equals(keyword.getText()) || "IF".equals(keyword.getText())
                 // But not END IF
                 && !lastTokenIs(tokens, parensDepth, "END")) {
-            context.increaseBlockDepth();
+            context.increaseBlockDepth(keyword.getText());
         } else if (doTokensMatchPattern(tokens, keyword, FUNCTION_OR_PROCEDURE_REGEX)) {
-            context.increaseBlockDepth();
+            context.increaseBlockDepth("FUNCTION_OR_PROCEDURE_REGEX");
         } else if ("END".equals(keyword.getText())) {
             context.decreaseBlockDepth();
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteParser.java
Patch:
@@ -44,7 +44,7 @@ protected Boolean detectCanExecuteInTransaction(String simplifiedStatement, List
     protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword, PeekingReader reader) throws IOException {
         String lastKeyword = keyword.getText();
         if ("BEGIN".equals(lastKeyword) || "CASE".equals(lastKeyword)) {
-            context.increaseBlockDepth();
+            context.increaseBlockDepth(lastKeyword);
         } else if ("END".equals(lastKeyword)) {
             context.decreaseBlockDepth();
         }

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -585,7 +585,7 @@ private Pair<Schema, List<Schema>> prepareSchemas(Database database) {
             schemas.add(currentSchema);
         } else {
             for (String schemaName : schemaNames) {
-                    schemas.add(database.getMainConnection().getSchema(schemaName));
+                schemas.add(database.getMainConnection().getSchema(schemaName));
             }
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -585,7 +585,7 @@ private Pair<Schema, List<Schema>> prepareSchemas(Database database) {
             schemas.add(currentSchema);
         } else {
             for (String schemaName : schemaNames) {
-                    schemas.add(database.getMainConnection().getSchema(schemaName));
+                schemas.add(database.getMainConnection().getSchema(schemaName));
             }
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLParser.java
Patch:
@@ -114,6 +114,8 @@ protected Boolean detectCanExecuteInTransaction(String simplifiedStatement, List
     @SuppressWarnings("Duplicates")
     @Override
     protected Token handleAlternativeStringLiteral(PeekingReader reader, ParserContext context, int pos, int line, int col) throws IOException {
+        // dollarQuote is required because in Postgres, literals encased in $$ can be given a label, as in:
+        // $label$This is a string literal$label$
         String dollarQuote = (char) reader.read() + reader.readUntilIncluding('$');
         reader.swallowUntilExcluding(dollarQuote);
         reader.swallow(dollarQuote.length());

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLParser.java
Patch:
@@ -114,6 +114,8 @@ protected Boolean detectCanExecuteInTransaction(String simplifiedStatement, List
     @SuppressWarnings("Duplicates")
     @Override
     protected Token handleAlternativeStringLiteral(PeekingReader reader, ParserContext context, int pos, int line, int col) throws IOException {
+        // dollarQuote is required because in Postgres, literals encased in $$ can be given a label, as in:
+        // $label$This is a string literal$label$
         String dollarQuote = (char) reader.read() + reader.readUntilIncluding('$');
         reader.swallowUntilExcluding(dollarQuote);
         reader.swallow(dollarQuote.length());

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DriverDataSource.java
Patch:
@@ -321,6 +321,8 @@ private Properties detectPropsForType(DriverType type) {
             result.put("v$session.osuser", osUser.substring(0, Math.min(osUser.length(), 30)));
             result.put("v$session.program", APPLICATION_NAME);
             result.put("oracle.net.keepAlive", "true");
+            String oobb = ClassUtils.getStaticFieldValue("oracle.jdbc.OracleConnection", "CONNECTION_PROPERTY_THIN_NET_DISABLE_OUT_OF_BAND_BREAK", classLoader);
+            result.put(oobb, "true");
         } else if (DriverType.SQLSERVER.equals(type)) {
             result.put("applicationName", APPLICATION_NAME);
         } else if (DriverType.POSTGRESQL.equals(type)) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DriverDataSource.java
Patch:
@@ -321,6 +321,8 @@ private Properties detectPropsForType(DriverType type) {
             result.put("v$session.osuser", osUser.substring(0, Math.min(osUser.length(), 30)));
             result.put("v$session.program", APPLICATION_NAME);
             result.put("oracle.net.keepAlive", "true");
+            String oobb = ClassUtils.getStaticFieldValue("oracle.jdbc.OracleConnection", "CONNECTION_PROPERTY_THIN_NET_DISABLE_OUT_OF_BAND_BREAK", classLoader);
+            result.put(oobb, "true");
         } else if (DriverType.SQLSERVER.equals(type)) {
             result.put("applicationName", APPLICATION_NAME);
         } else if (DriverType.POSTGRESQL.equals(type)) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolver.java
Patch:
@@ -162,7 +162,7 @@ private void addMigrations(List<ResolvedMigration> migrations, String prefix,
         for (LoadableResource resource : resourceProvider.getResources(prefix, suffixes)) {
             String filename = resource.getFilename();
             ResourceName result = resourceNameParser.parse(filename);
-            if (!result.isValid() || isSqlCallback(result)) {
+            if (!result.isValid() || isSqlCallback(result) || !prefix.equals(result.getPrefix())) {
                 continue;
             }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -284,8 +284,9 @@ private SqlStatement getNextStatement(Resource resource, PeekingReader reader, R
             } while (true);
         } catch (Exception e) {
             IOUtils.close(reader);
+            String docsPage = "https://flywaydb.org/documentation/knownparserlimitations";
             throw new FlywayException("Unable to parse statement in " + resource.getAbsolutePath()
-                    + " at line " + statementLine + " col " + statementCol + ": " + e.getMessage(), e);
+                    + " at line " + statementLine + " col " + statementCol + ". See " + docsPage + " for more information: " + e.getMessage(), e);
         }
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteParser.java
Patch:
@@ -43,7 +43,7 @@ protected Boolean detectCanExecuteInTransaction(String simplifiedStatement, List
     @Override
     protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword, PeekingReader reader) throws IOException {
         String lastKeyword = keyword.getText();
-        if ("BEGIN".equals(lastKeyword)) {
+        if ("BEGIN".equals(lastKeyword) || "CASE".equals(lastKeyword)) {
             context.increaseBlockDepth();
         } else if ("END".equals(lastKeyword)) {
             context.decreaseBlockDepth();

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -168,7 +168,7 @@ private SqlStatement getNextStatement(Resource resource, PeekingReader reader, R
 
                 TokenType tokenType = token.getType();
                 if (tokenType == TokenType.NEW_DELIMITER) {
-                    if (!tokens.isEmpty()) {
+                    if (!tokens.isEmpty() && nonCommentPartPos >= 0) {
                         String sql = recorder.stop();
                         throw new FlywayException("Delimiter changed inside statement at line " + statementLine
                                 + " col " + statementCol + ": " + sql);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleParser.java
Patch:
@@ -466,8 +466,8 @@ protected boolean isDelimiter(String peek, ParserContext context, int col) {
         Delimiter delimiter = context.getDelimiter();
 
         // Only consider alone-on-line delimiters (such as "/" for PL/SQL) if
-        // we're at the top level and it's the first character on the line
-        if (delimiter.isAloneOnLine() && (context.getBlockDepth() > 0 || col > 1)) {
+        // it's the first character on the line
+        if (delimiter.isAloneOnLine() && col > 1) {
             return false;
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/android/AndroidResource.java
Patch:
@@ -39,9 +39,7 @@ public AndroidResource(Location location, AssetManager assetManager, String path
         this.assetManager = assetManager;
         this.fileNameWithAbsolutePath = path + "/" + name;
         this.fileName = name;
-        this.fileNameWithRelativePath = location.getPath().isEmpty()
-                ? fileNameWithAbsolutePath
-                : fileNameWithAbsolutePath.substring(location.getPath().length() + 1);
+        this.fileNameWithRelativePath = location == null ? fileNameWithAbsolutePath : location.getPathRelativeToThis(fileNameWithAbsolutePath);
         this.encoding = encoding;
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/classpath/ClassPathResource.java
Patch:
@@ -52,9 +52,7 @@ public class ClassPathResource extends LoadableResource {
     public ClassPathResource(Location location, String fileNameWithAbsolutePath, ClassLoader classLoader,
                              Charset encoding) {
         this.fileNameWithAbsolutePath = fileNameWithAbsolutePath;
-        this.fileNameWithRelativePath = location == null || location.getPath().isEmpty()
-                ? fileNameWithAbsolutePath
-                : fileNameWithAbsolutePath.substring(location.getPath().length() + 1);
+        this.fileNameWithRelativePath = location == null ? fileNameWithAbsolutePath : location.getPathRelativeToThis(fileNameWithAbsolutePath);
         this.classLoader = classLoader;
         this.encoding = encoding;
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLSchema.java
Patch:
@@ -56,7 +56,7 @@ protected boolean doEmpty() throws SQLException {
                         + "(SELECT 1 as found FROM information_schema.tables WHERE table_schema=?) UNION ALL "
                         + "(SELECT 1 as found FROM information_schema.views WHERE table_schema=? LIMIT 1) UNION ALL "
                         + "(SELECT 1 as found FROM information_schema.table_constraints WHERE table_schema=? LIMIT 1) UNION ALL "
-                        + "(SELECT 1 as found FROM information_schema.triggers WHERE trigger_schema=? LIMIT 1) UNION ALL "
+                        + "(SELECT 1 as found FROM information_schema.triggers WHERE event_object_schema=?  LIMIT 1) UNION ALL "
                         + "(SELECT 1 as found FROM information_schema.routines WHERE routine_schema=? LIMIT 1)"
                         // #2410 Unlike MySQL, MariaDB 10.0 and newer don't allow the events table to be queried
                         // when the event scheduled is DISABLED or in some rare cases OFF

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLSchema.java
Patch:
@@ -56,7 +56,7 @@ protected boolean doEmpty() throws SQLException {
                         + "(SELECT 1 as found FROM information_schema.tables WHERE table_schema=?) UNION ALL "
                         + "(SELECT 1 as found FROM information_schema.views WHERE table_schema=? LIMIT 1) UNION ALL "
                         + "(SELECT 1 as found FROM information_schema.table_constraints WHERE table_schema=? LIMIT 1) UNION ALL "
-                        + "(SELECT 1 as found FROM information_schema.triggers WHERE trigger_schema=? LIMIT 1) UNION ALL "
+                        + "(SELECT 1 as found FROM information_schema.triggers WHERE event_object_schema=?  LIMIT 1) UNION ALL "
                         + "(SELECT 1 as found FROM information_schema.routines WHERE routine_schema=? LIMIT 1)"
                         // #2410 Unlike MySQL, MariaDB 10.0 and newer don't allow the events table to be queried
                         // when the event scheduled is DISABLED or in some rare cases OFF

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/PeekingReader.java
Patch:
@@ -175,6 +175,8 @@ public String peek(int numChars) throws IOException {
             int r = peekBuffer[peekBufferOffset + i];
             if (r == -1) {
                 break;
+            } else if (peekBufferOffset + i > peekMax) {
+                break;
             }
             result.append((char) r);
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/StatementType.java
Patch:
@@ -17,6 +17,7 @@
 
 public class StatementType {
     public static final StatementType GENERIC = new StatementType();
+    public static final StatementType UNKNOWN = new StatementType();
 
     /**
      * Whether the character should be treated as if it is a letter; this allows statement types to handle

File: flyway-commandline/src/main/java/org/flywaydb/commandline/ConsoleLogCreator.java
Patch:
@@ -38,7 +38,7 @@ public Log createLogger(Class<?> clazz) {
         ConsoleLog log = new ConsoleLog(commandLineArguments.getLogLevel());
         Color color = commandLineArguments.getColor();
 
-        if (Color.NEVER.equals(color)) {
+        if (Color.NEVER.equals(color) || (Color.AUTO.equals(color) && System.console() == null)) {
             return log;
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -502,7 +502,7 @@ public void initialize(JdbcConnectionFactory jdbcConnectionFactory, Connection c
 
 
 
-            parsingContext.populate(database);
+            parsingContext.populate(database, configuration);
 
             database.ensureSupported();
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLParser.java
Patch:
@@ -101,9 +101,9 @@ && isDigit(text.charAt(6))
     private static final List<String> CONTROL_FLOW_KEYWORDS = Arrays.asList("IF", "LOOP", "CASE", "REPEAT", "WHILE");
 
     private static final Pattern CREATE_IF_NOT_EXISTS = Pattern.compile(
-            "^CREATE\\s([^\\s]*\\s)*IF\\sNOT\\sEXISTS");
+            ".*CREATE\\s([^\\s]*\\s)*IF\\sNOT\\sEXISTS");
     private static final Pattern DROP_IF_EXISTS = Pattern.compile(
-            "^DROP\\s([^\\s]*\\s)*IF\\sEXISTS");
+            ".*DROP\\s([^\\s]*\\s)*IF\\sEXISTS");
 
     @Override
     protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword, PeekingReader reader) throws IOException {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleParser.java
Patch:
@@ -64,7 +64,7 @@ public class OracleParser extends Parser {
     private static final StatementType PLSQL_PACKAGE_BODY_STATEMENT = new StatementType();
 
     private static final Pattern PLSQL_PACKAGE_DEFINITION_REGEX = Pattern.compile(
-            "^CREATE(\\sOR\\sREPLACE)?(\\s(NON)?EDITIONABLE)?\\sPACKAGE\\s([^\\s]*\\s)?(IS|AS)");
+            "^CREATE(\\sOR\\sREPLACE)?(\\s(NON)?EDITIONABLE)?\\sPACKAGE\\s([^\\s]*\\s)?(AUTHID\\s[^\\s]*\\s)?(IS|AS)");
 
     private static final Pattern PLSQL_VIEW_REGEX = Pattern.compile(
             "^CREATE(\\sOR\\sREPLACE)?(\\s(NON)?EDITIONABLE)?\\sVIEW\\s([^\\s]*\\s)?AS\\sWITH\\s(PROCEDURE|FUNCTION)");

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -200,7 +200,7 @@ private Integer migrateGroup(boolean firstRun) {
             Collections.reverse(resolved);
             if (resolved.isEmpty()) {
                 LOG.warn("Schema " + schema + " has version " + currentSchemaVersion
-                        + ", but no migration could be resolved in the configured locations !");
+                        + ", but no migration could be resolved in the configured locations ! Note this warning will become an error in Flyway 7.");
             } else {
                 for (MigrationInfo migrationInfo : resolved) {
                     // Only consider versioned migrations

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/filesystem/FileSystemScanner.java
Patch:
@@ -71,15 +71,15 @@ public Collection<LoadableResource> scanForResources(Location location) {
 
         File dir = new File(path);
         if (!dir.exists()) {
-            LOG.warn("Skipping filesystem location:" + path + " (not found)");
+            LOG.warn("Skipping filesystem location:" + path + " (not found). Note this warning will become an error in Flyway 7.");
             return Collections.emptyList();
         }
         if (!dir.canRead()) {
-            LOG.warn("Skipping filesystem location:" + path + " (not readable)");
+            LOG.warn("Skipping filesystem location:" + path + " (not readable). Note this warning will become an error in Flyway 7.");
             return Collections.emptyList();
         }
         if (!dir.isDirectory()) {
-            LOG.warn("Skipping filesystem location:" + path + " (not a directory)");
+            LOG.warn("Skipping filesystem location:" + path + " (not a directory). Note this warning will become an error in Flyway 7.");
             return Collections.emptyList();
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/JdbcUtils.java
Patch:
@@ -57,7 +57,7 @@ public static Connection openConnection(DataSource dataSource, int connectRetrie
             } catch (SQLException e) {
                 if ("08S01".equals(e.getSQLState()) && e.getMessage().contains("This driver is not configured for integrated authentication")) {
                     throw new FlywaySqlException("Unable to obtain connection from database"
-                            + getDataSourceInfo(dataSource) + ": " + e.getMessage() + "\nTo setup integrated authentication see https://flywaydb.org/documentation/database/sqlserver#windows-authentication.", e);
+                            + getDataSourceInfo(dataSource) + ": " + e.getMessage() + "\nTo setup integrated authentication see https://flywaydb.org/documentation/database/sqlserver#windows-authentication--azure-active-directory", e);
                 }
 
                 if (++retries > connectRetries) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLParser.java
Patch:
@@ -101,9 +101,9 @@ && isDigit(text.charAt(6))
     private static final List<String> CONTROL_FLOW_KEYWORDS = Arrays.asList("IF", "LOOP", "CASE", "REPEAT", "WHILE");
 
     private static final Pattern CREATE_IF_NOT_EXISTS = Pattern.compile(
-            "^CREATE\\s([^\\s]*\\s)?IF\\sNOT\\sEXISTS");
+            "^CREATE\\s([^\\s]*\\s)*IF\\sNOT\\sEXISTS");
     private static final Pattern DROP_IF_EXISTS = Pattern.compile(
-            "^DROP\\s([^\\s]*\\s)?IF\\sEXISTS");
+            "^DROP\\s([^\\s]*\\s)*IF\\sEXISTS");
 
     @Override
     protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword, PeekingReader reader) throws IOException {
@@ -116,7 +116,7 @@ protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token
             return;
         }
         else if ("BEGIN".equals(keywordText)
-               || (CONTROL_FLOW_KEYWORDS.contains(keywordText) && !containsWithinLast(1, tokens, parensDepth, "END"))) {
+               || (CONTROL_FLOW_KEYWORDS.contains(keywordText) && !lastTokenIs(tokens, parensDepth, "END"))) {
             context.increaseBlockDepth();
         } else if ("END".equals(keywordText)
                 || doTokensMatchPattern(tokens, keyword, CREATE_IF_NOT_EXISTS)

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -435,10 +435,9 @@ public boolean accept(File dir, String name) {
     /* private -> for testing */
     static void loadConfigurationFromConfigFiles(Map<String, String> config, CommandLineArguments commandLineArguments, Map<String, String> envVars) {
         String encoding = determineConfigurationFileEncoding(commandLineArguments, envVars);
+        File installationDir = new File(getInstallationDir());
 
-        config.putAll(ConfigUtils.loadConfigurationFile(new File(getInstallationDir() + "/conf/" + ConfigUtils.CONFIG_FILE_NAME), encoding, false));
-        config.putAll(ConfigUtils.loadConfigurationFile(new File(System.getProperty("user.home") + "/" + ConfigUtils.CONFIG_FILE_NAME), encoding, false));
-        config.putAll(ConfigUtils.loadConfigurationFile(new File(ConfigUtils.CONFIG_FILE_NAME), encoding, false));
+        config.putAll(ConfigUtils.loadDefaultConfigurationFiles(installationDir, encoding));
 
         for (File configFile : determineConfigFilesFromArgs(commandLineArguments, envVars)) {
             config.putAll(ConfigUtils.loadConfigurationFile(configFile, encoding, true));

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -512,7 +512,7 @@ private static boolean needsPassword(String url) {
     private static List<File> determineConfigFilesFromArgs(CommandLineArguments commandLineArguments, Map<String, String> envVars) {
         List<File> configFiles = new ArrayList<>();
 
-        String workingDirectory = commandLineArguments.isWorkingDirectorySet() ? commandLineArguments.getWorkingDirectory() : "";
+        String workingDirectory = commandLineArguments.isWorkingDirectorySet() ? commandLineArguments.getWorkingDirectory() : null;
 
         if (envVars.containsKey(ConfigUtils.CONFIG_FILES)) {
             for (String file : StringUtils.tokenizeToStringArray(envVars.get(ConfigUtils.CONFIG_FILES), ",")) {

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/ResolvedMigration.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Migration resolved through a MigrationResolver. Can be applied against a database.
  */
-public interface ResolvedMigration {
+public interface ResolvedMigration extends ChecksumMatcher {
     /**
      * @return The version of the database after applying this migration. {@code null} for repeatable migrations.
      */

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -26,7 +26,6 @@
 import org.flywaydb.core.internal.util.AbbreviationUtils;
 
 import java.util.Date;
-import java.util.Objects;
 
 /**
  * Default implementation of MigrationInfo.
@@ -195,7 +194,7 @@ public MigrationState getState() {
 
         if (appliedMigration.getVersion() == null) {
             if (appliedMigration.getInstalledRank() == context.latestRepeatableRuns.get(appliedMigration.getDescription())) {
-                if (Objects.equals(appliedMigration.getChecksum(), resolvedMigration.getChecksum())) {
+                if (resolvedMigration.checksumMatches(appliedMigration.getChecksum())) {
                     return MigrationState.SUCCESS;
                 }
                 return MigrationState.OUTDATED;
@@ -315,7 +314,7 @@ public String validate() {
                 }
                 if (resolvedMigration.getVersion() != null
                         || (context.pending && MigrationState.OUTDATED != state && MigrationState.SUPERSEDED != state)) {
-                    if (!Objects.equals(resolvedMigration.getChecksum(), appliedMigration.getChecksum())) {
+                    if (!resolvedMigration.checksumMatches(appliedMigration.getChecksum())) {
                         return createMismatchMessage("checksum", migrationIdentifier,
                                 appliedMigration.getChecksum(), resolvedMigration.getChecksum());
                     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoServiceImpl.java
Patch:
@@ -240,7 +240,7 @@ public void refresh() {
             ResolvedMigration resolvedMigration = resolvedRepeatable.get(appliedRepeatableMigration.getDescription());
             int latestRank = context.latestRepeatableRuns.get(appliedRepeatableMigration.getDescription());
             if (resolvedMigration != null && appliedRepeatableMigration.getInstalledRank() == latestRank
-                    && Objects.equals(appliedRepeatableMigration.getChecksum(), resolvedMigration.getChecksum())) {
+                    && resolvedMigration.checksumMatches(appliedRepeatableMigration.getChecksum())) {
                 pendingResolvedRepeatable.remove(resolvedMigration);
             }
             migrationInfos1.add(new MigrationInfoImpl(resolvedMigration, appliedRepeatableMigration, context, false

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/java/ResolvedJavaMigration.java
Patch:
@@ -34,6 +34,7 @@ public ResolvedJavaMigration(JavaMigration javaMigration) {
                 javaMigration.getDescription(),
                 javaMigration.getClass().getName(),
                 javaMigration.getChecksum(),
+                null,
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/DefaultCallbackExecutor.java
Patch:
@@ -26,7 +26,7 @@
 import org.flywaydb.core.internal.database.base.Connection;
 import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.database.base.Schema;
-import org.flywaydb.core.internal.jdbc.TransactionTemplate;
+import org.flywaydb.core.internal.jdbc.ExecutionTemplateFactory;
 
 import java.util.Collection;
 import java.util.List;
@@ -101,7 +101,8 @@ private void execute(final Event event, final Connection connection) {
         for (final Callback callback : callbacks) {
             if (callback.supports(event, context)) {
                 if (callback.canHandleInTransaction(event, context)) {
-                    TransactionTemplate.createTransactionTemplate(connection.getJdbcConnection()).execute(new Callable<Void>() {
+                    ExecutionTemplateFactory.createExecutionTemplate(connection.getJdbcConnection(),
+                            database).execute(new Callable<Void>() {
                         @Override
                         public Void call() {
                             DefaultCallbackExecutor.this.execute(connection, callback, event, context);

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -33,7 +33,7 @@
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.info.MigrationInfoImpl;
 import org.flywaydb.core.internal.info.MigrationInfoServiceImpl;
-import org.flywaydb.core.internal.jdbc.TransactionTemplate;
+import org.flywaydb.core.internal.jdbc.ExecutionTemplateFactory;
 import org.flywaydb.core.internal.schemahistory.SchemaHistory;
 import org.flywaydb.core.internal.util.ExceptionUtils;
 import org.flywaydb.core.internal.util.StopWatch;
@@ -276,7 +276,7 @@ private void applyMigrations(final LinkedHashMap<MigrationInfoImpl, Boolean> gro
         final StopWatch stopWatch = new StopWatch();
         try {
             if (executeGroupInTransaction) {
-                TransactionTemplate.createTransactionTemplate(connectionUserObjects.getJdbcConnection()).execute(new Callable<Object>() {
+                ExecutionTemplateFactory.createExecutionTemplate(connectionUserObjects.getJdbcConnection(), database).execute(new Callable<Object>() {
                     @Override
                     public Object call() {
                         doMigrateGroup(group, stopWatch);

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -30,11 +30,11 @@
 import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.info.MigrationInfoImpl;
 import org.flywaydb.core.internal.info.MigrationInfoServiceImpl;
+import org.flywaydb.core.internal.jdbc.ExecutionTemplateFactory;
 import org.flywaydb.core.internal.schemahistory.AppliedMigration;
 import org.flywaydb.core.internal.schemahistory.SchemaHistory;
 import org.flywaydb.core.internal.util.StopWatch;
 import org.flywaydb.core.internal.util.TimeFormat;
-import org.flywaydb.core.internal.jdbc.TransactionTemplate;
 
 import java.util.Objects;
 import java.util.concurrent.Callable;
@@ -98,7 +98,7 @@ public void repair() {
             StopWatch stopWatch = new StopWatch();
             stopWatch.start();
 
-            boolean repaired = TransactionTemplate.createTransactionTemplate(connection.getJdbcConnection()).execute(new Callable<Boolean>() {
+            boolean repaired = ExecutionTemplateFactory.createExecutionTemplate(connection.getJdbcConnection(), database).execute(new Callable<Boolean>() {
                 public Boolean call() {
                     schemaHistory.removeFailedMigrations();
                     migrationInfoService.refresh();

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/JdbcTableSchemaHistory.java
Patch:
@@ -27,7 +27,7 @@
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.jdbc.RowMapper;
-import org.flywaydb.core.internal.jdbc.TransactionTemplate;
+import org.flywaydb.core.internal.jdbc.ExecutionTemplateFactory;
 import org.flywaydb.core.internal.sqlscript.SqlScriptExecutorFactory;
 import org.flywaydb.core.internal.sqlscript.SqlScriptFactory;
 
@@ -103,7 +103,8 @@ public Object call() {
                         LOG.info("Creating Schema History table " + table + (baseline ? " with baseline" : "") + " ...");
                     }
                     try {
-                        TransactionTemplate.createTransactionTemplate(connection.getJdbcConnection(), true).execute(new Callable<Object>() {
+                        ExecutionTemplateFactory.createExecutionTemplate(connection.getJdbcConnection(),
+                                database).execute(new Callable<Object>() {
                             @Override
                             public Object call() {
                                 sqlScriptExecutorFactory.createSqlScriptExecutor(connection.getJdbcConnection()

File: flyway-core/src/main/java/org/flywaydb/core/internal/output/InfoOutput.java
Patch:
@@ -18,18 +18,18 @@
 import java.util.List;
 
 public class InfoOutput {
-    public String productVersion;
+    public String flywayVersion;
     public String database;
     public String schemaVersion;
     public String schemaName;
     public List<MigrationOutput> migrations;
 
-    public InfoOutput(String productVersion,
+    public InfoOutput(String flywayVersion,
                       String database,
                       String schemaVersion,
                       String schemaName,
                       List<MigrationOutput> migrations) {
-        this.productVersion = productVersion;
+        this.flywayVersion = flywayVersion;
         this.database = database;
         this.schemaVersion = schemaVersion;
         this.schemaName = schemaName;

File: flyway-core/src/main/java/org/flywaydb/core/internal/output/InfoOutputFactory.java
Patch:
@@ -19,6 +19,7 @@
 import org.flywaydb.core.api.MigrationState;
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.api.configuration.Configuration;
+import org.flywaydb.core.internal.license.VersionPrinter;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -43,9 +44,10 @@ public InfoOutput create(Configuration configuration, MigrationInfo[] migrationI
         MigrationVersion currentSchemaVersion = current == null ? MigrationVersion.EMPTY : current.getVersion();
         MigrationVersion schemaVersionToOutput = currentSchemaVersion == null ? MigrationVersion.EMPTY : currentSchemaVersion;
         String schemaVersion =  schemaVersionToOutput.getVersion();
+        String flywayVersion = VersionPrinter.getVersion();
 
         return new InfoOutput(
-                schemaVersion,
+                flywayVersion,
                 databaseName,
                 schemaVersion,
                 join(", ", configuration.getSchemas()),

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Parser.java
Patch:
@@ -30,7 +30,7 @@ public DB2Parser(Configuration configuration, ParsingContext parsingContext) {
     }
 
     @Override
-    protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword) {
+    protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword, PeekingReader reader) throws IOException {
         boolean previousTokenIsKeyword = !tokens.isEmpty() && tokens.get(tokens.size() - 1).getType() == TokenType.KEYWORD;
 
         int lastKeywordIndex = getLastKeywordIndex(tokens);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleParser.java
Patch:
@@ -413,7 +413,7 @@ protected boolean shouldAdjustBlockDepth(ParserContext context, Token token) {
     private static final List<String> CONTROL_FLOW_KEYWORDS = Arrays.asList("IF", "LOOP", "CASE");
 
     @Override
-    protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword) {
+    protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword, PeekingReader reader) throws IOException {
         String keywordText = keyword.getText();
 
         // In embedded Java code we judge the end of a class definition by the depth of braces.

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -200,7 +200,7 @@ private SqlStatement getNextStatement(Resource resource, PeekingReader reader, R
                     if (tokenType == TokenType.KEYWORD) {
                         keywords.add(token);
                     }
-                    adjustBlockDepth(context, tokens, token);
+                    adjustBlockDepth(context, tokens, token, reader);
                 }
 
 
@@ -327,7 +327,7 @@ protected int getTransactionalDetectionCutoff() {
         return 10;
     }
 
-    protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword) {
+    protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword, PeekingReader reader) throws IOException {
     }
 
     protected static int getLastKeywordIndex(List<Token> tokens) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/output/InfoOutputFactory.java
Patch:
@@ -42,11 +42,12 @@ public InfoOutput create(Configuration configuration, MigrationInfo[] migrationI
 
         MigrationVersion currentSchemaVersion = current == null ? MigrationVersion.EMPTY : current.getVersion();
         MigrationVersion schemaVersionToOutput = currentSchemaVersion == null ? MigrationVersion.EMPTY : currentSchemaVersion;
+        String schemaVersion =  schemaVersionToOutput.getVersion();
 
         return new InfoOutput(
-                schemaVersionToOutput.getVersion(),
+                schemaVersion,
                 databaseName,
-                currentSchemaVersion.getVersion(),
+                schemaVersion,
                 join(", ", configuration.getSchemas()),
                 migrationOutputs);
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerParser.java
Patch:
@@ -52,9 +52,9 @@ protected boolean isDelimiter(String peek, ParserContext context, int col) {
     }
 
     @Override
-    protected String readKeyword(PeekingReader reader, Delimiter delimiter) throws IOException {
+    protected String readKeyword(PeekingReader reader, Delimiter delimiter, ParserContext context) throws IOException {
         // #2414: Ignore delimiter as GO (unlike ;) can be part of a regular keyword
-        return "" + (char) reader.read() + reader.readKeywordPart(null);
+        return "" + (char) reader.read() + reader.readKeywordPart(null, context);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEParser.java
Patch:
@@ -42,8 +42,8 @@ protected boolean isDelimiter(String peek, ParserContext context, int col) {
     }
 
     @Override
-    protected String readKeyword(PeekingReader reader, Delimiter delimiter) throws IOException {
+    protected String readKeyword(PeekingReader reader, Delimiter delimiter, ParserContext context) throws IOException {
         // #2414: Ignore delimiter as GO (unlike ;) can be part of a regular keyword
-        return "" + (char) reader.read() + reader.readKeywordPart(null);
+        return "" + (char) reader.read() + reader.readKeywordPart(null, context);
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleParser.java
Patch:
@@ -49,14 +49,14 @@ public class OracleParser extends Parser {
 
 
     private static final Pattern PLSQL_PACKAGE_BODY_REGEX = Pattern.compile(
-            "^CREATE(\\sOR\\sREPLACE)?(\\s(NON)?EDITIONABLE)?\\sPACKAGE\\sBODY\\s.*\\s(IS|AS)");
+            "^CREATE(\\sOR\\sREPLACE)?(\\s(NON)?EDITIONABLE)?\\sPACKAGE\\sBODY\\s([^\\s]*\\s)?(IS|AS)");
     private static final StatementType PLSQL_PACKAGE_BODY_STATEMENT = new StatementType();
 
     private static final Pattern PLSQL_PACKAGE_DEFINITION_REGEX = Pattern.compile(
-            "^CREATE(\\sOR\\sREPLACE)?(\\s(NON)?EDITIONABLE)?\\sPACKAGE\\s.*\\s(IS|AS)");
+            "^CREATE(\\sOR\\sREPLACE)?(\\s(NON)?EDITIONABLE)?\\sPACKAGE\\s([^\\s]*\\s)?(IS|AS)");
 
     private static final Pattern PLSQL_VIEW_REGEX = Pattern.compile(
-            "^CREATE(\\sOR\\sREPLACE)?(\\s(NON)?EDITIONABLE)?\\sVIEW\\s.*\\sAS\\sWITH\\s(PROCEDURE|FUNCTION)");
+            "^CREATE(\\sOR\\sREPLACE)?(\\s(NON)?EDITIONABLE)?\\sVIEW\\s([^\\s]*\\s)?AS\\sWITH\\s(PROCEDURE|FUNCTION)");
     private static final StatementType PLSQL_VIEW_STATEMENT = new StatementType();
 
     private static final Pattern PLSQL_REGEX = Pattern.compile(

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBDatabase.java
Patch:
@@ -110,7 +110,7 @@ public String getDbName() {
 
     @Override
     protected String doGetCurrentUser() throws SQLException {
-        return getMainConnection().getJdbcTemplate().queryForString("(SELECT * FROM [SHOW SESSION_USER])");
+        return getMainConnection().getJdbcTemplate().queryForString("SELECT * FROM [SHOW SESSION_USER]");
     }
 
     public boolean supportsDdlTransactions() {

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -580,10 +580,7 @@ private Pair<Schema, List<Schema>> prepareSchemas(Database database) {
             }
         }
 
-        // This behaviour will change in Flyway 7.
         if (defaultSchemaName == null && schemaNames.length > 0) {
-            LOG.warn("Using the first specified schema " + schemaNames[0] + " as default schema. From Flyway 6.1 you " +
-                    "can specify defaultSchema explicitly in your configuration, and from Flyway 7 this will become mandatory.");
             defaultSchemaName = schemaNames[0];
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -151,6 +151,9 @@ private static String convertKey(String key) {
         if ("FLYWAY_CONNECT_RETRIES".equals(key)) {
             return CONNECT_RETRIES;
         }
+        if ("FLYWAY_DEFAULT_SCHEMA".equals(key)) {
+            return DEFAULT_SCHEMA;
+        }
         if ("FLYWAY_DRIVER".equals(key)) {
             return DRIVER;
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLAdvisoryLockTemplate.java
Patch:
@@ -109,7 +109,7 @@ private boolean tryLock() throws SQLException {
                 new RowMapper<Boolean>() {
                     @Override
                     public Boolean mapRow(ResultSet rs) throws SQLException {
-                        return "t".equals(rs.getString("pg_try_advisory_lock"));
+                        return rs.getBoolean(1);
                     }
                 });
         return results.size() == 1 && results.get(0);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLAdvisoryLockTemplate.java
Patch:
@@ -109,7 +109,7 @@ private boolean tryLock() throws SQLException {
                 new RowMapper<Boolean>() {
                     @Override
                     public Boolean mapRow(ResultSet rs) throws SQLException {
-                        return rs.getBoolean(0);
+                        return rs.getBoolean(1);
                     }
                 });
         return results.size() == 1 && results.get(0);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLAdvisoryLockTemplate.java
Patch:
@@ -109,7 +109,7 @@ private boolean tryLock() throws SQLException {
                 new RowMapper<Boolean>() {
                     @Override
                     public Boolean mapRow(ResultSet rs) throws SQLException {
-                        return "t".equals(rs.getString("pg_try_advisory_lock"));
+                        return rs.getBoolean(0);
                     }
                 });
         return results.size() == 1 && results.get(0);

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/SchemaHistory.java
Patch:
@@ -30,6 +30,8 @@
  * The schema history used to track all applied migrations.
  */
 public abstract class SchemaHistory {
+    public static final String NO_DESCRIPTION_MARKER = "<< no description >>";
+
     /**
      * The schema history table used by Flyway.
      * Non-final due to the table name fallback mechanism. Will be made final in Flyway 6.0.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -305,6 +305,7 @@ private static void printUsage() {
         LOG.info("callbacks                    : Comma-separated list of FlywayCallback classes");
         LOG.info("skipDefaultCallbacks         : Skips default callbacks (sql)");
         LOG.info("validateOnMigrate            : Validate when running migrate");
+        LOG.info("validateMigrationNaming      : Validate file names of SQL migrations (including callbacks)");
         LOG.info("ignoreMissingMigrations      : Allow missing migrations when validating");
         LOG.info("ignoreIgnoredMigrations      : Allow ignored migrations when validating");
         LOG.info("ignorePendingMigrations      : Allow pending migrations when validating");

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -85,6 +85,7 @@ public class ConfigUtils {
     public static final String URL = "flyway.url";
     public static final String USER = "flyway.user";
     public static final String VALIDATE_ON_MIGRATE = "flyway.validateOnMigrate";
+    public static final String VALIDATE_MIGRATION_NAMING = "flyway.validateMigrationNaming";
 
     // Oracle-specific
     public static final String ORACLE_SQLPLUS = "flyway.oracle.sqlplus";

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/MigrationInfoHelper.java
Patch:
@@ -46,6 +46,7 @@ private MigrationInfoHelper() {
     public static Pair<MigrationVersion, String> extractVersionAndDescription(String migrationName,
                                                                               String prefix, String separator,
                                                                               String[] suffixes, boolean repeatable) {
+        // Only handles Java migrations now
         String cleanMigrationName = cleanMigrationName(migrationName, prefix, suffixes);
 
         int separatorPos = cleanMigrationName.indexOf(separator);

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/NoopResourceProvider.java
Patch:
@@ -30,7 +30,7 @@ public LoadableResource getResource(String name) {
     }
 
     /**
-     * Retrieve all resources whose name begins with this prefix and ends with either of these suffixes.
+     * Retrieve all resources whose name begins with this prefix and ends with any of these suffixes.
      *
      * @param prefix   The prefix.
      * @param suffixes The suffixes.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/ResourceProvider.java
Patch:
@@ -30,7 +30,7 @@ public interface ResourceProvider {
     LoadableResource getResource(String name);
 
     /**
-     * Retrieve all resources whose name begins with this prefix and ends with either of these suffixes.
+     * Retrieve all resources whose name begins with this prefix and ends with any of these suffixes.
      *
      * @param prefix   The prefix.
      * @param suffixes The suffixes.

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -101,8 +101,8 @@ public final SqlStatementIterator parse(final LoadableResource resource) {
         PeekingReader peekingReader =
                 new PeekingReader(
                         new RecordingReader(recorder,
-                                replacePlaceholders(
-                                        new PositionTrackingReader(tracker,
+                                new PositionTrackingReader(tracker,
+                                        replacePlaceholders(
                                                 new BomStrippingReader(
                                                         new BufferedReader(resource.read(), 4096))))));
 

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -173,7 +173,7 @@ public Integer execute(MigrationResolver migrationResolver,
                             if (!schemaHistory.exists()) {
                                 throw new FlywayException("Found non-empty schema(s) "
                                         + StringUtils.collectionToCommaDelimitedString(nonEmptySchemas)
-                                        + " without schema history table! Use baseline()"
+                                        + " but no schema history table. Use baseline()"
                                         + " or set baselineOnMigrate to true to initialize the schema history table.");
                             }
                         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -261,6 +261,7 @@ private SqlStatement getNextStatement(Resource resource, PeekingReader reader, R
                             statementType = StatementType.GENERIC;
                         } else {
                             statementType = detectStatementType(simplifiedStatement);
+                            context.setStatementType(statementType);
                         }
                         adjustDelimiter(context, statementType);
                     }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/FileLogCreator.java
Patch:
@@ -43,14 +43,14 @@ public FileLogCreator(Level level, String filePath) {
         this.level = level;
         this.path = Paths.get(filePath);
 
-        prepareLogFile(path);
+        prepareOutputFile(path);
     }
 
     public Log createLogger(Class<?> clazz) {
         return new FileLog(path, level);
     }
 
-    private static void prepareLogFile(Path path) {
+    private static void prepareOutputFile(Path path) {
         try {
             Files.write(path, "".getBytes(), StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE);
         } catch(IOException exception) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLParser.java
Patch:
@@ -52,10 +52,10 @@ protected char getAlternativeStringLiteralQuote() {
     }
 
     @Override
-    protected boolean isSingleLineComment(String peek, ParserContext context) {
-        return (super.isSingleLineComment(peek, context)
+    protected boolean isSingleLineComment(String peek, ParserContext context, int col) {
+        return (super.isSingleLineComment(peek, context, col)
                 // Normally MySQL treats # as a comment, but this may have been overridden by DELIMITER # directive
-                || (peek.charAt(0) == ALTERNATIVE_SINGLE_LINE_COMMENT && !isDelimiter(peek, context)));
+                || (peek.charAt(0) == ALTERNATIVE_SINGLE_LINE_COMMENT && !isDelimiter(peek, context, col)));
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerParser.java
Patch:
@@ -44,7 +44,7 @@ protected Delimiter getDefaultDelimiter() {
     }
 
     @Override
-    protected boolean isDelimiter(String peek, ParserContext context) {
+    protected boolean isDelimiter(String peek, ParserContext context, int col) {
         return peek.length() >= 2
                 && (peek.charAt(0) == 'G' || peek.charAt(0) == 'g')
                 && (peek.charAt(1) == 'O' || peek.charAt(1) == 'o')

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEParser.java
Patch:
@@ -35,7 +35,7 @@ protected Delimiter getDefaultDelimiter() {
     }
 
     @Override
-    protected boolean isDelimiter(String peek, ParserContext context) {
+    protected boolean isDelimiter(String peek, ParserContext context, int col) {
         return peek.length() == 2
                 && (peek.charAt(0) == 'G' || peek.charAt(0) == 'g')
                 && (peek.charAt(1) == 'O' || peek.charAt(1) == 'o');

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabase.java
Patch:
@@ -209,13 +209,13 @@ protected MigrationVersion determineVersion() {
 
     /*
      * Azure Database for MySQL reports version numbers incorrectly - it claims to be 5.6 (the gateway
-     * version) while the db itself is 5.7, visible from SELECT VERSION(). We work around this specific case.
-     * This code should be simplified as soon as Azure is fixed.
+     * version) while the db itself is 5.7 or greater, visible from SELECT VERSION(). We work around this specific
+     * case. This code should be simplified as soon as Azure is fixed.
      * https://docs.microsoft.com/en-us/azure/mysql/concepts-limits#current-known-issues
      * A similar issue applies to Percona, except there the metadata claims to be 5.5.
      */
     static MigrationVersion correctForMySQLWithBadMetadata(MigrationVersion jdbcMetadataVersion, String selectVersionOutput) {
-        if (selectVersionOutput.startsWith("5.7") && jdbcMetadataVersion.toString().compareTo("5.7") < 0) {
+        if (selectVersionOutput.compareTo("5.7") >= 0 && jdbcMetadataVersion.toString().compareTo("5.7") < 0) {
             LOG.debug("MySQL-based database - reporting v" + jdbcMetadataVersion.toString() +" in JDBC metadata but database actually v" + selectVersionOutput);
             return extractVersionFromString(MYSQL_VERSION_PATTERN, selectVersionOutput);
         }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/ColorizedConsoleLog.java
Patch:
@@ -26,13 +26,13 @@
  * Wrapper which adds color to a Console output.
  */
 class ColorizedConsoleLog implements Log {
-    private final PrintStreamLog log;
+    private final ConsoleLog log;
 
     public static void install() {
         AnsiConsole.systemInstall();
     }
 
-    public ColorizedConsoleLog(PrintStreamLog log) {
+    public ColorizedConsoleLog(ConsoleLog log) {
         this.log = log;
     }
 

File: flyway-commandline/src/main/java/org/flywaydb/commandline/CommandLineArguments.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.commandline;
 
-import org.flywaydb.commandline.PrintStreamLog.Level;
+import org.flywaydb.commandline.ConsoleLog.Level;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.util.StringUtils;
 

File: flyway-commandline/src/main/java/org/flywaydb/commandline/ConsoleLogCreator.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.commandline;
 
-import org.flywaydb.commandline.PrintStreamLog.Level;
+import org.flywaydb.commandline.ConsoleLog.Level;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogCreator;
 
@@ -35,7 +35,7 @@ public ConsoleLogCreator(Level level) {
     }
 
     public Log createLogger(Class<?> clazz) {
-        PrintStreamLog log = new PrintStreamLog(level, System.out, System.err);
+        ConsoleLog log = new ConsoleLog(level);
 
         // We don't want colorized output when there's no console (for example, in a redirect)
         if (System.console() == null) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEParser.java
Patch:
@@ -16,6 +16,7 @@
 package org.flywaydb.core.internal.database.sybasease;
 
 import org.flywaydb.core.api.configuration.Configuration;
+import org.flywaydb.core.internal.parser.ParserContext;
 import org.flywaydb.core.internal.parser.ParsingContext;
 import org.flywaydb.core.internal.parser.Parser;
 import org.flywaydb.core.internal.parser.PeekingReader;
@@ -34,7 +35,7 @@ protected Delimiter getDefaultDelimiter() {
     }
 
     @Override
-    protected boolean isDelimiter(String peek, Delimiter delimiter) {
+    protected boolean isDelimiter(String peek, ParserContext context) {
         return peek.length() == 2
                 && (peek.charAt(0) == 'G' || peek.charAt(0) == 'g')
                 && (peek.charAt(1) == 'O' || peek.charAt(1) == 'o');

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -465,7 +465,7 @@ private Token readToken(PeekingReader reader, PositionTracker tracker, ParserCon
             reader.swallowUntilExcludingWithEscape('\'', true);
             return new Token(TokenType.STRING, pos, line, col, null, null, context.getParensDepth());
         }
-        if (isDelimiter(peek, context.getDelimiter())) {
+        if (isDelimiter(peek, context)) {
             return handleDelimiter(reader, context, pos, line, col);
         }
         if (c == '_' || Character.isLetter(c)) {
@@ -511,7 +511,8 @@ protected boolean isAlternativeStringLiteral(String peek) {
         return alternativeStringLiteralQuote != 0 && peek.charAt(0) == alternativeStringLiteralQuote;
     }
 
-    protected boolean isDelimiter(String peek, Delimiter delimiter) {
+    protected boolean isDelimiter(String peek, ParserContext context) {
+        Delimiter delimiter = context.getDelimiter();
         return peek.startsWith(delimiter.getDelimiter());
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -352,7 +352,7 @@ static String expandEnvironmentVariables(String value, Map<String, String> envir
                     : "";
 
             LOG.debug("Expanding environment variable in config: " + variableName + " -> " + variableValue);
-            expandedValue = expandedValue.replaceAll(Pattern.quote(matcher.group(0)), variableValue);
+            expandedValue = expandedValue.replaceAll(Pattern.quote(matcher.group(0)), Matcher.quoteReplacement(variableValue));
         }
 
         return expandedValue;

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -864,7 +864,7 @@ public void setInstalledBy(String installedBy) {
      * <p>Note that this is only applicable for PostgreSQL, Aurora PostgreSQL, SQL Server and SQLite which all have
      * statements that do not run at all within a transaction.</p>
      * <p>This is not to be confused with implicit transaction, as they occur in MySQL or Oracle, where even though a
-     * DDL statement was run within within a transaction, the database will issue an implicit commit before and after
+     * DDL statement was run within a transaction, the database will issue an implicit commit before and after
      * its execution.</p>
      *
      * @param mixed {@code true} if mixed migrations should be allowed. {@code false} if an error should be thrown instead. (default: {@code false})

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -75,7 +75,7 @@ public interface Configuration {
     String getBaselineDescription();
 
     /**
-     * Retrieves the The custom MigrationResolvers to be used in addition to the built-in ones for resolving Migrations to apply.
+     * Retrieves the custom MigrationResolvers to be used in addition to the built-in ones for resolving Migrations to apply.
      *
      * @return The custom MigrationResolvers to be used in addition to the built-in ones for resolving Migrations to apply. An empty array if none.
      * (default: none)
@@ -384,7 +384,7 @@ public interface Configuration {
      * <p>Note that this is only applicable for PostgreSQL, Aurora PostgreSQL, SQL Server and SQLite which all have
      * statements that do not run at all within a transaction.</p>
      * <p>This is not to be confused with implicit transaction, as they occur in MySQL or Oracle, where even though a
-     * DDL statement was run within within a transaction, the database will issue an implicit commit before and after
+     * DDL statement was run within a transaction, the database will issue an implicit commit before and after
      * its execution.</p>
      *
      * @return {@code true} if mixed migrations should be allowed. {@code false} if an error should be thrown instead. (default: {@code false})

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -387,7 +387,7 @@ public FluentConfiguration installedBy(String installedBy) {
      * <p>Note that this is only applicable for PostgreSQL, Aurora PostgreSQL, SQL Server and SQLite which all have
      * statements that do not run at all within a transaction.</p>
      * <p>This is not to be confused with implicit transaction, as they occur in MySQL or Oracle, where even though a
-     * DDL statement was run within within a transaction, the database will issue an implicit commit before and after
+     * DDL statement was run within a transaction, the database will issue an implicit commit before and after
      * its execution.</p>
      *
      * @param mixed {@code true} if mixed migrations should be allowed. {@code false} if an error should be thrown instead. (default: {@code false})

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSchema.java
Patch:
@@ -233,7 +233,7 @@ private void disableFlashbackArchiveForFbaTrackedTables() throws SQLException {
      * Checks whether Oracle Locator metadata exists for the schema.
      *
      * @return {@code true} if it exists, {@code false} if not.
-     * @throws SQLException when checking checking metadata existence failed.
+     * @throws SQLException when checking metadata existence failed.
      */
     private boolean locatorMetadataExists() throws SQLException {
         return database.queryReturnsRows("SELECT * FROM ALL_SDO_GEOM_METADATA WHERE OWNER = ?", name);

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayExtension.java
Patch:
@@ -330,7 +330,7 @@ public class FlywayExtension {
      * <p>Note that this is only applicable for PostgreSQL, Aurora PostgreSQL, SQL Server and SQLite which all have
      * statements that do not run at all within a transaction.</p>
      * <p>This is not to be confused with implicit transaction, as they occur in MySQL or Oracle, where even though a
-     * DDL statement was run within within a transaction, the database will issue an implicit commit before and after
+     * DDL statement was run within a transaction, the database will issue an implicit commit before and after
      * its execution.</p>
      * <p>{@code true} if mixed migrations should be allowed. {@code false} if an error should be thrown instead. (default: {@code false})</p>
      */

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -375,7 +375,7 @@ public abstract class AbstractFlywayTask extends DefaultTask {
      * <p>Note that this is only applicable for PostgreSQL, Aurora PostgreSQL, SQL Server and SQLite which all have
      * statements that do not run at all within a transaction.</p>
      * <p>This is not to be confused with implicit transaction, as they occur in MySQL or Oracle, where even though a
-     * DDL statement was run within within a transaction, the database will issue an implicit commit before and after
+     * DDL statement was run within a transaction, the database will issue an implicit commit before and after
      * its execution.</p>
      * <p>{@code true} if mixed migrations should be allowed. {@code false} if an error should be thrown instead. (default: {@code false})</p>
      */

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -444,7 +444,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      * <p>Note that this is only applicable for PostgreSQL, Aurora PostgreSQL, SQL Server and SQLite which all have
      * statements that do not run at all within a transaction.</p>
      * <p>This is not to be confused with implicit transaction, as they occur in MySQL or Oracle, where even though a
-     * DDL statement was run within within a transaction, the database will issue an implicit commit before and after
+     * DDL statement was run within a transaction, the database will issue an implicit commit before and after
      * its execution.</p>
      * {@code true} if mixed migrations should be allowed. {@code false} if an error should be thrown instead. (default: {@code false})
      * <p>Also configurable with Maven or System Property: ${flyway.mixed}</p>

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -864,7 +864,7 @@ public void setInstalledBy(String installedBy) {
      * <p>Note that this is only applicable for PostgreSQL, Aurora PostgreSQL, SQL Server and SQLite which all have
      * statements that do not run at all within a transaction.</p>
      * <p>This is not to be confused with implicit transaction, as they occur in MySQL or Oracle, where even though a
-     * DDL statement was run within within a transaction, the database will issue an implicit commit before and after
+     * DDL statement was run within a transaction, the database will issue an implicit commit before and after
      * its execution.</p>
      *
      * @param mixed {@code true} if mixed migrations should be allowed. {@code false} if an error should be thrown instead. (default: {@code false})

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -75,7 +75,7 @@ public interface Configuration {
     String getBaselineDescription();
 
     /**
-     * Retrieves the The custom MigrationResolvers to be used in addition to the built-in ones for resolving Migrations to apply.
+     * Retrieves the custom MigrationResolvers to be used in addition to the built-in ones for resolving Migrations to apply.
      *
      * @return The custom MigrationResolvers to be used in addition to the built-in ones for resolving Migrations to apply. An empty array if none.
      * (default: none)
@@ -384,7 +384,7 @@ public interface Configuration {
      * <p>Note that this is only applicable for PostgreSQL, Aurora PostgreSQL, SQL Server and SQLite which all have
      * statements that do not run at all within a transaction.</p>
      * <p>This is not to be confused with implicit transaction, as they occur in MySQL or Oracle, where even though a
-     * DDL statement was run within within a transaction, the database will issue an implicit commit before and after
+     * DDL statement was run within a transaction, the database will issue an implicit commit before and after
      * its execution.</p>
      *
      * @return {@code true} if mixed migrations should be allowed. {@code false} if an error should be thrown instead. (default: {@code false})

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -387,7 +387,7 @@ public FluentConfiguration installedBy(String installedBy) {
      * <p>Note that this is only applicable for PostgreSQL, Aurora PostgreSQL, SQL Server and SQLite which all have
      * statements that do not run at all within a transaction.</p>
      * <p>This is not to be confused with implicit transaction, as they occur in MySQL or Oracle, where even though a
-     * DDL statement was run within within a transaction, the database will issue an implicit commit before and after
+     * DDL statement was run within a transaction, the database will issue an implicit commit before and after
      * its execution.</p>
      *
      * @param mixed {@code true} if mixed migrations should be allowed. {@code false} if an error should be thrown instead. (default: {@code false})

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSchema.java
Patch:
@@ -233,7 +233,7 @@ private void disableFlashbackArchiveForFbaTrackedTables() throws SQLException {
      * Checks whether Oracle Locator metadata exists for the schema.
      *
      * @return {@code true} if it exists, {@code false} if not.
-     * @throws SQLException when checking checking metadata existence failed.
+     * @throws SQLException when checking metadata existence failed.
      */
     private boolean locatorMetadataExists() throws SQLException {
         return database.queryReturnsRows("SELECT * FROM ALL_SDO_GEOM_METADATA WHERE OWNER = ?", name);

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayExtension.java
Patch:
@@ -330,7 +330,7 @@ public class FlywayExtension {
      * <p>Note that this is only applicable for PostgreSQL, Aurora PostgreSQL, SQL Server and SQLite which all have
      * statements that do not run at all within a transaction.</p>
      * <p>This is not to be confused with implicit transaction, as they occur in MySQL or Oracle, where even though a
-     * DDL statement was run within within a transaction, the database will issue an implicit commit before and after
+     * DDL statement was run within a transaction, the database will issue an implicit commit before and after
      * its execution.</p>
      * <p>{@code true} if mixed migrations should be allowed. {@code false} if an error should be thrown instead. (default: {@code false})</p>
      */

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -375,7 +375,7 @@ public abstract class AbstractFlywayTask extends DefaultTask {
      * <p>Note that this is only applicable for PostgreSQL, Aurora PostgreSQL, SQL Server and SQLite which all have
      * statements that do not run at all within a transaction.</p>
      * <p>This is not to be confused with implicit transaction, as they occur in MySQL or Oracle, where even though a
-     * DDL statement was run within within a transaction, the database will issue an implicit commit before and after
+     * DDL statement was run within a transaction, the database will issue an implicit commit before and after
      * its execution.</p>
      * <p>{@code true} if mixed migrations should be allowed. {@code false} if an error should be thrown instead. (default: {@code false})</p>
      */

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -444,7 +444,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      * <p>Note that this is only applicable for PostgreSQL, Aurora PostgreSQL, SQL Server and SQLite which all have
      * statements that do not run at all within a transaction.</p>
      * <p>This is not to be confused with implicit transaction, as they occur in MySQL or Oracle, where even though a
-     * DDL statement was run within within a transaction, the database will issue an implicit commit before and after
+     * DDL statement was run within a transaction, the database will issue an implicit commit before and after
      * its execution.</p>
      * {@code true} if mixed migrations should be allowed. {@code false} if an error should be thrown instead. (default: {@code false})
      * <p>Also configurable with Maven or System Property: ${flyway.mixed}</p>

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -51,6 +51,7 @@ public class ConfigUtils {
     public static final String CLEAN_DISABLED = "flyway.cleanDisabled";
     public static final String CLEAN_ON_VALIDATION_ERROR = "flyway.cleanOnValidationError";
     public static final String CONNECT_RETRIES = "flyway.connectRetries";
+    public static final String DEFAULT_SCHEMA = "flyway.defaultSchema";
     public static final String DRIVER = "flyway.driver";
     public static final String DRYRUN_OUTPUT = "flyway.dryRunOutput";
     public static final String ENCODING = "flyway.encoding";

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseFactory.java
Patch:
@@ -110,9 +110,10 @@ public static Database createDatabase(Configuration configuration, boolean print
 
         );
 
-        if (!database.supportsChangingCurrentSchema() && configuration.getSchemas().length > 0) {
+        String intendedCurrentSchema = configuration.getDefaultSchema();
+        if (!database.supportsChangingCurrentSchema() && intendedCurrentSchema != null) {
             LOG.warn(databaseProductName + " does not support setting the schema for the current session. " +
-                    "Default schema will NOT be changed to " + configuration.getSchemas()[0] + " !");
+                    "Default schema will NOT be changed to " + intendedCurrentSchema + " !");
         }
 
         return database;

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -745,7 +745,7 @@ private List<File> determineConfigFiles(Map<String, String> envVars) {
         }
 
         if (getProject().getProperties().containsKey(ConfigUtils.CONFIG_FILES)) {
-            for (String file : StringUtils.tokenizeToStringArray(System.getProperties().getProperty(ConfigUtils.CONFIG_FILES), ",")) {
+            for (String file : StringUtils.tokenizeToStringArray(String.valueOf(getProject().getProperties().get(ConfigUtils.CONFIG_FILES)), ",")) {
                 configFiles.add(toFile(file));
             }
             return configFiles;
@@ -828,4 +828,4 @@ private String collectMessages(Throwable throwable, String message) {
     private boolean isJavaProject() {
         return getProject().getPluginManager().hasPlugin("java");
     }
-}
\ No newline at end of file
+}

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -332,6 +332,7 @@ static String expandEnvironmentVariables(String value, Map<String, String> envir
                     ? environmentVariables.get(variableName)
                     : "";
 
+            LOG.debug("Expanding environment variable in config: " + variableName + " -> " + variableValue);
             expandedValue = expandedValue.replaceAll(Pattern.quote(matcher.group(0)), variableValue);
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Database.java
Patch:
@@ -124,8 +124,8 @@ public final void ensureSupported() {
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("1.4", org.flywaydb.core.internal.license.Edition.ENTERPRISE);
 
-        recommendFlywayUpgradeIfNecessary("1.4.199");
-        supportsDropSchemaCascade = getVersion().isAtLeast("1.4.199");
+        recommendFlywayUpgradeIfNecessary("1.4.200");
+        supportsDropSchemaCascade = getVersion().isAtLeast("1.4.200");
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlScriptExecutor.java
Patch:
@@ -299,7 +299,6 @@ public OracleSqlScriptExecutor(JdbcTemplate jdbcTemplate
 
 
 
-
 
 
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywaySqlException.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.flywaydb.core.internal.exception;
 
+import org.flywaydb.core.api.ErrorCode;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.util.ExceptionUtils;
 import org.flywaydb.core.internal.util.StringUtils;
@@ -31,7 +32,7 @@ public class FlywaySqlException extends FlywayException {
      * @param sqlException Cause of the problem.
      */
     public FlywaySqlException(String message, SQLException sqlException) {
-        super(message, sqlException);
+        super(message, sqlException, ErrorCode.DB_CONNECTION);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/output/ErrorOutput.java
Patch:
@@ -18,7 +18,7 @@
 public class ErrorOutput {
     public ErrorOutputItem error;
 
-    public ErrorOutput(String message, String details) {
-        this.error = new ErrorOutputItem(message, details);
+    public ErrorOutput(String code, String message, String details) {
+        this.error = new ErrorOutputItem(code, message, details);
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/output/ErrorOutputItem.java
Patch:
@@ -16,10 +16,12 @@
 package org.flywaydb.core.internal.output;
 
 class ErrorOutputItem {
+    public String code;
     public String message;
     public String details;
 
-    ErrorOutputItem(String message, String details) {
+    ErrorOutputItem(String code, String message, String details) {
+        this.code = code;
         this.message = message;
         this.details = details;
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBParser.java
Patch:
@@ -48,7 +48,7 @@ protected Set<String> getValidKeywords() {
                 "FALSE", "FETCH", "FILTER", "FIRST_VALUE", "FLOAT", "FLOOR", "FOR", "FOREIGN", "FREE", "FROM", "FULL", "FUNCTION", "FUSION",
                 "GET", "GLOBAL", "GRANT", "GROUP", "GROUPING",
                 "HANDLER", "HAVING", "HOLD", "HOUR",
-                "IDENTITY", "IF", "IN", "INDICATOR", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INT", "INTEGER", "INTERSECT", "INTERSECTION", "INTERVAL", "INTO", "IS", "ITERATE",
+                "IDENTITY", "IF", "IN", "INDEX", "INDICATOR", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INT", "INTEGER", "INTERSECT", "INTERSECTION", "INTERVAL", "INTO", "IS", "ITERATE",
                 "JOIN",
                 "LAG",
                 "LANGUAGE", "LARGE", "LAST_VALUE", "LATERAL", "LEAD", "LEADING", "LEAVE", "LEFT", "LIKE", "LIKE_REGEX", "LN", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOOP", "LOWER",
@@ -57,10 +57,10 @@ protected Set<String> getValidKeywords() {
                 "OCCURRENCES_REGEX", "OCTET_LENGTH", "OF", "OFFSET", "OLD", "ON", "ONLY", "OPEN", "OR", "ORDER", "OUT", "OUTER", "OVER", "OVERLAPS", "OVERLAY",
                 "PARAMETER", "PARTITION", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "PERIOD", "POSITION", "POSITION_REGEX", "POWER", "PRECISION", "PREPARE", "PRIMARY", "PROCEDURE",
                 "RANGE", "RANK", "READS", "REAL", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", "REGR_SYY", "RELEASE", "REPEAT", "RESIGNAL", "RESULT", "RETURN", "RETURNS", "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROW_NUMBER", "ROWS",
-                "SAVEPOINT", "SCOPE", "SCROLL", "SEARCH", "SECOND", "SELECT", "SENSITIVE", "SESSION_USER", "SET", "SIGNAL", "SIMILAR", "SMALLINT", "SOME", "SPECIFIC", "SPECIFICTYPE", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQRT", "STACKED", "START", "STATIC", "STDDEV_POP", "STDDEV_SAMP", "SUBMULTISET", "SUBSTRING", "SUBSTRING_REGEX", "SUM", "SYMMETRIC", "SYSTEM", "SYSTEM_USER",
+                "SAVEPOINT", "SCHEMA", "SCOPE", "SCROLL", "SEARCH", "SECOND", "SELECT", "SENSITIVE", "SEQUENCE", "SESSION_USER", "SET", "SIGNAL", "SIMILAR", "SMALLINT", "SOME", "SPECIFIC", "SPECIFICTYPE", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQRT", "STACKED", "START", "STATIC", "STDDEV_POP", "STDDEV_SAMP", "SUBMULTISET", "SUBSTRING", "SUBSTRING_REGEX", "SUM", "SYMMETRIC", "SYSTEM", "SYSTEM_USER",
                 "TABLE", "TABLESAMPLE", "THEN", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TO", "TRAILING", "TRANSLATE", "TRANSLATE_REGEX", "TRANSLATION", "TREAT", "TRIGGER", "TRIM", "TRIM_ARRAY", "TRUE", "TRUNCATE",
                 "UESCAPE", "UNDO", "UNION", "UNIQUE", "UNKNOWN", "UNNEST", "UNTIL", "UPDATE", "UPPER", "USER", "USING",
-                "VALUE", "VALUES", "VAR_POP", "VAR_SAMP", "VARBINARY", "VARCHAR", "VARYING",
+                "VALUE", "VALUES", "VAR_POP", "VAR_SAMP", "VARBINARY", "VARCHAR", "VARYING", "VIEW",
                 "WHEN", "WHENEVER", "WHERE", "WIDTH_BUCKET", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WHILE",
                 "YEAR"
         ));

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DatabaseType.java
Patch:
@@ -92,7 +92,9 @@ private static DatabaseType fromDatabaseProductNameAndVersion(String databasePro
         // #2289: MariaDB JDBC driver 2.4.0 and newer report MariaDB as "MariaDB"
         if (databaseProductName.startsWith("MariaDB")
                 // Older versions of the driver report MariaDB as "MySQL"
-                || databaseProductName.contains("MySQL") && databaseProductVersion.contains("MariaDB")) {
+                || (databaseProductName.contains("MySQL") && databaseProductVersion.contains("MariaDB"))
+                // Azure Database For MariaDB reports as "MySQL"
+                || (databaseProductName.contains("MySQL") && getSelectVersionOutput(connection).contains("MariaDB"))) {
             return MARIADB;
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleParser.java
Patch:
@@ -364,7 +364,7 @@ protected void adjustDelimiter(ParserContext context, StatementType statementTyp
     protected boolean isDelimiter(String peek, Delimiter delimiter) {
         if (delimiter.isAloneOnLine()) {
             return peek.startsWith(delimiter.getDelimiter())
-                    && (peek.length() == 1 || peek.charAt(1) == '\n');
+                    && (peek.length() == 1 || Character.isWhitespace(peek.charAt(1)));
         }
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/StringUtils.java
Patch:
@@ -537,7 +537,7 @@ public static String wordWrap(String str, int lineSize) {
             String part = str.substring(oldPos, pos);
             int spacePos = part.lastIndexOf(' ');
             if (spacePos > 0) {
-                pos = spacePos + 1;
+                pos = oldPos + spacePos + 1;
             }
 
             result.append(str.substring(oldPos, pos).trim()).append("\n");

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/BomStrippingReader.java
Patch:
@@ -24,7 +24,6 @@
  */
 public class BomStrippingReader extends FilterReader {
     private static final int EMPTY_STREAM = -1;
-    private static final char BOM = '\ufeff';
 
     /**
      * Creates a new BOM-stripping reader.
@@ -39,7 +38,7 @@ public BomStrippingReader(Reader in) {
     @Override
     public int read() throws IOException {
         int c = super.read();
-        if (c != EMPTY_STREAM && (char) c == BOM) {
+        if (c != EMPTY_STREAM && BomFilter.isBom((char)c)) {
             // Skip BOM
             return super.read();
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -472,7 +472,7 @@ private Token readToken(PeekingReader reader, PositionTracker tracker, ParserCon
             }
             return handleKeyword(reader, context, pos, line, col, text);
         }
-        if (StringUtils.isCharAnyOf(c, ",=*.:;[]~+-/%^|?!@$&#<>'{}")) {
+        if (StringUtils.isCharAnyOf(c, ",=*.:;[]~+-/%^|?!@$&#<>'{}\\")) {
             String text = "" + (char) reader.read();
             return new Token(TokenType.SYMBOL, pos, line, col, text, text, context.getParensDepth());
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/clazz/NoopClassProvider.java
Patch:
@@ -25,7 +25,7 @@ public enum NoopClassProvider implements ClassProvider {
     INSTANCE;
 
     @Override
-    public <I> Collection<Class<? extends I>> getClasses(Class<I> implementedInterface) {
+    public Collection<Class<?>> getClasses() {
         return Collections.emptyList();
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/CompositeMigrationResolver.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.configuration.Configuration;
+import org.flywaydb.core.api.migration.JavaMigration;
 import org.flywaydb.core.api.resolver.Context;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
@@ -62,7 +63,7 @@ public class CompositeMigrationResolver implements MigrationResolver {
      * @param customMigrationResolvers Custom Migration Resolvers.
      */
     public CompositeMigrationResolver(ResourceProvider resourceProvider,
-                                      ClassProvider classProvider,
+                                      ClassProvider<JavaMigration> classProvider,
                                       Configuration configuration,
                                       SqlScriptExecutorFactory sqlScriptExecutorFactory,
                                       SqlScriptFactory sqlScriptFactory,

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/java/ScanningJavaMigrationResolver.java
Patch:
@@ -36,7 +36,7 @@ public class ScanningJavaMigrationResolver implements MigrationResolver {
     /**
      * The Scanner to use.
      */
-    private final ClassProvider classProvider;
+    private final ClassProvider<JavaMigration> classProvider;
 
     /**
      * The configuration to inject (if necessary) in the migration classes.
@@ -49,7 +49,7 @@ public class ScanningJavaMigrationResolver implements MigrationResolver {
      * @param classProvider The class provider.
      * @param configuration The configuration to inject (if necessary) in the migration classes.
      */
-    public ScanningJavaMigrationResolver(ClassProvider classProvider, Configuration configuration) {
+    public ScanningJavaMigrationResolver(ClassProvider<JavaMigration> classProvider, Configuration configuration) {
         this.classProvider = classProvider;
         this.configuration = configuration;
     }
@@ -58,7 +58,7 @@ public ScanningJavaMigrationResolver(ClassProvider classProvider, Configuration
     public List<ResolvedMigration> resolveMigrations(Context context) {
         List<ResolvedMigration> migrations = new ArrayList<>();
 
-        for (Class<?> clazz : classProvider.getClasses(JavaMigration.class)) {
+        for (Class<?> clazz : classProvider.getClasses()) {
             JavaMigration javaMigration = ClassUtils.instantiate(clazz.getName(), configuration.getClassLoader());
             migrations.add(new ResolvedJavaMigration(javaMigration));
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/ResourceAndClassScanner.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Scanner for both resources and classes.
  */
-public interface ResourceAndClassScanner {
+public interface ResourceAndClassScanner<I> {
     /**
      * Scans the classpath for resources under the configured location.
      *
@@ -31,10 +31,10 @@ public interface ResourceAndClassScanner {
     Collection<LoadableResource> scanForResources();
 
     /**
-     * Scans the classpath for concrete classes under the specified package implementing this interface.
+     * Scans the classpath for concrete classes under the specified package implementing the specified interface.
      * Non-instantiable abstract classes are filtered out.
      *
      * @return The non-abstract classes that were found.
      */
-    Collection<Class<?>> scanForClasses();
+    Collection<Class<? extends I>> scanForClasses();
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/ClassUtils.java
Patch:
@@ -134,7 +134,7 @@ public static Class<?> loadClass(String className, ClassLoader classLoader) {
             return clazz;
         } catch (Throwable e) {
             Throwable rootCause = ExceptionUtils.getRootCause(e);
-            LOG.debug("Skipping " + className + " (" + e.getClass().getSimpleName() + ": " + e.getMessage()
+            LOG.debug("Skipping " + className + " (" + e.getClass().getSimpleName() + "): " + e.getMessage()
                     + (rootCause == e ? "" :
                     " caused by " + rootCause.getClass().getSimpleName() + ": " + rootCause.getMessage()
                             + " at " + ExceptionUtils.getThrowLocation(rootCause)));

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyDatabase.java
Patch:
@@ -62,9 +62,9 @@ protected DerbyConnection doGetConnection(Connection connection) {
     public final void ensureSupported() {
         ensureDatabaseIsRecentEnough("10.11.1.1");
 
-        ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("10.13", org.flywaydb.core.internal.license.Edition.PRO);
+        ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("10.13", org.flywaydb.core.internal.license.Edition.ENTERPRISE);
 
-        recommendFlywayUpgradeIfNecessary("10.14");
+        recommendFlywayUpgradeIfNecessary("10.15");
     }
 
     @Override

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -170,7 +170,9 @@ private static void executeOperation(Flyway flyway, String operation) {
             MigrationInfoService info = flyway.info();
             MigrationInfo current = info.current();
             MigrationVersion currentSchemaVersion = current == null ? MigrationVersion.EMPTY : current.getVersion();
-            LOG.info("Schema version: " + currentSchemaVersion);
+            MigrationVersion schemaVersionToOutput = currentSchemaVersion == null ? MigrationVersion.EMPTY : currentSchemaVersion;
+
+            LOG.info("Schema version: " + schemaVersionToOutput);
             LOG.info("");
             LOG.info(MigrationInfoDumper.dumpToAsciiTable(info.all()));
         } else if ("repair".equals(operation)) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseFactory.java
Patch:
@@ -153,9 +153,9 @@ private static Database createDatabase(DatabaseType databaseType, Configuration
 
 
 
-
-
-
+                );
+            case H2:
+                return new H2Database(configuration, jdbcConnectionFactory
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/SchemaObject.java
Patch:
@@ -62,7 +62,7 @@ public abstract class SchemaObject<D extends Database, S extends Schema> {
     /**
      * @return The schema this object lives in.
      */
-    public final Schema getSchema() {
+    public final S getSchema() {
         return schema;
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/firebird/FirebirdParser.java
Patch:
@@ -58,6 +58,7 @@ protected boolean isAlternativeStringLiteral(String peek) {
         return (firstChar == 'q' || firstChar == 'Q') && peek.charAt(1) == '\'';
     }
 
+
     @Override
     protected Token handleAlternativeStringLiteral(PeekingReader reader, ParserContext context, int pos, int line, int col) throws IOException {
         reader.swallow(2);
@@ -81,5 +82,4 @@ private String computeAlternativeCloseQuote(char specialChar) {
                 return specialChar + "'";
         }
     }
-    
-}
+}
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteTable.java
Patch:
@@ -53,8 +53,7 @@ protected void doDrop() throws SQLException {
             LOG.debug("SQLite system table " + this + " cannot be dropped. Ignoring.");
         } else {
             String dropSql = "DROP TABLE " + database.quote(schema.getName(), name);
-            SQLiteSchema schema = (SQLiteSchema)getSchema();
-            if (schema.getForeignKeysEnabled()) {
+            if (getSchema().getForeignKeysEnabled()) {
                 // #2417: Disable foreign keys before dropping tables to avoid constraint violation errors
                 dropSql = "PRAGMA foreign_keys = OFF; " + dropSql + "; PRAGMA foreign_keys = ON";
             }

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DatabaseType.java
Patch:
@@ -35,6 +35,7 @@ public enum DatabaseType {
 
 
     DERBY("Derby", Types.VARCHAR, true),
+    FIREBIRD("Firebird", Types.NULL, true), // TODO does it suppor tread only transactions
     H2("H2", Types.VARCHAR, true),
     HSQLDB("HSQLDB", Types.VARCHAR, true),
     INFORMIX("Informix", Types.VARCHAR, true),

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -284,6 +284,9 @@ public String getLicenseKey() {
         return config.getLicenseKey();
     }
 
+    @Override
+    public boolean outputQueryResults() { return config.outputQueryResults(); }
+
     /**
      * Sets the stream where to output the SQL statements of a migration dry run. {@code null} to execute the SQL statements
      * directly against the database. The stream when be closing when Flyway finishes writing the output.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/ConsoleLog.java
Patch:
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.logging.console;
+package org.flywaydb.commandline;
 
 import org.flywaydb.core.api.logging.Log;
 
 /**
  * Wrapper around a simple Console output.
  */
-public class ConsoleLog implements Log {
+class ConsoleLog implements Log {
  	public enum Level {
  		DEBUG, INFO, WARN
  	}

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -25,8 +25,7 @@
 import org.flywaydb.core.internal.configuration.ConfigUtils;
 import org.flywaydb.core.internal.info.MigrationInfoDumper;
 import org.flywaydb.core.internal.license.VersionPrinter;
-import org.flywaydb.core.internal.logging.console.ConsoleLog.Level;
-import org.flywaydb.core.internal.logging.console.ConsoleLogCreator;
+import org.flywaydb.commandline.ConsoleLog.Level;
 import org.flywaydb.core.internal.util.ClassUtils;
 import org.flywaydb.core.internal.util.StringUtils;
 

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationVersion.java
Patch:
@@ -66,7 +66,7 @@ public final class MigrationVersion implements Comparable<MigrationVersion> {
     @SuppressWarnings("ConstantConditions")
     public static MigrationVersion fromVersion(String version) {
         if ("current".equalsIgnoreCase(version)) return CURRENT;
-        if (LATEST.getVersion().equals(version)) return LATEST;
+        if ("latest".equalsIgnoreCase(version) || LATEST.getVersion().equals(version)) return LATEST;
         if (version == null) return EMPTY;
         return new MigrationVersion(version);
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/slf4j/Slf4jLogCreator.java
Patch:
@@ -26,4 +26,4 @@ public class Slf4jLogCreator implements LogCreator {
     public Log createLogger(Class<?> clazz) {
         return new Slf4jLog(LoggerFactory.getLogger(clazz.getName()));
     }
-}
+}
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/LogCreatorFactory.java
Patch:
@@ -47,4 +47,4 @@ public static LogCreator getLogCreator(ClassLoader classLoader, LogCreator fallb
         }
         return fallbackLogCreator;
     }
-}
+}
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftParser.java
Patch:
@@ -31,6 +31,7 @@ public class RedshiftParser extends Parser {
     private static final Pattern CREATE_EXTERNAL_TABLE_REGEX = Pattern.compile("^CREATE EXTERNAL TABLE");
     private static final Pattern VACUUM_REGEX = Pattern.compile("^VACUUM");
     private static final Pattern ALTER_TABLE_APPEND_FROM_REGEX = Pattern.compile("^ALTER TABLE( .*)? APPEND FROM");
+    private static final Pattern ALTER_TABLE_ALTER_COLUMN_REGEX = Pattern.compile("^ALTER TABLE( .*)? ALTER COLUMN");
 
     public RedshiftParser(Configuration configuration) {
         super(configuration, 3);
@@ -46,7 +47,8 @@ protected Boolean detectCanExecuteInTransaction(String simplifiedStatement, List
         if (CREATE_LIBRARY_REGEX.matcher(simplifiedStatement).matches()
                 || CREATE_EXTERNAL_TABLE_REGEX.matcher(simplifiedStatement).matches()
                 || VACUUM_REGEX.matcher(simplifiedStatement).matches()
-                || ALTER_TABLE_APPEND_FROM_REGEX.matcher(simplifiedStatement).matches()) {
+                || ALTER_TABLE_APPEND_FROM_REGEX.matcher(simplifiedStatement).matches()
+                || ALTER_TABLE_ALTER_COLUMN_REGEX.matcher(simplifiedStatement).matches()) {
             return false;
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -476,7 +476,7 @@ private Token readToken(PeekingReader reader, PositionTracker tracker, ParserCon
             String text = "" + (char) reader.read();
             return new Token(TokenType.SYMBOL, pos, line, col, text, text, context.getParensDepth());
         }
-        if (c == ' ' || c == '\r') {
+        if (c == ' ' || c == '\r' || c == '\u00A0' /* Non-linebreaking space */) {
             reader.swallow();
             return null;
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Database.java
Patch:
@@ -58,13 +58,14 @@ protected DB2Connection doGetConnection(Connection connection) {
 
 
 
+
     @Override
     public final void ensureSupported() {
         ensureDatabaseIsRecentEnough("9.7");
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("11.1", org.flywaydb.core.internal.license.Edition.ENTERPRISE);
 
-        recommendFlywayUpgradeIfNecessary("11.1");
+        recommendFlywayUpgradeIfNecessary("11.5");
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationType.java
Patch:
@@ -25,7 +25,7 @@ public enum MigrationType {
     SCHEMA(true, false),
 
     /**
-     * Bseline migration.
+     * Baseline migration.
      */
     BASELINE(true, false),
 
@@ -91,4 +91,4 @@ public boolean isSynthetic() {
     public boolean isUndo() {
         return undo;
     }
-}
\ No newline at end of file
+}

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/PeekingReader.java
Patch:
@@ -379,7 +379,7 @@ public String readUntilIncluding(char delimiter) throws IOException {
     public String readKeywordPart(Delimiter delimiter) throws IOException {
         StringBuilder result = new StringBuilder();
         do {
-            if (!peek(delimiter.getDelimiter()) && peekKeywordPart()) {
+            if ((delimiter == null || !peek(delimiter.getDelimiter())) && peekKeywordPart()) {
                 result.append((char) read());
             } else {
                 break;

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/PeekingReader.java
Patch:
@@ -373,8 +373,8 @@ public String readUntilIncluding(char delimiter) throws IOException {
     /**
      * Reads all characters in this stream as long as they can be part of a keyword.
      *
+     * @param delimiter The current delimiter.
      * @return The string read.
-     * @param delimiter
      */
     public String readKeywordPart(Delimiter delimiter) throws IOException {
         StringBuilder result = new StringBuilder();

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/ParserSqlScript.java
Patch:
@@ -48,7 +48,7 @@ public class ParserSqlScript implements SqlScript {
      */
     protected final LoadableResource resource;
 
-    private final Parser parser;
+    protected final Parser parser;
     private final boolean mixed;
     private boolean parsed;
 
@@ -72,7 +72,7 @@ public ParserSqlScript(Parser parser, LoadableResource resource, boolean mixed)
         this.mixed = mixed;
     }
 
-    private void parse() {
+    protected void parse() {
         try (SqlStatementIterator sqlStatementIterator = parser.parse(resource)) {
             boolean transactionalStatementFound = false;
             while (sqlStatementIterator.hasNext()) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -59,7 +59,7 @@ public final void ensureSupported() {
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("9.5", org.flywaydb.core.internal.license.Edition.PRO);
 
-        recommendFlywayUpgradeIfNecessaryForMajorVersion("11");
+        recommendFlywayUpgradeIfNecessaryForMajorVersion("12");
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/android/AndroidResource.java
Patch:
@@ -65,7 +65,8 @@ public String getAbsolutePathOnDisk() {
     @Override
     public Reader read() {
         try {
-            return new BufferedReader(new BomStrippingReader(new InputStreamReader(assetManager.open(fileNameWithAbsolutePath), encoding)));
+            return new BufferedReader(new BomStrippingReader(
+                    new InputStreamReader(assetManager.open(fileNameWithAbsolutePath), encoding.newDecoder())));
         } catch (IOException e) {
             throw new FlywayException("Unable to read asset: " + getAbsolutePath(), e);
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/classpath/ClassPathResource.java
Patch:
@@ -91,7 +91,7 @@ public Reader read() {
         if (inputStream == null) {
             throw new FlywayException("Unable to obtain inputstream for resource: " + fileNameWithAbsolutePath);
         }
-        return new InputStreamReader(inputStream, encoding);
+        return new InputStreamReader(inputStream, encoding.newDecoder());
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -353,7 +353,7 @@ public java.sql.Connection getConnection() {
 
             stopWatch.start();
 
-            LOG.info("Migrating " + migrationText);
+            LOG.debug("Starting migration of " + migrationText + " ...");
 
             connectionUserObjects.restoreOriginalState();
             connectionUserObjects.changeCurrentSchemaTo(schema);
@@ -362,6 +362,7 @@ public java.sql.Connection getConnection() {
                 callbackExecutor.setMigrationInfo(migration);
                 callbackExecutor.onEachMigrateOrUndoEvent(Event.BEFORE_EACH_MIGRATE);
                 try {
+                    LOG.info("Migrating " + migrationText);
                     migration.getResolvedMigration().getExecutor().execute(context);
                 } catch (FlywayException e) {
                     callbackExecutor.onEachMigrateOrUndoEvent(Event.AFTER_EACH_MIGRATE_ERROR);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Function.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * A user defined type within a schema.
  */
-public abstract class Function extends SchemaObject {
+public abstract class Function<D extends Database, S extends Schema> extends SchemaObject<D, S> {
     /**
      * The arguments of the function.
      */
@@ -36,7 +36,7 @@ public abstract class Function extends SchemaObject {
      * @param name         The name of the function.
      * @param args         The arguments of the function.
      */
-    public Function(JdbcTemplate jdbcTemplate, Database database, Schema schema, String name, String... args) {
+    public Function(JdbcTemplate jdbcTemplate, D database, S schema, String name, String... args) {
         super(jdbcTemplate, database, schema, name);
         this.args = args == null ? new String[0] : args;
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleParser.java
Patch:
@@ -166,6 +166,7 @@ private static String toRegexPattern(String... commands) {
 
 
 
+
 
 
     public OracleParser(Configuration configuration
@@ -182,6 +183,7 @@ public OracleParser(Configuration configuration
 
 
 
+
     }
 
     @Override
@@ -251,6 +253,7 @@ protected ParsedSqlStatement createStatement(PeekingReader reader, Recorder reco
 
 
 
+
 
 
         if (PLSQL_VIEW_STATEMENT == statementType) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/DefaultSqlScriptExecutor.java
Patch:
@@ -29,7 +29,6 @@
 import java.sql.Statement;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Iterator;
 import java.util.List;
 
 public class DefaultSqlScriptExecutor implements SqlScriptExecutor {
@@ -134,7 +133,7 @@ public void execute(SqlScript sqlScript) {
 
     }
 
-    private void logStatementExecution(SqlStatement sqlStatement) {
+    protected void logStatementExecution(SqlStatement sqlStatement) {
         if (LOG.isDebugEnabled()) {
             LOG.debug("Executing "
 
@@ -191,7 +190,7 @@ private void logStatementExecution(SqlStatement sqlStatement) {
 
 
 
-    private void executeStatement(JdbcTemplate jdbcTemplate, SqlScript sqlScript, SqlStatement sqlStatement) {
+    protected void executeStatement(JdbcTemplate jdbcTemplate, SqlScript sqlScript, SqlStatement sqlStatement) {
         logStatementExecution(sqlStatement);
         String sql = sqlStatement.getSql() + sqlStatement.getDelimiter();
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/TimeFormat.java
Patch:
@@ -27,7 +27,7 @@ private TimeFormat() {
     }
 
     /**
-     * Formats this execution time.
+     * Formats this execution time as minutes:seconds.millis. Ex.: 02:15.123s
      *
      * @param millis The number of millis.
      * @return The execution in a human-readable format.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Schema.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Represents a database schema.
  */
-public abstract class Schema<D extends Database> {
+public abstract class Schema<D extends Database, T extends Table> {
     private static final Log LOG = LogFactory.getLog(Schema.class);
 
     /**
@@ -169,7 +169,7 @@ public void clean() {
      *
      * @return All tables in the schema.
      */
-    public Table[] allTables() {
+    public T[] allTables() {
         try {
             return doAllTables();
         } catch (SQLException e) {
@@ -183,7 +183,7 @@ public Table[] allTables() {
      * @return All tables in the schema.
      * @throws SQLException when the retrieval failed.
      */
-    protected abstract Table[] doAllTables() throws SQLException;
+    protected abstract T[] doAllTables() throws SQLException;
 
     /**
      * Retrieves all the types in this schema.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBSchema.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * CockroachDB implementation of Schema.
  */
-public class CockroachDBSchema extends Schema<CockroachDBDatabase> {
+public class CockroachDBSchema extends Schema<CockroachDBDatabase, CockroachDBTable> {
     /**
      * Is this CockroachDB 1.x.
      */
@@ -137,7 +137,7 @@ private List<String> generateDropStatementsForSequences() throws SQLException {
     }
 
     @Override
-    protected Table[] doAllTables() throws SQLException {
+    protected CockroachDBTable[] doAllTables() throws SQLException {
         String query;
         if (cockroachDB1) {
             query =
@@ -161,7 +161,7 @@ protected Table[] doAllTables() throws SQLException {
         List<String> tableNames = jdbcTemplate.queryForStringList(query, name);
         //Views and child tables are excluded as they are dropped with the parent table when using cascade.
 
-        Table[] tables = new Table[tableNames.size()];
+        CockroachDBTable[] tables = new CockroachDBTable[tableNames.size()];
         for (int i = 0; i < tableNames.size(); i++) {
             tables[i] = new CockroachDBTable(jdbcTemplate, database, this, tableNames.get(i));
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbySchema.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Derby implementation of Schema.
  */
-public class DerbySchema extends Schema<DerbyDatabase> {
+public class DerbySchema extends Schema<DerbyDatabase, DerbyTable> {
     /**
      * Creates a new Derby schema.
      *
@@ -129,10 +129,10 @@ private List<String> generateDropStatements(String objectType, List<String> obje
     }
 
     @Override
-    protected Table[] doAllTables() throws SQLException {
+    protected DerbyTable[] doAllTables() throws SQLException {
         List<String> tableNames = listObjectNames("TABLE", "TABLETYPE='T'");
 
-        Table[] tables = new Table[tableNames.size()];
+        DerbyTable[] tables = new DerbyTable[tableNames.size()];
         for (int i = 0; i < tableNames.size(); i++) {
             tables[i] = new DerbyTable(jdbcTemplate, database, this, tableNames.get(i));
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Schema.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * H2 implementation of Schema.
  */
-public class H2Schema extends Schema<H2Database> {
+public class H2Schema extends Schema<H2Database, H2Table> {
     private static final Log LOG = LogFactory.getLog(H2Schema.class);
 
     /**
@@ -136,10 +136,10 @@ private List<String> generateDropStatementsForCurrentSchema(String objectType, L
     }
 
     @Override
-    protected Table[] doAllTables() throws SQLException {
+    protected H2Table[] doAllTables() throws SQLException {
         List<String> tableNames = listObjectNames("TABLE", "TABLE_TYPE = 'TABLE'");
 
-        Table[] tables = new Table[tableNames.size()];
+        H2Table[] tables = new H2Table[tableNames.size()];
         for (int i = 0; i < tableNames.size(); i++) {
             tables[i] = new H2Table(jdbcTemplate, database, this, tableNames.get(i));
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBSchema.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * HSQLDB implementation of Schema.
  */
-public class HSQLDBSchema extends Schema<HSQLDBDatabase> {
+public class HSQLDBSchema extends Schema<HSQLDBDatabase, HSQLDBTable> {
     /**
      * Creates a new Hsql schema.
      *
@@ -89,11 +89,11 @@ private List<String> generateDropStatementsForSequences() throws SQLException {
     }
 
     @Override
-    protected Table[] doAllTables() throws SQLException {
+    protected HSQLDBTable[] doAllTables() throws SQLException {
         List<String> tableNames = jdbcTemplate.queryForStringList(
                 "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.SYSTEM_TABLES where TABLE_SCHEM = ? AND TABLE_TYPE = 'TABLE'", name);
 
-        Table[] tables = new Table[tableNames.size()];
+        HSQLDBTable[] tables = new HSQLDBTable[tableNames.size()];
         for (int i = 0; i < tableNames.size(); i++) {
             tables[i] = new HSQLDBTable(jdbcTemplate, database, this, tableNames.get(i));
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLSchema.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * MySQL implementation of Schema.
  */
-public class MySQLSchema extends Schema<MySQLDatabase> {
+public class MySQLSchema extends Schema<MySQLDatabase, MySQLTable> {
     /**
      * Creates a new MySQL schema.
      *
@@ -172,12 +172,12 @@ private List<String> cleanSequences() throws SQLException {
     }
 
     @Override
-    protected Table[] doAllTables() throws SQLException {
+    protected MySQLTable[] doAllTables() throws SQLException {
         List<String> tableNames = jdbcTemplate.queryForStringList(
                 "SELECT table_name FROM information_schema.tables WHERE table_schema=?" +
                         " AND table_type='BASE TABLE'", name);
 
-        Table[] tables = new Table[tableNames.size()];
+        MySQLTable[] tables = new MySQLTable[tableNames.size()];
         for (int i = 0; i < tableNames.size(); i++) {
             tables[i] = new MySQLTable(jdbcTemplate, database, this, tableNames.get(i));
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSchema.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * Oracle implementation of Schema.
  */
-public class OracleSchema extends Schema<OracleDatabase> {
+public class OracleSchema extends Schema<OracleDatabase, OracleTable> {
     private static final Log LOG = LogFactory.getLog(OracleSchema.class);
 
     /**
@@ -262,10 +262,10 @@ private void cleanLocatorMetadata() throws SQLException {
     }
 
     @Override
-    protected Table[] doAllTables() throws SQLException {
+    protected OracleTable[] doAllTables() throws SQLException {
         List<String> tableNames = TABLE.getObjectNames(jdbcTemplate, database, this);
 
-        Table[] tables = new Table[tableNames.size()];
+        OracleTable[] tables = new OracleTable[tableNames.size()];
         for (int i = 0; i < tableNames.size(); i++) {
             tables[i] = new OracleTable(jdbcTemplate, database, this, tableNames.get(i));
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSchema.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * PostgreSQL implementation of Schema.
  */
-public class PostgreSQLSchema extends Schema<PostgreSQLDatabase> {
+public class PostgreSQLSchema extends Schema<PostgreSQLDatabase, PostgreSQLTable> {
     /**
      * Creates a new PostgreSQL schema.
      *
@@ -300,7 +300,7 @@ private List<String> generateDropStatementsForViews() throws SQLException {
     }
 
     @Override
-    protected Table[] doAllTables() throws SQLException {
+    protected PostgreSQLTable[] doAllTables() throws SQLException {
         List<String> tableNames =
                 jdbcTemplate.queryForStringList(
                         //Search for all the table names
@@ -320,7 +320,7 @@ protected Table[] doAllTables() throws SQLException {
                 );
         //Views and child tables are excluded as they are dropped with the parent table when using cascade.
 
-        Table[] tables = new Table[tableNames.size()];
+        PostgreSQLTable[] tables = new PostgreSQLTable[tableNames.size()];
         for (int i = 0; i < tableNames.size(); i++) {
             tables[i] = new PostgreSQLTable(jdbcTemplate, database, this, tableNames.get(i));
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftSchema.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * PostgreSQL implementation of Schema.
  */
-public class RedshiftSchema extends Schema<RedshiftDatabase> {
+public class RedshiftSchema extends Schema<RedshiftDatabase, RedshiftTable> {
     /**
      * Creates a new PostgreSQL schema.
      *
@@ -127,7 +127,7 @@ private List<String> generateDropStatementsForViews() throws SQLException {
     }
 
     @Override
-    protected Table[] doAllTables() throws SQLException {
+    protected RedshiftTable[] doAllTables() throws SQLException {
         List<String> tableNames =
                 jdbcTemplate.queryForStringList(
                         //Search for all the table names
@@ -140,7 +140,7 @@ protected Table[] doAllTables() throws SQLException {
                 );
         //Views and child tables are excluded as they are dropped with the parent table when using cascade.
 
-        Table[] tables = new Table[tableNames.size()];
+        RedshiftTable[] tables = new RedshiftTable[tableNames.size()];
         for (int i = 0; i < tableNames.size(); i++) {
             tables[i] = new RedshiftTable(jdbcTemplate, database, this, tableNames.get(i));
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANASchema.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * SAP HANA implementation of Schema.
  */
-public class SAPHANASchema extends Schema<SAPHANADatabase> {
+public class SAPHANASchema extends Schema<SAPHANADatabase, SAPHANATable> {
     /**
      * Creates a new SAP HANA schema.
      *
@@ -104,9 +104,9 @@ private List<String> getDbObjects(String objectType) throws SQLException {
     }
 
     @Override
-    protected Table[] doAllTables() throws SQLException {
+    protected SAPHANATable[] doAllTables() throws SQLException {
         List<String> tableNames = getDbObjects("TABLE");
-        Table[] tables = new Table[tableNames.size()];
+        SAPHANATable[] tables = new SAPHANATable[tableNames.size()];
         for (int i = 0; i < tableNames.size(); i++) {
             tables[i] = new SAPHANATable(jdbcTemplate, database, this, tableNames.get(i));
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteSchema.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * SQLite implementation of Schema.
  */
-public class SQLiteSchema extends Schema<SQLiteDatabase> {
+public class SQLiteSchema extends Schema<SQLiteDatabase, SQLiteTable> {
     private static final Log LOG = LogFactory.getLog(SQLiteSchema.class);
 
     private static final List<String> IGNORED_SYSTEM_TABLE_NAMES =
@@ -96,10 +96,10 @@ protected void doClean() throws SQLException {
     }
 
     @Override
-    protected Table[] doAllTables() throws SQLException {
+    protected SQLiteTable[] doAllTables() throws SQLException {
         List<String> tableNames = jdbcTemplate.queryForStringList("SELECT tbl_name FROM " + database.quote(name) + ".sqlite_master WHERE type='table'");
 
-        Table[] tables = new Table[tableNames.size()];
+        SQLiteTable[] tables = new SQLiteTable[tableNames.size()];
         for (int i = 0; i < tableNames.size(); i++) {
             tables[i] = new SQLiteTable(jdbcTemplate, database, this, tableNames.get(i));
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASESchema.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Sybase ASE schema (database).
  */
-public class SybaseASESchema extends Schema<SybaseASEDatabase> {
+public class SybaseASESchema extends Schema<SybaseASEDatabase, SybaseASETable> {
     SybaseASESchema(JdbcTemplate jdbcTemplate, SybaseASEDatabase database, String name) {
         super(jdbcTemplate, database, name);
     }
@@ -72,11 +72,11 @@ protected void doClean() throws SQLException {
     }
 
     @Override
-    protected Table[] doAllTables() throws SQLException {
+    protected SybaseASETable[] doAllTables() throws SQLException {
         //Retrieving all table names
         List<String> tableNames = retrieveAllTableNames();
 
-        Table[] result = new Table[tableNames.size()];
+        SybaseASETable[] result = new SybaseASETable[tableNames.size()];
 
         for (int i = 0; i < tableNames.size(); i++) {
             String tableName = tableNames.get(i);

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/Scanner.java
Patch:
@@ -40,7 +40,7 @@ public class Scanner implements ResourceProvider, ClassProvider {
     private static final Log LOG = LogFactory.getLog(Scanner.class);
 
     private final List<LoadableResource> resources = new ArrayList<>();
-    private final List<Class<?>> classes = new ArrayList<Class<?>>();
+    private final List<Class<?>> classes = new ArrayList<>();
 
     public Scanner(Collection<Location> locations, ClassLoader classLoader, Charset encoding
 
@@ -71,7 +71,7 @@ public Scanner(Collection<Location> locations, ClassLoader classLoader, Charset
     @Override
     public LoadableResource getResource(String name) {
         for (LoadableResource resource : resources) {
-            String fileName = resource.getFilename();
+            String fileName = resource.getRelativePath();
             if (fileName.equals(name)) {
                 return resource;
             }
@@ -107,7 +107,7 @@ public Collection<LoadableResource> getResources(String prefix, String... suffix
      * @return The non-abstract classes that were found.
      */
     public <I> Collection<Class<? extends I>> getClasses(Class<I> implementedInterface) {
-        List<Class<? extends I>> result = new ArrayList<Class<? extends I>>();
+        List<Class<? extends I>> result = new ArrayList<>();
         for (Class<?> clazz : classes) {
             if (!implementedInterface.isAssignableFrom(clazz)) {
                 continue;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteParser.java
Patch:
@@ -42,8 +42,8 @@ protected Boolean detectCanExecuteInTransaction(String simplifiedStatement, List
     }
 
     @Override
-    protected void adjustBlockDepth(ParserContext context, List<Token> keywords) {
-        String lastKeyword = keywords.get(keywords.size() - 1).getText();
+    protected void adjustBlockDepth(ParserContext context, List<Token> tokens, Token keyword) {
+        String lastKeyword = keyword.getText();
         if ("BEGIN".equals(lastKeyword)) {
             context.increaseBlockDepth();
         } else if ("END".equals(lastKeyword)) {

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/LogFactory.java
Patch:
@@ -74,8 +74,7 @@ public static void setFallbackLogCreator(LogCreator fallbackLogCreator) {
      */
     public static Log getLog(Class<?> clazz) {
         if (logCreator == null) {
-            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
-            logCreator = LogCreatorFactory.getLogCreator(classLoader, fallbackLogCreator);
+            logCreator = LogCreatorFactory.getLogCreator(LogFactory.class.getClassLoader(), fallbackLogCreator);
         }
 
         return logCreator.createLogger(clazz);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Database.java
Patch:
@@ -85,8 +85,8 @@ public final void ensureSupported() {
 
         ensureDatabaseNotOlderThanOtherwiseRecommendUpgradeToFlywayEdition("1.4", org.flywaydb.core.internal.license.Edition.ENTERPRISE);
 
-        recommendFlywayUpgradeIfNecessary("1.4.197");
-        supportsDropSchemaCascade = getVersion().isAtLeast("1.4.197");
+        recommendFlywayUpgradeIfNecessary("1.4.199");
+        supportsDropSchemaCascade = getVersion().isAtLeast("1.4.199");
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/ClassUtils.java
Patch:
@@ -172,7 +172,7 @@ public static String getLocationOnDisk(Class<?> aClass) {
     public static ClassLoader addJarsOrDirectoriesToClasspath(ClassLoader classLoader, List<File> jarFiles) {
         List<URL> urls = new ArrayList<>();
         for (File jarFile : jarFiles) {
-            LOG.debug("Adding location to classpath: " + jarFile.getPath());
+            LOG.debug("Adding location to classpath: " + jarFile.getAbsolutePath());
 
             try {
                 urls.add(jarFile.toURI().toURL());

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationType.java
Patch:
@@ -25,7 +25,7 @@ public enum MigrationType {
     SCHEMA(true, false),
 
     /**
-     * Bseline migration.
+     * Baseline migration.
      */
     BASELINE(true, false),
 
@@ -91,4 +91,4 @@ public boolean isSynthetic() {
     public boolean isUndo() {
         return undo;
     }
-}
\ No newline at end of file
+}

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Schema.java
Patch:
@@ -169,4 +169,4 @@ private List<String> listObjectNames(String objectType, String querySuffix) thro
     public Table getTable(String tableName) {
         return new H2Table(jdbcTemplate, database, this, tableName);
     }
-}
+}
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/parser/Parser.java
Patch:
@@ -435,7 +435,7 @@ private Token readToken(PeekingReader reader, PositionTracker tracker, ParserCon
             }
             return handleKeyword(reader, context, pos, line, col, text);
         }
-        if (StringUtils.isCharAnyOf(c, ",=*.:;[]~+-/%^|!@$&#<>'{}")) {
+        if (StringUtils.isCharAnyOf(c, ",=*.:;[]~+-/%^|?!@$&#<>'{}")) {
             String text = "" + (char) reader.read();
             return new Token(TokenType.SYMBOL, pos, line, col, text, text, context.getParensDepth());
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/Locations.java
Patch:
@@ -20,7 +20,6 @@
 import org.flywaydb.core.api.logging.LogFactory;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlScriptExecutor.java
Patch:
@@ -204,6 +204,7 @@ protected void handleException(Results results, SqlScript sqlScript, SqlStatemen
 
 
 
+
 
 
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/JdbcTableSchemaHistory.java
Patch:
@@ -160,7 +160,8 @@ protected void doAddAppliedMigration(int installedRank, MigrationVersion version
                                          int executionTime, boolean success) {
         connection.restoreOriginalState();
 
-        // Lock again for databases with no DDL transactions to prevent implicit commits from triggering deadlocks
+        // Lock again for databases with no clean DDL transactions like Oracle
+        // to prevent implicit commits from triggering deadlocks
         // in highly concurrent environments
         if (!database.supportsDdlTransactions()) {
             table.lock();

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -124,8 +124,6 @@ public int migrate() throws FlywayException {
             StopWatch stopWatch = new StopWatch();
             stopWatch.start();
 
-            schemaHistory.create();
-
             count = configuration.isGroup() ?
                     // When group is active, start the transaction boundary early to
                     // ensure that all changes to the schema history table are either committed or rolled back atomically.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Table.java
Patch:
@@ -99,6 +99,9 @@ protected boolean exists(Schema catalog, Schema schema, String table, String...
      * Locks this table in this schema using a read/write pessimistic lock until the end of the current transaction.
      */
     public void lock() {
+        if (!exists()) {
+            return;
+        }
         try {
             LOG.debug("Locking table " + this + "...");
             doLock();

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -266,7 +266,7 @@ public class ClassicConfiguration implements Configuration {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs. (default: {@code false})
-     * <p> This is exclusively intended as a convenience for development. Even though we
+     * <p> This is exclusively intended as a convenience for development. even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>
@@ -881,7 +881,7 @@ public void setValidateOnMigrate(boolean validateOnMigrate) {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs.
-     * <p> This is exclusively intended as a convenience for development. Even though we
+     * <p> This is exclusively intended as a convenience for development. even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -342,7 +342,7 @@ public interface Configuration {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs.
-     * <p> This is exclusively intended as a convenience for development. Even though we
+     * <p> This is exclusively intended as a convenience for development. even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -461,7 +461,7 @@ public FluentConfiguration validateOnMigrate(boolean validateOnMigrate) {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs.
-     * <p> This is exclusively intended as a convenience for development. Even though we
+     * <p> This is exclusively intended as a convenience for development. even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -255,7 +255,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs. (default: {@code false})<br/>
-     * <p> This is exclusively intended as a convenience for development. Even though we
+     * <p> This is exclusively intended as a convenience for development. even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -266,7 +266,7 @@ public class ClassicConfiguration implements Configuration {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs. (default: {@code false})
-     * <p> This is exclusively intended as a convenience for development. Even tough we
+     * <p> This is exclusively intended as a convenience for development. Even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>
@@ -881,7 +881,7 @@ public void setValidateOnMigrate(boolean validateOnMigrate) {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs.
-     * <p> This is exclusively intended as a convenience for development. Even tough we
+     * <p> This is exclusively intended as a convenience for development. Even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -342,7 +342,7 @@ public interface Configuration {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs.
-     * <p> This is exclusively intended as a convenience for development. Even tough we
+     * <p> This is exclusively intended as a convenience for development. Even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -461,7 +461,7 @@ public FluentConfiguration validateOnMigrate(boolean validateOnMigrate) {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs.
-     * <p> This is exclusively intended as a convenience for development. Even tough we
+     * <p> This is exclusively intended as a convenience for development. Even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -255,7 +255,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs. (default: {@code false})<br/>
-     * <p> This is exclusively intended as a convenience for development. Even tough we
+     * <p> This is exclusively intended as a convenience for development. Even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSchema.java
Patch:
@@ -741,7 +741,7 @@ public String toString() {
          */
         public List<String> getObjectNames(JdbcTemplate jdbcTemplate, OracleDatabase database, OracleSchema schema) throws SQLException {
             return jdbcTemplate.queryForStringList(
-                    "SELECT OBJECT_NAME FROM ALL_OBJECTS WHERE OWNER = ? AND OBJECT_TYPE = ?",
+                    "SELECT DISTINCT OBJECT_NAME FROM ALL_OBJECTS WHERE OWNER = ? AND OBJECT_TYPE = ?",
                     schema.getName(), this.getName()
             );
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerParser.java
Patch:
@@ -61,7 +61,7 @@ protected Boolean detectCanExecuteInTransaction(String simplifiedStatement, List
             return false;
         }
 
-        // (CREATE|DROP|ALTER) (DATABASE|FULLTEXT INDEX)
+        // (CREATE|DROP|ALTER) (DATABASE|FULLTEXT (INDEX|CATALOG))
         if (("CREATE".equals(previous) || "ALTER".equals(previous) || "DROP".equals(previous))
                 && ("DATABASE".equals(current) || "FULLTEXT".equals(current))) {
             return false;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleParser.java
Patch:
@@ -53,7 +53,7 @@ public class OracleParser extends Parser {
 
 
     private static final Pattern PLSQL_VIEW_REGEX = Pattern.compile(
-            "^CREATE(\\sOR\\sREPLACE)?(\\s(NON)?EDITIONABLE)?\\sVIEW\\s.*\\sAS\\sWITH");
+            "^CREATE(\\sOR\\sREPLACE)?(\\s(NON)?EDITIONABLE)?\\sVIEW\\s.*\\sAS\\sWITH\\s(PROCEDURE|FUNCTION)");
     private static final StatementType PLSQL_VIEW_STATEMENT = new StatementType();
 
     private static final Pattern PLSQL_REGEX = Pattern.compile(

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -266,7 +266,7 @@ public class ClassicConfiguration implements Configuration {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs. (default: {@code false})
-     * <p> This is exclusively intended as a convenience for development. Even tough we
+     * <p> This is exclusively intended as a convenience for development. Even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>
@@ -881,7 +881,7 @@ public void setValidateOnMigrate(boolean validateOnMigrate) {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs.
-     * <p> This is exclusively intended as a convenience for development. Even tough we
+     * <p> This is exclusively intended as a convenience for development. Even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -342,7 +342,7 @@ public interface Configuration {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs.
-     * <p> This is exclusively intended as a convenience for development. Even tough we
+     * <p> This is exclusively intended as a convenience for development. Even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -456,7 +456,7 @@ public FluentConfiguration validateOnMigrate(boolean validateOnMigrate) {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs.
-     * <p> This is exclusively intended as a convenience for development. Even tough we
+     * <p> This is exclusively intended as a convenience for development. Even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -255,7 +255,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
 
     /**
      * Whether to automatically call clean or not when a validation error occurs. (default: {@code false})<br/>
-     * <p> This is exclusively intended as a convenience for development. Even tough we
+     * <p> This is exclusively intended as a convenience for development. Even though we
      * strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
      * way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
      * the next migration will bring you back to the state checked into SCM.</p>

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/FlywayException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/Location.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationInfoService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/android/ContextHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/android/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/BaseCallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Callback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Error.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Event.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Statement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/Warning.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/executor/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/executor/MigrationExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/executor/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/Log.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/LogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/LogFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/BaseJavaMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/JavaMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/MigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/ResolvedMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/CallbackExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/DefaultCallbackExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/NoopCallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/NoopCallbackExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SimpleContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptCallbackFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -84,7 +84,7 @@ public SqlScriptCallbackFactory(Database database, ResourceProvider resourceProv
                             "-> " + existing.getResource().getAbsolutePathOnDisk() + "\n" +
                             "-> " + resource.getAbsolutePathOnDisk());
                 }
-                SqlScript sqlScript = new SqlScript(sqlStatementBuilderFactory, resource, configuration.isMixed());
+                SqlScript sqlScript = sqlStatementBuilderFactory.createSqlScript(resource, configuration.isMixed());
                 callbacksFound.put(name, sqlScript);
                 callbacks.add(new SqlScriptCallback(event, description, database, sqlScript
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/clazz/ClassProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/clazz/NoopClassProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/clazz/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbBaseline.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbClean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbSchemas.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Connection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Schema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/SchemaObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Table.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Type.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Connection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Function.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Schema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Table.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Type.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbySchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbySqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Connection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Schema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Table.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixSqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLNamedLockTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleResults.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlScriptExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleWithPLSQLStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLAdvisoryLockTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANADatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANASchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANASqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANATable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteSqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerApplicationLockTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASESchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASESqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASETable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywayDbUpgradeRequiredException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywaySqlException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/AppliedMigrationAttributes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoDumper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoServiceImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DriverDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/ErrorImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/JdbcUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/Result.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/Results.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -26,6 +26,8 @@
  * Container for all results, warnings, errors and remaining side-effects of a sql statement.
  */
 public class Results {
+    public static final Results EMPTY_RESULTS = new Results();
+
     private final List<Result> results = new ArrayList<>();
     private final List<Warning> warnings = new ArrayList<>();
     private final List<Error> errors = new ArrayList<>();

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/RowMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/TransactionTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/WarningImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/license/Edition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/license/FlywayEditionUpgradeRequiredException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/license/FlywayProUpgradeRequiredException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/license/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/line/DefaultLine.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/line/DefaultLineReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/line/Line.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/line/LineReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/line/PlaceholderReplacingLine.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/line/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/LogCreatorFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/android/AndroidLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/android/AndroidLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/apachecommons/ApacheCommonsLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/apachecommons/ApacheCommonsLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/apachecommons/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/console/ConsoleLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/console/ConsoleLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/console/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/javautil/JavaUtilLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/javautil/JavaUtilLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/javautil/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/slf4j/Slf4jLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/slf4j/Slf4jLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/slf4j/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/placeholder/DefaultPlaceholderReplacer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,8 +16,10 @@
 package org.flywaydb.core.internal.placeholder;
 
 import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.internal.parser.PositionTrackingReader;
 import org.flywaydb.core.internal.util.StringUtils;
 
+import java.io.IOException;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;

File: flyway-core/src/main/java/org/flywaydb/core/internal/placeholder/NoopPlaceholderReplacer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/placeholder/PlaceholderReplacer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/placeholder/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/CompositeMigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/MigrationInfoHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/ResolvedMigrationComparator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/ResolvedMigrationImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/java/FixedJavaMigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/java/JavaMigrationExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/java/ResolvedJavaMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/java/ScanningJavaMigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/java/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/DefaultSqlMigrationExecutorFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationExecutorFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -137,7 +137,7 @@ private void addMigrations(List<ResolvedMigration> migrations, String prefix,
             migration.setDescription(info.getRight());
             migration.setScript(resource.getRelativePath());
 
-            SqlScript sqlScript = new SqlScript(sqlStatementBuilderFactory, resource, configuration.isMixed());
+            SqlScript sqlScript = sqlStatementBuilderFactory.createSqlScript(resource, configuration.isMixed());
 
 
 
@@ -199,6 +199,7 @@ private void addMigrations(List<ResolvedMigration> migrations, String prefix,
 
 
 
+
     /**
      * Checks whether this filename is actually a sql-based callback instead of a regular migration.
      *

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/NoopResourceProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/Resource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/ResourceProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/android/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/classpath/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/filesystem/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/Scanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/android/AndroidScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/android/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/ClassPathLocationScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/ClassPathScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/DefaultUrlResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/FileSystemClassPathLocationScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/JarFileClassPathLocationScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/JarUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/OsgiClassPathLocationScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/ResourceAndClassScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/UrlResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2018 Boxfuse GmbH
+ * Copyright 2010-2019 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayExtension.java
Patch:
@@ -377,7 +377,9 @@ public class FlywayExtension {
     public Boolean oracleSqlplus;
 
     /**
-     * Flyway's license key.
+     * Your Flyway license key (FL01...). Not yet a Flyway Pro or Enterprise Edition customer?
+     * Request your <a href="https://flywaydb.org/download/">Flyway trial license key</a>
+     * to try out Flyway Pro and Enterprise Edition features free for 30 days.
      * <p>Also configurable with Gradle or System Property: ${flyway.licenseKey}</p>
      * <p><i>Flyway Pro and Flyway Enterprise only</i></p>
      */

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -499,7 +499,9 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
     private Boolean oracleSqlplus;
 
     /**
-     * Flyway's license key.
+     * Your Flyway license key (FL01...). Not yet a Flyway Pro or Enterprise Edition customer?
+     * Request your <a href="https://flywaydb.org/download/">Flyway trial license key</a>
+     * to try out Flyway Pro and Enterprise Edition features free for 30 days.
      * <p>Also configurable with Maven or System Property: ${flyway.licenseKey}</p>
      * <p><i>Flyway Pro and Flyway Enterprise only</i></p>
      */

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/java/JavaMigrationExecutor.java
Patch:
@@ -65,6 +65,6 @@ public Connection getConnection() {
 
     @Override
     public boolean canExecuteInTransaction() {
-        return true;
+        return javaMigration.canExecuteInTransaction();
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/StringResource.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.io.StringReader;
 
-public class StringResource extends AbstractLoadableResource {
+public class StringResource extends LoadableResource {
     private final String str;
 
     public StringResource(String str) {

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -35,6 +35,7 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -96,7 +97,7 @@ public class ClassicConfiguration implements Configuration {
     /**
      * The encoding of Sql migrations. (default: UTF-8)
      */
-    private Charset encoding = Charset.forName("UTF-8");
+    private Charset encoding = StandardCharsets.UTF_8;
 
     /**
      * The schemas managed by Flyway. These schema names are case-sensitive.
@@ -1439,7 +1440,6 @@ public void configure(Configuration configuration) {
      * @param properties Properties used for configuration.
      * @throws FlywayException when the configuration failed.
      */
-    @SuppressWarnings("ConstantConditions")
     public void configure(Properties properties) {
         configure(ConfigUtils.propertiesToMap(properties));
     }

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/BaseJavaMigration.java
Patch:
@@ -18,7 +18,6 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.internal.resolver.MigrationInfoHelper;
-import org.flywaydb.core.internal.util.ClassUtils;
 import org.flywaydb.core.internal.util.Pair;
 
 /**
@@ -52,7 +51,7 @@ public abstract class BaseJavaMigration implements JavaMigration {
      * Creates a new instance of a Java-based migration following Flyway's default naming convention.
      */
     public BaseJavaMigration() {
-        String shortName = ClassUtils.getShortName(getClass());
+        String shortName = getClass().getSimpleName();
         String prefix;
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Connection.java
Patch:
@@ -72,7 +72,7 @@ protected Connection(Configuration configuration, D database, java.sql.Connectio
         try {
             originalSchemaNameOrSearchPath = getCurrentSchemaNameOrSearchPath();
         } catch (SQLException e) {
-            throw new FlywaySqlException("Unable to retrieve the current schema for the connection", e);
+            throw new FlywaySqlException("Unable to determine the original schema for the connection", e);
         }
     }
 
@@ -91,7 +91,7 @@ public final Schema getCurrentSchema() {
         try {
             return doGetCurrentSchema();
         } catch (SQLException e) {
-            throw new FlywaySqlException("Unable to retrieve the current schema for the connection", e);
+            throw new FlywaySqlException("Unable to determine the current schema for the connection", e);
         }
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Database.java
Patch:
@@ -44,7 +44,7 @@
 import org.flywaydb.core.internal.util.ExceptionUtils;
 
 import java.io.Closeable;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.sql.DatabaseMetaData;
 import java.sql.SQLException;
 import java.util.HashMap;
@@ -467,7 +467,7 @@ public final SqlScript getCreateScript(Table table) {
 
     protected LoadableResource getRawCreateScript() {
         String resourceName = "org/flywaydb/core/internal/database/" + getDbName() + "/createMetaDataTable.sql";
-        return new ClassPathResource(null, resourceName, getClass().getClassLoader(), Charset.forName("UTF-8"));
+        return new ClassPathResource(null, resourceName, getClass().getClassLoader(), StandardCharsets.UTF_8);
     }
 
     public String getInsertStatement(Table table) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -23,9 +23,9 @@
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.schemahistory.AppliedMigration;
 import org.flywaydb.core.internal.util.AbbreviationUtils;
-import org.flywaydb.core.internal.util.ObjectUtils;
 
 import java.util.Date;
+import java.util.Objects;
 
 /**
  * Default implementation of MigrationInfo.
@@ -188,7 +188,7 @@ public MigrationState getState() {
 
         if (appliedMigration.getVersion() == null) {
             if (appliedMigration.getInstalledRank() == context.latestRepeatableRuns.get(appliedMigration.getDescription())) {
-                if (ObjectUtils.nullSafeEquals(appliedMigration.getChecksum(), resolvedMigration.getChecksum())) {
+                if (Objects.equals(appliedMigration.getChecksum(), resolvedMigration.getChecksum())) {
                     return MigrationState.SUCCESS;
                 }
                 return MigrationState.OUTDATED;
@@ -295,7 +295,7 @@ public String validate() {
 
                     if (resolvedMigration.getVersion() != null
                             || (context.pending && MigrationState.OUTDATED != state && MigrationState.SUPERSEDED != state)) {
-                        if (!ObjectUtils.nullSafeEquals(resolvedMigration.getChecksum(), appliedMigration.getChecksum())) {
+                        if (!Objects.equals(resolvedMigration.getChecksum(), appliedMigration.getChecksum())) {
                             return createMismatchMessage("checksum", migrationIdentifier,
                                     appliedMigration.getChecksum(), resolvedMigration.getChecksum());
                         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/ResolvedMigrationImpl.java
Patch:
@@ -19,7 +19,8 @@
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.api.executor.MigrationExecutor;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
-import org.flywaydb.core.internal.util.ObjectUtils;
+
+import java.util.Objects;
 
 /**
  * A migration available on the classpath.
@@ -162,7 +163,7 @@ public boolean equals(Object o) {
             return false;
         if (script != null ? !script.equals(migration.script) : migration.script != null) return false;
         if (type != migration.type) return false;
-        return ObjectUtils.nullSafeEquals(version, migration.version);
+        return Objects.equals(version, migration.version);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/AppliedMigration.java
Patch:
@@ -17,9 +17,9 @@
 
 import org.flywaydb.core.api.MigrationType;
 import org.flywaydb.core.api.MigrationVersion;
-import org.flywaydb.core.internal.util.ObjectUtils;
 
 import java.util.Date;
+import java.util.Objects;
 
 /**
  * A migration applied to the database (maps to a row in the schema history table).
@@ -191,7 +191,7 @@ public boolean equals(Object o) {
         if (installedOn != null ? !installedOn.equals(that.installedOn) : that.installedOn != null) return false;
         if (!script.equals(that.script)) return false;
         if (type != that.type) return false;
-        return ObjectUtils.nullSafeEquals(version, that.version);
+        return Objects.equals(version, that.version);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/JdbcTableSchemaHistory.java
Patch:
@@ -226,7 +226,7 @@ public AppliedMigration mapRow(final ResultSet rs) throws SQLException {
     @Override
     public void removeFailedMigrations() {
         if (!exists()) {
-            LOG.info("Repair of failed migration in Schema History table " + table + " not necessary. No failed migration detected.");
+            LOG.info("Repair of failed migration in Schema History table " + table + " not necessary as table doesn't exist.");
             return;
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteDatabase.java
Patch:
@@ -62,7 +62,8 @@ protected SQLiteConnection getConnection(Connection connection
 
     @Override
     public final void ensureSupported() {
-        ensureDatabaseIsRecentEnough("SQLite", "3.7.2");
+        // #2221: Should be 3.7.2 but older versions of the Xerial JDBC driver misreport 3.x versions as being 3.0.
+        ensureDatabaseIsRecentEnough("SQLite", "3.0");
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DriverDataSource.java
Patch:
@@ -431,6 +431,9 @@ protected Connection getConnectionFromDriver(String username, String password) t
         }
 
         Connection connection = driver.connect(url, props);
+        if (connection == null) {
+            throw new FlywayException("Unable to connect to " + url);
+        }
         connection.setAutoCommit(autoCommit);
         return connection;
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -66,7 +66,7 @@ public final void ensureSupported() {
 
         ensureDatabaseIsCompatibleWithFlywayEdition("PostgreSQL", "PostgreSQL", "9.3");
 
-        recommendFlywayUpgradeIfNecessary("PostgreSQL", "10");
+        recommendFlywayUpgradeIfNecessaryForMajorVersion("PostgreSQL", "10");
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANADatabase.java
Patch:
@@ -62,7 +62,7 @@ public void ensureSupported() {
 
         ensureDatabaseIsCompatibleWithFlywayEdition("SAP", "HANA", "2");
 
-        recommendFlywayUpgradeIfNecessary("SAP HANA", "2");
+        recommendFlywayUpgradeIfNecessaryForMajorVersion("SAP HANA", "2");
     }
 
     @Override

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -47,7 +47,7 @@ public class Main {
     private static Log LOG;
 
     private static List<String> VALID_OPERATIONS_AND_FLAGS = Arrays.asList("-X", "-q", "-n", "-v", "-?",
-            "-community", "-trial", "-pro", "-enterprise",
+            "-community", "-pro", "-enterprise",
             "help", "migrate", "clean", "info", "validate", "undo", "baseline", "repair");
 
     /**
@@ -309,7 +309,6 @@ private static void printUsage() {
         LOG.info("-v          : Print the Flyway version and exit");
         LOG.info("-?          : Print this usage info and exit");
         LOG.info("-community  : Run the Flyway Community Edition (default)");
-        LOG.info("-trial      : Run the Flyway Trial Edition");
         LOG.info("-pro        : Run the Flyway Pro Edition");
         LOG.info("-enterprise : Run the Flyway Enterprise Edition");
         LOG.info("");

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1400,7 +1400,7 @@ private void doBaseline(SchemaHistory schemaHistory, Database database, Schema[]
      */
     public int undo() throws FlywayException {
 
-        throw new org.flywaydb.core.internal.exception.FlywayProUpgradeRequiredException("undo");
+        throw new org.flywaydb.core.internal.license.FlywayProUpgradeRequiredException("undo");
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Database.java
Patch:
@@ -22,10 +22,10 @@
 import org.flywaydb.core.internal.callback.CallbackExecutor;
 import org.flywaydb.core.internal.callback.NoopCallbackExecutor;
 import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
-import org.flywaydb.core.internal.exception.FlywayEnterpriseUpgradeRequiredException;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.jdbc.JdbcUtils;
+import org.flywaydb.core.internal.license.FlywayEnterpriseUpgradeRequiredException;
 import org.flywaydb.core.internal.placeholder.DefaultPlaceholderReplacer;
 import org.flywaydb.core.internal.placeholder.NoopPlaceholderReplacer;
 import org.flywaydb.core.internal.placeholder.PlaceholderReplacer;

File: flyway-core/src/main/java/org/flywaydb/core/internal/license/FlywayEnterpriseUpgradeRequiredException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.exception;
+package org.flywaydb.core.internal.license;
 
 import org.flywaydb.core.api.FlywayException;
 
@@ -23,9 +23,9 @@
  */
 public class FlywayEnterpriseUpgradeRequiredException extends FlywayException {
     public FlywayEnterpriseUpgradeRequiredException(String vendor, String database, String version) {
-        super("Flyway Enterprise Edition or " + database + " upgrade required: " + database + " " + version
+        super(Edition.ENTERPRISE + " or " + database + " upgrade required: " + database + " " + version
                 + " is past regular support by " + vendor
-                + " and no longer supported by Flyway Community Edition and Flyway Pro Edition,"
+                + " and no longer supported by " + VersionPrinter.EDITION + ","
                 + " but still supported by Flyway Enterprise Edition.");
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Table.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Represents a database table within a schema.
  */
-public abstract class Table extends SchemaObject {
+public abstract class Table<D extends Database, S extends Schema> extends SchemaObject<D, S> {
     private static final Log LOG = LogFactory.getLog(Table.class);
 
     /**
@@ -38,7 +38,7 @@ public abstract class Table extends SchemaObject {
      * @param schema       The schema this table lives in.
      * @param name         The name of the table.
      */
-    public Table(JdbcTemplate jdbcTemplate, Database database, Schema schema, String name) {
+    public Table(JdbcTemplate jdbcTemplate, D database, S schema, String name) {
         super(jdbcTemplate, database, schema, name);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSchema.java
Patch:
@@ -197,7 +197,7 @@ private void disableFlashbackArchiveForFbaTrackedTables() throws SQLException {
             return;
         }
 
-        boolean oracle18orNewer = database.getMajorVersion() >= 18;
+        boolean oracle18orNewer = database.getVersion().isAtLeast("18");
 
         String queryForFbaTrackedTables = "SELECT TABLE_NAME FROM " + (dbaViewAccessible ? "DBA_" : "USER_")
                 + "FLASHBACK_ARCHIVE_TABLES WHERE OWNER_NAME = ?"

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSchema.java
Patch:
@@ -82,7 +82,6 @@ protected void doClean() throws SQLException {
 
 
 
-
             for (String statement : generateDropStatementsForMaterializedViews()) {
                 jdbcTemplate.execute(statement);
             }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSqlStatementBuilder.java
Patch:
@@ -44,7 +44,7 @@ public class SQLServerSqlStatementBuilder extends SqlStatementBuilder {
                     // #2175: The procedure 'sp_addsubscription' cannot be executed within a transaction.
                     // This procedure is only present in SQL Server. Not on Azure nor in PDW.
                     "(EXEC SP_ADDSUBSCRIPTION)" +
-                    ")( .*)?");
+                    ");?( .*)?");
 
     /**
      * Holds the beginning of the statement.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLConnection.java
Patch:
@@ -48,7 +48,7 @@ public class MySQLConnection extends Connection<MySQLDatabase> {
 
     @Override
     protected String getCurrentSchemaNameOrSearchPath() throws SQLException {
-        return jdbcTemplate.getConnection().getCatalog();
+        return jdbcTemplate.queryForString("SELECT DATABASE()");
     }
 
     @Override

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -464,9 +464,9 @@ public Object runTask() {
                     extraURLs.toArray(new URL[0]),
                     getProject().getBuildscript().getClassLoader());
 
-            Flyway flyway = Flyway.configure(classLoader).configure(createFlywayConfig(envVars)).load();
+            Flyway flyway = Flyway.configure(classLoader).configuration(createFlywayConfig(envVars)).load();
             Object result = run(flyway);
-            ((DriverDataSource) flyway.getDataSource()).shutdownDatabase();
+            ((DriverDataSource) flyway.getConfiguration().getDataSource()).shutdownDatabase();
             return result;
         } catch (Exception e) {
             throw new FlywayException(collectMessages(e, "Error occurred while executing " + getName()), e);

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ConfigurationAware.java
Patch:
@@ -19,7 +19,10 @@
  * Marks a class as configuration aware (executors, resolvers and migrations). Configuration aware classes
  * get the Flyway master configuration injected upon creation. The implementer is responsible for correctly storing
  * the provided {@link FlywayConfiguration} (usually in a field).
+ *
+ * @deprecated Will be removed in Flyway 6.0.
  */
+@Deprecated
 public interface ConfigurationAware {
     /**
      * Sets the current configuration. This method should not be called directly, it is called by Flyway itself.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/MigrationChecksumProvider.java
Patch:
@@ -18,7 +18,10 @@
 /**
  * Migration implementors that also implement this interface will be able to specify their checksum (for
  * validation), instead of having it automatically computed or default to {@code null} (for Java Migrations).
+ *
+ * @deprecated Extend JavaMigration or BaseJavaMigration instead. Will be removed in Flyway 6.0.
  */
+@Deprecated
 public interface MigrationChecksumProvider {
     /**
      * Computes the checksum of the migration.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/MigrationInfoProvider.java
Patch:
@@ -20,7 +20,10 @@
 /**
  * Migration implementors that also implement this interface will be able to specify their version and description
  * manually, instead of having it automatically computed.
+ *
+ * @deprecated Extend JavaMigration or BaseJavaMigration instead. Will be removed in Flyway 6.0.
  */
+@Deprecated
 public interface MigrationInfoProvider {
     /**
      * Returns the version after the migration is complete.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/jdbc/BaseJdbcMigration.java
Patch:
@@ -22,7 +22,10 @@
  * Convenience implementation if {@link JdbcMigration}. {@link ConfigurationAware#setFlywayConfiguration(FlywayConfiguration)}
  * is implemented by storing the configuration in a field. It is encouraged to subclass this class instead of implementing
  * JdbcMigration directly, to guard against possible API additions in future major releases of Flyway.
+ *
+ * @deprecated Extend JavaMigration or BaseJavaMigration instead. Will be removed in Flyway 6.0.
  */
+@Deprecated
 public abstract class BaseJdbcMigration implements JdbcMigration, ConfigurationAware {
 
     protected FlywayConfiguration flywayConfiguration;

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/jdbc/JdbcMigration.java
Patch:
@@ -29,7 +29,10 @@
  * which is especially useful for getting placeholder and schema information.</p>
  *
  * It is encouraged not to implement this interface directly and subclass {@link JdbcMigration} instead.
+ *
+ * @deprecated Extend JavaMigration or BaseJavaMigration instead. Will be removed in Flyway 6.0.
  */
+@Deprecated
 public interface JdbcMigration {
     /**
      * Executes this migration. The execution will automatically take place within a transaction, when the underlying

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/spring/BaseSpringJdbcMigration.java
Patch:
@@ -22,7 +22,10 @@
  * Convenience implementation if {@link SpringJdbcMigration}. {@link ConfigurationAware#setFlywayConfiguration(FlywayConfiguration)}
  * is implemented by storing the configuration in a field. It is encouraged to subclass this class instead of implementing
  * SpringJdbcMigration directly, to guard against possible API additions in future major releases of Flyway.
+ *
+ * @deprecated Extend JavaMigration or BaseJavaMigration instead. Will be removed in Flyway 6.0.
  */
+@Deprecated
 public abstract class BaseSpringJdbcMigration implements SpringJdbcMigration, ConfigurationAware {
 
     protected FlywayConfiguration flywayConfiguration;

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/spring/SpringJdbcMigration.java
Patch:
@@ -29,7 +29,10 @@
  * which is especially useful for getting placeholder and schema information.</p>
  *
  * It is encouraged not to implement this interface directly and subclass {@link BaseSpringJdbcMigration} instead.
+ *
+ * @deprecated Extend JavaMigration or BaseJavaMigration instead. Will be removed in Flyway 6.0.
  */
+@Deprecated
 public interface SpringJdbcMigration {
     /**
      * Executes this migration. The execution will automatically take place within a transaction, when the underlying

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/BaseMigrationResolver.java
Patch:
@@ -21,7 +21,10 @@
 /**
  * Base implementation of {@link MigrationResolver} that handles configuration injections by storing the
  * configuration object in a field.
+ *
+ * @deprecated Will be removed in Flyway 6.0.
  */
+@Deprecated
 public abstract class BaseMigrationResolver implements MigrationResolver, ConfigurationAware {
 
     protected FlywayConfiguration flywayConfiguration;

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/ResolvedMigration.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.flywaydb.core.api.MigrationType;
 import org.flywaydb.core.api.MigrationVersion;
+import org.flywaydb.core.api.executor.MigrationExecutor;
 
 /**
  * Migration resolved through a MigrationResolver. Can be applied against a database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbInfo.java
Patch:
@@ -46,8 +46,9 @@ public MigrationInfoService info() {
         MigrationInfoServiceImpl migrationInfoService;
         try {
             migrationInfoService =
-                    new MigrationInfoServiceImpl(migrationResolver, schemaHistory, configuration.getTarget(),
-                            configuration.isOutOfOrder(), true, true, true, true);
+                    new MigrationInfoServiceImpl(migrationResolver, schemaHistory, configuration,
+                            configuration.getTarget(), configuration.isOutOfOrder(),
+                            true, true, true, true);
             migrationInfoService.refresh();
         } catch (FlywayException e) {
             callbackExecutor.onEvent(Event.AFTER_INFO_ERROR);

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -19,6 +19,7 @@
 import org.flywaydb.core.api.MigrationInfo;
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.api.callback.Event;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.api.resolver.MigrationResolver;
@@ -77,10 +78,10 @@ public class DbRepair {
      * @param callbackExecutor  The callback executor.
      */
     public DbRepair(Database database, MigrationResolver migrationResolver, SchemaHistory schemaHistory,
-                    CallbackExecutor callbackExecutor) {
+                    CallbackExecutor callbackExecutor, Configuration configuration) {
         this.database = database;
         this.connection = database.getMainConnection();
-        this.migrationInfoService = new MigrationInfoServiceImpl(migrationResolver, schemaHistory,
+        this.migrationInfoService = new MigrationInfoServiceImpl(migrationResolver, schemaHistory, configuration,
                 MigrationVersion.LATEST, true, true, true, true, true);
         this.schemaHistory = schemaHistory;
         this.callbackExecutor = callbackExecutor;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Database.java
Patch:
@@ -176,13 +176,13 @@ protected abstract SqlStatementBuilderFactory createSqlStatementBuilderFactory(
     );
 
     /**
-     * Creates a new SqlScript for this specific database.
+     * Creates a new SqlScriptExecutor for this specific database.
      * <p>
 
 
 
 
-     * @return The new SqlScript.
+     * @return The new SqlScriptExecutor.
      */
     public SqlScriptExecutor createSqlScriptExecutor(JdbcTemplate jdbcTemplate
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/ResolvedMigrationImpl.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.MigrationType;
 import org.flywaydb.core.api.MigrationVersion;
-import org.flywaydb.core.api.resolver.MigrationExecutor;
+import org.flywaydb.core.api.executor.MigrationExecutor;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.util.ObjectUtils;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationResolver.java
Patch:
@@ -19,13 +19,13 @@
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.migration.jdbc.JdbcMigration;
 import org.flywaydb.core.internal.clazz.ClassProvider;
-import org.flywaydb.core.internal.resolver.JavaMigrationResolver;
+import org.flywaydb.core.internal.resolver.AbstractJavaMigrationResolver;
 
 /**
  * Migration resolver for JDBC migrations. The classes must have a name like R__My_description, V1__Description
  * or V1_1_3__Description.
  */
-public class JdbcMigrationResolver extends JavaMigrationResolver<JdbcMigration, JdbcMigrationExecutor> {
+public class JdbcMigrationResolver extends AbstractJavaMigrationResolver<JdbcMigration, JdbcMigrationExecutor> {
     /**
      * Creates a new instance.
      *

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/spring/SpringJdbcMigrationResolver.java
Patch:
@@ -19,13 +19,13 @@
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.migration.spring.SpringJdbcMigration;
 import org.flywaydb.core.internal.clazz.ClassProvider;
-import org.flywaydb.core.internal.resolver.JavaMigrationResolver;
+import org.flywaydb.core.internal.resolver.AbstractJavaMigrationResolver;
 
 /**
  * Migration resolver for Spring Jdbc migrations. The classes must have a name like V1 or V1_1_3 or V1__Description
  * or V1_1_3__Description.
  */
-public class SpringJdbcMigrationResolver extends JavaMigrationResolver<SpringJdbcMigration, SpringJdbcMigrationExecutor> {
+public class SpringJdbcMigrationResolver extends AbstractJavaMigrationResolver<SpringJdbcMigration, SpringJdbcMigrationExecutor> {
     /**
      * Creates a new instance.
      *

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolver.java
Patch:
@@ -19,6 +19,7 @@
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.api.callback.Event;
 import org.flywaydb.core.api.configuration.Configuration;
+import org.flywaydb.core.api.resolver.Context;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.callback.CallbackExecutor;
@@ -91,7 +92,7 @@ public SqlMigrationResolver(Database database, ResourceProvider resourceProvider
         this.configuration = configuration;
     }
 
-    public List<ResolvedMigration> resolveMigrations() {
+    public List<ResolvedMigration> resolveMigrations(Context context) {
         List<ResolvedMigration> migrations = new ArrayList<>();
 
         String separator = configuration.getSqlMigrationSeparator();

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DriverDataSource.java
Patch:
@@ -232,6 +232,7 @@ private Properties detectPropsForUrl(String url) {
             result.put("connectionAttributes", "program_name:" + APPLICATION_NAME);
         } else if (url.startsWith(DB2_JDBC_URL_PREFIX)) {
             result.put("clientProgramName", APPLICATION_NAME);
+            result.put("retrieveMessagesFromServerOnGetMessage", "true");
         } else if (url.startsWith(SYBASE_JDBC_URL_PREFIX)) {
             result.put("APPLICATIONNAME", APPLICATION_NAME);
         } else if (url.startsWith(SAPHANA_JDBC_URL_PREFIX)) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/JdbcUtils.java
Patch:
@@ -95,7 +95,7 @@ public static void closeConnection(Connection connection) {
 
         try {
             connection.close();
-        } catch (SQLException e) {
+        } catch (Exception e) {
             LOG.error("Error while closing database connection: " + e.getMessage(), e);
         }
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/JdbcTableSchemaHistory.java
Patch:
@@ -88,7 +88,7 @@ class JdbcTableSchemaHistory extends SchemaHistory {
      */
     private Table determineTable(Table table) {
         // Ensure we are using the default table name before checking for the fallback table
-        if (table.getName().equals("flyway_schema_history")) {
+        if (table.getName().equals("flyway_schema_history") && !table.exists()) {
             Table fallbackTable = table.getSchema().getTable("schema_version");
             if (fallbackTable.exists()) {
                 LOG.warn("Could not find schema history table " + table + ", but found " + fallbackTable + " instead." +

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -257,6 +257,8 @@ private static void printUsage() {
         LOG.info("url                          : Jdbc url to use to connect to the database");
         LOG.info("user                         : User to use to connect to the database");
         LOG.info("password                     : Password to use to connect to the database");
+        LOG.info("connectRetries               : Maximum number of retries when attempting to connect to the database");
+        LOG.info("initSql                      : SQL statements to run to initialize a new database connection");
         LOG.info("schemas                      : Comma-separated list of the schemas managed by Flyway");
         LOG.info("table                        : Name of Flyway's schema history table");
         LOG.info("locations                    : Classpath locations to scan recursively for migrations");

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/SqlScriptExecutor.java
Patch:
@@ -15,8 +15,6 @@
  */
 package org.flywaydb.core.internal.sqlscript;
 
-import org.flywaydb.core.internal.sqlscript.SqlScript;
-
 /**
  * Executor for SQL scripts.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseFactory.java
Patch:
@@ -69,7 +69,7 @@ public static Database createDatabase(Configuration configuration, boolean print
     ) {
         OracleDatabase.enableTnsnamesOraSupport();
 
-        Connection connection = JdbcUtils.openConnection(configuration.getDataSource());
+        Connection connection = JdbcUtils.openConnection(configuration.getDataSource(), configuration.getConnectRetries());
         boolean originalAutoCommit;
         try {
             originalAutoCommit = connection.getAutoCommit();

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Database.java
Patch:
@@ -343,7 +343,7 @@ public final C getMigrationConnection() {
         if (migrationConnection == null) {
             this.migrationConnection = useSingleConnection()
                     ? mainConnection
-                    : getConnection(JdbcUtils.openConnection(configuration.getDataSource())
+                    : getConnection(JdbcUtils.openConnection(configuration.getDataSource(), configuration.getConnectRetries())
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -419,6 +419,9 @@ private static String convertKey(String key) {
         if ("FLYWAY_IGNORE_IGNORED_MIGRATIONS".equals(key)) {
             return IGNORE_IGNORED_MIGRATIONS;
         }
+        if ("FLYWAY_IGNORE_PENDING_MIGRATIONS".equals(key)) {
+            return IGNORE_PENDING_MIGRATIONS;
+        }
         if ("FLYWAY_INSTALLED_BY".equals(key)) {
             return INSTALLED_BY;
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DriverDataSource.java
Patch:
@@ -147,7 +147,8 @@ public DriverDataSource(ClassLoader classLoader, String driverClass, String url,
         } catch (FlywayException e) {
             String backupDriverClass = detectBackupDriverForUrl(url);
             if (backupDriverClass == null) {
-                throw new FlywayException("Unable to instantiate JDBC driver: " + driverClass + " => Check whether the jar file is present", e);
+                throw new FlywayException("Unable to instantiate JDBC driver: " + driverClass
+                        + " => Check whether the jar file is present", e);
             }
             try {
                 this.driver = ClassUtils.instantiate(backupDriverClass, classLoader);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleDatabase.java
Patch:
@@ -123,7 +123,7 @@ public final void ensureSupported() {
         throw new org.flywaydb.core.internal.exception.FlywayEnterpriseUpgradeRequiredException("Oracle", "Oracle", version);
         }
 
-        if (majorVersion > 12) {
+        if (majorVersion > 18 || (majorVersion == 18 && minorVersion > 0)) {
             recommendFlywayUpgrade("Oracle", version);
         }
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -142,6 +142,8 @@ private static String toRegexPattern(String... commands) {
 
 
 
+
+
 
 
 

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -26,7 +26,7 @@
 import org.flywaydb.core.internal.info.MigrationInfoDumper;
 import org.flywaydb.core.internal.util.ClassUtils;
 import org.flywaydb.core.internal.util.StringUtils;
-import org.flywaydb.core.internal.util.license.VersionPrinter;
+import org.flywaydb.core.internal.license.VersionPrinter;
 import org.flywaydb.core.internal.logging.console.ConsoleLog.Level;
 import org.flywaydb.core.internal.logging.console.ConsoleLogCreator;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/DefaultCallbackExecutor.java
Patch:
@@ -26,7 +26,7 @@
 import org.flywaydb.core.internal.database.base.Connection;
 import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.database.base.Schema;
-import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
+import org.flywaydb.core.internal.jdbc.TransactionTemplate;
 
 import java.util.Collection;
 import java.util.List;

File: flyway-core/src/main/java/org/flywaydb/core/internal/clazz/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.util.line;
\ No newline at end of file
+package org.flywaydb.core.internal.clazz;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbBaseline.java
Patch:
@@ -26,7 +26,7 @@
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.schemahistory.AppliedMigration;
 import org.flywaydb.core.internal.schemahistory.SchemaHistory;
-import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
+import org.flywaydb.core.internal.jdbc.TransactionTemplate;
 
 import java.util.concurrent.Callable;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbClean.java
Patch:
@@ -27,7 +27,7 @@
 import org.flywaydb.core.internal.schemahistory.SchemaHistory;
 import org.flywaydb.core.internal.util.StopWatch;
 import org.flywaydb.core.internal.util.TimeFormat;
-import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
+import org.flywaydb.core.internal.jdbc.TransactionTemplate;
 
 import java.util.concurrent.Callable;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -37,7 +37,7 @@
 import org.flywaydb.core.internal.util.StopWatch;
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.TimeFormat;
-import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
+import org.flywaydb.core.internal.jdbc.TransactionTemplate;
 
 import java.sql.SQLException;
 import java.util.Arrays;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -33,7 +33,7 @@
 import org.flywaydb.core.internal.util.ObjectUtils;
 import org.flywaydb.core.internal.util.StopWatch;
 import org.flywaydb.core.internal.util.TimeFormat;
-import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
+import org.flywaydb.core.internal.jdbc.TransactionTemplate;
 
 import java.util.concurrent.Callable;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbSchemas.java
Patch:
@@ -21,7 +21,7 @@
 import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.schemahistory.SchemaHistory;
-import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
+import org.flywaydb.core.internal.jdbc.TransactionTemplate;
 
 import java.util.concurrent.Callable;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java
Patch:
@@ -29,7 +29,7 @@
 import org.flywaydb.core.internal.util.Pair;
 import org.flywaydb.core.internal.util.StopWatch;
 import org.flywaydb.core.internal.util.TimeFormat;
-import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
+import org.flywaydb.core.internal.jdbc.TransactionTemplate;
 
 import java.util.concurrent.Callable;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Function.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.base;
 
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 
 /**
  * A user defined type within a schema.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Schema.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.base;
 
 import org.flywaydb.core.internal.exception.FlywaySqlException;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcUtils;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/SchemaObject.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.base;
 
 import org.flywaydb.core.internal.exception.FlywaySqlException;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Table.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.base;
 
 import org.flywaydb.core.internal.exception.FlywaySqlException;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcUtils;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Type.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.base;
 
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 
 /**
  * A user defined type within a schema.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBConnection.java
Patch:
@@ -22,7 +22,6 @@
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.sql.SQLException;
-import java.sql.Types;
 
 /**
  * CockroachDB connection.
@@ -34,7 +33,7 @@ public class CockroachDBConnection extends Connection<CockroachDBDatabase> {
 
 
     ) {
-        super(configuration, database, connection, originalAutoCommit, Types.NULL
+        super(configuration, database, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBSchema.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;
 import java.util.ArrayList;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBTable.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Connection.java
Patch:
@@ -20,7 +20,6 @@
 import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.SQLException;
-import java.sql.Types;
 
 /**
  * DB2 connection.
@@ -32,7 +31,7 @@ public class DB2Connection extends Connection<DB2Database> {
 
 
     ) {
-        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Function.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.database.base.Function;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.util.StringUtils;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Schema.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.db2;
 
 import org.flywaydb.core.internal.database.base.Function;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.database.base.Type;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Table.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.db2;
 
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Type.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.db2;
 
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Type;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyConnection.java
Patch:
@@ -20,7 +20,6 @@
 import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.SQLException;
-import java.sql.Types;
 
 /**
  * Derby connection.
@@ -32,7 +31,7 @@ public class DerbyConnection extends Connection<DerbyDatabase> {
 
 
     ) {
-        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbySchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.derby;
 
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.StringUtils;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyTable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.derby;
 
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Connection.java
Patch:
@@ -20,7 +20,6 @@
 import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.SQLException;
-import java.sql.Types;
 
 /**
  * H2 connection.
@@ -32,7 +31,7 @@ public class H2Connection extends Connection<H2Database> {
 
 
     ) {
-        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Schema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.h2;
 
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.StringUtils;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Table.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.h2;
 
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBConnection.java
Patch:
@@ -18,11 +18,10 @@
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.base.Connection;
 import org.flywaydb.core.internal.database.base.Schema;
-import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
+import org.flywaydb.core.internal.jdbc.JdbcUtils;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.sql.Types;
 
 /**
  * HSQLDB connection.
@@ -34,7 +33,7 @@ public class HSQLDBConnection extends Connection<HSQLDBDatabase> {
 
 
     ) {
-        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBSchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.hsqldb;
 
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBTable.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixConnection.java
Patch:
@@ -20,7 +20,6 @@
 import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.SQLException;
-import java.sql.Types;
 
 /**
  * Informix connection.
@@ -32,7 +31,7 @@ public class InformixConnection extends Connection<InformixDatabase> {
 
 
     ) {
-        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixSchema.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;
 import java.util.List;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixTable.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLConnection.java
Patch:
@@ -24,7 +24,6 @@
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.sql.SQLException;
-import java.sql.Types;
 import java.util.UUID;
 import java.util.concurrent.Callable;
 
@@ -40,7 +39,7 @@ public class MySQLConnection extends Connection<MySQLDatabase> {
 
 
     ) {
-        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLNamedLockTemplate.java
Patch:
@@ -19,7 +19,7 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;
 import java.util.concurrent.Callable;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLSchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.mysql;
 
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLTable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.mysql;
 
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleConnection.java
Patch:
@@ -20,7 +20,6 @@
 import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.SQLException;
-import java.sql.Types;
 
 /**
  * Oracle connection.
@@ -32,7 +31,7 @@ public class OracleConnection extends Connection<OracleDatabase> {
 
 
     ) {
-        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleContext.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.oracle;
 
-import org.flywaydb.core.internal.util.jdbc.StandardContext;
+import org.flywaydb.core.internal.jdbc.StandardContext;
 
 public class OracleContext extends StandardContext {
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSchema.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.StringUtils;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleTable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.oracle;
 
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleWithPLSQLStatement.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.internal.sqlscript.Delimiter;
 import org.flywaydb.core.internal.sqlscript.StandardSqlStatement;
-import org.flywaydb.core.internal.util.line.Line;
+import org.flywaydb.core.internal.line.Line;
 
 import java.util.List;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLAdvisoryLockTemplate.java
Patch:
@@ -17,10 +17,10 @@
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.util.jdbc.RowMapper;
+import org.flywaydb.core.internal.jdbc.RowMapper;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLConnection.java
Patch:
@@ -23,7 +23,6 @@
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.sql.SQLException;
-import java.sql.Types;
 import java.util.concurrent.Callable;
 
 /**
@@ -37,7 +36,7 @@ public class PostgreSQLConnection extends Connection<PostgreSQLDatabase> {
 
 
     ) {
-        super(configuration, database, connection, originalAutoCommit, Types.NULL
+        super(configuration, database, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSchema.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.database.base.Type;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;
 import java.util.ArrayList;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLTable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.postgresql;
 
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLType.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.postgresql;
 
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Type;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftConnection.java
Patch:
@@ -22,7 +22,6 @@
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.sql.SQLException;
-import java.sql.Types;
 
 /**
  * Redshift connection.
@@ -34,7 +33,7 @@ public class RedshiftConnection extends Connection<RedshiftDatabase> {
 
 
     ) {
-        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftSchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.redshift;
 
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.database.base.Type;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftTable.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftType.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.redshift;
 
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Type;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAConnection.java
Patch:
@@ -20,7 +20,6 @@
 import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.SQLException;
-import java.sql.Types;
 
 public class SAPHANAConnection extends Connection<SAPHANADatabase> {
     SAPHANAConnection(Configuration configuration, SAPHANADatabase database, java.sql.Connection connection
@@ -29,7 +28,7 @@ public class SAPHANAConnection extends Connection<SAPHANADatabase> {
 
 
     ) {
-        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANASchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.saphana;
 
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANATable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.saphana;
 
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteConnection.java
Patch:
@@ -19,8 +19,6 @@
 import org.flywaydb.core.internal.database.base.Connection;
 import org.flywaydb.core.internal.database.base.Schema;
 
-import java.sql.Types;
-
 /**
  * SQLite connection.
  */
@@ -31,7 +29,7 @@ public class SQLiteConnection extends Connection<SQLiteDatabase> {
 
 
     ) {
-        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteSchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.sqlite;
 
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.api.logging.Log;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteTable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.sqlite;
 
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.api.logging.Log;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerApplicationLockTemplate.java
Patch:
@@ -19,7 +19,7 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;
 import java.util.concurrent.Callable;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerConnection.java
Patch:
@@ -22,7 +22,6 @@
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 
 import java.sql.SQLException;
-import java.sql.Types;
 import java.util.concurrent.Callable;
 
 /**
@@ -38,7 +37,7 @@ public class SQLServerConnection extends Connection<SQLServerDatabase> {
 
 
     ) {
-        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSchema.java
Patch:
@@ -19,8 +19,8 @@
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.util.jdbc.RowMapper;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.RowMapper;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerTable.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASESchema.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.sybasease;
 
 import org.flywaydb.core.internal.database.base.Schema;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASETable.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.database.base.SchemaObject;
-import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.database.base.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/DriverDataSource.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.jdbc;
+package org.flywaydb.core.internal.jdbc;
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.logging.Log;

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/ErrorImpl.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.jdbc;
+package org.flywaydb.core.internal.jdbc;
 
 import org.flywaydb.core.api.callback.Error;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/Result.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.jdbc;
+package org.flywaydb.core.internal.jdbc;
 
 import java.util.List;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/RowMapper.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.jdbc;
+package org.flywaydb.core.internal.jdbc;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/StandardContext.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.jdbc;
+package org.flywaydb.core.internal.jdbc;
 
 import org.flywaydb.core.api.callback.Error;
 import org.flywaydb.core.api.callback.Warning;

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/TransactionTemplate.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.jdbc;
+package org.flywaydb.core.internal.jdbc;
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.logging.Log;

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/WarningImpl.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.jdbc;
+package org.flywaydb.core.internal.jdbc;
 
 import org.flywaydb.core.api.callback.Warning;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/jdbc/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.util.jdbc;
\ No newline at end of file
+package org.flywaydb.core.internal.jdbc;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/license/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.util.license;
\ No newline at end of file
+package org.flywaydb.core.internal.license;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/line/DefaultLine.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.line;
+package org.flywaydb.core.internal.line;
 
 public class DefaultLine implements Line {
     private final int lineNumber;

File: flyway-core/src/main/java/org/flywaydb/core/internal/line/DefaultLineReader.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.line;
+package org.flywaydb.core.internal.line;
 
 import org.flywaydb.core.api.FlywayException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/line/Line.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.line;
+package org.flywaydb.core.internal.line;
 
 /**
  * A line in a SQL statement.

File: flyway-core/src/main/java/org/flywaydb/core/internal/line/LineReader.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.line;
+package org.flywaydb.core.internal.line;
 
 import java.io.Closeable;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/line/PlaceholderReplacingLine.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.line;
+package org.flywaydb.core.internal.line;
 
-import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
+import org.flywaydb.core.internal.placeholder.PlaceholderReplacer;
 
 public class PlaceholderReplacingLine implements Line {
     private final Line line;

File: flyway-core/src/main/java/org/flywaydb/core/internal/line/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.util.scanner;
\ No newline at end of file
+package org.flywaydb.core.internal.line;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/placeholder/DefaultPlaceholderReplacer.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.placeholder;
+package org.flywaydb.core.internal.placeholder;
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.util.StringUtils;

File: flyway-core/src/main/java/org/flywaydb/core/internal/placeholder/NoopPlaceholderReplacer.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.placeholder;
+package org.flywaydb.core.internal.placeholder;
 
 import java.util.Collections;
 import java.util.Map;

File: flyway-core/src/main/java/org/flywaydb/core/internal/placeholder/PlaceholderReplacer.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.placeholder;
+package org.flywaydb.core.internal.placeholder;
 
 import java.util.Map;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/LoadableResource.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.scanner;
+package org.flywaydb.core.internal.resource;
 
-import org.flywaydb.core.internal.util.line.LineReader;
+import org.flywaydb.core.internal.line.LineReader;
 
 /**
  * A loadable resource.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resource/android/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.util.placeholder;
\ No newline at end of file
+package org.flywaydb.core.internal.resource.android;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/DefaultUrlResolver.java
Patch:
@@ -13,16 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.scanner.classpath;
+package org.flywaydb.core.internal.scanner.classpath;
 
-import java.io.IOException;
 import java.net.URL;
 
 /**
  * Default implementation of UrlResolver.
  */
 public class DefaultUrlResolver implements UrlResolver {
-    public URL toStandardJavaUrl(URL url) throws IOException {
+    public URL toStandardJavaUrl(URL url) {
         return url;
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/scanner/classpath/JarUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.scanner.classpath;
+package org.flywaydb.core.internal.scanner.classpath;
 
 /**
  * Utility methods for working with Jar files.

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/FlywaySqlScriptException.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.sqlscript;
 
 import org.flywaydb.core.internal.exception.FlywaySqlException;
-import org.flywaydb.core.internal.util.scanner.Resource;
+import org.flywaydb.core.internal.resource.Resource;
 
 import java.sql.SQLException;
 
@@ -78,7 +78,7 @@ public SqlStatement getSqlStatement() {
     public String getMessage() {
         String message = super.getMessage();
         if (resource != null) {
-            message += "Location   : " + resource.getLocation() + " (" + resource.getLocationOnDisk() + ")\n";
+            message += "Location   : " + resource.getAbsolutePath() + " (" + resource.getAbsolutePathOnDisk() + ")\n";
         }
         if (statement != null) {
             message += "Line       : " + getLineNumber() + "\n";

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/StringUtils.java
Patch:
@@ -256,7 +256,7 @@ public static String[] tokenizeToStringArray(String str, String delimiters) {
      * @param delimiters The delimiters to use.
      * @return The resulting array.
      */
-    public static Collection<String> tokenizeToStringCollection(String str, String delimiters) {
+    public static List<String> tokenizeToStringCollection(String str, String delimiters) {
         if (str == null) {
             return null;
         }

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -20,7 +20,7 @@
 import org.flywaydb.core.api.Location;
 import org.flywaydb.core.internal.configuration.ConfigUtils;
 import org.flywaydb.core.internal.util.StringUtils;
-import org.flywaydb.core.internal.util.jdbc.DriverDataSource;
+import org.flywaydb.core.internal.jdbc.DriverDataSource;
 import org.flywaydb.gradle.FlywayExtension;
 import org.gradle.api.DefaultTask;
 import org.gradle.api.artifacts.ResolvedArtifact;

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -681,7 +681,7 @@ public void setIgnoreIgnoredMigrations(boolean ignoreIgnoredMigrations) {
 
     /**
      * Ignore pending migrations when reading the schema history table. These are migrations that are available on the
-     * classpath but have not yet been were performed by an application deployment. This can be useful for verifying
+     * classpath but have not yet been performed by an application deployment. This can be useful for verifying
      * that in-development migration changes don't contain any validation-breaking changes of migrations that have
      * already been applied to a production environment, e.g. as part of a CI/CD process, without failing because of the
      * existence of new migration versions.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ClassicConfiguration.java
Patch:
@@ -209,7 +209,7 @@ public class ClassicConfiguration implements Configuration {
 
     /**
      * Ignore pending migrations when reading the schema history table. These are migrations that are available on the
-     * classpath but have not yet been were performed by an application deployment.
+     * classpath but have not yet been performed by an application deployment.
      * This can be useful for verifying that in-development migration changes don't contain any validation-breaking changes
      * of migrations that have already been applied to a production environment, e.g. as part of a CI/CD process, without
      * failing because of the existence of new migration versions.
@@ -848,7 +848,7 @@ public void setIgnoreIgnoredMigrations(boolean ignoreIgnoredMigrations) {
     
     /**
      * Ignore pending migrations when reading the schema history table. These are migrations that are available on the
-     * classpath but have not yet been were performed by an application deployment. This can be useful for verifying
+     * classpath but have not yet been performed by an application deployment. This can be useful for verifying
      * that in-development migration changes don't contain any validation-breaking changes of migrations that have
      * already been applied to a production environment, e.g. as part of a CI/CD process, without failing because of the
      * existence of new migration versions.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -275,7 +275,7 @@ public interface Configuration {
 
     /**
      * Ignore pending migrations when reading the schema history table. These are migrations that are available on the
-     * classpath but have not yet been were performed by an application deployment. This can be useful for verifying
+     * classpath but have not yet been performed by an application deployment. This can be useful for verifying
      * that in-development migration changes don't contain any validation-breaking changes of migrations that have
      * already been applied to a production environment, e.g. as part of a CI/CD process, without failing because of the
      * existence of new migration versions.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FluentConfiguration.java
Patch:
@@ -422,7 +422,7 @@ public FluentConfiguration ignoreIgnoredMigrations(boolean ignoreIgnoredMigratio
 
     /**
      * Ignore pending migrations when reading the schema history table. These are migrations that are available on the
-     * classpath but have not yet been were performed by an application deployment. This can be useful for verifying
+     * classpath but have not yet been performed by an application deployment. This can be useful for verifying
      * that in-development migration changes don't contain any validation-breaking changes of migrations that have
      * already been applied to a production environment, e.g. as part of a CI/CD process, without failing because of the
      * existence of new migration versions.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayExtension.java
Patch:
@@ -235,7 +235,7 @@ public class FlywayExtension {
 
     /**
      * Ignore pending migrations when reading the schema history table. These are migrations that are available on the
-     * classpath but have not yet been were performed by an application deployment. This can be useful for verifying
+     * classpath but have not yet been performed by an application deployment. This can be useful for verifying
      * that in-development migration changes don't contain any validation-breaking changes of migrations that have
      * already been applied to a production environment, e.g. as part of a CI/CD process, without failing because of the
      * existence of new migration versions.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -275,7 +275,7 @@ public abstract class AbstractFlywayTask extends DefaultTask {
 
     /**
      * Ignore pending migrations when reading the schema history table. These are migrations that are available on the
-     * classpath but have not yet been were performed by an application deployment. This can be useful for verifying
+     * classpath but have not yet been performed by an application deployment. This can be useful for verifying
      * that in-development migration changes don't contain any validation-breaking changes of migrations that have
      * already been applied to a production environment, e.g. as part of a CI/CD process, without failing because of the
      * existence of new migration versions.

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -306,7 +306,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
 
     /**
      * Ignore pending migrations when reading the schema history table. These are migrations that are available on the
-     * classpath but have not yet been were performed by an application deployment. This can be useful for verifying
+     * classpath but have not yet been performed by an application deployment. This can be useful for verifying
      * that in-development migration changes don't contain any validation-breaking changes of migrations that have
      * already been applied to a production environment, e.g. as part of a CI/CD process, without failing because of the
      * existence of new migration versions.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -101,8 +101,7 @@ public static void main(String[] args) {
             classLoader = loadJavaMigrationsFromJarDirs(classLoader, properties);
 
             filterProperties(properties);
-            Flyway flyway = new Flyway(classLoader);
-            flyway.configure(properties);
+            Flyway flyway = Flyway.configure(classLoader).configure(properties).load();
 
             for (String operation : operations) {
                 executeOperation(flyway, operation);

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -442,8 +442,7 @@ public Object runTask() {
                     extraURLs.toArray(new URL[0]),
                     getProject().getBuildscript().getClassLoader());
 
-            Flyway flyway = new Flyway(classLoader);
-            flyway.configure(createFlywayConfig(envVars));
+            Flyway flyway = Flyway.configure(classLoader).configure(createFlywayConfig(envVars)).load();
             Object result = run(flyway);
             ((DriverDataSource) flyway.getDataSource()).shutdownDatabase();
             return result;

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -697,8 +697,7 @@ public final void execute() throws MojoExecutionException {
             conf.putAll(ConfigUtils.propertiesToMap(System.getProperties()));
             removeMavenPluginSpecificPropertiesToAvoidWarnings(conf);
 
-            Flyway flyway = new Flyway(classLoader);
-            flyway.configure(conf);
+            Flyway flyway = Flyway.configure(classLoader).configure(conf).load();
             doExecute(flyway);
         } catch (Exception e) {
             throw new MojoExecutionException(e.toString(), ExceptionUtils.getRootCause(e));

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywayEnterpriseUpgradeRequiredException.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class FlywayEnterpriseUpgradeRequiredException extends FlywayException {
     public FlywayEnterpriseUpgradeRequiredException(String vendor, String database, String version) {
-        super("Flyway Enterprise or " + database + " upgrade required: " + database + " " + version
+        super("Flyway Enterprise Edition or " + database + " upgrade required: " + database + " " + version
                 + " is past regular support by " + vendor
                 + " and no longer supported by Flyway Community Edition and Flyway Pro Edition,"
                 + " but still supported by Flyway Enterprise Edition.");

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSqlStatementBuilder.java
Patch:
@@ -40,7 +40,7 @@ public class SQLServerSqlStatementBuilder extends SqlStatementBuilder {
      * Regex for statements that cannot be executed within a transaction.
      */
     private static final Pattern NON_TRANSACTIONAL_STATEMENT_REGEX =
-            Pattern.compile("^(BACKUP|RESTORE|(CREATE|DROP|ALTER) (DATABASE|FULLTEXT INDEX)) .*");
+            Pattern.compile("^(BACKUP|RESTORE|RECONFIGURE|(CREATE|DROP|ALTER) (DATABASE|FULLTEXT INDEX)) .*");
 
     /**
      * Holds the beginning of the statement.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/license/VersionPrinter.java
Patch:
@@ -93,6 +93,8 @@ public static void printVersion(
 
 
 
+
+
 
 
 

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -294,8 +294,8 @@ private static void printUsage() {
         LOG.info("configFileEncoding           : Encoding to use when loading the config files");
         LOG.info("jarDirs                      : Comma-separated list of dirs for Jdbc drivers & Java migrations");
         LOG.info("dryRunOutput                 : [" + "pro] File where to output the SQL statements of a migration dry run");
-        LOG.info("errorHandlers                : [" + "pro] Comma-separated list of handlers for errors and warnings");
-        LOG.info("oracle.sqlplus               : [" + "pro] Oracle SQL*Plus command support");
+        LOG.info("errorOverrides               : [" + "pro] Rules to override specific SQL states and errors codes");
+        LOG.info("oracle.sqlplus               : [" + "pro] Enable Oracle SQL*Plus command support");
         LOG.info("licenseKey                   : [" + "pro] Your Flyway license key");
         LOG.info("");
         LOG.info("Flags");

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -342,7 +342,9 @@ public interface Configuration {
      * <p><i>Flyway Pro and Flyway Enterprise only</i></p>
      *
      * @return The ErrorHandlers or an empty array if the default internal handler should be used instead. (default: none)
+     * @deprecated ErrorHandlers have been deprecated and will be removed in Flyway 6.0 use statement-level callbacks instead.
      */
+    @Deprecated
     ErrorHandler[] getErrorHandlers();
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/api/errorhandler/Context.java
Patch:
@@ -20,7 +20,10 @@
 /**
  * The context passed to an error handler.
  * <p><i>Flyway Pro and Flyway Enterprise only</i></p>
+ *
+ * @deprecated ErrorHandlers have been deprecated and will be removed in Flyway 6.0 use statement-level callbacks instead.
  */
+@Deprecated
 public interface Context {
     /**
      * @return The warnings that were raised during a migration.

File: flyway-core/src/main/java/org/flywaydb/core/api/errorhandler/Error.java
Patch:
@@ -17,7 +17,10 @@
 
 /**
  * An error that occurred while executing a statement.
+ *
+ * @deprecated ErrorHandlers have been deprecated and will be removed in Flyway 6.0 use statement-level callbacks instead.
  */
+@Deprecated
 public interface Error {
     /**
      * @return The error code.

File: flyway-core/src/main/java/org/flywaydb/core/api/errorhandler/ErrorHandler.java
Patch:
@@ -19,7 +19,10 @@
  * Handler for warnings and errors that occur during a migration. This can be used to customize Flyway's behavior by for example
  * throwing another runtime exception, outputting a warning or suppressing the error instead of throwing a FlywayException.
  * <p><i>Flyway Pro and Flyway Enterprise only</i></p>
+ *
+ * @deprecated ErrorHandlers have been deprecated and will be removed in Flyway 6.0 use statement-level callbacks instead.
  */
+@Deprecated
 public interface ErrorHandler {
     /**
      * Handles warnings and errors that occurred during a migration.

File: flyway-core/src/main/java/org/flywaydb/core/api/errorhandler/Warning.java
Patch:
@@ -17,7 +17,10 @@
 
 /**
  * A warning that occurred while executing a statement.
+ *
+ * @deprecated ErrorHandlers have been deprecated and will be removed in Flyway 6.0 use statement-level callbacks instead.
  */
+@Deprecated
 public interface Warning {
     /**
      * @return The warning code.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbBaseline.java
Patch:
@@ -90,7 +90,7 @@ public DbBaseline(Database database, SchemaHistory schemaHistory, Schema schema,
      * Baselines the database.
      */
     public void baseline() {
-        callbackExecutor.executeOnMainConnection(Event.BEFORE_BASELINE);
+        callbackExecutor.onEvent(Event.BEFORE_BASELINE);
 
         try {
             schemaHistory.create();
@@ -124,12 +124,12 @@ public Void call() {
                 }
             });
         } catch (FlywayException e) {
-            callbackExecutor.executeOnMainConnection(Event.AFTER_BASELINE_ERROR);
+            callbackExecutor.onEvent(Event.AFTER_BASELINE_ERROR);
             throw e;
         }
 
         LOG.info("Successfully baselined schema with version: " + baselineVersion);
 
-        callbackExecutor.executeOnMainConnection(Event.AFTER_BASELINE);
+        callbackExecutor.onEvent(Event.AFTER_BASELINE);
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbClean.java
Patch:
@@ -90,7 +90,7 @@ public void clean() throws FlywayException {
         if (cleanDisabled) {
             throw new FlywayException("Unable to execute clean as it has been disabled with the \"flyway.cleanDisabled\" property.");
         }
-        callbackExecutor.executeOnMainConnection(Event.BEFORE_CLEAN);
+        callbackExecutor.onEvent(Event.BEFORE_CLEAN);
 
         try {
             connection.changeCurrentSchemaTo(schemas[0]);
@@ -114,11 +114,11 @@ public void clean() throws FlywayException {
                 }
             }
         } catch (FlywayException e) {
-            callbackExecutor.executeOnMainConnection(Event.AFTER_CLEAN_ERROR);
+            callbackExecutor.onEvent(Event.AFTER_CLEAN_ERROR);
             throw e;
         }
 
-        callbackExecutor.executeOnMainConnection(Event.AFTER_CLEAN);
+        callbackExecutor.onEvent(Event.AFTER_CLEAN);
         schemaHistory.clearCache();
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbInfo.java
Patch:
@@ -40,7 +40,7 @@ public DbInfo(MigrationResolver migrationResolver, SchemaHistory schemaHistory,
     }
 
     public MigrationInfoService info() {
-        callbackExecutor.executeOnMainConnection(Event.BEFORE_INFO);
+        callbackExecutor.onEvent(Event.BEFORE_INFO);
 
 
         MigrationInfoServiceImpl migrationInfoService;
@@ -50,11 +50,11 @@ public MigrationInfoService info() {
                             configuration.isOutOfOrder(), true, true, true, true);
             migrationInfoService.refresh();
         } catch (FlywayException e) {
-            callbackExecutor.executeOnMainConnection(Event.AFTER_INFO_ERROR);
+            callbackExecutor.onEvent(Event.AFTER_INFO_ERROR);
             throw e;
         }
 
-        callbackExecutor.executeOnMainConnection(Event.AFTER_INFO);
+        callbackExecutor.onEvent(Event.AFTER_INFO);
 
         return migrationInfoService;
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -90,7 +90,7 @@ public DbRepair(Database database, MigrationResolver migrationResolver, SchemaHi
      * Repairs the schema history table.
      */
     public void repair() {
-        callbackExecutor.executeOnMainConnection(Event.BEFORE_REPAIR);
+        callbackExecutor.onEvent(Event.BEFORE_REPAIR);
 
         try {
             StopWatch stopWatch = new StopWatch();
@@ -113,11 +113,11 @@ public Boolean call() {
                 LOG.info("Manual cleanup of the remaining effects the failed migration may still be required.");
             }
         } catch (FlywayException e) {
-            callbackExecutor.executeOnMainConnection(Event.AFTER_REPAIR_ERROR);
+            callbackExecutor.onEvent(Event.AFTER_REPAIR_ERROR);
             throw e;
         }
 
-        callbackExecutor.executeOnMainConnection(Event.AFTER_REPAIR);
+        callbackExecutor.onEvent(Event.AFTER_REPAIR);
     }
 
     private boolean alignAppliedMigrationsWithResolvedMigrations() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java
Patch:
@@ -142,7 +142,7 @@ public String validate() {
             return null;
         }
 
-        callbackExecutor.executeOnMainConnection(Event.BEFORE_VALIDATE);
+        callbackExecutor.onEvent(Event.BEFORE_VALIDATE);
 
         LOG.debug("Validating migrations ...");
         StopWatch stopWatch = new StopWatch();
@@ -175,9 +175,9 @@ public Pair<Integer, String> call() {
                 LOG.info(String.format("Successfully validated %d migrations (execution time %s)",
                         count, TimeFormat.format(stopWatch.getTotalTimeMillis())));
             }
-            callbackExecutor.executeOnMainConnection(Event.AFTER_VALIDATE);
+            callbackExecutor.onEvent(Event.AFTER_VALIDATE);
         } else {
-            callbackExecutor.executeOnMainConnection(Event.AFTER_VALIDATE_ERROR);
+            callbackExecutor.onEvent(Event.AFTER_VALIDATE_ERROR);
         }
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -69,7 +69,10 @@ public class ConfigUtils {
     public static final String DRIVER = "flyway.driver";
     public static final String DRYRUN_OUTPUT = "flyway.dryRunOutput";
     public static final String ENCODING = "flyway.encoding";
+
+    @Deprecated
     public static final String ERROR_HANDLERS = "flyway.errorHandlers";
+
     public static final String ERROR_OVERRIDES = "flyway.errorOverrides";
     public static final String GROUP = "flyway.group";
     public static final String IGNORE_FUTURE_MIGRATIONS = "flyway.ignoreFutureMigrations";

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleContext.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.internal.util.jdbc.StandardContext;
 
-public class OracleContextImpl extends StandardContext {
+public class OracleContext extends StandardContext {
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleDatabase.java
Patch:
@@ -16,13 +16,12 @@
 package org.flywaydb.core.internal.database.oracle;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.callback.CallbackExecutor;
 import org.flywaydb.core.internal.database.base.Database;
-import org.flywaydb.core.internal.sqlscript.SqlScript;
-import org.flywaydb.core.internal.sqlscript.SqlStatementBuilderFactory;
 import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
+import org.flywaydb.core.internal.sqlscript.SqlScript;
+import org.flywaydb.core.internal.sqlscript.SqlStatementBuilderFactory;
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.jdbc.RowMapper;
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/CompositeMigrationResolver.java
Patch:
@@ -18,7 +18,6 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.Location;
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.callback.CallbackExecutor;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/ErrorImpl.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.util.jdbc;
 
-import org.flywaydb.core.api.errorhandler.Error;
+import org.flywaydb.core.api.callback.Error;
 
 public class ErrorImpl implements Error {
     private final int code;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/WarningImpl.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.util.jdbc;
 
-import org.flywaydb.core.api.errorhandler.Warning;
+import org.flywaydb.core.api.callback.Warning;
 
 public class WarningImpl implements Warning {
     private final int code;

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayExtension.java
Patch:
@@ -300,7 +300,10 @@ public class FlywayExtension {
      * (default: none)
      * <p>Also configurable with Gradle or System Property: ${flyway.errorHandlers}</p>
      * <p><i>Flyway Pro and Flyway Enterprise only</i></p>
+     *
+     * @deprecated ErrorHandlers have been deprecated and will be removed in Flyway 6.0 use statement-level callbacks instead.
      */
+    @Deprecated
     public String[] errorHandlers;
 
     /**

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -339,7 +339,10 @@ public abstract class AbstractFlywayTask extends DefaultTask {
      * (default: none)
      * <p>Also configurable with Gradle or System Property: ${flyway.errorHandlers}</p>
      * <p><i>Flyway Pro and Flyway Enterprise only</i></p>
+     *
+     * @deprecated ErrorHandlers have been deprecated and will be removed in Flyway 6.0 use statement-level callbacks instead.
      */
+    @Deprecated
     public String[] errorHandlers;
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSqlStatementBuilder.java
Patch:
@@ -36,7 +36,7 @@ public class SQLServerSqlStatementBuilder extends SqlStatementBuilder {
      */
     private static final Pattern KEYWORDS_AFTER_STRING_LITERAL_REGEX = Pattern.compile("(.*')(LIKE|AS)$");
 
-    private static final Pattern NON_TRANSACTIONAL_STATEMENT_REGEX = Pattern.compile("^(BACKUP|RESTORE|(CREATE|DROP|ALTER) DATABASE) .*");
+    private static final Pattern NON_TRANSACTIONAL_STATEMENT_REGEX = Pattern.compile("^(BACKUP|RESTORE|(CREATE|DROP|ALTER) (DATABASE|FULLTEXT INDEX)) .*");
 
     /**
      * Holds the beginning of the statement.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -27,8 +27,8 @@
 import org.flywaydb.core.internal.util.ClassUtils;
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.license.VersionPrinter;
-import org.flywaydb.core.internal.util.logging.console.ConsoleLog.Level;
-import org.flywaydb.core.internal.util.logging.console.ConsoleLogCreator;
+import org.flywaydb.core.internal.logging.console.ConsoleLog.Level;
+import org.flywaydb.core.internal.logging.console.ConsoleLogCreator;
 
 import java.io.Console;
 import java.io.File;

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptFlywayCallbackFactory.java
Patch:
@@ -24,8 +24,8 @@
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.SqlScript;
+import org.flywaydb.core.internal.database.base.Database;
+import org.flywaydb.core.internal.sqlscript.SqlScript;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbBaseline.java
Patch:
@@ -21,9 +21,9 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.callback.CallbackExecutor;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Database;
+import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.schemahistory.AppliedMigration;
 import org.flywaydb.core.internal.schemahistory.SchemaHistory;
 import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbClean.java
Patch:
@@ -20,9 +20,9 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.callback.CallbackExecutor;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Database;
+import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.schemahistory.SchemaHistory;
 import org.flywaydb.core.internal.util.StopWatch;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -24,8 +24,8 @@
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.callback.CallbackExecutor;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.info.MigrationInfoImpl;
 import org.flywaydb.core.internal.info.MigrationInfoServiceImpl;
 import org.flywaydb.core.internal.schemahistory.AppliedMigration;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbSchemas.java
Patch:
@@ -17,9 +17,9 @@
 
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Database;
+import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.schemahistory.SchemaHistory;
 import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java
Patch:
@@ -21,9 +21,9 @@
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.internal.callback.CallbackExecutor;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Database;
+import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.info.MigrationInfoServiceImpl;
 import org.flywaydb.core.internal.schemahistory.SchemaHistory;
 import org.flywaydb.core.internal.util.Pair;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseFactory.java
Patch:
@@ -19,6 +19,7 @@
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.database.cockroachdb.CockroachDBDatabase;
 import org.flywaydb.core.internal.database.db2.DB2Database;
 import org.flywaydb.core.internal.database.derby.DerbyDatabase;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Connection.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.database;
+package org.flywaydb.core.internal.database.base;
 
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.exception.FlywaySqlException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Function.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.database;
+package org.flywaydb.core.internal.database.base;
 
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Schema.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.database;
+package org.flywaydb.core.internal.database.base;
 
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/SchemaObject.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.database;
+package org.flywaydb.core.internal.database.base;
 
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Table.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.database;
+package org.flywaydb.core.internal.database.base;
 
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/Type.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.database;
+package org.flywaydb.core.internal.database.base;
 
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/base/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.util.logging.slf4j;
\ No newline at end of file
+package org.flywaydb.core.internal.database.base;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBConnection.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.cockroachdb;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.StringUtils;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBSchema.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.database.cockroachdb;
 
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBTable.java
Patch:
@@ -17,10 +17,10 @@
 
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Connection.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.db2;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.SQLException;
 import java.sql.Types;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Function.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.flywaydb.core.internal.database.db2;
 
-import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.Function;
+import org.flywaydb.core.internal.database.base.Database;
+import org.flywaydb.core.internal.database.base.Function;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Table.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.flywaydb.core.internal.database.db2;
 
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Type.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.flywaydb.core.internal.database.db2;
 
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Type;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Type;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyConnection.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.derby;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.SQLException;
 import java.sql.Types;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbySchema.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.derby;
 
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyTable.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.flywaydb.core.internal.database.derby;
 
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Connection.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.h2;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.SQLException;
 import java.sql.Types;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Schema.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.h2;
 
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Table.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.flywaydb.core.internal.database.h2;
 
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBConnection.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.hsqldb;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
 
 import java.sql.ResultSet;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBSchema.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.hsqldb;
 
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;
 import java.util.ArrayList;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBTable.java
Patch:
@@ -17,10 +17,10 @@
 
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixConnection.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.informix;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.SQLException;
 import java.sql.Types;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixSchema.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.database.informix;
 
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixTable.java
Patch:
@@ -15,9 +15,9 @@
  */
 package org.flywaydb.core.internal.database.informix;
 
-import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Database;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLConnection.java
Patch:
@@ -18,9 +18,9 @@
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLSchema.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.mysql;
 
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;
 import java.util.ArrayList;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLTable.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.flywaydb.core.internal.database.mysql;
 
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleConnection.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.oracle;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.SQLException;
 import java.sql.Types;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleContextImpl.java
Patch:
@@ -15,9 +15,9 @@
  */
 package org.flywaydb.core.internal.database.oracle;
 
-import org.flywaydb.core.internal.util.jdbc.ContextImpl;
+import org.flywaydb.core.internal.util.jdbc.StandardContext;
 
-public class OracleContextImpl extends ContextImpl {
+public class OracleContextImpl extends StandardContext {
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSchema.java
Patch:
@@ -19,8 +19,8 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -18,8 +18,8 @@
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.database.Delimiter;
-import org.flywaydb.core.internal.database.SqlStatementBuilder;
+import org.flywaydb.core.internal.sqlscript.Delimiter;
+import org.flywaydb.core.internal.sqlscript.SqlStatementBuilder;
 import org.flywaydb.core.internal.sqlscript.SqlStatement;
 import org.flywaydb.core.internal.util.StringUtils;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleTable.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.flywaydb.core.internal.database.oracle;
 
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLConnection.java
Patch:
@@ -16,9 +16,9 @@
 package org.flywaydb.core.internal.database.postgresql;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.StringUtils;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSchema.java
Patch:
@@ -15,9 +15,9 @@
  */
 package org.flywaydb.core.internal.database.postgresql;
 
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
-import org.flywaydb.core.internal.database.Type;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
+import org.flywaydb.core.internal.database.base.Type;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLTable.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.flywaydb.core.internal.database.postgresql;
 
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLType.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.flywaydb.core.internal.database.postgresql;
 
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Type;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Type;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftConnection.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.redshift;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.StringUtils;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftSchema.java
Patch:
@@ -16,9 +16,9 @@
 package org.flywaydb.core.internal.database.redshift;
 
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
-import org.flywaydb.core.internal.database.Type;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
+import org.flywaydb.core.internal.database.base.Type;
 
 import java.sql.SQLException;
 import java.util.ArrayList;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftTable.java
Patch:
@@ -15,9 +15,9 @@
  */
 package org.flywaydb.core.internal.database.redshift;
 
-import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Database;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftType.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.flywaydb.core.internal.database.redshift;
 
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Type;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Type;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAConnection.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.saphana;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.SQLException;
 import java.sql.Types;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANASchema.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.saphana;
 
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;
 import java.util.ArrayList;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANATable.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.flywaydb.core.internal.database.saphana;
 
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteConnection.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.sqlite;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.Types;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteSchema.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.sqlite;
 
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteTable.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.flywaydb.core.internal.database.sqlite;
 
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerConnection.java
Patch:
@@ -16,9 +16,9 @@
 package org.flywaydb.core.internal.database.sqlserver;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSchema.java
Patch:
@@ -17,8 +17,8 @@
 
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.util.jdbc.RowMapper;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerTable.java
Patch:
@@ -15,9 +15,9 @@
  */
 package org.flywaydb.core.internal.database.sqlserver;
 
-import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Database;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEConnection.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.sybasease;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Schema;
 
 import java.sql.Types;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASESchema.java
Patch:
@@ -15,9 +15,9 @@
  */
 package org.flywaydb.core.internal.database.sybasease;
 
+import org.flywaydb.core.internal.database.base.Schema;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Table;
 
 import java.sql.SQLException;
 import java.util.List;
@@ -57,7 +57,7 @@ protected void doDrop() throws SQLException {
     /**
      * This clean method is equivalent to cleaning the whole database.
      *
-     * @see org.flywaydb.core.internal.database.Schema#doClean()
+     * @see Schema#doClean()
      */
     @Override
     protected void doClean() throws SQLException {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASESqlStatementBuilder.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.database.sybasease;
 
-import org.flywaydb.core.internal.database.Delimiter;
-import org.flywaydb.core.internal.database.SqlStatementBuilder;
+import org.flywaydb.core.internal.sqlscript.Delimiter;
+import org.flywaydb.core.internal.sqlscript.SqlStatementBuilder;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/android/AndroidLog.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.logging.android;
+package org.flywaydb.core.internal.logging.android;
 
 import org.flywaydb.core.api.logging.Log;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/android/AndroidLogCreator.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.logging.android;
+package org.flywaydb.core.internal.logging.android;
 
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogCreator;

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/apachecommons/ApacheCommonsLog.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.logging.apachecommons;
+package org.flywaydb.core.internal.logging.apachecommons;
 
 import org.flywaydb.core.api.logging.Log;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/apachecommons/ApacheCommonsLogCreator.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.logging.apachecommons;
+package org.flywaydb.core.internal.logging.apachecommons;
 
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogCreator;

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/apachecommons/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.util.logging.javautil;
\ No newline at end of file
+package org.flywaydb.core.internal.logging.apachecommons;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/console/ConsoleLog.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.logging.console;
+package org.flywaydb.core.internal.logging.console;
 
 import org.flywaydb.core.api.logging.Log;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/console/ConsoleLogCreator.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.logging.console;
+package org.flywaydb.core.internal.logging.console;
 
-import org.flywaydb.core.internal.util.logging.console.ConsoleLog.Level;
+import org.flywaydb.core.internal.logging.console.ConsoleLog.Level;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogCreator;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/console/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.util.logging.console;
\ No newline at end of file
+package org.flywaydb.core.internal.logging.console;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/javautil/JavaUtilLog.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.logging.javautil;
+package org.flywaydb.core.internal.logging.javautil;
 
 import org.flywaydb.core.api.logging.Log;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/javautil/JavaUtilLogCreator.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.logging.javautil;
+package org.flywaydb.core.internal.logging.javautil;
 
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogCreator;

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.util.logging;
\ No newline at end of file
+package org.flywaydb.core.internal.logging;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/slf4j/Slf4jLog.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.logging.slf4j;
+package org.flywaydb.core.internal.logging.slf4j;
 
 import org.flywaydb.core.api.logging.Log;
 import org.slf4j.Logger;

File: flyway-core/src/main/java/org/flywaydb/core/internal/logging/slf4j/Slf4jLogCreator.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.logging.slf4j;
+package org.flywaydb.core.internal.logging.slf4j;
 
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogCreator;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/CompositeMigrationResolver.java
Patch:
@@ -21,7 +21,8 @@
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
-import org.flywaydb.core.internal.database.Database;
+import org.flywaydb.core.internal.callback.CallbackExecutor;
+import org.flywaydb.core.internal.database.base.Database;
 import org.flywaydb.core.internal.resolver.jdbc.JdbcMigrationResolver;
 import org.flywaydb.core.internal.resolver.spring.SpringJdbcMigrationResolver;
 import org.flywaydb.core.internal.resolver.sql.SqlMigrationResolver;

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/JdbcTableSchemaHistory.java
Patch:
@@ -21,9 +21,9 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
-import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Connection;
+import org.flywaydb.core.internal.database.base.Database;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.util.jdbc.RowMapper;

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/SchemaHistory.java
Patch:
@@ -18,8 +18,8 @@
 import org.flywaydb.core.api.MigrationType;
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 import org.flywaydb.core.internal.util.AbbreviationUtils;
 import org.flywaydb.core.internal.util.StringUtils;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/SchemaHistoryFactory.java
Patch:
@@ -16,9 +16,9 @@
 package org.flywaydb.core.internal.schemahistory;
 
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.database.base.Database;
+import org.flywaydb.core.internal.database.base.Schema;
+import org.flywaydb.core.internal.database.base.Table;
 
 /**
  * Factory to obtain a reference to the schema history.

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/Delimiter.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.database;
+package org.flywaydb.core.internal.sqlscript;
 
 /**
  * Represents a sql statement delimiter.

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/SqlStatement.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.sqlscript;
 
-import org.flywaydb.core.internal.util.jdbc.ContextImpl;
+import org.flywaydb.core.internal.util.jdbc.StandardContext;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.util.jdbc.Result;
 
@@ -25,7 +25,7 @@
 /**
  * A sql statement from a script that can be executed at once against a database.
  */
-public interface SqlStatement<C extends ContextImpl> {
+public interface SqlStatement<C extends StandardContext> {
     /**
      * @return The original line number where the statement was located in the script it came from.
      */

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/DriverDataSource.java
Patch:
@@ -260,6 +260,9 @@ private String detectBackupDriverForUrl(String url) {
                 return MYSQL_JDBC_DRIVER;
             }
 
+            LOG.warn("You are attempting to connect to a MySQL database using the MariaDB driver." +
+                    " This is known to cause issues." +
+                    " An upgrade to Oracle's MySQL JDBC driver is highly recommended.");
             return MARIADB_JDBC_DRIVER;
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/JdbcTemplate.java
Patch:
@@ -234,7 +234,7 @@ public void execute(String sql, Object... params) throws SQLException {
      * @param sql The statement to execute.
      * @throws SQLException when the execution failed.
      */
-    public List<Result> executeStatement(ContextImpl errorContext, String sql) throws SQLException {
+    public List<Result> executeStatement(StandardContext errorContext, String sql) throws SQLException {
         Statement statement = null;
         try {
             statement = connection.createStatement();

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/StandardContext.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class ContextImpl implements Context {
+public class StandardContext implements Context {
     private final List<Warning> warnings = new ArrayList<>();
     private final List<Error> errors = new ArrayList<>();
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSqlStatementBuilder.java
Patch:
@@ -34,7 +34,7 @@ public class SQLServerSqlStatementBuilder extends SqlStatementBuilder {
     /**
      * Regex for keywords that can appear after a string literal without being separated by a space.
      */
-    private static final Pattern KEYWORDS_AFTER_STRING_LITERAL_REGEX = Pattern.compile("(.*')(LIKE|AS)");
+    private static final Pattern KEYWORDS_AFTER_STRING_LITERAL_REGEX = Pattern.compile("(.*')(LIKE|AS)$");
 
     private static final Pattern NON_TRANSACTIONAL_STATEMENT_REGEX = Pattern.compile("^(BACKUP|RESTORE|(CREATE|DROP|ALTER) DATABASE) .*");
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoDumper.java
Patch:
@@ -72,7 +72,7 @@ public static String dumpToAsciiTable(MigrationInfo[] migrationInfos) {
             rows.add(row);
         }
 
-        return new AsciiTable(columns, rows, "", "No migrations found").render();
+        return new AsciiTable(columns, rows, true, "", "No migrations found").render();
     }
 
     static String getCategory(MigrationInfo migrationInfo) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASESqlScript.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
-import org.flywaydb.core.internal.database.Delimiter;
 import org.flywaydb.core.internal.database.ExecutableSqlScript;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
@@ -45,6 +44,6 @@ class SybaseASESqlScript extends ExecutableSqlScript {
 
     @Override
     protected SqlStatementBuilder createSqlStatementBuilder() {
-        return new SybaseASESqlStatementBuilder(Delimiter.GO);
+        return new SybaseASESqlStatementBuilder();
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywayEnterpriseUpgradeRequiredException.java
Patch:
@@ -19,12 +19,13 @@
 
 /**
  * Thrown when an attempt was made to migrate an older database version no longer enjoying regular support by its
- * vendor and no longer supported by Flyway Open Source and Flyway Pro.
+ * vendor and no longer supported by Flyway Community Edition and Flyway Pro Edition.
  */
 public class FlywayEnterpriseUpgradeRequiredException extends FlywayException {
     public FlywayEnterpriseUpgradeRequiredException(String vendor, String database, String version) {
         super("Flyway Enterprise or " + database + " upgrade required: " + database + " " + version
                 + " is past regular support by " + vendor
-                + " and no longer supported by Flyway Open Source or Pro, but still supported by Flyway Enterprise.");
+                + " and no longer supported by Flyway Community Edition and Flyway Pro Edition,"
+                + " but still supported by Flyway Enterprise Edition.");
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2SqlStatementBuilder.java
Patch:
@@ -101,7 +101,7 @@ protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter)
             currentDelimiter = delimiter;
         }
 
-        if (StringUtils.countOccurrencesOf(statementStart, " ") < 4) {
+        if (hasNonCommentPart() && StringUtils.countOccurrencesOf(statementStart, " ") < 4) {
             statementStart += line;
             statementStart += " ";
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSqlStatementBuilder.java
Patch:
@@ -90,7 +90,7 @@ protected void applyStateChanges(String line) {
 
         super.applyStateChanges(line);
 
-        if (!executeInTransaction) {
+        if (!executeInTransaction || !hasNonCommentPart()) {
             return;
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftSqlStatementBuilder.java
Patch:
@@ -46,7 +46,7 @@ public class RedshiftSqlStatementBuilder extends SqlStatementBuilder {
     protected void applyStateChanges(String line) {
         super.applyStateChanges(line);
 
-        if (!executeInTransaction) {
+        if (!executeInTransaction || !hasNonCommentPart()) {
             return;
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANASqlStatementBuilder.java
Patch:
@@ -53,9 +53,8 @@ protected String cleanToken(String token) {
 
     @Override
     protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter) {
-
         // need only accumulate 16 characters of normalized statement start in order to determine if it is an 'interesting' statement
-        if (statementStartNormalized.length() < 16) {
+        if (hasNonCommentPart() && statementStartNormalized.length() < 16) {
             final String effectiveLine = cutCommentsFromEnd(line);
             statementStartNormalized += effectiveLine + " ";
             statementStartNormalized = StringUtils.trimLeadingWhitespace(StringUtils.collapseWhitespace(statementStartNormalized));

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteSqlStatementBuilder.java
Patch:
@@ -34,7 +34,7 @@ public class SQLiteSqlStatementBuilder extends SqlStatementBuilder {
 
     @Override
     protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter) {
-        if (StringUtils.countOccurrencesOf(statementStart, " ") < 8) {
+        if (hasNonCommentPart() && StringUtils.countOccurrencesOf(statementStart, " ") < 8) {
             statementStart += line;
             statementStart += " ";
             statementStart = StringUtils.collapseWhitespace(statementStart);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSqlStatementBuilder.java
Patch:
@@ -51,7 +51,7 @@ public SQLServerSqlStatementBuilder(Delimiter defaultDelimiter) {
     protected void applyStateChanges(String line) {
         super.applyStateChanges(line);
 
-        if (!executeInTransaction) {
+        if (!executeInTransaction || !hasNonCommentPart()) {
             return;
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/AbstractLoadableResource.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.util.IOUtils;
+import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.line.Line;
 import org.flywaydb.core.internal.util.line.LineReader;
 
@@ -37,7 +38,7 @@ public final int checksum() {
                 Line line;
                 while ((line = lineReader.readLine()) != null) {
                     //noinspection Since15
-                    crc32.update(line.getLine().trim().getBytes("UTF-8"));
+                    crc32.update(StringUtils.trimLineBreak(line.getLine()).getBytes("UTF-8"));
                 }
             } catch (IOException e) {
                 throw new FlywayException("Unable to calculate checksum for " + getLocation()

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Database.java
Patch:
@@ -32,7 +32,9 @@
 import java.nio.charset.Charset;
 import java.sql.DatabaseMetaData;
 import java.sql.SQLException;
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
 /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBDatabase.java
Patch:
@@ -29,6 +29,7 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.util.List;
 
 /**
  * CockroachDB database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBSqlScript.java
Patch:
@@ -23,6 +23,8 @@
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.util.List;
+
 /**
  * CockroachDB-specific SQL script.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Database.java
Patch:
@@ -27,6 +27,7 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.util.List;
 
 /**
  * DB2 database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2SqlScript.java
Patch:
@@ -24,6 +24,8 @@
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.util.List;
+
 /**
  * DB2-specific SQL script.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyDatabase.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.util.List;
 
 /**
  * Derby database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbySqlScript.java
Patch:
@@ -23,6 +23,8 @@
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.util.List;
+
 /**
  * Derby-specific SQL script.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Database.java
Patch:
@@ -28,6 +28,7 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.util.List;
 
 /**
  * H2 database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2SqlScript.java
Patch:
@@ -23,6 +23,8 @@
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.util.List;
+
 /**
  * H2-specific SQL script.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBDatabase.java
Patch:
@@ -24,6 +24,7 @@
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
 import java.sql.Connection;
+import java.util.List;
 
 /**
  * HSQLDB database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBSqlScript.java
Patch:
@@ -23,6 +23,8 @@
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.util.List;
+
 /**
  * HSQLDB-specific SQL script.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixDatabase.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.util.List;
 
 /**
  * Informix database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixSqlScript.java
Patch:
@@ -24,6 +24,8 @@
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.util.List;
+
 /**
  * DB2-specific SQL script.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabase.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.util.List;
 
 /**
  * MySQL database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLSqlScript.java
Patch:
@@ -24,6 +24,8 @@
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.util.List;
+
 /**
  * MySQL-specific SQL script.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.util.List;
 
 /**
  * PostgreSQL database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSqlScript.java
Patch:
@@ -24,6 +24,8 @@
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.util.List;
+
 /**
  * PostgreSQL-specific SQL script.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftDatabase.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.util.List;
 
 /**
  * Redshift database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftSqlScript.java
Patch:
@@ -24,6 +24,8 @@
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.util.List;
+
 /**
  * Redshift-specific SQL script.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANADatabase.java
Patch:
@@ -23,6 +23,7 @@
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
 import java.sql.Connection;
+import java.util.List;
 
 /**
  * SAP HANA database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANASqlScript.java
Patch:
@@ -24,6 +24,8 @@
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.util.List;
+
 /**
  * SAPHANA-specific SQL script.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteDatabase.java
Patch:
@@ -24,6 +24,7 @@
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
 import java.sql.Connection;
+import java.util.List;
 
 /**
  * SQLite database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteSqlScript.java
Patch:
@@ -23,6 +23,8 @@
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.util.List;
+
 /**
  * SQLite-specific SQL script.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -28,6 +28,7 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.util.List;
 
 /**
  * SQL Server database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSqlScript.java
Patch:
@@ -23,6 +23,8 @@
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.util.List;
+
 /**
  * SQL Server-specific SQL script.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEDatabase.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.util.List;
 
 /**
  * Sybase ASE database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASESqlScript.java
Patch:
@@ -23,6 +23,8 @@
 import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.util.List;
+
 /**
  * Sybase ASE-specific SQL script.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -180,7 +180,8 @@ public Integer call() {
      */
     private Integer migrateGroup(boolean firstRun) {
         MigrationInfoServiceImpl infoService =
-                new MigrationInfoServiceImpl(migrationResolver, schemaHistory, configuration.getTarget(), configuration.isOutOfOrder(), true, true, true, true);
+                new MigrationInfoServiceImpl(migrationResolver, schemaHistory, configuration.getTarget(),
+                        configuration.isOutOfOrder(), true, true, true, true);
         infoService.refresh();
 
         MigrationInfo current = infoService.current();

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/CompositeMigrationResolver.java
Patch:
@@ -67,7 +67,6 @@ public CompositeMigrationResolver(Database database, Scanner scanner, Configurat
                                       PlaceholderReplacer placeholderReplacer,
                                       MigrationResolver... customMigrationResolvers) {
         if (!configuration.isSkipDefaultResolvers()) {
-
             migrationResolvers.add(new SqlMigrationResolver(database, scanner, locations, placeholderReplacer, configuration));
             migrationResolvers.add(new JdbcMigrationResolver(scanner, locations, configuration));
 

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -496,7 +496,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
     private File[] configFiles;
 
     /**
-     * The working directory to consider when dealing with relative paths for both config files and location.
+     * The working directory to consider when dealing with relative paths for both config files and locations.
      * (default: basedir, the directory where the POM resides)
      * <p/>
      * <p>Also configurable with Maven or System Property: ${flyway.workingDirectory}</p>

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/SqlStatementBuilder.java
Patch:
@@ -498,7 +498,7 @@ protected String cleanToken(String token) {
 
     /**
      * Whether the execution should take place inside a transaction. This is useful for databases
-     * like PostgreSQL where certain statement can only execute outside a transaction.
+     * like PostgreSQL or SQL Server where certain statements can only execute outside a transaction.
      *
      * @return {@code true} if a transaction should be used (highly recommended), or {@code false} if not.
      */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSqlStatementBuilder.java
Patch:
@@ -35,7 +35,7 @@ public class PostgreSQLSqlStatementBuilder extends SqlStatementBuilder {
     /*private -> for testing*/
     static final Pattern DOLLAR_QUOTE_REGEX = Pattern.compile("(\\$[A-Za-z0-9_]*\\$).*");
 
-    private static final Pattern CREATE_DATABASE_TABLESPACE_REGEX = Pattern.compile("^(CREATE|DROP) (DATABASE|TABLESPACE) .*");
+    private static final Pattern CREATE_DATABASE_TABLESPACE_SUBSCRIPTION_REGEX = Pattern.compile("^(CREATE|DROP) (DATABASE|TABLESPACE|SUBSCRIPTION) .*");
     private static final Pattern ALTER_SYSTEM_REGEX = Pattern.compile("^ALTER SYSTEM .*");
     private static final Pattern CREATE_INDEX_CONCURRENTLY_REGEX = Pattern.compile("^(CREATE|DROP)( UNIQUE)? INDEX CONCURRENTLY .*");
     private static final Pattern REINDEX_REGEX = Pattern.compile("^REINDEX( VERBOSE)? (SCHEMA|DATABASE|SYSTEM) .*");
@@ -100,7 +100,7 @@ protected void applyStateChanges(String line) {
             statementStart = StringUtils.collapseWhitespace(statementStart);
         }
 
-        if (CREATE_DATABASE_TABLESPACE_REGEX.matcher(statementStart).matches()
+        if (CREATE_DATABASE_TABLESPACE_SUBSCRIPTION_REGEX.matcher(statementStart).matches()
                 || ALTER_SYSTEM_REGEX.matcher(statementStart).matches()
                 || CREATE_INDEX_CONCURRENTLY_REGEX.matcher(statementStart).matches()
                 || REINDEX_REGEX.matcher(statementStart).matches()

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBConnection.java
Patch:
@@ -29,12 +29,12 @@
  */
 public class CockroachDBConnection extends Connection<CockroachDBDatabase> {
     CockroachDBConnection(Configuration configuration, CockroachDBDatabase database,
-                          java.sql.Connection connection
+                          java.sql.Connection connection, boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, database, connection, Types.NULL
+        super(configuration, database, connection, originalAutoCommit, Types.NULL
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBDatabase.java
Patch:
@@ -54,12 +54,12 @@ public static boolean isCockroachDB(Connection connection) {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public CockroachDBDatabase(Configuration configuration, Connection connection
+    public CockroachDBDatabase(Configuration configuration, Connection connection, boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, connection
+        super(configuration, connection, originalAutoCommit
 
 
 
@@ -72,7 +72,7 @@ protected CockroachDBConnection getConnection(Connection connection
 
 
     ) {
-        return new CockroachDBConnection(configuration, this, connection
+        return new CockroachDBConnection(configuration, this, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Connection.java
Patch:
@@ -27,11 +27,12 @@
  */
 public class DB2Connection extends Connection<DB2Database> {
     DB2Connection(Configuration configuration, DB2Database database, java.sql.Connection connection
+            , boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, database, connection, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Database.java
Patch:
@@ -38,12 +38,12 @@ public class DB2Database extends Database<DB2Connection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public DB2Database(Configuration configuration, Connection connection
+    public DB2Database(Configuration configuration, Connection connection, boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, connection
+        super(configuration, connection, originalAutoCommit
 
 
 
@@ -56,7 +56,7 @@ protected DB2Connection getConnection(Connection connection
 
 
     ) {
-        return new DB2Connection(configuration, this, connection
+        return new DB2Connection(configuration, this, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyConnection.java
Patch:
@@ -27,11 +27,12 @@
  */
 public class DerbyConnection extends Connection<DerbyDatabase> {
     DerbyConnection(Configuration configuration, DerbyDatabase database, java.sql.Connection connection
+            , boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, database, connection, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyDatabase.java
Patch:
@@ -36,12 +36,12 @@ public class DerbyDatabase extends Database<DerbyConnection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public DerbyDatabase(Configuration configuration, Connection connection
+    public DerbyDatabase(Configuration configuration, Connection connection, boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, connection
+        super(configuration, connection, originalAutoCommit
 
 
 
@@ -54,7 +54,7 @@ protected DerbyConnection getConnection(Connection connection
 
 
     ) {
-        return new DerbyConnection(configuration, this, connection
+        return new DerbyConnection(configuration, this, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Connection.java
Patch:
@@ -27,11 +27,12 @@
  */
 public class H2Connection extends Connection<H2Database> {
     H2Connection(Configuration configuration, H2Database database, java.sql.Connection connection
+            , boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, database, connection, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Database.java
Patch:
@@ -49,12 +49,12 @@ public class H2Database extends Database<H2Connection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public H2Database(Configuration configuration, Connection connection
+    public H2Database(Configuration configuration, Connection connection, boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, connection
+        super(configuration, connection, originalAutoCommit
 
 
 
@@ -67,7 +67,7 @@ protected H2Connection getConnection(Connection connection
 
 
     ) {
-        return new H2Connection(configuration, this, connection
+        return new H2Connection(configuration, this, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBConnection.java
Patch:
@@ -29,11 +29,12 @@
  */
 public class HSQLDBConnection extends Connection<HSQLDBDatabase> {
     HSQLDBConnection(Configuration configuration, HSQLDBDatabase database, java.sql.Connection connection
+            , boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, database, connection, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBDatabase.java
Patch:
@@ -35,12 +35,12 @@ public class HSQLDBDatabase extends Database<HSQLDBConnection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public HSQLDBDatabase(Configuration configuration, Connection connection
+    public HSQLDBDatabase(Configuration configuration, Connection connection, boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, connection
+        super(configuration, connection, originalAutoCommit
 
 
 
@@ -53,7 +53,7 @@ protected HSQLDBConnection getConnection(Connection connection
 
 
     ) {
-        return new HSQLDBConnection(configuration, this, connection
+        return new HSQLDBConnection(configuration, this, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixConnection.java
Patch:
@@ -27,11 +27,12 @@
  */
 public class InformixConnection extends Connection<InformixDatabase> {
     InformixConnection(Configuration configuration, InformixDatabase database, java.sql.Connection connection
+            , boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, database, connection, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLConnection.java
Patch:
@@ -35,11 +35,12 @@ public class MySQLConnection extends Connection<MySQLDatabase> {
     private static final Log LOG = LogFactory.getLog(MySQLConnection.class);
 
     MySQLConnection(Configuration configuration, MySQLDatabase database, java.sql.Connection connection
+            , boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, database, connection, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabase.java
Patch:
@@ -37,12 +37,12 @@ public class MySQLDatabase extends Database<MySQLConnection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public MySQLDatabase(Configuration configuration, Connection connection
+    public MySQLDatabase(Configuration configuration, Connection connection, boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, connection
+        super(configuration, connection, originalAutoCommit
 
 
 
@@ -55,7 +55,7 @@ protected MySQLConnection getConnection(Connection connection
 
 
     ) {
-        return new MySQLConnection(configuration, this, connection
+        return new MySQLConnection(configuration, this, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleConnection.java
Patch:
@@ -27,11 +27,12 @@
  */
 public class OracleConnection extends Connection<OracleDatabase> {
     OracleConnection(Configuration configuration, OracleDatabase database, java.sql.Connection connection
+            , boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, database, connection, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleDatabase.java
Patch:
@@ -66,12 +66,12 @@ public static void enableTnsnamesOraSupport() {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public OracleDatabase(Configuration configuration, Connection connection
+    public OracleDatabase(Configuration configuration, Connection connection, boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, connection
+        super(configuration, connection, originalAutoCommit
 
 
 
@@ -95,7 +95,7 @@ protected OracleConnection getConnection(Connection connection
 
 
     ) {
-        return new OracleConnection(configuration, this, connection
+        return new OracleConnection(configuration, this, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLConnection.java
Patch:
@@ -32,11 +32,12 @@
 public class PostgreSQLConnection extends Connection<PostgreSQLDatabase> {
 
     PostgreSQLConnection(Configuration configuration, PostgreSQLDatabase database, java.sql.Connection connection
+            , boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, database, connection, Types.NULL
+        super(configuration, database, connection, originalAutoCommit, Types.NULL
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -37,12 +37,12 @@ public class PostgreSQLDatabase extends Database<PostgreSQLConnection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public PostgreSQLDatabase(Configuration configuration, Connection connection
+    public PostgreSQLDatabase(Configuration configuration, Connection connection, boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, connection
+        super(configuration, connection, originalAutoCommit
 
 
 
@@ -55,7 +55,7 @@ protected PostgreSQLConnection getConnection(Connection connection
 
 
     ) {
-        return new PostgreSQLConnection(configuration, this, connection
+        return new PostgreSQLConnection(configuration, this, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftConnection.java
Patch:
@@ -29,11 +29,12 @@
  */
 public class RedshiftConnection extends Connection<RedshiftDatabase> {
     RedshiftConnection(Configuration configuration, RedshiftDatabase database, java.sql.Connection connection
+            , boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, database, connection, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftDatabase.java
Patch:
@@ -51,12 +51,12 @@ public static boolean isRedshift(Connection connection) {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public RedshiftDatabase(Configuration configuration, Connection connection
+    public RedshiftDatabase(Configuration configuration, Connection connection, boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, connection
+        super(configuration, connection, originalAutoCommit
 
 
 
@@ -69,7 +69,7 @@ protected RedshiftConnection getConnection(Connection connection
 
 
     ) {
-        return new RedshiftConnection(configuration, this, connection
+        return new RedshiftConnection(configuration, this, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAConnection.java
Patch:
@@ -24,11 +24,12 @@
 
 public class SAPHANAConnection extends Connection<SAPHANADatabase> {
     SAPHANAConnection(Configuration configuration, SAPHANADatabase database, java.sql.Connection connection
+            , boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, database, connection, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANADatabase.java
Patch:
@@ -33,12 +33,12 @@ public class SAPHANADatabase extends Database<SAPHANAConnection> {
      *
      * @param connection The connection to use.
      */
-    public SAPHANADatabase(Configuration configuration, Connection connection
+    public SAPHANADatabase(Configuration configuration, Connection connection, boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, connection
+        super(configuration, connection, originalAutoCommit
 
 
 
@@ -51,7 +51,7 @@ protected SAPHANAConnection getConnection(Connection connection
 
 
     ) {
-        return new SAPHANAConnection(configuration, this, connection
+        return new SAPHANAConnection(configuration, this, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteConnection.java
Patch:
@@ -26,11 +26,12 @@
  */
 public class SQLiteConnection extends Connection<SQLiteDatabase> {
     SQLiteConnection(Configuration configuration, SQLiteDatabase database, java.sql.Connection connection
+            , boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, database, connection, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteDatabase.java
Patch:
@@ -35,12 +35,12 @@ public class SQLiteDatabase extends Database<SQLiteConnection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public SQLiteDatabase(Configuration configuration, Connection connection
+    public SQLiteDatabase(Configuration configuration, Connection connection, boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, connection
+        super(configuration, connection, originalAutoCommit
 
 
 
@@ -53,7 +53,7 @@ protected SQLiteConnection getConnection(Connection connection
 
 
     ) {
-        return new SQLiteConnection(configuration, this, connection
+        return new SQLiteConnection(configuration, this, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerConnection.java
Patch:
@@ -33,11 +33,12 @@ public class SQLServerConnection extends Connection<SQLServerDatabase> {
     private final String originalAnsiNulls;
 
     SQLServerConnection(Configuration configuration, SQLServerDatabase database, java.sql.Connection connection
+            , boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, database, connection, Types.VARCHAR
+        super(configuration, database, connection, originalAutoCommit, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -41,12 +41,12 @@ public class SQLServerDatabase extends Database<SQLServerConnection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public SQLServerDatabase(Configuration configuration, Connection connection
+    public SQLServerDatabase(Configuration configuration, Connection connection, boolean originalAutoCommit
 
 
 
     ) {
-        super(configuration, connection
+        super(configuration, connection, originalAutoCommit
 
 
 
@@ -65,7 +65,7 @@ protected SQLServerConnection getConnection(Connection connection
 
 
     ) {
-        return new SQLServerConnection(configuration, this, connection
+        return new SQLServerConnection(configuration, this, connection, originalAutoCommit
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEConnection.java
Patch:
@@ -25,12 +25,13 @@
  * Sybase ASE Connection.
  */
 public class SybaseASEConnection extends Connection<SybaseASEDatabase> {
-    SybaseASEConnection(Configuration configuration, SybaseASEDatabase database, java.sql.Connection connection, boolean jconnect
+    SybaseASEConnection(Configuration configuration, SybaseASEDatabase database, java.sql.Connection connection
+            , boolean originalAutoCommit, boolean jconnect
 
 
 
     ) {
-        super(configuration, database, connection, jconnect ? Types.VARCHAR : Types.NULL
+        super(configuration, database, connection, originalAutoCommit, jconnect ? Types.VARCHAR : Types.NULL
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEDatabase.java
Patch:
@@ -40,12 +40,12 @@ public class SybaseASEDatabase extends Database<SybaseASEConnection> {
      * @param connection    The initial connection.
      * @param jconnect      Whether we are using the official jConnect driver or not (jTDS).
      */
-    public SybaseASEDatabase(Configuration configuration, Connection connection, boolean jconnect
+    public SybaseASEDatabase(Configuration configuration, Connection connection, boolean originalAutoCommit, boolean jconnect
 
 
 
     ) {
-        super(configuration, connection
+        super(configuration, connection, originalAutoCommit
 
 
 
@@ -59,7 +59,7 @@ protected SybaseASEConnection getConnection(Connection connection
 
 
     ) {
-        return new SybaseASEConnection(configuration, this, connection, jconnect
+        return new SybaseASEConnection(configuration, this, connection, originalAutoCommit, jconnect
 
 
 

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -295,6 +295,7 @@ private static void printUsage() {
         LOG.info("jarDirs                      : Comma-separated list of dirs for Jdbc drivers & Java migrations");
         LOG.info("dryRunOutput                 : [" + "pro] File where to output the SQL statements of a migration dry run");
         LOG.info("errorHandlers                : [" + "pro] Comma-separated list of handlers for errors and warnings");
+        LOG.info("oracle.sqlplus               : [" + "pro] Oracle SQL*Plus command support");
         LOG.info("");
         LOG.info("Flags");
         LOG.info("-----");

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptFlywayCallbackFactory.java
Patch:
@@ -25,7 +25,7 @@
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 import org.flywaydb.core.internal.util.scanner.Scanner;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/SqlScript.java
Patch:
@@ -16,9 +16,9 @@
 package org.flywaydb.core.internal.database;
 
 import org.flywaydb.core.internal.sqlscript.SqlStatement;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.jdbc.ContextImpl;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
 import java.util.List;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBDatabase.java
Patch:
@@ -22,7 +22,7 @@
 import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.Pair;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
@@ -97,11 +97,11 @@ protected SqlScript doCreateSqlScript(LoadableResource sqlScriptResource,
 
 
     ) {
-        return new CockroachDBSqlScript(sqlScriptResource, placeholderReplacer, mixed
+        return new CockroachDBSqlScript(configuration, sqlScriptResource, mixed
 
 
 
-        );
+                , placeholderReplacer);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Database.java
Patch:
@@ -21,7 +21,7 @@
 import org.flywaydb.core.internal.database.SqlScript;
 import org.flywaydb.core.internal.database.Table;
 import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 import org.flywaydb.core.internal.util.scanner.StringResource;
 
@@ -87,11 +87,11 @@ protected SqlScript doCreateSqlScript(LoadableResource resource,
 
 
     ) {
-        return new DB2SqlScript(resource, placeholderReplacer, mixed
+        return new DB2SqlScript(configuration, resource, mixed
 
 
 
-        );
+                , placeholderReplacer);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/informix/InformixDatabase.java
Patch:
@@ -20,7 +20,7 @@
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
 import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 import org.flywaydb.core.internal.util.scanner.StringResource;
 
@@ -81,11 +81,11 @@ protected SqlScript doCreateSqlScript(LoadableResource resource,
 
 
     ) {
-        return new InformixSqlScript(resource, placeholderReplacer, mixed
+        return new InformixSqlScript(configuration, resource, mixed
 
 
 
-        );
+                , placeholderReplacer);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabase.java
Patch:
@@ -21,7 +21,7 @@
 import org.flywaydb.core.internal.database.SqlScript;
 import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
 import java.sql.Connection;
@@ -104,11 +104,11 @@ protected SqlScript doCreateSqlScript(LoadableResource sqlScriptResource,
 
 
     ) {
-        return new MySQLSqlScript(sqlScriptResource, placeholderReplacer, mixed
+        return new MySQLSqlScript(configuration, sqlScriptResource, mixed
 
 
 
-        );
+                , placeholderReplacer);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -20,7 +20,7 @@
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
 import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
@@ -86,11 +86,11 @@ protected SqlScript doCreateSqlScript(LoadableResource sqlScriptResource,
 
 
     ) {
-        return new PostgreSQLSqlScript(sqlScriptResource, placeholderReplacer, mixed
+        return new PostgreSQLSqlScript(configuration, sqlScriptResource, mixed
 
 
 
-        );
+                , placeholderReplacer);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftDatabase.java
Patch:
@@ -19,9 +19,9 @@
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
 import java.sql.Connection;
@@ -88,11 +88,11 @@ protected SqlScript doCreateSqlScript(LoadableResource sqlScriptResource,
 
 
     ) {
-        return new RedshiftSqlScript(sqlScriptResource, placeholderReplacer, mixed
+        return new RedshiftSqlScript(configuration, sqlScriptResource, mixed
 
 
 
-        );
+                , placeholderReplacer);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANADatabase.java
Patch:
@@ -19,7 +19,7 @@
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
 import java.sql.Connection;
@@ -80,11 +80,11 @@ protected SqlScript doCreateSqlScript(LoadableResource sqlScriptResource,
 
 
     ) {
-        return new SAPHANASqlScript(sqlScriptResource, placeholderReplacer, mixed
+        return new SAPHANASqlScript(configuration, sqlScriptResource, mixed
 
 
 
-        );
+                , placeholderReplacer);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteDatabase.java
Patch:
@@ -20,7 +20,7 @@
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
 import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
 import java.sql.Connection;
@@ -76,11 +76,11 @@ protected SqlScript doCreateSqlScript(LoadableResource sqlScriptResource,
 
 
     ) {
-        return new SQLiteSqlScript(sqlScriptResource, placeholderReplacer, mixed
+        return new SQLiteSqlScript(configuration, sqlScriptResource, mixed
 
 
 
-        );
+                , placeholderReplacer);
     }
 
     public String getDbName() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -22,7 +22,7 @@
 import org.flywaydb.core.internal.database.SqlScript;
 import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
@@ -127,11 +127,11 @@ protected SqlScript doCreateSqlScript(LoadableResource sqlScriptResource,
 
 
     ) {
-        return new SQLServerSqlScript(sqlScriptResource, placeholderReplacer, mixed
+        return new SQLServerSqlScript(configuration, sqlScriptResource, mixed
 
 
 
-        );
+                , placeholderReplacer);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEDatabase.java
Patch:
@@ -21,7 +21,7 @@
 import org.flywaydb.core.internal.database.Delimiter;
 import org.flywaydb.core.internal.database.SqlScript;
 import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
 import java.sql.Connection;
@@ -85,11 +85,11 @@ protected SqlScript doCreateSqlScript(LoadableResource sqlScriptResource,
 
 
     ) {
-        return new SybaseASESqlScript(sqlScriptResource, placeholderReplacer, mixed
+        return new SybaseASESqlScript(configuration, sqlScriptResource, mixed
 
 
 
-        );
+                , placeholderReplacer);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/CompositeMigrationResolver.java
Patch:
@@ -18,16 +18,14 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.Location;
 import org.flywaydb.core.api.configuration.Configuration;
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.resolver.jdbc.JdbcMigrationResolver;
 import org.flywaydb.core.internal.resolver.spring.SpringJdbcMigrationResolver;
 import org.flywaydb.core.internal.resolver.sql.SqlMigrationResolver;
 import org.flywaydb.core.internal.util.FeatureDetector;
-import org.flywaydb.core.internal.util.Locations;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.Scanner;
 
 import java.util.ArrayList;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationExecutor.java
Patch:
@@ -19,7 +19,7 @@
 import org.flywaydb.core.api.resolver.MigrationExecutor;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
 import java.sql.Connection;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolver.java
Patch:
@@ -27,7 +27,7 @@
 import org.flywaydb.core.internal.resolver.ResolvedMigrationComparator;
 import org.flywaydb.core.internal.resolver.ResolvedMigrationImpl;
 import org.flywaydb.core.internal.util.Pair;
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 import org.flywaydb.core.internal.util.scanner.Resource;
 import org.flywaydb.core.internal.util.scanner.Scanner;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/line/PlaceholderReplacingLine.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.util.line;
 
-import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.placeholder.PlaceholderReplacer;
 
 public class PlaceholderReplacingLine implements Line {
     private final Line line;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Schema.java
Patch:
@@ -49,7 +49,7 @@ protected boolean doExists() throws SQLException {
     }
 
     @Override
-    protected boolean doEmpty() throws SQLException {
+    protected boolean doEmpty() {
         return allTables().length == 0;
     }
 
@@ -60,7 +60,8 @@ protected void doCreate() throws SQLException {
 
     @Override
     protected void doDrop() throws SQLException {
-        jdbcTemplate.execute("DROP SCHEMA " + database.quote(name));
+        jdbcTemplate.execute("DROP SCHEMA " + database.quote(name)
+                + (database.supportsDropSchemaCascade ? " CASCADE" : ""));
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabase.java
Patch:
@@ -91,7 +91,7 @@ protected final void ensureSupported() {
                 if (majorVersion > 10 || (majorVersion == 10 && minorVersion > 2)) {
                     recommendFlywayUpgrade(productName, version);
                 }
-            } else {
+            } else if (majorVersion > 8 || (majorVersion == 8 && minorVersion > 0)) {
                 recommendFlywayUpgrade(productName, version);
             }
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseFactory.java
Patch:
@@ -65,10 +65,10 @@ public static Database createDatabase(Configuration configuration, boolean print
 
 
     ) {
-        Connection connection = JdbcUtils.openConnection(configuration.getDataSource());
+        OracleDatabase.enableTnsnamesOraSupport();
 
+        Connection connection = JdbcUtils.openConnection(configuration.getDataSource());
         String databaseProductName = getDatabaseProductName(connection);
-
         if (printInfo) {
             LOG.info("Database: " + getJdbcUrl(connection) + " (" + databaseProductName + ")");
         }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -269,6 +269,7 @@ private static void printUsage() {
         LOG.info("sqlMigrationSeparator        : File name separator for SQL migrations");
         LOG.info("sqlMigrationSuffixes         : Comma-separated list of file name suffixes for SQL migrations");
         LOG.info("stream                       : [" + "pro] Stream SQL migrations when executing them");
+        LOG.info("batch                        : [" + "pro] Batch SQL statements when executing them");
         LOG.info("mixed                        : Allow mixing transactional and non-transactional statements");
         LOG.info("encoding                     : Encoding of SQL migrations");
         LOG.info("placeholderReplacement       : Whether placeholders should be replaced");

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBDatabase.java
Patch:
@@ -85,7 +85,7 @@ protected final void ensureSupported() {
         if (majorVersion < 1 || (majorVersion == 1 && minorVersion < 1)) {
             throw new FlywayDbUpgradeRequiredException("CockroachDB", version, "1.1");
         }
-        if (majorVersion > 1) {
+        if (majorVersion > 2 || (majorVersion == 2 && minorVersion > 0)) {
             recommendFlywayUpgrade("CockroachDB", version);
         }
     }

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1128,7 +1128,7 @@ public int undo() throws FlywayException {
      * <li>versions have been applied that aren't resolved locally anymore</li>
      * <li>versions have been resolved that haven't been applied yet</li>
      * </ul>
-     * <p>
+     *
      * <img src="https://flywaydb.org/assets/balsamiq/command-validate.png" alt="validate">
      *
      * @throws FlywayException when the validation failed.
@@ -1224,7 +1224,7 @@ public MigrationInfoService execute(MigrationResolver migrationResolver, SchemaH
 
     /**
      * <p>Baselines an existing database, excluding all migrations up to and including baselineVersion.</p>
-     * <p>
+     *
      * <img src="https://flywaydb.org/assets/balsamiq/command-baseline.png" alt="baseline">
      *
      * @throws FlywayException when the schema baselining failed.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/ExecutableSqlScript.java
Patch:
@@ -279,6 +279,7 @@ private void addStatement(List<SqlStatement<C>> statements, SqlStatementBuilder
                             + (sqlStatementBuilder.executeInTransaction() ? "" : " [non-transactional]"));
         }
 
-        LOG.debug("Found statement at line " + sqlStatement.getLineNumber() + ": " + sqlStatement.getSql() + (sqlStatementBuilder.executeInTransaction() ? "" : " [non-transactional]"));
+        LOG.debug("Found statement at line " + sqlStatement.getLineNumber() + ": " + sqlStatement.getSql()
+                + (sqlStatementBuilder.executeInTransaction() ? "" : " [non-transactional]"));
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLSqlStatementBuilder.java
Patch:
@@ -29,10 +29,10 @@ public class MySQLSqlStatementBuilder extends SqlStatementBuilder {
      * The keyword that indicates a change in delimiter.
      */
     private static final String DELIMITER_KEYWORD = "DELIMITER";
-    private final String[] charSets = {
+    private static final String[] CHARSETS = {
             "ARMSCII8", "ASCII", "BIG5", "BINARY", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932",
             "DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1",
-            "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF8"
+            "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF8", "UTF8MB4"
     };
 
     /*private -> testing*/ boolean isInMultiLineCommentDirective = false;
@@ -98,7 +98,7 @@ protected String cleanToken(String token) {
         }
 
         if (token.startsWith("_")) {
-            for (String charSet : charSets) {
+            for (String charSet : CHARSETS) {
                 String cast = "_" + charSet;
                 if (token.startsWith(cast)) {
                     return token.substring(cast.length());

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLSqlStatementBuilder.java
Patch:
@@ -43,7 +43,8 @@ public MySQLSqlStatementBuilder(Delimiter defaultDelimiter) {
 
     @Override
     public Delimiter extractNewDelimiterFromLine(String line) {
-        if (line.toUpperCase().startsWith(DELIMITER_KEYWORD)) {
+        if (!insideMultiLineComment && !insideQuoteStringLiteral && !insideAlternateQuoteStringLiteral &&
+                line.toUpperCase().startsWith(DELIMITER_KEYWORD)) {
             return new Delimiter(line.substring(DELIMITER_KEYWORD.length()).trim(), false);
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -187,7 +187,7 @@ public OracleSqlStatementBuilder(Delimiter defaultDelimiter) {
     protected void applyStateChanges(String line) {
         super.applyStateChanges(line);
 
-        if (StringUtils.countOccurrencesOf(statementStart, " ") < 8) {
+        if (hasNonCommentPart() && StringUtils.countOccurrencesOf(statementStart, " ") < 8) {
             statementStart += line;
             statementStart += " ";
             statementStart = StringUtils.collapseWhitespace(statementStart);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/SqlStatementBuilder.java
Patch:
@@ -41,12 +41,12 @@ public abstract class SqlStatementBuilder {
     /**
      * Are we currently inside a ' multi-line string literal.
      */
-    private boolean insideQuoteStringLiteral = false;
+    protected boolean insideQuoteStringLiteral = false;
 
     /**
      * Are we currently inside an alternate multi-line string literal.
      */
-    private boolean insideAlternateQuoteStringLiteral = false;
+    protected boolean insideAlternateQuoteStringLiteral = false;
 
     /**
      * The alternate quote that is expected to close the string literal.
@@ -61,7 +61,7 @@ public abstract class SqlStatementBuilder {
     /**
      * Are we inside a multi-line /*  *&#47; comment.
      */
-    private boolean insideMultiLineComment = false;
+    protected boolean insideMultiLineComment = false;
 
     /**
      * Whether a non-comment part of a statement has already been seen.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/Configuration.java
Patch:
@@ -23,6 +23,7 @@
 
 import javax.sql.DataSource;
 import java.io.OutputStream;
+import java.nio.charset.Charset;
 import java.util.Map;
 
 /**
@@ -201,7 +202,7 @@ public interface Configuration {
      *
      * @return The encoding of Sql migrations. (default: UTF-8)
      */
-    String getEncoding();
+    Charset getEncoding();
 
     /**
      * Retrieves the locations to scan recursively for migrations.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptFlywayCallbackFactory.java
Patch:
@@ -88,7 +88,7 @@ public SqlScriptFlywayCallbackFactory(Database database, Scanner scanner, List<L
                                 "-> " + resource.getLocationOnDisk());
                     }
                     SqlScript sqlScript = database.createSqlScript(resource,
-                            placeholderReplacer.replacePlaceholders(resource.loadAsString(configuration.getEncoding())),
+                            placeholderReplacer,
                             configuration.isMixed()
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -36,6 +36,7 @@
 import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.StringReader;
+import java.nio.charset.Charset;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
@@ -226,7 +227,7 @@ public String[] getSchemas() {
                 }
 
                 @Override
-                public String getEncoding() {
+                public Charset getEncoding() {
                     return configuration.getEncoding();
                 }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBSqlStatementBuilder.java
Patch:
@@ -19,6 +19,7 @@
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 import org.flywaydb.core.internal.util.StringUtils;
 
+import java.util.Collection;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -37,8 +38,8 @@ public class CockroachDBSqlStatementBuilder extends SqlStatementBuilder {
     }
 
     @Override
-    protected String[] tokenizeLine(String line) {
-        return StringUtils.tokenizeToStringArray(line, " @<>;:=|(),+{}\\[\\]");
+    protected Collection<String> tokenizeLine(String line) {
+        return StringUtils.tokenizeToStringCollection(line, " @<>;:=|(),+{}[]");
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2SqlStatementBuilder.java
Patch:
@@ -19,6 +19,7 @@
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 import org.flywaydb.core.internal.util.StringUtils;
 
+import java.util.Collection;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -129,7 +130,7 @@ protected boolean isBlockEndToken(String token) {
     }
 
     @Override
-    protected String[] tokenizeLine(String line) {
+    protected Collection<String> tokenizeLine(String line) {
         String processedLine = line;
         if (previousLine.endsWith("END")) {
             if (line.startsWith("IF")) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -18,8 +18,8 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.Delimiter;
-import org.flywaydb.core.internal.sqlscript.SqlStatement;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
+import org.flywaydb.core.internal.sqlscript.SqlStatement;
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.util.regex.Matcher;
@@ -180,6 +180,7 @@ public OracleSqlStatementBuilder(Delimiter defaultDelimiter) {
 
 
 
+
 
 
     @Override
@@ -189,7 +190,7 @@ protected void applyStateChanges(String line) {
         if (StringUtils.countOccurrencesOf(statementStart, " ") < 8) {
             statementStart += line;
             statementStart += " ";
-            statementStart = statementStart.replaceAll("\\s+", " ");
+            statementStart = StringUtils.collapseWhitespace(statementStart);
         }
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteSqlStatementBuilder.java
Patch:
@@ -37,7 +37,7 @@ protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter)
         if (StringUtils.countOccurrencesOf(statementStart, " ") < 8) {
             statementStart += line;
             statementStart += " ";
-            statementStart = statementStart.replaceAll("\\s+", " ");
+            statementStart = StringUtils.collapseWhitespace(statementStart);
         }
         boolean createTriggerStatement = statementStart.matches("CREATE( TEMP| TEMPORARY)? TRIGGER.*");
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSqlStatementBuilder.java
Patch:
@@ -51,7 +51,7 @@ protected void applyStateChanges(String line) {
         if (StringUtils.countOccurrencesOf(statementStart, " ") < 3) {
             statementStart += line;
             statementStart += " ";
-            statementStart = statementStart.replaceAll("\\s+", " ");
+            statementStart = StringUtils.collapseWhitespace(statementStart);
         }
 
         if (statementStart.matches("^(BACKUP|RESTORE|ALTER DATABASE) .*")) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/MigrationInfoHelper.java
Patch:
@@ -57,7 +57,7 @@ public static Pair<MigrationVersion, String> extractVersionAndDescription(String
         }
 
         String version = cleanMigrationName.substring(0, descriptionPos);
-        String description = cleanMigrationName.substring(descriptionPos + separator.length()).replaceAll("_", " ");
+        String description = cleanMigrationName.substring(descriptionPos + separator.length()).replace("_", " ");
         if (StringUtils.hasText(version)) {
             if (repeatable) {
                 throw new FlywayException("Wrong repeatable migration name format: " + migrationName

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationExecutor.java
Patch:
@@ -78,7 +78,7 @@ public void execute(Connection connection) {
     private synchronized SqlScript getSqlScript() {
         if (sqlScript == null) {
             sqlScript = database.createSqlScript(resource,
-                    placeholderReplacer.replacePlaceholders(resource.loadAsString(configuration.getEncoding())),
+                    placeholderReplacer,
                     configuration.isMixed()
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ResourceAndClassScanner.java
Patch:
@@ -18,6 +18,8 @@
 import org.flywaydb.core.api.Location;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
+import java.nio.charset.Charset;
+
 /**
  * Scanner for both resources and classes.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSchema.java
Patch:
@@ -79,7 +79,8 @@ protected boolean doEmpty() throws SQLException {
 
     @Override
     protected void doCreate() throws SQLException {
-        jdbcTemplate.execute("CREATE USER " + database.quote(name) + " IDENTIFIED BY flyway");
+        jdbcTemplate.execute("CREATE USER " + database.quote(name) + " IDENTIFIED BY "
+                + database.quote("FFllyywwaayy00!!"));
         jdbcTemplate.execute("GRANT RESOURCE TO " + database.quote(name));
         jdbcTemplate.execute("GRANT UNLIMITED TABLESPACE TO " + database.quote(name));
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -19,7 +19,6 @@
 import org.flywaydb.core.api.Location;
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.api.callback.Callback;
-import org.flywaydb.core.api.callback.FlywayCallback;
 import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.configuration.ConfigurationAware;
 import org.flywaydb.core.api.configuration.FlywayConfiguration;

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ConfigurationAware.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.api.configuration;
 
 /**
- * Marks a class as configuration aware (callbacks, resolvers and migrations). Configuration aware classes
- * get the flyway master configuration injected upon creation. The implementer is responsible for correctly storing
+ * Marks a class as configuration aware (executors, resolvers and migrations). Configuration aware classes
+ * get the Flyway master configuration injected upon creation. The implementer is responsible for correctly storing
  * the provided {@link FlywayConfiguration} (usually in a field).
  */
 public interface ConfigurationAware {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Connection.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
@@ -35,7 +35,7 @@ public abstract class Connection<D extends Database> implements Closeable {
      */
     protected final String originalSchemaNameOrSearchPath;
 
-    protected Connection(FlywayConfiguration configuration, D database, java.sql.Connection connection, int nullType
+    protected Connection(Configuration configuration, D database, java.sql.Connection connection, int nullType
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Database.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
@@ -41,7 +41,7 @@ public abstract class Database<C extends Connection> implements Closeable {
     /**
      * The Flyway configuration.
      */
-    protected final FlywayConfiguration configuration;
+    protected final Configuration configuration;
 
     /**
      * The JDBC metadata to use.
@@ -83,7 +83,7 @@ public abstract class Database<C extends Connection> implements Closeable {
      * @param configuration The Flyway configuration.
      * @param connection    The main connection to use.
      */
-    public Database(FlywayConfiguration configuration, java.sql.Connection connection
+    public Database(Configuration configuration, java.sql.Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseFactory.java
Patch:
@@ -16,6 +16,7 @@
 package org.flywaydb.core.internal.database;
 
 import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
@@ -59,7 +60,7 @@ private DatabaseFactory() {
      * @param printInfo     Where the DB info should be printed in the logs.
      * @return The appropriate Database class.
      */
-    public static Database createDatabase(FlywayConfiguration configuration, boolean printInfo
+    public static Database createDatabase(Configuration configuration, boolean printInfo
 
 
 
@@ -87,7 +88,7 @@ public static Database createDatabase(FlywayConfiguration configuration, boolean
         return database;
     }
 
-    private static Database createDatabase(FlywayConfiguration configuration, Connection connection, String databaseProductName
+    private static Database createDatabase(Configuration configuration, Connection connection, String databaseProductName
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBConnection.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.cockroachdb;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
@@ -28,7 +28,7 @@
  * CockroachDB connection.
  */
 public class CockroachDBConnection extends Connection<CockroachDBDatabase> {
-    CockroachDBConnection(FlywayConfiguration configuration, CockroachDBDatabase database,
+    CockroachDBConnection(Configuration configuration, CockroachDBDatabase database,
                           java.sql.Connection connection
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBDatabase.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.cockroachdb;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
@@ -53,7 +53,7 @@ public static boolean isCockroachDB(Connection connection) {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public CockroachDBDatabase(FlywayConfiguration configuration, Connection connection
+    public CockroachDBDatabase(Configuration configuration, Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Connection.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.db2;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.database.Schema;
 
@@ -26,7 +26,7 @@
  * DB2 connection.
  */
 public class DB2Connection extends Connection<DB2Database> {
-    DB2Connection(FlywayConfiguration configuration, DB2Database database, java.sql.Connection connection
+    DB2Connection(Configuration configuration, DB2Database database, java.sql.Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Database.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.db2;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
@@ -35,7 +35,7 @@ public class DB2Database extends Database<DB2Connection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public DB2Database(FlywayConfiguration configuration, Connection connection
+    public DB2Database(Configuration configuration, Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyConnection.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.derby;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.database.Schema;
 
@@ -26,7 +26,7 @@
  * Derby connection.
  */
 public class DerbyConnection extends Connection<DerbyDatabase> {
-    DerbyConnection(FlywayConfiguration configuration, DerbyDatabase database, java.sql.Connection connection
+    DerbyConnection(Configuration configuration, DerbyDatabase database, java.sql.Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyDatabase.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.derby;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
@@ -35,7 +35,7 @@ public class DerbyDatabase extends Database<DerbyConnection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public DerbyDatabase(FlywayConfiguration configuration, Connection connection
+    public DerbyDatabase(Configuration configuration, Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Connection.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.h2;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.database.Schema;
 
@@ -26,7 +26,7 @@
  * H2 connection.
  */
 public class H2Connection extends Connection<H2Database> {
-    H2Connection(FlywayConfiguration configuration, H2Database database, java.sql.Connection connection
+    H2Connection(Configuration configuration, H2Database database, java.sql.Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Database.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.h2;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
@@ -35,7 +35,7 @@ public class H2Database extends Database<H2Connection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public H2Database(FlywayConfiguration configuration, Connection connection
+    public H2Database(Configuration configuration, Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBConnection.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.hsqldb;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
@@ -28,7 +28,7 @@
  * HSQLDB connection.
  */
 public class HSQLDBConnection extends Connection<HSQLDBDatabase> {
-    HSQLDBConnection(FlywayConfiguration configuration, HSQLDBDatabase database, java.sql.Connection connection
+    HSQLDBConnection(Configuration configuration, HSQLDBDatabase database, java.sql.Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBDatabase.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.hsqldb;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
@@ -34,7 +34,7 @@ public class HSQLDBDatabase extends Database<HSQLDBConnection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public HSQLDBDatabase(FlywayConfiguration configuration, Connection connection
+    public HSQLDBDatabase(Configuration configuration, Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLConnection.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.mysql;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.Connection;
@@ -34,7 +34,7 @@
 public class MySQLConnection extends Connection<MySQLDatabase> {
     private static final Log LOG = LogFactory.getLog(MySQLConnection.class);
 
-    MySQLConnection(FlywayConfiguration configuration, MySQLDatabase database, java.sql.Connection connection
+    MySQLConnection(Configuration configuration, MySQLDatabase database, java.sql.Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabase.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.mysql;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
@@ -36,7 +36,7 @@ public class MySQLDatabase extends Database<MySQLConnection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public MySQLDatabase(FlywayConfiguration configuration, Connection connection
+    public MySQLDatabase(Configuration configuration, Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleConnection.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.oracle;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.database.Schema;
 
@@ -26,7 +26,7 @@
  * Oracle connection.
  */
 public class OracleConnection extends Connection<OracleDatabase> {
-    OracleConnection(FlywayConfiguration configuration, OracleDatabase database, java.sql.Connection connection
+    OracleConnection(Configuration configuration, OracleDatabase database, java.sql.Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleDatabase.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.oracle;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
@@ -45,7 +45,7 @@ public class OracleDatabase extends Database<OracleConnection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public OracleDatabase(FlywayConfiguration configuration, Connection connection
+    public OracleDatabase(Configuration configuration, Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.postgresql;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
@@ -36,7 +36,7 @@ public class PostgreSQLDatabase extends Database<PostgreSQLConnection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public PostgreSQLDatabase(FlywayConfiguration configuration, Connection connection
+    public PostgreSQLDatabase(Configuration configuration, Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftConnection.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.redshift;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
@@ -28,7 +28,7 @@
  * Redshift connection.
  */
 public class RedshiftConnection extends Connection<RedshiftDatabase> {
-    RedshiftConnection(FlywayConfiguration configuration, RedshiftDatabase database, java.sql.Connection connection
+    RedshiftConnection(Configuration configuration, RedshiftDatabase database, java.sql.Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftDatabase.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.redshift;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
@@ -50,7 +50,7 @@ public static boolean isRedshift(Connection connection) {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public RedshiftDatabase(FlywayConfiguration configuration, Connection connection
+    public RedshiftDatabase(Configuration configuration, Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAConnection.java
Patch:
@@ -15,15 +15,15 @@
  */
 package org.flywaydb.core.internal.database.saphana;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.database.Schema;
 
 import java.sql.SQLException;
 import java.sql.Types;
 
 public class SAPHANAConnection extends Connection<SAPHANADatabase> {
-    SAPHANAConnection(FlywayConfiguration configuration, SAPHANADatabase database, java.sql.Connection connection
+    SAPHANAConnection(Configuration configuration, SAPHANADatabase database, java.sql.Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANADatabase.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.saphana;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
@@ -32,7 +32,7 @@ public class SAPHANADatabase extends Database<SAPHANAConnection> {
      *
      * @param connection The connection to use.
      */
-    public SAPHANADatabase(FlywayConfiguration configuration, Connection connection
+    public SAPHANADatabase(Configuration configuration, Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteConnection.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.sqlite;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.database.Schema;
 
@@ -25,7 +25,7 @@
  * SQLite connection.
  */
 public class SQLiteConnection extends Connection<SQLiteDatabase> {
-    SQLiteConnection(FlywayConfiguration configuration, SQLiteDatabase database, java.sql.Connection connection
+    SQLiteConnection(Configuration configuration, SQLiteDatabase database, java.sql.Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteDatabase.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.sqlite;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
@@ -34,7 +34,7 @@ public class SQLiteDatabase extends Database<SQLiteConnection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public SQLiteDatabase(FlywayConfiguration configuration, Connection connection
+    public SQLiteDatabase(Configuration configuration, Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerConnection.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.sqlserver;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
@@ -32,7 +32,7 @@ public class SQLServerConnection extends Connection<SQLServerDatabase> {
     private final String originalDatabaseName;
     private final String originalAnsiNulls;
 
-    SQLServerConnection(FlywayConfiguration configuration, SQLServerDatabase database, java.sql.Connection connection
+    SQLServerConnection(Configuration configuration, SQLServerDatabase database, java.sql.Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.sqlserver;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.Delimiter;
@@ -40,7 +40,7 @@ public class SQLServerDatabase extends Database<SQLServerConnection> {
      * @param configuration The Flyway configuration.
      * @param connection    The connection to use.
      */
-    public SQLServerDatabase(FlywayConfiguration configuration, Connection connection
+    public SQLServerDatabase(Configuration configuration, Connection connection
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEConnection.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.sybasease;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.database.Schema;
 
@@ -25,7 +25,7 @@
  * Sybase ASE Connection.
  */
 public class SybaseASEConnection extends Connection<SybaseASEDatabase> {
-    SybaseASEConnection(FlywayConfiguration configuration, SybaseASEDatabase database, java.sql.Connection connection, boolean jconnect
+    SybaseASEConnection(Configuration configuration, SybaseASEDatabase database, java.sql.Connection connection, boolean jconnect
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEDatabase.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.sybasease;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.Delimiter;
@@ -39,7 +39,7 @@ public class SybaseASEDatabase extends Database<SybaseASEConnection> {
      * @param connection    The initial connection.
      * @param jconnect      Whether we are using the official jConnect driver or not (jTDS).
      */
-    public SybaseASEDatabase(FlywayConfiguration configuration, Connection connection, boolean jconnect
+    public SybaseASEDatabase(Configuration configuration, Connection connection, boolean jconnect
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/CompositeMigrationResolver.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.Location;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
@@ -63,7 +64,7 @@ public class CompositeMigrationResolver implements MigrationResolver {
      * @param placeholderReplacer      The placeholder replacer to use.
      * @param customMigrationResolvers Custom Migration Resolvers.
      */
-    public CompositeMigrationResolver(Database database, Scanner scanner, FlywayConfiguration configuration,
+    public CompositeMigrationResolver(Database database, Scanner scanner, Configuration configuration,
                                       List<Location> locations,
                                       PlaceholderReplacer placeholderReplacer,
                                       MigrationResolver... customMigrationResolvers) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationResolver.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.flywaydb.core.api.Location;
 import org.flywaydb.core.api.MigrationType;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.migration.jdbc.JdbcMigration;
 import org.flywaydb.core.internal.resolver.JavaMigrationResolver;
@@ -37,7 +38,7 @@ public class JdbcMigrationResolver extends JavaMigrationResolver<JdbcMigration,
      * @param scanner       The Scanner for loading migrations on the classpath.
      * @param configuration The configuration to inject (if necessary) in the migration classes.
      */
-    public JdbcMigrationResolver(Scanner scanner, List<Location> locations, FlywayConfiguration configuration) {
+    public JdbcMigrationResolver(Scanner scanner, List<Location> locations, Configuration configuration) {
         super(scanner, locations, configuration);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/spring/SpringJdbcMigrationResolver.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.Location;
 import org.flywaydb.core.api.MigrationType;
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.migration.spring.SpringJdbcMigration;
 import org.flywaydb.core.internal.resolver.JavaMigrationResolver;
 import org.flywaydb.core.internal.util.scanner.Scanner;
@@ -36,7 +36,7 @@ public class SpringJdbcMigrationResolver extends JavaMigrationResolver<SpringJdb
      * @param scanner       The Scanner for loading migrations on the classpath.
      * @param configuration The configuration to inject (if necessary) in the migration classes.
      */
-    public SpringJdbcMigrationResolver(Scanner scanner, List<Location> locations, FlywayConfiguration configuration) {
+    public SpringJdbcMigrationResolver(Scanner scanner, List<Location> locations, Configuration configuration) {
         super(scanner, locations, configuration);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationExecutor.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.resolver.sql;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.api.resolver.MigrationExecutor;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
@@ -48,7 +48,7 @@ public class SqlMigrationExecutor implements MigrationExecutor {
     /**
      * The Flyway configuration.
      */
-    private final FlywayConfiguration configuration;
+    private final Configuration configuration;
 
     /**
      * The SQL script that will be executed.
@@ -63,7 +63,7 @@ public class SqlMigrationExecutor implements MigrationExecutor {
      * @param placeholderReplacer The placeholder replacer to apply to sql migration scripts.
      * @param configuration       The Flyway configuration.
      */
-    SqlMigrationExecutor(Database database, LoadableResource resource, PlaceholderReplacer placeholderReplacer, FlywayConfiguration configuration) {
+    SqlMigrationExecutor(Database database, LoadableResource resource, PlaceholderReplacer placeholderReplacer, Configuration configuration) {
         this.database = database;
         this.resource = resource;
         this.placeholderReplacer = placeholderReplacer;

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/SchemaHistoryFactory.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.schemahistory;
 
-import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.Configuration;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
@@ -36,7 +36,7 @@ private SchemaHistoryFactory() {
      * @param schema        The schema whose history to track.
      * @return The schema history.
      */
-    public static SchemaHistory getSchemaHistory(FlywayConfiguration configuration, Database database, Schema schema
+    public static SchemaHistory getSchemaHistory(Configuration configuration, Database database, Schema schema
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/filesystem/FileSystemResource.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.util.FileCopyUtils;
-import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
 import java.io.File;
@@ -43,14 +42,14 @@ public class FileSystemResource implements LoadableResource, Comparable<FileSyst
      * @param location The location of the resource on the filesystem.
      */
     public FileSystemResource(String location) {
-        this.location = new File(location.replace("\\", "/").replace("//", "/"));
+        this.location = new File(new File(location).getPath());
     }
 
     /**
      * @return The location of the resource on the filesystem.
      */
     public String getLocation() {
-        return location.getPath().replace("\\", "/");
+        return location.getPath();
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1367,7 +1367,7 @@ public void configure(Map<String, String> props) {
     private Schema[] prepareSchemas(Database database) {
         String[] schemaNames = configuration.getSchemas();
         if (schemaNames.length == 0) {
-            Schema currentSchema = database.getMainConnection().getOriginalSchema();
+            Schema currentSchema = database.getMainConnection().getCurrentSchema();
             if (currentSchema == null) {
                 throw new FlywayException("Unable to determine schema for the schema history table." +
                         " Set a default schema for the connection or specify one using the schemas property!");

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Connection.java
Patch:
@@ -39,12 +39,12 @@ public class DB2Connection extends Connection<DB2Database> {
     }
 
     @Override
-    protected String doGetCurrentSchemaName() throws SQLException {
+    protected String getCurrentSchemaNameOrSearchPath() throws SQLException {
         return jdbcTemplate.queryForString("select current_schema from sysibm.sysdummy1");
     }
 
     @Override
-    public void doChangeCurrentSchemaTo(String schema) throws SQLException {
+    public void doChangeCurrentSchemaOrSearchPathTo(String schema) throws SQLException {
         jdbcTemplate.execute("SET SCHEMA " + database.quote(schema));
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyConnection.java
Patch:
@@ -39,12 +39,12 @@ public class DerbyConnection extends Connection<DerbyDatabase> {
     }
 
     @Override
-    protected String doGetCurrentSchemaName() throws SQLException {
+    protected String getCurrentSchemaNameOrSearchPath() throws SQLException {
         return jdbcTemplate.queryForString("SELECT CURRENT SCHEMA FROM SYSIBM.SYSDUMMY1");
     }
 
     @Override
-    public void doChangeCurrentSchemaTo(String schema) throws SQLException {
+    public void doChangeCurrentSchemaOrSearchPathTo(String schema) throws SQLException {
         jdbcTemplate.execute("SET SCHEMA " + database.quote(schema));
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Connection.java
Patch:
@@ -39,7 +39,7 @@ public class H2Connection extends Connection<H2Database> {
     }
 
     @Override
-    public void doChangeCurrentSchemaTo(String schema) throws SQLException {
+    public void doChangeCurrentSchemaOrSearchPathTo(String schema) throws SQLException {
         jdbcTemplate.execute("SET SCHEMA " + database.quote(schema));
     }
 
@@ -49,7 +49,7 @@ public Schema getSchema(String name) {
     }
 
     @Override
-    protected String doGetCurrentSchemaName() throws SQLException {
+    protected String getCurrentSchemaNameOrSearchPath() throws SQLException {
         return jdbcTemplate.queryForString("CALL SCHEMA()");
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Schema.java
Patch:
@@ -81,7 +81,7 @@ protected void doClean() throws SQLException {
 
         List<String> domainNames = listObjectNames("DOMAIN", "");
         if (!domainNames.isEmpty()) {
-            if (name.equals(database.getMainConnection().getCurrentSchemaName())) {
+            if (name.equals(database.getMainConnection().getCurrentSchema().getName())) {
                 for (String statement : generateDropStatementsForCurrentSchema("DOMAIN", domainNames)) {
                     jdbcTemplate.execute(statement);
                 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBConnection.java
Patch:
@@ -41,7 +41,7 @@ public class HSQLDBConnection extends Connection<HSQLDBDatabase> {
     }
 
     @Override
-    protected String doGetCurrentSchemaName() throws SQLException {
+    protected String getCurrentSchemaNameOrSearchPath() throws SQLException {
         ResultSet resultSet = null;
         String schema = null;
 
@@ -61,7 +61,7 @@ protected String doGetCurrentSchemaName() throws SQLException {
     }
 
     @Override
-    public void doChangeCurrentSchemaTo(String schema) throws SQLException {
+    public void doChangeCurrentSchemaOrSearchPathTo(String schema) throws SQLException {
         jdbcTemplate.execute("SET SCHEMA " + database.quote(schema));
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLConnection.java
Patch:
@@ -48,12 +48,12 @@ public class MySQLConnection extends Connection<MySQLDatabase> {
 
 
     @Override
-    protected String doGetCurrentSchemaName() throws SQLException {
+    protected String getCurrentSchemaNameOrSearchPath() throws SQLException {
         return jdbcTemplate.getConnection().getCatalog();
     }
 
     @Override
-    public void doChangeCurrentSchemaTo(String schema) throws SQLException {
+    public void doChangeCurrentSchemaOrSearchPathTo(String schema) throws SQLException {
         if (!StringUtils.hasLength(schema)) {
             try {
                 // Weird hack to switch back to no database selected...

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleConnection.java
Patch:
@@ -39,12 +39,12 @@ public class OracleConnection extends Connection<OracleDatabase> {
     }
 
     @Override
-    protected String doGetCurrentSchemaName() throws SQLException {
+    protected String getCurrentSchemaNameOrSearchPath() throws SQLException {
         return jdbcTemplate.queryForString("SELECT SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') FROM DUAL");
     }
 
     @Override
-    public void doChangeCurrentSchemaTo(String schema) throws SQLException {
+    public void doChangeCurrentSchemaOrSearchPathTo(String schema) throws SQLException {
         jdbcTemplate.execute("ALTER SESSION SET CURRENT_SCHEMA=" + database.quote(schema));
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAConnection.java
Patch:
@@ -36,12 +36,12 @@ public class SAPHANAConnection extends Connection<SAPHANADatabase> {
     }
 
     @Override
-    protected String doGetCurrentSchemaName() throws SQLException {
+    protected String getCurrentSchemaNameOrSearchPath() throws SQLException {
         return jdbcTemplate.queryForString("SELECT CURRENT_SCHEMA FROM DUMMY");
     }
 
     @Override
-    public void doChangeCurrentSchemaTo(String schema) throws SQLException {
+    public void doChangeCurrentSchemaOrSearchPathTo(String schema) throws SQLException {
         jdbcTemplate.execute("SET SCHEMA " + database.doQuote(schema));
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/SchemaHistoryFactory.java
Patch:
@@ -32,7 +32,7 @@ private SchemaHistoryFactory() {
      * Obtains a reference to the schema history.
      *
      * @param configuration The current Flyway configuration.
-     * @param database     The Database object.
+     * @param database      The Database object.
      * @param schema        The schema whose history to track.
      * @return The schema history.
      */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSchema.java
Patch:
@@ -146,9 +146,11 @@ private List<String> generateDropStatementsForBaseTypes(boolean recreate) throws
         List<Map<String, String>> rows =
                 jdbcTemplate.queryForList(
                         "select typname, typcategory from pg_catalog.pg_type t "
+                                + "left join pg_depend dep on dep.objid = t.oid and dep.deptype = 'e' "
                                 + "where (t.typrelid = 0 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = t.typrelid)) and "
                                 + "NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type el WHERE el.oid = t.typelem AND el.typarray = t.oid) and "
-                                + "t.typnamespace in (select oid from pg_catalog.pg_namespace where nspname = ?)",
+                                + "t.typnamespace in (select oid from pg_catalog.pg_namespace where nspname = ?) and "
+                                + "dep.objid is null",
                         name);
 
         List<String> statements = new ArrayList<>();

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSchema.java
Patch:
@@ -146,9 +146,11 @@ private List<String> generateDropStatementsForBaseTypes(boolean recreate) throws
         List<Map<String, String>> rows =
                 jdbcTemplate.queryForList(
                         "select typname, typcategory from pg_catalog.pg_type t "
+                                + "left join pg_depend dep on dep.objid = t.oid and dep.deptype = 'e' "
                                 + "where (t.typrelid = 0 OR (SELECT c.relkind = 'c' FROM pg_catalog.pg_class c WHERE c.oid = t.typrelid)) and "
                                 + "NOT EXISTS(SELECT 1 FROM pg_catalog.pg_type el WHERE el.oid = t.typelem AND el.typarray = t.oid) and "
-                                + "t.typnamespace in (select oid from pg_catalog.pg_namespace where nspname = ?)",
+                                + "t.typnamespace in (select oid from pg_catalog.pg_namespace where nspname = ?) and "
+                                + "dep.objid is null",
                         name);
 
         List<String> statements = new ArrayList<>();

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBConnection.java
Patch:
@@ -22,18 +22,19 @@
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.sql.SQLException;
+import java.sql.Types;
 
 /**
  * CockroachDB connection.
  */
 public class CockroachDBConnection extends Connection<CockroachDBDatabase> {
     CockroachDBConnection(FlywayConfiguration configuration, CockroachDBDatabase database,
-                          java.sql.Connection connection, int nullType
+                          java.sql.Connection connection
 
 
 
     ) {
-        super(configuration, database, connection, nullType
+        super(configuration, database, connection, Types.NULL
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Connection.java
Patch:
@@ -20,17 +20,18 @@
 import org.flywaydb.core.internal.database.Schema;
 
 import java.sql.SQLException;
+import java.sql.Types;
 
 /**
  * DB2 connection.
  */
 public class DB2Connection extends Connection<DB2Database> {
-    DB2Connection(FlywayConfiguration configuration, DB2Database database, java.sql.Connection connection, int nullType
+    DB2Connection(FlywayConfiguration configuration, DB2Database database, java.sql.Connection connection
 
 
 
     ) {
-        super(configuration, database, connection, nullType
+        super(configuration, database, connection, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyConnection.java
Patch:
@@ -20,17 +20,18 @@
 import org.flywaydb.core.internal.database.Schema;
 
 import java.sql.SQLException;
+import java.sql.Types;
 
 /**
  * Derby connection.
  */
 public class DerbyConnection extends Connection<DerbyDatabase> {
-    DerbyConnection(FlywayConfiguration configuration, DerbyDatabase database, java.sql.Connection connection, int nullType
+    DerbyConnection(FlywayConfiguration configuration, DerbyDatabase database, java.sql.Connection connection
 
 
 
     ) {
-        super(configuration, database, connection, nullType
+        super(configuration, database, connection, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Connection.java
Patch:
@@ -20,17 +20,18 @@
 import org.flywaydb.core.internal.database.Schema;
 
 import java.sql.SQLException;
+import java.sql.Types;
 
 /**
  * H2 connection.
  */
 public class H2Connection extends Connection<H2Database> {
-    H2Connection(FlywayConfiguration configuration, H2Database database, java.sql.Connection connection, int nullType
+    H2Connection(FlywayConfiguration configuration, H2Database database, java.sql.Connection connection
 
 
 
     ) {
-        super(configuration, database, connection, nullType
+        super(configuration, database, connection, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBConnection.java
Patch:
@@ -22,17 +22,18 @@
 
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Types;
 
 /**
  * HSQLDB connection.
  */
 public class HSQLDBConnection extends Connection<HSQLDBDatabase> {
-    HSQLDBConnection(FlywayConfiguration configuration, HSQLDBDatabase database, java.sql.Connection connection, int nullType
+    HSQLDBConnection(FlywayConfiguration configuration, HSQLDBDatabase database, java.sql.Connection connection
 
 
 
     ) {
-        super(configuration, database, connection, nullType
+        super(configuration, database, connection, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLConnection.java
Patch:
@@ -24,6 +24,7 @@
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.sql.SQLException;
+import java.sql.Types;
 import java.util.UUID;
 import java.util.concurrent.Callable;
 
@@ -33,12 +34,12 @@
 public class MySQLConnection extends Connection<MySQLDatabase> {
     private static final Log LOG = LogFactory.getLog(MySQLConnection.class);
 
-    MySQLConnection(FlywayConfiguration configuration, MySQLDatabase database, java.sql.Connection connection, int nullType
+    MySQLConnection(FlywayConfiguration configuration, MySQLDatabase database, java.sql.Connection connection
 
 
 
     ) {
-        super(configuration, database, connection, nullType
+        super(configuration, database, connection, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleConnection.java
Patch:
@@ -20,17 +20,18 @@
 import org.flywaydb.core.internal.database.Schema;
 
 import java.sql.SQLException;
+import java.sql.Types;
 
 /**
  * Oracle connection.
  */
 public class OracleConnection extends Connection<OracleDatabase> {
-    OracleConnection(FlywayConfiguration configuration, OracleDatabase database, java.sql.Connection connection, int nullType
+    OracleConnection(FlywayConfiguration configuration, OracleDatabase database, java.sql.Connection connection
 
 
 
     ) {
-        super(configuration, database, connection, nullType
+        super(configuration, database, connection, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAConnection.java
Patch:
@@ -20,15 +20,15 @@
 import org.flywaydb.core.internal.database.Schema;
 
 import java.sql.SQLException;
+import java.sql.Types;
 
 public class SAPHANAConnection extends Connection<SAPHANADatabase> {
-    SAPHANAConnection(FlywayConfiguration configuration, SAPHANADatabase database, java.sql.Connection connection,
-                      int nullType
+    SAPHANAConnection(FlywayConfiguration configuration, SAPHANADatabase database, java.sql.Connection connection
 
 
 
     ) {
-        super(configuration, database, connection, nullType
+        super(configuration, database, connection, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerConnection.java
Patch:
@@ -24,6 +24,7 @@
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 
 import java.sql.SQLException;
+import java.sql.Types;
 import java.util.concurrent.Callable;
 
 /**
@@ -40,12 +41,12 @@ public class SQLServerConnection extends Connection<SQLServerDatabase> {
      */
     private static boolean schemaMessagePrinted;
 
-    SQLServerConnection(FlywayConfiguration configuration, SQLServerDatabase database, java.sql.Connection connection, int nullType
+    SQLServerConnection(FlywayConfiguration configuration, SQLServerDatabase database, java.sql.Connection connection
 
 
 
     ) {
-        super(configuration, database, connection, nullType
+        super(configuration, database, connection, Types.VARCHAR
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/SqlStatementBuilder.java
Patch:
@@ -196,7 +196,7 @@ public void addLine(String line) {
         String lineSimplified = simplifyLine(line);
 
         applyStateChanges(lineSimplified);
-        if (endWithOpenMultilineStringLiteral() || insideMultiLineComment || isSingleLineComment(lineSimplified)) {
+        if (endWithOpenMultilineStringLiteral() || insideMultiLineComment) {
             statement.append(line);
             return;
         }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -100,9 +100,8 @@ public static void main(String[] args) {
             classLoader = loadJdbcDrivers(classLoader);
             classLoader = loadJavaMigrationsFromJarDirs(classLoader, properties);
 
-            Flyway flyway = new Flyway(classLoader);
             filterProperties(properties);
-            flyway.configure(properties);
+            Flyway flyway = Flyway.config(classLoader).configure(properties).load();
 
             for (String operation : operations) {
                 executeOperation(flyway, operation);

File: flyway-core/src/main/java/org/flywaydb/core/api/Location.java
Patch:
@@ -13,9 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util;
-
-import org.flywaydb.core.api.FlywayException;
+package org.flywaydb.core.api;
 
 import java.io.File;
 

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FlywayConfiguration.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.flywaydb.core.api.configuration;
 
+import org.flywaydb.core.api.Location;
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.api.callback.FlywayCallback;
 import org.flywaydb.core.api.errorhandler.ErrorHandler;
@@ -221,9 +222,9 @@ public interface FlywayConfiguration {
      * Locations starting with {@code filesystem:} point to a directory on the filesystem and may only contain sql
      * migrations.</p>
      *
-     * @return Locations to scan recursively for migrations. (default: db/migration)
+     * @return Locations to scan recursively for migrations. (default: classpath:db/migration)
      */
-    String[] getLocations();
+    Location[] getLocations();
 
     /**
      * <p>

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptFlywayCallback.java
Patch:
@@ -23,7 +23,7 @@
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.SqlScript;
-import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.api.Location;
 import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
@@ -81,14 +81,14 @@ public class SqlScriptFlywayCallback implements FlywayCallback {
      * @param placeholderReplacer The placeholder replacer to apply to sql migration scripts.
      * @param configuration       The Flyway configuration.
      */
-    public SqlScriptFlywayCallback(Database database, Scanner scanner, Locations locations,
+    public SqlScriptFlywayCallback(Database database, Scanner scanner, List<Location> locations,
                                    PlaceholderReplacer placeholderReplacer, FlywayConfiguration configuration) {
         for (String callback : ALL_CALLBACKS) {
             scripts.put(callback, null);
         }
 
         LOG.debug("Scanning for SQL callbacks ...");
-        for (Location location : locations.getLocations()) {
+        for (Location location : locations) {
             LoadableResource[] resources;
             try {
                 resources = scanner.scanForResources(location, "", configuration.getSqlMigrationSuffixes());

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/CompositeMigrationResolver.java
Patch:
@@ -16,6 +16,7 @@
 package org.flywaydb.core.internal.resolver;
 
 import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.api.Location;
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
@@ -62,7 +63,8 @@ public class CompositeMigrationResolver implements MigrationResolver {
      * @param placeholderReplacer      The placeholder replacer to use.
      * @param customMigrationResolvers Custom Migration Resolvers.
      */
-    public CompositeMigrationResolver(Database database, Scanner scanner, FlywayConfiguration configuration, Locations locations,
+    public CompositeMigrationResolver(Database database, Scanner scanner, FlywayConfiguration configuration,
+                                      List<Location> locations,
                                       PlaceholderReplacer placeholderReplacer,
                                       MigrationResolver... customMigrationResolvers) {
         if (!configuration.isSkipDefaultResolvers()) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/Scanner.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.util.FeatureDetector;
-import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.api.Location;
 import org.flywaydb.core.internal.util.scanner.classpath.ResourceAndClassScanner;
 import org.flywaydb.core.internal.util.scanner.classpath.android.AndroidScanner;
 import org.flywaydb.core.internal.util.scanner.classpath.ClassPathScanner;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathScanner.java
Patch:
@@ -19,7 +19,7 @@
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.ClassUtils;
 import org.flywaydb.core.internal.util.FeatureDetector;
-import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.api.Location;
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.UrlUtils;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ResourceAndClassScanner.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.util.scanner.classpath;
 
-import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.api.Location;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
 /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/android/AndroidScanner.java
Patch:
@@ -22,7 +22,7 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.ClassUtils;
-import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.api.Location;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 import org.flywaydb.core.internal.util.scanner.classpath.ResourceAndClassScanner;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/filesystem/FileSystemScanner.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.api.Location;
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/LogFactory.java
Patch:
@@ -22,7 +22,9 @@
 import org.flywaydb.core.internal.util.logging.slf4j.Slf4jLogCreator;
 
 /**
- * Factory for loggers.
+ * Factory for loggers. Custom MigrationResolver, MigrationExecutor, FlywayCallback, ErrorHandler and JdbcMigration
+ * implementations should use this to obtain a logger that will work with any logging framework across all environments
+ * (API, Maven, Gradle, CLI, etc).
  */
 public class LogFactory {
     /**

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/package-info.java
Patch:
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 /**
- * Interfaces for Flyway's log abstraction.
+ * Interfaces for Flyway's log abstraction. Custom MigrationResolver, MigrationExecutor, FlywayCallback, ErrorHandler and JdbcMigration
+ * implementations should use this to obtain a logger that will work with any logging framework across all environments
+ * (API, Maven, Gradle, CLI, etc).
  */
 package org.flywaydb.core.api.logging;
\ No newline at end of file

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -325,8 +325,8 @@ public boolean accept(File dir, String name) {
 
         // see javadoc of listFiles(): null if given path is not a real directory
         if (files == null) {
-            LOG.error("Directory for Jdbc Drivers not found: " + driversDir.getAbsolutePath());
-            System.exit(1);
+            LOG.debug("Directory for Jdbc Drivers not found: " + driversDir.getAbsolutePath());
+            return classLoader;
         }
 
         for (File file : files) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/SqlStatementBuilder.java
Patch:
@@ -262,7 +262,7 @@ protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter)
      * @return {@code true} if it does, {@code false} if it doesn't.
      */
     private boolean lineTerminatesStatement(String line, Delimiter delimiter) {
-        if (delimiter == null || nestedBlockDepth > 0) {
+        if (delimiter == null || (defaultDelimiter.equals(delimiter) && nestedBlockDepth > 0)) {
             return false;
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerTable.java
Patch:
@@ -44,15 +44,15 @@ public class SQLServerTable extends Table {
 
     @Override
     protected void doDrop() throws SQLException {
-        jdbcTemplate.execute("DROP TABLE " + database.quote(schema.getName(), name));
+        jdbcTemplate.execute("DROP TABLE " + this);
     }
 
     @Override
     protected boolean doExists() throws SQLException {
         return jdbcTemplate.queryForBoolean(
                 "SELECT CAST(" +
                         "CASE WHEN EXISTS(" +
-                        "  SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=? AND TABLE_NAME=?" +
+                        "  SELECT 1 FROM [" + databaseName + "].INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=? AND TABLE_NAME=?" +
                         ") " +
                         "THEN 1 ELSE 0 " +
                         "END " +

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -262,7 +262,7 @@ public boolean canDiscard() {
 
 
 
-                || statementStart.startsWith("/"); // Lone / that can safely be ignored
+                || statementStart.equals("/ "); // Lone / that can safely be ignored
     }
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptFlywayCallback.java
Patch:
@@ -23,7 +23,7 @@
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
-import org.flywaydb.core.internal.sqlscript.SqlScript;
+import org.flywaydb.core.internal.database.SqlScript;
 import org.flywaydb.core.internal.util.Location;
 import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
@@ -106,7 +106,7 @@ public SqlScriptFlywayCallback(Database database, Scanner scanner, Locations loc
                                 "-> " + existing.getResource().getLocationOnDisk() + "\n" +
                                 "-> " + resource.getLocationOnDisk());
                     }
-                    scripts.put(key, new SqlScript(database, resource, placeholderReplacer, configuration.getEncoding(),
+                    scripts.put(key, database.createSqlScript(resource, placeholderReplacer, configuration.getEncoding(),
                             configuration.isMixed()
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/AbstractSqlStatement.java
Patch:
@@ -16,11 +16,12 @@
 package org.flywaydb.core.internal.database;
 
 import org.flywaydb.core.internal.sqlscript.SqlStatement;
+import org.flywaydb.core.internal.util.jdbc.ContextImpl;
 
 /**
  * A sql statement from a script that can be executed at once against a database.
  */
-public abstract class AbstractSqlStatement implements SqlStatement {
+public abstract class AbstractSqlStatement<C extends ContextImpl> implements SqlStatement<C> {
     /**
      * The original line number where the statement was located in the script it came from.
      */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Delimiter.java
Patch:
@@ -59,7 +59,7 @@ public boolean isAloneOnLine() {
 
     @Override
     public String toString() {
-        return delimiter;
+        return (aloneOnLine ? "\n" : "") + delimiter;
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLCopyStatement.java
Patch:
@@ -43,7 +43,7 @@ public class PostgreSQLCopyStatement extends AbstractSqlStatement {
     }
 
     @Override
-    public List<Result> execute(ContextImpl errorContext, JdbcTemplate jdbcTemplate) throws SQLException {
+    public List<Result> execute(ContextImpl context, JdbcTemplate jdbcTemplate) throws SQLException {
         int split = sql.indexOf(";");
         String statement = sql.substring(0, split);
         String data = sql.substring(split + 1).trim();

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftSqlStatementBuilder.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.internal.database.Delimiter;
 import org.flywaydb.core.internal.sqlscript.SqlStatement;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
-import org.flywaydb.core.internal.sqlscript.StandardSqlStatement;
+import org.flywaydb.core.internal.database.StandardSqlStatement;
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.util.regex.Matcher;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationExecutor.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.resolver.MigrationExecutor;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.sqlscript.SqlScript;
+import org.flywaydb.core.internal.database.SqlScript;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 
@@ -77,7 +77,7 @@ public void execute(Connection connection) {
 
     private synchronized SqlScript getSqlScript() {
         if (sqlScript == null) {
-            sqlScript = new SqlScript(database, sqlScriptResource, placeholderReplacer, configuration.getEncoding(), configuration.isMixed()
+            sqlScript = database.createSqlScript(sqlScriptResource, placeholderReplacer, configuration.getEncoding(), configuration.isMixed()
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/JdbcTableSchemaHistory.java
Patch:
@@ -26,7 +26,6 @@
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
-import org.flywaydb.core.internal.sqlscript.SqlScript;
 import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.util.jdbc.RowMapper;
 
@@ -123,7 +122,7 @@ public void create() {
                 LOG.info("Creating Schema History table: " + table);
             }
             try {
-                new SqlScript(database.getCreateScript(table), database).execute(connection.getJdbcTemplate());
+                database.createSqlScript(database.getCreateScript(table)).execute(connection.getJdbcTemplate());
                 LOG.debug("Schema History table " + table + " created.");
             } catch (FlywayException e) {
                 if (++retries >= 10) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/SqlStatement.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * A sql statement from a script that can be executed at once against a database.
  */
-public interface SqlStatement {
+public interface SqlStatement<C extends ContextImpl> {
     /**
      * @return The original line number where the statement was located in the script it came from.
      */
@@ -39,9 +39,9 @@ public interface SqlStatement {
     /**
      * Executes this statement against the database.
      *
-     * @param errorContext The error context.
+     * @param context      The error context.
      * @param jdbcTemplate The jdbcTemplate to use to execute this script.
      * @throws SQLException when the execution fails.
      */
-    List<Result> execute(ContextImpl errorContext, JdbcTemplate jdbcTemplate) throws SQLException;
+    List<Result> execute(C context, JdbcTemplate jdbcTemplate) throws SQLException;
 }
\ No newline at end of file

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/FlywayException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationInfoService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/android/ContextHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/android/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/BaseFlywayCallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/FlywayCallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/ConfigurationAware.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FlywayConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/errorhandler/Context.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/errorhandler/Error.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/errorhandler/ErrorHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/errorhandler/Warning.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/errorhandler/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/Log.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/LogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/LogFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/logging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/MigrationChecksumProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/MigrationInfoProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/jdbc/BaseJdbcMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/jdbc/JdbcMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/jdbc/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/spring/BaseSpringJdbcMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/spring/SpringJdbcMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/spring/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/BaseMigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/MigrationExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/MigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/ResolvedMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptFlywayCallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbBaseline.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbClean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbSchemas.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/AbstractSqlStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Connection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Database.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Delimiter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Function.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Schema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/SchemaObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/SqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Table.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Type.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBSqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Connection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Database.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Function.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Schema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2SqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Table.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Type.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbySchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbySqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Connection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Database.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Schema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2SqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Table.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBSqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLNamedLockTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLSqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLAdvisoryLockTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLCopyStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftSqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANAConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANADatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANASchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANASqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANATable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteSqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerApplicationLockTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEDatabase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASESchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASESqlStatementBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASETable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywayDbUpgradeRequiredException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywayEnterpriseUpgradeRequiredException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywayProUpgradeRequiredException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywaySqlException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/AppliedMigrationAttributes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoDumper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoServiceImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/CompositeMigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/JavaMigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/MigrationInfoHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/ResolvedMigrationComparator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/ResolvedMigrationImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/jdbc/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/spring/SpringJdbcMigrationExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/spring/SpringJdbcMigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/spring/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/AppliedMigration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/JdbcTableSchemaHistory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/SchemaHistory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/SchemaHistoryFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/FlywaySqlScriptException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/SqlScript.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/SqlStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/StandardSqlStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/AbbreviationUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/AsciiTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/ClassUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/DateUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/ExceptionUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/FeatureDetector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/FileCopyUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/Location.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/Locations.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/ObjectUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/Pair.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/PlaceholderReplacer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/StopWatch.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/StringUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/TimeFormat.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/UrlUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/VersionPrinter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/ContextImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/DriverDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/ErrorImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/JdbcTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/JdbcUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/Result.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/RollbackWithSavepointException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/RowMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/TransactionTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/WarningImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/android/AndroidLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/android/AndroidLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/apachecommons/ApacheCommonsLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/apachecommons/ApacheCommonsLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/apachecommons/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/console/ConsoleLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/console/ConsoleLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/console/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/javautil/JavaUtilLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/javautil/JavaUtilLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/javautil/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/slf4j/Slf4jLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/slf4j/Slf4jLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/slf4j/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/LoadableResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/Resource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/Scanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathLocationScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/DefaultUrlResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/FileSystemClassPathLocationScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/JarFileClassPathLocationScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/JarUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/OsgiClassPathLocationScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ResourceAndClassScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/UrlResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/android/AndroidResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/android/AndroidScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/jboss/JBossVFSv2UrlResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/jboss/JBossVFSv3ClassPathLocationScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/jboss/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/filesystem/FileSystemResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/filesystem/FileSystemScanner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/FlywayBaselineTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/FlywayCleanTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/FlywayInfoTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/FlywayMigrateTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/FlywayRepairTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/FlywayUndoTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/FlywayValidateTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/BaselineMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/CleanMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/InfoMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/MavenLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/MavenLogCreator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/MigrateMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/RepairMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/UndoMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/ValidateMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010-2017 Boxfuse GmbH
+ * Copyright 2010-2018 Boxfuse GmbH
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANATable.java
Patch:
@@ -34,7 +34,7 @@ public class SAPHANATable extends Table {
      * @param schema       The schema this table lives in.
      * @param name         The name of the table.
      */
-    public SAPHANATable(JdbcTemplate jdbcTemplate, Database database, Schema schema, String name) {
+    SAPHANATable(JdbcTemplate jdbcTemplate, Database database, Schema schema, String name) {
         super(jdbcTemplate, database, schema, name);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -22,6 +22,7 @@
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.schemahistory.AppliedMigration;
+import org.flywaydb.core.internal.util.AbbreviationUtils;
 import org.flywaydb.core.internal.util.ObjectUtils;
 
 import java.util.Date;
@@ -288,7 +289,8 @@ public String validate() {
                                 appliedMigration.getChecksum(), resolvedMigration.getChecksum());
                     }
                 }
-                if (!resolvedMigration.getDescription().equals(appliedMigration.getDescription())) {
+                if (!AbbreviationUtils.abbreviateDescription(resolvedMigration.getDescription())
+                        .equals(appliedMigration.getDescription())) {
                     return createMismatchMessage("description", migrationIdentifier,
                             appliedMigration.getDescription(), resolvedMigration.getDescription());
                 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerConnection.java
Patch:
@@ -19,9 +19,9 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.Connection;
+import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
-import org.flywaydb.core.internal.database.Schema;
 
 import java.sql.SQLException;
 import java.util.concurrent.Callable;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -18,8 +18,8 @@
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.Delimiter;
-import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
+import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.sql.Connection;

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/JdbcTableSchemaHistory.java
Patch:
@@ -150,7 +150,9 @@ protected void doAddAppliedMigration(MigrationVersion version, String descriptio
 
         // Lock again for databases with no DDL transactions to prevent implicit commits from triggering deadlocks
         // in highly concurrent environments
-        table.lock();
+        if (!database.supportsDdlTransactions()) {
+            table.lock();
+        }
 
         try {
             String versionStr = version == null ? null : version.toString();

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -273,9 +273,9 @@ private void logSummary(int migrationSuccessCount, long executionTime) {
         }
 
         if (migrationSuccessCount == 1) {
-            LOG.info("Successfully applied 1 migration to schema " + schema + " (execution time " + TimeFormat.format(executionTime) + ").");
+            LOG.info("Successfully applied 1 migration to schema " + schema + " (execution time " + TimeFormat.format(executionTime) + ")");
         } else {
-            LOG.info("Successfully applied " + migrationSuccessCount + " migrations to schema " + schema + " (execution time " + TimeFormat.format(executionTime) + ").");
+            LOG.info("Successfully applied " + migrationSuccessCount + " migrations to schema " + schema + " (execution time " + TimeFormat.format(executionTime) + ")");
         }
     }
 

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -691,6 +691,7 @@ private static void removeMavenPluginSpecificPropertiesToAvoidWarnings(Map<Strin
         conf.remove(ConfigUtils.CONFIG_FILES);
         conf.remove(ConfigUtils.CONFIG_FILE_ENCODING);
         conf.remove("flyway.current");
+        conf.remove("flyway.skip");
         conf.remove("flyway.version");
         conf.remove("flyway.serverId");
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbBaseline.java
Patch:
@@ -113,7 +113,7 @@ public Void call() {
                         AppliedMigration baselineMarker = schemaHistory.getBaselineMarker();
                         if (baselineVersion.equals(baselineMarker.getVersion())
                                 && baselineDescription.equals(baselineMarker.getDescription())) {
-                            LOG.info("Metadata table " + schemaHistory + " already initialized with ("
+                            LOG.info("Schema history table " + schemaHistory + " already initialized with ("
                                     + baselineVersion + "," + baselineDescription + "). Skipping.");
                             return null;
                         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/JdbcTableSchemaHistory.java
Patch:
@@ -97,7 +97,8 @@ public void clearCache() {
 
     @Override
     public boolean exists() {
-        if (!tableFallback) {
+        // Ensure we are using the default table name before checking for the fallback table
+        if (!tableFallback && table.getName().equals("flyway_schema_history")) {
             Table fallbackTable = table.getSchema().getTable("schema_version");
             if (fallbackTable.exists()) {
                 LOG.warn("Could not find schema history table " + table + ", but found " + fallbackTable + " instead." +
@@ -159,7 +160,7 @@ protected void doAddAppliedMigration(MigrationVersion version, String descriptio
                     installedRank, versionStr, description, type.name(), script, checksum, installedBy,
                     executionTime, success);
 
-            LOG.debug("MetaData table " + table + " successfully updated to reflect changes");
+            LOG.debug("Schema history table " + table + " successfully updated to reflect changes");
         } catch (SQLException e) {
             throw new FlywaySqlException("Unable to insert row for version '" + version + "' in Schema History table " + table, e);
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/VersionPrinter.java
Patch:
@@ -44,7 +44,7 @@ public static void printVersion() {
         String version = new ClassPathResource("org/flywaydb/core/internal/version.txt", VersionPrinter.class.getClassLoader()).loadAsString("UTF-8");
         LOG.info("Flyway"
 
-                + " Open Source"
+                + " Community Edition"
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/api/errorhandler/Context.java
Patch:
@@ -21,7 +21,7 @@
  * The context passed to an error handler.
  * <p><i>Flyway Pro and Flyway Enterprise only</i></p>
  */
-public interface ErrorContext {
+public interface Context {
     /**
      * @return The warnings that were raised during a migration.
      */

File: flyway-core/src/main/java/org/flywaydb/core/api/errorhandler/ErrorHandler.java
Patch:
@@ -27,5 +27,5 @@ public interface ErrorHandler {
      * @param context The context.
      * @return {@code true} if they were handled, {@code false} if they weren't and Flyway should fall back to its default handling.
      */
-    boolean handle(ErrorContext context);
+    boolean handle(Context context);
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBTable.java
Patch:
@@ -58,7 +58,7 @@ protected boolean doExists() throws SQLException {
     }
 
     @Override
-    protected void doLock() throws SQLException {
+    protected void doLock() {
         LOG.debug("Unable to lock " + this + " as CockroachDB does not support locking. No concurrent migration supported.");
     }
 }
\ No newline at end of file

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -225,10 +225,10 @@ private static void printUsage() {
         LOG.info("Commands");
         LOG.info("--------");
         LOG.info("migrate  : Migrates the database");
-        LOG.info("undo     : Undoes the most recently applied versioned migration");
         LOG.info("clean    : Drops all objects in the configured schemas");
         LOG.info("info     : Prints the information about applied, current and pending migrations");
         LOG.info("validate : Validates the applied migrations against the ones on the classpath");
+        LOG.info("undo     : Undoes the most recently applied versioned migration");
         LOG.info("baseline : Baselines an existing database at the baselineVersion");
         LOG.info("repair   : Repairs the schema history table");
         LOG.info("");

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -112,7 +112,7 @@ public class Flyway implements FlywayConfiguration {
      * The target version up to which Flyway should consider migrations. Migrations with a higher version number will
      * be ignored. The special value {@code current} designates the current version of the schema (default: the latest version)
      */
-    private MigrationVersion target = MigrationVersion.LATEST;
+    private MigrationVersion target;
 
     /**
      * Whether placeholders should be replaced. (default: true)

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayPlugin.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.flywaydb.gradle;
 
-import org.flywaydb.gradle.FlywayExtension;
 import org.flywaydb.gradle.task.FlywayBaselineTask;
 import org.flywaydb.gradle.task.FlywayCleanTask;
 import org.flywaydb.gradle.task.FlywayInfoTask;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -46,11 +46,8 @@
 
 /**
  * Main workflow for migrating the database.
- *
- * @author Axel Fontaine
  */
 public class DbMigrate {
-
     private static final Log LOG = LogFactory.getLog(DbMigrate.class);
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java
Patch:
@@ -30,7 +30,6 @@
 import org.flywaydb.core.internal.util.TimeFormat;
 import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
 
-import java.sql.SQLException;
 import java.util.List;
 import java.util.concurrent.Callable;
 
@@ -143,7 +142,7 @@ public String validate() {
             for (final FlywayCallback callback : callbacks) {
                 new TransactionTemplate(connection.getJdbcConnection()).execute(new Callable<Object>() {
                     @Override
-                    public Object call() throws SQLException {
+                    public Object call() {
                         connection.changeCurrentSchemaTo(schema);
                         callback.beforeValidate(connection.getJdbcConnection());
                         return null;
@@ -187,7 +186,7 @@ public Pair<Integer, String> call() {
             for (final FlywayCallback callback : callbacks) {
                 new TransactionTemplate(connection.getJdbcConnection()).execute(new Callable<Object>() {
                     @Override
-                    public Object call() throws SQLException {
+                    public Object call() {
                         connection.changeCurrentSchemaTo(schema);
                         callback.afterValidate(connection.getJdbcConnection());
                         return null;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBConnection.java
Patch:
@@ -15,10 +15,12 @@
  */
 package org.flywaydb.core.internal.database.cockroachdb;
 
+import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.database.Schema;
+import org.flywaydb.core.internal.util.StringUtils;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/MigrationInfoHelper.java
Patch:
@@ -77,7 +77,9 @@ public static Pair<MigrationVersion, String> extractVersionAndDescription(String
     private static String cleanMigrationName(String migrationName, String prefix, String[] suffixes) {
         for (String suffix : suffixes) {
             if (migrationName.endsWith(suffix)) {
-                return migrationName.substring(prefix.length(), migrationName.length() - suffix.length());
+                return migrationName.substring(
+                        StringUtils.hasLength(prefix) ? prefix.length() : 0,
+                        migrationName.length() - suffix.length());
             }
         }
         return migrationName;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationExecutor.java
Patch:
@@ -35,7 +35,7 @@ public class JdbcMigrationExecutor implements MigrationExecutor {
      *
      * @param jdbcMigration The JdbcMigration to execute.
      */
-    public JdbcMigrationExecutor(JdbcMigration jdbcMigration) {
+    JdbcMigrationExecutor(JdbcMigration jdbcMigration) {
         this.jdbcMigration = jdbcMigration;
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/spring/SpringJdbcMigrationExecutor.java
Patch:
@@ -36,7 +36,7 @@ public class SpringJdbcMigrationExecutor implements MigrationExecutor {
      *
      * @param springJdbcMigration The Spring Jdbc Migration to execute.
      */
-    public SpringJdbcMigrationExecutor(SpringJdbcMigration springJdbcMigration) {
+    SpringJdbcMigrationExecutor(SpringJdbcMigration springJdbcMigration) {
         this.springJdbcMigration = springJdbcMigration;
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/JdbcTableSchemaHistory.java
Patch:
@@ -97,7 +97,6 @@ public void clearCache() {
 
     @Override
     public boolean exists() {
-        boolean exists = table.exists();
         if (!tableFallback) {
             Table fallbackTable = table.getSchema().getTable("schema_version");
             if (fallbackTable.exists()) {
@@ -110,7 +109,7 @@ public boolean exists() {
                 table = fallbackTable;
             }
         }
-        return exists;
+        return table.exists();
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/JdbcTemplate.java
Patch:
@@ -94,7 +94,7 @@ public List<Map<String, String>> queryForList(String query, String... params) th
             }
             resultSet = statement.executeQuery();
 
-            result = new ArrayList<Map<String, String>>();
+            result = new ArrayList<>();
             while (resultSet.next()) {
                 Map<String, String> rowMap = new LinkedHashMap<>();
                 for (int i = 1; i <= resultSet.getMetaData().getColumnCount(); i++) {

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/FlywayPlugin.java
Patch:
@@ -21,6 +21,7 @@
 import org.flywaydb.gradle.task.FlywayInfoTask;
 import org.flywaydb.gradle.task.FlywayMigrateTask;
 import org.flywaydb.gradle.task.FlywayRepairTask;
+import org.flywaydb.gradle.task.FlywayUndoTask;
 import org.flywaydb.gradle.task.FlywayValidateTask;
 import org.gradle.api.Plugin;
 import org.gradle.api.Project;
@@ -34,6 +35,7 @@ public void apply(Project project) {
         project.getTasks().create("flywayClean", FlywayCleanTask.class);
         project.getTasks().create("flywayBaseline", FlywayBaselineTask.class);
         project.getTasks().create("flywayMigrate", FlywayMigrateTask.class);
+        project.getTasks().create("flywayUndo", FlywayUndoTask.class);
         project.getTasks().create("flywayValidate", FlywayValidateTask.class);
         project.getTasks().create("flywayInfo", FlywayInfoTask.class);
         project.getTasks().create("flywayRepair", FlywayRepairTask.class);

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/FlywayMigrateTask.java
Patch:
@@ -25,6 +25,6 @@ public FlywayMigrateTask() {
 
     @Override
     protected Object run(Flyway flyway) {
-        return flyway.migrate() > 0;
+        return flyway.migrate();
     }
 }
\ No newline at end of file

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -243,7 +243,7 @@ private static void printUsage() {
         LOG.info("sqlMigrationPrefix           : File name prefix for sql migrations");
         LOG.info("repeatableSqlMigrationPrefix : File name prefix for repeatable sql migrations");
         LOG.info("sqlMigrationSeparator        : File name separator for sql migrations");
-        LOG.info("sqlMigrationSuffix           : File name suffix for sql migrations");
+        LOG.info("sqlMigrationSuffixes         : Comma-separated list of file name suffixes for sql migrations");
         LOG.info("mixed                        : Allow mixing transactional and non-transactional statements");
         LOG.info("encoding                     : Encoding of sql migrations");
         LOG.info("placeholderReplacement       : Whether placeholders should be replaced");

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationResolver.java
Patch:
@@ -135,7 +135,7 @@ protected void resolveMigrationsForSingleLocation(Location location, List<Resolv
                         + " => ensure it starts with V or R," +
                         " or implement org.flywaydb.core.api.migration.MigrationInfoProvider for non-default naming");
             }
-            Pair<MigrationVersion, String> info = MigrationInfoHelper.extractVersionAndDescription(shortName, prefix, "__", "", repeatable);
+            Pair<MigrationVersion, String> info = MigrationInfoHelper.extractVersionAndDescription(shortName, prefix, "__", new String[] {""}, repeatable);
             version = info.getLeft();
             description = info.getRight();
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/spring/SpringJdbcMigrationResolver.java
Patch:
@@ -134,7 +134,7 @@ protected void resolveMigrationsForSingleLocation(Location location, List<Resolv
                         + " => ensure it starts with V or R," +
                         " or implement org.flywaydb.core.api.migration.MigrationInfoProvider for non-default naming");
             }
-            Pair<MigrationVersion, String> info = MigrationInfoHelper.extractVersionAndDescription(shortName, prefix, "__", "", repeatable);
+            Pair<MigrationVersion, String> info = MigrationInfoHelper.extractVersionAndDescription(shortName, prefix, "__", new String[] {""}, repeatable);
             version = info.getLeft();
             description = info.getRight();
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ResourceAndClassScanner.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.flywaydb.core.internal.util.Location;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
-import org.flywaydb.core.internal.util.scanner.Resource;
 
 /**
  * Scanner for both resources and classes.
@@ -29,11 +28,11 @@ public interface ResourceAndClassScanner {
      *
      * @param location The location in the classpath to start searching. Subdirectories are also searched.
      * @param prefix   The prefix of the resource names to match.
-     * @param suffix   The suffix of the resource names to match.
+     * @param suffixes The suffixes of the resource names to match.
      * @return The resources that were found.
      * @throws Exception when the location could not be scanned.
      */
-    LoadableResource[] scanForResources(Location location, String prefix, String suffix) throws Exception;
+    LoadableResource[] scanForResources(Location location, String prefix, String[] suffixes) throws Exception;
 
     /**
      * Scans the classpath for concrete classes under the specified package implementing this interface.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLAdvisoryLockTemplate.java
Patch:
@@ -70,7 +70,7 @@ public <T> T execute(Callable<T> callable) {
             lock();
             return callable.call();
         } catch (SQLException e) {
-            throw new FlywaySqlException("Unable to acquire Flyway advisory lock", e);
+            throw new FlywaySqlException("Unable to acquire PostgreSQL advisory lock", e);
         } catch (Exception e) {
             RuntimeException rethrow;
             if (e instanceof RuntimeException) {
@@ -83,7 +83,7 @@ public <T> T execute(Callable<T> callable) {
             try {
                 jdbcTemplate.execute("SELECT pg_advisory_unlock(" + lockNum + ")");
             } catch (SQLException e) {
-                LOG.error("Unable to release Flyway advisory lock", e);
+                LOG.error("Unable to release PostgreSQL advisory lock", e);
             }
         }
     }
@@ -93,7 +93,7 @@ private void lock() throws SQLException {
             try {
                 Thread.sleep(100L);
             } catch (InterruptedException e) {
-                throw new FlywayException("Interrupted while attempting to acquire Flyway advisory lock", e);
+                throw new FlywayException("Interrupted while attempting to acquire PostgreSQL advisory lock", e);
             }
         }
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -161,6 +161,6 @@ public boolean catalogIsSchema() {
 
     @Override
     public boolean useSingleConnection() {
-        return false;
+        return true;
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -101,12 +101,12 @@ public class Flyway implements FlywayConfiguration {
     private String[] schemaNames = new String[0];
 
     /**
-     * <p>The name of the schema schema history table that will be used by Flyway. (default: schema_version)</p><p> By default
+     * <p>The name of the schema schema history table that will be used by Flyway. (default: flyway_schema_history)</p><p> By default
      * (single-schema mode) the schema history table is placed in the default schema for the connection provided by the
      * datasource. </p> <p> When the <i>flyway.schemas</i> property is set (multi-schema mode), the schema history table is
      * placed in the first schema of the list. </p>
      */
-    private String table = "schema_version";
+    private String table = "flyway_schema_history";
 
     /**
      * The target version up to which Flyway should consider migrations. Migrations with a higher version number will
@@ -813,7 +813,7 @@ public void setSchemas(String... schemas) {
      * the <i>flyway.schemas</i> property is set (multi-schema mode), the schema history table is placed in the first schema
      * of the list. </p>
      *
-     * @param table The name of the schema schema history table that will be used by flyway. (default: schema_version)
+     * @param table The name of the schema schema history table that will be used by flyway. (default: flyway_schema_history)
      */
     public void setTable(String table) {
         this.table = table;

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FlywayConfiguration.java
Patch:
@@ -169,7 +169,7 @@ public interface FlywayConfiguration {
      * When the <i>flyway.schemas</i> property is set (multi-schema mode), the schema history table is placed in the first
      * schema of the list. </p>
      *
-     * @return The name of the schema schema history table that will be used by flyway. (default: schema_version)
+     * @return The name of the schema schema history table that will be used by flyway. (default: flyway_schema_history)
      */
     String getTable();
 

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -111,7 +111,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
     private String[] schemas;
 
     /**
-     * <p>The name of the schema history table that will be used by Flyway. (default: schema_version)</p>
+     * <p>The name of the schema history table that will be used by Flyway. (default: flyway_schema_history)</p>
      * <p> By default (single-schema mode) the
      * schema history table is placed in the default schema for the connection provided by the datasource. <br/> When the
      * {@code flyway.schemas} property is set (multi-schema mode), the schema history table is placed in the first schema of

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -227,7 +227,7 @@ private static void printUsage() {
         LOG.info("info     : Prints the information about applied, current and pending migrations");
         LOG.info("validate : Validates the applied migrations against the ones on the classpath");
         LOG.info("baseline : Baselines an existing database at the baselineVersion");
-        LOG.info("repair   : Repairs the metadata table");
+        LOG.info("repair   : Repairs the schema history table");
         LOG.info("");
         LOG.info("Options (Format: -key=value)");
         LOG.info("-------");
@@ -236,7 +236,7 @@ private static void printUsage() {
         LOG.info("user                         : User to use to connect to the database");
         LOG.info("password                     : Password to use to connect to the database");
         LOG.info("schemas                      : Comma-separated list of the schemas managed by Flyway");
-        LOG.info("table                        : Name of Flyway's metadata table");
+        LOG.info("table                        : Name of Flyway's schema history table");
         LOG.info("locations                    : Classpath locations to scan recursively for migrations");
         LOG.info("resolvers                    : Comma-separated list of custom MigrationResolvers");
         LOG.info("skipDefaultResolvers         : Skips default resolvers (jdbc, sql and Spring-jdbc)");
@@ -250,7 +250,7 @@ private static void printUsage() {
         LOG.info("placeholders                 : Placeholders to replace in sql migrations");
         LOG.info("placeholderPrefix            : Prefix of every placeholder");
         LOG.info("placeholderSuffix            : Suffix of every placeholder");
-        LOG.info("installedBy                  : Username that will be recorded in the metadata table");
+        LOG.info("installedBy                  : Username that will be recorded in the schema history table");
         LOG.info("target                       : Target version up to which Flyway should use migrations");
         LOG.info("outOfOrder                   : Allows migrations to be run \"out of order\"");
         LOG.info("callbacks                    : Comma-separated list of FlywayCallback classes");

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationState.java
Patch:
@@ -30,7 +30,7 @@ public enum MigrationState {
     ABOVE_TARGET("Above Target", true, false, false),
 
     /**
-     * This migration was not applied against this DB, because the metadata table was baselined with a higher version.
+     * This migration was not applied against this DB, because the schema history table was baselined with a higher version.
      */
     BELOW_BASELINE("Below Baseline", true, false, false),
 

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationType.java
Patch:
@@ -56,7 +56,7 @@ public enum MigrationType {
     }
 
     /**
-     * @return Whether this is a synthetic migration type, which is only ever present in the metadata table,
+     * @return Whether this is a synthetic migration type, which is only ever present in the schema history table,
      * but never discovered by migration resolvers.
      */
     public boolean isSynthetic() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbClean.java
Patch:
@@ -43,7 +43,7 @@ public class DbClean {
     private final Connection connection;
 
     /**
-     * The metadata table.
+     * The schema history table.
      */
     private final SchemaHistory schemaHistory;
 
@@ -69,7 +69,7 @@ public class DbClean {
      * Creates a new database cleaner.
      *
      * @param database     The DB support for the connection.
-     * @param schemaHistory The metadata table.
+     * @param schemaHistory The schema history table.
      * @param schemas       The schemas to clean.
      * @param callbacks     The list of callbacks that fire before or after the clean task is executed.
      * @param cleanDisabled Whether to disable clean.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbSchemas.java
Patch:
@@ -32,7 +32,7 @@ public class DbSchemas {
     private static final Log LOG = LogFactory.getLog(DbSchemas.class);
 
     /**
-     * The database connection to use for accessing the metadata table.
+     * The database connection to use for accessing the schema history table.
      */
     private final Connection connection;
 
@@ -42,7 +42,7 @@ public class DbSchemas {
     private final Schema[] schemas;
 
     /**
-     * The metadata table.
+     * The schema history table.
      */
     private final SchemaHistory schemaHistory;
 
@@ -51,7 +51,7 @@ public class DbSchemas {
      *
      * @param database      The database to use.
      * @param schemas       The schemas managed by Flyway.
-     * @param schemaHistory The metadata table.
+     * @param schemaHistory The schema history table.
      */
     public DbSchemas(Database database, Schema[] schemas, SchemaHistory schemaHistory) {
         this.connection = database.getMainConnection();

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java
Patch:
@@ -48,12 +48,12 @@ public class DbValidate {
     private final MigrationVersion target;
 
     /**
-     * The database metadata table.
+     * The database schema history table.
      */
     private final SchemaHistory schemaHistory;
 
     /**
-     * The schema containing the metadata table.
+     * The schema containing the schema history table.
      */
     private final Schema schema;
 
@@ -101,7 +101,7 @@ public class DbValidate {
      * Creates a new database validator.
      *
      * @param database          The DB support for the connection.
-     * @param schemaHistory     The database metadata table.
+     * @param schemaHistory     The database schema history table.
      * @param schema            The database schema to use by default.
      * @param migrationResolver The migration resolver.
      * @param target            The target version of the migration.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Database.java
Patch:
@@ -232,7 +232,7 @@ public final String quote(String... identifiers) {
     public abstract boolean catalogIsSchema();
 
     /**
-     * @return Whether to only use a single connection for both metadata table management and applying migrations.
+     * @return Whether to only use a single connection for both schema history table management and applying migrations.
      */
     public boolean useSingleConnection() {
         return false;

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoServiceImpl.java
Patch:
@@ -46,7 +46,7 @@ public class MigrationInfoServiceImpl implements MigrationInfoService {
     private final MigrationResolver migrationResolver;
 
     /**
-     * The metadata table for applied migrations.
+     * The schema history table for applied migrations.
      */
     private final SchemaHistory schemaHistory;
 
@@ -87,7 +87,7 @@ public class MigrationInfoServiceImpl implements MigrationInfoService {
      * Creates a new MigrationInfoServiceImpl.
      *
      * @param migrationResolver The migration resolver for available migrations.
-     * @param schemaHistory     The metadata table for applied migrations.
+     * @param schemaHistory     The schema history table for applied migrations.
      * @param target            The target version up to which to retrieve the info.
      * @param outOfOrder        Allows migrations to be run "out of order".
      * @param pending           Whether pending migrations are allowed.

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/AppliedMigration.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Date;
 
 /**
- * A migration applied to the database (maps to a row in the metadata table).
+ * A migration applied to the database (maps to a row in the schema history table).
  */
 public class AppliedMigration implements Comparable<AppliedMigration> {
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/JdbcTableSchemaHistory.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.concurrent.Callable;
 
 /**
- * Supports reading and writing to the metadata table.
+ * Supports reading and writing to the schema history table.
  */
 public class JdbcTableSchemaHistory extends SchemaHistory {
     private static final Log LOG = LogFactory.getLog(JdbcTableSchemaHistory.class);
@@ -71,7 +71,7 @@ public class JdbcTableSchemaHistory extends SchemaHistory {
     private String installedBy;
 
     /**
-     * Creates a new instance of the metadata table support.
+     * Creates a new instance of the schema history table support.
      *
      * @param database    The database to use.
      * @param table       The schema history table used by flyway.
@@ -165,7 +165,7 @@ public List<AppliedMigration> allAppliedMigrations() {
     }
 
     /**
-     * Retrieve the applied migrations from the metadata table.
+     * Retrieve the applied migrations from the schema history table.
      *
      * @param migrationTypes The specific migration types to look for. (Optional) None means find all migrations.
      * @return The applied migrations.

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/FlywayRepairTask.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.Flyway;
 
 /**
- * Repairs the Flyway metadata table. This will perform the following actions:
+ * Repairs the Flyway schema history table. This will perform the following actions:
  * <ul>
  * <li>Remove any failed migrations on databases without DDL transactions (User objects left behind must still be cleaned up manually)</li>
  * <li>Realign the checksums, descriptions and types of the applied migrations with the ones of the available migrations</li>
@@ -27,7 +27,7 @@
 public class FlywayRepairTask extends AbstractFlywayTask {
     public FlywayRepairTask() {
         super();
-        setDescription("Repairs the Flyway metadata table.");
+        setDescription("Repairs the Flyway schema history table.");
     }
 
     @Override

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/RepairMojo.java
Patch:
@@ -21,7 +21,7 @@
 import org.flywaydb.core.Flyway;
 
 /**
- * Repairs the Flyway metadata table. This will perform the following actions:
+ * Repairs the Flyway schema history table. This will perform the following actions:
  * <ul>
  * <li>Remove any failed migrations on databases without DDL transactions (User objects left behind must still be cleaned up manually)</li>
  * <li>Realign the checksums, descriptions and types of the applied migrations with the ones of the available migrations</li>

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbBaseline.java
Patch:
@@ -104,6 +104,7 @@ public Object call() throws SQLException {
                 });
             }
 
+            schemaHistory.create();
             new TransactionTemplate(connection.getJdbcConnection()).execute(new Callable<Object>() {
                 @Override
                 public Void call() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -131,6 +131,8 @@ public Object call() throws SQLException {
             StopWatch stopWatch = new StopWatch();
             stopWatch.start();
 
+            schemaHistory.create();
+
             int count = configuration.isGroup() ?
                     // When group is active, start the transaction boundary early to
                     // ensure that all changes to the metadata table are either committed or rolled back atomically.

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbSchemas.java
Patch:
@@ -81,6 +81,7 @@ public Void call() {
                             schema.create();
                         }
 
+                        schemaHistory.create();
                         schemaHistory.addSchemasMarker(schemas);
 
                         return null;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLConnection.java
Patch:
@@ -17,9 +17,9 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -34,7 +34,8 @@ public class OracleSqlStatementBuilder extends SqlStatementBuilder {
     /**
      * Regex for keywords that can appear before a string literal without being separated by a space.
      */
-    private static final Pattern KEYWORDS_BEFORE_STRING_LITERAL_REGEX = Pattern.compile("^(N|IF|ELSIF|SELECT|IMMEDIATE|RETURN|IS)('.*)");
+    private static final Pattern KEYWORDS_BEFORE_STRING_LITERAL_REGEX =
+            Pattern.compile("^(N|DATE|IF|ELSIF|SELECT|IMMEDIATE|RETURN|IS)('.*)");
 
     /**
      * Regex for keywords that can appear after a string literal without being separated by a space.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -267,7 +267,7 @@ private static void printUsage() {
         LOG.info("configFileEncoding           : Encoding to use when loading the config files");
         LOG.info("jarDirs                      : Comma-separated list of dirs for Jdbc drivers & Java migrations");
         LOG.info("dryRunOutput                 : File where to output the SQL statements of a migration dry run");
-        LOG.info("errorHandler                 : Handler for errors that occur during a migration");
+        LOG.info("errorHandlers                : Comma-separated list of handlers for errors and warnings");
         LOG.info("");
         LOG.info("Flags");
         LOG.info("-----");

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptFlywayCallback.java
Patch:
@@ -22,8 +22,8 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
-import org.flywaydb.core.internal.database.SqlScript;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+import org.flywaydb.core.internal.sqlscript.SqlScript;
 import org.flywaydb.core.internal.util.Location;
 import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -28,7 +28,7 @@
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.FlywaySqlScriptException;
+import org.flywaydb.core.internal.sqlscript.FlywaySqlScriptException;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.info.MigrationInfoImpl;
 import org.flywaydb.core.internal.info.MigrationInfoServiceImpl;

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -59,7 +59,7 @@ public class ConfigUtils {
     public static final String DRIVER = "flyway.driver";
     public static final String DRYRUN_OUTPUT = "flyway.dryRunOutput";
     public static final String ENCODING = "flyway.encoding";
-    public static final String ERROR_HANDLER = "flyway.errorHandler";
+    public static final String ERROR_HANDLERS = "flyway.errorHandlers";
     public static final String GROUP = "flyway.group";
     public static final String IGNORE_FUTURE_MIGRATIONS = "flyway.ignoreFutureMigrations";
     public static final String IGNORE_MISSING_MIGRATIONS = "flyway.ignoreMissingMigrations";
@@ -156,8 +156,8 @@ private static String convertKey(String key) {
         if ("FLYWAY_ENCODING".equals(key)) {
             return ENCODING;
         }
-        if ("FLYWAY_ERROR_HANDLER".equals(key)) {
-            return ERROR_HANDLER;
+        if ("FLYWAY_ERROR_HANDLERS".equals(key)) {
+            return ERROR_HANDLERS;
         }
         if ("FLYWAY_GROUP".equals(key)) {
             return GROUP;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Connection.java
Patch:
@@ -16,6 +16,8 @@
 package org.flywaydb.core.internal.database;
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
 import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Database.java
Patch:
@@ -18,6 +18,7 @@
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.Pair;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
@@ -34,7 +35,6 @@
  */
 public abstract class Database<C extends Connection> implements Closeable {
     private static final Log LOG = LogFactory.getLog(Database.class);
-    public static final Delimiter DEFAULT_DELIMITER = new Delimiter(";", false);
 
     /**
      * The Flyway configuration.
@@ -143,7 +143,7 @@ protected void recommendFlywayUpgrade(String database, String version) {
      * @return The default delimiter for this database.
      */
     public Delimiter getDefaultDelimiter() {
-        return DEFAULT_DELIMITER;
+        return Delimiter.SEMICOLON;
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseFactory.java
Patch:
@@ -32,6 +32,7 @@
 import org.flywaydb.core.internal.database.sqlite.SQLiteDatabase;
 import org.flywaydb.core.internal.database.sqlserver.SQLServerDatabase;
 import org.flywaydb.core.internal.database.sybasease.SybaseASEDatabase;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
 
 import java.sql.Connection;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Function.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.flywaydb.core.internal.database;
 
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+
 /**
  * A user defined type within a schema.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Schema.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.flywaydb.core.internal.database;
 
+import org.flywaydb.core.internal.exception.FlywaySqlException;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
 
 import java.sql.ResultSet;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/SchemaObject.java
Patch:
@@ -15,6 +15,9 @@
  */
 package org.flywaydb.core.internal.database;
 
+import org.flywaydb.core.internal.exception.FlywaySqlException;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+
 import java.sql.SQLException;
 
 /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/SqlStatementBuilder.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.flywaydb.core.internal.database;
 
+import org.flywaydb.core.internal.sqlscript.SqlStatement;
+import org.flywaydb.core.internal.sqlscript.StandardSqlStatement;
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.util.ArrayList;
@@ -102,7 +104,7 @@ public SqlStatementBuilder(Delimiter defaultDelimiter) {
     /**
      * @param lineNumber The initial line number of this statement.
      */
-    void setLineNumber(int lineNumber) {
+    public void setLineNumber(int lineNumber) {
         this.lineNumber = lineNumber;
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Type.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.flywaydb.core.internal.database;
 
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
+
 /**
  * A user defined type within a schema.
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBConnection.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.FlywaySqlException;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.database.Schema;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBDatabase.java
Patch:
@@ -17,9 +17,9 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.FlywayDbUpgradeRequiredException;
-import org.flywaydb.core.internal.database.FlywaySqlException;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 import org.flywaydb.core.internal.util.Pair;
 import org.flywaydb.core.internal.util.StringUtils;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBSchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.cockroachdb;
 
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/cockroachdb/CockroachDBTable.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Database.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.FlywayDbUpgradeRequiredException;
+import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 
 import java.sql.Connection;
@@ -68,7 +68,7 @@ protected final void ensureSupported() {
         }
 
         if (majorVersion == 9 || (majorVersion == 10 && minorVersion < 5)) {
-        throw new org.flywaydb.core.internal.database.FlywayEnterpriseUpgradeRequiredException("IBM", "DB2", version);
+        throw new org.flywaydb.core.internal.exception.FlywayEnterpriseUpgradeRequiredException("IBM", "DB2", version);
         }
 
         if (majorVersion > 11 || (majorVersion == 11 && minorVersion > 1)) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Function.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.Function;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.util.StringUtils;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Schema.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.db2;
 
 import org.flywaydb.core.internal.database.Function;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 import org.flywaydb.core.internal.database.Type;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Table.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.db2;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/DB2Type.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.db2;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Type;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyDatabase.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.FlywayDbUpgradeRequiredException;
+import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 
 import java.sql.Connection;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbySchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.derby;
 
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 import org.flywaydb.core.internal.util.StringUtils;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/derby/DerbyTable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.derby;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Database.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.FlywayDbUpgradeRequiredException;
+import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 
 import java.sql.Connection;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Schema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.h2;
 
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 import org.flywaydb.core.internal.util.StringUtils;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/H2Table.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.h2;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBDatabase.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.FlywayDbUpgradeRequiredException;
+import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 
 import java.sql.Connection;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBSchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.hsqldb;
 
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/HSQLDBTable.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLDatabase.java
Patch:
@@ -17,8 +17,8 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.FlywayDbUpgradeRequiredException;
-import org.flywaydb.core.internal.database.FlywaySqlException;
+import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 
 import java.sql.Connection;
@@ -77,7 +77,7 @@ protected final void ensureSupported() {
         if (majorVersion == 5) {
 
             if (minorVersion < 5) {
-                throw new org.flywaydb.core.internal.database.FlywayEnterpriseUpgradeRequiredException(
+                throw new org.flywaydb.core.internal.exception.FlywayEnterpriseUpgradeRequiredException(
                     isMariaDB ? "MariaDB" : "Oracle", productName, version);
             }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLNamedLockTemplate.java
Patch:
@@ -18,8 +18,8 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.database.FlywaySqlException;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 
 import java.sql.SQLException;
 import java.util.concurrent.Callable;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLSchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.mysql;
 
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 
@@ -75,7 +75,7 @@ protected void doClean() throws SQLException {
         }
 
         for (String statement : cleanRoutines()) {
-            jdbcTemplate.executeStatement(statement);
+            jdbcTemplate.execute(statement);
         }
 
         for (String statement : cleanViews()) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLTable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.mysql;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleDatabase.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.FlywayDbUpgradeRequiredException;
+import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.jdbc.RowMapper;
@@ -85,7 +85,7 @@ protected final void ensureSupported() {
         }
 
         if (majorVersion == 10 || majorVersion == 11) {
-        throw new org.flywaydb.core.internal.database.FlywayEnterpriseUpgradeRequiredException("Oracle", "Oracle", "" + majorVersion);
+        throw new org.flywaydb.core.internal.exception.FlywayEnterpriseUpgradeRequiredException("Oracle", "Oracle", "" + majorVersion);
         }
 
         if (majorVersion > 12) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSchema.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 import org.flywaydb.core.internal.util.StringUtils;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleTable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.oracle;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLAdvisoryLockTemplate.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.database.postgresql;
 
 import org.flywaydb.core.api.FlywayException;
-import org.flywaydb.core.internal.database.FlywaySqlException;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.jdbc.RowMapper;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLConnection.java
Patch:
@@ -17,8 +17,7 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.FlywaySqlException;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 import org.flywaydb.core.internal.util.StringUtils;
@@ -76,7 +75,7 @@ protected String doGetCurrentSchemaName() throws SQLException {
     public void changeCurrentSchemaTo(Schema schema) {
         try {
             // First reset the role in case a migration or callback changed it
-            jdbcTemplate.executeStatement("RESET ROLE");
+            jdbcTemplate.execute("RESET ROLE");
 
             if (schema.getName().equals(originalSchema) || originalSchema.startsWith(schema.getName() + ",") || !schema.exists()) {
                 return;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLDatabase.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.FlywayDbUpgradeRequiredException;
+import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 import org.flywaydb.core.internal.util.StringUtils;
 
@@ -69,7 +69,7 @@ protected final void ensureSupported() {
         }
 
         if (majorVersion == 9 && minorVersion < 3) {
-            throw new org.flywaydb.core.internal.database.FlywayEnterpriseUpgradeRequiredException("PostgreSQL", "PostgreSQL", version);
+            throw new org.flywaydb.core.internal.exception.FlywayEnterpriseUpgradeRequiredException("PostgreSQL", "PostgreSQL", version);
         }
 
         if (majorVersion > 10) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.postgresql;
 
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 import org.flywaydb.core.internal.database.Type;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLSqlStatementBuilder.java
Patch:
@@ -16,9 +16,8 @@
 package org.flywaydb.core.internal.database.postgresql;
 
 import org.flywaydb.core.internal.database.Delimiter;
-import org.flywaydb.core.internal.database.SqlStatement;
+import org.flywaydb.core.internal.sqlscript.SqlStatement;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
-import org.flywaydb.core.internal.database.StandardSqlStatement;
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.util.regex.Matcher;
@@ -71,7 +70,7 @@ public SqlStatement getSqlStatement() {
         if (pgCopy) {
             return new PostgreSQLCopyStatement(lineNumber, statement.toString());
         }
-        return new StandardSqlStatement(lineNumber, statement.toString());
+        return super.getSqlStatement();
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLTable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.postgresql;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLType.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.postgresql;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Type;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftConnection.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.FlywaySqlException;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.util.StringUtils;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftDatabase.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 import org.flywaydb.core.internal.util.StringUtils;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftSchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.redshift;
 
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 import org.flywaydb.core.internal.database.Type;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftSqlStatementBuilder.java
Patch:
@@ -16,9 +16,9 @@
 package org.flywaydb.core.internal.database.redshift;
 
 import org.flywaydb.core.internal.database.Delimiter;
-import org.flywaydb.core.internal.database.SqlStatement;
+import org.flywaydb.core.internal.sqlscript.SqlStatement;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
-import org.flywaydb.core.internal.database.StandardSqlStatement;
+import org.flywaydb.core.internal.sqlscript.StandardSqlStatement;
 import org.flywaydb.core.internal.util.StringUtils;
 
 import java.util.regex.Matcher;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftTable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.redshift;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/RedshiftType.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.redshift;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Type;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANADatabase.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.FlywayDbUpgradeRequiredException;
+import org.flywaydb.core.internal.database.Delimiter;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 
 import java.sql.Connection;
@@ -63,7 +63,7 @@ protected void ensureSupported() {
 
 
         if (majorVersion == 1) {
-            throw new org.flywaydb.core.internal.database.FlywayEnterpriseUpgradeRequiredException("SAP", "HANA", version);
+            throw new org.flywaydb.core.internal.exception.FlywayEnterpriseUpgradeRequiredException("SAP", "HANA", version);
         }
 
         if (majorVersion > 2) {
@@ -73,7 +73,7 @@ protected void ensureSupported() {
     }
 
     public SqlStatementBuilder createSqlStatementBuilder() {
-        return new SAPHANASqlStatementBuilder(DEFAULT_DELIMITER);
+        return new SAPHANASqlStatementBuilder(Delimiter.SEMICOLON);
     }
 
     public String getDbName() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANASchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.saphana;
 
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/saphana/SAPHANATable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.saphana;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteDatabase.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.FlywayDbUpgradeRequiredException;
+import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 
 import java.sql.Connection;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlite/SQLiteTable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.sqlite;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 import org.flywaydb.core.api.logging.Log;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerConnection.java
Patch:
@@ -19,7 +19,7 @@
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.database.Connection;
-import org.flywaydb.core.internal.database.FlywaySqlException;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.database.Schema;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.Delimiter;
-import org.flywaydb.core.internal.database.FlywayDbUpgradeRequiredException;
+import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 import org.flywaydb.core.internal.util.StringUtils;
 
@@ -70,7 +70,7 @@ protected final void ensureSupported() {
         }
 
         if (majorVersion < 12) {
-        throw new org.flywaydb.core.internal.database.FlywayEnterpriseUpgradeRequiredException("Microsoft", "SQL Server", release);
+        throw new org.flywaydb.core.internal.exception.FlywayEnterpriseUpgradeRequiredException("Microsoft", "SQL Server", release);
         }
 
         if (majorVersion > 14 || (majorVersion == 14 && minorVersion > 0)) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerSchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.sqlserver;
 
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 import org.flywaydb.core.internal.util.jdbc.RowMapper;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerTable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.sqlserver;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASEDatabase.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.internal.database.Database;
 import org.flywaydb.core.internal.database.Delimiter;
-import org.flywaydb.core.internal.database.FlywayDbUpgradeRequiredException;
+import org.flywaydb.core.internal.exception.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.database.SqlStatementBuilder;
 
 import java.sql.Connection;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASESchema.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.database.sybasease;
 
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sybasease/SybaseASETable.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.database.sybasease;
 
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
 import org.flywaydb.core.internal.database.Table;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywayDbUpgradeRequiredException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.database;
+package org.flywaydb.core.internal.exception;
 
 import org.flywaydb.core.api.FlywayException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywayEnterpriseUpgradeRequiredException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.database;
+package org.flywaydb.core.internal.exception;
 
 import org.flywaydb.core.api.FlywayException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywayProUpgradeRequiredException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.database;
+package org.flywaydb.core.internal.exception;
 
 import org.flywaydb.core.api.FlywayException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/exception/FlywaySqlException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.database;
+package org.flywaydb.core.internal.exception;
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.util.StringUtils;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationExecutor.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.resolver.MigrationExecutor;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.SqlScript;
+import org.flywaydb.core.internal.sqlscript.SqlScript;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.LoadableResource;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/JdbcTableSchemaHistory.java
Patch:
@@ -23,10 +23,10 @@
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.database.Connection;
 import org.flywaydb.core.internal.database.Database;
-import org.flywaydb.core.internal.database.FlywaySqlException;
-import org.flywaydb.core.internal.database.JdbcTemplate;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
+import org.flywaydb.core.internal.util.jdbc.JdbcTemplate;
 import org.flywaydb.core.internal.database.Schema;
-import org.flywaydb.core.internal.database.SqlScript;
+import org.flywaydb.core.internal.sqlscript.SqlScript;
 import org.flywaydb.core.internal.database.Table;
 import org.flywaydb.core.internal.util.jdbc.RowMapper;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/sqlscript/FlywaySqlScriptException.java
Patch:
@@ -13,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.database;
+package org.flywaydb.core.internal.sqlscript;
 
+import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.scanner.Resource;
 
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/DriverDataSource.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.database.FlywaySqlException;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.internal.util.ClassUtils;
 import org.flywaydb.core.internal.util.ExceptionUtils;
 import org.flywaydb.core.internal.util.FeatureDetector;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/JdbcUtils.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.database.FlywaySqlException;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
 
 import javax.sql.DataSource;
 import java.sql.Connection;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/RowMapper.java
Patch:
@@ -26,7 +26,7 @@
 public interface RowMapper<T> {
     /**
      * Maps a row in this resultSet to an object.
-     * @param rs The resultset.
+     * @param rs The resultset, already positioned on the row to map.
      * @return The corresponding object.
      * @throws SQLException when reading the resultset failed.
      */

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/TransactionTemplate.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.util.jdbc;
 
 import org.flywaydb.core.api.FlywayException;
-import org.flywaydb.core.internal.database.FlywaySqlException;
+import org.flywaydb.core.internal.exception.FlywaySqlException;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -122,6 +122,6 @@ protected String computeAlternateCloseQuote(String openQuote) {
 
     @Override
     public boolean canDiscard() {
-        return super.canDiscard() || statementStart.startsWith("SET DEFINE OFF");
+        return super.canDiscard() || statementStart.startsWith("/");
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/DatabaseFactory.java
Patch:
@@ -201,7 +201,7 @@ private static String getJdbcUrl(Connection connection) {
      */
     static String filterUrl(String url) {
         int questionMark = url.indexOf("?");
-        if (questionMark >= 0) {
+        if (questionMark >= 0 && !url.contains("?databaseName=")) {
             url = url.substring(0, questionMark);
         }
         url = url.replaceAll("://.*:.*@", "://");

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -164,7 +164,7 @@ public MigrationState getState() {
                 }
                 return MigrationState.OUTDATED;
             }
-            return MigrationState.SUPERSEEDED;
+            return MigrationState.SUPERSEDED;
         }
 
         if (outOfOrder) {
@@ -250,7 +250,7 @@ public String validate() {
                 }
                 if (resolvedMigration.getVersion() != null
                         || (context.pending &&
-                        ((MigrationState.OUTDATED != getState()) && (MigrationState.SUPERSEEDED != getState())))) {
+                        ((MigrationState.OUTDATED != getState()) && (MigrationState.SUPERSEDED != getState())))) {
                     if (!ObjectUtils.nullSafeEquals(resolvedMigration.getChecksum(), appliedMigration.getChecksum())) {
                         return createMismatchMessage("checksum", migrationIdentifier,
                                 appliedMigration.getChecksum(), resolvedMigration.getChecksum());

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1493,7 +1493,7 @@ public void configure(Map<String, String> props) {
 
         for (String key : props.keySet()) {
             if (key.startsWith("flyway.")) {
-                LOG.warn("Unknown configuration property: " + key);
+                throw new FlywayException("Unknown configuration property: " + key);
             }
         }
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathScanner.java
Patch:
@@ -120,7 +120,7 @@ public Class<?>[] scanForClasses(Location location, Class<?> implementedInterfac
                 LOG.debug("Skipping invalid class: " + className);
                 continue;
             } catch (IncompatibleClassChangeError e) {
-                LOG.debug("Skipping incompatibly changed class: " + className);
+                LOG.warn("Skipping incompatibly changed class: " + className);
                 continue;
             } catch (NoClassDefFoundError e) {
                 LOG.debug("Skipping non-loadable class: " + className);

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Connection.java
Patch:
@@ -33,7 +33,7 @@ public abstract class Connection<D extends Database> implements Closeable {
      */
     protected final String originalSchema;
 
-    public Connection(FlywayConfiguration configuration, D database, java.sql.Connection connection, int nullType
+    protected Connection(FlywayConfiguration configuration, D database, java.sql.Connection connection, int nullType
 
 
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/sqlserver/SQLServerDatabase.java
Patch:
@@ -161,6 +161,6 @@ public boolean catalogIsSchema() {
 
     @Override
     public boolean useSingleConnection() {
-        return true;
+        return false;
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Delimiter.java
Patch:
@@ -19,6 +19,9 @@
  * Represents a sql statement delimiter.
  */
 public class Delimiter {
+    public static final Delimiter SEMICOLON = new Delimiter(";", false);
+    public static final Delimiter GO = new Delimiter("GO", true);
+
     /**
      * The actual delimiter string.
      */

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -266,6 +266,7 @@ private static void printUsage() {
         LOG.info("configFiles                  : Comma-separated list of config files to use");
         LOG.info("configFileEncoding           : Encoding to use when loading the config files");
         LOG.info("jarDirs                      : Comma-separated list of dirs for Jdbc drivers & Java migrations");
+        LOG.info("dryRunOutput                 : File where to output the SQL statements of a migration dry run");
         LOG.info("errorHandler                 : Handler for errors that occur during a migration");
         LOG.info("");
         LOG.info("Flags");

File: flyway-core/src/main/java/org/flywaydb/core/internal/configuration/ConfigUtils.java
Patch:
@@ -57,6 +57,7 @@ public class ConfigUtils {
     public static final String CLEAN_DISABLED = "flyway.cleanDisabled";
     public static final String CLEAN_ON_VALIDATION_ERROR = "flyway.cleanOnValidationError";
     public static final String DRIVER = "flyway.driver";
+    public static final String DRYRUN_OUTPUT = "flyway.dryRunOutput";
     public static final String ENCODING = "flyway.encoding";
     public static final String ERROR_HANDLER = "flyway.errorHandler";
     public static final String GROUP = "flyway.group";

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/AbstractSqlStatement.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.dbsupport;
+package org.flywaydb.core.internal.database;
 
 /**
  * A sql statement from a script that can be executed at once against a database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/Delimiter.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.dbsupport;
+package org.flywaydb.core.internal.database;
 
 /**
  * Represents a sql statement delimiter.

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/FlywayDbUpgradeRequiredException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.dbsupport;
+package org.flywaydb.core.internal.database;
 
 import org.flywaydb.core.api.FlywayException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/FlywayEnterpriseUpgradeRequiredException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.dbsupport;
+package org.flywaydb.core.internal.database;
 
 import org.flywaydb.core.api.FlywayException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/FlywayProUpgradeRequiredException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.dbsupport;
+package org.flywaydb.core.internal.database;
 
 import org.flywaydb.core.api.FlywayException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/FlywaySqlException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.dbsupport;
+package org.flywaydb.core.internal.database;
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.util.StringUtils;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/FlywaySqlScriptException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.dbsupport;
+package org.flywaydb.core.internal.database;
 
 import org.flywaydb.core.internal.util.scanner.Resource;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/db2/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.dbsupport.h2;
\ No newline at end of file
+package org.flywaydb.core.internal.database.db2;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/h2/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.dbsupport.db2;
\ No newline at end of file
+package org.flywaydb.core.internal.database.h2;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/hsqldb/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.dbsupport.derby;
\ No newline at end of file
+package org.flywaydb.core.internal.database.hsqldb;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/mysql/MySQLNamedLockTemplate.java
Patch:
@@ -13,13 +13,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.dbsupport.mysql;
+package org.flywaydb.core.internal.database.mysql;
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.dbsupport.FlywaySqlException;
-import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
+import org.flywaydb.core.internal.database.FlywaySqlException;
+import org.flywaydb.core.internal.database.JdbcTemplate;
 
 import java.sql.SQLException;
 import java.util.concurrent.Callable;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/oracle/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.dbsupport.mysql;
\ No newline at end of file
+package org.flywaydb.core.internal.database.oracle;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.dbsupport;
\ No newline at end of file
+package org.flywaydb.core.internal.database;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/postgresql/PostgreSQLAdvisoryLockTemplate.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.dbsupport.postgresql;
+package org.flywaydb.core.internal.database.postgresql;
 
 import org.flywaydb.core.api.FlywayException;
-import org.flywaydb.core.internal.dbsupport.FlywaySqlException;
-import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
+import org.flywaydb.core.internal.database.FlywaySqlException;
+import org.flywaydb.core.internal.database.JdbcTemplate;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.jdbc.RowMapper;

File: flyway-core/src/main/java/org/flywaydb/core/internal/database/redshift/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.dbsupport.hsqldb;
\ No newline at end of file
+package org.flywaydb.core.internal.database.redshift;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -21,7 +21,7 @@
 import org.flywaydb.core.api.MigrationType;
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
-import org.flywaydb.core.internal.metadatatable.AppliedMigration;
+import org.flywaydb.core.internal.schemahistory.AppliedMigration;
 import org.flywaydb.core.internal.util.ObjectUtils;
 
 import java.util.Date;

File: flyway-core/src/main/java/org/flywaydb/core/internal/schemahistory/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.metadatatable;
\ No newline at end of file
+package org.flywaydb.core.internal.schemahistory;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/DriverDataSource.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.internal.dbsupport.FlywaySqlException;
+import org.flywaydb.core.internal.database.FlywaySqlException;
 import org.flywaydb.core.internal.util.ClassUtils;
 import org.flywaydb.core.internal.util.ExceptionUtils;
 import org.flywaydb.core.internal.util.FeatureDetector;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/TransactionTemplate.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.internal.util.jdbc;
 
 import org.flywaydb.core.api.FlywayException;
-import org.flywaydb.core.internal.dbsupport.FlywaySqlException;
+import org.flywaydb.core.internal.database.FlywaySqlException;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/redshift/RedshiftDbSupport.java
Patch:
@@ -76,7 +76,9 @@ public Schema getOriginalSchema() {
     }
 
     /* private -> testing */ String getFirstSchemaFromSearchPath(String searchPath) {
-        String result = searchPath.replace("$user", "").trim();
+        String result = searchPath
+                .replace("\"$user\"", "")
+                .replace("$user", "").trim();
         if (result.startsWith(",")) {
             result = result.substring(1);
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/mysql/MySQLDbSupport.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.flywaydb.core.internal.dbsupport.mysql;
 
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.dbsupport.DbSupport;
 import org.flywaydb.core.internal.dbsupport.FlywayDbUpgradeRequiredException;
 import org.flywaydb.core.internal.dbsupport.FlywaySqlException;
@@ -23,8 +25,6 @@
 import org.flywaydb.core.internal.dbsupport.SqlStatementBuilder;
 import org.flywaydb.core.internal.dbsupport.Table;
 import org.flywaydb.core.internal.util.StringUtils;
-import org.flywaydb.core.api.logging.Log;
-import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/mysql/MySQLTable.java
Patch:
@@ -34,7 +34,7 @@ public class MySQLTable extends Table {
      * @param schema       The schema this table lives in.
      * @param name         The name of the table.
      */
-    public MySQLTable(JdbcTemplate jdbcTemplate, DbSupport dbSupport, Schema schema, String name) {
+    MySQLTable(JdbcTemplate jdbcTemplate, DbSupport dbSupport, Schema schema, String name) {
         super(jdbcTemplate, dbSupport, schema, name);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/sqlserver/SQLServerSchema.java
Patch:
@@ -132,7 +132,7 @@ private class DBObject {
      * @param dbSupport    The database-specific support.
      * @param name         The name of the schema.
      */
-    public SQLServerSchema(JdbcTemplate jdbcTemplate, SQLServerDbSupport dbSupport, String name) {
+    SQLServerSchema(JdbcTemplate jdbcTemplate, SQLServerDbSupport dbSupport, String name) {
         super(jdbcTemplate, dbSupport, name);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/sqlserver/SQLServerTable.java
Patch:
@@ -34,7 +34,7 @@ public class SQLServerTable extends Table {
      * @param schema       The schema this table lives in.
      * @param name         The name of the table.
      */
-    public SQLServerTable(JdbcTemplate jdbcTemplate, DbSupport dbSupport, Schema schema, String name) {
+    SQLServerTable(JdbcTemplate jdbcTemplate, DbSupport dbSupport, Schema schema, String name) {
         super(jdbcTemplate, dbSupport, schema, name);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/sybasease/SybaseASESchema.java
Patch:
@@ -61,10 +61,10 @@ protected void doDrop() throws SQLException {
      */
     @Override
     protected void doClean() throws SQLException {
-        //Drop tables
-        dropObjects("U");
         //Drop view
         dropObjects("V");
+        //Drop tables
+        dropObjects("U");
         //Drop stored procs
         dropObjects("P");
         //Drop triggers

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/Location.java
Patch:
@@ -49,7 +49,8 @@ public final class Location implements Comparable<Location> {
      * @param descriptor The location descriptor.
      */
     public Location(String descriptor) {
-        String normalizedDescriptor = descriptor.trim().replace("\\", "/");
+        String normalizedDescriptor = descriptor.trim()
+                .replace("\\\\", "\\").replace("\\", "/");
 
         if (normalizedDescriptor.contains(":")) {
             prefix = normalizedDescriptor.substring(0, normalizedDescriptor.indexOf(":") + 1);
@@ -65,7 +66,7 @@ public Location(String descriptor) {
                 path = path.substring(1);
             }
         } else if (isFileSystem()) {
-            path = new File(path).getPath();
+            path = new File(path).getPath().replace("\\", "/");
         } else {
             throw new FlywayException("Unknown prefix for location (should be either filesystem: or classpath:): "
                     + normalizedDescriptor);

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/filesystem/FileSystemResource.java
Patch:
@@ -43,14 +43,14 @@ public class FileSystemResource implements LoadableResource, Comparable<FileSyst
      * @param location The location of the resource on the filesystem.
      */
     public FileSystemResource(String location) {
-        this.location = new File(location.trim().replace("\\", "/"));
+        this.location = new File(location.replace("\\", "/").replace("//", "/"));
     }
 
     /**
      * @return The location of the resource on the filesystem.
      */
     public String getLocation() {
-        return location.getPath();
+        return location.getPath().replace("\\", "/");
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/filesystem/FileSystemResource.java
Patch:
@@ -43,14 +43,14 @@ public class FileSystemResource implements LoadableResource, Comparable<FileSyst
      * @param location The location of the resource on the filesystem.
      */
     public FileSystemResource(String location) {
-        this.location = new File(location);
+        this.location = new File(location.trim().replace("\\", "/"));
     }
 
     /**
      * @return The location of the resource on the filesystem.
      */
     public String getLocation() {
-        return StringUtils.replaceAll(location.getPath(), "\\", "/");
+        return location.getPath();
     }
 
     /**

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -231,7 +231,7 @@ private static void printUsage() {
         LOG.info("");
         LOG.info("Options (Format: -key=value)");
         LOG.info("-------");
-        LOG.info("driver                       : Fully qualified classname of the jdbc driver");
+        LOG.info("driver                       : Fully qualified classname of the JDBC driver");
         LOG.info("url                          : Jdbc url to use to connect to the database");
         LOG.info("user                         : User to use to connect to the database");
         LOG.info("password                     : Password to use to connect to the database");

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -21,9 +21,9 @@
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.api.callback.FlywayCallback;
 import org.flywaydb.core.api.configuration.FlywayConfiguration;
+import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.api.logging.Log;
 import org.flywaydb.core.api.logging.LogFactory;
-import org.flywaydb.core.api.errorhandler.ErrorHandler;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.internal.callback.SqlScriptFlywayCallback;
 import org.flywaydb.core.internal.command.DbBaseline;
@@ -32,6 +32,7 @@
 import org.flywaydb.core.internal.command.DbRepair;
 import org.flywaydb.core.internal.command.DbSchemas;
 import org.flywaydb.core.internal.command.DbValidate;
+import org.flywaydb.core.internal.configuration.ConfigUtils;
 import org.flywaydb.core.internal.dbsupport.DbSupport;
 import org.flywaydb.core.internal.dbsupport.DbSupportFactory;
 import org.flywaydb.core.internal.dbsupport.Schema;
@@ -40,7 +41,6 @@
 import org.flywaydb.core.internal.metadatatable.MetaDataTableImpl;
 import org.flywaydb.core.internal.resolver.CompositeMigrationResolver;
 import org.flywaydb.core.internal.util.ClassUtils;
-import org.flywaydb.core.internal.configuration.ConfigUtils;
 import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.StringUtils;
@@ -1145,7 +1145,7 @@ public Void execute(Connection connectionMetaDataTable, MigrationResolver migrat
      * Repairs the Flyway metadata table. This will perform the following actions:
      * <ul>
      * <li>Remove any failed migrations on databases without DDL transactions (User objects left behind must still be cleaned up manually)</li>
-     * <li>Correct wrong checksums</li>
+     * <li>Realign the checksums, descriptions and types of the applied migrations with the ones of the available migrations</li>
      * </ul>
      * <img src="https://flywaydb.org/assets/balsamiq/command-repair.png" alt="repair">
      *

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/FlywayRepairTask.java
Patch:
@@ -20,8 +20,8 @@
 /**
  * Repairs the Flyway metadata table. This will perform the following actions:
  * <ul>
- *     <li>Remove any failed migrations on databases without DDL transactions (User objects left behind must still be cleaned up manually)</li>
- *     <li>Correct wrong checksums</li>
+ * <li>Remove any failed migrations on databases without DDL transactions (User objects left behind must still be cleaned up manually)</li>
+ * <li>Realign the checksums, descriptions and types of the applied migrations with the ones of the available migrations</li>
  * </ul>
  */
 public class FlywayRepairTask extends AbstractFlywayTask {

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/RepairMojo.java
Patch:
@@ -23,8 +23,8 @@
 /**
  * Repairs the Flyway metadata table. This will perform the following actions:
  * <ul>
- *     <li>Remove any failed migrations on databases without DDL transactions (User objects left behind must still be cleaned up manually)</li>
- *     <li>Correct wrong checksums</li>
+ * <li>Remove any failed migrations on databases without DDL transactions (User objects left behind must still be cleaned up manually)</li>
+ * <li>Realign the checksums, descriptions and types of the applied migrations with the ones of the available migrations</li>
  * </ul>
  */
 @SuppressWarnings({"UnusedDeclaration", "JavaDoc"})

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/JdbcTemplate.java
Patch:
@@ -336,7 +336,7 @@ private PreparedStatement prepareStatement(String sql, Object[] params) throws S
             } else if (params[i] instanceof Boolean) {
                 statement.setBoolean(i + 1, (Boolean) params[i]);
             } else {
-                statement.setString(i + 1, (String) params[i]);
+                statement.setString(i + 1, params[i].toString());
             }
         }
         return statement;

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -58,8 +58,8 @@ public class MigrationInfoImpl implements MigrationInfo {
      * @param context           The current context.
      * @param outOfOrder        Whether this migration was applied out of order.
      */
-    public MigrationInfoImpl(ResolvedMigration resolvedMigration, AppliedMigration appliedMigration,
-                             MigrationInfoContext context, boolean outOfOrder) {
+    MigrationInfoImpl(ResolvedMigration resolvedMigration, AppliedMigration appliedMigration,
+                      MigrationInfoContext context, boolean outOfOrder) {
         this.resolvedMigration = resolvedMigration;
         this.appliedMigration = appliedMigration;
         this.context = context;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/db2/DB2DbSupport.java
Patch:
@@ -132,6 +132,6 @@ public boolean catalogIsSchema() {
 
     @Override
     public boolean useSingleConnection() {
-        return true;
+        return false;
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolverSmallTest.java
Patch:
@@ -35,7 +35,6 @@
  * Testcase for SqlMigration.
  */
 public class SqlMigrationResolverSmallTest {
-
     private final Scanner scanner = new Scanner(Thread.currentThread().getContextClassLoader());
 
     @Test
@@ -65,8 +64,7 @@ public void resolveMigrationsRoot() {
         SqlMigrationResolver sqlMigrationResolver =
                 new SqlMigrationResolver(null, scanner, new Locations(""), PlaceholderReplacer.NO_PLACEHOLDERS, configuration);
 
-        // changed to 3 as new test cases are added for SybaseASE and DB2
-        assertEquals(3, sqlMigrationResolver.resolveMigrations().size());
+        assertEquals(2, sqlMigrationResolver.resolveMigrations().size());
     }
 
     @Test

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/FlywayRepairTask.java
Patch:
@@ -16,7 +16,6 @@
 package org.flywaydb.gradle.task;
 
 import org.flywaydb.core.Flyway;
-import org.omg.CORBA.Object;
 
 /**
  * Repairs the Flyway metadata table. This will perform the following actions:

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/FlywayValidateTask.java
Patch:
@@ -16,7 +16,6 @@
 package org.flywaydb.gradle.task;
 
 import org.flywaydb.core.Flyway;
-import org.omg.CORBA.Object;
 
 /**
  * <p>Validate applied migrations against resolved ones (on the filesystem or classpath)

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/MavenLog.java
Patch:
@@ -31,7 +31,7 @@ public class MavenLog implements Log {
      *
      * @param logger The original Maven Logger.
      */
-    public MavenLog(org.apache.maven.plugin.logging.Log logger) {
+    MavenLog(org.apache.maven.plugin.logging.Log logger) {
         this.logger = logger;
     }
 

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/MavenLogCreator.java
Patch:
@@ -33,7 +33,7 @@ public class MavenLogCreator implements LogCreator {
      *
      * @param mojo The Maven Mojo to log for.
      */
-    public MavenLogCreator(AbstractMojo mojo) {
+    MavenLogCreator(AbstractMojo mojo) {
         this.mojo = mojo;
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/DbSupport.java
Patch:
@@ -67,7 +67,7 @@ public JdbcTemplate getJdbcTemplate() {
     public abstract SqlStatementBuilder createSqlStatementBuilder();
 
     /**
-     * @return The name of the db.
+     * @return The name of the db. Used for loading db-specific scripts such as <code>createMetaDataTable.sql</code>.
      */
     public abstract String getDbName();
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/hsql/HsqlTable.java
Patch:
@@ -15,21 +15,21 @@
  */
 package org.flywaydb.core.internal.dbsupport.hsql;
 
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.dbsupport.DbSupport;
 import org.flywaydb.core.internal.dbsupport.FlywaySqlException;
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.Table;
-import org.flywaydb.core.api.logging.Log;
-import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.SQLException;
 
 /**
  * Hsql-specific table.
  */
 public class HsqlTable extends Table {
-    private static final Log LOG = LogFactory.getLog(HsqlDbSupport.class);
+    private static final Log LOG = LogFactory.getLog(HsqlTable.class);
 
     /**
      * Flag indicating whether we are running against the old Hsql 1.8 instead of the newer 2.x.

File: flyway-core/src/test/java/org/flywaydb/core/DbCategory.java
Patch:
@@ -37,6 +37,7 @@ public interface SQLite extends EmbeddedDB {}
     public interface MySQL extends OpenSourceDB {}
     public interface MariaDB extends OpenSourceDB {}
     public interface PostgreSQL extends OpenSourceDB {}
+    public interface CockroachDB extends OpenSourceDB {}
 
     // Commercial databases support maintained by the core Flyway team
     public interface DB2 extends CommercialDB {}

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -170,7 +170,7 @@ public void autoCommitTrue() {
     private void testAutoCommit(boolean autoCommit) {
         DriverDataSource dataSource = (DriverDataSource) flyway.getDataSource();
         dataSource.setAutoCommit(autoCommit);
-        flyway.setLocations(BASEDIR);
+        flyway.setLocations(getBasedir());
         flyway.migrate();
         assertEquals("2.0", flyway.info().current().getVersion().getVersion());
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/SqlStatementBuilder.java
Patch:
@@ -180,7 +180,7 @@ public void addLine(String line) {
         String lineSimplified = simplifyLine(line);
 
         applyStateChanges(lineSimplified);
-        if (endWithOpenMultilineStringLiteral() || insideMultiLineComment) {
+        if (endWithOpenMultilineStringLiteral() || insideMultiLineComment || isSingleLineComment(lineSimplified)) {
             statement.append(line);
             return;
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/db2/DB2SqlStatementBuilder.java
Patch:
@@ -36,7 +36,7 @@ public class DB2SqlStatementBuilder extends SqlStatementBuilder {
     /**
      * Regex to check for a BEGIN statement of a SQL PL block (Optional label followed by BEGIN).
      */
-    private static final Pattern BEGIN_REGEX = Pattern.compile("^(([A-Z]+[A-Z0-9]*)\\s?:\\s?)?BEGIN(\\sATOMIC)?(\\s.*)?");
+    private static final Pattern BEGIN_REGEX = Pattern.compile("((([A-Z]+[A-Z0-9]*)\\s?:\\s?)|(.*\\s))?BEGIN(\\sATOMIC)?(\\s.*)?");
 
     /**
      * Regex for keywords that can appear after a string literal without being separated by a space.
@@ -122,7 +122,7 @@ static boolean isBegin(String line) {
 
     static String extractLabel(String line) {
         Matcher matcher = BEGIN_REGEX.matcher(line);
-        return line.contains(":") && matcher.matches() ? matcher.group(2) : null;
+        return line.contains(":") && matcher.matches() ? matcher.group(3) : null;
     }
 
     static boolean isEnd(String line, String label, Delimiter currentDelimiter, int beginEndDepth) {

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/db2/DB2SqlStatementBuilderSmallTest.java
Patch:
@@ -43,6 +43,7 @@ public void isEnd() throws Exception {
         assertFalse(DB2SqlStatementBuilder.isEnd("END FOR", "LABEL", new Delimiter(";", false), 1));
         assertFalse(DB2SqlStatementBuilder.isEnd("END IF", null, new Delimiter(";", false), 1));
         assertFalse(DB2SqlStatementBuilder.isEnd("END IF", "LABEL", new Delimiter(";", false), 1));
+        assertFalse(DB2SqlStatementBuilder.isEnd("SELECT XXX INTO YYY_END", "LABEL", new Delimiter(";", false), 1));
     }
 
     @Test

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -121,8 +121,8 @@ public static void main(String[] args) {
 
     /* private -> testing */  static void initSystemPropertiesFromConfig(Properties properties) {
         for (String name : properties.stringPropertyNames()) {
-            if (name.startsWith("sysprop.")) {
-                defineSystemProperty(name.substring("sysprop.".length()), properties.getProperty(name));
+            if (name.startsWith("sysprops.")) {
+                defineSystemProperty(name.substring("sysprops.".length()), properties.getProperty(name));
             }
         }
     }

File: flyway-commandline/src/test/java/org/flywaydb/commandline/MainSmallTest.java
Patch:
@@ -83,7 +83,7 @@ public void initSystemProperties() {
     @Test
     public void initSystemPropertiesFromConfig() {
         Properties properties = new Properties();
-        properties.put("sysprop.flywayPropertyTestConfig123", "success");
+        properties.put("sysprops.flywayPropertyTestConfig123", "success");
         Main.initSystemPropertiesFromConfig(properties);
         assertEquals("success", System.getProperty("flywayPropertyTestConfig123"));
     }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -119,7 +119,7 @@ public static void main(String[] args) {
         }
     }
 
-    private static void initSystemPropertiesFromConfig(Properties properties) {
+    /* private -> testing */  static void initSystemPropertiesFromConfig(Properties properties) {
         for (String name : properties.stringPropertyNames()) {
             if (name.startsWith("sysprop.")) {
                 defineSystemProperty(name.substring("sysprop.".length()), properties.getProperty(name));

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/VersionPrinter.java
Patch:
@@ -42,6 +42,8 @@ public static void printVersion() {
         }
         printed = true;
         String version = new ClassPathResource("org/flywaydb/core/internal/version.txt", VersionPrinter.class.getClassLoader()).loadAsString("UTF-8");
-        LOG.info("Flyway " + version + " by Boxfuse");
+        LOG.info("Flyway "
+
+                + version + " by Boxfuse");
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/DriverDataSource.java
Patch:
@@ -125,13 +125,13 @@ public DriverDataSource(ClassLoader classLoader, String driverClass, String url,
         } catch (FlywayException e) {
             String backupDriverClass = detectBackupDriverForUrl(url);
             if (backupDriverClass == null) {
-                throw new FlywayException("Unable to instantiate JDBC driver " + driverClass + " : " + ExceptionUtils.getRootCause(e).getMessage(), e);
+                throw new FlywayException("Unable to instantiate JDBC driver: " + driverClass + " => Check whether the jar file is present", e);
             }
             try {
                 this.driver = ClassUtils.instantiate(backupDriverClass, classLoader);
             } catch (Exception e1) {
                 // Only report original exception about primary driver
-                throw new FlywayException("Unable to instantiate JDBC driver " + driverClass + " : " + ExceptionUtils.getRootCause(e).getMessage(), e);
+                throw new FlywayException("Unable to instantiate JDBC driver: " + driverClass + " => Check whether the jar file is present", e);
             }
         }
 

File: flyway-ant/src/main/java/org/flywaydb/ant/AbstractFlywayTask.java
Patch:
@@ -25,8 +25,8 @@
 import org.flywaydb.core.internal.util.Location;
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.jdbc.DriverDataSource;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import javax.sql.DataSource;
 import java.io.File;

File: flyway-ant/src/main/java/org/flywaydb/ant/AntLog.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.ant;
 
-import org.flywaydb.core.internal.util.logging.Log;
+import org.flywaydb.core.api.logging.Log;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.Task;
 

File: flyway-ant/src/main/java/org/flywaydb/ant/AntLogCreator.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.ant;
 
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogCreator;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogCreator;
 import org.apache.tools.ant.Project;
 
 /**

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -22,8 +22,8 @@
 import org.flywaydb.core.internal.util.FileCopyUtils;
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.VersionPrinter;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.logging.console.ConsoleLog.Level;
 import org.flywaydb.core.internal.util.logging.console.ConsoleLogCreator;
 

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -46,8 +46,8 @@
 import org.flywaydb.core.internal.util.jdbc.DriverDataSource;
 import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
 import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.scanner.Scanner;
 
 import javax.sql.DataSource;

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptFlywayCallback.java
Patch:
@@ -25,8 +25,8 @@
 import org.flywaydb.core.internal.util.Location;
 import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.scanner.Resource;
 import org.flywaydb.core.internal.util.scanner.Scanner;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbBaseline.java
Patch:
@@ -23,8 +23,8 @@
 import org.flywaydb.core.internal.metadatatable.AppliedMigration;
 import org.flywaydb.core.internal.metadatatable.MetaDataTable;
 import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbClean.java
Patch:
@@ -23,8 +23,8 @@
 import org.flywaydb.core.internal.util.StopWatch;
 import org.flywaydb.core.internal.util.TimeFormat;
 import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -36,8 +36,8 @@
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.TimeFormat;
 import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -30,8 +30,8 @@
 import org.flywaydb.core.internal.util.StopWatch;
 import org.flywaydb.core.internal.util.TimeFormat;
 import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbSchemas.java
Patch:
@@ -18,8 +18,8 @@
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.metadatatable.MetaDataTable;
 import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.Connection;
 import java.util.concurrent.Callable;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbValidate.java
Patch:
@@ -26,8 +26,8 @@
 import org.flywaydb.core.internal.util.StopWatch;
 import org.flywaydb.core.internal.util.TimeFormat;
 import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/DbSupportFactory.java
Patch:
@@ -36,8 +36,8 @@
 import org.flywaydb.core.internal.dbsupport.sqlserver.SQLServerDbSupport;
 import org.flywaydb.core.internal.dbsupport.sybase.ase.SybaseASEDbSupport;
 import org.flywaydb.core.internal.dbsupport.vertica.VerticaDbSupport;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.DatabaseMetaData;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/JdbcTemplate.java
Patch:
@@ -17,8 +17,8 @@
 
 import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
 import org.flywaydb.core.internal.util.jdbc.RowMapper;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.DatabaseMetaData;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/SqlScript.java
Patch:
@@ -20,8 +20,8 @@
 
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.StringUtils;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.scanner.Resource;
 
 import java.io.BufferedReader;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/Table.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.dbsupport;
 
 import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/h2/H2Schema.java
Patch:
@@ -19,8 +19,8 @@
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.Table;
 import org.flywaydb.core.internal.util.StringUtils;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.SQLException;
 import java.util.ArrayList;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/hsql/HsqlTable.java
Patch:
@@ -20,8 +20,8 @@
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.Table;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/mysql/MySQLDbSupport.java
Patch:
@@ -22,8 +22,8 @@
 import org.flywaydb.core.internal.dbsupport.SqlStatementBuilder;
 import org.flywaydb.core.internal.dbsupport.Table;
 import org.flywaydb.core.internal.util.StringUtils;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/mysql/MySQLNamedLockTemplate.java
Patch:
@@ -18,8 +18,8 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.dbsupport.FlywaySqlException;
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.SQLException;
 import java.util.concurrent.Callable;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSchema.java
Patch:
@@ -20,8 +20,8 @@
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.Table;
 import org.flywaydb.core.internal.util.StringUtils;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.SQLException;
 import java.util.ArrayList;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/phoenix/PhoenixSchema.java
Patch:
@@ -19,10 +19,9 @@
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.Table;
 import org.flywaydb.core.internal.util.jdbc.RowMapper;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
-import java.sql.DatabaseMetaData;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.ArrayList;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/phoenix/PhoenixTable.java
Patch:
@@ -19,8 +19,8 @@
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.Table;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLAdvisoryLockTemplate.java
Patch:
@@ -18,8 +18,8 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.dbsupport.FlywaySqlException;
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.SQLException;
 import java.util.concurrent.Callable;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/redshift/RedshiftDbSupport.java
Patch:
@@ -22,8 +22,8 @@
 import org.flywaydb.core.internal.dbsupport.SqlStatementBuilder;
 import org.flywaydb.core.internal.dbsupport.postgresql.PostgreSQLSqlStatementBuilder;
 import org.flywaydb.core.internal.util.StringUtils;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/saphana/SapHanaSqlStatementBuilder.java
Patch:
@@ -18,8 +18,8 @@
 import org.flywaydb.core.internal.dbsupport.Delimiter;
 import org.flywaydb.core.internal.dbsupport.SqlStatementBuilder;
 import org.flywaydb.core.internal.util.StringUtils;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 /**
  * SqlStatementBuilder supporting SAP HANA-specific delimiter changes.

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/sqlite/SQLiteDbSupport.java
Patch:
@@ -19,8 +19,8 @@
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.SqlStatementBuilder;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/sqlite/SQLiteSchema.java
Patch:
@@ -18,8 +18,8 @@
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.Table;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.SQLException;
 import java.util.ArrayList;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/sqlserver/SQLServerDbSupport.java
Patch:
@@ -20,8 +20,8 @@
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.SqlStatementBuilder;
 import org.flywaydb.core.internal.util.StringUtils;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/sybase/ase/SybaseASEDbSupport.java
Patch:
@@ -23,8 +23,8 @@
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.SqlStatementBuilder;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 /**
  * Sybase specific support

File: flyway-core/src/main/java/org/flywaydb/core/internal/metadatatable/MetaDataTableImpl.java
Patch:
@@ -28,8 +28,8 @@
 import org.flywaydb.core.internal.util.StringUtils;
 import org.flywaydb.core.internal.util.jdbc.RowMapper;
 import org.flywaydb.core.internal.util.jdbc.TransactionTemplate;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;
 
 import java.sql.ResultSet;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/ClassUtils.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.util;
 
 import org.flywaydb.core.api.FlywayException;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.io.File;
 import java.io.IOException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/FeatureDetector.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.util;
 
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 /**
  * Detects whether certain features are available or not.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/Locations.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.util;
 
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/VersionPrinter.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.util;
 
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;
 
 /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/JdbcUtils.java
Patch:
@@ -17,8 +17,8 @@
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.dbsupport.FlywaySqlException;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import javax.sql.DataSource;
 import java.sql.Connection;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/TransactionTemplate.java
Patch:
@@ -17,8 +17,8 @@
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.dbsupport.FlywaySqlException;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/android/AndroidLog.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.util.logging.android;
 
-import org.flywaydb.core.internal.util.logging.Log;
+import org.flywaydb.core.api.logging.Log;
 
 /**
  * Wrapper for an Android logger.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/android/AndroidLogCreator.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.util.logging.android;
 
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogCreator;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogCreator;
 
 /**
  * Log Creator for Android.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/apachecommons/ApacheCommonsLog.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.util.logging.apachecommons;
 
-import org.flywaydb.core.internal.util.logging.Log;
+import org.flywaydb.core.api.logging.Log;
 
 /**
  * Wrapper for an Apache Commons Logging logger.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/apachecommons/ApacheCommonsLogCreator.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.util.logging.apachecommons;
 
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogCreator;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogCreator;
 import org.apache.commons.logging.LogFactory;
 
 /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/console/ConsoleLog.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.util.logging.console;
 
-import org.flywaydb.core.internal.util.logging.Log;
+import org.flywaydb.core.api.logging.Log;
 
 /**
  * Wrapper around a simple Console output.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/console/ConsoleLogCreator.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.util.logging.console;
 
 import org.flywaydb.core.internal.util.logging.console.ConsoleLog.Level;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogCreator;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogCreator;
 
 /**
  * Log Creator for the Command-Line console.

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/javautil/JavaUtilLog.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.util.logging.javautil;
 
-import org.flywaydb.core.internal.util.logging.Log;
+import org.flywaydb.core.api.logging.Log;
 
 import java.util.logging.Level;
 import java.util.logging.LogRecord;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/javautil/JavaUtilLogCreator.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.util.logging.javautil;
 
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogCreator;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogCreator;
 
 import java.util.logging.Logger;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/slf4j/Slf4jLog.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.util.logging.slf4j;
 
-import org.flywaydb.core.internal.util.logging.Log;
+import org.flywaydb.core.api.logging.Log;
 import org.slf4j.Logger;
 
 /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/slf4j/Slf4jLogCreator.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.util.logging.slf4j;
 
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogCreator;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogCreator;
 import org.slf4j.LoggerFactory;
 
 /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathScanner.java
Patch:
@@ -15,13 +15,12 @@
  */
 package org.flywaydb.core.internal.util.scanner.classpath;
 
-import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.util.ClassUtils;
 import org.flywaydb.core.internal.util.FeatureDetector;
 import org.flywaydb.core.internal.util.Location;
 import org.flywaydb.core.internal.util.UrlUtils;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.scanner.Resource;
 import org.flywaydb.core.internal.util.scanner.classpath.jboss.JBossVFSv2UrlResolver;
 import org.flywaydb.core.internal.util.scanner.classpath.jboss.JBossVFSv3ClassPathLocationScanner;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/FileSystemClassPathLocationScanner.java
Patch:
@@ -16,13 +16,12 @@
 package org.flywaydb.core.internal.util.scanner.classpath;
 
 import org.flywaydb.core.internal.util.UrlUtils;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 import java.io.File;
 import java.io.IOException;
 import java.net.URL;
-import java.net.URLDecoder;
 import java.util.Set;
 import java.util.TreeSet;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/android/AndroidScanner.java
Patch:
@@ -21,8 +21,8 @@
 import org.flywaydb.core.api.android.ContextHolder;
 import org.flywaydb.core.internal.util.ClassUtils;
 import org.flywaydb.core.internal.util.Location;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.scanner.Resource;
 import org.flywaydb.core.internal.util.scanner.classpath.ResourceAndClassScanner;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/jboss/JBossVFSv3ClassPathLocationScanner.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.util.scanner.classpath.jboss;
 
 import org.flywaydb.core.internal.util.UrlUtils;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.scanner.classpath.ClassPathLocationScanner;
 import org.jboss.vfs.VFS;
 import org.jboss.vfs.VirtualFile;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/filesystem/FileSystemScanner.java
Patch:
@@ -16,8 +16,8 @@
 package org.flywaydb.core.internal.util.scanner.filesystem;
 
 import org.flywaydb.core.internal.util.Location;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.scanner.Resource;
 
 import java.io.File;

File: flyway-core/src/test/java/org/flywaydb/core/FlywayMediumTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.flywaydb.core.internal.dbsupport.h2.H2DbSupport;
 import org.flywaydb.core.internal.util.ClassUtils;
 import org.flywaydb.core.internal.util.jdbc.DriverDataSource;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.internal.util.logging.StringLogCreator;
 import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;
 import org.junit.AfterClass;

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/phoenix/PhoenixMigrationMediumTest.java
Patch:
@@ -18,8 +18,8 @@
 import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.flywaydb.core.DbCategory;
 import org.flywaydb.core.internal.util.jdbc.DriverDataSource;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.flywaydb.core.migration.MigrationTestCase;
 import org.junit.After;
 import org.junit.AfterClass;

File: flyway-core/src/test/java/org/flywaydb/core/internal/util/logging/StringLog.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.flywaydb.core.internal.util.logging;
 
+import org.flywaydb.core.api.logging.Log;
+
 /**
  * Logger that captures output as a string.
  */

File: flyway-core/src/test/java/org/flywaydb/core/internal/util/logging/StringLogCreator.java
Patch:
@@ -15,6 +15,9 @@
  */
 package org.flywaydb.core.internal.util.logging;
 
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogCreator;
+
 /**
  * Log creator for capturing the output as a string.
  */

File: flyway-core/src/test/java/org/flywaydb/core/migration/ConcurrentMigrationTestCase.java
Patch:
@@ -22,8 +22,8 @@
 import org.flywaydb.core.internal.dbsupport.DbSupportFactory;
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.util.jdbc.JdbcUtils;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.junit.Before;
 import org.junit.Test;
 

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -25,8 +25,8 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.util.ExceptionUtils;
 import org.flywaydb.core.internal.util.Location;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 import org.sonatype.plexus.components.cipher.DefaultPlexusCipher;
 import org.sonatype.plexus.components.cipher.PlexusCipherException;
 import org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher;

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/MavenLog.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.maven;
 
-import org.flywaydb.core.internal.util.logging.Log;
+import org.flywaydb.core.api.logging.Log;
 
 /**
  * Wrapper around a Maven Logger.

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/MavenLogCreator.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.maven;
 
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogCreator;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogCreator;
 import org.apache.maven.plugin.AbstractMojo;
 
 /**

File: flyway-sample/src/main/java/org/flywaydb/sample/callback/DefaultFlywayCallback.java
Patch:
@@ -19,8 +19,8 @@
 import org.flywaydb.core.api.MigrationInfo;
 
 import java.sql.Connection;
-import org.flywaydb.core.internal.util.logging.Log;
-import org.flywaydb.core.internal.util.logging.LogFactory;
+import org.flywaydb.core.api.logging.Log;
+import org.flywaydb.core.api.logging.LogFactory;
 
 /**
  * Default FlywayCallback implementation.  If you don't want to have to 

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -269,6 +269,9 @@ private static void printUsage() {
         LOG.info("configFile                   : Config file to use (default: <install-dir>/conf/flyway.conf)");
         LOG.info("configFileEncoding           : Encoding of the config file (default: UTF-8)");
         LOG.info("jarDirs                      : Dirs for Jdbc drivers & Java migrations (default: jars)");
+
+
+
         LOG.info("");
         LOG.info("Add -X to print debug output");
         LOG.info("Add -q to suppress all output, except for errors and warnings");

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/FlywaySqlScriptException.java
Patch:
@@ -23,7 +23,6 @@
  * This specific exception thrown when Flyway encounters a problem in SQL script
  */
 public class FlywaySqlScriptException extends FlywaySqlException {
-
     private final Resource resource;
     private final SqlStatement statement;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationResolver.java
Patch:
@@ -97,7 +97,7 @@ protected void resolveMigrationsForSingleLocation(Location location, List<Resolv
                 migrations.add(migrationInfo);
             }
         } catch (Exception e) {
-            throw new FlywayException("Unable to resolve Jdbc Java migrations in location: " + location + " (" + e.getMessage() + ")", e);
+            throw new FlywayException("Unable to resolve Jdbc Java migrations in location " + location + " : " + e.getMessage(), e);
         }
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/spring/SpringJdbcMigrationResolver.java
Patch:
@@ -96,7 +96,7 @@ protected void resolveMigrationsForSingleLocation(Location location, List<Resolv
                 migrations.add(migrationInfo);
             }
         } catch (Exception e) {
-            throw new FlywayException("Unable to resolve Spring Jdbc Java migrations in location: " + location, e);
+            throw new FlywayException("Unable to resolve Spring Jdbc Java migrations in location " + location + " : " + e.getMessage(), e);
         }
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationExecutor.java
Patch:
@@ -78,7 +78,9 @@ public void execute(Connection connection) {
 
     private synchronized SqlScript getSqlScript() {
         if (sqlScript == null) {
-            sqlScript = new SqlScript(dbSupport, sqlScriptResource, placeholderReplacer, configuration.getEncoding(), configuration.isMixed());
+            sqlScript = new SqlScript(dbSupport, sqlScriptResource, placeholderReplacer, configuration.getEncoding(), configuration.isMixed()
+
+            );
         }
         return sqlScript;
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathScanner.java
Patch:
@@ -126,8 +126,6 @@ public Class<?>[] scanForClasses(Location location, Class<?> implementedInterfac
             } catch (NoClassDefFoundError e) {
                 LOG.debug("Skipping non-loadable class: " + className);
                 continue;
-            } catch (Exception e) {
-                throw new FlywayException("Unable to instantiate class: " + className, e);
             }
 
             classes.add(clazz);

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -179,7 +179,7 @@ public boolean isDataDictViewAccessible(String name) throws SQLException {
     }
 
     /**
-     * Returns the specified data dictionary name prefixed with DBA_ or ALL_ depending on its accessibility.
+     * Returns the specified data dictionary view name prefixed with DBA_ or ALL_ depending on its accessibility.
      *
      * @param baseName the data dictionary view base name, unquoted case-sensitive, e.g. OBJECTS, TABLES.
      * @return the full name of the view with the proper prefix.

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationResolver.java
Patch:
@@ -126,14 +126,15 @@ protected void resolveMigrationsForSingleLocation(Location location, List<Resolv
         } else {
             String shortName = ClassUtils.getShortName(jdbcMigration.getClass());
             String prefix;
-            if (shortName.startsWith("V") || shortName.startsWith("R")) {
+            boolean repeatable = shortName.startsWith("R");
+            if (shortName.startsWith("V") || repeatable) {
                 prefix = shortName.substring(0, 1);
             } else {
                 throw new FlywayException("Invalid Jdbc migration class name: " + jdbcMigration.getClass().getName()
                         + " => ensure it starts with V or R," +
                         " or implement org.flywaydb.core.api.migration.MigrationInfoProvider for non-default naming");
             }
-            Pair<MigrationVersion, String> info = MigrationInfoHelper.extractVersionAndDescription(shortName, prefix, "__", "");
+            Pair<MigrationVersion, String> info = MigrationInfoHelper.extractVersionAndDescription(shortName, prefix, "__", "", repeatable);
             version = info.getLeft();
             description = info.getRight();
         }

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -40,7 +40,7 @@
 /**
  * A base class for all flyway tasks.
  */
-abstract class AbstractFlywayTask extends DefaultTask {
+public abstract class AbstractFlywayTask extends DefaultTask {
     /**
      * Property name prefix for placeholders that are configured through System properties.
      */

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -213,9 +213,9 @@ public String validate() {
         if (getState().isFailed()
                 && (!context.future || MigrationState.FUTURE_FAILED != getState())) {
             if (getVersion() == null) {
-                throw new FlywayException("Detected failed repeatable migration: " + getDescription());
+                return "Detected failed repeatable migration: " + getDescription();
             }
-            throw new FlywayException("Detected failed migration to version " + getVersion() + " (" + getDescription() + ")");
+            return "Detected failed migration to version " + getVersion() + " (" + getDescription() + ")";
         }
 
         if ((resolvedMigration == null)

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/FlywayCallback.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * This is the main callback interface that should be implemented to get access to flyway lifecycle notifications.
- * Simply add code to the callback method you are interested in having. A convenience implementation will all methods
+ * Simply add code to the callback method you are interested in having. A convenience implementation with all methods
  * doing nothing is provided with {@link BaseFlywayCallback}. To ensure backward compatibility, you are encouraged
  * to subclass that class instead of implementing this interface directly.
  *

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/FlywayCallback.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * This is the main callback interface that should be implemented to get access to flyway lifecycle notifications.
- * Simply add code to the callback method you are interested in having. A convenience implementation will all methods
+ * Simply add code to the callback method you are interested in having. A convenience implementation with all methods
  * doing nothing is provided with {@link BaseFlywayCallback}. To ensure backward compatibility, you are encouraged
  * to subclass that class instead of implementing this interface directly.
  *

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/SqlScript.java
Patch:
@@ -226,7 +226,7 @@ private void addStatement(List<SqlStatement> statements, SqlStatementBuilder sql
         if (!mixed && transactionalStatementFound && nonTransactionalStatementFound) {
             throw new FlywayException(
                     "Detected both transactional and non-transactional statements within the same migration"
-                            + " (even though allowMixedMigrations is false). Offending statement found at line "
+                            + " (even though mixed is false). Offending statement found at line "
                             + sqlStatement.getLineNumber() + ": " + sqlStatement.getSql()
                             + (sqlStatementBuilder.executeInTransaction() ? "" : " [non-transactional]"));
         }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/oracle/OracleMigrationMediumTest.java
Patch:
@@ -231,10 +231,10 @@ public void schedulerObjects() throws Exception {
     }
 
     /**
-     * Tests cleaning up with Scheduler 11g enhancements.
+     * Tests cleaning up with Scheduler 11.2 enhancements.
      */
     @Test
-    public void scheduler11gEnhancement() throws Exception {
+    public void scheduler112Enhancement() throws Exception {
         assumeOracleVersionNotLessThan(11, 2);
         flyway.setSchemas("FLYWAY_AUX");
         flyway.clean();
@@ -582,7 +582,7 @@ public void streamsAndRules() throws FlywayException {
     }
 
     /**
-     * Tests support for cleaning together with RULE, RULE SET, EVALUATION CONTEXT, FILE GROUP types.
+     * Tests support for cleaning together with SQL TRANSLATION PROFILE type.
      */
     @Test
     public void sqlTranslator() throws FlywayException {

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptFlywayCallback.java
Patch:
@@ -100,7 +100,7 @@ public SqlScriptFlywayCallback(DbSupport dbSupport, Scanner scanner, Locations l
                                 "-> " + existing.getResource().getLocationOnDisk() + "\n" +
                                 "-> " + resource.getLocationOnDisk());
                     }
-                    scripts.put(key, new SqlScript(dbSupport, resource, placeholderReplacer, configuration.getEncoding(), configuration.isAllowMixedMigrations()));
+                    scripts.put(key, new SqlScript(dbSupport, resource, placeholderReplacer, configuration.getEncoding(), configuration.isMixed()));
                 }
             }
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationExecutor.java
Patch:
@@ -78,7 +78,7 @@ public void execute(Connection connection) {
 
     private synchronized SqlScript getSqlScript() {
         if (sqlScript == null) {
-            sqlScript = new SqlScript(dbSupport, sqlScriptResource, placeholderReplacer, configuration.getEncoding(), configuration.isAllowMixedMigrations());
+            sqlScript = new SqlScript(dbSupport, sqlScriptResource, placeholderReplacer, configuration.getEncoding(), configuration.isMixed());
         }
         return sqlScript;
     }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -247,7 +247,7 @@ private static void printUsage() {
         LOG.info("repeatableSqlMigrationPrefix : File name prefix for repeatable sql migrations");
         LOG.info("sqlMigrationSeparator        : File name separator for sql migrations");
         LOG.info("sqlMigrationSuffix           : File name suffix for sql migrations");
-        LOG.info("allowMixedMigrations         : Allow mixing transactional and non-transactional statements");
+        LOG.info("mixed                        : Allow mixing transactional and non-transactional statements");
         LOG.info("encoding                     : Encoding of sql migrations");
         LOG.info("placeholderReplacement       : Whether placeholders should be replaced");
         LOG.info("placeholders                 : Placeholders to replace in sql migrations");

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -34,7 +34,7 @@ public class OracleSqlStatementBuilder extends SqlStatementBuilder {
     /**
      * Regex for keywords that can appear after a string literal without being separated by a space.
      */
-    private static final Pattern KEYWORDS_AFTER_STRING_LITERAL_REGEX = Pattern.compile("(.*')(USING|THEN|FROM|AND|OR)(?!.)");
+    private static final Pattern KEYWORDS_AFTER_STRING_LITERAL_REGEX = Pattern.compile("(.*')(USING|THEN|FROM|AND|OR|AS)(?!.)");
 
     /**
      * Delimiter of PL/SQL blocks and statements.

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/db2zos/DB2zOSMigrationMediumTest.java
Patch:
@@ -43,6 +43,7 @@
 import org.flywaydb.core.internal.resolver.FlywayConfigurationForTests;
 import org.flywaydb.core.internal.resolver.sql.SqlMigrationResolver;
 import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.jdbc.DriverDataSource;
 import org.flywaydb.core.internal.util.scanner.Scanner;
@@ -74,7 +75,7 @@ protected void configureFlyway() {
     protected void assertChecksum(MigrationInfo migrationInfo) {
         SqlMigrationResolver sqlMigrationResolver = new SqlMigrationResolver(
                 dbSupport, new Scanner(Thread.currentThread().getContextClassLoader()),
-                new Location(getBasedir() + "/default"),
+                new Locations(getBasedir() + "/default"),
                 PlaceholderReplacer.NO_PLACEHOLDERS,
                 FlywayConfigurationForTests.create());
         List<ResolvedMigration> migrations = sqlMigrationResolver.resolveMigrations();

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationResolverSmallTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.flywaydb.core.internal.resolver.jdbc.dummy.V2__InterfaceBasedMigration;
 import org.flywaydb.core.internal.resolver.jdbc.dummy.Version3dot5;
 import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.scanner.Scanner;
 import org.junit.Test;
 
@@ -42,13 +43,13 @@ public class JdbcMigrationResolverSmallTest {
 
     @Test(expected = FlywayException.class)
     public void broken() {
-        new JdbcMigrationResolver(scanner, new Location("org/flywaydb/core/internal/resolver/jdbc/error"), config).resolveMigrations();
+        new JdbcMigrationResolver(scanner, new Locations("org/flywaydb/core/internal/resolver/jdbc/error"), config).resolveMigrations();
     }
 
     @Test
     public void resolveMigrations() throws SQLException {
         JdbcMigrationResolver jdbcMigrationResolver =
-                new JdbcMigrationResolver(scanner, new Location("org/flywaydb/core/internal/resolver/jdbc/dummy"), config);
+                new JdbcMigrationResolver(scanner, new Locations("org/flywaydb/core/internal/resolver/jdbc/dummy"), config);
         Collection<ResolvedMigration> migrations = jdbcMigrationResolver.resolveMigrations();
 
         assertEquals(3, migrations.size());

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/spring/SpringJdbcMigrationResolverSmallTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.flywaydb.core.internal.resolver.spring.dummy.V2__InterfaceBasedMigration;
 import org.flywaydb.core.internal.resolver.spring.dummy.Version3dot5;
 import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.scanner.Scanner;
 import org.junit.Test;
 
@@ -41,7 +42,7 @@ public class SpringJdbcMigrationResolverSmallTest {
     @Test
     public void resolveMigrations() {
         SpringJdbcMigrationResolver springJdbcMigrationResolver =
-                new SpringJdbcMigrationResolver(scanner, new Location("org/flywaydb/core/internal/resolver/spring/dummy"), config);
+                new SpringJdbcMigrationResolver(scanner, new Locations("org/flywaydb/core/internal/resolver/spring/dummy"), config);
         Collection<ResolvedMigration> migrations = springJdbcMigrationResolver.resolveMigrations();
 
         assertEquals(2, migrations.size());

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolverMediumTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.resolver.FlywayConfigurationForTests;
 import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.Scanner;
 import org.junit.Test;
@@ -42,7 +43,7 @@ public void resolveMigrations() throws Exception {
 
         SqlMigrationResolver sqlMigrationResolver =
                 new SqlMigrationResolver(null, new Scanner(Thread.currentThread().getContextClassLoader()),
-                        new Location("filesystem:" + new File(path).getPath()), PlaceholderReplacer.NO_PLACEHOLDERS,
+                        new Locations("filesystem:" + new File(path).getPath()), PlaceholderReplacer.NO_PLACEHOLDERS,
                         FlywayConfigurationForTests.create());
         Collection<ResolvedMigration> migrations = sqlMigrationResolver.resolveMigrations();
 

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -31,6 +31,7 @@
 import org.flywaydb.core.internal.resolver.FlywayConfigurationForTests;
 import org.flywaydb.core.internal.resolver.sql.SqlMigrationResolver;
 import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.jdbc.DriverDataSource;
 import org.flywaydb.core.internal.util.scanner.Scanner;
@@ -300,7 +301,7 @@ public void customTableName() throws Exception {
     protected void assertChecksum(MigrationInfo migrationInfo) {
         SqlMigrationResolver sqlMigrationResolver = new SqlMigrationResolver(
                 dbSupport, new Scanner(Thread.currentThread().getContextClassLoader()),
-                new Location(getBasedir()),
+                new Locations(getBasedir()),
                 PlaceholderReplacer.NO_PLACEHOLDERS,
                 FlywayConfigurationForTests.create());
         List<ResolvedMigration> migrations = sqlMigrationResolver.resolveMigrations();

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/db2zos/DB2zOSMigrationMediumTest.java
Patch:
@@ -43,6 +43,7 @@
 import org.flywaydb.core.internal.resolver.FlywayConfigurationForTests;
 import org.flywaydb.core.internal.resolver.sql.SqlMigrationResolver;
 import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.jdbc.DriverDataSource;
 import org.flywaydb.core.internal.util.scanner.Scanner;
@@ -74,7 +75,7 @@ protected void configureFlyway() {
     protected void assertChecksum(MigrationInfo migrationInfo) {
         SqlMigrationResolver sqlMigrationResolver = new SqlMigrationResolver(
                 dbSupport, new Scanner(Thread.currentThread().getContextClassLoader()),
-                new Location(getBasedir() + "/default"),
+                new Locations(getBasedir() + "/default"),
                 PlaceholderReplacer.NO_PLACEHOLDERS,
                 FlywayConfigurationForTests.create());
         List<ResolvedMigration> migrations = sqlMigrationResolver.resolveMigrations();

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationResolverSmallTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.flywaydb.core.internal.resolver.jdbc.dummy.V2__InterfaceBasedMigration;
 import org.flywaydb.core.internal.resolver.jdbc.dummy.Version3dot5;
 import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.scanner.Scanner;
 import org.junit.Test;
 
@@ -42,13 +43,13 @@ public class JdbcMigrationResolverSmallTest {
 
     @Test(expected = FlywayException.class)
     public void broken() {
-        new JdbcMigrationResolver(scanner, new Location("org/flywaydb/core/internal/resolver/jdbc/error"), config).resolveMigrations();
+        new JdbcMigrationResolver(scanner, new Locations("org/flywaydb/core/internal/resolver/jdbc/error"), config).resolveMigrations();
     }
 
     @Test
     public void resolveMigrations() throws SQLException {
         JdbcMigrationResolver jdbcMigrationResolver =
-                new JdbcMigrationResolver(scanner, new Location("org/flywaydb/core/internal/resolver/jdbc/dummy"), config);
+                new JdbcMigrationResolver(scanner, new Locations("org/flywaydb/core/internal/resolver/jdbc/dummy"), config);
         Collection<ResolvedMigration> migrations = jdbcMigrationResolver.resolveMigrations();
 
         assertEquals(3, migrations.size());

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/spring/SpringJdbcMigrationResolverSmallTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.flywaydb.core.internal.resolver.spring.dummy.V2__InterfaceBasedMigration;
 import org.flywaydb.core.internal.resolver.spring.dummy.Version3dot5;
 import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.scanner.Scanner;
 import org.junit.Test;
 
@@ -41,7 +42,7 @@ public class SpringJdbcMigrationResolverSmallTest {
     @Test
     public void resolveMigrations() {
         SpringJdbcMigrationResolver springJdbcMigrationResolver =
-                new SpringJdbcMigrationResolver(scanner, new Location("org/flywaydb/core/internal/resolver/spring/dummy"), config);
+                new SpringJdbcMigrationResolver(scanner, new Locations("org/flywaydb/core/internal/resolver/spring/dummy"), config);
         Collection<ResolvedMigration> migrations = springJdbcMigrationResolver.resolveMigrations();
 
         assertEquals(2, migrations.size());

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolverMediumTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.resolver.FlywayConfigurationForTests;
 import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.Scanner;
 import org.junit.Test;
@@ -42,7 +43,7 @@ public void resolveMigrations() throws Exception {
 
         SqlMigrationResolver sqlMigrationResolver =
                 new SqlMigrationResolver(null, new Scanner(Thread.currentThread().getContextClassLoader()),
-                        new Location("filesystem:" + new File(path).getPath()), PlaceholderReplacer.NO_PLACEHOLDERS,
+                        new Locations("filesystem:" + new File(path).getPath()), PlaceholderReplacer.NO_PLACEHOLDERS,
                         FlywayConfigurationForTests.create());
         Collection<ResolvedMigration> migrations = sqlMigrationResolver.resolveMigrations();
 

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -31,6 +31,7 @@
 import org.flywaydb.core.internal.resolver.FlywayConfigurationForTests;
 import org.flywaydb.core.internal.resolver.sql.SqlMigrationResolver;
 import org.flywaydb.core.internal.util.Location;
+import org.flywaydb.core.internal.util.Locations;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.jdbc.DriverDataSource;
 import org.flywaydb.core.internal.util.scanner.Scanner;
@@ -300,7 +301,7 @@ public void customTableName() throws Exception {
     protected void assertChecksum(MigrationInfo migrationInfo) {
         SqlMigrationResolver sqlMigrationResolver = new SqlMigrationResolver(
                 dbSupport, new Scanner(Thread.currentThread().getContextClassLoader()),
-                new Location(getBasedir()),
+                new Locations(getBasedir()),
                 PlaceholderReplacer.NO_PLACEHOLDERS,
                 FlywayConfigurationForTests.create());
         List<ResolvedMigration> migrations = sqlMigrationResolver.resolveMigrations();

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSchema.java
Patch:
@@ -71,8 +71,8 @@ protected void doClean() throws SQLException {
             throw new FlywayException("Clean not supported on Oracle for user 'SYSTEM'! You should NEVER add your own objects to the SYSTEM schema!");
         }
 
-        String user = dbSupport.doGetCurrentSchemaName();
-        boolean defaultSchemaForUser = user.equalsIgnoreCase(name);
+        String user = dbSupport.getCurrentUserName();
+        boolean defaultSchemaForUser = user.equals(name);
 
         if (!defaultSchemaForUser) {
             LOG.warn("Cleaning schema " + name + " by a different user (" + user + "): " +
@@ -272,7 +272,7 @@ private List<String> generateDropStatementsForSpatialExtensions(boolean defaultS
             LOG.debug("Oracle Spatial Extensions are not available. No cleaning of MDSYS tables and views.");
             return statements;
         }
-        if (!dbSupport.getCurrentSchemaName().equalsIgnoreCase(name)) {
+        if (!dbSupport.getCurrentUserName().equals(name)) {
             int count = jdbcTemplate.queryForInt("SELECT COUNT (*) FROM all_sdo_geom_metadata WHERE owner=?", name);
             count += jdbcTemplate.queryForInt("SELECT COUNT (*) FROM all_sdo_index_info WHERE sdo_index_owner=?", name);
             if (count > 0) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSchema.java
Patch:
@@ -71,8 +71,8 @@ protected void doClean() throws SQLException {
             throw new FlywayException("Clean not supported on Oracle for user 'SYSTEM'! You should NEVER add your own objects to the SYSTEM schema!");
         }
 
-        String user = dbSupport.doGetCurrentSchemaName();
-        boolean defaultSchemaForUser = user.equalsIgnoreCase(name);
+        String user = dbSupport.doGetCurrentUserName();
+        boolean defaultSchemaForUser = user.equals(name);
 
         if (!defaultSchemaForUser) {
             LOG.warn("Cleaning schema " + name + " by a different user (" + user + "): " +
@@ -272,7 +272,7 @@ private List<String> generateDropStatementsForSpatialExtensions(boolean defaultS
             LOG.debug("Oracle Spatial Extensions are not available. No cleaning of MDSYS tables and views.");
             return statements;
         }
-        if (!dbSupport.getCurrentSchemaName().equalsIgnoreCase(name)) {
+        if (!dbSupport.getCurrentUserName().equals(name)) {
             int count = jdbcTemplate.queryForInt("SELECT COUNT (*) FROM all_sdo_geom_metadata WHERE owner=?", name);
             count += jdbcTemplate.queryForInt("SELECT COUNT (*) FROM all_sdo_index_info WHERE sdo_index_owner=?", name);
             if (count > 0) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/metadatatable/MetaDataTableImpl.java
Patch:
@@ -182,6 +182,7 @@ public <T> T lock(Callable<T> callable) {
 
     @Override
     public void addAppliedMigration(AppliedMigration appliedMigration) {
+        dbSupport.changeCurrentSchemaTo(table.getSchema());
         createIfNotExists();
 
         MigrationVersion version = appliedMigration.getVersion();

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/mysql/MySQLMigrationMediumTest.java
Patch:
@@ -44,7 +44,7 @@ protected DataSource createDataSource(Properties customProperties) throws Except
     @Test
     public void migrateWithNonExistingSchemaSetInPropertyButNotInUrl() throws Exception {
         Flyway flyway = new Flyway();
-        flyway.setDataSource("jdbc:mysql://localhost/", "flyway", "flyway");
+        flyway.setDataSource("jdbc:mysql://localhost/flyway_db", "flyway", "flyway");
         flyway.setSchemas("non-existing-schema");
         flyway.setLocations(BASEDIR);
         flyway.clean();
@@ -54,7 +54,7 @@ public void migrateWithNonExistingSchemaSetInPropertyButNotInUrl() throws Except
     @Test
     public void migrateWithExistingSchemaSetInPropertyButNotInUrl() throws Exception {
         Flyway flyway = new Flyway();
-        flyway.setDataSource("jdbc:mysql://localhost/", "flyway", "flyway");
+        flyway.setDataSource("jdbc:mysql://localhost/flyway_db", "flyway", "flyway");
         flyway.setSchemas("flyway_db");
         flyway.setLocations(getBasedir());
         flyway.clean();

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/mysql/MySQLMigrationTestCase.java
Patch:
@@ -193,8 +193,8 @@ private static class TwoConnectionsDataSource extends AbstractDataSource {
         private final DataSource[] dataSources;
         private int count;
 
-        public TwoConnectionsDataSource(DataSource dataSource) throws SQLException {
-            dataSources = new DataSource[] {
+        TwoConnectionsDataSource(DataSource dataSource) throws SQLException {
+            dataSources = new DataSource[]{
                     new SingleConnectionDataSource(dataSource.getConnection(), true),
                     new SingleConnectionDataSource(dataSource.getConnection(), true)
             };

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -215,7 +215,7 @@ public String validate() {
             if (getVersion() == null) {
                 throw new FlywayException("Detected failed repeatable migration: " + getDescription());
             }
-            throw new FlywayException("Detected failed migration to version" + getVersion());
+            throw new FlywayException("Detected failed migration to version " + getVersion() + " (" + getDescription() + ")");
         }
 
         if ((resolvedMigration == null)

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/MigrateMojo.java
Patch:
@@ -30,7 +30,7 @@ protected void doExecute(Flyway flyway) throws Exception {
         flyway.migrate();
 
         MigrationInfo current = flyway.info().current();
-        if (current != null) {
+        if (current != null && current.getVersion() != null) {
             mavenProject.getProperties().setProperty("flyway.current", current.getVersion().toString());
         }
     }

File: flyway-core/src/test/java/org/flywaydb/core/FlywayMediumTest.java
Patch:
@@ -122,7 +122,7 @@ public void info() throws Exception {
         assertEquals(MigrationState.ABOVE_TARGET, flyway.info().all()[3].getState());
 
         flyway.migrate();
-        assertEquals(64723601, flyway.info().current().getChecksum().intValue());
+        assertEquals(-133051733, flyway.info().current().getChecksum().intValue());
         assertEquals("1.1", flyway.info().current().getVersion().toString());
         assertEquals(MigrationState.SUCCESS, flyway.info().current().getState());
         assertEquals(4, flyway.info().all().length);

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -146,7 +146,7 @@ public void upgradeMetadataTableTo40Format() throws Exception {
         assertEquals(3, flyway.migrate());
         flyway.validate();
         assertEquals(5, flyway.info().applied().length);
-        assertEquals(814278929, flyway.info().applied()[1].getChecksum().intValue());
+        assertEquals(454910647, flyway.info().applied()[1].getChecksum().intValue());
     }
 
     @Test

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/sqlserver/SQLServerSchema.java
Patch:
@@ -146,7 +146,7 @@ protected boolean doExists() throws SQLException {
     protected boolean doEmpty() throws SQLException {
 
 
-        boolean empty  = queryDBObjects(ObjectType.SCALAR_FUNCTION,
+        boolean empty  = queryDBObjects(ObjectType.SCALAR_FUNCTION, ObjectType.AGGREGATE,
                 ObjectType.CLR_SCALAR_FUNCTION, ObjectType.CLR_TABLE_VALUED_FUNCTION, ObjectType.TABLE_VALUED_FUNCTION,
                 ObjectType.STORED_PROCEDURE, ObjectType.CLR_STORED_PROCEDURE, ObjectType.USER_TABLE,
                 ObjectType.SYNONYM, ObjectType.SEQUENCE_OBJECT, ObjectType.FOREIGN_KEY, ObjectType.VIEW).isEmpty();

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -259,6 +259,7 @@ private static void printUsage() {
         LOG.info("callbacks                    : Comma-separated list of FlywayCallback classes");
         LOG.info("skipDefaultCallbacks         : Skips default callbacks (sql)");
         LOG.info("validateOnMigrate            : Validate when running migrate");
+        LOG.info("ignoreMissingMigrations      : Allow missing migrations when validating");
         LOG.info("ignoreFutureMigrations       : Allow future migrations when validating");
         LOG.info("cleanOnValidationError       : Automatically clean on a validation error");
         LOG.info("cleanDisabled                : Whether to disable clean");

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -143,7 +143,7 @@ public Object call() throws SQLException {
                     @Override
                     public Boolean call() {
                         MigrationInfoServiceImpl infoService =
-                                new MigrationInfoServiceImpl(migrationResolver, metaDataTable, configuration.getTarget(), configuration.isOutOfOrder(), true, true);
+                                new MigrationInfoServiceImpl(migrationResolver, metaDataTable, configuration.getTarget(), configuration.isOutOfOrder(), true, true, true);
                         infoService.refresh();
 
                         MigrationVersion currentSchemaVersion = MigrationVersion.EMPTY;

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -89,7 +89,7 @@ public DbRepair(DbSupport dbSupport, Connection connection, Schema schema, Migra
         this.dbSupport = dbSupport;
         this.connection = connection;
         this.schema = schema;
-        this.migrationInfoService = new MigrationInfoServiceImpl(migrationResolver, metaDataTable, MigrationVersion.LATEST, true, true, true);
+        this.migrationInfoService = new MigrationInfoServiceImpl(migrationResolver, metaDataTable, MigrationVersion.LATEST, true, true, true, true);
         this.metaDataTable = metaDataTable;
         this.callbacks = callbacks;
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -222,8 +222,8 @@ public String validate() {
                 && (appliedMigration.getType() != MigrationType.SCHEMA)
                 && (appliedMigration.getType() != MigrationType.BASELINE)
                 && (appliedMigration.getVersion() != null)
-                && (!context.future ||
-                (MigrationState.FUTURE_SUCCESS != getState() && MigrationState.FUTURE_FAILED != getState()))) {
+                && (!context.missing || (MigrationState.MISSING_SUCCESS != getState() && MigrationState.MISSING_FAILED != getState()))
+                && (!context.future || (MigrationState.FUTURE_SUCCESS != getState() && MigrationState.FUTURE_FAILED != getState()))) {
             return "Detected applied migration not resolved locally: " + getVersion();
         }
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/info/MigrationInfoDumperSmallTest.java
Patch:
@@ -54,7 +54,7 @@ public void dump2pending() {
         MigrationInfoServiceImpl migrationInfoService =
                 new MigrationInfoServiceImpl(
                         createMigrationResolver(createAvailableMigration("1"), createAvailableMigration("2.2014.09.11.55.45613")),
-                        createMetaDataTable(), MigrationVersion.LATEST, false, true, true);
+                        createMetaDataTable(), MigrationVersion.LATEST, false, true, true, true);
         migrationInfoService.refresh();
 
         String table = MigrationInfoDumper.dumpToAsciiTable(migrationInfoService.all());

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -253,6 +253,7 @@ private static void printUsage() {
         LOG.info("placeholders                 : Placeholders to replace in sql migrations");
         LOG.info("placeholderPrefix            : Prefix of every placeholder");
         LOG.info("placeholderSuffix            : Suffix of every placeholder");
+        LOG.info("installedBy                  : Username that will be recorded in the metadata table");
         LOG.info("target                       : Target version up to which Flyway should use migrations");
         LOG.info("outOfOrder                   : Allows migrations to be run \"out of order\"");
         LOG.info("callbacks                    : Comma-separated list of FlywayCallback classes");

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -873,12 +873,12 @@ public int migrate() throws FlywayException {
         return execute(new Command<Integer>() {
             public Integer execute(Connection connectionMetaDataTable,
                                    MigrationResolver migrationResolver, MetaDataTable metaDataTable, DbSupport dbSupport, Schema[] schemas, FlywayCallback[] flywayCallbacks) {
+                new DbSchemas(connectionMetaDataTable, schemas, metaDataTable).create();
+
                 if (validateOnMigrate) {
                     doValidate(connectionMetaDataTable, dbSupport, migrationResolver, metaDataTable, schemas, flywayCallbacks, true);
                 }
 
-                new DbSchemas(connectionMetaDataTable, schemas, metaDataTable).create();
-
                 if (!metaDataTable.exists()) {
                     List<Schema> nonEmptySchemas = new ArrayList<Schema>();
                     for (Schema schema : schemas) {

File: flyway-gradle-plugin/src/main/java/org/flywaydb/gradle/task/AbstractFlywayTask.java
Patch:
@@ -282,8 +282,6 @@ public Object runTask() {
      */
     private Flyway createFlyway() {
         Map<String, String> conf = new HashMap<String, String>();
-        System.out.println(this);
-        System.out.println(extension);
         putIfSet(conf, "driver", driver, extension.driver);
         putIfSet(conf, "url", url, extension.url);
         putIfSet(conf, "user", user, extension.user);

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -25,6 +25,7 @@
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.internal.dbsupport.DbSupport;
 import org.flywaydb.core.internal.dbsupport.DbSupportFactory;
+import org.flywaydb.core.internal.dbsupport.FlywaySqlException;
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.info.MigrationInfoImpl;
 import org.flywaydb.core.internal.info.MigrationInfoServiceImpl;
@@ -284,7 +285,7 @@ public Object call() throws SQLException {
                 try {
                     doMigrate(migration, migrationExecutor, migrationText);
                 } catch (SQLException e) {
-                    throw new FlywayException("Unable to apply migration", e);
+                    throw new FlywaySqlException("Unable to apply migration", e);
                 }
             }
         } catch (FlywayException e) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/DbSupport.java
Patch:
@@ -95,7 +95,7 @@ public String getCurrentSchemaName() {
         try {
             return doGetCurrentSchemaName();
         } catch (SQLException e) {
-            throw new FlywayException("Unable to retrieve the current schema for the connection", e);
+            throw new FlywaySqlException("Unable to retrieve the current schema for the connection", e);
         }
     }
 
@@ -120,7 +120,7 @@ public void changeCurrentSchemaTo(Schema schema) {
         try {
             doChangeCurrentSchemaTo(schema.getName());
         } catch (SQLException e) {
-            throw new FlywayException("Error setting current schema to " + schema, e);
+            throw new FlywaySqlException("Error setting current schema to " + schema, e);
         }
     }
 
@@ -131,7 +131,7 @@ public void restoreCurrentSchema() {
         try {
             doChangeCurrentSchemaTo(originalSchema);
         } catch (SQLException e) {
-            throw new FlywayException("Error restoring current schema to its original setting", e);
+            throw new FlywaySqlException("Error restoring current schema to its original setting", e);
         }
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLAdvisoryLockTemplate.java
Patch:
@@ -16,6 +16,7 @@
 package org.flywaydb.core.internal.dbsupport.postgresql;
 
 import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.internal.dbsupport.FlywaySqlException;
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.util.logging.Log;
 import org.flywaydb.core.internal.util.logging.LogFactory;
@@ -66,7 +67,7 @@ public <T> T execute(Callable<T> callable) {
             jdbcTemplate.execute("SELECT pg_advisory_lock(" + lockNum + ")");
             return callable.call();
         } catch (SQLException e) {
-            throw new FlywayException("Unable to acquire Flyway advisory lock", e);
+            throw new FlywaySqlException("Unable to acquire Flyway advisory lock", e);
         } catch (Exception e) {
             RuntimeException rethrow;
             if (e instanceof RuntimeException) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/TransactionTemplate.java
Patch:
@@ -16,6 +16,7 @@
 package org.flywaydb.core.internal.util.jdbc;
 
 import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.internal.dbsupport.FlywaySqlException;
 import org.flywaydb.core.internal.util.logging.Log;
 import org.flywaydb.core.internal.util.logging.LogFactory;
 
@@ -75,7 +76,7 @@ public <T> T execute(Callable<T> transactionCallback) {
             connection.commit();
             return result;
         } catch (SQLException e) {
-            throw new FlywayException("Unable to commit transaction", e);
+            throw new FlywaySqlException("Unable to commit transaction", e);
         } catch (Exception e) {
             Savepoint savepoint = null;
             RuntimeException rethrow;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationResolver.java
Patch:
@@ -92,7 +92,7 @@ public List<ResolvedMigration> resolveMigrations() {
                 migrations.add(migrationInfo);
             }
         } catch (Exception e) {
-            throw new FlywayException("Unable to resolve Jdbc Java migrations in location: " + location, e);
+            throw new FlywayException("Unable to resolve Jdbc Java migrations in location: " + location + " (" + e.getMessage() + ")", e);
         }
 
         Collections.sort(migrations, new ResolvedMigrationComparator());

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1339,7 +1339,7 @@ private String getValueAndRemoveEntry(Map<String, String> map, String key) {
 
             MetaDataTable metaDataTable = new MetaDataTableImpl(dbSupport, schemas[0].getTable(table));
             if (metaDataTable.upgradeIfNecessary()) {
-                new DbRepair(dbSupport, connectionMetaDataTable, schemas[0], migrationResolver, metaDataTable, callbacks).repairChecksums();
+                new DbRepair(dbSupport, connectionMetaDataTable, schemas[0], migrationResolver, metaDataTable, callbacks).repairChecksumsAndDescriptions();
                 LOG.info("Metadata table " + table + " successfully upgraded to the Flyway 4.0 format.");
             }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -184,9 +184,8 @@ public Boolean call() {
                             } else {
                                 if (failed[0].getVersion() == null) {
                                     throw new FlywayException("Schema " + schema + " contains a failed repeatable migration (" + failed[0].getDescription() + ") !");
-                                } else {
-                                    throw new FlywayException("Schema " + schema + " contains a failed migration to version " + failed[0].getVersion() + " !");
                                 }
+                                throw new FlywayException("Schema " + schema + " contains a failed migration to version " + failed[0].getVersion() + " !");
                             }
                         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbBaseline.java
Patch:
@@ -130,7 +130,7 @@ public Void call() {
                         throw new FlywayException("Unable to baseline metadata table " + metaDataTable + " with version 0 as this version was used for schema creation");
                     }
                     if (metaDataTable.hasAppliedMigrations()) {
-                      throw new FlywayException("Unable to baseline metadata table " + metaDataTable + " as it already contains migrations");
+                        throw new FlywayException("Unable to baseline metadata table " + metaDataTable + " as it already contains migrations");
                     }
                     metaDataTable.addBaselineMarker(baselineVersion, baselineDescription);
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLDbSupport.java
Patch:
@@ -156,7 +156,7 @@ public void executePgCopy(Connection connection, String sql) throws SQLException
 
     @Override
     public <T> T lock(Table table, Callable<T> callable) {
-        return new PostgreSQLAdvisoryLockTemplate(jdbcTemplate).execute(callable);
+        return new PostgreSQLAdvisoryLockTemplate(jdbcTemplate, table.toString().hashCode()).execute(callable);
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/metadatatable/MetaDataTableImpl.java
Patch:
@@ -323,7 +323,7 @@ public void removeFailedMigrations() {
     public void addSchemasMarker(final Schema[] schemas) {
         createIfNotExists();
 
-        addAppliedMigration(new AppliedMigration(MigrationVersion.fromVersion("0"), "<< Flyway Schema Creation >>",
+        addAppliedMigration(new AppliedMigration(null, "<< Flyway Schema Creation >>",
                 MigrationType.SCHEMA, StringUtils.arrayToCommaDelimitedString(schemas), null, 0, true));
     }
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/db2/DB2MigrationMediumTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.migration.MigrationTestCase;
 import org.flywaydb.core.internal.util.jdbc.DriverDataSource;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
 
@@ -49,6 +50,7 @@ protected String getQuoteLocation() {
     }
 
     @Test
+    @Ignore("Excluding by default as for some reason this test is flaky in Maven even though it is stable in IntelliJ")
     public void schemaWithDash() throws FlywayException {
         flyway.setSchemas("my-schema");
         flyway.setLocations(getBasedir());

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/SchemaObject.java
Patch:
@@ -79,7 +79,7 @@ public final void drop() {
         try {
             doDrop();
         } catch (SQLException e) {
-            throw new FlywayException("Unable to drop " + this, e);
+            throw new FlywaySqlException("Unable to drop " + this, e);
         }
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathScanner.java
Patch:
@@ -308,6 +308,7 @@ private ClassPathLocationScanner createLocationScanner(String protocol) {
         }
 
         if ("jar".equals(protocol)
+                || "war".equals(protocol)
                 || "zip".equals(protocol) //WebLogic
                 || "wsjar".equals(protocol) //WebSphere
                 ) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/DbSupportFactory.java
Patch:
@@ -130,8 +130,9 @@ public static DbSupport createDbSupport(Connection connection, boolean printInfo
             return new PhoenixDbSupport(connection);
         }
 
-		//Sybase ASE support
-        if (databaseProductName.startsWith("ASE") || databaseProductName.startsWith("Adaptive")) {
+        if (databaseProductName.startsWith("ASE") || databaseProductName.startsWith("Adaptive") //Newer Sybase ASE versions
+                || databaseProductName.startsWith("sql server") // Older Sybase ASE 12.5 installations
+                ) {
         	return new SybaseASEDbSupport(connection);
         }
         if (databaseProductName.startsWith("HDB")) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/DbSupport.java
Patch:
@@ -118,7 +118,7 @@ public void changeCurrentSchemaTo(Schema schema) {
         }
 
         try {
-            doChangeCurrentSchemaTo(schema.toString());
+            doChangeCurrentSchemaTo(schema.getName());
         } catch (SQLException e) {
             throw new FlywayException("Error setting current schema to " + schema, e);
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/db2/DB2DbSupport.java
Patch:
@@ -63,7 +63,7 @@ protected String doGetCurrentSchemaName() throws SQLException {
 
     @Override
     protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
-        jdbcTemplate.execute("SET SCHEMA " + schema);
+        jdbcTemplate.execute("SET SCHEMA " + quote(schema));
     }
 
     public String getCurrentUserFunction() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/db2zos/DB2zosDbSupport.java
Patch:
@@ -56,7 +56,7 @@ protected String doGetCurrentSchemaName() throws SQLException {
 
     @Override
     protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
-        jdbcTemplate.execute("SET SCHEMA " + schema);
+        jdbcTemplate.execute("SET SCHEMA " + quote(schema));
     }
 
     public String getCurrentUserFunction() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/derby/DerbyDbSupport.java
Patch:
@@ -52,7 +52,7 @@ protected String doGetCurrentSchemaName() throws SQLException {
 
     @Override
     protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
-        jdbcTemplate.execute("SET SCHEMA " + schema);
+        jdbcTemplate.execute("SET SCHEMA " + quote(schema));
     }
 
     public boolean supportsDdlTransactions() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/h2/H2DbSupport.java
Patch:
@@ -53,7 +53,7 @@ protected String doGetCurrentSchemaName() throws SQLException {
 
     @Override
     protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
-        jdbcTemplate.execute("SET SCHEMA " + schema);
+        jdbcTemplate.execute("SET SCHEMA " + quote(schema));
     }
 
     public boolean supportsDdlTransactions() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/hsql/HsqlDbSupport.java
Patch:
@@ -69,7 +69,7 @@ protected String doGetCurrentSchemaName() throws SQLException {
 
     @Override
     protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
-        jdbcTemplate.execute("SET SCHEMA " + schema);
+        jdbcTemplate.execute("SET SCHEMA " + quote(schema));
     }
 
     public boolean supportsDdlTransactions() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -52,7 +52,7 @@ protected String doGetCurrentSchemaName() throws SQLException {
 
     @Override
     protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
-        jdbcTemplate.execute("ALTER SESSION SET CURRENT_SCHEMA=" + schema);
+        jdbcTemplate.execute("ALTER SESSION SET CURRENT_SCHEMA=" + quote(schema));
     }
 
     public boolean supportsDdlTransactions() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/saphana/SapHanaDbSupport.java
Patch:
@@ -52,7 +52,7 @@ protected String doGetCurrentSchemaName() throws SQLException {
 
     @Override
     protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
-        jdbcTemplate.execute("SET SCHEMA " + schema);
+        jdbcTemplate.execute("SET SCHEMA " + quote(schema));
     }
 
     public String getCurrentUserFunction() {

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/solid/SolidDbSupport.java
Patch:
@@ -60,7 +60,7 @@ protected String doGetCurrentSchemaName() throws SQLException {
 
     @Override
     protected void doChangeCurrentSchemaTo(final String schema) throws SQLException {
-        jdbcTemplate.execute("SET SCHEMA " + schema);
+        jdbcTemplate.execute("SET SCHEMA " + quote(schema));
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/internal/info/MigrationInfoImplSmallTest.java
Patch:
@@ -69,7 +69,9 @@ public void compareToRepeatable() {
         ResolvedMigration b = createResolvedMigration(null, "B");
         MigrationInfoContext context = new MigrationInfoContext();
         context.target = MigrationVersion.LATEST;
+        context.latestRepeatableRuns.put("A", 10);
         context.latestRepeatableRuns.put("B", 7);
+        context.latestRepeatableRuns.put("C", 5);
 
         MigrationInfoImpl r1 = new MigrationInfoImpl(createResolvedMigration(null, "C"), createAppliedMigration(5, null, "C"), context, false);
         MigrationInfoImpl v2 = new MigrationInfoImpl(createResolvedMigration("1", "V1"), createAppliedMigration(6, "1", "V1"), context, false);

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -158,10 +158,10 @@ public MigrationState getState() {
         }
 
         if (appliedMigration.getVersion() == null) {
-            if (ObjectUtils.nullSafeEquals(appliedMigration.getChecksum(), resolvedMigration.getChecksum())) {
-                return MigrationState.SUCCESS;
-            }
             if (appliedMigration.getInstalledRank() == context.latestRepeatableRuns.get(appliedMigration.getDescription())) {
+                if (ObjectUtils.nullSafeEquals(appliedMigration.getChecksum(), resolvedMigration.getChecksum())) {
+                    return MigrationState.SUCCESS;
+                }
                 return MigrationState.OUTDATED;
             }
             return MigrationState.SUPERSEEDED;

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -970,6 +970,7 @@ private void doValidate(Connection connectionMetaDataTable, DbSupport dbSupport,
         if (validationError != null) {
             if (cleanOnValidationError) {
                 new DbClean(connectionMetaDataTable, dbSupport, metaDataTable, schemas, flywayCallbacks, cleanDisabled).clean();
+                metaDataTable.clearCache();
             } else {
                 throw new FlywayException("Validate failed: " + validationError);
             }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -58,7 +58,7 @@ protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter)
             statementStart = statementStart.replaceAll("\\s+", " ");
         }
 
-        if (statementStart.matches("CREATE\\s+(OR\\s+REPLACE)?\\s+((NON)?EDITIONABLE)?\\s+(FUNCTION|PROCEDURE|PACKAGE|TYPE|TRIGGER).*")
+        if (statementStart.matches("CREATE(\\s+OR\\s+REPLACE)?(\\s+(NON)?EDITIONABLE)?\\s+(FUNCTION|PROCEDURE|PACKAGE|TYPE|TRIGGER).*")
                 || statementStart.matches("CREATE(\\s+OR\\s+REPLACE)?(\\s+AND\\s+(RESOLVE|COMPILE))?(\\s+NOFORCE)?\\s+JAVA\\s+(SOURCE|RESOURCE|CLASS).*")) {
             return PLSQL_DELIMITER;
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/sqlserver/SQLServerSchema.java
Patch:
@@ -172,7 +172,7 @@ private List<String> cleanRoutines(String routineType) throws SQLException {
         @SuppressWarnings({"unchecked"})
         List<Map<String, String>> routineNames =
                 jdbcTemplate.queryForList("SELECT routine_name FROM INFORMATION_SCHEMA.ROUTINES" +
-                                " WHERE routine_schema=? AND routine_type=?",
+                                " WHERE routine_schema=? AND routine_type=? order by created desc",
                         name, routineType
                 );
 

File: flyway-ant/src/main/java/org/flywaydb/ant/AbstractFlywayTask.java
Patch:
@@ -239,7 +239,7 @@ public void setBaselineDescription(String baselineDescription) {
         String userValue = useValueIfPropertyNotSet(user, "user");
         String passwordValue = useValueIfPropertyNotSet(password, "password");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), driverValue, urlValue, userValue, passwordValue);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), driverValue, urlValue, userValue, passwordValue, null);
     }
 
     /**

File: flyway-core/src/test/java/org/flywaydb/core/FlywaySmallTest.java
Patch:
@@ -147,7 +147,7 @@ public void configureCustomMigrationResolvers() {
 
     @Test
     public void configureWithExistingDataSource() {
-        DataSource dataSource = new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:h2:mem:flyway_test;DB_CLOSE_DELAY=-1", "sa", "");
+        DataSource dataSource = new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:h2:mem:flyway_test;DB_CLOSE_DELAY=-1", "sa", "", null);
 
         Properties properties = new Properties();
 
@@ -160,7 +160,7 @@ public void configureWithExistingDataSource() {
 
     @Test
     public void configureWithPartialDbConfigInProperties() {
-        DataSource dataSource = new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:h2:mem:flyway_test;DB_CLOSE_DELAY=-1", "sa", "");
+        DataSource dataSource = new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:h2:mem:flyway_test;DB_CLOSE_DELAY=-1", "sa", "", null);
 
         Properties properties = new Properties();
         properties.setProperty("flyway.user", "dummy_user");

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/db2/DB2ConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("db2.password", "flyway");
         String url = customProperties.getProperty("db2.url", "jdbc:db2://localhost:50000/flyway");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/db2/DB2MigrationMediumTest.java
Patch:
@@ -39,7 +39,7 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("db2.password", "flyway");
         String url = customProperties.getProperty("db2.url", "jdbc:db2://localhost:50000/flyway");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/db2zos/DB2zOSConcurrentMigrationMediumTest.java
Patch:
@@ -33,6 +33,6 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("db2.password", "password");
         String url = customProperties.getProperty("db2.url", "jdbc:db2://host:port/schemaname");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/db2zos/DB2zOSMigrationMediumTest.java
Patch:
@@ -91,7 +91,7 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("db2.password", "password");
         String url = customProperties.getProperty("db2.url", "jdbc:db2://host:port/schemaname");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/derby/DerbyConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ public class DerbyConcurrentMigrationMediumTest extends ConcurrentMigrationTestC
 
     @Override
     protected DataSource createDataSource(Properties customProperties) {
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:derby:memory:flyway_db_concurrent;create=true", "", "");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:derby:memory:flyway_db_concurrent;create=true", "", "", null);
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/derby/DerbyMigrationMediumTest.java
Patch:
@@ -39,7 +39,7 @@ public class DerbyMigrationMediumTest extends MigrationTestCase {
     @Override
     public void tearDown() throws Exception {
         try {
-            new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:derby:memory:flyway_db;drop=true", "", "").getConnection();
+            new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:derby:memory:flyway_db;drop=true", "", "", null).getConnection();
         } catch (FlywayException e) {
             //OK, expected error 08006. See http://db.apache.org/derby/docs/dev/devguide/cdevdvlpinmemdb.html
         }
@@ -49,7 +49,7 @@ public void tearDown() throws Exception {
 
     @Override
     protected DataSource createDataSource(Properties customProperties) {
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:derby:memory:flyway_db;create=true", "", "");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:derby:memory:flyway_db;create=true", "", "", null);
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/h2/H2ConcurrentMigrationMediumTest.java
Patch:
@@ -30,6 +30,6 @@
 public class H2ConcurrentMigrationMediumTest extends ConcurrentMigrationTestCase {
     @Override
     protected DataSource createDataSource(Properties customProperties) {
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:h2:mem:flyway_db_concurrent;DB_CLOSE_DELAY=-1", "sa", "", "SET LOCK_TIMEOUT 100000");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:h2:mem:flyway_db_concurrent;DB_CLOSE_DELAY=-1", "sa", "", null, "SET LOCK_TIMEOUT 100000");
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/h2/H2MigrationMediumTest.java
Patch:
@@ -38,7 +38,7 @@
 public class H2MigrationMediumTest extends MigrationTestCase {
     @Override
     protected DataSource createDataSource(Properties customProperties) {
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:h2:mem:flyway_db;DB_CLOSE_DELAY=-1", "sa", "");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:h2:mem:flyway_db;DB_CLOSE_DELAY=-1", "sa", "", null);
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/hsql/HsqlDbConcurrentMigrationMediumTest.java
Patch:
@@ -30,6 +30,6 @@
 public class HsqlDbConcurrentMigrationMediumTest extends ConcurrentMigrationTestCase {
     @Override
     protected DataSource createDataSource(Properties customProperties) {
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:hsqldb:mem:flyway_db_concurrent", "SA", "");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:hsqldb:mem:flyway_db_concurrent", "SA", "", null);
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/hsql/HsqlMigrationMediumTest.java
Patch:
@@ -34,7 +34,7 @@
 public class HsqlMigrationMediumTest extends MigrationTestCase {
     @Override
     protected DataSource createDataSource(Properties customProperties) {
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:hsqldb:mem:flyway_db", "SA", "");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:hsqldb:mem:flyway_db", "SA", "", null);
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/mysql/GoogleCloudSQLMigrationMediumTest.java
Patch:
@@ -50,7 +50,7 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         helper = new LocalServiceTestHelper(config);
         helper.setUp();
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:google:rdbms://localhost/flyway_cloudsql_db", "", "");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:google:rdbms://localhost/flyway_cloudsql_db", "", "", null);
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/mysql/MariaDBMigrationMediumTest.java
Patch:
@@ -33,6 +33,6 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("mariadb.password", "flyway");
         String url = customProperties.getProperty("mariadb.url", "jdbc:mariadb://localhost:3333/flyway_db");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/mysql/MySQLConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("mysql.password", "flyway");
         String url = customProperties.getProperty("mysql.url", "jdbc:mysql://localhost/flyway_db");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/mysql/MySQLMigrationMediumTest.java
Patch:
@@ -38,7 +38,7 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("mysql.password", "flyway");
         String url = customProperties.getProperty("mysql.url", "jdbc:mysql://localhost/flyway_db");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
     @Test

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/oracle/OracleConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("oracle.password", "flyway");
         String url = customProperties.getProperty("oracle.url", "jdbc:oracle:thin:@localhost:1521:XE");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/oracle/OracleDbSupportMediumTest.java
Patch:
@@ -48,7 +48,7 @@ private void checkCurrentSchema(boolean useProxy) throws Exception {
 
         String dataSourceUser = useProxy ? "\"flyway_proxy\"[" + user + "]" : user;
 
-        DataSource dataSource = new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, dataSourceUser, password);
+        DataSource dataSource = new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, dataSourceUser, password, null);
 
         Connection connection = dataSource.getConnection();
         OracleDbSupport dbSupport = new OracleDbSupport(connection);
@@ -133,6 +133,6 @@ private DataSource createDataSource() throws Exception {
         String password = customProperties.getProperty("oracle.password");
         String url = customProperties.getProperty("oracle.url");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/oracle/OracleMigrationMediumTest.java
Patch:
@@ -45,7 +45,7 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("oracle.password", "flyway");
         String url = customProperties.getProperty("oracle.url", "jdbc:oracle:thin:@localhost:1521:XE");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/phoenix/PhoenixMigrationMediumTest.java
Patch:
@@ -91,7 +91,7 @@ public static void beforeClassSetUp() throws Exception {
         String port = testUtility.getConfiguration().get("hbase.zookeeper.property.clientPort");
         String zkServer = server + ":" + port;
 
-        dataSource = new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:phoenix:" + zkServer, "", "");
+        dataSource = new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:phoenix:" + zkServer, "", "", null);
     }
 
 
@@ -109,7 +109,6 @@ public void tearDown() throws Exception {
     @AfterClass
     public static void afterClassTearDown() throws Exception {
         LOG.info("Shutting down mini-cluster");
-        dataSource.close();
         testUtility.shutdownMiniCluster();
     }
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("postgresql.password", "flyway");
         String url = customProperties.getProperty("postgresql.url", "jdbc:postgresql://localhost/flyway_db");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLDbSupportMediumTest.java
Patch:
@@ -67,7 +67,7 @@ private DataSource createDataSource() throws Exception {
         String password = customProperties.getProperty("postgresql.password", "flyway");
         String url = customProperties.getProperty("postgresql.url", "jdbc:postgresql://localhost/flyway_db");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLMigrationMediumTest.java
Patch:
@@ -47,7 +47,7 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("postgresql.password", "flyway");
         String url = customProperties.getProperty("postgresql.url", "jdbc:postgresql://localhost/flyway_db");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
     @Override
@@ -280,7 +280,7 @@ public void emptySearchPath() {
         Flyway flyway1 = new Flyway();
         DriverDataSource driverDataSource = (DriverDataSource) dataSource;
         flyway1.setDataSource(new DriverDataSource(Thread.currentThread().getContextClassLoader(),
-                null, driverDataSource.getUrl(), driverDataSource.getUser(), driverDataSource.getPassword()) {
+                null, driverDataSource.getUrl(), driverDataSource.getUser(), driverDataSource.getPassword(), null) {
             @Override
             public Connection getConnection() throws SQLException {
                 Connection connection = super.getConnection();

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLSuperUserMigrationMediumTest.java
Patch:
@@ -47,7 +47,7 @@ public void setUp() throws Exception {
 
         flyway = new Flyway();
         flyway.setSchemas("super_user_test");
-        flyway.setDataSource(new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, "postgres", password));
+        flyway.setDataSource(new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, "postgres", password, null));
         flyway.setValidateOnMigrate(true);
         flyway.clean();
     }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/redshift/RedshiftConcurrentMigrationMediumTest.java
Patch:
@@ -36,6 +36,6 @@ protected DataSource createDataSource(Properties customProperties) {
         // Create an ssh tunnel on port 5439 to your Redshift instance before running this test!
         String url = customProperties.getProperty("postgresql.url", "jdbc:postgresql://localhost:5439/flyway");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/redshift/RedshiftDbSupportMediumTest.java
Patch:
@@ -69,7 +69,7 @@ private DataSource createDataSource() throws Exception {
         // Create an ssh tunnel on port 5439 to your Redshift instance before running this test!
         String url = customProperties.getProperty("postgresql.url", "jdbc:postgresql://localhost:5439/flyway");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/redshift/RedshiftMigrationMediumTest.java
Patch:
@@ -56,7 +56,7 @@ protected DataSource createDataSource(Properties customProperties) {
         // Create an ssh tunnel on port 5439 to your Redshift instance before running this test!
         String url = customProperties.getProperty("postgresql.url", "jdbc:postgresql://localhost:5439/flyway");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
     @Override
@@ -202,7 +202,7 @@ public void emptySearchPath() {
         Flyway flyway1 = new Flyway();
         DriverDataSource driverDataSource = (DriverDataSource) dataSource;
         flyway1.setDataSource(new DriverDataSource(Thread.currentThread().getContextClassLoader(),
-                null, driverDataSource.getUrl(), driverDataSource.getUser(), driverDataSource.getPassword()) {
+                null, driverDataSource.getUrl(), driverDataSource.getUser(), driverDataSource.getPassword(), null) {
             @Override
             public Connection getConnection() throws SQLException {
                 Connection connection = super.getConnection();

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/saphana/SapHanaConcurrentMigrationMediumTest.java
Patch:
@@ -35,7 +35,7 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("saphana.password", "XXXXXXXXXXXXXXXXXXXX");
         String url = customProperties.getProperty("saphana.url", "jdbc:sap://localhost:30XXX");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
     protected String getBasedir() {

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/saphana/SapHanaMigrationMediumTest.java
Patch:
@@ -39,7 +39,7 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("saphana.password", "XXXXXXXXXXXXXXXXXXXX");
         String url = customProperties.getProperty("saphana.url", "jdbc:sap://localhost:30XXX");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
     protected String getBasedir() {

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/solid/SolidConcurrentMigrationMediumTest.java
Patch:
@@ -40,6 +40,6 @@ protected DataSource createDataSource(final Properties customProperties) throws
         final String url = customProperties.getProperty("solid.url", "jdbc:solid://localhost:1313");
 
         return new DriverDataSource(Thread.currentThread().getContextClassLoader(), "solid.jdbc.SolidDriver",
-                                    url, user, password);
+                                    url, user, password, null);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/solid/SolidMigrationMediumTest.java
Patch:
@@ -40,7 +40,7 @@ protected DataSource createDataSource(final Properties customProperties) throws
         final String url = customProperties.getProperty("solid.url", "jdbc:solid://localhost:1313");
 
         return new DriverDataSource(Thread.currentThread().getContextClassLoader(), "solid.jdbc.SolidDriver",
-                                    url, user, password);
+                                    url, user, password, null);
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/sqlserver/JtdsSQLServerCaseSensitiveMigrationMediumTest.java
Patch:
@@ -33,6 +33,6 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("sqlserver.password", "flyway");
         String url = customProperties.getProperty("sqlserver.jtds_url", "jdbc:jtds:sqlserver://localhost:1433/flyway_db_jtds_case_sensitive");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/sqlserver/JtdsSQLServerConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("sqlserver.password", "flyway");
         String url = customProperties.getProperty("sqlserver.jtds_url", "jdbc:jtds:sqlserver://localhost:1433/flyway_db_jtds_concurrent");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/sqlserver/JtdsSQLServerMigrationMediumTest.java
Patch:
@@ -33,6 +33,6 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("sqlserver.password", "flyway");
         String url = customProperties.getProperty("sqlserver.jtds_url", "jdbc:jtds:sqlserver://localhost:1433/flyway_db_jtds");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/sqlserver/MsSQLServerCaseSensitiveMigrationMediumTest.java
Patch:
@@ -33,6 +33,6 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("sqlserver.password", "flyway");
         String url = customProperties.getProperty("sqlserver.ms_url", "jdbc:sqlserver://localhost:1433;databaseName=flyway_db_ms_case_sensitive");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/sqlserver/MsSQLServerConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("sqlserver.password", "flyway");
         String url = customProperties.getProperty("sqlserver.ms_url", "jdbc:sqlserver://localhost:1433;databaseName=flyway_db_ms_concurrent");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/sqlserver/MsSQLServerMigrationMediumTest.java
Patch:
@@ -36,7 +36,7 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("sqlserver.password", "flyway");
         String url = customProperties.getProperty("sqlserver.ms_url", "jdbc:sqlserver://localhost:1433;databaseName=flyway_db_ms");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
     /**

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/sybase/ase/SybaseASEMigrationMediumTest.java
Patch:
@@ -57,7 +57,7 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("sybase.password", "test");
         String url = customProperties.getProperty("sybase.jtds_url", "jdbc:jtds:sybase://127.0.0.1:5100/flyway_test");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
 	@Override

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/vertica/VerticaConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("vertica.password", "flyway");
         String url = customProperties.getProperty("vertica.url", "jdbc:vertica://localhost/flyway");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/vertica/VerticaDbSupportMediumTest.java
Patch:
@@ -67,7 +67,7 @@ private DataSource createDataSource() throws Exception {
         String password = customProperties.getProperty("vertica.password", "flyway");
         String url = customProperties.getProperty("vertica.url", "jdbc:vertica://localhost/flyway");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/vertica/VerticaMigrationMediumTest.java
Patch:
@@ -43,7 +43,7 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("vertica.password", "flyway");
         String url = customProperties.getProperty("vertica.url", "jdbc:vertica://localhost/flyway");
 
-        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null);
     }
 
     @Override
@@ -116,7 +116,7 @@ public void emptySearchPath() {
         Flyway flyway1 = new Flyway();
         DriverDataSource driverDataSource = (DriverDataSource) dataSource;
         flyway1.setDataSource(new DriverDataSource(Thread.currentThread().getContextClassLoader(),
-                null, driverDataSource.getUrl(), driverDataSource.getUser(), driverDataSource.getPassword()) {
+                null, driverDataSource.getUrl(), driverDataSource.getUser(), driverDataSource.getPassword(), null) {
             @Override
             public Connection getConnection() throws SQLException {
                 Connection connection = super.getConnection();

File: flyway-core/src/test/java/org/flywaydb/core/internal/util/jdbc/DriverDataSourceSmallTest.java
Patch:
@@ -31,7 +31,7 @@ public void getConnectionException() throws Exception {
         String password = "superS3cr3t";
 
         try {
-            new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password).getConnection();
+            new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password, null).getConnection();
         } catch (FlywayException e) {
             assertTrue(e.getCause() instanceof SQLException);
             assertTrue(e.getMessage().contains(url));

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -533,7 +533,7 @@ public final void execute() throws MojoExecutionException, MojoFailureException
             }
             properties.putAll(getConfigFileProperties());
             properties.putAll(System.getProperties());
-            filterProperties(properties);
+            removeMavenPluginSpecificPropertiesToAvoidWarnings(properties);
             flyway.configure(properties);
 
             doExecute(flyway);
@@ -543,11 +543,11 @@ public final void execute() throws MojoExecutionException, MojoFailureException
     }
 
     /**
-     * Filters there properties to remove the Flyway Maven Plugin-specific ones.
+     * Filters there properties to remove the Flyway Maven Plugin-specific ones to avoid warnings.
      *
      * @param properties The properties to filter.
      */
-    private static void filterProperties(Properties properties) {
+    private static void removeMavenPluginSpecificPropertiesToAvoidWarnings(Properties properties) {
         properties.remove("flyway.configFile");
         properties.remove("flyway.current");
         properties.remove("flyway.version");

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -550,6 +550,8 @@ public final void execute() throws MojoExecutionException, MojoFailureException
     private static void filterProperties(Properties properties) {
         properties.remove("flyway.configFile");
         properties.remove("flyway.current");
+        properties.remove("flyway.version");
+        properties.remove("flyway.serverId");
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/android/AndroidScanner.java
Patch:
@@ -17,7 +17,6 @@
 
 import android.content.Context;
 import dalvik.system.DexFile;
-import dalvik.system.PathClassLoader;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.android.ContextHolder;
 import org.flywaydb.core.internal.util.ClassUtils;
@@ -40,10 +39,10 @@ public class AndroidScanner implements ResourceAndClassScanner {
 
     private final Context context;
 
-    private final PathClassLoader classLoader;
+    private final ClassLoader classLoader;
 
     public AndroidScanner(ClassLoader classLoader) {
-        this.classLoader = (PathClassLoader) classLoader;
+        this.classLoader = classLoader;
         context = ContextHolder.getContext();
         if (context == null) {
             throw new FlywayException("Unable to scan for Migrations! Context not set. " +

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/android/AndroidScanner.java
Patch:
@@ -17,7 +17,6 @@
 
 import android.content.Context;
 import dalvik.system.DexFile;
-import dalvik.system.PathClassLoader;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.android.ContextHolder;
 import org.flywaydb.core.internal.util.ClassUtils;
@@ -40,10 +39,10 @@ public class AndroidScanner implements ResourceAndClassScanner {
 
     private final Context context;
 
-    private final PathClassLoader classLoader;
+    private final ClassLoader classLoader;
 
     public AndroidScanner(ClassLoader classLoader) {
-        this.classLoader = (PathClassLoader) classLoader;
+        this.classLoader = classLoader;
         context = ContextHolder.getContext();
         if (context == null) {
             throw new FlywayException("Unable to scan for Migrations! Context not set. " +

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -254,7 +254,7 @@ private static void printUsage() {
         LOG.info("baselineVersion              : Version to tag schema with when executing baseline");
         LOG.info("baselineDescription          : Description to tag schema with when executing baseline");
         LOG.info("baselineOnMigrate            : Baseline on migrate against uninitialized non-empty schema");
-        LOG.info("configFile                   : Config file to use (default: ./flyway.conf)");
+        LOG.info("configFile                   : Config file to use (default: <install-dir>/conf/flyway.conf)");
         LOG.info("configFileEncoding           : Encoding of the config file (default: UTF-8)");
         LOG.info("jarDirs                      : Dirs for Jdbc drivers & Java migrations (default: jars)");
         LOG.info("");
@@ -371,7 +371,7 @@ static void loadConfiguration(Properties properties, String[] args) {
 
     /**
      * Loads the configuration from the configuration file. If a configuration file is specified using the -configfile
-     * argument it will be used, otherwise the default config file (./flyway.conf) will be loaded.
+     * argument it will be used, otherwise the default config file (<install-dir>/conf/flyway.conf) will be loaded.
      *
      * @param properties    The properties object to load to configuration into.
      * @param file          The configuration file to load.

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoServiceImpl.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.TreeMap;
 
@@ -189,7 +190,7 @@ List<MigrationInfoImpl> mergeAvailableAndAppliedMigrations(Collection<ResolvedMi
         Set<ResolvedMigration> pendingResolvedRepeatableMigrations = new HashSet<ResolvedMigration>(resolvedRepeatableMigrationsMap.values());
         for (AppliedMigration appliedRepeatableMigration : appliedRepeatableMigrations) {
             ResolvedMigration resolvedMigration = resolvedRepeatableMigrationsMap.get(appliedRepeatableMigration.getDescription());
-            if (resolvedMigration != null) {
+            if (resolvedMigration != null && Objects.equals(appliedRepeatableMigration.getChecksum(), resolvedMigration.getChecksum())) {
                 pendingResolvedRepeatableMigrations.remove(resolvedMigration);
             }
             if (!context.latestRepeatableRuns.containsKey(appliedRepeatableMigration.getDescription())
@@ -226,8 +227,7 @@ public MigrationInfo current() {
     public MigrationInfoImpl[] pending() {
         List<MigrationInfoImpl> pendingMigrations = new ArrayList<MigrationInfoImpl>();
         for (MigrationInfoImpl migrationInfo : migrationInfos) {
-            if (MigrationState.PENDING == migrationInfo.getState()
-                    || MigrationState.OUTDATED == migrationInfo.getState()) {
+            if (MigrationState.PENDING == migrationInfo.getState()) {
                 pendingMigrations.add(migrationInfo);
             }
         }

File: flyway-core/src/test/java/org/flywaydb/core/FlywayMediumTest.java
Patch:
@@ -394,8 +394,10 @@ public void repeatable() {
 
         Flyway flyway = new Flyway();
         flyway.setDataSource(dataSource);
+        flyway.setLocations("migration/sql");
+        assertEquals(4, flyway.migrate());
         flyway.setLocations("migration/sql", "migration/repeatable");
-        assertEquals(6, flyway.migrate());
+        assertEquals(2, flyway.migrate());
         assertEquals(0, flyway.info().pending().length);
 
         for (MigrationInfo migrationInfo : flyway.info().all()) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -299,10 +299,10 @@ public int compareTo(MigrationInfo o) {
             return getVersion().compareTo(o.getVersion());
         }
         if (getVersion() != null) {
-            return Integer.MIN_VALUE;
+            return Integer.MAX_VALUE;
         }
         if (o.getVersion() != null) {
-            return Integer.MAX_VALUE;
+            return Integer.MIN_VALUE;
         }
 
         return getDescription().compareTo(o.getDescription());

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -548,6 +548,7 @@ public final void execute() throws MojoExecutionException, MojoFailureException
      * @param properties The properties to filter.
      */
     private static void filterProperties(Properties properties) {
+        properties.remove("flyway.configFile");
         properties.remove("flyway.current");
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptFlywayCallback.java
Patch:
@@ -61,7 +61,7 @@ public class SqlScriptFlywayCallback implements FlywayCallback {
             BEFORE_VALIDATE, AFTER_VALIDATE,
             BEFORE_BASELINE, AFTER_BASELINE,
             BEFORE_REPAIR, AFTER_REPAIR,
-            BEFORE_CLEAN, AFTER_CLEAN);
+            BEFORE_INFO, AFTER_INFO);
 
     private final Map<String, SqlScript> scripts = new HashMap<String, SqlScript>();
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -52,7 +52,7 @@ protected String doGetCurrentSchemaName() throws SQLException {
 
     @Override
     protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
-        jdbcTemplate.execute("ALTER SESSION SET CURRENT_SCHEMA=" + schema);
+        jdbcTemplate.execute("ALTER SESSION SET CURRENT_SCHEMA=" + quote(schema));
     }
 
     public boolean supportsDdlTransactions() {

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -399,14 +399,14 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      * @required
      * @readonly
      */
-    private Settings settings;
+    /* private -> for testing */ Settings settings;
 
     /**
      * Reference to the current project that includes the Flyway Maven plugin.
      *
      * @parameter property="project" required="true"
      */
-    protected MavenProject mavenProject;
+    /* private -> for testing */ MavenProject mavenProject;
 
     /**
      * Load username password from settings

File: flyway-maven-plugin/src/test/java/org/flywaydb/maven/AbstractFlywayMojoSmallTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.flywaydb.maven;
 
+import org.apache.maven.settings.DefaultMavenSettingsBuilder;
 import org.flywaydb.core.Flyway;
 import org.apache.maven.project.MavenProject;
 import org.h2.Driver;
@@ -52,6 +53,7 @@ protected void doExecute(Flyway flyway) throws Exception {
         mojo.driver = Driver.class.getName();
         mojo.url = "jdbc:h2:mem:dummy";
         mojo.user = "sa";
+        mojo.settings = new DefaultMavenSettingsBuilder().buildSettings();
         mojo.mavenProject = new MavenProject();
         mojo.mavenProject.setBasedir(new File("."));
         mojo.mavenProject.getProperties().setProperty("flyway.schemas", "first,second");

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -414,8 +414,8 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      * @throws FlywayException when the credentials could not be loaded.
      */
     private void loadCredentialsFromSettings() throws FlywayException {
+        final Server server = settings.getServer(serverId);
         if (user == null) {
-            final Server server = settings.getServer(serverId);
             if (server != null) {
                 user = server.getUsername();
                 try {
@@ -429,6 +429,8 @@ private void loadCredentialsFromSettings() throws FlywayException {
                     throw new FlywayException("Unable to initialize password decryption", e);
                 }
             }
+        } else if (server != null) {
+            throw new FlywayException("You specified credentials both in the Flyway config and settings.xml. Use either one or the other");
         }
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -343,17 +343,16 @@ public Object doInTransaction() throws SQLException {
     }
 
     private void doMigrate(MigrationInfoImpl migration, MigrationExecutor migrationExecutor, String migrationText) throws SQLException {
+        dbSupportUserObjects.changeCurrentSchemaTo(schema);
+
         for (final FlywayCallback callback : callbacks) {
-            dbSupportUserObjects.changeCurrentSchemaTo(schema);
             callback.beforeEachMigrate(connectionUserObjects, migration);
         }
 
-        dbSupportUserObjects.changeCurrentSchemaTo(schema);
         migrationExecutor.execute(connectionUserObjects);
         LOG.debug("Successfully completed migration of " + migrationText);
 
         for (final FlywayCallback callback : callbacks) {
-            dbSupportUserObjects.changeCurrentSchemaTo(schema);
             callback.afterEachMigrate(connectionUserObjects, migration);
         }
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathScanner.java
Patch:
@@ -188,7 +188,7 @@ private List<URL> getLocationUrlsForPath(Location location) throws IOException {
 
         if (classLoader.getClass().getName().startsWith("com.ibm")) {
             // WebSphere
-            Enumeration<URL> urls = classLoader.getResources(location + "/flyway.location");
+            Enumeration<URL> urls = classLoader.getResources(location.getPath() + "/flyway.location");
             if (!urls.hasMoreElements()) {
                 LOG.warn("Unable to resolve location " + location + " (ClassLoader: " + classLoader + ")"
                         + " On WebSphere an empty file named flyway.location must be present on the classpath location for WebSphere to find it!");

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/sqlserver/SQLServerSchema.java
Patch:
@@ -80,7 +80,7 @@ protected void doClean() throws SQLException {
             jdbcTemplate.execute(statement);
         }
 
-        for (String statement : cleanRoutines("procedure")) {
+        for (String statement : cleanRoutines("PROCEDURE")) {
             jdbcTemplate.execute(statement);
         }
 
@@ -92,7 +92,7 @@ protected void doClean() throws SQLException {
             table.drop();
         }
 
-        for (String statement : cleanRoutines("function")) {
+        for (String statement : cleanRoutines("FUNCTION")) {
             jdbcTemplate.execute(statement);
         }
 

File: flyway-core/src/test/java/org/flywaydb/core/FlywayMediumTest.java
Patch:
@@ -379,7 +379,7 @@ public void outOfOrder() {
         flyway.setValidateOnMigrate(true);
         flyway.setTarget(MigrationVersion.LATEST);
         flyway.setOutOfOrder(true);
-        assertEquals(MigrationState.PENDING, flyway.info().all()[2].getState());
+        assertEquals(MigrationState.PENDING, flyway.info().all()[3].getState());
         assertEquals(2, flyway.migrate());
 
         MigrationInfo[] all = flyway.info().all();

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/enterprisedb/EnterpriseDBSqlScriptSmallTest.java
Patch:
@@ -80,7 +80,7 @@ public void parsePackages() throws Exception {
         List<SqlStatement> sqlStatements = sqlScript.getSqlStatements();
         assertEquals(3, sqlStatements.size());
         assertEquals(16, sqlStatements.get(0).getLineNumber());
-        assertEquals(27, sqlStatements.get(1).getLineNumber());
+        assertEquals(26, sqlStatements.get(1).getLineNumber());
     }
 
     @Test

File: flyway-core/src/test/java/org/flywaydb/core/DbCategory.java
Patch:
@@ -40,6 +40,7 @@ public interface PostgreSQL extends OpenSourceDB {}
     public interface DB2 extends CommercialDB {}
     public interface Oracle extends CommercialDB {}
     public interface SQLServer extends CommercialDB {}
+    public interface EnterpriseDB extends CommercialDB {}
 
     public interface GoogleCloudSQL extends ContributorSupportedDB {}
     public interface SapHana extends ContributorSupportedDB {}

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/SqlStatementBuilder.java
Patch:
@@ -77,7 +77,7 @@ public class SqlStatementBuilder {
     /**
      * The current delimiter to look for to terminate the statement.
      */
-    private Delimiter delimiter = getDefaultDelimiter();
+    protected Delimiter delimiter = getDefaultDelimiter();
 
     /**
      * @return The default delimiter for this database.

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/mysql/MySQLSqlStatementBuilder.java
Patch:
@@ -75,8 +75,8 @@ public boolean isCommentDirective(String line) {
     }
 
     @Override
-    protected boolean isSingleLineComment(String line) {
-        return line.startsWith("--") || line.startsWith("#");
+    protected boolean isSingleLineComment(String token) {
+        return token.startsWith("--") || (token.startsWith("#") && !("#".equals(delimiter.getDelimiter()) && "#".equals(token)));
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLSchema.java
Patch:
@@ -112,9 +112,6 @@ protected void doClean() throws SQLException {
             jdbcTemplate.execute(statement);
         }
 
-        for (Type type : allTypes()) {
-            type.drop();
-        }
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/FeatureDetector.java
Patch:
@@ -148,7 +148,7 @@ public boolean isJBossVFSv3Available() {
      */
     public boolean isOsgiFrameworkAvailable() {
         if (osgiFrameworkAvailable == null) {
-            osgiFrameworkAvailable = ClassUtils.isPresent("org.osgi.framework.Bundle", classLoader);
+            osgiFrameworkAvailable = ClassUtils.isPresent("org.osgi.framework.Bundle", FeatureDetector.class.getClassLoader());
             LOG.debug("OSGi framework available: " + osgiFrameworkAvailable);
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/DbSupportFactory.java
Patch:
@@ -131,7 +131,7 @@ public static DbSupport createDbSupport(Connection connection, boolean printInfo
         }
 
 		//Sybase ASE support
-        if (databaseProductName.startsWith("ASE")) {
+        if (databaseProductName.startsWith("ASE") || databaseProductName.startsWith("Adaptive")) {
         	return new SybaseASEDbSupport(connection);
         }
         if (databaseProductName.startsWith("HDB")) {

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -415,7 +415,7 @@ private static void promptForCredentialsIfMissing(Properties properties) {
             return;
         }
 
-        if (!properties.contains("flyway.url")) {
+        if (!properties.containsKey("flyway.url")) {
             // URL is not set. We are doomed for failure anyway.
             return;
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLSchema.java
Patch:
@@ -112,9 +112,6 @@ protected void doClean() throws SQLException {
             jdbcTemplate.execute(statement);
         }
 
-        for (Type type : allTypes()) {
-            type.drop();
-        }
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/DbSupportFactory.java
Patch:
@@ -131,7 +131,7 @@ public static DbSupport createDbSupport(Connection connection, boolean printInfo
         }
 
 		//Sybase ASE support
-        if (databaseProductName.startsWith("Adaptive Server Enterprise")) {
+        if (databaseProductName.startsWith("ASE") || databaseProductName.startsWith("Adaptive")) {
         	return new SybaseASEDbSupport(connection);
         }
         if (databaseProductName.startsWith("HDB")) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/callback/SqlScriptFlywayCallback.java
Patch:
@@ -81,6 +81,7 @@ public SqlScriptFlywayCallback(DbSupport dbSupport, Scanner scanner, Locations l
             scripts.put(callback, null);
         }
 
+        LOG.debug("Scanning for SQL callbacks ...");
         for (Location location : locations.getLocations()) {
             Resource[] resources;
             try {

File: flyway-ant-largetest/src/test/java/org/flywaydb/ant/AntLargeTest.java
Patch:
@@ -66,9 +66,9 @@ public void jars() throws Exception {
     @Test
     public void multi() throws Exception {
         String stdOut = runAnt(0, "multi");
-        assertTrue(stdOut.contains("Cleaned schema \"FLYWAY_1\""));
-        assertTrue(stdOut.contains("Cleaned schema \"FLYWAY_2\""));
-        assertTrue(stdOut.contains("Cleaned schema \"FLYWAY_3\""));
+        assertTrue(stdOut.contains("Successfully cleaned schema \"FLYWAY_1\""));
+        assertTrue(stdOut.contains("Successfully cleaned schema \"FLYWAY_2\""));
+        assertTrue(stdOut.contains("Successfully cleaned schema \"FLYWAY_3\""));
         assertTrue(stdOut.contains("Creating Metadata table: \"FLYWAY_1\".\"MASTER_OF_THE_VERSIONS\""));
         assertTrue(stdOut.contains("Successfully applied 3 migrations"));
     }

File: flyway-commandline-largetest/src/test/java/org/flywaydb/commandline/largetest/CommandLineLargeTest.java
Patch:
@@ -48,7 +48,7 @@ public void migrate() throws Exception {
     @Test
     public void multipleCommands() throws Exception {
         String stdOut = runFlywayCommandLine(0, "largeTest.properties", "clean", "migrate");
-        assertTrue(stdOut.contains("Cleaned schema"));
+        assertTrue(stdOut.contains("Successfully cleaned schema"));
         assertTrue(stdOut.contains("Successfully applied 4 migrations"));
     }
 

File: flyway-gradle-plugin-largetest/src/test/java/org/flywaydb/gradle/largetest/GradleLargeTest.java
Patch:
@@ -49,7 +49,7 @@ public void regular() throws Exception {
     @Test
     public void error() throws Exception {
         String stdOut = runGradle(0, "error", "clean", "flywayMigrate");
-        assertTrue(stdOut.contains("Validated 0 migrations"));
+        assertTrue(stdOut.contains("Successfully validated 0 migrations"));
         assertTrue(stdOut.contains("Unable to resolve location"));
     }
 

File: flyway-maven-plugin-largetest/src/test/java/org/flywaydb/maven/largetest/MavenTestCase.java
Patch:
@@ -61,7 +61,7 @@ public void migrate() throws Exception {
     @Test
     public void executions() throws Exception {
         String stdOut = runMaven(0, "executions", "clean", "install", "-Dflyway.user=SA");
-        assertTrue(stdOut.contains("[INFO] Cleaned schema \"PUBLIC\""));
+        assertTrue(stdOut.contains("[INFO] Successfully cleaned schema \"PUBLIC\""));
         assertTrue(stdOut.contains("[echo] Property: flyway.current = 1.1"));
     }
 
@@ -107,7 +107,7 @@ public void settingsEncrypted() throws Exception {
         String stdOut = runMaven(0, "settings-encrypted", "clean", "sql:execute", "flyway:baseline",
                 "-s=" + dir + "/settings.xml",
                 "-Dsettings.security=" + dir + "/settings-security.xml");
-        assertTrue(stdOut.contains("Schema baselined with version: 1"));
+        assertTrue(stdOut.contains("Successfully baselined schema with version: 1"));
     }
 
     @Test

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLMigrationMediumTest.java
Patch:
@@ -381,7 +381,7 @@ public void warning() {
     }
 
     @Override
-    public void upgradeMetadataTableTo40Format() throws Exception {
+    protected void createFlyway3MetadataTable() throws Exception {
         jdbcTemplate.execute("CREATE TABLE \"schema_version\" (\n" +
                 "    \"version_rank\" INT NOT NULL,\n" +
                 "    \"installed_rank\" INT NOT NULL,\n" +

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -108,7 +108,7 @@ public void tearDown() throws Exception {
     protected void createFlyway3MetadataTable() throws Exception {
     }
 
-    private void insertIntoFlyway3MetadataTable(JdbcTemplate jdbcTemplate, int versionRank, int installedRank, String version, String description, String type, String script, Integer checksum, String installedBy, int executionTime, String success) throws SQLException {
+    private void insertIntoFlyway3MetadataTable(JdbcTemplate jdbcTemplate, int versionRank, int installedRank, String version, String description, String type, String script, Integer checksum, String installedBy, int executionTime, boolean success) throws SQLException {
         jdbcTemplate.execute("INSERT INTO " + dbSupport.quote("schema_version")
                 + " (" + dbSupport.quote("version_rank")
                 + "," + dbSupport.quote("installed_rank")
@@ -132,8 +132,8 @@ public void upgradeMetadataTableTo40Format() throws Exception {
                 "  name VARCHAR(25) NOT NULL,\n" +
                 "  PRIMARY KEY(name)\n" +
                 ")");
-        insertIntoFlyway3MetadataTable(jdbcTemplate, 1, 1, "0.1", "<< INIT >>", "INIT", "<< INIT >>", null, "flyway3", 0, dbSupport.getBooleanTrue());
-        insertIntoFlyway3MetadataTable(jdbcTemplate, 2, 2, "1", "First", "SQL", "V1__First.sql", 1234, "flyway3", 15, dbSupport.getBooleanTrue());
+        insertIntoFlyway3MetadataTable(jdbcTemplate, 1, 1, "0.1", "<< INIT >>", "INIT", "<< INIT >>", null, "flyway3", 0, true);
+        insertIntoFlyway3MetadataTable(jdbcTemplate, 2, 2, "1", "First", "SQL", "V1__First.sql", 1234, "flyway3", 15, true);
         flyway.setLocations(getBasedir());
         assertEquals(3, flyway.migrate());
         flyway.validate();

File: flyway-core/src/test/java/org/flywaydb/core/FlywaySmallTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.internal.dbsupport.DbSupport;
 import org.flywaydb.core.internal.dbsupport.Schema;
+import org.flywaydb.core.internal.metadatatable.MetaDataTable;
 import org.flywaydb.core.internal.resolver.MyCustomMigrationResolver;
 import org.flywaydb.core.internal.util.jdbc.DriverDataSource;
 import org.junit.Test;
@@ -48,7 +49,7 @@ public void configure() {
         assertNotNull(flyway.getDataSource());
 
         flyway.execute(new Flyway.Command<Void>() {
-            public Void execute(Connection connectionMetaDataTable, Connection connectionUserObjects, MigrationResolver migrationResolver, DbSupport dbSupport, Schema[] schemas, FlywayCallback[] flywayCallbacks) {
+            public Void execute(Connection connectionMetaDataTable, Connection connectionUserObjects, MigrationResolver migrationResolver, MetaDataTable metaDataTable, DbSupport dbSupport, Schema[] schemas, FlywayCallback[] flywayCallbacks) {
                 assertEquals("PUBLIC", flyway.getSchemas()[0]);
                 return null;
             }

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -343,6 +343,7 @@ public void futureFailedMigration() throws Exception {
             //Expected
         }
 
+        flyway.setIgnoreFutureMigrations(false);
         flyway.setLocations(getBasedir());
         if (dbSupport.supportsDdlTransactions()) {
             flyway.migrate();

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -246,6 +246,7 @@ private static void printUsage() {
         LOG.info("callbacks                    : Comma-separated list of FlywayCallback classes");
         LOG.info("skipDefaultCallbacks         : Skips default callbacks (sql)");
         LOG.info("validateOnMigrate            : Validate when running migrate");
+        LOG.info("ignoreFutureMigrations       : Allow future migrations when validating");
         LOG.info("cleanOnValidationError       : Automatically clean on a validation error");
         LOG.info("cleanDisabled                : Whether to disable clean");
         LOG.info("baselineVersion              : Version to tag schema with when executing baseline");

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbRepair.java
Patch:
@@ -89,7 +89,7 @@ public DbRepair(DbSupport dbSupport, Connection connection, Schema schema, Migra
         this.dbSupport = dbSupport;
         this.connection = connection;
         this.schema = schema;
-        this.migrationInfoService = new MigrationInfoServiceImpl(migrationResolver, metaDataTable, MigrationVersion.LATEST, true, true);
+        this.migrationInfoService = new MigrationInfoServiceImpl(migrationResolver, metaDataTable, MigrationVersion.LATEST, true, true, true);
         this.metaDataTable = metaDataTable;
         this.callbacks = callbacks;
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -213,12 +213,12 @@ public String validate() {
                 && (appliedMigration.getType() != MigrationType.SCHEMA)
                 && (appliedMigration.getType() != MigrationType.BASELINE)
                 && (appliedMigration.getVersion() != null)
-                && (!context.pendingOrFuture ||
+                && (!context.future ||
                 (MigrationState.FUTURE_SUCCESS != getState() && MigrationState.FUTURE_FAILED != getState()))) {
             return "Detected applied migration not resolved locally: " + getVersion();
         }
 
-        if (!context.pendingOrFuture) {
+        if (!context.pending) {
             if (MigrationState.PENDING == getState() || MigrationState.IGNORED == getState()) {
                 if (getVersion() != null) {
                     return "Detected resolved migration not applied to database: " + getVersion();
@@ -243,7 +243,7 @@ public String validate() {
                             appliedMigration.getType(), resolvedMigration.getType());
                 }
                 if (resolvedMigration.getVersion() != null
-                        || (context.pendingOrFuture &&
+                        || (context.pending &&
                         ((MigrationState.OUTDATED != getState()) && (MigrationState.SUPERSEEDED != getState())))) {
                     if (!ObjectUtils.nullSafeEquals(resolvedMigration.getChecksum(), appliedMigration.getChecksum())) {
                         return createMismatchMessage("checksum", migrationIdentifier,

File: flyway-core/src/test/java/org/flywaydb/core/internal/info/MigrationInfoDumperSmallTest.java
Patch:
@@ -54,7 +54,7 @@ public void dump2pending() {
         MigrationInfoServiceImpl migrationInfoService =
                 new MigrationInfoServiceImpl(
                         createMigrationResolver(createAvailableMigration("1"), createAvailableMigration("2.2014.09.11.55.45613")),
-                        createMetaDataTable(), MigrationVersion.LATEST, false, true);
+                        createMetaDataTable(), MigrationVersion.LATEST, false, true, true);
         migrationInfoService.refresh();
 
         String table = MigrationInfoDumper.dumpToAsciiTable(migrationInfoService.all());

File: flyway-core/src/test/java/org/flywaydb/core/FlywayMediumTest.java
Patch:
@@ -464,10 +464,10 @@ public void validateApplied() {
     public void validateMissing() {
         Flyway flyway = new Flyway();
         flyway.setDataSource("jdbc:h2:mem:flyway_validate_missing;DB_CLOSE_DELAY=-1", "sa", "");
+        flyway.setLocations("migration/sql", "migration/outoforder");
+        flyway.migrate();
         flyway.setLocations("migration/sql");
         flyway.migrate();
-        flyway.setLocations("migration/empty");
-        flyway.validate();
     }
 
     @Test

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLDbSupport.java
Patch:
@@ -62,9 +62,9 @@ public Schema getOriginalSchema() {
             result = result.substring(1);
         }
         if (result.contains(",")) {
-            return getSchema(result.substring(0, result.indexOf(",")));
+            result = result.substring(0, result.indexOf(","));
         }
-        return getSchema(result);
+        return getSchema(result.trim());
     }
 
     @Override

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -244,6 +244,7 @@ private static void printUsage() {
         LOG.info("target                       : Target version up to which Flyway should use migrations");
         LOG.info("outOfOrder                   : Allows migrations to be run \"out of order\"");
         LOG.info("callbacks                    : Comma-separated list of FlywayCallback classes");
+        LOG.info("skipDefaultCallbacks         : Skips default callbacks (sql)");
         LOG.info("validateOnMigrate            : Validate when running migrate");
         LOG.info("cleanOnValidationError       : Automatically clean on a validation error");
         LOG.info("cleanDisabled                : Whether to disable clean");

File: flyway-core/src/test/java/org/flywaydb/core/FlywaySmallTest.java
Patch:
@@ -16,16 +16,15 @@
 package org.flywaydb.core;
 
 import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.api.callback.FlywayCallback;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.internal.dbsupport.DbSupport;
 import org.flywaydb.core.internal.dbsupport.Schema;
-import org.flywaydb.core.internal.resolver.MyConfigurationAwareCustomMigrationResolver;
 import org.flywaydb.core.internal.resolver.MyCustomMigrationResolver;
 import org.flywaydb.core.internal.util.jdbc.DriverDataSource;
 import org.junit.Test;
 
 import javax.sql.DataSource;
-
 import java.sql.Connection;
 import java.util.Properties;
 
@@ -49,7 +48,7 @@ public void configure() {
         assertNotNull(flyway.getDataSource());
 
         flyway.execute(new Flyway.Command<Void>() {
-            public Void execute(Connection connectionMetaDataTable, Connection connectionUserObjects, MigrationResolver migrationResolver, DbSupport dbSupport, Schema[] schemas) {
+            public Void execute(Connection connectionMetaDataTable, Connection connectionUserObjects, MigrationResolver migrationResolver, DbSupport dbSupport, Schema[] schemas, FlywayCallback[] flywayCallbacks) {
                 assertEquals("PUBLIC", flyway.getSchemas()[0]);
                 return null;
             }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -231,6 +231,7 @@ private static void printUsage() {
         LOG.info("table                        : Name of Flyway's metadata table");
         LOG.info("locations                    : Classpath locations to scan recursively for migrations");
         LOG.info("resolvers                    : Comma-separated list of custom MigrationResolvers");
+        LOG.info("skipDefaultResolvers         : Skips default resolvers (jdbc, sql and Spring-jdbc)");
         LOG.info("sqlMigrationPrefix           : File name prefix for sql migrations");
         LOG.info("repeatableSqlMigrationPrefix : File name prefix for repeatable sql migrations");
         LOG.info("sqlMigrationSeparator        : File name separator for sql migrations");

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -231,6 +231,7 @@ private static void printUsage() {
         LOG.info("table                        : Name of Flyway's metadata table");
         LOG.info("locations                    : Classpath locations to scan recursively for migrations");
         LOG.info("resolvers                    : Comma-separated list of custom MigrationResolvers");
+        LOG.info("skipDefaultResolvers         : Skips default resolvers (jdbc, sql and Spring-jdbc)");
         LOG.info("sqlMigrationPrefix           : File name prefix for sql migrations");
         LOG.info("repeatableSqlMigrationPrefix : File name prefix for repeatable sql migrations");
         LOG.info("sqlMigrationSeparator        : File name separator for sql migrations");

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.flywaydb.core.api.*;
 import org.flywaydb.core.api.callback.FlywayCallback;
+import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.internal.callback.SqlScriptFlywayCallback;
 import org.flywaydb.core.internal.command.DbBaseline;

File: flyway-core/src/main/java/org/flywaydb/core/api/configuration/FlywayConfiguration.java
Patch:
@@ -13,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.api;
+package org.flywaydb.core.api.configuration;
 
+import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.api.callback.FlywayCallback;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/CompositeMigrationResolver.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.resolver;
 
-import org.flywaydb.core.api.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.api.resolver.ResolvedMigration;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationResolver.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.resolver.jdbc;
 
-import org.flywaydb.core.api.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.MigrationType;
 import org.flywaydb.core.api.MigrationVersion;

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/spring/SpringJdbcMigrationResolver.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.resolver.spring;
 
-import org.flywaydb.core.api.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.MigrationType;
 import org.flywaydb.core.api.MigrationVersion;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/ClassUtils.java
Patch:
@@ -15,8 +15,6 @@
  */
 package org.flywaydb.core.internal.util;
 
-import org.flywaydb.core.api.ConfigurationAware;
-import org.flywaydb.core.api.FlywayConfiguration;
 import org.flywaydb.core.api.FlywayException;
 
 import java.io.UnsupportedEncodingException;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/ConfigurationInjectionUtils.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.util;
 
-import org.flywaydb.core.api.ConfigurationAware;
-import org.flywaydb.core.api.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.ConfigurationAware;
+import org.flywaydb.core.api.configuration.FlywayConfiguration;
 
 /**
  * Utility class for interfaced based injection.

File: flyway-core/src/test/java/org/flywaydb/core/FlywayCallbackImpl.java
Patch:
@@ -20,8 +20,8 @@
 import java.sql.Connection;
 
 import org.flywaydb.core.api.callback.FlywayCallback;
-import org.flywaydb.core.api.ConfigurationAware;
-import org.flywaydb.core.api.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.ConfigurationAware;
+import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.MigrationInfo;
 
 /**

File: flyway-core/src/test/java/org/flywaydb/core/FlywayResolverImpl.java
Patch:
@@ -15,11 +15,10 @@
  */
 package org.flywaydb.core;
 
-import org.flywaydb.core.api.ConfigurationAware;
-import org.flywaydb.core.api.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.ConfigurationAware;
+import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
-import org.junit.Assert;
 
 import java.util.Collection;
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationResolverSmallTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.resolver.jdbc;
 
-import org.flywaydb.core.api.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.resolver.FlywayConfigurationForTests;

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/jdbc/dummy/V2__InterfaceBasedMigration.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.flywaydb.core.internal.resolver.jdbc.dummy;
 
-import org.flywaydb.core.api.ConfigurationAware;
-import org.flywaydb.core.api.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.ConfigurationAware;
+import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.migration.jdbc.JdbcMigration;
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/spring/SpringJdbcMigrationResolverSmallTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.internal.resolver.spring;
 
-import org.flywaydb.core.api.FlywayConfiguration;
+import org.flywaydb.core.api.configuration.FlywayConfiguration;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.resolver.FlywayConfigurationForTests;
 import org.flywaydb.core.internal.resolver.spring.dummy.V2__InterfaceBasedMigration;

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolverMediumTest.java
Patch:
@@ -15,9 +15,7 @@
  */
 package org.flywaydb.core.internal.resolver.sql;
 
-import org.flywaydb.core.api.FlywayConfiguration;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
-import org.flywaydb.core.internal.resolver.FlywayConfigurationForTests;
 import org.flywaydb.core.internal.util.Location;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.Scanner;

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolverSmallTest.java
Patch:
@@ -15,10 +15,7 @@
  */
 package org.flywaydb.core.internal.resolver.sql;
 
-import org.flywaydb.core.api.FlywayConfiguration;
-import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
-import org.flywaydb.core.internal.resolver.FlywayConfigurationForTests;
 import org.flywaydb.core.internal.util.Location;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.flywaydb.core.internal.util.scanner.Scanner;

File: flyway-core/src/test/java/org/flywaydb/core/DbCategory.java
Patch:
@@ -40,8 +40,8 @@ public interface PostgreSQL extends OpenSourceDB {}
     public interface DB2 extends CommercialDB {}
     public interface Oracle extends CommercialDB {}
     public interface SQLServer extends CommercialDB {}
-    public interface GoogleCloudSQL extends CommercialDB {}
 
+    public interface GoogleCloudSQL extends ContributorSupportedDB {}
     public interface SapHana extends ContributorSupportedDB {}
     public interface DB2zOS extends ContributorSupportedDB {}
     public interface Vertica extends ContributorSupportedDB {}

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/DriverDataSource.java
Patch:
@@ -228,7 +228,7 @@ private String detectDriverForUrl(String url) {
         }
 
         if (url.startsWith("jdbc:google:")) {
-            return "com.google.appengine.api.rdbms.AppEngineDriver";
+            return "com.mysql.jdbc.GoogleDriver";
         }
 
         if (url.startsWith(ORACLE_JDBC_URL_PREFIX)) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/DriverDataSource.java
Patch:
@@ -228,7 +228,7 @@ private String detectDriverForUrl(String url) {
         }
 
         if (url.startsWith("jdbc:google:")) {
-            return "com.google.appengine.api.rdbms.AppEngineDriver";
+            return "com.mysql.jdbc.GoogleDriver";
         }
 
         if (url.startsWith(ORACLE_JDBC_URL_PREFIX)) {

File: flyway-core/src/test/java/org/flywaydb/core/FlywayMediumTest.java
Patch:
@@ -92,7 +92,7 @@ public void info() throws Exception {
         assertEquals(MigrationState.ABOVE_TARGET, flyway.info().all()[3].getState());
 
         flyway.migrate();
-        assertEquals(-976972276, flyway.info().current().getChecksum().intValue());
+        assertEquals(-722178914, flyway.info().current().getChecksum().intValue());
         assertEquals("1.1", flyway.info().current().getVersion().toString());
         assertEquals(MigrationState.SUCCESS, flyway.info().current().getState());
         assertEquals(4, flyway.info().all().length);

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolverSmallTest.java
Patch:
@@ -60,7 +60,7 @@ public void resolveMigrations() {
     public void resolveMigrationsRoot() {
         SqlMigrationResolver sqlMigrationResolver =
                 new SqlMigrationResolver(null, scanner, new Location(""),
-                        PlaceholderReplacer.NO_PLACEHOLDERS, "UTF-8", "CheckValidate", "R", "__", ".sql");
+                        PlaceholderReplacer.NO_PLACEHOLDERS, "UTF-8", "CheckValidate", "X", "__", ".sql");
 
         //changed to 2 as new test cases are added for SybaseASE
         assertEquals(2, sqlMigrationResolver.resolveMigrations().size());

File: flyway-commandline-largetest/src/test/java/org/flywaydb/commandline/largetest/CommandLineLargeTest.java
Patch:
@@ -81,7 +81,7 @@ public void infoWithCallback() throws Exception {
     @Test
     public void exitCodeForFailedMigration() throws Exception {
         String stdOut = runFlywayCommandLine(1, "largeTest.properties", "migrate", "-locations=filesystem:sql/invalid");
-        assertTrue(stdOut.contains("Migration of schema \"PUBLIC\" to version 1 failed!"));
+        assertTrue(stdOut.contains("Migration of schema \"PUBLIC\" to version 1 - Invalid failed!"));
         assertTrue(stdOut.contains("17"));
         assertTrue(stdOut.contains("InVaLiD SqL !!!"));
     }

File: flyway-core/src/test/java/org/flywaydb/core/FlywayMediumTest.java
Patch:
@@ -382,7 +382,8 @@ public void outOfOrder() {
         assertEquals(MigrationState.PENDING, flyway.info().all()[2].getState());
         assertEquals(2, flyway.migrate());
 
-        assertEquals(MigrationState.OUT_OF_ORDER, flyway.info().all()[2].getState());
+        MigrationInfo[] all = flyway.info().all();
+        assertEquals(MigrationState.OUT_OF_ORDER, all[3].getState());
         assertEquals(MigrationState.SUCCESS, flyway.info().all()[4].getState());
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/metadatatable/MetaDataTable.java
Patch:
@@ -44,8 +44,8 @@ public interface MetaDataTable {
     boolean hasAppliedMigrations();
 
     /**
-     * @return The list of all migrations applied on the schema (oldest first). An empty list if no migration has been
-     * applied so far.
+     * @return The list of all migrations applied on the schema in the order they were applied (oldest first).
+     * An empty list if no migration has been applied so far.
      */
     List<AppliedMigration> allAppliedMigrations();
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/info/MigrationInfoServiceImplSmallTest.java
Patch:
@@ -204,7 +204,7 @@ private AppliedMigration createAppliedMigration(int version) {
      * @return The applied migration.
      */
     private AppliedMigration createAppliedMigration(int version, String description) {
-        return new AppliedMigration(version, version, MigrationVersion.fromVersion(Integer.toString(version)), description,
+        return new AppliedMigration(version, MigrationVersion.fromVersion(Integer.toString(version)), description,
                 MigrationType.SQL, "x", null, new Date(), "sa", 123, true);
     }
 
@@ -215,7 +215,7 @@ private AppliedMigration createAppliedMigration(int version, String description)
      * @return The applied baseline migration.
      */
     private AppliedMigration createAppliedBaselineMigration(int version) {
-        return new AppliedMigration(version, version, MigrationVersion.fromVersion(Integer.toString(version)), "abc",
+        return new AppliedMigration(version, MigrationVersion.fromVersion(Integer.toString(version)), "abc",
                 MigrationType.BASELINE, "x", null, new Date(), "sa", 0, true);
     }
 
@@ -225,7 +225,7 @@ private AppliedMigration createAppliedBaselineMigration(int version) {
      * @return The applied schema migration.
      */
     private AppliedMigration createAppliedSchemaMigration() {
-        return new AppliedMigration(0, 0, MigrationVersion.fromVersion(Integer.toString(0)), "<< Schema Creation >>",
+        return new AppliedMigration(0, MigrationVersion.fromVersion(Integer.toString(0)), "<< Schema Creation >>",
                 MigrationType.SCHEMA, "x", null, new Date(), "sa", 0, true);
     }
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/CompositeMigrationResolverSmallTest.java
Patch:
@@ -44,7 +44,7 @@ public void resolveMigrationsMultipleLocations() {
         MigrationResolver migrationResolver = new CompositeMigrationResolver(null,
                 new Scanner(Thread.currentThread().getContextClassLoader()),
                 new Locations("migration/subdir/dir2", "migration.outoforder", "migration/subdir/dir1"),
-                "UTF-8", "V", "__", ".sql", placeholderReplacer, new MyCustomMigrationResolver());
+                "UTF-8", "V", "R", "__", ".sql", placeholderReplacer, new MyCustomMigrationResolver());
 
         Collection<ResolvedMigration> migrations = migrationResolver.resolveMigrations();
         List<ResolvedMigration> migrationList = new ArrayList<ResolvedMigration>(migrations);

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolverMediumTest.java
Patch:
@@ -42,7 +42,7 @@ public void resolveMigrations() throws Exception {
         SqlMigrationResolver sqlMigrationResolver =
                 new SqlMigrationResolver(null, new Scanner(Thread.currentThread().getContextClassLoader()),
                         new Location("filesystem:" + new File(path).getPath()), PlaceholderReplacer.NO_PLACEHOLDERS,
-                        "UTF-8", "V", "__", ".sql");
+                        "UTF-8", "V", "R", "__", ".sql");
         Collection<ResolvedMigration> migrations = sqlMigrationResolver.resolveMigrations();
 
         assertEquals(3, migrations.size());

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -229,7 +229,7 @@ dbSupport, new Scanner(Thread.currentThread().getContextClassLoader()),
                 new Location(getBasedir()),
                 PlaceholderReplacer.NO_PLACEHOLDERS,
                 "UTF-8",
-                "V", "__", ".sql");
+                "V", "R", "__", ".sql");
         List<ResolvedMigration> migrations = sqlMigrationResolver.resolveMigrations();
         for (ResolvedMigration migration : migrations) {
             if (migration.getVersion().toString().equals(migrationInfo.getVersion().toString())) {

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -244,6 +244,7 @@ private static void printUsage() {
         LOG.info("callbacks              : Comma-separated list of FlywayCallback classes");
         LOG.info("validateOnMigrate      : Validate when running migrate");
         LOG.info("cleanOnValidationError : Automatically clean on a validation error");
+        LOG.info("cleanDisabled          : Whether to disable clean");
         LOG.info("baselineVersion        : Version to tag schema with when executing baseline");
         LOG.info("baselineDescription    : Description to tag schema with when executing baseline");
         LOG.info("baselineOnMigrate      : Baseline on migrate against uninitialized non-empty schema");

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -145,7 +145,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
 
     /**
      * Locations on the classpath to scan recursively for migrations. Locations may contain both sql
-     * and java-based migrations. (default: db/migration)
+     * and java-based migrations. (default: filesystem:src/main/resources/db/migration)
      * <p>Also configurable with Maven or System Property: ${flyway.locations} (Comma-separated list)</p>
      *
      * @parameter

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/ResolvedMigrationImpl.java
Patch:
@@ -159,8 +159,6 @@ public boolean equals(Object o) {
         if (checksum != null ? !checksum.equals(migration.checksum) : migration.checksum != null) return false;
         if (description != null ? !description.equals(migration.description) : migration.description != null)
             return false;
-        if (physicalLocation != null ? !physicalLocation.equals(migration.physicalLocation) : migration.physicalLocation != null)
-            return false;
         if (script != null ? !script.equals(migration.script) : migration.script != null) return false;
         if (type != migration.type) return false;
         return version.equals(migration.version);
@@ -173,7 +171,6 @@ public int hashCode() {
         result = 31 * result + (script != null ? script.hashCode() : 0);
         result = 31 * result + (checksum != null ? checksum.hashCode() : 0);
         result = 31 * result + type.hashCode();
-        result = 31 * result + (physicalLocation != null ? physicalLocation.hashCode() : 0);
         return result;
     }
 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolver.java
Patch:
@@ -83,19 +83,19 @@ public class SqlMigrationResolver implements MigrationResolver {
      * Creates a new instance.
      *
      * @param dbSupport             The database-specific support.
-     * @param classLoader           The ClassLoader for loading migrations on the classpath.
+     * @param scanner               The Scanner for loading migrations on the classpath.
      * @param location              The location on the classpath where to migrations are located.
      * @param placeholderReplacer   The placeholder replacer to apply to sql migration scripts.
      * @param encoding              The encoding of Sql migrations.
      * @param sqlMigrationPrefix    The prefix for sql migrations
      * @param sqlMigrationSeparator The separator for sql migrations
      * @param sqlMigrationSuffix    The suffix for sql migrations
      */
-    public SqlMigrationResolver(DbSupport dbSupport, ClassLoader classLoader, Location location,
+    public SqlMigrationResolver(DbSupport dbSupport, Scanner scanner, Location location,
                                 PlaceholderReplacer placeholderReplacer, String encoding,
                                 String sqlMigrationPrefix, String sqlMigrationSeparator, String sqlMigrationSuffix) {
         this.dbSupport = dbSupport;
-        this.scanner = new Scanner(classLoader);
+        this.scanner = scanner;
         this.location = location;
         this.placeholderReplacer = placeholderReplacer;
         this.encoding = encoding;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/android/AndroidResource.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util.scanner.android;
+package org.flywaydb.core.internal.util.scanner.classpath.android;
 
 import android.content.res.AssetManager;
 import org.flywaydb.core.api.FlywayException;

File: flyway-core/src/test/java/org/flywaydb/core/FlywaySmallTest.java
Patch:
@@ -16,6 +16,7 @@
 package org.flywaydb.core;
 
 import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.internal.dbsupport.DbSupport;
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.resolver.MyCustomMigrationResolver;
@@ -46,7 +47,7 @@ public void configure() {
         assertNotNull(flyway.getDataSource());
 
         flyway.execute(new Flyway.Command<Void>() {
-            public Void execute(Connection connectionMetaDataTable, Connection connectionUserObjects, DbSupport dbSupport, Schema[] schemas) {
+            public Void execute(Connection connectionMetaDataTable, Connection connectionUserObjects, MigrationResolver migrationResolver, DbSupport dbSupport, Schema[] schemas) {
                 assertEquals("PUBLIC", flyway.getSchemas()[0]);
                 return null;
             }

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolverMediumTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.internal.util.Location;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.scanner.Scanner;
 import org.junit.Test;
 
 import java.io.File;
@@ -39,7 +40,7 @@ public void resolveMigrations() throws Exception {
         String path = URLDecoder.decode(getClass().getClassLoader().getResource("migration/subdir").getPath(), "UTF-8");
 
         SqlMigrationResolver sqlMigrationResolver =
-                new SqlMigrationResolver(null, Thread.currentThread().getContextClassLoader(),
+                new SqlMigrationResolver(null, new Scanner(Thread.currentThread().getContextClassLoader()),
                         new Location("filesystem:" + new File(path).getPath()), PlaceholderReplacer.NO_PLACEHOLDERS,
                         "UTF-8", "V", "__", ".sql");
         Collection<ResolvedMigration> migrations = sqlMigrationResolver.resolveMigrations();

File: flyway-core/src/test/java/org/flywaydb/core/internal/util/scanner/filesystem/FileSystemScannerMediumTest.java
Patch:
@@ -15,15 +15,15 @@
  */
 package org.flywaydb.core.internal.util.scanner.filesystem;
 
-import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.internal.util.Location;
 import org.junit.Test;
 
 /**
  * Test for FileSystemScanner.
  */
 public class FileSystemScannerMediumTest {
-    @Test(expected = FlywayException.class)
+    @Test
     public void nonExistentDirectory() throws Exception {
-        new FileSystemScanner().scanForResources("/invalid-path", "", "");
+        new FileSystemScanner().scanForResources(new Location("filesystem:/invalid-path"), "", "");
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -23,6 +23,7 @@
 import org.flywaydb.core.internal.resolver.sql.SqlMigrationResolver;
 import org.flywaydb.core.internal.util.Location;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
+import org.flywaydb.core.internal.util.scanner.Scanner;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -224,7 +225,7 @@ public void customTableName() throws Exception {
      */
     private void assertChecksum(MigrationInfo migrationInfo) {
         SqlMigrationResolver sqlMigrationResolver = new SqlMigrationResolver(
-                dbSupport, Thread.currentThread().getContextClassLoader(),
+                dbSupport, new Scanner(Thread.currentThread().getContextClassLoader()),
                 new Location(getBasedir()),
                 PlaceholderReplacer.NO_PLACEHOLDERS,
                 "UTF-8",

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -150,7 +150,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      *
      * @parameter
      */
-    private String[] locations = flyway.getLocations();
+    private String[] locations;
 
     /**
      * The fully qualified class names of the custom MigrationResolvers to be used in addition to the built-in ones for
@@ -426,6 +426,8 @@ public final void execute() throws MojoExecutionException, MojoFailureException
                     }
                 }
                 flyway.setLocations(locations);
+            } else {
+                locations = new String[] { Location.FILESYSTEM_PREFIX + mavenProject.getBasedir().getAbsolutePath() + "/src/main/resources/db/migration"};
             }
             flyway.setResolversAsClassNames(resolvers);
             flyway.setCallbacksAsClassNames(callbacks);

File: flyway-maven-plugin/src/test/java/org/flywaydb/maven/AbstractFlywayMojoSmallTest.java
Patch:
@@ -21,6 +21,8 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import java.io.File;
+
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
@@ -51,6 +53,7 @@ protected void doExecute(Flyway flyway) throws Exception {
         mojo.url = "jdbc:h2:mem:dummy";
         mojo.user = "sa";
         mojo.mavenProject = new MavenProject();
+        mojo.mavenProject.setBasedir(new File("."));
         mojo.mavenProject.getProperties().setProperty("flyway.schemas", "first,second");
         mojo.execute();
     }

File: flyway-sbt-largetest/src/test/java/org/flywaydb/sbt/largetest/SbtLargeTest.java
Patch:
@@ -49,7 +49,7 @@ public void sysPropsOverride() throws Exception {
 
     @Test
     public void useTestScope() throws Exception {
-        String stdOut = runSbt("test1", 0, "test:flywayClean", "test:flywayMigrate");
+        String stdOut = runSbt("test1", 0, "-Dflyway.locations=filesystem:src/main/resources/db/migration,filesystem:src/test/resources/db/migration", "test:flywayClean", "test:flywayMigrate");
         assertTrue(stdOut.contains("Successfully applied 2 migration"));
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathScanner.java
Patch:
@@ -179,7 +179,7 @@ private List<URL> getLocationUrlsForPath(String path) throws IOException {
             // WebSphere
             Enumeration<URL> urls = classLoader.getResources(path + "/flyway.location");
             if (!urls.hasMoreElements()) {
-                throw new FlywayException("Unable to determine URL for classpath location: " + path + " (ClassLoader: " + classLoader + ")"
+                LOG.warn("Unable to determine URL for classpath location: " + path + " (ClassLoader: " + classLoader + ")"
                         + " On WebSphere an empty file named flyway.location must be present on the classpath location for WebSphere to find it!");
             }
             while (urls.hasMoreElements()) {
@@ -189,7 +189,7 @@ private List<URL> getLocationUrlsForPath(String path) throws IOException {
         } else {
             Enumeration<URL> urls = classLoader.getResources(path);
             if (!urls.hasMoreElements()) {
-                throw new FlywayException("Unable to determine URL for classpath location: " + path + " (ClassLoader: " + classLoader + ")");
+                LOG.warn("Unable to determine URL for classpath location: " + path + " (ClassLoader: " + classLoader + ")");
             }
 
             while (urls.hasMoreElements()) {

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolverSmallTest.java
Patch:
@@ -63,7 +63,7 @@ public void resolveMigrationsRoot() {
         assertEquals(2, sqlMigrationResolver.resolveMigrations().size());
     }
 
-    @Test(expected = FlywayException.class)
+    @Test
     public void resolveMigrationsNonExisting() {
         SqlMigrationResolver sqlMigrationResolver =
                 new SqlMigrationResolver(null, Thread.currentThread().getContextClassLoader(),

File: flyway-core/src/test/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathScannerSmallTest.java
Patch:
@@ -104,7 +104,7 @@ public void scanForResourcesSubDirectory() throws Exception {
         assertEquals("migration/subdir/dir2/V2_0__Add_foreign_key.sql", resources[2].getLocation());
     }
 
-    @Test(expected = FlywayException.class)
+    @Test
     public void scanForResourcesInvalidPath() throws Exception {
         classPathScanner.scanForResources("invalid", "V", ".sql");
     }

File: flyway-gradle-plugin-largetest/src/test/java/org/flywaydb/gradle/largetest/GradleLargeTest.java
Patch:
@@ -48,7 +48,7 @@ public void regular() throws Exception {
 
     @Test
     public void error() throws Exception {
-        String stdOut = runGradle(1, "error", "clean", "flywayMigrate");
+        String stdOut = runGradle(0, "error", "clean", "flywayMigrate");
         assertTrue(stdOut.contains("Unable to determine URL for classpath location"));
     }
 

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/CleanMojo.java
Patch:
@@ -21,7 +21,7 @@
  * Maven goal that drops all database objects (tables, views, procedures, triggers, ...) in the configured schemas.
  * The schemas are cleaned in the order specified by the {@code schemas} property..
  *
- * @phase pre-integration-test
+ * @phase clean
  * @goal clean
  * @since 0.7
  */

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/SqlStatementBuilder.java
Patch:
@@ -123,7 +123,7 @@ public boolean isTerminated() {
      */
     public SqlStatement getSqlStatement() {
         String sql = statement.toString();
-        return new SqlStatement(lineNumber, sql, isPgCopy());
+        return new SqlStatement(lineNumber, sql, isPgCopyFromStdIn());
     }
 
     /**
@@ -142,7 +142,7 @@ public Delimiter extractNewDelimiterFromLine(String line) {
      *
      * @return {@code true} if it is, {@code false} if not.
      */
-    public boolean isPgCopy() {
+    public boolean isPgCopyFromStdIn() {
         return false;
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLSqlStatementBuilder.java
Patch:
@@ -84,7 +84,7 @@ protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter)
     }
 
     @Override
-    public boolean isPgCopy() {
+    public boolean isPgCopyFromStdIn() {
         return pgCopy;
     }
 }

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1193,7 +1193,7 @@ public void configure(Properties properties) {
 
         for (String key : props.keySet()) {
             if (key.startsWith("flyway.")) {
-                throw new FlywayException("Unknown configuration property: " + key);
+                LOG.warn("Unknown configuration property: " + key);
             }
         }
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -34,7 +34,7 @@ public class OracleSqlStatementBuilder extends SqlStatementBuilder {
     /**
      * Regex for keywords that can appear after a string literal without being separated by a space.
      */
-    private static final Pattern KEYWORDS_AFTER_STRING_LITERAL_REGEX = Pattern.compile("(.*')(USING|THEN|FROM|AND|OR)");
+    private static final Pattern KEYWORDS_AFTER_STRING_LITERAL_REGEX = Pattern.compile("(.*')(USING|THEN|FROM|AND|OR)(?!.)");
 
     /**
      * Delimiter of PL/SQL blocks and statements.

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/DbSupport.java
Patch:
@@ -147,7 +147,7 @@ public void restoreCurrentSchema() {
     public abstract String getCurrentUserFunction();
 
     /**
-     * Checks whether ddl transactions are supported for this database.
+     * Checks whether ddl transactions are supported by this database.
      *
      * @return {@code true} if ddl transactions are supported, {@code false} if not.
      */

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -37,7 +37,6 @@ public OracleDbSupport(Connection connection) {
         super(new JdbcTemplate(connection, Types.VARCHAR));
     }
 
-
     public String getDbName() {
         return "oracle";
     }

File: flyway-core/src/test/java/org/flywaydb/core/DbCategory.java
Patch:
@@ -41,6 +41,7 @@ public interface Oracle extends CommercialDB {}
     public interface SQLServer extends CommercialDB {}
     public interface GoogleCloudSQL extends CommercialDB {}
 
+    public interface SapHana extends ContributorSupportedDB {}
     public interface DB2zOS extends ContributorSupportedDB {}
     public interface Vertica extends ContributorSupportedDB {}
     public interface Redshift extends ContributorSupportedDB {}

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -34,7 +34,7 @@ public class OracleSqlStatementBuilder extends SqlStatementBuilder {
     /**
      * Regex for keywords that can appear after a string literal without being separated by a space.
      */
-    private static final Pattern KEYWORDS_AFTER_STRING_LITERAL_REGEX = Pattern.compile("(.*')(USING|THEN|FROM|AND|OR)");
+    private static final Pattern KEYWORDS_AFTER_STRING_LITERAL_REGEX = Pattern.compile("(.*')(USING|THEN|FROM|AND|OR)(?!.)");
 
     /**
      * Delimiter of PL/SQL blocks and statements.

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/DbSupportFactory.java
Patch:
@@ -119,7 +119,7 @@ public static DbSupport createDbSupport(Connection connection, boolean printInfo
         }
 
 		//Sybase ASE support
-        if (databaseProductName.startsWith("ASE")) {
+        if (databaseProductName.startsWith("Adaptive Server Enterprise")) {
         	return new SybaseASEDbSupport(connection);
         }
         

File: flyway-core/src/test/java/org/flywaydb/core/DbCategory.java
Patch:
@@ -31,6 +31,7 @@ public interface Derby extends EmbeddedDB {}
     public interface H2 extends EmbeddedDB {}
     public interface HSQL extends EmbeddedDB {}
     public interface SQLite extends EmbeddedDB {}
+    public interface Phoenix extends EmbeddedDB {}
 
     public interface MySQL extends OpenSourceDB {}
     public interface MariaDB extends OpenSourceDB {}

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/redshift/RedshiftDbSupportMediumTest.java
Patch:
@@ -41,7 +41,7 @@ public class RedshiftDbSupportMediumTest {
     @Test
     public void setCurrentSchema() throws Exception {
         Connection connection = createDataSource().getConnection();
-        RedshiftDbSupport dbSupport = new RedshiftDbSupport(connection);
+        RedshiftDbSupport dbSupport = new RedshfitDbSupportViaPostgreSQLDriver(connection);
         Schema schema = dbSupport.getSchema("search_path_test");
         schema.create();
         dbSupport.changeCurrentSchemaTo(dbSupport.getSchema("search_path_test"));

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/redshift/RedshiftDbSupportSmallTest.java
Patch:
@@ -22,7 +22,7 @@
 public class RedshiftDbSupportSmallTest {
     @Test
     public void doQuote() {
-        RedshiftDbSupport dbSupport = new RedshiftDbSupport(null);
+        RedshiftDbSupport dbSupport = new RedshfitDbSupportViaPostgreSQLDriver(null);
         assertEquals("\"abc\"", dbSupport.doQuote("abc"));
         assertEquals("\"a\"\"b\"\"c\"", dbSupport.doQuote("a\"b\"c"));
     }

File: flyway-ant-largetest/src/test/java/org/flywaydb/ant/AntLargeTest.java
Patch:
@@ -37,8 +37,8 @@
 @SuppressWarnings({"JavaDoc"})
 public class AntLargeTest {
     @Test
-    public void init() throws Exception {
-        String stdOut = runAnt(0, "init");
+    public void baseline() throws Exception {
+        String stdOut = runAnt(0, "baseline");
         assertTrue(stdOut.contains("A new beginning!"));
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbBaseline.java
Patch:
@@ -103,7 +103,6 @@ public void baseline() {
                     @Override
                     public Object doInTransaction() throws SQLException {
                         dbSupport.changeCurrentSchemaTo(schema);
-                        callback.beforeInit(connection);
                         callback.beforeBaseline(connection);
                         return null;
                     }
@@ -145,7 +144,6 @@ public Void doInTransaction() {
                     @Override
                     public Object doInTransaction() throws SQLException {
                         dbSupport.changeCurrentSchemaTo(schema);
-                        callback.afterInit(connection);
                         callback.afterBaseline(connection);
                         return null;
                     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -127,7 +127,7 @@ public MigrationState getState() {
                 return MigrationState.SUCCESS;
             }
 
-            if ((MigrationType.BASELINE == appliedMigration.getType()) || (MigrationType.INIT == appliedMigration.getType())) {
+            if (MigrationType.BASELINE == appliedMigration.getType()) {
                 return MigrationState.BASELINE;
             }
 
@@ -177,8 +177,7 @@ public String validate() {
         if (!context.pendingOrFuture
                 && (resolvedMigration == null)
                 && (appliedMigration.getType() != MigrationType.SCHEMA)
-                && (appliedMigration.getType() != MigrationType.BASELINE)
-                && (appliedMigration.getType() != MigrationType.INIT)) {
+                && (appliedMigration.getType() != MigrationType.BASELINE)) {
             return "Detected applied migration not resolved locally: " + getVersion();
         }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoServiceImpl.java
Patch:
@@ -135,8 +135,7 @@ List<MigrationInfoImpl> mergeAvailableAndAppliedMigrations(Collection<ResolvedMi
             if (appliedMigration.getType() == MigrationType.SCHEMA) {
                 context.schema = version;
             }
-            if ((appliedMigration.getType() == MigrationType.INIT) || (appliedMigration.getType() == MigrationType.BASELINE)) {
-                context.init = version;
+            if (appliedMigration.getType() == MigrationType.BASELINE) {
                 context.baseline = version;
             }
             appliedMigrationsMap.put(version, appliedMigration);

File: flyway-core/src/main/java/org/flywaydb/core/internal/metadatatable/MetaDataTableImpl.java
Patch:
@@ -328,8 +328,7 @@ public boolean hasBaselineMarker() {
 
     @Override
     public AppliedMigration getBaselineMarker() {
-        List<AppliedMigration> appliedMigrations = findAppliedMigrations(MigrationType.INIT);
-        appliedMigrations.addAll(findAppliedMigrations(MigrationType.BASELINE));
+        List<AppliedMigration> appliedMigrations = findAppliedMigrations(MigrationType.BASELINE);
         return appliedMigrations.isEmpty() ? null : appliedMigrations.get(0);
     }
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/info/MigrationInfoServiceImplSmallTest.java
Patch:
@@ -130,7 +130,7 @@ public void belowBaseline() {
         MigrationInfoServiceImpl migrationInfoService =
                 new MigrationInfoServiceImpl(
                         createMigrationResolver(createAvailableMigration(1)),
-                        createMetaDataTable(createAppliedInitMigration(2)),
+                        createMetaDataTable(createAppliedBaselineMigration(2)),
                         MigrationVersion.LATEST, false, true);
         migrationInfoService.refresh();
 
@@ -214,9 +214,9 @@ private AppliedMigration createAppliedMigration(int version, String description)
      * @param version The version of the migration.
      * @return The applied baseline migration.
      */
-    private AppliedMigration createAppliedInitMigration(int version) {
+    private AppliedMigration createAppliedBaselineMigration(int version) {
         return new AppliedMigration(version, version, MigrationVersion.fromVersion(Integer.toString(version)), "abc",
-                MigrationType.INIT, "x", null, new Date(), "sa", 0, true);
+                MigrationType.BASELINE, "x", null, new Date(), "sa", 0, true);
     }
 
     /**

File: flyway-core/src/test/java/org/flywaydb/core/migration/ConcurrentMigrationTestCase.java
Patch:
@@ -83,7 +83,7 @@ public void setUp() throws Exception {
 
         flyway = createFlyway();
         flyway.clean();
-        flyway.init();
+        flyway.baseline();
     }
 
     /**
@@ -143,7 +143,7 @@ private Flyway createFlyway() throws SQLException {
         placeholders.put("schema", schemaQuoted);
 
         newFlyway.setPlaceholders(placeholders);
-        newFlyway.setInitVersion("0.1");
+        newFlyway.setBaselineVersionAsString("0.1");
         return newFlyway;
     }
 }

File: flyway-gradle-plugin/src/main/groovy/org/flywaydb/gradle/FlywayPlugin.java
Patch:
@@ -18,7 +18,6 @@
 import org.flywaydb.gradle.task.FlywayCleanTask;
 import org.flywaydb.gradle.task.FlywayInfoTask;
 import org.flywaydb.gradle.task.FlywayBaselineTask;
-import org.flywaydb.gradle.task.FlywayInitTask;
 import org.flywaydb.gradle.task.FlywayMigrateTask;
 import org.flywaydb.gradle.task.FlywayRepairTask;
 import org.flywaydb.gradle.task.FlywayValidateTask;
@@ -36,7 +35,6 @@ public class FlywayPlugin implements Plugin<Project> {
     public void apply(Project project) {
         project.getExtensions().create("flyway", FlywayExtension.class);
         project.getTasks().create("flywayClean", FlywayCleanTask.class);
-        project.getTasks().create("flywayInit", FlywayInitTask.class);
         project.getTasks().create("flywayBaseline", FlywayBaselineTask.class);
         project.getTasks().create("flywayMigrate", FlywayMigrateTask.class);
         project.getTasks().create("flywayValidate", FlywayValidateTask.class);

File: flyway-commandline-largetest/src/test/java/org/flywaydb/commandline/largetest/CommandLineLargeTest.java
Patch:
@@ -55,7 +55,7 @@ public void multipleCommands() throws Exception {
     @Test
     public void showUsage() throws Exception {
         String stdOut = runFlywayCommandLine(0, null, null);
-        assertTrue(stdOut.contains("* Usage"));
+        assertTrue(stdOut.contains("Usage"));
         assertTrue(stdOut.contains("callback"));
     }
     

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/MigrateMojo.java
Patch:
@@ -34,7 +34,8 @@ protected void doExecute(Flyway flyway) throws Exception {
         flyway.migrate();
 
         MigrationInfo current = flyway.info().current();
-        String currentVersion = current == null ? null : current.getVersion().toString();
-        mavenProject.getProperties().setProperty("flyway.current", currentVersion);
+        if (current != null) {
+            mavenProject.getProperties().setProperty("flyway.current", current.getVersion().toString());
+        }
     }
 }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -182,7 +182,7 @@ private static void initializeDefaults(Properties properties) {
      * @throws IOException when the version could not be read.
      */
     private static void printVersion() throws IOException {
-        VersionPrinter.printVersion(Thread.currentThread().getContextClassLoader());
+        VersionPrinter.printVersion();
         LOG.info("");
 
         LOG.debug("Java " + System.getProperty("java.version") + " (" + System.getProperty("java.vendor") + ")");

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1384,7 +1384,7 @@ public void configure(Properties properties) {
     /*private -> testing*/ <T> T execute(Command<T> command) {
         T result;
 
-        VersionPrinter.printVersion(classLoader);
+        VersionPrinter.printVersion();
 
         Connection connectionMetaDataTable = null;
         Connection connectionUserObjects = null;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -40,6 +40,7 @@ public class OracleSqlStatementBuilder extends SqlStatementBuilder {
      * Delimiter of PL/SQL blocks and statements.
      */
     private static final Delimiter PLSQL_DELIMITER = new Delimiter("/", true);
+
     /**
      * Holds the beginning of the statement.
      */

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/VersionPrinter.java
Patch:
@@ -36,12 +36,12 @@ private VersionPrinter() {
     /**
      * Prints the Flyway version.
      */
-    public static void printVersion(ClassLoader classLoader) {
+    public static void printVersion() {
         if (printed) {
             return;
         }
         printed = true;
-        String version = new ClassPathResource("org/flywaydb/core/internal/version.txt", classLoader).loadAsString("UTF-8");
+        String version = new ClassPathResource("org/flywaydb/core/internal/version.txt", VersionPrinter.class.getClassLoader()).loadAsString("UTF-8");
         LOG.info("Flyway " + version + " by Boxfuse");
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLMigrationMediumTest.java
Patch:
@@ -320,7 +320,7 @@ public void multiLine() throws Exception {
     public void copy() throws Exception {
         flyway.setLocations("migration/dbsupport/postgresql/sql/copy");
         flyway.migrate();
-        assertEquals(3, jdbcTemplate.queryForInt("select count(*) from copy_test"));
+        assertEquals(6, jdbcTemplate.queryForInt("select count(*) from copy_test"));
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/Schema.java
Patch:
@@ -253,6 +253,9 @@ protected Function[] doAllFunctions() throws SQLException {
         return new Function[0];
     }
 
+    /**
+     * @return The quoted name of the schema.
+     */
     @Override
     public String toString() {
         return dbSupport.quote(name);

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/db2/DB2DbSupport.java
Patch:
@@ -57,12 +57,12 @@ public String getDbName() {
     }
 
     @Override
-    protected String doGetCurrentSchema() throws SQLException {
+    protected String doGetCurrentSchemaName() throws SQLException {
         return jdbcTemplate.queryForString("select current_schema from sysibm.sysdummy1");
     }
 
     @Override
-    protected void doSetCurrentSchema(Schema schema) throws SQLException {
+    protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
         jdbcTemplate.execute("SET SCHEMA " + schema);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/db2zos/DB2zosDbSupport.java
Patch:
@@ -50,12 +50,12 @@ public String getScriptLocation() {
     }
 
     @Override
-    protected String doGetCurrentSchema() throws SQLException {
+    protected String doGetCurrentSchemaName() throws SQLException {
         return jdbcTemplate.queryForString("select current_schema from sysibm.sysdummy1");
     }
 
     @Override
-    protected void doSetCurrentSchema(Schema schema) throws SQLException {
+    protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
         jdbcTemplate.execute("SET SCHEMA " + schema);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/derby/DerbyDbSupport.java
Patch:
@@ -46,12 +46,12 @@ public String getCurrentUserFunction() {
     }
 
     @Override
-    protected String doGetCurrentSchema() throws SQLException {
+    protected String doGetCurrentSchemaName() throws SQLException {
         return jdbcTemplate.queryForString("SELECT CURRENT SCHEMA FROM SYSIBM.SYSDUMMY1");
     }
 
     @Override
-    protected void doSetCurrentSchema(Schema schema) throws SQLException {
+    protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
         jdbcTemplate.execute("SET SCHEMA " + schema);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/h2/H2Schema.java
Patch:
@@ -81,7 +81,7 @@ protected void doClean() throws SQLException {
 
         List<String> domainNames = listObjectNames("DOMAIN", "");
         if (!domainNames.isEmpty()) {
-            if (name.equals(dbSupport.getCurrentSchema().getName())) {
+            if (name.equals(dbSupport.getCurrentSchemaName())) {
                 for (String statement : generateDropStatementsForCurrentSchema("DOMAIN", domainNames, "")) {
                     jdbcTemplate.execute(statement);
                 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/hsql/HsqlDbSupport.java
Patch:
@@ -48,7 +48,7 @@ public String getCurrentUserFunction() {
     }
 
     @Override
-    protected String doGetCurrentSchema() throws SQLException {
+    protected String doGetCurrentSchemaName() throws SQLException {
         ResultSet resultSet = null;
         String schema = null;
 
@@ -68,7 +68,7 @@ protected String doGetCurrentSchema() throws SQLException {
     }
 
     @Override
-    protected void doSetCurrentSchema(Schema schema) throws SQLException {
+    protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
         jdbcTemplate.execute("SET SCHEMA " + schema);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -47,12 +47,12 @@ public String getCurrentUserFunction() {
     }
 
     @Override
-    protected String doGetCurrentSchema() throws SQLException {
+    protected String doGetCurrentSchemaName() throws SQLException {
         return jdbcTemplate.queryForString("SELECT USER FROM dual");
     }
 
     @Override
-    protected void doSetCurrentSchema(Schema schema) throws SQLException {
+    protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
         jdbcTemplate.execute("ALTER SESSION SET CURRENT_SCHEMA=" + schema);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSchema.java
Patch:
@@ -259,7 +259,7 @@ private List<String> generateDropStatementsForSpatialExtensions() throws SQLExce
             LOG.debug("Oracle Spatial Extensions are not available. No cleaning of MDSYS tables and views.");
             return statements;
         }
-        if (!dbSupport.getCurrentSchema().getName().equalsIgnoreCase(name)) {
+        if (!dbSupport.getCurrentSchemaName().equalsIgnoreCase(name)) {
             int count = jdbcTemplate.queryForInt("SELECT COUNT (*) FROM all_sdo_geom_metadata WHERE owner=?", name);
             count += jdbcTemplate.queryForInt("SELECT COUNT (*) FROM all_sdo_index_info WHERE sdo_index_owner=?", name);
             if (count > 0) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/solid/SolidDbSupport.java
Patch:
@@ -54,12 +54,12 @@ public String getDbName() {
     }
 
     @Override
-    protected String doGetCurrentSchema() throws SQLException {
+    protected String doGetCurrentSchemaName() throws SQLException {
         return jdbcTemplate.queryForString("SELECT CURRENT_SCHEMA()");
     }
 
     @Override
-    protected void doSetCurrentSchema(final Schema schema) throws SQLException {
+    protected void doChangeCurrentSchemaTo(final String schema) throws SQLException {
         jdbcTemplate.execute("SET SCHEMA " + schema);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/sqlite/SQLiteDbSupport.java
Patch:
@@ -49,12 +49,12 @@ public String getCurrentUserFunction() {
         return "''";
     }
 
-    protected String doGetCurrentSchema() throws SQLException {
+    protected String doGetCurrentSchemaName() throws SQLException {
         return "main";
     }
 
     @Override
-    protected void doSetCurrentSchema(Schema schema) throws SQLException {
+    protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
         LOG.info("SQLite does not support setting the schema. Default schema NOT changed to " + schema);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/sqlserver/SQLServerDbSupport.java
Patch:
@@ -51,12 +51,12 @@ public String getCurrentUserFunction() {
     }
 
     @Override
-    protected String doGetCurrentSchema() throws SQLException {
+    protected String doGetCurrentSchemaName() throws SQLException {
         return jdbcTemplate.queryForString("SELECT SCHEMA_NAME()");
     }
 
     @Override
-    protected void doSetCurrentSchema(Schema schema) throws SQLException {
+    protected void doChangeCurrentSchemaTo(String schema) throws SQLException {
         LOG.info("SQLServer does not support setting the schema for the current session. Default schema NOT changed to " + schema);
         // Not currently supported.
         // See http://connect.microsoft.com/SQLServer/feedback/details/390528/t-sql-statement-for-changing-default-schema-context

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLDbSupportMediumTest.java
Patch:
@@ -44,7 +44,7 @@ public void setCurrentSchema() throws Exception {
         PostgreSQLDbSupport dbSupport = new PostgreSQLDbSupport(connection);
         Schema schema = dbSupport.getSchema("search_path_test");
         schema.create();
-        dbSupport.setCurrentSchema(dbSupport.getSchema("search_path_test"));
+        dbSupport.changeCurrentSchemaTo(dbSupport.getSchema("search_path_test"));
         String searchPath = dbSupport.getJdbcTemplate().queryForString("SHOW search_path");
         assertEquals("search_path_test, \"$user\", public", searchPath);
         schema.drop();

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/redshift/RedshiftDbSupportMediumTest.java
Patch:
@@ -44,7 +44,7 @@ public void setCurrentSchema() throws Exception {
         RedshiftDbSupport dbSupport = new RedshiftDbSupport(connection);
         Schema schema = dbSupport.getSchema("search_path_test");
         schema.create();
-        dbSupport.setCurrentSchema(dbSupport.getSchema("search_path_test"));
+        dbSupport.changeCurrentSchemaTo(dbSupport.getSchema("search_path_test"));
         String searchPath = dbSupport.getJdbcTemplate().queryForString("SHOW search_path");
         assertEquals("search_path_test, \"$user\", public", searchPath);
         schema.drop();

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/vertica/VerticaDbSupportMediumTest.java
Patch:
@@ -44,8 +44,8 @@ public void setCurrentSchema() throws Exception {
         VerticaDbSupport dbSupport = new VerticaDbSupport(connection);
         Schema schema = dbSupport.getSchema("search_path_test");
         schema.create();
-        dbSupport.setCurrentSchema(dbSupport.getSchema("search_path_test"));
-        String searchPath = dbSupport.doGetSearchPath();
+        dbSupport.changeCurrentSchemaTo(dbSupport.getSchema("search_path_test"));
+        String searchPath = dbSupport.doGetCurrentSchemaName();
         assertEquals("search_path_test, \"$user\", public, v_catalog, v_monitor, v_internal", searchPath);
         schema.drop();
         JdbcUtils.closeConnection(connection);

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSchema.java
Patch:
@@ -57,6 +57,7 @@ protected boolean doEmpty() throws SQLException {
     protected void doCreate() throws SQLException {
         jdbcTemplate.execute("CREATE USER " + dbSupport.quote(name) + " IDENTIFIED BY flyway");
         jdbcTemplate.execute("GRANT RESOURCE TO " + dbSupport.quote(name));
+        jdbcTemplate.execute("GRANT UNLIMITED TABLESPACE TO " + dbSupport.quote(name));
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/internal/util/scanner/classpath/FileSystemLocationScannerMediumTest.java
Patch:
@@ -39,7 +39,7 @@ public void findResourceNamesFromFileSystem() throws Exception {
 
         assertEquals(4, resourceNames.size());
         String[] names = resourceNames.toArray(new String[4]);
-        assertEquals("sql/V1_1__View.sql", names[0]);
+        assertEquals("sql/V1.1__View.sql", names[0]);
         assertEquals("sql/V1_2__Populate_table.sql", names[1]);
         assertEquals("sql/V1__First.sql", names[2]);
         assertEquals("sql/V2_0__Add_foreign_key_and_super_mega_humongous_padding_to_exceed_the_maximum_column_length_in_the_metadata_table.sql", names[3]);

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLSchema.java
Patch:
@@ -265,7 +265,7 @@ protected Table[] doAllTables() throws SQLException {
                                 " AND table_type='BASE TABLE'" +
                                 //and are not child tables (= do not inherit from another table).
                                 " AND NOT (SELECT EXISTS (SELECT inhrelid FROM pg_catalog.pg_inherits" +
-                                " WHERE inhrelid = ('\"'||t.table_schema||'\".\"'||t.table_name||'\"')::regclass::oid))",
+                                " WHERE inhrelid = (quote_ident(t.table_schema)||'.'||quote_ident(t.table_name))::regclass::oid))",
                         name
                 );
         //Views and child tables are excluded as they are dropped with the parent table when using cascade.

File: flyway-core/src/test/java/org/flywaydb/core/DbCategory.java
Patch:
@@ -39,11 +39,11 @@ public interface PostgreSQL extends OpenSourceDB {}
     public interface DB2 extends CommercialDB {}
     public interface Oracle extends CommercialDB {}
     public interface SQLServer extends CommercialDB {}
-    public interface SybaseASE extends CommercialDB {}
     public interface GoogleCloudSQL extends CommercialDB {}
 
     public interface DB2zOS extends ContributorSupportedDB {}
     public interface Vertica extends ContributorSupportedDB {}
     public interface Redshift extends ContributorSupportedDB {}
     public interface SolidDB extends ContributorSupportedDB {}
+    public interface SybaseASE extends ContributorSupportedDB {}
 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -34,7 +34,7 @@ public class OracleSqlStatementBuilder extends SqlStatementBuilder {
     /**
      * Regex for keywords that can appear after a string literal without being separated by a space.
      */
-    private static final Pattern KEYWORDS_AFTER_STRING_LITERAL_REGEX = Pattern.compile("(.*')(USING|THEN|FROM)");
+    private static final Pattern KEYWORDS_AFTER_STRING_LITERAL_REGEX = Pattern.compile("(.*')(USING|THEN|FROM|AND|OR)");
 
     /**
      * Delimiter of PL/SQL blocks and statements.

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -67,9 +67,10 @@ protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter)
 
     @Override
     protected String cleanToken(String token) {
-    	if(token.startsWith("'") && token.endsWith("'")){
+    	if (token.startsWith("'") && token.endsWith("'")){
     		return token;
     	}
+
         Matcher beforeMatcher = KEYWORDS_BEFORE_STRING_LITERAL_REGEX.matcher(token);
         if (beforeMatcher.find()) {
             token = beforeMatcher.group(2);

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlStatementBuilderSmallTest.java
Patch:
@@ -67,6 +67,7 @@ public void quotedStringEndingWithN() {
         builder.addLine("insert into table (COLUMN) values 'VALUE_WITH_N';");
         assertTrue(builder.isTerminated());
     }
+
     @Test
     public void quotedWithFrom() {
         builder.addLine("insert into table (COLUMN) values 'FROM';");

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -67,6 +67,9 @@ protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter)
 
     @Override
     protected String cleanToken(String token) {
+    	if(token.startsWith("'") && token.endsWith("'")){
+    		return token;
+    	}
         Matcher beforeMatcher = KEYWORDS_BEFORE_STRING_LITERAL_REGEX.matcher(token);
         if (beforeMatcher.find()) {
             token = beforeMatcher.group(2);

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/console/ConsoleLog.java
Patch:
@@ -21,7 +21,7 @@
  * Wrapper around a simple Console output.
  */
 public class ConsoleLog implements Log {
- 	public static enum Level {
+ 	public enum Level {
  		DEBUG, INFO, WARN
  	}
 	

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.commandline;
 
-import org.flywaydb.commandline.ConsoleLog.Level;
+import org.flywaydb.core.internal.util.logging.console.ConsoleLog.Level;
 import org.flywaydb.core.Flyway;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.info.MigrationInfoDumper;
@@ -26,7 +26,7 @@
 import org.flywaydb.core.internal.util.VersionPrinter;
 import org.flywaydb.core.internal.util.logging.Log;
 import org.flywaydb.core.internal.util.logging.LogFactory;
-import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;
+import org.flywaydb.core.internal.util.logging.console.ConsoleLogCreator;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -53,7 +53,7 @@ public class Main {
      * @param level The minimum level to log at.
      */
     static void initLogging(Level level) {
-        LogFactory.setLogCreator(new ConsoleLogCreator(level));
+        LogFactory.setFallbackLogCreator(new ConsoleLogCreator(level));
         LOG = LogFactory.getLog(Main.class);
     }
 

File: flyway-commandline/src/test/java/org/flywaydb/commandline/ConsoleLogTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.flywaydb.commandline;
 
+import org.flywaydb.core.internal.util.logging.console.ConsoleLog;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: flyway-commandline/src/test/java/org/flywaydb/commandline/MainClassLoaderSmallTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.commandline;
 
-import org.flywaydb.commandline.ConsoleLog.Level;
+import org.flywaydb.core.internal.util.logging.console.ConsoleLog.Level;
 import org.flywaydb.core.api.migration.spring.SpringJdbcMigration;
 import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;
 import org.flywaydb.core.internal.util.ClassUtils;

File: flyway-commandline/src/test/java/org/flywaydb/commandline/MainSmallTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.commandline;
 
-import org.flywaydb.commandline.ConsoleLog.Level;
+import org.flywaydb.core.internal.util.logging.console.ConsoleLog.Level;
 import org.junit.Before;
 import org.junit.Test;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/console/ConsoleLog.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.commandline;
+package org.flywaydb.core.internal.util.logging.console;
 
 import org.flywaydb.core.internal.util.logging.Log;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/console/ConsoleLogCreator.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.commandline;
+package org.flywaydb.core.internal.util.logging.console;
 
-import org.flywaydb.commandline.ConsoleLog.Level;
+import org.flywaydb.core.internal.util.logging.console.ConsoleLog.Level;
 import org.flywaydb.core.internal.util.logging.Log;
 import org.flywaydb.core.internal.util.logging.LogCreator;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -67,6 +67,9 @@ protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter)
 
     @Override
     protected String cleanToken(String token) {
+    	if(token.startsWith("'") && token.endsWith("'")){
+    		return token;
+    	}
         Matcher beforeMatcher = KEYWORDS_BEFORE_STRING_LITERAL_REGEX.matcher(token);
         if (beforeMatcher.find()) {
             token = beforeMatcher.group(2);

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLDbSupport.java
Patch:
@@ -107,7 +107,7 @@ public void executePgCopy(Connection connection, String sql) throws SQLException
         String statement = sql.substring(0, split);
         String data = sql.substring(split + 1).trim();
 
-        CopyManager copyManager = new CopyManager((BaseConnection) connection.unwrap(Connection.class));
+        CopyManager copyManager = new CopyManager((BaseConnection) connection.unwrap(BaseConnection.class));
         try {
             copyManager.copyIn(statement, new StringReader(data));
         } catch (IOException e) {

File: flyway-commandline/src/main/java/org/flywaydb/commandline/ConsoleLog.java
Patch:
@@ -53,11 +53,11 @@ public void warn(String message) {
     }
 
     public void error(String message) {
-        System.out.println("ERROR: " + message);
+        System.err.println("ERROR: " + message);
     }
 
     public void error(String message, Exception e) {
-        System.out.println("ERROR: " + message);
-        e.printStackTrace();
+        System.err.println("ERROR: " + message);
+        e.printStackTrace(System.err);
     }
 }

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -413,7 +413,7 @@ private void loadCredentialsFromSettings() throws FlywayException {
                 } catch (SecDispatcherException e) {
                     throw new FlywayException("Unable to decrypt password", e);
                 } catch (PlexusCipherException e) {
-                    throw new FlywayException("Unable to initialized password decryption", e);
+                    throw new FlywayException("Unable to initialize password decryption", e);
                 }
             }
         }

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/SqlStatementBuilderSmallTest.java
Patch:
@@ -77,6 +77,8 @@ public void oracleEndsWithOpenMultilineStringLiteral() {
         assertFalse(endsWithOpenMultilineStringLiteral(new OracleSqlStatementBuilder(), "select q'<Hello 'quotes'>' from dual;"));
         assertFalse(endsWithOpenMultilineStringLiteral(new OracleSqlStatementBuilder(), "select q'$Hello 'quotes'$' from dual;"));
 
+        assertFalse(endsWithOpenMultilineStringLiteral(new OracleSqlStatementBuilder(), "COMMENT ON COLUMN SATZ_MARKE.KURZZEICHEN IS 'Kurzzeichen';"));
+
         assertTrue(endsWithOpenMultilineStringLiteral(new OracleSqlStatementBuilder(), "select q'[Hello 'quotes']"));
         assertTrue(endsWithOpenMultilineStringLiteral(new OracleSqlStatementBuilder(), "select q'(Hello 'quotes')"));
         assertTrue(endsWithOpenMultilineStringLiteral(new OracleSqlStatementBuilder(), "select q'{Hello 'quotes'}"));

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -29,7 +29,7 @@ public class OracleSqlStatementBuilder extends SqlStatementBuilder {
     /**
      * Regex for keywords that can appear before a string literal without being separated by a space.
      */
-    private static final Pattern KEYWORDS_BEFORE_STRING_LITERAL_REGEX = Pattern.compile("(N|IF|ELSIF|SELECT|IMMEDIATE|RETURN|IS)('.*)");
+    private static final Pattern KEYWORDS_BEFORE_STRING_LITERAL_REGEX = Pattern.compile("^(N|IF|ELSIF|SELECT|IMMEDIATE|RETURN|IS)('.*)");
 
     /**
      * Regex for keywords that can appear after a string literal without being separated by a space.

File: flyway-core/src/main/java/org/flywaydb/core/internal/metadatatable/MetaDataTableImpl.java
Patch:
@@ -319,7 +319,7 @@ public boolean hasBaselineMarker() {
 
         try {
             int count = jdbcTemplate.queryForInt(
-                    "SELECT COUNT(*) FROM " + table + " WHERE " + dbSupport.quote("type") + "='INIT' OR" + dbSupport.quote("type") + "='BASELINE'");
+                    "SELECT COUNT(*) FROM " + table + " WHERE " + dbSupport.quote("type") + "='INIT' OR " + dbSupport.quote("type") + "='BASELINE'");
             return count > 0;
         } catch (SQLException e) {
             throw new FlywayException("Unable to check whether the metadata table " + table + " has an baseline marker migration", e);

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -29,7 +29,7 @@ public class OracleSqlStatementBuilder extends SqlStatementBuilder {
     /**
      * Regex for keywords that can appear before a string literal without being separated by a space.
      */
-    private static final Pattern KEYWORDS_BEFORE_STRING_LITERAL_REGEX = Pattern.compile("(N|IF|ELSIF|SELECT|IMMEDIATE|RETURN|IS)('.*)");
+    private static final Pattern KEYWORDS_BEFORE_STRING_LITERAL_REGEX = Pattern.compile("^(N|IF|ELSIF|SELECT|IMMEDIATE|RETURN|IS)('.*)");
 
     /**
      * Regex for keywords that can appear after a string literal without being separated by a space.

File: flyway-core/src/main/java/org/flywaydb/core/internal/metadatatable/MetaDataTableImpl.java
Patch:
@@ -319,7 +319,7 @@ public boolean hasBaselineMarker() {
 
         try {
             int count = jdbcTemplate.queryForInt(
-                    "SELECT COUNT(*) FROM " + table + " WHERE " + dbSupport.quote("type") + "='INIT' OR" + dbSupport.quote("type") + "='BASELINE'");
+                    "SELECT COUNT(*) FROM " + table + " WHERE " + dbSupport.quote("type") + "='INIT' OR " + dbSupport.quote("type") + "='BASELINE'");
             return count > 0;
         } catch (SQLException e) {
             throw new FlywayException("Unable to check whether the metadata table " + table + " has an baseline marker migration", e);

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -23,6 +23,7 @@
 import org.flywaydb.core.internal.util.FileCopyUtils;
 import org.flywaydb.core.internal.util.PropertiesUtils;
 import org.flywaydb.core.internal.util.StringUtils;
+import org.flywaydb.core.internal.util.VersionPrinter;
 import org.flywaydb.core.internal.util.logging.Log;
 import org.flywaydb.core.internal.util.logging.LogFactory;
 import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;
@@ -166,8 +167,7 @@ private static void initializeDefaults(Properties properties) {
      * @throws IOException when the version could not be read.
      */
     private static void printVersion() throws IOException {
-        String version = new ClassPathResource("version.txt", Thread.currentThread().getContextClassLoader()).loadAsString("UTF-8");
-        LOG.info("Flyway " + version + " by Boxfuse");
+        VersionPrinter.printVersion(Thread.currentThread().getContextClassLoader());
         LOG.info("");
     }
 

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -393,7 +393,7 @@ private static boolean loadConfigurationFile(Properties properties, String file,
         LOG.debug("Loading config file: " + configFile.getAbsolutePath());
         try {
             Reader fileReader = new InputStreamReader(new FileInputStream(configFile), encoding);
-            String propertiesData = FileCopyUtils.copyToString(fileReader);
+            String propertiesData = FileCopyUtils.copyToString(fileReader).replace("\\", "\\\\");
 
             properties.putAll(PropertiesUtils.loadPropertiesFromString(propertiesData));
             return true;

File: flyway-commandline/src/test/java/org/flywaydb/commandline/MainClassLoaderSmallTest.java
Patch:
@@ -60,7 +60,7 @@ public void loadConfigurationFile() throws Exception {
         String filename = new ClassPathResource("test.properties", getClassLoader()).getLocationOnDisk();
         String[] args = new String[]{"-configFile=" + filename, "-configFileEncoding=UTF-8"};
 
-        Main.loadConfigurationFile(properties, args);
+        Main.loadConfiguration(properties, args);
 
         assertEquals(4, properties.size());
         assertEquals("still there!", properties.getProperty("existing"));

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -207,6 +207,7 @@ private static void printUsage() {
         LOG.info("sqlMigrationSeparator  : File name separator for Sql migrations");
         LOG.info("sqlMigrationSuffix     : File name suffix for Sql migrations");
         LOG.info("encoding               : Encoding of Sql migrations");
+        LOG.info("placeholderReplacement : Whether placeholders should be replaced");
         LOG.info("placeholders           : Placeholders to replace in Sql migrations");
         LOG.info("placeholderPrefix      : Prefix of every placeholder");
         LOG.info("placeholderSuffix      : Suffix of every placeholder");

File: flyway-commandline-largetest/src/test/java/org/flywaydb/commandline/largetest/CommandLineLargeTest.java
Patch:
@@ -88,15 +88,15 @@ public void exitCodeForFailedMigration() throws Exception {
 
     @Test
     public void sqlFolderRoot() throws Exception {
-        String stdOut = runFlywayCommandLine(0, null, "migrate", "-user=SA", "-url=jdbc:hsqldb:mem:flyway_db",
+        String stdOut = runFlywayCommandLine(0, null, "migrate", "-user=SA", "-url=jdbc:hsqldb:mem:flyway_db", "-jarDirs=jardir",
                 "-driver=org.hsqldb.jdbcDriver", "-sqlMigrationPrefix=Mig", "-resolvers=");
         assertTrue(stdOut.contains("777"));
         assertTrue(stdOut.contains("Successfully applied 1 migration"));
     }
 
     @Test
     public void jarFile() throws Exception {
-        String stdOut = runFlywayCommandLine(0, null, "migrate", "-user=SA", "-url=jdbc:hsqldb:mem:flyway_db",
+        String stdOut = runFlywayCommandLine(0, null, "migrate", "-user=SA", "-url=jdbc:hsqldb:mem:flyway_db", "-jarDirs=jardir",
                 "-driver=org.hsqldb.jdbcDriver", "-locations=db/migration,org/flywaydb/sample/migration", "-resolvers=");
         assertTrue(stdOut.contains("Successfully applied 3 migrations"));
     }
@@ -127,7 +127,7 @@ protected String runFlywayCommandLine(int expectedReturnCode, String configFileN
         args.addAll(Arrays.asList(extraArgs));
 
         //Debug mode
-        //args.add("-X");
+        args.add("-X");
 
         ProcessBuilder builder = new ProcessBuilder(args);
         builder.directory(new File(installDir));

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/mysql/MySQLSqlStatementBuilder.java
Patch:
@@ -83,7 +83,7 @@ protected boolean isSingleLineComment(String line) {
     protected String removeEscapedQuotes(String token) {
         String noEscapedBackslashes = StringUtils.replaceAll(token, "\\\\", "");
         String noBackslashEscapes = StringUtils.replaceAll(StringUtils.replaceAll(noEscapedBackslashes, "\\'", ""), "\\\"", "");
-        return StringUtils.replaceAll(noBackslashEscapes, "''", "");
+        return StringUtils.replaceAll(noBackslashEscapes, "''", "").replace("'", " ' ");
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlScriptSmallTest.java
Patch:
@@ -90,7 +90,7 @@ public void parseQQuotes() throws Exception {
 
         SqlScript sqlScript = new SqlScript(source, new OracleDbSupport(null));
         List<SqlStatement> sqlStatements = sqlScript.getSqlStatements();
-        assertEquals(10, sqlStatements.size());
+        assertEquals(12, sqlStatements.size());
     }
 
     @Test

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/mysql/MySQLSqlStatementBuilder.java
Patch:
@@ -75,7 +75,7 @@ public boolean isCommentDirective(String line) {
     }
 
     @Override
-    public boolean isSingleLineComment(String line) {
+    protected boolean isSingleLineComment(String line) {
         return line.startsWith("--") || line.startsWith("#");
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -991,7 +991,7 @@ public Integer execute(Connection connectionMetaDataTable, Connection connection
 
                 new DbSchemas(connectionMetaDataTable, schemas, metaDataTable).create();
 
-                if (!metaDataTable.hasBaselineMarker() && !metaDataTable.hasAppliedMigrations()) {
+                if (!metaDataTable.hasSchemasMarker() && !metaDataTable.hasBaselineMarker() && !metaDataTable.hasAppliedMigrations()) {
                     List<Schema> nonEmptySchemas = new ArrayList<Schema>();
                     for (Schema schema : schemas) {
                         if (!schema.empty()) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/mysql/MySQLDbSupport.java
Patch:
@@ -57,18 +57,18 @@ protected String doGetCurrentSchema() throws SQLException {
 
     @Override
     protected void doSetCurrentSchema(Schema schema) throws SQLException {
-        if ("".equals(schema.getName())) {
+        if (schema == null || "".equals(schema.getName())) {
             try {
                 // Weird hack to switch back to no database selected...
                 String newDb = quote(UUID.randomUUID().toString());
                 jdbcTemplate.execute("CREATE SCHEMA " + newDb);
                 jdbcTemplate.execute("USE " + newDb);
                 jdbcTemplate.execute("DROP SCHEMA " + newDb);
             } catch (Exception e) {
-                LOG.warn("Unable to restore connection to having no default schema");
+                LOG.warn("Unable to restore connection to having no default schema: " + e.getMessage());
             }
         } else {
-            jdbcTemplate.execute("USE " + schema);
+            jdbcTemplate.getConnection().setCatalog(schema.getName());
         }
     }
 

File: flyway-commandline/src/main/java/org/flywaydb/commandline/ConsoleLog.java
Patch:
@@ -53,11 +53,11 @@ public void warn(String message) {
     }
 
     public void error(String message) {
-        System.out.println("ERROR: " + message);
+        System.err.println("ERROR: " + message);
     }
 
     public void error(String message, Exception e) {
-        System.out.println("ERROR: " + message);
-        e.printStackTrace();
+        System.err.println("ERROR: " + message);
+        e.printStackTrace(System.err);
     }
 }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -208,7 +208,7 @@ private static void printUsage() {
         LOG.info("placeholders           : Placeholders to replace in Sql migrations");
         LOG.info("placeholderPrefix      : Prefix of every placeholder");
         LOG.info("placeholderSuffix      : Suffix of every placeholder");
-        LOG.info("target                 : Target version up to which Flyway should migrate");
+        LOG.info("target                 : Target version up to which Flyway should use migrations");
         LOG.info("outOfOrder             : Allows migrations to be run \"out of order\"");
         LOG.info("callbacks              : Comma-separated list of FlywayCallback classes");
         LOG.info("validateOnMigrate      : Validate when running migrate");

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -237,8 +237,9 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
     private boolean cleanOnValidationError = flyway.isCleanOnValidationError();
 
     /**
-     * The target version up to which Flyway should run migrations. Migrations with a higher version number will not be
-     * applied. (default: the latest version)
+     * The target version up to which Flyway should consider migrations.
+     * Migrations with a higher version number will be ignored.
+     * The special value {@code current} designates the current version of the schema. (default: the latest version)
      * <p>Also configurable with Maven or System Property: ${flyway.target}</p>
      *
      * @parameter property="flyway.target"

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -221,8 +221,7 @@ private static void printUsage() {
         LOG.info("jarDir                 : Dir for Jdbc drivers & Java migrations (default: jars)");
         LOG.info("");
         LOG.info("Add -X to print debug output");
-        LOG.info("");
-        LOG.info("Add -q to only print level output");
+        LOG.info("Add -q to suppress all output, except for errors and warnings");
         LOG.info("");
         LOG.info("Example");
         LOG.info("=======");

File: flyway-commandline/src/main/java/org/flywaydb/commandline/ConsoleLogCreator.java
Patch:
@@ -28,7 +28,7 @@ public class ConsoleLogCreator implements LogCreator {
     /**
      * Creates a new Console Log Creator.
      *
-     * @param debug {@code true} for also printing debug statements, {@code false} for only info and higher.
+     * @param level The minimum level to log at.
      */
     public ConsoleLogCreator(Level level) {
         this.level = level;

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -48,7 +48,7 @@ public class Main {
     /**
      * Initializes the logging.
      *
-     * @param debug {@code true} for also printing debug statements, {@code false} for only info and higher.
+     * @param level The minimum level to log at.
      */
     static void initLogging(Level level) {
         LogFactory.setLogCreator(new ConsoleLogCreator(level));
@@ -140,7 +140,8 @@ private static Level getLogLevel(String[] args) {
     	for(String arg : args) {
     		if ("-X".equals(arg)) {
     			return Level.DEBUG;
-    		} else if ("-q".equals(arg)) {
+    		}
+            if ("-q".equals(arg)) {
     			return Level.WARN;
     		}
     	}

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/mysql/MySQLSqlStatementBuilder.java
Patch:
@@ -87,7 +87,7 @@ protected String removeEscapedQuotes(String token) {
     }
 
     @Override
-    protected String removeCharsetCasting(String token) {
+    protected String cleanToken(String token) {
         if (token.startsWith("_")) {
             for (String charSet : charSets) {
                 String cast = "_" + charSet;

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLSqlStatementBuilderSmallTest.java
Patch:
@@ -62,7 +62,7 @@ public void function() {
 
     @Test
     public void ts() {
-        String line = "insert into testDate values ({ts '2015-01-01 00:00:00'})";
+        String line = "insert into testDate values (TIMESTAMP '2004-10-19 10:23:54')";
         statementBuilder.addLine(line + ";\n");
         assertTrue(statementBuilder.isTerminated());
         assertEquals(line, statementBuilder.getSqlStatement().getSql());

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/solid/SolidDbSupport.java
Patch:
@@ -69,7 +69,7 @@ protected void doSetCurrentSchema(final Schema schema) throws SQLException {
 
     @Override
     public String getCurrentUserFunction() {
-        return "NAME FROM _SYSTEM.SYS_USERS WHERE ID = LOGIN_USERID()";
+        return "LOGIN_SCHEMA()";
     }
 
     @Override
@@ -89,7 +89,7 @@ public String getBooleanFalse() {
 
     @Override
     protected String doQuote(final String identifier) {
-        return "'" + identifier + "'";
+        return "\"" + identifier + "\"";
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/solid/SolidTable.java
Patch:
@@ -47,7 +47,7 @@ protected boolean doExists() throws SQLException {
 
     @Override
     protected void doLock() throws SQLException {
-        jdbcTemplate.execute("SELECT * FROM " + this + " FOR UPDATE");
+        jdbcTemplate.execute("LOCK TABLE " + this + " IN EXCLUSIVE MODE");
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1003,13 +1003,13 @@ public Void execute(Connection connectionMetaDataTable, Connection connectionUse
      * @param migrationResolver       The migration resolver;
      * @param metaDataTable           The metadata table.
      * @param schemas                 The schemas managed by Flyway.
-     * @param pending                 Whether pending migrations are ok.
+     * @param pendingOrFuture         Whether pending or future migrations are ok.
      */
     private void doValidate(Connection connectionMetaDataTable, Connection connectionUserObjects, MigrationResolver migrationResolver,
-                            MetaDataTable metaDataTable, Schema[] schemas, boolean pending) {
+                            MetaDataTable metaDataTable, Schema[] schemas, boolean pendingOrFuture) {
         String validationError =
                 new DbValidate(connectionMetaDataTable, connectionUserObjects, metaDataTable, migrationResolver,
-                        target, outOfOrder, pending, callbacks).validate();
+                        target, outOfOrder, pendingOrFuture, callbacks).validate();
 
         if (validationError != null) {
             if (cleanOnValidationError) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoImpl.java
Patch:
@@ -174,14 +174,15 @@ public Integer getExecutionTime() {
      * @return The error message, or {@code null} if everything is fine.
      */
     public String validate() {
-        if ((resolvedMigration == null)
+        if (!context.pendingOrFuture
+                && (resolvedMigration == null)
                 && (appliedMigration.getType() != MigrationType.SCHEMA)
                 && (appliedMigration.getType() != MigrationType.BASELINE)
                 && (appliedMigration.getType() != MigrationType.INIT)) {
             return "Detected applied migration missing on the classpath: " + getVersion();
         }
 
-        if ((!context.pending && (MigrationState.PENDING == getState()))
+        if ((!context.pendingOrFuture && (MigrationState.PENDING == getState()))
                 || (MigrationState.IGNORED == getState())) {
             return "Migration on the classpath has not been applied to database: " + getVersion();
         }

File: flyway-core/src/test/java/org/flywaydb/core/FlywayMediumTest.java
Patch:
@@ -298,6 +298,8 @@ public void futureMigrations() {
         flyway.migrate();
 
         flyway.setLocations("migration/empty");
+        flyway.setValidateOnMigrate(true);
+        flyway.migrate();
         assertEquals(MigrationState.FUTURE_SUCCESS, flyway.info().applied()[0].getState());
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -926,7 +926,7 @@ public Integer execute(Connection connectionMetaDataTable, Connection connection
 
                 new DbSchemas(connectionMetaDataTable, schemas, metaDataTable).create();
 
-                if (!metaDataTable.hasSchemasMarker() && !metaDataTable.hasInitMarker() && !metaDataTable.hasAppliedMigrations()) {
+                if (!metaDataTable.hasBaselineMarker() && !metaDataTable.hasAppliedMigrations()) {
                     List<Schema> nonEmptySchemas = new ArrayList<Schema>();
                     for (Schema schema : schemas) {
                         if (!schema.empty()) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoServiceImpl.java
Patch:
@@ -131,8 +131,9 @@ List<MigrationInfoImpl> mergeAvailableAndAppliedMigrations(Collection<ResolvedMi
             if (appliedMigration.getType() == MigrationType.SCHEMA) {
                 context.schema = version;
             }
-            if (appliedMigration.getType() == MigrationType.INIT) {
+            if ((appliedMigration.getType() == MigrationType.INIT) || (appliedMigration.getType() == MigrationType.BASELINE)) {
                 context.init = version;
+                context.baseline = version;
             }
             appliedMigrationsMap.put(version, appliedMigration);
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/metadatatable/MetaDataTable.java
Patch:
@@ -55,21 +55,21 @@ public interface MetaDataTable {
      * @param initVersion     The version to tag an existing schema with when executing baseline.
      * @param initDescription The description to tag an existing schema with when executing baseline.
      */
-    void addInitMarker(MigrationVersion initVersion, String initDescription);
+    void addBaselineMarker(MigrationVersion initVersion, String initDescription);
 
     /**
      * Checks whether the metadata table contains a marker row for schema baseline.
      *
      * @return {@code true} if it does, {@code false} if it doesn't.
      */
-    boolean hasInitMarker();
+    boolean hasBaselineMarker();
 
     /**
      * Retrieves the baseline marker from the metadata table.
      *
      * @return The baseline marker or {@code null} if none could be found.
      */
-    AppliedMigration getInitMarker();
+    AppliedMigration getBaselineMarker();
 
     /**
      * <p>

File: flyway-core/src/test/java/org/flywaydb/core/internal/info/MigrationInfoServiceImplSmallTest.java
Patch:
@@ -126,7 +126,7 @@ public void twoAppliedOneFuture() {
     }
 
     @Test
-    public void preInit() {
+    public void belowBaseline() {
         MigrationInfoServiceImpl migrationInfoService =
                 new MigrationInfoServiceImpl(
                         createMigrationResolver(createAvailableMigration(1)),
@@ -135,7 +135,7 @@ public void preInit() {
         migrationInfoService.refresh();
 
         assertEquals("2", migrationInfoService.current().getVersion().toString());
-        assertEquals(MigrationState.PREINIT, migrationInfoService.all()[0].getState());
+        assertEquals(MigrationState.BELOW_BASELINE, migrationInfoService.all()[0].getState());
         assertEquals(2, migrationInfoService.all().length);
         assertEquals(0, migrationInfoService.pending().length);
     }

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -439,7 +439,7 @@ public void nonEmptySchemaWithInitOnMigrate() throws Exception {
 
         assertEquals(5, migrationInfos.length);
 
-        assertEquals(org.flywaydb.core.api.MigrationType.INIT, migrationInfos[0].getType());
+        assertEquals(MigrationType.BASELINE, migrationInfos[0].getType());
         assertEquals("0", migrationInfos[0].getVersion().toString());
 
         assertEquals("2.0", flyway.info().current().getVersion().toString());
@@ -461,10 +461,10 @@ public void nonEmptySchemaWithInitOnMigrateHighVersion() throws Exception {
 
         assertEquals(MigrationType.SQL, migrationInfos[0].getType());
         assertEquals("1", migrationInfos[0].getVersion().toString());
-        assertEquals(org.flywaydb.core.api.MigrationState.PREINIT, migrationInfos[0].getState());
+        assertEquals(MigrationState.BELOW_BASELINE, migrationInfos[0].getState());
 
         MigrationInfo migrationInfo = flyway.info().current();
-        assertEquals(MigrationType.INIT, migrationInfo.getType());
+        assertEquals(MigrationType.BASELINE, migrationInfo.getType());
         assertEquals("99", migrationInfo.getVersion().toString());
     }
 

File: flyway-commandline/src/test/java/org/flywaydb/commandline/MainSmallTest.java
Patch:
@@ -36,7 +36,7 @@ public void setUp() {
     @Test
     public void isPropertyArgument() {
         assertTrue(Main.isPropertyArgument("-user=SA"));
-        assertFalse(Main.isPropertyArgument("init"));
+        assertFalse(Main.isPropertyArgument("baseline"));
     }
 
     @Test

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationType.java
Patch:
@@ -25,7 +25,7 @@ public enum MigrationType {
     SCHEMA,
 
     /**
-     * The type for the metadata init migration.
+     * The type for the metadata baseline migration.
      */
     INIT,
 

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/FlywayCallback.java
Patch:
@@ -87,14 +87,14 @@ public interface FlywayCallback {
 	void afterValidate(Connection connection);
 
 	/**
-	 * Runs before the init task executes.
+	 * Runs before the baseline task executes.
 	 * 
 	 * @param connection A valid connection to the database.
 	 */
 	void beforeInit(Connection connection);
 
 	/**
-	 * Runs after the init task executes.
+	 * Runs after the baseline task executes.
 	 * 
 	 * @param connection A valid connection to the database.
 	 */

File: flyway-core/src/main/java/org/flywaydb/core/internal/metadatatable/MetaDataTableImpl.java
Patch:
@@ -322,7 +322,7 @@ public boolean hasInitMarker() {
                     "SELECT COUNT(*) FROM " + table + " WHERE " + dbSupport.quote("type") + "='INIT'");
             return count > 0;
         } catch (SQLException e) {
-            throw new FlywayException("Unable to check whether the metadata table " + table + " has an init marker migration", e);
+            throw new FlywayException("Unable to check whether the metadata table " + table + " has an baseline marker migration", e);
         }
     }
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/info/MigrationInfoServiceImplSmallTest.java
Patch:
@@ -209,10 +209,10 @@ private AppliedMigration createAppliedMigration(int version, String description)
     }
 
     /**
-     * Creates a new applied init migration with this version.
+     * Creates a new applied baseline migration with this version.
      *
      * @param version The version of the migration.
-     * @return The applied init migration.
+     * @return The applied baseline migration.
      */
     private AppliedMigration createAppliedInitMigration(int version) {
         return new AppliedMigration(version, version, MigrationVersion.fromVersion(Integer.toString(version)), "abc",

File: flyway-gradle-plugin/src/main/groovy/org/flywaydb/gradle/FlywayPlugin.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.flywaydb.gradle.task.FlywayCleanTask;
 import org.flywaydb.gradle.task.FlywayInfoTask;
+import org.flywaydb.gradle.task.FlywayBaselineTask;
 import org.flywaydb.gradle.task.FlywayInitTask;
 import org.flywaydb.gradle.task.FlywayMigrateTask;
 import org.flywaydb.gradle.task.FlywayRepairTask;
@@ -36,6 +37,7 @@ public void apply(Project project) {
         project.getExtensions().create("flyway", FlywayExtension.class);
         project.getTasks().create("flywayClean", FlywayCleanTask.class);
         project.getTasks().create("flywayInit", FlywayInitTask.class);
+        project.getTasks().create("flywayBaseline", FlywayBaselineTask.class);
         project.getTasks().create("flywayMigrate", FlywayMigrateTask.class);
         project.getTasks().create("flywayValidate", FlywayValidateTask.class);
         project.getTasks().create("flywayInfo", FlywayInfoTask.class);

File: flyway-core/src/main/java/org/flywaydb/core/internal/info/MigrationInfoDumper.java
Patch:
@@ -56,7 +56,7 @@ public static String dumpToAsciiTable(MigrationInfo[] migrationInfos) {
         table.append(ruler);
 
         if (migrationInfos.length == 0) {
-            table.append("| No migrations found                                                         |\n");
+            table.append(StringUtils.trimOrPad("| No migrations found", ruler.length() - 2, ' ')).append("|\n");
         } else {
             for (MigrationInfo migrationInfo : migrationInfos) {
                 table.append("| ").append(StringUtils.trimOrPad(migrationInfo.getVersion().toString(), versionWidth));

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/DriverDataSource.java
Patch:
@@ -295,7 +295,7 @@ protected Connection getConnectionFromDriver(String username, String password) t
             connection = driver.connect(url, props);
         } catch (SQLException e) {
             throw new FlywayException(
-                    "Unable to obtain Jdbc connection from DataSource (" + url + ") for user '" + user + "'", e);
+                    "Unable to obtain Jdbc connection from DataSource (" + url + ") for user '" + user + "': " + e.getMessage(), e);
         }
 
         for (String initSql : initSqls) {

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/FileSystemClassPathLocationScanner.java
Patch:
@@ -41,8 +41,8 @@ public Set<String> findResourceNames(String location, URL locationUrl) throws IO
         }
 
         String classPathRootOnDisk = filePath.substring(0, filePath.length() - location.length());
-        if (!classPathRootOnDisk.endsWith("/")) {
-            classPathRootOnDisk = classPathRootOnDisk + "/";
+        if (!classPathRootOnDisk.endsWith(File.separator)) {
+            classPathRootOnDisk = classPathRootOnDisk + File.separator;
         }
         LOG.debug("Scanning starting at classpath root in filesystem: " + classPathRootOnDisk);
         return findResourceNamesFromFileSystem(classPathRootOnDisk, location, folder);
@@ -87,7 +87,7 @@ Set<String> findResourceNamesFromFileSystem(String classPathRootOnDisk, String s
      * @throws IOException when the file could not be read.
      */
     private String toResourceNameOnClasspath(String classPathRootOnDisk, File file) throws IOException {
-        String fileName = URLDecoder.decode(file.toURI().toURL().getFile(), "UTF-8");
+        String fileName = file.getAbsolutePath().replace("\\", "/");
 
         //Cut off the part on disk leading to the root of the classpath
         //This leaves a resource name starting with the scanRootLocation,

File: flyway-core/src/test/java/org/flywaydb/core/internal/util/scanner/classpath/FileSystemLocationScannerMediumTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.flywaydb.core.internal.util.scanner.classpath;
 
+import org.flywaydb.core.internal.util.UrlUtils;
 import org.junit.Test;
 
 import java.io.File;
@@ -31,11 +32,10 @@ public class FileSystemLocationScannerMediumTest {
     @Test
     public void findResourceNamesFromFileSystem() throws Exception {
         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
-        String url = classLoader.getResources("migration").nextElement().getFile();
-        String path = URLDecoder.decode(url, "UTF-8") + "/";
+        String path = UrlUtils.toFilePath(classLoader.getResources("migration").nextElement()) + File.separator;
 
         Set<String> resourceNames =
-                new FileSystemClassPathLocationScanner().findResourceNamesFromFileSystem(path, "sql", new File(path + "sql"));
+                new FileSystemClassPathLocationScanner().findResourceNamesFromFileSystem(path, "sql", new File(path, "sql"));
 
         assertEquals(4, resourceNames.size());
         String[] names = resourceNames.toArray(new String[4]);

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/DriverDataSource.java
Patch:
@@ -37,6 +37,7 @@
  */
 public class DriverDataSource implements DataSource {
     private static final String MARIADB_JDBC_DRIVER = "org.mariadb.jdbc.Driver";
+    private static final String MYSQL_JDBC_URL_PREFIX = "jdbc:mysql:";
 
     /**
      * The JDBC Driver instance to use.
@@ -133,7 +134,7 @@ public DriverDataSource(ClassLoader classLoader, String driverClass, String url,
      * @return The Jdbc driver. {@code null} if none.
      */
     private String getBackupDriverForUrl(String url) {
-        if (url.startsWith("jdbc:mysql:")) {
+        if (url.startsWith(MYSQL_JDBC_URL_PREFIX)) {
             return MARIADB_JDBC_DRIVER;
         }
 
@@ -175,7 +176,7 @@ private String detectDriverForUrl(String url) {
             return "org.sqldroid.SQLDroidDriver";
         }
 
-        if (url.startsWith("jdbc:mysql:")) {
+        if (url.startsWith(MYSQL_JDBC_URL_PREFIX)) {
             return "com.mysql.jdbc.Driver";
         }
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/db2/DB2SchemaSmallTest.java
Patch:
@@ -79,7 +79,7 @@ public void verifyDropVersioningV10() throws SQLException {
         // Return a VERSIONED_TABLE when the SQL to find version tables is called.
         List<String> versionedTables = new ArrayList<String>();
         versionedTables.add("VERSIONED_TABLE");
-        when(jdbcTemplate.queryForStringList("select rtrim(TABNAME) from SYSCAT.TABLES where TEMPORALTYPE <> 'N' and TABSCHEMA = ?", "SCHEMA")).thenReturn(versionedTables);
+        when(jdbcTemplate.queryForStringList("select TABNAME from SYSCAT.TABLES where TEMPORALTYPE <> 'N' and TABSCHEMA = ?", "SCHEMA")).thenReturn(versionedTables);
 
         when(dbSupport.getDb2MajorVersion()).thenReturn(10);
         when(dbSupport.quote("SCHEMA", "VERSIONED_TABLE")).thenReturn("SCHEMA.VERSIONED_TABLE");

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathResource.java
Patch:
@@ -19,6 +19,7 @@
 import org.flywaydb.core.internal.util.FileCopyUtils;
 import org.flywaydb.core.internal.util.scanner.Resource;
 
+import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
@@ -63,7 +64,7 @@ public String getLocationOnDisk() {
             throw new FlywayException("Unable to location resource on disk: " + location);
         }
         try {
-            return URLDecoder.decode(url.getPath(), "UTF-8");
+            return new File(URLDecoder.decode(url.getPath(), "UTF-8")).getAbsolutePath();
         } catch (UnsupportedEncodingException e) {
             throw new FlywayException("Unknown encoding: UTF-8", e);
         }

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -253,6 +253,7 @@ public void failedMigration() throws Exception {
             flyway.migrate();
             fail();
         } catch (FlywaySqlScriptException e) {
+            System.out.println(e.getMessage());
             // root cause of exception must be defined, and it should be FlywaySqlScriptException
             assertNotNull(e.getCause());
             assertTrue(e.getCause() instanceof SQLException);

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathScanner.java
Patch:
@@ -111,7 +111,7 @@ public Class<?>[] scanForClasses(String location, Class<?> implementedInterface)
             try {
                 ClassUtils.instantiate(className, classLoader);
             } catch (Exception e) {
-                throw new FlywayException("Unable to instantiate class: " + className);
+                throw new FlywayException("Unable to instantiate class: " + className, e);
             }
 
             classes.add(clazz);

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/ClassUtils.java
Patch:
@@ -64,7 +64,7 @@ public static <T> List<T> instantiateAll(String[] classes, ClassLoader classLoad
                 try {
                     clazzes.add(ClassUtils.<T>instantiate(clazz, classLoader));
                 } catch (Exception e) {
-                    throw new FlywayException("Unable to instantiate class: " + clazz);
+                    throw new FlywayException("Unable to instantiate class: " + clazz, e);
                 }
             }
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/JdbcTemplate.java
Patch:
@@ -240,9 +240,9 @@ public void executeStatement(String sql) throws SQLException {
                 @SuppressWarnings("ThrowableResultOfMethodCallIgnored") SQLWarning warning = statement.getWarnings();
                 while (warning != null) {
                     if ("00000".equals(warning.getSQLState())) {
-                        LOG.info(warning.getMessage());
+                        LOG.info("DB: " + warning.getMessage());
                     } else {
-                        LOG.warn(warning.getMessage()
+                        LOG.warn("DB: " + warning.getMessage()
                                 + " (SQL State: " + warning.getSQLState() + " - Error Code: " + warning.getErrorCode() + ")");
                     }
                     warning = warning.getNextWarning();

File: flyway-commandline-largetest/src/test/java/org/flywaydb/commandline/largetest/CommandLineLargeTest.java
Patch:
@@ -76,9 +76,8 @@ public void infoWithCallback() throws Exception {
     public void exitCodeForFailedMigration() throws Exception {
         String stdOut = runFlywayCommandLine(1, "largeTest.properties", "migrate", "-locations=filesystem:sql/invalid");
         assertTrue(stdOut.contains("Migration of schema \"PUBLIC\" to version 1 failed!"));
-        assertTrue(stdOut.contains("ERROR: Error executing statement at line 17: InVaLiD SqL !!!\n"
-                + "ERROR: Caused by: org.hsqldb.HsqlException: unexpected token: INVALID\n"
-                + "ERROR: Occured in org.hsqldb.error.Error.parseError() at line -1"));
+        assertTrue(stdOut.contains("17"));
+        assertTrue(stdOut.contains("InVaLiD SqL !!!"));
     }
 
     @Test

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/solid/SolidDbSupport.java
Patch:
@@ -69,7 +69,7 @@ protected void doSetCurrentSchema(final Schema schema) throws SQLException {
 
     @Override
     public String getCurrentUserFunction() {
-        return "NAME FROM _SYSTEM.SYS_USERS WHERE ID = LOGIN_USERID()";
+        return "LOGIN_SCHEMA()";
     }
 
     @Override
@@ -89,7 +89,7 @@ public String getBooleanFalse() {
 
     @Override
     protected String doQuote(final String identifier) {
-        return "'" + identifier + "'";
+        return "\"" + identifier + "\"";
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/solid/SolidTable.java
Patch:
@@ -47,7 +47,7 @@ protected boolean doExists() throws SQLException {
 
     @Override
     protected void doLock() throws SQLException {
-        jdbcTemplate.execute("SELECT * FROM " + this + " FOR UPDATE");
+        jdbcTemplate.execute("LOCK TABLE " + this + " IN EXCLUSIVE MODE");
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -48,7 +48,7 @@ public abstract class MigrationTestCase {
     /**
      * The base directory for the regular test migrations.
      */
-    private static final String BASEDIR = "migration/sql";
+    protected static final String BASEDIR = "migration/sql";
 
     protected DataSource dataSource;
     private Connection connection;

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/vertica/VerticaSqlScriptSmallTest.java
Patch:
@@ -35,9 +35,9 @@ public void parseSqlStatementsDo() throws Exception {
 
         SqlScript sqlScript = new SqlScript(source, new VerticaDbSupport(null));
         List<SqlStatement> sqlStatements = sqlScript.getSqlStatements();
-        assertEquals(3, sqlStatements.size());
+        assertEquals(10, sqlStatements.size());
         assertEquals(17, sqlStatements.get(0).getLineNumber());
         assertEquals(19, sqlStatements.get(1).getLineNumber());
-        assertEquals(23, sqlStatements.get(2).getLineNumber());
+        assertEquals(20, sqlStatements.get(2).getLineNumber());
     }
 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLSqlStatementBuilder.java
Patch:
@@ -28,13 +28,13 @@ public class PostgreSQLSqlStatementBuilder extends SqlStatementBuilder {
      * Matches $$, $BODY$, $xyz123$, ...
      */
     /*private -> for testing*/
-    static final String DOLLAR_QUOTE_REGEX = "\\$[A-Za-z0-9_]*\\$.*";
+    static final String DOLLAR_QUOTE_REGEX = "(\\$[A-Za-z0-9_]*\\$).*";
 
     @Override
     protected String extractAlternateOpenQuote(String token) {
         Matcher matcher = Pattern.compile(DOLLAR_QUOTE_REGEX).matcher(token);
         if (matcher.find()) {
-            return token.substring(matcher.start(), matcher.end());
+            return matcher.group(1);
         }
         return null;
     }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/DbSupportFactory.java
Patch:
@@ -39,9 +39,6 @@
  * Factory for obtaining the correct DbSupport instance for the current connection.
  */
 public class DbSupportFactory {
-    /**
-     * Logger.
-     */
     private static final Log LOG = LogFactory.getLog(DbSupportFactory.class);
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/LogFactory.java
Patch:
@@ -19,6 +19,7 @@
 import org.flywaydb.core.internal.util.logging.android.AndroidLogCreator;
 import org.flywaydb.core.internal.util.logging.apachecommons.ApacheCommonsLogCreator;
 import org.flywaydb.core.internal.util.logging.javautil.JavaUtilLogCreator;
+import org.flywaydb.core.internal.util.logging.slf4j.Slf4jLogCreator;
 
 /**
  * Factory for loggers.
@@ -54,6 +55,8 @@ public static Log getLog(Class<?> clazz) {
             FeatureDetector featureDetector = new FeatureDetector(Thread.currentThread().getContextClassLoader());
             if (featureDetector.isAndroidAvailable()) {
                 logCreator = new AndroidLogCreator();
+            } else if (featureDetector.isSlf4jAvailable()) {
+                logCreator = new Slf4jLogCreator();
             } else if (featureDetector.isApacheCommonsLoggingAvailable()) {
                 logCreator = new ApacheCommonsLogCreator();
             } else {

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/logging/slf4j/Slf4jLogCreator.java
Patch:
@@ -17,13 +17,13 @@
 
 import org.flywaydb.core.internal.util.logging.Log;
 import org.flywaydb.core.internal.util.logging.LogCreator;
-import org.apache.commons.logging.LogFactory;
+import org.slf4j.LoggerFactory;
 
 /**
- * Log Creator for Apache Commons Logging.
+ * Log Creator for Slf4j.
  */
 public class Slf4jLogCreator implements LogCreator {
     public Log createLogger(Class<?> clazz) {
-        return new Slf4jLog(LogFactory.getLog(clazz));
+        return new Slf4jLog(LoggerFactory.getLogger(clazz));
     }
 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathScanner.java
Patch:
@@ -99,8 +99,8 @@ public Class<?>[] scanForClasses(String location, Class<?> implementedInterface)
             String className = toClassName(resourceName);
             Class<?> clazz = classLoader.loadClass(className);
 
-            if (Modifier.isAbstract(clazz.getModifiers())) {
-                LOG.debug("Skipping abstract class: " + className);
+            if (Modifier.isAbstract(clazz.getModifiers()) || clazz.isEnum() || clazz.isAnonymousClass()) {
+                LOG.debug("Skipping non-instantiable class: " + className);
                 continue;
             }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/JdbcTemplate.java
Patch:
@@ -232,6 +232,7 @@ public void executeStatement(String sql) throws SQLException {
         Statement statement = null;
         try {
             statement = connection.createStatement();
+            statement.setEscapeProcessing(false);
             boolean hasResults = statement.execute(sql);
             // retrieve all results to ensure all errors are detected
             while (hasResults || statement.getUpdateCount() != -1) {

File: flyway-core/src/test/java/org/flywaydb/core/DbCategory.java
Patch:
@@ -39,6 +39,7 @@ public interface PostgreSQL extends OpenSourceDB {}
     public interface DB2 extends CommercialDB {}
     public interface Oracle extends CommercialDB {}
     public interface SQLServer extends CommercialDB {}
+    public interface GoogleCloudSQL extends CommercialDB {}
 
     public interface DB2zOS extends ContributorSupportedDB {}
     public interface Vertica extends ContributorSupportedDB {}

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/mysql/GoogleCloudSQLMigrationMediumTest.java
Patch:
@@ -30,7 +30,7 @@
  * Test to demonstrate the migration functionality using Google Cloud SQL.
  */
 @SuppressWarnings({"JavaDoc"})
-@Category(DbCategory.MySQL.class)
+@Category(DbCategory.GoogleCloudSQL.class)
 public class GoogleCloudSQLMigrationMediumTest extends MySQLMigrationTestCase {
     private LocalServiceTestHelper helper;
 

File: flyway-core/src/test/java/org/flywaydb/core/DbCategory.java
Patch:
@@ -37,10 +37,10 @@ public interface MariaDB extends OpenSourceDB {}
     public interface PostgreSQL extends OpenSourceDB {}
 
     public interface DB2 extends CommercialDB {}
-    public interface DB2zOS extends CommercialDB {}
     public interface Oracle extends CommercialDB {}
     public interface SQLServer extends CommercialDB {}
 
+    public interface DB2zOS extends ContributorSupportedDB {}
     public interface Vertica extends ContributorSupportedDB {}
     public interface Redshift extends ContributorSupportedDB {}
 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/redshift/RedshiftDbSupport.java
Patch:
@@ -68,7 +68,7 @@ public Schema getSchema(String name) {
     }
 
     /**
-     * @return true if we are connected to Redshift; false otherwise
+     * @return {@code true} if we are connected to Redshift; {@code false} otherwise
      */
     public boolean detect() {
         try {

File: flyway-core/src/test/java/org/flywaydb/core/DbCategory.java
Patch:
@@ -27,7 +27,6 @@ public interface OpenSourceDB extends InstallableDB {}
     public interface CommercialDB extends InstallableDB {}
     public interface ContributorSupportedDB extends CommercialDB {}
 
-    // specific DBs
     public interface Derby extends EmbeddedDB {}
     public interface H2 extends EmbeddedDB {}
     public interface HSQL extends EmbeddedDB {}
@@ -39,8 +38,8 @@ public interface PostgreSQL extends OpenSourceDB {}
 
     public interface DB2 extends CommercialDB {}
     public interface Oracle extends CommercialDB {}
-    public interface Redshift extends CommercialDB {}
     public interface SQLServer extends CommercialDB {}
 
     public interface Vertica extends ContributorSupportedDB {}
+    public interface Redshift extends ContributorSupportedDB {}
 }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/jdbc/DriverDataSource.java
Patch:
@@ -281,6 +281,7 @@ protected Connection getConnectionFromDriver(String username, String password) t
             InvocationHandler suppressCloseHandler = new SuppressCloseHandler(connection);
             singleConnection =
                     (Connection) Proxy.newProxyInstance(classLoader, new Class[] {Connection.class}, suppressCloseHandler);
+            return singleConnection;
         }
 
         return connection;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/redshift/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package org.flywaydb.core.internal.dbsupport.redshift;
\ No newline at end of file
+package org.flywaydb.core.internal.dbsupport.redshift;

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/redshift/RedshiftConcurrentMigrationMediumTest.java
Patch:
@@ -38,4 +38,4 @@ protected DataSource createDataSource(Properties customProperties) {
 
         return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
-}
\ No newline at end of file
+}

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/redshift/RedshiftSchema.java
Patch:
@@ -18,9 +18,9 @@
 import java.sql.SQLException;
 import java.util.List;
 
-import org.flywaydb.core.internal.dbsupport.DbSupport;
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.dbsupport.Table;
+import org.flywaydb.core.internal.dbsupport.postgresql.PostgreSQLDbSupport;
 import org.flywaydb.core.internal.dbsupport.postgresql.PostgreSQLSchema;
 
 /**
@@ -34,7 +34,7 @@ public class RedshiftSchema extends PostgreSQLSchema {
      * @param dbSupport    The database-specific support.
      * @param name         The name of the schema.
      */
-    public RedshiftSchema(JdbcTemplate jdbcTemplate, DbSupport dbSupport, String name) {
+    public RedshiftSchema(JdbcTemplate jdbcTemplate, PostgreSQLDbSupport dbSupport, String name) {
         super(jdbcTemplate, dbSupport, name);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/vertica/VerticaSchema.java
Patch:
@@ -20,16 +20,15 @@
 import java.util.List;
 import java.util.Map;
 
-import org.flywaydb.core.internal.dbsupport.DbSupport;
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.Table;
 import org.flywaydb.core.internal.dbsupport.Type;
 import org.flywaydb.core.internal.dbsupport.postgresql.PostgreSQLTable;
 
-public class VerticaSchema extends Schema {
+public class VerticaSchema extends Schema<VerticaDbSupport> {
 
-    public VerticaSchema(JdbcTemplate jdbcTemplate, DbSupport dbSupport, String name) {
+    public VerticaSchema(JdbcTemplate jdbcTemplate, VerticaDbSupport dbSupport, String name) {
         super(jdbcTemplate, dbSupport, name);
     }
     

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/Schema.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Represents a database schema.
  */
-public abstract class Schema {
+public abstract class Schema<S extends DbSupport> {
     /**
      * The Jdbc Template for communicating with the DB.
      */
@@ -35,7 +35,7 @@ public abstract class Schema {
     /**
      * The database-specific support.
      */
-    protected final DbSupport dbSupport;
+    protected final S dbSupport;
 
     /**
      * The name of the schema.
@@ -49,7 +49,7 @@ public abstract class Schema {
      * @param dbSupport    The database-specific support.
      * @param name         The name of the schema.
      */
-    public Schema(JdbcTemplate jdbcTemplate, DbSupport dbSupport, String name) {
+    public Schema(JdbcTemplate jdbcTemplate, S dbSupport, String name) {
         this.jdbcTemplate = jdbcTemplate;
         this.dbSupport = dbSupport;
         this.name = name;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/derby/DerbySchema.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.flywaydb.core.internal.dbsupport.derby;
 
-import org.flywaydb.core.internal.dbsupport.DbSupport;
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.Table;
@@ -29,15 +28,15 @@
 /**
  * Derby implementation of Schema.
  */
-public class DerbySchema extends Schema {
+public class DerbySchema extends Schema<DerbyDbSupport> {
     /**
      * Creates a new Derby schema.
      *
      * @param jdbcTemplate The Jdbc Template for communicating with the DB.
      * @param dbSupport    The database-specific support.
      * @param name         The name of the schema.
      */
-    public DerbySchema(JdbcTemplate jdbcTemplate, DbSupport dbSupport, String name) {
+    public DerbySchema(JdbcTemplate jdbcTemplate, DerbyDbSupport dbSupport, String name) {
         super(jdbcTemplate, dbSupport, name);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/h2/H2Schema.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.flywaydb.core.internal.dbsupport.h2;
 
-import org.flywaydb.core.internal.dbsupport.DbSupport;
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.Table;
@@ -30,7 +29,7 @@
 /**
  * H2 implementation of Schema.
  */
-public class H2Schema extends Schema {
+public class H2Schema extends Schema<H2DbSupport> {
     private static final Log LOG = LogFactory.getLog(H2Schema.class);
 
     /**
@@ -40,7 +39,7 @@ public class H2Schema extends Schema {
      * @param dbSupport    The database-specific support.
      * @param name         The name of the schema.
      */
-    public H2Schema(JdbcTemplate jdbcTemplate, DbSupport dbSupport, String name) {
+    public H2Schema(JdbcTemplate jdbcTemplate, H2DbSupport dbSupport, String name) {
         super(jdbcTemplate, dbSupport, name);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/hsql/HsqlSchema.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.flywaydb.core.internal.dbsupport.hsql;
 
-import org.flywaydb.core.internal.dbsupport.DbSupport;
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.dbsupport.Schema;
 import org.flywaydb.core.internal.dbsupport.Table;
@@ -27,15 +26,15 @@
 /**
  * Hsql implementation of Schema.
  */
-public class HsqlSchema extends Schema {
+public class HsqlSchema extends Schema<HsqlDbSupport> {
     /**
      * Creates a new Hsql schema.
      *
      * @param jdbcTemplate The Jdbc Template for communicating with the DB.
      * @param dbSupport    The database-specific support.
      * @param name         The name of the schema.
      */
-    public HsqlSchema(JdbcTemplate jdbcTemplate, DbSupport dbSupport, String name) {
+    public HsqlSchema(JdbcTemplate jdbcTemplate, HsqlDbSupport dbSupport, String name) {
         super(jdbcTemplate, dbSupport, name);
     }
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/command/DbMigrate.java
Patch:
@@ -158,7 +158,7 @@ public MigrationVersion doInTransaction() {
                     metaDataTable.lock();
 
                     MigrationInfoServiceImpl infoService =
-                            new MigrationInfoServiceImpl(migrationResolver, metaDataTable, target, outOfOrder);
+                            new MigrationInfoServiceImpl(migrationResolver, metaDataTable, target, outOfOrder, true);
                     infoService.refresh();
 
                     MigrationVersion currentSchemaVersion = MigrationVersion.EMPTY;

File: flyway-core/src/test/java/org/flywaydb/core/internal/info/MigrationInfoDumperSmallTest.java
Patch:
@@ -55,7 +55,7 @@ public void dump2pending() {
         MigrationInfoServiceImpl migrationInfoService =
                 new MigrationInfoServiceImpl(
                         createMigrationResolver(createAvailableMigration(1), createAvailableMigration(2)),
-                        createMetaDataTable(), MigrationVersion.LATEST, false);
+                        createMetaDataTable(), MigrationVersion.LATEST, false, true);
         migrationInfoService.refresh();
 
         String table = MigrationInfoDumper.dumpToAsciiTable(migrationInfoService.all());

File: flyway-ant/src/main/java/org/flywaydb/ant/AbstractFlywayTask.java
Patch:
@@ -416,7 +416,7 @@ public void setIgnoreFailedFutureMigration(boolean ignoreFailedFutureMigration)
     }
 
     /**
-     * @param validateOnMigrate Whether to automatically call validate or not when running migrate. (default: {@code false})<br/>
+     * @param validateOnMigrate Whether to automatically call validate or not when running migrate. (default: {@code true})<br/>
      *                          Also configurable with Ant Property: ${flyway.validateOnMigrate}
      */
     public void setValidateOnMigrate(boolean validateOnMigrate) {

File: flyway-core/src/main/java/org/flywaydb/core/api/callback/FlywayCallback.java
Patch:
@@ -20,9 +20,8 @@
 import java.sql.Connection;
 
 /**
- * This is the main callback interface that should be implemented to
- * get access to flyway lifecycle notifications.  Simply add code
- * or logic to the callback method you are interested in having.
+ * This is the main callback interface that should be implemented to get access to flyway lifecycle notifications.
+ * Simply add code to the callback method you are interested in having.
  *
  * <p>Each callback method will run within its own transaction.</p>
  * 

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -302,7 +302,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
     private boolean initOnMigrate = flyway.isInitOnMigrate();
 
     /**
-     * Whether to automatically call validate or not when running migrate. (default: {@code false})<br/>
+     * Whether to automatically call validate or not when running migrate. (default: {@code true})<br/>
      * <p>Also configurable with Maven or System Property: ${flyway.validationErrorMode}</p>
      *
      * @parameter property="flyway.validateOnMigrate"

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/jdbc/JdbcMigrationResolver.java
Patch:
@@ -112,7 +112,8 @@ public List<ResolvedMigration> resolveMigrations() {
             }
         } else {
             Pair<MigrationVersion, String> info =
-                    MigrationInfoHelper.extractVersionAndDescription(ClassUtils.getShortName(jdbcMigration.getClass()), "V", "");
+                    MigrationInfoHelper.extractVersionAndDescription(
+                            ClassUtils.getShortName(jdbcMigration.getClass()), "V", "__", "");
             version = info.getLeft();
             description = info.getRight();
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/spring/SpringJdbcMigrationResolver.java
Patch:
@@ -113,7 +113,8 @@ public Collection<ResolvedMigration> resolveMigrations() {
             }
         } else {
             Pair<MigrationVersion, String> info =
-                    MigrationInfoHelper.extractVersionAndDescription(ClassUtils.getShortName(springJdbcMigration.getClass()), "V", "");
+                    MigrationInfoHelper.extractVersionAndDescription(
+                            ClassUtils.getShortName(springJdbcMigration.getClass()), "V", "__", "");
             version = info.getLeft();
             description = info.getRight();
         }

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/StringUtils.java
Patch:
@@ -133,13 +133,13 @@ public static String replaceAll(String str, String originalToken, String replace
     }
 
     /**
-     * Checks whether this string is not {@code null} and not <i>blank</i>.
+     * Checks whether this string is not {@code null} and not <i>empty</i>.
      *
      * @param str The string to check.
      * @return {@code true} if it has content, {@code false} if it is {@code null} or blank.
      */
     public static boolean hasLength(String str) {
-        return str != null && str.trim().length() > 0;
+        return str != null && str.length() > 0;
     }
 
     /**

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/CompositeMigrationResolverSmallTest.java
Patch:
@@ -42,7 +42,7 @@ public void resolveMigrationsMultipleLocations() {
         MigrationResolver migrationResolver = new CompositeMigrationResolver(null,
                 Thread.currentThread().getContextClassLoader(),
                 new Locations("migration/subdir/dir2", "migration.outoforder", "migration/subdir/dir1"),
-                "UTF-8", "V", ".sql", placeholderReplacer, new MyCustomMigrationResolver());
+                "UTF-8", "V", "__", ".sql", placeholderReplacer, new MyCustomMigrationResolver());
 
         Collection<ResolvedMigration> migrations = migrationResolver.resolveMigrations();
         List<ResolvedMigration> migrationList = new ArrayList<ResolvedMigration>(migrations);

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolverMediumTest.java
Patch:
@@ -39,7 +39,9 @@ public void resolveMigrations() throws Exception {
         String path = URLDecoder.decode(getClass().getClassLoader().getResource("migration/subdir").getPath(), "UTF-8");
 
         SqlMigrationResolver sqlMigrationResolver =
-                new SqlMigrationResolver(null, Thread.currentThread().getContextClassLoader(), new Location("filesystem:" + new File(path).getPath()), PlaceholderReplacer.NO_PLACEHOLDERS, "UTF-8", "V", ".sql");
+                new SqlMigrationResolver(null, Thread.currentThread().getContextClassLoader(),
+                        new Location("filesystem:" + new File(path).getPath()), PlaceholderReplacer.NO_PLACEHOLDERS,
+                        "UTF-8", "V", "__", ".sql");
         Collection<ResolvedMigration> migrations = sqlMigrationResolver.resolveMigrations();
 
         assertEquals(3, migrations.size());

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -181,8 +181,7 @@ private void assertChecksum(MigrationInfo migrationInfo) {
                 new Location(BASEDIR),
                 PlaceholderReplacer.NO_PLACEHOLDERS,
                 "UTF-8",
-                "V",
-                ".sql");
+                "V", "__", ".sql");
         List<ResolvedMigration> migrations = sqlMigrationResolver.resolveMigrations();
         for (ResolvedMigration migration : migrations) {
             if (migration.getVersion().toString().equals(migrationInfo.getVersion().toString())) {

File: flyway-commandline-largetest/src/test/java/org/flywaydb/commandline/largetest/CommandLineLargeTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.commandline.largetest;
 
-import org.flywaydb.core.internal.util.ClassPathResource;
+import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;
 import org.flywaydb.core.internal.util.FileCopyUtils;
 import org.junit.Test;
 import org.w3c.dom.Document;

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.Flyway;
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.internal.info.MigrationInfoDumper;
-import org.flywaydb.core.internal.util.ClassPathResource;
+import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;
 import org.flywaydb.core.internal.util.ClassUtils;
 import org.flywaydb.core.internal.util.ExceptionUtils;
 import org.flywaydb.core.internal.util.FileCopyUtils;

File: flyway-commandline/src/test/java/org/flywaydb/commandline/MainClassLoaderSmallTest.java
Patch:
@@ -16,9 +16,9 @@
 package org.flywaydb.commandline;
 
 import org.flywaydb.core.api.migration.spring.SpringJdbcMigration;
-import org.flywaydb.core.internal.util.ClassPathResource;
+import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;
 import org.flywaydb.core.internal.util.ClassUtils;
-import org.flywaydb.core.internal.util.Resource;
+import org.flywaydb.core.internal.util.scanner.Resource;
 import org.flywaydb.core.internal.util.scanner.classpath.ClassPathScanner;
 import org.junit.After;
 import org.junit.Before;

File: flyway-core/src/main/java/org/flywaydb/core/internal/dbsupport/sqlite/SQLiteSchema.java
Patch:
@@ -55,7 +55,8 @@ protected boolean doExists() throws SQLException {
 
     @Override
     protected boolean doEmpty() throws SQLException {
-        return allTables().length == 0;
+        Table[] tables = allTables();
+        return (tables.length == 0) || ((tables.length == 1) && "android_metadata".equals(tables[0].getName()));
     }
 
     @Override

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/spring/SpringJdbcMigrationResolver.java
Patch:
@@ -30,7 +30,7 @@
 import org.flywaydb.core.internal.util.Location;
 import org.flywaydb.core.internal.util.Pair;
 import org.flywaydb.core.internal.util.StringUtils;
-import org.flywaydb.core.internal.util.scanner.classpath.ClassPathScanner;
+import org.flywaydb.core.internal.util.scanner.Scanner;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -71,7 +71,7 @@ public Collection<ResolvedMigration> resolveMigrations() {
         }
 
         try {
-            Class<?>[] classes = new ClassPathScanner(classLoader).scanForClasses(location.getPath(), SpringJdbcMigration.class);
+            Class<?>[] classes = new Scanner(classLoader).scanForClasses(location, SpringJdbcMigration.class);
             for (Class<?> clazz : classes) {
                 SpringJdbcMigration springJdbcMigration = ClassUtils.instantiate(clazz.getName(), classLoader);
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationExecutor.java
Patch:
@@ -20,7 +20,7 @@
 import org.flywaydb.core.api.resolver.MigrationExecutor;
 import org.flywaydb.core.internal.dbsupport.JdbcTemplate;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
-import org.flywaydb.core.internal.util.Resource;
+import org.flywaydb.core.internal.util.scanner.Resource;
 
 import java.sql.Connection;
 

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathResource.java
Patch:
@@ -13,9 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.internal.util;
+package org.flywaydb.core.internal.util.scanner.classpath;
 
 import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.internal.util.FileCopyUtils;
+import org.flywaydb.core.internal.util.scanner.Resource;
 
 import java.io.IOException;
 import java.io.InputStream;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathScanner.java
Patch:
@@ -16,10 +16,9 @@
 package org.flywaydb.core.internal.util.scanner.classpath;
 
 import org.flywaydb.core.api.FlywayException;
-import org.flywaydb.core.internal.util.ClassPathResource;
 import org.flywaydb.core.internal.util.ClassUtils;
 import org.flywaydb.core.internal.util.FeatureDetector;
-import org.flywaydb.core.internal.util.Resource;
+import org.flywaydb.core.internal.util.scanner.Resource;
 import org.flywaydb.core.internal.util.UrlUtils;
 import org.flywaydb.core.internal.util.logging.Log;
 import org.flywaydb.core.internal.util.logging.LogFactory;

File: flyway-core/src/main/java/org/flywaydb/core/internal/util/scanner/filesystem/FileSystemScanner.java
Patch:
@@ -16,8 +16,7 @@
 package org.flywaydb.core.internal.util.scanner.filesystem;
 
 import org.flywaydb.core.api.FlywayException;
-import org.flywaydb.core.internal.util.FileSystemResource;
-import org.flywaydb.core.internal.util.Resource;
+import org.flywaydb.core.internal.util.scanner.Resource;
 import org.flywaydb.core.internal.util.logging.Log;
 import org.flywaydb.core.internal.util.logging.LogFactory;
 

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/oracle/OracleSqlScriptSmallTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.internal.dbsupport.SqlScript;
 import org.flywaydb.core.internal.dbsupport.SqlStatement;
-import org.flywaydb.core.internal.util.ClassPathResource;
+import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;
 import org.junit.Test;
 
 import java.util.List;

File: flyway-core/src/test/java/org/flywaydb/core/internal/dbsupport/postgresql/PostgreSQLSqlScriptSmallTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.internal.dbsupport.SqlScript;
 import org.flywaydb.core.internal.dbsupport.SqlStatement;
-import org.flywaydb.core.internal.util.ClassPathResource;
+import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;
 import org.junit.Test;
 
 import java.util.List;

File: flyway-core/src/test/java/org/flywaydb/core/internal/resolver/sql/SqlMigrationResolverSmallTest.java
Patch:
@@ -17,8 +17,8 @@
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.resolver.ResolvedMigration;
-import org.flywaydb.core.internal.util.ClassPathResource;
-import org.flywaydb.core.internal.util.FileSystemResource;
+import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;
+import org.flywaydb.core.internal.util.scanner.filesystem.FileSystemResource;
 import org.flywaydb.core.internal.util.Location;
 import org.flywaydb.core.internal.util.PlaceholderReplacer;
 import org.junit.Test;

File: flyway-core/src/test/java/org/flywaydb/core/internal/util/ClassPathResourceSmallTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.flywaydb.core.internal.util;
 
+import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: flyway-core/src/test/java/org/flywaydb/core/internal/util/FileSystemResourceSmallTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.flywaydb.core.internal.util;
 
+import org.flywaydb.core.internal.util.scanner.filesystem.FileSystemResource;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: flyway-core/src/test/java/org/flywaydb/core/internal/util/scanner/classpath/ClassPathScannerSmallTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.flywaydb.core.internal.resolver.jdbc.dummy.V2__InterfaceBasedMigration;
 import org.flywaydb.core.internal.resolver.jdbc.dummy.V4__DummyExtendedAbstractJdbcMigration;
 import org.flywaydb.core.internal.resolver.jdbc.dummy.Version3dot5;
-import org.flywaydb.core.internal.util.Resource;
+import org.flywaydb.core.internal.util.scanner.Resource;
 import org.flywaydb.core.internal.util.scanner.classpath.jboss.JBossVFSv2UrlResolver;
 import org.junit.Test;
 import org.mockito.MockSettings;

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1044,7 +1044,7 @@ public void configure(Properties properties) {
             setCallbacks(StringUtils.tokenizeToStringArray(callbacksProp, ","));
         }
 
-        Map<String, String> placeholdersFromProps = new HashMap<String, String>();
+        Map<String, String> placeholdersFromProps = new HashMap<String, String>(placeholders);
         for (Object property : properties.keySet()) {
             String propertyName = (String) property;
             if (propertyName.startsWith(PLACEHOLDERS_PROPERTY_PREFIX)
@@ -1054,7 +1054,7 @@ public void configure(Properties properties) {
                 placeholdersFromProps.put(placeholderName, placeholderValue);
             }
         }
-        if (placeholdersFromProps.size() > 0) setPlaceholders(placeholdersFromProps);
+        setPlaceholders(placeholdersFromProps);
     }
 
     /**

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1054,7 +1054,7 @@ public void configure(Properties properties) {
                 placeholdersFromProps.put(placeholderName, placeholderValue);
             }
         }
-        setPlaceholders(placeholdersFromProps);
+        if (placeholdersFromProps.size() > 0) setPlaceholders(placeholdersFromProps);
     }
 
     /**

File: flyway-sbt-largetest/src/test/java/org/flywaydb/sbt/largetest/SbtLargeTest.java
Patch:
@@ -50,7 +50,7 @@ public void sysPropsOverride() throws Exception {
     @Test
     public void flywayUrlAsSysProps() throws Exception {
         String stdOut = runSbt("test2", 0, "-Dflyway.url=jdbc:hsqldb:file:target/flyway_sample;shutdown=true", "flywayClean", "flywayMigrate");
-        assertTrue(stdOut.contains("Successfully applied 1 migration"));
+        assertTrue(stdOut.contains("Successfully applied 2 migration"));
     }
 
     @Test

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -1054,7 +1054,7 @@ public void configure(Properties properties) {
                 placeholdersFromProps.put(placeholderName, placeholderValue);
             }
         }
-        setPlaceholders(placeholdersFromProps);
+        if (placeholdersFromProps.size() > 0) setPlaceholders(placeholdersFromProps);
     }
 
     /**

File: flyway-sbt-largetest/src/test/java/org/flywaydb/sbt/largetest/SbtLargeTest.java
Patch:
@@ -50,7 +50,7 @@ public void sysPropsOverride() throws Exception {
     @Test
     public void flywayUrlAsSysProps() throws Exception {
         String stdOut = runSbt("test2", 0, "-Dflyway.url=jdbc:hsqldb:file:target/flyway_sample;shutdown=true", "flywayClean", "flywayMigrate");
-        assertTrue(stdOut.contains("Successfully applied 1 migration"));
+        assertTrue(stdOut.contains("Successfully applied 2 migration"));
     }
 
     @Test

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/DbSupportFactory.java
Patch:
@@ -75,7 +75,7 @@ public static DbSupport createDbSupport(Connection connection, boolean printInfo
             return new SQLServerDbSupport(connection);
         }
         if (databaseProductName.contains("MySQL")) {
-            // For regular MySQL and Google Cloud SQL.
+            // For regular MySQL, MariaDB and Google Cloud SQL.
             // Google Cloud SQL returns different names depending on the environment and the SDK version.
             //   ex.: Google SQL Service/MySQL
             return new MySQLDbSupport(connection);

File: flyway-core/src/main/java/org/flywaydb/core/util/jdbc/DriverDataSource.java
Patch:
@@ -95,6 +95,8 @@ public DriverDataSource(ClassLoader classLoader, String driverClass, String url,
                 driverClass = "org.hsqldb.jdbcDriver";
             } else if (url.startsWith("jdbc:mysql:")) {
                 driverClass = "com.mysql.jdbc.Driver";
+            } else if (url.startsWith("jdbc:mariadb:")) {
+                driverClass = "org.mariadb.jdbc.Driver";
             } else if (url.startsWith("jdbc:google:")) {
                 driverClass = "com.google.appengine.api.rdbms.AppEngineDriver";
             } else if (url.startsWith("jdbc:oracle:")) {

File: flyway-core/src/test/java/org/flywaydb/core/DbCategory.java
Patch:
@@ -32,6 +32,7 @@ public interface H2 extends EmbeddedDB {}
     public interface HSQL extends EmbeddedDB {}
 
     public interface MySQL extends OpenSourceDB {}
+    public interface MariaDB extends OpenSourceDB {}
     public interface PostgreSQL extends OpenSourceDB {}
 
     public interface DB2 extends CommercialDB {}

File: flyway-core/src/main/java/org/flywaydb/core/util/jdbc/DriverDataSource.java
Patch:
@@ -84,7 +84,7 @@ public DriverDataSource(ClassLoader classLoader, String driverClass, String url,
         }
         this.url = url;
 
-        if (driverClass == null) {
+        if (!StringUtils.hasLength(driverClass)) {
             if (url.startsWith("jdbc:db2:")) {
                 driverClass = "com.ibm.db2.jcc.DB2Driver";
             } else if (url.startsWith("jdbc:derby:")) {

File: flyway-core/src/main/java/org/flywaydb/core/util/PlaceholderReplacer.java
Patch:
@@ -72,7 +72,8 @@ public String replacePlaceholders(String input) {
 
         for (String placeholder : placeholders.keySet()) {
             String searchTerm = placeholderPrefix + placeholder + placeholderSuffix;
-            noPlaceholders = StringUtils.replaceAll(noPlaceholders, searchTerm, placeholders.get(placeholder));
+            String value = placeholders.get(placeholder);
+            noPlaceholders = StringUtils.replaceAll(noPlaceholders, searchTerm, value == null ? "" : value);
         }
         checkForUnmatchedPlaceholderExpression(noPlaceholders);
 

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/SqlStatementBuilder.java
Patch:
@@ -264,7 +264,7 @@ protected String computeAlternateCloseQuote(String openQuote) {
      */
     protected boolean endsWithOpenMultilineStringLiteral(String line) {
         //Ignore all special characters that naturally occur in SQL, but are not opening or closing string literals
-        String[] tokens = StringUtils.tokenizeToStringArray(line, " @<>;:=|(),+");
+        String[] tokens = StringUtils.tokenizeToStringArray(line, " @<>;:=|(),+{}");
 
         List<TokenType> delimitingTokens = extractStringLiteralDelimitingTokens(tokens);
 

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/SqlStatementBuilderSmallTest.java
Patch:
@@ -39,6 +39,7 @@ public void postgreSqlEndsWithOpenMultilineStringLiteral() {
     @Test
     public void sqlServerEndsWithOpenMultilineStringLiteral() {
         assertFalse(new SQLServerSqlStatementBuilder().endsWithOpenMultilineStringLiteral("print 'baz'+"));
+        assertFalse(new SQLServerSqlStatementBuilder().endsWithOpenMultilineStringLiteral("CUSTOMER set creaon_date = {ts '3099-01-01 00:00:00'} FROM CUSTOMER c inner join inserted i on c.id=i.id"));
 
         //Currently broken:
         //assertFalse(new SQLServerSqlStatementBuilder().endsWithOpenMultilineStringLiteral("print 'baz'-- Oops"));

File: flyway-core/src/main/java/org/flywaydb/core/util/scanner/classpath/JarFileClassPathLocationScanner.java
Patch:
@@ -88,6 +88,7 @@ private JarFile getJarFromUrl(URL locationUrl) throws IOException {
      * @throws java.io.IOException when reading the jar file failed.
      */
     private Set<String> findResourceNamesFromJarFile(JarFile jarFile, String location) throws IOException {
+        location += location.endsWith("/") ? "" : "/";
         Set<String> resourceNames = new TreeSet<String>();
 
         Enumeration<JarEntry> entries = jarFile.entries();

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/mysql/MySQLSqlStatementBuilder.java
Patch:
@@ -35,7 +35,7 @@ public class MySQLSqlStatementBuilder extends SqlStatementBuilder {
             "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF8"
     };
 
-    private boolean isInMultiLineCommentDirective = false;
+    /*private -> testing*/ boolean isInMultiLineCommentDirective = false;
 
     @Override
     public Delimiter extractNewDelimiterFromLine(String line) {
@@ -58,11 +58,11 @@ protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter)
     @Override
     public boolean isCommentDirective(String line) {
         // single-line comment directive
-        if (line.matches("^" + Pattern.quote("/*!") + "\\d{5} .*" + Pattern.quote("*/") + ";?")) {
+        if (line.matches("^" + Pattern.quote("/*!") + "\\d{5} .*" + Pattern.quote("*/") + "\\s*;?")) {
             return true;
         }
         // last line of multi-line comment directive
-        if (isInMultiLineCommentDirective && line.matches(".*" + Pattern.quote("*/") + ";?")) {
+        if (isInMultiLineCommentDirective && line.matches(".*" + Pattern.quote("*/") + "\\s*;?")) {
             isInMultiLineCommentDirective = false;
             return true;
         }

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/SqlStatementBuilder.java
Patch:
@@ -264,7 +264,7 @@ protected String computeAlternateCloseQuote(String openQuote) {
      */
     protected boolean endsWithOpenMultilineStringLiteral(String line) {
         //Ignore all special characters that naturally occur in SQL, but are not opening or closing string literals
-        String[] tokens = StringUtils.tokenizeToStringArray(line, " @<>;:=|(),");
+        String[] tokens = StringUtils.tokenizeToStringArray(line, " @<>;:=|(),+");
 
         List<TokenType> delimitingTokens = extractStringLiteralDelimitingTokens(tokens);
 

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -42,6 +42,7 @@ protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter)
         if (StringUtils.countOccurrencesOf(statementStart, " ") < 4) {
             statementStart += line;
             statementStart += " ";
+            statementStart = statementStart.replaceAll("\\s+", " ");
         }
 
         if (statementStart.startsWith("CREATE FUNCTION")

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/SqlScript.java
Patch:
@@ -33,7 +33,6 @@
  * comments are stripped and ignored.
  */
 public class SqlScript {
-
     private static final Log LOG = LogFactory.getLog(SqlScript.class);
 
     /**

File: flyway-ant/src/main/java/org/flywaydb/ant/AbstractFlywayTask.java
Patch:
@@ -421,7 +421,8 @@ public void setInitOnMigrate(boolean initOnMigrate) {
 
     @Override
     public void execute() throws BuildException {
-        LogFactory.setLogCreator(new AntLogCreator(getProject()));
+        AntLogCreator.INSTANCE.setAntProject(getProject());
+        LogFactory.setLogCreator(AntLogCreator.INSTANCE);
         log = LogFactory.getLog(getClass());
 
         prepareClassPath();

File: flyway-maven-plugin-largetest/src/test/java/org/flywaydb/maven/largetest/MavenTestCase.java
Patch:
@@ -131,7 +131,7 @@ private String runMaven(int expectedReturnCode, String dir, String... extraArgs)
         List<String> args = new ArrayList<String>();
         args.add(mavenHome + "/bin/mvn" + extension);
         args.add("-Dflyway.version=" + flywayVersion);
-        args.add("-X");
+        //args.add("-X");
         args.addAll(Arrays.asList(extraArgs));
 
         ProcessBuilder builder = new ProcessBuilder(args);

File: flyway-maven-plugin-largetest/src/test/java/org/flywaydb/maven/largetest/MavenTestCase.java
Patch:
@@ -131,7 +131,7 @@ private String runMaven(int expectedReturnCode, String dir, String... extraArgs)
         List<String> args = new ArrayList<String>();
         args.add(mavenHome + "/bin/mvn" + extension);
         args.add("-Dflyway.version=" + flywayVersion);
-        //args.add("-X");
+        args.add("-X");
         args.addAll(Arrays.asList(extraArgs));
 
         ProcessBuilder builder = new ProcessBuilder(args);

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -160,8 +160,10 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      * resolving Migrations to apply.
      * <p>(default: none)</p>
      * <p>Also configurable with Maven or System Property: ${flyway.resolvers} (Comma-separated list)</p>
+     *
+     * @parameter
      */
-    String[] resolvers;
+    private String[] resolvers;
 
     /**
      * The encoding of Sql migrations. (default: UTF-8)<br> <p>Also configurable with Maven or System Property:

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -212,6 +212,7 @@ private static void printUsage() {
         LOG.info("schemas                : Comma-separated list of the schemas managed by Flyway");
         LOG.info("table                  : Name of Flyway's metadata table");
         LOG.info("locations              : Classpath locations to scan recursively for migrations");
+        LOG.info("resolvers              : Comma-separated list of custom MigrationResolvers");
         LOG.info("sqlMigrationPrefix     : File name prefix for Sql migrations");
         LOG.info("sqlMigrationSuffix     : File name suffix for Sql migrations");
         LOG.info("encoding               : Encoding of Sql migrations");

File: flyway-core/src/main/java/org/flywaydb/core/util/jdbc/DriverDataSource.java
Patch:
@@ -113,7 +113,7 @@ public DriverDataSource(ClassLoader classLoader, String driverClass, String url,
         try {
             this.driver = ClassUtils.instantiate(driverClass, classLoader);
         } catch (Exception e) {
-            throw new FlywayException("Unable to instantiate jdbc driver: " + driverClass);
+            throw new FlywayException("Unable to instantiate jdbc driver: " + driverClass, e);
         }
 
         this.user = user;

File: flyway-commandline-largetest/src/test/java/org/flywaydb/commandline/largetest/CommandLineLargeTest.java
Patch:
@@ -67,7 +67,7 @@ public void migrateWithCustomLocations() throws Exception {
 
     @Test
     public void infoWithCallback() throws Exception {
-        String stdOut = runFlywayCommandLine(0, "largeTest.properties", "info", "-callbacks=org.flywaydb.core.api.DefaultFlywayCallback");
+        String stdOut = runFlywayCommandLine(0, "largeTest.properties", "info", "-callbacks=org.flywaydb.sample.callback.DefaultFlywayCallback");
         assertTrue(stdOut.contains("beforeInfo"));
         assertTrue(stdOut.contains("afterInfo"));
     }

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -220,7 +220,7 @@ private static void printUsage() {
         LOG.info("placeholderSuffix      : Suffix of every placeholder");
         LOG.info("target                 : Target version up to which Flyway should migrate");
         LOG.info("outOfOrder             : Allows migrations to be run \"out of order\"");
-        LOG.info("callbacks              : A comma separated list of fully qualified FlywayCallback class implementations");
+        LOG.info("callbacks              : Comma-separated list of FlywayCallback classes");
         LOG.info("validateOnMigrate      : Validate when running migrate");
         LOG.info("cleanOnValidationError : Automatically clean on a validation error");
         LOG.info("initVersion            : Version to tag schema with when executing init");

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -220,6 +220,7 @@ private static void printUsage() {
         LOG.info("placeholderSuffix      : Suffix of every placeholder");
         LOG.info("target                 : Target version up to which Flyway should migrate");
         LOG.info("outOfOrder             : Allows migrations to be run \"out of order\"");
+        LOG.info("callbacks              : A comma separated list of fully qualified FlywayCallback class implementations");
         LOG.info("validateOnMigrate      : Validate when running migrate");
         LOG.info("cleanOnValidationError : Automatically clean on a validation error");
         LOG.info("initVersion            : Version to tag schema with when executing init");

File: flyway-ant/src/main/java/org/flywaydb/ant/AbstractFlywayTask.java
Patch:
@@ -192,7 +192,7 @@ public void setInitDescription(String initDescription) {
         String userValue = useValueIfPropertyNotSet(user, "user");
         String passwordValue = useValueIfPropertyNotSet(password, "password");
 
-        return new DriverDataSource(driverValue, urlValue, userValue, passwordValue);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), driverValue, urlValue, userValue, passwordValue);
     }
 
     /**
@@ -381,6 +381,7 @@ public void execute() throws BuildException {
         prepareClassPath();
 
         try {
+            flyway.setClassLoader(Thread.currentThread().getContextClassLoader());
             flyway.setDataSource(createDataSource());
 
             Properties projectProperties = new Properties();

File: flyway-commandline-largetest/src/test/java/org/flywaydb/commandline/largetest/CommandLineLargeTest.java
Patch:
@@ -107,7 +107,7 @@ protected String runFlywayCommandLine(int expectedReturnCode, String configFileN
             args.add(operation);
         }
         if (configFileName != null) {
-            String configFile = new ClassPathResource(configFileName).getLocationOnDisk();
+            String configFile = new ClassPathResource(configFileName, Thread.currentThread().getContextClassLoader()).getLocationOnDisk();
             args.add("-configFile=" + configFile);
         }
         args.addAll(Arrays.asList(extraArgs));

File: flyway-commandline/src/main/java/org/flywaydb/commandline/Main.java
Patch:
@@ -176,7 +176,7 @@ private static void initializeDefaults(Properties properties) {
      * @throws IOException when the version could not be read.
      */
     private static void printVersion() throws IOException {
-        String version = new ClassPathResource("version.txt").loadAsString("UTF-8");
+        String version = new ClassPathResource("version.txt", Thread.currentThread().getContextClassLoader()).loadAsString("UTF-8");
         LOG.info("Flyway (Command-line Tool) v." + version);
         LOG.info("");
     }

File: flyway-core/src/main/java/org/flywaydb/core/util/jdbc/DriverDataSource.java
Patch:
@@ -67,14 +67,15 @@ public DriverDataSource() {
     /**
      * Creates a new DriverDataSource.
      *
+     * @param classLoader The ClassLoader for the driver.
      * @param driverClass The name of the JDBC Driver class to use. {@code null} for url-based autodetection.
      * @param url         The JDBC URL to use for connecting through the Driver. (required)
      * @param user        The JDBC user to use for connecting through the Driver.
      * @param password    The JDBC password to use for connecting through the Driver.
      * @param initSqls    The (optional) sql statements to execute to initialize a connection immediately after obtaining it.
      * @throws FlywayException when the datasource could not be created.
      */
-    public DriverDataSource(String driverClass, String url, String user, String password, String... initSqls) throws FlywayException {
+    public DriverDataSource(ClassLoader classLoader, String driverClass, String url, String user, String password, String... initSqls) throws FlywayException {
         if (!StringUtils.hasText(url)) {
             throw new FlywayException("Missing required JDBC URL. Unable to create DataSource!");
         }
@@ -110,7 +111,7 @@ public DriverDataSource(String driverClass, String url, String user, String pass
         }
 
         try {
-            this.driver = ClassUtils.instantiate(driverClass);
+            this.driver = ClassUtils.instantiate(driverClass, classLoader);
         } catch (Exception e) {
             throw new FlywayException("Unable to instantiate jdbc driver: " + driverClass);
         }

File: flyway-core/src/main/java/org/flywaydb/core/util/logging/LogFactory.java
Patch:
@@ -50,7 +50,7 @@ public static void setLogCreator(LogCreator logCreator) {
      */
     public static Log getLog(Class<?> clazz) {
         if (logCreator == null) {
-            if (FeatureDetector.isApacheCommonsLoggingAvailable()) {
+            if (new FeatureDetector(Thread.currentThread().getContextClassLoader()).isApacheCommonsLoggingAvailable()) {
                 logCreator = new ApacheCommonsLogCreator();
             } else {
                 logCreator = new JavaUtilLogCreator();

File: flyway-core/src/main/java/org/flywaydb/core/util/scanner/classpath/OsgiClassPathLocationScanner.java
Patch:
@@ -30,8 +30,7 @@
  *
  * <p>
  * The resources that this scanner returns can only be loaded if
- * Thread.currentThread().getContextClassLoader() belongs to the
- * bundle that contains the migrations.
+ * Flyway's ClassLoader has access to the bundle that contains the migrations.
  * </p>
  */
 public class OsgiClassPathLocationScanner implements ClassPathLocationScanner {

File: flyway-core/src/test/java/org/flywaydb/core/FlywaySmallTest.java
Patch:
@@ -105,7 +105,7 @@ public void configureSchemas() {
 
     @Test
     public void configureWithExistingDataSource() {
-        DataSource dataSource = new DriverDataSource(null, "jdbc:h2:mem:flyway_test;DB_CLOSE_DELAY=-1", "sa", "");
+        DataSource dataSource = new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:h2:mem:flyway_test;DB_CLOSE_DELAY=-1", "sa", "");
 
         Properties properties = new Properties();
 
@@ -118,7 +118,7 @@ public void configureWithExistingDataSource() {
 
     @Test
     public void configureWithPartialDbConfigInProperties() {
-        DataSource dataSource = new DriverDataSource(null, "jdbc:h2:mem:flyway_test;DB_CLOSE_DELAY=-1", "sa", "");
+        DataSource dataSource = new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:h2:mem:flyway_test;DB_CLOSE_DELAY=-1", "sa", "");
 
         Properties properties = new Properties();
         properties.setProperty("flyway.user", "dummy_user");

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/db2/DB2ConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("db2.password", "flyway");
         String url = customProperties.getProperty("db2.url", "jdbc:db2://localhost:50000/flyway");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/db2/DB2MigrationMediumTest.java
Patch:
@@ -37,7 +37,7 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("db2.password", "flyway");
         String url = customProperties.getProperty("db2.url", "jdbc:db2://localhost:50000/flyway");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/derby/DerbyConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ public class DerbyConcurrentMigrationMediumTest extends ConcurrentMigrationTestC
 
     @Override
     protected DataSource createDataSource(Properties customProperties) {
-        return new DriverDataSource(null, "jdbc:derby:memory:flyway_db_concurrent;create=true", "", "");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:derby:memory:flyway_db_concurrent;create=true", "", "");
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/derby/DerbyMigrationMediumTest.java
Patch:
@@ -36,7 +36,7 @@ public class DerbyMigrationMediumTest extends MigrationTestCase {
     @Override
     public void tearDown() throws Exception {
         try {
-            new DriverDataSource(null, "jdbc:derby:memory:flyway_db;drop=true", "", "").getConnection();
+            new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:derby:memory:flyway_db;drop=true", "", "").getConnection();
         } catch (FlywayException e) {
             //OK, expected error 08006. See http://db.apache.org/derby/docs/dev/devguide/cdevdvlpinmemdb.html
         }
@@ -46,7 +46,7 @@ public void tearDown() throws Exception {
 
     @Override
     protected DataSource createDataSource(Properties customProperties) {
-        return new DriverDataSource(null, "jdbc:derby:memory:flyway_db;create=true", "", "");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:derby:memory:flyway_db;create=true", "", "");
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/h2/H2CaseSensitiveMigrationMediumTest.java
Patch:
@@ -15,11 +15,10 @@
  */
 package org.flywaydb.core.dbsupport.h2;
 
+import org.flywaydb.core.DbCategory;
 import org.flywaydb.core.Flyway;
-import org.flywaydb.core.util.jdbc.DriverDataSource;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
-import org.flywaydb.core.DbCategory;
 
 /**
  * Test for H2 in case-sensitive (DATABASE_TO_UPPER=FALSE) mode.
@@ -29,7 +28,7 @@ public class H2CaseSensitiveMigrationMediumTest {
     @Test
     public void migrate() {
         Flyway flyway = new Flyway();
-        flyway.setDataSource(new DriverDataSource(null, "jdbc:h2:mem:flyway_db_case_sensitive;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=FALSE", "sa", ""));
+        flyway.setDataSource("jdbc:h2:mem:flyway_db_case_sensitive;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=FALSE", "sa", "");
         flyway.setLocations("migration/sql");
         flyway.migrate();
         flyway.clean();

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/h2/H2ConcurrentMigrationMediumTest.java
Patch:
@@ -30,6 +30,6 @@
 public class H2ConcurrentMigrationMediumTest extends ConcurrentMigrationTestCase {
     @Override
     protected DataSource createDataSource(Properties customProperties) {
-        return new DriverDataSource(null, "jdbc:h2:mem:flyway_db_concurrent;DB_CLOSE_DELAY=-1", "sa", "", "SET LOCK_TIMEOUT 100000");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:h2:mem:flyway_db_concurrent;DB_CLOSE_DELAY=-1", "sa", "", "SET LOCK_TIMEOUT 100000");
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/h2/H2MigrationMediumTest.java
Patch:
@@ -35,7 +35,7 @@
 public class H2MigrationMediumTest extends MigrationTestCase {
     @Override
     protected DataSource createDataSource(Properties customProperties) {
-        return new DriverDataSource(null, "jdbc:h2:mem:flyway_db;DB_CLOSE_DELAY=-1", "sa", "");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:h2:mem:flyway_db;DB_CLOSE_DELAY=-1", "sa", "");
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/hsql/HsqlDbConcurrentMigrationMediumTest.java
Patch:
@@ -30,6 +30,6 @@
 public class HsqlDbConcurrentMigrationMediumTest extends ConcurrentMigrationTestCase {
     @Override
     protected DataSource createDataSource(Properties customProperties) {
-        return new DriverDataSource(null, "jdbc:hsqldb:mem:flyway_db_concurrent", "SA", "");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:hsqldb:mem:flyway_db_concurrent", "SA", "");
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/hsql/HsqlMigrationMediumTest.java
Patch:
@@ -34,7 +34,7 @@
 public class HsqlMigrationMediumTest extends MigrationTestCase {
     @Override
     protected DataSource createDataSource(Properties customProperties) {
-        return new DriverDataSource(null, "jdbc:hsqldb:mem:flyway_db", "SA", "");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:hsqldb:mem:flyway_db", "SA", "");
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/mysql/GoogleCloudSQLMigrationMediumTest.java
Patch:
@@ -42,15 +42,15 @@ protected DataSource createDataSource(Properties customProperties) throws Except
 
         LocalRdbmsServiceTestConfig config = new LocalRdbmsServiceTestConfig();
         config.setServerType(LocalRdbmsService.ServerType.LOCAL);
-        ClassUtils.instantiate("com.mysql.jdbc.Driver");
+        ClassUtils.instantiate("com.mysql.jdbc.Driver", Thread.currentThread().getContextClassLoader());
         config.setDriverClass("com.mysql.jdbc.Driver");
         config.setJdbcConnectionStringFormat(url);
         config.setUser(user);
         config.setPassword(password);
         helper = new LocalServiceTestHelper(config);
         helper.setUp();
 
-        return new DriverDataSource(null, "jdbc:google:rdbms://localhost/flyway_cloudsql_db", "", "");
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, "jdbc:google:rdbms://localhost/flyway_cloudsql_db", "", "");
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/mysql/MySQLConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("mysql.password", "flyway");
         String url = customProperties.getProperty("mysql.url", "jdbc:mysql://localhost/flyway_db");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/mysql/MySQLMigrationMediumTest.java
Patch:
@@ -38,7 +38,7 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("mysql.password", "flyway");
         String url = customProperties.getProperty("mysql.url", "jdbc:mysql://localhost/flyway_db");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 
     @Test

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/oracle/OracleConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("oracle.password", "flyway");
         String url = customProperties.getProperty("oracle.url", "jdbc:oracle:thin:@localhost:1521:XE");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/oracle/OracleDbSupportMediumTest.java
Patch:
@@ -49,7 +49,7 @@ private void checkCurrentSchema(boolean useProxy) throws Exception {
 
         String dataSourceUser = useProxy ? "\"flyway_proxy\"[" + user + "]" : user;
 
-        DataSource dataSource = new DriverDataSource(null, url, dataSourceUser, password);
+        DataSource dataSource = new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, dataSourceUser, password);
 
         Connection connection = dataSource.getConnection();
         Schema currentSchema = new OracleDbSupport(connection).getCurrentSchema();
@@ -133,6 +133,6 @@ private DataSource createDataSource() throws Exception {
         String password = customProperties.getProperty("oracle.password");
         String url = customProperties.getProperty("oracle.url");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/oracle/OracleMigrationMediumTest.java
Patch:
@@ -45,7 +45,7 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("oracle.password", "flyway");
         String url = customProperties.getProperty("oracle.url", "jdbc:oracle:thin:@localhost:1521:XE");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 
     @Override

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/postgresql/PostgreSQLConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("postgresql.password", "flyway");
         String url = customProperties.getProperty("postgresql.url", "jdbc:postgresql://localhost/flyway_db");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/postgresql/PostgreSQLDbSupportMediumTest.java
Patch:
@@ -67,7 +67,7 @@ private DataSource createDataSource() throws Exception {
         String password = customProperties.getProperty("postgresql.password", "flyway");
         String url = customProperties.getProperty("postgresql.url", "jdbc:postgresql://localhost/flyway_db");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 
 

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/postgresql/PostgreSQLMigrationMediumTest.java
Patch:
@@ -43,7 +43,7 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("postgresql.password", "flyway");
         String url = customProperties.getProperty("postgresql.url", "jdbc:postgresql://localhost/flyway_db");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 
     @Override
@@ -225,7 +225,7 @@ public void lock() {
     public void emptySearchPath() {
         Flyway flyway1 = new Flyway();
         DriverDataSource driverDataSource = (DriverDataSource) dataSource;
-        flyway1.setDataSource(new DriverDataSource(
+        flyway1.setDataSource(new DriverDataSource(Thread.currentThread().getContextClassLoader(),
                 null, driverDataSource.getUrl(), driverDataSource.getUser(), driverDataSource.getPassword()) {
             @Override
             public Connection getConnection() throws SQLException {

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/postgresql/PostgreSQLSqlScriptSmallTest.java
Patch:
@@ -30,7 +30,8 @@
 public class PostgreSQLSqlScriptSmallTest {
     @Test
     public void parseSqlStatementsDo() throws Exception {
-        String source = new ClassPathResource("migration/dbsupport/postgresql/sql/dollar/V2__Even_more_dollars.sql").loadAsString("UTF-8");
+        String source = new ClassPathResource(
+                "migration/dbsupport/postgresql/sql/dollar/V2__Even_more_dollars.sql", Thread.currentThread().getContextClassLoader()).loadAsString("UTF-8");
 
         SqlScript sqlScript = new SqlScript(source, new PostgreSQLDbSupport(null));
         List<SqlStatement> sqlStatements = sqlScript.getSqlStatements();

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/postgresql/PostgreSQLSuperUserMigrationMediumTest.java
Patch:
@@ -47,7 +47,7 @@ public void setUp() throws Exception {
 
         flyway = new Flyway();
         flyway.setSchemas("super_user_test");
-        flyway.setDataSource(new DriverDataSource(null, url, "postgres", password));
+        flyway.setDataSource(new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, "postgres", password));
         flyway.setValidateOnMigrate(true);
         flyway.clean();
     }

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/sqlserver/JtdsSQLServerCaseSensitiveMigrationMediumTest.java
Patch:
@@ -33,6 +33,6 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("sqlserver.password", "flyway");
         String url = customProperties.getProperty("sqlserver.jtds_url", "jdbc:jtds:sqlserver://localhost:1433/flyway_db_jtds_case_sensitive");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/sqlserver/JtdsSQLServerConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("sqlserver.password", "flyway");
         String url = customProperties.getProperty("sqlserver.jtds_url", "jdbc:jtds:sqlserver://localhost:1433/flyway_db_jtds_concurrent");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/sqlserver/JtdsSQLServerMigrationMediumTest.java
Patch:
@@ -33,6 +33,6 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("sqlserver.password", "flyway");
         String url = customProperties.getProperty("sqlserver.jtds_url", "jdbc:jtds:sqlserver://localhost:1433/flyway_db_jtds");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/sqlserver/MsSQLServerCaseSensitiveMigrationMediumTest.java
Patch:
@@ -33,6 +33,6 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("sqlserver.password", "flyway");
         String url = customProperties.getProperty("sqlserver.ms_url", "jdbc:sqlserver://localhost:1433;databaseName=flyway_db_ms_case_sensitive");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/sqlserver/MsSQLServerConcurrentMigrationMediumTest.java
Patch:
@@ -34,6 +34,6 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("sqlserver.password", "flyway");
         String url = customProperties.getProperty("sqlserver.ms_url", "jdbc:sqlserver://localhost:1433;databaseName=flyway_db_ms_concurrent");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/sqlserver/MsSQLServerMigrationMediumTest.java
Patch:
@@ -36,7 +36,7 @@ protected DataSource createDataSource(Properties customProperties) throws Except
         String password = customProperties.getProperty("sqlserver.password", "flyway");
         String url = customProperties.getProperty("sqlserver.ms_url", "jdbc:sqlserver://localhost:1433;databaseName=flyway_db_ms");
 
-        return new DriverDataSource(null, url, user, password);
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password);
     }
 
     /**

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -177,7 +177,7 @@ public void customTableName() throws Exception {
      */
     private void assertChecksum(MigrationInfo migrationInfo) {
         SqlMigrationResolver sqlMigrationResolver = new SqlMigrationResolver(
-                dbSupport,
+                dbSupport, Thread.currentThread().getContextClassLoader(),
                 new Location(BASEDIR),
                 PlaceholderReplacer.NO_PLACEHOLDERS,
                 "UTF-8",

File: flyway-core/src/test/java/org/flywaydb/core/resolver/spring/SpringJdbcMigrationResolverSmallTest.java
Patch:
@@ -35,7 +35,7 @@ public class SpringJdbcMigrationResolverSmallTest {
     @Test
     public void resolveMigrations() {
         SpringJdbcMigrationResolver springJdbcMigrationResolver =
-                new SpringJdbcMigrationResolver(new Location("org/flywaydb/core/resolver/spring/dummy"));
+                new SpringJdbcMigrationResolver(Thread.currentThread().getContextClassLoader(), new Location("org/flywaydb/core/resolver/spring/dummy"));
         Collection<ResolvedMigration> migrations = springJdbcMigrationResolver.resolveMigrations();
 
         assertEquals(2, migrations.size());
@@ -54,7 +54,7 @@ public void resolveMigrations() {
 
     @Test
     public void conventionOverConfiguration() {
-        SpringJdbcMigrationResolver springJdbcMigrationResolver = new SpringJdbcMigrationResolver(null);
+        SpringJdbcMigrationResolver springJdbcMigrationResolver = new SpringJdbcMigrationResolver(Thread.currentThread().getContextClassLoader(), null);
         ResolvedMigration migrationInfo = springJdbcMigrationResolver.extractMigrationInfo(new V2__InterfaceBasedMigration());
         assertEquals("2", migrationInfo.getVersion().toString());
         assertEquals("InterfaceBasedMigration", migrationInfo.getDescription());
@@ -63,7 +63,7 @@ public void conventionOverConfiguration() {
 
     @Test
     public void explicitInfo() {
-        SpringJdbcMigrationResolver springJdbcMigrationResolver = new SpringJdbcMigrationResolver(null);
+        SpringJdbcMigrationResolver springJdbcMigrationResolver = new SpringJdbcMigrationResolver(Thread.currentThread().getContextClassLoader(), null);
         ResolvedMigration migrationInfo = springJdbcMigrationResolver.extractMigrationInfo(new Version3dot5());
         assertEquals("3.5", migrationInfo.getVersion().toString());
         assertEquals("Three Dot Five", migrationInfo.getDescription());

File: flyway-core/src/test/java/org/flywaydb/core/resolver/sql/SqlMigrationResolverMediumTest.java
Patch:
@@ -39,7 +39,7 @@ public void resolveMigrations() throws Exception {
         String path = URLDecoder.decode(getClass().getClassLoader().getResource("migration/subdir").getPath(), "UTF-8");
 
         SqlMigrationResolver sqlMigrationResolver =
-                new SqlMigrationResolver(null, new Location("filesystem:" + new File(path).getPath()), PlaceholderReplacer.NO_PLACEHOLDERS, "UTF-8", "V", ".sql");
+                new SqlMigrationResolver(null, Thread.currentThread().getContextClassLoader(), new Location("filesystem:" + new File(path).getPath()), PlaceholderReplacer.NO_PLACEHOLDERS, "UTF-8", "V", ".sql");
         Collection<ResolvedMigration> migrations = sqlMigrationResolver.resolveMigrations();
 
         assertEquals(3, migrations.size());

File: flyway-core/src/test/java/org/flywaydb/core/util/ClassUtilsSmallTest.java
Patch:
@@ -26,11 +26,11 @@
 public class ClassUtilsSmallTest {
     @Test
     public void isPresent() {
-        assertTrue(ClassUtils.isPresent("org.flywaydb.core.Flyway"));
+        assertTrue(ClassUtils.isPresent("org.flywaydb.core.Flyway", Thread.currentThread().getContextClassLoader()));
     }
 
     @Test
     public void isPresentNot() {
-        assertFalse(ClassUtils.isPresent("com.example.FakeClass"));
+        assertFalse(ClassUtils.isPresent("com.example.FakeClass", Thread.currentThread().getContextClassLoader()));
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/util/FeatureDetectorSmallTest.java
Patch:
@@ -25,6 +25,6 @@
 public class FeatureDetectorSmallTest {
     @Test
     public void isSpringJdbcAvailable() {
-        assertTrue(FeatureDetector.isSpringJdbcAvailable());
+        assertTrue(new FeatureDetector(Thread.currentThread().getContextClassLoader()).isSpringJdbcAvailable());
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/util/jdbc/DriverDataSourceSmallTest.java
Patch:
@@ -30,7 +30,7 @@ public void getConnectionException() throws Exception {
         String password = "superS3cr3t";
 
         try {
-            new DriverDataSource(null, url, user, password).getConnection();
+            new DriverDataSource(Thread.currentThread().getContextClassLoader(), null, url, user, password).getConnection();
         } catch (FlywayException e) {
             assertTrue(e.getCause() instanceof SQLException);
             assertTrue(e.getMessage().contains(url));

File: flyway-maven-plugin/src/main/java/org/flywaydb/maven/AbstractFlywayMojo.java
Patch:
@@ -330,7 +330,7 @@ private void loadCredentialsFromSettings() throws FlywayException {
      * @throws Exception Thrown when the datasource could not be created.
      */
     /* private -> for testing */ DataSource createDataSource() throws Exception {
-        return new DriverDataSource(
+        return new DriverDataSource(Thread.currentThread().getContextClassLoader(),
                 System.getProperty("flyway.driver", driver),
                 System.getProperty("flyway.url", url),
                 System.getProperty("flyway.user", user),
@@ -364,6 +364,7 @@ public final void execute() throws MojoExecutionException, MojoFailureException
         try {
             loadCredentialsFromSettings();
 
+            flyway.setClassLoader(Thread.currentThread().getContextClassLoader());
             flyway.setDataSource(createDataSource());
             flyway.setSchemas(schemas);
             flyway.setTable(table);

File: flyway-core/src/main/java/org/flywaydb/core/api/resolver/MigrationExecutor.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.resolver;
+package org.flywaydb.core.api.resolver;
 
 import java.sql.Connection;
 

File: flyway-core/src/main/java/org/flywaydb/core/command/DbMigrate.java
Patch:
@@ -25,8 +25,8 @@
 import org.flywaydb.core.info.MigrationInfoServiceImpl;
 import org.flywaydb.core.metadatatable.AppliedMigration;
 import org.flywaydb.core.metadatatable.MetaDataTable;
-import org.flywaydb.core.resolver.MigrationResolver;
-import org.flywaydb.core.resolver.ResolvedMigration;
+import org.flywaydb.core.api.resolver.MigrationResolver;
+import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.util.StopWatch;
 import org.flywaydb.core.util.TimeFormat;
 import org.flywaydb.core.util.jdbc.TransactionCallback;

File: flyway-core/src/main/java/org/flywaydb/core/command/DbValidate.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.info.MigrationInfoServiceImpl;
 import org.flywaydb.core.metadatatable.MetaDataTable;
-import org.flywaydb.core.resolver.MigrationResolver;
+import org.flywaydb.core.api.resolver.MigrationResolver;
 import org.flywaydb.core.util.Pair;
 import org.flywaydb.core.util.StopWatch;
 import org.flywaydb.core.util.TimeFormat;

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/FlywaySqlScriptException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.flywaydb.core.command;
+package org.flywaydb.core.dbsupport;
 
 import org.flywaydb.core.api.FlywayException;
 

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/SqlScript.java
Patch:
@@ -16,7 +16,6 @@
 package org.flywaydb.core.dbsupport;
 
 import org.flywaydb.core.api.FlywayException;
-import org.flywaydb.core.command.FlywaySqlScriptException;
 import org.flywaydb.core.util.StringUtils;
 import org.flywaydb.core.util.logging.Log;
 import org.flywaydb.core.util.logging.LogFactory;

File: flyway-core/src/main/java/org/flywaydb/core/info/MigrationInfoImpl.java
Patch:
@@ -21,7 +21,7 @@
 import org.flywaydb.core.api.MigrationType;
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.metadatatable.AppliedMigration;
-import org.flywaydb.core.resolver.ResolvedMigration;
+import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.util.ObjectUtils;
 
 import java.util.Date;

File: flyway-core/src/main/java/org/flywaydb/core/resolver/jdbc/JdbcMigrationExecutor.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.migration.jdbc.JdbcMigration;
-import org.flywaydb.core.resolver.MigrationExecutor;
+import org.flywaydb.core.api.resolver.MigrationExecutor;
 
 import java.sql.Connection;
 

File: flyway-core/src/main/java/org/flywaydb/core/resolver/spring/SpringJdbcMigrationExecutor.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.migration.spring.SpringJdbcMigration;
-import org.flywaydb.core.resolver.MigrationExecutor;
+import org.flywaydb.core.api.resolver.MigrationExecutor;
 import org.springframework.jdbc.datasource.SingleConnectionDataSource;
 
 import java.sql.Connection;

File: flyway-core/src/main/java/org/flywaydb/core/resolver/sql/SqlMigrationExecutor.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.dbsupport.DbSupport;
 import org.flywaydb.core.dbsupport.SqlScript;
-import org.flywaydb.core.resolver.MigrationExecutor;
+import org.flywaydb.core.api.resolver.MigrationExecutor;
 import org.flywaydb.core.dbsupport.JdbcTemplate;
 import org.flywaydb.core.util.PlaceholderReplacer;
 import org.flywaydb.core.util.Resource;

File: flyway-core/src/main/java/org/flywaydb/core/util/Location.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * A location to load migrations from.
  */
-public class Location implements Comparable<Location> {
+public final class Location implements Comparable<Location> {
     /**
      * The prefix for classpath locations.
      */
@@ -117,7 +117,7 @@ public String getPath() {
     }
 
     /**
-     * @return The location descriptor.
+     * @return The complete location descriptor.
      */
     public String getDescriptor() {
         return prefix + path;
@@ -144,7 +144,7 @@ public int hashCode() {
     }
 
     /**
-     * @return The location descriptor.
+     * @return The complete location descriptor.
      */
     @Override
     public String toString() {

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/sqlserver/SQLServerMigrationTestCase.java
Patch:
@@ -17,7 +17,7 @@
 
 import org.flywaydb.core.api.FlywayException;
 import org.flywaydb.core.api.MigrationState;
-import org.flywaydb.core.command.FlywaySqlScriptException;
+import org.flywaydb.core.dbsupport.FlywaySqlScriptException;
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.migration.MigrationTestCase;
 import org.junit.Ignore;

File: flyway-core/src/test/java/org/flywaydb/core/info/MigrationInfoImplSmallTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.flywaydb.core.api.MigrationType;
 import org.flywaydb.core.api.MigrationVersion;
 import org.flywaydb.core.metadatatable.AppliedMigration;
-import org.flywaydb.core.resolver.ResolvedMigration;
+import org.flywaydb.core.resolver.ResolvedMigrationImpl;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
@@ -29,7 +29,7 @@ public void validate() {
         String description = "test";
         MigrationType type = MigrationType.SQL;
 
-        ResolvedMigration resolvedMigration = new ResolvedMigration();
+        ResolvedMigrationImpl resolvedMigration = new ResolvedMigrationImpl();
         resolvedMigration.setVersion(version);
         resolvedMigration.setDescription(description);
         resolvedMigration.setType(type);

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -21,12 +21,12 @@
 import org.flywaydb.core.api.MigrationState;
 import org.flywaydb.core.api.MigrationType;
 import org.flywaydb.core.api.MigrationVersion;
-import org.flywaydb.core.command.FlywaySqlScriptException;
+import org.flywaydb.core.dbsupport.FlywaySqlScriptException;
 import org.flywaydb.core.dbsupport.DbSupport;
 import org.flywaydb.core.dbsupport.DbSupportFactory;
 import org.flywaydb.core.dbsupport.JdbcTemplate;
 import org.flywaydb.core.dbsupport.Schema;
-import org.flywaydb.core.resolver.ResolvedMigration;
+import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.resolver.sql.SqlMigrationResolver;
 import org.flywaydb.core.util.Location;
 import org.flywaydb.core.util.PlaceholderReplacer;

File: flyway-core/src/test/java/org/flywaydb/core/resolver/jdbc/JdbcMigrationResolverSmallTest.java
Patch:
@@ -16,15 +16,14 @@
 package org.flywaydb.core.resolver.jdbc;
 
 import org.flywaydb.core.api.FlywayException;
-import org.flywaydb.core.resolver.ResolvedMigration;
+import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.resolver.jdbc.dummy.V2__InterfaceBasedMigration;
 import org.flywaydb.core.resolver.jdbc.dummy.Version3dot5;
 import org.flywaydb.core.util.Location;
 import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
@@ -48,7 +47,6 @@ public void resolveMigrations() {
         assertEquals(3, migrations.size());
 
         List<ResolvedMigration> migrationList = new ArrayList<ResolvedMigration>(migrations);
-        Collections.sort(migrationList);
 
         ResolvedMigration migrationInfo = migrationList.get(0);
         assertEquals("2", migrationInfo.getVersion().toString());

File: flyway-core/src/test/java/org/flywaydb/core/resolver/spring/SpringJdbcMigrationResolverSmallTest.java
Patch:
@@ -15,15 +15,14 @@
  */
 package org.flywaydb.core.resolver.spring;
 
-import org.flywaydb.core.resolver.ResolvedMigration;
+import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.resolver.spring.dummy.V2__InterfaceBasedMigration;
 import org.flywaydb.core.resolver.spring.dummy.Version3dot5;
 import org.flywaydb.core.util.Location;
 import org.junit.Test;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
@@ -42,7 +41,6 @@ public void resolveMigrations() {
         assertEquals(2, migrations.size());
 
         List<ResolvedMigration> migrationList = new ArrayList<ResolvedMigration>(migrations);
-        Collections.sort(migrationList);
 
         assertEquals("2", migrationList.get(0).getVersion().toString());
         assertEquals("3.5", migrationList.get(1).getVersion().toString());

File: flyway-core/src/test/java/org/flywaydb/core/resolver/sql/SqlMigrationResolverMediumTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.flywaydb.core.resolver.sql;
 
-import org.flywaydb.core.resolver.ResolvedMigration;
+import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.util.Location;
 import org.flywaydb.core.util.PlaceholderReplacer;
 import org.junit.Test;
@@ -24,7 +24,6 @@
 import java.net.URLDecoder;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
@@ -46,7 +45,6 @@ public void resolveMigrations() throws Exception {
         assertEquals(3, migrations.size());
 
         List<ResolvedMigration> migrationList = new ArrayList<ResolvedMigration>(migrations);
-        Collections.sort(migrationList);
 
         assertEquals("1", migrationList.get(0).getVersion().toString());
         assertEquals("1.1", migrationList.get(1).getVersion().toString());

File: flyway-core/src/test/java/org/flywaydb/core/resolver/sql/SqlMigrationResolverSmallTest.java
Patch:
@@ -16,7 +16,7 @@
 package org.flywaydb.core.resolver.sql;
 
 import org.flywaydb.core.api.FlywayException;
-import org.flywaydb.core.resolver.ResolvedMigration;
+import org.flywaydb.core.api.resolver.ResolvedMigration;
 import org.flywaydb.core.util.ClassPathResource;
 import org.flywaydb.core.util.FileSystemResource;
 import org.flywaydb.core.util.Location;
@@ -25,7 +25,6 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
@@ -53,7 +52,6 @@ public void resolveMigrations() {
         assertEquals(3, migrations.size());
 
         List<ResolvedMigration> migrationList = new ArrayList<ResolvedMigration>(migrations);
-        Collections.sort(migrationList);
 
         assertEquals("1", migrationList.get(0).getVersion().toString());
         assertEquals("1.1", migrationList.get(1).getVersion().toString());

File: flyway-core/src/main/java/org/flywaydb/core/Flyway.java
Patch:
@@ -21,6 +21,7 @@
 import org.flywaydb.core.command.DbClean;
 import org.flywaydb.core.command.DbInit;
 import org.flywaydb.core.command.DbMigrate;
+import org.flywaydb.core.command.DbRepair;
 import org.flywaydb.core.command.DbSchemas;
 import org.flywaydb.core.command.DbValidate;
 import org.flywaydb.core.dbsupport.DbSupport;
@@ -804,7 +805,8 @@ public Void execute(Connection connectionMetaDataTable, Connection connectionUse
     public void repair() throws FlywayException {
         execute(new Command<Void>() {
             public Void execute(Connection connectionMetaDataTable, Connection connectionUserObjects, DbSupport dbSupport, Schema[] schemas) {
-                new MetaDataTableImpl(dbSupport, schemas[0].getTable(table)).repair();
+                MetaDataTable metaDataTable = new MetaDataTableImpl(dbSupport, schemas[0].getTable(table));
+                new DbRepair(connectionMetaDataTable, metaDataTable).repair();
                 return null;
             }
         });

File: flyway-core/src/test/java/org/flywaydb/core/FlywayMediumTest.java
Patch:
@@ -110,7 +110,7 @@ public void info() throws Exception {
     @Test
     public void repairFirst() throws Exception {
         DriverDataSource dataSource =
-                new DriverDataSource(null, "jdbc:h2:mem:flyway_db_repair;DB_CLOSE_DELAY=-1", "sa", "");
+                new DriverDataSource(null, "jdbc:h2:mem:flyway_db_repair;DB_CLOSE_DELAY=-1", "sa", "", "SET AUTOCOMMIT OFF");
 
         Flyway flyway = new Flyway();
         flyway.setDataSource(dataSource);

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/sqlserver/SQLServerCaseSensitiveMigrationTestCase.java
Patch:
@@ -52,7 +52,7 @@ public void caseSensitiveCollation() throws Exception {
         assertEquals(4, flyway.info().applied().length);
 
         Connection connection = dataSource.getConnection();
-        DbSupport dbSupport = DbSupportFactory.createDbSupport(connection);
+        DbSupport dbSupport = DbSupportFactory.createDbSupport(connection, true);
 
         assertEquals(2, dbSupport.getJdbcTemplate().queryForInt("select count(*) from all_misters"));
 

File: flyway-core/src/test/java/org/flywaydb/core/migration/ConcurrentMigrationTestCase.java
Patch:
@@ -78,7 +78,7 @@ public void setUp() throws Exception {
         concurrentMigrationDataSource = createDataSource(customProperties);
 
         Connection connection = concurrentMigrationDataSource.getConnection();
-        schemaQuoted = DbSupportFactory.createDbSupport(connection).quote("concurrent_test");
+        schemaQuoted = DbSupportFactory.createDbSupport(connection, false).quote("concurrent_test");
         connection.close();
 
         flyway = createFlyway();

File: flyway-core/src/test/java/org/flywaydb/core/migration/MigrationTestCase.java
Patch:
@@ -74,7 +74,7 @@ public void setUp() throws Exception {
         dataSource = createDataSource(customProperties);
 
         connection = dataSource.getConnection();
-        dbSupport = DbSupportFactory.createDbSupport(connection);
+        dbSupport = DbSupportFactory.createDbSupport(connection, false);
         jdbcTemplate = dbSupport.getJdbcTemplate();
 
         flyway = new Flyway();

File: flyway-core/src/main/java/org/flywaydb/core/info/MigrationInfoServiceImpl.java
Patch:
@@ -118,6 +118,9 @@ List<MigrationInfoImpl> mergeAvailableAndAppliedMigrations(List<ResolvedMigratio
             if (version.compareTo(context.lastApplied) > 0) {
                 context.lastApplied = version;
             }
+            if (appliedMigration.getType() == MigrationType.SCHEMA) {
+                context.schema = version;
+            }
             if (appliedMigration.getType() == MigrationType.INIT) {
                 context.init = version;
             }

File: flyway-ant-largetest/src/test/java/org/flywaydb/ant/AntLargeTest.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.ant;
+package org.flywaydb.ant;
 
-import com.googlecode.flyway.core.util.FileCopyUtils;
+import org.flywaydb.core.util.FileCopyUtils;
 import org.junit.Test;
 import org.w3c.dom.Document;
 

File: flyway-ant-largetest/src/test/resources/migrate/src/largetest/migrate/V1_2__Another_user.java
Patch:
@@ -15,7 +15,7 @@
  */
 package largetest.migrate;
 
-import com.googlecode.flyway.core.api.migration.jdbc.JdbcMigration;
+import org.flywaydb.core.api.migration.jdbc.JdbcMigration;
 
 import java.sql.Connection;
 

File: flyway-ant/src/main/java/org/flywaydb/ant/AntLog.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.ant;
+package org.flywaydb.ant;
 
-import com.googlecode.flyway.core.util.logging.Log;
+import org.flywaydb.core.util.logging.Log;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.Task;
 

File: flyway-ant/src/main/java/org/flywaydb/ant/AntLogCreator.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.ant;
+package org.flywaydb.ant;
 
-import com.googlecode.flyway.core.util.logging.Log;
-import com.googlecode.flyway.core.util.logging.LogCreator;
+import org.flywaydb.core.util.logging.Log;
+import org.flywaydb.core.util.logging.LogCreator;
 import org.apache.tools.ant.Project;
 
 /**

File: flyway-ant/src/main/java/org/flywaydb/ant/CleanTask.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.ant;
+package org.flywaydb.ant;
 
-import com.googlecode.flyway.core.Flyway;
+import org.flywaydb.core.Flyway;
 
 /**
  * Ant task that drops all (tables, views, procedures, triggers, ...) in the configured schemas.

File: flyway-ant/src/main/java/org/flywaydb/ant/InfoTask.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.ant;
+package org.flywaydb.ant;
 
-import com.googlecode.flyway.core.Flyway;
-import com.googlecode.flyway.core.info.MigrationInfoDumper;
+import org.flywaydb.core.Flyway;
+import org.flywaydb.core.info.MigrationInfoDumper;
 
 /**
  * Ant task to retrieve the complete information about the migrations including applied, pending and current migrations with

File: flyway-ant/src/main/java/org/flywaydb/ant/InitTask.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.ant;
+package org.flywaydb.ant;
 
-import com.googlecode.flyway.core.Flyway;
+import org.flywaydb.core.Flyway;
 
 /**
  * Ant task that initializes the metadata table in an existing schema.

File: flyway-ant/src/main/java/org/flywaydb/ant/MigrateTask.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.ant;
+package org.flywaydb.ant;
 
-import com.googlecode.flyway.core.Flyway;
+import org.flywaydb.core.Flyway;
 
 /**
  * Ant task that triggers the migration of the configured database to the latest version.

File: flyway-ant/src/main/java/org/flywaydb/ant/RepairTask.java
Patch:
@@ -13,10 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.ant;
+package org.flywaydb.ant;
 
-import com.googlecode.flyway.core.Flyway;
-import com.googlecode.flyway.core.api.MigrationVersion;
+import org.flywaydb.core.Flyway;
 
 /**
  * Ant task that repairs the metadata table after a failed migration on a database without DDL transactions.

File: flyway-ant/src/main/java/org/flywaydb/ant/ValidateTask.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.ant;
+package org.flywaydb.ant;
 
-import com.googlecode.flyway.core.Flyway;
+import org.flywaydb.core.Flyway;
 
 /**
  * Ant task to validate the applied migrations in the database against the available classpath migrations in order to

File: flyway-ant/src/test/java/org/flywaydb/ant/AbstractFlywayTaskSmallTest.java
Patch:
@@ -13,8 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.ant;
+package org.flywaydb.ant;
 
+import org.flywaydb.ant.AbstractFlywayTask;
 import org.junit.Test;
 
 import java.io.File;

File: flyway-commandline/src/main/java/org/flywaydb/commandline/ConsoleLog.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.commandline;
+package org.flywaydb.commandline;
 
-import com.googlecode.flyway.core.util.logging.Log;
+import org.flywaydb.core.util.logging.Log;
 
 /**
  * Wrapper around a simple Console output.

File: flyway-commandline/src/main/java/org/flywaydb/commandline/ConsoleLogCreator.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.commandline;
+package org.flywaydb.commandline;
 
-import com.googlecode.flyway.core.util.logging.Log;
-import com.googlecode.flyway.core.util.logging.LogCreator;
+import org.flywaydb.core.util.logging.Log;
+import org.flywaydb.core.util.logging.LogCreator;
 
 /**
  * Log Creator for the Command-Line console.

File: flyway-commandline/src/test/java/org/flywaydb/commandline/MainSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.commandline;
+package org.flywaydb.commandline;
 
 import org.junit.Before;
 import org.junit.Test;

File: flyway-core/src/main/java/org/flywaydb/core/api/FlywayException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.api;
+package org.flywaydb.core.api;
 
 /**
  * Exception thrown when Flyway encounters a problem.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationInfo.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.api;
+package org.flywaydb.core.api;
 
 import java.util.Date;
 

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationInfoService.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.api;
+package org.flywaydb.core.api;
 
 /**
  * Info about all migrations, including applied, current and pending with details and status.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationState.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.api;
+package org.flywaydb.core.api;
 
 /**
  * The state of a migration.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationType.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.api;
+package org.flywaydb.core.api;
 
 /**
  * Type of migration.

File: flyway-core/src/main/java/org/flywaydb/core/api/MigrationVersion.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.api;
+package org.flywaydb.core.api;
 
 import java.util.ArrayList;
 import java.util.List;

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/MigrationChecksumProvider.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.api.migration;
+package org.flywaydb.core.api.migration;
 
 /**
  * Migration implementors that also implement this interface will be able to specify their checksum (for

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/MigrationInfoProvider.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.api.migration;
+package org.flywaydb.core.api.migration;
 
-import com.googlecode.flyway.core.api.MigrationVersion;
+import org.flywaydb.core.api.MigrationVersion;
 
 /**
  * Migration implementors that also implement this interface will be able to specify their version and description

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/jdbc/JdbcMigration.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.api.migration.jdbc;
+package org.flywaydb.core.api.migration.jdbc;
 
 import java.sql.Connection;
 

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/jdbc/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Interfaces for Jdbc Migrations.
  */
-package com.googlecode.flyway.core.api.migration.jdbc;
\ No newline at end of file
+package org.flywaydb.core.api.migration.jdbc;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Interfaces for Migration implementors.
  */
-package com.googlecode.flyway.core.api.migration;
\ No newline at end of file
+package org.flywaydb.core.api.migration;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/spring/SpringJdbcMigration.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.api.migration.spring;
+package org.flywaydb.core.api.migration.spring;
 
 import org.springframework.jdbc.core.JdbcTemplate;
 

File: flyway-core/src/main/java/org/flywaydb/core/api/migration/spring/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Interfaces for Spring Jdbc Migrations (require Spring Jdbc + dependencies on the classpath).
  */
-package com.googlecode.flyway.core.api.migration.spring;
\ No newline at end of file
+package org.flywaydb.core.api.migration.spring;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/api/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * FlywayException, MigrationInfo and related classes.
  */
-package com.googlecode.flyway.core.api;
\ No newline at end of file
+package org.flywaydb.core.api;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/command/FlywaySqlScriptException.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.command;
+package org.flywaydb.core.command;
 
-import com.googlecode.flyway.core.api.FlywayException;
+import org.flywaydb.core.api.FlywayException;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/command/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package com.googlecode.flyway.core.info;
\ No newline at end of file
+package org.flywaydb.core.command;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/Delimiter.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport;
+package org.flywaydb.core.dbsupport;
 
 /**
  * Represents a sql statement delimiter.

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/Function.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport;
+package org.flywaydb.core.dbsupport;
 
 /**
  * A user defined type within a schema.

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/JdbcTemplate.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport;
+package org.flywaydb.core.dbsupport;
 
-import com.googlecode.flyway.core.util.jdbc.JdbcUtils;
-import com.googlecode.flyway.core.util.jdbc.RowMapper;
+import org.flywaydb.core.util.jdbc.JdbcUtils;
+import org.flywaydb.core.util.jdbc.RowMapper;
 
 import java.sql.Connection;
 import java.sql.DatabaseMetaData;

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/Schema.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport;
+package org.flywaydb.core.dbsupport;
 
-import com.googlecode.flyway.core.api.FlywayException;
-import com.googlecode.flyway.core.util.jdbc.JdbcUtils;
+import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.util.jdbc.JdbcUtils;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/SchemaObject.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport;
+package org.flywaydb.core.dbsupport;
 
-import com.googlecode.flyway.core.api.FlywayException;
+import org.flywaydb.core.api.FlywayException;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/SqlStatement.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport;
+package org.flywaydb.core.dbsupport;
 
 /**
  * A sql statement from a script that can be executed at once against a database.

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/SqlStatementBuilder.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport;
+package org.flywaydb.core.dbsupport;
 
-import com.googlecode.flyway.core.util.StringUtils;
+import org.flywaydb.core.util.StringUtils;
 
 import java.util.ArrayList;
 import java.util.List;

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/Type.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport;
+package org.flywaydb.core.dbsupport;
 
 /**
  * A user defined type within a schema.

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/db2/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package com.googlecode.flyway.core.util;
\ No newline at end of file
+package org.flywaydb.core.dbsupport.db2;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/derby/DerbySqlStatementBuilder.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.derby;
+package org.flywaydb.core.dbsupport.derby;
 
-import com.googlecode.flyway.core.dbsupport.SqlStatementBuilder;
+import org.flywaydb.core.dbsupport.SqlStatementBuilder;
 
 /**
  * SqlStatementBuilder supporting Derby-specific delimiter changes.

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/derby/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package com.googlecode.flyway.core.command;
\ No newline at end of file
+package org.flywaydb.core.dbsupport.derby;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/h2/H2SqlStatementBuilder.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.h2;
+package org.flywaydb.core.dbsupport.h2;
 
-import com.googlecode.flyway.core.dbsupport.SqlStatementBuilder;
+import org.flywaydb.core.dbsupport.SqlStatementBuilder;
 
 /**
  * SqlStatementBuilder supporting H2-specific delimiter changes.

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/h2/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package com.googlecode.flyway.core.resolver;
\ No newline at end of file
+package org.flywaydb.core.dbsupport.h2;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/hsql/HsqlSqlStatementBuilder.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.hsql;
+package org.flywaydb.core.dbsupport.hsql;
 
-import com.googlecode.flyway.core.dbsupport.Delimiter;
-import com.googlecode.flyway.core.dbsupport.SqlStatementBuilder;
+import org.flywaydb.core.dbsupport.Delimiter;
+import org.flywaydb.core.dbsupport.SqlStatementBuilder;
 
 /**
  * SqlStatementBuilder supporting Hsql-specific delimiter changes.

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/postgresql/PostgreSQLSqlStatementBuilder.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.postgresql;
+package org.flywaydb.core.dbsupport.postgresql;
 
-import com.googlecode.flyway.core.dbsupport.SqlStatementBuilder;
+import org.flywaydb.core.dbsupport.SqlStatementBuilder;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;

File: flyway-core/src/main/java/org/flywaydb/core/dbsupport/sqlserver/SQLServerSqlStatementBuilder.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.sqlserver;
+package org.flywaydb.core.dbsupport.sqlserver;
 
-import com.googlecode.flyway.core.dbsupport.Delimiter;
-import com.googlecode.flyway.core.dbsupport.SqlStatementBuilder;
+import org.flywaydb.core.dbsupport.Delimiter;
+import org.flywaydb.core.dbsupport.SqlStatementBuilder;
 
 /**
  * SqlStatementBuilder supporting SQL Server-specific delimiter changes.

File: flyway-core/src/main/java/org/flywaydb/core/info/MigrationInfoContext.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.info;
+package org.flywaydb.core.info;
 
-import com.googlecode.flyway.core.api.MigrationVersion;
+import org.flywaydb.core.api.MigrationVersion;
 
 /**
  * The current context of the migrations.

File: flyway-core/src/main/java/org/flywaydb/core/metadatatable/AppliedMigration.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.metadatatable;
+package org.flywaydb.core.metadatatable;
 
-import com.googlecode.flyway.core.api.MigrationType;
-import com.googlecode.flyway.core.api.MigrationVersion;
+import org.flywaydb.core.api.MigrationType;
+import org.flywaydb.core.api.MigrationVersion;
 
 import java.util.Date;
 

File: flyway-core/src/main/java/org/flywaydb/core/metadatatable/MetaDataTable.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.metadatatable;
+package org.flywaydb.core.metadatatable;
 
-import com.googlecode.flyway.core.api.MigrationVersion;
-import com.googlecode.flyway.core.dbsupport.Schema;
+import org.flywaydb.core.api.MigrationVersion;
+import org.flywaydb.core.dbsupport.Schema;
 
 import java.util.List;
 

File: flyway-core/src/main/java/org/flywaydb/core/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * The main Flyway package and for most users, the only one they'll ever need to know about.
  */
-package com.googlecode.flyway.core;
\ No newline at end of file
+package org.flywaydb.core;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/resolver/MigrationExecutor.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.resolver;
+package org.flywaydb.core.resolver;
 
 import java.sql.Connection;
 

File: flyway-core/src/main/java/org/flywaydb/core/resolver/MigrationResolver.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.resolver;
+package org.flywaydb.core.resolver;
 
 import java.util.List;
 

File: flyway-core/src/main/java/org/flywaydb/core/resolver/ResolvedMigration.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.resolver;
+package org.flywaydb.core.resolver;
 
-import com.googlecode.flyway.core.api.MigrationType;
-import com.googlecode.flyway.core.api.MigrationVersion;
+import org.flywaydb.core.api.MigrationType;
+import org.flywaydb.core.api.MigrationVersion;
 
 /**
  * A migration available on the classpath.

File: flyway-core/src/main/java/org/flywaydb/core/util/ClassPathResource.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
-import com.googlecode.flyway.core.api.FlywayException;
+import org.flywaydb.core.api.FlywayException;
 
 import java.io.IOException;
 import java.io.InputStream;

File: flyway-core/src/main/java/org/flywaydb/core/util/ClassUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;

File: flyway-core/src/main/java/org/flywaydb/core/util/DateUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;

File: flyway-core/src/main/java/org/flywaydb/core/util/ExceptionUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 /**
  * Utility class for dealing with exceptions.

File: flyway-core/src/main/java/org/flywaydb/core/util/FeatureDetector.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
-import com.googlecode.flyway.core.util.logging.Log;
-import com.googlecode.flyway.core.util.logging.LogFactory;
+import org.flywaydb.core.util.logging.Log;
+import org.flywaydb.core.util.logging.LogFactory;
 
 /**
  * Detects whether certain features are available or not.

File: flyway-core/src/main/java/org/flywaydb/core/util/FileCopyUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;

File: flyway-core/src/main/java/org/flywaydb/core/util/FileSystemResource.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
-import com.googlecode.flyway.core.api.FlywayException;
+import org.flywaydb.core.api.FlywayException;
 
 import java.io.File;
 import java.io.FileInputStream;

File: flyway-core/src/main/java/org/flywaydb/core/util/Location.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
-import com.googlecode.flyway.core.api.FlywayException;
+import org.flywaydb.core.api.FlywayException;
 
 /**
  * A location to load migrations from.

File: flyway-core/src/main/java/org/flywaydb/core/util/Locations.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
-import com.googlecode.flyway.core.util.logging.Log;
-import com.googlecode.flyway.core.util.logging.LogFactory;
+import org.flywaydb.core.util.logging.Log;
+import org.flywaydb.core.util.logging.LogFactory;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: flyway-core/src/main/java/org/flywaydb/core/util/ObjectUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 /**
  * Collection of utility methods for dealing with objects.

File: flyway-core/src/main/java/org/flywaydb/core/util/Pair.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 /**
  * A simple pair of values.

File: flyway-core/src/main/java/org/flywaydb/core/util/PlaceholderReplacer.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
-import com.googlecode.flyway.core.api.FlywayException;
+import org.flywaydb.core.api.FlywayException;
 
 import java.util.HashMap;
 import java.util.Map;

File: flyway-core/src/main/java/org/flywaydb/core/util/PropertiesUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import java.io.BufferedReader;
 import java.io.IOException;

File: flyway-core/src/main/java/org/flywaydb/core/util/Resource.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 /**
  * A loadable resource.

File: flyway-core/src/main/java/org/flywaydb/core/util/StopWatch.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 /**
  * Stop watch, inspired by the implementation in the Spring framework.

File: flyway-core/src/main/java/org/flywaydb/core/util/StringUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import java.util.Collection;
 import java.util.Iterator;

File: flyway-core/src/main/java/org/flywaydb/core/util/TimeFormat.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 /**
  * Formats execution times.

File: flyway-core/src/main/java/org/flywaydb/core/util/UrlUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import java.io.UnsupportedEncodingException;
 import java.net.URL;

File: flyway-core/src/main/java/org/flywaydb/core/util/jdbc/RowMapper.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.jdbc;
+package org.flywaydb.core.util.jdbc;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;

File: flyway-core/src/main/java/org/flywaydb/core/util/jdbc/TransactionCallback.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.jdbc;
+package org.flywaydb.core.util.jdbc;
 
 /**
  * Callback for TransactionTemplate.

File: flyway-core/src/main/java/org/flywaydb/core/util/logging/Log.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.logging;
+package org.flywaydb.core.util.logging;
 
 /**
  * A logger.

File: flyway-core/src/main/java/org/flywaydb/core/util/logging/LogCreator.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.logging;
+package org.flywaydb.core.util.logging;
 
 /**
  * Factory for implementation-specific loggers.

File: flyway-core/src/main/java/org/flywaydb/core/util/logging/apachecommons/ApacheCommonsLog.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.logging.apachecommons;
+package org.flywaydb.core.util.logging.apachecommons;
 
-import com.googlecode.flyway.core.util.logging.Log;
+import org.flywaydb.core.util.logging.Log;
 
 /**
  * Wrapper for an Apache Commons Logging logger.

File: flyway-core/src/main/java/org/flywaydb/core/util/logging/apachecommons/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package com.googlecode.flyway.core.dbsupport.derby;
\ No newline at end of file
+package org.flywaydb.core.util.logging.apachecommons;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/util/logging/javautil/JavaUtilLog.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.logging.javautil;
+package org.flywaydb.core.util.logging.javautil;
 
-import com.googlecode.flyway.core.util.logging.Log;
+import org.flywaydb.core.util.logging.Log;
 
 import java.util.logging.Level;
 import java.util.logging.LogRecord;

File: flyway-core/src/main/java/org/flywaydb/core/util/logging/javautil/JavaUtilLogCreator.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.logging.javautil;
+package org.flywaydb.core.util.logging.javautil;
 
-import com.googlecode.flyway.core.util.logging.Log;
-import com.googlecode.flyway.core.util.logging.LogCreator;
+import org.flywaydb.core.util.logging.Log;
+import org.flywaydb.core.util.logging.LogCreator;
 
 import java.util.logging.Logger;
 

File: flyway-core/src/main/java/org/flywaydb/core/util/logging/javautil/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package com.googlecode.flyway.core.dbsupport.h2;
\ No newline at end of file
+package org.flywaydb.core.util.logging.javautil;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/util/logging/slf4j/Slf4jLog.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.logging.slf4j;
+package org.flywaydb.core.util.logging.slf4j;
 
-import com.googlecode.flyway.core.util.logging.Log;
+import org.flywaydb.core.util.logging.Log;
 
 /**
  * Wrapper for an Apache Commons Logging logger.

File: flyway-core/src/main/java/org/flywaydb/core/util/logging/slf4j/Slf4jLogCreator.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.logging.slf4j;
+package org.flywaydb.core.util.logging.slf4j;
 
-import com.googlecode.flyway.core.util.logging.Log;
-import com.googlecode.flyway.core.util.logging.LogCreator;
+import org.flywaydb.core.util.logging.Log;
+import org.flywaydb.core.util.logging.LogCreator;
 import org.apache.commons.logging.LogFactory;
 
 /**

File: flyway-core/src/main/java/org/flywaydb/core/util/logging/slf4j/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package com.googlecode.flyway.core.dbsupport;
\ No newline at end of file
+package org.flywaydb.core.util.logging.slf4j;
\ No newline at end of file

File: flyway-core/src/main/java/org/flywaydb/core/util/scanner/classpath/ClassPathLocationScanner.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.scanner.classpath;
+package org.flywaydb.core.util.scanner.classpath;
 
 import java.io.IOException;
 import java.net.URL;

File: flyway-core/src/main/java/org/flywaydb/core/util/scanner/classpath/DefaultUrlResolver.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.scanner.classpath;
+package org.flywaydb.core.util.scanner.classpath;
 
 import java.io.IOException;
 import java.net.URL;

File: flyway-core/src/main/java/org/flywaydb/core/util/scanner/classpath/JarFileClassPathLocationScanner.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.scanner.classpath;
+package org.flywaydb.core.util.scanner.classpath;
 
 import java.io.IOException;
 import java.net.JarURLConnection;

File: flyway-core/src/main/java/org/flywaydb/core/util/scanner/classpath/OsgiClassPathLocationScanner.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.scanner.classpath;
+package org.flywaydb.core.util.scanner.classpath;
 
 import org.osgi.framework.Bundle;
 import org.osgi.framework.FrameworkUtil;

File: flyway-core/src/main/java/org/flywaydb/core/util/scanner/classpath/UrlResolver.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.scanner.classpath;
+package org.flywaydb.core.util.scanner.classpath;
 
 import java.io.IOException;
 import java.net.URL;

File: flyway-core/src/main/java/org/flywaydb/core/util/scanner/classpath/jboss/JBossVFSv2UrlResolver.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.scanner.classpath.jboss;
+package org.flywaydb.core.util.scanner.classpath.jboss;
 
-import com.googlecode.flyway.core.api.FlywayException;
-import com.googlecode.flyway.core.util.scanner.classpath.UrlResolver;
+import org.flywaydb.core.api.FlywayException;
+import org.flywaydb.core.util.scanner.classpath.UrlResolver;
 
 import java.io.IOException;
 import java.lang.reflect.Method;

File: flyway-core/src/main/java/org/flywaydb/core/util/scanner/classpath/package-info.java
Patch:
@@ -16,4 +16,4 @@
 /**
  * Private API. No compatibility guarantees provided.
  */
-package com.googlecode.flyway.core.dbsupport.db2;
\ No newline at end of file
+package org.flywaydb.core.util.scanner.classpath;
\ No newline at end of file

File: flyway-core/src/test/java/org/flywaydb/core/DbCategory.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core;
+package org.flywaydb.core;
 
 /**
  * Wraps all interfaces used to express that specific test need DB to run

File: flyway-core/src/test/java/org/flywaydb/core/api/MigrationVersionSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.api;
+package org.flywaydb.core.api;
 
 import org.junit.Test;
 

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/SqlScriptSmallTest.java
Patch:
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport;
+package org.flywaydb.core.dbsupport;
 
-import com.googlecode.flyway.core.dbsupport.mysql.MySQLDbSupport;
-import com.googlecode.flyway.core.util.PlaceholderReplacer;
+import org.flywaydb.core.dbsupport.mysql.MySQLDbSupport;
+import org.flywaydb.core.util.PlaceholderReplacer;
 import org.junit.Ignore;
 import org.junit.Test;
 

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/h2/TestTrigger.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.h2;
+package org.flywaydb.core.dbsupport.h2;
 
 import org.h2.tools.TriggerAdapter;
 

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/hsql/HsqlSqlScriptSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.hsql;
+package org.flywaydb.core.dbsupport.hsql;
 
 import org.junit.Test;
 

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/mysql/MySQLSqlStatementBuilderSmallTest.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.mysql;
+package org.flywaydb.core.dbsupport.mysql;
 
-import com.googlecode.flyway.core.dbsupport.Delimiter;
+import org.flywaydb.core.dbsupport.Delimiter;
 import org.junit.Test;
 
 import static org.junit.Assert.assertFalse;

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/oracle/OracleSchemaSmallTest.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.oracle;
+package org.flywaydb.core.dbsupport.oracle;
 
-import com.googlecode.flyway.core.api.FlywayException;
+import org.flywaydb.core.api.FlywayException;
 import org.junit.Test;
 
 /**

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/oracle/OracleSqlStatementBuilderSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.oracle;
+package org.flywaydb.core.dbsupport.oracle;
 
 import org.junit.Test;
 

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/oracle/sql/javaSource/V1__JavaSource.java
Patch:
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.oracle.sql.javaSource;
+package org.flywaydb.core.dbsupport.oracle.sql.javaSource;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 
-import com.googlecode.flyway.core.api.migration.jdbc.JdbcMigration;
+import org.flywaydb.core.api.migration.jdbc.JdbcMigration;
 
 @SuppressWarnings("UnusedDeclaration")
 public class V1__JavaSource implements JdbcMigration {

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/postgresql/PostgreSQLDbSupportSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.postgresql;
+package org.flywaydb.core.dbsupport.postgresql;
 
 import org.junit.Test;
 

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/postgresql/PostgreSQLSqlStatementBuilderSmallTest.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.postgresql;
+package org.flywaydb.core.dbsupport.postgresql;
 
-import com.googlecode.flyway.core.util.StringUtils;
+import org.flywaydb.core.util.StringUtils;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/sqlserver/JtdsSQLServerCaseSensitiveMigrationMediumTest.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.sqlserver;
+package org.flywaydb.core.dbsupport.sqlserver;
 
-import com.googlecode.flyway.core.util.jdbc.DriverDataSource;
+import org.flywaydb.core.util.jdbc.DriverDataSource;
 import org.junit.experimental.categories.Category;
-import com.googlecode.flyway.core.DbCategory;
+import org.flywaydb.core.DbCategory;
 
 import javax.sql.DataSource;
 import java.util.Properties;

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/sqlserver/JtdsSQLServerMigrationMediumTest.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.sqlserver;
+package org.flywaydb.core.dbsupport.sqlserver;
 
-import com.googlecode.flyway.core.util.jdbc.DriverDataSource;
+import org.flywaydb.core.util.jdbc.DriverDataSource;
 import org.junit.experimental.categories.Category;
-import com.googlecode.flyway.core.DbCategory;
+import org.flywaydb.core.DbCategory;
 
 import javax.sql.DataSource;
 import java.util.Properties;

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/sqlserver/MsSQLServerCaseSensitiveMigrationMediumTest.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.sqlserver;
+package org.flywaydb.core.dbsupport.sqlserver;
 
-import com.googlecode.flyway.core.util.jdbc.DriverDataSource;
+import org.flywaydb.core.util.jdbc.DriverDataSource;
 import org.junit.experimental.categories.Category;
-import com.googlecode.flyway.core.DbCategory;
+import org.flywaydb.core.DbCategory;
 
 import javax.sql.DataSource;
 import java.util.Properties;

File: flyway-core/src/test/java/org/flywaydb/core/dbsupport/sqlserver/large/V3_1_3__Insert_tipos_de_eventos_padroes.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.dbsupport.sqlserver.large;
+package org.flywaydb.core.dbsupport.sqlserver.large;
 
-import com.googlecode.flyway.core.api.migration.spring.SpringJdbcMigration;
+import org.flywaydb.core.api.migration.spring.SpringJdbcMigration;
 import org.springframework.jdbc.core.JdbcTemplate;
 
 @SuppressWarnings("UnusedDeclaration")

File: flyway-core/src/test/java/org/flywaydb/core/resolver/jdbc/dummy/DummyAbstractJdbcMigration.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.resolver.jdbc.dummy;
+package org.flywaydb.core.resolver.jdbc.dummy;
 
-import com.googlecode.flyway.core.api.migration.jdbc.JdbcMigration;
+import org.flywaydb.core.api.migration.jdbc.JdbcMigration;
 
 import java.sql.Connection;
 

File: flyway-core/src/test/java/org/flywaydb/core/resolver/jdbc/dummy/V2__InterfaceBasedMigration.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.resolver.jdbc.dummy;
+package org.flywaydb.core.resolver.jdbc.dummy;
 
-import com.googlecode.flyway.core.api.migration.jdbc.JdbcMigration;
+import org.flywaydb.core.api.migration.jdbc.JdbcMigration;
 
 import java.sql.Connection;
 

File: flyway-core/src/test/java/org/flywaydb/core/resolver/jdbc/dummy/V4__DummyExtendedAbstractJdbcMigration.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.resolver.jdbc.dummy;
+package org.flywaydb.core.resolver.jdbc.dummy;
 
 import java.sql.Connection;
 

File: flyway-core/src/test/java/org/flywaydb/core/resolver/jdbc/error/BrokenJdbcMigration.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.resolver.jdbc.error;
+package org.flywaydb.core.resolver.jdbc.error;
 
-import com.googlecode.flyway.core.api.migration.jdbc.JdbcMigration;
+import org.flywaydb.core.api.migration.jdbc.JdbcMigration;
 
 import java.sql.Connection;
 

File: flyway-core/src/test/java/org/flywaydb/core/resolver/spring/dummy/DummyAbstractSpringJdbcMigration.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.resolver.spring.dummy;
+package org.flywaydb.core.resolver.spring.dummy;
 
-import com.googlecode.flyway.core.api.migration.spring.SpringJdbcMigration;
+import org.flywaydb.core.api.migration.spring.SpringJdbcMigration;
 import org.springframework.jdbc.core.JdbcTemplate;
 
 /**

File: flyway-core/src/test/java/org/flywaydb/core/resolver/spring/dummy/V2__InterfaceBasedMigration.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.resolver.spring.dummy;
+package org.flywaydb.core.resolver.spring.dummy;
 
-import com.googlecode.flyway.core.api.migration.spring.SpringJdbcMigration;
+import org.flywaydb.core.api.migration.spring.SpringJdbcMigration;
 import org.springframework.jdbc.core.JdbcTemplate;
 
 /**

File: flyway-core/src/test/java/org/flywaydb/core/util/ClassPathResourceSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import org.junit.Test;
 
@@ -32,12 +32,12 @@ public void getFilename() throws Exception {
     @Test
     public void loadAsStringUtf8WithoutBOM() {
         assertEquals("SELECT 1 FROM DUAL;",
-                new ClassPathResource("com/googlecode/flyway/core/util/utf8.nofilter").loadAsString("UTF-8"));
+                new ClassPathResource("org/flywaydb/core/util/utf8.nofilter").loadAsString("UTF-8"));
     }
 
     @Test
     public void loadAsStringUtf8WithBOM() {
         assertEquals("SELECT 1 FROM DUAL;",
-                new ClassPathResource("com/googlecode/flyway/core/util/utf8bom.nofilter").loadAsString("UTF-8"));
+                new ClassPathResource("org/flywaydb/core/util/utf8bom.nofilter").loadAsString("UTF-8"));
     }
 }

File: flyway-core/src/test/java/org/flywaydb/core/util/ClassUtilsSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import org.junit.Test;
 
@@ -26,7 +26,7 @@
 public class ClassUtilsSmallTest {
     @Test
     public void isPresent() {
-        assertTrue(ClassUtils.isPresent("com.googlecode.flyway.core.Flyway"));
+        assertTrue(ClassUtils.isPresent("org.flywaydb.core.Flyway"));
     }
 
     @Test

File: flyway-core/src/test/java/org/flywaydb/core/util/ExceptionUtilsSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import org.junit.Test;
 

File: flyway-core/src/test/java/org/flywaydb/core/util/FeatureDetectorSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import org.junit.Test;
 

File: flyway-core/src/test/java/org/flywaydb/core/util/FileSystemResourceSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import org.junit.Test;
 

File: flyway-core/src/test/java/org/flywaydb/core/util/LocationSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import org.junit.Test;
 

File: flyway-core/src/test/java/org/flywaydb/core/util/LocationsSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import org.junit.Test;
 

File: flyway-core/src/test/java/org/flywaydb/core/util/PropertiesUtilsSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import org.junit.Test;
 

File: flyway-core/src/test/java/org/flywaydb/core/util/StringUtilsSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import org.junit.Test;
 

File: flyway-core/src/test/java/org/flywaydb/core/util/TimeFormatSmallTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util;
+package org.flywaydb.core.util;
 
 import org.junit.Test;
 

File: flyway-core/src/test/java/org/flywaydb/core/util/jdbc/DriverDataSourceSmallTest.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.jdbc;
+package org.flywaydb.core.util.jdbc;
 
-import com.googlecode.flyway.core.api.FlywayException;
+import org.flywaydb.core.api.FlywayException;
 import org.junit.Test;
 
 import java.sql.SQLException;

File: flyway-core/src/test/java/org/flywaydb/core/util/logging/StringLog.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.logging;
+package org.flywaydb.core.util.logging;
 
 /**
  * Logger that captures output as a string.

File: flyway-core/src/test/java/org/flywaydb/core/util/logging/StringLogCreator.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.logging;
+package org.flywaydb.core.util.logging;
 
 /**
  * Log creator for capturing the output as a string.

File: flyway-core/src/test/java/org/flywaydb/core/util/scanner/classpath/FileSystemLocationScannerMediumTest.java
Patch:
@@ -13,9 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.scanner.classpath;
+package org.flywaydb.core.util.scanner.classpath;
 
-import com.googlecode.flyway.core.util.scanner.classpath.FileSystemClassPathLocationScanner;
 import org.junit.Test;
 
 import java.io.File;

File: flyway-core/src/test/java/org/flywaydb/core/util/scanner/filesystem/FileSystemScannerMediumTest.java
Patch:
@@ -13,9 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.util.scanner.filesystem;
+package org.flywaydb.core.util.scanner.filesystem;
 
-import com.googlecode.flyway.core.api.FlywayException;
+import org.flywaydb.core.api.FlywayException;
 import org.junit.Test;
 
 /**

File: flyway-core/src/test/java/com/googlecode/flyway/core/resolver/sql/SqlMigrationResolverMediumTest.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.googlecode.flyway.core.resolver.sql;
 
-import com.googlecode.flyway.core.dbsupport.h2.H2DbSupport;
 import com.googlecode.flyway.core.resolver.ResolvedMigration;
 import com.googlecode.flyway.core.util.Location;
 import com.googlecode.flyway.core.util.PlaceholderReplacer;
 import org.junit.Test;
 
+import java.io.File;
 import java.net.URLDecoder;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -40,7 +40,7 @@ public void resolveMigrations() throws Exception {
         String path = URLDecoder.decode(getClass().getClassLoader().getResource("migration/subdir").getPath(), "UTF-8");
 
         SqlMigrationResolver sqlMigrationResolver =
-                new SqlMigrationResolver(null, new Location("filesystem:" + path), PlaceholderReplacer.NO_PLACEHOLDERS, "UTF-8", "V", ".sql");
+                new SqlMigrationResolver(null, new Location("filesystem:" + new File(path).getPath()), PlaceholderReplacer.NO_PLACEHOLDERS, "UTF-8", "V", ".sql");
         Collection<ResolvedMigration> migrations = sqlMigrationResolver.resolveMigrations();
 
         assertEquals(3, migrations.size());

File: flyway-commandline/src/test/java/com/googlecode/flyway/commandline/MainClassLoaderSmallTest.java
Patch:
@@ -33,7 +33,7 @@
  * Medium Test for Main.
  */
 @SuppressWarnings({"JavaDoc"})
-public class MainClassLoaderMediumTest {
+public class MainClassLoaderSmallTest {
     /**
      * The old classloader, to be restored after a test completes.
      */

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/oracle/OracleMigrationMediumTest.java
Patch:
@@ -299,6 +299,7 @@ public void referencePartitionedTable() throws FlywayException {
     /**
      * Tests support for cleaning together with JAVA SOURCE Type.
      */
+    @Ignore("Disabled due to missing functionality in Oracle XE.")
     @Test
     public void javaSource() throws FlywayException, SQLException {
         flyway.setLocations("com/googlecode/flyway/core/dbsupport/oracle/sql/javaSource");

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractFlywayMojo.java
Patch:
@@ -407,10 +407,10 @@ private void loadCredentialsFromSettings() throws FlywayException {
      * @param mavenPropertyValue The value of the Maven property.
      * @return The value to use.
      */
-    private boolean getBooleanProperty(String systemPropertyName, boolean mavenPropertyValue) {
+    protected boolean getBooleanProperty(String systemPropertyName, boolean mavenPropertyValue) {
         String systemPropertyValue = System.getProperty(systemPropertyName);
         if (systemPropertyValue != null) {
-            return Boolean.getBoolean(systemPropertyValue);
+            return Boolean.getBoolean(systemPropertyName);
         }
         return mavenPropertyValue;
     }
@@ -578,4 +578,4 @@ private static void addPlaceholdersFromProperties(Map<String, String> placeholde
             }
         }
     }
-}
+}
\ No newline at end of file

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupportMediumTest.java
Patch:
@@ -64,13 +64,13 @@ private Properties getConnectionProperties() throws IOException {
         if (customPropertiesFile.canRead()) {
             connectionProperties.load(new FileInputStream(customPropertiesFile));
         }
-        if (!connectionProperties.contains("oracle.user")) {
+        if (!connectionProperties.containsKey("oracle.user")) {
             connectionProperties.setProperty("oracle.user", "flyway");
         }
-        if (!connectionProperties.contains("oracle.password")) {
+        if (!connectionProperties.containsKey("oracle.password")) {
             connectionProperties.setProperty("oracle.password", "flyway");
         }
-        if (!connectionProperties.contains("oracle.url")) {
+        if (!connectionProperties.containsKey("oracle.url")) {
             connectionProperties.setProperty("oracle.url", "jdbc:oracle:thin:@localhost:1521:XE");
         }
         return connectionProperties;

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractFlywayMojo.java
Patch:
@@ -407,10 +407,10 @@ private void loadCredentialsFromSettings() throws FlywayException {
      * @param mavenPropertyValue The value of the Maven property.
      * @return The value to use.
      */
-    private boolean getBooleanProperty(String systemPropertyName, boolean mavenPropertyValue) {
+    protected boolean getBooleanProperty(String systemPropertyName, boolean mavenPropertyValue) {
         String systemPropertyValue = System.getProperty(systemPropertyName);
         if (systemPropertyValue != null) {
-            return Boolean.getBoolean(systemPropertyValue);
+            return Boolean.getBoolean(systemPropertyName);
         }
         return mavenPropertyValue;
     }
@@ -578,4 +578,4 @@ private static void addPlaceholdersFromProperties(Map<String, String> placeholde
             }
         }
     }
-}
+}
\ No newline at end of file

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupportMediumTest.java
Patch:
@@ -64,13 +64,13 @@ private Properties getConnectionProperties() throws IOException {
         if (customPropertiesFile.canRead()) {
             connectionProperties.load(new FileInputStream(customPropertiesFile));
         }
-        if (!connectionProperties.contains("oracle.user")) {
+        if (!connectionProperties.containsKey("oracle.user")) {
             connectionProperties.setProperty("oracle.user", "flyway");
         }
-        if (!connectionProperties.contains("oracle.password")) {
+        if (!connectionProperties.containsKey("oracle.password")) {
             connectionProperties.setProperty("oracle.password", "flyway");
         }
-        if (!connectionProperties.contains("oracle.url")) {
+        if (!connectionProperties.containsKey("oracle.url")) {
             connectionProperties.setProperty("oracle.url", "jdbc:oracle:thin:@localhost:1521:XE");
         }
         return connectionProperties;

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/derby/DerbyMigrationMediumTest.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.googlecode.flyway.core.dbsupport.derby;
 
+import com.googlecode.flyway.core.DbCategory;
+import com.googlecode.flyway.core.api.FlywayException;
 import com.googlecode.flyway.core.migration.MigrationTestCase;
 import com.googlecode.flyway.core.util.jdbc.DriverDataSource;
 import org.junit.experimental.categories.Category;
-import com.googlecode.flyway.core.DbCategory;
 
 import javax.sql.DataSource;
-import java.sql.SQLException;
 import java.util.Properties;
 
 /**
@@ -37,7 +37,7 @@ public class DerbyMigrationMediumTest extends MigrationTestCase {
     public void tearDown() throws Exception {
         try {
             new DriverDataSource(null, "jdbc:derby:memory:flyway_db;drop=true", "", "").getConnection();
-        } catch (SQLException e) {
+        } catch (FlywayException e) {
             //OK, expected error 08006. See http://db.apache.org/derby/docs/dev/devguide/cdevdvlpinmemdb.html
         }
 

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/IncludeProjectDependenciesComponentConfigurator.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.List;
 
 /**
- * A custom ComponentConfigurator which adds the project's runtime classpath elements to the
+ * A custom ComponentConfigurator which adds the project's runtime classpath elements to the plugin's classpath.
  *
  * @plexus.component role="org.codehaus.plexus.component.configurator.ComponentConfigurator"
  * role-hint="include-project-dependencies"

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/IncludeProjectDependenciesComponentConfigurator.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.List;
 
 /**
- * A custom ComponentConfigurator which adds the project's runtime classpath elements to the
+ * A custom ComponentConfigurator which adds the project's runtime classpath elements to the plugin's classpath.
  *
  * @plexus.component role="org.codehaus.plexus.component.configurator.ComponentConfigurator"
  * role-hint="include-project-dependencies"

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -621,7 +621,7 @@ public void setTarget(MigrationVersion target) {
      *               number will not be applied. (default: the latest version)
      */
     public void setTarget(String target) {
-        this.target = new MigrationVersion(target);
+        this.target = MigrationVersion.fromVersion(target);
     }
 
     /**
@@ -698,7 +698,7 @@ public void setDataSource(String url, String user, String password) {
     @Deprecated
     public void setInitialVersion(SchemaVersion initialVersion) {
         LOG.warn("Flyway.setInitialVersion(SchemaVersion) has been deprecated. Use setInitVersion(MigrationVersion) instead. Will be removed in Flyway 3.0.");
-        this.initVersion = new MigrationVersion(initialVersion.toString());
+        this.initVersion = MigrationVersion.fromVersion(initialVersion.toString());
     }
 
     /**

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -621,7 +621,7 @@ public void setTarget(MigrationVersion target) {
      *               number will not be applied. (default: the latest version)
      */
     public void setTarget(String target) {
-        this.target = new MigrationVersion(target);
+        this.target = MigrationVersion.fromVersion(target);
     }
 
     /**
@@ -698,7 +698,7 @@ public void setDataSource(String url, String user, String password) {
     @Deprecated
     public void setInitialVersion(SchemaVersion initialVersion) {
         LOG.warn("Flyway.setInitialVersion(SchemaVersion) has been deprecated. Use setInitVersion(MigrationVersion) instead. Will be removed in Flyway 3.0.");
-        this.initVersion = new MigrationVersion(initialVersion.toString());
+        this.initVersion = MigrationVersion.fromVersion(initialVersion.toString());
     }
 
     /**

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/SqlScript.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.googlecode.flyway.core.dbsupport;
 
-import com.googlecode.flyway.core.api.FlywayException;
+import com.googlecode.flyway.core.api.FlywaySqlScriptException;
 import com.googlecode.flyway.core.util.StringUtils;
 import com.googlecode.flyway.core.util.logging.Log;
 import com.googlecode.flyway.core.util.logging.LogFactory;
@@ -33,6 +33,7 @@
  * comments are stripped and ignored.
  */
 public class SqlScript {
+
     private static final Log LOG = LogFactory.getLog(SqlScript.class);
 
     /**
@@ -88,8 +89,7 @@ public void execute(final JdbcTemplate jdbcTemplate) {
             try {
                 jdbcTemplate.executeStatement(sql);
             } catch (SQLException e) {
-                throw new FlywayException("Error executing statement at line " + sqlStatement.getLineNumber()
-                        + ": " + sql, e);
+                throw new FlywaySqlScriptException(sqlStatement.getLineNumber(), sql, e);
             }
         }
     }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/SqlScript.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.googlecode.flyway.core.dbsupport;
 
-import com.googlecode.flyway.core.api.FlywayException;
+import com.googlecode.flyway.core.api.FlywaySqlScriptException;
 import com.googlecode.flyway.core.util.StringUtils;
 import com.googlecode.flyway.core.util.logging.Log;
 import com.googlecode.flyway.core.util.logging.LogFactory;
@@ -33,6 +33,7 @@
  * comments are stripped and ignored.
  */
 public class SqlScript {
+
     private static final Log LOG = LogFactory.getLog(SqlScript.class);
 
     /**
@@ -88,8 +89,7 @@ public void execute(final JdbcTemplate jdbcTemplate) {
             try {
                 jdbcTemplate.executeStatement(sql);
             } catch (SQLException e) {
-                throw new FlywayException("Error executing statement at line " + sqlStatement.getLineNumber()
-                        + ": " + sql, e);
+                throw new FlywaySqlScriptException(sqlStatement.getLineNumber(), sql, e);
             }
         }
     }

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -873,7 +873,7 @@ public Integer execute(Connection connectionMetaDataTable, Connection connection
                 } finally {
                     if (schemaChange) {
                         // switch back to original schema only if one was defined in datasource url else keep schema[0]
-                        if(!originalSchemaUserObjects.getName().isEmpty()) {
+                        if(!originalSchemaUserObjects.getName().equals("")) {
                             dbSupportUserObjects.setCurrentSchema(originalSchemaUserObjects);
                         }
                     }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/sqlserver/SQLServerSchema.java
Patch:
@@ -113,7 +113,7 @@ private List<String> cleanForeignKeys() throws SQLException {
         List<Map<String, String>> constraintNames =
                 jdbcTemplate.queryForList(
                         "SELECT table_name, constraint_name FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS" +
-                                " WHERE constraint_type = 'FOREIGN KEY' and table_schema=?",
+                                " WHERE constraint_type in ('FOREIGN KEY','CHECK') and table_schema=?",
                         name);
 
         List<String> statements = new ArrayList<String>();

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/sqlserver/SQLServerSchema.java
Patch:
@@ -113,7 +113,7 @@ private List<String> cleanForeignKeys() throws SQLException {
         List<Map<String, String>> constraintNames =
                 jdbcTemplate.queryForList(
                         "SELECT table_name, constraint_name FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS" +
-                                " WHERE constraint_type = 'FOREIGN KEY' and table_schema=?",
+                                " WHERE constraint_type in ('FOREIGN KEY','CHECK') and table_schema=?",
                         name);
 
         List<String> statements = new ArrayList<String>();

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLSqlStatementBuilder.java
Patch:
@@ -60,7 +60,8 @@ public boolean isSingleLineComment(String line) {
 
     @Override
     protected String removeEscapedQuotes(String token) {
-        String noBackslashEscapes = StringUtils.replaceAll(StringUtils.replaceAll(token, "\\'", ""), "\\\"", "");
+        String noEscapedBackslashes = StringUtils.replaceAll(token, "\\\\","");
+        String noBackslashEscapes = StringUtils.replaceAll(StringUtils.replaceAll(noEscapedBackslashes, "\\'", ""), "\\\"", "");
         return StringUtils.replaceAll(noBackslashEscapes, "''", "");
     }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLSqlStatementBuilder.java
Patch:
@@ -60,7 +60,8 @@ public boolean isSingleLineComment(String line) {
 
     @Override
     protected String removeEscapedQuotes(String token) {
-        String noBackslashEscapes = StringUtils.replaceAll(StringUtils.replaceAll(token, "\\'", ""), "\\\"", "");
+        String noEscapedBackslashes = StringUtils.replaceAll(token, "\\\\","");
+        String noBackslashEscapes = StringUtils.replaceAll(StringUtils.replaceAll(noEscapedBackslashes, "\\'", ""), "\\\"", "");
         return StringUtils.replaceAll(noBackslashEscapes, "''", "");
     }
 

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractFlywayMojo.java
Patch:
@@ -82,7 +82,6 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      * <p>Also configurable with Maven or System Property: ${flyway.url}</p>
      *
      * @parameter property="flyway.url"
-     * @required
      */
     /* private -> for testing */ String url;
 

File: flyway-maven-plugin-largetest/src/test/java/com/googlecode/flyway/maven/largetest/MavenTestCase.java
Patch:
@@ -46,13 +46,13 @@ public abstract class MavenTestCase {
 
     @Test
     public void regular() throws Exception {
-        String stdOut = runMaven(0, "regular", "clean", "compile", "flyway:init", "flyway:status", "-Dflyway.initVersion=0.1");
+        String stdOut = runMaven(0, "regular", "clean", "compile", "flyway:init", "flyway:status", "-Dflyway.initVersion=0.1", "-Dflyway.user=SA");
         assertTrue(stdOut.contains("<< Flyway Init >>"));
     }
 
     @Test
     public void migrate() throws Exception {
-        String stdOut = runMaven(0, "regular", "clean", "compile", "flyway:migrate");
+        String stdOut = runMaven(0, "regular", "clean", "compile", "flyway:migrate", "-Dflyway.user=SA");
         assertTrue(stdOut.contains("Successfully applied 2 migrations"));
         assertFalse(stdOut.contains("deprecated"));
     }

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/InfoMojo.java
Patch:
@@ -25,9 +25,9 @@
  * @goal info
  */
 @SuppressWarnings({"UnusedDeclaration", "JavaDoc"})
-public class InfoMojo extends AbstractMigrationLoadingMojo {
+public class InfoMojo extends AbstractFlywayMojo {
     @Override
-    protected void doExecuteWithMigrationConfig(Flyway flyway) throws Exception {
+    protected void doExecute(Flyway flyway) throws Exception {
         log.info("\n" + MigrationInfoDumper.dumpToAsciiTable(flyway.info().all()));
     }
 }
\ No newline at end of file

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/ValidateMojo.java
Patch:
@@ -25,9 +25,9 @@
  * @since 0.9
  */
 @SuppressWarnings({"UnusedDeclaration", "JavaDoc"})
-public class ValidateMojo extends AbstractMigrationLoadingMojo {
+public class ValidateMojo extends AbstractFlywayMojo {
     @Override
-    protected void doExecuteWithMigrationConfig(Flyway flyway) throws Exception {
+    protected void doExecute(Flyway flyway) throws Exception {
         flyway.validate();
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLMigrationTestCase.java
Patch:
@@ -63,7 +63,7 @@ public void delimiter() throws Exception {
 
     @Test
     public void hashComment() throws Exception {
-        flyway.setLocations("migration/dbsupport/mysql/sql/hashComment");
+        flyway.setLocations("migration/dbsupport/mysql/sql/hashcomment");
         flyway.migrate();
     }
 

File: flyway-gradle-plugin-largetest/src/test/java/com/googlecode/flyway/gradle/largetest/GradleLargeTest.java
Patch:
@@ -65,7 +65,7 @@ private String runGradle(int expectedReturnCode, String dir, String... extraArgs
         }
 
         List<String> args = new ArrayList<String>();
-        addShellIfNeeded(args);
+        //addShellIfNeeded(args);
         args.add(root + "/gradlew" + extension);
         args.add("-PflywayVersion=" + flywayVersion);
         args.add("--info");

File: flyway-maven-plugin-largetest/src/test/java/com/googlecode/flyway/maven/largetest/Maven3LargeTest.java
Patch:
@@ -16,11 +16,11 @@
 package com.googlecode.flyway.maven.largetest;
 
 /**
- * Executes the tests against Maven 3.
+ * Executes the tests against Maven 3.0.
  */
 public class Maven3LargeTest extends MavenTestCase {
     @Override
     protected String getMavenVersion() {
-        return "3.0.5";
+        return "3.1.0";
     }
 }

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/IncludeProjectDependenciesComponentConfigurator.java
Patch:
@@ -47,7 +47,6 @@ public void configureComponent(Object component, PlexusConfiguration configurati
             throws ComponentConfigurationException {
 
         addProjectDependenciesToClassRealm(expressionEvaluator, containerRealm);
-        converterLookup.registerConverter(new ClassRealmConverter(containerRealm));
         ObjectWithFieldsConverter converter = new ObjectWithFieldsConverter();
         converter.processConfiguration(converterLookup, component, containerRealm.getClassLoader(), configuration,
                 expressionEvaluator, listener);

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/SqlStatementBuilder.java
Patch:
@@ -262,7 +262,7 @@ protected String computeAlternateCloseQuote(String openQuote) {
      */
     protected boolean endsWithOpenMultilineStringLiteral(String line) {
         //Ignore all special characters that naturally occur in SQL, but are not opening or closing string literals
-        String[] tokens = StringUtils.tokenizeToStringArray(line, " <>;:=|(),");
+        String[] tokens = StringUtils.tokenizeToStringArray(line, " @<>;:=|(),");
 
         List<TokenType> delimitingTokens = extractStringLiteralDelimitingTokens(tokens);
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/command/DbMigrate.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.googlecode.flyway.core.api.FlywayException;
 import com.googlecode.flyway.core.api.MigrationInfo;
-import com.googlecode.flyway.core.api.MigrationResult;
+import com.googlecode.flyway.core.resolver.MigrationResult;
 import com.googlecode.flyway.core.api.MigrationState;
 import com.googlecode.flyway.core.api.MigrationVersion;
 import com.googlecode.flyway.core.dbsupport.DbSupport;

File: flyway-core/src/main/java/com/googlecode/flyway/core/resolver/MigrationResult.java
Patch:
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.core.api;
+package com.googlecode.flyway.core.resolver;
+
+import com.googlecode.flyway.core.api.MigrationVersion;
 
 /**
  * A result of a migration.

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/MigrationTestCase.java
Patch:
@@ -253,9 +253,9 @@ public void failedMigration() throws Exception {
             flyway.migrate();
             fail();
         } catch (FlywayException e) {
-            // Expected
             // root cause of exception must be defined
             assertNotNull(e.getCause());
+            assertTrue(e.getCause() instanceof SQLException);
         }
 
         MigrationInfo migration = flyway.info().current();

File: flyway-core/src/main/java/com/googlecode/flyway/core/info/MigrationInfoImpl.java
Patch:
@@ -177,7 +177,7 @@ public String validate() {
                 }
                 if (!ObjectUtils.nullSafeEquals(resolvedMigration.getChecksum(), appliedMigration.getChecksum())) {
                     return String.format("Migration Checksum mismatch for migration %s: DB=%s, Classpath=%s",
-                            appliedMigration.getScript(), appliedMigration.getType(), resolvedMigration.getType());
+                            appliedMigration.getScript(), appliedMigration.getChecksum(), resolvedMigration.getChecksum());
                 }
             }
         }

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractFlywayMojo.java
Patch:
@@ -39,7 +39,7 @@
 /**
  * Common base class for all mojos with all common attributes.<br>
  *
- * @requiresDependencyResolution compile
+ * @requiresDependencyResolution test
  * @configurator include-project-dependencies
  */
 @SuppressWarnings({"JavaDoc", "FieldCanBeLocal", "UnusedDeclaration"})

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/postgresql/PostgreSQLSuperUserMigrationMediumTest.java
Patch:
@@ -54,8 +54,8 @@ public void setUp() throws Exception {
      * Tests clean and migrate for PostgreSQL Types.
      */
     @Test
-    public void type() throws Exception {
-        flyway.setLocations("migration/dbsupport/postgresql/sql/type");
+    public void basetype() throws Exception {
+        flyway.setLocations("migration/dbsupport/postgresql/sql/basetype");
         flyway.migrate();
 
         flyway.clean();

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/postgresql/PostgreSQLDbSupport.java
Patch:
@@ -19,6 +19,7 @@
 import com.googlecode.flyway.core.dbsupport.JdbcTemplate;
 import com.googlecode.flyway.core.dbsupport.Schema;
 import com.googlecode.flyway.core.dbsupport.SqlStatementBuilder;
+import com.googlecode.flyway.core.util.StringUtils;
 
 import java.sql.Connection;
 import java.sql.SQLException;
@@ -75,7 +76,7 @@ public SqlStatementBuilder createSqlStatementBuilder() {
 
     @Override
     public String doQuote(String identifier) {
-        return "\"" + identifier + "\"";
+        return "\"" + StringUtils.replaceAll(identifier, "\"", "\"\"") + "\"";
     }
 
     @Override

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/postgresql/PostgreSQLMigrationMediumTest.java
Patch:
@@ -98,7 +98,7 @@ public void view() throws Exception {
         flyway.setLocations("migration/dbsupport/postgresql/sql/view");
         flyway.migrate();
 
-        assertEquals(150, jdbcTemplate.queryForInt("SELECT value FROM v"));
+        assertEquals(150, jdbcTemplate.queryForInt("SELECT value FROM \"\"\"v\"\"\""));
 
         flyway.clean();
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/SqlScript.java
Patch:
@@ -48,7 +48,7 @@ public class SqlScript {
     /**
      * Creates a new sql script from this source with these placeholders to replace.
      *
-     * @param sqlScriptSource The sql script as a text block with all placeholders still present.
+     * @param sqlScriptSource The sql script as a text block with all placeholders already replaced.
      * @param dbSupport       The database-specific support.
      */
     public SqlScript(String sqlScriptSource, DbSupport dbSupport) {

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/SqlScript.java
Patch:
@@ -48,7 +48,7 @@ public class SqlScript {
     /**
      * Creates a new sql script from this source with these placeholders to replace.
      *
-     * @param sqlScriptSource The sql script as a text block with all placeholders still present.
+     * @param sqlScriptSource The sql script as a text block with all placeholders already replaced.
      * @param dbSupport       The database-specific support.
      */
     public SqlScript(String sqlScriptSource, DbSupport dbSupport) {

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLSqlScriptSmallTest.java
Patch:
@@ -27,7 +27,7 @@
 import static org.junit.Assert.assertTrue;
 
 /**
- * Test for OracleSqlScript.
+ * Test for MySQL SqlScript.
  */
 public class MySQLSqlScriptSmallTest {
     @Test

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLSqlStatementBuilder.java
Patch:
@@ -60,7 +60,7 @@ public boolean isSingleLineComment(String line) {
 
     @Override
     protected String removeEscapedQuotes(String token) {
-        return StringUtils.replaceAll(StringUtils.replaceAll(token, "''", ""), "\\'", "");
+        return StringUtils.replaceAll(StringUtils.replaceAll(token, "\\'", ""), "''", "");
     }
 
     @Override

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLSqlStatementBuilder.java
Patch:
@@ -19,6 +19,8 @@
 import com.googlecode.flyway.core.dbsupport.SqlStatementBuilder;
 import com.googlecode.flyway.core.util.StringUtils;
 
+import java.util.regex.Pattern;
+
 /**
  * SqlStatementBuilder supporting MySQL-specific delimiter changes.
  */
@@ -48,7 +50,7 @@ protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter)
 
     @Override
     public boolean isCommentDirective(String line) {
-        return line.startsWith("/*!") && line.endsWith("*/;");
+        return line.matches("^" + Pattern.quote("/*!") + "\\d{5} .*" + Pattern.quote("*/") + ";?");
     }
 
     @Override

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -48,10 +48,12 @@ protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter)
                 || statementStart.startsWith("CREATE PROCEDURE")
                 || statementStart.startsWith("CREATE PACKAGE")
                 || statementStart.startsWith("CREATE TYPE")
+                || statementStart.startsWith("CREATE TRIGGER")
                 || statementStart.startsWith("CREATE OR REPLACE FUNCTION")
                 || statementStart.startsWith("CREATE OR REPLACE PROCEDURE")
                 || statementStart.startsWith("CREATE OR REPLACE PACKAGE")
-                || statementStart.startsWith("CREATE OR REPLACE TYPE")) {
+                || statementStart.startsWith("CREATE OR REPLACE TYPE")
+                || statementStart.startsWith("CREATE OR REPLACE TRIGGER")){
             return PLSQL_DELIMITER;
         }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleSqlStatementBuilder.java
Patch:
@@ -48,10 +48,12 @@ protected Delimiter changeDelimiterIfNecessary(String line, Delimiter delimiter)
                 || statementStart.startsWith("CREATE PROCEDURE")
                 || statementStart.startsWith("CREATE PACKAGE")
                 || statementStart.startsWith("CREATE TYPE")
+                || statementStart.startsWith("CREATE TRIGGER")
                 || statementStart.startsWith("CREATE OR REPLACE FUNCTION")
                 || statementStart.startsWith("CREATE OR REPLACE PROCEDURE")
                 || statementStart.startsWith("CREATE OR REPLACE PACKAGE")
-                || statementStart.startsWith("CREATE OR REPLACE TYPE")) {
+                || statementStart.startsWith("CREATE OR REPLACE TYPE")
+                || statementStart.startsWith("CREATE OR REPLACE TRIGGER")){
             return PLSQL_DELIMITER;
         }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/SqlStatementBuilder.java
Patch:
@@ -262,7 +262,7 @@ protected String computeAlternateCloseQuote(String openQuote) {
      */
     protected boolean endsWithOpenMultilineStringLiteral(String line) {
         //Ignore all special characters that naturally occur in SQL, but are not opening or closing string literals
-        String[] tokens = StringUtils.tokenizeToStringArray(line, " <>;=|(),");
+        String[] tokens = StringUtils.tokenizeToStringArray(line, " <>;=|(),:");
 
         List<TokenType> delimitingTokens = extractStringLiteralDelimitingTokens(tokens);
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/postgresql/PostgreSQLTable.java
Patch:
@@ -55,6 +55,6 @@ protected boolean doExistsNoQuotes() throws SQLException {
 
     @Override
     protected void doLock() throws SQLException {
-        jdbcTemplate.execute("LOCK TABLE " + this);
+        jdbcTemplate.execute("SELECT * FROM " + this + " FOR UPDATE");
     }
 }

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/StringUtils.java
Patch:
@@ -192,11 +192,11 @@ public static String[] tokenizeToStringArray(String str, String delimiters) {
     }
 
     /**
-     * Counts the number of occurances of this token in this string.
+     * Counts the number of occurrences of this token in this string.
      *
      * @param str   The string to analyse.
      * @param token The token to look for.
-     * @return The number of occurances.
+     * @return The number of occurrences.
      */
     public static int countOccurrencesOf(String str, String token) {
         if (str == null || token == null || str.length() == 0 || token.length() == 0) {

File: flyway-sample/src/main/java/com/googlecode/flyway/sample/Main.java
Patch:
@@ -37,7 +37,7 @@ public static void main(String[] args) throws Exception {
                 new SimpleDriverDataSource(new org.hsqldb.jdbcDriver(), "jdbc:hsqldb:file:db/flyway_sample;shutdown=true", "SA", "");
         Flyway flyway = new Flyway();
         flyway.setDataSource(dataSource);
-        flyway.setLocations("com.googlecode.flyway.sample.migration");
+        flyway.setLocations("db.migration", "com.googlecode.flyway.sample.migration");
         flyway.migrate();
 
         SimpleJdbcTemplate jdbcTemplate = new SimpleJdbcTemplate(dataSource);

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -822,12 +822,12 @@ public Integer execute(Connection connectionMetaDataTable, Connection connection
                 MetaDataTable metaDataTable =
                         new MetaDataTableImpl(dbSupport, schemas[0].getTable(table), migrationResolver);
 
-                new DbSchemas(connectionMetaDataTable, schemas, metaDataTable).create();
-
                 if (validateOnMigrate) {
                     doValidate(connectionMetaDataTable, dbSupport, migrationResolver, metaDataTable, schemas);
                 }
 
+                new DbSchemas(connectionMetaDataTable, schemas, metaDataTable).create();
+
                 if (!metaDataTable.hasSchemasMarker() && !metaDataTable.hasInitMarker() && !metaDataTable.hasAppliedMigrations()) {
                     List<Schema> nonEmptySchemas = new ArrayList<Schema>();
                     for (Schema schema : schemas) {

File: flyway-sample/src/main/java/com/googlecode/flyway/sample/Main.java
Patch:
@@ -37,7 +37,7 @@ public static void main(String[] args) throws Exception {
                 new SimpleDriverDataSource(new org.hsqldb.jdbcDriver(), "jdbc:hsqldb:file:db/flyway_sample;shutdown=true", "SA", "");
         Flyway flyway = new Flyway();
         flyway.setDataSource(dataSource);
-        flyway.setLocations("com.googlecode.flyway.sample.migration");
+        flyway.setLocations("db.migration", "com.googlecode.flyway.sample.migration");
         flyway.migrate();
 
         SimpleJdbcTemplate jdbcTemplate = new SimpleJdbcTemplate(dataSource);

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/PropertiesUtils.java
Patch:
@@ -115,7 +115,7 @@ private static String unescape(String str) {
      */
     public static int getIntProperty(Properties properties, String key, int defaultValue) {
         final String value = properties.getProperty(key);
-        if (value != null) {
+        if (StringUtils.hasText(value)) {
             return Integer.parseInt(value);
         }
         return defaultValue;

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/StringUtils.java
Patch:
@@ -164,7 +164,7 @@ public static String arrayToCommaDelimitedString(Object[] strings) {
     }
 
     /**
-     * Checks whether this string contains at least one non-blank character.
+     * Checks whether this string isn't {@code null} and contains at least one non-blank character.
      *
      * @param s The string to check.
      * @return {@code true} if it has text, {@code false} if not.

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleSchema.java
Patch:
@@ -51,8 +51,7 @@ protected boolean doExists() throws SQLException {
 
     @Override
     protected boolean doEmpty() throws SQLException {
-        int objectCount = jdbcTemplate.queryForInt("SELECT count(*) FROM all_objects WHERE owner = ?", name);
-        return objectCount == 0;
+        return jdbcTemplate.queryForInt("SELECT count(*) FROM all_objects WHERE owner = ?", name) == 0;
     }
 
     @Override

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/oracle/OracleMigrationMediumTest.java
Patch:
@@ -245,7 +245,7 @@ public void nestedTable() throws FlywayException {
 
 
     /**
-     * Tests support for clean together with Nested Tables.
+     * Tests support for clean together with queue Tables.
      */
     @Test
     public void queueTable() throws FlywayException {

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/SchemaObject.java
Patch:
@@ -76,7 +76,7 @@ public final void drop() {
     protected abstract void doDrop() throws SQLException;
 
     @Override
-    public final String toString() {
+    public String toString() {
         return dbSupport.quote(schema.getName(), name);
     }
 }

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/Location.java
Patch:
@@ -142,6 +142,9 @@ public int hashCode() {
         return getDescriptor().hashCode();
     }
 
+    /**
+     * @return The location descriptor.
+     */
     @Override
     public String toString() {
         return getDescriptor();

File: flyway-core/src/main/java/com/googlecode/flyway/core/command/DbMigrate.java
Patch:
@@ -156,9 +156,8 @@ public Pair<Boolean, MigrationVersion> doInTransaction() {
                             }
 
                             MigrationInfo[] future = infoService.future();
-                            MigrationInfo[] resolved = infoService.resolved();
-                            boolean isFutureMigration = future.length < 0;
-                            if (isFutureMigration) {
+                            if (future.length > 0) {
+                                MigrationInfo[] resolved = infoService.resolved();
                                 LOG.warn("Schema " + schema + " has a version (" + currentSchemaVersion + ") that is newer than the latest available migration ("
                                         + resolved[resolved.length - 1].getVersion() + ") !");
                             }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/SqlStatementBuilder.java
Patch:
@@ -262,7 +262,7 @@ protected String computeAlternateCloseQuote(String openQuote) {
      */
     protected boolean endsWithOpenMultilineStringLiteral(String line) {
         //Ignore all special characters that naturally occur in SQL, but are not opening or closing string literals
-        String[] tokens = StringUtils.tokenizeToStringArray(line, " ;=|(),");
+        String[] tokens = StringUtils.tokenizeToStringArray(line, " <>;=|(),");
 
         List<TokenType> delimitingTokens = extractStringLiteralDelimitingTokens(tokens);
 

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractFlywayMojo.java
Patch:
@@ -68,6 +68,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      * <p>Also configurable with Maven or System Property: ${flyway.url}</p>
      *
      * @parameter expression="${flyway.url}"
+     * @required
      */
     /* private -> for testing */ String url;
 

File: flyway-commandline/src/main/java/com/googlecode/flyway/commandline/Main.java
Patch:
@@ -81,7 +81,7 @@ public static void main(String[] args) {
             Flyway flyway = new Flyway();
             flyway.configure(properties);
 
-            int consoleWidth = Integer.parseInt(properties.getProperty("flyway.consoleWidth"));
+            int consoleWidth = PropertiesUtils.getIntProperty(properties, "flyway.consoleWidth", 80, true);
 
             executeOperation(flyway, operation, consoleWidth);
         } catch (Exception e) {

File: flyway-ant/src/main/java/com/googlecode/flyway/ant/AbstractMigrationLoadingTask.java
Patch:
@@ -228,8 +228,6 @@ public void addConfiguredPlaceholders(PlaceholdersElement placeholders) {
     @Override
     protected final void doExecute(Flyway flyway) throws Exception {
         String locationsProperty = getProject().getProperty("flyway.locations");
-        log.info("locationsProperty: " + locationsProperty);
-        log.info("locations: " + StringUtils.arrayToCommaDelimitedString(locations));
         if (locationsProperty != null) {
             flyway.setLocations(StringUtils.tokenizeToStringArray(locationsProperty, ","));
         } else if (locations != null) {

File: flyway-core/src/main/java/com/googlecode/flyway/core/metadatatable/MetaDataTableImpl.java
Patch:
@@ -94,6 +94,7 @@ private void createIfNotExists() {
             if (!upgraded) {
                 new MetaDataTableTo20FormatUpgrader(dbSupport, table, migrationResolver).upgrade();
                 new MetaDataTableTo202FormatUpgrader(dbSupport, table).upgrade();
+                new MetaDataTableTo21FormatUpgrader(dbSupport, table).upgrade();
                 upgraded = true;
             }
             return;

File: flyway-core/src/main/java/com/googlecode/flyway/core/metadatatable/MetaDataTableTo202FormatUpgrader.java
Patch:
@@ -104,6 +104,6 @@ private void executeScript() {
      * @return {@code true} if the table need to be upgraded, {@code false} if not.
      */
     private boolean needsUpgrade() throws SQLException {
-        return table.exists() && table.hasPrimaryKey();
+        return table.exists() && table.hasPrimaryKey() && (table.getColumnSize("installed_by") == 30);
     }
 }

File: flyway-commandline-largetest/src/test/java/com/googlecode/flyway/commandline/largetest/CommandLineLargeTest.java
Patch:
@@ -110,8 +110,8 @@ protected String runFlywayCommandLine(int expectedReturnCode, String configFileN
      * @return returns cmd for windows systems, sh for other systems
      */
     private String flywayCmdLineExtensionForCurrentSystem() {
-        String osname = System.getProperty("os.name", "generic").toLowerCase();
-        if (osname.startsWith("windows")) {
+        String osName = System.getProperty("os.name", "generic").toLowerCase();
+        if (osName.startsWith("windows")) {
             return "cmd";
         }
         return "sh";

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLTable.java
Patch:
@@ -55,6 +55,6 @@ protected boolean doExistsNoQuotes() throws SQLException {
 
     @Override
     protected void doLock() throws SQLException {
-        jdbcTemplate.execute("select * from " + this + " for update");
+        jdbcTemplate.execute("LOCK TABLES " + this + " WRITE");
     }
 }

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/scanner/classpath/ClassPathScanner.java
Patch:
@@ -143,11 +143,10 @@ private Set<String> findResourceNames(String path, String prefix, String suffix)
             UrlResolver urlResolver = createUrlResolver(locationUrl.getProtocol());
             URL resolvedUrl = urlResolver.toStandardJavaUrl(locationUrl);
 
-            String scanRoot = UrlUtils.toFilePath(resolvedUrl);
-
             String protocol = resolvedUrl.getProtocol();
             ClassPathLocationScanner classPathLocationScanner = createLocationScanner(protocol);
             if (classPathLocationScanner == null) {
+                String scanRoot = UrlUtils.toFilePath(resolvedUrl);
                 LOG.warn("Unable to scan location: " + scanRoot + " (unsupported protocol: " + protocol + ")");
             } else {
                 resourceNames.addAll(classPathLocationScanner.findResourceNames(path, resolvedUrl));

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/h2/H2Schema.java
Patch:
@@ -46,7 +46,7 @@ public H2Schema(JdbcTemplate jdbcTemplate, DbSupport dbSupport, String name) {
 
     @Override
     protected boolean doExists() throws SQLException {
-        return jdbcTemplate.queryForInt("SELECT COUNT(*) FROM information_schema.schemata WHERE schema_name=?", name) > 0;
+        return jdbcTemplate.queryForInt("SELECT COUNT(*) FROM INFORMATION_SCHEMA.schemata WHERE schema_name=?", name) > 0;
     }
 
     @Override
@@ -151,7 +151,7 @@ protected Table[] doAllTables() throws SQLException {
      * @throws java.sql.SQLException when the object names could not be listed.
      */
     private List<String> listObjectNames(String objectType, String querySuffix) throws SQLException {
-        String query = "SELECT " + objectType + "_NAME FROM information_schema." + objectType + "s WHERE " + objectType + "_schema = ?";
+        String query = "SELECT " + objectType + "_NAME FROM INFORMATION_SCHEMA." + objectType + "s WHERE " + objectType + "_schema = ?";
         if (StringUtils.hasLength(querySuffix)) {
             query += " AND " + querySuffix;
         }

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/Locations.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 
 /**
- * Encaupsulation of a location list.
+ * Encapsulation of a location list.
  */
 public class Locations {
     private static final Log LOG = LogFactory.getLog(Locations.class);

File: flyway-commandline/src/test/java/com/googlecode/flyway/commandline/MainMediumTest.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.googlecode.flyway.commandline;
 
+import com.googlecode.flyway.core.api.migration.spring.SpringJdbcMigration;
+import com.googlecode.flyway.core.migration.java.JavaMigration;
 import com.googlecode.flyway.core.util.ClassPathResource;
 import com.googlecode.flyway.core.util.Location;
 import com.googlecode.flyway.core.util.scanner.ClassPathScanner;
@@ -116,7 +118,7 @@ public void addJarToClasspath() throws Exception {
         ClassPathResource[] resources = new ClassPathScanner().scanForResources(new Location("db/migration"), "V", ".sql");
         assertEquals("db/migration/V1.sql", resources[0].getLocation());
 
-        Class<?>[] classes = new ClassPathScanner().scanForClasses(new Location("com/googlecode/flyway/sample/migration"));
+        Class<?>[] classes = new ClassPathScanner().scanForClasses(new Location("com/googlecode/flyway/sample/migration"), JavaMigration.class);
         assertEquals("com.googlecode.flyway.sample.migration.V1_2__Another_user", classes[0].getName());
     }
 }

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/scanner/ClassPathScanner.java
Patch:
@@ -28,6 +28,7 @@
 import com.googlecode.flyway.core.util.scanner.osgi.EquinoxCommonResourceUrlResolver;
 
 import java.io.IOException;
+import java.lang.reflect.Modifier;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Enumeration;
@@ -90,8 +91,8 @@ public Class<?>[] scanForClasses(Location location, Class<?>... implementedInter
             String className = toClassName(resourceName);
             Class<?> clazz = getClassLoader().loadClass(className);
 
-            if (!ClassUtils.canInstantiate(clazz)) {
-                LOG.debug("Skipping uninstantiable class: " + className);
+            if (Modifier.isAbstract(clazz.getModifiers())) {
+                LOG.debug("Skipping abstract class: " + className);
                 continue;
             }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/db2/DB2Schema.java
Patch:
@@ -52,7 +52,7 @@ public boolean empty() throws SQLException {
     }
 
     public void create() throws SQLException {
-        jdbcTemplate.execute("CREATE SCHEMA " + name + " AUTHORIZATION DB2ADMIN");
+        jdbcTemplate.execute("CREATE SCHEMA " + dbSupport.quote(name));
     }
 
     public void drop() throws SQLException {

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/hsql/HsqlDbSupport.java
Patch:
@@ -124,7 +124,7 @@ public void lockTable(String schema, String table) throws SQLException {
         if (version18) {
             //Do nothing -> Locking is not supported by HsqlDb 1.8
         } else {
-            jdbcTemplate.execute("select * from " + quote(schema) + "." + quote(table) + " for update");
+            jdbcTemplate.execute("select * from " + quote(schema, table) + " for update");
         }
     }
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/FlywayMediumTest.java
Patch:
@@ -143,7 +143,7 @@ public void infoInit() throws Exception {
         flyway.init();
 
         assertEquals(1, flyway.info().all().length);
-        assertEquals("0", flyway.info().current().getVersion().toString());
+        assertEquals("1", flyway.info().current().getVersion().toString());
         assertEquals(MigrationState.SUCCESS, flyway.info().current().getState());
     }
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/ConcurrentMigrationTestCase.java
Patch:
@@ -69,6 +69,7 @@ public void setUp() throws Exception {
         flyway = new Flyway();
         flyway.setDataSource(concurrentMigrationDataSource);
         flyway.setLocations(BASE_DIR);
+        flyway.setInitVersion("0");
         flyway.clean();
         flyway.init();
     }

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/MigrationTestCase.java
Patch:
@@ -407,6 +407,7 @@ public void nonEmptySchemaWithInit() throws Exception {
                 "  PRIMARY KEY(name))");
 
         flyway.setLocations(BASEDIR);
+        flyway.setInitVersion("0");
         flyway.init();
         flyway.migrate();
     }
@@ -429,6 +430,7 @@ public void nonEmptySchemaWithInitOnMigrate() throws Exception {
                 "  PRIMARY KEY(name))");
 
         flyway.setLocations(BASEDIR);
+        flyway.setInitVersion("0");
         flyway.setInitOnMigrate(true);
         flyway.migrate();
         MigrationInfo[] migrationInfos = flyway.info().all();

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -765,7 +765,7 @@ public Integer execute(Connection connectionMetaDataTable, Connection connection
 
                 DbMigrator dbMigrator =
                         new DbMigrator(connectionMetaDataTable, connectionUserObjects, dbSupport, metaDataTable,
-                                migrationResolver, target, ignoreFailedFutureMigration, outOfOrder);
+                                schemas[0], migrationResolver, target, ignoreFailedFutureMigration, outOfOrder);
                 return dbMigrator.migrate();
             }
         });

File: flyway-core/src/main/java/com/googlecode/flyway/core/resolver/CompositeMigrationResolver.java
Patch:
@@ -191,7 +191,7 @@ private List<ResolvedMigration> doFindAvailableMigrations() throws FlywayExcepti
             while (first || iterator.hasNext()) {
                 first = false;
 
-                if (location2.startsWith(location1)) {
+                if ((location2 + "/").startsWith((location1 + "/"))) {
                     iterator.remove();
                 } else {
                     location1 = location2;

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/MigrateMojo.java
Patch:
@@ -154,7 +154,6 @@ protected void doExecuteWithMigrationConfig(Flyway flyway) throws Exception {
 
         if (flyway.info().all().length == 0) {
             log.warn("Possible solution: run mvn compile first so Flyway can find the migrations");
-            return;
         }
 
         flyway.migrate();

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractMigrationLoadingMojo.java
Patch:
@@ -128,7 +128,7 @@ abstract class AbstractMigrationLoadingMojo extends AbstractFlywayMojo {
 
     @Override
     protected final void doExecute(Flyway flyway) throws Exception {
-        String locationsProperty = mavenProject.getProperties().getProperty("flyway.locations");
+        String locationsProperty = getProperty("flyway.locations");
         if (locationsProperty != null) {
             flyway.setLocations(StringUtils.tokenizeToStringArray(locationsProperty, ","));
         } else if (locations != null) {

File: flyway-maven-plugin/src/test/java/com/googlecode/flyway/maven/AbstractFlywayMojoSmallTest.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Test for AbstractFlywayMojo.
  */
-public class AbstractFlywayMojoTest {
+public class AbstractFlywayMojoSmallTest {
     @Test
     public void execute() throws Exception {
         AbstractFlywayMojo mojo = new AbstractFlywayMojo() {

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractFlywayMojo.java
Patch:
@@ -157,7 +157,7 @@ public final void execute() throws MojoExecutionException, MojoFailureException
 
             String schemasProperty = mavenProject.getProperties().getProperty("flyway.schemas");
             if (schemasProperty != null) {
-                flyway.setLocations(StringUtils.tokenizeToStringArray(schemasProperty, ","));
+                flyway.setSchemas(StringUtils.tokenizeToStringArray(schemasProperty, ","));
             } else if (schemas != null) {
                 flyway.setSchemas(schemas);
             }

File: flyway-core/src/main/java/com/googlecode/flyway/core/metadatatable/MetaDataTableTo20FormatUpgrader.java
Patch:
@@ -92,11 +92,11 @@ public MetaDataTableTo20FormatUpgrader(DbSupport dbSupport, String schema, Strin
     public void upgrade() throws FlywayException {
         try {
             if (!needsUpgrade()) {
-                LOG.debug("No metadata table upgrade necessary");
+                LOG.debug("No metadata table upgrade to the Flyway 2.0 format necessary");
                 return;
             }
 
-            LOG.info("Upgrading the metadata table (" + schema + "." + table + ") to the new Flyway 2.0 format...");
+            LOG.info("Upgrading the metadata table (" + schema + "." + table + ") to the Flyway 2.0 format...");
 
             LOG.info("Checking prerequisites...");
             checkPrerequisites();
@@ -114,7 +114,7 @@ public void upgrade() throws FlywayException {
             fixChecksums();
         } catch (SQLException e) {
             throw new FlywayException("Unable to upgrade the metadata table " + dbSupport.quote(schema, table)
-                    + " to the new Flyway 2.0 format", e);
+                    + " to the Flyway 2.0 format", e);
         }
     }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLSqlStatementBuilder.java
Patch:
@@ -120,7 +120,8 @@ private List<Token> extractStringLiteralDelimitingTokens(String[] tokens) {
         List<Token> delimitingTokens = new ArrayList<Token>();
         for (String token : tokens) {
             //Remove escaped quotes as they do not form a string literal delimiter
-            String cleanToken = StringUtils.replace(token, "''", "");
+            String noQuoteQuote = StringUtils.replace(token, "''", "");
+            String cleanToken = StringUtils.replace(noQuoteQuote, "\\'", "");
 
             List<TokenType> tokenTypes = new ArrayList<TokenType>();
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/UrlUtils.java
Patch:
@@ -37,7 +37,7 @@ private UrlUtils() {
      * @return The file path.
      */
     public static String toFilePath(URL url) {
-        String filePath = null;
+        String filePath;
 
         try {
             filePath = URLDecoder.decode(url.getPath(), "UTF-8");

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/oracle/OracleMigrationMediumTest.java
Patch:
@@ -249,6 +249,7 @@ public void nestedTable() throws FlywayException {
     /**
      * Tests support for clean together with XML Type.
      */
+    @Ignore("Disabled due to missing functionality in Oracle XE 10g. Works fine with XE 11g.")
     @Test
     public void xml() throws FlywayException {
         flyway.setLocations("migration/dbsupport/oracle/sql/xml");

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/postgresql/PostgreSQLDbSupport.java
Patch:
@@ -54,7 +54,8 @@ public String getCurrentSchema() throws SQLException {
 
     @Override
     public void setCurrentSchema(String schema) throws SQLException {
-        jdbcTemplate.execute("SET search_path = " + quote(schema));
+        String searchPath = jdbcTemplate.queryForString("SHOW search_path");
+        jdbcTemplate.execute("SET search_path = " + quote(schema) + "," + searchPath);
     }
 
     public boolean isSchemaEmpty(String schema) throws SQLException {

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -86,7 +86,7 @@ public boolean supportsDdlTransactions() {
     }
 
     public void lockTable(String schema, String table) throws SQLException {
-        jdbcTemplate.update("select * from " + quote(schema) + "." + quote(table) + " for update");
+        jdbcTemplate.execute("select * from " + quote(schema, table) + " for update");
     }
 
     public String getBooleanTrue() {

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * SchemaVersion class, the rest is Private API. No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.migration;
\ No newline at end of file

File: flyway-commandline/src/main/java/com/googlecode/flyway/commandline/Main.java
Patch:
@@ -166,7 +166,6 @@ private static void outputFirstStackTraceElement(Throwable t) {
      * @param properties The properties object to initialize.
      */
     private static void initializeDefaults(Properties properties) {
-        properties.put("flyway.password", "");
         properties.put("flyway.locations", "/,db/migration");
     }
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/FlywayMediumTest.java
Patch:
@@ -74,7 +74,7 @@ public void multipleSetDataSourceCalls() throws Exception {
     @Test
     public void info() throws Exception {
         DriverDataSource dataSource =
-                new DriverDataSource(new Driver(), "jdbc:h2:mem:flyway_db_info;DB_CLOSE_DELAY=-1", "sa", "");
+                new DriverDataSource(new Driver(), "jdbc:h2:mem:flyway_db_info;DB_CLOSE_DELAY=-1", "sa", null);
 
         Flyway flyway = new Flyway();
         flyway.setDataSource(dataSource);

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/MigrationState.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * The state of a migration.
- * @deprecated Superseeded by equivalent in the API package. Will be removed in Flyway 2.0.
+ * @deprecated Superseeded by equivalent in the API package. Will be removed in Flyway 3.0.
  */
 @Deprecated
 public enum MigrationState {

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/SchemaVersion.java
Patch:
@@ -21,7 +21,7 @@
  * A version of a database schema.
  *
  * @author Axel Fontaine
- * @deprecated Superseeded by MigrationVersion. Will be removed in Flyway 2.0.
+ * @deprecated Superseeded by MigrationVersion. Will be removed in Flyway 3.0.
  */
 @Deprecated
 public final class SchemaVersion implements Comparable<SchemaVersion> {

File: flyway-core/src/main/java/com/googlecode/flyway/core/resolver/CompositeMigrationResolver.java
Patch:
@@ -168,7 +168,7 @@ private List<ResolvedMigration> doFindAvailableMigrations() throws FlywayExcepti
      * @return The merged locations set.
      */
     /* private -> for testing */ Set<String> mergeLocations() {
-        //TODO: In Flyway 2.0, add warnings for duplicates and overlaps
+        //TODO: In Flyway 3.0, add warnings for duplicates and overlaps
 
         //Use set to remove duplicates
         Set<String> mergedLocations = new TreeSet<String>();

File: flyway-core/src/main/java/com/googlecode/flyway/core/validation/ValidationErrorMode.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * Mode for handling validation errors.
  *
- * @deprecated Use Flyway.cleanOnValidationError instead. Will be removed in Flyway 2.0.
+ * @deprecated Use Flyway.cleanOnValidationError instead. Will be removed in Flyway 3.0.
  */
 @Deprecated
 public enum ValidationErrorMode {

File: flyway-core/src/main/java/com/googlecode/flyway/core/validation/ValidationMode.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * Mode for the validation.
  *
- * @deprecated Use Flyway.validateOnMigrate instead. Will be removed in Flyway 2.0.
+ * @deprecated Use Flyway.validateOnMigrate instead. Will be removed in Flyway 3.0.
  */
 @Deprecated
 public enum ValidationMode {

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/MigrateMojo.java
Patch:
@@ -80,7 +80,7 @@ public class MigrateMojo extends AbstractMigrationLoadingMojo {
      * ${flyway.disableInitCheck}</p>
      *
      * @parameter expression="${flyway.disableInitCheck}"
-     * @deprecated Use initOnMigrate instead. Will be removed in Flyway 2.0.
+     * @deprecated Use initOnMigrate instead. Will be removed in Flyway 3.0.
      */
     @Deprecated
     private boolean disableInitCheck;

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/StatusMojo.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @goal status
  * @since 0.8
- * @deprecated Use flyway:info instead. Will be removed in Flyway 2.0.
+ * @deprecated Use flyway:info instead. Will be removed in Flyway 3.0.
  */
 @Deprecated
 public class StatusMojo extends AbstractFlywayMojo {

File: flyway-core/src/main/java/com/googlecode/flyway/core/api/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Migration info and related classes.
+ * FlywayException, MigrationInfo and related classes.
  */
 package com.googlecode.flyway.core.api;
\ No newline at end of file

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/derby/DerbyConcurrentMigrationMediumTest.java
Patch:
@@ -32,6 +32,6 @@ public class DerbyConcurrentMigrationMediumTest extends ConcurrentMigrationTestC
 
     @Override
     protected DataSource createDataSource(Properties customProperties) {
-        return new DriverDataSource(new EmbeddedDriver(), "jdbc:derby:memory:flyway_db;create=true", "flyway", "");
+        return new DriverDataSource(new EmbeddedDriver(), "jdbc:derby:memory:flyway_db;create=true", "", "");
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/com/googlecode/flyway/core/FlywayMediumTest.java
Patch:
@@ -132,7 +132,7 @@ public void repairFirst() throws Exception {
     }
 
     @Test
-    @Ignore("Not implemented yet")
+    @Ignore
     public void outOfOrder() {
         DriverDataSource dataSource =
                 new DriverDataSource(new Driver(), "jdbc:h2:mem:flyway_out_of_order;DB_CLOSE_DELAY=-1", "sa", "");

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -16,6 +16,7 @@
 package com.googlecode.flyway.core;
 
 import com.googlecode.flyway.core.api.MigrationInfo;
+import com.googlecode.flyway.core.migration.MigrationInfoImpl;
 import com.googlecode.flyway.core.api.MigrationInfos;
 import com.googlecode.flyway.core.api.MigrationVersion;
 import com.googlecode.flyway.core.clean.DbCleaner;

File: flyway-core/src/main/java/com/googlecode/flyway/core/init/DbInit.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.googlecode.flyway.core.init;
 
-import com.googlecode.flyway.core.api.MigrationInfo;
+import com.googlecode.flyway.core.migration.MigrationInfoImpl;
 import com.googlecode.flyway.core.api.MigrationState;
 import com.googlecode.flyway.core.api.MigrationType;
 import com.googlecode.flyway.core.api.MigrationVersion;
@@ -75,8 +75,8 @@ public void init(MigrationVersion initialVersion, String initialDescription) {
 
         metaDataTable.createIfNotExists();
 
-        final MigrationInfo migrationInfo =
-                new MigrationInfo(initialVersion, initialDescription, initialDescription, null, MigrationType.INIT);
+        final MigrationInfoImpl migrationInfo =
+                new MigrationInfoImpl(initialVersion, initialDescription, initialDescription, null, MigrationType.INIT);
         migrationInfo.addExecutionDetails(new Date(), 0, MigrationState.SUCCESS);
 
         transactionTemplate.execute(new TransactionCallback<Void>() {

File: flyway-core/src/main/java/com/googlecode/flyway/core/metadatatable/MetaDataTable.java
Patch:
@@ -16,6 +16,7 @@
 package com.googlecode.flyway.core.metadatatable;
 
 import com.googlecode.flyway.core.api.MigrationInfo;
+import com.googlecode.flyway.core.migration.MigrationInfoImpl;
 import com.googlecode.flyway.core.api.MigrationState;
 import com.googlecode.flyway.core.api.MigrationType;
 import com.googlecode.flyway.core.api.MigrationVersion;
@@ -375,7 +376,7 @@ public MigrationInfo mapRow(final ResultSet rs) throws SQLException {
             String script = rs.getString("SCRIPT");
             Integer checksum = toInteger((Number) rs.getObject("CHECKSUM"));
 
-            MigrationInfo migrationInfo = new MigrationInfo(version, description, script, checksum, migrationType);
+            MigrationInfoImpl migrationInfo = new MigrationInfoImpl(version, description, script, checksum, migrationType);
 
             Date installedOn = rs.getTimestamp("INSTALLED_ON");
             Integer executionTime = toInteger((Number) rs.getObject("EXECUTION_TIME"));

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/DbMigrator.java
Patch:
@@ -120,8 +120,8 @@ public MigrationInfo doInTransaction() {
                                     LOG.info("Current schema version: " + currentSchemaVersion);
                                 }
 
-                                ExecutableMigration lastestAvailableMigration = migrations.get(migrations.size() - 1);
-                                MigrationVersion latestAvailableMigrationVersion = lastestAvailableMigration.getInfo().getVersion();
+                                ExecutableMigration latestAvailableMigration = migrations.get(migrations.size() - 1);
+                                MigrationVersion latestAvailableMigrationVersion = latestAvailableMigration.getInfo().getVersion();
                                 boolean isFutureMigration = latestAvailableMigrationVersion.compareTo(currentSchemaVersion) < 0;
                                 if (isFutureMigration) {
                                     LOG.warn("Database version (" + currentSchemaVersion + ") is newer than the latest available migration ("
@@ -238,7 +238,7 @@ public Void doInTransaction() {
         LOG.debug(String.format("Finished migrating to version %s (execution time %s)",
                 version, TimeFormat.format(executionTime)));
 
-        MigrationInfo migrationInfo = migration.getInfo();
+        MigrationInfoImpl migrationInfo = migration.getInfo();
         migrationInfo.addExecutionDetails(new Date(), executionTime, state);
         metaDataTable.insert(migrationInfo);
         LOG.debug("MetaData table successfully updated to reflect changes");

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/CompositeMigrationResolverSmallTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.googlecode.flyway.core.migration;
 
-import com.googlecode.flyway.core.api.MigrationInfo;
 import com.googlecode.flyway.core.api.MigrationVersion;
 import com.googlecode.flyway.core.exception.FlywayException;
 import org.junit.Test;
@@ -114,7 +113,7 @@ public void checkForIncompatibilities() {
     public void checkForIncompatibilitiesMessage() {
         List<ExecutableMigration> migrations = new ArrayList<ExecutableMigration>();
         migrations.add(new ExecutableMigration(
-                new MigrationInfo(new MigrationVersion("1"), "First", "V1__First.sql", 123, com.googlecode.flyway.core.api.MigrationType.SQL),
+                new MigrationInfoImpl(new MigrationVersion("1"), "First", "V1__First.sql", 123, com.googlecode.flyway.core.api.MigrationType.SQL),
                 "target/test-classes/migration/validate/V1__First.sql", null));
         migrations.add(createTestMigration(com.googlecode.flyway.core.api.MigrationType.JAVA, "1", "Description", "Migration1", 123));
 
@@ -150,6 +149,6 @@ public void checkForIncompatibilitiesNoConflict() {
      */
     private ExecutableMigration createTestMigration(final com.googlecode.flyway.core.api.MigrationType aMigrationType, final String aVersion, final String aDescription, final String aScript, final Integer aChecksum) {
         return new ExecutableMigration(
-                new MigrationInfo(new MigrationVersion(aVersion), aDescription, aScript, aChecksum, aMigrationType), aScript, null);
+                new MigrationInfoImpl(new MigrationVersion(aVersion), aDescription, aScript, aChecksum, aMigrationType), aScript, null);
     }
 }

File: flyway-sample-webapp/src/main/java/com/googlecode/flyway/sample/webapp/EnvInfoServlet.java
Patch:
@@ -23,7 +23,6 @@
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.sql.DataSource;
 import java.io.IOException;
 import java.io.PrintWriter;
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/clean/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.clean;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/db2/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.db2;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/derby/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.derby;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/h2/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.h2;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/hsql/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.hsql;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/mysql/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.mysql;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.oracle;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/postgresql/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.postgresql;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/sqlserver/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.sqlserver;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/init/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.init;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/metadatatable/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.metadatatable;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/java/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.migration.java;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/jdbc/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.migration.jdbc;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * SchemaVersion class, the rest is Private API: No compatibility guarantees provided.
+ * SchemaVersion class, the rest is Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.migration;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/spring/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.migration.spring;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.migration.sql;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/jdbc/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.util.jdbc;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/logging/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.util.logging;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.util;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/scanner/jboss/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.util.scanner.jboss;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/scanner/osgi/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.util.scanner.osgi;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/scanner/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.util.scanner;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/validation/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API: No compatibility guarantees provided.
+ * Private API. No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.validation;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -134,7 +134,9 @@ private List<String> generateDropStatementsForObjectType(String objectType, fina
                 // Ignore Materialized View Logs
                 + " AND object_name NOT LIKE 'MLOG$%' AND object_name NOT LIKE 'RUPD$%'"
                 // Ignore Oracle Text Index Tables
-                + " AND object_name NOT LIKE 'DR$%'";
+                + " AND object_name NOT LIKE 'DR$%'"
+                // Ignore Index Organized Tables
+                + " AND object_name NOT LIKE 'SYS_IOT_OVER_%'";
 
         List<String> objectNames = jdbcTemplate.queryForStringList(query, objectType, schema.toUpperCase());
         List<String> dropStatements = new ArrayList<String>();

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/SqlScript.java
Patch:
@@ -152,7 +152,7 @@ List<SqlStatement> linesToStatements(List<String> lines) {
                         continue;
                     }
 
-                    if (trimmedLine.startsWith("--")) {
+                    if (sqlStatementBuilder.isSingleLineComment(trimmedLine)) {
                         // Skip single-line comment
                         continue;
                     }

File: flyway-commandline/src/test/java/com/googlecode/flyway/commandline/MainMediumTest.java
Patch:
@@ -41,6 +41,7 @@ public class MainMediumTest {
     @Before
     public void setUp() {
         oldClassLoader = Thread.currentThread().getContextClassLoader();
+        Main.initLogging(false);
     }
 
     @After

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/SqlScript.java
Patch:
@@ -162,7 +162,7 @@ List<SqlStatement> linesToStatements(List<String> lines) {
                         if (trimmedLine.endsWith("*/")) {
                             inMultilineComment = false;
                         }
-                        // Skuip line part of a multi-line comment
+                        // Skip line part of a multi-line comment
                         continue;
                     }
                 }

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/postgresql/PostgreSQLSqlScriptSmallTest.java
Patch:
@@ -26,9 +26,8 @@
 public class PostgreSQLSqlScriptSmallTest {
     @Test
     public void endsWithOpenMultilineStringLiteral() {
-        final PostgreSQLSqlStatementBuilder statementBuilder = new PostgreSQLSqlStatementBuilder();
-        assertTrue(statementBuilder.endsWithOpenMultilineStringLiteral("INSERT INTO address VALUES (1, '1. first"));
-        assertFalse(statementBuilder.endsWithOpenMultilineStringLiteral("INSERT INTO address VALUES (1, '1. first\n" +
+        assertTrue(new PostgreSQLSqlStatementBuilder().endsWithOpenMultilineStringLiteral("INSERT INTO address VALUES (1, '1. first"));
+        assertFalse(new PostgreSQLSqlStatementBuilder().endsWithOpenMultilineStringLiteral("INSERT INTO address VALUES (1, '1. first\n" +
                 "2. second');"));
     }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/info/DbInfoAggregator.java
Patch:
@@ -73,7 +73,7 @@ public MigrationInfos aggregateMigrationInfo() {
 
         List<MigrationInfo> allMigrations = new ArrayList<MigrationInfo>();
         if (appliedMigrationsIterator.hasNext()
-                && !MigrationType.INIT.equals(appliedMigrationsList.get(0).getType())) {
+                && MigrationType.INIT.equals(appliedMigrationsList.get(0).getType())) {
             MigrationVersion initVersion = appliedMigrationsList.get(0).getVersion();
 
             while (availableMigrationsIterator.hasNext()) {

File: flyway-ant/src/main/java/com/googlecode/flyway/ant/InitTask.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Ant task that initializes the metadata table in an existing schema.
  */
-@SuppressWarnings({"UnusedDeclaration", "JavaDoc"})
+@SuppressWarnings({"UnusedDeclaration"})
 public class InitTask extends AbstractFlywayTask {
     /**
      * The initial version to put in the database. (default: 0)<br/>Also configurable with Ant Property: ${flyway.initialVersion}

File: flyway-commandline/src/main/java/com/googlecode/flyway/commandline/Main.java
Patch:
@@ -94,6 +94,8 @@ public static void main(String[] args) {
                 MetaDataTableRowDumper.dumpMigrations(flyway.history());
             } else if ("info".equals(operation)) {
                 MigrationInfoDumper.dumpMigrations(flyway.info().all());
+            } else if ("repair".equals(operation)) {
+                flyway.repair();
             } else {
                 printUsage();
             }

File: flyway-ant/src/main/java/com/googlecode/flyway/ant/InitTask.java
Patch:
@@ -16,7 +16,7 @@
 package com.googlecode.flyway.ant;
 
 import com.googlecode.flyway.core.Flyway;
-import com.googlecode.flyway.core.migration.SchemaVersion;
+import com.googlecode.flyway.core.api.MigrationVersion;
 
 /**
  * Ant task that initializes the metadata table in an existing schema.
@@ -53,7 +53,7 @@ public void setInitialDescription(String initialDescription) {
     protected void doExecute(Flyway flyway) throws Exception {
         String initialVersionValue = useValueIfPropertyNotSet(initialVersion, "initialVersion");
         if (initialVersionValue != null) {
-            flyway.setInitialVersion(new SchemaVersion(initialVersionValue));
+            flyway.setInitialVersion(new MigrationVersion(initialVersionValue));
         }
         String initialDescriptionValue = useValueIfPropertyNotSet(initialDescription, "initialDescription");
         if (initialDescriptionValue != null) {

File: flyway-ant/src/main/java/com/googlecode/flyway/ant/StatusTask.java
Patch:
@@ -17,8 +17,6 @@
 
 import com.googlecode.flyway.core.Flyway;
 import com.googlecode.flyway.core.util.MetaDataTableRowDumper;
-import org.apache.tools.ant.BuildException;
-import org.apache.tools.ant.Task;
 
 /**
  * Flyway status task.

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -801,6 +801,7 @@ private void doClean(Connection connectionUserObjects, DbSupport dbSupport) {
      */
     @Deprecated
     public MetaDataTableRow status() {
+        LOG.warn("Flyway.status() has been deprecated and will be removed in Flyway 2.0. Use Flyway.info() instead.");
         return execute(new Command<MetaDataTableRow>() {
             public MetaDataTableRow execute(Connection connectionMetaDataTable, Connection connectionUserObjects, DbSupport dbSupport) {
                 MetaDataTable metaDataTable = createMetaDataTable(connectionMetaDataTable, dbSupport);
@@ -817,6 +818,7 @@ public MetaDataTableRow execute(Connection connectionMetaDataTable, Connection c
      */
     @Deprecated
     public List<MetaDataTableRow> history() {
+        LOG.warn("Flyway.history() has been deprecated and will be removed in Flyway 2.0. Use Flyway.info() instead.");
         return execute(new Command<List<MetaDataTableRow>>() {
             public List<MetaDataTableRow> execute(Connection connectionMetaDataTable, Connection connectionUserObjects, DbSupport dbSupport) {
                 MetaDataTable metaDataTable = createMetaDataTable(connectionMetaDataTable, dbSupport);

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/MetaDataTableRowDumper.java
Patch:
@@ -19,14 +19,13 @@
 import com.googlecode.flyway.core.util.logging.Log;
 import com.googlecode.flyway.core.util.logging.LogFactory;
 
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.List;
 
 /**
  * Dumps migrations in an ascii-art table in the logs and the console.
  */
+@Deprecated
 public class MetaDataTableRowDumper {
     /**
      * Logger.

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/HistoryMojo.java
Patch:
@@ -23,8 +23,9 @@
  *
  * @goal history
  * @since 0.9
+ * @deprecated Use flyway:info instead. Will be removed in Flyway 2.0.
  */
-@SuppressWarnings({"JavaDoc", "UnusedDeclaration"})
+@Deprecated
 public class HistoryMojo extends AbstractFlywayMojo {
     @Override
     protected void doExecute(Flyway flyway) throws Exception {

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/InitMojo.java
Patch:
@@ -16,7 +16,7 @@
 package com.googlecode.flyway.maven;
 
 import com.googlecode.flyway.core.Flyway;
-import com.googlecode.flyway.core.migration.SchemaVersion;
+import com.googlecode.flyway.core.api.MigrationVersion;
 
 /**
  * Maven goal that initializes the metadata table in an existing schema.
@@ -44,7 +44,7 @@ public class InitMojo extends AbstractFlywayMojo {
     @Override
     protected void doExecute(Flyway flyway) throws Exception {
         if (initialVersion != null) {
-            flyway.setInitialVersion(new SchemaVersion(initialVersion));
+            flyway.setInitialVersion(new MigrationVersion(initialVersion));
         }
         if (initialDescription != null) {
             flyway.setInitialDescription(initialDescription);

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/StatusMojo.java
Patch:
@@ -23,8 +23,9 @@
  *
  * @goal status
  * @since 0.8
+ * @deprecated Use flyway:info instead. Will be removed in Flyway 2.0.
  */
-@SuppressWarnings({"UnusedDeclaration", "JavaDoc"})
+@Deprecated
 public class StatusMojo extends AbstractFlywayMojo {
     @Override
     protected void doExecute(Flyway flyway) throws Exception {

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/ValidateMojo.java
Patch:
@@ -27,9 +27,7 @@
 @SuppressWarnings({"UnusedDeclaration", "JavaDoc"})
 public class ValidateMojo extends AbstractMigrationLoadingMojo {
     @Override
-    protected void doExecute(Flyway flyway) throws Exception {
-        super.doExecute(flyway);
-
+    protected void doExecuteWithMigrationConfig(Flyway flyway) throws Exception {
         flyway.validate();
     }
 }
\ No newline at end of file

File: flyway-ant/src/main/java/com/googlecode/flyway/ant/MigrateTask.java
Patch:
@@ -202,9 +202,8 @@ protected void doExecute(Flyway flyway) throws Exception {
                 new CompositeMigrationResolver(flyway.getLocations(), flyway.getBasePackage(), flyway.getBaseDir(), flyway.getEncoding(),
                         flyway.getSqlMigrationPrefix(), flyway.getSqlMigrationSuffix(),
                         flyway.getPlaceholders(), flyway.getPlaceholderPrefix(), flyway.getPlaceholderSuffix());
-        List<Migration> availableMigrations = migrationResolver.resolveMigrations();
 
-        if (availableMigrations.isEmpty()) {
+        if (migrationResolver.resolveMigrations().isEmpty()) {
             LOG.warn("Possible solution: run the Ant javac and copy tasks first so Flyway can find the migrations");
             return;
         }

File: flyway-core/src/main/java/com/googlecode/flyway/core/api/migration/MigrationInfoProvider.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.googlecode.flyway.core.api.migration;
 
-import com.googlecode.flyway.core.api.Version;
+import com.googlecode.flyway.core.api.MigrationVersion;
 
 /**
  * Migration implementors that also implement this interface will be able to specify their version and description
@@ -27,7 +27,7 @@ public interface MigrationInfoProvider {
      *
      * @return The version after the migration is complete.
      */
-    Version getVersion();
+    MigrationVersion getVersion();
 
     /**
      * Returns the description for the migration history.

File: flyway-core/src/main/java/com/googlecode/flyway/core/api/migration/jdbc/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Public API: Interfaces for Jdbc Migrations.
+ * Interfaces for Jdbc Migrations.
  */
 package com.googlecode.flyway.core.api.migration.jdbc;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/api/migration/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Public API: Interfaces for Migration implementors.
+ * Interfaces for Migration implementors.
  */
 package com.googlecode.flyway.core.api.migration;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/api/migration/spring/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Public API: Interfaces for Spring Jdbc Migrations (require Spring Jdbc + dependencies on the classpath).
+ * Interfaces for Spring Jdbc Migrations (require Spring Jdbc + dependencies on the classpath).
  */
 package com.googlecode.flyway.core.api.migration.spring;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/api/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Public API: General classes.
+ * Migration info and related classes.
  */
 package com.googlecode.flyway.core.api;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/MigrationException.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.googlecode.flyway.core.migration;
 
+import com.googlecode.flyway.core.api.MigrationVersion;
 import com.googlecode.flyway.core.exception.FlywayException;
 
 /**
@@ -24,7 +25,7 @@ public class MigrationException extends FlywayException {
     /**
      * The version of the migration that failed.
      */
-    private final SchemaVersion version;
+    private final MigrationVersion version;
 
     /**
      * Flag indicating whether a rollback was performed or not.
@@ -37,7 +38,7 @@ public class MigrationException extends FlywayException {
      * @param version  The version of the migration that failed.
      * @param rollback Flag indicating whether a rollback was performed or not.
      */
-    public MigrationException(SchemaVersion version, boolean rollback) {
+    public MigrationException(MigrationVersion version, boolean rollback) {
         super();
         this.version = version;
         this.rollback = rollback;

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/MigrationInfoHelper.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.googlecode.flyway.core.migration;
 
+import com.googlecode.flyway.core.api.MigrationVersion;
 import com.googlecode.flyway.core.exception.FlywayException;
 
 /**
@@ -36,7 +37,7 @@ private MigrationInfoHelper() {
      *
      * @return The extracted schema version.
      */
-    public static SchemaVersion extractSchemaVersion(String migrationName) {
+    public static MigrationVersion extractVersion(String migrationName) {
         String rawVersion;
 
         // Handle the description
@@ -54,7 +55,7 @@ public static SchemaVersion extractSchemaVersion(String migrationName) {
                     "Invalid version starting with a dot (.) instead of a digit or a letter: " + version);
         }
 
-        return new SchemaVersion(version);
+        return new MigrationVersion(version);
     }
 
     /**

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/MigrationResolver.java
Patch:
@@ -26,5 +26,5 @@ public interface MigrationResolver {
      *
      * @return The available migrations. Sorted by Version, newest first.
      */
-    List<Migration> resolveMigrations();
+    List<ExecutableMigration> resolveMigrations();
 }

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/MigrateMojo.java
Patch:
@@ -137,9 +137,8 @@ protected void doExecute(Flyway flyway) throws Exception {
                 new CompositeMigrationResolver(flyway.getLocations(), flyway.getBasePackage(), flyway.getBaseDir(), flyway.getEncoding(),
                         flyway.getSqlMigrationPrefix(), flyway.getSqlMigrationSuffix(),
                         flyway.getPlaceholders(), flyway.getPlaceholderPrefix(), flyway.getPlaceholderSuffix());
-        List<Migration> availableMigrations = migrationResolver.resolveMigrations();
 
-        if (availableMigrations.isEmpty()) {
+        if (migrationResolver.resolveMigrations().isEmpty()) {
             LOG.warn("Possible solution: run mvn compile first so Flyway can find the migrations");
             return;
         }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/derby/DerbySqlScript.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.googlecode.flyway.core.dbsupport.derby;
 
+import com.googlecode.flyway.core.migration.sql.Delimiter;
 import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.migration.sql.SqlScript;
 import com.googlecode.flyway.core.util.StringUtils;
@@ -48,7 +49,7 @@ public DerbySqlScript(String sqlScriptSource, PlaceholderReplacer placeholderRep
     }
 
     @Override
-    protected String changeDelimiterIfNecessary(String statement, String line, String delimiter) {
+    protected Delimiter changeDelimiterIfNecessary(String statement, String line, Delimiter delimiter) {
         return DEFAULT_STATEMENT_DELIMITER;
     }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/h2/H2SqlScript.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 import java.util.Set;
 
+import com.googlecode.flyway.core.migration.sql.Delimiter;
 import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.migration.sql.SqlScript;
 import com.googlecode.flyway.core.util.StringUtils;
@@ -48,7 +49,7 @@ public H2SqlScript(String sqlScriptSource, PlaceholderReplacer placeholderReplac
     }
 
     @Override
-    protected String changeDelimiterIfNecessary(String statement, String line, String delimiter) {
+    protected Delimiter changeDelimiterIfNecessary(String statement, String line, Delimiter delimiterRegex) {
         return DEFAULT_STATEMENT_DELIMITER;
     }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/hsql/HsqlSqlScript.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.googlecode.flyway.core.dbsupport.hsql;
 
+import com.googlecode.flyway.core.migration.sql.Delimiter;
 import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.migration.sql.SqlScript;
 import com.googlecode.flyway.core.util.StringUtils;
@@ -35,7 +36,7 @@ public HsqlSqlScript(String sqlScriptSource, PlaceholderReplacer placeholderRepl
     }
 
     @Override
-    protected String changeDelimiterIfNecessary(String statement, String line, String delimiter) {
+    protected Delimiter changeDelimiterIfNecessary(String statement, String line, Delimiter delimiter) {
         if (statement.toUpperCase().matches(".*\\W+BEGIN\\W+ATOMIC\\W+.*")) {
             if (statement.toUpperCase().trim().endsWith("END;")) {
                 return DEFAULT_STATEMENT_DELIMITER;

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLSqlScript.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.googlecode.flyway.core.dbsupport.mysql;
 
+import com.googlecode.flyway.core.migration.sql.Delimiter;
 import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.migration.sql.SqlScript;
 import com.googlecode.flyway.core.util.StringUtils;
@@ -36,17 +37,16 @@ public class MySQLSqlScript extends SqlScript {
      *
      * @param sqlScriptSource     The sql script as a text block with all placeholders still present.
      * @param placeholderReplacer The placeholder replacer to apply to sql migration scripts.
-     *
      * @throws IllegalStateException Thrown when the script could not be read from this resource.
      */
     public MySQLSqlScript(String sqlScriptSource, PlaceholderReplacer placeholderReplacer) {
         super(sqlScriptSource, placeholderReplacer);
     }
 
     @Override
-    protected String changeDelimiterIfNecessary(String statement, String line, String delimiter) {
+    protected Delimiter changeDelimiterIfNecessary(String statement, String line, Delimiter delimiter) {
         if (line.toUpperCase().startsWith(DELIMITER_KEYWORD)) {
-            return line.substring(DELIMITER_KEYWORD.length()).trim();
+            return new Delimiter(line.substring(DELIMITER_KEYWORD.length()).trim(), false);
         }
 
         return delimiter;

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleSqlScript.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.googlecode.flyway.core.dbsupport.oracle;
 
+import com.googlecode.flyway.core.migration.sql.Delimiter;
 import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.migration.sql.SqlScript;
 import com.googlecode.flyway.core.util.StringUtils;
@@ -29,7 +30,7 @@ public class OracleSqlScript extends SqlScript {
     /**
      * Delimiter of PL/SQL blocks and statements.
      */
-    private static final String PLSQL_DELIMITER = "/";
+    private static final Delimiter PLSQL_DELIMITER = new Delimiter("/", true);
 
     /**
      * Creates a new sql script from this source with these placeholders to replace.
@@ -43,7 +44,7 @@ public OracleSqlScript(String sqlScriptSource, PlaceholderReplacer placeholderRe
     }
 
     @Override
-    protected String changeDelimiterIfNecessary(String statement, String line, String delimiter) {
+    protected Delimiter changeDelimiterIfNecessary(String statement, String line, Delimiter delimiter) {
         String upperCaseLine = line.toUpperCase();
         if (upperCaseLine.matches("DECLARE|DECLARE\\s.*") || upperCaseLine.matches("BEGIN|BEGIN\\s.*")) {
             return PLSQL_DELIMITER;

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/postgresql/PostgreSQLSqlScript.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.googlecode.flyway.core.dbsupport.postgresql;
 
+import com.googlecode.flyway.core.migration.sql.Delimiter;
 import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.migration.sql.SqlScript;
 import com.googlecode.flyway.core.util.StringUtils;
@@ -46,7 +47,7 @@ public PostgreSQLSqlScript(String sqlScriptSource, PlaceholderReplacer placehold
     }
 
     @Override
-    protected String changeDelimiterIfNecessary(String statement, String line, String delimiter) {
+    protected Delimiter changeDelimiterIfNecessary(String statement, String line, Delimiter delimiterRegex) {
         return DEFAULT_STATEMENT_DELIMITER;
     }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/SqlScript.java
Patch:
@@ -130,11 +130,13 @@ List<SqlStatement> linesToStatements(List<String> lines) {
         for (int lineNumber = 1; lineNumber <= lines.size(); lineNumber++) {
             String line = lines.get(lineNumber - 1);
 
-            if (!StringUtils.hasText(line)) {
+            if (!StringUtils.hasText(statementSql) && !StringUtils.hasText(line)) {
+                // Skip empty line between statements.
                 continue;
             }
 
             if (!StringUtils.hasText(statementSql)) {
+                // Start a new statement, marking it with this line number.
                 statementLineNumber = lineNumber;
             } else {
                 statementSql += "\n";

File: flyway-commandline/src/main/java/com/googlecode/flyway/commandline/Main.java
Patch:
@@ -68,8 +68,6 @@ public static void main(String[] args) {
 
             loadJdbcDriversAndJavaMigrations();
 
-            Flyway flyway = new Flyway();
-
             Properties properties = new Properties();
             initializeDefaults(properties);
             loadConfigurationFile(properties, args);
@@ -80,6 +78,7 @@ public static void main(String[] args) {
                 LOG.error("JDBC Driver (" + driverClassName + ") not found! Put the JDBC Driver Jar in the /jars folder, for Flyway Command-Line to find it.");
             }
 
+            Flyway flyway = new Flyway();
             flyway.configure(properties);
 
             if ("clean".equals(operation)) {

File: flyway-ant-largetest/src/test/java/com/googlecode/flyway/ant/AntLargeTest.java
Patch:
@@ -61,7 +61,7 @@ public void multi() throws Exception {
         assertTrue(stdOut.contains("Cleaned database schema 'flyway_1'"));
         assertTrue(stdOut.contains("Cleaned database schema 'flyway_2'"));
         assertTrue(stdOut.contains("Cleaned database schema 'flyway_3'"));
-        assertTrue(stdOut.contains("Metadata table created: MASTER_OF_THE_VERSIONS"));
+        assertTrue(stdOut.contains("Creating Metadata table: MASTER_OF_THE_VERSIONS"));
         assertTrue(stdOut.contains("Successfully applied 3 migrations"));
     }
 
@@ -108,7 +108,8 @@ protected String runAnt(int expectedReturnCode, String dir, String... extraArgs)
 
         List<String> args = new ArrayList<String>();
         args.add(antHome + "/bin/ant" + extension);
-        args.add("-d");
+        // enable for debug
+        // args.add("-d");
         args.add("clean");
         args.add("run");
         args.add("-DinstallDir=" + new File(getInstallDir()).getAbsolutePath());

File: flyway-core/src/main/java/com/googlecode/flyway/core/clean/DbCleaner.java
Patch:
@@ -23,8 +23,8 @@
 import com.googlecode.flyway.core.util.jdbc.TransactionCallback;
 import com.googlecode.flyway.core.util.jdbc.TransactionException;
 import com.googlecode.flyway.core.util.jdbc.TransactionTemplate;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/DbSupportFactory.java
Patch:
@@ -24,8 +24,8 @@
 import com.googlecode.flyway.core.dbsupport.postgresql.PostgreSQLDbSupport;
 import com.googlecode.flyway.core.dbsupport.sqlserver.SQLServerDbSupport;
 import com.googlecode.flyway.core.exception.FlywayException;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.DatabaseMetaData;

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/h2/H2DbSupport.java
Patch:
@@ -21,8 +21,8 @@
 import com.googlecode.flyway.core.migration.sql.SqlStatement;
 import com.googlecode.flyway.core.util.StringUtils;
 import com.googlecode.flyway.core.util.jdbc.JdbcUtils;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.ResultSet;

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/hsql/HsqlDbSupport.java
Patch:
@@ -21,8 +21,8 @@
 import com.googlecode.flyway.core.migration.sql.SqlScript;
 import com.googlecode.flyway.core.migration.sql.SqlStatement;
 import com.googlecode.flyway.core.util.jdbc.JdbcUtils;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.ResultSet;

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -20,8 +20,8 @@
 import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.migration.sql.SqlScript;
 import com.googlecode.flyway.core.migration.sql.SqlStatement;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: flyway-core/src/main/java/com/googlecode/flyway/core/init/DbInit.java
Patch:
@@ -23,8 +23,8 @@
 import com.googlecode.flyway.core.migration.init.InitMigration;
 import com.googlecode.flyway.core.util.jdbc.TransactionCallback;
 import com.googlecode.flyway.core.util.jdbc.TransactionTemplate;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 /**
  * Workflow for initializing the database with a new metadata table and an initial marker version.

File: flyway-core/src/main/java/com/googlecode/flyway/core/metadatatable/MetaDataTable.java
Patch:
@@ -27,8 +27,8 @@
 import com.googlecode.flyway.core.util.jdbc.RowMapper;
 import com.googlecode.flyway.core.util.jdbc.TransactionCallback;
 import com.googlecode.flyway.core.util.jdbc.TransactionTemplate;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.ResultSet;

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/DbMigrator.java
Patch:
@@ -26,8 +26,8 @@
 import com.googlecode.flyway.core.util.jdbc.TransactionCallback;
 import com.googlecode.flyway.core.util.jdbc.TransactionException;
 import com.googlecode.flyway.core.util.jdbc.TransactionTemplate;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/SqlScript.java
Patch:
@@ -18,8 +18,8 @@
 import com.googlecode.flyway.core.util.ObjectUtils;
 import com.googlecode.flyway.core.util.StringUtils;
 import com.googlecode.flyway.core.util.jdbc.JdbcTemplate;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.io.BufferedReader;
 import java.io.IOException;

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/SqlStatement.java
Patch:
@@ -17,8 +17,8 @@
 
 import com.googlecode.flyway.core.exception.FlywayException;
 import com.googlecode.flyway.core.util.jdbc.JdbcTemplate;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.sql.SQLException;
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/MetaDataTableRowDumper.java
Patch:
@@ -16,8 +16,8 @@
 package com.googlecode.flyway.core.util;
 
 import com.googlecode.flyway.core.metadatatable.MetaDataTableRow;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/jdbc/JdbcUtils.java
Patch:
@@ -16,8 +16,8 @@
 package com.googlecode.flyway.core.util.jdbc;
 
 import com.googlecode.flyway.core.exception.FlywayException;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import javax.sql.DataSource;
 import java.sql.Connection;

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/jdbc/TransactionTemplate.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.googlecode.flyway.core.util.jdbc;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/scanner/ClassPathScanner.java
Patch:
@@ -22,8 +22,8 @@
 import com.googlecode.flyway.core.util.scanner.jboss.JBossVFSv2UrlResolver;
 import com.googlecode.flyway.core.util.scanner.jboss.JBossVFSv3LocationScanner;
 import com.googlecode.flyway.core.util.scanner.osgi.EquinoxCommonResourceUrlResolver;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.io.IOException;
 import java.net.URL;

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/scanner/FileSystemLocationScanner.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.googlecode.flyway.core.util.scanner;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.io.File;
 import java.io.IOException;

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/scanner/jboss/JBossVFSv3LocationScanner.java
Patch:
@@ -16,8 +16,8 @@
 package com.googlecode.flyway.core.util.scanner.jboss;
 
 import com.googlecode.flyway.core.util.scanner.LocationScanner;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 import org.jboss.vfs.VFS;
 import org.jboss.vfs.VirtualFile;
 import org.jboss.vfs.VirtualFileFilter;

File: flyway-core/src/main/java/com/googlecode/flyway/core/validation/DbValidator.java
Patch:
@@ -24,8 +24,8 @@
 import com.googlecode.flyway.core.util.StopWatch;
 import com.googlecode.flyway.core.util.StringUtils;
 import com.googlecode.flyway.core.util.TimeFormat;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import com.googlecode.flyway.core.util.logging.Log;
+import com.googlecode.flyway.core.util.logging.LogFactory;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleSqlScript.java
Patch:
@@ -53,9 +53,11 @@ protected String changeDelimiterIfNecessary(String statement, String line, Strin
         if (upperCaseStatement.matches("CREATE\\W*FUNCTION.*")
                 || upperCaseStatement.matches("CREATE\\W+PROCEDURE.*")
                 || upperCaseStatement.matches("CREATE\\W+PACKAGE.*")
+                || upperCaseStatement.matches("CREATE\\W+TYPE.*")
                 || upperCaseStatement.matches("CREATE\\W+OR\\W+REPLACE\\W+FUNCTION.*")
                 || upperCaseStatement.matches("CREATE\\W+OR\\W+REPLACE\\W+PROCEDURE.*")
-                || upperCaseStatement.matches("CREATE\\W+OR\\W+REPLACE\\W+PACKAGE.*")) {
+                || upperCaseStatement.matches("CREATE\\W+OR\\W+REPLACE\\W+PACKAGE.*")
+                || upperCaseStatement.matches("CREATE\\W+OR\\W+REPLACE\\W+TYPE.*")) {
             return PLSQL_DELIMITER;
         }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -102,6 +102,7 @@ public SqlScript createCleanScript(String schema) throws SQLException {
         allDropStatements.addAll(generateDropStatementsForObjectType("PACKAGE", "", schema));
         allDropStatements.addAll(generateDropStatementsForObjectType("PROCEDURE", "", schema));
         allDropStatements.addAll(generateDropStatementsForObjectType("SYNONYM", "", schema));
+        allDropStatements.addAll(generateDropStatementsForObjectType("TRIGGER", "", schema));
         allDropStatements.addAll(generateDropStatementsForObjectType("VIEW", "CASCADE CONSTRAINTS", schema));
         allDropStatements.addAll(generateDropStatementsForObjectType("TABLE", "CASCADE CONSTRAINTS PURGE", schema));
         allDropStatements.addAll(generateDropStatementsForObjectType("TYPE", "FORCE", schema));

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/hsql/HsqlDbSupportMediumTest.java
Patch:
@@ -15,13 +15,11 @@
  */
 package com.googlecode.flyway.core.dbsupport.hsql;
 
-import com.googlecode.flyway.core.Flyway;
 import com.googlecode.flyway.core.util.jdbc.DriverDataSource;
 import org.hsqldb.jdbcDriver;
 import org.junit.Test;
 
 import java.sql.Connection;
-import java.sql.SQLException;
 
 import static org.junit.Assert.assertFalse;
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/hsql/HsqlSqlScriptSmallTest.java
Patch:
@@ -13,7 +13,6 @@
  * Small test for HsqlSqlScript.
  */
 public class HsqlSqlScriptSmallTest {
-    @Ignore("Not implemented yet")
     @Test
     public void parseBeginAtomic() {
         HsqlSqlScript script = new HsqlSqlScript("CREATE TRIGGER uniqueidx_trigger BEFORE INSERT ON usertable \n" +

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/jdbc/dummy/Version3dot5.java
Patch:
@@ -25,8 +25,8 @@
 /**
  * Test migration.
  */
-public class Version3dot5 implements JdbcMigration, MigrationInfoProvider, MigrationChecksumProvider {
-    public void migrate(Connection connection) throws Exception {
+public class Version3dot5 extends DummyAbstractJdbcMigration implements MigrationInfoProvider, MigrationChecksumProvider {
+    public void doMigrate(Connection connection) throws Exception {
         //Do nothing.
     }
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/spring/dummy/Version3dot5.java
Patch:
@@ -25,8 +25,8 @@
 /**
  * Test migration.
  */
-public class Version3dot5 implements SpringJdbcMigration, MigrationInfoProvider, MigrationChecksumProvider {
-    public void migrate(JdbcTemplate jdbcTemplate) throws Exception {
+public class Version3dot5 extends DummyAbstractSpringJdbcMigration implements MigrationInfoProvider, MigrationChecksumProvider {
+    public void doMigrate(JdbcTemplate jdbcTemplate) throws Exception {
         //Do nothing
     }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -142,7 +142,7 @@ public class Flyway {
     private ValidationMode validationMode = ValidationMode.NONE;
 
     /**
-     * The error mode for validation.
+     * The error mode for validation. (default: FAIL)
      */
     private ValidationErrorMode validationErrorMode = ValidationErrorMode.FAIL;
 
@@ -323,7 +323,7 @@ public ValidationMode getValidationMode() {
     /**
      * Retrieves the error mode for validation.
      *
-     * @return The error mode for validation.
+     * @return The error mode for validation. (default: FAIL)
      */
     public ValidationErrorMode getValidationErrorMode() {
         return validationErrorMode;
@@ -395,7 +395,7 @@ public void setValidationMode(ValidationMode validationMode) {
     /**
      * Sets the error mode for validation.
      *
-     * @param validationErrorMode The error mode for validation
+     * @param validationErrorMode The error mode for validation. (default: FAIL)
      */
     public void setValidationErrorMode(ValidationErrorMode validationErrorMode) {
         this.validationErrorMode = validationErrorMode;

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -194,7 +194,6 @@ public String[] getLocations() {
      */
     @Deprecated
     public String getBasePackage() {
-        LOG.warn("Flyway.getBasePackage is deprecated. Use Flyway.getLocations instead.");
         return basePackage;
     }
 
@@ -206,7 +205,6 @@ public String getBasePackage() {
      */
     @Deprecated
     public String getBaseDir() {
-        LOG.warn("Flyway.getBaseDir is deprecated. Use Flyway.getLocations instead.");
         return baseDir;
     }
 

File: flyway-maven-plugin-largetest/src/test/java/com/googlecode/flyway/maven/largetest/MavenLargeTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 /**
@@ -53,6 +54,7 @@ public void regular() throws Exception {
     public void migrate() throws Exception {
         String stdOut = runMaven(0, "regular", "clean", "compile", "flyway:migrate");
         assertTrue(stdOut.contains("Successfully applied 2 migrations"));
+        assertFalse(stdOut.contains("deprecated"));
     }
 
     @Test

File: flyway-core/src/main/java/com/googlecode/flyway/core/api/migration/MigrationChecksumProvider.java
Patch:
@@ -21,6 +21,8 @@
  */
 public interface MigrationChecksumProvider {
     /**
+     * Computes the checksum of the migration.
+     *
      * @return The checksum of the migration.
      */
     Integer getChecksum();

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractMigrationLoadingMojo.java
Patch:
@@ -29,11 +29,11 @@
 abstract class AbstractMigrationLoadingMojo extends AbstractFlywayMojo {
     /**
      * Locations on the classpath to scan recursively for migrations. Locations may contain both sql
-     * and java-based migrations. (default: db.migration)
+     * and java-based migrations. (default: db/migration)
      *
      * @parameter
      */
-    private String[] locations = new String[]{"db.migration"};
+    private String[] locations;
 
     /**
      * The base package where the Java migrations are located. (default: db.migration) <br> Also configurable with Maven

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractMigrationLoadingMojo.java
Patch:
@@ -18,7 +18,6 @@
 import com.googlecode.flyway.core.Flyway;
 import com.googlecode.flyway.core.util.StringUtils;
 import com.googlecode.flyway.core.validation.ValidationErrorMode;
-import com.googlecode.flyway.core.validation.ValidationMode;
 import org.apache.maven.project.MavenProject;
 
 /**
@@ -31,6 +30,7 @@ abstract class AbstractMigrationLoadingMojo extends AbstractFlywayMojo {
     /**
      * Locations on the classpath to scan recursively for migrations. Locations may contain both sql
      * and java-based migrations. (default: db.migration)
+     *
      * @parameter
      */
     private String[] locations = new String[]{"db.migration"};

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/HistoryMojo.java
Patch:
@@ -16,11 +16,8 @@
 package com.googlecode.flyway.maven;
 
 import com.googlecode.flyway.core.Flyway;
-import com.googlecode.flyway.core.metadatatable.MetaDataTableRow;
 import com.googlecode.flyway.core.util.MetaDataTableRowDumper;
 
-import java.util.List;
-
 /**
  * Maven goal that shows the history (all applied migrations) of the database.
  *

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/MigrateMojo.java
Patch:
@@ -23,7 +23,6 @@
 import com.googlecode.flyway.core.validation.ValidationMode;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.maven.project.MavenProject;
 
 import java.util.HashMap;
 import java.util.List;

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/ValidateMojo.java
Patch:
@@ -16,7 +16,6 @@
 package com.googlecode.flyway.maven;
 
 import com.googlecode.flyway.core.Flyway;
-import com.googlecode.flyway.core.validation.ValidationMode;
 
 /**
  * Maven goal to validate the applied migrations in the database against the available classpath migrations in order to

File: flyway-commandline/src/main/java/com/googlecode/flyway/commandline/Main.java
Patch:
@@ -61,7 +61,6 @@ public static void main(String[] args) {
             initializeDefaults(properties);
             loadConfigurationFile(properties, args);
             overrideConfiguration(properties, args);
-            //adjustBaseDir(properties);
             flyway.configure(properties);
 
             if ("clean".equals(operation)) {
@@ -133,7 +132,7 @@ private static void outputFirstStackTraceElement(Throwable t) {
      */
     private static void initializeDefaults(Properties properties) {
         properties.put("flyway.password", "");
-        properties.put("flyway.baseDir", "");
+        properties.put("flyway.locations", "/,db/migration");
     }
 
     /**

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/scanner/ClassPathScanner.java
Patch:
@@ -70,10 +70,13 @@ public Class<?>[] scanForClasses(String location, Class<?>... implementedInterfa
             Class<?> clazz = getClassLoader().loadClass(className);
             if (implementedInterfaces.length == 0) {
                 classes.add(clazz);
+                LOG.debug("Found class: " + className);
             } else {
                 for (Class<?> implementedInterface : implementedInterfaces) {
                     if (implementedInterface.isAssignableFrom(clazz)) {
                         classes.add(clazz);
+                        LOG.debug("Found class: " + className);
+                        break;
                     }
                 }
             }

File: flyway-sample-appengine/src/main/java/com/googlecode/flyway/sample/appengine/MigrateServlet.java
Patch:
@@ -29,7 +29,7 @@
 public class MigrateServlet extends HttpServlet {
     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         Flyway flyway = new Flyway();
-        flyway.setBasePackage("com.googlecode.flyway.sample.appengine.migration");
+        flyway.setLocations("com.googlecode.flyway.sample.appengine.migration");
         flyway.setDataSource(DataSourceFactory.createDataSource());
 
         int successCount = flyway.migrate();

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/scanner/ClassPathScanner.java
Patch:
@@ -128,7 +128,6 @@ private Set<String> findResourceNames(String location, String prefix, String suf
             } else {
                 resourceNames.addAll(locationScanner.findResourceNames(normalizedLocation, scanRoot));
             }
-
         }
 
         return filterResourceNames(resourceNames, prefix, suffix);

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/scanner/FileSystemLocationScanner.java
Patch:
@@ -77,7 +77,7 @@ Set<String> findResourceNamesFromFileSystem(String classPathRootOnDisk, String s
      * @throws IOException when the file could not be read.
      */
     private String toResourceNameOnClasspath(String classPathRootOnDisk, File file) throws IOException {
-        String fileName = URLDecoder.decode(file.getCanonicalFile().toURI().toURL().getFile(), "UTF-8");
+        String fileName = URLDecoder.decode(file.toURI().toURL().getFile(), "UTF-8");
 
         //Cut off the part on disk leading to the root of the classpath
         //This leaves a resource name starting with the scanRootLocation,

File: flyway-core/src/test/java/com/googlecode/flyway/core/util/scanner/FileSystemLocationScannerMediumTest.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Test for FileSystemLocationScanner.
  */
-public class FileSystemLocationScannerSmallTest {
+public class FileSystemLocationScannerMediumTest {
     @Test
     public void findResourceNamesFromFileSystem() throws Exception {
         ClassLoader classLoader = Thread.currentThread().getContextClassLoader();

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/db2/DB2DbSupport.java
Patch:
@@ -54,6 +54,9 @@ public SqlScript createCleanScript(String schema) throws SQLException {
         // views
         allDropStatements.addAll(generateDropStatements(upperCaseSchema, "V", "VIEW"));
 
+        // aliases
+        allDropStatements.addAll(generateDropStatements(upperCaseSchema, "A", "ALIAS"));
+
         // tables
         allDropStatements.addAll(generateDropStatements(upperCaseSchema, "T", "TABLE"));
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/postgresql/PostgreSQLSqlScript.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Set;
 
 /**
- * SqlScript supporting PostgreSQL routine definitions.
+ * SqlScript supporting PostgreSQL specific syntax.
  */
 public class PostgreSQLSqlScript extends SqlScript {
     /**

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/postgresql/PostgreSQLSqlScriptSmallTest.java
Patch:
@@ -54,13 +54,13 @@ public void multilineDollarNestedQuotes() {
                 "BEGIN\n" +
                 "raise info 'upperFunc';\n" +
                 "CREATE OR REPLACE FUNCTION internalFunc()\n" +
-                "RETURNS void AS $body$\n" +
+                "RETURNS void AS $BODY$\n" +
                 "DECLARE\n" +
                 "var varchar1 = 'abc';\n" +
                 "BEGIN\n" +
                 "raise info 'internalFunc'\n" +
                 "END;\n" +
-                "$body$ LANGUAGE plpgsql;\n" +
+                "$BODY$ LANGUAGE plpgsql;\n" +
                 "END;\n" +
                 "$$ LANGUAGE plpgsql";
         final PostgreSQLSqlScript script = new PostgreSQLSqlScript(sqlScriptSource, PlaceholderReplacer.NO_PLACEHOLDERS);

File: flyway-core/src/main/java/com/googlecode/flyway/core/clean/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.clean;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/db2/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.db2;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/derby/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.derby;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/h2/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.h2;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/hsql/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.hsql;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/mysql/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.mysql;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.oracle;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/postgresql/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.postgresql;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/sqlserver/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.dbsupport.sqlserver;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/init/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.init;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/metadatatable/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.metadatatable;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/init/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.migration.init;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * SchemaVersion class, the rest is Private API. No compatibility guarantees provided.
+ * SchemaVersion class, the rest is Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.migration;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.migration.sql;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/jdbc/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.util.jdbc;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.util;
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/validation/package-info.java
Patch:
@@ -14,6 +14,6 @@
  * limitations under the License.
  */
 /**
- * Private API. No compatibility guarantees provided.
+ * Private API: No compatibility guarantees provided.
  */
 package com.googlecode.flyway.core.validation;
\ No newline at end of file

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/h2/H2ConcurrentMigrationMediumTest.java
Patch:
@@ -32,8 +32,6 @@ protected DataSource createDataSource(Properties customProperties) {
         String password = customProperties.getProperty("h2.password", "");
         String url = customProperties.getProperty("h2.url", "jdbc:h2:mem:flyway_db_concurrent;DB_CLOSE_DELAY=-1");
 
-        DriverDataSource dataSource = new DriverDataSource(new Driver(), url, user, password);
-        dataSource.setInitSqls("SET LOCK_TIMEOUT 100000");
-        return dataSource;
+        return new DriverDataSource(new Driver(), url, user, password, "SET LOCK_TIMEOUT 100000");
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -131,7 +131,9 @@ private List<String> generateDropStatementsForObjectType(String objectType, fina
                 // Ignore Spatial Index Tables and Sequences as they get dropped automatically when the index gets dropped.
                 + " AND object_name NOT LIKE 'MDRT_%$' AND object_name NOT LIKE 'MDRS_%$'"
                 // Ignore Materialized View Logs
-                + " AND object_name NOT LIKE 'MLOG$%' AND object_name NOT LIKE 'RUPD$%'";
+                + " AND object_name NOT LIKE 'MLOG$%' AND object_name NOT LIKE 'RUPD$%'"
+                // Ignore Oracle Text Index Tables
+                + " AND object_name NOT LIKE 'DR$%'";
 
         List<String> objectNames = jdbcTemplate.queryForStringList(query, objectType, schema.toUpperCase());
         List<String> dropStatements = new ArrayList<String>();

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/DbSupportFactory.java
Patch:
@@ -74,8 +74,9 @@ public static DbSupport createDbSupport(Connection connection) {
         if ("Microsoft SQL Server".equals(databaseProductName)) {
             return new SQLServerDbSupport(connection);
         }
-        if ("MySQL".equals(databaseProductName) ||
-                "Google SQL Service/MySQL".equals(databaseProductName)) {
+        if ("MySQL".equals(databaseProductName)
+                || "Google SQL Service/MySQL".equals(databaseProductName)
+                || "MySQL/Google Cloud SQL".equals(databaseProductName)) {
             return new MySQLDbSupport(connection);
         }
         if ("Oracle".equals(databaseProductName)) {

File: flyway-sample-appengine/src/main/java/com/googlecode/flyway/sample/appengine/DataSourceFactory.java
Patch:
@@ -32,7 +32,7 @@ public class DataSourceFactory {
     public static DataSource createDataSource() {
         return new DriverDataSource(
                 new AppEngineDriver(),
-                "jdbc:google:rdbms://flyway-test-project:flyway-sample/flyway_cloudsql_db",
+                "jdbc:google:rdbms://flyway-test-project:flywaycloudsql/flyway_cloudsql_db",
                 null,
                 null);
     }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/derby/DerbyDbSupport.java
Patch:
@@ -152,7 +152,7 @@ private List<String> generateDropStatements(String objectType, List<String> obje
      * @param querySuffix Suffix to append to the query to find the objects to list.
      * @param schema      The schema of objects to list.
      * @return The names of the objects.
-     * @throws java.sql.SQLException when the obect names could not be listed.
+     * @throws SQLException when the object names could not be listed.
      */
     private List<String> listObjectNames(String objectType, String querySuffix, String schema) throws SQLException {
         String query = "SELECT " + objectType + "name FROM sys.sys" + objectType + "s WHERE schemaid in (SELECT schemaid FROM sys.sysschemas where schemaname = ?)";

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/derby/DerbyJdbcTemplate.java
Patch:
@@ -22,7 +22,7 @@
 import java.sql.SQLException;
 
 /**
- * H2-specific JdbcTemplate customizations.
+ * Derby-specific JdbcTemplate customizations.
  */
 public class DerbyJdbcTemplate extends JdbcTemplate {
     /**

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/h2/H2DbSupport.java
Patch:
@@ -173,7 +173,7 @@ private List<String> generateDropStatementsForCurrentSchema(String objectType, L
      * @param querySuffix Suffix to append to the query to find the objects to list.
      * @param schema      The schema of objects to list.
      * @return The names of the objects.
-     * @throws SQLException when the obect names could not be listed.
+     * @throws SQLException when the object names could not be listed.
      */
     private List<String> listObjectNames(String objectType, String querySuffix, String schema) throws SQLException {
         String query = "SELECT " + objectType + "_NAME FROM information_schema." + objectType + "s WHERE " + objectType + "_schema = ?";

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/h2/H2SqlScript.java
Patch:
@@ -25,7 +25,7 @@
 import com.googlecode.flyway.core.util.StringUtils;
 
 /**
- * SqlScript supporting Hsql-specific delimiter changes.
+ * SqlScript supporting H2-specific delimiter changes.
  */
 public class H2SqlScript extends SqlScript {
     /**

File: flyway-core/src/main/java/com/googlecode/flyway/core/init/DbInit.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.commons.logging.LogFactory;
 
 /**
- * Main workflow for migrating the database.
+ * Workflow for initializing the database with a new metadata table and an initial marker version.
  *
  * @author Axel Fontaine
  */

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/ClassUtils.java
Patch:
@@ -48,7 +48,7 @@ private static ClassLoader getClassLoader() {
 
     /**
      * Determine whether the {@link Class} identified by the supplied name is present
-     * and can be loaded. Will return <code>false</code> if either the class or
+     * and can be loaded. Will return {@code false} if either the class or
      * one of its dependencies is not present or cannot be loaded.
      *
      * @param className the name of the class to check

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/ObjectUtils.java
Patch:
@@ -22,9 +22,9 @@
  */
 public class ObjectUtils {
     /**
-     * Determine if the given objects are equal, returning <code>true</code>
-     * if both are <code>null</code> or <code>false</code> if only one is
-     * <code>null</code>.
+     * Determine if the given objects are equal, returning {@code true}
+     * if both are {@code null} or {@code false} if only one is
+     * {@code null}.
      * @param o1 first Object to compare
      * @param o2 second Object to compare
      * @return whether the given objects are equal

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/StringUtils.java
Patch:
@@ -241,7 +241,7 @@ public static String replace(String inString, String oldPattern, String newPatte
 
     /**
      * Convenience method to return a Collection as a comma-delimited
-     * String. E.g. useful for <code>toString()</code> implementations.
+     * String. E.g. useful for {@code toString()} implementations.
      *
      * @param collection the Collection to analyse
      * @return The comma-delimited String.

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/h2/H2ConcurrentMigrationMediumTest.java
Patch:
@@ -33,7 +33,7 @@ protected DataSource createDataSource(Properties customProperties) {
         String url = customProperties.getProperty("h2.url", "jdbc:h2:mem:flyway_db_concurrent;DB_CLOSE_DELAY=-1");
 
         DriverDataSource dataSource = new DriverDataSource(new Driver(), url, user, password);
-        dataSource.setInitSql("SET LOCK_TIMEOUT 100000");
+        dataSource.setInitSqls("SET LOCK_TIMEOUT 100000");
         return dataSource;
     }
 }
\ No newline at end of file

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/h2/H2MigrationMediumTest.java
Patch:
@@ -34,9 +34,9 @@ public class H2MigrationMediumTest extends MigrationTestCase {
     protected DataSource createDataSource(Properties customProperties) {
         DriverDataSource dataSource =
                 new DriverDataSource(new Driver(), "jdbc:h2:mem:flyway_db;DB_CLOSE_DELAY=-1", "sa", "");
-        dataSource.setInitSql("CREATE SCHEMA IF NOT EXISTS flyway_1;"
-                + "CREATE SCHEMA IF NOT EXISTS flyway_2;"
-                + "CREATE SCHEMA IF NOT EXISTS flyway_3;");
+        dataSource.setInitSqls("CREATE SCHEMA IF NOT EXISTS flyway_1",
+                "CREATE SCHEMA IF NOT EXISTS flyway_2",
+                "CREATE SCHEMA IF NOT EXISTS flyway_3");
         return dataSource;
     }
 

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractFlywayMojo.java
Patch:
@@ -39,7 +39,7 @@
  * @requiresDependencyResolution compile
  * @configurator include-project-dependencies
  */
-@SuppressWarnings({"JavaDoc"})
+@SuppressWarnings({"JavaDoc", "FieldCanBeLocal"})
 abstract class AbstractFlywayMojo extends AbstractMojo {
     /**
      * Logger.

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractMigrationLoadingMojo.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @phase pre-integration-test
  */
-@SuppressWarnings({"UnusedDeclaration"})
+@SuppressWarnings({"UnusedDeclaration", "JavaDoc"})
 abstract class AbstractMigrationLoadingMojo extends AbstractFlywayMojo {
     /**
      * The base package where the Java migrations are located. (default: db.migration) <br> Also configurable with Maven

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/IncludeProjectDependenciesComponentConfigurator.java
Patch:
@@ -43,6 +43,7 @@
  * role-hint="default"
  * @since Aug 1, 2008 3:04:17 PM
  */
+@SuppressWarnings({"JavaDoc", "UnusedDeclaration"})
 public class IncludeProjectDependenciesComponentConfigurator extends AbstractComponentConfigurator {
 
     private static final Log LOGGER = LogFactory.getLog(IncludeProjectDependenciesComponentConfigurator.class);

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/SqlStatement.java
Patch:
@@ -74,7 +74,7 @@ public String getSql() {
     public void execute(JdbcTemplate jdbcTemplate) {
         LOG.debug("Executing SQL: " + this.sql);
         try {
-            jdbcTemplate.execute(sql);
+            jdbcTemplate.executeStatement(sql);
         } catch (SQLException e) {
             throw new FlywayException("Error executing statement at line " + lineNumber
                     + ": " + sql, e);

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/hsql/HsqlDbSupport.java
Patch:
@@ -70,7 +70,7 @@ public String getCurrentSchema() throws SQLException {
     }
 
     public boolean isSchemaEmpty(final String schema) throws SQLException {
-        return !jdbcTemplate.hasTables(null, schema, null);
+        return !jdbcTemplate.hasTables(null, schema.toUpperCase(), null);
     }
 
     public boolean tableExists(final String schema, final String table) throws SQLException {

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLDbSupport.java
Patch:
@@ -21,7 +21,6 @@
 import com.googlecode.flyway.core.migration.sql.SqlStatement;
 
 import java.sql.Connection;
-import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
@@ -68,8 +67,7 @@ public boolean isSchemaEmpty(String schema) throws SQLException {
     }
 
     public boolean tableExists(final String schema, final String table) throws SQLException {
-        ResultSet resultSet = jdbcTemplate.getMetaData().getTables(schema, null, table, null);
-        return resultSet.next();
+        return jdbcTemplate.hasTables(schema, null, table);
     }
 
     public boolean supportsDdlTransactions() {

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/sqlserver/SQLServerDbSupport.java
Patch:
@@ -21,7 +21,6 @@
 import com.googlecode.flyway.core.migration.sql.SqlStatement;
 
 import java.sql.Connection;
-import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
@@ -67,8 +66,7 @@ public boolean isSchemaEmpty(String schema) throws SQLException {
     }
 
     public boolean tableExists(final String schema, final String table) throws SQLException {
-        ResultSet resultSet = jdbcTemplate.getMetaData().getTables(null, schema, table, null);
-        return resultSet.next();
+        return jdbcTemplate.hasTables(null, schema, table);
     }
 
     public boolean supportsDdlTransactions() {

File: flyway-commandline-largetest/src/test/java/com/googlecode/flyway/commandline/largetest/CommandLineLargeTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.googlecode.flyway.commandline.largetest;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.springframework.core.io.ClassPathResource;
 import org.springframework.util.FileCopyUtils;
@@ -90,7 +89,7 @@ private String runFlywayCommandLine(int expectedReturnCode, String configFileNam
             args.add(operation);
         }
         if (configFileName != null) {
-            String configFile = new ClassPathResource("largeTest.properties").getFile().getPath();
+            String configFile = new ClassPathResource(configFileName).getFile().getPath();
             args.add("-configFile=" + configFile);
         }
         args.addAll(Arrays.asList(extraArgs));

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/oracle/OracleMigrationMediumTest.java
Patch:
@@ -111,7 +111,7 @@ public void createPackage() throws FlywayException {
     }
 
     /**
-     * Tests parsing of object names that countain keywords such as MY_TABLE.
+     * Tests parsing of object names that contain keywords such as MY_TABLE.
      */
     @Test
     public void objectNames() throws FlywayException {

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -192,7 +192,7 @@ public String getBasePackage() {
     /**
      * Retrieves the base directory on the classpath where the Sql migrations are located.
      *
-     * @return The base directory on the classpath where the Sql migrations are located. (default: sql/location)
+     * @return The base directory on the classpath where the Sql migrations are located. (default: db/migration)
      */
     public String getBaseDir() {
         return baseDir;
@@ -417,7 +417,7 @@ public void setBasePackage(String basePackage) {
     /**
      * Sets the base directory on the classpath where the Sql migrations are located.
      *
-     * @param baseDir The base directory on the classpath where the Sql migrations are located. (default: sql/location)
+     * @param baseDir The base directory on the classpath where the Sql migrations are located. (default: db/migration)
      */
     public void setBaseDir(String baseDir) {
         this.baseDir = baseDir;

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/jdbc/DriverDataSource.java
Patch:
@@ -187,7 +187,7 @@ public Connection getConnection(String username, String password) throws SQLExce
      * @throws SQLException in case of failure
      * @see java.sql.Driver#connect(String, java.util.Properties)
      */
-    private Connection getConnectionFromDriver(String username, String password) throws SQLException {
+    protected Connection getConnectionFromDriver(String username, String password) throws SQLException {
         Properties props = new Properties();
         if (username != null) {
             props.setProperty("user", username);

File: flyway-core/src/test/java/com/googlecode/flyway/core/FlywaySmallTest.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.googlecode.flyway.core;
 
+import com.googlecode.flyway.core.util.jdbc.DriverDataSource;
 import com.googlecode.flyway.core.validation.ValidationMode;
 import org.junit.Test;
-import org.springframework.jdbc.datasource.SimpleDriverDataSource;
 
 import javax.sql.DataSource;
 import java.util.Properties;
@@ -84,7 +84,7 @@ public void configureSchemas() {
 
     @Test
     public void configureWithExistingDataSource() {
-        DataSource dataSource = new SimpleDriverDataSource(new org.h2.Driver(), "jdbc:h2:mem:flyway_test;DB_CLOSE_DELAY=-1", "sa", "");
+        DataSource dataSource = new DriverDataSource(new org.h2.Driver(), "jdbc:h2:mem:flyway_test;DB_CLOSE_DELAY=-1", "sa", "");
 
         Properties properties = new Properties();
 
@@ -97,7 +97,7 @@ public void configureWithExistingDataSource() {
 
     @Test
     public void configureWithPartialDbConfigInProperties() {
-        DataSource dataSource = new SimpleDriverDataSource(new org.h2.Driver(), "jdbc:h2:mem:flyway_test;DB_CLOSE_DELAY=-1", "sa", "");
+        DataSource dataSource = new DriverDataSource(new org.h2.Driver(), "jdbc:h2:mem:flyway_test;DB_CLOSE_DELAY=-1", "sa", "");
 
         Properties properties = new Properties();
         properties.setProperty("flyway.url", "dummy_url");

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLMigrationTestCase.java
Patch:
@@ -39,7 +39,7 @@ public void storedProcedure() throws Exception {
         flyway.setBaseDir("migration/dbsupport/mysql/sql/procedure");
         flyway.migrate();
 
-        assertEquals("Hello", jdbcTemplate.queryForObject("SELECT value FROM test_data", String.class));
+        assertEquals("Hello", jdbcTemplate.queryForString("SELECT value FROM test_data"));
 
         flyway.clean();
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupportMediumTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.googlecode.flyway.core.dbsupport.oracle;
 
-import com.googlecode.flyway.core.util.jdbc.JdbcTemplate;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/oracle/OracleSqlScriptSmallTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.migration.sql.SqlStatement;
-import org.junit.Assert;
 import org.junit.Test;
 import org.springframework.core.io.ClassPathResource;
 import org.springframework.util.FileCopyUtils;

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/sqlserver/SQLServerMigrationTestCase.java
Patch:
@@ -16,7 +16,6 @@
 package com.googlecode.flyway.core.dbsupport.sqlserver;
 
 import com.googlecode.flyway.core.Flyway;
-import com.googlecode.flyway.core.dbsupport.DbSupport;
 import com.googlecode.flyway.core.migration.MigrationState;
 import com.googlecode.flyway.core.migration.MigrationTestCase;
 import com.googlecode.flyway.core.migration.SchemaVersion;
@@ -56,7 +55,7 @@ public void storedProcedure() throws Exception {
         flyway.setBaseDir("migration/dbsupport/sqlserver/sql/procedure");
         flyway.migrate();
 
-        assertEquals("Hello", jdbcTemplate.queryForObject("SELECT value FROM test_data", String.class));
+        assertEquals("Hello", jdbcTemplate.queryForString("SELECT value FROM test_data"));
 
         flyway.clean();
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/MigrationInfoHelperSmallTest.java
Patch:
@@ -16,7 +16,6 @@
 package com.googlecode.flyway.core.migration;
 
 import com.googlecode.flyway.core.exception.FlywayException;
-import com.googlecode.flyway.core.migration.sql.SqlMigrationResolver;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/MigrationTestCase.java
Patch:
@@ -390,6 +390,8 @@ public void migrateMultipleSchemas() throws Exception {
         flyway.setSchemas("flyway_1", "flyway_2", "flyway_3");
         flyway.clean();
 
+        assertNull(flyway.status());
+
         flyway.setBaseDir("migration/multi");
         flyway.migrate();
         SchemaVersion schemaVersion = flyway.status().getVersion();

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -68,7 +68,7 @@ public class Flyway {
     private String basePackage = "db.migration";
 
     /**
-     * The base directory on the classpath where the Sql migrations are located. (default: sql/location)
+     * The base directory on the classpath where the Sql migrations are located. (default: db/migration)
      */
     private String baseDir = "db/migration";
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/hsql/HsqlMigrationMediumTest.java
Patch:
@@ -59,7 +59,6 @@ protected DbSupport getDbSupport(JdbcTemplate jdbcTemplate) {
     }
 
     @Test
-    @Ignore("Test for issue 175. Problem not fixed yet.")
     public void sequence() {
         flyway.setBaseDir("migration/dbsupport/hsql/sql/sequence");
         flyway.migrate();

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -788,7 +788,7 @@ public void configure(Properties properties) {
             setValidationErrorMode(ValidationErrorMode.valueOf(validationErrorModeProp));
         }
         String validationModeProp = properties.getProperty("flyway.validationMode");
-        if (validationErrorModeProp != null) {
+        if (validationModeProp != null) {
             setValidationMode(ValidationMode.valueOf(validationModeProp));
         }
         String initialVersionProp = properties.getProperty("flyway.initialVersion");

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/TimeFormat.java
Patch:
@@ -38,7 +38,6 @@ private TimeFormat() {
      * @return The execution in a human-readable format.
      */
     public static String format(long millis) {
-        DateFormat dateFormat = new SimpleDateFormat("mm:ss.SSS");
-        return dateFormat.format(new Date(millis)) + "s";
+        return String.format("%02d:%02d.%03ds", millis/60000, (millis%60000)/1000, (millis%1000));
     }
 }

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/ValidateMojo.java
Patch:
@@ -16,6 +16,7 @@
 package com.googlecode.flyway.maven;
 
 import com.googlecode.flyway.core.Flyway;
+import com.googlecode.flyway.core.validation.ValidationMode;
 
 /**
  * Maven goal to validate the applied migrations in the database against the available classpath migrations in order to
@@ -30,6 +31,7 @@ public class ValidateMojo extends AbstractMigrationLoadingMojo {
     protected void doExecute(Flyway flyway) throws Exception {
         super.doExecute(flyway);
 
+        flyway.setValidationMode(ValidationMode.ALL);
         flyway.validate();
     }
 }
\ No newline at end of file

File: flyway-core/src/main/java/com/googlecode/flyway/core/metadatatable/MetaDataTable.java
Patch:
@@ -167,6 +167,7 @@ public void insert(final MetaDataTableRow metaDataTableRow) {
      * @return {@code true} if the metadata table has at least on row. {@code false} if it is empty or it doesn't exist
      *         yet.
      */
+    @SuppressWarnings({"SimplifiableIfStatement"})
     private boolean hasRows() {
         if (!exists()) {
             return false;

File: flyway-ant/src/main/java/com/googlecode/flyway/ant/AbstractFlywayTask.java
Patch:
@@ -211,8 +211,9 @@ public void execute() throws BuildException {
             BasicDataSource dataSource = createDataSource();
             try {
                 flyway.setDataSource(dataSource);
-                if (schemas != null) {
-                    flyway.setSchemas(StringUtils.tokenizeToStringArray(useValueIfPropertyNotSet(schemas, "schemas"), ","));
+                String schemasFromPropertyOrAttribute = useValueIfPropertyNotSet(schemas, "schemas");
+                if (schemasFromPropertyOrAttribute != null) {
+                    flyway.setSchemas(StringUtils.tokenizeToStringArray(schemasFromPropertyOrAttribute, ","));
                 }
                 if (table != null) {
                     flyway.setTable(useValueIfPropertyNotSet(table, "table"));

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -119,7 +119,7 @@ public SqlScript createCleanScript(String schema) {
         allDropStatements.addAll(generateDropStatementsForObjectType("SYNONYM", "", schema));
         allDropStatements.addAll(generateDropStatementsForObjectType("VIEW", "CASCADE CONSTRAINTS", schema));
         allDropStatements.addAll(generateDropStatementsForObjectType("TABLE", "CASCADE CONSTRAINTS PURGE", schema));
-        allDropStatements.addAll(generateDropStatementsForObjectType("TYPE", "", schema));
+        allDropStatements.addAll(generateDropStatementsForObjectType("TYPE", "FORCE", schema));
 
         List<SqlStatement> sqlStatements = new ArrayList<SqlStatement>();
         int lineNumber = 1;

File: flyway-core/src/main/java/com/googlecode/flyway/core/metadatatable/MetaDataTable.java
Patch:
@@ -220,7 +220,7 @@ public List<MetaDataTableRow> allAppliedMigrations() {
      * @return The select statement for reading the metadata table.
      */
     private String getSelectStatement() {
-        return "select VERSION, DESCRIPTION, TYPE, SCRIPT, CHECKSUM, INSTALLED_ON, EXECUTION_TIME, STATE from " + schema + "." + table;
+        return "select version as VERSION, description as DESCRIPTION, type as TYPE, script as SCRIPT, checksum as CHECKSUM, installed_on as INSTALLED_ON, execution_time as EXECUTION_TIME, state as STATE from " + schema + "." + table;
     }
 
     /**

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/MigrationTestCase.java
Patch:
@@ -52,7 +52,7 @@ public abstract class MigrationTestCase {
     /**
      * The base directory for the regular test migrations.
      */
-    private static final String BASEDIR = "migration/sql";
+    protected static final String BASEDIR = "migration/sql";
 
     /**
      * The datasource to use for single-threaded migration tests.

File: flyway-ant-largetest/src/test/java/com/googlecode/flyway/ant/AntLargeTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.googlecode.flyway.ant;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.springframework.util.FileCopyUtils;
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleSqlScript.java
Patch:
@@ -50,7 +50,9 @@ protected String changeDelimiterIfNecessary(String statement, String line, Strin
         }
 
         if (upperCaseLine.startsWith("CREATE")
-                && (upperCaseLine.contains("FUNCTION") || upperCaseLine.contains("PROCEDURE") || upperCaseLine.contains("PACKAGE"))) {
+                && (upperCaseLine.matches(".*\\WFUNCTION(\\W.*|$)")
+                || upperCaseLine.matches(".*\\WPROCEDURE(\\W.*|$)")
+                || upperCaseLine.matches(".*\\WPACKAGE(\\W.*|$)"))) {
             return PLSQL_DELIMITER;
         }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/sqlserver/SQLServerDbSupport.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Map;
 
 /**
- * MSsql-specific support.
+ * SQLServer-specific support.
  */
 public class SQLServerDbSupport implements DbSupport {
     /**

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/DbMigrator.java
Patch:
@@ -216,6 +216,7 @@ public Void doInTransaction(TransactionStatus status) {
                             return null;
                         }
                     });
+                    LOG.debug("Successfully completed and committed DB migration to version " + migration.getVersion().toString());
                     state = MigrationState.SUCCESS;
                 } catch (Exception e) {
                     LOG.error(e.toString());
@@ -245,6 +246,7 @@ public Void doInTransaction(TransactionStatus status) {
 
         metaDataTableRow.update(executionTime, migrationRunnable.state);
         metaDataTable.insert(metaDataTableRow);
+        LOG.debug("MetaData table successfully updated to reflect changes");
 
         return metaDataTableRow;
     }

File: flyway-ant-largetest/src/test/java/com/googlecode/flyway/ant/AntLargeTest.java
Patch:
@@ -43,7 +43,6 @@ public void init() throws Exception {
         assertTrue(stdOut.contains("A new beginning!"));
     }
 
-    @Ignore("Axel: Currently Broken due to Classpath issue")
     @Test
     public void migrate() throws Exception {
         String stdOut = runAnt("migrate", "-Dflyway.baseDir=largetest/sql");

File: flyway-commandline/src/test/java/com/googlecode/flyway/commandline/MainSmallTest.java
Patch:
@@ -16,7 +16,6 @@
 package com.googlecode.flyway.commandline;
 
 import org.junit.Test;
-import org.springframework.core.io.ClassPathResource;
 
 import java.util.Properties;
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/postgresql/PostgreSQLSqlScript.java
Patch:
@@ -39,8 +39,8 @@ protected String changeDelimiterIfNecessary(String statement, String line, Strin
         String upperCaseStatement = statement.toUpperCase();
 
         if (upperCaseStatement.startsWith("CREATE") && upperCaseStatement.contains("FUNCTION")) {
-            if (upperCaseStatement.matches(".* AS \\$[A-Z0-9]*\\$.*")) {
-                if (upperCaseStatement.matches(".* AS \\$[A-Z0-9]*\\$.*\\$[A-Z0-9]*\\$.*")) {
+            if (upperCaseStatement.matches(".* AS \\$[A-Z0-9_]*\\$.*")) {
+                if (upperCaseStatement.matches(".* AS \\$[A-Z0-9_]*\\$.*\\$[A-Z0-9_]*\\$.*")) {
                     return ";";
                 } else {
                     return null;

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/PlaceholderReplacer.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.googlecode.flyway.core.migration.sql;
 
+import com.googlecode.flyway.core.util.StringUtils;
+
 import java.util.HashMap;
 import java.util.Map;
 import java.util.regex.Matcher;
@@ -69,8 +71,7 @@ public String replacePlaceholders(String input) {
 
         for (String placeholder : placeholders.keySet()) {
             String searchTerm = placeholderPrefix + placeholder + placeholderSuffix;
-            noPlaceholders = noPlaceholders.replaceAll(Pattern.quote(searchTerm),
-                    Matcher.quoteReplacement(placeholders.get(placeholder)));
+            noPlaceholders = StringUtils.replaceAll(noPlaceholders, searchTerm, placeholders.get(placeholder));
         }
 
         return noPlaceholders;

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/oracle/OracleMigrationMediumTest.java
Patch:
@@ -23,9 +23,12 @@
 import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.test.context.ContextConfiguration;
 
+import javax.sql.DataSource;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/ConcurrentMigrationTestCase.java
Patch:
@@ -66,7 +66,7 @@ public void setUp() {
         flyway.setDataSource(concurrentMigrationDataSource);
         flyway.setBaseDir(getBaseDir());
         flyway.clean();
-        flyway.init(null, null);
+        flyway.init();
     }
 
     @Test
@@ -100,7 +100,6 @@ public void run() {
         assertEquals(5, flyway.history().size());
         SchemaVersion schemaVersion = flyway.status().getVersion();
         assertEquals("2.0", schemaVersion.toString());
-        assertEquals("Add foreign key", flyway.status().getDescription());
         assertEquals(0, flyway.migrate());
     }
 }

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/MigrationTestCase.java
Patch:
@@ -91,7 +91,7 @@ public void migrate() throws Exception {
         flyway.migrate();
         SchemaVersion schemaVersion = flyway.status().getVersion();
         assertEquals("2.0", schemaVersion.toString());
-        assertEquals("Add foreign key", flyway.status().getDescription());
+        assertEquals("Add foreign key and super mega humongous padding to exceed the maximum column length in the metad...", flyway.status().getDescription());
         assertEquals(0, flyway.migrate());
         assertEquals(4, flyway.history().size());
 
@@ -119,7 +119,6 @@ public void target() throws Exception {
         flyway.setTarget(SchemaVersion.LATEST);
         flyway.migrate();
         assertEquals("2.0", flyway.status().getVersion().toString());
-        assertEquals("Add foreign key", flyway.status().getDescription());
     }
 
     @Test

File: flyway-commandline/src/main/java/com/googlecode/flyway/commandline/Main.java
Patch:
@@ -181,6 +181,8 @@ private static void printUsage() {
         LOG.info("initialVersion      : Initial version to put in the database");
         LOG.info("initialDescription  : Description of the initial version");
         LOG.info("disableInitCheck    : Don't check that a non-empty schema has been initialized");
+        LOG.info("configFile          : Config file to use (default: conf/flyway.properties)");
+        LOG.info("configFileEncoding  : Encoding of the config file (default: UTF-8)");
         LOG.info("");
         LOG.info("Example");
         LOG.info("=======");

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -695,7 +695,8 @@ public void configure(Properties properties) {
             // All datasource properties set
             Driver driverClazz;
             try {
-                driverClazz = (Driver) Class.forName(driver).newInstance();
+                ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
+                driverClazz = (Driver) Class.forName(driver, true, classLoader).newInstance();
             } catch (Exception e) {
                 throw new FlywayException("Error instantiating database driver: " + driver, e);
             }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/DbSupportFactory.java
Patch:
@@ -95,7 +95,6 @@ public static DbSupport createDbSupport(JdbcTemplate jdbcTemplate) {
      */
     private static String getDatabaseProductName(JdbcTemplate jdbcTemplate) {
         return (String) jdbcTemplate.execute(new ConnectionCallback() {
-            @Override
             public String doInConnection(Connection connection) throws SQLException, DataAccessException {
                 DatabaseMetaData databaseMetaData = connection.getMetaData();
                 if (databaseMetaData == null) {

File: flyway-core/src/main/java/com/googlecode/flyway/core/init/DbInit.java
Patch:
@@ -83,7 +83,6 @@ public void init(SchemaVersion version, String description) throws InitException
 
         try {
             transactionTemplate.execute(new TransactionCallback() {
-                @Override
                 public Void doInTransaction(TransactionStatus status) {
                     metaDataTable.insert(metaDataTableRow);
                     return null;

File: flyway-core/src/main/java/com/googlecode/flyway/core/metadatatable/MetaDataTable.java
Patch:
@@ -266,7 +266,6 @@ public SchemaVersion getCurrentSchemaVersion() {
      * Row mapper for Migrations.
      */
     private class MetaDataTableRowMapper implements RowMapper {
-        @Override
         public MetaDataTableRow mapRow(final ResultSet rs, int rowNum) throws SQLException {
             SchemaVersion version = new SchemaVersion(rs.getString("VERSION"));
             String description = rs.getString("DESCRIPTION");

File: flyway-core/src/main/java/com/googlecode/flyway/core/metadatatable/MetaDataTableRow.java
Patch:
@@ -172,7 +172,6 @@ public String getScript() {
         return script;
     }
 
-    @Override
     public int compareTo(MetaDataTableRow o) {
         return getVersion().compareTo(o.getVersion());
     }

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/Migration.java
Patch:
@@ -79,7 +79,6 @@ public String getScript() {
         return script;
     }
 
-    @Override
     public int compareTo(Migration o) {
         return getVersion().compareTo(o.getVersion());
     }

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/SchemaVersion.java
Patch:
@@ -77,7 +77,6 @@ public int hashCode() {
         return version.hashCode();
     }
 
-    @Override
     public int compareTo(SchemaVersion o) {
         if (o == null) {
             return 1;

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/java/BaseJavaMigration.java
Patch:
@@ -80,7 +80,6 @@ public final void migrate(final JdbcTemplate jdbcTemplate, final DbSupport dbSup
         }
     }
 
-    @Override
     public void migrate(JdbcTemplate jdbcTemplate) throws Exception {
         doMigrateInTransaction(jdbcTemplate);
     }

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/java/JavaMigrationResolver.java
Patch:
@@ -46,15 +46,15 @@ public JavaMigrationResolver(String basePackage) {
         this.basePackage = basePackage;
     }
 
-    @Override
     public Collection<Migration> resolveMigrations() {
         Collection<Migration> migrations = new ArrayList<Migration>();
 
         ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);
         provider.addIncludeFilter(new AssignableTypeFilter(JavaMigration.class));
         Set<BeanDefinition> components = provider.findCandidateComponents(basePackage);
         for (BeanDefinition beanDefinition : components) {
-            Class<?> clazz = ClassUtils.resolveClassName(beanDefinition.getBeanClassName(), null);
+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
+            Class<?> clazz = ClassUtils.resolveClassName(beanDefinition.getBeanClassName(), classLoader);
             JavaMigration javaMigration = (JavaMigration) BeanUtils.instantiateClass(clazz);
             migrations.add(new JavaMigrationExecutor(javaMigration));
         }

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/SqlMigrationResolver.java
Patch:
@@ -87,7 +87,6 @@ public SqlMigrationResolver(String baseDir, PlaceholderReplacer placeholderRepla
     }
 
 
-    @Override
     public Collection<Migration> resolveMigrations() {
         Collection<Migration> migrations = new ArrayList<Migration>();
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/MigrationProviderSmallTest.java
Patch:
@@ -38,7 +38,6 @@ public class MigrationProviderSmallTest {
     @Test
     public void collectMigrations() {
         MigrationResolver migrationResolver = new MigrationResolver() {
-            @Override
             public Collection<Migration> resolveMigrations() {
                 Collection<Migration> migrations = new ArrayList<Migration>();
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/java/dummy/V2__InterfaceBasedMigration.java
Patch:
@@ -22,7 +22,6 @@
  * Test migration.
  */
 public class V2__InterfaceBasedMigration implements JavaMigration {
-    @Override
     public void migrate(JdbcTemplate jdbcTemplate) throws Exception {
         //Do nothing.
     }

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractFlywayMojo.java
Patch:
@@ -105,7 +105,6 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
         return dataSource;
     }
 
-    @Override
     public final void execute() throws MojoExecutionException, MojoFailureException {
         MavenLogAppender.startPluginLog(this);
         try {

File: flyway-sample/src/main/java/com/googlecode/flyway/sample/migration/V1_2__Another_user.java
Patch:
@@ -22,7 +22,6 @@
  * Example of a Java-based migration.
  */
 public class V1_2__Another_user implements JavaMigration {
-    @Override
     public void migrate(JdbcTemplate jdbcTemplate) throws Exception {
         jdbcTemplate.execute("INSERT INTO test_user (name) VALUES ('Obelix')");
     }

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractFlywayMojo.java
Patch:
@@ -75,6 +75,8 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
      * Comma-separated list of the schemas managed by Flyway. The first schema in the list will be the one containing
      * the metadata table. (default: The default schema for the datasource connection)<br> default property:
      * ${flyway.schemas}
+     *
+     * @parameter expression="${flyway.schemas}"
      */
     private String schemas;
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/h2/H2SqlScript.java
Patch:
@@ -67,6 +67,7 @@ protected String changeDelimiterIfNecessary(String statement, String line, Strin
      *         literal. {@code false} if not.
      */
     /* private -> for testing */ boolean endsWithOpenMultilineStringLiteral(String statement) {
+        //Ignore all special characters that naturally occur in SQL, but are not opening or closing string literals
 		String[] tokens = StringUtils.tokenizeToStringArray(statement, " ;=|(),");
 
         List<Set<TokenType>> delimitingTokens = extractStringLiteralDelimitingTokens(tokens);

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/SqlScript.java
Patch:
@@ -142,7 +142,7 @@ List<SqlStatement> linesToStatements(List<String> lines) {
                 }
             }
 
-            if ((delimiter != null) && line.endsWith(delimiter)) {
+            if ((delimiter != null) && line.toUpperCase().endsWith(delimiter.toUpperCase())) {
                 String noDelimiterStatementSql = stripDelimiter(statementSql, delimiter);
                 statements.add(new SqlStatement(statementLineNumber, noDelimiterStatementSql));
                 LOG.debug("Found statement at line " + statementLineNumber + ": " + statementSql);

File: flyway-commandline/src/main/java/com/googlecode/flyway/commandline/Main.java
Patch:
@@ -157,6 +157,7 @@ private static void printUsage() {
         LOG.info("url                 : Jdbc url to use to connect to the database");
         LOG.info("user                : User to use to connect to the database");
         LOG.info("password            : Password to use to connect to the database");
+        LOG.info("schemas             : Comma-separated list of the schemas managed by Flyway");
         LOG.info("table               : Name of Flyway's metadata table");
         LOG.info("basePackage         : Package to scan for Java migrations");
         LOG.info("baseDir             : Directory on the classpath to scan for Sql migrations");

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/db2/DB2DbSupport.java
Patch:
@@ -78,7 +78,7 @@ public SqlScript createCleanScript() {
 
         // sequences
         String dropSeqGenQuery = "select rtrim(SEQNAME) from SYSCAT.SEQUENCES where SEQSCHEMA = '" + currentSchema
-                + "'";
+                + "' and SEQTYPE='S'";
         List<String> dropSeqStatements = buildDropStatements("drop sequence", dropSeqGenQuery);
         allDropStatements.addAll(dropSeqStatements);
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/db2/DB2DbSupport.java
Patch:
@@ -71,7 +71,7 @@ public SqlScript createCleanScript() {
         allDropStatements.addAll(dropViewsStatements);
 
         // tables
-        String dropTablesGenQuery = "select rtrim(TABNAME) from SYSCAT.TABLES where TABSCHEMA = '" + currentSchema
+        String dropTablesGenQuery = "select rtrim(TABNAME) from SYSCAT.TABLES where TYPE='T' and TABSCHEMA = '" + currentSchema
                 + "'";
         List<String> dropTableStatements = buildDropStatements("drop table", dropTablesGenQuery);
         allDropStatements.addAll(dropTableStatements);

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/hsql/HsqlDbSupport.java
Patch:
@@ -149,7 +149,7 @@ public SqlScript createCleanScript() {
             @Override
             public Object doInConnection(Connection connection) throws SQLException, DataAccessException {
                 ResultSet resultSet = connection.getMetaData().getTables(null, getCurrentSchema(),
-                        null, null);
+                        null, new String[] {"TABLE"});
                 while (resultSet.next()) {
                     tables.add(resultSet.getString("TABLE_NAME"));
                 }

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/ConcurrentMigrationTestCase.java
Patch:
@@ -96,7 +96,7 @@ public void run() {
         }
 
         assertFalse(failed);
-        assertEquals(4, flyway.history().size());
+        assertEquals(5, flyway.history().size());
         SchemaVersion schemaVersion = flyway.status().getVersion();
         assertEquals("2.0", schemaVersion.toString());
         assertEquals("Add foreign key", flyway.status().getDescription());

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/ResourceUtils.java
Patch:
@@ -43,7 +43,7 @@ private ResourceUtils() {
      * @return The resource contents as a string.
      */
     public static String loadResourceAsString(String location) {
-        return loadResourceAsString(new ClassPathResource(location), "UTF-8");
+        return loadResourceAsString(new ClassPathResource(location, ResourceUtils.class.getClassLoader()), "UTF-8");
     }
 
     /**

File: flyway-commandline/src/main/java/com/googlecode/flyway/commandline/Main.java
Patch:
@@ -171,6 +171,7 @@ private static void printUsage() {
         LOG.info("validationErrorMode : Action to take when validation fails");
         LOG.info("initialVersion      : Initial version to put in the database");
         LOG.info("initialDescription  : Description of the initial version");
+        LOG.info("disableInitCheck    : Don't check that a non-empty schema has been initialized");
         LOG.info("");
         LOG.info("Example");
         LOG.info("=======");

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/h2/H2DbSupport.java
Patch:
@@ -139,7 +139,7 @@ public SqlScript createCleanScript() {
         int count = 0;
         for (Map<String, Object> table : tables) {
             count++;
-            sqlStatements.add(new SqlStatement(count, "DROP TABLE " + table.get("TABLE_NAME") + " CASCADE"));
+            sqlStatements.add(new SqlStatement(count, "DROP TABLE \"" + table.get("TABLE_NAME") + "\" CASCADE"));
         }
         return new SqlScript(sqlStatements);
     }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/hsql/HsqlDbSupport.java
Patch:
@@ -153,7 +153,7 @@ public Object doInConnection(Connection connection) throws SQLException, DataAcc
         int count = 0;
         for (String table : tables) {
             count++;
-            sqlStatements.add(new SqlStatement(count, "DROP TABLE " + table + " CASCADE"));
+            sqlStatements.add(new SqlStatement(count, "DROP TABLE \"" + table + "\" CASCADE"));
         }
         return new SqlScript(sqlStatements);
     }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLDbSupport.java
Patch:
@@ -162,7 +162,7 @@ private void cleanTables(JdbcTemplate jdbcTemplate, int lineNumber, List<SqlStat
         for (Map<String, String> row : tableNames) {
             lineNumber++;
             String tableName = row.get("table_name");
-            sqlStatements.add(new SqlStatement(lineNumber, "DROP TABLE " + tableName));
+            sqlStatements.add(new SqlStatement(lineNumber, "DROP TABLE `" + tableName + "`"));
         }
         lineNumber++;
         sqlStatements.add(new SqlStatement(lineNumber, "SET FOREIGN_KEY_CHECKS = 1"));
@@ -186,7 +186,7 @@ private int cleanRoutines(JdbcTemplate jdbcTemplate, int lineNumber, List<SqlSta
             lineNumber++;
             String routineName = row.get("routine_name");
             String routineType = row.get("routine_type");
-            sqlStatements.add(new SqlStatement(lineNumber, "DROP " + routineType + " " + routineName));
+            sqlStatements.add(new SqlStatement(lineNumber, "DROP " + routineType + " `" + routineName + "`"));
         }
         return lineNumber;
     }
@@ -208,7 +208,7 @@ private int cleanViews(JdbcTemplate jdbcTemplate, int lineNumber, List<SqlStatem
         for (Map<String, String> row : viewNames) {
             lineNumber++;
             String viewName = row.get("table_name");
-            sqlStatements.add(new SqlStatement(lineNumber, "DROP VIEW " + viewName));
+            sqlStatements.add(new SqlStatement(lineNumber, "DROP VIEW `" + viewName + "`"));
         }
         return lineNumber;
     }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -181,7 +181,7 @@ private List<String> generateDropStatementsForObjectType(String objectType, fina
                 new Object[]{objectType}, new RowMapper() {
                     @Override
                     public String mapRow(ResultSet rs, int rowNum) throws SQLException {
-                        return "DROP " + rs.getString("OBJECT_TYPE") + " " + rs.getString("OBJECT_NAME") + " " + extraArguments;
+                        return "DROP " + rs.getString("OBJECT_TYPE") + " \"" + rs.getString("OBJECT_NAME") + "\" " + extraArguments;
                     }
                 });
     }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/postgresql/PostgreSQLDbSupport.java
Patch:
@@ -154,7 +154,7 @@ private List<String> generateDropStatementsForTables() {
         List<String> statements = new ArrayList<String>();
         for (Map<String, String> row : tableNames) {
             String tableName = row.get("table_name");
-            statements.add("DROP TABLE IF EXISTS " + tableName + " CASCADE");
+            statements.add("DROP TABLE IF EXISTS \"" + tableName + "\" CASCADE");
         }
         return statements;
     }
@@ -172,7 +172,7 @@ private List<String> generateDropStatementsForSequences() {
         List<String> statements = new ArrayList<String>();
         for (Map<String, String> row : sequenceNames) {
             String sequenceName = row.get("sequence_name");
-            statements.add("DROP SEQUENCE IF EXISTS " + sequenceName);
+            statements.add("DROP SEQUENCE IF EXISTS \"" + sequenceName + "\"");
         }
 
         return statements;
@@ -191,7 +191,7 @@ private List<String> generateDropStatementsForRoutines() {
 
         List<String> statements = new ArrayList<String>();
         for (Map<String, String> row : rows) {
-            statements.add("DROP FUNCTION " + row.get("proname") + "(" + row.get("args") + ")");
+            statements.add("DROP FUNCTION \"" + row.get("proname") + "\"(" + row.get("args") + ")");
         }
         return statements;
     }

File: flyway-sample/src/main/java/com/googlecode/flyway/sample/migration/V1_2__Another_user.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.googlecode.flyway.sample.migration;
 
-import com.googlecode.flyway.core.migration.java.BaseJavaMigration;
 import com.googlecode.flyway.core.migration.java.JavaMigration;
 import org.springframework.jdbc.core.JdbcTemplate;
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/MetaDataTableRowDumper.java
Patch:
@@ -13,10 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.googlecode.flyway.maven;
+package com.googlecode.flyway.core.util;
 
 import com.googlecode.flyway.core.metadatatable.MetaDataTableRow;
-import com.googlecode.flyway.core.util.StringUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -25,7 +24,7 @@
 import java.util.List;
 
 /**
- * Dumps migrations in an ascii-art table in the logs and the Maven console.
+ * Dumps migrations in an ascii-art table in the logs and the console.
  */
 public class MetaDataTableRowDumper {
     /**

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/HistoryMojo.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.googlecode.flyway.core.Flyway;
 import com.googlecode.flyway.core.metadatatable.MetaDataTableRow;
+import com.googlecode.flyway.core.util.MetaDataTableRowDumper;
 
 import java.util.List;
 

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/StatusMojo.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.googlecode.flyway.core.Flyway;
 import com.googlecode.flyway.core.metadatatable.MetaDataTableRow;
+import com.googlecode.flyway.core.util.MetaDataTableRowDumper;
 
 import java.util.ArrayList;
 import java.util.List;

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/DbSupportFactory.java
Patch:
@@ -105,7 +105,7 @@ public String doInConnection(Connection connection) throws SQLException, DataAcc
                 if (databaseMetaData == null) {
                     throw new FlywayException("Unable to read database metadata while it is null!");
                 }
-                return connection.getMetaData().getDatabaseProductName();
+                return databaseMetaData.getDatabaseProductName();
             }
         });
     }

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/MigrationTestCase.java
Patch:
@@ -44,6 +44,7 @@
 /**
  * Test to demonstrate the migration functionality.
  */
+@SuppressWarnings({"JavaDoc"})
 @RunWith(SpringJUnit4ClassRunner.class)
 public abstract class MigrationTestCase {
     /**
@@ -130,7 +131,7 @@ public void customTableName() throws Exception {
     private void assertChecksum(MetaDataTableRow appliedMigration) {
         ClassPathResource resource = new ClassPathResource(getBaseDir() + "/" + appliedMigration.getScript());
         PlaceholderReplacer placeholderReplacer = new PlaceholderReplacer(new HashMap<String, String>(), "", "");
-        Migration sqlMigration = new SqlMigration(resource, placeholderReplacer, "UTF-8", "1");
+        Migration sqlMigration = new SqlMigration(resource, placeholderReplacer, "UTF-8", "1", appliedMigration.getScript());
         assertEquals("Wrong checksum for " + appliedMigration.getScript(), sqlMigration.getChecksum(), appliedMigration.getChecksum());
     }
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/java/JavaMigrationResolverSmallTest.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class JavaMigrationResolverSmallTest {
     @Test
-    public void test() {
+    public void resolveMigrations() {
         JavaMigrationResolver javaMigrationResolver =
                 new JavaMigrationResolver("com.googlecode.flyway.core.migration.java.dummy");
         Collection<Migration> migrations = javaMigrationResolver.resolveMigrations();

File: flyway-core/src/main/java/com/googlecode/flyway/core/metadatatable/MetaDataTableRow.java
Patch:
@@ -20,6 +20,7 @@
 import com.googlecode.flyway.core.migration.MigrationState;
 import com.googlecode.flyway.core.migration.MigrationType;
 import com.googlecode.flyway.core.migration.SchemaVersion;
+import com.googlecode.flyway.core.util.StringUtils;
 
 import java.util.Date;
 
@@ -82,9 +83,9 @@ public class MetaDataTableRow implements Comparable<MetaDataTableRow> {
     public MetaDataTableRow(SchemaVersion schemaVersion, String description, MigrationType migrationType, String script,
                             Integer checksum, Date installedOn, Integer executionTime, MigrationState state) {
         this.schemaVersion = schemaVersion;
-        this.description = description;
+        this.description = StringUtils.left(description, 100);
         this.migrationType = migrationType;
-        this.script = script;
+        this.script = StringUtils.left(script, 200);
         this.checksum = checksum;
         this.installedOn = installedOn;
         this.executionTime = executionTime;

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/Migration.java
Patch:
@@ -45,7 +45,7 @@ public abstract class Migration implements Comparable<Migration> {
     /**
      * The checksum of the migration.
      * Sql migrations use a crc-32 checksum of the sql script.
-     * Java migrations use the SUID or a custom checksum.
+     * Java migrations use a custom checksum.
      */
     protected Integer checksum;
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/java/JavaMigrationResolver.java
Patch:
@@ -52,12 +52,12 @@ public Collection<Migration> resolveMigrations() {
         Collection<Migration> migrations = new ArrayList<Migration>();
 
         ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);
-        provider.addIncludeFilter(new AssignableTypeFilter(Migration.class));
+        provider.addIncludeFilter(new AssignableTypeFilter(JavaMigration.class));
         Set<BeanDefinition> components = provider.findCandidateComponents(basePackage);
         for (BeanDefinition beanDefinition : components) {
             Class<?> clazz = ClassUtils.resolveClassName(beanDefinition.getBeanClassName(), null);
-            Migration migration = (Migration) BeanUtils.instantiateClass(clazz);
-            migrations.add(migration);
+            JavaMigration javaMigration = (JavaMigration) BeanUtils.instantiateClass(clazz);
+            migrations.add(new JavaMigrationExecutor(javaMigration));
         }
 
         return migrations;

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/java/BaseJavaMigrationSmallTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.googlecode.flyway.core.migration.java;
 
 import com.googlecode.flyway.core.migration.Migration;
+import com.googlecode.flyway.core.migration.java.dummy.V1_2_3__Dummy_migration;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/java/dummy/V1_2_3__Dummy_migration.java
Patch:
@@ -14,8 +14,9 @@
  * limitations under the License.
  */
 
-package com.googlecode.flyway.core.migration.java;
+package com.googlecode.flyway.core.migration.java.dummy;
 
+import com.googlecode.flyway.core.migration.java.BaseJavaMigration;
 import org.springframework.dao.DataAccessException;
 import org.springframework.jdbc.core.JdbcTemplate;
 

File: flyway-sample/src/main/java/com/googlecode/flyway/sample/migration/V1_2__Another_user.java
Patch:
@@ -17,14 +17,15 @@
 package com.googlecode.flyway.sample.migration;
 
 import com.googlecode.flyway.core.migration.java.BaseJavaMigration;
+import com.googlecode.flyway.core.migration.java.JavaMigration;
 import org.springframework.jdbc.core.JdbcTemplate;
 
 /**
  * Example of a Java-based migration.
  */
-public class V1_2__Another_user extends BaseJavaMigration {
+public class V1_2__Another_user implements JavaMigration {
     @Override
-    protected void doMigrateInTransaction(JdbcTemplate jdbcTemplate) throws Exception {
+    public void migrate(JdbcTemplate jdbcTemplate) throws Exception {
         jdbcTemplate.execute("INSERT INTO test_user (name) VALUES ('Obelix')");
     }
 }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/DbSupportFactory.java
Patch:
@@ -21,6 +21,7 @@
 import com.googlecode.flyway.core.dbsupport.mysql.MySQLDbSupport;
 import com.googlecode.flyway.core.dbsupport.oracle.OracleDbSupport;
 import com.googlecode.flyway.core.dbsupport.postgresql.PostgreSQLDbSupport;
+import com.googlecode.flyway.core.exception.FlywayException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.springframework.dao.DataAccessException;
@@ -79,7 +80,7 @@ public static DbSupport createDbSupport(JdbcTemplate jdbcTemplate) {
         }
 
         if (dbSupport == null) {
-            throw new IllegalStateException("Unsupported Database: " + databaseProductName);
+            throw new FlywayException("Unsupported Database: " + databaseProductName);
         }
 
         if (!dbSupport.supportsLocking()) {
@@ -102,7 +103,7 @@ private static String getDatabaseProductName(JdbcTemplate jdbcTemplate) {
             public String doInConnection(Connection connection) throws SQLException, DataAccessException {
                 DatabaseMetaData databaseMetaData = connection.getMetaData();
                 if (databaseMetaData == null) {
-                    throw new IllegalStateException("Unable to read database metadata while it is null!");
+                    throw new FlywayException("Unable to read database metadata while it is null!");
                 }
                 return connection.getMetaData().getDatabaseProductName();
             }

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/SqlMigration.java
Patch:
@@ -37,7 +37,7 @@ public class SqlMigration extends BaseMigration {
     /**
      * The source of the Sql script, loaded on demand.
      */
-    private String sqlScriptSource;
+    private final String sqlScriptSource;
 
     /**
      * Creates a new sql script migration based on this sql script.
@@ -49,10 +49,10 @@ public class SqlMigration extends BaseMigration {
      */
     public SqlMigration(Resource sqlScriptResource, PlaceholderReplacer placeholderReplacer, String encoding, String versionString) {
         initVersion(versionString);
-        sqlScriptSource = ResourceUtils.loadResourceAsString(sqlScriptResource, encoding);
+
+        this.sqlScriptSource = ResourceUtils.loadResourceAsString(sqlScriptResource, encoding);
         checksum = calculateChecksum(sqlScriptSource);
 
-        // old script = "Sql File: " + sqlScriptResource.getFilename();
         this.script = sqlScriptResource.getFilename();
         this.placeholderReplacer = placeholderReplacer;
     }

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/SqlMigrationResolver.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.googlecode.flyway.core.migration.sql;
 
+import com.googlecode.flyway.core.exception.FlywayException;
 import com.googlecode.flyway.core.migration.Migration;
 import com.googlecode.flyway.core.migration.MigrationResolver;
 import org.apache.commons.logging.Log;
@@ -102,7 +103,7 @@ public Collection<Migration> resolveMigrations() {
             final String searchPattern = sqlMigrationPrefix + "?*" + sqlMigrationSuffix;
             resources = pathMatchingResourcePatternResolver.getResources("classpath*:" + baseDir + "/" + searchPattern);
         } catch (IOException e) {
-            throw new IllegalStateException("Error loading sql migration files", e);
+            throw new FlywayException("Error loading sql migration files", e);
         }
 
         for (Resource resource : resources) {

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/SqlStatement.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.googlecode.flyway.core.migration.sql;
 
+import com.googlecode.flyway.core.exception.FlywayException;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.springframework.dao.DataAccessException;
@@ -75,7 +76,7 @@ public void execute(JdbcTemplate jdbcTemplate) {
         try {
             jdbcTemplate.execute(sql);
         } catch (DataAccessException e) {
-            throw new IllegalStateException("Error executing statement at line " + lineNumber
+            throw new FlywayException("Error executing statement at line " + lineNumber
                     + ": " + sql, e);
         }
     }

File: flyway-core/src/main/java/com/googlecode/flyway/core/validation/DbValidator.java
Patch:
@@ -110,7 +110,7 @@ public String validate() {
                 first = false;
             }
 
-            return String.format("more applied migrations than classpath migrations: DB=%s, Classpath=%s, missing migrations=(%s)",
+            return String.format("More applied migrations than classpath migrations: DB=%s, Classpath=%s, missing migrations=(%s)",
                     appliedMigrations.size(), migrations.size(), stringBuilder.toString());
         }
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/oracle/OracleMigrationMediumTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.googlecode.flyway.core.dbsupport.oracle;
 
 import com.googlecode.flyway.core.dbsupport.DbSupport;
+import com.googlecode.flyway.core.exception.FlywayException;
 import com.googlecode.flyway.core.metadatatable.MetaDataTableRow;
 import com.googlecode.flyway.core.migration.MigrationTestCase;
 import com.googlecode.flyway.core.migration.SchemaVersion;
@@ -51,7 +52,7 @@ protected DbSupport getDbSupport(JdbcTemplate jdbcTemplate) {
      * Tests migrations containing placeholders.
      */
     @Test
-    public void migrationsWithPlaceholders() throws Exception {
+    public void migrationsWithPlaceholders() throws FlywayException {
         int countUserObjects1 = jdbcTemplate.queryForInt("SELECT count(*) FROM user_objects");
 
         Map<String, String> placeholders = new HashMap<String, String>();
@@ -82,7 +83,7 @@ public void migrationsWithPlaceholders() throws Exception {
      * Tests clean for Oracle Spatial Extensions.
      */
     @Test
-    public void cleanSpatialExtensions() throws Exception {
+    public void cleanSpatialExtensions() throws FlywayException {
         flyway.setBaseDir("migration/oracle/sql/spatial");
         flyway.migrate();
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleSqlScript.java
Patch:
@@ -37,7 +37,7 @@ public OracleSqlScript(String sqlScriptSource, PlaceholderReplacer placeholderRe
     @Override
     protected String changeDelimiterIfNecessary(String statement, String line, String delimiter) {
         String upperCaseLine = line.toUpperCase();
-        if (upperCaseLine.matches("(?i)DECLARE|(?i)DECLARE\\s.*") || upperCaseLine.matches("(?i)BEGIN|(?i)BEGIN\\s.*")) {
+        if (upperCaseLine.matches("DECLARE|DECLARE\\s.*") || upperCaseLine.matches("BEGIN|BEGIN\\s.*")) {
             return "/";
         }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/SqlScript.java
Patch:
@@ -131,12 +131,13 @@ List<SqlStatement> linesToStatements(List<String> lines) {
             if (statementSql.isEmpty()) {
                 statementLineNumber = lineNumber;
             } else {
-                statementSql += " ";
+                statementSql += "\n";
             }
             statementSql += line;
 
+            String statementSqlWithoutLineBreaks = statementSql.replaceAll("\n", " ");
             String oldDelimiter = delimiter;
-            delimiter = changeDelimiterIfNecessary(statementSql, line, delimiter);
+            delimiter = changeDelimiterIfNecessary(statementSqlWithoutLineBreaks, line, delimiter);
             if (!ObjectUtils.nullSafeEquals(delimiter, oldDelimiter)) {
                 if (isDelimiterChangeExplicit()) {
                     statementSql = "";

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/sql/SqlScriptSmallTest.java
Patch:
@@ -83,6 +83,6 @@ public void linesToStatements() {
 
         SqlStatement sqlStatement = sqlStatements.get(0);
         assertEquals(1, sqlStatement.getLineNumber());
-        assertEquals("select col1, col2 from mytable where col1 > 10", sqlStatement.getSql());
+        assertEquals("select col1, col2\nfrom mytable\nwhere col1 > 10", sqlStatement.getSql());
     }
 }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleSqlScript.java
Patch:
@@ -37,8 +37,7 @@ public OracleSqlScript(String sqlScriptSource, PlaceholderReplacer placeholderRe
     @Override
     protected String changeDelimiterIfNecessary(String statement, String line, String delimiter) {
         String upperCaseLine = line.toUpperCase();
-
-        if (upperCaseLine.startsWith("DECLARE") || upperCaseLine.startsWith("BEGIN")) {
+        if (upperCaseLine.matches("(?i)DECLARE|(?i)DECLARE\\s.*") || upperCaseLine.matches("(?i)BEGIN|(?i)BEGIN\\s.*")) {
             return "/";
         }
 

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractFlywayMojo.java
Patch:
@@ -113,7 +113,6 @@ public final void execute() throws MojoExecutionException, MojoFailureException
         MavenLogAppender.startPluginLog(this);
         try {
             Flyway flyway = new Flyway();
-            flyway.setDataSource(createDataSource());
 
             if (schemaMetaDataTable != null) {
                 flyway.setTable(schemaMetaDataTable);
@@ -122,6 +121,8 @@ public final void execute() throws MojoExecutionException, MojoFailureException
                 flyway.setTable(table);
             }
 
+            flyway.setDataSource(createDataSource());
+
             doExecute(flyway);
         } catch (Exception e) {
             LOG.error(e.toString());

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractMigrationLoadingMojo.java
Patch:
@@ -20,6 +20,7 @@
 
 /**
  * Base class for mojos that rely on loading migrations from the classpath.
+ * @phase pre-integration-test
  */
 @SuppressWarnings({"UnusedDeclaration"})
 abstract class AbstractMigrationLoadingMojo extends AbstractFlywayMojo {

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/CleanMojo.java
Patch:
@@ -21,6 +21,7 @@
 /**
  * Maven goal that drops all database object.
  *
+ * @phase pre-integration-test
  * @goal clean
  * @since 0.7
  */

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -158,7 +158,8 @@ public SqlScript createCleanScript() {
      */
     @SuppressWarnings({"unchecked"})
     private List<String> generateDropStatementsForObjectType(String objectType, final String extraArguments) {
-        return jdbcTemplate.query("SELECT object_type, object_name FROM user_objects WHERE object_type = ?",
+        // ignore recycle bin objects
+        return jdbcTemplate.query("SELECT object_type, object_name FROM user_objects WHERE object_type = ? and object_name not like 'BIN$%'",
                 new Object[]{objectType}, new RowMapper() {
                     @Override
                     public String mapRow(ResultSet rs, int rowNum) throws SQLException {

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractMigrationLoadingMojo.java
Patch:
@@ -20,8 +20,6 @@
 
 /**
  * Base class for mojos that rely on loading migrations from the classpath.
- *
- * @execute phase="compile"
  */
 @SuppressWarnings({"UnusedDeclaration"})
 abstract class AbstractMigrationLoadingMojo extends AbstractFlywayMojo {

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/java/BaseJavaMigration.java
Patch:
@@ -43,7 +43,8 @@ protected BaseJavaMigration() {
      * @param description The description for this migration
      */
     protected BaseJavaMigration(String version, String description) {
-        this.schemaVersion = new SchemaVersion(version, description);
+        this.schemaVersion = new SchemaVersion(version);
+        this.description = description;
         initScriptName();
     }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/validation/DbValidator.java
Patch:
@@ -106,7 +106,7 @@ public String validate() {
                 if (!first) {
                     stringBuilder.append(", ");
                 }
-                stringBuilder.append(schemaVersion.getVersion());
+                stringBuilder.append(schemaVersion);
                 first = false;
             }
 
@@ -120,7 +120,7 @@ public String validate() {
 
             if (!appliedMigration.getVersion().equals(classpathMigration.getVersion())) {
                 return String.format("Version mismatch for migration %s: DB=%s, Classpath=%s",
-                        appliedMigration.getScript(), appliedMigration.getVersion().getVersion(), classpathMigration.getVersion().getVersion());
+                        appliedMigration.getScript(), appliedMigration.getVersion(), classpathMigration.getVersion());
 
             }
             if (!appliedMigration.getMigrationType().equals(classpathMigration.getMigrationType())) {

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/oracle/OracleMigrationMediumTest.java
Patch:
@@ -64,8 +64,8 @@ public void migrationsWithPlaceholders() throws Exception {
 
         flyway.migrate();
         SchemaVersion schemaVersion = flyway.status().getVersion();
-        assertEquals("1.1", schemaVersion.getVersion());
-        assertEquals("Populate table", schemaVersion.getDescription());
+        assertEquals("1.1", schemaVersion.toString());
+        assertEquals("Populate table", flyway.status().getDescription());
 
         SimpleJdbcTemplate jdbcTemplate = new SimpleJdbcTemplate(dataSource);
         assertEquals("Mr. T triggered", jdbcTemplate.queryForObject("select name from test_user", String.class));

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/ConcurrentMigrationTestCase.java
Patch:
@@ -65,7 +65,7 @@ public void setUp() {
 		flyway.setDataSource(concurrentMigrationDataSource);
 		flyway.setBaseDir(getBaseDir());
         flyway.clean();
-        flyway.init(null);
+        flyway.init(null, null);
     }
 
 	@Test
@@ -99,8 +99,8 @@ public void run() {
 		assertFalse(failed);
 		assertEquals(4, flyway.history().size());
 		SchemaVersion schemaVersion = flyway.status().getVersion();
-		assertEquals("2.0", schemaVersion.getVersion());
-		assertEquals("Add foreign key", schemaVersion.getDescription());
+		assertEquals("2.0", schemaVersion.toString());
+		assertEquals("Add foreign key", flyway.status().getDescription());
 		assertEquals(0, flyway.migrate());
 	}
 }

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/java/BaseJavaMigrationSmallTest.java
Patch:
@@ -28,7 +28,7 @@ public class BaseJavaMigrationSmallTest {
     @Test
     public void version() {
         Migration migration = new V1_2_3__Dummy_migration();
-        assertEquals("1.2.3", migration.getVersion().getVersion());
-        assertEquals("Dummy migration", migration.getVersion().getDescription());
+        assertEquals("1.2.3", migration.getVersion().toString());
+        assertEquals("Dummy migration", migration.getDescription());
     }
 }

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/InitMojo.java
Patch:
@@ -44,10 +44,10 @@ public class InitMojo extends AbstractFlywayMojo {
 
     @Override
     protected void doExecute(Flyway flyway) throws Exception {
-        if ((initialVersion == null) && (initialDescription == null)) {
-            flyway.init(null);
+        if (initialVersion == null) {
+            flyway.init(null, initialDescription);
         } else {
-            flyway.init(new SchemaVersion(initialVersion, initialDescription));
+            flyway.init(new SchemaVersion(initialVersion), initialDescription);
         }
     }
 }
\ No newline at end of file

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/MetaDataTableRowDumper.java
Patch:
@@ -55,8 +55,8 @@ public static void dumpMigrations(List<MetaDataTableRow> metaDataTableRows) {
             LOG.info("| No migrations applied yet                                            |");
         } else {
             for (MetaDataTableRow metaDataTableRow : metaDataTableRows) {
-                LOG.info("| " + StringUtils.trimOrPad(metaDataTableRow.getVersion().getVersion(), 11)
-                        + " | " + StringUtils.trimOrPad(metaDataTableRow.getVersion().getDescription(), 22)
+                LOG.info("| " + StringUtils.trimOrPad(metaDataTableRow.getVersion().toString(), 11)
+                        + " | " + StringUtils.trimOrPad(metaDataTableRow.getDescription(), 22)
                         + " | " + StringUtils.trimOrPad(formatInstalledOnDate(metaDataTableRow.getInstalledOn()), 19)
                         + " | " + StringUtils.trimOrPad(metaDataTableRow.getState().name(), 7) + " |");
             }

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/InitMojo.java
Patch:
@@ -30,15 +30,15 @@ public class InitMojo extends AbstractFlywayMojo {
     /**
      * The initial version to put in the database. (default: 0) <br> default property: ${flyway.initialVersion}
      *
-     * @parameter default-value="${flyway.initialVersion}"
+     * @parameter expression="${flyway.initialVersion}"
      */
     private String initialVersion;
 
     /**
      * The description of the initial version. (default: << Flyway Init >>)<br> default property:
      * ${flyway.initialDescription}
      *
-     * @parameter default-value="${flyway.initialDescription}"
+     * @parameter expression="${flyway.initialDescription}"
      */
     private String initialDescription;
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/ConcurrentMigrationTestCase.java
Patch:
@@ -65,7 +65,7 @@ public void setUp() {
 		flyway.setDataSource(concurrentMigrationDataSource);
 		flyway.setBaseDir(getBaseDir());
         flyway.clean();
-        flyway.init(SchemaVersion.createInitialVersion(null, null));
+        flyway.init(null);
     }
 
 	@Test

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/MigrationTestCase.java
Patch:
@@ -146,15 +146,15 @@ public void failedMigration() throws Exception {
 
     @Test
     public void tableExists() throws Exception {
-        flyway.init(SchemaVersion.createInitialVersion(null, null));
+        flyway.init(null);
         assertTrue(getDbSupport().tableExists(new JdbcTemplate(migrationDataSource), "SCHEMA_VERSION"));
     }
 
     @Test
     public void columnExists() throws Exception {
         JdbcTemplate jdbcTemplate = new JdbcTemplate(migrationDataSource);
 
-        flyway.init(SchemaVersion.createInitialVersion(null, null));
+        flyway.init(null);
         assertTrue(getDbSupport().columnExists(jdbcTemplate, "SCHEMA_VERSION", "DESCRIPTION"));
         assertFalse(getDbSupport().columnExists(jdbcTemplate, "SCHEMA_VERSION", "INVALID"));
     }

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractMigrationLoadingMojo.java
Patch:
@@ -21,11 +21,9 @@
 /**
  * Base class for mojos that rely on loading migrations from the classpath.
  *
- * @requiresDependencyResolution compile
- * @configurator include-project-dependencies
  * @execute phase="compile"
  */
-public class AbstractMigrationLoadingMojo extends AbstractFlywayMojo {
+abstract class AbstractMigrationLoadingMojo extends AbstractFlywayMojo {
     /**
      * The base package where the Java migrations are located. (default: db.migration) <br>
      * Also configurable with Maven or System Property: ${flyway.basePackage}

File: flyway-core/src/main/java/com/googlecode/flyway/core/metadatatable/MetaDataTable.java
Patch:
@@ -145,7 +145,7 @@ public void insert(final MetaDataTableRow metaDataTableRow) {
         final String scriptName = metaDataTableRow.getScript();
         final Integer executionTime = metaDataTableRow.getExecutionTime();
         jdbcTemplate.update("INSERT INTO " + tableName
-                + " (version, description, migration_type, script, checksum, installed_by, execution_time, state, current_version)"
+                + " (version, description, type, script, checksum, installed_by, execution_time, state, current_version)"
                 + " VALUES (?, ?, ?, ?, ?, " + dbSupport.getCurrentUserFunction() + ", ?, ?, 1)",
                 new Object[]{version, description, migrationType, scriptName, checksum, executionTime, state});
     }
@@ -206,7 +206,7 @@ public List<MetaDataTableRow> allAppliedMigrations() {
      * @return The select statement for reading the metadata table.
      */
     private String getSelectStatement() {
-        return "select VERSION, DESCRIPTION, SCRIPT, EXECUTION_TIME, STATE, INSTALLED_ON, CHECKSUM, MIGRATION_TYPE from " + tableName;
+        return "select VERSION, DESCRIPTION, TYPE, SCRIPT, CHECKSUM, INSTALLED_ON, EXECUTION_TIME, STATE from " + tableName;
     }
 
     /**
@@ -230,7 +230,7 @@ private class MetaDataTableRowMapper implements RowMapper {
         @Override
         public MetaDataTableRow mapRow(final ResultSet rs, int rowNum) throws SQLException {
             SchemaVersion schemaVersion = new SchemaVersion(rs.getString("VERSION"), rs.getString("DESCRIPTION"));
-            MigrationType migrationType = MigrationType.valueOf(rs.getString("MIGRATION_TYPE"));
+            MigrationType migrationType = MigrationType.valueOf(rs.getString("TYPE"));
             String script = rs.getString("SCRIPT");
             Integer checksum = toInteger((Number) rs.getObject("CHECKSUM"));
             Date installedOn = rs.getTimestamp("INSTALLED_ON");

File: flyway-core/src/main/java/com/googlecode/flyway/core/runtime/DbMigrator.java
Patch:
@@ -166,7 +166,7 @@ public MetaDataTableRow doInTransaction(TransactionStatus status) {
     public final MetaDataTableRow applyMigration(final Migration migration, final TransactionTemplate transactionTemplate, final JdbcTemplate jdbcTemplate, final DbSupport dbSupport) {
         MetaDataTableRow metaDataTableRow = new MetaDataTableRow(migration);
 
-        LOG.info("Migrating to version " + migration.getVersion() + " - " + migration.getScript());
+        LOG.info("Migrating to version " + migration.getVersion());
 
         StopWatch stopWatch = new StopWatch();
         stopWatch.start();
@@ -196,8 +196,8 @@ public void run() {
         if (MigrationState.FAILED.equals(migrationRunnable.state) && dbSupport.supportsDdlTransactions()) {
             throw new IllegalStateException("Migration failed! Changes rolled back. Aborting!");
         }
-        LOG.info(String.format("Finished migrating to version %s - %s (execution time %s)",
-                migration.getVersion(), migration.getScript(), TimeFormat.format(executionTime)));
+        LOG.info(String.format("Finished migrating to version %s (execution time %s)",
+                migration.getVersion(), TimeFormat.format(executionTime)));
 
         metaDataTableRow.update(executionTime, migrationRunnable.state);
         metaDataTable.insert(metaDataTableRow);

File: flyway-core/src/main/java/com/googlecode/flyway/core/ValidationType.java
Patch:
@@ -54,7 +54,7 @@ private ValidationType(String code) {
     public static ValidationType fromCode(String code) {
         final ValidationType[] types = ValidationType.values();
         for (ValidationType type : types) {
-            if (type.code.equals(code)) {
+            if (type.code.equalsIgnoreCase(code)) {
                 return type;
             }
         }

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/CleanMojo.java
Patch:
@@ -28,9 +28,7 @@
  */
 public class CleanMojo extends AbstractFlywayMojo {
     @Override
-    protected void doExecute() throws Exception {
-        Flyway flyway = new Flyway();
-        flyway.setDataSource(getDataSource());
+    protected void doExecute(Flyway flyway) throws Exception {
         flyway.clean();
     }
 }
\ No newline at end of file

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/HistoryMojo.java
Patch:
@@ -33,9 +33,7 @@
 @SuppressWarnings({"UnusedDeclaration"})
 public class HistoryMojo extends AbstractFlywayMojo {
     @Override
-    protected void doExecute() throws MojoExecutionException {
-        Flyway flyway = new Flyway();
-        flyway.setDataSource(getDataSource());
+    protected void doExecute(Flyway flyway) throws MojoExecutionException {
         List<Migration> migrations = flyway.history();
         MigrationDumper.dumpMigrations(migrations);
     }

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/InitMojo.java
Patch:
@@ -46,9 +46,7 @@ public class InitMojo extends AbstractFlywayMojo {
     private String initialDescription;
 
     @Override
-    protected void doExecute() throws Exception {
-        Flyway flyway = new Flyway();
-        flyway.setDataSource(getDataSource());
+    protected void doExecute(Flyway flyway) throws Exception {
         flyway.init(SchemaVersion.createInitialVersion(initialVersion, initialDescription));
     }
 }
\ No newline at end of file

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/StatusMojo.java
Patch:
@@ -34,9 +34,7 @@
 @SuppressWarnings({"UnusedDeclaration"})
 public class StatusMojo extends AbstractFlywayMojo {
     @Override
-    protected void doExecute() throws MojoExecutionException {
-        Flyway flyway = new Flyway();
-        flyway.setDataSource(getDataSource());
+    protected void doExecute(Flyway flyway) throws MojoExecutionException {
         Migration migration = flyway.status();
 
         List<Migration> migrations = new ArrayList<Migration>();

File: flyway-sample/src/main/java/com/googlecode/flyway/sample/migration/V1_2__Another_user.java
Patch:
@@ -17,15 +17,14 @@
 package com.googlecode.flyway.sample.migration;
 
 import com.googlecode.flyway.core.migration.java.BaseJavaMigration;
-import org.springframework.dao.DataAccessException;
 import org.springframework.jdbc.core.JdbcTemplate;
 
 /**
  * Example of a Java-based migration.
  */
 public class V1_2__Another_user extends BaseJavaMigration {
     @Override
-    protected void doMigrateInTransaction(JdbcTemplate jdbcTemplate) throws DataAccessException {
+    protected void doMigrateInTransaction(JdbcTemplate jdbcTemplate) throws Exception {
         jdbcTemplate.execute("INSERT INTO test_user (name) VALUES ('Obelix')");
     }
 }

File: flyway-sample/src/main/java/com/googlecode/flyway/sample/migration/V1_2__Another_user.java
Patch:
@@ -17,15 +17,14 @@
 package com.googlecode.flyway.sample.migration;
 
 import com.googlecode.flyway.core.migration.java.BaseJavaMigration;
-import org.springframework.dao.DataAccessException;
 import org.springframework.jdbc.core.JdbcTemplate;
 
 /**
  * Example of a Java-based migration.
  */
 public class V1_2__Another_user extends BaseJavaMigration {
     @Override
-    protected void doMigrateInTransaction(JdbcTemplate jdbcTemplate) throws DataAccessException {
+    protected void doMigrateInTransaction(JdbcTemplate jdbcTemplate) throws Exception {
         jdbcTemplate.execute("INSERT INTO test_user (name) VALUES ('Obelix')");
     }
 }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -86,9 +86,9 @@ public SqlScript createCleanScript(JdbcTemplate jdbcTemplate) {
         allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "PACKAGE", ""));
         allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "PROCEDURE", ""));
         allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "SYNONYM", ""));
+        allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "VIEW", ""));
         allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "TABLE", "CASCADE CONSTRAINTS PURGE"));
         allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "TYPE", ""));
-        allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "VIEW", ""));
         allDropStatements.addAll(generateDropStatementsForSpatialExtensions(jdbcTemplate));
 
         List<SqlStatement> sqlStatements = new ArrayList<SqlStatement>();

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/ResourceUtils.java
Patch:
@@ -182,7 +182,7 @@ public static void closeQuietly(Reader reader) {
         }
     }
 
-    public static long calculateChecksum(String source) {
+    public static Long calculateChecksum(String source) {
         final CRC32 crc32 = new CRC32();
         crc32.update(source.getBytes());
         return crc32.getValue();

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractFlywayMojo.java
Patch:
@@ -34,7 +34,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
     /**
      * Logger.
      */
-    private static final Log LOG = LogFactory.getLog(AbstractFlywayMojo.class);
+    protected static final Log LOG = LogFactory.getLog(AbstractFlywayMojo.class);
 
     /**
      * The fully qualified classname of the jdbc driver to use to connect to the database.<br>
@@ -99,6 +99,7 @@ public final void execute() throws MojoExecutionException, MojoFailureException
 
     /**
      * @see org.apache.maven.plugin.AbstractMojo#execute()
+     * @throws Exception any exception
      */
     protected abstract void doExecute() throws Exception;
 }

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/sql/SqlMigration.java
Patch:
@@ -47,6 +47,7 @@ public class SqlMigration extends BaseMigration {
      *
      * @param sqlScriptResource   The resource containing the sql script.
      * @param placeholderReplacer The placeholder replacer to apply to sql migration scripts.
+     * @param versionString The migration name in standard Flyway format '<VERSION>__<DESCRIPTION>, e.g. 1_2__Description
      * @param encoding            The encoding of this Sql migration.
      */
     public SqlMigration(Resource sqlScriptResource, PlaceholderReplacer placeholderReplacer, String encoding, String versionString) {
@@ -62,6 +63,7 @@ public SqlMigration(Resource sqlScriptResource, PlaceholderReplacer placeholderR
     public void doMigrate(TransactionTemplate transactionTemplate, JdbcTemplate jdbcTemplate, DbSupport dbSupport) {
         String sqlScriptSource = ResourceUtils.loadResourceAsString(sqlScriptResource, encoding);
         SqlScript sqlScript = dbSupport.createSqlScript(sqlScriptSource, placeholderReplacer);
+        checksum = sqlScript.getChecksum();
         sqlScript.execute(transactionTemplate, jdbcTemplate);
     }
 }

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/BaseMigrationSmallTest.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.googlecode.flyway.core.migration;
 
-import com.googlecode.flyway.core.migration.BaseMigration;
-import com.googlecode.flyway.core.migration.SchemaVersion;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
@@ -63,7 +61,7 @@ public void extractSchemaVersionWithDescriptionWithSpaces() {
     @Test
     public void extractSchemaVersionWithLeadingZeroes() {
         SchemaVersion schemaVersion = BaseMigration.extractSchemaVersion("009_4__EmailAxel");
-        assertEquals("9.4", schemaVersion.getVersion());
+        assertEquals("009.4", schemaVersion.getVersion());
         assertEquals("EmailAxel", schemaVersion.getDescription());
     }
 }

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/sql/SqlScriptSmallTest.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.googlecode.flyway.core.migration.sql;
 
-import com.googlecode.flyway.core.migration.sql.SqlScript;
-import com.googlecode.flyway.core.migration.sql.SqlStatement;
 import org.junit.Test;
 
 import java.util.ArrayList;
@@ -30,6 +28,7 @@
  * Test for SqlScript.
  */
 public class SqlScriptSmallTest {
+
     /**
      * Class under test.
      */

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/ConcurrentMigrationTestCase.java
Patch:
@@ -66,7 +66,7 @@ public void setUp() {
 		flyway.setDataSource(concurrentMigrationDataSource);
 		flyway.setBaseDir(getBaseDir());
         flyway.clean();
-        flyway.init(null);
+        flyway.init(SchemaVersion.createInitialVersion(null, null));
     }
 
 	@Test

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -86,9 +86,9 @@ public SqlScript createCleanScript(JdbcTemplate jdbcTemplate) {
         allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "PACKAGE", ""));
         allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "PROCEDURE", ""));
         allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "SYNONYM", ""));
+        allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "VIEW", ""));
         allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "TABLE", "CASCADE CONSTRAINTS PURGE"));
         allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "TYPE", ""));
-        allDropStatements.addAll(generateDropStatementsForObjectType(jdbcTemplate, "VIEW", ""));
         allDropStatements.addAll(generateDropStatementsForSpatialExtensions(jdbcTemplate));
 
         List<SqlStatement> sqlStatements = new ArrayList<SqlStatement>();

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/AbstractFlywayMojo.java
Patch:
@@ -34,7 +34,7 @@ abstract class AbstractFlywayMojo extends AbstractMojo {
     /**
      * Logger.
      */
-    private static final Log LOG = LogFactory.getLog(AbstractFlywayMojo.class);
+    protected static final Log LOG = LogFactory.getLog(AbstractFlywayMojo.class);
 
     /**
      * The fully qualified classname of the jdbc driver to use to connect to the database.<br>

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -27,8 +27,6 @@
 import com.googlecode.flyway.core.runtime.DbCleaner;
 import com.googlecode.flyway.core.runtime.DbMigrator;
 import com.googlecode.flyway.core.runtime.MetaDataTable;
-import com.googlecode.flyway.core.util.StringUtils;
-import com.googlecode.flyway.core.util.TimeFormat;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.springframework.jdbc.core.JdbcTemplate;

File: flyway-core/src/main/java/com/googlecode/flyway/core/migration/java/BaseJavaMigration.java
Patch:
@@ -27,14 +27,15 @@
 
 /**
  * Base class for java migration classes whose name conforms to the Flyway
- * standard.
+ * standard. Example: V1_2__Change_values
  */
 public abstract class BaseJavaMigration extends BaseMigration {
     /**
      * Initializes this Migration with this standard Flyway name.
      */
     protected BaseJavaMigration() {
-        initVersion(ClassUtils.getShortName(getClass()));
+        String nameWithoutV = ClassUtils.getShortName(getClass()).substring(1);
+        initVersion(nameWithoutV);
         scriptName = "Java Class: " + ClassUtils.getShortName(getClass());
     }
 

File: flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java
Patch:
@@ -220,6 +220,8 @@ public void setDataSource(DataSource dataSource) {
      * @throws Exception Thrown when the migration failed.
      */
     public int migrate() throws Exception {
+        metaDataTable.createIfNotExists();
+
         PlaceholderReplacer placeholderReplacer = new PlaceholderReplacer(placeholders, placeholderPrefix, placeholderSuffix);
 
         Collection<MigrationResolver> migrationResolvers = new ArrayList<MigrationResolver>();
@@ -291,6 +293,7 @@ private void dumpMigrations(List<Migration> migrations) {
      *                       higher than this one will be considered for this database.
      */
     public void init(SchemaVersion initialVersion) {
+        metaDataTable.createIfNotExists();
         metaDataTable.init(initialVersion);
     }
 }

File: flyway-core/src/main/java/com/googlecode/flyway/core/runtime/DbCleaner.java
Patch:
@@ -34,7 +34,7 @@ public class DbCleaner {
     /**
      * Logger.
      */
-    private static final Log LOG = LogFactory.getLog(DbMigrator.class);
+    private static final Log LOG = LogFactory.getLog(DbCleaner.class);
 
     /**
      * Database-specific functionality.

File: flyway-core/src/test/java/com/googlecode/flyway/core/migration/sql/SqlMigrationResolverSmallTest.java
Patch:
@@ -23,13 +23,13 @@
 /**
  * Testcase for SqlMigration.
  */
-public class SqlMigrationSmallTest {
+public class SqlMigrationResolverSmallTest {
     /**
      * Test for extractVersionStringFromFileName.
      */
     @Test
     public void extractVersionStringFromFileName() {
-        assertEquals("V8_0", SqlMigration.extractVersionStringFromFileName("sql/V8_0.sql"));
-        assertEquals("V9_0__CommentAboutContents", SqlMigration.extractVersionStringFromFileName("sql/V9_0__CommentAboutContents.sql"));
+        assertEquals("8_0", SqlMigrationResolver.extractVersionStringFromFileName("sql/V8_0.sql", "V", ".sql"));
+        assertEquals("9_0__CommentAboutContents", SqlMigrationResolver.extractVersionStringFromFileName("sql/V9_0__CommentAboutContents.sql", "V", ".sql"));
     }
 }

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/h2/H2DbSupport.java
Patch:
@@ -28,7 +28,6 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.ArrayList;
-import java.util.Map;
 
 /**
  * H2 database specific support

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/hsql/HsqlDbSupport.java
Patch:
@@ -28,7 +28,6 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.ArrayList;
-import java.util.Map;
 
 /**
  * HsqlDb-specific support

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLDbSupport.java
Patch:
@@ -84,7 +84,7 @@ public SqlScript createSqlScript(String sqlScriptSource, PlaceholderReplacer pla
 
     @Override
     public SqlScript createCleanScript(JdbcTemplate jdbcTemplate) {
-        List<Map<String, String>> tableNames =
+        @SuppressWarnings({"unchecked"}) List<Map<String, String>> tableNames =
                 jdbcTemplate.queryForList(
                         "SELECT table_name FROM information_schema.tables WHERE table_schema=? AND table_type='BASE TABLE'",
                         new Object[]{getCurrentSchema(jdbcTemplate)});

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -30,7 +30,6 @@
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 
 /**
  * Oracle-specific support.
@@ -124,10 +123,9 @@ public String mapRow(ResultSet rs, int rowNum) throws SQLException {
     /**
      * Generates the drop statements for Oracle Spatial Extensions-related database objects.
      *
-     * @param jdbcTemplate   The jdbc template to use to query the database.
+     * @param jdbcTemplate The jdbc template to use to query the database.
      * @return The complete drop statements, ready to execute.
      */
-    @SuppressWarnings({"unchecked"})
     private List<String> generateDropStatementsForSpatialExtensions(JdbcTemplate jdbcTemplate) {
         List<String> statements = new ArrayList<String>();
 

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/oracle/OracleMigrationMediumTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.googlecode.flyway.core.dbsupport.oracle;
 
-import com.googlecode.flyway.core.util.DestroyableSimpleDriverDataSource;
 import com.googlecode.flyway.core.Flyway;
 import com.googlecode.flyway.core.migration.SchemaVersion;
 import org.junit.Before;
@@ -28,7 +27,6 @@
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 import javax.sql.DataSource;
-
 import java.util.HashMap;
 import java.util.Map;
 
@@ -83,7 +81,7 @@ public void migrationsWithPlaceholders() throws Exception {
     public void cleanSpatialExtensions() throws Exception {
         flyway.setBaseDir("migration/oracle/sql/spatial");
         flyway.migrate();
-        
+
         flyway.clean();
 
         // Running migrate again on an unclean database, triggers duplicate object exceptions.

File: flyway-core/src/test/java/com/googlecode/flyway/core/runtime/DbCreator.java
Patch:
@@ -25,7 +25,6 @@
 import javax.annotation.PostConstruct;
 import javax.annotation.PreDestroy;
 import javax.sql.DataSource;
-import java.util.HashMap;
 
 /**
  * Utility for creating and dropping database schemas and users.

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/h2/H2DbSupport.java
Patch:
@@ -17,6 +17,7 @@
 package com.googlecode.flyway.core.dbsupport.h2;
 
 import com.googlecode.flyway.core.dbsupport.DbSupport;
+import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.runtime.SqlScript;
 import com.googlecode.flyway.core.runtime.SqlStatement;
 import org.springframework.dao.DataAccessException;
@@ -82,8 +83,8 @@ public boolean supportsLocking() {
     }
 
     @Override
-    public SqlScript createSqlScript(String sqlScriptSource, Map<String, String> placeholders) {
-        return new SqlScript(sqlScriptSource, placeholders);
+    public SqlScript createSqlScript(String sqlScriptSource, PlaceholderReplacer placeholderReplacer) {
+        return new SqlScript(sqlScriptSource, placeholderReplacer);
     }
 
     @Override

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/hsql/HsqlDbSupport.java
Patch:
@@ -17,6 +17,7 @@
 package com.googlecode.flyway.core.dbsupport.hsql;
 
 import com.googlecode.flyway.core.dbsupport.DbSupport;
+import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.runtime.SqlScript;
 import com.googlecode.flyway.core.runtime.SqlStatement;
 import org.springframework.dao.DataAccessException;
@@ -82,8 +83,8 @@ public boolean supportsLocking() {
     }
 
     @Override
-    public SqlScript createSqlScript(String sqlScriptSource, Map<String, String> placeholders) {
-        return new SqlScript(sqlScriptSource, placeholders);
+    public SqlScript createSqlScript(String sqlScriptSource, PlaceholderReplacer placeholderReplacer) {
+        return new SqlScript(sqlScriptSource, placeholderReplacer);
     }
 
     @Override

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/mysql/MySQLDbSupport.java
Patch:
@@ -17,6 +17,7 @@
 package com.googlecode.flyway.core.dbsupport.mysql;
 
 import com.googlecode.flyway.core.dbsupport.DbSupport;
+import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.runtime.SqlScript;
 import com.googlecode.flyway.core.runtime.SqlStatement;
 import org.springframework.dao.DataAccessException;
@@ -77,8 +78,8 @@ public boolean supportsLocking() {
     }
 
     @Override
-    public SqlScript createSqlScript(String sqlScriptSource, Map<String, String> placeholders) {
-        return new SqlScript(sqlScriptSource, placeholders);
+    public SqlScript createSqlScript(String sqlScriptSource, PlaceholderReplacer placeholderReplacer) {
+        return new SqlScript(sqlScriptSource, placeholderReplacer);
     }
 
     @Override

File: flyway-core/src/main/java/com/googlecode/flyway/core/dbsupport/oracle/OracleDbSupport.java
Patch:
@@ -17,6 +17,7 @@
 package com.googlecode.flyway.core.dbsupport.oracle;
 
 import com.googlecode.flyway.core.dbsupport.DbSupport;
+import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.runtime.SqlScript;
 import com.googlecode.flyway.core.runtime.SqlStatement;
 import org.springframework.dao.DataAccessException;
@@ -73,8 +74,8 @@ public boolean supportsLocking() {
     }
 
     @Override
-    public SqlScript createSqlScript(String sqlScriptSource, Map<String, String> placeholders) {
-        return new OracleSqlScript(sqlScriptSource, placeholders);
+    public SqlScript createSqlScript(String sqlScriptSource, PlaceholderReplacer placeholderReplacer) {
+        return new OracleSqlScript(sqlScriptSource, placeholderReplacer);
     }
 
     @Override

File: flyway-core/src/main/java/com/googlecode/flyway/core/runtime/MetaDataTable.java
Patch:
@@ -20,6 +20,7 @@
 import com.googlecode.flyway.core.migration.Migration;
 import com.googlecode.flyway.core.migration.MigrationState;
 import com.googlecode.flyway.core.migration.SchemaVersion;
+import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.util.ResourceUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -102,8 +103,9 @@ private void create() {
 
         Map<String, String> placeholders = new HashMap<String, String>();
         placeholders.put("tableName", tableName);
+        PlaceholderReplacer placeholderReplacer = new PlaceholderReplacer(placeholders, "${", "}");
 
-        SqlScript sqlScript = new SqlScript(createMetaDataTableScriptSource, placeholders);
+        SqlScript sqlScript = new SqlScript(createMetaDataTableScriptSource, placeholderReplacer);
         sqlScript.execute(transactionTemplate, jdbcTemplate);
         LOG.info("Metadata table created: " + tableName);
     }

File: flyway-core/src/test/java/com/googlecode/flyway/core/dbsupport/oracle/OracleSqlScriptSmallTest.java
Patch:
@@ -16,14 +16,14 @@
 
 package com.googlecode.flyway.core.dbsupport.oracle;
 
+import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.runtime.SqlStatement;
 import org.junit.Test;
 import org.springframework.core.io.ClassPathResource;
 import org.springframework.util.FileCopyUtils;
 
 import java.io.InputStreamReader;
 import java.nio.charset.Charset;
-import java.util.HashMap;
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
@@ -36,7 +36,7 @@ public class OracleSqlScriptSmallTest {
     public void testSqlStatements() throws Exception {
         String source = FileCopyUtils.copyToString(new InputStreamReader(new ClassPathResource("migration/oracle/sql/placeholders/V1.sql").getInputStream(), Charset.forName("UTF-8")));
 
-        OracleSqlScript sqlScript = new OracleSqlScript(source, new HashMap<String, String>());
+        OracleSqlScript sqlScript = new OracleSqlScript(source, PlaceholderReplacer.NO_PLACEHOLDERS);
         List<SqlStatement> sqlStatements = sqlScript.getSqlStatements();
         assertEquals(3, sqlStatements.size());
         assertEquals(18, sqlStatements.get(0).getLineNumber());

File: flyway-core/src/test/java/com/googlecode/flyway/core/runtime/DbCreator.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.googlecode.flyway.core.runtime;
 
+import com.googlecode.flyway.core.migration.sql.PlaceholderReplacer;
 import com.googlecode.flyway.core.util.ResourceUtils;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.jdbc.datasource.DataSourceTransactionManager;
@@ -60,7 +61,7 @@ public void setBaseDir(String baseDir) {
     @PostConstruct
     public void createDatabase() {
         SqlScript sqlScript =
-                new SqlScript(ResourceUtils.loadResourceAsString(baseDir + "/createDatabase.sql"), new HashMap<String, String>());
+                new SqlScript(ResourceUtils.loadResourceAsString(baseDir + "/createDatabase.sql"), PlaceholderReplacer.NO_PLACEHOLDERS);
         sqlScript.execute(new TransactionTemplate(new DataSourceTransactionManager(rootDataSource)), new JdbcTemplate(rootDataSource));
     }
 
@@ -70,7 +71,7 @@ public void createDatabase() {
     @PreDestroy
     public void dropDatabase() {
         SqlScript sqlScript =
-                new SqlScript(ResourceUtils.loadResourceAsString(baseDir + "/dropDatabase.sql"), new HashMap<String, String>());
+                new SqlScript(ResourceUtils.loadResourceAsString(baseDir + "/dropDatabase.sql"), PlaceholderReplacer.NO_PLACEHOLDERS);
         sqlScript.execute(new TransactionTemplate(new DataSourceTransactionManager(rootDataSource)), new JdbcTemplate(rootDataSource));
     }
 }

File: flyway-core/src/main/java/com/googlecode/flyway/core/util/StringUtils.java
Patch:
@@ -36,7 +36,7 @@ private StringUtils() {
      */
     public static String trimOrPad(String str, int length) {
         if (str.length() > length) {
-            return str.substring(length);
+            return str.substring(0, length);
         }
 
         String result = str;

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/CleanMojo.java
Patch:
@@ -28,9 +28,8 @@
  * @since 0.7
  */
 public class CleanMojo extends AbstractFlywayMojo {
-
     @Override
-    public void execute() throws MojoExecutionException {
+    protected void doExecute() throws MojoExecutionException {
         try {
             Flyway flyway = new Flyway();
             flyway.setDataSource(getDataSource());

File: flyway-maven-plugin/src/main/java/com/googlecode/flyway/maven/MigrateMojo.java
Patch:
@@ -59,7 +59,7 @@ public class MigrateMojo extends AbstractFlywayMojo {
     private Map<String, String> placeholders;
 
     @Override
-    public void execute() throws MojoExecutionException {
+    protected void doExecute() throws MojoExecutionException {
         try {
             Flyway flyway = new Flyway();
             flyway.setDataSource(getDataSource());

File: flyway-core/src/main/java/com/google/code/flyway/core/dbsupport/mysql/MySQLDbSupport.java
Patch:
@@ -40,7 +40,7 @@
 public class MySQLDbSupport implements DbSupport {
     @Override
     public SqlScript createCreateMetaDataTableScript(String tableName) {
-    	Resource resource = new ClassPathResource("com/google/code/flyway/core/dbsupport/oracle/createMetaDataTable.sql");
+    	Resource resource = new ClassPathResource("com/google/code/flyway/core/dbsupport/mysql/createMetaDataTable.sql");
     	
     	Map<String, String> placeholders = new HashMap<String, String>();
     	placeholders.put("tableName", tableName);

File: flyway-core/src/main/java/com/google/code/flyway/core/MetaDataTable.java
Patch:
@@ -151,7 +151,7 @@ public void doMigrate(SimpleJdbcTemplate jdbcTemplate) {
 				schemaVersion = new SchemaVersion((String) result.get(0).get("VERSION"), (String) result.get(0).get(
 						"DESCRIPTION"));
 				migrationState = MigrationState.valueOf((String) result.get(0).get("STATE"));
-				executionTime = (Integer) result.get(0).get("EXECUTION_TIME");
+				executionTime = ((Number) result.get(0).get("EXECUTION_TIME")).intValue();
 				scriptName = (String) result.get(0).get("SCRIPT");
 			}
 

File: flyway-sample/src/main/java/com/google/code/flyway/sample/Main.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.google.code.flyway.sample;
 
-import com.google.code.flyway.core.Flyway;
+import javax.sql.DataSource;
+
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.jdbc.datasource.SimpleDriverDataSource;
 
-import javax.sql.DataSource;
-import java.util.List;
+import com.google.code.flyway.core.Flyway;
 
 /**
  * Simplest possible sample to demonstrate the usage of Flyway.

File: flyway-core/src/main/java/com/google/code/flyway/core/Flyway.java
Patch:
@@ -139,16 +139,17 @@ public void setDataSource(DataSource dataSource) {
     /**
      * Starts the database migration.
      *
+     * @return The number of successfully applied migrations.
      * @throws Exception Thrown when the migration failed.
      */
-    public void migrate() throws Exception {
+    public int migrate() throws Exception {
         Collection<MigrationResolver> migrationResolvers = new ArrayList<MigrationResolver>();
         migrationResolvers.add(new SqlMigrationResolver(baseDir, placeholders, dbSupport));
         migrationResolvers.add(new JavaMigrationResolver(basePackage));
 
         DbMigrator dbMigrator =
                 new DbMigrator(transactionTemplate, jdbcTemplate, dbSupport, migrationResolvers, metaDataTable);
-        dbMigrator.migrate();
+        return dbMigrator.migrate();
     }
 
     /**

File: flyway-core/src/main/java/com/google/code/flyway/core/sql/SqlMigrationResolver.java
Patch:
@@ -93,8 +93,7 @@ public Collection<Migration> resolvesMigrations() {
         try {
                 Resource[] resources = pathMatchingResourcePatternResolver.getResources("classpath:" + baseDir + "/V?*.sql");
                 for (Resource resource : resources) {
-                    SqlScript sqlScript = dbSupport.createSqlScript(resource, placeholders);
-                    migrations.add(new SqlMigration(sqlScript));
+                    migrations.add(new SqlMigration(resource, placeholders, dbSupport));
                 }
         } catch (IOException e) {
             log.error("Error loading sql migration files", e);

File: flyway-core/src/test/java/com/google/code/flyway/core/mysql/MySQLMediumTest.java
Patch:
@@ -41,7 +41,7 @@ public class MySQLMediumTest {
 
     @Test
     public void createAndMigrate() throws SQLException {
-        SchemaVersion schemaVersion = flyway.getMetaDataTable().currentSchemaVersion();
+        SchemaVersion schemaVersion = flyway.getMetaDataTable().latestAppliedMigration().getVersion();
         Assert.assertEquals("1.1", schemaVersion.getVersion());
         Assert.assertEquals("Populate table", schemaVersion.getDescription());
         assertTrue(flyway.getMetaDataTable().exists());

File: flyway-core/src/test/java/com/google/code/flyway/core/oracle/OracleMediumTest.java
Patch:
@@ -48,7 +48,7 @@ public class OracleMediumTest {
 
     @Test
     public void createAndMigrate() throws SQLException {
-        SchemaVersion schemaVersion = flyway.getMetaDataTable().currentSchemaVersion();
+        SchemaVersion schemaVersion = flyway.getMetaDataTable().latestAppliedMigration().getVersion();
         assertEquals("1.1", schemaVersion.getVersion());
         assertEquals("Populate table", schemaVersion.getDescription());
         assertTrue(flyway.getMetaDataTable().exists());

File: flyway-sample/src/main/java/com/google/code/flyway/sample/Main.java
Patch:
@@ -34,7 +34,7 @@ public class Main {
      */
     public static void main(String[] args) throws Exception {
         DataSource dataSource =
-                new SimpleDriverDataSource(new org.hsqldb.jdbcDriver(), "jdbc:hsqldb:mem:flyway_sample", "SA", "");
+                new SimpleDriverDataSource(new org.hsqldb.jdbcDriver(), "jdbc:hsqldb:file:db/flyway_sample;shutdown=true", "SA", "");
         Flyway flyway = new Flyway();
         flyway.setDataSource(dataSource);
         flyway.migrate();

File: flyway-core/src/main/java/com/google/code/flyway/core/MetaDataTable.java
Patch:
@@ -79,7 +79,7 @@ public boolean exists() throws SQLException {
      * Creates Flyway's metadata table.
      */
     public void create() {
-        transactionTemplate.execute(new TransactionCallback() {
+        transactionTemplate.execute(new TransactionCallback<Object>() {
             @Override
             public Object doInTransaction(TransactionStatus status) {
                 String[] statements = dbSupport.createSchemaMetaDataTableSql(tableName);

File: flyway-core/src/main/java/com/google/code/flyway/core/Migration.java
Patch:
@@ -18,8 +18,6 @@
 
 import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;
 
-import java.sql.SQLException;
-
 /**
  * A migration of a single version of the schema.
  *

File: flyway-core/src/main/java/com/google/code/flyway/core/oracle/OracleDbSupport.java
Patch:
@@ -50,9 +50,9 @@ public String[] createSchemaMetaDataTableSql(String tableName) {
 
     @Override
     public String getCurrentSchema(SimpleJdbcTemplate jdbcTemplate) {
-         return (String) jdbcTemplate.getJdbcOperations().execute(new ConnectionCallback() {
+         return jdbcTemplate.getJdbcOperations().execute(new ConnectionCallback<String>() {
             @Override
-            public Object doInConnection(Connection connection) throws SQLException, DataAccessException {
+            public String doInConnection(Connection connection) throws SQLException, DataAccessException {
                 return connection.getMetaData().getUserName();
             }
         });

File: flyway-core/src/test/java/com/google/code/flyway/core/oracle/OracleSqlScriptTest.java
Patch:
@@ -34,8 +34,10 @@ public void testSqlStatements() {
         OracleSqlScript sqlScript =
                 new OracleSqlScript(new ClassPathResource("migration/oracle/sql/V1.sql"), new HashMap<String, String>());
         List<SqlStatement> sqlStatements = sqlScript.getSqlStatements();
-        assertEquals(2, sqlStatements.size());
+        assertEquals(3, sqlStatements.size());
         assertEquals(18, sqlStatements.get(0).getLineNumber());
         assertEquals(27, sqlStatements.get(1).getLineNumber());
+        assertEquals(32, sqlStatements.get(2).getLineNumber());
+        assertEquals("COMMIT", sqlStatements.get(2).getSql());
     }
 }

File: flyway-core/src/main/java/com/google/code/flyway/core/DbMigrator.java
Patch:
@@ -72,9 +72,9 @@ public class DbMigrator {
     private String baseDir = "db/migration";
 
     /**
-     * The name of the schema metadata table that will be used by flyway. (default: schema_maintenance_history)
+     * The name of the schema metadata table that will be used by flyway. (default: schema_version)
      */
-    private String schemaMetaDataTable = "schema_maintenance_history";
+    private String schemaMetaDataTable = "schema_version";
 
     /**
      * The target version of the migration, default is the latest version.

File: flyway-core/src/main/java/com/google/code/flyway/core/dbsupport/OracleDbSupport.java
Patch:
@@ -37,7 +37,7 @@ public String[] createSchemaMetaDataTableSql(String tableName) {
                 "    current_version NUMBER(1) NOT NULL" +
                 ")";
         String addIndexSql =
-                "ALTER TABLE " + tableName + " ADD INDEX " + tableName + "_current_version_index (current_version)";
+                "CREATE INDEX " + tableName + "_cv_idx ON " + tableName + "(current_version)";
 
         return new String[]{createTableSql, addIndexSql};
     }

File: flyway-core/src/test/java/com/google/code/flyway/core/oracle/OracleDbCreator.java
Patch:
@@ -29,17 +29,17 @@
  * Utility for creating and dropping Oracle database schemas and users.
  */
 public class OracleDbCreator {
-@Autowired
+    @Autowired
     @Qualifier("root-simpleJdbcTemplate")
     private SimpleJdbcTemplate rootSimpleJdbcTemplate;
 
     @PostConstruct
     public void createDatabase() {
-        //MigrationUtils.executeSqlScript(rootSimpleJdbcTemplate, new ClassPathResource("migration/oracle/createDatabase.sql"));
+        MigrationUtils.executeSqlScript(rootSimpleJdbcTemplate, new ClassPathResource("migration/oracle/createDatabase.sql"));
     }
 
     @PreDestroy
     public void dropDatabase() {
-        //MigrationUtils.executeSqlScript(rootSimpleJdbcTemplate, new ClassPathResource("migration/oracle/dropDatabase.sql"));
+        MigrationUtils.executeSqlScript(rootSimpleJdbcTemplate, new ClassPathResource("migration/oracle/dropDatabase.sql"));
     }
 }

File: flyway-core/src/main/java/com/google/code/flyway/core/java/BaseJavaMigration.java
Patch:
@@ -1,5 +1,7 @@
-package com.google.code.flyway.core;
+package com.google.code.flyway.core.java;
 
+import com.google.code.flyway.core.Migration;
+import com.google.code.flyway.core.SchemaVersion;
 import com.google.code.flyway.core.util.MigrationUtils;
 import org.springframework.util.ClassUtils;
 

File: flyway-core/src/test/java/com/google/code/flyway/core/util/MigrationUtilsTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.google.code.flyway.core;
+package com.google.code.flyway.core.util;
 
 import static org.junit.Assert.assertEquals;
 

