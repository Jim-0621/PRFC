File: src/core/src/main/java/org/apache/jmeter/util/SSLManager.java
Patch:
@@ -223,9 +223,9 @@ private String getPassword() {
                 }
                 System.setProperty(KEY_STORE_PASSWORD, this.defaultpw);
                 password = this.defaultpw;
+            } else {
+                log.warn("No password provided, and no GUI present so cannot prompt");
             }
-        } else {
-            log.warn("No password provided, and no GUI present so cannot prompt");
         }
         return password;
     }

File: src/core/src/main/java/org/apache/jmeter/JMeter.java
Patch:
@@ -1040,7 +1040,7 @@ void runNonGui(String testFile, String logFile, boolean remoteStart, String remo
                 testListener.setStartedRemoteEngines(engines);
                 distributedRunner.start();
             }
-            startUdpDdaemon(engines);
+            startUdpDaemon(engines);
         } catch (ConfigurationException e) {
             throw e;
         } catch (Exception e) {
@@ -1379,7 +1379,7 @@ public static boolean isNonGUI(){
         return "true".equals(System.getProperty(JMeter.JMETER_NON_GUI)); //$NON-NLS-1$
     }
 
-    private static void startUdpDdaemon(final List<? extends JMeterEngine> engines) {
+    private static void startUdpDaemon(final List<? extends JMeterEngine> engines) {
         int port = JMeterUtils.getPropDefault("jmeterengine.nongui.port", UDP_PORT_DEFAULT); // $NON-NLS-1$
         int maxPort = JMeterUtils.getPropDefault("jmeterengine.nongui.maxport", 4455); // $NON-NLS-1$
         if (port > 1000){

File: src/protocol/jdbc/src/main/java/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -116,7 +116,7 @@ public void testStarted() {
         JMeterVariables variables = getThreadContext().getVariables();
         String poolName = getDataSource();
         if (JOrphanUtils.isBlank(poolName)) {
-            throw new IllegalArgumentException("Name for DataSoure must not be empty in " + getName());
+            throw new IllegalArgumentException("Name for DataSource must not be empty in " + getName());
         } else if (variables.getObject(poolName) != null) {
             log.error("JDBC data source already defined for: {}", poolName);
         } else {

File: src/protocol/jdbc/src/main/java/org/apache/jmeter/protocol/jdbc/processor/AbstractJDBCProcessor.java
Patch:
@@ -41,7 +41,7 @@ public abstract class AbstractJDBCProcessor extends AbstractJDBCTestElement {
      */
     protected void process() {
         if (JOrphanUtils.isBlank(getDataSource())) {
-            throw new IllegalArgumentException("Name for DataSoure must not be empty in " + getName());
+            throw new IllegalArgumentException("Name for DataSource must not be empty in " + getName());
         }
         try (Connection conn = DataSourceElement.getConnection(getDataSource())){
             execute(conn);

File: src/protocol/jdbc/src/main/java/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Patch:
@@ -74,7 +74,7 @@ public SampleResult sample(Entry e) {
         try {
             String dataSource = getDataSource();
             if (JOrphanUtils.isBlank(dataSource)) {
-                throw new IllegalArgumentException("Name for DataSoure must not be empty in " + getName());
+                throw new IllegalArgumentException("Name for DataSource must not be empty in " + getName());
             }
 
             try {

File: src/jorphan/src/main/java/org/apache/jorphan/exec/KeyToolUtils.java
Patch:
@@ -53,7 +53,7 @@ public class KeyToolUtils {
     /** Name of property that can be used to override the default keytool location */
     private static final String KEYTOOL_DIRECTORY = "keytool.directory"; // $NON-NLS-1$
 
-    private static final String DNAME_INTERMEDIATE_CA_KEY  = "cn=JMeter Intermediate CA for recording (INSTALL ONLY IF ITS YOURS)"; // $NON-NLS-1$
+    private static final String DNAME_INTERMEDIATE_CA_KEY  = "cn=JMeter Intermediate CA for recording (INSTALL ONLY IF IT IS YOURS)"; // $NON-NLS-1$
 
     public static final String ROOT_CACERT_CRT_PFX = "ApacheJMeterTemporaryRootCA"; // $NON-NLS-1$ (do not change)
     private static final String ROOT_CACERT_CRT = ROOT_CACERT_CRT_PFX + ".crt"; // $NON-NLS-1$ (Firefox and Windows)
@@ -73,7 +73,7 @@ public class KeyToolUtils {
     static {
         StringBuilder sb = new StringBuilder();
 
-        sb.append("CN=_ JMeter Root CA for recording (INSTALL ONLY IF ITS YOURS)"); // $NON-NLS-1$
+        sb.append("CN=_ JMeter Root CA for recording (INSTALL ONLY IF IT IS YOURS)"); // $NON-NLS-1$
         String userName = System.getProperty("user.name"); // $NON-NLS-1$
         userName = userName.replace('\\','/'); // Backslash is special (Bugzilla 56178)
         addElement(sb, "OU=Username: ", userName); // $NON-NLS-1$

File: src/jorphan/src/main/java/org/apache/jorphan/exec/KeyToolUtils.java
Patch:
@@ -53,7 +53,7 @@ public class KeyToolUtils {
     /** Name of property that can be used to override the default keytool location */
     private static final String KEYTOOL_DIRECTORY = "keytool.directory"; // $NON-NLS-1$
 
-    private static final String DNAME_INTERMEDIATE_CA_KEY  = "cn=JMeter Intermediate CA for recording (INSTALL ONLY IF IT S YOURS)"; // $NON-NLS-1$
+    private static final String DNAME_INTERMEDIATE_CA_KEY  = "cn=JMeter Intermediate CA for recording (INSTALL ONLY IF ITS YOURS)"; // $NON-NLS-1$
 
     public static final String ROOT_CACERT_CRT_PFX = "ApacheJMeterTemporaryRootCA"; // $NON-NLS-1$ (do not change)
     private static final String ROOT_CACERT_CRT = ROOT_CACERT_CRT_PFX + ".crt"; // $NON-NLS-1$ (Firefox and Windows)
@@ -73,7 +73,7 @@ public class KeyToolUtils {
     static {
         StringBuilder sb = new StringBuilder();
 
-        sb.append("CN=_ JMeter Root CA for recording (INSTALL ONLY IF IT S YOURS)"); // $NON-NLS-1$
+        sb.append("CN=_ JMeter Root CA for recording (INSTALL ONLY IF ITS YOURS)"); // $NON-NLS-1$
         String userName = System.getProperty("user.name"); // $NON-NLS-1$
         userName = userName.replace('\\','/'); // Backslash is special (Bugzilla 56178)
         addElement(sb, "OU=Username: ", userName); // $NON-NLS-1$

File: src/protocol/java/src/main/java/org/apache/jmeter/protocol/java/sampler/BeanShellSampler.java
Patch:
@@ -74,7 +74,7 @@ public BeanShellSamplerSchema getSchema() {
 
     @Override
     protected String getInitFileProperty() {
-        return BeanShellSamplerSchema.INSTANCE.getInitFile().getName();
+        return INIT_FILE;
     }
 
     @Override

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/gui/HTTPArgumentsPanel.java
Patch:
@@ -104,10 +104,10 @@ public HTTPArgumentsPanel() {
     }
 
     @Override
-    public TestElement createTestElement() {
+    public Arguments createTestElement() {
         Arguments args = getUnclonedParameters();
-        super.configureTestElement(args);
-        return (TestElement) args.clone();
+        assignDefaultValues(args);
+        return (Arguments) args.clone();
     }
 
     /**

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/gui/action/ParseCurlCommandAction.java
Patch:
@@ -315,11 +315,12 @@ private HTTPSamplerProxy createSampler(Request request, String commentText) thro
         if (StringUtils.isNotEmpty(url.getQuery())) {
             path += "?" + url.getQuery();
         }
+        // setMethod must be before setPath as setPath uses method to determine if parameters should be parsed or not
+        httpSampler.setMethod(request.getMethod());
         httpSampler.setPath(path);
         httpSampler.setDomain(url.getHost());
         httpSampler.setUseKeepAlive(request.isKeepAlive());
         httpSampler.setFollowRedirects(true);
-        httpSampler.setMethod(request.getMethod());
         HeaderManager headerManager = createHeaderManager(request);
         httpSampler.addTestElement(headerManager);
         configureTimeout(request, httpSampler);

File: src/core/src/main/java/org/apache/jmeter/gui/util/TristateCheckBox.java
Patch:
@@ -206,7 +206,7 @@ private static class TristateButtonModel extends ToggleButtonModel {
 
         public TristateButtonModel(TristateState initial,
                 TristateCheckBox tristateCheckBox, boolean original) {
-            setState(TristateState.DESELECTED);
+            setState(initial);
             this.tristateCheckBox = tristateCheckBox;
             icon = new TristateCheckBoxIcon();
             this.original = original;

File: src/protocol/junit-sample/src/main/java/woolfel/DummyTestCase.java
Patch:
@@ -49,16 +49,17 @@ public void tearDown(){
     public void testMethodPass() {
         try {
             TimeUnit.MILLISECONDS.sleep(100);
-            assertEquals(10,10);
+            assertEquals(10,5 + 5);
         } catch (InterruptedException e) {
             LOGGER.warn("Exception on sleep", e);
         }
     }
 
+    @SuppressWarnings("TruthSelfEquals")
     public void testMethodPass2() {
         try {
             TimeUnit.MILLISECONDS.sleep(100);
-            assertEquals("one","one");
+            assertEquals("one", "one");
         } catch (InterruptedException e) {
             LOGGER.warn("Exception on sleep", e);
         }

File: src/components/src/main/java/org/apache/jmeter/timers/ConstantTimer.java
Patch:
@@ -19,8 +19,6 @@
 
 import java.io.Serializable;
 
-import org.apache.jmeter.engine.event.LoopIterationEvent;
-import org.apache.jmeter.engine.event.LoopIterationListener;
 import org.apache.jmeter.testelement.AbstractTestElement;
 import org.apache.jmeter.util.JMeterUtils;
 

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -472,7 +472,7 @@ static boolean isSupportedProtocol(URL url) {
      * @param credentialsProvider provider which should be set up
      * @param localhost name of the workstation to be used for {@link NTCredentials}
      */
-    public static void setupCredentials(Authorization auth, URL url,
+    public void setupCredentials(Authorization auth, URL url,
             HttpClientContext localContext,
             CredentialsProvider credentialsProvider,
             String localhost) {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -302,7 +302,7 @@ private static boolean isMultipart(String contentType) {
         return contentType != null && contentType.startsWith(HTTPConstants.MULTIPART_FORM_DATA);
     }
 
-    public static MultipartUrlConfig getMultipartConfig(String contentType) {
+    public MultipartUrlConfig getMultipartConfig(String contentType) {
         if(isMultipart(contentType)) {
             // Get the boundary string for the multiparts from the content type
             String boundaryString = contentType.substring(contentType.toLowerCase(java.util.Locale.ENGLISH).indexOf("boundary=") + "boundary=".length());

File: src/protocol/java/src/main/java/org/apache/jmeter/protocol/java/sampler/JavaSamplerContext.java
Patch:
@@ -239,15 +239,15 @@ public JMeterContext getJMeterContext() {
      * Returns {@link JMeterVariables} for the current thread.
      * @return {@link JMeterVariables} for the current thread.
      */
-    public static JMeterVariables getJMeterVariables() {
+    public final JMeterVariables getJMeterVariables() {
         return JMeterContextService.getContext().getVariables();
     }
 
     /**
      * Returns JMeter properties.
      * @return {@link Properties} JMeter properties
      */
-    public static Properties getJMeterProperties() {
+    public final Properties getJMeterProperties() {
         return JMeterUtils.getJMeterProperties();
     }
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/graphite/AbstractGraphiteMetricsSender.java
Patch:
@@ -44,7 +44,7 @@ protected GenericKeyedObjectPool<SocketConnectionInfos, SocketOutputStream> crea
         config.setMaxTotalPerKey(-1);
         config.setMaxTotal(-1);
         config.setMaxIdlePerKey(-1);
-        config.setMinEvictableIdleTime(Duration.ofMinutes(3));
+        config.setMinEvictableIdleDuration(Duration.ofMinutes(3));
         config.setTimeBetweenEvictionRuns(Duration.ofMinutes(3));
 
         return new GenericKeyedObjectPool<>(

File: src/core/src/main/java/org/apache/jmeter/gui/util/JSyntaxTextArea.java
Patch:
@@ -23,12 +23,12 @@
 import java.awt.event.HierarchyEvent;
 import java.awt.event.HierarchyListener;
 import java.io.IOException;
+import java.util.Objects;
 import java.util.Properties;
 
 import javax.swing.SwingUtilities;
 import javax.swing.UIManager;
 
-import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.gui.action.LookAndFeelCommand;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.JFactory;
@@ -302,7 +302,7 @@ protected RUndoManager createUndoManager() {
      */
     public void setInitialText(String string) {
         try {
-            setText(StringUtils.defaultString(string, ""));
+            setText(Objects.toString(string, ""));
         } catch (Exception e) {
             log.error("Dubious problem while setting text to {}", string, e);
         }

File: src/core/src/main/java/org/apache/jmeter/report/core/AbstractSampleWriter.java
Patch:
@@ -26,8 +26,8 @@
 import java.io.UnsupportedEncodingException;
 import java.io.Writer;
 import java.nio.charset.StandardCharsets;
+import java.util.Objects;
 
-import org.apache.commons.lang3.Validate;
 import org.apache.jmeter.save.SaveService;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.slf4j.Logger;
@@ -66,7 +66,7 @@ public abstract class AbstractSampleWriter extends SampleWriter {
      *            sample writer
      */
     public void setWriter(Writer newWriter) {
-        Validate.notNull(newWriter, "writer must not be null."); // NOSONAR
+        Objects.requireNonNull(newWriter, "writer must not be null."); // NOSONAR
 
         if (this.writer != null) {
             // flush and close previous writer
@@ -84,7 +84,7 @@ public void setWriter(Writer newWriter) {
      *            The output stream on which sample should be written
      */
     public void setOutputStream(OutputStream out) {
-        Validate.notNull(out, "out must not be null."); // NOSONAR
+        Objects.requireNonNull(out, "out must not be null."); // NOSONAR
 
         try {
             setWriter(new OutputStreamWriter(out, CHARSET));

File: src/core/src/main/java/org/apache/jmeter/report/core/SampleMetadata.java
Patch:
@@ -20,10 +20,10 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Objects;
 import java.util.TreeMap;
 
 import org.apache.commons.lang3.StringUtils;
-import org.apache.commons.lang3.Validate;
 import org.apache.jmeter.samplers.SampleSaveConfiguration;
 import org.apache.jmeter.save.CSVSaveService;
 
@@ -56,7 +56,7 @@ public class SampleMetadata {
      *            The list of columns names (must not be {@code null})
      */
     public SampleMetadata(char separator, String... columns) {
-        Validate.notNull(columns, "columns must not be null");
+        Objects.requireNonNull(columns, "columns must not be null");
         initialize(separator, Arrays.asList(columns));
     }
 

File: src/core/src/main/java/org/apache/jmeter/report/processor/AbstractSampleConsumer.java
Patch:
@@ -21,9 +21,9 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.TreeMap;
 
-import org.apache.commons.lang3.Validate;
 import org.apache.jmeter.report.core.Sample;
 import org.apache.jmeter.report.core.SampleException;
 import org.apache.jmeter.report.core.SampleMetadata;
@@ -132,7 +132,7 @@ public void setSampleContext(SampleContext sampleContext) {
      *            for the samples (must not be {@code null})
      */
     public void setSampleConsumers(List<SampleConsumer> consumers) {
-        Validate.notNull(consumers, "consumers must not be null");
+        Objects.requireNonNull(consumers, "consumers must not be null");
 
         this.sampleConsumers = consumers;
     }

File: src/core/src/main/java/org/apache/jmeter/report/processor/CsvFileSampleSource.java
Patch:
@@ -20,6 +20,7 @@
 import java.io.File;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Objects;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
@@ -247,7 +248,7 @@ private static class PrivateProducer extends AbstractSampleProcessor implements
          *                  {@code null})
          */
         public void setSampleConsumers(List<SampleConsumer> consumers) {
-            Validate.notNull(consumers, "consumers must not be null");
+            Objects.requireNonNull(consumers, "consumers must not be null");
 
             this.sampleConsumers = consumers;
         }

File: src/core/src/main/java/org/apache/jmeter/report/processor/SampleWriterConsumer.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.jmeter.report.processor;
 
 import java.io.File;
+import java.util.Objects;
 
-import org.apache.commons.lang3.Validate;
 import org.apache.jmeter.report.core.CsvSampleWriter;
 import org.apache.jmeter.report.core.Sample;
 import org.slf4j.Logger;
@@ -48,7 +48,7 @@ public void setOutputFile(String outputFile) {
     }
 
     public void setOutputFile(File outputFile) {
-        Validate.notNull(outputFile, "outputFile must not be null");
+        Objects.requireNonNull(outputFile, "outputFile must not be null");
         this.outputFile = outputFile;
     }
 

File: src/core/src/main/java/org/apache/jmeter/util/SSLManager.java
Patch:
@@ -31,13 +31,13 @@
 import java.security.cert.CertificateException;
 import java.util.Arrays;
 import java.util.Locale;
+import java.util.Objects;
 
 import javax.swing.JLabel;
 import javax.swing.JOptionPane;
 import javax.swing.JPanel;
 import javax.swing.JPasswordField;
 
-import org.apache.commons.lang3.Validate;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.util.keystore.JmeterKeyStore;
 import org.slf4j.Logger;
@@ -179,7 +179,7 @@ private void retryLoadKeys(File initStore, boolean allowEmptyPassword) throws No
         for (int i = 0; i < 3; i++) {
             String password = getPassword();
             if (!allowEmptyPassword) {
-                Validate.notNull(password, "Password for keystore must not be null");
+                Objects.requireNonNull(password, "Password for keystore must not be null");
             }
             try {
                 if (initStore == null) {

File: src/core/src/main/java/org/apache/jmeter/util/SecurityProviderLoader.java
Patch:
@@ -22,11 +22,11 @@
 import java.security.Provider;
 import java.security.Security;
 import java.util.Comparator;
+import java.util.Objects;
 import java.util.Properties;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -49,7 +49,7 @@ public static void addSecurityProvider(String securityProviderConfig) {
 
         if (matcher.matches()) {
             final String classname = matcher.group("classname");
-            final int position = Integer.parseInt(StringUtils.defaultString(matcher.group("position"), "0"));
+            final int position = Integer.parseInt(Objects.toString(matcher.group("position"), "0"));
             final String config = matcher.group("config");
 
             try {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/parser/CSSParseExceptionCallback.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.jmeter.protocol.http.parser;
 
 import java.net.URL;
+import java.util.Objects;
 
-import org.apache.commons.lang3.Validate;
 import org.apache.jmeter.util.JMeterUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -39,7 +39,7 @@ public class CSSParseExceptionCallback implements ICSSParseExceptionCallback {
     private final URL baseUrl;
 
     public CSSParseExceptionCallback(URL baseUrl) {
-        this.baseUrl = Validate.notNull(baseUrl);
+        this.baseUrl = Objects.requireNonNull(baseUrl, "baseUrl must not be null");
     }
 
     /**

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/parser/CssParser.java
Patch:
@@ -21,9 +21,9 @@
 import java.nio.charset.Charset;
 import java.util.Collections;
 import java.util.Iterator;
+import java.util.Objects;
 
 import org.apache.commons.lang3.StringUtils;
-import org.apache.commons.lang3.Validate;
 import org.apache.commons.lang3.tuple.ImmutableTriple;
 import org.apache.commons.lang3.tuple.Triple;
 import org.apache.jmeter.util.JMeterUtils;
@@ -78,7 +78,7 @@ public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] data,
     private static URLCollection orDefault(URLCollection urlCollection,
             URLCollection defaultValue) {
         if (urlCollection == null) {
-            return Validate.notNull(defaultValue);
+            return Objects.requireNonNull(defaultValue);
         }
         return urlCollection;
     }

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/parser/URLCollection.java
Patch:
@@ -21,8 +21,8 @@
 import java.net.URL;
 import java.util.Collection;
 import java.util.Iterator;
+import java.util.Objects;
 
-import org.apache.commons.lang3.Validate;
 import org.apache.commons.text.StringEscapeUtils;
 import org.apache.jmeter.protocol.http.util.ConversionUtils;
 import org.slf4j.Logger;
@@ -47,7 +47,7 @@ public class URLCollection implements Iterable<URL> {
      * @param c collection to start with (Must not be {@code null})
      */
     public URLCollection(Collection<URLString> c) {
-        coll = Validate.notNull(c);
+        coll = Objects.requireNonNull(c, "collection must not be null");
     }
 
     /**

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 import javax.xml.XMLConstants;
 import javax.xml.parsers.ParserConfigurationException;
@@ -345,7 +346,7 @@ public boolean isErrorDetected() {
      */
     protected static void computeSamplerName(HTTPSamplerBase sampler,
             HttpRequestHdr request) {
-        String prefix = StringUtils.defaultString(request.getPrefix(), "");
+        String prefix = Objects.toString(request.getPrefix(), "");
         int httpSampleNameMode = request.getHttpSampleNameMode();
         String format = getFormat(httpSampleNameMode, request.getHttpSampleNameFormat());
         String url;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -42,14 +42,14 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.prefs.Preferences;
 import java.util.regex.PatternSyntaxException;
 import java.util.stream.Collectors;
 
 import org.apache.commons.codec.binary.Base64;
 import org.apache.commons.codec.digest.DigestUtils;
-import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.time.DateUtils;
 import org.apache.jmeter.assertions.Assertion;
 import org.apache.jmeter.assertions.ResponseAssertion;
@@ -1265,7 +1265,7 @@ private boolean prepareTree(final JMeterTreeModel treeModel,
             prefixChanged = true;
         }
         if (deltaT > sampleGap || prefixChanged) {
-            String controllerName = StringUtils.defaultString(getPrefixHTTPSampleName(), sampler.getName());
+            String controllerName = Objects.toString(getPrefixHTTPSampleName(), sampler.getName());
             if (!myTarget.isLeaf() && cachedGroupingMode == GROUPING_ADD_SEPARATORS) {
                 addDivider(treeModel, myTarget);
             }

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/HTTPFileArg.java
Patch:
@@ -20,6 +20,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.Serializable;
+import java.util.Objects;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.testelement.AbstractTestElement;
@@ -99,7 +100,7 @@ private static String detectMimeType(String path, String mimetype) {
         if (StringUtils.isNotBlank(mimetype)) {
             return mimetype;
         }
-        mimetype = StringUtils.defaultString(mimetype, "");
+        mimetype = Objects.toString(mimetype, "");
         if (StringUtils.isBlank(path)) {
             return mimetype;
         }

File: src/launcher/src/main/java/org/apache/jmeter/util/ShutdownClient.java
Patch:
@@ -21,6 +21,7 @@
 import java.net.DatagramPacket;
 import java.net.DatagramSocket;
 import java.net.InetAddress;
+import java.nio.charset.StandardCharsets;
 
 /**
  * Simple utility to send a shutdown message to a non-GUI instance of JMeter
@@ -38,7 +39,7 @@ public static void main(String[] args) throws IOException {
         String command = args[0];
         System.out.println("Sending "+command+" request to port "+port);
         try (DatagramSocket socket = new DatagramSocket()) {
-            byte[] buf = command.getBytes("ASCII");
+            byte[] buf = command.getBytes(StandardCharsets.US_ASCII);
             InetAddress address = InetAddress.getByName("localhost");
             DatagramPacket packet = new DatagramPacket(buf, buf.length, address,
                     port);

File: src/protocol/mongodb/src/main/java/org/apache/jmeter/protocol/mongodb/config/MongoSourceElement.java
Patch:
@@ -107,6 +107,7 @@ public boolean expectsModification() {
     }
 
     @Override
+    @SuppressWarnings("deprecation")
     public void testStarted() {
         if(log.isDebugEnabled()) {
             log.debug(getTitle() + " testStarted");

File: src/protocol/mongodb/src/main/java/org/apache/jmeter/protocol/mongodb/mongo/MongoDB.java
Patch:
@@ -43,6 +43,7 @@ public MongoDB(
         mongo = new MongoClient(serverAddresses, mongoOptions);
     }
 
+    @SuppressWarnings("deprecation")
     public DB getDB(String database, String username, String password) {
 
         if(log.isDebugEnabled()) {

File: src/protocol/mongodb/src/main/java/org/apache/jmeter/protocol/mongodb/sampler/MongoScriptRunner.java
Patch:
@@ -44,6 +44,7 @@ public MongoScriptRunner() {
      * @throws Exception
      *             when evaluation on the database fails
      */
+    @SuppressWarnings("deprecation")
     public Object evaluate(DB db, String script)
         throws Exception {
 

File: src/core/src/main/java/org/apache/jmeter/util/Calculator.java
Patch:
@@ -53,7 +53,7 @@ public class Calculator {
 
     private final String label;
 
-    private final AtomicLong startTime = new AtomicLong(Long.MAX_VALUE);
+    private final AtomicLong startTime = new AtomicLong();
 
     private final LongAccumulator elapsedTime = new LongAccumulator(Math::max, Long.MIN_VALUE);
 
@@ -63,6 +63,7 @@ public Calculator() {
 
     public Calculator(String label) {
         this.label = label;
+        clear();
     }
 
     public void clear() {

File: src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -56,7 +56,7 @@ public class SampleResult implements Serializable, Cloneable, Searchable {
      * The default encoding to be used if not overridden.
      * The value is ISO-8859-1.
      */
-    public static final String DEFAULT_HTTP_ENCODING = StandardCharsets.ISO_8859_1.name();
+    public static final String DEFAULT_HTTP_ENCODING = StandardCharsets.UTF_8.name();
 
     private static final String OK_CODE = Integer.toString(HttpURLConnection.HTTP_OK);
     private static final String OK_MSG = "OK"; // $NON-NLS-1$

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -165,7 +165,7 @@ public byte[] parse(InputStream in) throws IOException {
                     inHeaders = false;
                     firstLine = false; // cannot be first line either
                 }
-                final String reqLine = line.toString(StandardCharsets.ISO_8859_1.name());
+                final String reqLine = line.toString(StandardCharsets.UTF_8.name());
                 if (firstLine) {
                     parseFirstLine(reqLine);
                     firstLine = false;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/PutWriter.java
Patch:
@@ -44,9 +44,6 @@ public PutWriter() {
     public void setHeaders(URLConnection connection, HTTPSamplerBase sampler) throws IOException {
         // Get the encoding to use for the request
         String contentEncoding = sampler.getContentEncoding();
-        if(contentEncoding == null || contentEncoding.length() == 0) {
-            contentEncoding = ENCODING;
-        }
         long contentLength = 0L;
         boolean hasPutBody = false;
 

File: src/core/src/main/java/org/apache/jmeter/save/converters/TestElementPropertyConverter.java
Patch:
@@ -100,7 +100,8 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
             prop.setName(ConversionHelp.decode(reader.getAttribute(ConversionHelp.ATT_NAME)));
             String element = reader.getAttribute(ConversionHelp.ATT_ELEMENT_TYPE);
             boolean isHeader = HEADER_CLASSNAME.equals(element);
-            prop.setObjectValue(mapper().realClass(element).getDeclaredConstructor().newInstance());// Always decode
+            Class<?> aClass = mapper().realClass(element);
+            prop.setObjectValue(aClass.asSubclass(TestElement.class).getDeclaredConstructor().newInstance());// Always decode
             TestElement te = (TestElement)prop.getObjectValue();
             // No need to check version, just process the attributes if present
             ConversionHelp.restoreSpecialProperties(te, reader);

File: src/core/src/main/java/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -177,7 +177,8 @@ public void runTest() throws JMeterEngineException {
         }
     }
 
-    private static final HashMap<String, String> toHashMapOfString(Properties properties) {
+    @SuppressWarnings("NonApiType")
+    private static HashMap<String, String> toHashMapOfString(Properties properties) {
         return new HashMap<>(
                 properties.entrySet().stream().collect(Collectors.toMap(
                         e -> e.getKey().toString(),

File: src/core/src/main/java/org/apache/jmeter/engine/RemoteJMeterEngine.java
Patch:
@@ -36,6 +36,7 @@ public interface RemoteJMeterEngine extends Remote {
 
     void rreset() throws RemoteException;
 
+    @SuppressWarnings("NonApiType")
     void rsetProperties(HashMap<String,String> p) throws RemoteException;
 
     void rexit() throws RemoteException;

File: src/core/src/main/java/org/apache/jmeter/engine/RemoteJMeterEngineImpl.java
Patch:
@@ -220,6 +220,7 @@ public void rexit() throws RemoteException {
     }
 
     @Override
+    @SuppressWarnings("NonApiType")
     public void rsetProperties(HashMap<String, String> map) throws RemoteException { // NOSONAR
         checkOwner("setProperties");
         if(remotelySetProperties != null) {

File: src/core/src/main/java/org/apache/jmeter/engine/util/FunctionParser.java
Patch:
@@ -49,6 +49,7 @@ class FunctionParser {
      * @return list of Strings or Objects representing functions
      * @throws InvalidVariableException when evaluation of variables fail
      */
+    @SuppressWarnings("NonApiType")
     ArrayList<Object> compileString(String value) throws InvalidVariableException {
         StringReader reader = new StringReader(value);
         ArrayList<Object> result = new ArrayList<>();
@@ -186,6 +187,7 @@ private static char firstNonSpace(StringReader reader, char defaultResult) throw
      * @return a list of CompoundVariable elements
      * @throws InvalidVariableException when evaluation of variables fail
      */
+    @SuppressWarnings("NonApiType")
     ArrayList<CompoundVariable> parseParams(StringReader reader) throws InvalidVariableException {
         ArrayList<CompoundVariable> result = new ArrayList<>();
         StringBuilder buffer = new StringBuilder();

File: src/core/src/main/java/org/apache/jmeter/report/processor/graph/AbstractGraphConsumer.java
Patch:
@@ -105,6 +105,7 @@ public abstract class AbstractGraphConsumer extends AbstractSampleConsumer {
      *
      * @return the group information
      */
+    @SuppressWarnings("NonApiType")
     protected final HashMap<String, GroupInfo> getGroupInfos() {
         return groupInfos;
     }

File: src/core/src/main/java/org/apache/jmeter/report/processor/graph/GroupData.java
Patch:
@@ -33,6 +33,7 @@ public class GroupData {
      *
      * @return the series data map
      */
+    @SuppressWarnings("NonApiType")
     public final HashMap<String, SeriesData> getSeriesInfo() {
         return seriesData;
     }

File: src/core/src/main/java/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -171,6 +171,7 @@ else if(child instanceof TransactionController) {
         }
     }
 
+    @SuppressWarnings("NonApiType")
     private static void trackIterationListeners(LinkedList<TestElement> pStack) {
         TestElement child = pStack.getLast();
         if (child instanceof LoopIterationListener) {

File: src/core/src/main/java/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -1243,6 +1243,7 @@ private static void getLocalHostDetails(){
      *            multi-line string headers
      * @return a map name/value for each header
      */
+    @SuppressWarnings("NonApiType")
     public static LinkedHashMap<String, String> parseHeaders(String headers) {
         LinkedHashMap<String, String> linkedHeaders = new LinkedHashMap<>();
         String[] list = headers.split("\n"); // $NON-NLS-1$

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/parser/HtmlParsingUtils.java
Patch:
@@ -355,7 +355,7 @@ public static List<HTTPSamplerBase> createURLFromForm(Node doc, URL context) {
     }
 
     // N.B. Since the tags are extracted from an HTML Form, any values must already have been encoded
-    @SuppressWarnings("JdkObsolete")
+    @SuppressWarnings({"JdkObsolete", "NonApiType"})
     private static boolean recurseForm(Node tempNode, LinkedList<HTTPSamplerBase> urlConfigs, URL context, String selectName,
             boolean inForm) {
         NamedNodeMap nodeAtts = tempNode.getAttributes();

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java
Patch:
@@ -274,7 +274,7 @@ private static String extractBoundary(String contentType) {
      * @param headers the http request headers
      * @return true if the request is multipart
      */
-    private static boolean isMultipart(LinkedHashMap<String, String> headers) {
+    private static boolean isMultipart(Map<String, String> headers) {
         String contentType = headers.get(HTTPConstants.HEADER_CONTENT_TYPE);
         return contentType != null && contentType.startsWith(HTTPConstants.MULTIPART_FORM_DATA);
     }

File: src/core/src/main/java/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java
Patch:
@@ -69,7 +69,7 @@ public abstract class AbstractJMeterGuiComponent extends JPanel implements JMete
     /** Logging */
     private static final Logger log = LoggerFactory.getLogger(AbstractJMeterGuiComponent.class);
 
-    /** Flag indicating whether or not this component is enabled. */
+    /** Flag indicating whether this component is enabled. */
     private boolean enabled = true;
 
     /**

File: src/protocol/java/src/main/java/org/apache/jmeter/protocol/java/control/gui/JavaTestSamplerGui.java
Patch:
@@ -78,8 +78,10 @@ public TestElement createTestElement() {
     public void modifyTestElement(TestElement sampler) {
         sampler.clear();
         JavaConfig config = (JavaConfig) javaPanel.createTestElement();
-        configureTestElement(sampler);
         sampler.addTestElement(config);
+        // Set base parameters (name, description, enabled) from the main control
+        // to avoid merging them from the config element above
+        configureTestElement(sampler);
     }
 
     /* Overrides AbstractJMeterGuiComponent.configure(TestElement) */

File: src/core/src/test/java/org/apache/jmeter/testelement/property/AbstractPropertyTest.java
Patch:
@@ -69,7 +69,7 @@ public Object getObjectValue() {
     public void testNormalizeListWithEmptyList() {
         Collection<JMeterProperty> emptyCollection = Collections.emptyList();
         Collection<JMeterProperty> newCollection = dummyProperty.normalizeList(emptyCollection);
-        assertThat(newCollection, CoreMatchers.nullValue());
+        assertThat(newCollection, CoreMatchers.equalTo(emptyCollection));
     }
 
     @Test

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/PostWriter.java
Patch:
@@ -28,6 +28,7 @@
 import java.nio.file.Files;
 import java.nio.file.Paths;
 
+import org.apache.jmeter.protocol.http.util.ConversionUtils;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
@@ -391,7 +392,7 @@ private static void writeStartFileMultipart(OutputStream out, String filename,
         write(out, "Content-Disposition: form-data; name=\""); // $NON-NLS-1$
         write(out, nameField);
         write(out, "\"; filename=\"");// $NON-NLS-1$
-        write(out, new File(filename).getName());
+        write(out, ConversionUtils.percentEncode(new File(filename).getName()));
         writeln(out, "\""); // $NON-NLS-1$
         writeln(out, "Content-Type: " + mimetype); // $NON-NLS-1$
         writeln(out, "Content-Transfer-Encoding: binary"); // $NON-NLS-1$

File: src/core/src/main/java/org/apache/jmeter/config/Arguments.java
Patch:
@@ -62,7 +62,7 @@ public ArgumentsSchema getSchema() {
      * @return the arguments
      */
     public CollectionProperty getArguments() {
-        return (CollectionProperty) getPropertyOrNull(getSchema().getArguments());
+        return getOrNull(getSchema().getArguments());
     }
 
     /**

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/HeaderManager.java
Patch:
@@ -86,7 +86,7 @@ public void clear() {
      * @return the header collection property
      */
     public CollectionProperty getHeaders() {
-        return (CollectionProperty) getPropertyOrNull(getSchema().getHeaders());
+        return getOrNull(getSchema().getHeaders());
     }
 
     public int getColumnCount() {

File: src/core/src/main/java/org/apache/jmeter/config/Arguments.java
Patch:
@@ -37,7 +37,7 @@ public class Arguments extends ConfigTestElement implements Serializable, Iterab
     private static final long serialVersionUID = 240L;
 
     /** The name of the property used to store the arguments. */
-    public static final String ARGUMENTS = ArgumentsSchema.INSTANCE.getArguments().getName();
+    public static final String ARGUMENTS = "Arguments.arguments"; //$NON-NLS-1$
 
     /**
      * Create a new Arguments object with no arguments.

File: src/core/src/main/java/org/apache/jmeter/control/LoopController.java
Patch:
@@ -33,7 +33,7 @@ public class LoopController extends GenericController implements Serializable, I
 
     public static final int INFINITE_LOOP_COUNT = -1; // $NON-NLS-1$
 
-    public static final String LOOPS = LoopControllerSchema.INSTANCE.getLoops().getName();
+    public static final String LOOPS = "LoopController.loops"; // $NON-NLS-1$
 
     private static final long serialVersionUID = 7833960784370272300L;
     private static final Logger LOGGER = LoggerFactory.getLogger(LoopController.class);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/HeaderManager.java
Patch:
@@ -45,7 +45,7 @@ public class HeaderManager extends ConfigTestElement implements Serializable, Re
 
     private static final long serialVersionUID = 240L;
 
-    public static final String HEADERS = HeaderManagerSchema.INSTANCE.getHeaders().getName();
+    public static final String HEADERS = "HeaderManager.headers";// $NON-NLS-1$
 
     private static final String[] COLUMN_RESOURCE_NAMES = {
           "name",             // $NON-NLS-1$

File: src/core/src/main/java/org/apache/jmeter/threads/gui/AbstractThreadGroupGui.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.jmeter.gui.util.MenuFactory;
 import org.apache.jmeter.gui.util.VerticalPanel;
 import org.apache.jmeter.testelement.TestElement;
-import org.apache.jmeter.testelement.property.StringProperty;
 import org.apache.jmeter.threads.AbstractThreadGroup;
+import org.apache.jmeter.threads.AbstractThreadGroupSchema;
 import org.apache.jmeter.util.JMeterUtils;
 
 import net.miginfocom.swing.MigLayout;
@@ -212,7 +212,7 @@ public void configure(TestElement tg) {
    @Override
     protected void configureTestElement(TestElement tg) {
         super.configureTestElement(tg);
-        tg.setProperty(new StringProperty(AbstractThreadGroup.ON_SAMPLE_ERROR, onSampleError()));
+        tg.set(AbstractThreadGroupSchema.INSTANCE.getOnSampleError(), onSampleError());
     }
 
 }

File: src/core/src/main/java/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -763,6 +763,7 @@ public void setThreadContext(JMeterContext inthreadContext) {
      * @return Returns the threadName.
      */
     @Override
+    @SuppressWarnings("deprecation")
     public String getThreadName() {
         return threadName;
     }
@@ -772,6 +773,7 @@ public String getThreadName() {
      *            The threadName to set.
      */
     @Override
+    @SuppressWarnings("deprecation")
     public void setThreadName(String inthreadName) {
         if (threadName != null) {
             if (!threadName.equals(inthreadName)) {

File: src/core/src/main/java/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -587,7 +587,7 @@ public void setProperty(String name, long value, long dflt) {
     public PropertyIterator propertyIterator() {
         Map<String, JMeterProperty> propMapConcurrent = this.propMapConcurrent;
         if (propMapConcurrent != null) {
-            return new PropertyIteratorImpl(propMapConcurrent.values());
+            return new PropertyIteratorImpl(this, propMapConcurrent.values());
         }
 
         // TODO: copy the contents of the iterator to avoid ConcurrentModificationException?

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/AbstractBackendListenerClient.java
Patch:
@@ -24,8 +24,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.auto.service.AutoService;
-
 /**
  * An abstract implementation of the BackendListenerClient interface. This
  * implementation provides default implementations of most of the methods in the
@@ -51,7 +49,6 @@
  * @see BackendListener#sampleOccurred(org.apache.jmeter.samplers.SampleEvent)
  * @since 2.13
  */
-@AutoService(BackendListenerClient.class)
 public abstract class AbstractBackendListenerClient implements BackendListenerClient {
 
     private static final Logger log = LoggerFactory.getLogger(AbstractBackendListenerClient.class);

File: src/core/src/main/java/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -373,9 +373,6 @@ public static <S> Collection<S> loadServicesAndScanJars(
             try {
                 Class<? extends S> klass = Class.forName(className, false, classLoader)
                         .asSubclass(service);
-                if (!Modifier.isAbstract(klass.getModifiers())) {
-                    continue;
-                }
                 result.add(klass.getDeclaredConstructor().newInstance());
             } catch (Throwable e) {
                 if (e instanceof InvocationTargetException) {

File: src/core/src/main/java/org/apache/jmeter/gui/action/KeyStrokes.java
Patch:
@@ -77,6 +77,7 @@ private static int getMenuShortcutKeyMask() {
     public static final KeyStroke SAVE              = KeyStroke.getKeyStroke(KeyEvent.VK_S, CONTROL_MASK);
     public static final KeyStroke SAVE_ALL_AS       = KeyStroke.getKeyStroke(KeyEvent.VK_S, CONTROL_MASK | InputEvent.SHIFT_DOWN_MASK);
     public static final KeyStroke SEARCH_TREE       = KeyStroke.getKeyStroke(KeyEvent.VK_F, CONTROL_MASK);
+    public static final KeyStroke RESET_SEARCH_TREE = KeyStroke.getKeyStroke(KeyEvent.VK_F, CONTROL_MASK | InputEvent.ALT_DOWN_MASK);
     public static final KeyStroke TOGGLE            = KeyStroke.getKeyStroke(KeyEvent.VK_T, CONTROL_MASK);
     public static final KeyStroke PASTE             = KeyStroke.getKeyStroke(KeyEvent.VK_V, CONTROL_MASK);
     public static final KeyStroke WHAT_CLASS        = KeyStroke.getKeyStroke(KeyEvent.VK_W, CONTROL_MASK);

File: src/core/src/main/java/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -548,7 +548,7 @@ private void makeSearchMenu() {
         searchMenu.add(search);
         search.setEnabled(true);
 
-        JMenuItem searchReset = makeMenuItemRes("menu_search_reset", 'R', ActionNames.SEARCH_RESET); //$NON-NLS-1$
+        JMenuItem searchReset = makeMenuItemRes("menu_search_reset", 'R', ActionNames.SEARCH_RESET, KeyStrokes.RESET_SEARCH_TREE); //$NON-NLS-1$
         searchMenu.add(searchReset);
         searchReset.setEnabled(true);
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -243,7 +243,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
                         }));
         for (int i=0; i<model.getColumnCount(); i++) {
             if (model.getColumnClass(i).equals(String.class)) {
-                rowSorter.setValueComparator(i, new AlphaNumericComparator<Object>(o -> o.toString()));
+                rowSorter.setValueComparator(i, AlphaNumericComparator.TO_STRING_COMPARATOR);
             }
         }
         table.setRowSorter(rowSorter);

File: src/core/src/main/java/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -714,7 +714,7 @@ public void updateUIForHiddenComponents() {
 
     private String testPlanFile;
 
-    private final List<Stoppable> stoppables = Collections.synchronizedList(new ArrayList<Stoppable>());
+    private final List<Stoppable> stoppables = Collections.synchronizedList(new ArrayList<>());
 
     private TreeNodeNamingPolicy namingPolicy;
 

File: src/core/src/main/java/org/apache/jmeter/visualizers/CachingStatCalculator.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class CachingStatCalculator extends SamplingStatCalculator {
 
-    private final List<Sample> storedValues = Collections.synchronizedList(new ArrayList<Sample>());
+    private final List<Sample> storedValues = Collections.synchronizedList(new ArrayList<>());
 
     public CachingStatCalculator(String string) {
         super(string);

File: src/jorphan/src/main/java/org/apache/jorphan/util/AlphaNumericComparator.java
Patch:
@@ -30,14 +30,15 @@
  * Heavily influenced by https://codereview.stackexchange.com/questions/37192/number-aware-string-sorting-with-comparator
  */
 public class AlphaNumericComparator<T> implements Comparator<T> {
+    public static final Comparator<?> TO_STRING_COMPARATOR = new AlphaNumericComparator<>(Object::toString);
 
-    private final Function<T, String> converter;
+    private final Function<? super T, String> converter;
 
     /**
      * Constructs a comparator with a converter function
      * @param converter that generates a String value from the arguments given to {@link Comparator#compare(Object, Object)}
      */
-    public AlphaNumericComparator(Function<T, String> converter) {
+    public AlphaNumericComparator(Function<? super T, String> converter) {
         this.converter = converter;
     }
 

File: src/jorphan/src/main/java/org/apache/jorphan/util/AlphaNumericKeyComparator.java
Patch:
@@ -33,7 +33,7 @@ public class AlphaNumericKeyComparator implements Comparator<Map.Entry<Object, O
 
     private AlphaNumericKeyComparator() {
         // don't instantiate this class on your own.
-        this.comparator = new AlphaNumericComparator<Map.Entry<Object, Object>>(e -> e.getKey().toString());
+        this.comparator = new AlphaNumericComparator<>(e -> e.getKey().toString());
     }
 
     @Override

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -214,7 +214,7 @@ private static Pair<String, String> getVaryHeader(String headerName, Header[] re
         final Set<String> names = new HashSet<>(Arrays.asList(headerName.split(",\\s*")));
         final Map<String, List<String>> values = new HashMap<>();
         for (final String name: names) {
-            values.put(name, new ArrayList<String>());
+            values.put(name, new ArrayList<>());
         }
         for (Header header: reqHeaders) {
             if (names.contains(header.getName())) {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/Daemon.java
Patch:
@@ -116,8 +116,8 @@ public void run() {
         log.info("Test Script Recorder up and running!");
 
         // Maps to contain page and form encodings
-        Map<String, String> pageEncodings = Collections.synchronizedMap(new HashMap<String, String>());
-        Map<String, String> formEncodings = Collections.synchronizedMap(new HashMap<String, String>());
+        Map<String, String> pageEncodings = Collections.synchronizedMap(new HashMap<>());
+        Map<String, String> formEncodings = Collections.synchronizedMap(new HashMap<>());
         pageEncodings.put(AbstractSamplerCreator.DEFAULT_ENCODING_KEY, target.getDefaultEncoding());
 
         try {

File: src/protocol/jdbc/src/main/java/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -121,7 +121,7 @@ public void testStarted() {
             log.error("JDBC data source already defined for: {}", poolName);
         } else {
             String maxPool = getPoolMax();
-            perThreadPoolSet = Collections.synchronizedSet(new HashSet<BasicDataSource>());
+            perThreadPoolSet = Collections.synchronizedSet(new HashSet<>());
             if (maxPool.equals("0")){ // i.e. if we want per thread pooling
                 variables.putObject(poolName, new DataSourceComponentImpl()); // pool will be created later
             } else {

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java
Patch:
@@ -235,7 +235,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         mainPanel.add(jmsPropertiesPanel, "span, growx");
 
         mainPanel.add(msgChoice, "span");
-        fileEncoding = new JComboBox<String>(PublisherSampler.getSupportedEncodings());
+        fileEncoding = new JComboBox<>(PublisherSampler.getSupportedEncodings());
         fileEncoding.setEditable(true);
         mainPanel.add(JMeterUtils.labelFor(fileEncoding, "content_encoding"));
         mainPanel.add(fileEncoding, "span, growx");

File: src/core/src/main/java/org/apache/jmeter/services/FileServer.java
Patch:
@@ -423,6 +423,9 @@ private static BufferedReader createBufferedReader(FileEntry fileEntry) throws I
         if (!fileEntry.file.canRead() || !fileEntry.file.isFile()) {
             throw new IllegalArgumentException("File "+ fileEntry.file.getName()+ " must exist and be readable");
         }
+        // TODO: figure out the proper way to use BOMInputStream.builder()
+        //   See https://issues.apache.org/jira/browse/IO-792
+        @SuppressWarnings("deprecation")
         BOMInputStream fis = new BOMInputStream(Files.newInputStream(fileEntry.file.toPath())); //NOSONAR
         InputStreamReader isr = null;
         // If file encoding is specified, read using that encoding, otherwise use default platform encoding

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderInBrowser.java
Patch:
@@ -27,11 +27,11 @@
 import javax.swing.JProgressBar;
 import javax.swing.SwingUtilities;
 
-import com.google.auto.service.AutoService;
-
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 import javafx.application.Platform;
 import javafx.beans.value.ChangeListener;
 import javafx.beans.value.ObservableValue;

File: src/components/src/main/java/org/apache/jmeter/extractor/json/render/RenderAsJmesPathRenderer.java
Patch:
@@ -19,18 +19,21 @@
 
 import org.apache.jmeter.extractor.json.jmespath.JMESPathCache;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jmeter.visualizers.ResultRenderer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.node.ArrayNode;
+import com.google.auto.service.AutoService;
 
 /**
  * Implement ResultsRender for JMES Path tester
  * @since 5.2
  */
+@AutoService(ResultRenderer.class)
 public class RenderAsJmesPathRenderer extends AbstractRenderAsJsonRenderer {
     private static final Logger log = LoggerFactory.getLogger(RenderAsJmesPathRenderer.class);
     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsBoundaryExtractor.java
Patch:
@@ -41,9 +41,12 @@
 import org.apache.jorphan.gui.GuiUtils;
 import org.apache.jorphan.gui.JLabeledTextField;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implement ResultsRender for Boundary Extractor tester
  */
+@AutoService(ResultRenderer.class)
 public class RenderAsBoundaryExtractor implements ResultRenderer, ActionListener {
 
     private static final String BOUNDARY_EXTRACTOR_TESTER_COMMAND = "boundary_extractor_tester"; // $NON-NLS-1$

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsCssJQuery.java
Patch:
@@ -49,10 +49,13 @@
 import org.apache.jorphan.gui.JLabeledTextField;
 import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implement ResultsRender for CSS/JQuery tester
  * @since 2.10
  */
+@AutoService(ResultRenderer.class)
 public class RenderAsCssJQuery implements ResultRenderer, ActionListener {
 
     private static final String CSSJQUEY_TESTER_COMMAND = "cssjquery_tester"; // $NON-NLS-1$

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsDocument.java
Patch:
@@ -23,6 +23,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(ResultRenderer.class)
 public class RenderAsDocument extends SamplerResultTab implements ResultRenderer {
 
     private static final Logger log = LoggerFactory.getLogger(RenderAsDocument.class);

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsHTML.java
Patch:
@@ -33,6 +33,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(ResultRenderer.class)
 public class RenderAsHTML extends SamplerResultTab implements ResultRenderer {
     private static final Logger log = LoggerFactory.getLogger(RenderAsHTML.class);
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsHTMLFormatted.java
Patch:
@@ -21,6 +21,9 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.jsoup.Jsoup;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(ResultRenderer.class)
 public class RenderAsHTMLFormatted extends SamplerResultTab implements ResultRenderer {
 
     /** {@inheritDoc} */

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsHTMLWithEmbedded.java
Patch:
@@ -20,6 +20,9 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(ResultRenderer.class)
 public class RenderAsHTMLWithEmbedded extends RenderAsHTML
     implements ResultRenderer {
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsJSON.java
Patch:
@@ -29,6 +29,9 @@
 import net.minidev.json.parser.JSONParser;
 import net.minidev.json.parser.ParseException;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(ResultRenderer.class)
 public class RenderAsJSON extends SamplerResultTab implements ResultRenderer {
     private static final String TAB_SEPARATOR = "    "; //$NON-NLS-1$
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsRegexp.java
Patch:
@@ -50,9 +50,12 @@
 import org.apache.oro.text.regex.Perl5Compiler;
 import org.apache.oro.text.regex.Perl5Matcher;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implement ResultsRender for Regexp tester
  */
+@AutoService(ResultRenderer.class)
 public class RenderAsRegexp implements ResultRenderer, ActionListener {
 
     private static final String REGEXP_TESTER_COMMAND = "regexp_tester"; // $NON-NLS-1$

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsText.java
Patch:
@@ -20,6 +20,9 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(ResultRenderer.class)
 public class RenderAsText extends SamplerResultTab implements ResultRenderer {
 
     /** {@inheritDoc} */

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsXML.java
Patch:
@@ -53,6 +53,9 @@
 import org.w3c.tidy.Tidy;
 import org.xml.sax.SAXException;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(ResultRenderer.class)
 public class RenderAsXML extends SamplerResultTab
     implements ResultRenderer {
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsXPath.java
Patch:
@@ -59,10 +59,13 @@
 import org.w3c.dom.Document;
 import org.xml.sax.SAXException;
 
+import com.google.auto.service.AutoService;
+
 
 /**
  * Implement ResultsRender for XPath tester
  */
+@AutoService(ResultRenderer.class)
 public class RenderAsXPath implements ResultRenderer, ActionListener {
 
     private static final Logger log = LoggerFactory.getLogger(RenderAsXPath.class);

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsXPath2.java
Patch:
@@ -48,9 +48,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implement ResultsRender for XPath tester
  */
+@AutoService(ResultRenderer.class)
 public class RenderAsXPath2 implements ResultRenderer, ActionListener {
 
     private static final Logger log = LoggerFactory.getLogger(RenderAsXPath2.class);

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderInBrowser.java
Patch:
@@ -27,6 +27,8 @@
 import javax.swing.JProgressBar;
 import javax.swing.SwingUtilities;
 
+import com.google.auto.service.AutoService;
+
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.util.JMeterUtils;
 
@@ -43,6 +45,7 @@
  * {@link ResultRenderer} implementation that uses JAVAFX WebEngine to render as browser do
  * @since 3.2
  */
+@AutoService(ResultRenderer.class)
 public class RenderInBrowser extends SamplerResultTab implements ResultRenderer {
 
     private JFXPanel jfxPanel;

File: src/components/src/main/java/org/apache/jmeter/visualizers/RequestView.java
Patch:
@@ -19,12 +19,15 @@
 
 import javax.swing.JPanel;
 
+import org.apache.jorphan.reflect.JMeterService;
+
 /**
  * Interface for request panel in View Results Tree
  * All classes which implements this interface is display
  * on bottom tab in request panel
  *
  */
+@JMeterService
 public interface RequestView {
 
     /**

File: src/components/src/main/java/org/apache/jmeter/visualizers/RequestViewRaw.java
Patch:
@@ -30,10 +30,13 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.GuiUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * (historical) Panel to view request data
  *
  */
+@AutoService(RequestView.class)
 public class RequestViewRaw implements RequestView {
 
     // Used by Request Panel

File: src/components/src/main/java/org/apache/jmeter/visualizers/ResultRenderer.java
Patch:
@@ -22,11 +22,13 @@
 import javax.swing.JTabbedPane;
 
 import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jorphan.reflect.JMeterService;
 
 
 /**
  * Interface to results render
  */
+@JMeterService
 public interface ResultRenderer {
 
     void clearData();

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/AbstractBackendListenerClient.java
Patch:
@@ -24,6 +24,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * An abstract implementation of the BackendListenerClient interface. This
  * implementation provides default implementations of most of the methods in the
@@ -49,6 +51,7 @@
  * @see BackendListener#sampleOccurred(org.apache.jmeter.samplers.SampleEvent)
  * @since 2.13
  */
+@AutoService(BackendListenerClient.class)
 public abstract class AbstractBackendListenerClient implements BackendListenerClient {
 
     private static final Logger log = LoggerFactory.getLogger(AbstractBackendListenerClient.class);

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/BackendListenerClient.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jorphan.reflect.JMeterService;
 
 /**
  * This interface defines the interactions between the {@link BackendListener}
@@ -63,6 +64,7 @@
  *
  * @since 2.13
  */
+@JMeterService
 public interface BackendListenerClient {
 
     /**

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/influxdb/InfluxDBRawBackendListenerClient.java
Patch:
@@ -29,6 +29,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implementation of {@link BackendListenerClient} to write the response times
  * of every sample to InfluxDB. If more "raw" information is required in InfluxDB
@@ -38,6 +40,7 @@
  *
  * @since 5.3
  */
+@AutoService(BackendListenerClient.class)
 public class InfluxDBRawBackendListenerClient implements BackendListenerClient {
 
     private static final Logger log = LoggerFactory.getLogger(InfluxDBRawBackendListenerClient.class);

File: src/core/src/main/java/org/apache/jmeter/gui/action/AboutCommand.java
Patch:
@@ -42,10 +42,13 @@
 import org.apache.jmeter.gui.util.EscapeDialog;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * About Command. It may be extended in the future to add a list of installed
  * protocols, config options, etc.
  */
+@AutoService(Command.class)
 public class AboutCommand extends AbstractAction {
     private static final Set<String> commandSet;
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/ActionRouter.java
Patch:
@@ -309,6 +309,7 @@ private static void actionPerformed(Class<? extends Command> action, ActionEvent
         }
     }
 
+    @SuppressWarnings("deprecation")
     private static List<String> findClassesThatExtend(String className, String excluding, String[] searchPath) throws IOException, ClassNotFoundException {
 
         return ClassFinder.findClassesThatExtend(

File: src/core/src/main/java/org/apache/jmeter/gui/action/AddParent.java
Patch:
@@ -28,9 +28,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implements the Add Parent menu command
  */
+@AutoService(Command.class)
 public class AddParent extends AbstractAction {
     private static final Logger log = LoggerFactory.getLogger(AddParent.class);
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/AddThinkTimeBetweenEachStep.java
Patch:
@@ -33,10 +33,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Add ThinkTime (TestAction + UniformRandomTimer)
  * @since 3.2
  */
+@AutoService(Command.class)
 public class AddThinkTimeBetweenEachStep extends AbstractAction {
     private static final Logger log = LoggerFactory.getLogger(AddThinkTimeBetweenEachStep.class);
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/AddToTree.java
Patch:
@@ -32,6 +32,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(Command.class)
 public class AddToTree extends AbstractAction {
     private static final Logger log = LoggerFactory.getLogger(AddToTree.class);
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/ApplyNamingConvention.java
Patch:
@@ -32,10 +32,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Allows to apply naming convention on nodes
  * @since 3.2
  */
+@AutoService(Command.class)
 public class ApplyNamingConvention extends AbstractAction {
     private static final Logger log = LoggerFactory.getLogger(ApplyNamingConvention.class);
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/ChangeLanguage.java
Patch:
@@ -28,9 +28,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Change language
  */
+@AutoService(Command.class)
 public class ChangeLanguage extends AbstractActionWithNoRunningTest {
     private static final Set<String> commands = new HashSet<>();
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/ChangeParent.java
Patch:
@@ -38,9 +38,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Allows to change Controller implementation
  */
+@AutoService(Command.class)
 public class ChangeParent extends AbstractAction {
     private static final Logger log = LoggerFactory.getLogger(ChangeParent.class);
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/CheckDirty.java
Patch:
@@ -33,10 +33,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Check if the TestPlan has been changed since it was last saved
  *
  */
+@AutoService(Command.class)
 public class CheckDirty extends AbstractAction implements HashTreeTraverser, ActionListener {
     private static final Logger log = LoggerFactory.getLogger(CheckDirty.class);
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/Clear.java
Patch:
@@ -28,12 +28,15 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Handles the following actions:
  * - Clear (Data)
  * - Clear All (Data)
  * - Reset (Clear GUI)
  */
+@AutoService(Command.class)
 public class Clear extends AbstractAction {
     private static final Logger log = LoggerFactory.getLogger(Clear.class);
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/Close.java
Patch:
@@ -29,11 +29,14 @@
 import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * This command clears the existing test plan, allowing the creation of a New
  * test plan.
  *
  */
+@AutoService(Command.class)
 public class Close extends AbstractActionWithNoRunningTest {
 
     private static final Set<String> commands = new HashSet<>();

File: src/core/src/main/java/org/apache/jmeter/gui/action/CollapseExpand.java
Patch:
@@ -25,10 +25,13 @@
 
 import org.apache.jmeter.gui.GuiPackage;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Processes the Collapse All and Expand All options.
  *
  */
+@AutoService(Command.class)
 public class CollapseExpand extends AbstractAction {
 
     private static final Set<String> commands = new HashSet<>();

File: src/core/src/main/java/org/apache/jmeter/gui/action/CollapseExpandTreeBranch.java
Patch:
@@ -30,9 +30,12 @@
 import org.apache.jmeter.gui.tree.JMeterTreeListener;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Processes the collapse and expand of a tree branch
  */
+@AutoService(Command.class)
 public class CollapseExpandTreeBranch extends AbstractAction {
     private static final Set<String> commands = new HashSet<>();
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/Copy.java
Patch:
@@ -37,9 +37,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implements the Copy menu command
  */
+@AutoService(Command.class)
 public class Copy extends AbstractAction {
     private static final Logger log = LoggerFactory.getLogger(Copy.class);
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/CreateFunctionDialog.java
Patch:
@@ -23,6 +23,9 @@
 
 import org.apache.jmeter.functions.gui.FunctionHelper;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(Command.class)
 public class CreateFunctionDialog extends AbstractAction {
 
     private static final Set<String> commands;

File: src/core/src/main/java/org/apache/jmeter/gui/action/Cut.java
Patch:
@@ -24,9 +24,12 @@
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implements the Cut menu item command
  */
+@AutoService(Command.class)
 public class Cut extends AbstractAction {
     private static final Set<String> commands = new HashSet<>();
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/Duplicate.java
Patch:
@@ -26,9 +26,12 @@
 import org.apache.jmeter.gui.tree.JMeterTreeModel;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implements the Duplicate menu command
  */
+@AutoService(Command.class)
 public class Duplicate extends AbstractAction {
 
     private static final HashSet<String> commands = new HashSet<>();

File: src/core/src/main/java/org/apache/jmeter/gui/action/EditCommand.java
Patch:
@@ -25,9 +25,12 @@
 import org.apache.jmeter.gui.JMeterGUIComponent;
 import org.apache.jorphan.gui.ui.TextComponentUI;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implements the Edit menu item.
  */
+@AutoService(Command.class)
 public class EditCommand extends AbstractAction {
     private static final Set<String> commands = new HashSet<>();
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/EnableComponent.java
Patch:
@@ -26,9 +26,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implements the Enable menu item.
  */
+@AutoService(Command.class)
 public class EnableComponent extends AbstractAction {
     private static final Logger log = LoggerFactory.getLogger(EnableComponent.class);
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/ExitCommand.java
Patch:
@@ -26,6 +26,9 @@
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(Command.class)
 public class ExitCommand extends AbstractActionWithNoRunningTest {
 
     private static final Set<String> commands = new HashSet<>();

File: src/core/src/main/java/org/apache/jmeter/gui/action/Help.java
Patch:
@@ -35,9 +35,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implements the Help menu item.
  */
+@AutoService(Command.class)
 public class Help extends AbstractAction {
     private static final Logger log = LoggerFactory.getLogger(Help.class);
     private static final boolean USE_LOCAL_HELP =

File: src/core/src/main/java/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -42,13 +42,15 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
 import com.thoughtworks.xstream.converters.ConversionException;
 import com.thoughtworks.xstream.io.StreamException;
 
 /**
  * Handles the Open (load a new file) and Merge commands.
  *
  */
+@AutoService(Command.class)
 public class Load extends AbstractActionWithNoRunningTest {
     private static final Logger log = LoggerFactory.getLogger(Load.class);
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/LoadRecentProject.java
Patch:
@@ -34,10 +34,13 @@
 import javax.swing.JComponent;
 import javax.swing.JMenuItem;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Handles the loading of recent files, and also the content and
  * visibility of menu items for loading the recent files
  */
+@AutoService(Command.class)
 public class LoadRecentProject extends Load {
     /** Prefix for the user preference key */
     private static final String USER_PREFS_KEY = "recent_file_"; //$NON-NLS-1$

File: src/core/src/main/java/org/apache/jmeter/gui/action/LogLevelCommand.java
Patch:
@@ -29,10 +29,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implements log level setting menu item.
  * @since 3.2
  */
+@AutoService(Command.class)
 public class LogLevelCommand extends AbstractAction {
 
     private static final Logger log = LoggerFactory.getLogger(LogLevelCommand.class);

File: src/core/src/main/java/org/apache/jmeter/gui/action/LoggerPanelEnableDisable.java
Patch:
@@ -26,10 +26,13 @@
 
 import org.apache.jmeter.gui.GuiPackage;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Hide / unhide LoggerPanel.
  *
  */
+@AutoService(Command.class)
 public class LoggerPanelEnableDisable extends AbstractAction {
 
     private static final Set<String> commands = new HashSet<>();

File: src/core/src/main/java/org/apache/jmeter/gui/action/LookAndFeelCommand.java
Patch:
@@ -40,10 +40,12 @@
 import com.github.weisj.darklaf.LafManager;
 import com.github.weisj.darklaf.theme.DarculaTheme;
 import com.github.weisj.darklaf.theme.Theme;
+import com.google.auto.service.AutoService;
 
 /**
  * Implements the Look and Feel menu item.
  */
+@AutoService(Command.class)
 public class LookAndFeelCommand extends AbstractAction {
     private static final String JMETER_LAF = "jmeter.laf"; // $NON-NLS-1$
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/Move.java
Patch:
@@ -33,10 +33,13 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestPlan;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Move a node up/down/left/right
  *
  */
+@AutoService(Command.class)
 public class Move extends AbstractAction {
     private static final Set<String> commands = new HashSet<>();
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/OpenLinkAction.java
Patch:
@@ -29,6 +29,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(Command.class)
 public class OpenLinkAction extends AbstractAction {
 
     private static final Logger log = LoggerFactory.getLogger(OpenLinkAction.class);

File: src/core/src/main/java/org/apache/jmeter/gui/action/Paste.java
Patch:
@@ -33,9 +33,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Places a copied JMeterTreeNode under the selected node.
  */
+@AutoService(Command.class)
 public class Paste extends AbstractAction {
 
     private static final Logger log = LoggerFactory.getLogger(Paste.class);

File: src/core/src/main/java/org/apache/jmeter/gui/action/RemoteStart.java
Patch:
@@ -33,6 +33,9 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.HashTree;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(Command.class)
 public class RemoteStart extends AbstractAction {
 
     private static final String LOCAL_HOST = "127.0.0.1"; // NOSONAR $NON-NLS-1$

File: src/core/src/main/java/org/apache/jmeter/gui/action/Remove.java
Patch:
@@ -29,9 +29,12 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Implements the Remove menu item.
  */
+@AutoService(Command.class)
 public class Remove extends AbstractAction {
 
     private static final Set<String> commands = new HashSet<>();

File: src/core/src/main/java/org/apache/jmeter/gui/action/ResetSearchCommand.java
Patch:
@@ -26,9 +26,12 @@
 import org.apache.jmeter.gui.Searchable;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Reset Search
  */
+@AutoService(Command.class)
 public class ResetSearchCommand extends AbstractAction {
 
     private static final Set<String> commands = new HashSet<>();

File: src/core/src/main/java/org/apache/jmeter/gui/action/RevertProject.java
Patch:
@@ -27,10 +27,13 @@
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Handles the Revert Project command.
  *
  */
+@AutoService(Command.class)
 public class RevertProject extends AbstractActionWithNoRunningTest {
     private static final Set<String> commands = new HashSet<>();
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/SSLManagerCommand.java
Patch:
@@ -32,6 +32,8 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.util.SSLManager;
 
+import com.google.auto.service.AutoService;
+
 //
 /**
  * SSL Manager Command. The SSL Manager provides a mechanism to change your
@@ -52,6 +54,7 @@
  * already defined via the property.
  *
  */
+@AutoService(Command.class)
 public class SSLManagerCommand extends AbstractAction {
     private static final Set<String> commandSet;
     static {

File: src/core/src/main/java/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -56,12 +56,15 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Save the current test plan; implements:
  * Save
  * Save TestPlan As
  * Save (Selection) As
  */
+@AutoService(Command.class)
 public class Save extends AbstractAction {
     private static final Logger log = LoggerFactory.getLogger(Save.class);
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/SaveBeforeRun.java
Patch:
@@ -23,11 +23,14 @@
 
 import org.apache.jmeter.gui.GuiPackage;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Save Before Run Action To save test plan before GUI execution
  *
  * @since 4.0
  */
+@AutoService(Command.class)
 public class SaveBeforeRun extends AbstractAction {
     private static final Set<String> commands = new HashSet<>();
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/SaveGraphics.java
Patch:
@@ -34,6 +34,8 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.visualizers.Printable;
 
+import com.google.auto.service.AutoService;
+
 /**
  * SaveGraphics action is meant to be a generic reusable Action. The class will
  * use GUIPackage to get the current gui. Once it does, it checks to see if the
@@ -42,6 +44,7 @@
  * file if no extension is provided. If either .png or .tif is in the filename,
  * it will call SaveGraphicsService to save in the format.
  */
+@AutoService(Command.class)
 public class SaveGraphics extends AbstractAction {
 
     private static final Set<String> commands = new HashSet<>();

File: src/core/src/main/java/org/apache/jmeter/gui/action/SearchTreeCommand.java
Patch:
@@ -23,10 +23,13 @@
 
 import javax.swing.JFrame;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Search nodes for a text
  * TODO Enhance search dialog to select kind of nodes ....
  */
+@AutoService(Command.class)
 public class SearchTreeCommand extends AbstractAction {
 
     private static final Set<String> commands = new HashSet<>();

File: src/core/src/main/java/org/apache/jmeter/gui/action/Start.java
Patch:
@@ -45,6 +45,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Set of Actions to:
  * <ul>
@@ -57,6 +59,7 @@
  *      <li>Validate a set of Thread Groups with/without sleeping on the timers depending on jmeter properties</li>
  * </ul>
  */
+@AutoService(Command.class)
 public class Start extends AbstractAction {
 
     private static final Logger log = LoggerFactory.getLogger(Start.class);

File: src/core/src/main/java/org/apache/jmeter/gui/action/StopStoppables.java
Patch:
@@ -26,10 +26,13 @@
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.Stoppable;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Stops stopables (Proxy, Mirror)
  * @since 2.5.1
  */
+@AutoService(Command.class)
 public class StopStoppables extends AbstractAction implements ActionListener {
     private static final Set<String> commands = new HashSet<>();
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/TemplatesCommand.java
Patch:
@@ -21,10 +21,13 @@
 import java.util.HashSet;
 import java.util.Set;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Open Templates
  * @since 2.10
  */
+@AutoService(Command.class)
 public class TemplatesCommand extends AbstractActionWithNoRunningTest {
 
     private static final Set<String> commands = new HashSet<>();

File: src/core/src/main/java/org/apache/jmeter/gui/action/UndoCommand.java
Patch:
@@ -26,10 +26,13 @@
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jorphan.collections.HashTree;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Menu command to serve Undo/Redo
  * @since 2.12
  */
+@AutoService(Command.class)
 public class UndoCommand extends AbstractAction {
 
     private static final Set<String> commands = new HashSet<>();

File: src/core/src/main/java/org/apache/jmeter/gui/action/What.java
Patch:
@@ -35,6 +35,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  *
  * Debug class to show details of the currently selected object
@@ -43,6 +45,7 @@
  * Also enables/disables debug for the test element.
  *
  */
+@AutoService(Command.class)
 public class What extends AbstractAction {
     private static final Logger log = LoggerFactory.getLogger(What.class);
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/ZoomInOut.java
Patch:
@@ -24,10 +24,13 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.JMeterUIDefaults;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Zoom IN/OUT
  * @since 3.2
  */
+@AutoService(Command.class)
 public class ZoomInOut extends AbstractAction {
     private static final Set<String> commands = new HashSet<>();
 

File: src/core/src/main/java/org/apache/jmeter/gui/plugin/MenuCreator.java
Patch:
@@ -21,9 +21,12 @@
 import javax.swing.JMenuItem;
 import javax.swing.MenuElement;
 
+import org.apache.jorphan.reflect.JMeterService;
+
 /**
  * @since 2.10
  */
+@JMeterService
 public interface MenuCreator {
     enum MENU_LOCATION {
         FILE,

File: src/core/src/main/java/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -124,6 +124,8 @@ private static Set<String> classesToSkip() {
     private static void initializeMenus(
             Map<String, List<MenuInfo>> menus, Set<String> elementsToSkip) {
         try {
+            // TODO: migrate to ServiceLoader or something else
+            @SuppressWarnings("deprecation")
             List<String> guiClasses = ClassFinder
                     .findClassesThatExtend(
                             JMeterUtils.getSearchPaths(),

File: src/core/src/main/java/org/apache/jmeter/threads/RemoteThreadsLifeCycleListener.java
Patch:
@@ -17,10 +17,13 @@
 
 package org.apache.jmeter.threads;
 
+import org.apache.jorphan.reflect.JMeterService;
+
 /**
  * Interface notified when number of active threads changes
  * @since 2.10
  */
+@JMeterService
 public interface RemoteThreadsLifeCycleListener {
 
     /**

File: src/core/src/test/java/org/apache/jorphan/test/AllTests.java
Patch:
@@ -321,8 +321,10 @@ private static void initializeManager(String[] args) {
         }
     }
 
+    @SuppressWarnings("deprecation")
     private static List<String> findJMeterJUnitTests(String searchPathString) throws IOException {
         final String[] searchPaths = JOrphanUtils.split(searchPathString, ",");
+        // TODO: do we really need class searching here?
         return ClassFinder.findClasses(searchPaths, new JunitTestFilter());
     }
 

File: src/dist-check/src/test/java/org/apache/jmeter/junit/JMeterTest.java
Patch:
@@ -440,6 +440,7 @@ private void checkElementAlias(Object item) {
 
     public static Collection<Object> getObjects(Class<?> extendsClass) throws Throwable {
         String exName = extendsClass.getName();
+        @SuppressWarnings("deprecation")
         Iterator<String> classes = ClassFinder
                 .findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { extendsClass }).iterator();
         List<Object> objects = new ArrayList<>();

File: src/dist-check/src/test/java/org/apache/jmeter/testbeans/gui/PackageTest.java
Patch:
@@ -171,6 +171,7 @@ public void checkAllNecessaryKeysPresent() {
     public static Test suite() throws Exception {
         TestSuite suite = new TestSuite("Bean Resource Test Suite");
 
+        @SuppressWarnings("deprecation")
         List<String> testBeanClassNames = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { TestBean.class });
 
         boolean errorDetected = false;

File: src/functions/src/main/java/org/apache/jmeter/functions/BeanShell.java
Patch:
@@ -32,10 +32,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * A function which understands BeanShell
  * @since 1.X
  */
+@AutoService(Function.class)
 public class BeanShell extends AbstractFunction {
 
     private static final Logger log = LoggerFactory.getLogger(BeanShell.class);

File: src/functions/src/main/java/org/apache/jmeter/functions/CSVRead.java
Patch:
@@ -28,6 +28,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * The function represented by this class allows data to be read from CSV files.
  * Syntax is similar to StringFromFile function. The function allows the test to
@@ -53,6 +55,7 @@
  * {@code __CSVRead(*ONE,1);}, etc.
  * @since 1.9
  */
+@AutoService(Function.class)
 public class CSVRead extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(CSVRead.class);
 

File: src/functions/src/main/java/org/apache/jmeter/functions/ChangeCase.java
Patch:
@@ -31,6 +31,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Change Case Function
  *
@@ -45,6 +47,7 @@
  * @since 4.0
  *
  */
+@AutoService(Function.class)
 public class ChangeCase extends AbstractFunction {
     private static final Logger LOGGER = LoggerFactory.getLogger(ChangeCase.class);
     private static final List<String> DESC = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/CharFunction.java
Patch:
@@ -28,10 +28,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to generate chars from a list of decimal or hex values
  * @since 2.3.3
  */
+@AutoService(Function.class)
 public class CharFunction extends AbstractFunction {
 
     private static final Logger log = LoggerFactory.getLogger(CharFunction.class);

File: src/functions/src/main/java/org/apache/jmeter/functions/DateTimeConvertFunction.java
Patch:
@@ -31,13 +31,16 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * DateConvert function to change date format
  * Can optionally store it in a variable.
  *
  * @since 4.0
  *
  */
+@AutoService(Function.class)
 public class DateTimeConvertFunction extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(DateTimeConvertFunction.class);
 

File: src/functions/src/main/java/org/apache/jmeter/functions/DigestEncodeFunction.java
Patch:
@@ -34,6 +34,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Digest Encode Function that provides computing of different SHA-XXX, can
  * uppercase the result and store it in a variable.
@@ -44,6 +46,7 @@
  *
  * @since 4.0
  */
+@AutoService(Function.class)
 public class DigestEncodeFunction extends AbstractFunction {
 
     private static final Logger log = LoggerFactory.getLogger(DigestEncodeFunction.class);

File: src/functions/src/main/java/org/apache/jmeter/functions/EscapeHtml.java
Patch:
@@ -27,6 +27,8 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * <p>Function which escapes the characters in a <code>String</code> using HTML entities.</p>
  *
@@ -46,6 +48,7 @@
  * @see StringEscapeUtils#escapeHtml4(String) (Commons Lang)
  * @since 2.3.3
  */
+@AutoService(Function.class)
 public class EscapeHtml extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/EscapeOroRegexpChars.java
Patch:
@@ -30,10 +30,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Escape ORO meta characters
  * @since 2.9
  */
+@AutoService(Function.class)
 public class EscapeOroRegexpChars extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(EscapeOroRegexpChars.class);
 

File: src/functions/src/main/java/org/apache/jmeter/functions/EscapeXml.java
Patch:
@@ -27,6 +27,8 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * <p>Function which escapes the characters in a <code>String</code> using XML 1.0 entities.</p>
  *
@@ -43,6 +45,7 @@
  * @see StringEscapeUtils#escapeXml10(String) (Commons Lang)
  * @since 3.2
  */
+@AutoService(Function.class)
 public class EscapeXml extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/EvalFunction.java
Patch:
@@ -26,6 +26,8 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to evaluate a string which may contain variable or function references.
  *
@@ -34,6 +36,7 @@
  * Returns: the evaluated value
  * @since 2.3.1
  */
+@AutoService(Function.class)
 public class EvalFunction extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/EvalVarFunction.java
Patch:
@@ -29,6 +29,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to evaluate a string which may contain variable or function references.
  *
@@ -37,6 +39,7 @@
  * Returns: the evaluated value
  * @since 2.3.1
  */
+@AutoService(Function.class)
 public class EvalVarFunction extends AbstractFunction {
 
     private static final Logger log = LoggerFactory.getLogger(EvalVarFunction.class);

File: src/functions/src/main/java/org/apache/jmeter/functions/FileToString.java
Patch:
@@ -32,6 +32,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * FileToString Function to read a complete file into a String.
  * <p>
@@ -50,6 +52,7 @@
  * </ul>
  * @since 2.4
  */
+@AutoService(Function.class)
 public class FileToString extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(FileToString.class);
 

File: src/functions/src/main/java/org/apache/jmeter/functions/FileWrapper.java
Patch:
@@ -26,6 +26,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+
 /**
  * This class wraps the FileRowColContainer for use across multiple threads.
  * <p>
@@ -34,6 +35,7 @@
  * together with the current line number.
  *
  */
+//@AutoService(Function.class)
 public final class FileWrapper {
 
     private static final Logger log = LoggerFactory.getLogger(FileWrapper.class);

File: src/functions/src/main/java/org/apache/jmeter/functions/Groovy.java
Patch:
@@ -41,11 +41,14 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * __groovy function
  * Provides a Groovy interpreter
  * @since 3.1
  */
+@AutoService(Function.class)
 public class Groovy extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(Groovy.class);
 

File: src/functions/src/main/java/org/apache/jmeter/functions/IntSum.java
Patch:
@@ -27,12 +27,15 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Provides an intSum function that adds two or more integer values.
  *
  * @see LongSum
  * @since 1.8.1
  */
+@AutoService(Function.class)
 public class IntSum extends AbstractFunction {
     private static final List<String> desc = new ArrayList<>();
 

File: src/functions/src/main/java/org/apache/jmeter/functions/IsPropDefined.java
Patch:
@@ -26,11 +26,14 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Test if a JMeter property is defined
  *
  * @since 4.0
  */
+@AutoService(Function.class)
 public class IsPropDefined extends AbstractFunction {
     private static final List<String> desc = new ArrayList<>();
     private static final String KEY = "__isPropDefined";

File: src/functions/src/main/java/org/apache/jmeter/functions/IsVarDefined.java
Patch:
@@ -27,11 +27,14 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Test if a JMeter variable is defined
  *
  * @since 4.0
  */
+@AutoService(Function.class)
 public class IsVarDefined extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/IterationCounter.java
Patch:
@@ -29,11 +29,14 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Counter that can be referenced anywhere in the Thread Group. It can be configured per User (Thread Local)
  * or globally.
  * @since 1.X
  */
+@AutoService(Function.class)
 public class IterationCounter extends AbstractFunction implements ThreadListener {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/JavaScript.java
Patch:
@@ -40,10 +40,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * javaScript function implementation that executes a piece of JavaScript (not Java!) code and returns its value
  * @since 1.9
  */
+@AutoService(Function.class)
 public class JavaScript extends AbstractFunction {
     private static final String NASHORN_ENGINE_NAME = "nashorn"; //$NON-NLS-1$
 

File: src/functions/src/main/java/org/apache/jmeter/functions/Jexl2Function.java
Patch:
@@ -36,11 +36,14 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * A function which understands Commons JEXL2
  * @since 2.6
  */
 // For unit tests, see TestJexlFunction
+@AutoService(Function.class)
 public class Jexl2Function extends AbstractFunction implements ThreadListener {
 
     private static final Logger log = LoggerFactory.getLogger(Jexl2Function.class);

File: src/functions/src/main/java/org/apache/jmeter/functions/Jexl3Function.java
Patch:
@@ -37,11 +37,14 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * A function which understands Commons JEXL3
  * @since 3.0
  */
 // For unit tests, see TestJexlFunction
+@AutoService(Function.class)
 public class Jexl3Function extends AbstractFunction implements ThreadListener {
 
     private static final Logger log = LoggerFactory.getLogger(Jexl3Function.class);

File: src/functions/src/main/java/org/apache/jmeter/functions/LogFunction.java
Patch:
@@ -30,6 +30,8 @@
 import org.slf4j.LoggerFactory;
 import org.slf4j.event.Level;
 
+import com.google.auto.service.AutoService;
+
 /**
  * <p>
  * Function to log a message.
@@ -46,6 +48,7 @@
  * Returns: - the input string
  * @since 2.2
  */
+@AutoService(Function.class)
 public class LogFunction extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(LogFunction.class);
 

File: src/functions/src/main/java/org/apache/jmeter/functions/LogFunction2.java
Patch:
@@ -28,6 +28,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * <p>
  * Function to log a message.
@@ -43,6 +45,7 @@
  * Returns: - Empty String (so can be used where return value would be a nuisance)
  * @since 2.2
  */
+@AutoService(Function.class)
 public class LogFunction2 extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(LogFunction2.class);
 

File: src/functions/src/main/java/org/apache/jmeter/functions/LongSum.java
Patch:
@@ -27,11 +27,14 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Provides a longSum function that adds two or more long values.
  * @see IntSum
  * @since 2.3.2
  */
+@AutoService(Function.class)
 public class LongSum extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/MachineIP.java
Patch:
@@ -19,10 +19,13 @@
 
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Return Machine IP
  * @since 2.6
  */
+@AutoService(Function.class)
 public class MachineIP extends AbstractHostIPName {
 
     private static final String KEY = "__machineIP"; //$NON-NLS-1$

File: src/functions/src/main/java/org/apache/jmeter/functions/MachineName.java
Patch:
@@ -19,10 +19,13 @@
 
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Return Machine Host
  * @since 1.X
  */
+@AutoService(Function.class)
 public class MachineName extends AbstractHostIPName {
 
     private static final String KEY = "__machineName"; //$NON-NLS-1$

File: src/functions/src/main/java/org/apache/jmeter/functions/Property.java
Patch:
@@ -27,6 +27,8 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to get a JMeter property, and optionally store it
  *
@@ -41,6 +43,7 @@
  * - the property name itself
  * @since 2.0
  */
+@AutoService(Function.class)
 public class Property extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/Property2.java
Patch:
@@ -26,6 +26,8 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to get a JMeter property, or a default. Does not offer the option to
  * store the value, as it is just as easy to refetch it. This is a
@@ -46,6 +48,7 @@
  * not present - "1" (suitable for use in ThreadGroup GUI)
  * @since 2.0
  */
+@AutoService(Function.class)
 public class Property2 extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/Random.java
Patch:
@@ -28,11 +28,14 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Provides a Random function which returns a random long integer between a min
  * (first argument) and a max (second argument).
  * @since 1.9
  */
+@AutoService(Function.class)
 public class Random extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/RandomDate.java
Patch:
@@ -41,6 +41,7 @@
 
 import com.github.benmanes.caffeine.cache.Cache;
 import com.github.benmanes.caffeine.cache.Caffeine;
+import com.google.auto.service.AutoService;
 
 /**
  * RandomDate Function generates a date in a specific range
@@ -59,6 +60,7 @@
  *
  * @since 3.3
  */
+@AutoService(Function.class)
 public class RandomDate extends AbstractFunction {
 
     private static final Logger log = LoggerFactory.getLogger(RandomDate.class);

File: src/functions/src/main/java/org/apache/jmeter/functions/RandomFromMultipleVars.java
Patch:
@@ -31,6 +31,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Provides a RandomFromMultipleVars function which returns a random element from a multi valued extracted variable.
  * Those kind of variables are extracted by:
@@ -41,6 +43,7 @@
  *
  * @since 3.1
  */
+@AutoService(Function.class)
 public class RandomFromMultipleVars extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(RandomFromMultipleVars.class);
 

File: src/functions/src/main/java/org/apache/jmeter/functions/RandomString.java
Patch:
@@ -31,11 +31,14 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Provides a RandomString function which returns a random String of length (first argument)
  * using characters (second argument)
  * @since 2.6
  */
+@AutoService(Function.class)
 public class RandomString extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(RandomString.class);
 

File: src/functions/src/main/java/org/apache/jmeter/functions/RegexFunction.java
Patch:
@@ -39,13 +39,16 @@
 import org.apache.oro.text.regex.Util;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
+import com.google.auto.service.AutoService;
 /**
  * Implements regular expression parsing of sample results and variables
  * @since 1.X
  */
 
 // @see TestRegexFunction for unit tests
 
+@AutoService(Function.class)
 public class RegexFunction extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(RegexFunction.class);
 

File: src/functions/src/main/java/org/apache/jmeter/functions/SamplerName.java
Patch:
@@ -27,10 +27,13 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to return the name of the current sampler.
  * @since 2.5
  */
+@AutoService(Function.class)
 public class SamplerName extends AbstractFunction {
 
     private static final String KEY = "__samplerName"; //$NON-NLS-1$

File: src/functions/src/main/java/org/apache/jmeter/functions/SetProperty.java
Patch:
@@ -27,6 +27,8 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to set a JMeter property
  *
@@ -40,6 +42,7 @@
  * Returns: nothing or original value if the 3rd parameter is true
  * @since 2.1
  */
+@AutoService(Function.class)
 public class SetProperty extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/SplitFunction.java
Patch:
@@ -31,6 +31,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 // @see org.apache.jmeter.functions.PackageTest for unit tests
 
 /**
@@ -53,6 +55,7 @@
  * </ul>
  * @since 2.0.2
  */
+@AutoService(Function.class)
 public class SplitFunction extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(SplitFunction.class);
 

File: src/functions/src/main/java/org/apache/jmeter/functions/StringFromFile.java
Patch:
@@ -37,6 +37,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * <p>StringFromFile Function to read a String from a text file.</p>
  *
@@ -70,6 +72,7 @@
  * Because function instances are shared, it does not make sense to use the thread number as part of the file name.
  * @since 1.9
  */
+@AutoService(Function.class)
 public class StringFromFile extends AbstractFunction implements TestStateListener {
     private static final Logger log = LoggerFactory.getLogger(StringFromFile.class);
 

File: src/functions/src/main/java/org/apache/jmeter/functions/StringToFile.java
Patch:
@@ -41,6 +41,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * StringToFile Function to write a String to a file
  *
@@ -55,6 +57,7 @@
  *
  * @since 5.2
  */
+@AutoService(Function.class)
 public class StringToFile extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(StringToFile.class);
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/TestPlanName.java
Patch:
@@ -26,10 +26,13 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.services.FileServer;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Returns Test Plan name
  * @since 2.6
  */
+@AutoService(Function.class)
 public class TestPlanName extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/ThreadGroupName.java
Patch:
@@ -26,11 +26,14 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Returns Thread Group Name
  *
  * @since 5.0
  */
+@AutoService(Function.class)
 public class ThreadGroupName extends AbstractFunctionByKey {
     private static final String KEY = "__threadGroupName"; //$NON-NLS-1$
 

File: src/functions/src/main/java/org/apache/jmeter/functions/ThreadNumber.java
Patch:
@@ -25,10 +25,13 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to return the current thread number.
  * @since 1.X
  */
+@AutoService(Function.class)
 public class ThreadNumber extends AbstractFunction {
 
     private static final String KEY = "__threadNum"; //$NON-NLS-1$

File: src/functions/src/main/java/org/apache/jmeter/functions/TimeFunction.java
Patch:
@@ -35,12 +35,15 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 // See org.apache.jmeter.functions.TestTimeFunction for unit tests
 
 /**
  * __time() function - returns the current time in milliseconds
  * @since 2.2
  */
+@AutoService(Function.class)
 public class TimeFunction extends AbstractFunction {
 
     private static final String KEY = "__time"; // $NON-NLS-1$

File: src/functions/src/main/java/org/apache/jmeter/functions/TimeShift.java
Patch:
@@ -43,6 +43,7 @@
 
 import com.github.benmanes.caffeine.cache.Cache;
 import com.github.benmanes.caffeine.cache.Caffeine;
+import com.google.auto.service.AutoService;
 
 /**
  * timeShifting Function permit to shift a date
@@ -65,6 +66,7 @@
  *
  * @since 3.3
  */
+@AutoService(Function.class)
 public class TimeShift extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(TimeShift.class);
 

File: src/functions/src/main/java/org/apache/jmeter/functions/UnEscape.java
Patch:
@@ -28,6 +28,8 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to unescape any Java literals found in the String.
  * For example, it will turn a sequence of '\' and 'n' into a newline character,
@@ -36,6 +38,7 @@
  * @see StringEscapeUtils#unescapeJava(String)
  * @since 2.3.3
  */
+@AutoService(Function.class)
 public class UnEscape extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/UnEscapeHtml.java
Patch:
@@ -28,6 +28,8 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to unescape a string containing entity escapes
  * to a string containing the actual Unicode characters corresponding to the escapes.
@@ -42,6 +44,7 @@
  * @see StringEscapeUtils#unescapeHtml4(String)
  * @since 2.3.3
  */
+@AutoService(Function.class)
 public class UnEscapeHtml extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/UrlDecode.java
Patch:
@@ -30,11 +30,14 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to decode a application/x-www-form-urlencoded string.
  *
  * @since 2.10
  */
+@AutoService(Function.class)
 public class UrlDecode extends AbstractFunction {
 
     private static final String CHARSET_ENCODING = StandardCharsets.UTF_8.name();

File: src/functions/src/main/java/org/apache/jmeter/functions/UrlEncode.java
Patch:
@@ -30,11 +30,14 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to encode a string to a application/x-www-form-urlencoded string.
  *
  * @since 2.10
  */
+@AutoService(Function.class)
 public class UrlEncode extends AbstractFunction {
 
     private static final String CHARSET_ENCODING = StandardCharsets.UTF_8.name();

File: src/functions/src/main/java/org/apache/jmeter/functions/Uuid.java
Patch:
@@ -26,6 +26,8 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to create a UUID
  *
@@ -36,6 +38,7 @@
  * - A pseudo random UUID 4
  * @since 2.9
  */
+@AutoService(Function.class)
 public class Uuid extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/Variable.java
Patch:
@@ -27,6 +27,8 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Function to get a JMeter Variable
  *
@@ -39,6 +41,7 @@
  * - the default value if set, and if not the variable name itself
  * @since 2.3RC3
  */
+@AutoService(Function.class)
 public class Variable extends AbstractFunction {
 
     private static final List<String> desc = new ArrayList<>();

File: src/functions/src/main/java/org/apache/jmeter/functions/XPath.java
Patch:
@@ -29,6 +29,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 // @see org.apache.jmeter.functions.PackageTest for unit tests
 
 /**
@@ -45,6 +47,7 @@
  * is opened and used for all threads.
  * @since 2.0.3
  */
+@AutoService(Function.class)
 public class XPath extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(XPath.class);
 

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -57,10 +57,12 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.auto.service.AutoService;
 
 /**
  * Default implementation that handles classical HTTP textual + Multipart requests
  */
+@AutoService(SamplerCreator.class)
 public class DefaultSamplerCreator extends AbstractSamplerCreator {
     private static final Logger log = LoggerFactory.getLogger(DefaultSamplerCreator.class);
 

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/SamplerCreator.java
Patch:
@@ -23,10 +23,12 @@
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.TestElement;
+import org.apache.jorphan.reflect.JMeterService;
 
 /**
  * Factory of sampler
  */
+@JMeterService
 public interface SamplerCreator {
 
     /**

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/Filter.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.jmeter.protocol.http.util.accesslog;
 
 import org.apache.jmeter.testelement.TestElement;
+import org.apache.jorphan.reflect.JMeterService;
 
 /**
  * Description:<br>
@@ -35,6 +36,7 @@
  *
  */
 
+@JMeterService
 public interface Filter {
 
     /**

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java
Patch:
@@ -29,6 +29,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Description:<br>
  * <br>
@@ -69,6 +71,7 @@
  * that should be replaced.
  */
 @SuppressWarnings("InconsistentCapitalization")
+@AutoService(Filter.class)
 public class LogFilter implements Filter, Serializable {
 
     private static final long serialVersionUID = 241L;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/LogParser.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.jmeter.protocol.http.util.accesslog;
 
 import org.apache.jmeter.testelement.TestElement;
+import org.apache.jorphan.reflect.JMeterService;
 
 /**
  * Description:<br>
@@ -34,6 +35,7 @@
  *
  */
 
+@JMeterService
 public interface LogParser {
 
     /**

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/OrderPreservingLogParser.java
Patch:
@@ -19,6 +19,9 @@
 
 import org.apache.jmeter.testelement.TestElement;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(LogParser.class)
 public class OrderPreservingLogParser extends SharedTCLogParser {
 
     public OrderPreservingLogParser() {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java
Patch:
@@ -37,9 +37,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Provides Session Filtering for the AccessLog Sampler.
  */
+@AutoService(Filter.class)
 public class SessionFilter implements Filter, Serializable, TestCloneable,ThreadListener {
     private static final java.util.regex.Pattern IP_PATTERN = java.util.regex.Pattern.compile("\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}");
     private static final long serialVersionUID = 233L;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/SharedTCLogParser.java
Patch:
@@ -23,6 +23,9 @@
 import org.apache.jmeter.testelement.TestCloneable;
 import org.apache.jmeter.testelement.TestElement;
 
+import com.google.auto.service.AutoService;
+
+@AutoService(LogParser.class)
 public class SharedTCLogParser extends TCLogParser implements TestCloneable {
 
     public SharedTCLogParser() {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -36,6 +36,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Description:<br>
  * <br>
@@ -72,6 +74,7 @@
  */
 
 @SuppressWarnings("InconsistentCapitalization")
+@AutoService(LogParser.class)
 public class TCLogParser implements LogParser {
     protected static final Logger log = LoggerFactory.getLogger(TCLogParser.class);
 

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java
Patch:
@@ -56,9 +56,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.auto.service.AutoService;
+
 /**
  * Specializer panel to view a HTTP request parsed
  */
+@AutoService(RequestView.class)
 public class RequestViewHTTP implements RequestView {
 
     private static final Logger log = LoggerFactory.getLogger(RequestViewHTTP.class);

File: src/protocol/java/src/main/java/org/apache/jmeter/protocol/java/sampler/JavaSamplerClient.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jorphan.reflect.JMeterService;
 
 /**
  * This interface defines the interactions between the JavaSampler and external
@@ -59,6 +60,7 @@
  * how to implement this interface.
  *
  */
+@JMeterService
 public interface JavaSamplerClient {
     /**
      * Do any initialization required by this client. It is generally

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/WindowMode.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.jmeter.visualizers.backend;
 
+import java.util.Locale;
+
 import org.apache.jmeter.util.JMeterUtils;
 
 /**
@@ -35,6 +37,6 @@ public enum WindowMode {
      */
     public static WindowMode get() {
         String name = JMeterUtils.getPropDefault("backend_metrics_window_mode", FIXED.name());
-        return WindowMode.valueOf(name.toUpperCase());
+        return WindowMode.valueOf(name.toUpperCase(Locale.ROOT));
     }
 }

File: src/core/src/main/java/org/apache/jmeter/config/gui/SimpleConfigGui.java
Patch:
@@ -215,7 +215,7 @@ private Component createTablePanel() {
      * @return a GUI panel containing the buttons
      */
     private JPanel createButtonPanel() {
-        /** A button for adding new parameters to the table. */
+        // A button for adding new parameters to the table.
         JButton add = new JButton(JMeterUtils.getResString("add")); //$NON-NLS-1$
         add.setActionCommand(ADD);
         add.addActionListener(this);

File: src/core/src/main/java/org/apache/jmeter/control/IfController.java
Patch:
@@ -96,7 +96,6 @@ public boolean evaluate(String testElementName, String condition) {
             try {
                 Scriptable scope = cx.initStandardObjects(null);
                 Object cxResultObject = cx.evaluateString(scope, condition
-                /** * conditionString ** */
                 , "<cmd>", 1, null);
                 result = computeResultFromString(condition, Context.toString(cxResultObject));
             } catch (Exception e) {

File: src/core/src/main/java/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -399,7 +399,7 @@ public void run() {
             JMeterUtils.reportErrorToUser("Error occurred compiling the tree: - see log file", e);
             return; // no point continuing
         }
-        /**
+        /*
          * Notification of test listeners needs to happen after function
          * replacement, but before setting RunningVersion to true.
          */

File: src/core/src/main/java/org/apache/jmeter/gui/JMeterFileFilter.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.File;
 import java.util.Arrays;
+import java.util.Locale;
 
 /**
  * A file filter which allows files to be filtered based on a list of allowed
@@ -71,7 +72,7 @@ public JMeterFileFilter(String[] extensions, boolean allow) {
      */
     @Override
     public boolean accept(File f) {
-        return (allowDirs && f.isDirectory()) || accept(f.getName().toLowerCase());
+        return (allowDirs && f.isDirectory()) || accept(f.getName().toLowerCase(Locale.ROOT));
         // TODO - why lower case? OK to use the default Locale?
     }
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/SSLManagerCommand.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.util.Collections;
 import java.util.HashSet;
+import java.util.Locale;
 import java.util.Set;
 
 import javax.swing.JFileChooser;
@@ -127,7 +128,7 @@ public String getDescription() {
          */
         @Override
         public boolean accept(File testFile) {
-            String lowerCaseName = testFile.getName().toLowerCase();
+            String lowerCaseName = testFile.getName().toLowerCase(Locale.ROOT);
             return testFile.isDirectory()
             || lowerCaseName.endsWith(".p12")  //$NON-NLS-1$
             || lowerCaseName.endsWith(".jks")

File: src/core/src/main/java/org/apache/jmeter/report/dashboard/ReportGenerator.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Properties;
 import java.util.regex.Matcher;
@@ -181,7 +182,7 @@ private static String getSetterName(String propertyKey) {
         Matcher matcher = POTENTIAL_CAMEL_CASE_PATTERN.matcher(propertyKey);
         StringBuffer buffer = new StringBuffer(); // NOSONAR Unfortunately Matcher does not support StringBuilder
         while (matcher.find()) {
-            matcher.appendReplacement(buffer, matcher.group(1).toUpperCase());
+            matcher.appendReplacement(buffer, matcher.group(1).toUpperCase(Locale.ROOT));
         }
         matcher.appendTail(buffer);
         return buffer.toString();

File: src/core/src/main/java/org/apache/jmeter/testbeans/gui/TextAreaEditor.java
Patch:
@@ -24,6 +24,7 @@
 import java.beans.PropertyChangeListener;
 import java.beans.PropertyDescriptor;
 import java.beans.PropertyEditorSupport;
+import java.util.Locale;
 
 import org.apache.jmeter.gui.util.JSyntaxTextArea;
 import org.apache.jmeter.gui.util.JTextScrollPane;
@@ -133,7 +134,7 @@ public void propertyChange(PropertyChangeEvent evt) {
         Object source = evt.getSource();
         if (source instanceof ComboStringEditor) {
             ComboStringEditor cse = (ComboStringEditor) source;
-            String lang = cse.getAsText().toLowerCase();
+            String lang = cse.getAsText().toLowerCase(Locale.ROOT);
             textUI.setLanguage(lang);
         }
     }

File: src/functions/src/main/java/org/apache/jmeter/functions/ChangeCase.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Collection;
 import java.util.EnumSet;
 import java.util.List;
+import java.util.Locale;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.engine.util.CompoundVariable;
@@ -78,7 +79,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
     protected String changeCase(String originalString, String mode) {
         String targetString = originalString;
         // mode is case insensitive, allow upper for example
-        ChangeCaseMode changeCaseMode = ChangeCaseMode.typeOf(mode.toUpperCase());
+        ChangeCaseMode changeCaseMode = ChangeCaseMode.typeOf(mode.toUpperCase(Locale.ROOT));
         if (changeCaseMode != null) {
             switch (changeCaseMode) {
             case UPPER:

File: src/functions/src/main/java/org/apache/jmeter/functions/DigestEncodeFunction.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import java.util.Locale;
 
 import org.apache.commons.codec.binary.Hex;
 import org.apache.commons.lang3.StringUtils;
@@ -100,7 +101,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
     private static String uppercase(String encodedString, CompoundVariable[] values, int index) {
         String shouldUpperCase = values.length > index ? values[index].execute() : null;
         if (Boolean.parseBoolean(shouldUpperCase)) {
-            return encodedString.toUpperCase();
+            return encodedString.toUpperCase(Locale.ROOT);
         }
         return encodedString;
     }

File: src/functions/src/main/java/org/apache/jmeter/functions/LogFunction.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import java.util.Locale;
 
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.samplers.SampleResult;
@@ -141,7 +142,7 @@ private static void printDetails(java.io.PrintStream ps, String s, Throwable t,
      */
     static synchronized void logDetails(Logger logger, String stringToLog, String priorityString, Throwable throwable,
             String comment) {
-        String prio = priorityString.trim().toUpperCase();
+        String prio = priorityString.trim().toUpperCase(Locale.ROOT);
 
         if ("OUT".equals(prio)) {//$NON-NLS-1
             printDetails(System.out, stringToLog, throwable, comment);

File: src/functions/src/main/java/org/apache/jmeter/functions/StringToFile.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import java.util.Locale;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
@@ -82,7 +83,7 @@ private boolean writeToFile() throws IOException {
         String content = ((CompoundVariable) values[1]).execute();
         boolean append = true;
         if (values.length >= 3) {
-            String appendString = ((CompoundVariable) values[2]).execute().toLowerCase().trim();
+            String appendString = ((CompoundVariable) values[2]).execute().toLowerCase(Locale.ROOT).trim();
             if (!appendString.isEmpty()) {
                 append = Boolean.parseBoolean(appendString);
             }

File: src/functions/src/main/java/org/apache/jmeter/functions/ThreadGroupName.java
Patch:
@@ -40,10 +40,10 @@ public ThreadGroupName() {
         super(KEY, 0); //$NON-NLS-1$
     }
 
-    @Override
     /**
      * Get current thread group using sampler's context
      */
+    @Override
     public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException {
         JMeterContext context;
         if (currentSampler != null) {

File: src/jorphan/src/test/java/org/apache/jorphan/gui/ObjectTableModelTest.java
Patch:
@@ -22,6 +22,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.util.Arrays;
+import java.util.Locale;
 import java.util.stream.IntStream;
 
 import javax.swing.event.TableModelEvent;
@@ -62,7 +63,7 @@ public String getC() {
     @BeforeEach
     public void init() {
         String[] headers = { "a", "b", "c" };
-        Functor[] readFunctors = Arrays.stream(headers).map(name -> "get" + name.toUpperCase()).map(Functor::new).toArray(n -> new Functor[n]);
+        Functor[] readFunctors = Arrays.stream(headers).map(name -> "get" + name.toUpperCase(Locale.ROOT)).map(Functor::new).toArray(Functor[]::new);
         Functor[] writeFunctors = new Functor[headers.length];
         Class<?>[] editorClasses = new Class<?>[headers.length];
         Arrays.fill(editorClasses, String.class);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/curl/BasicCurlParser.java
Patch:
@@ -285,8 +285,8 @@ public int getLimitRate() {
          * @param limitRate the maximum transfer rate
          */
         public void setLimitRate(String limitRate) {
-            String unit = limitRate.substring(limitRate.length() - 1, limitRate.length()).toLowerCase();
-            int value = Integer.parseInt(limitRate.substring(0, limitRate.length() - 1).toLowerCase());
+            String unit = limitRate.substring(limitRate.length() - 1, limitRate.length()).toLowerCase(Locale.ROOT);
+            int value = Integer.parseInt(limitRate.substring(0, limitRate.length() - 1).toLowerCase(Locale.ROOT));
             switch (unit) {
             case "k":
                 this.limitRate = value * ONE_KILOBYTE_IN_CPS;
@@ -914,7 +914,7 @@ public void setAuthUserPasswd(String authentication, String url, Authorization a
     * @param authorization the object of authorization
     */
    private static void setAuthMechanism(String mechanism, Authorization authorization) {
-       switch (mechanism.toLowerCase()) {
+       switch (mechanism.toLowerCase(Locale.ROOT)) {
        case "basic":
            authorization.setMechanism(Mechanism.BASIC);
            break;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/parser/JsoupBasedHtmlParser.java
Patch:
@@ -20,6 +20,7 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Iterator;
+import java.util.Locale;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.protocol.http.util.ConversionUtils;
@@ -75,7 +76,7 @@ public void head(Node node, int depth) {
                 return;
             }
             Element tag = (Element) node;
-            String tagName = tag.tagName().toLowerCase();
+            String tagName = tag.tagName().toLowerCase(Locale.ROOT);
             if (tagName.equals(TAG_BODY)) {
                 extractAttribute(tag, ATT_BACKGROUND);
             } else if (tagName.equals(TAG_SCRIPT)) {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -1174,14 +1174,14 @@ private JPanel createTableButtonPanel(String addCommand, String deleteCommand, S
         deleteButton.addActionListener(this);
         buttonPanel.add(deleteButton);
 
-        /** A button for adding new excludes/includes to the table from the clipboard. */
+        // A button for adding new excludes/includes to the table from the clipboard.
         JButton addFromClipboard = new JButton(JMeterUtils.getResString("add_from_clipboard")); // $NON-NLS-1$
         addFromClipboard.setActionCommand(copyFromClipboard);
         addFromClipboard.addActionListener(this);
         buttonPanel.add(addFromClipboard);
 
         if(addSuggestedExcludes != null) {
-            /** A button for adding suggested excludes. */
+            // A button for adding suggested excludes.
             JButton addFromSuggestedExcludes = new JButton(JMeterUtils.getResString("add_from_suggested_excludes")); // $NON-NLS-1$
             addFromSuggestedExcludes.setActionCommand(addSuggestedExcludes);
             addFromSuggestedExcludes.addActionListener(this);

File: src/components/src/main/java/org/apache/jmeter/modifiers/gui/UserParametersGui.java
Patch:
@@ -71,7 +71,7 @@ public class UserParametersGui extends AbstractPreProcessorGui {
 
     private PowerTableModel tableModel;
 
-    private final int numUserColumns = 1;
+    private static final int numUserColumns = 1;
 
     private JButton addParameterButton;
     private JButton addUserButton;

File: src/components/src/main/java/org/apache/jmeter/visualizers/StatGraphVisualizer.java
Patch:
@@ -206,9 +206,9 @@ public class StatGraphVisualizer extends AbstractVisualizer implements Clearable
 
     private boolean saveGraphToFile = false;
 
-    private final int defaultWidth = 400;
+    private static final int defaultWidth = 400;
 
-    private final int defaultHeight = 300;
+    private static final int defaultHeight = 300;
 
     private final JComboBox<String> columnsList = new JComboBox<>(getLabels(GRAPH_COLUMNS, getGraphColumnsMsgParameters()));
 
@@ -253,7 +253,7 @@ public class StatGraphVisualizer extends AbstractVisualizer implements Clearable
     // Default checked
     private final JCheckBox valueLabelsVertical = new JCheckBox(JMeterUtils.getResString("aggregate_graph_value_labels_vertical"), true); // $NON-NLS-1$
 
-    private final Color colorBarGraph = Color.YELLOW;
+    private final static Color colorBarGraph = Color.YELLOW;
 
     private Color colorForeGraph = Color.BLACK;
 

File: src/core/src/main/java/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -464,6 +464,8 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
     private boolean idleTime = IDLE_TIME;
 
     // Does not appear to be used (yet)
+    // it is
+    @SuppressWarnings("FieldCanBeStatic")
     private final int assertionsResultsToSave = ASSERTIONS_RESULT_TO_SAVE;
 
     // Don't save this, as it is derived from the time format

File: src/functions/src/main/java/org/apache/jmeter/functions/RandomDate.java
Patch:
@@ -75,7 +75,7 @@ public class RandomDate extends AbstractFunction {
 
     // Ensure that these are set, even if no parameters are provided
     private Locale locale = JMeterUtils.getLocale(); // $NON-NLS-1$
-    private final ZoneId systemDefaultZoneID = ZoneId.systemDefault(); // $NON-NLS-1$
+    private static final ZoneId systemDefaultZoneID = ZoneId.systemDefault(); // $NON-NLS-1$
     private CompoundVariable[] values;
 
     private static final class LocaleFormatObject {

File: src/functions/src/main/java/org/apache/jmeter/functions/TimeShift.java
Patch:
@@ -80,7 +80,7 @@ public class TimeShift extends AbstractFunction {
     private CompoundVariable amountToShiftCompound; // $NON-NLS-1$
     private Locale locale = JMeterUtils.getLocale(); // $NON-NLS-1$
     private String variableName = ""; //$NON-NLS-1$
-    private final ZoneId systemDefaultZoneID = ZoneId.systemDefault();
+    private static final ZoneId systemDefaultZoneID = ZoneId.systemDefault();
 
 
     private static final class LocaleFormatObject {

File: src/components/src/main/java/org/apache/jmeter/assertions/JSONPathAssertion.java
Patch:
@@ -56,7 +56,7 @@ public class JSONPathAssertion extends AbstractTestElement implements Serializab
     private static final boolean USE_JAVA_REGEX = !JMeterUtils.getPropDefault(
             "jmeter.regex.engine", "oro").equalsIgnoreCase("oro");
 
-    private static ThreadLocal<DecimalFormat> decimalFormatter =
+    private static final ThreadLocal<DecimalFormat> decimalFormatter =
             ThreadLocal.withInitial(JSONPathAssertion::createDecimalFormat);
 
     private static DecimalFormat createDecimalFormat() {

File: src/components/src/main/java/org/apache/jmeter/gui/action/ExportTransactionAndSamplerNames.java
Patch:
@@ -80,7 +80,7 @@ public class ExportTransactionAndSamplerNames extends AbstractAction implements
      * Visitor to collect nodes matching the name
      */
     private static class SamplerAndTransactionNameVisitor implements HashTreeTraverser {
-        private Set<String> listOfTransactions = new TreeSet<>();
+        private final Set<String> listOfTransactions = new TreeSet<>();
         public SamplerAndTransactionNameVisitor() {
             super();
         }

File: src/components/src/main/java/org/apache/jmeter/modifiers/gui/UserParametersGui.java
Patch:
@@ -71,7 +71,7 @@ public class UserParametersGui extends AbstractPreProcessorGui {
 
     private PowerTableModel tableModel;
 
-    private int numUserColumns = 1;
+    private final int numUserColumns = 1;
 
     private JButton addParameterButton;
     private JButton addUserButton;

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsXML.java
Patch:
@@ -111,8 +111,8 @@ public void clearData() {
     private static class ExpandPopupMenu extends JPopupMenu implements ActionListener {
 
         private static final long serialVersionUID = 1L;
-        private JMenuItem expand;
-        private JMenuItem collapse;
+        private final JMenuItem expand;
+        private final JMenuItem collapse;
         private JTree tree;
 
         ExpandPopupMenu() {

File: src/components/src/main/java/org/apache/jmeter/visualizers/SearchableTreeNode.java
Patch:
@@ -41,7 +41,7 @@ public class SearchableTreeNode extends DefaultMutableTreeNode {
 
     private boolean childrenNodesHaveMatched;
 
-    private transient DefaultTreeModel treeModel;
+    private final transient DefaultTreeModel treeModel;
 
     public SearchableTreeNode() {
         this((SampleResult) null, null);

File: src/components/src/main/java/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -79,14 +79,14 @@ public class StatVisualizer extends AbstractVisualizer implements Clearable, Act
     private final JCheckBox useGroupName = new JCheckBox(
             JMeterUtils.getResString("aggregate_graph_use_group_name")); //$NON-NLS-1$
 
-    private transient ObjectTableModel model;
+    private final transient ObjectTableModel model;
 
     /** Lock used to protect tableRows update + model update */
     private final transient Object lock = new Object();
 
     private final Map<String, SamplingStatCalculator> tableRows = new ConcurrentHashMap<>();
 
-    private Deque<SamplingStatCalculator> newRows = new ConcurrentLinkedDeque<>();
+    private final Deque<SamplingStatCalculator> newRows = new ConcurrentLinkedDeque<>();
 
     private volatile boolean dataChanged;
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/SummaryReport.java
Patch:
@@ -123,7 +123,7 @@ public class SummaryReport extends AbstractVisualizer implements Clearable, Acti
     private final JCheckBox useGroupName =
         new JCheckBox(JMeterUtils.getResString("aggregate_graph_use_group_name"));            //$NON-NLS-1$
 
-    private transient ObjectTableModel model;
+    private final transient ObjectTableModel model;
 
     /**
      * Lock used to protect tableRows update + model update

File: src/components/src/main/java/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -115,9 +115,9 @@ public class TableVisualizer extends AbstractVisualizer implements Clearable {
 
     private final transient Calculator calc = new Calculator();
 
-    private Format format = new SimpleDateFormat("HH:mm:ss.SSS"); //$NON-NLS-1$
+    private final Format format = new SimpleDateFormat("HH:mm:ss.SSS"); //$NON-NLS-1$
 
-    private Deque<SampleResult> newRows = new ConcurrentLinkedDeque<>();
+    private final Deque<SampleResult> newRows = new ConcurrentLinkedDeque<>();
 
     // Column renderers
     private static final TableCellRenderer[] RENDERERS =

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/AbstractBackendListenerClient.java
Patch:
@@ -53,9 +53,9 @@ public abstract class AbstractBackendListenerClient implements BackendListenerCl
 
     private static final Logger log = LoggerFactory.getLogger(AbstractBackendListenerClient.class);
 
-    private UserMetric userMetrics = new UserMetric();
+    private final UserMetric userMetrics = new UserMetric();
 
-    private ConcurrentHashMap<String, SamplerMetric> metricsPerSampler = new ConcurrentHashMap<>();
+    private final ConcurrentHashMap<String, SamplerMetric> metricsPerSampler = new ConcurrentHashMap<>();
 
     /* Implements BackendListenerClient.setupTest(BackendListenerContext) */
     @Override

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/UserMetric.java
Patch:
@@ -32,7 +32,7 @@ public class UserMetric {
     private static final int SLIDING_WINDOW_SIZE = JMeterUtils.getPropDefault("backend_metrics_window", 100); //$NON-NLS-1$
 
     // Limit to sliding window of SLIDING_WINDOW_SIZE values
-    private DescriptiveStatistics usersStats = DescriptiveStatisticsFactory.createDescriptiveStatistics(SLIDING_WINDOW_SIZE);
+    private final DescriptiveStatistics usersStats = DescriptiveStatisticsFactory.createDescriptiveStatistics(SLIDING_WINDOW_SIZE);
 
     /**
      *

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/influxdb/InfluxdbBackendListenerClient.java
Patch:
@@ -52,7 +52,7 @@
 public class InfluxdbBackendListenerClient extends AbstractBackendListenerClient implements Runnable {
 
     private static final Logger log = LoggerFactory.getLogger(InfluxdbBackendListenerClient.class);
-    private ConcurrentHashMap<String, SamplerMetric> metricsPerSampler = new ConcurrentHashMap<>();
+    private final ConcurrentHashMap<String, SamplerMetric> metricsPerSampler = new ConcurrentHashMap<>();
     // Name of the measurement
     private static final String EVENTS_FOR_ANNOTATION = "events";
 

File: src/core/src/main/java/org/apache/jmeter/JMeter.java
Patch:
@@ -1167,13 +1167,13 @@ enum RunMode {
 
         private AtomicInteger startedRemoteEngines = new AtomicInteger(0);
 
-        private ConcurrentLinkedQueue<JMeterEngine> remoteEngines = new ConcurrentLinkedQueue<>();
+        private final ConcurrentLinkedQueue<JMeterEngine> remoteEngines = new ConcurrentLinkedQueue<>();
 
         private final ReportGenerator reportGenerator;
 
-        private RunMode runMode;
+        private final RunMode runMode;
 
-        private boolean remoteStop;
+        private final boolean remoteStop;
 
         /**
          * Listener for remote test

File: src/core/src/main/java/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -66,7 +66,7 @@ public class ArgumentsPanel extends AbstractConfigGui implements ActionListener
     private static final long serialVersionUID = 241L;
 
     /** The title label for this component. */
-    private JLabel tableLabel;
+    private final JLabel tableLabel;
 
     /** The table containing the list of arguments. */
     private transient JTable table;
@@ -85,7 +85,7 @@ public class ArgumentsPanel extends AbstractConfigGui implements ActionListener
     /**
      * Added background support for reporting tool
      */
-    private Color background;
+    private final Color background;
 
     /**
      * Boolean indicating whether this component is a standalone component or it

File: src/core/src/main/java/org/apache/jmeter/control/IfController.java
Patch:
@@ -123,7 +123,7 @@ public boolean evaluate(String testElementName, String condition) {
         }
     }
 
-    private static JsEvaluator JAVASCRIPT_EVALUATOR = USE_RHINO_ENGINE ? new RhinoJsEngine() : new NashornJsEngine();
+    private static final JsEvaluator JAVASCRIPT_EVALUATOR = USE_RHINO_ENGINE ? new RhinoJsEngine() : new NashornJsEngine();
 
     /**
      * Initialization On Demand Holder pattern

File: src/core/src/main/java/org/apache/jmeter/gui/HtmlReportAction.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.jmeter.util.JMeterUtils;
 
 public class HtmlReportAction extends AbstractAction implements MenuCreator {
-    private static Set<String> commands = new HashSet<>();
+    private static final Set<String> commands = new HashSet<>();
     private HtmlReportUI htmlReportPanel;
 
     static {

File: src/core/src/main/java/org/apache/jmeter/gui/HtmlReportUI.java
Patch:
@@ -52,7 +52,7 @@
 import org.slf4j.LoggerFactory;
 
 public class HtmlReportUI implements ActionListener {
-    private static Set<String> commands = new HashSet<>();
+    private static final Set<String> commands = new HashSet<>();
     private static final Logger LOGGER = LoggerFactory.getLogger(HtmlReportUI.class);
 
     private static final String CREATE_REQUEST = "CREATE_REQUEST";
@@ -166,7 +166,7 @@ private JPanel setupButtonPanel() {
     }
 
     private class ReportGenerationWorker extends SwingWorker<List<String>, String> {
-        private JButton reportLaunchButton;
+        private final JButton reportLaunchButton;
 
         public ReportGenerationWorker(JButton reportLaunchButton) {
             this.reportLaunchButton = reportLaunchButton;

File: src/core/src/main/java/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -187,12 +187,12 @@ public class MainFrame extends JFrame implements TestStateListener, Remoteable,
     /** LogTarget that receives ERROR or FATAL */
     private transient ErrorsAndFatalsCounterLogTarget errorsAndFatalsCounterLogTarget;
 
-    private javax.swing.Timer computeTestDurationTimer = new javax.swing.Timer(1000,
+    private final javax.swing.Timer computeTestDurationTimer = new javax.swing.Timer(1000,
             this::computeTestDuration);
 
-    private AtomicInteger errorOrFatal = new AtomicInteger(0);
+    private final AtomicInteger errorOrFatal = new AtomicInteger(0);
 
-    private javax.swing.Timer refreshErrorsTimer = new javax.swing.Timer(1000,
+    private final javax.swing.Timer refreshErrorsTimer = new javax.swing.Timer(1000,
             this::refreshErrors);
 
     /**

File: src/core/src/main/java/org/apache/jmeter/gui/UndoHistory.java
Patch:
@@ -61,7 +61,7 @@ public interface HistoryListener {
     private boolean working = false;
 
     /** History listeners */
-    private List<HistoryListener> listeners = new ArrayList<>();
+    private final List<HistoryListener> listeners = new ArrayList<>();
 
     private final UndoManager manager = new UndoManager();
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/HtmlReportGenerator.java
Patch:
@@ -43,9 +43,9 @@ public class HtmlReportGenerator {
     private static final Logger LOGGER = LoggerFactory.getLogger(HtmlReportGenerator.class);
     private static final long COMMAND_TIMEOUT = JMeterUtils.getPropDefault("generate_report_ui.generation_timeout", 300_000L);
 
-    private String csvFilePath;
-    private String userPropertiesFilePath;
-    private String outputDirectoryPath;
+    private final String csvFilePath;
+    private final String userPropertiesFilePath;
+    private final String outputDirectoryPath;
 
     public HtmlReportGenerator(String csvFilePath, String userPropertiesFilePath, String outputDirectoryPath) {
         this.csvFilePath = csvFilePath;

File: src/core/src/main/java/org/apache/jmeter/gui/action/RawTextSearcher.java
Patch:
@@ -25,8 +25,8 @@
  * Searcher implementation that searches text as is
  */
 public class RawTextSearcher implements Searcher {
-    private boolean caseSensitive;
-    private String textToSearch;
+    private final boolean caseSensitive;
+    private final String textToSearch;
 
 
     /**

File: src/core/src/main/java/org/apache/jmeter/gui/action/RegexpSearcher.java
Patch:
@@ -28,8 +28,8 @@
  */
 public class RegexpSearcher implements Searcher {
 
-    private boolean caseSensitive;
-    private String regexp;
+    private final boolean caseSensitive;
+    private final String regexp;
     /**
      * Constructor
      * @param caseSensitive is search case sensitive

File: src/core/src/main/java/org/apache/jmeter/gui/action/RemoteStart.java
Patch:
@@ -54,7 +54,7 @@ public class RemoteStart extends AbstractAction {
         commands.add(ActionNames.REMOTE_EXIT_ALL);
     }
 
-    private DistributedRunner distributedRunner = new DistributedRunner();
+    private final DistributedRunner distributedRunner = new DistributedRunner();
 
     public RemoteStart() {
     }

File: src/core/src/main/java/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -463,7 +463,7 @@ void convertSubTree(HashTree tree) {
 
     private static class PrivatePatternFileFilter implements IOFileFilter {
 
-        private Pattern pattern;
+        private final Pattern pattern;
 
         public PrivatePatternFileFilter(Pattern pattern) {
             if(pattern == null) {

File: src/core/src/main/java/org/apache/jmeter/gui/action/SearchTreeDialog.java
Patch:
@@ -105,7 +105,7 @@ public class SearchTreeDialog extends JDialog implements ActionListener { // NOS
 
     private transient Triple<String, Boolean, Boolean> lastSearchConditions = null;
 
-    private List<JMeterTreeNode> lastSearchResult = new ArrayList<>();
+    private final List<JMeterTreeNode> lastSearchResult = new ArrayList<>();
     private int currentSearchIndex;
 
     @VisibleForTesting

File: src/core/src/main/java/org/apache/jmeter/gui/action/SelectTemplatesDialog.java
Patch:
@@ -96,9 +96,9 @@ public class SelectTemplatesDialog extends JDialog implements ChangeListener, Ac
 
     private final JButton validateButton = new JButton();
 
-    private Map<String, JLabeledTextField> parametersTextFields = new LinkedHashMap<>();
+    private final Map<String, JLabeledTextField> parametersTextFields = new LinkedHashMap<>();
 
-    private JPanel actionBtnBar = new JPanel(new FlowLayout());
+    private final JPanel actionBtnBar = new JPanel(new FlowLayout());
 
     public SelectTemplatesDialog() {
         super((JFrame) null, JMeterUtils.getResString("template_title"), true); //$NON-NLS-1$

File: src/core/src/main/java/org/apache/jmeter/gui/action/template/TemplateManager.java
Patch:
@@ -124,8 +124,8 @@ private Map<String, Template> readTemplates() {
     }
 
     public static final class LoggingErrorHandler implements ErrorHandler {
-        private Logger logger;
-        private File file;
+        private final Logger logger;
+        private final File file;
 
         public LoggingErrorHandler(Logger logger, File file) {
             this.logger = logger;

File: src/core/src/main/java/org/apache/jmeter/gui/logging/GuiLogEventBus.java
Patch:
@@ -29,7 +29,7 @@ public class GuiLogEventBus {
     /**
      * Registered GUI log event listeners array.
      */
-    private List<GuiLogEventListener> listeners = new ArrayList<>();
+    private final List<GuiLogEventListener> listeners = new ArrayList<>();
 
     /**
      * Default constructor.

File: src/core/src/main/java/org/apache/jmeter/gui/logging/LogEventObject.java
Patch:
@@ -31,7 +31,7 @@ public class LogEventObject extends EventObject {
     private static final long serialVersionUID = 1L;
 
     private Level level;
-    private String seralizedString;
+    private final String seralizedString;
 
     public LogEventObject(Object source) {
         this(source, null);

File: src/core/src/main/java/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -47,7 +47,7 @@ public class JMeterTreeNode extends DefaultMutableTreeNode implements NamedTreeN
     private static final int TEST_PLAN_LEVEL = 1;
 
     // See Bug 54648
-    private transient Optional<JMeterTreeModel> treeModel;
+    private final transient Optional<JMeterTreeModel> treeModel;
 
     private boolean markedBySearch;
 

File: src/core/src/main/java/org/apache/jmeter/gui/tree/JMeterTreeTransferHandler.java
Patch:
@@ -43,7 +43,7 @@ public class JMeterTreeTransferHandler extends TransferHandler {
     private static final Logger log = LoggerFactory.getLogger(JMeterTreeTransferHandler.class);
 
     private DataFlavor nodeFlavor;
-    private DataFlavor[] jMeterTreeNodeDataFlavors = new DataFlavor[1];
+    private final DataFlavor[] jMeterTreeNodeDataFlavors = new DataFlavor[1];
 
     // hold the nodes that should be removed on drop
     private List<JMeterTreeNode> nodesForRemoval = null;
@@ -278,7 +278,7 @@ private JMeterTreeNode[] getDraggedNodes(Transferable t) {
     }
 
     private class NodesTransferable implements Transferable {
-        JMeterTreeNode[] nodes;
+        private final JMeterTreeNode[] nodes;
 
         public NodesTransferable(JMeterTreeNode[] nodes) {
             this.nodes = nodes;

File: src/core/src/main/java/org/apache/jmeter/gui/util/HeaderAsPropertyRendererWrapper.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class HeaderAsPropertyRendererWrapper implements TableCellRenderer {
 
-    private TableCellRenderer delegate;
+    private final TableCellRenderer delegate;
 
     /**
      * @param renderer {@link TableCellRenderer} to delegate to

File: src/core/src/main/java/org/apache/jmeter/gui/util/JSyntaxSearchToolBar.java
Patch:
@@ -51,7 +51,7 @@ public final class JSyntaxSearchToolBar implements ActionListener {
     /**
      * The component where we Search
      */
-    private JSyntaxTextArea dataField;
+    private final JSyntaxTextArea dataField;
 
     /**
      * @param dataField {@link JSyntaxTextArea} to use for searching

File: src/core/src/main/java/org/apache/jmeter/report/config/ReportGeneratorConfiguration.java
Patch:
@@ -281,8 +281,8 @@ void initialize(String subConfId, T subConfiguration)
     private Map<String, Long[]> apdexPerTransaction = new HashMap<>();
     private Pattern filteredSamplesPattern;
     private boolean ignoreTCFromTop5ErrorsBySampler;
-    private Map<String, ExporterConfiguration> exportConfigurations = new HashMap<>();
-    private Map<String, GraphConfiguration> graphConfigurations = new HashMap<>();
+    private final Map<String, ExporterConfiguration> exportConfigurations = new HashMap<>();
+    private final Map<String, GraphConfiguration> graphConfigurations = new HashMap<>();
 
     /**
      * Gets the overall sample filter.

File: src/core/src/main/java/org/apache/jmeter/report/config/SubConfiguration.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class SubConfiguration {
 
-    private HashMap<String, String> properties = new HashMap<>();
+    private final HashMap<String, String> properties = new HashMap<>();
 
     /**
      * Gets the properties of the item.

File: src/core/src/main/java/org/apache/jmeter/report/core/AbstractSampleWriter.java
Patch:
@@ -51,7 +51,7 @@ public abstract class AbstractSampleWriter extends SampleWriter {
 
     private static final String CHARSET = SaveService.getFileEncoding(StandardCharsets.UTF_8.displayName());
 
-    private static Logger log = LoggerFactory.getLogger(AbstractSampleWriter.class);
+    private static final Logger log = LoggerFactory.getLogger(AbstractSampleWriter.class);
 
     /** output writer to write samples to */
     protected PrintWriter writer;

File: src/core/src/main/java/org/apache/jmeter/report/core/CsvFile.java
Patch:
@@ -32,7 +32,7 @@ public class CsvFile extends File {
 
     /** The Constant serialVersionUID. */
     private static final long serialVersionUID = 4721600093557427167L;
-    private char separator;
+    private final char separator;
 
     public CsvFile(File parent, String child, char separator) {
         super(parent, child);

File: src/core/src/main/java/org/apache/jmeter/report/core/CsvSampleWriter.java
Patch:
@@ -38,13 +38,13 @@
 public class CsvSampleWriter extends AbstractSampleWriter {
 
     /** The number of columns for each row */
-    private int columnCount;
+    private final int columnCount;
 
     /** The separator to be used in between data on each row */
     private char separator;
 
     /** Description of the columns */
-    private SampleMetadata metadata;
+    private final SampleMetadata metadata;
 
     /** Number of samples written */
     private long sampleCount;

File: src/core/src/main/java/org/apache/jmeter/report/core/SampleBuilder.java
Patch:
@@ -50,9 +50,9 @@ public class SampleBuilder {
 
     private final SampleMetadata metadata;
 
-    private String[] data;
+    private final String[] data;
 
-    private NumberFormat floatFormatter;
+    private final NumberFormat floatFormatter;
 
     private int k = 0;
 

File: src/core/src/main/java/org/apache/jmeter/report/core/SampleMetadata.java
Patch:
@@ -42,7 +42,7 @@ public class SampleMetadata {
     List<String> columns;
 
     /** Index to map column names to their corresponding indexes */
-    private TreeMap<String, Integer> index = new TreeMap<>();
+    private final TreeMap<String, Integer> index = new TreeMap<>();
 
     /** character separator used for separating columns */
     private char separator;

File: src/core/src/main/java/org/apache/jmeter/report/processor/AbstractSampleConsumer.java
Patch:
@@ -60,7 +60,7 @@ public abstract class AbstractSampleConsumer extends AbstractSampleProcessor
      * index of sample metadata consumed by this consumer. Indexed by channel
      * numbers
      */
-    private Map<Integer, SampleMetadata> consumedMetadata = new TreeMap<>();
+    private final Map<Integer, SampleMetadata> consumedMetadata = new TreeMap<>();
 
     /**
      * Gets the data identified by the specified key from the current sample

File: src/core/src/main/java/org/apache/jmeter/report/processor/AbstractSampleProcessor.java
Patch:
@@ -30,7 +30,7 @@ public class AbstractSampleProcessor implements SampleProcessor {
 
     private SampleContext sampleContext;
 
-    private ArrayList<ChannelContext> channelContexts = new ArrayList<>();
+    private final ArrayList<ChannelContext> channelContexts = new ArrayList<>();
 
     /*
      * (non-Javadoc)

File: src/core/src/main/java/org/apache/jmeter/report/processor/AggregateConsumer.java
Patch:
@@ -32,10 +32,10 @@ public class AggregateConsumer extends AbstractSampleConsumer {
     private static final String MUST_NOT_BE_NULL = "%s must not be null";
 
     /** The aggregator. */
-    private Aggregator aggregator;
+    private final Aggregator aggregator;
 
     /** The selector. */
-    private SampleSelector<Double> selector;
+    private final SampleSelector<Double> selector;
 
     /**
      * Gets the aggregator.

File: src/core/src/main/java/org/apache/jmeter/report/processor/CsvFileSampleSource.java
Patch:
@@ -69,13 +69,13 @@ public class CsvFileSampleSource extends AbstractSampleSource {
     private static final Logger LOG = LoggerFactory.getLogger(CsvFileSampleSource.class);
 
     /** input csv files to be produced */
-    private File[] inputFiles;
+    private final File[] inputFiles;
 
     /** csv readers corresponding to the input files */
-    private CsvSampleReader[] csvReaders;
+    private final CsvSampleReader[] csvReaders;
 
     /** mock producer to produce samples to its consumers */
-    private PrivateProducer producer;
+    private final PrivateProducer producer;
 
     /**
      * Build a sample source from the specified input file and character

File: src/core/src/main/java/org/apache/jmeter/report/processor/ExternalSampleSorter.java
Patch:
@@ -91,9 +91,9 @@ public class ExternalSampleSorter extends AbstractSampleConsumer {
 
     private final BlockingQueue<Runnable> workQueue = new LinkedBlockingQueue<>();
 
-    private ThreadPoolExecutor pool;
+    private final ThreadPoolExecutor pool;
 
-    private volatile int nbProcessors;
+    private final int nbProcessors;
 
     private boolean parallelize;
 

File: src/core/src/main/java/org/apache/jmeter/report/processor/ListResultData.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class ListResultData implements ResultData, Iterable<ResultData> {
 
-    private List<ResultData> items = new ArrayList<>();
+    private final List<ResultData> items = new ArrayList<>();
 
     /*
      * (non-Javadoc)

File: src/core/src/main/java/org/apache/jmeter/report/processor/MapResultData.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class MapResultData implements ResultData {
 
-    private Map<String, ResultData> map = new HashMap<>();
+    private final Map<String, ResultData> map = new HashMap<>();
 
     /*
      * (non-Javadoc)

File: src/core/src/main/java/org/apache/jmeter/report/processor/MeanAggregator.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class MeanAggregator implements Aggregator {
 
-    private Mean mean = new Mean();
+    private final Mean mean = new Mean();
 
     /*
      * (non-Javadoc)

File: src/core/src/main/java/org/apache/jmeter/report/processor/SampleContext.java
Patch:
@@ -30,7 +30,7 @@
 public class SampleContext {
 
     private File workingDirectory;
-    private Map<String, Object> data = new HashMap<>();
+    private final Map<String, Object> data = new HashMap<>();
 
     /**
      * Return the root directory that consumers are authorized to use for

File: src/core/src/main/java/org/apache/jmeter/report/processor/TaggerConsumer.java
Patch:
@@ -38,7 +38,7 @@ public class TaggerConsumer<TIndex> extends AbstractSampleConsumer {
     public static final String DEFAULT_TAG_LABEL = "Tag";
 
     // Collection of sample builders for channels
-    private ArrayList<SampleBuilder> builders = new ArrayList<>();
+    private final ArrayList<SampleBuilder> builders = new ArrayList<>();
     private SampleIndexer<TIndex> sampleIndexer;
     private String tagLabel = DEFAULT_TAG_LABEL;
 

File: src/core/src/main/java/org/apache/jmeter/report/processor/Top5ErrorsSummaryData.java
Patch:
@@ -29,7 +29,7 @@
 public class Top5ErrorsSummaryData {
 
     private static final Long ONE = 1L;
-    private Map<String, Long> countPerError;
+    private final Map<String, Long> countPerError;
     private long total;
     private long errors;
 

File: src/core/src/main/java/org/apache/jmeter/report/processor/graph/AbstractGraphValueSelector.java
Patch:
@@ -24,7 +24,7 @@
  * Base class allowing to select whether we ignore or not TC Sample Results
  */
 abstract class AbstractGraphValueSelector implements GraphValueSelector {
-    private boolean ignoreTransactionController;
+    private final boolean ignoreTransactionController;
 
     /**
      *

File: src/core/src/main/java/org/apache/jmeter/report/processor/graph/AbstractVersusRequestsGraphConsumer.java
Patch:
@@ -207,9 +207,9 @@ public CsvSampleWriter getWriter() {
         }
 
         // Collection of sample builders for channels
-        private ArrayList<SampleBuilder> builders = new ArrayList<>();
-        private ArrayList<FileInfo> fileInfos = new ArrayList<>();
-        private Map<Long, Long> counts = new HashMap<>();
+        private final ArrayList<SampleBuilder> builders = new ArrayList<>();
+        private final ArrayList<FileInfo> fileInfos = new ArrayList<>();
+        private final Map<Long, Long> counts = new HashMap<>();
         boolean createdWorkDir = false;
         private final AbstractVersusRequestsGraphConsumer parent;
 

File: src/core/src/main/java/org/apache/jmeter/samplers/Entry.java
Patch:
@@ -28,11 +28,11 @@
 // TODO - the class contents are not used at present - could perhaps be removed
 public class Entry {
 
-    private Map<Class<?>, ConfigElement> configSet;
+    private final Map<Class<?>, ConfigElement> configSet;
 
     private Class<?> sampler;
 
-    private List<Assertion> assertions;
+    private final List<Assertion> assertions;
 
     public Entry() {
         configSet = new HashMap<>();

File: src/core/src/main/java/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -464,7 +464,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
     private boolean idleTime = IDLE_TIME;
 
     // Does not appear to be used (yet)
-    private int assertionsResultsToSave = ASSERTIONS_RESULT_TO_SAVE;
+    private final int assertionsResultsToSave = ASSERTIONS_RESULT_TO_SAVE;
 
     // Don't save this, as it is derived from the time format
     private boolean printMilliseconds = PRINT_MILLISECONDS;

File: src/core/src/main/java/org/apache/jmeter/samplers/StatisticalSampleSender.java
Patch:
@@ -51,7 +51,7 @@ public class StatisticalSampleSender extends AbstractSampleSender implements Ser
             DEFAULT_TIME_THRESHOLD);
 
     // should the samples be aggregated on thread name or thread group (default) ?
-    private static boolean KEY_ON_THREADNAME = JMeterUtils.getPropDefault("key_on_threadname", false);
+    private static final boolean KEY_ON_THREADNAME = JMeterUtils.getPropDefault("key_on_threadname", false);
 
     // Instance fields are constructed by the client when the instance is create in the test plan
     // and the field values are then transferred to the server copy by RMI serialisation/deserialisation

File: src/core/src/main/java/org/apache/jmeter/testbeans/gui/PasswordEditor.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class PasswordEditor extends PropertyEditorSupport implements ActionListener, FocusListener {
 
-    private JPasswordField textField;
+    private final JPasswordField textField;
 
     /**
      * Value on which we started the editing. Used to avoid firing

File: src/core/src/main/java/org/apache/jmeter/threads/JMeterContext.java
Patch:
@@ -51,7 +51,7 @@ public enum TestLogicalAction {
     private AbstractThreadGroup threadGroup;
     private int threadNum;
     private TestLogicalAction testLogicalAction = TestLogicalAction.CONTINUE;
-    private ConcurrentHashMap<String, Object> samplerContext = new ConcurrentHashMap<>(5);
+    private final ConcurrentHashMap<String, Object> samplerContext = new ConcurrentHashMap<>(5);
     private boolean recording;
 
     JMeterContext() {

File: src/core/src/main/java/org/apache/jmeter/threads/UnmodifiableJMeterVariables.java
Patch:
@@ -26,7 +26,7 @@
  * @since 3.3
  */
 class UnmodifiableJMeterVariables extends JMeterVariables {
-    private JMeterVariables variables;
+    private final JMeterVariables variables;
 
     /**
      * Wrap the {@code variables} to make them unmodifiable.

File: src/core/src/main/java/org/apache/jmeter/util/PropertiesBasedPrefixResolverForXpath2.java
Patch:
@@ -29,7 +29,7 @@
  * jmeter property xpath.namespace.config
  */
 public class PropertiesBasedPrefixResolverForXpath2 extends PrefixResolverDefault {
-    private Map<String, String> namespaceMap = new HashMap<>();
+    private final Map<String, String> namespaceMap = new HashMap<>();
 
     /**
      * @param xpathExpressionContext Node

File: src/core/src/main/java/org/apache/jmeter/util/TemplateUtil.java
Patch:
@@ -36,7 +36,7 @@
  */
 public final class TemplateUtil {
 
-    private static Configuration templateConfiguration = init();
+    private static final Configuration templateConfiguration = init();
 
     private TemplateUtil() {
         super();

File: src/core/src/main/java/org/apache/jmeter/util/keystore/JmeterKeyStore.java
Patch:
@@ -64,7 +64,7 @@ public final class JmeterKeyStore {
     private final int endIndex;
 
     /** name of the default alias */
-    private String clientCertAliasVarName;
+    private final String clientCertAliasVarName;
 
     private String[] names = new String[0];
     private Map<String, PrivateKey> privateKeyByAlias = new HashMap<>();

File: src/core/src/main/java/org/apache/jmeter/visualizers/SamplingStatCalculator.java
Patch:
@@ -34,7 +34,7 @@ public class SamplingStatCalculator {
 
     private long firstTime;
 
-    private String label;
+    private final String label;
 
     private volatile Sample currentSample;
 

File: src/examples/src/main/java/org/apache/jmeter/examples/sampler/ExampleSampler.java
Patch:
@@ -47,7 +47,7 @@ public class ExampleSampler extends AbstractSampler {
     // The name of the property used to hold our data
     public static final String DATA = "ExampleSampler.data"; //$NON-NLS-1$
 
-    private static AtomicInteger classCount = new AtomicInteger(0); // keep track of classes created
+    private static final AtomicInteger classCount = new AtomicInteger(0); // keep track of classes created
 
     // (for instructional purposes only!)
 

File: src/functions/src/main/java/org/apache/jmeter/functions/IterationCounter.java
Patch:
@@ -42,9 +42,9 @@ public class IterationCounter extends AbstractFunction implements ThreadListener
 
     private Object[] variables;
 
-    private AtomicInteger globalCounter = new AtomicInteger();
+    private final AtomicInteger globalCounter = new AtomicInteger();
 
-    private ThreadLocal<AtomicInteger> perThreadInt = ThreadLocal.withInitial(AtomicInteger::new);
+    private final ThreadLocal<AtomicInteger> perThreadInt = ThreadLocal.withInitial(AtomicInteger::new);
 
     static {
         desc.add(JMeterUtils.getResString("iteration_counter_arg_1")); //$NON-NLS-1$

File: src/functions/src/main/java/org/apache/jmeter/functions/RandomDate.java
Patch:
@@ -75,13 +75,13 @@ public class RandomDate extends AbstractFunction {
 
     // Ensure that these are set, even if no parameters are provided
     private Locale locale = JMeterUtils.getLocale(); // $NON-NLS-1$
-    private ZoneId systemDefaultZoneID = ZoneId.systemDefault(); // $NON-NLS-1$
+    private final ZoneId systemDefaultZoneID = ZoneId.systemDefault(); // $NON-NLS-1$
     private CompoundVariable[] values;
 
     private static final class LocaleFormatObject {
 
-        private String format;
-        private Locale locale;
+        private final String format;
+        private final Locale locale;
 
         public LocaleFormatObject(String format, Locale locale) {
             this.format = format;

File: src/functions/src/main/java/org/apache/jmeter/functions/TimeShift.java
Patch:
@@ -80,13 +80,13 @@ public class TimeShift extends AbstractFunction {
     private CompoundVariable amountToShiftCompound; // $NON-NLS-1$
     private Locale locale = JMeterUtils.getLocale(); // $NON-NLS-1$
     private String variableName = ""; //$NON-NLS-1$
-    private ZoneId systemDefaultZoneID = ZoneId.systemDefault();
+    private final ZoneId systemDefaultZoneID = ZoneId.systemDefault();
 
 
     private static final class LocaleFormatObject {
 
-        private String format;
-        private Locale locale;
+        private final String format;
+        private final Locale locale;
 
         public LocaleFormatObject(String format, Locale locale) {
             this.format = format;

File: src/generator/src/main/java/org/apache/jmeter/visualizers/GenerateTreeGui.java
Patch:
@@ -62,7 +62,7 @@ public class GenerateTreeGui extends AbstractConfigGui
 
     private static final long serialVersionUID = 1L;
 
-    private JButton generateButton = new JButton("Generate");
+    private final JButton generateButton = new JButton("Generate");
 
     public GenerateTreeGui() {
         super();

File: src/jorphan/src/main/java/org/apache/commons/cli/avalon/CLArgsParser.java
Patch:
@@ -78,7 +78,7 @@ public final class CLArgsParser {
     // variables used while parsing options.
     private char ch;
 
-    private String[] args;
+    private final String[] args;
 
     private boolean isLong;
 

File: src/jorphan/src/main/java/org/apache/jorphan/gui/JLabeledTextField.java
Patch:
@@ -41,9 +41,9 @@
 public class JLabeledTextField extends JPanel implements JLabeledField, FocusListener {
     private static final long serialVersionUID = 240L;
 
-    private JLabel mLabel;
+    private final JLabel mLabel;
 
-    private JTextField mTextField;
+    private final JTextField mTextField;
 
     private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<>(3);
 

File: src/jorphan/src/main/java/org/apache/jorphan/gui/MenuScroller.java
Patch:
@@ -55,8 +55,8 @@ public class MenuScroller {
 
     private JPopupMenu menu;
     private Component[] menuItems;
-    private MenuScrollItem upItem;
-    private MenuScrollItem downItem;
+    private final MenuScrollItem upItem;
+    private final MenuScrollItem downItem;
     private final MenuScrollListener menuListener = new MenuScrollListener();
     private final MouseWheelListener mouseWheelListener = new MouseScrollListener();
     private int scrollCount;

File: src/jorphan/src/main/java/org/apache/jorphan/gui/layout/VerticalLayout.java
Patch:
@@ -72,16 +72,16 @@ public class VerticalLayout implements LayoutManager, Serializable {
     public static final int BOTTOM = 2;
 
     /** The vertical vgap between components...defaults to 5. */
-    private int vgap;
+    private final int vgap;
 
     /** LEFT, RIGHT, CENTER or BOTH...how the components are justified. */
-    private int alignment;
+    private final int alignment;
 
     /**
      * TOP, BOTTOM or CENTER ...where are the components positioned in an
      * overlarge space.
      */
-    private int anchor;
+    private final int anchor;
 
     // Constructors
     /**

File: src/jorphan/src/main/java/org/apache/jorphan/util/AlphaNumericComparator.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class AlphaNumericComparator<T> implements Comparator<T> {
 
-    private Function<T, String> converter;
+    private final Function<T, String> converter;
 
     /**
      * Constructs a comparator with a converter function

File: src/jorphan/src/main/java/org/apache/jorphan/util/AlphaNumericKeyComparator.java
Patch:
@@ -29,7 +29,7 @@
 public class AlphaNumericKeyComparator implements Comparator<Map.Entry<Object, Object>> {
 
     public static final AlphaNumericKeyComparator INSTANCE = new AlphaNumericKeyComparator();
-    private AlphaNumericComparator<Map.Entry<Object, Object>> comparator;
+    private final AlphaNumericComparator<Map.Entry<Object, Object>> comparator;
 
     private AlphaNumericKeyComparator() {
         // don't instantiate this class on your own.

File: src/jorphan/src/main/java/org/apache/log/ContextMap.java
Patch:
@@ -53,7 +53,7 @@ public final class ContextMap
     private final ContextMap m_parent;
 
     ///Container to hold map of elements
-    private Hashtable m_map = new Hashtable();
+    private final Hashtable m_map = new Hashtable();
 
     ///Flag indicating whether this map should be readonly
     private transient boolean m_readOnly;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/config/gui/HttpDefaultsGui.java
Patch:
@@ -66,13 +66,13 @@ public class HttpDefaultsGui extends AbstractConfigGui {
     private JTextField embeddedAllowRE; // regular expression used to match against embedded resource URLs to allow
     private JTextField embeddedExcludeRE; // regular expression used to match against embedded resource URLs to discard
     private JTextField sourceIpAddr; // does not apply to Java implementation
-    private JComboBox<String> sourceIpType = new JComboBox<>(HTTPSamplerBase.getSourceTypeList());
+    private final JComboBox<String> sourceIpType = new JComboBox<>(HTTPSamplerBase.getSourceTypeList());
     private JTextField proxyScheme;
     private JTextField proxyHost;
     private JTextField proxyPort;
     private JTextField proxyUser;
     private JPasswordField proxyPass;
-    private JComboBox<String> httpImplementation = new JComboBox<>(HTTPSamplerFactory.getImplementations());
+    private final JComboBox<String> httpImplementation = new JComboBox<>(HTTPSamplerFactory.getImplementations());
     private JTextField connectTimeOut;
     private JTextField responseTimeOut;
 

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/config/gui/UrlConfigGui.java
Patch:
@@ -107,8 +107,8 @@ public class UrlConfigGui extends JPanel implements ChangeListener {
     // Tabbed pane that contains parameters and raw body
     private AbstractValidationTabbedPane postContentTabbedPane;
 
-    private boolean showRawBodyPane;
-    private boolean showFileUploadPane;
+    private final boolean showRawBodyPane;
+    private final boolean showFileUploadPane;
 
     /**
      * Constructor which is setup to show HTTP implementation, raw body pane and

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -135,7 +135,7 @@ public Principal getUserPrincipal() {
         }
     }
 
-    private KerberosManager kerberosManager = new KerberosManager();
+    private final KerberosManager kerberosManager = new KerberosManager();
 
     /**
      * Default Constructor.

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
Patch:
@@ -72,7 +72,7 @@ public class HC4CookieHandler implements CookieHandler {
 
     private static final PublicSuffixMatcher publicSuffixMatcher = PublicSuffixMatcherLoader.getDefault();
     @SuppressWarnings("deprecation")
-    private static Registry<CookieSpecProvider> registry  =
+    private static final Registry<CookieSpecProvider> registry  =
             RegistryBuilder.<CookieSpecProvider>create()
             // case is ignored bug registry as it converts to lowerCase(Locale.US)
             .register(CookieSpecs.BEST_MATCH, new DefaultCookieSpecProvider(publicSuffixMatcher))

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
Patch:
@@ -92,8 +92,8 @@ private static class LazyHolder {
     private volatile Exception except;
 
     private final int daemonPort;
-    private int maxThreadPoolSize;
-    private int maxQueueSize;
+    private final int maxThreadPoolSize;
+    private final int maxQueueSize;
 
     /**
      * Create a new Daemon with the specified port and target.

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -63,13 +63,13 @@ public class HttpTestSampleGui extends AbstractSamplerGui {
     private JTextField embeddedAllowRE; // regular expression used to match against embedded resource URLs to allow
     private JTextField embeddedExcludeRE; // regular expression used to match against embedded resource URLs to exclude
     private JTextField sourceIpAddr; // does not apply to Java implementation
-    private JComboBox<String> sourceIpType = new JComboBox<>(HTTPSamplerBase.getSourceTypeList());
+    private final JComboBox<String> sourceIpType = new JComboBox<>(HTTPSamplerBase.getSourceTypeList());
     private JTextField proxyScheme;
     private JTextField proxyHost;
     private JTextField proxyPort;
     private JTextField proxyUser;
     private JPasswordField proxyPass;
-    private JComboBox<String> httpImplementation = new JComboBox<>(HTTPSamplerFactory.getImplementations());
+    private final JComboBox<String> httpImplementation = new JComboBox<>(HTTPSamplerFactory.getImplementations());
     private JTextField connectTimeOut;
     private JTextField responseTimeOut;
 

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/curl/FileArgumentHolder.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.commons.lang3.tuple.Pair;
 
 public class FileArgumentHolder implements ArgumentHolder {
-    private String name;
-    private Map<String, String> metadata;
+    private final String name;
+    private final Map<String, String> metadata;
 
     private FileArgumentHolder(String name, Map<String, String> metadata) {
         this.name = name;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/curl/StringArgumentHolder.java
Patch:
@@ -45,8 +45,8 @@ public boolean equals(Object obj) {
         return Objects.equals(metadata, other.metadata) && Objects.equals(name, other.name);
     }
 
-    private String name;
-    private Map<String, String> metadata;
+    private final String name;
+    private final Map<String, String> metadata;
 
     private StringArgumentHolder(String name, Map<String, String> metadata) {
         this.name = name;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/gui/AuthPanel.java
Patch:
@@ -76,7 +76,7 @@ public class AuthPanel extends AbstractConfigGui implements ActionListener {
 
     private static final String CONTROLLED_BY_THREADGROUP = "Controlled_By_ThreadGroup"; //$NON-NLS-1$
 
-    private InnerTableModel tableModel;
+    private final InnerTableModel tableModel;
 
     private JCheckBox clearEachIteration;
 
@@ -449,7 +449,7 @@ public MechanismCellEditor() {
 
     private static class PasswordCellRenderer extends JPasswordField implements TableCellRenderer {
         private static final long serialVersionUID = 5169856333827579927L;
-        private Border myBorder;
+        private final Border myBorder;
 
         public PasswordCellRenderer() {
             super();

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/gui/DNSCachePanel.java
Patch:
@@ -103,7 +103,7 @@ public class DNSCachePanel extends AbstractConfigGui implements ActionListener {
     private JButton addHostButton;
     private JButton deleteHostButton;
 
-    private ButtonGroup providerDNSradioGroup = new ButtonGroup();
+    private final ButtonGroup providerDNSradioGroup = new ButtonGroup();
 
     private static final String[] COLUMN_RESOURCE_NAMES = {
         JMeterUtils.getResString("dns_hostname_or_ip"), //$NON-NLS-1$

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/gui/HeaderPanel.java
Patch:
@@ -313,7 +313,7 @@ private JPanel createButtonPanel() {
     private static class InnerTableModel extends AbstractTableModel {
         private static final long serialVersionUID = 240L;
 
-        private HeaderManager manager;
+        private final HeaderManager manager;
 
         public InnerTableModel(HeaderManager man) {
             manager = man;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/parser/JsoupBasedHtmlParser.java
Patch:
@@ -49,8 +49,8 @@ private URLPointer(URL newUrl) {
 
     private static final class JMeterNodeVisitor implements NodeVisitor {
 
-        private URLCollection urls;
-        private URLPointer baseUrl;
+        private final URLCollection urls;
+        private final URLPointer baseUrl;
 
         /**
          * @param baseUrl base url to extract possibly missing information from urls found in <code>urls</code>

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java
Patch:
@@ -58,7 +58,7 @@ public abstract class AbstractSamplerCreator implements SamplerCreator {
     private static final boolean NUMBER_REQUESTS =
         JMeterUtils.getPropDefault("proxy.number.requests", true); // $NON-NLS-1$
 
-    private static AtomicInteger REQUEST_NUMBER = new AtomicInteger(0);// running number
+    private static final AtomicInteger REQUEST_NUMBER = new AtomicInteger(0);// running number
 
 
     static {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -81,11 +81,11 @@ public class HttpRequestHdr {
 
     private String firstLine; // saved copy of first line for error reports
 
-    private String prefix;
+    private final String prefix;
 
-    private int httpSampleNameMode;
+    private final int httpSampleNameMode;
 
-    private String httpSampleNameFormat;
+    private final String httpSampleNameFormat;
 
     private boolean detectGraphQLRequest;
 

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -209,9 +209,9 @@ public class HTTPHC4Impl extends HTTPHCAbstractImpl {
     private static final InputStreamFactory BROTLI = BrotliInputStream::new;
 
     private static final class ManagedCredentialsProvider implements CredentialsProvider {
-        private AuthManager authManager;
-        private Credentials proxyCredentials;
-        private AuthScope proxyAuthScope;
+        private final AuthManager authManager;
+        private final Credentials proxyCredentials;
+        private final AuthScope proxyAuthScope;
 
         public ManagedCredentialsProvider(AuthManager authManager, AuthScope proxyAuthScope, Credentials proxyCredentials) {
             this.authManager = authManager;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/EncoderCache.java
Patch:
@@ -29,7 +29,7 @@ public class EncoderCache {
     /** The encoding which should be usd for URLs, according to HTTP specification */
     public static final String URL_ARGUMENT_ENCODING = StandardCharsets.UTF_8.name();
 
-    private Cache cache;
+    private final Cache cache;
 
     public EncoderCache(int cacheSize) {
         cache = new CacheLRU(cacheSize);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/HTTPFileArg.java
Patch:
@@ -53,7 +53,7 @@ public class HTTPFileArg extends AbstractTestElement implements Serializable {
     /** temporary storage area for the body header. */
     private String header;
 
-    private static Tika tika = createTika();
+    private static final Tika tika = createTika();
 
     /**
      * Constructor for an empty HTTPFileArg object

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/LoopbackHTTPSocket.java
Patch:
@@ -42,7 +42,7 @@ static class LoopbackOutputStream extends ByteArrayOutputStream{
 
     // wrap read() methods to track output buffer
     static class LoopBackInputStream extends ByteArrayInputStream{
-        private LoopbackOutputStream os;
+        private final LoopbackOutputStream os;
         @Override
         public synchronized int read() {
             buf=os.getBuffer();   // make sure buffer details

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java
Patch:
@@ -100,9 +100,9 @@ public class LogFilter implements Filter, Serializable {
 
     protected boolean PTRNFILTER = false;
 
-    private List<String> excludePatternStrings = new ArrayList<>();
+    private final List<String> excludePatternStrings = new ArrayList<>();
 
-    private  List<String> includePatternStrings = new ArrayList<>();
+    private final List<String> includePatternStrings = new ArrayList<>();
 
     protected ArrayList<Pattern> EXCPATTERNS = new ArrayList<>();
 

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/control/gui/JMSPropertiesPanel.java
Patch:
@@ -60,7 +60,7 @@ public class JMSPropertiesPanel extends JPanel implements ActionListener {
     private static final int COL_VALUE = 1;
     private static final int COL_TYPE = 2;
 
-    private InnerTableModel tableModel;
+    private final InnerTableModel tableModel;
 
     private JTable jmsPropertiesTable;
 

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/TemporaryQueueExecutor.java
Patch:
@@ -35,7 +35,7 @@ public class TemporaryQueueExecutor implements QueueExecutor {
     private static final Logger LOGGER = LoggerFactory.getLogger(TemporaryQueueExecutor.class);
     /** The sender and receiver. */
     private final TimeoutEnabledQueueRequestor requestor;
-    private int timeout;
+    private final int timeout;
 
     /**
      * Constructor.

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/TimeoutEnabledQueueRequestor.java
Patch:
@@ -44,9 +44,9 @@
  */
 public class TimeoutEnabledQueueRequestor {
     private static final Logger logger = LoggerFactory.getLogger(TimeoutEnabledQueueRequestor.class);
-    private TemporaryQueue tempQueue;
-    private MessageProducer sender;
-    private MessageConsumer receiver;
+    private final TemporaryQueue tempQueue;
+    private final MessageProducer sender;
+    private final MessageConsumer receiver;
 
     /**
      * Constructor for the <code>TimeoutEnabledQueueRequestor</code> class.

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/render/BinaryMessageRenderer.java
Patch:
@@ -30,7 +30,7 @@
 
 class BinaryMessageRenderer implements MessageRenderer<byte[]> {
 
-    private TextMessageRenderer delegate;
+    private final TextMessageRenderer delegate;
 
     public BinaryMessageRenderer(TextMessageRenderer delegate) {
         this.delegate = delegate;

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/render/MapMessageRenderer.java
Patch:
@@ -26,7 +26,7 @@
 
 public class MapMessageRenderer implements MessageRenderer<Map<String,Object>> {
 
-    private TextMessageRenderer delegate;
+    private final TextMessageRenderer delegate;
 
     public MapMessageRenderer(TextMessageRenderer delegate) {
         this.delegate = delegate;

File: src/protocol/ldap/src/main/java/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgumentsPanel.java
Patch:
@@ -55,7 +55,7 @@ public class LDAPArgumentsPanel extends AbstractConfigGui implements ActionListe
     private static final long serialVersionUID = 240L;
 
     /** The title label for this component. */
-    private JLabel tableLabel;
+    private final JLabel tableLabel;
 
     /** The table containing the list of arguments. */
     private transient JTable table;

File: src/protocol/ldap/src/main/java/org/apache/jmeter/protocol/ldap/sampler/LDAPSampler.java
Patch:
@@ -87,7 +87,7 @@ public class LDAPSampler extends AbstractSampler {
 
     // For In build test case using this counter
     // create the new entry in the server
-    private static AtomicInteger COUNTER = new AtomicInteger(0);
+    private static final AtomicInteger COUNTER = new AtomicInteger(0);
 
     private boolean searchFoundEntries;// TODO turn into parameter?
 

File: src/protocol/mail/src/main/java/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java
Patch:
@@ -86,8 +86,8 @@ public class SmtpPanel extends JPanel {
     private JButton addHeaderFieldButton;
     private JLabel headerFieldName;
     private JLabel headerFieldValue;
-    private Map<JTextField, JTextField> headerFields = new HashMap<>();
-    private Map<JButton,JTextField> removeButtons = new HashMap<>();
+    private final Map<JTextField, JTextField> headerFields = new HashMap<>();
+    private final Map<JButton,JTextField> removeButtons = new HashMap<>();
     private int headerGridY = 0;
 
     private SecuritySettingsPanel securitySettingsPanel;

File: src/components/src/main/java/org/apache/jmeter/assertions/CompareAssertion.java
Patch:
@@ -126,7 +126,7 @@ private void compareContent(CompareAssertionResult result) {
         }
     }
 
-    private void markContentFailure(CompareAssertionResult result, String prevContent, SampleResult prevResult,
+    private static void markContentFailure(CompareAssertionResult result, String prevContent, SampleResult prevResult,
             SampleResult currentResult, String currentContent) {
         result.setFailure(true);
         StringBuilder sb = new StringBuilder();
@@ -140,7 +140,7 @@ private void markContentFailure(CompareAssertionResult result, String prevConten
         result.setFailureMessage(JMeterUtils.getResString("comparison_differ_content")); //$NON-NLS-1$
     }
 
-    private void appendResultDetails(StringBuilder buf, SampleResult result) {
+    private static void appendResultDetails(StringBuilder buf, SampleResult result) {
         final String samplerData = result.getSamplerData();
         if (samplerData != null) {
             buf.append(samplerData.trim());

File: src/components/src/main/java/org/apache/jmeter/assertions/HTMLAssertion.java
Patch:
@@ -264,7 +264,7 @@ public void setErrorsOnly(boolean inErrorsOnly) {
         setProperty(new BooleanProperty(ERRORS_ONLY_KEY, inErrorsOnly));
     }
 
-    private long capToZero(long value) {
+    private static long capToZero(long value) {
         if (value == Long.MAX_VALUE) {
             return 0;
         }

File: src/components/src/main/java/org/apache/jmeter/assertions/XMLSchemaAssertion.java
Patch:
@@ -80,7 +80,7 @@ public String getXsdFileName() {
         return getPropertyAsString(XSD_FILENAME_KEY);
     }
 
-    private void setSchemaResult(AssertionResult result, String xmlStr, String xsdFileName) {
+    private static void setSchemaResult(AssertionResult result, String xmlStr, String xsdFileName) {
         try {
             DocumentBuilderFactory parserFactory = DocumentBuilderFactory.newInstance();
             parserFactory.setValidating(true);

File: src/components/src/main/java/org/apache/jmeter/assertions/gui/AssertionGui.java
Patch:
@@ -370,20 +370,20 @@ private JPanel createFieldPanel() {
         return panel;
     }
 
-    private void addField(JPanel panel, JToggleButton button, GridBagConstraints gbc) {
+    private static void addField(JPanel panel, JToggleButton button, GridBagConstraints gbc) {
         panel.add(button, gbc.clone());
         gbc.gridx++;
         gbc.fill=GridBagConstraints.HORIZONTAL;
     }
 
     // Next line
-    private void resetContraints(GridBagConstraints gbc) {
+    private static void resetContraints(GridBagConstraints gbc) {
         gbc.gridx = 0;
         gbc.gridy++;
         gbc.fill=GridBagConstraints.NONE;
     }
 
-    private void initConstraints(GridBagConstraints gbc) {
+    private static void initConstraints(GridBagConstraints gbc) {
         gbc.anchor = GridBagConstraints.NORTHWEST;
         gbc.fill = GridBagConstraints.NONE;
         gbc.gridheight = 1;

File: src/components/src/main/java/org/apache/jmeter/assertions/gui/XPath2Panel.java
Patch:
@@ -102,15 +102,15 @@ private JPanel makeParameterPanel() {
 
         return panel;
     }
-    private void resetContraints(GridBagConstraints gbc) {
+    private static void resetContraints(GridBagConstraints gbc) {
         gbc.gridx = 0;
         gbc.gridy++;
         gbc.weightx = 0;
         gbc.gridwidth = 1;
         gbc.fill = GridBagConstraints.NONE;
     }
 
-    private void initConstraints(GridBagConstraints gbc) {
+    private static void initConstraints(GridBagConstraints gbc) {
         gbc.anchor = GridBagConstraints.NORTHWEST;
         gbc.fill = GridBagConstraints.NONE;
         gbc.gridheight = 1;

File: src/components/src/main/java/org/apache/jmeter/assertions/jmespath/JMESPathAssertion.java
Patch:
@@ -122,7 +122,7 @@ private String buildFailureMessage(boolean invert) {
         return message.toString();
     }
 
-    private void addNegation(boolean invert, StringBuilder message) {
+    private static void addNegation(boolean invert, StringBuilder message) {
         if (invert) {
             message.append(" not");
         }

File: src/components/src/main/java/org/apache/jmeter/config/CSVDataSet.java
Patch:
@@ -242,7 +242,7 @@ private void setAlias(final JMeterContext context, String alias) {
      * trim content of array varNames
      * @param varsNames
      */
-    private void trimVarNames(String[] varsNames) {
+    private static void trimVarNames(String[] varsNames) {
         for (int i = 0; i < varsNames.length; i++) {
             varsNames[i] = varsNames[i].trim();
         }

File: src/components/src/main/java/org/apache/jmeter/config/CSVDataSetBeanInfo.java
Patch:
@@ -131,7 +131,7 @@ public static String[] getShareTags() {
      * list from https://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html
      * @return a String[] with the list of file encoding
      */
-    private String[] getListFileEncoding() {
+    private static String[] getListFileEncoding() {
         return JOrphanUtils.split(JMeterUtils.getPropDefault("csvdataset.file.encoding_list", ""), "|"); //$NON-NLS-1$
     }
 }

File: src/components/src/main/java/org/apache/jmeter/control/IncludeController.java
Patch:
@@ -172,7 +172,7 @@ protected HashTree loadIncludedElements() {
      * @param tree HashTree included Test Plan
      * @return HashTree Subset within Test Fragment or Empty HashTree
      */
-    private HashTree getProperBranch(HashTree tree) {
+    private static HashTree getProperBranch(HashTree tree) {
         for (Object o : new ArrayList<>(tree.list())) {
             TestElement item = (TestElement) o;
 
@@ -192,7 +192,7 @@ private HashTree getProperBranch(HashTree tree) {
     }
 
 
-    private void removeDisabledItems(HashTree tree) {
+    private static void removeDisabledItems(HashTree tree) {
         for (Object o : new ArrayList<>(tree.list())) {
             TestElement item = (TestElement) o;
             if (!item.isEnabled()) {

File: src/components/src/main/java/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -193,7 +193,7 @@ public HashTree getReplacementSubTree() {
     }
 
     @SuppressWarnings("JdkObsolete")
-    private void createSubTree(HashTree tree, JMeterTreeNode node) {
+    private static void createSubTree(HashTree tree, JMeterTreeNode node) {
         Enumeration<?> e = node.children();
         while (e.hasMoreElements()) {
             JMeterTreeNode subNode = (JMeterTreeNode)e.nextElement();

File: src/components/src/main/java/org/apache/jmeter/control/gui/ModuleControllerGui.java
Patch:
@@ -203,7 +203,7 @@ public void configure(TestElement el) {
         reinitialize();
     }
 
-    private String renderPath(Collection<?> path) {
+    private static String renderPath(Collection<?> path) {
         Iterator<?> iter = path.iterator();
         StringBuilder buf = new StringBuilder();
         boolean first = true;
@@ -316,7 +316,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
      *
      * @return path of a found element
      */
-    private TreeNode[] findPathInTreeModel(
+    private static TreeNode[] findPathInTreeModel(
             int level, TreeNode[] testPlanPath, DefaultMutableTreeNode parent)
     {
         if (level >= testPlanPath.length) {
@@ -356,7 +356,7 @@ private void focusSelectedOnTree(JMeterTreeNode selected)
         DefaultMutableTreeNode root = (DefaultMutableTreeNode) moduleToRunTreeNodes.getModel().getRoot();
         //treepath of test plan tree and module to run tree cannot be compared directly - moduleToRunTreeModel.getPathToRoot()
         //custom method for finding an JMeterTreeNode element in DefaultMutableTreeNode have to be used
-        TreeNode[] dmtnPath = this.findPathInTreeModel(1, filteredPath, root);
+        TreeNode[] dmtnPath = ModuleControllerGui.findPathInTreeModel(1, filteredPath, root);
         if (dmtnPath.length > 0) {
             TreePath treePath = new TreePath(dmtnPath);
             moduleToRunTreeNodes.setSelectionPath(treePath);

File: src/components/src/main/java/org/apache/jmeter/extractor/DebugPostProcessor.java
Patch:
@@ -97,7 +97,7 @@ public void process(){
         threadContext.getPreviousResult().addSubResult(sr);
     }
 
-    private void formatPropertyIterator(StringBuilder sb, PropertyIterator iter) {
+    private static void formatPropertyIterator(StringBuilder sb, PropertyIterator iter) {
         Map<String, String> map = new HashMap<>();
         while (iter.hasNext()) {
             JMeterProperty item = iter.next();
@@ -106,7 +106,7 @@ private void formatPropertyIterator(StringBuilder sb, PropertyIterator iter) {
         formatSet(sb, map.entrySet());
     }
 
-    private void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s) {
+    private static void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s) {
         @SuppressWarnings("unchecked")
         List<Map.Entry<Object, Object>> al = new ArrayList<>(s);
         al.sort(AlphaNumericKeyComparator.INSTANCE);

File: src/components/src/main/java/org/apache/jmeter/extractor/HtmlExtractor.java
Patch:
@@ -145,7 +145,7 @@ public void process() {
      * @param entry   the entry number in the list
      * @return MatchResult
      */
-    private String getCorrectMatch(List<String> matches, int entry) {
+    private static String getCorrectMatch(List<String> matches, int entry) {
         int matchSize = matches.size();
 
         if (matchSize <= 0 || entry > matchSize){

File: src/components/src/main/java/org/apache/jmeter/extractor/JSoupExtractor.java
Patch:
@@ -78,7 +78,7 @@ public int extract(String expression, String attribute, int matchNumber,
      * @param element Element
      * @return String value
      */
-    private String extractValue(String attribute, Element element) {
+    private static String extractValue(String attribute, Element element) {
         if (!JOrphanUtils.isBlank(attribute)) {
             return element.attr(attribute);
         } else {

File: src/components/src/main/java/org/apache/jmeter/extractor/JoddExtractor.java
Patch:
@@ -94,7 +94,7 @@ public int extract(String expression, String attribute, int matchNumber,
     }
 
 
-    private String extractValue(String attribute, Node element) {
+    private static String extractValue(String attribute, Node element) {
         if (!JOrphanUtils.isBlank(attribute)) {
             return element.getAttribute(attribute);
         } else {

File: src/components/src/main/java/org/apache/jmeter/extractor/XPath2Extractor.java
Patch:
@@ -75,11 +75,11 @@ public class XPath2Extractor
     private static final String MATCH_NUMBER    = "XPathExtractor2.matchNumber"; // $NON-NLS-1$
     //- JMX file attributes
 
-    private String concat(String s1,String s2){
+    private static String concat(String s1, String s2){
         return s1 + "_" + s2; // $NON-NLS-1$
     }
 
-    private String concat(String s1, int i){
+    private static String concat(String s1, int i){
         return s1 + "_" + i; // $NON-NLS-1$
     }
 

File: src/components/src/main/java/org/apache/jmeter/extractor/XPathExtractor.java
Patch:
@@ -90,11 +90,11 @@ public class XPathExtractor extends AbstractScopedTestElement implements
     //- JMX file attributes
 
 
-    private String concat(String s1,String s2){
+    private static String concat(String s1, String s2){
         return s1 + "_" + s2; // $NON-NLS-1$
     }
 
-    private String concat(String s1, int i){
+    private static String concat(String s1, int i){
         return s1 + "_" + i; // $NON-NLS-1$
     }
 

File: src/components/src/main/java/org/apache/jmeter/extractor/gui/BoundaryExtractorGui.java
Patch:
@@ -259,7 +259,7 @@ private JPanel makeParameterPanel() {
         return panel;
     }
 
-    private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc) {
+    private static void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc) {
         List<JComponent> item = field.getComponentList();
         panel.add(item.get(0), gbc.clone());
         gbc.gridx++;
@@ -269,14 +269,14 @@ private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints
     }
 
     // Next line
-    private void resetContraints(GridBagConstraints gbc) {
+    private static void resetContraints(GridBagConstraints gbc) {
         gbc.gridx = 0;
         gbc.gridy++;
         gbc.weightx = 0;
         gbc.fill=GridBagConstraints.NONE;
     }
 
-    private void initConstraints(GridBagConstraints gbc) {
+    private static void initConstraints(GridBagConstraints gbc) {
         gbc.anchor = GridBagConstraints.NORTHWEST;
         gbc.fill = GridBagConstraints.NONE;
         gbc.gridheight = 1;

File: src/components/src/main/java/org/apache/jmeter/extractor/gui/HtmlExtractorGui.java
Patch:
@@ -210,7 +210,7 @@ private JPanel makeParameterPanel() {
         return panel;
     }
 
-    private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc) {
+    private static void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc) {
         List<JComponent> item = field.getComponentList();
         panel.add(item.get(0), gbc.clone());
         gbc.gridx++;
@@ -220,14 +220,14 @@ private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints
     }
 
     // Next line
-    private void resetContraints(GridBagConstraints gbc) {
+    private static void resetContraints(GridBagConstraints gbc) {
         gbc.gridx = 0;
         gbc.gridy++;
         gbc.weightx = 0;
         gbc.fill=GridBagConstraints.NONE;
     }
 
-    private void initConstraints(GridBagConstraints gbc) {
+    private static void initConstraints(GridBagConstraints gbc) {
         gbc.anchor = GridBagConstraints.NORTHWEST;
         gbc.fill = GridBagConstraints.NONE;
         gbc.gridheight = 1;

File: src/components/src/main/java/org/apache/jmeter/extractor/gui/RegexExtractorGui.java
Patch:
@@ -244,7 +244,7 @@ private JPanel makeParameterPanel() {
         return panel;
     }
 
-    private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc) {
+    private static void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc) {
         List<JComponent> item = field.getComponentList();
         panel.add(item.get(0), gbc.clone());
         gbc.gridx++;
@@ -254,14 +254,14 @@ private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints
     }
 
     // Next line
-    private void resetContraints(GridBagConstraints gbc) {
+    private static void resetContraints(GridBagConstraints gbc) {
         gbc.gridx = 0;
         gbc.gridy++;
         gbc.weightx = 0;
         gbc.fill=GridBagConstraints.NONE;
     }
 
-    private void initConstraints(GridBagConstraints gbc) {
+    private static void initConstraints(GridBagConstraints gbc) {
         gbc.anchor = GridBagConstraints.NORTHWEST;
         gbc.fill = GridBagConstraints.NONE;
         gbc.gridheight = 1;

File: src/components/src/main/java/org/apache/jmeter/extractor/gui/XPathExtractorGui.java
Patch:
@@ -152,7 +152,7 @@ private JPanel makeParameterPanel() {
         return panel;
     }
 
-    private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc) {
+    private static void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc) {
         List<JComponent> item = field.getComponentList();
         panel.add(item.get(0), gbc.clone());
         gbc.gridx++;
@@ -161,14 +161,14 @@ private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints
         panel.add(item.get(1), gbc.clone());
     }
 
-    private void resetContraints(GridBagConstraints gbc) {
+    private static void resetContraints(GridBagConstraints gbc) {
         gbc.gridx = 0;
         gbc.gridy++;
         gbc.weightx = 0;
         gbc.fill=GridBagConstraints.NONE;
     }
 
-    private void initConstraints(GridBagConstraints gbc) {
+    private static void initConstraints(GridBagConstraints gbc) {
         gbc.anchor = GridBagConstraints.NORTHWEST;
         gbc.fill = GridBagConstraints.NONE;
         gbc.gridheight = 1;

File: src/components/src/main/java/org/apache/jmeter/extractor/json/jmespath/gui/JMESPathExtractorGui.java
Patch:
@@ -144,7 +144,7 @@ private JPanel makeParameterPanel() {
         return panel;
     }
 
-    private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc) {
+    private static void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc) {
         List<JComponent> item = field.getComponentList();
         panel.add(item.get(0), gbc.clone());
         gbc.gridx++;
@@ -153,14 +153,14 @@ private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints
         panel.add(item.get(1), gbc.clone());
     }
 
-    private void nextLine(GridBagConstraints gbc) {
+    private static void nextLine(GridBagConstraints gbc) {
         gbc.gridx = 0;
         gbc.gridy++;
         gbc.weightx = 0;
         gbc.fill = GridBagConstraints.NONE;
     }
 
-    private void initConstraints(GridBagConstraints gbc) {
+    private static void initConstraints(GridBagConstraints gbc) {
         gbc.anchor = GridBagConstraints.NORTHWEST;
         gbc.fill = GridBagConstraints.NONE;
         gbc.gridheight = 1;

File: src/components/src/main/java/org/apache/jmeter/extractor/json/jsonpath/JSONManager.java
Patch:
@@ -88,7 +88,7 @@ public List<Object> extractWithJsonPath(String jsonString, String jsonPath)
     }
 
     @SuppressWarnings("unchecked")
-    private String stringifyJSONObject(Object obj) {
+    private static String stringifyJSONObject(Object obj) {
         if (obj instanceof Map) {
             return new JSONObject((Map<String, ?>) obj).toJSONString();
         }

File: src/components/src/main/java/org/apache/jmeter/extractor/json/render/RenderAsJsonRenderer.java
Patch:
@@ -70,7 +70,7 @@ protected String process(String textToParse) {
         }
     }
 
-    private List<Object> extractWithTechnology(String textToParse, String expression) throws Exception {
+    private static List<Object> extractWithTechnology(String textToParse, String expression) throws Exception {
         JSONManager jsonManager = new JSONManager();
         return jsonManager.extractWithJsonPath(textToParse, expression);
     }

File: src/components/src/main/java/org/apache/jmeter/gui/action/ExportTransactionAndSamplerNames.java
Patch:
@@ -157,7 +157,7 @@ public void doAction(ActionEvent e) {
      * @param event {@link ActionEvent}
      * @param result String
      */
-    private final void showResult(ActionEvent event, String result) {
+    private static void showResult(ActionEvent event, String result) {
         EscapeDialog messageDialog = new EscapeDialog(getParentFrame(event),
                 JMeterUtils.getResString("export_transactions_title"), false); //$NON-NLS-1$
         Container contentPane = messageDialog.getContentPane();

File: src/components/src/main/java/org/apache/jmeter/modifiers/SampleTimeout.java
Patch:
@@ -168,11 +168,11 @@ public String toString() {
         return JMeterUtils.getResString("sample_timeout_memo"); //$NON-NLS-1$
     }
 
-    private String whoAmI(String id, TestElement o) {
+    private static String whoAmI(String id, TestElement o) {
         return id + " @" + System.identityHashCode(o)+ " '"+ o.getName() + "' " + (log.isDebugEnabled() ?  Thread.currentThread().getName() : "");
     }
 
-    private String getInfo(TestElement o) {
+    private static String getInfo(TestElement o) {
         return whoAmI(o.getClass().getSimpleName(), o);
     }
 

File: src/components/src/main/java/org/apache/jmeter/modifiers/gui/UserParametersGui.java
Patch:
@@ -182,7 +182,7 @@ protected String getText(Object value, int row, int column) {
         perIterationCheck.setSelected(false);
     }
 
-    private String getUserColName(int user){
+    private static String getUserColName(int user){
         return USER_COL_RESOURCE+UNDERSCORE+user;
     }
 

File: src/components/src/main/java/org/apache/jmeter/sampler/DebugSampler.java
Patch:
@@ -88,7 +88,7 @@ public SampleResult sample(Entry e) {
         return res;
     }
 
-    private void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s) {
+    private static void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s) {
         @SuppressWarnings("unchecked")
         List<Map.Entry<Object, Object>> al = new ArrayList<>(s);
         al.sort(AlphaNumericKeyComparator.INSTANCE);

File: src/components/src/main/java/org/apache/jmeter/timers/ConstantThroughputTimer.java
Patch:
@@ -217,7 +217,7 @@ private long calculateDelay() {
         return delay;
     }
 
-    private long calculateSharedDelay(ThroughputInfo info, long milliSecPerRequest) {
+    private static long calculateSharedDelay(ThroughputInfo info, long milliSecPerRequest) {
         final long now = System.currentTimeMillis();
         final long calculatedDelay;
 

File: src/components/src/main/java/org/apache/jmeter/timers/poissonarrivals/ConstantPoissonProcessGenerator.java
Patch:
@@ -145,7 +145,7 @@ public double next() {
         return events.get(events.position() - 1);
     }
 
-    private boolean valuesAreEqualWithPrecision(double throughput, double lastThroughput) {
+    private static boolean valuesAreEqualWithPrecision(double throughput, double lastThroughput) {
         return Math.abs(throughput - lastThroughput) < PRECISION;
     }
 }

File: src/components/src/main/java/org/apache/jmeter/visualizers/AssertionVisualizer.java
Patch:
@@ -72,7 +72,7 @@ public void clearData() {
         textArea.setText(""); // $NON-NLS-1$
     }
 
-    private String getAssertionResult(SampleResult res) {
+    private static String getAssertionResult(SampleResult res) {
         if (res != null) {
             StringBuilder display = new StringBuilder();
             AssertionResult[] assertionResults = res.getAssertionResults();

File: src/components/src/main/java/org/apache/jmeter/visualizers/AxisGraph.java
Patch:
@@ -320,7 +320,7 @@ public void paintComponent(Graphics graphics) {
         }
     }
 
-    private double findMax(double[][] _data) {
+    private static double findMax(double[][] _data) {
         double max = _data[0][0];
         for (double[] dArray : _data) {
             for (double d : dArray) {
@@ -332,7 +332,7 @@ private double findMax(double[][] _data) {
         return max;
     }
 
-    private String squeeze(String input, int _maxLength) {
+    private static String squeeze(String input, int _maxLength) {
         if (input.length() > _maxLength) {
             return input.substring(0,_maxLength-ELLIPSIS_LEN)+ELLIPSIS;
         }

File: src/components/src/main/java/org/apache/jmeter/visualizers/GraphVisualizer.java
Patch:
@@ -297,7 +297,7 @@ private JTextField createYAxisField(int length) {
      * @return a panel containing both the dynamic and static parts of a Y axis
      *         label
      */
-    private JPanel createYAxisPanel(String labelResourceName, JTextField field) {
+    private static JPanel createYAxisPanel(String labelResourceName, JTextField field) {
         JPanel panel = new JPanel(new FlowLayout());
         JLabel label = new JLabel(JMeterUtils.getResString(labelResourceName));
 
@@ -437,7 +437,7 @@ private JTextField createInfoField(Color color, int length) {
      * @param field
      *            the field this label is being created for.
      */
-    private JLabel createInfoLabel(String labelResourceName, JTextField field) {
+    private static JLabel createInfoLabel(String labelResourceName, JTextField field) {
         JLabel label = new JLabel(JMeterUtils.getResString(labelResourceName));
         label.setForeground(field.getForeground());
         label.setLabelFor(field);
@@ -469,7 +469,7 @@ private JLabel createInfoLabel(String labelResourceName, JTextField field) {
      *            parameter is null, this section of the panel will be left
      *            blank.
      */
-    private Box createInfoColumn(JLabel label1, JTextField field1, JLabel label2, JTextField field2) {
+    private static Box createInfoColumn(JLabel label1, JTextField field1, JLabel label2, JTextField field2) {
         // This column actually consists of a row with two sub-columns
         // The first column contains the labels, and the second
         // column contains the fields.

File: src/components/src/main/java/org/apache/jmeter/visualizers/MailerVisualizer.java
Patch:
@@ -419,7 +419,7 @@ private void updateVisualizer(MailerModel model) {
     /**
      * Shows a message using a DialogBox.
      */
-    private void displayMessage(String message, boolean isError) {
+    private static void displayMessage(String message, boolean isError) {
         int type = isError ? JOptionPane.ERROR_MESSAGE : JOptionPane.INFORMATION_MESSAGE;
         JOptionPane.showMessageDialog(null, message, isError ?
                 JMeterUtils.getResString("mailer_msg_title_error") :  // $NON-NLS-1$

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsXPath.java
Patch:
@@ -157,7 +157,7 @@ private String process(String textToParse, XPathExtractor extractor) {
      * @return Document
      *
      */
-    private Document parseResponse(String unicodeData, XPathExtractor extractor)
+    private static Document parseResponse(String unicodeData, XPathExtractor extractor)
       throws IOException, ParserConfigurationException,SAXException,TidyException
     {
       //TODO: validate contentType for reasonable types?

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsXPath2.java
Patch:
@@ -143,7 +143,7 @@ private String process(String textToParse, XPath2Extractor extractor) {
     }
 
 
-    private String getDocumentNamespaces(String textToParse) {
+    private static String getDocumentNamespaces(String textToParse) {
         StringBuilder result = new StringBuilder();
         try {
             List<String[]> namespaces = XPathUtil.getNamespaces(textToParse);
@@ -280,7 +280,7 @@ private JPanel createXpathExtractorTasksPanel() {
         return panel;
     }
 
-    private void initConstraints(GridBagConstraints gbc) {
+    private static void initConstraints(GridBagConstraints gbc) {
         gbc.fill = GridBagConstraints.HORIZONTAL;
         gbc.gridheight = 1;
         gbc.gridwidth = 1;

File: src/components/src/main/java/org/apache/jmeter/visualizers/RespTimeGraphChart.java
Patch:
@@ -369,7 +369,7 @@ private void drawSample(String _title, String[] _xAxisLabels,
         }
     }
 
-    private int getTopValue(double value, RoundingMode roundingMode) {
+    private static int getTopValue(double value, RoundingMode roundingMode) {
         String maxStr = String.valueOf(Math.round(value));
         StringBuilder divValueStr = new StringBuilder(maxStr.length()+1);
         divValueStr.append("1");
@@ -399,7 +399,7 @@ public void paintComponent(Graphics graphics) {
      * @param datas array of positive or NaN doubles
      * @return double
      */
-    private double findMax(double[][] datas) {
+    private static double findMax(double[][] datas) {
         double max = 0;
         for (double[] data : datas) {
             for (final double value : data) {

File: src/components/src/main/java/org/apache/jmeter/visualizers/RespTimeGraphVisualizer.java
Patch:
@@ -278,7 +278,7 @@ public RespTimeGraphVisualizer() {
         init();
     }
 
-    private String[] keys(Map<String, ?> map) {
+    private static String[] keys(Map<String, ?> map) {
         return map.keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY);
     }
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -646,7 +646,7 @@ public void setBackgroundColor(Color backGround){
         this.backGround = backGround;
     }
 
-    private void setFirstColumnPreferredSize(JTable table) {
+    private static void setFirstColumnPreferredSize(JTable table) {
         TableColumn column = table.getColumnModel().getColumn(0);
         column.setMaxWidth(300);
         column.setPreferredWidth(180);

File: src/components/src/main/java/org/apache/jmeter/visualizers/SearchTreePanel.java
Patch:
@@ -151,7 +151,7 @@ public void actionPerformed(ActionEvent e) {
     /**
      * @param searchableTreeNode
      */
-    private void doResetSearch(SearchableTreeNode searchableTreeNode) {
+    private static void doResetSearch(SearchableTreeNode searchableTreeNode) {
         searchableTreeNode.reset();
         searchableTreeNode.updateState();
         for (int i = 0; i < searchableTreeNode.getChildCount(); i++) {
@@ -178,7 +178,7 @@ private boolean doSearch() {
      * @param searcher
      * @param node
      */
-    private boolean searchInNode(Searcher searcher, SearchableTreeNode node) {
+    private static boolean searchInNode(Searcher searcher, SearchableTreeNode node) {
         node.reset();
         Object userObject = node.getUserObject();
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/StatGraphVisualizer.java
Patch:
@@ -336,7 +336,7 @@ static final Object[][] getGraphColumnsMsgParameters() {
         };
     }
 
-    private String[] keys(Map<String, ?> map) {
+    private static String[] keys(Map<String, ?> map) {
         return map.keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY);
     }
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
Patch:
@@ -192,7 +192,7 @@ public void actionPerformed(ActionEvent event) {
     }
 
 
-    private Arguments copyDefaultArguments(Map<String, String> currArgsMap, Arguments defaultArgs) {
+    private static Arguments copyDefaultArguments(Map<String, String> currArgsMap, Arguments defaultArgs) {
         Arguments newArgs = new Arguments();
         if (defaultArgs != null) {
             for (JMeterProperty jMeterProperty : defaultArgs.getArguments()) {
@@ -217,7 +217,7 @@ private Arguments copyDefaultArguments(Map<String, String> currArgsMap, Argument
     }
 
 
-    private Arguments extractDefaultArguments(BackendListenerClient client, Map<String, String> userArgMap,
+    private static Arguments extractDefaultArguments(BackendListenerClient client, Map<String, String> userArgMap,
             Arguments currentUserArguments) {
         Arguments defaultArgs = null;
         try {
@@ -234,7 +234,7 @@ private Arguments extractDefaultArguments(BackendListenerClient client, Map<Stri
     }
 
 
-    private BackendListenerClient createBackendListenerClient(String newClassName)
+    private static BackendListenerClient createBackendListenerClient(String newClassName)
             throws ReflectiveOperationException {
         return Class.forName(newClassName, true,
                 Thread.currentThread().getContextClassLoader())

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/influxdb/HttpMetricsSender.java
Patch:
@@ -132,7 +132,7 @@ public void setup(String influxdbUrl, String influxDBToken) throws Exception {
      * @return {@link HttpPost}
      * @throws URISyntaxException
      */
-    private HttpPost createRequest(URL url, String token) throws URISyntaxException {
+    private static HttpPost createRequest(URL url, String token) throws URISyntaxException {
         RequestConfig defaultRequestConfig = RequestConfig.custom()
                 .setConnectTimeout(JMeterUtils.getPropDefault("backend_influxdb.connection_timeout", 1000))
                 .setSocketTimeout(JMeterUtils.getPropDefault("backend_influxdb.socket_timeout", 3000))

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/influxdb/InfluxDBRawBackendListenerClient.java
Patch:
@@ -116,7 +116,7 @@ private void addMetricFromSampleResult(SampleResult sampleResult) {
         influxDBMetricsManager.addMetric(measurement, tags, fields, timestamp);
     }
 
-    private String createTags(SampleResult sampleResult) {
+    private static String createTags(SampleResult sampleResult) {
         boolean isError = sampleResult.getErrorCount() != 0;
         String status = isError ? TAG_KO : TAG_OK;
         // remove surrounding quotes and spaces from sample label
@@ -128,7 +128,7 @@ private String createTags(SampleResult sampleResult) {
                 + ",threadName=" + threadName;
     }
 
-    private String createFields(SampleResult sampleResult) {
+    private static String createFields(SampleResult sampleResult) {
         long duration = sampleResult.getTime();
         long latency = sampleResult.getLatency();
         long connectTime = sampleResult.getConnectTime();

File: src/core/src/main/java/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -210,15 +210,15 @@ public void awaitTermination(Duration duration) throws ExecutionException, Inter
         runningTest.get(duration.toMillis(), TimeUnit.MILLISECONDS);
     }
 
-    private String formatLikeDate(Instant instant) {
+    private static String formatLikeDate(Instant instant) {
         return DateTimeFormatter
                 .ofLocalizedDateTime(FormatStyle.LONG)
                 .withLocale(Locale.ROOT)
                 .withZone(ZoneId.systemDefault())
                 .format(instant);
     }
 
-    private void removeThreadGroups(List<?> elements) {
+    private static void removeThreadGroups(List<?> elements) {
         Iterator<?> iter = elements.iterator();
         while (iter.hasNext()) { // Can't use for loop here because we remove elements
             Object item = iter.next();
@@ -607,7 +607,7 @@ public void exit() {
         }
     }
 
-    private void pause(long ms){
+    private static void pause(long ms){
         try {
             TimeUnit.MILLISECONDS.sleep(ms);
         } catch (InterruptedException e) {

File: src/core/src/main/java/org/apache/jmeter/engine/util/FunctionParser.java
Patch:
@@ -162,7 +162,7 @@ Object makeFunction(StringReader reader) throws InvalidVariableException {
         return buffer.toString();
     }
 
-    private char firstNonSpace(StringReader reader, char defaultResult) throws IOException {
+    private static char firstNonSpace(StringReader reader, char defaultResult) throws IOException {
         char[] current = new char[1];
         while (reader.read(current) == 1) {
             if (!Character.isSpaceChar(current[0])) {

File: src/core/src/main/java/org/apache/jmeter/engine/util/ReplaceFunctionsWithStrings.java
Patch:
@@ -133,7 +133,7 @@ private JMeterProperty transformValueWithJavaRegex(JMeterProperty prop) throws I
      * @param value given by user
      * @return regex surrounded by boundary character matches, if value is not included in parens
      */
-    private String constructPattern(String value) {
+    private static String constructPattern(String value) {
         if (value.startsWith("(") && value.endsWith(")")) {
             return value;
         }

File: src/core/src/main/java/org/apache/jmeter/engine/util/SimpleVariable.java
Patch:
@@ -60,7 +60,7 @@ public String toString() {
         return ret;
     }
 
-    private JMeterVariables getVariables() {
+    private static JMeterVariables getVariables() {
         JMeterContext context = JMeterContextService.getContext();
         return context.getVariables();
     }

File: src/core/src/main/java/org/apache/jmeter/engine/util/ValueReplacer.java
Patch:
@@ -81,7 +81,7 @@ public void replaceValues(TestElement el) throws InvalidVariableException {
         setProperties(el, newProps);
     }
 
-    private void setProperties(TestElement el, Collection<JMeterProperty> newProps) {
+    private static void setProperties(TestElement el, Collection<JMeterProperty> newProps) {
         el.clear();
         for (JMeterProperty jmp : newProps) {
             el.setProperty(jmp);
@@ -155,7 +155,7 @@ public void addVariables(Map<String, String> vars) {
      * @return a new {@link Collection} with all the transformed {@link JMeterProperty}s
      * @throws InvalidVariableException when <code>transform</code> throws an {@link InvalidVariableException} while transforming a value
      */
-    private Collection<JMeterProperty> replaceValues(PropertyIterator iter, ValueTransformer transform) throws InvalidVariableException {
+    private static Collection<JMeterProperty> replaceValues(PropertyIterator iter, ValueTransformer transform) throws InvalidVariableException {
         List<JMeterProperty> props = new ArrayList<>();
         while (iter.hasNext()) {
             JMeterProperty val = iter.next();

File: src/core/src/main/java/org/apache/jmeter/functions/gui/FunctionHelper.java
Patch:
@@ -266,13 +266,13 @@ public void actionPerformed(ActionEvent e) {
         }
     }
 
-    private String variablesToString(JMeterVariables jMeterVariables) {
+    private static String variablesToString(JMeterVariables jMeterVariables) {
         StringBuilder sb = new StringBuilder();
         jMeterVariables.entrySet().forEach(e->sb.append(e.getKey()).append("=").append(e.getValue()).append("\r\n"));
         return sb.toString();
     }
 
-    private String buildFunctionCallString(String functionName, Arguments args) {
+    private static String buildFunctionCallString(String functionName, Arguments args) {
         StringBuilder functionCall = new StringBuilder("${");
         functionCall.append(functionName);
         if (args.getArguments().size() > 0) {
@@ -301,7 +301,7 @@ private String buildFunctionCallString(String functionName, Arguments args) {
      * @param arg string that should be escaped
      * @return escaped string
      */
-    private String escapeCommata(String arg) {
+    private static String escapeCommata(String arg) {
         int level = 0;
         StringBuilder result = new StringBuilder(arg.length());
         try (Reader r = new StringReader(arg)) {

File: src/core/src/main/java/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -904,7 +904,7 @@ public boolean canUndo() {
      * @param el {@link TestElement}
      * @return int checksum
      */
-    private int getTestElementCheckSum(TestElement el) {
+    private static int getTestElementCheckSum(TestElement el) {
         int ret = el.getClass().hashCode();
         PropertyIterator it = el.propertyIterator();
         while (it.hasNext()) {

File: src/core/src/main/java/org/apache/jmeter/gui/OnErrorPanel.java
Patch:
@@ -65,7 +65,7 @@ private JPanel createOnErrorPanel() {
         return panel;
     }
 
-    private JRadioButton addRadioButton(String labelKey, ButtonGroup group, JPanel panel) {
+    private static JRadioButton addRadioButton(String labelKey, ButtonGroup group, JPanel panel) {
         JRadioButton radioButton = new JRadioButton(JMeterUtils.getResString(labelKey));
         group.add(radioButton);
         panel.add(radioButton);

File: src/core/src/main/java/org/apache/jmeter/gui/action/AboutCommand.java
Patch:
@@ -65,7 +65,7 @@ public class AboutCommand extends AbstractAction {
     @Override
     public void doAction(ActionEvent e) {
         if (e.getActionCommand().equals(ActionNames.ABOUT)) {
-            this.about();
+            AboutCommand.about();
         }
     }
 
@@ -82,7 +82,7 @@ public Set<String> getActionNames() {
      * the product image and the copyright notice. The dialog box is centered
      * over the MainFrame.
      */
-    private void about() {
+    private static void about() {
         JFrame mainFrame = GuiPackage.getInstance().getMainFrame();
         JDialog dialog = initDialog(mainFrame);
 
@@ -98,7 +98,7 @@ private void about() {
      * @param mainFrame {@link JFrame}
      * @return {@link JDialog} initializing it if necessary
      */
-    private JDialog initDialog(JFrame mainFrame) {
+    private static JDialog initDialog(JFrame mainFrame) {
         if (about != null) {
             return about;
         }

File: src/core/src/main/java/org/apache/jmeter/gui/action/AbstractAction.java
Patch:
@@ -144,7 +144,7 @@ protected boolean popupCheckExistingFileListener(HashTree tree) {
      * @param event {@link ActionEvent}
      * @return parent Window
      */
-    protected final JFrame getParentFrame(ActionEvent event) {
+    protected static JFrame getParentFrame(ActionEvent event) {
         JFrame parent = null;
         Object source = event.getSource();
         if (source instanceof JMenuItem) {

File: src/core/src/main/java/org/apache/jmeter/gui/action/ActionRouter.java
Patch:
@@ -221,7 +221,7 @@ public void removePreActionListener(Class<?> action, ActionListener listener) {
      * @param listener {@link ActionListener}
      * @param actionListeners {@link Set} of {@link ActionListener}
      */
-    private void removeActionListener(Class<?> action, ActionListener listener, Map<String, Set<ActionListener>> actionListeners) {
+    private static void removeActionListener(Class<?> action, ActionListener listener, Map<String, Set<ActionListener>> actionListeners) {
         if (action != null) {
             Set<ActionListener> set = actionListeners.get(action.getName());
             if (set != null) {
@@ -251,7 +251,7 @@ public void addPostActionListener(Class<?> action, ActionListener listener) {
      * @param listener {@link ActionListener}
      * @param actionListeners {@link Set}
      */
-    private void addActionListener(Class<?> action, ActionListener listener, Map<String, Set<ActionListener>> actionListeners) {
+    private static void addActionListener(Class<?> action, ActionListener listener, Map<String, Set<ActionListener>> actionListeners) {
         if (action != null) {
             Set<ActionListener> set = actionListeners.get(action.getName());
             if (set == null) {
@@ -297,7 +297,7 @@ void postActionPerformed(Class<? extends Command> action, ActionEvent e) {
      * @param e {@link ActionEvent}
      * @param actionListeners {@link Set}
      */
-    private void actionPerformed(Class<? extends Command> action, ActionEvent e, Map<String, Set<ActionListener>> actionListeners) {
+    private static void actionPerformed(Class<? extends Command> action, ActionEvent e, Map<String, Set<ActionListener>> actionListeners) {
         if (action != null) {
             Set<ActionListener> listenerSet = actionListeners.get(action.getName());
             if (listenerSet != null && !listenerSet.isEmpty()) {

File: src/core/src/main/java/org/apache/jmeter/gui/action/AddParent.java
Patch:
@@ -62,7 +62,7 @@ public Set<String> getActionNames() {
         return commands;
     }
 
-    protected void addParentToTree(TestElement newParent) {
+    protected static void addParentToTree(TestElement newParent) {
         GuiPackage guiPackage = GuiPackage.getInstance();
         JMeterTreeNode newNode = new JMeterTreeNode(newParent, guiPackage.getTreeModel());
         JMeterTreeNode currentNode = guiPackage.getTreeListener().getCurrentNode();
@@ -75,7 +75,7 @@ protected void addParentToTree(TestElement newParent) {
         }
     }
 
-    private void moveNode(GuiPackage guiPackage, JMeterTreeNode node, JMeterTreeNode newParentNode) {
+    private static void moveNode(GuiPackage guiPackage, JMeterTreeNode node, JMeterTreeNode newParentNode) {
         guiPackage.getTreeModel().removeNodeFromParent(node);
         guiPackage.getTreeModel().insertNodeInto(node, newParentNode, newParentNode.getChildCount());
     }

File: src/core/src/main/java/org/apache/jmeter/gui/action/ApplyNamingConvention.java
Patch:
@@ -80,7 +80,7 @@ public void doAction(ActionEvent e) {
      * @param currentNode Parent node of elements on which we apply naming policy
      */
     @SuppressWarnings("JdkObsolete")
-    private void applyNamingPolicyToCurrentNode(GuiPackage guiPackage,
+    private static void applyNamingPolicyToCurrentNode(GuiPackage guiPackage,
             JMeterTreeNode currentNode) {
         TreeNodeNamingPolicy namingPolicy = guiPackage.getNamingPolicy();
         guiPackage.updateCurrentNode();

File: src/core/src/main/java/org/apache/jmeter/gui/action/ChangeParent.java
Patch:
@@ -78,7 +78,7 @@ public Set<String> getActionNames() {
         return commands;
     }
 
-    private void changeParent(TestElement newParent, GuiPackage guiPackage, JMeterTreeNode currentNode) {
+    private static void changeParent(TestElement newParent, GuiPackage guiPackage, JMeterTreeNode currentNode) {
 
         // keep the old name if it was not the default one
         Controller currentController = (Controller) currentNode.getUserObject();

File: src/core/src/main/java/org/apache/jmeter/gui/action/CollapseExpandTreeBranch.java
Patch:
@@ -79,7 +79,7 @@ public void doAction(ActionEvent e) {
     }
 
     @SuppressWarnings("JdkObsolete")
-    private void expandCollapseNode(JTree jTree, TreePath parent, boolean collapse) {
+    private static void expandCollapseNode(JTree jTree, TreePath parent, boolean collapse) {
         TreeNode node = (TreeNode) parent.getLastPathComponent();
         if (node.isLeaf()) {
             return;

File: src/core/src/main/java/org/apache/jmeter/gui/action/EnableComponent.java
Patch:
@@ -59,15 +59,15 @@ public void doAction(ActionEvent e) {
         }
     }
 
-    private void enableComponents(JMeterTreeNode[] nodes, boolean enable) {
+    private static void enableComponents(JMeterTreeNode[] nodes, boolean enable) {
         GuiPackage pack = GuiPackage.getInstance();
         for (JMeterTreeNode node : nodes) {
             node.setEnabled(enable);
             pack.getGui(node.getTestElement()).setEnabled(enable);
         }
     }
 
-    private void toggleComponents(JMeterTreeNode[] nodes) {
+    private static void toggleComponents(JMeterTreeNode[] nodes) {
         GuiPackage pack = GuiPackage.getInstance();
         for (JMeterTreeNode node : nodes) {
             boolean enable = !node.isEnabled();

File: src/core/src/main/java/org/apache/jmeter/gui/action/HtmlReportGenerator.java
Patch:
@@ -162,7 +162,7 @@ private List<String> checkArguments() {
      * @param fileToCheck the directory to check
      * @return the error message or null if the file is ok
      */
-    private String checkFile(File fileToCheck) {
+    private static String checkFile(File fileToCheck) {
         if (fileToCheck.exists() && fileToCheck.canRead() && fileToCheck.isFile()) {
             return null;
         } else {
@@ -176,7 +176,7 @@ private String checkFile(File fileToCheck) {
      * @param directoryToCheck the directory to check
      * @return the error message or an empty string if the directory is fine
      */
-    private String checkDirectory(File directoryToCheck) {
+    private static String checkDirectory(File directoryToCheck) {
         if (directoryToCheck.exists()) {
             String[] files = directoryToCheck.list();
             if (files != null && files.length > 0) {

File: src/core/src/main/java/org/apache/jmeter/gui/action/LoadRecentProject.java
Patch:
@@ -74,7 +74,7 @@ public void doActionAfterCheck(ActionEvent e) {
     /**
      * Get the recent file for the menu item
      */
-    private File getRecentFile(ActionEvent e) {
+    private static File getRecentFile(ActionEvent e) {
         JMenuItem menuItem = (JMenuItem)e.getSource();
         // Get the preference for the recent files
         return new File(getRecentFile(Integer.parseInt(menuItem.getName())));

File: src/core/src/main/java/org/apache/jmeter/gui/action/Move.java
Patch:
@@ -100,7 +100,7 @@ && canAddTo(parentParentNode, currentNode)) {
         GuiPackage.getInstance().getMainFrame().repaint();
     }
 
-    private JMeterTreeNode getParentNode(JMeterTreeNode currentNode) {
+    private static JMeterTreeNode getParentNode(JMeterTreeNode currentNode) {
         JMeterTreeNode parentNode = (JMeterTreeNode) currentNode.getParent();
         TestElement te = currentNode.getTestElement();
         if (te instanceof TestPlan) {

File: src/core/src/main/java/org/apache/jmeter/gui/action/OpenLinkAction.java
Patch:
@@ -90,7 +90,7 @@ public Set<String> getActionNames() {
         return commands;
     }
 
-    private void showBrowserWarning(String url) {
+    private static void showBrowserWarning(String url) {
         String problemSolver;
         if (url.startsWith(LINK_MAP.get(ActionNames.LINK_COMP_REF))
                 || url.startsWith(LINK_MAP.get(ActionNames.LINK_FUNC_REF))) {

File: src/core/src/main/java/org/apache/jmeter/gui/action/Paste.java
Patch:
@@ -76,7 +76,7 @@ public void doAction(ActionEvent e) {
         GuiPackage.getInstance().getMainFrame().repaint();
     }
 
-    private void addNode(JMeterTreeNode parent, JMeterTreeNode node) {
+    private static void addNode(JMeterTreeNode parent, JMeterTreeNode node) {
         try {
             // Add this node
             JMeterTreeNode newNode = GuiPackage.getInstance().getTreeModel().addComponent(node.getTestElement(), parent);

File: src/core/src/main/java/org/apache/jmeter/gui/action/RemoteStart.java
Patch:
@@ -97,7 +97,7 @@ public void doAction(ActionEvent e) {
         }
     }
 
-    private List<String> getRemoteHosts() {
+    private static List<String> getRemoteHosts() {
         String remoteHostsString = JMeterUtils.getPropDefault(REMOTE_HOSTS, LOCAL_HOST);
         StringTokenizer st = new StringTokenizer(remoteHostsString, REMOTE_HOSTS_SEPARATOR);
         List<String> list = new ArrayList<>();
@@ -112,7 +112,7 @@ public Set<String> getActionNames() {
         return commands;
     }
 
-    private HashTree getTestTree() {
+    private static HashTree getTestTree() {
         GuiPackage gui = GuiPackage.getInstance();
         HashTree testTree = gui.getTreeModel().getTestPlan();
         HashTree tree = JMeter.convertSubTree(testTree, true);

File: src/core/src/main/java/org/apache/jmeter/gui/action/SSLManagerCommand.java
Patch:
@@ -67,7 +67,7 @@ public class SSLManagerCommand extends AbstractAction {
     @Override
     public void doAction(ActionEvent e) {
         if (e.getActionCommand().equals(ActionNames.SSL_MANAGER)) {
-            this.sslManager();
+            SSLManagerCommand.sslManager();
         }
     }
 
@@ -83,7 +83,7 @@ public Set<String> getActionNames() {
      * Called by sslManager button. Raises sslManager dialog.
      * I.e. a FileChooser for PCSI12 (.p12|.P12) or JKS files.
      */
-    private void sslManager() {
+    private static void sslManager() {
         SSLManager.reset();
 
         JFileChooser keyStoreChooser = new JFileChooser(System.getProperty("user.dir")); //$NON-NLS-1$

File: src/core/src/main/java/org/apache/jmeter/gui/action/SaveGraphics.java
Patch:
@@ -90,7 +90,7 @@ public void doAction(ActionEvent e) throws IllegalUserActionException {
         }
     }
 
-    private void saveImage(JComponent comp) {
+    private static void saveImage(JComponent comp) {
 
         String filename;
         JFileChooser chooser = FileDialoger.promptToSaveFile(

File: src/core/src/main/java/org/apache/jmeter/gui/action/SearchTreeCommand.java
Patch:
@@ -54,7 +54,7 @@ public class SearchTreeCommand extends AbstractAction {
      * @return A freshly created search dialog with the parent frame that could be
      *         found, or no parent otherwise.
      */
-    private SearchTreeDialog createSearchDialog(ActionEvent event) {
+    private static SearchTreeDialog createSearchDialog(ActionEvent event) {
         JFrame parent = getParentFrame(event);
         return new SearchTreeDialog(parent);
     }

File: src/core/src/main/java/org/apache/jmeter/gui/action/SearchTreeDialog.java
Patch:
@@ -226,7 +226,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         ComponentUtil.centerComponentInWindow(this);
     }
 
-    private JButton createButton(String messageKey) {
+    private static JButton createButton(String messageKey) {
         return new JButton(JMeterUtils.getResString(messageKey));
     }
 
@@ -387,7 +387,7 @@ private Pair<Integer, Set<JMeterTreeNode>> searchInTree(GuiPackage guiPackage, S
      * @param expand true if we want to expand
      * @param nodes Set of {@link JMeterTreeNode} to mark
      */
-    private void markConcernedNodes(boolean expand, Set<JMeterTreeNode> nodes) {
+    private static void markConcernedNodes(boolean expand, Set<JMeterTreeNode> nodes) {
         GuiPackage guiInstance = GuiPackage.getInstance();
         JTree jTree = guiInstance.getMainFrame().getTree();
         for (JMeterTreeNode jMeterTreeNode : nodes) {
@@ -451,7 +451,7 @@ private void doReplaceAll(ActionEvent e) {
      * @param caseSensitiveReplacement boolean if search is case sensitive
      * @return null if no replacement occurred or Pair of (number of replacement, current tree node)
      */
-    private Pair<Integer, JMeterTreeNode> doReplacementInCurrentNode(JMeterTreeNode jMeterTreeNode,
+    private static Pair<Integer, JMeterTreeNode> doReplacementInCurrentNode(JMeterTreeNode jMeterTreeNode,
             String regex, String replaceBy, boolean caseSensitiveReplacement) {
         try {
             if (jMeterTreeNode.getUserObject() instanceof Replaceable) {

File: src/core/src/main/java/org/apache/jmeter/gui/action/SelectTemplatesDialog.java
Patch:
@@ -205,7 +205,7 @@ void replaceTemplateParametersAndLoad(final ActionEvent actionEvent, final Templ
      * @param actionEvent {@link ActionEvent}
      * @return true if plan is not dirty or has been saved
      */
-    private boolean checkDirty(final ActionEvent actionEvent) {
+    private static boolean checkDirty(final ActionEvent actionEvent) {
         ActionRouter.getInstance().doActionNow(new ActionEvent(actionEvent.getSource(), actionEvent.getID(), ActionNames.CHECK_DIRTY));
         GuiPackage guiPackage = GuiPackage.getInstance();
         if (guiPackage.isDirty()) {
@@ -320,7 +320,7 @@ public void actionPerformed(ActionEvent e) {
      * @param template {@link Template}
      * @return true if template has not parameter
      */
-    private boolean hasParameters(Template template) {
+    private static boolean hasParameters(Template template) {
         return !(template.getParameters() == null || template.getParameters().isEmpty());
     }
 
@@ -397,7 +397,7 @@ private JPanel configureParametersPanel(Map<String, String> parameters) {
         return panel;
     }
 
-    private void initConstraints(GridBagConstraints gbc) {
+    private static void initConstraints(GridBagConstraints gbc) {
         gbc.anchor = GridBagConstraints.WEST;
         gbc.insets = new Insets(0,0,5,0);
         gbc.fill = GridBagConstraints.NONE;

File: src/core/src/main/java/org/apache/jmeter/gui/action/template/TemplateManager.java
Patch:
@@ -188,7 +188,7 @@ public Map<String, Template> parseTemplateFile(File file) throws IOException, SA
      * @param templates Map of {@link Template} referenced by name
      * @param templateNode {@link Node} the xml template node
      */
-    void parseTemplateNode(Map<String, Template> templates, Node templateNode) {
+    static void parseTemplateNode(Map<String, Template> templates, Node templateNode) {
         if (templateNode.getNodeType() == Node.ELEMENT_NODE) {
             Template template = new Template();
             Element element =  (Element) templateNode;
@@ -206,11 +206,11 @@ void parseTemplateNode(Map<String, Template> templates, Node templateNode) {
         }
     }
 
-    private String textOfFirstTag(Element element, String tagName) {
+    private static String textOfFirstTag(Element element, String tagName) {
         return element.getElementsByTagName(tagName).item(0).getTextContent();
     }
 
-    private Map<String, String> parseParameterNodes(NodeList parameterNodes) {
+    private static Map<String, String> parseParameterNodes(NodeList parameterNodes) {
         Map<String, String> parametersMap = new HashMap<>();
         for (int i = 0; i < parameterNodes.getLength(); i++) {
             Element element =  (Element) parameterNodes.item(i);

File: src/core/src/main/java/org/apache/jmeter/gui/menu/StaticJMeterGUIComponent.java
Patch:
@@ -75,7 +75,7 @@ public StaticJMeterGUIComponent(Class<?> c, TestElementMetadata metadata) {
         this.groups = getGroups(c, metadata);
     }
 
-    private List<String> getGroups(Class<?> c, TestElementMetadata metadata) {
+    private static List<String> getGroups(Class<?> c, TestElementMetadata metadata) {
         String[] groups = metadata.actionGroups();
         if (groups.length == 1 && groups[0].equals("")) {
             // Annotations can't hold null values, so we use empty string instead

File: src/core/src/main/java/org/apache/jmeter/gui/tree/JMeterTreeListener.java
Patch:
@@ -236,7 +236,7 @@ public void keyReleased(KeyEvent e) {
     public void keyTyped(KeyEvent e) {
     }
 
-    private boolean isRightClick(MouseEvent e) {
+    private static boolean isRightClick(MouseEvent e) {
         return e.isPopupTrigger() ||
                 (InputEvent.BUTTON2_DOWN_MASK & e.getModifiersEx()) > 0 ||
                 (InputEvent.BUTTON3_DOWN_MASK == e.getModifiersEx());

File: src/core/src/main/java/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -217,7 +217,7 @@ public void createMenuBar() {
         this.add(helpMenu);
     }
 
-    private List<MenuCreator> findMenuCreators() {
+    private static List<MenuCreator> findMenuCreators() {
         List<MenuCreator> creators = new ArrayList<>();
         try {
             List<String> listClasses = ClassFinder.findClassesThatExtend(
@@ -342,7 +342,7 @@ private void makeOptionsMenu() {
         addPluginsMenuItems(optionsMenu, menuCreators, MENU_LOCATION.OPTIONS);
     }
 
-    private JMenu createLaFMenu() {
+    private static JMenu createLaFMenu() {
         JMenu lafMenu = makeMenuRes("appearance", 'L');
         ButtonGroup lafGroup = new ButtonGroup();
         String currentLafCommand = LookAndFeelCommand.getPreferredLafCommand();
@@ -590,7 +590,7 @@ private void makeSearchMenu() {
      * @param menuCreators
      * @param location
      */
-    private void addPluginsMenuItems(JMenu menu, List<MenuCreator> menuCreators, MENU_LOCATION location) {
+    private static void addPluginsMenuItems(JMenu menu, List<MenuCreator> menuCreators, MENU_LOCATION location) {
         for (MenuCreator menuCreator : menuCreators) {
             JMenuItem[] menuItems = menuCreator.getMenuItemsAtLocation(location);
             if (menuItems.length != 0) {

File: src/core/src/main/java/org/apache/jmeter/gui/util/JSyntaxSearchToolBar.java
Patch:
@@ -114,7 +114,7 @@ void toggleSearchField(JTextField textToFindField, boolean matchFound) {
         }
     }
 
-    private SearchContext createSearchContext(String text, boolean forward, boolean matchCase,
+    private static SearchContext createSearchContext(String text, boolean forward, boolean matchCase,
             boolean isRegex) {
         SearchContext context = new SearchContext();
         context.setSearchFor(text);

File: src/core/src/main/java/org/apache/jmeter/gui/util/MenuInfo.java
Patch:
@@ -47,7 +47,7 @@ public MenuInfo(String label, JMeterGUIComponent item, String classFullName) {
         sortOrder = getSortOrderFromName(classFullName);
     }
 
-    private int getSortOrderFromName(String classFullName) {
+    private static int getSortOrderFromName(String classFullName) {
         try {
             GUIMenuSortOrder menuSortOrder = Class.forName(classFullName, false, MenuInfo.class.getClassLoader())
                     .getDeclaredAnnotation(GUIMenuSortOrder.class);

File: src/core/src/main/java/org/apache/jmeter/gui/util/TextAreaCellRenderer.java
Patch:
@@ -50,7 +50,7 @@ public Component getTableCellRendererComponent(JTable table, Object value,
      * @param value initial value
      * @return {@link JSyntaxTextArea}
      */
-    private JSyntaxTextArea createRenderer(String value) {
+    private static JSyntaxTextArea createRenderer(String value) {
         JSyntaxTextArea textArea = JSyntaxTextArea.getInstance(2, 50);
         textArea.setLanguage("text"); //$NON-NLS-1$
         textArea.setInitialText(value);

File: src/core/src/main/java/org/apache/jmeter/gui/util/TristateCheckBox.java
Patch:
@@ -343,7 +343,7 @@ private void drawLine(Graphics g, int x, int y) {
             g.drawLine(left, height - 1, right, height - 1);
         }
 
-        private void drawFlush3DBorder(Graphics g, int x, int y, int w, int h) {
+        private static void drawFlush3DBorder(Graphics g, int x, int y, int w, int h) {
             g.translate(x, y);
             g.setColor(MetalLookAndFeel.getControlDarkShadow());
             g.drawRect(0, 0, w - 2, h - 2);
@@ -355,7 +355,7 @@ private void drawFlush3DBorder(Graphics g, int x, int y, int w, int h) {
             g.translate(-x, -y);
         }
 
-        private void drawPressed3DBorder(Graphics g, int x, int y, int w, int h) {
+        private static void drawPressed3DBorder(Graphics g, int x, int y, int w, int h) {
             g.translate(x, y);
             drawFlush3DBorder(g, 0, 0, w, h);
             g.setColor(MetalLookAndFeel.getControlShadow());

File: src/core/src/main/java/org/apache/jmeter/report/dashboard/JsonExporter.java
Patch:
@@ -115,7 +115,7 @@ private File checkAndGetOutputFolder(ReportGeneratorConfiguration reportGenerato
         return outputDir;
     }
 
-    private void createStatistic(Map<String, SamplingStatistic> statistics, MapResultData resultData) {
+    private static void createStatistic(Map<String, SamplingStatistic> statistics, MapResultData resultData) {
         LOGGER.debug("Creating statistics for result data:{}", resultData);
         SamplingStatistic statistic = new SamplingStatistic();
         ListResultData listResultData = (ListResultData) resultData.getResult("data");

File: src/core/src/main/java/org/apache/jmeter/report/processor/ApdexSummaryConsumer.java
Patch:
@@ -141,7 +141,7 @@ protected void updateData(SummaryInfo info, Sample sample) {
 
     }
 
-    private double getApdex(ApdexSummaryData data) {
+    private static double getApdex(ApdexSummaryData data) {
         return (data.getSatisfiedCount() + (double) data.getToleratedCount() / 2)
                 / data.getTotalCount();
     }

File: src/core/src/main/java/org/apache/jmeter/report/processor/CsvFileSampleSource.java
Patch:
@@ -141,7 +141,7 @@ private static String getFileExtension(String fName) {
     /**
      * Get the current time in milliseconds
      */
-    private long now() {
+    private static long now() {
         return System.currentTimeMillis();
     }
 
@@ -151,7 +151,7 @@ private long now() {
      *
      * @return A readable string that displays the time provided as milliseconds
      */
-    private String time(long t) {
+    private static String time(long t) {
         return TimeHelper.time(t);
     }
 

File: src/core/src/main/java/org/apache/jmeter/report/processor/StatisticsSummaryConsumer.java
Patch:
@@ -68,7 +68,7 @@ public StatisticsSummaryConsumer() {
      * @param data {@link StatisticsSummaryData}
      * @param isOverall boolean indicating if aggregation concerns the Overall results in which case we ignore Transaction Controller's SampleResult
      */
-    private void aggregateSample(Sample sample, StatisticsSummaryData data, boolean isOverall) {
+    private static void aggregateSample(Sample sample, StatisticsSummaryData data, boolean isOverall) {
         if(isOverall && sample.isController()) {
             return;
         }
@@ -201,7 +201,7 @@ protected ListResultData createResultTitles() {
         return titles;
     }
 
-    private String formatPercentile(String percentileLabel) {
+    private static String formatPercentile(String percentileLabel) {
         return String.format(JMeterUtils.getResString("reportgenerator_summary_statistics_percentile_fmt"),
                 percentileLabel);
     }

File: src/core/src/main/java/org/apache/jmeter/report/processor/graph/impl/ResponseTimePerSampleGraphConsumer.java
Patch:
@@ -72,7 +72,7 @@ protected final GraphKeysSelector createKeysSelector() {
      * @param defaultValue the default value
      * @return the group info
      */
-    private GroupInfo createGroupInfo(String propertyKey, int defaultValue) {
+    private static GroupInfo createGroupInfo(String propertyKey, int defaultValue) {
         int property = JMeterUtils.getPropDefault(propertyKey, defaultValue);
         PercentileAggregatorFactory factory = new PercentileAggregatorFactory();
         factory.setPercentileIndex(property);

File: src/core/src/main/java/org/apache/jmeter/reporters/ResultSaver.java
Patch:
@@ -223,7 +223,7 @@ private boolean ignoreSampler(SampleResult s) {
      * Create path hierarchy to parentFile
      * @param parentFile
      */
-    private void createFoldersIfNeeded(File parentFile) {
+    private static void createFoldersIfNeeded(File parentFile) {
         if(parentFile == null) {
             return;
         }

File: src/core/src/main/java/org/apache/jmeter/reporters/Summariser.java
Patch:
@@ -319,7 +319,7 @@ public void testEnded(String host) {
         }
     }
 
-    private void formatAndWriteToLog(String name, SummariserRunningSample summariserRunningSample, String type) {
+    private static void formatAndWriteToLog(String name, SummariserRunningSample summariserRunningSample, String type) {
         if (TOOUT || (TOLOG && log.isInfoEnabled())) {
             String formattedMessage = format(name, summariserRunningSample, type);
             if (TOLOG) {

File: src/core/src/main/java/org/apache/jmeter/rmi/SSLRMIClientSocketFactory.java
Patch:
@@ -117,7 +117,7 @@ public Socket createSocket(String host, int port) throws IOException {
         return factory.createSocket(host, port);
     }
 
-    private KeyStore loadStore(String location, char[] passphrase, String type)
+    private static KeyStore loadStore(String location, char[] passphrase, String type)
             throws IOException {
         try {
             KeyStore store = KeyStore.getInstance(type);

File: src/core/src/main/java/org/apache/jmeter/rmi/SSLRMIServerSocketFactory.java
Patch:
@@ -142,7 +142,7 @@ public ServerSocket createServerSocket(int port) throws IOException {
         return socket;
     }
 
-    private KeyStore loadStore(String location, char[] passphrase, String type)
+    private static KeyStore loadStore(String location, char[] passphrase, String type)
             throws IOException {
         try (FileInputStream fileInputStream = new FileInputStream(location)){
             KeyStore store = KeyStore.getInstance(type);

File: src/core/src/main/java/org/apache/jmeter/samplers/DataStrippingSampleSender.java
Patch:
@@ -107,7 +107,7 @@ public void sampleOccurred(SampleEvent event) {
         }
     }
 
-    private void stripContent(SampleResult result, int level) {
+    private static void stripContent(SampleResult result, int level) {
         if (level < 0) {
             return;
         }
@@ -123,7 +123,7 @@ private void stripContent(SampleResult result, int level) {
      * Strip response but fill in bytes field.
      * @param result {@link SampleResult}
      */
-    private void stripResponse(SampleResult result) {
+    private static void stripResponse(SampleResult result) {
         result.setBytes(result.getBytesAsLong());
         result.setResponseData(EMPTY_BA);
     }

File: src/core/src/main/java/org/apache/jmeter/samplers/Entry.java
Patch:
@@ -84,7 +84,7 @@ public void addConfigElement(ConfigElement config, Class<?> asClass) {
         }
     }
 
-    private ConfigElement cloneIfNecessary(ConfigElement config) {
+    private static ConfigElement cloneIfNecessary(ConfigElement config) {
         if (config.expectsModification()) {
             return config;
         }

File: src/core/src/main/java/org/apache/jmeter/save/SaveGraphicsService.java
Patch:
@@ -148,7 +148,7 @@ public void saveTIFFWithBatik(String filename, BufferedImage image) {
      * @param filename
      * @return output stream created from the filename
      */
-    private FileOutputStream createFile(File filename) {
+    private static FileOutputStream createFile(File filename) {
         try {
             return new FileOutputStream(filename);
         } catch (FileNotFoundException e) {

File: src/core/src/main/java/org/apache/jmeter/save/ScriptWrapperConverter.java
Patch:
@@ -97,7 +97,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
         return wrap;
     }
 
-    private ConversionException createConversionException(Throwable e) {
+    private static ConversionException createConversionException(Throwable e) {
         final ConversionException conversionException = new ConversionException(e);
         StackTraceElement[] ste = e.getStackTrace();
         if (ste!=null){

File: src/core/src/main/java/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java
Patch:
@@ -145,7 +145,7 @@ public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingCont
     }
 
     // Helper method to simplify marshall routine. Save if and only if true.
-    private void createNode(HierarchicalStreamWriter writer, boolean save, String node) {
+    private static void createNode(HierarchicalStreamWriter writer, boolean save, String node) {
         if (!save) {
             return;
         }

File: src/core/src/main/java/org/apache/jmeter/services/FileServer.java
Patch:
@@ -419,7 +419,7 @@ private BufferedReader getReader(String alias, boolean recycle, boolean ignoreFi
         }
     }
 
-    private BufferedReader createBufferedReader(FileEntry fileEntry) throws IOException {
+    private static BufferedReader createBufferedReader(FileEntry fileEntry) throws IOException {
         if (!fileEntry.file.canRead() || !fileEntry.file.isFile()) {
             throw new IllegalArgumentException("File "+ fileEntry.file.getName()+ " must exist and be readable");
         }
@@ -455,7 +455,7 @@ public synchronized void write(String filename, String value) throws IOException
         }
     }
 
-    private BufferedWriter createBufferedWriter(FileEntry fileEntry) throws IOException {
+    private static BufferedWriter createBufferedWriter(FileEntry fileEntry) throws IOException {
         OutputStream fos = Files.newOutputStream(fileEntry.file.toPath());
         OutputStreamWriter osw;
         // If file encoding is specified, write using that encoding, otherwise use default platform encoding
@@ -486,7 +486,7 @@ public synchronized void closeFile(String name) throws IOException {
         closeFile(name, fileEntry);
     }
 
-    private void closeFile(String name, FileEntry fileEntry) throws IOException {
+    private static void closeFile(String name, FileEntry fileEntry) throws IOException {
         if (fileEntry != null && fileEntry.inputOutputObject != null) {
             log.info("Close: {}", name);
             fileEntry.inputOutputObject.close();

File: src/core/src/main/java/org/apache/jmeter/testbeans/gui/BooleanPropertyEditor.java
Patch:
@@ -38,7 +38,7 @@ public String getAsText() {
         return value instanceof Boolean ?  toString((Boolean) value) : null;
     }
 
-    private String toString(Boolean value) {
+    private static String toString(Boolean value) {
         return value ? TRUE : FALSE;
     }
 

File: src/core/src/main/java/org/apache/jmeter/testbeans/gui/FileEditor.java
Patch:
@@ -120,7 +120,7 @@ public void actionPerformed(ActionEvent e) {
         setValue(toUnix(chooser.getSelectedFile()));
     }
 
-    private String toUnix(final File selectedFile) {
+    private static String toUnix(final File selectedFile) {
         if (File.separatorChar == '\\') {
             return FilenameUtils.separatorsToUnix(selectedFile.getPath());
         }

File: src/core/src/main/java/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -380,7 +380,7 @@ private static String getDetails(PropertyDescriptor pd) {
      * @param descriptor
      * @return the wrapper editor
      */
-    private WrapperEditor createWrapperEditor(PropertyEditor typeEditor, PropertyDescriptor descriptor) {
+    private static WrapperEditor createWrapperEditor(PropertyEditor typeEditor, PropertyDescriptor descriptor) {
         String[] editorTags = typeEditor.getTags();
         String[] additionalTags = (String[]) descriptor.getValue(TAGS);
         String[] tags;
@@ -720,7 +720,7 @@ private Integer groupOrder(String group) {
          * @param d
          * @return the property's order attribute (zero by default)
          */
-        private Integer propertyOrder(PropertyDescriptor d) {
+        private static Integer propertyOrder(PropertyDescriptor d) {
             Integer order = (Integer) d.getValue(ORDER);
             if (order == null) {
                 order = 0;

File: src/core/src/main/java/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
Patch:
@@ -260,7 +260,7 @@ public void modifyTestElement(TestElement element) {
      * @param element
      * @param name
      */
-    private void setPropertyInElement(TestElement element, String name, Object value) {
+    private static void setPropertyInElement(TestElement element, String name, Object value) {
         JMeterProperty jprop = AbstractProperty.createProperty(value);
         jprop.setName(name);
         element.setProperty(jprop);

File: src/core/src/main/java/org/apache/jmeter/testelement/AbstractScopedTestElement.java
Patch:
@@ -162,12 +162,12 @@ protected List<SampleResult> getSampleList(SampleResult result) {
         return sampleList;
     }
 
-    private void recurseResults(List<SampleResult> resultList, SampleResult sampleResult) {
+    private static void recurseResults(List<SampleResult> resultList, SampleResult sampleResult) {
         Collections.addAll(resultList, sampleResult.getSubResults());
         recurseResults(resultList, sampleResult.getSubResults(), 3);
     }
 
-    private void recurseResults(List<SampleResult> resultList, SampleResult[] sampleResult, int level) {
+    private static void recurseResults(List<SampleResult> resultList, SampleResult[] sampleResult, int level) {
         if (level < 0) {
             return;
         }

File: src/core/src/main/java/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -557,7 +557,7 @@ public void setTemporary(JMeterProperty property) {
     // It doesn't merge the inner properties one by one as MultiProperty would do.
     // Therefore we must not mark the enclosed properties of TestElementProperty as
     // temporary (Bug 65336)
-    private boolean isMergingEnclosedProperties(JMeterProperty property) {
+    private static boolean isMergingEnclosedProperties(JMeterProperty property) {
         return property instanceof MultiProperty && !(property instanceof TestElementProperty);
     }
 

File: src/core/src/main/java/org/apache/jmeter/threads/SamplePackage.java
Patch:
@@ -95,15 +95,15 @@ public void setRunningVersion(boolean running) {
         sampler.setRunningVersion(running);
     }
 
-    private void setRunningVersion(List<?> list, boolean running) {
+    private static void setRunningVersion(List<?> list, boolean running) {
         @SuppressWarnings("unchecked") // all implementations extend TestElement
         List<TestElement> telist = (List<TestElement>)list;
         for (TestElement te : telist) {
             te.setRunningVersion(running);
         }
     }
 
-    private void recoverRunningVersion(List<?> list) {
+    private static void recoverRunningVersion(List<?> list) {
         @SuppressWarnings("unchecked") // All implementations extend TestElement
         List<TestElement> telist = (List<TestElement>)list;
         for (TestElement te : telist) {

File: src/core/src/main/java/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -172,7 +172,7 @@ else if(child instanceof TransactionController) {
         }
     }
 
-    private void trackIterationListeners(LinkedList<TestElement> pStack) {
+    private static void trackIterationListeners(LinkedList<TestElement> pStack) {
         TestElement child = pStack.getLast();
         if (child instanceof LoopIterationListener) {
             ListIterator<TestElement> iter = pStack.listIterator(pStack.size());
@@ -271,7 +271,7 @@ private void saveTransactionControllerConfigs(TransactionController tc) {
      * @param controllers
      * @param maybeController
      */
-    private void addDirectParentControllers(List<Controller> controllers, TestElement maybeController) {
+    private static void addDirectParentControllers(List<Controller> controllers, TestElement maybeController) {
         if (maybeController instanceof Controller) {
             log.debug("adding controller: {} to sampler config", maybeController);
             controllers.add((Controller) maybeController);
@@ -304,7 +304,7 @@ public boolean equals(Object o) {
         }
     }
 
-    private void configureWithConfigElements(Sampler sam, List<ConfigTestElement> configs) {
+    private static void configureWithConfigElements(Sampler sam, List<ConfigTestElement> configs) {
         sam.clearTestElementChildren();
         for (ConfigTestElement config  : configs) {
             if (!(config instanceof NoConfigMerge))

File: src/core/src/main/java/org/apache/jmeter/threads/gui/AbstractThreadGroupGui.java
Patch:
@@ -82,15 +82,15 @@ public JPopupMenu createPopupMenu() {
         return pop;
     }
 
-    private JMenuItem createMenuItem(String name, String actionCommand) {
+    private static JMenuItem createMenuItem(String name, String actionCommand) {
         JMenuItem addThinkTimesToChildren = new JMenuItem(JMeterUtils.getResString(name));
         addThinkTimesToChildren.setName(name);
         addThinkTimesToChildren.addActionListener(ActionRouter.getInstance());
         addThinkTimesToChildren.setActionCommand(actionCommand);
         return addThinkTimesToChildren;
     }
 
-    private JMenu createAddMenu() {
+    private static JMenu createAddMenu() {
         String addAction = ActionNames.ADD;
         JMenu addMenu = new JMenu(JMeterUtils.getResString("add")); // $NON-NLS-1$
         addMenu.add(MenuFactory.makeMenu(MenuFactory.SAMPLERS, addAction));

File: src/core/src/main/java/org/apache/jmeter/util/BSFJavaScriptEngine.java
Patch:
@@ -157,7 +157,7 @@ public Object eval(String source, int lineNo, int columnNo, Object oscript)
      * @param t {@link Throwable}
      * @throws BSFException
      */
-    private void handleError(Throwable t) throws BSFException {
+    private static void handleError(Throwable t) throws BSFException {
         Throwable target = t;
         if (t instanceof WrappedException) {
             target = ((WrappedException) t).getWrappedException();

File: src/core/src/main/java/org/apache/jmeter/util/HttpSSLProtocolSocketFactory.java
Patch:
@@ -67,7 +67,7 @@ public HttpSSLProtocolSocketFactory(int cps) {
     }
 
 
-    private void configureSocket(Socket socket){
+    private static void configureSocket(Socket socket){
         if (!(socket instanceof SSLSocket)) {
             throw new IllegalArgumentException("Expected SSLSocket");
         }
@@ -95,7 +95,7 @@ private void configureSocket(Socket socket){
         }
     }
 
-    private String join(String[] strings) {
+    private static String join(String[] strings) {
         StringBuilder sb = new StringBuilder();
         for (int i=0;i<strings.length;i++){
             if (i>0) {
@@ -106,7 +106,7 @@ private String join(String[] strings) {
         return sb.toString();
     }
 
-    private SSLSocketFactory getSSLSocketFactory() throws IOException {
+    private static SSLSocketFactory getSSLSocketFactory() throws IOException {
         try {
             SSLContext sslContext = ((JsseSSLManager)SSLManager.getInstance()).getContext();
             return sslContext.getSocketFactory();

File: src/functions/src/main/java/org/apache/jmeter/functions/DigestEncodeFunction.java
Patch:
@@ -97,7 +97,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
      * @param index
      * @return
      */
-    private String uppercase(String encodedString, CompoundVariable[] values, int index) {
+    private static String uppercase(String encodedString, CompoundVariable[] values, int index) {
         String shouldUpperCase = values.length > index ? values[index].execute() : null;
         if (Boolean.parseBoolean(shouldUpperCase)) {
             return encodedString.toUpperCase();

File: src/functions/src/main/java/org/apache/jmeter/functions/JavaScript.java
Patch:
@@ -118,7 +118,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
      * @return result as String
      * @throws InvalidVariableException
      */
-    private String executeWithNashorn(SampleResult previousResult,
+    private static String executeWithNashorn(SampleResult previousResult,
             Sampler currentSampler, JMeterContext jmctx, JMeterVariables vars,
             String script, String varName)
             throws InvalidVariableException {
@@ -160,7 +160,7 @@ private String executeWithNashorn(SampleResult previousResult,
      * @return result as String
      * @throws InvalidVariableException
      */
-    private String executeWithRhino(SampleResult previousResult,
+    private static String executeWithRhino(SampleResult previousResult,
             Sampler currentSampler, JMeterContext jmctx, JMeterVariables vars,
             String script, String varName)
             throws InvalidVariableException {

File: src/functions/src/main/java/org/apache/jmeter/functions/RandomDate.java
Patch:
@@ -203,7 +203,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
     }
 
     @SuppressWarnings("JavaTimeDefaultTimeZone")
-    private DateTimeFormatter createFormatter(LocaleFormatObject format) {
+    private static DateTimeFormatter createFormatter(LocaleFormatObject format) {
         log.debug("Create a new instance of DateTimeFormatter for format '{}' in the cache", format);
         return new DateTimeFormatterBuilder().appendPattern(format.getFormat())
                 // TODO: what if year changes? (e.g. the year changes as the test executes)

File: src/functions/src/main/java/org/apache/jmeter/functions/RandomFromMultipleVars.java
Patch:
@@ -108,7 +108,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
      * @param vars {@link JMeterVariables}
      * @param results {@link List} where results are stored
      */
-    private void extractVariableValuesToList(String variableName,
+    private static void extractVariableValuesToList(String variableName,
             JMeterVariables vars, List<String> results) {
         String matchNumberAsStr = vars.get(variableName+"_matchNr");
         int matchNumber = 0;

File: src/functions/src/main/java/org/apache/jmeter/functions/TimeShift.java
Patch:
@@ -146,7 +146,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
         if (!StringUtils.isEmpty(format)) {
             try {
                 LocaleFormatObject lfo = new LocaleFormatObject(format, locale);
-                formatter = dateTimeFormatterCache.get(lfo, this::createFormatter);
+                formatter = dateTimeFormatterCache.get(lfo, TimeShift::createFormatter);
             } catch (IllegalArgumentException ex) {
                 log.error("Format date pattern '{}' is invalid "
                         + "(see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html)",
@@ -198,7 +198,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
     }
 
     @SuppressWarnings("JavaTimeDefaultTimeZone")
-    private DateTimeFormatter createFormatter(LocaleFormatObject format) {
+    private static DateTimeFormatter createFormatter(LocaleFormatObject format) {
         log.debug("Create a new instance of DateTimeFormatter for format '{}' in the cache", format);
         return new DateTimeFormatterBuilder().appendPattern(format.getFormat())
                 .parseDefaulting(ChronoField.NANO_OF_SECOND, 0)

File: src/jorphan/src/main/java/org/apache/commons/cli/avalon/CLArgsParser.java
Patch:
@@ -193,7 +193,7 @@ public final String getErrorString() {
      *            the Option Descriptor
      * @return the state
      */
-    private int getStateFor(final CLOptionDescriptor descriptor) {
+    private static int getStateFor(final CLOptionDescriptor descriptor) {
         final int flags = descriptor.getFlags();
         if ((flags & CLOptionDescriptor.ARGUMENTS_REQUIRED_2) == CLOptionDescriptor.ARGUMENTS_REQUIRED_2) {
             return STATE_REQUIRE_2ARGS;
@@ -341,7 +341,7 @@ public CLArgsParser(final String[] args, final CLOptionDescriptor[] optionDescri
      *            the cut-point in element of array
      * @return the result array
      */
-    private String[] subArray(final String[] array, final int index, final int charIndex) {
+    private static String[] subArray(final String[] array, final int index, final int charIndex) {
         final int remaining = array.length - index;
         final String[] result = new String[remaining];
 
@@ -487,7 +487,7 @@ private Token nextToken(final char[] separators) {
         return new Token(TOKEN_STRING, sb.toString());
     }
 
-    private boolean isSeparator(final char ch, final char[] separators) {
+    private static boolean isSeparator(final char ch, final char[] separators) {
         for (char separator : separators) {
             if (ch == separator) {
                 return true;

File: src/jorphan/src/main/java/org/apache/jorphan/exec/SystemCommand.java
Patch:
@@ -223,7 +223,7 @@ public int run(List<String> arguments1, List<String> arguments2) throws Interrup
      * @return proc exit value
      * @throws TimeoutException when timeout is reached while execution
      */
-    private int waitForEndWithTimeout(Process proc, long timeoutInMillis) throws InterruptedException, TimeoutException {
+    private static int waitForEndWithTimeout(Process proc, long timeoutInMillis) throws InterruptedException, TimeoutException {
         if (timeoutInMillis <= 0L) {
             return proc.waitFor();
         }

File: src/jorphan/src/main/java/org/apache/jorphan/reflect/ClassFinder.java
Patch:
@@ -94,7 +94,7 @@ public boolean accept(String className) {
          * @param contextClassLoader the classloader to use
          * @return true if the class is a non-abstract, non-interface instance of at least one of the parent classes
          */
-        private boolean isChildOf(
+        private static boolean isChildOf(
                 Class<?>[] parentClasses, String strClassName, ClassLoader contextClassLoader) {
             try {
                 Class<?> targetClass = Class.forName(strClassName, false, contextClassLoader);
@@ -143,7 +143,7 @@ public boolean accept(String className) {
             return false;
         }
 
-        private boolean hasAnnotationOnMethod(
+        private static boolean hasAnnotationOnMethod(
                 Class<? extends Annotation>[] annotations,
                 String classInQuestion,
                 ClassLoader contextClassLoader) {

File: src/jorphan/src/main/java/org/apache/jorphan/util/AlphaNumericComparator.java
Patch:
@@ -84,7 +84,7 @@ public int compare(T o1, T o2) {
         return 1;
     }
 
-    private int compareOneEmptyPart(String numberPart1, String numberPart2) {
+    private static int compareOneEmptyPart(String numberPart1, String numberPart2) {
         if (numberPart1.isEmpty()) {
             if (numberPart2.isEmpty()) {
                 return 0;
@@ -96,7 +96,7 @@ private int compareOneEmptyPart(String numberPart1, String numberPart2) {
         throw new IllegalArgumentException("At least one of the parameters have to be empty");
     }
 
-    private String trimLeadingZeroes(String numberPart) {
+    private static String trimLeadingZeroes(String numberPart) {
         int length = numberPart.length();
         for (int i = 0; i < length; i++) {
             if (numberPart.charAt(i) != '0') {

File: src/protocol/bolt/src/main/java/org/apache/jmeter/protocol/bolt/sampler/BoltSampler.java
Patch:
@@ -118,7 +118,7 @@ private String execute(Driver driver, String cypher, Map<String, Object> params,
         }
     }
 
-    private SampleResult handleException(SampleResult res, Exception ex) {
+    private static SampleResult handleException(SampleResult res, Exception ex) {
         res.setResponseMessage(ex.toString());
         if (ex instanceof Neo4jException) {
             res.setResponseCode(((Neo4jException)ex).code());

File: src/protocol/bolt/src/main/java/org/apache/jmeter/protocol/bolt/sampler/BoltTestElementBeanInfoSupport.java
Patch:
@@ -63,7 +63,7 @@ protected BoltTestElementBeanInfoSupport(Class<? extends TestBean> beanClass) {
         propertyDescriptor.setValue(DEFAULT, 60);
     }
 
-    private String[] getListAccessModes() {
+    private static String[] getListAccessModes() {
         return Arrays.stream(AccessMode.values()).map(Enum::toString).toArray(String[]::new);
     }
 }

File: src/protocol/ftp/src/main/java/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java
Patch:
@@ -305,7 +305,7 @@ public SampleResult sample(Entry e) {
         return res;
     }
 
-    private void saveResponse(SampleResult res, boolean binaryTransfer, ByteArrayOutputStream baos) {
+    private static void saveResponse(SampleResult res, boolean binaryTransfer, ByteArrayOutputStream baos) {
         res.setResponseData(baos.toByteArray());
         if (!binaryTransfer) {
             res.setDataType(SampleResult.TEXT);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/config/gui/GraphQLUrlConfigGui.java
Patch:
@@ -176,7 +176,7 @@ protected JTabbedPane getParameterPanel() {
         return paramPanel;
     }
 
-    private HTTPArgument createHTTPArgument(final String name, final String value, final boolean alwaysEncoded) {
+    private static HTTPArgument createHTTPArgument(final String name, final String value, final boolean alwaysEncoded) {
         final HTTPArgument arg = new HTTPArgument(name, value);
         arg.setUseEquals(true);
         arg.setEnabled(true);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/config/gui/HttpDefaultsGui.java
Patch:
@@ -322,7 +322,7 @@ protected JPanel createEmbeddedRsrcPanel() {
         return embeddedRsrcPanel;
     }
 
-    private JTextField addTextFieldWithLabel(JPanel panel, String labelText) {
+    private static JTextField addTextFieldWithLabel(JPanel panel, String labelText) {
         JLabel label = new JLabel(labelText); // $NON-NLS-1$
         JTextField field = new JTextField(100);
         label.setLabelFor(field);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -472,7 +472,7 @@ static boolean isSupportedProtocol(URL url) {
      * @param credentialsProvider provider which should be set up
      * @param localhost name of the workstation to be used for {@link NTCredentials}
      */
-    public void setupCredentials(Authorization auth, URL url,
+    public static void setupCredentials(Authorization auth, URL url,
             HttpClientContext localContext,
             CredentialsProvider credentialsProvider,
             String localhost) {
@@ -503,7 +503,7 @@ public void setupCredentials(Authorization auth, URL url,
      * @param url to be checked
      * @return <code>true</code> when port should omitted in SPN
      */
-    private boolean isStripPort(URL url) {
+    private static boolean isStripPort(URL url) {
         if (STRIP_PORT) {
             return true;
         }
@@ -518,7 +518,7 @@ private boolean isStripPort(URL url) {
      * @param b {@link Authorization}
      * @return true if a and b match
      */
-    private boolean match(Authorization a, Authorization b){
+    private static boolean match(Authorization a, Authorization b){
         return
                 a.getURL().equals(b.getURL())&&
                 a.getDomain().equals(b.getDomain())&&

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -257,7 +257,7 @@ public void addFile(String cookieFile) throws IOException {
         }
     }
 
-    private String cookieToString(Cookie c){
+    private static String cookieToString(Cookie c){
         StringBuilder sb=new StringBuilder(80);
         sb.append(c.getDomain());
         //flag - if all machines within a given domain can access the variable.
@@ -369,7 +369,7 @@ public void addCookieFromHeader(String cookieHeader, URL url){
      * @param b
      * @return true if cookies match
      */
-    private boolean match(Cookie a, Cookie b){
+    private static boolean match(Cookie a, Cookie b){
         return
         a.getName().equals(b.getName())
         &&

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/DNSCacheManager.java
Patch:
@@ -163,7 +163,7 @@ public InetAddress[] resolve(String host) throws UnknownHostException {
         }
     }
 
-    private void logCache(String hitOrMiss, String host, InetAddress[] addresses) {
+    private static void logCache(String hitOrMiss, String host, InetAddress[] addresses) {
         if (log.isDebugEnabled()) {
             log.debug("Cache {} thread#{}: {} => {}", hitOrMiss, JMeterContextService.getContext().getThreadNum(), host,
                     Arrays.toString(addresses));
@@ -226,7 +226,7 @@ private InetAddress[] fromStaticHost(String host) {
         return new InetAddress[0];
     }
 
-    private void addAsLiteralAddress(List<InetAddress> addresses, String address) {
+    private static void addAsLiteralAddress(List<InetAddress> addresses, String address) {
         try {
             addresses.add(InetAddress.getByName(address));
         } catch (UnknownHostException e) {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/DynamicKerberosSchemeFactory.java
Patch:
@@ -57,7 +57,7 @@ public AuthScheme create(final HttpContext context) {
         return new KerberosScheme(stripPort, isUseCanonicalHostname());
     }
 
-    private boolean isEnabled(Object contextAttribute, boolean defaultValue) {
+    private static boolean isEnabled(Object contextAttribute, boolean defaultValue) {
         if (contextAttribute instanceof Boolean) {
             return (Boolean) contextAttribute;
         }

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/DynamicSPNegoSchemeFactory.java
Patch:
@@ -57,7 +57,7 @@ public AuthScheme create(final HttpContext context) {
         return new SPNegoScheme(stripPort, isUseCanonicalHostname());
     }
 
-    private boolean isEnabled(Object contextAttribute, boolean defaultValue) {
+    private static boolean isEnabled(Object contextAttribute, boolean defaultValue) {
         if (contextAttribute instanceof Boolean) {
             return (Boolean) contextAttribute;
         }

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
Patch:
@@ -241,7 +241,7 @@ List<org.apache.http.cookie.Cookie> getCookiesForUrl(
      * Create an HttpClient cookie from a JMeter cookie
      */
     @SuppressWarnings("JavaUtilDate")
-    private org.apache.http.cookie.Cookie makeCookie(Cookie jmc) {
+    private static org.apache.http.cookie.Cookie makeCookie(Cookie jmc) {
         long exp = jmc.getExpiresMillis();
         BasicClientCookie ret = new BasicClientCookie(jmc.getName(),
                 jmc.getValue());

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -306,7 +306,7 @@ protected JPanel createEmbeddedRsrcPanel() {
         return embeddedRsrcPanel;
     }
 
-    private JTextField addTextFieldWithLabel(JPanel panel, String labelText) {
+    private static JTextField addTextFieldWithLabel(JPanel panel, String labelText) {
         JLabel label = new JLabel(labelText); // $NON-NLS-1$
         JTextField field = new JTextField(100);
         label.setLabelFor(field);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/curl/BasicCurlParser.java
Patch:
@@ -913,7 +913,7 @@ public void setAuthUserPasswd(String authentication, String url, Authorization a
     * @param mechanism     the mechanism of authorization
     * @param authorization the object of authorization
     */
-   private void setAuthMechanism(String mechanism, Authorization authorization) {
+   private static void setAuthMechanism(String mechanism, Authorization authorization) {
        switch (mechanism.toLowerCase()) {
        case "basic":
            authorization.setMechanism(Mechanism.BASIC);
@@ -932,7 +932,7 @@ private void setAuthMechanism(String mechanism, Authorization authorization) {
     * @param request                       http request
     * @param originalProxyServerParameters the parameters of proxy server
     */
-   private void setProxyServer(Request request, String originalProxyServerParameters) {
+   private static void setProxyServer(Request request, String originalProxyServerParameters) {
        String proxyServerParameters = originalProxyServerParameters;
        if (!proxyServerParameters.contains("://")) {
            proxyServerParameters = "http://" + proxyServerParameters;
@@ -960,7 +960,7 @@ private void setProxyServer(Request request, String originalProxyServerParameter
     * @param request               http request
     * @param authentication        the username and password of proxy server
     */
-   private void setProxyServerUserInfo(Request request, String authentication) {
+   private static void setProxyServerUserInfo(Request request, String authentication) {
        if (authentication.contains(":")) {
            String[] userInfo = authentication.split(":", 2);
            request.setProxyServer("username", userInfo[0]);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -238,7 +238,7 @@ private void configureButtonsState() {
         saveButton.setEnabled(hasRows);
     }
 
-    private Cookie createCookie(Object[] rowData) {
+    private static Cookie createCookie(Object[] rowData) {
         Cookie cookie = new Cookie(
                 (String) rowData[0],
                 (String) rowData[1],

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/gui/DNSCachePanel.java
Patch:
@@ -364,7 +364,7 @@ public void actionPerformed(ActionEvent e) {
         }
     }
 
-    private void enableTable(boolean custEnabled, boolean sysEnabled, JTable table, PowerTableModel model,
+    private static void enableTable(boolean custEnabled, boolean sysEnabled, JTable table, PowerTableModel model,
             JButton addButton, JButton deleteButton) {
         table.setEnabled(custEnabled);
         Color greyColor = new Color(240, 240, 240);
@@ -379,7 +379,7 @@ private void enableTable(boolean custEnabled, boolean sysEnabled, JTable table,
         }
     }
 
-    private void addTableRow(JTable table, PowerTableModel model, JButton button) {
+    private static void addTableRow(JTable table, PowerTableModel model, JButton button) {
         // If a table cell is being edited, we should accept the current
         // value and stop the editing before adding a new row.
         GuiUtils.stopTableEditing(table);
@@ -396,7 +396,7 @@ private void addTableRow(JTable table, PowerTableModel model, JButton button) {
         table.setRowSelectionInterval(rowToSelect, rowToSelect);
     }
 
-    private void deleteTableRow(JTable table, PowerTableModel model, JButton button) {
+    private static void deleteTableRow(JTable table, PowerTableModel model, JButton button) {
         if (model.getRowCount() > 0) {
             // If a table cell is being edited, we must cancel the editing
             // before deleting the row.

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/gui/HTTPFileArgsPanel.java
Patch:
@@ -312,7 +312,7 @@ private void addFile(String path) {
      *
      * @return a new File object
      */
-    private String browseAndGetFilePath() {
+    private static String browseAndGetFilePath() {
         String path = ""; //$NON-NLS-1$
         JFileChooser chooser = FileDialoger.promptToOpenFile();
         if (chooser != null) {
@@ -413,7 +413,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         table.revalidate();
     }
 
-    private JScrollPane makeScrollPane(Component comp) {
+    private static JScrollPane makeScrollPane(Component comp) {
         JScrollPane pane = new JScrollPane(comp);
         pane.setPreferredSize(pane.getMinimumSize());
         return GuiUtils.emptyBorder(pane);
@@ -542,7 +542,7 @@ private void addFromClipboard(String lineDelimiter, String argDelimiter) {
         }
     }
 
-    private HTTPFileArg createHTTPFileArgFromClipboard(String[] clipboardCols) {
+    private static HTTPFileArg createHTTPFileArgFromClipboard(String[] clipboardCols) {
         if (clipboardCols.length == 1) {
             return new HTTPFileArg(clipboardCols[0]);
         } else if (clipboardCols.length == 2) {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/modifier/gui/RegExUserParametersGui.java
Patch:
@@ -136,7 +136,7 @@ private JPanel makeParameterPanel() {
         return panel;
     }
 
-    private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc) {
+    private static void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc) {
         List<JComponent> item = field.getComponentList();
         panel.add(item.get(0), gbc.clone());
         gbc.gridx++;
@@ -146,14 +146,14 @@ private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints
     }
 
     // Next line
-    private void resetContraints(GridBagConstraints gbc) {
+    private static void resetContraints(GridBagConstraints gbc) {
         gbc.gridx = 0;
         gbc.gridy++;
         gbc.weightx = 0;
         gbc.fill=GridBagConstraints.NONE;
     }
 
-    private void initConstraints(GridBagConstraints gbc) {
+    private static void initConstraints(GridBagConstraints gbc) {
         gbc.anchor = GridBagConstraints.NORTHWEST;
         gbc.fill = GridBagConstraints.NONE;
         gbc.gridheight = 1;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/parser/CssParser.java
Patch:
@@ -75,7 +75,7 @@ public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] data,
         }
     }
 
-    private URLCollection orDefault(URLCollection urlCollection,
+    private static URLCollection orDefault(URLCollection urlCollection,
             URLCollection defaultValue) {
         if (urlCollection == null) {
             return Validate.notNull(defaultValue);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -190,7 +190,7 @@ public Iterator<URL> getEmbeddedResourceURLs(
      * @param ieVersion Float IE version
      * @return true if IE version &lt; IE v10
      */
-    protected final boolean isEnableConditionalComments(Float ieVersion) {
+    protected static boolean isEnableConditionalComments(Float ieVersion) {
         // Conditional comment have been dropped in IE10
         // http://msdn.microsoft.com/en-us/library/ie/hh801214%28v=vs.85%29.aspx
         return ieVersion != null && ieVersion < IE_10;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/parser/JTidyHTMLParser.java
Patch:
@@ -75,7 +75,7 @@ public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL
      *
      * @return new base URL
      */
-    private URL scanNodes(Node node, URLCollection urls, URL baseUrl) throws HTMLParseException {
+    private static URL scanNodes(Node node, URLCollection urls, URL baseUrl) throws HTMLParseException {
         if (node == null) {
             return baseUrl;
         }
@@ -201,7 +201,7 @@ private URL scanNodes(Node node, URLCollection urls, URL baseUrl) throws HTMLPar
      * Helper method to get an attribute value, if it exists @param attrs list
      * of attributes @param attname attribute name @return
      */
-    private String getValue(NamedNodeMap attrs, String attname) {
+    private static String getValue(NamedNodeMap attrs, String attname) {
         String v = null;
         Node n = attrs.getNamedItem(attname);
         if (n != null) {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -298,11 +298,11 @@ public String getContentType() {
         return null;
     }
 
-    private boolean isMultipart(String contentType) {
+    private static boolean isMultipart(String contentType) {
         return contentType != null && contentType.startsWith(HTTPConstants.MULTIPART_FORM_DATA);
     }
 
-    public MultipartUrlConfig getMultipartConfig(String contentType) {
+    public static MultipartUrlConfig getMultipartConfig(String contentType) {
         if(isMultipart(contentType)) {
             // Get the boundary string for the multiparts from the content type
             String boundaryString = contentType.substring(contentType.toLowerCase(java.util.Locale.ENGLISH).indexOf("boundary=") + "boundary=".length());
@@ -416,7 +416,7 @@ public String getFirstLine() {
      *            String that is partially tokenized.
      * @return The remainder
      */
-    private String getToken(StringTokenizer tk) {
+    private static String getToken(StringTokenizer tk) {
         if (tk.hasMoreTokens()) {
             return tk.nextToken();
         }

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -363,7 +363,7 @@ protected void setExcludeListInProxyControl(ProxyControl element) {
         element.setExcludeList(excludeList);
     }
 
-    private List<String> getDataList(PowerTableModel pModel, String colName) {
+    private static List<String> getDataList(PowerTableModel pModel, String colName) {
         String[] dataArray = pModel.getData().getColumn(colName);
         List<String> list = new ArrayList<>();
         Collections.addAll(list, dataArray);
@@ -417,7 +417,7 @@ public void configure(TestElement element) {
         repaint();
     }
 
-    private void populateTable(PowerTableModel pModel, PropertyIterator iter) {
+    private static void populateTable(PowerTableModel pModel, PropertyIterator iter) {
         pModel.clearData();
         while (iter.hasNext()) {
             pModel.addRow(new Object[] { iter.next().getStringValue() });
@@ -1037,7 +1037,7 @@ private void addTargetToPanel(JPanel destPanel) {
         destPanel.add(targetNodes, "growx, span");
     }
 
-    private JScrollPane findScrollPane(JPopupMenu popup) {
+    private static JScrollPane findScrollPane(JPopupMenu popup) {
         Component[] components = popup.getComponents();
         for (Component component : components) {
             if(component instanceof JScrollPane) {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/AjpSampler.java
Patch:
@@ -308,7 +308,7 @@ private String setConnectionHeaders(URL url, String host, String method)
         return hbuf.toString();
     }
 
-    private String encode(String value)  {
+    private static String encode(String value)  {
         StringBuilder newValue = new StringBuilder();
         char[] chars = value.toCharArray();
         for (char c : chars) {
@@ -335,7 +335,7 @@ private String setConnectionCookies(URL url, CookieManager cookies) {
         return cookieHeader;
     }
 
-    private int translateHeader(String n) {
+    private static int translateHeader(String n) {
         for(int i=0; i < HEADER_TRANS_ARRAY.length; i++) {
             if(HEADER_TRANS_ARRAY[i].equalsIgnoreCase(n)) {
                 return i+1;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/hc/LaxDeflateInputStream.java
Patch:
@@ -80,7 +80,7 @@ public int read(byte[] b) throws IOException {
      * @return -1 if relax
      * @throws EOFException
      */
-    private int handleRelaxMode(final EOFException ex, final boolean relaxMode) throws EOFException {
+    private static int handleRelaxMode(final EOFException ex, final boolean relaxMode) throws EOFException {
         if(relaxMode) {
             return -1;
         } else {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/hc/LaxGZIPInputStream.java
Patch:
@@ -79,7 +79,7 @@ public int read(byte[] b) throws IOException {
      * @return -1 if relax
      * @throws EOFException
      */
-    private int handleRelaxMode(final EOFException ex, final boolean relaxMode) throws EOFException {
+    private static int handleRelaxMode(final EOFException ex, final boolean relaxMode) throws EOFException {
         if(relaxMode) {
             return -1;
         } else {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/HTTPFileArg.java
Patch:
@@ -103,7 +103,7 @@ private static Tika createTika() {
         }
     }
 
-    private String detectMimeType(String path, String mimetype) {
+    private static String detectMimeType(String path, String mimetype) {
         if (StringUtils.isNotBlank(mimetype)) {
             return mimetype;
         }

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/HTTPResultConverter.java
Patch:
@@ -107,7 +107,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
         return res;
     }
 
-    private void retrieveHTTPItem(HierarchicalStreamReader reader,
+    private static void retrieveHTTPItem(HierarchicalStreamReader reader,
             HTTPSampleResult res, Object subItem) {
         if (subItem instanceof URL) {
             res.setURL((URL) subItem);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java
Patch:
@@ -91,22 +91,22 @@ protected boolean hasExcPattern(String text) {
         return false;
     }
 
-    protected String getIpAddress(String logLine) {
+    protected static String getIpAddress(String logLine) {
         if (USE_JAVA_REGEX) {
             return getIpAddressWithJavaRegex(logLine);
         }
         return getIpAddressWithOroRegex(logLine);
     }
 
-    private String getIpAddressWithJavaRegex(String logLine) {
+    private static String getIpAddressWithJavaRegex(String logLine) {
         Matcher matcher = IP_PATTERN.matcher(logLine);
         if (matcher.find()) {
             return matcher.group(0);
         }
         return "";
     }
 
-    private String getIpAddressWithOroRegex(String logLine) {
+    private static String getIpAddressWithOroRegex(String logLine) {
         Pattern incIp = JMeterUtils.getPatternCache().getPattern("\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}",
                 Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.SINGLELINE_MASK);
         Perl5Matcher matcher = JMeterUtils.getMatcher();

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java
Patch:
@@ -255,7 +255,7 @@ public void setSamplerResult(Object objectResult) {
      * @param contentType the content type header
      * @return  the boundary string
      */
-    private String extractBoundary(String contentType) {
+    private static String extractBoundary(String contentType) {
         // Get the boundary string for the multiparts from the content type
         String boundaryString = contentType.substring(contentType.toLowerCase(java.util.Locale.ENGLISH).indexOf("boundary=") + "boundary=".length());
         //TODO check in the RFC if other char can be used as separator
@@ -271,7 +271,7 @@ private String extractBoundary(String contentType) {
      * @param headers the http request headers
      * @return true if the request is multipart
      */
-    private boolean isMultipart(LinkedHashMap<String, String> headers) {
+    private static boolean isMultipart(LinkedHashMap<String, String> headers) {
         String contentType = headers.get(HTTPConstants.HEADER_CONTENT_TYPE);
         return contentType != null && contentType.startsWith(HTTPConstants.MULTIPART_FORM_DATA);
     }
@@ -406,7 +406,7 @@ private Component createRequestPane() {
         return panel;
     }
 
-    private void setFirstColumnPreferredAndMaxWidth(JTable table) {
+    private static void setFirstColumnPreferredAndMaxWidth(JTable table) {
         TableColumn column = table.getColumnModel().getColumn(0);
         column.setMaxWidth(300);
         column.setPreferredWidth(160);

File: src/protocol/java/src/main/java/org/apache/jmeter/protocol/java/sampler/JavaSamplerContext.java
Patch:
@@ -239,15 +239,15 @@ public JMeterContext getJMeterContext() {
      * Returns {@link JMeterVariables} for the current thread.
      * @return {@link JMeterVariables} for the current thread.
      */
-    public final JMeterVariables getJMeterVariables() {
+    public static JMeterVariables getJMeterVariables() {
         return JMeterContextService.getContext().getVariables();
     }
 
     /**
      * Returns JMeter properties.
      * @return {@link Properties} JMeter properties
      */
-    public final Properties getJMeterProperties() {
+    public static Properties getJMeterProperties() {
         return JMeterUtils.getJMeterProperties();
     }
 

File: src/protocol/java/src/main/java/org/apache/jmeter/protocol/java/test/JavaTest.java
Patch:
@@ -334,7 +334,7 @@ public SampleResult runTest(JavaSamplerContext context) {
      * @param context
      *            the context which contains the initialization parameters.
      */
-    private void listParameters(JavaSamplerContext context) {
+    private static void listParameters(JavaSamplerContext context) {
         Iterator<String> argsIt = context.getParameterNamesIterator();
         while (argsIt.hasNext()) {
             String name = argsIt.next();

File: src/protocol/java/src/main/java/org/apache/jmeter/protocol/java/test/SleepTest.java
Patch:
@@ -198,7 +198,7 @@ public Arguments getDefaultParameters() {
      * @param context
      *            the context which contains the initialization parameters.
      */
-    private void listParameters(JavaSamplerContext context) {
+    private static void listParameters(JavaSamplerContext context) {
         Iterator<String> argsIt = context.getParameterNamesIterator();
         while (argsIt.hasNext()) {
             String lName = argsIt.next();

File: src/protocol/jdbc/src/main/java/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java
Patch:
@@ -315,7 +315,7 @@ private void putIntoVar(final JMeterVariables jmvars, final String name,
         }
     }
 
-    private void putIntoVar(final JMeterVariables jmvars, final String name,
+    private static void putIntoVar(final JMeterVariables jmvars, final String name,
             final Clob clob) throws SQLException {
         try {
             if (clob.length() > MAX_RETAIN_SIZE) {
@@ -418,7 +418,7 @@ private int[] setArguments(PreparedStatement pstmt) throws SQLException, IOExcep
         return outputs;
     }
 
-    private void setArgument(PreparedStatement pstmt, String argument, int targetSqlType, int index) throws SQLException {
+    private static void setArgument(PreparedStatement pstmt, String argument, int targetSqlType, int index) throws SQLException {
         switch (targetSqlType) {
         case Types.INTEGER:
             pstmt.setInt(index, Integer.parseInt(argument));
@@ -582,7 +582,7 @@ private String getStringFromResultSet(ResultSet rs) throws SQLException, Unsuppo
         return sb.toString();
     }
 
-    private int processRow(ResultSet rs, ResultSetMetaData meta, StringBuilder sb, int numColumns,
+    private static int processRow(ResultSet rs, ResultSetMetaData meta, StringBuilder sb, int numColumns,
             JMeterVariables jmvars, String[] varNames, List<Map<String, Object>> results, int currentIterationIndex)
             throws SQLException, UnsupportedEncodingException {
         Map<String, Object> row = null;

File: src/protocol/jdbc/src/main/java/org/apache/jmeter/protocol/jdbc/config/DataSourceElementBeanInfo.java
Patch:
@@ -150,7 +150,7 @@ public static int getTransactionIsolationMode(String tag) {
      * Get the list of JDBC driver classname for the main databases
      * @return a String[] with the list of JDBC driver classname
      */
-    private String[] getListJDBCDriverClass() {
+    private static String[] getListJDBCDriverClass() {
         return JOrphanUtils.split(JMeterUtils.getPropDefault("jdbc.config.jdbc.driver.class", ""), "|"); //$NON-NLS-1$
     }
 
@@ -159,7 +159,7 @@ private String[] getListJDBCDriverClass() {
      * Based in https://stackoverflow.com/questions/10684244/dbcp-validationquery-for-different-databases
      * @return a String[] with the list of check queries
      */
-    private String[] getListCheckQuery() {
+    private static String[] getListCheckQuery() {
         return JOrphanUtils.split(JMeterUtils.getPropDefault("jdbc.config.check.query", ""), "|"); //$NON-NLS-1$
     }
 

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
Patch:
@@ -269,7 +269,7 @@ private ReceiveSubscriber(int queueSize, boolean useProps,
      * @return the message consumer
      * @throws JMSException
      */
-    private MessageConsumer createSubscriber(Session session,
+    private static MessageConsumer createSubscriber(Session session,
             Destination destination, String durableSubscriptionId,
             String jmsSelector) throws JMSException {
         if (isEmpty(durableSubscriptionId)) {
@@ -377,7 +377,7 @@ public void onMessage(Message message) {
      * @param s1
      * @return True if input is null, an empty string, or a white space-only string
      */
-    private boolean isEmpty(String s1) {
+    private static boolean isEmpty(String s1) {
         return s1 == null || s1.trim().isEmpty();
     }
 }

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -355,7 +355,7 @@ private String browseQueueForConsumption(Queue queue,
     }
 
     @SuppressWarnings("JdkObsolete")
-    private void extractContent(StringBuilder buffer, StringBuilder propBuffer, Message msg) {
+    private static void extractContent(StringBuilder buffer, StringBuilder propBuffer, Message msg) {
         if (msg != null) {
             try {
                 if (msg instanceof TextMessage) {
@@ -733,7 +733,7 @@ private Context getInitialContext() throws NamingException {
     }
 
     @SuppressWarnings("JdkObsolete")
-    private void printEnvironment(Context context) throws NamingException {
+    private static void printEnvironment(Context context) throws NamingException {
         try {
             Hashtable<?, ?> env = context.getEnvironment();
             if (env != null) {

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -266,7 +266,7 @@ private void cleanup() {
      * @param now current time
      * @return wait time
      */
-    private long calculateWait(long until, long now) {
+    private static long calculateWait(long until, long now) {
         if (until == 0) {
             return DEFAULT_WAIT; // Timeouts not active
         }

File: src/protocol/junit/src/main/java/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java
Patch:
@@ -552,7 +552,7 @@ private static Object getClassInstance(String className, String label){
      * @return the method or null if an error occurred
      * (or either parameter is null)
      */
-    private Method getMethod(Object clazz, String method){
+    private static Method getMethod(Object clazz, String method){
         if (clazz != null && method != null){
             try {
                 return clazz.getClass().getMethod(method,new Class[0]);
@@ -563,7 +563,7 @@ private Method getMethod(Object clazz, String method){
         return null;
     }
 
-    private Method getMethodWithAnnotation(Object clazz, Class<? extends Annotation> annotation) {
+    private static Method getMethodWithAnnotation(Object clazz, Class<? extends Annotation> annotation) {
         if(null != clazz && null != annotation) {
             for(Method m : clazz.getClass().getMethods()) {
                 if(m.isAnnotationPresent(annotation)) {

File: src/protocol/ldap/src/main/java/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgumentsPanel.java
Patch:
@@ -258,7 +258,7 @@ private void addArgument() {
      *
      * @return a new LDAPArgument object
      */
-    private LDAPArgument makeNewLDAPArgument() {
+    private static LDAPArgument makeNewLDAPArgument() {
         return new LDAPArgument("", "", "");
     }
 

File: src/protocol/ldap/src/main/java/org/apache/jmeter/protocol/ldap/config/gui/LdapConfigGui.java
Patch:
@@ -342,7 +342,7 @@ private JPanel createAddPanel() {
      *            text field to display
      * @return newly created panel
      */
-    private JPanel createLabelPanel(String key, JTextField field) {
+    private static JPanel createLabelPanel(String key, JTextField field) {
         JPanel addInnerPanel = new JPanel(new BorderLayout(5, 0));
         JLabel label = new JLabel(JMeterUtils.getResString(key)); // $NON-NLS-1$
         label.setLabelFor(field);

File: src/protocol/ldap/src/main/java/org/apache/jmeter/protocol/ldap/config/gui/LdapExtConfigGui.java
Patch:
@@ -487,7 +487,7 @@ private JPanel createModdnPanel() {
      *            field to show and attach the label
      * @return newly constructed panel
      */
-    private JPanel createLabelPanel(String key, JTextField field) {
+    private static JPanel createLabelPanel(String key, JTextField field) {
         JPanel panel = new JPanel(new BorderLayout(5, 0));
         JLabel label = new JLabel(JMeterUtils.getResString(key)); // $NON-NLS-1$
         label.setLabelFor(field);

File: src/protocol/ldap/src/main/java/org/apache/jmeter/protocol/ldap/sampler/LDAPSampler.java
Patch:
@@ -299,7 +299,7 @@ private ModificationItem[] getUserModAttributes() {
      *
      * @return the BasicAttributes
      */
-    private ModificationItem[] getModificationItem() {
+    private static ModificationItem[] getModificationItem() {
         ModificationItem[] mods = new ModificationItem[2];
         // replace (update) attribute
         Attribute mod0 = new BasicAttribute("userpassword", "secret"); //$NON-NLS-1$ //$NON-NLS-2$
@@ -345,7 +345,7 @@ private BasicAttributes getBasicAttributes() {
      *
      * @return the BasicAttribute
      */
-    private BasicAttribute getBasicAttribute(String name, String value) {
+    private static BasicAttribute getBasicAttribute(String name, String value) {
         BasicAttribute attr = new BasicAttribute(name, value);
         return attr;
     }

File: src/protocol/mail/src/main/java/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
Patch:
@@ -320,7 +320,7 @@ protected void addCustomProperties(Properties props) {
         }
     }
 
-    private void appendMessageData(SampleResult child, Message message)
+    private static void appendMessageData(SampleResult child, Message message)
             throws MessagingException, IOException {
         StringBuilder cdata = new StringBuilder();
         cdata.append("Date: "); // $NON-NLS-1$
@@ -363,7 +363,7 @@ private void appendMessageData(SampleResult child, Message message)
         }
     }
 
-    private void appendMultiPart(SampleResult child, StringBuilder cdata,
+    private static void appendMultiPart(SampleResult child, StringBuilder cdata,
             MimeMultipart mmp) throws MessagingException, IOException {
         String preamble = mmp.getPreamble();
         if (preamble != null ){
@@ -613,7 +613,7 @@ public void setHeaderOnly(boolean selected) {
      * @param propname the property name suffix, i.e. "starttls.require" in the example
      * @return the constructed name
      */
-    private String mailProp(String protocol, String propname) {
+    private static String mailProp(String protocol, String propname) {
         return "mail." + protocol + "." + propname;
     }
 }

File: src/protocol/mail/src/main/java/org/apache/jmeter/protocol/smtp/sampler/gui/SecuritySettingsPanel.java
Patch:
@@ -208,6 +208,7 @@ private void cbTrustAllCertsActionPerformed( // NOSONAR This method is used thro
      * @param evt
      *            ActionEvent to be handled
      */
+    @SuppressWarnings("MethodCanBeStatic")
     private void cbEnforceStartTLSActionPerformed(ActionEvent evt) { // NOSONAR This method is used through lambda
         // NOOP
     }

File: src/protocol/tcp/src/main/java/org/apache/jmeter/protocol/tcp/sampler/TCPClientImpl.java
Patch:
@@ -134,7 +134,7 @@ public String read(InputStream is, SampleResult sampleResult) throws ReadExcepti
         }
     }
 
-    private String showEOL(final String input) {
+    private static String showEOL(final String input) {
         StringBuilder sb = new StringBuilder(input.length()*2);
         for(int i=0; i < input.length(); i++) {
             char ch = input.charAt(i);

File: src/testkit-wiremock/src/main/java/org/apache/jmeter/wiremock/WireMockExtension.java
Patch:
@@ -50,11 +50,11 @@ public Object resolveParameter(ParameterContext parameterContext, ExtensionConte
         return getServer(extensionContext);
     }
 
-    private ExtensionContext.Store getStore(ExtensionContext context) {
+    private static ExtensionContext.Store getStore(ExtensionContext context) {
         return context.getStore(NAMESPACE);
     }
 
-    private WireMockServer getServer(ExtensionContext context) {
+    private static WireMockServer getServer(ExtensionContext context) {
         return getStore(context).get("server", WireMockServer.class);
     }
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/SamplerMetric.java
Patch:
@@ -187,8 +187,6 @@ public synchronized void resetForTimeInterval() {
                 stat.clear();
             }
             break;
-        default:
-            // This cannot happen
         }
         errors.clear();
         successes = 0;

File: src/core/src/main/java/org/apache/jmeter/ProxyAuthenticator.java
Patch:
@@ -60,8 +60,6 @@ protected PasswordAuthentication getPasswordAuthentication() {
                 return new PasswordAuthentication(userName, password);
             case SERVER:
                 break;
-            default:
-                break;
         }
         return null;
     }

File: src/core/src/main/java/org/apache/jmeter/gui/action/AbstractAction.java
Patch:
@@ -102,7 +102,6 @@ protected boolean popupCheckExistingFileListener(HashTree tree) {
                             return false;
                         }
                     case ASK:
-                    default:
                         String[] option = new String[]{JMeterUtils.getResString("concat_result"),
                                 JMeterUtils.getResString("dont_start"), JMeterUtils.getResString("replace_file")};
                         String question = MessageFormat.format(

File: src/core/src/main/java/org/apache/jmeter/gui/action/Start.java
Patch:
@@ -285,7 +285,6 @@ private ListedHashTree cloneTree(HashTree testTree, RunMode runMode) {
                 cloner = new TreeClonerNoTimer(false);
                 break;
             case AS_IS:
-            default:
                 cloner = new TreeCloner(false);
                 break;
         }

File: src/core/src/main/java/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -1075,8 +1075,6 @@ public static String[] csvReadFile(BufferedReader infile, char delim)
                                     + baos.toString() + "]");
                 }
                 break;
-            default:
-                throw new IllegalStateException("Unexpected state " + state);
             } // switch(state)
             if (push) {
                 if (ch == '\r') {// Remove following \n if present

File: src/functions/src/main/java/org/apache/jmeter/functions/ChangeCase.java
Patch:
@@ -90,8 +90,6 @@ protected String changeCase(String originalString, String mode) {
             case CAPITALIZE:
                 targetString = StringUtils.capitalize(originalString);
                 break;
-            default:
-                // default not doing nothing to string
             }
         } else {
             LOGGER.error("Unknown mode {}, returning {} unchanged", mode, targetString);

File: src/functions/src/main/java/org/apache/jmeter/functions/LogFunction.java
Patch:
@@ -175,8 +175,6 @@ static synchronized void logDetails(Logger logger, String stringToLog, String pr
                 case TRACE:
                     logger.trace("{} {} {}", threadName, separator, stringToLog, throwable);
                     break;
-                default:
-                    throw new IllegalStateException("Invalid log level");
             }
         }
     }

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java
Patch:
@@ -181,8 +181,6 @@ public void tag(Tag tag) {
                 break;
             case END:
                 break;
-            default:
-                throw new IllegalStateException("Unexpected tagType " + tagType);
             }
         }
 

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -1532,8 +1532,6 @@ private void initKeyStore() throws IOException, GeneralSecurityException {
             break;
         case NONE:
             throw new IOException("Cannot find keytool application and no keystore was provided");
-        default:
-            throw new IllegalStateException("Impossible case: " + KEYSTORE_MODE);
         }
     }
 

File: src/core/src/main/java/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -95,7 +95,7 @@ public class StandardJMeterEngine implements JMeterEngine, Runnable {
      * Executor service to execute management tasks like "start test", "stop test".
      * The use of {@link ExecutorService} allows propagating the exception from the threads.
      */
-    private final ExecutorService EXECUTOR_SERVICE = Executors.newCachedThreadPool();
+    private static final ExecutorService EXECUTOR_SERVICE = Executors.newCachedThreadPool();
 
     private volatile Future<?> runningTest;
 

File: src/core/src/main/java/org/apache/jmeter/config/Argument.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.Serializable;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.testelement.AbstractTestElement;
 import org.apache.jmeter.testelement.property.StringProperty;
 import org.apache.jorphan.util.JOrphanUtils;
@@ -92,7 +93,7 @@ public Argument(String name, String value, String metadata) {
      */
     public Argument(String name, String value, String metadata, String description) {
         if(name != null) {
-            setProperty(new StringProperty(ARG_NAME, name));
+            setProperty(new StringProperty(ARG_NAME, StringUtils.strip(name)));
         }
         if(value != null) {
             setProperty(new StringProperty(VALUE, value));
@@ -113,7 +114,7 @@ public Argument(String name, String value, String metadata, String description)
      */
     @Override
     public void setName(String newName) {
-        setProperty(new StringProperty(ARG_NAME, newName));
+        setProperty(new StringProperty(ARG_NAME, StringUtils.strip(newName)));
     }
 
     /**

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java
Patch:
@@ -287,6 +287,9 @@ public static Map<String, String[]> getQueryMap(String query) {
         String[] params = query.split(PARAM_CONCATENATE);
         for (String param : params) {
             String[] paramSplit = param.split("=");
+            if (paramSplit.length == 0) {
+                continue; // We found no key-/value-pair, so continue on the next param
+            }
             String name = decodeQuery(paramSplit[0]);
 
             // hack for SOAP request (generally)
@@ -318,7 +321,6 @@ public static Map<String, String[]> getQueryMap(String query) {
             }
             map.put(name, known);
         }
-
         return map;
     }
 

File: src/core/src/main/java/org/apache/jmeter/report/core/SampleMetaDataParser.java
Patch:
@@ -39,17 +39,18 @@ public class SampleMetaDataParser {
             // word followed by 0 or more repeats of (non-word char + word)
             // where the non-word char (\2) is the same
             // e.g. abc|def|ghi but not abd|def~ghi
-            .compile("\\w+((\\W)\\w+)?(\\2\\w+)*(\\2\"\\w+\")*" // $NON-NLS-1$
+            .compile("\\w+((\\W)[\\w ]+)?(\\2[\\w ]+)*(\\2\"[\\w ]+\")*" // $NON-NLS-1$
                     // last entries may be quoted strings
             );
+    private static final Pattern ALL_WORD_CHARS = Pattern.compile("^\\w+$");
 
     public SampleMetaDataParser(char separator) {
         this.separator = separator;
     }
 
     public SampleMetadata parse(String headRow) {
         char useSep = separator;
-        if (headRow.indexOf(useSep) < 0) {
+        if (headRow.indexOf(useSep) < 0 && !ALL_WORD_CHARS.matcher(headRow).matches()) {
             Matcher matcher = DELIMITER_PATTERN.matcher(headRow);
             if (matcher.matches()) {
                 String guessedSep = matcher.group(2);

File: src/core/src/main/java/org/apache/jmeter/gui/action/LookAndFeelCommand.java
Patch:
@@ -200,7 +200,7 @@ public LookAndFeelCommand() {
     }
 
     public static boolean isDarklafTheme() {
-        return "Darklaf".equals(UIManager.getLookAndFeel().getID()); // $NON-NLS-1$
+        return "Darklaf".equalsIgnoreCase(UIManager.getLookAndFeel().getID()); // $NON-NLS-1$
     }
 
     public static boolean isDark() {

File: src/core/src/main/java/org/apache/jmeter/report/processor/ErrorsSummaryConsumer.java
Patch:
@@ -97,7 +97,8 @@ static String getErrorKey(Sample sample) {
                  "/" + escapeJson(responseMessage) : "");
 
         if (MetricUtils.isSuccessCode(responseCode) ||
-                StringUtils.isNotBlank(sample.getFailureMessage())) {
+                (StringUtils.isEmpty(responseCode) &&
+                   StringUtils.isNotBlank(sample.getFailureMessage()))) {
             key = MetricUtils.ASSERTION_FAILED;
             if (ASSERTION_RESULTS_FAILURE_MESSAGE) {
                 String msg = sample.getFailureMessage();

File: src/core/src/test/java/org/apache/jmeter/report/processor/ErrorsSummaryConsumerTest.java
Patch:
@@ -57,9 +57,6 @@ public void testGetErrorKey() {
         sample = new Sample(0, metadata, new String[] { "false", "403", "", "" });
         assertEquals("403", ErrorsSummaryConsumer.getErrorKey(sample));
 
-        sample = new Sample(0, metadata, new String[] { "false", "403", "", "FailureMessage" });
-        assertEquals("FailureMessage", ErrorsSummaryConsumer.getErrorKey(sample));
-
         sample = new Sample(0, metadata, new String[] { "false", "500", "Server Error", "" });
         assertEquals("500/Server Error", ErrorsSummaryConsumer.getErrorKey(sample));
     }

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/proxy/NonGuiProxySample.java
Patch:
@@ -78,7 +78,7 @@ public static void main(String[] args) throws IllegalUserActionException,
         try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {
             SaveService.saveTree(treeModel.getTestPlan(), out);
             out.close();
-            System.out.println(out.toString());
+            System.out.println(out);
         }
 
     }

File: src/functions/src/test/java/org/apache/jmeter/functions/TestJavascriptFunctionWithRhino.java
Patch:
@@ -25,12 +25,14 @@
 public class TestJavascriptFunctionWithRhino extends TestJavascriptFunction {
 
     @BeforeEach
+    @Override
     public void setUp() {
         JMeterUtils.getJMeterProperties().put("javascript.use_rhino", "true");
         super.setUp();
     }
 
     @AfterEach
+    @Override
     public void tearDown() {
         JMeterUtils.getJMeterProperties().remove("javascript.use_rhino");
     }

File: src/core/src/test/java/org/apache/jmeter/threads/TestJMeterThread.java
Patch:
@@ -20,7 +20,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-import java.util.Date;
+import java.time.Instant;
 
 import org.apache.jmeter.control.LoopController;
 import org.apache.jmeter.samplers.AbstractSampler;
@@ -156,9 +156,9 @@ void testBug63490EndTestWhenDelayIsTooLongForScheduler() {
         jMeterThread.setScheduled(true);
         jMeterThread.setEndTime(System.currentTimeMillis() + maxDuration);
         jMeterThread.setThreadGroup(threadGroup);
-        long startTime = new Date().getTime();
+        Instant startTime = Instant.now();
         jMeterThread.run();
-        long duration = new Date().getTime() - startTime;
+        long duration = Instant.now().toEpochMilli() - startTime.toEpochMilli();
 
         assertFalse("Sampler should not be called", dummySampler.isCalled());
 

File: src/core/src/test/java/org/apache/jmeter/samplers/TestDataStrippingSampleSender.java
Patch:
@@ -92,7 +92,7 @@ private static SampleResult result(boolean isSuccess, SampleResult... subResults
         return result;
     }
 
-    private class SimpleSender implements SampleSender {
+    private static class SimpleSender implements SampleSender {
 
         private SampleResult result;
 

File: src/core/src/test/java/org/apache/jmeter/junit/JMeterTestCaseJUnit.java
Patch:
@@ -21,8 +21,8 @@
 
 import java.io.File;
 import java.nio.charset.Charset;
+import java.util.ArrayList;
 import java.util.Collection;
-import java.util.LinkedList;
 import java.util.Locale;
 import java.util.MissingResourceException;
 
@@ -110,7 +110,7 @@ protected static File findTestFile(String file) {
 
     protected void checkInvalidParameterCounts(AbstractFunction func, int minimum)
             throws Exception {
-        Collection<CompoundVariable> parms = new LinkedList<>();
+        Collection<CompoundVariable> parms = new ArrayList<>();
         for (int c = 0; c < minimum; c++) {
             assertThrows(InvalidVariableException.class, () -> func.setParameters(parms));
             parms.add(new CompoundVariable());

File: src/core/src/main/java/org/apache/jmeter/report/core/TimeHelper.java
Patch:
@@ -76,7 +76,7 @@ public static String formatTimeStamp(long timeStamp) {
      *            the format
      * @return the string
      */
-    @SuppressWarnings("JdkObsolete")
+    @SuppressWarnings("JavaUtilDate")
     public static String formatTimeStamp(long timeStamp, String format) {
         SimpleDateFormat dateFormat = format != null ? new SimpleDateFormat(
                 format) : new SimpleDateFormat();

File: src/core/src/main/java/org/apache/jmeter/report/dashboard/ReportGenerator.java
Patch:
@@ -270,7 +270,7 @@ public void generate() throws GenerationException {
     /**
      * @return {@link FilterConsumer} that filter data based on date range
      */
-    @SuppressWarnings("JdkObsolete")
+    @SuppressWarnings("JavaUtilDate")
     private FilterConsumer createFilterByDateRange() {
         FilterConsumer dateRangeFilter = new FilterConsumer();
         dateRangeFilter.setName(DATE_RANGE_FILTER_CONSUMER_NAME);

File: src/core/src/main/java/org/apache/jmeter/report/processor/NormalizerSampleConsumer.java
Patch:
@@ -89,7 +89,7 @@ private SimpleDateFormat createFormatter() {
     }
 
     @Override
-    @SuppressWarnings("JdkObsolete")
+    @SuppressWarnings("JavaUtilDate")
     public void consume(Sample s, int channel) {
         Date date = null;
         try {

File: src/core/src/main/java/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -203,7 +203,7 @@ public static void processSamples(String filename, Visualizer visualizer,
      *
      * @throws JMeterError
      */
-    @SuppressWarnings("JdkObsolete")
+    @SuppressWarnings("JavaUtilDate")
     private static SampleEvent makeResultFromDelimitedString(
             final String[] parts,
             final SampleSaveConfiguration saveConfig, // may be updated
@@ -843,7 +843,7 @@ public static String resultToDelimitedString(SampleEvent event,
      *            the separation string
      * @return the separated value representation of the result
      */
-    @SuppressWarnings("JdkObsolete")
+    @SuppressWarnings("JavaUtilDate")
     public static String resultToDelimitedString(SampleEvent event,
             SampleResult sample,
             SampleSaveConfiguration saveConfig,

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
Patch:
@@ -104,7 +104,7 @@ public HC4CookieHandler(String policy) {
     }
 
     @Override
-    @SuppressWarnings("JdkObsolete")
+    @SuppressWarnings("JavaUtilDate")
     public void addCookieFromHeader(CookieManager cookieManager,
             boolean checkCookies, String cookieHeader, URL url) {
             boolean debugEnabled = log.isDebugEnabled();
@@ -240,7 +240,7 @@ List<org.apache.http.cookie.Cookie> getCookiesForUrl(
     /**
      * Create an HttpClient cookie from a JMeter cookie
      */
-    @SuppressWarnings("JdkObsolete")
+    @SuppressWarnings("JavaUtilDate")
     private org.apache.http.cookie.Cookie makeCookie(Cookie jmc) {
         long exp = jmc.getExpiresMillis();
         BasicClientCookie ret = new BasicClientCookie(jmc.getName(),

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/BaseJMSSampler.java
Patch:
@@ -337,7 +337,7 @@ public boolean isDestinationStatic(){
      * @param message JMS Message
      * @return String with message header values.
      */
-    @SuppressWarnings("JdkObsolete")
+    @SuppressWarnings("JavaUtilDate")
     public static String getMessageHeaders(Message message) {
         final StringBuilder response = new StringBuilder(256);
         try {

File: src/core/src/main/java/org/apache/jmeter/gui/util/JDateField.java
Patch:
@@ -93,7 +93,7 @@ public JDateField(Date date) {
     }
 
     // Dummy constructor to allow JUnit tests to work
-    @SuppressWarnings("JdkObsolete")
+    @SuppressWarnings("JavaUtilDate")
     public JDateField() {
         this(new Date());
     }
@@ -113,7 +113,7 @@ public void setDate(Date date) {
      *
      * @return The currently set date
      */
-    @SuppressWarnings("JdkObsolete")
+    @SuppressWarnings("JavaUtilDate")
     public Date getDate() {
         try {
             return dateFormat.parse(getText());

File: src/core/src/main/java/org/apache/jmeter/visualizers/Sample.java
Patch:
@@ -208,7 +208,7 @@ public long getStartTime() {
      * @return the start time using the specified format
      * Intended for use from Functors
      */
-    @SuppressWarnings("JdkObsolete")
+    @SuppressWarnings("JavaUtilDate")
     public String getStartTimeFormatted(Format format) {
         return format.format(new Date(getStartTime()));
     }

File: src/core/src/main/java/org/apache/jmeter/visualizers/TableSample.java
Patch:
@@ -107,7 +107,7 @@ public long getStartTime() {
      * @return the start time using the specified format
      * Intended for use from Functors
      */
-    @SuppressWarnings("JdkObsolete")
+    @SuppressWarnings("JavaUtilDate")
     public String getStartTimeFormatted(Format format) {
         return format.format(new Date(getStartTime()));
     }

File: src/core/src/main/java/org/apache/jmeter/gui/util/HeaderAsPropertyRenderer.java
Patch:
@@ -48,7 +48,7 @@ public HeaderAsPropertyRenderer() {
      * are moved.
      */
     @Deprecated
-    public HeaderAsPropertyRenderer(@Deprecated Object[][] columnsMsgParameters) {
+    public HeaderAsPropertyRenderer(Object[][] columnsMsgParameters) {
         super();
     }
 

File: src/core/src/main/java/org/apache/jmeter/samplers/AbstractSampleSender.java
Patch:
@@ -30,7 +30,7 @@ public abstract class AbstractSampleSender implements SampleSender {
     private final boolean isClientConfigured = JMeterUtils.getPropDefault("sample_sender_client_configured", true); // $NON-NLS-1$
 
     /**
-     * @return boolean indicates how SampleSender configuration is done, @{code true}
+     * @return boolean indicates how SampleSender configuration is done, {@code true}
      *         means use client properties and send to servers, {@code false} means use
      *         server configurations
      */

File: src/components/src/main/java/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -308,7 +308,6 @@ private AssertionResult evaluateResponse(SampleResult response) {
         boolean contains = isContainsType(); // do it once outside loop
         boolean equals = isEqualsType();
         boolean substring = isSubstringType();
-        boolean matches = isMatchType();
 
         log.debug("Test Type Info: contains={}, notTest={}, orTest={}", contains, notTest, orTest);
 
@@ -342,7 +341,7 @@ private AssertionResult evaluateResponse(SampleResult response) {
                     found = toCheck.equals(stringPattern);
                 } else if (substring) {
                     found = toCheck.contains(stringPattern);
-                } else {
+                } else { // this is the old `matches` part which means `isMatchType()` is true
                     if (useJavaRegex) {
                         found = matchesWithJavaRegex(toCheck, stringPattern);
                     } else {

File: src/core/src/main/java/org/apache/jmeter/JMeter.java
Patch:
@@ -54,6 +54,7 @@
 import javax.script.ScriptEngineManager;
 import javax.script.ScriptException;
 import javax.swing.JTree;
+import javax.swing.SwingUtilities;
 import javax.swing.tree.TreePath;
 
 import org.apache.commons.cli.avalon.CLArgsParser;
@@ -563,7 +564,8 @@ public void start(String[] args) {
                     ReportGenerator generator = new ReportGenerator(reportFile, null);
                     generator.generate();
                 } else if (parser.getArgumentById(NONGUI_OPT) == null) { // not non-GUI => GUI
-                    startGui(testFile);
+                    String initialTestFile = testFile;
+                    SwingUtilities.invokeAndWait(() -> startGui(initialTestFile));
                     startOptionalServers();
                 } else { // NON-GUI must be true
                     extractAndSetReportOutputFolder(parser, deleteResultFile);

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/proxy/TestHttpRequestHdr.java
Patch:
@@ -612,7 +612,7 @@ private String createMultipartFileUploadBody(String fileField, String fileName,
             String fileMimeType, String fileContent, String boundary, String endOfLine) {
         // File upload multipart
         String postBody = "--" + boundary + endOfLine
-            + "Content-Disposition: form-data; name=\"" + fileField + "\" filename=\"" + fileName + "\"" + endOfLine
+            + "Content-Disposition: form-data; name=\"" + fileField + "\"; filename=\"" + fileName + "\"" + endOfLine
             + "Content-Type: " + fileMimeType + endOfLine
             + "Content-Transfer-Encoding: binary" + endOfLine
             + endOfLine

File: src/components/src/main/java/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -61,6 +61,7 @@
 import org.apache.jorphan.gui.GuiUtils;
 import org.apache.jorphan.gui.ObjectTableModel;
 import org.apache.jorphan.gui.RendererUtils;
+import org.apache.jorphan.gui.ui.KerningOptimizer;
 import org.apache.jorphan.reflect.Functor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -693,6 +694,7 @@ protected void setTextOptimized(String data) {
         } catch (BadLocationException ex) {
             LOGGER.error("Error inserting text", ex);
         }
+        KerningOptimizer.INSTANCE.configureKerning(results, document.getLength());
         results.setDocument(document);
     }
 }

File: src/jorphan/src/main/java/org/apache/jorphan/gui/ui/TextAreaUIWithUndo.java
Patch:
@@ -60,6 +60,7 @@ public static void install(UIDefaults defaults) {
      */
     @SuppressWarnings("unused")
     public static ComponentUI createUI(JComponent component) {
+        KerningOptimizer.INSTANCE.installKerningListener((JTextComponent) component);
         TextComponentUI.INSTANCE.installUndo((JTextComponent) component);
         if (component.getClass() == JTextArea.class) {
             component.addPropertyChangeListener("UI",

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsBoundaryExtractor.java
Patch:
@@ -212,6 +212,7 @@ public void setSamplerResult(Object userObject) {
     public void renderResult(SampleResult sampleResult) {
         clearData();
         String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);
+        response = ViewResultsFullVisualizer.wrapLongLines(response);
         boundaryExtractorDataField.setText(response);
         boundaryExtractorDataField.setCaretPosition(0);
     }

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsCssJQuery.java
Patch:
@@ -145,6 +145,7 @@ private String process(String textToParse) {
    public void renderResult(SampleResult sampleResult) {
        clearData();
         String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);
+        response = ViewResultsFullVisualizer.wrapLongLines(response);
         cssJqueryDataField.setText(response);
         cssJqueryDataField.setCaretPosition(0);
     }

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsRegexp.java
Patch:
@@ -143,6 +143,7 @@ private String process(String textToParse) {
     public void renderResult(SampleResult sampleResult) {
         clearData();
         String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);
+        response = ViewResultsFullVisualizer.wrapLongLines(response);
         regexpDataField.setText(response);
         regexpDataField.setCaretPosition(0);
     }

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsXPath.java
Patch:
@@ -180,6 +180,7 @@ private Document parseResponse(String unicodeData, XPathExtractor extractor)
     @Override
     public void renderResult(SampleResult sampleResult) {
         String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);
+        response = ViewResultsFullVisualizer.wrapLongLines(response);
         try {
             xmlDataField.setText(response == null ? "" : response);
             xmlDataField.setCaretPosition(0);

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsXPath2.java
Patch:
@@ -164,6 +164,7 @@ private String getDocumentNamespaces(String textToParse) {
     @Override
     public void renderResult(SampleResult sampleResult) {
         String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);
+        response = ViewResultsFullVisualizer.wrapLongLines(response);
         try {
             xmlDataField.setText(response == null ? "" : response);
             xmlDataField.setCaretPosition(0);

File: src/components/src/main/java/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -688,6 +688,7 @@ protected void setTextOptimized(String data) {
         Document blank = new DefaultStyledDocument();
         results.setDocument(blank);
         try {
+            data = ViewResultsFullVisualizer.wrapLongLines(data);
             document.insertString(0, data == null ? "" : data, null);
         } catch (BadLocationException ex) {
             LOGGER.error("Error inserting text", ex);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/FormCharSetFinder.java
Patch:
@@ -52,8 +52,9 @@ public void addFormActionsAndCharSet(String html, Map<String, String> formEncodi
             throws HTMLParseException {
         log.debug("Parsing html of: {}", html);
 
+        Document document;
         try {
-            Document document = Jsoup.parse(html);
+            document = Jsoup.parse(html);
         } catch (RuntimeException e) {
             throw new HTMLParseException("Could not parse HTML to look for forms charsets", e);
         }

File: src/components/src/main/java/org/apache/jmeter/assertions/JSONPathAssertion.java
Patch:
@@ -115,7 +115,8 @@ private void doAssert(String jsonString) {
             if (value instanceof JSONArray) {
                 JSONArray arrayValue = (JSONArray) value;
                 if (arrayValue.isEmpty() && !JsonPath.isPathDefinite(getJsonPath())) {
-                    throw new IllegalStateException("JSONPath is indefinite and the extracted Value is an empty Array. Please use an assertion value, to be sure to get a correct result. " + getExpectedValue());
+                    throw new IllegalStateException("JSONPath is indefinite and the extracted Value is an empty Array." +
+                            " Please use an assertion value, to be sure to get a correct result. " + getExpectedValue());
                 }
             }
             return;

File: src/components/src/main/java/org/apache/jmeter/assertions/JSONPathAssertion.java
Patch:
@@ -30,12 +30,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.jayway.jsonpath.JsonPath;
-
 import net.minidev.json.JSONArray;
 import net.minidev.json.JSONObject;
 import net.minidev.json.JSONValue;
 
+import com.jayway.jsonpath.JsonPath;
+
 /**
  * This is main class for JSONPath Assertion which verifies assertion on
  * previous sample result using JSON path expression

File: src/components/src/test/java/org/apache/jmeter/assertions/TestJSONPathAssertion.java
Patch:
@@ -22,7 +22,6 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import java.nio.charset.Charset;
 import java.util.Locale;
 
 import org.apache.jmeter.samplers.SampleResult;

File: src/components/src/main/java/org/apache/jmeter/visualizers/AxisGraph.java
Patch:
@@ -399,7 +399,7 @@ private void drawSample(String _title, int _maxLength, String[] _xAxisLabels,
             // Y Axis
             try {
                 BigDecimal round = BigDecimal.valueOf(max / 1000d);
-                round = round.setScale(0, RoundingMode.HALF_EVEN);
+                round = round.setScale(0, RoundingMode.UP);
                 double topValue = round.doubleValue() * 1000;
                 yaxis.setUserDefinedScale(0, 500);
                 yaxis.setNumItems((int) (topValue / 500)+1);

File: src/components/src/main/java/org/apache/jmeter/visualizers/RespTimeGraphChart.java
Patch:
@@ -282,7 +282,7 @@ private void drawSample(String _title, String[] _xAxisLabels,
             double[][] _data, int _width, int _height, int _incrScaleYAxis,
             Color[] _color, Font legendFont, Graphics g) {
 
-        double max = maxYAxisScale > 0 ? maxYAxisScale : getTopValue(findMax(_data), RoundingMode.HALF_EVEN); // define max scale y axis
+        double max = maxYAxisScale > 0 ? maxYAxisScale : getTopValue(findMax(_data), RoundingMode.UP); // define max scale y axis
         try {
             // if the title graph is empty, we can assume some default
             if (_title.length() == 0 ) {
@@ -332,7 +332,7 @@ private void drawSample(String _title, String[] _xAxisLabels,
                 double incrYAxis = max / numInterval;
                 double incrTopValue = _incrScaleYAxis;
                 if (_incrScaleYAxis == 0) {
-                    incrTopValue = getTopValue(incrYAxis, RoundingMode.HALF_EVEN);
+                    incrTopValue = getTopValue(incrYAxis, RoundingMode.HALF_UP);
                 }
                 if (incrTopValue < 1) {
                     incrTopValue = 1.0d; // Increment cannot be < 1

File: src/components/src/main/java/org/apache/jmeter/assertions/HTMLAssertion.java
Patch:
@@ -124,7 +124,7 @@ private AssertionResult runTidy(SampleResult inResponse) {
                 log.debug("Errors/warnings detected while parsing with tidy: {}", errbuf);
                 result.setFailure(true);
                 result.setFailureMessage(MessageFormat.format(
-                        "Tidy Parser errors: {} (allowed {}) Tidy Parser warnings: {} (allowed {})",
+                        "Tidy Parser errors: {0} (allowed {1}) Tidy Parser warnings: {2} (allowed {3})",
                         tidy.getParseErrors(), getErrorThreshold(), tidy.getParseWarnings(), getWarningThreshold()));
                 // return with an error
 

File: src/functions/src/main/java/org/apache/jmeter/functions/StringFromFile.java
Patch:
@@ -122,7 +122,7 @@ public class StringFromFile extends AbstractFunction implements TestStateListene
 
     public StringFromFile() {
         if (log.isDebugEnabled()) {
-            log.debug("++++++++ Construct {}" + this);
+            log.debug("++++++++ Construct {}", this);
         }
     }
 
@@ -147,9 +147,8 @@ private synchronized void openFile() {
         String tn = Thread.currentThread().getName();
         fileName = ((CompoundVariable) values[0]).execute();
 
-        String start = "";
         if (values.length >= PARAM_START) {
-            start = ((CompoundVariable) values[PARAM_START - 1]).execute();
+            String start = ((CompoundVariable) values[PARAM_START - 1]).execute();
             try {
                 // Low chances to be non numeric, we parse
                 myStart = Integer.parseInt(start);

File: src/core/src/main/java/org/apache/jmeter/JMeter.java
Patch:
@@ -1364,7 +1364,7 @@ private void checkForRemainingThreads() {
             // This cannot be a JMeter class variable, because properties
             // are not initialised until later.
             final int pauseToCheckForRemainingThreads =
-                    JMeterUtils.getPropDefault("jmeter.exit.check.pause", 2000); // $NON-NLS-1$
+                    JMeterUtils.getPropDefault("jmeter.exit.check.pause", 0); // $NON-NLS-1$
 
             if (pauseToCheckForRemainingThreads > 0) {
                 Thread daemon = new Thread(){

File: src/components/src/main/java/org/apache/jmeter/extractor/json/jsonpath/JSONManager.java
Patch:
@@ -95,7 +95,7 @@ private String stringifyJSONObject(Object obj) {
         if (obj instanceof JSONArray) {
             return ((JSONArray)obj).toJSONString();
         }
-        return obj == null ? "" : obj.toString(); //$NON-NLS-1$
+        return obj == null ? null : obj.toString();
     }
 
 }

File: src/core/src/main/java/org/apache/jmeter/gui/util/JSyntaxTextArea.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.JFactory;
 import org.apache.jorphan.gui.JMeterUIDefaults;
+import org.apache.jorphan.gui.ui.TextComponentUI;
 import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
 import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
 import org.fife.ui.rsyntaxtextarea.Theme;
@@ -240,6 +241,7 @@ public JSyntaxTextArea(int rows, int cols, boolean disableUndo) {
             }
         }
         if(disableUndo) {
+            TextComponentUI.uninstallUndo(this);
             // We need to do this to force recreation of undoManager which
             // will use the disableUndo otherwise it would always be false
             // See BUG 57440
@@ -276,7 +278,7 @@ public void setLanguage(String language) {
     protected RUndoManager createUndoManager() {
         RUndoManager undoManager = super.createUndoManager();
         if(disableUndo) {
-            undoManager.setLimit(0);
+            undoManager.setLimit(1);
         } else {
             undoManager.setLimit(MAX_UNDOS);
         }

File: src/core/src/main/java/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -587,6 +587,7 @@ private void executeSamplePackage(Sampler current,
                 // This call is done by checkAssertions() , as we don't call it
                 // for isIgnore, we explictely call it here
                 setLastSampleOk(threadContext.getVariables(), result.isSuccessful());
+                compiler.done(pack);
             }
             // Check if thread or test should be stopped
             if (result.isStopThread() || (!result.isSuccessful() && onErrorStopThread)) {

File: src/core/src/main/java/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -58,7 +58,8 @@ private static RemoteJMeterEngine getEngine(String hostAndPort)
         final String name = RemoteJMeterEngineImpl.JMETER_ENGINE_RMI_NAME; // $NON-NLS-1$ $NON-NLS-2$
         String host = hostAndPort;
         int port = RmiUtils.DEFAULT_RMI_PORT;
-        int indexOfSeparator = hostAndPort.indexOf(':');
+        int closingBracket = hostAndPort.indexOf(']');
+        int indexOfSeparator = hostAndPort.indexOf(':', closingBracket);
         if (indexOfSeparator >= 0) {
             host = hostAndPort.substring(0, indexOfSeparator);
             String portAsString = hostAndPort.substring(indexOfSeparator+1);

File: src/core/src/main/java/org/apache/jmeter/gui/util/VerticalPanel.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.jmeter.gui.util;
 
-import java.awt.BorderLayout;
 import java.awt.Color;
 import java.awt.Component;
 

File: src/core/src/main/java/org/apache/jmeter/control/IfController.java
Patch:
@@ -203,6 +203,7 @@ private static boolean computeResultFromString(
 
 
     private static boolean evaluateExpression(String cond) {
+        log.debug("    >> evaluate Expression [{}] equals (ignoring case) 'true'", cond);
         return cond.equalsIgnoreCase("true"); // $NON-NLS-1$
     }
 

File: src/components/src/main/java/org/apache/jmeter/extractor/json/jmespath/JMESPathExtractor.java
Patch:
@@ -176,6 +176,7 @@ private List<String> getData(JMeterVariables vars, JMeterContext context) {
             if (previousResult != null) {
                 List<String> results = getSampleList(previousResult).stream()
                         .map(SampleResult::getResponseDataAsString)
+                        .filter(StringUtils::isNotBlank)
                         .collect(Collectors.toList());
                 if (log.isDebugEnabled()) {
                     log.debug("JMESExtractor {} working on Responses: {}", getName(), results);

File: src/components/src/main/java/org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.processor.PostProcessor;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.AbstractScopedTestElement;
@@ -214,6 +215,7 @@ private List<String> extractJsonResponse(JMeterContext context, JMeterVariables
             if (previousResult != null) {
                 List<String> results = getSampleList(previousResult).stream()
                         .map(SampleResult::getResponseDataAsString)
+                        .filter(StringUtils::isNotBlank)
                         .collect(Collectors.toList());
                 if (log.isDebugEnabled()) {
                     log.debug("JSON Extractor {} working on Responses: {}", getName(), results);

File: src/core/src/main/java/org/apache/jmeter/report/processor/DescriptiveStatisticsFactory.java
Patch:
@@ -36,7 +36,7 @@ public static DescriptiveStatistics createDescriptiveStatistics() {
     }
 
     public static DescriptiveStatistics createDescriptiveStatistics(int windowSize) {
-        DescriptiveStatistics statistics = new DescriptiveStatistics();
+        DescriptiveStatistics statistics = new DescriptiveStatistics(windowSize);
         statistics.setPercentileImpl(new Percentile().withEstimationType(ESTIMATION_TYPE));
         return statistics;
     }

File: src/core/src/main/java/org/apache/jmeter/report/processor/PercentileAggregator.java
Patch:
@@ -42,15 +42,15 @@ public class PercentileAggregator implements Aggregator {
      *            the index of the percentile
      */
     public PercentileAggregator(double index) {
-        statistics = new DescriptiveStatistics(SLIDING_WINDOW_SIZE);
+        statistics = DescriptiveStatisticsFactory.createDescriptiveStatistics(SLIDING_WINDOW_SIZE);
         percentileIndex = index;
     }
 
     /**
      * @param lastAggregator {@link PercentileAggregator}
      */
     public PercentileAggregator(PercentileAggregator lastAggregator) {
-        statistics = new DescriptiveStatistics(SLIDING_WINDOW_SIZE);
+        statistics = DescriptiveStatisticsFactory.createDescriptiveStatistics(SLIDING_WINDOW_SIZE);
         this.percentileIndex = lastAggregator.percentileIndex;
     }
 

File: src/components/src/main/java/org/apache/jmeter/extractor/BoundaryExtractor.java
Patch:
@@ -163,7 +163,7 @@ private List<String> extractMatches(SampleResult previousResult, JMeterVariables
      * @return 0 if there is only one match, else the number of matches, this is used to remove
      */
     private int saveMatches(JMeterVariables vars, String refName, int matchNumber, List<String> matches) {
-        if (matches.isEmpty()) {
+        if (matchNumber >=0 && matches.isEmpty()) {
             return 0;
         }
         int matchCount = 0;

File: src/components/src/main/java/org/apache/jmeter/extractor/BoundaryExtractor.java
Patch:
@@ -163,6 +163,9 @@ private List<String> extractMatches(SampleResult previousResult, JMeterVariables
      * @return 0 if there is only one match, else the number of matches, this is used to remove
      */
     private int saveMatches(JMeterVariables vars, String refName, int matchNumber, List<String> matches) {
+        if (matches.isEmpty()) {
+            return 0;
+        }
         int matchCount = 0;
         if (matchNumber == 0) {
             saveRandomMatch(vars, refName, matches);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java
Patch:
@@ -25,6 +25,7 @@ public interface HTTPConstantsInterface { // CHECKSTYLE IGNORE InterfaceIsType
     String SC_MOVED_TEMPORARILY = "302";
     String SC_SEE_OTHER = "303";
     String SC_TEMPORARY_REDIRECT = "307";
+    String SC_PERMANENT_REDIRECT = "308";
 
     int DEFAULT_HTTPS_PORT = 443;
     String DEFAULT_HTTPS_PORT_STRING = "443"; // $NON-NLS-1$

File: src/components/src/main/java/org/apache/jmeter/extractor/json/jmespath/JMESPathExtractor.java
Patch:
@@ -88,7 +88,8 @@ public void process() {
             if (resultList.size() > 1) {
                 handleListResult(vars, refName, defaultValue, matchNumber, resultList);
             } else if (resultList.isEmpty()){
-                // no value extracted. Use defaultValue
+                handleNullResult(vars, refName, defaultValue, matchNumber);
+                return;
             } else {
                 // else just one value extracted
                 handleSingleResult(vars, refName, matchNumber, resultList);

File: src/components/src/main/java/org/apache/jmeter/extractor/json/jmespath/JMESPathExtractor.java
Patch:
@@ -79,14 +79,16 @@ public void process() {
         try {
             JsonNode actualObj = OBJECT_MAPPER.readValue(jsonResponse, JsonNode.class);
             JsonNode result = JMESPathCache.getInstance().get(jsonPathExpression).search(actualObj);
-            if (result.isNull() || result.isEmpty()) {
+            if (result.isNull()) {
                 handleNullResult(vars, refName, defaultValue, matchNumber);
                 return;
             }
             List<String> resultList = splitJson(result);
             // if more than one value extracted, suffix with "_index"
             if (resultList.size() > 1) {
                 handleListResult(vars, refName, defaultValue, matchNumber, resultList);
+            } else if (resultList.isEmpty()){
+                // no value extracted. Use defaultValue
             } else {
                 // else just one value extracted
                 handleSingleResult(vars, refName, matchNumber, resultList);

File: src/components/src/test/java/org/apache/jmeter/extractor/json/jmespath/TestJMESPathExtractor.java
Patch:
@@ -73,7 +73,7 @@ public void testNoMatchNumberSet() {
     @RunWith(Parameterized.class)
     public static class OneMatchOnAllExtractedValues {
 
-        @Parameters
+        @Parameters(name = "Extract from {0} with path {1} should result in {2} for match {3}")
         public static Collection<String[]> data() {
             return Arrays.asList(new String[][] {
                 {"[\"one\"]", "[*]", "one", "1"},

File: src/components/src/main/java/org/apache/jmeter/extractor/json/jmespath/JMESPathExtractor.java
Patch:
@@ -74,7 +74,7 @@ public void process() {
         try {
             JsonNode actualObj = OBJECT_MAPPER.readValue(jsonResponse, JsonNode.class);
             JsonNode result = JMESPathCache.getInstance().get(jsonPathExpression).search(actualObj);
-            if (result.isNull()) {
+            if (result.isNull() || result.isEmpty()) {
                 handleNullResult(vars, refName, defaultValue, matchNumber);
                 return;
             }

File: src/core/src/main/java/org/apache/jmeter/testelement/TestElement.java
Patch:
@@ -315,9 +315,9 @@ public interface TestElement extends Cloneable {
     String getName();
 
     /**
-     * Returns name of this element.
+     * Associates a name with this element.
      * @param name
-     *            of this element
+     *            to be associated
      */
     void setName(String name);
 

File: src/core/src/main/java/org/apache/jmeter/config/gui/RowDetailDialog.java
Patch:
@@ -129,7 +129,6 @@ public void actionPerformed(ActionEvent actionEvent) {
         return rootPane;
     }
 
-    @SuppressWarnings("MathRoundIntLong")
     private void init() { // WARNING: called from ctor so must not be overridden (i.e. must be private or final)
         this.getContentPane().setLayout(new BorderLayout(10,10));
 

File: src/core/src/main/java/org/apache/jmeter/config/gui/RowDetailDialog.java
Patch:
@@ -137,7 +137,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         dataComponents = new ArrayList<>();
 
         final int columnCount = tableModel.getColumnCount();
-        final int linesPerTextArea = Math.max(5, Math.round(30 / Math.max(columnCount - 1, 1)));
+        final int linesPerTextArea = Math.max(5, 30 / Math.max(columnCount - 1, 1));
         for (int column = 0; column < columnCount; column++) {
             JLabel dataLabel = new JLabel(JMeterUtils.getResString(tableModel.getColumnName(column)));
             dataPanel.add(dataLabel);

File: src/core/src/main/java/org/apache/jmeter/JMeter.java
Patch:
@@ -427,9 +427,11 @@ private void startGui(String testFile) {
                 Load.insertLoadedTree(1, tree);
             } catch (ConversionException e) {
                 log.error("Failure loading test file", e);
+                splash.close();
                 JMeterUtils.reportErrorToUser(SaveService.CEtoString(e));
             } catch (Exception e) {
                 log.error("Failure loading test file", e);
+                splash.close();
                 JMeterUtils.reportErrorToUser(e.toString());
             }
         } else {

File: src/core/src/main/java/org/apache/jmeter/functions/gui/FunctionHelper.java
Patch:
@@ -239,6 +239,7 @@ public void actionPerformed(ActionEvent e) {
             Arguments args = (Arguments) parameterPanel.createTestElement();
             String functionCall = buildFunctionCallString(functionName, args);
             cutPasteFunction.setText(functionCall);
+            cutPasteFunction.setEnabled(true);
             GuiUtils.copyTextToClipboard(cutPasteFunction.getText());
             CompoundVariable function = new CompoundVariable(functionCall);
             JMeterContext threadContext = JMeterContextService.getContext();

File: src/protocol/bolt/src/main/java/org/apache/jmeter/protocol/bolt/sampler/AbstractBoltTestElement.java
Patch:
@@ -85,6 +85,7 @@ public void setRecordQueryResults(boolean recordQueryResults) {
         this.recordQueryResults = recordQueryResults;
     }
 
+    //returns a SessionConfig object that can be passed to the driver session
     public SessionConfig getSessionConfig() {
         SessionConfig.Builder sessionConfigBuilder = SessionConfig.builder()
                 .withDefaultAccessMode(Enum.valueOf(AccessMode.class, getAccessMode()));
@@ -95,6 +96,8 @@ public SessionConfig getSessionConfig() {
 
         return sessionConfigBuilder.build();
     }
+
+    //returns a TransactionConfig object that can be passed to the driver transaction
     public TransactionConfig getTransactionConfig() {
         TransactionConfig.Builder txConfigBuilder = TransactionConfig.builder();
 

File: src/protocol/mail/src/main/java/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
Patch:
@@ -379,7 +379,7 @@ private List<InternetAddress> getPropAsAddresses(String propKey) throws AddressE
         }
     }
 
-    private String encodeAddress(String address) throws AddressException {
+    private String encodeAddress(String address) {
         String trimmedAddress = address.trim();
         if (!StringUtils.isAsciiPrintable(trimmedAddress)) {
             try {

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/control/TestCacheManagerBase.java
Patch:
@@ -146,7 +146,7 @@ public void testCacheControl() throws Exception {
         setCacheControl("public, max-age=1");
         cacheResult(sampleResultOK);
         assertValidEntry();
-        sleepTill(start + 1010);
+        sleepTill(start + 2010);
         assertInvalidEntry();
     }
 
@@ -248,7 +248,7 @@ public void testPrivateCache() throws Exception {
         setCacheControl("private, max-age=1");
         cacheResult(sampleResultOK);
         assertValidEntry();
-        sleepTill(start + 1050);
+        sleepTill(start + 2020);
         assertInvalidEntry();
     }
 
@@ -344,7 +344,7 @@ public void testCacheHttpClientBug51932() throws Exception {
         setCacheControl("public, max-age=1, no-transform");
         cacheResult(sampleResultOK);
         assertValidEntry();
-        sleepTill(start + 1010);
+        sleepTill(start + 2010);
         assertInvalidEntry();
     }
 

File: src/core/src/test/java/org/apache/jorphan/test/AllTests.java
Patch:
@@ -310,7 +310,8 @@ private static void initializeManager(String[] args) {
         if (args.length >= 3) {
             try {
                 System.out.println("Using initializeProperties() from " + args[2]);
-                UnitTestManager um = (UnitTestManager) Class.forName(args[2]).getDeclaredConstructor().newInstance();
+                UnitTestManager um = Class.forName(args[2]).asSubclass(UnitTestManager.class).getDeclaredConstructor()
+                        .newInstance();
                 System.out.println("Setting up initial properties using: " + args[1]);
                 um.initializeProperties(args[1]);
             } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {

File: src/core/src/test/java/org/apache/jorphan/reflect/TestFunctor.java
Patch:
@@ -41,7 +41,7 @@ interface HasString {
         String getString(String s);
     }
 
-    class Test1 implements HasName {
+    static class Test1 implements HasName {
         private final String name;
         public Test1(){
             this("");
@@ -57,7 +57,7 @@ public String getString(String s){
             return s;
         }
     }
-    class Test1a extends Test1{
+    static class Test1a extends Test1{
         Test1a(){
             super("1a");
         }

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/curl/StringArgumentHolder.java
Patch:
@@ -63,6 +63,7 @@ public String getName() {
         return this.name;
     }
 
+    @Override
     public Map<String, String> getMetadata() {
         return Collections.unmodifiableMap(metadata);
     }

File: src/jorphan/src/test/java/org/apache/jorphan/util/TestConverter.java
Patch:
@@ -65,18 +65,21 @@ public void testGetCalendarObjectCalendarWithInvalidStringAndNullDefault() {
     }
 
     @Test
+    @SuppressWarnings({ "UndefinedEquals", "JdkObsolete" })
     public void testGetDateObjectDateWithTimeAndNullDefault() {
         Date time = new Date();
         assertEquals(time, Converter.getDate(time, null));
     }
 
     @Test
+    @SuppressWarnings({ "UndefinedEquals", "JdkObsolete" })
     public void testGetDateObjectDateWithNullAndDateAsDefault() {
         Date date = new Date();
         assertEquals(date, Converter.getDate(null, date));
     }
 
     @Test
+    @SuppressWarnings("UndefinedEquals")
     public void testGetDateObjectDateWithValidStringAndNullDefault() {
         Calendar cal = new GregorianCalendar();
         cal.set(Calendar.HOUR_OF_DAY, 0);

File: src/jorphan/src/test/java/org/apache/jorphan/math/TestStatCalculator.java
Patch:
@@ -80,7 +80,7 @@ public void testCalculation() {
         calc.addValue(15);
         calc.addValue(21);
         assertEquals(16, (int) calc.getMean());
-        assertEquals(8.0622577F, (float) calc.getStandardDeviation(), 0F);
+        assertEquals(8.062258F, (float) calc.getStandardDeviation(), 0F);
         assertEquals(30, calc.getMax().intValue());
         assertEquals(3, calc.getMin().intValue());
         assertEquals(15, calc.getMedian().intValue());

File: src/core/src/main/java/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -1123,9 +1123,9 @@ private static void saveSubResults(SampleEvent event, PrintWriter out, SampleSav
         }
         String formattedResult;
         for (SampleResult subResult : result.getSubResults()) {
-            saveSubResults(event, out, saveConfiguration, delimiter, subResult, recursionLevel + 1);
             formattedResult = resultToDelimitedString(event, subResult, saveConfiguration, delimiter);
             out.println(formattedResult);
+            saveSubResults(event, out, saveConfiguration, delimiter, subResult, recursionLevel + 1);
         }
     }
 }

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/util/TestHTTPFileArg.java
Patch:
@@ -32,7 +32,7 @@ public void testConstructors() throws Exception {
         file = new HTTPFileArg("path");
         assertEquals("single parameter failure", "path", file.getPath());
         assertEquals("single parameter failure", "", file.getParamName());
-        assertEquals("single parameter failure", "", file.getMimeType());
+        assertEquals("single parameter failure", "application/octet-stream", file.getMimeType());
         file = new HTTPFileArg("path", "param", "mimetype");
         assertEquals("three parameter failure", "path", file.getPath());
         assertEquals("three parameter failure", "param", file.getParamName());

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/curl/BasicCurlParser.java
Patch:
@@ -989,7 +989,7 @@ private String getPostDataByDifferentOption(final String originalPostdata, Strin
    }
 
    private String unquote(String value) {
-       LoggerFactory.getLogger(this.getClass()).info("Unquote {}", value, new RuntimeException(""));
+       LoggerFactory.getLogger(this.getClass()).debug("Unquote {}", value);
        if (value.charAt(0) == '"') {
            String result = value.substring(1, value.length() - 1);
            return result.replaceAll("\\\\(.)", "$1");

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/gui/action/ParseCurlCommandAction.java
Patch:
@@ -123,7 +123,6 @@ public class ParseCurlCommandAction extends AbstractAction implements MenuCreato
     private static final Set<String> commands = new HashSet<>();
     public static final String IMPORT_CURL = "import_curl";
     private static final String CREATE_REQUEST = "CREATE_REQUEST";
-    private static final String TYPE_FORM = ";type=";
     private static final String CERT = "cert";
     private Logger log = LoggerFactory.getLogger(getClass());
     /** A panel allowing results to be saved. */

File: src/core/src/main/java/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java
Patch:
@@ -269,6 +269,8 @@ protected Container makeTitlePanel() {
         titlePanel.add(nameField);
 
         titlePanel.add(labelFor(nameField, "testplan_comments"));
+        commentField.setWrapStyleWord(true);
+        commentField.setLineWrap(true);
         titlePanel.add(commentField);
 
         // Note: VerticalPanel has a workaround for Box layout which aligns elements, so we can't

File: src/core/src/main/java/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -670,7 +670,7 @@ public String getToolTipText(MouseEvent event) {
                         if (testElement instanceof TestElement) {
                             String comment = ((TestElement) testElement).getComment();
                             if (StringUtils.isNotBlank(comment)) {
-                                return comment;
+                                return StringUtils.abbreviate(comment, 80);
                             }
                         }
                     }

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -36,6 +36,7 @@ public abstract class HTMLParser extends BaseParser {
 
     private static final Logger log = LoggerFactory.getLogger(HTMLParser.class);
 
+    protected static final String ATT_ARCHIVE       = "archive"; // $NON-NLS-1$
     protected static final String ATT_BACKGROUND    = "background";// $NON-NLS-1$
     protected static final String ATT_CODE          = "code";// $NON-NLS-1$
     protected static final String ATT_CODEBASE      = "codebase";// $NON-NLS-1$

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -286,7 +286,7 @@ protected void computeFromPostBody(HTTPSamplerBase sampler,
      * @param postData String
      * @return boolean
      */
-    public static boolean isPotentialJson(final String postData) throws IOException {
+    public static boolean isPotentialJson(final String postData) {
         boolean valid = true;
         try{
             OBJECT_MAPPER.readTree(postData);

File: src/core/src/main/java/org/apache/jmeter/gui/action/LookAndFeelCommand.java
Patch:
@@ -100,6 +100,9 @@ private static MenuItem ofDarklafTheme(Theme theme) {
         if (System.getProperty("darklaf.unifiedMenuBar") == null) {
             System.setProperty("darklaf.unifiedMenuBar", "true");
         }
+        if (System.getProperty("darklaf.treeRowPopup") == null) {
+            System.setProperty("darklaf.treeRowPopup", "false");
+        }
         UIManager.installLookAndFeel(JMeterMenuBar.DARCULA_LAF, JMeterMenuBar.DARCULA_LAF_CLASS);
 
         List<MenuItem> items = new ArrayList<>();

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -288,7 +288,7 @@ protected void computeFromPostBody(HTTPSamplerBase sampler,
      */
     public static boolean isPotentialJson(final String postData) throws IOException {
         boolean valid = true;
-        try{ 
+        try{
             OBJECT_MAPPER.readTree(postData);
         } catch(JsonProcessingException e){
             valid = false;

File: src/core/src/main/java/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -668,13 +668,13 @@ public String getToolTipText(MouseEvent event) {
                         Object testElement = ((DefaultMutableTreeNode) treeNode).getUserObject();
                         if (testElement instanceof TestElement) {
                             String comment = ((TestElement) testElement).getComment();
-                            if (comment != null && comment.length() > 0) {
+                            if (StringUtils.isNotBlank(comment)) {
                                 return comment;
                             }
                         }
                     }
                 }
-                return "";
+                return null;
             }
         };
         treevar.setToolTipText("");

File: src/core/src/main/java/org/apache/jmeter/util/SSLManager.java
Patch:
@@ -166,9 +166,9 @@ protected synchronized JmeterKeyStore getKeyStore() {
         return this.keyStore;
     }
 
-    private void retryLoadKeys(File initStore, boolean allowEmptyPassword) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException,
-            UnrecoverableKeyException {
-        for (int i=0; i<3; i++) {
+    private void retryLoadKeys(File initStore, boolean allowEmptyPassword) throws NoSuchAlgorithmException,
+            CertificateException, IOException, KeyStoreException, UnrecoverableKeyException {
+        for (int i = 0; i < 3; i++) {
             String password = getPassword();
             if (!allowEmptyPassword) {
                 Validate.notNull(password, "Password for keystore must not be null");

File: src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -706,11 +706,11 @@ public void storeSubResult(SampleResult subResult) {
      *            the {@link SampleResult} to be added
      * @param renameSubResults boolean do we rename subResults based on position
      */
-    private void storeSubResult(SampleResult subResult, boolean renameSubResults) {
+    public void storeSubResult(SampleResult subResult, boolean renameSubResults) {
         if (subResults == null) {
             subResults = new ArrayList<>();
         }
-        if(renameSubResults) {
+        if (renameSubResults) {
             subResult.setSampleLabel(getSampleLabel()+"-"+subResultIndex++);
         }
         subResults.add(subResult);

File: src/core/src/main/java/org/apache/jmeter/save/converters/SampleResultConverter.java
Patch:
@@ -396,7 +396,7 @@ protected boolean retrieveItem(HierarchicalStreamReader reader, UnmarshallingCon
         if (subItem instanceof AssertionResult) {
             res.addAssertionResult((AssertionResult) subItem);
         } else if (subItem instanceof SampleResult) {
-            res.storeSubResult((SampleResult) subItem);
+            res.storeSubResult((SampleResult) subItem, false);
         } else if (nodeName.equals(TAG_RESPONSE_HEADER)) {
             res.setResponseHeaders((String) subItem);
         } else if (nodeName.equals(TAG_REQUEST_HEADER)) {

File: src/core/src/main/java/org/apache/jmeter/gui/action/LoadRecentProject.java
Patch:
@@ -121,6 +121,9 @@ public static void updateRecentFileMenuItems(List<JComponent> menuItems, String
         boolean alreadyExists = false;
         for(int i = 0; i < NUMBER_OF_MENU_ITEMS; i++) {
             String recentFilePath = getRecentFile(i);
+            if (recentFilePath == null) {
+                continue;
+            }
             if(!loadedFileName.equals(recentFilePath)) {
                 newRecentFiles.add(recentFilePath);
             }

File: src/core/src/main/java/org/apache/jmeter/gui/action/HtmlReportGenerator.java
Patch:
@@ -40,7 +40,7 @@ public class HtmlReportGenerator {
     public static final String CANNOT_CREATE_DIRECTORY = "generate_report_ui.cannot_create_directory";
 
     private static final Logger LOGGER = LoggerFactory.getLogger(HtmlReportGenerator.class);
-    private static final long COMMAND_TIMEOUT = JMeterUtils.getPropDefault("generate_report_ui.generation_timeout", 120_000L);
+    private static final long COMMAND_TIMEOUT = JMeterUtils.getPropDefault("generate_report_ui.generation_timeout", 300_000L);
 
     private String csvFilePath;
     private String userPropertiesFilePath;

File: src/core/src/main/java/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -233,10 +233,10 @@ private List<MenuCreator> findMenuCreators() {
                         creators.add(creator);
                     }
                 } catch (NoClassDefFoundError e) {
-                    log.error("Exception registering implementation:{} of interface:{}, a dependency used by the plugin class is missing",
+                    log.error("Exception registering implementation: [{}] of interface: [{}], a dependency used by the plugin class is missing",
                             strClassName, MenuCreator.class, e);
                 } catch (Exception e) {
-                    log.error("Exception registering implementation {} of interface:{}, a jar is probably missing",
+                    log.error("Exception registering implementation: [{}] of interface: [{}], a jar is probably missing",
                             strClassName, MenuCreator.class, e);
                 }
             }

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1038,7 +1038,7 @@ public String getEmbededUrlExcludeRE() {
     }
 
     public void setEmbeddedUrlExcludeRE(String regex) {
-        setProperty(new StringProperty(EMBEDDED_URL_EXCLUDE_RE, regex));
+        setProperty(EMBEDDED_URL_EXCLUDE_RE, regex, "");
     }
 
     /**

File: src/core/src/main/java/org/apache/jmeter/gui/action/ActionRouter.java
Patch:
@@ -280,15 +280,15 @@ public void removePostActionListener(Class<?> action, ActionListener listener) {
      * @param action {@link Class}
      * @param e {@link ActionEvent}
      */
-    protected void preActionPerformed(Class<? extends Command> action, ActionEvent e) {
+    void preActionPerformed(Class<? extends Command> action, ActionEvent e) {
         actionPerformed(action, e, preActionListeners);
     }
 
     /**
      * @param action {@link Class}
      * @param e {@link ActionEvent}
      */
-    protected void postActionPerformed(Class<? extends Command> action, ActionEvent e) {
+    void postActionPerformed(Class<? extends Command> action, ActionEvent e) {
         actionPerformed(action, e, postActionListeners);
     }
 

File: src/core/src/main/java/org/apache/jmeter/gui/util/JSyntaxSearchToolBar.java
Patch:
@@ -104,7 +104,7 @@ public void actionPerformed(ActionEvent evt) {
         }
     }
 
-    protected void toggleSearchField(JTextField textToFindField, boolean matchFound) {
+    void toggleSearchField(JTextField textToFindField, boolean matchFound) {
         if(!matchFound) {
             textToFindField.setBackground(LIGHT_RED);
             textToFindField.setForeground(Color.WHITE);

File: src/core/src/main/java/org/apache/jmeter/report/dashboard/ReportGenerator.java
Patch:
@@ -173,6 +173,7 @@ private static Properties loadProps(File file) {
      * @param propertyKey the property key
      * @return the name of the property setter
      */
+    @SuppressWarnings("JdkObsolete")
     private static String getSetterName(String propertyKey) {
         Matcher matcher = POTENTIAL_CAMEL_CASE_PATTERN.matcher(propertyKey);
         StringBuffer buffer = new StringBuffer(); // NOSONAR Unfortunately Matcher does not support StringBuilder

File: src/core/src/main/java/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -321,8 +321,8 @@ public void run() {
             throw e; // Must not ignore this one
         } finally {
             currentSamplerForInterruption = null; // prevent any further interrupts
+            interruptLock.lock();  // make sure current interrupt is finished, prevent another starting yet
             try {
-                interruptLock.lock();  // make sure current interrupt is finished, prevent another starting yet
                 threadContext.clear();
                 log.info("Thread finished: {}", threadName);
                 threadFinished(iterationListener);
@@ -819,8 +819,8 @@ public void stop() { // Called by StandardJMeterEngine, TestAction and AccessLog
     /** {@inheritDoc} */
     @Override
     public boolean interrupt(){
+        interruptLock.lock();
         try {
-            interruptLock.lock();
             Sampler samp = currentSamplerForInterruption; // fetch once; must be done under lock
             if (samp instanceof Interruptible){ // (also protects against null)
                 if (log.isWarnEnabled()) {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -431,6 +431,7 @@ public void connect(ManagedHttpClientConnection conn, HttpHost host, InetSocketA
 
     private static final Pattern PORT_PATTERN = Pattern.compile("\\d+"); // only used in .matches(), no need for anchors
 
+    @SuppressWarnings("UnnecessaryAnonymousClass")
     private static final ConnectionKeepAliveStrategy IDLE_STRATEGY = new DefaultConnectionKeepAliveStrategy(){
         @Override
         public long getKeepAliveDuration(HttpResponse response, HttpContext context) {
@@ -477,6 +478,7 @@ protected HttpResponse doSendRequest(
      * that HC core {@link ResponseContentEncoding} removes after uncompressing
      * See Bug 59401
      */
+    @SuppressWarnings("UnnecessaryAnonymousClass")
     private static final HttpResponseInterceptor RESPONSE_CONTENT_ENCODING = new ResponseContentEncoding(createLookupRegistry()) {
         @Override
         public void process(HttpResponse response, HttpContext context)

File: src/components/src/main/java/org/apache/jmeter/extractor/BoundaryExtractor.java
Patch:
@@ -296,7 +296,7 @@ private List<String> extract(String leftBoundary, String rightBoundary, int matc
             }
         }
 
-        return matches;
+        return Collections.unmodifiableList(matches);
     }
 
     public List<String> extractAll(

File: src/components/src/main/java/org/apache/jmeter/extractor/HtmlExtractor.java
Patch:
@@ -188,7 +188,7 @@ private List<String> extractMatchingStrings(
                 }
             }
         }
-        return result;
+        return Collections.unmodifiableList(result);
     }
 
     /**

File: src/components/src/main/java/org/apache/jmeter/extractor/RegexExtractor.java
Patch:
@@ -209,7 +209,7 @@ private List<MatchResult> processMatches(Pattern pattern, String regex, SampleRe
                 }
             }
         }
-        return matches;
+        return Collections.unmodifiableList(matches);
     }
 
     private int matchStrings(int matchNumber, Perl5Matcher matcher,

File: src/components/src/main/java/org/apache/jmeter/extractor/json/jsonpath/JSONManager.java
Patch:
@@ -84,7 +84,7 @@ public List<Object> extractWithJsonPath(String jsonString, String jsonPath)
         for (Object obj: extractedObjects) {
             results.add(stringifyJSONObject(obj));
         }
-        return results;
+        return Collections.unmodifiableList(results);
     }
 
     @SuppressWarnings("unchecked")

File: src/core/src/main/java/org/apache/jmeter/report/config/ConfigurationUtils.java
Patch:
@@ -28,8 +28,6 @@
  */
 public class ConfigurationUtils {
 
-    private static final String NOT_SUPPORTED_CONVERSION_FMT = "Convert \"%s\" to \"%s\" is not supported";
-
     /**
      * Instantiates a new configuration utils.
      */
@@ -55,7 +53,7 @@ public static <TProperty> TProperty convert(String value,
             return Converters.convert(clazz, value);
         } catch (ConvertException ex) {
             throw new ConfigurationException(String.format(
-                NOT_SUPPORTED_CONVERSION_FMT, value, clazz.getName()));
+                    "Convert \"%s\" to \"%s\" is not supported", value, clazz.getName()));
         }
     }
 }

File: src/core/src/main/java/org/apache/jmeter/report/dashboard/AbstractDataExporter.java
Patch:
@@ -28,7 +28,6 @@
  * The Class AbstractDataExporter provides a base class for DataExporter.
  */
 public abstract class AbstractDataExporter implements DataExporter {
-    private static final String INVALID_PROPERTY_CONFIG_FMT = "Wrong property \"%s\" in \"%s\" export configuration";
 
     private String name;
 
@@ -124,7 +123,7 @@ protected <T> T getPropertyFromConfig(
         try {
             return cfg.getProperty(property, defaultValue, clazz);
         } catch (ConfigurationException ex) {
-            throw new ExportException(String.format(INVALID_PROPERTY_CONFIG_FMT,
+            throw new ExportException(String.format("Wrong property \"%s\" in \"%s\" export configuration",
                     property, getName()), ex);
         }
     }

File: src/core/src/main/java/org/apache/jmeter/report/dashboard/HtmlTemplateExporter.java
Patch:
@@ -80,7 +80,6 @@ public class HtmlTemplateExporter extends AbstractDataExporter {
     public static final String DATA_CTX_FILTERS_ONLY_SAMPLE_SERIES = "filtersOnlySampleSeries";
 
     public static final String TIMESTAMP_FORMAT_MS = "ms";
-    private static final String INVALID_TEMPLATE_DIRECTORY_FMT = "\"%s\" is not a valid template directory";
 
     // Template directory
     private static final String TEMPLATE_DIR = "template_dir";
@@ -311,7 +310,7 @@ public void export(SampleContext context, File file,
                 File.class);
         if (!templateDirectory.isDirectory()) {
             String message = String.format(
-                    INVALID_TEMPLATE_DIRECTORY_FMT,
+                    "\"%s\" is not a valid template directory",
                     templateDirectory.getAbsolutePath());
             log.error(message);
             throw new ExportException(message);

File: src/core/src/main/java/org/apache/jmeter/report/processor/graph/impl/ResponseTimePerSampleGraphConsumer.java
Patch:
@@ -41,8 +41,6 @@
  */
 public class ResponseTimePerSampleGraphConsumer extends AbstractGraphConsumer {
 
-    private static final String RESPONSE_TIME_PER_SAMPLE_SERIES_FORMAT = "%dth percentile";
-
     /**
      * Instantiates a new response time per sample graph consumer.
      */
@@ -80,7 +78,7 @@ private GroupInfo createGroupInfo(String propertyKey, int defaultValue) {
         factory.setPercentileIndex(property);
         StaticSeriesSelector seriesSelector = new StaticSeriesSelector();
         seriesSelector.setSeriesName(String.format(
-                RESPONSE_TIME_PER_SAMPLE_SERIES_FORMAT, property));
+                "%dth percentile", property));
 
         return new GroupInfo(factory, seriesSelector,
                 // We include Transaction Controller results

File: src/core/src/main/java/org/apache/jmeter/report/processor/graph/impl/ResponseTimePercentilesOverTimeGraphConsumer.java
Patch:
@@ -50,8 +50,6 @@ public class ResponseTimePercentilesOverTimeGraphConsumer
     private static final String PCT3_LABEL = JMeterUtils.getPropDefault(
             "aggregate_rpt_pct3", "99");
 
-    private static final String PERCENTILE_FORMAT = "%sth percentile";
-
     @Override
     protected TimeStampKeysSelector createTimeStampKeysSelector() {
         TimeStampKeysSelector keysSelector = new TimeStampKeysSelector();
@@ -77,7 +75,7 @@ protected Map<String, GroupInfo> createGroupInfos() {
     }
 
     private String formatPercentile(String percentileLabel) {
-        return String.format(PERCENTILE_FORMAT, percentileLabel);
+        return String.format("%sth percentile", percentileLabel);
     }
 
     private GroupInfo createMinGroupInfo() {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/DirectAccessByteArrayOutputStream.java
Patch:
@@ -32,8 +32,8 @@ public DirectAccessByteArrayOutputStream(int initialSize) {
         super(initialSize);
     }
 
-    @SuppressWarnings("sync-override")
     @Override
+    @SuppressWarnings({"sync-override", "UnsynchronizedOverridesSynchronized"})
     public byte[] toByteArray() {
         // no need to copy the buffer if it has the right size
         // avoid an unneeded memory allocation

File: src/functions/src/main/java/org/apache/jmeter/functions/RandomDate.java
Patch:
@@ -202,9 +202,11 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
         return dateString;
     }
 
+    @SuppressWarnings("JavaTimeDefaultTimeZone")
     private DateTimeFormatter createFormatter(LocaleFormatObject format) {
         log.debug("Create a new instance of DateTimeFormatter for format '{}' in the cache", format);
         return new DateTimeFormatterBuilder().appendPattern(format.getFormat())
+                // TODO: what if year changes? (e.g. the year changes as the test executes)
                 .parseDefaulting(ChronoField.DAY_OF_MONTH, 1).parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)
                 .parseDefaulting(ChronoField.YEAR_OF_ERA, Year.now().getValue()).toFormatter(format.getLocale());
 

File: src/functions/src/main/java/org/apache/jmeter/functions/TimeShift.java
Patch:
@@ -197,6 +197,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
         return dateString;
     }
 
+    @SuppressWarnings("JavaTimeDefaultTimeZone")
     private DateTimeFormatter createFormatter(LocaleFormatObject format) {
         log.debug("Create a new instance of DateTimeFormatter for format '{}' in the cache", format);
         return new DateTimeFormatterBuilder().appendPattern(format.getFormat())
@@ -207,7 +208,9 @@ private DateTimeFormatter createFormatter(LocaleFormatObject format) {
                 .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)
                 .parseDefaulting(ChronoField.DAY_OF_MONTH, 1)
                 .parseDefaulting(ChronoField.MONTH_OF_YEAR, 1)
+                // TODO: what if year changes? (e.g. the year changes as the test executes)
                 .parseDefaulting(ChronoField.YEAR_OF_ERA, Year.now().getValue())
+                // TODO: offset seconds might vary over time, so it is likely we should not provide a default for OFFSET_SECONDS
                 .parseDefaulting(ChronoField.OFFSET_SECONDS, ZonedDateTime.now().getOffset().getTotalSeconds())
                 .toFormatter(format.getLocale());
 

File: src/core/src/main/java/org/apache/jmeter/testelement/property/NumberProperty.java
Patch:
@@ -54,6 +54,7 @@ public void setObjectValue(Object v) {
             try {
                 setNumberValue(v.toString());
             } catch (RuntimeException ignored) {
+                // Intentionally left blank
             }
         }
     }

File: src/jorphan/src/main/java/org/apache/jorphan/util/Converter.java
Patch:
@@ -70,6 +70,7 @@ public static Object convert(Object value, Class<?> toType) {
             try {
                 convertedValue = Class.forName(value.toString());
             } catch (Exception ignored) {
+                // Intentionally left blank
             }
         }
         return convertedValue;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
Patch:
@@ -228,11 +228,13 @@ private static int getHttpPort(String[] args, CLArgsParser parser) {
             try {
                 port = Integer.parseInt(value);
             } catch (NumberFormatException ignored) {
+                // Intentionally left blank
             }
         } else if (args.length > 0) {
             try {
                 port = Integer.parseInt(args[0]);
             } catch (NumberFormatException ignored) {
+                // Intentionally left blank
             }
         }
         return port;

File: src/components/src/main/java/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -192,6 +192,7 @@ public HashTree getReplacementSubTree() {
         return tree;
     }
 
+    @SuppressWarnings("JdkObsolete")
     private void createSubTree(HashTree tree, JMeterTreeNode node) {
         Enumeration<?> e = node.children();
         while (e.hasMoreElements()) {
@@ -208,6 +209,7 @@ private static JMeterTreeNode cloneTreeNode(JMeterTreeNode node) {
         return treeNode;
     }
 
+    @SuppressWarnings("JdkObsolete")
     private static void cloneChildren(JMeterTreeNode to, JMeterTreeNode from) {
         Enumeration<?> enumr = from.children();
         while (enumr.hasMoreElements()) {

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsXML.java
Patch:
@@ -148,6 +148,7 @@ private void expandAll(TreePath parent) {
             tree.expandPath(parent);
         }
 
+        @SuppressWarnings("JdkObsolete")
         private void applyToChildren(TreePath parent, Consumer<TreePath> method) {
             TreeNode node = (TreeNode) parent.getLastPathComponent();
             Enumeration<?> e = node.children();

File: src/core/src/main/java/org/apache/jmeter/JMeter.java
Patch:
@@ -1391,6 +1391,7 @@ private static void println(String str) {
     }
 
     @Override
+    @SuppressWarnings("JdkObsolete")
     public String[][] getIconMappings() {
         final String defaultIconProp = "org/apache/jmeter/images/icon.properties"; //$NON-NLS-1$
         final String iconSize = JMeterUtils.getPropDefault(TREE_ICON_SIZE, DEFAULT_TREE_ICON_SIZE);

File: src/core/src/main/java/org/apache/jmeter/gui/action/ApplyNamingConvention.java
Patch:
@@ -79,6 +79,7 @@ public void doAction(ActionEvent e) {
      * @param guiPackage {@link GuiPackage}
      * @param currentNode Parent node of elements on which we apply naming policy
      */
+    @SuppressWarnings("JdkObsolete")
     private void applyNamingPolicyToCurrentNode(GuiPackage guiPackage,
             JMeterTreeNode currentNode) {
         TreeNodeNamingPolicy namingPolicy = guiPackage.getNamingPolicy();

File: src/core/src/main/java/org/apache/jmeter/gui/action/CollapseExpandTreeBranch.java
Patch:
@@ -78,6 +78,7 @@ public void doAction(ActionEvent e) {
         }
     }
 
+    @SuppressWarnings("JdkObsolete")
     private void expandCollapseNode(JTree jTree, TreePath parent, boolean collapse) {
         TreeNode node = (TreeNode) parent.getLastPathComponent();
         if (node.isLeaf()) {

File: src/core/src/main/java/org/apache/jmeter/gui/action/Copy.java
Patch:
@@ -134,6 +134,7 @@ public static JMeterTreeNode[] cloneTreeNodes(JMeterTreeNode[] nodes) {
         return treeNodes;
     }
 
+    @SuppressWarnings("JdkObsolete")
     private static void cloneChildren(JMeterTreeNode to, JMeterTreeNode from) {
         Enumeration<?> enumFrom = from.children();
         while (enumFrom.hasMoreElements()) {

File: src/core/src/main/java/org/apache/jmeter/gui/tree/JMeterTreeModel.java
Patch:
@@ -184,6 +184,7 @@ public void removeNodeFromParent(JMeterTreeNode node) {
         }
     }
 
+    @SuppressWarnings("JdkObsolete")
     private void traverseAndFind(Class<?> type, JMeterTreeNode node, List<JMeterTreeNode> nodeList) {
         if (type.isInstance(node.getUserObject())) {
             nodeList.add(node);
@@ -195,6 +196,7 @@ private void traverseAndFind(Class<?> type, JMeterTreeNode node, List<JMeterTree
         }
     }
 
+    @SuppressWarnings("JdkObsolete")
     private JMeterTreeNode traverseAndFind(TestElement userObject, JMeterTreeNode node) {
         if (userObject == node.getUserObject()) {
             return node;
@@ -215,6 +217,7 @@ private JMeterTreeNode traverseAndFind(TestElement userObject, JMeterTreeNode no
      * @param node The {@link JMeterTreeNode} from which the sub tree is to be taken
      * @return newly copied sub tree
      */
+    @SuppressWarnings("JdkObsolete")
     public HashTree getCurrentSubTree(JMeterTreeNode node) {
         ListedHashTree hashTree = new ListedHashTree(node);
         Enumeration<?> enumNode = node.children();

File: src/core/src/main/java/org/apache/jmeter/gui/tree/JMeterTreeTransferHandler.java
Patch:
@@ -190,6 +190,7 @@ public boolean canImport(TransferHandler.TransferSupport support) {
     }
 
     @Override
+    @SuppressWarnings("JdkObsolete")
     public boolean importData(TransferHandler.TransferSupport support) {
         if (!canImport(support)) {
             return false;

File: src/core/src/main/java/org/apache/jmeter/gui/util/JLabeledRadioI18N.java
Patch:
@@ -125,6 +125,7 @@ private void initButtonGroup(String[] resources, String selected) {
      * @param selected initially selected resource (if not null)
      *
      */
+    @SuppressWarnings("JdkObsolete")
     public void resetButtons(String[] resources, String selected) {
         Enumeration<AbstractButton> buttons = bGroup.getElements();
         List<AbstractButton> buttonsToRemove = new ArrayList<>(this.bGroup.getButtonCount());
@@ -159,6 +160,7 @@ public String getText() {
      * @param resourceName name of resource whose button is to be selected
      */
     @Override
+    @SuppressWarnings("JdkObsolete")
     public void setText(String resourceName) {
         Enumeration<AbstractButton> en = this.bGroup.getElements();
         while (en.hasMoreElements()) {
@@ -203,6 +205,7 @@ private void notifyChangeListeners() {
      * excluded from the list.
      */
     @Override
+    @SuppressWarnings("JdkObsolete")
     public List<JComponent> getComponentList() {
         List<JComponent> comps = new ArrayList<>();
         comps.add(mLabel);

File: src/core/src/main/java/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -316,6 +316,7 @@ public GenericTestBeanCustomizer(){
      * @param pd the descriptor
      * @param pe the propertyEditor
      */
+    @SuppressWarnings("JdkObsolete")
     private static void validateAttributes(PropertyDescriptor pd, PropertyEditor pe) {
         final Object deflt = pd.getValue(DEFAULT);
         if (deflt == null) {

File: src/core/src/main/java/org/apache/jmeter/util/NameUpdater.java
Patch:
@@ -30,6 +30,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings("JdkObsolete")
 public final class NameUpdater {
     private static final Properties nameMap;
     // Read-only access after class has been initialised

File: src/core/src/main/java/org/apache/jmeter/util/keystore/JmeterKeyStore.java
Patch:
@@ -102,6 +102,7 @@ private JmeterKeyStore(String type, int startIndex, int endIndex, String clientC
      * @throws UnrecoverableKeyException if the key can not be recovered from the store (should not
      *                                   happen here, either)
      */
+    @SuppressWarnings("JdkObsolete")
     public void load(InputStream is, String pword)
             throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException {
         char[] pw = toCharArrayOrNull(pword);

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -350,6 +350,7 @@ private String browseQueueForConsumption(Queue queue,
         return retVal;
     }
 
+    @SuppressWarnings("JdkObsolete")
     private void extractContent(StringBuilder buffer, StringBuilder propBuffer, Message msg) {
         if (msg != null) {
             try {
@@ -388,6 +389,7 @@ private void extractContent(StringBuilder buffer, StringBuilder propBuffer, Mess
         }
     }
 
+    @SuppressWarnings("JdkObsolete")
     private String browseQueueDetails(Queue queue, SampleResult res) {
         String queueName = null;
         try {

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -274,6 +274,7 @@ private long calculateWait(long until, long now) {
         return wait > DEFAULT_WAIT ? DEFAULT_WAIT : wait;
     }
 
+    @SuppressWarnings("JdkObsolete")
     private void extractContent(StringBuilder buffer, StringBuilder propBuffer,
             Message msg, boolean isLast) {
         if (msg != null) {

File: src/protocol/junit/src/main/java/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java
Patch:
@@ -366,6 +366,7 @@ public void setJunit4(boolean junit4) {
 
     /** {@inheritDoc} */
     @Override
+    @SuppressWarnings("JdkObsolete")
     public SampleResult sample(Entry entry) {
         if(getCreateOneInstancePerSample()) {
             initializeTestObject();

File: src/protocol/mail/src/main/java/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
Patch:
@@ -139,6 +139,7 @@ public MailReaderSampler() {
      * {@inheritDoc}
      */
     @Override
+    @SuppressWarnings("JdkObsolete")
     public SampleResult sample(Entry e) {
         SampleResult parent = new SampleResult();
         boolean isOK = false; // Did sample succeed?
@@ -305,6 +306,7 @@ public SampleResult sample(Entry e) {
         return parent;
     }
 
+    @SuppressWarnings("JdkObsolete")
     protected void addCustomProperties(Properties props) {
         Properties jMeterProperties = JMeterUtils.getJMeterProperties();
         @SuppressWarnings("unchecked")

File: src/protocol/mail/src/main/java/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
Patch:
@@ -329,6 +329,7 @@ private String getSamplerData(Message message) throws MessagingException, IOExce
         return sb.toString();
     }
 
+    @SuppressWarnings("JdkObsolete")
     private void writeHeaders(Enumeration<Header> headers, StringBuilder sb) {
         while (headers.hasMoreElements()) {
             Header header = headers.nextElement();

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java
Patch:
@@ -67,6 +67,7 @@
  * which will return null if it is filtered and replace any part of the string
  * that should be replaced.
  */
+@SuppressWarnings("InconsistentCapitalization")
 public class LogFilter implements Filter, Serializable {
 
     private static final long serialVersionUID = 241L;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/NVPair.java
Patch:
@@ -23,6 +23,7 @@
  *
  */
 
+@SuppressWarnings("InconsistentCapitalization")
 public class NVPair {
 
     protected String NAME = "";

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/StandardGenerator.java
Patch:
@@ -49,6 +49,7 @@
  * added and should be left up to the user. One option is to provide parameters,
  * so the user can pass the desired listener to the tool.
  */
+@SuppressWarnings("InconsistentCapitalization")
 public class StandardGenerator implements Generator, Serializable {
 
     private static final long serialVersionUID = 234L;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -71,6 +71,7 @@
  * IIS and Netscape.
  */
 
+@SuppressWarnings("InconsistentCapitalization")
 public class TCLogParser implements LogParser {
     protected static final Logger log = LoggerFactory.getLogger(TCLogParser.class);
 

File: src/protocol/junit/src/main/java/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java
Patch:
@@ -121,12 +121,12 @@ private void initMethodObjects(Object testObject){
     /**
      * Sets the Classname attribute of the JavaConfig object
      *
-     * @param classname
+     * @param className
      *            the new Classname value
      */
-    public void setClassname(String classname)
+    public void setClassname(String className)
     {
-        setProperty(CLASSNAME, classname);
+        setProperty(CLASSNAME, className);
     }
 
     /**

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/influxdb/UdpMetricsSender.java
Patch:
@@ -22,6 +22,7 @@
 import java.net.DatagramSocket;
 import java.net.InetAddress;
 import java.net.SocketException;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -99,7 +100,7 @@ public void writeAndSendMetrics() {
             }
 
             try (DatagramSocket ds = new DatagramSocket()) {
-                byte[] buf = sb.toString().getBytes();
+                byte[] buf = sb.toString().getBytes(StandardCharsets.UTF_8);
                 DatagramPacket dp = new DatagramPacket(buf, buf.length, this.hostAddress, this.udpPort);
                 ds.send(dp);
             } catch (SocketException e) {

File: src/core/src/main/java/org/apache/jmeter/JMeter.java
Patch:
@@ -21,16 +21,17 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
-import java.io.FileReader;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.Reader;
 import java.net.Authenticator;
 import java.net.DatagramPacket;
 import java.net.DatagramSocket;
 import java.net.InetAddress;
 import java.net.MalformedURLException;
 import java.net.SocketException;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -711,7 +712,7 @@ void runInitScripts() {
             File file = new File(jsr223Init);
             if(file.exists() && file.canRead()) {
                 String extension = StringUtils.defaultIfBlank(FilenameUtils.getExtension(jsr223Init), "Groovy");
-                try (FileReader reader = new FileReader(file)) {
+                try (Reader reader = Files.newBufferedReader(file.toPath())) {
                     ScriptEngineManager scriptEngineManager = new ScriptEngineManager();
                     ScriptEngine engine = scriptEngineManager.getEngineByExtension(extension);
                     if (engine == null) {

File: src/protocol/bolt/src/main/java/org/apache/jmeter/protocol/bolt/sampler/BoltSampler.java
Patch:
@@ -114,7 +114,9 @@ private SampleResult handleException(SampleResult res, Exception ex) {
         } else {
             res.setResponseCode("500");
         }
-        res.setResponseData(ObjectUtils.defaultIfNull(ex.getMessage(), "NO MESSAGE").getBytes());
+        res.setResponseData(
+                ObjectUtils.defaultIfNull(ex.getMessage(), "NO MESSAGE"),
+                res.getDataEncodingNoDefault());
         res.setSuccessful(false);
         return res;
     }

File: src/protocol/ftp/src/main/java/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java
Patch:
@@ -207,6 +207,7 @@ public SampleResult sample(Entry e) {
                     if (isUpload()) {
                         String contents=getLocalFileContents();
                         if (contents.length() > 0){
+                            @SuppressWarnings("DefaultCharset")
                             byte[] bytes = contents.getBytes(); // TODO - charset?
                             input = new ByteArrayInputStream(bytes);
                             res.setSentBytes((long)bytes.length);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.jmeter.protocol.http.control;
 
 import java.io.BufferedReader;
+import java.io.BufferedWriter;
 import java.io.File;
-import java.io.FileWriter;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.Serializable;
@@ -357,8 +357,8 @@ public void save(String authFile) throws IOException {
         if (!file.isAbsolute()) {
             file = new File(System.getProperty("user.dir"),authFile);
         }
-        try (FileWriter fw = new FileWriter(file);
-                PrintWriter writer = new PrintWriter(fw)){
+        try (BufferedWriter fw = Files.newBufferedWriter(file.toPath());
+             PrintWriter writer = new PrintWriter(fw)){
             writer.println("# JMeter generated Authorization file");
             for (int i = 0; i < getAuthObjects().size(); i++) {
                 Authorization auth = (Authorization) getAuthObjects().get(i).getObjectValue();

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/HeaderManager.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.jmeter.protocol.http.control;
 
 import java.io.BufferedReader;
+import java.io.BufferedWriter;
 import java.io.File;
-import java.io.FileWriter;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.Serializable;
@@ -104,8 +104,8 @@ public void save(String headFile) throws IOException {
             file = new File(System.getProperty("user.dir")// $NON-NLS-1$
                     + File.separator + headFile);
         }
-        try ( FileWriter fw = new FileWriter(file);
-                PrintWriter writer = new PrintWriter(fw);) { // TODO Charset ?
+        try (BufferedWriter fw = Files.newBufferedWriter(file.toPath());
+             PrintWriter writer = new PrintWriter(fw);) { // TODO Charset ?
             writer.println("# JMeter generated Header file");// $NON-NLS-1$
             final CollectionProperty hdrs = getHeaders();
             for (int i = 0; i < hdrs.size(); i++) {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -718,7 +718,7 @@ private Authorization createAuthorization(final TestElement[] testElements, HTTP
                             }
                             authorization.setMechanism(mechanism);
                             if(BASIC_AUTH.equals(authType)) {
-                                String authCred= new String(Base64.decodeBase64(authCredentialsBase64));
+                                String authCred = new String(Base64.decodeBase64(authCredentialsBase64), StandardCharsets.UTF_8);
                                 String[] loginPassword = authCred.split(":"); //$NON-NLS-1$
                                 if(loginPassword.length == 2) {
                                     authorization.setUser(loginPassword[0]);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/AjpSampler.java
Patch:
@@ -288,6 +288,7 @@ private String setConnectionHeaders(URL url, String host, String method)
                     sb.append(arg.getStringValue());
                 }
                 stringBody = sb.toString();
+                @SuppressWarnings("DefaultCharset")
                 byte [] sbody = stringBody.getBytes(); // TODO - charset?
                 cl = sbody.length;
                 body = new ByteArrayInputStream(sbody);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -30,6 +30,7 @@
 import java.net.URL;
 import java.net.URLDecoder;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.security.GeneralSecurityException;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
@@ -1505,7 +1506,7 @@ public ViewableFileBody(File file, ContentType contentType) {
         @Override
         public void writeTo(final OutputStream out) throws IOException {
             if (hideFileData) {
-                out.write("<actual file content, not shown here>".getBytes());// encoding does not really matter here
+                out.write("<actual file content, not shown here>".getBytes(StandardCharsets.UTF_8));
             } else {
                 super.writeTo(out);
             }

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/Base64Encoder.java
Patch:
@@ -37,6 +37,7 @@ public final class Base64Encoder {
     private Base64Encoder() {
     }
 
+    @SuppressWarnings("DefaultCharset")
     public static String encode(String s) {
         return encode(s.getBytes()); // TODO - charset?
     }

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -195,8 +195,9 @@ public int parse(TestElement el, int parseCount) {
         return -1;// indicate that an error occurred
     }
 
+    @SuppressWarnings("DefaultCharset")
     private static BufferedReader getReader(File file) throws IOException {
-        if (! isGZIP(file)) {
+        if (!isGZIP(file)) {
             return new BufferedReader(new FileReader(file));
         }
         GZIPInputStream in = new GZIPInputStream(new FileInputStream(file));

File: src/protocol/jdbc/src/main/java/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java
Patch:
@@ -464,7 +464,7 @@ private void setArgument(PreparedStatement pstmt, String argument, int targetSql
         case Types.BINARY:
         case Types.VARBINARY:
         case Types.LONGVARBINARY:
-            pstmt.setBytes(index, argument.getBytes());
+            pstmt.setBytes(index, argument.getBytes(StandardCharsets.UTF_8));
             break;
         case Types.NULL:
             pstmt.setNull(index, targetSqlType);

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -223,7 +223,7 @@ private void handleBrowse(SampleResult res) throws JMSException {
         sb.append("Browse message on Send Queue ").append(sendQueue.getQueueName())
             .append(": ")
             .append(browseQueueDetails(sendQueue, res));
-        res.setResponseData(sb.toString().getBytes());
+        res.setResponseData(sb.toString(), res.getDataEncodingWithDefault());
         res.setResponseCodeOK();
     }
 
@@ -234,7 +234,7 @@ private void handleClearQueue(SampleResult res) throws JMSException {
         sb.append("Clear messages on Send Queue ").append(sendQueue.getQueueName())
                 .append(": ")
                 .append(clearQueue(sendQueue, res));
-        res.setResponseData(sb.toString().getBytes());
+        res.setResponseData(sb.toString(), res.getDataEncodingWithDefault());
         res.setResponseCodeOK();
     }
 

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -195,7 +195,7 @@ public SampleResult sample() {
         }
         result.sampleEnd();
         if (getReadResponseAsBoolean()) {
-            result.setResponseData(buffer.toString().getBytes()); // TODO - charset?
+            result.setResponseData(buffer.toString(), result.getDataEncodingWithDefault());
         } else {
             result.setBytes((long)buffer.toString().length());
         }

File: src/protocol/mongodb/src/main/java/org/apache/jmeter/protocol/mongodb/sampler/MongoScriptSampler.java
Patch:
@@ -76,12 +76,12 @@ public SampleResult sample(Entry e) {
             Object result = runner.evaluate(db, data);
             EvalResultHandler handler = new EvalResultHandler();
             String resultAsString = handler.handle(result);
-            res.setResponseData(resultAsString.getBytes());
+            res.setResponseData(resultAsString, res.getDataEncodingWithDefault());
         } catch (Exception ex) {
             res.setResponseCode("500"); // $NON-NLS-1$
             res.setSuccessful(false);
             res.setResponseMessage(ex.toString());
-            res.setResponseData(ex.getMessage().getBytes());
+            res.setResponseData(ex.getMessage(), res.getDataEncodingWithDefault());
         } finally {
             res.sampleEnd();
         }

File: src/protocol/native/src/main/java/org/apache/jmeter/protocol/system/SystemSampler.java
Patch:
@@ -184,7 +184,9 @@ public SampleResult sample(Entry entry) {
         }
 
         if (nativeCommand != null) {
-            results.setResponseData(nativeCommand.getOutResult().getBytes()); // default charset is deliberate here
+            @SuppressWarnings("DefaultCharset")
+            final byte[] responseData = nativeCommand.getOutResult().getBytes();
+            results.setResponseData(responseData); // default charset is deliberate here
         }
 
         return results;

File: src/components/src/test/java/org/apache/jmeter/visualizers/backend/SamplerMetricFixedModeTest.java
Patch:
@@ -32,8 +32,8 @@ public class SamplerMetricFixedModeTest {
     private static final double ALLOWED_DELTA = 25.0;
 
     @BeforeEach
+    @SuppressWarnings("deprecation")
     public void initMode() throws Exception {
-        //noinspection deprecation
         SamplerMetric.setDefaultWindowMode(WindowMode.FIXED);
     }
 

File: src/components/src/test/java/org/apache/jmeter/visualizers/backend/SamplerMetricTimedModeTest.java
Patch:
@@ -32,8 +32,8 @@ public class SamplerMetricTimedModeTest {
     private static final double ALLOWED_DELTA = 25.0;
 
     @BeforeEach
+    @SuppressWarnings("deprecation")
     public void initMode() throws Exception {
-        // noinspection deprecation
         SamplerMetric.setDefaultWindowMode(WindowMode.TIMED);
     }
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -25,7 +25,7 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.LinkedHashMap;
-import java.util.Map.Entry;
+import java.util.Map;
 import java.util.Set;
 
 import javax.swing.BorderFactory;
@@ -396,8 +396,8 @@ public void setupTabPane() {
 
                 // Parsed response headers
                 LinkedHashMap<String, String> lhm = JMeterUtils.parseHeaders(sampleResult.getResponseHeaders());
-                Set<Entry<String, String>> keySet = lhm.entrySet();
-                for (Entry<String, String> entry : keySet) {
+                Set<Map.Entry<String, String>> keySet = lhm.entrySet();
+                for (Map.Entry<String, String> entry : keySet) {
                     resHeadersModel.addRow(new RowResult(entry.getKey(), entry.getValue()));
                 }
 

File: src/core/src/main/java/org/apache/jmeter/engine/util/ReplaceFunctionsWithStrings.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.jmeter.engine.util;
 
 import java.util.Map;
-import java.util.Map.Entry;
 
 import org.apache.jmeter.functions.InvalidVariableException;
 import org.apache.jmeter.testelement.property.JMeterProperty;
@@ -73,7 +72,7 @@ public JMeterProperty transformValue(JMeterProperty prop) throws InvalidVariable
         if(input == null) {
             return prop;
         }
-        for(Entry<String, String> entry : getVariables().entrySet()){
+        for(Map.Entry<String, String> entry : getVariables().entrySet()){
             String key = entry.getKey();
             String value = entry.getValue();
             if (regexMatch) {

File: src/core/src/main/java/org/apache/jmeter/gui/action/SelectTemplatesDialog.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 
 import javax.swing.AbstractAction;
 import javax.swing.Action;
@@ -229,7 +228,7 @@ private boolean checkDirty(final ActionEvent actionEvent) {
 
     private Map<String, String> getUserParameters(){
         Map<String, String> userParameters = new LinkedHashMap<>();
-        for (Entry<String, JLabeledTextField> entry : parametersTextFields.entrySet()) {
+        for (Map.Entry<String, JLabeledTextField> entry : parametersTextFields.entrySet()) {
             userParameters.put(entry.getKey(), entry.getValue().getText());
         }
         return userParameters;
@@ -371,7 +370,7 @@ private JPanel configureParametersPanel(Map<String, String> parameters) {
         int parameterCount = 0;
 
         JPanel gridbagpanel = new JPanel(new GridBagLayout());
-        for (Entry<String, String> entry : parameters.entrySet()) {
+        for (Map.Entry<String, String> entry : parameters.entrySet()) {
             String key = entry.getKey();
             String value = entry.getValue();
             JLabeledTextField paramLabel = new JLabeledTextField(key + " : ");

File: src/core/src/main/java/org/apache/jmeter/report/processor/MapResultData.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.util.HashMap;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Set;
 
 /**
@@ -49,7 +48,7 @@ public <T> T accept(ResultDataVisitor<T> visitor) {
      *
      * @return the sets of entries of the map
      */
-    public Set<Entry<String, ResultData>> entrySet() {
+    public Set<Map.Entry<String, ResultData>> entrySet() {
         return map.entrySet();
     }
 

File: src/core/src/main/java/org/apache/jmeter/reporters/Summariser.java
Patch:
@@ -20,7 +20,6 @@
 import java.io.Serializable;
 import java.text.DecimalFormat;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -295,7 +294,7 @@ public void testStarted(String host) {
      */
     @Override
     public void testEnded(String host) {
-        Set<Entry<String, Totals>> totals = null;
+        Set<Map.Entry<String, Totals>> totals = null;
         synchronized (LOCK) {
             instanceCount--;
             if (instanceCount <= 0){

File: src/core/src/main/java/org/apache/jmeter/threads/JMeterVariables.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Set;
 
 import org.apache.jmeter.util.JMeterUtils;
@@ -161,15 +160,15 @@ public Object getObject(String key) {
      *
      * @return the iterator
      */
-    public Iterator<Entry<String, Object>> getIterator(){
+    public Iterator<Map.Entry<String, Object>> getIterator(){
         return Collections.unmodifiableMap(variables).entrySet().iterator() ;
     }
 
     // Used by DebugSampler
     /**
      * @return an unmodifiable view of the entries contained in {@link JMeterVariables}
      */
-    public Set<Entry<String, Object>> entrySet(){
+    public Set<Map.Entry<String, Object>> entrySet(){
         return Collections.unmodifiableMap(variables).entrySet();
     }
 

File: src/core/src/main/java/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.io.IOException;
 import java.io.ObjectInputStream;
-import java.util.Map.Entry;
+import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
 
@@ -349,7 +349,7 @@ public JMeterThread addNewThread(int delay, StandardJMeterEngine engine) {
      */
     @Override
     public boolean stopThread(String threadName, boolean now) {
-        for (Entry<JMeterThread, Thread> threadEntry : allThreads.entrySet()) {
+        for (Map.Entry<JMeterThread, Thread> threadEntry : allThreads.entrySet()) {
             JMeterThread jMeterThread = threadEntry.getKey();
             if (jMeterThread.getThreadName().equals(threadName)) {
                 stopThread(jMeterThread, threadEntry.getValue(), now);

File: src/core/src/main/java/org/apache/jmeter/threads/UnmodifiableJMeterVariables.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.util.Iterator;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Set;
 
 /**
@@ -120,12 +119,12 @@ public Object getObject(String key) {
     }
 
     @Override
-    public Iterator<Entry<String, Object>> getIterator() {
+    public Iterator<Map.Entry<String, Object>> getIterator() {
         return variables.getIterator();
     }
 
     @Override
-    public Set<Entry<String, Object>> entrySet() {
+    public Set<Map.Entry<String, Object>> entrySet() {
         return variables.entrySet();
     }
 

File: src/core/src/main/java/org/apache/jmeter/util/JSR223BeanInfoSupport.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.ListResourceBundle;
 import java.util.Locale;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.ResourceBundle;
 
 import javax.script.ScriptEngineFactory;
@@ -61,7 +60,7 @@ public abstract class JSR223BeanInfoSupport extends ScriptingBeanInfoSupport {
         Arrays.sort(LANGUAGE_TAGS);
         CONSTANT_LANGUAGE_NAMES = new String[nameMap.size()][2];
         int i = 0;
-        for(Entry<String, ScriptEngineFactory> me : nameMap.entrySet()) {
+        for(Map.Entry<String, ScriptEngineFactory> me : nameMap.entrySet()) {
             final String key = me.getKey();
             CONSTANT_LANGUAGE_NAMES[i][0] = key;
             final ScriptEngineFactory fact = me.getValue();

File: src/core/src/test/java/org/apache/jmeter/report/processor/graph/impl/CustomGraphConsumerTest.java
Patch:
@@ -22,7 +22,6 @@
 
 import java.util.HashMap;
 import java.util.Map;
-import java.util.Map.Entry;
 
 import org.apache.jmeter.report.core.Sample;
 import org.apache.jmeter.report.core.SampleMetadata;
@@ -83,7 +82,7 @@ public void testInitializeExtraResults() {
         customGraphConsumer.initializeExtraResults(resultData);
 
         JsonizerVisitor jsonizer = new JsonizerVisitor();
-        for (Entry<String, ResultData> entrySet : resultData.entrySet()) {
+        for (Map.Entry<String, ResultData> entrySet : resultData.entrySet()) {
             Object testedValue = entrySet.getValue().accept(jsonizer);
             String key = entrySet.getKey();
 

File: src/jorphan/src/main/java/org/apache/jorphan/math/StatCalculator.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.ConcurrentModificationException;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.TreeMap;
 
 import org.apache.commons.lang3.mutable.MutableLong;
@@ -109,7 +108,7 @@ public void addSentBytes(long newValue) {
     }
 
     public void addAll(StatCalculator<T> calc) {
-        for(Entry<T, MutableLong> ent : calc.valuesMap.entrySet()) {
+        for(Map.Entry<T, MutableLong> ent : calc.valuesMap.entrySet()) {
             addEachValue(ent.getKey(), ent.getValue().longValue());
         }
     }
@@ -184,7 +183,7 @@ public T getPercentPoint(double percent) {
     public Map<Number, Number[]> getDistribution() {
         Map<Number, Number[]> items = new HashMap<>();
 
-        for (Entry<T, MutableLong> entry : valuesMap.entrySet()) {
+        for (Map.Entry<T, MutableLong> entry : valuesMap.entrySet()) {
             Number[] dis = new Number[2];
             dis[0] = entry.getKey();
             dis[1] = entry.getValue();

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/client/Publisher.java
Patch:
@@ -20,7 +20,6 @@
 import java.io.Closeable;
 import java.io.Serializable;
 import java.util.Map;
-import java.util.Map.Entry;
 
 import javax.jms.BytesMessage;
 import javax.jms.Connection;
@@ -166,7 +165,7 @@ public MapMessage publish(Map<String, Object> map, String destinationName, Map<S
             int deliveryMode, int priority, long expiration)
             throws JMSException, NamingException {
         MapMessage msg = session.createMapMessage();
-        for (Entry<String, Object> me : map.entrySet()) {
+        for (Map.Entry<String, Object> me : map.entrySet()) {
             msg.setObject(me.getKey(), me.getValue());
         }
         return (MapMessage)setPropertiesAndSend(destinationName, properties, msg, deliveryMode, priority, expiration);

File: src/components/src/main/java/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -75,7 +75,7 @@ public Object clone() {
     }
 
     /**
-     * Sets the (@link JMeterTreeNode) which represents the controller which
+     * Sets the {@link JMeterTreeNode} which represents the controller which
      * this object is pointing to. Used for building the test case upon
      * execution.
      *
@@ -89,7 +89,7 @@ public void setSelectedNode(JMeterTreeNode tn) {
     }
 
     /**
-     * Gets the (@link JMeterTreeNode) for the Controller
+     * Gets the {@link JMeterTreeNode} for the Controller
      *
      * @return JMeterTreeNode
      */

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderAsXML.java
Patch:
@@ -98,7 +98,8 @@ private void showRenderXMLResponse(SampleResult res) {
         resultsScrollPane.setViewportView(domTreePanel);
     }
 
-    /* (non-Javadoc)
+    /**
+     * {@inheritDoc}
      * @see org.apache.jmeter.visualizers.SamplerResultTab#clearData()
      */
     @Override

File: src/core/src/main/java/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -517,7 +517,7 @@ public TestElement getCurrentElement() {
     /**
      * The dirty property is a flag that indicates whether there are parts of
      * JMeter's test tree that the user has not saved since last modification.
-     * Various (@link Command actions) set this property when components are
+     * Various {@link org.apache.jmeter.gui.action.Command} actions set this property when components are
      * modified/created/saved.
      *
      * @param dirty

File: src/core/src/main/java/org/apache/jmeter/gui/action/SearchTreeCommand.java
Patch:
@@ -50,7 +50,7 @@ public class SearchTreeCommand extends AbstractAction {
      * parent.
      * </p>
      *
-     * @param source The source object that originated the display of the dialog
+     * @param event The source event that originated the display of the dialog
      * @return A freshly created search dialog with the parent frame that could be
      *         found, or no parent otherwise.
      */

File: src/core/src/main/java/org/apache/jmeter/gui/util/HeaderAsPropertyRenderer.java
Patch:
@@ -43,12 +43,12 @@ public HeaderAsPropertyRenderer() {
 
     /**
      * @param columnsMsgParameters ignored
-     * @deprecated don't use {@code columnsMgsParameters} as they are
+     * @deprecated don't use {@code columnsMsgParameters} as they are
      * not moved around when rows of the corresponding table object model
      * are moved.
      */
     @Deprecated
-    public HeaderAsPropertyRenderer(Object[][] columnsMsgParameters) {
+    public HeaderAsPropertyRenderer(@Deprecated Object[][] columnsMsgParameters) {
         super();
     }
 

File: src/jorphan/src/main/java/org/apache/jorphan/exec/KeyToolUtils.java
Patch:
@@ -181,8 +181,8 @@ public static void genkeypair(final File keystore, String alias, final String pa
     }
 
     /**
-     * Formats arguments
-     * @param arguments
+     * Formats arguments.
+     * @param arguments command arguments
      * @return String command line
      */
     private static String formatCommand(List<String> arguments) {
@@ -440,6 +440,7 @@ private static void keytool(String command, File keystore, String password, Stri
     }
 
     /**
+     * Returns true if {@code KeyToolUtils#KEYTOOL_PATH} is configured
      * @return flag whether KeyToolUtils#KEYTOOL_PATH is
      *         configured (is not <code>null</code>)
      */

File: src/jorphan/src/main/java/org/apache/jorphan/exec/StreamCopier.java
Patch:
@@ -39,7 +39,7 @@ class StreamCopier extends Thread {
     /**
      * @param is {@link InputStream}
      * @param os {@link OutputStream}
-     * @throws IOException
+     * @throws IOException if something goes wrong
      */
     StreamCopier(InputStream is, OutputStream os) throws IOException {
         this.is = is;

File: src/jorphan/src/main/java/org/apache/jorphan/exec/SystemCommand.java
Patch:
@@ -121,6 +121,7 @@ public SystemCommand(File directory, long timeoutMillis, int pollInterval, Map<S
     }
 
     /**
+     * Runs the command with given arguments and returns its return code.
      * @param arguments List of strings, not null
      * @return return code
      * @throws InterruptedException when execution was interrupted
@@ -233,6 +234,7 @@ private int waitForEndWithTimeout(Process proc, long timeoutInMillis) throws Int
     }
 
     /**
+     * Returns Out/Err stream contents
      * @return Out/Err stream contents
      */
     public String getOutResult() {
@@ -244,6 +246,7 @@ public String getOutResult() {
     }
 
     /**
+     * Returns the executionEnvironment.
      * @return the executionEnvironment
      */
     public Map<String, String> getExecutionEnvironment() {

File: src/jorphan/src/main/java/org/apache/jorphan/gui/ObjectTableModel.java
Patch:
@@ -285,13 +285,15 @@ public boolean checkFunctors(Object _value, Class<?> caller){
     }
 
     /**
+     * Returns Object (List of Object).
      * @return Object (List of Object)
      */
     public Object getObjectList() { // used by TableEditor
         return objects;
     }
 
     /**
+     * Returns List of Object.
      * @return List of Object
      */
     public List<Object> getObjectListAsList() {

File: src/jorphan/src/main/java/org/apache/jorphan/gui/ObjectTableSorter.java
Patch:
@@ -97,13 +97,15 @@ public ObjectTableSorter(ObjectTableModel model) {
     }
 
     /**
+     * Returns Comparator used prior to sorted columns.
      * @return Comparator used prior to sorted columns.
      */
     public Comparator<Row> getPrimaryComparator() {
         return primaryComparator;
     }
 
     /**
+     * Returns Comparator used on column.
      * @param column to be compared
      * @return Comparator used on column.
      */
@@ -112,6 +114,7 @@ public Comparator<?> getValueComparator(int column) {
     }
 
     /**
+     * Returns Comparator if all sorted columns matches. Defaults to model index comparison.
      * @return Comparator if all sorted columns matches. Defaults to model index comparison.
      */
     public Comparator<Row> getFallbackComparator() {

File: src/jorphan/src/main/java/org/apache/jorphan/io/TextFile.java
Patch:
@@ -119,13 +119,15 @@ private Charset getCharset() {
     }
 
     /**
+     * Returns encoding being used to read and write this file.
      * @return Encoding being used to read and write this file.
      */
     public String getEncoding() {
         return encoding;
     }
 
     /**
+     * Configures encoding to be used to read and write this file.
      * @param string Encoding to be used to read and write this file.
      */
     public void setEncoding(String string) {

File: src/jorphan/src/main/java/org/apache/jorphan/reflect/ClassFilter.java
Patch:
@@ -24,6 +24,7 @@
 public interface ClassFilter {
 
     /**
+     * Returns true if class is included.
      * @param className String class name
      * @return true if class is included
      */

File: src/jorphan/src/main/java/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -560,6 +560,7 @@ public static void write(byte[] data, OutputStream output) throws IOException {
     }
 
     /**
+     * Returns duration formatted with format HH:mm:ss.
      * @param elapsedSec long elapsed time in seconds
      * @return String formatted with format HH:mm:ss
      */
@@ -753,6 +754,7 @@ public static String unsplit(Object[] splittee, Object splitChar) {
     }
 
     /**
+     * Random alphanumeric password of a given length.
      * @param length Max length of password
      * @return String random password
      */

File: src/jorphan/src/main/java/org/apache/jorphan/util/ThreadDumper.java
Patch:
@@ -42,6 +42,7 @@ private ThreadDumper() {
     }
 
     /**
+     * Returns name of file containing thread dump.
      * @return Name of file containing thread dump
      * @throws Exception if file cannot be written
      */
@@ -50,10 +51,12 @@ public static String threadDump() throws Exception {
     }
 
     /**
+     * Returns name of file containing thread dump.
      * @param basedir {@link File} Base directory
      * @return Name of file containing thread dump
      * @throws Exception  if file cannot we written
      */
+    @SuppressWarnings("JdkObsolete")
     public static String threadDump(File basedir) throws Exception {
         SimpleDateFormat timestampFormat = new SimpleDateFormat("yyyyMMdd_hhmmss_SSS");
         String stamp = timestampFormat.format(new Date());

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/gui/action/ParseCurlCommandAction.java
Patch:
@@ -360,11 +360,10 @@ private HeaderManager createHeaderManager(Request request) {
     }
 
     /**
-     * Configures a given Cookie Manager
+     * Configures a given Cookie Manager.
      *
      * @param cookieManager the manager to configure
      * @param request to copy information about cookies from
-     * @returns the configured cookie manager
      */
     private void createCookieManager(CookieManager cookieManager, Request request) {
         cookieManager.setProperty(TestElement.GUI_CLASS, CookiePanel.class.getName());

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/client/Publisher.java
Patch:
@@ -174,7 +174,7 @@ public MapMessage publish(Map<String, Object> map, String destinationName, Map<S
 
     /**
      * @param destinationName
-     * @param properties Map<String, String>
+     * @param properties {@code Map<String, String>}
      * @param msg Message
      * @param deliveryMode
      * @param priority

File: src/protocol/junit-sample/src/main/java/test/DummyAnnotatedTest.java
Patch:
@@ -60,6 +60,7 @@ public void printDone() {
 
     @Test
     // Succeeds only if Before method - verifyTwo() - is run.
+    @SuppressWarnings("UseCorrectAssertInTests")
     public void add() {
         int four = two + 2;
         if (4 != four) {
@@ -94,6 +95,7 @@ public void alwaysFail() {
 
     @Test
     // Generate a test error
+    @SuppressWarnings("ConstantOverflow")
     public void divideByZero() {
         @SuppressWarnings("unused")
         int i = 27 / 0; // will generate Divide by zero error

File: src/protocol/junit-sample/src/main/java/test/RerunTest.java
Patch:
@@ -24,6 +24,7 @@
 /**
  * Test to demonstrate whether a test instance can be re-run
  */
+@SuppressWarnings("JUnitAmbiguousTestClass")
 public class RerunTest extends TestCase {
 
     private int i = 123;

File: src/protocol/junit-sample/src/main/java/test/SetupTestError.java
Patch:
@@ -25,6 +25,7 @@
 /**
  * Test to demonstrate how setUp errors are handled
  */
+@SuppressWarnings("JUnitAmbiguousTestClass")
 public class SetupTestError extends TestCase {
 
     @Override

File: src/protocol/junit-sample/src/main/java/test/SetupTestFail.java
Patch:
@@ -25,6 +25,7 @@
 /**
  * Test to demonstrate how setUp failures are handled
  */
+@SuppressWarnings("JUnitAmbiguousTestClass")
 public class SetupTestFail extends TestCase {
 
     @Override

File: src/protocol/junit-sample/src/main/java/woolfel/DummyTestCase.java
Patch:
@@ -88,6 +88,7 @@ public void testFail() {
     }
 
     // Generate test error
+    @SuppressWarnings("ConstantOverflow")
     public void testException() {
         @SuppressWarnings("unused")
         int i = 27 / 0; // will generate Divide by zero error

File: src/core/src/main/java/org/apache/jmeter/JMeter.java
Patch:
@@ -98,6 +98,7 @@
 import org.apache.jmeter.util.BeanShellInterpreter;
 import org.apache.jmeter.util.BeanShellServer;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jmeter.util.SecurityProviderLoader;
 import org.apache.jmeter.util.ShutdownClient;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.collections.SearchByClass;
@@ -470,6 +471,8 @@ public void start(String[] args) {
         try {
             initializeProperties(parser); // Also initialises JMeter logging
 
+            SecurityProviderLoader.addSecurityProvider(JMeterUtils.getJMeterProperties());
+
             Thread.setDefaultUncaughtExceptionHandler(
                     (Thread t, Throwable e) -> {
                     if (!(e instanceof ThreadDeath)) {

File: src/core/src/main/java/org/apache/jmeter/JMeter.java
Patch:
@@ -98,6 +98,7 @@
 import org.apache.jmeter.util.BeanShellInterpreter;
 import org.apache.jmeter.util.BeanShellServer;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jmeter.util.SecurityProviderLoader;
 import org.apache.jmeter.util.ShutdownClient;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.collections.SearchByClass;
@@ -470,6 +471,8 @@ public void start(String[] args) {
         try {
             initializeProperties(parser); // Also initialises JMeter logging
 
+            SecurityProviderLoader.addSecurityProvider(JMeterUtils.getJMeterProperties());
+
             Thread.setDefaultUncaughtExceptionHandler(
                     (Thread t, Throwable e) -> {
                     if (!(e instanceof ThreadDeath)) {

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/util/TestGraphQLRequestParamUtils.java
Patch:
@@ -86,8 +86,10 @@ void testIsGraphQLContentType(String contentType) throws Exception {
     }
 
     // null can't be used in a ValueSource directly, so we need to use a MethodSource
-    static Stream<String> invalidContentTypes = Stream.of("application/vnd.api+json", "application/json-patch+json", "",
+    static Stream<String> invalidContentTypes() {
+        return Stream.of("application/vnd.api+json", "application/json-patch+json", "",
             null);
+    }
 
     @ParameterizedTest
     @MethodSource("invalidContentTypes")

File: src/core/src/main/java/org/apache/jmeter/JMeter.java
Patch:
@@ -98,6 +98,7 @@
 import org.apache.jmeter.util.BeanShellInterpreter;
 import org.apache.jmeter.util.BeanShellServer;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jmeter.util.SecurityProviderLoader;
 import org.apache.jmeter.util.ShutdownClient;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.collections.SearchByClass;
@@ -470,6 +471,8 @@ public void start(String[] args) {
         try {
             initializeProperties(parser); // Also initialises JMeter logging
 
+            SecurityProviderLoader.addSecurityProvider(JMeterUtils.getJMeterProperties());
+
             Thread.setDefaultUncaughtExceptionHandler(
                     (Thread t, Throwable e) -> {
                     if (!(e instanceof ThreadDeath)) {

File: src/core/src/main/java/org/apache/jmeter/save/SaveService.java
Patch:
@@ -155,7 +155,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "56ae8319b2b02d33eb1028c4460db770cf246b5c"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "66ea47f7da884dff1c42ccede75113971c5c11f3"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -163,6 +163,8 @@ public void run() {
 
         HttpRequestHdr request = new HttpRequestHdr(target.getPrefixHTTPSampleName(), httpSamplerName,
                 target.getHTTPSampleNamingMode(), target.getHttpSampleNameFormat());
+        request.setDetectGraphQLRequest(target.getDetectGraphQLRequest());
+
         SampleResult result = null;
         HeaderManager headers = null;
         HTTPSamplerBase sampler = null;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -332,6 +332,7 @@ public void modifyTestElement(TestElement el) {
             model.setRegexMatch(regexMatch.isSelected());
             model.setContentTypeInclude(contentTypeInclude.getText());
             model.setContentTypeExclude(contentTypeExclude.getText());
+            model.setHttpSampleNameFormat(httpSampleNameFormat.getText());
             TreeNodeWrapper nw = (TreeNodeWrapper) targetNodes.getSelectedItem();
             if (nw == null) {
                 model.setTarget(null);
@@ -396,6 +397,7 @@ public void configure(TestElement element) {
         regexMatch.setSelected(model.getRegexMatch());
         contentTypeInclude.setText(model.getContentTypeInclude());
         contentTypeExclude.setText(model.getContentTypeExclude());
+        httpSampleNameFormat.setText(model.getHttpSampleNameFormat());
 
         reinitializeTargetCombo();// Set up list of potential targets and
                                     // enable listener

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/control/TestCacheManagerBase.java
Patch:
@@ -284,7 +284,8 @@ public void testNoCacheControlNoMaxAgeNoExpire() throws Exception {
         sleepTill(start + age / 10 + 10);
         CacheEntry cachedEntry = getThreadCacheEntry(LOCAL_HOST);
         assertNotNull(cachedEntry, "Should find entry");
-        assertFalse(this.cacheManager.inCache(url), "Should not find valid entry. Found " + cachedEntry);
+        assertFalse(this.cacheManager.inCache(url),
+                "Should not find valid entry. Found " + cachedEntry + " at " + System.currentTimeMillis());
     }
 
     @Test

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/graphite/GraphiteBackendListenerClient.java
Patch:
@@ -288,7 +288,7 @@ public void handleSampleResults(List<SampleResult> sampleResults, BackendListene
                         samplerMetric.add(sampleResult);
                     }
                 }
-                getSamplerMetric(CUMULATED_METRICS).add(sampleResult);
+                getSamplerMetric(CUMULATED_METRICS).addCumulated(sampleResult);
             }
         }
     }

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/influxdb/HttpMetricsSender.java
Patch:
@@ -185,8 +185,9 @@ private void writeAndSendMetrics(List<MetricTuple> copyMetrics) {
                         .append("000000")
                         .append("\n"); //$NON-NLS-1$
             }
-
-            httpRequest.setEntity(new StringEntity(sb.toString(), StandardCharsets.UTF_8));
+            String data = sb.toString();
+            log.debug("Sending to influxdb:{}", data);
+            httpRequest.setEntity(new StringEntity(data, StandardCharsets.UTF_8));
             lastRequest = httpClient.execute(httpRequest, new FutureCallback<HttpResponse>() {
                 @Override
                 public void completed(final HttpResponse response) {

File: src/core/src/test/java/org/apache/jmeter/report/processor/ErrorsSummaryConsumerTest.java
Patch:
@@ -40,12 +40,12 @@ public void testGetErrorKey() {
 
         sample = new Sample(0, metadata, new String[] { "false", "200", "",
                 "Test failed: text expected to contain /<title>Some html text</title>/" });
-        assertEquals("Test failed: text expected to contain \\/&lt;title&gt;Some html text&lt;\\/title&gt;\\/",
+        assertEquals("Test failed: text expected to contain /&lt;title&gt;Some html text&lt;/title&gt;/",
                 ErrorsSummaryConsumer.getErrorKey(sample));
 
         sample = new Sample(0, metadata, new String[] { "false", "200", "",
                 "Test failed: text expected to contain /{\"glossary\": { \"title\": \"example glossary\"}}/" });
-        assertEquals("Test failed: text expected to contain \\/{&quot;glossary&quot;: { &quot;title&quot;: &quot;example glossary&quot;}}\\/",
+        assertEquals("Test failed: text expected to contain /{&quot;glossary&quot;: { &quot;title&quot;: &quot;example glossary&quot;}}/",
                 ErrorsSummaryConsumer.getErrorKey(sample));
 
         sample = new Sample(0, metadata, new String[] { "true", "200", "", "" });

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/gui/RecorderDialog.java
Patch:
@@ -203,7 +203,7 @@ public void setVisible(boolean b) {
     @Override
     public void itemStateChanged(ItemEvent e) {
         if (e.getSource() instanceof JComboBox) {
-            JComboBox combo = (JComboBox) e.getSource();
+            JComboBox<?> combo = (JComboBox<?>) e.getSource();
             if(ProxyControlGui.HTTP_SAMPLER_NAMING_MODE.equals(combo.getName())){
                 recorderGui.setHTTPSampleNamingMode(httpSampleNamingMode.getSelectedIndex());
                 sampleNameFormat.setEnabled(httpSampleNamingMode.getSelectedIndex() == 3);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -422,7 +422,7 @@ private void populateTable(PowerTableModel pModel, PropertyIterator iter) {
     @Override
     public void itemStateChanged(ItemEvent e) {
         if (e.getSource() instanceof JComboBox) {
-            JComboBox combo = (JComboBox) e.getSource();
+            JComboBox<?> combo = (JComboBox<?>) e.getSource();
             if (HTTP_SAMPLER_NAMING_MODE.equals(combo.getName())) {
                 model.setHTTPSampleNamingMode(httpSampleNamingMode.getSelectedIndex());
                 httpSampleNameFormat.setEnabled(httpSampleNamingMode.getSelectedIndex() == 3);

File: src/core/src/main/java/org/apache/jmeter/report/dashboard/JsonizerVisitor.java
Patch:
@@ -20,13 +20,14 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.commons.text.StringEscapeUtils;
 import org.apache.jmeter.report.core.JsonUtil;
 import org.apache.jmeter.report.processor.ListResultData;
 import org.apache.jmeter.report.processor.MapResultData;
 import org.apache.jmeter.report.processor.ResultData;
 import org.apache.jmeter.report.processor.ResultDataVisitor;
 import org.apache.jmeter.report.processor.ValueResultData;
+
+import com.fasterxml.jackson.core.io.JsonStringEncoder;
 /**
  * The class JsonizerVisitor provides a visitor that can get json-like string
  * from ResultData.
@@ -96,7 +97,7 @@ public String visitValueResult(ValueResultData valueResult) {
             Object value = valueResult.getValue();
             result = String.valueOf(value);
             if (value instanceof String) {
-                result = '"' + StringEscapeUtils.escapeEcmaScript(result.replace('\"', '\'')) + '"';
+                result = '"' + new String(JsonStringEncoder.getInstance().quoteAsString(result)) + '"';
             }
         }
         return result;

File: src/launcher/src/main/java/org/apache/jmeter/NewDriver.java
Patch:
@@ -79,8 +79,8 @@ public final class NewDriver {
                 tmpDir = null;
             }
         } else {// e.g. started from IDE with full classpath
-            tmpDir = System.getProperty("jmeter.home","");// Allow override $NON-NLS-1$ $NON-NLS-2$
-            if (tmpDir.length() == 0) {
+            tmpDir = System.getProperty("jmeter.home", System.getenv("JMETER_HOME"));// Allow override $NON-NLS-1$ $NON-NLS-2$
+            if (tmpDir == null || tmpDir.length() == 0) {
                 File userDir = new File(System.getProperty("user.dir"));// $NON-NLS-1$
                 tmpDir = userDir.getAbsoluteFile().getParent();
             }

File: src/launcher/src/main/java/org/apache/jmeter/NewDriver.java
Patch:
@@ -85,6 +85,9 @@ public final class NewDriver {
                 tmpDir = userDir.getAbsoluteFile().getParent();
             }
         }
+        if (tmpDir == null) {
+            tmpDir = System.getenv("JMETER_HOME");
+        }
         JMETER_INSTALLATION_DIRECTORY=tmpDir;
 
         /*

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1379,7 +1379,7 @@ protected HTTPSampleResult downloadPageResources(final HTTPSampleResult pRes, fi
             if (excludeRegex.length() > 0) {
                 try {
                     excludePattern = JMeterUtils.getPattern(excludeRegex);
-                    if (localMatcher != null) {
+                    if (localMatcher == null) {
                         localMatcher = JMeterUtils.getMatcher();// don't fetch unless pattern compiles
                     }
                 } catch (MalformedCachePatternException e) { // NOSONAR
@@ -1422,6 +1422,7 @@ protected HTTPSampleResult downloadPageResources(final HTTPSampleResult pRes, fi
                             setParentSampleSuccess(res, false);
                             continue;
                         }
+                        log.debug("allowPattern: {}, excludePattern: {}, localMatcher: {}, url: {}", allowPattern, excludePattern, localMatcher, url);
                         // I don't think localMatcher can be null here, but check just in case
                         if (allowPattern != null && localMatcher != null && !localMatcher.matches(url.toString(), allowPattern)) {
                             continue; // we have a pattern and the URL does not match, so skip it

File: src/core/src/main/java/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -595,7 +595,9 @@ private void executeSamplePackage(Sampler current,
             if (result.isStopTestNow() || (!result.isSuccessful() && onErrorStopTestNow)) {
                 stopTestNow();
             }
-            threadContext.setTestLogicalAction(result.getTestLogicalAction());
+            if (result.getTestLogicalAction() != TestLogicalAction.CONTINUE) {
+                threadContext.setTestLogicalAction(result.getTestLogicalAction());
+            }
         } else {
             compiler.done(pack); // Finish up
         }

File: src/core/src/main/java/org/apache/jmeter/report/processor/graph/StaticSeriesSelector.java
Patch:
@@ -56,7 +56,7 @@ public final void setSeriesName(String seriesName) {
      */
     @Override
     public Iterable<String> select(Sample sample) {
-        return withDefaultIfEmpty(sample.getName(), "EMPTY_SERIE_NAME"); //$NON-NLS-1$
+        return withDefaultIfEmpty(seriesName, "EMPTY_SERIE_NAME"); //$NON-NLS-1$
     }
 
 }

File: src/core/src/main/java/org/apache/jmeter/report/processor/graph/NameSeriesSelector.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.jmeter.report.processor.graph;
 
-import java.util.Arrays;
-
 import org.apache.jmeter.report.core.Sample;
 
 /**
@@ -44,7 +42,7 @@ public NameSeriesSelector() {
      */
     @Override
     public Iterable<String> select(Sample sample) {
-        return Arrays.asList(sample.getName());
+        return withDefaultIfEmpty(sample.getName(), "EMPTY_SERIE_NAME"); //$NON-NLS-1$
     }
 
 }

File: src/core/src/main/java/org/apache/jmeter/report/processor/graph/StaticSeriesSelector.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.apache.jmeter.report.processor.graph;
 
-import java.util.Arrays;
-
 import org.apache.jmeter.report.core.Sample;
 
 /**
@@ -58,7 +56,7 @@ public final void setSeriesName(String seriesName) {
      */
     @Override
     public Iterable<String> select(Sample sample) {
-        return Arrays.asList(seriesName);
+        return withDefaultIfEmpty(sample.getName(), "EMPTY_SERIE_NAME"); //$NON-NLS-1$
     }
 
 }

File: src/core/src/main/java/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -38,7 +38,7 @@
 
 import javax.swing.table.DefaultTableModel;
 
-import org.apache.commons.collections.map.LinkedMap;
+import org.apache.commons.collections4.map.LinkedMap;
 import org.apache.commons.lang3.CharUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.reporters.ResultCollector;
@@ -452,7 +452,7 @@ private static void appendFields(final boolean condition, StringBuilder textBuff
     }
 
     // Map header names to set() methods
-    private static final LinkedMap headerLabelMethods = new LinkedMap();
+    private static final LinkedMap<String, Functor> headerLabelMethods = new LinkedMap<>();
 
     // These entries must be in the same order as columns are saved/restored.
 
@@ -536,7 +536,7 @@ public static SampleSaveConfiguration getSampleSaveConfiguration(
             if (isVariableName(label)) {
                 varCount++;
             } else {
-                Functor set = (Functor) headerLabelMethods.get(label);
+                Functor set = headerLabelMethods.get(label);
                 set.invoke(saveConfig, new Boolean[]{Boolean.TRUE});
             }
         }

File: src/core/src/main/java/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -44,6 +44,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
+import org.apache.jmeter.gui.TestElementMetadata;
 import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.JMeterProperty;
@@ -58,6 +59,7 @@
  * for some other component.
  *
  */
+@TestElementMetadata(labelResource = "user_defined_variables")
 public class ArgumentsPanel extends AbstractConfigGui implements ActionListener {
 
     private static final long serialVersionUID = 240L;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/gui/HTTPArgumentsPanel.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.config.gui.ArgumentsPanel;
-import org.apache.jmeter.gui.TestElementMetadata;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.JMeterProperty;
@@ -42,7 +41,6 @@
  * These have names and values, as well as check-boxes to determine whether or not to
  * include the "=" sign in the output and whether or not to encode the output.
  */
-@TestElementMetadata(labelResource = "user_defined_variables")
 public class HTTPArgumentsPanel extends ArgumentsPanel {
 
     private static final long serialVersionUID = 240L;

File: src/protocol/jdbc/src/main/java/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -114,8 +114,8 @@ public void testStarted() {
         TestBeanHelper.prepare(this);
         JMeterVariables variables = getThreadContext().getVariables();
         String poolName = getDataSource();
-        if(JOrphanUtils.isBlank(poolName)) {
-            throw new IllegalArgumentException("Variable Name must not be empty for element:"+getName());
+        if (JOrphanUtils.isBlank(poolName)) {
+            throw new IllegalArgumentException("Name for DataSoure must not be empty in " + getName());
         } else if (variables.getObject(poolName) != null) {
             log.error("JDBC data source already defined for: {}", poolName);
         } else {

File: src/protocol/jdbc/src/main/java/org/apache/jmeter/protocol/jdbc/processor/AbstractJDBCProcessor.java
Patch:
@@ -40,8 +40,8 @@ public abstract class AbstractJDBCProcessor extends AbstractJDBCTestElement {
      * Calls the JDBC code to be executed.
      */
     protected void process() {
-        if(JOrphanUtils.isBlank(getDataSource())) {
-            throw new IllegalArgumentException("Variable Name must not be null in "+getName());
+        if (JOrphanUtils.isBlank(getDataSource())) {
+            throw new IllegalArgumentException("Name for DataSoure must not be empty in " + getName());
         }
         try (Connection conn = DataSourceElement.getConnection(getDataSource())){
             execute(conn);

File: src/protocol/jdbc/src/main/java/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Patch:
@@ -72,8 +72,8 @@ public SampleResult sample(Entry e) {
         Connection conn = null;
 
         try {
-            if(JOrphanUtils.isBlank(getDataSource())) {
-                throw new IllegalArgumentException("Variable Name must not be null in "+getName());
+            if (JOrphanUtils.isBlank(getDataSource())) {
+                throw new IllegalArgumentException("Name for DataSoure must not be empty in " + getName());
             }
 
             try {

File: src/core/src/main/java/org/apache/jmeter/functions/gui/FunctionHelper.java
Patch:
@@ -175,8 +175,9 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
     private void initializeFunctionList() {
         String[] functionNames = CompoundVariable.getFunctionNames();
         Arrays.sort(functionNames, String::compareToIgnoreCase);
-        functionList = new JLabeledChoice(JMeterUtils.getResString("choose_function"), 
-                Arrays.stream(functionNames).map(e -> e.substring(FUNCTION_PREFIX.length())).collect(Collectors.toList()).toArray(new String[0])); //$NON-NLS-1$
+        functionList = new JLabeledChoice(JMeterUtils.getResString("choose_function"), //$NON-NLS-1$
+                Arrays.stream(functionNames).map(
+                        e -> e.substring(FUNCTION_PREFIX.length())).collect(Collectors.toList()).toArray(new String[0]));
         functionList.addChangeListener(this);
     }
 

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/control/gui/JMSSamplerGui.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.jmeter.protocol.jms.control.gui;
 
-import java.awt.*;
+import java.awt.BorderLayout;
 
 import javax.swing.BorderFactory;
 import javax.swing.Box;

File: src/core/src/main/java/org/apache/jmeter/report/dashboard/ReportGenerator.java
Patch:
@@ -355,6 +355,9 @@ private void addGraphConsumer(FilterConsumer nameFilter,
                     .excludesControllers() ? excludeControllerFilter
                     : nameFilter;
             entryPoint.addSampleConsumer(graph);
+        } catch (ClassNotFoundException ex) {
+            log.warn("Unable to add class:{} as consumer for HTML report generation, "
+                    + "check class name or that the plugin that contains it is on classpath", className, ex);
         } catch (ClassCastException | IllegalArgumentException |  ReflectiveOperationException | SecurityException ex) {
             String error = String.format(INVALID_CLASS_FMT, className);
             throw new GenerationException(error, ex);

File: src/core/src/main/java/org/apache/jmeter/control/gui/WorkBenchGui.java
Patch:
@@ -39,7 +39,7 @@
  * @deprecated since 4.0 Non Test Elements are now children of Test Plan
  */
 @Deprecated
-@TestElementMetadata(labelResource = "workbench_title", actionGroups = MenuFactory.NON_TEST_ELEMENTS)
+@TestElementMetadata(labelResource = "workbench_title", actionGroups = "")
 public class WorkBenchGui extends AbstractJMeterGuiComponent {
     private static final long serialVersionUID = 240L;
     // This check-box defines whether to save  WorkBench content or not

File: src/core/src/main/java/org/apache/jmeter/control/gui/WorkBenchGui.java
Patch:
@@ -39,6 +39,7 @@
  * @deprecated since 4.0 Non Test Elements are now children of Test Plan
  */
 @Deprecated
+@TestElementMetadata(labelResource = "workbench_title", actionGroups = MenuFactory.NON_TEST_ELEMENTS)
 public class WorkBenchGui extends AbstractJMeterGuiComponent {
     private static final long serialVersionUID = 240L;
     // This check-box defines whether to save  WorkBench content or not

File: src/core/src/main/java/org/apache/jmeter/control/gui/WorkBenchGui.java
Patch:
@@ -39,7 +39,6 @@
  * @deprecated since 4.0 Non Test Elements are now children of Test Plan
  */
 @Deprecated
-@TestElementMetadata(labelResource = "workbench_title", actionGroups = MenuFactory.NON_TEST_ELEMENTS)
 public class WorkBenchGui extends AbstractJMeterGuiComponent {
     private static final long serialVersionUID = 240L;
     // This check-box defines whether to save  WorkBench content or not

File: src/components/src/main/java/org/apache/jmeter/control/gui/ThroughputControllerGui.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.jmeter.control.gui;
 
 import java.awt.BorderLayout;
-import java.awt.Dimension;
 import java.awt.event.ItemEvent;
 
 import javax.swing.DefaultComboBoxModel;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -343,9 +343,9 @@ public void connect(ManagedHttpClientConnection conn, HttpHost host, InetSocketA
     /** Idle timeout to be applied to connections if no Keep-Alive header is sent by the server (default 0 = disable) */
     private static final int IDLE_TIMEOUT = JMeterUtils.getPropDefault("httpclient4.idletimeout", 0);
 
-    private static final int VALIDITY_AFTER_INACTIVITY_TIMEOUT = JMeterUtils.getPropDefault("httpclient4.validate_after_inactivity", 1700);
+    private static final int VALIDITY_AFTER_INACTIVITY_TIMEOUT = JMeterUtils.getPropDefault("httpclient4.validate_after_inactivity", 4900);
 
-    private static final int TIME_TO_LIVE = JMeterUtils.getPropDefault("httpclient4.time_to_live", 2000);
+    private static final int TIME_TO_LIVE = JMeterUtils.getPropDefault("httpclient4.time_to_live", 60000);
 
     /** Preemptive Basic Auth */
     private static final boolean BASIC_AUTH_PREEMPTIVE = JMeterUtils.getPropDefault("httpclient4.auth.preemptive", true);

File: src/protocol/junit/src/main/java/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java
Patch:
@@ -50,9 +50,10 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import junit.framework.TestCase;
 import net.miginfocom.swing.MigLayout;
 
+import junit.framework.TestCase;
+
 /**
  * The <code>JUnitTestSamplerGui</code> class provides the user interface
  * for the {@link JUnitSampler}.

File: src/components/src/main/java/org/apache/jmeter/extractor/gui/XPath2ExtractorGui.java
Patch:
@@ -125,7 +125,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
     private JPanel makeParameterPanel() {
         JPanel mainPanel = new JPanel(new BorderLayout());
         mainPanel.add(createScopePanel(true, true, true), BorderLayout.NORTH);
-        
+
         JPanel panel = new JPanel(new MigLayout("fillx, wrap 2", "[][fill,grow]"));
         panel.setBorder(BorderFactory.createTitledBorder(
                 JMeterUtils.getResString("xpath2_extractor_properties")));

File: src/components/src/main/java/org/apache/jmeter/control/gui/ThroughputControllerGui.java
Patch:
@@ -20,7 +20,6 @@
 import java.awt.BorderLayout;
 import java.awt.event.ItemEvent;
 
-import javax.swing.BorderFactory;
 import javax.swing.DefaultComboBoxModel;
 import javax.swing.JCheckBox;
 import javax.swing.JComboBox;

File: src/components/src/main/java/org/apache/jmeter/modifiers/gui/CounterConfigGui.java
Patch:
@@ -21,7 +21,6 @@
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 
-import javax.swing.BorderFactory;
 import javax.swing.JCheckBox;
 import javax.swing.JPanel;
 import javax.swing.JTextField;

File: src/core/src/main/java/org/apache/jmeter/control/gui/IfControllerPanel.java
Patch:
@@ -21,7 +21,6 @@
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 
-import javax.swing.BorderFactory;
 import javax.swing.ImageIcon;
 import javax.swing.JButton;
 import javax.swing.JCheckBox;

File: src/core/src/main/java/org/apache/jmeter/control/gui/IfControllerPanel.java
Patch:
@@ -244,7 +244,7 @@ public void stateChanged(ChangeEvent e) {
     }
 
     /**
-     * Fill theCondition 
+     * Fill theCondition
      * @param e {@link ActionEvent}
      */
     @Override

File: src/components/src/main/java/org/apache/jmeter/control/gui/ForeachControlPanel.java
Patch:
@@ -211,7 +211,7 @@ private JPanel createLoopCountPanel() {
         loopPanel.add(JMeterUtils.labelFor(endIndex, "foreach_end_index"));
         endIndex.setName(END_INDEX_NAME);
         loopPanel.add(endIndex);
-        
+
         // TEXT FIELD
         returnVal = new JTextField("", 5); // $NON-NLS-1$
         loopPanel.add(JMeterUtils.labelFor(returnVal, "foreach_output"));

File: src/core/src/main/java/org/apache/jmeter/gui/util/IconToolbarBean.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.apache.jmeter.gui.util;
 
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
 import org.apache.jmeter.gui.action.ActionNames;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
 public final class IconToolbarBean {
 
     private static final Logger log = LoggerFactory.getLogger(IconToolbarBean.class);

File: src/core/src/main/java/org/apache/jmeter/gui/util/JMeterToolBar.java
Patch:
@@ -32,8 +32,6 @@
 import javax.swing.JOptionPane;
 import javax.swing.JToolBar;
 
-import com.github.weisj.darklaf.icons.ThemedSVGIcon;
-
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.gui.UndoHistory;
 import org.apache.jmeter.gui.action.ActionNames;
@@ -44,6 +42,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.github.weisj.darklaf.icons.ThemedSVGIcon;
 import com.github.weisj.darklaf.ui.button.DarkButtonUI;
 
 /**

File: src/core/src/main/java/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -633,10 +633,9 @@ public void displayPopUp(Component invoker, MouseEvent e, JPopupMenu popup) {
         if (popup != null) {
             log.debug("Showing pop up for {} at x,y = {},{}", invoker, e.getX(), e.getY());
 
-            popup.pack();
+            // Enforce heavyweight popup to show shadows on macOS
+            popup.setLightWeightPopupEnabled(false);
             popup.show(invoker, e.getX(), e.getY());
-            popup.setVisible(true);
-            popup.requestFocusInWindow();
         }
     }
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/template/TemplateManager.java
Patch:
@@ -172,7 +172,7 @@ public Map<String, Template> parseTemplateFile(File file) throws IOException, SA
         bd.setEntityResolver(new DefaultEntityResolver());
         LoggingErrorHandler errorHandler = new LoggingErrorHandler(log, file);
         bd.setErrorHandler(errorHandler);
-        Document document = bd.parse(file.toURI().toString());
+        Document document = bd.parse(file);
         document.getDocumentElement().normalize();
         Map<String, Template> templates = new TreeMap<>();
         NodeList templateNodes = document.getElementsByTagName("template");

File: src/core/src/main/java/org/apache/jmeter/gui/action/template/TemplateManager.java
Patch:
@@ -172,7 +172,7 @@ public Map<String, Template> parseTemplateFile(File file) throws IOException, SA
         bd.setEntityResolver(new DefaultEntityResolver());
         LoggingErrorHandler errorHandler = new LoggingErrorHandler(log, file);
         bd.setErrorHandler(errorHandler);
-        Document document = bd.parse(file.getAbsolutePath());
+        Document document = bd.parse(file.toURI().toString());
         document.getDocumentElement().normalize();
         Map<String, Template> templates = new TreeMap<>();
         NodeList templateNodes = document.getElementsByTagName("template");

File: src/core/src/main/java/org/apache/jmeter/JMeter.java
Patch:
@@ -378,6 +378,7 @@ private void startGui(String testFile) {
         try {
             log.info("Setting LAF to: {}", jMeterLaf);
             UIManager.setLookAndFeel(jMeterLaf);
+            UIManager.put("Button.defaultButtonFollowsFocus", false);
         } catch (Exception ex) {
             log.warn("Could not set LAF to: {}", jMeterLaf, ex);
         }

File: src/core/src/main/java/org/apache/jmeter/gui/action/LookAndFeelCommand.java
Patch:
@@ -125,6 +125,7 @@ public void doAction(ActionEvent ev) {
         try {
             String className = ev.getActionCommand().substring(ActionNames.LAF_PREFIX.length()).replace('/', '.');
             UIManager.setLookAndFeel(className);
+            UIManager.put("Button.defaultButtonFollowsFocus", false);
             JMeterUtils.refreshUI();
             PREFS.put(USER_PREFS_KEY, className);
             int chosenOption = JOptionPane.showConfirmDialog(GuiPackage.getInstance().getMainFrame(), JMeterUtils

File: src/core/src/main/java/org/apache/jmeter/testelement/AbstractScopedTestElement.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.jmeter.testelement;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 

File: src/components/src/main/java/org/apache/jmeter/extractor/json/render/AbstractRenderAsJsonRenderer.java
Patch:
@@ -140,7 +140,7 @@ public void setupTabPane() {
     private JPanel createExtractorPanel() {
         jsonDataField = JSyntaxTextArea.getInstance(50, 80, true);
         jsonDataField.setCodeFoldingEnabled(true);
-        jsonDataField.setEditable(false);
+        jsonDataField.setEditable(true);
         jsonDataField.setBracketMatchingEnabled(false);
         jsonDataField.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JSON);
         jsonDataField.setLanguage(SyntaxConstants.SYNTAX_STYLE_JSON);

File: src/components/src/main/java/org/apache/jmeter/visualizers/RenderInBrowser.java
Patch:
@@ -2,18 +2,17 @@
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
+ * The ASF licenses this file to you under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- *
  */
 
 package org.apache.jmeter.visualizers;

File: src/components/src/main/java/org/apache/jmeter/visualizers/MailerVisualizer.java
Patch:
@@ -108,7 +108,7 @@ public JPanel getControlPanel() {
     }
 
     /**
-     * Clears any stored sampling-informations.
+     * Clears any stored sampling-information.
      */
     @Override
     public synchronized void clearData() {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -122,7 +122,7 @@ public final void populateSampler(HTTPSamplerBase sampler,
     }
 
     /**
-     * Compute sampler informations from Request Header
+     * Compute sampler information from Request Header
      * @param sampler {@link HTTPSamplerBase}
      * @param request {@link HttpRequestHdr}
      * @param pageEncodings Map of page encodings
@@ -149,7 +149,7 @@ protected void computeFromHeader(HTTPSamplerBase sampler,
     }
 
     /**
-     * Compute sampler informations from Request Header
+     * Compute sampler information from Request Header
      * @param sampler {@link HTTPSamplerBase}
      * @param request {@link HttpRequestHdr}
      * @throws Exception when something fails

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/ErrorMetric.java
Patch:
@@ -68,7 +68,7 @@ public String getResponseCode() {
      * @return the response message, 'none' if the code is empty
      */
     public String getResponseMessage() {
-        if (responseMessage.isEmpty()) {
+        if (responseMessage == null || responseMessage.isEmpty()) {
             return "None";
         } else {
             return responseMessage.trim();

File: src/core/src/main/java/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -1582,7 +1582,7 @@ public void setIgnore() {
     }
 
     /**
-     * @return String first non null assertion failure message
+     * @return String first non null assertion failure message if assertionResults is not null, null otherwise
      */
     public String getFirstAssertionFailureMessage() {
         String message = null;

File: src/protocol/http/src/test/java/org/apache/jmeter/gui/action/ParseCurlCommandActionTest.java
Patch:
@@ -255,7 +255,8 @@ public void testCreateSampler(@TempDir Path tempDir) throws Exception {
         assertEquals("@test.txt;type=text/foo", httpSampler.getArguments().getArgument(0).getValue());
 
         // test form data in httpsampler
-        request = basicCurlParser.parse("curl -X PUT \"https://www.example.com:123/12345?param1=value1&param2=value2\" -H  \"accept: */*\" -H  \"X-XSRF-TOKEN: 1234\"");
+        request = basicCurlParser.parse(
+                "curl -X PUT \"https://www.example.com:123/12345?param1=value1&param2=value2\" -H  \"accept: */*\" -H  \"X-XSRF-TOKEN: 1234\"");
         objs = new Object[]{request, ""};
         httpSampler = (HTTPSamplerProxy) method.invoke(p, objs);
         assertEquals(new URL("https://www.example.com:123/12345?param1=value1&param2=value2"), httpSampler.getUrl());

File: src/components/src/main/java/org/apache/jmeter/visualizers/SearchTreePanel.java
Patch:
@@ -207,7 +207,7 @@ private boolean searchInNode(Searcher searcher, SearchableTreeNode node) {
             node.updateState();
             return node.isNodeHasMatched() || node.isChildrenNodesHaveMatched();
         } catch (Exception e) {
-            log.error("Error extracting data from tree node");
+            log.error("Error extracting data from tree node using searcher:{}", searcher, e);
             return false;
         }
     }

File: src/core/src/main/java/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java
Patch:
@@ -139,7 +139,7 @@ public void setEnabled(boolean enabled) {
      */
     @Override
     public String getName() {
-        if (getNamePanel() != null) { // Check is mandatory because some LAFs (Nimbus) call getName() from 
+        if (getNamePanel() != null) { // Check is mandatory because some LAFs (Nimbus) call getName() from
                                       // super constructor (so can happen before namePanel field is initialized
             return getNamePanel().getName();
         }

File: src/functions/src/main/java/org/apache/jmeter/functions/TimeShift.java
Patch:
@@ -158,7 +158,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
                     localDateTimeToShift = LocalDateTime.parse(dateToShift, formatter);
                 } else {
                     localDateTimeToShift = LocalDateTime.ofInstant(Instant.ofEpochMilli(Long.parseLong(dateToShift)),
-                            ZoneId.systemDefault());
+                            systemDefaultZoneID);
                 }
             } catch (DateTimeParseException | NumberFormatException ex) {
                 log.error("Failed to parse the date '{}' to shift with formatter '{}'",
@@ -182,7 +182,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
         if (formatter != null) {
             dateString = localDateTimeToShift.format(formatter);
         } else {
-            ZoneOffset offset = ZoneId.systemDefault().getRules().getOffset(localDateTimeToShift);
+            ZoneOffset offset = systemDefaultZoneID.getRules().getOffset(localDateTimeToShift);
             dateString = String.valueOf(localDateTimeToShift.toInstant(offset).toEpochMilli());
         }
 

File: src/functions/src/main/java/org/apache/jmeter/functions/TimeShift.java
Patch:
@@ -182,7 +182,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
         if (formatter != null) {
             dateString = localDateTimeToShift.format(formatter);
         } else {
-            ZoneOffset offset = ZoneOffset.systemDefault().getRules().getOffset(localDateTimeToShift);
+            ZoneOffset offset = ZoneId.systemDefault().getRules().getOffset(localDateTimeToShift);
             dateString = String.valueOf(localDateTimeToShift.toInstant(offset).toEpochMilli());
         }
 

File: src/functions/src/main/java/org/apache/jmeter/functions/DigestEncodeFunction.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.jmeter.functions;
 
-import java.io.UnsupportedEncodingException;
 import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
@@ -85,7 +84,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
             byte[] bytes = md.digest();
             encodedString = uppercase(Hex.encodeHexString(bytes), values, 3);
             addVariableValue(encodedString, values, 4);
-        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
+        } catch (NoSuchAlgorithmException e) {
             log.error("Error calling {} function with value {}, digest algorithm {}, salt {}, ", KEY, stringToEncode,
                     digestAlgorithm, salt, e);
         }

File: src/functions/src/main/java/org/apache/jmeter/functions/DigestEncodeFunction.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.jmeter.functions;
 
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.Collection;
@@ -33,7 +34,6 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import java.nio.charset.StandardCharsets;
 
 /**
  * Digest Encode Function that provides computing of different SHA-XXX, can

File: src/components/src/test/java/org/apache/jmeter/assertions/ResponseAssertionTest.java
Patch:
@@ -33,8 +33,8 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class ResponseAssertionTest {
 
@@ -45,7 +45,7 @@ public ResponseAssertionTest() {
     private SampleResult sample;
     private AssertionResult result;
 
-    @Before
+    @BeforeEach
     public void setUp() throws MalformedURLException {
         JMeterContext jmctx = JMeterContextService.getContext();
         assertion = new ResponseAssertion();

File: src/components/src/test/java/org/apache/jmeter/assertions/SMIMEAssertionTest.java
Patch:
@@ -31,8 +31,8 @@
 
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jorphan.test.JMeterSerialTest;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 /**
  * Tests for the SMIMEAssertion.
@@ -96,7 +96,7 @@ public class SMIMEAssertionTest implements JMeterSerialTest {
     private MimeMessage msg;
     private SampleResult parent;
 
-    @Before
+    @BeforeEach
     public void setUp() throws MessagingException, IOException {
         Session mailSession = Session.getDefaultInstance(new Properties());
         msg = new MimeMessage(mailSession, this.getClass().getResourceAsStream(

File: src/components/src/test/java/org/apache/jmeter/assertions/SizeAssertionTest.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class SizeAssertionTest extends JMeterTestCase {
 
@@ -40,7 +40,7 @@ public class SizeAssertionTest extends JMeterTestCase {
     private final String data1 = "response Data\n" + "line 2\n\nEOF";
     private final int data1Len = data1.length();
 
-    @Before
+    @BeforeEach
     public void setUp() {
         JMeterContext jmctx = JMeterContextService.getContext();
         assertion = new SizeAssertion();

File: src/components/src/test/java/org/apache/jmeter/assertions/TestJSONPathAssertion.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Locale;
 
 import org.apache.jmeter.samplers.SampleResult;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestJSONPathAssertion {
 

File: src/components/src/test/java/org/apache/jmeter/assertions/XPath2AssertionTest.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.util.XPathUtil;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
@@ -45,7 +45,7 @@ public class XPath2AssertionTest {
     private JMeterVariables vars;
     private JMeterContext jmctx;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         jmctx = JMeterContextService.getContext();
         assertion = new  XPath2Assertion();

File: src/components/src/test/java/org/apache/jmeter/assertions/gui/TestJSONPathAssertionGui.java
Patch:
@@ -20,8 +20,7 @@
 
 import org.apache.jmeter.assertions.JSONPathAssertion;
 import org.apache.jmeter.testelement.TestElement;
-import org.junit.Test;
-
+import org.junit.jupiter.api.Test;
 
 public class TestJSONPathAssertionGui {
 

File: src/components/src/test/java/org/apache/jmeter/assertions/jmespath/gui/JMESPathAssertionGuiTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.apache.jmeter.assertions.jmespath.JMESPathAssertion;
 import org.apache.jmeter.testelement.TestElement;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class JMESPathAssertionGuiTest {
 

File: src/components/src/test/java/org/apache/jmeter/config/gui/TestArgumentsPanel.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * A GUI panel allowing the user to enter name-value argument pairs. These

File: src/components/src/test/java/org/apache/jmeter/control/TestGenericController.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.junit.stubs.TestSampler;
 import org.apache.jmeter.testelement.TestElement;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestGenericController extends JMeterTestCase {
 

File: src/components/src/test/java/org/apache/jmeter/control/TestIfController.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
 public class TestIfController extends JMeterTestCase {
 
@@ -137,7 +137,7 @@ public void testBug53768() throws Exception {
     }
 
     @Test
-    @Ignore
+    @Disabled
     public void testProcessing() throws Exception {
 
         GenericController controller = new GenericController();

File: src/components/src/test/java/org/apache/jmeter/control/TestInterleaveControl.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.junit.stubs.TestSampler;
 import org.apache.jmeter.testelement.TestElement;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestInterleaveControl extends JMeterTestCase {
 

File: src/components/src/test/java/org/apache/jmeter/control/TestLoopController.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestLoopController extends JMeterTestCase {
 

File: src/components/src/test/java/org/apache/jmeter/control/TestOnceOnlyController.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.junit.stubs.TestSampler;
 import org.apache.jmeter.testelement.TestElement;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestOnceOnlyController extends JMeterTestCase {
 

File: src/components/src/test/java/org/apache/jmeter/control/TestRandomController.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.junit.stubs.TestSampler;
 import org.apache.jmeter.testelement.TestElement;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestRandomController extends JMeterTestCase {
 

File: src/components/src/test/java/org/apache/jmeter/control/TestTransactionController.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.jmeter.threads.TestCompiler;
 import org.apache.jmeter.threads.ThreadGroup;
 import org.apache.jorphan.collections.ListedHashTree;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 
 public class TestTransactionController extends JMeterTestCase {

File: src/components/src/test/java/org/apache/jmeter/extractor/TestHtmlExtractorJSoup.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.hamcrest.CoreMatchers;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestHtmlExtractorJSoup {
 
@@ -37,7 +37,7 @@ public class TestHtmlExtractorJSoup {
     protected JMeterVariables vars;
     protected JMeterContext jmctx;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         jmctx = JMeterContextService.getContext();
         extractor = new HtmlExtractor();

File: src/components/src/test/java/org/apache/jmeter/extractor/TestHtmlExtractorJodd.java
Patch:
@@ -19,10 +19,10 @@
 package org.apache.jmeter.extractor;
 
 import org.apache.jmeter.threads.JMeterContextService;
-import org.junit.Before;
+import org.junit.jupiter.api.BeforeEach;
 
 public class TestHtmlExtractorJodd extends TestHtmlExtractorJSoup {
-    @Before
+    @BeforeEach
     public void setUpJodd() {
         extractor.setExtractor(HtmlExtractor.EXTRACTOR_JODD);
         jmctx = JMeterContextService.getContext();

File: src/components/src/test/java/org/apache/jmeter/extractor/TestRegexExtractor.java
Patch:
@@ -33,8 +33,8 @@
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.hamcrest.CoreMatchers;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestRegexExtractor {
 
@@ -43,7 +43,7 @@ public class TestRegexExtractor {
     private JMeterVariables vars;
     private JMeterContext jmctx;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         jmctx = JMeterContextService.getContext();
         extractor = new RegexExtractor();

File: src/components/src/test/java/org/apache/jmeter/extractor/TestXPath2Extractor.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestXPath2Extractor {
     private static final String VAL_NAME = "value";
@@ -40,7 +40,7 @@ public class TestXPath2Extractor {
     private JMeterVariables vars;
     private JMeterContext jmctx;
 
-    @Before
+    @BeforeEach
     public void setUp() throws UnsupportedEncodingException {
         jmctx = JMeterContextService.getContext();
         extractor = new XPath2Extractor();

File: src/components/src/test/java/org/apache/jmeter/gui/action/TestSave.java
Patch:
@@ -24,13 +24,13 @@
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.collections.ListedHashTree;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestSave {
     private Save save;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         save = new Save();
     }

File: src/components/src/test/java/org/apache/jmeter/timers/ConstantThroughputTimerTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.jmeter.util.ScriptingTestElement;
 import org.junit.Assert;
 import org.junit.Assume;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/components/src/test/java/org/apache/jmeter/timers/TimerServiceTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.hamcrest.CoreMatchers;
 import org.hamcrest.Description;
 import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TimerServiceTest {
 

File: src/components/src/test/java/org/apache/jmeter/visualizers/TestRenderAsJson.java
Patch:
@@ -22,8 +22,8 @@
 
 import java.lang.reflect.Method;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestRenderAsJson {
 
@@ -34,7 +34,7 @@ private String prettyJSON(String prettify) throws Exception {
         return (String) prettyJSON.invoke(null, prettify);
     }
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         prettyJSON = RenderAsJSON.class.getDeclaredMethod("prettyJSON",
                 String.class);

File: src/components/src/test/java/org/apache/jmeter/visualizers/TestSamplingStatCalculator.java
Patch:
@@ -20,13 +20,13 @@
 
 import org.apache.jmeter.samplers.SampleResult;
 import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestSamplingStatCalculator {
 
     private SamplingStatCalculator ssc;
-    @Before
+    @BeforeEach
     public void setUp(){
         ssc = new SamplingStatCalculator("JUnit");
     }

File: src/components/src/test/java/org/apache/jmeter/visualizers/backend/SamplerMetricFixedModeTest.java
Patch:
@@ -21,14 +21,14 @@
 import static org.junit.Assert.assertEquals;
 
 import org.apache.jmeter.samplers.SampleResult;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class SamplerMetricFixedModeTest {
 
     private static final int DEFAULT_ELAPSED_TIME = 1_000;
 
-    @Before
+    @BeforeEach
     public void initMode() throws Exception {
         //noinspection deprecation
         SamplerMetric.setDefaultWindowMode(WindowMode.FIXED);

File: src/components/src/test/java/org/apache/jmeter/visualizers/backend/SamplerMetricTimedModeTest.java
Patch:
@@ -21,14 +21,14 @@
 import static org.junit.Assert.assertEquals;
 
 import org.apache.jmeter.samplers.SampleResult;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class SamplerMetricTimedModeTest {
 
     private static final int DEFAULT_ELAPSED_TIME = 1_000;
 
-    @Before
+    @BeforeEach
     public void initMode() throws Exception {
         //noinspection deprecation
         SamplerMetric.setDefaultWindowMode(WindowMode.TIMED);

File: src/core/src/test/java/org/apache/jmeter/JMeterTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.report.config.ConfigurationException;
 import org.apache.jorphan.test.JMeterSerialTest;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class JMeterTest extends JMeterTestCase implements JMeterSerialTest {
 

File: src/core/src/test/java/org/apache/jmeter/engine/DistributedRunnerTest.java
Patch:
@@ -32,7 +32,7 @@
 
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.HashTree;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/core/src/test/java/org/apache/jmeter/engine/LocalHostTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.commons.net.util.SubnetUtils;
 import org.apache.commons.net.util.SubnetUtils.SubnetInfo;
 import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * Try to establish why some batchtestserver runs fail

File: src/core/src/test/java/org/apache/jmeter/engine/TestTreeCloner.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jorphan.collections.ListedHashTree;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestTreeCloner extends JMeterTestCase {
 

File: src/core/src/test/java/org/apache/jmeter/gui/util/JSyntaxTextAreaTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.util.JMeterUtils;
 import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class JSyntaxTextAreaTest extends JMeterTestCase {
 

File: src/core/src/test/java/org/apache/jmeter/listeners/TestResultAction.java
Patch:
@@ -26,15 +26,15 @@
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestResultAction extends JMeterTestCase {
     private ResultAction resultAction;
     private SampleResult sampleResult;
     private final String data = "response Data";
 
-    @Before
+    @BeforeEach
     public void setUp() {
         JMeterContext jmctx = JMeterContextService.getContext();
         resultAction = new ResultAction();

File: src/core/src/test/java/org/apache/jmeter/report/core/SampleMetadataTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class SampleMetadataTest {
 

File: src/core/src/test/java/org/apache/jmeter/report/dashboard/ApdexPerTransactionTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.jmeter.report.config.ReportGeneratorConfiguration;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.oro.text.regex.PatternMatcher;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import jodd.props.Props;
 

File: src/core/src/test/java/org/apache/jmeter/resources/ResourceKeyUsageTest.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.regex.Pattern;
 
 import org.apache.jorphan.util.JOrphanUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ResourceKeyUsageTest {
     // We assume the test starts in "module" (e.g. src/core) directory (which is true for Gradle and IDEs)

File: src/core/src/test/java/org/apache/jmeter/samplers/TestSampleResult.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.jmeter.util.Calculator;
 import org.apache.jmeter.util.LogRecordingDelegatingLogger;
 import org.apache.jorphan.test.JMeterSerialTest;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestSampleResult implements JMeterSerialTest {
 

File: src/core/src/test/java/org/apache/jmeter/samplers/TestSampleSaveConfiguration.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.List;
 
 import org.apache.jmeter.junit.JMeterTestCase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 // Extends JMeterTest case because it needs access to JMeter properties
 public class TestSampleSaveConfiguration extends JMeterTestCase {

File: src/core/src/test/java/org/apache/jmeter/save/TestCSVSaveService.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.jmeter.samplers.SampleEvent;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.SampleSaveConfiguration;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestCSVSaveService extends JMeterTestCase {
 

File: src/core/src/test/java/org/apache/jmeter/testbeans/gui/TestBooleanPropertyEditor.java
Patch:
@@ -24,7 +24,7 @@
 import java.beans.PropertyEditor;
 import java.beans.PropertyEditorManager;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * Test class to check that the JVM provides sensible behaviour for the boolean

File: src/core/src/test/java/org/apache/jmeter/testbeans/gui/TestComboStringEditor.java
Patch:
@@ -21,7 +21,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestComboStringEditor {
 

File: src/core/src/test/java/org/apache/jmeter/testbeans/gui/TestFieldStringEditor.java
Patch:
@@ -20,7 +20,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestFieldStringEditor {
 

File: src/core/src/test/java/org/apache/jmeter/testelement/PackageTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.jmeter.testelement.property.NullProperty;
 import org.apache.jmeter.testelement.property.StringProperty;
 import org.apache.jmeter.testelement.property.TestElementProperty;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class PackageTest {
 

File: src/core/src/test/java/org/apache/jmeter/testelement/TestNumberProperty.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.jmeter.testelement.property.DoubleProperty;
 import org.apache.jmeter.testelement.property.IntegerProperty;
 import org.apache.jmeter.testelement.property.NumberProperty;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestNumberProperty {
 

File: src/core/src/test/java/org/apache/jmeter/testelement/property/AbstractPropertyTest.java
Patch:
@@ -29,15 +29,15 @@
 
 import org.apache.jmeter.testelement.TestElement;
 import org.hamcrest.CoreMatchers;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class AbstractPropertyTest {
 
     private AbstractProperty dummyProperty;
 
     @SuppressWarnings("serial")
-    @Before
+    @BeforeEach
     public void setUp() {
 
         this.dummyProperty = new AbstractProperty() {

File: src/core/src/test/java/org/apache/jmeter/testelement/property/MapPropertyTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Map;
 
 import org.hamcrest.CoreMatchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class MapPropertyTest {
 

File: src/core/src/test/java/org/apache/jmeter/testelement/property/PackageTest.java
Patch:
@@ -23,7 +23,7 @@
 import static org.junit.Assert.fail;
 
 import org.apache.jmeter.config.LoginConfig;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /** Class for testing the property package. */
 public class PackageTest {

File: src/core/src/test/java/org/apache/jmeter/threads/TestJMeterContextService.java
Patch:
@@ -20,7 +20,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestJMeterContextService {
 

File: src/core/src/test/java/org/apache/jmeter/threads/TestTestCompiler.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jorphan.collections.ListedHashTree;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestTestCompiler {
 

File: src/core/src/test/java/org/apache/jmeter/util/JSR223TestElementTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.junit.Assert.assertThat;
 
 import org.hamcrest.CoreMatchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class JSR223TestElementTest {
 

File: src/core/src/test/java/org/apache/jmeter/util/PackageTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import static org.junit.Assert.assertNotNull;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class PackageTest {
 

File: src/core/src/test/java/org/apache/jmeter/util/StringUtilitiesTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class StringUtilitiesTest {
 

File: src/core/src/test/java/org/apache/jmeter/util/TestJMeterUtils.java
Patch:
@@ -20,7 +20,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestJMeterUtils {
 

File: src/core/src/test/java/org/apache/jmeter/util/XPathUtilTest.java
Patch:
@@ -39,7 +39,7 @@
 
 import org.apache.jmeter.assertions.AssertionResult;
 import org.hamcrest.CoreMatchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.w3c.dom.Document;
 import org.xml.sax.SAXException;
 

File: src/core/src/test/java/org/apache/jorphan/TestXMLBuffer.java
Patch:
@@ -23,7 +23,7 @@
 
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jorphan.util.XMLBuffer;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestXMLBuffer extends JMeterTestCase {
 

File: src/core/src/test/java/org/apache/jorphan/reflect/TestFunctor.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.jorphan.util.JMeterError;
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.config.Configurator;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 /** Unit tests for classes that use Functors */
 public class TestFunctor extends JMeterTestCase {
@@ -88,7 +88,7 @@ public String getString(String s){
         }
     }
 
-    @Before
+    @BeforeEach
     public void setUp(){
         Configurator.setAllLevels(Functor.class.getName(), Level.FATAL);
     }

File: src/dist-check/src/test/java/org/apache/jmeter/control/TestSwitchController.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestSwitchController extends JMeterTestCase {
 

File: src/dist-check/src/test/java/org/apache/jmeter/resources/TestPropertiesFiles.java
Patch:
@@ -28,7 +28,7 @@
 
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.util.JMeterUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestPropertiesFiles extends JMeterTestCase {
 

File: src/dist-check/src/test/java/org/apache/jmeter/save/TestSaveService.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.HashTree;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestSaveService extends JMeterTestCase {
 

File: src/dist-check/src/test/java/org/apache/jorphan/TestFunctorUsers.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.jmeter.visualizers.StatVisualizer;
 import org.apache.jmeter.visualizers.SummaryReport;
 import org.apache.jmeter.visualizers.TableVisualizer;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /** Unit tests for classes that use Functors */
 public class TestFunctorUsers extends JMeterTestCase {

File: src/dist-check/src/test/java/org/apache/jorphan/reflect/TestClassFinder.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.logging.log4j.LoggingException;
 import org.hamcrest.CoreMatchers;
 import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestClassFinder {
 
@@ -41,7 +41,7 @@ private String getJMeterHome() throws Exception {
         return Paths.get(path).toRealPath().toString();
     }
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         libDirs = new String[] { getJMeterHome() };
     }

File: src/functions/src/test/java/org/apache/jmeter/functions/EvalFunctionTest.java
Patch:
@@ -28,15 +28,15 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class EvalFunctionTest extends JMeterTestCase {
 
     private JMeterContext jmctx = null;
     private JMeterVariables vars = null;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         jmctx = JMeterContextService.getContext();
         jmctx.setVariables(new JMeterVariables());

File: src/functions/src/test/java/org/apache/jmeter/functions/SplitFunctionTest.java
Patch:
@@ -30,15 +30,15 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class SplitFunctionTest extends JMeterTestCase {
 
     private JMeterContext jmctx = null;
     private JMeterVariables vars = null;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         jmctx = JMeterContextService.getContext();
         jmctx.setVariables(new JMeterVariables());

File: src/functions/src/test/java/org/apache/jmeter/functions/SumFunctionTest.java
Patch:
@@ -30,14 +30,14 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class SumFunctionTest extends JMeterTestCase {
 
     private JMeterVariables vars = null;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         JMeterContext jmctx = JMeterContextService.getContext();
         jmctx.setVariables(new JMeterVariables());

File: src/functions/src/test/java/org/apache/jmeter/functions/TestEscapeOroRegexpChars.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestEscapeOroRegexpChars extends JMeterTestCase {
 
@@ -40,7 +40,7 @@ public class TestEscapeOroRegexpChars extends JMeterTestCase {
     private JMeterVariables vars;
     private JMeterContext jmctx;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         function = new EscapeOroRegexpChars();
         result = new SampleResult();

File: src/functions/src/test/java/org/apache/jmeter/functions/TestFileToString.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
 import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestFileToString extends JMeterTestCase {
 
@@ -43,7 +43,7 @@ public class TestFileToString extends JMeterTestCase {
     private JMeterVariables vars;
     private JMeterContext jmctx;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         function = new FileToString();
         result = new SampleResult();

File: src/functions/src/test/java/org/apache/jmeter/functions/TestJexl2Function.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestJexl2Function extends JMeterTestCase {
 
@@ -40,7 +40,7 @@ public class TestJexl2Function extends JMeterTestCase {
     private JMeterVariables vars;
     private JMeterContext jmctx;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         function = new Jexl2Function();
         result = new SampleResult();

File: src/functions/src/test/java/org/apache/jmeter/functions/TestJexl3Function.java
Patch:
@@ -18,11 +18,11 @@
 
 package org.apache.jmeter.functions;
 
-import org.junit.Before;
+import org.junit.jupiter.api.BeforeEach;
 
 public class TestJexl3Function extends TestJexl2Function {
 
-    @Before
+    @BeforeEach
     @Override
     public void setUp() {
         super.setUp();

File: src/functions/src/test/java/org/apache/jmeter/functions/TestMachineIPName.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestMachineIPName extends JMeterTestCase {
 
@@ -41,7 +41,7 @@ public class TestMachineIPName extends JMeterTestCase {
     private JMeterVariables vars;
     private JMeterContext jmctx;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         result = new SampleResult();
         jmctx = JMeterContextService.getContext();

File: src/functions/src/test/java/org/apache/jmeter/functions/TestRandomFromMultipleVars.java
Patch:
@@ -31,8 +31,8 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.hamcrest.CoreMatchers;
 import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestRandomFromMultipleVars extends JMeterTestCase {
 
@@ -42,7 +42,7 @@ public class TestRandomFromMultipleVars extends JMeterTestCase {
     private JMeterVariables vars;
     private JMeterContext jmctx;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         result = new SampleResult();
         jmctx = JMeterContextService.getContext();

File: src/functions/src/test/java/org/apache/jmeter/functions/TestSamplerNameFunction.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestSamplerNameFunction extends JMeterTestCase {
 
@@ -42,7 +42,7 @@ public class TestSamplerNameFunction extends JMeterTestCase {
     private JMeterContext jmctx = null;
     private String value;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         jmctx = JMeterContextService.getContext();
         vars = new JMeterVariables();

File: src/functions/src/test/java/org/apache/jmeter/functions/TestSetProperty.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.test.JMeterSerialTest;
 import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestSetProperty extends JMeterTestCase implements JMeterSerialTest {
 
@@ -43,7 +43,7 @@ public class TestSetProperty extends JMeterTestCase implements JMeterSerialTest
     private JMeterVariables vars;
     private JMeterContext jmctx;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         function = new SetProperty();
         result = new SampleResult();

File: src/functions/src/test/java/org/apache/jmeter/functions/TestSimpleFunctions.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.threads.ThreadGroup;
 import org.apache.jorphan.test.JMeterSerialTest;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestSimpleFunctions extends JMeterTestCase implements JMeterSerialTest {
 
@@ -44,7 +44,7 @@ public class TestSimpleFunctions extends JMeterTestCase implements JMeterSerialT
     private JMeterVariables vars;
     private JMeterContext jmctx;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         result = new SampleResult();
         jmctx = JMeterContextService.getContext();

File: src/functions/src/test/java/org/apache/jmeter/functions/TestTimeFunction.java
Patch:
@@ -33,8 +33,8 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestTimeFunction extends JMeterTestCase {
 
@@ -45,7 +45,7 @@ public class TestTimeFunction extends JMeterTestCase {
     private JMeterContext jmctx = null;
     private String value;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         jmctx = JMeterContextService.getContext();
         vars = new JMeterVariables();

File: src/functions/src/test/java/org/apache/jmeter/functions/TestTimeRandomDateFunction.java
Patch:
@@ -35,8 +35,8 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestTimeRandomDateFunction extends JMeterTestCase {
 
@@ -46,7 +46,7 @@ public class TestTimeRandomDateFunction extends JMeterTestCase {
     private JMeterContext jmctx = null;
     private String value;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         jmctx = JMeterContextService.getContext();
         vars = new JMeterVariables();

File: src/functions/src/test/java/org/apache/jmeter/functions/TestTimeShiftFunction.java
Patch:
@@ -40,8 +40,8 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestTimeShiftFunction extends JMeterTestCase {
 
@@ -51,7 +51,7 @@ public class TestTimeShiftFunction extends JMeterTestCase {
     private JMeterContext jmctx = null;
     private String value;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         jmctx = JMeterContextService.getContext();
         vars = new JMeterVariables();

File: src/functions/src/test/java/org/apache/jmeter/functions/TestUrlEncodeDecode.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestUrlEncodeDecode extends JMeterTestCase {
 
@@ -39,7 +39,7 @@ public class TestUrlEncodeDecode extends JMeterTestCase {
     private JMeterVariables vars;
     private JMeterContext jmctx;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         result = new SampleResult();
         jmctx = JMeterContextService.getContext();

File: src/functions/src/test/java/org/apache/jmeter/functions/VariableTest.java
Patch:
@@ -28,15 +28,15 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class VariableTest extends JMeterTestCase {
 
     private JMeterContext jmctx = null;
     private JMeterVariables vars = null;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         jmctx = JMeterContextService.getContext();
         jmctx.setVariables(new JMeterVariables());

File: src/jorphan/src/test/java/org/apache/commons/cli/avalon/ClutilTestCase.java
Patch:
@@ -24,7 +24,7 @@
 
 import java.util.List;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public final class ClutilTestCase {
     private static final String[] ARGLIST1 = new String[] { "--you", "are", "--all", "-cler", "kid" };

File: src/jorphan/src/test/java/org/apache/jorphan/collections/PackageTest.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/jorphan/src/test/java/org/apache/jorphan/exec/TestKeyToolUtils.java
Patch:
@@ -28,7 +28,7 @@
 
 import org.apache.jorphan.util.JOrphanUtils;
 import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.TempDir;
 import org.junit.jupiter.api.parallel.Execution;
@@ -41,8 +41,8 @@ public class TestKeyToolUtils {
     private static String password;
     private static final int validity = 1;
 
-    @BeforeAll
-    public static void setup(@TempDir Path keystoreDir) throws IOException {
+    @BeforeEach
+    public void setup(@TempDir Path keystoreDir) throws IOException {
         keystore = keystoreDir.resolve("dummy-keystore.jks").toFile();
         password = JOrphanUtils.generateRandomAlphanumericPassword(32);
         KeyToolUtils.generateProxyCA(keystore, password, validity);

File: src/jorphan/src/test/java/org/apache/jorphan/gui/ObjectTableModelTest.java
Patch:
@@ -28,8 +28,8 @@
 import javax.swing.event.TableModelEvent;
 
 import org.apache.jorphan.reflect.Functor;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class ObjectTableModelTest {
 
@@ -60,7 +60,7 @@ public String getC() {
     ObjectTableModel model;
     TableModelEventBacker events;
 
-    @Before
+    @BeforeEach
     public void init() {
         String[] headers = { "a", "b", "c" };
         Functor[] readFunctors = Arrays.stream(headers).map(name -> "get" + name.toUpperCase()).map(Functor::new).toArray(n -> new Functor[n]);

File: src/jorphan/src/test/java/org/apache/jorphan/reflect/TestClassTools.java
Patch:
@@ -23,7 +23,7 @@
 import static org.junit.Assert.assertTrue;
 
 import org.apache.jorphan.util.JMeterException;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestClassTools {
 

File: src/jorphan/src/test/java/org/apache/jorphan/util/TestConverter.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Date;
 import java.util.GregorianCalendar;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /** Tests for {@link Converter} */
 public class TestConverter {

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/config/MultipartUrlConfigTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.protocol.http.util.HTTPFileArgs;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class MultipartUrlConfigTest {
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/config/UrlConfigTest.java
Patch:
@@ -29,16 +29,16 @@
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.NullProperty;
 import org.apache.jmeter.testelement.property.TestElementProperty;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class UrlConfigTest extends JMeterTestCase {
 
     private HTTPSamplerBase config;
     private HTTPSamplerBase defaultConfig;
     private HTTPSamplerBase partialConfig;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         Arguments args = new Arguments();
         args.addArgument("username", "mstover");

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/control/TestAuthManager.java
Patch:
@@ -29,7 +29,7 @@
 
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.testelement.property.CollectionProperty;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestAuthManager extends JMeterTestCase {
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/control/TestAuthorization.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.apache.jmeter.protocol.http.control.AuthManager.Mechanism;
 import org.hamcrest.CoreMatchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestAuthorization {
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/control/TestCookieManagerThreadIteration.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestCookieManagerThreadIteration {
     private JMeterContext jmctx;
@@ -40,7 +40,7 @@ public class TestCookieManagerThreadIteration {
     private static final String DYNAMIC_COOKIE = "dynamic_cookie_added_by_user";
     private static final String STATIC_COOKIE = "static_cookie";
 
-    @Before
+    @BeforeEach
     public void setUp() {
         jmctx = JMeterContextService.getContext();
         jmvars = new JMeterVariables();

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/control/TestHC4CookieManager.java
Patch:
@@ -37,8 +37,8 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 /**
  * HC4CookieHandler tests
@@ -48,7 +48,7 @@ public class TestHC4CookieManager extends JMeterTestCase {
     private CookieManager man = null;
     private JMeterContext jmctx = null;
 
-    @Before
+    @BeforeEach
     public void setUp() throws Exception {
         jmctx = JMeterContextService.getContext();
         man = new CookieManager();

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/control/gui/TestHttpTestSampleGui.java
Patch:
@@ -22,16 +22,16 @@
 
 import org.apache.jmeter.junit.categories.NeedGuiTests;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
-import org.junit.Before;
-import org.junit.Test;
 import org.junit.experimental.categories.Category;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 @Category(NeedGuiTests.class)
 public class TestHttpTestSampleGui {
 
     private HttpTestSampleGui gui;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         gui = new HttpTestSampleGui();
     }

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/modifier/TestAnchorModifier.java
Patch:
@@ -38,15 +38,15 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jorphan.io.TextFile;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestAnchorModifier extends JMeterTestCase {
 
     private AnchorModifier parser = new AnchorModifier();
     private JMeterContext jmctx = null;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         jmctx = JMeterContextService.getContext();
         parser.setThreadContext(jmctx);

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/modifier/TestURLRewritingModifier.java
Patch:
@@ -31,16 +31,16 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestURLRewritingModifier extends JMeterTestCase {
 
     private SampleResult response = null;
     private JMeterContext context = null;
     private URLRewritingModifier mod = null;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         context = JMeterContextService.getContext();
         mod = new URLRewritingModifier();

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/parser/TestBaseParser.java
Patch:
@@ -21,7 +21,7 @@
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertSame;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestBaseParser {
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/parser/TestCssParser.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.commons.collections.IteratorUtils;
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.hamcrest.CoreMatchers;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestCssParser extends JMeterTestCase {
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/parser/TestHtmlParsingUtils.java
Patch:
@@ -25,12 +25,12 @@
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.protocol.http.sampler.HTTPNullSampler;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public final class TestHtmlParsingUtils extends JMeterTestCase {
 
-    @Before
+    @BeforeEach
     public void setUp() {
     }
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/proxy/TestProxyControl.java
Patch:
@@ -24,15 +24,15 @@
 import org.apache.jmeter.protocol.http.sampler.HTTPNullSampler;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
 import org.apache.jmeter.samplers.SampleResult;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestProxyControl {
 
     private HTTPSamplerBase sampler;
     private ProxyControl control;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         control = new ProxyControl();
         control.addIncludedPattern(".*\\.jsp");

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/sampler/PackageTest.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.jmeter.protocol.http.config.gui.HttpDefaultsGui;
 import org.apache.jmeter.protocol.http.control.gui.HttpTestSampleGui;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
-import org.junit.Test;
 import org.junit.experimental.categories.Category;
+import org.junit.jupiter.api.Test;
 
 @Category(NeedGuiTests.class)
 public class PackageTest {

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/sampler/PutWriterTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class PutWriterTest {
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplers.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestHTTPSamplers {
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/sampler/TestHttpWebdav.java
Patch:
@@ -29,7 +29,7 @@
 
 import org.apache.http.client.methods.HttpRequestBase;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestHttpWebdav {
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/sampler/TestSerializedHTTPSampler.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.services.FileServer;
 import org.apache.jorphan.test.JMeterSerialTest;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestSerializedHTTPSampler extends JMeterTestCase implements JMeterSerialTest {
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/util/TestHTTPArgument.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.testelement.property.CollectionProperty;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestHTTPArgument {
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/util/TestHTTPFileArg.java
Patch:
@@ -20,7 +20,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestHTTPFileArg {
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/util/TestHTTPFileArgs.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.List;
 
 import org.apache.jmeter.testelement.property.PropertyIterator;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestHTTPFileArgs {
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/util/accesslog/TestLogFilter.java
Patch:
@@ -23,8 +23,8 @@
 import static org.junit.Assert.assertTrue;
 
 import org.apache.jmeter.junit.JMeterTestCase;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class TestLogFilter extends JMeterTestCase {
 
@@ -78,7 +78,7 @@ public void testConstruct() {
 
     private LogFilter testf;
 
-    @Before
+    @BeforeEach
     public void setUp() {
         testf = new LogFilter();
     }

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/util/accesslog/TestSessionFilter.java
Patch:
@@ -29,7 +29,7 @@
 
 import org.apache.jmeter.protocol.http.control.CookieManager;
 import org.apache.jmeter.protocol.http.sampler.HTTPSampler;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestSessionFilter {
 

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/util/accesslog/TestTCLogParser.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.protocol.http.sampler.HTTPNullSampler;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestTCLogParser extends JMeterTestCase {
     private static final TCLogParser tclp = new TCLogParser();

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTPTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import junit.framework.TestCase;
 

File: src/protocol/http/src/test/java/org/apache/jmeter/testelement/TestHeaderManager.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.protocol.http.control.Header;
 import org.apache.jmeter.protocol.http.control.HeaderManager;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestHeaderManager extends JMeterTestCase {
 

File: src/protocol/ldap/src/test/java/org/apache/jmeter/protocol/ldap/config/gui/PackageTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class PackageTest {
 

File: src/protocol/mail/src/test/java/org/apache/jmeter/protocol/mail/sampler/TestMailReaderSampler.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Properties;
 
 import org.apache.jmeter.util.JMeterUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestMailReaderSampler {
 

File: src/protocol/tcp/src/test/java/org/apache/jmeter/protocol/tcp/sampler/BinaryTCPClientImplTest.java
Patch:
@@ -27,7 +27,7 @@
 
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class BinaryTCPClientImplTest {
 

File: src/protocol/tcp/src/test/java/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImplTest.java
Patch:
@@ -25,7 +25,7 @@
 import java.io.ByteArrayOutputStream;
 
 import org.apache.jmeter.samplers.SampleResult;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class LengthPrefixedBinaryTCPClientImplTest {
 

File: src/protocol/tcp/src/test/java/org/apache/jmeter/protocol/tcp/sampler/TCPClientDecoratorTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TCPClientDecoratorTest {
 

File: src/core/src/main/java/org/apache/jmeter/save/SaveService.java
Patch:
@@ -156,7 +156,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "1912808b50358c3afce8c54280f173b8fa8ba229"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "6fd03656cf4997fe6b0af17fa8dc8469e563c93a"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/components/src/main/java/org/apache/jmeter/assertions/XMLSchemaAssertion.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.Serializable;
 import java.io.StringReader;
 
+import javax.xml.XMLConstants;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
@@ -102,7 +103,7 @@ private void setSchemaResult(AssertionResult result, String xmlStr, String xsdFi
             parserFactory.setNamespaceAware(true);
             parserFactory.setAttribute(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);
             parserFactory.setAttribute(JAXP_SCHEMA_SOURCE, xsdFileName);
-
+            parserFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
             // create a parser:
             DocumentBuilder parser = parserFactory.newDocumentBuilder();
             parser.setErrorHandler(new SAXErrorHandler(result));

File: src/core/src/main/java/org/apache/jmeter/gui/action/SchematicView.java
Patch:
@@ -33,6 +33,7 @@
 import javax.swing.JMenuItem;
 import javax.swing.JOptionPane;
 import javax.swing.MenuElement;
+import javax.xml.XMLConstants;
 import javax.xml.transform.Source;
 import javax.xml.transform.Transformer;
 import javax.xml.transform.TransformerFactory;
@@ -69,6 +70,7 @@ public void generate(HashTree testPlan, File testPlanFile, OutputStream outputSt
                 throws Exception {
             TransformerFactory factory = TransformerFactory.newInstance(
                     "net.sf.saxon.BasicTransformerFactory", Thread.currentThread().getContextClassLoader());
+            factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
             Source xslt;
             if (!StringUtils.isEmpty(DEFAULT_XSL_FILE)) {
                 log.info("Will use file {} for Schematic View generation", DEFAULT_XSL_FILE);

File: src/core/src/main/java/org/apache/jmeter/gui/action/template/TemplateManager.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Map;
 import java.util.TreeMap;
 
+import javax.xml.XMLConstants;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
@@ -167,6 +168,7 @@ public Map<String, Template> parseTemplateFile(File file) throws IOException, SA
         dbf.setNamespaceAware(true);
         dbf.setFeature("http://xml.org/sax/features/external-general-entities", false);
         dbf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
+        dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
         DocumentBuilder bd = dbf.newDocumentBuilder();
         bd.setEntityResolver(new DefaultEntityResolver());
         LoggingErrorHandler errorHandler = new LoggingErrorHandler(log, file);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -25,6 +25,7 @@
 import java.net.URL;
 import java.util.Map;
 
+import javax.xml.XMLConstants;
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
@@ -237,6 +238,7 @@ protected void computeFromPostBody(HTTPSamplerBase sampler,
     private static boolean isPotentialXml(String postData) {
         try {
             SAXParserFactory spf = SAXParserFactory.newInstance();
+            spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
             SAXParser saxParser = spf.newSAXParser();
             XMLReader xmlReader = saxParser.getXMLReader();
             ErrorDetectionHandler detectionHandler =

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/render/ObjectMessageRenderer.java
Patch:
@@ -92,6 +92,7 @@ protected Serializable getInterpretedContent(String filename, final String pEnco
     /** Try to determine encoding based on XML prolog, if none <code>null</code> is returned. **/
     protected String findEncoding(String filename) {
         XMLInputFactory factory = XMLInputFactory.newInstance();
+        factory.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);
         try (FileInputStream input = new FileInputStream(filename)) {
             XMLStreamReader reader = factory.createXMLStreamReader(input);
             return reader.getEncoding();

File: src/core/src/main/java/org/apache/jmeter/util/JsseSSLManager.java
Patch:
@@ -111,7 +111,7 @@ public JsseSSLManager(Provider provider) {
             }
 
             HttpsURLConnection.setDefaultSSLSocketFactory(new HttpSSLProtocolSocketFactory(CPS));
-            HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> true);
+            HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> true); // NOSONAR JMeter is a pentest and perf testing tool
 
             log.debug("SSL stuff all set");
         } catch (GeneralSecurityException ex) {

File: src/protocol/junit-sample/src/main/java/test/DummyAnnotatedTest.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class DummyAnnotatedTest
 {
-    public int two = 1; //very wrong.
+    private int two = 1; //very wrong.
 
     public DummyAnnotatedTest() {
     }

File: src/core/src/main/java/org/apache/jmeter/report/processor/ExternalSampleSorter.java
Patch:
@@ -320,7 +320,9 @@ public void stopConsuming() {
         if (this.pool != null) {
             this.pool.shutdown();
         }
-        getWorkingDirectory().delete();
+        if (!getWorkingDirectory().delete()) {
+            LOG.warn("Was not able to delete folder {}", getWorkingDirectory());
+        }
     }
 
     private File sortAndDump(final List<Sample> samples,

File: src/core/src/main/java/org/apache/jmeter/report/processor/SampleWriterConsumer.java
Patch:
@@ -117,6 +117,8 @@ public void stopConsuming() {
         for (int i = 0; i < channelsCount; i++) {
             csvWriters[i].close();
         }
-        getWorkingDirectory().delete();
+        if (!getWorkingDirectory().delete()) {
+            LOG.warn("Was not able to delete folder {}", getWorkingDirectory());
+        }
     }
 }

File: src/core/src/main/java/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -181,7 +181,7 @@ public class MainFrame extends JFrame implements TestStateListener, Remoteable,
     private javax.swing.Timer computeTestDurationTimer = new javax.swing.Timer(1000,
             this::computeTestDuration);
 
-    public AtomicInteger errorOrFatal = new AtomicInteger(0);
+    private AtomicInteger errorOrFatal = new AtomicInteger(0);
 
     private javax.swing.Timer refreshErrorsTimer = new javax.swing.Timer(1000,
             this::refreshErrors);

File: src/components/src/main/java/org/apache/jmeter/reporters/MailerModel.java
Patch:
@@ -110,6 +110,8 @@ public enum MailAuthType {
 
     private static final String DEFAULT_LOGIN_VALUE = ""; //$NON-NLS-1$
 
+    private static final String MAIL_SMTP_CHECK_SERVER_IDENTITY = "mail.smtp.ssl.checkserveridentity"; //$NON-NLS-1$
+
     /** The listener for changes. */
     private transient ChangeListener changeListener;
 
@@ -347,6 +349,7 @@ public void sendMail(String from, List<String> vEmails, String subject,
                 case SSL:
                     props.put(MAIL_SMTP_SOCKETFACTORY_CLASS,
                             "javax.net.ssl.SSLSocketFactory");
+                    props.put(MAIL_SMTP_CHECK_SERVER_IDENTITY, true);
                     break;
                 case TLS:
                     props.put(MAIL_SMTP_STARTTLS,

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/parser/CssParserCacheLoader.java
Patch:
@@ -60,6 +60,7 @@ public URLCollection load(Triple<String, URL, Charset> triple)
                 .setFallbackCharset(charset)
                 .setCSSVersion(ECSSVersion.CSS30)
                 .setCustomErrorHandler(new LoggingCSSParseErrorHandler())
+                .setUseSourceLocation(false)
                 .setCustomExceptionHandler(
                         new CSSParseExceptionCallback(baseUrl));
         if (IGNORE_ALL_CSS_ERRORS) {

File: src/components/src/main/java/org/apache/jmeter/extractor/json/jmespath/JMESPathExtractor.java
Patch:
@@ -92,9 +92,9 @@ public void process() {
         } catch (Exception e) {
             // if something wrong, default value added
             if (log.isDebugEnabled()) {
-                log.debug("Error processing JSON content in {}, message: {}", getName(), e.getLocalizedMessage(), e);
+                log.error("Error processing JSON content in {}, message: {}", getName(), e.getLocalizedMessage(), e);
             } else {
-                log.debug("Error processing JSON content in {}, message: {}", getName(), e.getLocalizedMessage());
+                log.error("Error processing JSON content in {}, message: {}", getName(), e.getLocalizedMessage());
             }
             vars.put(refName, defaultValue);
         }

File: src/core/src/main/java/org/apache/jmeter/report/dashboard/AbstractDataExporter.java
Patch:
@@ -119,8 +119,8 @@ public void setName(String name) {
         this.name = name;
     }
 
-    protected <TProperty> TProperty getPropertyFromConfig(
-            SubConfiguration cfg, String property, TProperty defaultValue, Class<TProperty> clazz)
+    protected <T> T getPropertyFromConfig(
+            SubConfiguration cfg, String property, T defaultValue, Class<T> clazz)
             throws ExportException {
         try {
             return cfg.getProperty(property, defaultValue, clazz);

File: src/components/src/main/java/org/apache/jmeter/assertions/jmespath/JMESPathAssertion.java
Patch:
@@ -39,11 +39,11 @@
 
 /**
  * This is main class for JSON JMESPath Assertion which verifies assertion on
- * previous sample result using JMESPath expression </br>
+ * previous sample result using JMESPath expression
  * <a href="https://github.com/burtcorp/jmespath-java">JMESPath-java sources and
- * doc</a> </br>
- * <a href="http://jmespath.org/">JMESPath tutorial</a>
+ * doc</a>.
  *
+ * @see <a href="http://jmespath.org/">JMESPath website</a>
  * @since 5.2
  */
 public class JMESPathAssertion extends AbstractTestElement implements Serializable, Assertion, TestStateListener {

File: src/components/src/main/java/org/apache/jmeter/assertions/jmespath/gui/JMESPathAssertionGui.java
Patch:
@@ -28,10 +28,10 @@
 
 /**
  * Java class representing GUI for the {@link JMESPathAssertion} component in
- * JMeter</br>
- * This class extends {@link JSONPathAssertionGui} to avoid code duplication
+ * JMeter.
+ * <p>This class extends {@link JSONPathAssertionGui} to avoid code duplication
  * because they work the same way, except that field names are different and
- * some method that we must {@link Override}.
+ * some method that we must {@link Override}.</p>
  *
  * @since 5.2
  */

File: src/components/src/test/java/org/apache/jmeter/assertions/gui/TestJSONPathAssertionGui.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  *
  */
-package org.apache.jmeter.assertions;
+package org.apache.jmeter.assertions.gui;
 
-import org.apache.jmeter.assertions.gui.JSONPathAssertionGui;
+import org.apache.jmeter.assertions.JSONPathAssertion;
 import org.apache.jmeter.testelement.TestElement;
 import org.junit.Test;
 

File: src/core/src/main/java/org/apache/jmeter/save/SaveService.java
Patch:
@@ -156,7 +156,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "5639a75022428edf8ae98232d261d4d27d4950f1"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "1912808b50358c3afce8c54280f173b8fa8ba229"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/core/src/main/java/org/apache/jmeter/save/SaveService.java
Patch:
@@ -156,7 +156,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "5639a75022428edf8ae98232d261d4d27d4950f1"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "1912808b50358c3afce8c54280f173b8fa8ba229"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/components/src/main/java/org/apache/jmeter/assertions/jmespath/JMESPathAssertion.java
Patch:
@@ -55,6 +55,7 @@ public class JMESPathAssertion extends AbstractTestElement implements Serializab
     private static final String EXPECT_NULL = "EXPECT_NULL";
     private static final String INVERT = "INVERT";
     private static final String ISREGEX = "ISREGEX";
+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
 
     /**
      * Used to do a JMESPath query and compute result if the expectedValue matches
@@ -66,9 +67,8 @@ public class JMESPathAssertion extends AbstractTestElement implements Serializab
      */
     private void doAssert(AssertionResult assertionResult, String responseDataAsJsonString, boolean invert)
             throws Exception {
-        ObjectMapper mapper = new ObjectMapper();
         // cast the response data to JsonNode
-        JsonNode input = mapper.readValue(responseDataAsJsonString, JsonNode.class);
+        JsonNode input = OBJECT_MAPPER.readValue(responseDataAsJsonString, JsonNode.class);
         // get the JMESPath expression from the cache
         // if it does not exist, compile it.
         // Expression does not compile if JMESPath expression is empty or null
@@ -77,7 +77,7 @@ private void doAssert(AssertionResult assertionResult, String responseDataAsJson
         JsonNode currentValue = expression.search(input);
         log.debug("JMESPath query {} invoked on response {}. Query result is {}. ", expression,
                 responseDataAsJsonString, currentValue);
-        boolean success = checkResult(mapper, currentValue, assertionResult, invert);
+        boolean success = checkResult(OBJECT_MAPPER, currentValue, assertionResult, invert);
         if (!invert) {
             if (!success) {
                 failAssertion(invert, assertionResult);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/curl/BasicCurlParser.java
Patch:
@@ -562,7 +562,7 @@ public String toString() {
             "Sends the 'Referer Page' information to the HTTP server ");
     private static final CLOptionDescriptor D_COOKIE_OPT = new CLOptionDescriptor("cookie",
             CLOptionDescriptor.ARGUMENT_REQUIRED, COOKIE_OPT, "Pass the data to the HTTP server as a cookie");
-    private static final CLOptionDescriptor D_URL_OPT = new CLOptionDescriptor("url", 
+    private static final CLOptionDescriptor D_URL_OPT = new CLOptionDescriptor("url",
             CLOptionDescriptor.ARGUMENT_REQUIRED, URL_OPT, "url");
     private static final CLOptionDescriptor D_USER_OPT = new CLOptionDescriptor("user",
             CLOptionDescriptor.ARGUMENT_REQUIRED, USER_OPT, "User and password to use for server authentication. ");

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/gui/action/ParseCurlCommandAction.java
Patch:
@@ -209,7 +209,8 @@ private void createTestPlan(ActionEvent e, Request request, String statusText)
         TestPlan testPlan = new TestPlan();
         testPlan.setProperty(TestElement.NAME, "Test Plan");
         testPlan.setProperty(TestElement.GUI_CLASS, TestPlanGui.class.getName());
-        testPlan.setComment("You can run me using: jmeter -Jthreads=<Number of threads> -Jrampup=<rampup in seconds> -Jduration=<duration in seconds> -Jiterations=<Number of iterations, -1 means infinite> -e -o <report output folder>");
+        testPlan.setComment("You can run me using: jmeter -Jthreads=<Number of threads> -Jrampup=<rampup in seconds> -Jduration=<duration in seconds> "
+                + "-Jiterations=<Number of iterations, -1 means infinite> -e -o <report output folder>");
         HashTree tree = new HashTree();
         HashTree testPlanHT = tree.add(testPlan);
         HashTree threadGroupHT = testPlanHT.add(threadGroup);

File: src/jorphan/src/test/java/org/apache/jorphan/exec/TestKeyToolUtils.java
Patch:
@@ -28,15 +28,15 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.commons.lang3.RandomStringUtils;
+import org.apache.jorphan.util.JOrphanUtils;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
 public class TestKeyToolUtils {
 
     private File keystore;
-    private String password = RandomStringUtils.randomAlphabetic(32);
+    private String password = JOrphanUtils.generateRandomAlphanumericPassword(32);
     private int validity = 1;
 
     @Before

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -46,7 +46,6 @@
 
 import org.apache.commons.codec.binary.Base64;
 import org.apache.commons.codec.digest.DigestUtils;
-import org.apache.commons.lang3.RandomStringUtils;
 import org.apache.commons.lang3.time.DateUtils;
 import org.apache.http.conn.ssl.AbstractVerifier;
 import org.apache.jmeter.assertions.Assertion;
@@ -1498,7 +1497,7 @@ private void initDynamicKeyStore() throws IOException, GeneralSecurityException
             }
         }
         if (keyStore == null) { // no existing file or not valid
-            storePassword = RandomStringUtils.randomAlphanumeric(20); // Alphanum to avoid issues with command-line quoting
+            storePassword = JOrphanUtils.generateRandomAlphanumericPassword(20); // Alphanum to avoid issues with command-line quoting
             keyPassword = storePassword; // we use same password for both
             setPassword(storePassword);
             log.info(
@@ -1563,7 +1562,7 @@ private void initJMeterKeyStore() throws IOException, GeneralSecurityException {
             }
         }
         if (keyStore == null) { // no existing file or not valid
-            storePassword = RandomStringUtils.randomAlphanumeric(20); // Alphanum to avoid issues with command-line quoting
+            storePassword = JOrphanUtils.generateRandomAlphanumericPassword(20); // Alphanum to avoid issues with command-line quoting
             keyPassword = storePassword; // we use same password for both
             setPassword(storePassword);
             log.info("Generating standard keypair in {}", CERT_PATH_ABS);

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -1244,7 +1244,8 @@ private boolean hasCorrectInterface(Object obj, Set<Class<?>> klasses) {
      * @param configurations ConfigTestElements in descending priority.
      */
     private void removeValuesFromSampler(HTTPSamplerBase sampler, Collection<ConfigTestElement> configurations) {
-        for (PropertyIterator props = sampler.propertyIterator(); props.hasNext(); ) {
+        PropertyIterator props = sampler.propertyIterator();
+        while (props.hasNext()) {
             JMeterProperty prop = props.next();
             String name = prop.getName();
             String value = prop.getStringValue();

File: src/components/src/main/java/org/apache/jmeter/timers/poissonarrivals/ConstantPoissonProcessGenerator.java
Patch:
@@ -144,7 +144,6 @@ public void generateNext() {
                 }
                 log.info(sb.toString());
             }
-
         }
         events.flip();
         if (batchSize > 1) {

File: src/jorphan/src/main/java/org/apache/commons/cli/avalon/CLOption.java
Patch:
@@ -58,7 +58,7 @@ public final String getArgument() {
      * @return the argument
      */
     public final String getArgument(final int index) {
-        if (null == this.arguments || index < 0 || index >= this.arguments.length) {
+        if (this.arguments == null || index < 0 || index >= this.arguments.length) {
             return null;
         } else {
             return this.arguments[index];

File: src/components/src/main/java/org/apache/jmeter/extractor/json/jmespath/gui/JMESPathExtractorGui.java
Patch:
@@ -35,7 +35,7 @@
 import org.apache.jorphan.gui.JLabeledTextField;
 
 /**
- * GUI for {@link JMESExtractor}
+ * GUI for {@link JMESPathExtractor}
  *
  * @since 5.2
  */

File: src/core/src/main/java/org/apache/jmeter/save/SaveService.java
Patch:
@@ -156,7 +156,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "890bb3bbf003d8f127c3eea786294b65a44f9b19"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "5639a75022428edf8ae98232d261d4d27d4950f1"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/core/src/main/java/org/apache/jmeter/report/dashboard/ReportGenerator.java
Patch:
@@ -361,7 +361,6 @@ private void addGraphConsumer(FilterConsumer nameFilter,
             entryPoint.addSampleConsumer(graph);
         } catch (ClassCastException | IllegalArgumentException |  ReflectiveOperationException | SecurityException ex) {
             String error = String.format(INVALID_CLASS_FMT, className);
-            log.error(error, ex);
             throw new GenerationException(error, ex);
         }
     }

File: src/core/src/main/java/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -494,6 +494,7 @@ private SampleResult processSampler(Sampler current, Sampler parent, JMeterConte
                 // checks the scheduler to stop the iteration
                 stopSchedulerIfNeeded();
             }
+
         } catch (JMeterStopTestException e) { // NOSONAR
             if (log.isInfoEnabled()) {
                 log.info("Stopping Test: {}", e.toString());
@@ -969,7 +970,7 @@ private void delay(List<Timer> timers) {
                 if (scheduler) {
                     // We reduce pause to ensure end of test is not delayed by a sleep ending after test scheduled end
                     // See Bug 60049
-                    totalDelay = TIMER_SERVICE.adjustDelay(totalDelay, endTime);
+                    totalDelay = TIMER_SERVICE.adjustDelay(totalDelay, endTime, false);
                     if (totalDelay < 0) {
                         log.debug("The delay would be longer than the scheduled period, so stop thread now.");
                         running = false;

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/influxdb/InfluxdbBackendListenerClient.java
Patch:
@@ -316,6 +316,7 @@ public void handleSampleResults(List<SampleResult> sampleResults, BackendListene
     public void setupTest(BackendListenerContext context) throws Exception {
         String influxdbMetricsSender = context.getParameter("influxdbMetricsSender");
         String influxdbUrl = context.getParameter("influxdbUrl");
+        String influxdbToken = context.getParameter("influxdbToken");
         summaryOnly = context.getBooleanParameter("summaryOnly", false);
         samplersRegex = context.getParameter("samplersRegex", "");
         application = AbstractInfluxdbMetricsSender.tagToStringValue(context.getParameter("application", ""));
@@ -366,7 +367,7 @@ public void setupTest(BackendListenerContext context) throws Exception {
 
         Class<?> clazz = Class.forName(influxdbMetricsSender);
         this.influxdbMetricsManager = (InfluxdbMetricsSender) clazz.getDeclaredConstructor().newInstance();
-        influxdbMetricsManager.setup(influxdbUrl);
+        influxdbMetricsManager.setup(influxdbUrl, influxdbToken);
         samplersToFilter = Pattern.compile(samplersRegex);
         addAnnotation(true);
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/influxdb/InfluxdbMetricsSender.java
Patch:
@@ -57,9 +57,10 @@ final class MetricTuple {
     /**
      * Setup sender using influxDBUrl
      * @param influxDBUrl url pointing to influxdb
+     * @param influxDBToken authorization token to influxdb 2.0
      * @throws Exception when setup fails
      */
-    public void setup(String influxDBUrl) throws Exception; // NOSONAR
+    public void setup(String influxDBUrl, String influxDBToken) throws Exception; // NOSONAR
 
     /**
      * Destroy sender

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/influxdb/UdpMetricsSender.java
Patch:
@@ -56,7 +56,7 @@ class UdpMetricsSender extends AbstractInfluxdbMetricsSender {
     }
 
     @Override
-    public void setup(String influxdbUrl) throws Exception {
+    public void setup(String influxdbUrl, String influxDBToken) throws Exception {
         try {
             log.debug("Setting up with url:{}", influxdbUrl);
             String[] urlComponents = influxdbUrl.split(":");

File: src/components/src/main/java/org/apache/jmeter/timers/ConstantThroughputTimer.java
Patch:
@@ -39,7 +39,7 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * This class implements a constant throughput timer. A Constant Throughtput
+ * This class implements a constant throughput timer. A Constant Throughput
  * Timer paces the samplers under its influence so that the total number of
  * samples per unit of time approaches a given constant as much as possible.
  *
@@ -98,7 +98,7 @@ public String toString() {
     //For calculating throughput across all threads
     private static final ThroughputInfo allThreadsInfo = new ThroughputInfo();
 
-    //For holding the ThrougputInfo objects for all ThreadGroups. Keyed by AbstractThreadGroup objects
+    //For holding the ThroughputInfo objects for all ThreadGroups. Keyed by AbstractThreadGroup objects
     private static final ConcurrentMap<AbstractThreadGroup, ThroughputInfo> threadGroupsInfoMap =
             new ConcurrentHashMap<>();
 

File: src/core/src/main/java/org/apache/jmeter/JMeter.java
Patch:
@@ -1124,7 +1124,7 @@ public static void convertSubTree(HashTree tree) {
      * </ul>
      * THIS IS INTERNAL JMETER API and should be used with care
      * @param tree The {@link HashTree} to convert
-     * @param cloneAtEnd  boolean wether we clone the tree at end
+     * @param cloneAtEnd  boolean whether we clone the tree at end
      * @return HashTree the output {@link HashTree} to use
      */
     public static HashTree convertSubTree(HashTree tree, boolean cloneAtEnd) {

File: src/core/src/main/java/org/apache/jmeter/control/gui/TestFragmentControllerGui.java
Patch:
@@ -87,7 +87,7 @@ public Collection<String> getMenuCategories() {
     }
 
     /**
-     * Redefined to remove change parent and inserrt parent menu
+     * Redefined to remove change parent and insert parent menu
      * @see org.apache.jmeter.control.gui.AbstractControllerGui#createPopupMenu()
      */
     @Override

File: src/core/src/main/java/org/apache/jmeter/engine/JMeterEngine.java
Patch:
@@ -46,7 +46,7 @@ default void stopTest() {
     }
     /**
      *
-     * @param now boolean that tell wether stop is immediate (interrupt) or not (wait for current sample end)
+     * @param now boolean that tell whether stop is immediate (interrupt) or not (wait for current sample end)
      */
     void stopTest(boolean now);
 

File: src/core/src/main/java/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -202,7 +202,7 @@ public static boolean insertLoadedTree(final int id, final HashTree tree, final
         guiInstance.getMainFrame().getTree().setSelectionPath(
                 new TreePath(((JMeterTreeNode) newTree.getArray()[0]).getPath()));
         final HashTree subTree = guiInstance.getCurrentSubTree();
-        // Send different event wether we are merging a test plan into another test plan,
+        // Send different event whether we are merging a test plan into another test plan,
         // or loading a testplan from scratch
         ActionEvent actionEvent =
             new ActionEvent(subTree.get(subTree.getArray()[subTree.size() - 1]), id,

File: src/core/src/main/java/org/apache/jmeter/gui/util/FilePanelEntry.java
Patch:
@@ -55,7 +55,7 @@ public class FilePanelEntry extends HorizontalPanel implements ActionListener {
 
     private boolean onlyDirectories = false;
 
-    // Mainly needed for unit test Serialisable tests
+    // Mainly needed for unit test Serializable tests
     public FilePanelEntry() {
         this(JMeterUtils.getResString("file_visualizer_filename")); //$NON-NLS-1$
     }

File: src/jorphan/src/main/java/org/apache/jorphan/collections/HashTree.java
Patch:
@@ -744,7 +744,7 @@ public HashTree remove(Object key) {
     }
 
     /**
-     * Recurses down into the HashTree stucture using each subsequent key in the
+     * Recurses down into the HashTree structure using each subsequent key in the
      * array of keys, and returns the Set of keys of the HashTree object at the
      * end of the recursion. If the HashTree represented a file system, this
      * would be like getting a list of all the files in a directory specified by
@@ -762,7 +762,7 @@ public Collection<?> list(Object[] treePath) {
     }
 
     /**
-     * Recurses down into the HashTree stucture using each subsequent key in the
+     * Recurses down into the HashTree structure using each subsequent key in the
      * List of keys, and returns the Set of keys of the HashTree object at the
      * end of the recursion. If the HashTree represented a file system, this
      * would be like getting a list of all the files in a directory specified by
@@ -823,7 +823,7 @@ public Object[] getArray(Object key) {
     }
 
     /**
-     * Recurses down into the HashTree stucture using each subsequent key in the
+     * Recurses down into the HashTree structure using each subsequent key in the
      * array of keys, and returns an array of keys of the HashTree object at the
      * end of the recursion. If the HashTree represented a file system, this
      * would be like getting a list of all the files in a directory specified by

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/Cookie.java
Patch:
@@ -54,14 +54,14 @@ public class Cookie extends AbstractTestElement implements Serializable {
     private static final int DEFAULT_VERSION = 1;
 
     /**
-     * create the coookie
+     * create the cookie
      */
     public Cookie() {
         this("","","","",false,0,false,false);
     }
 
     /**
-     * create the coookie
+     * create the cookie
      * @param name name of the cookie
      * @param value value of the cookie
      * @param domain domain for which the cookie is valid
@@ -75,7 +75,7 @@ public Cookie(String name, String value, String domain, String path, boolean sec
     }
 
     /**
-     * create the coookie
+     * create the cookie
      * @param name name of the cookie
      * @param value value of the cookie
      * @param domain domain for which the cookie is valid

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/gui/HttpMirrorControlGui.java
Patch:
@@ -217,7 +217,7 @@ public void clearGui(){
     }
 
     /**
-     * Redefined to remove change parent and inserrt parent menu
+     * Redefined to remove change parent and insert parent menu
      * @see org.apache.jmeter.control.gui.AbstractControllerGui#createPopupMenu()
      */
     @Override

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/gui/action/ParseCurlCommandAction.java
Patch:
@@ -240,7 +240,7 @@ private void createTestPlan(ActionEvent e, Request request, String statusText)
         guiPackage.getMainFrame().getTree()
                 .setSelectionPath(new TreePath(((JMeterTreeNode) newTree.getArray()[0]).getPath()));
         final HashTree subTree = guiPackage.getCurrentSubTree();
-        // Send different event wether we are merging a test plan into another test
+        // Send different event whether we are merging a test plan into another test
         // plan,
         // or loading a testplan from scratch
         ActionEvent actionEvent = new ActionEvent(subTree.get(subTree.getArray()[subTree.size() - 1]), e.getID(),

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/HttpReplyHdr.java
Patch:
@@ -177,7 +177,7 @@ public static String formFound() {
      * @return The header in a string;
      */
     public static String formMethod() {
-        return formError("303 Method unseported", "Method unseported");
+        return formError("303 Method unsupported", "Method unsupported");
     }
 
     /**
@@ -195,7 +195,7 @@ public static String formNotModified() {
      * @return The header in a string;
      */
     public static String formUnauthorized() {
-        return formError("401 Unathorized", "Unathorized use of this service");
+        return formError("401 Unauthorized", "Unauthorized use of this service");
     }
 
     /**

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -1218,7 +1218,7 @@ private void buildNodesModel(JMeterTreeNode node, String parentName, int level)
     }
 
     /**
-     * Redefined to remove change parent and inserrt parent menu
+     * Redefined to remove change parent and insert parent menu
      * @see org.apache.jmeter.control.gui.AbstractControllerGui#createPopupMenu()
      */
     @Override

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -1533,7 +1533,7 @@ protected String setupHttpEntityEnclosingRequestData(HttpEntityEnclosingRequestB
             Header contentTypeHeader = entityEnclosingRequest.getFirstHeader(HTTPConstants.HEADER_CONTENT_TYPE);
             boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.getValue() != null && contentTypeHeader.getValue().length() > 0;
             // If there are no arguments, we can send a file as the body of the request
-            // TODO: needs a multiple file upload scenerio
+            // TODO: needs a multiple file upload scenario
             if(!hasArguments() && getSendFileAsPostBody()) {
                 // If getSendFileAsPostBody returned true, it's sure that file is not null
                 HTTPFileArg file = files[0];

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/sampler/PostWriter.java
Patch:
@@ -295,7 +295,7 @@ public void setHeaders(URLConnection connection, HTTPSamplerBase sampler) throws
                     // Allow the mimetype of the file to control the content type
                     // This is not obvious in GUI if you are not uploading any files,
                     // but just sending the content of nameless parameters
-                    // TODO: needs a multiple file upload scenerio
+                    // TODO: needs a multiple file upload scenario
                     if(!hasContentTypeHeader) {
                         HTTPFileArg file = files.length > 0? files[0] : null;
                         if(file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/JMSProperties.java
Patch:
@@ -44,14 +44,14 @@ public class JMSProperties extends AbstractTestElement implements Serializable {
     public static final String JMS_PROPERTIES = "JMSProperties.properties"; //$NON-NLS-1$
 
     /**
-     * Create a new JmsPropertys object with no JmsProperties
+     * Create a new JmsProperties object with no JmsProperties
      */
     public JMSProperties() {
         setProperty(new CollectionProperty(JMS_PROPERTIES, new ArrayList<JMSProperty>()));
     }
 
     /**
-     * Get the JmsPropertiess.
+     * Get the JmsProperties.
      *
      * @return the JmsProperties
      */

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
Patch:
@@ -264,7 +264,7 @@ public SampleResult sample() {
     }
 
     /**
-     * Fills in result and decide wether to reconnect or not depending on
+     * Fills in result and decide whether to reconnect or not depending on
      * checkForReconnect and underlying {@link JMSException#getErrorCode()}
      *
      * @param result

File: src/components/src/main/java/org/apache/jmeter/visualizers/SearchTextExtension.java
Patch:
@@ -119,7 +119,7 @@ private void executeAndShowTextFind() {
 
     /**
      *
-     * @return {@link JToolBar} the search toolbat component
+     * @return {@link JToolBar} the search toolbar component
      */
     public JToolBar getSearchToolBar() {
         return toolBar;

File: src/components/src/test/java/org/apache/jmeter/assertions/XPathAssertionTest.java
Patch:
@@ -454,7 +454,7 @@ public void testWrongXpathMethod() {
         testLog.debug("isError() {} isFailure() {}", res.isError(), res.isFailure());
         testLog.debug("failure message: {}", res.getFailureMessage());
         assertTrue("Should not be an error", res.isError());
-        assertTrue("Un transformerException should be throw",
+        assertTrue("A TransformerException should be thrown",
                 res.getFailureMessage().contains("TransformerException"));
     }
     @Test
@@ -465,7 +465,7 @@ public void testWithoutSuitableNamespaces() {
         AssertionResult res = assertion.getResult(jmctx.getPreviousResult());
         log.debug(" res {}", res.isError());
         log.debug(" failure {}", res.getFailureMessage());
-        assertTrue("When the user give namespaces, un transformerException should be throw",
+        assertTrue("When the user activates namespaces, a TransformerException should be thrown",
                 res.getFailureMessage().contains("TransformerException"));
     }
 }

File: src/core/src/main/java/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -361,7 +361,7 @@ public boolean stopThread(String threadName, boolean now) {
     }
 
     /**
-     * Hard Stop JMeterThread third and interrupt JVM Thread if interrupt is true
+     * Hard Stop JMeterThread thread and interrupt JVM Thread if interrupt is {@code true}
      * @param jmeterThread {@link JMeterThread}
      * @param jvmThread {@link Thread}
      * @param interrupt Interrupt thread or not

File: src/core/src/main/java/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -263,7 +263,7 @@ public void triggerEndOfLoop() {
             // See Bug 56811
             // triggerEndOfLoop is called when error occurs to end Main Loop
             // in this case normal workflow doesn't happen, so we need
-            // to notify the child of TransactionController and
+            // to notify the children of TransactionController and
             // update them with SubSamplerResult
             if(subSampler instanceof TransactionSampler) {
                 TransactionSampler tc = (TransactionSampler) subSampler;

File: src/components/src/main/java/org/apache/jmeter/assertions/XPath2Assertion.java
Patch:
@@ -71,7 +71,7 @@ public AssertionResult getResult(SampleResult response) {
         } catch (CompletionException|SaxonApiException e) { // NOSONAR We handle exception within result failure message
             result.setError(true);
             // CompletionException happens if caching fails
-            result.setFailureMessage("Exception occured computing assertion with XPath:" + getXPathString() + ", error:" + e.getMessage());
+            result.setFailureMessage("Exception occurred computing assertion with XPath:" + getXPathString() + ", error:" + e.getMessage());
             return result;
         }
         return result;

File: src/components/src/main/java/org/apache/jmeter/assertions/gui/XPath2Panel.java
Patch:
@@ -166,7 +166,7 @@ public void setNegated(boolean negated) {
     }
 
     /**
-     * Negated chechbox
+     * Negated checkbox
      *
      * @return JCheckBox
      */

File: src/components/src/main/java/org/apache/jmeter/assertions/gui/XPathPanel.java
Patch:
@@ -122,7 +122,7 @@ public void setNegated(boolean negated) {
     }
 
     /**
-     * Negated chechbox
+     * Negated checkbox
      *
      * @return JCheckBox
      */

File: src/components/src/main/java/org/apache/jmeter/sampler/TestAction.java
Patch:
@@ -65,7 +65,7 @@ public class TestAction extends AbstractSampler implements Interruptible {
      */
     public static final int RESTART_NEXT_LOOP = 3;
     /**
-     * Start next iteration of Current Looop
+     * Start next iteration of Current Loop
      */
     public static final int START_NEXT_ITERATION_CURRENT_LOOP = 4;
     /**

File: src/components/src/main/java/org/apache/jmeter/visualizers/SearchTextExtension.java
Patch:
@@ -220,7 +220,7 @@ public void resetTextToFind() {
     }
 
     private Pattern createPattern(String textToFind) {
-        // desactivate or not specials regexp char
+        // deactivate or not specials regexp char
         String textToFindQ = regexpChkBox.isSelected() ? textToFind : Pattern.quote(textToFind);
         return caseChkBox.isSelected() ? Pattern.compile(textToFindQ) :
             Pattern.compile(textToFindQ, Pattern.CASE_INSENSITIVE);

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
Patch:
@@ -73,7 +73,7 @@ public class BackendListenerGui extends AbstractListenerGui implements ActionLis
     /** A panel allowing the user to set arguments for this test. */
     private ArgumentsPanel argsPanel;
 
-    /** The current className of the Backend listenenr **/
+    /** The current className of the Backend listener **/
     private String className;
 
 

File: src/components/src/main/java/org/apache/jmeter/visualizers/backend/influxdb/AbstractInfluxdbMetricsSender.java
Patch:
@@ -34,7 +34,7 @@ static final String tagToStringValue(String s) {
 
     /**
      * For field always use a backslash character
-     * \ to escape " caractere
+     * \ to escape " character
      */
     static final String fieldToStringValue(String s) {
         return s.trim().replaceAll("\"", "\\\\\"");

File: src/components/src/test/java/org/apache/jmeter/assertions/XPath2AssertionTest.java
Patch:
@@ -207,7 +207,7 @@ public void testBadXpathFormat() throws FactoryConfigurationError {
         response.setResponseData(xmlDoc, "UTF-8");
         AssertionResult res = assertion.getResult(response);
         assertTrue("When format of xpath is wrong, the test should failed",res.isError());
-        assertTrue(res.getFailureMessage().contains("Exception occured computing assertion with XPath"));
+        assertTrue(res.getFailureMessage().contains("Exception occurred computing assertion with XPath"));
     }
 
     @Test

File: src/components/src/test/java/org/apache/jmeter/assertions/XPathAssertionTest.java
Patch:
@@ -465,7 +465,7 @@ public void testWithoutSuitableNamespaces() {
         AssertionResult res = assertion.getResult(jmctx.getPreviousResult());
         log.debug(" res {}", res.isError());
         log.debug(" failure {}", res.getFailureMessage());
-        assertTrue("When the user give namspaces, un transformerException should be throw",
+        assertTrue("When the user give namespaces, un transformerException should be throw",
                 res.getFailureMessage().contains("TransformerException"));
     }
 }

File: src/core/src/main/java/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -86,7 +86,7 @@ public class TransactionController extends GenericController implements SampleLi
     private transient int noFailingSamples;
 
     /**
-     * Cumulated pause time to excluse timer and post/pre processor times
+     * Cumulated pause time to exclude timer and post/pre processor times
      * Only used in NON parent Mode
      */
     private transient long pauseTime;
@@ -263,7 +263,7 @@ public void triggerEndOfLoop() {
             // See Bug 56811
             // triggerEndOfLoop is called when error occurs to end Main Loop
             // in this case normal workflow doesn't happen, so we need
-            // to notify the childs of TransactionController and
+            // to notify the child of TransactionController and
             // update them with SubSamplerResult
             if(subSampler instanceof TransactionSampler) {
                 TransactionSampler tc = (TransactionSampler) subSampler;
@@ -292,7 +292,7 @@ protected void notifyListeners() {
         } else {
             SampleEvent event = new SampleEvent(res, threadContext.getThreadGroup().getName(),threadVars, true);
             // We must set res to null now, before sending the event for the transaction,
-            // so that we can ignore that event in our sampleOccured method
+            // so that we can ignore that event in our sampleOccurred method
             res = null;
             lnf.notifyListeners(event, pack.getSampleListeners());
         }

File: src/core/src/main/java/org/apache/jmeter/gui/action/SearchTreeCommand.java
Patch:
@@ -44,7 +44,7 @@ public class SearchTreeCommand extends AbstractAction {
      * This method tries to find a JFrame ancestor from the specified source in
      * order to be the parent of the search dialog.<br>
      * With no parent set the search dialog might be hidden by the main JFrame when
-     * focus is transfered to that JFrame.
+     * focus is transferred to that JFrame.
      * </p>
      * <p>
      * If no parent if found, then we give up and build a search dialog with no

File: src/core/src/main/java/org/apache/jmeter/gui/util/TristateCheckBox.java
Patch:
@@ -302,7 +302,7 @@ private static class TristateCheckBoxIcon implements Icon, UIResource, Serializa
         private final int iconWidth;
 
         public TristateCheckBoxIcon() {
-            // Assume that the UI has not changed since the checkbos was created
+            // Assume that the UI has not changed since the checkbox was created
             UIDefaults defaults = UIManager.getLookAndFeelDefaults();
             final Icon icon = (Icon) defaults.get("CheckBox.icon");
             iconHeight = icon.getIconHeight();

File: src/core/src/main/java/org/apache/jmeter/report/core/SampleMetadata.java
Patch:
@@ -168,7 +168,7 @@ public int getColumnCount() {
      *            based)
      * @return The column name of the ith column
      * @throws IndexOutOfBoundsException
-     *             If the requested columln does not exist (&lt; 0 or &gt;
+     *             If the requested column does not exist (&lt; 0 or &gt;
      *             <code>getColumnCount()</code>)
      */
     public String getColumnName(int i) {

File: src/core/src/main/java/org/apache/jmeter/report/processor/SampleConsumer.java
Patch:
@@ -59,10 +59,10 @@ public interface SampleConsumer extends SampleProcessor {
      * channel.
      *
      * @param sampleMetadata
-     *            The sample metadata that are beeing consumed for the
+     *            The sample metadata that are being consumed for the
      *            associated channel
      * @param channel
-     *            The channel whose sample metadata are beeing defined
+     *            The channel whose sample metadata are being defined
      */
     void setConsumedMetadata(SampleMetadata sampleMetadata, int channel);
 

File: src/core/src/main/java/org/apache/jmeter/report/processor/graph/AbstractGraphValueSelector.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.jmeter.samplers.SampleResult;
 
 /**
- * Base class allowing to select wether we ignore or not TC Sample Results
+ * Base class allowing to select whether we ignore or not TC Sample Results
  */
 abstract class AbstractGraphValueSelector implements GraphValueSelector {
     private boolean ignoreTransactionController;

File: src/core/src/main/java/org/apache/jmeter/reporters/Summariser.java
Patch:
@@ -64,7 +64,7 @@ public class Summariser extends AbstractTestElement
 
     /*
      * N.B. NoThreadClone is used to ensure that the testStarted() methods will share the same
-     * instance as the sampleOccured() methods, so the testStarted() method can fetch the
+     * instance as the sampleOccurred() methods, so the testStarted() method can fetch the
      * Totals accumulator object for the samples to be stored in.
      */
 

File: src/core/src/main/java/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -372,7 +372,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
             IS_XML = true;
         } else {
             if (!CSV.equals(howToSave)) {
-                log.warn("{} has unexepected value: '{}' - assuming 'csv' format", OUTPUT_FORMAT_PROP, howToSave);
+                log.warn("{} has unexpected value: '{}' - assuming 'csv' format", OUTPUT_FORMAT_PROP, howToSave);
             }
             IS_XML = false;
         }

File: src/core/src/main/java/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -361,7 +361,7 @@ public boolean stopThread(String threadName, boolean now) {
     }
 
     /**
-     * Hard Stop JMeterThread thrd and interrupt JVM Thread if interrupt is true
+     * Hard Stop JMeterThread third and interrupt JVM Thread if interrupt is true
      * @param jmeterThread {@link JMeterThread}
      * @param jvmThread {@link Thread}
      * @param interrupt Interrupt thread or not

File: src/functions/src/main/java/org/apache/jmeter/functions/StringToFile.java
Patch:
@@ -50,7 +50,7 @@
  *  <li>append (true/false)(optional)</li>
  *  <li>file encoding (optional)</li>
  * </ul>
- * Returns: true if ok , false if an error occured
+ * Returns: true if ok , false if an error occurred
  *
  * @since 5.2
  */

File: src/functions/src/main/java/org/apache/jmeter/functions/TimeFunction.java
Patch:
@@ -68,7 +68,7 @@ public class TimeFunction extends AbstractFunction {
                 JMeterUtils.getPropDefault("time.USER2","")); //$NON-NLS-1$
     }
 
-    // Ensure that these are set, even if no paramters are provided
+    // Ensure that these are set, even if no parameters are provided
     private String format   = ""; //$NON-NLS-1$
     private String variable = ""; //$NON-NLS-1$
 

File: src/functions/src/main/java/org/apache/jmeter/functions/TimeShift.java
Patch:
@@ -71,7 +71,7 @@ public class TimeShift extends AbstractFunction {
             JMeterUtils.getResString("date_to_shift"), JMeterUtils.getResString("value_to_shift"), JMeterUtils.getResString("locale_format"),
             JMeterUtils.getResString("function_name_paropt"));
 
-    // Ensure that these are set, even if no paramters are provided
+    // Ensure that these are set, even if no parameters are provided
     private String format = ""; //$NON-NLS-1$
     private CompoundVariable dateToShiftCompound; // $NON-NLS-1$
     private CompoundVariable amountToShiftCompound; // $NON-NLS-1$

File: src/jorphan/src/main/java/org/apache/jorphan/gui/layout/VerticalLayout.java
Patch:
@@ -98,7 +98,7 @@ public VerticalLayout() {
      * to the top with the specified vgap.
      *
      * @param vgap
-     *            an int value indicating the vertical seperation of the
+     *            an int value indicating the vertical separation of the
      *            components
      */
     public VerticalLayout(int vgap) {
@@ -110,7 +110,7 @@ public VerticalLayout(int vgap) {
      * specified vgap and horizontal alignment.
      *
      * @param vgap
-     *            an int value indicating the vertical seperation of the
+     *            an int value indicating the vertical separation of the
      *            components
      * @param alignment
      *            an int value which is one of <code>RIGHT, LEFT,
@@ -126,7 +126,7 @@ public VerticalLayout(int vgap, int alignment) {
      * alignment and anchoring
      *
      * @param vgap
-     *            an int value indicating the vertical seperation of the
+     *            an int value indicating the vertical separation of the
      *            components
      * @param alignment
      *            an int value which is one of <code>RIGHT, LEFT, CENTER,

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -401,7 +401,7 @@ public void addFile(String authFile) throws IOException {
                         String pass = tokens[2];
                         String domain;
                         String realm;
-                        if (tokens.length > 3){ // Allow for old format file without the extra columnns
+                        if (tokens.length > 3){ // Allow for old format file without the extra columns
                             domain = tokens[3];
                             realm = tokens[4];
                         } else {

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/curl/BasicCurlParser.java
Patch:
@@ -260,7 +260,7 @@ public int getLimitRate() {
         }
 
         /**
-         * Tranform the bandwidth to cps value (byte/s), cps =
+         * Transform the bandwidth to cps value (byte/s), cps =
          * bandwidth*1024/8, the unit of bandwidth in JMeter is measured in kbit/s. And
          * the speed in Curl is measured in bytes/second, so the conversion formula is
          * cps=limitRate*1024

File: src/protocol/jms/src/main/java/org/apache/jmeter/protocol/jms/sampler/TimeoutEnabledQueueRequestor.java
Patch:
@@ -58,7 +58,7 @@ public class TimeoutEnabledQueueRequestor {
      * <code>DUPS_OK_ACKNOWLEDGE</code>.
      *
      * @param session the <code>QueueSession</code> the queue belongs to, session will not be closed by {@link TimeoutEnabledQueueRequestor}
-     * @param queue the queue to performthe request/reply call on
+     * @param queue the queue to perform the request/reply call on
      *
      * @exception JMSException
      *                if the JMS provider fails to create the

File: src/protocol/mail/src/main/java/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java
Patch:
@@ -94,7 +94,7 @@ public class SmtpPanel extends JPanel {
     private SecuritySettingsPanel securitySettingsPanel;
 
     /**
-     * Creates new form SmtpPanel, standard constructer. Calls
+     * Creates new form SmtpPanel, standard constructor. Calls
      * initComponents();.
      */
     public SmtpPanel() {

File: src/protocol/mail/src/main/java/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpSamplerGui.java
Patch:
@@ -41,7 +41,7 @@ public class SmtpSamplerGui extends AbstractSamplerGui {
     private SmtpPanel smtpPanel;
 
     /**
-     * Creates new SmtpSamplerGui, standard constructer. Calls init();
+     * Creates new SmtpSamplerGui, standard constructor. Calls init();
      */
     public SmtpSamplerGui() {
         init();

File: src/components/src/main/java/org/apache/jmeter/assertions/BSFAssertion.java
Patch:
@@ -43,9 +43,7 @@ public AssertionResult getResult(SampleResult response) {
             processFileOrScript(mgr);
             result.setError(false);
         } catch (BSFException e) {
-            if (log.isWarnEnabled()) {
-                log.warn("Problem in BSF script {}", e.toString());
-            }
+            log.warn("Problem in BSF script", e);
             result.setFailure(true);
             result.setError(true);
             result.setFailureMessage(e.toString());

File: src/core/src/main/java/org/apache/jmeter/report/config/ReportGeneratorConfiguration.java
Patch:
@@ -730,9 +730,8 @@ public static ReportGeneratorConfiguration loadFromProperties(
     public static Map<String, Long[]> getApdexPerTransactionParts(String apdexPerTransaction) {
         Map <String, Long[]> specificApdexes = new HashMap<>();
         if (StringUtils.isEmpty(apdexPerTransaction) ||
-                apdexPerTransaction.trim().length()==0) {
-            log.info(
-                    "apdex_per_transaction : {} is empty, not APDEX per transaction customization");
+                apdexPerTransaction.trim().length() == 0) {
+            log.info("apdex_per_transaction is empty, not APDEX per transaction customization");
         } else {
             // data looks like : sample(\d+):1000|2000;samples12:3000|4000;scenar01-12:5000|6000
             String[] parts = apdexPerTransaction.split("[;]");

File: src/core/src/main/java/org/apache/jmeter/report/dashboard/TemplateVisitor.java
Patch:
@@ -89,8 +89,9 @@ public FileVisitResult preVisitDirectory(Path file, BasicFileAttributes attrs)
         try {
             Files.copy(file, newDir);
         } catch (FileAlreadyExistsException ex) {
-            LOGGER.info("Copying folder from '{}' to '{}', got message:{}, found non empty folder with following content {}, will be ignored",
-                    file, newDir, newDir.toFile().listFiles());
+            LOGGER.info("Copying folder from '{}' to '{}', got message: " +
+                            "{}, found non empty folder with following content {}, will be ignored",
+                    file, newDir, ex.getMessage(), newDir.toFile().listFiles());
         }
         return FileVisitResult.CONTINUE;
     }

File: src/functions/src/main/java/org/apache/jmeter/functions/CSVRead.java
Patch:
@@ -121,7 +121,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
                     FileWrapper.getCurrentRow(fileName), e.toString());
         }
 
-        log.debug("execute value: {}");
+        log.debug("execute value: {}", myValue);
 
         return myValue;
     }

File: src/components/src/test/java/org/apache/jmeter/visualizers/backend/SamplerMetricFixedModeTest.java
Patch:
@@ -20,9 +20,6 @@
 
 import static org.junit.Assert.assertEquals;
 
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-
 import org.apache.jmeter.samplers.SampleResult;
 import org.junit.Before;
 import org.junit.Test;

File: src/components/src/test/java/org/apache/jmeter/visualizers/backend/SamplerMetricTimedModeTest.java
Patch:
@@ -20,9 +20,6 @@
 
 import static org.junit.Assert.assertEquals;
 
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-
 import org.apache.jmeter.samplers.SampleResult;
 import org.junit.Before;
 import org.junit.Test;

File: src/protocol/http/src/test/java/org/apache/jmeter/protocol/http/sampler/SamplingNamingTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jorphan.test.JMeterSerialTest;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -48,6 +49,7 @@ public static final String[] getImplementations() {
     }
 
     @Test
+    @Ignore(value = "Test produces: We should have at least one sample result, we had none too often")
     @Parameters(name = "getImplementations")
     public void testBug63364() {
         TestPlan plan = new TestPlan();

File: src/core/src/test/java/org/apache/jmeter/junit/JMeterTestUtils.java
Patch:
@@ -28,7 +28,7 @@
 
 public class JMeterTestUtils {
     // Used by findTestFile
-    private static String filePrefix;
+    private static volatile String filePrefix;
     private JMeterTestUtils() {
         super();
     }
@@ -37,7 +37,7 @@ private JMeterTestUtils() {
      * @return file prefix which is path from jmeter home to jmeter.properties
      */
     public static String setupJMeterHome() {
-        if (JMeterUtils.getJMeterProperties() == null) {
+        if (filePrefix == null) {
             String prefix = ".";
             for (int i = 0; i < 5 && !new File(prefix, "bin/jmeter.properties").canRead(); i++) {
                 prefix = "../" + prefix;

File: src/protocol/http/src/main/java/org/apache/jmeter/protocol/http/curl/BasicCurlParser.java
Patch:
@@ -439,7 +439,7 @@ public String getCaCert() {
          * the options which work for SSL
          * @param caCert cert of the CA
          */
-        public void setCacert(String caCert) {
+        public void setCaCert(String caCert) {
             this.caCert = caCert;
         }
 
@@ -725,7 +725,7 @@ public Request parse(String commandLine) {
                     String authOption = option.getDescriptor().getName();
                     setAuthMechanism(authOption, request.getAuthorization());
                 } else if (SSL_OPT.contains(option.getDescriptor().getId())) {
-                    request.setCacert(option.getDescriptor().getName());
+                    request.setCaCert(option.getDescriptor().getName());
                 } else if (option.getDescriptor().getId() == GET_OPT) {
                     isPostToGet = true;
                 } else if (option.getDescriptor().getId() == DNS_OPT) {

File: src/functions/src/test/java/org/apache/jmeter/functions/PackageTest.java
Patch:
@@ -131,7 +131,7 @@ public void setUp() {
     }
 
     public void BSH1() throws Exception {
-        String fn = "testfiles/BeanShellTest.bsh";
+        String fn = "src/test/resources/org/apache/jmeter/functions/testfiles/BeanShellTest.bsh";
         try {
             BSHFParams(null, null, null);
             fail("Expected InvalidVariableException");
@@ -166,7 +166,7 @@ public void BSH1() throws Exception {
         assertEquals(log.getClass().getName(), bsh.execute());
 
         // Check source works
-        bsh = BSHFParams("source (\"testfiles/BeanShellTest.bsh\")", null, null);
+        bsh = BSHFParams("source (\"" + fn + "\")", null, null);
         assertEquals("9876", bsh.execute());
 
         // Check persistence

File: src/protocol/http/org/apache/jmeter/protocol/http/curl/BasicCurlParser.java
Patch:
@@ -360,7 +360,8 @@ public Map<String, String> getProxyServer() {
         }
 
         /**
-         * @param proxyServer set the map of proxy server
+         * @param key key
+         * @param value value
          */
         public void setProxyServer(String key, String value) {
             this.proxyServer.put(key, value);
@@ -467,7 +468,7 @@ public double getMaxTime() {
         }
 
         /**
-         * @param the max time of connection
+         * @param maxTime max time of connection
          */
         public void setMaxTime(double maxTime) {
             this.maxTime = maxTime;

File: test/src/org/apache/jmeter/protocol/http/control/TestCacheManagerBase.java
Patch:
@@ -264,9 +264,9 @@ public void testPrivateCache() throws Exception {
         assertNotNull("Should find entry", getThreadCacheEntry(LOCAL_HOST));
         assertFalse("Should not find valid entry", this.cacheManager.inCache(url));
     }
-    
+
     @Test
-    public void testNoCacheControlNoMaxAgeNoExpireNoCacheControl() throws Exception {
+    public void testNoCacheControlNoMaxAgeNoExpire() throws Exception {
         this.cacheManager.setUseExpires(true);
         this.cacheManager.testIterationStart(null);
         assertNull("Should not find entry", getThreadCacheEntry(LOCAL_HOST));

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -254,7 +254,7 @@ private void setCache(String lastModified, String cacheControl, String expires,
                 expiresDate = extractExpiresDateFromExpires(expires);
             }
             // if no-cache is present, ensure that expiresDate remains null, which forces revalidation
-            if(cacheControl != null && !cacheControl.contains("no-cache")) {
+            if(cacheControl == null || !cacheControl.contains("no-cache")) {
                 expiresDate = extractExpiresDateFromCacheControl(lastModified,
                         cacheControl, expires, etag, url, date, maxAge, expiresDate);
                 // else expiresDate computed in (expires!=null) condition is used
@@ -298,7 +298,7 @@ private Date extractExpiresDateFromCacheControl(String lastModified,
             String cacheControl, String expires, String etag, String url,
             String date, final String maxAge, Date defaultExpiresDate) {
         // the max-age directive overrides the Expires header,
-        if (cacheControl.contains(maxAge)) {
+        if (cacheControl != null && cacheControl.contains(maxAge)) {
             long maxAgeInSecs = Long.parseLong(cacheControl
                     .substring(cacheControl.indexOf(maxAge) + maxAge.length())
                     .split("[, ]")[0] // Bug 51932 - allow for optional trailing

File: src/core/org/apache/jmeter/threads/JMeterContext.java
Patch:
@@ -143,7 +143,7 @@ public Sampler getPreviousSampler() {
     }
 
     /**
-     * @return the threadNum starting from one
+     * @return the threadNum starting from zero (0)
      */
     public int getThreadNum() {
         return threadNum;

File: src/functions/org/apache/jmeter/functions/StringToFile.java
Patch:
@@ -43,7 +43,7 @@
 /**
  * StringToFile Function to write a String to a file
  *
- * Parameters: 
+ * Parameters:
  * <ul>
  *  <li>file name</li>
  *  <li>content</li>

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
Patch:
@@ -859,7 +859,7 @@ scope, getCountlimAsLong(),
                 res.setResponseCode("800"); // $NON-NLS-1$
             }
             isSuccessful = false;
-        }  catch (Exception ex) {
+        }  catch (Exception ex) { // NOSONAR Exception is reported
             String returnData = ex.toString();
             res.setResponseCode("500");
             res.setResponseMessage(returnData); // $NON-NLS-1$

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -294,8 +294,8 @@ private BasicDataSource initPool(String maxPool) {
         if(isPreinit()) {
             // side effect - connection pool init - that is what we want
             // see also https://commons.apache.org/proper/commons-dbcp/apidocs/org/apache/commons/dbcp2/BasicDataSource.html#setInitialSize-int-
-            // it says: "The pool is initialized the first time one of the following methods is invoked: 
-            //  getConnection, setLogwriter, setLoginTimeout, getLoginTimeout, getLogWriter."
+            // it says: "The pool is initialized the first time one of the following methods is invoked:
+            // getConnection, setLogwriter, setLoginTimeout, getLoginTimeout, getLogWriter."
             // so we get a connection and close it - which releases it back to the pool (but stays open)
             try {
                 dataSource.getConnection().close();

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -294,7 +294,8 @@ private BasicDataSource initPool(String maxPool) {
         if(isPreinit()) {
             // side effect - connection pool init - that is what we want
             // see also https://commons.apache.org/proper/commons-dbcp/apidocs/org/apache/commons/dbcp2/BasicDataSource.html#setInitialSize-int-
-            // it says: "The pool is initialized the first time one of the following methods is invoked: getConnection, setLogwriter, setLoginTimeout, getLoginTimeout, getLogWriter."
+            // it says: "The pool is initialized the first time one of the following methods is invoked: 
+            //  getConnection, setLogwriter, setLoginTimeout, getLoginTimeout, getLogWriter."
             // so we get a connection and close it - which releases it back to the pool (but stays open)
             try {
                 dataSource.getConnection().close();

File: src/core/org/apache/jmeter/threads/AbstractThreadGroup.java
Patch:
@@ -73,7 +73,7 @@ public abstract class AbstractThreadGroup extends AbstractTestElement
     public static final String NUM_THREADS = "ThreadGroup.num_threads";
 
     public static final String MAIN_CONTROLLER = "ThreadGroup.main_controller";
-        
+
     /** The same user or different users */
     public static final String IS_SAME_USER_ON_NEXT_ITERATION = "ThreadGroup.same_user_on_next_iteration";
 
@@ -304,7 +304,7 @@ public boolean getOnErrorStopTestNow() {
     public void breakThreadLoop() {
         ((LoopController) getSamplerController()).breakLoop();
     }
-    
+
     /**
      * Set the kind of user
      *

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -153,7 +153,7 @@ public class JMeterThread implements Runnable, Interruptible {
     public JMeterThread(HashTree test, JMeterThreadMonitor monitor, ListenerNotifier note) {
         this(test, monitor, note, false);
     }
-    
+
     public JMeterThread(HashTree test, JMeterThreadMonitor monitor, ListenerNotifier note,Boolean isSameUserOnNextIteration) {
         this.monitor = monitor;
         threadVars = new JMeterVariables();

File: src/core/org/apache/jmeter/threads/gui/ThreadGroupGui.java
Patch:
@@ -244,7 +244,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
 
         // LOOP COUNT
         threadPropsPanel.add(createControllerPanel());
-        threadPropsPanel.add(createUserOptionsPanel());  
+        threadPropsPanel.add(createUserOptionsPanel());
         if (showDelayedStart) {
             delayedStart = new JCheckBox(JMeterUtils.getResString("delayed_start")); // $NON-NLS-1$
             threadPropsPanel.add(delayedStart);
@@ -268,7 +268,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         intgrationPanel.add(mainPanel);
         add(intgrationPanel, BorderLayout.CENTER);
     }
-   
+
    private JPanel createUserOptionsPanel(){
        ButtonGroup group = new ButtonGroup();
        sameUserBox = new JRadioButton(JMeterUtils.getResString("threadgroup_same_user")); //$NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -560,7 +560,7 @@ public void testIterationStart(LoopIterationEvent event) {
             kerberosManager.clearSubjects();
         }
     }
-    
+
     public boolean getControlledByThread() {
         return getPropertyAsBoolean(CONTROLLED_BY_THREADGROUP);
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -633,7 +633,7 @@ public void testEnded(String host) {
     @Override
     public void testIterationStart(LoopIterationEvent event) {
         JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();
-        if ((getControlledByThread() && !jMeterVariables.isSameUserOnNextIteration()) 
+        if ((getControlledByThread() && !jMeterVariables.isSameUserOnNextIteration())
                 || (!getControlledByThread() && getClearEachIteration())) {
             clearCache();
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -439,7 +439,7 @@ public void testEnded(String host) {
     @Override
     public void testIterationStart(LoopIterationEvent event) {
         JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();
-        if ((getControlledByThread() && !jMeterVariables.isSameUserOnNextIteration()) 
+        if ((getControlledByThread() && !jMeterVariables.isSameUserOnNextIteration())
                 || (!getControlledByThread() && getClearEachIteration())) {
             log.debug("Initialise cookies from pre-defined list");
             // No need to call clear

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/AuthPanel.java
Patch:
@@ -144,7 +144,7 @@ public void clearGui() {
     public void configure(TestElement el) {
         super.configure(el);
         tableModel.manager.clear();
-        AuthManager authManager = (AuthManager) el; 
+        AuthManager authManager = (AuthManager) el;
         tableModel.manager.addTestElement((AuthManager) authManager.clone());
         clearEachIteration.setSelected(authManager.getClearEachIteration());
         controlledByThreadGroup.setSelected(authManager.getControlledByThread());
@@ -175,7 +175,7 @@ private void init() {// called from ctor, so must not be overridable
         clearEachIteration =
                 new JCheckBox(JMeterUtils.getResString("auth_manager_clear_per_iter"), false); //$NON-NLS-1$
 
-        controlledByThreadGroup = 
+        controlledByThreadGroup =
                 new JCheckBox(JMeterUtils.getResString("auth_manager_clear_controlled_by_threadgroup"), false); //$NON-NLS-1$
         controlledByThreadGroup.setActionCommand(CONTROLLED_BY_THREADGROUP);
         controlledByThreadGroup.addActionListener(this);
@@ -238,7 +238,7 @@ public void actionPerformed(ActionEvent e) {
         if (action.equals(CONTROLLED_BY_THREADGROUP)) {
             clearEachIteration.setEnabled(!controlledByThreadGroup.isSelected());
         }
-        
+
         if (action.equals(DELETE_COMMAND)) {
             deleteRows();
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CacheManagerGui.java
Patch:
@@ -111,12 +111,12 @@ private void init() {
         setBorder(makeBorder());
 
         clearEachIteration = new JCheckBox(JMeterUtils.getResString("clear_cache_per_iter"), false); // $NON-NLS-1$
-        
-        controlledByThreadGroup = 
+
+        controlledByThreadGroup =
                 new JCheckBox(JMeterUtils.getResString("cache_clear_controlled_by_threadgroup"), false); //$NON-NLS-1$
         controlledByThreadGroup.setActionCommand(CONTROLLED_BY_THREADGROUP);
         controlledByThreadGroup.addActionListener(this);
-        
+
         useExpires = new JCheckBox(JMeterUtils.getResString("use_expires"), false); // $NON-NLS-1$
 
         JPanel northPanel = new JPanel();

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -283,7 +283,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         tableModel = new PowerTableModel(COLUMN_RESOURCE_NAMES, columnClasses);
         clearEachIteration =
             new JCheckBox(JMeterUtils.getResString("clear_cookies_per_iter"), false); //$NON-NLS-1$
-        controlledByThreadGroup = 
+        controlledByThreadGroup =
                 new JCheckBox(JMeterUtils.getResString("cookie_clear_controlled_by_threadgroup"), false); //$NON-NLS-1$
         controlledByThreadGroup.setActionCommand(CONTROLLED_BY_THREADGROUP);
         controlledByThreadGroup.addActionListener(this);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -1792,11 +1792,11 @@ protected void notifyFirstSampleAfterLoopRestart() {
                 Boolean.valueOf(RESET_STATE_ON_THREAD_GROUP_ITERATION));
         JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();
         if (jMeterVariables.isSameUserOnNextIteration()) {
-            log.debug("Thread Group is configured to simulate a returning visitor on each iteration, ignoring property value {}", 
+            log.debug("Thread Group is configured to simulate a returning visitor on each iteration, ignoring property value {}",
                     RESET_STATE_ON_THREAD_GROUP_ITERATION);
             resetStateOnThreadGroupIteration.set(false);
         } else {
-            log.debug("Thread Group is configured to simulate a new visitor on each iteration, using property value {}", 
+            log.debug("Thread Group is configured to simulate a new visitor on each iteration, using property value {}",
                     RESET_STATE_ON_THREAD_GROUP_ITERATION);
             resetStateOnThreadGroupIteration.set(Boolean.valueOf(RESET_STATE_ON_THREAD_GROUP_ITERATION));
         }

File: test/src/org/apache/jmeter/protocol/http/control/TestAuthManagerThreadIteration.java
Patch:
@@ -13,7 +13,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- * 
+ *
  */
 package org.apache.jmeter.protocol.http.control;
 

File: test/src/org/apache/jmeter/protocol/http/control/TestCookieManagerThreadIteration.java
Patch:
@@ -13,7 +13,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- * 
+ *
  */
 package org.apache.jmeter.protocol.http.control;
 
@@ -156,7 +156,7 @@ public void testCookieManagerWhenThreadIterationIsSameUser() throws NoSuchFieldE
                 cookieManagerDynamic.getCookies().get(0).getName());
         assertTrue("After the iteration, the quantity of cookies should be 1",
                 cookieManagerDynamic.getCookies().size() == 1);
-        
+
         // Controlled by CookieManager
         jmvars.putObject(SAME_USER, false);
         jmctx.setVariables(jmvars);

File: src/core/org/apache/jmeter/timers/TimerService.java
Patch:
@@ -60,13 +60,13 @@ public long adjustDelay(final long initialDelay) {
      * Adjust delay so that initialDelay does not exceed end of test
      * @param initialDelay initial delay in millis
      * @param endTime End time of JMeterThread
-     * @return initialDelay or adjusted delay
+     * @return initialDelay or {@code -1} if delay is too long
      */
     public long adjustDelay(final long initialDelay, long endTime) {
         if (endTime > 0) {
             long now = System.currentTimeMillis();
             if (initialDelay > endTime - now) {
-                return endTime - now;
+                return -1;
             }
         }
         return initialDelay;

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -274,9 +274,9 @@ private Date extractExpiresDateFromExpires(String expires) {
         try {
             expiresDate = org.apache.http.client.utils.DateUtils
                     .parseDate(expires);
-        } catch (IllegalArgumentException e) {
+        } catch (IllegalArgumentException e) { // Exception handled by return
             if (log.isDebugEnabled()) {
-                log.debug("Unable to parse Expires: '{}' {}", expires, e.toString());
+                log.debug("Unable to parse Expires: '{}', exception: {}", expires, e);
             }
             expiresDate = CacheManager.EXPIRED_DATE; // invalid dates must be
                                                      // treated as expired

File: src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java
Patch:
@@ -286,8 +286,8 @@ private InetAddress[] customRequestLookup(String host) throws UnknownHostExcepti
             for (int i = 0; i < records.length; i++) {
                 addresses[i] = ((ARecord) records[i]).getAddress();
             }
-        } catch (TextParseException tpe) {
-            log.debug("Failed to create Lookup object: {}", tpe.toString());
+        } catch (TextParseException tpe) { // NOSONAR Exception handled
+            log.debug("Failed to create Lookup object for host:{}, error message:{}", host, tpe.toString());
         }
         return addresses;
     }

File: src/core/org/apache/jmeter/util/XPathUtil.java
Patch:
@@ -591,6 +591,7 @@ public static void validateXPath(Document document, String xpathString) throws T
     /**
      * 
      * @param document XML Document
+     * @param namespaces String series of prefix/namespace values separateur by line break
      * @return {@link PrefixResolver}
      */
     private static PrefixResolver getPrefixResolverForXPath2(Document document,String namespaces) {
@@ -719,7 +720,7 @@ public static void computeAssertionResultUsingSaxon(AssertionResult result, Stri
                    result.setFailure(isNegated ? resultOfEval : !resultOfEval);
                    result.setFailureMessage(
                            isNegated ? "Nodes Matched for " + xPathQuery : "No Nodes Matched for " + xPathQuery);
-               } catch (ParserConfigurationException | TransformerException e) {
+               } catch (ParserConfigurationException | TransformerException e) { // NOSONAR Exception handled by return
                    result.setError(true);
                    result.setFailureMessage(new StringBuilder("Exception: ").append(e.getMessage()).append(" for:")
                            .append(xPathQuery).toString());

File: src/components/org/apache/jmeter/assertions/gui/XPath2Panel.java
Patch:
@@ -228,6 +228,7 @@ public void setShowNegated(boolean showNegate) {
      *            XPath String to validate
      * @param showDialog
      *            weather to show a dialog
+     * @param namespaces Namespaces declaration (set of prefix=value separated by spaces)
      * @return returns true if valid, false otherwise.
      */
     public static boolean validXPath(String xpathString, boolean showDialog,String namespaces) {
@@ -253,8 +254,5 @@ public static boolean validXPath(String xpathString, boolean showDialog,String n
                                 : JOptionPane.ERROR_MESSAGE);
         }
         return success;
-
     }
-  
-    
 }

File: src/components/org/apache/jmeter/assertions/XPath2Assertion.java
Patch:
@@ -68,7 +68,7 @@ public AssertionResult getResult(SampleResult response) {
         try {
             XPathUtil.computeAssertionResultUsingSaxon(result, responseData, getXPathString(),
                     getNamespaces(),isNegated());
-        } catch (SaxonApiException e) {
+        } catch (SaxonApiException e) { // NOSONAR We handle exception within result failur message
             result.setError(true);
             result.setFailureMessage("SaxonApiException occured computing assertion with XPath:" + getXPathString() + ", error:" + e.getMessage());
             return result;

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -156,7 +156,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "e922e4aa06ed9f253d68c13f445d5bfedaccd876"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "822c168ccf18e482d4be1915456c0b503b6f3d75"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/components/org/apache/jmeter/assertions/gui/XPathPanel.java
Patch:
@@ -72,7 +72,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         hbox.add(Box.createHorizontalGlue());
 
         add(JTextScrollPane.getInstance(getXPathField()), BorderLayout.CENTER);
-        add(hbox, BorderLayout.SOUTH);
+        add(hbox, BorderLayout.NORTH);
 
         setDefaultValues();
     }

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
Patch:
@@ -263,7 +263,7 @@ public void configure(TestElement config) {
         } else {
             log.error(
                     "Error setting class: '{}' in BackendListener: {}, check for a missing jar in"
-                    + "your jmeter 'search_paths' and 'plugin_dependency_paths' properties",
+                    + " your jmeter 'search_paths' and 'plugin_dependency_paths' properties",
                     className, getName());
         }
         queueSize.setText(((BackendListener)config).getQueueSize());

File: src/core/org/apache/jmeter/report/core/Converters.java
Patch:
@@ -82,7 +82,7 @@ public Float convert(String value) throws ConvertException {
             @Override
             public Integer convert(String value) throws ConvertException {
                 try {
-                    return Integer.valueOf(value);
+                    return Integer.valueOf(value.trim());
                 } catch (NumberFormatException ex) {
                     throw new ConvertException(value, Integer.class.getName(),
                             ex);
@@ -97,7 +97,7 @@ public Integer convert(String value) throws ConvertException {
             @Override
             public Long convert(String value) throws ConvertException {
                 try {
-                    return Long.valueOf(value);
+                    return Long.valueOf(value.trim());
                 } catch (NumberFormatException ex) {
                     throw new ConvertException(value, Long.class.getName(), ex);
                 }

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -112,7 +112,8 @@ public class SampleResult implements Serializable, Cloneable, Searchable {
     private static final String[] NON_BINARY_TYPES = {
         "audio/x-mpegurl",  //$NON-NLS-1$ (HLS Media Manifest)
         "audio/mpegurl",    //$NON-NLS-1$ (HLS Media Manifest)
-        "video/f4m"         //$NON-NLS-1$ (Flash Media Manifest)
+        "video/f4m",        //$NON-NLS-1$ (Flash Media Manifest)
+        "image/svg+xml"     //$NON-NLS-1$ (SVG is xml)
         };
 
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -708,7 +708,9 @@ protected HTTPSampleResult sample(URL url, String method,
     private void saveProxyAuth(
             MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple,
             HttpContext localContext) {
-        triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));
+        if (triple != null) {
+            triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));
+        }
     }
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -991,7 +991,8 @@ public String toString() {
         }
     }
 
-    private CloseableHttpClient setupClient(HttpClientKey key, JMeterVariables jMeterVariables, HttpClientContext clientContext) throws GeneralSecurityException {
+    private CloseableHttpClient setupClient(HttpClientKey key, JMeterVariables jMeterVariables,
+            HttpClientContext clientContext) throws GeneralSecurityException {
         Map<HttpClientKey, MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>> mapHttpClientPerHttpClientKey =
                 HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.get();
         clientContext.setAttribute(CONTEXT_ATTRIBUTE_CLIENT_KEY, key);

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -901,7 +901,7 @@ public void setEncodingAndType(String ct){
      * @param ct content type
      * @return true if content-type is of type binary.
      */
-    private static boolean isBinaryType(String ct){
+    public static boolean isBinaryType(String ct){
         for (String entry : NON_BINARY_TYPES){
             if (ct.startsWith(entry)){
                 return false;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -452,7 +452,7 @@ public String getProtocol(HTTPSamplerBase sampler) {
     }
 
     /**
-     * @return the prefix
+     * @return the prefix or transaction name
      */
     public String getPrefix() {
         return prefix;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/FormCharSetFinder.java
Patch:
@@ -74,9 +74,7 @@ public void addFormActionsAndCharSet(String html, Map<String, String> formEncodi
                     }
                 }
                 if(formCharSet != null) {
-                    synchronized (formEncodings) {
-                        formEncodings.put(action, formCharSet);
-                    }
+                    formEncodings.put(action, formCharSet);
                 }
             }      
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java
Patch:
@@ -38,7 +38,8 @@ public abstract class AbstractSamplerCreator implements SamplerCreator {
 
     protected static final String HTTP = "http"; // $NON-NLS-1$
     protected static final String HTTPS = "https"; // $NON-NLS-1$
-
+    protected static final String DEFAULT_ENCODING_KEY = "__defaultEncoding"; // $NON-NLS-1$
+    
     /** FileType to be used for the temporary binary files*/
     private static final String BINARY_FILE_SUFFIX =
         JMeterUtils.getPropDefault("proxy.binary.filesuffix",// $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java
Patch:
@@ -117,9 +117,9 @@ public void run() {
         log.info("Test Script Recorder up and running!");
 
         // Maps to contain page and form encodings
-        // TODO - do these really need to be shared between all Proxy instances?
         Map<String, String> pageEncodings = Collections.synchronizedMap(new HashMap<String, String>());
         Map<String, String> formEncodings = Collections.synchronizedMap(new HashMap<String, String>());
+        pageEncodings.put(AbstractSamplerCreator.DEFAULT_ENCODING_KEY, target.getDefaultEncoding());
 
         try {
             while (running) {

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -624,7 +624,7 @@ public void addSubResult(SampleResult subResult) {
      * see https://bz.apache.org/bugzilla/show_bug.cgi?id=63055
      * @return true if TestPlan is in functional mode or property subresults.disable_renaming is true
      */
-    protected final boolean isRenameSampleLabel() {
+    public static final boolean isRenameSampleLabel() {
         return !(TestPlan.getFunctionalMode() || DISABLE_SUBRESULTS_RENAMING);
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -806,7 +806,7 @@ protected void handleMethod(String method, HTTPSampleResult result,
     protected HTTPSampleResult createSampleResult(URL url, String method) {
         HTTPSampleResult res = new HTTPSampleResult();
 
-        res.setSampleLabel(this.testElement.getName());
+        configureSampleLabel(res, url);
         res.setHTTPMethod(method);
         res.setURL(url);
         

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
Patch:
@@ -511,8 +511,7 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe
         }
 
         HTTPSampleResult res = new HTTPSampleResult();
-
-        res.setSampleLabel(this.testElement.getName());
+        configureSampleLabel(res, url);
         res.setURL(url);
         res.setHTTPMethod(method);
 

File: src/components/org/apache/jmeter/visualizers/SearchTextExtension.java
Patch:
@@ -132,7 +132,7 @@ public JToolBar getSearchToolBar() {
      */
     private JToolBar createSearchToolBar() {
         // Search field
-        textToFindField = new JTextField(); // $NON-NLS-1$
+        textToFindField = new JTextField(30); // $NON-NLS-1$
         this.toolBar = new JToolBar();
         toolBar.setFloatable(false);
         toolBar.setFont(FONT_SMALL);

File: src/components/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -25,9 +25,7 @@
 import java.awt.GridLayout;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
-import java.util.Arrays;
 import java.util.Date;
-import java.util.EventListener;
 import java.util.LinkedHashMap;
 import java.util.Map.Entry;
 import java.util.Set;
@@ -221,7 +219,8 @@ public void clearData() {
 
     @Override
     public void init() {
-        rightSide.addTab(JMeterUtils.getResString("view_results_tab_sampler"), createResponseMetadataPanel()); // $NON-NLS-1$
+        rightSide.addTab(
+                JMeterUtils.getResString("view_results_tab_sampler"), createResponseMetadataPanel()); // $NON-NLS-1$
         // Create the panels for the other tabs
         requestPanel = new RequestPanel();
         resultsPane = createResponseDataPanel();

File: src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
Patch:
@@ -571,6 +571,9 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         this.add(mainPanel, BorderLayout.NORTH);
         this.add(spane, BorderLayout.CENTER);
         new Timer(REFRESH_PERIOD, e -> {
+                if (newRows.isEmpty()) {
+                    return;
+                }
                 synchronized (lock) {
                     while (!newRows.isEmpty()) {
                         model.insertRow(newRows.pop(), model.getRowCount() - 1);

File: src/components/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -25,7 +25,9 @@
 import java.awt.GridLayout;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
+import java.util.Arrays;
 import java.util.Date;
+import java.util.EventListener;
 import java.util.LinkedHashMap;
 import java.util.Map.Entry;
 import java.util.Set;

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -220,7 +220,7 @@ public void actionPerformed(ActionEvent ev) {
                     OutputStreamWriter writer = new OutputStreamWriter(fo, Charset.forName("UTF-8"))){
                 CSVSaveService.saveCSVStats(StatGraphVisualizer.getAllTableData(model, StatGraphVisualizer.getFormatters()),
                         writer,
-                        saveHeaders.isSelected() ? StatGraphVisualizer.getLabels(StatGraphVisualizer.getColumns()) : null);
+                        saveHeaders.isSelected() ? StatGraphVisualizer.getLabels(StatGraphVisualizer.getColumns(), StatGraphVisualizer.getColumnsMsgParameters()) : null);
             } catch (IOException e) {
                 JMeterUtils.reportErrorToUser(e.getMessage(), "Error saving data");
             }

File: src/core/org/apache/jmeter/util/SSLManager.java
Patch:
@@ -68,7 +68,7 @@ public abstract class SSLManager {
     private JmeterKeyStore keyStore;
 
     /** Cache the TrustStore instance - null if no truststore name was provided */
-    private volatile KeyStore trustStore = null;
+    private KeyStore trustStore = null;
     // Have we yet tried to load the truststore?
     private volatile boolean truststoreLoaded=false;
 

File: test/src/org/apache/jmeter/functions/TestSimpleFunctions.java
Patch:
@@ -197,6 +197,8 @@ public void testThreadGroupNameBug63241() throws Exception {
         try {
             HTTPSamplerProxy httpRequest = new HTTPSamplerProxy();
             JMeterContext context = JMeterContextService.getContext();
+            // This is the state when called from a non test thread
+            context.setThreadGroup(null);
             context.setCurrentSampler(httpRequest);
             String ret = function.execute(result, httpRequest);
             assertEquals("", ret);

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java
Patch:
@@ -71,6 +71,7 @@ private LdapExtClient() {
      *            "com.sun.jndi.ldap.connect.timeout"
      * @param secure
      *            flag whether ssl should be used
+     * @param trustAll flag whether we should trust all certificates 
      * @return newly created {@link DirContext}
      * @exception NamingException
      *                when creating the {@link DirContext} fails

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -60,6 +60,7 @@ public final class ActionNames {
     public static final String FUNCTIONS        = "functions"; // $NON-NLS-1$
     public static final String HELP             = "help"; // $NON-NLS-1$
     public static final String HEAP_DUMP        = "heap_dump"; // $NON-NLS-1$
+    public static final String HTML_REPORT      = "html_report";
     public static final String LAF_PREFIX       = "laf:"; // Look and Feel prefix
     public static final String LINK_BUG_TRACKER = "link_bug_tracker:"; // URI of bug tracker
     public static final String LINK_COMP_REF    = "link_component_reference:"; // URI of component reference

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -601,7 +601,7 @@ public void run() {
                     if (threadNumber > 0) {
                         long elapsedInMillis = System.currentTimeMillis() - startTimeInMillis; 
                         final int perThreadDelayInMillis = 
-                                Math.round(((rampUpOriginInMillis - elapsedInMillis) / (float) (numThreads - threadNumber)));
+                                Math.round((rampUpOriginInMillis - elapsedInMillis) / (float) (numThreads - threadNumber));
                         pause(Math.max(0, perThreadDelayInMillis)); // ramp-up delay (except first)
                     }
                     if (usingScheduler && System.currentTimeMillis() > endtime) {

File: src/core/org/apache/jmeter/gui/action/CreateFunctionDialog.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.jmeter.functions.gui.FunctionHelper;
 
 public class CreateFunctionDialog extends AbstractAction {
-    private final FunctionHelper helper;
 
     private static final Set<String> commands;
     static {
@@ -34,7 +33,7 @@ public class CreateFunctionDialog extends AbstractAction {
     }
 
     public CreateFunctionDialog() {
-        helper = new FunctionHelper();
+        super();
     }
 
     /**
@@ -46,7 +45,8 @@ public Set<String> getActionNames() {
     }
 
     @Override
-    public void doAction(ActionEvent arg0) {
+    public void doAction(ActionEvent event) {
+        FunctionHelper helper = new FunctionHelper(getParentFrame(event));
         helper.setVisible(true);
     }
 }

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java
Patch:
@@ -30,6 +30,7 @@
 import javax.naming.directory.SearchControls;
 import javax.naming.directory.SearchResult;
 
+import org.apache.jmeter.util.TrustAllSSLSocketFactory;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -91,7 +92,7 @@ public static DirContext connect(String host,
             sb.append("ldaps://"); // $NON-NLS-1$
             if (trustAll){
                 log.debug("Using secure connection with trustAll");
-                env.put("java.naming.ldap.factory.socket", TrustAllSocketFactory.class.getName());
+                env.put("java.naming.ldap.factory.socket", TrustAllSSLSocketFactory.class.getName());
             }
         } else {
             sb.append("ldap://"); // $NON-NLS-1$

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/protocol/TrustAllSSLSocketFactory.java
Patch:
@@ -32,7 +32,9 @@
 /**
  * This class can be used as a SocketFactory with SSL-connections.
  * Its purpose is to ensure that all certificates - no matter from which CA - are accepted to secure the SSL-connection.
+ * @deprecated Will be removed in next version, use {@link org.apache.jmeter.util.TrustAllSSLSocketFactory}
  */
+@Deprecated
 public class TrustAllSSLSocketFactory extends SSLSocketFactory  {
 
     private final SSLSocketFactory factory;

File: src/jorphan/org/apache/jorphan/documentation/VisibleForTesting.java
Patch:
@@ -26,7 +26,6 @@
  * Denotes that the class, method or field has its visibility relaxed so
  * that unit tests can access it.
  * This means that this API is not-public.
- * <p/>
  * The <code>visibility</code> argument can be used to specific what the original
  * visibility should have been if it had not been made public or package-private for testing.
  * The default is to consider the element private.
@@ -51,8 +50,8 @@ enum Visibility {
     }
 
     /**
-     * Intended visibility if the element had not been made public or package-private for testing.
-     * If not specified, one should assume the element originally intended to be private.
+     * If no visibility specified, one should assume the element originally intended to be private.
+     * @return {@link Visibility} Intended visibility if the element had not been made public or package-private for testing.
      */
     Visibility visibility() default Visibility.PRIVATE;
 }

File: src/jorphan/org/apache/jorphan/documentation/VisibleForTesting.java
Patch:
@@ -32,7 +32,7 @@
  * The default is to consider the element private.
  * 
  * Copy of this class under ASL license:
- * https://github.com/aosp-mirror/platform_frameworks_base/blob/8b2c3a14603d163d7564e6f60286995079687690/core/java/com/android/internal/annotations/VisibleForTesting.java
+ * https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/com/android/internal/annotations/VisibleForTesting.java
  */
 @Documented
 @Retention(RetentionPolicy.SOURCE)

File: src/components/org/apache/jmeter/assertions/gui/AssertionGui.java
Patch:
@@ -313,7 +313,7 @@ public void configure(TestElement el) {
     /**
      * Initialize the GUI components and layout.
      */
-    private void init() { // WARNING: called from ctor so must not be overridden (i.e. must be private or final)
+    void init() { // WARNING: called from ctor so must not be overridden (i.e. must be private or final)
         setLayout(new BorderLayout());
         Box box = Box.createVerticalBox();
         setBorder(makeBorder());

File: src/core/org/apache/jmeter/gui/action/SearchTreeDialog.java
Patch:
@@ -111,8 +111,8 @@ public class SearchTreeDialog extends JDialog implements ActionListener { // NOS
     private List<JMeterTreeNode> lastSearchResult = new ArrayList<>();
     private int currentSearchIndex;
 
-    public SearchTreeDialog() {
-        super((JFrame) null, JMeterUtils.getResString("search_tree_title"), false); //$NON-NLS-1$
+    public SearchTreeDialog(JFrame parent) {
+        super(parent, JMeterUtils.getResString("search_tree_title"), false); //$NON-NLS-1$
         init();
     }
 

File: src/core/org/apache/jmeter/report/processor/graph/AbstractVersusRequestsGraphConsumer.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.Map;
 
 import org.apache.commons.io.FileUtils;
 import org.apache.jmeter.report.core.CsvSampleReader;
@@ -97,7 +98,7 @@ public void startConsuming() {
     public void initialize() {
         super.initialize();
         embeddedConsumer = new TimeCountConsumer(this);
-        setGranularity(1L);
+        setGranularity(1000L);
     }
 
     private void startConsumingBase() {
@@ -208,7 +209,7 @@ public CsvSampleWriter getWriter() {
         // Collection of sample builders for channels
         private ArrayList<SampleBuilder> builders = new ArrayList<>();
         private ArrayList<FileInfo> fileInfos = new ArrayList<>();
-        private HashMap<Long, Long> counts = new HashMap<>();
+        private Map<Long, Long> counts = new HashMap<>();
         boolean createdWorkDir = false;
         private final AbstractVersusRequestsGraphConsumer parent;
 

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -365,7 +365,7 @@ public JMeter() {
     private void startGui(String testFile) {
         System.out.println("================================================================================");//NOSONAR
         System.out.println("Don't use GUI mode for load testing !, only for Test creation and Test debugging.");//NOSONAR
-        System.out.println("For load testing, use NON GUI Mode:");//NOSONAR
+        System.out.println("For load testing, use CLI Mode (was NON GUI):");//NOSONAR
         System.out.println("   jmeter -n -t [jmx file] -l [results file] -e -o [Path to web report folder]");//NOSONAR
         System.out.println("& increase Java Heap to meet your test requirements:");//NOSONAR
         System.out.println("   Modify current env variable HEAP=\"-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m\" in the jmeter batch file");//NOSONAR

File: src/components/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -682,7 +682,7 @@ public synchronized void setValue(Object value) {
     /**
      * Optimized way to set text based on :
      * http://javatechniques.com/blog/faster-jtextpane-text-insertion-part-i/
-     * @param response String data
+     * @param data String data
      */
     protected void setTextOptimized(String data) {
         Document document = results.getDocument();

File: src/components/org/apache/jmeter/visualizers/RenderAsDocument.java
Patch:
@@ -44,7 +44,7 @@ private void showDocumentResponse(SampleResult sampleResult) {
         String response = Document.getTextFromDocument(sampleResult.getResponseData());
 
         results.setContentType("text/plain"); // $NON-NLS-1$
-        results.setText(response);
+        setTextOptimized(response);
         results.setCaretPosition(0);
         resultsScrollPane.setViewportView(results);
     }

File: src/components/org/apache/jmeter/visualizers/RenderAsHTMLFormatted.java
Patch:
@@ -34,7 +34,7 @@ public void renderResult(SampleResult sampleResult) {
 
     private void showHTMLFormattedResponse(String response) {
         results.setContentType("text/plain"); // $NON-NLS-1$
-        results.setText(response == null ? "" : Jsoup.parse(response).html()); // $NON-NLS-1$
+        setTextOptimized(response == null ? "" : Jsoup.parse(response).html()); // $NON-NLS-1$
         results.setCaretPosition(0);
         resultsScrollPane.setViewportView(results);
         // Bug 55111 - Refresh JEditor pane size depending on the presence or absence of scrollbars

File: src/components/org/apache/jmeter/visualizers/RenderAsJSON.java
Patch:
@@ -44,7 +44,7 @@ public void renderResult(SampleResult sampleResult) {
 
     private void showRenderJSONResponse(String response) {
         results.setContentType("text/plain"); // $NON-NLS-1$
-        results.setText(response == null ? "" : prettyJSON(response));
+        setTextOptimized(response == null ? "" : prettyJSON(response));
         results.setCaretPosition(0);
         resultsScrollPane.setViewportView(results);
     }

File: src/components/org/apache/jmeter/visualizers/RenderAsText.java
Patch:
@@ -33,7 +33,7 @@ public void renderResult(SampleResult sampleResult) {
 
     private void showTextResponse(String response) {
         results.setContentType("text/plain"); // $NON-NLS-1$
-        results.setText(response == null ? "" : response); // $NON-NLS-1$
+        setTextOptimized(response == null ? "" : response); // $NON-NLS-1$
         results.setCaretPosition(0);
         resultsScrollPane.setViewportView(results);
         // Bug 55111 - Refresh JEditor pane size depending on the presence or absence of scrollbars

File: src/core/org/apache/jmeter/gui/action/SchematicView.java
Patch:
@@ -72,7 +72,7 @@ public void generate(HashTree testPlan, File testPlanFile, OutputStream outputSt
             TransformerFactory factory = TransformerFactory.newInstance(
                     "net.sf.saxon.BasicTransformerFactory", Thread.currentThread().getContextClassLoader());
             Source xslt;
-            if (StringUtils.isEmpty(DEFAULT_XSL_FILE)) {
+            if (!StringUtils.isEmpty(DEFAULT_XSL_FILE)) {
                 log.info("Will use file {} for Schematic View generation", DEFAULT_XSL_FILE);
                 xslt = new StreamSource(new File(DEFAULT_XSL_FILE));
             } else {

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -621,8 +621,8 @@ public void addSubResult(SampleResult subResult) {
     }
 
     /**
+     * see https://bz.apache.org/bugzilla/show_bug.cgi?id=63055
      * @return true if TestPlan is in functional mode or property subresults.disable_renaming is true
-     * @see https://bz.apache.org/bugzilla/show_bug.cgi?id=63055
      */
     protected final boolean isRenameSampleLabel() {
         return !(TestPlan.getFunctionalMode() || DISABLE_SUBRESULTS_RENAMING);

File: src/core/org/apache/jmeter/util/JSR223TestElement.java
Patch:
@@ -255,7 +255,7 @@ public boolean compile()
             try {
                 ((Compilable) scriptEngine).compile(getScript());
                 return true;
-            } catch (ScriptException e) {
+            } catch (ScriptException e) { // NOSONAR
                 logger.error("Error compiling script for test element {}, error:{}", getName(), e.getMessage());
                 return false;
             }
@@ -266,7 +266,7 @@ public boolean compile()
                 try {
                     ((Compilable) scriptEngine).compile(fileReader);
                     return true;
-                } catch (ScriptException e) {
+                } catch (ScriptException e) { // NOSONAR
                     logger.error("Error compiling script for test element {}, error:{}", getName(), e.getMessage());
                     return false;
                 }

File: src/core/org/apache/jmeter/gui/action/SchematicView.java
Patch:
@@ -71,7 +71,7 @@ public void generate(HashTree testPlan, File testPlanFile, OutputStream outputSt
                 throws Exception {
             TransformerFactory factory = TransformerFactory.newInstance(
                     "net.sf.saxon.BasicTransformerFactory", Thread.currentThread().getContextClassLoader());
-            Source xslt = null;
+            Source xslt;
             if (StringUtils.isEmpty(DEFAULT_XSL_FILE)) {
                 log.info("Will use file {} for Schematic View generation", DEFAULT_XSL_FILE);
                 xslt = new StreamSource(new File(DEFAULT_XSL_FILE));

File: src/components/org/apache/jmeter/visualizers/backend/influxdb/HttpMetricsSender.java
Patch:
@@ -218,7 +218,7 @@ private static String getBody(final HttpResponse response) {
             if(response != null && response.getEntity() != null) {
                 body = EntityUtils.toString(response.getEntity());
             }
-        } catch (Exception e) {
+        } catch (Exception e) { // NOSONAR
             // NOOP
         }
         return body;

File: test/src/org/apache/jmeter/JMeterVersionTest.java
Patch:
@@ -162,7 +162,7 @@ public void testEclipse() throws IOException {
                 } else if (jar.equals("spock-core-1.0-groovy")) { // special handling
                     jar = "spock-core";
                     version = "1.0-groovy-2.4";
-                } else if (jar.equals("Saxon-HE-9.8.0")) { // special handling
+                } else if (jar.equals("Saxon-HE-9.9.1")) { // special handling
                     jar = "Saxon-HE";
                     version = "9.9.1-1";
                 }else {

File: test/src/org/apache/jmeter/JMeterVersionTest.java
Patch:
@@ -164,7 +164,7 @@ public void testEclipse() throws IOException {
                     version = "1.0-groovy-2.4";
                 } else if (jar.equals("Saxon-HE-9.8.0")) { // special handling
                     jar = "Saxon-HE";
-                    version = "9.8.0-14";
+                    version = "9.9.1-1";
                 }else {
                     String tmp = JAR_TO_BUILD_PROP.get(jar);
                     if (tmp != null) {

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -116,7 +116,8 @@ public final class ActionNames {
     public static final String VALIDATE_TG      = "validate_tg"; //$NON-NLS-1$
     public static final String ZOOM_IN          = "zoom_in"; //$NON-NLS-1$
     public static final String ZOOM_OUT         = "zoom_out"; //$NON-NLS-1$
-    public static final String PARSE_CURL       = "parse_curl"; ////$NON-NLS-1$
+    public static final String PARSE_CURL       = "parse_curl"; //$NON-NLS-1$
+    public static final String SCHEMATIC_VIEW   = "schematic_view"; //$NON-NLS-1$
 
     // Prevent instantiation
     private ActionNames() {}

File: src/components/org/apache/jmeter/gui/action/ExportTransactionAndSamplerNames.java
Patch:
@@ -37,6 +37,7 @@
 
 import org.apache.jmeter.control.TransactionController;
 import org.apache.jmeter.gui.GuiPackage;
+import org.apache.jmeter.gui.action.impl.DefaultTreeNodeNamingPolicy;
 import org.apache.jmeter.gui.plugin.MenuCreator;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 import org.apache.jmeter.gui.util.EscapeDialog;
@@ -62,7 +63,7 @@ public class ExportTransactionAndSamplerNames extends AbstractAction implements
     
     private static final String TRANSACTIONS_REGEX_PATTERN = 
             JMeterUtils.getPropDefault("jmeter.reportgenerator.exported_transactions_pattern", 
-                    "[a-zA-Z0-9_\\-{}\\$\\.]*[-_][0-9]*");
+                    "[a-zA-Z0-9_ \\-{}\\$\\.]*["+DefaultTreeNodeNamingPolicy.TRANSACTION_CHILDREN_SEPARATOR+"][0-9]*");
     
     private static final Pattern TRANSACTIONS_REGEX = 
             Pattern.compile(TRANSACTIONS_REGEX_PATTERN);

File: src/core/org/apache/jmeter/gui/action/impl/DefaultTreeNodeNamingPolicy.java
Patch:
@@ -32,9 +32,9 @@
  * @since 3.2
  */
 public class DefaultTreeNodeNamingPolicy implements TreeNodeNamingPolicy {
+    public static final char TRANSACTION_CHILDREN_SEPARATOR = '-';
     private static final String PREFIX = JMeterUtils.getPropDefault("naming_policy.prefix", ""); 
     private static final String SUFFIX = JMeterUtils.getPropDefault("naming_policy.suffix", ""); 
-    private int numberOfChildren;
     private int index;
     private DecimalFormat formatter;
 
@@ -46,7 +46,7 @@ public class DefaultTreeNodeNamingPolicy implements TreeNodeNamingPolicy {
     public void rename(JMeterTreeNode parentNode, JMeterTreeNode childNode, int iterationIndex) {
         if(childNode.getUserObject() instanceof TransactionController ||
                 childNode.getUserObject() instanceof Sampler) {
-            childNode.setName(parentNode.getName()+"-"+formatter.format(index));
+            childNode.setName(parentNode.getName()+TRANSACTION_CHILDREN_SEPARATOR+formatter.format(index));
             index++;
         }
     }
@@ -56,7 +56,7 @@ public void rename(JMeterTreeNode parentNode, JMeterTreeNode childNode, int iter
      */
     @Override
     public void resetState(JMeterTreeNode rootNode) {
-        this.numberOfChildren = rootNode.getChildCount();
+        int numberOfChildren = rootNode.getChildCount();
         this.index = 0;
         int numberOfDigits = String.valueOf(numberOfChildren).length();
         StringBuilder formatSB = new StringBuilder(numberOfDigits);

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/action/ParseCurlCommandAction.java
Patch:
@@ -225,7 +225,7 @@ public Set<String> getActionNames() {
 
     @Override
     public JMenuItem[] getMenuItemsAtLocation(MENU_LOCATION location) {
-        if(location == MENU_LOCATION.HELP) {
+        if(location == MENU_LOCATION.TOOLS) {
             JMenuItem menuItemIC = new JMenuItem(
                     JMeterUtils.getResString("curl_import_menu"), KeyEvent.VK_UNDEFINED);
             menuItemIC.setName(IMPORT_CURL);

File: src/core/org/apache/jmeter/gui/util/FileDialoger.java
Patch:
@@ -131,7 +131,7 @@ public static JFileChooser promptToOpenFile(String[] exts) {
      *         finished using it - null if no file was chosen
      */
     public static JFileChooser promptToOpenFile(String[] exts, String existingFileName) {
-        return promptToOpenFile(exts, null, false);
+        return promptToOpenFile(exts, existingFileName, false);
     }
   
     /**

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -276,13 +276,14 @@ private void makeToolsMenu() {
         JMenuItem threadDump = makeMenuItemRes("thread_dump", ActionNames.THREAD_DUMP);//$NON-NLS-1$
         toolsMenu.add(heapDump);
         toolsMenu.add(threadDump);
-        
+        toolsMenu.addSeparator();
+        toolsMenu.add(makeMenuItemRes("function_dialog_menu_item", 'F', ActionNames.FUNCTIONS, KeyStrokes.FUNCTIONS));
+
         addPluginsMenuItems(toolsMenu, menuCreators, MENU_LOCATION.TOOLS);
     }
 
     private void makeOptionsMenu() {
         optionsMenu = makeMenuRes("option",'O'); //$NON-NLS-1$
-        optionsMenu.add(makeMenuItemRes("function_dialog_menu_item", 'F', ActionNames.FUNCTIONS, KeyStrokes.FUNCTIONS));
         optionsMenu.add(createLaFMenu());
 
         JCheckBoxMenuItem menuLoggerPanel = makeCheckBoxMenuItemRes("menu_logger_panel", ActionNames.LOGGER_PANEL_ENABLE_DISABLE); //$NON-NLS-1$

File: src/components/org/apache/jmeter/gui/action/ExportTransactionAndSamplerNames.java
Patch:
@@ -184,7 +184,7 @@ public Set<String> getActionNames() {
 
     @Override
     public JMenuItem[] getMenuItemsAtLocation(MENU_LOCATION location) {
-        if(location == MENU_LOCATION.HELP) {
+        if(location == MENU_LOCATION.TOOLS) {
             
             JMenuItem menuItemIC = new JMenuItem(
                     JMeterUtils.getResString("export_transactions_menu"), KeyEvent.VK_UNDEFINED);

File: src/core/org/apache/jmeter/gui/action/CompileJSR223TestElements.java
Patch:
@@ -130,7 +130,7 @@ public Set<String> getActionNames() {
 
     @Override
     public JMenuItem[] getMenuItemsAtLocation(MENU_LOCATION location) {
-        if(location == MENU_LOCATION.HELP) {
+        if(location == MENU_LOCATION.TOOLS) {
             
             JMenuItem menuItemIC = new JMenuItem(
                     JMeterUtils.getResString("compile_menu"), KeyEvent.VK_UNDEFINED);

File: src/core/org/apache/jmeter/gui/plugin/MenuCreator.java
Patch:
@@ -32,7 +32,8 @@ enum MENU_LOCATION {
         RUN,
         OPTIONS,
         HELP,
-        SEARCH
+        SEARCH,
+        TOOLS
     }
     
     /**

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -45,6 +45,7 @@ public final class ActionNames {
     public static final String CLEAR_ALL        = "action.clear_all"; // $NON-NLS-1$
     public static final String CLOSE            = "close"; // $NON-NLS-1$
     public static final String COLLAPSE_ALL     = "collapse all"; // $NON-NLS-1$
+    public static final String COMPILE_JSR223   = "compile_jsr223"; // $NON-NLS-1$
     public static final String COPY             = "Copy"; // $NON-NLS-1$
     public static final String CUT              = "Cut"; // $NON-NLS-1$
     public static final String DEBUG_ON         = "debug_on"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/report/dashboard/HtmlTemplateExporter.java
Patch:
@@ -63,9 +63,9 @@ public class HtmlTemplateExporter extends AbstractDataExporter {
     private static final FileFilter HTML_REPORT_FILE_FILTER = 
         file -> 
             (file.isFile() && 
-                        file.getName().equals("index.html"))
+                    "index.html".equals(file.getName()))
                     || (file.isDirectory() && 
-                            (file.getName().equals("content") ||
+                            ("content".equals(file.getName()) ||
                                     file.getName().startsWith("sbadmin2-")));
     private static final String CUSTOM_GRAPH_PREFIX = "custom_";
 

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/RegexpHTMLParser.java
Patch:
@@ -104,7 +104,9 @@ class RegexpHTMLParser extends HTMLParser {
             + "|INPUT(?:" + SEP + "(?:SRC" + VALUE
             + "|TYPE\\s*=\\s*(?:\"image\"|'image'|image(?=[\\s>])))){2,}"
             + "|LINK(?:" + SEP + "(?:HREF" + VALUE
-            + "|REL\\s*=\\s*(?:\"stylesheet\"|'stylesheet'|stylesheet(?=[\\s>])))){2,}" + ")";
+            + "|REL\\s*=\\s*(?:\"stylesheet\"|'stylesheet'|stylesheet(?=[\\s>])))){2,}"
+            + "|REL\\s*=\\s*(?:\"icon\"|'icon'|icon(?=[\\s>])))){2,}"
+            + "|REL\\s*=\\s*(?:\"shortcut icon\"|'shortcut icon'|shortcut icon(?=[\\s>])))){2,}" + ")";
 
     // Number of capturing groups possibly containing Base HREFs:
     private static final int NUM_BASE_GROUPS = 3;

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -61,6 +61,9 @@ public abstract class HTMLParser extends BaseParser {
     protected static final String TAG_SCRIPT        = "script";// $NON-NLS-1$
     protected static final String STYLESHEET        = "stylesheet";// $NON-NLS-1$
 
+    protected static final String SHORTCUT_ICON     = "shortcut icon";
+    protected static final String ICON              = "icon";
+
     protected static final String IE_UA             = "MSIE ([0-9]+.[0-9]+)";// $NON-NLS-1$
     protected static final Pattern IE_UA_PATTERN    = Pattern.compile(IE_UA);
     private   static final float IE_10                = 10.0f;

File: src/core/org/apache/jmeter/report/config/ReportGeneratorConfiguration.java
Patch:
@@ -58,7 +58,7 @@ public class ReportGeneratorConfiguration {
             + KEY_DELIMITER + "exporter";
 
     // Temporary directory
-    private static final String REPORT_GENERATOR_KEY_TEMP_DIR = REPORT_GENERATOR_KEY_PREFIX
+    public static final String REPORT_GENERATOR_KEY_TEMP_DIR = REPORT_GENERATOR_KEY_PREFIX
             + KEY_DELIMITER + "temp_dir";
     private static final File REPORT_GENERATOR_KEY_TEMP_DIR_DEFAULT = new File(
             "temp");

File: src/core/org/apache/jmeter/report/dashboard/ReportGenerator.java
Patch:
@@ -314,7 +314,8 @@ private boolean createTempDir(File tmpDir) throws GenerationException {
             tmpDirCreated = tmpDir.mkdir();
             if (!tmpDirCreated) {
                 String message = String.format(
-                        "Cannot create temporary directory \"%s\".", tmpDir);
+                        "Cannot create temporary directory \"%s\", check property \"%s\"", tmpDir.getAbsolutePath(), 
+                        ReportGeneratorConfiguration.REPORT_GENERATOR_KEY_TEMP_DIR);
                 log.error(message);
                 throw new GenerationException(message);
             }

File: src/core/org/apache/jmeter/control/IfController.java
Patch:
@@ -174,7 +174,7 @@ public void setCondition(String condition) {
      * @return the condition associated with this controller
      */
     public String getCondition() {
-        return getPropertyAsString(CONDITION);
+        return getPropertyAsString(CONDITION).trim();
     }
 
     /**

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -161,11 +161,12 @@ else if (e.getActionCommand().equals(ActionNames.SAVE_AS_TEST_FRAGMENT)) {
         if (!ActionNames.SAVE.equals(e.getActionCommand()) // Saving existing plan 
                 // New File
                 || updateFile == null) {
+            boolean isNewFile = updateFile == null;
             updateFile = computeFileName();
             if(updateFile == null) {
                 return;
             }
-            if (e.getActionCommand().equals(ActionNames.SAVE_ALL_AS)) {
+            if (e.getActionCommand().equals(ActionNames.SAVE_ALL_AS) || isNewFile) {
                 GuiPackage.getInstance().setTestPlanFile(updateFile);
             }
         }

File: test/src/org/apache/jmeter/JMeterVersionTest.java
Patch:
@@ -46,6 +46,7 @@
 
 /**
  * Check the eclipse and Maven version definitions against build.properties
+ * Drop this if we move to Maven the build process
  */
 public class JMeterVersionTest extends JMeterTestCase {
 

File: src/core/org/apache/jmeter/report/dashboard/TemplateVisitor.java
Patch:
@@ -89,7 +89,8 @@ public FileVisitResult preVisitDirectory(Path file, BasicFileAttributes attrs)
         try {
             Files.copy(file, newDir);
         } catch (FileAlreadyExistsException ex) {
-            LOGGER.info("Copying folder from '{}' to '{}', got message:{}, found non empty folder with following content {}, will be ignored", file, newDir, newDir.toFile().listFiles());
+            LOGGER.info("Copying folder from '{}' to '{}', got message:{}, found non empty folder with following content {}, will be ignored",
+                    file, newDir, newDir.toFile().listFiles());
         }
         return FileVisitResult.CONTINUE;
     }

File: src/core/org/apache/jmeter/NewDriver.java
Patch:
@@ -306,7 +306,7 @@ private static void setLoggingProperties(String[] args) {
 
     private static boolean shouldBeHeadless(String[] args) {
         for (String arg : args) {
-            if("-n".equals(arg) || "-s".equals(arg)) {
+            if("-n".equals(arg) || "-s".equals(arg) || "-g".equals(arg)) {
                 return true;
             }
         }

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -476,6 +476,7 @@ public void start(String[] args) {
                 log.info("os.arch={}", System.getProperty("os.arch"));//$NON-NLS-1$ //$NON-NLS-2$
                 log.info("os.version={}", System.getProperty("os.version"));//$NON-NLS-1$ //$NON-NLS-2$
                 log.info("file.encoding={}", System.getProperty("file.encoding"));//$NON-NLS-1$ //$NON-NLS-2$
+                log.info("java.awt.headless={}", System.getProperty("java.awt.headless"));//$NON-NLS-1$ //$NON-NLS-2$
                 log.info("Max memory     ={}", Runtime.getRuntime().maxMemory());
                 log.info("Available Processors ={}", Runtime.getRuntime().availableProcessors());
                 log.info("Default Locale={}", Locale.getDefault().getDisplayName());

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java
Patch:
@@ -290,7 +290,7 @@ public int replace(String regex, String replaceBy, boolean caseSensitive) throws
         for (int i = 0; i < hdrs.size(); i++) {
             final JMeterProperty hdr = hdrs.get(i);
             Header head = (Header) hdr.getObjectValue();
-            JOrphanUtils.replaceValue(regex, replaceBy, caseSensitive, head.getValue(), head::setValue);
+            totalReplaced += JOrphanUtils.replaceValue(regex, replaceBy, caseSensitive, head.getValue(), head::setValue);
         }
         return totalReplaced;
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -2100,6 +2100,9 @@ public int replace(String regex, String replaceBy, boolean caseSensitive) throws
 
         totalReplaced += replaceValue(regex, replaceBy, caseSensitive, getPath(), this::setPath);
         totalReplaced += replaceValue(regex, replaceBy, caseSensitive, getDomain(), this::setDomain);
+        for (String key: Arrays.asList(PORT, PROTOCOL)) {
+            totalReplaced += replaceValue(regex, replaceBy, caseSensitive, getPropertyAsString(key), s -> setProperty(key, s));
+        }
 
         return totalReplaced;
     }

File: test/src/org/apache/jmeter/functions/TestFileRowColContainer.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.test.JMeterSerialTest;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -38,7 +39,7 @@
  * via row and column number
  * 
  */
-public class TestFileRowColContainer extends JMeterTestCase {
+public class TestFileRowColContainer extends JMeterTestCase implements JMeterSerialTest {
 
     private String defaultBase = null;
 

File: src/functions/org/apache/jmeter/functions/FileRowColContainer.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.jmeter.functions;
 
 import java.io.BufferedReader;
-import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.nio.charset.Charset;
@@ -28,6 +27,7 @@
 import java.util.List;
 import java.util.StringTokenizer;
 
+import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.util.JMeterUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -75,7 +75,7 @@ public FileRowColContainer(String file) throws IOException, FileNotFoundExceptio
 
     private void load() throws IOException, FileNotFoundException {
         try (BufferedReader myBread = 
-                Files.newBufferedReader(new File(fileName).toPath(), 
+                Files.newBufferedReader(FileServer.getFileServer().getResolvedFile(fileName).toPath(), 
                         Charset.defaultCharset())) {
             String line = myBread.readLine();
             /*

File: src/core/org/apache/jmeter/engine/RemoteJMeterEngine.java
Patch:
@@ -21,7 +21,7 @@
 import java.io.File;
 import java.rmi.Remote;
 import java.rmi.RemoteException;
-import java.util.Properties;
+import java.util.HashMap;
 
 import org.apache.jorphan.collections.HashTree;
 
@@ -37,7 +37,7 @@ public interface RemoteJMeterEngine extends Remote {
 
     void rreset() throws RemoteException;
 
-    void rsetProperties(Properties p) throws RemoteException;
+    void rsetProperties(HashMap<String,String> p) throws RemoteException;
 
     void rexit() throws RemoteException;
 }

File: src/components/org/apache/jmeter/control/ThroughputController.java
Patch:
@@ -204,7 +204,7 @@ public boolean isDone() {
                             && current >= getSubControllers().size())
                             || (getMaxThroughputAsInt() == 0)))
                         || (getStyle() == BYPERCENT
-                            && getPercentThroughputAsFloat() == 0.0f)
+                            && Float.compare(getPercentThroughputAsFloat(), 0.0f)==0)
                         );
     }
 

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java
Patch:
@@ -628,7 +628,7 @@ public static void close(ResultSet rs) {
      * @return the integer representation queryTimeout
      */
     public int getIntegerQueryTimeout() {
-        int timeout = 0;
+        int timeout;
         if(StringUtils.isEmpty(queryTimeout)) {
             return 0;
         } else {

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -115,6 +115,7 @@ public final class ActionNames {
     public static final String VALIDATE_TG      = "validate_tg"; //$NON-NLS-1$
     public static final String ZOOM_IN          = "zoom_in"; //$NON-NLS-1$
     public static final String ZOOM_OUT         = "zoom_out"; //$NON-NLS-1$
+    public static final String PARSE_CURL       = "parse_curl"; ////$NON-NLS-1$
 
     // Prevent instantiation
     private ActionNames() {}

File: src/core/org/apache/jmeter/report/dashboard/JsonizerVisitor.java
Patch:
@@ -20,14 +20,13 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.commons.text.StringEscapeUtils;
 import org.apache.jmeter.report.core.JsonUtil;
 import org.apache.jmeter.report.processor.ListResultData;
 import org.apache.jmeter.report.processor.MapResultData;
 import org.apache.jmeter.report.processor.ResultData;
 import org.apache.jmeter.report.processor.ResultDataVisitor;
 import org.apache.jmeter.report.processor.ValueResultData;
-
-import org.apache.commons.text.StringEscapeUtils;
 /**
  * The class JsonizerVisitor provides a visitor that can get json-like string
  * from ResultData.

File: src/core/org/apache/jmeter/report/dashboard/JsonizerVisitor.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.jmeter.report.processor.ResultDataVisitor;
 import org.apache.jmeter.report.processor.ValueResultData;
 
+import org.apache.commons.text.StringEscapeUtils;
 /**
  * The class JsonizerVisitor provides a visitor that can get json-like string
  * from ResultData.
@@ -96,7 +97,7 @@ public String visitValueResult(ValueResultData valueResult) {
             Object value = valueResult.getValue();
             result = String.valueOf(value);
             if (value instanceof String) {
-                result = '"' + result + '"';
+                result = '"' + StringEscapeUtils.escapeEcmaScript(result.replace('\"', '\'')) + '"';
             }
         }
         return result;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -221,7 +221,7 @@ public void run() {
 
             samplerCreator = SAMPLERFACTORY.getSamplerCreator(request, pageEncodings, formEncodings);
             sampler = samplerCreator.createAndPopulateSampler(request, pageEncodings, formEncodings);
-
+            sampler.setUseKeepAlive(false);
             /*
              * Create a Header Manager to ensure that the browsers headers are
              * captured and sent to the server
@@ -233,6 +233,7 @@ public void run() {
             if (isDebug) {
                 log.debug("{} Execute sample: {} and url {}",port, sampler.getMethod(), sampler.getUrl());
             }
+            
             result = sampler.sample();
 
             // Find the page encoding and possibly encodings for forms in the page

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java
Patch:
@@ -43,7 +43,7 @@ public abstract class HTTPHCAbstractImpl extends HTTPAbstractImpl {
 
     private static final Logger log = LoggerFactory.getLogger(HTTPHCAbstractImpl.class);
 
-    protected static final String PROXY_SCHEME = System.getProperty("http.proxyScheme","");
+    protected static final String PROXY_SCHEME = System.getProperty("http.proxyScheme","http");
 
     protected static final String PROXY_HOST = System.getProperty("http.proxyHost","");
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -828,7 +828,7 @@ public int getResponseTimeout() {
     }
 
     public String getProxyScheme() {
-        return getPropertyAsString(PROXYSCHEME);
+        return getPropertyAsString(PROXYSCHEME, HTTPHCAbstractImpl.PROXY_SCHEME);
     }
 
     public String getProxyHost() {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -81,6 +81,7 @@
 import org.apache.jmeter.samplers.SampleEvent;
 import org.apache.jmeter.samplers.SampleListener;
 import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.testbeans.TestBeanHelper;
 import org.apache.jmeter.testelement.NonTestElement;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestPlan;
@@ -1437,6 +1438,7 @@ private void notifyTestListenersOfStart() {
                 if (subNode.isEnabled()) {
                     TestElement testElement = subNode.getTestElement();
                     if (testElement instanceof TestStateListener) {
+                        TestBeanHelper.prepare(testElement);
                         ((TestStateListener) testElement).testStarted();
                     }
                 }

File: test/src/org/apache/jmeter/protocol/http/parser/TestHTMLParser.java
Patch:
@@ -326,7 +326,7 @@ public void testNotCreatable() throws Exception {
             HTMLParser.getParser(TestClass.class.getName());
             fail("Should not have been able to create the parser");
         } catch (LinkExtractorParseException e) {
-            if (e.getCause() instanceof InstantiationException) {
+            if (e.getCause() instanceof ReflectiveOperationException) {
                 return;
             }
             throw e;

File: src/components/org/apache/jmeter/visualizers/backend/influxdb/InfluxdbBackendListenerClient.java
Patch:
@@ -365,7 +365,7 @@ public void setupTest(BackendListenerContext context) throws Exception {
         userTag = userTagBuilder.toString();
 
         Class<?> clazz = Class.forName(influxdbMetricsSender);
-        this.influxdbMetricsManager = (InfluxdbMetricsSender) clazz.newInstance();
+        this.influxdbMetricsManager = (InfluxdbMetricsSender) clazz.getDeclaredConstructor().newInstance();
         influxdbMetricsManager.setup(influxdbUrl);
         samplersToFilter = Pattern.compile(samplersRegex);
         addAnnotation(true);

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -222,7 +222,7 @@ private List<MenuCreator> findMenuCreators() {
                     Class<?> commandClass = Class.forName(strClassName);
                     if (!Modifier.isAbstract(commandClass.getModifiers())) {
                         log.debug("Instantiating: {}", commandClass);
-                        MenuCreator creator = (MenuCreator) commandClass.newInstance();
+                        MenuCreator creator = (MenuCreator) commandClass.getDeclaredConstructor().newInstance();
                         creators.add(creator);
                     }
                 } catch (Exception e) {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -284,7 +284,7 @@ private static void registerConverter(String key, XStream jmxsaver, boolean useM
         if (useMapper){
             jmxsaver.registerConverter((Converter) Class.forName(key).getConstructor(Mapper.class).newInstance(jmxsaver.getMapper()));
         } else {
-            jmxsaver.registerConverter((Converter) Class.forName(key).newInstance());
+            jmxsaver.registerConverter((Converter) Class.forName(key).getDeclaredConstructor().newInstance());
         }
     }
 

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -243,8 +243,8 @@ public GenericTestBeanCustomizer(){
 
                 if (editorClass != null) {
                     try {
-                        propertyEditor = (PropertyEditor) editorClass.newInstance();
-                    } catch (InstantiationException | IllegalAccessException e) {
+                        propertyEditor = (PropertyEditor) editorClass.getDeclaredConstructor().newInstance();
+                    } catch (ReflectiveOperationException e) {
                         log.error("Can't create property editor.", e);
                         throw new Error(e.toString());
                     }

File: src/core/org/apache/jmeter/threads/RemoteThreadsListenerImpl.java
Patch:
@@ -67,7 +67,7 @@ public RemoteThreadsListenerImpl() throws RemoteException {
                     Class<?> commandClass = Class.forName(strClassName);
                     if (!Modifier.isAbstract(commandClass.getModifiers())) {
                         log.debug("Instantiating: {}", commandClass);
-                        RemoteThreadsLifeCycleListener listener = (RemoteThreadsLifeCycleListener) commandClass.newInstance();
+                        RemoteThreadsLifeCycleListener listener = (RemoteThreadsLifeCycleListener) commandClass.getDeclaredConstructor().newInstance();
                         listeners.add(listener);
                     }
                 } catch (Exception e) {

File: src/core/org/apache/jmeter/gui/util/PowerTableModel.java
Patch:
@@ -157,7 +157,7 @@ public Object[] getRowData(int row) {
     private Object createDefaultValue(int i) { // CHECKSTYLE IGNORE ReturnCount
         Class<?> colClass = getColumnClass(i);
         try {
-            return colClass.newInstance();
+            return colClass.getDeclaredConstructor().newInstance();
         } catch (Exception e) {
             try {
                 Constructor<?> constr = colClass.getConstructor(new Class[] { String.class });

File: src/core/org/apache/jmeter/testbeans/gui/TableEditor.java
Patch:
@@ -298,7 +298,7 @@ private class AddListener implements ActionListener {
         @Override
         public void actionPerformed(ActionEvent e) {
             try {
-                model.addRow(clazz.newInstance());
+                model.addRow(clazz.getDeclaredConstructor().newInstance());
                 
                 removeButton.setEnabled(true);
                 clearButton.setEnabled(true);
@@ -321,7 +321,7 @@ public void actionPerformed(ActionEvent e) {
                 for (String clipboardLine : clipboardLines) {
                     String[] columns = clipboardLine.split("\t"); // $NON-NLS-1$
 
-                    model.addRow(clazz.newInstance());
+                    model.addRow(clazz.getDeclaredConstructor().newInstance());
                     
                     for (int i=0; i < columns.length; i++) {
                         model.setValueAt(columns[i], model.getRowCount() - 1, i);

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -171,7 +171,7 @@ private static JMeterGUIComponent getGUIComponent(
                         || (testBeanGUI.isExpert() && !JMeterUtils.isExpertMode());
                 item = testBeanGUI;
             } else {
-                item = (JMeterGUIComponent) c.newInstance();
+                item = (JMeterGUIComponent) c.getDeclaredConstructor().newInstance();
             }
         } catch (NoClassDefFoundError e) {
             log.warn("Configuration error, probably corrupt or missing third party library(jar)? Could not create class: {}.",

File: src/core/org/apache/jmeter/testelement/property/MapProperty.java
Patch:
@@ -118,7 +118,7 @@ public MapProperty clone() {
     private Map<String, JMeterProperty> cloneMap() {
         try {
             @SuppressWarnings("unchecked") // value is the correct class
-            Map<String, JMeterProperty> newCol = value.getClass().newInstance();
+            Map<String, JMeterProperty> newCol = value.getClass().getDeclaredConstructor().newInstance();
             PropertyIterator iter = valueIterator();
             while (iter.hasNext()) {
                 JMeterProperty item = iter.next();

File: src/core/org/apache/jmeter/util/BeanShellServer.java
Patch:
@@ -73,7 +73,7 @@ public void run() {
 
         try {
             Class<?> interpreter = loader.loadClass("bsh.Interpreter");//$NON-NLS-1$
-            Object instance = interpreter.newInstance();
+            Object instance = interpreter.getDeclaredConstructor().newInstance();
             Class<String> string = String.class;
             Class<Object> object = Object.class;
 

File: src/components/org/apache/jmeter/visualizers/RequestPanel.java
Patch:
@@ -63,7 +63,7 @@ public RequestPanel() {
         for (String clazz : classesToAdd) {
             try {
                 // Instantiate requestview classes
-                final RequestView requestView = (RequestView) Class.forName(clazz).newInstance();
+                final RequestView requestView = (RequestView) Class.forName(clazz).getDeclaredConstructor().newInstance();
                 if (rawTab.equals(requestView.getLabel())) {
                     rawObject = requestView; // use later
                 } else {

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -459,7 +459,7 @@ private Component createComboRender() {
         for (String clazz : classesToAdd) {
             try {
                 // Instantiate render classes
-                final ResultRenderer renderer = (ResultRenderer) Class.forName(clazz).newInstance();
+                final ResultRenderer renderer = (ResultRenderer) Class.forName(clazz).getDeclaredConstructor().newInstance();
                 if (textRenderer.equals(renderer.toString())){
                     textObject=renderer;
                 }

File: src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteBackendListenerClient.java
Patch:
@@ -340,7 +340,7 @@ public void setupTest(BackendListenerContext context) throws Exception {
             }
         }
         Class<?> clazz = Class.forName(graphiteMetricsSenderClass);
-        this.graphiteMetricsManager = (GraphiteMetricsSender) clazz.newInstance();
+        this.graphiteMetricsManager = (GraphiteMetricsSender) clazz.getDeclaredConstructor().newInstance();
         graphiteMetricsManager.setup(graphiteHost, graphitePort, rootMetricsPrefix);
         if (useRegexpForSamplersList) {
             pattern = Pattern.compile(samplersList);

File: src/core/org/apache/jmeter/NewDriver.java
Patch:
@@ -240,7 +240,7 @@ public static void main(String[] args) {
 
             try {
                 Class<?> initialClass = loader.loadClass("org.apache.jmeter.JMeter");// $NON-NLS-1$
-                Object instance = initialClass.newInstance();
+                Object instance = initialClass.getDeclaredConstructor().newInstance();
                 Method startup = initialClass.getMethod("start", new Class[] { new String[0].getClass() });// $NON-NLS-1$
                 startup.invoke(instance, new Object[] { args });
             } catch(Throwable e){ // NOSONAR We want to log home directory in case of exception

File: src/core/org/apache/jmeter/engine/util/CompoundVariable.java
Patch:
@@ -72,7 +72,7 @@ public class CompoundVariable implements Function {
             List<String> classes = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(),
                     new Class[] { Function.class }, true, contain, notContain);
             for (String clazzName : classes) {
-                Function tempFunc = (Function) Class.forName(clazzName).newInstance();
+                Function tempFunc = (Function) Class.forName(clazzName).getDeclaredConstructor().newInstance();
                 String referenceKey = tempFunc.getReferenceKey();
                 if (referenceKey.length() > 0) { // ignore self
                     functions.put(referenceKey, tempFunc.getClass());
@@ -195,7 +195,7 @@ public void setParameters(String parameters) throws InvalidVariableException {
     static Object getNamedFunction(String functionName) throws InvalidVariableException {
         if (functions.containsKey(functionName)) {
             try {
-                return functions.get(functionName).newInstance();
+                return functions.get(functionName).getDeclaredConstructor().newInstance();
             } catch (Exception e) {
                 log.error("Exception occurred while instantiating a function: {}", functionName, e); // $NON-NLS-1$
                 throw new InvalidVariableException(e);

File: src/core/org/apache/jmeter/save/converters/TestElementConverter.java
Patch:
@@ -96,7 +96,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
         }
         context.put(SaveService.TEST_CLASS_NAME, targetName); // needed by property converters  (Bug 52466)
         try {
-            TestElement el = (TestElement) type.newInstance();
+            TestElement el = (TestElement) type.getDeclaredConstructor().newInstance();
             // No need to check version, just process the attributes if present
             ConversionHelp.restoreSpecialProperties(el, reader);
             // Slight hack - we need to ensure the TestClass is not reset by the previous call
@@ -110,7 +110,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
                 reader.moveUp();
             }
             return el;
-        } catch (InstantiationException | IllegalAccessException e) {
+        } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {
             log.error("TestElement not instantiable: {}", type, e);
             return null;
         }

File: src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java
Patch:
@@ -101,7 +101,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
             prop.setName(ConversionHelp.decode(reader.getAttribute(ConversionHelp.ATT_NAME)));
             String element = reader.getAttribute(ConversionHelp.ATT_ELEMENT_TYPE);
             boolean isHeader = HEADER_CLASSNAME.equals(element);
-            prop.setObjectValue(mapper().realClass(element).newInstance());// Always decode
+            prop.setObjectValue(mapper().realClass(element).getDeclaredConstructor().newInstance());// Always decode
             TestElement te = (TestElement)prop.getObjectValue();
             // No need to check version, just process the attributes if present
             ConversionHelp.restoreSpecialProperties(te, reader);
@@ -122,7 +122,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
                 reader.moveUp();
             }
             return prop;
-        } catch (InstantiationException | IllegalAccessException e) {
+        } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {
             log.error("Couldn't unmarshall TestElementProperty", e);
             return new TestElementProperty("ERROR", new ConfigTestElement());// $NON-NLS-1$
         }

File: src/core/org/apache/jmeter/testelement/property/CollectionProperty.java
Patch:
@@ -143,7 +143,7 @@ public CollectionProperty clone() {
     private Collection<JMeterProperty> cloneCollection() {
         try {
             @SuppressWarnings("unchecked") // value is of type Collection<JMeterProperty>
-            Collection<JMeterProperty> newCol = value.getClass().newInstance();
+            Collection<JMeterProperty> newCol = value.getClass().getDeclaredConstructor().newInstance();
             for (JMeterProperty jMeterProperty : this) {
                 newCol.add(jMeterProperty.clone());
             }

File: src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java
Patch:
@@ -190,7 +190,7 @@ private void configureClassName() {
         String className = classNameLabeledChoice.getText().trim();
         try {
             JavaSamplerClient client = (JavaSamplerClient) Class.forName(className, true,
-                    Thread.currentThread().getContextClassLoader()).newInstance();
+                    Thread.currentThread().getContextClassLoader()).getDeclaredConstructor().newInstance();
 
             Arguments currArgs = new Arguments();
             argsPanel.modifyTestElement(currArgs);
@@ -270,7 +270,7 @@ public void configure(TestElement config) {
     private boolean classOk(String className) {
         try {
             JavaSamplerClient client = (JavaSamplerClient) Class.forName(className, true,
-                    Thread.currentThread().getContextClassLoader()).newInstance();
+                    Thread.currentThread().getContextClassLoader()).getDeclaredConstructor().newInstance();
             // Just to use client
             return client != null;
         } catch (Exception ex) {

File: src/jorphan/org/apache/jorphan/reflect/ClassTools.java
Patch:
@@ -41,9 +41,8 @@ public class ClassTools {
     public static Object construct(String className) throws JMeterException {
         Object instance = null;
         try {
-            instance = ClassUtils.getClass(className).newInstance();
-        } catch (ClassNotFoundException | IllegalAccessException
-                | InstantiationException e) {
+            instance = ClassUtils.getClass(className).getDeclaredConstructor().newInstance();
+        } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {
             throw new JMeterException(e);
         }
         return instance;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java
Patch:
@@ -128,7 +128,7 @@ public void run() {
                     Socket clientSocket = mainSocket.accept();
                     if (running) {
                         // Pass request to new proxy thread
-                        Proxy thd = proxyClass.newInstance();
+                        Proxy thd = proxyClass.getDeclaredConstructor().newInstance();
                         thd.configure(clientSocket, target, pageEncodings, formEncodings);
                         thd.start();
                     }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/SamplerCreatorFactory.java
Patch:
@@ -61,7 +61,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
                         if(log.isDebugEnabled()) {
                             log.debug("Instantiating: {}", commandClass.getName());
                         }
-                        SamplerCreator creator = (SamplerCreator) commandClass.newInstance();
+                        SamplerCreator creator = (SamplerCreator) commandClass.getDeclaredConstructor().newInstance();
                         String[] contentTypes = creator.getManagedContentTypes();
                         for (String contentType : contentTypes) {
                             if(log.isDebugEnabled()) {

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java
Patch:
@@ -219,7 +219,7 @@ private JavaSamplerClient createJavaClient() {
         }
         JavaSamplerClient client;
         try {
-            client = (JavaSamplerClient) javaClass.newInstance();
+            client = (JavaSamplerClient) javaClass.getDeclaredConstructor().newInstance();
 
             if (log.isDebugEnabled()) {
                 log.debug(whoAmI() + "\tCreated:\t" + getClassname() + "@"

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -334,7 +334,7 @@ private TCPClient getProtocol() {
             return null;
         }
         try {
-            tcpClient = (TCPClient) javaClass.newInstance();
+            tcpClient = (TCPClient) javaClass.getDeclaredConstructor().newInstance();
             if (getPropertyAsString(EOL_BYTE, "").length()>0){
                 tcpClient.setEolByte(getEolByte());
                 log.info("Using eolByte={}", getEolByte());

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/BaseParser.java
Patch:
@@ -58,7 +58,7 @@ public static LinkExtractorParser getParser(String parserClassName)
         // Is there a cached parser?
         LinkExtractorParser parser = PARSERS.get(parserClassName);
         if (parser != null) {
-            LOG.debug("Fetched " + parserClassName);
+            LOG.debug("Fetched {}", parserClassName);
             return parser;
         }
 
@@ -72,7 +72,7 @@ public static LinkExtractorParser getParser(String parserClassName)
         } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {
             throw new LinkExtractorParseException(e);
         }
-        LOG.info("Created " + parserClassName);
+        LOG.info("Created {}", parserClassName);
         if (parser.isReusable()) {
             LinkExtractorParser currentParser = PARSERS.putIfAbsent(
                     parserClassName, parser);// cache the parser if not already

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -71,15 +71,15 @@ public abstract class AbstractTestElement implements TestElement, Serializable,
     @Override
     public Object clone() {
         try {
-            TestElement clonedElement = this.getClass().newInstance();
+            TestElement clonedElement = this.getClass().getDeclaredConstructor().newInstance();
 
             PropertyIterator iter = propertyIterator();
             while (iter.hasNext()) {
                 clonedElement.setProperty(iter.next().clone());
             }
             clonedElement.setRunningVersion(runningVersion);
             return clonedElement;
-        } catch (InstantiationException | IllegalAccessException e) {
+        } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {
             throw new AssertionError(e); // clone should never return null
         }
     }

File: src/core/org/apache/jmeter/testelement/property/AbstractProperty.java
Patch:
@@ -255,7 +255,7 @@ protected Class<? extends JMeterProperty> getPropertyType() {
 
     protected JMeterProperty getBlankProperty() {
         try {
-            JMeterProperty prop = getPropertyType().newInstance();
+            JMeterProperty prop = getPropertyType().getDeclaredConstructor().newInstance();
             if (prop instanceof NullProperty) {
                 return new StringProperty();
             }
@@ -295,7 +295,7 @@ protected static JMeterProperty getBlankProperty(Object item) {
     protected Collection<JMeterProperty> normalizeList(Collection<?> coll) {
         try {
             @SuppressWarnings("unchecked") // empty collection
-            Collection<JMeterProperty> newColl = coll.getClass().newInstance();
+            Collection<JMeterProperty> newColl = coll.getClass().getDeclaredConstructor().newInstance();
             for (Object item : coll) {
                 newColl.add(convertObject(item));
             }
@@ -317,7 +317,7 @@ protected Collection<JMeterProperty> normalizeList(Collection<?> coll) {
     protected Map<String, JMeterProperty> normalizeMap(Map<?,?> coll) {
         try {
             @SuppressWarnings("unchecked") // empty collection
-            Map<String, JMeterProperty> newColl = coll.getClass().newInstance();
+            Map<String, JMeterProperty> newColl = coll.getClass().getDeclaredConstructor().newInstance();
             for (Map.Entry<?,?> entry : coll.entrySet()) {
                 Object key = entry.getKey();
                 Object prop = entry.getValue();

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/BaseParser.java
Patch:
@@ -63,14 +63,13 @@ public static LinkExtractorParser getParser(String parserClassName)
         }
 
         try {
-            Object clazz = Class.forName(parserClassName).newInstance();
+            Object clazz = Class.forName(parserClassName).getDeclaredConstructor().newInstance();
             if (clazz instanceof LinkExtractorParser) {
                 parser = (LinkExtractorParser) clazz;
             } else {
                 throw new LinkExtractorParseException(new ClassCastException(parserClassName));
             }
-        } catch (InstantiationException | ClassNotFoundException
-                | IllegalAccessException e) {
+        } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {
             throw new LinkExtractorParseException(e);
         }
         LOG.info("Created " + parserClassName);

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
Patch:
@@ -35,6 +35,7 @@
 import javax.swing.JTextField;
 
 import org.apache.commons.lang3.ArrayUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.config.gui.ArgumentsPanel;
@@ -204,7 +205,7 @@ private Arguments copyDefaultArguments(Map<String, String> currArgsMap, Argument
                 // values that they did in the original test.
                 if (currArgsMap.containsKey(name)) {
                     String newVal = currArgsMap.get(name);
-                    if (newVal != null && newVal.length() > 0) {
+                    if (StringUtils.isNotBlank(newVal)) {
                         value = newVal;
                     }
                 }

File: src/components/org/apache/jmeter/visualizers/backend/BackendListener.java
Patch:
@@ -279,7 +279,7 @@ static BackendListenerClient createBackendListenerClientImpl(Class<?> clientClas
             return new ErrorBackendListenerClient();
         }
         try {
-            return (BackendListenerClient) clientClass.newInstance();
+            return (BackendListenerClient) clientClass.getDeclaredConstructor().newInstance();
         } catch (Exception e) {
             log.error("Exception creating: {}", clientClass, e);
             return new ErrorBackendListenerClient();

File: src/core/org/apache/jmeter/util/BeanShellInterpreter.java
Patch:
@@ -22,6 +22,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jorphan.util.JMeterError;
 import org.apache.jorphan.util.JMeterException;
 import org.slf4j.Logger;
@@ -122,7 +123,7 @@ private void init() throws ClassNotFoundException {
                 log.warn("Can't set logger variable", e);
             }
         }
-        if (initFile != null && initFile.length() > 0) {
+        if (StringUtils.isNotBlank(initFile)) {
             String fileToUse=initFile;
             // Check file so we can distinguish file error from script error
             File in = new File(fileToUse);

File: src/core/org/apache/jmeter/util/BeanShellInterpreter.java
Patch:
@@ -95,12 +95,12 @@ public BeanShellInterpreter() throws ClassNotFoundException {
     /**
      *
      * @param init initialisation file
-     * @param _log logger to pass to interpreter
+     * @param log logger to pass to interpreter
      * @throws ClassNotFoundException when beanshell can not be instantiated
      */
-    public BeanShellInterpreter(String init, Logger _log)  throws ClassNotFoundException {
+    public BeanShellInterpreter(String init, Logger log)  throws ClassNotFoundException {
         initFile = init;
-        logger = _log;
+        logger = log;
         init();
     }
 

File: src/core/org/apache/jmeter/util/BeanShellInterpreter.java
Patch:
@@ -136,16 +136,16 @@ private void init() throws ClassNotFoundException {
                         +File.separator+initFile;
                 in = new File(fileToUse);
                 if (!in.exists()) {
-                    log.warn("Cannot find init file: "+initFile);
+                    log.warn("Cannot find init file: {}", initFile);
                 }
             }
             if (!in.canRead()) {
-                log.warn("Cannot read init file: "+fileToUse);
+                log.warn("Cannot read init file: {}", fileToUse);
             }
             try {
                 source(fileToUse);
             } catch (JMeterException e) {
-                log.warn("Cannot source init file: "+fileToUse,e);
+                log.warn("Cannot source init file: {}", fileToUse,e);
             }
         }
     }

File: src/core/org/apache/jmeter/gui/action/ActionRouter.java
Patch:
@@ -369,7 +369,7 @@ public void populateCommandMap() {
             }
             for (String strClassName : listClasses) {
                 Class<?> commandClass = Class.forName(strClassName);
-                Command command = (Command) commandClass.newInstance();
+                Command command = (Command) commandClass.getDeclaredConstructor().newInstance();
                 for (String commandName : command.getActionNames()) {
                     Set<Command> commandObjects = commands.computeIfAbsent(commandName, k -> new HashSet<>());
                     commandObjects.add(command);

File: src/core/org/apache/jmeter/util/BeanShellInterpreter.java
Patch:
@@ -114,8 +114,8 @@ private void init() throws ClassNotFoundException {
             throw new ClassNotFoundException(BSH_INTERPRETER);
         }
         try {
-            bshInstance = bshClass.newInstance();
-        } catch (InstantiationException | IllegalAccessException e) {
+            bshInstance = bshClass.getDeclaredConstructor().newInstance();
+        } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {
             log.error("Can't instantiate BeanShell", e);
             throw new ClassNotFoundException("Can't instantiate BeanShell", e);
         } 

File: test/src/org/apache/jorphan/test/AllTests.java
Patch:
@@ -308,11 +308,10 @@ private static void initializeManager(String[] args) {
         if (args.length >= 3) {
             try {
                 System.out.println("Using initializeProperties() from " + args[2]);
-                UnitTestManager um = (UnitTestManager) Class.forName(args[2]).newInstance();
+                UnitTestManager um = (UnitTestManager) Class.forName(args[2]).getDeclaredConstructor().newInstance();
                 System.out.println("Setting up initial properties using: " + args[1]);
                 um.initializeProperties(args[1]);
-            } catch (ClassNotFoundException | IllegalAccessException
-                    | InstantiationException e) {
+            } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {
                 System.out.println("Couldn't create: " + args[2]);
                 e.printStackTrace();
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java
Patch:
@@ -309,7 +309,7 @@ protected void initFilter() {
             try {
                 filter = (Filter) Class.forName(filterClassName).getDeclaredConstructor().newInstance();
             } catch (Exception e) {
-                log.warn("Couldn't instantiate filter '" + filterClassName + "'", e);
+                log.warn("Couldn't instantiate filter '{}'", filterClassName, e);
             }
         }
     }

File: src/core/org/apache/jmeter/gui/action/SelectTemplatesDialog.java
Patch:
@@ -212,7 +212,7 @@ void replaceTemplateParametersAndLoad(final ActionEvent actionEvent, final Templ
      * @param actionEvent {@link ActionEvent}
      * @return true if plan is not dirty or has been saved 
      */
-    boolean checkDirty(final ActionEvent actionEvent) {
+    private boolean checkDirty(final ActionEvent actionEvent) {
         ActionRouter.getInstance().doActionNow(new ActionEvent(actionEvent.getSource(), actionEvent.getID(), ActionNames.CHECK_DIRTY));
         GuiPackage guiPackage = GuiPackage.getInstance();
         if (guiPackage.isDirty()) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java
Patch:
@@ -43,6 +43,8 @@ public abstract class HTTPHCAbstractImpl extends HTTPAbstractImpl {
 
     private static final Logger log = LoggerFactory.getLogger(HTTPHCAbstractImpl.class);
 
+    protected static final String PROXY_SCHEME = System.getProperty("http.proxyScheme","");
+
     protected static final String PROXY_HOST = System.getProperty("http.proxyHost","");
 
     protected static final String NONPROXY_HOSTS = System.getProperty("http.nonProxyHosts","");

File: src/components/org/apache/jmeter/extractor/BoundaryExtractor.java
Patch:
@@ -26,8 +26,8 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.text.StringEscapeUtils;
 import org.apache.jmeter.processor.PostProcessor;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.AbstractScopedTestElement;

File: src/components/org/apache/jmeter/extractor/RegexExtractor.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.apache.commons.lang3.StringEscapeUtils;
+import org.apache.commons.text.StringEscapeUtils;
 import org.apache.jmeter.processor.PostProcessor;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.AbstractScopedTestElement;

File: src/core/org/apache/jmeter/report/dashboard/HtmlTemplateExporter.java
Patch:
@@ -27,9 +27,9 @@
 import java.util.regex.PatternSyntaxException;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.Validate;
+import org.apache.commons.text.StringEscapeUtils;
 import org.apache.jmeter.JMeter;
 import org.apache.jmeter.report.config.ConfigurationException;
 import org.apache.jmeter.report.config.ExporterConfiguration;

File: src/core/org/apache/jmeter/report/processor/ErrorsSummaryConsumer.java
Patch:
@@ -17,8 +17,8 @@
  */
 package org.apache.jmeter.report.processor;
 
-import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.text.StringEscapeUtils;
 import org.apache.jmeter.report.core.Sample;
 import org.apache.jmeter.report.utils.MetricUtils;
 import org.apache.jmeter.samplers.SampleSaveConfiguration;

File: src/functions/org/apache/jmeter/functions/EscapeHtml.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.apache.commons.lang3.StringEscapeUtils;
+import org.apache.commons.text.StringEscapeUtils;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;

File: src/functions/org/apache/jmeter/functions/EscapeXml.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.apache.commons.lang3.StringEscapeUtils;
+import org.apache.commons.text.StringEscapeUtils;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;

File: src/functions/org/apache/jmeter/functions/UnEscape.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.apache.commons.lang3.StringEscapeUtils;
+import org.apache.commons.text.StringEscapeUtils;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;

File: src/functions/org/apache/jmeter/functions/UnEscapeHtml.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.apache.commons.lang3.StringEscapeUtils;
+import org.apache.commons.text.StringEscapeUtils;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
@@ -40,7 +40,7 @@
  * If an entity is unrecognized, it is left alone, and inserted verbatim into the result string.
  * e.g. "&amp;gt;&amp;zzzz;x" will become "&gt;&amp;zzzz;x".
  * </p>
- * @see org.apache.commons.lang3.StringEscapeUtils#unescapeHtml4(String)
+ * @see StringEscapeUtils#unescapeHtml4(String)
  * @since 2.3.3
  */
 public class UnEscapeHtml extends AbstractFunction {

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/URLCollection.java
Patch:
@@ -23,8 +23,8 @@
 import java.util.Collection;
 import java.util.Iterator;
 
-import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.commons.lang3.Validate;
+import org.apache.commons.text.StringEscapeUtils;
 import org.apache.jmeter.protocol.http.util.ConversionUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
Patch:
@@ -39,7 +39,7 @@
 import javax.naming.directory.ModificationItem;
 import javax.naming.directory.SearchResult;
 
-import org.apache.commons.lang3.StringEscapeUtils;
+import org.apache.commons.text.StringEscapeUtils;
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.config.ConfigTestElement;

File: src/core/org/apache/jmeter/report/processor/PercentileAggregator.java
Patch:
@@ -50,7 +50,7 @@ public PercentileAggregator(double index) {
      * @param lastAggregator {@link PercentileAggregator}
      */
     public PercentileAggregator(PercentileAggregator lastAggregator) {
-        this.statistics = new DescriptiveStatistics(lastAggregator.statistics);
+        statistics = new DescriptiveStatistics(SLIDING_WINDOW_SIZE);
         this.percentileIndex = lastAggregator.percentileIndex;
     }
 

File: src/core/org/apache/jmeter/threads/JMeterContext.java
Patch:
@@ -143,9 +143,7 @@ public Sampler getPreviousSampler() {
     }
 
     /**
-     * Returns the threadNum which starts at 0
-     *
-     * @return int
+     * @return the threadNum starting from one
      */
     public int getThreadNum() {
         return threadNum;

File: src/core/org/apache/jmeter/threads/JMeterContext.java
Patch:
@@ -143,7 +143,7 @@ public Sampler getPreviousSampler() {
     }
 
     /**
-     * Returns the threadNum.
+     * Returns the threadNum which starts at 0
      *
      * @return int
      */

File: src/components/org/apache/jmeter/control/ForeachController.java
Patch:
@@ -199,6 +199,7 @@ private boolean endOfArguments() {
     // Prevent entry if nothing to do
     @Override
     public Sampler next() {
+        updateIterationIndex(getName(), loopCount);
         try {
             if (breakLoop || emptyList()) {
                 resetBreakLoop();

File: src/core/org/apache/jmeter/control/LoopController.java
Patch:
@@ -123,6 +123,7 @@ private boolean getContinueForever() {
      */
     @Override
     public Sampler next() {
+        updateIterationIndex(getName(), loopCount);
         try {
             if(endOfLoop()) {
                 if (!getContinueForever()) {

File: src/core/org/apache/jmeter/control/WhileController.java
Patch:
@@ -108,6 +108,7 @@ public void triggerEndOfLoop() {
      */
     @Override
     public Sampler next(){
+        updateIterationIndex(getName(), getIterCount());
         try {
             if (isFirst() && endOfLoop(false)) {
                 resetBreakLoop();

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java
Patch:
@@ -63,7 +63,7 @@ public abstract class AbstractSamplerCreator implements SamplerCreator {
     
     static {
         String binaries = JMeterUtils.getPropDefault("proxy.binary.types", // $NON-NLS-1$
-                "application/x-amf,application/x-java-serialized-object"); // $NON-NLS-1$
+                "application/x-amf,application/x-java-serialized-object,binary/octet-stream"); // $NON-NLS-1$
         if (binaries.length() > 0){
             StringTokenizer s = new StringTokenizer(binaries,"|, ");// $NON-NLS-1$
             while (s.hasMoreTokens()){

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -1204,7 +1204,7 @@ private static ReplaceableController ensureReplaceableControllerIsLoaded(
      * it calls ClientJMeterEngine.tidyRMI() to deal with the Naming Timer Thread.
      */
     private static class ListenToTest implements TestStateListener, Runnable, Remoteable {
-        private final AtomicInteger started = new AtomicInteger(0); // keep track of remote tests
+        private AtomicInteger startedEngines; // keep track of remote tests
 
         private final List<JMeterEngine> engines;
 
@@ -1216,6 +1216,7 @@ private static class ListenToTest implements TestStateListener, Runnable, Remote
          */
         public ListenToTest(List<JMeterEngine> engines, ReportGenerator reportGenerator) {
             this.engines=engines;
+            this.startedEngines = new AtomicInteger(engines == null ? 0 : engines.size());
             this.reportGenerator = reportGenerator;
         }
 
@@ -1224,7 +1225,7 @@ public ListenToTest(List<JMeterEngine> engines, ReportGenerator reportGenerator)
         public void testEnded(String host) {
             final long now=System.currentTimeMillis();
             log.info("Finished remote host: {} ({})", host, now);
-            if (started.decrementAndGet() <= 0) {
+            if (startedEngines.decrementAndGet() <= 0) {
                 Thread stopSoon = new Thread(this);
                 // the calling thread is a daemon; this thread must not be
                 // see Bug 59391
@@ -1249,7 +1250,6 @@ public void testEnded() {
 
         @Override
         public void testStarted(String host) {
-            started.incrementAndGet();
             final long now=System.currentTimeMillis();
             log.info("Started remote host:  {} ({})", host, now);
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -523,8 +523,7 @@ private String messageResponseHeaders(SampleResult res) {
                 if (HTTPConstants.HEADER_CONTENT_ENCODING.equalsIgnoreCase(parts[0])
                     && (HTTPConstants.ENCODING_GZIP.equalsIgnoreCase(parts[1])
                             || HTTPConstants.ENCODING_DEFLATE.equalsIgnoreCase(parts[1])
-                            // TODO BROTLI not supported by HC4, so no uncompression would occur, add it once available
-                            // || HTTPConstants.ENCODING_BROTLI.equalsIgnoreCase(parts[1]) 
+                            || HTTPConstants.ENCODING_BROTLI.equalsIgnoreCase(parts[1]) 
                             )
                 ){
                     headerLines[i] = null; // We don't want this passed on to browser

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/hc/LaxDeflateInputStream.java
Patch:
@@ -23,10 +23,9 @@
 import java.io.InputStream;
 
 import org.apache.http.client.entity.DeflateInputStream;
-import org.apache.http.client.entity.DeflateInputStreamFactory;
 
 /**
- * {@link DeflateInputStreamFactory} subclass that has a flag to accept 
+ * {@link DeflateInputStream} subclass that has a flag to accept 
  * "edgy streams" that signal end of stream with {@link EOFException} 
  * which seems to be rather frequent
  * 

File: src/core/org/apache/jmeter/testbeans/gui/TextAreaEditor.java
Patch:
@@ -84,7 +84,7 @@ public TextAreaEditor(Object source) {
      *            to be used for the editor. Must not be <code>null</code>
      */
     public TextAreaEditor(PropertyDescriptor descriptor) {
-        textUI = JSyntaxTextArea.getInstance(20, 20);
+        textUI = JSyntaxTextArea.getInstance(10, 60);
         textUI.setLanguage((String) descriptor.getValue(GenericTestBeanCustomizer.TEXT_LANGUAGE));
         scroller = JTextScrollPane.getInstance(textUI, true);
         init();

File: src/components/org/apache/jmeter/visualizers/SummaryReport.java
Patch:
@@ -44,7 +44,6 @@
 import javax.swing.border.Border;
 import javax.swing.border.EmptyBorder;
 import javax.swing.table.TableCellRenderer;
-import javax.swing.text.NumberFormatter;
 
 import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.FileDialoger;

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -81,6 +81,7 @@ public final class ActionNames {
     public static final String REMOTE_STOP      = "remote_stop"; // $NON-NLS-1$
     public static final String REMOTE_STOP_ALL  = "remote_stop_all"; // $NON-NLS-1$
     public static final String REMOVE           = "remove"; // $NON-NLS-1$
+    public static final String RESTART          = "restart"; // $NON-NLS-1$
     public static final String REVERT_PROJECT   = "revert_project"; // $NON-NLS-1$
     public static final String SAVE             = "save"; // $NON-NLS-1$
     public static final String SAVE_ALL_AS      = "save_all_as";  // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java
Patch:
@@ -133,7 +133,7 @@ public void doAction(ActionEvent ev) {
                     JMeterUtils.getResString("exit"), // $NON-NLS-1$
                     JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
             if (chosenOption == JOptionPane.YES_OPTION) {
-                ActionRouter.getInstance().doActionNow(new ActionEvent(ev.getSource(), ev.getID(), ActionNames.EXIT));
+                ActionRouter.getInstance().doActionNow(new ActionEvent(ev.getSource(), ev.getID(), ActionNames.RESTART));
             }
         } catch (UnsupportedLookAndFeelException
                 | InstantiationException

File: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplers.java
Patch:
@@ -22,6 +22,8 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 
+import java.io.File;
+
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
@@ -30,8 +32,6 @@
 import org.apache.jmeter.services.FileServer;
 import org.junit.Test;
 
-import java.io.File;
-
 public class TestHTTPSamplers {
 
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -1464,8 +1464,7 @@ else if(ADD_CONTENT_TYPE_TO_POST_IF_MISSING) {
                         entityEnclosingRequest.setHeader(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
                     }
                 }
-
-                FileEntity fileRequestEntity = new FileEntity(new File(file.getPath()),(ContentType) null);
+                FileEntity fileRequestEntity = new FileEntity(FileServer.getFileServer().getResolvedFile(file.getPath()), (ContentType) null);
                 entityEnclosingRequest.setEntity(fileRequestEntity);
 
                 // We just add placeholder text for file content

File: src/junit/org/apache/jmeter/protocol/java/control/gui/ClassFilter.java
Patch:
@@ -51,7 +51,7 @@ String[] filterArray(List<String> items) {
                 newlist.add(item);
             }
         }
-        if (newlist.size() > 0) {
+        if (!newlist.isEmpty()) {
             return newlist.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
         } else {
             return ArrayUtils.EMPTY_STRING_ARRAY;

File: src/components/org/apache/jmeter/config/KeystoreConfig.java
Patch:
@@ -70,7 +70,7 @@ public void testStarted(String host) {
             log.warn("https.use.cached.ssl.context property must be set to false to ensure Multiple Certificates are used");
         }
         int startIndexAsInt = JMeterUtils.getPropDefault(KEY_STORE_START_INDEX, 0);
-        int endIndexAsInt = JMeterUtils.getPropDefault(KEY_STORE_END_INDEX, 0);
+        int endIndexAsInt = JMeterUtils.getPropDefault(KEY_STORE_END_INDEX, -1);
         
         if(!StringUtils.isEmpty(this.startIndex)) {
             try {
@@ -89,7 +89,7 @@ public void testStarted(String host) {
                         endIndexAsInt, e, e);
             }
         } 
-        if(startIndexAsInt>endIndexAsInt) {
+        if(endIndexAsInt != -1 && startIndexAsInt>endIndexAsInt) {
             throw new JMeterStopTestException("Keystore Config error : Alias start index must be lower than Alias end index");
         }
         log.info(

File: src/components/org/apache/jmeter/extractor/XPath2Extractor.java
Patch:
@@ -116,7 +116,7 @@ public void process() {
                 String inputString=vars.get(getVariableName());
                 if(inputString != null) {
                     if(inputString.length()>0) {
-                        getValuesForXPath(getXPathQuery(), matches, matchNumber,previousResult.getResponseDataAsString());
+                        getValuesForXPath(getXPathQuery(), matches, matchNumber, inputString);
                     }
                 } else {
                     if (log.isWarnEnabled()) {
@@ -152,7 +152,7 @@ public void process() {
             }
         }catch (Exception e) {// Saxon exception
             if (log.isWarnEnabled()) {
-                log.warn("Exception while processing '{})', message:{}", getXPathQuery(), e.getMessage());
+                log.warn("Exception while processing '{}', message:{}", getXPathQuery(), e.getMessage());
             }
             addAssertionFailure(previousResult, e, false);
         }

File: src/core/org/apache/jmeter/rmi/RmiUtils.java
Patch:
@@ -112,6 +112,7 @@ public static RMIServerSocketFactory createServerSocketFactory() throws RemoteEx
         }
         SSLRMIServerSocketFactory factory = new SSLRMIServerSocketFactory(getRmiHost());
         factory.setAlias(KEYSTORE_ALIAS);
+        factory.setNeedClientAuth(true);
         factory.setKeystore(KEYSTORE_FILE, KEYSTORE_TYPE, KEYSTORE_PASSWORD);
         factory.setTruststore(TRUSTSTORE_FILE, TRUSTSTORE_TYPE, TRUSTSTORE_PASSWORD);
         return factory;

File: src/core/org/apache/jmeter/gui/tree/JMeterCellRenderer.java
Patch:
@@ -67,7 +67,7 @@ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean
                 // icon
                 ic = node.getIcon();
                 if (ic != null) {
-                    setIcon(ic);
+                    setDisabledIcon(ic);
                 }
             }
         }

File: src/core/org/apache/jmeter/engine/RemoteJMeterEngineImpl.java
Patch:
@@ -124,7 +124,9 @@ private void init() throws RemoteException {
      *
      * @param testTree
      *            the feature to be added to the ThreadGroup attribute
-     * @param host Host and Port
+     * @param hostAndPort Host and Port
+     * @param jmxBase JMX base
+     * @param scriptName Name of script
      */
     @Override
     public void rconfigure(HashTree testTree, String hostAndPort, File jmxBase, String scriptName) throws RemoteException {

File: src/core/org/apache/jmeter/gui/action/Restart.java
Patch:
@@ -60,7 +60,7 @@ public class Restart extends AbstractActionWithNoRunningTest implements MenuCrea
     }
 
     /**
-     * @see Command#doActionAfterCheck(ActionEvent)
+     * @see Command#doAction(ActionEvent)
      */
     @Override
     public void doActionAfterCheck(ActionEvent e) {

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -650,7 +650,6 @@ public void addSubResult(SampleResult subResult, boolean renameSubResults) {
      * 
      * @param subResult
      *            the {@link SampleResult} to be added
-     * @param renameSubResults boolean do we rename subResults based on position
      */
     public void addRawSubResult(SampleResult subResult){
         storeSubResult(subResult, true);

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -297,7 +297,9 @@ private JMeterThread makeThread(
         jmeterThread.setThreadNum(threadNumber);
         jmeterThread.setThreadGroup(this);
         jmeterThread.setInitialContext(context);
-        final String threadName = groupName + " " + groupNumber + "-" + (threadNumber + 1);
+        String distributedPrefix = 
+                JMeterUtils.getPropDefault(JMeterUtils.THREAD_GROUP_DISTRIBUTED_PREFIX_PROPERTY_NAME, "");
+        final String threadName = distributedPrefix + (distributedPrefix.isEmpty() ? "":"-") +groupName + " " + groupNumber + "-" + (threadNumber + 1);
         jmeterThread.setThreadName(threadName);
         jmeterThread.setEngine(engine);
         jmeterThread.setOnErrorStopTest(onErrorStopTest);

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -80,7 +80,10 @@
  */
 public class JMeterUtils implements UnitTestManager {
     private static final Logger log = LoggerFactory.getLogger(JMeterUtils.class);
+
     private static final String JMETER_VARS_PREFIX = "__jm__";
+    public static final String THREAD_GROUP_DISTRIBUTED_PREFIX_PROPERTY_NAME = "__jm.D_TG";
+
     // Note: cannot use a static variable here, because that would be processed before the JMeter properties
     // have been defined (Bug 52783)
     private static class LazyPatternCacheHolder {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
Patch:
@@ -137,6 +137,7 @@ public void addCookieFromHeader(CookieManager cookieManager,
                         } catch (MalformedCookieException e) { // This means the cookie was wrong for the URL
                             log.info("Not storing invalid cookie: <{}> for URL {} ({})",
                                 cookieHeader, url, e.getLocalizedMessage());
+                            continue;
                         }
                     }
                     Date expiryDate = cookie.getExpiryDate();

File: src/components/org/apache/jmeter/extractor/HtmlExtractor.java
Patch:
@@ -171,7 +171,7 @@ private List<String> extractMatchingStrings(
                 getExtractorImpl().extract(expression, attribute, matchNumber, inputString, result, found, "-1");
             } else {
                 if (inputString==null && log.isWarnEnabled()) {
-                    log.warn("No variable '{}' found to process by CSS/JQuery Extractor '{}', skipping processing",
+                    log.warn("No variable '{}' found to process by CSS Selector Extractor '{}', skipping processing",
                             getVariableName(), getName());
                 }
                 return Collections.emptyList();

File: src/functions/org/apache/jmeter/functions/RandomFromMultipleVars.java
Patch:
@@ -38,7 +38,7 @@
  * Those kind of variables are extracted by:
  * - Regular Expression extractor
  * - JSON extractor
- * - CSS/JQuery extractor
+ * - CSS Selector extractor
  * - XPath Extractor
  * 
  * @since 3.1

File: test/src/org/apache/jmeter/report/processor/graph/impl/CustomGraphConsumerTest.java
Patch:
@@ -114,8 +114,8 @@ public void testCreateGroupInfos() {
         // Testing defaults values
         assertThat(map.containsKey("Generic group"), equalTo(true));
         assertThat(map.containsKey("foo"), equalTo(false));
-        assertThat(map.get("Generic group").getAggregatorFactory().getClass().toString(), 
-                equalTo("class org.apache.jmeter.report.processor.TimeRateAggregatorFactory"));
+        assertThat(map.get("Generic group").getAggregatorFactory().getClass(), 
+                equalTo(org.apache.jmeter.report.processor.MeanAggregatorFactory.class));
         GroupData groupData = map.get("Generic group").getGroupData();
         assertThat(groupData.getOverallSeries(), equalTo(null));
         assertThat(groupData.getSeriesInfo(), equalTo(new HashMap<String, SeriesData>()));

File: src/core/org/apache/jmeter/control/TransactionSampler.java
Patch:
@@ -116,7 +116,7 @@ public void addSubSamplerResult(SampleResult res) {
             noFailingSamples++;
         }
         // Add the sub result to the transaction result
-        transactionSampleResult.addSubResult(res);
+        transactionSampleResult.addSubResult(res, false);
         // Add current time to total for later use (exclude pause time)
         totalTime += res.getTime();
     }

File: src/core/org/apache/jmeter/timers/TimerService.java
Patch:
@@ -65,7 +65,7 @@ public long adjustDelay(final long initialDelay) {
     public long adjustDelay(final long initialDelay, long endTime) {
         if (endTime > 0) {
             long now = System.currentTimeMillis();
-            if(now + initialDelay > endTime) {
+            if (initialDelay > endTime - now) {
                 return endTime - now;
             }
         }

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
Patch:
@@ -252,6 +252,7 @@ private SendMailCommand createSendMailCommandFromProperties() throws AddressExce
         sendMailCmd.setUseStartTLS(getPropertyAsBoolean(SecuritySettingsPanel.USE_STARTTLS));
         sendMailCmd.setTrustAllCerts(getPropertyAsBoolean(SecuritySettingsPanel.SSL_TRUST_ALL_CERTS));
         sendMailCmd.setEnforceStartTLS(getPropertyAsBoolean(SecuritySettingsPanel.ENFORCE_STARTTLS));
+        sendMailCmd.setTlsProtocolsToUse(getPropertyAsString(SecuritySettingsPanel.TLS_PROTOCOLS));
 
         sendMailCmd.setUseAuthentication(getPropertyAsBoolean(USE_AUTH));
         sendMailCmd.setUsername(getPropertyAsString(USERNAME));

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
Patch:
@@ -512,7 +512,7 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe
 
         HTTPSampleResult res = new HTTPSampleResult();
 
-        res.setSampleLabel(urlStr);
+        res.setSampleLabel(this.testElement.getName());
         res.setURL(url);
         res.setHTTPMethod(method);
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -230,7 +230,7 @@ public class ProxyControl extends GenericController implements NonTestElement {
     // The alias to be used if dynamic host names are not possible
     static final String JMETER_SERVER_ALIAS = ":jmeter:"; // $NON-NLS-1$
 
-    public static final int CERT_VALIDITY = JMeterUtils.getPropDefault("proxy.cert.validity", 90); // $NON-NLS-1$
+    public static final int CERT_VALIDITY = JMeterUtils.getPropDefault("proxy.cert.validity", 7); // $NON-NLS-1$
 
     // If this is defined, it is assumed to be the alias of a user-supplied certificate; overrides dynamic mode
     static final String CERT_ALIAS = JMeterUtils.getProperty("proxy.cert.alias"); // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/action/Restart.java
Patch:
@@ -107,7 +107,7 @@ public static void restartApplication(Runnable runBeforeRestart) {
         final StringBuilder cmd = new StringBuilder(java + " " + vmArgsOneLine);
 
         // program main and program arguments
-        String[] mainCommand = System.getProperty(SUN_JAVA_COMMAND).split(" ");
+        String[] mainCommand = javaCommand.split(" ");
         // program main is a jar
         if (mainCommand[0].endsWith(".jar")) {
             // if it's a jar, add -jar mainJar

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -239,7 +239,7 @@ public void process(HttpRequest request, HttpContext context) throws HttpExcepti
             } else {
                 try {
                     requestURI = new URI(request.getRequestLine().getUri());
-                } catch (final URISyntaxException ignore) {
+                } catch (final URISyntaxException ignore) { // NOSONAR
                     // NOOP
                 }
             }

File: src/core/org/apache/jmeter/gui/action/Restart.java
Patch:
@@ -79,9 +79,8 @@ public void doAction(ActionEvent e) {
      * 
      * @param runBeforeRestart
      *            some custom code to be run before restarting
-     * @throws Exception
      */
-    public static void restartApplication(Runnable runBeforeRestart) throws Exception {
+    public static void restartApplication(Runnable runBeforeRestart) {
         // java binary
         String java = System.getProperty("java.home") + "/bin/java";
         // vm arguments

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -267,6 +267,8 @@ public class SampleResult implements Serializable, Cloneable, Searchable {
     private URL location;
 
     private transient boolean ignore;
+    
+    private transient int subResultIndex;
 
     /**
      * Cache for responseData as string to avoid multiple computations
@@ -657,6 +659,7 @@ public void storeSubResult(SampleResult subResult) {
         if (subResults == null) {
             subResults = new ArrayList<>();
         }
+        subResult.setSampleLabel(getSampleLabel()+"-"+subResultIndex++);
         subResults.add(subResult);
         subResult.setParent(this);
     }

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -332,7 +332,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
         
         SENT_BYTES = TRUE.equalsIgnoreCase(props.getProperty(SAVE_SENT_BYTES_PROP, TRUE));
 
-        URL = TRUE.equalsIgnoreCase(props.getProperty(SAVE_URL_PROP, FALSE));
+        URL = TRUE.equalsIgnoreCase(props.getProperty(SAVE_URL_PROP, TRUE));
 
         FILE_NAME = TRUE.equalsIgnoreCase(props.getProperty(SAVE_FILENAME_PROP, FALSE));
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -803,7 +803,7 @@ protected void handleMethod(String method, HTTPSampleResult result,
     protected HTTPSampleResult createSampleResult(URL url, String method) {
         HTTPSampleResult res = new HTTPSampleResult();
 
-        res.setSampleLabel(url.toString()); // May be replaced later
+        res.setSampleLabel(this.testElement.getName());
         res.setHTTPMethod(method);
         res.setURL(url);
         

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -230,7 +230,7 @@ public class ProxyControl extends GenericController implements NonTestElement {
     // The alias to be used if dynamic host names are not possible
     static final String JMETER_SERVER_ALIAS = ":jmeter:"; // $NON-NLS-1$
 
-    public static final int CERT_VALIDITY = JMeterUtils.getPropDefault("proxy.cert.validity", 7); // $NON-NLS-1$
+    public static final int CERT_VALIDITY = JMeterUtils.getPropDefault("proxy.cert.validity", 90); // $NON-NLS-1$
 
     // If this is defined, it is assumed to be the alias of a user-supplied certificate; overrides dynamic mode
     static final String CERT_ALIAS = JMeterUtils.getProperty("proxy.cert.alias"); // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/action/Restart.java
Patch:
@@ -43,7 +43,7 @@
  * @since 5.0
  */
 public class Restart extends AbstractAction implements MenuCreator {
-    private static final Logger log = LoggerFactory.getLogger(CompileJSR223TestElements.class);
+    private static final Logger log = LoggerFactory.getLogger(Restart.class);
 
     private static final String RESTART = "restart";
     /** 

File: src/functions/org/apache/jmeter/functions/Jexl2Function.java
Patch:
@@ -20,10 +20,10 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.apache.commons.jexl2.Expression;
 import org.apache.commons.jexl2.JexlContext;
 import org.apache.commons.jexl2.JexlEngine;
 import org.apache.commons.jexl2.MapContext;
+import org.apache.commons.jexl2.Script;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
@@ -90,8 +90,8 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
             jc.set("OUT", System.out);//$NON-NLS-1$
 
             // Now evaluate the script, getting the result
-            Expression e = getJexlEngine().createExpression( exp );
-            Object o = e.evaluate(jc);
+            Script e = getJexlEngine().createScript( exp );
+            Object o = e.execute(jc);
             if (o != null)
             {
                 str = o.toString();

File: src/functions/org/apache/jmeter/functions/Jexl3Function.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.commons.jexl3.JexlBuilder;
 import org.apache.commons.jexl3.JexlContext;
 import org.apache.commons.jexl3.JexlEngine;
-import org.apache.commons.jexl3.JexlExpression;
+import org.apache.commons.jexl3.JexlScript;
 import org.apache.commons.jexl3.MapContext;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.samplers.SampleResult;
@@ -91,8 +91,8 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
             jc.set("OUT", System.out);//$NON-NLS-1$
 
             // Now evaluate the script, getting the result
-            JexlExpression e = getJexlEngine().createExpression( exp );
-            Object o = e.evaluate(jc);
+            JexlScript e = getJexlEngine().createScript(exp);
+            Object o = e.execute(jc);
             if (o != null)
             {
                 str = o.toString();

File: src/components/org/apache/jmeter/extractor/gui/BoundaryExtractorGui.java
Patch:
@@ -148,6 +148,9 @@ public void modifyTestElement(TestElement extractor) {
     @Override
     public void clearGui() {
         super.clearGui();
+        
+        useBody.setSelected(true);
+        
         leftBoundaryField.setText(""); //$NON-NLS-1$        
         rightBoundaryField.setText(""); //$NON-NLS-1$
         defaultField.setText(""); //$NON-NLS-1$

File: src/components/org/apache/jmeter/visualizers/RenderAsJSON.java
Patch:
@@ -31,7 +31,7 @@
 import net.minidev.json.parser.ParseException;
 
 public class RenderAsJSON extends SamplerResultTab implements ResultRenderer {
-    private static final String TAB_SEPARATOR = ":   "; //$NON-NLS-1$
+    private static final String TAB_SEPARATOR = "    "; //$NON-NLS-1$
 
     /** {@inheritDoc} */
     @Override

File: test/src/org/apache/jmeter/visualizers/TestRenderAsJson.java
Patch:
@@ -28,7 +28,7 @@
 public class TestRenderAsJson {
 
     private Method prettyJSON;
-    private final String TAB = ":   ";
+    private final String TAB = "    ";
 
     private String prettyJSON(String prettify) throws Exception {
         return (String) prettyJSON.invoke(null, prettify);

File: src/components/org/apache/jmeter/extractor/gui/XPath2ExtractorGui.java
Patch:
@@ -38,7 +38,7 @@
 
 /**
  * GUI for XPath2Extractor class.
- * @since 4.1
+ * @since 5.0
  */
 public class XPath2ExtractorGui extends AbstractPostProcessorGui{ // NOSONAR Ignore parents warning
 

File: src/core/org/apache/jmeter/control/IteratingController.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * Identify controller that does iterations
- * @since 4.1
+ * @since 5.0
  */
 public interface IteratingController extends LoopIterationListener {
     

File: src/core/org/apache/jmeter/gui/util/JSyntaxSearchToolBar.java
Patch:
@@ -36,7 +36,7 @@
 
 /**
  * Search toolbar associated to {@link JSyntaxTextArea}
- * @since 4.1
+ * @since 5.0
  */
 public final class JSyntaxSearchToolBar implements ActionListener {
     public static final Color LIGHT_RED = new Color(0xFF, 0x80, 0x80);

File: src/core/org/apache/jmeter/report/processor/graph/impl/CustomGraphConsumer.java
Patch:
@@ -43,7 +43,7 @@
  * The class CustomGraphConsumer is added by the custom Graphs plugin.
  * It provides all the graphs the user defined in user.properties.
  *
- * @since 4.1
+ * @since 5.0
  */
 
 public class CustomGraphConsumer extends AbstractOverTimeGraphConsumer implements SampleConsumer{

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseCustomGraphGraphConsumer.java
Patch:
@@ -32,7 +32,7 @@
  * The class ResponseCustomGraphGraphConsumer provides a graph to visualize mean 
  * custom value per time period (defined by granularity)
  *
- * @since 4.1
+ * @since 5.0
  */
 public class ResponseCustomGraphGraphConsumer extends
         AbstractOverTimeGraphConsumer {

File: src/core/org/apache/jmeter/report/processor/graph/impl/TotalTPSGraphConsumer.java
Patch:
@@ -37,7 +37,7 @@
  * The class TotalTPSGraphConsumer provides a graph to visualize transactions
  * rate per second.
  *
- * @since 4.1
+ * @since 5.0
  */
 public class TotalTPSGraphConsumer extends AbstractOverTimeGraphConsumer {
 

File: src/core/org/apache/jmeter/report/utils/MetricUtils.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.lang3.StringUtils;
 
 /**
- * @since 4.1
+ * @since 5.0
  */
 public class MetricUtils {
     public static final String ASSERTION_FAILED = "Assertion failed"; //$NON-NLS-1$

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -156,7 +156,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "0c2f8af0f246d61a8288ad502a6d197a75d4d48a"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "e922e4aa06ed9f253d68c13f445d5bfedaccd876"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/AbstractFunctionByKey.java
Patch:
@@ -26,7 +26,7 @@
  * 
  * Abstract Function initialized by key and parameters count
  * 
- * @since 4.1
+ * @since 5.0
  *
  */
 abstract class AbstractFunctionByKey extends AbstractFunction {

File: src/functions/org/apache/jmeter/functions/ThreadGroupName.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Returns Thread Group Name
  * 
- * @since 4.1
+ * @since 5.0
  */
 public class ThreadGroupName extends AbstractFunctionByKey {
     private static final String KEY = "__threadGroupName"; //$NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/api/auth/DigestParameters.java
Patch:
@@ -22,7 +22,7 @@
  * Allows digest customization as per:
  * https://en.wikipedia.org/wiki/Digest_access_authentication
  * 
- * @since 4.1
+ * @since 5.0
  */
 public class DigestParameters {
     public static final String VARIABLE_NAME = "__jmeter_DP__";

File: src/protocol/http/org/apache/jmeter/protocol/http/control/DynamicKerberosSchemeFactory.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Extends {@link KerberosSchemeFactory} to provide ability to customize stripPort
  * setting in {@link KerberosScheme} based on {@link HttpContext}
- * @since 4.1
+ * @since 5.0
  */
 public class DynamicKerberosSchemeFactory extends KerberosSchemeFactory {
     static final String CONTEXT_ATTRIBUTE_STRIP_PORT = "__jmeter.K_SP__";

File: src/protocol/http/org/apache/jmeter/protocol/http/control/DynamicSPNegoSchemeFactory.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Extends {@link SPNegoSchemeFactory} to provide ability to customize stripPort
  * setting in {@link SPNegoScheme} based on {@link HttpContext}
- * @since 4.1
+ * @since 5.0
  */
 public class DynamicSPNegoSchemeFactory extends SPNegoSchemeFactory {
     static final String CONTEXT_ATTRIBUTE_STRIP_PORT = "__jmeter.K_SP__";

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/RecorderDialog.java
Patch:
@@ -52,7 +52,7 @@
 
 /**
  * Dialog for Recorder
- * @since 4.1
+ * @since 5.0
  */
 public class RecorderDialog extends JDialog implements ItemListener, KeyListener, ActionListener { // NOSONAR
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HttpClientDefaultParameters.java
Patch:
@@ -32,7 +32,7 @@
  * Utility class to set up default HttpClient parameters from a file.
  * 
  * Supports Apache HttpClient.
- * @deprecated since 4.1
+ * @deprecated since 5.0
  */
 @Deprecated
 public class HttpClientDefaultParameters {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/hc/LaxDeflateInputStream.java
Patch:
@@ -31,7 +31,7 @@
  * which seems to be rather frequent
  * 
  * @see <a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=61058">Bugzilla 61058</a>
- * @since 4.1
+ * @since 5.0
  */
 public class LaxDeflateInputStream extends DeflateInputStream {
     private final boolean relax;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/hc/LazyLayeredConnectionSocketFactory.java
Patch:
@@ -36,7 +36,7 @@
 
 /**
  * LazyLayeredConnectionSocketFactory that lazily initializes HTTPS Socket Factory
- * @since 4.1
+ * @since 5.0
  */
 public final class LazyLayeredConnectionSocketFactory implements LayeredConnectionSocketFactory{
     private static final Logger LOG = LoggerFactory.getLogger(LazyLayeredConnectionSocketFactory.class);

File: src/protocol/http/org/apache/jmeter/protocol/http/util/SlowHCPlainConnectionSocketFactory.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * Apache HttpClient protocol factory to generate "slow" sockets for emulating dial-up modems
- * @since 4.1
+ * @since 5.0
  */
 public class SlowHCPlainConnectionSocketFactory extends PlainConnectionSocketFactory {
 

File: test/src/org/apache/jmeter/functions/TestDateTimeConvertFunction.java
Patch:
@@ -30,15 +30,16 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jorphan.test.JMeterSerialTest;
 import org.junit.Before;
 import org.junit.Test;
 
 /**
  * Test {@link DateTimeConvertFunction}
- * 
+ * We implement JMeterSerialTest as we change TimeZone
  * @since 4.0
  */
-public class TestDateTimeConvertFunction extends JMeterTestCase  {
+public class TestDateTimeConvertFunction extends JMeterTestCase implements JMeterSerialTest {
 
     protected AbstractFunction dateConvert;
 

File: src/functions/org/apache/jmeter/functions/DateTimeConvertFunction.java
Patch:
@@ -36,7 +36,7 @@
  * Can optionally store it in a variable.
  * 
  * @since 4.0
- *
+ * 
  */
 public class DateTimeConvertFunction extends AbstractFunction {
     private static final Logger log = LoggerFactory.getLogger(DateTimeConvertFunction.class);

File: src/core/org/apache/jmeter/gui/util/HeaderAsPropertyRendererWrapper.java
Patch:
@@ -84,7 +84,7 @@ public static void setupDefaultRenderer(JTable table) {
     /**
      * @param table  {@link JTable}
      * @param columnsMsgParameters ignored
-     * @deprecated don't use {@columnsMsgParameters} as they are not moved when the columns
+     * @deprecated don't use {@code columnsMsgParameters} as they are not moved when the columns
      * of the corresponding tables object model are moved
      */
     @Deprecated

File: src/core/org/apache/jmeter/util/XPathUtil.java
Patch:
@@ -522,8 +522,8 @@ else if(i==length-1 && afterEqual) {
      * Compute namespaces for XML
      * @param xml XML content
      * @return List of Namespaces
-     * @throws XMLStreamException
-     * @throws FactoryConfigurationError
+     * @throws XMLStreamException on problematic xml
+     * @throws FactoryConfigurationError when no xml input factory can be established
      */
     public static List<String[]> getNamespaces(String xml)
             throws XMLStreamException, FactoryConfigurationError{

File: src/core/org/apache/jmeter/control/WhileController.java
Patch:
@@ -165,7 +165,6 @@ public void breakLoop() {
     @Override
     public void iterationStart(LoopIterationEvent iterEvent) {
         reInitialize();
-        endOfLoop(true);
         resetLoopCount();
     }
 }

File: src/core/org/apache/jmeter/control/IteratingController.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.jmeter.control;
 
+import org.apache.jmeter.engine.event.LoopIterationListener;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
@@ -26,7 +27,7 @@
  * Identify controller that does iterations
  * @since 4.1
  */
-public interface IteratingController {
+public interface IteratingController extends LoopIterationListener {
     
     /**
      * Start next iteration ("continue" keyword equivalent in loops)

File: src/core/org/apache/jmeter/report/dashboard/HtmlTemplateExporter.java
Patch:
@@ -61,6 +61,8 @@
  */
 public class HtmlTemplateExporter extends AbstractDataExporter {
 
+    private static final String CUSTOM_GRAPH_PREFIX = "custom_";
+
     /** Format used for non null check of parameters. */
     private static final String MUST_NOT_BE_NULL = "%s must not be null";
 
@@ -459,7 +461,7 @@ public void export(SampleContext context, File file,
                     graphConfiguration.excludesControllers());
             checker.setGraphId(graphId);
             mapConfiguration.put(graphId, graphConfiguration);
-            if(graphId.substring(0,7).equals("custom_")) {
+            if(graphId.startsWith(CUSTOM_GRAPH_PREFIX)) {
                 addResultToContext(graphId, storedData, customGraphs, jsonizer,
                         customizer, checker);
             } else {

File: src/core/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -99,7 +99,7 @@ public final class CSVSaveService {
 
     // Used to enclose variable name labels, to distinguish from any of the
     // above labels
-    private static final String VARIABLE_NAME_QUOTE_CHAR = "\""; // $NON-NLS-1$
+    public static final String VARIABLE_NAME_QUOTE_CHAR = "\""; // $NON-NLS-1$
 
     // Initial config from properties
     private static final SampleSaveConfiguration _saveConfig = SampleSaveConfiguration

File: src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
Patch:
@@ -343,7 +343,7 @@ public static final String[] getColumns() {
      * @return ObjectTableModel
      */
     static ObjectTableModel createObjectTableModel() {
-        return new ObjectTableModel(COLUMNS,
+        return new ObjectTableModel(getLabels(COLUMNS),
                 SamplingStatCalculator.class,
                 new Functor[] {
                 new Functor("getLabel"),                    //$NON-NLS-1$
@@ -513,7 +513,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         myJTable.setRowSorter(new ObjectTableSorter(model).fixLastRow());
         JMeterUtils.applyHiDPI(myJTable);
         // Fix centering of titles
-        HeaderAsPropertyRendererWrapper.setupDefaultRenderer(myJTable, getColumnsMsgParameters());
+        HeaderAsPropertyRendererWrapper.setupDefaultRenderer(myJTable);
         myJTable.setPreferredScrollableViewportSize(new Dimension(500, 70));
         RendererUtils.applyRenderers(myJTable, getRenderers());
         myScrollPane = new JScrollPane(myJTable);

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -552,8 +552,7 @@ public void sampleOccurred(SampleEvent event) {
                     if (config.saveAsXml()) {
                         SaveService.saveSampleResult(event, out);
                     } else { // !saveAsXml
-                        String savee = CSVSaveService.resultToDelimitedString(event);
-                        out.println(savee);
+                        CSVSaveService.saveSampleResult(event, out);
                     }
                 } catch (Exception err) {
                     log.error("Error trying to record a sample", err); // should throw exception back to caller

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
Patch:
@@ -208,6 +208,8 @@ public SampleResult sample() {
             try {
                 initClient();
             } catch (JMSException | NamingException e) {
+                result.sampleStart();
+                result.sampleEnd();
                 handleError(result, e, false);
                 return result;
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/DynamicKerberosSchemeFactory.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.http.impl.auth.KerberosSchemeFactory;
 import org.apache.http.protocol.HttpContext;
 import org.apache.jmeter.util.JMeterUtils;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/DynamicSPNegoSchemeFactory.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.http.impl.auth.SPNegoSchemeFactory;
 import org.apache.http.protocol.HttpContext;
 import org.apache.jmeter.util.JMeterUtils;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -110,7 +110,6 @@
 import org.apache.http.impl.auth.DigestSchemeFactory;
 import org.apache.http.impl.auth.KerberosScheme;
 import org.apache.http.impl.auth.NTLMSchemeFactory;
-import org.apache.http.impl.auth.SPNegoSchemeFactory;
 import org.apache.http.impl.client.BasicAuthCache;
 import org.apache.http.impl.client.BasicCredentialsProvider;
 import org.apache.http.impl.client.CloseableHttpClient;
@@ -142,6 +141,7 @@
 import org.apache.jmeter.protocol.http.control.CacheManager;
 import org.apache.jmeter.protocol.http.control.CookieManager;
 import org.apache.jmeter.protocol.http.control.DynamicKerberosSchemeFactory;
+import org.apache.jmeter.protocol.http.control.DynamicSPNegoSchemeFactory;
 import org.apache.jmeter.protocol.http.control.HeaderManager;
 import org.apache.jmeter.protocol.http.sampler.hc.LaxDeflateInputStream;
 import org.apache.jmeter.protocol.http.sampler.hc.LazyLayeredConnectionSocketFactory;
@@ -1030,7 +1030,8 @@ private CloseableHttpClient setupClient(JMeterVariables jMeterVariables, URL url
                         .register(AuthSchemes.BASIC, new BasicSchemeFactory())
                         .register(AuthSchemes.DIGEST, new DigestSchemeFactory())
                         .register(AuthSchemes.NTLM, new NTLMSchemeFactory())
-                        .register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory())
+                        .register(AuthSchemes.SPNEGO, new DynamicSPNegoSchemeFactory(
+                                AuthManager.STRIP_PORT, AuthManager.USE_CANONICAL_HOST_NAME))
                         .register(AuthSchemes.KERBEROS, new DynamicKerberosSchemeFactory(
                                 AuthManager.STRIP_PORT, AuthManager.USE_CANONICAL_HOST_NAME))
                         .build();

File: src/core/org/apache/jmeter/util/XPathUtil.java
Patch:
@@ -529,7 +529,7 @@ public static List<String[]> getNamespaces(String xml)
             throws XMLStreamException, FactoryConfigurationError{
         List<String[]> res= new ArrayList<>();
         XMLStreamReader reader;
-        if(StringUtils.isNoneEmpty(xml)) {
+        if(StringUtils.isNotEmpty(xml)) {
             reader = XMLInputFactory.newFactory().createXMLStreamReader(new StringReader(xml));
             while (reader.hasNext()) {
                 int event = reader.next();

File: src/core/org/apache/jmeter/util/XPathUtil.java
Patch:
@@ -45,7 +45,6 @@
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.sax.SAXSource;
 import javax.xml.transform.stream.StreamResult;
-import javax.xml.transform.stream.StreamSource;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.ImmutablePair;
@@ -441,7 +440,7 @@ public static void putValuesForXPathInListUsingSaxon(
             // However, in the current implementation sharing a DocumentBuilder (once initialized) 
             // will only cause problems if a SchemaValidator is used.
             net.sf.saxon.s9api.DocumentBuilder builder = PROCESSOR.newDocumentBuilder();
-            XdmNode xdmNode = builder.build(new StreamSource(reader));
+            XdmNode xdmNode = builder.build(new SAXSource(new InputSource(reader)));
             
             if(xPathExecutable!=null) {
                 XPathSelector selector = null;

File: src/components/org/apache/jmeter/visualizers/RenderAsXPath2.java
Patch:
@@ -129,7 +129,8 @@ private void executeAndShowXPathTester(String textToParse, XPath2Extractor extra
     private String process(String textToParse, XPath2Extractor extractor) {
         try {
             List<String> matchStrings = new ArrayList<>();
-            XPathUtil.putValuesForXPathInListUsingSaxon(textToParse, xpathExpressionField.getText(), matchStrings, extractor.getFragment(), -1, getDocumentNamespaces(textToParse));
+            XPathUtil.putValuesForXPathInListUsingSaxon(textToParse, xpathExpressionField.getText(),
+                    matchStrings, extractor.getFragment(), -1, getDocumentNamespaces(textToParse));
             StringBuilder builder = new StringBuilder();
             int nbFound = matchStrings.size();
             builder.append("Match count: ").append(nbFound).append("\n");

File: src/core/org/apache/jmeter/util/XPathQueryCacheLoader.java
Patch:
@@ -24,12 +24,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.github.benmanes.caffeine.cache.CacheLoader;
-
 import net.sf.saxon.s9api.Processor;
 import net.sf.saxon.s9api.XPathCompiler;
 import net.sf.saxon.s9api.XPathExecutable;
 
+import com.github.benmanes.caffeine.cache.CacheLoader;
+
 /**
  * load method is called when the key composed of
  * namespaces + xPathQuery is not in the cache.

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -150,13 +150,13 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     
     // Must match _version property value in saveservice.properties
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String PROPVERSION = "4.0";// Expected version $NON-NLS-1$
+    static final String PROPVERSION = "4.1";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "8e85129da2151ee8b4ecefa08b22aecb77d156cd"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "0c2f8af0f246d61a8288ad502a6d197a75d4d48a"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/core/org/apache/jmeter/testelement/property/MapProperty.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.jmeter.testelement.property;
 
+import java.util.HashMap;
 import java.util.Map;
 
 import org.apache.jmeter.testelement.TestElement;
@@ -39,6 +40,7 @@ public MapProperty(String name, Map<?,?> value) {
 
     public MapProperty() {
         super();
+        value = new HashMap<>();
     }
 
     /** {@inheritDoc} */

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -129,6 +129,7 @@ public boolean isMarkedBySearch() {
     
     /**
      * Node has children marked by search
+     * @return boolean are children marked by search
      */
     public boolean isChildrenMarkedBySearch() {
         return this.childrenMarkedBySearch;

File: src/core/org/apache/jmeter/report/processor/graph/AbstractGraphConsumer.java
Patch:
@@ -378,7 +378,7 @@ private void addKeyData(MapResultData result, String group, String series,
 
     /**
      * @param serie String serie name
-     * @param seriesData 
+     * @param seriesData {@link SeriesData}
      * @return MapResultData metadata for serie
      */
     protected MapResultData createSerieResult(String serie, SeriesData seriesData) {

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -1475,7 +1475,7 @@ public boolean isStartNextThreadLoop() {
     }
 
     /**
-     * @deprecated use {@link SampleResult#setTestLogicalAction(TestLogicalAction)}
+     * @deprecated use SampleResult#setTestLogicalAction(TestLogicalAction)
      * @param startNextThreadLoop the startNextLoop to set
      */
     @Deprecated

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -90,6 +90,7 @@ public List<JMeterTreeNode> getPathToThreadGroup() {
     
     /**
      * One of the children of this node have matched a search
+     * @param tagged true if we must tag
      */
     public void setChildrenNodesHaveMatched(boolean tagged) {
         if (childrenMarkedBySearch == tagged) {

File: src/core/org/apache/jmeter/control/IteratingController.java
Patch:
@@ -40,7 +40,7 @@ public interface IteratingController {
     
     /**
      * @param elementName Test Element
-     * @param 
+     * @param iterCount iteration count
      */
     default void updateIterationIndex(String elementName, int iterCount) {
         JMeterVariables variables = JMeterContextService.getContext().getVariables();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -214,7 +214,7 @@ public InputStream create(final InputStream instream) throws IOException {
     };
 
     private static final class PreemptiveAuthRequestInterceptor implements HttpRequestInterceptor {
-        //@Override
+        @Override
         public void process(HttpRequest request, HttpContext context) throws HttpException, IOException {
             HttpClientContext localContext = HttpClientContext.adapt(context);
             AuthManager authManager = (AuthManager) localContext.getAttribute(CONTEXT_ATTRIBUTE_AUTH_MANAGER);
@@ -1015,7 +1015,7 @@ private CloseableHttpClient setupClient(JMeterVariables jMeterVariables, URL url
                     setSchemePortResolver(new DefaultSchemePortResolver()).
                     setDnsResolver(resolver).
                     setRequestExecutor(REQUEST_EXECUTOR).
-                    setSSLContext(((JsseSSLManager)JsseSSLManager.getInstance()).getContext()).
+                    setSSLSocketFactory(new LazyLayeredConnectionSocketFactory()).
                     setDefaultCookieSpecRegistry(cookieSpecRegistry).
                     setDefaultSocketConfig(SocketConfig.DEFAULT).
                     setRedirectStrategy(new LaxRedirectStrategy()).

File: test/src/org/apache/jmeter/functions/TestSimpleFunctions.java
Patch:
@@ -33,10 +33,11 @@
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.threads.ThreadGroup;
+import org.apache.jorphan.test.JMeterSerialTest;
 import org.junit.Before;
 import org.junit.Test;
 
-public class TestSimpleFunctions extends JMeterTestCase {
+public class TestSimpleFunctions extends JMeterTestCase implements JMeterSerialTest {
     private SampleResult result;
 
     private Collection<CompoundVariable> params;

File: test/src/org/apache/jmeter/functions/ComponentReferenceFunctionTest.java
Patch:
@@ -132,7 +132,7 @@ public void runFunction() throws Exception {
             // Is this a work in progress ?
             if (!title.contains("(ALPHA") && !title.contains("(EXPERIMENTAL")) {
                 // No, not a work in progress ...
-                String s = "function.xml needs '" + title + "' entry for " + funcItem.getClass().getName();
+                String s = "functions.xml needs '" + title + "' entry for " + funcItem.getClass().getName();
                 if (!ct) {
                     log.warn(s); // Record in log as well
                 }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -1051,9 +1051,6 @@ private CloseableHttpClient setupClient(JMeterVariables jMeterVariables, URL url
                 }
                 builder.setDefaultCredentialsProvider(credsProvider);
             }
-            if(getAutoRedirects()) {
-                builder.disableRedirectHandling();
-            }
             builder.disableContentCompression().addInterceptorLast(RESPONSE_CONTENT_ENCODING);
             if(BASIC_AUTH_PREEMPTIVE) {
                 builder.addInterceptorFirst(PREEMPTIVE_AUTH_INTERCEPTOR);
@@ -1152,6 +1149,7 @@ protected void setupRequest(URL url, HttpRequestBase httpRequest, HTTPSampleResu
             rCB.setConnectTimeout(cto);
         }
     
+        rCB.setRedirectsEnabled(getAutoRedirects());
         rCB.setMaxRedirects(HTTPSamplerBase.MAX_REDIRECTS);
         rCB.setRedirectsEnabled(getAutoRedirects());
         httpRequest.setConfig(rCB.build());

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223Sampler.java
Patch:
@@ -29,6 +29,7 @@
 
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.engine.util.ConfigMergabilityIndicator;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
@@ -38,6 +39,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@GUIMenuSortOrder(4)
 public class JSR223Sampler extends JSR223TestElement implements Cloneable, Sampler, TestBean, ConfigMergabilityIndicator {
     private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList("org.apache.jmeter.config.gui.SimpleConfigGui"));

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -308,7 +308,7 @@ public enum KeystoreMode {
     private Set<Class<?>> addableInterfaces = new HashSet<>(
             Arrays.asList(Visualizer.class, ConfigElement.class,
                     Assertion.class, Timer.class, PreProcessor.class,
-                    PostProcessor.class));
+                    PostProcessor.class, SampleListener.class));
 
     /**
      * Tree node where the samples should be stored.

File: src/core/org/apache/jmeter/gui/action/Duplicate.java
Patch:
@@ -59,7 +59,8 @@ public void doAction(ActionEvent e) {
         JMeterTreeNode currentNode = treeListener.getCurrentNode();
         JMeterTreeNode parentNode = (JMeterTreeNode) currentNode.getParent();
         JMeterTreeModel treeModel = instance.getTreeModel();
-        for (JMeterTreeNode copiedNode : copiedNodes) {
+        for (int nodeIndex = copiedNodes.length - 1; nodeIndex >= 0; nodeIndex--) {
+            JMeterTreeNode copiedNode = copiedNodes[nodeIndex];
             int index = parentNode.getIndex(currentNode) + 1;
             treeModel.insertNodeInto(copiedNode, parentNode, index);
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -691,7 +691,7 @@ protected HTTPSampleResult sample(URL url, String method,
      * @return {@link HttpRequestBase}
      */
     private HttpRequestBase createHttpRequest(URI uri, String method, boolean areFollowingRedirect) {
-        HttpRequestBase result = null;
+        HttpRequestBase result;
         if (method.equals(HTTPConstants.POST)) {
             result = new HttpPost(uri);
         } else if (method.equals(HTTPConstants.GET)) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -422,7 +422,7 @@ public boolean getUseMultipart() {
         // We use multipart if we have been told so, or files are present
         // and the files should not be send as the post body
         HTTPFileArg[] files = getHTTPFiles();
-        return (getDoMultipart() || (files.length>0 && hasNoMissingFile(files) && !getSendFileAsPostBody()));
+        return getDoMultipart() || (files.length>0 && hasNoMissingFile(files) && !getSendFileAsPostBody());
     }
 
     private boolean hasNoMissingFile(HTTPFileArg[] files) {

File: test/src/org/apache/jmeter/protocol/http/sampler/PostWriterTest.java
Patch:
@@ -18,8 +18,8 @@
 
 package org.apache.jmeter.protocol.http.sampler;
 
-import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
 
 import java.io.ByteArrayOutputStream;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -1158,7 +1158,9 @@ protected void setupRequest(URL url, HttpRequestBase httpRequest, HTTPSampleResu
         // with the last request to an HTTP server. Instead, most browsers
         // leave it to the server to close the connection after their
         // timeout period. Leave it to the JMeter user to decide.
-        if (!getUseKeepAlive()) {
+        if (getUseKeepAlive()) {
+            httpRequest.setHeader(HTTPConstants.HEADER_CONNECTION, HTTPConstants.KEEP_ALIVE);
+        } else {
             httpRequest.setHeader(HTTPConstants.HEADER_CONNECTION, HTTPConstants.CONNECTION_CLOSE);
         }
     

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
Patch:
@@ -185,6 +185,8 @@ protected HttpURLConnection setupConnection(URL u, String method, HTTPSampleResu
         // such as "Host" and "Connection" to be passed through.
         // See http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6996110
         if (getUseKeepAlive()) {
+            conn.setRequestProperty(HTTPConstants.HEADER_CONNECTION, HTTPConstants.KEEP_ALIVE);
+        } else {
             conn.setRequestProperty(HTTPConstants.HEADER_CONNECTION, HTTPConstants.CONNECTION_CLOSE);
         }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -184,7 +184,7 @@ protected void computeFromPostBody(HTTPSamplerBase sampler,
             if (urlConfig != null) {
                 urlConfig.parseArguments(postData);
                 // Tell the sampler to do a multipart post
-                sampler.setDoMultipartPost(true);
+                sampler.setDoMultipart(true);
                 // Remove the header for content-type and content-length, since
                 // those values will most likely be incorrect when the sampler
                 // performs the multipart request, because the boundary string

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
Patch:
@@ -185,8 +185,6 @@ protected HttpURLConnection setupConnection(URL u, String method, HTTPSampleResu
         // such as "Host" and "Connection" to be passed through.
         // See http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6996110
         if (getUseKeepAlive()) {
-            conn.setRequestProperty(HTTPConstants.HEADER_CONNECTION, HTTPConstants.KEEP_ALIVE);
-        } else {
             conn.setRequestProperty(HTTPConstants.HEADER_CONNECTION, HTTPConstants.CONNECTION_CLOSE);
         }
 

File: test/src/org/apache/jmeter/protocol/http/sampler/PostWriterTest.java
Patch:
@@ -322,7 +322,7 @@ public void testSendFormData_Multipart() throws IOException {
         String descriptionValue = "mydescription";
         setupFormData(sampler, titleValue, descriptionValue);
         // Tell sampler to do multipart, even if we have no files to upload
-        sampler.setDoMultipartPost(true);
+        sampler.setDoMultipart(true);
 
         // Test sending data with default encoding
         String contentEncoding = "";

File: src/core/org/apache/jmeter/util/SSLManager.java
Patch:
@@ -120,7 +120,7 @@ protected synchronized JmeterKeyStore getKeyStore() {
                 log.info("KeyStore created OK");
             } catch (Exception e) {
                 this.keyStore = null;
-                throw new RuntimeException("Could not create keystore: "+e.getMessage(), e);
+                throw new IllegalArgumentException("Could not create keystore: "+e.getMessage(), e);
             }
 
             try {

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -612,6 +612,9 @@ private SampleResult doSampling(JMeterContext threadContext, Sampler sampler) {
         currentSamplerForInterruption = sampler;
         if (!sampleMonitors.isEmpty()) {
             for (SampleMonitor sampleMonitor : sampleMonitors) {
+                if(sampleMonitor instanceof TestElement) {
+                    TestBeanHelper.prepare((TestElement) sampleMonitor);
+                }
                 sampleMonitor.sampleStarting(sampler);
             }
         }

File: src/core/org/apache/jmeter/control/LoopController.java
Patch:
@@ -203,6 +203,7 @@ public void startNextLoop() {
 
     @Override
     public void breakLoop() {
+        // FIXME TO BE COMPLETED
         this.breakLoop = true;
     }
 }

File: src/core/org/apache/jmeter/control/WhileController.java
Patch:
@@ -143,6 +143,7 @@ public void startNextLoop() {
 
     @Override
     public void breakLoop() {
+        // FIXME TO BE COMPLETED
         this.breakLoop = true;
     }
 }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -65,6 +65,7 @@
 import org.apache.jmeter.protocol.http.util.HTTPConstantsInterface;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.protocol.http.util.HTTPFileArgs;
+import org.apache.jmeter.report.utils.MetricUtils;
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
@@ -1669,7 +1670,7 @@ protected HTTPSampleResult resultProcessing(final boolean pAreFollowingRedirect,
      * @return whether in range 200-399 or not
      */
     protected boolean isSuccessCode(int code) {
-        return code >= 200 && code <= 399;
+        return MetricUtils.isSuccessCode(code);
     }
 
     protected static String encodeBackSlashes(String value) {

File: test/src/org/apache/jmeter/report/processor/ErrorsSummaryConsumerTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.jmeter.report.core.Sample;
 import org.apache.jmeter.report.core.SampleMetadata;
+import org.apache.jmeter.report.utils.MetricUtils;
 import org.apache.jmeter.save.CSVSaveService;
 import org.junit.Assert;
 import org.junit.Test;
@@ -46,7 +47,7 @@ public void testGetErrorKey() {
                 ErrorsSummaryConsumer.getErrorKey(sample));
         
         sample = new Sample(0, metadata, new String[] { "true", "200", "", "" });
-        Assert.assertEquals(ErrorsSummaryConsumer.ASSERTION_FAILED, ErrorsSummaryConsumer.getErrorKey(sample));
+        Assert.assertEquals(MetricUtils.ASSERTION_FAILED, ErrorsSummaryConsumer.getErrorKey(sample));
 
         sample = new Sample(0, metadata, new String[] { "false", "500", "Server Error", "FailureMessage" });
         Assert.assertEquals("500/Server Error", ErrorsSummaryConsumer.getErrorKey(sample));

File: src/components/org/apache/jmeter/visualizers/backend/influxdb/InfluxdbBackendListenerClient.java
Patch:
@@ -152,9 +152,10 @@ protected void sendMetrics() {
 
         UserMetric userMetrics = getUserMetrics();
         // For JMETER context
-        StringBuilder tag = new StringBuilder(60);
+        StringBuilder tag = new StringBuilder(80);
         tag.append(TAG_APPLICATION).append(application);
         tag.append(TAG_TRANSACTION).append("internal");
+        tag.append(userTag);
         StringBuilder field = new StringBuilder(80);
         field.append(METRIC_MIN_ACTIVE_THREADS).append(userMetrics.getMinActiveThreads()).append(',');
         field.append(METRIC_MAX_ACTIVE_THREADS).append(userMetrics.getMaxActiveThreads()).append(',');
@@ -414,7 +415,7 @@ public void teardownTest(BackendListenerContext context) throws Exception {
      */
     private void addAnnotation(boolean startOrEnd) {
         influxdbMetricsManager.addMetric(EVENTS_FOR_ANNOTATION, 
-                TAG_APPLICATION + application + ",title=ApacheJMeter"+
+                TAG_APPLICATION + application + ",title=ApacheJMeter"+ userTag +
                 (StringUtils.isNotEmpty(testTags) ? TAGS+ testTags : ""), 
                 TEXT +  
                         AbstractInfluxdbMetricsSender.fieldToStringValue(testTitle +

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/RecorderDialog.java
Patch:
@@ -48,6 +48,7 @@
 
 /**
  * Dialog for Recorder
+ * @since 4.1
  */
 public class RecorderDialog extends JDialog implements ItemListener, KeyListener { // NOSONAR
 
@@ -155,8 +156,6 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         prefixHTTPSampleName.requestFocusInWindow();
     }
 
-    
-
     /* (non-Javadoc)
      * @see java.awt.Dialog#setVisible(boolean)
      */

File: src/core/org/apache/jmeter/reporters/ResultSaver.java
Patch:
@@ -218,8 +218,8 @@ private boolean ignoreSampler(SampleResult s) {
             return true;
         }
         // Should we save the sample?
-        return ((s.isSuccessful() && getErrorsOnly()) ||
-                (!s.isSuccessful() && getSuccessOnly()));
+        return (s.isSuccessful() && getErrorsOnly()) ||
+                (!s.isSuccessful() && getSuccessOnly());
     }
 
     /**

File: src/core/org/apache/jmeter/reporters/ResultSaver.java
Patch:
@@ -227,6 +227,9 @@ private boolean ignoreSampler(SampleResult s) {
      * @param parentFile
      */
     private void createFoldersIfNeeded(File parentFile) {
+        if(parentFile == null) {
+            return;
+        }
         if (!parentFile.exists()) {
             log.debug("Creating path hierarchy for folder {}", parentFile.getAbsolutePath());
             if(!parentFile.mkdirs()) {

File: src/core/org/apache/jmeter/threads/AbstractThreadGroup.java
Patch:
@@ -286,13 +286,13 @@ public boolean getOnErrorStopTestNow() {
     public abstract void waitThreadsStopped();
 
     /**
-     * Ask threads to stop gracefully
+     * This immediately stop threads of Group by interrupting them.
+     * It differs from {@link AbstractThreadGroup#stop()} by being a hard stop
      */
     public abstract void tellThreadsToStop();
 
     /**
-     * This immediately stop threads of Group by interrupting them
-     * It differs from {@link AbstractThreadGroup#tellThreadsToStop()} by being a hard stop
+     * This gracefully stops threads of Group
      */
     public abstract void stop();
 }

File: src/core/org/apache/jmeter/gui/action/SearchTreeDialog.java
Patch:
@@ -63,9 +63,9 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * FIXME Why is searchTF not getting focus correctly after having been setVisible(false) once
+ * Dialog to search in tree of element
  */
-public class SearchTreeDialog extends JDialog implements ActionListener {
+public class SearchTreeDialog extends JDialog implements ActionListener { // NOSONAR
 
     private static final long serialVersionUID = -4436834972710248247L;
 
@@ -261,7 +261,7 @@ private void doSearch(ActionEvent e) {
         searchTF.requestFocusInWindow();
         statusLabel.setText(
                 MessageFormat.format(
-                        JMeterUtils.getResString("search_tree_matches"),new Object[]{numberOfMatches}));
+                        JMeterUtils.getResString("search_tree_matches"), numberOfMatches));
     }
     
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -713,7 +713,7 @@ private Authorization createAuthorization(final TestElement[] testElements, HTTP
                             }
                             // if HEADER_AUTHORIZATION contains "Basic"
                             // then set Mechanism.BASIC_DIGEST, otherwise Mechanism.KERBEROS
-                            Mechanism mechanism = null;
+                            Mechanism mechanism;
                             switch (authType) {
                             case DIGEST_AUTH:
                                 mechanism = Mechanism.DIGEST;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HttpClientDefaultParameters.java
Patch:
@@ -32,7 +32,9 @@
  * Utility class to set up default HttpClient parameters from a file.
  * 
  * Supports Apache HttpClient.
+ * @deprecated since 4.1
  */
+@Deprecated
 public class HttpClientDefaultParameters {
 
     private static final Logger log = LoggerFactory.getLogger(HttpClientDefaultParameters.class);

File: src/core/org/apache/jmeter/util/JsseSSLManager.java
Patch:
@@ -110,7 +110,7 @@ public JsseSSLManager(Provider provider) {
                 this.threadlocal = new ThreadLocal<>();
             }
 
-            HttpsURLConnection.setDefaultSSLSocketFactory(new HttpSSLProtocolSocketFactory(this, CPS));
+            HttpsURLConnection.setDefaultSSLSocketFactory(new HttpSSLProtocolSocketFactory(CPS));
             HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> true);
 
             log.debug("SSL stuff all set");

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -839,8 +839,7 @@ private CloseableHttpClient setupClient(URL url) {
             ((AbstractHttpClient) httpClient).clearResponseInterceptors(); 
             httpClient.getConnectionManager().closeIdleConnections(1L, TimeUnit.MICROSECONDS);
             httpClient = null;
-            JsseSSLManager sslMgr = (JsseSSLManager) SSLManager.getInstance();
-            sslMgr.resetContext();
+            ((JsseSSLManager) SSLManager.getInstance()).resetContext();
             resetSSLContext = false;
         }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HC4TrustAllSSLSocketFactory.java
Patch:
@@ -46,7 +46,7 @@ public class HC4TrustAllSSLSocketFactory extends SSLSocketFactory {
      * @throws GeneralSecurityException if there's a problem setting up the security
      */
     public HC4TrustAllSSLSocketFactory() throws GeneralSecurityException {
-        this(new HttpSSLProtocolSocketFactory((JsseSSLManager)JsseSSLManager.getInstance(), JsseSSLManager.CPS));
+        this(new HttpSSLProtocolSocketFactory(JsseSSLManager.CPS));
     }
     
     /**

File: src/junit/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java
Patch:
@@ -410,10 +410,10 @@ public SampleResult sample(Entry entry) {
                     tr.addFailure(theClazz, afe);
                 } else if (cause != null) {
                     tr.addError(theClazz, cause);
-                    log.warn("caught exception", e);
+                    log.info("caught exception", e);
                 } else {
                     tr.addError(theClazz, e);
-                    log.warn("caught exception", e);
+                    log.info("caught exception", e);
                 }
             } catch (IllegalAccessException | IllegalArgumentException e) {
                 tr.addError(theClazz, e);

File: src/core/org/apache/jmeter/report/processor/graph/impl/ActiveThreadsGraphConsumer.java
Patch:
@@ -75,7 +75,7 @@ public Iterable<String> select(Sample sample) {
                             }
                             return Arrays.asList(new String[] { threadName });
                         } else {
-                            return Collections.<String>emptyList();
+                            return Collections.emptyList();
                         }
                     }
                 }, new GraphValueSelector() {

File: src/jorphan/org/apache/jorphan/util/HeapDumper.java
Patch:
@@ -189,13 +189,13 @@ private void dumpHeap0(String fileName, boolean live) throws Exception {
         } catch (RuntimeMBeanException e) {
             Throwable f = e.getCause();
             if (f instanceof Exception){
-                throw (Exception )f;
+                throw (Exception) f;
             }
             throw e;
         } catch (MBeanException e) {
             Throwable f = e.getCause();
             if (f instanceof Exception){
-                throw (Exception )f;
+                throw (Exception) f;
             }
             throw e;
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/HttpDefaultsGui.java
Patch:
@@ -103,7 +103,7 @@ public TestElement createTestElement() {
      */
     @Override
     public void modifyTestElement(TestElement config) {
-        ConfigTestElement cfg = (ConfigTestElement ) config;
+        ConfigTestElement cfg = (ConfigTestElement) config;
         ConfigTestElement el = (ConfigTestElement) urlConfigGui.createTestElement();
         cfg.clear(); 
         cfg.addConfigElement(el);

File: test/src/org/apache/commons/cli/avalon/ClutilTestCase.java
Patch:
@@ -958,7 +958,7 @@ public void testCombinations() throws Exception {
                              "-?=[A] -? [B] -?");    
     }
     
-    private void check(String args[], String canon){
+    private void check(String[] args, String canon){
         final CLArgsParser parser = new CLArgsParser(args, OPTIONS);
 
         assertNull(parser.getErrorString(),parser.getErrorString());

File: test/src/org/apache/jmeter/control/TestSwitchController.java
Patch:
@@ -212,7 +212,7 @@ public void testTest2() throws Exception {
          * cond  = Switch condition 
          * exp[] = expected results
          */
-        private void runTest2(String cond, String exp[]) throws Exception {
+        private void runTest2(String cond, String[] exp) throws Exception {
             int loops = 3;
             LoopController controller = new LoopController();
             controller.setLoops(loops);

File: test/src/org/apache/jmeter/gui/util/TristateCheckBoxTest.java
Patch:
@@ -34,7 +34,7 @@
 //derived from: http://www.javaspecialists.eu/archive/Issue145.html
 
 public class TristateCheckBoxTest {
-    public static void main(String args[]) throws Exception {
+    public static void main(String[] args) throws Exception {
         JFrame frame = new JFrame("TristateCheckBoxTest");
         frame.setLayout(new GridLayout(0, 1, 15, 15));
         UIManager.LookAndFeelInfo[] lfs =

File: test/src/org/apache/jmeter/junit/JMeterTest.java
Patch:
@@ -502,14 +502,14 @@ public static Collection<Object> getObjects(Class<?> extendsClass) throws Except
         if (objects.isEmpty()) {
             System.out.println("No classes found that extend " + exName + ". Check the following:");
             System.out.println("Search paths are:");
-            String ss[] = JMeterUtils.getSearchPaths();
+            String[] ss = JMeterUtils.getSearchPaths();
             for (String s : ss) {
                 System.out.println(s);
             }
             if (!classPathShown) {// Only dump it once
                 System.out.println("Class path is:");
                 String cp = System.getProperty("java.class.path");
-                String classPathElements[] = JOrphanUtils.split(cp, java.io.File.pathSeparator);
+                String[] classPathElements = JOrphanUtils.split(cp, java.io.File.pathSeparator);
                 for (String classPathElement : classPathElements) {
                     System.out.println(classPathElement);
                 }

File: test/src/org/apache/jmeter/resources/PackageTest.java
Patch:
@@ -283,7 +283,7 @@ private static void findFile(File file, Set<String> set,
     */
     public static Test suite() {
         TestSuite ts = new TestSuite("Resources PackageTest");
-        String languages[] = JMeterMenuBar.getLanguages();
+        String[] languages = JMeterMenuBar.getLanguages();
         for(String prefix : prefixList){
             TestSuite pfx = new TestSuite(prefix) ;
             pfx.addTest(new PackageTest("testLang","", prefix)); // load the default resource

File: test/src/org/apache/jmeter/save/TestCSVSaveService.java
Patch:
@@ -34,7 +34,7 @@
 public class TestCSVSaveService extends JMeterTestCase {
 
     private void checkSplitString(String input, char delim, String[] expected) throws Exception {
-        String out[] = CSVSaveService.csvSplitString(input, delim);     
+        String[] out = CSVSaveService.csvSplitString(input, delim);     
         checkStrings(expected, out);
     }
 

File: test/src/org/apache/jmeter/testbeans/gui/TestBooleanPropertyEditor.java
Patch:
@@ -56,7 +56,7 @@ public void testBooleanPropertyEditor() {
 
     private void testBooleanEditor(PropertyEditor propertyEditor) {
         assertNotNull("Expected to find property editor", propertyEditor);
-        String tags[] = propertyEditor.getTags();
+        String[] tags = propertyEditor.getTags();
         assertEquals(2,tags.length);
         assertEquals(TRUE,tags[0]);
         assertEquals(FALSE,tags[1]);

File: test/src/org/apache/jorphan/math/TestStatCalculator.java
Patch:
@@ -40,7 +40,7 @@ public void setUp() {
 
     @Test
     public void testPercentagePoint() throws Exception {
-        long values[] = new long[] {
+        long[] values = new long[] {
             10L,9L,5L,6L,1L,3L,8L,2L,7L,4L
         };
         for (long l : values) {
@@ -54,7 +54,7 @@ public void testPercentagePoint() throws Exception {
     @Ignore
     // Disabled due to in progress Bug 61071
     public void testPercentagePointBug() throws Exception {
-        long values[] = new long[] {
+        long[] values = new long[] {
             10L,9L,5L,6L,1L,3L,8L,2L,7L,4L
         };
         DescriptiveStatistics statistics = new DescriptiveStatistics();

File: test/src/org/apache/jorphan/util/TestJorphanUtils.java
Patch:
@@ -110,7 +110,7 @@ public void testSplitStringStringFalseWithLeadingSplitChars() {
     @Test
     public void testSplit3() {
         String in = "a,bc,,"; // Test ignore trailing split characters
-        String out[] = JOrphanUtils.split(in, ",",true);// Ignore adjacent delimiters
+        String[] out = JOrphanUtils.split(in, ",",true);// Ignore adjacent delimiters
         assertThat(out, CoreMatchers.equalTo(new String[] { "a", "bc" }));
         out = JOrphanUtils.split(in, ",",false);
         assertThat(out, CoreMatchers.equalTo(new String[] { "a", "bc", "", "" }));
@@ -161,7 +161,7 @@ public void testSplitStringStringFalseDoubledSplitChar() throws Exception
     // Empty string
     @Test
     public void testEmpty(){
-        String out[] = JOrphanUtils.split("", ",", false);
+        String[] out = JOrphanUtils.split("", ",", false);
         assertEquals(0, out.length);
     }
 

File: src/core/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -95,7 +95,7 @@ public void configure(HashTree testTree) {
     /** {@inheritDoc} */
     @Override
     public void stopTest(boolean now) {
-        log.info("about to {} remote test on {}", (now ? "stop" : "shutdown"), hostAndPort);
+        log.info("about to {} remote test on {}", now ? "stop" : "shutdown", hostAndPort);
         try {
             remote.rstopTest(now);
         } catch (Exception ex) {

File: src/core/org/apache/jmeter/rmi/RmiUtils.java
Patch:
@@ -73,7 +73,7 @@ public final class RmiUtils {
 
     static{
         if (DEFAULT_LOCAL_PORT != 0){
-            System.out.println("Using local port: " + DEFAULT_LOCAL_PORT);
+            System.out.println("Using local port: " + DEFAULT_LOCAL_PORT); // NOSONAR
         }
     }
 

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -78,6 +78,7 @@
 import org.apache.jmeter.report.dashboard.ReportGenerator;
 import org.apache.jmeter.reporters.ResultCollector;
 import org.apache.jmeter.reporters.Summariser;
+import org.apache.jmeter.rmi.RmiUtils;
 import org.apache.jmeter.samplers.Remoteable;
 import org.apache.jmeter.samplers.SampleEvent;
 import org.apache.jmeter.save.SaveService;
@@ -496,7 +497,7 @@ public void start(String[] args) {
             } else if (parser.getArgumentById(SERVER_OPT) != null) {
                 // Start the server
                 try {
-                    RemoteJMeterEngineImpl.startServer(JMeterUtils.getPropDefault("server_port", 0)); // $NON-NLS-1$
+                    RemoteJMeterEngineImpl.startServer(RmiUtils.getRmiRegistryPort()); // $NON-NLS-1$
                     startOptionalServers();
                 } catch (Exception ex) {
                     System.err.println("Server failed to start: "+ex);//NOSONAR

File: src/core/org/apache/jmeter/samplers/RemoteSampleListenerImpl.java
Patch:
@@ -21,6 +21,7 @@
 import java.rmi.RemoteException;
 import java.util.List;
 
+import org.apache.jmeter.rmi.RmiUtils;
 import org.apache.jmeter.testelement.TestStateListener;
 import org.apache.jmeter.util.JMeterUtils;
 
@@ -40,7 +41,7 @@ public class RemoteSampleListenerImpl extends java.rmi.server.UnicastRemoteObjec
         JMeterUtils.getPropDefault("client.rmi.localport", 0); // $NON-NLS-1$
 
     public RemoteSampleListenerImpl(Object listener) throws RemoteException {
-        super(DEFAULT_LOCAL_PORT);
+        super(DEFAULT_LOCAL_PORT, RmiUtils.createClientSocketFactory(),  RmiUtils.createServerSocketFactory());
         if (listener instanceof TestStateListener) {
             testListener = (TestStateListener) listener;
         } else {

File: src/core/org/apache/jmeter/threads/RemoteThreadsListenerImpl.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.List;
 
 import org.apache.jmeter.gui.GuiPackage;
+import org.apache.jmeter.rmi.RmiUtils;
 import org.apache.jmeter.testelement.ThreadListener;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.reflect.ClassFinder;
@@ -55,7 +56,7 @@ public class RemoteThreadsListenerImpl extends UnicastRemoteObject implements
      * @throws RemoteException if failed to export object
      */
     public RemoteThreadsListenerImpl() throws RemoteException {
-        super(DEFAULT_LOCAL_PORT);
+        super(DEFAULT_LOCAL_PORT, RmiUtils.createClientSocketFactory(), RmiUtils.createServerSocketFactory());
         try {
             List<String> listClasses = ClassFinder.findClassesThatExtend(
                     JMeterUtils.getSearchPaths(), 

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java
Patch:
@@ -215,7 +215,9 @@ public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL
             config.setCaseSensitive(false);
             // Conditional comments only apply for IE < 10
             config.setEnableConditionalComments(isEnableConditionalComments(ieVersion));
-            config.setCondCommentIEVersion(ieVersion);
+            if(ieVersion != null) {
+                config.setCondCommentIEVersion(ieVersion);
+            }
             lagartoParser.setConfig(config);
             JMeterTagVisitor tagVisitor = new JMeterTagVisitor(new URLPointer(baseUrl), coll, ieVersion);
             lagartoParser.parse(tagVisitor);

File: src/core/org/apache/jmeter/functions/gui/FunctionHelper.java
Patch:
@@ -47,6 +47,7 @@
 import org.apache.jmeter.functions.Function;
 import org.apache.jmeter.gui.action.ActionNames;
 import org.apache.jmeter.gui.action.ActionRouter;
+import org.apache.jmeter.gui.action.Help;
 import org.apache.jmeter.gui.action.KeyStrokes;
 import org.apache.jmeter.gui.util.JSyntaxTextArea;
 import org.apache.jmeter.gui.util.JTextScrollPane;
@@ -208,9 +209,9 @@ public void actionPerformed(ActionEvent e) {
     private class HelpListener implements ActionListener {
         @Override
         public void actionPerformed(ActionEvent e) {
-            String source = functionList.getText();
+            String[] source = new String[] { Help.HELP_FUNCTIONS, functionList.getText() };
             ActionRouter.getInstance().doActionNow(
-                    new ActionEvent(source, e.getID(), ActionNames.LINK_FUNC_REF));
+                    new ActionEvent(source, e.getID(), ActionNames.HELP));
 
         }
     }

File: src/core/org/apache/jmeter/gui/action/OpenLinkAction.java
Patch:
@@ -65,8 +65,8 @@ public void doAction(ActionEvent e) {
             return; 
         }
         try {
-            if(e.getSource() instanceof String) {
-                url += "#"+((String)e.getSource());
+            if(e.getSource() instanceof String[]) {
+                url += "#"+((String[])e.getSource())[1];
             }
             java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
         } catch (IOException err) {

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -62,6 +62,7 @@ public final class ActionNames {
     public static final String LAF_PREFIX       = "laf:"; // Look and Feel prefix
     public static final String LINK_BUG_TRACKER = "link_bug_tracker:"; // URI of bug tracker
     public static final String LINK_COMP_REF    = "link_component_reference:"; // URI of component reference
+    public static final String LINK_FUNC_REF    = "link_function_reference:"; // URI of functions reference
     public static final String LINK_NIGHTLY_BUILD = "link_nightly_build:"; // URI of nightly build
     public static final String LINK_RELEASE_NOTES = "link_release_notes"; // URI of the release note
     public static final String LOGGER_PANEL_ENABLE_DISABLE     = "logger_panel_enable_disable"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -249,6 +249,7 @@ private void makeHelpMenu() {
         usefulLinks.add(makeMenuItemRes("link_release_notes", ActionNames.LINK_RELEASE_NOTES));
         usefulLinks.add(makeMenuItemRes("link_bug_tracker", ActionNames.LINK_BUG_TRACKER));
         usefulLinks.add(makeMenuItemRes("link_comp_ref", ActionNames.LINK_COMP_REF));
+        usefulLinks.add(makeMenuItemRes("link_func_ref", ActionNames.LINK_FUNC_REF));
         usefulLinks.add(makeMenuItemRes("link_nightly_build", ActionNames.LINK_NIGHTLY_BUILD));
 
         JMenuItem helpAbout = makeMenuItemRes("about", 'A', ActionNames.ABOUT);

File: src/components/org/apache/jmeter/assertions/gui/BeanShellAssertionGui.java
Patch:
@@ -28,13 +28,15 @@
 import javax.swing.JTextField;
 
 import org.apache.jmeter.assertions.BeanShellAssertion;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.FilePanelEntry;
 import org.apache.jmeter.gui.util.JSyntaxTextArea;
 import org.apache.jmeter.gui.util.JTextScrollPane;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.BooleanProperty;
 import org.apache.jmeter.util.JMeterUtils;
 
+@GUIMenuSortOrder(Integer.MAX_VALUE)
 public class BeanShellAssertionGui extends AbstractAssertionGui {
 
     private static final long serialVersionUID = 240L;

File: src/components/org/apache/jmeter/assertions/gui/XPathAssertionGui.java
Patch:
@@ -25,9 +25,11 @@
 import javax.swing.JPanel;
 
 import org.apache.jmeter.assertions.XPathAssertion;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 
+@GUIMenuSortOrder(50)
 public class XPathAssertionGui extends AbstractAssertionGui {
 
     private static final long serialVersionUID = 240L;

File: src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java
Patch:
@@ -48,9 +48,11 @@
 import org.apache.jmeter.control.Controller;
 import org.apache.jmeter.control.ModuleController;
 import org.apache.jmeter.control.TestFragmentController;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 import org.apache.jmeter.gui.util.MenuFactory;
+import org.apache.jmeter.gui.util.MenuInfo;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.threads.AbstractThreadGroup;
@@ -68,6 +70,7 @@
  * - TestFragmentController
  *
  */
+@GUIMenuSortOrder(MenuInfo.SORT_ORDER_DEFAULT+2)
 public class ModuleControllerGui extends AbstractControllerGui implements ActionListener {
     private static final long serialVersionUID = -4195441608252523573L;
 

File: src/components/org/apache/jmeter/control/gui/SwitchControllerGui.java
Patch:
@@ -25,9 +25,12 @@
 import javax.swing.JTextField;
 
 import org.apache.jmeter.control.SwitchController;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
+import org.apache.jmeter.gui.util.MenuInfo;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 
+@GUIMenuSortOrder(MenuInfo.SORT_ORDER_DEFAULT+2)
 public class SwitchControllerGui extends AbstractControllerGui {
     private static final long serialVersionUID = 240L;
 

File: src/components/org/apache/jmeter/control/gui/ThroughputControllerGui.java
Patch:
@@ -28,11 +28,14 @@
 import javax.swing.JTextField;
 
 import org.apache.jmeter.control.ThroughputController;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.CheckBoxPanel;
+import org.apache.jmeter.gui.util.MenuInfo;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.layout.VerticalLayout;
 
+@GUIMenuSortOrder(MenuInfo.SORT_ORDER_DEFAULT+1)
 public class ThroughputControllerGui extends AbstractControllerGui {
     private static final long serialVersionUID = 240L;
 

File: src/components/org/apache/jmeter/modifiers/gui/UserParametersGui.java
Patch:
@@ -41,6 +41,7 @@
 import javax.swing.table.TableCellRenderer;
 import javax.swing.table.TableColumn;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.gui.util.PowerTableModel;
 import org.apache.jmeter.gui.util.VerticalPanel;
@@ -54,6 +55,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@GUIMenuSortOrder(5)
 public class UserParametersGui extends AbstractPreProcessorGui {
 
     private static final long serialVersionUID = 241L;

File: src/components/org/apache/jmeter/timers/ConstantThroughputTimer.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.testbeans.gui.GenericTestBeanCustomizer;
 import org.apache.jmeter.testelement.AbstractTestElement;
@@ -46,6 +47,7 @@
  * - delay each thread according to when it last ran
  * - delay each thread according to when any thread last ran
  */
+@GUIMenuSortOrder(4)
 public class ConstantThroughputTimer extends AbstractTestElement implements Timer, TestStateListener, TestBean {
     private static final long serialVersionUID = 4;
 

File: src/components/org/apache/jmeter/timers/poissonarrivals/PreciseThroughputTimer.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.TimeUnit;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.testelement.AbstractTestElement;
 import org.apache.jmeter.testelement.TestStateListener;
@@ -36,6 +37,7 @@
  * On top of that, it tries to maintain the exact amount of arrivals for a given timeframe ({@link #throughputPeriod}.
  * @since 4.0
  */
+@GUIMenuSortOrder(3)
 public class PreciseThroughputTimer extends AbstractTestElement implements Cloneable, Timer, TestStateListener, TestBean, ThroughputProvider, DurationProvider {
     private static final Logger log = LoggerFactory.getLogger(PreciseThroughputTimer.class);
 

File: test/src/org/apache/jmeter/control/TestSwitchController.java
Patch:
@@ -62,7 +62,9 @@ public void test0() throws Exception {
         @Test
         public void test1() throws Exception {
             runSimpleTests("1", "one");
+            runSimpleTests(" 1 ", "one");
             runSimpleTests("one", "one"); // Match by name
+            runSimpleTests("one ", "one"); // Match by name with space
         }
 
         @Test
@@ -186,6 +188,7 @@ public void testTest2() throws Exception {
             runTest2("7", new String[] { "zero" });
             runTest2("5", new String[] { "zero" });
             runTest2("4", new String[] { "six" });
+            runTest2("4 ", new String[] { "six" });
             runTest2("3", new String[] { "five" });
             runTest2("1", new String[] { "one", "two" });
             runTest2("2", new String[] { "three", "four" });

File: src/components/org/apache/jmeter/control/SwitchController.java
Patch:
@@ -130,6 +130,6 @@ private int scanControllerNames(String sel) {
     }
 
     public String getSelection() {
-        return getPropertyAsString(SWITCH_VALUE);
+        return getPropertyAsString(SWITCH_VALUE).trim();
     }
 }

File: test/src/org/apache/jmeter/engine/TestTreeCloner.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.control.GenericController;
+import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.reporters.ResultCollector;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.testelement.property.CollectionProperty;
@@ -33,7 +34,7 @@
 import org.apache.jorphan.collections.ListedHashTree;
 import org.junit.Test;
 
-public class TestTreeCloner {
+public class TestTreeCloner extends JMeterTestCase {
         
         @Test
         public void testCloning() throws Exception {

File: test/src/org/apache/jmeter/protocol/http/control/TestHTTPMirrorThread.java
Patch:
@@ -28,17 +28,17 @@
 import java.net.URL;
 
 import org.apache.commons.io.IOUtils;
+import org.apache.jmeter.junit.JMeterTestCaseJUnit;
 
+import junit.extensions.TestSetup;
 import junit.framework.Test;
-import junit.framework.TestCase;
 import junit.framework.TestSuite;
-import junit.extensions.TestSetup;
 
 /**
  * Class for testing the HTTPMirrorThread, which is handling the
  * incoming requests for the HTTPMirrorServer
  */
-public class TestHTTPMirrorThread extends TestCase {
+public class TestHTTPMirrorThread extends JMeterTestCaseJUnit {
     /** The encodings used for http headers and control information */
     private static final String ISO_8859_1 = "ISO-8859-1"; // $NON-NLS-1$
     private static final String UTF_8 = "UTF-8"; // $NON-NLS-1$

File: test/src/org/apache/jmeter/report/core/TestCsvSampleWriter.java
Patch:
@@ -22,6 +22,8 @@
 
 import java.io.StringWriter;
 import java.io.Writer;
+
+import org.apache.jmeter.junit.JMeterTestUtils;
 import org.apache.jmeter.util.JMeterUtils;
 import org.junit.Before;
 import org.junit.Test;
@@ -33,9 +35,7 @@ public class TestCsvSampleWriter {
     @Before
     public void setUp() throws Exception {
         // We have to initialize JMeterUtils
-        if (JMeterUtils.getJMeterHome() == null) {
-            JMeterUtils.setJMeterHome(System.getenv("JMETER_HOME"));
-        }
+        JMeterTestUtils.setupJMeterHome();
         JMeterUtils.loadJMeterProperties(JMeterUtils.getJMeterBinDir() + "/jmeter.properties");
     }
 

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -155,7 +155,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "83cad39b5062586b5bf2e704b2460af2e108c2aa"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "8e85129da2151ee8b4ecefa08b22aecb77d156cd"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -155,7 +155,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "c616712e26251d15588fbe615d1c31a34dbbf854"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "83cad39b5062586b5bf2e704b2460af2e108c2aa"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/components/org/apache/jmeter/timers/poissonarrivals/PreciseThroughputTimerBeanInfo.java
Patch:
@@ -25,9 +25,9 @@
 /**
  * @since 4.0
  */
-public class ExponentialTimerBeanInfo extends BeanInfoSupport {
-    public ExponentialTimerBeanInfo() {
-        super(ExponentialTimer.class);
+public class PreciseThroughputTimerBeanInfo extends BeanInfoSupport {
+    public PreciseThroughputTimerBeanInfo() {
+        super(PreciseThroughputTimer.class);
         createPropertyGroup(
                 "delay", //$NON-NLS-1$
                 new String[]{

File: test/src/org/apache/jmeter/timers/poissonarrivals/PreciseThroughputTimerTest.java
Patch:
@@ -25,8 +25,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class ExponentialTimerTest {
-	private static final Logger LOG = LoggerFactory.getLogger(ExponentialTimerTest.class);
+public class PreciseThroughputTimerTest {
+	private static final Logger LOG = LoggerFactory.getLogger(PreciseThroughputTimerTest.class);
 
 	@Test
 	public void testTimer1() throws Exception {

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -106,6 +106,7 @@ public class SampleResult implements Serializable, Cloneable, Searchable {
     // List of types that are known to be ascii, although they may appear to be binary
     private static final String[] NON_BINARY_TYPES = {
         "audio/x-mpegurl",  //$NON-NLS-1$ (HLS Media Manifest)
+        "audio/mpegurl",    //$NON-NLS-1$ (HLS Media Manifest)
         "video/f4m"         //$NON-NLS-1$ (Flash Media Manifest)
         };
 

File: src/components/org/apache/jmeter/visualizers/SearchTextExtension.java
Patch:
@@ -272,7 +272,7 @@ public interface ISearchTextExtensionProvider {
     private static class JEditorPaneSearchProvider implements ISearchTextExtensionProvider {
 
         private static volatile int LAST_POSITION_DEFAULT = 0;
-        private static final Color HILIT_COLOR = Color.LIGHT_GRAY;
+        private static final Color HIGHLIGHT_COLOR = Color.GREEN;
         private JEditorPane results;
         private Highlighter selection;
         private Highlighter.HighlightPainter painter;
@@ -283,7 +283,7 @@ public JEditorPaneSearchProvider(JEditorPane results) {
             
             // prepare highlighter to show text find with search command
             selection = new DefaultHighlighter();
-            painter = new DefaultHighlighter.DefaultHighlightPainter(HILIT_COLOR);
+            painter = new DefaultHighlighter.DefaultHighlightPainter(HIGHLIGHT_COLOR);
             results.setHighlighter(selection);
         }
 

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -511,6 +511,7 @@ private static Component makeMenuItem(MenuInfo info, String actionCommand) {
 
         JMenuItem newMenuChoice = new JMenuItem(info.getLabel());
         newMenuChoice.setName(info.getClassName());
+        newMenuChoice.setEnabled(info.getEnabled(actionCommand));
         newMenuChoice.addActionListener(ActionRouter.getInstance());
         if (actionCommand != null) {
             newMenuChoice.setActionCommand(actionCommand);

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -149,13 +149,13 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     
     // Must match _version property value in saveservice.properties
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String PROPVERSION = "3.4";// Expected version $NON-NLS-1$
+    static final String PROPVERSION = "4.0";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "0acd8200bf252acf41d5eeca6aa56b0eaee06f0f"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "c616712e26251d15588fbe615d1c31a34dbbf854"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/core/org/apache/jmeter/threads/gui/AbstractThreadGroupGui.java
Patch:
@@ -94,6 +94,8 @@ private JMenu createAddMenu() {
         JMenu addMenu = new JMenu(JMeterUtils.getResString("add")); // $NON-NLS-1$
         addMenu.add(MenuFactory.makeMenu(MenuFactory.SAMPLERS, addAction));
         addMenu.addSeparator();
+        addMenu.add(MenuFactory.makeMenu(MenuFactory.CONTROLLERS, addAction));
+        addMenu.addSeparator();
         addMenu.add(MenuFactory.makeMenu(MenuFactory.PRE_PROCESSORS, addAction));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.POST_PROCESSORS, addAction));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.ASSERTIONS, addAction));

File: src/components/org/apache/jmeter/config/CSVDataSet.java
Patch:
@@ -68,7 +68,7 @@
  * threads with the same suffix.
  *
  */
-@GUIMenuSortOrder(4)
+@GUIMenuSortOrder(1)
 public class CSVDataSet extends ConfigTestElement 
     implements TestBean, LoopIterationListener, NoConfigMerge {
     private static final Logger log = LoggerFactory.getLogger(CSVDataSet.class);

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/HttpDefaultsGui.java
Patch:
@@ -52,7 +52,7 @@
 /**
  * GUI for Http Request defaults
  */
-@GUIMenuSortOrder(1)
+@GUIMenuSortOrder(5)
 public class HttpDefaultsGui extends AbstractConfigGui {
 
     private static final long serialVersionUID = 241L;

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CacheManagerGui.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * The GUI for the HTTP Cache Manager {@link CacheManager}
  */
-@GUIMenuSortOrder(2)
+@GUIMenuSortOrder(4)
 public class CacheManagerGui extends AbstractConfigGui {
 
     private static final long serialVersionUID = 240L;

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java
Patch:
@@ -52,7 +52,7 @@
  * Allows the user to specify if she needs HTTP header services, and give
  * parameters for this service.
  */
-@GUIMenuSortOrder(4)
+@GUIMenuSortOrder(2)
 public class HeaderPanel extends AbstractConfigGui implements ActionListener {
 
     private static final Logger log = LoggerFactory.getLogger(HeaderPanel.class);

File: src/components/org/apache/jmeter/control/ForeachController.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.io.Serializable;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.testelement.property.BooleanProperty;
 import org.apache.jmeter.testelement.property.StringProperty;
@@ -37,6 +38,7 @@
  * Iteration can take the full list or only a subset (configured through indexes)
  *
  */
+@GUIMenuSortOrder(5)
 public class ForeachController extends GenericController implements Serializable {
 
     private static final Logger log = LoggerFactory.getLogger(ForeachController.class);

File: src/core/org/apache/jmeter/control/gui/IfControllerPanel.java
Patch:
@@ -31,6 +31,7 @@
 import javax.swing.event.ChangeListener;
 
 import org.apache.jmeter.control.IfController;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.JSyntaxTextArea;
 import org.apache.jmeter.gui.util.JTextScrollPane;
 import org.apache.jmeter.testelement.TestElement;
@@ -42,7 +43,7 @@
  * standalone or embedded into some other component.
  *
  */
-
+@GUIMenuSortOrder(1)
 public class IfControllerPanel extends AbstractControllerGui implements ChangeListener {
 
     private static final long serialVersionUID = 240L;

File: src/core/org/apache/jmeter/control/gui/LoopControlPanel.java
Patch:
@@ -29,6 +29,7 @@
 import javax.swing.JTextField;
 
 import org.apache.jmeter.control.LoopController;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.FocusRequester;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
@@ -39,7 +40,7 @@
  * standalone or embedded into some other component.
  *
  */
-
+@GUIMenuSortOrder(3)
 public class LoopControlPanel extends AbstractControllerGui implements ActionListener {
     private static final long serialVersionUID = 240L;
 

File: src/core/org/apache/jmeter/control/gui/TransactionControllerGui.java
Patch:
@@ -21,6 +21,7 @@
 import javax.swing.JCheckBox;
 
 import org.apache.jmeter.control.TransactionController;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.CheckBoxPanel;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
@@ -29,6 +30,7 @@
 /**
  * A Transaction controller component.
  */
+@GUIMenuSortOrder(2)
 public class TransactionControllerGui extends AbstractControllerGui {
 
     private static final long serialVersionUID = 240L;

File: src/core/org/apache/jmeter/control/gui/WhileControllerGui.java
Patch:
@@ -25,11 +25,13 @@
 import javax.swing.JPanel;
 
 import org.apache.jmeter.control.WhileController;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.JSyntaxTextArea;
 import org.apache.jmeter.gui.util.JTextScrollPane;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 
+@GUIMenuSortOrder(4)
 public class WhileControllerGui extends AbstractControllerGui {
 
     private static final long serialVersionUID = 240L;

File: src/core/org/apache/jmeter/util/HttpSSLProtocolSocketFactory.java
Patch:
@@ -79,7 +79,7 @@ private void setSocket(Socket socket){
         if (!PROTOCOL_LIST.isEmpty()) {
             try {
                 sock.setEnabledProtocols(protocols);
-            } catch (IllegalArgumentException e) {
+            } catch (IllegalArgumentException e) { // NOSONAR
                 if (log.isWarnEnabled()) {
                     log.warn("Could not set protocol list: {}.", PROTOCOL_LIST);
                     log.warn("Valid protocols are: {}", join(sock.getSupportedProtocols()));
@@ -90,7 +90,7 @@ private void setSocket(Socket socket){
         if (!CIPHER_LIST.isEmpty()) {
             try {
                 sock.setEnabledCipherSuites(ciphers);
-            } catch (IllegalArgumentException e) {
+            } catch (IllegalArgumentException e) { // NOSONAR
                 if (log.isWarnEnabled()) {
                     log.warn("Could not set cipher list: {}.", CIPHER_LIST);
                     log.warn("Valid ciphers are: {}", join(sock.getSupportedCipherSuites()));

File: src/components/org/apache/jmeter/assertions/BeanShellAssertion.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.jmeter.assertions;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.util.BeanShellInterpreter;
 import org.apache.jmeter.util.BeanShellTestElement;
@@ -28,6 +29,7 @@
  * An Assertion which understands BeanShell
  *
  */
+@GUIMenuSortOrder(Integer.MAX_VALUE)
 public class BeanShellAssertion extends BeanShellTestElement implements Assertion {
     private static final Logger log = LoggerFactory.getLogger(BeanShellAssertion.class);
 

File: src/components/org/apache/jmeter/assertions/JSR223Assertion.java
Patch:
@@ -31,7 +31,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-@GUIMenuSortOrder(3)
+@GUIMenuSortOrder(4)
 public class JSR223Assertion extends JSR223TestElement implements Cloneable, Assertion, TestBean
 {
     private static final Logger log = LoggerFactory.getLogger(JSR223Assertion.class);

File: src/components/org/apache/jmeter/assertions/gui/SizeAssertionGui.java
Patch:
@@ -30,13 +30,15 @@
 import javax.swing.JTextField;
 
 import org.apache.jmeter.assertions.SizeAssertion;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.layout.VerticalLayout;
 
 /**
  * GUI for {@link SizeAssertion}
  */
+@GUIMenuSortOrder(3)
 public class SizeAssertionGui extends AbstractAssertionGui implements ActionListener {
 
     private static final long serialVersionUID = 241L;

File: src/components/org/apache/jmeter/config/CSVDataSet.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.jmeter.engine.event.LoopIterationEvent;
 import org.apache.jmeter.engine.event.LoopIterationListener;
 import org.apache.jmeter.engine.util.NoConfigMerge;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.save.CSVSaveService;
 import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.testbeans.TestBean;
@@ -67,6 +68,7 @@
  * threads with the same suffix.
  *
  */
+@GUIMenuSortOrder(4)
 public class CSVDataSet extends ConfigTestElement 
     implements TestBean, LoopIterationListener, NoConfigMerge {
     private static final Logger log = LoggerFactory.getLogger(CSVDataSet.class);

File: src/components/org/apache/jmeter/extractor/BeanShellPostProcessor.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.jmeter.extractor;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.processor.PostProcessor;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testbeans.TestBean;
@@ -29,6 +30,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@GUIMenuSortOrder(Integer.MAX_VALUE)
 public class BeanShellPostProcessor extends BeanShellTestElement
     implements Cloneable, PostProcessor, TestBean
 {

File: src/components/org/apache/jmeter/extractor/JSR223PostProcessor.java
Patch:
@@ -23,12 +23,14 @@
 import javax.script.ScriptEngine;
 import javax.script.ScriptException;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.processor.PostProcessor;
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.util.JSR223TestElement;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@GUIMenuSortOrder(5)
 public class JSR223PostProcessor extends JSR223TestElement implements Cloneable, PostProcessor, TestBean
 {
     private static final Logger log = LoggerFactory.getLogger(JSR223PostProcessor.class);

File: src/components/org/apache/jmeter/extractor/gui/BoundaryExtractorGui.java
Patch:
@@ -33,6 +33,7 @@
 
 import org.apache.jmeter.extractor.BoundaryExtractor;
 import org.apache.jmeter.extractor.RegexExtractor;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.processor.gui.AbstractPostProcessorGui;
 import org.apache.jmeter.testelement.AbstractScopedTestElement;
 import org.apache.jmeter.testelement.TestElement;
@@ -43,6 +44,7 @@
  * Boundary Extractor Post-Processor GUI
  * @since 4.0
  */
+@GUIMenuSortOrder(4)
 public class BoundaryExtractorGui extends AbstractPostProcessorGui {
     private static final long serialVersionUID = 240L;
 

File: src/components/org/apache/jmeter/extractor/gui/HtmlExtractorGui.java
Patch:
@@ -46,7 +46,7 @@
  * CSS/JQuery Expression Extractor Post-Processor GUI
  * @since 2.9
  */
-@GUIMenuSortOrder(2)
+@GUIMenuSortOrder(1)
 public class HtmlExtractorGui extends AbstractPostProcessorGui {
     private static final long serialVersionUID = 240L;
 

File: src/components/org/apache/jmeter/extractor/gui/RegexExtractorGui.java
Patch:
@@ -42,7 +42,7 @@
 /**
  * Regular Expression Extractor Post-Processor GUI
  */
-@GUIMenuSortOrder(1)
+@GUIMenuSortOrder(4)
 public class RegexExtractorGui extends AbstractPostProcessorGui {
     private static final long serialVersionUID = 240L;
 

File: src/components/org/apache/jmeter/extractor/json/jsonpath/gui/JSONPostProcessorGui.java
Patch:
@@ -40,7 +40,7 @@
  * GUI for {@link JSONPostProcessor}
  * @since 3.0
  */
-@GUIMenuSortOrder(3)
+@GUIMenuSortOrder(2)
 public class JSONPostProcessorGui extends AbstractPostProcessorGui {
 
     private static final long serialVersionUID = -2845056031828291476L;

File: src/components/org/apache/jmeter/modifiers/BeanShellPreProcessor.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.jmeter.modifiers;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.processor.PreProcessor;
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.testbeans.TestBean;
@@ -29,6 +30,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@GUIMenuSortOrder(Integer.MAX_VALUE)
 public class BeanShellPreProcessor extends BeanShellTestElement
     implements Cloneable, PreProcessor, TestBean
 {

File: src/components/org/apache/jmeter/modifiers/JSR223PreProcessor.java
Patch:
@@ -23,12 +23,14 @@
 import javax.script.ScriptEngine;
 import javax.script.ScriptException;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.processor.PreProcessor;
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.util.JSR223TestElement;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@GUIMenuSortOrder(1)
 public class JSR223PreProcessor extends JSR223TestElement implements Cloneable, PreProcessor, TestBean
 {
     private static final Logger log = LoggerFactory.getLogger(JSR223PreProcessor.class);

File: src/components/org/apache/jmeter/sampler/gui/TestActionGui.java
Patch:
@@ -25,13 +25,15 @@
 import javax.swing.JRadioButton;
 import javax.swing.JTextField;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.HorizontalPanel;
 import org.apache.jmeter.sampler.TestAction;
 import org.apache.jmeter.samplers.gui.AbstractSamplerGui;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.layout.VerticalLayout;
 
+@GUIMenuSortOrder(1)
 public class TestActionGui extends AbstractSamplerGui {
     private static final long serialVersionUID = 240L;
 

File: src/components/org/apache/jmeter/timers/BeanShellTimer.java
Patch:
@@ -18,13 +18,15 @@
 
 package org.apache.jmeter.timers;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.util.BeanShellInterpreter;
 import org.apache.jmeter.util.BeanShellTestElement;
 import org.apache.jorphan.util.JMeterException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@GUIMenuSortOrder(Integer.MAX_VALUE)
 public class BeanShellTimer extends BeanShellTestElement implements Cloneable, Timer, TestBean {
     private static final Logger log = LoggerFactory.getLogger(BeanShellTimer.class);
 

File: src/components/org/apache/jmeter/visualizers/BeanShellListener.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.jmeter.visualizers;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.UnsharedComponent;
 import org.apache.jmeter.samplers.SampleEvent;
 import org.apache.jmeter.samplers.SampleListener;
@@ -33,6 +34,7 @@
  * We must implement Visualizer so that TestBeanGUI can find the correct GUI class
  *
  */
+@GUIMenuSortOrder(Integer.MAX_VALUE)
 public class BeanShellListener extends BeanShellTestElement
     implements Cloneable, SampleListener, TestBean, Visualizer, UnsharedComponent  {
     

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.config.gui.ArgumentsPanel;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.HorizontalPanel;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.JMeterProperty;
@@ -52,6 +53,7 @@
  * {@link BackendListener} object.
  * @since 2.13
  */
+@GUIMenuSortOrder(4)
 public class BackendListenerGui extends AbstractListenerGui implements ActionListener {
 
     private static final long serialVersionUID = 1L;

File: src/core/org/apache/jmeter/gui/GUIMenuSortOrder.java
Patch:
@@ -22,12 +22,14 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.apache.jmeter.gui.util.MenuInfo;
+
 /**
  * Annotation to allow specific ordering of this item in the GUI Menu
  * @since 4.0
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 public @interface GUIMenuSortOrder {
-    int value() default Integer.MAX_VALUE;
+    int value() default MenuInfo.SORT_ORDER_DEFAULT;
 }

File: src/core/org/apache/jmeter/gui/util/MenuInfo.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class MenuInfo {
 
-    public static final int SORT_ORDER_DEFAULT = Integer.MAX_VALUE;
+    public static final int SORT_ORDER_DEFAULT = 100;
     private final String label;
     private final String className;
     private final JMeterGUIComponent guiComp;

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BeanShellSampler.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.engine.util.ConfigMergabilityIndicator;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.Interruptible;
 import org.apache.jmeter.samplers.SampleResult;
@@ -39,6 +40,7 @@
  * A sampler which understands BeanShell
  *
  */
+@GUIMenuSortOrder(Integer.MAX_VALUE)
 public class BeanShellSampler extends BeanShellTestElement implements Sampler, Interruptible, ConfigMergabilityIndicator
 {
     private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(

File: src/core/org/apache/jmeter/gui/action/Remove.java
Patch:
@@ -89,6 +89,7 @@ private static void removeNode(JMeterTreeNode node) {
         if (testElement.canRemove()) {
             GuiPackage.getInstance().getTreeModel().removeNodeFromParent(node);
             GuiPackage.getInstance().removeNode(testElement);
+            testElement.removed();
         } else {
             String message = testElement.getClass().getName() + " is busy";
             JOptionPane.showMessageDialog(null, message, "Cannot remove item", JOptionPane.ERROR_MESSAGE);

File: src/components/org/apache/jmeter/assertions/JSR223Assertion.java
Patch:
@@ -24,12 +24,14 @@
 import javax.script.ScriptEngine;
 import javax.script.ScriptException;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.util.JSR223TestElement;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@GUIMenuSortOrder(3)
 public class JSR223Assertion extends JSR223TestElement implements Cloneable, Assertion, TestBean
 {
     private static final Logger log = LoggerFactory.getLogger(JSR223Assertion.class);

File: src/components/org/apache/jmeter/assertions/gui/AssertionGui.java
Patch:
@@ -42,6 +42,7 @@
 import javax.swing.ListSelectionModel;
 
 import org.apache.jmeter.assertions.ResponseAssertion;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.gui.util.PowerTableModel;
@@ -54,8 +55,8 @@
 
 /**
  * GUI interface for a {@link ResponseAssertion}.
- *
  */
+@GUIMenuSortOrder(1)
 public class AssertionGui extends AbstractAssertionGui {
     private static final long serialVersionUID = 240L;
 

File: src/components/org/apache/jmeter/assertions/gui/JSONPathAssertionGui.java
Patch:
@@ -25,6 +25,7 @@
 import javax.swing.event.ChangeListener;
 
 import org.apache.jmeter.assertions.JSONPathAssertion;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.VerticalPanel;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
@@ -35,6 +36,7 @@
  * Java class representing GUI for the {@link JSONPathAssertion} component in JMeter
  * @since 4.0
  */
+@GUIMenuSortOrder(2)
 public class JSONPathAssertionGui extends AbstractAssertionGui implements ChangeListener {
 
     private static final long serialVersionUID = -6008018002423594040L;

File: src/components/org/apache/jmeter/extractor/json/jsonpath/gui/JSONPostProcessorGui.java
Patch:
@@ -30,6 +30,7 @@
 import javax.swing.JPanel;
 
 import org.apache.jmeter.extractor.json.jsonpath.JSONPostProcessor;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.processor.gui.AbstractPostProcessorGui;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
@@ -39,6 +40,7 @@
  * GUI for {@link JSONPostProcessor}
  * @since 3.0
  */
+@GUIMenuSortOrder(3)
 public class JSONPostProcessorGui extends AbstractPostProcessorGui {
 
     private static final long serialVersionUID = -2845056031828291476L;

File: src/components/org/apache/jmeter/sampler/DebugSampler.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Set;
 
 import org.apache.jmeter.config.ConfigTestElement;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
@@ -36,8 +37,8 @@
 
 /**
  * The Debug Sampler can be used to "sample" JMeter variables, JMeter properties and System Properties.
- *
  */
+@GUIMenuSortOrder(2)
 public class DebugSampler extends AbstractSampler implements TestBean {
 
     private static final long serialVersionUID = 232L;
@@ -46,9 +47,7 @@ public class DebugSampler extends AbstractSampler implements TestBean {
             Arrays.asList("org.apache.jmeter.config.gui.SimpleConfigGui"));
 
     private boolean displayJMeterVariables;
-
     private boolean displayJMeterProperties;
-
     private boolean displaySystemProperties;
 
     @Override

File: src/components/org/apache/jmeter/visualizers/SummaryReport.java
Patch:
@@ -45,6 +45,7 @@
 import javax.swing.border.EmptyBorder;
 import javax.swing.table.TableCellRenderer;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.FileDialoger;
 import org.apache.jmeter.gui.util.HeaderAsPropertyRendererWrapper;
 import org.apache.jmeter.samplers.Clearable;
@@ -65,6 +66,7 @@
  * Simpler (lower memory) version of Aggregate Report (StatVisualizer).
  * Excludes the Median and 90% columns, which are expensive in memory terms
  */
+@GUIMenuSortOrder(2)
 public class SummaryReport extends AbstractVisualizer implements Clearable, ActionListener {
 
     private static final long serialVersionUID = 241L;

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/HttpDefaultsGui.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.config.gui.AbstractConfigGui;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.HorizontalPanel;
 import org.apache.jmeter.gui.util.VerticalPanel;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
@@ -51,6 +52,7 @@
 /**
  * GUI for Http Request defaults
  */
+@GUIMenuSortOrder(1)
 public class HttpDefaultsGui extends AbstractConfigGui {
 
     private static final long serialVersionUID = 241L;

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -34,6 +34,7 @@
 import javax.swing.JTextField;
 import javax.swing.UIManager;
 
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.gui.util.HorizontalPanel;
 import org.apache.jmeter.gui.util.VerticalPanel;
 import org.apache.jmeter.protocol.http.config.gui.UrlConfigGui;
@@ -48,6 +49,7 @@
 /**
  * HTTP Sampler GUI
  */
+@GUIMenuSortOrder(1)
 public class HttpTestSampleGui extends AbstractSamplerGui {
     
     private static final long serialVersionUID = 241L;

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -27,6 +27,7 @@
 
 import org.apache.jmeter.engine.StandardJMeterEngine;
 import org.apache.jmeter.engine.TreeCloner;
+import org.apache.jmeter.gui.GUIMenuSortOrder;
 import org.apache.jmeter.testelement.property.BooleanProperty;
 import org.apache.jmeter.testelement.property.IntegerProperty;
 import org.apache.jmeter.testelement.property.LongProperty;
@@ -41,6 +42,7 @@
  * 
  * This class is intended to be ThreadSafe.
  */
+@GUIMenuSortOrder(1)
 public class ThreadGroup extends AbstractThreadGroup {
     private static final long serialVersionUID = 282L;
 

File: src/core/org/apache/jmeter/gui/JMeterGUIComponent.java
Patch:
@@ -41,7 +41,6 @@
  * @see org.apache.jmeter.samplers.gui.AbstractSamplerGui
  *
  */
-
 public interface JMeterGUIComponent extends ClearGui {
 
     /**

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
Patch:
@@ -182,7 +182,9 @@ public void actionPerformed(ActionEvent event) {
                 try {
                     defaultArgs = client.getDefaultParameters();
                     Arguments currentUserArgs = oldClient.getDefaultParameters();
-                    userArgMap.keySet().removeAll(currentUserArgs.getArgumentsAsMap().keySet());
+                    if(currentUserArgs != null) {
+                        userArgMap.keySet().removeAll(currentUserArgs.getArgumentsAsMap().keySet());
+                    }
                 } catch (AbstractMethodError e) {
                     log.warn("BackendListenerClient doesn't implement "
                             + "getDefaultParameters.  Default parameters won't "

File: src/core/org/apache/jmeter/gui/util/JSyntaxTextArea.java
Patch:
@@ -98,6 +98,8 @@ public void setCaretPosition(int b) { }
                     @Override
                     public void discardAllEdits() { }
                     @Override
+                    public void setText(String t) { }
+                    @Override
                     public boolean isCodeFoldingEnabled(){ return true; }
                 };
             } else {

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -246,6 +246,7 @@ private void makeHelpMenu() {
         JMenuItem threadDump = makeMenuItemRes("thread_dump", ActionNames.THREAD_DUMP);//$NON-NLS-1$
         
         JMenu usefulLinks = makeMenuRes("useful_links");//$NON-NLS-1$
+        usefulLinks.add(makeMenuItemRes("link_release_notes", ActionNames.LINK_RELEASE_NOTES));
         usefulLinks.add(makeMenuItemRes("link_bug_tracker", ActionNames.LINK_BUG_TRACKER));
         usefulLinks.add(makeMenuItemRes("link_comp_ref", ActionNames.LINK_COMP_REF));
         usefulLinks.add(makeMenuItemRes("link_nightly_build", ActionNames.LINK_NIGHTLY_BUILD));

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -61,7 +61,7 @@ public final class ActionNames {
     public static final String HEAP_DUMP        = "heap_dump"; // $NON-NLS-1$
     public static final String LAF_PREFIX       = "laf:"; // Look and Feel prefix
     public static final String LINK_BUG_TRACKER = "link_bug_tracker:"; // URI of bug tracker
-    public static final String LINK_COMP_REF    = "link_component_reference:"; // URI of nightly build
+    public static final String LINK_COMP_REF    = "link_component_reference:"; // URI of component reference
     public static final String LINK_NIGHTLY_BUILD = "link_nightly_build:"; // URI of nightly build
     public static final String LINK_RELEASE_NOTES = "link_release_notes"; // URI of the release note
     public static final String LOGGER_PANEL_ENABLE_DISABLE     = "logger_panel_enable_disable"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -61,6 +61,7 @@ public final class ActionNames {
     public static final String HEAP_DUMP        = "heap_dump"; // $NON-NLS-1$
     public static final String LAF_PREFIX       = "laf:"; // Look and Feel prefix
     public static final String LINK_BUG_TRACKER = "link_bug_tracker:"; // URI of bug tracker
+    public static final String LINK_COMP_REF    = "link_component_reference:"; // URI of nightly build
     public static final String LINK_NIGHTLY_BUILD = "link_nightly_build:"; // URI of nightly build
     public static final String LINK_RELEASE_NOTES = "link_release_notes"; // URI of the release note
     public static final String LOGGER_PANEL_ENABLE_DISABLE     = "logger_panel_enable_disable"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -247,6 +247,7 @@ private void makeHelpMenu() {
         
         JMenu usefulLinks = makeMenuRes("useful_links");//$NON-NLS-1$
         usefulLinks.add(makeMenuItemRes("link_bug_tracker", ActionNames.LINK_BUG_TRACKER));
+        usefulLinks.add(makeMenuItemRes("link_comp_ref", ActionNames.LINK_COMP_REF));
         usefulLinks.add(makeMenuItemRes("link_nightly_build", ActionNames.LINK_NIGHTLY_BUILD));
 
         JMenuItem helpAbout = makeMenuItemRes("about", 'A', ActionNames.ABOUT);

File: src/components/org/apache/jmeter/visualizers/backend/BackendListener.java
Patch:
@@ -219,7 +219,7 @@ public void run() {
                         }
                         // try to process as many as possible
                         // The == comparison is not a mistake
-                        while (!(endOfLoop = (sampleResult == FINAL_SAMPLE_RESULT)) && sampleResult != null ) { 
+                        while (!(endOfLoop = sampleResult == FINAL_SAMPLE_RESULT) && sampleResult != null ) { 
                             sampleResults.add(sampleResult);
                             if (isDebugEnabled) {
                                 log.debug("Thread: {} polling from queue: {}", Thread.currentThread().getName(),

File: src/components/org/apache/jmeter/assertions/JSONPathAssertion.java
Patch:
@@ -29,11 +29,11 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.jayway.jsonpath.JsonPath;
-
 import net.minidev.json.JSONArray;
 import net.minidev.json.JSONObject;
 
+import com.jayway.jsonpath.JsonPath;
+
 /**
  * This is main class for JSONPath Assertion which verifies assertion on
  * previous sample result using JSON path expression

File: src/components/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -189,7 +189,7 @@ private void setTestType(int testType) {
     }
 
     private void setTestTypeMasked(int testType) {
-        int value = getTestType() & ~(TYPE_MASK) | testType;
+        int value = getTestType() & ~TYPE_MASK | testType;
         setProperty(new IntegerProperty(TEST_TYPE, value));
     }
 
@@ -347,7 +347,7 @@ private AssertionResult evaluateResponse(SampleResult response) {
             return result.setResultForNull();
         }
 
-        boolean pass = true;
+        boolean pass;
         boolean hasTrue = false;
         ArrayList<String> allCheckMessage = new ArrayList<>();
         try {

File: src/components/org/apache/jmeter/assertions/gui/BeanShellAssertionGui.java
Patch:
@@ -28,12 +28,12 @@
 import javax.swing.JTextField;
 
 import org.apache.jmeter.assertions.BeanShellAssertion;
+import org.apache.jmeter.gui.util.FilePanelEntry;
 import org.apache.jmeter.gui.util.JSyntaxTextArea;
 import org.apache.jmeter.gui.util.JTextScrollPane;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.BooleanProperty;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jmeter.gui.util.FilePanelEntry;
 
 public class BeanShellAssertionGui extends AbstractAssertionGui {
 
@@ -88,8 +88,7 @@ public String getLabelResource() {
         return "bsh_assertion_title"; // $NON-NLS-1$
     }
 
-    private JPanel createFilenamePanel()
-    {
+    private JPanel createFilenamePanel() {
 
         JPanel filenamePanel = new JPanel(new BorderLayout());
         filenamePanel.add(filename, BorderLayout.CENTER);

File: src/components/org/apache/jmeter/extractor/gui/HtmlExtractorGui.java
Patch:
@@ -125,7 +125,6 @@ public void modifyTestElement(TestElement extractor) {
             } else {
                 htmlExtractor.setExtractor(USE_DEFAULT_EXTRACTOR_IMPL);               
             }
-
         }
     }
 
@@ -156,8 +155,6 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         add(makeParameterPanel(), BorderLayout.CENTER);
     }
 
-    
-
     private Component makeExtractorPanel() {
         JPanel panel = new HorizontalPanel();
         panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("html_extractor_type"))); //$NON-NLS-1$

File: src/components/org/apache/jmeter/extractor/json/jsonpath/JSONManager.java
Patch:
@@ -28,14 +28,14 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import net.minidev.json.JSONArray;
+import net.minidev.json.JSONObject;
+
 import com.jayway.jsonpath.Configuration;
 import com.jayway.jsonpath.JsonPath;
 import com.jayway.jsonpath.Option;
 import com.jayway.jsonpath.PathNotFoundException;
 
-import net.minidev.json.JSONArray;
-import net.minidev.json.JSONObject;
-
 /**
  * Handles the extractions
  * https://github.com/jayway/JsonPath/blob/master/json-path/src/test/java/com/jayway/jsonpath/ComplianceTest.java

File: src/components/org/apache/jmeter/timers/ConstantThroughputTimerBeanInfo.java
Patch:
@@ -19,11 +19,11 @@
 package org.apache.jmeter.timers;
 
 import java.beans.PropertyDescriptor;
+
 import org.apache.jmeter.testbeans.BeanInfoSupport;
 
 /**
  * BeanInfo for the ConstantThroughputTimer.
- *
  */
 public class ConstantThroughputTimerBeanInfo extends BeanInfoSupport {
 

File: src/components/org/apache/jmeter/visualizers/Graph.java
Patch:
@@ -220,7 +220,7 @@ private void drawSample(long x, Sample oneSample, Graphics g) {
             }
             g.drawLine(adjustedWidth, height - data, adjustedWidth, height - data - 1);
             if (log.isDebugEnabled()) {
-                log.debug("Drawing coords = {}, {}", adjustedWidth, (height - data));
+                log.debug("Drawing coords = {}, {}", adjustedWidth, height - data);
             }
         }
 

File: src/components/org/apache/jmeter/visualizers/RenderAsXML.java
Patch:
@@ -150,7 +150,7 @@ private void expandAll(TreePath parent) {
         }
 
         private void applyToChildren(TreePath parent, Consumer<TreePath> method) {
-            TreeNode node = ((TreeNode) parent.getLastPathComponent());
+            TreeNode node = (TreeNode) parent.getLastPathComponent();
             Enumeration<?> e = node.children();
             while (e.hasMoreElements()) {
                 TreeNode n = (TreeNode) e.nextElement();

File: src/core/org/apache/jmeter/assertions/gui/AbstractAssertionGui.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 
-
 import org.apache.jmeter.gui.AbstractScopedJMeterGuiComponent;
 import org.apache.jmeter.gui.util.MenuFactory;
 
@@ -32,7 +31,6 @@
  * need to use the createScopePanel() to add the panel to the GUI, and they also
  * need to use saveScopeSettings() and showScopeSettings() to keep the test element
  * and GUI in synch.
- *
  */
 public abstract class AbstractAssertionGui extends AbstractScopedJMeterGuiComponent {
 

File: src/core/org/apache/jmeter/config/gui/SimpleConfigGui.java
Patch:
@@ -28,6 +28,7 @@
 import javax.swing.JPanel;
 import javax.swing.JTable;
 import javax.swing.ListSelectionModel;
+
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.gui.util.PowerTableModel;

File: src/core/org/apache/jmeter/gui/GlobalUndoableEdit.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.jmeter.gui;
 
 import java.util.function.Consumer;
+
 import javax.swing.undo.AbstractUndoableEdit;
 import javax.swing.undo.CannotRedoException;
 import javax.swing.undo.CannotUndoException;

File: src/core/org/apache/jmeter/gui/UndoHistoryItem.java
Patch:
@@ -18,10 +18,10 @@
 
 package org.apache.jmeter.gui;
 
-import org.apache.jorphan.collections.HashTree;
-
 import java.io.Serializable;
+
 import org.apache.jmeter.engine.TreeCloner;
+import org.apache.jorphan.collections.HashTree;
 
 /**
  * Undo history item

File: src/core/org/apache/jmeter/gui/action/RemoteStart.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.List;
 import java.util.Set;
 import java.util.StringTokenizer;
+
 import org.apache.jmeter.JMeter;
 import org.apache.jmeter.engine.DistributedRunner;
 import org.apache.jmeter.gui.GuiPackage;

File: src/core/org/apache/jmeter/gui/util/HorizontalPanel.java
Patch:
@@ -22,8 +22,8 @@
  */
 package org.apache.jmeter.gui.util;
 
-import java.awt.Color;
 import java.awt.BorderLayout;
+import java.awt.Color;
 import java.awt.Component;
 
 import javax.swing.Box;

File: src/core/org/apache/jmeter/gui/util/VerticalPanel.java
Patch:
@@ -18,8 +18,8 @@
 
 package org.apache.jmeter.gui.util;
 
-import java.awt.Color;
 import java.awt.BorderLayout;
+import java.awt.Color;
 import java.awt.Component;
 
 import javax.swing.Box;

File: src/core/org/apache/jmeter/report/core/SampleBuilder.java
Patch:
@@ -23,9 +23,6 @@
 import java.text.NumberFormat;
 import java.util.Locale;
 
-import org.apache.jmeter.report.core.Sample;
-import org.apache.jmeter.report.core.SampleMetadata;
-
 /**
  * This class is meant to simplify the building of samples.
  * <p>

File: src/core/org/apache/jmeter/report/core/SampleMetaDataParser.java
Patch:
@@ -17,8 +17,6 @@
  */
 package org.apache.jmeter.report.core;
 
-import org.apache.jmeter.report.core.SampleMetadata;
-
 /**
  * Simple parser to get a {@link SampleMetadata} instance<br>
  * 

File: src/core/org/apache/jmeter/report/core/SampleWriter.java
Patch:
@@ -19,8 +19,6 @@
 
 import java.io.Closeable;
 
-import org.apache.jmeter.report.core.Sample;
-
 /**
  * Describes sample writer basic operations.<br>
  * <br>

File: src/core/org/apache/jmeter/report/dashboard/TemplateVisitor.java
Patch:
@@ -23,12 +23,12 @@
 import java.io.OutputStreamWriter;
 import java.io.Writer;
 import java.nio.charset.StandardCharsets;
-import java.nio.file.StandardCopyOption;
 import java.nio.file.FileAlreadyExistsException;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.SimpleFileVisitor;
+import java.nio.file.StandardCopyOption;
 import java.nio.file.attribute.BasicFileAttributes;
 
 import org.apache.commons.io.FileUtils;

File: src/core/org/apache/jmeter/report/processor/FilterConsumer.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.jmeter.report.core.Sample;
 import org.apache.jmeter.report.core.SamplePredicate;
-import org.apache.jmeter.report.processor.AbstractSampleConsumer;
 
 /**
  * <p>

File: src/core/org/apache/jmeter/report/processor/TaggerConsumer.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.jmeter.report.core.Sample;
 import org.apache.jmeter.report.core.SampleBuilder;
 import org.apache.jmeter.report.core.SampleMetadata;
-import org.apache.jmeter.report.processor.AbstractSampleConsumer;
 
 /**
  * The Class TimeCountConsumer adds a data field to the samples it consumes.

File: src/core/org/apache/jmeter/reporters/ResultCollectorHelper.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.jmeter.reporters;
 
-import org.apache.jmeter.reporters.ResultCollector;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.visualizers.Visualizer;
 

File: src/core/org/apache/jmeter/reporters/gui/ResultActionGui.java
Patch:
@@ -22,15 +22,14 @@
 
 import javax.swing.Box;
 
-import org.apache.jmeter.reporters.ResultAction;
 import org.apache.jmeter.gui.OnErrorPanel;
 import org.apache.jmeter.processor.gui.AbstractPostProcessorGui;
+import org.apache.jmeter.reporters.ResultAction;
 import org.apache.jmeter.testelement.OnErrorTestElement;
 import org.apache.jmeter.testelement.TestElement;
 
 /**
  * Create a Result Action Test Element
- *
  */
 public class ResultActionGui extends AbstractPostProcessorGui {
 

File: src/core/org/apache/jmeter/samplers/AsynchSampleSender.java
Patch:
@@ -146,7 +146,8 @@ public void run() {
                 while (!eof) {
                     List<SampleEvent> l = new ArrayList<>();
                     SampleEvent e = queue.take();
-                    while (!(eof = (e == FINAL_EVENT)) && e != null) { // try to process as many as possible
+                    // try to process as many as possible
+                    while (!(eof = FINAL_EVENT.equals(e)) && e != null) {
                         l.add(e);
                         e = queue.poll(); // returns null if nothing on queue currently
                     }

File: src/core/org/apache/jmeter/samplers/StatisticalSampleSender.java
Patch:
@@ -215,7 +215,7 @@ private Object readResolve() throws ObjectStreamException{
         if (log.isInfoEnabled()) {
             log.info(
                     "Using StatisticalSampleSender for this run. {} config: Thresholds: num={}, time={}. Key uses ThreadName: {}",
-                    (isClientConfigured() ? "Client" : "Server"), numSamplesThreshold, timeThresholdMs,
+                    isClientConfigured() ? "Client" : "Server", numSamplesThreshold, timeThresholdMs,
                     keyOnThreadName);
         }
         return this;

File: src/core/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -572,7 +572,7 @@ private static String[] splitHeader(String headerLine, String delim) {
                 return null; // unknown column name
             }
             if (current <= previous) {
-                log.warn("Column header number {} name {} is out of order.", (i + 1), label);
+                log.warn("Column header number {} name {} is out of order.", i + 1, label);
                 return null; // out of order
             }
             previous = current;

File: src/core/org/apache/jmeter/save/ScriptWrapperConverter.java
Patch:
@@ -22,17 +22,16 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.HashTree;
 
-import com.thoughtworks.xstream.mapper.Mapper;
 import com.thoughtworks.xstream.converters.ConversionException;
 import com.thoughtworks.xstream.converters.Converter;
 import com.thoughtworks.xstream.converters.MarshallingContext;
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
 import com.thoughtworks.xstream.io.HierarchicalStreamReader;
 import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
+import com.thoughtworks.xstream.mapper.Mapper;
 
 /**
  * Handles XStream conversion of Test Scripts
- *
  */
 public class ScriptWrapperConverter implements Converter {
 

File: src/core/org/apache/jmeter/save/converters/HashTreeConverter.java
Patch:
@@ -20,12 +20,12 @@
 
 import org.apache.jorphan.collections.HashTree;
 
-import com.thoughtworks.xstream.mapper.Mapper;
 import com.thoughtworks.xstream.converters.MarshallingContext;
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
 import com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter;
 import com.thoughtworks.xstream.io.HierarchicalStreamReader;
 import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
+import com.thoughtworks.xstream.mapper.Mapper;
 
 public class HashTreeConverter extends AbstractCollectionConverter {
 

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -685,7 +685,8 @@ public PropertyComparator(BeanInfo beanInfo) {
         public int compare(PropertyDescriptor d1, PropertyDescriptor d2) {
             String g1 = group(d1);
             String g2 = group(d2);
-            Integer go1 = groupOrder(g1), go2 = groupOrder(g2);
+            Integer go1 = groupOrder(g1);
+            Integer go2 = groupOrder(g2);
 
             int result = go1.compareTo(go2);
             if (result != 0) {

File: src/core/org/apache/jmeter/testbeans/gui/TypeEditor.java
Patch:
@@ -30,7 +30,8 @@ public enum TypeEditor {
     TableEditor    {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new TableEditor(); }}, // NOSONAR Keep naming for compatibility
     TextAreaEditor {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new TextAreaEditor(descriptor); }}, // NOSONAR Keep naming for compatibility
     ComboStringEditor {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new ComboStringEditor(descriptor); }}, // NOSONAR Keep naming for compatibility
-    ;
+    ; // CHECKSTYLE IGNORE OneStatementPerLine
+
     // Some editors may need the descriptor
     abstract PropertyEditor getInstance(PropertyDescriptor descriptor);
 }

File: src/core/org/apache/jmeter/testelement/property/NumberProperty.java
Patch:
@@ -57,7 +57,7 @@ public void setObjectValue(Object v) {
         } else {
             try {
                 setNumberValue(v.toString());
-            } catch (RuntimeException e) {
+            } catch (RuntimeException ignored) {
             }
         }
     }

File: src/core/org/apache/jmeter/threads/JMeterVariables.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
-import java.util.Set;
 import java.util.Map.Entry;
+import java.util.Set;
 
 import org.apache.jmeter.util.JMeterUtils;
 

File: src/core/org/apache/jmeter/util/BeanShellBeanInfoSupport.java
Patch:
@@ -22,8 +22,8 @@
 
 import org.apache.jmeter.testbeans.BeanInfoSupport;
 import org.apache.jmeter.testbeans.TestBean;
-import org.apache.jmeter.testbeans.gui.TextAreaEditor;
 import org.apache.jmeter.testbeans.gui.FileEditor;
+import org.apache.jmeter.testbeans.gui.TextAreaEditor;
 
 /**
  * Parent class to handle common GUI design

File: src/core/org/apache/jmeter/util/Calculator.java
Patch:
@@ -96,7 +96,7 @@ private void addValue(long newValue, int sampleCount) {
             maximum=Math.max(newValue/sampleCount, maximum);
             // For n values in an aggregate sample the average value = (val/n)
             // So need to add n * (val/n) * (val/n) = val * val / n
-            sumOfSquares += (currentVal * currentVal) / (sampleCount);
+            sumOfSquares += (currentVal * currentVal) / sampleCount;
         } else { // no point dividing by 1
             minimum=Math.min(newValue, minimum);
             maximum=Math.max(newValue, maximum);

File: src/core/org/apache/jmeter/util/CustomX509TrustManager.java
Patch:
@@ -52,7 +52,7 @@ public CustomX509TrustManager(final X509TrustManager defaultTrustManager) {
      * @see javax.net.ssl.X509TrustManager#checkClientTrusted(X509Certificate[],String)
      */
     @Override
-    public void checkClientTrusted(X509Certificate[] certificates, String authType) throws CertificateException {
+    public void checkClientTrusted(X509Certificate[] certificates, String authType) {
         if (log.isDebugEnabled() && certificates != null) {
             for (int i = 0; i < certificates.length; i++) {
                 X509Certificate cert = certificates[i];
@@ -63,7 +63,7 @@ public void checkClientTrusted(X509Certificate[] certificates, String authType)
                         + "  Valid from: {}\n"
                         + "  Valid until: {}\n"
                         + "  Issuer: {}",
-                        (i + 1),
+                        i + 1,
                         cert.getSubjectDN(),
                         cert.getSigAlgName(),
                         cert.getNotBefore(),
@@ -88,7 +88,7 @@ public void checkServerTrusted(X509Certificate[] certificates,String authType) t
                         + "  Valid from: {}\n"
                         + "  Valid until: {}\n"
                         + "  Issuer: {}",
-                        (i + 1),
+                        i + 1,
                         cert.getSubjectDN(),
                         cert.getSigAlgName(),
                         cert.getNotBefore(),

File: src/core/org/apache/jmeter/util/HostNameSetter.java
Patch:
@@ -54,8 +54,6 @@ private static Method init(Class<?> cls) {
         return s;
     }
     
-
-
     private static void initFail(Exception e) {
         // ignore
     }

File: src/core/org/apache/jmeter/util/JSR223BeanInfoSupport.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.ResourceBundle;
+
 import javax.script.ScriptEngineFactory;
 import javax.script.ScriptEngineManager;
 

File: src/examples/org/apache/jmeter/examples/sampler/gui/ExampleSamplerGui.java
Patch:
@@ -28,6 +28,7 @@
 import javax.swing.JLabel;
 import javax.swing.JPanel;
 import javax.swing.JTextArea;
+
 import org.apache.jmeter.examples.sampler.ExampleSampler;
 import org.apache.jmeter.samplers.gui.AbstractSamplerGui;
 import org.apache.jmeter.testelement.TestElement;
@@ -41,7 +42,6 @@
  *
  * The GUI class is not invoked in non-GUI mode, so it should not perform any
  * additional setup that a test would need at run-time
- *
  */
 public class ExampleSamplerGui extends AbstractSamplerGui {
 

File: src/functions/org/apache/jmeter/functions/JavaScript.java
Patch:
@@ -35,11 +35,11 @@
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.slf4j.LoggerFactory;
-import org.slf4j.Logger;
 import org.mozilla.javascript.Context;
 import org.mozilla.javascript.RhinoException;
 import org.mozilla.javascript.Scriptable;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * javaScript function implementation that executes a piece of JavaScript (not Java!) code and returns its value

File: src/functions/org/apache/jmeter/functions/Jexl2Function.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * A function which understands Commons JEXL2

File: src/functions/org/apache/jmeter/functions/SplitFunction.java
Patch:
@@ -28,9 +28,9 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 // @see org.apache.jmeter.functions.PackageTest for unit tests
 

File: src/functions/org/apache/jmeter/functions/StringFromFile.java
Patch:
@@ -33,9 +33,9 @@
 import org.apache.jmeter.testelement.TestStateListener;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JMeterStopThreadException;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * <p>StringFromFile Function to read a String from a text file.</p>

File: src/functions/org/apache/jmeter/functions/XPath.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 // @see org.apache.jmeter.functions.PackageTest for unit tests
 

File: src/jorphan/org/apache/jorphan/collections/Data.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.List;
 import java.util.Map;
 
-import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Use this class to store database-like data. This class uses rows and columns

File: src/jorphan/org/apache/jorphan/gui/MenuScroller.java
Patch:
@@ -447,7 +447,7 @@ public void setTopFixedCount(int topFixedCount) {
         if (firstIndex <= topFixedCount) {
             firstIndex = topFixedCount;
         } else {
-            firstIndex += (topFixedCount - this.topFixedCount);
+            firstIndex = firstIndex + topFixedCount - this.topFixedCount;
         }
         this.topFixedCount = topFixedCount;
     }
@@ -519,13 +519,12 @@ public void dispose() {
      * Ensures that the <code>dispose</code> method of this MenuScroller is
      * called when there are no more references to it.
      * 
-     * @exception Throwable
-     *                if an error occurs.
      * @see MenuScroller#dispose()
      */
     @Override
     public void finalize() throws Throwable {
         dispose();
+        super.finalize();
     }
 
     private void refreshMenu() {

File: src/jorphan/org/apache/jorphan/gui/ObjectTableModel.java
Patch:
@@ -25,9 +25,9 @@
 
 import javax.swing.table.DefaultTableModel;
 
-import org.slf4j.LoggerFactory;
 import org.apache.jorphan.reflect.Functor;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * The ObjectTableModel is a TableModel whose rows are objects;

File: src/jorphan/org/apache/jorphan/math/StatCalculator.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.ConcurrentModificationException;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.TreeMap;
 import java.util.Map.Entry;
+import java.util.TreeMap;
 
 import org.apache.commons.lang3.mutable.MutableLong;
 

File: src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java
Patch:
@@ -352,8 +352,7 @@ public void configure(TestElement el)
     }
 
     private void setupMethods(){
-        String className =
-            ((String) classnameCombo.getSelectedItem());
+        String className = (String) classnameCombo.getSelectedItem();
         methodName.removeAllItems();
         if (className != null) {
             try {
@@ -365,6 +364,7 @@ private void setupMethods(){
                 }
                 methodName.repaint();
             } catch (ClassNotFoundException e) {
+                throw new RuntimeException(e);
             }
         }
     }

File: src/junit/test/AfterAnnotatedTest.java
Patch:
@@ -19,6 +19,7 @@
 package test;
 
 import static org.junit.Assert.fail;
+
 import org.junit.After;
 import org.junit.Test;
 

File: src/junit/test/BeforeAnnotatedTest.java
Patch:
@@ -19,6 +19,7 @@
 package test;
 
 import static org.junit.Assert.fail;
+
 import org.junit.Before;
 import org.junit.Test;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java
Patch:
@@ -38,8 +38,8 @@
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.testelement.property.TestElementProperty;
 import org.apache.jmeter.threads.JMeterContextService;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.xbill.DNS.ARecord;
 import org.xbill.DNS.Cache;
 import org.xbill.DNS.ExtendedResolver;
@@ -59,7 +59,6 @@
  *
  * @since 2.12
  */
-
 public class DNSCacheManager extends ConfigTestElement implements TestIterationListener, Serializable, DnsResolver {
 
     private static final long serialVersionUID = 2122L;
@@ -128,7 +127,7 @@ private Resolver createResolver() {
             }
             ExtendedResolver result = new ExtendedResolver(serverNames);
             if (log.isDebugEnabled()) {
-                log.debug("Using DNS Resolvers: {}", Arrays.asList((result).getResolvers()));
+                log.debug("Using DNS Resolvers: {}", Arrays.asList(result.getResolvers()));
             }
             // resolvers will be chosen via round-robin
             result.setLoadBalance(true);

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
Patch:
@@ -32,14 +32,14 @@
 
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.util.JMeterUtils;
-import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.slf4j.Logger;
 import org.apache.oro.text.regex.MatchResult;
 import org.apache.oro.text.regex.Pattern;
 import org.apache.oro.text.regex.PatternMatcherInput;
 import org.apache.oro.text.regex.Perl5Compiler;
 import org.apache.oro.text.regex.Perl5Matcher;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Thread to handle one client request. Gets the request from the client and

File: src/protocol/http/org/apache/jmeter/protocol/http/control/KerberosManager.java
Patch:
@@ -36,8 +36,8 @@
 import javax.security.auth.login.LoginException;
 
 import org.apache.jmeter.util.JMeterUtils;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Takes in charge Kerberos auth mechanism

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/RecordController.java
Patch:
@@ -33,8 +33,8 @@
 import org.apache.jmeter.protocol.http.control.RecordingController;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class RecordController extends LogicControllerGui implements ActionListener {
     private static final long serialVersionUID = 241L;

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/AuthPanel.java
Patch:
@@ -52,8 +52,8 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.GuiUtils;
 import org.apache.jorphan.gui.layout.VerticalLayout;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Handles input for determining if authentication services are required for a

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -278,7 +278,7 @@ public void configure(TestElement el) {
 
         CookieManager cookieManager = (CookieManager) el;
         populateTable(cookieManager);
-        clearEachIteration.setSelected((cookieManager).getClearEachIteration());
+        clearEachIteration.setSelected(cookieManager.getClearEachIteration());
         // must set policy after setting handler (which may change the policy)
         policy.setText(cookieManager.getPolicy());
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/AnchorModifier.java
Patch:
@@ -40,15 +40,13 @@
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.threads.JMeterContext;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 
-// For Unit tests, @see TestAnchorModifier
-
 public class AnchorModifier extends AbstractTestElement implements PreProcessor, Serializable {
     private static final Logger log = LoggerFactory.getLogger(AnchorModifier.class);
 

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/RegExUserParameters.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.jmeter.testelement.AbstractTestElement;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * This component allows you to specify reference name of a regular expression that extracts names and values of HTTP request parameters. 

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/BaseParser.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * BaseParser is the base class for {@link LinkExtractorParser}

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/CssParserCacheLoader.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.Triple;
 import org.apache.jmeter.util.JMeterUtils;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.github.benmanes.caffeine.cache.CacheLoader;
 import com.helger.css.ECSSVersion;

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -27,12 +27,11 @@
 import java.util.regex.Pattern;
 
 import org.apache.commons.lang3.StringUtils;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * {@link HTMLParser} subclasses can parse HTML content to obtain URLs.
- *
  */
 public abstract class HTMLParser extends BaseParser {
 

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/JTidyHTMLParser.java
Patch:
@@ -26,8 +26,8 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.protocol.http.util.ConversionUtils;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
@@ -37,7 +37,6 @@
 
 /**
  * HtmlParser implementation using JTidy.
- *
  */
 class JTidyHTMLParser extends HTMLParser {
     private static final Logger log = LoggerFactory.getLogger(JTidyHTMLParser.class);
@@ -51,7 +50,7 @@ protected JTidyHTMLParser() {
      */
     @Override
     public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL baseUrl, URLCollection urls, String encoding) throws HTMLParseException {
-        Document dom = null;
+        Document dom;
         try {
             dom = (Document) getDOM(html, encoding);
         } catch (SAXException se) {

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/URLCollection.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.commons.lang3.Validate;
 import org.apache.jmeter.protocol.http.util.ConversionUtils;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Collection class designed for handling URLs
@@ -37,7 +37,6 @@
  * <p>
  * N.B. Designed for use by HTMLParser, so is not a full implementation - e.g.
  * does not support remove()
- *
  */
 public class URLCollection implements Iterable<URL> {
     private static final Logger log = LoggerFactory.getLogger(URLCollection.class);
@@ -105,7 +104,6 @@ public Iterator<URL> iterator() {
 
     /*
      * Private iterator used to unwrap the URL from the URLString class
-     *
      */
     private static class UrlIterator implements Iterator<URL> {
         private final Iterator<URLString> iter;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/FormCharSetFinder.java
Patch:
@@ -22,13 +22,13 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.protocol.http.parser.HTMLParseException;
-import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.slf4j.Logger;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
 import org.jsoup.select.Elements;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * A parser for html, to find the form tags, and their accept-charset value

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -52,17 +52,16 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.util.JMeterUtils;
-import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JMeterException;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Thread to handle one client request. Gets the request from the client and
  * passes it on to the server, then sends the response back to the client.
  * Information about the request and response is stored so it can be used in a
  * JMeter test plan.
- *
  */
 public class Proxy extends Thread {
     private static final Logger log = LoggerFactory.getLogger(Proxy.class);
@@ -185,7 +184,8 @@ public void run() {
             if ((request.getMethod().startsWith(HTTPConstants.CONNECT)) && (outStreamClient != null)) {
                 log.debug("{} Method CONNECT => SSL", port);
                 // write a OK response to browser, to engage SSL exchange
-                outStreamClient.write(("HTTP/1.0 200 OK\r\n\r\n").getBytes(SampleResult.DEFAULT_HTTP_ENCODING)); // $NON-NLS-1$
+                outStreamClient.write(
+                        "HTTP/1.0 200 OK\r\n\r\n".getBytes(SampleResult.DEFAULT_HTTP_ENCODING)); // $NON-NLS-1$
                 outStreamClient.flush();
                // With ssl request, url is host:port (without https:// or path)
                 String[] param = request.getUrl().split(":");  // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSamplerBeanInfo.java
Patch:
@@ -31,9 +31,9 @@
 import org.apache.jmeter.testbeans.BeanInfoSupport;
 import org.apache.jmeter.testbeans.gui.FileEditor;
 import org.apache.jmeter.util.JMeterUtils;
-import org.slf4j.LoggerFactory;
 import org.apache.jorphan.reflect.ClassFinder;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class AccessLogSamplerBeanInfo extends BeanInfoSupport {
     private static final Logger log = LoggerFactory.getLogger(AccessLogSamplerBeanInfo.class);

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPResultConverter.java
Patch:
@@ -28,15 +28,14 @@
 import org.apache.jmeter.samplers.SampleSaveConfiguration;
 import org.apache.jmeter.save.converters.SampleResultConverter;
 
-import com.thoughtworks.xstream.mapper.Mapper;
 import com.thoughtworks.xstream.converters.MarshallingContext;
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
 import com.thoughtworks.xstream.io.HierarchicalStreamReader;
 import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
+import com.thoughtworks.xstream.mapper.Mapper;
 
 /**
  * Class for XStream conversion of HTTPResult
- *
  */
 public class HTTPResultConverter extends SampleResultConverter {
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java
Patch:
@@ -30,15 +30,14 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.ThreadListener;
 import org.apache.jmeter.util.JMeterUtils;
-import org.slf4j.LoggerFactory;
-import org.slf4j.Logger;
 import org.apache.oro.text.regex.Pattern;
 import org.apache.oro.text.regex.Perl5Compiler;
 import org.apache.oro.text.regex.Perl5Matcher;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Provides Session Filtering for the AccessLog Sampler.
- *
  */
 public class SessionFilter implements Filter, Serializable, TestCloneable,ThreadListener {
     private static final long serialVersionUID = 233L;

File: src/protocol/java/org/apache/jmeter/protocol/java/control/gui/BeanShellSamplerGui.java
Patch:
@@ -27,14 +27,14 @@
 import javax.swing.JTextArea;
 import javax.swing.JTextField;
 
+import org.apache.jmeter.gui.util.FilePanelEntry;
+import org.apache.jmeter.gui.util.JSyntaxTextArea;
+import org.apache.jmeter.gui.util.JTextScrollPane;
 import org.apache.jmeter.protocol.java.sampler.BeanShellSampler;
 import org.apache.jmeter.samplers.gui.AbstractSamplerGui;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.BooleanProperty;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jmeter.gui.util.JSyntaxTextArea;
-import org.apache.jmeter.gui.util.JTextScrollPane;
-import org.apache.jmeter.gui.util.FilePanelEntry;
 
 public class BeanShellSamplerGui extends AbstractSamplerGui {
 

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java
Patch:
@@ -476,7 +476,7 @@ private static int getJdbcType(String jdbcType) throws SQLException {
                 throw new SQLException("Invalid data type: "+jdbcType, e);
             }
         }
-        return (entry).intValue();
+        return entry.intValue();
     }
 
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java
Patch:
@@ -45,7 +45,6 @@
 
 /**
  * This is the GUI for JMS Publisher
- *
  */
 public class JMSPublisherGui extends AbstractSamplerGui implements ChangeListener {
 
@@ -223,7 +222,8 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         msgChoice.setLayout(new BoxLayout(msgChoice, BoxLayout.X_AXIS));
         mainPanel.add(msgChoice);
 
-        fileEncoding = new JLabeledChoice(JMeterUtils.getResString("content_encoding") + "\u00A0\u00A0", // $NON-NLS-1$
+        String nonBreakingSpace = "\u00A0"; // CHECKSTYLE IGNORE AvoidEscapedUnicodeCharacters
+        fileEncoding = new JLabeledChoice(JMeterUtils.getResString("content_encoding") + nonBreakingSpace + nonBreakingSpace, // $NON-NLS-1$
                 PublisherSampler.getSupportedEncodings(), true, false);
         fileEncoding.setLayout(new BoxLayout(fileEncoding, BoxLayout.X_AXIS));
         fileEncoding.add(Box.createHorizontalGlue());

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSSamplerGui.java
Patch:
@@ -43,8 +43,7 @@
 import org.apache.jorphan.gui.JLabeledTextField;
 
 /**
- * Configuration screen for Java Messaging Point-to-Point requests. <br>
- *
+ * Configuration screen for Java Messaging Point-to-Point requests.
  */
 public class JMSSamplerGui extends AbstractSamplerGui {
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/render/ObjectMessageRenderer.java
Patch:
@@ -102,7 +102,6 @@ protected String findEncoding(String filename) {
     }
 
     protected Serializable getContent(String filename) {
-        Serializable object = (Serializable) new XStream().fromXML(new File(filename));
-        return object;
+        return (Serializable) new XStream().fromXML(new File(filename));
     }
 }

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArguments.java
Patch:
@@ -24,10 +24,10 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.testelement.property.TestElementProperty;
-import org.apache.jmeter.config.ConfigTestElement;
 
 /**
  * A set of LDAPArgument objects. author Dolf Smits(Dolf.Smits@Siemens.com)

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapExtConfigGui.java
Patch:
@@ -28,16 +28,15 @@
 import javax.swing.JCheckBox;
 import javax.swing.JLabel;
 import javax.swing.JPanel;
+import javax.swing.JPasswordField;
 import javax.swing.JRadioButton;
 import javax.swing.JTextField;
-import javax.swing.JPasswordField;
 
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.config.gui.AbstractConfigGui;
 import org.apache.jmeter.config.gui.ArgumentsPanel;
 import org.apache.jmeter.gui.util.VerticalPanel;
 import org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler;
-import org.apache.jmeter.protocol.ldap.config.gui.LDAPArgumentsPanel;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.StringProperty;
 import org.apache.jmeter.testelement.property.TestElementProperty;

File: src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/config/MongoSourceElementBeanInfo.java
Patch:
@@ -24,8 +24,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-/**
-  */
 public class MongoSourceElementBeanInfo
         extends BeanInfoSupport {
 

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/control/gui/TCPSamplerGui.java
Patch:
@@ -21,6 +21,7 @@
 import java.awt.BorderLayout;
 
 import javax.swing.BorderFactory;
+
 import org.apache.jmeter.config.gui.LoginConfigGui;
 import org.apache.jmeter.gui.util.VerticalPanel;
 import org.apache.jmeter.protocol.tcp.config.gui.TCPConfigGui;
@@ -34,7 +35,6 @@ public class TCPSamplerGui extends AbstractSamplerGui {
     private static final long serialVersionUID = 240L;
 
     private LoginConfigGui loginPanel;
-
     private TCPConfigGui tcpDefaultPanel;
 
     public TCPSamplerGui() {

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/BinaryTCPClientImpl.java
Patch:
@@ -77,7 +77,7 @@ public static byte[] hexStringToByteArray(String hexEncodedBinary) {
                     throw new IllegalArgumentException(
                     "Hex-encoded binary string contains an invalid hex digit in '"+sc[i * 2]+sc[i * 2 + 1]+"'");
                 }
-                ba[i] = (byte) ((nibble0 << 4) | (nibble1));
+                ba[i] = (byte) ((nibble0 << 4) | nibble1);
             }
 
             return ba;

File: test/src/org/apache/jmeter/control/TestTransactionController.java
Patch:
@@ -13,7 +13,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- * 
+ *
  */
 
 package org.apache.jmeter.control;

File: test/src/org/apache/jmeter/functions/TestFileToString.java
Patch:
@@ -102,4 +102,4 @@ public void testReadWithEncodingAndVar() throws Exception {
         Assert.assertTrue(returnValue.indexOf("language=")>0);
         Assert.assertTrue(vars.get("MY_FILE_AS_TEXT").indexOf("language=")>0);
     } 
-}
\ No newline at end of file
+}

File: test/src/org/apache/jmeter/protocol/http/control/TestHTTPMirrorThread.java
Patch:
@@ -407,7 +407,7 @@ public void testSleep() throws Exception {
         long now = System.nanoTime();
         conn.connect();
         final InputStream inputStream = conn.getInputStream();
-        while(inputStream.read() != -1) {}
+        while(inputStream.read() != -1) {} // CHECKSTYLE IGNORE EmptyBlock
         inputStream.close();
         final long elapsed = (System.nanoTime() - now)/1000000L;
         assertTrue("Expected > 990 " + elapsed, elapsed >= 990);

File: test/src/org/apache/jmeter/protocol/http/parser/TestHTMLParser.java
Patch:
@@ -300,9 +300,7 @@ public void testParserMissing() throws Exception {
                 BaseParser.getParser("no.such.parser");
                 fail("Should not have been able to create the parser");
             } catch (LinkExtractorParseException e) {
-                if (e.getCause() instanceof ClassNotFoundException) {
-                    // This is OK
-                } else {
+                if (!(e.getCause() instanceof ClassNotFoundException)) {
                     throw e;
                 }
             }

File: test/src/org/apache/jmeter/test/ResourceLocator.java
Patch:
@@ -39,7 +39,9 @@ public static Path getResourcePath(Object instance, String path) {
 
     public static Path getResourcePath(Class<?> basetype, String path) {
         URL url = basetype.getResource(path);
-        if (url == null) return null;
+        if (url == null) {
+            return null;
+        }
         Path nioPath;
         try {
             nioPath = Paths.get(url.toURI());

File: test/src/org/apache/jmeter/testelement/TestNumberProperty.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.jmeter.testelement;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertTrue;
 
 import org.apache.jmeter.testelement.property.DoubleProperty;
 import org.apache.jmeter.testelement.property.IntegerProperty;

File: test/src/org/apache/jmeter/util/XPathUtilTest.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.jmeter.util;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertThat;
 
 import java.io.PrintStream;
 

File: test/src/org/apache/jmeter/visualizers/TestSampleCompareTo.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.jmeter.visualizers;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertThat;
 
 import java.util.Arrays;
 import java.util.Collection;
@@ -59,7 +59,7 @@ public void testCompareTo() {
     }
 
     private Sample sample(long count) {
-        return new Sample("dummy", 0l, 0L, 0L, 0L, 0L, 0.0, 0L, true, count, 0L);
+        return new Sample("dummy", 0L, 0L, 0L, 0L, 0L, 0.0, 0L, true, count, 0L);
     }
 
 }

File: src/components/org/apache/jmeter/extractor/BoundaryExtractor.java
Patch:
@@ -239,7 +239,7 @@ private List<String> extractMatchingStrings(JMeterVariables vars,
      * @param found
      * @return int found updated
      */
-    private int extract(String leftBoundary, String rightBoundary, int matchNumber, String inputString,
+    public int extract(String leftBoundary, String rightBoundary, int matchNumber, String inputString,
             List<String> result, int found) {
         int startIndex = -1;
         int endIndex;

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -205,6 +205,7 @@ private void saveSamplerConfigs(Sampler sam) {
             addDirectParentControllers(controllers, stack.get(i - 1));
             List<PreProcessor>  tempPre = new LinkedList<>();
             List<PostProcessor> tempPost = new LinkedList<>();
+            List<Assertion> tempAssertions = new LinkedList<>();
             for (Object item : testTree.list(stack.subList(0, i))) {
                 if (item instanceof ConfigTestElement) {
                     configs.add((ConfigTestElement) item);
@@ -216,7 +217,7 @@ private void saveSamplerConfigs(Sampler sam) {
                     timers.add((Timer) item);
                 }
                 if (item instanceof Assertion) {
-                    assertions.add((Assertion) item);
+                    tempAssertions.add((Assertion) item);
                 }
                 if (item instanceof PostProcessor) {
                     tempPost.add((PostProcessor) item);
@@ -225,6 +226,7 @@ private void saveSamplerConfigs(Sampler sam) {
                     tempPre.add((PreProcessor) item);
                 }
             }
+            assertions.addAll(0, tempAssertions);
             pres.addAll(0, tempPre);
             posts.addAll(0, tempPost);
         }

File: src/components/org/apache/jmeter/assertions/JSONPathAssertion.java
Patch:
@@ -137,7 +137,7 @@ private void doAssert(String jsonString) {
     }
 
     private boolean arrayMatched(JSONArray value) {
-        if (value.isEmpty() && getExpectedValue().equals("[]")) {
+        if (value.isEmpty() && "[]".equals(getExpectedValue())) {
             return true;
         }
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/render/TextMessageRenderer.java
Patch:
@@ -42,6 +42,4 @@ public String getValueFromFile(String filename, String encoding, boolean hasVari
     String getContent(FileKey key) {
         return new TextFile(key.getFilename(), key.getEncoding()).getText();
     }
-
-
 }

File: test/src/org/apache/jmeter/protocol/jms/sampler/render/MessageRendererTest.java
Patch:
@@ -28,9 +28,6 @@
 import com.github.benmanes.caffeine.cache.Cache;
 import com.github.benmanes.caffeine.cache.Caffeine;
 
-/**
- *
- */
 public abstract class MessageRendererTest<T> {
 
     protected Cache<Object,Object> cache = Caffeine.newBuilder().build();

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -155,7 +155,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "54a9f5b36af5922f2d58cc4938a800fc2ca3f3c5"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "0acd8200bf252acf41d5eeca6aa56b0eaee06f0f"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/QueueExecutor.java
Patch:
@@ -18,8 +18,6 @@
 
 package org.apache.jmeter.protocol.jms.sampler;
 
-import java.io.Closeable;
-
 import javax.jms.JMSException;
 import javax.jms.Message;
 

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -376,7 +376,9 @@ private void startGui(String testFile) {
         MainFrame main = new MainFrame(treeModel, treeLis);
         splash.setProgress(100);
         ComponentUtil.centerComponentInWindow(main, 80);
+        main.setLocationRelativeTo(splash);
         main.setVisible(true);
+        main.toFront();
         instance.actionPerformed(new ActionEvent(main, 1, ActionNames.ADD_ALL));
         if (testFile != null) {
             try {

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -956,6 +956,8 @@ public void setSaveBeforeRunByPreference(boolean saveBeforeRun) {
     /**
      * Should Save Before Run 
      * Decide by Preference and if not exists by Property
+     * 
+     * @return boolean Should Save Before Run
      */
     public boolean shouldSaveBeforeRun() {
         String sbr = PREFS.get(SBR_PREFS_KEY, null);

File: src/functions/org/apache/jmeter/functions/CSVRead.java
Patch:
@@ -35,11 +35,11 @@
  * line-thru the data in the CSV file - one line per each test. E.g. inserting
  * the following in the test scripts :
  *
- * <pre>{@code
+ * <pre>{@code}
  * ${__CSVRead(c:/BOF/abcd.csv,0)} // read (first) line of 'c:/BOF/abcd.csv' ,
- * return the 1<sup>st</sup> column ( represented by the '0'),
+ * return the 1st column (represented by the '0'),
  * ${__CSVRead(c:/BOF/abcd.csv,1)} // read (first) line of 'c:/BOF/abcd.csv' ,
- * return the 2<sup>nd</sup> column ( represented by the '1'),
+ * return the 2nd column (represented by the '1'),
  * ${__CSVRead(c:/BOF/abcd.csv,next())} // Go to next line of 'c:/BOF/abcd.csv'
  * }</pre>
  * NOTE: A single instance of each different file is opened and used for all

File: src/functions/org/apache/jmeter/functions/ChangeCase.java
Patch:
@@ -42,7 +42,7 @@
  * <li>capitalize</li>
  * <li>camel cases</li>
  * <li></li>
- * 
+ * </ul>
  * 
  * @since 4.0
  *
@@ -164,7 +164,7 @@ public String getName() {
         /**
          * Get ChangeCaseMode by mode
          * 
-         * @param mode
+         * @param mode Change new case mode
          * @return relevant ChangeCaseMode
          */
         public static ChangeCaseMode typeOf(String mode) {

File: src/functions/org/apache/jmeter/functions/DateTimeConvertFunction.java
Patch:
@@ -31,7 +31,7 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * DateConvert function to change date format<br/>
+ * DateConvert function to change date format
  * Can optionally store it in a variable.
  * 
  * @since 4.0

File: src/functions/org/apache/jmeter/functions/DigestEncodeFunction.java
Patch:
@@ -39,7 +39,7 @@
 
 /**
  * Digest Encode Function that provides computing of different SHA-XXX, can
- * uppercase the result and store it in a variable.<br/>
+ * uppercase the result and store it in a variable.
  * Algorithm names can be specified using MessageDigest Algorithms names at
  * <a href=
  * "https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html"

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -117,7 +117,7 @@ static class CacheEntry {
          * @param lastModified formatted string containing the last modification time of the http response
          * @param expires formatted string containing the expiration time of the http response
          * @param etag of the http response
-         * @deprecated use {@link CacheEntry(String lastModified, Date expires, String etag, String varyHeader)} instead
+         * @deprecated use {@link CacheEntry#CacheEntry(String lastModified, Date expires, String etag, String varyHeader)} instead
          */
         @Deprecated
         public CacheEntry(String lastModified, Date expires, String etag) {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/render/package-info.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * Package contains all renderer for JMS publisher.
- * @see Renderers
- * @see MessageRenderer
+ * @see org.apache.jmeter.protocol.jms.sampler.render.Renderers
+ * @see org.apache.jmeter.protocol.jms.sampler.render.MessageRenderer
  */
 package org.apache.jmeter.protocol.jms.sampler.render;

File: test/src/org/apache/jmeter/functions/TestDateTimeConvertFunction.java
Patch:
@@ -33,7 +33,7 @@
 import org.junit.Test;
 
 /**
- * Test {@link DateConvertFunction}
+ * Test {@link DateTimeConvertFunction}
  * 
  * @since 4.0
  */

File: test/src/org/apache/jmeter/functions/TestDigestFunction.java
Patch:
@@ -33,7 +33,7 @@
 import org.junit.Test;
 /**
  * Test Digest function
- * @see DigestEncode
+ * @see DigestEncodeFunction
  * @since 4.0
  *
  */

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -253,10 +253,10 @@ public void run() {
                     // restart of the next loop 
                     // - was requested through threadContext
                     // - or the last sample failed AND the onErrorStartNextLoop option is enabled
-                    if (threadContext.isRestartNextLoop()
+                    if (threadContext.isStartNextThreadLoop()
                             || (onErrorStartNextLoop
                             && !TRUE.equals(threadContext.getVariables().get(LAST_SAMPLE_OK)))) {
-                        if (log.isDebugEnabled() && onErrorStartNextLoop && !threadContext.isRestartNextLoop()) {
+                        if (log.isDebugEnabled() && onErrorStartNextLoop && !threadContext.isStartNextThreadLoop()) {
                             log.debug("StartNextLoop option is on, Last sample failed, starting next loop");
                         }
 

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -49,10 +49,10 @@
 import org.apache.jmeter.gui.action.ActionRouter;
 import org.apache.jmeter.gui.action.KeyStrokes;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
-import org.apache.jmeter.protocol.http.proxy.ProxyControl;
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.testbeans.gui.TestBeanGUI;
+import org.apache.jmeter.testelement.NonTestElement;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.util.JMeterUtils;
@@ -640,8 +640,8 @@ && foundMenuCategories(nodes, NON_TEST_ELEMENTS)) {
             if (foundClass(nodes,
                      new Class[]{Sampler.class, Controller.class}, // Samplers and Controllers need not apply ...
                      new Class[]{org.apache.jmeter.threads.AbstractThreadGroup.class,
-                             ProxyControl.class
-                     })  // but AbstractThreadGroup (Controller) and ProxyControl are OK
+                             NonTestElement.class
+                     })  // but AbstractThreadGroup (Controller) and Non Test Elements are OK
                 ){
                 return false;
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.commons.cli.avalon.CLOptionDescriptor;
 import org.apache.commons.cli.avalon.CLUtil;
 import org.apache.jmeter.gui.Stoppable;
+import org.apache.jmeter.testelement.NonTestElement;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.core.config.Configurator;
@@ -43,7 +44,7 @@
  * For each client request, creates a thread to handle the request.
  *
  */
-public class HttpMirrorServer extends Thread implements Stoppable {
+public class HttpMirrorServer extends Thread implements Stoppable, NonTestElement {
 
     private static final int OPTIONS_OPT        = '?';// $NON-NLS-1$
     private static final int PORT_OPT           = 'P';// $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -80,6 +80,7 @@
 import org.apache.jmeter.samplers.SampleEvent;
 import org.apache.jmeter.samplers.SampleListener;
 import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.testelement.NonTestElement;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.testelement.TestStateListener;
@@ -107,7 +108,7 @@
  * Class handles storing of generated samples, etc
  * For unit tests, see TestProxyControl
  */
-public class ProxyControl extends GenericController {
+public class ProxyControl extends GenericController implements NonTestElement {
 
     private static final Logger log = LoggerFactory.getLogger(ProxyControl.class);
 

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerClient.java
Patch:
@@ -73,7 +73,7 @@ public interface BackendListenerClient {
      *            Context is readonly
      * @throws Exception when setup fails
      */
-    void setupTest(BackendListenerContext context) throws Exception;
+    void setupTest(BackendListenerContext context) throws Exception; // NOSONAR
 
     /**
      * Handle sampleResults, this can be done in many ways:
@@ -98,7 +98,7 @@ public interface BackendListenerClient {
      *            initialization parameters.
      * @throws Exception when tear down fails
      */
-    void teardownTest(BackendListenerContext context) throws Exception;
+    void teardownTest(BackendListenerContext context) throws Exception; // NOSONAR
 
     /**
      * Provide a list of parameters which this test supports. Any parameter

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
Patch:
@@ -214,9 +214,7 @@ public void actionPerformed(ActionEvent event) {
                         newArgs.addArgument(name, value);
                     }
                 }
-                userArgMap.forEach((k,v) -> {
-                    newArgs.addArgument(k, v);
-                });
+                userArgMap.forEach((k,v) -> newArgs.addArgument(k, v));
                 
                 className = newClassName;
                 argsPanel.configure(newArgs);

File: src/components/org/apache/jmeter/visualizers/backend/UserMetric.java
Patch:
@@ -36,11 +36,12 @@ public class UserMetric {
      * 
      */
     public UserMetric() {
+        super();
     }
 
     /**
      * Add a {@link SampleResult} to be used in the statistics
-     * @param result {@link SampleResult} to be used
+     * @param result {@link SampleResult} not used
      */
     public synchronized void add(SampleResult result) {
         usersStats.addValue(JMeterContextService.getThreadCounts().activeThreads);

File: src/components/org/apache/jmeter/visualizers/backend/influxdb/InfluxdbMetricsSender.java
Patch:
@@ -60,7 +60,7 @@ final class MetricTuple {
      * @param influxDBUrl url pointing to influxdb
      * @throws Exception when setup fails
      */
-    public void setup(String influxDBUrl) throws Exception;
+    public void setup(String influxDBUrl) throws Exception; // NOSONAR
 
     /**
      * Destroy sender

File: src/components/org/apache/jmeter/visualizers/backend/BackendListener.java
Patch:
@@ -94,7 +94,7 @@ private static final class ListenerClientData {
     public static final String DEFAULT_QUEUE_SIZE = "5000";
 
     // Create unique object as marker for end of queue
-    private static transient final SampleResult FINAL_SAMPLE_RESULT = new SampleResult();
+    private static final transient SampleResult FINAL_SAMPLE_RESULT = new SampleResult();
 
     /*
      * This is needed for distributed testing where there is 1 instance

File: src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java
Patch:
@@ -53,15 +53,15 @@ public class LookAndFeelCommand extends AbstractAction {
 
     static {
         log.info("Installing Darcula LAF");
-        UIManager.installLookAndFeel(new UIManager.LookAndFeelInfo(JMeterMenuBar.DARCULA_LAF, JMeterMenuBar.DARCULA_LAF_CLASS));
+        UIManager.installLookAndFeel(JMeterMenuBar.DARCULA_LAF, JMeterMenuBar.DARCULA_LAF_CLASS);
         UIManager.LookAndFeelInfo[] allLAFs = JMeterMenuBar.getAllLAFs();
         commands = Arrays.stream(allLAFs)
                 .map(lf -> ActionNames.LAF_PREFIX + lf.getClassName())
                 .collect(Collectors.toSet());
         if (log.isInfoEnabled()) {
             final String jMeterLaf = getJMeterLaf();
             List<String> names = Arrays.stream(allLAFs)
-                    .filter(laf -> laf.getClassName().equals(jMeterLaf))
+                    .filter(laf -> laf.getClassName().equals(JMeterMenuBar.DARCULA_LAF_CLASS))
                     .map(UIManager.LookAndFeelInfo::getName)
                     .collect(Collectors.toList());
             log.info("Using look and feel: {} {}", jMeterLaf, names);
@@ -97,7 +97,7 @@ public static String getJMeterLaf(){
         if (laf != null) {
             return checkLafName(laf);
         }
-        laf = JMeterUtils.getPropDefault(JMETER_LAF, JMeterMenuBar.DARCULA_LAF);
+        laf = JMeterUtils.getPropDefault(JMETER_LAF, JMeterMenuBar.DARCULA_LAF_CLASS);
         if (laf != null) {
             return checkLafName(laf);
         }

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -62,7 +62,7 @@ public final class ActionNames {
     public static final String LAF_PREFIX       = "laf:"; // Look and Feel prefix
     public static final String LINK_BUG_TRACKER = "link_bug_tracker:"; // URI of bug tracker
     public static final String LINK_NIGHTLY_BUILD = "link_nightly_build:"; // URI of nightly build
-    public static final String LINK_RELEASE_NOTES = "link_release_notes"; // URI of nightly build
+    public static final String LINK_RELEASE_NOTES = "link_release_notes"; // URI of the release note
     public static final String LOGGER_PANEL_ENABLE_DISABLE     = "logger_panel_enable_disable"; // $NON-NLS-1$
     public static final String LOG_LEVEL_PREFIX = "loglevel:"; // Logger level prefix
     public static final String MERGE            = "merge"; // $NON-NLS-1$

File: src/functions/org/apache/jmeter/functions/ChangeCase.java
Patch:
@@ -181,8 +181,9 @@ public String getName() {
         public static ChangeCaseMode typeOf(String mode) {
             EnumSet<ChangeCaseMode> allOf = EnumSet.allOf(ChangeCaseMode.class);
             for (ChangeCaseMode zs : allOf) {
-                if (zs.getName().equals(mode))
+                if (zs.getName().equals(mode)) {
                     return zs;
+                }
             }
             return null;
         }

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerContext.java
Patch:
@@ -1,5 +1,4 @@
 /*
-
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -44,7 +43,6 @@ public class BackendListenerContext {
      * teardownTest.
      */
 
-    /** Logging */
     private static final Logger log = LoggerFactory.getLogger(BackendListenerContext.class);
 
     /**
@@ -53,7 +51,6 @@ public class BackendListenerContext {
     private final Map<String, String> params;
 
     /**
-     *
      * @param args
      *            the initialization parameters.
      */

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -1,5 +1,4 @@
 /*
-
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/DNSCachePanel.java
Patch:
@@ -5,9 +5,9 @@
  * licenses this file to You under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -255,13 +255,13 @@ private void handleRead(JMeterContext context, SampleResult res) {
         Sampler sampler = context.getPreviousSampler();
         SampleResult sr = context.getPreviousResult();
         String jmsSelector = getJMSSelector();
-        if (jmsSelector.equals(JMSSampler.PREV_SAMPLER)
+        if (JMSSampler.PREV_SAMPLER.equals(jmsSelector)
                 && (sampler instanceof JMSSampler)) {
             jmsSelector = sr.getResponseMessage();
         }
         int sampleCounter = 0;
         int sampleTries = 0;
-        String result = null;
+        String result;
 
         StringBuilder buffer = new StringBuilder();
         StringBuilder propBuffer = new StringBuilder();

File: src/core/org/apache/jmeter/gui/action/OpenLinkAction.java
Patch:
@@ -43,7 +43,7 @@ public class OpenLinkAction extends AbstractAction {
      */
     @Override
     public void doAction(ActionEvent e) {
-        String url = null;
+        String url;
         if (e.getActionCommand().equals(ActionNames.LINK_BUG_TRACKER)) {
             url = "https://jmeter.apache.org/issues.html";
         } else if (e.getActionCommand().equals(ActionNames.LINK_NIGHTLY_BUILD)) {

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -732,9 +732,8 @@ public void localeChanged(LocaleChangeEvent event) {
     public static LookAndFeelInfo[] getAllLAFs() {
         UIManager.LookAndFeelInfo[] lafs = UIManager.getInstalledLookAndFeels();
         int i = lafs.length;
-        UIManager.LookAndFeelInfo[] lafsAll = new UIManager.LookAndFeelInfo[i+3];
+        UIManager.LookAndFeelInfo[] lafsAll = new UIManager.LookAndFeelInfo[i+2];
         System.arraycopy(lafs, 0, lafsAll, 0, i);
-        lafsAll[i++]=new UIManager.LookAndFeelInfo(DARCULA_LAF, DARCULA_LAF_CLASS);
         lafsAll[i++]=new UIManager.LookAndFeelInfo(CROSS_PLATFORM_LAF,UIManager.getCrossPlatformLookAndFeelClassName());
         lafsAll[i]=new UIManager.LookAndFeelInfo(SYSTEM_LAF,UIManager.getSystemLookAndFeelClassName());
         return lafsAll;

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSSamplerGui.java
Patch:
@@ -44,7 +44,6 @@
 
 /**
  * Configuration screen for Java Messaging Point-to-Point requests. <br>
- * Created on: October 28, 2004
  *
  */
 public class JMSSamplerGui extends AbstractSamplerGui {
@@ -137,7 +136,7 @@ private void transfer(JMSSampler element) {
         element.setReceiveQueue(receiveQueue.getText());
 
         element.setProperty(JMSSampler.JMS_COMMUNICATION_STYLE, jmsCommunicationStyle.getSelectedIndex());
-
+        element.removeProperty(JMSSampler.IS_ONE_WAY);
         element.setNonPersistent(useNonPersistentDelivery.isSelected());
         element.setUseReqMsgIdAsCorrelId(useReqMsgIdAsCorrelId.isSelected());
         element.setUseResMsgIdAsCorrelId(useResMsgIdAsCorrelId.isSelected());

File: src/core/org/apache/jmeter/gui/action/LinkNightlyBuild.java
Patch:
@@ -62,3 +62,4 @@ public Set<String> getActionNames() {
     
 
 }
+

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -61,6 +61,7 @@ public final class ActionNames {
     public static final String HEAP_DUMP        = "heap_dump"; // $NON-NLS-1$
     public static final String LAF_PREFIX       = "laf:"; // Look and Feel prefix
     public static final String LINK_BUG_TRACKER = "link_bug_tracker:"; // URI of bug tracker
+    public static final String LINK_NIGHTLY_BUILD = "link_nightly_build:"; // URI of nightly build
     public static final String LOGGER_PANEL_ENABLE_DISABLE     = "logger_panel_enable_disable"; // $NON-NLS-1$
     public static final String LOG_LEVEL_PREFIX = "loglevel:"; // Logger level prefix
     public static final String MERGE            = "merge"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -303,6 +303,8 @@ private void makeHelpMenu() {
         JMenuItem threadDump = makeMenuItemRes("thread_dump", ActionNames.THREAD_DUMP);//$NON-NLS-1$
         
         JMenuItem linkBugTracker = makeMenuItemRes("link_bug_tracker", ActionNames.LINK_BUG_TRACKER);//$NON-NLS-1$
+        
+        JMenuItem linkNightlyBuild = makeMenuItemRes("link_nightly_build", ActionNames.LINK_NIGHTLY_BUILD);//$NON-NLS-1$
 
         helpAbout = makeMenuItemRes("about", 'A', ActionNames.ABOUT); //$NON-NLS-1$
 
@@ -318,6 +320,7 @@ private void makeHelpMenu() {
         
         helpMenu.addSeparator();
         helpMenu.add(linkBugTracker);
+        helpMenu.add(linkNightlyBuild);
         helpMenu.addSeparator();
         helpMenu.add(helpAbout);
     }

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -60,6 +60,7 @@ public final class ActionNames {
     public static final String HELP             = "help"; // $NON-NLS-1$
     public static final String HEAP_DUMP        = "heap_dump"; // $NON-NLS-1$
     public static final String LAF_PREFIX       = "laf:"; // Look and Feel prefix
+    public static final String LINK_BUG_TRACKER = "link_bug_tracker:"; // URI of bug tracker
     public static final String LOGGER_PANEL_ENABLE_DISABLE     = "logger_panel_enable_disable"; // $NON-NLS-1$
     public static final String LOG_LEVEL_PREFIX = "loglevel:"; // Logger level prefix
     public static final String MERGE            = "merge"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/util/BeanShellBeanInfoSupport.java
Patch:
@@ -51,13 +51,14 @@ protected BeanShellBeanInfoSupport(Class<? extends TestBean> beanClass) {
         p = property("filename");
         p.setValue(NOT_UNDEFINED, Boolean.TRUE);
         p.setValue(DEFAULT, "");
+        p.setPropertyEditorClass(FileEditor.class);
 
         createPropertyGroup("filenameGroup", new String[] { "filename" });
 
         p = property("script");
         p.setValue(NOT_UNDEFINED, Boolean.TRUE);
         p.setValue(DEFAULT, "");
-        p.setPropertyEditorClass(FileEditor.class);
+        p.setPropertyEditorClass(TextAreaEditor.class);
 
         createPropertyGroup("scripting", new String[] { "script" });
     }

File: src/core/org/apache/jmeter/control/gui/TestPlanGui.java
Patch:
@@ -92,6 +92,7 @@ public JPopupMenu createPopupMenu() {
         JMenu addMenu = new JMenu(JMeterUtils.getResString("add")); // $NON-NLS-1$
         addMenu.add(MenuFactory.makeMenu(MenuFactory.THREADS, ActionNames.ADD));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.FRAGMENTS, ActionNames.ADD));
+        addMenu.add(MenuFactory.makeMenu(MenuFactory.NON_TEST_ELEMENTS, ActionNames.ADD));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.CONFIG_ELEMENTS, ActionNames.ADD));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.TIMERS, ActionNames.ADD));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.PRE_PROCESSORS, ActionNames.ADD));

File: src/core/org/apache/jmeter/control/gui/WorkBenchGui.java
Patch:
@@ -36,8 +36,9 @@
 /**
  * JMeter GUI component representing a work bench where users can make
  * preparations for the test plan.
- *
+ * @deprecated since 4.0 Non Test Elements are now children of Test Plan
  */
+@Deprecated
 public class WorkBenchGui extends AbstractJMeterGuiComponent {
     private static final long serialVersionUID = 240L;
     // This check-box defines whether to save  WorkBench content or not

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -38,7 +38,6 @@
 import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestPlan;
-import org.apache.jmeter.testelement.WorkBench;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.HashTree;
 import org.slf4j.Logger;
@@ -181,7 +180,7 @@ public static boolean insertLoadedTree(final int id, final HashTree tree, final
 
         if (merging){ // Check if target of merge is reasonable
             final TestElement te = (TestElement)tree.getArray()[0];
-            if (!(te instanceof WorkBench || te instanceof TestPlan)){// These are handled specially by addToTree
+            if (!(te instanceof TestPlan)) {// These are handled specially by addToTree
                 final boolean ok = MenuFactory.canAddTo(guiInstance.getCurrentNode(), te);
                 if (!ok){
                     String name = te.getName();

File: src/core/org/apache/jmeter/gui/action/Move.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.jmeter.gui.util.MenuFactory;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestPlan;
-import org.apache.jmeter.testelement.WorkBench;
 
 /**
  * Move a node up/down/left/right 
@@ -120,7 +119,7 @@ && canAddTo(parentParentNode, currentNode)) {
     private JMeterTreeNode getParentNode(JMeterTreeNode currentNode) {
         JMeterTreeNode parentNode = (JMeterTreeNode) currentNode.getParent();
         TestElement te = currentNode.getTestElement();
-        if (te instanceof TestPlan || te instanceof WorkBench) {
+        if (te instanceof TestPlan) {
             parentNode = null; // So elements can only be added as children
         }
         return parentNode;

File: src/components/org/apache/jmeter/sampler/TestAction.java
Patch:
@@ -104,7 +104,7 @@ public SampleResult sample(Entry e) {
             }
         } else if (action == RESTART_NEXT_LOOP) {
             log.info("Restarting next loop from element {}", getName());
-            context.setRestartNextLoop(true);
+            context.setStartNextThreadLoop(true);
         }
 
         return null; // This means no sample is saved

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -269,7 +269,7 @@ public void run() {
                         triggerEndOfLoopOnParentControllers(sam, threadContext);
                         sam = null;
                         threadContext.getVariables().put(LAST_SAMPLE_OK, TRUE);
-                        threadContext.setRestartNextLoop(false);
+                        threadContext.setStartNextThreadLoop(false);
                     }
                     else {
                         sam = threadGroupLoopController.next();
@@ -543,7 +543,7 @@ private void executeSamplePackage(Sampler current,
                 stopTestNow();
             }
             if(result.isStartNextThreadLoop()) {
-                threadContext.setRestartNextLoop(true);
+                threadContext.setStartNextThreadLoop(true);
             }
         } else {
             compiler.done(pack); // Finish up

File: src/functions/org/apache/jmeter/functions/DigestEncodeFunction.java
Patch:
@@ -47,9 +47,9 @@
  * 
  * @since 4.0
  */
-public class DigestEncode extends AbstractFunction {
+public class DigestEncodeFunction extends AbstractFunction {
 
-    private static final Logger log = LoggerFactory.getLogger(DigestEncode.class);
+    private static final Logger log = LoggerFactory.getLogger(DigestEncodeFunction.class);
     private static final String UTF_8 = "UTF-8";
 
     /**

File: test/src/org/apache/jmeter/functions/TestDigestFunction.java
Patch:
@@ -50,7 +50,7 @@ public class TestDigestFunction extends JMeterTestCase {
 
     @Before
     public void setUp() {
-    	digest = new DigestEncode();
+    	digest = new DigestEncodeFunction();
         result = new SampleResult();
         jmctx = JMeterContextService.getContext();
         String data = "dummy data";

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -392,8 +392,8 @@ public void setSamplerDownloadImages(boolean b) {
         setProperty(new BooleanProperty(SAMPLER_DOWNLOAD_IMAGES, b));
     }
 
-    public void setHTTPSampleNamingMode(int HTTPNamingMode) {
-        setProperty(new IntegerProperty(HTTP_SAMPLER_NAMING_MODE, HTTPNamingMode));
+    public void setHTTPSampleNamingMode(int httpNamingMode) {
+        setProperty(new IntegerProperty(HTTP_SAMPLER_NAMING_MODE, httpNamingMode));
     }
     
     public void setPrefixHTTPSampleName(String prefixHTTPSampleName) {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -161,8 +161,8 @@ void configure(Socket clientSocket, ProxyControl target, Map<String, String> pag
     public void run() {
         // Check which HTTPSampler class we should use
         String httpSamplerName = target.getSamplerTypeName();
-
-        HttpRequestHdr request = new HttpRequestHdr(target.getPrefixHTTPSampleName(), httpSamplerName);
+        
+        HttpRequestHdr request = new HttpRequestHdr(target.getPrefixHTTPSampleName(), httpSamplerName,target.getHTTPSampleNamingMode());
         SampleResult result = null;
         HeaderManager headers = null;
         HTTPSamplerBase sampler = null;

File: src/core/org/apache/jmeter/testbeans/gui/FileEditor.java
Patch:
@@ -91,12 +91,12 @@ public FileEditor(PropertyDescriptor descriptor) {
         boolean notExpression = GenericTestBeanCustomizer.notExpression(descriptor);
         boolean notOther = GenericTestBeanCustomizer.notOther(descriptor);
         Object defaultValue = descriptor.getValue(GenericTestBeanCustomizer.DEFAULT);
-        ComboStringEditor cse = new ComboStringEditor(null, notExpression && notOther, notNull);
+        FieldStringEditor cse = new FieldStringEditor();
         editor = new WrapperEditor(this, new SimpleFileEditor(), cse,
                 !notNull, // acceptsNull
                 !notExpression, // acceptsExpressions
                 !notOther, // acceptsOther
-                defaultValue); // default
+                defaultValue == null ? "":defaultValue); // default // //$NON-NLS-1$
 
         // Create a panel containing the combo and the button:
         panel = new JPanel(new BorderLayout(5, 0));

File: src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteBackendListenerClient.java
Patch:
@@ -110,7 +110,7 @@ public class GraphiteBackendListenerClient extends AbstractBackendListenerClient
 
     private static final String METRIC_ALL_HITS_COUNT        = METRIC_HITS_PREFIX+METRIC_SEPARATOR+METRIC_COUNT;
 
-    private static final long SEND_INTERVAL = JMeterUtils.getPropDefault("backend_graphite.send_interval", 5);
+    private static final long SEND_INTERVAL = JMeterUtils.getPropDefault("backend_graphite.send_interval", 1);
     private static final int MAX_POOL_SIZE = 1;
     private static final String DEFAULT_PERCENTILES = "90;95;99";
     private static final String SEPARATOR = ";"; //$NON-NLS-1$

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -371,8 +371,8 @@ private void makeOptionsMenu() {
         JMenuItem zoomOut = makeMenuItemRes("menu_zoom_out", ActionNames.ZOOM_OUT); //$NON-NLS-1$
         optionsMenu.add(zoomOut);        
         JCheckBoxMenuItem saveBeforeRun = makeCheckBoxMenuItemRes("menu_save_before_run", ActionNames.SAVE_BEFORE_RUN); //$NON-NLS-1$
-        saveBeforeRun.setSelected(GuiPackage.getInstance().shouldSaveBeforeRunByPreference());
         if (guiInstance != null) {        	
+            saveBeforeRun.setSelected(guiInstance.shouldSaveBeforeRunByPreference());
             guiInstance.setMenuItemSaveBeforeRunPanel(saveBeforeRun);
         }
         optionsMenu.add(saveBeforeRun);

File: src/core/org/apache/jmeter/functions/gui/FunctionHelper.java
Patch:
@@ -56,6 +56,7 @@
 import org.apache.jmeter.util.LocaleChangeEvent;
 import org.apache.jmeter.util.LocaleChangeListener;
 import org.apache.jorphan.gui.ComponentUtil;
+import org.apache.jorphan.gui.GuiUtils;
 import org.apache.jorphan.gui.JLabeledChoice;
 import org.apache.jorphan.gui.JLabeledTextField;
 import org.slf4j.Logger;
@@ -191,6 +192,7 @@ public void actionPerformed(ActionEvent e) {
         }
         functionCall.append("}");
         cutPasteFunction.setText(functionCall.toString());
+        GuiUtils.copyTextToClipboard(cutPasteFunction.getText());
         CompoundVariable function = new CompoundVariable(functionCall.toString());
         try {
             resultTextArea.setText(function.execute().trim());

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -104,6 +104,7 @@ public final class ActionNames {
     public static final String EXPAND           = "expand"; // $NON-NLS-1$
     public static final String RUN_TG           = "run_tg"; // $NON-NLS-1$
     public static final String RUN_TG_NO_TIMERS = "run_tg_no_timers"; // $NON-NLS-1$
+    public static final String SAVE_BEFORE_RUN  = "save_before_run"; //$NON-NLS-1$
     public static final String THREAD_DUMP      = "thread_dump"; // $NON-NLS-1$
     public static final String VALIDATE_TG      = "validate_tg"; //$NON-NLS-1$
     public static final String ZOOM_IN          = "zoom_in"; //$NON-NLS-1$

File: src/functions/org/apache/jmeter/functions/DigestEncode.java
Patch:
@@ -131,4 +131,4 @@ public String getReferenceKey() {
     public List<String> getArgumentDesc() {
         return desc;
     }
-}
\ No newline at end of file
+}

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -506,7 +506,7 @@ private void executeSamplePackage(Sampler current,
             currentSampler = null;
         }
         // If we got any results, then perform processing on the result
-        if (result != null) {
+        if (result != null && !result.isIgnore()) {
             int nbActiveThreadsInThreadGroup = threadGroup.getNumberOfThreads();
             int nbTotalActiveThreads = JMeterContextService.getNumberOfThreads();
             result.setGroupThreads(nbActiveThreadsInThreadGroup);

File: src/core/org/apache/jmeter/reporters/ResultAction.java
Patch:
@@ -60,11 +60,9 @@ public void sampleOccurred(SampleEvent e) {
         }
         if (!s.isSuccessful()) {
             if (isStopTestNow()) {
-                s.setStopThread(true);
                 s.setStopTestNow(true);
             }
             if (isStopTest()) {
-                s.setStopThread(true);
                 s.setStopTest(true);
             }
             if (isStopThread()) {

File: src/components/org/apache/jmeter/sampler/gui/TestActionGui.java
Patch:
@@ -179,7 +179,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
             if (pauseButton.isSelected()) {
                 action = TestAction.PAUSE;
                 durationField.setEnabled(true);
-                targetBox.setEnabled(true);
+                targetBox.setEnabled(false);
             }
         });
         stopButton = new JRadioButton(stopAction, false);

File: src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java
Patch:
@@ -100,7 +100,7 @@ public static String getJMeterLaf(){
         if (laf != null) {
             return checkLafName(laf);
         }
-        laf = JMeterUtils.getProperty(JMETER_LAF);
+        laf = JMeterUtils.getPropDefault(JMETER_LAF, JMeterMenuBar.DARCULA_LAF);
         if (laf != null) {
             return checkLafName(laf);
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java
Patch:
@@ -56,6 +56,7 @@ public interface HTTPConstantsInterface { // CHECKSTYLE IGNORE InterfaceIsType
     String SEARCH = "SEARCH"; // $NON-NLS-1$
     String HEADER_AUTHORIZATION = "Authorization"; // $NON-NLS-1$
     String HEADER_COOKIE = "Cookie"; // $NON-NLS-1$
+    String HEADER_COOKIE_IN_REQUEST = "Cookie:"; // $NON-NLS-1$
     String HEADER_CONNECTION = "Connection"; // $NON-NLS-1$
     String CONNECTION_CLOSE = "close"; // $NON-NLS-1$
     String KEEP_ALIVE = "keep-alive"; // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -162,7 +162,7 @@ public void run() {
         // Check which HTTPSampler class we should use
         String httpSamplerName = target.getSamplerTypeName();
 
-        HttpRequestHdr request = new HttpRequestHdr(httpSamplerName);
+        HttpRequestHdr request = new HttpRequestHdr(target.getPrefixHTTPSampleName(), httpSamplerName);
         SampleResult result = null;
         HeaderManager headers = null;
         HTTPSamplerBase sampler = null;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java
Patch:
@@ -33,7 +33,7 @@
 import org.slf4j.Logger;
 
 /**
- * Web daemon thread. Creates main socket on port 8080 and listens on it
+ * Web daemon thread. Creates main socket on port configured port (8888 by default) and listens on it
  * forever. For each client request, creates a Proxy thread to handle the
  * request.
  *

File: src/core/org/apache/jmeter/control/RunTime.java
Patch:
@@ -38,6 +38,7 @@ public class RunTime extends GenericController implements Serializable {
     private int loopCount = 0; // for getIterCount
 
     public RunTime() {
+        super();
     }
 
     public void setRuntime(long seconds) {
@@ -65,7 +66,7 @@ public String getRuntimeString() {
      */
     @Override
     public boolean isDone() {
-        if (getRuntime() > 0 && getSubControllers().size() > 0) {
+        if (getRuntime() > 0 && !getSubControllers().isEmpty()) {
             return super.isDone();
         }
         return true; // Runtime is zero - no point staying around

File: src/components/org/apache/jmeter/control/OnceOnlyController.java
Patch:
@@ -35,6 +35,7 @@ public class OnceOnlyController extends GenericController implements Serializabl
      * Constructor for the OnceOnlyController object.
      */
     public OnceOnlyController() {
+        super();
     }
 
     /**
@@ -43,7 +44,7 @@ public OnceOnlyController() {
     @Override
     public void iterationStart(LoopIterationEvent event) {
         int numIteration = 1;
-        // Bug 39509: iteration to 0 for all controller which not LoopController (and TG)
+        // Bug 39509: iteration to 0 for all controllers which are not LoopController (and TG)
         if (!(event.getSource() instanceof LoopController)) {
             numIteration = 0;
         }

File: src/core/org/apache/jmeter/gui/TreeState.java
Patch:
@@ -38,6 +38,7 @@ public interface TreeState {
      * Save tree expanded and selected state
      *
      * @param guiPackage {@link GuiPackage} to be used
+     * @return {@link TreeState}
      */
     public static TreeState from(GuiPackage guiPackage) {
         if (guiPackage == null) {

File: src/core/org/apache/jmeter/functions/gui/FunctionHelper.java
Patch:
@@ -156,8 +156,8 @@ public void stateChanged(ChangeEvent event) {
     }
 
     /**
-     * @throws InstantiationException
-     * @throws IllegalAccessException
+     * @throws InstantiationException if function instanciation fails
+     * @throws IllegalAccessException if function instanciation fails
      */
     protected void initParameterPanel() throws InstantiationException, IllegalAccessException {
         Arguments args = new Arguments();

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -97,10 +97,10 @@ public class ArgumentsPanel extends AbstractConfigGui implements ActionListener
     /** Button to show the detail of an argument*/
     private JButton showDetail;
 
-    /** Enable Up & Down buttons */
+    /** Enable Up and Down buttons */
     private final boolean enableUpDown;
     
-    /** Disable buttons :Detail, Add, Add from Clipboard, Delete, Up & Down*/
+    /** Disable buttons :Detail, Add, Add from Clipboard, Delete, Up and Down*/
     private final boolean disableButtons;
 
     /** Command for adding a row to the table. */

File: src/core/org/apache/jmeter/control/gui/TestPlanGui.java
Patch:
@@ -70,7 +70,7 @@ public TestPlanGui() {
         argsPanel = new ArgumentsPanel(JMeterUtils.getResString("user_defined_variables")); // $NON-NLS-1$
         serializedMode = new JCheckBox(JMeterUtils.getResString("testplan.serialized")); // $NON-NLS-1$
         functionalMode = new JCheckBox(JMeterUtils.getResString("functional_mode")); // $NON-NLS-1$
-        tearDownOnShutdown = new JCheckBox(JMeterUtils.getResString("teardown_on_shutdown")); // $NON-NLS-1$
+        tearDownOnShutdown = new JCheckBox(JMeterUtils.getResString("teardown_on_shutdown"), true); // $NON-NLS-1$
         init();
     }
 
@@ -198,7 +198,7 @@ public void clearGui() {
         super.clearGui();
         functionalMode.setSelected(false);
         serializedMode.setSelected(false);
-        tearDownOnShutdown.setSelected(false);
+        tearDownOnShutdown.setSelected(true);
         argsPanel.clear();
         browseJar.clearFiles();
     }

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -479,7 +479,7 @@ public void run() {
             JMeterContextService.clearTotalThreads();
             log.info("Starting tearDown thread groups");
             if (mainGroups && !running) { // i.e. shutdown/stopped during main thread groups
-                running = shutdown && tearDownOnShutdown; // re-enable for tearDown if necessary
+                running = tearDownOnShutdown; // re-enable for tearDown if necessary
             }
             while (running && postIter.hasNext()) {//for each setup thread group
                 AbstractThreadGroup group = postIter.next();

File: src/components/org/apache/jmeter/assertions/JSR223Assertion.java
Patch:
@@ -46,7 +46,7 @@ public AssertionResult getResult(SampleResult response) {
             bindings.put("AssertionResult", result);
             try {
                 processFileOrScript(scriptEngine, bindings);
-            } catch (AssertionError ae) {
+            } catch (AssertionError ae) { // NOSONAR We don't want to log the exception as it is handled 
                 result.setFailure(true);
                 result.setFailureMessage(ae.toString());
             }

File: test/src/org/apache/jmeter/JMeterVersionTest.java
Patch:
@@ -115,7 +115,8 @@ public void setUp() throws Exception {
         propNames.remove("rat-tasks");
         versions.remove("rat-tasks");
         // remove optional hsqldb, jacoco and sonar jars (required for coverage reporting, not required for jmeter)
-        for (String optLib : Arrays.asList("jacocoant", "sonarqube-ant-task", "hsqldb", "activemq-all")) {
+        for (String optLib : Arrays.asList("jacocoant", "sonarqube-ant-task", "hsqldb", "activemq-all",
+                "mina-core", "ftplet-api", "ftpserver-core")) {
             propNames.remove(optLib);
             versions.remove(optLib);
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CacheManagerGui.java
Patch:
@@ -104,7 +104,7 @@ public void modifyTestElement(TestElement element) {
     public void clearGui() {
         super.clearGui();
         clearEachIteration.setSelected(false);
-        useExpires.setSelected(false);
+        useExpires.setSelected(true);
         maxCacheSize.setText(""); //$NON-NLS-1$
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -1031,7 +1031,7 @@ private JPanel createNotifyListenersPanel() {
                 .getResString("notify_child_listeners_fr"))); // $NON-NLS-1$
         
         notifyChildSamplerListenerOfFilteredSamplersCB = new JCheckBox(JMeterUtils.getResString("notify_child_listeners_fr")); // $NON-NLS-1$
-        notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(true);
+        notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(false);
         notifyChildSamplerListenerOfFilteredSamplersCB.addActionListener(this);
         notifyChildSamplerListenerOfFilteredSamplersCB.setActionCommand(ENABLE_RESTART);
 

File: src/components/org/apache/jmeter/extractor/BoundaryExtractor.java
Patch:
@@ -252,7 +252,6 @@ private int extract(String leftBoundary, String rightBoundary, int matchNumber,
                 if(endIndex >= 0) {
                     matches.add(inputString.substring(startIndex+leftBoundary.length(), endIndex));
                 } else {
-                    matches.add(inputString.substring(startIndex+leftBoundary.length()));
                     break;
                 }
             } else {

File: test/src/org/apache/jmeter/extractor/TestBoundaryExtractor.java
Patch:
@@ -156,10 +156,11 @@ public void testScope2() throws Exception {
         assertEquals("PARENT", vars.get("regVal"));
         extractor.setLeftBoundary("<title>");
         extractor.setRightBoundary("</title>");
-        extractor.setScopeAll();
+        extractor.setScopeChildren();
         extractor.process();
         final String found = vars.get("regVal");
-        assertTrue(found.equals("ONE") || found.equals("TWO"));
+        assertTrue(found.equals("ONE") || found.equals("TWO")
+                || found.equals("THREE"));
     }
     
     @Test

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -149,7 +149,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     
     // Must match _version property value in saveservice.properties
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String PROPVERSION = "3.2";// Expected version $NON-NLS-1$
+    static final String PROPVERSION = "3.4";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -155,7 +155,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "4336c68d43562b80a1d1b5feba226aa36f52597b"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "54a9f5b36af5922f2d58cc4938a800fc2ca3f3c5"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/SplitFunction.java
Patch:
@@ -74,6 +74,7 @@ public class SplitFunction extends AbstractFunction {
     private Object[] values;
 
     public SplitFunction() {
+        super();
     }
 
     /** {@inheritDoc} */
@@ -87,7 +88,8 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
         String splitString = ",";
 
         if (values.length > 2) { // Split string provided
-            splitString = ((CompoundVariable) values[2]).execute();
+            String newSplitString = ((CompoundVariable) values[2]).execute();
+            splitString = newSplitString.length() > 0 ? newSplitString : splitString;
         }
         if (log.isDebugEnabled()){
             log.debug("Split "+stringToSplit+ " using "+ splitString+ " into "+varNamePrefix);

File: src/core/org/apache/jmeter/gui/action/LoggerPanelEnableDisable.java
Patch:
@@ -71,7 +71,6 @@ public void doAction(ActionEvent e) {
                 splitPane.setDividerLocation(0.8);
                 guiInstance.getMenuItemLoggerPanel().getModel().setSelected(true);
             } else {
-                guiInstance.getLoggerPanel().clear();
                 guiInstance.getLoggerPanel().setVisible(false);
                 splitPane.setDividerSize(0);
                 guiInstance.getMenuItemLoggerPanel().getModel().setSelected(false);

File: src/core/org/apache/jmeter/util/BeanShellBeanInfoSupport.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.jmeter.testbeans.BeanInfoSupport;
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.testbeans.gui.TextAreaEditor;
+import org.apache.jmeter.testbeans.gui.FileEditor;
 
 /**
  * Parent class to handle common GUI design
@@ -56,7 +57,7 @@ protected BeanShellBeanInfoSupport(Class<? extends TestBean> beanClass) {
         p = property("script");
         p.setValue(NOT_UNDEFINED, Boolean.TRUE);
         p.setValue(DEFAULT, "");
-        p.setPropertyEditorClass(TextAreaEditor.class);
+        p.setPropertyEditorClass(FileEditor.class);
 
         createPropertyGroup("scripting", new String[] { "script" });
     }

File: src/core/org/apache/jmeter/testbeans/gui/FileEditor.java
Patch:
@@ -34,6 +34,7 @@
 import javax.swing.JPanel;
 
 import org.apache.jmeter.gui.util.FileDialoger;
+import org.apache.jmeter.util.JMeterUtils;
 
 /**
  * A property editor for File properties.
@@ -81,7 +82,7 @@ public FileEditor(PropertyDescriptor descriptor) {
         }
 
         // Create a button to trigger the file chooser:
-        JButton button = new JButton("Browse...");
+        JButton button = new JButton(JMeterUtils.getResString("browse"));
         button.addActionListener(this);
 
         // Get a WrapperEditor to provide the field or combo -- we'll delegate

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
Patch:
@@ -214,7 +214,7 @@ public void actionPerformed(ActionEvent event) {
      * @return a panel containing the relevant components
      */
     private JPanel createParameterPanel() {
-        argsPanel = new ArgumentsPanel(true,JMeterUtils.getResString("backend_listener_paramtable")); // $NON-NLS-1$
+        argsPanel = new ArgumentsPanel(JMeterUtils.getResString("backend_listener_paramtable")); // $NON-NLS-1$
         return argsPanel;
     }
 

File: src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java
Patch:
@@ -238,7 +238,7 @@ private void configureClassName() {
      * @return a panel containing the relevant components
      */
     private JPanel createParameterPanel() {
-        argsPanel = new ArgumentsPanel(true,JMeterUtils.getResString("paramtable")); // $NON-NLS-1$
+        argsPanel = new ArgumentsPanel(JMeterUtils.getResString("paramtable")); // $NON-NLS-1$
         return argsPanel;
     }
 

File: test/src/org/apache/jmeter/control/TestIfController.java
Patch:
@@ -102,8 +102,8 @@ public void testBug53768() throws Exception {
         ifCont2.setEvaluateAll(false);
 
         CounterConfig counterConfig = new CounterConfig();
-        counterConfig.setStartValue("1");
-        counterConfig.setIncrement("1");
+        counterConfig.setStart(1);
+        counterConfig.setIncrement(1);
         counterConfig.setVarName("VAR1");
 
         DebugSampler debugSampler2 = new DebugSampler();

File: test/src/org/apache/jmeter/control/TestIfController.java
Patch:
@@ -102,8 +102,8 @@ public void testBug53768() throws Exception {
         ifCont2.setEvaluateAll(false);
 
         CounterConfig counterConfig = new CounterConfig();
-        counterConfig.setStart(1);
-        counterConfig.setIncrement(1);
+        counterConfig.setStartValue("1");
+        counterConfig.setIncrement("1");
         counterConfig.setVarName("VAR1");
 
         DebugSampler debugSampler2 = new DebugSampler();

File: src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java
Patch:
@@ -238,7 +238,7 @@ private void configureClassName() {
      * @return a panel containing the relevant components
      */
     private JPanel createParameterPanel() {
-        argsPanel = new ArgumentsPanel(JMeterUtils.getResString("paramtable")); // $NON-NLS-1$
+        argsPanel = new ArgumentsPanel(true,JMeterUtils.getResString("paramtable")); // $NON-NLS-1$
         return argsPanel;
     }
 

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
Patch:
@@ -214,7 +214,7 @@ public void actionPerformed(ActionEvent event) {
      * @return a panel containing the relevant components
      */
     private JPanel createParameterPanel() {
-        argsPanel = new ArgumentsPanel(JMeterUtils.getResString("backend_listener_paramtable")); // $NON-NLS-1$
+        argsPanel = new ArgumentsPanel(true,JMeterUtils.getResString("backend_listener_paramtable")); // $NON-NLS-1$
         return argsPanel;
     }
 

File: src/core/org/apache/jmeter/functions/gui/FunctionHelper.java
Patch:
@@ -102,7 +102,7 @@ public void actionPerformed(ActionEvent actionEvent) {
     }
 
     private void init() { // WARNING: called from ctor so must not be overridden (i.e. must be private or final)
-        parameterPanel = new ArgumentsPanel(JMeterUtils.getResString("function_params"), false); //$NON-NLS-1$
+        parameterPanel = new ArgumentsPanel(true,JMeterUtils.getResString("function_params")); //$NON-NLS-1$
         initializeFunctionList();
         this.getContentPane().setLayout(new BorderLayout(10, 10));
         JPanel comboPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
@@ -120,7 +120,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         JButton generateButton = new JButton(JMeterUtils.getResString("generate")); //$NON-NLS-1$
         generateButton.addActionListener(this);
         generatePanel.add(generateButton);
-        resultTextArea = JSyntaxTextArea.getInstance(5,50);
+        resultTextArea = JSyntaxTextArea.getInstance(5,60);
         resultTextArea.setToolTipText(JMeterUtils.getResString("function_helper_dialog_result_warn"));
         displayPanel.add(new JLabel(JMeterUtils.getResString("result_function")));
         displayPanel.add(JTextScrollPane.getInstance(resultTextArea));

File: src/core/org/apache/jmeter/gui/action/ApplyNamingConvention.java
Patch:
@@ -75,11 +75,11 @@ private void applyNamingPolicyToCurrentNode(GuiPackage guiPackage,
             JMeterTreeNode currentNode) {
         TreeNodeNamingPolicy namingPolicy = guiPackage.getNamingPolicy();
         guiPackage.updateCurrentNode();
-        Enumeration<JMeterTreeNode> enumeration = currentNode.children();
+        Enumeration<?> enumeration = currentNode.children();
         int index = 0;
         namingPolicy.resetState(currentNode);
         while(enumeration.hasMoreElements()) {
-            JMeterTreeNode childNode = enumeration.nextElement();
+            JMeterTreeNode childNode = (JMeterTreeNode)enumeration.nextElement();
             namingPolicy.rename(currentNode, childNode, index);
             index++;
         }        

File: src/core/org/apache/jmeter/gui/action/UndoCommand.java
Patch:
@@ -46,9 +46,9 @@ public void doAction(ActionEvent e) throws IllegalUserActionException {
         final String command = e.getActionCommand();
 
         if (command.equals(ActionNames.UNDO)) {
-            guiPackage.goInHistory(-1);
+            guiPackage.undo();
         } else if (command.equals(ActionNames.REDO)) {
-            guiPackage.goInHistory(1);
+            guiPackage.redo();
         } else {
             throw new IllegalArgumentException("Wrong action called: " + command);
         }

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -95,6 +95,9 @@ public List<JMeterTreeNode> getPathToThreadGroup() {
      * @param tagged The flag to be used for tagging
      */
     public void setMarkedBySearch(boolean tagged) {
+        if(this.markedBySearch == tagged) {
+            return;
+        }
         this.markedBySearch = tagged;
         treeModel.nodeChanged(this);
     }

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/Receiver.java
Patch:
@@ -131,7 +131,9 @@ public void run() {
                         if (messageKey == null) {// JMSMessageID cannot be null
                             log.warn("Received message with correlation id null. Discarding message ...");
                         } else {
-                            admin.putReply(messageKey, reply);
+                            synchronized (admin) {
+                                admin.putReply(messageKey, reply);
+                            }
                         }
                     }
                 }

File: src/core/org/apache/jmeter/functions/gui/FunctionHelper.java
Patch:
@@ -115,7 +115,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         JPanel resultsPanel = new VerticalPanel();
         JPanel generatePanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
         JPanel displayPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
-        cutPasteFunction = new JLabeledTextField(JMeterUtils.getResString("cut_paste_function"), 35); //$NON-NLS-1$
+        cutPasteFunction = new JLabeledTextField(JMeterUtils.getResString("cut_paste_function"), 35, null, false); //$NON-NLS-1$
         generatePanel.add(cutPasteFunction);
         JButton generateButton = new JButton(JMeterUtils.getResString("generate")); //$NON-NLS-1$
         generateButton.addActionListener(this);

File: test/src/org/apache/jmeter/protocol/http/control/TestCacheManagerHC4.java
Patch:
@@ -288,7 +288,7 @@ public void testBug61321() throws Exception {
      * 
      */
     protected void checkIfModifiedSinceHeader(HttpRequestBase httpMethod) {
-        SimpleDateFormat dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z");
+        SimpleDateFormat dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US);
         try {
             assertEquals("Should have found 1 header "+HTTPConstantsInterface.IF_MODIFIED_SINCE, 
                     1, 

File: src/components/org/apache/jmeter/config/CSVDataSetBeanInfo.java
Patch:
@@ -133,6 +133,6 @@ public static String[] getShareTags() {
      * @return a String[] with the list of file encoding
      */
     private String[] getListFileEncoding() {
-        return JOrphanUtils.split(JMeterUtils.getPropDefault("csvdataset.file.encoding", ""), "|"); //$NON-NLS-1$
+        return JOrphanUtils.split(JMeterUtils.getPropDefault("csvdataset.file.encoding_list", ""), "|"); //$NON-NLS-1$
     }
 }

File: src/core/org/apache/jmeter/threads/JMeterContext.java
Patch:
@@ -206,7 +206,7 @@ public Map<String, Object> getSamplerContext() {
     }
 
     /**
-     * param recording true if we are recording
+     * @param recording true if we are recording
      */
     public void setRecording(boolean recording) {
         this.recording = recording;

File: src/functions/org/apache/jmeter/functions/RandomDate.java
Patch:
@@ -55,7 +55,7 @@
  *  <li>Locale for the format (optional)</li> 
  *  <li>variable name (optional)</li>
  * </ul>
- * Returns a formatted date with the specified number of (days, month, year) <br/>
+ * Returns a formatted date with the specified number of (days, month, year)
  * Value is also saved in the variable for later re-use.
  * 
  * @since 3.3

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPClient.java
Patch:
@@ -82,7 +82,7 @@ public interface TCPClient {
      *            InputStream for socket
      * @param sampleResult {@link SampleResult}
      * @return String read from socket
-     * @throws ReadException
+     * @throws ReadException exception that can contain partial response
      */
     String read(InputStream is, SampleResult sampleResult) throws ReadException;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java
Patch:
@@ -20,11 +20,12 @@
 
 import java.io.BufferedReader;
 import java.io.File;
-import java.io.FileReader;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.Serializable;
+import java.nio.charset.Charset;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -136,8 +137,7 @@ public void addFile(String headerFile) throws IOException {
             throw new IOException("The file you specified cannot be read.");
         }
 
-        try ( FileReader fr = new FileReader(file);
-                BufferedReader reader = new BufferedReader(fr) ) {
+        try (BufferedReader reader = Files.newBufferedReader(file.toPath(), Charset.defaultCharset())) {
             String line;
             while ((line = reader.readLine()) != null) {
                 try {

File: src/core/org/apache/jmeter/control/TransactionSampler.java
Patch:
@@ -56,7 +56,7 @@ public class TransactionSampler extends AbstractSampler {
 
     private int noFailingSamples = 0;
 
-    private int totalTime = 0;
+    private long totalTime = 0;
 
     /**
      * @deprecated only for use by test code

File: src/components/org/apache/jmeter/gui/action/ExportTransactionAndSamplerNames.java
Patch:
@@ -69,7 +69,7 @@ public class ExportTransactionAndSamplerNames extends AbstractAction implements
     
     private static final Set<String> commands = new HashSet<>();
 
-    private static final String EXPORT_NAMES = "export_transactions_menu";
+    private static final String EXPORT_NAMES = "export_transactions_names_action";
     
 
     static {

File: test/src/org/apache/jmeter/protocol/tcp/sampler/BinaryTCPClientImplTest.java
Patch:
@@ -28,6 +28,8 @@
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.InputStream;
+
+import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.junit.Test;
 
@@ -85,6 +87,6 @@ public void testRoundTrip() throws Exception {
         os.close();
         assertEquals("12345",os.toString("ISO-8859-1"));
         ByteArrayInputStream bis = new ByteArrayInputStream(os.toByteArray());
-        assertEquals("3132333435",bi.read(bis));
+        assertEquals("3132333435",bi.read(bis, new SampleResult()));
     }
 }

File: test/src/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImplTest.java
Patch:
@@ -27,6 +27,8 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
+
+import org.apache.jmeter.samplers.SampleResult;
 import org.junit.Test;
 
 public class LengthPrefixedBinaryTCPClientImplTest {
@@ -53,7 +55,7 @@ public void testValid() throws Exception {
         final byte[] byteArray = os.toByteArray();
         assertEquals(2+(DATA.length()/2), byteArray.length);
         ByteArrayInputStream is = new ByteArrayInputStream(byteArray);
-        assertEquals(DATA, lp.read(is));
+        assertEquals(DATA, lp.read(is, new SampleResult()));
     }
 
 }

File: src/components/org/apache/jmeter/gui/action/ExportTransactionAndSamplerNames.java
Patch:
@@ -69,7 +69,7 @@ public class ExportTransactionAndSamplerNames extends AbstractAction implements
     
     private static final Set<String> commands = new HashSet<>();
 
-    private static final String EXPORT_NAMES = "export_trans_names";
+    private static final String EXPORT_NAMES = "export_transactions_menu";
     
 
     static {

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -400,7 +400,7 @@ public SampleResult sample(Entry e)// Entry tends to be ignored ...
                 // TODO handle filenames
                 res.setSamplerData(req);
                 protocolHandler.write(os, req);
-                String in = protocolHandler.read(is);
+                String in = protocolHandler.read(is, res);
                 isSuccessful = setupSampleResult(res, in, null, protocolHandler);
             }
         } catch (ReadException ex) {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -50,6 +50,7 @@
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.util.JMeterUtils;
 import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JMeterException;
@@ -171,6 +172,7 @@ public void run() {
         }
         SamplerCreator samplerCreator = null;
         try {
+            JMeterContextService.getContext().setRecording(true);
             // Now, parse initial request (in case it is a CONNECT request)
             byte[] ba = request.parse(new BufferedInputStream(clientSocket.getInputStream()));
             if (ba.length == 0) {
@@ -303,6 +305,7 @@ public void run() {
             if(sampler != null) {
                 sampler.threadFinished(); // Needed for HTTPSampler2
             }
+            JMeterContextService.getContext().setRecording(false);
         }
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1827,9 +1827,11 @@ public byte[] readResponse(SampleResult sampleResult, InputStream in, long lengt
                 
                 if (md == null) {
                     if(storeInBOS) {
-                        if(totalBytes+bytesReadInBuffer<=MAX_BYTES_TO_STORE_PER_REQUEST) {
+                        if(totalBytes+bytesReadInBuffer<=MAX_BYTES_TO_STORE_PER_REQUEST 
+                                || JMeterContextService.getContext().isRecording()) {
                             w.write(readBuffer, 0, bytesReadInBuffer);
                         } else {
+                            log.debug("Big response, truncating it to {} bytes", MAX_BYTES_TO_STORE_PER_REQUEST);
                             w.write(readBuffer, 0, (int)(MAX_BYTES_TO_STORE_PER_REQUEST-totalBytes));
                             storeInBOS = false;
                         }

File: src/components/org/apache/jmeter/visualizers/backend/UserMetric.java
Patch:
@@ -58,7 +58,7 @@ public synchronized void resetForTimeInterval() {
      *          using a sliding window of SLIDING_WINDOW_SIZE
      */
     public int getMaxActiveThreads() {
-        return (int) usersStats.getMin();
+        return (int) usersStats.getMax();
     }
 
     /**
@@ -74,7 +74,7 @@ public int getMeanActiveThreads() {
      *          using a sliding window of SLIDING_WINDOW_SIZE
      */
     public int getMinActiveThreads() {
-        return (int) usersStats.getMax();
+        return (int) usersStats.getMin();
     }
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -631,7 +631,6 @@ public void keyReleased(KeyEvent e) {
             enableRestart();
         } else if(fieldName.equals(PREFIX_HTTP_SAMPLER_NAME)) {
             model.setPrefixHTTPSampleName(prefixHTTPSampleName.getText());
-            enableRestart();
         }
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -631,6 +631,7 @@ public void keyReleased(KeyEvent e) {
             enableRestart();
         } else if(fieldName.equals(PREFIX_HTTP_SAMPLER_NAME)) {
             model.setPrefixHTTPSampleName(prefixHTTPSampleName.getText());
+            enableRestart();
         }
     }
 
@@ -817,7 +818,6 @@ private JPanel createHTTPSamplerPanel() {
         prefixHTTPSampleName = new JTextField(4);
         prefixHTTPSampleName.addKeyListener(this);
         prefixHTTPSampleName.setName(PREFIX_HTTP_SAMPLER_NAME);
-        // TODO Not sure this is needed
         prefixHTTPSampleName.setActionCommand(ENABLE_RESTART);
         JLabel labelPrefix = new JLabel(JMeterUtils.getResString("proxy_prefix_http_sampler_name")); // $NON-NLS-1$
         labelPrefix.setLabelFor(prefixHTTPSampleName);

File: src/core/org/apache/jmeter/gui/action/CheckDirty.java
Patch:
@@ -81,6 +81,7 @@ public void actionPerformed(ActionEvent e) {
     public void doAction(ActionEvent e) {
         String action = e.getActionCommand();
         if (action.equals(ActionNames.SUB_TREE_SAVED)) {
+            previousGuiItems.clear();
             HashTree subTree = (HashTree) e.getSource();
             subTree.traverse(this);
         } else if (action.equals(ActionNames.SUB_TREE_LOADED)) {

File: src/core/org/apache/jmeter/gui/action/Close.java
Patch:
@@ -27,6 +27,7 @@
 
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.util.FocusRequester;
+import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.util.JMeterUtils;
 
 /**
@@ -108,6 +109,7 @@ static void closeProject(ActionEvent e) {
         JTree tree = guiPackage.getTreeListener().getJTree();
         tree.setSelectionRow(0);
         FocusRequester.requestFocus(tree);
+        FileServer.getFileServer().setScriptName(null);
         ActionRouter.getInstance().actionPerformed(new ActionEvent(e.getSource(), e.getID(), ActionNames.ADD_ALL));
     }
 }

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -47,6 +47,7 @@
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 import org.apache.jmeter.gui.util.FileDialoger;
 import org.apache.jmeter.save.SaveService;
+import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.testelement.WorkBench;
@@ -222,6 +223,7 @@ else if (e.getActionCommand().equals(ActionNames.SAVE_AS_TEST_FRAGMENT)) {
         try (FileOutputStream ostream = new FileOutputStream(updateFile)){
             SaveService.saveTree(subTree, ostream);
             if (fullSave) { // Only update the stored copy of the tree for a full save
+                FileServer.getFileServer().setScriptName(new File(updateFile).getName());
                 subTree = GuiPackage.getInstance().getTreeModel().getTestPlan(); // refetch, because convertSubTree affects it
                 if (isWorkbenchSaveable()) {
                     HashTree workbench = GuiPackage.getInstance().getTreeModel().getWorkBench();

File: src/functions/org/apache/jmeter/functions/RandomDate.java
Patch:
@@ -140,7 +140,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
         long localStartDate = 0;
         long localEndDate = 0;
 
-        DateTimeFormatter formatter = null;
+        DateTimeFormatter formatter;
         format = ((CompoundVariable) values[0]).execute().trim();
         String localeAsString = ((CompoundVariable) values[3]).execute().trim();
         if (!localeAsString.trim().isEmpty()) {

File: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
Patch:
@@ -1279,7 +1279,7 @@ private byte[] createExpectedFormdataOutput(
         output.write("\"".getBytes(ISO_8859_1));
         output.write(CRLF);
         output.write("Content-Type: text/plain".getBytes(ISO_8859_1));
-        if(contentEncoding != null && !"US-ASCII".equalsIgnoreCase(contentEncoding)) {
+        if(contentEncoding != null) {
             output.write("; charset=".getBytes(ISO_8859_1));
             output.write(contentEncoding.getBytes(ISO_8859_1));
         }
@@ -1302,7 +1302,7 @@ private byte[] createExpectedFormdataOutput(
         output.write("\"".getBytes(ISO_8859_1));
         output.write(CRLF);
         output.write("Content-Type: text/plain".getBytes(ISO_8859_1));
-        if(contentEncoding != null && !"US-ASCII".equalsIgnoreCase(contentEncoding)) {
+        if(contentEncoding != null) {
             output.write("; charset=".getBytes(ISO_8859_1));
             output.write(contentEncoding.getBytes(ISO_8859_1));
         }

File: src/functions/org/apache/jmeter/functions/RandomDate.java
Patch:
@@ -241,3 +241,4 @@ public List<String> getArgumentDesc() {
     }
 
 }
+

File: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
Patch:
@@ -1279,7 +1279,7 @@ private byte[] createExpectedFormdataOutput(
         output.write("\"".getBytes(ISO_8859_1));
         output.write(CRLF);
         output.write("Content-Type: text/plain".getBytes(ISO_8859_1));
-        if(contentEncoding != null) {
+        if(contentEncoding != null && !"US-ASCII".equalsIgnoreCase(contentEncoding)) {
             output.write("; charset=".getBytes(ISO_8859_1));
             output.write(contentEncoding.getBytes(ISO_8859_1));
         }
@@ -1302,7 +1302,7 @@ private byte[] createExpectedFormdataOutput(
         output.write("\"".getBytes(ISO_8859_1));
         output.write(CRLF);
         output.write("Content-Type: text/plain".getBytes(ISO_8859_1));
-        if(contentEncoding != null) {
+        if(contentEncoding != null && !"US-ASCII".equalsIgnoreCase(contentEncoding)) {
             output.write("; charset=".getBytes(ISO_8859_1));
             output.write(contentEncoding.getBytes(ISO_8859_1));
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -1242,7 +1242,7 @@ protected String sendPostData(HttpPost post)  throws IOException {
         if(getUseMultipartForPost()) {
             // If a content encoding is specified, we use that as the
             // encoding of any parameter values
-            Charset charset = null;
+            Charset charset;
             if(haveContentEncoding) {
                 charset = Charset.forName(contentEncoding);
             } else {
@@ -1254,8 +1254,7 @@ protected String sendPostData(HttpPost post)  throws IOException {
                         getDoBrowserCompatibleMultipart(), charset, haveContentEncoding);
             }
             // Write the request to our own stream
-            MultipartEntityBuilder multipartEntityBuilder = MultipartEntityBuilder.create()
-                    .setCharset(charset);
+            MultipartEntityBuilder multipartEntityBuilder = MultipartEntityBuilder.create();
             if(getDoBrowserCompatibleMultipart()) {
                 multipartEntityBuilder.setLaxMode();
             } else {

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElementBeanInfo.java
Patch:
@@ -63,7 +63,7 @@ public DataSourceElementBeanInfo() {
         p.setValue(DEFAULT, "");
         p = property("poolMax");
         p.setValue(NOT_UNDEFINED, Boolean.TRUE);
-        p.setValue(DEFAULT, "10");
+        p.setValue(DEFAULT, "0");
         p = property("timeout");
         p.setValue(NOT_UNDEFINED, Boolean.TRUE);
         p.setValue(DEFAULT, "10000");

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -40,6 +40,7 @@ public final class ActionNames {
     public static final String CHANGE_PARENT    = "Change Parent"; // $NON-NLS-1$
     public static final String CHECK_DIRTY      = "check_dirty"; // $NON-NLS-1$
     public static final String CHECK_REMOVE     = "check_remove"; // $NON-NLS-1$
+    public static final String CHECK_CUT        = "check_cut"; // $NON-NLS-1$
     public static final String CLEAR            = "action.clear"; // $NON-NLS-1$
     public static final String CLEAR_ALL        = "action.clear_all"; // $NON-NLS-1$
     public static final String CLOSE            = "close"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/action/CheckDirty.java
Patch:
@@ -59,6 +59,7 @@ public class CheckDirty extends AbstractAction implements HashTreeTraverser, Act
         commands.add(ActionNames.SUB_TREE_LOADED);
         commands.add(ActionNames.ADD_ALL);
         commands.add(ActionNames.CHECK_REMOVE);
+        commands.add(ActionNames.CHECK_CUT);
     }
 
     public CheckDirty() {
@@ -91,7 +92,8 @@ public void doAction(ActionEvent e) {
             if (isWorkbenchSaveable()) {
                 GuiPackage.getInstance().getTreeModel().getWorkBench().traverse(this);
             }
-        } else if (action.equals(ActionNames.CHECK_REMOVE)) {
+        } else if (action.equals(ActionNames.CHECK_REMOVE) ||
+                action.equals(ActionNames.CHECK_CUT)) {
             GuiPackage guiPackage = GuiPackage.getInstance();
             JMeterTreeNode[] nodes = guiPackage.getTreeListener().getSelectedNodes();
             removeMode = true;

File: src/core/org/apache/jmeter/gui/action/Cut.java
Patch:
@@ -49,6 +49,7 @@ public Set<String> getActionNames() {
     @Override
     public void doAction(ActionEvent e) {
         GuiPackage guiPack = GuiPackage.getInstance();
+        ActionRouter.getInstance().actionPerformed(new ActionEvent(e.getSource(), e.getID(), ActionNames.CHECK_CUT));
         JMeterTreeNode[] currentNodes = guiPack.getTreeListener().getSelectedNodes();
 
         currentNodes = Copy.keepOnlyAncestors(currentNodes);

File: src/core/org/apache/jmeter/gui/action/template/TemplateManager.java
Patch:
@@ -87,6 +87,7 @@ protected DocumentBuilderFactory createDocumentBuilderFactory() {
                 return factory;
             }
         });
+        JMeterUtils.setupXStreamSecurityPolicy(xstream);
         xstream.alias("template", Template.class);
         xstream.alias("templates", Templates.class);
         xstream.useAttributeFor(Template.class, "isTestPlan");

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -114,6 +114,8 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static final XStream JTLSAVER = new XStreamWrapper(new PureJavaReflectionProvider());
     static {
         JTLSAVER.setMode(XStream.NO_REFERENCES); // This is needed to stop XStream keeping copies of each class
+        JMeterUtils.setupXStreamSecurityPolicy(JMXSAVER);
+        JMeterUtils.setupXStreamSecurityPolicy(JTLSAVER);
     }
 
     // The XML header, with placeholder for encoding, since that is controlled by property

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/render/ObjectMessageRenderer.java
Patch:
@@ -29,6 +29,7 @@
 import javax.xml.stream.XMLStreamReader;
 
 import org.apache.jmeter.protocol.jms.sampler.PublisherSampler;
+import org.apache.jmeter.util.JMeterUtils;
 
 import com.github.benmanes.caffeine.cache.Cache;
 import com.thoughtworks.xstream.XStream;
@@ -66,6 +67,7 @@ public Serializable getValueFromText(final String xmlMessage) {
       Serializable readObject = null;
       try {
           XStream xstream = new XStream();
+          JMeterUtils.setupXStreamSecurityPolicy(xstream);
           readObject = (Serializable) xstream.fromXML(xmlMessage, readObject);
       } catch (Exception e) {
           throw new IllegalStateException("Unable to load object instance from text", e);

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -221,6 +221,7 @@ private BasicDataSource initPool(String maxPool) {
         int poolSize = Integer.parseInt(maxPool);
         dataSource.setMinIdle(0);
         dataSource.setInitialSize(poolSize);
+        dataSource.setEnableAutoCommitOnReturn(false);
         dataSource.setRollbackOnReturn(false);
         dataSource.setMaxIdle(poolSize);
         dataSource.setMaxTotal(poolSize);

File: src/components/org/apache/jmeter/sampler/gui/TestActionGui.java
Patch:
@@ -142,7 +142,7 @@ public void clearGui() {
         super.clearGui();
 
         targetBox.setSelectedIndex(0);
-        durationField.setText(""); //$NON-NLS-1$
+        durationField.setText("0"); //$NON-NLS-1$
         pauseButton.setSelected(true);
         action = TestAction.PAUSE;
         target = TestAction.THREAD;

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
Patch:
@@ -206,6 +206,7 @@ private byte[] processSampler(Message message) throws IOException, MessagingExce
     private List<File> getAttachmentFiles() {
         final String[] attachments = getPropertyAsString(ATTACH_FILE).split(FILENAME_SEPARATOR);
         return Arrays.stream(attachments) // NOSONAR No need to close
+                .filter(s -> !s.isEmpty())
                 .map(this::attachmentToFile)
                 .collect(Collectors.toList());
     }

File: src/functions/org/apache/jmeter/functions/XPathFileContainer.java
Patch:
@@ -83,7 +83,7 @@ private NodeList load(String xpath) throws IOException, FileNotFoundException, P
     }
 
     public String getXPathString(int num) {
-        return nodeList.item(num).getNodeValue();
+        return XPathUtil.getValueForNode(nodeList.item(num));
     }
 
     /**

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -221,6 +221,7 @@ private BasicDataSource initPool(String maxPool) {
         int poolSize = Integer.parseInt(maxPool);
         dataSource.setMinIdle(0);
         dataSource.setInitialSize(poolSize);
+        dataSource.setRollbackOnReturn(false);
         dataSource.setMaxIdle(poolSize);
         dataSource.setMaxTotal(poolSize);
         dataSource.setMaxWaitMillis(Long.parseLong(getTimeout()));

File: src/components/org/apache/jmeter/modifiers/UserParameters.java
Patch:
@@ -49,7 +49,7 @@ public class UserParameters extends AbstractTestElement implements Serializable,
      * shared between all threads see the clone() method below
      *
      * The lock ensures that all the variables are processed together, which is
-     * important for functions such as __CSVRead and _StringFromFile.
+     * important for functions such as __CSVRead and __StringFromFile.
      * But it has a performance drawback.
      */
     private transient Object lock = new Object();

File: src/core/org/apache/jmeter/report/dashboard/ReportGenerator.java
Patch:
@@ -444,7 +444,7 @@ private ApdexSummaryConsumer createApdexSummaryConsumer() {
                 for (Map.Entry<String, Long[]> entry : configuration.getApdexPerTransaction().entrySet()) {
                     org.apache.oro.text.regex.Pattern regex = JMeterUtils.getPatternCache().getPattern(entry.getKey());
                     PatternMatcher matcher = JMeterUtils.getMatcher();
-                    if (matcher.matches(sampleName, regex)) {
+                    if (sampleName != null && matcher.matches(sampleName, regex)) {
                         Long satisfied = entry.getValue()[0];
                         Long tolerated = entry.getValue()[1];
                         if(log.isDebugEnabled()) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -440,7 +440,7 @@ protected HTTPSampleResult sample(URL url, String method,
         res.sampleStart();
 
         final CacheManager cacheManager = getCacheManager();
-        if (cacheManager != null && HTTPConstants.GET.equalsIgnoreCase(method) && cacheManager.inCache(url)) {
+        if (cacheManager != null && HTTPConstants.GET.equalsIgnoreCase(method) && cacheManager.inCache(url, httpRequest.getAllHeaders())) {
             return updateSampleResultForResourceInCache(res);
         }
         CloseableHttpResponse httpResponse = null;

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -180,7 +180,7 @@ private void setCache(String lastModified, String cacheControl, String expires,
         }
         Date expiresDate = null; // i.e. not using Expires
         if (useExpires) {// Check that we are processing Expires/CacheControl
-            final String MAX_AGE = "max-age=";
+            final String maxAge = "max-age=";
 
             if(cacheControl != null && cacheControl.contains("no-store")) {
                 // We must not store an CacheEntry, otherwise a 
@@ -193,7 +193,7 @@ private void setCache(String lastModified, String cacheControl, String expires,
             // if no-cache is present, ensure that expiresDate remains null, which forces revalidation
             if(cacheControl != null && !cacheControl.contains("no-cache")) {
                 expiresDate = extractExpiresDateFromCacheControl(lastModified,
-                        cacheControl, expires, etag, url, date, MAX_AGE, expiresDate);
+                        cacheControl, expires, etag, url, date, maxAge, expiresDate);
                 // else expiresDate computed in (expires!=null) condition is used
             }
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -282,7 +282,7 @@ private boolean isCacheableMethod(HTTPSampleResult res) {
     public void setHeaders(URL url, HttpRequestBase request) {
         CacheEntry entry = getCache().get(url.toString());
         if (log.isDebugEnabled()){
-            log.debug(request.getMethod()+"(OAH) "+url.toString()+" "+entry);
+            log.debug("{}(OAH) {} {}", request.getMethod(), url.toString(), entry);
         }
         if (entry != null){
             final String lastModified = entry.getLastModified();
@@ -308,7 +308,7 @@ public void setHeaders(URL url, HttpRequestBase request) {
     public void setHeaders(HttpURLConnection conn, URL url) {
         CacheEntry entry = getCache().get(url.toString());
         if (log.isDebugEnabled()){
-            log.debug(conn.getRequestMethod()+"(Java) "+url.toString()+" "+entry);
+            log.debug("{}(Java) {} {}", conn.getRequestMethod(), url.toString(), entry);
         }
         if (entry != null){
             final String lastModified = entry.getLastModified();

File: src/components/org/apache/jmeter/visualizers/backend/ErrorMetric.java
Patch:
@@ -73,8 +73,8 @@ public boolean equals(Object other) {
         }
 
         ErrorMetric otherError = (ErrorMetric) other;
-        return (getResponseCode().equalsIgnoreCase(otherError.getResponseCode())
-                && getResponseMessage().equalsIgnoreCase(otherError.getResponseMessage()));
+        return getResponseCode().equalsIgnoreCase(otherError.getResponseCode())
+                && getResponseMessage().equalsIgnoreCase(otherError.getResponseMessage());
  
     }
 

File: src/core/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -112,7 +112,9 @@ public void runTest() throws JMeterEngineException {
         HashTree testTree = test;
 
         synchronized(testTree) {
-            testTree.traverse(new PreCompiler(true));  // limit the changes to client only test elements
+            PreCompiler compiler = new PreCompiler(true);
+            testTree.traverse(compiler);  // limit the changes to client only test elements
+            JMeterContextService.initClientSideVariables(compiler.getClientSideVariables());
             testTree.traverse(new TurnElementsOn());
             testTree.traverse(new ConvertListeners());
         }

File: src/core/org/apache/jmeter/threads/JMeterContext.java
Patch:
@@ -80,7 +80,9 @@ private void clear0() {
      */
     public JMeterVariables getVariables() {
         // If context variable is null ( Client side ) return client variables
-        return (variables == null) ? JMeterContextService.getClientVariables() : variables;
+        return (variables != null) ? 
+                variables : 
+                JMeterContextService.getClientSideVariables();
     }
 
     public void setVariables(JMeterVariables vars) {

File: src/core/org/apache/jmeter/threads/JMeterContext.java
Patch:
@@ -80,7 +80,7 @@ private void clear0() {
      */
     public JMeterVariables getVariables() {
         // If context variable is null ( Client side ) return client variables
-        return (variables == null) ? JMeterContextService.getClientVariable() : variables;
+        return (variables == null) ? JMeterContextService.getClientVariables() : variables;
     }
 
     public void setVariables(JMeterVariables vars) {

File: src/components/org/apache/jmeter/visualizers/backend/ErrorMetric.java
Patch:
@@ -51,7 +51,7 @@ public String getResponseCode() {
         if (responseCode.isEmpty()) {
             return "0";
         } else {
-            return responseCode;
+            return responseCode.trim();
         }
     }
 
@@ -62,7 +62,7 @@ public String getResponseMessage() {
         if (responseMessage.isEmpty()) {
             return "None";
         } else {
-            return responseMessage;
+            return responseMessage.trim();
         }
     }
 
@@ -83,7 +83,7 @@ && getResponseMessage().equalsIgnoreCase(otherError.getResponseMessage())) {
 
     @Override
     public int hashCode() {
-        return getResponseCode().hashCode() + getResponseMessage().hashCode();
+        return getResponseCode().toLowerCase().hashCode() + getResponseMessage().toLowerCase().hashCode();
     }
 
 }

File: src/components/org/apache/jmeter/visualizers/backend/SamplerMetric.java
Patch:
@@ -311,7 +311,7 @@ public int getHits() {
     }
     
     /**
-     * Returns details of errors occurs
+     * Returns by type ( response code and message ) the count of errors occurs
      * @return errors
      */
     public Map<ErrorMetric, Integer> getErrors() {

File: src/components/org/apache/jmeter/visualizers/backend/SamplerMetric.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
 import org.apache.jmeter.control.TransactionController;
@@ -62,7 +63,7 @@ public class SamplerMetric {
     private int successes;
     private int failures;
     private int hits;
-    private HashMap<ErrorMetric, Integer> errors = new HashMap<ErrorMetric, Integer>();
+    private Map<ErrorMetric, Integer> errors = new HashMap<>();
 
     
     /**
@@ -313,7 +314,7 @@ public int getHits() {
      * Returns details of errors occurs
      * @return errors
      */
-    public HashMap<ErrorMetric, Integer> getErrors() {
+    public Map<ErrorMetric, Integer> getErrors() {
         return errors;
     }
 }

File: src/core/org/apache/jmeter/threads/JMeterContext.java
Patch:
@@ -79,7 +79,8 @@ private void clear0() {
      * @return a pointer to the JMeter variables.
      */
     public JMeterVariables getVariables() {
-        return variables;
+        // If context variable is null ( Client side ) return client variables
+        return (variables == null) ? JMeterContextService.getClientVariable() : variables;
     }
 
     public void setVariables(JMeterVariables vars) {

File: src/core/org/apache/jmeter/report/processor/ErrorsSummaryConsumer.java
Patch:
@@ -89,15 +89,15 @@ static String getErrorKey(Sample sample) {
         String responseCode = sample.getResponseCode();
         String responseMessage = sample.getResponseMessage();
         String key = responseCode + (!StringUtils.isEmpty(responseMessage) ? 
-                 "/" + StringEscapeUtils.escapeJson(responseMessage) : "");
+                 "/" + StringEscapeUtils.escapeJson(StringEscapeUtils.escapeHtml4(responseMessage)) : "");
         if (isSuccessCode(responseCode) || 
                 (StringUtils.isEmpty(responseCode) && 
                         !StringUtils.isEmpty(sample.getFailureMessage()))) {
             key = ASSERTION_FAILED;
             if (ASSERTION_RESULTS_FAILURE_MESSAGE) {
                 String msg = sample.getFailureMessage();
                 if (!StringUtils.isEmpty(msg)) {
-                    key = StringEscapeUtils.escapeJson(msg);
+                    key = StringEscapeUtils.escapeJson(StringEscapeUtils.escapeHtml4(msg));
                 }
             }
         }

File: src/core/org/apache/jmeter/control/gui/WhileControllerGui.java
Patch:
@@ -141,8 +141,7 @@ private JPanel createConditionPanel() {
         conditionLabel.setLabelFor(theCondition);
         conditionPanel.add(JTextScrollPane.getInstance(theCondition), BorderLayout.CENTER);
         
-        conditionPanel.add(Box.createHorizontalStrut(conditionLabel.getPreferredSize().width
-                + theCondition.getPreferredSize().width), BorderLayout.NORTH);
+        conditionPanel.add(Box.createHorizontalGlue(), BorderLayout.NORTH);
 
         return conditionPanel;
     }

File: src/core/org/apache/jmeter/control/gui/IfControllerPanel.java
Patch:
@@ -180,8 +180,7 @@ private JPanel createConditionPanel() {
         conditionLabel.setLabelFor(theCondition);
         conditionPanel.add(JTextScrollPane.getInstance(theCondition), BorderLayout.CENTER);
        
-        conditionPanel.add(Box.createHorizontalStrut(conditionLabel.getPreferredSize().width
-                + theCondition.getPreferredSize().width), BorderLayout.NORTH);
+        conditionPanel.add(Box.createHorizontalGlue(), BorderLayout.NORTH);
 
         JPanel optionPanel = new JPanel();
 

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Patch:
@@ -80,7 +80,7 @@ public SampleResult sample(Entry e) {
             } finally {
                 res.connectEnd();
             }
-            res.setResponseHeaders(conn.toString());
+            res.setResponseHeaders(DataSourceElement.getConnectionInfo(getDataSource()));
             res.setResponseData(execute(conn, res));
         } catch (SQLException ex) {
             final String errCode = Integer.toString(ex.getErrorCode());

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -708,6 +708,8 @@ private JPanel createPortPanel() {
         portField = new JTextField(ProxyControl.DEFAULT_PORT_S, 20);
         portField.setName(PORTFIELD);
         portField.addKeyListener(this);
+        Dimension portPreferredSize = portField.getPreferredSize();
+        portField.setMinimumSize(new Dimension((int) Math.round(portPreferredSize.width*0.75), portPreferredSize.height));
 
         JLabel label = new JLabel(JMeterUtils.getResString("port")); // $NON-NLS-1$
         label.setLabelFor(portField);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -2073,7 +2073,6 @@ public int replace(String regex, String replaceBy, boolean caseSensitive) throws
             // check if there is anything to replace
             int nbReplaced = ((Integer)result[1]).intValue();
             if (nbReplaced>0) {
-                totalReplaced += nbReplaced;
                 String replacedText = (String) result[0];
                 setPath(replacedText);
                 totalReplaced += nbReplaced;
@@ -2085,7 +2084,6 @@ public int replace(String regex, String replaceBy, boolean caseSensitive) throws
             // check if there is anything to replace
             int nbReplaced = ((Integer)result[1]).intValue();
             if (nbReplaced>0) {
-                totalReplaced += nbReplaced;
                 String replacedText = (String) result[0];
                 setDomain(replacedText);
                 totalReplaced += nbReplaced;

File: src/core/org/apache/jmeter/report/config/ConfigurationUtils.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class ConfigurationUtils {
 
-    private static final String NOT_SUPPORTED_CONVERTION_FMT = "Convert \"%s\" to \"%s\" is not supported";
+    private static final String NOT_SUPPORTED_CONVERSION_FMT = "Convert \"%s\" to \"%s\" is not supported";
 
     /**
      * Instantiates a new configuration utils.
@@ -55,7 +55,7 @@ public static <TProperty> TProperty convert(String value,
             return Converters.convert(clazz, value);
         } catch (ConvertException ex) {
             throw new ConfigurationException(String.format(
-                NOT_SUPPORTED_CONVERTION_FMT, value, clazz.getName()));
+                NOT_SUPPORTED_CONVERSION_FMT, value, clazz.getName()));
         }
     }
 }

File: src/core/org/apache/jmeter/report/dashboard/ReportGenerator.java
Patch:
@@ -83,7 +83,7 @@ public class ReportGenerator {
 
     private static final String INVALID_CLASS_FMT = "Class name \"%s\" is not valid.";
     private static final String INVALID_EXPORT_FMT = "Data exporter \"%s\" is unable to export data.";
-    private static final String NOT_SUPPORTED_CONVERTION_FMT = "Not supported conversion to \"%s\"";
+    private static final String NOT_SUPPORTED_CONVERSION_FMT = "Not supported conversion to \"%s\"";
 
     public static final String NORMALIZER_CONSUMER_NAME = "normalizer";
     public static final String BEGIN_DATE_CONSUMER_NAME = "beginDate";
@@ -547,7 +547,7 @@ private void setProperty(String className, Object obj, Method[] methods,
                             if (converter == null) {
                                 throw new GenerationException(
                                         String.format(
-                                                NOT_SUPPORTED_CONVERTION_FMT,
+                                                NOT_SUPPORTED_CONVERSION_FMT,
                                                 parameterType
                                                         .getName()));
                             }

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -153,7 +153,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "672a997ce15720edd5ac94b288fd19f80202e4d3"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "4336c68d43562b80a1d1b5feba226aa36f52597b"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/components/org/apache/jmeter/control/ForeachController.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  * ForeachController that iterates over a list of variables named XXXX_NN stored in {@link JMeterVariables}
- * where NN is a number starting from 1 to number of occurences.
+ * where NN is a number starting from 1 to number of occurrences.
  * This list of variable is usually set by PostProcessor (Regexp PostProcessor or {@link org.apache.jmeter.extractor.HtmlExtractor})
  * Iteration can take the full list or only a subset (configured through indexes)
  *

File: src/components/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -148,7 +148,7 @@ public void resolveReplacementSubTree(JMeterTreeNode context) {
     /**
      * In GUI Mode replacement occurs when test start
      * In Non GUI Mode replacement occurs before test runs
-     * @return true if replacement occured at the time method is called
+     * @return true if replacement occurred at the time method is called
      */
     private boolean hasReplacementOccured() {
         if(GuiPackage.getInstance() != null) {

File: src/components/org/apache/jmeter/modifiers/CounterConfig.java
Patch:
@@ -139,7 +139,7 @@ private String formatNumber(long value){
                 DecimalFormat myFormatter = new DecimalFormat(format);
                 return myFormatter.format(value);
             } catch (IllegalArgumentException ignored) {
-                log.warn("Error formating {} at format {}, using default", value, format);
+                log.warn("Error formatting {} at format {}, using default", value, format);
             }
         }
         return Long.toString(value);

File: src/components/org/apache/jmeter/visualizers/RenderAsHTML.java
Patch:
@@ -112,7 +112,7 @@ protected void showRenderedResponse(String response, SampleResult res, boolean e
         } catch (NumberFormatException e) {
             // Java Bug : http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=9001188.
             // See https://bz.apache.org/bugzilla/show_bug.cgi?id=54586
-            log.warn("An error occured rendering html code", e);
+            log.warn("An error occurred rendering html code", e);
             results.setText("Failed to render HTML: " + e.getMessage() +", use Text renderer");            
         }
     }

File: src/components/org/apache/jmeter/visualizers/SearchTreePanel.java
Patch:
@@ -164,7 +164,7 @@ private void doResetSearch(SearchableTreeNode searchableTreeNode) {
 
 
     /**
-     * return true if a match occured
+     * return true if a match occurred
      */
     private boolean doSearch() {
         String wordToSearch = searchTF.getText();

File: src/core/org/apache/jmeter/control/GenericController.java
Patch:
@@ -226,7 +226,7 @@ protected Sampler nextIsAController(Controller controller) throws NextIsNullExce
 
     /**
      * Increment the current pointer and return the element. Called by
-     * {@link #next()} if the element is a sampler. (May be overriden by
+     * {@link #next()} if the element is a sampler. (May be overridden by
      * sub-classes).
      *
      * @param element

File: src/core/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -159,7 +159,7 @@ public void runTest() throws JMeterEngineException {
 
     /**
      * Tidy up RMI access to allow JMeter client to exit.
-     * Currently just interrups the "RMI Reaper" thread.
+     * Currently just interrupts the "RMI Reaper" thread.
      * @param logger where to log the information
      */
     public static void tidyRMI(Logger logger) {

File: src/core/org/apache/jmeter/gui/JMeterGUIComponent.java
Patch:
@@ -84,7 +84,7 @@ public interface JMeterGUIComponent extends ClearGui {
      * the component's label in the local language. The resource name is fixed,
      * and does not vary with the selected language.
      *
-     * Normally this method should be overriden in preference to overriding
+     * Normally this method should be overridden in preference to overriding
      * getStaticLabel(). However where the resource name is not available or required,
      * getStaticLabel() may be overridden instead.
      *

File: src/core/org/apache/jmeter/gui/action/template/TemplateManager.java
Patch:
@@ -153,7 +153,7 @@ private Map<String, Template> readTemplates() {
                     }
                 } catch(Exception ex) {
                     if (log.isWarnEnabled()) {
-                        log.warn("Ignoring template file:'{}', an error occured parsing the file", f.getAbsolutePath(),
+                        log.warn("Ignoring template file:'{}', an error occurred parsing the file", f.getAbsolutePath(),
                                 ex);
                     }
                 } 

File: src/core/org/apache/jmeter/report/config/ReportGeneratorConfiguration.java
Patch:
@@ -638,7 +638,7 @@ public static ReportGeneratorConfiguration loadFromProperties(
                 long.class).longValue();
         configuration.setApdexToleratedThreshold(apdexToleratedThreshold);
         
-        // Load apdex per transactions, overriden by user
+        // Load apdex per transactions, overridden by user
         final String apdexPerTransaction = getOptionalProperty(props, 
                 REPORT_GENERATOR_KEY_APDEX_PER_TRANSACTION, 
                 String.class);

File: src/core/org/apache/jmeter/report/core/CsvSampleWriter.java
Patch:
@@ -37,7 +37,7 @@
  */
 public class CsvSampleWriter extends AbstractSampleWriter {
 
-    /** The number of columnns for each row */
+    /** The number of columns for each row */
     private int columnCount;
 
     /** The separator to be used in between data on each row */
@@ -129,7 +129,7 @@ public void setWriter(Writer writer) {
     }
 
     /**
-     * Write the csv header. If samples have alredy been written then a row with
+     * Write the csv header. If samples have already been written then a row with
      * header information will be written in the middle of the file.
      */
     public void writeHeader() {

File: src/core/org/apache/jmeter/report/core/SampleException.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.jmeter.report.core;
 
 /**
- * Thrown when some sample processing occured
+ * Thrown when some sample processing occurred
  * 
  * @since 3.0
  */

File: src/core/org/apache/jmeter/samplers/RemoteListenerWrapper.java
Patch:
@@ -101,7 +101,7 @@ public void sampleOccurred(SampleEvent e) {
     // is not used, but it may become an issue in the future. Then these
     // events must also be stored so that replay of all events may occur and
     // in the right order. Each stored event must then be tagged with something
-    // that lets you distinguish between occured, started and ended.
+    // that lets you distinguish between occurred, started and ended.
 
     @Override
     public void sampleStarted(SampleEvent e) {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -355,7 +355,7 @@ private static String showDebuggingInfo(SampleResult result) {
         try {
             return "class:"+result.getClass()+",content:"+ToStringBuilder.reflectionToString(result);
         } catch(Exception e) {
-            return "Exception occured creating debug from event, message:"+e.getMessage();
+            return "Exception occurred creating debug from event, message:"+e.getMessage();
         }
     }
 

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -454,7 +454,7 @@ public void tellThreadsToStop() {
             try {
                 threadStarter.interrupt();
             } catch (Exception e) {
-                log.warn("Exception occured interrupting ThreadStarter", e);
+                log.warn("Exception occurred interrupting ThreadStarter", e);
             }
         }
         
@@ -477,7 +477,7 @@ public void stop() {
             try {
                 threadStarter.interrupt();
             } catch (Exception e) {
-                log.warn("Exception occured interrupting ThreadStarter", e);
+                log.warn("Exception occurred interrupting ThreadStarter", e);
             }            
         }
         for (JMeterThread item : allThreads.keySet()) {
@@ -677,7 +677,7 @@ public void run() {
                     newThread.start();
                 }
             } catch (Exception ex) {
-                log.error("An error occured scheduling delay start of threads for Thread Group: {}", getName(), ex);
+                log.error("An error occurred scheduling delay start of threads for Thread Group: {}", getName(), ex);
             }
         }
     }

File: src/jorphan/org/apache/commons/cli/avalon/CLArgsParser.java
Patch:
@@ -177,7 +177,7 @@ private CLOptionDescriptor getDescriptorFor(final String name) {
     }
 
     /**
-     * Retrieve an error message that occured during parsing if one existed.
+     * Retrieve an error message that occurred during parsing if one existed.
      *
      * @return the error string
      */
@@ -604,7 +604,7 @@ private void parseArguments() throws ParseException {
 
                 final String argument = sb.toString();
 
-                // System.out.println( "Arguement:" + argument );
+                // System.out.println( "Argument:" + argument );
 
                 this.option.addArgument(argument);
                 addOption(this.option);

File: src/jorphan/org/apache/jorphan/gui/JLabeledTextArea.java
Patch:
@@ -126,7 +126,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
      * Callback method when the focus to the Text Field component is lost.
      *
      * @param pFocusEvent
-     *            The focus event that occured.
+     *            The focus event that occurred.
      */
     @Override
     public void focusLost(FocusEvent pFocusEvent) {

File: src/jorphan/org/apache/jorphan/gui/JLabeledTextField.java
Patch:
@@ -128,7 +128,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
      * Callback method when the focus to the Text Field component is lost.
      *
      * @param pFocusEvent
-     *            The focus event that occured.
+     *            The focus event that occurred.
      */
     @Override
     public void focusLost(FocusEvent pFocusEvent) {

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -625,7 +625,7 @@ public static void canSafelyWriteToFolder(File folder)
      * @param regex Regular expression
      * @param replacement Replacement text to which function applies a quoting
      * @param caseSensitive is case taken into account
-     * @return array of Object where first row is the replaced text, second row is the number of replacement that occured
+     * @return array of Object where first row is the replaced text, second row is the number of replacement that occurred
      */
     public static Object[] replaceAllWithRegex(
             String source, String regex, String replacement, boolean caseSensitive) {

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/URLCollection.java
Patch:
@@ -89,7 +89,7 @@ public boolean addURL(String url, URL baseUrl) {
         } catch (MalformedURLException mfue) {
             // No WARN message to avoid performance impact
             if(log.isDebugEnabled()) {
-                log.debug("Error occured building relative url for:"+url+", message:"+mfue.getMessage());
+                log.debug("Error occurred building relative url for:"+url+", message:"+mfue.getMessage());
             }
             // No point in adding the URL as String as it will result in null 
             // returned during iteration, see URLString

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/MeasuringConnectionManager.java
Patch:
@@ -65,7 +65,7 @@ public ClientConnectionRequest requestConnection(final HttpRoute route, final Ob
     }
 
     /**
-     * Overriden to use {@link JMeterClientConnectionOperator} and fix SNI issue 
+     * Overridden to use {@link JMeterClientConnectionOperator} and fix SNI issue
      * @see "https://bz.apache.org/bugzilla/show_bug.cgi?id=57935"
      * @see org.apache.http.impl.conn.PoolingClientConnectionManager#createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)
      */

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SharedTCLogParser.java
Patch:
@@ -57,7 +57,7 @@ public int parse(TestElement el, int parseCount) {
         } catch (Exception exception) {
             log.error("Problem creating samples", exception);
         }
-        return -1;// indicate that an error occured
+        return -1;// indicate that an error occurred
     }
 
     /**

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -271,7 +271,7 @@ private class DataSourceComponentImpl {
 
         /**
          * @return Connection
-         * @throws SQLException if database access error occurrs
+         * @throws SQLException if database access error occurred
          */
         public Connection getConnection() throws SQLException {
             Connection conn;

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ClientPool.java
Patch:
@@ -52,7 +52,7 @@ public static synchronized void addClient(Closeable client) {
 
     /**
      * Clear all the clients created by either Publish or Subscribe sampler. We
-     * need to do this to make sure all the threads creatd during the test are
+     * need to do this to make sure all the threads created during the test are
      * destroyed and cleaned up. In some cases, the client provided by the
      * manufacturer of the JMS server may have bugs and some threads may become
      * zombie. In those cases, it is not the responsibility of JMeter for those

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -229,7 +229,7 @@ public SampleResult sample() {
     }
 
     /**
-     * Try to reconnect if configured to or temporize if not or an exception occured
+     * Try to reconnect if configured to or temporize if not or an exception occurred
      * @param reconnect
      */
     private void handleErrorAndAddTemporize(boolean reconnect) {

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/ReadException.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.jmeter.protocol.tcp.sampler;
 
 /**
- * Exception that contains partial response (Text read until exception occured)
+ * Exception that contains partial response (Text read until exception occurred)
  */
 public class ReadException extends Exception {
 
@@ -37,15 +37,15 @@ public ReadException() {
      * Constructor
      * @param message Message
      * @param cause Source cause
-     * @param partialResponse  Text read until error occured
+     * @param partialResponse  Text read until error occurred
      */
     public ReadException(String message, Throwable cause, String partialResponse) {
         super(message, cause);
         this.partialResponse = partialResponse;
     }
 
     /**
-     * @return the partialResponse Text read until error occured
+     * @return the partialResponse Text read until error occurred
      */
     public String getPartialResponse() {
         return partialResponse;

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPClient.java
Patch:
@@ -68,7 +68,7 @@ public interface TCPClient {
      * @param is -
      *            InputStream for socket
      * @return String read from socket
-     * @throws ReadException exception that can contain partial response (Response until error occured)
+     * @throws ReadException exception that can contain partial response (Response until error occurred)
      */
     String read(InputStream is) throws ReadException;
 

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -429,7 +429,7 @@ public SampleResult sample(Entry e)// Entry tends to be ignored ...
     /**
      * Fills SampleResult object
      * @param sampleResult {@link SampleResult}
-     * @param readResponse Response read until error occured
+     * @param readResponse Response read until error occurred
      * @param exception Source exception
      * @param protocolHandler {@link TCPClient}
      * @return boolean if sample is considered as successful

File: test/src/org/apache/jmeter/control/TestIfController.java
Patch:
@@ -71,7 +71,7 @@ public void testStackOverflow() throws Exception {
             }
             assertEquals(0, counter);
         } catch (StackOverflowError e) {
-            fail("Stackoverflow occured in testStackOverflow");
+            fail("Stackoverflow occurred in testStackOverflow");
         }
     }
 
@@ -140,7 +140,7 @@ public void testBug53768() throws Exception {
             assertEquals("0", vars.get("VAR1"));
 
         } catch (StackOverflowError e) {
-            fail("Stackoverflow occured in testStackOverflow");
+            fail("Stackoverflow occurred in testStackOverflow");
         }
     }
 

File: test/src/org/apache/jmeter/extractor/TestXPathExtractor.java
Patch:
@@ -285,7 +285,7 @@ public void testInvalidXpath() throws Exception {
 
         @Test
         public void testNonXmlDocument() throws Exception {
-            result.setResponseData("Error:exception occured", null);
+            result.setResponseData("Error:exception occurred", null);
             extractor.setXPathQuery("//test");
             extractor.process();
             assertEquals(1, result.getAssertionResults().length);

File: src/components/org/apache/jmeter/assertions/BeanShellAssertion.java
Patch:
@@ -109,7 +109,7 @@ public AssertionResult getResult(SampleResult response) {
                     .toString()));
             result.setError(false);
         }
-        catch (NoClassDefFoundError ex) { // NOSONAR explicitely trap this error to make tests work better 
+        catch (NoClassDefFoundError ex) { // NOSONAR explicitly trap this error to make tests work better
             log.error("BeanShell Jar missing? " + ex.toString());
             result.setError(true);
             result.setFailureMessage("BeanShell Jar missing? " + ex.toString());

File: src/core/org/apache/jmeter/samplers/BatchSampleSender.java
Patch:
@@ -131,9 +131,9 @@ public void testEnded(String host) {
     }
 
     /**
-     * Stores sample events untill either a time or sample threshold is
+     * Stores sample events until either a time or sample threshold is
      * breached. Both thresholds are reset if one fires. If only one threshold
-     * is set it becomes the only value checked against. When a threhold is
+     * is set it becomes the only value checked against. When a threshold is
      * breached the list of sample events is sent to a listener where the event
      * are fired locally.
      *

File: src/core/org/apache/jmeter/testelement/property/AbstractProperty.java
Patch:
@@ -369,7 +369,7 @@ public static JMeterProperty createProperty(Object item) {
      * <li>TestElement =&gt; TestElementProperty with the same name</li>
      * <li>Map|Collection =&gt; Map|CollectionProperty with the name = item.hashCode</li>
      * </ul>
-     * @param item object to be turned into a propery
+     * @param item object to be turned into a property
      * @return the JMeterProperty
      */
     protected static JMeterProperty makeProperty(Object item) {

File: src/core/org/apache/jmeter/visualizers/gui/AbstractVisualizer.java
Patch:
@@ -77,7 +77,7 @@
  * </ul>
  * </li>
  * </ul>
- * For most developers, making a new visualizer is primarly for the purpose of
+ * For most developers, making a new visualizer is primarily for the purpose of
  * either calculating new statistics on the sample results that other
  * visualizers don't calculate, or displaying the results visually in a new and
  * interesting way. Making a new visualizer for either of these purposes is easy -

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/BaseParser.java
Patch:
@@ -76,7 +76,7 @@ public static LinkExtractorParser getParser(String parserClassName)
         LOG.info("Created " + parserClassName);
         if (parser.isReusable()) {
             LinkExtractorParser currentParser = PARSERS.putIfAbsent(
-                    parserClassName, parser);// cache the parser if not alread
+                    parserClassName, parser);// cache the parser if not already
                                              // done by another thread
             if (currentParser != null) {
                 return currentParser;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java
Patch:
@@ -39,7 +39,7 @@ public abstract class AbstractSamplerCreator implements SamplerCreator {
     protected static final String HTTP = "http"; // $NON-NLS-1$
     protected static final String HTTPS = "https"; // $NON-NLS-1$
 
-    /** Filetype to be used for the temporary binary files*/
+    /** FileType to be used for the temporary binary files*/
     private static final String BINARY_FILE_SUFFIX =
         JMeterUtils.getPropDefault("proxy.binary.filesuffix",// $NON-NLS-1$
                                    ".binary"); // $NON-NLS-1$
@@ -50,7 +50,7 @@ public abstract class AbstractSamplerCreator implements SamplerCreator {
     /** Where to store the temporary binary files */
     private static final String BINARY_DIRECTORY =
         JMeterUtils.getPropDefault("proxy.binary.directory",// $NON-NLS-1$
-                System.getProperty("user.dir")); // $NON-NLS-1$ proxy.binary.filetype=binary
+                System.getProperty("user.dir")); // $NON-NLS-1$ proxy.binary.fileType=binary
 
     /*
      * Optionally number the requests

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java
Patch:
@@ -50,7 +50,7 @@
  * the logs. It also doesn't care how Generator is implemented, as long as it
  * implements the interface. This means a person could simply implement a dummy
  * parser to generate random parameters and the generator consumes the results.
- * This wasn't the original intent of the sampler. I originaly wanted to write
+ * This wasn't the original intent of the sampler. I originally wanted to write
  * this sampler, so that I can take production logs to simulate production
  * traffic in a test environment. Doing so is desirable to study odd or unusual
  * behavior. It's also good to compare a new system against an existing system

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSamplerBeanInfo.java
Patch:
@@ -98,7 +98,7 @@ public AccessLogSamplerBeanInfo() {
             log.warn("couldn't find classes and set up properties", e);
             throw new RuntimeException("Could not find classes with class finder", e);
         }
-        log.debug("Got to end of access log samper bean info init");
+        log.debug("Got to end of access log sampler bean info init");
     }
 
 }

File: src/functions/org/apache/jmeter/functions/EscapeXml.java
Patch:
@@ -46,7 +46,7 @@
  */
 public class EscapeXml extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__escapeXml"; //$NON-NLS-1$
 

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -385,6 +385,8 @@ public JMeterThread addNewThread(int delay, StandardJMeterEngine engine) {
             numThreads = getNumThreads();
             setNumThreads(numThreads + 1);
         }
+		// Don't cumul intialDelay + rampup delay
+		setDelay(0);
         newJmThread = startNewThread(notifier, threadGroupTree, engine, numThreads, context, now, delay);
         JMeterContextService.addTotalThreads( 1 );
         log.info("Started new thread in group {}", groupNumber);

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/Generator.java
Patch:
@@ -35,7 +35,7 @@
  * large number of requests per day, but the request parameters vary
  * dramatically. E-commerce sites typically have limited inventory, therefore it
  * is better to design test plans that use data from the database.
- * <p>
+ * </p>
  *
  */
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/LogParser.java
Patch:
@@ -31,7 +31,7 @@
  * then, the design and implementation has been rewritten from scratch several
  * times to make it more generic and extensible. The first version was hard
  * coded and written over the weekend.
- * <p>
+ * </p>
  *
  */
 

File: src/core/org/apache/jmeter/report/config/ReportGeneratorConfiguration.java
Patch:
@@ -738,8 +738,8 @@ public static Map<String, Long[]> getApdexPerTransactionParts(String apdexPerTra
             // data looks like : sample(\d+):1000|2000;samples12:3000|4000;scenar01-12:5000|6000
             String[] parts = apdexPerTransaction.split("[;]");
             for (String chunk : parts) {
-                int colonSeparator = chunk.lastIndexOf(":");
-                int pipeSeparator = chunk.lastIndexOf("|");
+                int colonSeparator = chunk.lastIndexOf(':');
+                int pipeSeparator = chunk.lastIndexOf('|');
                 if (colonSeparator == -1 || pipeSeparator == -1 ||
                         pipeSeparator <= colonSeparator) {
                     log.error(

File: src/components/org/apache/jmeter/config/CSVDataSet.java
Patch:
@@ -155,7 +155,7 @@ public void iterationStart(LoopIterationEvent iterEvent) {
         if ("\\t".equals(delim)) { // $NON-NLS-1$
             delim = "\t";// Make it easier to enter a Tab // $NON-NLS-1$
         } else if (delim.isEmpty()){
-            log.warn("Empty delimiter converted to ','");
+            log.debug("Empty delimiter, will use ','");
             delim=",";
         }
         if (vars == null) {

File: test/src/org/apache/jmeter/protocol/http/control/TestDNSCacheManager.java
Patch:
@@ -20,6 +20,7 @@
 
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
+import static org.junit.Assume.assumeTrue;
 
 import java.net.InetAddress;
 import java.net.UnknownHostException;
@@ -94,6 +95,7 @@ public void testWithCustomResolverAnd1WrongServer() throws UnknownHostException
     
     @Test
     public void testWithCustomResolverAnd1Server() throws UnknownHostException {
+        assumeTrue(!Boolean.getBoolean("skip.test_TestDNSCacheManager.testWithCustomResolverAnd1Server"));
         DNSCacheManager original = new DNSCacheManager();
         original.addServer(VALID_DNS_SERVER);
         original.setCustomResolver(true);

File: src/core/org/apache/jmeter/util/JSR223BeanInfoSupport.java
Patch:
@@ -73,7 +73,7 @@ public abstract class JSR223BeanInfoSupport extends ScriptingBeanInfoSupport {
                     + ")";   // $NON-NLS-1$
         }
         
-        LANGUAGE_NAMES = getLanguageNames();
+        LANGUAGE_NAMES = getLanguageNames(); // NOSONAR Kept for backward compatibility
     }
 
     private static final ResourceBundle NAME_BUNDLE = new ListResourceBundle() {            

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -496,7 +496,9 @@ private static Charset getFileEncodingCharset() {
             return Charset.forName(fileEncoding);
         }
         else {
+            
             // We use the default character set encoding of the JRE
+            log.info("fileEncoding not defined - using JRE default");
             return Charset.defaultCharset();
         }
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/StandardGenerator.java
Patch:
@@ -97,7 +97,7 @@ private void init() {// called from ctor, so must not be overridable
     }
 
     /**
-     * Create the FileWriter to save the JMX file.
+     * Create the OutputStream to save the JMX file.
      */
     protected void initStream() {
         try {

File: src/core/org/apache/jmeter/SplashScreen.java
Patch:
@@ -24,6 +24,7 @@
 import javax.swing.JProgressBar;
 import javax.swing.JWindow;
 import javax.swing.SwingUtilities;
+import javax.swing.border.EmptyBorder;
 
 import org.apache.jmeter.util.JMeterUtils;
 
@@ -43,6 +44,7 @@ public class SplashScreen extends JWindow {
      */
     public SplashScreen() {
         imageLabel.setIcon(JMeterUtils.getImage("jmeter.png"));
+        imageLabel.setBorder(new EmptyBorder(10, 10, 10, 10));
         setLayout(borderLayout);
         add(imageLabel, BorderLayout.CENTER);
         add(progressBar, BorderLayout.SOUTH);

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -223,6 +223,7 @@ protected Float extractIEVersion(String userAgent) {
     /**
      * Normalizes URL as browsers do
      * @param url {@link CharSequence}
+     * @return normalized url
      */
     protected static String normalizeUrlValue(CharSequence url) {
         if (!StringUtils.isEmpty(url)) {

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/JsoupBasedHtmlParser.java
Patch:
@@ -64,8 +64,9 @@ public JMeterNodeVisitor(final URLPointer baseUrl, URLCollection urls) {
 
         private void extractAttribute(Element tag, String attributeName) {
             String url = tag.attr(attributeName);
-            if (!StringUtils.isEmpty(url)) {
-                urls.addURL(url, baseUrl.url);
+            String normalizedUrl = normalizeUrlValue(url);
+            if(normalizedUrl != null) {
+                urls.addURL(normalizedUrl, baseUrl.url);
             }
         }
 

File: src/components/org/apache/jmeter/visualizers/SummaryReport.java
Patch:
@@ -90,6 +90,8 @@ public class SummaryReport extends AbstractVisualizer implements Clearable, Acti
     private final String TOTAL_ROW_LABEL
         = JMeterUtils.getResString("aggregate_report_total_label");  //$NON-NLS-1$
 
+    private static final int REFRESH_PERIOD = JMeterUtils.getPropDefault("jmeter.gui.refresh_period", 500); // $NON-NLS-1$
+
     private JTable myJTable;
 
     private JScrollPane myScrollPane;
@@ -170,7 +172,7 @@ public SummaryReport() {
                         Double.class, Double.class, Double.class, Double.class, Double.class, Double.class });
         clearData();
         init();
-        new Timer(200, e -> {
+        new Timer(REFRESH_PERIOD, e -> {
             if (!dataChanged) {
                 return;
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ServerAliasKeyManager.java
Patch:
@@ -27,7 +27,7 @@
 import javax.net.ssl.X509KeyManager;
 
 /**
- * X509KeyManager wrapper class which returns a spacific server alias.
+ * X509KeyManager wrapper class which returns a specific server alias.
  */
 class ServerAliasKeyManager implements X509KeyManager {
 

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -544,9 +544,7 @@ public void sampleOccurred(SampleEvent event) {
                         SaveService.saveSampleResult(event, out);
                     } else { // !saveAsXml
                         String savee = CSVSaveService.resultToDelimitedString(event);
-                        synchronized (LOCK) {
-                            out.println(savee);
-                        }
+                        out.println(savee);
                     }
                 } catch (Exception err) {
                     log.error("Error trying to record a sample", err); // should throw exception back to caller

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -544,7 +544,9 @@ public void sampleOccurred(SampleEvent event) {
                         SaveService.saveSampleResult(event, out);
                     } else { // !saveAsXml
                         String savee = CSVSaveService.resultToDelimitedString(event);
-                        out.println(savee);
+                        synchronized (LOCK) {
+                            out.println(savee);
+                        }
                     }
                 } catch (Exception err) {
                     log.error("Error trying to record a sample", err); // should throw exception back to caller

File: src/jorphan/org/apache/jorphan/util/ThreadDumper.java
Patch:
@@ -44,7 +44,7 @@ private ThreadDumper() {
 
     /**
      * @return Name of file containing thread dump
-     * @throws Exception
+     * @throws Exception if file cannot we written
      */
     public static String threadDump() throws Exception {
         return threadDump(new File(".")); //$NON-NLS-1$
@@ -53,7 +53,7 @@ public static String threadDump() throws Exception {
     /**
      * @param basedir {@link File} Base directory
      * @return Name of file containing thread dump
-     * @throws Exception
+     * @throws Exception  if file cannot we written
      */
     public static String threadDump(File basedir) throws Exception {
         SimpleDateFormat timestampFormat = new SimpleDateFormat("yyyyMMdd_hhmmss_SSS");
@@ -71,7 +71,7 @@ public static String threadDump(File basedir) throws Exception {
     /**
      * Write Thread Dump 
      * @param writer {@link Writer}
-     * @throws IOException 
+     * @throws IOException if file cannot we written
      */
     public static void writeThreadDump(Writer writer) throws IOException {
         ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();

File: src/core/org/apache/jmeter/timers/TimerService.java
Patch:
@@ -47,7 +47,7 @@ public static TimerService getInstance() {
     
     /**
      * Adjust delay so that initialDelay does not exceed end of test
-     * @param delay initial delay in millis
+     * @param initialDelay initial delay in millis
      * @return initialDelay or adjusted delay
      */
     public long adjustDelay(final long initialDelay) {

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -75,7 +75,6 @@ public final class ActionNames {
     public static final String REMOTE_STOP      = "remote_stop"; // $NON-NLS-1$
     public static final String REMOTE_STOP_ALL  = "remote_stop_all"; // $NON-NLS-1$
     public static final String REMOVE           = "remove"; // $NON-NLS-1$
-    public static final String RESET_GUI        = "reset_gui"; // $NON-NLS-1$
     public static final String REVERT_PROJECT   = "revert_project"; // $NON-NLS-1$
     public static final String SAVE             = "save"; // $NON-NLS-1$
     public static final String SAVE_ALL_AS      = "save_all_as";  // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -189,7 +189,6 @@ public static void addEditMenu(JPopupMenu menu, boolean removable) {
         menu.add(makeMenuItemRes("copy", ActionNames.COPY, KeyStrokes.COPY));  //$NON-NLS-1$
         menu.add(makeMenuItemRes("paste", ActionNames.PASTE, KeyStrokes.PASTE)); //$NON-NLS-1$
         menu.add(makeMenuItemRes("duplicate", ActionNames.DUPLICATE, KeyStrokes.DUPLICATE));  //$NON-NLS-1$
-        menu.add(makeMenuItemRes("reset_gui", ActionNames.RESET_GUI )); //$NON-NLS-1$
         if (removable) {
             menu.add(makeMenuItemRes("remove", ActionNames.REMOVE, KeyStrokes.REMOVE)); //$NON-NLS-1$
         }
@@ -198,7 +197,6 @@ public static void addEditMenu(JPopupMenu menu, boolean removable) {
     public static void addPasteResetMenu(JPopupMenu menu) {
         addSeparator(menu);
         menu.add(makeMenuItemRes("paste", ActionNames.PASTE, KeyStrokes.PASTE)); //$NON-NLS-1$
-        menu.add(makeMenuItemRes("reset_gui", ActionNames.RESET_GUI )); //$NON-NLS-1$
     }
 
     public static void addFileMenu(JPopupMenu pop) {

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -248,7 +248,7 @@ public class JMeter implements JMeterPlugin {
     private static final CLOptionDescriptor D_LOGLEVEL =
             new CLOptionDescriptor("loglevel", CLOptionDescriptor.DUPLICATES_ALLOWED
                     | CLOptionDescriptor.ARGUMENTS_REQUIRED_2, LOGLEVEL,
-                    "[category=]level e.g. jorphan=INFO or jmeter.util=DEBUG");
+                    "[category=]level e.g. jorphan=INFO, jmeter.util=DEBUG or com.example.foo=WARN");
     private static final CLOptionDescriptor D_REMOTE_OPT =
             new CLOptionDescriptor("runremote", CLOptionDescriptor.ARGUMENT_DISALLOWED, REMOTE_OPT,
                     "Start remote servers (as defined in remote_hosts)");

File: src/core/org/apache/jmeter/gui/action/What.java
Patch:
@@ -83,14 +83,14 @@ public void doAction(ActionEvent e) throws IllegalUserActionException {
             try {
                 String s = HeapDumper.dumpHeap();
                 JOptionPane.showMessageDialog(null, "Created "+s, "HeapDump", JOptionPane.INFORMATION_MESSAGE);
-            } catch (Exception ex) {
+            } catch (Exception ex) { // NOSONAR We show cause in message
                 JOptionPane.showMessageDialog(null, ex.toString(), "HeapDump", JOptionPane.ERROR_MESSAGE);
             }
         } else if (ActionNames.THREAD_DUMP.equals(e.getActionCommand())){
             try {
                 String s = ThreadDumper.threadDump();
                 JOptionPane.showMessageDialog(null, "Created "+s, "ThreadDump", JOptionPane.INFORMATION_MESSAGE);
-            } catch (Exception ex) {
+            } catch (Exception ex) { // NOSONAR We show cause in message
                 JOptionPane.showMessageDialog(null, ex.toString(), "ThreadDump", JOptionPane.ERROR_MESSAGE);
             }
         }

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -104,6 +104,7 @@ public final class ActionNames {
     public static final String EXPAND           = "expand"; // $NON-NLS-1$
     public static final String RUN_TG           = "run_tg"; // $NON-NLS-1$
     public static final String RUN_TG_NO_TIMERS = "run_tg_no_timers"; // $NON-NLS-1$
+    public static final String THREAD_DUMP      = "thread_dump"; // $NON-NLS-1$
     public static final String VALIDATE_TG      = "validate_tg"; //$NON-NLS-1$
     public static final String ZOOM_IN          = "zoom_in"; //$NON-NLS-1$
     public static final String ZOOM_OUT         = "zoom_out"; //$NON-NLS-1$

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -293,6 +293,8 @@ private void makeHelpMenu() {
 
         JMenuItem heapDump = makeMenuItemRes("heap_dump", ActionNames.HEAP_DUMP);//$NON-NLS-1$
 
+        JMenuItem threadDump = makeMenuItemRes("thread_dump", ActionNames.THREAD_DUMP);//$NON-NLS-1$
+
         helpAbout = makeMenuItemRes("about", 'A', ActionNames.ABOUT); //$NON-NLS-1$
 
         helpMenu.add(contextHelp);
@@ -301,6 +303,7 @@ private void makeHelpMenu() {
         helpMenu.add(setDebug);
         helpMenu.add(resetDebug);
         helpMenu.add(heapDump);
+        helpMenu.add(threadDump);
 
         addPluginsMenuItems(helpMenu, menuCreators, MENU_LOCATION.HELP);
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -226,7 +226,7 @@ public class ProxyControl extends GenericController {
     // The alias to be used if dynamic host names are not possible
     static final String JMETER_SERVER_ALIAS = ":jmeter:"; // $NON-NLS-1$
 
-    static final int CERT_VALIDITY = JMeterUtils.getPropDefault("proxy.cert.validity", 7); // $NON-NLS-1$
+    public static final int CERT_VALIDITY = JMeterUtils.getPropDefault("proxy.cert.validity", 7); // $NON-NLS-1$
 
     // If this is defined, it is assumed to be the alias of a user-supplied certificate; overrides dynamic mode
     static final String CERT_ALIAS = JMeterUtils.getProperty("proxy.cert.alias"); // $NON-NLS-1$

File: test/src/org/apache/jmeter/functions/ComponentReferenceFunctionTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.junit.JMeterTest;
-import org.apache.jmeter.junit.JMeterTestCaseJUnit3;
+import org.apache.jmeter.junit.JMeterTestCaseJUnit;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.w3c.dom.Document;
@@ -43,7 +43,7 @@
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
-public class ComponentReferenceFunctionTest extends JMeterTestCaseJUnit3 {
+public class ComponentReferenceFunctionTest extends JMeterTestCaseJUnit {
 
     private static final Logger log = LoggerFactory.getLogger(ComponentReferenceFunctionTest.class);
     

File: test/src/org/apache/jmeter/functions/PackageTest.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.LinkedList;
 
 import org.apache.jmeter.engine.util.CompoundVariable;
-import org.apache.jmeter.junit.JMeterTestCaseJUnit3;
+import org.apache.jmeter.junit.JMeterTestCaseJUnit;
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
@@ -41,7 +41,7 @@
 /**
  * Test cases for Functions
  */
-public class PackageTest extends JMeterTestCaseJUnit3 {
+public class PackageTest extends JMeterTestCaseJUnit {
 
     private static final Logger log = LoggerFactory.getLogger(PackageTest.class);
 

File: test/src/org/apache/jmeter/gui/action/TestLoad.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import org.apache.jmeter.junit.JMeterTestCaseJUnit3;
+import org.apache.jmeter.junit.JMeterTestCaseJUnit;
 import org.apache.jmeter.save.SaveService;
 import org.apache.jorphan.collections.HashTree;
 
@@ -33,7 +33,7 @@
  * 
  * Test JMX files to check that they can be loaded OK.
  */
-public class TestLoad extends JMeterTestCaseJUnit3 {
+public class TestLoad extends JMeterTestCaseJUnit {
 
     private static final String basedir = new File(System.getProperty("user.dir")).getParent();
     private static final File testfiledir = new File(basedir,"bin/testfiles");

File: test/src/org/apache/jmeter/junit/JMeterTest.java
Patch:
@@ -67,7 +67,7 @@
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
-public class JMeterTest extends JMeterTestCaseJUnit3 {
+public class JMeterTest extends JMeterTestCaseJUnit {
     private static final Logger log = LoggerFactory.getLogger(JMeterTest.class);
 
     private static Map<String, Boolean> guiTitles;

File: test/src/org/apache/jmeter/junit/JMeterTestCaseJUnit.java
Patch:
@@ -35,15 +35,15 @@
 /*
  * Extend JUnit TestCase to provide common setup
  */
-public abstract class JMeterTestCaseJUnit3 extends TestCase {
+public abstract class JMeterTestCaseJUnit extends TestCase {
     // Used by findTestFile
     private static final String filePrefix;
 
-    public JMeterTestCaseJUnit3() {
+    public JMeterTestCaseJUnit() {
         super();
     }
 
-    public JMeterTestCaseJUnit3(String name) {
+    public JMeterTestCaseJUnit(String name) {
         super(name);
     }
 

File: test/src/org/apache/jmeter/protocol/http/parser/TestHTMLParser.java
Patch:
@@ -34,14 +34,14 @@
 import java.util.Vector;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.jmeter.junit.JMeterTestCaseJUnit3;
+import org.apache.jmeter.junit.JMeterTestCaseJUnit;
 import org.apache.jmeter.util.JMeterUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import junit.framework.TestSuite;
 
-public class TestHTMLParser extends JMeterTestCaseJUnit3 {
+public class TestHTMLParser extends JMeterTestCaseJUnit {
     private static final Logger log = LoggerFactory.getLogger(TestHTMLParser.class);
 
     private static final String DEFAULT_UA  = "Apache-HttpClient/4.2.6";

File: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Locale;
 
 import org.apache.jmeter.engine.util.ValueReplacer;
-import org.apache.jmeter.junit.JMeterTestCaseJUnit3;
+import org.apache.jmeter.junit.JMeterTestCaseJUnit;
 import org.apache.jmeter.protocol.http.control.HttpMirrorServer;
 import org.apache.jmeter.protocol.http.control.TestHTTPMirrorThread;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
@@ -56,7 +56,7 @@
  * The samples are executed against the HttpMirrorServer, which is 
  * started when the unit tests are executed.
  */
-public class TestHTTPSamplersAgainstHttpMirrorServer extends JMeterTestCaseJUnit3 {
+public class TestHTTPSamplersAgainstHttpMirrorServer extends JMeterTestCaseJUnit {
     private static final int HTTP_SAMPLER = 0;
     private static final int HTTP_SAMPLER3 = 2;
     

File: test/src/org/apache/jmeter/testbeans/gui/PackageTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.ResourceBundle;
 
 import org.apache.jmeter.gui.util.JMeterMenuBar;
-import org.apache.jmeter.junit.JMeterTestCaseJUnit3;
+import org.apache.jmeter.junit.JMeterTestCaseJUnit;
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
@@ -46,7 +46,7 @@
  * TODO: - Check property files don't have duplicate keys (is this important)
  * 
  */
-public final class PackageTest extends JMeterTestCaseJUnit3 {
+public final class PackageTest extends JMeterTestCaseJUnit {
     private static final Logger log = LoggerFactory.getLogger(PackageTest.class);
 
     private static final Locale defaultLocale = new Locale("en","");

File: test/src/org/apache/jmeter/testelement/TestElementTest.java
Patch:
@@ -23,15 +23,15 @@
 import java.util.Properties;
 
 import org.apache.jmeter.junit.JMeterTest;
-import org.apache.jmeter.junit.JMeterTestCaseJUnit3;
+import org.apache.jmeter.junit.JMeterTestCaseJUnit;
 import org.apache.jmeter.save.SaveService;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
-public class TestElementTest extends JMeterTestCaseJUnit3 {
+public class TestElementTest extends JMeterTestCaseJUnit {
 
     private TestElement testItem;
     

File: src/components/org/apache/jmeter/assertions/XMLAssertion.java
Patch:
@@ -72,6 +72,7 @@ public AssertionResult getResult(SampleResult response) {
         XMLReader builder = XML_READER.get();
         if(builder != null) {
             try {
+                builder.setErrorHandler(new LogErrorHandler());
                 builder.parse(new InputSource(new StringReader(resultData)));
             } catch (SAXException | IOException e) {
                 result.setError(true);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -975,7 +975,9 @@ public URL getUrl() throws MalformedURLException {
         pathAndQuery.append(path);
 
         // Add the query string if it is a HTTP GET or DELETE request
-        if (HTTPConstants.GET.equals(getMethod()) || HTTPConstants.DELETE.equals(getMethod())) {
+        if (HTTPConstants.GET.equals(getMethod()) 
+                || HTTPConstants.DELETE.equals(getMethod())
+                || HTTPConstants.OPTIONS.equals(getMethod())) {
             // Get the query string encoded in specified encoding
             // If no encoding is specified by user, we will get it
             // encoded in UTF-8, which is what the HTTP spec says

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/hc/JMeterPoolingClientConnectionManager.java
Patch:
@@ -252,8 +252,8 @@ ManagedClientConnection leaseConnection(
             this.log.error("Unexpected exception leasing connection from pool", cause);
             // Should never happen
             throw new InterruptedException();
-        } catch (final TimeoutException ex) {
-            throw new ConnectionPoolTimeoutException("Timeout waiting for connection from pool, message:"+ex.getMessage()); // NOSONAR 
+        } catch (final TimeoutException ex) { // NOSONAR Exception message is used
+            throw new ConnectionPoolTimeoutException("Timeout waiting for connection from pool, message:"+ex.getMessage());  
         }
     }
     @Override

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/hc/JMeterPoolingClientConnectionManager.java
Patch:
@@ -142,7 +142,7 @@ public void setValidateAfterInactivity(final int ms) {
     }
 
     @Override
-    protected void finalize() throws Throwable {
+    protected void finalize() throws Throwable { // NOSONAR We know what we do here
         try {
             shutdown();
         } finally {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/hc/JMeterPoolingClientConnectionManager.java
Patch:
@@ -253,7 +253,7 @@ ManagedClientConnection leaseConnection(
             // Should never happen
             throw new InterruptedException();
         } catch (final TimeoutException ex) {
-            throw new ConnectionPoolTimeoutException("Timeout waiting for connection from pool");
+            throw new ConnectionPoolTimeoutException("Timeout waiting for connection from pool, message:"+ex.getMessage()); // NOSONAR 
         }
     }
     @Override

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/hc/ManagedClientConnectionImpl.java
Patch:
@@ -476,7 +476,8 @@ public void abortConnection() {
             final OperatedClientConnection conn = this.poolEntry.getConnection();
             try {
                 conn.shutdown();
-            } catch (final IOException ignore) {
+            } catch (final IOException ignore) { // NOSONAR It ok to ignore
+                // NOOP
             }
             this.manager.releaseConnection(this, this.duration, TimeUnit.MILLISECONDS);
             this.poolEntry = null;

File: test/src/org/apache/jorphan/reflect/TestClassFinder.java
Patch:
@@ -104,11 +104,8 @@ public void testFindAnnotatedClasses() throws Exception {
     public void testFindAllClassesInJar() throws Exception {
         Path jarPath = Files.find(Paths.get(libDirs[0]), 1, (p, a) -> String.valueOf(p).endsWith(".jar")).findFirst()
                 .orElseThrow(() -> new FileNotFoundException("no jars found")).toRealPath();
-//        final String loggerName = ClassFinder.class.getName(); // debug
-//        org.apache.logging.log4j.core.config.Configurator.setAllLevels(loggerName, org.apache.logging.log4j.Level.DEBUG); // debug
         List<String> annotatedClasses = ClassFinder.findClasses(new String[] { jarPath.toString() },
                 c -> true);
-//        org.apache.logging.log4j.core.config.Configurator.setAllLevels(loggerName, org.apache.logging.log4j.Level.INFO); // debug
         Assert.assertFalse("No classes found in: " + jarPath, annotatedClasses.isEmpty());
     }
 

File: test/src/org/apache/jorphan/reflect/TestClassFinder.java
Patch:
@@ -104,11 +104,11 @@ public void testFindAnnotatedClasses() throws Exception {
     public void testFindAllClassesInJar() throws Exception {
         Path jarPath = Files.find(Paths.get(libDirs[0]), 1, (p, a) -> String.valueOf(p).endsWith(".jar")).findFirst()
                 .orElseThrow(() -> new FileNotFoundException("no jars found")).toRealPath();
-        final String loggerName = ClassFinder.class.getName(); // debug
-        org.apache.logging.log4j.core.config.Configurator.setAllLevels(loggerName, org.apache.logging.log4j.Level.DEBUG); // debug
+//        final String loggerName = ClassFinder.class.getName(); // debug
+//        org.apache.logging.log4j.core.config.Configurator.setAllLevels(loggerName, org.apache.logging.log4j.Level.DEBUG); // debug
         List<String> annotatedClasses = ClassFinder.findClasses(new String[] { jarPath.toString() },
                 c -> true);
-        org.apache.logging.log4j.core.config.Configurator.setAllLevels(loggerName, org.apache.logging.log4j.Level.INFO); // debug
+//        org.apache.logging.log4j.core.config.Configurator.setAllLevels(loggerName, org.apache.logging.log4j.Level.INFO); // debug
         Assert.assertFalse("No classes found in: " + jarPath, annotatedClasses.isEmpty());
     }
 

File: src/jorphan/org/apache/jorphan/reflect/ClassFinder.java
Patch:
@@ -356,7 +356,7 @@ private static String fixPathEntry(String path){
         if (path.equals(".")) { // $NON-NLS-1$
             return System.getProperty("user.dir"); // $NON-NLS-1$
         }
-        if (path.length() > 3 && path.matches("[a-z]:\\.*")) { // lower-case drive letter?
+        if (path.length() > 3 && path.matches("[a-z]:\\\\.*")) { // lower-case drive letter?
             path = path.substring(0, 1).toUpperCase(Locale.ROOT) + path.substring(1);
         }
         path = path.trim().replace('\\', '/'); // $NON-NLS-1$ // $NON-NLS-2$

File: test/src/org/apache/jorphan/reflect/TestClassFinder.java
Patch:
@@ -104,8 +104,11 @@ public void testFindAnnotatedClasses() throws Exception {
     public void testFindAllClassesInJar() throws Exception {
         Path jarPath = Files.find(Paths.get(libDirs[0]), 1, (p, a) -> String.valueOf(p).endsWith(".jar")).findFirst()
                 .orElseThrow(() -> new FileNotFoundException("no jars found")).toRealPath();
+        final String loggerName = ClassFinder.class.getName(); // debug
+        org.apache.logging.log4j.core.config.Configurator.setAllLevels(loggerName, org.apache.logging.log4j.Level.DEBUG); // debug
         List<String> annotatedClasses = ClassFinder.findClasses(new String[] { jarPath.toString() },
                 c -> true);
+        org.apache.logging.log4j.core.config.Configurator.setAllLevels(loggerName, org.apache.logging.log4j.Level.INFO); // debug
         Assert.assertFalse("No classes found in: " + jarPath, annotatedClasses.isEmpty());
     }
 

File: src/core/org/apache/jmeter/gui/action/AbstractAction.java
Patch:
@@ -101,6 +101,8 @@ protected boolean popupCheckExistingFileListener(HashTree tree) {
                 case JOptionPane.YES_OPTION:
                     // append is the default behaviour, so nothing to do
                     break;
+                default:
+                    break;
                 }
             }
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
Patch:
@@ -263,6 +263,8 @@ public static void main(String[] args) {
                     }
                 }
                 break;
+            default:
+                break;
             }
         }
 

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -1176,7 +1176,7 @@ public static void applyScaleOnFonts(final float scale) {
             UIDefaults defaults = UIManager.getLookAndFeelDefaults();
             // If I iterate over the entrySet under ubuntu with jre 1.8.0_121
             // the font objects are missing, so iterate over the keys, only
-            for (Object key : new ArrayList<Object>(defaults.keySet())) {
+            for (Object key : new ArrayList<>(defaults.keySet())) {
                 Object value = defaults.get(key);
                 log.debug("Try key {} with value {}", key, value);
                 if (value instanceof Font) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -253,7 +253,7 @@ public void process(HttpResponse response, HttpContext context)
      * 1 HttpClient instance per combination of (HttpClient,HttpClientKey)
      */
     private static final ThreadLocal<Map<HttpClientKey, HttpClient>> HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY = 
-        InheritableThreadLocal.withInitial(() -> new HashMap<HttpClientKey, HttpClient>(5));
+        InheritableThreadLocal.withInitial(() -> new HashMap<>(5));
 
     // Scheme used for slow HTTP sockets. Cannot be set as a default, because must be set on an HttpClient instance.
     private static final Scheme SLOW_HTTP;

File: src/core/org/apache/jmeter/util/BSFTestElement.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.io.PrintStream;
 import java.io.Serializable;
+import java.nio.charset.Charset;
 import java.util.Properties;
 
 import org.apache.bsf.BSFEngine;
@@ -98,7 +99,7 @@ protected void processFileOrScript(BSFManager mgr) throws BSFException{
             bsfEngine.exec("[script]",0,0,getScript());
         } else {// we have a file, read and process it
             try {
-                String script=FileUtils.readFileToString(new File(scriptFile));
+                String script=FileUtils.readFileToString(new File(scriptFile), Charset.defaultCharset());
                 bsfEngine.exec(scriptFile,0,0,script);
             } catch (IOException e) {
                 if (log.isWarnEnabled()) {
@@ -116,7 +117,7 @@ protected Object evalFileOrScript(BSFManager mgr) throws BSFException{
             return bsfEngine.eval("[script]",0,0,getScript());
         } else {// we have a file, read and process it
             try {
-                String script=FileUtils.readFileToString(new File(scriptFile));
+                String script=FileUtils.readFileToString(new File(scriptFile), Charset.defaultCharset());
                 return bsfEngine.eval(scriptFile,0,0,script);
             } catch (IOException e) {
                 if (log.isWarnEnabled()) {

File: test/src/org/apache/jmeter/assertions/SMIMEAssertionTest.java
Patch:
@@ -21,6 +21,7 @@
 import static org.junit.Assert.assertFalse;
 
 import java.io.ByteArrayOutputStream;
+import java.io.File;
 import java.io.IOException;
 import java.util.Properties;
 
@@ -168,12 +169,11 @@ public void testSignerIssuerDN() {
     }
 
     @Test
-    public void testSignerCert() {
+    public void testSignerCert() throws Exception {
         SMIMEAssertionTestElement testElement = new SMIMEAssertionTestElement();
         testElement.setSignerCheckConstraints(true);
         testElement.setSignerCheckByFile(true);
-        testElement.setSignerCertFile(getClass().getResource("email.pem")
-                .getPath());
+        testElement.setSignerCertFile(new File(getClass().getResource("email.pem").toURI()).getAbsolutePath());
         AssertionResult result = SMIMEAssertion.getResult(testElement, parent,
                 "Test");
         assertFalse("Result should not be an error", result.isError());

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -273,6 +273,7 @@ public List<String> getSearchableTokens() throws Exception {
         List<String> list = new ArrayList<>(super.getSearchableTokens());
         list.add(getQueryString());
         list.add(getCookies());
+        list.add(getUrlAsString());
         return list;
     }
 }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -275,8 +275,7 @@ public boolean isErrorDetected() {
     protected void computeSamplerName(HTTPSamplerBase sampler,
             HttpRequestHdr request) {
         if (!HTTPConstants.CONNECT.equals(request.getMethod()) && isNumberRequests()) {
-            incrementRequestNumber();
-            sampler.setName(getRequestNumber() + " " + sampler.getPath());
+            sampler.setName(incrementRequestNumberAndGet() + " " + sampler.getPath());
         } else {
             sampler.setName(sampler.getPath());
         }

File: test/src/org/apache/jorphan/reflect/TestClassFinder.java
Patch:
@@ -102,7 +102,7 @@ public void testFindAnnotatedClasses() throws Exception {
 
     @Test
     public void testFindAllClassesInJar() throws Exception {
-        Path jarPath = Files.find(Paths.get(libDirs[0]), 1, (p, a) -> a.isRegularFile()).findFirst()
+        Path jarPath = Files.find(Paths.get(libDirs[0]), 1, (p, a) -> String.valueOf(p).endsWith(".jar")).findFirst()
                 .orElseThrow(() -> new FileNotFoundException("no jars found")).toRealPath();
         List<String> annotatedClasses = ClassFinder.findClasses(new String[] { jarPath.toString() },
                 c -> true);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
Patch:
@@ -530,7 +530,7 @@ public void setJMSProperties(JMSProperties jmsProperties) {
     }
 
     /**
-     * Gets file encoding to use. If {@value #RAW_DATA}, content isn't parsed.
+     * Gets file encoding to use. If {@link #RAW_DATA}, content isn't parsed.
      * 
      * @return File encoding.
      * @see #RAW_DATA
@@ -542,7 +542,7 @@ public String getFileEncoding() {
     }
 
     /**
-     * Sets file encoding to use. If {@value #RAW_DATA}, content isn't parsed.
+     * Sets file encoding to use. If {@link #RAW_DATA}, content isn't parsed.
      * 
      * @param fileEncoding
      *            File encoding.

File: src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
Patch:
@@ -125,6 +125,7 @@ public Image getImage() {
     }
 
     /**
+     * @param s Sample
      * @deprecated use {@link GraphVisualizer#add(SampleResult)} instead
      */
     public void updateGui(Sample s) {

File: src/core/org/apache/jmeter/gui/action/AbstractAction.java
Patch:
@@ -69,6 +69,7 @@ protected void popupShouldSave(ActionEvent e) {
     
     /**
      * @param tree where check if listener has existing file
+     * @return true if continue test, false otherwise
      */
     protected boolean popupCheckExistingFileListener(HashTree tree) {
 

File: src/core/org/apache/jmeter/report/core/CsvSampleReader.java
Patch:
@@ -112,10 +112,11 @@ private CsvSampleReader(File inputFile, SampleMetadata metadata,
             isr = new InputStreamReader(fis, CHARSET);
             this.reader = new BufferedReader(isr, BUF_SIZE);
         } catch (FileNotFoundException | UnsupportedEncodingException ex) {
+            throw new SampleException("Could not create file reader !", ex);
+        } finally {
             JOrphanUtils.closeQuietly(isr);
             JOrphanUtils.closeQuietly(fis);
             JOrphanUtils.closeQuietly(this.reader);
-            throw new SampleException("Could not create file reader !", ex);
         }
         if (metadata == null) {
             this.metadata = readMetadata(separator, useSaveSampleCfg);

File: src/core/org/apache/jmeter/util/XPathUtil.java
Patch:
@@ -419,7 +419,8 @@ public static void computeAssertionResult(AssertionResult result,
                     NodeList nodeList = xObject.nodelist();
                     final int len = (nodeList != null) ? nodeList.getLength() : 0;
                     log.debug("nodeList length {}", len);
-                    if (len == 0 || nodeList == null) {
+                    // length == 0 means nodelist is null 
+                    if (len == 0) {
                         log.debug("nodeList is null or empty. No match by xpath expression: {}", xPathExpression);
                         result.setFailure(!isNegated);
                         result.setFailureMessage("No Nodes Matched " + xPathExpression);

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -328,7 +328,8 @@ private void triggerEndOfLoopOnParentControllers(Sampler sam, JMeterContext thre
 
         Sampler realSampler = findRealSampler(sam);
         if(realSampler == null) {
-            throw new IllegalStateException("Got null subSampler calling findRealSampler for:"+sam.getName()+", sam:"+sam);
+            throw new IllegalStateException("Got null subSampler calling findRealSampler for:"+
+                    (sam != null ? sam.getName(): "null")+", sam:"+sam);
         }
         // Find parent controllers of current sampler
         FindTestElementsUpToRootTraverser pathToRootTraverser = new FindTestElementsUpToRootTraverser(realSampler);

File: src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
Patch:
@@ -75,6 +75,8 @@ public class GraphVisualizer extends AbstractVisualizer implements ImageVisualiz
 
     private final String minute = JMeterUtils.getResString("minute"); // $NON-NLS-1$
 
+    private final int REFRESH_PERIOD = JMeterUtils.getPropDefault("jmeter.gui.refresh_period", 500); // $NON-NLS-1$
+
     private final Graph graph;
 
     private JCheckBox data;
@@ -234,7 +236,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         this.add(makeTitlePanel(), BorderLayout.NORTH);
         this.add(graphPanel, BorderLayout.CENTER);
 
-        new Timer(500, e -> collectSamplesFromQueue()).start();
+        new Timer(REFRESH_PERIOD, e -> collectSamplesFromQueue()).start();
     }
 
     // Methods used in creating the GUI

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -86,6 +86,8 @@ public class StatVisualizer extends AbstractVisualizer implements Clearable, Act
     private final JCheckBox useGroupName = new JCheckBox(
             JMeterUtils.getResString("aggregate_graph_use_group_name")); //$NON-NLS-1$
 
+    private final int REFRESH_PERIOD = JMeterUtils.getPropDefault("jmeter.gui.refresh_period", 500); // $NON-NLS-1$
+
     private transient ObjectTableModel model;
 
     /**
@@ -183,7 +185,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         opts.add(saveHeaders, BorderLayout.EAST);
         this.add(opts,BorderLayout.SOUTH);
 
-        new Timer(500, e -> {
+        new Timer(REFRESH_PERIOD, e -> {
             synchronized (lock) {
                 while (!newRows.isEmpty()) {
                     model.insertRow(newRows.pop(), model.getRowCount() - 1);

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -67,6 +67,8 @@ public class TableVisualizer extends AbstractVisualizer implements Clearable {
 
     private static final String ICON_SIZE = JMeterUtils.getPropDefault(JMeter.TREE_ICON_SIZE, JMeter.DEFAULT_TREE_ICON_SIZE);
 
+    private static final int REFRESH_PERIOD = JMeterUtils.getPropDefault("jmeter.gui.refresh_period", 500);
+
     // Note: the resource string won't respond to locale-changes,
     // however this does not matter as it is only used when pasting to the clipboard
     private static final ImageIcon imageSuccess = JMeterUtils.getImage(
@@ -320,7 +322,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         // Add the main panel and the graph
         this.add(mainPanel, BorderLayout.NORTH);
         this.add(tablePanel, BorderLayout.CENTER);
-        new Timer(500, e -> collectNewSamples()).start();
+        new Timer(REFRESH_PERIOD, e -> collectNewSamples()).start();
     }
 
     private void collectNewSamples() {

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -129,7 +129,7 @@ public class ViewResultsFullVisualizer extends AbstractVisualizer
     private static final String VIEWERS_ORDER =
         JMeterUtils.getPropDefault("view.results.tree.renderers_order", ""); // $NON-NLS-1$ //$NON-NLS-2$
 
-    private static final int REFRESH_PERIOD = JMeterUtils.getPropDefault("view.results.tree.refresh_period", 500);
+    private static final int REFRESH_PERIOD = JMeterUtils.getPropDefault("jmeter.gui.refresh_period", 500);
 
     private ResultRenderer resultsRender = null;
 

File: src/core/org/apache/jmeter/gui/LoggerPanel.java
Patch:
@@ -56,7 +56,7 @@ public class LoggerPanel extends JPanel implements GuiLogEventListener {
             JMeterUtils.getPropDefault("jmeter.loggerpanel.enable_when_closed", true); // $NON-NLS-1$
 
     private static final int LOGGER_PANEL_REFRESH_PERIOD =
-            JMeterUtils.getPropDefault("jmeter.loggerpanel.refresh_period", 500); // $NON-NLS-1$
+            JMeterUtils.getPropDefault("jmeter.gui.refresh_period", 500); // $NON-NLS-1$
 
     private final Buffer events;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java
Patch:
@@ -230,7 +230,7 @@ private InetAddress[] fromStaticHost(String host) {
 
     /**
      * Sends DNS request via system or custom DNS resolver
-     * @param host
+     * @param host Host
      * @return array of {@link InetAddress} or null if lookup did not return result
      */
     private InetAddress[] requestLookup(String host) throws UnknownHostException {
@@ -317,7 +317,7 @@ private void clearServers() {
 
     /**
      * Add DNS Server
-     * @param dnsServer
+     * @param dnsServer DNS Server
      */
     public void addServer(String dnsServer) {
         getServers().addItem(dnsServer);

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -452,7 +452,7 @@ public String getSamplerTypeName() {
         if (SAMPLER_TYPE_HTTP_SAMPLER_JAVA.equals(type)){
             type = HTTPSamplerFactory.IMPL_JAVA;
         } else if (SAMPLER_TYPE_HTTP_SAMPLER_HC3_1.equals(type)){
-            type = HTTPSamplerFactory.IMPL_HTTP_CLIENT3_1;
+            type = HTTPSamplerFactory.IMPL_HTTP_CLIENT4;
         } else if (SAMPLER_TYPE_HTTP_SAMPLER_HC4.equals(type)){
             type = HTTPSamplerFactory.IMPL_HTTP_CLIENT4;
         }

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeModel.java
Patch:
@@ -143,6 +143,7 @@ public JMeterTreeNode addComponent(TestElement component, JMeterTreeNode node) t
             // The node can be added in non GUI mode at startup
             guiPackage.updateCurrentNode();
             JMeterGUIComponent guicomp = guiPackage.getGui(component);
+            guicomp.clearGui();
             guicomp.configure(component);
             guicomp.modifyTestElement(component);
             guiPackage.getCurrentGui(); // put the gui object back

File: src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
Patch:
@@ -449,6 +449,7 @@ public void clearData() {
         synchronized (lock) {
             model.clearData();
             tableRows.clear();
+            newRows.clear();
             tableRows.put(TOTAL_ROW_LABEL, new SamplingStatCalculator(TOTAL_ROW_LABEL));
             model.addRow(tableRows.get(TOTAL_ROW_LABEL));
         }

File: src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java
Patch:
@@ -183,7 +183,6 @@ public SampleResult sample(Entry e) {
             log.warn("Cannot set URL: "+e1.getLocalizedMessage());
         }
         InputStream input = null;
-        OutputStream output = null;
 
         res.sampleStart();
         FTPClient ftp = new FTPClient();
@@ -221,6 +220,7 @@ public SampleResult sample(Entry e) {
                         final boolean saveResponse = isSaveResponse();
                         ByteArrayOutputStream baos=null; // No need to close this
                         OutputStream target=null; 
+                        OutputStream output = null;
                         try {
                             if (saveResponse){
                                 baos  = new ByteArrayOutputStream();
@@ -255,6 +255,7 @@ public SampleResult sample(Entry e) {
                             }
                         } finally {
                             IOUtils.closeQuietly(target);
+                            IOUtils.closeQuietly(output);
                         }
                     }
 
@@ -292,7 +293,6 @@ public SampleResult sample(Entry e) {
                 }
             }
             IOUtils.closeQuietly(input);
-            IOUtils.closeQuietly(output);
         }
 
         res.sampleEnd();

File: src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java
Patch:
@@ -236,8 +236,9 @@ private InetAddress[] fromStaticHost(String host) {
     private InetAddress[] requestLookup(String host) throws UnknownHostException {
         InetAddress[] addresses = null;
         if (isCustomResolver()) {
-            if (getResolver() != null) {
-                if(getResolver().getResolvers().length > 0) {
+            ExtendedResolver extendedResolver = getResolver();
+            if (extendedResolver != null) {
+                if(extendedResolver.getResolvers().length > 0) {
                     try {
                         Lookup lookup = new Lookup(host, Type.A);
                         lookup.setCache(lookupCache);

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/JTidyHTMLParser.java
Patch:
@@ -133,12 +133,12 @@ private URL scanNodes(Node node, URLCollection urls, URL baseUrl) throws HTMLPar
             if (name.equalsIgnoreCase(TAG_INPUT)) {
                 String src = getValue(attrs, ATT_SRC);
                 String typ = getValue(attrs, ATT_TYPE);
-                if ((src != null) && (typ.equalsIgnoreCase(ATT_IS_IMAGE))) {
+                if ((src != null) && ATT_IS_IMAGE.equalsIgnoreCase(typ)) {
                     urls.addURL(src, baseUrl);
                 }
                 break;
             }
-            if (name.equalsIgnoreCase(TAG_LINK) && getValue(attrs, ATT_REL).equalsIgnoreCase(STYLESHEET)) {
+            if (TAG_LINK.equalsIgnoreCase(name) && STYLESHEET.equalsIgnoreCase(getValue(attrs, ATT_REL))) {
                 urls.addURL(getValue(attrs, ATT_HREF), baseUrl);
                 break;
             }

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java
Patch:
@@ -490,9 +490,9 @@ private PreparedStatement getPreparedStatement(Connection conn) throws SQLExcept
     private PreparedStatement getPreparedStatement(Connection conn, boolean callable) throws SQLException {
         PreparedStatement pstmt;
         if (callable) {
-            pstmt = conn.prepareCall(getQuery());
+            pstmt = conn.prepareCall(getQuery()); // NOSONAR closed by caller
         } else {
-            pstmt = conn.prepareStatement(getQuery());
+            pstmt = conn.prepareStatement(getQuery()); // NOSONAR closed by caller
         }
         pstmt.setQueryTimeout(getIntegerQueryTimeout());
         return pstmt;
@@ -597,7 +597,7 @@ public static void close(Statement s) {
                 s.close();
             }
         } catch (SQLException e) {
-            log.warn("Error closing Statement {}", (s != null ? s.toString() : "null"), e);
+            log.warn("Error closing Statement {}", s.toString(), e);
         }
     }
 

File: src/core/org/apache/jmeter/util/BeanShellClient.java
Patch:
@@ -104,7 +104,7 @@ public void run(){
                     System.out.print(c);
                 }
             } catch (IOException e) {
-                e.printStackTrace();
+                e.printStackTrace(); // NOSONAR No way to log here
             } finally {
                 System.out.println("... disconnected from server.");
             }

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -299,7 +299,7 @@ public Connection getConnection() throws SQLException {
                             isolation, System.identityHashCode(dsc));
                 } catch (SQLException ex) {
                     log.error("Could not set transaction isolation: {}@{}", 
-                            isolation, System.identityHashCode(dsc));
+                            isolation, System.identityHashCode(dsc), ex);
                 }   
             }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/DNSCachePanel.java
Patch:
@@ -109,7 +109,7 @@ public class DNSCachePanel extends AbstractConfigGui implements ActionListener {
     private static final Class<?>[] columnClasses = {
         String.class };
 
-    private static final String[] HOSTS_COLUMN_RESOURCE_NAMES = { "host", JMeterUtils.getResString("dns_hostname_or_ip") };
+    private static final String[] HOSTS_COLUMN_RESOURCE_NAMES = { JMeterUtils.getResString("dns_host"), JMeterUtils.getResString("dns_hostname_or_ip") };
     private static final Class<?>[] HOSTS_COLUMN_CLASSES = { String.class, String.class };
 
     private JCheckBox clearEachIteration;

File: test/src/org/apache/jmeter/protocol/jms/sampler/render/Person.java
Patch:
@@ -29,4 +29,4 @@ public String getName() {
     public void setName(String name) {
         this.name = name;
     }
-}
\ No newline at end of file
+}

File: test/src/org/apache/jmeter/protocol/jms/sampler/PublisherSamplerTest.java
Patch:
@@ -40,7 +40,7 @@ public void initJMeter() {
         JMeterUtils.setLocale(new Locale("ignoreResources"));
     }
 
-    @After
+    @After  
     public void resetJMeter() {
         JMeterUtils.setLocale(Locale.ENGLISH);
     }

File: test/src/org/apache/jmeter/protocol/jms/sampler/render/BinaryMessageRendererTest.java
Patch:
@@ -112,10 +112,10 @@ protected void assertValueFromFile(String expected, String resource, boolean has
     }
 
     protected void assertCacheContentInBytes(String expected) {
-        assertBytesEquals(expected, (byte[]) cacheContent.getValue());
+        assertBytesEquals(expected, (byte[]) getFirstCachedValue());
     }
     protected void assertCacheContentInString(String expected) {
-        assertEquals(expected, cacheContent.getValue());
+        assertEquals(expected, getFirstCachedValue());
     }
     protected void assertBytesEquals(String expected, byte[] actual) {
         assertArrayEquals(expected.getBytes(StandardCharsets.UTF_8), actual);

File: test/src/org/apache/jmeter/protocol/jms/sampler/render/TextMessageRendererTest.java
Patch:
@@ -68,11 +68,11 @@ public void getValueFromFileWithOneVar() {
     public void checkCache() {
         jmeterCtxService.get().getVariables().put("oneVar", "foo");
         assertValueFromFile(format("foo%n"), "oneVar.txt", true);
-        assertEquals(format("${oneVar}%n"), cacheContent.getValue());
+        assertEquals(format("${oneVar}%n"), getFirstCachedValue());
 
         jmeterCtxService.get().getVariables().put("oneVar", "bar");
         assertValueFromFile(format("bar%n"), "oneVar.txt", true);
-        assertEquals(format("${oneVar}%n"), cacheContent.getValue());
+        assertEquals(format("${oneVar}%n"), getFirstCachedValue());
     }
 
     @Test

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerFactory.java
Patch:
@@ -93,7 +93,7 @@ public static HTTPAbstractImpl getImplementation(String impl, HTTPSamplerBase ba
         }
         if (IMPL_JAVA.equals(impl) || HTTP_SAMPLER_JAVA.equals(impl)) {
             return new HTTPJavaImpl(base);
-        } else if (IMPL_HTTP_CLIENT4.equals(impl)) {
+        } else if (IMPL_HTTP_CLIENT4.equals(impl) || IMPL_HTTP_CLIENT3_1.equals(impl)) {
             return new HTTPHC4Impl(base);
         } else {
             throw new IllegalArgumentException("Unknown implementation type: '"+impl+"'");

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -154,7 +154,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "09831d0774c9e7131205e2f5c614abe0c3effba6"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "672a997ce15720edd5ac94b288fd19f80202e4d3"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -122,7 +122,7 @@ public class CookieManager extends ConfigTestElement implements TestStateListene
      * @deprecated not intended for use outside this class (should have been created private)
      */
     @Deprecated
-    public static final String DEFAULT_IMPLEMENTATION = HC3CookieHandler.class.getName();
+    public static final String DEFAULT_IMPLEMENTATION = "org.apache.jmeter.protocol.http.control.HC3CookieHandler";
 
     public CookieManager() {
         clearCookies(); // Ensure that there is always a collection available

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
Patch:
@@ -48,8 +48,8 @@
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.JMeterProperty;
-import org.slf4j.LoggerFactory;
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class HC4CookieHandler implements CookieHandler {
     private static final Logger log = LoggerFactory.getLogger(HC4CookieHandler.class);
@@ -96,7 +96,7 @@ public HC4CookieHandler() {
     
     public HC4CookieHandler(String policy) {
         super();
-        if (policy.equals(org.apache.commons.httpclient.cookie.CookiePolicy.DEFAULT)) { // tweak diff HC3 vs HC4
+        if (policy.equalsIgnoreCase("default")) { // tweak diff HC3 vs HC4
             policy = CookieSpecs.DEFAULT;
         }
         HttpClientContext context = HttpClientContext.create();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBaseConverter.java
Patch:
@@ -69,7 +69,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
             httpSampler.setImplementation(HTTPSamplerFactory.IMPL_JAVA);
         }
         if (nodeName.equals(HTTPSamplerFactory.HTTP_SAMPLER_APACHE)){
-            httpSampler.setImplementation(HTTPSamplerFactory.IMPL_HTTP_CLIENT3_1);
+            httpSampler.setImplementation(HTTPSamplerFactory.IMPL_HTTP_CLIENT4);
         }
         httpSampler.mergeFileProperties();
         return httpSampler;

File: test/src/org/apache/jmeter/protocol/http/control/TestDNSCacheManager.java
Patch:
@@ -105,7 +105,7 @@ public void testWithCustomResolverAnd1Server() throws UnknownHostException {
             Assert.assertTrue(original.cache.size()==1);
             // OK
         } catch (UnknownHostException e) {
-            fail("System DNS server should have been used");
+            fail("Should have succeeded resolving jmeter.apache.org, error:"+e.getMessage());
         }
     }
     

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -60,6 +60,7 @@ public final class ActionNames {
     public static final String HEAP_DUMP        = "heap_dump"; // $NON-NLS-1$
     public static final String LAF_PREFIX       = "laf:"; // Look and Feel prefix
     public static final String LOGGER_PANEL_ENABLE_DISABLE     = "logger_panel_enable_disable"; // $NON-NLS-1$
+    public static final String LOG_LEVEL_PREFIX = "loglevel:"; // Logger level prefix
     public static final String MERGE            = "merge"; // $NON-NLS-1$
     public static final String OPEN             = "open"; // $NON-NLS-1$
     public static final String OPEN_RECENT      = "open_recent"; // $NON-NLS-1$

File: src/components/org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java
Patch:
@@ -163,7 +163,7 @@ public void process() {
                             String suffix = (matchNumber < 0) ? "_1" : "";
                             placeObjectIntoVars(vars, currentRefName + suffix, extractedValues, 0);
                             if (matchNumber < 0 && getComputeConcatenation()) {
-                                vars.put(currentRefName + ALL_SUFFIX, vars.get(currentRefName));
+                                vars.put(currentRefName + ALL_SUFFIX, vars.get(currentRefName + suffix));
                             }
                         }
                         if (matchNumber != 0) {

File: src/components/org/apache/jmeter/config/RandomVariableConfig.java
Patch:
@@ -91,8 +91,8 @@ private void init(){
         final String maxAsString = getMaximumValue();
         long maximum = NumberUtils.toLong(maxAsString);
         long rangeL=maximum-minimum+1; // This can overflow
-        if (minimum >= maximum){
-            log.error("maximum({}) must be > minimum({})", maxAsString, minAsString);
+        if (minimum > maximum){
+            log.error("maximum({}) must be >= minimum({})", maxAsString, minAsString);
             range=0;// This is used as an error indicator
             return;
         }

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -154,7 +154,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "2b8bbf6ee18f324d63d4c69981561fd9e125dd99"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "09831d0774c9e7131205e2f5c614abe0c3effba6"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/core/org/apache/jmeter/report/processor/Top5ErrorsBySamplerConsumer.java
Patch:
@@ -38,7 +38,7 @@ public class Top5ErrorsBySamplerConsumer extends
      * Instantiates a new Top5 Errors by sampler consumer.
      */
     public Top5ErrorsBySamplerConsumer() {
-        super(true);
+        super(false);
     }
 
     /**

File: src/jorphan/org/apache/jorphan/gui/ObjectTableSorter.java
Patch:
@@ -153,6 +153,7 @@ public ObjectTableSorter setValueComparator(int column, Comparator<?> comparator
      * Builds a default comparator based on model column class. {@link Collator#getInstance()} for {@link String},
      * {@link Comparator#naturalOrder() natural order} for {@link Comparable}, no sort support for others.
      * @param column Model column index.
+     * @return default {@link Comparator}
      */
     protected Comparator<?> getDefaultComparator(int column) {
         Class<?> columnClass = model.getColumnClass(column);

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -33,6 +33,7 @@
 import java.net.InetAddress;
 import java.net.URL;
 import java.net.UnknownHostException;
+import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Locale;
@@ -1171,7 +1172,7 @@ public static void applyScaleOnFonts(final float scale) {
             UIDefaults defaults = UIManager.getLookAndFeelDefaults();
             // If I iterate over the entrySet under ubuntu with jre 1.8.0_121
             // the font objects are missing, so iterate over the keys, only
-            for (Object key : defaults.keySet()) {
+            for (Object key : new ArrayList<Object>(defaults.keySet())) {
                 Object value = defaults.get(key);
                 log.debug("Try key {} with value {}", key, value);
                 if (value instanceof Font) {

File: test/src/org/apache/jmeter/functions/CSVReadFunctionTest.java
Patch:
@@ -26,13 +26,13 @@
 
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.junit.JMeterTestCase;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
 import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class CSVReadFunctionTest extends JMeterTestCase {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(CSVReadFunctionTest.class);
     
     // Create the CSVRead function and set its parameters.
     private static CSVRead setCSVReadParams(String p1, String p2) throws Exception {

File: src/functions/org/apache/jmeter/functions/LogFunction2.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * <p>
@@ -45,7 +45,7 @@
  * @since 2.2
  */
 public class LogFunction2 extends AbstractFunction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(LogFunction2.class);
 
     private static final List<String> desc = new LinkedList<>();
 

File: src/core/org/apache/jmeter/gui/action/AbstractAction.java
Patch:
@@ -26,11 +26,11 @@
 import org.apache.jmeter.exceptions.IllegalUserActionException;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public abstract class AbstractAction implements Command {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(AbstractAction.class);
 
     /**
      * @see Command#doAction(ActionEvent)

File: src/core/org/apache/jmeter/gui/action/AddThinkTimeBetweenEachStep.java
Patch:
@@ -31,15 +31,15 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.ThreadGroup;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Add ThinkTime (TestAction + UniformRandomTimer)
  * @since 3.2
  */
 public class AddThinkTimeBetweenEachStep extends AbstractAction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(AddThinkTimeBetweenEachStep.class);
 
     private static final Set<String> commands = new HashSet<>();
     

File: src/core/org/apache/jmeter/gui/action/ApplyNamingConvention.java
Patch:
@@ -28,15 +28,15 @@
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Allows to apply naming convention on nodes
  * @since 3.2
  */
 public class ApplyNamingConvention extends AbstractAction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(ApplyNamingConvention.class);
 
     private static final Set<String> commands = new HashSet<>();
     

File: src/core/org/apache/jmeter/gui/action/ChangeParent.java
Patch:
@@ -36,14 +36,14 @@
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Allows to change Controller implementation
  */
 public class ChangeParent extends AbstractAction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(ChangeParent.class);
 
     private static final Set<String> commands = new HashSet<>();
 

File: src/core/org/apache/jmeter/gui/action/EnableComponent.java
Patch:
@@ -24,14 +24,14 @@
 
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Implements the Enable menu item.
  */
 public class EnableComponent extends AbstractAction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(EnableComponent.class);
 
     private static final Set<String> commands = new HashSet<>();
 

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeListener.java
Patch:
@@ -37,11 +37,11 @@
 import org.apache.jmeter.gui.action.ActionNames;
 import org.apache.jmeter.gui.action.ActionRouter;
 import org.apache.jmeter.gui.action.KeyStrokes;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class JMeterTreeListener implements TreeSelectionListener, MouseListener, KeyListener {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(JMeterTreeListener.class);
 
     private TreePath currentPath;
 

File: src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.TestElementProperty;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.thoughtworks.xstream.converters.MarshallingContext;
 import com.thoughtworks.xstream.converters.UnmarshallingContext;
@@ -33,7 +33,7 @@
 import com.thoughtworks.xstream.mapper.Mapper;
 
 public class TestElementPropertyConverter extends AbstractCollectionConverter {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(TestElementPropertyConverter.class);
 
     private static final String HEADER_CLASSNAME
         = "org.apache.jmeter.protocol.http.control.Header"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/testbeans/gui/FieldStringEditor.java
Patch:
@@ -25,8 +25,6 @@
 
 import javax.swing.JTextField;
 
-//import org.apache.jorphan.logging.LoggingManager;
-//import org.apache.log.Logger;
 
 /**
  * This class implements a property editor for non-null String properties that
@@ -37,7 +35,6 @@
  *
  */
 class FieldStringEditor extends PropertyEditorSupport implements ActionListener, FocusListener {
-//  private static final Logger log = LoggingManager.getLoggerForClass();
 
     /**
      * This will hold the text editing component, either a plain JTextField (in

File: src/core/org/apache/jmeter/engine/PreCompiler.java
Patch:
@@ -30,15 +30,15 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.collections.HashTreeTraverser;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Class to replace function and variable references in the test tree.
  *
  */
 public class PreCompiler implements HashTreeTraverser {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(PreCompiler.class);
 
     private final ValueReplacer replacer;
 

File: src/core/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -31,14 +31,14 @@
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.HashTree;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Class to run remote tests from the client JMeter and collect remote samples
  */
 public class ClientJMeterEngine implements JMeterEngine {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(ClientJMeterEngine.class);
 
     private static final Object LOCK = new Object();
 

File: src/components/org/apache/jmeter/visualizers/BSFListener.java
Patch:
@@ -52,7 +52,9 @@ public void sampleOccurred(SampleEvent event) {
             mgr.declareBean("sampleResult", result, SampleResult.class);
             processFileOrScript(mgr);
         } catch (BSFException e) {
-            log.warn("Problem in BSF script. {}", e.toString());
+            if (log.isWarnEnabled()) {
+                log.warn("Problem in BSF script. {}", e.toString());
+            }
         } finally {
             if (mgr != null) {
                 mgr.terminate();

File: src/components/org/apache/jmeter/visualizers/BeanShellListener.java
Patch:
@@ -62,7 +62,9 @@ public void sampleOccurred(SampleEvent se) {
             bshInterpreter.set("sampleResult", samp);//$NON-NLS-1$
             processFileOrScript(bshInterpreter);
         } catch (JMeterException e) {
-            log.warn("Problem in BeanShell script. {}", e.toString());
+            if (log.isWarnEnabled()) {
+                log.warn("Problem in BeanShell script. {}", e.toString());
+            }
         }
     }
 

File: src/components/org/apache/jmeter/assertions/BSFAssertion.java
Patch:
@@ -43,7 +43,9 @@ public AssertionResult getResult(SampleResult response) {
             processFileOrScript(mgr);
             result.setError(false);
         } catch (BSFException e) {
-            log.warn("Problem in BSF script {}",e.toString());
+            if (log.isWarnEnabled()) {
+                log.warn("Problem in BSF script {}", e.toString());
+            }
             result.setFailure(true);
             result.setError(true);
             result.setFailureMessage(e.toString());

File: src/components/org/apache/jmeter/assertions/BeanShellAssertion.java
Patch:
@@ -118,7 +118,9 @@ public AssertionResult getResult(SampleResult response) {
         {
             result.setError(true);
             result.setFailureMessage(ex.toString());
-            log.warn(ex.toString());
+            if (log.isWarnEnabled()) {
+                log.warn(ex.toString());
+            }
         }
 
         return result;

File: src/components/org/apache/jmeter/assertions/XMLSchemaAssertion.java
Patch:
@@ -118,8 +118,9 @@ private void setSchemaResult(AssertionResult result, String xmlStr, String xsdFi
             }
 
         } catch (SAXException e) {
-
-            log.warn(e.toString());
+            if (log.isWarnEnabled()) {
+                log.warn(e.toString());
+            }
             result.setResultForFailure(e.getMessage());
 
         } catch (IOException e) {

File: src/components/org/apache/jmeter/assertions/gui/XPathPanel.java
Patch:
@@ -196,7 +196,7 @@ public static boolean validXPath(String xpathString, boolean showDialog) {
             testDoc.appendChild(el);
             XPathUtil.validateXPath(testDoc, xpathString);
         } catch (IllegalArgumentException | ParserConfigurationException | TransformerException e) {
-            log.warn(e.getLocalizedMessage(), e);
+            log.warn("Exception while validating XPath.", e);
             success = false;
             ret = e.getLocalizedMessage();
         }

File: src/components/org/apache/jmeter/config/RandomVariableConfig.java
Patch:
@@ -202,7 +202,7 @@ private synchronized long getRandomSeedAsLong() {
                 seed = Long.parseLong(randomSeed);
             } catch (NumberFormatException e) {
                 seed = System.currentTimeMillis();
-                log.warn("Cannot parse seed: {}. {}", randomSeed, e.getLocalizedMessage());
+                log.warn("Cannot parse random seed: '{}'", randomSeed);
             }
         }
         return seed;

File: src/components/org/apache/jmeter/control/IncludeController.java
Patch:
@@ -129,7 +129,9 @@ protected HashTree loadIncludedElements() {
                 if(!file.exists() && !file.isAbsolute()){
                     log.info("loadIncludedElements -failed for: {}", absolutePath);
                     file = new File(FileServer.getFileServer().getBaseDir(), includePath);
-                    log.info("loadIncludedElements -Attempting to read it from: {}", file.getAbsolutePath());
+                    if (log.isInfoEnabled()) {
+                        log.info("loadIncludedElements -Attempting to read it from: {}", file.getAbsolutePath());
+                    }
                     if(!file.canRead() || !file.isFile()){
                         log.error("Include Controller '{}' can't load '{}' - see log for details", this.getName(),
                                 fileName);

File: src/components/org/apache/jmeter/extractor/BSFPostProcessor.java
Patch:
@@ -39,7 +39,9 @@ public void process(){
             mgr = getManager();
             processFileOrScript(mgr);
         } catch (BSFException e) {
-            log.warn("Problem in BSF script {}", e.toString());
+            if (log.isWarnEnabled()) {
+                log.warn("Problem in BSF script: {}", e.toString());
+            }
         } finally {
             if (mgr != null) {
                 mgr.terminate();

File: src/components/org/apache/jmeter/extractor/BeanShellPostProcessor.java
Patch:
@@ -63,7 +63,9 @@ public void process() {
             bshInterpreter.set("data", prev.getResponseData());//$NON-NLS-1$
             processFileOrScript(bshInterpreter);
         } catch (JMeterException e) {
-            log.warn("Problem in BeanShell script: {}", e.toString());
+            if (log.isWarnEnabled()) {
+                log.warn("Problem in BeanShell script: {}", e.toString());
+            }
         }
     }
      

File: src/components/org/apache/jmeter/modifiers/BSFPreProcessor.java
Patch:
@@ -42,7 +42,9 @@ public void process(){
             }
             processFileOrScript(mgr);
         } catch (BSFException e) {
-            log.warn("Problem in BSF script. {}", e.toString());
+            if (log.isWarnEnabled()) {
+                log.warn("Problem in BSF script. {}", e.toString());
+            }
         } finally {
             if (mgr != null) {
                 mgr.terminate();

File: src/components/org/apache/jmeter/modifiers/BeanShellPreProcessor.java
Patch:
@@ -58,7 +58,9 @@ public void process(){
             bshInterpreter.set("sampler", sam);//$NON-NLS-1$
             processFileOrScript(bshInterpreter);
         } catch (JMeterException e) {
-            log.warn("Problem in BeanShell script. {}", e.toString());
+            if (log.isWarnEnabled()) {
+                log.warn("Problem in BeanShell script. {}", e.toString());
+            }
         }
     }
     

File: src/components/org/apache/jmeter/sampler/TestAction.java
Patch:
@@ -109,7 +109,7 @@ private void pause(String timeInMillis) {
         try {
             millis=Long.parseLong(timeInMillis);
         } catch (NumberFormatException e){
-            log.warn("Could not create number from {}", timeInMillis);
+            log.warn("Could not parse number: '{}'", timeInMillis);
             millis=0;
         }
         try {

File: src/components/org/apache/jmeter/timers/BSFTimer.java
Patch:
@@ -44,7 +44,9 @@ public long delay() {
             }
             delay = Long.parseLong(o.toString());
         } catch (NumberFormatException | BSFException e) {
-            log.warn("Problem in BSF script. {}", e.toString());
+            if (log.isWarnEnabled()) {
+                log.warn("Problem in BSF script. {}", e.toString());
+            }
         } finally {
             if(mgr != null) {
                 mgr.terminate();

File: src/components/org/apache/jmeter/timers/SyncTimer.java
Patch:
@@ -181,7 +181,9 @@ public long delay() {
             } catch (InterruptedException | BrokenBarrierException e) {
                 return 0;
             } catch (TimeoutException e) {
-                log.warn("SyncTimer {} timeouted waiting for users after: {}ms", getName(), getTimeoutInMs());
+                if (log.isWarnEnabled()) {
+                    log.warn("SyncTimer {} timeouted waiting for users after: {}ms", getName(), getTimeoutInMs());
+                }
                 return 0;
             } finally {
                 if(arrival == 0) {

File: src/core/org/apache/jmeter/gui/util/TextAreaCellRenderer.java
Patch:
@@ -55,7 +55,7 @@ public Component getTableCellRendererComponent(JTable table, Object value,
     private JSyntaxTextArea createRenderer(String value) {
         JSyntaxTextArea textArea = JSyntaxTextArea.getInstance(2, 50);
         textArea.setLanguage("text"); //$NON-NLS-1$
-        textArea.setInitialText(value.toString());
+        textArea.setInitialText(value);
         return textArea;
     }
 

File: src/components/org/apache/jmeter/visualizers/RenderAsHTML.java
Patch:
@@ -32,11 +32,11 @@
 
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class RenderAsHTML extends SamplerResultTab implements ResultRenderer {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(RenderAsHTML.class);
 
     private static final String TEXT_HTML = "text/html"; // $NON-NLS-1$
 

File: src/components/org/apache/jmeter/visualizers/RenderAsXML.java
Patch:
@@ -36,9 +36,9 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.util.XPathUtil;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 import org.w3c.tidy.Tidy;
@@ -47,7 +47,7 @@
 public class RenderAsXML extends SamplerResultTab
     implements ResultRenderer {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(RenderAsXML.class);
 
     private static final byte[] XML_PFX = {'<','?','x','m','l',' '};//"<?xml "
 

File: src/components/org/apache/jmeter/assertions/BSFAssertion.java
Patch:
@@ -43,7 +43,7 @@ public AssertionResult getResult(SampleResult response) {
             processFileOrScript(mgr);
             result.setError(false);
         } catch (BSFException e) {
-            log.warn("Problem in BSF script "+e);
+            log.warn("Problem in BSF script {}",e.toString());
             result.setFailure(true);
             result.setError(true);
             result.setFailureMessage(e.toString());

File: src/components/org/apache/jmeter/extractor/XPathExtractor.java
Patch:
@@ -188,7 +188,7 @@ public void process() {
 
     private void addAssertionFailure(final SampleResult previousResult,
             final Throwable thrown, final boolean setFailed) {
-        AssertionResult ass = new AssertionResult(thrown.getClass().getSimpleName()); // $NON-NLS-1$
+        AssertionResult ass = new AssertionResult(getName()); // $NON-NLS-1$
         ass.setFailure(true);
         ass.setFailureMessage(thrown.getLocalizedMessage()+"\nSee log file for further details.");
         previousResult.addAssertionResult(ass);

File: test/src/org/apache/jmeter/protocol/http/control/TestHC4CookieManager.java
Patch:
@@ -294,7 +294,7 @@ public void testNewCookie() throws Exception {
         @Test
         public void testHttpOnlyCookie() throws Exception {
             URL url = new URL("http://a.b.c/");
-            man.addCookieFromHeader("mySASession=s%3AcafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK%2F2Bs34MW5kGHmErKzG6r3XI; Path=/; Expires=Tue, 07 Feb 2017 09:13:14 GMT; HttpOnly", url);
+            man.addCookieFromHeader("mySASession=s%3AcafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK%2F2Bs34MW5kGHmErKzG6r3XI; Path=/; Expires=Tue, 07 Feb 2990 09:13:14 GMT; HttpOnly", url);
             assertEquals(1,man.getCookieCount());
             String s = man.getCookieHeaderForURL(url);
             assertNotNull(s);

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/AnchorModifier.java
Patch:
@@ -40,8 +40,8 @@
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.threads.JMeterContext;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
@@ -50,7 +50,7 @@
 // For Unit tests, @see TestAnchorModifier
 
 public class AnchorModifier extends AbstractTestElement implements PreProcessor, Serializable {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(AnchorModifier.class);
 
     private static final long serialVersionUID = 240L;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/BaseParser.java
Patch:
@@ -21,16 +21,16 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 /**
  * BaseParser is the base class for {@link LinkExtractorParser}
  * It is advised to make subclasses reusable accross parsing, so {@link BaseParser}{@link #isReusable()} returns true by default
  * @since 3.0
  */
 public abstract class BaseParser implements LinkExtractorParser {
-    private static final Logger LOG = LoggingManager.getLoggerForClass();
+    private static final Logger LOG = LoggerFactory.getLogger(BaseParser.class);
     // Cache of parsers - parsers must be re-usable
     private static final ConcurrentMap<String, LinkExtractorParser> PARSERS = new ConcurrentHashMap<>(5);
 

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/CSSParseExceptionCallback.java
Patch:
@@ -22,8 +22,8 @@
 
 import org.apache.commons.lang3.Validate;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 import com.helger.css.handler.ICSSParseExceptionCallback;
 import com.helger.css.parser.ParseException;
@@ -32,7 +32,7 @@
 public class CSSParseExceptionCallback implements ICSSParseExceptionCallback {
 
     private static final long serialVersionUID = -4277276398858139449L;
-    private static final Logger LOG = LoggingManager.getLoggerForClass();
+    private static final Logger LOG = LoggerFactory.getLogger(CSSParseExceptionCallback.class);
     private static final boolean IGNORE_UNRECOVERABLE_PARSING_ERROR = JMeterUtils
             .getPropDefault(
                     "httpsampler.ignore_failed_embedded_resource", false); //$NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/CssParser.java
Patch:
@@ -28,8 +28,8 @@
 import org.apache.commons.lang3.tuple.ImmutableTriple;
 import org.apache.commons.lang3.tuple.Triple;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 import com.github.benmanes.caffeine.cache.Caffeine;
 import com.github.benmanes.caffeine.cache.LoadingCache;
@@ -41,7 +41,7 @@
  */
 public class CssParser implements LinkExtractorParser {
     private static final URLCollection EMPTY_URL_COLLECTION = new URLCollection(Collections.emptyList());
-    private static final Logger LOG = LoggingManager.getLoggerForClass();
+    private static final Logger LOG = LoggerFactory.getLogger(CssParser.class);
 
     /**
      *

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/CssParserCacheLoader.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.Triple;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 import com.github.benmanes.caffeine.cache.CacheLoader;
 import com.helger.css.ECSSVersion;
@@ -45,7 +45,7 @@
 public class CssParserCacheLoader implements
         CacheLoader<Triple<String, URL, Charset>, URLCollection> {
 
-    private static final Logger LOG = LoggingManager.getLoggerForClass();
+    private static final Logger LOG = LoggerFactory.getLogger(CssParserCacheLoader.class);
     private static final boolean IGNORE_ALL_CSS_ERRORS = JMeterUtils
             .getPropDefault("css.parser.ignore_all_css_errors", true);
 

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -27,16 +27,16 @@
 import java.util.regex.Pattern;
 
 import org.apache.commons.lang3.StringUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 /**
  * {@link HTMLParser} subclasses can parse HTML content to obtain URLs.
  *
  */
 public abstract class HTMLParser extends BaseParser {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(HTMLParser.class);
 
     protected static final String ATT_BACKGROUND    = "background";// $NON-NLS-1$
     protected static final String ATT_CODE          = "code";// $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParsingUtils.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.jmeter.protocol.http.util.ConversionUtils;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 import org.apache.oro.text.PatternCacheLRU;
 import org.apache.oro.text.regex.MatchResult;
 import org.apache.oro.text.regex.Pattern;
@@ -51,7 +51,7 @@
 // For Junit tests @see TestHtmlParsingUtils
 
 public final class HtmlParsingUtils {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(HtmlParsingUtils.class);
 
     /**
      * Private constructor to prevent instantiation.

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/JTidyHTMLParser.java
Patch:
@@ -26,8 +26,8 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.protocol.http.util.ConversionUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
@@ -40,7 +40,7 @@
  *
  */
 class JTidyHTMLParser extends HTMLParser {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(JTidyHTMLParser.class);
 
     protected JTidyHTMLParser() {
         super();

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/JsoupBasedHtmlParser.java
Patch:
@@ -24,8 +24,6 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.protocol.http.util.ConversionUtils;
-//import org.apache.jorphan.logging.LoggingManager;
-//import org.apache.log.Logger;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
@@ -39,7 +37,6 @@
  * TODO Factor out common code between {@link LagartoBasedHtmlParser} and this one (adapter pattern)
  */
 public class JsoupBasedHtmlParser extends HTMLParser {
-//    private static final Logger log = LoggingManager.getLoggerForClass();
 
     /*
      * A dummy class to pass the pointer of URL.

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/URLCollection.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.commons.lang3.Validate;
 import org.apache.jmeter.protocol.http.util.ConversionUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 /**
  * Collection class designed for handling URLs
@@ -40,7 +40,7 @@
  *
  */
 public class URLCollection implements Iterable<URL> {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(URLCollection.class);
     private final Collection<URLString> coll;
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java
Patch:
@@ -28,9 +28,9 @@
 import java.util.Map;
 
 import org.apache.jmeter.gui.Stoppable;
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 
 /**
  * Web daemon thread. Creates main socket on port 8080 and listens on it
@@ -40,7 +40,7 @@
  */
 public class Daemon extends Thread implements Stoppable {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(Daemon.class);
 
     /**
      * The time (in milliseconds) to wait when accepting a client connection.

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -41,8 +41,8 @@
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.testelement.TestElement;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 import org.xml.sax.SAXParseException;
@@ -53,7 +53,7 @@
  * Default implementation that handles classical HTTP textual + Multipart requests
  */
 public class DefaultSamplerCreator extends AbstractSamplerCreator {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(DefaultSamplerCreator.class);
  
     /**
      * 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/FormCharSetFinder.java
Patch:
@@ -22,9 +22,9 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.protocol.http.parser.HTMLParseException;
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
@@ -35,7 +35,7 @@
  */
 // made public see Bug 49976
 public class FormCharSetFinder {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(FormCharSetFinder.class);
 
     public FormCharSetFinder() {
         super();

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -39,8 +39,8 @@
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 //For unit tests, @see TestHttpRequestHdr
 
@@ -49,7 +49,7 @@
  *
  */
 public class HttpRequestHdr {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(HttpRequestHdr.class);
 
     private static final String HTTP = "http"; // $NON-NLS-1$
     private static final String HTTPS = "https"; // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -51,10 +51,10 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JMeterException;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 
 /**
  * Thread to handle one client request. Gets the request from the client and
@@ -64,7 +64,7 @@
  *
  */
 public class Proxy extends Thread {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(Proxy.class);
 
     private static final byte[] CRLF_BYTES = { 0x0d, 0x0a };
     private static final String CRLF_STRING = "\r\n";

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -95,9 +95,9 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.visualizers.Visualizer;
 import org.apache.jorphan.exec.KeyToolUtils;
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 import org.apache.oro.text.MalformedCachePatternException;
 import org.apache.oro.text.regex.Pattern;
 import org.apache.oro.text.regex.Perl5Compiler;
@@ -109,7 +109,7 @@
  */
 public class ProxyControl extends GenericController {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(ProxyControl.class);
 
     private static final long serialVersionUID = 240L;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/SamplerCreatorFactory.java
Patch:
@@ -25,15 +25,15 @@
 import java.util.Map;
 
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.reflect.ClassFinder;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 
 /**
  * {@link SamplerCreator} factory
  */
 public class SamplerCreatorFactory {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(SamplerCreatorFactory.class);
 
     private static final SamplerCreator DEFAULT_SAMPLER_CREATOR = new DefaultSamplerCreator();
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -77,12 +77,12 @@
 import org.apache.jorphan.exec.KeyToolUtils;
 import org.apache.jorphan.gui.GuiUtils;
 import org.apache.jorphan.gui.JLabeledTextField;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 public class ProxyControlGui extends LogicControllerGui implements JMeterGUIComponent, ActionListener, ItemListener,
         KeyListener, UnsharedComponent {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(ProxyControlGui.class);
 
     private static final long serialVersionUID = 232L;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java
Patch:
@@ -54,17 +54,17 @@
 import org.apache.jorphan.gui.GuiUtils;
 import org.apache.jorphan.gui.ObjectTableModel;
 import org.apache.jorphan.gui.RendererUtils;
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.reflect.Functor;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 
 /**
  * Specializer panel to view a HTTP request parsed
  *
  */
 public class RequestViewHTTP implements RequestView {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(RequestViewHTTP.class);
 
     private static final String KEY_LABEL = "view_results_table_request_tab_http"; //$NON-NLS-1$
     

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HC3CookieHandler.java
Patch:
@@ -27,16 +27,16 @@
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.JMeterProperty;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 /**
  * HTTPClient 3.1 implementation
  * @deprecated since 3.0, will be removed in next version
  */
 @Deprecated
 public class HC3CookieHandler implements CookieHandler {
-   private static final Logger log = LoggingManager.getLoggerForClass();
+   private static final Logger log = LoggerFactory.getLogger(HC3CookieHandler.class);
 
    static final String DEFAULT_POLICY_NAME = "compatibility";
    private static final String[] AVAILABLE_POLICIES = new String[] { 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
Patch:
@@ -48,11 +48,11 @@
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.JMeterProperty;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 public class HC4CookieHandler implements CookieHandler {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(HC4CookieHandler.class);
 
     // Needed by CookiePanel
     public static final String DEFAULT_POLICY_NAME = CookieSpecs.STANDARD; // NOSONAR 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
Patch:
@@ -32,9 +32,9 @@
 
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 import org.apache.oro.text.regex.MatchResult;
 import org.apache.oro.text.regex.Pattern;
 import org.apache.oro.text.regex.PatternMatcherInput;
@@ -57,7 +57,7 @@
  * v - verbose, i.e. print some details to stdout
  */
 public class HttpMirrorThread implements Runnable {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(HttpMirrorThread.class);
 
     private static final Charset ISO_8859_1 = StandardCharsets.ISO_8859_1;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/KerberosManager.java
Patch:
@@ -36,8 +36,8 @@
 import javax.security.auth.login.LoginException;
 
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 /**
  * Takes in charge Kerberos auth mechanism
@@ -47,7 +47,7 @@ public class KerberosManager implements Serializable {
 
     private static final long serialVersionUID = 2L;
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(KerberosManager.class);
 
     private static final String JAAS_APPLICATION = JMeterUtils.getPropDefault("kerberos_jaas_application", "JMeter"); //$NON-NLS-1$ $NON-NLS-2$
     private final ConcurrentMap<String, Future<Subject>> subjects = new ConcurrentHashMap<>();

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -34,8 +34,8 @@
 
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
 import org.apache.jmeter.testelement.TestElement;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 // For JUnit tests, @see TestTCLogParser
 
@@ -75,7 +75,7 @@
  */
 
 public class TCLogParser implements LogParser {
-    protected static final Logger log = LoggingManager.getLoggerForClass();
+    protected static final Logger log = LoggerFactory.getLogger(TCLogParser.class);
 
     /*
      * TODO should these fields be public?

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSamplerBeanInfo.java
Patch:
@@ -31,12 +31,12 @@
 import org.apache.jmeter.testbeans.BeanInfoSupport;
 import org.apache.jmeter.testbeans.gui.FileEditor;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.reflect.ClassFinder;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 
 public class AccessLogSamplerBeanInfo extends BeanInfoSupport {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(AccessLogSamplerBeanInfo.class);
 
     public AccessLogSamplerBeanInfo() {
         super(AccessLogSampler.class);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -82,9 +82,9 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.util.JsseSSLManager;
 import org.apache.jmeter.util.SSLManager;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * HTTP sampler using Apache (Jakarta) Commons HttpClient 3.1.
@@ -93,7 +93,7 @@
 @Deprecated
 public class HTTPHC3Impl extends HTTPHCAbstractImpl {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(HTTPHC3Impl.class);
 
     /** retry count to be used (default 1); 0 = disable retries */
     private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient3.retrycount", 0);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -137,8 +137,8 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.util.JsseSSLManager;
 import org.apache.jmeter.util.SSLManager;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * HTTP Sampler using Apache HttpClient 4.x.
@@ -148,7 +148,7 @@ public class HTTPHC4Impl extends HTTPHCAbstractImpl {
 
     private static final int MAX_BODY_RETAIN_SIZE = JMeterUtils.getPropDefault("httpclient4.max_body_retain_size", 32 * 1024);
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(HTTPHC4Impl.class);
 
     /** retry count to be used (default 0); 0 = disable retries */
     private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient4.retrycount", 0);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java
Patch:
@@ -29,9 +29,9 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.JMeter;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Common parent class for HttpClient implementations.
@@ -41,7 +41,7 @@
  */
 public abstract class HTTPHCAbstractImpl extends HTTPAbstractImpl {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(HTTPHCAbstractImpl.class);
 
     protected static final String PROXY_HOST = System.getProperty("http.proxyHost","");
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
Patch:
@@ -43,8 +43,8 @@
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.util.SSLManager;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * A sampler which understands all the parts necessary to read statistics about
@@ -55,7 +55,7 @@ public class HTTPJavaImpl extends HTTPAbstractImpl {
     private static final boolean OBEY_CONTENT_LENGTH =
         JMeterUtils.getPropDefault("httpsampler.obey_contentlength", false); // $NON-NLS-1$
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(HTTPJavaImpl.class);
 
     private static final int MAX_CONN_RETRIES =
         JMeterUtils.getPropDefault("http.java.sampler.retries" // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HttpClientDefaultParameters.java
Patch:
@@ -27,9 +27,9 @@
 import java.util.Properties;
 
 import org.apache.jmeter.NewDriver;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /*
  * Utility class to set up default HttpClient parameters from a file.
@@ -39,7 +39,7 @@
  */
 public class HttpClientDefaultParameters {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(HttpClientDefaultParameters.class);
 
     // Non-instantiable
     private HttpClientDefaultParameters(){

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/LazySchemeSocketFactory.java
Patch:
@@ -30,15 +30,15 @@
 import org.apache.http.conn.ssl.SSLSocketFactory;
 import org.apache.http.params.HttpParams;
 import org.apache.jmeter.protocol.http.util.HC4TrustAllSSLSocketFactory;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Lazy SchemeSocketFactory that lazily initializes HTTPS Socket Factory
  * @since 3.0
  */
 public final class LazySchemeSocketFactory implements SchemeLayeredSocketFactory{
-    private static final Logger LOG = LoggingManager.getLoggerForClass();
+    private static final Logger LOG = LoggerFactory.getLogger(LazySchemeSocketFactory.class);
 
     private static class AdapteeHolder { // IODH idiom
         private static final SchemeLayeredSocketFactory ADAPTEE = checkAndInit();  

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/ResourcesDownloader.java
Patch:
@@ -30,8 +30,8 @@
 
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Manages the parallel http resources download.<br>
@@ -66,7 +66,7 @@
  */
 public class ResourcesDownloader {
 
-    private static final Logger LOG = LoggingManager.getLoggerForClass();
+    private static final Logger LOG = LoggerFactory.getLogger(ResourcesDownloader.class);
     
     /** this is the maximum time that excess idle threads will wait for new tasks before terminating */
     private static final long THREAD_KEEP_ALIVE_TIME = JMeterUtils.getPropDefault("httpsampler.parallel_download_thread_keepalive_inseconds", 60L);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
Patch:
@@ -40,17 +40,17 @@
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.samplers.Interruptible;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Commons HTTPClient based soap sampler
  * @deprecated since 3.0, will be removed in next version
  */
 @Deprecated
 public class SoapSampler extends HTTPSampler2 implements Interruptible { // Implemented by parent class
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(SoapSampler.class);
 
     private static final long serialVersionUID = 240L;
 

File: test/src/org/apache/jmeter/functions/PackageTest.java
Patch:
@@ -31,8 +31,8 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.BeanShellInterpreter;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import junit.extensions.ActiveTestSuite;
 import junit.framework.Test;
@@ -43,7 +43,7 @@
  */
 public class PackageTest extends JMeterTestCaseJUnit3 {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(PackageTest.class);
 
     public PackageTest(String arg0) {
         super(arg0);

File: src/jorphan/org/apache/jorphan/collections/Data.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 
 /**
  * Use this class to store database-like data. This class uses rows and columns
@@ -39,7 +39,7 @@
  * 
  */
 public class Data implements Serializable {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(Data.class);
 
     private static final long serialVersionUID = 240L;
 

File: src/jorphan/org/apache/jorphan/exec/KeyToolUtils.java
Patch:
@@ -30,14 +30,14 @@
 
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang3.SystemUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Utilities for working with Java keytool
  */
 public class KeyToolUtils {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(KeyToolUtils.class);
 
     // The DNAME which is used if none is provided
     private static final String DEFAULT_DNAME = "cn=JMeter Proxy (DO NOT TRUST)";  // $NON-NLS-1$

File: src/jorphan/org/apache/jorphan/exec/StreamCopier.java
Patch:
@@ -23,16 +23,16 @@
 import java.io.OutputStream;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Thread that copies a stream in the background; closes both input and output streams.
  * @since 2.8
  */
 class StreamCopier extends Thread {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(StreamCopier.class);
 
     private final InputStream is;
     private final OutputStream os;

File: src/jorphan/org/apache/jorphan/gui/ObjectTableModel.java
Patch:
@@ -25,16 +25,16 @@
 
 import javax.swing.table.DefaultTableModel;
 
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.reflect.Functor;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 
 /**
  * The ObjectTableModel is a TableModel whose rows are objects;
  * columns are defined as Functors on the object.
  */
 public class ObjectTableModel extends DefaultTableModel {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(ObjectTableModel.class);
 
     private static final long serialVersionUID = 240L;
 

File: src/jorphan/org/apache/jorphan/reflect/ClassFinder.java
Patch:
@@ -36,16 +36,16 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 
 /**
  * This class finds classes that extend one of a set of parent classes
  *
  */
 public final class ClassFinder {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(ClassFinder.class);
 
     private static final String DOT_JAR = ".jar"; // $NON-NLS-1$
     private static final String DOT_CLASS = ".class"; // $NON-NLS-1$

File: src/jorphan/org/apache/jorphan/reflect/Functor.java
Patch:
@@ -21,9 +21,9 @@
 import java.lang.reflect.Method;
 import java.util.Arrays;
 
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JMeterError;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Implements function call-backs.
@@ -64,7 +64,7 @@
  * </pre>
  */
 public class Functor {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(Functor.class);
 
     /*
      * If non-null, then any object provided to invoke() is ignored.

File: src/core/org/apache/jmeter/util/BeanShellInterpreter.java
Patch:
@@ -22,10 +22,10 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JMeterError;
 import org.apache.jorphan.util.JMeterException;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * BeanShell setup function - encapsulates all the access to the BeanShell
@@ -39,7 +39,7 @@
  */
 
 public class BeanShellInterpreter {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(BeanShellInterpreter.class);
 
     private static final Method bshGet;
 

File: src/core/org/apache/jmeter/util/BeanShellTestElement.java
Patch:
@@ -26,15 +26,15 @@
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JMeterException;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public abstract class BeanShellTestElement extends AbstractTestElement
     implements Serializable, Cloneable, ThreadListener, TestStateListener
 {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(BeanShellTestElement.class);
 
     private static final long serialVersionUID = 4;
 

File: src/functions/org/apache/jmeter/functions/BeanShell.java
Patch:
@@ -30,16 +30,16 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.BeanShellInterpreter;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * A function which understands BeanShell
  * @since 1.X
  */
 public class BeanShell extends AbstractFunction {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(BeanShell.class);
 
     private static final List<String> desc = new LinkedList<>();
 

File: src/functions/org/apache/jmeter/functions/CSVRead.java
Patch:
@@ -26,8 +26,8 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * The function represented by this class allows data to be read from CSV files.
@@ -51,7 +51,7 @@
  * @since 1.9
  */
 public class CSVRead extends AbstractFunction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(CSVRead.class);
 
     private static final String KEY = "__CSVRead"; // Function name //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/CharFunction.java
Patch:
@@ -26,16 +26,16 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Function to generate chars from a list of decimal or hex values
  * @since 2.3.3
  */
 public class CharFunction extends AbstractFunction {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(CharFunction.class);
 
     private static final List<String> desc = new LinkedList<>();
 

File: src/functions/org/apache/jmeter/functions/EscapeOroRegexpChars.java
Patch:
@@ -27,16 +27,16 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
 import org.apache.oro.text.regex.Perl5Compiler;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Escape ORO meta characters
  * @since 2.9
  */
 public class EscapeOroRegexpChars extends AbstractFunction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(EscapeOroRegexpChars.class);
 
     private static final List<String> desc = new LinkedList<>();
 

File: src/functions/org/apache/jmeter/functions/EvalVarFunction.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Function to evaluate a string which may contain variable or function references.
@@ -40,7 +40,7 @@
  */
 public class EvalVarFunction extends AbstractFunction {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(EvalVarFunction.class);
 
     private static final List<String> desc = new LinkedList<>();
 

File: src/functions/org/apache/jmeter/functions/FileRowColContainer.java
Patch:
@@ -27,8 +27,8 @@
 import java.util.StringTokenizer;
 
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * File data container for CSV (and similar delimited) files Data is accessible
@@ -37,7 +37,7 @@
  */
 public class FileRowColContainer {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(FileRowColContainer.class);
 
     private final List<List<String>> fileData; // Lines in the file, split into columns
 

File: src/functions/org/apache/jmeter/functions/FileToString.java
Patch:
@@ -30,9 +30,9 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JMeterStopThreadException;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * FileToString Function to read a complete file into a String.
@@ -49,7 +49,7 @@
  * @since 2.4
  */
 public class FileToString extends AbstractFunction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(FileToString.class);
 
     private static final List<String> desc = new LinkedList<>();
 

File: src/functions/org/apache/jmeter/functions/FileWrapper.java
Patch:
@@ -24,8 +24,8 @@
 import java.util.Iterator;
 import java.util.Map;
 
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * This class wraps the FileRowColContainer for use across multiple threads.
@@ -37,7 +37,7 @@
  */
 public final class FileWrapper {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(FileWrapper.class);
 
     private static final int NO_LINE = -1;
 

File: src/functions/org/apache/jmeter/functions/Groovy.java
Patch:
@@ -38,16 +38,16 @@
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.util.JSR223TestElement;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 /**
  * __groovy function 
  * Provides a Groovy interpreter
  * @since 3.1
  */
 public class Groovy extends AbstractFunction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(Groovy.class);
 
     private static final String GROOVY_ENGINE_NAME = "groovy";
     

File: src/functions/org/apache/jmeter/functions/JavaScript.java
Patch:
@@ -35,8 +35,8 @@
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 import org.mozilla.javascript.Context;
 import org.mozilla.javascript.RhinoException;
 import org.mozilla.javascript.Scriptable;
@@ -71,7 +71,7 @@ private static ScriptEngineManager getInstance() {
 
     private static final String KEY = "__javaScript"; //$NON-NLS-1$
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(JavaScript.class);
 
     static {
         desc.add(JMeterUtils.getResString("javascript_expression"));//$NON-NLS-1$

File: src/functions/org/apache/jmeter/functions/Jexl2Function.java
Patch:
@@ -32,8 +32,8 @@
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 /**
  * A function which understands Commons JEXL2
@@ -42,7 +42,7 @@
 // For unit tests, see TestJexlFunction
 public class Jexl2Function extends AbstractFunction implements ThreadListener {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(Jexl2Function.class);
 
     private static final String KEY = "__jexl2"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/Jexl3Function.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * A function which understands Commons JEXL3
@@ -44,7 +44,7 @@
 // For unit tests, see TestJexlFunction
 public class Jexl3Function extends AbstractFunction implements ThreadListener {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(Jexl3Function.class);
 
     private static final String KEY = "__jexl3"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/RandomFromMultipleVars.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 /**
  * Provides a RandomFromMultiResult function which returns a random element from a multi valued extracted variable.
@@ -44,7 +44,7 @@
  * @since 3.1
  */
 public class RandomFromMultipleVars extends AbstractFunction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(RandomFromMultipleVars.class);
 
     private static final List<String> desc = new LinkedList<>();
     private static final String KEY = "__RandomFromMultipleVars"; //$NON-NLS-1$

File: src/functions/org/apache/jmeter/functions/RandomString.java
Patch:
@@ -29,16 +29,16 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Provides a RandomString function which returns a random String of length (first argument) 
  * using characters (second argument)
  * @since 2.6
  */
 public class RandomString extends AbstractFunction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(RandomString.class);
 
     private static final List<String> desc = new LinkedList<>();
 

File: src/functions/org/apache/jmeter/functions/RegexFunction.java
Patch:
@@ -30,8 +30,8 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 import org.apache.oro.text.MalformedCachePatternException;
 import org.apache.oro.text.regex.MatchResult;
 import org.apache.oro.text.regex.Pattern;
@@ -47,7 +47,7 @@
 // @see TestRegexFunction for unit tests
 
 public class RegexFunction extends AbstractFunction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(RegexFunction.class);
 
     public static final String ALL = "ALL"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/SplitFunction.java
Patch:
@@ -28,9 +28,9 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 
 // @see org.apache.jmeter.functions.PackageTest for unit tests
 
@@ -55,7 +55,7 @@
  * @since 2.0.2
  */
 public class SplitFunction extends AbstractFunction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(SplitFunction.class);
 
     private static final List<String> desc = new LinkedList<>();
 

File: src/functions/org/apache/jmeter/functions/StringFromFile.java
Patch:
@@ -32,9 +32,9 @@
 import org.apache.jmeter.testelement.TestStateListener;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JMeterStopThreadException;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 
 /**
  * StringFromFile Function to read a String from a text file.
@@ -64,7 +64,7 @@
  * @since 1.9
  */
 public class StringFromFile extends AbstractFunction implements TestStateListener {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(StringFromFile.class);
 
     // Only modified by static block so no need to synchronize subsequent read-only access
     private static final List<String> desc = new LinkedList<>();

File: src/functions/org/apache/jmeter/functions/XPath.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
 
 // @see org.apache.jmeter.functions.PackageTest for unit tests
 
@@ -46,7 +46,7 @@
  * @since 2.0.3
  */
 public class XPath extends AbstractFunction {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(XPath.class);
 
     // static {
     // LoggingManager.setPriority("DEBUG","jmeter");

File: src/functions/org/apache/jmeter/functions/XPathFileContainer.java
Patch:
@@ -30,9 +30,9 @@
 import javax.xml.transform.TransformerException;
 
 import org.apache.jmeter.util.XPathUtil;
-import org.apache.jorphan.logging.LoggingManager;
+import org.slf4j.LoggerFactory;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
 import org.w3c.dom.NodeList;
 import org.xml.sax.SAXException;
 
@@ -44,7 +44,7 @@
  */
 public class XPathFileContainer {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(XPathFileContainer.class);
 
     private final NodeList nodeList;
 

File: src/functions/org/apache/jmeter/functions/XPathWrapper.java
Patch:
@@ -25,8 +25,8 @@
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.transform.TransformerException;
 
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.xml.sax.SAXException;
 
 /**
@@ -37,7 +37,7 @@
  */
 final class XPathWrapper {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(XPathWrapper.class);
 
     /*
      * This Map serves two purposes:

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -336,7 +336,7 @@ private void startGui(String testFile) {
         System.out.println("================================================================================");//NOSONAR
         System.out.println("Don't use GUI mode for load testing, only for Test creation and Test debugging !");//NOSONAR
         System.out.println("For load testing, use NON GUI Mode:");//NOSONAR
-        System.out.println("   jmeter -n -t [jmx file] -l [results file] -e -o [Path to output folder])");//NOSONAR
+        System.out.println("   jmeter -n -t [jmx file] -l [results file] -e -o [Path to output folder]");//NOSONAR
         System.out.println("& adapt Java Heap to your test requirements:");//NOSONAR
         System.out.println("   Modify HEAP=\"-Xms512m -Xmx512m\" in the JMeter batch file");//NOSONAR
         System.out.println("================================================================================");//NOSONAR

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -362,8 +362,9 @@ protected HTTPSampleResult sample(URL url, String method,
                 // Some servers fail if Content-Length is equal to 0
                 // so to avoid this we use HttpGet when there is no body (Content-Length will not be set)
                 // otherwise we use HttpGetWithEntity
-                if ( (!hasArguments() && getSendFileAsPostBody()) 
-                        || getSendParameterValuesAsPostBody() ) {
+                if ( !areFollowingRedirect 
+                        && ((!hasArguments() && getSendFileAsPostBody()) 
+                        || getSendParameterValuesAsPostBody()) ) {
                     httpRequest = new HttpGetWithEntity(uri);
                 } else {
                     httpRequest = new HttpGet(uri);

File: src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/config/MongoSourceElement.java
Patch:
@@ -27,8 +27,8 @@
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.testelement.TestStateListener;
 import org.apache.jmeter.threads.JMeterContextService;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.mongodb.MongoClientOptions;
 import com.mongodb.WriteConcern;
@@ -44,7 +44,7 @@ public class MongoSourceElement
      */
     private static final long serialVersionUID = 2100L;
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(MongoSourceElement.class);
 
     private String connection;
     private String source;

File: src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/config/MongoSourceElementBeanInfo.java
Patch:
@@ -21,15 +21,15 @@
 import java.beans.PropertyDescriptor;
 
 import org.apache.jmeter.testbeans.BeanInfoSupport;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
   */
 public class MongoSourceElementBeanInfo
         extends BeanInfoSupport {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(MongoSourceElementBeanInfo.class);
 
     public MongoSourceElementBeanInfo() {
         super(MongoSourceElement.class);

File: src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/mongo/MongoDB.java
Patch:
@@ -20,8 +20,8 @@
 
 import java.util.List;
 
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.mongodb.DB;
 import com.mongodb.Mongo;
@@ -33,7 +33,7 @@
  */
 public class MongoDB {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(MongoDB.class);
 
     // Mongo is Thread Safe
     private Mongo mongo = null;

File: src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/sampler/MongoScriptSampler.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testbeans.TestBean;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.mongodb.DB;
 
@@ -38,7 +38,7 @@ public class MongoScriptSampler
 
     private static final long serialVersionUID = -7789012234636439896L;
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(MongoScriptSampler.class);
 
     public final static String SOURCE = "MongoScriptSampler.source"; //$NON-NLS-1$
 

File: src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/sampler/MongoScriptSamplerBeanInfo.java
Patch:
@@ -22,15 +22,15 @@
 
 import org.apache.jmeter.testbeans.BeanInfoSupport;
 import org.apache.jmeter.testbeans.gui.TypeEditor;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
   */
 public class MongoScriptSamplerBeanInfo
     extends BeanInfoSupport {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(MongoScriptSamplerBeanInfo.class);
 
     public MongoScriptSamplerBeanInfo() {
         super(MongoScriptSampler.class);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPropertiesPanel.java
Patch:
@@ -35,7 +35,6 @@
 import javax.swing.table.TableColumn;
 
 import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
-import org.apache.jmeter.protocol.jms.Utils;
 import org.apache.jmeter.protocol.jms.sampler.JMSProperties;
 import org.apache.jmeter.protocol.jms.sampler.JMSProperty;
 import org.apache.jmeter.testelement.TestElement;

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/BaseJMSSampler.java
Patch:
@@ -27,7 +27,6 @@
 import javax.jms.Message;
 
 import org.apache.commons.lang3.StringUtils;
-import org.apache.jmeter.protocol.jms.Utils;
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/BinaryTCPClientImpl.java
Patch:
@@ -31,9 +31,9 @@
 
 import org.apache.commons.io.IOUtils;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * TCPClient implementation.
@@ -45,7 +45,7 @@
  * Input data is assumed to be in hex, and is converted to binary
  */
 public class BinaryTCPClientImpl extends AbstractTCPClient {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(BinaryTCPClientImpl.class);
 
     private static final int EOM_INT = JMeterUtils.getPropDefault("tcp.BinaryTCPClient.eomByte", 1000); // $NON_NLS-1$
 

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java
Patch:
@@ -33,16 +33,16 @@
 import java.io.OutputStream;
 
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Implements binary length-prefixed binary data.
  * This is used in ISO8583 for example.
  */
 public class LengthPrefixedBinaryTCPClientImpl extends TCPClientDecorator {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(LengthPrefixedBinaryTCPClientImpl.class);
 
     private final int lengthPrefixLen = JMeterUtils.getPropDefault("tcp.binarylength.prefix.length", 2); // $NON-NLS-1$
 

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPClientImpl.java
Patch:
@@ -34,8 +34,8 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Sample TCPClient implementation.
@@ -45,7 +45,7 @@
  * The EOL byte is defined by the property "tcp.eolByte".
  */
 public class TCPClientImpl extends AbstractTCPClient {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(TCPClientImpl.class);
 
     private static final int EOL_INT = JMeterUtils.getPropDefault("tcp.eolByte", 1000); // $NON-NLS-1$
     private static final String CHARSET = JMeterUtils.getPropDefault("tcp.charset", Charset.defaultCharset().name()); // $NON-NLS-1$

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -46,8 +46,8 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.ThreadListener;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * A sampler which understands Tcp requests.
@@ -56,7 +56,7 @@
 public class TCPSampler extends AbstractSampler implements ThreadListener, Interruptible {
     private static final long serialVersionUID = 280L;
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(TCPSampler.class);
 
     private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(

File: src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java
Patch:
@@ -40,8 +40,8 @@
 import org.apache.jmeter.testelement.property.TestElementProperty;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.exec.SystemCommand;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * A sampler for executing a System function. 
@@ -78,7 +78,7 @@ public class SystemSampler extends AbstractSampler {
     /**
      * Logging
      */
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(SystemSampler.class);
 
     private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList("org.apache.jmeter.config.gui.SimpleConfigGui"));

File: src/protocol/native/org/apache/jmeter/protocol/system/gui/SystemSamplerGui.java
Patch:
@@ -40,15 +40,15 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.JLabeledTextField;
 import org.apache.jorphan.gui.ObjectTableModel;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.reflect.Functor;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * GUI for {@link SystemSampler}
  */
 public class SystemSamplerGui extends AbstractSamplerGui implements ItemListener {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(SystemSamplerGui.class);
 
     /**
      * 

File: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
Patch:
@@ -54,14 +54,14 @@
 import org.apache.jmeter.testelement.property.BooleanProperty;
 import org.apache.jmeter.testelement.property.IntegerProperty;
 import org.apache.jmeter.testelement.property.StringProperty;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Sampler that can read from POP3 and IMAP mail servers
  */
 public class MailReaderSampler extends AbstractSampler implements Interruptible {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(MailReaderSampler.class);
 
     private static final long serialVersionUID = 240L;
 

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
Patch:
@@ -51,8 +51,8 @@
 import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.CollectionProperty;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Sampler-Class for JMeter - builds, starts and interprets the results of the
@@ -68,7 +68,7 @@ public class SmtpSampler extends AbstractSampler {
     private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList("org.apache.jmeter.config.gui.SimpleConfigGui"));
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(SmtpSampler.class);
 
     //+JMX file attribute names - do not change any values!
     public static final String SERVER               = "SMTPSampler.server"; // $NON-NLS-1$

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
Patch:
@@ -55,17 +55,17 @@
 import org.apache.jmeter.testelement.property.StringProperty;
 import org.apache.jmeter.testelement.property.TestElementProperty;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.XMLBuffer;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /*******************************************************************************
  * Ldap Sampler class is main class for the LDAP test. This will control all the
  * test available in the LDAP Test.
  ******************************************************************************/
 public class LDAPExtSampler extends AbstractSampler implements TestStateListener {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(LDAPExtSampler.class);
 
     private static final long serialVersionUID = 240L;
 

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPSampler.java
Patch:
@@ -42,16 +42,16 @@
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.testelement.property.StringProperty;
 import org.apache.jmeter.testelement.property.TestElementProperty;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Ldap Sampler class is main class for the LDAP test. This will control all the
  * test available in the LDAP Test.
  *
  */
 public class LDAPSampler extends AbstractSampler {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(LDAPSampler.class);
 
     private static final long serialVersionUID = 240L;
 

File: src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java
Patch:
@@ -45,8 +45,8 @@
 import org.apache.jmeter.samplers.Interruptible;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.TestElement;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * A sampler which understands FTP file requests.
@@ -56,7 +56,7 @@ public class FTPSampler extends AbstractSampler implements Interruptible {
 
     private static final long serialVersionUID = 240L;
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(FTPSampler.class);
 
     private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java
Patch:
@@ -26,8 +26,8 @@
 import javax.naming.NamingException;
 
 import org.apache.commons.lang3.StringUtils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * InitialContextFactory is responsible for getting an instance of the initial context.
@@ -36,7 +36,7 @@ public class InitialContextFactory {
 
     private static final ConcurrentHashMap<String, Context> MAP = new ConcurrentHashMap<>();
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(InitialContextFactory.class);
 
     /**
      * Look up the context from the local cache, creating it if necessary.

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/Publisher.java
Patch:
@@ -37,12 +37,12 @@
 import javax.naming.NamingException;
 
 import org.apache.jmeter.protocol.jms.Utils;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class Publisher implements Closeable {
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(Publisher.class);
 
     private final Connection connection;
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
Patch:
@@ -49,9 +49,9 @@
 import org.apache.jmeter.testelement.property.TestElementProperty;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.io.TextFile;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.thoughtworks.xstream.XStream;
 
@@ -62,7 +62,7 @@ public class PublisherSampler extends BaseJMSSampler implements TestStateListene
 
     private static final long serialVersionUID = 233L;
 
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(PublisherSampler.class);
 
     //++ These are JMX file names and must not be changed
     private static final String INPUT_FILE = "jms.input_file"; //$NON-NLS-1$

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElementBeanInfo.java
Patch:
@@ -30,11 +30,11 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.testbeans.BeanInfoSupport;
 import org.apache.jmeter.testbeans.gui.TypeEditor;
-import org.apache.jorphan.logging.LoggingManager;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class DataSourceElementBeanInfo extends BeanInfoSupport {
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(DataSourceElementBeanInfo.class);
     private static Map<String,Integer> TRANSACTION_ISOLATION_MAP = new HashMap<>(5);
     static {
         // Will use default isolation

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -336,7 +336,7 @@ private void startGui(String testFile) {
         System.out.println("================================================================================");//NOSONAR
         System.out.println("Don't use GUI mode for load testing, only for Test creation and Test debugging !");//NOSONAR
         System.out.println("For load testing, use NON GUI Mode:");//NOSONAR
-	System.out.println("   jmeter -n -t [jmx file] -l [results file] -e -o [Path to output folder])");//NOSONAR
+        System.out.println("   jmeter -n -t [jmx file] -l [results file] -e -o [Path to output folder])");//NOSONAR
         System.out.println("& adapt Java Heap to your test requirements:");//NOSONAR
         System.out.println("   Modify HEAP=\"-Xms512m -Xmx512m\" in the JMeter batch file");//NOSONAR
         System.out.println("================================================================================");//NOSONAR

File: src/protocol/java/org/apache/jmeter/protocol/java/config/JavaConfig.java
Patch:
@@ -31,7 +31,6 @@
  * {@link org.apache.jmeter.protocol.java.sampler.JavaSamplerClient} instance to
  * perform performance test samples.
  *
- * @version $Revision$
  */
 public class JavaConfig extends ConfigTestElement implements Serializable {
 

File: src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java
Patch:
@@ -48,9 +48,9 @@
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.JLabeledChoice;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.reflect.ClassFinder;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * The <code>JavaConfigGui</code> class provides the user interface for the
@@ -61,7 +61,7 @@ public class JavaConfigGui extends AbstractConfigGui implements ChangeListener {
     private static final long serialVersionUID = 241L;
 
     /** Logging */
-    private static final Logger log = LoggingManager.getLoggerForClass();
+    private static final Logger log = LoggerFactory.getLogger(JavaConfigGui.class);
 
     /** A combo box allowing the user to choose a test class. */
     private JLabeledChoice classNameLabeledChoice;

File: src/core/org/apache/jmeter/gui/logging/GuiLogEventListener.java
Patch:
@@ -21,7 +21,9 @@
 
 /**
  * GUI Log Event Listener.
+ * @since 3.2
  */
+@FunctionalInterface
 public interface GuiLogEventListener extends EventListener {
 
     /**

File: src/core/org/apache/jmeter/gui/logging/GuiLogEventAppender.java
Patch:
@@ -33,6 +33,7 @@
 
 /**
  * Posts log events to a {@link GuiLogEventBus}.
+ * @since 3.2
  */
 @Plugin(name = "GuiLogEvent", category = "Core", elementType = "appender", printObject = true)
 public class GuiLogEventAppender extends AbstractAppender {

File: src/core/org/apache/jmeter/gui/logging/GuiLogEventBus.java
Patch:
@@ -23,6 +23,7 @@
 
 /**
  * GUI Log Event Bus.
+ * @since 3.2
  */
 public class GuiLogEventBus {
 
@@ -35,6 +36,7 @@ public class GuiLogEventBus {
      * Default constructor.
      */
     public GuiLogEventBus() {
+        super();
     }
 
     /**

File: src/core/org/apache/jmeter/gui/logging/LogEventObject.java
Patch:
@@ -24,6 +24,7 @@
 
 /**
  * Log event object.
+ * @since 3.2
  */
 public class LogEventObject extends EventObject {
 

File: src/core/org/apache/jmeter/NewDriver.java
Patch:
@@ -373,7 +373,8 @@ private static String replaceDateFormatInFileName(String fileName) {
             }
 
             return builder.toString();
-        } catch (Exception ignored) {
+        } catch (Exception ex) {
+            System.err.println("Error replacing date format in file name:"+fileName+", error:"+ex.getMessage()); // NOSONAR
         }
 
         return fileName;

File: src/jorphan/org/apache/log/ContextMap.java
Patch:
@@ -29,8 +29,8 @@
  * <li>hostname  -&gt;helm.realityforge.org</li>
  * <li>ipaddress -&gt;1.2.3.4</li>
  * <li>interface -&gt;127.0.0.1</li>
- * <li>caller � �-&gt;com.biz.MyCaller.method(MyCaller.java:18)</li>
- * <li>source � �-&gt;1.6.3.2:33</li>
+ * <li>caller    -&gt;com.biz.MyCaller.method(MyCaller.java:18)</li>
+ * <li>source    -&gt;1.6.3.2:33</li>
  * </ul>
  * The context is bound to a thread (and inherited by sub-threads) but
  * it can also be added to by LogTargets.

File: test/src/org/apache/jmeter/JMeterVersionTest.java
Patch:
@@ -201,7 +201,8 @@ public void testMaven() throws Exception {
         final BufferedReader maven = new BufferedReader(
                 new FileReader(getFileFromHome("res/maven/ApacheJMeter_parent.pom"))); // assume default charset is OK here
 //      <apache-bsf.version>2.4.0</apache-bsf.version>
-        final Pattern p = Pattern.compile("\\s+<([^\\.]+)\\.version>([^<]+)<.*");
+//      <log4j-1.2-api.version>2.7</log4j-1.2-api.version>
+        final Pattern p = Pattern.compile("\\s+<([^\\<\\>]+)\\.version>([^<]+)<.*");
 
         String line;
         while((line=maven.readLine()) != null){

File: test/src/org/apache/jorphan/reflect/TestFunctor.java
Patch:
@@ -25,8 +25,9 @@
 import java.util.Properties;
 
 import org.apache.jmeter.junit.JMeterTestCase;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JMeterError;
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.core.config.Configurator;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -92,7 +93,7 @@ public String getString(String s){
     
     @Before
     public void setUp(){
-        LoggingManager.setPriority("FATAL_ERROR",LoggingManager.removePrefix(Functor.class.getName()));     
+        Configurator.setAllLevels(Functor.class.getName(), Level.FATAL);
     }
 
     @Test

File: test/src/org/apache/jorphan/test/AllTests.java
Patch:
@@ -249,7 +249,7 @@ protected static void initializeLogging(String[] args) {
             Properties props = new Properties();
             InputStream inputStream = null;
             try {
-                System.out.println("Setting up logging props using file: " + args[1]);
+                System.out.println("Setting up props using file: " + args[1]);
                 inputStream = new FileInputStream(args[1]);
                 props.load(inputStream);
                 LoggingManager.initializeLogging(props);

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -33,9 +33,9 @@
 import org.apache.jmeter.assertions.AssertionResult;
 import org.apache.jmeter.gui.Searchable;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
-import org.apache.log.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 // For unit tests, @see TestSampleResult
 
@@ -49,7 +49,7 @@ public class SampleResult implements Serializable, Cloneable, Searchable {
     private static final long serialVersionUID = 241L;
 
     // Needs to be accessible from Test code
-    static final Logger log = LoggingManager.getLoggerForClass();
+    static Logger log = LoggerFactory.getLogger(SampleResult.class);
 
     /**
      * The default encoding to be used if not overridden.

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -141,21 +141,20 @@ public static Perl5Matcher getMatcher() {
      * @return the Properties from the file
      * @see #getJMeterProperties()
      * @see #loadJMeterProperties(String)
-     * @see #initLogging()
      * @see #initLocale()
      */
     public static Properties getProperties(String file) {
         loadJMeterProperties(file);
-        initLogging();
         initLocale();
         return appProperties;
     }
 
     /**
      * Initialise JMeter logging
+     * @deprecated
      */
+    @Deprecated
     public static void initLogging() {
-        LoggingManager.initializeLogging(appProperties);
     }
 
     /**

File: src/components/org/apache/jmeter/extractor/json/render/RenderAsJsonRenderer.java
Patch:
@@ -188,13 +188,14 @@ private JPanel createJSonPathExtractorPanel() {
         jsonDataField.setWrapStyleWord(true);
 
         this.jsonDataPane = GuiUtils.makeScrollPane(jsonDataField);
-        jsonDataPane.setMinimumSize(new Dimension(100, 200));
+        jsonDataPane.setPreferredSize(new Dimension(100, 200));
 
         JPanel panel = new JPanel(new BorderLayout(0, 5));
 
         JSplitPane mainSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
                 jsonDataPane, createJSonPathExtractorTasksPanel());
         mainSplit.setDividerLocation(0.6d);
+        mainSplit.setOneTouchExpandable(true);
         panel.add(mainSplit, BorderLayout.CENTER);
         return panel;
     }

File: src/components/org/apache/jmeter/visualizers/RenderAsCssJQuery.java
Patch:
@@ -172,13 +172,14 @@ private JPanel createCssJqueryPanel() {
         cssJqueryDataField.setWrapStyleWord(true);
 
         JScrollPane cssJqueryDataPane = GuiUtils.makeScrollPane(cssJqueryDataField);
-        cssJqueryDataPane.setMinimumSize(new Dimension(0, 200));
+        cssJqueryDataPane.setPreferredSize(new Dimension(0, 200));
 
         JPanel pane = new JPanel(new BorderLayout(0, 5));
 
         JSplitPane mainSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
                 cssJqueryDataPane, createCssJqueryTasksPanel());
-        mainSplit.setDividerLocation(300);
+        mainSplit.setDividerLocation(0.6d);
+        mainSplit.setOneTouchExpandable(true);
         pane.add(mainSplit, BorderLayout.CENTER);
         return pane;
     }

File: src/components/org/apache/jmeter/visualizers/RenderAsRegexp.java
Patch:
@@ -174,13 +174,14 @@ private JPanel createRegexpPanel() {
         regexpDataField.setWrapStyleWord(true);
 
         JScrollPane regexpDataPane = GuiUtils.makeScrollPane(regexpDataField);
-        regexpDataPane.setMinimumSize(new Dimension(0, 200));
+        regexpDataPane.setPreferredSize(new Dimension(0, 200));
 
         JPanel pane = new JPanel(new BorderLayout(0, 5));
 
         JSplitPane mainSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
                 regexpDataPane, createRegexpTasksPanel());
-        mainSplit.setDividerLocation(300);
+        mainSplit.setDividerLocation(0.6d);
+        mainSplit.setOneTouchExpandable(true);
         pane.add(mainSplit, BorderLayout.CENTER);
         return pane;
     }

File: src/components/org/apache/jmeter/visualizers/RenderAsXPath.java
Patch:
@@ -220,13 +220,14 @@ private JPanel createXpathExtractorPanel() {
         xmlDataField.setWrapStyleWord(true);
 
         this.xmlDataPane = GuiUtils.makeScrollPane(xmlDataField);
-        xmlDataPane.setMinimumSize(new Dimension(0, 400));
+        xmlDataPane.setPreferredSize(new Dimension(0, 200));
 
         JPanel pane = new JPanel(new BorderLayout(0, 5));
 
         JSplitPane mainSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
                 xmlDataPane, createXpathExtractorTasksPanel());
-        mainSplit.setDividerLocation(400);
+        mainSplit.setDividerLocation(0.6d);
+        mainSplit.setOneTouchExpandable(true);
         pane.add(mainSplit, BorderLayout.CENTER);
         return pane;
     }

File: src/protocol/http/org/apache/http/impl/conn/JMeterPoolingClientConnectionManager.java
Patch:
@@ -57,7 +57,7 @@
 @Deprecated
 public class JMeterPoolingClientConnectionManager implements ClientConnectionManager, ConnPoolControl<HttpRoute> {
 
-    private static final int VALIDATE_AFTER_INACTIVITY_DEFAULT = 2000;
+    private static final int VALIDATE_AFTER_INACTIVITY_DEFAULT = 1700;
 
     private final Log log = LogFactory.getLog(getClass());
     

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -156,7 +156,7 @@ public class HTTPHC4Impl extends HTTPHCAbstractImpl {
     /** Idle timeout to be applied to connections if no Keep-Alive header is sent by the server (default 0 = disable) */
     private static final int IDLE_TIMEOUT = JMeterUtils.getPropDefault("httpclient4.idletimeout", 0);
     
-    private static final int VALIDITY_AFTER_INACTIVITY_TIMEOUT = JMeterUtils.getPropDefault("httpclient4.validate_after_inactivity", 2000);
+    private static final int VALIDITY_AFTER_INACTIVITY_TIMEOUT = JMeterUtils.getPropDefault("httpclient4.validate_after_inactivity", 1700);
     
     private static final int TIME_TO_LIVE = JMeterUtils.getPropDefault("httpclient4.time_to_live", 2000);
 

File: src/core/org/apache/jmeter/gui/action/validation/TreeClonerForValidation.java
Patch:
@@ -85,6 +85,7 @@ protected Object addNodeToTree(Object node) {
             if(clonedNode instanceof org.apache.jmeter.threads.ThreadGroup) {
                 ThreadGroup tg = (ThreadGroup)clonedNode;
                 tg.setNumThreads(VALIDATION_NUMBER_OF_THREADS);
+                tg.setScheduler(false);
                 tg.setProperty(ThreadGroup.DELAY, 0);
                 if(((AbstractThreadGroup)clonedNode).getSamplerController() instanceof LoopController) {
                     ((LoopController)((AbstractThreadGroup)clonedNode).getSamplerController()).setLoops(VALIDATION_ITERATIONS);

File: src/core/org/apache/jmeter/control/IfController.java
Patch:
@@ -77,7 +77,7 @@ public class IfController extends GenericController implements Serializable, Thr
     private static final String USE_RHINO_ENGINE_PROPERTY = "javascript.use_rhino"; //$NON-NLS-1$
 
     private static final boolean USE_RHINO_ENGINE = 
-            JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY, true) ||
+            JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY, false) ||
             getInstance().getEngineByName(NASHORN_ENGINE_NAME) == null;
 
     

File: src/functions/org/apache/jmeter/functions/JavaScript.java
Patch:
@@ -58,7 +58,7 @@ private static class LazyHolder {
     }
  
     private static final boolean USE_RHINO_ENGINE = 
-            JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY, true) || 
+            JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY, false) || 
             (getInstance().getEngineByName(JavaScript.NASHORN_ENGINE_NAME) == null);
 
     /**

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
Patch:
@@ -208,7 +208,7 @@ private List<File> getAttachmentFiles() {
                 .collect(Collectors.toList());
     }
 
-    private File attachmentToFile(String attachment) {
+    private File attachmentToFile(String attachment) { // NOSONAR False positive saying not used
         File file = new File(attachment);
         if (!file.isAbsolute() && !file.exists()) {
             if(log.isDebugEnabled()) {

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
Patch:
@@ -203,7 +203,7 @@ private byte[] processSampler(Message message) throws IOException, MessagingExce
 
     private List<File> getAttachmentFiles() {
         final String[] attachments = getPropertyAsString(ATTACH_FILE).split(FILENAME_SEPARATOR);
-        return Arrays.stream(attachments)
+        return Arrays.stream(attachments) // NOSONAR No need to close
                 .map(this::attachmentToFile)
                 .collect(Collectors.toList());
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.http.client.CredentialsProvider;
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.config.AuthSchemes;
+import org.apache.http.impl.auth.SPNegoSchemeFactory;
 import org.apache.http.impl.client.AbstractHttpClient;
 import org.apache.jmeter.config.ConfigElement;
 import org.apache.jmeter.config.ConfigTestElement;
@@ -470,7 +471,7 @@ public void setupCredentials(HttpClient client, URL url,
             if (Mechanism.KERBEROS.equals(auth.getMechanism())) {
                 ((AbstractHttpClient) client).getAuthSchemes().register(
                         AuthSchemes.SPNEGO,
-                        new FixedSPNegoSchemeFactory(isStripPort(url)));
+                        new SPNegoSchemeFactory(isStripPort(url)));
                 credentialsProvider.setCredentials(new AuthScope(null, -1, null), USE_JAAS_CREDENTIALS);
             } else {
                 credentialsProvider.setCredentials(

File: test/src/org/apache/jmeter/JMeterVersionTest.java
Patch:
@@ -54,7 +54,6 @@ public class JMeterVersionTest extends JMeterTestCase {
         JAR_TO_BUILD_PROP.put("bsf", "apache-bsf");
         JAR_TO_BUILD_PROP.put("bsh", "beanshell");
         JAR_TO_BUILD_PROP.put("geronimo-jms_1.1_spec", "jms");
-        JAR_TO_BUILD_PROP.put("httpmime", "httpclient"); // two jars same version
         JAR_TO_BUILD_PROP.put("mail", "javamail");
         JAR_TO_BUILD_PROP.put("oro", "jakarta-oro");
         JAR_TO_BUILD_PROP.put("xercesImpl", "xerces");

File: src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java
Patch:
@@ -264,7 +264,8 @@ private boolean classOk(String className) {
             return client != null;
         } catch (Exception ex) {
             log.error("Error creating class:'"+className+"' in JavaSampler "+getName()
-                +", check for a missing jar in your jmeter 'search_paths' and 'plugin_dependency_paths' properties");
+                +", check for a missing jar in your jmeter 'search_paths' and 'plugin_dependency_paths' properties",
+                ex);
             return false;
         }
     }

File: src/components/org/apache/jmeter/visualizers/backend/graphite/PickleGraphiteMetricsSender.java
Patch:
@@ -103,7 +103,7 @@ public void addMetric(long timestamp, String contextName, String metricName, Str
      */
     @Override
     public void writeAndSendMetrics() {    
-        List<MetricTuple> tempMetrics = null;
+        List<MetricTuple> tempMetrics;
         synchronized (lock) {
             if(metrics.isEmpty()) {
                 return;

File: src/components/org/apache/jmeter/visualizers/backend/graphite/TextGraphiteMetricsSender.java
Patch:
@@ -86,7 +86,7 @@ public void addMetric(long timestamp, String contextName, String metricName, Str
      */
     @Override
     public void writeAndSendMetrics() {
-        List<MetricTuple> tempMetrics = null;
+        List<MetricTuple> tempMetrics;
         synchronized (lock) {
             if(metrics.isEmpty()) {
                 return;

File: src/components/org/apache/jmeter/visualizers/backend/influxdb/HttpMetricsSender.java
Patch:
@@ -143,7 +143,7 @@ public void addMetric(String mesurement, String tag, String field) {
      */
     @Override
     public void writeAndSendMetrics() {
-        List<MetricTuple> tempMetrics = null;
+        List<MetricTuple> tempMetrics;
         synchronized (lock) {
             if(metrics.isEmpty()) {
                 return;

File: src/core/org/apache/jmeter/control/gui/WorkBenchGui.java
Patch:
@@ -100,7 +100,7 @@ public void configure(TestElement el) {
     @Override
     public void clearGui() {
         super.clearGui();
-        saveWorkBench.setSelected(false);
+        saveWorkBench.setSelected(true);
     }
     
     /**
@@ -152,6 +152,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         VerticalPanel workBenchPropsPanel = new VerticalPanel(5, 0);
 
         saveWorkBench = new JCheckBox(JMeterUtils.getResString("save_workbench"));
+        saveWorkBench.setSelected(true);
         workBenchPropsPanel.add(saveWorkBench);
         add(workBenchPropsPanel, BorderLayout.CENTER);
     }

File: src/components/org/apache/jmeter/visualizers/backend/BackendListener.java
Patch:
@@ -48,7 +48,8 @@
  * @since 2.13
  */
 public class BackendListener extends AbstractTestElement
-    implements Serializable, SampleListener, TestStateListener, NoThreadClone, Remoteable  {
+    implements Backend, Serializable, SampleListener, 
+        TestStateListener, NoThreadClone, Remoteable {
 
     /**
      * 

File: src/components/org/apache/jmeter/visualizers/backend/AbstractBackendListenerClient.java
Patch:
@@ -62,13 +62,16 @@ public abstract class AbstractBackendListenerClient implements BackendListenerCl
     @Override
     public void setupTest(BackendListenerContext context) throws Exception {
         LOGGER.debug(getClass().getName() + ": setupTest");
+        metricsPerSampler.clear();
+        userMetrics.clear();
     }
 
     /* Implements BackendListenerClient.teardownTest(BackendListenerContext) */
     @Override
     public void teardownTest(BackendListenerContext context) throws Exception {
         LOGGER.debug(getClass().getName() + ": teardownTest");
         metricsPerSampler.clear();
+        userMetrics.clear();
     }
 
     /* Implements BackendListenerClient.getDefaultParameters() */

File: src/components/org/apache/jmeter/visualizers/backend/influxdb/InfluxdbBackendListenerClient.java
Patch:
@@ -347,6 +347,7 @@ public void teardownTest(BackendListenerContext context) throws Exception {
 
         
         // Send last set of data before ending
+        LOGGER.info("Sending last metrics");
         sendMetrics();
 
         influxdbMetricsManager.destroy();

File: src/components/org/apache/jmeter/visualizers/backend/influxdb/InfluxdbMetricsSender.java
Patch:
@@ -33,11 +33,12 @@ final class MetricTuple {
         String measurement;
         String tag;
         String field;
-
-        MetricTuple(String measurement, String tag, String field) {
+        long timestamp;
+        MetricTuple(String measurement, String tag, String field, long timestamp) {
             this.measurement = measurement;
             this.tag = tag;
             this.field = field;
+            this.timestamp = timestamp;
         }
     }
 

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -339,6 +339,7 @@ private void startGui(String testFile) {
             log.warn("Could not set LAF to:"+jMeterLaf, ex);
         }
         splash.setProgress(10);
+        JMeterUtils.applyHiDPIOnFonts();
         PluginManager.install(this, true);
 
         JMeterTreeModel treeModel = new JMeterTreeModel();

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -104,6 +104,8 @@ public final class ActionNames {
     public static final String RUN_TG           = "run_tg"; // $NON-NLS-1$
     public static final String RUN_TG_NO_TIMERS = "run_tg_no_timers"; // $NON-NLS-1$
     public static final String VALIDATE_TG      = "validate_tg"; //$NON-NLS-1$
+    public static final String ZOOM_IN          = "zoom_in"; //$NON-NLS-1$
+    public static final String ZOOM_OUT         = "zoom_out"; //$NON-NLS-1$
 
     // Prevent instantiation
     private ActionNames() {}

File: src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java
Patch:
@@ -265,7 +265,7 @@ private static boolean classOk(String className) {
         try {
             JavaSamplerClient client = (JavaSamplerClient) Class.forName(className, true,
                     Thread.currentThread().getContextClassLoader()).newInstance();
-            return client instanceof JavaSamplerClient;
+            return client != null;
         } catch (Exception ex) {
             return false;
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -476,7 +476,7 @@ protected Map<String, CacheEntry> initialValue(){
                 // Bug 51942 - this map may be used from multiple threads
                 @SuppressWarnings("unchecked") // LRUMap is not generic currently
                 Map<String, CacheEntry> map = new LRUMap(getMaxSize());
-                return Collections.<String, CacheEntry>synchronizedMap(map);
+                return Collections.synchronizedMap(map);
             }
         };
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -430,7 +430,7 @@ private JComboBox<String> createComboHandler() {
         selectHandlerPanel.addActionListener(this);
 
         // if no results render in jmeter.properties, load Standard (default)
-        List<String> classesToAdd = Collections.<String>emptyList();
+        List<String> classesToAdd = Collections.emptyList();
         try {
             classesToAdd = JMeterUtils.findClassesThatExtend(CookieHandler.class);
         } catch (IOException e1) {

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/CssParser.java
Patch:
@@ -40,7 +40,7 @@
  * @since 3.0
  */
 public class CssParser implements LinkExtractorParser {
-    private static final URLCollection EMPTY_URL_COLLECTION = new URLCollection(Collections.<URLString>emptyList());
+    private static final URLCollection EMPTY_URL_COLLECTION = new URLCollection(Collections.emptyList());
     private static final Logger LOG = LoggingManager.getLoggerForClass();
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/CssParserCacheLoader.java
Patch:
@@ -69,7 +69,7 @@ public URLCollection load(Triple<String, URL, Charset> triple)
         final CascadingStyleSheet aCSS = CSSReader.readFromStringReader(
                 cssContent, readerSettings);
 
-        final URLCollection urls = new URLCollection(new ArrayList<URLString>());
+        final URLCollection urls = new URLCollection(new ArrayList<>());
 
         if (aCSS == null) {
             LOG.warn("Failed parsing CSS: " + baseUrl

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -313,8 +313,8 @@ public enum KeystoreMode {
 
     public ProxyControl() {
         setPort(DEFAULT_PORT);
-        setExcludeList(new HashSet<String>());
-        setIncludeList(new HashSet<String>());
+        setExcludeList(new HashSet<>());
+        setIncludeList(new HashSet<>());
         setCaptureHttpHeaders(true); // maintain original behaviour
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java
Patch:
@@ -61,7 +61,7 @@ public class SessionFilter implements Filter, Serializable, TestCloneable,Thread
      * Creates a new SessionFilter and initializes its fields to new collections
      */
     public SessionFilter() {
-        this(new ConcurrentHashMap<String, CookieManager>(), Collections.synchronizedSet(new HashSet<CookieManager>()));
+        this(new ConcurrentHashMap<>(), Collections.synchronizedSet(new HashSet<>()));
     }
 
     /**

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java
Patch:
@@ -120,7 +120,7 @@ private void initClass() {
         String name = getClassname().trim();
         try {
             javaClass = Class.forName(name, false, Thread.currentThread().getContextClassLoader());
-            Method method = javaClass.getMethod("teardownTest", new Class[]{JavaSamplerContext.class});
+            Method method = javaClass.getMethod("teardownTest", JavaSamplerContext.class);
             isToBeRegistered = !method.getDeclaringClass().equals(AbstractJavaSamplerClient.class);
             log.info("Created class: " + name + ". Uses tearDownTest: " + isToBeRegistered);
         } catch (Exception e) {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
Patch:
@@ -270,7 +270,7 @@ private Map<String, Object> getMapContent() throws ClassNotFoundException, Secur
                 obj = value;
             } else {
                 Class <?> clazz = Class.forName(type);
-                Method method = clazz.getMethod("valueOf", new Class<?>[]{String.class});
+                Method method = clazz.getMethod("valueOf", String.class);
                 obj = method.invoke(clazz, value);                
             }
             m.put(name, obj);

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/control/gui/LdapExtTestSamplerGui.java
Patch:
@@ -78,7 +78,7 @@ public TestElement createTestElement() {
     @Override
     public void modifyTestElement(TestElement sampler) {
         sampler.clear();
-        ((LDAPExtSampler) sampler).addTestElement(ldapDefaultPanel.createTestElement());
+        sampler.addTestElement(ldapDefaultPanel.createTestElement());
         super.configureTestElement(sampler);
     }
 

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/control/gui/LdapTestSamplerGui.java
Patch:
@@ -72,8 +72,8 @@ public TestElement createTestElement() {
     @Override
     public void modifyTestElement(TestElement sampler) {
         sampler.clear();
-        ((LDAPSampler) sampler).addTestElement(ldapDefaultPanel.createTestElement());
-        ((LDAPSampler) sampler).addTestElement(loginPanel.createTestElement());
+        sampler.addTestElement(ldapDefaultPanel.createTestElement());
+        sampler.addTestElement(loginPanel.createTestElement());
         super.configureTestElement(sampler);
     }
 

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/protocol/SendMailCommand.java
Patch:
@@ -265,7 +265,7 @@ public Message prepareMessage() throws MessagingException, IOException {
         }
 
         for (int i = 0; i < headerFields.size(); i++) {
-            Argument argument = (Argument)((TestElementProperty)headerFields.get(i)).getObjectValue();
+            Argument argument = (Argument) headerFields.get(i).getObjectValue();
             message.setHeader(argument.getName(), argument.getValue());
         }
 

File: src/components/org/apache/jmeter/visualizers/backend/influxdb/InfluxdbMetricsSender.java
Patch:
@@ -34,8 +34,8 @@ final class MetricTuple {
         String tag;
         String field;
 
-        MetricTuple(String measurment, String tag, String field) {
-            this.measurement = measurment;
+        MetricTuple(String measurement, String tag, String field) {
+            this.measurement = measurement;
             this.tag = tag;
             this.field = field;
         }

File: src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteBackendListenerClient.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.visualizers.backend.AbstractBackendListenerClient;
 import org.apache.jmeter.visualizers.backend.BackendListenerContext;
 import org.apache.jmeter.visualizers.backend.SamplerMetric;
@@ -108,7 +109,7 @@ public class GraphiteBackendListenerClient extends AbstractBackendListenerClient
 
     private static final String METRIC_ALL_HITS_COUNT        = METRIC_HITS_PREFIX+METRIC_SEPARATOR+METRIC_COUNT;
 
-    private static final long ONE_SECOND = 1L;
+    private static final long SEND_INTERVAL = JMeterUtils.getPropDefault("backend_graphite.send_interval", 5);
     private static final int MAX_POOL_SIZE = 1;
     private static final String DEFAULT_PERCENTILES = "90;95;99";
     private static final String SEPARATOR = ";"; //$NON-NLS-1$
@@ -306,7 +307,7 @@ public void setupTest(BackendListenerContext context) throws Exception {
         }
         scheduler = Executors.newScheduledThreadPool(MAX_POOL_SIZE);
         // Don't change this as metrics are per second
-        this.timerHandle = scheduler.scheduleAtFixedRate(this, ONE_SECOND, ONE_SECOND, TimeUnit.SECONDS);
+        this.timerHandle = scheduler.scheduleAtFixedRate(this, SEND_INTERVAL, SEND_INTERVAL, TimeUnit.SECONDS);
     }
 
     @Override

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/MeasuringConnectionManager.java
Patch:
@@ -72,7 +72,7 @@ public ClientConnectionRequest requestConnection(final HttpRoute route, final Ob
     @Override
     protected ClientConnectionOperator createConnectionOperator(
             SchemeRegistry schreg) {
-        return new JMeterClientConnectionOperator(schreg);
+        return new JMeterClientConnectionOperator(schreg, getDnsResolver());
     }
 
 

File: src/core/org/apache/jmeter/report/processor/Top5ErrorsSummaryData.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class Top5ErrorsSummaryData {
 
-    private static final Long ONE = new Long(1);
+    private static final Long ONE = Long.valueOf(1L);
     private Map<String, Long> countPerError;
     private long total;
     private long errors;

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -711,7 +711,7 @@ public void setResponseData(String response) {
             responseData = response.getBytes(getDataEncodingWithDefault());
         } catch (UnsupportedEncodingException e) {
             log.warn("Could not convert string, using default encoding. "+e.getLocalizedMessage());
-            responseData = response.getBytes(); // N.B. default charset is used deliberately here
+            responseData = response.getBytes(Charset.defaultCharset()); // N.B. default charset is used deliberately here
         }
     }
 
@@ -731,7 +731,7 @@ public void setResponseData(final String response, final String encoding) {
         } catch (UnsupportedEncodingException e) {
             log.warn("Could not convert string using '"+encodeUsing+
                     "', using default encoding: "+DEFAULT_CHARSET,e);
-            responseData = response.getBytes(); // N.B. default charset is used deliberately here
+            responseData = response.getBytes(Charset.defaultCharset()); // N.B. default charset is used deliberately here
             setDataEncoding(DEFAULT_CHARSET);
         }
     }
@@ -763,7 +763,7 @@ public String getResponseDataAsString() {
             return responseDataAsString;
         } catch (UnsupportedEncodingException e) {
             log.warn("Using platform default as "+getDataEncodingWithDefault()+" caused "+e);
-            return new String(responseData); // N.B. default charset is used deliberately here
+            return new String(responseData,Charset.defaultCharset()); // N.B. default charset is used deliberately here
         }
     }
 

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -72,7 +72,7 @@ public final class GuiPackage implements LocaleChangeListener, HistoryListener {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     private static final String NAMING_POLICY_IMPLEMENTATION = 
-            JMeterUtils.getPropDefault("naming_policy_impl", //$NON-NLS-1$ 
+            JMeterUtils.getPropDefault("naming_policy.impl", //$NON-NLS-1$ 
                     DefaultTreeNodeNamingPolicy.class.getName());
 
     /** Singleton instance. */

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -33,8 +33,9 @@ public final class ActionNames {
     public static final String ADD              = "Add"; // $NON-NLS-1$
     public static final String ADD_ALL          = "add_all"; // $NON-NLS-1$
     public static final String ADD_PARENT       = "Add Parent"; // $NON-NLS-1$
-    public static final String ANALYZE_FILE     = "Analyze File"; // $NON-NLS-1$
     public static final String ADD_THINK_TIME_BETWEEN_EACH_STEP    = "Add Think Time between each step"; // $NON-NLS-1$
+    public static final String ANALYZE_FILE     = "Analyze File"; // $NON-NLS-1$
+    public static final String APPLY_NAMING_CONVENTION    = "Apply Naming Convention"; // $NON-NLS-1$
     public static final String CHANGE_LANGUAGE  = "change_language"; // $NON-NLS-1$
     public static final String CHANGE_PARENT    = "Change Parent"; // $NON-NLS-1$
     public static final String CHECK_DIRTY      = "check_dirty"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/action/AddToTree.java
Patch:
@@ -68,6 +68,7 @@ public void doAction(ActionEvent e) {
             TestElement testElement = guiPackage.createTestElement(((JComponent) e.getSource()).getName());
             JMeterTreeNode parentNode = guiPackage.getCurrentNode();
             JMeterTreeNode node = guiPackage.getTreeModel().addComponent(testElement, parentNode);
+            guiPackage.getNamingPolicy().nameOnCreation(node);
             guiPackage.getMainFrame().getTree().setSelectionPath(new TreePath(node.getPath()));
         } catch (Exception err) {
             log.error("", err); // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -290,6 +290,9 @@ public static JPopupMenu getDefaultControllerMenu() {
         pop.add(MenuFactory.makeMenuItemRes("add_think_times",// $NON-NLS-1$
                 ActionNames.ADD_THINK_TIME_BETWEEN_EACH_STEP));
 
+        pop.add(MenuFactory.makeMenuItemRes("apply_naming",// $NON-NLS-1$
+                ActionNames.APPLY_NAMING_CONVENTION));
+        
         pop.add(makeMenus(MENU_PARENT_CONTROLLER,
                 JMeterUtils.getResString("change_parent"),// $NON-NLS-1$
                 ActionNames.CHANGE_PARENT));

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -34,6 +34,7 @@ public final class ActionNames {
     public static final String ADD_ALL          = "add_all"; // $NON-NLS-1$
     public static final String ADD_PARENT       = "Add Parent"; // $NON-NLS-1$
     public static final String ANALYZE_FILE     = "Analyze File"; // $NON-NLS-1$
+    public static final String ADD_THINK_TIME_BETWEEN_EACH_STEP    = "Add Think Time between each step"; // $NON-NLS-1$
     public static final String CHANGE_LANGUAGE  = "change_language"; // $NON-NLS-1$
     public static final String CHANGE_PARENT    = "Change Parent"; // $NON-NLS-1$
     public static final String CHECK_DIRTY      = "check_dirty"; // $NON-NLS-1$

File: src/components/org/apache/jmeter/visualizers/backend/influxdb/InfluxdbBackendListenerClient.java
Patch:
@@ -55,8 +55,6 @@ public class InfluxdbBackendListenerClient extends AbstractBackendListenerClient
     
     // Name of the measurement
     private static final String DEFAULT_MEASUREMENT = "jmeter";
-    // Name of the application tested
-    private static String application = "";
 
     private static final String TAG_TRANSACTION = ",transaction=";
 
@@ -97,6 +95,8 @@ public class InfluxdbBackendListenerClient extends AbstractBackendListenerClient
     private Map<String, Float> koPercentiles;
     private Map<String, Float> allPercentiles;
     private String testTitle;
+    // Name of the application tested
+    private String application = "";
 
     private InfluxdbMetricsSender influxdbMetricsManager;
 
@@ -329,6 +329,7 @@ public void teardownTest(BackendListenerContext context) throws Exception {
             scheduler.awaitTermination(30, TimeUnit.SECONDS);
         } catch (InterruptedException e) {
             LOGGER.error("Error waiting for end of scheduler");
+            Thread.currentThread().interrupt();
         }
         // Annotation of the end of the run ( usefull with Grafana )
         influxdbMetricsManager.addMetric(EVENTS_FOR_ANNOTATION, TAG_APPLICATION + application,

File: src/core/org/apache/jmeter/gui/action/SearchTreeDialog.java
Patch:
@@ -98,7 +98,7 @@ public class SearchTreeDialog extends JDialog implements ActionListener {
     private JButton replaceButton;
 
     public SearchTreeDialog() {
-        super((JFrame) null, JMeterUtils.getResString("search_tree_title"), true); //$NON-NLS-1$
+        super((JFrame) null, JMeterUtils.getResString("search_tree_title"), false); //$NON-NLS-1$
         init();
     }
 

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -343,7 +343,7 @@ private Component createComboRender() {
                 }
                 renderer.setBackgroundColor(getBackground());
                 map.put(renderer.getClass().getName(), renderer);
-            } catch (Exception e) {
+            } catch (Exception | NoClassDefFoundError e) { // NOSONAR See bug 60583
                 log.warn("Error loading result renderer:" + clazz, e);
             }
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -494,8 +494,8 @@ private boolean isStripPort(URL url) {
         if (STRIP_PORT) {
             return true;
         }
-        return (url.getPort() == HTTPConstants.DEFAULT_HTTP_PORT ||
-                url.getPort() == HTTPConstants.DEFAULT_HTTPS_PORT);
+        return url.getPort() == HTTPConstants.DEFAULT_HTTP_PORT ||
+                url.getPort() == HTTPConstants.DEFAULT_HTTPS_PORT;
     }
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/AuthPanel.java
Patch:
@@ -293,7 +293,7 @@ private JButton createButton(String resName, char mnemonic, String command, bool
     }
 
     private JPanel createButtonPanel() {
-        boolean tableEmpty = (tableModel.getRowCount() == 0);
+        boolean tableEmpty = tableModel.getRowCount() == 0;
 
         addButton = createButton("add", 'A', ADD_COMMAND, true); //$NON-NLS-1$
         deleteButton = createButton("delete", 'D', DELETE_COMMAND, !tableEmpty); //$NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/DNSCachePanel.java
Patch:
@@ -86,7 +86,7 @@ public class DNSCachePanel extends AbstractConfigGui implements ActionListener {
     private ButtonGroup providerDNSradioGroup = new ButtonGroup();
 
     private static final String[] COLUMN_RESOURCE_NAMES = {
-        (JMeterUtils.getResString("dns_hostname_or_ip")), //$NON-NLS-1$
+        JMeterUtils.getResString("dns_hostname_or_ip"), //$NON-NLS-1$
     };
     private static final Class<?>[] columnClasses = {
         String.class };
@@ -237,7 +237,7 @@ private JPanel createChooseResPanel() {
     }
 
     private JPanel createButtonPanel() {
-        boolean tableEmpty = (dnsServersTableModel.getRowCount() == 0);
+        boolean tableEmpty = dnsServersTableModel.getRowCount() == 0;
 
         addButton = createButton("add", 'A', ADD_COMMAND, custResButton.isSelected()); // $NON-NLS-1$
         deleteButton = createButton("delete", 'D', DELETE_COMMAND, !tableEmpty); // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java
Patch:
@@ -294,7 +294,7 @@ private JButton createButton(String resName, char mnemonic, String command, bool
     }
 
     private JPanel createButtonPanel() {
-        boolean tableEmpty = (tableModel.getRowCount() == 0);
+        boolean tableEmpty = tableModel.getRowCount() == 0;
 
         JButton addButton = createButton("add", 'A', ADD_COMMAND, true); // $NON-NLS-1$
         deleteButton = createButton("delete", 'D', DELETE_COMMAND, !tableEmpty); // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/gui/URLRewritingModifierGui.java
Patch:
@@ -102,12 +102,12 @@ public TestElement createTestElement() {
     @Override
     public void modifyTestElement(TestElement modifier) {
         super.configureTestElement(modifier);
-        URLRewritingModifier rewritingModifier = ((URLRewritingModifier) modifier);
+        URLRewritingModifier rewritingModifier = (URLRewritingModifier) modifier;
         rewritingModifier.setArgumentName(argumentName.getText());
         rewritingModifier.setPathExtension(pathExt.isSelected());
         rewritingModifier.setPathExtensionNoEquals(pathExtNoEquals.isSelected());
         rewritingModifier.setPathExtensionNoQuestionmark(pathExtNoQuestionmark.isSelected());
-        rewritingModifier.setShouldCache((shouldCache.isSelected()));
+        rewritingModifier.setShouldCache(shouldCache.isSelected());
         rewritingModifier.setEncode(encode.isSelected());
     }
 
@@ -131,7 +131,7 @@ public void clearGui() {
      */
     @Override
     public void configure(TestElement el) {
-        URLRewritingModifier rewritingModifier = ((URLRewritingModifier) el);
+        URLRewritingModifier rewritingModifier = (URLRewritingModifier) el;
         argumentName.setText(rewritingModifier.getArgumentName());
         pathExt.setSelected(rewritingModifier.isPathExtension());
         pathExtNoEquals.setSelected(rewritingModifier.isPathExtensionNoEquals());

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/URLString.java
Patch:
@@ -25,7 +25,6 @@
  * cost of the hostname lookup performed by the URL methods equals() and
  * hashCode() URL is a final class, so cannot be extended ...
  *
- * @version $Revision$
  */
 public class URLString implements Comparable<URLString> {
 
@@ -66,7 +65,7 @@ public int compareTo(URLString o) {
     /** {@inheritDoc} */
     @Override
     public boolean equals(Object o) {
-        return (o instanceof URLString && urlAsString.equals(o.toString()));
+        return o instanceof URLString && urlAsString.equals(o.toString());
     }
 
     /** {@inheritDoc} */

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java
Patch:
@@ -145,7 +145,7 @@ protected static boolean isPartialMatch(String host) {
      * @return {@code true} iff both ProxyPort and ProxyHost are defined.
      */
     protected boolean isDynamicProxy(String proxyHost, int proxyPort){
-        return (!JOrphanUtils.isBlank(proxyHost) && proxyPort > 0);        
+        return !JOrphanUtils.isBlank(proxyHost) && proxyPort > 0;        
     }
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/util/Base64Encoder.java
Patch:
@@ -46,7 +46,7 @@ public static String encode(byte[] bs) {
         StringBuilder out = new StringBuilder();
         int bl = bs.length;
         for (int i = 0; i < bl; i += 3) {
-            out.append(encodeAtom(bs, i, (bl - i)));
+            out.append(encodeAtom(bs, i, bl - i));
         }
         return out.toString();
     }

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java
Patch:
@@ -321,7 +321,7 @@ public SampleResult runTest(JavaSamplerContext p_context) {
             Thread.yield();
             SampleResult results = new SampleResult();
             results.setSuccessful(false);
-            results.setResponseData(("Class not found: " + getClassname()), null);
+            results.setResponseData("Class not found: " + getClassname(), null);
             results.setSampleLabel("ERROR: " + getClassname());
             return results;
         }

File: src/functions/org/apache/jmeter/functions/TimeFunction.java
Patch:
@@ -90,7 +90,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) throw
             }
             if (DIVISOR_PATTERN.matcher(fmt).matches()) { // divisor is a positive number
                 long div = Long.parseLong(fmt.substring(1)); // should never case NFE
-                datetime = Long.toString((System.currentTimeMillis() / div));
+                datetime = Long.toString(System.currentTimeMillis() / div);
             } else {
                 SimpleDateFormat df = new SimpleDateFormat(fmt);// Not synchronised, so can't be shared
                 datetime = df.format(new Date());

File: src/jorphan/org/apache/commons/cli/avalon/CLUtil.java
Patch:
@@ -51,9 +51,9 @@ public static StringBuilder describeOptions(final CLOptionDescriptor[] options)
             final String name = option.getName();
             String description = option.getDescription();
             int flags = option.getFlags();
-            boolean argumentOptional = ((flags & CLOptionDescriptor.ARGUMENT_OPTIONAL) == CLOptionDescriptor.ARGUMENT_OPTIONAL);
-            boolean argumentRequired = ((flags & CLOptionDescriptor.ARGUMENT_REQUIRED) == CLOptionDescriptor.ARGUMENT_REQUIRED);
-            boolean twoArgumentsRequired = ((flags & CLOptionDescriptor.ARGUMENTS_REQUIRED_2) == CLOptionDescriptor.ARGUMENTS_REQUIRED_2);
+            boolean argumentOptional = (flags & CLOptionDescriptor.ARGUMENT_OPTIONAL) == CLOptionDescriptor.ARGUMENT_OPTIONAL;
+            boolean argumentRequired = (flags & CLOptionDescriptor.ARGUMENT_REQUIRED) == CLOptionDescriptor.ARGUMENT_REQUIRED;
+            boolean twoArgumentsRequired = (flags & CLOptionDescriptor.ARGUMENTS_REQUIRED_2) == CLOptionDescriptor.ARGUMENTS_REQUIRED_2;
             boolean needComma = false;
             if (twoArgumentsRequired) {
                 argumentRequired = true;

File: src/jorphan/org/apache/jorphan/collections/Data.java
Patch:
@@ -356,7 +356,7 @@ public boolean hasHeader(String column) {
      * @return True if there is another row. False if there are no more rows.
      */
     public boolean next() {
-        return (++currentPos < size);
+        return ++currentPos < size;
     }
 
     /**
@@ -397,7 +397,7 @@ public static Data getDataFromResultSet(ResultSet rs) throws SQLException {
      * @return True if there is another row. False if there are no more rows.
      */
     public boolean previous() {
-        return (--currentPos >= 0);
+        return --currentPos >= 0;
     }
 
     /**

File: src/jorphan/org/apache/jorphan/collections/ListedHashTree.java
Patch:
@@ -204,7 +204,7 @@ public boolean equals(Object o) {
             return false;
         }
         ListedHashTree lht = (ListedHashTree) o;
-        return (super.equals(lht) && order.equals(lht.order));
+        return super.equals(lht) && order.equals(lht.order);
     }
 
 

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -331,7 +331,7 @@ public static String trim(final String input, final String delims){
      * @return slice from the input array
      */
     public static byte[] getByteArraySlice(byte[] array, int begin, int end) {
-        byte[] slice = new byte[(end - begin + 1)];
+        byte[] slice = new byte[end - begin + 1];
         System.arraycopy(array, begin, slice, 0, slice.length);
         return slice;
     }
@@ -494,7 +494,7 @@ private static byte toHexChar(byte in){
     public static int read(InputStream is, byte[] buffer, int offset, int length) throws IOException {
         int remaining = length;
         while ( remaining > 0 ) {
-            int location = ( length - remaining );
+            int location = length - remaining;
             int count = is.read( buffer, location, remaining );
             if ( -1 == count ) { // EOF
                 break;
@@ -525,7 +525,7 @@ public static void displayThreads(boolean includeDaemons) {
                     builder.append(stackTraceElement.getClassName()+"#"+stackTraceElement.getMethodName()+
                             (lineNumber >=0 ? " at line:"+ stackTraceElement.getLineNumber() : "")+lineSeparator);
                 }
-                System.out.println(e.getKey().toString()+((daemon ? " (daemon)" : ""))+", stackTrace:"+ builder.toString());
+                System.out.println(e.getKey().toString()+(daemon ? " (daemon)" : "")+", stackTrace:"+ builder.toString());
             }
         }
     }

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPropertiesPanel.java
Patch:
@@ -212,7 +212,7 @@ private JButton createButton(String resName, char mnemonic, String command, bool
     }
 
     private JPanel createButtonPanel() {
-        boolean tableEmpty = (tableModel.getRowCount() == 0);
+        boolean tableEmpty = tableModel.getRowCount() == 0;
 
         addButton = createButton("add", 'A', ADD_COMMAND, true); //$NON-NLS-1$
         deleteButton = createButton("delete", 'D', DELETE_COMMAND, !tableEmpty); //$NON-NLS-1$

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/BaseJMSSampler.java
Patch:
@@ -347,8 +347,8 @@ public static String getMessageHeaders(Message message) {
             final Destination destination = message.getJMSDestination();
 
             response.append("\n   Destination: ");
-            response.append((destination == null ? null : destination
-                .toString()));
+            response.append(destination == null ? null : destination
+                .toString());
 
             response.append("\n   Expiration: ");
             response.append(new Date(message.getJMSExpiration()));
@@ -364,7 +364,7 @@ public static String getMessageHeaders(Message message) {
 
             final Destination replyTo = message.getJMSReplyTo();
             response.append("\n   Reply to: ");
-            response.append((replyTo == null ? null : replyTo.toString()));
+            response.append(replyTo == null ? null : replyTo.toString());
 
             response.append("\n   Timestamp: ");
             response.append(new Date(message.getJMSTimestamp()));

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -180,7 +180,7 @@ public SampleResult sample() {
                 msg = SUBSCRIBER.getMessage(calculateWait(until, now));
                 if (msg != null){
                     read++;
-                    extractContent(buffer, propBuffer, msg, (read == loop));
+                    extractContent(buffer, propBuffer, msg, read == loop);
                 }
             } catch (JMSException e) {
                 log.warn("Error "+e.toString());

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPSampler.java
Patch:
@@ -357,7 +357,7 @@ private BasicAttribute getBasicAttribute(String name, String value) {
      * @return a formatted string label describing this sampler
      */
     public String getLabel() {
-        return ("ldap://" + this.getServername() + ":" + getPort() + "/" + this.getRootdn());
+        return "ldap://" + this.getServername() + ":" + getPort() + "/" + this.getRootdn();
     }
 
     /**

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/protocol/SendMailCommand.java
Patch:
@@ -729,7 +729,7 @@ public void setSynchronousMode(boolean synchronousMode) {
      * @return Protocol that is used to transport message
      */
     private String getProtocol() {
-        return (useSSL) ? "smtps" : "smtp";
+        return useSSL ? "smtps" : "smtp";
     }
 
     /**

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -315,7 +315,7 @@ public String getClassname() {
      * @return a formatted string label describing this sampler
      */
     public String getLabel() {
-        return ("tcp://" + this.getServer() + ":" + this.getPort());//$NON-NLS-1$ $NON-NLS-2$
+        return "tcp://" + this.getServer() + ":" + this.getPort();//$NON-NLS-1$ $NON-NLS-2$
     }
 
     private Class<?> getClass(String className) {

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -252,7 +252,7 @@ public void configure(TestElement el) {
         super.configure(el);
         if (el instanceof Arguments) {
             tableModel.clearData();
-            for (JMeterProperty jMeterProperty : ((Arguments) el)) {
+            for (JMeterProperty jMeterProperty : (Arguments) el) {
                 Argument arg = (Argument) jMeterProperty.getObjectValue();
                 tableModel.addRow(arg);
             }

File: src/core/org/apache/jmeter/control/gui/TransactionControllerGui.java
Patch:
@@ -65,7 +65,7 @@ public void configure(TestElement el) {
     public void modifyTestElement(TestElement el) {
         configureTestElement(el);
         ((TransactionController) el).setGenerateParentSample(generateParentSample.isSelected());
-        TransactionController tc = ((TransactionController) el);
+        TransactionController tc = (TransactionController) el;
         tc.setGenerateParentSample(generateParentSample.isSelected());
         tc.setIncludeTimers(includeTimers.isSelected());
     }

File: src/core/org/apache/jmeter/gui/GUIFactory.java
Patch:
@@ -74,7 +74,7 @@ public static ImageIcon getIcon(Class<?> elementClass) {
      */
     public static ImageIcon getIcon(Class<?> elementClass, boolean enabled) {
         String key = elementClass.getName();
-        ImageIcon icon = (enabled ? ICON_MAP.get(key) : DISABLED_ICON_MAP.get(key));
+        ImageIcon icon = enabled ? ICON_MAP.get(key) : DISABLED_ICON_MAP.get(key);
 
         if (icon != null) {
             return icon;

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeModel.java
Patch:
@@ -113,7 +113,7 @@ public HashTree addSubTree(HashTree subTree, JMeterTreeNode current) throws Ille
                 addSubTree(subTree.getTree(item), current);
             } else if (item instanceof WorkBench) {
                 current = (JMeterTreeNode) ((JMeterTreeNode) getRoot()).getChildAt(1);
-                final TestElement testElement = ((TestElement) current.getUserObject());
+                final TestElement testElement = (TestElement) current.getUserObject();
                 testElement.addTestElement(item);
                 testElement.setName(item.getName());
                 addSubTree(subTree.getTree(item), current);

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeTransferHandler.java
Patch:
@@ -116,7 +116,7 @@ public int compare(TreePath o1, TreePath o2) {
                 int row1 = tree.getRowForPath(o1);
                 int row2 = tree.getRowForPath(o2);
                 
-                return (row1<row2 ? -1 : (row1==row2 ? 0 : 1));
+                return row1<row2 ? -1 : (row1==row2 ? 0 : 1);
             }
         };
         

File: src/core/org/apache/jmeter/report/processor/ErrorsSummaryConsumer.java
Patch:
@@ -63,7 +63,7 @@ protected ListResultData createDataResult(String key, Long data) {
         result.addResult(new ValueResultData(key != null ? key : JMeterUtils
                 .getResString("reportgenerator_summary_total")));
         result.addResult(new ValueResultData(data));
-        result.addResult(new ValueResultData(Double.valueOf(((double) data.longValue() * 100 / errorCount))));
+        result.addResult(new ValueResultData(Double.valueOf((double) data.longValue() * 100 / errorCount)));
         result.addResult(new ValueResultData(Double.valueOf((double) data.longValue() * 100
                 / getOverallInfo().getData().doubleValue())));
         return result;
@@ -139,7 +139,7 @@ static boolean isSuccessCode(String codeAsString) {
         if (StringUtils.isNumeric(codeAsString)) {
             try {
                 int code = Integer.parseInt(codeAsString);
-                return (code >= 200 && code <= 399);
+                return code >= 200 && code <= 399;
             } catch (NumberFormatException ex) {
                 return false;
             }

File: src/core/org/apache/jmeter/report/processor/RequestsSummaryConsumer.java
Patch:
@@ -71,10 +71,10 @@ public void consume(Sample sample, int channel) {
     @Override
     public void stopConsuming() {
         MapResultData result = new MapResultData();
-        result.setResult("KoPercent", new ValueResultData(Double.valueOf(((double) errorCount
-                * 100 / count))));
+        result.setResult("KoPercent", new ValueResultData(Double.valueOf((double) errorCount
+                * 100 / count)));
         result.setResult("OkPercent", new ValueResultData(
-                Double.valueOf(((double) (count - errorCount) * 100 / count))));
+                Double.valueOf((double) (count - errorCount) * 100 / count)));
         setDataToContext(getName(), result);
         super.stopProducing();
     }

File: src/core/org/apache/jmeter/report/processor/graph/TimeStampKeysSelector.java
Patch:
@@ -80,7 +80,7 @@ public final void setSelectBeginTime(boolean selectBeginTime) {
     @Override
     public Double select(Sample sample) {
         long time = selectBeginTime ? sample.getStartTime() : sample.getEndTime();
-        return Double.valueOf(((double) time - time % granularity));
+        return Double.valueOf((double) time - time % granularity);
     }
 
 }

File: src/core/org/apache/jmeter/report/processor/graph/impl/BytesThroughputGraphConsumer.java
Patch:
@@ -81,7 +81,7 @@ public Double select(String series, Sample sample) {
                         // We ignore Transaction Controller results
                         if(!sample.isController()) {
                             return Double.valueOf(
-                                (RECEIVED_BYTES_SERIES_LABEL.equals(series)) ? sample
+                                RECEIVED_BYTES_SERIES_LABEL.equals(series) ? sample
                                 .getReceivedBytes() : sample.getSentBytes());
                         } else {
                             return null;

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimeDistributionGraphConsumer.java
Patch:
@@ -72,7 +72,7 @@ protected final GraphKeysSelector createKeysSelector() {
             @Override
             public Double select(Sample sample) {
                 long elapsed = sample.getElapsedTime();
-                return Double.valueOf((elapsed - elapsed % granularity));
+                return Double.valueOf(elapsed - elapsed % granularity);
 
             }
         };

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -914,7 +914,7 @@ public void setSampleCount(boolean save) {
      *            milliseconds since epoch will be printed
      */
     public void setFormatter(DateFormat fmt){
-        printMilliseconds = (fmt == null); // maintain relationship
+        printMilliseconds = fmt == null; // maintain relationship
         formatter = fmt;
     }
 

File: src/core/org/apache/jmeter/save/converters/SampleResultConverter.java
Patch:
@@ -411,7 +411,7 @@ protected boolean retrieveItem(HierarchicalStreamReader reader, UnmarshallingCon
                 try {
                     res.setResponseData(responseData.getBytes(dataEncoding));
                 } catch (UnsupportedEncodingException e) {
-                    res.setResponseData(("Can't support the char set: " + dataEncoding), null);
+                    res.setResponseData("Can't support the char set: " + dataEncoding, null);
                     res.setDataType(SampleResult.TEXT);
                 }
             }

File: src/core/org/apache/jmeter/testelement/property/CollectionProperty.java
Patch:
@@ -54,7 +54,7 @@ public boolean equals(Object o) {
 
     @Override
     public int hashCode() {
-        return (value == null ? 0 : value.hashCode());
+        return value == null ? 0 : value.hashCode();
     }
 
     public void remove(String prop) {

File: src/core/org/apache/jmeter/testelement/property/MultiProperty.java
Patch:
@@ -85,7 +85,7 @@ public void mergeIn(JMeterProperty prop) {
         }
         log.debug("merging in " + prop.getClass());
         if (prop instanceof MultiProperty) {
-            for (JMeterProperty item : ((MultiProperty) prop)) {
+            for (JMeterProperty item : (MultiProperty) prop) {
                 addProperty(item);
             }
         } else {

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -202,7 +202,7 @@ private void saveSamplerConfigs(Sampler sam) {
             List<PreProcessor>  tempPre = new LinkedList<>();
             List<PostProcessor> tempPost = new LinkedList<>();
             for (Object item : testTree.list(stack.subList(0, i))) {
-                if ((item instanceof ConfigTestElement)) {
+                if (item instanceof ConfigTestElement) {
                     configs.add((ConfigTestElement) item);
                 }
                 if (item instanceof SampleListener) {

File: src/core/org/apache/jmeter/util/Calculator.java
Patch:
@@ -185,10 +185,10 @@ public double getErrorPercentage() {
         double rval = 0.0;
 
         if (count == 0) {
-            return (rval);
+            return rval;
         }
         rval = (double) errors / (double) count;
-        return (rval);
+        return rval;
     }
 
     /**

File: src/core/org/apache/jmeter/gui/action/LoggerPanelEnableDisable.java
Patch:
@@ -64,7 +64,7 @@ public Set<String> getActionNames() {
     public void doAction(ActionEvent e) {
         if (ActionNames.LOGGER_PANEL_ENABLE_DISABLE.equals(e.getActionCommand())) {
             GuiPackage guiInstance = GuiPackage.getInstance();
-            JSplitPane splitPane = ((JSplitPane) guiInstance.getLoggerPanel().getParent());
+            JSplitPane splitPane = (JSplitPane) guiInstance.getLoggerPanel().getParent();
             if (!guiInstance.getLoggerPanel().isVisible()) {
                 splitPane.setDividerSize(UIManager.getInt("SplitPane.dividerSize"));
                 guiInstance.getLoggerPanel().setVisible(true);

File: src/components/org/apache/jmeter/timers/ConstantThroughputTimer.java
Patch:
@@ -174,7 +174,7 @@ protected long calculateCurrentTarget(long currentTime) {
     private long calculateDelay() {
         long delay;
         // N.B. we fetch the throughput each time, as it may vary during a test
-        double msPerRequest = (MILLISEC_PER_MIN / getThroughput());
+        double msPerRequest = MILLISEC_PER_MIN / getThroughput();
         switch (mode) {
         case AllActiveThreads: // Total number of threads
             delay = Math.round(JMeterContextService.getNumberOfThreads() * msPerRequest);

File: src/components/org/apache/jmeter/timers/PoissonRandomTimer.java
Patch:
@@ -360,7 +360,7 @@ private static int poissonRandomNumberSup30(int lambda) {
             }
             double v = Math.random();
             double y = alpha - beta*x;
-            double lhs = y + Math.log(v/Math.pow((1.0 + Math.exp(y)),2));
+            double lhs = y + Math.log(v/Math.pow(1.0 + Math.exp(y),2));
             double rhs = k + n*Math.log(lambda) -logFactorial(n);
             if (lhs <= rhs) {
                 return n;

File: src/components/org/apache/jmeter/visualizers/RespTimeGraphVisualizer.java
Patch:
@@ -423,7 +423,7 @@ public double[][] getData() {
                         for (int cnt = 0; cnt < nlsize; cnt++) {
                             int pos = idx - (nlsize - cnt);
                             if (pos < 0) { pos = 0; }
-                            valPrev = (valPrev + ((nanLast - nanBegin) / (nlsize + 2)));
+                            valPrev = valPrev + ((nanLast - nanBegin) / (nlsize + 2));
                             data[s][pos] = valPrev;
                         }
                         nanList.clear();

File: src/components/org/apache/jmeter/visualizers/SearchTextExtension.java
Patch:
@@ -306,7 +306,7 @@ public boolean executeAndShowTextFind(Pattern pattern) {
                 Matcher matcher = null;
                 try {
                     Document contentDoc = results.getDocument();
-                    String body = contentDoc.getText(lastPosition, (contentDoc.getLength() - lastPosition));
+                    String body = contentDoc.getText(lastPosition, contentDoc.getLength() - lastPosition);
                     matcher = pattern.matcher(body);
 
                     if ((matcher != null) && (matcher.find())) {

File: src/core/org/apache/jmeter/gui/util/TextBoxDialoger.java
Patch:
@@ -56,7 +56,7 @@ public class TextBoxDialoger implements ActionListener {
     
     private static final String CLOSE_COMMAND = "close_dialog"; // $NON-NLS-1$
     
-    private static JDialog dialog;
+    private JDialog dialog;
     
     private JEditorPane textBox;
     

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -288,8 +288,6 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
 
     public static final String DEFAULT_DELIMITER = ","; // $NON_NLS-1$
 
-    private static final SampleSaveConfiguration STATIC_SAVE_CONFIGURATION = new SampleSaveConfiguration();
-
     /**
      * Read in the properties having to do with saving from a properties file.
      */
@@ -394,6 +392,8 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
         IDLE_TIME=TRUE.equalsIgnoreCase(props.getProperty(SAVE_IDLE_TIME, TRUE));
     }
 
+    private static final SampleSaveConfiguration STATIC_SAVE_CONFIGURATION = new SampleSaveConfiguration();
+
     // N.B. Remember to update the equals and hashCode methods when adding new variables.
 
     // Initialise values from properties

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/BinaryTCPClientImpl.java
Patch:
@@ -47,11 +47,11 @@
 public class BinaryTCPClientImpl extends AbstractTCPClient {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final int eomInt = JMeterUtils.getPropDefault("tcp.BinaryTCPClient.eomByte", 1000); // $NON_NLS-1$
+    private static final int EOM_INT = JMeterUtils.getPropDefault("tcp.BinaryTCPClient.eomByte", 1000); // $NON_NLS-1$
 
     public BinaryTCPClientImpl() {
         super();
-        setEolByte(eomInt);
+        setEolByte(EOM_INT);
         if (useEolByte) {
             log.info("Using eomByte=" + eolByte);
         }

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -104,6 +104,8 @@ public class TCPSampler extends AbstractSampler implements ThreadListener, Inter
 
     private static final Properties STATUS_PROPS = new Properties();
 
+    private static final String PROTO_PREFIX = "org.apache.jmeter.protocol.tcp.sampler."; //$NON-NLS-1$
+
     private static final boolean HAVE_STATUS_PROPS;
 
     static {
@@ -316,15 +318,13 @@ public String getLabel() {
         return ("tcp://" + this.getServer() + ":" + this.getPort());//$NON-NLS-1$ $NON-NLS-2$
     }
 
-    private static final String protoPrefix = "org.apache.jmeter.protocol.tcp.sampler."; //$NON-NLS-1$
-
     private Class<?> getClass(String className) {
         Class<?> c = null;
         try {
             c = Class.forName(className, false, Thread.currentThread().getContextClassLoader());
         } catch (ClassNotFoundException e) {
             try {
-                c = Class.forName(protoPrefix + className, false, Thread.currentThread().getContextClassLoader());
+                c = Class.forName(PROTO_PREFIX + className, false, Thread.currentThread().getContextClassLoader());
             } catch (ClassNotFoundException e1) {
                 log.error("Could not find protocol class '" + className+"'"); //$NON-NLS-1$
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -848,7 +848,7 @@ protected HttpRequestRetryHandler createHttpRequestRetryHandler() {
                 if (proxyUser.length() > 0) {                   
                     ((AbstractHttpClient) httpClient).getCredentialsProvider().setCredentials(
                             new AuthScope(proxyHost, proxyPort),
-                            new NTCredentials(proxyUser, proxyPass, localHost, PROXY_DOMAIN));
+                            new NTCredentials(proxyUser, proxyPass, LOCALHOST, PROXY_DOMAIN));
                 }
             }
 
@@ -1132,7 +1132,7 @@ private void setConnectionAuthorization(HttpClient client, URL url, AuthManager
             ((AbstractHttpClient) client).getCredentialsProvider();
         if (authManager != null) {
             if(authManager.hasAuthForURL(url)) {
-                authManager.setupCredentials(client, url, credentialsProvider, localHost);
+                authManager.setupCredentials(client, url, credentialsProvider, LOCALHOST);
             } else {
                 credentialsProvider.clear();
             }

File: src/core/org/apache/jmeter/util/SSLManager.java
Patch:
@@ -64,7 +64,7 @@ public abstract class SSLManager {
     //@GuardedBy("this")
     private static SSLManager manager;
 
-    private static final boolean isSSLSupported = true;
+    private static final boolean IS_SSL_SUPPORTED = true;
 
     /** Cache the KeyStore instance */
     private volatile JmeterKeyStore keyStore;
@@ -264,7 +264,7 @@ public static synchronized SSLManager getInstance() {
      * @return flag whether SSL is supported
      */
     public static boolean isSSLSupported() {
-        return SSLManager.isSSLSupported;
+        return SSLManager.IS_SSL_SUPPORTED;
     }
 
     /**

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -53,7 +53,7 @@
 public class Load extends AbstractActionWithNoRunningTest {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final boolean expandTree = JMeterUtils.getPropDefault("onload.expandtree", false); //$NON-NLS-1$
+    private static final boolean EXPAND_TREE = JMeterUtils.getPropDefault("onload.expandtree", false); //$NON-NLS-1$
 
     private static final Set<String> commands = new HashSet<>();
 
@@ -202,7 +202,7 @@ public static boolean insertLoadedTree(final int id, final HashTree tree, final
 
         ActionRouter.getInstance().actionPerformed(actionEvent);
         final JTree jTree = guiInstance.getMainFrame().getTree();
-        if (expandTree && !merging) { // don't automatically expand when merging
+        if (EXPAND_TREE && !merging) { // don't automatically expand when merging
             for(int i = 0; i < jTree.getRowCount(); i++) {
                 jTree.expandRow(i);
             }

File: src/core/org/apache/jmeter/functions/util/ArgumentDecoder.java
Patch:
@@ -26,11 +26,11 @@
 public final class ArgumentDecoder {
     private static final Perl5Util util = new Perl5Util();
 
-    private static final String expression = "s#[\\\\](.)#$1#g"; // $NON-NLS-1$
+    private static final String REGULAR_EXPRESSION = "s#[\\\\](.)#$1#g"; // $NON-NLS-1$
 
-// TODO does not appear to be used
+    // TODO does not appear to be used
     public static String decode(String s) {
-        return util.substitute(expression, s);
+        return util.substitute(REGULAR_EXPRESSION, s);
     }
 
     /**

File: src/core/org/apache/jmeter/functions/util/ArgumentEncoder.java
Patch:
@@ -26,11 +26,11 @@
 public final class ArgumentEncoder {
     private static final Perl5Util util = new Perl5Util();
 
-    private static final String expression = "s#([${}(),\\\\])#\\$1#g";
+    private static final String REGULAR_EXPRESSION = "s#([${}(),\\\\])#\\$1#g";
 
     // TODO does not appear to be used
     public static String encode(String s) {
-        return util.substitute(expression, s);
+        return util.substitute(REGULAR_EXPRESSION, s);
     }
 
     /**

File: src/core/org/apache/jmeter/engine/RemoteJMeterEngineImpl.java
Patch:
@@ -61,7 +61,7 @@ public final class RemoteJMeterEngineImpl extends java.rmi.server.UnicastRemoteO
     }
 
     // Should we create our own copy of the RMI registry?
-    private static final boolean createServer =
+    private static final boolean CREATE_SERVER =
         JMeterUtils.getPropDefault("server.rmi.create", true); // $NON-NLS-1$
 
     private final Object LOCK = new Object();
@@ -109,7 +109,7 @@ private void init() throws RemoteException {
                     + "\tCan be overridden by defining the system property 'java.rmi.server.hostname' - see jmeter-server script file");
         }
         log.debug("This = " + this);
-        if (createServer){
+        if (CREATE_SERVER){
             log.info("Creating RMI registry (server.rmi.create=true)");
             try {
                 LocateRegistry.createRegistry(this.rmiPort);

File: src/components/org/apache/jmeter/control/IncludeController.java
Patch:
@@ -40,7 +40,7 @@ public class IncludeController extends GenericController implements ReplaceableC
 
     private static final String INCLUDE_PATH = "IncludeController.includepath"; //$NON-NLS-1$
 
-    private static  final String prefix =
+    private static  final String PREFIX =
         JMeterUtils.getPropDefault(
                 "includecontroller.prefix", //$NON-NLS-1$
                 ""); //$NON-NLS-1$
@@ -121,7 +121,7 @@ protected HashTree loadIncludedElements() {
         final String includePath = getIncludePath();
         HashTree tree = null;
         if (includePath != null && includePath.length() > 0) {
-            String fileName=prefix+includePath;
+            String fileName=PREFIX+includePath;
             try {
                 File file = new File(fileName.trim());
                 final String absolutePath = file.getAbsolutePath();

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -60,18 +60,18 @@ public class TableVisualizer extends AbstractVisualizer implements Clearable {
 
     private static final long serialVersionUID = 240L;
 
-    private static final String iconSize = JMeterUtils.getPropDefault(JMeter.TREE_ICON_SIZE, JMeter.DEFAULT_TREE_ICON_SIZE);
+    private static final String ICON_SIZE = JMeterUtils.getPropDefault(JMeter.TREE_ICON_SIZE, JMeter.DEFAULT_TREE_ICON_SIZE);
 
     // Note: the resource string won't respond to locale-changes,
     // however this does not matter as it is only used when pasting to the clipboard
     private static final ImageIcon imageSuccess = JMeterUtils.getImage(
             JMeterUtils.getPropDefault("viewResultsTree.success",  //$NON-NLS-1$
-                                       "vrt/" + iconSize + "/security-high-2.png"),    //$NON-NLS-1$ $NON-NLS-2$
+                                       "vrt/" + ICON_SIZE + "/security-high-2.png"),    //$NON-NLS-1$ $NON-NLS-2$
             JMeterUtils.getResString("table_visualizer_success")); //$NON-NLS-1$
 
     private static final ImageIcon imageFailure = JMeterUtils.getImage(
             JMeterUtils.getPropDefault("viewResultsTree.failure",  //$NON-NLS-1$
-                                       "vrt/" + iconSize + "/security-low-2.png"),    //$NON-NLS-1$ $NON-NLS-2$
+                                       "vrt/" + ICON_SIZE + "/security-low-2.png"),    //$NON-NLS-1$ $NON-NLS-2$
             JMeterUtils.getResString("table_visualizer_warning")); //$NON-NLS-1$
 
     private static final String[] COLUMNS = new String[] {

File: src/components/org/apache/jmeter/visualizers/TreeNodeRenderer.java
Patch:
@@ -37,16 +37,16 @@ public class TreeNodeRenderer extends DefaultTreeCellRenderer {
 
     private static final long serialVersionUID = 240L;
 
-    private static final String iconSize = JMeterUtils.getPropDefault(JMeter.TREE_ICON_SIZE, JMeter.DEFAULT_TREE_ICON_SIZE);
+    private static final String ICON_SIZE = JMeterUtils.getPropDefault(JMeter.TREE_ICON_SIZE, JMeter.DEFAULT_TREE_ICON_SIZE);
 
     // Same ViewResultsTree
     private static final ImageIcon imageSuccess = JMeterUtils.getImage(
             JMeterUtils.getPropDefault("viewResultsTree.success",  //$NON-NLS-1$
-                    "vrt/" + iconSize + "/security-high-2.png")); //$NON-NLS-1$ $NON-NLS-2$
+                    "vrt/" + ICON_SIZE + "/security-high-2.png")); //$NON-NLS-1$ $NON-NLS-2$
 
     private static final ImageIcon imageFailure = JMeterUtils.getImage(
             JMeterUtils.getPropDefault("viewResultsTree.failure",  //$NON-NLS-1$
-                    "vrt/" + iconSize + "/security-low-2.png")); //$NON-NLS-1$ $NON-NLS-2$
+                    "vrt/" + ICON_SIZE + "/security-low-2.png")); //$NON-NLS-1$ $NON-NLS-2$
 
     public TreeNodeRenderer() {
         super();

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -105,15 +105,15 @@ public class ViewResultsFullVisualizer extends AbstractVisualizer
 
     protected static final String COMBO_CHANGE_COMMAND = "change_combo"; // $NON-NLS-1$
 
-    private static final String iconSize = JMeterUtils.getPropDefault(JMeter.TREE_ICON_SIZE, JMeter.DEFAULT_TREE_ICON_SIZE);
+    private static final String ICON_SIZE = JMeterUtils.getPropDefault(JMeter.TREE_ICON_SIZE, JMeter.DEFAULT_TREE_ICON_SIZE);
 
     private static final ImageIcon imageSuccess = JMeterUtils.getImage(
             JMeterUtils.getPropDefault("viewResultsTree.success",  //$NON-NLS-1$
-                    "vrt/" + iconSize + "/security-high-2.png")); //$NON-NLS-1$ $NON-NLS-2$
+                    "vrt/" + ICON_SIZE + "/security-high-2.png")); //$NON-NLS-1$ $NON-NLS-2$
 
     private static final ImageIcon imageFailure = JMeterUtils.getImage(
             JMeterUtils.getPropDefault("viewResultsTree.failure",  //$NON-NLS-1$
-                    "vrt/" + iconSize + "/security-low-2.png")); //$NON-NLS-1$ $NON-NLS-2$
+                    "vrt/" + ICON_SIZE + "/security-low-2.png")); //$NON-NLS-1$ $NON-NLS-2$
 
     // Maximum size that we will display
     // Default limited to 10 megabytes

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -219,7 +219,7 @@ public class ProxyControl extends GenericController {
     /**
      * Whether to use dymanic key generation (if supported)
      */
-    private static final boolean USE_DYNAMIC_KEYS = JMeterUtils.getPropDefault("proxy.cert.dynamic_keys", true); // $NON-NLS-1$;
+    private static final boolean USE_DYNAMIC_KEYS = JMeterUtils.getPropDefault("proxy.cert.dynamic_keys", true); // $NON-NLS-1$
 
     // The alias to be used if dynamic host names are not possible
     static final String JMETER_SERVER_ALIAS = ":jmeter:"; // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -996,7 +996,7 @@ private String getResponseHeaders(HttpResponse response, HttpContext localContex
     private void writeResponseHeader(StringBuilder headerBuffer, Header responseHeader) {
         if(responseHeader instanceof BufferedHeader) {
             CharArrayBuffer buffer = ((BufferedHeader)responseHeader).getBuffer();
-            headerBuffer.append(buffer.buffer(), 0, buffer.length()).append('\n'); // $NON-NLS-1$;
+            headerBuffer.append(buffer.buffer(), 0, buffer.length()).append('\n'); // $NON-NLS-1$
         }
         else {
             headerBuffer.append(responseHeader.getName())

File: src/core/org/apache/jmeter/gui/util/FileListPanel.java
Patch:
@@ -127,7 +127,6 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         browse.addActionListener(this);
         clear.addActionListener(this);
         delete.addActionListener(this);
-        //this.setPreferredSize(new Dimension(400,150));
     }
 
     /**

File: src/core/org/apache/jmeter/gui/util/JSyntaxTextArea.java
Patch:
@@ -38,7 +38,7 @@ public class JSyntaxTextArea extends RSyntaxTextArea {
 
     private static final long serialVersionUID = 210L;
 
-    private final Properties languageProperties = JMeterUtils.loadProperties("org/apache/jmeter/gui/util/textarea.properties"); //$NON-NLS-1$;
+    private final Properties languageProperties = JMeterUtils.loadProperties("org/apache/jmeter/gui/util/textarea.properties"); //$NON-NLS-1$
 
     private final boolean disableUndo;
     private static final boolean WRAP_STYLE_WORD = JMeterUtils.getPropDefault("jsyntaxtextarea.wrapstyleword", true);

File: src/core/org/apache/jmeter/gui/util/FilePanelEntry.java
Patch:
@@ -82,7 +82,7 @@ public FilePanelEntry(String label, boolean onlyDirectories, ChangeListener list
             listeners.add(listener);
         }
         if (exts != null && 
-          !(exts.length == 1 && exts[0] == null) // String null is converted to String[]{null}
+          !(exts.length == 1 && exts[0] == null) // String null is converted to String[]{null} NOSONAR it's not code
             ) {
             this.filetypes = new String[exts.length];
             System.arraycopy(exts, 0, this.filetypes, 0, exts.length);

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -164,7 +164,6 @@ static void loadProjectFile(final ActionEvent e, final File f, final boolean mer
      */
     // Does not appear to be used externally; called by #loadProjectFile()
     public static boolean insertLoadedTree(final int id, final HashTree tree, final boolean merging) throws IllegalUserActionException {
-        // convertTree(tree);
         if (tree == null) {
             throw new IllegalUserActionException("Empty TestPlan or error reading test plan - see log file");
         }

File: src/core/org/apache/jmeter/gui/action/SelectTemplatesDialog.java
Patch:
@@ -73,15 +73,15 @@ public class SelectTemplatesDialog extends JDialog implements ChangeListener, Ac
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private final JLabeledChoice templateList = new JLabeledChoice(JMeterUtils.getResString("template_choose"), false); //$NON-NLS-1$;
+    private final JLabeledChoice templateList = new JLabeledChoice(JMeterUtils.getResString("template_choose"), false); //$NON-NLS-1$
 
     private final HtmlPane helpDoc = new HtmlPane();
 
-    private final JButton reloadTemplateButton = new JButton(JMeterUtils.getResString("template_reload")); //$NON-NLS-1$;
+    private final JButton reloadTemplateButton = new JButton(JMeterUtils.getResString("template_reload")); //$NON-NLS-1$
 
     private final JButton applyTemplateButton = new JButton();
 
-    private final JButton cancelButton = new JButton(JMeterUtils.getResString("cancel")); //$NON-NLS-1$;
+    private final JButton cancelButton = new JButton(JMeterUtils.getResString("cancel")); //$NON-NLS-1$
     
     private final JScrollPane scroller = new JScrollPane(helpDoc);
 

File: src/core/org/apache/jmeter/control/GenericController.java
Patch:
@@ -167,7 +167,6 @@ public Sampler next() {
             TestElement currentElement = getCurrentElement();
             setCurrentElement(currentElement);
             if (currentElement == null) {
-                // incrementCurrent();
                 returnValue = nextIsNull();
             } else {
                 if (currentElement instanceof Sampler) {

File: src/core/org/apache/jmeter/control/TransactionSampler.java
Patch:
@@ -63,7 +63,7 @@ public class TransactionSampler extends AbstractSampler {
      */
     @Deprecated
     public TransactionSampler(){
-        //log.warn("Constructor only intended for use in testing");
+        super();
     }
 
     public TransactionSampler(TransactionController controller, String name) {

File: src/core/org/apache/jmeter/config/gui/ObsoleteGui.java
Patch:
@@ -46,7 +46,6 @@ public ObsoleteGui(){
     private void init() { // WARNING: called from ctor so must not be overridden (i.e. must be private or final)
         setLayout(new BorderLayout(0, 10));
         setBorder(makeBorder());
-        //add(makeTitlePanel(), BorderLayout.NORTH);
         add(obsoleteMessage,BorderLayout.WEST);
     }
 

File: src/core/org/apache/jmeter/config/gui/SimpleConfigGui.java
Patch:
@@ -282,9 +282,6 @@ protected void deleteArgument() {
         int rowSelected = table.getSelectedRow();
 
         if (rowSelected >= 0) {
-
-            // removeProperty(tableModel.getValueAt (
-            // table.getSelectedRow(),0).toString());
             tableModel.removeRow(rowSelected);
             tableModel.fireTableDataChanged();
 

File: src/components/org/apache/jmeter/visualizers/RespTimeGraphVisualizer.java
Patch:
@@ -433,7 +433,6 @@ public double[][] getData() {
                     nanBegin = nanLast;
                     data[s][idx] = Double.NaN;
                 }
-                // log.debug("data["+s+"]["+idx+"]: " + data[s][idx]);
                 idx++;
             }
             s++;

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -171,8 +171,6 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
 
         mainPanel.add(makeTitlePanel());
 
-        // SortFilterModel mySortedModel =
-        // new SortFilterModel(myStatTableModel);
         myJTable = new JTable(model);
         JMeterUtils.applyHiDPI(myJTable);
         myJTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer(StatGraphVisualizer.getColumnsMsgParameters()));

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -55,8 +55,6 @@
  * and the standard deviation of the sampling process. The samples are displayed
  * in a JTable, and the statistics are displayed at the bottom of the table.
  *
- * created March 10, 2002
- *
  */
 public class TableVisualizer extends AbstractVisualizer implements Clearable {
 
@@ -242,7 +240,6 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         table = new JTable(model);
         JMeterUtils.applyHiDPI(table);
         table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
-        // table.getTableHeader().setReorderingAllowed(false);
         RendererUtils.applyRenderers(table, RENDERERS);
 
         tableScrollPanel = new JScrollPane(table);

File: src/components/org/apache/jmeter/visualizers/Graph.java
Patch:
@@ -85,7 +85,6 @@ public Graph(CachingStatCalculator model) {
     @Override
     public Dimension getPreferredScrollableViewportSize() {
         return this.getPreferredSize();
-        // return new Dimension(width, 400);
     }
 
     /**
@@ -208,7 +207,6 @@ public void paintComponent(Graphics g) {
     }
 
     private void drawSample(long x, Sample oneSample, Graphics g) {
-        // int width = getWidth();
         int height = getHeight();
         log.debug("Drawing a sample at " + x);
         int adjustedWidth = (int)(x % WIDTH); // will always be within range of an int: as must be < width

File: src/components/org/apache/jmeter/visualizers/PropertyControlGui.java
Patch:
@@ -33,10 +33,8 @@
 import java.util.Properties;
 import java.util.Set;
 
-//import javax.swing.BorderFactory;
 import javax.swing.Box;
 import javax.swing.ButtonGroup;
-//import javax.swing.JButton;
 import javax.swing.JCheckBox;
 import javax.swing.JLabel;
 import javax.swing.JPanel;

File: src/components/org/apache/jmeter/control/ForeachController.java
Patch:
@@ -228,7 +228,6 @@ protected Sampler nextIsNull() throws NextIsNullException {
         if (endOfArguments() // no more variables to iterate
                 ||loopCount >= getEndIndex() // we reached end index
                 ) {
-            // setDone(true);
             resetLoopCount();
             return null;
         }

File: src/components/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -70,7 +70,8 @@ public Object clone() {
         if (selectedNode == null) {
             this.restoreSelected();
         }
-        clone.selectedNode = selectedNode; // TODO ?? (JMeterTreeNode) selectedNode.clone();
+        // TODO Should we clone instead the selectedNode?
+        clone.selectedNode = selectedNode; 
         return clone;
     }
 

File: src/components/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -74,7 +74,7 @@ public class ResponseAssertion extends AbstractScopedAssertion implements Serial
      * Mask values for TEST_TYPE 
      * they are mutually exclusive
      */
-    private static final int MATCH = 1; // 1 << 0;
+    private static final int MATCH = 1; // 1 << 0; // NOSONAR We want this comment
 
     private static final int CONTAINS = 1 << 1;
 

File: src/functions/org/apache/jmeter/functions/Random.java
Patch:
@@ -45,7 +45,9 @@ public class Random extends AbstractFunction {
         desc.add(JMeterUtils.getResString("function_name_paropt")); //$NON-NLS-1$
     }
 
-    private CompoundVariable varName, minimum, maximum;
+    private CompoundVariable varName; 
+    private CompoundVariable minimum;
+    private CompoundVariable maximum;
 
     /**
      * No-arg constructor.

File: src/core/org/apache/jmeter/util/XPathUtil.java
Patch:
@@ -233,7 +233,8 @@ public static Tidy makeTidyParser(boolean quiet, boolean showWarnings, boolean i
     }
 
     static class MyErrorHandler implements ErrorHandler {
-        private final boolean val, tol;
+        private final boolean val;
+        private final boolean tol;
 
         private final String type;
 

File: src/jorphan/org/apache/jorphan/gui/JLabeledChoice.java
Patch:
@@ -46,7 +46,8 @@ public class JLabeledChoice extends JPanel implements JLabeledField {
 
     private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<>(3);
 
-    private JButton delete, add;
+    private JButton delete;
+    private JButton add;
 
     /**
      * Default constructor, The label and the Text field are left empty.

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpMirrorControlGui.java
Patch:
@@ -55,7 +55,8 @@ public class HttpMirrorControlGui extends LogicControllerGui
 
     private JTextField maxQueueSizeField;
 
-    private JButton stop, start;
+    private JButton stop;
+    private JButton start;
 
     private static final String ACTION_STOP = "stop"; // $NON-NLS-1$
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -189,7 +189,9 @@ public class ProxyControlGui extends LogicControllerGui implements JMeterGUIComp
 
     private static final String CHANGE_TARGET = "change_target"; // $NON-NLS-1$
 
-    private JButton stop, start, restart;
+    private JButton stop;
+    private JButton start;
+    private JButton restart;
 
     //+ action names
     private static final String STOP = "stop"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/engine/util/CompoundVariable.java
Patch:
@@ -49,7 +49,8 @@ public class CompoundVariable implements Function {
     // Created during class init; not modified thereafter 
     private static final Map<String, Class<? extends Function>> functions = new HashMap<>();
 
-    private boolean hasFunction, isDynamic;
+    private boolean hasFunction;
+    private boolean isDynamic;
 
     private String permanentResults;
 

File: src/components/org/apache/jmeter/visualizers/AxisGraph.java
Patch:
@@ -70,7 +70,8 @@ public class AxisGraph extends JPanel {
     protected String yAxisLabel;
     protected int maxLength;
     protected String[] xAxisLabels;
-    protected int width, height;
+    protected int width;
+    protected int height;
     
     protected String[] legendLabels = { JMeterUtils.getResString("aggregate_graph_legend") }; // $NON-NLS-1$
     

File: src/components/org/apache/jmeter/visualizers/ComparisonVisualizer.java
Patch:
@@ -51,7 +51,8 @@ public class ComparisonVisualizer extends AbstractVisualizer implements Clearabl
 
     private DefaultMutableTreeNode root;
 
-    private JTextPane base, secondary;
+    private JTextPane base;
+    private JTextPane secondary;
 
     public ComparisonVisualizer() {
         super();

File: src/components/org/apache/jmeter/visualizers/PropertyControlGui.java
Patch:
@@ -138,9 +138,8 @@ private void setUpData(){
         Collections.sort(al, new Comparator<Map.Entry<Object, Object>>(){
             @Override
             public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {
-                String m1, m2;
-                m1 = (String) o1.getKey();
-                m2 = (String) o2.getKey();
+                String m1 = (String) o1.getKey();
+                String m2 = (String) o2.getKey();
                 return m1.compareTo(m2);
             }
         });

File: src/components/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -251,7 +251,7 @@ public void unsetNotType() {
     }
     
     public void setToOrType() {
-        setTestType((getTestType() | OR));
+        setTestType(getTestType() | OR);
     }
 
     public void unsetOrType() {

File: src/components/org/apache/jmeter/visualizers/SearchTextExtension.java
Patch:
@@ -240,9 +240,8 @@ public void resetTextToFind() {
     private Pattern createPattern(String textToFind) {
         // desactivate or not specials regexp char
         String textToFindQ = regexpChkBox.isSelected() ? textToFind : Pattern.quote(textToFind);        
-        Pattern pattern = caseChkBox.isSelected() ? Pattern.compile(textToFindQ) :
+        return caseChkBox.isSelected() ? Pattern.compile(textToFindQ) :
             Pattern.compile(textToFindQ, Pattern.CASE_INSENSITIVE);
-        return pattern;
     }
     
     /**

File: src/components/org/apache/jmeter/assertions/gui/AssertionGui.java
Patch:
@@ -112,7 +112,7 @@ public class AssertionGui extends AbstractAssertionGui {
     private JCheckBox notBox;
     
     /**
-	 * Add new OR checkbox.
+     * Add new OR checkbox.
      */
     private JCheckBox orBox;
 

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -118,7 +118,7 @@ public void add(final SampleResult res) {
         JMeterUtils.runSafe(false, new Runnable() {
             @Override
             public void run() {
-                SamplingStatCalculator row = null;
+                SamplingStatCalculator row;
                 final String sampleLabel = res.getSampleLabel(useGroupName.isSelected());
                 synchronized (lock) {
                     row = tableRows.get(sampleLabel);

File: src/components/org/apache/jmeter/visualizers/SummaryReport.java
Patch:
@@ -185,7 +185,7 @@ public void add(final SampleResult res) {
         JMeterUtils.runSafe(false, new Runnable() {
             @Override
             public void run() {
-                Calculator row = null;
+                Calculator row;
                 synchronized (lock) {
                     row = tableRows.get(sampleLabel);
                     if (row == null) {

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -248,7 +248,7 @@ private void init() {  // WARNING: called from ctor so must not be overridden (i
     @Override
     public void valueChanged(TreeSelectionEvent e) {
         lastSelectionEvent = e;
-        DefaultMutableTreeNode node = null;
+        DefaultMutableTreeNode node;
         synchronized (this) {
             node = (DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();
         }

File: src/core/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -129,7 +129,7 @@ public void runTest() throws JMeterEngineException {
             String scriptName = FileServer.getFileServer().getScriptName();
             synchronized(LOCK)
             {
-                methodName="rconfigure()";
+                methodName="rconfigure()"; // NOSONAR Used for tracing
                 remote.rconfigure(testTree, host, baseDirRelative, scriptName);
             }
             log.info("sent test to " + host + " basedir='"+baseDirRelative+"'"); // $NON-NLS-1$
@@ -138,7 +138,7 @@ public void runTest() throws JMeterEngineException {
             }
             log.info("Sending properties "+savep);
             try {
-                methodName="rsetProperties()";
+                methodName="rsetProperties()";// NOSONAR Used for tracing
                 remote.rsetProperties(savep);
             } catch (RemoteException e) {
                 log.warn("Could not set properties: " + e.toString());

File: src/components/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -290,7 +290,7 @@ public void setupTabPane() {
                 statsBuff.append("ContentType: ").append(sampleResult.getContentType()).append(NL); //$NON-NLS-1$
                 statsBuff.append("DataEncoding: ").append(sampleResult.getDataEncodingNoDefault()).append(NL); //$NON-NLS-1$
                 statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);
-                statsBuff = null; // Done
+                statsBuff = null; // NOSONAR Help gc
                 
                 // Tabbed results: fill table
                 resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel("view_results_thread_name"), sampleResult.getThreadName())); //$NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -240,9 +240,8 @@ public void actionPerformed(ActionEvent e) {
      */
     private static CookieHandler getCookieHandler(String cookieHandlerClass) {
         try {
-            CookieHandler cookieHandler = (CookieHandler) 
+            return (CookieHandler) 
                     ClassUtils.getClass(cookieHandlerClass).newInstance();
-            return cookieHandler;
         } catch (Exception e) {
             log.error("Error creating implementation:"+cookieHandlerClass+ ", will default to:"+DEFAULT_IMPLEMENTATION, e);
             return getCookieHandler(DEFAULT_IMPLEMENTATION);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1480,7 +1480,7 @@ public void testStarted(String host) {
      */
     @Override
     public Object clone() {
-        return (HTTPSamplerBase) super.clone();
+        return super.clone();
     }
 
     /**

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -84,7 +84,7 @@ public class ThreadGroup extends AbstractThreadGroup {
     // List of active threads
     private final Map<JMeterThread, Thread> allThreads = new ConcurrentHashMap<>();
     
-    private transient final Object addThreadLock = new Object();
+    private final transient Object addThreadLock = new Object();
 
     /**
      * Is test (still) running?

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -84,7 +84,7 @@ public class ThreadGroup extends AbstractThreadGroup {
     // List of active threads
     private final Map<JMeterThread, Thread> allThreads = new ConcurrentHashMap<>();
     
-    private final Object addThreadLock = new Object();
+    private transient final Object addThreadLock = new Object();
 
     /**
      * Is test (still) running?

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorControl.java
Patch:
@@ -22,10 +22,9 @@
 import org.apache.jmeter.testelement.AbstractTestElement;
 import org.apache.jmeter.testelement.property.IntegerProperty;
 
-//For unit tests, @see TestHttpMirrorControl
-
 /**
  * Test element that implements the Workbench HTTP Mirror function
+ * For unit tests, @see TestHttpMirrorControl
  */
 public class HttpMirrorControl extends AbstractTestElement {
 
@@ -144,6 +143,7 @@ public void stopHttpMirror() {
             try {
                 server.join(1000); // wait for server to stop
             } catch (InterruptedException e) {
+                Thread.currentThread().interrupt();
             }
             server = null;
         }

File: src/core/org/apache/jmeter/gui/action/Help.java
Patch:
@@ -98,7 +98,7 @@ public void doAction(ActionEvent e) {
         try {
             helpDoc.setPage(url.toString()); // N.B. this only reloads if necessary (ignores the reference)
         } catch (IOException ioe) {
-            log.error(ioe.toString());
+            log.error("Error setting page for url"+url, ioe);
             helpDoc.setText("<html><head><title>Problem loading help page</title>"
                     + "<style><!--"
                     + ".note { background-color: #ffeeee; border: 1px solid brown; }"

File: src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteBackendListenerClient.java
Patch:
@@ -320,6 +320,7 @@ public void teardownTest(BackendListenerContext context) throws Exception {
             scheduler.awaitTermination(30, TimeUnit.SECONDS);
         } catch (InterruptedException e) {
             LOGGER.error("Error waiting for end of scheduler");
+            Thread.currentThread().interrupt();
         }
         // Send last set of data before ending
         sendMetrics();

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/FixedQueueExecutor.java
Patch:
@@ -107,6 +107,7 @@ public Message sendAndReceive(Message request,
 
         } catch (InterruptedException e) {
             log.warn("Interrupt exception caught", e);
+            Thread.currentThread().interrupt();
         }
         return admin.get(id);
     }

File: src/core/org/apache/jmeter/util/CPSPauser.java
Patch:
@@ -49,13 +49,14 @@ public CPSPauser(int cps){
      */
     public void pause(int bytes){
         long sleepMS = (bytes*MS_PER_SEC)/charactersPerSecond;
-        int sleepNS = Long.valueOf(sleepMS % NS_PER_MS).intValue();
+        int sleepNS = Long.valueOf(sleepMS % NS_PER_MS).intValue(); // NOSONAR Where is the boxing to Long
         try {
             if(sleepMS>0 || sleepNS>0) {
                 Thread.sleep(sleepMS,sleepNS);
             }
         } catch (InterruptedException ignored) {
             // NOOP
+            Thread.currentThread().interrupt();
         }
     }
 }

File: src/components/org/apache/jmeter/timers/BeanShellTimer.java
Patch:
@@ -51,7 +51,9 @@ public long delay() {
         }
         try {
             Object o = processFileOrScript(bshInterpreter);
-            if (o != null) { ret=o.toString(); }
+            if (o != null) { 
+                ret=o.toString(); 
+            }
         } catch (JMeterException e) {
             log.warn("Problem in BeanShell script "+e);
         }

File: src/protocol/java/org/apache/jmeter/protocol/java/test/SleepTest.java
Patch:
@@ -162,6 +162,7 @@ public SampleResult runTest(JavaSamplerContext context) {
             LOG.warn("SleepTest: interrupted.");
             results.setSuccessful(false);
             results.setResponseMessage(e.toString());
+            Thread.currentThread().interrupt();
         } catch (Exception e) {
             LOG.error("SleepTest: error during sample", e);
             results.setSuccessful(false);
@@ -207,8 +208,8 @@ public Arguments getDefaultParameters() {
     private void listParameters(JavaSamplerContext context) {
         Iterator<String> argsIt = context.getParameterNamesIterator();
         while (argsIt.hasNext()) {
-            String name = argsIt.next();
-            LOG.debug(name + "=" + context.getParameter(name));
+            String lName = argsIt.next();
+            LOG.debug(lName + "=" + context.getParameter(lName));
         }
     }
 

File: src/protocol/java/org/apache/jmeter/protocol/java/test/JavaTest.java
Patch:
@@ -173,7 +173,7 @@ private void setupValues(JavaSamplerContext context) {
 
         responseCode = context.getParameter(RESPONSE_CODE_NAME, RESPONSE_CODE_DEFAULT);
 
-        success = context.getParameter(SUCCESS_NAME, SUCCESS_DEFAULT).equalsIgnoreCase("OK");
+        success = "OK".equalsIgnoreCase(context.getParameter(SUCCESS_NAME, SUCCESS_DEFAULT));
 
         label = context.getParameter(LABEL_NAME, "");
         if (label.length() == 0) {
@@ -309,6 +309,7 @@ public SampleResult runTest(JavaSamplerContext context) {
             }
             results.setSuccessful(success);
         } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
             LOG.warn("JavaTest: interrupted.");
             results.setSuccessful(false);
         } catch (Exception e) {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
Patch:
@@ -329,6 +329,7 @@ public Message getMessage(long timeout) throws JMSException {
                 }
             } catch (InterruptedException e) {
                 // Ignored
+                Thread.currentThread().interrupt();
             }
             return message;
         }
@@ -352,7 +353,7 @@ public void close() { // called by SubscriberSampler#threadFinished()
                 connectionStarted = false;
             }
         } catch (JMSException e) {
-            log.warn("Stopping connection throws exception, message:"+e.getMessage());
+            log.warn("Stopping connection throws exception, message:"+e.getMessage(), e);
         }
         Utils.close(subscriber, log);
         Utils.close(session, log);
@@ -378,6 +379,6 @@ public void onMessage(Message message) {
      * @return True if input is null, an empty string, or a white space-only string
      */
     private boolean isEmpty(String s1) {
-        return (s1 == null || s1.trim().isEmpty());
+        return s1 == null || s1.trim().isEmpty();
     }
 }

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -173,9 +173,9 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         // new SortFilterModel(myStatTableModel);
         myJTable = new JTable(model);
         JMeterUtils.applyHiDPI(myJTable);
-        myJTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer(StatGraphVisualizer.COLUMNS_MSG_PARAMETERS));
+        myJTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer(StatGraphVisualizer.getColumnsMsgParameters()));
         myJTable.setPreferredScrollableViewportSize(new Dimension(500, 70));
-        RendererUtils.applyRenderers(myJTable, StatGraphVisualizer.RENDERERS);
+        RendererUtils.applyRenderers(myJTable, StatGraphVisualizer.getRenderers());
         myScrollPane = new JScrollPane(myJTable);
         this.add(mainPanel, BorderLayout.NORTH);
         this.add(myScrollPane, BorderLayout.CENTER);
@@ -209,7 +209,7 @@ public void actionPerformed(ActionEvent ev) {
                 return;
             }
             try (FileWriter writer = new FileWriter(chooser.getSelectedFile());){  // TODO Charset ?
-                CSVSaveService.saveCSVStats(StatGraphVisualizer.getAllTableData(model, StatGraphVisualizer.FORMATS),
+                CSVSaveService.saveCSVStats(StatGraphVisualizer.getAllTableData(model, StatGraphVisualizer.getFormatters()),
                         writer,
                         saveHeaders.isSelected() ? StatGraphVisualizer.getLabels(StatGraphVisualizer.getColumns()) : null);
             } catch (IOException e) {

File: src/core/org/apache/jmeter/samplers/DiskStoreSampleSender.java
Patch:
@@ -86,6 +86,7 @@ public void run() {
             }
         } catch (InterruptedException e1) {
             log.error("Executor did not terminate in a timely fashion", e1);
+            Thread.currentThread().interrupt();
         }
         ObjectInputStream ois = null;
         try {

File: src/components/org/apache/jmeter/modifiers/UserParameters.java
Patch:
@@ -44,13 +44,13 @@ public class UserParameters extends AbstractTestElement implements Serializable,
 
     public static final String PER_ITERATION = "UserParameters.per_iteration";// $NON-NLS-1$
 
-    /*
+    /**
      * Although the lock appears to be an instance lock, in fact the lock is
-     * shared between all threads in a thread group, but different thread groups
-     * have different locks - see the clone() method below
+     * shared between all threads see the clone() method below
      *
      * The lock ensures that all the variables are processed together, which is
      * important for functions such as __CSVRead and _StringFromFile.
+     * But it has a performance drawback.
      */
     private transient Object lock = new Object();
 

File: src/core/org/apache/jmeter/gui/action/SearchTreeDialog.java
Patch:
@@ -278,8 +278,8 @@ private void doReplaceAll(ActionEvent e) {
         GuiPackage.getInstance().updateCurrentNode();
         // reset previous result
         ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.SEARCH_RESET));
-        Searcher searcher = null;
-        String regex = null;
+        Searcher searcher;
+        String regex;
         if (isRegexpCB.isSelected()) {
             regex = wordToSearch;
             searcher = new RegexpSearcher(isCaseSensitiveCB.isSelected(), wordToSearch);

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -310,8 +310,6 @@ public class JMeter implements JMeterPlugin {
             D_REPORT_OUTPUT_FOLDER_OPT,
     };
     
-    private JMeter parent;
-
     /** Properties to be sent to remote servers */
     private Properties remoteProps; 
 
@@ -859,7 +857,6 @@ private void startNonGui(String testFile, String logFile, CLOption remoteStart,
         JMeter driver = new JMeter();// TODO - why does it create a new instance?
         driver.remoteProps = this.remoteProps;
         driver.remoteStop = this.remoteStop;
-        driver.parent = this;
         PluginManager.install(this, false);
 
         String remoteHostsString = null;

File: src/core/org/apache/jmeter/samplers/HoldSampleSender.java
Patch:
@@ -30,7 +30,6 @@
  * Lars-Erik Helander provided the idea (and original implementation) for the
  * caching functionality (sampleStore).
  */
-
 public class HoldSampleSender extends AbstractSampleSender implements Serializable {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
@@ -89,7 +88,7 @@ public void sampleOccurred(SampleEvent e) {
      * @throws ObjectStreamException
      *             never
      */
-    private Object readResolve() throws ObjectStreamException{
+    protected Object readResolve() throws ObjectStreamException{
         log.warn("Using HoldSampleSender for this test run, ensure you have configured enough memory (-Xmx) for your test"); // server        
         return this;
     }

File: src/core/org/apache/jmeter/report/processor/ListResultData.java
Patch:
@@ -39,7 +39,7 @@ public class ListResultData implements ResultData, Iterable<ResultData> {
      * .report.processor.ResultDataVisitor)
      */
     @Override
-    public <TVisit> TVisit accept(ResultDataVisitor<TVisit> visitor) {
+    public <T> T accept(ResultDataVisitor<T> visitor) {
         return visitor.visitListResult(this);
     }
 

File: src/core/org/apache/jmeter/report/processor/MapResultData.java
Patch:
@@ -40,7 +40,7 @@ public class MapResultData implements ResultData {
      * .report.processor.ResultDataVisitor)
      */
     @Override
-    public <TVisit> TVisit accept(ResultDataVisitor<TVisit> visitor) {
+    public <T> T accept(ResultDataVisitor<T> visitor) {
         return visitor.visitMapResult(this);
     }
 

File: src/core/org/apache/jmeter/report/processor/ValueResultData.java
Patch:
@@ -69,7 +69,7 @@ public ValueResultData(Object value) {
      * .report.processor.ResultDataVisitor)
      */
     @Override
-    public <TVisit> TVisit accept(ResultDataVisitor<TVisit> visitor) {
+    public <T> T accept(ResultDataVisitor<T> visitor) {
         return visitor.visitValueResult(this);
     }
 

File: src/core/org/apache/jmeter/report/processor/ResultData.java
Patch:
@@ -29,6 +29,7 @@ public interface ResultData {
      *
      * @param visitor
      *            the visitor (must not be {@code null})
+     * @paran <T> type of the results of the {@link ResultDataVisitor}
      */
-    <TVisit> TVisit accept(ResultDataVisitor<TVisit> visitor);
+    <T> T accept(ResultDataVisitor<T> visitor);
 }

File: src/functions/org/apache/jmeter/functions/LogFunction.java
Patch:
@@ -126,7 +126,7 @@ private static void printDetails(java.io.PrintStream ps, String s, Throwable t,
         if (t != null) {
             sb.append(' ');
             ps.print(sb.toString());
-            t.printStackTrace(ps);
+            t.printStackTrace(ps); // NOSONAR we're printing stack trace to log
         } else {
             ps.println(sb.toString());
         }

File: src/core/org/apache/jmeter/util/JSR223BeanInfoSupport.java
Patch:
@@ -38,7 +38,7 @@ public abstract class JSR223BeanInfoSupport extends ScriptingBeanInfoSupport {
 
     private static final String[] LANGUAGE_TAGS;
 
-    public static final String[][] LANGUAGE_NAMES;
+    private static final String[][] LANGUAGE_NAMES;
 
     static {
         Map<String, ScriptEngineFactory> nameMap = new HashMap<>();

File: src/core/org/apache/jmeter/NewDriver.java
Patch:
@@ -258,7 +258,7 @@ public static void main(String[] args) {
             Method startup = initialClass.getMethod("start", new Class[] { new String[0].getClass() });// $NON-NLS-1$
             startup.invoke(instance, new Object[] { args });
         } catch(Throwable e){
-            e.printStackTrace();
+            e.printStackTrace(); // NOSONAR No logger at this step
             System.err.println("JMeter home directory was detected as: "+jmDir);
         }
     }

File: src/components/org/apache/jmeter/visualizers/StatGraphProperties.java
Patch:
@@ -30,9 +30,9 @@
 
 public class StatGraphProperties {
 
-    public static final String[] fontSize = { "8", "9", "10", "11", "12", "14", "16", "18", "20", "24", "28", "32"};
+    static final String[] FONT_SIZE = { "8", "9", "10", "11", "12", "14", "16", "18", "20", "24", "28", "32"};
 
-    public static final String[] strokeWidth = { "1.0f", "1.5f", "2.0f", "2.5f", "3.0f", "3.5f", "4.0f", "4.5f", "5.0f", "5.5f", "6.0f", "6.5f"};
+    static final String[] STROKE_WIDTH = { "1.0f", "1.5f", "2.0f", "2.5f", "3.0f", "3.5f", "4.0f", "4.5f", "5.0f", "5.5f", "6.0f", "6.5f"};
 
     public static Map<String, String> getFontNameMap() {
         Map<String, String> fontNameMap = new LinkedHashMap<>(2);

File: src/components/org/apache/jmeter/visualizers/SummaryReport.java
Patch:
@@ -124,7 +124,7 @@ public class SummaryReport extends AbstractVisualizer implements Clearable, Acti
         };
     
     // Column formats
-    static final Format[] FORMATS =
+    private static final Format[] FORMATS =
         new Format[]{
             null, // Label
             null, // count

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/BaseJMSSampler.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.logging.LoggingManager;
 
 /**
  *
@@ -371,7 +372,8 @@ public static String getMessageHeaders(Message message) {
             response.append("\n\n");
 
         } catch (JMSException e) {
-            e.printStackTrace();
+            LoggingManager.getLoggerForClass().warn(
+                    "Can't extract message headers", e);
         }
 
         return new String(response);

File: src/core/org/apache/jmeter/samplers/AsynchSampleSender.java
Patch:
@@ -161,6 +161,7 @@ public void run() {
                     }
                 }
             } catch (InterruptedException e) {
+                Thread.currentThread().interrupt();
             }
             log.debug("Worker ended");
         }

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223Sampler.java
Patch:
@@ -70,7 +70,7 @@ public SampleResult sample(Entry entry) {
             Bindings bindings = scriptEngine.createBindings();
             bindings.put("SampleResult",result);
             Object ret = processFileOrScript(scriptEngine, bindings);
-            if (ret != null && (result.getResponseData() == null || result.getResponseData()==EMPTY_BA)){
+            if (ret != null && (result.getResponseData() == null || result.getResponseData().length==0)){
                 result.setResponseData(ret.toString(), null);
             }
         } catch (IOException | ScriptException e) {

File: src/components/org/apache/jmeter/sampler/TestAction.java
Patch:
@@ -120,7 +120,7 @@ private void pause(String timeInMillis) {
                 throw new IllegalArgumentException("Configured sleep is negative:"+millis);
             } // else == 0 we do nothing
         } catch (InterruptedException e) {
-            // NOOP
+            Thread.currentThread().interrupt();
         } finally {
             pauseThread = null;
         }

File: src/components/org/apache/jmeter/visualizers/SimpleDataWriter.java
Patch:
@@ -58,6 +58,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
      */
     @Override
     public void clearData() {
+        // NOOP
     }
 
     /**
@@ -67,5 +68,6 @@ public void clearData() {
      */
     @Override
     public void add(SampleResult sample) {
+        // NOOP
     }
 }

File: src/components/org/apache/jmeter/visualizers/RenderInBrowser.java
Patch:
@@ -99,10 +99,9 @@ public void run() {
     }
 
     private JPanel initComponents(String htmlContent) {
-        createScene(htmlContent);
-
         // Create it only in AWT Thread
         jfxPanel = new JFXPanel();
+        createScene(htmlContent);
         progressBar.setPreferredSize(new Dimension(150, 18));
         progressBar.setStringPainted(true);
 

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -367,7 +367,7 @@ public int compare(File o1, File o2) {
         });
         // backup name is of the form
         // {baseName}{versionSeparator}{version}{jmxExtension}
-        String backupName = baseName + versionSeparator + BACKUP_VERSION_FORMATER.format(lastVersionNumber + 1) + JMX_FILE_EXTENSION;
+        String backupName = baseName + versionSeparator + BACKUP_VERSION_FORMATER.format(lastVersionNumber + 1L) + JMX_FILE_EXTENSION;
         File backupFile = new File(backupDir, backupName);
         // create file backup
         try {

File: test/src/org/apache/jmeter/protocol/http/control/TestCacheManagerBase.java
Patch:
@@ -87,6 +87,7 @@ private void sleepTill(long deadline) {
             try {
                 Thread.sleep(100);
             } catch (InterruptedException e) {
+                // FIXME Doing this can lead to sleep not sleeping expected time and random errors
                 Thread.currentThread().interrupt();
                 return;
             }

File: src/protocol/java/org/apache/jmeter/protocol/java/test/JavaTest.java
Patch:
@@ -149,7 +149,7 @@ public class JavaTest extends AbstractJavaSamplerClient implements Serializable,
     /** The name used to store the Success Status parameter. */
     private static final String SUCCESS_NAME = "Status";
 
-    private volatile Thread myThread;
+    private transient volatile Thread myThread;
 
     /**
      * Default constructor for <code>JavaTest</code>.

File: src/protocol/java/org/apache/jmeter/protocol/java/test/SleepTest.java
Patch:
@@ -78,7 +78,7 @@ public class SleepTest extends AbstractJavaSamplerClient implements Serializable
     // The name of the sampler
     private String name;
 
-    private volatile Thread myThread;
+    private transient volatile Thread myThread;
 
     /**
      * Default constructor for <code>SleepTest</code>.

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -1371,7 +1371,7 @@ public static void runSafe(Runnable runnable) {
      */
     public static void runSafe(boolean synchronous, Runnable runnable) {
         if(SwingUtilities.isEventDispatchThread()) {
-            runnable.run();
+            runnable.run();//NOSONAR
         } else {
             if (synchronous) {
                 try {

File: src/core/org/apache/jmeter/reporters/Summariser.java
Patch:
@@ -209,7 +209,7 @@ public void sampleOccurred(SampleEvent e) {
             writeToLog(format(myName, myDelta, "+"));
 
             // Only if we have updated them
-            if (myTotal != null && myDelta != null &&myTotal.getNumSamples() != myDelta.getNumSamples()) {
+            if (myTotal != null && myDelta != null &&myTotal.getNumSamples() != myDelta.getNumSamples()) { // NOSONAR
                 writeToLog(format(myName, myTotal, "="));
             }
         }

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -122,7 +122,7 @@ public Set<String> getActionNames() {
 
     @Override
     public void doAction(ActionEvent e) throws IllegalUserActionException {
-        HashTree subTree = null;
+        HashTree subTree;
         boolean fullSave = false; // are we saving the whole tree?
         if (!commands.contains(e.getActionCommand())) {
             throw new IllegalUserActionException("Invalid user command:" + e.getActionCommand());
@@ -238,10 +238,10 @@ else if (e.getActionCommand().equals(ActionNames.SAVE_AS_TEST_FRAGMENT)) {
                     log.warn("Failed to delete backup file " + expiredBackupFile.getName()); //$NON-NLS-1$
                 }
             }
-        } catch(RuntimeException | Error ex) {
+        } catch(RuntimeException ex) {
             throw ex;
         }
-        catch (Throwable ex) {
+        catch (Exception ex) {
             log.error("Error saving tree:", ex);
             throw new IllegalUserActionException("Couldn't save test plan to file: " + updateFile, ex);
         } 

File: src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java
Patch:
@@ -38,8 +38,6 @@
 import javax.swing.JPopupMenu;
 import javax.swing.JTree;
 import javax.swing.SwingConstants;
-import javax.swing.event.TreeSelectionEvent;
-import javax.swing.event.TreeSelectionListener;
 import javax.swing.tree.DefaultMutableTreeNode;
 import javax.swing.tree.DefaultTreeCellRenderer;
 import javax.swing.tree.DefaultTreeModel;

File: src/components/org/apache/jmeter/extractor/DebugPostProcessor.java
Patch:
@@ -110,9 +110,7 @@ private void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s) {
                 String m2 =(String)o2.getKey();
                 return m1.compareTo(m2);
             });
-        al.forEach(me -> { 
-            sb.append(me.getKey()).append("=").append(me.getValue()).append("\n");
-        });
+        al.forEach(me -> sb.append(me.getKey()).append("=").append(me.getValue()).append("\n"));
     }
 
     public boolean isDisplayJMeterVariables() {

File: src/components/org/apache/jmeter/sampler/DebugSampler.java
Patch:
@@ -95,9 +95,7 @@ private void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s) {
                 String m2 = (String)o2.getKey();
                 return m1.compareTo(m2);
         });
-        al.forEach(me -> {
-            sb.append(me.getKey()).append("=").append(me.getValue()).append("\n");
-        });
+        al.forEach(me -> sb.append(me.getKey()).append("=").append(me.getValue()).append("\n"));
     }
 
     public boolean isDisplayJMeterVariables() {

File: src/components/org/apache/jmeter/assertions/gui/SMIMEAssertionGui.java
Patch:
@@ -28,8 +28,6 @@
 import javax.swing.JPanel;
 import javax.swing.JRadioButton;
 import javax.swing.JTextField;
-import javax.swing.event.ChangeEvent;
-import javax.swing.event.ChangeListener;
 
 import org.apache.jmeter.assertions.SMIMEAssertionTestElement;
 import org.apache.jmeter.testelement.TestElement;

File: src/components/org/apache/jmeter/reporters/MailerModel.java
Patch:
@@ -161,7 +161,7 @@ public List<String> getAddressList() {
             while (next.hasMoreTokens()) {
                 String theToken = next.nextToken().trim();
 
-                if (theToken.indexOf('@') > 0) { //$NON-NLS-1$
+                if (theToken.indexOf('@') > 0) { //NOSONAR $NON-NLS-1$ 
                     addressList.add(theToken);
                 } else {
                     log.warn("Ignored unexpected e-mail address: "+theToken);

File: src/components/org/apache/jmeter/modifiers/BSFPreProcessor.java
Patch:
@@ -37,7 +37,9 @@ public void process(){
         BSFManager mgr =null;
         try {
             mgr = getManager();
-            if (mgr == null) { return; }
+            if (mgr == null) { 
+                return; 
+            }
             processFileOrScript(mgr);
         } catch (BSFException e) {
             log.warn("Problem in BSF script "+e);

File: src/components/org/apache/jmeter/extractor/json/render/RenderAsJsonRenderer.java
Patch:
@@ -120,7 +120,7 @@ private void executeAndShowXPathTester(String textToParse) {
     private String process(String textToParse) {
         try {
             List<Object> matchStrings = extractWithJSonPath(textToParse, jsonPathExpressionField.getText());
-            if (matchStrings.size() == 0) {
+            if (matchStrings.isEmpty()) {
                 return "NO MATCH"; //$NON-NLS-1$
             } else {
                 StringBuilder builder = new StringBuilder();
@@ -260,6 +260,7 @@ public void renderImage(SampleResult sampleResult) {
     /** {@inheritDoc} */
     @Override
     public void setBackgroundColor(Color backGround) {
+        // NOOP
     }
 
 }

File: test/src/org/apache/jmeter/protocol/http/control/TestHTTPMirrorThread.java
Patch:
@@ -402,10 +402,10 @@ public void testSleep() throws Exception {
         URL url = new URL("http", "localhost", HTTP_SERVER_PORT, "/");
         HttpURLConnection conn = (HttpURLConnection) url.openConnection();
         conn.addRequestProperty("X-Sleep", "1000");
-        conn.connect();
         // use nanoTime to do timing measurement or calculation
         // See https://blogs.oracle.com/dholmes/entry/inside_the_hotspot_vm_clocks
         long now = System.nanoTime();
+        conn.connect();
         final InputStream inputStream = conn.getInputStream();
         while(inputStream.read() != -1) {}
         inputStream.close();

File: src/components/org/apache/jmeter/assertions/gui/MD5HexAssertionGUI.java
Patch:
@@ -61,7 +61,6 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         md5HexPanel.add(new JLabel(JMeterUtils.getResString("md5hex_assertion_label"))); //$NON-NLS-1$
 
         md5HexInput = new JTextField(25);
-        // md5HexInput.addFocusListener(this);
         md5HexPanel.add(md5HexInput);
 
         mainPanel.add(md5HexPanel, BorderLayout.NORTH);

File: src/components/org/apache/jmeter/assertions/CompareAssertion.java
Patch:
@@ -39,7 +39,7 @@ public class CompareAssertion extends AbstractTestElement implements Assertion,
 
     private transient List<SampleResult> responses;
 
-    private transient final StringSubstitution emptySub = new StringSubstitution(""); //$NON-NLS-1$
+    private final transient StringSubstitution emptySub = new StringSubstitution(""); //$NON-NLS-1$
 
     private boolean compareContent = true;
 

File: src/core/org/apache/jmeter/threads/AbstractThreadGroup.java
Patch:
@@ -46,7 +46,7 @@ public abstract class AbstractThreadGroup extends AbstractTestElement
     private static final long serialVersionUID = 240L;
 
     // Only create the map if it is required
-    private transient final ConcurrentMap<TestElement, Object> children = new ConcurrentHashMap<>();
+    private final transient ConcurrentMap<TestElement, Object> children = new ConcurrentHashMap<>();
 
     private static final Object DUMMY = new Object();
 

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -633,12 +633,12 @@ public static Object[] replaceAllWithRegex(
                 java.util.regex.Pattern.compile(regex) :  
                 java.util.regex.Pattern.compile(regex, java.util.regex.Pattern.CASE_INSENSITIVE);
         String newText = source;
-        replacement = Matcher.quoteReplacement(replacement);
+        final String replacementQuoted = Matcher.quoteReplacement(replacement);
         Matcher matcher = pattern.matcher(newText);
         int totalReplaced = 0;
         while(true) {
             String previousText = newText;
-            newText = matcher.replaceFirst(replacement);
+            newText = matcher.replaceFirst(replacementQuoted);
             matcher = pattern.matcher(newText);
             if(newText.equals(previousText)) {
                 break;

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -632,13 +632,12 @@ public static Object[] replaceAllWithRegex(
         java.util.regex.Pattern pattern = caseSensitive ? 
                 java.util.regex.Pattern.compile(regex) :  
                 java.util.regex.Pattern.compile(regex, java.util.regex.Pattern.CASE_INSENSITIVE);
-        String previousText = null;
         String newText = source;
         replacement = Matcher.quoteReplacement(replacement);
         Matcher matcher = pattern.matcher(newText);
         int totalReplaced = 0;
-        while(!newText.equals(previousText)) {
-            previousText = newText;
+        while(true) {
+            String previousText = newText;
             newText = matcher.replaceFirst(replacement);
             matcher = pattern.matcher(newText);
             if(newText.equals(previousText)) {

File: src/core/org/apache/jmeter/gui/action/RegexpSearcher.java
Patch:
@@ -40,11 +40,10 @@ public class RegexpSearcher implements Searcher {
     public RegexpSearcher(boolean caseSensitive, String regexp) {
         super();
         this.caseSensitive = caseSensitive;
-        String newRegexp = ".*"+regexp+".*";
         if(caseSensitive) {
-            pattern = Pattern.compile(newRegexp);
+            pattern = Pattern.compile(regexp);
         } else {
-            pattern = Pattern.compile(newRegexp, Pattern.CASE_INSENSITIVE);
+            pattern = Pattern.compile(regexp, Pattern.CASE_INSENSITIVE);
         }
     }
 

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java
Patch:
@@ -591,7 +591,7 @@ public static void close(Statement s) {
                 s.close();
             }
         } catch (SQLException e) {
-            log.warn("Error closing Statement " + s.toString(), e);
+            log.warn("Error closing Statement " + (s != null ? s.toString() : "null"), e);
         }
     }
 

File: src/components/org/apache/jmeter/visualizers/RespTimeGraphChart.java
Patch:
@@ -378,7 +378,7 @@ private int getTopValue(double value, int roundMode) {
             divValueStr.append("0"); //$NON-NLS-1$
         }
         int divValueInt = Integer.parseInt(divValueStr.toString());
-        BigDecimal round = new BigDecimal(value / divValueInt);
+        BigDecimal round = BigDecimal.valueOf(value / divValueInt);
         round = round.setScale(0, roundMode);
         int topValue = round.intValue() * divValueInt;
         return topValue;

File: src/components/org/apache/jmeter/timers/PoissonRandomTimer.java
Patch:
@@ -380,7 +380,7 @@ private static double logFactorial(int n)
             throw new IllegalArgumentException();
         }
         else if (n > 254) {
-            double x = n + 1;
+            double x = n + 1d;
             return (x - 0.5)*Math.log(x) - x + 0.5*Math.log(2*Math.PI) + 1.0/(12.0*x);
         }
         else {

File: src/components/org/apache/jmeter/visualizers/AxisGraph.java
Patch:
@@ -401,7 +401,7 @@ private void drawSample(String _title, int _maxLength, String[] _xAxisLabels,
 
             // Y Axis
             try {
-                BigDecimal round = new BigDecimal(max / 1000d);
+                BigDecimal round = BigDecimal.valueOf(max / 1000d);
                 round = round.setScale(0, BigDecimal.ROUND_UP);
                 double topValue = round.doubleValue() * 1000;
                 yaxis.setUserDefinedScale(0, 500);

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -264,7 +264,7 @@ public void run() {
             engine = null;
             if (now) {
                 tellThreadGroupsToStop();
-                pause(10 * countStillActiveThreads());
+                pause(10L * countStillActiveThreads());
                 boolean stopped = verifyThreadsStopped();
                 if (!stopped) {  // we totally failed to stop the test
                     if (JMeter.isNonGUI()) {

File: src/core/org/apache/jmeter/report/processor/Top5ErrorsSummaryData.java
Patch:
@@ -38,7 +38,7 @@ public class Top5ErrorsSummaryData {
     /**
      */
     public Top5ErrorsSummaryData() {
-        countPerError = new HashMap<String, Long>();
+        countPerError = new HashMap<>();
     }
 
     /**
@@ -87,7 +87,7 @@ public long getErrors() {
      * @return array of [String, Long]
      */
     public Object[][] getTop5ErrorsMetrics() {
-        SortedSet<Map.Entry<String, Long>> reverseSortedSet = new TreeSet<Map.Entry<String, Long>>(
+        SortedSet<Map.Entry<String, Long>> reverseSortedSet = new TreeSet<>(
                 new Comparator<Map.Entry<String, Long>>() {
                     @Override
                     public int compare(Map.Entry<String, Long> e1,

File: src/core/org/apache/jmeter/util/HostNameSetter.java
Patch:
@@ -39,7 +39,7 @@ public class HostNameSetter {
     private final WeakReference<Method> setter;
 
     private HostNameSetter(Class<?> clazz, Method setter) {
-        this.cls = new WeakReference<Class<?>>(clazz);
+        this.cls = new WeakReference<>(clazz);
         this.setter = setter == null ? null : new WeakReference<>(setter);
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPFileArgsPanel.java
Patch:
@@ -54,7 +54,7 @@
  */
 /**
  * A GUI panel allowing the user to enter file information for http upload.
- * Used by MultipartUrlConfigGui for use in HTTP Samplers.
+ * Used by UrlConfigGui for use in HTTP Samplers.
  */
 public class HTTPFileArgsPanel extends JPanel implements ActionListener {
 

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -154,7 +154,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "69ec07ad15d0082f9aed0376963134f4ed583a81"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "2b8bbf6ee18f324d63d4c69981561fd9e125dd99"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -148,13 +148,13 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     
     // Must match _version property value in saveservice.properties
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String PROPVERSION = "3.1";// Expected version $NON-NLS-1$
+    static final String PROPVERSION = "3.2";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "687b9fce95500ae04102444b9bf40ddd970c62aa"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "69ec07ad15d0082f9aed0376963134f4ed583a81"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java
Patch:
@@ -107,7 +107,6 @@ protected HTTPSampleResult sample(URL url,
                        boolean frd,
                        int fd) {
         HTTPSampleResult res = new HTTPSampleResult();
-        res.setMonitor(false);
         res.setSampleLabel(url.toExternalForm());
         res.sampleStart();
         try {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPAbstractImpl.java
Patch:
@@ -366,9 +366,11 @@ protected boolean hasArguments() {
      * Invokes {@link HTTPSamplerBase#isMonitor()}
      *
      * @return flag whether monitor is enabled
+     * @deprecated since 3.2 always return false
      */
+    @Deprecated
     protected boolean isMonitor() {
-        return testElement.isMonitor();
+        return false;
     }
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -203,7 +203,6 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe
         HttpMethodBase httpMethod = null;
 
         HTTPSampleResult res = new HTTPSampleResult();
-        res.setMonitor(isMonitor());
 
         res.setSampleLabel(urlStr); // May be replaced later
         res.setHTTPMethod(method);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -606,7 +606,6 @@ protected void handleMethod(String method, HTTPSampleResult result,
      */
     protected HTTPSampleResult createSampleResult(URL url, String method) {
         HTTPSampleResult res = new HTTPSampleResult();
-        res.setMonitor(isMonitor());
 
         res.setSampleLabel(url.toString()); // May be replaced later
         res.setHTTPMethod(method);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
Patch:
@@ -453,7 +453,6 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe
         }
 
         HTTPSampleResult res = new HTTPSampleResult();
-        res.setMonitor(isMonitor());
 
         res.setSampleLabel(urlStr);
         res.setURL(url);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
Patch:
@@ -257,7 +257,6 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe
         httpMethod = new PostMethod(urlStr);
 
         HTTPSampleResult res = new HTTPSampleResult();
-        res.setMonitor(false);
 
         res.setSampleLabel(urlStr); // May be replaced later
         res.setHTTPMethod(HTTPConstants.POST);

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/CssParser.java
Patch:
@@ -40,7 +40,7 @@
  * @since 3.0
  */
 public class CssParser implements LinkExtractorParser {
-    private static final URLCollection EMPTY_URL_COLLECTION = new URLCollection(Collections.emptyList());
+    private static final URLCollection EMPTY_URL_COLLECTION = new URLCollection(Collections.<URLString>emptyList());
     private static final Logger LOG = LoggingManager.getLoggerForClass();
 
     /**

File: src/core/org/apache/jmeter/gui/util/FilePanelEntry.java
Patch:
@@ -73,7 +73,7 @@ public FilePanelEntry(String label, boolean onlyDirectories, String ... exts) {
     }
 
     public FilePanelEntry(String label, ChangeListener listener, String ... exts) {
-        this(label, false, (ChangeListener) null, exts);
+        this(label, false, listener, exts);
     }
     
     public FilePanelEntry(String label, boolean onlyDirectories, ChangeListener listener, String ... exts) {

File: test/src/org/apache/jmeter/JMeterVersionTest.java
Patch:
@@ -115,6 +115,9 @@ public void setUp() throws Exception {
         versions.remove("rat");
         propNames.remove("rat-tasks");
         versions.remove("rat-tasks");
+        // remove optional jacoco jars (required for coverage reporting, not required for jmeter)
+        propNames.remove("jacocoant");
+        versions.remove("jacocoant");
         prop = buildProp;
         final File licencesDir = getFileFromHome("licenses/bin");
         licencesDir.list(new FilenameFilter() {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -36,12 +36,11 @@
  */
 public class HTTPSampleResult extends SampleResult {
 
-    private static final long serialVersionUID = 240L;
+    private static final long serialVersionUID = 241L;
 
     /** Set of all HTTP methods, that have no body */
     private static final Set<String> METHODS_WITHOUT_BODY = new HashSet<>(
             Arrays.asList(
-                    HTTPConstants.GET,
                     HTTPConstants.HEAD,
                     HTTPConstants.OPTIONS,
                     HTTPConstants.TRACE));

File: src/protocol/java/org/apache/jmeter/protocol/java/test/JavaTest.java
Patch:
@@ -280,7 +280,9 @@ public SampleResult runTest(JavaSamplerContext context) {
         if (samplerData != null && samplerData.length() > 0) {
             results.setSamplerData(samplerData);
         }
-
+        if(samplerData != null) {
+            results.setSentBytes(samplerData.length());
+        }
         if (resultData != null && resultData.length() > 0) {
             results.setResponseData(resultData, null);
         }

File: src/core/org/apache/jmeter/util/JSR223TestElement.java
Patch:
@@ -104,7 +104,7 @@ protected ScriptEngine getScriptEngine() throws ScriptException {
      */
     private String getScriptLanguageWithDefault() {
         String lang = getScriptLanguage();
-        if (!StringUtils.isNotEmpty(lang)) {
+        if (StringUtils.isNotEmpty(lang)) {
             return lang;
         }
         return DEFAULT_SCRIPT_LANGUAGE;

File: src/core/org/apache/jmeter/util/Calculator.java
Patch:
@@ -127,7 +127,7 @@ public void addSample(SampleResult res) {
     
     /**
      * add received bytes
-     * @param value received bytes
+     * @param newValue received bytes
      */
     public void addBytes(long newValue) {
         bytes += newValue;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPAbstractImpl.java
Patch:
@@ -458,7 +458,7 @@ protected byte[] readResponse(SampleResult res, InputStream instream,
      * @return the response or the MD5 of the response
      * @throws IOException
      *             when reading the result fails
-     * @deprecated use {@link HTTPAbstractImpl#readResponse(SampleResult, BufferedInputStream, long)
+     * @deprecated use {@link HTTPAbstractImpl#readResponse(SampleResult, BufferedInputStream, long)}
      */
     @Deprecated
     protected byte[] readResponse(SampleResult res, BufferedInputStream in,

File: src/components/org/apache/jmeter/extractor/json/render/RenderAsJsonRenderer.java
Patch:
@@ -188,13 +188,13 @@ private JPanel createJSonPathExtractorPanel() {
         jsonDataField.setWrapStyleWord(true);
 
         this.jsonDataPane = GuiUtils.makeScrollPane(jsonDataField);
-        jsonDataPane.setMinimumSize(new Dimension(0, 400));
+        jsonDataPane.setMinimumSize(new Dimension(100, 200));
 
         JPanel panel = new JPanel(new BorderLayout(0, 5));
 
         JSplitPane mainSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
                 jsonDataPane, createJSonPathExtractorTasksPanel());
-        mainSplit.setDividerLocation(400);
+        mainSplit.setDividerLocation(0.6d);
         panel.add(mainSplit, BorderLayout.CENTER);
         return panel;
     }
@@ -221,6 +221,7 @@ private JPanel createJSonPathExtractorTasksPanel() {
         jsonPathResultField.setEditable(false);
         jsonPathResultField.setLineWrap(true);
         jsonPathResultField.setWrapStyleWord(true);
+        jsonPathResultField.setMinimumSize(new Dimension(100, 150));
 
         JPanel xpathTasksPanel = new JPanel(new BorderLayout(0, 5));
         xpathTasksPanel.add(jsonPathActionPanel, BorderLayout.NORTH);

File: src/core/org/apache/jmeter/gui/util/FilePanel.java
Patch:
@@ -41,7 +41,7 @@ public FilePanel(String title, boolean onlyDirectories) {
     }
 
     public FilePanel(String title, String filetype) {
-        this(title, (String) null, false);
+        this(title, filetype, false);
     }
     
     public FilePanel(String title, String filetype, boolean onlyDirectories) {

File: src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
Patch:
@@ -328,8 +328,8 @@ static ObjectTableModel createObjectTableModel() {
             null, // 99%
             null, // Min
             null, // Max
-            new DecimalFormat("#0.00%"), // Error %age //$NON-NLS-1$
-            new DecimalFormat("#.0"),      // Throughput //$NON-NLS-1$
+            new DecimalFormat("#0.000%"), // Error %age //$NON-NLS-1$
+            new DecimalFormat("#.00000"),      // Throughput //$NON-NLS-1$
             new DecimalFormat("#0.00"),      // Throughput //$NON-NLS-1$
             new DecimalFormat("#0.00")    // pageSize   //$NON-NLS-1$
         };

File: src/components/org/apache/jmeter/visualizers/SummaryReport.java
Patch:
@@ -132,8 +132,8 @@ public class SummaryReport extends AbstractVisualizer implements Clearable, Acti
             null, // Min
             null, // Max
             new DecimalFormat("#0.00"), // Std Dev. //$NON-NLS-1$
-            new DecimalFormat("#0.00%"), // Error %age //$NON-NLS-1$
-            new DecimalFormat("#.0"),      // Throughput //$NON-NLS-1$
+            new DecimalFormat("#0.000%"), // Error %age //$NON-NLS-1$
+            new DecimalFormat("#.00000"),      // Throughput //$NON-NLS-1$
             new DecimalFormat("#0.00"),  // kB/sec //$NON-NLS-1$
             new DecimalFormat("#0.00"),  // sent kB/sec //$NON-NLS-1$
             new DecimalFormat("#.0"),    // avg. pageSize //$NON-NLS-1$

File: test/src/org/apache/jmeter/save/TestSaveService.java
Patch:
@@ -125,10 +125,9 @@ private boolean loadAndSave(File testFile, String fileName, boolean checkSize) t
             orig = computeFileStats(bufferedReader);
         }
 
-        HashTree tree = SaveService.loadTree(testFile);
-
         ByteArrayOutputStream out = new ByteArrayOutputStream(1000000);
         try {
+            HashTree tree = SaveService.loadTree(testFile);
             SaveService.saveTree(tree, out);
         } finally {
             out.close(); // Make sure all the data is flushed out

File: src/components/org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java
Patch:
@@ -161,7 +161,8 @@ public void process() {
                             }
                         } else {
                             // else just one value extracted
-                            placeObjectIntoVars(vars, currentRefName, extractedValues, 0);
+                            String suffix = (matchNumber < 0) ? "_1" : "";
+                            placeObjectIntoVars(vars, currentRefName + suffix, extractedValues, 0);
                             if (matchNumber < 0 && getComputeConcatenation()) {
                                 vars.put(currentRefName + ALL_SUFFIX, vars.get(currentRefName));
                             }

File: src/core/org/apache/jmeter/report/processor/ErrorsSummaryConsumer.java
Patch:
@@ -33,14 +33,14 @@
  */
 public class ErrorsSummaryConsumer extends AbstractSummaryConsumer<Long> {
 
-    private static final boolean ASSERTION_RESULTS_FAILURE_MESSAGE = 
+    static final boolean ASSERTION_RESULTS_FAILURE_MESSAGE = 
             JMeterUtils
                 .getPropDefault(
                         SampleSaveConfiguration.ASSERTION_RESULTS_FAILURE_MESSAGE_PROP,
                         true);
             
+    static final String ASSERTION_FAILED = "Assertion failed"; //$NON-NLS-1$
     private static final Long ZERO = Long.valueOf(0);
-    private static final String ASSERTION_FAILED = "Assertion failed"; //$NON-NLS-1$
     private long errorCount = 0L;
 
     /**
@@ -135,7 +135,7 @@ protected void updateData(SummaryInfo info, Sample sample) {
      *         FIXME Duplicates HTTPSamplerBase#isSuccessCode but it's in http
      *         protocol
      */
-    protected boolean isSuccessCode(String codeAsString) {
+    static boolean isSuccessCode(String codeAsString) {
         if (StringUtils.isNumeric(codeAsString)) {
             try {
                 int code = Integer.parseInt(codeAsString);

File: src/core/org/apache/jmeter/gui/action/Close.java
Patch:
@@ -34,7 +34,7 @@
  * test plan.
  *
  */
-public class Close extends AbstractAction {
+public class Close extends AbstractActionWithNoRunningTest {
 
     private static final Set<String> commands = new HashSet<>();
 
@@ -65,7 +65,7 @@ public Set<String> getActionNames() {
      *            the generic UI action event
      */
     @Override
-    public void doAction(ActionEvent e) {
+    public void doActionAfterCheck(ActionEvent e) {
         performAction(e);
     }
 

File: src/core/org/apache/jmeter/gui/action/ExitCommand.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.util.JMeterUtils;
 
-public class ExitCommand extends AbstractAction {
+public class ExitCommand extends AbstractActionWithNoRunningTest {
 
     private static final Set<String> commands = new HashSet<>();
 
@@ -58,7 +58,7 @@ public Set<String> getActionNames() {
      *            Description of Parameter
      */
     @Override
-    public void doAction(ActionEvent e) {
+    public void doActionAfterCheck(ActionEvent e) {
         ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.CHECK_DIRTY));
         if (GuiPackage.getInstance().isDirty()) {
             int chosenOption = JOptionPane.showConfirmDialog(GuiPackage.getInstance().getMainFrame(), JMeterUtils

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -50,7 +50,7 @@
  * Handles the Open (load a new file) and Merge commands.
  *
  */
-public class Load extends AbstractAction {
+public class Load extends AbstractActionWithNoRunningTest {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     private static final boolean expandTree = JMeterUtils.getPropDefault("onload.expandtree", false); //$NON-NLS-1$
@@ -72,7 +72,7 @@ public Set<String> getActionNames() {
     }
 
     @Override
-    public void doAction(final ActionEvent e) {
+    public void doActionAfterCheck(final ActionEvent e) {
         final JFileChooser chooser = FileDialoger.promptToOpenFile(new String[] { ".jmx" }); //$NON-NLS-1$
         if (chooser == null) {
             return;

File: src/core/org/apache/jmeter/gui/action/LoadRecentProject.java
Patch:
@@ -59,7 +59,7 @@ public Set<String> getActionNames() {
     }
 
     @Override
-    public void doAction(ActionEvent e) {
+    public void doActionAfterCheck(ActionEvent e) {
         // We must ask the user if it is ok to close current project
         if (!Close.performAction(e)) {
             return;

File: src/core/org/apache/jmeter/gui/action/RevertProject.java
Patch:
@@ -32,7 +32,7 @@
  * Handles the Revert Project command.
  *
  */
-public class RevertProject extends AbstractAction {
+public class RevertProject extends AbstractActionWithNoRunningTest {
     private static final Set<String> commands = new HashSet<>();
 
     static {
@@ -49,7 +49,7 @@ public Set<String> getActionNames() {
     }
 
     @Override
-    public void doAction(ActionEvent e) {
+    public void doActionAfterCheck(ActionEvent e) {
         // Get the file name of the current project
         String projectFile = GuiPackage.getInstance().getTestPlanFile();
         // Check if the user has loaded any file

File: src/core/org/apache/jmeter/gui/action/TemplatesCommand.java
Patch:
@@ -26,7 +26,7 @@
  * Open Templates 
  * @since 2.10
  */
-public class TemplatesCommand extends AbstractAction {
+public class TemplatesCommand extends AbstractActionWithNoRunningTest {
 
     private static final Set<String> commands = new HashSet<>();
 
@@ -41,10 +41,10 @@ static class IODH {
     }
 
     /**
-     * @see Command#doAction(ActionEvent)
+     * @see org.apache.jmeter.gui.action.AbstractActionWithNoRunningTest#doActionAfterCheck(ActionEvent)
      */
     @Override
-    public void doAction(ActionEvent e) {
+    public void doActionAfterCheck(ActionEvent e) {
         IODH.dialog.setVisible(true);
     }
 

File: src/core/org/apache/jmeter/threads/gui/AbstractThreadGroupGui.java
Patch:
@@ -84,7 +84,7 @@ public JPopupMenu createPopupMenu() {
         
         if(this.isEnabled() && 
                 // Check test is not started already
-                JMeterContextService.getTestStartTime()==0) {
+                !JMeterUtils.isTestRunning()) {
             pop.addSeparator();
             JMenuItem runTg = new JMenuItem(JMeterUtils.getResString("run_threadgroup"));
             runTg.setName("run_threadgroup");

File: test/src/org/apache/jmeter/save/TestCSVSaveService.java
Patch:
@@ -173,7 +173,7 @@ public void testSample() {
         result.setThreadName("6");
         result.setDataType("7");
         result.setSuccessful(true);
-        result.setBytes(8);
+        result.setBytes(8L);
         result.setSentBytes(9);
         result.setGroupThreads(10);
         result.setAllThreads(11);

File: src/core/org/apache/jmeter/reporters/FileReporter.java
Patch:
@@ -48,9 +48,9 @@
 /**
  * This class loads data from a saved file and displays statistics about it.
  *
- *
- * @version $Revision$
+ * @deprecated will be removed in 3.2
  */
+@Deprecated
 public class FileReporter extends JPanel {
     private static final long serialVersionUID = 240L;
 

File: src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java
Patch:
@@ -210,10 +210,10 @@ public SampleResult sample(Entry e) {
                         if (contents.length() > 0){
                             byte[] bytes = contents.getBytes(); // TODO - charset?
                             input = new ByteArrayInputStream(bytes);
-                            res.setBytes(bytes.length);
+                            res.setBytes((long)bytes.length);
                         } else {
                             File infile = new File(local);
-                            res.setBytes((int)infile.length());
+                            res.setBytes(infile.length());
                             input = new BufferedInputStream(new FileInputStream(infile));
                         }
                         ftpOK = ftp.storeFile(remote, input);
@@ -249,7 +249,7 @@ public SampleResult sample(Entry e) {
                                     res.setDataType(SampleResult.TEXT);
                                 }
                             } else {
-                                res.setBytes((int) bytes);
+                                res.setBytes(bytes);
                             }
                         }
                     }

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -191,7 +191,7 @@ public SampleResult sample() {
         if (getReadResponseAsBoolean()) {
             result.setResponseData(buffer.toString().getBytes()); // TODO - charset?
         } else {
-            result.setBytes(buffer.toString().length());
+            result.setBytes((long)buffer.toString().length());
         }
         result.setResponseHeaders(propBuffer.toString());
         if (read == 0) {

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
Patch:
@@ -204,7 +204,7 @@ public SampleResult sample(Entry e) {
                 message.writeTo(cs);
                 res.setBytes(cs.getCount());
             } else {
-                res.setBytes(-1);
+                res.setBytes(-1L);
             }
 
         } catch (Exception ex) {

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/tools/CounterOutputStream.java
Patch:
@@ -24,7 +24,7 @@
  * Utility-class to calculate message size.
  */
 public class CounterOutputStream extends OutputStream {
-    int count = 0;
+    private long count = 0;
 
     /**
      * {@inheritDoc}
@@ -58,7 +58,7 @@ public void write(int b) {
      * Returns message size
      * @return Message size
      */
-    public int getCount() {
+    public long getCount() {
         return count;
     }
 }

File: src/core/org/apache/jmeter/report/core/SampleMetadata.java
Patch:
@@ -101,6 +101,9 @@ public SampleMetadata(SampleSaveConfiguration saveConfig) {
         if (saveConfig.saveBytes()) {
             configuredColumns.add(CSVSaveService.CSV_BYTES);
         }
+        if (saveConfig.saveSentBytes()) {
+            configuredColumns.add(CSVSaveService.CSV_SENT_BYTES);
+        }
         if (saveConfig.saveThreadCounts()) {
             configuredColumns.add(CSVSaveService.CSV_THREAD_COUNT1);
             configuredColumns.add(CSVSaveService.CSV_THREAD_COUNT2);

File: src/core/org/apache/jmeter/report/processor/StatisticsSummaryConsumer.java
Patch:
@@ -57,6 +57,7 @@ private void aggregateSample(Sample sample, StatisticsSummaryData data, boolean
         }
         data.incTotal();
         data.incBytes(sample.getReceivedBytes());
+        data.incSentBytes(sample.getSentBytes());
 
         if (!sample.getSuccess()) {
             data.incErrors();
@@ -130,6 +131,7 @@ protected ListResultData createDataResult(String key,
         result.addResult(new ValueResultData(Double.valueOf(data.getPercentile3().getResult())));
         result.addResult(new ValueResultData(Double.valueOf(data.getThroughput())));
         result.addResult(new ValueResultData(Double.valueOf(data.getKBytesPerSecond())));
+        result.addResult(new ValueResultData(Double.valueOf(data.getSentKBytesPerSecond())));
         result.addResult(new ValueResultData(Long.valueOf(data.getMin())));
         result.addResult(new ValueResultData(Long.valueOf(data.getMax())));
         return result;
@@ -181,6 +183,7 @@ protected ListResultData createResultTitles() {
                 Integer.valueOf(PERCENTILE_INDEX3))));
         titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_throughput")));
         titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_kbytes")));
+        titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_sent_kbytes")));
         titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_min")));
         titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_max")));
         return titles;

File: src/components/org/apache/jmeter/assertions/SMIMEAssertion.java
Patch:
@@ -302,7 +302,7 @@ private static MimeMessage getMessageFromResponse(SampleResult response,
 
         final SampleResult sampleResult = subResults[messageNumber];
         if (log.isDebugEnabled()) {
-            log.debug("Bytes: "+sampleResult.getBytes()+" CT: "+sampleResult.getContentType());
+            log.debug("Bytes: "+sampleResult.getBytesAsLong()+" CT: "+sampleResult.getContentType());
         }
         byte[] data = sampleResult.getResponseData();
         Session session = Session.getDefaultInstance(new Properties());

File: src/components/org/apache/jmeter/assertions/SizeAssertion.java
Patch:
@@ -79,7 +79,7 @@ public AssertionResult getResult(SampleResult response) {
             String variableName = getVariableName();
             String value = getThreadContext().getVariables().get(variableName);
             try {
-                resultSize = Integer.parseInt(value);
+                resultSize = Long.parseLong(value);
             } catch (NumberFormatException e) {
                 result.setFailure(true);
                 result.setFailureMessage("Error parsing variable name: "+variableName+" value: "+value);
@@ -88,13 +88,13 @@ public AssertionResult getResult(SampleResult response) {
         } else if (isTestFieldResponseHeaders()) {
             resultSize = response.getHeadersSize();
         }  else if (isTestFieldResponseBody()) {
-            resultSize = response.getBodySize();
+            resultSize = response.getBodySizeAsLong();
         } else if (isTestFieldResponseCode()) {
             resultSize = response.getResponseCode().length();
         } else if (isTestFieldResponseMessage()) {
             resultSize = response.getResponseMessage().length();
         } else {
-            resultSize = response.getBytes();
+            resultSize = response.getBytesAsLong();
         }
         // is the Sample the correct size?
         final String msg = compareSize(resultSize);

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -194,7 +194,7 @@ public void run() {
                             res.getSampleLabel(),
                             res.getTime(),
                             res.isSuccessful(),
-                            res.getBytes(),
+                            res.getBytesAsLong(),
                             res.getSentBytes(),
                             res.getLatency(),
                             res.getConnectTime()

File: src/core/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -321,7 +321,7 @@ public void sampleOccurred(SampleEvent se) {
             if(res != null && !se.isTransactionSampleEvent()) {
                 SampleResult sampleResult = se.getResult();
                 res.setThreadName(sampleResult.getThreadName());
-                res.setBytes(res.getBytes() + sampleResult.getBytes());
+                res.setBytes(res.getBytesAsLong() + sampleResult.getBytesAsLong());
                 res.setSentBytes(res.getSentBytes() + sampleResult.getSentBytes());
                 if (!isIncludeTimers()) {// Accumulate waiting time for later
                     pauseTime += sampleResult.getEndTime() - sampleResult.getTime() - prevEndTime;

File: src/core/org/apache/jmeter/report/core/Sample.java
Patch:
@@ -260,8 +260,8 @@ public boolean getSuccess() {
      *
      * @return the number of received bytes stored in the sample
      */
-    public int getReceivedBytes() {
-        return getData(int.class, CSVSaveService.CSV_BYTES).intValue();
+    public long getReceivedBytes() {
+        return getData(long.class, CSVSaveService.CSV_BYTES).longValue();
     }
 
     /**

File: src/core/org/apache/jmeter/samplers/DataStrippingSampleSender.java
Patch:
@@ -117,7 +117,7 @@ public void sampleOccurred(SampleEvent event) {
      * @param result {@link SampleResult}
      */
     private void stripResponse(SampleResult result) {
-        result.setBytes(result.getBytes());
+        result.setBytes(result.getBytesAsLong());
         result.setResponseData(SampleResult.EMPTY_BA);
     }
 

File: src/core/org/apache/jmeter/samplers/StatisticalSampleResult.java
Patch:
@@ -72,7 +72,7 @@ public void add(SampleResult res) {
         // Add Sample Counter
         setSampleCount(getSampleCount() + res.getSampleCount());
 
-        setBytes(getBytes() + res.getBytes());
+        setBytes(getBytesAsLong() + res.getBytesAsLong());
         setSentBytes(getSentBytes() + res.getSentBytes());
 
         // Add Error Counter

File: src/core/org/apache/jmeter/util/Calculator.java
Patch:
@@ -110,7 +110,7 @@ public void addBytes(long newValue) {
      * @param res the sample result; might represent multiple values
      */
     public void addSample(SampleResult res) {
-        addBytes(res.getBytes());
+        addBytes(res.getBytesAsLong());
         addValue(res.getTime(),res.getSampleCount());
         errors+=res.getErrorCount(); // account for multiple samples
         if (startTime == 0){ // not yet intialised

File: src/core/org/apache/jmeter/visualizers/SamplingStatCalculator.java
Patch:
@@ -157,7 +157,7 @@ public Sample addSample(SampleResult res) {
         boolean rbool;
         synchronized (calculator) {
             calculator.addValue(res.getTime(), res.getSampleCount());
-            calculator.addBytes(res.getBytes());
+            calculator.addBytes(res.getBytesAsLong());
             setStartTime(res);
             eCount = getCurrentSample().getErrorCount();
             eCount += res.getErrorCount();

File: src/core/org/apache/jmeter/report/processor/StatisticsSummaryConsumer.java
Patch:
@@ -57,7 +57,6 @@ private void aggregateSample(Sample sample, StatisticsSummaryData data, boolean
         }
         data.incTotal();
         data.incBytes(sample.getReceivedBytes());
-        data.incBytes(sample.getSentBytes());
 
         if (!sample.getSuccess()) {
             data.incErrors();

File: src/components/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -296,8 +296,10 @@ public void setupTabPane() {
                 resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel("view_results_thread_name"), sampleResult.getThreadName())); //$NON-NLS-1$
                 resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel("view_results_sample_start"), startTime)); //$NON-NLS-1$
                 resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel("view_results_load_time"), sampleResult.getTime())); //$NON-NLS-1$
+                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel("view_results_connect_time"), sampleResult.getConnectTime())); //$NON-NLS-1$
                 resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel("view_results_latency"), sampleResult.getLatency())); //$NON-NLS-1$
                 resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel("view_results_size_in_bytes"), sampleResult.getBytes())); //$NON-NLS-1$
+                resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel("view_results_sent_bytes"),sampleResult.getSentBytes())); //$NON-NLS-1$
                 resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel("view_results_size_headers_in_bytes"), sampleResult.getHeadersSize())); //$NON-NLS-1$
                 resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel("view_results_size_body_in_bytes"), sampleResult.getBodySize())); //$NON-NLS-1$
                 resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel("view_results_sample_count"), sampleResult.getSampleCount())); //$NON-NLS-1$

File: src/components/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -239,6 +239,7 @@ public void setupTabPane() {
                 statsBuff.append(JMeterUtils.getResString("view_results_connect_time")).append(sampleResult.getConnectTime()).append(NL); //$NON-NLS-1$
                 statsBuff.append(JMeterUtils.getResString("view_results_latency")).append(sampleResult.getLatency()).append(NL); //$NON-NLS-1$
                 statsBuff.append(JMeterUtils.getResString("view_results_size_in_bytes")).append(sampleResult.getBytes()).append(NL); //$NON-NLS-1$
+                statsBuff.append(JMeterUtils.getResString("view_results_sent_bytes")).append(sampleResult.getSentBytes()).append(NL); //$NON-NLS-1$
                 statsBuff.append(JMeterUtils.getResString("view_results_size_headers_in_bytes")).append(sampleResult.getHeadersSize()).append(NL); //$NON-NLS-1$
                 statsBuff.append(JMeterUtils.getResString("view_results_size_body_in_bytes")).append(sampleResult.getBodySize()).append(NL); //$NON-NLS-1$
                 statsBuff.append(JMeterUtils.getResString("view_results_sample_count")).append(sampleResult.getSampleCount()).append(NL); //$NON-NLS-1$

File: src/core/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -322,6 +322,7 @@ public void sampleOccurred(SampleEvent se) {
                 SampleResult sampleResult = se.getResult();
                 res.setThreadName(sampleResult.getThreadName());
                 res.setBytes(res.getBytes() + sampleResult.getBytes());
+                res.setSentBytes(res.getSentBytes() + sampleResult.getSentBytes());
                 if (!isIncludeTimers()) {// Accumulate waiting time for later
                     pauseTime += sampleResult.getEndTime() - sampleResult.getTime() - prevEndTime;
                     prevEndTime = sampleResult.getEndTime();

File: src/core/org/apache/jmeter/report/core/Sample.java
Patch:
@@ -269,9 +269,8 @@ public int getReceivedBytes() {
      *
      * @return the number of sent bytes stored in the sample
      */
-    public int getSentBytes() {
-        // TODO To implement when metric is available
-        return 0;
+    public long getSentBytes() {
+        return getData(long.class, CSVSaveService.CSV_SENT_BYTES).longValue();
     }
 
     /**

File: src/core/org/apache/jmeter/samplers/StatisticalSampleResult.java
Patch:
@@ -73,6 +73,7 @@ public void add(SampleResult res) {
         setSampleCount(getSampleCount() + res.getSampleCount());
 
         setBytes(getBytes() + res.getBytes());
+        setSentBytes(getSentBytes() + res.getSentBytes());
 
         // Add Error Counter
         if (!res.isSuccessful()) {

File: src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java
Patch:
@@ -58,6 +58,7 @@ public class SampleSaveConfigurationConverter  extends ReflectionConverter {
     private static final String NODE_HOSTNAME = "hostname"; // $NON-NLS-1$
     private static final String NODE_URL = "url"; // $NON-NLS-1$
     private static final String NODE_BYTES = "bytes"; // $NON-NLS-1$
+    private static final String NODE_SENT_BYTES = "sentBytes"; // $NON-NLS-1$
     private static final String NODE_THREAD_COUNT = "threadCounts"; // $NON-NLS-1$
     private static final String NODE_SAMPLE_COUNT = "sampleCount"; // $NON-NLS-1$
     private static final String NODE_IDLE_TIME = "idleTime"; // $NON-NLS-1$
@@ -84,6 +85,7 @@ public boolean shouldSerializeMember(
             // These are new fields; not saved unless true
             // This list MUST agree with the list in the marshall() method below
             if (fieldName.equals(NODE_BYTES)) { return false; }
+            if (fieldName.equals(NODE_SENT_BYTES)) { return false; }
             if (fieldName.equals(NODE_URL)) { return false; }
             if (fieldName.equals(NODE_FILENAME)) { return false; }
             if (fieldName.equals(NODE_HOSTNAME)) { return false; }
@@ -129,6 +131,7 @@ public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingCont
         // Save the new fields - but only if they are true
         // This list MUST agree with the list in MyWrapper#shouldSerializeMember()
         createNode(writer,prop.saveBytes(),NODE_BYTES);
+        createNode(writer,prop.saveSentBytes(),NODE_SENT_BYTES);
         createNode(writer,prop.saveUrl(),NODE_URL);
         createNode(writer,prop.saveFileName(),NODE_FILENAME);
         createNode(writer,prop.saveHostname(),NODE_HOSTNAME);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -439,6 +439,7 @@ protected HTTPSampleResult sample(URL url, String method,
             long totalBytes = metrics.getReceivedBytesCount();
             res.setHeadersSize((int) headerBytes);
             res.setBodySize((int)(totalBytes - headerBytes));
+            res.setSentBytes(metrics.getSentBytesCount());
             if (log.isDebugEnabled()) {
                 log.debug("ResponseHeadersSize=" + res.getHeadersSize() + " Content-Length=" + res.getBodySize()
                         + " Total=" + (res.getHeadersSize() + res.getBodySize()));

File: src/functions/org/apache/jmeter/functions/RandomFromMultipleVars.java
Patch:
@@ -37,7 +37,7 @@
  * Provides a RandomFromMultiResult function which returns a random element from a multi valued extracted variable.
  * Those kind of variable are extracted by:
  * - Regular Expression extractor
- * - JSON PATH extractor
+ * - JSON extractor
  * - CSS/JQuery extractor
  * - XPath Extractor
  * 

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -154,7 +154,7 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "36d7410c143fe5b44deaa44d38018406bd2a61c8"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "687b9fce95500ae04102444b9bf40ddd970c62aa"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/core/org/apache/jmeter/util/BSFBeanInfoSupport.java
Patch:
@@ -32,12 +32,11 @@ public abstract class BSFBeanInfoSupport extends ScriptingBeanInfoSupport {
 
     static {
         Properties languages = JMeterUtils.loadProperties("org/apache/bsf/Languages.properties"); // $NON-NLS-1$
-        LANGUAGE_TAGS = new String[languages.size() + 1];
+        LANGUAGE_TAGS = new String[languages.size()];
         int i = 0;
         for (Object language : languages.keySet()) {
             LANGUAGE_TAGS[i++] = language.toString();
         }
-        LANGUAGE_TAGS[i] = "jexl"; // $NON-NLS-1$
         Arrays.sort(LANGUAGE_TAGS);
     }
 

File: src/monitor/components/org/apache/jmeter/monitor/util/Stats.java
Patch:
@@ -35,7 +35,10 @@
  * The load factors are stored in the properties files. Simply change the values
  * in the properties to change how load is calculated. The defaults values are
  * memory (50) and threads (50). The sum of the factors must equal 100.
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class Stats {
 
     public static final int DEAD = 0;

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorGraph.java
Patch:
@@ -28,7 +28,10 @@
 /**
  * MonitorGraph will draw the performance history of a given server. It displays
  * 4 lines:
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class MonitorGraph extends JComponent implements MonitorGuiListener, Clearable {
 
     private static final long serialVersionUID = 240L;

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorHealthPanel.java
Patch:
@@ -34,7 +34,10 @@
 /**
  * The health panel is responsible for showing the health of the servers. It
  * only uses the most current information to show the status.
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class MonitorHealthPanel extends JPanel implements MonitorListener, Clearable {
     private static final long serialVersionUID = 240L;
 

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorHealthVisualizer.java
Patch:
@@ -41,7 +41,10 @@
  * collectors rather the same information. Instead, I would rather have the
  * visualizer be the container for the data and simply pass the data to child
  * JComponents. In the future, we may want to add email alerts as a third tab.
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class MonitorHealthVisualizer extends AbstractVisualizer implements ImageVisualizer, ItemListener,
         GraphListener, Clearable {
 

File: src/monitor/model/org/apache/jmeter/monitor/model/ConnectorImpl.java
Patch:
@@ -19,7 +19,10 @@
 /**
  *
  * @version $Revision$
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class ConnectorImpl implements Connector {
     private ThreadInfo threadinfo = null;
 

File: src/monitor/model/org/apache/jmeter/monitor/model/JvmImpl.java
Patch:
@@ -18,8 +18,10 @@
 
 /**
  *
- * @version $Revision$
+ * @version $Revision$ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class JvmImpl implements Jvm {
     private Memory memory = null;
 

File: src/monitor/model/org/apache/jmeter/monitor/model/Memory.java
Patch:
@@ -21,7 +21,10 @@
 
 /**
  * @version $Revision$
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public interface Memory {
     long getMax();
 

File: src/monitor/model/org/apache/jmeter/monitor/model/MemoryImpl.java
Patch:
@@ -19,7 +19,10 @@
 /**
  *
  * @version $Revision$
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class MemoryImpl implements Memory {
     private long max = 0;
 

File: src/monitor/model/org/apache/jmeter/monitor/model/ObjectFactory.java
Patch:
@@ -25,7 +25,10 @@
 /**
  * ObjectFactory is a simple factory class which creates new instances of
  * objects. It also provides convienant method to parse XML status results.
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class ObjectFactory {
 
     private static class ObjectFactoryHolder {

File: src/monitor/model/org/apache/jmeter/monitor/model/RequestInfo.java
Patch:
@@ -19,7 +19,10 @@
 
 /**
  * @version $Revision$
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public interface RequestInfo {
     long getBytesReceived();
 

File: src/monitor/model/org/apache/jmeter/monitor/model/RequestInfoImpl.java
Patch:
@@ -19,7 +19,10 @@
 /**
  *
  * @version $Revision$
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class RequestInfoImpl implements RequestInfo {
     private long bytesReceived = 0;
 

File: src/monitor/model/org/apache/jmeter/monitor/model/StatusImpl.java
Patch:
@@ -22,7 +22,10 @@
 /**
  *
  * @version $Revision$
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class StatusImpl implements Status {
     private Jvm jvm = null;
 

File: src/monitor/model/org/apache/jmeter/monitor/model/ThreadInfo.java
Patch:
@@ -19,7 +19,10 @@
 
 /**
  * @version $Revision$
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public interface ThreadInfo {
     int getMaxSpareThreads();
 

File: src/monitor/model/org/apache/jmeter/monitor/model/ThreadInfoImpl.java
Patch:
@@ -19,7 +19,10 @@
 /**
  *
  * @version $Revision$
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class ThreadInfoImpl implements ThreadInfo {
     private int maxSpareThreads = 0;
 

File: src/monitor/model/org/apache/jmeter/monitor/model/Worker.java
Patch:
@@ -19,7 +19,10 @@
 
 /**
  * @version $Revision$
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public interface Worker {
     int getRequestProcessingTime();
 

File: src/monitor/model/org/apache/jmeter/monitor/model/WorkerImpl.java
Patch:
@@ -18,7 +18,9 @@
 
 /**
  *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class WorkerImpl implements Worker {
     private int requestProcessingTime = 0;
 

File: src/monitor/model/org/apache/jmeter/monitor/model/Workers.java
Patch:
@@ -21,7 +21,10 @@
 
 /**
  * @version $Revision$
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public interface Workers {
 
     List<Worker> getWorker();

File: src/monitor/model/org/apache/jmeter/monitor/model/WorkersImpl.java
Patch:
@@ -22,7 +22,10 @@
 /**
  *
  * @version $Revision$
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class WorkersImpl implements Workers {
     private final List<Worker> worker;
 

File: src/monitor/model/org/apache/jmeter/monitor/parser/Constants.java
Patch:
@@ -20,7 +20,10 @@
  * Constants for the custom DocumentHandler.
  *
  * @version $Revision$
+ *
+ * @deprecated since 3.1
  */
+@Deprecated
 public class Constants {
     public static final String STATUS = "status";
 

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -148,13 +148,13 @@ public String serializedClass(@SuppressWarnings("rawtypes") // superclass does n
     
     // Must match _version property value in saveservice.properties
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String PROPVERSION = "2.9";// Expected version $NON-NLS-1$
+    static final String PROPVERSION = "3.1";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "2e0ec2b2360e52cd5de4e0f20fa51c1809f6895c"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "454506fca89a45cbda14cbe30eb78c44a7e83b6"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/core/org/apache/jmeter/visualizers/gui/AbstractVisualizer.java
Patch:
@@ -108,7 +108,7 @@ public abstract class AbstractVisualizer
     private static final Logger log = LoggingManager.getLoggerForClass();
     
     /** File Extensions */
-    private static final String[] EXTS = { ".jtl", ".csv" }; // $NON-NLS-1$ $NON-NLS-2$
+    private static final String[] EXTS = { ".xml", ".jtl", ".csv" }; // $NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$
 
     /** A panel allowing results to be saved. */
     private final FilePanel filePanel;

File: src/core/org/apache/jmeter/report/config/ReportGeneratorConfiguration.java
Patch:
@@ -610,7 +610,7 @@ public static ReportGeneratorConfiguration loadFromProperties(
                 REPORT_GENERATOR_KEY_TEMP_DIR_DEFAULT, File.class);
         configuration.setTempDirectory(tempDirectory);
 
-        // Load apdex statified threshold
+        // Load apdex statisfied threshold
         final long apdexSatisfiedThreshold = getRequiredProperty(props,
                 REPORT_GENERATOR_KEY_APDEX_SATISFIED_THRESHOLD,
                 REPORT_GENERATOR_KEY_APDEX_SATISFIED_THRESHOLD_DEFAULT,

File: src/core/org/apache/jmeter/report/processor/graph/AbstractOverTimeGraphConsumer.java
Patch:
@@ -94,9 +94,7 @@ protected final GraphKeysSelector createKeysSelector() {
      * createGroupInfos()
      */
     @Override
-    protected Map<String, GroupInfo> createGroupInfos() {
-        return null;
-    }
+    protected abstract Map<String, GroupInfo> createGroupInfos();
 
     /*
      * (non-Javadoc)

File: src/core/org/apache/jmeter/util/ScriptingTestElement.java
Patch:
@@ -26,7 +26,7 @@
  */
 public abstract class ScriptingTestElement extends AbstractTestElement {
 
-    private static final long serialVersionUID = 281L;
+    private static final long serialVersionUID = 282L;
 
     //++ For TestBean implementations only
     private String parameters = ""; // passed to file or script
@@ -38,6 +38,7 @@ public abstract class ScriptingTestElement extends AbstractTestElement {
     protected String scriptLanguage = ""; // BSF/JSR223 language to use
     
     protected final static String DEFAULT_SCRIPT_LANGUAGE = "groovy"; // if no language is chosen in GUI
+    
     //-- For TestBean implementations only
 
     public ScriptingTestElement() {

File: src/components/org/apache/jmeter/timers/ConstantThroughputTimer.java
Patch:
@@ -217,8 +217,8 @@ private long calculateSharedDelay(ThroughputInfo info, long milliSecPerRequest)
         //Synchronize on the info object's MUTEX to ensure
         //Multiple threads don't update the scheduled time simultaneously
         synchronized (info.MUTEX) {
-            final long nextRequstTime = info.lastScheduledTime + milliSecPerRequest;
-            info.lastScheduledTime = Math.max(now, nextRequstTime);
+            final long nextRequestTime = info.lastScheduledTime + milliSecPerRequest;
+            info.lastScheduledTime = Math.max(now, nextRequestTime);
             calculatedDelay = info.lastScheduledTime - now;
         }
 
@@ -329,5 +329,4 @@ Mode getMode() {
     void setMode(Mode newMode) {
         mode = newMode;
     }
-
 }

File: src/core/org/apache/jmeter/report/processor/graph/impl/ConnectTimeOverTimeGraphConsumer.java
Patch:
@@ -38,7 +38,7 @@
  */
 public class ConnectTimeOverTimeGraphConsumer extends AbstractOverTimeGraphConsumer {
     private static final boolean CONNECT_TIME_SAVED =
-            JMeterUtils.getPropDefault("jmeter.save.saveservice.connect_time", false); //$NON-NLS-1$
+            JMeterUtils.getPropDefault("jmeter.save.saveservice.connect_time", true); //$NON-NLS-1$
 
     /*
      * (non-Javadoc)

File: test/src/org/apache/jmeter/save/TestCSVSaveService.java
Patch:
@@ -155,15 +155,15 @@ public void testShortFile() throws Exception  {
     // header text should not change unexpectedly
     // if this test fails, check whether the default was intentionally changed or not
     public void testHeader() {
-        final String HDR = "timeStamp,elapsed,label,responseCode,responseMessage,threadName,dataType,success,failureMessage,bytes,grpThreads,allThreads,Latency,IdleTime";
+        final String HDR = "timeStamp,elapsed,label,responseCode,responseMessage,threadName,dataType,success,failureMessage,bytes,grpThreads,allThreads,Latency,IdleTime,Connect";
         assertEquals("Header text has changed", HDR, CSVSaveService.printableFieldNamesToString());
     }
 
     @Test
     // sample format should not change unexpectedly
     // if this test fails, check whether the default was intentionally changed or not
     public void testSample() {
-        final String RESULT = "1,2,3,4,5,6,7,true,,8,9,10,11,12";
+        final String RESULT = "1,2,3,4,5,6,7,true,,8,9,10,11,12,13";
         SampleResult result = new SampleResult();
         result.setSaveConfig(new SampleSaveConfiguration());
         result.setStampAndTime(1, 2);
@@ -178,7 +178,7 @@ public void testSample() {
         result.setAllThreads(10);
         result.setLatency(11);
         result.setIdleTime(12);
-//        result.setConnectTime(13);
+        result.setConnectTime(13);
         assertEquals("Result text has changed", RESULT, CSVSaveService.resultToDelimitedString(new SampleEvent(result,"")));
     }
 }

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -309,7 +309,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
         _subresults      = TRUE.equalsIgnoreCase(props.getProperty(SUBRESULTS_PROP, TRUE));
         _assertions      = TRUE.equalsIgnoreCase(props.getProperty(ASSERTIONS_PROP, TRUE));
         _latency         = TRUE.equalsIgnoreCase(props.getProperty(LATENCY_PROP, TRUE));
-        _connectTime     = TRUE.equalsIgnoreCase(props.getProperty(CONNECT_TIME_PROP, FALSE));
+        _connectTime     = TRUE.equalsIgnoreCase(props.getProperty(CONNECT_TIME_PROP, TRUE));
         _samplerData     = TRUE.equalsIgnoreCase(props.getProperty(SAMPLERDATA_PROP, FALSE));
         _responseHeaders = TRUE.equalsIgnoreCase(props.getProperty(RESPONSEHEADERS_PROP, FALSE));
         _requestHeaders  = TRUE.equalsIgnoreCase(props.getProperty(REQUESTHEADERS_PROP, FALSE));

File: src/core/org/apache/jmeter/report/core/CsvSampleReader.java
Patch:
@@ -51,7 +51,9 @@ public class CsvSampleReader implements Closeable{
     private static final String CHARSET = SaveService.getFileEncoding(StandardCharsets.UTF_8.displayName());
 
     private static final char DEFAULT_SEPARATOR =
-            JMeterUtils.getPropDefault("jmeter.save.saveservice.default_delimiter", ",").charAt(0); //$NON-NLS-1$ //$NON-NLS-2$
+            // We cannot use JMeterUtils#getPropDefault as it applies a trim on value
+            JMeterUtils.getDelimiter(
+                    JMeterUtils.getJMeterProperties().getProperty(SampleSaveConfiguration.DEFAULT_DELIMITER_PROP, SampleSaveConfiguration.DEFAULT_DELIMITER)).charAt(0);
 
     private File file;
 

File: src/core/org/apache/jmeter/report/processor/PercentileAggregator.java
Patch:
@@ -30,7 +30,7 @@ public class PercentileAggregator implements Aggregator {
     private static final int SLIDING_WINDOW_SIZE = JMeterUtils.getPropDefault(
             ReportGeneratorConfiguration.REPORT_GENERATOR_KEY_PREFIX
                     + ReportGeneratorConfiguration.KEY_DELIMITER
-                    + "statistic_window", 200000);
+                    + "statistic_window", 20000);
 
     private final DescriptiveStatistics statistics;
     private final double percentileIndex;

File: src/core/org/apache/jmeter/report/processor/graph/impl/BytesThroughputGraphConsumer.java
Patch:
@@ -78,7 +78,8 @@ public Iterable<String> select(Sample sample) {
 
                     @Override
                     public Double select(String series, Sample sample) {
-                        if(!sample.isEmptyController()) {
+                        // We ignore Transaction Controller results
+                        if(!sample.isController()) {
                             return Double.valueOf(
                                 (RECEIVED_BYTES_SERIES_LABEL.equals(series)) ? sample
                                 .getReceivedBytes() : sample.getSentBytes());

File: src/core/org/apache/jmeter/report/processor/graph/impl/CodesPerSecondGraphConsumer.java
Patch:
@@ -61,7 +61,8 @@ protected Map<String, GroupInfo> createGroupInfos() {
         HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
         groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
                 new TimeRateAggregatorFactory(), new CodeSeriesSelector(),
-                new CountValueSelector(), false, false));
+                // We ignore Transaction Controller results
+                new CountValueSelector(true), false, false));
         return groupInfos;
     }
 

File: src/core/org/apache/jmeter/report/processor/graph/impl/ConnectTimeOverTimeGraphConsumer.java
Patch:
@@ -68,7 +68,8 @@ protected Map<String, GroupInfo> createGroupInfos() {
         HashMap<String, GroupInfo> groupInfos = new HashMap<>();
         groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
                 new MeanAggregatorFactory(), new NameSeriesSelector(),
-                new ConnectTimeValueSelector(), false, false));
+                // We ignore Transaction Controller results
+                new ConnectTimeValueSelector(false), false, false));
         return groupInfos;
     }
 }

File: src/core/org/apache/jmeter/report/processor/graph/impl/HitsPerSecondGraphConsumer.java
Patch:
@@ -61,7 +61,8 @@ protected Map<String, GroupInfo> createGroupInfos() {
         HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
         groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
                 new TimeRateAggregatorFactory(), new StaticSeriesSelector(),
-                new CountValueSelector(), false, false));
+                // We ignore Transaction Controller results
+                new CountValueSelector(true), false, false));
         return groupInfos;
     }
 

File: src/core/org/apache/jmeter/report/processor/graph/impl/LatencyOverTimeGraphConsumer.java
Patch:
@@ -61,7 +61,8 @@ protected Map<String, GroupInfo> createGroupInfos() {
         HashMap<String, GroupInfo> groupInfos = new HashMap<>();
         groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
                 new MeanAggregatorFactory(), new NameSeriesSelector(),
-                new LatencyValueSelector(), false, false));
+                // We ignore Transaction Controller results
+                new LatencyValueSelector(false), false, false));
         return groupInfos;
     }
 }

File: src/core/org/apache/jmeter/report/processor/graph/impl/LatencyVSRequestGraphConsumer.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.jmeter.report.processor.graph.StatusSeriesSelector;
 
 /**
- * The class ResponseTimeVSRequestGraphConsumer provides a graph to visualize
+ * The class LatencyVSRequestGraphConsumer provides a graph to visualize
  * latency vs requests
  *
  * @since 3.0
@@ -67,7 +67,8 @@ protected Map<String, GroupInfo> createGroupInfos() {
         HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
         groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
                 new MedianAggregatorFactory(), new StatusSeriesSelector(),
-                new LatencyValueSelector(), false, false));
+                // We ignore Transaction Controller results
+                new LatencyValueSelector(true), false, false));
         return groupInfos;
     }
 }

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimeDistributionGraphConsumer.java
Patch:
@@ -90,7 +90,8 @@ protected Map<String, GroupInfo> createGroupInfos() {
 
         groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
                 new SumAggregatorFactory(), new NameSeriesSelector(),
-                new CountValueSelector(), false, false));
+                // We include Transaction Controller results
+                new CountValueSelector(false), false, false));
 
         return groupInfos;
     }
@@ -106,6 +107,5 @@ protected void initializeExtraResults(MapResultData parentResult) {
         parentResult.setResult(
                 AbstractOverTimeGraphConsumer.RESULT_CTX_GRANULARITY,
                 new ValueResultData(Long.valueOf(granularity)));
-
     }
 }

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimeOverTimeGraphConsumer.java
Patch:
@@ -62,7 +62,8 @@ protected Map<String, GroupInfo> createGroupInfos() {
         HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
         groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
                 new MeanAggregatorFactory(), new NameSeriesSelector(),
-                new ElapsedTimeValueSelector(), false, false));
+                // We include Transaction Controller results
+                new ElapsedTimeValueSelector(false), false, false));
         return groupInfos;
     }
 }

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimePerSampleGraphConsumer.java
Patch:
@@ -80,7 +80,8 @@ private GroupInfo createGroupInfo(String propertyKey, int defaultValue) {
                 RESPONSE_TIME_PER_SAMPLE_SERIES_FORMAT, Integer.valueOf(property)));
 
         return new GroupInfo(factory, seriesSelector,
-                new ElapsedTimeValueSelector(), false, false);
+                // We include Transaction Controller results
+                new ElapsedTimeValueSelector(false), false, false);
     }
 
     /*

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimePercentilesGraphConsumer.java
Patch:
@@ -73,7 +73,8 @@ protected Map<String, GroupInfo> createGroupInfos() {
 
         groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
                 new SumAggregatorFactory(), new NameSeriesSelector(),
-                new CountValueSelector(), false, false));
+                // We include Transaction Controller results
+                new CountValueSelector(false), false, false));
 
         return groupInfos;
     }

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimeVSRequestGraphConsumer.java
Patch:
@@ -66,7 +66,8 @@ protected Map<String, GroupInfo> createGroupInfos() {
         HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
         groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
                 new MedianAggregatorFactory(), new StatusSeriesSelector(),
-                new ElapsedTimeValueSelector(), false, false));
+                // We ignore Transaction Controller results
+                new ElapsedTimeValueSelector(true), false, false));
         return groupInfos;
     }
 }

File: src/core/org/apache/jmeter/report/processor/graph/impl/SyntheticResponseTimeDistributionGraphConsumer.java
Patch:
@@ -107,7 +107,8 @@ protected Map<String, GroupInfo> createGroupInfos() {
         SyntheticSeriesSelector syntheticSeriesSelector = new SyntheticSeriesSelector();
         groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
                 new SumAggregatorFactory(), syntheticSeriesSelector,
-                new CountValueSelector(), false, false));
+                // We ignore Transaction Controller results
+                new CountValueSelector(true), false, false));
 
         return groupInfos;
     }

File: src/core/org/apache/jmeter/report/processor/graph/impl/TimeVSThreadGraphConsumer.java
Patch:
@@ -66,7 +66,8 @@ protected Map<String, GroupInfo> createGroupInfos() {
 
         groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
                 new MeanAggregatorFactory(), new NameSeriesSelector(),
-                new ElapsedTimeValueSelector(), false, true));
+                // We include Transaction Controller results
+                new ElapsedTimeValueSelector(false), false, true));
 
         return groupInfos;
     }

File: src/core/org/apache/jmeter/report/processor/graph/impl/TransactionsPerSecondGraphConsumer.java
Patch:
@@ -78,7 +78,9 @@ public Iterable<String> select(Sample sample) {
                                         : FAILURE_SERIES_SUFFIX);
                         return Arrays.asList(label);
                     }
-                }, new CountValueSelector(), false, false));
+                },
+                // We include Transaction Controller results
+                new CountValueSelector(false), false, false));
         return groupInfos;
     }
 

File: src/core/org/apache/jmeter/report/processor/ApdexSummaryConsumer.java
Patch:
@@ -123,7 +123,7 @@ protected void updateData(SummaryInfo info, Sample sample) {
         overallData.incTotalCount();
 
         // Process only succeeded samples
-        if (sample.getSuccess()) {
+        if (sample.getSuccess() && !sample.isEmptyController()) {
             long elapsedTime = sample.getElapsedTime();
 
             // Increment the counters depending on the elapsed time.

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1363,7 +1363,7 @@ private LinkExtractorParser getParser(HTTPSampleResult res)
      * @return escaped url
      */
     private String escapeIllegalURLCharacters(String url) {
-        if (url == null || url.toLowerCase().startsWith("file:")) {
+        if (url == null || StringUtils.startsWithIgnoreCase(url, "file:")) {
             return url;
         }
         try {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1368,7 +1368,7 @@ private String escapeIllegalURLCharacters(String url) {
         }
         try {
             String escapedUrl = ConversionUtils.escapeIllegalURLCharacters(url);
-            if (!escapedUrl.equals(url) && log.isDebugEnabled()) {
+            if (log.isDebugEnabled() && !escapedUrl.equals(url)) {
                 log.debug("Url '" + url + "' has been escaped to '"
                         + escapedUrl + "'. Please correct your webpage.");
             }

File: src/core/org/apache/jmeter/report/processor/graph/GraphValueSelector.java
Patch:
@@ -35,7 +35,7 @@ public interface GraphValueSelector {
      *            the series where the value will be aggregated
      * @param sample
      *            the sample
-     * @return the value to aggregate
+     * @return the value to aggregate or null if value should be ignored
      */
-    double select(String series, Sample sample);
+    Double select(String series, Sample sample);
 }

File: src/core/org/apache/jmeter/report/processor/StatisticsSummaryConsumer.java
Patch:
@@ -48,6 +48,7 @@ public StatisticsSummaryConsumer() {
 
     void aggregateSample(Sample sample, StatisticsSummaryData data) {
         data.incTotal();
+        data.incBytes(sample.getReceivedBytes());
         data.incBytes(sample.getSentBytes());
 
         if (!sample.getSuccess()) {

File: src/core/org/apache/jmeter/report/processor/graph/impl/BytesThroughputGraphConsumer.java
Patch:
@@ -78,9 +78,8 @@ public Iterable<String> select(Sample sample) {
 
                     @Override
                     public double select(String series, Sample sample) {
-                        // TODO Add Received bytes support
-                        return (SENT_BYTES_SERIES_LABEL.equals(series)) ? sample
-                                .getSentBytes() : 0;
+                        return (RECEIVED_BYTES_SERIES_LABEL.equals(series)) ? sample
+                                .getReceivedBytes() : sample.getSentBytes();
                     }
                 }, false, false));
         return groupInfos;

File: src/core/org/apache/jmeter/report/processor/graph/impl/ActiveThreadsGraphConsumer.java
Patch:
@@ -31,8 +31,8 @@
 import org.apache.jmeter.report.processor.graph.TimeStampKeysSelector;
 
 /**
- * The class ActiveThreadsGraphConsumer provides a graph to visualize hits rate
- * per second.
+ * The class ActiveThreadsGraphConsumer provides a graph to visualize active threads 
+ * per time period (defined by granularity)
  *
  * @since 3.0
  */

File: src/core/org/apache/jmeter/report/processor/graph/impl/BytesThroughputGraphConsumer.java
Patch:
@@ -31,8 +31,8 @@
 import org.apache.jmeter.report.processor.graph.TimeStampKeysSelector;
 
 /**
- * The class HitsPerSecondGraphConsumer provides a graph to visualize hits rate
- * per second.
+ * The class HitsPerSecondGraphConsumer provides a graph to visualize bytes throughput 
+ * per time period (defined by granularity)
  *
  * @since 3.0
  */

File: src/core/org/apache/jmeter/report/processor/graph/impl/CodesPerSecondGraphConsumer.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.jmeter.report.processor.graph.TimeStampKeysSelector;
 
 /**
- * The class HitsPerSecondGraphConsumer provides a graph to visualize hits rate
- * per second.
+ * The class CodesPerSecondGraphConsumer provides a graph to visualize response codes rate
+ * per second 
  *
  * @since 3.0
  */

File: src/core/org/apache/jmeter/report/processor/graph/impl/ConnectTimeOverTimeGraphConsumer.java
Patch:
@@ -32,7 +32,7 @@
 
 /**
  * The class ConnectTimeOverTimeGraphConsumer provides a graph to visualize Connection time
- * over time.
+ * per time period (defined by granularity)
  *
  * @since 3.1
  */

File: src/core/org/apache/jmeter/report/processor/graph/impl/LatencyOverTimeGraphConsumer.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  * The class LatencyOverTimeGraphConsumer provides a graph to visualize latency
- * rate over time.
+ * per time period (defined by granularity)
  *
  * @since 3.0
  */

File: src/core/org/apache/jmeter/report/processor/graph/impl/LatencyVSRequestGraphConsumer.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * The class ResponseTimeVSRequestGraphConsumer provides a graph to visualize
- * ...
+ * latency vs requests
  *
  * @since 3.0
  */

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimeOverTimeGraphConsumer.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.jmeter.report.processor.graph.TimeStampKeysSelector;
 
 /**
- * The class HitsPerSecondGraphConsumer provides a graph to visualize hits rate
- * per second.
+ * The class ResponseTimeOverTimeGraphConsumer provides a graph to visualize mean 
+ * response time per time period (defined by granularity)
  *
  * @since 3.0
  */

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimePercentilesGraphConsumer.java
Patch:
@@ -30,7 +30,8 @@
 import org.apache.jmeter.report.processor.graph.NameSeriesSelector;
 
 /**
- * The Class ResponseTimePercentilesGraphConsumer.
+ * The Class ResponseTimePercentilesGraphConsumer computes percentile 
+ * graph for each samples
  *
  * @since 3.0
  */

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimeVSRequestGraphConsumer.java
Patch:
@@ -31,8 +31,7 @@
 
 /**
  * The class ResponseTimeVSRequestGraphConsumer provides a graph to visualize
- * ...
- *
+ * response time vs requests
  * @since 3.0
  */
 public class ResponseTimeVSRequestGraphConsumer extends

File: src/core/org/apache/jmeter/report/processor/graph/impl/TimeVSThreadGraphConsumer.java
Patch:
@@ -30,7 +30,8 @@
 import org.apache.jmeter.report.processor.graph.NameSeriesSelector;
 
 /**
- * The class TimeVSThreadGraphConsumer provides a graph to visualize ...
+ * The class TimeVSThreadGraphConsumer provides a graph to visualize average response time
+ * vs number of threads
  *
  * @since 3.0
  */

File: src/core/org/apache/jmeter/report/processor/graph/impl/TransactionsPerSecondGraphConsumer.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.jmeter.report.processor.graph.TimeStampKeysSelector;
 
 /**
- * The class HitsPerSecondGraphConsumer provides a graph to visualize
+ * The class TransactionsPerSecondGraphConsumer provides a graph to visualize
  * transactions rate per second.
  *
  * @since 3.0

File: src/core/org/apache/jmeter/gui/action/Start.java
Patch:
@@ -71,7 +71,7 @@ public class Start extends AbstractAction {
      */
     private static final String CLONER_FOR_VALIDATION_CLASS_NAME = 
             JMeterUtils.getPropDefault(VALIDATION_CLONER_CLASS_PROPERTY_NAME, //$NON-NLS-1$ 
-                    TreeClonerForValidation.class.getName());
+                    "org.apache.jmeter.validation.ComponentTreeClonerForValidation");
 
     static {
         commands.add(ActionNames.ACTION_START);

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -800,6 +800,8 @@ private void delay(List<Timer> timers) {
         if (totalDelay > 0) {
             try {
                 if(scheduler) {
+                    // We reduce pause to ensure end of test is not delayed by a sleep ending after test scheduled end
+                    // See Bug 60049
                     long now = System.currentTimeMillis();
                     if(now + totalDelay > endTime) {
                         totalDelay = endTime - now;

File: src/components/org/apache/jmeter/config/CSVDataSet.java
Patch:
@@ -206,7 +206,8 @@ public void iterationStart(LoopIterationEvent iterEvent) {
         }
         if (lineValues.length == 0) {// i.e. EOF
             if (getStopThread()) {
-                throw new JMeterStopThreadException("End of file detected");
+                throw new JMeterStopThreadException("End of file:"+ getFilename()+" detected for CSV DataSet:"
+                        +getName()+" configured with stopThread:"+ getStopThread()+", recycle:" + getRecycle());
             }
             for (String var :vars) {
                 threadVars.put(var, EOFVALUE);

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -280,7 +280,7 @@ public void run() {
             log.info("Stopping Test Now: " + e.toString());
             stopTestNow();
         } catch (JMeterStopThreadException e) {
-            log.info("Stop Thread seen: " + e.toString());
+            log.info("Stop Thread seen for thread " + getThreadName()+", reason:"+ e.toString());
         } catch (Exception e) {
             log.error("Test failed!", e);
         } catch (ThreadDeath e) {

File: src/components/org/apache/jmeter/control/gui/ThroughputControllerGui.java
Patch:
@@ -101,9 +101,9 @@ public void modifyTestElement(TestElement tc) {
     @Override
     public void clearGui() {
         super.clearGui();
-        styleBox.setSelectedIndex(0);
+        styleBox.setSelectedIndex(1);
         throughput.setText("1"); // $NON-NLS-1$
-        perthread.setSelected(true);
+        perthread.setSelected(false);
     }
 
     @Override

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -79,6 +79,7 @@ public class ResultCollector extends AbstractListenerElement implements SampleLi
 
     private static final String TESTRESULTS_END = "</testResults>"; // $NON-NLS-1$
 
+    // we have to use version 1.0, see bug 59973
     private static final String XML_HEADER = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"; // $NON-NLS-1$
 
     private static final int MIN_XML_FILE_LEN = XML_HEADER.length() + TESTRESULTS_START.length()

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -79,7 +79,7 @@ public class ResultCollector extends AbstractListenerElement implements SampleLi
 
     private static final String TESTRESULTS_END = "</testResults>"; // $NON-NLS-1$
 
-    private static final String XML_HEADER = "<?xml version=\"1.1\" encoding=\"UTF-8\"?>"; // $NON-NLS-1$
+    private static final String XML_HEADER = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"; // $NON-NLS-1$
 
     private static final int MIN_XML_FILE_LEN = XML_HEADER.length() + TESTRESULTS_START.length()
             + TESTRESULTS_END.length();

File: test/src/org/apache/jmeter/monitor/model/benchmark/ParseBenchmark.java
Patch:
@@ -43,6 +43,9 @@ public static void main(String[] args) {
             if (args[2] != null) {
                 loops = Integer.parseInt(args[2]);
             }
+            if(file == null) {
+                throw new IllegalArgumentException("file is null");
+            }
             java.io.File infile = new java.io.File(file);
             java.io.FileInputStream fis = null;
             java.io.InputStreamReader isr = null;

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -322,8 +322,7 @@ private void startGui(String testFile) {
         final ActionRouter instance = ActionRouter.getInstance();
         instance.populateCommandMap();
         treeLis.setActionHandler(instance);
-        // NOTUSED: GuiPackage guiPack =
-        GuiPackage.getInstance(treeLis, treeModel);
+        GuiPackage.initInstance(treeLis, treeModel);
         MainFrame main = new MainFrame(treeModel, treeLis);
         ComponentUtil.centerComponentInWindow(main, 80);
         main.setVisible(true);

File: src/functions/org/apache/jmeter/functions/BeanShell.java
Patch:
@@ -111,8 +111,9 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
         {
             log.warn("Error running BSH script", ex);
         }
-
-        log.debug("Output=" + resultStr);
+        if(log.isDebugEnabled()) {
+            log.debug("Output=" + resultStr);
+        }
         return resultStr;
 
     }

File: src/components/org/apache/jmeter/visualizers/RequestViewRaw.java
Patch:
@@ -87,6 +87,7 @@ public void setSamplerResult(Object objectResult) {
             }
             if (sb.length() > 0) {
                 sampleDataField.setText(sb.toString());
+                sampleDataField.setCaretPosition(1);
             } else {
                 // add a message when no request data (ex. Java request)
                 sampleDataField.setText(JMeterUtils

File: src/components/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -334,6 +334,7 @@ public void setupTabPane() {
                 statsBuff.append(JMeterUtils.getResString("view_results_assertion_failure_message")).append(assertionResult.getFailureMessage()).append(NL); //$NON-NLS-1$
                 statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);
             }
+            stats.setCaretPosition(1);
         } catch (BadLocationException exc) {
             stats.setText(exc.getLocalizedMessage());
         }

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -79,7 +79,7 @@ public class ResultCollector extends AbstractListenerElement implements SampleLi
 
     private static final String TESTRESULTS_END = "</testResults>"; // $NON-NLS-1$
 
-    private static final String XML_HEADER = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"; // $NON-NLS-1$
+    private static final String XML_HEADER = "<?xml version=\"1.1\" encoding=\"UTF-8\"?>"; // $NON-NLS-1$
 
     private static final int MIN_XML_FILE_LEN = XML_HEADER.length() + TESTRESULTS_START.length()
             + TESTRESULTS_END.length();

File: src/functions/org/apache/jmeter/functions/RandomFromMultipleVars.java
Patch:
@@ -147,5 +147,4 @@ public String getReferenceKey() {
     public List<String> getArgumentDesc() {
         return desc;
     }
-
 }

File: src/core/org/apache/jmeter/report/processor/NormalizerSampleConsumer.java
Patch:
@@ -116,8 +116,8 @@ public void consume(Sample s, int channel) {
                 data[i] = s.getData(i);
             }
         }
-        Sample rewrited = new Sample(s.getSampleRow(), sampleMetadata, data);
-        super.produce(rewrited, 0);
+        Sample rewriten = new Sample(s.getSampleRow(), sampleMetadata, data);
+        super.produce(rewriten, 0);
     }
 
     @Override

File: src/core/org/apache/jmeter/report/processor/SampleConsumer.java
Patch:
@@ -67,7 +67,7 @@ public interface SampleConsumer extends SampleProcessor {
     void setConsumedMetadata(SampleMetadata sampleMetadata, int channel);
 
     /**
-     * Start the sample consuming. This step is used be consumer to intialize
+     * Start the sample consuming. This step is used by consumer to initialize
      * their process.
      */
     void startConsuming();

File: src/slf4j-logkit/org/apache/jmeter/logging/LogkitLoggerFactory.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Hierarchy;
 import org.slf4j.ILoggerFactory;
 import org.slf4j.Logger;
@@ -59,7 +58,7 @@ public Logger getLogger(String name) {
                 if (name.equalsIgnoreCase(Logger.ROOT_LOGGER_NAME)) {
                     logkitLogger = Hierarchy.getDefaultHierarchy().getRootLogger();
                 } else {
-                    logkitLogger = LoggingManager.getLoggerFor(name);
+                    logkitLogger = Hierarchy.getDefaultHierarchy().getLoggerFor(name);
                 }
                 slf4jLogger = new LogkitLoggerAdapter(logkitLogger);
                 loggerMap.put(name, slf4jLogger);

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElementBeanInfo.java
Patch:
@@ -109,7 +109,7 @@ public DataSourceElementBeanInfo() {
      * <dl>
      * <dt>DEFAULT</dt><dd>-1</dd>
      * <dt>TRANSACTION_NONE</dt><dd>{@value java.sql.Connection#TRANSACTION_NONE}</dd>
-     * <dt>TRANSACTION_REAd_COMMITTED</dt><dd>{@value java.sql.Connection#TRANSACTION_READ_COMMITTED}</dd>
+     * <dt>TRANSACTION_READ_COMMITTED</dt><dd>{@value java.sql.Connection#TRANSACTION_READ_COMMITTED}</dd>
      * <dt>TRANSACTION_READ_UNCOMMITTED</dt><dd>{@value java.sql.Connection#TRANSACTION_READ_UNCOMMITTED}</dd>
      * <dt>TRANSACTION_REPEATABLE_READ</dt><dd>{@value java.sql.Connection#TRANSACTION_REPEATABLE_READ}</dd>
      * <dt>TRANSACTION_SERIALIZABLE</dt><dd>{@value java.sql.Connection#TRANSACTION_SERIALIZABLE}</dd>
@@ -126,6 +126,8 @@ public static int getTransactionIsolationMode(String tag) {
                 } catch (NumberFormatException e) {
                     log.warn("Illegal transaction isolation configuration '" + tag + "'");
                 }
+            } else {
+                return isolationMode.intValue();
             }
         }
         return -1;

File: src/functions/org/apache/jmeter/functions/LogFunction.java
Patch:
@@ -142,7 +142,7 @@ static synchronized void logDetails(Logger l, String s, String prio, Throwable t
             printDetails(System.err, s, t, c);
         } else {
             // N.B. if the string is not recognised, DEBUG is assumed
-            Priority p = Priority.getPriorityForName(prio);
+            Priority p = Priority.getPriorityForName(prio.trim());
             if (log.isPriorityEnabled(p)) {// Thread method is potentially expensive
                 String tn = Thread.currentThread().getName();
                 StringBuilder sb = new StringBuilder(40);

File: src/jorphan/org/apache/jorphan/reflect/ClassFinder.java
Patch:
@@ -154,8 +154,9 @@ public boolean accept(File f, String name) {
                             return name.endsWith(DOT_JAR);
                         }
                     });
-                    // jars cannot be null
-                    Collections.addAll(fullList, jars);
+                    if(jars != null) {
+                        Collections.addAll(fullList, jars);
+                    }
                 }
             }
         }

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -603,7 +603,8 @@ public static void canSafelyWriteToFolder(File folder)
                 throw new IllegalArgumentException("Cannot write to '"
                         +folder.getAbsolutePath()+"' as it is an existing file");
             } else {
-                if(folder.listFiles().length > 0) {
+                File[] listedFiles = folder.listFiles();
+                if(listedFiles != null && listedFiles.length > 0) {
                     throw new IllegalArgumentException("Cannot write to '"
                             +folder.getAbsolutePath()+"' as folder is not empty");
                 }

File: src/components/org/apache/jmeter/config/CSVDataSet.java
Patch:
@@ -180,7 +180,7 @@ public void iterationStart(LoopIterationEvent iterEvent) {
                     vars = CSVSaveService.csvSplitString(header, delim.charAt(0));
                     firstLineIsNames = true;
                 } catch (IOException e) {
-                    log.warn("Could not split CSV header line",e);
+                    throw new IllegalArgumentException("Could not split CSV header line from file:" + _fileName,e);
                 }
             } else {
                 server.reserveFile(_fileName, getFileEncoding(), alias);

File: src/core/org/apache/jmeter/util/HostNameSetter.java
Patch:
@@ -81,4 +81,4 @@ public static void setServerNameIndication(String hostname, SSLSocket sslsock) {
     private static void setServerNameIndicationFail(Exception e) {
         // ignore
     }
-}
\ No newline at end of file
+}

File: src/core/org/apache/jmeter/report/core/CsvSampleReader.java
Patch:
@@ -25,9 +25,11 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.jmeter.samplers.SampleSaveConfiguration;
 import org.apache.jmeter.save.CSVSaveService;
+import org.apache.jmeter.save.SaveService;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
@@ -46,7 +48,7 @@ public class CsvSampleReader implements Closeable{
     private static final Logger LOG = LoggingManager.getLoggerForClass();
     private static final int BUF_SIZE = 10000;
 
-    private static final String CHARSET = "ISO8859-1";
+    private static final String CHARSET = SaveService.getFileEncoding(StandardCharsets.UTF_8.displayName());
 
     private static final char DEFAULT_SEPARATOR =
             JMeterUtils.getPropDefault("jmeter.save.saveservice.default_delimiter", ",").charAt(0); //$NON-NLS-1$ //$NON-NLS-2$

File: test/src/org/apache/jmeter/junit/JMeterTestCase.java
Patch:
@@ -52,7 +52,7 @@ public abstract class JMeterTestCase {
      */
     static {
         if (JMeterUtils.getJMeterProperties() == null) {
-            String file = "testfiles/jmetertest.properties";
+            String file = "jmeter.properties";
             File f = new File(file);
             if (!f.canRead()) {
                 System.out.println("Can't find " + file + " - trying bin directory");

File: test/src/org/apache/jmeter/junit/JMeterTestCaseJUnit3.java
Patch:
@@ -58,7 +58,7 @@ public JMeterTestCaseJUnit3(String name) {
      */
     static {
         if (JMeterUtils.getJMeterProperties() == null) {
-            String file = "testfiles/jmetertest.properties";
+            String file = "jmeter.properties";
             File f = new File(file);
             if (!f.canRead()) {
                 System.out.println("Can't find " + file + " - trying bin directory");

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
Patch:
@@ -25,6 +25,7 @@
 import java.net.Socket;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.concurrent.TimeUnit;
@@ -58,7 +59,8 @@
 public class HttpMirrorThread implements Runnable {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final String ISO_8859_1 = StandardCharsets.ISO_8859_1.name();
+    private static final Charset ISO_8859_1 = StandardCharsets.ISO_8859_1;
+
     private static final byte[] CRLF = { 0x0d, 0x0a };
 
     private static final String REDIRECT = "redirect"; //$NON-NLS-1$

File: src/components/org/apache/jmeter/assertions/HTMLAssertion.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.PrintWriter;
 import java.io.Serializable;
 import java.io.StringWriter;
+import java.nio.charset.StandardCharsets;
 import java.text.MessageFormat;
 
 import org.apache.commons.io.IOUtils;
@@ -101,8 +102,8 @@ public AssertionResult getResult(SampleResult inResponse) {
                 log.debug("xml mode: " + isXML());
             }
             tidy = new Tidy();
-            tidy.setInputEncoding("UTF8");
-            tidy.setOutputEncoding("UTF8");
+            tidy.setInputEncoding(StandardCharsets.UTF_8.name());
+            tidy.setOutputEncoding(StandardCharsets.UTF_8.name());
             tidy.setQuiet(false);
             tidy.setShowWarnings(true);
             tidy.setOnlyErrors(isErrorsOnly());

File: src/components/org/apache/jmeter/assertions/XPathAssertion.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.Serializable;
+import java.nio.charset.StandardCharsets;
 
 import javax.xml.parsers.ParserConfigurationException;
 
@@ -80,8 +81,8 @@ public AssertionResult getResult(SampleResult response) {
         try {
             if (isScopeVariable()){
                 String inputString=getThreadContext().getVariables().get(getVariableName());
-                if(!StringUtils.isEmpty(inputString)) {
-                    responseData = inputString.getBytes("UTF-8");
+                if (!StringUtils.isEmpty(inputString)) {
+                    responseData = inputString.getBytes(StandardCharsets.UTF_8);
                 } 
             } else {
                 responseData = response.getResponseData();

File: src/components/org/apache/jmeter/extractor/XPathExtractor.java
Patch:
@@ -20,7 +20,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.Serializable;
-import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -287,15 +287,15 @@ public void setFragment(boolean selected) {
      *
      */
     private Document parseResponse(String unicodeData)
-      throws UnsupportedEncodingException, IOException, ParserConfigurationException,SAXException,TidyException
+      throws IOException, ParserConfigurationException,SAXException,TidyException
     {
       //TODO: validate contentType for reasonable types?
 
       // NOTE: responseData encoding is server specific
       //       Therefore we do byte -> unicode -> byte conversion
       //       to ensure UTF-8 encoding as required by XPathUtil
       // convert unicode String -> UTF-8 bytes
-      byte[] utf8data = unicodeData.getBytes("UTF-8"); // $NON-NLS-1$
+      byte[] utf8data = unicodeData.getBytes(StandardCharsets.UTF_8);
       ByteArrayInputStream in = new ByteArrayInputStream(utf8data);
       boolean isXML = JOrphanUtils.isXML(utf8data);
       // this method assumes UTF-8 input data

File: src/components/org/apache/jmeter/visualizers/RenderAsXPath.java
Patch:
@@ -25,7 +25,7 @@
 import java.awt.event.ActionListener;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
-import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -160,15 +160,15 @@ private String process(String textToParse, XPathExtractor extractor) {
      *
      */
     private Document parseResponse(String unicodeData, XPathExtractor extractor)
-      throws UnsupportedEncodingException, IOException, ParserConfigurationException,SAXException,TidyException
+      throws IOException, ParserConfigurationException,SAXException,TidyException
     {
       //TODO: validate contentType for reasonable types?
 
       // NOTE: responseData encoding is server specific
       //       Therefore we do byte -> unicode -> byte conversion
       //       to ensure UTF-8 encoding as required by XPathUtil
       // convert unicode String -> UTF-8 bytes
-      byte[] utf8data = unicodeData.getBytes("UTF-8"); // $NON-NLS-1$
+      byte[] utf8data = unicodeData.getBytes(StandardCharsets.UTF_8);
       ByteArrayInputStream in = new ByteArrayInputStream(utf8data);
       boolean isXML = JOrphanUtils.isXML(utf8data);
       // this method assumes UTF-8 input data

File: src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteMetricsSender.java
Patch:
@@ -18,6 +18,8 @@
 
 package org.apache.jmeter.visualizers.backend.graphite;
 
+import java.nio.charset.StandardCharsets;
+
 /**
  * @since 2.13
  */
@@ -26,7 +28,7 @@ interface GraphiteMetricsSender {
     int SOCKET_TIMEOUT = 1000;
 
 
-    String CHARSET_NAME = "UTF-8"; //$NON-NLS-1$
+    String CHARSET_NAME = StandardCharsets.UTF_8.name();
 
     final class MetricTuple {
         String name;

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -31,6 +31,7 @@
 import java.io.PrintWriter;
 import java.io.RandomAccessFile;
 import java.io.Serializable;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -466,7 +467,7 @@ private static PrintWriter getFileWriter(String filename, SampleSaveConfiguratio
                 }
             }
             writer = new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(filename,
-                    trimmed)), SaveService.getFileEncoding("UTF-8")), SAVING_AUTOFLUSH); // $NON-NLS-1$
+                    trimmed)), SaveService.getFileEncoding(StandardCharsets.UTF_8.name())), SAVING_AUTOFLUSH);
             log.debug("Opened file: "+filename);
             files.put(filename, new FileEntry(writer, saveConfig));
         } else {

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -23,6 +23,7 @@
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
@@ -54,7 +55,7 @@ public class SampleResult implements Serializable, Cloneable, Searchable {
      * The default encoding to be used if not overridden.
      * The value is ISO-8859-1.
      */
-    public static final String DEFAULT_HTTP_ENCODING = "ISO-8859-1";  // $NON-NLS-1$
+    public static final String DEFAULT_HTTP_ENCODING = StandardCharsets.ISO_8859_1.name();
 
     // Bug 33196 - encoding ISO-8859-1 is only suitable for Western countries
     // However the suggested System.getProperty("file.encoding") is Cp1252 on

File: src/core/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.StringReader;
+import java.nio.charset.StandardCharsets;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -138,7 +139,7 @@ public static void processSamples(String filename, Visualizer visualizer,
         final boolean successOnly = resultCollector.isSuccessOnlyLogging();
         try {
             dataReader = new BufferedReader(new InputStreamReader(
-                    new FileInputStream(filename), SaveService.getFileEncoding("UTF-8"))); 
+                    new FileInputStream(filename), SaveService.getFileEncoding(StandardCharsets.UTF_8.name())));
             dataReader.mark(400);// Enough to read the header column names
             // Get the first line, and see if it is the header
             String line = dataReader.readLine();

File: src/core/org/apache/jmeter/save/converters/ConversionHelp.java
Patch:
@@ -24,6 +24,7 @@
 import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
 import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -44,7 +45,7 @@
 public class ConversionHelp {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final String CHAR_SET = "UTF-8"; //$NON-NLS-1$
+    private static final String CHAR_SET = StandardCharsets.UTF_8.name();
 
     // Attributes for TestElement and TestElementProperty
     // Must all be unique

File: src/core/org/apache/jmeter/util/XPathUtil.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.PrintWriter;
 import java.io.StringReader;
 import java.io.StringWriter;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 
 import javax.xml.parsers.DocumentBuilder;
@@ -219,8 +220,8 @@ private static Document tidyDoc(InputStream stream, boolean quiet, boolean showW
      */
     public static Tidy makeTidyParser(boolean quiet, boolean showWarnings, boolean isXml, StringWriter stringWriter) {
         Tidy tidy = new Tidy();
-        tidy.setInputEncoding("UTF8");
-        tidy.setOutputEncoding("UTF8");
+        tidy.setInputEncoding(StandardCharsets.UTF_8.name());
+        tidy.setOutputEncoding(StandardCharsets.UTF_8.name());
         tidy.setQuiet(quiet);
         tidy.setShowWarnings(showWarnings);
         tidy.setMakeClean(true);

File: src/functions/org/apache/jmeter/functions/UrlDecode.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.LinkedList;
 import java.util.List;
@@ -37,7 +38,7 @@
  */
 public class UrlDecode extends AbstractFunction {
 
-    private static final String CHARSET_ENCODING = "UTF-8"; //$NON-NLS-1$
+    private static final String CHARSET_ENCODING = StandardCharsets.UTF_8.name();
     
     private static final List<String> desc = new LinkedList<>();
 

File: src/functions/org/apache/jmeter/functions/UrlEncode.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.LinkedList;
 import java.util.List;
@@ -37,7 +38,7 @@
  */
 public class UrlEncode extends AbstractFunction {
 
-    private static final String CHARSET_ENCODING = "UTF-8"; //$NON-NLS-1$
+    private static final String CHARSET_ENCODING = StandardCharsets.UTF_8.name();
     
     private static final List<String> desc = new LinkedList<>();
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
Patch:
@@ -25,6 +25,7 @@
 import java.net.Socket;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.concurrent.TimeUnit;
 
@@ -57,7 +58,7 @@
 public class HttpMirrorThread implements Runnable {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final String ISO_8859_1 = "ISO-8859-1"; //$NON-NLS-1$
+    private static final String ISO_8859_1 = StandardCharsets.ISO_8859_1.name();
     private static final byte[] CRLF = { 0x0d, 0x0a };
 
     private static final String REDIRECT = "redirect"; //$NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/JTidyHTMLParser.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.ByteArrayInputStream;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.Iterator;
 
 import org.apache.commons.lang3.StringUtils;
@@ -211,7 +212,7 @@ private static Tidy getTidyParser(String encoding) {
         log.debug("Start : getParser");
         Tidy tidy = new Tidy();
         tidy.setInputEncoding(encoding);
-        tidy.setOutputEncoding("UTF8");
+        tidy.setOutputEncoding(StandardCharsets.UTF_8.name());
         tidy.setQuiet(true);
         tidy.setShowWarnings(false);
         if (log.isDebugEnabled()) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.net.URLConnection;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
@@ -49,7 +50,7 @@ public class PostWriter {
 
     private static final byte[] CRLF = { 0x0d, 0x0A };
 
-    public static final String ENCODING = "ISO-8859-1"; // $NON-NLS-1$
+    public static final String ENCODING = StandardCharsets.ISO_8859_1.name();
 
     /** The form data that is going to be sent as url encoded */
     protected byte[] formDataUrlEncoded;

File: src/protocol/http/org/apache/jmeter/protocol/http/util/ConversionUtils.java
Patch:
@@ -25,6 +25,7 @@
 import java.net.URLDecoder;
 import java.nio.charset.Charset;
 import java.nio.charset.IllegalCharsetNameException;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.StringTokenizer;
@@ -127,7 +128,7 @@ public static URL makeRelativeURL(URL baseURL, String location) throws Malformed
      * @throws Exception when given <code>url</code> leads to a malformed URL or URI
      */
     public static String escapeIllegalURLCharacters(String url) throws Exception{
-        String decodeUrl = URLDecoder.decode(url,"UTF-8");
+        String decodeUrl = URLDecoder.decode(url,StandardCharsets.UTF_8.name());
         URL urlString = new URL(decodeUrl);
         URI uri = new URI(urlString.getProtocol(), urlString.getUserInfo(), urlString.getHost(), urlString.getPort(), urlString.getPath(), urlString.getQuery(), urlString.getRef());
         return uri.toString();

File: src/protocol/http/org/apache/jmeter/protocol/http/util/EncoderCache.java
Patch:
@@ -20,14 +20,15 @@
 
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.oro.util.Cache;
 import org.apache.oro.util.CacheLRU;
 
 public class EncoderCache {
 
     /** The encoding which should be usd for URLs, according to HTTP specification */
-    public static final String URL_ARGUMENT_ENCODING = "UTF-8";
+    public static final String URL_ARGUMENT_ENCODING = StandardCharsets.UTF_8.name();
 
     private Cache cache;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.InputStreamReader;
 import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.StringTokenizer;
@@ -517,7 +518,7 @@ protected NVPair parseOneParameter(String parameter) {
         } else {
             if (decode) {
                 try {
-                    value = URLDecoder.decode(value,"UTF-8");
+                    value = URLDecoder.decode(value, StandardCharsets.UTF_8.name());
                 } catch (UnsupportedEncodingException e) {
                     log.warn(e.getMessage());
                 }

File: src/protocol/http/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.UnsupportedEncodingException;
 import java.net.URL;
 import java.net.URLDecoder;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
@@ -67,7 +68,7 @@ public class RequestViewHTTP implements RequestView {
 
     private static final String KEY_LABEL = "view_results_table_request_tab_http"; //$NON-NLS-1$
     
-    private static final String CHARSET_DECODE = "ISO-8859-1"; //$NON-NLS-1$
+    private static final String CHARSET_DECODE = StandardCharsets.ISO_8859_1.name();
     
     private static final String PARAM_CONCATENATE = "&"; //$NON-NLS-1$
 

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.UnsupportedEncodingException;
 import java.lang.reflect.Field;
 import java.math.BigDecimal;
+import java.nio.charset.StandardCharsets;
 import java.sql.CallableStatement;
 import java.sql.Connection;
 import java.sql.Date;
@@ -77,7 +78,7 @@ public abstract class AbstractJDBCTestElement extends AbstractTestElement implem
     private static final String OUT = "OUT"; // $NON-NLS-1$
 
     // TODO - should the encoding be configurable?
-    protected static final String ENCODING = "UTF-8"; // $NON-NLS-1$
+    protected static final String ENCODING = StandardCharsets.UTF_8.name();
 
     // key: name (lowercase) from java.sql.Types; entry: corresponding int value
     private static final Map<String, Integer> mapJdbcNameToInt;
@@ -153,7 +154,7 @@ protected AbstractJDBCTestElement() {
      * @throws IOException when I/O error occurs
      * @throws UnsupportedOperationException if the user provided incorrect query type 
      */
-    protected byte[] execute(Connection conn) throws SQLException, UnsupportedEncodingException, IOException, UnsupportedOperationException {
+    protected byte[] execute(Connection conn) throws SQLException, IOException, UnsupportedOperationException {
         log.debug("executing jdbc");
         Statement stmt = null;
         

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java
Patch:
@@ -122,7 +122,7 @@ public LogFilter() {
     public void setReplaceExtension(String oldext, String newext) {
         if (oldext != null && newext != null) {
             this.CHANGEEXT = true;
-            if (oldext.indexOf('.') < 0 && newext.indexOf('.') < 0) {
+            if (!oldext.contains(".") && !newext.contains(".")) {
                 this.OLDEXT = "." + oldext;
                 this.NEWEXT = "." + newext;
             } else {

File: test/src/org/apache/jmeter/resources/PackageTest.java
Patch:
@@ -123,7 +123,7 @@ private int readRF(String res, List<String> l) throws Exception {
                          * JMeterUtils.getResString() converts space to _ and lowercases
                          * the key, so make sure all keys pass the test
                          */
-                        if ((key.indexOf(' ') >= 0) || !key.toLowerCase(java.util.Locale.ENGLISH).equals(key)) {
+                        if (key.contains(" ") || !key.toLowerCase(java.util.Locale.ENGLISH).equals(key)) {
                             System.out.println("Invalid key for JMeterUtils " + key);
                             fails++;
                         }
@@ -136,9 +136,9 @@ private int readRF(String res, List<String> l) throws Exception {
                      * parameters and check if there is a { in the output. A bit
                      * crude, but should be enough for now.
                      */
-                    if (val.indexOf("{0}") > 0 && val.indexOf('\'') > 0) {
+                    if (val.contains("{0}") && val.contains("'")) {
                         String m = java.text.MessageFormat.format(val, DUMMY_PARAMS);
-                        if (m.indexOf('{') > 0) {
+                        if (m.contains("{")) {
                             fails++;
                             System.out.println("Incorrect message format ? (input/output) for: "+key);
                             System.out.println(val);

File: test/src/org/apache/jmeter/testbeans/gui/PackageTest.java
Patch:
@@ -128,7 +128,7 @@ public void checkAllNecessaryKeysPresent() {
         String dn = defaultBundle.getString("displayName").toUpperCase(Locale.ENGLISH);
 
         // Skip the rest of this test for alpha/experimental beans:
-        if (dn.indexOf("(ALPHA") != -1 || dn.indexOf("(EXPERIMENTAL") != -1) {
+        if (dn.contains("(ALPHA") || dn.contains("(EXPERIMENTAL")) {
             return;
         }
 

File: src/core/org/apache/jmeter/report/processor/ErrorsSummaryConsumer.java
Patch:
@@ -115,7 +115,7 @@ protected void updateData(SummaryInfo info, Sample sample) {
 
             Long data = info.getData();
             if (data == null) {
-                data = Long.valueOf(1);
+                data = ZERO;
             }
             info.setData(Long.valueOf(data.longValue() + 1));
         }

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -93,10 +93,10 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
     private static final String FALSE = "false"; // $NON_NLS-1$
 
     /** A properties file indicator for milliseconds. * */
-    private static final String MILLISECONDS = "ms"; // $NON_NLS-1$
+    public static final String MILLISECONDS = "ms"; // $NON_NLS-1$
 
     /** A properties file indicator for none. * */
-    private static final String NONE = "none"; // $NON_NLS-1$
+    public static final String NONE = "none"; // $NON_NLS-1$
 
     /** A properties file indicator for the first of a series. * */
     private static final String FIRST = "first"; // $NON_NLS-1$
@@ -368,6 +368,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
         _printMilliseconds = MILLISECONDS.equalsIgnoreCase(_timeStampFormat);
 
         // Prepare for a pretty date
+        // FIXME Can _timeStampFormat be null ? it does not appear to me .
         if (!_printMilliseconds && !NONE.equalsIgnoreCase(_timeStampFormat) && (_timeStampFormat != null)) {
             _formatter = new SimpleDateFormat(_timeStampFormat);
         } else {

File: test/src/org/apache/jmeter/samplers/TestSampleSaveConfiguration.java
Patch:
@@ -133,10 +133,10 @@ public void testFalseTrue() throws Exception {
     public void testFormatter() throws Exception {
         SampleSaveConfiguration a = new SampleSaveConfiguration(false);
         SampleSaveConfiguration b = new SampleSaveConfiguration(false);
-        a.setFormatter(null);
         assertEquals("Hash codes should be equal",a.hashCode(), b.hashCode());
         assertTrue("Objects should be equal",a.equals(b));
         assertTrue("Objects should be equal",b.equals(a));
+        a.setFormatter(null);
         b.setFormatter(null);
         assertEquals("Hash codes should be equal",a.hashCode(), b.hashCode());
         assertTrue("Objects should be equal",a.equals(b));

File: src/core/org/apache/jmeter/threads/gui/AbstractThreadGroupGui.java
Patch:
@@ -132,7 +132,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
     }
     
     private void initGui() {
-        startNextLoop.setSelected(true);
+        continueBox.setSelected(true);
     }
 
     private JPanel createOnErrorPanel() {

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -39,6 +39,7 @@
 import javax.swing.JPopupMenu;
 import javax.swing.KeyStroke;
 import javax.swing.MenuElement;
+
 import org.apache.jmeter.control.Controller;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.JMeterGUIComponent;
@@ -314,6 +315,8 @@ public static JPopupMenu getDefaultConfigElementMenu() {
 
     public static JPopupMenu getDefaultVisualizerMenu() {
         JPopupMenu pop = new JPopupMenu();
+        pop.add(
+                MenuFactory.makeMenuItemRes("clear", ActionNames.CLEAR)); //$NON-NLS-1$
         MenuFactory.addEditMenu(pop, true);
         MenuFactory.addFileMenu(pop);
         return pop;

File: src/core/org/apache/jmeter/report/config/ReportGeneratorConfiguration.java
Patch:
@@ -87,7 +87,7 @@ public class ReportGeneratorConfiguration {
     // Required exporter properties
     // Filters only sample series ?
     public static final String EXPORTER_KEY_FILTERS_ONLY_SAMPLE_SERIES = "filters_only_sample_series";
-    public static final Boolean EXPORTER_KEY_FILTERS_ONLY_SAMPLE_SERIES_DEFAULT = Boolean.FALSE;
+    public static final Boolean EXPORTER_KEY_FILTERS_ONLY_SAMPLE_SERIES_DEFAULT = Boolean.TRUE;
 
     // Series filter
     public static final String EXPORTER_KEY_SERIES_FILTER = "series_filter";

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -1073,7 +1073,9 @@ public void testEnded(String host) {
             log.info("Finished remote host: " + host + " ("+now+")");
             if (started.decrementAndGet() <= 0) {
                 Thread stopSoon = new Thread(this);
-                stopSoon.setDaemon(false); // the calling thread is a daemon; this thread must not be
+                // the calling thread is a daemon; this thread must not be
+                // see Bug 59391
+                stopSoon.setDaemon(false); 
                 stopSoon.start();
             }
         }

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -1072,6 +1072,7 @@ public void testEnded(String host) {
             log.info("Finished remote host: " + host + " ("+now+")");
             if (started.decrementAndGet() <= 0) {
                 Thread stopSoon = new Thread(this);
+                stopSoon.setDaemon(false);
                 stopSoon.start();
             }
         }

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -1115,7 +1115,7 @@ public void run() {
             long now = System.currentTimeMillis();
             println("Tidying up remote @ "+new Date(now)+" ("+now+")");
             if (engines!=null){ // it will be null unless remoteStop = true
-                println("Exitting remote servers");
+                println("Exiting remote servers");
                 for (JMeterEngine e : engines){
                     e.exit();
                 }

File: src/core/org/apache/jmeter/engine/RemoteJMeterEngineImpl.java
Patch:
@@ -195,7 +195,7 @@ public void rstopTest(boolean now) throws RemoteException {
      */
     @Override
     public void rexit() throws RemoteException {
-        log.info("Exitting");
+        log.info("Exiting");
         backingEngine.exit();
         // Tidy up any objects we created
         Registry reg = LocateRegistry.getRegistry(this.rmiPort);        

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -270,8 +270,8 @@ public void run() {
                         // TODO should we call test listeners? That might hang too ...
                         log.fatalError(JMeterUtils.getResString("stopping_test_failed")); //$NON-NLS-1$
                         if (SYSTEM_EXIT_ON_STOP_FAIL) { // default is true
-                            log.fatalError("Exitting");
-                            System.out.println("Fatal error, could not stop test, exitting");
+                            log.fatalError("Exiting");
+                            System.out.println("Fatal error, could not stop test, exiting");
                             System.exit(1);
                         } else {
                             System.out.println("Fatal error, could not stop test");                            

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -500,7 +500,7 @@ public static int read(InputStream is, byte[] buffer, int offset, int length) th
     /**
      * Display currently running threads on system.out
      * This may be expensive to run.
-     * Mainly designed for use at the end of a non-GUI test to check for threads that might prevent the JVM from exitting.
+     * Mainly designed for use at the end of a non-GUI test to check for threads that might prevent the JVM from exiting.
      *
      * @param includeDaemons whether to include daemon threads or not.
      */

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
Patch:
@@ -359,7 +359,7 @@ private static byte[] getFileBytesContent(final String path) {
             return IOUtils.toByteArray(inputStream, (int)file.length());
         } catch (Exception e) {
             log.error(e.getLocalizedMessage(), e);
-            throw new IllegalStateException("Unable to load file", e);
+            throw new IllegalStateException("Unable to load file:'"+path+"'", e);
         } finally {
             JOrphanUtils.closeQuietly(inputStream);
         }
@@ -382,7 +382,7 @@ private static Serializable getFileObjectContent(final String path) {
         readObject = (Serializable) xstream.fromXML(inputStream, readObject);
       } catch (Exception e) {
           log.error(e.getLocalizedMessage(), e);
-          throw new IllegalStateException("Unable to load object instance from file", e);
+          throw new IllegalStateException("Unable to load object instance from file:'"+path+"'", e);
       } finally {
           JOrphanUtils.closeQuietly(inputStream);
       }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -296,7 +296,7 @@ public static String[] getSourceTypeList() {
 
     private static final String QRY_PFX = "?"; // $NON-NLS-1$
 
-    protected static final int MAX_REDIRECTS = JMeterUtils.getPropDefault("httpsampler.max_redirects", 5); // $NON-NLS-1$
+    protected static final int MAX_REDIRECTS = JMeterUtils.getPropDefault("httpsampler.max_redirects", 20); // $NON-NLS-1$
 
     protected static final int MAX_FRAME_DEPTH = JMeterUtils.getPropDefault("httpsampler.max_frame_depth", 5); // $NON-NLS-1$
 

File: src/core/org/apache/jmeter/report/config/ReportGeneratorConfiguration.java
Patch:
@@ -52,9 +52,9 @@ public class ReportGeneratorConfiguration {
     private static final File REPORT_GENERATOR_KEY_TEMP_DIR_DEFAULT = new File(
             "temp");
 
-    // Apdex Satified Threshold
+    // Apdex Satisfied Threshold
     private static final String REPORT_GENERATOR_KEY_APDEX_SATISFIED_THRESHOLD = REPORT_GENERATOR_KEY_PREFIX
-            + KEY_DELIMITER + "apdex_statisfied_threshold";
+            + KEY_DELIMITER + "apdex_satisfied_threshold";
     private static final Long REPORT_GENERATOR_KEY_APDEX_SATISFIED_THRESHOLD_DEFAULT = Long.valueOf(500L);
 
     // Apdex Tolerated Threshold

File: src/core/org/apache/jmeter/gui/action/validation/TreeClonerForValidation.java
Patch:
@@ -75,7 +75,9 @@ protected Object addNodeToTree(Object node) {
         } else {
             Object clonedNode = super.addNodeToTree(node);
             if(clonedNode instanceof org.apache.jmeter.threads.ThreadGroup) {
-                ((ThreadGroup)clonedNode).setNumThreads(VALIDATION_NUMBER_OF_THREADS);
+                ThreadGroup tg = (ThreadGroup)clonedNode;
+                tg.setNumThreads(VALIDATION_NUMBER_OF_THREADS);
+                tg.setProperty(ThreadGroup.DELAY, 0);
                 if(((AbstractThreadGroup)clonedNode).getSamplerController() instanceof LoopController) {
                     ((LoopController)((AbstractThreadGroup)clonedNode).getSamplerController()).setLoops(VALIDATION_ITERATIONS);
                 }

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/CssParser.java
Patch:
@@ -109,8 +109,7 @@ public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] data,
                     public void onImport(final CSSImportRule importRule) {
                         String location = importRule.getLocationString();
                         if(!StringUtils.isEmpty(location)) {
-                            urlCollection.addURL(importRule.getLocationString(), 
-                                    baseUrl);
+                            urlCollection.addURL(location, baseUrl);
                         }
                     }
                     // Call for URLs outside of URLs

File: src/core/org/apache/jmeter/logging/LogkitLoggerAdapter.java
Patch:
@@ -159,7 +159,7 @@ public void error(String format, Object arg1, Object arg2) {
     @Override
     public void info(String message) {
         if (logger.isInfoEnabled()) {
-            logger.log(Priority.ERROR, message);
+            logger.log(Priority.INFO, message);
         }
     }
 

File: src/core/org/apache/jmeter/logging/LogkitLoggerFactory.java
Patch:
@@ -48,6 +48,9 @@ public LogkitLoggerFactory() {
     @Override
     public Logger getLogger(String name) {
         Logger slf4jLogger = null;
+        if(name == null) {
+            name = Logger.ROOT_LOGGER_NAME;
+        }
         // protect against concurrent access of loggerMap
         synchronized (this) {
             slf4jLogger = loggerMap.get(name);

File: src/jorphan/org/apache/jorphan/logging/LoggingManager.java
Patch:
@@ -180,7 +180,7 @@ private static Writer makeWriter(String logFile, String propName) {
         isWriterSystemOut = false;
         try {
             File logFileAsFile = new File(logFile);
-            System.out.println("Writing log file to:"+logFileAsFile.getAbsolutePath());
+            System.out.println("Writing log file to: "+logFileAsFile.getAbsolutePath());
             wt = new FileWriter(logFile);
         } catch (Exception e) {
             System.out.println(propName + "=" + logFile + " " + e.toString());

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -1439,7 +1439,7 @@ public Object clone() {
     public List<String> getSearchableTokens() throws Exception {
         List<String> datasToSearch = new ArrayList<>(4);
         datasToSearch.add(getSampleLabel());
-        datasToSearch.add(getDataEncodingNoDefault());
+        datasToSearch.add(getResponseDataAsString());
         datasToSearch.add(getRequestHeaders());
         datasToSearch.add(getResponseHeaders());
         return datasToSearch;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -272,7 +272,6 @@ public List<String> getSearchableTokens() throws Exception {
         List<String> list = new ArrayList<>(super.getSearchableTokens());
         list.add(getQueryString());
         list.add(getCookies());
-        list.add(getQueryString());
         return list;
     }
 }

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimePerSampleGraphConsumer.java
Patch:
@@ -35,8 +35,9 @@
 /**
  * The class ResponseTimePerSampleGraphConsumer provides a graph to visualize
  * percentiles of response time for each sample name.
- *
+ * NOT USED FOR NOW as of 3.0
  * @since 3.0
+ * 
  */
 public class ResponseTimePerSampleGraphConsumer extends AbstractGraphConsumer {
 

File: test/src/org/apache/jmeter/JMeterVersionTest.java
Patch:
@@ -58,6 +58,7 @@ public class JMeterVersionTest extends JMeterTestCase {
         JAR_TO_BUILD_PROP.put("mail", "javamail");
         JAR_TO_BUILD_PROP.put("oro", "jakarta-oro");
         JAR_TO_BUILD_PROP.put("xercesImpl", "xerces");
+        JAR_TO_BUILD_PROP.put("xpp3_min", "xpp3");
     }
 
     private static final File JMETER_HOME = new File(JMeterUtils.getJMeterHome());

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -650,8 +650,7 @@ private JLabel createLabel(PropertyDescriptor desc) {
         // if the displayName is the empty string, leave it like that.
         JLabel label = new JLabel(text);
         label.setHorizontalAlignment(SwingConstants.TRAILING);
-        text = propertyToolTipMessage.format(new Object[] { desc.getName(), desc.getShortDescription() });
-        label.setToolTipText(text);
+        label.setToolTipText(propertyToolTipMessage.format(new Object[] { desc.getShortDescription() }));
 
         return label;
     }

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -603,7 +603,7 @@ public static void canSafelyWriteToFolder(File folder)
             }
         } else {
             // check we can create it
-            if(!folder.getParentFile().canWrite()) {
+            if(!folder.getAbsoluteFile().getParentFile().canWrite()) {
                 throw new IllegalArgumentException("Cannot write to '"
                         +folder.getAbsolutePath()+"' as folder does not exist and parent folder is not writable");
             }

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -495,7 +495,7 @@ public void uncaughtException(Thread t, Throwable e) {
                     if(reportAtEndOpt != null) {
                         if(jtlFile == null) {
                             throw new IllegalUserActionException(
-                                "Option -"+String.valueOf(REPORT_AT_END_OPT)+" requires -"+String.valueOf(LOGFILE_OPT )+ " option");
+                                "Option -"+ ((char)REPORT_AT_END_OPT)+" requires -"+((char)LOGFILE_OPT )+ " option");
                         }
                     }
                     startNonGui(testFile, jtlFile, rem, reportAtEndOpt != null);

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimePerSampleGraphConsumer.java
Patch:
@@ -40,7 +40,7 @@
  */
 public class ResponseTimePerSampleGraphConsumer extends AbstractGraphConsumer {
 
-    private static final String RESPONSE_TIME_PER_SAMPLE_SERIES_FORMAT = "Percentile %d";
+    private static final String RESPONSE_TIME_PER_SAMPLE_SERIES_FORMAT = "%dth percentile";
 
     /**
      * Instantiates a new response time per sample graph consumer.

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -363,7 +363,7 @@ private void startGui(String testFile) {
      */
     public void start(String[] args) {
         
-        try (InputStream inputStream = JMeter.class.getResourceAsStream("/org/apache/jmeter/jmeter_as_ascii_art.txt")) {
+        try (InputStream inputStream = JMeter.class.getResourceAsStream("jmeter_as_ascii_art.txt")) {
             String text = IOUtils.toString(inputStream);
             System.out.println(text);
         } catch (IOException e1) {

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -363,7 +363,7 @@ private void startGui(String testFile) {
      */
     public void start(String[] args) {
         
-        try (InputStream inputStream = getClass().getResourceAsStream("/org/apache/jmeter/jmeter_as_ascii_art.txt")) {
+        try (InputStream inputStream = JMeter.class.getResourceAsStream("/org/apache/jmeter/jmeter_as_ascii_art.txt")) {
             String text = IOUtils.toString(inputStream);
             System.out.println(text);
         } catch (IOException e1) {

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/CssParser.java
Patch:
@@ -100,7 +100,7 @@ public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] data,
                             .setCSSVersion (ECSSVersion.CSS30)
                             .setCustomErrorHandler(new LoggingCSSParseErrorHandler())
                             .setCustomExceptionHandler (new CustomLoggingCSSParseExceptionCallback(baseUrl)));
-            final List<URLString> list = new ArrayList<URLString>();
+            final List<URLString> list = new ArrayList<>();
             final URLCollection urlCollection = new URLCollection(list);
             if(aCSS != null) {
                 CSSVisitor.visitCSSUrl(aCSS, new DefaultCSSUrlVisitor() {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -205,7 +205,7 @@ public enum SourceType {
         }
     }
 
-    private static final int SOURCE_TYPE_DEFAULT = HTTPSamplerBase.SourceType.HOSTNAME.ordinal();
+    public static final int SOURCE_TYPE_DEFAULT = HTTPSamplerBase.SourceType.HOSTNAME.ordinal();
 
     // Use for ComboBox Source Address Type. Preserve order (specially with localization)
     public static String[] getSourceTypeList() {
@@ -271,7 +271,7 @@ public static String[] getSourceTypeList() {
     public static final String MONITOR = "HTTPSampler.monitor"; // $NON-NLS-1$
 
     // Store MD5 hash instead of storing response
-    private static final String MD5 = "HTTPSampler.md5"; // $NON-NLS-1$
+    public static final String MD5 = "HTTPSampler.md5"; // $NON-NLS-1$
 
     /** A number to indicate that the port has not been set. */
     public static final int UNSPECIFIED_PORT = 0;

File: src/core/org/slf4j/impl/StaticLoggerBinder.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.slf4j.impl;
 
-import org.apache.jmeter.logging.LogbackLoggerFactory;
+import org.apache.jmeter.logging.LogkitLoggerFactory;
 import org.slf4j.ILoggerFactory;
 import org.slf4j.LoggerFactory;
 import org.slf4j.spi.LoggerFactoryBinder;
@@ -53,7 +53,7 @@ public static final StaticLoggerBinder getSingleton() {
     // to avoid constant folding by the compiler, this field must *not* be final
     public static String REQUESTED_API_VERSION = "1.7"; // !final
 
-    private static final String loggerFactoryClassStr = LogbackLoggerFactory.class
+    private static final String loggerFactoryClassStr = LogkitLoggerFactory.class
             .getName();
 
     /**
@@ -63,7 +63,7 @@ public static final StaticLoggerBinder getSingleton() {
     private final ILoggerFactory loggerFactory;
 
     private StaticLoggerBinder() {
-        loggerFactory = new LogbackLoggerFactory();
+        loggerFactory = new LogkitLoggerFactory();
     }
 
     @Override

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -571,7 +571,6 @@ private Component createToolBar() {
         this.toolbar = JMeterToolBar.createToolbar(true);
         GuiPackage guiInstance = GuiPackage.getInstance();
         guiInstance.setMainToolbar(toolbar);
-        guiInstance.getMenuItemToolbar().getModel().setSelected(true);
         toolPanel.add(toolbar);
 
         toolPanel.add(Box.createRigidArea(new Dimension(10, 15)));

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -327,14 +327,11 @@ private void makeOptionsMenu() {
         optionsMenu.add(functionHelper);
         optionsMenu.add(lafMenu);
 
-        JCheckBoxMenuItem menuToolBar = makeCheckBoxMenuItemRes("menu_toolbar", ActionNames.TOOLBAR); //$NON-NLS-1$
         JCheckBoxMenuItem menuLoggerPanel = makeCheckBoxMenuItemRes("menu_logger_panel", ActionNames.LOGGER_PANEL_ENABLE_DISABLE); //$NON-NLS-1$
         GuiPackage guiInstance = GuiPackage.getInstance();
         if (guiInstance != null) { //avoid error in ant task tests (good way?)
-            guiInstance.setMenuItemToolbar(menuToolBar);
             guiInstance.setMenuItemLoggerPanel(menuLoggerPanel);
         }
-        optionsMenu.add(menuToolBar);
         optionsMenu.add(menuLoggerPanel);
         
         if (SSLManager.isSSLSupported()) {

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -101,6 +101,7 @@ public final class ActionNames {
     public static final String EXPAND           = "expand"; // $NON-NLS-1$
     public static final String RUN_TG           = "run_tg"; // $NON-NLS-1$
     public static final String RUN_TG_NO_TIMERS = "run_tg_no_timers"; // $NON-NLS-1$
+    public static final String VALIDATE_TG      = "validate_tg"; //$NON-NLS-1$
 
     // Prevent instantiation
     private ActionNames() {}

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -221,6 +221,8 @@ public MainFrame(TreeModel treeModel, JMeterTreeListener treeListener) {
         runningIndicator.setMargin(new Insets(0, 0, 0, 0));
 
         testTimeDuration = new JLabel("00:00:00"); //$NON-NLS-1$
+        testTimeDuration.setToolTipText(JMeterUtils.getResString("duration_tooltip")); //$NON-NLS-1$
+        testTimeDuration.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
 
         totalThreads = new JLabel("0"); // $NON-NLS-1$
         totalThreads.setToolTipText(JMeterUtils.getResString("total_threads_tooltip")); // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -217,6 +217,7 @@ public MainFrame(TreeModel treeModel, JMeterTreeListener treeListener) {
         runningIndicator = new JButton(stoppedIcon);
         runningIndicator.setFocusable(false);
         runningIndicator.setBorderPainted(false);
+        runningIndicator.setContentAreaFilled(false);
         runningIndicator.setMargin(new Insets(0, 0, 0, 0));
 
         testTimeDuration = new JLabel("00:00:00"); //$NON-NLS-1$

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.jmeter.gui;
 
 import java.awt.BorderLayout;
+import java.awt.Color;
 import java.awt.Component;
 import java.awt.Cursor;
 import java.awt.Dimension;
@@ -844,6 +845,7 @@ public void processEvent(LogEvent event) {
                 SwingUtilities.invokeLater(new Runnable() {
                     @Override
                     public void run() {
+                        errorsOrFatalsLabel.setForeground(Color.RED);
                         errorsOrFatalsLabel.setText(Integer.toString(newValue));
                     }
                 });
@@ -856,6 +858,7 @@ public void clearData() {
             SwingUtilities.invokeLater(new Runnable() {
                 @Override
                 public void run() {
+                    errorsOrFatalsLabel.setForeground(Color.BLACK);
                     errorsOrFatalsLabel.setText(Integer.toString(errorOrFatal.get()));
                 }
             });

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -393,6 +393,7 @@ public SampleResult sample(Entry e)// Entry tends to be ignored ...
         res.sampleStart();
         try {
             Socket sock = getSocket(socketKey);
+            res.connectEnd();
             if (sock == null) {
                 res.setResponseCode("500"); //$NON-NLS-1$
                 res.setResponseMessage(getError());

File: src/core/org/apache/jmeter/report/dashboard/HtmlTemplateExporter.java
Patch:
@@ -45,6 +45,7 @@
 import org.apache.jmeter.report.processor.graph.AbstractGraphConsumer;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
+import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 
 import freemarker.template.Configuration;
@@ -354,6 +355,8 @@ public void export(SampleContext context, File file,
         if(!StringUtils.isEmpty(globallyDefinedOutputDir)) {
             outputDir = new File(globallyDefinedOutputDir);
         }
+        
+        JOrphanUtils.canSafelyWriteToFolder(outputDir);
 
         LOG.info("Will generate dashboard in folder:" + outputDir.getAbsolutePath());
 

File: src/core/org/apache/jmeter/testbeans/BeanInfoSupport.java
Patch:
@@ -82,6 +82,9 @@ public abstract class BeanInfoSupport extends SimpleBeanInfo {
     /** Default value, must be provided if {@link #NOT_UNDEFINED} is TRUE */
     public static final String DEFAULT = GenericTestBeanCustomizer.DEFAULT;
 
+    /** Default value is not saved; only non-defaults are saved */
+    public static final String DEFAULT_NOT_SAVED = GenericTestBeanCustomizer.DEFAULT_NOT_SAVED;
+
     /** Pointer to the resource bundle, if any (will generally be null) */
     public static final String RESOURCE_BUNDLE = GenericTestBeanCustomizer.RESOURCE_BUNDLE;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSamplerBeanInfo.java
Patch:
@@ -84,6 +84,7 @@ public AccessLogSamplerBeanInfo() {
             p = property("protocol"); // $NON-NLS-1$
             p.setValue(NOT_UNDEFINED, Boolean.TRUE);
             p.setValue(DEFAULT, "http"); // $NON-NLS-1$
+            p.setValue(DEFAULT_NOT_SAVED, Boolean.TRUE);
 
             p = property("portString"); // $NON-NLS-1$
             p.setValue(NOT_UNDEFINED, Boolean.TRUE);

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -96,7 +96,7 @@ public class ProxyControlGui extends LogicControllerGui implements JMeterGUIComp
     private static final String USE_DEFAULT_HTTP_IMPL = ""; // $NON-NLS-1$
 
     private static final String SUGGESTED_EXCLUSIONS =
-            JMeterUtils.getPropDefault("proxy.excludes.suggested", ".*\\.(bmp|css|js|gif|ico|jpe?g|png|swf|woff)"); // $NON-NLS-1$
+            JMeterUtils.getPropDefault("proxy.excludes.suggested", "(?i).*\\.(bmp|css|js|gif|ico|jpe?g|png|swf|woff)"); // $NON-NLS-1$
 
     private JTextField portField;
 

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -99,9 +99,9 @@ public final class ActionNames {
     public static final String QUICK_COMPONENT  = "quick_component"; // $NON-NLS-1$
     public static final String COLLAPSE         = "collapse"; // $NON-NLS-1$
     public static final String EXPAND           = "expand"; // $NON-NLS-1$
+    public static final String RUN_TG           = "run_tg"; // $NON-NLS-1$
+    public static final String RUN_TG_NO_TIMERS = "run_tg_no_timers"; // $NON-NLS-1$
 
     // Prevent instantiation
-    private ActionNames(){
-        
-    }
+    private ActionNames() {}
 }

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/BaseParser.java
Patch:
@@ -18,8 +18,8 @@
 
 package org.apache.jmeter.protocol.http.parser;
 
-import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
 
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
@@ -32,7 +32,7 @@
 public abstract class BaseParser implements LinkExtractorParser {
     private static final Logger LOG = LoggingManager.getLoggerForClass();
     // Cache of parsers - parsers must be re-usable
-    private static final Map<String, LinkExtractorParser> PARSERS = new ConcurrentHashMap<>(5);
+    private static final ConcurrentMap<String, LinkExtractorParser> PARSERS = new ConcurrentHashMap<>(5);
 
     /**
      * Constructor for BaseParser

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -479,16 +479,15 @@ protected Map<String, CacheEntry> initialValue(){
             }
         };
     }
-    
+
     /**
      * create a cache manager that share the underlying cache of the current one
      * it allows to use the same cache in different threads which does not inherit from each other
      * @return a cache manager that share the underlying cache of the current one
      * @since 3.0
      */
     public CacheManager createCacheManagerProxy() {
-        CacheManager cm = new CacheManager(getCache(), this.useExpires);
-        return cm;
+        return new CacheManager(getCache(), this.useExpires);
     }
 
     @Override

File: src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -469,7 +469,9 @@ public void setupCredentials(HttpClient client, URL url,
                 log.debug(username + " > D="+domain+" R="+realm + " M="+auth.getMechanism());
             }
             if (Mechanism.KERBEROS.equals(auth.getMechanism())) {
-                ((AbstractHttpClient) client).getAuthSchemes().register(AuthSchemes.SPNEGO, new SPNegoSchemeFactory(isStripPort(url)));
+                ((AbstractHttpClient) client).getAuthSchemes().register(
+                        AuthSchemes.SPNEGO,
+                        new FixedSPNegoSchemeFactory(isStripPort(url)));
                 credentialsProvider.setCredentials(new AuthScope(null, -1, null), USE_JAAS_CREDENTIALS);
             } else {
                 credentialsProvider.setCredentials(

File: src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java
Patch:
@@ -156,8 +156,9 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
         if (requiredType != thisClass) {
             throw new IllegalArgumentException("Unexpected class: "+requiredType.getName());
         }
-        SampleSaveConfiguration result = new SampleSaveConfiguration();
-        result.setBytes(false); // Maintain backward compatibility (bytes was not in the JMX file)
+        // The default for missing tags is false, so preset all the fields accordingly
+        SampleSaveConfiguration result = new SampleSaveConfiguration(false);
+        // Now pick up any tags from the input file
         while (reader.hasMoreChildren()) {
             reader.moveDown();
             String nn = reader.getNodeName();

File: src/components/org/apache/jmeter/assertions/XMLAssertion.java
Patch:
@@ -70,7 +70,7 @@ public AssertionResult getResult(SampleResult response) {
         }
         result.setFailure(false);
         XMLReader builder = XML_READER.get();
-        if(XML_READER!=null) {
+        if(builder != null) {
             try {
                 builder.parse(new InputSource(new StringReader(resultData)));
             } catch (SAXException | IOException e) {

File: test/src/org/apache/jmeter/JMeterVersionTest.java
Patch:
@@ -96,6 +96,7 @@ public void setUp() throws Exception {
             }
         }
         // remove docs-only jars
+        propNames.remove("jdom");
         propNames.remove("velocity");
         propNames.remove("commons-lang");
         // remove optional checkstyle name

File: src/components/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.jmeter.testelement.property.NullProperty;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.collections.ListedHashTree;
-import org.apache.jorphan.util.JMeterStopTestNowException;
+import org.apache.jorphan.util.JMeterStopTestException;
 
 /**
  * The goal of ModuleController is to add modularity to JMeter. The general idea
@@ -139,7 +139,7 @@ public void resolveReplacementSubTree(JMeterTreeNode context) {
             }
 
             if(isRunningVersion() && selectedNode == null) {
-                throw new JMeterStopTestNowException("ModuleController:"+getName()+" has no selected Controller, test was stopped as a consequence");
+                throw new JMeterStopTestException("ModuleController:"+getName()+" has no selected Controller (did you rename some element in the path to target controller?), test was shutdown as a consequence");
             }
         }
     }

File: src/components/org/apache/jmeter/assertions/gui/BeanShellAssertionGui.java
Patch:
@@ -141,14 +141,14 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
     }
 
     private JPanel createScriptPanel() {
-        scriptField = new JSyntaxTextArea(20,20);
+        scriptField = JSyntaxTextArea.getInstance(20,20);
 
         JLabel label = new JLabel(JMeterUtils.getResString("bsh_assertion_script")); //$NON-NLS-1$
         label.setLabelFor(scriptField);
 
         JPanel panel = new JPanel(new BorderLayout());
         panel.add(label, BorderLayout.NORTH);
-        panel.add(new JTextScrollPane(scriptField), BorderLayout.CENTER);
+        panel.add(JTextScrollPane.getInstance(scriptField), BorderLayout.CENTER);
 
         JTextArea explain = new JTextArea(JMeterUtils.getResString("bsh_assertion_script_variables")); //$NON-NLS-1$
         explain.setLineWrap(true);

File: src/components/org/apache/jmeter/assertions/gui/XPathPanel.java
Patch:
@@ -64,7 +64,7 @@ public XPathPanel() {
     private void init() { // WARNING: called from ctor so must not be overridden (i.e. must be private or final)
         Box hbox = Box.createHorizontalBox();
         hbox.add(Box.createHorizontalGlue());
-        hbox.add(new JTextScrollPane(getXPathField()));
+        hbox.add(JTextScrollPane.getInstance(getXPathField()));
         hbox.add(Box.createHorizontalGlue());
         hbox.add(getCheckXPathButton());
 
@@ -161,7 +161,7 @@ public void actionPerformed(ActionEvent e) {
      */
     public JSyntaxTextArea getXPathField() {
         if (xpath == null) {
-            xpath = new JSyntaxTextArea(20, 80);
+            xpath = JSyntaxTextArea.getInstance(20, 80);
             xpath.setLanguage("xpath"); //$NON-NLS-1$
         }
         return xpath;

File: src/core/org/apache/jmeter/config/gui/RowDetailDialog.java
Patch:
@@ -141,12 +141,12 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         namePane.add(nameTF, BorderLayout.CENTER);
 
         valueLabel = new JLabel(JMeterUtils.getResString("value")); //$NON-NLS-1$
-        valueTA = new JSyntaxTextArea(30, 80);
+        valueTA = JSyntaxTextArea.getInstance(30, 80);
         valueTA.getDocument().addDocumentListener(this);
         setValues(selectedRow);
         JPanel valuePane = new JPanel(new BorderLayout());
         valuePane.add(valueLabel, BorderLayout.NORTH);
-        JTextScrollPane jTextScrollPane = new JTextScrollPane(valueTA);
+        JTextScrollPane jTextScrollPane = JTextScrollPane.getInstance(valueTA);
         valuePane.add(jTextScrollPane, BorderLayout.CENTER);
 
         JPanel detailPanel = new JPanel(new BorderLayout());

File: src/core/org/apache/jmeter/gui/LoggerPanel.java
Patch:
@@ -70,15 +70,15 @@ private JTextArea init() { // WARNING: called from ctor so must not be overridde
 
         if (JMeterUtils.getPropDefault("loggerpanel.usejsyntaxtext", true)) {
             // JSyntax Text Area
-            JSyntaxTextArea jSyntaxTextArea = new JSyntaxTextArea(15, 80, true);
+            JSyntaxTextArea jSyntaxTextArea = JSyntaxTextArea.getInstance(15, 80, true);
             jSyntaxTextArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_NONE);
             jSyntaxTextArea.setCodeFoldingEnabled(false);
             jSyntaxTextArea.setAntiAliasingEnabled(false);
             jSyntaxTextArea.setEditable(false);
             jSyntaxTextArea.setLineWrap(false);
             jSyntaxTextArea.setLanguage("text");
             jSyntaxTextArea.setMargin(new Insets(2, 2, 2, 2)); // space between borders and text
-            areaScrollPane = new JTextScrollPane(jSyntaxTextArea);
+            areaScrollPane = JTextScrollPane.getInstance(jSyntaxTextArea);
             jTextArea = jSyntaxTextArea;
         } else {
             // Plain text area

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/UrlConfigGui.java
Patch:
@@ -660,8 +660,8 @@ protected JTabbedPane getParameterPanel() {
         int indx = TAB_PARAMETERS;
         if(showRawBodyPane) {
             tabRawBodyIndex = ++indx;
-            postBodyContent = new JSyntaxTextArea(30, 50);// $NON-NLS-1$
-            postContentTabbedPane.add(JMeterUtils.getResString("post_body"), new JTextScrollPane(postBodyContent));// $NON-NLS-1$
+            postBodyContent = JSyntaxTextArea.getInstance(30, 50);// $NON-NLS-1$
+            postContentTabbedPane.add(JMeterUtils.getResString("post_body"), JTextScrollPane.getInstance(postBodyContent));// $NON-NLS-1$
         }
         
         if(showFileUploadPane) {

File: src/protocol/java/org/apache/jmeter/protocol/java/control/gui/BeanShellSamplerGui.java
Patch:
@@ -155,14 +155,14 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
     }
 
     private JPanel createScriptPanel() {
-        scriptField = new JSyntaxTextArea(20, 20);
+        scriptField = JSyntaxTextArea.getInstance(20, 20);
 
         JLabel label = new JLabel(JMeterUtils.getResString("bsh_script")); // $NON-NLS-1$
         label.setLabelFor(scriptField);
 
         JPanel panel = new JPanel(new BorderLayout());
         panel.add(label, BorderLayout.NORTH);
-        panel.add(new JTextScrollPane(scriptField), BorderLayout.CENTER);
+        panel.add(JTextScrollPane.getInstance(scriptField), BorderLayout.CENTER);
 
         JTextArea explain = new JTextArea(JMeterUtils.getResString("bsh_script_variables")); //$NON-NLS-1$
         explain.setLineWrap(true);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java
Patch:
@@ -106,7 +106,7 @@ public class JMSPublisherGui extends AbstractSamplerGui implements ChangeListene
 
     private final FilePanel randomFile = new FilePanel(JMeterUtils.getResString("jms_random_file"), ALL_FILES); //$NON-NLS-1$
 
-    private final JSyntaxTextArea textMessage = new JSyntaxTextArea(10, 50); // $NON-NLS-1$
+    private final JSyntaxTextArea textMessage = JSyntaxTextArea.getInstance(10, 50); // $NON-NLS-1$
 
     private final JLabeledRadioI18N msgChoice = new JLabeledRadioI18N("jms_message_type", MSGTYPES_ITEMS, TEXT_MSG_RSC); //$NON-NLS-1$
     
@@ -220,7 +220,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
 
         JPanel messageContentPanel = new JPanel(new BorderLayout());
         messageContentPanel.add(new JLabel(JMeterUtils.getResString("jms_text_area")), BorderLayout.NORTH);
-        messageContentPanel.add(new JTextScrollPane(textMessage), BorderLayout.CENTER);
+        messageContentPanel.add(JTextScrollPane.getInstance(textMessage), BorderLayout.CENTER);
 
         mainPanel.add(messageContentPanel);
         useProperties.addChangeListener(this);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSSamplerGui.java
Patch:
@@ -64,7 +64,7 @@ public class JMSSamplerGui extends AbstractSamplerGui {
 
     private JLabeledTextField jmsSelector = new JLabeledTextField(JMeterUtils.getResString("jms_selector")); //$NON-NLS-1$
 
-    private JSyntaxTextArea messageContent = new JSyntaxTextArea(10, 50); //$NON-NLS-1$
+    private JSyntaxTextArea messageContent = JSyntaxTextArea.getInstance(10, 50); //$NON-NLS-1$
 
     private JLabeledTextField initialContextFactory = new JLabeledTextField(
             JMeterUtils.getResString("jms_initial_context_factory")); //$NON-NLS-1$
@@ -257,7 +257,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
 
         JPanel messageContentPanel = new JPanel(new BorderLayout());
         messageContentPanel.add(new JLabel(JMeterUtils.getResString("jms_msg_content")), BorderLayout.NORTH);
-        messageContentPanel.add(new JTextScrollPane(messageContent), BorderLayout.CENTER);
+        messageContentPanel.add(JTextScrollPane.getInstance(messageContent), BorderLayout.CENTER);
         messagePanel.add(messageContentPanel, BorderLayout.CENTER);
 
         jmsPropertiesPanel = new JMSPropertiesPanel(); //$NON-NLS-1$

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/config/gui/TCPConfigGui.java
Patch:
@@ -219,15 +219,15 @@ private JPanel createEolBytePanel() {
 
     private JPanel createRequestPanel() {
         JLabel reqLabel = new JLabel(JMeterUtils.getResString("tcp_request_data")); // $NON-NLS-1$
-        requestData = new JSyntaxTextArea(15, 80);
+        requestData = JSyntaxTextArea.getInstance(15, 80);
         requestData.setLanguage("text"); //$NON-NLS-1$
         reqLabel.setLabelFor(requestData);
 
         JPanel reqDataPanel = new JPanel(new BorderLayout(5, 0));
         reqDataPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder()));
 
         reqDataPanel.add(reqLabel, BorderLayout.WEST);
-        reqDataPanel.add(new JTextScrollPane(requestData), BorderLayout.CENTER);
+        reqDataPanel.add(JTextScrollPane.getInstance(requestData), BorderLayout.CENTER);
         return reqDataPanel;
     }
 

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -1372,7 +1372,7 @@ public static boolean getHiDPIMode() {
      * @return the factor by which we should scale elements for HiDPI mode
      */
     public static double getHiDPIScaleFactor() {
-        return Double.valueOf(JMeterUtils.getPropDefault("jmeter.hidpi.scale.factor", "1.0"));  // $NON-NLS-1$  $NON-NLS-2$
+        return Double.parseDouble(JMeterUtils.getPropDefault("jmeter.hidpi.scale.factor", "1.0"));  // $NON-NLS-1$  $NON-NLS-2$
     }
 
     /**

File: test/src/org/apache/jmeter/testelement/PackageTest.java
Patch:
@@ -38,7 +38,6 @@
 public class PackageTest {
 
     // Test needs to run in this package in order to give access to AbstractTestElement.addProperty()
-    @Ignore
     @Test
     public void testBug50799() throws Exception {
         HeaderManager headerManager = new HeaderManager();

File: src/core/org/apache/jmeter/threads/gui/AbstractThreadGroupGui.java
Patch:
@@ -105,7 +105,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
     }
     
     private void initGui() {
-        continueBox.setSelected(true);
+        startNextLoop.setSelected(true);
     }
 
     private JPanel createOnErrorPanel() {

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/UrlConfigGui.java
Patch:
@@ -627,7 +627,7 @@ protected JPanel getProtocolAndMethodPanel() {
 
         if (notConfigOnly){
             method = new JLabeledChoice(JMeterUtils.getResString("method"), // $NON-NLS-1$
-                    HTTPSamplerBase.getValidMethodsAsArray(), true);
+                    HTTPSamplerBase.getValidMethodsAsArray(), true, false);
             method.addChangeListener(this);
         }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -176,8 +176,6 @@ protected void computeFromPostBody(HTTPSamplerBase sampler,
                 urlConfig.parseArguments(postData);
                 // Tell the sampler to do a multipart post
                 sampler.setDoMultipartPost(true);
-                // See https://bz.apache.org/bugzilla/show_bug.cgi?id=56141
-                sampler.setDoBrowserCompatibleMultipart(true);
                 // Remove the header for content-type and content-length, since
                 // those values will most likely be incorrect when the sampler
                 // performs the multipart request, because the boundary string

File: src/components/org/apache/jmeter/modifiers/gui/UserParametersGui.java
Patch:
@@ -207,8 +207,8 @@ private JPanel makeParameterPanel() {
         // paramTable.setPreferredScrollableViewportSize(new Dimension(100,
         // 70));
         // HiDPI mode management
-        if (HIDPI_MODE) {
-            paramTable.setRowHeight((int) Math.round(paramTable.getRowHeight() * HIDPI_SCALE_FACTOR));
+        if (JMeterUtils.getHiDPIMode()) {
+            paramTable.setRowHeight((int) Math.round(paramTable.getRowHeight() * JMeterUtils.getHiDPIScaleFactor()));
         }
 
         paramPanel = new JPanel(new BorderLayout());

File: src/components/org/apache/jmeter/visualizers/PropertyControlGui.java
Patch:
@@ -161,8 +161,8 @@ private Component makeMainPanel() {
         table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         // HiDPI mode management
-        if (HIDPI_MODE) {
-            table.setRowHeight((int) Math.round(table.getRowHeight() * HIDPI_SCALE_FACTOR));
+        if (JMeterUtils.getHiDPIMode()) {
+            table.setRowHeight((int) Math.round(table.getRowHeight() * JMeterUtils.getHiDPIScaleFactor()));
         }
         return makeScrollPane(table);
     }

File: src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
Patch:
@@ -414,8 +414,8 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
 
         myJTable = new JTable(model);
         // HiDPI mode management
-        if (HIDPI_MODE) {
-            myJTable.setRowHeight((int) Math.round(myJTable.getRowHeight() * HIDPI_SCALE_FACTOR));
+        if (JMeterUtils.getHiDPIMode()) {
+            myJTable.setRowHeight((int) Math.round(myJTable.getRowHeight() * JMeterUtils.getHiDPIScaleFactor()));
         }
         // Fix centering of titles
         myJTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer(COLUMNS_MSG_PARAMETERS));

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -174,8 +174,8 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         // new SortFilterModel(myStatTableModel);
         myJTable = new JTable(model);
         // HiDPI mode management
-        if (HIDPI_MODE) {
-            myJTable.setRowHeight((int) Math.round(myJTable.getRowHeight() * HIDPI_SCALE_FACTOR));
+        if (JMeterUtils.getHiDPIMode()) {
+            myJTable.setRowHeight((int) Math.round(myJTable.getRowHeight() * JMeterUtils.getHiDPIScaleFactor()));
         }
         myJTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer(StatGraphVisualizer.COLUMNS_MSG_PARAMETERS));
         myJTable.setPreferredScrollableViewportSize(new Dimension(500, 70));

File: src/components/org/apache/jmeter/visualizers/SummaryReport.java
Patch:
@@ -235,8 +235,8 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
 
         myJTable = new JTable(model);
         // HiDPI mode management
-        if (HIDPI_MODE) {
-            myJTable.setRowHeight((int) Math.round(myJTable.getRowHeight() * HIDPI_SCALE_FACTOR));
+        if (JMeterUtils.getHiDPIMode()) {
+            myJTable.setRowHeight((int) Math.round(myJTable.getRowHeight() * JMeterUtils.getHiDPIScaleFactor()));
         }
         myJTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         myJTable.setPreferredScrollableViewportSize(new Dimension(500, 70));

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -238,8 +238,8 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         // Set up the table itself
         table = new JTable(model);
         // HiDPI mode management
-        if (HIDPI_MODE) {
-            table.setRowHeight((int) Math.round(table.getRowHeight() * HIDPI_SCALE_FACTOR));
+        if (JMeterUtils.getHiDPIMode()) {
+            table.setRowHeight((int) Math.round(table.getRowHeight() * JMeterUtils.getHiDPIScaleFactor()));
         }
         table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         // table.getTableHeader().setReorderingAllowed(false);

File: src/core/org/apache/jmeter/config/gui/SimpleConfigGui.java
Patch:
@@ -204,8 +204,8 @@ private Component createTablePanel() {
 
         table = new JTable(tableModel);
         // HiDPI mode management
-        if (HIDPI_MODE) {
-            table.setRowHeight((int) Math.round(table.getRowHeight() * HIDPI_SCALE_FACTOR));
+        if (JMeterUtils.getHiDPIMode()) {
+            table.setRowHeight((int) Math.round(table.getRowHeight() * JMeterUtils.getHiDPIScaleFactor()));
         }
         table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/AuthPanel.java
Patch:
@@ -270,8 +270,8 @@ public JPanel createAuthTablePanel() {
         // create the JTable that holds auth per row
         authTable = new JTable(tableModel);
         // HiDPI mode management
-        if (HIDPI_MODE) {
-            authTable.setRowHeight((int) Math.round(authTable.getRowHeight() * HIDPI_SCALE_FACTOR));
+        if (JMeterUtils.getHiDPIMode()) {
+            authTable.setRowHeight((int) Math.round(authTable.getRowHeight() * JMeterUtils.getHiDPIScaleFactor()));
         }
         authTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         authTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -369,8 +369,8 @@ public JPanel createCookieTablePanel() {
         // create the JTable that holds one cookie per row
         cookieTable = new JTable(tableModel);
         // HiDPI mode management
-        if (HIDPI_MODE) {
-            cookieTable.setRowHeight((int) Math.round(cookieTable.getRowHeight() * HIDPI_SCALE_FACTOR));
+        if (JMeterUtils.getHiDPIMode()) {
+            cookieTable.setRowHeight((int) Math.round(cookieTable.getRowHeight() * JMeterUtils.getHiDPIScaleFactor()));
         }
         cookieTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         cookieTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/DNSCachePanel.java
Patch:
@@ -200,8 +200,8 @@ public JPanel createDnsServersTablePanel() {
         // create the JTable that holds header per row
         dnsServersTable = new JTable(dnsServersTableModel);
         // HiDPI mode management
-        if (HIDPI_MODE) {
-            dnsServersTable.setRowHeight((int) Math.round(dnsServersTable.getRowHeight() * HIDPI_SCALE_FACTOR));
+        if (JMeterUtils.getHiDPIMode()) {
+            dnsServersTable.setRowHeight((int) Math.round(dnsServersTable.getRowHeight() * JMeterUtils.getHiDPIScaleFactor()));
         }
         dnsServersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         dnsServersTable.setPreferredScrollableViewportSize(new Dimension(400, 100));

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java
Patch:
@@ -280,8 +280,8 @@ public JPanel createHeaderTablePanel() {
         // create the JTable that holds header per row
         headerTable = new JTable(tableModel);
         // HiDPI mode management
-        if (HIDPI_MODE) {
-            headerTable.setRowHeight((int) Math.round(headerTable.getRowHeight() * HIDPI_SCALE_FACTOR));
+        if (JMeterUtils.getHiDPIMode()) {
+            headerTable.setRowHeight((int) Math.round(headerTable.getRowHeight() * JMeterUtils.getHiDPIScaleFactor()));
         }
         headerTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         headerTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgumentsPanel.java
Patch:
@@ -291,8 +291,8 @@ private Component makeMainPanel() {
         initializeTableModel();
         table = new JTable(tableModel);
         // HiDPI mode management
-        if (HIDPI_MODE) {
-            table.setRowHeight((int) Math.round(table.getRowHeight() * HIDPI_SCALE_FACTOR));
+        if (JMeterUtils.getHiDPIMode()) {
+            table.setRowHeight((int) Math.round(table.getRowHeight() * JMeterUtils.getHiDPIScaleFactor()));
         }
         table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -135,7 +135,7 @@ protected Map<HostConfiguration, HttpClient> initialValue() {
 
         // Set default parameters as needed
         HttpParams params = DefaultHttpParams.getDefaultParams();
-
+        params.setIntParameter("http.protocol.max-redirects", HTTPSamplerBase.MAX_REDIRECTS); //$NON-NLS-1$
         // Process Commons HttpClient parameters file
         String file=JMeterUtils.getProperty("httpclient.parameters.file"); // $NON-NLS-1$
         if (file != null) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -204,9 +204,10 @@ protected Map<HttpClientKey, HttpClient> initialValue() {
 
     static {
         log.info("HTTP request retry count = "+RETRY_COUNT);
-        
+
         DEFAULT_HTTP_PARAMS = new SyncBasicHttpParams(); // Could we drop the Sync here?
         DEFAULT_HTTP_PARAMS.setBooleanParameter(CoreConnectionPNames.STALE_CONNECTION_CHECK, false);
+        DEFAULT_HTTP_PARAMS.setIntParameter(ClientPNames.MAX_REDIRECTS, HTTPSamplerBase.MAX_REDIRECTS);
         DefaultHttpClient.setDefaultHttpParams(DEFAULT_HTTP_PARAMS);
         
         // Process Apache HttpClient parameters file

File: src/core/org/apache/jmeter/gui/util/JMeterToolBar.java
Patch:
@@ -62,11 +62,11 @@ public class JMeterToolBar extends JToolBar implements LocaleChangeListener {
 
     protected static final String USER_DEFINED_TOOLBAR_PROPERTY_FILE = "jmeter.toolbar.icons"; //$NON-NLS-1$
 
-    protected static final String TOOLBAR_ICON_SIZE = "jmeter.toolbar.icons.size"; //$NON-NLS-1$
+    public static final String TOOLBAR_ICON_SIZE = "jmeter.toolbar.icons.size"; //$NON-NLS-1$
 
-    protected static final String DEFAULT_TOOLBAR_ICON_SIZE = "22x22"; //$NON-NLS-1$
+    public static final String DEFAULT_TOOLBAR_ICON_SIZE = "22x22"; //$NON-NLS-1$
     
-    private static final String TOOLBAR_LIST = "jmeter.toolbar";
+    protected static final String TOOLBAR_LIST = "jmeter.toolbar";
     
     /**
      * Create the default JMeter toolbar

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -176,6 +176,8 @@ protected void computeFromPostBody(HTTPSamplerBase sampler,
                 urlConfig.parseArguments(postData);
                 // Tell the sampler to do a multipart post
                 sampler.setDoMultipartPost(true);
+                // See https://bz.apache.org/bugzilla/show_bug.cgi?id=56141
+                sampler.setDoBrowserCompatibleMultipart(true);
                 // Remove the header for content-type and content-length, since
                 // those values will most likely be incorrect when the sampler
                 // performs the multipart request, because the boundary string

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserSequence.java
Patch:
@@ -31,8 +31,9 @@
  * This module controls the Sequence in which user details are returned. This
  * module uses round robin allocation of users.
  *
- * @version $Revision$
+ * @deprecated No replacement as not used anymore in JMeter, will be dropped in next version after 3.0
  */
+@Deprecated
 public class UserSequence implements Serializable {
     private static final long serialVersionUID = 233L;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -932,6 +932,7 @@ private void addTimers(JMeterTreeModel model, JMeterTreeNode node, long deltaT)
                 if (template instanceof Timer) {
                     TestElement timer = (TestElement) template.clone();
                     try {
+                        timer.setComment("Recorded:"+Long.toString(deltaT)+"ms");
                         replacer.undoReverseReplace(timer);
                         model.addComponent(timer, node);
                     } catch (InvalidVariableException

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/UrlConfigGui.java
Patch:
@@ -627,7 +627,7 @@ protected JPanel getProtocolAndMethodPanel() {
 
         if (notConfigOnly){
             method = new JLabeledChoice(JMeterUtils.getResString("method"), // $NON-NLS-1$
-                    HTTPSamplerBase.getValidMethodsAsArray());
+                    HTTPSamplerBase.getValidMethodsAsArray(), true);
             method.addChangeListener(this);
         }
 

File: src/core/org/apache/jmeter/control/GenericController.java
Patch:
@@ -56,7 +56,7 @@ public class GenericController extends AbstractTestElement implements Controller
     private transient LinkedList<LoopIterationListener> iterationListeners = new LinkedList<>();
 
     // Only create the map if it is required
-    private transient ConcurrentMap<TestElement, Object> children = new ConcurrentHashMap<TestElement, Object>();
+    private transient ConcurrentMap<TestElement, Object> children = new ConcurrentHashMap<>();
 
     private static final Object DUMMY = new Object();
 
@@ -420,7 +420,7 @@ protected void resetIterCount() {
     
     protected Object readResolve(){
         iterationListeners = new LinkedList<>();
-        children = new ConcurrentHashMap<TestElement, Object>();
+        children = new ConcurrentHashMap<>();
         subControllersAndSamplers = new ArrayList<>();
 
         return this;

File: src/core/org/apache/jmeter/threads/AbstractThreadGroup.java
Patch:
@@ -46,7 +46,7 @@ public abstract class AbstractThreadGroup extends AbstractTestElement
     private static final long serialVersionUID = 240L;
 
     // Only create the map if it is required
-    private transient final ConcurrentMap<TestElement, Object> children = new ConcurrentHashMap<TestElement, Object>();
+    private transient final ConcurrentMap<TestElement, Object> children = new ConcurrentHashMap<>();
 
     private static final Object DUMMY = new Object();
 

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -113,8 +113,9 @@ public class ViewResultsFullVisualizer extends AbstractVisualizer
                     "icon_warning_sml.gif")); //$NON-NLS-1$
 
     // Maximum size that we will display
+    // Default limited to 10 megabytes
     private static final int MAX_DISPLAY_SIZE =
-        JMeterUtils.getPropDefault("view.results.tree.max_size", 200 * 1024); // $NON-NLS-1$
+        JMeterUtils.getPropDefault("view.results.tree.max_size", 10485760); // $NON-NLS-1$
 
     // default display order
     private static final String VIEWERS_ORDER =

File: src/core/org/apache/jmeter/gui/action/RegexpSearcher.java
Patch:
@@ -44,7 +44,7 @@ public RegexpSearcher(boolean caseSensitive, String regexp) {
         if(caseSensitive) {
             pattern = Pattern.compile(newRegexp);
         } else {
-            pattern = Pattern.compile(newRegexp.toLowerCase());
+            pattern = Pattern.compile(newRegexp, Pattern.CASE_INSENSITIVE);
         }
     }
 

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -369,6 +369,8 @@ public void start(String[] args) {
             System.err.println("Error: " + error);
             System.out.println("Usage");
             System.out.println(CLUtil.describeOptions(options).toString());
+            // repeat the error so no need to scroll back past the usage to see it
+            System.out.println("Error: " + error);
             return;
         }
         try {

File: src/core/org/apache/jmeter/threads/AbstractThreadGroup.java
Patch:
@@ -46,8 +46,7 @@ public abstract class AbstractThreadGroup extends AbstractTestElement
     private static final long serialVersionUID = 240L;
 
     // Only create the map if it is required
-    private transient final ConcurrentMap<TestElement, Object> children = 
-            TestCompiler.IS_USE_STATIC_SET ? null : new ConcurrentHashMap<TestElement, Object>();
+    private transient final ConcurrentMap<TestElement, Object> children = new ConcurrentHashMap<TestElement, Object>();
 
     private static final Object DUMMY = new Object();
 

File: src/core/org/apache/jmeter/gui/util/FileDialoger.java
Patch:
@@ -111,7 +111,6 @@ public static JFileChooser promptToOpenFile(String[] exts) {
      *         finished using it - null if no file was chosen
      */
     public static JFileChooser promptToOpenFile(String[] exts, String existingFileName) {
-        // JFileChooser jfc = null;
         if(!StringUtils.isEmpty(existingFileName)) {
             File existingFileStart = new File(existingFileName);
             if(existingFileStart.exists() && existingFileStart.canRead()) {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HC3CookieHandler.java
Patch:
@@ -32,7 +32,9 @@
 
 /**
  * HTTPClient 3.1 implementation
+ * @deprecated since 3.0, will be removed in next version
  */
+@Deprecated
 public class HC3CookieHandler implements CookieHandler {
    private static final Logger log = LoggingManager.getLoggerForClass();
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -88,7 +88,9 @@
 
 /**
  * HTTP sampler using Apache (Jakarta) Commons HttpClient 3.1.
+ * @deprecated since 3.0, will be removed in next version
  */
+@Deprecated
 public class HTTPHC3Impl extends HTTPHCAbstractImpl {
 
     private static final Logger log = LoggingManager.getLoggerForClass();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java
Patch:
@@ -31,8 +31,9 @@
  * A sampler which understands all the parts necessary to read statistics about
  * HTTP requests, including cookies and authentication.
  * This sampler uses HttpClient 3.1.
- *
+ * @deprecated since 3.0, will be removed in next version
  */
+@Deprecated
 public class HTTPSampler2 extends HTTPSamplerBase implements Interruptible {
 
     private static final long serialVersionUID = 240L;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
Patch:
@@ -46,7 +46,9 @@
 
 /**
  * Commons HTTPClient based soap sampler
+ * @deprecated since 3.0, will be removed in next version
  */
+@Deprecated
 public class SoapSampler extends HTTPSampler2 implements Interruptible { // Implemented by parent class
     private static final Logger log = LoggingManager.getLoggerForClass();
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/LoopbackHttpClientSocketFactory.java
Patch:
@@ -34,8 +34,9 @@
 
 /**
  * Commons HttpClient protocol factory to generate Loopback HTTP sockets
+  * @deprecated since 3.0, will be removed in next version
  */
-
+@Deprecated
 public class LoopbackHttpClientSocketFactory implements ProtocolSocketFactory {
 
     public LoopbackHttpClientSocketFactory() {

File: src/protocol/http/org/apache/jmeter/protocol/http/util/SlowHttpClientSocketFactory.java
Patch:
@@ -30,8 +30,9 @@
 
 /**
  * Commons HttpClient protocol factory to generate "slow" sockets for emulating dial-up modems
+ * @deprecated since 3.0, will be removed in next version
  */
-
+@Deprecated
 public class SlowHttpClientSocketFactory implements ProtocolSocketFactory {
 
     private final int CPS; // Characters per second to emulate

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/UrlConfigGui.java
Patch:
@@ -627,7 +627,7 @@ protected JPanel getProtocolAndMethodPanel() {
 
         if (notConfigOnly){
             method = new JLabeledChoice(JMeterUtils.getResString("method"), // $NON-NLS-1$
-                    HTTPSamplerBase.getValidMethodsAsArray(), true);
+                    HTTPSamplerBase.getValidMethodsAsArray());
             method.addChangeListener(this);
         }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/UrlConfigGui.java
Patch:
@@ -627,7 +627,7 @@ protected JPanel getProtocolAndMethodPanel() {
 
         if (notConfigOnly){
             method = new JLabeledChoice(JMeterUtils.getResString("method"), // $NON-NLS-1$
-                    HTTPSamplerBase.getValidMethodsAsArray());
+                    HTTPSamplerBase.getValidMethodsAsArray(), true);
             method.addChangeListener(this);
         }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -421,7 +421,7 @@ private JComboBox<String> createComboHandler() {
         String tmpName = null;
         for (String clazz : classesToAdd) {
             String shortClazz = clazz.substring(clazz.lastIndexOf('.') + 1);
-            if (CookieManager.DEFAULT_IMPLEMENTATION.equals(clazz)) {
+            if (DEFAULT_IMPLEMENTATION.equals(clazz)) {
                 tmpName = shortClazz;
             }
             selectHandlerPanel.addItem(shortClazz);

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -280,9 +280,9 @@ public void clearGui() {
 
         tableModel.clearData();
         clearEachIteration.setSelected(false);
-        policy.setText(HC4CookieHandler.DEFAULT_POLICY_NAME);
         selectHandlerPanel.setSelectedItem(DEFAULT_IMPLEMENTATION
                 .substring(DEFAULT_IMPLEMENTATION.lastIndexOf('.') + 1));
+        policy.setText(HC4CookieHandler.DEFAULT_POLICY_NAME);
         deleteButton.setEnabled(false);
         saveButton.setEnabled(false);
     }

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -49,7 +49,7 @@ public final class JMeterVersion {
      * This ensures that JMeterUtils always gets the correct
      * version, even if JMeterUtils is not re-compiled during the build.
      */
-    private static final String VERSION = "2.13";
+    private static final String VERSION = "3.0-SNAPSHOT";
 
     private static final String IMPLEMENTATION;
     

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -400,7 +400,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
 
         _sampleCount=TRUE.equalsIgnoreCase(props.getProperty(SAVE_SAMPLE_COUNT, FALSE));
 
-        _idleTime=TRUE.equalsIgnoreCase(props.getProperty(SAVE_IDLE_TIME, FALSE));
+        _idleTime=TRUE.equalsIgnoreCase(props.getProperty(SAVE_IDLE_TIME, TRUE));
     }
 
     // Don't save this, as not settable via GUI

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -280,9 +280,9 @@ public void clearGui() {
 
         tableModel.clearData();
         clearEachIteration.setSelected(false);
-        policy.setText(HC4CookieHandler.DEFAULT_POLICY_NAME);
         selectHandlerPanel.setSelectedItem(DEFAULT_IMPLEMENTATION
                 .substring(DEFAULT_IMPLEMENTATION.lastIndexOf('.') + 1));
+        policy.setText(HC4CookieHandler.DEFAULT_POLICY_NAME);
         deleteButton.setEnabled(false);
         saveButton.setEnabled(false);
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -319,9 +319,10 @@ public void configure(TestElement el) {
         CookieManager cookieManager = (CookieManager) el;
         populateTable(cookieManager);
         clearEachIteration.setSelected((cookieManager).getClearEachIteration());
-        policy.setText(cookieManager.getPolicy());
         String fullImpl = cookieManager.getImplementation();
         selectHandlerPanel.setSelectedItem(fullImpl.substring(fullImpl.lastIndexOf('.') + 1));
+        // must set policy after setting handler (which may change the policy)
+        policy.setText(cookieManager.getPolicy());
     }
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -333,7 +333,7 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
             new JCheckBox(JMeterUtils.getResString("clear_cookies_per_iter"), false); //$NON-NLS-1$
         policy = new JLabeledChoice(
                 JMeterUtils.getResString("cookie_manager_policy"), //$NON-NLS-1$
-                getPolicies(CookieManager.DEFAULT_IMPLEMENTATION));
+                getPolicies(DEFAULT_IMPLEMENTATION));
         setLayout(new BorderLayout());
         setBorder(makeBorder());
         JPanel northPanel = new JPanel();

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
Patch:
@@ -54,7 +54,8 @@
 public class HC4CookieHandler implements CookieHandler {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    static String DEFAULT_POLICY_NAME = CookieSpecs.STANDARD; 
+    // Needed by CookiePanel
+    public static String DEFAULT_POLICY_NAME = CookieSpecs.STANDARD; 
 
     public static final String[] AVAILABLE_POLICIES = new String[]{
         DEFAULT_POLICY_NAME,

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -73,7 +73,6 @@
 import org.apache.http.client.params.ClientPNames;
 import org.apache.http.client.protocol.HttpClientContext;
 import org.apache.http.client.protocol.ResponseContentEncoding;
-import org.apache.http.conn.ClientConnectionManager;
 import org.apache.http.conn.ConnectionKeepAliveStrategy;
 import org.apache.http.conn.DnsResolver;
 import org.apache.http.conn.params.ConnRoutePNames;
@@ -89,6 +88,7 @@
 import org.apache.http.entity.mime.content.FileBody;
 import org.apache.http.entity.mime.content.StringBody;
 import org.apache.http.impl.client.AbstractHttpClient;
+import org.apache.http.impl.client.DefaultClientConnectionReuseStrategy;
 import org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;
@@ -726,8 +726,8 @@ protected HttpRequestRetryHandler createHttpRequestRetryHandler() {
             if (IDLE_TIMEOUT > 0) {
                 ((AbstractHttpClient) httpClient).setKeepAliveStrategy(IDLE_STRATEGY );
             }
-            // FIXME when 4.5.2 is released, see https://issues.apache.org/jira/browse/HTTPCORE-397
-            //((AbstractHttpClient) httpClient).setReuseStrategy(DefaultClientConnectionReuseStrategy.INSTANCE);
+            // see https://issues.apache.org/jira/browse/HTTPCORE-397
+            ((AbstractHttpClient) httpClient).setReuseStrategy(DefaultClientConnectionReuseStrategy.INSTANCE);
             ((AbstractHttpClient) httpClient).addResponseInterceptor(new ResponseContentEncoding());
             ((AbstractHttpClient) httpClient).addResponseInterceptor(METRICS_SAVER); // HACK
             ((AbstractHttpClient) httpClient).addRequestInterceptor(METRICS_RESETTER); 

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -400,7 +400,7 @@ public static SampleResult createTestSample(long elapsed) {
      * Allow users to create a sample with specific timestamp and elapsed times
      * for cloning purposes, but don't allow the times to be changed later
      *
-     * Currently used by OldSaveService, CSVSaveService and
+     * Currently used by CSVSaveService and
      * StatisticalSampleResult
      *
      * @param stamp

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -428,7 +428,7 @@ public SampleSaveConfiguration() {
     }
 
     /**
-     * Alternate constructor for use by OldSaveService
+     * Alternate constructor for use by CsvSaveService
      *
      * @param value initial setting for boolean fields used in Config dialogue
      */
@@ -790,8 +790,7 @@ public void setSampleCount(boolean save) {
     ///////////////// End of standard field accessors /////////////////////
 
     /**
-     * Only intended for use by OldSaveService (and test cases)
-     * 
+     * Intended for use by CsvSaveService (and test cases)
      * @param fmt
      *            format of the date to be saved. If <code>null</code>
      *            milliseconds since epoch will be printed

File: src/core/org/apache/jmeter/samplers/StatisticalSampleResult.java
Patch:
@@ -39,7 +39,7 @@ public StatisticalSampleResult(){// May be called by XStream
     }
 
     /**
-     * Allow OldSaveService to generate a suitable result when sample/error counts have been saved.
+     * Allow CsvSaveService to generate a suitable result when sample/error counts have been saved.
      *
      * @deprecated Needs to be replaced when multiple sample results are sorted out
      *

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -34,7 +34,7 @@
 
 import org.apache.jmeter.gui.util.HorizontalPanel;
 import org.apache.jmeter.gui.util.VerticalPanel;
-import org.apache.jmeter.protocol.http.config.gui.MultipartUrlConfigGui;
+import org.apache.jmeter.protocol.http.config.gui.UrlConfigGui;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
 import org.apache.jmeter.samplers.gui.AbstractSamplerGui;
@@ -56,7 +56,7 @@ public class HttpTestSampleGui extends AbstractSamplerGui {
 
     private static final Font FONT_SMALL = new Font("SansSerif", Font.PLAIN, (int) Math.round(FONT_DEFAULT.getSize() * 0.8));
 
-    private MultipartUrlConfigGui urlConfigGui;
+    private UrlConfigGui urlConfigGui;
 
     private JCheckBox getImages;
     
@@ -158,7 +158,7 @@ private void init() {// called from ctor, so must not be overridable
         add(makeTitlePanel(), BorderLayout.NORTH);
 
         // URL CONFIG
-        urlConfigGui = new MultipartUrlConfigGui(true, !isAJP);
+        urlConfigGui = new UrlConfigGui(true, !isAJP, true, true);
         add(urlConfigGui, BorderLayout.CENTER);
 
         // Bottom (embedded resources, source address and optional tasks)

File: src/core/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -283,7 +283,6 @@ public void triggerEndOfLoop() {
             // update them with SubSamplerResult
             if(subSampler instanceof TransactionSampler) {
                 TransactionSampler tc = (TransactionSampler) subSampler;
-                tc.getTransactionController().triggerEndOfLoop();
                 transactionSampler.addSubSamplerResult(tc.getTransactionResult());
             }
             transactionSampler.setTransactionDone();

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -278,7 +278,6 @@ public void clearGui() {
 
         tableModel.clearData();
         clearEachIteration.setSelected(false);
-        policy.setText(CookieManager.DEFAULT_POLICY);
         selectHandlerPanel.setSelectedItem(CookieManager.DEFAULT_IMPLEMENTATION
                 .substring(CookieManager.DEFAULT_IMPLEMENTATION.lastIndexOf('.') + 1));
         deleteButton.setEnabled(false);
@@ -332,7 +331,6 @@ private void init() { // WARNING: called from ctor so must not be overridden (i.
         policy = new JLabeledChoice(
                 JMeterUtils.getResString("cookie_manager_policy"), //$NON-NLS-1$
                 getPolicies(CookieManager.DEFAULT_IMPLEMENTATION));
-        policy.setText(CookieManager.DEFAULT_POLICY);
         setLayout(new BorderLayout());
         setBorder(makeBorder());
         JPanel northPanel = new JPanel();

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -222,7 +222,9 @@ public void actionPerformed(ActionEvent e) {
                 JMeterUtils.reportErrorToUser(ex.getMessage(), "Error saving cookies");
             }
         } else if (action.equals(HANDLER_COMMAND)) {
+            String currentPolicy = policy.getText();
             policy.setValues(getPolicies(handlerMap.get(selectHandlerPanel.getSelectedItem())));
+            policy.setText(currentPolicy);
          }
     }
 

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -631,7 +631,7 @@ private void initializeFileOutput() throws IOException {
      */
     public void flushFile() {
         if (out != null) {
-            log.info("forced flush through ResultCollecto#flushFile");
+            log.info("forced flush through ResultCollector#flushFile");
             out.flush();
         }
     }

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -210,7 +210,7 @@ private BasicDataSource initPool(String maxPool) {
         if(isKeepAlive()) {
             dataSource.setTestWhileIdle(true);
             dataSource.setValidationQuery(getCheckQuery());
-            dataSource.setMaxConnLifetimeMillis(Long.parseLong(getConnectionAge()));            
+            dataSource.setSoftMinEvictableIdleTimeMillis(Long.parseLong(getConnectionAge()));
             dataSource.setTimeBetweenEvictionRunsMillis(Integer.parseInt(getTrimInterval()));
         }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1634,7 +1634,9 @@ protected HTTPSampleResult resultProcessing(boolean areFollowingRedirect, int fr
         }
         if (isImageParser() && (SampleResult.TEXT).equals(res.getDataType()) && res.isSuccessful()) {
             if (frameDepth > MAX_FRAME_DEPTH) {
-                res.addSubResult(errorResult(new Exception("Maximum frame/iframe nesting depth exceeded."), new HTTPSampleResult(res)));
+                HTTPSampleResult errSubResult = new HTTPSampleResult(res);
+                errSubResult.removeSubResults();
+                res.addSubResult(errorResult(new Exception("Maximum frame/iframe nesting depth exceeded."), errSubResult));
             } else {
                 // Only download page resources if we were not redirected.
                 // If we were redirected, the page resources have already been

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HttpClientDefaultParameters.java
Patch:
@@ -56,7 +56,9 @@ private static abstract class GenericHttpParams {
      * 
      * @param file the file to load
      * @param params Commons HttpClient parameter instance
+     * @deprecated HC3.1 will be dropped in upcoming version
      */
+    @Deprecated
     public static void load(String file, 
             final org.apache.commons.httpclient.params.HttpParams params){
         load(file, 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/JMeterClientConnectionOperator.java
Patch:
@@ -42,7 +42,7 @@
 
 /**
  * Custom implementation of {@link DefaultClientConnectionOperator} to fix SNI Issue
- * @see https://bz.apache.org/bugzilla/show_bug.cgi?id=57935
+ * @see "https://bz.apache.org/bugzilla/show_bug.cgi?id=57935"
  * @since 3.0
  * TODO Remove it when full upgrade to 4.5.X is done and cleanup is made in the Socket Factory of JMeter that handles client certificates and Slow socket
  */

File: test/src/org/apache/jmeter/protocol/http/parser/TestHTMLParser.java
Patch:
@@ -129,7 +129,6 @@ private TestData(String htmlFileName, String baseUrl, String expectedSet, String
         
         // List of parsers to test. Should probably be derived automatically
         private static final String[] PARSERS = { 
-            "org.apache.jmeter.protocol.http.parser.HtmlParserHTMLParser",
             "org.apache.jmeter.protocol.http.parser.JTidyHTMLParser",
             "org.apache.jmeter.protocol.http.parser.RegexpHTMLParser",
             DEFAULT_JMETER_PARSER,

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -700,7 +700,7 @@ private HttpClient setupClient(URL url, SampleResult res) {
 
             DnsResolver resolver = this.testElement.getDNSResolver();
             if (resolver == null) {
-                resolver = new SystemDefaultDnsResolver();
+                resolver = SystemDefaultDnsResolver.INSTANCE;
             }
             ClientConnectionManager connManager = new MeasuringConnectionManager(createSchemeRegistry(), resolver);
             

File: src/core/org/apache/jmeter/testbeans/gui/TableEditor.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.awt.BorderLayout;
 import java.awt.Component;
+import java.awt.Dimension;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.FocusEvent;
@@ -107,6 +108,7 @@ private JComponent makePanel()
     {
         JPanel p = new JPanel(new BorderLayout());
         JScrollPane scroller = new JScrollPane(table);
+        scroller.setMinimumSize(new Dimension(100, 70));
         scroller.setPreferredSize(scroller.getMinimumSize());
         p.add(scroller,BorderLayout.CENTER);
         JPanel south = new JPanel();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/JMeterClientConnectionOperator.java
Patch:
@@ -98,14 +98,14 @@ public void opening(Socket sock, HttpHost target) throws IOException {
      */
     private static class HostNameSetter {
 
-        private static final AtomicReference<HostNameSetter> CURRENT = new AtomicReference<HostNameSetter>();
+        private static final AtomicReference<HostNameSetter> CURRENT = new AtomicReference<>();
 
         private final WeakReference<Class<?>> cls;
         private final WeakReference<Method> setter;
 
         private HostNameSetter(Class<?> clazz, Method setter) {
             this.cls = new WeakReference<Class<?>>(clazz);
-            this.setter = setter == null ? null : new WeakReference<Method>(setter);
+            this.setter = setter == null ? null : new WeakReference<>(setter);
         }
 
         private static Method init(Class<?> cls) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -180,7 +180,9 @@ public abstract class HTTPSamplerBase extends AbstractSampler
     
     public static final String CONCURRENT_POOL = "HTTPSampler.concurrentPool"; // $NON-NLS-1$
 
-    private static final String CONCURRENT_POOL_DEFAULT = "6"; // default for concurrent pool (do not change)
+    public static final int CONCURRENT_POOL_SIZE = 6; // Default concurrent pool size for download embedded resources
+
+    private static final String CONCURRENT_POOL_DEFAULT = Integer.toString(CONCURRENT_POOL_SIZE); // default for concurrent pool
     
     private static final String USER_AGENT = "User-Agent"; // $NON-NLS-1$
 
@@ -196,8 +198,6 @@ public abstract class HTTPSamplerBase extends AbstractSampler
     private static final boolean IGNORE_FAILED_EMBEDDED_RESOURCES = 
             JMeterUtils.getPropDefault("httpsampler.ignore_failed_embedded_resources", false); // $NON-NLS-1$ // default value: false
 
-    public static final int CONCURRENT_POOL_SIZE = 4; // Default concurrent pool size for download embedded resources
-
     private static final boolean IGNORE_EMBEDDED_RESOURCES_DATA = 
             JMeterUtils.getPropDefault("httpsampler.embedded_resources_use_md5", false); // $NON-NLS-1$ // default value: false
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -199,7 +199,7 @@ public abstract class HTTPSamplerBase extends AbstractSampler
     public static final int CONCURRENT_POOL_SIZE = 4; // Default concurrent pool size for download embedded resources
 
     private static final boolean IGNORE_EMBEDDED_RESOURCES_DATA = 
-            JMeterUtils.getPropDefault("httpsampler.ignore_embedded_resources_data", false); // $NON-NLS-1$ // default value: false
+            JMeterUtils.getPropDefault("httpsampler.embedded_resources_use_md5", false); // $NON-NLS-1$ // default value: false
 
     public static enum SourceType {
         HOSTNAME("web_testing_source_ip_hostname"), //$NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -180,7 +180,7 @@ public abstract class HTTPSamplerBase extends AbstractSampler
     
     public static final String CONCURRENT_POOL = "HTTPSampler.concurrentPool"; // $NON-NLS-1$
 
-    private static final String CONCURRENT_POOL_DEFAULT = "4"; // default for concurrent pool (do not change)
+    private static final String CONCURRENT_POOL_DEFAULT = "6"; // default for concurrent pool (do not change)
     
     private static final String USER_AGENT = "User-Agent"; // $NON-NLS-1$
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/SlowHC4SSLSocketFactory.java
Patch:
@@ -25,8 +25,9 @@
 
 /**
  * Apache HttpClient protocol factory to generate "slow" SSL sockets for emulating dial-up modems
+ * @deprecated Useless since 3.0
  */
-
+@Deprecated
 public class SlowHC4SSLSocketFactory extends HC4TrustAllSSLSocketFactory {
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HC4TrustAllSSLSocketFactory.java
Patch:
@@ -63,7 +63,7 @@ public HC4TrustAllSSLSocketFactory() throws GeneralSecurityException {
      */
     protected HC4TrustAllSSLSocketFactory(javax.net.ssl.SSLSocketFactory factory) throws GeneralSecurityException {
         super(TRUSTALL, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
-        this.factory = new HttpSSLProtocolSocketFactory((JsseSSLManager)JsseSSLManager.getInstance(), JsseSSLManager.CPS);
+        this.factory = factory;
     }
 
     /* (non-Javadoc)

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HttpWebdav.java
Patch:
@@ -41,7 +41,8 @@ public final class HttpWebdav extends HttpEntityEnclosingRequestBase {
                     HTTPConstants.LOCK,
                     HTTPConstants.UNLOCK,
                     HTTPConstants.REPORT,
-                    HTTPConstants.MKCALENDAR
+                    HTTPConstants.MKCALENDAR,
+                    HTTPConstants.SEARCH
             ));
     
     private String davMethod;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -96,7 +96,7 @@
 public abstract class HTTPSamplerBase extends AbstractSampler
     implements TestStateListener, TestIterationListener, ThreadListener, HTTPConstantsInterface {
 
-    private static final long serialVersionUID = 240L;
+    private static final long serialVersionUID = 241L;
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
@@ -241,7 +241,8 @@ public static final String[] getSourceTypeList() {
         HTTPConstants.LOCK,
         HTTPConstants.UNLOCK,
         HTTPConstants.REPORT,
-        HTTPConstants.MKCALENDAR
+        HTTPConstants.MKCALENDAR,
+        HTTPConstants.SEARCH
         };
 
     private static final List<String> METHODLIST = Collections.unmodifiableList(Arrays.asList(METHODS));

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java
Patch:
@@ -49,6 +49,7 @@ public interface HTTPConstantsInterface { // CHECKSTYLE IGNORE InterfaceIsType
     String CONNECT = "CONNECT"; // $NON-NLS-1$
     String REPORT = "REPORT"; // $NON-NLS-1$
     String MKCALENDAR = "MKCALENDAR"; // $NON-NLS-1$
+    String SEARCH = "SEARCH"; // $NON-NLS-1$
     String HEADER_AUTHORIZATION = "Authorization"; // $NON-NLS-1$
     String HEADER_COOKIE = "Cookie"; // $NON-NLS-1$
     String HEADER_CONNECTION = "Connection"; // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -121,7 +121,7 @@ public class ProxyControl extends GenericController {
 
     private static final String AUTH_MANAGER = AuthManager.class.getName();
 
-    public static final int DEFAULT_PORT = 8080;
+    public static final int DEFAULT_PORT = 8888;
 
     // and as a string
     public static final String DEFAULT_PORT_S =

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -310,7 +310,6 @@ public void start(String[] args) {
         }
         try {
             initializeProperties(parser); // Also initialises JMeter logging
-
             /*
              * The following is needed for HTTPClient.
              * (originally tried doing this in HTTPSampler2,
@@ -435,7 +434,7 @@ public void uncaughtException(Thread t, Throwable e) {
             System.out.println("Incorrect Usage");
             System.out.println(CLUtil.describeOptions(options).toString());
         } catch (Throwable e) {
-            log.fatalError("An error occurred: "+e.getMessage(),e);
+            log.fatalError("An error occurred: ",e);
             System.out.println("An error occurred: " + e.getMessage());
             System.exit(1); // TODO - could this be return?
         }

File: src/core/org/apache/jmeter/report/core/CsvSampleReader.java
Patch:
@@ -162,7 +162,7 @@ private Sample nextSample() {
             data = CSVSaveService.csvReadFile(reader, separator);
             Sample sample = null;
             if (data.length > 0) {
-                if (data.length < columnCount) {
+                if (data.length != columnCount) {
                     throw new SampleException("Mismatch between expected number of columns:"+columnCount+" and columns in CSV file:"+data.length+
                             ", check your jmeter.save.saveservice.* configuration");
                 }

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -435,7 +435,7 @@ public void uncaughtException(Thread t, Throwable e) {
             System.out.println("Incorrect Usage");
             System.out.println(CLUtil.describeOptions(options).toString());
         } catch (Throwable e) {
-            log.fatalError("An error occurred: ",e);
+            log.fatalError("An error occurred: "+e.getMessage(),e);
             System.out.println("An error occurred: " + e.getMessage());
             System.exit(1); // TODO - could this be return?
         }

File: src/core/org/apache/jmeter/report/core/Sample.java
Patch:
@@ -104,7 +104,7 @@ public <TData> TData getData(Class<TData> clazz, int index, String fieldName) {
         try {
             return Converters.convert(clazz, data[index]);
         } catch (ConvertException ex) {
-            throw new SampleException(ERROR_ON_SAMPLE + (row+1) + " converting field:"+fieldName+" to:"+clazz.getName()+", fieldValue:'"+data[index]+"'", ex);
+            throw new SampleException(ERROR_ON_SAMPLE + (row+1) + " converting field:"+fieldName+" at column:"+index+" to:"+clazz.getName()+", fieldValue:'"+data[index]+"'", ex);
         }
     }
 

File: src/core/org/apache/jmeter/report/dashboard/ReportGenerator.java
Patch:
@@ -214,9 +214,7 @@ public void generate() throws GenerationException {
         try {
             source.run();
         } catch (SampleException ex) {
-            String message = "Error while processing samples";
-            LOG.error(message, ex);
-            throw new GenerationException(message, ex);
+            throw new GenerationException("Error while processing samples:"+ex.getMessage(), ex);
         }
         LOG.debug("End of samples processing");
 

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParserHTMLParser.java
Patch:
@@ -105,9 +105,9 @@ private URLPointer(URL newUrl) {
 
     /**
      * Recursively parse all nodes to pick up all URL s.
-     * @see e the nodes to be parsed
-     * @see baseUrl Base URL from which the HTML code was obtained
-     * @see urls URLCollection
+     * @param e the nodes to be parsed
+     * @param baseUrl Base URL from which the HTML code was obtained
+     * @param urls URLCollection
      */
     private void parseNodes(final NodeIterator e,
             final URLPointer baseUrl, final URLCollection urls)

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
Patch:
@@ -158,8 +158,8 @@ protected int setPostHeaders(PostMethod post) {
     /**
      * Send POST data from <code>Entry</code> to the open connection.
      *
-     * @param post
-     * @throws IOException if an I/O exception occurs
+     * @param post POST request to send
+     * @param length the length of the content
      */
     private String sendPostData(PostMethod post, final int length) {
         // Buffer to hold the post body, except file content

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -377,8 +377,6 @@ public TestElement createTestElement(String objClass) {
      * @throws IllegalAccessException
      *             if access rights do not allow the default constructor to be
      *             called
-     * @throws ClassNotFoundException
-     *             if the specified GUI class cannot be found
      */
     private JMeterGUIComponent getGuiFromCache(Class<?> guiClass, Class<?> testClass) throws InstantiationException,
             IllegalAccessException {

File: src/core/org/apache/jmeter/gui/action/Start.java
Patch:
@@ -92,7 +92,7 @@ public void doAction(ActionEvent e) {
 
     /**
      * Start JMeter engine
-     * @param noTimer ignore timers 
+     * @param ignoreTimer flag to ignore timers
      */
     private void startEngine(boolean ignoreTimer) {
         GuiPackage gui = GuiPackage.getInstance();

File: src/core/org/apache/jmeter/gui/util/IconToolbarBean.java
Patch:
@@ -40,7 +40,7 @@ public final class IconToolbarBean {
     /**
      * Constructor to transform a line value (from icon set file) to a icon bean for toolbar.
      * @param strToSplit - the line value (i18n key, ActionNames ID, icon path, optional icon pressed path)
-     * @throws JMeterException if error in parsing.
+     * @throws IllegalArgumentException if error in parsing.
      */
     IconToolbarBean(final String strToSplit, final String iconSize) throws IllegalArgumentException {
         if (strToSplit == null) {

File: src/core/org/apache/jmeter/report/processor/CsvFileSampleSource.java
Patch:
@@ -158,7 +158,7 @@ private final long now() {
      * Get a readable time as hours, minutes and seconds from the specified time
      * in milliseconds
      * 
-     * @returns A readable string that displays the time provided as
+     * @return A readable string that displays the time provided as
      *          milliseconds
      */
     private final String time(long t) {

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -645,8 +645,8 @@ private JLabel createLabel(PropertyDescriptor desc) {
      * @param descriptor
      * @return the group String.
      */
-    private static String group(PropertyDescriptor d) {
-        String group = (String) d.getValue(GROUP);
+    private static String group(PropertyDescriptor descriptor) {
+        String group = (String) descriptor.getValue(GROUP);
         if (group == null){
             group = DEFAULT_GROUP;
         }

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -274,7 +274,7 @@ private void saveTransactionControllerConfigs(TransactionController tc) {
 
     /**
      * @param controllers
-     * @param i
+     * @param maybeController
      */
     private void addDirectParentControllers(List<Controller> controllers, TestElement maybeController) {
         if (maybeController instanceof Controller) {

File: src/functions/org/apache/jmeter/functions/Jexl3Function.java
Patch:
@@ -125,7 +125,7 @@ public JMeterArithmetic(boolean astrict) {
          * that arithmetic class avoiding to re-discover the operator overloads
          * (Uberspect) on each execution. So, no, this method is not called; it is just
          * meant as a workaround of the bug.
-         * @see https://issues.apache.org/jira/browse/JEXL-186
+         * @see <a href="https://issues.apache.org/jira/browse/JEXL-186">JEXL-186</a>
          * @param jma an improbable parameter class
          * @return 1
          */

File: src/jorphan/org/apache/jorphan/reflect/ClassFinder.java
Patch:
@@ -367,7 +367,6 @@ private static String fixPathEntry(String path){
      *
      * @param parentClasses list of classes to check for
      * @param strClassName name of class to be checked
-     * @param innerClasses should we allow inner classes?
      * @param contextClassLoader the classloader to use
      * @return true if the class is a non-abstract, non-interface instance of at least one of the parent classes
      */

File: src/protocol/java/org/apache/jmeter/protocol/java/test/JavaTest.java
Patch:
@@ -260,7 +260,7 @@ public Arguments getDefaultParameters() {
      * @see org.apache.jmeter.samplers.SampleResult#setSampleLabel(String)
      * @see org.apache.jmeter.samplers.SampleResult#setResponseCode(String)
      * @see org.apache.jmeter.samplers.SampleResult#setResponseMessage(String)
-     * @see org.apache.jmeter.samplers.SampleResult#setResponseData(byte [])
+     * @see org.apache.jmeter.samplers.SampleResult#setResponseData(byte[])
      * @see org.apache.jmeter.samplers.SampleResult#setDataType(String)
      *
      * @param context

File: test/src/org/apache/jmeter/protocol/http/sampler/PostWriterTest.java
Patch:
@@ -596,7 +596,6 @@ public void testSetHeaders_NoFilename() throws IOException {
      * setup commons parts of HTTPSampler with a no filename.
      *  
      * @param httpSampler
-     * @throws IOException
      */
     private void setupNoFilename(HTTPSampler httpSampler) {
         setupFilepart(sampler, "upload", null, "application/octet-stream");

File: src/components/org/apache/jmeter/assertions/HTMLAssertion.java
Patch:
@@ -186,7 +186,7 @@ public AssertionResult getResult(SampleResult inResponse) {
     /**
      * Writes the output of tidy to file.
      * 
-     * @param inOutput
+     * @param inOutput The String to write to file
      */
     private void writeOutput(String inOutput) {
         String lFilename = getFilename();

File: src/components/org/apache/jmeter/visualizers/RenderAsXML.java
Patch:
@@ -133,10 +133,10 @@ public DOMTreePanel(org.w3c.dom.Document document) {
         }
 
         /**
-         * Skip all DTD nodes, all prolog nodes. They dont support in tree view
-         * We let user to insert them however in DOMTreeView, we dont display it
+         * Skip all DTD nodes, all prolog nodes. They are not supported in tree view
+         * We let user insert them however in DOMTreeView, we don't display them.
          *
-         * @param root
+         * @param parent {@link Node}
          * @return
          */
         private Node getFirstElement(Node parent) {

File: src/components/org/apache/jmeter/visualizers/XMLDefaultMutableTreeNode.java
Patch:
@@ -68,7 +68,7 @@ public XMLDefaultMutableTreeNode(String name, Node xmlNode) {
     /**
      * init root
      *
-     * @param root
+     * @param xmlRoot
      * @throws SAXException
      */
     private void initRoot(Node xmlRoot) throws SAXException {

File: src/core/org/apache/jmeter/report/processor/FieldSampleComparator.java
Patch:
@@ -48,6 +48,6 @@ public final void initialize(SampleMetadata metadata) {
      */
     @Override
     public long compare(Sample s1, Sample s2) {
-        return s1.getData(long.class, index).compareTo(s2.getData(long.class, index));
+        return s1.getData(long.class, index, fieldName).compareTo(s2.getData(long.class, index, fieldName));
     }
 }

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -330,7 +330,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
 
         _delimiter = dlm;
 
-        _fieldNames = TRUE.equalsIgnoreCase(props.getProperty(PRINT_FIELD_NAMES_PROP, FALSE));
+        _fieldNames = TRUE.equalsIgnoreCase(props.getProperty(PRINT_FIELD_NAMES_PROP, TRUE));
 
         _dataType = TRUE.equalsIgnoreCase(props.getProperty(SAVE_DATA_TYPE_PROP, TRUE));
 

File: src/core/org/apache/jmeter/report/config/ReportGeneratorConfiguration.java
Patch:
@@ -79,7 +79,7 @@ public class ReportGeneratorConfiguration {
 
     // Title
     public static final String GRAPH_KEY_TITLE = "title";
-    public static final String GRAPH_KEY_TITLE_DEFAULT = "Generic graph title";
+    public static final String GRAPH_KEY_TITLE_DEFAULT = "";
 
     // Required exporter properties
     // Filters only sample series ?
@@ -91,8 +91,8 @@ public class ReportGeneratorConfiguration {
     public static final String EXPORTER_KEY_SERIES_FILTER_DEFAULT = "";
 
     // Show controllers only
-    private static final String EXPORTER_KEY_SHOW_CONTROLLERS_ONLY = "show_controllers_only";
-    private static final Boolean EXPORTER_KEY_SHOW_CONTROLLERS_ONLY_DEFAULT = Boolean.FALSE;
+    public static final String EXPORTER_KEY_SHOW_CONTROLLERS_ONLY = "show_controllers_only";
+    public static final Boolean EXPORTER_KEY_SHOW_CONTROLLERS_ONLY_DEFAULT = Boolean.FALSE;
 
     // Optional exporter properties
     public static final String EXPORTER_KEY_GRAPH_EXTRA_OPTIONS = "graph_options";

File: src/core/org/apache/jmeter/report/dashboard/ReportGenerator.java
Patch:
@@ -276,6 +276,9 @@ private void addGraphConsumer(FilterConsumer nameFilter,
             Object obj = clazz.newInstance();
             AbstractGraphConsumer graph = (AbstractGraphConsumer) obj;
             graph.setName(graphName);
+            
+            // Set the graph title
+            graph.setTitle(graphConfiguration.getTitle());
 
             // Set graph properties using reflection
             Method[] methods = clazz.getMethods();

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -372,7 +372,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
         _timestamp = !NONE.equalsIgnoreCase(_timeStampFormat);// reversed compare allows for null
 
         _saveAssertionResultsFailureMessage = TRUE.equalsIgnoreCase(props.getProperty(
-                ASSERTION_RESULTS_FAILURE_MESSAGE_PROP, FALSE));
+                ASSERTION_RESULTS_FAILURE_MESSAGE_PROP, TRUE));
 
         String whichAssertionResults = props.getProperty(ASSERTION_RESULTS_PROP, NONE);
         if (NONE.equals(whichAssertionResults)) {

File: src/core/org/apache/jmeter/report/core/Converters.java
Patch:
@@ -38,7 +38,7 @@ public Character convert(String value) throws ConvertException {
                 try {
                     return Character.valueOf(value.charAt(0));
                 } catch (NumberFormatException ex) {
-                    throw new ConvertException(value, Double.class.getName(),
+                    throw new ConvertException(value, Character.class.getName(),
                             ex);
                 }
             }
@@ -68,7 +68,7 @@ public Float convert(String value) throws ConvertException {
                 try {
                     return Float.valueOf(value);
                 } catch (NumberFormatException ex) {
-                    throw new ConvertException(value, Double.class.getName(),
+                    throw new ConvertException(value, Float.class.getName(),
                             ex);
                 }
             }
@@ -83,7 +83,7 @@ public Integer convert(String value) throws ConvertException {
                 try {
                     return Integer.valueOf(value);
                 } catch (NumberFormatException ex) {
-                    throw new ConvertException(value, Double.class.getName(),
+                    throw new ConvertException(value, Integer.class.getName(),
                             ex);
                 }
             }

File: test/src/org/apache/jmeter/protocol/http/proxy/TestHttpRequestHdr.java
Patch:
@@ -659,7 +659,7 @@ private void checkArgument(
             // Most browsers use ISO-8859-1 as default encoding, even if spec says UTF-8
             assertEquals(expectedEncodedValue, arg.getEncodedValue("ISO-8859-1"));
         }
-        assertEquals(expectedEncoded, arg.isAlwaysEncoded());
+        assertPrimitiveEquals(expectedEncoded, arg.isAlwaysEncoded());
     }
     
     private int getBodyLength(String postBody, String contentEncoding) throws IOException {

File: test/src/org/apache/jmeter/protocol/http/util/accesslog/TestLogFilter.java
Patch:
@@ -137,7 +137,7 @@ public void testExcludePattern() {
                 String theFile = td.file;
                 boolean expect = td.exclpatt;
 
-                assertEquals(!expect, testf.isFiltered(theFile, null));
+                assertPrimitiveEquals(!expect, testf.isFiltered(theFile, null));
                 String line = testf.filter(theFile);
                 if (line != null) {
                     assertTrue("Expect to accept " + theFile, expect);
@@ -154,7 +154,7 @@ public void testIncludePattern() {
                 String theFile = td.file;
                 boolean expect = td.inclpatt;
 
-                assertEquals(!expect, testf.isFiltered(theFile, null));
+                assertPrimitiveEquals(!expect, testf.isFiltered(theFile, null));
                 String line = testf.filter(theFile);
                 if (line != null) {
                     assertTrue("Expect to accept " + theFile, expect);

File: test/src/org/apache/jmeter/samplers/TestSampleResult.java
Patch:
@@ -25,6 +25,8 @@
 import static org.junit.Assert.fail;
 
 import java.io.StringWriter;
+
+import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.util.Calculator;
 import org.apache.log.LogTarget;
 import org.apache.log.format.Formatter;
@@ -208,7 +210,7 @@ private void testSubResults(boolean nanoTime, long nanoThreadSleep, long pause)
             // Sample that will get two sub results, simulates a web page load 
             SampleResult parent = new SampleResult(nanoTime, nanoThreadSleep);            
 
-            assertEquals(nanoTime, parent.useNanoTime);
+            JMeterTestCase.assertPrimitiveEquals(nanoTime, parent.useNanoTime);
             assertEquals(nanoThreadSleep, parent.nanoThreadSleep);
 
             long beginTest = parent.currentTimeInMillis();

File: test/src/org/apache/jmeter/samplers/TestSampleSaveConfiguration.java
Patch:
@@ -87,10 +87,10 @@ public void testEqualsAndHashCode() throws Exception {
         assertTrue(a.equals(b));
         assertTrue(b.equals(a));
         assertEquals(a.hashCode(), b.hashCode());
-        assertEquals(a.saveUrl(), b.saveUrl());
-        assertEquals(a.saveAssertions(), b.saveAssertions());
+        assertPrimitiveEquals(a.saveUrl(), b.saveUrl());
+        assertPrimitiveEquals(a.saveAssertions(), b.saveAssertions());
         assertEquals(a.getDelimiter(), b.getDelimiter());
-        assertEquals(a.saveDataType(), b.saveDataType());
+        assertPrimitiveEquals(a.saveDataType(), b.saveDataType());
         
         a.setAssertions(false);
         // a and b should not be equal

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -213,6 +213,8 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe
             // May generate IllegalArgumentException
             if (method.equals(HTTPConstants.POST)) {
                 httpMethod = new PostMethod(urlStr);
+            } else if (method.equals(HTTPConstants.GET)){
+                httpMethod = new GetMethod(urlStr);
             } else if (method.equals(HTTPConstants.PUT)){
                 httpMethod = new PutMethod(urlStr);
             } else if (method.equals(HTTPConstants.HEAD)){
@@ -228,8 +230,6 @@ public String getName() { // HC3.1 does not have the method
                         return HTTPConstants.DELETE;
                     }
                 };
-            } else if (method.equals(HTTPConstants.GET)){
-                httpMethod = new GetMethod(urlStr);
             } else if (method.equals(HTTPConstants.PATCH)){
                 httpMethod = new EntityEnclosingMethod(urlStr) {
                     @Override

File: src/functions/org/apache/jmeter/functions/EvalFunction.java
Patch:
@@ -18,8 +18,6 @@
 
 package org.apache.jmeter.functions;
 
-// @see PackageTest for unit tests
-
 import java.util.Collection;
 import java.util.LinkedList;
 import java.util.List;

File: src/functions/org/apache/jmeter/functions/EvalVarFunction.java
Patch:
@@ -18,8 +18,6 @@
 
 package org.apache.jmeter.functions;
 
-// @see PackageTest for unit tests
-
 import java.util.Collection;
 import java.util.LinkedList;
 import java.util.List;

File: test/src/org/apache/jmeter/assertions/XMLSchemaAssertionTest.java
Patch:
@@ -35,8 +35,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-//import org.apache.jorphan.logging.LoggingManager;
-
 public class XMLSchemaAssertionTest extends JMeterTestCase {
 
     private XMLSchemaAssertion assertion;
@@ -56,7 +54,6 @@ public void setUp() throws Exception {
         JMeterVariables vars = new JMeterVariables();
         jmctx.setVariables(vars);
         jmctx.setPreviousResult(result);
-        // LoggingManager.setPriority("DEBUG","jmeter");
     }
 
     private ByteArrayOutputStream readBA(String name) throws IOException {

File: test/src/org/apache/jmeter/assertions/XPathAssertionTest.java
Patch:
@@ -59,7 +59,6 @@ public void setUp() throws Exception {
         vars = new JMeterVariables();
         jmctx.setVariables(vars);
         jmctx.setPreviousResult(result);
-        //testLog.setPriority(org.apache.log.Priority.DEBUG);
     }
 
     private void setAlternateResponseData(){

File: test/src/org/apache/jmeter/engine/util/TestValueReplacer.java
Patch:
@@ -117,7 +117,6 @@ public void testReplace() throws Exception {
             TestElement element = new ConfigTestElement();
             element.setProperty(new StringProperty("domain", "${server}"));
             replacer.replaceValues(element);
-            //log.debug("domain property = " + element.getProperty("domain"));
             element.setRunningVersion(true);
             assertEquals("jakarta.apache.org", element.getPropertyAsString("domain"));
         }
@@ -130,7 +129,6 @@ public void testReplaceStringWithBackslash() throws Exception {
             String input = "\\${server} \\ \\\\ \\\\\\ \\, ";
             element.setProperty(new StringProperty("domain", input));
             replacer.replaceValues(element);
-            //log.debug("domain property = " + element.getProperty("domain"));
             element.setRunningVersion(true);
             assertEquals(input, element.getPropertyAsString("domain"));
         }
@@ -150,7 +148,6 @@ public void testReplaceFunctionWithBackslash() throws Exception {
             String input = "${server} \\ \\\\ \\\\\\ \\, ";
             element.setProperty(new StringProperty("domain", input));
             replacer.replaceValues(element);
-            //log.debug("domain property = " + element.getProperty("domain"));
             element.setRunningVersion(true);
             assertEquals("jakarta.apache.org \\ \\ \\\\ , ", element.getPropertyAsString("domain"));
         }

File: test/src/org/apache/jmeter/protocol/http/modifier/TestURLRewritingModifier.java
Patch:
@@ -203,7 +203,6 @@ public void testGrabSessionId4() throws Exception {
             context.setCurrentSampler(sampler);
             context.setPreviousResult(response);
             mod.process();
-            // Arguments args = sampler.getArguments();
             assertEquals("index.html;%24sid%24KQNq3AAADQZoEQAxlkX8uQV5bjqVBPbT", sampler.getPath());
         }
 

File: test/src/org/apache/jmeter/protocol/http/parser/TestHTMLParser.java
Patch:
@@ -122,9 +122,6 @@ private TestData(String htmlFileName, String baseUrl, String expectedSet, String
                 this.userAgent = userAgent;
             }
 
-//            private TestData(String f, String b, String s) {
-//                this(f, b, s, null);
-//            }
         }
         
         private static final String DEFAULT_JMETER_PARSER = 

File: test/src/org/apache/jmeter/testbeans/gui/TestBooleanPropertyEditor.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.beans.PropertyEditor;
 import java.beans.PropertyEditorManager;
+
 import org.junit.Test;
 
 /**
@@ -29,7 +30,7 @@
  *
  * Also checks that BooleanPropertyEditor behaves in the same way.
  */
-public class TestBooleanPropertyEditor extends junit.framework.TestCase {
+public class TestBooleanPropertyEditor {
  
     /*
      * N.B.

File: test/src/org/apache/jmeter/testbeans/gui/TestComboStringEditor.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.junit.Test;
 
-public class TestComboStringEditor extends junit.framework.TestCase {
+public class TestComboStringEditor {
 
         private void testSetGet(ComboStringEditor e, Object value) throws Exception {
             e.setValue(value);

File: test/src/org/apache/jmeter/junit/JMeterTest.java
Patch:
@@ -61,7 +61,7 @@
 import org.jdom.Element;
 import org.jdom.input.SAXBuilder;
 
-public class JMeterTest extends JMeterTestCase {
+public class JMeterTest extends JMeterTestCaseJUnit3 {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     private static Map<String, Boolean> guiTitles;

File: test/src/org/apache/jmeter/protocol/http/control/TestDNSCacheManager.java
Patch:
@@ -18,6 +18,8 @@
 
 package org.apache.jmeter.protocol.http.control;
 
+import static org.junit.Assert.fail;
+
 import java.net.UnknownHostException;
 
 import org.apache.jmeter.junit.JMeterTestCase;

File: test/src/org/apache/jmeter/protocol/http/parser/TestHTMLParser.java
Patch:
@@ -34,14 +34,14 @@
 import java.util.Vector;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.jmeter.junit.JMeterTestCase;
+import org.apache.jmeter.junit.JMeterTestCaseJUnit3;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
 import junit.framework.TestSuite;
 
-public class TestHTMLParser extends JMeterTestCase {
+public class TestHTMLParser extends JMeterTestCaseJUnit3 {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     private static final String DEFAULT_UA  = "Apache-HttpClient/4.2.6";

File: test/src/org/apache/jmeter/testbeans/gui/PackageTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.ResourceBundle;
 
 import org.apache.jmeter.gui.util.JMeterMenuBar;
-import org.apache.jmeter.junit.JMeterTestCase;
+import org.apache.jmeter.junit.JMeterTestCaseJUnit3;
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
@@ -47,7 +47,7 @@
  * TODO: - Check property files don't have duplicate keys (is this important)
  * 
  */
-public final class PackageTest extends JMeterTestCase {
+public final class PackageTest extends JMeterTestCaseJUnit3 {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     // ResourceBundle i18nEdit=

File: test/src/org/apache/jorphan/reflect/TestClassTools.java
Patch:
@@ -17,15 +17,16 @@
  */
 package org.apache.jorphan.reflect;
 
-import junit.framework.TestCase;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 
 import org.apache.jorphan.util.JMeterException;
 import org.junit.Test;
 
 /**
  * Test various aspects of the {@link ClassTools} class
  */
-public class TestClassTools extends TestCase {
+public class TestClassTools {
 
     /**
      * Test that a class can be constructed using the default constructor

File: src/core/org/apache/jmeter/report/dashboard/HtmlTemplateExporter.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Map;
 import java.util.TimeZone;
 
+import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang3.Validate;
 import org.apache.jmeter.report.config.ConfigurationException;
 import org.apache.jmeter.report.config.ExporterConfiguration;
@@ -263,6 +264,8 @@ public ResultData customizeResult(ResultData result) {
             templateCfg.setDirectoryForTemplateLoading(templateDirectory);
             templateCfg
                     .setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
+            LOG.info("Report will be generated in:"+outputDir.getAbsolutePath()+", creating folder structure");
+            FileUtils.forceMkdir(outputDir);
             TemplateVisitor visitor = new TemplateVisitor(
                     templateDirectory.toPath(), outputDir.toPath(),
                     templateCfg, dataContext);

File: src/core/org/apache/jmeter/report/core/ConvertException.java
Patch:
@@ -15,13 +15,13 @@
  * limitations under the License.
  *
  */
-package org.apache.jmeter.report.config;
+package org.apache.jmeter.report.core;
 
 /**
  * The class ConvertException provides an exception when
  * ConvertStringMethod.execute fails.
  *
- * @since 2.14
+ * @since 3.0
  */
 public class ConvertException extends Exception {
 

File: src/core/org/apache/jmeter/report/core/CsvSampleWriter.java
Patch:
@@ -151,7 +151,7 @@ public long write(Sample sample) {
         char[] specials = new char[] { separator,
                 CSVSaveService.QUOTING_CHAR, CharUtils.CR, CharUtils.LF };
         for (int i = 0; i < columnCount; i++) {
-            String data = sample.getString(i);
+            String data = sample.getData(i);
             row.append(CSVSaveService.quoteDelimiters(data, specials))
                     .append(separator);
         }

File: src/core/org/apache/jmeter/report/core/StringConverter.java
Patch:
@@ -15,15 +15,15 @@
  * limitations under the License.
  *
  */
-package org.apache.jmeter.report.config;
+package org.apache.jmeter.report.core;
 
 /**
  * The interface StringConverter represents a converter from a string to another
  * type.
  *
  * @param <TDest>
  *            the generic type
- * @since 2.14
+ * @since 3.0
  */
 public interface StringConverter<TDest> {
 

File: src/core/org/apache/jmeter/report/dashboard/ReportGenerator.java
Patch:
@@ -28,17 +28,17 @@
 
 import org.apache.commons.io.FileUtils;
 import org.apache.jmeter.report.config.ConfigurationException;
-import org.apache.jmeter.report.config.ConvertException;
-import org.apache.jmeter.report.config.Converters;
 import org.apache.jmeter.report.config.ExporterConfiguration;
 import org.apache.jmeter.report.config.GraphConfiguration;
 import org.apache.jmeter.report.config.ReportGeneratorConfiguration;
-import org.apache.jmeter.report.config.StringConverter;
 import org.apache.jmeter.report.core.ControllerSamplePredicate;
+import org.apache.jmeter.report.core.ConvertException;
+import org.apache.jmeter.report.core.Converters;
 import org.apache.jmeter.report.core.Sample;
 import org.apache.jmeter.report.core.SampleException;
 import org.apache.jmeter.report.core.SamplePredicate;
 import org.apache.jmeter.report.core.SampleSelector;
+import org.apache.jmeter.report.core.StringConverter;
 import org.apache.jmeter.report.processor.AbstractSampleConsumer;
 import org.apache.jmeter.report.processor.AggregateConsumer;
 import org.apache.jmeter.report.processor.ApdexSummaryConsumer;

File: src/core/org/apache/jmeter/report/processor/TaggerConsumer.java
Patch:
@@ -98,7 +98,7 @@ private Sample createIndexedSample(Sample sample, int channel, TIndex index) {
         SampleMetadata metadata = builder.getMetadata();
         int colCount = metadata.getColumnCount();
         for (int i = 0; i < colCount - 1; i++) {
-            builder.add(sample.getString(i));
+            builder.add(sample.getData(i));
         }
         builder.add(String.valueOf(index));
         return builder.build();

File: src/core/org/apache/jmeter/report/processor/graph/AbstractVersusRequestsGraphConsumer.java
Patch:
@@ -250,7 +250,7 @@ private Sample createIndexedSample(Sample sample, int channel,
             SampleMetadata metadata = builder.getMetadata();
             int colCount = metadata.getColumnCount();
             for (int i = 0; i < colCount - 1; i++) {
-                builder.add(sample.getString(i));
+                builder.add(sample.getData(i));
             }
             builder.add(String.valueOf(count));
             return builder.build();

File: src/core/org/apache/jmeter/report/processor/graph/impl/LatencyVSRequestGraphConsumer.java
Patch:
@@ -51,7 +51,7 @@ protected GraphKeysSelector createKeysSelector() {
             @Override
             public Double select(Sample sample) {
                 return sample
-                        .getDouble(AbstractVersusRequestsGraphConsumer.TIME_INTERVAL_LABEL);
+                        .getData(Double.class, AbstractVersusRequestsGraphConsumer.TIME_INTERVAL_LABEL);
             }
         };
     }

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimeVSRequestGraphConsumer.java
Patch:
@@ -51,7 +51,7 @@ protected GraphKeysSelector createKeysSelector() {
             @Override
             public Double select(Sample sample) {
                 return sample
-                        .getDouble(AbstractVersusRequestsGraphConsumer.TIME_INTERVAL_LABEL);
+                        .getData(Double.class, AbstractVersusRequestsGraphConsumer.TIME_INTERVAL_LABEL);
             }
         };
     }

File: src/core/org/apache/jmeter/report/processor/graph/impl/TimeVSThreadGraphConsumer.java
Patch:
@@ -65,7 +65,7 @@ protected Map<String, GroupInfo> createGroupInfos() {
 
         groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
                 new MeanAggregatorFactory(), new NameSeriesSelector(),
-                new ElapsedTimeValueSelector(), false, false));
+                new ElapsedTimeValueSelector(), false, true));
 
         return groupInfos;
     }

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapConfigGui.java
Patch:
@@ -99,7 +99,7 @@ public LdapConfigGui() {
     /**
      * Constructor which sets the displayName.
      *
-     * @param displayName name of the compnent
+     * @param displayName flag, whether to display the name of the component
      */
     public LdapConfigGui(boolean displayName) {
         this.displayName = displayName;

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/control/gui/LdapExtTestSamplerGui.java
Patch:
@@ -36,14 +36,13 @@
  * created Apr 29 2003 11:00 AM company Sip Technologies and Exports Ltd.
  *
  ******************************************************************************/
-
 public class LdapExtTestSamplerGui extends AbstractSamplerGui {
     private static final long serialVersionUID = 240L;
 
     private LdapExtConfigGui ldapDefaultPanel;
 
     /***************************************************************************
-     * !ToDo (Constructor description)
+     * Constructor that initialises the GUI components
      **************************************************************************/
     public LdapExtTestSamplerGui() {
         init();

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgumentsPanel.java
Patch:
@@ -129,9 +129,8 @@ public TestElement createTestElement() {
     @Override
     public void modifyTestElement(TestElement args) {
         GuiUtils.stopTableEditing(table);
-        LDAPArguments arguments = null;
         if (args instanceof LDAPArguments) {
-            arguments = (LDAPArguments) args;
+            LDAPArguments arguments = (LDAPArguments) args;
             arguments.clear();
             @SuppressWarnings("unchecked") // Only contains LDAPArgument entries
             Iterator<LDAPArgument> modelData = (Iterator<LDAPArgument>) tableModel.iterator();

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArguments.java
Patch:
@@ -37,7 +37,6 @@
  *
  * author Michael Stover author Mark Walsh
  */
-
 public class LDAPArguments extends ConfigTestElement implements Serializable {
     private static final long serialVersionUID = 240L;
 

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgument.java
Patch:
@@ -35,7 +35,6 @@
  *
  * author Michael Stover author Mark Walsh
  */
-
 public class LDAPArgument extends AbstractTestElement implements Serializable {
 
     private static final long serialVersionUID = 240L;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1366,8 +1366,10 @@ private String escapeIllegalURLCharacters(String url) {
         try {
             String escapedUrl = ConversionUtils.escapeIllegalURLCharacters(url);
             if (!escapedUrl.equals(url)) {
-                log.warn("Url '" + url + "' has been escaped to '" + escapedUrl
+                if(log.isDebugEnabled()) {
+                    log.debug("Url '" + url + "' has been escaped to '" + escapedUrl
                         + "'. Please corect your webpage.");
+                }
             }
             return escapedUrl;
         } catch (Exception e1) {

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -680,7 +680,7 @@ private JPanel makeButtonPanel() {
     /**
      * Initialize the components and layout of this component.
      */
-    protected void init() {
+    private void init() { // WARNING: called from ctor so must not be overridden (i.e. must be private or final)
         JPanel p = this;
 
         if (standalone) {

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPArgumentsPanel.java
Patch:
@@ -92,6 +92,7 @@ protected HTTPArgument makeNewArgument() {
 
     public HTTPArgumentsPanel() {
         super(JMeterUtils.getResString("paramtable")); //$NON-NLS-1$
+        init();
     }
 
     @Override
@@ -166,9 +167,7 @@ protected Argument createArgumentFromClipboard(String[] clipboardCols) {
         return argument;
     }
 
-    @Override
-    protected void init() {
-        super.init();
+    private void init() { // WARNING: called from ctor so must not be overridden (i.e. must be private or final)
         
         // register the right click menu
         JTable table = getTable();

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -680,7 +680,7 @@ private JPanel makeButtonPanel() {
     /**
      * Initialize the components and layout of this component.
      */
-    protected final void init() {
+    protected void init() {
         JPanel p = this;
 
         if (standalone) {

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -680,7 +680,7 @@ private JPanel makeButtonPanel() {
     /**
      * Initialize the components and layout of this component.
      */
-    protected void init() {
+    protected final void init() {
         JPanel p = this;
 
         if (standalone) {

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -674,7 +674,7 @@ private JPanel makeButtonPanel() {
     /**
      * Initialize the components and layout of this component.
      */
-    private void init() {
+    protected void init() {
         JPanel p = this;
 
         if (standalone) {

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPArgumentsPanel.java
Patch:
@@ -130,7 +130,7 @@ public void configure(TestElement el) {
                 tableModel.addRow(arg);
             }
         }
-        checkDeleteStatus();
+        checkButtonsStatus();
     }
 
     protected boolean isMetaDataNormal(HTTPArgument arg) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
Patch:
@@ -179,7 +179,7 @@ protected HttpURLConnection setupConnection(URL u, String method, HTTPSampleResu
             }
         }
 
-        // a well-bahaved browser is supposed to send 'Connection: close'
+        // a well-behaved browser is supposed to send 'Connection: close'
         // with the last request to an HTTP server. Instead, most browsers
         // leave it to the server to close the connection after their
         // timeout period. Leave it to the JMeter user to decide.

File: src/core/org/apache/jmeter/report/dashboard/ReportGenerator.java
Patch:
@@ -117,7 +117,7 @@ public ReportGenerator(String resultsFile, ResultCollector resultCollector)
         if (resultCollector == null) {
             if (!(file.isFile() && file.canRead())) {
                 throw new IllegalArgumentException(String.format(
-                        "Invalid test results file : %s", file));
+                        "Cannot read test results file : %s", file));
             }
             LOG.info("Will only generate report from results file:"
                     + resultsFile);

File: src/components/org/apache/jmeter/control/gui/InterleaveControlGui.java
Patch:
@@ -21,6 +21,7 @@
 import javax.swing.JCheckBox;
 
 import org.apache.jmeter.control.InterleaveControl;
+import org.apache.jmeter.gui.util.CheckBoxPanel;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.layout.VerticalLayout;
@@ -87,6 +88,6 @@ private void init() {
         add(makeTitlePanel());
 
         style = new JCheckBox(JMeterUtils.getResString("ignore_subcontrollers")); // $NON-NLS-1$
-        add(style);
+        add(CheckBoxPanel.wrap(style));
     }
 }

File: src/components/org/apache/jmeter/control/gui/RandomControlGui.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.apache.jmeter.control.InterleaveControl;
 import org.apache.jmeter.control.RandomController;
+import org.apache.jmeter.gui.util.CheckBoxPanel;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.layout.VerticalLayout;
@@ -87,6 +88,6 @@ private void init() {
         add(makeTitlePanel());
 
         style = new JCheckBox(JMeterUtils.getResString("ignore_subcontrollers")); // $NON-NLS-1$
-        add(style);
+        add(CheckBoxPanel.wrap(style));
     }
 }

File: src/components/org/apache/jmeter/control/gui/ThroughputControllerGui.java
Patch:
@@ -31,6 +31,7 @@
 import javax.swing.JTextField;
 
 import org.apache.jmeter.control.ThroughputController;
+import org.apache.jmeter.gui.util.CheckBoxPanel;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.layout.VerticalLayout;
@@ -169,6 +170,6 @@ public void itemStateChanged(ItemEvent event) {
                 }
             }
         });
-        add(perthread);
+        add(CheckBoxPanel.wrap(perthread));
     }
 }

File: src/components/org/apache/jmeter/modifiers/gui/CounterConfigGui.java
Patch:
@@ -24,6 +24,7 @@
 import javax.swing.JCheckBox;
 
 import org.apache.jmeter.config.gui.AbstractConfigGui;
+import org.apache.jmeter.gui.util.CheckBoxPanel;
 import org.apache.jmeter.modifiers.CounterConfig;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
@@ -137,8 +138,8 @@ private void init() {
         add(endField);
         add(formatField);
         add(varNameField);
-        add(perUserField);
-        add(resetCounterOnEachThreadGroupIteration);
+        add(CheckBoxPanel.wrap(perUserField));
+        add(CheckBoxPanel.wrap(resetCounterOnEachThreadGroupIteration));
 
         perUserField.addActionListener(this);
     }

File: src/core/org/apache/jmeter/control/gui/TransactionControllerGui.java
Patch:
@@ -21,6 +21,7 @@
 import javax.swing.JCheckBox;
 
 import org.apache.jmeter.control.TransactionController;
+import org.apache.jmeter.gui.util.CheckBoxPanel;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.layout.VerticalLayout;
@@ -82,8 +83,8 @@ private void init() {
         setBorder(makeBorder());
         add(makeTitlePanel());
         generateParentSample = new JCheckBox(JMeterUtils.getResString("transaction_controller_parent")); // $NON-NLS-1$
-        add(generateParentSample);
+        add(CheckBoxPanel.wrap(generateParentSample));
         includeTimers = new JCheckBox(JMeterUtils.getResString("transaction_controller_include_timers"), true); // $NON-NLS-1$
-        add(includeTimers);
+        add(CheckBoxPanel.wrap(includeTimers));
     }
 }

File: src/core/org/apache/jmeter/reporters/Summariser.java
Patch:
@@ -71,8 +71,8 @@ public class Summariser extends AbstractTestElement
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    /** interval between summaries (in seconds) default 3 minutes */
-    private static final long INTERVAL = JMeterUtils.getPropDefault("summariser.interval", 3 * 60); //$NON-NLS-1$
+    /** interval between summaries (in seconds) default 30 seconds */
+    private static final long INTERVAL = JMeterUtils.getPropDefault("summariser.interval", 30); //$NON-NLS-1$
 
     /** Write messages to log file ? */
     private static final boolean TOLOG = JMeterUtils.getPropDefault("summariser.log", true); //$NON-NLS-1$

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -797,7 +797,7 @@ private void runNonGui(String testFile, String logFile, boolean remoteStart, Str
             convertSubTree(tree);
 
             Summariser summer = null;
-            String summariserName = JMeterUtils.getPropDefault("summariser.name", "summary");//$NON-NLS-1$
+            String summariserName = JMeterUtils.getPropDefault("summariser.name", "");//$NON-NLS-1$
             if (summariserName.length() > 0) {
                 log.info("Creating summariser <" + summariserName + ">");
                 println("Creating summariser <" + summariserName + ">");

File: src/core/org/apache/jmeter/reporters/Summariser.java
Patch:
@@ -71,8 +71,8 @@ public class Summariser extends AbstractTestElement
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    /** interval between summaries (in seconds) default 30 seconds */
-    private static final long INTERVAL = JMeterUtils.getPropDefault("summariser.interval", 30); //$NON-NLS-1$
+    /** interval between summaries (in seconds) default 3 minutes */
+    private static final long INTERVAL = JMeterUtils.getPropDefault("summariser.interval", 3 * 60); //$NON-NLS-1$
 
     /** Write messages to log file ? */
     private static final boolean TOLOG = JMeterUtils.getPropDefault("summariser.log", true); //$NON-NLS-1$

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -192,7 +192,7 @@ private static boolean validateFormat(String format){
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "1e7d41832b89d6436a366b621d03d7888d9dfd1d"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "59d3dfc5e81300143d090a6e8cf86496b006fb33"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/components/org/apache/jmeter/visualizers/DistributionGraphVisualizer.java
Patch:
@@ -44,8 +44,9 @@
  * Distribution graphs are useful for standard benchmarks and viewing the
  * distribution of data points. Results tend to clump together.
  *
- * Created May 25, 2004
+ * @deprecated since 3.0
  */
+@Deprecated
 public class DistributionGraphVisualizer extends AbstractVisualizer implements ImageVisualizer, GraphListener,
         Clearable {
     private static final long serialVersionUID = 240L;

File: src/components/org/apache/jmeter/visualizers/SplineVisualizer.java
Patch:
@@ -43,7 +43,9 @@
  * Spline interpolated curve. Currently, it tries to look mostly like the
  * GraphVisualizer.
  *
+ * @deprecated since 3.0
  */
+@Deprecated
 public class SplineVisualizer extends AbstractVisualizer implements ImageVisualizer, GraphListener {
 
     private static final long serialVersionUID = 240L;

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/HttpDefaultsGui.java
Patch:
@@ -172,8 +172,8 @@ public void itemStateChanged(final ItemEvent e) {
             }
         });
         concurrentPool = new JTextField(2); // 2 columns size
-        concurrentPool.setMinimumSize(new Dimension(10,20));
-        concurrentPool.setMaximumSize(new Dimension(30,20));
+        concurrentPool.setMinimumSize(new Dimension(10, (int) concurrentPool.getPreferredSize().getHeight()));
+        concurrentPool.setMaximumSize(new Dimension(30, (int) concurrentPool.getPreferredSize().getHeight()));
         embeddedRsrcPanel.add(concurrentDwn);
         embeddedRsrcPanel.add(concurrentPool);
         

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -726,6 +726,8 @@ protected HttpRequestRetryHandler createHttpRequestRetryHandler() {
             if (IDLE_TIMEOUT > 0) {
                 ((AbstractHttpClient) httpClient).setKeepAliveStrategy(IDLE_STRATEGY );
             }
+            // FIXME when 4.5.2 is released, see https://issues.apache.org/jira/browse/HTTPCORE-397
+            //((AbstractHttpClient) httpClient).setReuseStrategy(DefaultClientConnectionReuseStrategy.INSTANCE);
             ((AbstractHttpClient) httpClient).addResponseInterceptor(new ResponseContentEncoding());
             ((AbstractHttpClient) httpClient).addResponseInterceptor(METRICS_SAVER); // HACK
             ((AbstractHttpClient) httpClient).addRequestInterceptor(METRICS_RESETTER); 

File: src/components/org/apache/jmeter/visualizers/AssertionVisualizer.java
Patch:
@@ -57,7 +57,7 @@ public void add(SampleResult sample) {
         sb.append(sample.getSampleLabel());
         sb.append(getAssertionResult(sample));
         sb.append("\n"); // $NON-NLS-1$
-        JMeterUtils.runSafe(true, new Runnable() {
+        JMeterUtils.runSafe(false, new Runnable() {
             @Override
             public void run() {
                 synchronized (textArea) {

File: src/components/org/apache/jmeter/visualizers/ComparisonVisualizer.java
Patch:
@@ -60,7 +60,7 @@ public ComparisonVisualizer() {
 
     @Override
     public void add(final SampleResult sample) {
-        JMeterUtils.runSafe(true, new Runnable() {
+        JMeterUtils.runSafe(false, new Runnable() {
             @Override
             public void run() {
                 DefaultMutableTreeNode currNode = new DefaultMutableTreeNode(sample);

File: src/components/org/apache/jmeter/visualizers/DistributionGraphVisualizer.java
Patch:
@@ -108,7 +108,7 @@ public synchronized void updateGui(Sample s) {
 
     @Override
     public void add(final SampleResult res) {
-        JMeterUtils.runSafe(true, new Runnable() {
+        JMeterUtils.runSafe(false, new Runnable() {
             @Override
             public void run() {
                 // made currentSample volatile

File: src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
Patch:
@@ -131,7 +131,7 @@ public synchronized void updateGui(Sample s) {
 
     @Override
     public void add(final SampleResult res) {
-        JMeterUtils.runSafe(true, new Runnable() {            
+        JMeterUtils.runSafe(false, new Runnable() {
             @Override
             public void run() {
                 updateGui(model.addSample(res));

File: src/components/org/apache/jmeter/visualizers/MailerVisualizer.java
Patch:
@@ -122,7 +122,7 @@ public synchronized void clearData() {
     @Override
     public void add(final SampleResult res) {
         if (getModel() != null) {
-            JMeterUtils.runSafe(true, new Runnable() {
+            JMeterUtils.runSafe(false, new Runnable() {
                 @Override
                 public void run() {
                     MailerModel model = ((MailerResultCollector) getModel()).getMailerModel();

File: src/components/org/apache/jmeter/visualizers/RespTimeGraphVisualizer.java
Patch:
@@ -299,7 +299,7 @@ public void add(final SampleResult sampleResult) {
         if ((matcher == null) || (matcher.find())) {
             final long startTimeMS = sampleResult.getStartTime();
             final long startTimeInterval = startTimeMS / intervalValue;
-            JMeterUtils.runSafe(true, new Runnable() {
+            JMeterUtils.runSafe(false, new Runnable() {
                 @Override
                 public void run() {
                     synchronized (lock) {

File: src/components/org/apache/jmeter/visualizers/SplineVisualizer.java
Patch:
@@ -94,7 +94,7 @@ public SplineVisualizer() {
 
     @Override
     public void add(final SampleResult res) {
-        JMeterUtils.runSafe(true, new Runnable() {            
+        JMeterUtils.runSafe(false, new Runnable() {
             @Override
             public void run() {
                 model.add(res);

File: src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
Patch:
@@ -361,7 +361,7 @@ public void add(final SampleResult res) {
             matcher = pattern.matcher(sampleLabel);
         }
         if ((matcher == null) || (matcher.find())) {
-            JMeterUtils.runSafe(true, new Runnable() {
+            JMeterUtils.runSafe(false, new Runnable() {
                 @Override
                 public void run() {
                     SamplingStatCalculator row = null;

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -114,7 +114,7 @@ public String getLabelResource() {
 
     @Override
     public void add(final SampleResult res) {
-        JMeterUtils.runSafe(true, new Runnable() {
+        JMeterUtils.runSafe(false, new Runnable() {
             @Override
             public void run() {
                 SamplingStatCalculator row = null;

File: src/components/org/apache/jmeter/visualizers/SummaryReport.java
Patch:
@@ -177,7 +177,7 @@ public String getLabelResource() {
     @Override
     public void add(final SampleResult res) {
         final String sampleLabel = res.getSampleLabel(useGroupName.isSelected());
-        JMeterUtils.runSafe(true, new Runnable() {
+        JMeterUtils.runSafe(false, new Runnable() {
             @Override
             public void run() {
                 Calculator row = null;

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -166,7 +166,7 @@ protected synchronized void updateTextFields(SampleResult res) {
 
     @Override
     public void add(final SampleResult res) {
-        JMeterUtils.runSafe(true, new Runnable() {
+        JMeterUtils.runSafe(false, new Runnable() {
             @Override
             public void run() {
                 if (childSamples.isSelected()) {

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -131,7 +131,7 @@ public ViewResultsFullVisualizer() {
     /** {@inheritDoc} */
     @Override
     public void add(final SampleResult sample) {
-        JMeterUtils.runSafe(true, new Runnable() {
+        JMeterUtils.runSafe(false, new Runnable() {
             @Override
             public void run() {
                 updateGui(sample);

File: src/components/org/apache/jmeter/visualizers/AssertionVisualizer.java
Patch:
@@ -57,7 +57,7 @@ public void add(SampleResult sample) {
         sb.append(sample.getSampleLabel());
         sb.append(getAssertionResult(sample));
         sb.append("\n"); // $NON-NLS-1$
-        JMeterUtils.runSafe(new Runnable() {
+        JMeterUtils.runSafe(true, new Runnable() {
             @Override
             public void run() {
                 synchronized (textArea) {

File: src/components/org/apache/jmeter/visualizers/ComparisonVisualizer.java
Patch:
@@ -60,7 +60,7 @@ public ComparisonVisualizer() {
 
     @Override
     public void add(final SampleResult sample) {
-        JMeterUtils.runSafe(new Runnable() {
+        JMeterUtils.runSafe(true, new Runnable() {
             @Override
             public void run() {
                 DefaultMutableTreeNode currNode = new DefaultMutableTreeNode(sample);

File: src/components/org/apache/jmeter/visualizers/DistributionGraphVisualizer.java
Patch:
@@ -108,7 +108,7 @@ public synchronized void updateGui(Sample s) {
 
     @Override
     public void add(final SampleResult res) {
-        JMeterUtils.runSafe(new Runnable() {
+        JMeterUtils.runSafe(true, new Runnable() {
             @Override
             public void run() {
                 // made currentSample volatile

File: src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
Patch:
@@ -131,7 +131,7 @@ public synchronized void updateGui(Sample s) {
 
     @Override
     public void add(final SampleResult res) {
-        JMeterUtils.runSafe(new Runnable() {            
+        JMeterUtils.runSafe(true, new Runnable() {            
             @Override
             public void run() {
                 updateGui(model.addSample(res));

File: src/components/org/apache/jmeter/visualizers/MailerVisualizer.java
Patch:
@@ -122,7 +122,7 @@ public synchronized void clearData() {
     @Override
     public void add(final SampleResult res) {
         if (getModel() != null) {
-            JMeterUtils.runSafe(new Runnable() {
+            JMeterUtils.runSafe(true, new Runnable() {
                 @Override
                 public void run() {
                     MailerModel model = ((MailerResultCollector) getModel()).getMailerModel();

File: src/components/org/apache/jmeter/visualizers/RespTimeGraphVisualizer.java
Patch:
@@ -299,7 +299,7 @@ public void add(final SampleResult sampleResult) {
         if ((matcher == null) || (matcher.find())) {
             final long startTimeMS = sampleResult.getStartTime();
             final long startTimeInterval = startTimeMS / intervalValue;
-            JMeterUtils.runSafe(new Runnable() {
+            JMeterUtils.runSafe(true, new Runnable() {
                 @Override
                 public void run() {
                     synchronized (lock) {

File: src/components/org/apache/jmeter/visualizers/SplineVisualizer.java
Patch:
@@ -94,7 +94,7 @@ public SplineVisualizer() {
 
     @Override
     public void add(final SampleResult res) {
-        JMeterUtils.runSafe(new Runnable() {            
+        JMeterUtils.runSafe(true, new Runnable() {            
             @Override
             public void run() {
                 model.add(res);

File: src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
Patch:
@@ -361,7 +361,7 @@ public void add(final SampleResult res) {
             matcher = pattern.matcher(sampleLabel);
         }
         if ((matcher == null) || (matcher.find())) {
-            JMeterUtils.runSafe(new Runnable() {
+            JMeterUtils.runSafe(true, new Runnable() {
                 @Override
                 public void run() {
                     SamplingStatCalculator row = null;

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -114,7 +114,7 @@ public String getLabelResource() {
 
     @Override
     public void add(final SampleResult res) {
-        JMeterUtils.runSafe(new Runnable() {
+        JMeterUtils.runSafe(true, new Runnable() {
             @Override
             public void run() {
                 SamplingStatCalculator row = null;

File: src/components/org/apache/jmeter/visualizers/SummaryReport.java
Patch:
@@ -177,7 +177,7 @@ public String getLabelResource() {
     @Override
     public void add(final SampleResult res) {
         final String sampleLabel = res.getSampleLabel(useGroupName.isSelected());
-        JMeterUtils.runSafe(new Runnable() {
+        JMeterUtils.runSafe(true, new Runnable() {
             @Override
             public void run() {
                 Calculator row = null;

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -166,7 +166,7 @@ protected synchronized void updateTextFields(SampleResult res) {
 
     @Override
     public void add(final SampleResult res) {
-        JMeterUtils.runSafe(new Runnable() {
+        JMeterUtils.runSafe(true, new Runnable() {
             @Override
             public void run() {
                 if (childSamples.isSelected()) {

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -131,7 +131,7 @@ public ViewResultsFullVisualizer() {
     /** {@inheritDoc} */
     @Override
     public void add(final SampleResult sample) {
-        JMeterUtils.runSafe(new Runnable() {
+        JMeterUtils.runSafe(true, new Runnable() {
             @Override
             public void run() {
                 updateGui(sample);

File: src/core/org/apache/jmeter/reporters/Summariser.java
Patch:
@@ -252,7 +252,7 @@ private static String format(String name, SummariserRunningSample summariserRunn
         sb.append(" in ");
         long elapsed = summariserRunningSample.getElapsed();
         long elapsedSec = (elapsed + 500) / 1000; // rounded seconds
-        sb.append(String.format("%d:%02d:%02d", elapsedSec / 3600, (elapsedSec % 3600) / 60, (elapsedSec % 60)));
+        sb.append(JOrphanUtils.formatDuration(elapsedSec));
         sb.append(" = ");
         if (elapsed > 0) {
             sb.append(doubleToSb(dfDouble, tmp, summariserRunningSample.getRate(), 6, 1));

File: test/src/org/apache/jmeter/save/TestCSVSaveService.java
Patch:
@@ -30,7 +30,7 @@ public TestCSVSaveService(String name) {
         super(name);
     }
     
-    private void checkSplitString(String input, char delim, String []expected) throws Exception {
+    private void checkSplitString(String input, char delim, String[] expected) throws Exception {
         String out[] = CSVSaveService.csvSplitString(input, delim);     
         checkStrings(expected, out);
     }
@@ -87,7 +87,7 @@ public void testSplitQuoted() throws Exception {
 
     public void testSplitBadQuote() throws Exception {
         try {
-            checkSplitString("a\"b",',',null);
+            checkSplitString("a\"b",',',new String[]{});
             fail("Should have generated IOException");
         } catch (IOException e) {
         }

File: test/src/org/apache/jmeter/junit/JMeterTest.java
Patch:
@@ -357,9 +357,7 @@ public void runGUITitle() throws Exception {
                 && (title.toUpperCase(java.util.Locale.ENGLISH).indexOf("(ALPHA") == -1) 
                 && (title.toUpperCase(java.util.Locale.ENGLISH).indexOf("(BETA") == -1)
                 && (!title.matches("Example\\d+")) // Skip the example samplers ...
-                && (!name.startsWith("org.apache.jmeter.examples."))
-                && (!name.startsWith("org.apache.jmeter.report.")) // Skip report packages as implementation is incomplete
-                && (!name.equals("org.apache.jmeter.control.gui.ReportGui"))) // Skip report GUI as implementation is incomplete
+                && (!name.startsWith("org.apache.jmeter.examples."))) // Skip report GUI as implementation is incomplete
             {// No, not a work in progress ...
                 String s = "component_reference.xml needs '" + title + "' anchor for " + name;
                 if (!ct) {

File: src/core/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -119,7 +119,7 @@ public void setGenerateParentSample(boolean generateParent) {
     }
 
     /**
-     * @return {@true} if a parent sample will be generated
+     * @return {@code true} if a parent sample will be generated
      */
     public boolean isGenerateParentSample() {
         return getPropertyAsBoolean(GENERATE_PARENT_SAMPLE);
@@ -128,7 +128,7 @@ public boolean isGenerateParentSample() {
     /**
      * @deprecated use {@link TransactionController#isGenerateParentSample()}
      *             instead
-     * @return {@true} if a parent sample will be generated
+     * @return {@code true} if a parent sample will be generated
      */
     @Deprecated
     public boolean isParent() {

File: src/core/org/apache/jmeter/report/processor/ErrorsSummaryConsumer.java
Patch:
@@ -122,7 +122,7 @@ protected void updateData(SummaryInfo info, Sample sample) {
      * Determine if the HTTP status code is successful or not i.e. in range 200
      * to 399 inclusive
      *
-     * @param code
+     * @param codeAsString
      *            status code to check
      * @return whether in range 200-399 or not
      * 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
Patch:
@@ -71,6 +71,7 @@ public class HC4CookieHandler implements CookieHandler {
     private static PublicSuffixMatcher publicSuffixMatcher = PublicSuffixMatcherLoader.getDefault();
     private static Registry<CookieSpecProvider> registry  = 
             RegistryBuilder.<CookieSpecProvider>create()
+            // case is ignored bug registry as it converts to lowerCase(Locale.US)
             .register(CookieSpecs.BEST_MATCH, new DefaultCookieSpecProvider(publicSuffixMatcher))
             .register(CookieSpecs.BROWSER_COMPATIBILITY, new DefaultCookieSpecProvider(publicSuffixMatcher))
             .register(CookieSpecs.STANDARD, new RFC6265CookieSpecProvider())

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -30,7 +30,7 @@
 import java.net.URL;
 import java.util.ArrayList;
 
-import org.apache.http.client.params.CookiePolicy;
+import org.apache.http.client.config.CookieSpecs;
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.engine.event.LoopIterationEvent;
 import org.apache.jmeter.testelement.TestIterationListener;
@@ -102,9 +102,9 @@ public class CookieManager extends ConfigTestElement implements TestStateListene
 
     private transient CollectionProperty initialCookies;
 
-    public static final String DEFAULT_POLICY = CookiePolicy.BROWSER_COMPATIBILITY;
+    public static final String DEFAULT_POLICY = CookieSpecs.DEFAULT;
     
-    public static final String DEFAULT_IMPLEMENTATION = HC3CookieHandler.class.getName();
+    public static final String DEFAULT_IMPLEMENTATION = HC4CookieHandler.class.getName();
 
     public CookieManager() {
         clearCookies(); // Ensure that there is always a collection available

File: src/core/org/apache/jmeter/samplers/SampleMonitor.java
Patch:
@@ -27,10 +27,10 @@ public interface SampleMonitor {
     /**
      * A sample is about to start
      */
-    void sampleStarting();
+    void sampleStarting(Sampler sampler);
 
     /**
      * A sample has just finished
      */
-    void sampleEnded();
+    void sampleEnded(Sampler sampler);
 }

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -439,14 +439,14 @@ private void executeSamplePackage(Sampler current,
         // Perform the actual sample
         currentSampler = sampler;
         for(SampleMonitor monitor : sampleMonitors) {
-            monitor.sampleStarting();
+            monitor.sampleStarting(sampler);
         }
         SampleResult result = null;
         try {
             result = sampler.sample(null); // TODO: remove this useless Entry parameter
         } finally {
             for(SampleMonitor monitor : sampleMonitors) {
-                monitor.sampleEnded();
+                monitor.sampleEnded(sampler);
             }            
         }
         currentSampler = null;

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -64,7 +64,7 @@
 public class JMeterThread implements Runnable, Interruptible {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    public static final boolean IMPLEMENTS_SAMPLE_STARTED = JMeterUtils.getPropDefault("temp.sampleStarted", true);
+    public static final boolean IMPLEMENTS_SAMPLE_STARTED = JMeterUtils.getPropDefault("JMeterThread.sampleStarted", true);
     static {
         log.info("IMPLEMENTS_SAMPLE_STARTED="+IMPLEMENTS_SAMPLE_STARTED);
     }

File: src/core/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -1095,6 +1095,8 @@ public static String[] csvReadFile(BufferedReader infile, char delim)
                                     + baos.toString() + "]");
                 }
                 break;
+            default:
+                throw new IllegalStateException("Unexpected state " + state);
             } // switch(state)
             if (push) {
                 if (ch == '\r') {// Remove following \n if present

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java
Patch:
@@ -166,6 +166,8 @@ public void tag(Tag tag) {
                 break;
             case END:
                 break;
+            default:
+                throw new IllegalStateException("Unexpected tagType " + tagType);
             }
         }
 

File: src/monitor/components/org/apache/jmeter/visualizers/ServerPanel.java
Patch:
@@ -147,6 +147,9 @@ private static ImageIcon getHealthyImageIcon(int health) {
         case Stats.DEAD:
             i = DEAD;
             break;
+        default:
+            // better than returning null ...
+            throw new IllegalStateException("Unexpected health value: " + health);
         }
         return i;
     }

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -192,7 +192,7 @@ private static boolean validateFormat(String format){
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "3136d9168702a07555b110a86f7ba4da4ab88346"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "7bc78392d5d18fc977b789d99aea6e790f9816f2"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/core/org/apache/jmeter/report/core/Sample.java
Patch:
@@ -203,9 +203,9 @@ public float getFloat(int i) {
      * @throws NumberFormatException
      *             if the data could not be parsed as a double
      */
-    public double getDouble(String name) {
+    public Double getDouble(String name) {
         try {
-            return Double.parseDouble(data[metadata.indexOf(name)]);
+            return Double.valueOf(data[metadata.indexOf(name)]);
         } catch (NumberFormatException ex) {
             throw new SampleException("Error on sample #" + row, ex);
         }

File: src/core/org/apache/jmeter/report/processor/graph/AbstractGraphConsumer.java
Patch:
@@ -362,7 +362,7 @@ private void addKeyData(MapResultData result, String group, String series,
      *            the value
      */
     private void aggregateValue(AggregatorFactory factory, SeriesData data,
-            Double key, Double value) {
+            Double key, double value) {
         Map<Double, Aggregator> aggInfo = data.getAggregatorInfo();
 
         // Get or create aggregator
@@ -381,7 +381,7 @@ private void aggregateValue(AggregatorFactory factory, SeriesData data,
         // Aggregate keys if needed (if aggregated keys series is set)
         Aggregator keysAgg = data.getKeysAggregator();
         if (keysAgg != null) {
-            keysAgg.addValue(key);
+            keysAgg.addValue(key.doubleValue());
         }
 
         // Aggregate values if needed (if aggregated keys series is set)
@@ -473,7 +473,7 @@ public void consume(Sample sample, int channel) {
                 }
 
                 // Get the value to aggregate and dispatch it to the groupData
-                Double value = Double.valueOf(groupInfo.getValueSelector().select(seriesName, sample));
+                double value = groupInfo.getValueSelector().select(seriesName, sample);
 
                 aggregateValue(factory, seriesData, key, value);
                 if (overallSeries) {

File: src/core/org/apache/jmeter/report/processor/AbstractSummaryConsumer.java
Patch:
@@ -195,7 +195,7 @@ private MapResultData createResultFromKey(String key) {
         if (data != null) {
             result = new MapResultData();
             result.setResult(RESULT_VALUE_IS_CONTROLLER, new ValueResultData(
-                    info.isController()));
+                    Boolean.valueOf(info.isController())));
             result.setResult(RESULT_VALUE_DATA, createDataResult(key, data));
         }
         return result;
@@ -250,7 +250,7 @@ public void stopConsuming() {
 
         // Push the support flag in the result
         result.setResult(RESULT_VALUE_SUPPORTS_CONTROLLERS_DISCRIMINATION,
-                new ValueResultData(supportsControllersDiscrimination));
+                new ValueResultData(Boolean.valueOf(supportsControllersDiscrimination)));
 
         // Add headers
         result.setResult(RESULT_VALUE_TITLES, createResultTitles());

File: src/core/org/apache/jmeter/report/core/JsonUtil.java
Patch:
@@ -47,7 +47,7 @@ public static String toJsonArray(final String... array) {
      * @return the string
      */
     public static String toJsonObject(Map<String, String> map) {
-        StringBuilder result = new StringBuilder("{");
+        String result = "{";
         if (map != null) {
             String[] array = new String[map.size()];
             int index = 0;

File: src/core/org/apache/jmeter/report/processor/CsvFileSampleSource.java
Patch:
@@ -200,10 +200,9 @@ private void produce() {
                 producer.stopProducing();
                 csvReader.close();
             }
-            long time = now() - start;
             if (log.isInfoEnabled()) {
                 log.info("produce(): " + sampleCount + " samples produced in "
-                        + time(time) + " on channel " + i);
+                        + time(now() - start) + " on channel " + i);
             }
         }
     }

File: src/core/org/apache/jmeter/report/core/CsvSampleReader.java
Patch:
@@ -123,7 +123,9 @@ private SampleMetadata readMetadata(char separator, boolean useSaveSampleCfg) {
             SampleMetadata metadata;
             // Read first line
             String line = reader.readLine();
-
+            if(line == null) {
+                throw new IllegalArgumentException("File is empty");
+            }
             // When we can use sample save config and there is no header in csv
             // file
             if (useSaveSampleCfg

File: src/core/org/apache/jmeter/report/processor/ExternalSampleSorter.java
Patch:
@@ -324,7 +324,7 @@ public void stopConsuming() {
             log.debug("sort(): " + inputSampleCount.longValue()
                     + " samples read from input, " + chunkedSampleCount.longValue()
                     + " samples written to chunk files");
-            if (!inputSampleCount.equals(chunkedSampleCount)) {
+            if (inputSampleCount.get() != chunkedSampleCount.get()) {
                 log.error("Failure! Number of samples read from input and written to chunk files differ");
             } else {
                 log.info("chunked samples dumps succeeded.");

File: test/src/org/apache/jmeter/JMeterVersionTest.java
Patch:
@@ -53,7 +53,6 @@ public class JMeterVersionTest extends JMeterTestCase {
         JAR_TO_BUILD_PROP.put("mail", "javamail");
         JAR_TO_BUILD_PROP.put("oro", "jakarta-oro");
         JAR_TO_BUILD_PROP.put("xercesImpl", "xerces");
-        JAR_TO_BUILD_PROP.put("xpp3_min", "xpp3");
     }
 
     private static final File JMETER_HOME = new File(JMeterUtils.getJMeterHome());

File: src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java
Patch:
@@ -287,7 +287,6 @@ public JPopupMenu createPopupMenu() {
                 new String[] {
                         MenuFactory.CONFIG_ELEMENTS,
                         MenuFactory.ASSERTIONS,
-                        MenuFactory.TIMERS,
                         MenuFactory.LISTENERS,
                 },
                 JMeterUtils.getResString("add"),  // $NON-NLS-1$

File: src/core/org/apache/jmeter/report/processor/SumAggregatorFactory.java
Patch:
@@ -33,7 +33,7 @@ public class SumAggregatorFactory extends AbstractAggregatorFactory {
      */
     @Override
     protected Aggregator createAggregator() {
-	return new SumAggregator();
+        return new SumAggregator();
     }
 
 }

File: src/core/org/apache/jmeter/report/processor/graph/StaticSeriesSelector.java
Patch:
@@ -36,7 +36,7 @@ public class StaticSeriesSelector extends AbstractSeriesSelector {
      * @return the name of the series
      */
     public final String getSeriesName() {
-	return seriesName;
+        return seriesName;
     }
 
     /**
@@ -46,7 +46,7 @@ public final String getSeriesName() {
      *            the name of the series to set
      */
     public final void setSeriesName(String seriesName) {
-	this.seriesName = seriesName;
+        this.seriesName = seriesName;
     }
 
     /*
@@ -58,7 +58,7 @@ public final void setSeriesName(String seriesName) {
      */
     @Override
     public Iterable<String> select(Sample sample) {
-	return Arrays.asList(seriesName);
+        return Arrays.asList(seriesName);
     }
 
 }

File: src/components/org/apache/jmeter/extractor/json/jsonpath/JSONManager.java
Patch:
@@ -36,8 +36,7 @@ public class JSONManager {
      * store the computed JsonPath for the set of JSON Path Expressions.
      * Usually there will be 1 to Maximum 10 elements
      */
-    private Map<String, JsonPath> expressionToJsonPath = new HashMap<String, JsonPath>(
-            2);
+    private Map<String, JsonPath> expressionToJsonPath = new HashMap<>(2);
 
     private JsonPath getJsonPath(String jsonPathExpression) {
         JsonPath jsonPath = expressionToJsonPath.get(jsonPathExpression);

File: src/core/org/apache/jmeter/report/config/Converters.java
Patch:
@@ -27,7 +27,7 @@
  */
 public final class Converters {
 
-    private static HashMap<Class<?>, StringConverter<?>> converters = new HashMap<Class<?>, StringConverter<?>>();
+    private static HashMap<Class<?>, StringConverter<?>> converters = new HashMap<>();
 
     static {
 

File: src/core/org/apache/jmeter/report/config/ExporterConfiguration.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class ExporterConfiguration extends InstanceConfiguration {
 
-    private final HashMap<String, SubConfiguration> graphExtraConfigurations = new HashMap<String, SubConfiguration>();
+    private final HashMap<String, SubConfiguration> graphExtraConfigurations = new HashMap<>();
 
     private boolean filtersOnlySampleSeries;
     private String seriesFilter;

File: src/core/org/apache/jmeter/report/config/ReportGeneratorConfiguration.java
Patch:
@@ -123,9 +123,9 @@ void initialize(String subConfId, TSubConfiguration subConfiguration)
     private File tempDirectory;
     private long apdexSatisfiedThreshold;
     private long apdexToleratedThreshold;
-    private ArrayList<String> filteredSamples = new ArrayList<String>();
-    private HashMap<String, ExporterConfiguration> exportConfigurations = new HashMap<String, ExporterConfiguration>();
-    private HashMap<String, GraphConfiguration> graphConfigurations = new HashMap<String, GraphConfiguration>();
+    private ArrayList<String> filteredSamples = new ArrayList<>();
+    private HashMap<String, ExporterConfiguration> exportConfigurations = new HashMap<>();
+    private HashMap<String, GraphConfiguration> graphConfigurations = new HashMap<>();
 
     /**
      * Gets the overall sample filter.

File: src/core/org/apache/jmeter/report/config/SubConfiguration.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class SubConfiguration {
 
-    private HashMap<String, String> properties = new HashMap<String, String>();
+    private HashMap<String, String> properties = new HashMap<>();
 
     /**
      * Gets the properties of the item.

File: src/core/org/apache/jmeter/report/core/SampleMetadata.java
Patch:
@@ -40,7 +40,7 @@ public class SampleMetadata {
     List<String> columns;
 
     /** Index to map column names to their corresponding indexes */
-    private TreeMap<String, Integer> index = new TreeMap<String, Integer>();
+    private TreeMap<String, Integer> index = new TreeMap<>();
 
     /** character separator used for separating columns */
     private char separator;
@@ -63,7 +63,7 @@ public SampleMetadata(char separator, String... columns) {
     public SampleMetadata(SampleSaveConfiguration saveConfig) {
 	if (saveConfig == null)
 	    throw new ArgumentNullException("saveConfig");
-	ArrayList<String> columns = new ArrayList<String>();
+	ArrayList<String> columns = new ArrayList<>();
 	if (saveConfig.saveTimestamp()) {
 	    columns.add(CSVSaveService.TIME_STAMP);
 	}

File: src/core/org/apache/jmeter/report/dashboard/JsonizerVisitor.java
Patch:
@@ -74,7 +74,7 @@ public String visitListResult(ListResultData listResult) {
     public String visitMapResult(MapResultData mapResult) {
 	String result = "";
 	if (mapResult != null) {
-	    HashMap<String, String> map = new HashMap<String, String>();
+	    HashMap<String, String> map = new HashMap<>();
 	    for (Map.Entry<String, ResultData> entry : mapResult.entrySet()) {
 		map.put(entry.getKey(), entry.getValue().accept(this));
 	    }

File: src/core/org/apache/jmeter/report/dashboard/ReportGenerator.java
Patch:
@@ -291,7 +291,7 @@ public ApdexThresholdsInfo select(String sampleName) {
 	        .getGraphConfigurations();
 
 	// Process configuration to build graph consumers
-	HashMap<GraphConfiguration, AbstractGraphConsumer> graphMap = new HashMap<GraphConfiguration, AbstractGraphConsumer>();
+	HashMap<GraphConfiguration, AbstractGraphConsumer> graphMap = new HashMap<>();
 	for (Map.Entry<String, GraphConfiguration> entryGraphCfg : graphConfigurations
 	        .entrySet()) {
 	    String graphName = entryGraphCfg.getKey();

File: src/core/org/apache/jmeter/report/processor/AbstractSampleConsumer.java
Patch:
@@ -55,13 +55,13 @@ abstract public class AbstractSampleConsumer extends AbstractSampleProcessor
      * samples consumers that will consume sample produced by this sample
      * consumer (which is also a sample producer)
      */
-    private List<SampleConsumer> sampleConsumers = new ArrayList<SampleConsumer>();
+    private List<SampleConsumer> sampleConsumers = new ArrayList<>();
 
     /**
      * index of sample metadata consumed by this consumer. Indexed by channel
      * numbers
      */
-    private Map<Integer, SampleMetadata> consumedMetadata = new TreeMap<Integer, SampleMetadata>();
+    private Map<Integer, SampleMetadata> consumedMetadata = new TreeMap<>();
 
     /**
      * Gets the data identified by the specified key from the current sample

File: src/core/org/apache/jmeter/report/processor/AbstractSampleProcessor.java
Patch:
@@ -30,7 +30,7 @@ public class AbstractSampleProcessor implements SampleProcessor {
 
     private SampleContext sampleContext;
 
-    private ArrayList<ChannelContext> channelContexts = new ArrayList<ChannelContext>();
+    private ArrayList<ChannelContext> channelContexts = new ArrayList<>();
 
     /*
      * (non-Javadoc)

File: src/core/org/apache/jmeter/report/processor/AbstractSummaryConsumer.java
Patch:
@@ -88,7 +88,7 @@ public SummaryInfo(boolean isController) {
     public static final String RESULT_VALUE_SUPPORTS_CONTROLLERS_DISCRIMINATION = "supportsControllersDiscrimination";
     public static final String RESULT_VALUE_TITLES = "titles";
 
-    private final Map<String, SummaryInfo> infos = new HashMap<String, SummaryInfo>();
+    private final Map<String, SummaryInfo> infos = new HashMap<>();
     private final SummaryInfo overallInfo = new SummaryInfo(false);
     private final boolean supportsControllersDiscrimination;
 

File: src/core/org/apache/jmeter/report/processor/CsvFileSampleSource.java
Patch:
@@ -253,7 +253,7 @@ public void run() {
     private class PrivateProducer extends AbstractSampleProcessor implements
 	    SampleProducer {
 
-	private List<SampleConsumer> sampleConsumers = new ArrayList<SampleConsumer>();
+	private List<SampleConsumer> sampleConsumers = new ArrayList<>();
 
 	public void setSampleConsumers(List<SampleConsumer> consumers) {
 	    if (consumers == null)

File: src/core/org/apache/jmeter/report/processor/ListResultData.java
Patch:
@@ -30,7 +30,7 @@
 public class ListResultData implements ResultData, Iterable<ResultData> {
 
     /** The items. */
-    private ArrayList<ResultData> items = new ArrayList<ResultData>();
+    private ArrayList<ResultData> items = new ArrayList<>();
 
     /*
      * (non-Javadoc)

File: src/core/org/apache/jmeter/report/processor/MapResultData.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class MapResultData implements ResultData {
 
-    private HashMap<String, ResultData> map = new HashMap<String, ResultData>();
+    private HashMap<String, ResultData> map = new HashMap<>();
 
     /*
      * (non-Javadoc)

File: src/core/org/apache/jmeter/report/processor/SampleContext.java
Patch:
@@ -30,7 +30,7 @@
 public class SampleContext {
 
     private File workingDirectory;
-    private HashMap<String, Object> data = new HashMap<String, Object>();
+    private HashMap<String, Object> data = new HashMap<>();
 
     /**
      * Return the root directory that consumers are authorized to use for

File: src/core/org/apache/jmeter/report/processor/TaggerConsumer.java
Patch:
@@ -39,7 +39,7 @@ public class TaggerConsumer<TIndex> extends AbstractSampleConsumer {
     public static final String DEFAULT_TAG_LABEL = "Tag";
 
     // Collection of sample builders for channels
-    private ArrayList<SampleBuilder> builders = new ArrayList<SampleBuilder>();
+    private ArrayList<SampleBuilder> builders = new ArrayList<>();
     private SampleIndexer<TIndex> sampleIndexer;
     private String tagLabel = DEFAULT_TAG_LABEL;
 

File: src/core/org/apache/jmeter/report/processor/graph/AbstractGraphConsumer.java
Patch:
@@ -206,7 +206,7 @@ public final void setAggregatedKeysSeriesFormat(
      */
     protected AbstractGraphConsumer() {
 	keysSelector = createKeysSelector();
-	groupInfos = new HashMap<String, GroupInfo>(createGroupInfos());
+	groupInfos = new HashMap<>(createGroupInfos());
     }
 
     protected abstract GraphKeysSelector createKeysSelector();
@@ -274,7 +274,7 @@ private void addKeyData(MapResultData result, String group, String series,
 	    aggInfo = seriesData.getAggregatorInfo();
 	} else {
 	    series = String.format(aggregatedKeysSeriesFormat, series);
-	    aggInfo = new HashMap<Double, Aggregator>();
+	    aggInfo = new HashMap<>();
 	    aggInfo.put(seriesData.getKeysAggregator().getResult(),
 		    seriesData.getValuesAggregator());
 	}
@@ -306,7 +306,7 @@ private void addKeyData(MapResultData result, String group, String series,
 	    long count = seriesData.getCount();
 	    int rank = 0;
 	    double percent = 0;
-	    TreeMap<Double, Aggregator> sortedInfo = new TreeMap<Double, Aggregator>(
+	    TreeMap<Double, Aggregator> sortedInfo = new TreeMap<>(
 		    aggInfo);
 	    if (revertsKeysAndValues == false) {
 		for (Map.Entry<Double, Aggregator> entry : sortedInfo

File: src/core/org/apache/jmeter/report/processor/graph/AbstractVersusRequestsGraphConsumer.java
Patch:
@@ -200,9 +200,9 @@ public CsvSampleWriter getWriter() {
 	}
 
 	// Collection of sample builders for channels
-	private ArrayList<SampleBuilder> builders = new ArrayList<SampleBuilder>();
-	private ArrayList<FileInfo> fileInfos = new ArrayList<FileInfo>();
-	private HashMap<Long, Long> counts = new HashMap<Long, Long>();
+	private ArrayList<SampleBuilder> builders = new ArrayList<>();
+	private ArrayList<FileInfo> fileInfos = new ArrayList<>();
+	private HashMap<Long, Long> counts = new HashMap<>();
 	boolean createdWorkDir = false;
 	private final AbstractVersusRequestsGraphConsumer parent;
 

File: src/core/org/apache/jmeter/report/processor/graph/GroupData.java
Patch:
@@ -25,7 +25,7 @@
  * The class GroupData helps to store group data for a graph.
  */
 public class GroupData {
-    private final HashMap<String, SeriesData> seriesData = new HashMap<String, SeriesData>();
+    private final HashMap<String, SeriesData> seriesData = new HashMap<>();
     private final SeriesData overallSeries;
 
     /**

File: src/core/org/apache/jmeter/report/processor/graph/IndexedNameSelector.java
Patch:
@@ -32,7 +32,7 @@
 public class IndexedNameSelector implements GraphKeysSelector {
 
     /** The names. */
-    private LinkedList<String> names = new LinkedList<String>();
+    private LinkedList<String> names = new LinkedList<>();
 
     /**
      * Gets the names.

File: src/core/org/apache/jmeter/report/processor/graph/SeriesData.java
Patch:
@@ -31,7 +31,7 @@
 public class SeriesData {
 
     /** The regular groupData. */
-    private final HashMap<Double, Aggregator> aggregators = new HashMap<Double, Aggregator>();
+    private final HashMap<Double, Aggregator> aggregators = new HashMap<>();
 
     /** The keys aggregator for aggregated keys seriesData. */
     private final Aggregator keysAggregator;

File: src/core/org/apache/jmeter/report/processor/graph/impl/ActiveThreadsGraphConsumer.java
Patch:
@@ -60,8 +60,7 @@ protected TimeStampKeysSelector createTimeStampKeysSelector() {
      */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
-	HashMap<String, GroupInfo> groupInfos = new HashMap<String, GroupInfo>(
-	        1);
+	HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
 	groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
 	        new MeanAggregatorFactory(), new AbstractSeriesSelector() {
 

File: src/core/org/apache/jmeter/report/processor/graph/impl/BytesThroughputGraphConsumer.java
Patch:
@@ -63,8 +63,7 @@ protected TimeStampKeysSelector createTimeStampKeysSelector() {
      */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
-	HashMap<String, GroupInfo> groupInfos = new HashMap<String, GroupInfo>(
-	        2);
+	HashMap<String, GroupInfo> groupInfos = new HashMap<>(2);
 	groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
 	        new TimeRateAggregatorFactory(), new AbstractSeriesSelector() {
 		    private final Iterable<String> values = Arrays.asList(

File: src/core/org/apache/jmeter/report/processor/graph/impl/CodesPerSecondGraphConsumer.java
Patch:
@@ -58,8 +58,7 @@ protected TimeStampKeysSelector createTimeStampKeysSelector() {
      */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
-	HashMap<String, GroupInfo> groupInfos = new HashMap<String, GroupInfo>(
-	        1);
+	HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
 	groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
 	        new TimeRateAggregatorFactory(), new CodeSeriesSelector(),
 	        new CountValueSelector(), false, false));

File: src/core/org/apache/jmeter/report/processor/graph/impl/HitsPerSecondGraphConsumer.java
Patch:
@@ -58,8 +58,7 @@ protected TimeStampKeysSelector createTimeStampKeysSelector() {
      */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
-	HashMap<String, GroupInfo> groupInfos = new HashMap<String, GroupInfo>(
-	        1);
+	HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
 	groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
 	        new TimeRateAggregatorFactory(), new StaticSeriesSelector(),
 	        new CountValueSelector(), false, false));

File: src/core/org/apache/jmeter/report/processor/graph/impl/LatencyOverTimeGraphConsumer.java
Patch:
@@ -58,7 +58,7 @@ protected TimeStampKeysSelector createTimeStampKeysSelector() {
      */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
-	HashMap<String, GroupInfo> groupInfos = new HashMap<String, GroupInfo>();
+	HashMap<String, GroupInfo> groupInfos = new HashMap<>();
 	groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
 	        new MeanAggregatorFactory(), new NameSeriesSelector(),
 	        new LatencyValueSelector(), false, false));

File: src/core/org/apache/jmeter/report/processor/graph/impl/LatencyVSRequestGraphConsumer.java
Patch:
@@ -64,8 +64,7 @@ public Double select(Sample sample) {
      */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
-	HashMap<String, GroupInfo> groupInfos = new HashMap<String, GroupInfo>(
-	        1);
+	HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
 	groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
 	        new MedianAggregatorFactory(), new StatusSeriesSelector(),
 	        new LatencyValueSelector(), false, false));

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimeDistributionGraphConsumer.java
Patch:
@@ -86,8 +86,7 @@ public Double select(Sample sample) {
      */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
-	HashMap<String, GroupInfo> groupInfos = new HashMap<String, GroupInfo>(
-	        1);
+	HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
 
 	groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
 	        new SumAggregatorFactory(), new NameSeriesSelector(),

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimeOverTimeGraphConsumer.java
Patch:
@@ -59,8 +59,7 @@ protected TimeStampKeysSelector createTimeStampKeysSelector() {
      */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
-	HashMap<String, GroupInfo> groupInfos = new HashMap<String, GroupInfo>(
-	        1);
+	HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
 	groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
 	        new MeanAggregatorFactory(), new NameSeriesSelector(),
 	        new ElapsedTimeValueSelector(), false, false));

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimePerSampleGraphConsumer.java
Patch:
@@ -90,8 +90,7 @@ private GroupInfo createGroupInfo(String propertyKey, int defaultValue) {
      */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
-	HashMap<String, GroupInfo> groupInfos = new HashMap<String, GroupInfo>(
-	        2);
+	HashMap<String, GroupInfo> groupInfos = new HashMap<>(2);
 
 	groupInfos.put("aggregate_rpt_pct1",
 	        createGroupInfo("aggregate_rpt_pct1", 90));

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimePercentilesGraphConsumer.java
Patch:
@@ -68,8 +68,7 @@ public Double select(Sample sample) {
      */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
-	HashMap<String, GroupInfo> groupInfos = new HashMap<String, GroupInfo>(
-	        1);
+	HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
 
 	groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
 	        new SumAggregatorFactory(), new NameSeriesSelector(),

File: src/core/org/apache/jmeter/report/processor/graph/impl/ResponseTimeVSRequestGraphConsumer.java
Patch:
@@ -64,8 +64,7 @@ public Double select(Sample sample) {
      */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
-	HashMap<String, GroupInfo> groupInfos = new HashMap<String, GroupInfo>(
-	        1);
+	HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
 	groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
 	        new MedianAggregatorFactory(), new StatusSeriesSelector(),
 	        new ElapsedTimeValueSelector(), false, false));

File: src/core/org/apache/jmeter/report/processor/graph/impl/TimeVSThreadGraphConsumer.java
Patch:
@@ -61,8 +61,7 @@ public Double select(Sample sample) {
      */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
-	HashMap<String, GroupInfo> groupInfos = new HashMap<String, GroupInfo>(
-	        1);
+	HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
 
 	groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
 	        new MeanAggregatorFactory(), new NameSeriesSelector(),

File: src/core/org/apache/jmeter/report/processor/graph/impl/TransactionsPerSecondGraphConsumer.java
Patch:
@@ -65,8 +65,7 @@ protected TimeStampKeysSelector createTimeStampKeysSelector() {
      */
     @Override
     protected Map<String, GroupInfo> createGroupInfos() {
-	HashMap<String, GroupInfo> groupInfos = new HashMap<String, GroupInfo>(
-	        1);
+	HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);
 	groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(
 	        new TimeRateAggregatorFactory(), new AbstractSeriesSelector(
 	                true) {

File: src/core/org/apache/jmeter/config/Arguments.java
Patch:
@@ -25,14 +25,15 @@
 import java.util.Map;
 
 import org.apache.jmeter.testelement.property.CollectionProperty;
+import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.testelement.property.TestElementProperty;
 
 /**
  * A set of Argument objects.
  *
  */
-public class Arguments extends ConfigTestElement implements Serializable {
+public class Arguments extends ConfigTestElement implements Serializable, Iterable<JMeterProperty> {
     private static final long serialVersionUID = 240L;
 
     /** The name of the property used to store the arguments. */
@@ -141,6 +142,7 @@ public void addArgument(String name, String value, String metadata) {
      *
      * @return an iteration of the arguments
      */
+    @Override
     public PropertyIterator iterator() {
         return getArguments().iterator();
     }

File: src/core/org/apache/jmeter/gui/action/SearchTreeDialog.java
Patch:
@@ -24,7 +24,6 @@
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 
@@ -216,8 +215,7 @@ private void doSearch(ActionEvent e) {
         GuiPackage guiInstance = GuiPackage.getInstance();
         JTree jTree = guiInstance.getMainFrame().getTree();
 
-        for (Iterator<JMeterTreeNode> iterator = nodes.iterator(); iterator.hasNext();) {
-            JMeterTreeNode jMeterTreeNode = iterator.next();
+        for (JMeterTreeNode jMeterTreeNode : nodes) {
             jMeterTreeNode.setMarkedBySearch(true);
             if (expand) {
                 jTree.expandPath(new TreePath(jMeterTreeNode.getPath()));

File: src/core/org/apache/jmeter/testelement/property/MultiProperty.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @version $Revision$
  */
-public abstract class MultiProperty extends AbstractProperty {
+public abstract class MultiProperty extends AbstractProperty implements Iterable<JMeterProperty> {
     private static final long serialVersionUID = 240L;
 
     public MultiProperty() {
@@ -43,6 +43,7 @@ public MultiProperty(String name) {
      *
      * @return an iterator for the sub-values of this property
      */
+    @Override
     public abstract PropertyIterator iterator();
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.testelement.property.CollectionProperty;
-import org.apache.jmeter.testelement.property.PropertyIterator;
+import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
@@ -168,8 +168,8 @@ List<org.apache.http.cookie.Cookie> getCookiesForUrl(
             CollectionProperty cookiesCP, URL url, boolean allowVariableCookie) {
         List<org.apache.http.cookie.Cookie> cookies = new ArrayList<>();
 
-        for (PropertyIterator iter = cookiesCP.iterator(); iter.hasNext();) {
-            Cookie jmcookie = (Cookie) iter.next().getObjectValue();
+        for (JMeterProperty jMeterProperty : cookiesCP) {
+            Cookie jmcookie = (Cookie) jMeterProperty.getObjectValue();
             // Set to running version, to allow function evaluation for the cookie values (bug 28715)
             if (allowVariableCookie) {
                 jmcookie.setRunningVersion(true);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1322,9 +1322,8 @@ public void run() {
                             binRes = future.get(1, TimeUnit.MILLISECONDS);
                             if(cookieManager != null) {
                                 CollectionProperty cookies = binRes.getCookies();
-                                PropertyIterator iter = cookies.iterator();
-                                while (iter.hasNext()) {
-                                    Cookie cookie = (Cookie) iter.next().getObjectValue();
+                                for (JMeterProperty jMeterProperty : cookies) {
+                                    Cookie cookie = (Cookie) jMeterProperty.getObjectValue();
                                     cookieManager.add(cookie) ;
                                 }
                             }

File: src/core/org/apache/jmeter/gui/action/KeyStrokes.java
Patch:
@@ -74,6 +74,8 @@ private KeyStrokes(){
     public static final KeyStroke ALT_DOWN_ARROW    = KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, InputEvent.ALT_DOWN_MASK);
     public static final KeyStroke ALT_LEFT_ARROW    = KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, InputEvent.ALT_DOWN_MASK);
     public static final KeyStroke ALT_RIGHT_ARROW   = KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, InputEvent.ALT_DOWN_MASK);
+    public static final KeyStroke SHIFT_LEFT_ARROW  = KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, InputEvent.SHIFT_DOWN_MASK);
+    public static final KeyStroke SHIFT_RIGHT_ARROW = KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, InputEvent.SHIFT_DOWN_MASK);
     
     // component hotkeys
     public static final KeyStroke CTRL_0   = KeyStroke.getKeyStroke(KeyEvent.VK_0, CONTROL_MASK);

File: src/components/org/apache/jmeter/visualizers/Graph.java
Patch:
@@ -236,7 +236,7 @@ private void drawSample(long x, Sample oneSample, Graphics g) {
         if (wantMedian) {
             int median = (int) (oneSample.getMedian() * height / graphMax);
 
-            g.setColor(JMeterColor.purple);
+            g.setColor(JMeterColor.PURPLE);
             g.drawLine(adjustedWidth, height - median, adjustedWidth, (height - median - 1));
         }
 
@@ -249,7 +249,7 @@ private void drawSample(long x, Sample oneSample, Graphics g) {
         if (wantThroughput) {
             int throughput = (int) (oneSample.getThroughput() * height / throughputMax);
 
-            g.setColor(JMeterColor.dark_green);
+            g.setColor(JMeterColor.DARK_GREEN);
             g.drawLine(adjustedWidth, height - throughput, adjustedWidth, (height - throughput - 1));
         }
     }

File: test/src/org/apache/jmeter/save/TestSaveService.java
Patch:
@@ -96,7 +96,7 @@ public void testLoadAndSave() throws Exception {
             failed |= loadAndSave(testFile, fileName, true);
         }
         for (int i = 0; i < FILES_LINES.length; i++) {
-            final String fileName = FILES[i];
+            final String fileName = FILES_LINES[i];
             final File testFile = findTestFile("testfiles/" + fileName);
             failed |= loadAndSave(testFile, fileName, false);
         }

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -713,7 +713,6 @@ public void actionPerformed(ActionEvent actionEvent) {
      */
     private TreeCellRenderer getCellRenderer() {
         DefaultTreeCellRenderer rend = new JMeterCellRenderer();
-        rend.setFont(new Font("Dialog", Font.PLAIN, 11));
         return rend;
     }
 

File: src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java
Patch:
@@ -45,6 +45,7 @@
 import javax.swing.tree.DefaultTreeModel;
 import javax.swing.tree.TreeNode;
 import javax.swing.tree.TreePath;
+import javax.swing.tree.TreeSelectionModel;
 
 import org.apache.jmeter.control.Controller;
 import org.apache.jmeter.control.ModuleController;
@@ -111,7 +112,8 @@ public ModuleControllerGui() {
         moduleToRunTreeModel = new DefaultTreeModel(new DefaultMutableTreeNode());
         moduleToRunTreeNodes = new JTree(moduleToRunTreeModel);
         moduleToRunTreeNodes.setCellRenderer(new ModuleControllerCellRenderer());
-
+        moduleToRunTreeNodes.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
+        
         ImageIcon image = JMeterUtils.getImage("warning.png");
         warningLabel = new JLabel("", image, SwingConstants.LEFT); // $NON-NLS-1$
         warningLabel.setForeground(Color.RED);

File: src/components/org/apache/jmeter/extractor/json/jsonpath/JSONPostProcessor.java
Patch:
@@ -60,6 +60,8 @@ protected JSONManager initialValue() {
             return new JSONManager();
         }
     };
+
+    @Override
     public void process() {
         JMeterContext context = getThreadContext();
         JMeterVariables vars = context.getVariables();

File: src/components/org/apache/jmeter/extractor/json/jsonpath/gui/JSONPostProcessorGui.java
Patch:
@@ -154,23 +154,23 @@ private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints
         panel.add(item.get(0), gbc.clone());
         gbc.gridx++;
         gbc.weightx = 1;
-        gbc.fill=GridBagConstraints.HORIZONTAL;
+        gbc.fill = GridBagConstraints.HORIZONTAL;
         panel.add(item.get(1), gbc.clone());
     }
     
     private void addField(JPanel panel, JLabel label, JCheckBox checkBox, GridBagConstraints gbc) {
         panel.add(label, gbc.clone());
         gbc.gridx++;
         gbc.weightx = 1;
-        gbc.fill=GridBagConstraints.HORIZONTAL;
+        gbc.fill = GridBagConstraints.HORIZONTAL;
         panel.add(checkBox, gbc.clone());
     }
 
     private void nextLine(GridBagConstraints gbc) {
         gbc.gridx = 0;
         gbc.gridy++;
         gbc.weightx = 0;
-        gbc.fill=GridBagConstraints.NONE;
+        gbc.fill = GridBagConstraints.NONE;
     }
 
     private void initConstraints(GridBagConstraints gbc) {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -183,7 +183,7 @@ private static boolean validateFormat(String format){
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "1700113"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "1709921"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -177,7 +177,7 @@ private static boolean validateFormat(String format){
     
     // Must match _version property value in saveservice.properties
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String PROPVERSION = "2.8";// Expected version $NON-NLS-1$
+    static final String PROPVERSION = "2.9";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$

File: test/src/org/apache/jmeter/visualizers/TestRenderAsJson.java
Patch:
@@ -57,7 +57,7 @@ public void testRenderResultSimpleString() throws Exception {
     }
 
     @Test
-    public void testRenderResultSimpleStructur() throws Exception {
+    public void testRenderResultSimpleStructure() throws Exception {
         assertEquals(
                 "{\n" + TAB + "\"Hello\": \"World\", \n" + TAB + "\"more\": \n"
                         + TAB + "[\n" + TAB + TAB + "\"Something\", \n" + TAB

File: src/core/org/apache/jmeter/control/IfController.java
Patch:
@@ -145,7 +145,7 @@ private static class LazyHolder {
     /**
      * @return ScriptEngineManager singleton
      */
-    public static ScriptEngineManager getInstance() {
+    private static ScriptEngineManager getInstance() {
             return LazyHolder.INSTANCE;
     }
     /**

File: src/functions/org/apache/jmeter/functions/JavaScript.java
Patch:
@@ -58,13 +58,13 @@ private static class LazyHolder {
     }
  
     private static final boolean USE_RHINO_ENGINE = 
-            getInstance().getEngineByName(JavaScript.NASHORN_ENGINE_NAME) == null ||
-            JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY, true) ;
+            JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY, true) || 
+            (getInstance().getEngineByName(JavaScript.NASHORN_ENGINE_NAME) == null);
 
     /**
      * @return ScriptEngineManager singleton
      */
-    public static ScriptEngineManager getInstance() {
+    private static ScriptEngineManager getInstance() {
             return LazyHolder.INSTANCE;
     }
     private static final List<String> desc = new LinkedList<>();

File: src/core/org/apache/jmeter/control/IfController.java
Patch:
@@ -72,11 +72,11 @@ public class IfController extends GenericController implements Serializable, Thr
 
     private static final String USE_EXPRESSION = "IfController.useExpression"; //$NON-NLS-1$
     
-    private static final String USE_RHINO_ENGINE_PROPERTY = "ifcontroller.use_rhino";
+    private static final String USE_RHINO_ENGINE_PROPERTY = "javascript.use_rhino"; //$NON-NLS-1$
 
     private static final boolean USE_RHINO_ENGINE = 
             getInstance().getEngineByName("nashorn") == null || //$NON-NLS-1$
-            JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY, false) ;
+            JMeterUtils.getPropDefault(USE_RHINO_ENGINE_PROPERTY, true) ;
 
     
     private static final ThreadLocal<ScriptEngine> NASHORN_ENGINE = new ThreadLocal<ScriptEngine>() {

File: test/src/org/apache/jmeter/assertions/XMLSchemaAssertionTest.java
Patch:
@@ -148,7 +148,7 @@ public void testAssertionBlankResult() throws Exception {
         assertFalse(res.isFailure());
     }
 
-    public void testXMLTrailingcontent() throws Exception {
+    public void testXMLTrailingContent() throws Exception {
         ByteArrayOutputStream baos = readBA("testfiles/XMLSchematest.xml");
         baos.write("extra".getBytes()); // TODO - charset?
         result.setResponseData(baos.toByteArray());
@@ -161,7 +161,7 @@ public void testXMLTrailingcontent() throws Exception {
         assertFalse(res.isFailure());
     }
 
-    public void testXMLTrailingwhitespace() throws Exception {
+    public void testXMLTrailingWhitespace() throws Exception {
         ByteArrayOutputStream baos = readBA("testfiles/XMLSchematest.xml");
         baos.write(" \t\n".getBytes()); // TODO - charset?
         result.setResponseData(baos.toByteArray());

File: src/components/org/apache/jmeter/assertions/SMIMEAssertion.java
Patch:
@@ -188,8 +188,8 @@ private static AssertionResult verifySignature(SMIMEAssertionTestElement testEle
 
                         String email = testElement.getSignerEmail();
                         if (!JOrphanUtils.isBlank(email)) {
-                            List<String> emailfromCert = getEmailFromCert(cert);
-                            if (!emailfromCert.contains(email)) {
+                            List<String> emailFromCert = getEmailFromCert(cert);
+                            if (!emailFromCert.contains(email)) {
                                 res.setFailure(true);
                                 failureMessage
                                         .append("Email address \"")

File: src/components/org/apache/jmeter/assertions/DurationAssertion.java
Patch:
@@ -33,11 +33,11 @@
 public class DurationAssertion extends AbstractScopedAssertion implements Serializable, Assertion {
     private static final long serialVersionUID = 240L;
 
-    /** Key for storing assertion-informations in the jmx-file. */
+    /** Key for storing assertion-information in the jmx-file. */
     public static final String DURATION_KEY = "DurationAssertion.duration"; // $NON-NLS-1$
 
     /**
-     * Returns the result of the Assertion. Here it checks wether the Sample
+     * Returns the result of the Assertion. Here it checks whether the Sample
      * took to long to be considered successful. If so an AssertionResult
      * containing a FailureMessage will be returned. Otherwise the returned
      * AssertionResult will reflect the success of the Sample.

File: src/components/org/apache/jmeter/assertions/HTMLAssertion.java
Patch:
@@ -221,7 +221,7 @@ private void writeOutput(String inOutput) {
     /**
      * Gets the doctype
      * 
-     * @return the documemt type
+     * @return the document type
      */
     public String getDoctype() {
         return getPropertyAsString(DOCTYPE_KEY);

File: src/components/org/apache/jmeter/assertions/MD5HexAssertion.java
Patch:
@@ -44,7 +44,7 @@ public class MD5HexAssertion extends AbstractTestElement implements Serializable
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    /** Key for storing assertion-informations in the jmx-file. */
+    /** Key for storing assertion-information in the jmx-file. */
     private static final String MD5HEX_KEY = "MD5HexAssertion.size";
 
     /*

File: src/components/org/apache/jmeter/assertions/SMIMEAssertionTestElement.java
Patch:
@@ -72,8 +72,8 @@ public String getIssuerDn() {
         return getPropertyAsString(ISSUER_DN_KEY);
     }
 
-    public void setIssuerDn(String issuertDn) {
-        setProperty(ISSUER_DN_KEY, issuertDn);
+    public void setIssuerDn(String issuerDn) {
+        setProperty(ISSUER_DN_KEY, issuerDn);
     }
 
     public boolean isSignerCheckByFile() {

File: src/components/org/apache/jmeter/assertions/SizeAssertion.java
Patch:
@@ -36,7 +36,7 @@ public class SizeAssertion extends AbstractScopedAssertion implements Serializab
 
     private static final long serialVersionUID = 241L;
 
-    // * Static int to signify the type of logical comparitor to assert
+    // Static int to signify the type of logical comparator to assert
     public static final int EQUAL = 1;
 
     public static final int NOTEQUAL = 2;
@@ -49,7 +49,7 @@ public class SizeAssertion extends AbstractScopedAssertion implements Serializab
 
     public static final int LESSTHANEQUAL = 6;
 
-    /** Key for storing assertion-informations in the jmx-file. */
+    /** Key for storing assertion-information in the jmx-file. */
     private static final String SIZE_KEY = "SizeAssertion.size"; // $NON-NLS-1$
 
     private static final String OPERATOR_KEY = "SizeAssertion.operator"; // $NON-NLS-1$

File: src/components/org/apache/jmeter/assertions/XMLAssertion.java
Patch:
@@ -48,7 +48,7 @@ protected SAXBuilder initialValue() {
     };
 
     /**
-     * Returns the result of the Assertion. Here it checks wether the Sample
+     * Returns the result of the Assertion. Here it checks whether the Sample
      * took to long to be considered successful. If so an AssertionResult
      * containing a FailureMessage will be returned. Otherwise the returned
      * AssertionResult will reflect the success of the Sample.

File: src/components/org/apache/jmeter/assertions/XPathAssertion.java
Patch:
@@ -195,7 +195,7 @@ public void setNegated(boolean negate) {
     }
 
     /**
-     * Is this whitepsace ignored.
+     * Is this whitespace ignored.
      *
      * @return boolean
      */

File: src/components/org/apache/jmeter/assertions/gui/HTMLAssertionGui.java
Patch:
@@ -220,7 +220,7 @@ private void init() {
         docTypePanel.add(docTypeBox);
         assertionPanel.add(docTypePanel);
 
-        // format (HMTL, XHTML, XML)
+        // format (HTML, XHTML, XML)
         VerticalPanel formatPanel = new VerticalPanel();
         formatPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Format"));
         htmlRadioButton = new JRadioButton("HTML", true); //$NON-NLS-1$
@@ -318,7 +318,7 @@ public void focusGained(FocusEvent e) {
     }
 
     /**
-     * This method is called from erros-only checkbox
+     * This method is called from errors-only checkbox
      *
      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
      */

File: test/src/org/apache/commons/cli/avalon/ClutilTestCase.java
Patch:
@@ -37,7 +37,7 @@ public final class ClutilTestCase extends TestCase {
             "-Dstupid=idiot", "are", "--all", "--all", "here" };
 
     private static final String[] ARGLIST4 = new String[] {
-    // incompatable (blee/all)
+    // incompatible (blee/all)
             "-Dstupid", "idiot", "are", "--all", "--blee", "here" };
 
     private static final String[] ARGLIST5 = new String[] { "-f", "myfile.txt" };
@@ -188,7 +188,7 @@ public void testOptionalArgLong() {
     public void testOptionalArgLongEquals() {
         final CLOptionDescriptor[] options = new CLOptionDescriptor[] { ALL, TAINT };
 
-        // Check that optional args work woth long options
+        // Check that optional args work with long options
         final String[] args = new String[] { "--taint=param", "-a" };
 
         final CLArgsParser parser = new CLArgsParser(args, options);

File: test/src/org/apache/jmeter/assertions/SizeAssertionTest.java
Patch:
@@ -158,7 +158,7 @@ private void assertPassed() throws Exception{
       }
       
       private void assertFailed() throws Exception{
-          assertNotNull("Failure nessage should not be null",result.getFailureMessage());
+          assertNotNull("Failure message should not be null",result.getFailureMessage());
           //System.out.println(result.getFailureMessage());
           assertFalse("Should not be: Response was null","Response was null".equals(result.getFailureMessage()));
           assertFalse(result.isError());

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -289,7 +289,7 @@ public void run() {
                     children.addAll(samplerCreator.createChildren(sampler, result));
                 } 
                 target.deliverSampler(sampler,
-                        children.isEmpty() ? null : (TestElement[]) children
+                         children
                                 .toArray(new TestElement[children.size()]),
                         result);
             }
@@ -550,7 +550,7 @@ private String messageResponseHeaders(SampleResult res) {
         }
         StringBuilder sb = new StringBuilder(headers.length());
         for (String line : headerLines) {
-            if (line != null) {
+            if (line != null){
                 sb.append(line).append(CRLF_STRING);
             }
         }

File: src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/config/MongoDBHolder.java
Patch:
@@ -48,6 +48,9 @@ public static DB getDBFromSource(String varName, String dbName) {
      */
     public static DB getDBFromSource(String varName, String dbName, String login, String password) {
         MongoDB mongodb = (MongoDB) JMeterContextService.getContext().getVariables().getObject(varName);
+        if(mongodb==null) {
+            throw new IllegalStateException("You didn't define variable:"+varName +" using MongoDB Source Config (property:MongoDB Source)");
+        }
         return mongodb.getDB(dbName, login, password);
     }
 }

File: src/protocol/http/org/apache/jmeter/protocol/http/config/MultipartUrlConfig.java
Patch:
@@ -138,12 +138,11 @@ public void parseArguments(String queryString) {
                     // Get the filename
                     index = contentDisposition.indexOf(filenamePrefix) + filenamePrefix.length();
                     String path = contentDisposition.substring(index, contentDisposition.indexOf('\"', index)); //$NON-NLS-1$
-                    if(path != null && path.length() > 0) {
+                    if (path != null && path.length() > 0) {
                         // Set the values retrieved for the file upload
                         files.addHTTPFileArg(path, name, contentType);
                     }
-                }
-                else {
+                } else {
                     // Find the first empty line of the multipart, it signals end of headers for multipart
                     // Agents are supposed to terminate lines in CRLF:
                     final String CRLF = "\r\n";

File: src/protocol/http/org/apache/jmeter/protocol/http/util/WSDLHelper.java
Patch:
@@ -370,7 +370,7 @@ public Object[] getOperations() {
                 Element child = (Element) opnodes.item(idz);
                 int numberOfSoapOperationNodes = child.getElementsByTagNameNS(SOAP11_BINDING_NAMESPACE, "operation").getLength()
                         + child.getElementsByTagNameNS(SOAP12_BINDING_NAMESPACE, "operation").getLength();
-                if (numberOfSoapOperationNodes>0) {
+                if (numberOfSoapOperationNodes > 0) {
                     ops.add(child);
                 }
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -549,9 +549,8 @@ private String messageResponseHeaders(SampleResult res) {
             headerLines[contentLengthIndex]=HTTPConstants.HEADER_CONTENT_LENGTH+": "+res.getResponseData().length;
         }
         StringBuilder sb = new StringBuilder(headers.length());
-        for (int i=0;i<headerLines.length;i++){
-            String line=headerLines[i];
-            if (line != null){
+        for (String line : headerLines) {
+            if (line != null) {
                 sb.append(line).append(CRLF_STRING);
             }
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -104,8 +104,8 @@ public boolean isRedirect() {
          */
         final String[] REDIRECT_CODES = { "301", "302", "303" };
         String code = getResponseCode();
-        for (int i = 0; i < REDIRECT_CODES.length; i++) {
-            if (REDIRECT_CODES[i].equals(code)) {
+        for (String redirectCode : REDIRECT_CODES) {
+            if (redirectCode.equals(code)) {
                 return true;
             }
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/StandardGenerator.java
Patch:
@@ -152,8 +152,8 @@ public void setMethod(String post_get) {
      */
     @Override
     public void setParams(NVPair[] params) {
-        for (int idx = 0; idx < params.length; idx++) {
-            SAMPLE.addArgument(params[idx].getName(), params[idx].getValue());
+        for (NVPair param : params) {
+            SAMPLE.addArgument(param.getName(), param.getValue());
         }
     }
 

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java
Patch:
@@ -498,8 +498,7 @@ public void setUsername(String username) {
     public CollectionProperty getHeaderFields() {
         CollectionProperty result = new CollectionProperty();
         result.setName(SmtpSampler.HEADER_FIELDS);
-        for (Iterator<JTextField> iterator = headerFields.keySet().iterator(); iterator.hasNext();) {
-            JTextField headerName = iterator.next();
+        for (JTextField headerName : headerFields.keySet()) {
             String name = headerName.getText();
             String value = headerFields.get(headerName).getText();
             Argument argument = new Argument(name, value);

File: test/src/org/apache/jorphan/test/AllTests.java
Patch:
@@ -170,10 +170,10 @@ public static void main(String[] args) {
         String cpe[] = JOrphanUtils.split(cp, java.io.File.pathSeparator);
         StringBuilder sb = new StringBuilder(3000);
         sb.append("java.class.path=");
-        for (int i = 0; i < cpe.length; i++) {
+        for (String path : cpe) {
             sb.append("\n");
-            sb.append(cpe[i]);
-            if (new java.io.File(cpe[i]).exists()) {
+            sb.append(path);
+            if (new File(path).exists()) {
                 sb.append(" - OK");
             } else {
                 sb.append(" - ??");

File: src/jorphan/org/apache/jorphan/reflect/ClassFinder.java
Patch:
@@ -26,6 +26,7 @@
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashSet;
 import java.util.List;
@@ -180,9 +181,7 @@ public boolean accept(File f, String name) {
                             return name.endsWith(DOT_JAR);
                         }
                     });
-                    for (int x = 0; x < jars.length; x++) {
-                        fullList.add(jars[x]);
-                    }
+                    Collections.addAll(fullList, jars);
                 }
             }
         }

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -278,7 +278,7 @@ public void createMenuBar() {
         for (MenuCreator menuCreator : menuCreators) {
             JMenu[] topLevelMenus = menuCreator.getTopLevelMenus();
             for (JMenu topLevelMenu : topLevelMenus) {
-                this.add(topLevelMenu);                
+                this.add(topLevelMenu);
             }
         }
         this.add(helpMenu);

File: src/core/org/apache/jmeter/gui/util/FileListPanel.java
Patch:
@@ -207,8 +207,8 @@ public void actionPerformed(ActionEvent e) {
             chooser.showOpenDialog(GuiPackage.getInstance().getMainFrame());
             File[] cfiles = chooser.getSelectedFiles();
             if (cfiles != null) {
-                for (int idx=0; idx < cfiles.length; idx++) {
-                    this.addFilename(cfiles[idx].getPath());
+                for (File cfile : cfiles) {
+                    this.addFilename(cfile.getPath());
                 }
                 fireFileChanged();
             }

File: src/jorphan/org/apache/jorphan/gui/JLabeledTextArea.java
Patch:
@@ -243,8 +243,8 @@ public void removeChangeListener(ChangeListener pChangeListener) {
      */
     private void notifyChangeListeners() {
         ChangeEvent ce = new ChangeEvent(this);
-        for (int index = 0; index < mChangeListeners.size(); index++) {
-            mChangeListeners.get(index).stateChanged(ce);
+        for (ChangeListener mChangeListener : mChangeListeners) {
+            mChangeListener.stateChanged(ce);
         }
     }
     

File: src/jorphan/org/apache/jorphan/gui/JLabeledTextField.java
Patch:
@@ -243,8 +243,8 @@ public void removeChangeListener(ChangeListener pChangeListener) {
      */
     protected void notifyChangeListeners() {
         ChangeEvent ce = new ChangeEvent(this);
-        for (int index = 0; index < mChangeListeners.size(); index++) {
-            mChangeListeners.get(index).stateChanged(ce);
+        for (ChangeListener mChangeListener : mChangeListeners) {
+            mChangeListener.stateChanged(ce);
         }
     }
 }

File: src/jorphan/org/apache/jorphan/reflect/Functor.java
Patch:
@@ -349,8 +349,8 @@ private synchronized Method doCreateMethod(Class<?> p_class, Class<?>[] p_types)
                         }
                     }
                     Class<?>[] interfaces = p_types[i].getInterfaces();
-                    for (int j = 0; j < interfaces.length; j++) {
-                        methodToInvoke = doCreateMethod(p_class,getNewArray(i, interfaces[j], p_types));
+                    for (Class<?> anInterface : interfaces) {
+                        methodToInvoke = doCreateMethod(p_class, getNewArray(i, anInterface, p_types));
                         if (methodToInvoke != null) {
                             return methodToInvoke;
                         }

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -416,8 +416,8 @@ public static boolean isXML(byte [] target){
      */
     public static String baToHexString(byte ba[]) {
         StringBuilder sb = new StringBuilder(ba.length*2);
-        for (int i = 0; i < ba.length; i++) {
-            int j = ba[i] & 0xff;
+        for (byte b : ba) {
+            int j = b & 0xff;
             if (j < 16) {
                 sb.append("0"); // $NON-NLS-1$ add zero padding
             }

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -183,7 +183,7 @@ private static boolean validateFormat(String format){
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String FILEVERSION = "1698393"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1700113"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/components/org/apache/jmeter/assertions/SMIMEAssertion.java
Patch:
@@ -335,8 +335,8 @@ private static List<String> getEmailFromCert(X509Certificate cert)
             X509ExtensionUtil.getSubjectAlternativeNames(cert);
         for (Object altNameObj : subjectAltNames) {
             List<?> altName = (List<?>) altNameObj;
-            int type = (Integer) altName.get(0);
-            if (type == GeneralName.rfc822Name) {
+            Integer type = (Integer) altName.get(0);
+            if (type.intValue() == GeneralName.rfc822Name) {
                 String address = (String) altName.get(1);
                 res.add(address);
             }

File: src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteBackendListenerClient.java
Patch:
@@ -240,7 +240,7 @@ public void setupTest(BackendListenerContext context) throws Exception {
         for (int i = 0; i < percentilesStringArray.length; i++) {
             if(!StringUtils.isEmpty(percentilesStringArray[i].trim())) {
                 try {
-                    Float percentileValue = Float.parseFloat(percentilesStringArray[i].trim());
+                    Float percentileValue = Float.valueOf(percentilesStringArray[i].trim());
                     okPercentiles.put(
                             METRIC_OK_PERCENTILE_PREFIX+AbstractGraphiteMetricsSender.sanitizeString(format.format(percentileValue)),
                             percentileValue);

File: src/core/org/apache/jmeter/gui/UndoHistory.java
Patch:
@@ -318,7 +318,7 @@ private void saveTreeState(GuiPackage guiPackage) {
 
             for (int rowN = 0; rowN < tree.getRowCount(); rowN++) {
                 if (tree.isExpanded(rowN)) {
-                    savedExpanded.add(rowN);
+                    savedExpanded.add(Integer.valueOf(rowN));
                 }
             }
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -915,7 +915,7 @@ private int getPortFromHostHeader(String hostHeaderValue, int defaultValue) {
         if (hostParts.length > 1) {
             String portString = hostParts[hostParts.length - 1];
             if (portString.matches("^\\d+$")) {
-                return Integer.valueOf(portString);
+                return Integer.parseInt(portString);
             }
         }
         return defaultValue;

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -335,7 +335,7 @@ public void run() {
         test.traverse(new TurnElementsOn());
         if (startListenersLater) { notifyTestListenersOfStart(testListeners); }
 
-        List<?> testLevelElements = new LinkedList<Object>(test.list(test.getArray()[0]));
+        List<?> testLevelElements = new LinkedList<>(test.list(test.getArray()[0]));
         removeThreadGroups(testLevelElements);
 
         SearchByClass<SetupThreadGroup> setupSearcher = new SearchByClass<>(SetupThreadGroup.class);

File: src/jorphan/org/apache/jorphan/collections/HashTree.java
Patch:
@@ -731,7 +731,7 @@ public Collection<?> list(Object key) {
         if (temp != null) {
             return temp.list();
         }
-        return new HashSet<Object>();
+        return new HashSet<>();
     }
 
     /**
@@ -778,7 +778,7 @@ public Collection<?> list(Collection<?> treePath) {
         if (tree != null) {
             return tree.list();
         }
-        return new HashSet<Object>();
+        return new HashSet<>();
     }
 
     /**

File: test/src/org/apache/jmeter/control/TestLoopController.java
Patch:
@@ -94,7 +94,7 @@ public void testInfiniteLoop() throws Exception {
         public void testBug54467() throws Exception {
             JMeterContext jmctx = JMeterContextService.getContext();
             LoopController loop = new LoopController();
-            Map<String, String> variables = new HashMap<String, String>();
+            Map<String, String> variables = new HashMap<>();
             ReplaceStringWithFunctions transformer = new ReplaceStringWithFunctions(new CompoundVariable(), variables);
             jmctx.setVariables(new JMeterVariables());
 

File: test/src/org/apache/jmeter/control/TestRandomOrderController.java
Patch:
@@ -37,7 +37,7 @@ public void testRandomOrder() {
             roc.addTestElement(new TestSampler("two"));
             roc.addTestElement(new TestSampler("three"));
             TestElement sampler = null;
-            List<String> usedSamplers = new ArrayList<String>();
+            List<String> usedSamplers = new ArrayList<>();
             roc.initialize();
             while ((sampler = roc.next()) != null) {
                 String samplerName = sampler.getName();
@@ -59,7 +59,7 @@ public void testRandomOrderOneElement() {
             RandomOrderController roc = new RandomOrderController();
             roc.addTestElement(new TestSampler("zero"));
             TestElement sampler = null;
-            List<String> usedSamplers = new ArrayList<String>();
+            List<String> usedSamplers = new ArrayList<>();
             roc.initialize();
             while ((sampler = roc.next()) != null) {
                 String samplerName = sampler.getName();

File: test/src/org/apache/jmeter/control/TestSwitchController.java
Patch:
@@ -252,7 +252,7 @@ private void runTest2(String cond, String exp[]) throws Exception {
         */
         public void testFunction() throws Exception {
             JMeterContext jmctx = JMeterContextService.getContext();
-            Map<String, String> variables = new HashMap<String, String>();
+            Map<String, String> variables = new HashMap<>();
             ReplaceStringWithFunctions transformer = new ReplaceStringWithFunctions(new CompoundVariable(), variables);
             jmctx.setVariables(new JMeterVariables());
             JMeterVariables jmvars = jmctx.getVariables();

File: test/src/org/apache/jmeter/engine/DistributedRunnerTest.java
Patch:
@@ -116,7 +116,7 @@ public void testFailure3() throws Exception {
     }
 
     private static class DistributedRunnerEmul extends DistributedRunner {
-        public List<EmulatorEngine> engines = new LinkedList<EmulatorEngine>();
+        public List<EmulatorEngine> engines = new LinkedList<>();
 
         @Override
         protected JMeterEngine createEngine(String address) throws RemoteException, NotBoundException, MalformedURLException {

File: test/src/org/apache/jmeter/engine/util/PackageTest.java
Patch:
@@ -48,7 +48,7 @@ public PackageTest(String arg0) {
     @Override
     public void setUp() {
         jmctx = JMeterContextService.getContext();
-        Map<String, String> variables = new HashMap<String, String>();
+        Map<String, String> variables = new HashMap<>();
         variables.put("my_regex", ".*");
         variables.put("server", "jakarta.apache.org");
         SampleResult result = new SampleResult();

File: test/src/org/apache/jmeter/engine/util/TestValueReplacer.java
Patch:
@@ -61,7 +61,7 @@ public void testReverseReplacement() throws Exception {
             assertTrue(replacer.containsKey("server"));
             TestElement element = new TestPlan();
             element.setProperty(new StringProperty("domain", "jakarta.apache.org"));
-            List<Object> argsin = new ArrayList<Object>();
+            List<Object> argsin = new ArrayList<>();
             argsin.add("username is jack");
             argsin.add("his_password");
             element.setProperty(new CollectionProperty("args", argsin));
@@ -81,7 +81,7 @@ public void testReverseReplacementXml() throws Exception {
             assertTrue(replacer.containsKey("normal_regex"));
             TestElement element = new TestPlan();
             element.setProperty(new StringProperty("domain", "<this><is>xml</this></is>"));
-            List<Object> argsin = new ArrayList<Object>();
+            List<Object> argsin = new ArrayList<>();
             argsin.add("<this><is>xml</this></is>");
             argsin.add("And I say: Hello World.");
             element.setProperty(new CollectionProperty("args", argsin));

File: test/src/org/apache/jmeter/functions/TestJexlFunction.java
Patch:
@@ -53,7 +53,7 @@ public void setUp() {
         vars = new JMeterVariables();
         jmctx.setVariables(vars);
         jmctx.setPreviousResult(result);
-        params = new LinkedList<CompoundVariable>();
+        params = new LinkedList<>();
     }
 
     public void testParameterCount() throws Exception {

File: test/src/org/apache/jmeter/functions/TestTimeFunction.java
Patch:
@@ -52,7 +52,7 @@ public void setUp() {
             vars = new JMeterVariables();
             jmctx.setVariables(vars);
             jmctx.setPreviousResult(result);
-            params = new LinkedList<CompoundVariable>();
+            params = new LinkedList<>();
             result = new SampleResult();
             variable = new TimeFunction();
         }

File: test/src/org/apache/jmeter/gui/action/TestLoad.java
Patch:
@@ -39,7 +39,7 @@ public class TestLoad extends JMeterTestCase {
     private static final File testfiledir = new File(basedir,"bin/testfiles");
     private static final File demofiledir = new File(basedir,"xdocs/demos");
     
-    private static final Set<String> notTestPlan = new HashSet<String>();// not full test plans
+    private static final Set<String> notTestPlan = new HashSet<>();// not full test plans
     
     static{
         notTestPlan.add("load_bug_list.jmx");// used by TestAnchorModifier

File: test/src/org/apache/jmeter/gui/util/JSyntaxTextAreaTest.java
Patch:
@@ -42,7 +42,7 @@ public void testSetLanguage() {
   
     public void testSyntaxNames() throws IllegalArgumentException,
             IllegalAccessException {
-        HashSet<String> values = new HashSet<String>();
+        HashSet<String> values = new HashSet<>();
         for (Field field : SyntaxConstants.class.getFields()) {
             int modifiers = field.getModifiers();
             if (field.getType().equals(String.class)

File: test/src/org/apache/jmeter/junit/JMeterTestCase.java
Patch:
@@ -137,7 +137,7 @@ protected static String findTestPath(String file) {
 
     protected void checkInvalidParameterCounts(AbstractFunction func, int minimum)
             throws Exception {
-        Collection<CompoundVariable> parms = new LinkedList<CompoundVariable>();
+        Collection<CompoundVariable> parms = new LinkedList<>();
         for (int c = 0; c < minimum; c++) {
             try {
                 func.setParameters(parms);
@@ -152,7 +152,7 @@ protected void checkInvalidParameterCounts(AbstractFunction func, int minimum)
     
     protected void checkInvalidParameterCounts(AbstractFunction func, int min,
             int max) throws Exception {
-        Collection<CompoundVariable> parms = new LinkedList<CompoundVariable>();
+        Collection<CompoundVariable> parms = new LinkedList<>();
         for (int count = 0; count < min; count++) {
             try {
                 func.setParameters(parms);

File: test/src/org/apache/jmeter/protocol/http/control/TestCacheManager.java
Patch:
@@ -126,12 +126,12 @@ private static class HttpURLConnectionStub extends HttpURLConnection {
         
         public HttpURLConnectionStub(HttpMethod method, URL url) {
             super(method, url);
-            this.properties = new HashMap<String, List<String>>();
+            this.properties = new HashMap<>();
         }
         
         @Override
         public void addRequestProperty(String key, String value) {
-            List<String> list = new ArrayList<String>();
+            List<String> list = new ArrayList<>();
             list.add(value);
             this.properties.put(key, list);
         }

File: test/src/org/apache/jmeter/protocol/http/parser/TestHTMLParser.java
Patch:
@@ -402,8 +402,8 @@ private static void filetest(HTMLParser p, String file, String url, String resul
                 expected = getFile(resultFile).iterator();
             } else {
                 // Convert both to Sets
-                expected = new TreeSet<String>(getFile(resultFile)).iterator();
-                TreeSet<URL> temp = new TreeSet<URL>(new Comparator<Object>() {
+                expected = new TreeSet<>(getFile(resultFile)).iterator();
+                TreeSet<URL> temp = new TreeSet<>(new Comparator<Object>() {
                     @Override
                     public int compare(Object o1, Object o2) {
                         return (o1.toString().compareTo(o2.toString()));
@@ -429,7 +429,7 @@ public int compare(Object o1, Object o2) {
 
         // Get expected results as a List
         private static List<String> getFile(String file) throws Exception {
-            ArrayList<String> al = new ArrayList<String>();
+            ArrayList<String> al = new ArrayList<>();
             if (file != null && file.length() > 0) {
                 BufferedReader br = new BufferedReader(new FileReader(findTestFile(file)));
                 String line = br.readLine();

File: test/src/org/apache/jmeter/protocol/http/sampler/PostWriterTest.java
Patch:
@@ -892,7 +892,7 @@ private void checkContentLength(HttpURLConnection conn, int length) {
      */
     private static class StubURLConnection extends HttpURLConnection {
         private ByteArrayOutputStream output = new ByteArrayOutputStream();
-        private Map<String, String> properties = new HashMap<String, String>();
+        private Map<String, String> properties = new HashMap<>();
         
         public StubURLConnection(String url) throws MalformedURLException {
             super(new URL(url));

File: test/src/org/apache/jmeter/protocol/http/util/TestHTTPFileArgs.java
Patch:
@@ -55,7 +55,7 @@ public void testAdding() throws Exception {
     }
 
     public void testSetHTTPFileArgs() throws Exception {
-        List<HTTPFileArg> newHTTPFileArgs = new LinkedList<HTTPFileArg>();
+        List<HTTPFileArg> newHTTPFileArgs = new LinkedList<>();
         newHTTPFileArgs.add(new HTTPFileArg("hede"));
         HTTPFileArgs files = new HTTPFileArgs();
         files.setHTTPFileArgs(newHTTPFileArgs);

File: test/src/org/apache/jorphan/collections/PackageTest.java
Patch:
@@ -162,7 +162,7 @@ public void testEqualsAndHashCode2() throws Exception {
 
         public void testSearch() throws Exception {
             ListedHashTree tree = new ListedHashTree();
-            SearchByClass<Integer> searcher = new SearchByClass<Integer>(Integer.class);
+            SearchByClass<Integer> searcher = new SearchByClass<>(Integer.class);
             String one = "one";
             String two = "two";
             Integer o = Integer.valueOf(1);

File: test/src/org/apache/jorphan/exec/TestKeyToolUtils.java
Patch:
@@ -45,7 +45,7 @@ public TestKeyToolUtils(String arg0) {
      */
     public void testCheckKeytool() throws Exception {
         SystemCommand sc = new SystemCommand(null, null);
-        List<String> arguments = new ArrayList<String>();
+        List<String> arguments = new ArrayList<>();
         arguments.add("xyzqwas"); // should not exist
         try {
             int status = sc.run(arguments);

File: src/core/org/apache/jmeter/gui/util/FilePanelEntry.java
Patch:
@@ -68,7 +68,9 @@ public FilePanelEntry(String label, ChangeListener listener, String ... exts) {
         if (listener != null) {
             listeners.add(listener);
         }
-        if (exts != null) {
+        if (exts != null && 
+          !(exts.length == 1 && exts[0] == null) // String null is converted to String[]{null}
+            ) {
             this.filetypes = new String[exts.length];
             System.arraycopy(exts, 0, this.filetypes, 0, exts.length);
         } else {

File: src/components/org/apache/jmeter/visualizers/PropertyControlGui.java
Patch:
@@ -160,9 +160,8 @@ public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {
                 return m1.compareTo(m2);
             }
         });
-        Iterator<Map.Entry<Object, Object>> i = al.iterator();
-        while (i.hasNext()) {
-            tableModel.addRow(i.next());
+        for (Map.Entry<Object, Object> row : al) {
+            tableModel.addRow(row);
         }
 
     }

File: src/components/org/apache/jmeter/control/IncludeController.java
Patch:
@@ -198,10 +198,8 @@ private void removeDisabledItems(HashTree tree) {
         while (iter.hasNext()) {
             TestElement item = (TestElement) iter.next();
             if (!item.isEnabled()) {
-                //log.info("Removing "+item.toString());
                 tree.remove(item);
             } else {
-                //log.info("Keeping "+item.toString());
                 removeDisabledItems(tree.getTree(item));// Recursive call
             }
         }

File: src/components/org/apache/jmeter/assertions/SMIMEAssertion.java
Patch:
@@ -303,7 +303,7 @@ private static MimeMessage getMessageFromResponse(SampleResult response,
      * 
      * @param serialString
      *            the String representation of the serial Number
-     * @return
+     * @return the BitInteger representation of the serial Number
      */
     private static BigInteger readSerialNumber(String serialString) {
         if (serialString.startsWith("0x") || serialString.startsWith("0X")) { // $NON-NLS-1$  // $NON-NLS-2$
@@ -315,7 +315,7 @@ private static BigInteger readSerialNumber(String serialString) {
     /**
      * Extract email addresses from a certificate
      * 
-     * @param cert
+     * @param cert the X509 certificate
      * @return a List of all email addresses found
      * @throws CertificateException
      */
@@ -347,7 +347,6 @@ private static List<String> getEmailFromCert(X509Certificate cert)
     /**
      * Check if the Bouncycastle jce provider is installed and dynamically load
      * it, if needed;
-     * 
      */
     private static void checkForBouncycastle() {
         if (null == Security.getProvider("BC")) { // $NON-NLS-1$

File: src/components/org/apache/jmeter/assertions/CompareAssertion.java
Patch:
@@ -157,7 +157,7 @@ private String filterString(String content) {
 
     @Override
     public void iterationStart(LoopIterationEvent iterEvent) {
-        responses = new LinkedList<SampleResult>();
+        responses = new LinkedList<>();
     }
 
     public void iterationEnd(LoopIterationEvent iterEvent) {

File: src/components/org/apache/jmeter/assertions/CompareAssertionBeanInfo.java
Patch:
@@ -48,7 +48,7 @@ public CompareAssertionBeanInfo() {
         p.setValue(TableEditor.OBJECT_PROPERTIES, // These are the names of the get/set methods
                 new String[]{SubstitutionElement.REGEX, SubstitutionElement.SUBSTITUTE});
         p.setValue(NOT_UNDEFINED,Boolean.TRUE);
-        p.setValue(DEFAULT,new ArrayList<Object>());
+        p.setValue(DEFAULT, new ArrayList<>());
         p.setValue(MULTILINE,Boolean.TRUE);
 
     }

File: src/components/org/apache/jmeter/assertions/SMIMEAssertion.java
Patch:
@@ -321,7 +321,7 @@ private static BigInteger readSerialNumber(String serialString) {
      */
     private static List<String> getEmailFromCert(X509Certificate cert)
             throws CertificateException {
-        List<String> res = new ArrayList<String>();
+        List<String> res = new ArrayList<>();
 
         X509Principal subject = PrincipalUtil.getSubjectX509Principal(cert);
         Iterator<?> addressIt = subject.getValues(X509Name.EmailAddress).iterator();

File: src/components/org/apache/jmeter/control/CriticalSectionController.java
Patch:
@@ -70,7 +70,7 @@ public class CriticalSectionController extends GenericController implements
 
     private static final String LOCK_NAME = "CriticalSectionController.lockName"; //$NON-NLS-1$
 
-    private static final ConcurrentHashMap<String, ReentrantLock> LOCK_MAP = new ConcurrentHashMap<String, ReentrantLock>();
+    private static final ConcurrentHashMap<String, ReentrantLock> LOCK_MAP = new ConcurrentHashMap<>();
 
     private transient volatile ReentrantLock currentLock;
 

File: src/components/org/apache/jmeter/control/IncludeController.java
Patch:
@@ -173,7 +173,7 @@ protected HashTree loadIncludedElements() {
      * @return HashTree Subset within Test Fragment or Empty HashTree
      */
     private HashTree getProperBranch(HashTree tree) {
-        Iterator<Object> iter = new LinkedList<Object>(tree.list()).iterator();
+        Iterator<Object> iter = new LinkedList<>(tree.list()).iterator();
         while (iter.hasNext()) {
             TestElement item = (TestElement) iter.next();
 
@@ -194,7 +194,7 @@ private HashTree getProperBranch(HashTree tree) {
 
 
     private void removeDisabledItems(HashTree tree) {
-        Iterator<Object> iter = new LinkedList<Object>(tree.list()).iterator();
+        Iterator<Object> iter = new LinkedList<>(tree.list()).iterator();
         while (iter.hasNext()) {
             TestElement item = (TestElement) iter.next();
             if (!item.isEnabled()) {

File: src/components/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -100,7 +100,7 @@ public JMeterTreeNode getSelectedNode() {
     }
 
     private void setNodePath() {
-        List<String> nodePath = new ArrayList<String>();
+        List<String> nodePath = new ArrayList<>();
         if (selectedNode != null) {
             TreeNode[] path = selectedNode.getPath();
             for (TreeNode node : path) {

File: src/components/org/apache/jmeter/control/RandomOrderController.java
Patch:
@@ -62,7 +62,7 @@ private void reorder() {
         int numElements = this.subControllersAndSamplers.size();
 
         // Create a new list containing numElements null elements.
-        List<TestElement> reordered = new ArrayList<TestElement>(this.subControllersAndSamplers.size());
+        List<TestElement> reordered = new ArrayList<>(this.subControllersAndSamplers.size());
         for (int i = 0; i < numElements; i++) {
             reordered.add(null);
         }

File: src/components/org/apache/jmeter/extractor/DebugPostProcessor.java
Patch:
@@ -94,7 +94,7 @@ public void process(){
     }
 
     private void formatPropertyIterator(StringBuilder sb, PropertyIterator iter) {
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         while (iter.hasNext()) {
             JMeterProperty item = iter.next();
             map.put(item.getName(), item.getStringValue());
@@ -104,7 +104,7 @@ private void formatPropertyIterator(StringBuilder sb, PropertyIterator iter) {
 
     private void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s) {
         @SuppressWarnings("unchecked")
-        ArrayList<Map.Entry<Object, Object>> al = new ArrayList<Map.Entry<Object, Object>>(s);
+        ArrayList<Map.Entry<Object, Object>> al = new ArrayList<>(s);
         Collections.sort(al, new Comparator<Map.Entry<Object, Object>>(){
             @Override
             public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {

File: src/components/org/apache/jmeter/extractor/HtmlExtractor.java
Patch:
@@ -177,7 +177,7 @@ private List<String> extractMatchingStrings(JMeterVariables vars,
             String expression, String attribute, int matchNumber,
             SampleResult previousResult) {
         int found = 0;
-        List<String> result = new ArrayList<String>();
+        List<String> result = new ArrayList<>();
         if (isScopeVariable()){
             String inputString=vars.get(getVariableName());
             if(!StringUtils.isEmpty(inputString)) {

File: src/components/org/apache/jmeter/extractor/RegexExtractor.java
Patch:
@@ -192,7 +192,7 @@ private List<MatchResult> processMatches(Pattern pattern, String regex, SampleRe
         }
 
         Perl5Matcher matcher = JMeterUtils.getMatcher();
-        List<MatchResult> matches = new ArrayList<MatchResult>();
+        List<MatchResult> matches = new ArrayList<>();
         int found = 0;
 
         if (isScopeVariable()){
@@ -315,7 +315,7 @@ private void initTemplate() {
             return;
         }
         // Contains Strings and Integers
-        List<Object> combined = new ArrayList<Object>();
+        List<Object> combined = new ArrayList<>();
         String rawTemplate = getTemplate();
         PatternMatcher matcher = JMeterUtils.getMatcher();
         Pattern templatePattern = JMeterUtils.getPatternCache().getPattern("\\$(\\d+)\\$"  // $NON-NLS-1$

File: src/components/org/apache/jmeter/extractor/XPathExtractor.java
Patch:
@@ -124,7 +124,7 @@ public void process() {
         vars.put(matchNR, "0"); // In case parse fails // $NON-NLS-1$
         vars.remove(concat(refName,"1")); // In case parse fails // $NON-NLS-1$
 
-        List<String> matches = new ArrayList<String>();
+        List<String> matches = new ArrayList<>();
         try{
             if (isScopeVariable()){
                 String inputString=vars.get(getVariableName());

File: src/components/org/apache/jmeter/modifiers/UserParameters.java
Patch:
@@ -123,7 +123,7 @@ private CollectionProperty getValues() {
         if (threadValues.size() > 0) {
             return (CollectionProperty) threadValues.get(getThreadContext().getThreadNum() % threadValues.size());
         }
-        return new CollectionProperty("noname", new LinkedList<Object>());
+        return new CollectionProperty("noname", new LinkedList<>());
     }
 
     public boolean isPerIteration() {

File: src/components/org/apache/jmeter/modifiers/gui/UserParametersGui.java
Patch:
@@ -131,7 +131,7 @@ public void modifyTestElement(TestElement params) {
         GuiUtils.stopTableEditing(paramTable);
         UserParameters userParams = ((UserParameters) params);
         userParams.setNames(new CollectionProperty(UserParameters.NAMES, tableModel.getColumnData(NAME_COL_RESOURCE)));
-        CollectionProperty threadLists = new CollectionProperty(UserParameters.THREAD_VALUES, new ArrayList<Object>());
+        CollectionProperty threadLists = new CollectionProperty(UserParameters.THREAD_VALUES, new ArrayList<>());
         log.debug("making threadlists from gui");
         for (int col = 1; col < tableModel.getColumnCount(); col++) {
             threadLists.addItem(tableModel.getColumnData(getUserColName(col)));

File: src/components/org/apache/jmeter/reporters/MailerModel.java
Patch:
@@ -152,7 +152,7 @@ public void notifyChangeListeners() {
      */
     public List<String> getAddressList() {
         String addressees = getToAddress();
-        List<String> addressList = new ArrayList<String>();
+        List<String> addressList = new ArrayList<>();
 
         if (addressees != null) {
 

File: src/components/org/apache/jmeter/sampler/DebugSampler.java
Patch:
@@ -43,7 +43,7 @@ public class DebugSampler extends AbstractSampler implements TestBean {
 
     private static final long serialVersionUID = 232L;
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 
@@ -91,7 +91,7 @@ public SampleResult sample(Entry e) {
 
     private void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s) {
         @SuppressWarnings("unchecked")
-        ArrayList<Map.Entry<Object, Object>> al = new ArrayList<Map.Entry<Object, Object>>(s);
+        ArrayList<Map.Entry<Object, Object>> al = new ArrayList<>(s);
         Collections.sort(al, new Comparator<Map.Entry<Object, Object>>(){
             @Override
             public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {

File: src/components/org/apache/jmeter/sampler/TestAction.java
Patch:
@@ -46,7 +46,7 @@ public class TestAction extends AbstractSampler implements Interruptible {
 
     private static final long serialVersionUID = 240L;
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 

File: src/components/org/apache/jmeter/timers/ConstantThroughputTimer.java
Patch:
@@ -98,7 +98,7 @@ public String toString() {
 
     //For holding the ThrougputInfo objects for all ThreadGroups. Keyed by AbstractThreadGroup objects
     private static final ConcurrentMap<AbstractThreadGroup, ThroughputInfo> threadGroupsInfoMap =
-        new ConcurrentHashMap<AbstractThreadGroup, ThroughputInfo>();
+            new ConcurrentHashMap<>();
 
 
     /**

File: src/components/org/apache/jmeter/visualizers/PropertyControlGui.java
Patch:
@@ -149,7 +149,7 @@ private void setUpData(){
             return;
         }
         Set<Map.Entry<Object, Object>> s = p.entrySet();
-        ArrayList<Map.Entry<Object, Object>> al = new ArrayList<Map.Entry<Object, Object>>(s);
+        ArrayList<Map.Entry<Object, Object>> al = new ArrayList<>(s);
         Collections.sort(al, new Comparator<Map.Entry<Object, Object>>(){
             @Override
             public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {

File: src/components/org/apache/jmeter/visualizers/RenderAsCssJQuery.java
Patch:
@@ -123,7 +123,7 @@ private void executeAndShowCssJqueryTester(String textToParse) {
 
     private String process(String textToParse) {
         try {
-            List<String> result = new ArrayList<String>();
+            List<String> result = new ArrayList<>();
             Extractor extractor = HtmlExtractor.getExtractorImpl(cssJqueryLabeledChoice.getText());
             final int nbFound = extractor.extract(
                     cssJqueryField.getText(), attributeField.getText(), -1, textToParse, result, 0, null);

File: src/components/org/apache/jmeter/visualizers/RenderAsRegexp.java
Patch:
@@ -126,7 +126,7 @@ private String process(String textToParse) {
         } catch (MalformedCachePatternException e) {
             return e.toString();
         }
-        List<MatchResult> matches = new LinkedList<MatchResult>();
+        List<MatchResult> matches = new LinkedList<>();
         while (matcher.contains(input, pattern)) {
             matches.add(matcher.getMatch());
         }

File: src/components/org/apache/jmeter/visualizers/RenderAsXPath.java
Patch:
@@ -135,7 +135,7 @@ private void executeAndShowXPathTester(String textToParse, XPathExtractor extrac
     private String process(String textToParse, XPathExtractor extractor) {
         try {
             Document doc = parseResponse(textToParse, extractor);
-            List<String> matchStrings = new ArrayList<String>();
+            List<String> matchStrings = new ArrayList<>();
             XPathUtil.putValuesForXPathInList(doc, xpathExpressionField.getText(),
                     matchStrings, extractor.getFragment());
             StringBuilder builder = new StringBuilder();

File: src/components/org/apache/jmeter/visualizers/RequestPanel.java
Patch:
@@ -51,7 +51,7 @@ public class RequestPanel {
      * and Create Request Panel
      */
     public RequestPanel() {
-        listRequestView = new LinkedList<RequestView>();
+        listRequestView = new LinkedList<>();
         List<String> classesToAdd = Collections.<String> emptyList();
         try {
             classesToAdd = JMeterUtils.findClassesThatExtend(RequestView.class);

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -88,8 +88,7 @@ public class StatVisualizer extends AbstractVisualizer implements Clearable, Act
      */
     private final transient Object lock = new Object();
 
-    private final Map<String, SamplingStatCalculator> tableRows =
-        new ConcurrentHashMap<String, SamplingStatCalculator>();
+    private final Map<String, SamplingStatCalculator> tableRows = new ConcurrentHashMap<>();
 
     public StatVisualizer() {
         super();

File: src/components/org/apache/jmeter/visualizers/SummaryReport.java
Patch:
@@ -104,8 +104,7 @@ public class SummaryReport extends AbstractVisualizer implements Clearable, Acti
      */
     private final transient Object lock = new Object();
 
-    private final Map<String, Calculator> tableRows =
-        new ConcurrentHashMap<String, Calculator>();
+    private final Map<String, Calculator> tableRows = new ConcurrentHashMap<>();
 
     // Column renderers
     private static final TableCellRenderer[] RENDERERS =

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -322,7 +322,7 @@ private Component createComboRender() {
         }
         String textRenderer = JMeterUtils.getResString("view_results_render_text"); // $NON-NLS-1$
         Object textObject = null;
-        Map<String, ResultRenderer> map = new HashMap<String, ResultRenderer>(classesToAdd.size());
+        Map<String, ResultRenderer> map = new HashMap<>(classesToAdd.size());
         for (String clazz : classesToAdd) {
             try {
                 // Instantiate render classes

File: src/components/org/apache/jmeter/visualizers/backend/AbstractBackendListenerClient.java
Patch:
@@ -56,7 +56,7 @@ public abstract class AbstractBackendListenerClient implements BackendListenerCl
     private static final Logger LOGGER = LoggingManager.getLoggerForClass();
     private UserMetric userMetrics = new UserMetric();
     
-    private ConcurrentHashMap<String, SamplerMetric> metricsPerSampler = new ConcurrentHashMap<String, SamplerMetric>();
+    private ConcurrentHashMap<String, SamplerMetric> metricsPerSampler = new ConcurrentHashMap<>();
 
     /* Implements BackendListenerClient.setupTest(BackendListenerContext) */
     @Override

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
Patch:
@@ -110,7 +110,7 @@ private void init() {// called from ctor, so must not be overridable
      * @return a panel containing the relevant components
      */
     private JPanel createClassnamePanel() {
-        List<String> possibleClasses = new ArrayList<String>();
+        List<String> possibleClasses = new ArrayList<>();
 
         try {
             // Find all the classes which implement the BackendListenerClient
@@ -244,7 +244,7 @@ public void configure(TestElement config) {
      */
     private static final boolean checkContainsClassName(ComboBoxModel<?> model, String className) {
         int size = model.getSize();
-        Set<String> set = new HashSet<String>(size);
+        Set<String> set = new HashSet<>(size);
         for (int i = 0; i < size; i++) {
             set.add((String)model.getElementAt(i));
         }

File: src/components/org/apache/jmeter/visualizers/backend/graphite/AbstractGraphiteMetricsSender.java
Patch:
@@ -47,7 +47,7 @@ protected GenericKeyedObjectPool<SocketConnectionInfos, SocketOutputStream> crea
         config.setMinEvictableIdleTimeMillis(TimeUnit.MINUTES.toMillis(3));
         config.setTimeBetweenEvictionRunsMillis(TimeUnit.MINUTES.toMillis(3));
 
-        return new GenericKeyedObjectPool<SocketConnectionInfos, SocketOutputStream>(
+        return new GenericKeyedObjectPool<>(
                 new SocketOutputStreamPoolFactory(SOCKET_CONNECT_TIMEOUT_MS, SOCKET_TIMEOUT), config);
     }
     

File: src/components/org/apache/jmeter/visualizers/backend/graphite/PickleGraphiteMetricsSender.java
Patch:
@@ -53,7 +53,7 @@ class PickleGraphiteMetricsSender extends AbstractGraphiteMetricsSender {
     private String prefix;
 
     // graphite expects a python-pickled list of nested tuples.
-    private List<MetricTuple> metrics = new LinkedList<MetricTuple>();
+    private List<MetricTuple> metrics = new LinkedList<>();
 
     private GenericKeyedObjectPool<SocketConnectionInfos, SocketOutputStream> socketOutputStreamPool;
 

File: src/components/org/apache/jmeter/visualizers/backend/graphite/SocketOutputStreamPoolFactory.java
Patch:
@@ -81,6 +81,6 @@ public SocketOutputStream create(SocketConnectionInfos connectionInfos)
 
     @Override
     public PooledObject<SocketOutputStream> wrap(SocketOutputStream outputStream) {
-        return new DefaultPooledObject<SocketOutputStream>(outputStream);
+        return new DefaultPooledObject<>(outputStream);
     }
 }

File: src/components/org/apache/jmeter/visualizers/backend/graphite/TextGraphiteMetricsSender.java
Patch:
@@ -36,7 +36,7 @@ class TextGraphiteMetricsSender extends AbstractGraphiteMetricsSender {
         
     private String prefix;
 
-    private List<MetricTuple> metrics = new ArrayList<MetricTuple>();
+    private List<MetricTuple> metrics = new ArrayList<>();
 
     private GenericKeyedObjectPool<SocketConnectionInfos, SocketOutputStream> socketOutputStreamPool;
 

File: src/components/org/apache/jmeter/visualizers/utils/Colors.java
Patch:
@@ -78,7 +78,7 @@ public static List<Color> getColors() {
 
         String[] oList = order.split(ENTRY_SEP);
 
-        List<Color> listColors = new ArrayList<Color>();
+        List<Color> listColors = new ArrayList<>();
         for (String key : oList) {
             String trimmed = key.trim();
             String property = p.getProperty(trimmed);

File: src/core/org/apache/jmeter/NewDriver.java
Patch:
@@ -52,7 +52,7 @@ public final class NewDriver {
     private static final String jmDir;
 
     static {
-        final List<URL> jars = new LinkedList<URL>();
+        final List<URL> jars = new LinkedList<>();
         final String initial_classpath = System.getProperty(JAVA_CLASS_PATH);
 
         // Find JMeter home dir from the initial classpath

File: src/core/org/apache/jmeter/config/Arguments.java
Patch:
@@ -81,7 +81,7 @@ public void setArguments(List<Argument> arguments) {
      */
     public Map<String, String> getArgumentsAsMap() {
         PropertyIterator iter = getArguments().iterator();
-        Map<String, String> argMap = new LinkedHashMap<String, String>();
+        Map<String, String> argMap = new LinkedHashMap<>();
         while (iter.hasNext()) {
             Argument arg = (Argument) iter.next().getObjectValue();
             // Because CollectionProperty.mergeIn will not prevent adding two

File: src/core/org/apache/jmeter/control/TransactionSampler.java
Patch:
@@ -41,7 +41,7 @@
 public class TransactionSampler extends AbstractSampler {
     private static final long serialVersionUID = 240L;
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 

File: src/core/org/apache/jmeter/engine/TreeCloner.java
Patch:
@@ -33,7 +33,7 @@ public class TreeCloner implements HashTreeTraverser {
 
     private final ListedHashTree newTree;
 
-    private final LinkedList<Object> objects = new LinkedList<Object>();
+    private final LinkedList<Object> objects = new LinkedList<>();
 
     private final boolean honourNoThreadClone;
 

File: src/core/org/apache/jmeter/engine/util/FunctionParser.java
Patch:
@@ -55,7 +55,7 @@ class FunctionParser {
      */
     LinkedList<Object> compileString(String value) throws InvalidVariableException {
         StringReader reader = new StringReader(value);
-        LinkedList<Object> result = new LinkedList<Object>();
+        LinkedList<Object> result = new LinkedList<>();
         StringBuilder buffer = new StringBuilder();
         char previous = ' '; // TODO - why use space?
         char[] current = new char[1];
@@ -183,7 +183,7 @@ Object makeFunction(StringReader reader) throws InvalidVariableException {
      * @throws InvalidVariableException when evaluation of variables fail
      */
     LinkedList<CompoundVariable> parseParams(StringReader reader) throws InvalidVariableException {
-        LinkedList<CompoundVariable> result = new LinkedList<CompoundVariable>();
+        LinkedList<CompoundVariable> result = new LinkedList<>();
         StringBuilder buffer = new StringBuilder();
         char[] current = new char[1];
         char previous = ' ';

File: src/core/org/apache/jmeter/engine/util/ValueReplacer.java
Patch:
@@ -43,7 +43,7 @@ public class ValueReplacer {
 
     private final CompoundVariable masterFunction = new CompoundVariable();
 
-    private Map<String, String> variables = new HashMap<String, String>();
+    private Map<String, String> variables = new HashMap<>();
 
     public ValueReplacer() {
     }
@@ -157,7 +157,7 @@ public void addVariables(Map<String, String> vars) {
      * @throws InvalidVariableException when <code>transform</code> throws an {@link InvalidVariableException} while transforming a value
      */
     private Collection<JMeterProperty> replaceValues(PropertyIterator iter, ValueTransformer transform) throws InvalidVariableException {
-        List<JMeterProperty> props = new LinkedList<JMeterProperty>();
+        List<JMeterProperty> props = new LinkedList<>();
         while (iter.hasNext()) {
             JMeterProperty val = iter.next();
             if (log.isDebugEnabled()) {

File: src/core/org/apache/jmeter/gui/GUIFactory.java
Patch:
@@ -32,13 +32,13 @@
  */
 public final class GUIFactory {
     /** A Map from String to JMeterGUIComponent of registered GUI classes. */
-    private static final Map<String, JMeterGUIComponent> GUI_MAP = new HashMap<String, JMeterGUIComponent>();
+    private static final Map<String, JMeterGUIComponent> GUI_MAP = new HashMap<>();
 
     /** A Map from String to ImageIcon of registered icons. */
-    private static final Map<String, ImageIcon> ICON_MAP = new HashMap<String, ImageIcon>();
+    private static final Map<String, ImageIcon> ICON_MAP = new HashMap<>();
 
     /** A Map from String to ImageIcon of registered icons. */
-    private static final Map<String, ImageIcon> DISABLED_ICON_MAP = new HashMap<String, ImageIcon>();
+    private static final Map<String, ImageIcon> DISABLED_ICON_MAP = new HashMap<>();
 
     /**
      * Prevent instantiation since this is a static utility class.

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -164,7 +164,7 @@ public class MainFrame extends JFrame implements TestStateListener, Remoteable,
     private JButton runningIndicator;
 
     /** The set of currently running hosts. */
-    private final Set<String> hosts = new HashSet<String>();
+    private final Set<String> hosts = new HashSet<>();
 
     /** A message dialog shown while JMeter threads are stopping. */
     private JDialog stoppingMessage;

File: src/core/org/apache/jmeter/gui/SavePropertyDialog.java
Patch:
@@ -55,7 +55,7 @@ public class SavePropertyDialog extends JDialog implements ActionListener {
 
     private static final long serialVersionUID = 232L;
 
-    private static final Map<String, Functor> functors = new HashMap<String, Functor>();
+    private static final Map<String, Functor> functors = new HashMap<>();
 
     private static final String NAME_SAVE_PFX   = "save";  // $NON-NLS-1$ i.e. boolean saveXXX()
     private static final String NAME_SET_PREFIX = "set";   // $NON-NLS-1$ i.e. void setXXX(boolean)

File: src/core/org/apache/jmeter/gui/UndoHistory.java
Patch:
@@ -83,7 +83,7 @@ public boolean add(T item) {
     /**
      * temporary storage for GUI tree expansion state
      */
-    private ArrayList<Integer> savedExpanded = new ArrayList<Integer>();
+    private ArrayList<Integer> savedExpanded = new ArrayList<>();
 
     /**
      * temporary storage for GUI tree selected row
@@ -95,7 +95,7 @@ public boolean add(T item) {
 
     private static final int HISTORY_SIZE = JMeterUtils.getPropDefault("undo.history.size", 0);
 
-    private List<UndoHistoryItem> history = new LimitedArrayList<UndoHistoryItem>(HISTORY_SIZE);
+    private List<UndoHistoryItem> history = new LimitedArrayList<>(HISTORY_SIZE);
 
     /**
      * flag to prevent recursive actions
@@ -105,7 +105,7 @@ public boolean add(T item) {
     /**
      * History listeners
      */
-    private List<HistoryListener> listeners = new ArrayList<UndoHistory.HistoryListener>();
+    private List<HistoryListener> listeners = new ArrayList<>();
 
     public UndoHistory() {
     }

File: src/core/org/apache/jmeter/gui/action/AboutCommand.java
Patch:
@@ -53,7 +53,7 @@ public class AboutCommand implements Command {
     private static JDialog about;
 
     static {
-        HashSet<String> commands = new HashSet<String>();
+        HashSet<String> commands = new HashSet<>();
         commands.add(ActionNames.ABOUT);
         commandSet = Collections.unmodifiableSet(commands);
     }

File: src/core/org/apache/jmeter/gui/action/AddParent.java
Patch:
@@ -35,7 +35,7 @@
 public class AddParent implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.ADD_PARENT);

File: src/core/org/apache/jmeter/gui/action/AddToTree.java
Patch:
@@ -40,7 +40,7 @@ public class AddToTree implements Command {
     private static final Set<String> commandSet;
 
     static {
-        HashSet<String> commands = new HashSet<String>();
+        HashSet<String> commands = new HashSet<>();
         commands.add(ActionNames.ADD);
         commandSet = Collections.unmodifiableSet(commands);
     }

File: src/core/org/apache/jmeter/gui/action/Analyze.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.jmeter.util.JMeterUtils;
 
 public class Analyze implements Command {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.ANALYZE_FILE);

File: src/core/org/apache/jmeter/gui/action/ChangeLanguage.java
Patch:
@@ -33,7 +33,7 @@
  * @version $Revision$
  */
 public class ChangeLanguage implements Command {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 

File: src/core/org/apache/jmeter/gui/action/ChangeParent.java
Patch:
@@ -38,7 +38,7 @@
 public class ChangeParent implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.CHANGE_PARENT);

File: src/core/org/apache/jmeter/gui/action/CheckDirty.java
Patch:
@@ -49,7 +49,7 @@ public class CheckDirty extends AbstractAction implements HashTreeTraverser, Act
 
     private boolean dirty = false;
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.CHECK_DIRTY);
@@ -61,7 +61,7 @@ public class CheckDirty extends AbstractAction implements HashTreeTraverser, Act
     }
 
     public CheckDirty() {
-        previousGuiItems = new HashMap<JMeterTreeNode, TestElement>();
+        previousGuiItems = new HashMap<>();
         ActionRouter.getInstance().addPreActionListener(ExitCommand.class, this);
     }
 

File: src/core/org/apache/jmeter/gui/action/Clear.java
Patch:
@@ -38,7 +38,7 @@
 public class Clear implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.CLEAR);

File: src/core/org/apache/jmeter/gui/action/Close.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class Close implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.CLOSE);

File: src/core/org/apache/jmeter/gui/action/CollapseExpand.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class CollapseExpand implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.COLLAPSE_ALL);

File: src/core/org/apache/jmeter/gui/action/Copy.java
Patch:
@@ -43,7 +43,7 @@
 public class Copy extends AbstractAction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final HashSet<String> commands = new HashSet<String>();
+    private static final HashSet<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.COPY);
@@ -94,7 +94,7 @@ public static JMeterTreeNode cloneTreeNode(JMeterTreeNode node) {
      * @return JMeterTreeNode[]
      */
     static JMeterTreeNode[] keepOnlyAncestors(JMeterTreeNode[] currentNodes) {
-        List<JMeterTreeNode> nodes = new ArrayList<JMeterTreeNode>();
+        List<JMeterTreeNode> nodes = new ArrayList<>();
         for (int i = 0; i < currentNodes.length; i++) {
             boolean exclude = false;
             for (int j = 0; j < currentNodes.length; j++) {

File: src/core/org/apache/jmeter/gui/action/CreateFunctionDialog.java
Patch:
@@ -29,7 +29,7 @@ public class CreateFunctionDialog extends AbstractAction {
 
     private static final Set<String> commands;
     static {
-        commands = new HashSet<String>();
+        commands = new HashSet<>();
         commands.add(ActionNames.FUNCTIONS);
     }
 

File: src/core/org/apache/jmeter/gui/action/Cut.java
Patch:
@@ -29,7 +29,7 @@
  * Implements the Cut menu item command
  */
 public class Cut extends AbstractAction {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.CUT);

File: src/core/org/apache/jmeter/gui/action/Duplicate.java
Patch:
@@ -37,7 +37,7 @@
  */
 public class Duplicate extends AbstractAction {
 
-    private static final HashSet<String> commands = new HashSet<String>();
+    private static final HashSet<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.DUPLICATE);

File: src/core/org/apache/jmeter/gui/action/EditCommand.java
Patch:
@@ -30,7 +30,7 @@
  * Implements the Edit menu item.
  */
 public class EditCommand implements Command {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.EDIT);

File: src/core/org/apache/jmeter/gui/action/EnableComponent.java
Patch:
@@ -33,7 +33,7 @@
 public class EnableComponent implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.ENABLE);

File: src/core/org/apache/jmeter/gui/action/ExitCommand.java
Patch:
@@ -29,7 +29,7 @@
 
 public class ExitCommand implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.EXIT);

File: src/core/org/apache/jmeter/gui/action/Help.java
Patch:
@@ -42,7 +42,7 @@
 public class Help implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     private static final String HELP_DOCS = "file:///"  // $NON-NLS-1$
         + JMeterUtils.getJMeterHome()

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -55,7 +55,7 @@ public class Load implements Command {
 
     private static final boolean expandTree = JMeterUtils.getPropDefault("onload.expandtree", false); //$NON-NLS-1$
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.OPEN);

File: src/core/org/apache/jmeter/gui/action/LoadRecentProject.java
Patch:
@@ -40,7 +40,7 @@ public class LoadRecentProject extends Load {
     private static final String USER_PREFS_KEY = "recent_file_"; //$NON-NLS-1$
     /** The number of menu items used for recent files */
     private static final int NUMBER_OF_MENU_ITEMS = 9;
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.OPEN_RECENT);
@@ -83,7 +83,7 @@ private File getRecentFile(ActionEvent e) {
      * @return a List of JMenuItem and a JSeparator, representing recent files
      */
     public static List<JComponent> getRecentFileMenuItems() {
-        LinkedList<JComponent> menuItems = new LinkedList<JComponent>();
+        LinkedList<JComponent> menuItems = new LinkedList<>();
         // Get the preference for the recent files
         for(int i = 0; i < NUMBER_OF_MENU_ITEMS; i++) {
             // Create the menu item
@@ -121,7 +121,7 @@ public static List<JComponent> getRecentFileMenuItems() {
     public static void updateRecentFileMenuItems(List<JComponent> menuItems, String loadedFileName) {
         // Get the preference for the recent files
 
-        LinkedList<String> newRecentFiles = new LinkedList<String>();
+        LinkedList<String> newRecentFiles = new LinkedList<>();
         // Check if the new file is already in the recent list
         boolean alreadyExists = false;
         for(int i = 0; i < NUMBER_OF_MENU_ITEMS; i++) {

File: src/core/org/apache/jmeter/gui/action/LoggerPanelEnableDisable.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class LoggerPanelEnableDisable implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.LOGGER_PANEL_ENABLE_DISABLE);

File: src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java
Patch:
@@ -45,7 +45,7 @@ public class LookAndFeelCommand implements Command {
 
     private static final String JMETER_LAF = "jmeter.laf"; // $NON-NLS-1$
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     private static final Preferences PREFS = Preferences.userNodeForPackage(LookAndFeelCommand.class);
     // Note: Windows user preferences are stored relative to: HKEY_CURRENT_USER\Software\JavaSoft\Prefs
@@ -60,7 +60,7 @@ public class LookAndFeelCommand implements Command {
         }
         String jMeterLaf = getJMeterLaf();
         if (log.isInfoEnabled()) {
-            ArrayList<String> names=new ArrayList<String>();
+            ArrayList<String> names = new ArrayList<>();
             for(UIManager.LookAndFeelInfo laf : lfs) {
                 if (laf.getClassName().equals(jMeterLaf)) {
                     names.add(laf.getName());

File: src/core/org/apache/jmeter/gui/action/Move.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.jmeter.testelement.WorkBench;
 
 public class Move extends AbstractAction {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.MOVE_DOWN);

File: src/core/org/apache/jmeter/gui/action/Paste.java
Patch:
@@ -40,7 +40,7 @@ public class Paste extends AbstractAction {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.PASTE);

File: src/core/org/apache/jmeter/gui/action/RemoteStart.java
Patch:
@@ -41,7 +41,7 @@ public class RemoteStart extends AbstractAction {
 
     private static final String REMOTE_HOSTS_SEPARATOR = ","; // $NON-NLS-1$
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.REMOTE_START);
@@ -94,7 +94,7 @@ public void doAction(ActionEvent e) {
     private List<String> getRemoteHosts() {
         String remote_hosts_string = JMeterUtils.getPropDefault(REMOTE_HOSTS, LOCAL_HOST);
         StringTokenizer st = new StringTokenizer(remote_hosts_string, REMOTE_HOSTS_SEPARATOR);
-        List<String> list = new LinkedList<String>();
+        List<String> list = new LinkedList<>();
         while (st.hasMoreElements())
             list.add((String) st.nextElement());
         return list;

File: src/core/org/apache/jmeter/gui/action/Remove.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class Remove implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     // Whether to skip the delete confirmation dialogue
     private static final boolean SKIP_CONFIRM = JMeterUtils.getPropDefault("confirm.delete.skip", false); // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/action/ResetSearchCommand.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class ResetSearchCommand extends AbstractAction {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.SEARCH_RESET);

File: src/core/org/apache/jmeter/gui/action/RevertProject.java
Patch:
@@ -32,7 +32,7 @@
  *
  */
 public class RevertProject implements Command {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.REVERT_PROJECT);

File: src/core/org/apache/jmeter/gui/action/SSLManagerCommand.java
Patch:
@@ -55,7 +55,7 @@
 public class SSLManagerCommand implements Command {
     private static final Set<String> commandSet;
     static {
-        HashSet<String> commands = new HashSet<String>();
+        HashSet<String> commands = new HashSet<>();
         commands.add(ActionNames.SSL_MANAGER);
         commandSet = Collections.unmodifiableSet(commands);
     }

File: src/core/org/apache/jmeter/gui/action/SaveGraphics.java
Patch:
@@ -45,7 +45,7 @@
  */
 public class SaveGraphics implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.SAVE_GRAPHICS);

File: src/core/org/apache/jmeter/gui/action/SearchTreeCommand.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class SearchTreeCommand extends AbstractAction {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.SEARCH_TREE);

File: src/core/org/apache/jmeter/gui/action/SearchTreeDialog.java
Patch:
@@ -197,7 +197,7 @@ private void doSearch(ActionEvent e) {
         }
         GuiPackage guiPackage = GuiPackage.getInstance();
         JMeterTreeModel jMeterTreeModel = guiPackage.getTreeModel();
-        Set<JMeterTreeNode> nodes = new HashSet<JMeterTreeNode>();
+        Set<JMeterTreeNode> nodes = new HashSet<>();
         for (JMeterTreeNode jMeterTreeNode : jMeterTreeModel.getNodesOfType(Searchable.class)) {
             try {
                 if (jMeterTreeNode.getUserObject() instanceof Searchable){

File: src/core/org/apache/jmeter/gui/action/Start.java
Patch:
@@ -40,7 +40,7 @@
 public class Start extends AbstractAction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.ACTION_START);

File: src/core/org/apache/jmeter/gui/action/StopStoppables.java
Patch:
@@ -32,7 +32,7 @@
  * @since 2.5.1
  */
 public class StopStoppables extends AbstractAction implements ActionListener {
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.STOP_THREAD);

File: src/core/org/apache/jmeter/gui/action/TemplatesCommand.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class TemplatesCommand extends AbstractAction {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     // Ensure the dialog is only created when it is first needed
     // In turn this avoids scanning the templates until first needed

File: src/core/org/apache/jmeter/gui/action/ToolBar.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class ToolBar implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.TOOLBAR);

File: src/core/org/apache/jmeter/gui/action/UndoCommand.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class UndoCommand implements Command {
 
-    private static final Set<String> commands = new HashSet<String>();
+    private static final Set<String> commands = new HashSet<>();
 
     static {
         commands.add(ActionNames.UNDO);

File: src/core/org/apache/jmeter/gui/action/What.java
Patch:
@@ -47,7 +47,7 @@ public class What implements Command {
     private static final Set<String> commandSet;
 
     static {
-        HashSet<String> commands = new HashSet<String>();
+        HashSet<String> commands = new HashSet<>();
         commands.add(ActionNames.WHAT_CLASS);
         commands.add(ActionNames.DEBUG_ON);
         commands.add(ActionNames.DEBUG_OFF);

File: src/core/org/apache/jmeter/gui/action/template/TemplateManager.java
Patch:
@@ -41,7 +41,7 @@ private static class Templates {
          * N.B. Must use LinkedHashMap for field type
          * XStream creates a plain HashMap if one uses Map as the field type.
          */
-        private final LinkedHashMap<String, Template> templates = new LinkedHashMap<String, Template>();
+        private final LinkedHashMap<String, Template> templates = new LinkedHashMap<>();
     }
     private static final String TEMPLATE_FILES = JMeterUtils.getPropDefault("template.files", // $NON-NLS-1$
             "/bin/templates/templates.xml");
@@ -103,7 +103,7 @@ public String[] getTemplateNames() {
     }
 
     private Map<String, Template> readTemplates() {
-        final Map<String, Template> temps = new LinkedHashMap<String, Template>();
+        final Map<String, Template> temps = new LinkedHashMap<>();
        
         final String[] templateFiles = TEMPLATE_FILES.split(",");
         for (String templateFile : templateFiles) {

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeModel.java
Patch:
@@ -74,7 +74,7 @@ public JMeterTreeModel(Object o) {
      * @return a list of tree nodes of the given <code>type</code>, or an empty list
      */
     public List<JMeterTreeNode> getNodesOfType(Class<?> type) {
-        List<JMeterTreeNode> nodeList = new LinkedList<JMeterTreeNode>();
+        List<JMeterTreeNode> nodeList = new LinkedList<>();
         traverseAndFind(type, (JMeterTreeNode) this.getRoot(), nodeList);
         return nodeList;
     }

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -76,7 +76,7 @@ public void setEnabled(boolean enabled) {
      * @return {@link List} of {@link JMeterTreeNode}s
      */
     public List<JMeterTreeNode> getPathToThreadGroup() {
-        List<JMeterTreeNode> nodes = new ArrayList<JMeterTreeNode>();
+        List<JMeterTreeNode> nodes = new ArrayList<>();
         if(treeModel != null) {
             TreeNode[] nodesToRoot = treeModel.getPathToRoot(this);
             for (TreeNode node : nodesToRoot) {

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeTransferHandler.java
Patch:
@@ -234,7 +234,7 @@ public boolean importData(TransferHandler.TransferSupport support) {
         TreePath dest = dl.getPath();
         JMeterTreeNode target = (JMeterTreeNode) dest.getLastPathComponent();
        
-        nodesForRemoval = new ArrayList<JMeterTreeNode>();
+        nodesForRemoval = new ArrayList<>();
         int index = dl.getChildIndex();
         TreePath[] pathsToSelect = new TreePath[nodes.length];
         int pathPosition = 0;
@@ -253,7 +253,7 @@ public boolean importData(TransferHandler.TransferSupport support) {
             
             // first copy the children as the call to copy.add will modify the collection we're iterating on
             Enumeration<?> enumFrom = node.children();
-            List<JMeterTreeNode> tmp = new ArrayList<JMeterTreeNode>();
+            List<JMeterTreeNode> tmp = new ArrayList<>();
             while (enumFrom.hasMoreElements()) {
                 JMeterTreeNode child = (JMeterTreeNode) enumFrom.nextElement();
                 tmp.add(child);

File: src/core/org/apache/jmeter/gui/util/FileListPanel.java
Patch:
@@ -61,7 +61,7 @@ public class FileListPanel extends JPanel implements ActionListener {
 
     private JButton delete = new JButton(JMeterUtils.getResString("delete")); // $NON-NLS-1$
 
-    private List<ChangeListener> listeners = new LinkedList<ChangeListener>();
+    private List<ChangeListener> listeners = new LinkedList<>();
 
     private String title;
 

File: src/core/org/apache/jmeter/gui/util/FilePanelEntry.java
Patch:
@@ -46,7 +46,7 @@ public class FilePanelEntry extends HorizontalPanel implements ActionListener {
 
     private static final String ACTION_BROWSE = "browse"; //$NON-NLS-1$
 
-    private final List<ChangeListener> listeners = new LinkedList<ChangeListener>();
+    private final List<ChangeListener> listeners = new LinkedList<>();
 
     private final String[] filetypes;
 

File: src/core/org/apache/jmeter/gui/util/JLabeledRadioI18N.java
Patch:
@@ -52,7 +52,7 @@ public class JLabeledRadioI18N extends JPanel implements JLabeledField, ActionLi
 
     private final ButtonGroup bGroup = new ButtonGroup();
 
-    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<ChangeListener>(3);
+    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<>(3);
 
     /**
      *
@@ -129,7 +129,7 @@ private void initButtonGroup(String[] resouces, String selected) {
      */
     public void resetButtons(String[] resouces, String selected) {
         Enumeration<AbstractButton> buttons = bGroup.getElements();
-        List<AbstractButton> buttonsToRemove = new ArrayList<AbstractButton>(this.bGroup.getButtonCount());
+        List<AbstractButton> buttonsToRemove = new ArrayList<>(this.bGroup.getButtonCount());
         while (buttons.hasMoreElements()) {
             AbstractButton abstractButton = buttons
                     .nextElement();
@@ -206,7 +206,7 @@ private void notifyChangeListeners() {
      */
     @Override
     public List<JComponent> getComponentList() {
-        List<JComponent> comps = new LinkedList<JComponent>();
+        List<JComponent> comps = new LinkedList<>();
         comps.add(mLabel);
         Enumeration<AbstractButton> en = this.bGroup.getElements();
         while (en.hasMoreElements()) {

File: src/core/org/apache/jmeter/reporters/AbstractListenerElement.java
Patch:
@@ -44,7 +44,7 @@ protected final Visualizer getVisualizer() {
     }
 
     public void setListener(Visualizer vis) {
-        listener = new WeakReference<Visualizer>(vis);
+        listener = new WeakReference<>(vis);
     }
 
     @Override

File: src/core/org/apache/jmeter/reporters/FileReporter.java
Patch:
@@ -55,7 +55,7 @@ public class FileReporter extends JPanel {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private final Map<String, List<Integer>> data = new ConcurrentHashMap<String, List<Integer>>();
+    private final Map<String, List<Integer>> data = new ConcurrentHashMap<>();
 
     /**
      * Initialize a file reporter from a file

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -105,7 +105,7 @@ public class ResultCollector extends AbstractListenerElement implements SampleLi
     private static final Object LOCK = new Object();
 
     //@GuardedBy("LOCK")
-    private static final Map<String, FileEntry> files = new HashMap<String, FileEntry>();
+    private static final Map<String, FileEntry> files = new HashMap<>();
 
     /**
      * Shutdown Hook that ensures PrintWriter is flushed is CTRL+C or kill is called during a test

File: src/core/org/apache/jmeter/reporters/Summariser.java
Patch:
@@ -95,7 +95,7 @@ public class Summariser extends AbstractTestElement
      * This map allows summarisers with the same name to contribute to the same totals.
      */
     //@GuardedBy("LOCK") - needed to ensure consistency between this and INSTANCE_COUNT
-    private static final Map<String, Totals> ACCUMULATORS = new ConcurrentHashMap<String, Totals>();
+    private static final Map<String, Totals> ACCUMULATORS = new ConcurrentHashMap<>();
 
     //@GuardedBy("LOCK")
     private static int INSTANCE_COUNT; // number of active tests

File: src/core/org/apache/jmeter/samplers/AsynchSampleSender.java
Patch:
@@ -67,7 +67,7 @@ public class AsynchSampleSender extends AbstractSampleSender implements Serializ
     private Object readResolve() throws ObjectStreamException{
         int capacity = getCapacity();
         log.info("Using batch queue size (asynch.batch.queue.size): " + capacity); // server log file
-        queue = new ArrayBlockingQueue<SampleEvent>(capacity);        
+        queue = new ArrayBlockingQueue<>(capacity);
         Worker worker = new Worker(queue, listener);
         worker.setDaemon(true);
         worker.start();
@@ -142,7 +142,7 @@ public void run() {
             try {
                 boolean eof = false;
                 while (!eof) {
-                    List<SampleEvent> l = new ArrayList<SampleEvent>();
+                    List<SampleEvent> l = new ArrayList<>();
                     SampleEvent e = queue.take();
                     while (!(eof = (e == FINAL_EVENT)) && e != null) { // try to process as many as possible
                         l.add(e);

File: src/core/org/apache/jmeter/samplers/BatchSampleSender.java
Patch:
@@ -57,7 +57,7 @@ public class BatchSampleSender extends AbstractSampleSender implements Serializa
 
     private final RemoteSampleListener listener;
 
-    private final List<SampleEvent> sampleStore = new ArrayList<SampleEvent>();
+    private final List<SampleEvent> sampleStore = new ArrayList<>();
 
     // Server-only work item
     private transient long batchSendTime = -1;

File: src/core/org/apache/jmeter/samplers/Entry.java
Patch:
@@ -37,9 +37,9 @@ public class Entry {
     private List<Assertion> assertions;
 
     public Entry() {
-        configSet = new HashMap<Class<?>, ConfigElement>();
+        configSet = new HashMap<>();
         // clonedSet = new HashSet();
-        assertions = new LinkedList<Assertion>();
+        assertions = new LinkedList<>();
     }
 
     public void addAssertion(Assertion assertion) {

File: src/core/org/apache/jmeter/samplers/HoldSampleSender.java
Patch:
@@ -36,7 +36,7 @@ public class HoldSampleSender extends AbstractSampleSender implements Serializab
 
     private static final long serialVersionUID = 240L;
 
-    private final List<SampleEvent> sampleStore = new ArrayList<SampleEvent>();
+    private final List<SampleEvent> sampleStore = new ArrayList<>();
 
     private final RemoteSampleListener listener;
 

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -175,7 +175,7 @@ public SampleSaveConfiguration getSaveConfig() {
     /** In Non GUI mode and when best config is used, size never exceeds 1, 
      * but as a compromise set it to 3 
      */
-    private final Set<String> files = new HashSet<String>(3);
+    private final Set<String> files = new HashSet<>(3);
 
     private String dataEncoding;// (is this really the character set?) e.g.
                                 // ISO-8895-1, UTF-8
@@ -569,7 +569,7 @@ public void setSampleLabel(String label) {
 
     public void addAssertionResult(AssertionResult assertResult) {
         if (assertionResults == null) {
-            assertionResults = new ArrayList<AssertionResult>();
+            assertionResults = new ArrayList<>();
         }
         assertionResults.add(assertResult);
     }
@@ -636,7 +636,7 @@ public void addRawSubResult(SampleResult subResult){
      */
     public void storeSubResult(SampleResult subResult) {
         if (subResults == null) {
-            subResults = new ArrayList<SampleResult>();
+            subResults = new ArrayList<>();
         }
         subResults.add(subResult);
         subResult.setParent(this);

File: src/core/org/apache/jmeter/samplers/StatisticalSampleSender.java
Patch:
@@ -68,10 +68,10 @@ public class StatisticalSampleSender extends AbstractSampleSender implements Ser
 
     private final RemoteSampleListener listener;
 
-    private final List<SampleEvent> sampleStore = new ArrayList<SampleEvent>();
+    private final List<SampleEvent> sampleStore = new ArrayList<>();
 
     //@GuardedBy("sampleStore") TODO perhaps use ConcurrentHashMap ?
-    private final Map<String, StatisticalSampleResult> sampleTable = new HashMap<String, StatisticalSampleResult>();
+    private final Map<String, StatisticalSampleResult> sampleTable = new HashMap<>();
 
     // Settings; readResolve sets these from the server/client values as appropriate
     // TODO would be nice to make these final; not 100% sure volatile is needed as not changed after creation

File: src/core/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -1045,7 +1045,7 @@ public static String[] csvReadFile(BufferedReader infile, char delim)
             throws IOException {
         int ch;
         ParserState state = ParserState.INITIAL;
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         CharArrayWriter baos = new CharArrayWriter(200);
         boolean push = false;
         while (-1 != (ch = infile.read())) {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -422,7 +422,7 @@ static boolean checkFileVersion(){
     // Allow test code to check for spurious class references
     static List<String> checkClasses(){
         final ClassLoader classLoader = SaveService.class.getClassLoader();
-        List<String> missingClasses = new ArrayList<String>();
+        List<String> missingClasses = new ArrayList<>();
         //boolean OK = true;
         for (Object clazz : classToAlias.keySet()) {
             String name = (String) clazz;

File: src/core/org/apache/jmeter/save/converters/ConversionHelp.java
Patch:
@@ -147,7 +147,7 @@ public static String cdata(byte[] chars, String encoding) throws UnsupportedEnco
     /**
      *  Names of properties that are handled specially
      */
-    private static final Map<String, String> propertyToAttribute=new HashMap<String, String>();
+    private static final Map<String, String> propertyToAttribute = new HashMap<>();
 
     private static void mapentry(String prop, String att){
         propertyToAttribute.put(prop,att);

File: src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java
Patch:
@@ -85,7 +85,7 @@ public void marshal(Object arg0, HierarchicalStreamWriter arg1, MarshallingConte
     @Override
     public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
         TestResultWrapper results = new TestResultWrapper();
-        Collection<SampleResult> samples = new ArrayList<SampleResult>();
+        Collection<SampleResult> samples = new ArrayList<>();
         String ver = reader.getAttribute("version");  //$NON-NLS-1$
         if (ver == null || ver.length() == 0) {
             ver = "1.0";  //$NON-NLS-1$

File: src/core/org/apache/jmeter/services/FileServer.java
Patch:
@@ -79,7 +79,7 @@ public class FileServer {
     private File base;
 
     //@GuardedBy("this") NOTE this also guards against possible window in checkForOpenFiles()
-    private final Map<String, FileEntry> files = new HashMap<String, FileEntry>();
+    private final Map<String, FileEntry> files = new HashMap<>();
 
     private static final FileServer server = new FileServer();
 

File: src/core/org/apache/jmeter/testbeans/TestBeanHelper.java
Patch:
@@ -137,7 +137,7 @@ private static Object unwrapCollection(MultiProperty prop,String type)
     {
         if(prop instanceof CollectionProperty)
         {
-            Collection<Object> values = new LinkedList<Object>();
+            Collection<Object> values = new LinkedList<>();
             PropertyIterator iter = prop.iterator();
             while(iter.hasNext())
             {

File: src/core/org/apache/jmeter/testbeans/gui/ComboStringEditor.java
Patch:
@@ -113,7 +113,7 @@ class ComboStringEditor extends PropertyEditorSupport implements ItemListener, C
         model = new DefaultComboBoxModel<>();
 
         if (rb != null && tags.length > 0) {
-            validTranslations=new HashMap<String, String>();
+            validTranslations = new HashMap<>();
             for (String tag : this.tags) {
                 validTranslations.put(tag, rb.getString(tag));
             }

File: src/core/org/apache/jmeter/testbeans/gui/TableEditor.java
Patch:
@@ -138,7 +138,7 @@ public void setValue(Object value) {
 
     private Collection<Object> convertCollection(Collection<?> values)
     {
-        List<Object> l = new LinkedList<Object>();
+        List<Object> l = new LinkedList<>();
         for(Object obj : values)
         {
             if(obj instanceof TestElementProperty)

File: src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
Patch:
@@ -122,15 +122,15 @@ public class TestBeanGUI extends AbstractJMeterGuiComponent implements JMeterGUI
     /**
      * The property name to value map that the active customizer edits:
      */
-    private final Map<String, Object> propertyMap = new HashMap<String, Object>();
+    private final Map<String, Object> propertyMap = new HashMap<>();
 
     /**
      * Whether the GUI components have been created.
      */
     private boolean initialized = false;
 
     static {
-        List<String> paths = new LinkedList<String>();
+        List<String> paths = new LinkedList<>();
         paths.add("org.apache.jmeter.testbeans.gui");// $NON-NLS-1$
         paths.addAll(Arrays.asList(PropertyEditorManager.getEditorSearchPath()));
         String s = JMeterUtils.getPropDefault("propertyEditorSearchPath", null);// $NON-NLS-1$
@@ -356,7 +356,7 @@ private void setValues(TestElement element) {
     /** {@inheritDoc} */
     @Override
     public Collection<String> getMenuCategories() {
-        List<String> menuCategories = new LinkedList<String>();
+        List<String> menuCategories = new LinkedList<>();
         BeanDescriptor bd = beanInfo.getBeanDescriptor();
 
         // We don't want to show expert beans in the menus unless we're

File: src/core/org/apache/jmeter/testelement/AbstractScopedTestElement.java
Patch:
@@ -150,7 +150,7 @@ public void setScopeVariable(String variableName) {
      * @return list containing the current sample and/or its child samples
      */
     protected List<SampleResult> getSampleList(SampleResult result) {
-        List<SampleResult> sampleList = new ArrayList<SampleResult>();
+        List<SampleResult> sampleList = new ArrayList<>();
 
         String scope = fetchScope();
         if (isScopeParent(scope) || isScopeAll(scope)) {

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -535,7 +535,7 @@ public boolean isTemporary(JMeterProperty property) {
     @Override
     public void setTemporary(JMeterProperty property) {
         if (temporaryProperties == null) {
-            temporaryProperties = new LinkedHashSet<JMeterProperty>();
+            temporaryProperties = new LinkedHashSet<>();
         }
         temporaryProperties.add(property);
         if (property instanceof MultiProperty) {
@@ -629,7 +629,7 @@ public void setEnabled(boolean enabled) {
      */
     @Override
     public List<String> getSearchableTokens() {
-        List<String> result = new ArrayList<String>(25);
+        List<String> result = new ArrayList<>(25);
         PropertyIterator iterator = propertyIterator();
         while(iterator.hasNext()) {
             JMeterProperty jMeterProperty = iterator.next();    

File: src/core/org/apache/jmeter/testelement/TestPlan.java
Patch:
@@ -57,7 +57,7 @@ public class TestPlan extends AbstractTestElement implements Serializable, TestS
 
     private static final String BASEDIR = "basedir";
 
-    private transient List<AbstractThreadGroup> threadGroups = new LinkedList<AbstractThreadGroup>();
+    private transient List<AbstractThreadGroup> threadGroups = new LinkedList<>();
 
     // There's only 1 test plan, so can cache the mode here
     private static volatile boolean functionalMode = false;
@@ -76,7 +76,7 @@ public TestPlan(String name) {
 
     // create transient item
     private Object readResolve(){
-        threadGroups = new LinkedList<AbstractThreadGroup>();
+        threadGroups = new LinkedList<>();
         return this;
     }
 

File: src/core/org/apache/jmeter/testelement/VariablesCollection.java
Patch:
@@ -31,7 +31,7 @@ public class VariablesCollection implements Serializable {
 
     private static final long serialVersionUID = 240L;
 
-    private final Map<String, JMeterVariables> varMap = new HashMap<String, JMeterVariables>();
+    private final Map<String, JMeterVariables> varMap = new HashMap<>();
 
     public void addJMeterVariables(JMeterVariables jmVars) {
         varMap.put(Thread.currentThread().getName(), jmVars);

File: src/core/org/apache/jmeter/testelement/property/CollectionProperty.java
Patch:
@@ -39,7 +39,7 @@ public CollectionProperty(String name, Collection<?> value) {
 
     public CollectionProperty() {
         super();
-        value = new ArrayList<JMeterProperty>();
+        value = new ArrayList<>();
     }
 
     @Override

File: src/core/org/apache/jmeter/threads/FindTestElementsUpToRootTraverser.java
Patch:
@@ -36,7 +36,7 @@
 public class FindTestElementsUpToRootTraverser implements HashTreeTraverser {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private final LinkedList<TestElement> stack = new LinkedList<TestElement>();
+    private final LinkedList<TestElement> stack = new LinkedList<>();
 
     /**
      * Node to find in TestTree
@@ -89,8 +89,8 @@ public void processPath() {
      * @return List of {@link Controller}
      */
     public List<Controller> getControllersToRoot() {
-        List<Controller> result = new ArrayList<Controller>(stack.size());
-        LinkedList<TestElement> stackLocalCopy = new LinkedList<TestElement>(stack);
+        List<Controller> result = new ArrayList<>(stack.size());
+        LinkedList<TestElement> stackLocalCopy = new LinkedList<>(stack);
         while(stackLocalCopy.size()>0) {
             TestElement te = stackLocalCopy.getLast();
             if(te instanceof Controller) {

File: src/core/org/apache/jmeter/threads/JMeterContext.java
Patch:
@@ -52,7 +52,7 @@ public class JMeterContext {
 
     private boolean restartNextLoop = false;
 
-    private ConcurrentHashMap<String, Object> samplerContext = new ConcurrentHashMap<String, Object>(5);
+    private ConcurrentHashMap<String, Object> samplerContext = new ConcurrentHashMap<>(5);
 
     JMeterContext() {
         clear0();

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -140,7 +140,7 @@ public JMeterThread(HashTree test, JMeterThreadMonitor monitor, ListenerNotifier
         testTree = test;
         compiler = new TestCompiler(testTree);
         controller = (Controller) testTree.getArray()[0];
-        SearchByClass<TestIterationListener> threadListenerSearcher = new SearchByClass<TestIterationListener>(TestIterationListener.class); // TL - IS
+        SearchByClass<TestIterationListener> threadListenerSearcher = new SearchByClass<>(TestIterationListener.class); // TL - IS
         test.traverse(threadListenerSearcher);
         testIterationStartListeners = threadListenerSearcher.getSearchResults();
         notifier = note;
@@ -510,7 +510,7 @@ private List<SampleListener> getSampleListeners(SamplePackage samplePack, Sample
         List<SampleListener> sampleListeners = samplePack.getSampleListeners();
         // Do not send subsamples to listeners which receive the transaction sample
         if(transactionSampler != null) {
-            ArrayList<SampleListener> onlySubSamplerListeners = new ArrayList<SampleListener>();
+            ArrayList<SampleListener> onlySubSamplerListeners = new ArrayList<>();
             List<SampleListener> transListeners = transactionPack.getSampleListeners();
             for(SampleListener listener : sampleListeners) {
                 // Check if this instance is present in transaction listener list

File: src/core/org/apache/jmeter/threads/JMeterVariables.java
Patch:
@@ -32,7 +32,7 @@
  * These are similar to properties, but they are local to a single thread.
  */
 public class JMeterVariables {
-    private final Map<String, Object> variables = new HashMap<String, Object>();
+    private final Map<String, Object> variables = new HashMap<>();
 
     private int iteration = 0;
 

File: src/core/org/apache/jmeter/threads/RemoteThreadsListenerImpl.java
Patch:
@@ -39,7 +39,7 @@
 public class RemoteThreadsListenerImpl extends UnicastRemoteObject implements
         RemoteThreadsListener, ThreadListener {
     private static final Logger log = LoggingManager.getLoggerForClass();
-    private final List<RemoteThreadsLifeCycleListener> listeners = new ArrayList<RemoteThreadsLifeCycleListener>();
+    private final List<RemoteThreadsLifeCycleListener> listeners = new ArrayList<>();
 
     /**
      * 

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -77,7 +77,7 @@ public class ThreadGroup extends AbstractThreadGroup {
     private transient Thread threadStarter;
 
     // List of active threads
-    private final Map<JMeterThread, Thread> allThreads = new ConcurrentHashMap<JMeterThread, Thread>();
+    private final Map<JMeterThread, Thread> allThreads = new ConcurrentHashMap<>();
 
     /**
      * Is test (still) running?

File: src/core/org/apache/jmeter/util/JSR223BeanInfoSupport.java
Patch:
@@ -41,7 +41,7 @@ public abstract class JSR223BeanInfoSupport extends ScriptingBeanInfoSupport {
     public static final String[][] LANGUAGE_NAMES;
 
     static {
-        Map<String, ScriptEngineFactory> nameMap = new HashMap<String, ScriptEngineFactory>();
+        Map<String, ScriptEngineFactory> nameMap = new HashMap<>();
         ScriptEngineManager sem = new ScriptEngineManager();
         final List<ScriptEngineFactory> engineFactories = sem.getEngineFactories();
         for(ScriptEngineFactory fact : engineFactories){

File: src/core/org/apache/jmeter/util/JsseSSLManager.java
Patch:
@@ -112,7 +112,7 @@ public JsseSSLManager(Provider provider) {
                 log.debug("Creating shared context");
                 this.defaultContext = createContext();
             } else {
-                this.threadlocal = new ThreadLocal<SSLContext>();
+                this.threadlocal = new ThreadLocal<>();
             }
 
             HttpsURLConnection.setDefaultSSLSocketFactory(new HttpSSLProtocolSocketFactory(this, CPS));

File: src/core/org/apache/jmeter/util/PropertiesBasedPrefixResolver.java
Patch:
@@ -41,7 +41,7 @@
 public class PropertiesBasedPrefixResolver extends PrefixResolverDefault {
     private static final Logger logger = LoggingManager.getLoggerForClass();
     private static final String XPATH_NAMESPACE_CONFIG = "xpath.namespace.config";
-    private static final Map<String, String> NAMESPACE_MAP = new HashMap<String, String>();
+    private static final Map<String, String> NAMESPACE_MAP = new HashMap<>();
     static {
         String pathToNamespaceConfig = JMeterUtils.getPropDefault(XPATH_NAMESPACE_CONFIG, "");
         if(!StringUtils.isEmpty(pathToNamespaceConfig)) {

File: src/functions/org/apache/jmeter/functions/AbstractHostIPName.java
Patch:
@@ -30,7 +30,7 @@
 
 abstract class AbstractHostIPName extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     static {
         // desc.add("Use fully qualified host name: TRUE/FALSE (Default FALSE)");

File: src/functions/org/apache/jmeter/functions/BeanShell.java
Patch:
@@ -41,7 +41,7 @@ public class BeanShell extends AbstractFunction {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__BeanShell"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/CSVRead.java
Patch:
@@ -55,7 +55,7 @@ public class CSVRead extends AbstractFunction {
 
     private static final String KEY = "__CSVRead"; // Function name //$NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private Object[] values; // Parameter list
 

File: src/functions/org/apache/jmeter/functions/CharFunction.java
Patch:
@@ -37,7 +37,7 @@ public class CharFunction extends AbstractFunction {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__char"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/EscapeHtml.java
Patch:
@@ -49,7 +49,7 @@
  */
 public class EscapeHtml extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__escapeHtml"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/EscapeOroRegexpChars.java
Patch:
@@ -38,7 +38,7 @@
 public class EscapeOroRegexpChars extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__escapeOroRegexpChars"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/EvalFunction.java
Patch:
@@ -39,7 +39,7 @@
  */
 public class EvalFunction extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__eval"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/EvalVarFunction.java
Patch:
@@ -44,7 +44,7 @@ public class EvalVarFunction extends AbstractFunction {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__evalVar"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/FileRowColContainer.java
Patch:
@@ -58,7 +58,7 @@ public FileRowColContainer(String file, String delim) throws IOException, FileNo
         fileName = file;
         delimiter = delim;
         nextRow = 0;
-        fileData = new ArrayList<List<String>>();
+        fileData = new ArrayList<>();
         load();
     }
 
@@ -67,7 +67,7 @@ public FileRowColContainer(String file) throws IOException, FileNotFoundExceptio
         fileName = file;
         delimiter = DELIMITER;
         nextRow = 0;
-        fileData = new ArrayList<List<String>>();
+        fileData = new ArrayList<>();
         load();
     }
 
@@ -144,7 +144,7 @@ public int nextRow() {
      *         the line
      */
     private static List<String> splitLine(String theLine, String delim) {
-        ArrayList<String> result = new ArrayList<String>();
+        ArrayList<String> result = new ArrayList<>();
         StringTokenizer tokener = new StringTokenizer(theLine, delim, true);
         /*
          * the beginning of the line is a "delimiter" so that ,a,b,c returns ""

File: src/functions/org/apache/jmeter/functions/FileToString.java
Patch:
@@ -51,7 +51,7 @@
 public class FileToString extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__FileToString";//$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/FileWrapper.java
Patch:
@@ -48,15 +48,14 @@ public final class FileWrapper {
      * - maps file names to  containers
      * - ensures only one container per file across all threads
      */
-    private static final Map<String, FileRowColContainer> fileContainers =
-        new HashMap<String, FileRowColContainer>();
+    private static final Map<String, FileRowColContainer> fileContainers = new HashMap<>();
 
     /* The cache of file packs - used to improve thread access */
     private static final ThreadLocal<Map<String, FileWrapper>> filePacks = 
         new ThreadLocal<Map<String, FileWrapper>>() {
         @Override
         protected Map<String, FileWrapper> initialValue() {
-            return new HashMap<String, FileWrapper>();
+            return new HashMap<>();
         }
     };
 

File: src/functions/org/apache/jmeter/functions/IntSum.java
Patch:
@@ -35,7 +35,7 @@
  * @since 1.8.1
  */
 public class IntSum extends AbstractFunction {
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__intSum"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/IterationCounter.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class IterationCounter extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__counter"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/JavaScript.java
Patch:
@@ -41,7 +41,7 @@
  */
 public class JavaScript extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__javaScript"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/Jexl2Function.java
Patch:
@@ -46,9 +46,9 @@ public class Jexl2Function extends AbstractFunction implements ThreadListener {
 
     private static final String KEY = "__jexl2"; //$NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
-    private static final ThreadLocal<JexlEngine> threadLocalJexl = new ThreadLocal<JexlEngine>();
+    private static final ThreadLocal<JexlEngine> threadLocalJexl = new ThreadLocal<>();
 
     static
     {

File: src/functions/org/apache/jmeter/functions/JexlFunction.java
Patch:
@@ -46,7 +46,7 @@ public class JexlFunction extends AbstractFunction {
 
     private static final String KEY = "__jexl"; //$NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     static
     {

File: src/functions/org/apache/jmeter/functions/LogFunction.java
Patch:
@@ -49,7 +49,7 @@
 public class LogFunction extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__log"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/LogFunction2.java
Patch:
@@ -47,7 +47,7 @@
 public class LogFunction2 extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__logn"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/LongSum.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class LongSum extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__longSum"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/Property.java
Patch:
@@ -44,7 +44,7 @@
  */
 public class Property extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__property"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/Property2.java
Patch:
@@ -49,7 +49,7 @@
  */
 public class Property2 extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__P"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/Random.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class Random extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
     private static final String KEY = "__Random"; //$NON-NLS-1$
 
     static {

File: src/functions/org/apache/jmeter/functions/RandomString.java
Patch:
@@ -40,7 +40,7 @@
 public class RandomString extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__RandomString"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/SamplerName.java
Patch:
@@ -36,7 +36,7 @@ public class SamplerName extends AbstractFunction {
 
     private static final String KEY = "__samplerName"; //$NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     static {
         // desc.add("Use fully qualified host name: TRUE/FALSE (Default FALSE)");

File: src/functions/org/apache/jmeter/functions/SetProperty.java
Patch:
@@ -43,7 +43,7 @@
  */
 public class SetProperty extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__setProperty"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/SplitFunction.java
Patch:
@@ -57,7 +57,7 @@
 public class SplitFunction extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__split";// $NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/StringFromFile.java
Patch:
@@ -67,7 +67,7 @@ public class StringFromFile extends AbstractFunction implements TestStateListene
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     // Only modified by static block so no need to synchronize subsequent read-only access
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__StringFromFile";//$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/TestPlanName.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class TestPlanName extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__TestPlanName"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/ThreadNumber.java
Patch:
@@ -34,7 +34,7 @@ public class ThreadNumber extends AbstractFunction {
 
     private static final String KEY = "__threadNum"; //$NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     /** {@inheritDoc} */
     @Override

File: src/functions/org/apache/jmeter/functions/TimeFunction.java
Patch:
@@ -42,10 +42,10 @@ public class TimeFunction extends AbstractFunction {
 
     private static final String KEY = "__time"; // $NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     // Only modified in class init
-    private static final Map<String, String> aliases = new HashMap<String, String>();
+    private static final Map<String, String> aliases = new HashMap<>();
 
     static {
         desc.add(JMeterUtils.getResString("time_format")); //$NON-NLS-1$

File: src/functions/org/apache/jmeter/functions/UnEscape.java
Patch:
@@ -39,7 +39,7 @@
  */
 public class UnEscape extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__unescape"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/UnEscapeHtml.java
Patch:
@@ -45,7 +45,7 @@
  */
 public class UnEscapeHtml extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__unescapeHtml"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/UrlDecode.java
Patch:
@@ -39,7 +39,7 @@ public class UrlDecode extends AbstractFunction {
 
     private static final String CHARSET_ENCODING = "UTF-8"; //$NON-NLS-1$
     
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__urldecode"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/UrlEncode.java
Patch:
@@ -39,7 +39,7 @@ public class UrlEncode extends AbstractFunction {
 
     private static final String CHARSET_ENCODING = "UTF-8"; //$NON-NLS-1$
     
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__urlencode"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/Uuid.java
Patch:
@@ -39,7 +39,7 @@
  */
 public class Uuid extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__UUID"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/Variable.java
Patch:
@@ -41,7 +41,7 @@
  */
 public class Variable extends AbstractFunction {
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private static final String KEY = "__V"; //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/XPath.java
Patch:
@@ -54,7 +54,7 @@ public class XPath extends AbstractFunction {
     // }
     private static final String KEY = "__XPath"; // Function name //$NON-NLS-1$
 
-    private static final List<String> desc = new LinkedList<String>();
+    private static final List<String> desc = new LinkedList<>();
 
     private Object[] values; // Parameter list
 

File: src/functions/org/apache/jmeter/functions/XPathWrapper.java
Patch:
@@ -50,14 +50,14 @@ final class XPathWrapper {
      */
     //@GuardedBy("fileContainers")
     private static final Map<String, XPathFileContainer> fileContainers =
-        new HashMap<String, XPathFileContainer>();
+            new HashMap<>();
 
     /* The cache of file packs - for faster local access */
     private static final ThreadLocal<Map<String, XPathFileContainer>> filePacks =
         new ThreadLocal<Map<String, XPathFileContainer>>() {
         @Override
         protected Map<String, XPathFileContainer> initialValue() {
-            return new HashMap<String, XPathFileContainer>();
+            return new HashMap<>();
         }
     };
 

File: src/jorphan/org/apache/commons/cli/avalon/CLArgsParser.java
Patch:
@@ -223,7 +223,7 @@ private final int getStateFor(final CLOptionDescriptor descriptor) {
     public CLArgsParser(final String[] args, final CLOptionDescriptor[] optionDescriptors, final ParserControl control) {
         m_optionDescriptors = optionDescriptors;
         m_control = control;
-        m_options = new Vector<CLOption>();
+        m_options = new Vector<>();
         m_args = args;
 
         try {
@@ -666,7 +666,7 @@ private final void parseNormal() throws ParseException {
      */
     private final void buildOptionIndex() {
         final int size = m_options.size();
-        m_optionIndex = new Hashtable<Object, CLOption>(size * 2);
+        m_optionIndex = new Hashtable<>(size * 2);
 
         for (int i = 0; i < size; i++) {
             final CLOption option = m_options.get(i);

File: src/jorphan/org/apache/jorphan/collections/HashTree.java
Patch:
@@ -98,7 +98,7 @@ private HashTree(Map<Object, HashTree> _map, Object key) {
         if(_map != null) {
             data = _map;
         } else {
-            data = new HashMap<Object, HashTree>();
+            data = new HashMap<>();
         }
         if(key != null) {
             data.put(key, new HashTree());
@@ -215,7 +215,7 @@ public void add(HashTree newTree) {
      *            a collection of objects to be added to the created HashTree.
      */
     public HashTree(Collection<?> keys) {
-        data = new HashMap<Object, HashTree>();
+        data = new HashMap<>();
         for (Object o : keys) {
             data.put(o, new HashTree());
         }
@@ -229,7 +229,7 @@ public HashTree(Collection<?> keys) {
      *            array with names for the new top-level nodes
      */
     public HashTree(Object[] keys) {
-        data = new HashMap<Object, HashTree>();
+        data = new HashMap<>();
         for (int x = 0; x < keys.length; x++) {
             data.put(keys[x], new HashTree());
         }

File: src/jorphan/org/apache/jorphan/collections/ListedHashTree.java
Patch:
@@ -45,7 +45,7 @@ public class ListedHashTree extends HashTree implements Serializable, Cloneable
 
     public ListedHashTree() {
         super();
-        order = new LinkedList<Object>();
+        order = new LinkedList<>();
     }
 
     public ListedHashTree(Object key) {

File: src/jorphan/org/apache/jorphan/collections/SearchByClass.java
Patch:
@@ -54,9 +54,9 @@
  *            Class that should be searched for
  */
 public class SearchByClass<T> implements HashTreeTraverser {
-    private final List<T> objectsOfClass = new LinkedList<T>();
+    private final List<T> objectsOfClass = new LinkedList<>();
 
-    private final Map<Object, ListedHashTree> subTrees = new HashMap<Object, ListedHashTree>();
+    private final Map<Object, ListedHashTree> subTrees = new HashMap<>();
 
     private final Class<T> searchClass;
 

File: src/jorphan/org/apache/jorphan/gui/GuiUtils.java
Patch:
@@ -125,7 +125,7 @@ public static String getPastedText() throws UnsupportedFlavorException, IOExcept
         Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
         Transferable trans = clipboard.getContents(null);
         DataFlavor[] flavourList = trans.getTransferDataFlavors();
-        Collection<DataFlavor> flavours = new ArrayList<DataFlavor>(flavourList.length);
+        Collection<DataFlavor> flavours = new ArrayList<>(flavourList.length);
         if (Collections.addAll(flavours, flavourList) && flavours.contains(DataFlavor.stringFlavor)) {
             return (String) trans.getTransferData(DataFlavor.stringFlavor);
         } else {

File: src/jorphan/org/apache/jorphan/gui/JLabeledChoice.java
Patch:
@@ -43,7 +43,7 @@ public class JLabeledChoice extends JPanel implements JLabeledField {
     private final JComboBox<String> choiceList;
 
     // Maybe move to vector if MT problems occur
-    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<ChangeListener>(3);
+    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<>(3);
 
     private JButton delete, add;
 
@@ -95,7 +95,7 @@ public JLabeledChoice(String pLabel, String[] items, boolean editable) {
      */
     @Override
     public List<JComponent> getComponentList() {
-        List<JComponent> comps = new LinkedList<JComponent>();
+        List<JComponent> comps = new LinkedList<>();
         comps.add(mLabel);
         comps.add(choiceList);
         return comps;

File: src/jorphan/org/apache/jorphan/gui/JLabeledTextArea.java
Patch:
@@ -50,7 +50,7 @@ public class JLabeledTextArea extends JPanel implements JLabeledField, FocusList
     private final JTextArea mTextArea;
 
     // Maybe move to vector if MT problems occur
-    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<ChangeListener>(3);
+    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<>(3);
 
     // A temporary cache for the focus listener
     private String oldValue = "";
@@ -94,7 +94,7 @@ public JLabeledTextArea(String pLabel, Document docModel) {
      */
     @Override
     public List<JComponent> getComponentList() {
-        List<JComponent> comps = new LinkedList<JComponent>();
+        List<JComponent> comps = new LinkedList<>();
         comps.add(mLabel);
         comps.add(mTextArea);
         return comps;

File: src/jorphan/org/apache/jorphan/gui/JLabeledTextField.java
Patch:
@@ -49,7 +49,7 @@ public class JLabeledTextField extends JPanel implements JLabeledField, FocusLis
     private JTextField mTextField;
 
     // Maybe move to vector if MT problems occur
-    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<ChangeListener>(3);
+    private final ArrayList<ChangeListener> mChangeListeners = new ArrayList<>(3);
 
     // A temporary cache for the focus listener
     private String oldValue = "";
@@ -94,7 +94,7 @@ public JLabeledTextField(String pLabel, Color bk) {
      */
     @Override
     public List<JComponent> getComponentList() {
-        List<JComponent> comps = new LinkedList<JComponent>();
+        List<JComponent> comps = new LinkedList<>();
         comps.add(mLabel);
         comps.add(mTextField);
         return comps;

File: src/jorphan/org/apache/jorphan/math/StatCalculator.java
Patch:
@@ -36,7 +36,7 @@
 public abstract class StatCalculator<T extends Number & Comparable<? super T>> {
 
     // key is the type to collect (usually long), value = count of entries
-    private final Map<T, MutableLong> valuesMap = new TreeMap<T, MutableLong>();
+    private final Map<T, MutableLong> valuesMap = new TreeMap<>();
     // We use a TreeMap because we need the entries to be sorted
 
     // Running values, updated for each sample
@@ -165,7 +165,7 @@ public T getPercentPoint(double percent) {
      * TODO - why is the key value also stored in the entry array? See Bug 53825
      */
     public Map<Number, Number[]> getDistribution() {
-        Map<Number, Number[]> items = new HashMap<Number, Number[]>();
+        Map<Number, Number[]> items = new HashMap<>();
 
         for (Entry<T, MutableLong> entry : valuesMap.entrySet()) {
             Number[] dis = new Number[2];

File: src/jorphan/org/apache/jorphan/reflect/ClassFinder.java
Patch:
@@ -167,7 +167,7 @@ public static List<String> findClassesThatExtend(String[] paths, Class<?>[] supe
 
     // For each directory in the search path, add all the jars found there
     private static String[] addJarsInPath(String[] paths) {
-        Set<String> fullList = new HashSet<String>();
+        Set<String> fullList = new HashSet<>();
         for (int i = 0; i < paths.length; i++) {
             final String path = paths[i];
             fullList.add(path); // Keep the unexpanded path
@@ -317,7 +317,7 @@ public static List<String> findClassesThatExtend(String[] searchPathsOrJars,
 //            }
 //        }
 
-        return new ArrayList<String>(listClasses);//subClassList);
+        return new ArrayList<>(listClasses);//subClassList);
     }
 
     /*
@@ -335,7 +335,7 @@ private static List<String> getClasspathMatches(String[] strPathsOrJars) {
         }
 
         // find all jar files or paths that end with strPathOrJar
-        ArrayList<String> listPaths = new ArrayList<String>();
+        ArrayList<String> listPaths = new ArrayList<>();
         String strPath = null;
         while (stPaths.hasMoreTokens()) {
             strPath = fixPathEntry(stPaths.nextToken());

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -92,7 +92,7 @@ public static String[] split(String splittee, String splitChar,boolean truncate)
                 splittee = splittee.substring(0,splittee.length()-splitLength);
             }
         }
-        List<String> returns = new ArrayList<String>();
+        List<String> returns = new ArrayList<>();
         final int length = splittee.length(); // This is the new length
         int start = 0;
         spot = 0;
@@ -145,7 +145,7 @@ public static String[] split(String splittee,String splitChar)
     public static String[] split(String splittee, String delims, String def) {
         StringTokenizer tokens = new StringTokenizer(splittee,delims,def!=null);
         boolean lastWasDelim=false;
-        List<String> strList=new ArrayList<String>();
+        List<String> strList = new ArrayList<>();
         while (tokens.hasMoreTokens()) {
             String tok=tokens.nextToken();
             if (   tok.length()==1 // we have a single character; could be a token

File: src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java
Patch:
@@ -372,7 +372,7 @@ private void setupMethods(){
     private String[] getMethodNames(Class<?> clazz)
     {
         Method[] meths = clazz.getMethods();
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         for (int idx=0; idx < meths.length; idx++){
             final Method method = meths[idx];
             final String name = method.getName();

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java
Patch:
@@ -57,8 +57,8 @@ public class MonitorAccumModel implements Clearable, Serializable {
      *
      */
     public MonitorAccumModel() {
-        serverListMap = new HashMap<String, List<MonitorModel>>();
-        listeners = new LinkedList<MonitorListener>();
+        serverListMap = new HashMap<>();
+        listeners = new LinkedList<>();
     }
 
     public int getBufferSize() {

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorHealthPanel.java
Patch:
@@ -38,7 +38,7 @@
 public class MonitorHealthPanel extends JPanel implements MonitorListener, Clearable {
     private static final long serialVersionUID = 240L;
 
-    private final Map<String, ServerPanel> serverPanelMap = new HashMap<String, ServerPanel>();
+    private final Map<String, ServerPanel> serverPanelMap = new HashMap<>();
 
     private JPanel servers = null;
 

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorPerformancePanel.java
Patch:
@@ -118,7 +118,7 @@ public MonitorPerformancePanel() {
      */
     public MonitorPerformancePanel(MonitorAccumModel model, MonitorGraph graph) {
         super();
-        this.SERVERMAP = new HashMap<String, DefaultMutableTreeNode>();
+        this.SERVERMAP = new HashMap<>();
         this.MODEL = model;
         this.MODEL.addListener(this);
         this.GRAPH = graph;

File: src/monitor/model/org/apache/jmeter/monitor/model/StatusImpl.java
Patch:
@@ -35,7 +35,7 @@ public class StatusImpl implements Status {
      */
     public StatusImpl() {
         super();
-        connectors = new LinkedList<Connector>();
+        connectors = new LinkedList<>();
     }
 
     /** {@inheritDoc} */

File: src/monitor/model/org/apache/jmeter/monitor/model/WorkersImpl.java
Patch:
@@ -31,7 +31,7 @@ public class WorkersImpl implements Workers {
      */
     public WorkersImpl() {
         super();
-        worker = new LinkedList<Worker>();
+        worker = new LinkedList<>();
     }
 
     @Override

File: src/monitor/model/org/apache/jmeter/monitor/parser/MonitorHandler.java
Patch:
@@ -71,7 +71,7 @@ public MonitorHandler(ObjectFactory factory) {
     public void startDocument() throws SAXException {
         // this.startDoc = true;
         // Reset all work variables so reusing the instance starts afresh.
-        this.stacktree = new Stack<Object>();
+        this.stacktree = new Stack<>();
         this.status = null;
         this.jvm = null;
         this.memory = null;

File: src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java
Patch:
@@ -58,7 +58,7 @@ public class FTPSampler extends AbstractSampler implements Interruptible {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.LoginConfigGui",
                     "org.apache.jmeter.protocol.ftp.config.gui.FtpConfigGui",

File: src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -121,15 +121,15 @@ public Principal getUserPrincipal() {
      * Default Constructor.
      */
     public AuthManager() {
-        setProperty(new CollectionProperty(AUTH_LIST, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(AUTH_LIST, new ArrayList<>()));
     }
 
     /** {@inheritDoc} */
     @Override
     public void clear() {
         super.clear();
         kerberosManager.clearSubjects();
-        setProperty(new CollectionProperty(AUTH_LIST, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(AUTH_LIST, new ArrayList<>()));
     }
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -316,7 +316,7 @@ public void clear(){
      */
     private void clearCookies() {
         log.debug("Clear all cookies from store");
-        setProperty(new CollectionProperty(COOKIES, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(COOKIES, new ArrayList<>()));
     }
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java
Patch:
@@ -100,7 +100,7 @@ public DNSCacheManager() {
     public Object clone() {
         DNSCacheManager clone = (DNSCacheManager) super.clone();
         clone.systemDefaultDnsResolver = new SystemDefaultDnsResolver();
-        clone.cache = new LinkedHashMap<String, InetAddress[]>();
+        clone.cache = new LinkedHashMap<>();
         CollectionProperty dnsServers = getServers();
         try {
             String[] serverNames = new String[dnsServers.size()];

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
Patch:
@@ -166,7 +166,7 @@ public String getCookieHeaderForURL(CollectionProperty cookiesCP, URL url,
      */
     List<org.apache.http.cookie.Cookie> getCookiesForUrl(
             CollectionProperty cookiesCP, URL url, boolean allowVariableCookie) {
-        List<org.apache.http.cookie.Cookie> cookies = new ArrayList<org.apache.http.cookie.Cookie>();
+        List<org.apache.http.cookie.Cookie> cookies = new ArrayList<>();
 
         for (PropertyIterator iter = cookiesCP.iterator(); iter.hasNext();) {
             Cookie jmcookie = (Cookie) iter.next().getObjectValue();
@@ -187,7 +187,7 @@ List<org.apache.http.cookie.Cookie> getCookiesForUrl(
 
         CookieOrigin cookieOrigin = new CookieOrigin(host, port, path, secure);
 
-        List<org.apache.http.cookie.Cookie> cookiesValid = new ArrayList<org.apache.http.cookie.Cookie>();
+        List<org.apache.http.cookie.Cookie> cookiesValid = new ArrayList<>();
         for (org.apache.http.cookie.Cookie cookie : cookies) {
             if (cookieSpec.match(cookie, cookieOrigin)) {
                 cookiesValid.add(cookie);

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java
Patch:
@@ -63,14 +63,14 @@ public class HeaderManager extends ConfigTestElement implements Serializable {
     private Object SOAPHeader = null;
 
     public HeaderManager() {
-        setProperty(new CollectionProperty(HEADERS, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(HEADERS, new ArrayList<>()));
     }
 
     /** {@inheritDoc} */
     @Override
     public void clear() {
         super.clear();
-        setProperty(new CollectionProperty(HEADERS, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(HEADERS, new ArrayList<>()));
     }
 
     /**
@@ -217,7 +217,7 @@ public Header get(int i) {
      * @param name header name
      */
     public void removeHeaderNamed(String name) {
-        List<Integer> removeIndices = new ArrayList<Integer>();
+        List<Integer> removeIndices = new ArrayList<>();
         for (int i = getHeaders().size() - 1; i >= 0; i--) {
             Header header = (Header) getHeaders().get(i).getObjectValue();
             if (header == null) {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
Patch:
@@ -104,7 +104,7 @@ public void run() {
         ServerSocket mainSocket = null;
         ThreadPoolExecutor threadPoolExecutor = null;
         if(maxThreadPoolSize>0) {
-            final ArrayBlockingQueue<Runnable> queue = new ArrayBlockingQueue<Runnable>(
+            final ArrayBlockingQueue<Runnable> queue = new ArrayBlockingQueue<>(
                     maxQueueSize);
             threadPoolExecutor = new ThreadPoolExecutor(
                     maxThreadPoolSize/2, 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
Patch:
@@ -111,7 +111,7 @@ public void run() {
             final String[] requestParts = firstLine.split("\\s+");
             final String requestMethod = requestParts[0];
             final String requestPath = requestParts[1];
-            final HashMap<String, String> parameters = new HashMap<String, String>();
+            final HashMap<String, String> parameters = new HashMap<>();
             if (HTTPConstants.GET.equals(requestMethod)) {
                 int querypos = requestPath.indexOf('?');
                 if (querypos >= 0) {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/KerberosManager.java
Patch:
@@ -51,8 +51,7 @@ public class KerberosManager implements Serializable {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     private static final String JAAS_APPLICATION = JMeterUtils.getPropDefault("kerberos_jaas_application", "JMeter"); //$NON-NLS-1$ $NON-NLS-2$
-    private final ConcurrentMap<String, Future<Subject>> subjects
-        = new ConcurrentHashMap<String, Future<Subject>>();
+    private final ConcurrentMap<String, Future<Subject>> subjects = new ConcurrentHashMap<>();
 
     public KerberosManager() {
     }
@@ -80,7 +79,7 @@ public Subject call() throws Exception {
             }
         };
 
-        FutureTask<Subject> task = new FutureTask<Subject>(callable);
+        FutureTask<Subject> task = new FutureTask<>(callable);
         if(log.isDebugEnabled()) {
             log.debug("Subject cached:"+subjects.keySet() +" before:"+username);
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -91,7 +91,7 @@ public class CookiePanel extends AbstractConfigGui implements ActionListener {
 
     private JComboBox<String> selectHandlerPanel;
 
-    private HashMap<String, String> handlerMap = new HashMap<String, String>();
+    private HashMap<String, String> handlerMap = new HashMap<>();
 
     private static final String[] COLUMN_RESOURCE_NAMES = {
         ("name"),   //$NON-NLS-1$
@@ -401,7 +401,7 @@ private JPanel createButtonPanel() {
     private JComboBox<String> createComboHandler() {
         ComboBoxModel<String> nodesModel = new DefaultComboBoxModel<>();
         // drop-down list for renderer
-        selectHandlerPanel = new JComboBox<String>(nodesModel);
+        selectHandlerPanel = new JComboBox<>(nodesModel);
         selectHandlerPanel.setActionCommand(HANDLER_COMMAND);
         selectHandlerPanel.addActionListener(this);
 

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/AnchorModifier.java
Patch:
@@ -73,7 +73,7 @@ public void process() {
             sampler = (HTTPSamplerBase) sam;
             result = (HTTPSampleResult) res;
         }
-        List<HTTPSamplerBase> potentialLinks = new ArrayList<HTTPSamplerBase>();
+        List<HTTPSamplerBase> potentialLinks = new ArrayList<>();
         String responseText = ""; // $NON-NLS-1$
         responseText = result.getResponseDataAsString();
         Document html;
@@ -117,7 +117,7 @@ private void modifyArgument(Argument arg, Arguments args) {
         if (log.isDebugEnabled()) {
             log.debug("Modifying argument: " + arg);
         }
-        List<Argument> possibleReplacements = new ArrayList<Argument>();
+        List<Argument> possibleReplacements = new ArrayList<>();
         PropertyIterator iter = args.iterator();
         Argument replacementArg;
         while (iter.hasNext()) {
@@ -148,7 +148,7 @@ public void addConfigElement(ConfigElement config) {
     private void addFormUrls(Document html, HTTPSampleResult result, HTTPSamplerBase config, 
             List<HTTPSamplerBase> potentialLinks) {
         NodeList rootList = html.getChildNodes();
-        List<HTTPSamplerBase> urls = new LinkedList<HTTPSamplerBase>();
+        List<HTTPSamplerBase> urls = new LinkedList<>();
         for (int x = 0; x < rootList.getLength(); x++) {
             urls.addAll(HtmlParsingUtils.createURLFromForm(rootList.item(x), result.getURL()));
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/RegExUserParameters.java
Patch:
@@ -100,7 +100,7 @@ private Map<String, String> buildParamsMap(){
             return null;
         }
         int n = Integer.parseInt(jmvars.get(regExRefName + MATCH_NR));
-        Map<String, String> map = new HashMap<String, String>(n);
+        Map<String, String> map = new HashMap<>(n);
         for(int i=1; i<=n; i++){
             map.put(jmvars.get(regExRefName + i + REGEX_GROUP_SUFFIX + grNames), 
                     jmvars.get(regExRefName + i + REGEX_GROUP_SUFFIX + grValues));

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserParameterXMLContentHandler.java
Patch:
@@ -41,13 +41,13 @@ public class UserParameterXMLContentHandler implements ContentHandler {
 
     // Note UserParameterXML accesses this variable
     // to obtain the Set data via method getParsedParameters()
-    private List<Map<String, String>> userThreads = new LinkedList<Map<String, String>>();
+    private List<Map<String, String>> userThreads = new LinkedList<>();
 
     private String paramname = "";
 
     private String paramvalue = "";
 
-    private Map<String, String> nameValuePair = new HashMap<String, String>();
+    private Map<String, String> nameValuePair = new HashMap<>();
 
     /** Buffer for collecting data from the "characters" SAX event. */
     private CharArrayWriter contents = new CharArrayWriter();
@@ -94,7 +94,7 @@ public void startElement(String namespaceURL, String localName, String qName, At
         // must create a new object,
         // or else end up with a set full of the same Map object
         if (qName.equals("thread")) {
-            nameValuePair = new HashMap<String, String>();
+            nameValuePair = new HashMap<>();
         }
 
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserSequence.java
Patch:
@@ -89,7 +89,7 @@ public synchronized Map<String, String> getNextUserMods() {
             log.debug("UserSequence.getNextuserMods(): current parameters will be " + "changed to: " + user);
         } else {
             // no entries in all users, therefore create an empty Map object
-            user = new HashMap<String, String>();
+            user = new HashMap<>();
         }
 
         return user;

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -70,7 +70,7 @@ public abstract class HTMLParser {
     private   static final float IE_10                = 10.0f;
 
     // Cache of parsers - parsers must be re-usable
-    private static final Map<String, HTMLParser> parsers = new ConcurrentHashMap<String, HTMLParser>(4);
+    private static final Map<String, HTMLParser> parsers = new ConcurrentHashMap<>(4);
 
     public static final String PARSER_CLASSNAME = "htmlParser.className"; // $NON-NLS-1$
 
@@ -147,7 +147,7 @@ public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL
         // them roughly in order, which should be a better model of browser
         // behaviour.
 
-        Collection<URLString> col = new LinkedHashSet<URLString>();
+        Collection<URLString> col = new LinkedHashSet<>();
         return getEmbeddedResourceURLs(userAgent, html, baseUrl, new URLCollection(col),encoding);
 
         // An additional note on using HashSets to store URLs: I just

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParsingUtils.java
Patch:
@@ -283,7 +283,7 @@ public static HTTPSamplerBase createUrlFromAnchor(String parsedUrlString, URL co
 
     public static List<HTTPSamplerBase> createURLFromForm(Node doc, URL context) {
         String selectName = null;
-        LinkedList<HTTPSamplerBase> urlConfigs = new LinkedList<HTTPSamplerBase>();
+        LinkedList<HTTPSamplerBase> urlConfigs = new LinkedList<>();
         recurseForm(doc, urlConfigs, context, selectName, false);
         /*
          * NamedNodeMap atts = formNode.getAttributes();

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java
Patch:
@@ -65,7 +65,7 @@ private static final class JMeterTagVisitor extends EmptyTagVisitor {
         private URLCollection urls;
         private URLPointer baseUrl;
         private Float ieVersion;
-        private Stack<Boolean> enabled = new Stack<Boolean>();
+        private Stack<Boolean> enabled = new Stack<>();
 
         /**
          * @param baseUrl base url to add possibly missing information to urls found in <code>urls</code>
@@ -208,7 +208,7 @@ public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL
             String contents = new String(html,encoding); 
             // As per Jodd javadocs, emitStrings should be false for visitor for better performances
             LagartoParser lagartoParser = new LagartoParser(contents, false);
-            LagartoParserConfig<LagartoParserConfig<?>> config = new LagartoParserConfig<LagartoParserConfig<?>>();
+            LagartoParserConfig<LagartoParserConfig<?>> config = new LagartoParserConfig<>();
             config.setCaseSensitive(false);
             // Conditional comments only apply for IE < 10
             config.setEnableConditionalComments(isEnableConditionalComments(ieVersion));

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java
Patch:
@@ -44,7 +44,7 @@ public abstract class AbstractSamplerCreator implements SamplerCreator {
                                    ".binary"); // $NON-NLS-1$
 
     /** Which content-types will be treated as binary (exact match) */
-    private static final Set<String> binaryContentTypes = new HashSet<String>();
+    private static final Set<String> binaryContentTypes = new HashSet<>();
 
     /** Where to store the temporary binary files */
     private static final String binaryDirectory =

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -79,7 +79,7 @@ public class HttpRequestHdr {
 
     private byte[] rawPostData;
 
-    private final Map<String, Header> headers = new HashMap<String, Header>();
+    private final Map<String, Header> headers = new HashMap<>();
 
     private final String httpSamplerName;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -87,7 +87,7 @@ public class Proxy extends Thread {
         JMeterUtils.getPropDefault("proxy.ssl.protocol", "TLS"); // $NON-NLS-1$ $NON-NLS-2$
 
     // HashMap to save ssl connection between Jmeter proxy and browser
-    private static final HashMap<String, SSLSocketFactory> HOST2SSL_SOCK_FAC = new HashMap<String, SSLSocketFactory>();
+    private static final HashMap<String, SSLSocketFactory> HOST2SSL_SOCK_FAC = new HashMap<>();
 
     private static final SamplerCreatorFactory SAMPLERFACTORY = new SamplerCreatorFactory();
 
@@ -281,7 +281,7 @@ public void run() {
             }
             if(result != null) // deliverSampler allows sampler to be null, but result must not be null
             {
-                List<TestElement> children = new ArrayList<TestElement>();
+                List<TestElement> children = new ArrayList<>();
                 if(captureHttpHeaders) {
                     children.add(headers);
                 }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -364,11 +364,11 @@ public void setNotifyChildSamplerListenerOfFilteredSamplers(boolean b) {
     }
 
     public void setIncludeList(Collection<String> list) {
-        setProperty(new CollectionProperty(INCLUDE_LIST, new HashSet<String>(list)));
+        setProperty(new CollectionProperty(INCLUDE_LIST, new HashSet<>(list)));
     }
 
     public void setExcludeList(Collection<String> list) {
-        setProperty(new CollectionProperty(EXCLUDE_LIST, new HashSet<String>(list)));
+        setProperty(new CollectionProperty(EXCLUDE_LIST, new HashSet<>(list)));
     }
 
     /**
@@ -1039,7 +1039,7 @@ public JMeterTreeNode findTargetControllerNode() {
     // TODO - could be converted to generic class?
     private Collection<?> findApplicableElements(JMeterTreeNode myTarget, Class<? extends TestElement> myClass, boolean ascending) {
         JMeterTreeModel treeModel = GuiPackage.getInstance().getTreeModel();
-        LinkedList<TestElement> elements = new LinkedList<TestElement>();
+        LinkedList<TestElement> elements = new LinkedList<>();
 
         // Look for elements directly within the HTTP proxy:
         Enumeration<?> kids = treeModel.getNodeOf(this).children();

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/SamplerCreatorFactory.java
Patch:
@@ -37,7 +37,7 @@ public class SamplerCreatorFactory {
 
     private static final SamplerCreator DEFAULT_SAMPLER_CREATOR = new DefaultSamplerCreator();
 
-    private final Map<String, SamplerCreator> samplerCreatorMap = new HashMap<String, SamplerCreator>();
+    private final Map<String, SamplerCreator> samplerCreatorMap = new HashMap<>();
 
     /**
      * 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -288,7 +288,7 @@ protected void setExcludeListInProxyControl(ProxyControl element) {
 
     private List<String> getDataList(PowerTableModel p_model, String colName) {
         String[] dataArray = p_model.getData().getColumn(colName);
-        List<String> list = new LinkedList<String>();
+        List<String> list = new LinkedList<>();
         for (int i = 0; i < dataArray.length; i++) {
             list.add(dataArray[i]);
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -103,7 +103,7 @@ public class HTTPHC3Impl extends HTTPHCAbstractImpl {
         new ThreadLocal<Map<HostConfiguration, HttpClient>>(){
         @Override
         protected Map<HostConfiguration, HttpClient> initialValue() {
-            return new HashMap<HostConfiguration, HttpClient>();
+            return new HashMap<>();
         }
     };
 
@@ -750,7 +750,7 @@ private String sendPostData(PostMethod post) throws IOException {
 
             final boolean browserCompatible = getDoBrowserCompatibleMultipart();
             // We don't know how many entries will be skipped
-            ArrayList<PartBase> partlist = new ArrayList<PartBase>();
+            ArrayList<PartBase> partlist = new ArrayList<>();
             // Create the parts
             // Add any parameters
             PropertyIterator args = getArguments().iterator();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -187,7 +187,7 @@ public void process(HttpRequest request, HttpContext context)
         new ThreadLocal<Map<HttpClientKey, HttpClient>>(){
         @Override
         protected Map<HttpClientKey, HttpClient> initialValue() {
-            return new HashMap<HttpClientKey, HttpClient>();
+            return new HashMap<>();
         }
     };
 
@@ -1158,7 +1158,7 @@ protected String sendPostData(HttpPost post)  throws IOException {
                     }
                     // Add the parameters
                     PropertyIterator args = getArguments().iterator();
-                    List <NameValuePair> nvps = new ArrayList <NameValuePair>();
+                    List <NameValuePair> nvps = new ArrayList<>();
                     String urlContentEncoding = contentEncoding;
                     if(urlContentEncoding == null || urlContentEncoding.length() == 0) {
                         // Use the default encoding for urls

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHCAbstractImpl.java
Patch:
@@ -61,9 +61,9 @@ public abstract class HTTPHCAbstractImpl extends HTTPAbstractImpl {
 
     protected static final String localHost;
 
-    protected static final Set<String> nonProxyHostFull = new HashSet<String>();
+    protected static final Set<String> nonProxyHostFull = new HashSet<>();
 
-    protected static final List<String> nonProxyHostSuffix = new ArrayList<String>();
+    protected static final List<String> nonProxyHostSuffix = new ArrayList<>();
 
     protected static final int nonProxyHostSuffixSize;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HttpWebdav.java
Patch:
@@ -31,8 +31,8 @@
  * @since 2.12
  */
 public final class HttpWebdav extends HttpEntityEnclosingRequestBase {
-    private static final Set<String> WEBDAV_METHODS = 
-            new HashSet<String>(Arrays.asList(new String[] {
+    private static final Set<String> WEBDAV_METHODS =
+            new HashSet<>(Arrays.asList(new String[]{
                     HTTPConstants.PROPFIND,
                     HTTPConstants.PROPPATCH,
                     HTTPConstants.MKCOL,

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java
Patch:
@@ -533,7 +533,7 @@ public SampleResult sample() {
             Hashtable<String,String> reqHeaders = null;
             if(headerManager != null) {
                 int size = headerManager.getHeaders().size();
-                reqHeaders = new Hashtable<String, String>(size);
+                reqHeaders = new Hashtable<>(size);
                 for (int i = 0; i < size; i++) {
                     Header header = headerManager.get(i);
                     reqHeaders.put(header.getName(), header.getValue());

File: src/protocol/http/org/apache/jmeter/protocol/http/util/ConversionUtils.java
Patch:
@@ -220,7 +220,7 @@ public static String removeSlashDotDot(String url)
         final boolean endsWithSlash = currentPath.endsWith(SLASH);
 
         StringTokenizer st = new StringTokenizer(currentPath, SLASH);
-        List<String> tokens = new ArrayList<String>();
+        List<String> tokens = new ArrayList<>();
         while (st.hasMoreTokens())
         {
             tokens.add(st.nextToken());

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPArgument.java
Patch:
@@ -252,7 +252,7 @@ public String getEncodedName() {
      * @param args collection of {@link Argument} and/or {@link HTTPArgument} entries
      */
     public static void convertArgumentsToHTTP(Arguments args) {
-        List<Argument> newArguments = new LinkedList<Argument>();
+        List<Argument> newArguments = new LinkedList<>();
         PropertyIterator iter = args.getArguments().iterator();
         while (iter.hasNext()) {
             Argument arg = (Argument) iter.next().getObjectValue();

File: src/protocol/http/org/apache/jmeter/protocol/http/util/WSDLHelper.java
Patch:
@@ -78,7 +78,7 @@ public class WSDLHelper {
 
     private Object[] SOAPOPS = null;
 
-    private final Map<String, String> ACTIONS = new HashMap<String, String>();
+    private final Map<String, String> ACTIONS = new HashMap<>();
 
     private final AuthManager AUTH;
 
@@ -320,7 +320,7 @@ public Document getWSDLDocument() {
      * @return Node[]
      */
     public Object[] getSOAPBindings() {
-        ArrayList<Element> list = new ArrayList<Element>();
+        ArrayList<Element> list = new ArrayList<>();
         NodeList bindings = WSDLDOC.getElementsByTagNameNS(WSDL_NAMESPACE,"binding");
         for (int idx = 0; idx < bindings.getLength(); idx++) {
             Element nd = (Element) bindings.item(idx);
@@ -357,7 +357,7 @@ public Object[] getSOAPBindings() {
      */
     public Object[] getOperations() {
         Object[] res = this.getSOAPBindings();
-        ArrayList<Element> ops = new ArrayList<Element>();
+        ArrayList<Element> ops = new ArrayList<>();
         // first we iterate through the bindings
         for (int idx = 0; idx < res.length; idx++) {
             Element one = (Element) res[idx];

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java
Patch:
@@ -97,9 +97,9 @@ public class LogFilter implements Filter, Serializable {
 
     protected boolean PTRNFILTER = false;
 
-    protected ArrayList<Pattern> EXCPATTERNS = new ArrayList<Pattern>();
+    protected ArrayList<Pattern> EXCPATTERNS = new ArrayList<>();
 
-    protected ArrayList<Pattern> INCPATTERNS = new ArrayList<Pattern>();
+    protected ArrayList<Pattern> INCPATTERNS = new ArrayList<>();
 
     protected String NEWFILE = null;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java
Patch:
@@ -89,7 +89,7 @@ public void reset() {
     public Object clone() {
         if(cookieManagers == null)
         {
-            cookieManagers = new ConcurrentHashMap<String, CookieManager>();
+            cookieManagers = new ConcurrentHashMap<>();
         }
         if(managersInUse == null)
         {

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -551,7 +551,7 @@ protected NVPair parseOneParameter(String parameter) {
      * @return List of name/value pairs
      */
     protected List<String> parseParameters(String parameters) {
-        List<String> parsedParams = new ArrayList<String>();
+        List<String> parsedParams = new ArrayList<>();
         StringTokenizer paramtokens = this.tokenize(parameters, "&");
         while (paramtokens.hasMoreElements()) {
             parsedParams.add(paramtokens.nextToken());

File: src/protocol/http/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java
Patch:
@@ -229,7 +229,7 @@ public void setSamplerResult(Object objectResult) {
     //TODO: move to utils class (JMeterUtils?)
     public static Map<String, String> getQueryMap(String query) {
 
-        Map<String, String> map = new HashMap<String, String>();
+        Map<String, String> map = new HashMap<>();
         if (query.trim().startsWith("<?")) { // $NON-NLS-1$
             // SOAP request (generally)
             map.put(" ", query); //blank name // $NON-NLS-1$

File: src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java
Patch:
@@ -124,7 +124,7 @@ private void init() {// called from ctor, so must not be overridable
      * @return a panel containing the relevant components
      */
     private JPanel createClassnamePanel() {
-        List<String> possibleClasses = new ArrayList<String>();
+        List<String> possibleClasses = new ArrayList<>();
 
         try {
             // Find all the classes which implement the JavaSamplerClient
@@ -245,7 +245,7 @@ public void configure(TestElement config) {
      */
     private static final boolean checkContainsClassName(ComboBoxModel<String> model, String className) {
         int size = model.getSize();
-        Set<String> set = new HashSet<String>(size);
+        Set<String> set = new HashSet<>(size);
         for (int i = 0; i < size; i++) {
             set.add(model.getElementAt(i));
         }

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BSFSampler.java
Patch:
@@ -46,7 +46,7 @@
  */
 public class BSFSampler extends BSFTestElement implements Sampler, TestBean, ConfigMergabilityIndicator {
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BeanShellSampler.java
Patch:
@@ -41,7 +41,7 @@
  */
 public class BeanShellSampler extends BeanShellTestElement implements Sampler, Interruptible, ConfigMergabilityIndicator
 {
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
     

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223Sampler.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.log.Logger;
 
 public class JSR223Sampler extends JSR223TestElement implements Cloneable, Sampler, TestBean, ConfigMergabilityIndicator {
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java
Patch:
@@ -48,7 +48,7 @@ public class JavaSampler extends AbstractSampler implements TestStateListener {
 
     private static final long serialVersionUID = 232L; // Remember to change this when the class changes ...
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.protocol.java.config.gui.JavaConfigGui",
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -245,7 +245,7 @@ private ResourceLimitingJdbcDataSource initPool(String maxPool) {
         new ThreadLocal<Map<String, ResourceLimitingJdbcDataSource>>(){
         @Override
         protected Map<String, ResourceLimitingJdbcDataSource> initialValue() {
-            return new HashMap<String, ResourceLimitingJdbcDataSource>();
+            return new HashMap<>();
         }
     };
 

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElementBeanInfo.java
Patch:
@@ -35,7 +35,7 @@
 
 public class DataSourceElementBeanInfo extends BeanInfoSupport {
     private static final Logger log = LoggingManager.getLoggerForClass();
-    private static Map<String,Integer> TRANSACTION_ISOLATION_MAP = new HashMap<String, Integer>(5);
+    private static Map<String,Integer> TRANSACTION_ISOLATION_MAP = new HashMap<>(5);
     static {
         // Will use default isolation
         TRANSACTION_ISOLATION_MAP.put("DEFAULT", Integer.valueOf(-1));

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Patch:
@@ -42,7 +42,7 @@
  *
  */
 public class JDBCSampler extends AbstractJDBCTestElement implements Sampler, TestBean, ConfigMergabilityIndicator {
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
     

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ClientPool.java
Patch:
@@ -35,10 +35,10 @@
 public class ClientPool {
 
     //GuardedBy("this")
-    private static final ArrayList<Closeable> clients = new ArrayList<Closeable>();
+    private static final ArrayList<Closeable> clients = new ArrayList<>();
 
     //GuardedBy("this")
-    private static final Map<Object, Object> client_map = new ConcurrentHashMap<Object, Object>();
+    private static final Map<Object, Object> client_map = new ConcurrentHashMap<>();
 
     /**
      * Add a ReceiveClient to the ClientPool. This is so that we can make sure

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class InitialContextFactory {
 
-    private static final ConcurrentHashMap<String, Context> MAP = new ConcurrentHashMap<String, Context>();
+    private static final ConcurrentHashMap<String, Context> MAP = new ConcurrentHashMap<>();
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
Patch:
@@ -239,9 +239,9 @@ private ReceiveSubscriber(int queueSize, boolean useProps,
             subscriber = createSubscriber(session, dest, durableSubscriptionId, jmsSelector);
             if(useMessageListener) {
                 if (queueSize <=0) {
-                    queue = new LinkedBlockingQueue<Message>();
+                    queue = new LinkedBlockingQueue<>();
                 } else {
-                    queue = new LinkedBlockingQueue<Message>(queueSize);            
+                    queue = new LinkedBlockingQueue<>(queueSize);
                 }
                 subscriber.setMessageListener(this);
             } else {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSProperties.java
Patch:
@@ -85,7 +85,7 @@ public void setProperties(List<JMSProperty> jmsProperties) {
      */
     public Map<String, Object> getJmsPropertysAsMap() {
         PropertyIterator iter = getProperties().iterator();
-        Map<String, Object> argMap = new LinkedHashMap<String, Object>();
+        Map<String, Object> argMap = new LinkedHashMap<>();
         while (iter.hasNext()) {
             JMSProperty arg = (JMSProperty) iter.next().getObjectValue();
             // Because CollectionProperty.mergeIn will not prevent adding two

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -396,7 +396,7 @@ public void threadStarted() {
     }
 
     private Context getInitialContext() throws NamingException {
-        Hashtable<String, String> table = new Hashtable<String, String>();
+        Hashtable<String, String> table = new Hashtable<>();
 
         if (getInitialContextFactory() != null && getInitialContextFactory().trim().length() > 0) {
             if (LOGGER.isDebugEnabled()) {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/MessageAdmin.java
Patch:
@@ -34,7 +34,7 @@
 public class MessageAdmin {
     private static final MessageAdmin SINGLETON = new MessageAdmin();
 
-    private final Map<String, PlaceHolder> table = new ConcurrentHashMap<String, PlaceHolder>();
+    private final Map<String, PlaceHolder> table = new ConcurrentHashMap<>();
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
Patch:
@@ -214,7 +214,7 @@ public SampleResult sample() {
     }
 
     private Map<String, Object> getMapContent() throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {
-        Map<String,Object> m = new HashMap<String,Object>();
+        Map<String,Object> m = new HashMap<>();
         String text = getMessageContent();
         String[] lines = text.split("\n");
         for (String line : lines){

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArguments.java
Patch:
@@ -48,7 +48,7 @@ public class LDAPArguments extends ConfigTestElement implements Serializable {
      * Create a new Arguments object with no arguments.
      */
     public LDAPArguments() {
-        setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<>()));
     }
 
     /**
@@ -66,7 +66,7 @@ public CollectionProperty getArguments() {
     @Override
     public void clear() {
         super.clear();
-        setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<Object>()));
+        setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<>()));
     }
 
     /**
@@ -87,7 +87,7 @@ public void setArguments(List<Object> arguments) {
      */
     public Map<String, String> getArgumentsAsMap() {
         PropertyIterator iter = getArguments().iterator();
-        Map<String, String> argMap = new HashMap<String, String>();
+        Map<String, String> argMap = new HashMap<>();
         while (iter.hasNext()) {
             LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();
             argMap.put(arg.getName(), arg.getValue());

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPSampler.java
Patch:
@@ -53,7 +53,7 @@ public class LDAPSampler extends AbstractSampler {
 
     private static final long serialVersionUID = 240L;
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.LoginConfigGui",
                     "org.apache.jmeter.protocol.ldap.config.gui.LdapConfigGui",

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapClient.java
Patch:
@@ -69,7 +69,7 @@ public LdapClient() {
      */
     public void connect(String host, String port, String rootdn, String username, String password)
             throws NamingException {
-        Hashtable<String, String> env = new Hashtable<String, String>();
+        Hashtable<String, String> env = new Hashtable<>();
         env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory"); //$NON-NLS-1$
         env.put(Context.PROVIDER_URL, "ldap://" + host + ":" + port + "/" + rootdn); //$NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$
         env.put(Context.REFERRAL, "throw"); //$NON-NLS-1$

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java
Patch:
@@ -84,7 +84,7 @@ public LdapExtClient() {
     public static DirContext connect(String host, String port, String rootdn, String username, String password, String connTimeOut, boolean secure)
             throws NamingException {
         DirContext dirContext;
-        Hashtable<String, String> env = new Hashtable<String, String>();
+        Hashtable<String, String> env = new Hashtable<>();
         env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory"); // $NON-NLS-1$
         StringBuilder sb = new StringBuilder(80);
         if (secure) {

File: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
Patch:
@@ -65,7 +65,7 @@ public class MailReaderSampler extends AbstractSampler implements Interruptible
 
     private static final long serialVersionUID = 240L;
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
Patch:
@@ -64,7 +64,7 @@ public class SmtpSampler extends AbstractSampler {
 
     private static final long serialVersionUID = 1L;
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 
@@ -377,7 +377,7 @@ private void writeBodyPart(StringBuilder sb, BodyPart bodyPart)
      */
     private List<InternetAddress> getPropNameAsAddresses(String propValue) throws AddressException{
         if (propValue.length() > 0){ // we have at least one potential address
-            List<InternetAddress> addresses = new ArrayList<InternetAddress>();
+            List<InternetAddress> addresses = new ArrayList<>();
             for (String address : propValue.split(";")){
                 addresses.add(new InternetAddress(address.trim()));
             }

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java
Patch:
@@ -106,8 +106,8 @@ public class SmtpPanel extends JPanel {
     private JButton addHeaderFieldButton;
     private JLabel headerFieldName;
     private JLabel headerFieldValue;
-    private Map<JTextField, JTextField> headerFields = new HashMap<JTextField, JTextField>();
-    private Map<JButton,JTextField> removeButtons = new HashMap<JButton, JTextField>();
+    private Map<JTextField, JTextField> headerFields = new HashMap<>();
+    private Map<JButton,JTextField> removeButtons = new HashMap<>();
     private int headerGridY = 0;
 
     private SecuritySettingsPanel securitySettingsPanel;

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/protocol/SendMailCommand.java
Patch:
@@ -110,7 +110,7 @@ public class SendMailCommand {
      */
     public SendMailCommand() {
         headerFields = new CollectionProperty();
-        attachments = new ArrayList<File>();
+        attachments = new ArrayList<>();
     }
 
     /**

File: src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/mongo/MongoUtils.java
Patch:
@@ -37,7 +37,7 @@ public class MongoUtils {
 
     public static List<ServerAddress> toServerAddresses(String connections) throws UnknownHostException {
 
-        List<ServerAddress> addresses = new ArrayList<ServerAddress>();
+        List<ServerAddress> addresses = new ArrayList<>();
         for(String connection : Arrays.asList(connections.split(","))) {
             int port = DEFAULT_PORT;
             String[] hostPort = connection.split(":");

File: src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java
Patch:
@@ -80,7 +80,7 @@ public class SystemSampler extends AbstractSampler {
      */
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 
@@ -112,7 +112,7 @@ public SampleResult sample(Entry entry) {
         Arguments environment = getEnvironmentVariables();
         boolean checkReturnCode = getCheckReturnCode();
         int expectedReturnCode = getExpectedReturnCode();
-        List<String> cmds = new ArrayList<String>(args.getArgumentCount()+1);
+        List<String> cmds = new ArrayList<>(args.getArgumentCount() + 1);
         StringBuilder cmdLine = new StringBuilder((null == command) ? "" : command);
         cmds.add(command);
         for (int i=0;i<args.getArgumentCount();i++) {
@@ -122,7 +122,7 @@ public SampleResult sample(Entry entry) {
             cmdLine.append(cmds.get(i+1));
         }
 
-        Map<String,String> env = new HashMap<String, String>();
+        Map<String,String> env = new HashMap<>();
         for (int i=0;i<environment.getArgumentCount();i++) {
             Argument arg = environment.getArgument(i);
             env.put(arg.getName(), arg.getPropertyAsString(Argument.VALUE));

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -58,7 +58,7 @@ public class TCPSampler extends AbstractSampler implements ThreadListener, Inter
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
+    private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.LoginConfigGui",
                     "org.apache.jmeter.protocol.tcp.config.gui.TCPConfigGui",
@@ -143,7 +143,7 @@ public class TCPSampler extends AbstractSampler implements ThreadListener, Inter
         new ThreadLocal<Map<String, Object>>() {
         @Override
         protected Map<String, Object> initialValue() {
-            return new HashMap<String, Object>();
+            return new HashMap<>();
         }
     };
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1361,8 +1361,9 @@ private String escapeIllegalURLCharacters(String url) {
         }
         try {
             String escapedUrl = ConversionUtils.escapeIllegalURLCharacters(url);
-            if(log.isDebugEnabled()) {
-                log.debug("Successfully escaped url:'"+url +"' to:'"+escapedUrl+"'");
+            if (!escapedUrl.equals(url)) {
+                log.warn("Url '" + url + "' has been escaped to '" + escapedUrl
+                        + "'. Please corect your webpage.");
             }
             return escapedUrl;
         } catch (Exception e1) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1356,6 +1356,9 @@ public void run() {
      * @return escaped url
      */
     private String escapeIllegalURLCharacters(String url) {
+        if (url == null || url.toLowerCase().startsWith("file:")) {
+            return url;
+        }
         try {
             String escapedUrl = ConversionUtils.escapeIllegalURLCharacters(url);
             if(log.isDebugEnabled()) {

File: src/components/org/apache/jmeter/visualizers/RenderAsXPath.java
Patch:
@@ -155,7 +155,8 @@ private String process(String textToParse, XPathExtractor extractor) {
      * Converts (X)HTML response to DOM object Tree.
      * This version cares of charset of response.
      * @param unicodeData
-     * @return
+     * @param extractor
+     * @return Document
      *
      */
     private Document parseResponse(String unicodeData, XPathExtractor extractor)

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -826,7 +826,7 @@ private void addAssertion(JMeterTreeModel model, JMeterTreeNode node) throws Ill
     /**
      * Construct AuthManager
      * @param authorization
-     * @return
+     * @return AuthManager
      * @throws IllegalUserActionException
      */
     private AuthManager newAuthorizationManager(Authorization authorization) throws IllegalUserActionException {

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/protocol/SendMailCommand.java
Patch:
@@ -144,7 +144,7 @@ public Message prepareMessage() throws MessagingException, IOException {
                 String allProtocols = StringUtils.join(
                     SSLContext.getDefault().getSupportedSSLParameters().getProtocols(), " ");
                 logger.info("Use ssl/tls protocols for mail: " + allProtocols);
-                props.setProperty("mail.smtp.ssl.protocols", allProtocols);
+                props.setProperty("mail." + protocol + ".ssl.protocols", allProtocols);
             } catch (Exception e) {
                 logger.error("Problem setting ssl/tls protocols for mail", e);
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java
Patch:
@@ -75,6 +75,7 @@ public interface HTTPConstantsInterface {
     String LAST_MODIFIED = "Last-Modified"; // $NON-NLS-1$
     String EXPIRES = "Expires"; // $NON-NLS-1$
     String CACHE_CONTROL = "Cache-Control";  //e.g. public, max-age=259200
-    String DATE = "Date";  //e.g. Date Header of response 
+    String DATE = "Date";  //e.g. Date Header of response
+    String VARY = "Vary"; // $NON-NLS-1$
 
 }

File: src/core/org/apache/jmeter/control/TransactionSampler.java
Patch:
@@ -126,7 +126,7 @@ protected void setTransactionDone() {
         this.transactionDone = true;
         // Set the overall status for the transaction sample
         // TODO: improve, e.g. by adding counts to the SampleResult class
-        transactionSampleResult.setResponseMessage("Number of samples in transaction : "
+        transactionSampleResult.setResponseMessage(TransactionController.NUMBER_OF_SAMPLES_IN_TRANSACTION_PREFIX
                         + calls + ", number of failing samples : "
                         + noFailingSamples);
         if (transactionSampleResult.isSuccessful()) {

File: src/components/org/apache/jmeter/timers/GaussianRandomTimer.java
Patch:
@@ -29,11 +29,11 @@
  *
  */
 public class GaussianRandomTimer extends RandomTimer implements Serializable {
-    private static final long serialVersionUID = 240L;
+    private static final long serialVersionUID = 241L;
 
     @Override
     public long delay() {
-        return (long) Math.abs((this.random.nextGaussian() * getRange()) + super.delay());
+        return (long) Math.abs((getRandom().nextGaussian() * getRange()) + super.delay());
     }
 
     @Override

File: src/components/org/apache/jmeter/timers/UniformRandomTimer.java
Patch:
@@ -29,11 +29,11 @@
  *
  */
 public class UniformRandomTimer extends RandomTimer implements Serializable {
-    private static final long serialVersionUID = 240L;
+    private static final long serialVersionUID = 241L;
 
     @Override
     public long delay() {
-        return (long) Math.abs((this.random.nextDouble() * getRange()) + super.delay());
+        return (long) Math.abs((getRandom().nextDouble() * getRange()) + super.delay());
     }
 
     @Override

File: src/components/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -236,6 +236,7 @@ public void setupTabPane() {
                 statsBuff.append(JMeterUtils.getResString("view_results_size_body_in_bytes")).append(sampleResult.getBodySize()).append(NL); //$NON-NLS-1$
                 statsBuff.append(JMeterUtils.getResString("view_results_sample_count")).append(sampleResult.getSampleCount()).append(NL); //$NON-NLS-1$
                 statsBuff.append(JMeterUtils.getResString("view_results_error_count")).append(sampleResult.getErrorCount()).append(NL); //$NON-NLS-1$
+                statsBuff.append(JMeterUtils.getResString("view_results_datatype")).append(sampleResult.getDataType()).append(NL); //$NON-NLS-1$
                 statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);
                 statsBuff.setLength(0); // reset for reuse
 

File: src/protocol/java/org/apache/jmeter/protocol/java/test/JavaTest.java
Patch:
@@ -282,8 +282,8 @@ public SampleResult runTest(JavaSamplerContext context) {
 
         if (resultData != null && resultData.length() > 0) {
             results.setResponseData(resultData, null);
-            results.setDataType(SampleResult.TEXT);
         }
+        results.setDataType(SampleResult.TEXT); // It's always text type even if empty
 
         // Record sample start time.
         results.sampleStart();

File: src/core/org/apache/jmeter/util/JsseSSLManager.java
Patch:
@@ -35,6 +35,7 @@
 import javax.net.ssl.SSLSession;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.TrustManagerFactory;
+import javax.net.ssl.X509ExtendedKeyManager;
 import javax.net.ssl.X509KeyManager;
 import javax.net.ssl.X509TrustManager;
 
@@ -283,7 +284,7 @@ private SSLContext createContext() throws GeneralSecurityException {
      * selecting the proper key and certificate based on the keystore available.
      *
      */
-    private static class WrappedX509KeyManager implements X509KeyManager {
+    private static class WrappedX509KeyManager extends X509ExtendedKeyManager {
 
         /**
          * The parent X509KeyManager.

File: src/core/org/apache/jmeter/save/converters/SampleResultConverter.java
Patch:
@@ -171,10 +171,12 @@ protected void saveResponseData(HierarchicalStreamWriter writer, MarshallingCont
             try {
                 if (SampleResult.TEXT.equals(res.getDataType())){
                     writer.setValue(new String(res.getResponseData(), res.getDataEncodingWithDefault()));
+                } else {
+                    writer.setValue("Non-TEXT response data, cannot record: (" + res.getDataType() + ")");                    
                 }
                 // Otherwise don't save anything - no point
             } catch (UnsupportedEncodingException e) {
-                writer.setValue("Unsupported encoding in response data, can't record.");
+                writer.setValue("Unsupported encoding in response data, cannot record: " + e);
             }
             writer.endNode();
         }

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -315,7 +315,7 @@ else if (e.getActionCommand().equals(ActionNames.SAVE_AS_TEST_FRAGMENT)) {
      *         has performed successfully
      */
     private List<File> createBackupFile(File fileToBackup) {
-        if (!BACKUP_ENABLED) {
+        if (!BACKUP_ENABLED || !fileToBackup.exists()) {
             return EMPTY_FILE_LIST;
         }
         char versionSeparator = '-'; //$NON-NLS-1$

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -97,6 +97,7 @@ public final class ActionNames {
     public static final String MOVE_RIGHT       = "move_right"; // $NON-NLS-1$
     public static final String UNDO             = "undo"; // $NON-NLS-1$
     public static final String REDO             = "redo"; // $NON-NLS-1$
+    public static final String QUICK_COMPONENT  = "quick_component"; // $NON-NLS-1$
 
     // Prevent instantiation
     private ActionNames(){

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -235,7 +235,7 @@ public static enum KeystoreMode {
         } else {
             if (!KeyToolUtils.haveKeytool()) {
                 KEYSTORE_MODE = KeystoreMode.NONE;
-            } else if (KeyToolUtils.SUPPORTS_HOST_CERT && USE_DYNAMIC_KEYS) {
+            } else if (USE_DYNAMIC_KEYS) {
                 KEYSTORE_MODE = KeystoreMode.DYNAMIC_KEYSTORE;
                 log.info("HTTP(S) Test Script Recorder SSL Proxy will use keys that support embedded 3rd party resources in file " + CERT_PATH_ABS);
             } else {

File: src/components/org/apache/jmeter/control/RandomController.java
Patch:
@@ -19,8 +19,7 @@
 package org.apache.jmeter.control;
 
 import java.io.Serializable;
-
-import org.apache.jmeter.util.ThreadLocalRandom;
+import java.util.concurrent.ThreadLocalRandom;
 
 /**
  * Controller that rans randomly one of it's children on each iteration

File: src/functions/org/apache/jmeter/functions/Random.java
Patch:
@@ -21,13 +21,13 @@
 import java.util.Collection;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.concurrent.ThreadLocalRandom;
 
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jmeter.util.ThreadLocalRandom;
 
 /**
  * Provides a Random function which returns a random long integer between a min

File: src/components/org/apache/jmeter/assertions/gui/HTMLAssertionGui.java
Patch:
@@ -65,7 +65,7 @@ public class HTMLAssertionGui extends AbstractAssertionGui implements KeyListene
 
     private JCheckBox errorsOnly = null;
 
-    private JComboBox docTypeBox = null;
+    private JComboBox<String> docTypeBox = null;
 
     private JRadioButton htmlRadioButton = null;
 
@@ -213,7 +213,7 @@ private void init() {
 
         // doctype
         HorizontalPanel docTypePanel = new HorizontalPanel();
-        docTypeBox = new JComboBox(new String[] { "omit", "auto", "strict", "loose" });
+        docTypeBox = new JComboBox<>(new String[] { "omit", "auto", "strict", "loose" });
         // docTypePanel.add(new
         // JLabel(JMeterUtils.getResString("duration_assertion_label"))); //$NON-NLS-1$
         docTypePanel.add(new JLabel("Doctype:"));

File: src/components/org/apache/jmeter/control/gui/ThroughputControllerGui.java
Patch:
@@ -38,7 +38,7 @@
 public class ThroughputControllerGui extends AbstractControllerGui {
     private static final long serialVersionUID = 240L;
 
-    private JComboBox styleBox;
+    private JComboBox<String> styleBox;
 
     private int style;
 
@@ -128,10 +128,10 @@ private void init() {
         setBorder(makeBorder());
         add(makeTitlePanel());
 
-        DefaultComboBoxModel styleModel = new DefaultComboBoxModel();
+        DefaultComboBoxModel<String> styleModel = new DefaultComboBoxModel<>();
         styleModel.addElement(BYNUMBER_LABEL);
         styleModel.addElement(BYPERCENT_LABEL);
-        styleBox = new JComboBox(styleModel);
+        styleBox = new JComboBox<>(styleModel);
         styleBox.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {

File: src/components/org/apache/jmeter/extractor/gui/HtmlExtractorGui.java
Patch:
@@ -62,7 +62,7 @@ public class HtmlExtractorGui extends AbstractPostProcessorGui {
 
     private JLabeledTextField refNameField;
 
-    private JComboBox extractorImplName;
+    private JComboBox<String> extractorImplName;
 
 
     public HtmlExtractorGui() {
@@ -157,12 +157,12 @@ private Component makeExtractorPanel() {
         JPanel panel = new HorizontalPanel();
         panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("html_extractor_type"))); //$NON-NLS-1$
         
-        DefaultComboBoxModel m = new DefaultComboBoxModel();
+        DefaultComboBoxModel<String> m = new DefaultComboBoxModel<>();
         for (String s : HtmlExtractor.getImplementations()){
             m.addElement(s);
         }
         m.addElement(USE_DEFAULT_EXTRACTOR_IMPL);
-        extractorImplName = new JComboBox(m);
+        extractorImplName = new JComboBox<>(m);
         extractorImplName.setSelectedItem(HtmlExtractor.DEFAULT_EXTRACTOR);
         JLabel label2 = new JLabel(JMeterUtils.getResString("html_extractor_type")); // $NON-NLS-1$
         label2.setLabelFor(extractorImplName);

File: src/components/org/apache/jmeter/sampler/gui/TestActionGui.java
Patch:
@@ -41,7 +41,7 @@ public class TestActionGui extends AbstractSamplerGui {
     private static final long serialVersionUID = 240L;
 
     // Gui components
-    private JComboBox targetBox;
+    private JComboBox<String> targetBox;
 
     // private ButtonGroup actionButtons;
     private JRadioButton pauseButton;
@@ -163,10 +163,10 @@ private void init() {
         // Target
         HorizontalPanel targetPanel = new HorizontalPanel();
         targetPanel.add(new JLabel(targetLabel));
-        DefaultComboBoxModel targetModel = new DefaultComboBoxModel();
+        DefaultComboBoxModel<String> targetModel = new DefaultComboBoxModel<>();
         targetModel.addElement(threadTarget);
         targetModel.addElement(testTarget);
-        targetBox = new JComboBox(targetModel);
+        targetBox = new JComboBox<>(targetModel);
         targetBox.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {

File: src/components/org/apache/jmeter/visualizers/MailerVisualizer.java
Patch:
@@ -91,7 +91,7 @@ public class MailerVisualizer extends AbstractVisualizer implements ActionListen
 
     private JTextField smtpPasswordField;
 
-    private JComboBox authTypeCombo;
+    private JComboBox<String> authTypeCombo;
 
     /**
      * Constructs the MailerVisualizer and initializes its GUI.
@@ -281,7 +281,7 @@ private JPanel createSmtpSettings() {
 
         JPanel authTypePane = new JPanel(new BorderLayout());
         authTypePane.add(new JLabel(JMeterUtils.getResString("mailer_connection_security")), BorderLayout.WEST); // $NON-NLS-1$
-        authTypeCombo = new JComboBox(new Object[] { 
+        authTypeCombo = new JComboBox<>(new String[] { 
                 MailerModel.MailAuthType.NONE.toString(), 
                 MailerModel.MailAuthType.SSL.toString(),
                 MailerModel.MailAuthType.TLS.toString()});

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -916,7 +916,7 @@ public static Object setProperty(String propName, String propValue) {
      * @param namVec List of names, which are displayed in <code>combo</code>
      * @param name Name, that is to be selected. It has to be in <code>namVec</code>
      */
-    public static void selJComboBoxItem(Properties properties, JComboBox combo, Vector<?> namVec, String name) {
+    public static void selJComboBoxItem(Properties properties, JComboBox<?> combo, Vector<?> namVec, String name) {
         int idx = namVec.indexOf(name);
         combo.setSelectedIndex(idx);
         // Redisplay.

File: src/jorphan/org/apache/jorphan/gui/GuiUtils.java
Patch:
@@ -89,7 +89,7 @@ public static void fixSize(TableColumn column, JTable table) {
      * @param comboBox the combo box
      * @return the JComponent (margin+JLabel+margin+JComboBox)
      */
-    public static JComponent createLabelCombo(String label, JComboBox comboBox) {
+    public static JComponent createLabelCombo(String label, JComboBox<?> comboBox) {
         JPanel labelCombo = new JPanel();
         labelCombo.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
         JLabel caption = new JLabel(label);

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -71,7 +71,7 @@ public class HttpTestSampleGui extends AbstractSamplerGui {
 
     private JTextField sourceIpAddr; // does not apply to Java implementation
     
-    private JComboBox sourceIpType = new JComboBox(HTTPSamplerBase.getSourceTypeList());
+    private JComboBox<String> sourceIpType = new JComboBox<>(HTTPSamplerBase.getSourceTypeList());
 
     private final boolean isAJP;
     

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/AuthPanel.java
Patch:
@@ -428,7 +428,7 @@ private static class MechanismCellEditor extends DefaultCellEditor {
         private static final long serialVersionUID = 6085773573067229265L;
         
         public MechanismCellEditor() {
-            super(new JComboBox(Mechanism.values()));
+            super(new JComboBox<>(Mechanism.values()));
         }
     }
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPropertiesPanel.java
Patch:
@@ -342,7 +342,7 @@ private static class TypeCellEditor extends DefaultCellEditor {
         private static final long serialVersionUID = 1L;
 
         public TypeCellEditor() {
-            super(new JComboBox(new Object[]{
+            super(new JComboBox<>(new Object[]{
                     Boolean.class.getName(),
                     Byte.class.getName(),
                     Short.class.getName(),

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSSamplerGui.java
Patch:
@@ -99,7 +99,7 @@ public void clearGui() {// renamed from clear
         queueConnectionFactory.setText(""); // $NON-NLS-1$
         sendQueue.setText(""); // $NON-NLS-1$
         receiveQueue.setText(""); // $NON-NLS-1$
-        ((JComboBox) oneWay.getComponentList().get(1)).setSelectedItem(JMeterUtils.getResString("jms_request")); //$NON-NLS-1$
+        ((JComboBox<?>) oneWay.getComponentList().get(1)).setSelectedItem(JMeterUtils.getResString("jms_request")); //$NON-NLS-1$
         timeout.setText("");  // $NON-NLS-1$
         expiration.setText("");  // $NON-NLS-1$
         priority.setText("");  // $NON-NLS-1$
@@ -167,7 +167,7 @@ public void configure(TestElement el) {
         sendQueue.setText(sampler.getSendQueue());
         receiveQueue.setText(sampler.getReceiveQueue());
 
-        JComboBox box = (JComboBox) oneWay.getComponentList().get(1);
+        JComboBox<?> box = (JComboBox<?>) oneWay.getComponentList().get(1);
         String selected = null;
         if (sampler.isOneway()) {
             selected = JMeterUtils.getResString("jms_request"); //$NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -145,7 +145,7 @@ public class HTTPHC4Impl extends HTTPHCAbstractImpl {
         @Override
         public long getKeepAliveDuration(HttpResponse response, HttpContext context) {
             long duration = super.getKeepAliveDuration(response, context);
-            if (duration <= 0) {// none found by the superclass
+            if (duration <= 0 && IDLE_TIMEOUT > 0) {// none found by the superclass
                 log.debug("Setting keepalive to " + IDLE_TIMEOUT);
                 return IDLE_TIMEOUT;
             }

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -446,7 +446,7 @@ public void run() {
         }
 
         notifyTestListenersOfEnd(testListeners);
-
+        JMeterContextService.endTest();
         if (JMeter.isNonGUI() && SYSTEM_EXIT_FORCED) {
             log.info("Forced JVM shutdown requested at end of test");
             System.exit(0);

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -809,7 +809,8 @@ public void setEncodingAndType(String ct){
 
     // List of types that are known to be ascii, although they may appear to be binary
     private static final String[] NON_BINARY_TYPES = {
-        "video/f4m",       //$NON-NLS-1$ (Flash Media Manifest)
+        "audio/x-mpegurl",  //$NON-NLS-1$ (HLS Media Manifest)
+        "video/f4m"         //$NON-NLS-1$ (Flash Media Manifest)
         };
 
     /*

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -814,6 +814,7 @@ private void runNonGui(String testFile, String logFile, boolean remoteStart, Str
                 distributedRunner.setStdout(System.out);
                 distributedRunner.setStdErr(System.err);
                 distributedRunner.init(hosts, tree);
+                engines.addAll(distributedRunner.getEngines());
                 distributedRunner.start();
             }
             startUdpDdaemon(engines);

File: src/functions/org/apache/jmeter/functions/Random.java
Patch:
@@ -62,7 +62,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
         long min = Long.parseLong(minimum.execute().trim());
         long max = Long.parseLong(maximum.execute().trim());
 
-        long rand = ThreadLocalRandom.current().nextLong(min, max);
+        long rand = ThreadLocalRandom.current().nextLong(min, max+1);
 
         String randString = Long.toString(rand);
 

File: src/components/org/apache/jmeter/visualizers/RenderAsHTML.java
Patch:
@@ -95,7 +95,7 @@ protected void showRenderedResponse(String response, SampleResult res, boolean e
         /*
          * Get round problems parsing <META http-equiv='content-type'
          * content='text/html; charset=utf-8'> See
-         * http://issues.apache.org/bugzilla/show_bug.cgi?id=23315
+         * http://bz.apache.org/bugzilla/show_bug.cgi?id=23315
          *
          * Is this due to a bug in Java?
          */
@@ -111,7 +111,7 @@ protected void showRenderedResponse(String response, SampleResult res, boolean e
             resultsScrollPane.setViewportView(results);
         } catch (NumberFormatException e) {
             // Java Bug : http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=9001188.
-            // See https://issues.apache.org/bugzilla/show_bug.cgi?id=54586
+            // See https://bz.apache.org/bugzilla/show_bug.cgi?id=54586
             log.warn("An error occured rendering html code", e);
             results.setText("Failed to render HTML: " + e.getMessage() +", use Text renderer");            
         }

File: src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteBackendListenerClient.java
Patch:
@@ -155,7 +155,7 @@ private void addMetrics(long timestampInSeconds, String contextName, SamplerMetr
         graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_OK_COUNT, Integer.toString(metric.getSuccesses()));
         graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_KO_COUNT, Integer.toString(metric.getFailures()));
         graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_COUNT, Integer.toString(metric.getTotal()));
-        // See https://issues.apache.org/bugzilla/show_bug.cgi?id=57350
+        // See https://bz.apache.org/bugzilla/show_bug.cgi?id=57350
         if(metric.getTotal() > 0) { 
             if(metric.getSuccesses()>0) {
                 graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_OK_MIN_RESPONSE_TIME, Double.toString(metric.getOkMinTime()));

File: src/core/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -107,7 +107,7 @@ public void reset() {
     public void runTest() throws JMeterEngineException {
         log.info("running clientengine run method");
         
-        // See https://issues.apache.org/bugzilla/show_bug.cgi?id=55510
+        // See https://bz.apache.org/bugzilla/show_bug.cgi?id=55510
         JMeterContextService.clearTotalThreads();
         HashTree testTree = test;
 
@@ -123,7 +123,7 @@ public void runTest() throws JMeterEngineException {
             /*
              * Add fix for Deadlocks, see:
              * 
-             * See https://issues.apache.org/bugzilla/show_bug.cgi?id=48350
+             * See https://bz.apache.org/bugzilla/show_bug.cgi?id=48350
             */
             File baseDirRelative = FileServer.getFileServer().getBaseDirRelative();
             String scriptName = FileServer.getFileServer().getScriptName();

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeListener.java
Patch:
@@ -154,8 +154,8 @@ public void valueChanged(TreeSelectionEvent e) {
         currentPath = e.getNewLeadSelectionPath();
         // Call requestFocusInWindow to ensure current component loses focus and
         // all values are correctly saved
-        // see https://issues.apache.org/bugzilla/show_bug.cgi?id=55103
-        // see https://issues.apache.org/bugzilla/show_bug.cgi?id=55459
+        // see https://bz.apache.org/bugzilla/show_bug.cgi?id=55103
+        // see https://bz.apache.org/bugzilla/show_bug.cgi?id=55459
         tree.requestFocusInWindow();
         actionHandler.actionPerformed(new ActionEvent(this, 3333, ActionNames.EDIT)); // $NON-NLS-1$
     }

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -588,7 +588,7 @@ public AssertionResult[] getAssertionResults() {
      */
     public void addSubResult(SampleResult subResult) {
         if(subResult == null) {
-            // see https://issues.apache.org/bugzilla/show_bug.cgi?id=54778
+            // see https://bz.apache.org/bugzilla/show_bug.cgi?id=54778
             return;
         }
         String tn = getThreadName();

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java
Patch:
@@ -174,7 +174,7 @@ public void addSample(SampleResult sample) {
                 } 
                 // This part of code throws NullPointerException
                 // Don't think Monitor results can be loaded from files
-                // see https://issues.apache.org/bugzilla/show_bug.cgi?id=51810
+                // see https://bz.apache.org/bugzilla/show_bug.cgi?id=51810
 //                else {
 //                    noResponse(surl);
 //                }

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java
Patch:
@@ -218,7 +218,7 @@ public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL
             lagartoParser.parse(tagVisitor);
             return coll.iterator();
         } catch (LagartoException e) {
-            // TODO is it the best way ? https://issues.apache.org/bugzilla/show_bug.cgi?id=55634
+            // TODO is it the best way ? https://bz.apache.org/bugzilla/show_bug.cgi?id=55634
             if(log.isDebugEnabled()) {
                 log.debug("Error extracting embedded resource URLs from:'"+baseUrl+"', probably not text content, message:"+e.getMessage());
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/URLCollection.java
Patch:
@@ -92,7 +92,7 @@ public boolean addURL(String url, URL baseUrl) {
             }
             // No point in adding the URL as String as it will result in null 
             // returned during iteration, see URLString
-            // See https://issues.apache.org/bugzilla/show_bug.cgi?id=55092
+            // See https://bz.apache.org/bugzilla/show_bug.cgi?id=55092
             return false;
         }
         return b;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -271,7 +271,7 @@ public void run() {
              */
             if (headers != null) {
                 headers.removeHeaderNamed(HTTPConstants.HEADER_COOKIE);// Always remove cookies
-                // See https://issues.apache.org/bugzilla/show_bug.cgi?id=25430
+                // See https://bz.apache.org/bugzilla/show_bug.cgi?id=25430
                 // HEADER_AUTHORIZATION won't be removed, it will be used
                 // for creating Authorization Manager
                 // Remove additional headers

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -158,7 +158,7 @@ public long getKeepAliveDuration(HttpResponse response, HttpContext context) {
      * Special interceptor made to keep metrics when connection is released for some method like HEAD
      * Otherwise calling directly ((HttpConnection) localContext.getAttribute(ExecutionContext.HTTP_CONNECTION)).getMetrics();
      * would throw org.apache.http.impl.conn.ConnectionShutdownException
-     * See https://issues.apache.org/jira/browse/HTTPCLIENT-1081
+     * See https://bz.apache.org/jira/browse/HTTPCLIENT-1081
      */
     private static final HttpResponseInterceptor METRICS_SAVER = new HttpResponseInterceptor(){
         @Override

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1586,7 +1586,7 @@ protected HTTPSampleResult resultProcessing(boolean areFollowingRedirect, int fr
                 // downloaded for the sample made for the redirected url
                 // otherwise, use null so the container is created if necessary unless
                 // the flag is false, in which case revert to broken 2.1 behaviour 
-                // Bug 51939 -  https://issues.apache.org/bugzilla/show_bug.cgi?id=51939
+                // Bug 51939 -  https://bz.apache.org/bugzilla/show_bug.cgi?id=51939
                 if(!wasRedirected) {
                     HTTPSampleResult container = (HTTPSampleResult) (
                             areFollowingRedirect ? res.getParent() : SEPARATE_CONTAINER ? null : res);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerProxy.java
Patch:
@@ -66,7 +66,7 @@ protected HTTPSampleResult sample(URL u, String method, boolean areFollowingRedi
                 return errorResult(ex, new HTTPSampleResult());
             }
         }
-        // see https://issues.apache.org/bugzilla/show_bug.cgi?id=51380
+        // see https://bz.apache.org/bugzilla/show_bug.cgi?id=51380
         if(notifyFirstSampleAfterLoopRestart) {
             impl.notifyFirstSampleAfterLoopRestart();
             notifyFirstSampleAfterLoopRestart = false;

File: src/protocol/http/org/apache/jmeter/protocol/http/util/ConversionUtils.java
Patch:
@@ -99,7 +99,7 @@ public static String getEncodingFromContentType(String contentType){
      * @param location the location, possibly with extraneous leading "../"
      * @return URL with extraneous ../ removed
      * @throws MalformedURLException when the given <code>URL</code> is malformed
-     * @see <a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=46690">Bug 46690 - handling of 302 redirects with invalid relative paths</a>
+     * @see <a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=46690">Bug 46690 - handling of 302 redirects with invalid relative paths</a>
      */
     public static URL makeRelativeURL(URL baseURL, String location) throws MalformedURLException{
         URL initial = new URL(baseURL,location);
@@ -164,7 +164,7 @@ public static final URI sanitizeUrl(URL url) throws URISyntaxException {
      * 
      * @param url in which the '/..'s should be removed
      * @return collapsed URL
-     * @see <a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=49083">Bug 49083 - collapse /.. in redirect URLs</a>
+     * @see <a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=49083">Bug 49083 - collapse /.. in redirect URLs</a>
      */
     public static String removeSlashDotDot(String url)
     {

File: test/src/org/apache/jmeter/engine/util/TestValueReplacer.java
Patch:
@@ -132,7 +132,7 @@ public void testReplaceStringWithBackslash() throws Exception {
          * Here, the string contains a valid variable reference, so all
          * backslashes are also processed.
          * 
-         * See https://issues.apache.org/bugzilla/show_bug.cgi?id=53534
+         * See https://bz.apache.org/bugzilla/show_bug.cgi?id=53534
          */
         public void testReplaceFunctionWithBackslash() throws Exception {
             ValueReplacer replacer = new ValueReplacer();

File: test/src/org/apache/jmeter/protocol/http/modifier/TestAnchorModifier.java
Patch:
@@ -59,12 +59,12 @@ public void testProcessingHTMLFile(String HTMLFileName) throws Exception {
             result.setResponseData(new TextFile(System.getProperty("user.dir") + HTMLFileName).getText(), null);
             result.setSampleLabel(context.toString());
             result.setSamplerData(context.toString());
-            result.setURL(new URL("http://issues.apache.org/fakepage.html"));
+            result.setURL(new URL("http://bz.apache.org/fakepage.html"));
             jmctx.setPreviousResult(result);
             AnchorModifier modifier = new AnchorModifier();
             modifier.setThreadContext(jmctx);
             modifier.process();
-            assertEquals("http://issues.apache.org/bugzilla/buglist.cgi?"
+            assertEquals("http://bz.apache.org/bugzilla/buglist.cgi?"
                     + "bug_status=NEW&bug_status=ASSIGNED&bug_status=REOPENED"
                     + "&email1=&emailtype1=substring&emailassigned_to1=1"
                     + "&email2=&emailtype2=substring&emailreporter2=1" + "&bugidtype=include&bug_id=&changedin=&votes="
@@ -74,7 +74,7 @@ public void testProcessingHTMLFile(String HTMLFileName) throws Exception {
                     + "&keywords_type=anywords" + "&field0-0-0=noop&type0-0-0=noop&value0-0-0="
                     + "&cmdtype=doit&order=Reuse+same+sort+as+last+time", config.toString());
             config.recoverRunningVersion();
-            assertEquals("http://issues.apache.org/bugzilla/buglist.cgi?"
+            assertEquals("http://bz.apache.org/bugzilla/buglist.cgi?"
                     + "bug_status=.*&bug_status=.*&bug_status=.*&email1="
                     + "&emailtype1=substring&emailassigned_to1=1&email2=" + "&emailtype2=substring&emailreporter2=1"
                     + "&bugidtype=include&bug_id=&changedin=&votes=" + "&chfieldfrom=&chfieldto=Now&chfieldvalue="

File: src/components/org/apache/jmeter/visualizers/RenderAsJSON.java
Patch:
@@ -31,7 +31,7 @@ public class RenderAsJSON extends SamplerResultTab implements ResultRenderer {
 
     private static final String NORMAL_CHARACTER_REGEX = "[^\"\\\\]";  // $NON-NLS-1$
 
-    private static final String STRING_REGEX = "\"(" + ESC_CHAR_REGEX + "|" + NORMAL_CHARACTER_REGEX + ")*\""; // $NON-NLS-1$
+    private static final String STRING_REGEX = "\"(" + ESC_CHAR_REGEX + "|" + NORMAL_CHARACTER_REGEX + ")*+\""; // $NON-NLS-1$
 
     // This 'other value' regex is deliberately weak, even accepting an empty string, to be useful when reporting malformed data.
     private static final String OTHER_VALUE_REGEX = "[^\\{\\[\\]\\}\\,]*"; // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1383,7 +1383,9 @@ private String getUserAgent(HTTPSampleResult sampleResult) {
     private void setParentSampleSuccess(HTTPSampleResult res, boolean initialValue) {
         if(!IGNORE_FAILED_EMBEDDED_RESOURCES) {
             res.setSuccessful(initialValue);
-            res.setResponseMessage("Embedded resource download error"); //$NON-NLS-1$
+            if(!initialValue) {
+                res.setResponseMessage("Embedded resource download error"); //$NON-NLS-1$
+            }
         }
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1383,6 +1383,7 @@ private String getUserAgent(HTTPSampleResult sampleResult) {
     private void setParentSampleSuccess(HTTPSampleResult res, boolean initialValue) {
         if(!IGNORE_FAILED_EMBEDDED_RESOURCES) {
             res.setSuccessful(initialValue);
+            res.setResponseMessage("Embedded resource download error"); //$NON-NLS-1$
         }
     }
 

File: src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteBackendListenerClient.java
Patch:
@@ -108,8 +108,8 @@ protected void sendMetrics() {
                 metric.resetForTimeInterval();
             }
         }        
-        graphiteMetricsManager.addMetric(timestampInSeconds, CUMULATED_CONTEXT_NAME, METRIC_MIN_ACTIVE_THREADS, Integer.toString(getUserMetrics().getMaxActiveThreads()));
-        graphiteMetricsManager.addMetric(timestampInSeconds, CUMULATED_CONTEXT_NAME, METRIC_MAX_ACTIVE_THREADS, Integer.toString(getUserMetrics().getMinActiveThreads()));
+        graphiteMetricsManager.addMetric(timestampInSeconds, CUMULATED_CONTEXT_NAME, METRIC_MIN_ACTIVE_THREADS, Integer.toString(getUserMetrics().getMinActiveThreads()));
+        graphiteMetricsManager.addMetric(timestampInSeconds, CUMULATED_CONTEXT_NAME, METRIC_MAX_ACTIVE_THREADS, Integer.toString(getUserMetrics().getMaxActiveThreads()));
         graphiteMetricsManager.addMetric(timestampInSeconds, CUMULATED_CONTEXT_NAME, METRIC_MEAN_ACTIVE_THREADS, Integer.toString(getUserMetrics().getMeanActiveThreads()));
         graphiteMetricsManager.addMetric(timestampInSeconds, CUMULATED_CONTEXT_NAME, METRIC_STARTED_THREADS, Integer.toString(getUserMetrics().getStartedThreads()));
         graphiteMetricsManager.addMetric(timestampInSeconds, CUMULATED_CONTEXT_NAME, METRIC_STOPPED_THREADS, Integer.toString(getUserMetrics().getFinishedThreads()));

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -507,7 +507,7 @@ public static void loadTestResults(InputStream reader, ResultCollectorHelper res
 
     /**
      * Load a Test tree (JMX file)
-     * @param file the JMX file
+     * @param reader the JMX file as an {@link InputStream}
      * @return the loaded tree or null if an error occurs
      * @throws IOException if there is a problem reading the file or processing it
      * @deprecated use {@link SaveService}{@link #loadTree(File)}

File: src/core/org/apache/jmeter/control/gui/TestFragmentControllerGui.java
Patch:
@@ -46,6 +46,7 @@ public TestFragmentControllerGui() {
     @Override
     public TestElement createTestElement() {
         TestFragmentController controller = new TestFragmentController();
+        setEnabled(false);
         modifyTestElement(controller);
         return controller;
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HttpWebdav.java
Patch:
@@ -39,7 +39,9 @@ public final class HttpWebdav extends HttpEntityEnclosingRequestBase {
                     HTTPConstants.COPY,
                     HTTPConstants.MOVE,
                     HTTPConstants.LOCK,
-                    HTTPConstants.UNLOCK
+                    HTTPConstants.UNLOCK,
+                    HTTPConstants.REPORT,
+                    HTTPConstants.MKCALENDAR
             }));
     
     private String davMethod;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -238,7 +238,9 @@ public static final String[] getSourceTypeList() {
         HTTPConstants.COPY,
         HTTPConstants.MOVE,
         HTTPConstants.LOCK,
-        HTTPConstants.UNLOCK
+        HTTPConstants.UNLOCK,
+        HTTPConstants.REPORT,
+        HTTPConstants.MKCALENDAR
         };
 
     private static final List<String> METHODLIST = Collections.unmodifiableList(Arrays.asList(METHODS));

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java
Patch:
@@ -47,6 +47,8 @@ public interface HTTPConstantsInterface {
     String LOCK = "LOCK"; // $NON-NLS-1$
     String UNLOCK = "UNLOCK"; // $NON-NLS-1$
     String CONNECT = "CONNECT"; // $NON-NLS-1$
+    String REPORT = "REPORT"; // $NON-NLS-1$
+    String MKCALENDAR = "MKCALENDAR"; // $NON-NLS-1$
     String HEADER_AUTHORIZATION = "Authorization"; // $NON-NLS-1$
     String HEADER_COOKIE = "Cookie"; // $NON-NLS-1$
     String HEADER_CONNECTION = "Connection"; // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -898,7 +898,7 @@ public void setEmbeddedUrlRE(String regex) {
      * @return the modified sampling result containing details of the Exception.
      */
     protected HTTPSampleResult errorResult(Throwable e, HTTPSampleResult res) {
-        res.setSampleLabel("Error: " + res.getSampleLabel());
+        res.setSampleLabel(res.getSampleLabel());
         res.setDataType(SampleResult.TEXT);
         ByteArrayOutputStream text = new ByteArrayOutputStream(200);
         e.printStackTrace(new PrintStream(text));

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -213,7 +213,7 @@ public void actionPerformed(ActionEvent ev) {
             FileWriter writer = null;
             try {
                 writer = new FileWriter(chooser.getSelectedFile()); // TODO Charset ?
-                CSVSaveService.saveCSVStats(StatGraphVisualizer.getAllTableData(model),writer,
+                CSVSaveService.saveCSVStats(StatGraphVisualizer.getAllTableData(model, StatGraphVisualizer.FORMATS),writer,
                         saveHeaders.isSelected() ? StatGraphVisualizer.getLabels(StatGraphVisualizer.COLUMNS) : null);
             } catch (FileNotFoundException e) {
                 JMeterUtils.reportErrorToUser(e.getMessage(), "Error saving data");

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java
Patch:
@@ -168,7 +168,9 @@ public SampleResult sampleWithParser() {
             }
             count = thisCount;
             res = sample();
-            res.setSampleLabel(toString());
+            if(res != null) {
+                res.setSampleLabel(toString());
+            }
         } catch (Exception e) {
             log.warn("Sampling failure", e);
             return errorResult(e, new HTTPSampleResult());

File: test/src/org/apache/jorphan/test/AllTests.java
Patch:
@@ -380,7 +380,6 @@ private static TestSuite suite(String searchPaths) {
             log.error("", e);
         }
         System.out.println("Created: "+tests+" tests including "+suites+" suites");
-        System.exit(0);
         return suite;
     }
 }

File: src/components/org/apache/jmeter/visualizers/backend/AbstractBackendListenerClient.java
Patch:
@@ -92,8 +92,7 @@ protected Logger getLogger() {
      */
     @Override
     public SampleResult createSampleResult(BackendListenerContext context, SampleResult result) {
-        SampleResult sampleResult = (SampleResult) result.clone();
-        return sampleResult;
+        return result;
     }
 
     /**

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerClient.java
Patch:
@@ -118,7 +118,7 @@ public interface BackendListenerClient {
      * Create a copy of SampleResult, this method is here to allow customizing 
      * what is kept in the copy, for example copy could remove some useless fields.
      * Note that if your return null, sampler is not put in queue.
-     * Defaults to cloning
+     * Defaults to returning result.
      * @param context {@link BackendListenerContext}
      * @param result {@link SampleResult}
      * @return {@link SampleResult}

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerClient.java
Patch:
@@ -117,7 +117,8 @@ public interface BackendListenerClient {
     /**
      * Create a copy of SampleResult, this method is here to allow customizing 
      * what is kept in the copy, for example copy could remove some useless fields.
-     * Default to cloning
+     * Note that if your return null, sampler is not put in queue.
+     * Defaults to cloning
      * @param context {@link BackendListenerContext}
      * @param result {@link SampleResult}
      * @return {@link SampleResult}

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -182,7 +182,7 @@ private static boolean validateFormat(String format){
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String FILEVERSION = "1656250"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1656252"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -182,7 +182,7 @@ private static boolean validateFormat(String format){
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String FILEVERSION = "1641081"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1656250"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/core/org/apache/jmeter/gui/util/IconToolbarBean.java
Patch:
@@ -42,16 +42,16 @@ public final class IconToolbarBean {
      * @param strToSplit - the line value (i18n key, ActionNames ID, icon path, optional icon pressed path)
      * @throws JMeterException if error in parsing.
      */
-    IconToolbarBean(final String strToSplit) throws IllegalArgumentException {
+    IconToolbarBean(final String strToSplit, final String iconSize) throws IllegalArgumentException {
         if (strToSplit == null) {
             throw new IllegalArgumentException("Icon definition must not be null"); //$NON-NLS-1$
         }
         final String tmp[] = strToSplit.split(ICON_FIELD_SEP);
         if (tmp.length > 2) {
             this.i18nKey = tmp[0];
             this.actionName = tmp[1];
-            this.iconPath = tmp[2];
-            this.iconPathPressed = (tmp.length > 3) ? tmp[3] : tmp[2];
+            this.iconPath = tmp[2].replace("<SIZE>", iconSize); //$NON-NLS-1$
+            this.iconPathPressed = (tmp.length > 3) ? tmp[3].replace("<SIZE>", iconSize) : this.iconPath; //$NON-NLS-1$
         } else {
             throw new IllegalArgumentException("Incorrect argument format - expected at least 2 fields separated by " + ICON_FIELD_SEP);
         }

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223Sampler.java
Patch:
@@ -72,12 +72,12 @@ public SampleResult sample(Entry entry) {
                 result.setResponseData(ret.toString(), null);
             }
         } catch (IOException e) {
-            log.error("Problem in JSR223 script "+e, e);
+            log.error("Problem in JSR223 script "+getName()+", message:"+e, e);
             result.setSuccessful(false);
             result.setResponseCode("500"); // $NON-NLS-1$
             result.setResponseMessage(e.toString());
         } catch (ScriptException e) {
-            log.error("Problem in JSR223 script "+e, e);
+            log.error("Problem in JSR223 script "+getName()+", message:"+e, e);
             result.setSuccessful(false);
             result.setResponseCode("500"); // $NON-NLS-1$
             result.setResponseMessage(e.toString());

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -399,7 +399,7 @@ public static String getResponseAsString(SampleResult res) {
             // could warn the user
             // if this happens and revert the choice if he doesn't confirm
             // he's ready to wait.
-            int len = res.getResponseData().length;
+            int len = res.getResponseDataAsString().length();
             if (MAX_DISPLAY_SIZE > 0 && len > MAX_DISPLAY_SIZE) {
                 StringBuilder builder = new StringBuilder(MAX_DISPLAY_SIZE+100);
                 builder.append(JMeterUtils.getResString("view_results_response_too_large_message")) //$NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java
Patch:
@@ -52,7 +52,7 @@
  * this sampler, so that I can take production logs to simulate production
  * traffic in a test environment. Doing so is desirable to study odd or unusual
  * behavior. It's also good to compare a new system against an existing system
- * to get near apples- to-apples comparison. I've been asked if benchmarks are
+ * to get near apples-to-apples comparison. I've been asked if benchmarks are
  * really fair comparisons just about every single time, so this helps me
  * accomplish that task.
  * <p>

File: src/core/org/apache/jmeter/functions/gui/FunctionHelper.java
Patch:
@@ -35,7 +35,6 @@
 import javax.swing.JFrame;
 import javax.swing.JPanel;
 import javax.swing.JRootPane;
-import javax.swing.KeyStroke;
 import javax.swing.event.ChangeEvent;
 import javax.swing.event.ChangeListener;
 
@@ -76,7 +75,6 @@ public FunctionHelper() {
     @Override
     protected JRootPane createRootPane() {
         JRootPane rootPane = new JRootPane();
-        KeyStroke stroke = KeyStrokes.ESC;
         javax.swing.Action escapeAction = new AbstractAction("ESCAPE") { 
 
             private static final long serialVersionUID = -4036804004190858925L;
@@ -88,7 +86,7 @@ public void actionPerformed(ActionEvent actionEvent) {
         };
         rootPane.getActionMap().put(escapeAction.getValue(Action.NAME), escapeAction);
         InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
-        inputMap.put(stroke, escapeAction.getValue(Action.NAME));
+        inputMap.put(KeyStrokes.ESC, escapeAction.getValue(Action.NAME));
         return rootPane;
     }
 

File: src/core/org/apache/jmeter/gui/action/AddToTree.java
Patch:
@@ -45,7 +45,6 @@ public class AddToTree implements Command {
         commandSet = Collections.unmodifiableSet(commands);
     }
 
-
     public AddToTree() {
     }
 
@@ -76,15 +75,15 @@ public void doAction(ActionEvent e) {
             log.error("", err); // $NON-NLS-1$
             String msg = err.getMessage();
             if (msg == null) {
-                msg=err.toString();
+                msg = err.toString();
             }
             JMeterUtils.reportErrorToUser(msg);
         }
         catch (Exception err) {
             log.error("", err); // $NON-NLS-1$
             String msg = err.getMessage();
             if (msg == null) {
-                msg=err.toString();
+                msg = err.toString();
             }
             JMeterUtils.reportErrorToUser(msg);
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java
Patch:
@@ -308,11 +308,11 @@ public Object clone() {
                         initFilter();
                         s.filter = (Filter) ((TestCloneable) filter).clone();
                     }
-                    if(TestCloneable.class.isAssignableFrom(Class.forName(parserClassName)))
+                    if (TestCloneable.class.isAssignableFrom(Class.forName(parserClassName)))
                     {
                         instantiateParser();
                         s.PARSER = (LogParser)((TestCloneable)PARSER).clone();
-                        if(filter != null)
+                        if (filter != null)
                         {
                             s.PARSER.setFilter(s.filter);
                         }

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java
Patch:
@@ -92,7 +92,7 @@ private final void extractAttribute(Tag tag, String attributeName) {
          */
         @Override
         public void script(Tag tag, CharSequence body) {
-            if (!enabled.peek()) {
+            if (!enabled.peek().booleanValue()) {
                 return;
             }
             extractAttribute(tag, ATT_SRC);
@@ -105,7 +105,7 @@ public void script(Tag tag, CharSequence body) {
          */
         @Override
         public void tag(Tag tag) {
-            if (!enabled.peek()) {
+            if (!enabled.peek().booleanValue()) {
                 return;
             }
             TagType tagType = tag.getType();

File: src/components/org/apache/jmeter/control/IncludeController.java
Patch:
@@ -69,7 +69,7 @@ public Object clone() {
         IncludeController clone = (IncludeController) super.clone();
         clone.setIncludePath(this.getIncludePath());
         if (this.subtree != null) {
-            if (this.subtree.keySet().size() == 1) {
+            if (this.subtree.size() == 1) {
                 Iterator<Object> itr = this.subtree.keySet().iterator();
                 while (itr.hasNext()) {
                     this.sub = (TestElement) itr.next();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.TimeUnit;
 
 import javax.security.auth.Subject;
 
@@ -123,7 +124,6 @@
 import org.apache.jmeter.util.SSLManager;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
-import org.htmlparser.http.ConnectionManager;
 
 /**
  * HTTP Sampler using Apache HttpClient 4.x.
@@ -640,7 +640,7 @@ private HttpClient setupClient(URL url) {
         if (httpClient != null && resetSSLContext && HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(url.getProtocol())) {
             ((AbstractHttpClient) httpClient).clearRequestInterceptors(); 
             ((AbstractHttpClient) httpClient).clearResponseInterceptors(); 
-            httpClient.getConnectionManager().shutdown();
+            httpClient.getConnectionManager().closeIdleConnections(1L, TimeUnit.MICROSECONDS);
             httpClient = null;
             JsseSSLManager sslMgr = (JsseSSLManager) SSLManager.getInstance();
             sslMgr.resetContext();

File: src/core/org/apache/jmeter/samplers/DataStrippingSampleSender.java
Patch:
@@ -76,10 +76,10 @@ public void sampleOccurred(SampleEvent event) {
         SampleResult result = event.getResult();
         if(result.isSuccessful()) {
             // Compute bytes before stripping
-            stipResponse(result);
+            stripResponse(result);
             // see Bug 57449
             for (SampleResult subResult : result.getSubResults()) {
-                stipResponse(subResult);                
+                stripResponse(subResult);                
             }
         }
         if(decoratedSender == null)
@@ -100,7 +100,7 @@ public void sampleOccurred(SampleEvent event) {
      * Strip response but fill in bytes field.
      * @param result {@link SampleResult}
      */
-    private final void stipResponse(SampleResult result) {
+    private final void stripResponse(SampleResult result) {
         result.setBytes(result.getBytes());
         result.setResponseData(SampleResult.EMPTY_BA);
     }

File: src/components/org/apache/jmeter/visualizers/backend/AbstractBackendListenerClient.java
Patch:
@@ -88,7 +88,7 @@ protected Logger getLogger() {
     }
 
     /**
-     * @see org.apache.jmeter.visualizers.backend.BackendListenerClient#createSampleResult(org.apache.jmeter.samplers.SampleResult)
+     * {@inheritDoc}
      */
     @Override
     public SampleResult createSampleResult(BackendListenerContext context, SampleResult result) {

File: src/core/org/apache/jmeter/util/Calculator.java
Patch:
@@ -74,7 +74,6 @@ public void clear() {
      * 
      * @param newValue the value for the new sample
      * 
-     * @see #addValue(long, int)
      * @deprecated Use {@link #addSample(SampleResult)} instead
      */
     @Deprecated
@@ -121,7 +120,6 @@ public void addBytes(long newValue) {
      * Add details for a sample result, which may consist of multiple samples.
      * Updates the number of bytes read, error count, startTime and elapsedTime
      * @param res the sample result; might represent multiple values
-     * @see #addValue(long, int)
      */
     public void addSample(SampleResult res) {
         addBytes(res.getBytes());

File: src/core/org/apache/jmeter/config/gui/RowDetailDialog.java
Patch:
@@ -231,7 +231,7 @@ private void setValues(int selectedRow) {
 
     /**
      * Update model values
-     * @param actionEvent
+     * @param actionEvent the event that led to this call
      */
     protected void doUpdate(ActionEvent actionEvent) {
         tableModel.setValueAt(nameTF.getText(), selectedRow, 0);

File: src/core/org/apache/jmeter/control/ReplaceableController.java
Patch:
@@ -42,7 +42,7 @@ public interface ReplaceableController {
     /**
      * Compute the replacement tree.
      *
-     * @param context
+     * @param context the starting point of the replacement
      */
     void resolveReplacementSubTree(JMeterTreeNode context);
 }

File: src/core/org/apache/jmeter/gui/action/AbstractAction.java
Patch:
@@ -45,7 +45,7 @@ public void doAction(ActionEvent e) {
     abstract public Set<String> getActionNames();
 
     /**
-     * @param e
+     * @param e the event that led to the call of this method
      */
     protected void popupShouldSave(ActionEvent e) {
         log.debug("popupShouldSave");

File: src/core/org/apache/jmeter/samplers/AsynchSampleSender.java
Patch:
@@ -60,7 +60,9 @@ public class AsynchSampleSender extends AbstractSampleSender implements Serializ
 
     /**
      * Processed by the RMI server code.
-     * @throws ObjectStreamException  
+     *
+     * @return this
+     * @throws ObjectStreamException never
      */
     private Object readResolve() throws ObjectStreamException{
         int capacity = getCapacity();

File: src/core/org/apache/jmeter/samplers/StatisticalSampleSender.java
Patch:
@@ -203,7 +203,8 @@ private void sendBatch() throws RemoteException {
 
     /**
      * Processed by the RMI server code; acts as testStarted().
-     * @throws ObjectStreamException
+     * @return this
+     * @throws ObjectStreamException never
      */
     private Object readResolve() throws ObjectStreamException{
         if (isClientConfigured()) {

File: src/core/org/apache/jmeter/testbeans/BeanInfoSupport.java
Patch:
@@ -102,6 +102,9 @@ public abstract class BeanInfoSupport extends SimpleBeanInfo {
 
     /**
      * Construct a BeanInfo for the given class.
+     *
+     * @param beanClass
+     *            class for which to construct a BeanInfo
      */
     protected BeanInfoSupport(Class<? extends TestBean> beanClass) {
         this.beanClass= beanClass;

File: src/core/org/apache/jmeter/testelement/TestElement.java
Patch:
@@ -86,7 +86,8 @@ public interface TestElement extends Cloneable {
      * TestElement
      *
      * @param property
-     * @return boolean
+     *            the property to be tested
+     * @return <code>true</code> if property is temporary
      */
     boolean isTemporary(JMeterProperty property);
 

File: src/core/org/apache/jmeter/testelement/TestIterationListener.java
Patch:
@@ -29,7 +29,7 @@ public interface TestIterationListener {
      * This will be after the test elements have been cloned, so in general
      * the instance will not be the same as the ones the start/end methods call.
      *
-     * @param event
+     * @param event the iteration event
      */
     void testIterationStart(LoopIterationEvent event);
 }

File: src/core/org/apache/jmeter/threads/RemoteThreadsListener.java
Patch:
@@ -28,13 +28,13 @@ public interface RemoteThreadsListener extends java.rmi.Remote {
     
     /**
      * @see org.apache.jmeter.testelement.ThreadListener#threadStarted()
-     * @throws RemoteException
+     * @throws RemoteException when remote calling of the method fails
      */
     void threadStarted() throws RemoteException;
 
     /**
      * @see org.apache.jmeter.testelement.ThreadListener#threadFinished()
-     * @throws RemoteException
+     * @throws RemoteException when remote calling of the method fails
      */
     void threadFinished() throws RemoteException;
 }

File: src/core/org/apache/jmeter/threads/TestCompilerHelper.java
Patch:
@@ -40,7 +40,8 @@ public interface TestCompilerHelper {
      * Only for use by TestCompiler.
      * 
      * @param child
-     * @return true if the child was added
+     *            the {@link TestElement} to be added
+     * @return <code>true</code> if the child was added
      */
     boolean addTestElementOnce(TestElement child);
     

File: src/core/org/apache/jmeter/util/JSR223TestElement.java
Patch:
@@ -132,8 +132,8 @@ protected void populateBindings(Bindings bindings) {
      * @param scriptEngine ScriptEngine
      * @param bindings {@link Bindings} might be null
      * @return Object returned by script
-     * @throws IOException
-     * @throws ScriptException
+     * @throws IOException when reading the script fails
+     * @throws ScriptException when compiling or evaluation of the script fails
      */
     protected Object processFileOrScript(ScriptEngine scriptEngine, Bindings bindings) throws IOException, ScriptException {
         if (bindings == null) {

File: src/jorphan/org/apache/jorphan/test/UnitTestManager.java
Patch:
@@ -35,6 +35,7 @@ public interface UnitTestManager {
      * need to configure your system prior to the unit tests running.
      *
      * @param filename
+     *            path to the configuration file
      */
     void initializeProperties(String filename);
 }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/SamplerCreator.java
Patch:
@@ -49,7 +49,7 @@ HTTPSamplerBase createSampler(HttpRequestHdr request,
      * @param request {@link HttpRequestHdr}
      * @param pageEncodings Map of page encodings
      * @param formEncodings Map of form encodings
-     * @throws Exception
+     * @throws Exception when something fails
      */
     void populateSampler(HTTPSamplerBase sampler,
             HttpRequestHdr request, Map<String, String> pageEncodings,
@@ -75,7 +75,7 @@ void populateSampler(HTTPSamplerBase sampler,
      * @param pageEncodings Map of page encodings
      * @param formEncodings Map of form encodings
      * @return {@link HTTPSamplerBase}
-     * @throws Exception
+     * @throws Exception when something fails
      * @since 2.9
      */
     HTTPSamplerBase createAndPopulateSampler(HttpRequestHdr request,

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBaseConverter.java
Patch:
@@ -37,6 +37,8 @@ public class HTTPSamplerBaseConverter extends TestElementConverter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     *
+     * @return the version of this component
      */
     public static String getVersion() {
         return "$Revision$";  //$NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPResultConverter.java
Patch:
@@ -43,6 +43,8 @@ public class HTTPResultConverter extends SampleResultConverter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     *
+     * @return the version of this component
      */
     public static String getVersion() {
         return "$Revision$";  //$NON-NLS-1$

File: src/reports/org/apache/jmeter/JMeterReport.java
Patch:
@@ -296,7 +296,7 @@ public void startGui(CLOption testFile) {
 
     /**
      *
-     * @param args
+     * @param args the arguments to parse
      */
     public void start(String[] args) {
         CLArgsParser parser = new CLArgsParser(args, options);

File: src/reports/org/apache/jmeter/gui/ReportGuiPackage.java
Patch:
@@ -340,8 +340,6 @@ public TestElement createTestElement(String objClass) {
      * @throws IllegalAccessException
      *             if access rights do not allow the default constructor to be
      *             called
-     * @throws ClassNotFoundException
-     *             if the specified GUI class cannot be found
      */
     private JMeterGUIComponent getGuiFromCache(Class<?> guiClass, Class<?> testClass) throws InstantiationException,
             IllegalAccessException {
@@ -600,7 +598,7 @@ public void localeChanged(LocaleChangeEvent event) {
      * Sets the filepath of the current test plan. It's shown in the main frame
      * title and used on saving.
      *
-     * @param f
+     * @param f the path of the file to save the test plan
      */
     public void setReportPlanFile(String f) {
         reportPlanFile = f;

File: src/components/org/apache/jmeter/control/IncludeController.java
Patch:
@@ -118,6 +118,8 @@ public void resolveReplacementSubTree(JMeterTreeNode context) {
 
     /**
      * load the included elements using SaveService
+     *
+     * @return tree with loaded elements
      */
     protected HashTree loadIncludedElements() {
         // only try to load the JMX test plan if there is one

File: src/core/org/apache/jmeter/engine/util/FunctionParser.java
Patch:
@@ -51,6 +51,7 @@ class FunctionParser {
      * @param value string containing the function / variable references (if any)
      *
      * @return list of Strings or Objects representing functions
+     * @throws InvalidVariableException when evaluation of variables fail
      */
     LinkedList<Object> compileString(String value) throws InvalidVariableException {
         StringReader reader = new StringReader(value);
@@ -111,6 +112,7 @@ LinkedList<Object> compileString(String value) throws InvalidVariableException {
      *
      * @param reader points to input after the "${"
      * @return the function or variable object (or a String)
+     * @throws InvalidVariableException when evaluation of variables fail
      */
     Object makeFunction(StringReader reader) throws InvalidVariableException {
         char[] current = new char[1];
@@ -178,6 +180,7 @@ Object makeFunction(StringReader reader) throws InvalidVariableException {
      * </ul>
      * @param reader a StringReader pointing to the current input location, just after "("
      * @return a list of CompoundVariable elements
+     * @throws InvalidVariableException when evaluation of variables fail
      */
     LinkedList<CompoundVariable> parseParams(StringReader reader) throws InvalidVariableException {
         LinkedList<CompoundVariable> result = new LinkedList<CompoundVariable>();

File: src/core/org/apache/jmeter/gui/util/HeaderAsPropertyRenderer.java
Patch:
@@ -72,9 +72,9 @@ public Component getTableCellRendererComponent(JTable table, Object value,
     /**
      * Get the text for the value as the translation of the resource name.
      *
-     * @param value
-     * @param column
-     * @param row
+     * @param value value for which to get the translation
+     * @param column index which column message parameters should be used
+     * @param row not used
      * @return the text
      */
     protected String getText(Object value, int row, int column) {

File: src/jorphan/org/apache/jorphan/exec/StreamCopier.java
Patch:
@@ -39,7 +39,7 @@ class StreamCopier extends Thread {
 
     /**
      * @param is {@link InputStream}
-     * @param is {@link OutputStream}
+     * @param os {@link OutputStream}
      * @throws IOException 
      */
     StreamCopier(InputStream is, OutputStream os) throws IOException {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
Patch:
@@ -158,7 +158,9 @@ public String getCookieHeaderForURL(CollectionProperty cookiesCP, URL url,
     /**
      * Get array of valid HttpClient cookies for the URL
      *
+     * @param cookiesCP property with all available cookies
      * @param url the target URL
+     * @param allowVariableCookie flag whether cookies may contain jmeter variables
      * @return array of HttpClient cookies
      *
      */

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -137,7 +137,7 @@ public Proxy() {
      *            the ProxyControl which will receive the generated sampler
      * @param _pageEncodings
      *            reference to the Map of Deamon, with mappings from page urls to encoding used
-     * @param formEncodingsEncodings
+     * @param _formEncodings
      *            reference to the Map of Deamon, with mappings from form action urls to encoding used
      */
     void configure(Socket _clientSocket, ProxyControl _target, Map<String, String> _pageEncodings, Map<String, String> _formEncodings) {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -719,7 +719,8 @@ boolean filterUrl(HTTPSamplerBase sampler) {
      * Filter the response based on the content type.
      * If no include nor exclude filter is specified, the result will be included
      *
-     * @param result the sample result to check, true means result will be kept
+     * @param result the sample result to check
+     * @return <code>true</code> means result will be kept
      */
     boolean filterContentType(SampleResult result) {
         String includeExp = getContentTypeInclude();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
Patch:
@@ -214,6 +214,8 @@ protected HttpURLConnection setupConnection(URL u, String method, HTTPSampleResu
      *
      * @param conn
      *            URL from which to read response
+     * @param res
+     *            {@link SampleResult} to read response into
      * @return response content
      * @exception IOException
      *                if an I/O exception occurs

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/QueueExecutor.java
Patch:
@@ -32,9 +32,9 @@ public interface QueueExecutor {
      * Sends and receives a message.
      * 
      * @param request the message to send
-     * @param deliveryMode
-     * @param priority
-     * @param expiration
+     * @param deliveryMode the delivery mode to use
+     * @param priority the priority for this message
+     * @param expiration messages lifetime in ms
      * @return the received message or <code>null</code>
      * @throws JMSException
      *             in case of an exception from the messaging system

File: src/core/org/apache/jmeter/util/BeanShellTestElement.java
Patch:
@@ -134,7 +134,7 @@ public Object clone() {
      * @param bsh the interpreter, not {@code null}
      * @return the result of the script, may be {@code null}
      * 
-     * @throws JMeterException
+     * @throws JMeterException when working with the bsh fails
      */
     protected Object processFileOrScript(BeanShellInterpreter bsh) throws JMeterException{
         String fileName = getFilename();

File: src/core/org/apache/jmeter/visualizers/gui/AbstractVisualizer.java
Patch:
@@ -193,6 +193,8 @@ protected JCheckBox getErrorLoggingCheckbox() {
      * necessary if your visualizer requires a differently behaving
      * ResultCollector. Using these methods will allow maximum reuse of the
      * methods provided by AbstractVisualizer in this event.
+     *
+     * @return the associated collector
      */
     protected ResultCollector getModel() {
         return collector;
@@ -345,7 +347,7 @@ protected Container makeTitlePanel() {
      * model for the Visualizer. This is useful to allow maximum reuse of the
      * methods from AbstractVisualizer.
      *
-     * @param collector
+     * @param collector {@link ResultCollector} for the visualizer
      */
     protected void setModel(ResultCollector collector) {
         this.collector = collector;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -116,7 +116,7 @@ public final void populateSampler(HTTPSamplerBase sampler,
      * @param request {@link HttpRequestHdr}
      * @param pageEncodings Map of page encodings
      * @param formEncodings Map of form encodings
-     * @throws Exception
+     * @throws Exception when something fails
      */
     protected void computeFromHeader(HTTPSamplerBase sampler,
             HttpRequestHdr request, Map<String, String> pageEncodings,
@@ -141,7 +141,7 @@ protected void computeFromHeader(HTTPSamplerBase sampler,
      * Compute sampler informations from Request Header
      * @param sampler {@link HTTPSamplerBase}
      * @param request {@link HttpRequestHdr}
-     * @throws Exception
+     * @throws Exception when something fails
      */
     protected void computeFromPostBody(HTTPSamplerBase sampler,
             HttpRequestHdr request) throws Exception {
@@ -345,6 +345,7 @@ protected void computeContentEncoding(HTTPSamplerBase sampler,
      * @param request {@link HttpRequestHdr}
      * @param pageEncodings Map of page encodings
      * @param formEncodings Map of form encodings
+     * @param urlWithoutQuery the request URL without the query parameters
      * @return String content encoding
      */
     protected String computeContentEncoding(HttpRequestHdr request,

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/LogParser.java
Patch:
@@ -62,7 +62,7 @@ public interface LogParser {
      * clean it up is a bit tedious. One example of this is using the filter to
      * exclude any log entry that has a 505 response code.
      *
-     * @param filter
+     * @param filter {@link Filter} to use
      */
     void setFilter(Filter filter);
 
@@ -71,7 +71,7 @@ public interface LogParser {
      * using Class.newInstance(). Then the access log file is set using this
      * method.
      *
-     * @param source
+     * @param source name of the access log file
      */
     void setSourceFile(String source);
 }

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -249,6 +249,7 @@ public int parseAndConfigure(int count, TestElement el) {
      * @param breader {@link BufferedReader} to read lines from
      * @param el {@link TestElement} to read lines into
      * @param parseCount number of lines to read
+     * @return number of lines parsed
      */
     protected int parse(BufferedReader breader, TestElement el, int parseCount) {
         int actualCount = 0;
@@ -289,6 +290,7 @@ protected int parse(BufferedReader breader, TestElement el, int parseCount) {
      *
      * @param line single line to be parsed
      * @param el {@link TestElement} in which the line will be added
+     * @return number of lines parsed (zero or one, actually)
      */
     protected int parseLine(String line, TestElement el) {
         int count = 0;

File: src/reports/org/apache/jmeter/testelement/BarChart.java
Patch:
@@ -53,7 +53,9 @@ public void setURL(String url) {
 
     /**
      * Convert the data from SamplingStatCalculator to double array of array
+     * 
      * @param data
+     *            the data to convert
      * @return data values
      */
     public double[][] convertToDouble(List<SamplingStatCalculator> data) {

File: test/src/org/apache/jorphan/test/AllTests.java
Patch:
@@ -260,7 +260,7 @@ public static void main(String[] args) {
      * An overridable method that initializes the logging for the unit test run,
      * using the properties file passed in as the second argument.
      * 
-     * @param args
+     * @param args arguments to get the logging setup information from
      */
     protected static void initializeLogging(String[] args) {
         if (args.length >= 2) {
@@ -286,7 +286,7 @@ protected static void initializeLogging(String[] args) {
      * was specified in the command-line arguments), and hands it the name of
      * the properties file to use to configure the system.
      * 
-     * @param args
+     * @param args arguments with the initialization parameter
      */
     protected static void initializeManager(String[] args) {
         if (args.length >= 3) {

File: src/components/org/apache/jmeter/visualizers/backend/BackendListener.java
Patch:
@@ -466,7 +466,7 @@ public String getClassname() {
     /**
      * Sets the queue size
      *
-     * @param queueSize
+     * @param queueSize the size of the queue
      *            
      */
     public void setQueueSize(String queueSize) {

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerClient.java
Patch:
@@ -70,6 +70,7 @@ public interface BackendListenerClient {
      * @param context
      *            the context to run with. This provides access to
      *            initialization parameters.
+     * @throws Exception when setup fails
      */
     void setupTest(BackendListenerContext context) throws Exception;
 
@@ -100,6 +101,7 @@ public interface BackendListenerClient {
      * @param context
      *            the context to run with. This provides access to
      *            initialization parameters.
+     * @throws Exception when tear down fails
      */
     void teardownTest(BackendListenerContext context) throws Exception;
 

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerGui.java
Patch:
@@ -154,7 +154,7 @@ private JPanel createClassnamePanel() {
      * Handle action events for this component. This method currently handles
      * events for the classname combo box.
      *
-     * @param evt
+     * @param event
      *            the ActionEvent to be handled
      */
     @Override

File: src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteBackendListenerClient.java
Patch:
@@ -40,7 +40,7 @@
 
 /**
  * Graphite based Listener using Pickle Protocol
- * @see http://graphite.readthedocs.org/en/latest/overview.html
+ * @see <a href="http://graphite.readthedocs.org/en/latest/overview.html">Graphite Overview</a>
  * @since 2.13
  */
 public class GraphiteBackendListenerClient extends AbstractBackendListenerClient implements Runnable {

File: src/components/org/apache/jmeter/visualizers/backend/graphite/GraphiteMetricsSender.java
Patch:
@@ -43,9 +43,9 @@ final class MetricTuple {
      *      (timestamp, (prefix.contextName.metricName, metricValue))
      * And add it to the list of metrics. 
      * @param timestamp in Seconds from 1970
-     * @param contextName
-     * @param metricName
-     * @param metricValue
+     * @param contextName name of the context of this metric
+     * @param metricName name of this metric
+     * @param metricValue value of this metric
      */
     public abstract void addMetric(long timestamp, String contextName,
             String metricName, String metricValue);

File: src/components/org/apache/jmeter/visualizers/backend/graphite/SocketConnectionInfos.java
Patch:
@@ -27,8 +27,8 @@ public class SocketConnectionInfos {
     private int port;
     
     /**
-     * @param host
-     * @param port
+     * @param host the name of the host to connect to
+     * @param port the port to connect to
      */
     public SocketConnectionInfos(String host, int port) {
         super();

File: src/components/org/apache/jmeter/visualizers/backend/graphite/SocketOutputStream.java
Patch:
@@ -42,6 +42,8 @@ public SocketOutputStream(Socket socket) throws IOException {
 
     /**
      * Return the underlying Socket
+     *
+     * @return the underlying {@link Socket}
      */
     public Socket getSocket() {
         return socket;

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieHandler.java
Patch:
@@ -43,6 +43,7 @@ void addCookieFromHeader(CookieManager cookieManager, boolean checkCookies,
      * @param cookiesCP {@link CollectionProperty} of {@link Cookie}
      * @param url
      *            URL of the request to which the returned header will be added.
+     * @param allowVariableCookie flag whether to allow jmeter variables in cookie values
      * @return the value string for the cookie header (goes after "Cookie: ").
      */
     String getCookieHeaderForURL(CollectionProperty cookiesCP, URL url,

File: src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java
Patch:
@@ -219,6 +219,8 @@ public boolean isClearEachIteration() {
     /**
      * Clean DNS cache each iteration
      *
+     * @param clear
+     *            flag whether DNS cache should be cleared on each iteration
      */
     public void setClearEachIteration(boolean clear) {
         setProperty(new BooleanProperty(CLEAR_CACHE_EACH_ITER, clear));

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPFileArgsPanel.java
Patch:
@@ -149,7 +149,7 @@ private void sizeColumns(JTable table) {
     /**
      * Save the GUI data in the HTTPSamplerBase element.
      *
-     * @param testElement
+     * @param testElement {@link TestElement} to modify
      */
     public void modifyTestElement(TestElement testElement) {
         GuiUtils.stopTableEditing(table);

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserSequence.java
Patch:
@@ -57,6 +57,8 @@ public UserSequence() {
      * <P>
      * ie a Set of Mapped "parameter names and parameter values" for each user
      * to be loaded into the sequencer.
+     *
+     * @param allUsers users and parameter data to be used
      */
     public UserSequence(List<Map<String, String>> allUsers) {
         this.allUsers = allUsers;

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/JsoupBasedHtmlParser.java
Patch:
@@ -57,8 +57,8 @@ private static final class JMeterNodeVisitor implements NodeVisitor {
         private URLPointer baseUrl;
 
         /**
-         * @param baseUrl
-         * @param urls
+         * @param baseUrl base url to extract possibly missing information from urls found in <code>urls</code>
+         * @param urls collection of urls to consider
          */
         public JMeterNodeVisitor(final URLPointer baseUrl, URLCollection urls) {
             this.urls = urls;

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java
Patch:
@@ -68,9 +68,9 @@ private static final class JMeterTagVisitor extends EmptyTagVisitor {
         private Stack<Boolean> enabled = new Stack<Boolean>();
 
         /**
-         * @param baseUrl 
-         * @param urls 
-         * @param ieVersion 
+         * @param baseUrl base url to add possibly missing information to urls found in <code>urls</code>
+         * @param urls collection of urls to consider
+         * @param ieVersion version number of IE to emulate
          */
         public JMeterTagVisitor(final URLPointer baseUrl, URLCollection urls, Float ieVersion) {
             this.urls = urls;

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/RegexpHTMLParser.java
Patch:
@@ -141,7 +141,6 @@ protected RegexpHTMLParser() {
 
     /**
      * {@inheritDoc}
-     * @throws HTMLParseException 
      */
     @Override
     public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL baseUrl, URLCollection urls, String encoding) throws HTMLParseException {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/FormCharSetFinder.java
Patch:
@@ -53,7 +53,7 @@ public FormCharSetFinder() {
      * @param html the html to parse for form encodings
      * @param formEncodings the Map where form encodings should be added
      * @param pageEncoding the encoding used for the whole page
-     * @throws HTMLParseException
+     * @throws HTMLParseException when parsing the <code>html</code> fails
      */
     public void addFormActionsAndCharSet(String html, Map<String, String> formEncodings, String pageEncoding)
             throws HTMLParseException {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -105,6 +105,7 @@ public HttpRequestHdr(String httpSamplerName) {
      * @param in
      *            the stream to parse.
      * @return array of bytes from client.
+     * @throws IOException when reading the input stream fails
      */
     public byte[] parse(InputStream in) throws IOException {
         boolean inHeaders = true;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HttpWebdav.java
Patch:
@@ -46,8 +46,8 @@ public final class HttpWebdav extends HttpEntityEnclosingRequestBase {
 
     /**
      * 
-     * @param davMethod
-     * @param uri
+     * @param davMethod method to use (has to be a Webdav method as identified by {@link #isWebdavMethod(String)})
+     * @param uri {@link URI} to use
      */
     public HttpWebdav(final String davMethod, final URI uri) {
         super();
@@ -62,7 +62,7 @@ public String getMethod() {
 
     /**
      * @param method Http Method
-     * @return true if method is a Webdav one
+     * @return <code>true</code> if method is a Webdav one
      */
     public static boolean isWebdavMethod(String method) {
         return WEBDAV_METHODS.contains(method);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
Patch:
@@ -82,7 +82,7 @@ public String getXmlData() {
      * it's kinda obvious, but we state it anyways. Set the xml file with a
      * string path.
      *
-     * @param filename
+     * @param filename path to the xml file
      */
     public void setXmlFile(String filename) {
         setProperty(XML_DATA_FILE, filename);

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPResultConverter.java
Patch:
@@ -49,7 +49,7 @@ public static String getVersion() {
     }
 
     /**
-     * @param arg0
+     * @param arg0 the mapper
      */
     public HTTPResultConverter(Mapper arg0) {
         super(arg0);

File: src/protocol/http/org/apache/jmeter/protocol/http/util/WSDLException.java
Patch:
@@ -31,14 +31,14 @@ public WSDLException() {
     }
 
     /**
-     * @param message
+     * @param message detailed error message to include in exception
      */
     public WSDLException(String message) {
         super(message);
     }
 
     /**
-     * @param exception
+     * @param exception exception to extract the detailed message from and include that message as detailed message in this exception
      */
     public WSDLException(Exception exception) {
         super(exception.getMessage());

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/Generator.java
Patch:
@@ -118,6 +118,8 @@ public interface Generator {
      * method wouldn't return anything. If the generator is used by a control
      * element, it should return the correct Sampler class with the required
      * fields set.
+     *
+     * @return prefilled sampler
      */
     Object generateRequest();
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/LogParser.java
Patch:
@@ -49,8 +49,9 @@ public interface LogParser {
      * 0 is returned. If the method is subsequently called again, it will
      * restart parsing at the beginning.
      *
-     * @param count
-     * @return int
+     * @param count max lines to parse, or <code>-1</code> for the entire file
+     * @param el {@link TestElement} to read lines into
+     * @return number of lines parsed
      */
     int parseAndConfigure(int count, TestElement el);
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/OrderPreservingLogParser.java
Patch:
@@ -35,7 +35,7 @@ public OrderPreservingLogParser(String source) {
      * of lines parsed will depend the filter and number of lines in the log.
      * The method returns the actual lines parsed.
      * 
-     * @param count
+     * @param count number of max lines to read
      * @return lines parsed
      */
     @Override

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/StandardGenerator.java
Patch:
@@ -84,7 +84,7 @@ public StandardGenerator() {
 
     /**
      *
-     * @param file
+     * @param file name of a file (TODO seems not to be used anywhere)
      */
     public StandardGenerator(String file) {
         FILENAME = file;

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -130,7 +130,7 @@ public TCLogParser() {
     }
 
     /**
-     * @param source
+     * @param source name of the source file
      */
     public TCLogParser(String source) {
         setSourceFile(source);
@@ -159,6 +159,7 @@ public boolean decodeParameterValue() {
      * default, the parser uses the file in the log.
      *
      * @param file
+     *            flag whether to use the path from the log
      */
     public void setUseParsedFile(boolean file) {
         this.useFILE = file;

File: src/protocol/http/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java
Patch:
@@ -223,6 +223,7 @@ public void setSamplerResult(Object objectResult) {
 
     /**
      * @param query
+     *            query to parse for param and value pairs
      * @return Map params and Svalue
      */
     //TODO: move to utils class (JMeterUtils?)

File: test/src/org/apache/jmeter/JMeterVersionTest.java
Patch:
@@ -101,7 +101,7 @@ protected void setUp() throws Exception {
 
     /**
      * Check eclipse.classpath contains the jars declared in build.properties
-     * @throws Exception
+     * @throws Exception if something fails
      */
     public void testEclipse() throws Exception {
         final BufferedReader eclipse = new BufferedReader(

File: test/src/org/apache/jmeter/testelement/BarChartTest.java
Patch:
@@ -34,7 +34,7 @@ public class BarChartTest extends JMeterTestCase {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     /**
-     * @param arg0
+     * @param arg0 name of the test case
      */
     public BarChartTest(String arg0) {
         super(arg0);

File: test/src/org/apache/jmeter/testelement/LineGraphTest.java
Patch:
@@ -34,7 +34,7 @@ public class LineGraphTest extends JMeterTestCase {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     /**
-     * @param arg0
+     * @param arg0 name of the test case
      */
     public LineGraphTest(String arg0) {
         super(arg0);

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorHealthPanel.java
Patch:
@@ -69,6 +69,7 @@ public MonitorHealthPanel() {
     }
 
     /**
+     * @param model model to use
      *
      */
     public MonitorHealthPanel(MonitorAccumModel model) {
@@ -111,7 +112,7 @@ private void init() {// called from ctor, so must not be overridable
 
     /**
      *
-     * @param model
+     * @param model information about monitored server
      */
     @Override
     public void addSample(MonitorModel model) {

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorPerformancePanel.java
Patch:
@@ -112,6 +112,8 @@ public MonitorPerformancePanel() {
     }
 
     /**
+     * @param model model to use
+     * @param graph graph to use
      *
      */
     public MonitorPerformancePanel(MonitorAccumModel model, MonitorGraph graph) {

File: src/protocol/http/org/apache/jmeter/protocol/http/config/MultipartUrlConfig.java
Patch:
@@ -117,6 +117,8 @@ private void addNonEncodedArgument(String name, String value) {
      * This method allows a proxy server to send over the raw text from a
      * browser's output stream to be parsed and stored correctly into the
      * UrlConfig object.
+     *
+     * @param queryString text to parse
      */
     public void parseArguments(String queryString) {
         String[] parts = JOrphanUtils.split(queryString, "--" + getBoundary()); //$NON-NLS-1$

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/JDBCTestElementBeanInfoSupport.java
Patch:
@@ -27,7 +27,7 @@
 public abstract class JDBCTestElementBeanInfoSupport extends BeanInfoSupport {
 
     /**
-     *
+     * @param beanClass class to create bean info for
      */
     public JDBCTestElementBeanInfoSupport(Class<? extends TestBean> beanClass) {
         super(beanClass);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ClientPool.java
Patch:
@@ -44,7 +44,7 @@ public class ClientPool {
      * Add a ReceiveClient to the ClientPool. This is so that we can make sure
      * to close all clients and make sure all threads are destroyed.
      *
-     * @param client
+     * @param client the ReceiveClient to add
      */
     public static synchronized void addClient(Closeable client) {
         clients.add(client);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPropertiesPanel.java
Patch:
@@ -87,6 +87,9 @@ public TestElement createTestElement() {
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
      *
+     * @param el
+     *            the test element to modify
+     *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement el) {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSSamplerGui.java
Patch:
@@ -148,7 +148,7 @@ private void transfer(JMSSampler element) {
 
     /**
      *
-     * @param element
+     * @param element the test element being created
      */
     @Override
     public void modifyTestElement(TestElement element) {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -547,15 +547,15 @@ public void setJMSSelector(String selector) {
     }
     
     /**
-     * @param string
+     * @param string name of the initial context factory to use
      */
     public void setInitialContextFactory(String string) {
         setProperty(JNDI_INITIAL_CONTEXT_FACTORY, string);
 
     }
 
     /**
-     * @param string
+     * @param string url of the provider
      */
     public void setContextProvider(String string) {
         setProperty(JNDI_CONTEXT_PROVIDER_URL, string);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/TemporaryQueueExecutor.java
Patch:
@@ -41,6 +41,9 @@ public class TemporaryQueueExecutor implements QueueExecutor {
      * @param destination
      *            the queue to send the message on
      * @throws JMSException
+     *             when internally used {@link QueueRequestor} can not be
+     *             constructed with <code>session</code> and
+     *             <code>destination</code>
      */
     public TemporaryQueueExecutor(QueueSession session, Queue destination) throws JMSException {
         requestor = new QueueRequestor(session, destination);

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java
Patch:
@@ -342,7 +342,7 @@ public boolean isSuppressSubject() {
     /**
      * Sets the property that defines if the subject header should be suppressed
      *
-     * @param emptySubject
+     * @param emptySubject flag whether subject header should be suppressed
      *
      */
     public void setSuppressSubject(boolean emptySubject) {
@@ -379,7 +379,7 @@ public boolean isUseAuth() {
     /**
      * Set whether mail server needs auth.
      *
-     * @param selected
+     * @param selected flag whether mail server needs auth
      */
     public void setUseAuth(boolean selected){
         cbUseAuth.setSelected(selected);

File: src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/config/MongoDBHolder.java
Patch:
@@ -42,8 +42,8 @@ public static DB getDBFromSource(String varName, String dbName) {
      * Get access to MongoDB object
      * @param varName String MongoDB source
      * @param dbName Mongo DB database name
-     * @param login
-     * @param password 
+     * @param login name to use for login
+     * @param password password to use for login
      * @return {@link DB}
      */
     public static DB getDBFromSource(String varName, String dbName, String login, String password) {

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/BinaryTCPClientImpl.java
Patch:
@@ -115,7 +115,7 @@ public void write(OutputStream os, InputStream is) {
      * the end of the stream is reached.
      * Response data is converted to hex-encoded binary
      * @return hex-encoded binary string
-     * @throws ReadException 
+     * @throws ReadException when reading fails
      */
     @Override
     public String read(InputStream is) throws ReadException {

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPClient.java
Patch:
@@ -49,6 +49,7 @@ public interface TCPClient {
      *            OutputStream for socket
      * @param is -
      *            InputStream to be written to Socket
+     * @throws IOException when writing fails
      */
     void write(OutputStream os, InputStream is) throws IOException;
 
@@ -58,6 +59,7 @@ public interface TCPClient {
      *            OutputStream for socket
      * @param s -
      *            String to write
+     * @throws IOException when writing fails
      */
     void write(OutputStream os, String s) throws IOException;
 

File: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
Patch:
@@ -394,7 +394,7 @@ private void appendMultiPart(SampleResult child, StringBuilder cdata,
      * server. Either MailReaderSampler.TYPE_IMAP[S] or
      * MailReaderSampler.TYPE_POP3[S]. Default is MailReaderSampler.TYPE_POP3.
      *
-     * @param serverType
+     * @param serverType protocol to use
      */
     public void setServerType(String serverType) {
         setProperty(SERVER_TYPE, serverType);
@@ -454,7 +454,7 @@ public String getUserName() {
     }
 
     /**
-     * @param password
+     * @param password the password to use
      */
     public void setPassword(String password) {
         setProperty(PASSWORD, password);

File: src/protocol/http/org/apache/jmeter/protocol/http/util/DOMPool.java
Patch:
@@ -54,7 +54,7 @@ public final class DOMPool {
     /**
      * Return a document.
      *
-     * @param key
+     * @param key key of the document
      * @return Document
      */
     public static Document getDocument(Object key) {
@@ -64,8 +64,8 @@ public static Document getDocument(Object key) {
     /**
      * Add an object to the cache.
      *
-     * @param key
-     * @param data
+     * @param key key of the document
+     * @param data Document to store
      */
     public static void putDocument(Object key, Document data) {
         MEMCACHE.put(key, data);

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -481,7 +481,7 @@ private static byte toHexChar(byte in){
      * @param length number of bytes to read
      *
      * @return the number of bytes actually read
-     * @throws IOException
+     * @throws IOException if some I/O errors occur
      */
     public static int read(InputStream is, byte[] buffer, int offset, int length) throws IOException {
         int remaining = length;

File: src/core/org/apache/jmeter/reporters/Summariser.java
Patch:
@@ -42,12 +42,12 @@
 /**
  * Generate a summary of the test run so far to the log file and/or standard
  * output. Both running and differential totals are shown. Output is generated
- * every n seconds (default 3 minutes) on the appropriate time boundary, so that
+ * every n seconds (default 30 seconds (property summariser.interval)) on the appropriate time boundary, so that
  * multiple test runs on the same time will be synchronised.
  *
  * This is mainly intended for batch (non-GUI) runs
- *
- * Note that the RunningSample start and end times relate to the samples,
+ * FIXME : Docs below are outdated, need fixing
+ * Note that the {@link SummariserRunningSample} start and end times relate to the samples,
  * not the reporting interval.
  *
  * Since the first sample in a delta is likely to have started in the previous reporting interval,

File: src/core/org/apache/jmeter/util/BeanShellInterpreter.java
Patch:
@@ -101,6 +101,7 @@ public BeanShellInterpreter() throws ClassNotFoundException {
      *
      * @param init initialisation file
      * @param _log logger to pass to interpreter
+     * @throws ClassNotFoundException when beanshell can not be instantiated
      */
     public BeanShellInterpreter(String init, Logger _log)  throws ClassNotFoundException {
         initFile = init;

File: src/core/org/apache/jmeter/util/ColorHelper.java
Patch:
@@ -38,6 +38,8 @@ private ColorHelper() {
      * If all the components are the same value increment in the order of red,
      * green and blue.
      *
+     * @param col
+     *            {@link Color} to start with
      * @param inc
      *            value to increment the color components
      * @return the color after change

File: src/core/org/apache/jmeter/util/NameUpdater.java
Patch:
@@ -181,7 +181,7 @@ private NameUpdater() {
      * {@link org.apache.jmeter.save.SaveService#checkClasses() SaveService#checkClasses()}
      * only.
      * 
-     * @param key
+     * @param key name of the key to check
      * @return true if the key is in the map
      */
     public static boolean isMapped(String key) {

File: src/core/org/apache/jmeter/visualizers/Sample.java
Patch:
@@ -208,6 +208,7 @@ public long getStartTime() {
     }
 
     /**
+     * @param format the format of the time to be used
      * @return the start time using the specified format
      * Intended for use from Functors
      */

File: src/core/org/apache/jmeter/visualizers/TableSample.java
Patch:
@@ -98,6 +98,7 @@ public long getStartTime() {
     }
 
     /**
+     * @param format the format to be used on the time
      * @return the start time using the specified format
      * Intended for use from Functors
      */

File: src/core/org/apache/jmeter/visualizers/Visualizer.java
Patch:
@@ -33,6 +33,9 @@ public interface Visualizer {
     /**
      * This method is called by sampling thread to inform the visualizer about
      * the arrival of a new sample.
+     *
+     * @param sample
+     *            the newly arrived sample
      */
     void add(SampleResult sample);
 

File: src/functions/org/apache/jmeter/functions/FileWrapper.java
Patch:
@@ -179,7 +179,9 @@ private String getColumn(int col) {
      * Gets the current row number (mainly for error reporting)
      *
      * @param file
-     * @return the current row number for this thread
+     *            name of the file for which the row number is asked
+     * @return the current row number for this thread, or <code>-1</code> if
+     *         <code>file</code> was not opened yet
      */
     public static int getCurrentRow(String file) {
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -991,7 +991,7 @@ private JMeterTreeNode findFirstNodeOfType(Class<?> type) {
      * @return the tree node for the controller where the proxy must store the
      *         generated samplers.
      */
-    private JMeterTreeNode findTargetControllerNode() {
+    public JMeterTreeNode findTargetControllerNode() {
         JMeterTreeNode myTarget = getTarget();
         if (myTarget != null) {
             return myTarget;

File: src/core/org/apache/jmeter/testelement/WorkBench.java
Patch:
@@ -29,6 +29,8 @@ public class WorkBench extends AbstractTestElement {
 
     /**
      * Constructor for the WorkBench object.
+     * @param name the name of this element
+     * @param isRootNode IGNORED
      */
     public WorkBench(String name, boolean isRootNode) {
         setName(name);

File: src/core/org/apache/jmeter/testelement/property/JMeterProperty.java
Patch:
@@ -61,6 +61,8 @@ public interface JMeterProperty extends Serializable, Cloneable, Comparable<JMet
     /**
      * Tell the property to revert to the state at the time
      * setRunningVersion(true) was called.
+     *
+     * @param owner the owning element
      */
     void recoverRunningVersion(TestElement owner);
 

File: src/core/org/apache/jmeter/testelement/property/MultiProperty.java
Patch:
@@ -47,6 +47,8 @@ public MultiProperty(String name) {
 
     /**
      * Add a property to the collection.
+     *
+     * @param prop the {@link JMeterProperty} to add
      */
     public abstract void addProperty(JMeterProperty prop);
 

File: src/core/org/apache/jmeter/testelement/property/NullProperty.java
Patch:
@@ -71,6 +71,9 @@ public boolean isRunningVersion() {
 
     /**
      * see JMeterProperty#isTemporary(TestElement)
+     * <p>TODO seems to be a relic from the past.
+     * @param owner IGNORED
+     * @return always <code>true</code>
      */
     public boolean isTemporary(TestElement owner) {
         return true;

File: src/core/org/apache/jmeter/threads/AbstractThreadGroup.java
Patch:
@@ -194,6 +194,8 @@ void decrNumberOfThreads() {
 
     /**
      * Get the number of active threads
+     *
+     * @return the number of active threads
      */
     public int getNumberOfThreads() {
         return numberOfThreads.get();

File: src/core/org/apache/jmeter/threads/JMeterContext.java
Patch:
@@ -164,8 +164,10 @@ public void setSamplingStarted(boolean b) {
     }
 
     /**
-     * if set to true a restart of the loop will occurs
+     * if set to <code>true</code> a restart of the loop will occurs
+     *
      * @param restartNextLoop
+     *            flag whether restart will occur
      */
     public void setRestartNextLoop(boolean restartNextLoop) {
         this.restartNextLoop = restartNextLoop;

File: src/core/org/apache/jmeter/threads/RemoteThreadsListener.java
Patch:
@@ -33,7 +33,8 @@ public interface RemoteThreadsListener extends java.rmi.Remote {
     void threadStarted() throws RemoteException;
 
     /**
-     * @see org.apache.jmeter.testelement.ThreadListener#threadStarted()
+     * @see org.apache.jmeter.testelement.ThreadListener#threadFinished()
+     * @throws RemoteException
      */
     void threadFinished() throws RemoteException;
 }

File: src/core/org/apache/jmeter/threads/RemoteThreadsListenerImpl.java
Patch:
@@ -52,7 +52,7 @@ public class RemoteThreadsListenerImpl extends UnicastRemoteObject implements
             JMeterUtils.getPropDefault("client.rmi.localport", 0); // $NON-NLS-1$
 
     /**
-     * @throws RemoteException
+     * @throws RemoteException if failed to export object
      */
     public RemoteThreadsListenerImpl() throws RemoteException {
         super(DEFAULT_LOCAL_PORT);

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -128,7 +128,7 @@ public SamplePackage configureTransactionSampler(TransactionSampler transactionS
 
     /**
      * Reset pack to its initial state
-     * @param pack
+     * @param pack the {@link SamplePackage} to reset
      */
     public void done(SamplePackage pack) {
         pack.recoverRunningVersion();

File: src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java
Patch:
@@ -45,13 +45,15 @@ public class TestResultWrapperConverter extends AbstractCollectionConverter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     *
+     * @return the version of this converter
      */
     public static String getVersion() {
         return "$Revision$";  //$NON-NLS-1$
     }
 
     /**
-     * @param arg0
+     * @param arg0 the {@link Mapper} to be used
      */
     public TestResultWrapperConverter(Mapper arg0) {
         super(arg0);

File: src/core/org/apache/jmeter/testbeans/gui/ComboStringEditor.java
Patch:
@@ -262,7 +262,7 @@ public String[] getTags() {
     }
 
     /**
-     * @param object
+     * @param object the initial edit value
      */
     public void setInitialEditValue(String object) {
         initialEditValue = object;

File: src/core/org/apache/jmeter/save/converters/BooleanPropertyConverter.java
Patch:
@@ -41,7 +41,7 @@ public static String getVersion() {
     /** {@inheritDoc} */
     @Override
     public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) {// superclass does not use types
-        return arg0.equals(BooleanProperty.class);
+        return BooleanProperty.class.equals(arg0);
     }
 
     /** {@inheritDoc} */

File: src/core/org/apache/jmeter/save/converters/IntegerPropertyConverter.java
Patch:
@@ -41,7 +41,7 @@ public static String getVersion() {
     /** {@inheritDoc} */
     @Override
     public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
-        return arg0.equals(IntegerProperty.class);
+        return IntegerProperty.class.equals(arg0);
     }
 
     /** {@inheritDoc} */

File: src/core/org/apache/jmeter/save/converters/LongPropertyConverter.java
Patch:
@@ -41,7 +41,7 @@ public static String getVersion() {
     /** {@inheritDoc} */
     @Override
     public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
-        return arg0.equals(LongProperty.class);
+        return LongProperty.class.equals(arg0);
     }
 
     /** {@inheritDoc} */

File: src/core/org/apache/jmeter/save/converters/MultiPropertyConverter.java
Patch:
@@ -46,7 +46,7 @@ public static String getVersion() {
     /** {@inheritDoc} */
     @Override
     public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
-        return arg0.equals(CollectionProperty.class) || arg0.equals(MapProperty.class);
+        return CollectionProperty.class.equals(arg0) || MapProperty.class.equals(arg0);
     }
 
     /** {@inheritDoc} */

File: src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java
Patch:
@@ -113,7 +113,7 @@ public static String getVersion() {
     /** {@inheritDoc} */
     @Override
     public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) {
-        return arg0.equals(SampleSaveConfiguration.class);
+        return SampleSaveConfiguration.class.equals(arg0);
     }
 
     /** {@inheritDoc} */

File: src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java
Patch:
@@ -53,7 +53,7 @@ public static String getVersion() {
     /** {@inheritDoc} */
     @Override
     public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
-        return arg0.equals(TestElementProperty.class);
+        return TestElementProperty.class.equals(arg0);
     }
 
     /** {@inheritDoc} */

File: src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java
Patch:
@@ -60,7 +60,7 @@ public TestResultWrapperConverter(Mapper arg0) {
     /** {@inheritDoc} */
     @Override
     public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
-        return arg0.equals(TestResultWrapper.class);
+        return TestResultWrapper.class.equals(arg0);
     }
 
     /** {@inheritDoc} */

File: src/core/org/apache/jmeter/save/converters/BooleanPropertyConverter.java
Patch:
@@ -31,6 +31,8 @@ public class BooleanPropertyConverter implements Converter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     * 
+     * @return the version of this converter
      */
     public static String getVersion() {
         return "$Revision$"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/save/converters/HashTreeConverter.java
Patch:
@@ -32,6 +32,8 @@ public class HashTreeConverter extends AbstractCollectionConverter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     * 
+     * @return the version of this converter
      */
     public static String getVersion() {
         return "$Revision$";  //$NON-NLS-1$

File: src/core/org/apache/jmeter/save/converters/IntegerPropertyConverter.java
Patch:
@@ -31,6 +31,8 @@ public class IntegerPropertyConverter implements Converter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     * 
+     * @return the version of this converter
      */
     public static String getVersion() {
         return "$Revision$"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/save/converters/LongPropertyConverter.java
Patch:
@@ -31,6 +31,8 @@ public class LongPropertyConverter implements Converter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     * 
+     * @return the version of this converter
      */
     public static String getVersion() {
         return "$Revision$"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/save/converters/MultiPropertyConverter.java
Patch:
@@ -36,6 +36,8 @@ public class MultiPropertyConverter extends AbstractCollectionConverter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     * 
+     * @return the version of this converter
      */
     public static String getVersion() {
         return "$Revision$";  //$NON-NLS-1$
@@ -76,7 +78,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
     }
 
     /**
-     * @param arg0
+     * @param arg0 the mapper
      */
     public MultiPropertyConverter(Mapper arg0) {
         super(arg0);

File: src/core/org/apache/jmeter/save/converters/SampleEventConverter.java
Patch:
@@ -33,6 +33,8 @@ public class SampleEventConverter implements Converter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     * 
+     * @return the version of this converter
      */
     public static String getVersion() {
         return "$Revision$"; //$NON-NLS-1$

File: src/core/org/apache/jmeter/save/converters/SampleResultConverter.java
Patch:
@@ -98,6 +98,8 @@ public class SampleResultConverter extends AbstractCollectionConverter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     * 
+     * @return the version of this converter
      */
     public static String getVersion() {
         return "$Revision$"; //$NON-NLS-1$
@@ -416,7 +418,7 @@ protected void readFile(String resultFileName, SampleResult res) {
 
 
     /**
-     * @param arg0
+     * @param arg0 the mapper
      */
     public SampleResultConverter(Mapper arg0) {
         super(arg0);

File: src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java
Patch:
@@ -103,6 +103,8 @@ public SampleSaveConfigurationConverter(Mapper arg0) {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     * 
+     * @return the version of this converter
      */
     public static String getVersion() {
         return "$Revision$"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/save/converters/StringPropertyConverter.java
Patch:
@@ -31,6 +31,8 @@ public class StringPropertyConverter implements Converter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     * 
+     * @return the version of this converter
      */
     public static String getVersion() {
         return "$Revision$"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/save/converters/TestElementConverter.java
Patch:
@@ -41,6 +41,8 @@ public class TestElementConverter extends AbstractCollectionConverter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     * 
+     * @return the version of this converter
      */
     public static String getVersion() {
         return "$Revision$"; //$NON-NLS-1$
@@ -121,7 +123,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
     }
 
     /**
-     * @param arg0
+     * @param arg0 the mapper
      */
     public TestElementConverter(Mapper arg0) {
         super(arg0);

File: src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java
Patch:
@@ -43,6 +43,8 @@ public class TestElementPropertyConverter extends AbstractCollectionConverter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     * 
+     * @return the version of this converter
      */
     public static String getVersion() {
         return "$Revision$"; // $NON-NLS-1$
@@ -136,7 +138,7 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
     }
 
     /**
-     * @param arg0
+     * @param arg0 the mapper
      */
     public TestElementPropertyConverter(Mapper arg0) {
         super(arg0);

File: src/core/org/apache/jmeter/samplers/StatisticalSampleResult.java
Patch:
@@ -43,8 +43,8 @@ public StatisticalSampleResult(){// May be called by XStream
      *
      * @deprecated Needs to be replaced when multiple sample results are sorted out
      *
-     * @param stamp
-     * @param elapsed
+     * @param stamp this may be a start time or an end time (both in milliseconds)
+     * @param elapsed time in milliseconds
      */
     @Deprecated
     public StatisticalSampleResult(long stamp, long elapsed) {

File: src/core/org/apache/jmeter/save/ScriptWrapperConverter.java
Patch:
@@ -43,6 +43,8 @@ public class ScriptWrapperConverter implements Converter {
     /**
      * Returns the converter version; used to check for possible
      * incompatibilities
+     * 
+     * @return the version of the converter
      */
     public static String getVersion() {
         return "$Revision$"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/samplers/SampleEvent.java
Patch:
@@ -20,8 +20,7 @@
 
 import java.io.Serializable;
 import java.util.Arrays;
-
-import org.apache.jmeter.protocol.http.proxy.ProxyControl;
+    
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
@@ -83,7 +82,8 @@ public SampleEvent() {
     /**
      * Creates SampleEvent without saving any variables.
      * <p>
-     * Use by {@link ProxyControl} and {@link StatisticalSampleSender}.
+     * Use by {@link org.apache.jmeter.protocol.http.proxy.ProxyControl
+     * ProxyControl} and {@link StatisticalSampleSender}.
      *
      * @param result
      *            The SampleResult to be associated with this event

File: src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -448,16 +448,14 @@ private boolean isStripPort(URL url) {
     }
 
     /**
-     * Check if two authorization objects are equal
+     * Check if two authorization objects are equal ignoring username/password
      * @param a {@link Authorization}
      * @param b {@link Authorization}
      * @return true if a and b match
      */
     private boolean match(Authorization a, Authorization b){
         return
                 a.getURL().equals(b.getURL())&&
-                a.getName().equals(b.getName())&&
-                a.getPass().equals(b.getPass())&&
                 a.getDomain().equals(b.getDomain())&&
                 a.getRealm().equals(b.getRealm())&&
                 a.getMechanism().equals(b.getMechanism());

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -267,7 +267,9 @@ public void run() {
              */
             if (headers != null) {
                 headers.removeHeaderNamed(HTTPConstants.HEADER_COOKIE);// Always remove cookies
-                headers.removeHeaderNamed(HTTPConstants.HEADER_AUTHORIZATION);// Always remove authorization
+                // See https://issues.apache.org/bugzilla/show_bug.cgi?id=25430
+                // HEADER_AUTHORIZATION won't be removed, it will be used
+                // for creating Authorization Manager
                 // Remove additional headers
                 for(String hdr : HEADERS_TO_REMOVE){
                     headers.removeHeaderNamed(hdr);

File: src/components/org/apache/jmeter/visualizers/backend/SamplerMetric.java
Patch:
@@ -45,9 +45,9 @@ public SamplerMetric() {
      */
     public synchronized void add(SampleResult result) {
         if(result.isSuccessful()) {
-            successes++;
+            successes+=result.getSampleCount()-result.getErrorCount();
         } else {
-            failures++;
+            failures+=result.getErrorCount();
         }
         long time = result.getTime();
         if(result.isSuccessful()) {

File: src/core/org/apache/jmeter/NewDriver.java
Patch:
@@ -37,7 +37,7 @@
  */
 public final class NewDriver {
 
-    private static final String CLASSPATH_SEPARATOR = System.getProperty("path.separator");// $NON-NLS-1$
+    private static final String CLASSPATH_SEPARATOR = File.pathSeparator;
 
     private static final String OS_NAME = System.getProperty("os.name");// $NON-NLS-1$
 

File: src/core/org/apache/jmeter/gui/util/FileDialoger.java
Patch:
@@ -189,7 +189,7 @@ public static JFileChooser promptToSaveFile(String filename, String[] extensions
         String ext = ".jmx";//$NON-NLS-1$
         if (filename != null) {
             jfc.setDialogTitle(filename);
-            jfc.setSelectedFile(filename.lastIndexOf(System.getProperty("file.separator")) > 0 ?
+            jfc.setSelectedFile(filename.lastIndexOf(File.separator) > 0 ?
                     new File(filename) :
                     new File(lastJFCDirectory, filename));
             int i = -1;

File: src/jorphan/org/apache/jorphan/reflect/ClassFinder.java
Patch:
@@ -315,8 +315,7 @@ public static List<String> findClassesThatExtend(String[] searchPathsOrJars,
     private static List<String> getClasspathMatches(String[] strPathsOrJars) {
         final String javaClassPath = System.getProperty("java.class.path"); // $NON-NLS-1$
         StringTokenizer stPaths =
-            new StringTokenizer(javaClassPath,
-                System.getProperty("path.separator")); // $NON-NLS-1$
+            new StringTokenizer(javaClassPath, File.pathSeparator);
         if (log.isDebugEnabled()) {
             log.debug("Classpath = " + javaClassPath);
             for (int i = 0; i < strPathsOrJars.length; i++) {

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -212,7 +212,8 @@ public void actionPerformed(ActionEvent ev) {
             FileWriter writer = null;
             try {
                 writer = new FileWriter(chooser.getSelectedFile()); // TODO Charset ?
-                CSVSaveService.saveCSVStats(model,writer, saveHeaders.isSelected());
+                CSVSaveService.saveCSVStats(StatGraphVisualizer.getAllTableData(model),writer,
+                        saveHeaders.isSelected() ? StatGraphVisualizer.getLabels(StatGraphVisualizer.COLUMNS) : null);
             } catch (FileNotFoundException e) {
                 JMeterUtils.reportErrorToUser(e.getMessage(), "Error saving data");
             } catch (IOException e) {

File: src/components/org/apache/jmeter/visualizers/SummaryReport.java
Patch:
@@ -257,7 +257,8 @@ public void actionPerformed(ActionEvent ev) {
             FileWriter writer = null;
             try {
                 writer = new FileWriter(chooser.getSelectedFile());
-                CSVSaveService.saveCSVStats(model,writer, saveHeaders.isSelected());
+                CSVSaveService.saveCSVStats(StatGraphVisualizer.getAllTableData(model),writer, 
+                        saveHeaders.isSelected() ? StatGraphVisualizer.getLabels(COLUMNS) : null);
             } catch (FileNotFoundException e) {
                 JMeterUtils.reportErrorToUser(e.getMessage(), "Error saving data");
             } catch (IOException e) {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -351,6 +351,7 @@ public static Object loadElement(InputStream in) throws IOException {
      *
      * @param evt sampleResult wrapped in a sampleEvent
      * @param writer output stream which must be created using {@link #getFileEncoding(String)}
+     * @throws IOException when writing data to output fails
      */
     // Used by ResultCollector.sampleOccurred(SampleEvent event)
     public synchronized static void saveSampleResult(SampleEvent evt, Writer writer) throws IOException {
@@ -382,6 +383,7 @@ private static String showDebuggingInfo(SampleResult result) {
     /**
      * @param elem test element
      * @param writer output stream which must be created using {@link #getFileEncoding(String)}
+     * @throws IOException when writing data to output fails
      */
     // Used by ResultCollector#recordStats()
     public synchronized static void saveTestElement(TestElement elem, Writer writer) throws IOException {
@@ -489,7 +491,7 @@ static boolean checkVersions() {
      *
      * @param reader of the file
      * @param resultCollectorHelper helper class to enable TestResultWrapperConverter to deliver the samples
-     * @throws IOException
+     * @throws IOException if an I/O error occurs
      */
     public static void loadTestResults(InputStream reader, ResultCollectorHelper resultCollectorHelper) throws IOException {
         // Get the InputReader to use

File: src/components/org/apache/jmeter/visualizers/RequestPanel.java
Patch:
@@ -102,7 +102,7 @@ public void clearData() {
     /**
      * Put SamplerResult in all request view
      * 
-     * @param samplerResult
+     * @param samplerResult The {@link SampleResult} to be put in all {@link RequestView}s
      */
     public void setSamplerResult(SampleResult samplerResult) {
         for (RequestView requestView : listRequestView) {

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -816,8 +816,11 @@ private void setWindowTitle() {
 
     /**
      * Update Undo/Redo icons state
+     * 
      * @param canUndo
+     *            Flag whether the undo button should be enabled
      * @param canRedo
+     *            Flag whether the redo button should be enabled
      */
     public void updateUndoRedoIcons(boolean canUndo, boolean canRedo) {
         toolbar.updateUndoRedoIcons(canUndo, canRedo);

File: src/core/org/apache/jmeter/gui/util/FilePanelEntry.java
Patch:
@@ -99,7 +99,7 @@ public void clearGui(){
     /**
      * If the gui needs to enable/disable the FilePanel, call the method.
      *
-     * @param enable
+     * @param enable The Flag whether the {@link FilePanel} should be enabled
      */
     public void enableFile(boolean enable) {
         browse.setEnabled(enable);

File: src/core/org/apache/jmeter/gui/util/JLabeledRadioI18N.java
Patch:
@@ -176,7 +176,7 @@ public void setText(String resourcename) {
     /**
      * Set the group label from the resource name.
      *
-     * @param label_resource
+     * @param label_resource The text to be looked up and set
      */
     @Override
     public final void setLabel(String label_resource) {

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -677,6 +677,8 @@ public void localeChanged(LocaleChangeEvent event) {
 
     /**
      * Get a list of all installed LAFs plus CrossPlatform and System.
+     * 
+     * @return The list of available {@link LookAndFeelInfo}s
      */
     // This is also used by LookAndFeelCommand
     public static LookAndFeelInfo[] getAllLAFs() {

File: src/core/org/apache/jmeter/gui/util/TextAreaTableCellEditor.java
Patch:
@@ -270,6 +270,7 @@ public boolean shouldSelectCell(EventObject anEvent) {
          *
          * @param anEvent
          *            the event
+         * @return always <code>true</code>
          */
         public boolean startCellEditing(EventObject anEvent) {
             return true;

File: src/core/org/apache/jmeter/control/ReplaceableController.java
Patch:
@@ -32,6 +32,8 @@ public interface ReplaceableController {
      * Used to replace the test execution tree (usually by adding the
      * subelements of the TestElement that is replacing the
      * ReplaceableController.
+     * 
+     * @return The replaced sub tree
      *
      * @see org.apache.jorphan.collections.HashTree
      */

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -270,6 +270,7 @@ private void startGui(String testFile) {
      * startup JMeter.
      * 
      * Called reflectively by {@link NewDriver#main(String[])}
+     * @param args The arguments for JMeter
      */
     public void start(String[] args) {
 
@@ -844,7 +845,7 @@ private void runNonGui(String testFile, String logFile, boolean remoteStart, Str
     /**
      * Refactored from AbstractAction.java
      *
-     * @param tree
+     * @param tree The {@link HashTree} to convert
      */
     public static void convertSubTree(HashTree tree) {
         LinkedList<Object> copyList = new LinkedList<Object>(tree.list());

File: src/core/org/apache/jmeter/control/Controller.java
Patch:
@@ -49,6 +49,7 @@ public interface Controller extends TestElement {
     /**
      * Controllers have to notify listeners of when they begin an iteration
      * through their sub-elements.
+     * @param listener The {@link LoopIterationListener} to add
      */
     void addIterationListener(LoopIterationListener listener);
 

File: src/core/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -305,7 +305,7 @@ public void sampleStopped(SampleEvent e) {
 
     /**
      * Whether to include timers and pre/post processor time in overall sample.
-     * @param includeTimers
+     * @param includeTimers Flag whether timers and pre/post processor should be included in overall sample
      */
     public void setIncludeTimers(boolean includeTimers) {
         setProperty(INCLUDE_TIMERS, includeTimers, DEFAULT_VALUE_FOR_INCLUDE_TIMERS);

File: src/core/org/apache/jmeter/engine/TreeCloner.java
Patch:
@@ -56,8 +56,7 @@ public TreeCloner(boolean honourNoThreadClone) {
     }
 
     /**
-     * @param node
-     * @param subTree {@link HashTree}
+     * {@inheritDoc}
      */
     @Override
     public final void addNode(Object node, HashTree subTree) {

File: src/components/org/apache/jmeter/reporters/MailerModel.java
Patch:
@@ -296,7 +296,9 @@ public String toString() {
      * @param smtpHost
      *            the smtp-server used to send the mail.
      * @throws MessagingException
+     *             if the building of the message fails
      * @throws AddressException
+     *             if any of the addresses is wrong
      */
     public void sendMail(String from, List<String> vEmails, String subject, String attText, String smtpHost)
             throws AddressException, MessagingException {
@@ -321,6 +323,7 @@ public void sendMail(String from, List<String> vEmails, String subject, String a
      * @param user the login used to authenticate
      * @param password the password used to authenticate
      * @param mailAuthType {@link MailAuthType} Security policy
+     * @param debug Flag whether debug messages for the mail session should be generated
      * @throws AddressException If mail address is wrong
      * @throws MessagingException If building MimeMessage fails
      */

File: src/components/org/apache/jmeter/timers/ConstantTimer.java
Patch:
@@ -46,14 +46,15 @@ public ConstantTimer() {
 
     /**
      * Set the delay for this timer.
-     *
+     * @param delay The delay for this timer
      */
     public void setDelay(String delay) {
         setProperty(DELAY, delay);
     }
 
     /**
      * Set the range (not used for this timer).
+     * @param range Not used
      *
      */
     public void setRange(double range) {

File: src/components/org/apache/jmeter/visualizers/BarGraph.java
Patch:
@@ -34,9 +34,9 @@ public class BarGraph {
     private Color backColor;
 
     /**
-     * @param resString
-     * @param checked
-     * @param backColor
+     * @param resString The label of this component
+     * @param checked Flag whether the corresponding checkbox should be checked
+     * @param backColor The color of the background
      */
     public BarGraph(String resString, boolean checked, Color backColor) {
         super();

File: src/components/org/apache/jmeter/visualizers/DistributionGraph.java
Patch:
@@ -60,6 +60,7 @@ public DistributionGraph() {
 
     /**
      * Constructor for the Graph object.
+     * @param model The container for the aggregated sample data
      */
     public DistributionGraph(SamplingStatCalculator model) {
         this();

File: src/components/org/apache/jmeter/visualizers/Graph.java
Patch:
@@ -70,6 +70,7 @@ public Graph() {
 
     /**
      * Constructor for the Graph object.
+     * @param model The container for samples and statistics
      */
     public Graph(CachingStatCalculator model) {
         this();

File: src/components/org/apache/jmeter/control/CriticalSectionController.java
Patch:
@@ -83,6 +83,7 @@ public CriticalSectionController() {
 
     /**
      * constructor
+     * @param name The name of this controller
      */
     public CriticalSectionController(String name) {
         super();
@@ -91,6 +92,7 @@ public CriticalSectionController(String name) {
 
     /**
      * Condition Accessor - this is gonna be any string value
+     * @param name The name of the lock for this controller
      */
     public void setLockName(String name) {
         setProperty(new StringProperty(LOCK_NAME, name));

File: src/components/org/apache/jmeter/control/IncludeController.java
Patch:
@@ -84,7 +84,7 @@ public Object clone() {
     /**
      * In the event an user wants to include an external JMX test plan
      * the GUI would call this.
-     * @param jmxfile
+     * @param jmxfile The path to the JMX test plan to include
      */
     public void setIncludePath(String jmxfile) {
         this.setProperty(INCLUDE_PATH,jmxfile);

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerContext.java
Patch:
@@ -133,7 +133,7 @@ public String getParameter(String name, String defaultValue) {
      */
     public int getIntParameter(String name) throws NumberFormatException {
         if (params == null || !params.containsKey(name)) {
-            throw new NumberFormatException("No value for parameter named '" + name + "'.");
+            throw new IllegalArgumentException("No value for parameter named '" + name + "'.");
         }
 
         return Integer.parseInt(params.get(name));

File: src/components/org/apache/jmeter/visualizers/backend/BackendListenerClient.java
Patch:
@@ -75,7 +75,7 @@ public interface BackendListenerClient {
 
     /**
      * Perform a single sample for each iteration. This method returns a
-     * <code>SampleResult</code> object. <code>SampleResult</code> has many
+     * {@link SampleResult} object. <code>SampleResult</code> has many
      * fields which can be used. At a minimum, the test should use
      * <code>SampleResult.sampleStart</code> and
      * <code>SampleResult.sampleEnd</code>to set the time that the test

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -182,7 +182,7 @@ private static boolean validateFormat(String format){
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String FILEVERSION = "1618048"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1641081"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/components/org/apache/jmeter/visualizers/backend/BackendListener.java
Patch:
@@ -359,7 +359,7 @@ static class ErrorBackendListenerClient extends AbstractBackendListenerClient {
         /**
          * Return SampleResult with data on error.
          *
-         * @see BackendListenerClient#runTest(JavaSamplerContext)
+         * @see BackendListenerClient#handleSampleResults(List, BackendListenerContext)
          */
         @Override
         public void handleSampleResults(List<SampleResult> sampleResults, BackendListenerContext context) {

File: src/components/org/apache/jmeter/visualizers/backend/BackendListener.java
Patch:
@@ -30,7 +30,6 @@
 
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.engine.util.NoThreadClone;
-import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;
 import org.apache.jmeter.samplers.Remoteable;
 import org.apache.jmeter.samplers.SampleEvent;
 import org.apache.jmeter.samplers.SampleListener;
@@ -95,7 +94,7 @@ public class BackendListener extends AbstractTestElement
     private transient BackendListenerClient backendListenerClient = null;
 
     /**
-     * The JavaSamplerContext instance used by this sampler to hold information
+     * The BackendListenerContext instance used by this sampler to hold information
      * related to the test run, such as the parameters specified for the sampler
      * client.
      */

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -176,7 +176,7 @@ private static boolean validateFormat(String format){
     
     // Must match _version property value in saveservice.properties
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String PROPVERSION = "2.7";// Expected version $NON-NLS-1$
+    private static final String PROPVERSION = "2.8";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$

File: src/components/org/apache/jmeter/assertions/XPathAssertion.java
Patch:
@@ -156,7 +156,7 @@ public void setXPathString(String xpath) {
     /**
      * Set whether to ignore element whitespace
      *
-     * @param whitespace
+     * @param whitespace Flag whether whitespace elements should be ignored
      */
     public void setWhitespace(boolean whitespace) {
         setProperty(new BooleanProperty(WHITESPACE_KEY, whitespace));
@@ -165,7 +165,7 @@ public void setWhitespace(boolean whitespace) {
     /**
      * Set use validation
      *
-     * @param validate
+     * @param validate Flag whether validation should be used
      */
     public void setValidating(boolean validate) {
         setProperty(new BooleanProperty(VALIDATE_KEY, validate));
@@ -174,7 +174,7 @@ public void setValidating(boolean validate) {
     /**
      * Set whether this is namespace aware
      *
-     * @param namespace
+     * @param namespace Flag whether namespace should be used
      */
     public void setNamespace(boolean namespace) {
         setProperty(new BooleanProperty(NAMESPACE_KEY, namespace));

File: src/core/org/apache/jmeter/control/GenericController.java
Patch:
@@ -207,7 +207,7 @@ protected boolean isFirst() {
 
     /**
      * If b is true, it means first is reset which means Controller has executed all its children 
-     * @param b
+     * @param b The flag, whether first is reseted
      */
     public void setFirst(boolean b) {
         first = b;

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -94,6 +94,7 @@ public List<JMeterTreeNode> getPathToThreadGroup() {
     
     /**
      * Tag Node as result of a search
+     * @param tagged The flag to be used for tagging
      */
     public void setMarkedBySearch(boolean tagged) {
         this.markedBySearch = tagged;

File: src/core/org/apache/jmeter/gui/action/LoadRecentProject.java
Patch:
@@ -244,6 +244,8 @@ private static int getShortcutKey(int index) {
 
     /**
      * Get the full path to the recent file where index 0 is the most recent
+     * @param index the index of the recent file
+     * @return full path to the recent file at <code>index</code>
      */
     public static String getRecentFile(int index) {
         return prefs.get(USER_PREFS_KEY + index, null);

File: src/core/org/apache/jmeter/gui/action/RawTextSearcher.java
Patch:
@@ -68,8 +68,8 @@ public boolean search(List<String> textTokens) {
 
     /**
      * Returns true if searchedTextLowerCase is in value
-     * @param value
-     * @param searchedTextLowerCase
+     * @param value string in which the search will be done
+     * @param searchedTextLowerCase string which will be searched for
      * @return true if searchedTextLowerCase is in value
      */
     protected boolean testField(String value, String searchedTextLowerCase) {

File: src/components/org/apache/jmeter/extractor/Extractor.java
Patch:
@@ -32,7 +32,7 @@ public interface Extractor extends Serializable {
      * @param attribute Attribute name to return 
      * @param matchNumber Match number
      * @param inputString Page or excerpt
-     * @param result List<String> results
+     * @param result List of results
      * @param found current matches found
      * @param cacheKey If not null, the implementation is encouraged to cache parsing result and use this key as part of cache key
      * @return match found updated

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -766,7 +766,7 @@ public void register(Stoppable stoppable) {
 
     /**
      *
-     * @return List<IStoppable> Copy of IStoppable
+     * @return copy of list of {@link Stoppable}s
      */
     public List<Stoppable> getStoppables() {
         ArrayList<Stoppable> list = new ArrayList<Stoppable>();

File: src/core/org/apache/jmeter/gui/Searchable.java
Patch:
@@ -25,7 +25,7 @@
  */
 public interface Searchable {
     /**
-     * @return List<String> of searchable tokens
+     * @return List of searchable tokens
      * @throws Exception
      */
     List<String> getSearchableTokens()

File: src/core/org/apache/jmeter/gui/action/Searcher.java
Patch:
@@ -27,7 +27,7 @@ public interface Searcher {
 
     /**
      * Implements the search
-     * @param textTokens List<String> content to be searched
+     * @param textTokens List of content to be searched
      * @return true if search on textTokens is successful
      */
     boolean search(List<String> textTokens);

File: src/core/org/apache/jmeter/gui/action/UndoCommand.java
Patch:
@@ -55,7 +55,7 @@ public void doAction(ActionEvent e) throws IllegalUserActionException {
     }
 
     /**
-     * @return Set<String>
+     * @return Set of all action names
      */
     @Override
     public Set<String> getActionNames() {
@@ -67,6 +67,7 @@ public Set<String> getActionNames() {
      * and clone tree for saving
      *
      * @param tree to be converted and cloned
+     * @return converted and cloned tree
      */
     public static HashTree convertAndCloneSubTree(HashTree tree) {
         Save executor = new Save();

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -73,7 +73,7 @@ public void setEnabled(boolean enabled) {
     
     /**
      * Return nodes to level 2
-     * @return {@link List}<JMeterTreeNode>
+     * @return {@link List} of {@link JMeterTreeNode}s
      */
     public List<JMeterTreeNode> getPathToThreadGroup() {
         List<JMeterTreeNode> nodes = new ArrayList<JMeterTreeNode>();

File: src/core/org/apache/jmeter/testbeans/gui/TableEditor.java
Patch:
@@ -52,7 +52,9 @@
 /**
  * Table editor for TestBean GUI properties.
  * Currently only works for:
- * - property type Collection<String>, where there is a single header entry
+ * <ul>
+ * <li>property type Collection of {@link String}s, where there is a single header entry</li>
+ * </ul>
  */
 public class TableEditor extends PropertyEditorSupport implements FocusListener,TestBeanPropertyEditor,TableModelListener {
     private static final Logger log = LoggingManager.getLoggerForClass();

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -643,8 +643,8 @@ public List<String> getSearchableTokens() {
     
     /**
      * Add to result the values of propertyNames
-     * @param result List<String> values of propertyNames
-     * @param propertyNames Set<String> properties to extract
+     * @param result List of values of propertyNames
+     * @param propertyNames Set of names of properties to extract
      */
     protected final void addPropertiesValues(List<String> result, Set<String> propertyNames) {
         PropertyIterator iterator = propertyIterator();

File: src/core/org/apache/jmeter/threads/FindTestElementsUpToRootTraverser.java
Patch:
@@ -86,7 +86,7 @@ public void processPath() {
 
     /**
      * Returns all controllers that where in Tree down to nodeToFind in reverse order (from leaf to root)
-     * @return List<Controller>
+     * @return List of {@link Controller}
      */
     public List<Controller> getControllersToRoot() {
         List<Controller> result = new ArrayList<Controller>(stack.size());

File: src/core/org/apache/jmeter/util/XPathUtil.java
Patch:
@@ -300,7 +300,7 @@ public static NodeList selectNodeList(Document document, String xPathExpression)
      * Put in matchStrings results of evaluation
      * @param document XML document
      * @param xPathQuery XPath Query
-     * @param matchStrings List<String> that will be filled
+     * @param matchStrings List of strings that will be filled
      * @param fragment return fragment
      * @throws TransformerException
      */

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -534,7 +534,7 @@ protected NVPair parseOneParameter(String parameter) {
      * purpose of this utility.
      *
      * @param parameters
-     * @return List<String>
+     * @return List of name/value pairs
      */
     protected List<String> parseParameters(String parameters) {
         List<String> parsedParams = new ArrayList<String>();

File: src/jorphan/org/apache/jorphan/exec/SystemCommand.java
Patch:
@@ -116,7 +116,7 @@ public SystemCommand(File directory, long timeoutMillis, int pollInterval, Map<S
     }
 
     /**
-     * @param arguments List<String>, not null
+     * @param arguments List of strings, not null
      * @return return code
      * @throws InterruptedException
      * @throws IOException

File: src/core/org/apache/jmeter/engine/util/ValueTransformer.java
Patch:
@@ -30,7 +30,7 @@ interface ValueTransformer {
     /**
      * Transform the given property and return the new version.
      *
-     * @param property
+     * @param property Property to be transformed
      * @return the transformed property
      */
     JMeterProperty transformValue(JMeterProperty property) throws InvalidVariableException;
@@ -39,15 +39,15 @@ interface ValueTransformer {
      * Set the master function for the value transformer. This handles
      * converting strings to functions.
      *
-     * @param masterFunction
+     * @param masterFunction Function to be used for the transformation
      */
     void setMasterFunction(CompoundVariable masterFunction);
 
     /**
      * Set the variable names and values used to reverse replace functions with
      * strings, and undo functions to raw values.
      *
-     * @param vars
+     * @param vars Map of names and values to be used for the transformation
      */
     void setVariables(Map<String, String> vars);
 }

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -335,7 +335,7 @@ private JMeterThread makeThread(int groupCount,
      *  <li>stop JMeter thread</li>
      *  <li>interrupt JMeter thread</li>
      *  <li>interrupt underlying thread</li>
-     * <ol>
+     * </ol>
      * @param threadName String thread name
      * @param now boolean for stop
      * @return true if thread stopped

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -562,7 +562,7 @@ public static Properties getJMeterProperties() {
 
     /**
      * This looks for the requested image in the classpath under
-     * org.apache.jmeter.images. <name>
+     * org.apache.jmeter.images.&lt;name&gt;
      *
      * @param name
      *            Description of Parameter

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/ParamMask.java
Patch:
@@ -72,7 +72,7 @@ public void setPrefix(String prefix) {
     }
 
     /**
-     * Set the current value of the <code>long<code> portion of the parameter
+     * Set the current value of the <code>long</code> portion of the parameter
      * value to replace. This is usually not used, as the method
      * {@link #resetValue} is used to define a policy for the starting value.
      *

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPFileArg.java
Patch:
@@ -181,7 +181,7 @@ public String getHeader() {
      *
      * @return the string demonstration of HTTPFileArg object in this
      * format:
-     *    "path:'<PATH>'|param:'<PARAM NAME>'|mimetype:'<MIME TYPE>'"
+     *    "path:'&lt;PATH&gt;'|param:'&lt;PARAM NAME&gt;'|mimetype:'&lt;MIME TYPE&gt;'"
      */
     @Override
     public String toString() {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
Patch:
@@ -70,7 +70,7 @@ public class ReceiveSubscriber implements Closeable, MessageListener {
     /**
      * Constructor takes the necessary JNDI related parameters to create a
      * connection and prepare to begin receiving messages.
-     * <br/>
+     * <br>
      * The caller must then invoke {@link #start()} to enable message reception.
      * 
      * @param useProps if true, use jndi.properties instead of 
@@ -101,7 +101,7 @@ public ReceiveSubscriber(boolean useProps,
     /**
      * Constructor takes the necessary JNDI related parameters to create a
      * connection and create an onMessageListener to prepare to begin receiving messages.
-     * <br/>
+     * <br>
      * The caller must then invoke {@link #start()} to enable message reception.
      * 
      * @param queueSize maximum queue size, where a queueSize &lt;=0 means no limit

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -277,7 +277,7 @@ private void extractContent(StringBuilder buffer, StringBuilder propBuffer,
 
     /**
      * Initialise the thread-local variables.
-     * <br/>
+     * <br>
      * {@inheritDoc}
      */
     @Override
@@ -327,7 +327,7 @@ public void threadStarted(boolean wts) {
 
     /**
      * Close subscriber.
-     * <br/>
+     * <br>
      * {@inheritDoc}
      */
     @Override

File: src/core/org/apache/jmeter/testelement/AbstractScopedAssertion.java
Patch:
@@ -32,7 +32,6 @@
  * <li>saveScopeSettings()</li>
  * <li>showScopeSettings()</li>
  * </ul>
- * </p>
  */
 public abstract class AbstractScopedAssertion extends AbstractScopedTestElement {
 

File: src/core/org/apache/jmeter/testelement/AbstractScopedTestElement.java
Patch:
@@ -37,7 +37,6 @@
  * <li>saveScopeSettings()</li>
  * <li>showScopeSettings()</li>
  * </ul>
- * </p>
  */
 public abstract class AbstractScopedTestElement extends AbstractTestElement {
 

File: src/functions/org/apache/jmeter/functions/LogFunction.java
Patch:
@@ -43,7 +43,6 @@
  * <li>throwable message (optional)</li>
  * <li>comment (optional)</li>
  * </ul>
- * </p>
  * Returns: - the input string
  * @since 2.2
  */

File: src/functions/org/apache/jmeter/functions/LogFunction2.java
Patch:
@@ -41,7 +41,6 @@
  * <li>log level (optional; defaults to INFO; or DEBUG if unrecognised; or can use OUT or ERR)</li>
  * <li>throwable message (optional)</li>
  * </ul>
- * </p>
  * Returns: - Empty String (so can be used where return value would be a nuisance)
  * @since 2.2
  */

File: src/functions/org/apache/jmeter/functions/SplitFunction.java
Patch:
@@ -43,7 +43,6 @@
  * <li>Variable name prefix</li>
  * <li>String to split on (optional, default is comma)</li>
  * </ul>
- * </p>
  * <p>
  * Returns: the input string
  * </p>

File: src/core/org/apache/jmeter/control/IfController.java
Patch:
@@ -44,7 +44,7 @@
  * Thread-Group (set to loop a number of times or indefinitely,
  *    ... Samplers ... (e.g. Counter )
  *    ... Other Controllers ....
- *    ... IfController ( condition set to something like - ${counter} &lt 10)
+ *    ... IfController ( condition set to something like - ${counter} &lt; 10)
  *       ... statements to perform if condition is true
  *       ...
  *    ... Other Controllers /Samplers }

File: src/core/org/apache/jmeter/testelement/property/AbstractProperty.java
Patch:
@@ -362,8 +362,8 @@ public static JMeterProperty createProperty(Object item) {
      * The object can be one of:
      * <ul>
      * <li>JMeterProperty - returned unchanged</li>
-     * <li>TestElement => TestElementProperty with the same name</li>
-     * <li>Map|Collection => Map|CollectionProperty with the name = item.hashCode</li>
+     * <li>TestElement =&gt; TestElementProperty with the same name</li>
+     * <li>Map|Collection =&gt; Map|CollectionProperty with the name = item.hashCode</li>
      * </ul>
      * @param item object to be turned into a propery
      * @return the JMeterProperty

File: src/core/org/apache/jmeter/threads/JMeterContextService.java
Patch:
@@ -135,7 +135,7 @@ public static synchronized long getTestStartTime() {// NOT USED
     }
 
     /**
-     * Get the total number of threads (>= active)
+     * Get the total number of threads (&gt;= active)
      * @return total thread count
      */
     public static synchronized int getTotalThreads() {

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -379,7 +379,7 @@ public static void closeQuietly(ServerSocket sock){
      *
      * @param target array to scan
      * @param search array to search for
-     * @param offset starting offset (>=0)
+     * @param offset starting offset (&gt;=0)
      * @return true if the search array matches the target at the current offset
      */
     public static boolean startsWith(byte [] target, byte [] search, int offset){

File: src/components/org/apache/jmeter/assertions/XMLSchemaAssertion.java
Patch:
@@ -37,8 +37,8 @@
 // See Bug 34383
 
 /**
- * XMLSchemaAssertion.java Validate response against an XML Schema author <a
- * href="mailto:d.maung@mdl.com">Dave Maung</a>
+ * XMLSchemaAssertion.java Validate response against an XML Schema author
+ * <a href="mailto:d.maung@mdl.com">Dave Maung</a>
  * 
  */
 public class XMLSchemaAssertion extends AbstractTestElement implements Serializable, Assertion {

File: src/components/org/apache/jmeter/visualizers/Spline3.java
Patch:
@@ -68,9 +68,9 @@
  * <P>
  * Here is a little piece of code showing how to use this class :
  *
- * <PRE> // ... float[] nodes = {3F, 2F, 4F, 1F, 2.5F, 5F, 3F}; Spline3 curve =
+ * <PRE>// ... float[] nodes = {3F, 2F, 4F, 1F, 2.5F, 5F, 3F}; Spline3 curve =
  * new Spline3(nodes); // ... public void paint(Graphics g) { int[] plot =
- * curve.getPlots(); for (int i = 1; i < n; i++) { g.drawLine(i - 1, plot[i -
+ * curve.getPlots(); for (int i = 1; i &lt; n; i++) { g.drawLine(i - 1, plot[i -
  * 1], i, plot[i]); } } // ...
  *
  * </PRE>

File: src/core/org/apache/jmeter/control/Controller.java
Patch:
@@ -24,8 +24,8 @@
 
 /**
  * This interface is used by JMeterThread in the following manner:
- *
- * while (running && (sampler = controller.next()) != null)
+ * <p>
+ * <code>while (running &amp;&amp; (sampler = controller.next()) != null)</code>
  */
 public interface Controller extends TestElement {
     /**

File: src/core/org/apache/jmeter/control/GenericController.java
Patch:
@@ -45,7 +45,7 @@
  * The main entry point is next(), which is called by by JMeterThread as follows:
  * </p>
  * <p>
- * <code>while (running && (sampler = controller.next()) != null)</code>
+ * <code>while (running &amp;&amp; (sampler = controller.next()) != null)</code>
  * </p>
  */
 public class GenericController extends AbstractTestElement implements Controller, Serializable, TestCompilerHelper {

File: src/core/org/apache/jmeter/control/IfController.java
Patch:
@@ -44,7 +44,7 @@
  * Thread-Group (set to loop a number of times or indefinitely,
  *    ... Samplers ... (e.g. Counter )
  *    ... Other Controllers ....
- *    ... IfController ( condition set to something like - ${counter}<10)
+ *    ... IfController ( condition set to something like - ${counter} &lt 10)
  *       ... statements to perform if condition is true
  *       ...
  *    ... Other Controllers /Samplers }
@@ -81,14 +81,14 @@ public IfController(String condition) {
     }
 
     /**
-     * Condition Accessor - this is gonna be like ${count}<10
+     * Condition Accessor - this is gonna be like <code>${count} &lt; 10</code>
      */
     public void setCondition(String condition) {
         setProperty(new StringProperty(CONDITION, condition));
     }
 
     /**
-     * Condition Accessor - this is gonna be like ${count}<10
+     * Condition Accessor - this is gonna be like <code>${count} &lt; 10</code>
      */
     public String getCondition() {
         return getPropertyAsString(CONDITION);

File: src/core/org/apache/jmeter/util/SlowSocket.java
Patch:
@@ -57,7 +57,7 @@ public SlowSocket(final int cps, String host, int port, InetAddress localAddress
      * @param localPort local port
      *
      * @throws IOException
-     * @throws IllegalArgumentException if cps <=0
+     * @throws IllegalArgumentException if cps &lt;= 0
      */
     public SlowSocket(int cps, String host, int port, InetAddress localAddr, int localPort) throws IOException {
         super(host, port, localAddr, localPort);
@@ -75,7 +75,7 @@ public SlowSocket(int cps, String host, int port, InetAddress localAddr, int loc
      *
      * @throws UnknownHostException
      * @throws IOException
-     * @throws IllegalArgumentException if cps <=0
+     * @throws IllegalArgumentException if cps &lt;= 0
      */
     public SlowSocket(int cps, String host, int port) throws UnknownHostException, IOException {
         super(host, port);

File: src/functions/org/apache/jmeter/functions/EscapeHtml.java
Patch:
@@ -34,7 +34,7 @@
  * <p>
  * For example:
  * </p> 
- * <p><code>"bread" & "butter"</code></p>
+ * <p><code>"bread" &amp; "butter"</code></p>
  * becomes:
  * <p>
  * <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>.

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -227,7 +227,7 @@ protected boolean isReusable() {
     /**
      * 
      * @param ieVersion Float IE version
-     * @return true if IE version < IE v10
+     * @return true if IE version &lt; IE v10
      */
     protected final boolean isEnableConditionalComments(Float ieVersion) {
         if(ieVersion == null) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -91,7 +91,7 @@ public String getRedirectLocation() {
 
     /**
      * Determine whether this result is a redirect.
-     * Returs true for: 301,302,303, & 307(GET or HEAD)
+     * Returns true for: 301,302,303 and 307(GET or HEAD)
      * @return true iff res is an HTTP redirect response
      */
     public boolean isRedirect() {

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -62,7 +62,7 @@
  * <li> tokenizes the string using question mark "?"
  * <li> get the path from the first token
  * <li> returns the second token and checks it for parameters
- * <li> tokenizes the string using ampersand "&"
+ * <li> tokenizes the string using ampersand "&amp;"
  * <li> parses each token to name/value pairs
  * </ol>
  * <p>
@@ -450,7 +450,7 @@ public boolean checkURL(String url) {
     }
 
     /**
-     * Checks the string to see if it contains "&" and "=". If it does, return
+     * Checks the string to see if it contains "&amp;" and "=". If it does, return
      * true, so that it can be parsed.
      *
      * @param text
@@ -529,7 +529,7 @@ protected NVPair parseOneParameter(String parameter) {
     /**
      * Method uses StringTokenizer to convert the string into single pairs. The
      * string should conform to HTTP protocol spec, which means the name/value
-     * pairs are separated by the ampersand symbol "&". Some one could write the
+     * pairs are separated by the ampersand symbol "&amp;". Someone could write the
      * querystrings by hand, but that would be round about and go against the
      * purpose of this utility.
      *

File: src/protocol/jms/org/apache/jmeter/protocol/jms/Utils.java
Patch:
@@ -226,7 +226,7 @@ public static void addJMSProperties(Message msg, Map<String, Object> map) throws
 
     /**
      * Converts {@link Arguments} to {@link JMSProperties} defaulting to String type
-     * Used to convert version <= 2.10 test plans
+     * Used to convert version &lt;= 2.10 test plans
      * @param args {@link Arguments}
      * @return jmsProperties {@link JMSProperties}
      */

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
Patch:
@@ -104,7 +104,7 @@ public ReceiveSubscriber(boolean useProps,
      * <br/>
      * The caller must then invoke {@link #start()} to enable message reception.
      * 
-     * @param queueSize maximum queue size <=0 == no limit
+     * @param queueSize maximum queue size, where a queueSize &lt;=0 means no limit
      * @param useProps if true, use jndi.properties instead of 
      * initialContextFactory, providerUrl, securityPrincipal, securityCredentials
      * @param initialContextFactory
@@ -137,7 +137,7 @@ public ReceiveSubscriber(int queueSize, boolean useProps,
      * <br/>
      * The caller must then invoke {@link #start()} to enable message reception.
      * 
-     * @param queueSize maximum queue size <=0 == no limit
+     * @param queueSize maximum queue, where a queueSize &lt;=0 means no limit
      * @param useProps if true, use jndi.properties instead of 
      * initialContextFactory, providerUrl, securityPrincipal, securityCredentials
      * @param initialContextFactory

File: src/core/org/apache/jmeter/gui/UndoHistory.java
Patch:
@@ -125,7 +125,7 @@ public void clear() {
 
     /**
      * Add tree model copy to the history
-     * <p/>
+     * <p>
      * This method relies on the rule that the record in history made AFTER
      * change has been made to test plan
      *

File: src/core/org/apache/jmeter/samplers/StatisticalSampleResult.java
Patch:
@@ -126,7 +126,7 @@ public void setErrorCount(int e) {// for reading CSV files
     }
 
     /**
-     * Generates the key to be used for aggregating samples as follows:<br/>
+     * Generates the key to be used for aggregating samples as follows:<br>
      * <code>sampleLabel</code> "-" <code>[threadName|threadGroup]</code>
      * <p>
      * N.B. the key should agree with the fixed items that are saved in the sample.

File: src/core/org/apache/jmeter/threads/SamplePackage.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.jmeter.timers.Timer;
 
 /**
- * Packages methods related to sample handling.<br/>
+ * Packages methods related to sample handling.<br>
  * A SamplePackage contains all elements associated to a Sampler:
  * <ul>
  *  <li>SampleListener(s)</li>

File: src/components/org/apache/jmeter/timers/SyncTimer.java
Patch:
@@ -77,7 +77,6 @@ public synchronized void setup(int parties) {
          * @return int
          * @throws InterruptedException
          * @throws BrokenBarrierException
-         * @throws TimeoutException 
          * @see java.util.concurrent.CyclicBarrier#await()
          */
         public int await() throws InterruptedException, BrokenBarrierException{

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -49,7 +49,7 @@ public final class JMeterVersion {
      * This ensures that JMeterUtils always gets the correct
      * version, even if JMeterUtils is not re-compiled during the build.
      */
-    private static final String VERSION = "2.12";
+    private static final String VERSION = "2.13-SNAPSHOT";
 
     private static final String IMPLEMENTATION;
     

File: src/functions/org/apache/jmeter/functions/Random.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jmeter.util.ThreadLocalRandom;
 
 /**
  * Provides a Random function which returns a random long integer between a min
@@ -36,7 +37,6 @@
 public class Random extends AbstractFunction {
 
     private static final List<String> desc = new LinkedList<String>();
-
     private static final String KEY = "__Random"; //$NON-NLS-1$
 
     static {
@@ -62,7 +62,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
         long min = Long.parseLong(minimum.execute().trim());
         long max = Long.parseLong(maximum.execute().trim());
 
-        long rand = min + (long) (Math.random() * (max - min + 1));
+        long rand = ThreadLocalRandom.current().nextLong(min, max);
 
         String randString = Long.toString(rand);
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/Utils.java
Patch:
@@ -44,11 +44,11 @@
 public final class Utils {
     // By default priority is 4
     // http://docs.oracle.com/javaee/6/tutorial/doc/bncfu.html
-    public static final int DEFAULT_PRIORITY_4 = 4;
+    public static final String DEFAULT_PRIORITY_4 = "4"; // $NON-NLS-1$
 
     // By default a message never expires
     // http://docs.oracle.com/javaee/6/tutorial/doc/bncfu.html
-    public static final long DEFAULT_NO_EXPIRY = 0L;
+    public static final String DEFAULT_NO_EXPIRY = "0"; // $NON-NLS-1$
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 

File: src/components/org/apache/jmeter/control/ForeachController.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.io.Serializable;
 
+import org.apache.jmeter.extractor.HtmlExtractor;
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.testelement.property.BooleanProperty;
 import org.apache.jmeter.testelement.property.StringProperty;

File: src/core/org/apache/jmeter/gui/util/FileDialoger.java
Patch:
@@ -181,7 +181,7 @@ public static JFileChooser promptToSaveFile(String filename, String[] extensions
     
     /**
      * 
-     * @return
+     * @return last JFC Directory
      */
     public static String getLastJFCDirectory() {
         return lastJFCDirectory;

File: src/core/org/apache/jmeter/util/ThreadLocalRandom.java
Patch:
@@ -19,8 +19,8 @@
  * than shared {@code Random} objects in concurrent programs will
  * typically encounter much less overhead and contention.  Use of
  * {@code ThreadLocalRandom} is particularly appropriate when multiple
- * tasks (for example, each a {@link ForkJoinTask}) use random numbers
- * in parallel in thread pools.
+ * tasks (for example, each a java.util.concurrent.ForkJoinTask (JDK 1.7))
+ * use random numbers in parallel in thread pools.
  *
  * <p>Usages of this class should typically be of the form:
  * {@code ThreadLocalRandom.current().nextX(...)} (where

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/FixedQueueExecutor.java
Patch:
@@ -98,9 +98,7 @@ public Message sendAndReceive(Message request,
                 countDownLatch.await(); //
             } else {
                 if(!countDownLatch.await(timeout, TimeUnit.MILLISECONDS)) {
-                    if(log.isDebugEnabled()) {
-                        log.debug("Timeout reached before getting a reply message");
-                    }
+                    log.debug("Timeout reached before getting a reply message");
                 }
             }
             if (log.isDebugEnabled()) {

File: src/core/org/apache/jmeter/gui/util/FileDialoger.java
Patch:
@@ -101,6 +101,9 @@ else if (lastJFCDirectory == null) {
             jfc.setAcceptAllFileFilterUsed(true);
             jfc.setFileFilter(currentFilter);
         }
+        if(lastJFCDirectory==null) {
+            lastJFCDirectory = System.getProperty("user.dir", ""); //$NON-NLS-1$//$NON-NLS-2$
+        }
         jfc.setCurrentDirectory(new File(lastJFCDirectory));
         int retVal = jfc.showOpenDialog(GuiPackage.getInstance().getMainFrame());
         lastJFCDirectory = jfc.getCurrentDirectory().getAbsolutePath();

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -152,6 +152,7 @@ static void loadProjectFile(final ActionEvent e, final File f, final boolean mer
             } finally {
                 JOrphanUtils.closeQuietly(reader);
             }
+            FileDialoger.setLastJFCDirectory(f.getParentFile().getAbsolutePath());
             guiPackage.updateCurrentGui();
             guiPackage.getMainFrame().repaint();
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -362,6 +362,8 @@ public String getName() { // HC3.1 does not have the method
         } catch (IOException e) {
             res.sampleEnd();
             // pick up headers if failed to execute the request
+            // httpMethod cannot be null here, otherwise 
+            // it would have been caught in the previous catch block
             res.setRequestHeaders(getConnectionHeaders(httpMethod));
             errorResult(e, res);
             return res;

File: src/functions/org/apache/jmeter/functions/SamplerName.java
Patch:
@@ -45,7 +45,6 @@ public class SamplerName extends AbstractFunction {
 
     private Object[] values;
 
-    // TODO Should this method be synchronized ? all other function execute are
     /** {@inheritDoc} */
     @Override
     public String execute(SampleResult previousResult, Sampler currentSampler)

File: src/functions/org/apache/jmeter/functions/LogFunction.java
Patch:
@@ -76,7 +76,7 @@ public LogFunction() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
         // The method is synchronized to avoid interference of messages from multiple threads
         String stringToLog = ((CompoundVariable) values[0]).execute();
@@ -134,7 +134,7 @@ private static void printDetails(java.io.PrintStream ps, String s, Throwable t,
     }
 
     // Routine to perform the output (also used by __logn() function)
-    static void logDetails(Logger l, String s, String prio, Throwable t, String c) {
+    static synchronized void logDetails(Logger l, String s, String prio, Throwable t, String c) {
         if (prio.equalsIgnoreCase("OUT")) //$NON-NLS-1
         {
             printDetails(System.out, s, t, c);

File: src/functions/org/apache/jmeter/functions/LogFunction2.java
Patch:
@@ -71,7 +71,7 @@ public LogFunction2() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
         String stringToLog = ((CompoundVariable) values[0]).execute();
 

File: src/functions/org/apache/jmeter/functions/EscapeOroRegexpChars.java
Patch:
@@ -94,7 +94,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, MIN_PARAM_COUNT, MAX_PARAM_COUNT);
         values = parameters.toArray(new CompoundVariable[parameters.size()]);
     }

File: src/functions/org/apache/jmeter/functions/AbstractHostIPName.java
Patch:
@@ -71,7 +71,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, 0, 1);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/CharFunction.java
Patch:
@@ -52,7 +52,7 @@ public CharFunction() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
 
         StringBuilder sb = new StringBuilder(values.length);
@@ -72,7 +72,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkMinParameterCount(parameters, 1);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/EscapeHtml.java
Patch:
@@ -64,7 +64,7 @@ public EscapeHtml() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
 
         String rawString = ((CompoundVariable) values[0]).execute();
@@ -74,7 +74,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, 1);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/EscapeOroRegexpChars.java
Patch:
@@ -64,7 +64,7 @@ public EscapeOroRegexpChars() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
 
         String valueToEscape = values[0].execute();       

File: src/functions/org/apache/jmeter/functions/EvalFunction.java
Patch:
@@ -58,7 +58,7 @@ public EvalFunction() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
         String parameter = ((CompoundVariable) values[0]).execute();
         CompoundVariable cv = new CompoundVariable(parameter);
@@ -67,7 +67,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/EvalVarFunction.java
Patch:
@@ -63,7 +63,7 @@ public EvalVarFunction() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
         String variableName = ((CompoundVariable) values[0]).execute();
         final JMeterVariables vars = getVariables();
@@ -78,7 +78,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/FileToString.java
Patch:
@@ -78,7 +78,7 @@ public FileToString() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
 
         String fileName = ((CompoundVariable) values[0]).execute();
@@ -124,7 +124,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, MIN_PARAM_COUNT, MAX_PARAM_COUNT);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/IntSum.java
Patch:
@@ -55,7 +55,7 @@ public IntSum() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
 
         JMeterVariables vars = getVariables();
@@ -87,7 +87,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkMinParameterCount(parameters, 2);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/JavaScript.java
Patch:
@@ -59,7 +59,7 @@ public JavaScript() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
 
         JMeterContext jmctx = JMeterContextService.getContext();
@@ -105,7 +105,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, 1, 2);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/Jexl2Function.java
Patch:
@@ -60,7 +60,7 @@ public class Jexl2Function extends AbstractFunction implements ThreadListener {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException
     {
         String str = ""; //$NON-NLS-1$
@@ -139,7 +139,7 @@ public String getReferenceKey()
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters)
+    public void setParameters(Collection<CompoundVariable> parameters)
             throws InvalidVariableException
     {
         checkParameterCount(parameters, 1, 2);

File: src/functions/org/apache/jmeter/functions/JexlFunction.java
Patch:
@@ -58,7 +58,7 @@ public class JexlFunction extends AbstractFunction {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException
     {
         String str = ""; //$NON-NLS-1$
@@ -123,7 +123,7 @@ public String getReferenceKey()
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters)
+    public void setParameters(Collection<CompoundVariable> parameters)
             throws InvalidVariableException
     {
         checkParameterCount(parameters, 1, 2);

File: src/functions/org/apache/jmeter/functions/LogFunction.java
Patch:
@@ -78,6 +78,7 @@ public LogFunction() {
     @Override
     public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
+        // The method is synchronized to avoid interference of messages from multiple threads
         String stringToLog = ((CompoundVariable) values[0]).execute();
 
         String priorityString;
@@ -162,7 +163,7 @@ static void logDetails(Logger l, String s, String prio, Throwable t, String c) {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/LogFunction2.java
Patch:
@@ -98,7 +98,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/LongSum.java
Patch:
@@ -55,7 +55,7 @@ public LongSum() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
 
         JMeterVariables vars = getVariables();
@@ -87,7 +87,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkMinParameterCount(parameters, 2);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/Property.java
Patch:
@@ -65,7 +65,7 @@ public Property() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
         String propertyName = ((CompoundVariable) values[0]).execute();
         String propertyDefault = propertyName;
@@ -88,7 +88,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/Property2.java
Patch:
@@ -69,7 +69,7 @@ public Property2() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
         String propertyName = ((CompoundVariable) values[0]).execute();
 
@@ -86,7 +86,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/Random.java
Patch:
@@ -55,7 +55,7 @@ public Random() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
 
 
@@ -80,7 +80,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, 2, 3);
         Object[] values = parameters.toArray();
 

File: src/functions/org/apache/jmeter/functions/RandomString.java
Patch:
@@ -69,7 +69,7 @@ public RandomString() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
 
         int length = Integer.parseInt(values[0].execute());
@@ -112,7 +112,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, MIN_PARAM_COUNT, MAX_PARAM_COUNT);
         values = parameters.toArray(new CompoundVariable[parameters.size()]);
     }

File: src/functions/org/apache/jmeter/functions/SamplerName.java
Patch:
@@ -69,7 +69,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters)
+    public void setParameters(Collection<CompoundVariable> parameters)
             throws InvalidVariableException {
         checkParameterCount(parameters, 0, 1);
         values = parameters.toArray();

File: src/functions/org/apache/jmeter/functions/SetProperty.java
Patch:
@@ -64,7 +64,7 @@ public SetProperty() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
         String propertyName = ((CompoundVariable) values[0]).execute();
 
@@ -85,7 +85,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/SplitFunction.java
Patch:
@@ -79,7 +79,7 @@ public SplitFunction() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
         JMeterVariables vars = getVariables();
 
@@ -110,7 +110,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/TestPlanName.java
Patch:
@@ -46,7 +46,7 @@ public TestPlanName() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
         return FileServer.getFileServer().getScriptName();
     }

File: src/functions/org/apache/jmeter/functions/TimeFunction.java
Patch:
@@ -75,7 +75,7 @@ public TimeFunction(){
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException {
+    public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException {
         String datetime;
         if (format.length() == 0){// Default to milliseconds
             datetime = Long.toString(System.currentTimeMillis());
@@ -85,6 +85,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
             if (fmt == null) {
                 fmt = format;// Not found
             }
+            // TODO: avoid regexp parsing in loop
             if (fmt.matches("/\\d+")) { // divisor is a positive number
                 long div = Long.parseLong(fmt.substring(1)); // should never case NFE
                 datetime = Long.toString((System.currentTimeMillis() / div));
@@ -105,7 +106,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
 
         checkParameterCount(parameters, 0, 2);
 

File: src/functions/org/apache/jmeter/functions/UnEscape.java
Patch:
@@ -54,7 +54,7 @@ public UnEscape() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
 
         String rawString = ((CompoundVariable) values[0]).execute();
@@ -64,7 +64,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, 1);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/UnEscapeHtml.java
Patch:
@@ -60,7 +60,7 @@ public UnEscapeHtml() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
 
         String escapedString = ((CompoundVariable) values[0]).execute();
@@ -70,7 +70,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, 1);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/UrlDecode.java
Patch:
@@ -54,7 +54,7 @@ public UrlDecode() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
         String decodeString = ""; //$NON-NLS-1$
         try {
@@ -68,7 +68,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, 1);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/UrlEncode.java
Patch:
@@ -54,7 +54,7 @@ public UrlEncode() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
         String decodeString = ""; //$NON-NLS-1$
         try {
@@ -68,7 +68,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, 1);
         values = parameters.toArray();
     }

File: src/functions/org/apache/jmeter/functions/Variable.java
Patch:
@@ -60,7 +60,7 @@ public Variable() {
 
     /** {@inheritDoc} */
     @Override
-    public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
+    public String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
         String variableName = ((CompoundVariable) values[0]).execute();
         String variableValue = getVariables().get(variableName);
@@ -70,7 +70,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
+    public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);
         values = parameters.toArray();
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -82,7 +82,7 @@ public class Proxy extends Thread {
         JMeterUtils.getPropDefault("proxy.cert.factory", "SunX509"); // $NON-NLS-1$ $NON-NLS-2$
 
     private static final String SSLCONTEXT_PROTOCOL =
-        JMeterUtils.getPropDefault("proxy.ssl.protocol", "SSLv3"); // $NON-NLS-1$ $NON-NLS-2$
+        JMeterUtils.getPropDefault("proxy.ssl.protocol", "TLS"); // $NON-NLS-1$ $NON-NLS-2$
 
     // HashMap to save ssl connection between Jmeter proxy and browser
     private static final HashMap<String, SSLSocketFactory> HOST2SSL_SOCK_FAC = new HashMap<String, SSLSocketFactory>();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -138,6 +138,7 @@ public String getSamplerData() {
             // Include request body if it is a post or put or patch
             if (HTTPConstants.POST.equals(method) || HTTPConstants.PUT.equals(method) 
                     || HTTPConstants.PATCH.equals(method)
+                    || HttpWebdav.isWebdavMethod(method)
                     || HTTPConstants.DELETE.equals(method)) {
                 sb.append("\n"+method+" data:\n");
                 sb.append(queryString);

File: src/core/org/apache/jmeter/util/BeanShellClient.java
Patch:
@@ -77,6 +77,7 @@ public static void main(String [] args) throws Exception{
         sockRead.join(); // wait for script to finish
         is.close();
         os.close();
+        sock.close();
     }
 
     private static void sendLine( String line, OutputStream outPipe )

File: src/jorphan/org/apache/jorphan/exec/KeyToolUtils.java
Patch:
@@ -70,7 +70,7 @@ private static void addElement(StringBuilder sb, String prefix, String value) {
         StringBuilder sb = new StringBuilder();
         sb.append("CN=_ DO NOT INSTALL unless this is your certificate (JMeter root CA)"); // $NON-NLS-1$
         String userName = System.getProperty("user.name"); // $NON-NLS-1$
-        userName.replace('\\','/'); // Backslash is special (Bugzilla 56178)
+        userName = userName.replace('\\','/'); // Backslash is special (Bugzilla 56178)
         addElement(sb, "OU=Username: ", userName); // $NON-NLS-1$
         addElement(sb, "C=", System.getProperty("user.country")); // $NON-NLS-1$ $NON-NLS-2$
         DNAME_ROOT_CA_KEY = sb.toString();

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/LagartoBasedHtmlParser.java
Patch:
@@ -133,7 +133,8 @@ public void tag(Tag tag) {
                     extractAttribute(tag, ATT_DATA);                 
                 } else if (tag.nameEquals(TAG_INPUT)) {
                     // we check the input tag type for image
-                    if (TagUtil.equalsIgnoreCase(ATT_IS_IMAGE, tag.getAttributeValue(ATT_TYPE))) {
+                    CharSequence type = tag.getAttributeValue(ATT_TYPE);
+                    if (type != null && TagUtil.equalsIgnoreCase(ATT_IS_IMAGE, type)) {
                         // then we need to download the binary
                         extractAttribute(tag, ATT_SRC);
                     }
@@ -149,7 +150,7 @@ public void tag(Tag tag) {
                 } else if (tag.nameEquals(TAG_LINK)) {
                     CharSequence relAttribute = tag.getAttributeValue(ATT_REL);
                     // Putting the string first means it works even if the attribute is null
-                    if (TagUtil.equalsIgnoreCase(STYLESHEET,relAttribute)) {
+                    if (relAttribute != null && TagUtil.equalsIgnoreCase(STYLESHEET,relAttribute)) {
                         extractAttribute(tag, ATT_HREF);
                     }
                 } else {

File: src/core/org/apache/jmeter/control/IfController.java
Patch:
@@ -175,7 +175,7 @@ public Sampler next() {
         }
         // If-test is false, need to re-initialize indexes
         try {
-            reInitializeSubController(); // Bug 50032 - reinitialize current index element for all sub controller
+            initializeSubControllers();
             return nextIsNull();
         } catch (NextIsNullException e1) {
             return null;
@@ -187,7 +187,7 @@ public Sampler next() {
      */
     @Override
     public void triggerEndOfLoop() {
-        reInitializeSubController();
+        super.initializeSubControllers();
         super.triggerEndOfLoop();
     }
 

File: test/src/org/apache/jmeter/testbeans/gui/TestBooleanPropertyEditor.java
Patch:
@@ -52,7 +52,6 @@ public void testBooleanPropertyEditor() {
 
     private void testBooleanEditor(PropertyEditor propertyEditor) {
         assertNotNull("Expected to find property editor", propertyEditor);
-        System.out.println(propertyEditor.getClass().getCanonicalName());
         String tags[] = propertyEditor.getTags();
         assertEquals(2,tags.length);
         assertEquals(TRUE,tags[0]);

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -99,8 +99,9 @@ public class GenericTestBeanCustomizer extends JPanel implements SharedCustomize
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    // Need to register Editors that don't follow the standard naming convention,
-    // i.e. <classname>Editor
+    // Need to register Editors for Java classes because we cannot create them
+    // in the same package, nor can we create them in the built-in search patch of packages,
+    // as that is not part of the public API
     static {
         PropertyEditorManager.registerEditor(Long.class,    LongPropertyEditor.class);
         PropertyEditorManager.registerEditor(Integer.class, IntegerPropertyEditor.class);

File: src/core/org/apache/jmeter/testbeans/BeanInfoSupport.java
Patch:
@@ -76,7 +76,8 @@ public abstract class BeanInfoSupport extends SimpleBeanInfo {
     /** Whether the field disallows constant values different from the provided tags; Boolean, default FALSE */
     public static final String NOT_OTHER = GenericTestBeanCustomizer.NOT_OTHER;
 
-    public static final String MULTILINE = "multiline";
+    /** If specified, create a multi-line editor */
+    public static final String MULTILINE = GenericTestBeanCustomizer.MULTILINE;
 
     /** Default value, must be provided if {@link #NOT_UNDEFINED} is TRUE */
     public static final String DEFAULT = GenericTestBeanCustomizer.DEFAULT;

File: src/components/org/apache/jmeter/timers/SyncTimer.java
Patch:
@@ -159,8 +159,10 @@ public long delay() {
             try {
                 if(timeoutInMs==0) {
                     arrival = this.barrier.await();                    
-                } else {
+                } else if(timeoutInMs > 0){
                     arrival = this.barrier.await(timeoutInMs, TimeUnit.MILLISECONDS);
+                } else {
+                    throw new IllegalArgumentException("Negative value for timeout:"+timeoutInMs+" in Synchronizing Timer "+getName());
                 }
             } catch (InterruptedException e) {
                 return 0;

File: src/core/org/apache/jmeter/gui/UndoHistory.java
Patch:
@@ -93,7 +93,7 @@ public boolean add(T item) {
     private static final int INITIAL_POS = -1;
     private int position = INITIAL_POS;
 
-    private static final int HISTORY_SIZE = JMeterUtils.getPropDefault("undo.history.size", 25);
+    private static final int HISTORY_SIZE = JMeterUtils.getPropDefault("undo.history.size", 0);
 
     private List<UndoHistoryItem> history = new LimitedArrayList<UndoHistoryItem>(HISTORY_SIZE);
 

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -393,7 +393,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
             _xml = false;
         }
 
-        _threadCounts=TRUE.equalsIgnoreCase(props.getProperty(SAVE_THREAD_COUNTS, FALSE));
+        _threadCounts=TRUE.equalsIgnoreCase(props.getProperty(SAVE_THREAD_COUNTS, TRUE));
 
         _sampleCount=TRUE.equalsIgnoreCase(props.getProperty(SAVE_SAMPLE_COUNT, FALSE));
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/AbstractSamplerCreator.java
Patch:
@@ -63,7 +63,7 @@ public abstract class AbstractSamplerCreator implements SamplerCreator {
      * Optionally number the requests
      */
     private static final boolean numberRequests =
-        JMeterUtils.getPropDefault("proxy.number.requests", false); // $NON-NLS-1$
+        JMeterUtils.getPropDefault("proxy.number.requests", true); // $NON-NLS-1$
 
     private static volatile int requestNumber = 0;// running number
     

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -163,7 +163,7 @@ public class ProxyControl extends GenericController {
     private static final String SAMPLER_TYPE_HTTP_SAMPLER_HC4 = "2";
 
     private static final long sampleGap =
-        JMeterUtils.getPropDefault("proxy.pause", 1000); // $NON-NLS-1$
+        JMeterUtils.getPropDefault("proxy.pause", 5000); // $NON-NLS-1$
     // Detect if user has pressed a new link
 
     // for ssl connection

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -227,7 +227,7 @@ protected boolean isReusable() {
     /**
      * 
      * @param ieVersion Float IE version
-     * @return
+     * @return true if IE version < IE v10
      */
     protected final boolean isEnableConditionalComments(Float ieVersion) {
         if(ieVersion == null) {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/DNSCacheManager.java
Patch:
@@ -62,11 +62,11 @@ public class DNSCacheManager extends ConfigTestElement implements TestIterationL
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private SystemDefaultDnsResolver systemDefaultDnsResolver = null;
+    private transient SystemDefaultDnsResolver systemDefaultDnsResolver = null;
 
     private Map<String, InetAddress[]> cache = null;
 
-    private Resolver resolver = null;
+    private transient Resolver resolver = null;
 
     //++ JMX tag values
     public static final String CLEAR_CACHE_EACH_ITER = "DNSCacheManager.clearEachIteration"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -47,7 +47,7 @@ public class JMeterTreeNode extends DefaultMutableTreeNode implements NamedTreeN
     private static final int TEST_PLAN_LEVEL = 1;
 
     // See Bug 54648
-    private final transient JMeterTreeModel treeModel;
+    private transient JMeterTreeModel treeModel;
 
     private boolean markedBySearch;
 

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -47,7 +47,7 @@ public class JMeterTreeNode extends DefaultMutableTreeNode implements NamedTreeN
     private static final int TEST_PLAN_LEVEL = 1;
 
     // See Bug 54648
-    private transient JMeterTreeModel treeModel;
+    private final transient JMeterTreeModel treeModel;
 
     private boolean markedBySearch;
 

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -46,7 +46,8 @@ public class JMeterTreeNode extends DefaultMutableTreeNode implements NamedTreeN
 
     private static final int TEST_PLAN_LEVEL = 1;
 
-    private final JMeterTreeModel treeModel;
+    // See Bug 54648
+    private transient JMeterTreeModel treeModel;
 
     private boolean markedBySearch;
 

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.awt.BorderLayout;
 import java.awt.Component;
+import java.awt.Cursor;
 import java.awt.Dimension;
 import java.awt.Font;
 import java.awt.Insets;
@@ -204,7 +205,8 @@ public MainFrame(TreeModel treeModel, JMeterTreeListener treeListener) {
         warnIndicator.setOpaque(false);
         warnIndicator.setContentAreaFilled(false);
         warnIndicator.setBorderPainted(false);
-
+        warnIndicator.setCursor(new Cursor(Cursor.HAND_CURSOR));
+        
         warnIndicator.setToolTipText(JMeterUtils.getResString("error_indicator_tooltip")); // $NON-NLS-1$
         warnIndicator.addActionListener(this);
         errorsOrFatalsLabel = new JLabel("0"); // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -502,7 +502,8 @@ private void init() {
 
         tree.setSelectionRow(1);
         addWindowListener(new WindowHappenings());
-
+        // Building is complete, register as listener
+        GuiPackage.getInstance().registerAsListener();
         setTitle(DEFAULT_TITLE);
         setIconImage(JMeterUtils.getImage("icon-apache.png").getImage());// $NON-NLS-1$
         setWindowTitle(); // define AWT WM_CLASS string

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -95,6 +95,8 @@ public final class ActionNames {
     public static final String MOVE_DOWN        = "move_down"; // $NON-NLS-1$
     public static final String MOVE_LEFT        = "move_left"; // $NON-NLS-1$
     public static final String MOVE_RIGHT       = "move_right"; // $NON-NLS-1$
+    public static final String UNDO             = "undo"; // $NON-NLS-1$
+    public static final String REDO             = "redo"; // $NON-NLS-1$
 
     // Prevent instantiation
     private ActionNames(){

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -241,7 +241,7 @@ public String getName() { // HC3.1 does not have the method
             final CacheManager cacheManager = getCacheManager();
             if (cacheManager != null && HTTPConstants.GET.equalsIgnoreCase(method)) {
                if (cacheManager.inCache(url)) {
-                   return createSampleResultForResourceInCache(res);
+                   return updateSampleResultForResourceInCache(res);
                }
             }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -314,7 +314,7 @@ protected HTTPSampleResult sample(URL url, String method,
         final CacheManager cacheManager = getCacheManager();
         if (cacheManager != null && HTTPConstants.GET.equalsIgnoreCase(method)) {
            if (cacheManager.inCache(url)) {
-               return createSampleResultForResourceInCache(res);
+               return updateSampleResultForResourceInCache(res);
            }
         }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
Patch:
@@ -464,7 +464,7 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe
         final CacheManager cacheManager = getCacheManager();
         if (cacheManager != null && HTTPConstants.GET.equalsIgnoreCase(method)) {
            if (cacheManager.inCache(url)) {
-               return createSampleResultForResourceInCache(res);
+               return updateSampleResultForResourceInCache(res);
            }
         }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1253,7 +1253,7 @@ protected HTTPSampleResult downloadPageResources(HTTPSampleResult res, HTTPSampl
                             // default: serial download embedded resources
                             HTTPSampleResult binRes = sample(url, HTTPConstants.GET, false, frameDepth + 1);
                             res.addSubResult(binRes);
-                            setParentSampleSuccess(res, res.isSuccessful() && binRes.isSuccessful());
+                            setParentSampleSuccess(res, res.isSuccessful() && (binRes != null ? binRes.isSuccessful() : true));
                         }
 
                     }
@@ -1317,7 +1317,7 @@ public void run() {
                                 }
                             }
                             res.addSubResult(binRes.getResult());
-                            setParentSampleSuccess(res, res.isSuccessful() && binRes.getResult().isSuccessful());
+                            setParentSampleSuccess(res, res.isSuccessful() && (binRes.getResult() != null ? binRes.getResult().isSuccessful():true));
                         } catch (TimeoutException e) {
                             errorResult(e, res);
                         }

File: test/src/org/apache/jmeter/JMeterVersionTest.java
Patch:
@@ -118,7 +118,7 @@ public void testEclipse() throws Exception {
             if (m.matches()) {
                 String jar = m.group(1);
                 String version = m.group(2);
-                System.out.println(jar + " => " + version);
+//                System.out.println(jar + " => " + version);
                 if (jar.endsWith("-jdk15on")) { // special handling
                     jar=jar.replace("-jdk15on","");
                 } else if (jar.equals("commons-jexl") && version.startsWith("2")) { // special handling

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParserHTMLParser.java
Patch:
@@ -66,7 +66,7 @@ protected boolean isReusable() {
      * {@inheritDoc}
      */
     @Override
-    public Iterator<URL> getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection urls, String encoding) throws HTMLParseException {
+    public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL baseUrl, URLCollection urls, String encoding) throws HTMLParseException {
 
         if (log.isDebugEnabled()) {
             log.debug("Parsing html of: " + baseUrl);

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/JTidyHTMLParser.java
Patch:
@@ -54,7 +54,7 @@ protected boolean isReusable() {
      * {@inheritDoc}
      */
     @Override
-    public Iterator<URL> getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection urls, String encoding) throws HTMLParseException {
+    public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL baseUrl, URLCollection urls, String encoding) throws HTMLParseException {
         Document dom = null;
         try {
             dom = (Document) getDOM(html, encoding);

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/JsoupBasedHtmlParser.java
Patch:
@@ -139,9 +139,10 @@ public void tail(Node arg0, int arg1) {
     }
 
     @Override
-    public Iterator<URL> getEmbeddedResourceURLs(byte[] html, URL baseUrl,
+    public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL baseUrl,
             URLCollection coll, String encoding) throws HTMLParseException {
         try {
+            // TODO Handle conditional comments for IE
             String contents = new String(html,encoding);
             Document doc = Jsoup.parse(contents);
             JMeterNodeVisitor nodeVisitor = new JMeterNodeVisitor(new URLPointer(baseUrl), coll);

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/RegexpHTMLParser.java
Patch:
@@ -144,7 +144,7 @@ protected RegexpHTMLParser() {
      * @throws HTMLParseException 
      */
     @Override
-    public Iterator<URL> getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection urls, String encoding) throws HTMLParseException {
+    public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL baseUrl, URLCollection urls, String encoding) throws HTMLParseException {
         Pattern pattern= null;
         Perl5Matcher matcher = null;
         try {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -180,7 +180,7 @@ private static boolean validateFormat(String format){
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String FILEVERSION = "1613052"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1618048"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailFileFolder.java
Patch:
@@ -123,7 +123,7 @@ public Message getMessage(int index) throws MessagingException {
                 IOUtils.closeQuietly(fis);
             }
         } catch (FileNotFoundException e) {
-            throw new MessagingException("Cannot open folder: "+e.getMessage());
+            throw new MessagingException("Cannot open folder: "+e.getMessage(), e);
         }
     }
 

File: src/core/org/apache/jmeter/util/HttpSSLProtocolSocketFactory.java
Patch:
@@ -103,7 +103,7 @@ private SSLSocketFactory getSSLSocketFactory() throws IOException {
             SSLContext sslContext = this.sslManager.getContext();
             return sslContext.getSocketFactory();
         } catch (GeneralSecurityException ex) {
-            throw new IOException(ex.getMessage());
+            throw new IOException("Rethrown as IOE", ex);
         }
     }
 

File: test/src/org/apache/jmeter/protocol/http/modifier/TestURLRewritingModifier.java
Patch:
@@ -118,7 +118,7 @@ public void testGrabSessionId6() throws Exception {
             context.setPreviousResult(response);
             mod.process();
             Arguments args = sampler.getArguments();
-            assertEquals("bonjour+monsieur", ((Argument) args.getArguments().get(0).getObjectValue())
+            assertEquals("bonjour monsieur", ((Argument) args.getArguments().get(0).getObjectValue())
                     .getValue());
             assertEquals("http://server.com/index.html?" + "session_id=bonjour+monsieur", sampler.toString());
         }

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -174,13 +174,13 @@ private static boolean validateFormat(String format){
     
     // Must match _version property value in saveservice.properties
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String PROPVERSION = "2.6";// Expected version $NON-NLS-1$
+    private static final String PROPVERSION = "2.7";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String FILEVERSION = "1554411"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1611693"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -392,7 +392,8 @@ public void setupCredentials(HttpClient client, URL url,
                 log.debug(username + " > D="+domain+" R="+realm + " M="+auth.getMechanism());
             }
             if (Mechanism.KERBEROS.equals(auth.getMechanism())) {
-                ((AbstractHttpClient) client).getAuthSchemes().register(AuthPolicy.SPNEGO, new SPNegoSchemeFactory(true));
+                boolean stripPort = (url.getPort() == HTTPConstants.DEFAULT_HTTP_PORT || url.getPort() == HTTPConstants.DEFAULT_HTTPS_PORT);
+                ((AbstractHttpClient) client).getAuthSchemes().register(AuthPolicy.SPNEGO, new SPNegoSchemeFactory(stripPort));
                 credentialsProvider.setCredentials(new AuthScope(null, -1, null), USE_JAAS_CREDENTIALS);
             } else {
                 credentialsProvider.setCredentials(

File: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
Patch:
@@ -229,8 +229,6 @@ public SampleResult sample(Entry e) {
             parent.setDataType(SampleResult.TEXT);
             parent.setContentType("text/plain"); // $NON-NLS-1$
 
-            parent.setSampleCount(messages.length); // TODO is this sensible?
-
             final boolean headerOnly = getHeaderOnly();
             busy = true;
             for (Message message : messages) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -525,7 +525,7 @@ private static final class HttpClientKey {
          */
         public HttpClientKey(URL url, boolean hasProxy, String proxyHost,
                 int proxyPort, String proxyUser, String proxyPass) {
-            // N.B. need to separate protocol from authority otherwise http://server would match https://server
+            // N.B. need to separate protocol from authority otherwise http://server would match https://erver (<= sic, not typo error)
             // could use separate fields, but simpler to combine them
             this.target = url.getProtocol()+"://"+url.getAuthority();
             this.hasProxy = hasProxy;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -525,7 +525,7 @@ private static final class HttpClientKey {
          */
         public HttpClientKey(URL url, boolean hasProxy, String proxyHost,
                 int proxyPort, String proxyUser, String proxyPass) {
-            // N.B. need to separate protocol from authority otherwise http://server would match https://erver
+            // N.B. need to separate protocol from authority otherwise http://server would match https://server
             // could use separate fields, but simpler to combine them
             this.target = url.getProtocol()+"://"+url.getAuthority();
             this.hasProxy = hasProxy;

File: test/src/org/apache/jmeter/protocol/http/control/TestHTTPMirrorThread.java
Patch:
@@ -347,7 +347,6 @@ public void testStatus() throws Exception {
 
     public void testQueryStatus() throws Exception {
         URL url = new URI("http",null,"localhost",HTTP_SERVER_PORT,"/path","status=303 See Other",null).toURL();
-        System.err.println(url);
         HttpURLConnection conn = (HttpURLConnection) url.openConnection();
         conn.connect();
         assertEquals(303, conn.getResponseCode());
@@ -356,7 +355,6 @@ public void testQueryStatus() throws Exception {
 
     public void testQueryRedirect() throws Exception {
         URL url = new URI("http",null,"localhost",HTTP_SERVER_PORT,"/path","redirect=/a/b/c/d?q",null).toURL();
-        System.err.println(url);
         HttpURLConnection conn = (HttpURLConnection) url.openConnection();
         conn.setInstanceFollowRedirects(false);
         conn.connect();

File: src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
Patch:
@@ -569,9 +569,9 @@ public void actionPerformed(ActionEvent event) {
                 writer = new FileWriter(chooser.getSelectedFile()); // TODO Charset ?
                 CSVSaveService.saveCSVStats(getAllTableData(),writer,saveHeaders.isSelected() ? COLUMNS : null);
             } catch (FileNotFoundException e) {
-                log.warn(e.getMessage());
+                JMeterUtils.reportErrorToUser(e.getMessage(), "Error saving data");
             } catch (IOException e) {
-                log.warn(e.getMessage());
+                JMeterUtils.reportErrorToUser(e.getMessage(), "Error saving data");
             } finally {
                 JOrphanUtils.closeQuietly(writer);
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/AuthPanel.java
Patch:
@@ -261,7 +261,7 @@ public void actionPerformed(ActionEvent e) {
                     tableModel.manager.save(chooser.getSelectedFile().getAbsolutePath());
                 }
             } catch (IOException ex) {
-                log.error("", ex);
+                JMeterUtils.reportErrorToUser(ex.getMessage(), "Error saving auth data");
             }
         }
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -232,7 +232,7 @@ public void actionPerformed(ActionEvent e) {
                     ((CookieManager) createTestElement()).save(chooser.getSelectedFile().getAbsolutePath());
                 }
             } catch (IOException ex) {
-                log.error("", ex);
+                JMeterUtils.reportErrorToUser(ex.getMessage(), "Error saving cookies");
             }
         }
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java
Patch:
@@ -223,7 +223,7 @@ public void actionPerformed(ActionEvent e) {
                     headerManager.save(chooser.getSelectedFile().getAbsolutePath());
                 }
             } catch (IOException ex) {
-                log.error("Could not save headers", ex);
+                JMeterUtils.reportErrorToUser(ex.getMessage(), "Error saving headers");
             }
         } else if (action.equals(ADD_FROM_CLIPBOARD)) {
             addFromClipboard();

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java
Patch:
@@ -386,7 +386,7 @@ private String getStringFromResultSet(ResultSet rs) throws SQLException, Unsuppo
 
         int numColumns = meta.getColumnCount();
         for (int i = 1; i <= numColumns; i++) {
-            sb.append(meta.getColumnName(i));
+            sb.append(meta.getColumnLabel(i));
             if (i==numColumns){
                 sb.append('\n');
             } else {
@@ -414,7 +414,7 @@ private String getStringFromResultSet(ResultSet rs) throws SQLException, Unsuppo
                         row = new HashMap<String, Object>(numColumns);
                         results.add(row);
                     }
-                    row.put(meta.getColumnName(i), o);
+                    row.put(meta.getColumnLabel(i), o);
                 }
                 if (o instanceof byte[]) {
                     o = new String((byte[]) o, ENCODING);

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -860,7 +860,7 @@ public static void convertSubTree(HashTree tree) {
                             HashTree replacementTree = rc.getReplacementSubTree();
                             if (replacementTree != null) {
                                 convertSubTree(replacementTree);
-                                tree.replace(item, rc);
+                                tree.replaceKey(item, rc);
                                 tree.set(rc, replacementTree);
                             }
                         } 
@@ -885,14 +885,14 @@ public static void convertSubTree(HashTree tree) {
                             HashTree replacementTree = rc.getReplacementSubTree();
                             if (replacementTree != null) {
                                 convertSubTree(replacementTree);
-                                tree.replace(item, rc);
+                                tree.replaceKey(item, rc);
                                 tree.set(rc, replacementTree);
                             }
                         }
                     } else { // Not a ReplaceableController
                         convertSubTree(tree.getTree(item));
                         TestElement testElement = item.getTestElement();
-                        tree.replace(item, testElement);
+                        tree.replaceKey(item, testElement);
                     }
                  } else { // Not enabled
                     tree.remove(item);

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -211,7 +211,7 @@ void convertSubTree(HashTree tree) {
             JMeterTreeNode item = (JMeterTreeNode) iter.next();
             convertSubTree(tree.getTree(item));
             TestElement testElement = item.getTestElement(); // requires JMeterTreeNode
-            tree.replace(item, testElement);
+            tree.replaceKey(item, testElement);
         }
     }
 }

File: src/jorphan/org/apache/jorphan/collections/HashTree.java
Patch:
@@ -763,7 +763,7 @@ public Collection<?> list(Collection<?> treePath) {
      * Finds the given current key, and replaces it with the given new key. Any
      * tree structure found under the original key is moved to the new key.
      */
-    public void replace(Object currentKey, Object newKey) {
+    public void replaceKey(Object currentKey, Object newKey) {
         HashTree tree = getTree(currentKey);
         data.remove(currentKey);
         data.put(newKey, tree);

File: src/jorphan/org/apache/jorphan/collections/ListedHashTree.java
Patch:
@@ -116,7 +116,7 @@ public void set(Object key, Collection<?> values) {
 
     /** {@inheritDoc} */
     @Override
-    public void replace(Object currentKey, Object newKey) {
+    public void replaceKey(Object currentKey, Object newKey) {
         HashTree tree = getTree(currentKey);
         data.remove(currentKey);
         data.put(newKey, tree);

File: src/reports/org/apache/jmeter/report/gui/action/ReportSave.java
Patch:
@@ -127,7 +127,7 @@ private void convertSubTree(HashTree tree) {
             ReportTreeNode item = (ReportTreeNode) iter.next();
             convertSubTree(tree.getTree(item));
             TestElement testElement = item.getTestElement();
-            tree.replace(item, testElement);
+            tree.replaceKey(item, testElement);
         }
     }
 }

File: src/core/org/apache/jmeter/engine/util/UndoVariableReplacement.java
Patch:
@@ -26,11 +26,11 @@
 import org.apache.jmeter.functions.InvalidVariableException;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.StringProperty;
-import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.StringUtilities;
 
 /**
- * Replaces ${key} by value extracted from {@link JMeterVariables} if any
+ * Replaces ${key} by value extracted from 
+ * {@link org.apache.jmeter.threads.JMeterVariables JMeterVariables} if any
  */
 public class UndoVariableReplacement extends AbstractTransformer {
     public UndoVariableReplacement(CompoundVariable masterFunction, Map<String, String> variables) {

File: src/core/org/apache/jmeter/engine/util/UndoVariableReplacement.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.jmeter.functions.InvalidVariableException;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.StringProperty;
+import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.StringUtilities;
 
 /**

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -171,7 +171,7 @@ static void loadProjectFile(final ActionEvent e, final File f, final boolean mer
     public static boolean insertLoadedTree(final int id, final HashTree tree, final boolean merging) throws IllegalUserActionException {
         // convertTree(tree);
         if (tree == null) {
-            throw new IllegalUserActionException("Empty TestPlan - see log file");
+            throw new IllegalUserActionException("Empty TestPlan or error reading test plan - see log file");
         }
         final boolean isTestPlan = tree.getArray()[0] instanceof TestPlan;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
Patch:
@@ -116,8 +116,9 @@ public void run() {
                         String params[] = query.split("&");
                         for(String param : params) {
                             String parts[] = param.split("=",2);
-                            parameters.put(parts[0], parts[1]);
-                            System.err.println(parts[0]+ "=>" + parts[1]);
+                            if (parts.length==2) {
+                                parameters.put(parts[0], parts[1]);
+                            }
                         }
                     }
                 } catch (URISyntaxException e) {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -187,6 +187,7 @@ protected void computeFromPostBody(HTTPSamplerBase sampler,
                 sampler.setArguments(urlConfig.getArguments());
                 // Set the file uploads
                 sampler.setHTTPFiles(urlConfig.getHTTPFileArgs().asArray());
+                sampler.setDoBrowserCompatibleMultipart(true); // we are parsing browser input here
             // used when postData is pure xml (eg. an xml-rpc call) or for PUT
             } else if (postData.trim().startsWith("<?") 
                     || HTTPConstants.PUT.equals(sampler.getMethod())

File: src/components/org/apache/jmeter/assertions/JSR223Assertion.java
Patch:
@@ -47,11 +47,11 @@ public AssertionResult getResult(SampleResult response) {
             processFileOrScript(scriptEngine, bindings);
             result.setError(false);
         } catch (IOException e) {
-            log.error("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script "+getName(), e);
             result.setError(true);
             result.setFailureMessage(e.toString());
         } catch (ScriptException e) {
-            log.error("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script "+getName(), e);
             result.setError(true);
             result.setFailureMessage(e.toString());
         }

File: src/components/org/apache/jmeter/extractor/JSR223PostProcessor.java
Patch:
@@ -41,9 +41,9 @@ public void process() {
             ScriptEngine scriptEngine = getScriptEngine();
             processFileOrScript(scriptEngine, null);
         } catch (ScriptException e) {
-            log.error("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script "+getName(), e);
         } catch (IOException e) {
-            log.error("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script "+getName(), e);
         }
     }
 }

File: src/components/org/apache/jmeter/modifiers/JSR223PreProcessor.java
Patch:
@@ -41,9 +41,9 @@ public void process() {
             ScriptEngine scriptEngine = getScriptEngine();
             processFileOrScript(scriptEngine, null);
         } catch (ScriptException e) {
-            log.error("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script "+getName(), e);
         } catch (IOException e) {
-            log.error("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script "+getName(), e);
         }
     }
 }

File: src/components/org/apache/jmeter/timers/JSR223Timer.java
Patch:
@@ -46,11 +46,11 @@ public long delay() {
             }
             delay = Long.parseLong(o.toString());
         } catch (NumberFormatException e) {
-            log.error("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script "+getName(), e);
         } catch (IOException e) {
-            log.error("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script "+getName(), e);
         } catch (ScriptException e) {
-            log.error("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script "+getName(), e);
         }
         return delay;
     }

File: src/components/org/apache/jmeter/visualizers/JSR223Listener.java
Patch:
@@ -49,9 +49,9 @@ public void sampleOccurred(SampleEvent event) {
             bindings.put("sampleResult", event.getResult());
             processFileOrScript(scriptEngine, bindings);
         } catch (ScriptException e) {
-            log.error("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script "+getName(), e);
         } catch (IOException e) {
-            log.error("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script "+getName(), e);
         }
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -327,8 +327,9 @@ public String getName() { // HC3.1 does not have the method
                     if(!STRICT_RFC_2616 && !(redirectLocation.startsWith("http://")||redirectLocation.startsWith("https://"))) {
                         redirectLocation = ConversionUtils.buildFullUrlFromRelative(url, redirectLocation);
                     }
-
-                    res.setRedirectLocation(ConversionUtils.sanitizeUrl(new URL(redirectLocation)).toString());
+                    res.setRedirectLocation(redirectLocation); // in case sanitising fails
+                    final URL redirectUrl = new URL(redirectLocation);
+                    res.setRedirectLocation(ConversionUtils.sanitizeUrl(redirectUrl).toString());
                 } catch (Exception e) {
                     log.error("Error sanitizing URL:"+headerLocation.getValue()+", message:"+e.getMessage());
                 }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -364,6 +364,7 @@ protected HTTPSampleResult sample(URL url, String method,
                     redirectLocation = ConversionUtils.buildFullUrlFromRelative(url, redirectLocation);
                 }
                 try {
+                    res.setRedirectLocation(redirectLocation); // in case sanitising fails
                     final URL redirectUrl = new URL(redirectLocation);
                     res.setRedirectLocation(ConversionUtils.sanitizeUrl(redirectUrl).toString());
                 } catch (Exception e) {

File: src/jorphan/org/apache/jorphan/exec/KeyToolUtils.java
Patch:
@@ -69,7 +69,9 @@ private static void addElement(StringBuilder sb, String prefix, String value) {
     static {
         StringBuilder sb = new StringBuilder();
         sb.append("CN=_ DO NOT INSTALL unless this is your certificate (JMeter root CA)"); // $NON-NLS-1$
-        addElement(sb, "OU=Username: ", System.getProperty("user.name")); // $NON-NLS-1$ $NON-NLS-2$
+        String userName = System.getProperty("user.name"); // $NON-NLS-1$
+        userName.replace('\\','/'); // Backslash is special (Bugzilla 56178)
+        addElement(sb, "OU=Username: ", userName); // $NON-NLS-1$
         addElement(sb, "C=", System.getProperty("user.country")); // $NON-NLS-1$ $NON-NLS-2$
         DNAME_ROOT_CA_KEY = sb.toString();
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSSamplerGui.java
Patch:
@@ -19,7 +19,6 @@
 package org.apache.jmeter.protocol.jms.control.gui;
 
 import java.awt.BorderLayout;
-import java.awt.Dimension;
 
 import javax.swing.BorderFactory;
 import javax.swing.Box;
@@ -247,8 +246,6 @@ private void init() {
         JPanel messageContentPanel = new JPanel(new BorderLayout());
         messageContentPanel.add(new JLabel(JMeterUtils.getResString("jms_msg_content")), BorderLayout.NORTH);
         messageContentPanel.add(new JTextScrollPane(messageContent), BorderLayout.CENTER);
-        Dimension pref = new Dimension(400, 150);
-        messageContent.setPreferredSize(pref);
         messagePanel.add(messageContentPanel, BorderLayout.CENTER);
 
         jmsPropertiesPanel = new JMSPropertiesPanel(); //$NON-NLS-1$

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -49,7 +49,7 @@ public final class JMeterVersion {
      * This ensures that JMeterUtils always gets the correct
      * version, even if JMeterUtils is not re-compiled during the build.
      */
-    private static final String VERSION = "2.11";
+    private static final String VERSION = "2.12-SNAPSHOT";
 
     private static final String IMPLEMENTATION;
     

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -258,7 +258,7 @@ public static enum KeystoreMode {
 
     private volatile boolean samplerDownloadImages = false;
 
-    private volatile boolean notifyChildSamplerListenersOfFilteredSamples = false;
+    private volatile boolean notifyChildSamplerListenersOfFilteredSamples = true;
 
     private volatile boolean regexMatch = false;// Should we match using regexes?
 
@@ -424,7 +424,7 @@ public boolean getSamplerDownloadImages() {
     }
 
     public boolean getNotifyChildSamplerListenerOfFilteredSamplers() {
-        return getPropertyAsBoolean(NOTIFY_CHILD_SAMPLER_LISTENERS_FILTERED, false);
+        return getPropertyAsBoolean(NOTIFY_CHILD_SAMPLER_LISTENERS_FILTERED, true);
     }
     
     public boolean getRegexMatch() {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -843,7 +843,7 @@ private JPanel createNotifyListenersPanel() {
                 .getResString("notify_child_listeners_fr"))); // $NON-NLS-1$
         
         notifyChildSamplerListenerOfFilteredSamplersCB = new JCheckBox(JMeterUtils.getResString("notify_child_listeners_fr")); // $NON-NLS-1$
-        notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(false);
+        notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(true);
         notifyChildSamplerListenerOfFilteredSamplersCB.addActionListener(this);
         notifyChildSamplerListenerOfFilteredSamplersCB.setActionCommand(ENABLE_RESTART);
 

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -49,7 +49,7 @@ public final class JMeterVersion {
      * This ensures that JMeterUtils always gets the correct
      * version, even if JMeterUtils is not re-compiled during the build.
      */
-    private static final String VERSION = "2.10";
+    private static final String VERSION = "2.11-SNAPSHOT";
 
     private static final String IMPLEMENTATION;
     

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -180,7 +180,7 @@ private static boolean validateFormat(String format){
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String FILEVERSION = "1545092"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1554411"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPropertiesPanel.java
Patch:
@@ -46,7 +46,7 @@
 
 /**
  * Handles input for Jms Properties
- * @since 2.10.1
+ * @since 2.11
  */
 public class JMSPropertiesPanel extends JPanel implements ActionListener {
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSProperties.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * A set of JMSProperty objects.
- * @since 2.10.1
+ * @since 2.11
  */
 public class JMSProperties extends AbstractTestElement implements Serializable {
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSProperty.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * JMS Property with type
- * @since 2.10.1
+ * @since 2.11
  */
 public class JMSProperty extends AbstractTestElement implements Serializable {
 

File: src/components/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -74,7 +74,7 @@ public class ResponseAssertion extends AbstractScopedAssertion implements Serial
 
     /*
      * Mask values for TEST_TYPE TODO: remove either MATCH or CONTAINS - they
-     * are mutually exckusive
+     * are mutually exclusive
      */
     private static final int MATCH = 1 << 0;
 

File: src/components/org/apache/jmeter/assertions/gui/AssertionGui.java
Patch:
@@ -200,7 +200,7 @@ public void clearGui() {
         responseHeadersButton.setSelected(false);
         assumeSuccess.setSelected(false);
 
-        containsBox.setSelected(true);
+        substringBox.setSelected(true);
         notBox.setSelected(false);
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -95,6 +95,8 @@ public class HTTPHC3Impl extends HTTPHCAbstractImpl {
     /** retry count to be used (default 1); 0 = disable retries */
     private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient3.retrycount", 0);
 
+    private static final boolean STRICT_RFC_2616 = JMeterUtils.getPropDefault("jmeter.httpclient.strict_rfc2616", false);
+
     private static final String HTTP_AUTHENTICATION_PREEMPTIVE = "http.authentication.preemptive"; // $NON-NLS-1$
 
     private static final boolean canSetPreEmptive; // OK to set pre-emptive auth?
@@ -322,7 +324,7 @@ public String getName() { // HC3.1 does not have the method
                 }
                 try {
                     String redirectLocation = headerLocation.getValue();
-                    if(!(redirectLocation.startsWith("http://")||redirectLocation.startsWith("https://"))) {
+                    if(!STRICT_RFC_2616 && !(redirectLocation.startsWith("http://")||redirectLocation.startsWith("https://"))) {
                         redirectLocation = ConversionUtils.buildFullUrlFromRelative(url, redirectLocation);
                     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -127,6 +127,8 @@ public class HTTPHC4Impl extends HTTPHCAbstractImpl {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
+    private static final boolean STRICT_RFC_2616 = JMeterUtils.getPropDefault("jmeter.httpclient.strict_rfc2616", false);
+
     /** retry count to be used (default 1); 0 = disable retries */
     private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient4.retrycount", 0);
 
@@ -334,7 +336,7 @@ protected HTTPSampleResult sample(URL url, String method,
                     throw new IllegalArgumentException("Missing location header in redirect for " + httpRequest.getRequestLine());
                 }
                 String redirectLocation = headerLocation.getValue();
-                if(!(redirectLocation.startsWith("http://")|| redirectLocation.startsWith("https://"))) {
+                if(!STRICT_RFC_2616 && !(redirectLocation.startsWith("http://")|| redirectLocation.startsWith("https://"))) {
                     redirectLocation = ConversionUtils.buildFullUrlFromRelative(url, redirectLocation);
                 }
                 try {

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -767,7 +767,7 @@ private void runNonGui(String testFile, String logFile, boolean remoteStart, Str
             convertSubTree(tree);
 
             Summariser summer = null;
-            String summariserName = JMeterUtils.getPropDefault("summariser.name", "");//$NON-NLS-1$
+            String summariserName = JMeterUtils.getPropDefault("summariser.name", "summary");//$NON-NLS-1$
             if (summariserName.length() > 0) {
                 log.info("Creating summariser <" + summariserName + ">");
                 println("Creating summariser <" + summariserName + ">");

File: src/core/org/apache/jmeter/reporters/Summariser.java
Patch:
@@ -72,8 +72,8 @@ public class Summariser extends AbstractTestElement
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    /** interval between summaries (in seconds) default 3 minutes */
-    private static final long INTERVAL = JMeterUtils.getPropDefault("summariser.interval", 3 * 60); //$NON-NLS-1$
+    /** interval between summaries (in seconds) default 30 seconds */
+    private static final long INTERVAL = JMeterUtils.getPropDefault("summariser.interval", 30); //$NON-NLS-1$
 
     /** Write messages to log file ? */
     private static final boolean TOLOG = JMeterUtils.getPropDefault("summariser.log", true); //$NON-NLS-1$

File: src/functions/org/apache/jmeter/functions/IntSum.java
Patch:
@@ -61,7 +61,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
         JMeterVariables vars = getVariables();
 
         int sum = 0;
-        String varName = ((CompoundVariable) values[values.length - 1]).execute();
+        String varName = ((CompoundVariable) values[values.length - 1]).execute().trim(); // trim() see bug 55871
 
         for (int i = 0; i < values.length - 1; i++) {
             sum += Integer.parseInt(((CompoundVariable) values[i]).execute());

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -175,6 +175,7 @@ protected Map<HttpClientKey, HttpClient> initialValue() {
         log.info("HTTP request retry count = "+RETRY_COUNT);
         
         DEFAULT_HTTP_PARAMS = new SyncBasicHttpParams(); // Could we drop the Sync here?
+        DEFAULT_HTTP_PARAMS.setBooleanParameter("http.connection.stalecheck", false);
         DefaultHttpClient.setDefaultHttpParams(DEFAULT_HTTP_PARAMS);
         
         // Process Apache HttpClient parameters file

File: src/core/org/apache/jmeter/control/gui/TransactionControllerGui.java
Patch:
@@ -48,6 +48,7 @@ public TransactionControllerGui() {
     @Override
     public TestElement createTestElement() {
         TransactionController lc = new TransactionController();
+        lc.setIncludeTimers(false); // change default for new test elements
         configureTestElement(lc);
         return lc;
     }

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -755,7 +755,7 @@ public void setEncodingAndType(String ct){
                     charSet=charSet.substring(0, semiColon);
                 }
                 // Check for quoted string
-                if (charSet.startsWith("\"")){ // $NON-NLS-1$
+                if (charSet.startsWith("\"")||charSet.startsWith("\'")){ // $NON-NLS-1$
                     setDataEncoding(charSet.substring(1, charSet.length()-1)); // remove quotes
                 } else {
                     setDataEncoding(charSet);

File: src/components/org/apache/jmeter/visualizers/RespTimeGraphVisualizer.java
Patch:
@@ -489,8 +489,8 @@ public void actionPerformed(ActionEvent event) {
                 filePanel.actionPerformed(event);
             } else {
                 // Reload data form internal list of results
-                if (internalList.size() >= 2) {
-                    synchronized (lockInterval) {
+                synchronized (lockInterval) {
+                    if (internalList.size() >= 2) {
                         List<RespTimeGraphDataBean> tempList = new ArrayList<RespTimeGraphDataBean>();
                         tempList.addAll(internalList);
                         this.clearData();

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -203,7 +203,7 @@ public static void addFileMenu(JPopupMenu pop) {
 
     /**
      * @param menu JPopupMenu
-     * @param addTestFragmentMenu Add Save as Test Fragment menu if true 
+     * @param addSaveTestFragmentMenu Add Save as Test Fragment menu if true 
      */
     public static void addFileMenu(JPopupMenu menu, boolean addSaveTestFragmentMenu) {
         addSeparator(menu);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/Utils.java
Patch:
@@ -195,10 +195,10 @@ public static void addJMSProperties(Message msg, Map<String, Object> map) throws
 
 
     /**
-     * Converts {@link Arguments} to {@link JmsProperties} defaulting to String type
+     * Converts {@link Arguments} to {@link JMSProperties} defaulting to String type
      * Used to convert version <= 2.10 test plans
      * @param args {@link Arguments}
-     * @return jmsProperties {@link JmsProperties}
+     * @return jmsProperties {@link JMSProperties}
      */
     public static final JMSProperties convertArgumentsToJmsProperties(Arguments args) {
         JMSProperties jmsProperties = new JMSProperties();

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSProperties.java
Patch:
@@ -133,8 +133,8 @@ public void addJmsProperty(JMSProperty arg) {
      *            the name of the argument
      * @param value
      *            the value of the argument
-     * @param metadata
-     *            the metadata for the argument
+     * @param type
+     *            the type for the argument
      */
     public void addJmsProperty(String name, String value, String type) {
         addJmsProperty(new JMSProperty(name, value, type));

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSProperty.java
Patch:
@@ -123,8 +123,8 @@ public String getValue() {
     /**
      * Sets the Meta Data attribute of the JmsProperty.
      *
-     * @param newMetaData
-     *            the new metadata
+     * @param type
+     *            the new type
      */
     public void setType(String type) {
         setProperty(new StringProperty(PROP_TYPE, type));

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -174,13 +174,13 @@ private static boolean validateFormat(String format){
     
     // Must match _version property value in saveservice.properties
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String PROPVERSION = "2.5";// Expected version $NON-NLS-1$
+    private static final String PROPVERSION = "2.6";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String FILEVERSION = "1545089"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1545092"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -180,7 +180,7 @@ private static boolean validateFormat(String format){
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String FILEVERSION = "1519088"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1545089"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/components/org/apache/jmeter/visualizers/RenderAsXPath.java
Patch:
@@ -182,7 +182,7 @@ private Document parseResponse(String unicodeData, XPathExtractor extractor)
     public void renderResult(SampleResult sampleResult) {
         String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);
         try {
-            xmlDataField.setText(response == null ? "" : XPathUtil.formatXml(response));
+            xmlDataField.setText(response == null ? "" : response);
             xmlDataField.setCaretPosition(0);
         } catch (Exception e) {
             logger.error("Exception converting to XML:"+response+ ", message:"+e.getMessage(),e);

File: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
Patch:
@@ -1441,6 +1441,8 @@ private HTTPSamplerBase createHttpSampler(int samplerType) {
                 return new HTTPSampler2();
             case HTTP_SAMPLER3:
                 return new HTTPSampler3();
+            default:
+                break;
         }
         throw new IllegalArgumentException("Unexpected type: "+samplerType);
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -860,7 +860,7 @@ private JMeterTreeNode findTargetControllerNode() {
         if (myTarget != null) {
             return myTarget;
         }
-        log.error("Program error: proxy recording target not found.");
+        log.error("Program error: test script recording target not found.");
         return null;
     }
 

File: src/components/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -22,6 +22,7 @@
 import java.net.URL;
 import java.util.ArrayList;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.AbstractScopedAssertion;
 import org.apache.jmeter.testelement.property.CollectionProperty;
@@ -334,7 +335,7 @@ private AssertionResult evaluateResponse(SampleResult response) {
             log.debug("Type:" + (contains?"Contains":"Match") + (notTest? "(not)": ""));
         }
 
-        if (toCheck.length() == 0) {
+        if (StringUtils.isEmpty(toCheck)) {
             if (notTest) { // Not should always succeed against an empty result
                 return result;
             }

File: src/components/org/apache/jmeter/extractor/RegexExtractor.java
Patch:
@@ -196,7 +196,7 @@ private List<MatchResult> processMatches(Pattern pattern, String regex, SampleRe
         if (isScopeVariable()){
             String inputString=vars.get(getVariableName());
             if(inputString == null) {
-                log.warn("No variable '"+getVariableName()+"' found to process by RegexExtractor "+getName()+", skipping processing");
+                log.warn("No variable '"+getVariableName()+"' found to process by RegexExtractor '"+getName()+"', skipping processing");
                 return Collections.emptyList();
             }
             matchStrings(matchNumber, matcher, pattern, matches, found,

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
Patch:
@@ -110,7 +110,6 @@ public void run() {
                     out.write(CRLF);                    
                 }
             }
-            out.write(CRLF);
             
             // Look for special Response Length header
             String responseLengthValue = getRequestHeaderValue(headerString, "X-ResponseLength"); //$NON-NLS-1$

File: src/core/org/apache/jmeter/gui/util/FilePanelEntry.java
Patch:
@@ -136,9 +136,9 @@ public void actionPerformed(ActionEvent e) {
         if (e.getActionCommand().equals(ACTION_BROWSE)) {
             JFileChooser chooser;
             if(filetypes == null || filetypes.length == 0){
-                chooser = FileDialoger.promptToOpenFile();
+                chooser = FileDialoger.promptToOpenFile(filename.getText());
             } else {
-                chooser = FileDialoger.promptToOpenFile(filetypes);
+                chooser = FileDialoger.promptToOpenFile(filetypes, filename.getText());
             }
             if (chooser != null && chooser.getSelectedFile() != null) {
                 filename.setText(chooser.getSelectedFile().getPath());

File: src/core/org/apache/jmeter/gui/util/ButtonPanel.java
Patch:
@@ -66,6 +66,8 @@ public void addButtonListener(int button, ActionListener listener) {
         case SAVE_BUTTON:
             save.addActionListener(listener);
             break;
+        default:
+        	throw new IllegalStateException("Unexpected button id: " + button);
         }
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -176,7 +176,7 @@ private void setCache(String lastModified, String cacheControl, String expires,
         if (useExpires) {// Check that we are processing Expires/CacheControl
             final String MAX_AGE = "max-age=";
             
-            if(cacheControl.contains("no-store")) {
+            if(cacheControl != null && cacheControl.contains("no-store")) {
                 // We must not store an CacheEntry, otherwise a 
                 // conditional request may be made
                 return;

File: src/core/org/apache/jmeter/control/gui/TestPlanGui.java
Patch:
@@ -100,7 +100,7 @@ public JPopupMenu createPopupMenu() {
         addMenu.add(MenuFactory.makeMenu(MenuFactory.LISTENERS, ActionNames.ADD));
         pop.add(addMenu);
         MenuFactory.addPasteResetMenu(pop);
-        MenuFactory.addFileMenu(pop);
+        MenuFactory.addFileMenu(pop, false);
         return pop;
     }
 

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -78,6 +78,7 @@ public final class ActionNames {
     public static final String SAVE             = "save"; // $NON-NLS-1$
     public static final String SAVE_ALL_AS      = "save_all_as";  // $NON-NLS-1$
     public static final String SAVE_AS          = "save_as"; // $NON-NLS-1$
+    public static final String SAVE_AS_TEST_FRAGMENT          = "save_as_test_fragment"; // $NON-NLS-1$
     public static final String SAVE_GRAPHICS    = "save_graphics"; // $NON-NLS-1$
     public static final String SAVE_GRAPHICS_ALL= "save_graphics_all"; // $NON-NLS-1$
     public static final String SSL_MANAGER      = "sslManager"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/threads/gui/AbstractThreadGroupGui.java
Patch:
@@ -79,7 +79,7 @@ public JPopupMenu createPopupMenu() {
                 JMeterUtils.getResString("add"), // $NON-NLS-1$
                 ActionNames.ADD));
         MenuFactory.addEditMenu(pop, true);
-        MenuFactory.addFileMenu(pop);
+        MenuFactory.addFileMenu(pop, false);
         return pop;
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -167,7 +167,7 @@ public void run() {
             // Now, parse initial request (in case it is a CONNECT request)
             byte[] ba = request.parse(new BufferedInputStream(clientSocket.getInputStream()));
             if (ba.length == 0) {
-                log.warn(port + "Empty request, ignored");
+                log.info(port + "Empty request, ignored");
                 throw new JMeterException(); // hack to skip processing
             }
             if (log.isDebugEnabled()) {

File: src/protocol/native/org/apache/jmeter/protocol/system/gui/SystemSamplerGui.java
Patch:
@@ -154,6 +154,8 @@ public void configure(TestElement el) {
         stdin.setFilename(systemSampler.getStdin());
         stdout.setFilename(systemSampler.getStdout());
         stderr.setFilename(systemSampler.getStderr());
+        timeout.setText(systemSampler.getTimeout() == 0L ? "":  // $NON-NLS-1$
+            Long.toString(systemSampler.getTimeout())); // not sure if replace 0L to empty string is the good way.
     }
 
     /**
@@ -268,6 +270,7 @@ public void clearGui() {
         stdin.clearGui();
         stdout.clearGui();
         stderr.clearGui();
+        timeout.setText(""); // $NON-NLS-1$
     }
 
     @Override

File: src/core/org/apache/jmeter/gui/util/JMeterToolBar.java
Patch:
@@ -181,8 +181,7 @@ public void localeChanged(LocaleChangeEvent event) {
     }
 
     /**
-     * Change state of buttons
-     * @param started
+     * Init the state of buttons
      */
     public void initButtonsState() {
         final boolean started = false;

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -583,7 +583,9 @@ private void addPluginsMenuItems(JMenu menu, List<MenuCreator> menuCreators, MEN
     
     public void setRunning(boolean running, String host) {
         log.info("setRunning(" + running + "," + host + ")");
-
+        if(org.apache.jmeter.gui.MainFrame.LOCAL.equals(host)) {
+            return;
+        }
         Iterator<JMenuItem> iter = remote_engine_start.iterator();
         Iterator<JMenuItem> iter2 = remote_engine_stop.iterator();
         Iterator<JMenuItem> iter3 = remote_engine_exit.iterator();

File: test/src/org/apache/jmeter/JMeterVersionTest.java
Patch:
@@ -130,7 +130,7 @@ public void testEclipse() throws Exception {
         }
         eclipse.close();
         if (propNames.size() > 0) {
-            fail("Should have no names left: "+Arrays.toString(propNames.toArray()));
+            fail("Should have no names left: "+Arrays.toString(propNames.toArray()) + ". Check eclipse.classpath");
         }
     }
 
@@ -159,7 +159,7 @@ public void testMaven() throws Exception {
         }
         maven.close();
         if (propNames.size() > 0) {
-            fail("Should have no names left: "+Arrays.toString(propNames.toArray()));
+            fail("Should have no names left: "+Arrays.toString(propNames.toArray()) + ". Check ApacheJMeter_parent.pom");
         }
    }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -753,6 +753,7 @@ public void run() {
     private void addTransactionController(final JMeterTreeModel model, final JMeterTreeNode node, String name)
             throws InterruptedException, InvocationTargetException {
         final TransactionController sc = new TransactionController();
+        sc.setIncludeTimers(false);
         sc.setProperty(TestElement.GUI_CLASS, TRANSACTION_CONTROLLER_GUI);
         sc.setName(name);
         JMeterUtils.runSafe(new Runnable() {

File: src/core/org/apache/jmeter/samplers/SampleSenderFactory.java
Patch:
@@ -95,8 +95,9 @@ static SampleSender getInstance(RemoteSampleListener listener) {
                 s = (SampleSender) cons.newInstance(new Object [] {listener});
             } catch (Exception e) {
                 // houston we have a problem !!
-                log.error("Unable to create a sample sender from class "+type);
-                throw new IllegalArgumentException(e.getMessage(), e);
+                log.error("Unable to create a sample sender from class:'"+type+"', search for mode property in jmeter.properties for correct configuration options");
+                throw new IllegalArgumentException("Unable to create a sample sender from mode or class:'"
+                		+type+"', search for mode property in jmeter.properties for correct configuration options, message:"+e.getMessage(), e);
             }
 
             return s;

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -491,7 +491,7 @@ private void init() {
         addWindowListener(new WindowHappenings());
 
         setTitle(DEFAULT_TITLE);
-        setIconImage(JMeterUtils.getImage("jmeter.jpg").getImage());// $NON-NLS-1$
+        setIconImage(JMeterUtils.getImage("icon-apache.png").getImage());// $NON-NLS-1$
         setWindowTitle(); // define AWT WM_CLASS string
     }
 

File: src/reports/org/apache/jmeter/gui/ReportMainFrame.java
Patch:
@@ -286,7 +286,7 @@ private void init() {// called from ctor, so must not be overridable
         addWindowListener(new WindowHappenings());
 
         setTitle(DEFAULT_TITLE);
-        setIconImage(JMeterUtils.getImage("jmeter.jpg").getImage());// $NON-NLS-1$
+        setIconImage(JMeterUtils.getImage("icon-apache.png").getImage());// $NON-NLS-1$
     }
 
     public void setExtendedFrameTitle(String fname) {

File: src/components/org/apache/jmeter/visualizers/RespTimeGraphVisualizer.java
Patch:
@@ -373,6 +373,7 @@ public void clearData() {
             durationTest = 0;
             colorIdx = 0;
         }
+        tabbedGraph.setSelectedIndex(0);
     }
 
     /**
@@ -517,6 +518,7 @@ private void actionMakeGraph() {
             makeGraph();
             tabbedGraph.setSelectedIndex(1);
         } else {
+            tabbedGraph.setSelectedIndex(0);
             JOptionPane.showMessageDialog(null, msgErr, msgErr, JOptionPane.WARNING_MESSAGE);
         }
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -67,7 +67,7 @@ public abstract class HTMLParser {
     public static final String PARSER_CLASSNAME = "htmlParser.className"; // $NON-NLS-1$
 
     public static final String DEFAULT_PARSER =
-        "org.apache.jmeter.protocol.http.parser.HtmlParserHTMLParser"; // $NON-NLS-1$
+        "org.apache.jmeter.protocol.http.parser.LagartoBasedHtmlParser"; // $NON-NLS-1$
 
     /**
      * Protected constructor to prevent instantiation except from within

File: test/src/org/apache/jmeter/protocol/http/parser/TestHTMLParser.java
Patch:
@@ -100,7 +100,8 @@ private TestData(String f, String b, String s, String l) {
             "org.apache.jmeter.protocol.http.parser.HtmlParserHTMLParser",
             "org.apache.jmeter.protocol.http.parser.JTidyHTMLParser",
             "org.apache.jmeter.protocol.http.parser.RegexpHTMLParser",
-            "org.apache.jmeter.protocol.http.parser.LagartoBasedHtmlParser"
+            "org.apache.jmeter.protocol.http.parser.LagartoBasedHtmlParser",
+            "org.apache.jmeter.protocol.http.parser.JsoupBasedHtmlParser"
             };
 
         private static final TestData[] TESTS = new TestData[] {

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -67,7 +67,7 @@ public abstract class HTMLParser {
     public static final String PARSER_CLASSNAME = "htmlParser.className"; // $NON-NLS-1$
 
     public static final String DEFAULT_PARSER =
-        "org.apache.jmeter.protocol.http.parser.LagartoBasedHtmlParser"; // $NON-NLS-1$
+        "org.apache.jmeter.protocol.http.parser.HtmlParserHTMLParser"; // $NON-NLS-1$
 
     /**
      * Protected constructor to prevent instantiation except from within

File: test/src/org/apache/jmeter/protocol/http/parser/TestHTMLParser.java
Patch:
@@ -99,7 +99,8 @@ private TestData(String f, String b, String s, String l) {
         private static final String[] PARSERS = { 
             "org.apache.jmeter.protocol.http.parser.HtmlParserHTMLParser",
             "org.apache.jmeter.protocol.http.parser.JTidyHTMLParser",
-            "org.apache.jmeter.protocol.http.parser.RegexpHTMLParser" 
+            "org.apache.jmeter.protocol.http.parser.RegexpHTMLParser",
+            "org.apache.jmeter.protocol.http.parser.LagartoBasedHtmlParser"
             };
 
         private static final TestData[] TESTS = new TestData[] {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java
Patch:
@@ -135,9 +135,9 @@ public void run() {
                     // told to stop running.
                 }
             }
-            log.info("Proxy Server stopped");
+            log.info("HTTP(S) Test Script Recorder stopped");
         } catch (Exception e) {
-            log.warn("Proxy Server stopped", e);
+            log.warn("HTTP(S) Test Script Recorder stopped", e);
         } finally {
             JOrphanUtils.closeQuietly(mainSocket);
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -242,7 +242,7 @@ public void run() {
             log.error(port + "Not implemented (probably used https)", e);
             writeErrorToClient(HttpReplyHdr.formNotImplemented("Probably used https instead of http. " +
                     "To record https requests, see " +
-                    "<a href=\"http://jmeter.apache.org/usermanual/component_reference.html#HTTP_Proxy_Server\">HTTP Proxy Server documentation</a>"));
+                    "<a href=\"http://jmeter.apache.org/usermanual/component_reference.html#HTTP(S)_Test_Script_Recorder\">HTTP(S) Test Script Recorder documentation</a>"));
             result = generateErrorResult(result, request, e); // Generate result (if nec.) and populate it
         } catch (Exception e) {
             log.error(port + "Exception when processing sample", e);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java
Patch:
@@ -217,9 +217,6 @@ private void init() {
         messageContentPanel.add(new JTextScrollPane(textMessage), BorderLayout.CENTER);
 
         mainPanel.add(messageContentPanel);
-        Dimension pref = new Dimension(400, 150);
-        textMessage.setPreferredSize(pref);
-
         useProperties.addChangeListener(this);
         useAuth.addChangeListener(this);
         configChoice.addChangeListener(this);
@@ -267,6 +264,7 @@ public void configure(TestElement el) {
         jmsUser.setText(sampler.getUsername());
         jmsPwd.setText(sampler.getPassword());
         textMessage.setInitialText(sampler.getTextMessage());
+        textMessage.setCaretPosition(0);
         messageFile.setFilename(sampler.getInputFile());
         randomFile.setFilename(sampler.getRandomPath());
         configChoice.setText(sampler.getConfigChoice());

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/UrlConfigGui.java
Patch:
@@ -280,7 +280,8 @@ public void configure(TestElement el) {
         boolean useRaw = el.getPropertyAsBoolean(HTTPSamplerBase.POST_BODY_RAW, HTTPSamplerBase.POST_BODY_RAW_DEFAULT);
         if(useRaw) {
             String postBody = computePostBody(arguments, true); // Convert CRLF to CR, see modifyTestElement
-            postBodyContent.setInitialText(postBody);   
+            postBodyContent.setInitialText(postBody); 
+            postBodyContent.setCaretPosition(0);
             postContentTabbedPane.setSelectedIndex(TAB_RAW_BODY, false);
         } else {
             argsPanel.configure(arguments);
@@ -727,6 +728,7 @@ public void stateChanged(ChangeEvent e) {
      */
     void convertParametersToRaw() {
         postBodyContent.setInitialText(computePostBody((Arguments)argsPanel.createTestElement()));
+        postBodyContent.setCaretPosition(0);
     }
 
     /**

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java
Patch:
@@ -103,7 +103,7 @@ public class JMSPublisherGui extends AbstractSamplerGui implements ChangeListene
 
     private final FilePanel randomFile = new FilePanel(JMeterUtils.getResString("jms_random_file"), ALL_FILES); //$NON-NLS-1$
 
-    private final JSyntaxTextArea textMessage = new JSyntaxTextArea(15, 50); // $NON-NLS-1$
+    private final JSyntaxTextArea textMessage = new JSyntaxTextArea(10, 50); // $NON-NLS-1$
 
     private final JLabeledRadioI18N msgChoice = new JLabeledRadioI18N("jms_message_type", MSGTYPES_ITEMS, TEXT_MSG_RSC); //$NON-NLS-1$
     

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSSamplerGui.java
Patch:
@@ -60,7 +60,7 @@ public class JMSSamplerGui extends AbstractSamplerGui {
 
     private JLabeledTextField jmsSelector = new JLabeledTextField(JMeterUtils.getResString("jms_selector")); //$NON-NLS-1$
 
-    private JSyntaxTextArea messageContent = new JSyntaxTextArea(15, 50); //$NON-NLS-1$
+    private JSyntaxTextArea messageContent = new JSyntaxTextArea(10, 50); //$NON-NLS-1$
 
     private JLabeledTextField initialContextFactory = new JLabeledTextField(
             JMeterUtils.getResString("jms_initial_context_factory")); //$NON-NLS-1$

File: src/protocol/java/org/apache/jmeter/protocol/java/control/gui/BeanShellSamplerGui.java
Patch:
@@ -53,7 +53,7 @@ public BeanShellSamplerGui() {
 
     @Override
     public void configure(TestElement element) {
-        scriptField.setText(element.getPropertyAsString(BeanShellSampler.SCRIPT));
+        scriptField.setInitialText(element.getPropertyAsString(BeanShellSampler.SCRIPT));
         scriptField.setCaretPosition(0);
         filename.setText(element.getPropertyAsString(BeanShellSampler.FILENAME));
         parameters.setText(element.getPropertyAsString(BeanShellSampler.PARAMETERS));
@@ -92,7 +92,7 @@ public void clearGui() {
 
         filename.setText(""); //$NON-NLS-1$
         parameters.setText(""); //$NON-NLS-1$
-        scriptField.setText(""); //$NON-NLS-1$
+        scriptField.setInitialText(""); //$NON-NLS-1$
         resetInterpreter.setSelected(false);
     }
 

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/config/gui/TCPConfigGui.java
Patch:
@@ -95,7 +95,7 @@ public void configure(TestElement element) {
         serverPanel.setConnectTimeout(element.getPropertyAsString(TCPSampler.TIMEOUT_CONNECT));
         setNoDelay.setTristateFromProperty(element, TCPSampler.NODELAY);
 //        setNoDelay.setSelected(element.getPropertyAsBoolean(TCPSampler.NODELAY));
-        requestData.setText(element.getPropertyAsString(TCPSampler.REQUEST));
+        requestData.setInitialText(element.getPropertyAsString(TCPSampler.REQUEST));
         requestData.setCaretPosition(0);
         closeConnection.setTristateFromProperty(element, TCPSampler.CLOSE_CONNECTION);
 //        closeConnection.setSelected(element.getPropertyAsBoolean(TCPSampler.CLOSE_CONNECTION, TCPSampler.CLOSE_CONNECTION_DEFAULT));
@@ -144,7 +144,7 @@ public void clearGui() {
 
         serverPanel.clear();
         classname.setText(""); //$NON-NLS-1$
-        requestData.setText(""); //$NON-NLS-1$
+        requestData.setInitialText(""); //$NON-NLS-1$
         reUseConnection.setSelected(true);
         setNoDelay.setSelected(false); // TODO should this be indeterminate?
         closeConnection.setSelected(TCPSampler.CLOSE_CONNECTION_DEFAULT); // TODO should this be indeterminate?

File: src/components/org/apache/jmeter/assertions/gui/XPathPanel.java
Patch:
@@ -94,7 +94,7 @@ public String getXPath() {
      * @param xpath
      */
     public void setXPath(String xpath) {
-        this.xpath.setText(xpath);
+        this.xpath.setInitialText(xpath);
     }
 
     /**

File: src/components/org/apache/jmeter/assertions/gui/BeanShellAssertionGui.java
Patch:
@@ -52,7 +52,7 @@ public BeanShellAssertionGui() {
 
     @Override
     public void configure(TestElement element) {
-        scriptField.setText(element.getPropertyAsString(BeanShellAssertion.SCRIPT));
+        scriptField.setInitialText(element.getPropertyAsString(BeanShellAssertion.SCRIPT));
         scriptField.setCaretPosition(0);
         filename.setText(element.getPropertyAsString(BeanShellAssertion.FILENAME));
         parameters.setText(element.getPropertyAsString(BeanShellAssertion.PARAMETERS));
@@ -164,7 +164,7 @@ public void clearGui() {
         super.clearGui();
         filename.setText(""); // $NON-NLS-1$
         parameters.setText(""); // $NON-NLS-1$
-        scriptField.setText(""); // $NON-NLS-1$
+        scriptField.setInitialText(""); // $NON-NLS-1$
         resetInterpreter.setSelected(false);
     }
 }

File: src/core/org/apache/jmeter/config/gui/RowDetailDialog.java
Patch:
@@ -224,7 +224,7 @@ else if(action.equals(UPDATE)) {
      */
     private void setValues(int selectedRow) {
         nameTF.setText((String)tableModel.getValueAt(selectedRow, 0));
-        valueTA.setText((String)tableModel.getValueAt(selectedRow, 1));
+        valueTA.setInitialText((String)tableModel.getValueAt(selectedRow, 1));
         valueTA.setCaretPosition(0);
         textChanged = false;
     }

File: src/core/org/apache/jmeter/testbeans/gui/TextAreaEditor.java
Patch:
@@ -101,18 +101,18 @@ public Component getCustomEditor() {
     /** {@inheritDoc} */
     @Override
     public void setAsText(String text) throws IllegalArgumentException {
-        textUI.setText(text);
+        textUI.setInitialText(text);
         textUI.setCaretPosition(0);
     }
 
     /** {@inheritDoc} */
     @Override
     public void setValue(Object value) {
         if (value != null) {
-            textUI.setText(value.toString());
+            textUI.setInitialText(value.toString());
             textUI.setCaretPosition(0);
         } else {
-            textUI.setText("");
+            textUI.setInitialText("");
         }
     }
 

File: src/components/org/apache/jmeter/config/CSVDataSet.java
Patch:
@@ -104,7 +104,7 @@ private Object readResolve(){
 
     /**
      * Override the setProperty method in order to convert
-     * the original String shareMode propertty.
+     * the original String shareMode property.
      * This used the locale-dependent display value, so caused
      * problems when the language was changed. 
      * If the "shareMode" value matches a resource value then it is converted

File: src/components/org/apache/jmeter/timers/ConstantThroughputTimer.java
Patch:
@@ -257,7 +257,7 @@ public void testStarted()
 
     /**
      * Override the setProperty method in order to convert
-     * the original String calcMode propertty.
+     * the original String calcMode property.
      * This used the locale-dependent display value, so caused
      * problems when the language was changed.
      * Note that the calcMode StringProperty is replaced with an IntegerProperty
@@ -326,4 +326,4 @@ void setMode(Mode newMode) {
         mode = newMode;
     }
 
-}
\ No newline at end of file
+}

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -621,6 +621,7 @@ public boolean isEnabled() {
         return getProperty(TestElement.ENABLED) instanceof NullProperty || getPropertyAsBoolean(TestElement.ENABLED);
     }
 
+    @Override
     public void setEnabled(boolean enabled) {
         setProperty(new BooleanProperty(TestElement.ENABLED, enabled));
     }

File: src/jorphan/org/apache/jorphan/exec/SystemCommand.java
Patch:
@@ -181,7 +181,6 @@ private int run(List<String> arguments, InputStream in, OutputStream out, Output
                     proc.destroy();
                 } catch (Exception ignored) {
                     // Ignored
-                    ignored.printStackTrace();
                 }
             }
         }

File: src/protocol/native/org/apache/jmeter/protocol/system/NativeCommand.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.jmeter.protocol.system;
 
 import java.io.File;
+import java.io.IOException;
 import java.util.Map;
 
 /**
@@ -43,8 +44,9 @@ public NativeCommand(File directory, Map<String, String> env) {
      * @param stdin File name that will contain data to be input to process
      * @param stdout File name that will contain out stream
      * @param stderr File name that will contain err stream
+     * @throws IOException if any of the files are not accessible
      */
-    public NativeCommand(File directory, Map<String, String> env, String stdin, String stdout, String stderr) {
+    public NativeCommand(File directory, Map<String, String> env, String stdin, String stdout, String stderr) throws IOException {
         super(directory, 0L, POLL_INTERVAL, env, stdin, stdout, stderr);
     }
 

File: src/jorphan/org/apache/jorphan/exec/StreamGobbler.java
Patch:
@@ -47,7 +47,7 @@ class StreamGobbler extends Thread {
     public void run() {
         BufferedReader br = null;
         try {
-            br = new BufferedReader(new InputStreamReader(is));
+            br = new BufferedReader(new InputStreamReader(is)); // default charset
             String line = null;
             while ((line = br.readLine()) != null)
             {

File: src/jorphan/org/apache/jorphan/exec/SystemCommand.java
Patch:
@@ -32,7 +32,7 @@
  * Utility class for invoking native system applications
  */
 public class SystemCommand {
-    protected static final int POLL_INTERVAL = 100;
+    public static final int POLL_INTERVAL = 100;
     private StreamGobbler outputGobbler;
     private final File directory;
     private final Map<String, String> env;

File: src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java
Patch:
@@ -48,7 +48,7 @@
  */
 public class SystemSampler extends AbstractSampler {
 
-    private static final int POLL_INTERVAL = JMeterUtils.getPropDefault("os_sampler.poll_for_timeout", 100);
+    private static final int POLL_INTERVAL = JMeterUtils.getPropDefault("os_sampler.poll_for_timeout", SystemCommand.POLL_INTERVAL);
 
     private static final long serialVersionUID = 1;
     

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -786,6 +786,8 @@ private void runNonGui(String testFile, String logFile, boolean remoteStart, Str
                 }
             }
             // Used for remote notification of threads start/stop,see BUG 54152
+            // Summariser uses this feature to compute correctly number of threads 
+            // when NON GUI mode is used
             tree.add(tree.getArray()[0], new RemoteThreadsListenerTestElement());
 
             List<JMeterEngine> engines = new LinkedList<JMeterEngine>();

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -180,7 +180,7 @@ private static boolean validateFormat(String format){
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String FILEVERSION = "1452025"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1519088"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -77,6 +77,7 @@
 import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestStateListener;
+import org.apache.jmeter.threads.RemoteThreadsListenerTestElement;
 import org.apache.jmeter.util.BeanShellInterpreter;
 import org.apache.jmeter.util.BeanShellServer;
 import org.apache.jmeter.util.JMeterUtils;
@@ -784,6 +785,8 @@ private void runNonGui(String testFile, String logFile, boolean remoteStart, Str
                     tree.add(tree.getArray()[0], summer);
                 }
             }
+            // Used for remote notification of threads start/stop,see BUG 54152
+            tree.add(tree.getArray()[0], new RemoteThreadsListenerTestElement());
 
             List<JMeterEngine> engines = new LinkedList<JMeterEngine>();
             tree.add(tree.getArray()[0], new ListenToTest(parent, (remoteStart && remoteStop) ? engines : null));

File: src/core/org/apache/jmeter/gui/action/RemoteStart.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.jmeter.engine.JMeterEngine;
 import org.apache.jmeter.engine.JMeterEngineException;
 import org.apache.jmeter.gui.GuiPackage;
+import org.apache.jmeter.threads.RemoteThreadsListenerTestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.logging.LoggingManager;
@@ -203,6 +204,8 @@ private void initEngine(JMeterEngine engine) {
         HashTree testTree = gui.getTreeModel().getTestPlan();
         JMeter.convertSubTree(testTree);
         testTree.add(testTree.getArray()[0], gui.getMainFrame());
+        // Used for remote notification of threads start/stop,see BUG 54152
+        testTree.add(testTree.getArray()[0], new RemoteThreadsListenerTestElement());
         engine.configure(testTree);
     }
 }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -178,10 +178,10 @@ public void run() {
         String[] param = new String[0];
         log.debug(port + "====================================================================");
         try {
-            // Now, parse only first line
+            // Now, parse initial request (in case it is a CONNECT request)
             byte[] ba = request.parse(new BufferedInputStream(clientSocket.getInputStream()));
             if (log.isDebugEnabled()) {
-                log.debug(port + "First line: " + new String(ba));
+                log.debug(port + "Initial request: " + new String(ba));
             }
             outStreamClient = clientSocket.getOutputStream();
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpReplyHdr.java
Patch:
@@ -191,11 +191,11 @@ public static String formNotModified() {
     }
 
     /**
-     * Client not otherized for the request.
+     * Client not authorized for the request.
      *
      * @return The header in a string;
      */
-    public static String formUnautorized() {
+    public static String formUnauthorized() {
         return formError("401 Unathorized", "Unathorized use of this service");
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -85,7 +85,7 @@ public class ProxyControlGui extends LogicControllerGui implements JMeterGUIComp
     private static final String USE_DEFAULT_HTTP_IMPL = ""; // $NON-NLS-1$
 
     private static final String SUGGESTED_EXCLUSIONS =
-            JMeterUtils.getPropDefault("proxy.excludes.suggested", ".*\\.js;.*\\.css;.*\\.swf;.*\\.gif;.*\\.png;.*\\.jpg;.*\\.bmp"); // $NON-NLS-1$
+            JMeterUtils.getPropDefault("proxy.excludes.suggested", ".*\\.js;.*\\.css;.*\\.swf;.*\\.gif;.*\\.png;.*\\.jpg;.*\\.jpeg;.*\\.bmp;.*\\.ico;.*\\.woff"); // $NON-NLS-1$
     
     private JTextField portField;
 

File: src/jorphan/org/apache/jorphan/exec/SystemCommand.java
Patch:
@@ -32,7 +32,7 @@
  * Utility class for invoking native system applications
  */
 public class SystemCommand {
-
+    protected static final int POLL_INTERVAL = 100;
     private StreamGobbler outputGobbler;
     private final File directory;
     private final Map<String, String> env;
@@ -48,7 +48,7 @@ public class SystemCommand {
      * @param directory File working directory (may be null)
      */
     public SystemCommand(File directory, Map<String, String> env) {
-        this(directory, 0L, 100, env, null, null, null);
+        this(directory, 0L, POLL_INTERVAL, env, null, null, null);
     }
 
     /**
@@ -199,4 +199,4 @@ public String getOutResult() {
     public Map<String, String> getExecutionEnvironment() {
         return executionEnvironment;
     }
-}
\ No newline at end of file
+}

File: src/protocol/native/org/apache/jmeter/protocol/system/NativeCommand.java
Patch:
@@ -45,7 +45,7 @@ public NativeCommand(File directory, Map<String, String> env) {
      * @param stderr File name that will contain err stream
      */
     public NativeCommand(File directory, Map<String, String> env, String stdin, String stdout, String stderr) {
-        super(directory, 0L, 100, env, stdin, stdout, stderr);
+        super(directory, 0L, POLL_INTERVAL, env, stdin, stdout, stderr);
     }
 
 }

File: src/protocol/native/org/apache/jmeter/protocol/system/NativeCommand.java
Patch:
@@ -45,7 +45,7 @@ public NativeCommand(File directory, Map<String, String> env) {
      * @param stderr File name that will contain err stream
      */
     public NativeCommand(File directory, Map<String, String> env, String stdin, String stdout, String stderr) {
-        super(directory, 0L, env, stdin, stdout, stderr);
+        super(directory, 0L, 100, env, stdin, stdout, stderr);
     }
 
 }
\ No newline at end of file

File: src/protocol/native/org/apache/jmeter/protocol/system/NativeCommand.java
Patch:
@@ -45,7 +45,7 @@ public NativeCommand(File directory, Map<String, String> env) {
      * @param stderr File name that will contain err stream
      */
     public NativeCommand(File directory, Map<String, String> env, String stdin, String stdout, String stderr) {
-        super(directory, env, stdin, stdout, stderr);
+        super(directory, 0L, env, stdin, stdout, stderr);
     }
 
 }
\ No newline at end of file

File: src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.jmeter.control.ModuleController;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.action.ActionNames;
+import org.apache.jmeter.gui.action.ActionRouter;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 import org.apache.jmeter.gui.util.MenuFactory;
 import org.apache.jmeter.testelement.TestElement;
@@ -248,6 +249,8 @@ private void buildNodesModel(JMeterTreeNode node, String parent_name, int level)
     @Override
     public void actionPerformed(ActionEvent e) {
         if(e.getSource()==expandButton) {
+            // reset previous result
+            ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.SEARCH_RESET));
             JMeterTreeNode currentSelectedNode = null;
             TreeNodeWrapper tnw = (TreeNodeWrapper) nodesModel.getSelectedItem();
             if (tnw != null && tnw.getTreeNode() != null) {

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -597,7 +597,7 @@ public void displayPopUp(Component invoker, MouseEvent e, JPopupMenu popup) {
             popup.pack();
             popup.show(invoker, e.getX(), e.getY());
             popup.setVisible(true);
-            popup.requestFocus();
+            popup.requestFocusInWindow();
         }
     }
 

File: src/core/org/apache/jmeter/gui/util/FocusRequester.java
Patch:
@@ -33,7 +33,7 @@ public static void requestFocus(final Component comp) {
         SwingUtilities.invokeLater(new Runnable(){
             @Override
             public void run() {
-                comp.requestFocus();
+                comp.requestFocusInWindow();
             }            
         });
     }

File: src/core/org/apache/jmeter/gui/util/JDateField.java
Patch:
@@ -196,7 +196,7 @@ public void focusLost(FocusEvent e) {
             try {
                 dateFormat.parse(getText());
             } catch (ParseException e1) {
-                requestFocus();
+                requestFocusInWindow();
             }
         }
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/gui/ParamModifierGui.java
Patch:
@@ -236,7 +236,7 @@ private long checkTextField(FocusEvent evt, String defaultValue) {
             JOptionPane.showMessageDialog(this, "This field must have a long value!", "Value Required",
                     JOptionPane.ERROR_MESSAGE);
             temp.setText(defaultValue);
-            temp.requestFocus();
+            temp.requestFocusInWindow();
         }
         return longVal;
     }

File: src/reports/org/apache/jmeter/gui/ReportGuiPackage.java
Patch:
@@ -555,7 +555,7 @@ public void displayPopUp(Component invoker, MouseEvent e, JPopupMenu popup) {
             popup.pack();
             popup.show(invoker, e.getX(), e.getY());
             popup.setVisible(true);
-            popup.requestFocus();
+            popup.requestFocusInWindow();
         }
     }
 

File: src/reports/org/apache/jmeter/report/gui/tree/ReportTreeListener.java
Patch:
@@ -321,7 +321,7 @@ private void displayPopUp(MouseEvent e, JPopupMenu popup) {
             popup.pack();
             popup.show(tree, e.getX(), e.getY());
             popup.setVisible(true);
-            popup.requestFocus();
+            popup.requestFocusInWindow();
         }
     }
 }

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HC4TrustAllSSLSocketFactory.java
Patch:
@@ -52,7 +52,7 @@ public boolean isTrusted(X509Certificate[] chain, String authType) {
      * @throws GeneralSecurityException if there's a problem setting up the security
      */
     public HC4TrustAllSSLSocketFactory() throws GeneralSecurityException {
-        this(new HttpSSLProtocolSocketFactory((JsseSSLManager)JsseSSLManager.getInstance()));
+        this(new HttpSSLProtocolSocketFactory((JsseSSLManager)JsseSSLManager.getInstance(), JsseSSLManager.CPS));
     }
     
     /**
@@ -63,7 +63,7 @@ public HC4TrustAllSSLSocketFactory() throws GeneralSecurityException {
      */
     protected HC4TrustAllSSLSocketFactory(javax.net.ssl.SSLSocketFactory factory) throws GeneralSecurityException {
         super(TRUSTALL, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
-        this.factory = new HttpSSLProtocolSocketFactory((JsseSSLManager)JsseSSLManager.getInstance());
+        this.factory = new HttpSSLProtocolSocketFactory((JsseSSLManager)JsseSSLManager.getInstance(), JsseSSLManager.CPS);
     }
 
     /* (non-Javadoc)

File: src/components/org/apache/jmeter/assertions/gui/BeanShellAssertionGui.java
Patch:
@@ -44,7 +44,7 @@ public class BeanShellAssertionGui extends AbstractAssertionGui {
 
     private JTextField parameters;// parameters to pass to script file (or script)
 
-    private org.apache.jmeter.gui.util.JSyntaxTextArea scriptField; // script area
+    private JSyntaxTextArea scriptField; // script area
 
     public BeanShellAssertionGui() {
         init();
@@ -53,6 +53,7 @@ public BeanShellAssertionGui() {
     @Override
     public void configure(TestElement element) {
         scriptField.setText(element.getPropertyAsString(BeanShellAssertion.SCRIPT));
+        scriptField.setCaretPosition(0);
         filename.setText(element.getPropertyAsString(BeanShellAssertion.FILENAME));
         parameters.setText(element.getPropertyAsString(BeanShellAssertion.PARAMETERS));
         resetInterpreter.setSelected(element.getPropertyAsBoolean(BeanShellAssertion.RESET_INTERPRETER));

File: src/core/org/apache/jmeter/testbeans/gui/TextAreaEditor.java
Patch:
@@ -102,13 +102,15 @@ public Component getCustomEditor() {
     @Override
     public void setAsText(String text) throws IllegalArgumentException {
         textUI.setText(text);
+        textUI.setCaretPosition(0);
     }
 
     /** {@inheritDoc} */
     @Override
     public void setValue(Object value) {
         if (value != null) {
             textUI.setText(value.toString());
+            textUI.setCaretPosition(0);
         } else {
             textUI.setText("");
         }

File: src/protocol/java/org/apache/jmeter/protocol/java/control/gui/BeanShellSamplerGui.java
Patch:
@@ -54,6 +54,7 @@ public BeanShellSamplerGui() {
     @Override
     public void configure(TestElement element) {
         scriptField.setText(element.getPropertyAsString(BeanShellSampler.SCRIPT));
+        scriptField.setCaretPosition(0);
         filename.setText(element.getPropertyAsString(BeanShellSampler.FILENAME));
         parameters.setText(element.getPropertyAsString(BeanShellSampler.PARAMETERS));
         resetInterpreter.setSelected(element.getPropertyAsBoolean(BeanShellSampler.RESET_INTERPRETER));

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/config/gui/TCPConfigGui.java
Patch:
@@ -96,6 +96,7 @@ public void configure(TestElement element) {
         setNoDelay.setTristateFromProperty(element, TCPSampler.NODELAY);
 //        setNoDelay.setSelected(element.getPropertyAsBoolean(TCPSampler.NODELAY));
         requestData.setText(element.getPropertyAsString(TCPSampler.REQUEST));
+        requestData.setCaretPosition(0);
         closeConnection.setTristateFromProperty(element, TCPSampler.CLOSE_CONNECTION);
 //        closeConnection.setSelected(element.getPropertyAsBoolean(TCPSampler.CLOSE_CONNECTION, TCPSampler.CLOSE_CONNECTION_DEFAULT));
         soLinger.setText(element.getPropertyAsString(TCPSampler.SO_LINGER));

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java
Patch:
@@ -55,6 +55,7 @@ public interface HTTPConstantsInterface {
     String HEADER_CONTENT_TYPE = "Content-Type"; // $NON-NLS-1$
     String HEADER_CONTENT_LENGTH = "Content-Length"; // $NON-NLS-1$
     String HEADER_HOST = "Host"; // $NON-NLS-1$
+    String HEADER_LOCAL_ADDRESS = "X-LocalAddress"; // $NON-NLS-1$ pseudo-header for reporting Local Address
     String HEADER_LOCATION = "Location"; // $NON-NLS-1$
     String APPLICATION_X_WWW_FORM_URLENCODED = "application/x-www-form-urlencoded"; // $NON-NLS-1$
     String MULTIPART_FORM_DATA = "multipart/form-data"; // $NON-NLS-1$

File: src/components/org/apache/jmeter/timers/ConstantThroughputTimerBeanInfo.java
Patch:
@@ -39,7 +39,7 @@ public ConstantThroughputTimerBeanInfo() {
         p.setValue(DEFAULT, Double.valueOf(0.0));
 
         p = property("calcMode", ConstantThroughputTimer.Mode.class); //$NON-NLS-1$
-        p.setValue(DEFAULT, ConstantThroughputTimer.Mode.ThisThreadOnly);
+        p.setValue(DEFAULT, Integer.valueOf(ConstantThroughputTimer.Mode.ThisThreadOnly.ordinal()));
         p.setValue(NOT_UNDEFINED, Boolean.TRUE); // must be defined
     }
 

File: src/core/org/apache/jmeter/testbeans/gui/EnumEditor.java
Patch:
@@ -49,9 +49,9 @@ public EnumEditor(final PropertyDescriptor descriptor, final Class<? extends Enu
         for(Enum<?> e : enumClazz.getEnumConstants()) {
             model.addElement(rb.getObject(e.toString()));
         }
-        Enum<?> def = (Enum<?>) descriptor.getValue(GenericTestBeanCustomizer.DEFAULT);
-        if (def != null) {
-            defaultIndex = def.ordinal();
+        Object def = descriptor.getValue(GenericTestBeanCustomizer.DEFAULT);
+        if (def instanceof Integer) {
+            defaultIndex = ((Integer) def).intValue();
         } else {
             defaultIndex = 0;
         }

File: src/core/org/apache/jmeter/testbeans/gui/TypeEditor.java
Patch:
@@ -29,6 +29,7 @@ public enum TypeEditor {
     PasswordEditor {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new PasswordEditor(); }},
     TableEditor    {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new TableEditor(); }},
     TextAreaEditor {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new TextAreaEditor(descriptor); }},
+    ComboStringEditor {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new ComboStringEditor(descriptor); }},
     ;
     // Some editors may need the descriptor
     abstract PropertyEditor getInstance(PropertyDescriptor descriptor);

File: test/src/org/apache/jmeter/testbeans/gui/TestComboStringEditor.java
Patch:
@@ -49,7 +49,7 @@ public void testSetGetAsText() throws Exception {
             testSetGetAsText(e, "${var}");
 
             // Check "Undefined" does not become a "reserved word":
-            e.setAsText(ComboStringEditor.UNDEFINED.toString());
+            e.setAsText(e.UNDEFINED.toString());
             assertNotNull(e.getAsText());
         }
 }
\ No newline at end of file

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -756,9 +756,6 @@ void clearGuiFields() {
                     } else {
                         we.resetValue();
                     }
-                } else if (propertyEditor instanceof ComboStringEditor) {
-                    ComboStringEditor cse = (ComboStringEditor) propertyEditor;
-                    cse.setAsText(cse.getInitialEditValue());
                 } else {
                     propertyEditor.setAsText("");
                 }

File: src/core/org/apache/jmeter/testbeans/gui/FileEditor.java
Patch:
@@ -79,9 +79,7 @@ public FileEditor(PropertyDescriptor descriptor) {
         boolean notExpression = GenericTestBeanCustomizer.notExpression(descriptor);
         boolean notOther = GenericTestBeanCustomizer.notOther(descriptor);
         Object defaultValue = descriptor.getValue(GenericTestBeanCustomizer.DEFAULT);
-        ComboStringEditor cse = new ComboStringEditor();
-        cse.setNoUndefined(notNull);
-        cse.setNoEdit(notExpression && notOther);
+        ComboStringEditor cse = new ComboStringEditor(null, notExpression && notOther, notNull);
         editor = new WrapperEditor(this, new SimpleFileEditor(), cse,
                 !notNull, // acceptsNull
                 !notExpression, // acceptsExpressions

File: test/src/org/apache/jmeter/save/TestSaveService.java
Patch:
@@ -60,6 +60,7 @@ public class TestSaveService extends JMeterTestCase {
         "GenTest25.jmx", // GraphAccumVisualizer obsolete, BSFSamplerGui now a TestBean
         "GenTest251.jmx", // GraphAccumVisualizer obsolete, BSFSamplerGui now a TestBean
         "GenTest26.jmx", // GraphAccumVisualizer now obsolete
+        "GenTest27_original.jmx", // CTT changed to use intProp for mode
     };
 
     // Test files for testLoad; output will generally be different in size and line count

File: src/core/org/apache/jmeter/testbeans/BeanInfoSupport.java
Patch:
@@ -187,15 +187,15 @@ protected PropertyDescriptor property(String name, TypeEditor editor) {
      * @param name
      *            property name
      * @param enumClass the enum class that is to be used by the editor
-     * @param rb the resource bundle to use for creating the display names
      * @return descriptor for a property of that name, or null if there's none
      */
     protected PropertyDescriptor property(final String name, 
-            final Class<? extends Enum<?>> enumClass, final ResourceBundle rb) {
+            final Class<? extends Enum<?>> enumClass) {
         PropertyDescriptor property = property(name);
         if (property != null) {
             property.setValue(GenericTestBeanCustomizer.GUITYPE, enumClass);
-            property.setValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE, rb);
+            // we also provide the resource bundle
+            property.setValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE, getBeanDescriptor().getValue(RESOURCE_BUNDLE));
         }
         return property;
     }

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -39,6 +39,7 @@
 import javax.swing.SwingConstants;
 
 import org.apache.jmeter.gui.ClearGui;
+import org.apache.jmeter.testbeans.TestBeanHelper;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
@@ -214,8 +215,7 @@ public GenericTestBeanCustomizer(){
             String name = descriptor.getName();
 
             // Don't get editors for hidden or non-read-write properties:
-            if (descriptor.isHidden() || (descriptor.isExpert() && !JMeterUtils.isExpertMode())
-                    || descriptor.getReadMethod() == null || descriptor.getWriteMethod() == null) {
+            if (TestBeanHelper.isDescriptorIgnored(descriptor)) {
                 log.debug("Skipping editor for property " + name);
                 editors[i] = null;
                 continue;

File: src/core/org/apache/jmeter/testbeans/gui/TypeEditor.java
Patch:
@@ -29,7 +29,6 @@ public enum TypeEditor {
     PasswordEditor {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new PasswordEditor(); }},
     TableEditor    {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new TableEditor(); }},
     TextAreaEditor {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new TextAreaEditor(descriptor); }},
-    EnumEditor     {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new EnumEditor(descriptor); }},
     ;
     // Some editors may need the descriptor
     abstract PropertyEditor getInstance(PropertyDescriptor descriptor);

File: src/core/org/apache/jmeter/testbeans/gui/TypeEditor.java
Patch:
@@ -29,6 +29,7 @@ public enum TypeEditor {
     PasswordEditor {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new PasswordEditor(); }},
     TableEditor    {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new TableEditor(); }},
     TextAreaEditor {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new TextAreaEditor(descriptor); }},
+    EnumEditor     {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new EnumEditor(descriptor); }},
     ;
     // Some editors may need the descriptor
     abstract PropertyEditor getInstance(PropertyDescriptor descriptor);

File: src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.TestElementProperty;
+import org.apache.jorphan.exec.SystemCommand;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
@@ -138,7 +139,7 @@ public SampleResult sample(Entry entry) {
                     ", Environment:"+env+
                     ", Executing:" + cmdLine.toString());
             
-            NativeCommand nativeCommand = new NativeCommand(directory, env, getStdin(), getStdout(), getStderr());
+            SystemCommand nativeCommand = new SystemCommand(directory, env, getStdin(), getStdout(), getStderr());
             
             String responseData = null;
             try {

File: src/jorphan/org/apache/jorphan/exec/StreamCopier.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.jmeter.protocol.system;
+package org.apache.jorphan.exec;
 
 import java.io.IOException;
 import java.io.InputStream;

File: src/jorphan/org/apache/jorphan/exec/StreamGobbler.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.apache.jmeter.protocol.system;
+package org.apache.jorphan.exec;
 
 import java.io.BufferedReader;
 import java.io.IOException;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -180,7 +180,7 @@ private void parseFirstLine(String firstLine) {
             // See Bug 54482
             URI testCleanUri = new URI(url);
             if(log.isDebugEnabled()) {
-                log.debug("Successfully built URI from url:"+url);
+                log.debug("Successfully built URI from url:"+url+" => " + testCleanUri.toString());
             }
         } catch (URISyntaxException e) {
             log.warn("Url '" + url + "' contains unsafe characters, will escape it, message:"+e.getMessage());

File: src/protocol/http/org/apache/jmeter/protocol/http/util/ConversionUtils.java
Patch:
@@ -145,7 +145,7 @@ public static final URI sanitizeUrl(URL url) throws URISyntaxException, Unsuppor
             .setHost(url.getHost())
             .setPort(url.getPort())
             .setUserInfo(url.getUserInfo())
-            .setPath(URLDecoder.decode(url.getPath(), "UTF-8")) // $NON-NLS-1$
+            .setPath(url.getPath() != null ? URLDecoder.decode(url.getPath(), "UTF-8") : null) // $NON-NLS-1$
             .setQuery(url.getQuery());
         URI uri = builder.build();
         return uri;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -318,8 +318,8 @@ public String getName() { // HC3.1 does not have the method
                 }
                 try {
                     res.setRedirectLocation(ConversionUtils.sanitizeUrl(new URL(headerLocation.getValue())).toString());
-                } catch (URISyntaxException e) {
-                    log.error("Error sanitizing URL:"+headerLocation.getValue());
+                } catch (Exception e) {
+                    log.error("Error sanitizing URL:"+headerLocation.getValue()+", message:"+e.getMessage());
                 }
             }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -26,7 +26,6 @@
 import java.io.UnsupportedEncodingException;
 import java.net.InetAddress;
 import java.net.URI;
-import java.net.URISyntaxException;
 import java.net.URL;
 import java.net.URLDecoder;
 import java.nio.charset.Charset;
@@ -329,8 +328,8 @@ protected HTTPSampleResult sample(URL url, String method,
                 }
                 try {
                     res.setRedirectLocation(ConversionUtils.sanitizeUrl(new URL(headerLocation.getValue())).toString());
-                } catch (URISyntaxException e) {
-                    log.error("Error sanitizing URL:"+headerLocation.getValue());
+                } catch (Exception e) {
+                    log.error("Error sanitizing URL:"+headerLocation.getValue()+", message:"+e.getMessage());
                 }
             }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/KerberosManager.java
Patch:
@@ -42,9 +42,9 @@
 
 /**
  * Takes in charge Kerberos auth mechanism
- * 
+ * @since 2.10
  */
-class KerberosManager implements Serializable {
+public class KerberosManager implements Serializable {
 
     private static final long serialVersionUID = 2L;
 

File: src/protocol/native/org/apache/jmeter/protocol/system/NativeCommand.java
Patch:
@@ -103,6 +103,8 @@ public int run(List<String> arguments) throws InterruptedException, IOException
             if (stdin != null) {
                 swin = new StreamCopier(new FileInputStream(stdin), proc.getOutputStream());
                 swin.start();
+            } else {
+                proc.getOutputStream().close(); // ensure the application does not hang if it requests input
             }
             int exitVal = proc.waitFor();
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/Authorization.java
Patch:
@@ -115,7 +115,7 @@ public Mechanism getMechanism() {
     }
 
     public void setMechanism(Mechanism mechanism) {
-        setProperty(MECHANISM, mechanism.toString());
+        setProperty(MECHANISM, mechanism.name(), Mechanism.BASIC_DIGEST.name());
     }
 
     // Used for saving entries to a file

File: src/functions/org/apache/jmeter/functions/EscapeOroRegexpChars.java
Patch:
@@ -67,7 +67,7 @@ public EscapeOroRegexpChars() {
     public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
 
-        String valueToEscape = values[0].execute().trim();       
+        String valueToEscape = values[0].execute();       
         
         String varName = "";//$NON-NLS-1$
         if (values.length >= PARAM_NAME) {

File: src/core/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -101,9 +101,9 @@ public final class CSVSaveService {
 
     // Date formats to try if the time format does not parse as milliseconds
     private static final String DATE_FORMAT_STRINGS[] = {
-        "yyyy/MM/dd HH:mm:ss.SSSS",  // $NON-NLS-1$
+        "yyyy/MM/dd HH:mm:ss.SSS",  // $NON-NLS-1$
         "yyyy/MM/dd HH:mm:ss",  // $NON-NLS-1$
-        "yyyy-MM-dd HH:mm:ss.SSSS",  // $NON-NLS-1$
+        "yyyy-MM-dd HH:mm:ss.SSS",  // $NON-NLS-1$
         "yyyy-MM-dd HH:mm:ss",  // $NON-NLS-1$
 
         "MM/dd/yy HH:mm:ss"  // $NON-NLS-1$ (for compatibility, this is the original default)

File: src/components/org/apache/jmeter/extractor/XPathExtractor.java
Patch:
@@ -277,7 +277,7 @@ public void setFragment(boolean selected) {
      * Converts (X)HTML response to DOM object Tree.
      * This version cares of charset of response.
      * @param unicodeData
-     * @return
+     * @return the parsed document
      *
      */
     private Document parseResponse(String unicodeData)

File: src/components/org/apache/jmeter/visualizers/DistributionGraphVisualizer.java
Patch:
@@ -221,7 +221,7 @@ private JLabel createInfoLabel(String labelResourceName, JTextField field) {
     /**
      * Creates the information Panel at the bottom
      *
-     * @return
+     * @return the box containing the panel
      */
     private Box createGraphInfoPanel() {
         Box graphInfoPanel = Box.createHorizontalBox();

File: src/core/org/apache/jmeter/reporters/Summariser.java
Patch:
@@ -237,7 +237,7 @@ private static StringBuilder doubleToSb(DecimalFormat dfDouble, StringBuilder sb
     /**
      * @param myTotal
      * @param string
-     * @return
+     * @return the sunnary information
      */
     private static String format(String name, RunningSample s, String type) {
         DecimalFormat dfDouble = new DecimalFormat("#0.0"); // $NON-NLS-1$

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -334,7 +334,7 @@ private static void validateAttributes(PropertyDescriptor pd, PropertyEditor pe)
      * Identify the property from the descriptor.
      * 
      * @param pd
-     * @return
+     * @return the property details
      */
     private static String getDetails(PropertyDescriptor pd) {
         StringBuilder sb = new StringBuilder();
@@ -350,7 +350,7 @@ private static String getDetails(PropertyDescriptor pd) {
      *
      * @param typeEditor
      * @param descriptor
-     * @return
+     * @return the wrapper editor
      */
     private WrapperEditor createWrapperEditor(PropertyEditor typeEditor, PropertyDescriptor descriptor) {
         String[] editorTags = typeEditor.getTags();

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -520,8 +520,7 @@ private List<SampleListener> getSampleListeners(SamplePackage samplePack, Sample
 
     /**
      * @param threadContext
-     * @return 
-     *
+     * @return the iteration listener 
      */
     private IterationListener initRun(JMeterContext threadContext) {
         threadContext.setVariables(threadVars);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java
Patch:
@@ -94,7 +94,7 @@ public static Context lookupContext(String initialContextFactory,
      * @param providerUrl
      * @param securityPrincipal
      * @param securityCredentials
-     * @return
+     * @return the cache key
      */
     private static String createKey(
             long threadId,

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
Patch:
@@ -194,7 +194,7 @@ private ReceiveSubscriber(int queueSize, boolean useProps,
      *                 If neither empty nor null, this means that a durable 
      *                 subscription will be used
      * @param jmsSelector JMS Selector
-     * @return
+     * @return the message consumer
      * @throws JMSException
      */
     private MessageConsumer createSubscriber(Session session, 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -509,7 +509,7 @@ public void setContextProvider(String string) {
      * get the principal from the context property java.naming.security.principal
      *
      * @param context
-     * @return
+     * @return the principal
      * @throws NamingException
      */
     private String getPrincipal(Context context) throws NamingException{
@@ -521,7 +521,7 @@ private String getPrincipal(Context context) throws NamingException{
      * get the credentials from the context property java.naming.security.credentials
      *
      * @param context
-     * @return
+     * @return the credentials
      * @throws NamingException
      */
     private String getCredentials(Context context) throws NamingException{

File: test/src/org/apache/jmeter/protocol/http/sampler/HTTPSampler3.java
Patch:
@@ -50,6 +50,6 @@ protected HTTPSampleResult sample(java.net.URL u, String method,
      */
     @Override
     public void testIterationStart(LoopIterationEvent event) {
-        hc.testIterationStart(event);
+        hc.notifyFirstSampleAfterLoopRestart();
     }
 }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -92,7 +92,7 @@ public class HTTPHC3Impl extends HTTPHCAbstractImpl {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     /** retry count to be used (default 1); 0 = disable retries */
-    private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient3.retrycount", 1);
+    private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient3.retrycount", 0);
 
     private static final String HTTP_AUTHENTICATION_PREEMPTIVE = "http.authentication.preemptive"; // $NON-NLS-1$
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -124,7 +124,7 @@ public class HTTPHC4Impl extends HTTPHCAbstractImpl {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     /** retry count to be used (default 1); 0 = disable retries */
-    private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient4.retrycount", 1);
+    private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient4.retrycount", 0);
 
     private static final String CONTEXT_METRICS = "jmeter_metrics"; // TODO hack, to be removed later
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPAbstractImpl.java
Patch:
@@ -51,8 +51,8 @@ protected HTTPAbstractImpl(HTTPSamplerBase testElement){
     protected void threadFinished() {
     }
 
-    // Allows HTTPSamplerProxy to call testIterationStart; subclasses can override if necessary
-    protected void testIterationStart(LoopIterationEvent event) {
+    // Allows HTTPSamplerProxy to call notifyFirstSampleAfterLoopRestart; subclasses can override if necessary
+    protected void notifyFirstSampleAfterLoopRestart() {
     }
 
     // Provide access to HTTPSamplerBase methods

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -1183,8 +1183,8 @@ private void saveConnectionCookies(HttpResponse method, URL u, CookieManager coo
     }
 
     @Override
-    protected void testIterationStart(LoopIterationEvent event) {
-        log.debug("TtestIterationStart");
+    protected void notifyFirstSampleAfterLoopRestart() {
+        log.debug("notifyFirstSampleAfterLoopRestart");
         resetSSLContext = !USE_CACHED_SSL_CONTEXT;
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java
Patch:
@@ -82,6 +82,6 @@ protected void setSavedClient(HttpClient savedClient) {
      */
     @Override
     public void testIterationStart(LoopIterationEvent event) {
-        hc.testIterationStart(event);
+        hc.notifyFirstSampleAfterLoopRestart();
     }
 }

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -62,7 +62,7 @@ public final class ActionNames {
     public static final String MERGE            = "merge"; // $NON-NLS-1$
     public static final String OPEN             = "open"; // $NON-NLS-1$
     public static final String OPEN_RECENT      = "open_recent"; // $NON-NLS-1$
-    public static final String CREATE_FROM_TEMPLATE      = "create_from_template"; // $NON-NLS-1$
+    public static final String TEMPLATES      = "templates"; // $NON-NLS-1$
     public static final String PASTE            = "Paste"; // $NON-NLS-1$
     public static final String REMOTE_EXIT      = "remote_exit"; // $NON-NLS-1$
     public static final String REMOTE_EXIT_ALL  = "remote_exit_all"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/action/SelectTemplatesDialog.java
Patch:
@@ -58,7 +58,7 @@
  * Dialog used for Templates selection
  * @since 2.10
  */
-public class SelectTemplateDialog extends JDialog implements ChangeListener, ActionListener, HyperlinkListener {
+public class SelectTemplatesDialog extends JDialog implements ChangeListener, ActionListener, HyperlinkListener {
 
     private static final long serialVersionUID = -4436834972710248247L;
     
@@ -82,7 +82,7 @@ public class SelectTemplateDialog extends JDialog implements ChangeListener, Act
     
     private final JScrollPane scroller = new JScrollPane(helpDoc);
 
-    public SelectTemplateDialog() {
+    public SelectTemplatesDialog() {
         super((JFrame) null, JMeterUtils.getResString("template_title"), true); //$NON-NLS-1$
         init();
     }

File: src/core/org/apache/jmeter/gui/action/TemplatesCommand.java
Patch:
@@ -26,18 +26,18 @@
  * Open Templates 
  * @since 2.10
  */
-public class TemplateCommand extends AbstractAction {
+public class TemplatesCommand extends AbstractAction {
 
     private static final Set<String> commands = new HashSet<String>();
 
     // Ensure the dialog is only created when it is first needed
     // In turn this avoids scanning the templates until first needed
     static class IODH {
-        private static final SelectTemplateDialog dialog = new SelectTemplateDialog();        
+        private static final SelectTemplatesDialog dialog = new SelectTemplatesDialog();        
     }
 
     static {
-        commands.add(ActionNames.CREATE_FROM_TEMPLATE);
+        commands.add(ActionNames.TEMPLATES);
     }
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -135,7 +135,9 @@ public String getSamplerData() {
             sb.append(u.toString());
             sb.append("\n");
             // Include request body if it is a post or put or patch
-            if (HTTPConstants.POST.equals(method) || HTTPConstants.PUT.equals(method) || HTTPConstants.PATCH.equals(method)) {
+            if (HTTPConstants.POST.equals(method) || HTTPConstants.PUT.equals(method) 
+                    || HTTPConstants.PATCH.equals(method)
+                    || HTTPConstants.DELETE.equals(method)) {
                 sb.append("\n"+method+" data:\n");
                 sb.append(queryString);
                 sb.append("\n");

File: src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/sampler/MongoScriptSamplerBeanInfo.java
Patch:
@@ -58,12 +58,12 @@ public MongoScriptSamplerBeanInfo() {
         p = property("source");
         p.setValue(NOT_UNDEFINED, Boolean.TRUE);
         p.setValue(DEFAULT, "");
-
-        p = property("script");
+       
+        p = property("script", TypeEditor.TextAreaEditor);
         p.setValue(NOT_UNDEFINED, Boolean.FALSE);
         p.setValue(DEFAULT, "");
         p.setValue(NOT_EXPRESSION, Boolean.TRUE);
-        p.setPropertyEditorClass(TextAreaEditor.class);
+        p.setValue(TEXT_LANGUAGE, "javascript");  // $NON-NLS-1$
 
         if(log.isDebugEnabled()) {
             for (PropertyDescriptor pd : getPropertyDescriptors()) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -1048,7 +1048,7 @@ protected String sendPostData(HttpPost post)  throws IOException {
      * header is present from a Header Manager.
      * <p>
      * If the content charset {@link #getContentEncoding()} is null or empty 
-     * we use the HC4 default provided by {@link HTTP.DEF_CONTENT_CHARSET} which is
+     * we use the HC4 default provided by {@link HTTP#DEF_CONTENT_CHARSET} which is
      * ISO-8859-1.
      * 
      * @param entity to be processed, e.g. PUT or PATCH

File: src/components/org/apache/jmeter/visualizers/RenderAsText.java
Patch:
@@ -36,6 +36,9 @@ private void showTextResponse(String response) {
         results.setText(response == null ? "" : response); // $NON-NLS-1$
         results.setCaretPosition(0);
         resultsScrollPane.setViewportView(results);
+        // Bug 55111 - Refresh JEditor pane size depending on the presence or absence of scrollbars
+        resultsScrollPane.setPreferredSize(resultsScrollPane.getMinimumSize());
+        results.revalidate();
     }
 
     /** {@inheritDoc} */

File: src/core/org/apache/jmeter/testbeans/gui/TextAreaEditor.java
Patch:
@@ -81,7 +81,7 @@ public TextAreaEditor(Object source) {
      */
     public TextAreaEditor(PropertyDescriptor descriptor) {
         textUI = new JSyntaxTextArea(20, 20);
-//        textUI.setSyntaxEditingStyle((String) descriptor.getValue(GenericTestBeanCustomizer.SYNTAX_TYPE));
+        textUI.setLanguage((String) descriptor.getValue(GenericTestBeanCustomizer.TEXT_LANGUAGE));
         scroller = new JTextScrollPane(textUI, true);
         init();
     }

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/JDBCTestElementBeanInfoSupport.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.apache.jmeter.testbeans.BeanInfoSupport;
 import org.apache.jmeter.testbeans.TestBean;
-import org.apache.jmeter.testbeans.gui.TextAreaEditor;
+import org.apache.jmeter.testbeans.gui.TypeEditor;
 
 public abstract class JDBCTestElementBeanInfoSupport extends BeanInfoSupport {
 
@@ -86,10 +86,10 @@ public JDBCTestElementBeanInfoSupport(Class<? extends TestBean> beanClass) {
                 AbstractJDBCTestElement.AUTOCOMMIT_TRUE,
                 });
 
-        p = property("query"); // $NON-NLS-1$
+        p = property("query", TypeEditor.TextAreaEditor); // $NON-NLS-1$
         p.setValue(NOT_UNDEFINED, Boolean.TRUE);
         p.setValue(DEFAULT, ""); // $NON-NLS-1$
-        p.setPropertyEditorClass(TextAreaEditor.class);
+        p.setValue(TEXT_LANGUAGE, "sql");  // $NON-NLS-1$
 
     }
 }

File: src/core/org/apache/jmeter/testbeans/TestBeanBeanInfo.java
Patch:
@@ -23,8 +23,6 @@
 import java.beans.MethodDescriptor;
 import java.beans.PropertyDescriptor;
 
-// TODO - does not appear to be used currently
-
 /**
  * This is the BeanInfo object for the TestBean class. It acts as a "stopper"
  * for the introspector: we don't want it to look at properties defined at this

File: src/core/org/apache/jmeter/testelement/AbstractTestElementBeanInfo.java
Patch:
@@ -23,10 +23,8 @@
 import java.beans.MethodDescriptor;
 import java.beans.PropertyDescriptor;
 
-// TODO this has the same code as TestBeanBeanInfo
-
 /**
- * This is the BeanInfo object for the TestBean class. It acts as a "stopper"
+ * This is the BeanInfo object for the AbstractTestElement class. It acts as a "stopper"
  * for the introspector: we don't want it to look at properties defined at this
  * or higher classes.
  * <p>

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223SamplerBeanInfo.java
Patch:
@@ -18,9 +18,9 @@
 
 package org.apache.jmeter.protocol.java.sampler;
 
-import org.apache.jmeter.util.BSFBeanInfoSupport;
+import org.apache.jmeter.util.JSR223BeanInfoSupport;
 
-public class JSR223SamplerBeanInfo extends BSFBeanInfoSupport {
+public class JSR223SamplerBeanInfo extends JSR223BeanInfoSupport {
 
     public JSR223SamplerBeanInfo() {
         super(JSR223Sampler.class);

File: src/core/org/apache/jmeter/util/JSR223TestElement.java
Patch:
@@ -141,7 +141,7 @@ protected Object processFileOrScript(ScriptEngine scriptEngine, Bindings binding
         }
         populateBindings(bindings);
         File scriptFile = new File(getFilename()); 
-        // Hack as in bsh-2.0b5.jar BshScriptEngine implements Compilable but throws new Error
+        // Hack: bsh-2.0b5.jar BshScriptEngine implements Compilable but throws "java.lang.Error: unimplemented"
         boolean supportsCompilable = scriptEngine instanceof Compilable 
                 && !(scriptEngine.getClass().getName().equals("bsh.engine.BshScriptEngine"));
         if (!StringUtils.isEmpty(getFilename())) {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -67,7 +67,7 @@ public class CacheManager extends ConfigTestElement implements TestStateListener
 
     private static final int DEFAULT_MAX_SIZE = 5000;
 
-    private static final long ONE_YEAR_MS = 365*86400*1000;
+    private static final long ONE_YEAR_MS = 365*24*60*60*1000L;
 
     public CacheManager() {
         setProperty(new BooleanProperty(CLEAR, false));

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -567,7 +567,7 @@ private void makeSearchMenu() {
      * @param menuCreators
      * @param location
      */
-    protected void addPluginsMenuItems(JMenu menu, List<MenuCreator> menuCreators, MENU_LOCATION location) {
+    private void addPluginsMenuItems(JMenu menu, List<MenuCreator> menuCreators, MENU_LOCATION location) {
         boolean addedSeparator = false;
         for (MenuCreator menuCreator : menuCreators) {
             JMenuItem[] menuItems = menuCreator.getMenuItemsAtLocation(location);

File: src/core/org/apache/jmeter/gui/plugin/MenuCreator.java
Patch:
@@ -57,4 +57,4 @@ public enum MENU_LOCATION {
      * Update Top Level menu on Locale Change
      */
     void localeChanged();
-}
\ No newline at end of file
+}

File: src/core/org/apache/jmeter/gui/action/ActionRouter.java
Patch:
@@ -261,8 +261,8 @@ private void populateCommandMap() {
                     false, // innerClasses - should we include inner classes?
                     // contains - classname should contain this string
                     // This was added in r325814 as part of changes for the reporting tool
-                    "org.apache.jmeter.gui",  // $NON-NLS-1$
-                    null, // notContains - classname should not contain this string
+                    null, // contains - classname should contain this string
+                    "org.apache.jmeter.report.gui", // $NON-NLS-1$ // notContains - classname should not contain this string
                     false); // annotations - true if classnames are annotations
             commands = new HashMap<String, Set<Command>>(listClasses.size());
             if (listClasses.isEmpty()) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
Patch:
@@ -141,6 +141,7 @@ protected int setPostHeaders(PostMethod post) {
                 Header hd = mngr.getHeader(idx);
                 if (HTTPConstants.HEADER_CONTENT_LENGTH.equalsIgnoreCase(hd.getName())) {// Use this to override file length
                     length = Integer.parseInt(hd.getValue());
+                    break;
                 }
                 // All the other headers are set up by HTTPSampler2.setupConnection()
             }

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -62,6 +62,7 @@ public final class ActionNames {
     public static final String MERGE            = "merge"; // $NON-NLS-1$
     public static final String OPEN             = "open"; // $NON-NLS-1$
     public static final String OPEN_RECENT      = "open_recent"; // $NON-NLS-1$
+    public static final String CREATE_FROM_TEMPLATE      = "create_from_template"; // $NON-NLS-1$
     public static final String PASTE            = "Paste"; // $NON-NLS-1$
     public static final String REMOTE_EXIT      = "remote_exit"; // $NON-NLS-1$
     public static final String REMOTE_EXIT_ALL  = "remote_exit_all"; // $NON-NLS-1$

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java
Patch:
@@ -492,7 +492,7 @@ public String getQueryTimeout() {
     }
 
     /**
-     * @param resultVariable the variable name in which results will be stored
+     * @param queryTimeout query timeout in seconds
      */
     public void setQueryTimeout(String queryTimeout) {
         this.queryTimeout = queryTimeout;

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/AbstractJDBCTestElement.java
Patch:
@@ -475,7 +475,7 @@ public static void close(ResultSet rs) {
     public int getIntegerQueryTimeout() {
         int timeout = 0;
         try {
-            if(StringUtils.isNumeric(query)) {
+            if(StringUtils.isNumeric(queryTimeout)) {
                 timeout = Integer.parseInt(queryTimeout);
             }
         } catch (NumberFormatException nfe) {

File: src/reports/org/apache/jmeter/report/gui/tree/ReportTreeListener.java
Patch:
@@ -208,6 +208,7 @@ private boolean isValidDragAction(ReportTreeNode[] source, ReportTreeNode dest)
         for (int i = 0; i < path.length; i++) {
             if (contains(source, path[i])) {
                 isValid = false;
+                break;
             }
         }
         return isValid;

File: src/components/org/apache/jmeter/visualizers/Spline3.java
Patch:
@@ -271,6 +271,7 @@ protected boolean converge() {
                 lineSum = lineSum - Math.abs(_A[i][i]);
                 if (lineSum > Math.abs(_A[i][i])) {
                     converge = false;
+                    break;
                 }
             }
         }

File: src/jorphan/org/apache/jorphan/collections/Data.java
Patch:
@@ -95,6 +95,7 @@ public void append(Data d) {
             for (int count = 0; count < dHeaders.length; count++) {
                 if (!header.contains(dHeaders[count])) {
                     valid = false;
+                    break;
                 }
             }
         }

File: src/core/org/apache/jmeter/reporters/ResultSaver.java
Patch:
@@ -186,7 +186,7 @@ private void saveSample(SampleResult s, int num) {
         FileOutputStream pw = null;
         try {
             pw = new FileOutputStream(out);
-            pw.write(s.getResponseData());
+            JOrphanUtils.write(s.getResponseData(), pw); // chunk the output if necessary
         } catch (FileNotFoundException e1) {
             log.error("Error creating sample file for " + s.getSampleLabel(), e1);
         } catch (IOException e1) {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java
Patch:
@@ -264,7 +264,6 @@ public void configure(TestElement el) {
         randomFile.setFilename(sampler.getRandomPath());
         configChoice.setText(sampler.getConfigChoice());
         msgChoice.setText(sampler.getMessageChoice());
-        updateConfig(sampler.getConfigChoice());
         iterations.setText(sampler.getIterations());
         useAuth.setSelected(sampler.isUseAuth());
         jmsUser.setEnabled(useAuth.isSelected());
@@ -273,6 +272,7 @@ public void configure(TestElement el) {
         useNonPersistentDelivery.setSelected(sampler.getUseNonPersistentDelivery());
         jmsPropertiesPanel.configure(sampler.getJMSProperties());
         updateChoice(msgChoice.getText());
+        updateConfig(sampler.getConfigChoice());
     }
 
     /**

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeListener.java
Patch:
@@ -144,7 +144,7 @@ public TreePath removedSelectedNode() {
     public void valueChanged(TreeSelectionEvent e) {
         log.debug("value changed, updating currentPath");
         currentPath = e.getNewLeadSelectionPath();
-        actionHandler.actionPerformed(new ActionEvent(this, 3333, "edit")); // $NON-NLS-1$
+        actionHandler.actionPerformed(new ActionEvent(this, 3333, ActionNames.EDIT)); // $NON-NLS-1$
     }
 
     @Override

File: src/components/org/apache/jmeter/assertions/gui/AssertionGui.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.gui.GuiUtils;
 
 /**
  * GUI interface for a {@link ResponseAssertion}.
@@ -136,6 +137,7 @@ public TestElement createTestElement() {
     /* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
     @Override
     public void modifyTestElement(TestElement el) {
+        GuiUtils.stopTableEditing(stringTable);
         configureTestElement(el);
         if (el instanceof ResponseAssertion) {
             ResponseAssertion ra = (ResponseAssertion) el;
@@ -188,7 +190,7 @@ public void modifyTestElement(TestElement el) {
     @Override
     public void clearGui() {
         super.clearGui();
-
+        GuiUtils.stopTableEditing(stringTable);
         tableModel.clearData();
 
         responseStringButton.setSelected(true);

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -48,7 +48,6 @@ public final class ActionNames {
     public static final String DEBUG_ON         = "debug_on"; // $NON-NLS-1$
     public static final String DEBUG_OFF        = "debug_off"; // $NON-NLS-1$
     public static final String DISABLE          = "disable"; // $NON-NLS-1$
-    public static final String DRAG_ADD         = "drag_n_drop.add";//$NON-NLS-1$
     /** Copy, then paste afterwards */
     public static final String DUPLICATE        = "duplicate"; // $NON-NLS-1$
     public static final String EDIT             = "edit"; // $NON-NLS-1$
@@ -58,8 +57,6 @@ public final class ActionNames {
     public static final String FUNCTIONS        = "functions"; // $NON-NLS-1$
     public static final String HELP             = "help"; // $NON-NLS-1$
     public static final String HEAP_DUMP        = "heap_dump"; // $NON-NLS-1$
-    public static final String INSERT_AFTER     = "drag_n_drop.insert_after";//$NON-NLS-1$
-    public static final String INSERT_BEFORE    = "drag_n_drop.insert_before";//$NON-NLS-1$
     public static final String LAF_PREFIX       = "laf:"; // Look and Feel prefix
     public static final String LOGGER_PANEL_ENABLE_DISABLE     = "logger_panel_enable_disable"; // $NON-NLS-1$
     public static final String MERGE            = "merge"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/action/Copy.java
Patch:
@@ -61,7 +61,7 @@ public Set<String> getActionNames() {
     public void doAction(ActionEvent e) {
         JMeterTreeListener treeListener = GuiPackage.getInstance().getTreeListener();
         JMeterTreeNode[] nodes = treeListener.getSelectedNodes();
-        nodes = filterNodes(nodes);
+        nodes = keepOnlyAncestors(nodes);
         nodes = cloneTreeNodes(nodes);
         setCopiedNodes(nodes);
     }
@@ -93,7 +93,7 @@ public static JMeterTreeNode cloneTreeNode(JMeterTreeNode node) {
      * @param currentNodes JMeterTreeNode[]
      * @return JMeterTreeNode[]
      */
-    public static JMeterTreeNode[] filterNodes(JMeterTreeNode[] currentNodes) {
+    static JMeterTreeNode[] keepOnlyAncestors(JMeterTreeNode[] currentNodes) {
         List<JMeterTreeNode> nodes = new ArrayList<JMeterTreeNode>();
         for (int i = 0; i < currentNodes.length; i++) {
             boolean exclude = false;

File: src/core/org/apache/jmeter/gui/action/Cut.java
Patch:
@@ -51,7 +51,7 @@ public void doAction(ActionEvent e) {
         GuiPackage guiPack = GuiPackage.getInstance();
         JMeterTreeNode[] currentNodes = guiPack.getTreeListener().getSelectedNodes();
 
-        currentNodes = Copy.filterNodes(currentNodes);
+        currentNodes = Copy.keepOnlyAncestors(currentNodes);
         Copy.setCopiedNodes(currentNodes);
         for (int i = 0; i < currentNodes.length; i++) {
             guiPack.getTreeModel().removeNodeFromParent(currentNodes[i]);

File: src/core/org/apache/jmeter/gui/action/Cut.java
Patch:
@@ -51,6 +51,7 @@ public void doAction(ActionEvent e) {
         GuiPackage guiPack = GuiPackage.getInstance();
         JMeterTreeNode[] currentNodes = guiPack.getTreeListener().getSelectedNodes();
 
+        currentNodes = Copy.filterNodes(currentNodes);
         Copy.setCopiedNodes(currentNodes);
         for (int i = 0; i < currentNodes.length; i++) {
             guiPack.getTreeModel().removeNodeFromParent(currentNodes[i]);

File: src/core/org/apache/jmeter/gui/action/KeyStrokes.java
Patch:
@@ -44,7 +44,7 @@ private KeyStrokes(){
     public static final KeyStroke CLEAR             = KeyStroke.getKeyStroke(KeyEvent.VK_E, CONTROL_MASK | InputEvent.SHIFT_DOWN_MASK);
     public static final KeyStroke ESC               = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
     public static final KeyStroke ENTER             = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
-    public static final KeyStroke FUNCTIONS         = KeyStroke.getKeyStroke(KeyEvent.VK_F1, CONTROL_MASK);
+    public static final KeyStroke FUNCTIONS         = KeyStroke.getKeyStroke(KeyEvent.VK_F1, CONTROL_MASK | InputEvent.SHIFT_DOWN_MASK);
     public static final KeyStroke SAVE_GRAPHICS     = KeyStroke.getKeyStroke(KeyEvent.VK_G, CONTROL_MASK);
     public static final KeyStroke SAVE_GRAPHICS_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_G, CONTROL_MASK | InputEvent.SHIFT_DOWN_MASK);
     public static final KeyStroke HELP              = KeyStroke.getKeyStroke(KeyEvent.VK_H, CONTROL_MASK);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -98,7 +98,6 @@
 import org.apache.jmeter.protocol.http.control.CacheManager;
 import org.apache.jmeter.protocol.http.control.CookieManager;
 import org.apache.jmeter.protocol.http.control.HeaderManager;
-import org.apache.jmeter.protocol.http.util.ConversionUtils;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HC4TrustAllSSLSocketFactory;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
@@ -232,7 +231,7 @@ protected HTTPSampleResult sample(URL url, String method,
         
         HttpRequestBase httpRequest = null;
         try {
-            URI uri = ConversionUtils.sanitizeUrl(url);
+            URI uri = url.toURI();
             if (method.equals(HTTPConstants.POST)) {
                 httpRequest = new HttpPost(uri);
             } else if (method.equals(HTTPConstants.PUT)) {

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -97,7 +97,7 @@ public class ResultCollector extends AbstractListenerElement implements SampleLi
     private static final String SUCCESS_ONLY_LOGGING = "ResultCollector.success_only_logging"; // $NON-NLS-1$
 
     /** AutoFlush on each line */
-    private static final boolean SAVING_AUTOFLUSH = JMeterUtils.getPropDefault("saving.autoflush", false); //$NON-NLS-1$
+    private static final boolean SAVING_AUTOFLUSH = JMeterUtils.getPropDefault("jmeter.save.saveservice.autoflush", false); //$NON-NLS-1$
 
     // Static variables
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSSamplerGui.java
Patch:
@@ -243,7 +243,7 @@ private void init() {
 
         JPanel soapXmlPanel = new JPanel(new BorderLayout());
         soapXmlPanel.add(soapXml);
-		Dimension pref = new Dimension(400, 150);
+        Dimension pref = new Dimension(400, 150);
         soapXml.setPreferredSize(pref);
         messagePanel.add(soapXmlPanel, BorderLayout.CENTER);
 

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -420,7 +420,7 @@ private static PrintWriter getFileWriter(String filename, SampleSaveConfiguratio
                 }
             }
             writer = new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(filename,
-                    trimmed)), SaveService.getFileEncoding("UTF-8")), true); // $NON-NLS-1$
+                    trimmed)), SaveService.getFileEncoding("UTF-8")), false); // $NON-NLS-1$
             log.debug("Opened file: "+filename);
             files.put(filename, new FileEntry(writer, saveConfig));
         } else {

File: src/components/org/apache/jmeter/assertions/SMIMEAssertion.java
Patch:
@@ -52,6 +52,7 @@
 import org.bouncycastle.cms.CMSException;
 import org.bouncycastle.cms.SignerInformation;
 import org.bouncycastle.cms.SignerInformationStore;
+import org.bouncycastle.cms.jcajce.JcaX509CertSelectorConverter;
 import org.bouncycastle.jce.PrincipalUtil;
 import org.bouncycastle.jce.X509Principal;
 import org.bouncycastle.jce.provider.BouncyCastleProvider;
@@ -152,7 +153,8 @@ private static AssertionResult verifySignature(SMIMEAssertionTestElement testEle
             if (signerIt.hasNext()) {
 
                 SignerInformation signer = (SignerInformation) signerIt.next();
-                Iterator<?> certIt = certs.getCertificates(signer.getSID()).iterator();
+                Iterator<?> certIt = certs.getCertificates(
+                        (new JcaX509CertSelectorConverter()).getCertSelector(signer.getSID())).iterator();
 
                 if (certIt.hasNext()) {
                     // the signer certificate

File: src/core/org/apache/jmeter/samplers/StatisticalSampleSender.java
Patch:
@@ -149,7 +149,7 @@ public void sampleOccurred(SampleEvent e) {
             String key = StatisticalSampleResult.getKey(e, keyOnThreadName);
             StatisticalSampleResult statResult = sampleTable.get(key);
             if (statResult == null) {
-                statResult = new StatisticalSampleResult(e.getResult(), keyOnThreadName);
+                statResult = new StatisticalSampleResult(e.getResult());
                 // store the new statistical result collector
                 sampleTable.put(key, statResult);
                 // add a new wrapper samplevent

File: src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/sampler/MongoScriptSampler.java
Patch:
@@ -79,7 +79,6 @@ public SampleResult sample(Entry e) {
             String resultAsString = handler.handle(result);
             res.setResponseData(resultAsString.getBytes());
         } catch (Exception ex) {
-            res.sampleEnd();
             res.setResponseCode("500"); // $NON-NLS-1$
             res.setSuccessful(false);
             res.setResponseMessage(ex.toString());

File: src/protocol/mongodb/org/apache/jmeter/protocol/mongodb/sampler/MongoScriptRunner.java
Patch:
@@ -37,7 +37,7 @@ public MongoScriptRunner() {
      * 
      * @param db
      * @param script
-     * @return
+     * @return Object
      * @throws Exception
      */
     public Object evaluate(DB db, String script)

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -180,7 +180,7 @@ private static boolean validateFormat(String format){
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String FILEVERSION = "1427507"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1452025"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -174,7 +174,7 @@ private static boolean validateFormat(String format){
     
     // Must match _version property value in saveservice.properties
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String PROPVERSION = "2.4";// Expected version $NON-NLS-1$
+    private static final String PROPVERSION = "2.5";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -53,6 +53,7 @@ public abstract class HTMLParser {
     protected static final String TAG_IMAGE         = "img";// $NON-NLS-1$
     protected static final String TAG_INPUT         = "input";// $NON-NLS-1$
     protected static final String TAG_LINK          = "link";// $NON-NLS-1$
+    protected static final String TAG_OBJECT        = "object";// $NON-NLS-1$
     protected static final String TAG_SCRIPT        = "script";// $NON-NLS-1$
     protected static final String STYLESHEET        = "stylesheet";// $NON-NLS-1$
 

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/RegexpHTMLParser.java
Patch:
@@ -98,7 +98,7 @@ class RegexpHTMLParser extends HTMLParser {
             + "|BASE" + SEP + "HREF" + VALUE
             + "|(?:IMG|SCRIPT|FRAME|IFRAME|BGSOUND)" + SEP + "SRC" + VALUE
             + "|APPLET" + SEP + "CODE(?:BASE)?" + VALUE
-            + "|(?:EMBED|OBJECT)" + SEP + "(?:SRC|CODEBASE)" + VALUE
+            + "|(?:EMBED|OBJECT)" + SEP + "(?:SRC|CODEBASE|DATA)" + VALUE
             + "|(?:BODY|TABLE|TR|TD)" + SEP + "BACKGROUND" + VALUE
             + "|[^<]+?STYLE\\s*=['\"].*?URL\\(\\s*['\"](.+?)['\"]\\s*\\)"
             + "|INPUT(?:" + SEP + "(?:SRC" + VALUE

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -611,13 +611,13 @@ private JPanel createTestPlanContentPanel() {
                 JMeterUtils.getResString("proxy_test_plan_content"))); // $NON-NLS-1$
 
         HorizontalPanel nodeCreationPanel = new HorizontalPanel();
+        nodeCreationPanel.add(createGroupingPanel());
         nodeCreationPanel.add(httpHeaders);
         nodeCreationPanel.add(addAssertions);
         nodeCreationPanel.add(regexMatch);
 
         HorizontalPanel targetPanel = new HorizontalPanel();
         targetPanel.add(createTargetPanel());
-        targetPanel.add(createGroupingPanel());
         mainPanel.add(targetPanel);
         mainPanel.add(nodeCreationPanel);
 
@@ -631,6 +631,7 @@ private JPanel createHTTPSamplerPanel() {
         }
         m.addElement(USE_DEFAULT_HTTP_IMPL);
         samplerTypeName = new JComboBox(m);
+        samplerTypeName.setPreferredSize(new Dimension(150, 20));
         samplerTypeName.setSelectedItem(USE_DEFAULT_HTTP_IMPL);
         samplerTypeName.addItemListener(this);
         JLabel label2 = new JLabel(JMeterUtils.getResString("proxy_sampler_type")); // $NON-NLS-1$
@@ -695,6 +696,7 @@ private JPanel createGroupingPanel() {
         m.addElement(JMeterUtils.getResString("grouping_store_first_only")); // $NON-NLS-1$
         m.addElement(JMeterUtils.getResString("grouping_in_transaction_controllers")); // $NON-NLS-1$
         groupingMode = new JComboBox(m);
+        groupingMode.setPreferredSize(new Dimension(150, 20));
         groupingMode.setSelectedIndex(0);
         groupingMode.addItemListener(this);
 

File: src/core/org/apache/jmeter/testbeans/TestBeanHelper.java
Patch:
@@ -95,6 +95,9 @@ public static void prepare(TestElement el) {
             }
         } catch (IntrospectionException e) {
             log.error("Couldn't set properties for " + el.getClass().getName(), e);
+        } catch (UnsatisfiedLinkError ule) { // Can occur running headless on Jenkins
+            log.error("Couldn't set properties for " + el.getClass().getName());
+            throw ule;
         }
     }
 

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -64,7 +64,7 @@ public class SampleResult implements Serializable {
      * The value is defined by the property "sampleresult.default.encoding"
      * with a default of DEFAULT_HTTP_ENCODING if that is not defined.
      */
-    static final String DEFAULT_ENCODING
+    protected static final String DEFAULT_ENCODING
             = JMeterUtils.getPropDefault("sampleresult.default.encoding", // $NON-NLS-1$
             DEFAULT_HTTP_ENCODING);
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -223,7 +223,7 @@ public String getDataEncodingWithDefault() {
                 }
             }
         }
-        return super.getDataEncodingWithDefault(DEFAULT_HTTP_ENCODING);
+        return super.getDataEncodingWithDefault(DEFAULT_ENCODING);
     }
 
     public void setResponseNoContent(){

File: src/components/org/apache/jmeter/extractor/HtmlExtractor.java
Patch:
@@ -206,7 +206,7 @@ private Extractor getExtractorImpl() {
             if (useDefaultExtractor || EXTRACTOR_JSOUP.equals(getExtractor())) {
                 extractor = new JSoupExtractor();
             } else if (EXTRACTOR_JODD.equals(getExtractor())) {
-                extractor = new JSoupExtractor();
+                extractor = new JoddExtractor();
             } else {
                 throw new IllegalArgumentException("Extractor implementation:"+ getExtractor()+" is unknown");
             }

File: src/core/org/apache/jmeter/control/gui/LoopControlPanel.java
Patch:
@@ -126,7 +126,7 @@ public void modifyTestElement(TestElement lc) {
             if (loops.getText().length() > 0) {
                 ((LoopController) lc).setLoops(loops.getText());
             } else {
-                ((LoopController) lc).setLoops(-1);
+                ((LoopController) lc).setLoops(LoopController.INFINITE_LOOP_COUNT);
             }
         }
     }
@@ -238,7 +238,7 @@ private JPanel createLoopCountPanel() {
      */
     private void setState(String loopCount) {
         if (loopCount.startsWith("-")) { // $NON-NLS-1$
-            setState(-1);
+            setState(LoopController.INFINITE_LOOP_COUNT);
         } else {
             loops.setText(loopCount);
             infinite.setSelected(false);
@@ -255,7 +255,7 @@ private void setState(String loopCount) {
      *            the number of loops
      */
     private void setState(int loopCount) {
-        if (loopCount <= -1) {
+        if (loopCount <= LoopController.INFINITE_LOOP_COUNT) {
             infinite.setSelected(true);
             loops.setEnabled(false);
             loops.setText(""); // $NON-NLS-1$

File: test/src/org/apache/jmeter/control/TestLoopController.java
Patch:
@@ -82,7 +82,7 @@ public void testLoopZeroTimes() throws Exception {
 
         public void testInfiniteLoop() throws Exception {
             LoopController loop = new LoopController();
-            loop.setLoops(-1);
+            loop.setLoops(LoopController.INFINITE_LOOP_COUNT);
             loop.addTestElement(new TestSampler("never run"));
             loop.setRunningVersion(true);
             loop.initialize();

File: src/core/org/apache/jmeter/control/LoopController.java
Patch:
@@ -123,7 +123,7 @@ private boolean endOfLoop() {
     @Override
     protected void setDone(boolean done) {
         nbLoops = null;
-        super.setDone(true);
+        super.setDone(done);
     }
     
     /**

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -238,10 +238,10 @@ public static void addFileMenu(JPopupMenu menu) {
 
     public static JMenu makeMenus(String[] categories, String label, String actionCommand) {
         JMenu addMenu = new JMenu(label);
-        GuiUtils.makeMenuScrollable(addMenu);
         for (int i = 0; i < categories.length; i++) {
             addMenu.add(makeMenu(categories[i], actionCommand));
         }
+        GuiUtils.makeScrollableMenu(addMenu);
         return addMenu;
     }
 
@@ -339,10 +339,10 @@ public static JMenu makeMenu(String category, String actionCommand) {
      */
     public static JMenu makeMenu(Collection<MenuInfo> menuInfo, String actionCommand, String menuName) {
         JMenu menu = new JMenu(menuName);
-        GuiUtils.makeMenuScrollable(menu);
         for (MenuInfo info : menuInfo) {
             menu.add(makeMenuItem(info, actionCommand));
         }
+        GuiUtils.makeScrollableMenu(menu);
         return menu;
     }
 

File: test/src/org/apache/jmeter/resources/PackageTest.java
Patch:
@@ -409,7 +409,7 @@ public boolean accept(File dir, String name) {
                 // Look for calls to JMeterUtils.getResString()
                 final Pattern pat = Pattern.compile(".*getResString\\(\"([^\"]+)\"\\).*");
                 if (name.endsWith(".java")) {
-                  BufferedReader fileReader;
+                  BufferedReader fileReader = null;
                   try {
                     fileReader = new BufferedReader(new FileReader(file));
                     String s;
@@ -436,6 +436,8 @@ public boolean accept(File dir, String name) {
                     }
                 } catch (IOException e) {
                     e.printStackTrace();
+                } finally {
+                    JOrphanUtils.closeQuietly(fileReader);
                 }
                  
                 }

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -54,6 +54,7 @@
 import org.apache.jmeter.testelement.WorkBench;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.visualizers.Printable;
+import org.apache.jorphan.gui.GuiUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.reflect.ClassFinder;
 import org.apache.jorphan.util.JOrphanUtils;
@@ -237,6 +238,7 @@ public static void addFileMenu(JPopupMenu menu) {
 
     public static JMenu makeMenus(String[] categories, String label, String actionCommand) {
         JMenu addMenu = new JMenu(label);
+        GuiUtils.makeMenuScrollable(addMenu);
         for (int i = 0; i < categories.length; i++) {
             addMenu.add(makeMenu(categories[i], actionCommand));
         }
@@ -337,6 +339,7 @@ public static JMenu makeMenu(String category, String actionCommand) {
      */
     public static JMenu makeMenu(Collection<MenuInfo> menuInfo, String actionCommand, String menuName) {
         JMenu menu = new JMenu(menuName);
+        GuiUtils.makeMenuScrollable(menu);
         for (MenuInfo info : menuInfo) {
             menu.add(makeMenuItem(info, actionCommand));
         }

File: src/core/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -97,7 +97,9 @@ public TransactionController() {
         lnf = new ListenerNotifier();
     }
 
-    private Object readResolve(){
+    @Override
+    protected Object readResolve(){
+        super.readResolve();
         lnf = new ListenerNotifier();
         return this;
     }

File: src/components/org/apache/jmeter/control/ThroughputController.java
Patch:
@@ -77,7 +77,7 @@ public int intValue() {
     private transient MutableInteger globalNumExecutions;
 
     private transient MutableInteger globalIteration;
-
+    // FIXME Sync on byte is wrong, stupid of me
     private Byte counterLock = new Byte("0"); // ensure counts are updated correctly
     // Need to use something that is serializable, so Object is no use
 

File: src/core/org/apache/jmeter/gui/action/Start.java
Patch:
@@ -107,8 +107,8 @@ private void startEngine(boolean ignoreTimer) {
         try {
             engine.runTest();
         } catch (JMeterEngineException e) {
-            JOptionPane.showMessageDialog(gui.getMainFrame(), e.getMessage(), JMeterUtils
-                    .getResString("Error Occurred"), JOptionPane.ERROR_MESSAGE);
+            JOptionPane.showMessageDialog(gui.getMainFrame(), e.getMessage(), 
+                    JMeterUtils.getResString("error_occurred"), JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$
         }
         log.debug("test plan after cloning and running test is running version: "
                 + ((TestPlan) testTree.getArray()[0]).isRunningVersion());

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -631,7 +631,7 @@ private JPanel createHTTPSamplerPanel() {
         }
         m.addElement(USE_DEFAULT_HTTP_IMPL);
         samplerTypeName = new JComboBox(m);
-        samplerTypeName.setSelectedItem(HTTPSamplerFactory.DEFAULT_CLASSNAME);
+        samplerTypeName.setSelectedItem(USE_DEFAULT_HTTP_IMPL);
         samplerTypeName.addItemListener(this);
         JLabel label2 = new JLabel(JMeterUtils.getResString("proxy_sampler_type")); // $NON-NLS-1$
         label2.setLabelFor(samplerTypeName);

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -54,7 +54,7 @@ public final class JMeterVersion {
     private static final String IMPLEMENTATION;
     
     // Same applies to copyright string
-    private static final String COPYRIGHT = "Copyright (c) 1998-2012 The Apache Software Foundation";
+    private static final String COPYRIGHT = "Copyright (c) 1998-2013 The Apache Software Foundation";
 
     static {
         String impl=null;

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -808,7 +808,7 @@ private void runNonGui(String testFile, String logFile, boolean remoteStart, Str
                     return;
                 }
                 if(failingEngines.size()>0) {
-                    throw new IllegalArgumentException("The following remote engines did not start correclty:"+failingEngines);
+                    throw new IllegalArgumentException("The following remote engines could not be configured:"+failingEngines);
                 }
                 println("Starting remote engines");
                 log.info("Starting remote engines");

File: src/core/org/apache/jmeter/samplers/DataStrippingSampleSender.java
Patch:
@@ -73,6 +73,8 @@ public void sampleOccurred(SampleEvent event) {
         //Strip the response data before writing, but only for a successful request.
         SampleResult result = event.getResult();
         if(result.isSuccessful()) {
+            // Compute bytes before stripping
+            result.setBytes(result.getBytes());
             result.setResponseData(new byte[0]);
         }
         if(decoratedSender == null)

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -71,7 +71,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
     private static final String XML = "xml"; // $NON_NLS-1$
 
     /** Indicates that the results file should be in CSV format. * */
-    //NOTUSED private static final String CSV = "csv"; // $NON_NLS-1$
+    private static final String CSV = "csv"; // $NON_NLS-1$
 
     /** Indicates that the results should be stored in a database. * */
     //NOTUSED private static final String DATABASE = "db"; // $NON_NLS-1$
@@ -378,7 +378,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
             _assertionsResultsToSave = 0;
         }
 
-        String howToSave = props.getProperty(OUTPUT_FORMAT_PROP, XML);
+        String howToSave = props.getProperty(OUTPUT_FORMAT_PROP, CSV);
 
         if (XML.equals(howToSave)) {
             _xml = true;

File: src/core/org/apache/jmeter/samplers/SampleSenderFactory.java
Patch:
@@ -56,7 +56,7 @@ static SampleSender getInstance(RemoteSampleListener listener) {
         final boolean holdSamples = JMeterUtils.getPropDefault("hold_samples", false); // $NON-NLS-1$
 
         // Extended property name
-         final String type = JMeterUtils.getPropDefault("mode", MODE_STANDARD); // $NON-NLS-1$
+         final String type = JMeterUtils.getPropDefault("mode", MODE_STRIPPED_BATCH); // $NON-NLS-1$
 
         if (holdSamples || type.equalsIgnoreCase(MODE_HOLD)) {
             HoldSampleSender h = new HoldSampleSender(listener);

File: src/components/org/apache/jmeter/extractor/gui/XPathExtractorGui.java
Patch:
@@ -122,7 +122,7 @@ private void init() {
 
         Box box = Box.createVerticalBox();
         box.add(makeTitlePanel());
-        box.add(createScopePanel(true, false, false));
+        box.add(createScopePanel(true, true, true));
         xml.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils
                 .getResString("xpath_assertion_option"))); //$NON-NLS-1$
         box.add(xml);

File: src/components/org/apache/jmeter/extractor/gui/XPathExtractorGui.java
Patch:
@@ -122,7 +122,7 @@ private void init() {
 
         Box box = Box.createVerticalBox();
         box.add(makeTitlePanel());
-        box.add(createScopePanel(true));
+        box.add(createScopePanel(true, false, false));
         xml.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils
                 .getResString("xpath_assertion_option"))); //$NON-NLS-1$
         box.add(xml);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java
Patch:
@@ -235,6 +235,7 @@ public void clearGui(){
         msgChoice.setText(""); // $NON-NLS-1$
         configChoice.setText(USE_TEXT_RSC);
         updateConfig(USE_TEXT_RSC);
+        msgChoice.setText(TEXT_MSG_RSC);
         iterations.setText("1"); // $NON-NLS-1$
         useAuth.setSelected(false);
         jmsUser.setEnabled(false);

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -180,7 +180,7 @@ private static boolean validateFormat(String format){
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String FILEVERSION = "1422662"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1427507"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/components/org/apache/jmeter/extractor/JSoupExtractor.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * JSoup based CSS/JQuery extractor
- * @see http://jsoup.org/cookbook/extracting-data/selector-syntax
+ * see http://jsoup.org/cookbook/extracting-data/selector-syntax
  * @since 2.9
  */
 public class JSoupExtractor implements Extractor {
@@ -49,7 +49,7 @@ public JSoupExtractor() {
     }
 
     /**
-     * @see org.apache.jmeter.extractor.Extractor#extract(java.lang.String, java.lang.String, int, java.lang.String, java.util.List, int, String)
+     * @see org.apache.jmeter.extractor.Extractor#extract(String, String, int, String, List, int, String)
      */
     @Override
     public int extract(String expression, String attribute, int matchNumber,

File: src/components/org/apache/jmeter/extractor/JoddExtractor.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  * Jodd-Lagerto based CSS/JQuery extractor
- * @see http://jodd.org/doc/csselly/
+ * see http://jodd.org/doc/csselly/
  * @since 2.9
  */
 public class JoddExtractor implements Extractor {
@@ -50,7 +50,7 @@ public JoddExtractor() {
     }
 
     /**
-     * @see org.apache.jmeter.extractor.Extractor#extract(java.lang.String, java.lang.String, int, java.lang.String, java.util.List, int, boolean)
+     * @see org.apache.jmeter.extractor.Extractor#extract(String, String, int, String, List, int, String)
      */
     @Override
     public int extract(String expression, String attribute, int matchNumber,

File: src/components/org/apache/jmeter/assertions/JSR223Assertion.java
Patch:
@@ -47,11 +47,11 @@ public AssertionResult getResult(SampleResult response) {
             processFileOrScript(scriptEngine, bindings);
             result.setError(false);
         } catch (IOException e) {
-            log.warn("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script ", e);
             result.setError(true);
             result.setFailureMessage(e.toString());
         } catch (ScriptException e) {
-            log.warn("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script ", e);
             result.setError(true);
             result.setFailureMessage(e.toString());
         }

File: src/components/org/apache/jmeter/extractor/JSR223PostProcessor.java
Patch:
@@ -41,9 +41,9 @@ public void process() {
             ScriptEngine scriptEngine = getScriptEngine();
             processFileOrScript(scriptEngine, null);
         } catch (ScriptException e) {
-            log.warn("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script ", e);
         } catch (IOException e) {
-            log.warn("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script ", e);
         }
     }
 }

File: src/components/org/apache/jmeter/modifiers/JSR223PreProcessor.java
Patch:
@@ -41,9 +41,9 @@ public void process() {
             ScriptEngine scriptEngine = getScriptEngine();
             processFileOrScript(scriptEngine, null);
         } catch (ScriptException e) {
-            log.warn("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script ", e);
         } catch (IOException e) {
-            log.warn("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script ", e);
         }
     }
 }

File: src/components/org/apache/jmeter/timers/JSR223Timer.java
Patch:
@@ -46,11 +46,11 @@ public long delay() {
             }
             delay = Long.parseLong(o.toString());
         } catch (NumberFormatException e) {
-            log.warn("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script ", e);
         } catch (IOException e) {
-            log.warn("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script ", e);
         } catch (ScriptException e) {
-            log.warn("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script ", e);
         }
         return delay;
     }

File: src/components/org/apache/jmeter/visualizers/JSR223Listener.java
Patch:
@@ -49,9 +49,9 @@ public void sampleOccurred(SampleEvent event) {
             bindings.put("sampleResult", event.getResult());
             processFileOrScript(scriptEngine, bindings);
         } catch (ScriptException e) {
-            log.warn("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script ", e);
         } catch (IOException e) {
-            log.warn("Problem in JSR223 script ", e);
+            log.error("Problem in JSR223 script ", e);
         }
     }
 

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223Sampler.java
Patch:
@@ -72,12 +72,12 @@ public SampleResult sample(Entry entry) {
                 result.setResponseData(ret.toString(), null);
             }
         } catch (IOException e) {
-            log.warn("Problem in JSR223 script "+e, e);
+            log.error("Problem in JSR223 script "+e, e);
             result.setSuccessful(false);
             result.setResponseCode("500"); // $NON-NLS-1$
             result.setResponseMessage(e.toString());
         } catch (ScriptException e) {
-            log.warn("Problem in JSR223 script "+e, e);
+            log.error("Problem in JSR223 script "+e, e);
             result.setSuccessful(false);
             result.setResponseCode("500"); // $NON-NLS-1$
             result.setResponseMessage(e.toString());

File: src/components/org/apache/jmeter/extractor/gui/HtmlExtractorGui.java
Patch:
@@ -164,7 +164,7 @@ private Component makeExtractorPanel() {
         m.addElement(USE_DEFAULT_EXTRACTOR_IMPL);
         extractorImplName = new JComboBox(m);
         extractorImplName.setSelectedItem(HtmlExtractor.DEFAULT_EXTRACTOR);
-        JLabel label2 = new JLabel(JMeterUtils.getResString("extractor_type")); // $NON-NLS-1$
+        JLabel label2 = new JLabel(JMeterUtils.getResString("html_extractor_type")); // $NON-NLS-1$
         label2.setLabelFor(extractorImplName);
         panel.add(label2);
         panel.add(extractorImplName);

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -174,13 +174,13 @@ private static boolean validateFormat(String format){
     
     // Must match _version property value in saveservice.properties
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String PROPVERSION = "2.3";// Expected version $NON-NLS-1$
+    private static final String PROPVERSION = "2.4";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
     // Must match Revision id value in saveservice.properties, 
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    private static final String FILEVERSION = "1382180"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1422662"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/components/org/apache/jmeter/extractor/Extractor.java
Patch:
@@ -34,7 +34,7 @@ public interface Extractor extends Serializable {
      * @param inputString Page or excerpt
      * @param result List<String> results
      * @param found current matches found
-     * @param cacheIfPossible Cache analysis if possibler
+     * @param cacheKey If not null, the implementation is encouraged to cache parsing result and use this key as part of cache key
      * @return match found updated
      */
     int extract(
@@ -44,5 +44,5 @@ int extract(
             String inputString, 
             List<String> result,
             int found,
-            boolean cacheIfPossible);
+            String cacheKey);
 }

File: src/components/org/apache/jmeter/extractor/HtmlExtractor.java
Patch:
@@ -179,13 +179,14 @@ private List<String> extractMatchingStrings(JMeterVariables vars,
         List<String> result = new ArrayList<String>();
         if (isScopeVariable()){
             String inputString=vars.get(getVariableName());
-            getExtractorImpl().extract(expression, attribute, matchNumber, inputString, result, found, true);
+            getExtractorImpl().extract(expression, attribute, matchNumber, inputString, result, found, "-1");
         } else {
             List<SampleResult> sampleList = getSampleList(previousResult);
             int i=0;
             for (SampleResult sr : sampleList) {
                 String inputString = sr.getResponseDataAsString();
-                found = getExtractorImpl().extract(expression, attribute, matchNumber, inputString, result, found, i==0);
+                found = getExtractorImpl().extract(expression, attribute, matchNumber, inputString, result, found,
+                        i>0 ? null : Integer.toString(i));
                 i++;
                 if (matchNumber > 0 && found == matchNumber){// no need to process further
                     break;

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -248,7 +248,7 @@ public SampleSaveConfiguration getSaveConfig() {
     /**
      * Cache for responseData as string to avoid multiple computations
      */
-    private String responseDataAsString;
+    private volatile transient String responseDataAsString;
     
     private long initOffset(){
         if (useNanoTime){

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -254,6 +254,7 @@ public void run() {
                 Sampler sam = controller.next();
                 while (running && sam != null) {
                 	process_sampler(sam, null, threadContext);
+                	threadContext.cleanAfterSample();
                 	if(onErrorStartNextLoop || threadContext.isRestartNextLoop()) {
                 	    if(threadContext.isRestartNextLoop()) {
                             triggerEndOfLoopOnParentControllers(sam, threadContext);

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/config/gui/TCPConfigGui.java
Patch:
@@ -85,7 +85,7 @@ public void configure(TestElement element) {
         classname.setText(element.getPropertyAsString(TCPSampler.CLASSNAME));
         serverPanel.setServer(element.getPropertyAsString(TCPSampler.SERVER));
         // Default to original behaviour, i.e. re-use connection
-        reUseConnection.setSelected(element.getPropertyAsBoolean(TCPSampler.RE_USE_CONNECTION,true));
+        reUseConnection.setSelected(element.getPropertyAsBoolean(TCPSampler.RE_USE_CONNECTION, TCPSampler.RE_USE_CONNECTION_DEFAULT));
         serverPanel.setPort(element.getPropertyAsString(TCPSampler.PORT));
         // filename.setText(element.getPropertyAsString(TCPSampler.FILENAME));
         serverPanel.setResponseTimeout(element.getPropertyAsString(TCPSampler.TIMEOUT));

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -82,6 +82,7 @@ public class TCPSampler extends AbstractSampler implements ThreadListener, Inter
     public static final String REQUEST = "TCPSampler.request"; //$NON-NLS-1$
 
     public static final String RE_USE_CONNECTION = "TCPSampler.reUseConnection"; //$NON-NLS-1$
+    public static final boolean RE_USE_CONNECTION_DEFAULT = true;
 
     public static final String CLOSE_CONNECTION = "TCPSampler.closeConnection"; //$NON-NLS-1$
     public static final boolean CLOSE_CONNECTION_DEFAULT = false;
@@ -236,7 +237,7 @@ public void setReUseConnection(String reuse) {
     }
 
     public boolean isReUseConnection() {
-        return getPropertyAsBoolean(RE_USE_CONNECTION);
+        return getPropertyAsBoolean(RE_USE_CONNECTION, RE_USE_CONNECTION_DEFAULT);
     }
 
     public void setCloseConnection(String close) {

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -337,8 +337,8 @@ private void triggerEndOfLoopOnParentControllers(Sampler sam, JMeterContext thre
         for (Iterator<Controller> iterator = controllersToReinit
                 .iterator(); iterator.hasNext();) {
             Controller parentController =  iterator.next();
-            if(parentController instanceof ThreadGroup) {
-                ThreadGroup tg = (ThreadGroup) parentController;
+            if(parentController instanceof AbstractThreadGroup) {
+                AbstractThreadGroup tg = (AbstractThreadGroup) parentController;
                 tg.startNextLoop();
             } else {
                 parentController.triggerEndOfLoop();

File: src/core/org/apache/jmeter/threads/gui/ThreadGroupGui.java
Patch:
@@ -95,8 +95,8 @@ public TestElement createTestElement() {
     @Override
     public void modifyTestElement(TestElement tg) {
         super.configureTestElement(tg);
-        if (tg instanceof ThreadGroup) {
-            ((ThreadGroup) tg).setSamplerController((LoopController) loopPanel.createTestElement());
+        if (tg instanceof AbstractThreadGroup) {
+            ((AbstractThreadGroup) tg).setSamplerController((LoopController) loopPanel.createTestElement());
         }
 
         tg.setProperty(AbstractThreadGroup.NUM_THREADS, threadInput.getText());

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -383,7 +383,9 @@ public SampleResult sample(Entry e)// Entry tends to be ignored ...
         final boolean reUseConnection = isReUseConnection();
         final boolean closeConnection = isCloseConnection();
         String socketKey = getSocketKey();
-        log.debug(getLabel() + " " + getFilename() + " " + getUsername() + " " + getPassword());
+        if (log.isDebugEnabled()){
+            log.debug(getLabel() + " " + getFilename() + " " + getUsername() + " " + getPassword());
+        }
         SampleResult res = new SampleResult();
         boolean isSuccessful = false;
         res.setSampleLabel(getName());// Use the test element name for the label

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/config/gui/TCPConfigGui.java
Patch:
@@ -182,7 +182,7 @@ public void itemStateChanged(final ItemEvent e) {
     private JPanel createCloseConnectionPanel() {
         JLabel label = new JLabel(JMeterUtils.getResString("closeconnection")); // $NON-NLS-1$
 
-        closeConnection = new JCheckBox("", false);
+        closeConnection = new JCheckBox("", TCPSampler.CLOSE_CONNECTION_DEFAULT);
         label.setLabelFor(closeConnection);
 
         JPanel closeConnectionPanel = new JPanel(new FlowLayout());

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -198,8 +198,7 @@ public void run() {
             }
 
             SamplerCreator samplerCreator = factory.getSamplerCreator(request, pageEncodings, formEncodings);
-            sampler = samplerCreator.createSampler(request, pageEncodings, formEncodings);
-            samplerCreator.populateSampler(sampler, request, pageEncodings, formEncodings);
+            sampler = samplerCreator.createAndPopulateSampler(request, pageEncodings, formEncodings);
 
             /*
              * Create a Header Manager to ensure that the browsers headers are
@@ -217,6 +216,7 @@ public void run() {
             addFormEncodings(result, pageEncoding);
 
             writeToClient(result, new BufferedOutputStream(clientSocket.getOutputStream()));
+            samplerCreator.postProcessSampler(sampler, result);
         } catch (UnknownHostException uhe) {
             log.warn("Server Not Found.", uhe);
             writeErrorToClient(HttpReplyHdr.formServerNotFound());

File: src/core/org/apache/jmeter/gui/util/TristateCheckBox.java
Patch:
@@ -228,10 +228,12 @@ private void displayState() {
                 if (state == TristateState.INDETERMINATE) {
                     tristateCheckBox.setIcon(icon); // Needed for all but Nimbus
                     tristateCheckBox.setSelectedIcon(icon); // Nimbus works - after a fashion - with this
+                    tristateCheckBox.setDisabledSelectedIcon(icon); // Nimbus works - after a fashion - with this
                 } else { // reset
                     if (tristateCheckBox!= null){
                         tristateCheckBox.setIcon(null);
                         tristateCheckBox.setSelectedIcon(null);
+                        tristateCheckBox.setDisabledSelectedIcon(null); // Nimbus works - after a fashion - with this
                     }
                 }
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -225,7 +225,7 @@ private static final boolean isPotentialXml(String postData) {
                     new ErrorDetectionHandler();
             xmlReader.setContentHandler(detectionHandler);
             xmlReader.parse(new InputSource(new StringReader(postData)));
-            return detectionHandler.isErrorDetected();
+            return !detectionHandler.isErrorDetected();
         } catch (ParserConfigurationException e) {
             return false;
         } catch (SAXException e) {

File: src/protocol/ftp/org/apache/jmeter/protocol/ftp/config/gui/FtpConfigGui.java
Patch:
@@ -69,6 +69,7 @@ public FtpConfigGui(boolean displayName) {
         init();
     }
 
+    @Override
     public String getLabelResource() {
         return "ftp_sample_title"; // $NON-NLS-1$
     }
@@ -92,6 +93,7 @@ public void configure(TestElement element) {
         }
     }
 
+    @Override
     public TestElement createTestElement() {
         ConfigTestElement element = new ConfigTestElement();
         modifyTestElement(element);
@@ -103,6 +105,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement element) {
         configureTestElement(element);
         // Note: the element is a ConfigTestElement, so cannot use FTPSampler access methods

File: src/protocol/ftp/org/apache/jmeter/protocol/ftp/control/gui/FtpTestSamplerGui.java
Patch:
@@ -48,6 +48,7 @@ public void configure(TestElement element) {
         ftpDefaultPanel.configure(element);
     }
 
+    @Override
     public TestElement createTestElement() {
         FTPSampler sampler = new FTPSampler();
         modifyTestElement(sampler);
@@ -59,6 +60,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement sampler) {
         sampler.clear();
         ftpDefaultPanel.modifyTestElement(sampler);
@@ -77,6 +79,7 @@ public void clearGui() {
         loginPanel.clearGui();
     }
 
+    @Override
     public String getLabelResource() {
         return "ftp_testing_title"; // $NON-NLS-1$
     }

File: src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java
Patch:
@@ -166,6 +166,7 @@ public String getLabel() {
         return sb.toString();
     }
 
+    @Override
     public SampleResult sample(Entry e) {
         SampleResult res = new SampleResult();
         res.setSuccessful(false); // Assume failure
@@ -294,6 +295,7 @@ public SampleResult sample(Entry e) {
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean interrupt() {
         FTPClient client = savedClient;
         if (client != null) {

File: src/protocol/java/org/apache/jmeter/protocol/java/control/gui/BeanShellSamplerGui.java
Patch:
@@ -59,6 +59,7 @@ public void configure(TestElement element) {
         super.configure(element);
     }
 
+    @Override
     public TestElement createTestElement() {
         BeanShellSampler sampler = new BeanShellSampler();
         modifyTestElement(sampler);
@@ -70,6 +71,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement te) {
         te.clear();
         this.configureTestElement(te);
@@ -92,6 +94,7 @@ public void clearGui() {
         resetInterpreter.setSelected(false);
     }
 
+    @Override
     public String getLabelResource() {
         return "bsh_sampler_title"; // $NON-NLS-1$
     }

File: src/protocol/java/org/apache/jmeter/protocol/java/control/gui/JavaTestSamplerGui.java
Patch:
@@ -45,6 +45,7 @@ public JavaTestSamplerGui() {
         init();
     }
 
+    @Override
     public String getLabelResource() {
         return "java_request"; // $NON-NLS-1$
     }
@@ -64,13 +65,15 @@ private void init() {
     }
 
     /* Implements JMeterGuiComponent.createTestElement() */
+    @Override
     public TestElement createTestElement() {
         JavaSampler sampler = new JavaSampler();
         modifyTestElement(sampler);
         return sampler;
     }
 
     /* Implements JMeterGuiComponent.modifyTestElement(TestElement) */
+    @Override
     public void modifyTestElement(TestElement sampler) {
         sampler.clear();
         JavaConfig config = (JavaConfig) javaPanel.createTestElement();

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/AbstractJavaSamplerClient.java
Patch:
@@ -55,16 +55,19 @@ public abstract class AbstractJavaSamplerClient implements JavaSamplerClient {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     /* Implements JavaSamplerClient.setupTest(JavaSamplerContext) */
+    @Override
     public void setupTest(JavaSamplerContext context) {
         log.debug(getClass().getName() + ": setupTest");
     }
 
     /* Implements JavaSamplerClient.teardownTest(JavaSamplerContext) */
+    @Override
     public void teardownTest(JavaSamplerContext context) {
         log.debug(getClass().getName() + ": teardownTest");
     }
 
     /* Implements JavaSamplerClient.getDefaultParameters() */
+    @Override
     public Arguments getDefaultParameters() {
         return null;
     }

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BSFSampler.java
Patch:
@@ -68,6 +68,7 @@ public String getLabel() {
         return getName();
     }
 
+    @Override
     public SampleResult sample(Entry e)// Entry tends to be ignored ...
     {
         final String label = getLabel();
@@ -142,6 +143,7 @@ public SampleResult sample(Entry e)// Entry tends to be ignored ...
     /**
      * @see org.apache.jmeter.samplers.AbstractSampler#applies(org.apache.jmeter.config.ConfigTestElement)
      */
+    @Override
     public boolean applies(ConfigTestElement configElement) {
         String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();
         return APPLIABLE_CONFIG_CLASSES.contains(guiClass);

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BeanShellSampler.java
Patch:
@@ -86,6 +86,7 @@ public boolean isResetInterpreter() {
         return getPropertyAsBoolean(RESET_INTERPRETER);
     }
 
+    @Override
     public SampleResult sample(Entry e)// Entry tends to be ignored ...
     {
         // log.info(getLabel()+" "+getFilename());
@@ -163,6 +164,7 @@ public SampleResult sample(Entry e)// Entry tends to be ignored ...
         return res;
     }
 
+    @Override
     public boolean interrupt() {
         if (savedBsh != null) {
             try {
@@ -178,6 +180,7 @@ public boolean interrupt() {
     /**
      * @see org.apache.jmeter.samplers.AbstractSampler#applies(org.apache.jmeter.config.ConfigTestElement)
      */
+    @Override
     public boolean applies(ConfigTestElement configElement) {
         String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();
         return APPLIABLE_CONFIG_CLASSES.contains(guiClass);

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223Sampler.java
Patch:
@@ -47,6 +47,7 @@ public class JSR223Sampler extends JSR223TestElement implements Cloneable, Sampl
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
+    @Override
     public SampleResult sample(Entry entry) {
         SampleResult result = new SampleResult();
         result.setSampleLabel(getName());
@@ -88,6 +89,7 @@ public SampleResult sample(Entry entry) {
     /**
      * @see org.apache.jmeter.samplers.AbstractSampler#applies(org.apache.jmeter.config.ConfigTestElement)
      */
+    @Override
     public boolean applies(ConfigTestElement configElement) {
         String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();
         return APPLIABLE_CONFIG_CLASSES.contains(guiClass);

File: src/protocol/java/org/apache/jmeter/protocol/java/test/JavaTest.java
Patch:
@@ -265,6 +265,7 @@ public Arguments getDefaultParameters() {
      *
      * @return a SampleResult giving the results of this sample.
      */
+    @Override
     public SampleResult runTest(JavaSamplerContext context) {
         setupValues(context);
 

File: src/protocol/java/org/apache/jmeter/protocol/java/test/SleepTest.java
Patch:
@@ -125,6 +125,7 @@ public void setupTest(JavaSamplerContext context) {
      *
      * @return a SampleResult giving the results of this sample.
      */
+    @Override
     public SampleResult runTest(JavaSamplerContext context) {
         SampleResult results = new SampleResult();
 

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Patch:
@@ -56,6 +56,7 @@ public class JDBCSampler extends AbstractJDBCTestElement implements Sampler, Tes
     public JDBCSampler() {
     }
 
+    @Override
     public SampleResult sample(Entry e) {
         log.debug("sampling jdbc");
 
@@ -110,6 +111,7 @@ public SampleResult sample(Entry e) {
     /**
      * @see org.apache.jmeter.samplers.AbstractSampler#applies(org.apache.jmeter.config.ConfigTestElement)
      */
+    @Override
     public boolean applies(ConfigTestElement configElement) {
         String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();
         return APPLIABLE_CONFIG_CLASSES.contains(guiClass);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/Publisher.java
Patch:
@@ -220,6 +220,7 @@ public MapMessage publish(Map<String, Object> map, String destinationName, Map<S
     /**
      * Close will close the session
      */
+    @Override
     public void close() {
         Utils.close(producer, log);
         Utils.close(session, log);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
Patch:
@@ -267,6 +267,7 @@ public Message getMessage(long timeout) throws JMSException {
      * close() will stop the connection first. 
      * Then it closes the subscriber, session and connection.
      */
+    @Override
     public void close() { // called from threadFinished() thread
         log.debug("close()");
         try {
@@ -285,6 +286,7 @@ public void close() { // called from threadFinished() thread
     /**
      * {@inheritDoc}
      */
+    @Override
     public void onMessage(Message message) {
         if (!queue.offer(message)){
             log.warn("Could not add message to queue");

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSSamplerGui.java
Patch:
@@ -102,6 +102,7 @@ public void clearGui() {// renamed from clear
         jndiPropertiesPanel.clear();
     }
 
+    @Override
     public TestElement createTestElement() {
         JMSSampler sampler = new JMSSampler();
         this.configureTestElement(sampler);
@@ -138,6 +139,7 @@ private void transfer(JMSSampler element) {
      *
      * @param element
      */
+    @Override
     public void modifyTestElement(TestElement element) {
         this.configureTestElement(element);
         if (!(element instanceof JMSSampler)) return;
@@ -277,6 +279,7 @@ private JPanel createJNDIPanel() {
         return jndiPanel;
     }
 
+    @Override
     public String getLabelResource() {
         return "jms_point_to_point"; //$NON-NLS-1$ // TODO - probably wrong
     }

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/BaseJMSSampler.java
Patch:
@@ -75,6 +75,7 @@ public BaseJMSSampler() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public SampleResult sample(Entry e) {
         return this.sample();
     }

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/FixedQueueExecutor.java
Patch:
@@ -67,6 +67,7 @@ public FixedQueueExecutor(MessageProducer producer, int timeout, boolean useReqM
     /**
      * {@inheritDoc}
      */
+    @Override
     public Message sendAndReceive(Message request) throws JMSException {
         String id = request.getJMSCorrelationID();
         if(id == null && !useReqMsgIdAsCorrelId){

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -127,6 +127,7 @@ public class JMSSampler extends AbstractSampler implements ThreadListener {
     /**
      * {@inheritDoc}
      */
+    @Override
     public SampleResult sample(Entry entry) {
         SampleResult res = new SampleResult();
         res.setSampleLabel(getName());
@@ -291,6 +292,7 @@ public String toString() {
         return getQueueConnectionFactory() + ", queue: " + getSendQueue();
     }
 
+    @Override
     public void threadStarted() {
         logThreadStart();
 
@@ -445,6 +447,7 @@ public String getTimeout() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void threadFinished() {
         LOGGER.debug("Thread ended " + new Date());
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/Receiver.java
Patch:
@@ -103,6 +103,7 @@ public static Receiver createReceiver(ConnectionFactory factory, Destination rec
         return receiver;
     }
 
+    @Override
     public void run() {
         active = true;
         Message reply;

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/TemporaryQueueExecutor.java
Patch:
@@ -53,6 +53,7 @@ public TemporaryQueueExecutor(QueueSession session, Queue destination) throws JM
     /**
      * {@inheritDoc}
      */
+    @Override
     public Message sendAndReceive(Message request) throws JMSException {
         return requestor.request(request);
     }

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/control/gui/LdapExtTestSamplerGui.java
Patch:
@@ -64,6 +64,7 @@ public void configure(TestElement element) {
         ldapDefaultPanel.configure(element);
     }
 
+    @Override
     public TestElement createTestElement() {
         LDAPExtSampler sampler = new LDAPExtSampler();
         modifyTestElement(sampler);
@@ -75,6 +76,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement sampler) {
         sampler.clear();
         ((LDAPExtSampler) sampler).addTestElement(ldapDefaultPanel.createTestElement());
@@ -91,6 +93,7 @@ public void clearGui() {
         ldapDefaultPanel.clearGui();
     }
 
+    @Override
     public String getLabelResource() {
         return "ldapext_testing_title"; // $NON-NLS-1$
     }

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/control/gui/LdapTestSamplerGui.java
Patch:
@@ -57,6 +57,7 @@ public void configure(TestElement element) {
         ldapDefaultPanel.configure(element);
     }
 
+    @Override
     public TestElement createTestElement() {
         LDAPSampler sampler = new LDAPSampler();
         modifyTestElement(sampler);
@@ -68,6 +69,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement sampler) {
         sampler.clear();
         ((LDAPSampler) sampler).addTestElement(ldapDefaultPanel.createTestElement());
@@ -86,6 +88,7 @@ public void clearGui() {
         loginPanel.clearGui();
     }
 
+    @Override
     public String getLabelResource() {
         return "ldap_testing_title"; // $NON-NLS-1$
     }

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPSampler.java
Patch:
@@ -430,6 +430,7 @@ private void modifyTest(LdapClient ldap, SampleResult res) throws NamingExceptio
         }
     }
 
+    @Override
     public SampleResult sample(Entry e) {
         SampleResult res = new SampleResult();
         boolean isSuccessful = false;

File: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailFileFolder.java
Patch:
@@ -42,6 +42,7 @@ public class MailFileFolder extends Folder {
     private final File folderPath;// Parent folder (or single message file)
     private final boolean isFile;
     private static final FilenameFilter FILENAME_FILTER = new FilenameFilter(){
+        @Override
         public boolean accept(File dir, String name) {
             return name.matches(FILENAME_REGEX);
         }

File: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
Patch:
@@ -132,6 +132,7 @@ public MailReaderSampler() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public SampleResult sample(Entry e) {
         SampleResult parent = new SampleResult();
         boolean isOK = false; // Did sample succeed?
@@ -564,6 +565,7 @@ public String toString(){
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean interrupt() {
         boolean wasbusy = busy;
         busy = false;

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
Patch:
@@ -113,6 +113,7 @@ public SmtpSampler() {
      * @return sampleresult Result of the sample
      * @see org.apache.jmeter.samplers.Sampler#sample(org.apache.jmeter.samplers.Entry)
      */
+    @Override
     public SampleResult sample(Entry e) {
         Message message = null;
         SampleResult res = new SampleResult();

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpSamplerGui.java
Patch:
@@ -52,6 +52,7 @@ public SmtpSamplerGui() {
      * @return Null-String
      * @see org.apache.jmeter.gui.JMeterGUIComponent#getLabelResource()
      */
+    @Override
     public String getLabelResource() {
         return "smtp_sampler_title";
     }
@@ -108,6 +109,7 @@ public void configure(TestElement element) {
      * @return Test-element for JMeter
      * @see org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()
      */
+    @Override
     public TestElement createTestElement() {
         SmtpSampler sampler = new SmtpSampler();
         modifyTestElement(sampler);
@@ -119,6 +121,7 @@ public TestElement createTestElement() {
      * @param te TestElement for JMeter
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(org.apache.jmeter.testelement.TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement te) {
         te.clear();
         super.configureTestElement(te);

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/protocol/TrustAllSSLSocketFactory.java
Patch:
@@ -49,12 +49,15 @@ public TrustAllSSLSocketFactory(){
             sslcontext = SSLContext.getInstance("TLS"); // $NON-NLS-1$
             sslcontext.init( null, new TrustManager[]{
                     new X509TrustManager() {
+                        @Override
                         public X509Certificate[] getAcceptedIssuers() {
                             return EMPTY_X509Certificate;
                         }
+                        @Override
                         public void checkClientTrusted(
                                 X509Certificate[] certs, String authType) {
                         }
+                        @Override
                         public void checkServerTrusted(
                                 X509Certificate[] certs, String authType) {
                         }

File: src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java
Patch:
@@ -94,6 +94,7 @@ public SystemSampler() {
      *            the Entry for this sample
      * @return test SampleResult
      */
+    @Override
     public SampleResult sample(Entry entry) {
         SampleResult results = new SampleResult();
         results.setDataType(SampleResult.TEXT);

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/config/gui/TCPConfigGui.java
Patch:
@@ -62,6 +62,7 @@ public TCPConfigGui(boolean displayName) {
         init();
     }
 
+    @Override
     public String getLabelResource() {
         return "tcp_config_title"; // $NON-NLS-1$
     }
@@ -82,6 +83,7 @@ public void configure(TestElement element) {
         requestData.setText(element.getPropertyAsString(TCPSampler.REQUEST));
     }
 
+    @Override
     public TestElement createTestElement() {
         ConfigTestElement element = new ConfigTestElement();
         modifyTestElement(element);
@@ -93,6 +95,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement element) {
         configureTestElement(element);
         // N.B. this will be a config element, so we cannot use the setXXX() methods

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/control/gui/TCPSamplerGui.java
Patch:
@@ -48,6 +48,7 @@ public void configure(TestElement element) {
         tcpDefaultPanel.configure(element);
     }
 
+    @Override
     public TestElement createTestElement() {
         TCPSampler sampler = new TCPSampler();
         modifyTestElement(sampler);
@@ -59,6 +60,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement sampler) {
         sampler.clear();
         sampler.addTestElement(tcpDefaultPanel.createTestElement());
@@ -77,6 +79,7 @@ public void clearGui() {
         loginPanel.clearGui();
     }
 
+    @Override
     public String getLabelResource() {
         return "tcp_sample_title"; // $NON-NLS-1$
     }

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/BinaryTCPClientImpl.java
Patch:
@@ -91,6 +91,7 @@ public static final byte[] hexStringToByteArray(String hexEncodedBinary) {
      * @param os output stream
      * @param hexEncodedBinary hex-encoded binary
      */
+    @Override
     public void write(OutputStream os, String hexEncodedBinary) throws IOException{
         os.write(hexStringToByteArray(hexEncodedBinary));
         os.flush();
@@ -102,6 +103,7 @@ public void write(OutputStream os, String hexEncodedBinary) throws IOException{
     /**
      * {@inheritDoc}
      */
+    @Override
     public void write(OutputStream os, InputStream is) {
         throw new UnsupportedOperationException(
                 "Method not supported for Length-Prefixed data.");
@@ -115,6 +117,7 @@ public void write(OutputStream os, InputStream is) {
      * @return hex-encoded binary string
      * @throws ReadException 
      */
+    @Override
     public String read(InputStream is) throws ReadException {
     	ByteArrayOutputStream w = new ByteArrayOutputStream();
         try {

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java
Patch:
@@ -55,6 +55,7 @@ public LengthPrefixedBinaryTCPClientImpl() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void write(OutputStream os, String s)  throws IOException{
         os.write(intToByteArray(s.length()/2,lengthPrefixLen));
         if(log.isDebugEnabled()) {
@@ -66,13 +67,15 @@ public void write(OutputStream os, String s)  throws IOException{
     /**
      * {@inheritDoc}
      */
+    @Override
     public void write(OutputStream os, InputStream is) throws IOException {
         this.tcpClient.write(os, is);
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public String read(InputStream is) throws ReadException{
         byte[] msg = new byte[0];
         int msgLen = 0;

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPClientImpl.java
Patch:
@@ -69,6 +69,7 @@ public TCPClientImpl() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void write(OutputStream os, String s)  throws IOException{
         os.write(s.getBytes(charset)); 
         os.flush();
@@ -80,6 +81,7 @@ public void write(OutputStream os, String s)  throws IOException{
     /**
      * {@inheritDoc}
      */
+    @Override
     public void write(OutputStream os, InputStream is) throws IOException{
         byte buff[]=new byte[512];
         while(is.read(buff) > 0){
@@ -93,6 +95,7 @@ public void write(OutputStream os, InputStream is) throws IOException{
      * If there is no EOL byte defined, then reads until
      * the end of the stream is reached.
      */
+    @Override
     public String read(InputStream is) throws ReadException{
     	ByteArrayOutputStream w = new ByteArrayOutputStream();
         try {

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/UrlConfigGui.java
Patch:
@@ -694,6 +694,7 @@ else if(index != this.getSelectedIndex())
         }   
     }
     // autoRedirects and followRedirects cannot both be selected
+    @Override
     public void stateChanged(ChangeEvent e) {
         if (e.getSource() == autoRedirects){
             if (autoRedirects.isSelected()) {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HC3CookieHandler.java
Patch:
@@ -106,6 +106,7 @@ org.apache.commons.httpclient.Cookie[] getCookiesForUrl(
      *            URL of the request to which the returned header will be added.
      * @return the value string for the cookie header (goes after "Cookie: ").
      */
+    @Override
     public String getCookieHeaderForURL(
     		CollectionProperty cookiesCP,
     		URL url,
@@ -130,6 +131,7 @@ public String getCookieHeaderForURL(
 	/**
 	 * {@inheritDoc}
 	 */
+    @Override
     public void addCookieFromHeader(CookieManager cookieManager,
     		boolean checkCookies,String cookieHeader, URL url){
         boolean debugEnabled = log.isDebugEnabled();

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HC4CookieHandler.java
Patch:
@@ -69,6 +69,7 @@ public HC4CookieHandler(String policy) {
         this.cookieSpec = registry.getCookieSpec(policy);
     }
 
+    @Override
     public void addCookieFromHeader(CookieManager cookieManager,
             boolean checkCookies, String cookieHeader, URL url) {
             boolean debugEnabled = log.isDebugEnabled();
@@ -131,6 +132,7 @@ public void addCookieFromHeader(CookieManager cookieManager,
             }
     }
 
+    @Override
     public String getCookieHeaderForURL(CollectionProperty cookiesCP, URL url,
             boolean allowVariableCookie) {
         List<org.apache.http.cookie.Cookie> c = 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
Patch:
@@ -150,6 +150,7 @@ public void run() {
         }
     }
 
+    @Override
     public void stopServer() {
         running = false;
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
Patch:
@@ -54,6 +54,7 @@ public HttpMirrorThread(Socket _clientSocket) {
     /**
      * Main processing method for the HttpMirror object
      */
+    @Override
     public void run() {
         log.debug("Starting thread");
         BufferedInputStream in = null;

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpMirrorControlGui.java
Patch:
@@ -116,6 +116,7 @@ public void configure(TestElement element) {
     }
 
 
+    @Override
     public void actionPerformed(ActionEvent action) {
         String command = action.getActionCommand();
 

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CacheManagerGui.java
Patch:
@@ -52,6 +52,7 @@ public CacheManagerGui() {
         init();
     }
 
+    @Override
     public String getLabelResource() {
         return "cache_manager_title"; // $NON-NLS-1$
     }
@@ -75,13 +76,15 @@ public void configure(TestElement element) {
     }
 
     /* Implements JMeterGUIComponent.createTestElement() */
+    @Override
     public TestElement createTestElement() {
         CacheManager element = new CacheManager();
         modifyTestElement(element);
         return element;
     }
 
     /* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
+    @Override
     public void modifyTestElement(TestElement element) {
         configureTestElement(element);
         final CacheManager cacheManager = (CacheManager)element;

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPFileArgsPanel.java
Patch:
@@ -219,6 +219,7 @@ public void clear() {
      * @param e
      *  the event that has occurred
      */
+    @Override
     public void actionPerformed(ActionEvent e) {
         String action = e.getActionCommand();
         if (action.equals(ADD)) {

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/AnchorModifier.java
Patch:
@@ -61,6 +61,7 @@ public AnchorModifier() {
     /**
      * Modifies an Entry object based on HTML response text.
      */
+    @Override
     public void process() {
         JMeterContext context = getThreadContext();
         Sampler sam = context.getCurrentSampler();

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/URLRewritingModifier.java
Patch:
@@ -66,6 +66,7 @@ public class URLRewritingModifier extends AbstractTestElement implements Seriali
     // PreProcessors are cloned per-thread, so this will be saved per-thread
     private transient String savedValue = ""; // $NON-NLS-1$
 
+    @Override
     public void process() {
         JMeterContext ctx = getThreadContext();
         Sampler sampler = ctx.getCurrentSampler();

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserParameterXMLErrorHandler.java
Patch:
@@ -31,18 +31,21 @@
 public class UserParameterXMLErrorHandler implements ErrorHandler {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
+    @Override
     public void warning(SAXParseException exception) throws SAXException {
         log.warn("**Parsing Warning**\n" + "  line:    " + exception.getLineNumber() + "\n" + "  URI:    :"
                 + exception.getSystemId() + "\n" + "  Message: " + exception.getMessage());
         throw new SAXException("Warning encountered");
     }
 
+    @Override
     public void error(SAXParseException exception) throws SAXException {
         log.error("**Parsing Warning**\n" + "  line:    " + exception.getLineNumber() + "\n" + "  URI:    :"
                 + exception.getSystemId() + "\n" + "  Message: " + exception.getMessage());
         throw new SAXException("Error encountered");
     }
 
+    @Override
     public void fatalError(SAXParseException exception) throws SAXException {
         log.error("**Parsing Warning**\n" + "  line:    " + exception.getLineNumber() + "\n" + "  URI:    :"
                 + exception.getSystemId() + "\n" + "  Message: " + exception.getMessage());

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/gui/AnchorModifierGui.java
Patch:
@@ -31,10 +31,12 @@ public AnchorModifierGui() {
         init();
     }
 
+    @Override
     public String getLabelResource() {
         return "anchor_modifier_title"; //$NON-NLS-1$
     }
 
+    @Override
     public TestElement createTestElement() {
         AnchorModifier modifier = new AnchorModifier();
         modifyTestElement(modifier);
@@ -46,6 +48,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement modifier) {
         configureTestElement(modifier);
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/gui/URLRewritingModifierGui.java
Patch:
@@ -42,6 +42,7 @@ public class URLRewritingModifierGui extends AbstractPreProcessorGui {
 
     private JCheckBox shouldCache;
 
+    @Override
     public String getLabelResource() {
         return "http_url_rewriting_modifier_title"; // $NON-NLS-1$
     }
@@ -80,6 +81,7 @@ private void init() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public TestElement createTestElement() {
         URLRewritingModifier modifier = new URLRewritingModifier();
         modifyTestElement(modifier);
@@ -91,6 +93,7 @@ public TestElement createTestElement() {
      * <p>
      * {@inheritDoc}
      */
+    @Override
     public void modifyTestElement(TestElement modifier) {
         this.configureTestElement(modifier);
         URLRewritingModifier rewritingModifier = ((URLRewritingModifier) modifier);

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/URLCollection.java
Patch:
@@ -111,17 +111,20 @@ private static class UrlIterator implements Iterator<URL> {
             iter = i;
         }
 
+        @Override
         public boolean hasNext() {
             return iter.hasNext();
         }
 
         /*
          * Unwraps the URLString class to return the URL
          */
+        @Override
         public URL next() {
             return iter.next().getURL();
         }
 
+        @Override
         public void remove() {
             throw new UnsupportedOperationException();
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/URLString.java
Patch:
@@ -67,6 +67,7 @@ public URL getURL() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public int compareTo(URLString o) {
         return urlAsString.compareTo(o.toString());
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java
Patch:
@@ -152,6 +152,7 @@ public void run() {
      *
      * see #ACCEPT_TIMEOUT
      */
+    @Override
     public void stopServer() {
         running = false;
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -53,6 +53,7 @@ public DefaultSamplerCreator() {
     /**
      * @see org.apache.jmeter.protocol.http.proxy.SamplerCreator#getManagedContentTypes()
      */
+    @Override
     public String[] getManagedContentTypes() {
         return new String[0];
     }
@@ -61,6 +62,7 @@ public String[] getManagedContentTypes() {
      * 
      * @see org.apache.jmeter.protocol.http.proxy.SamplerCreator#createSampler(org.apache.jmeter.protocol.http.proxy.HttpRequestHdr, java.util.Map, java.util.Map)
      */
+    @Override
     public HTTPSamplerBase createSampler(HttpRequestHdr request,
             Map<String, String> pageEncodings, Map<String, String> formEncodings) {
         // Instantiate the sampler
@@ -81,6 +83,7 @@ public HTTPSamplerBase createSampler(HttpRequestHdr request,
     /**
      * @see org.apache.jmeter.protocol.http.proxy.SamplerCreator#populateSampler(org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase, org.apache.jmeter.protocol.http.proxy.HttpRequestHdr, java.util.Map, java.util.Map)
      */
+    @Override
     public final void populateSampler(HTTPSamplerBase sampler,
             HttpRequestHdr request, Map<String, String> pageEncodings,
             Map<String, String> formEncodings) throws Exception{

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java
Patch:
@@ -509,6 +509,7 @@ private String getString() throws IOException {
         return s;
     }
 
+    @Override
     public boolean interrupt() {
         Socket chan = activeChannel;
         if (chan != null) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPFileImpl.java
Patch:
@@ -36,6 +36,7 @@ protected HTTPFileImpl(HTTPSamplerBase base) {
         super(base);
     }
 
+    @Override
     public boolean interrupt() {
         return false;
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -1113,6 +1113,7 @@ private void closeThreadLocalConnections() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean interrupt() {
         HttpClient client = savedClient;
         if (client != null) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
Patch:
@@ -648,6 +648,7 @@ private void saveConnectionCookies(HttpURLConnection conn, URL u, CookieManager
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean interrupt() {
         HttpURLConnection conn = savedConn;
         if (conn != null) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -33,6 +33,7 @@ public HTTPSampler(){
         hc = new HTTPJavaImpl(this);
     }
 
+    @Override
     public boolean interrupt() {
         return hc.interrupt();
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java
Patch:
@@ -42,6 +42,7 @@ public HTTPSampler2(){
         hc = new HTTPHC3Impl(this);
     }
 
+    @Override
     public boolean interrupt() {
         return hc.interrupt();
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerProxy.java
Patch:
@@ -72,6 +72,7 @@ public void threadFinished(){
         }
     }
 
+    @Override
     public boolean interrupt() {
         if (impl != null) {
             return impl.interrupt(); // Forward to sampler

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HC4TrustAllSSLSocketFactory.java
Patch:
@@ -39,6 +39,7 @@
 public class HC4TrustAllSSLSocketFactory extends SSLSocketFactory {
 
     private static final TrustStrategy TRUSTALL = new TrustStrategy(){
+        @Override
         public boolean isTrusted(X509Certificate[] chain, String authType) {
             return true;
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/util/SlowHttpClientSocketFactory.java
Patch:
@@ -45,16 +45,19 @@ public SlowHttpClientSocketFactory(final int cps) {
         CPS = cps;
     }
 
+    @Override
     public Socket createSocket(String host, int port, InetAddress clientHost,
             int clientPort) throws IOException, UnknownHostException {
         return new SlowSocket(CPS,host,port,clientHost,clientPort);
     }
 
+    @Override
     public Socket createSocket(String host, int port) throws IOException,
             UnknownHostException {
         return new SlowSocket(CPS,host,port);
     }
 
+    @Override
     public Socket createSocket(String host, int port, InetAddress localAddress, int localPort,
             HttpConnectionParams params)
     throws IOException, UnknownHostException, ConnectTimeoutException {

File: src/core/org/apache/jmeter/NewDriver.java
Patch:
@@ -90,6 +90,7 @@ public final class NewDriver {
                 new File(jmDir + File.separator + "lib" + File.separator + "junit")};// $NON-NLS-1$ $NON-NLS-2$
         for (int a = 0; a < libDirs.length; a++) {
             File[] libJars = libDirs[a].listFiles(new FilenameFilter() {
+                @Override
                 public boolean accept(File dir, String name) {// only accept jar files
                     return name.endsWith(".jar");// $NON-NLS-1$
                 }
@@ -125,7 +126,8 @@ public boolean accept(File dir, String name) {// only accept jar files
         System.setProperty(JAVA_CLASS_PATH, initial_classpath + classpath.toString());
         loader = AccessController.doPrivileged(
         		new java.security.PrivilegedAction<DynamicClassLoader>() {
-        	        public DynamicClassLoader run() {
+        	        @Override
+                    public DynamicClassLoader run() {
         	        	return new DynamicClassLoader(jars.toArray(new URL[jars.size()]));
         	        }
         	    }

File: src/core/org/apache/jmeter/assertions/gui/AbstractAssertionGui.java
Patch:
@@ -47,6 +47,7 @@ public abstract class AbstractAssertionGui extends AbstractScopedJMeterGuiCompon
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
+    @Override
     public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.ASSERTIONS });
     }

File: src/core/org/apache/jmeter/config/ConfigTestElement.java
Patch:
@@ -43,13 +43,15 @@ public void addTestElement(TestElement parm1) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void addConfigElement(ConfigElement config) {
         mergeIn((TestElement) config);
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean expectsModification() {
         return false;
     }

File: src/core/org/apache/jmeter/config/gui/AbstractConfigGui.java
Patch:
@@ -45,6 +45,7 @@ public abstract class AbstractConfigGui extends AbstractJMeterGuiComponent {
      *
      * @return a JPopupMenu appropriate for the component.
      */
+    @Override
     public JPopupMenu createPopupMenu() {
         return MenuFactory.getDefaultConfigElementMenu();
     }
@@ -58,6 +59,7 @@ public JPopupMenu createPopupMenu() {
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
+    @Override
     public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.CONFIG_ELEMENTS });
     }

File: src/core/org/apache/jmeter/config/gui/LoginConfigGui.java
Patch:
@@ -74,6 +74,7 @@ public LoginConfigGui(boolean displayName) {
         init();
     }
 
+    @Override
     public String getLabelResource() {
         return "login_config_element"; // $NON-NLS-1$
     }
@@ -95,13 +96,15 @@ public void configure(TestElement element) {
     }
 
     /* Implements JMeterGUIComponent.createTestElement() */
+    @Override
     public TestElement createTestElement() {
         ConfigTestElement element = new ConfigTestElement();
         modifyTestElement(element);
         return element;
     }
 
     /* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
+    @Override
     public void modifyTestElement(TestElement element) {
         configureTestElement(element);
         element.setProperty(new StringProperty(ConfigTestElement.USERNAME, username.getText()));

File: src/core/org/apache/jmeter/config/gui/RowDetailDialog.java
Patch:
@@ -99,6 +99,7 @@ protected JRootPane createRootPane() {
              */
             private static final long serialVersionUID = -8699034338969407625L;
 
+            @Override
             public void actionPerformed(ActionEvent actionEvent) { 
                 setVisible(false);
             } 
@@ -110,6 +111,7 @@ public void actionPerformed(ActionEvent actionEvent) {
              */
             private static final long serialVersionUID = -1529005452976176873L;
 
+            @Override
             public void actionPerformed(ActionEvent actionEvent) {
                 doUpdate(actionEvent);
                 setVisible(false);
@@ -175,6 +177,7 @@ private void init() {
      * Do search
      * @param e {@link ActionEvent}
      */
+    @Override
     public void actionPerformed(ActionEvent e) {
         String action = e.getActionCommand();
     	if(action.equals(CLOSE)) {

File: src/core/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -255,6 +255,7 @@ protected void notifyListeners() {
         }
     }
 
+    @Override
     public void sampleOccurred(SampleEvent se) {
         if (!isParent()) {
             // Check if we are still sampling our children
@@ -277,9 +278,11 @@ public void sampleOccurred(SampleEvent se) {
         }
     }
 
+    @Override
     public void sampleStarted(SampleEvent e) {
     }
 
+    @Override
     public void sampleStopped(SampleEvent e) {
     }
 

File: src/core/org/apache/jmeter/control/TransactionSampler.java
Patch:
@@ -80,6 +80,7 @@ public TransactionSampler(TransactionController controller, String name) {
     /**
      * One cannot sample the TransactionSampler directly.
      */
+    @Override
     public SampleResult sample(Entry e) {
         throw new RuntimeException("Cannot sample TransactionSampler directly");
         // It is the JMeterThread which knows how to sample a real sampler

File: src/core/org/apache/jmeter/control/gui/AbstractControllerGui.java
Patch:
@@ -44,6 +44,7 @@ public abstract class AbstractControllerGui extends AbstractJMeterGuiComponent {
      *
      * @return a JPopupMenu appropriate for the component.
      */
+    @Override
     public JPopupMenu createPopupMenu() {
         return MenuFactory.getDefaultControllerMenu();
     }
@@ -57,6 +58,7 @@ public JPopupMenu createPopupMenu() {
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
+    @Override
     public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.CONTROLLERS });
     }

File: src/core/org/apache/jmeter/control/gui/IfControllerPanel.java
Patch:
@@ -103,6 +103,7 @@ public void configure(TestElement element) {
     /**
      * Implements JMeterGUIComponent.createTestElement()
      */
+    @Override
     public TestElement createTestElement() {
         IfController controller = new IfController();
         modifyTestElement(controller);
@@ -112,6 +113,7 @@ public TestElement createTestElement() {
     /**
      * Implements JMeterGUIComponent.modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement controller) {
         configureTestElement(controller);
         if (controller instanceof IfController) {
@@ -132,6 +134,7 @@ public void clearGui() {
         evaluateAll.setSelected(false);
     }
 
+    @Override
     public String getLabelResource() {
         return "if_controller_title"; // $NON-NLS-1$
     }

File: src/core/org/apache/jmeter/control/gui/LogicControllerGui.java
Patch:
@@ -38,17 +38,20 @@ public LogicControllerGui() {
     }
 
     /* Implements JMeterGUIComponent.createTestElement() */
+    @Override
     public TestElement createTestElement() {
         GenericController lc = new GenericController();
         configureTestElement(lc);
         return lc;
     }
 
     /* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
+    @Override
     public void modifyTestElement(TestElement el) {
         configureTestElement(el);
     }
 
+    @Override
     public String getLabelResource() {
         return "logic_controller_title"; // $NON-NLS-1$
     }

File: src/core/org/apache/jmeter/control/gui/TestFragmentControllerGui.java
Patch:
@@ -43,6 +43,7 @@ public TestFragmentControllerGui() {
     /**
      * Implements JMeterGUIComponent.createTestElement()
      */
+    @Override
     public TestElement createTestElement() {
         TestFragmentController controller = new TestFragmentController();
         modifyTestElement(controller);
@@ -52,10 +53,12 @@ public TestElement createTestElement() {
     /**
      * Implements JMeterGUIComponent.modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement controller) {
         configureTestElement(controller);
     }
 
+    @Override
     public String getLabelResource() {
         return "test_fragment_title"; // $NON-NLS-1$
     }

File: src/core/org/apache/jmeter/control/gui/TransactionControllerGui.java
Patch:
@@ -45,6 +45,7 @@ public TransactionControllerGui() {
     }
 
     /* Implements JMeterGUIComponent.createTestElement() */
+    @Override
     public TestElement createTestElement() {
         TransactionController lc = new TransactionController();
         configureTestElement(lc);
@@ -59,6 +60,7 @@ public void configure(TestElement el) {
     }
 
     /* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
+    @Override
     public void modifyTestElement(TestElement el) {
         configureTestElement(el);
         ((TransactionController) el).setParent(parent.isSelected());
@@ -67,6 +69,7 @@ public void modifyTestElement(TestElement el) {
         tc.setIncludeTimers(includeTimers.isSelected());
     }
 
+    @Override
     public String getLabelResource() {
         return "transaction_controller_title"; // $NON-NLS-1$
     }

File: src/core/org/apache/jmeter/control/gui/WhileControllerGui.java
Patch:
@@ -71,6 +71,7 @@ public void configure(TestElement element) {
     /**
      * Implements JMeterGUIComponent.createTestElement()
      */
+    @Override
     public TestElement createTestElement() {
         WhileController controller = new WhileController();
         modifyTestElement(controller);
@@ -80,6 +81,7 @@ public TestElement createTestElement() {
     /**
      * Implements JMeterGUIComponent.modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement controller) {
         configureTestElement(controller);
         if (controller instanceof WhileController) {
@@ -100,6 +102,7 @@ public void clearGui() {
         theCondition.setText(""); // $NON-NLS-1$
     }
 
+    @Override
     public String getLabelResource() {
         return "while_controller_title"; // $NON-NLS-1$
     }

File: src/core/org/apache/jmeter/engine/ConvertListeners.java
Patch:
@@ -48,6 +48,7 @@ public class ConvertListeners implements HashTreeTraverser {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void addNode(Object node, HashTree subTree) {
         for (Object item : subTree.list()) {
             if (item instanceof AbstractThreadGroup) {
@@ -82,12 +83,14 @@ public void addNode(Object node, HashTree subTree) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void subtractNode() {
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public void processPath() {
     }
 

File: src/core/org/apache/jmeter/engine/PreCompiler.java
Patch:
@@ -59,6 +59,7 @@ public PreCompiler(boolean remote) {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void addNode(Object node, HashTree subTree) {
         if(isRemote && node instanceof ResultCollector)
         {
@@ -97,10 +98,12 @@ public void addNode(Object node, HashTree subTree) {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void subtractNode() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void processPath() {
     }
 }

File: src/core/org/apache/jmeter/engine/TreeCloner.java
Patch:
@@ -59,6 +59,7 @@ public TreeCloner(boolean honourNoThreadClone) {
      * @param node
      * @param subTree {@link HashTree}
      */
+    @Override
     public final void addNode(Object node, HashTree subTree) {
         node = addNodeToTree(node);
         addLast(node);
@@ -89,6 +90,7 @@ private final void addLast(Object node) {
         objects.addLast(node);
     }
 
+    @Override
     public void subtractNode() {
         objects.removeLast();
     }
@@ -97,6 +99,7 @@ public ListedHashTree getClonedTree() {
         return newTree;
     }
 
+    @Override
     public void processPath() {
     }
 

File: src/core/org/apache/jmeter/engine/TurnElementsOn.java
Patch:
@@ -31,6 +31,7 @@ public class TurnElementsOn implements HashTreeTraverser {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void addNode(Object node, HashTree subTree) {
         if (node instanceof TestElement && !(node instanceof TestPlan)) {
             ((TestElement) node).setRunningVersion(true);
@@ -41,12 +42,14 @@ public void addNode(Object node, HashTree subTree) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void subtractNode() {
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public void processPath() {
     }
 

File: src/core/org/apache/jmeter/engine/util/AbstractTransformer.java
Patch:
@@ -30,6 +30,7 @@ abstract class AbstractTransformer implements ValueTransformer {
     private Map<String, String> variables;
 
     /** {@inheritDoc} */
+    @Override
     public void setMasterFunction(CompoundVariable variable) {
         masterFunction = variable;
     }
@@ -43,6 +44,7 @@ public Map<String, String> getVariables() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void setVariables(Map<String, String> map) {
         variables = map;
     }

File: src/core/org/apache/jmeter/engine/util/ReplaceFunctionsWithStrings.java
Patch:
@@ -65,6 +65,7 @@ public ReplaceFunctionsWithStrings(CompoundVariable masterFunction, Map<String,
         this.regexMatch = regexMatch;
     }
 
+    @Override
     public JMeterProperty transformValue(JMeterProperty prop) throws InvalidVariableException {
         PatternMatcher pm = JMeterUtils.getMatcher();
         Pattern pattern = null;

File: src/core/org/apache/jmeter/engine/util/ReplaceStringWithFunctions.java
Patch:
@@ -34,6 +34,7 @@ public ReplaceStringWithFunctions(CompoundVariable masterFunction, Map<String, S
         setVariables(variables);
     }
 
+    @Override
     public JMeterProperty transformValue(JMeterProperty prop) throws InvalidVariableException {
         JMeterProperty newValue = prop;
         getMasterFunction().clear();

File: src/core/org/apache/jmeter/engine/util/UndoVariableReplacement.java
Patch:
@@ -35,6 +35,7 @@ public UndoVariableReplacement(CompoundVariable masterFunction, Map<String, Stri
         setVariables(variables);
     }
 
+    @Override
     public JMeterProperty transformValue(JMeterProperty prop) throws InvalidVariableException {
         String input = prop.getStringValue();
         for (Map.Entry<String, String> entry : getVariables().entrySet()) {

File: src/core/org/apache/jmeter/functions/AbstractFunction.java
Patch:
@@ -39,6 +39,7 @@ public abstract class AbstractFunction implements Function {
      * </b></p>
      * @see Function#execute(SampleResult, Sampler)
      */
+    @Override
     abstract public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException;
 
     public String execute() throws InvalidVariableException {
@@ -60,11 +61,13 @@ public String execute() throws InvalidVariableException {
      * Note: This is always called even if no parameters are provided
      * (versions of JMeter after 2.3.1)
      */
+    @Override
     abstract public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException;
 
     /**
      * @see Function#getReferenceKey()
      */
+    @Override
     abstract public String getReferenceKey();
 
     /**

File: src/core/org/apache/jmeter/gui/AbstractScopedJMeterGuiComponent.java
Patch:
@@ -50,6 +50,7 @@ public void clearGui(){
      *
      * @return a JPopupMenu appropriate for the component.
      */
+    @Override
     public JPopupMenu createPopupMenu() {
         return MenuFactory.getDefaultAssertionMenu();
     }

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -604,6 +604,7 @@ public void displayPopUp(Component invoker, MouseEvent e, JPopupMenu popup) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void localeChanged(LocaleChangeEvent event) {
         // FIrst make sure we save the content of the current GUI (since we
         // will flush it away):
@@ -698,6 +699,7 @@ public static void showMessage(final String message, final String title, final i
             return ;
         }
         SwingUtilities.invokeLater(new Runnable() {
+            @Override
             public void run() {
                 JOptionPane.showMessageDialog(null,message,title,type);
             }

File: src/core/org/apache/jmeter/gui/LoggerPanel.java
Patch:
@@ -74,12 +74,14 @@ private void init() {
     /* (non-Javadoc)
      * @see org.apache.log.LogTarget#processEvent(org.apache.log.LogEvent)
      */
+    @Override
     public void processEvent(final LogEvent logEvent) {
         if(!GuiPackage.getInstance().getMenuItemLoggerPanel().getModel().isSelected()) {
             return;
         }
         
         SwingUtilities.invokeLater(new Runnable() {
+            @Override
             public void run() {
                 synchronized (textArea) {
                     textArea.append(format.format(logEvent));

File: src/core/org/apache/jmeter/gui/SavePropertyDialog.java
Patch:
@@ -124,12 +124,14 @@ private void initDialog() {
         JButton exit = new JButton(JMeterUtils.getResString("done")); // $NON-NLS-1$
         this.getContentPane().add(exit, BorderLayout.SOUTH);
         exit.addActionListener(new ActionListener() {
+            @Override
             public void actionPerformed(ActionEvent e) {
                 dispose();
             }
         });
     }
 
+    @Override
     public void actionPerformed(ActionEvent e) {
         String action = e.getActionCommand();
         Functor f = functors.get(action);

File: src/core/org/apache/jmeter/gui/action/AboutCommand.java
Patch:
@@ -63,6 +63,7 @@ public class AboutCommand implements Command {
      * dialog box. The Dialog Box is NOT modal, because those should be avoided
      * if at all possible.
      */
+    @Override
     public void doAction(ActionEvent e) {
         if (e.getActionCommand().equals(ActionNames.ABOUT)) {
             this.about();
@@ -72,6 +73,7 @@ public void doAction(ActionEvent e) {
     /**
      * Provide the list of Action names that are available in this command.
      */
+    @Override
     public Set<String> getActionNames() {
         return AboutCommand.commandSet;
     }

File: src/core/org/apache/jmeter/gui/action/AbstractAction.java
Patch:
@@ -34,12 +34,14 @@ public abstract class AbstractAction implements Command {
     /**
      * @see Command#doAction(ActionEvent)
      */
+    @Override
     public void doAction(ActionEvent e) {
     }
 
     /**
      * @see Command#getActionNames()
      */
+    @Override
     abstract public Set<String> getActionNames();
 
     /**

File: src/core/org/apache/jmeter/gui/action/ActionRouter.java
Patch:
@@ -55,8 +55,10 @@ public final class ActionRouter implements ActionListener {
     private ActionRouter() {
     }
 
+    @Override
     public void actionPerformed(final ActionEvent e) {
         SwingUtilities.invokeLater(new Runnable() {
+            @Override
             public void run() {
                 performAction(e);
             }

File: src/core/org/apache/jmeter/gui/action/AddParent.java
Patch:
@@ -44,6 +44,7 @@ public class AddParent implements Command {
     public AddParent() {
     }
 
+    @Override
     public void doAction(ActionEvent e) {
         String name = ((Component) e.getSource()).getName();
         GuiPackage guiPackage = GuiPackage.getInstance();
@@ -57,6 +58,7 @@ public void doAction(ActionEvent e) {
 
     }
 
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }

File: src/core/org/apache/jmeter/gui/action/AddToTree.java
Patch:
@@ -54,13 +54,15 @@ public AddToTree() {
      *
      * @return the ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commandSet;
     }
 
     /**
      * Adds the specified class to the current node of the tree.
      */
+    @Override
     public void doAction(ActionEvent e) {
         GuiPackage guiPackage = GuiPackage.getInstance();
         try {

File: src/core/org/apache/jmeter/gui/action/Analyze.java
Patch:
@@ -39,10 +39,12 @@ public class Analyze implements Command {
     public Analyze() {
     }
 
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
 
+    @Override
     public void doAction(ActionEvent e) {
         FileReporter analyzer = new FileReporter();
         final JFileChooser chooser = FileDialoger.promptToOpenFile(new String[] { ".jtl" }); //$NON-NLS-1$

File: src/core/org/apache/jmeter/gui/action/ChangeLanguage.java
Patch:
@@ -44,6 +44,7 @@ public class ChangeLanguage implements Command {
     /**
      * @see org.apache.jmeter.gui.action.Command#doAction(ActionEvent)
      */
+    @Override
     public void doAction(ActionEvent e) {
         String locale = ((Component) e.getSource()).getName();
         Locale loc;
@@ -65,6 +66,7 @@ public void doAction(ActionEvent e) {
     /**
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }

File: src/core/org/apache/jmeter/gui/action/ChangeParent.java
Patch:
@@ -47,6 +47,7 @@ public class ChangeParent implements Command {
     public ChangeParent() {
     }
 
+    @Override
     public void doAction(ActionEvent e) {
         String name = ((Component) e.getSource()).getName();
         GuiPackage guiPackage = GuiPackage.getInstance();
@@ -66,6 +67,7 @@ public void doAction(ActionEvent e) {
 
     }
 
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }

File: src/core/org/apache/jmeter/gui/action/Clear.java
Patch:
@@ -49,10 +49,12 @@ public class Clear implements Command {
     public Clear() {
     }
 
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
 
+    @Override
     public void doAction(ActionEvent e) {
         GuiPackage guiPackage = GuiPackage.getInstance();
         final String actionCommand = e.getActionCommand();

File: src/core/org/apache/jmeter/gui/action/Close.java
Patch:
@@ -53,6 +53,7 @@ public Close() {
      *
      * @return the ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
@@ -63,6 +64,7 @@ public Set<String> getActionNames() {
      * @param e
      *            the generic UI action event
      */
+    @Override
     public void doAction(ActionEvent e) {
         performAction(e);
     }

File: src/core/org/apache/jmeter/gui/action/CollapseExpand.java
Patch:
@@ -50,6 +50,7 @@ public CollapseExpand() {
      *
      * @return the ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
@@ -60,6 +61,7 @@ public Set<String> getActionNames() {
      * @param e
      *            the generic UI action event
      */
+    @Override
     public void doAction(ActionEvent e) {
         boolean collapse=ActionNames.COLLAPSE_ALL.equals(e.getActionCommand());
         GuiPackage guiInstance = GuiPackage.getInstance();

File: src/core/org/apache/jmeter/gui/action/EditCommand.java
Patch:
@@ -39,6 +39,7 @@ public class EditCommand implements Command {
     public EditCommand() {
     }
 
+    @Override
     public void doAction(ActionEvent e) {
         GuiPackage guiPackage = GuiPackage.getInstance();
         JMeterGUIComponent currentGui = guiPackage.getCurrentGui();
@@ -56,6 +57,7 @@ public void doAction(ActionEvent e) {
         }
     }
 
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }

File: src/core/org/apache/jmeter/gui/action/EnableComponent.java
Patch:
@@ -44,6 +44,7 @@ public class EnableComponent implements Command {
     /**
      * @see org.apache.jmeter.gui.action.Command#doAction(ActionEvent)
      */
+    @Override
     public void doAction(ActionEvent e) {
         JMeterTreeNode[] nodes = GuiPackage.getInstance().getTreeListener().getSelectedNodes();
 
@@ -79,6 +80,7 @@ private void toggleComponents(JMeterTreeNode[] nodes) {
     /**
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }

File: src/core/org/apache/jmeter/gui/action/ExitCommand.java
Patch:
@@ -46,6 +46,7 @@ public ExitCommand() {
      *
      * @return The ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
@@ -56,6 +57,7 @@ public Set<String> getActionNames() {
      * @param e
      *            Description of Parameter
      */
+    @Override
     public void doAction(ActionEvent e) {
         ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.CHECK_DIRTY));
         if (GuiPackage.getInstance().isDirty()) {

File: src/core/org/apache/jmeter/gui/action/Help.java
Patch:
@@ -68,6 +68,7 @@ public class Help implements Command {
     /**
      * @see org.apache.jmeter.gui.action.Command#doAction(ActionEvent)
      */
+    @Override
     public void doAction(ActionEvent e) {
         if (helpWindow == null) {
             helpWindow = new EscapeDialog(new Frame(),// independent frame to
@@ -105,6 +106,7 @@ public void doAction(ActionEvent e) {
     /**
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -69,10 +69,12 @@ public Load() {
         super();
     }
 
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
 
+    @Override
     public void doAction(ActionEvent e) {
         JFileChooser chooser = FileDialoger.promptToOpenFile(new String[] { ".jmx" }); //$NON-NLS-1$
         if (chooser == null) {

File: src/core/org/apache/jmeter/gui/action/LoggerPanelEnableDisable.java
Patch:
@@ -50,6 +50,7 @@ public LoggerPanelEnableDisable() {
      *
      * @return the ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
@@ -60,6 +61,7 @@ public Set<String> getActionNames() {
      * @param e
      *            the generic UI action event
      */
+    @Override
     public void doAction(ActionEvent e) {
         GuiPackage guiInstance = GuiPackage.getInstance();
         JSplitPane splitPane = ((JSplitPane)guiInstance.getLoggerPanel().getParent());

File: src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java
Patch:
@@ -132,6 +132,7 @@ private static String checkLafName(String laf){
     public LookAndFeelCommand() {
     }
 
+    @Override
     public void doAction(ActionEvent ev) {
         try {
             String className = ev.getActionCommand().substring(ActionNames.LAF_PREFIX.length()).replace('/', '.');
@@ -149,6 +150,7 @@ public void doAction(ActionEvent ev) {
         }
     }
 
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }

File: src/core/org/apache/jmeter/gui/action/RawTextSearcher.java
Patch:
@@ -48,7 +48,8 @@ public RawTextSearcher(boolean caseSensitive, String textToSearch) {
 	/**
 	 * {@inheritDoc}
 	 */
-	public boolean search(List<String> textTokens) {
+	@Override
+    public boolean search(List<String> textTokens) {
 		boolean result = false;
 		for (String searchableToken : textTokens) {
 			if(!StringUtils.isEmpty(searchableToken)) {

File: src/core/org/apache/jmeter/gui/action/RegexpSearcher.java
Patch:
@@ -52,7 +52,8 @@ public RegexpSearcher(boolean caseSensitive, String regexp) {
 	/**
 	 * {@inheritDoc}
 	 */
-	public boolean search(List<String> textTokens) {
+	@Override
+    public boolean search(List<String> textTokens) {
 		for (String searchableToken : textTokens) {
 			if(!StringUtils.isEmpty(searchableToken)) {
 				Matcher matcher = null; 

File: src/core/org/apache/jmeter/gui/action/Remove.java
Patch:
@@ -55,10 +55,12 @@ public Remove() {
      *
      * @return the ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
 
+    @Override
     public void doAction(ActionEvent e) {
         
         int isConfirm = SKIP_CONFIRM ? JOptionPane.YES_OPTION : 

File: src/core/org/apache/jmeter/gui/action/RevertProject.java
Patch:
@@ -42,10 +42,12 @@ public RevertProject() {
         super();
     }
 
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
 
+    @Override
     public void doAction(ActionEvent e) {
         // Get the file name of the current project
         String projectFile = GuiPackage.getInstance().getTestPlanFile();

File: src/core/org/apache/jmeter/gui/action/SSLManagerCommand.java
Patch:
@@ -67,6 +67,7 @@ public class SSLManagerCommand implements Command {
      * dialog box. The Dialog Box is NOT modal, because those should be avoided
      * if at all possible.
      */
+    @Override
     public void doAction(ActionEvent e) {
         if (e.getActionCommand().equals(ActionNames.SSL_MANAGER)) {
             this.sslManager();
@@ -76,6 +77,7 @@ public void doAction(ActionEvent e) {
     /**
      * Provide the list of Action names that are available in this command.
      */
+    @Override
     public Set<String> getActionNames() {
         return SSLManagerCommand.commandSet;
     }

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -72,10 +72,12 @@ public Save() {
      *
      * @return the ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
 
+    @Override
     public void doAction(ActionEvent e) throws IllegalUserActionException {
         HashTree subTree = null;
         boolean fullSave = false; // are we saving the whole tree?

File: src/core/org/apache/jmeter/gui/action/SaveGraphics.java
Patch:
@@ -66,10 +66,12 @@ public SaveGraphics() {
      *
      * @return the ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
 
+    @Override
     public void doAction(ActionEvent e) throws IllegalUserActionException {
         if (!commands.contains(e.getActionCommand())) {
             throw new IllegalUserActionException("Invalid user command:" + e.getActionCommand());

File: src/core/org/apache/jmeter/gui/action/SearchTreeDialog.java
Patch:
@@ -94,6 +94,7 @@ protected JRootPane createRootPane() {
              */
             private static final long serialVersionUID = -6543764044868772971L;
 
+            @Override
             public void actionPerformed(ActionEvent actionEvent) { 
                 setVisible(false);
             } 
@@ -105,6 +106,7 @@ public void actionPerformed(ActionEvent actionEvent) {
              */
             private static final long serialVersionUID = -3661361497864527363L;
 
+            @Override
             public void actionPerformed(ActionEvent actionEvent) { 
                 doSearch(actionEvent);
             } 
@@ -161,6 +163,7 @@ private void init() {
      * Do search
      * @param e {@link ActionEvent}
      */
+    @Override
     public void actionPerformed(ActionEvent e) {
     	if(e.getSource()==cancelButton) {
     	    searchTF.requestFocusInWindow();

File: src/core/org/apache/jmeter/gui/action/StopStoppables.java
Patch:
@@ -56,6 +56,7 @@ public Set<String> getActionNames() {
     /* (non-Javadoc)
      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
      */
+    @Override
     public void actionPerformed(ActionEvent e) {
         
     }

File: src/core/org/apache/jmeter/gui/action/ToolBar.java
Patch:
@@ -47,6 +47,7 @@ public ToolBar() {
      *
      * @return the ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
@@ -57,6 +58,7 @@ public Set<String> getActionNames() {
      * @param e
      *            the generic UI action event
      */
+    @Override
     public void doAction(ActionEvent e) {
         if (ActionNames.TOOLBAR.equals(e.getActionCommand())) {
             GuiPackage guiInstance = GuiPackage.getInstance();

File: src/core/org/apache/jmeter/gui/action/What.java
Patch:
@@ -56,6 +56,7 @@ public class What implements Command {
     }
 
 
+    @Override
     public void doAction(ActionEvent e) throws IllegalUserActionException {
         JMeterTreeNode node= GuiPackage.getInstance().getTreeListener().getCurrentNode();
         TestElement te = (TestElement)node.getUserObject();
@@ -81,6 +82,7 @@ public void doAction(ActionEvent e) throws IllegalUserActionException {
     /**
      * Provide the list of Action names that are available in this command.
      */
+    @Override
     public Set<String> getActionNames() {
         return commandSet;
     }

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -175,16 +175,19 @@ public String getDocAnchor() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void setName(String name) {
         ((TestElement) getUserObject()).setName(name);
     }
 
     /** {@inheritDoc} */
+    @Override
     public String getName() {
         return ((TestElement) getUserObject()).getName();
     }
 
     /** {@inheritDoc} */
+    @Override
     public void nameChanged() {
         if (treeModel != null) { // may be null during startup
             treeModel.nodeChanged(this);

File: src/core/org/apache/jmeter/gui/util/EscapeDialog.java
Patch:
@@ -51,6 +51,7 @@ protected JRootPane createRootPane() {
              */
             private static final long serialVersionUID = 2208129319916921772L;
 
+            @Override
             public void actionPerformed(ActionEvent e) {
                 setVisible(false);
             }

File: src/core/org/apache/jmeter/gui/util/FileListPanel.java
Patch:
@@ -191,6 +191,7 @@ protected void initializeTableModel() {
                 new Class[] { String.class });
     }
 
+    @Override
     public void actionPerformed(ActionEvent e) {
         if (e.getSource() == clear) {
             this.clearFiles();

File: src/core/org/apache/jmeter/gui/util/FilePanelEntry.java
Patch:
@@ -131,6 +131,7 @@ private void fireFileChanged() {
         }
     }
 
+    @Override
     public void actionPerformed(ActionEvent e) {
         if (e.getActionCommand().equals(ACTION_BROWSE)) {
             JFileChooser chooser;

File: src/core/org/apache/jmeter/gui/util/FocusRequester.java
Patch:
@@ -44,6 +44,7 @@ public FocusRequester(Component comp) {
         }
     }
 
+    @Override
     public void run() {
         comp.requestFocus();
     }

File: src/core/org/apache/jmeter/gui/util/JDateField.java
Patch:
@@ -187,9 +187,11 @@ class FocusClass implements FocusListener {
         FocusClass() {
         }
 
+        @Override
         public void focusGained(FocusEvent e) {
         }
 
+        @Override
         public void focusLost(FocusEvent e) {
             try {
                 dateFormat.parse(getText());

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -575,6 +575,7 @@ private void getRemoteItems() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void localeChanged(LocaleChangeEvent event) {
         updateMenuElement(fileMenu);
         updateMenuElement(editMenu);

File: src/core/org/apache/jmeter/gui/util/JMeterToolBar.java
Patch:
@@ -174,6 +174,7 @@ private static List<IconToolbarBean> getIconMappings() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void localeChanged(LocaleChangeEvent event) {
         this.removeAll();
         setupToolbarContent(this);

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -678,6 +678,7 @@ private static class MenuInfoComparator implements Comparator<MenuInfo>, Seriali
         MenuInfoComparator(boolean caseBlind){
             this.caseBlind = caseBlind;
         }
+        @Override
         public int compare(MenuInfo o1, MenuInfo o2) {
             String lab1 = o1.getLabel();
             String lab2 = o2.getLabel();

File: src/core/org/apache/jmeter/gui/util/TextAreaCellRenderer.java
Patch:
@@ -28,6 +28,7 @@ public class TextAreaCellRenderer implements TableCellRenderer {
 
     private JTextArea rend = new JTextArea("");
 
+    @Override
     public Component getTableCellRendererComponent(JTable table, Object value,
             boolean isSelected, boolean hasFocus,
             int row, int column) {

File: src/core/org/apache/jmeter/gui/util/TextBoxDialoger.java
Patch:
@@ -150,6 +150,7 @@ private void closeDialog() {
         dialog.setVisible(false);
     }
 
+    @Override
     public void actionPerformed(ActionEvent e) {
         String command = e.getActionCommand();
 

File: src/core/org/apache/jmeter/processor/gui/AbstractPostProcessorGui.java
Patch:
@@ -37,6 +37,7 @@ public abstract class AbstractPostProcessorGui extends AbstractScopedJMeterGuiCo
 
     private static final long serialVersionUID = 240L;
 
+    @Override
     public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.POST_PROCESSORS });
     }

File: src/core/org/apache/jmeter/processor/gui/AbstractPreProcessorGui.java
Patch:
@@ -30,10 +30,12 @@ public abstract class AbstractPreProcessorGui extends AbstractJMeterGuiComponent
 
     private static final long serialVersionUID = 240L;
 
+    @Override
     public JPopupMenu createPopupMenu() {
         return MenuFactory.getDefaultExtractorMenu();
     }
 
+    @Override
     public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.PRE_PROCESSORS });
     }

File: src/core/org/apache/jmeter/reporters/ResultSaver.java
Patch:
@@ -135,6 +135,7 @@ public void clear() {
      *
      * @see org.apache.jmeter.samplers.SampleListener#sampleOccurred(org.apache.jmeter.samplers.SampleEvent)
      */
+    @Override
     public void sampleOccurred(SampleEvent e) {
       processSample(e.getResult(), new Counter());
    }
@@ -234,13 +235,15 @@ private String makeFileName(String contentType, boolean skipAutoNumber, boolean
     /**
      * {@inheritDoc}
      */
+    @Override
     public void sampleStarted(SampleEvent e) {
         // not used
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public void sampleStopped(SampleEvent e) {
         // not used
     }

File: src/core/org/apache/jmeter/reporters/gui/SummariserGui.java
Patch:
@@ -37,6 +37,7 @@ public SummariserGui() {
         init();
     }
 
+    @Override
     public String getLabelResource() {
         return "summariser_title"; //$NON-NLS-1$
     }
@@ -49,6 +50,7 @@ public void configure(TestElement el) {
     /**
      * @see org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()
      */
+    @Override
     public TestElement createTestElement() {
         Summariser summariser = new Summariser();
         modifyTestElement(summariser);
@@ -60,6 +62,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement summariser) {
         super.configureTestElement(summariser);
     }

File: src/core/org/apache/jmeter/samplers/AbstractSampleSender.java
Patch:
@@ -44,7 +44,8 @@ public AbstractSampleSender() {
 		super();
 	}
 
-	public void testEnded() {
+	@Override
+    public void testEnded() {
         // Not used
     }
 

File: src/core/org/apache/jmeter/samplers/AbstractSampler.java
Patch:
@@ -28,6 +28,7 @@ public abstract class AbstractSampler extends AbstractTestElement implements Sam
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean applies(ConfigTestElement configElement) {
         return true;
     }

File: src/core/org/apache/jmeter/samplers/AsynchSampleSender.java
Patch:
@@ -90,6 +90,7 @@ private int getCapacity() {
     			clientConfiguredCapacity : serverConfiguredCapacity;
     }
     
+    @Override
     public void testEnded(String host) {
         log.debug("Test Ended on " + host);
         try {
@@ -103,6 +104,7 @@ public void testEnded(String host) {
         }
     }
 
+    @Override
     public void sampleOccurred(SampleEvent e) {
         try {
             if (!queue.offer(e)){ // we failed to add the element first time

File: src/core/org/apache/jmeter/samplers/BatchSampleSender.java
Patch:
@@ -117,6 +117,7 @@ protected List<SampleEvent> getSampleStore() {
      * @param host
      *            the host that the test has ended on.
      */
+    @Override
     public void testEnded(String host) {
         log.info("Test Ended on " + host);
         try {
@@ -140,6 +141,7 @@ public void testEnded(String host) {
      * @param e
      *            a Sample Event
      */
+    @Override
     public void sampleOccurred(SampleEvent e) {
         synchronized (sampleStore) {
             sampleStore.add(e);

File: src/core/org/apache/jmeter/samplers/DataStrippingSampleSender.java
Patch:
@@ -62,11 +62,13 @@ public DataStrippingSampleSender(){
         log.info("Using DataStrippingSampleSender for this run");
     }
 
+    @Override
     public void testEnded(String host) {
         log.info("Test Ended on " + host);
         if(decoratedSender != null) decoratedSender.testEnded(host);
     }
 
+    @Override
     public void sampleOccurred(SampleEvent event) {
         //Strip the response data before writing, but only for a successful request.
         SampleResult result = event.getResult();

File: src/core/org/apache/jmeter/samplers/HoldSampleSender.java
Patch:
@@ -54,6 +54,7 @@ public HoldSampleSender(){
         log.info("Using HoldSampleSender for this test run"); // client        
     }
 
+    @Override
     public void testEnded(String host) {
         log.info("Test Ended on " + host);
         try {
@@ -74,6 +75,7 @@ public void testEnded(String host) {
 
     }
 
+    @Override
     public void sampleOccurred(SampleEvent e) {
         synchronized (sampleStore) {
             sampleStore.add(e);

File: src/core/org/apache/jmeter/samplers/RemoteSampleListenerWrapper.java
Patch:
@@ -45,6 +45,7 @@ public RemoteSampleListenerWrapper(RemoteSampleListener l) {
     public RemoteSampleListenerWrapper() {
     }
 
+    @Override
     public void sampleOccurred(SampleEvent e) {
         try {
             listener.sampleOccurred(e);
@@ -53,6 +54,7 @@ public void sampleOccurred(SampleEvent e) {
         }
     }
 
+    @Override
     public void sampleStarted(SampleEvent e) {
         try {
             listener.sampleStarted(e);
@@ -61,6 +63,7 @@ public void sampleStarted(SampleEvent e) {
         }
     }
 
+    @Override
     public void sampleStopped(SampleEvent e) {
         try {
             listener.sampleStopped(e);

File: src/core/org/apache/jmeter/samplers/StandardSampleSender.java
Patch:
@@ -51,6 +51,7 @@ public StandardSampleSender(){
         log.info("Using StandardSampleSender for this test run");        
     }
 
+    @Override
     public void testEnded(String host) {
         log.info("Test Ended on " + host);
         try {
@@ -60,6 +61,7 @@ public void testEnded(String host) {
         }
     }
 
+    @Override
     public void sampleOccurred(SampleEvent e) {
         try {
             listener.sampleOccurred(e);

File: src/core/org/apache/jmeter/samplers/StatisticalSampleSender.java
Patch:
@@ -120,6 +120,7 @@ public StatisticalSampleSender(){
      *
      * @param host the hostname that the test has ended on.
      */
+    @Override
     public void testEnded(String host) {
         log.info("Test Ended on " + host);
         try {
@@ -141,6 +142,7 @@ public void testEnded(String host) {
      *
      * @param e a Sample Event
      */
+    @Override
     public void sampleOccurred(SampleEvent e) {
     	synchronized (sampleStore) {
             // Locate the statistical sample colector

File: src/core/org/apache/jmeter/samplers/gui/AbstractSamplerGui.java
Patch:
@@ -44,6 +44,7 @@ public abstract class AbstractSamplerGui extends AbstractJMeterGuiComponent {
      *
      * @return a JPopupMenu appropriate for the component.
      */
+    @Override
     public JPopupMenu createPopupMenu() {
         return MenuFactory.getDefaultSamplerMenu();
     }
@@ -57,6 +58,7 @@ public JPopupMenu createPopupMenu() {
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
+    @Override
     public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.SAMPLERS });
     }

File: src/core/org/apache/jmeter/save/ScriptWrapperConverter.java
Patch:
@@ -57,13 +57,15 @@ public ScriptWrapperConverter(Mapper classMapper) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass is not typed
         return arg0.equals(ScriptWrapper.class);
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public void marshal(Object arg0, HierarchicalStreamWriter writer, MarshallingContext context) {
         ScriptWrapper wrap = (ScriptWrapper) arg0;
         String version = SaveService.getVERSION();
@@ -79,6 +81,7 @@ public void marshal(Object arg0, HierarchicalStreamWriter writer, MarshallingCon
     /**
      * {@inheritDoc}
      */
+    @Override
     public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
         ScriptWrapper wrap = new ScriptWrapper();
         wrap.version = reader.getAttribute(ATT_VERSION);

File: src/core/org/apache/jmeter/save/converters/BooleanPropertyConverter.java
Patch:
@@ -37,11 +37,13 @@ public static String getVersion() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) {// superclass does not use types
         return arg0.equals(BooleanProperty.class);
     }
 
     /** {@inheritDoc} */
+    @Override
     public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext arg2) {
         BooleanProperty prop = (BooleanProperty) obj;
         writer.addAttribute(ConversionHelp.ATT_NAME, ConversionHelp.encode(prop.getName()));
@@ -50,6 +52,7 @@ public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingCont
     }
 
     /** {@inheritDoc} */
+    @Override
     public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
         final String name = ConversionHelp.getPropertyName(reader, context);
         if (name == null) {

File: src/core/org/apache/jmeter/save/converters/IntegerPropertyConverter.java
Patch:
@@ -37,18 +37,21 @@ public static String getVersion() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return arg0.equals(IntegerProperty.class);
     }
 
     /** {@inheritDoc} */
+    @Override
     public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext arg2) {
         IntegerProperty prop = (IntegerProperty) obj;
         writer.addAttribute(ConversionHelp.ATT_NAME, ConversionHelp.encode(prop.getName()));
         writer.setValue(prop.getStringValue());
     }
 
     /** {@inheritDoc} */
+    @Override
     public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
         final String name = ConversionHelp.getPropertyName(reader, context);
         if (name == null) {

File: src/core/org/apache/jmeter/save/converters/LongPropertyConverter.java
Patch:
@@ -37,18 +37,21 @@ public static String getVersion() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return arg0.equals(LongProperty.class);
     }
 
     /** {@inheritDoc} */
+    @Override
     public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext arg2) {
         LongProperty prop = (LongProperty) obj;
         writer.addAttribute(ConversionHelp.ATT_NAME, ConversionHelp.encode(prop.getName()));
         writer.setValue(prop.getStringValue());
     }
 
     /** {@inheritDoc} */
+    @Override
     public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
         final String name = ConversionHelp.getPropertyName(reader, context);
         if (name == null) {

File: src/core/org/apache/jmeter/save/converters/SampleEventConverter.java
Patch:
@@ -39,12 +39,14 @@ public static String getVersion() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return SampleEvent.class.equals(arg0);
     }
 
     /** {@inheritDoc} */
     // TODO save hostname; save sample type (plain or http)
+    @Override
     public void marshal(Object source, HierarchicalStreamWriter writer,
             MarshallingContext context) {
         SampleEvent evt = (SampleEvent) source;
@@ -54,6 +56,7 @@ public void marshal(Object source, HierarchicalStreamWriter writer,
 
     /** {@inheritDoc} */
     // TODO does not work yet; need to determine the sample type
+    @Override
     public Object unmarshal(HierarchicalStreamReader reader,
             UnmarshallingContext context) {
         SampleEvent evt = new SampleEvent();

File: src/core/org/apache/jmeter/save/converters/StringPropertyConverter.java
Patch:
@@ -37,18 +37,21 @@ public static String getVersion() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return StringProperty.class.equals(arg0);
     }
 
     /** {@inheritDoc} */
+    @Override
     public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext arg2) {
         StringProperty prop = (StringProperty) obj;
         writer.addAttribute(ConversionHelp.ATT_NAME, ConversionHelp.encode(prop.getName()));
         writer.setValue(ConversionHelp.encode(prop.getStringValue()));
     }
 
     /** {@inheritDoc} */
+    @Override
     public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
         final String name = ConversionHelp.getPropertyName(reader, context);
         if (name == null) {

File: src/core/org/apache/jmeter/swing/HtmlPane.java
Patch:
@@ -35,6 +35,7 @@ public class HtmlPane extends JTextPane {
 
     public HtmlPane() {
         this.addHyperlinkListener(new HyperlinkListener() {
+            @Override
             public void hyperlinkUpdate(HyperlinkEvent e) {
                 if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                     String ref = e.getURL().getRef();

File: src/core/org/apache/jmeter/testbeans/gui/ComboStringEditor.java
Patch:
@@ -163,6 +163,7 @@ public void setAsText(String value) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void itemStateChanged(ItemEvent e) {
         if (e.getStateChange() == ItemEvent.SELECTED) {
             if (e.getItem() == EDIT) {

File: src/core/org/apache/jmeter/testbeans/gui/FieldStringEditor.java
Patch:
@@ -113,19 +113,22 @@ public void firePropertyChange() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void actionPerformed(ActionEvent e) {
         firePropertyChange();
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public void focusGained(FocusEvent e) {
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public void focusLost(FocusEvent e) {
         firePropertyChange();
     }

File: src/core/org/apache/jmeter/testbeans/gui/PasswordEditor.java
Patch:
@@ -109,19 +109,22 @@ public void firePropertyChange() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void actionPerformed(ActionEvent e) {
         firePropertyChange();
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public void focusGained(FocusEvent e) {
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public void focusLost(FocusEvent e) {
         firePropertyChange();
     }

File: src/core/org/apache/jmeter/testbeans/gui/TextAreaEditor.java
Patch:
@@ -37,10 +37,12 @@ public class TextAreaEditor extends PropertyEditorSupport implements FocusListen
     private JScrollPane scroller;
 
     /** {@inheritDoc} */
+    @Override
     public void focusGained(FocusEvent e) {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void focusLost(FocusEvent e) {
         firePropertyChange();
     }

File: src/core/org/apache/jmeter/testbeans/gui/WrapperEditor.java
Patch:
@@ -426,6 +426,7 @@ public void setAsText(String text) throws IllegalArgumentException {
         guiEditor.setValue(value);
     }
 
+    @Override
     public void propertyChange(PropertyChangeEvent event) {
         String text = fixGetAsTextBug(guiEditor.getAsText());
         if (isValidValue(text)) {

File: src/core/org/apache/jmeter/testelement/property/DoubleProperty.java
Patch:
@@ -61,13 +61,15 @@ protected void setNumberValue(String n) throws NumberFormatException {
     /**
      * {@inheritDoc}
      */
+    @Override
     public String getStringValue() {
         return Double.toString(value);
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public Object getObjectValue() {
         return Double.valueOf(value);
     }
@@ -134,6 +136,7 @@ public void setRunningVersion(boolean runningVersion) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void recoverRunningVersion(TestElement owner) {
         value = savedValue;
     }

File: src/core/org/apache/jmeter/testelement/property/FloatProperty.java
Patch:
@@ -50,6 +50,7 @@ public void setRunningVersion(boolean runningVersion) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void recoverRunningVersion(TestElement owner) {
         value = savedValue;
     }
@@ -77,13 +78,15 @@ protected void setNumberValue(String n) throws NumberFormatException {
     /**
      * {@inheritDoc}
      */
+    @Override
     public String getStringValue() {
         return Float.toString(value);
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public Object getObjectValue() {
         return Float.valueOf(value);
     }

File: src/core/org/apache/jmeter/testelement/property/IntegerProperty.java
Patch:
@@ -47,6 +47,7 @@ public void setRunningVersion(boolean runningVersion) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void recoverRunningVersion(TestElement owner) {
         value = savedValue;
     }
@@ -82,13 +83,15 @@ protected void setNumberValue(String n) throws NumberFormatException {
     /**
      * @see JMeterProperty#getStringValue()
      */
+    @Override
     public String getStringValue() {
         return Integer.toString(value);
     }
 
     /**
      * @see JMeterProperty#getObjectValue()
      */
+    @Override
     public Object getObjectValue() {
         return Integer.valueOf(value);
     }

File: src/core/org/apache/jmeter/testelement/property/LongProperty.java
Patch:
@@ -51,6 +51,7 @@ public void setRunningVersion(boolean runningVersion) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void recoverRunningVersion(TestElement owner) {
         value = savedValue;
     }
@@ -78,13 +79,15 @@ protected void setNumberValue(String n) throws NumberFormatException {
     /**
      * @see JMeterProperty#getStringValue()
      */
+    @Override
     public String getStringValue() {
         return Long.toString(value);
     }
 
     /**
      * @see JMeterProperty#getObjectValue()
      */
+    @Override
     public Object getObjectValue() {
         return Long.valueOf(value);
     }

File: src/core/org/apache/jmeter/testelement/property/NumberProperty.java
Patch:
@@ -42,6 +42,7 @@ public NumberProperty(String name) {
      */
     protected abstract void setNumberValue(String n) throws NumberFormatException;
 
+    @Override
     public void setObjectValue(Object v) {
         if (v instanceof Number) {
             setNumberValue((Number) v);

File: src/core/org/apache/jmeter/testelement/property/PropertyIteratorImpl.java
Patch:
@@ -30,16 +30,19 @@ public PropertyIteratorImpl(Collection<JMeterProperty> value) {
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean hasNext() {
         return iter.hasNext();
     }
 
     /** {@inheritDoc} */
+    @Override
     public JMeterProperty next() {
         return iter.next();
     }
 
     /** {@inheritDoc} */
+    @Override
     public void remove() {
         iter.remove();
     }

File: src/core/org/apache/jmeter/threads/FindTestElementsUpToRootTraverser.java
Patch:
@@ -55,6 +55,7 @@ public FindTestElementsUpToRootTraverser(Object nodeToFind) {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void addNode(Object node, HashTree subTree) {
         if(stopRecording) {
             return;
@@ -66,6 +67,7 @@ public void addNode(Object node, HashTree subTree) {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void subtractNode() {
         if(stopRecording) {
             return;
@@ -77,6 +79,7 @@ public void subtractNode() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void processPath() {
         //NOOP
     }

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -135,11 +135,13 @@ public void done(SamplePackage pack) {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void addNode(Object node, HashTree subTree) {
         stack.addLast((TestElement) node);
     }
 
     /** {@inheritDoc} */
+    @Override
     public void subtractNode() {
         LOG.debug("Subtracting node, stack size = " + stack.size());
         TestElement child = stack.getLast();
@@ -197,6 +199,7 @@ private void trackIterationListeners(LinkedList<TestElement> p_stack) {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void processPath() {
     }
 

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -361,6 +361,7 @@ public boolean stopThread(String threadName, boolean now) {
     /**
      * Called by JMeterThread when it finishes
      */
+    @Override
     public void threadFinished(JMeterThread thread) {
         log.debug("Ending thread " + thread.getThreadName());
         allThreads.remove(thread);
@@ -526,6 +527,7 @@ public ThreadStarter(int groupCount, ListenerNotifier notifier, ListedHashTree t
             
         }
         
+        @Override
         public void run() {
             // Copy in ThreadStarter thread context from calling Thread
             JMeterContextService.getContext().setVariables(this.context.getVariables());

File: src/core/org/apache/jmeter/threads/gui/AbstractThreadGroupGui.java
Patch:
@@ -58,10 +58,12 @@ public AbstractThreadGroupGui(){
         initGui();
     }
 
+    @Override
     public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.THREADS });
     }
 
+    @Override
     public JPopupMenu createPopupMenu() {
         JPopupMenu pop = new JPopupMenu();
         pop.add(MenuFactory.makeMenus(new String[] {

File: src/core/org/apache/jmeter/timers/gui/AbstractTimerGui.java
Patch:
@@ -45,6 +45,7 @@ public abstract class AbstractTimerGui extends AbstractJMeterGuiComponent {
      *
      * @return a JPopupMenu appropriate for the component.
      */
+    @Override
     public JPopupMenu createPopupMenu() {
         return MenuFactory.getDefaultTimerMenu();
     }
@@ -58,6 +59,7 @@ public JPopupMenu createPopupMenu() {
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
+    @Override
     public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.TIMERS });
     }

File: src/core/org/apache/jmeter/util/BSFJavaScriptEngine.java
Patch:
@@ -60,6 +60,7 @@ public class BSFJavaScriptEngine extends BSFEngineImpl {
      * passed to the extension, which may be either
      * Vectors of Nodes, or Strings.
      */
+    @Override
     public Object call(Object object, String method, Object[] args)
         throws BSFException {
 
@@ -120,6 +121,7 @@ public void declareBean(BSFDeclaredBean bean) throws BSFException {
      * This is used by an application to evaluate a string containing
      * some expression.
      */
+    @Override
     public Object eval(String source, int lineNo, int columnNo, Object oscript)
         throws BSFException {
 

File: src/core/org/apache/jmeter/util/BeanShellServer.java
Patch:
@@ -59,6 +59,7 @@ static void setprop(String s, String v) {
         JMeterUtils.getJMeterProperties().setProperty(s, v);
     }
 
+    @Override
     public void run() {
 
         ClassLoader loader = Thread.currentThread().getContextClassLoader();

File: src/core/org/apache/jmeter/util/CustomX509TrustManager.java
Patch:
@@ -50,6 +50,7 @@ public CustomX509TrustManager(final X509TrustManager defaultTrustManager) {
     /**
      * @see javax.net.ssl.X509TrustManager#checkClientTrusted(X509Certificate[],String)
      */
+    @Override
     public void checkClientTrusted(X509Certificate[] certificates,String authType) throws CertificateException {
         if (certificates != null && log.isDebugEnabled()) {
             for (int c = 0; c < certificates.length; c++) {
@@ -72,6 +73,7 @@ public void checkClientTrusted(X509Certificate[] certificates,String authType) t
     /**
      * @see javax.net.ssl.X509TrustManager#checkServerTrusted(X509Certificate[],String)
      */
+    @Override
     public void checkServerTrusted(X509Certificate[] certificates,String authType) throws CertificateException {
         if (certificates != null && log.isDebugEnabled()) {
             for (int c = 0; c < certificates.length; c++) {
@@ -94,6 +96,7 @@ public void checkServerTrusted(X509Certificate[] certificates,String authType) t
     /**
      * @see javax.net.ssl.X509TrustManager#getAcceptedIssuers()
      */
+    @Override
     public X509Certificate[] getAcceptedIssuers() {
         return this.defaultTrustManager.getAcceptedIssuers();
     }

File: src/core/org/apache/jmeter/util/HttpSSLProtocolSocketFactory.java
Patch:
@@ -132,6 +132,7 @@ private Socket wrapSocket(Socket sock){
      * @throws UnknownHostException if the IP address of the host cannot be
      * determined
      */
+    @Override
     public Socket createSocket(
         final String host,
         final int port,

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -284,6 +284,7 @@ public static Pattern getPattern(String expression, int options) throws Malforme
         return LazyPatternCacheHolder.INSTANCE.getPattern(expression, options);
     }
 
+    @Override
     public void initializeProperties(String file) {
         System.out.println("Initializing Properties: " + file);
         getProperties(file);

File: src/core/org/apache/jmeter/util/ScopePanel.java
Patch:
@@ -154,6 +154,7 @@ public boolean isScopeVariable() {
         return variableButton.isSelected();
     }
 
+    @Override
     public void actionPerformed(ActionEvent e) {
         variableName.setEnabled(variableButton.isSelected());
     }

File: src/core/org/apache/jmeter/visualizers/Sample.java
Patch:
@@ -172,6 +172,7 @@ public double getThroughput() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public int compareTo(Sample o) {
         Sample oo = o;
         return ((count - oo.count) < 0 ? -1 : (count == oo.count ? 0 : 1));

File: src/core/org/apache/jmeter/visualizers/TableSample.java
Patch:
@@ -112,6 +112,7 @@ public String getLabel() {
         return label;
     }
 
+    @Override
     public int compareTo(TableSample o) {
         TableSample oo = o;
         return ((totalSamples - oo.totalSamples) < 0 ? -1 : (totalSamples == oo.totalSamples ? 0 : 1));

File: src/core/org/apache/jmeter/visualizers/gui/AbstractListenerGui.java
Patch:
@@ -44,6 +44,7 @@ public abstract class AbstractListenerGui extends AbstractJMeterGuiComponent {
      *
      * @return a JPopupMenu appropriate for the component.
      */
+    @Override
     public JPopupMenu createPopupMenu() {
         return MenuFactory.getDefaultVisualizerMenu();
     }
@@ -57,6 +58,7 @@ public JPopupMenu createPopupMenu() {
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
+    @Override
     public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.LISTENERS });
     }

File: src/components/org/apache/jmeter/config/CSVDataSet.java
Patch:
@@ -98,6 +98,7 @@ private Object readResolve(){
     /**
      * {@inheritDoc}
      */
+    @Override
     public void iterationStart(LoopIterationEvent iterEvent) {
         FileServer server = FileServer.getFileServer();
         final JMeterContext context = getThreadContext();

File: src/components/org/apache/jmeter/config/RandomVariableConfig.java
Patch:
@@ -103,6 +103,7 @@ private void init(){
     }
 
     /** {@inheritDoc} */
+    @Override
     public void iterationStart(LoopIterationEvent iterEvent) {
         Random randGen=null;
         if (getPerThread()){

File: src/components/org/apache/jmeter/control/IncludeController.java
Patch:
@@ -102,6 +102,7 @@ public String getIncludePath() {
      * The way ReplaceableController works is clone is called first,
      * followed by replace(HashTree) and finally getReplacement().
      */
+    @Override
     public HashTree getReplacementSubTree() {
         return subtree;
     }
@@ -110,6 +111,7 @@ public TestElement getReplacementElement() {
         return sub;
     }
 
+    @Override
     public void resolveReplacementSubTree(JMeterTreeNode context) {
         this.subtree = this.loadIncludedElements();
     }

File: src/components/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -131,6 +131,7 @@ private void restoreSelected() {
      * Compute the replacement tree.
      * @param context
      */
+    @Override
     public void resolveReplacementSubTree(JMeterTreeNode context) {
         if (selectedNode == null) {
             List<?> nodePathList = getNodePath();
@@ -158,6 +159,7 @@ private void traverse(JMeterTreeNode node, List<?> nodePath, int level) {
      * Copies the controller's subelements into the execution tree
      *
      */
+    @Override
     public HashTree getReplacementSubTree() {
         HashTree tree = new ListedHashTree();
         if (selectedNode != null) {

File: src/components/org/apache/jmeter/control/OnceOnlyController.java
Patch:
@@ -40,6 +40,7 @@ public OnceOnlyController() {
     /**
      * @see LoopIterationListener#iterationStart(LoopIterationEvent)
      */
+    @Override
     public void iterationStart(LoopIterationEvent event) {
         int numIteration = 1;
         // Bug 39509: iteration to 0 for all controller which not LoopController (and TG)

File: src/components/org/apache/jmeter/control/gui/ForeachControlPanel.java
Patch:
@@ -125,13 +125,15 @@ public void configure(TestElement element) {
     }
 
     /* Implements JMeterGUIComponent.createTestElement() */
+    @Override
     public TestElement createTestElement() {
         ForeachController lc = new ForeachController();
         modifyTestElement(lc);
         return lc;
     }
 
     /* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
+    @Override
     public void modifyTestElement(TestElement lc) {
         configureTestElement(lc);
         if (lc instanceof ForeachController) {
@@ -159,6 +161,7 @@ public void clearGui() {
     }
 
 
+    @Override
     public String getLabelResource() {
         return "foreach_controller_title"; // $NON-NLS-1$
     }

File: src/components/org/apache/jmeter/control/gui/IncludeControllerGui.java
Patch:
@@ -45,6 +45,7 @@ public IncludeControllerGui() {
         init();
     }
 
+    @Override
     public String getLabelResource() {
         return "include_controller";//$NON-NLS-1$
     }
@@ -62,6 +63,7 @@ public void configure(TestElement el) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public TestElement createTestElement() {
         IncludeController mc = new IncludeController();
         configureTestElement(mc);
@@ -71,6 +73,7 @@ public TestElement createTestElement() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void modifyTestElement(TestElement element) {
         configureTestElement(element);
         IncludeController controller = (IncludeController)element;

File: src/components/org/apache/jmeter/control/gui/InterleaveControlGui.java
Patch:
@@ -44,6 +44,7 @@ public void configure(TestElement el) {
         }
     }
 
+    @Override
     public TestElement createTestElement() {
         InterleaveControl ic = new InterleaveControl();
         modifyTestElement(ic);
@@ -55,6 +56,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement ic) {
         configureTestElement(ic);
         if (style.isSelected()) {
@@ -73,6 +75,7 @@ public void clearGui() {
         style.setSelected(false);
     }
 
+    @Override
     public String getLabelResource() {
         return "interleave_control_title"; // $NON-NLS-1$
     }

File: src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java
Patch:
@@ -71,6 +71,7 @@ public ModuleControllerGui() {
     }
 
     /** {@inheritDoc}} */
+    @Override
     public String getLabelResource() {
         return "module_controller_title"; // $NON-NLS-1$
     }
@@ -108,6 +109,7 @@ private String renderPath(Collection<?> path) {
     }
 
     /** {@inheritDoc}} */
+    @Override
     public TestElement createTestElement() {
         ModuleController mc = new ModuleController();
         configureTestElement(mc);
@@ -118,6 +120,7 @@ public TestElement createTestElement() {
     }
 
     /** {@inheritDoc}} */
+    @Override
     public void modifyTestElement(TestElement element) {
         configureTestElement(element);
         TreeNodeWrapper tnw = (TreeNodeWrapper) nodesModel.getSelectedItem();

File: src/components/org/apache/jmeter/control/gui/OnceOnlyControllerGui.java
Patch:
@@ -29,6 +29,7 @@ public OnceOnlyControllerGui() {
         init();
     }
 
+    @Override
     public TestElement createTestElement() {
         OnceOnlyController oc = new OnceOnlyController();
         modifyTestElement(oc);
@@ -40,10 +41,12 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement oc) {
         configureTestElement(oc);
     }
 
+    @Override
     public String getLabelResource() {
         return "once_only_controller_title"; // $NON-NLS-1$
     }

File: src/components/org/apache/jmeter/control/gui/RandomControlGui.java
Patch:
@@ -35,6 +35,7 @@ public RandomControlGui() {
         init();
     }
 
+    @Override
     public TestElement createTestElement() {
         RandomController ic = new RandomController();
         modifyTestElement(ic);
@@ -46,6 +47,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement ic) {
         configureTestElement(ic);
         if (style.isSelected()) {
@@ -74,6 +76,7 @@ public void configure(TestElement el) {
         }
     }
 
+    @Override
     public String getLabelResource() {
         return "random_control_title"; // $NON-NLS-1$
     }

File: src/components/org/apache/jmeter/control/gui/SwitchControllerGui.java
Patch:
@@ -39,6 +39,7 @@ public SwitchControllerGui() {
         init();
     }
 
+    @Override
     public TestElement createTestElement() {
         SwitchController ic = new SwitchController();
         modifyTestElement(ic);
@@ -50,6 +51,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement ic) {
         configureTestElement(ic);
         ((SwitchController) ic).setSelection(switchValue.getText());
@@ -70,6 +72,7 @@ public void configure(TestElement el) {
         switchValue.setText(((SwitchController) el).getSelection());
     }
 
+    @Override
     public String getLabelResource() {
         return "switch_controller_title"; // $NON-NLS-1$
     }

File: src/components/org/apache/jmeter/extractor/BSFPostProcessor.java
Patch:
@@ -32,6 +32,7 @@ public class BSFPostProcessor extends BSFTestElement implements Cloneable, PostP
 
     private static final long serialVersionUID = 232L;
 
+    @Override
     public void process(){
         BSFManager mgr =null;
         try {

File: src/components/org/apache/jmeter/extractor/BeanShellPostProcessor.java
Patch:
@@ -44,7 +44,8 @@ protected String getInitFileProperty() {
         return INIT_FILE;
     }
 
-     public void process() {
+     @Override
+    public void process() {
         JMeterContext jmctx = JMeterContextService.getContext();
 
         SampleResult prev = jmctx.getPreviousResult();

File: src/components/org/apache/jmeter/extractor/DebugPostProcessor.java
Patch:
@@ -49,6 +49,7 @@ public class DebugPostProcessor extends AbstractTestElement implements PostProce
 
     private boolean displaySystemProperties;
 
+    @Override
     public void process(){
         StringBuilder sb = new StringBuilder(100);
         StringBuilder rd = new StringBuilder(20); // for request Data
@@ -105,6 +106,7 @@ private void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s) {
         @SuppressWarnings("unchecked")
         ArrayList<Map.Entry<Object, Object>> al = new ArrayList<Map.Entry<Object, Object>>(s);
         Collections.sort(al, new Comparator<Map.Entry<Object, Object>>(){
+            @Override
             public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {
                 String m1,m2;
                 m1=(String)o1.getKey();

File: src/components/org/apache/jmeter/extractor/JSR223PostProcessor.java
Patch:
@@ -35,6 +35,7 @@ public class JSR223PostProcessor extends JSR223TestElement implements Cloneable,
 
     private static final long serialVersionUID = 232L;
 
+    @Override
     public void process() {
         try {
             ScriptEngine scriptEngine = getScriptEngine();

File: src/components/org/apache/jmeter/extractor/XPathExtractor.java
Patch:
@@ -104,6 +104,7 @@ private String concat(String s1, int i){
      * Return value as variable defined by REFNAME. Returns DEFAULT value
      * if not found.
      */
+    @Override
     public void process() {
         JMeterContext context = getThreadContext();
         final SampleResult previousResult = context.getPreviousResult();

File: src/components/org/apache/jmeter/extractor/gui/RegexExtractorGui.java
Patch:
@@ -74,6 +74,7 @@ public RegexExtractorGui() {
         init();
     }
 
+    @Override
     public String getLabelResource() {
         return "regex_extractor_title"; //$NON-NLS-1$
     }
@@ -102,6 +103,7 @@ public void configure(TestElement el) {
     /**
      * @see org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()
      */
+    @Override
     public TestElement createTestElement() {
         AbstractScopedTestElement extractor = new RegexExtractor();
         modifyTestElement(extractor);
@@ -113,6 +115,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement extractor) {
         super.configureTestElement(extractor);
         if (extractor instanceof RegexExtractor) {

File: src/components/org/apache/jmeter/extractor/gui/XPathExtractorGui.java
Patch:
@@ -59,6 +59,7 @@ public class XPathExtractorGui extends AbstractPostProcessorGui {
 
     private final XMLConfPanel xml = new XMLConfPanel();
 
+    @Override
     public String getLabelResource() {
         return "xpath_extractor_title"; //$NON-NLS-1$
     }
@@ -81,12 +82,14 @@ public void configure(TestElement el) {
     }
 
 
+    @Override
     public TestElement createTestElement() {
         XPathExtractor extractor = new XPathExtractor();
         modifyTestElement(extractor);
         return extractor;
     }
 
+    @Override
     public void modifyTestElement(TestElement extractor) {
         super.configureTestElement(extractor);
         if ( extractor instanceof XPathExtractor){

File: src/components/org/apache/jmeter/modifiers/BSFPreProcessor.java
Patch:
@@ -32,6 +32,7 @@ public class BSFPreProcessor extends BSFTestElement implements Cloneable, PrePro
 
     private static final long serialVersionUID = 232L;
 
+    @Override
     public void process(){
         BSFManager mgr =null;
         try {

File: src/components/org/apache/jmeter/modifiers/BeanShellPreProcessor.java
Patch:
@@ -44,6 +44,7 @@ protected String getInitFileProperty() {
         return INIT_FILE;
     }
 
+    @Override
     public void process(){
         final BeanShellInterpreter bshInterpreter = getBeanShellInterpreter();
         if (bshInterpreter == null) {

File: src/components/org/apache/jmeter/modifiers/CounterConfig.java
Patch:
@@ -96,6 +96,7 @@ private Object readResolve(){
     /**
      * @see LoopIterationListener#iterationStart(LoopIterationEvent)
      */
+    @Override
     public void iterationStart(LoopIterationEvent event) {
         // Cannot use getThreadContext() as not cloned per thread
         JMeterVariables variables = JMeterContextService.getContext().getVariables();

File: src/components/org/apache/jmeter/modifiers/JSR223PreProcessor.java
Patch:
@@ -35,6 +35,7 @@ public class JSR223PreProcessor extends JSR223TestElement implements Cloneable,
 
     private static final long serialVersionUID = 232L;
 
+    @Override
     public void process() {
         try {
             ScriptEngine scriptEngine = getScriptEngine();

File: src/components/org/apache/jmeter/modifiers/UserParameters.java
Patch:
@@ -122,6 +122,7 @@ public void setPerIteration(boolean perIter) {
         setProperty(new BooleanProperty(PER_ITERATION, perIter));
     }
 
+    @Override
     public void process() {
         if (log.isDebugEnabled()) {
             log.debug(Thread.currentThread().getName() + " process " + isPerIteration());//$NON-NLS-1$
@@ -153,6 +154,7 @@ private void setValues() {
     /**
      * @see LoopIterationListener#iterationStart(LoopIterationEvent)
      */
+    @Override
     public void iterationStart(LoopIterationEvent event) {
         if (log.isDebugEnabled()) {
             log.debug(Thread.currentThread().getName() + " iteration start " + isPerIteration());//$NON-NLS-1$

File: src/components/org/apache/jmeter/sampler/DebugSampler.java
Patch:
@@ -53,6 +53,7 @@ public class DebugSampler extends AbstractSampler implements TestBean {
 
     private boolean displaySystemProperties;
 
+    @Override
     public SampleResult sample(Entry e) {
         SampleResult res = new SampleResult();
         res.setSampleLabel(getName());
@@ -92,6 +93,7 @@ private void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s) {
         @SuppressWarnings("unchecked")
         ArrayList<Map.Entry<Object, Object>> al = new ArrayList<Map.Entry<Object, Object>>(s);
         Collections.sort(al, new Comparator<Map.Entry<Object, Object>>(){
+            @Override
             public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {
                 String m1,m2;
                 m1=(String)o1.getKey();

File: src/components/org/apache/jmeter/sampler/TestAction.java
Patch:
@@ -74,6 +74,7 @@ public TestAction() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public SampleResult sample(Entry e) {
         JMeterContext context = JMeterContextService.getContext();
 
@@ -157,6 +158,7 @@ public boolean applies(ConfigTestElement configElement) {
         return APPLIABLE_CONFIG_CLASSES.contains(guiClass);
     }
 
+    @Override
     public boolean interrupt() {
         Thread thrd = pauseThread; // take copy so cannot get NPE
         if (thrd!= null) {

File: src/components/org/apache/jmeter/timers/BSFTimer.java
Patch:
@@ -31,6 +31,7 @@ public class BSFTimer extends BSFTestElement implements Cloneable, Timer, TestBe
     private static final long serialVersionUID = 4;
 
     /** {@inheritDoc} */
+    @Override
     public long delay() {
         long delay = 0;
         BSFManager mgr = null;

File: src/components/org/apache/jmeter/timers/BeanShellTimer.java
Patch:
@@ -41,6 +41,7 @@ protected String getInitFileProperty() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public long delay() {
         String ret="0";
         final BeanShellInterpreter bshInterpreter = getBeanShellInterpreter();

File: src/components/org/apache/jmeter/timers/ConstantTimer.java
Patch:
@@ -83,6 +83,7 @@ public double getRange() {
      *
      * @return the delay.
      */
+    @Override
     public long delay() {
         return delay;
     }
@@ -102,6 +103,7 @@ public String toString() {
      *
      * @see LoopIterationListener#iterationStart(LoopIterationEvent)
      */
+    @Override
     public void iterationStart(LoopIterationEvent event) {
         delay = getPropertyAsLong(DELAY);
 

File: src/components/org/apache/jmeter/timers/JSR223Timer.java
Patch:
@@ -34,6 +34,7 @@ public class JSR223Timer extends JSR223TestElement implements Cloneable, Timer,
     private static final long serialVersionUID = 4;
 
     /** {@inheritDoc} */
+    @Override
     public long delay() {
         long delay = 0;
         try {

File: src/components/org/apache/jmeter/timers/gui/AbstractRandomTimerGui.java
Patch:
@@ -77,6 +77,7 @@ public static void error(Exception e, JComponent thrower) {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()
      */
+    @Override
     public TestElement createTestElement() {
         RandomTimer timer = createRandomTimer();
         modifyTestElement(timer);
@@ -88,6 +89,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement timer) {
         this.configureTestElement(timer);
         ((RandomTimer) timer).setDelay(delayField.getText());
@@ -162,6 +164,7 @@ public void clearGui() {
     /**
      * {@inheritDoc}
      */
+    @Override
     abstract public String getLabelResource();
 
     /**

File: src/components/org/apache/jmeter/timers/gui/ConstantTimerGui.java
Patch:
@@ -64,6 +64,7 @@ public static void error(Exception e, JComponent thrower) {
         JOptionPane.showMessageDialog(thrower, e, "Error", JOptionPane.ERROR_MESSAGE);
     }
 
+    @Override
     public String getLabelResource() {
         return "constant_timer_title"; // $NON-NLS-1$
     }
@@ -73,6 +74,7 @@ public String getLabelResource() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()
      */
+    @Override
     public TestElement createTestElement() {
         ConstantTimer timer = new ConstantTimer();
         modifyTestElement(timer);
@@ -84,6 +86,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement timer) {
         this.configureTestElement(timer);
         ((ConstantTimer) timer).setDelay(delayField.getText());

File: src/components/org/apache/jmeter/visualizers/RenderAsHTML.java
Patch:
@@ -43,6 +43,7 @@ public class RenderAsHTML extends SamplerResultTab implements ResultRenderer {
     private static final EditorKit defaultHtmlEditor = JEditorPane.createEditorKitForContentType(TEXT_HTML);
 
     /** {@inheritDoc} */
+    @Override
     public void renderResult(SampleResult sampleResult) {
         // get the text response and image icon
         // to determine which is NOT null

File: src/components/org/apache/jmeter/visualizers/RenderAsJSON.java
Patch:
@@ -41,6 +41,7 @@ public class RenderAsJSON extends SamplerResultTab implements ResultRenderer {
     private static final Pattern VALUE_OR_PAIR_PATTERN = Pattern.compile(VALUE_OR_PAIR_REGEX);
 
     /** {@inheritDoc} */
+    @Override
     public void renderResult(SampleResult sampleResult) {
         String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);
         showRenderJSONResponse(response);

File: src/components/org/apache/jmeter/visualizers/RenderAsText.java
Patch:
@@ -25,6 +25,7 @@
 public class RenderAsText extends SamplerResultTab implements ResultRenderer {
 
     /** {@inheritDoc} */
+    @Override
     public void renderResult(SampleResult sampleResult) {
         String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);
         showTextResponse(response);

File: src/components/org/apache/jmeter/visualizers/RenderAsXML.java
Patch:
@@ -56,6 +56,7 @@ public RenderAsXML(){
     }
 
     /** {@inheritDoc} */
+    @Override
     public void renderResult(SampleResult sampleResult) {
         showRenderXMLResponse(sampleResult);
     }

File: src/components/org/apache/jmeter/visualizers/ResultRenderer.java
Patch:
@@ -54,6 +54,7 @@ public interface ResultRenderer {
      *
      * @return the string to be displayed by the ComboBox
      */
+    @Override
     String toString();
 
     void setBackgroundColor(Color backGround);

File: src/components/org/apache/jmeter/visualizers/SimpleDataWriter.java
Patch:
@@ -41,6 +41,7 @@ public SimpleDataWriter() {
         setName(getStaticLabel());
     }
 
+    @Override
     public String getLabelResource() {
         return "simple_data_writer_title"; // $NON-NLS-1$
     }
@@ -60,6 +61,7 @@ private void init() {
      * Does nothing, but required by interface.
      */
 
+    @Override
     public void clearData() {
     }
 
@@ -70,6 +72,7 @@ public void clearData() {
      *            ignored
      */
 
+    @Override
     public void add(SampleResult sample) {
     }
 }

File: src/components/org/apache/jmeter/visualizers/SplineModel.java
Patch:
@@ -97,6 +97,7 @@ public void uncompile() {
         clearData();
     }
 
+    @Override
     public synchronized void clearData() {
         // this.graph.clear();
         samples.clear();

File: test/src/org/apache/jmeter/gui/action/TestLoad.java
Patch:
@@ -49,6 +49,7 @@ public class TestLoad extends JMeterTestCase {
     }
 
     private static final FilenameFilter jmxFilter = new FilenameFilter() {
+        @Override
         public boolean accept(File dir, String name) {
             return name.endsWith(".jmx");
         }

File: test/src/org/apache/jmeter/junit/stubs/TestSampler.java
Patch:
@@ -39,6 +39,7 @@ public class TestSampler extends AbstractSampler {
     /**
      * {@inheritDoc}
      */
+    @Override
     public SampleResult sample(Entry e) {
         if (wait > 0) {
             try {

File: test/src/org/apache/jmeter/protocol/http/parser/TestHTMLParser.java
Patch:
@@ -279,6 +279,7 @@ private static void filetest(HTMLParser p, String file, String url, String resul
                 // Convert both to Sets
                 expected = new TreeSet<String>(getFile(resultFile)).iterator();
                 TreeSet<URL> temp = new TreeSet<URL>(new Comparator<Object>() {
+                    @Override
                     public int compare(Object o1, Object o2) {
                         return (o1.toString().compareTo(o2.toString()));
                     }

File: test/src/org/apache/jmeter/protocol/http/sampler/HTTPSampler3.java
Patch:
@@ -33,6 +33,7 @@ public HTTPSampler3(){
         hc = new HTTPHC4Impl(this);
     }
 
+    @Override
     public boolean interrupt() {
         return hc.interrupt();
     }

File: test/src/org/apache/jmeter/resources/PackageTest.java
Patch:
@@ -231,7 +231,8 @@ private void check(String resname, boolean checkUnexpected) throws Exception {
     public static final String[] getResources(File srcFiledir) {
     	Set<String> set = new TreeSet<String>();
 		findFile(srcFiledir, set, new FilenameFilter() {
-			public boolean accept(File dir, String name) {
+			@Override
+            public boolean accept(File dir, String name) {
 				return new File(dir, name).isDirectory() 
 						|| (
 								name.equals("messages.properties") ||

File: test/src/org/apache/jmeter/samplers/NullSampler.java
Patch:
@@ -27,6 +27,7 @@ public class NullSampler extends AbstractSampler {
 
     private static final long serialVersionUID = 240L;
 
+    @Override
     public SampleResult sample(Entry e) {
         return new SampleResult();
     }

File: test/src/org/apache/jmeter/threads/TestTestCompiler.java
Patch:
@@ -50,6 +50,7 @@ public void testConfigGathering() throws Exception {
         class TestSampler extends AbstractSampler {
             private static final long serialVersionUID = 240L;
 
+            @Override
             public SampleResult sample(org.apache.jmeter.samplers.Entry e) {
                 return null;
             }

File: test/src/org/apache/jorphan/reflect/TestFunctor.java
Patch:
@@ -47,6 +47,7 @@ public Test1(){
         public Test1(String s){
             name=s;
         }
+        @Override
         public String getName(){
             return name;
         }
@@ -74,9 +75,11 @@ public Test2(){
         public Test2(String s){
             name=s;
         }
+        @Override
         public String getName(){
             return name;
         }
+        @Override
         public String getString(String s){
             return s;
         }

File: src/components/org/apache/jmeter/assertions/gui/BeanShellAssertionGui.java
Patch:
@@ -58,6 +58,7 @@ public void configure(TestElement element) {
         super.configure(element);
     }
 
+    @Override
     public TestElement createTestElement() {
         BeanShellAssertion sampler = new BeanShellAssertion();
         modifyTestElement(sampler);
@@ -69,6 +70,7 @@ public TestElement createTestElement() {
      * 
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement te) {
         te.clear();
         this.configureTestElement(te);
@@ -78,6 +80,7 @@ public void modifyTestElement(TestElement te) {
         te.setProperty(new BooleanProperty(BeanShellAssertion.RESET_INTERPRETER, resetInterpreter.isSelected()));
     }
 
+    @Override
     public String getLabelResource() {
         return "bsh_assertion_title"; // $NON-NLS-1$
     }

File: src/components/org/apache/jmeter/assertions/gui/DurationAssertionGui.java
Patch:
@@ -43,6 +43,7 @@ public DurationAssertionGui() {
         init();
     }
 
+    @Override
     public String getLabelResource() {
         return "duration_assertion_title"; // $NON-NLS-1$
     }
@@ -51,6 +52,7 @@ public String getDurationAttributesTitle() {
         return JMeterUtils.getResString("duration_assertion_duration_test"); // $NON-NLS-1$
     }
 
+    @Override
     public TestElement createTestElement() {
         DurationAssertion el = new DurationAssertion();
         modifyTestElement(el);
@@ -62,6 +64,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement el) {
         configureTestElement(el);
         if (el instanceof DurationAssertion) {

File: src/components/org/apache/jmeter/assertions/gui/MD5HexAssertionGUI.java
Patch:
@@ -76,13 +76,15 @@ public void configure(TestElement el) {
         this.md5HexInput.setText(String.valueOf(assertion.getAllowedMD5Hex()));
     }
 
+    @Override
     public String getLabelResource() {
         return "md5hex_assertion_title"; // $NON-NLS-1$
     }
 
     /*
      * @return
      */
+    @Override
     public TestElement createTestElement() {
 
         MD5HexAssertion el = new MD5HexAssertion();
@@ -94,6 +96,7 @@ public TestElement createTestElement() {
     /*
      * @param element
      */
+    @Override
     public void modifyTestElement(TestElement element) {
         configureTestElement(element);
         String md5HexString = this.md5HexInput.getText();

File: src/components/org/apache/jmeter/assertions/gui/XMLAssertionGui.java
Patch:
@@ -35,10 +35,12 @@ public XMLAssertionGui() {
     /**
      * Returns the label to be shown within the JTree-Component.
      */
+    @Override
     public String getLabelResource() {
         return "xml_assertion_title"; // $NON-NLS-1$
     }
 
+    @Override
     public TestElement createTestElement() {
         XMLAssertion el = new XMLAssertion();
         modifyTestElement(el);
@@ -50,6 +52,7 @@ public TestElement createTestElement() {
      * 
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement el) {
         configureTestElement(el);
     }

File: src/components/org/apache/jmeter/assertions/gui/XMLConfPanel.java
Patch:
@@ -60,6 +60,7 @@ private void init() {
         validate = new JCheckBox(JMeterUtils.getResString("xml_validate_button")); //$NON-NLS-1$
         tolerant = new JCheckBox(JMeterUtils.getResString("xml_tolerant_button")); //$NON-NLS-1$
         tolerant.addActionListener(new ActionListener(){
+            @Override
             public void actionPerformed(ActionEvent e) {
                 tolerant();
             }

File: src/components/org/apache/jmeter/assertions/gui/XMLSchemaAssertionGUI.java
Patch:
@@ -57,13 +57,15 @@ public XMLSchemaAssertionGUI() {
     /**
      * Returns the label to be shown within the JTree-Component.
      */
+    @Override
     public String getLabelResource() {
         return "xmlschema_assertion_title"; //$NON-NLS-1$
     }
 
     /**
      * create Test Element
      */
+    @Override
     public TestElement createTestElement() {
         log.debug("XMLSchemaAssertionGui.createTestElement() called");
         XMLSchemaAssertion el = new XMLSchemaAssertion();
@@ -76,6 +78,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement inElement) {
 
         log.debug("XMLSchemaAssertionGui.modifyTestElement() called");

File: src/components/org/apache/jmeter/assertions/gui/XPathAssertionGui.java
Patch:
@@ -43,13 +43,15 @@ public XPathAssertionGui() {
     /**
      * Returns the label to be shown within the JTree-Component.
      */
+    @Override
     public String getLabelResource() {
         return "xpath_assertion_title"; //$NON-NLS-1$
     }
 
     /**
      * Create test element
      */
+    @Override
     public TestElement createTestElement() {
         XPathAssertion el = new XPathAssertion();
         modifyTestElement(el);
@@ -97,6 +99,7 @@ private void init() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement el) {
         super.configureTestElement(el);
         if (el instanceof XPathAssertion) {

File: src/components/org/apache/jmeter/assertions/gui/XPathPanel.java
Patch:
@@ -136,6 +136,7 @@ public JButton getCheckXPathButton() {
         if (checkXPath == null) {
             checkXPath = new JButton(JMeterUtils.getResString("xpath_assertion_button")); //$NON-NLS-1$
             checkXPath.addActionListener(new ActionListener() {
+                @Override
                 public void actionPerformed(ActionEvent e) {
                     validXPath(xpath.getText(), true);
                 }

File: src/components/org/apache/jmeter/assertions/BSFAssertion.java
Patch:
@@ -32,6 +32,7 @@ public class BSFAssertion extends BSFTestElement implements Cloneable, Assertion
 
     private static final long serialVersionUID = 234L;
 
+    @Override
     public AssertionResult getResult(SampleResult response) {
         AssertionResult result = new AssertionResult(getName());
         BSFManager mgr =null;

File: src/components/org/apache/jmeter/assertions/BeanShellAssertion.java
Patch:
@@ -72,6 +72,7 @@ public boolean isResetInterpreter() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public AssertionResult getResult(SampleResult response) {
         AssertionResult result = new AssertionResult(getName());
 

File: src/components/org/apache/jmeter/assertions/CompareAssertion.java
Patch:
@@ -51,6 +51,7 @@ public CompareAssertion() {
         super();
     }
 
+    @Override
     public AssertionResult getResult(SampleResult response) {
         responses.add(response);
         if (responses.size() > 1) {
@@ -154,6 +155,7 @@ private String filterString(String content) {
         return content;
     }
 
+    @Override
     public void iterationStart(LoopIterationEvent iterEvent) {
         responses = new LinkedList<SampleResult>();
     }

File: src/components/org/apache/jmeter/assertions/DurationAssertion.java
Patch:
@@ -42,6 +42,7 @@ public class DurationAssertion extends AbstractScopedAssertion implements Serial
      * containing a FailureMessage will be returned. Otherwise the returned
      * AssertionResult will reflect the success of the Sample.
      */
+    @Override
     public AssertionResult getResult(SampleResult response) {
         AssertionResult result = new AssertionResult(getName());
         result.setFailure(false);

File: src/components/org/apache/jmeter/assertions/HTMLAssertion.java
Patch:
@@ -74,6 +74,7 @@ public HTMLAssertion() {
      * a FailureMessage will be returned. Otherwise the returned AssertionResult
      * will reflect the success of the Sample.
      */
+    @Override
     public AssertionResult getResult(SampleResult inResponse) {
         log.debug("HTMLAssertions.getResult() called");
 

File: src/components/org/apache/jmeter/assertions/JSR223Assertion.java
Patch:
@@ -36,6 +36,7 @@ public class JSR223Assertion extends JSR223TestElement implements Cloneable, Ass
 
     private static final long serialVersionUID = 234L;
 
+    @Override
     public AssertionResult getResult(SampleResult response) {
         AssertionResult result = new AssertionResult(getName());
         try {

File: src/components/org/apache/jmeter/assertions/MD5HexAssertion.java
Patch:
@@ -50,6 +50,7 @@ public class MD5HexAssertion extends AbstractTestElement implements Serializable
     /*
      * @param response @return
      */
+    @Override
     public AssertionResult getResult(SampleResult response) {
 
         AssertionResult result = new AssertionResult(getName());

File: src/components/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -180,6 +180,7 @@ public void clearTestStrings() {
         getTestStrings().clear();
     }
 
+    @Override
     public AssertionResult getResult(SampleResult response) {
         AssertionResult result;
 

File: src/components/org/apache/jmeter/assertions/SMIMEAssertionTestElement.java
Patch:
@@ -47,6 +47,7 @@ public SMIMEAssertionTestElement() {
         super();
     }
 
+    @Override
     public AssertionResult getResult(SampleResult response) {
         try {
             return SMIMEAssertion.getResult(this, response, getName());

File: src/components/org/apache/jmeter/assertions/SizeAssertion.java
Patch:
@@ -70,6 +70,7 @@ public class SizeAssertion extends AbstractScopedAssertion implements Serializab
      * Returns the result of the Assertion. 
      * Here it checks the Sample responseData length.
      */
+    @Override
     public AssertionResult getResult(SampleResult response) {
         AssertionResult result = new AssertionResult(getName());
         result.setFailure(false);

File: src/components/org/apache/jmeter/assertions/XMLAssertion.java
Patch:
@@ -55,6 +55,7 @@ protected SAXBuilder initialValue() {
      * containing a FailureMessage will be returned. Otherwise the returned
      * AssertionResult will reflect the success of the Sample.
      */
+    @Override
     public AssertionResult getResult(SampleResult response) {
         // no error as default
         AssertionResult result = new AssertionResult(getName());

File: src/components/org/apache/jmeter/assertions/XPathAssertion.java
Patch:
@@ -66,6 +66,7 @@ public class XPathAssertion extends AbstractTestElement implements Serializable,
      * XML, and that the XPath expression is matched (or not, as the case may
      * be)
      */
+    @Override
     public AssertionResult getResult(SampleResult response) {
         // no error as default
         AssertionResult result = new AssertionResult(getName());

File: src/reports/org/apache/jmeter/JMeterReport.java
Patch:
@@ -153,6 +153,7 @@ public JMeterReport() {
     };
 
     /** {@inheritDoc} */
+    @Override
     public String[][] getIconMappings() {
         String iconProp = JMeterUtils.getPropDefault("jmeter.icons", "org/apache/jmeter/images/icon.properties");
         Properties p = JMeterUtils.loadProperties(iconProp);
@@ -178,6 +179,7 @@ public String[][] getIconMappings() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public String[][] getResourceBundles() {
         return new String[0][];
     }

File: src/reports/org/apache/jmeter/control/gui/ReportGui.java
Patch:
@@ -89,13 +89,15 @@ public JPopupMenu createPopupMenu() {
     }
 
     /* Implements JMeterGUIComponent.createTestElement() */
+    @Override
     public TestElement createTestElement() {
         ReportPlan tp = new ReportPlan();
         modifyTestElement(tp);
         return tp;
     }
 
     /* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
+    @Override
     public void modifyTestElement(TestElement plan) {
         super.configureTestElement(plan);
         if (plan instanceof ReportPlan) {

File: src/reports/org/apache/jmeter/gui/ReportGuiPackage.java
Patch:
@@ -564,6 +564,7 @@ public void displayPopUp(Component invoker, MouseEvent e, JPopupMenu popup) {
      *
      * @see org.apache.jmeter.util.LocaleChangeListener#localeChanged(org.apache.jmeter.util.LocaleChangeEvent)
      */
+    @Override
     public void localeChanged(LocaleChangeEvent event) {
         // FIrst make sure we save the content of the current GUI (since we
         // will flush it away):

File: src/reports/org/apache/jmeter/gui/ReportMainFrame.java
Patch:
@@ -241,6 +241,7 @@ public void showStoppingMessage(String host) {
         stoppingMessage.pack();
         ComponentUtil.centerComponentInComponent(this, stoppingMessage);
         SwingUtilities.invokeLater(new Runnable() {
+            @Override
             public void run() {
                 if (stoppingMessage != null) {
                     stoppingMessage.setVisible(true);

File: src/reports/org/apache/jmeter/gui/util/DirectoryPanel.java
Patch:
@@ -127,6 +127,7 @@ private void fireFileChanged() {
         }
     }
 
+    @Override
     public void actionPerformed(ActionEvent e) {
         if (e.getActionCommand().equals(ACTION_BROWSE)) {
             JFileChooser chooser = DirectoryDialoger.promptToOpenFile();

File: src/reports/org/apache/jmeter/gui/util/ReportFilePanel.java
Patch:
@@ -129,6 +129,7 @@ private void fireFileChanged() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void actionPerformed(ActionEvent e) {
         if (e.getActionCommand().equals("browse")) {
             JFileChooser chooser = ReportFileDialoger.promptToOpenFile(new String[] { filetype });

File: src/reports/org/apache/jmeter/gui/util/ReportMenuBar.java
Patch:
@@ -461,6 +461,7 @@ private void getRemoteItems() {
      * Processes a locale change notification. Changes the texts in all menus to
      * the new language.
      */
+    @Override
     public void localeChanged(LocaleChangeEvent event) {
         updateMenuElement(fileMenu);
         updateMenuElement(editMenu);

File: src/reports/org/apache/jmeter/report/gui/AbstractReportGui.java
Patch:
@@ -55,6 +55,7 @@ public AbstractReportGui() {
     /* (non-Javadoc)
      * @see org.apache.jmeter.gui.JMeterGUIComponent#getLabelResource()
      */
+    @Override
     public String getLabelResource() {
         return "report_page";
     }
@@ -67,6 +68,7 @@ public void configureTestElement(TestElement element) {
     /* (non-Javadoc)
      * @see org.apache.jmeter.gui.JMeterGUIComponent#createPopupMenu()
      */
+    @Override
     public JPopupMenu createPopupMenu() {
         JPopupMenu pop = new JPopupMenu();
         JMenu addMenu = new JMenu(JMeterUtils.getResString("Add"));
@@ -81,6 +83,7 @@ public JPopupMenu createPopupMenu() {
     /* (non-Javadoc)
      * @see org.apache.jmeter.gui.JMeterGUIComponent#getMenuCategories()
      */
+    @Override
     public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { ReportMenuFactory.TABLES });
     }

File: src/reports/org/apache/jmeter/report/gui/BarChartGui.java
Patch:
@@ -121,12 +121,14 @@ private void init() {// called from ctor, so must not be overridable
         add(options,BorderLayout.CENTER);
     }
 
+    @Override
     public TestElement createTestElement() {
         BarChart element = new BarChart();
         modifyTestElement(element);
         return element;
     }
 
+    @Override
     public void modifyTestElement(TestElement element) {
         this.configureTestElement(element);
         BarChart bc = (BarChart)element;

File: src/reports/org/apache/jmeter/report/gui/LineGraphGui.java
Patch:
@@ -121,12 +121,14 @@ private void init() {// called from ctor, so must not be overridable
         add(options,BorderLayout.CENTER);
     }
 
+    @Override
     public TestElement createTestElement() {
         LineChart element = new LineChart();
         modifyTestElement(element);
         return element;
     }
 
+    @Override
     public void modifyTestElement(TestElement element) {
         this.configureTestElement(element);
         LineChart bc = (LineChart)element;

File: src/reports/org/apache/jmeter/report/gui/ReportPageGui.java
Patch:
@@ -112,6 +112,7 @@ public JPopupMenu createPopupMenu() {
     /* (non-Javadoc)
      * @see org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()
      */
+    @Override
     public TestElement createTestElement() {
         ReportPage element = new ReportPage();
         modifyTestElement(element);
@@ -121,6 +122,7 @@ public TestElement createTestElement() {
     /* (non-Javadoc)
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(org.apache.jmeter.testelement.TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement element) {
         super.configureTestElement(element);
         ReportPage page = (ReportPage)element;

File: src/reports/org/apache/jmeter/report/gui/TableGui.java
Patch:
@@ -108,12 +108,14 @@ public JPopupMenu createPopupMenu() {
         return pop;
     }
 
+    @Override
     public TestElement createTestElement() {
         Table element = new Table();
         modifyTestElement(element);
         return element;
     }
 
+    @Override
     public void modifyTestElement(TestElement element) {
         this.configureTestElement(element);
         Table tb = (Table)element;
@@ -143,6 +145,7 @@ public void configure(TestElement element) {
         transferRateCheck.setSelected(tb.getTransferRate());
     }
 
+    @Override
     public void stateChanged(ChangeEvent e) {
         modifyTestElement(ReportGuiPackage.getInstance().getCurrentElement());
     }

File: src/reports/org/apache/jmeter/report/gui/action/AbstractAction.java
Patch:
@@ -38,12 +38,14 @@ public abstract class AbstractAction implements Command {
     /**
      * @see Command#doAction(ActionEvent)
      */
+    @Override
     public void doAction(ActionEvent e) {
     }
 
     /**
      * @see Command#getActionNames()
      */
+    @Override
     abstract public Set<String> getActionNames();
 
     /**

File: src/reports/org/apache/jmeter/report/gui/action/ReportActionRouter.java
Patch:
@@ -57,8 +57,10 @@ public final class ReportActionRouter implements ActionListener {
     private ReportActionRouter() {
     }
 
+    @Override
     public void actionPerformed(final ActionEvent e) {
         SwingUtilities.invokeLater(new Runnable() {
+            @Override
             public void run() {
                 performAction(e);
             }

File: src/reports/org/apache/jmeter/report/gui/action/ReportAddParent.java
Patch:
@@ -41,6 +41,7 @@ public class ReportAddParent implements Command {
     public ReportAddParent() {
     }
 
+    @Override
     public void doAction(ActionEvent e) {
         String name = ((Component) e.getSource()).getName();
         try {
@@ -53,6 +54,7 @@ public void doAction(ActionEvent e) {
 
     }
 
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }

File: src/reports/org/apache/jmeter/report/gui/action/ReportAddToTree.java
Patch:
@@ -48,13 +48,15 @@ public ReportAddToTree() {
      *
      * @return the ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return allJMeterComponentCommands.keySet();
     }
 
     /**
      * Adds the specified class to the current node of the tree.
      */
+    @Override
     public void doAction(ActionEvent e) {
         try {
             TestElement node = ReportGuiPackage.getInstance()

File: src/reports/org/apache/jmeter/report/gui/action/ReportClose.java
Patch:
@@ -52,6 +52,7 @@ public ReportClose() {
      *
      * @return the ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
@@ -62,6 +63,7 @@ public Set<String> getActionNames() {
      * @param e
      *            the generic UI action event
      */
+    @Override
     public void doAction(ActionEvent e) {
         ReportActionRouter.getInstance().doActionNow(
                 new ActionEvent(e.getSource(), e.getID(),

File: src/reports/org/apache/jmeter/report/gui/action/ReportEditCommand.java
Patch:
@@ -35,6 +35,7 @@ public class ReportEditCommand implements Command {
     public ReportEditCommand() {
     }
 
+    @Override
     public void doAction(ActionEvent e) {
         ReportGuiPackage guiPackage = ReportGuiPackage.getInstance();
         guiPackage.getMainFrame().setMainPanel((javax.swing.JComponent) guiPackage.getCurrentGui());
@@ -51,6 +52,7 @@ public void doAction(ActionEvent e) {
         }
     }
 
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }

File: src/reports/org/apache/jmeter/report/gui/action/ReportEnableComponent.java
Patch:
@@ -44,6 +44,7 @@ public class ReportEnableComponent implements Command {
     /**
      * @see org.apache.jmeter.gui.action.Command#doAction(ActionEvent)
      */
+    @Override
     public void doAction(ActionEvent e) {
         ReportTreeNode[] nodes = ReportGuiPackage.getInstance().getTreeListener().getSelectedNodes();
 
@@ -67,6 +68,7 @@ private void enableComponents(ReportTreeNode[] nodes, boolean enable) {
     /**
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }

File: src/reports/org/apache/jmeter/report/gui/action/ReportExitCommand.java
Patch:
@@ -50,6 +50,7 @@ public ReportExitCommand() {
      *
      * @return The ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
@@ -60,6 +61,7 @@ public Set<String> getActionNames() {
      * @param e
      *            Description of Parameter
      */
+    @Override
     public void doAction(ActionEvent e) {
         ReportActionRouter.getInstance().doActionNow(
                 new ActionEvent(e.getSource(), e.getID(),

File: src/reports/org/apache/jmeter/report/gui/action/ReportHelp.java
Patch:
@@ -75,6 +75,7 @@ public class ReportHelp implements Command {
     /**
      * @see org.apache.jmeter.gui.action.Command#doAction(ActionEvent)
      */
+    @Override
     public void doAction(ActionEvent e) {
         if (helpWindow == null) {
             helpWindow = new JDialog(new Frame(),// independent frame to
@@ -115,6 +116,7 @@ private void resetPage(String source) {
     /**
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }

File: src/reports/org/apache/jmeter/report/gui/action/ReportLoad.java
Patch:
@@ -55,10 +55,12 @@ public ReportLoad() {
         super();
     }
 
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
 
+    @Override
     public void doAction(ActionEvent e) {
         boolean merging = e.getActionCommand().equals("merge");
 

File: src/reports/org/apache/jmeter/report/gui/action/ReportRemove.java
Patch:
@@ -48,10 +48,12 @@ public ReportRemove() {
      *
      * @return the ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
 
+    @Override
     public void doAction(ActionEvent e) {
         ReportActionRouter.getInstance().actionPerformed(
                 new ActionEvent(e.getSource(), e.getID(),

File: src/reports/org/apache/jmeter/report/gui/action/ReportSave.java
Patch:
@@ -69,10 +69,12 @@ public ReportSave() {
      *
      * @return the ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
 
+    @Override
     public void doAction(ActionEvent e) throws IllegalUserActionException {
         HashTree subTree = null;
         if (!commands.contains(e.getActionCommand())) {

File: src/reports/org/apache/jmeter/report/gui/action/ReportSaveGraphics.java
Patch:
@@ -66,10 +66,12 @@ public ReportSaveGraphics() {
      *
      * @return the ActionNames value
      */
+    @Override
     public Set<String> getActionNames() {
         return commands;
     }
 
+    @Override
     public void doAction(ActionEvent e) throws IllegalUserActionException {
         JMeterGUIComponent component = null;
         JComponent comp = null;

File: src/reports/org/apache/jmeter/report/gui/tree/ReportTreeNode.java
Patch:
@@ -145,16 +145,19 @@ public String getDocAnchor() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void setName(String name) {
         ((TestElement) getUserObject()).setName(name);
     }
 
     /** {@inheritDoc} */
+    @Override
     public String getName() {
         return ((TestElement) getUserObject()).getName();
     }
 
     /** {@inheritDoc} */
+    @Override
     public void nameChanged() {
         treeModel.nodeChanged(this);
     }

File: src/reports/org/apache/jmeter/report/writers/AbstractReportWriter.java
Patch:
@@ -43,20 +43,23 @@ public AbstractReportWriter() {
      * Subclasses need to implement this method and provide the necessary
      * logic to produce a ReportSummary object and write the report
      */
+    @Override
     public abstract ReportSummary writeReport(TestElement element);
 
     /**
      * The method simply returns the target directory and doesn't
      * validate it. the abstract class expects some other class will
      * validate the target directory.
      */
+    @Override
     public String getTargetDirectory() {
         return getPropertyAsString(TARGET_DIRECTORY);
     }
 
     /**
      * Set the target directory where the report should be saved
      */
+    @Override
     public void setTargetDirectory(String directory) {
         setProperty(TARGET_DIRECTORY,directory);
     }

File: src/reports/org/apache/jmeter/report/writers/gui/HTMLReportWriterGui.java
Patch:
@@ -77,6 +77,7 @@ private void init() {// called from ctor, so must not be overridable
     /* (non-Javadoc)
      * @see org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()
      */
+    @Override
     public TestElement createTestElement() {
         HTMLReportWriter element = new HTMLReportWriter();
         modifyTestElement(element);
@@ -86,6 +87,7 @@ public TestElement createTestElement() {
     /* (non-Javadoc)
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(org.apache.jmeter.testelement.TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement element) {
         this.configureTestElement(element);
         HTMLReportWriter wr = (HTMLReportWriter)element;

File: src/reports/org/apache/jmeter/testelement/AbstractChart.java
Patch:
@@ -190,6 +190,7 @@ public void setHeight(String height) {
      * 3. pass the data to the chart library
      * 4. return the generated chart
      */
+    @Override
     public abstract JComponent renderChart(List<DataSet> data);
 
     /**

File: src/reports/org/apache/jmeter/testelement/AbstractTable.java
Patch:
@@ -145,6 +145,7 @@ public void addTestElement(TestElement el) {
      * The statistics should be like the aggregate listener.
      */
     @SuppressWarnings("rawtypes") // TODO fix this when there is a real implementation
+    @Override
     public abstract String[][] getTableData(List data);
 
 }

File: src/core/org/apache/jmeter/reporters/gui/ResultActionGui.java
Patch:
@@ -46,6 +46,7 @@ public ResultActionGui() {
     /**
      * @see org.apache.jmeter.gui.JMeterGUIComponent#getStaticLabel()
      */
+    @Override
     public String getLabelResource() {
         return "resultaction_title"; //$NON-NLS-1$
     }
@@ -62,6 +63,7 @@ public void configure(TestElement el) {
     /**
      * @see org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()
      */
+    @Override
     public TestElement createTestElement() {
         ResultAction resultAction = new ResultAction();
         modifyTestElement(resultAction);
@@ -73,6 +75,7 @@ public TestElement createTestElement() {
      *
      * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
+    @Override
     public void modifyTestElement(TestElement te) {
         super.configureTestElement(te);
         ((OnErrorTestElement) te).setErrorAction(errorPanel.getOnErrorSetting());

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -454,6 +454,9 @@ private SampleResult process_sampler(Sampler current, Sampler parent, JMeterCont
                     if (result.isStopTestNow() || (!result.isSuccessful() && onErrorStopTestNow)) {
                         stopTestNow();
                     }
+                    if(result.isStartNextThreadLoop()) {
+                        threadContext.setRestartNextLoop(true);
+                    }
                 } else {
                     compiler.done(pack); // Finish up
                 }

File: src/examples/org/apache/jmeter/examples/sampler/ExampleSampler.java
Patch:
@@ -61,6 +61,7 @@ public ExampleSampler() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public SampleResult sample(Entry e) {
         trace("sample()");
         SampleResult res = new SampleResult();

File: src/examples/org/apache/jmeter/examples/sampler/gui/ExampleSamplerGui.java
Patch:
@@ -56,6 +56,7 @@ public ExampleSamplerGui() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public String getLabelResource() {
         return "example_title"; // $NON-NLS-1$
     }
@@ -72,6 +73,7 @@ public void configure(TestElement element) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public TestElement createTestElement() {
         ExampleSampler sampler = new ExampleSampler();
         modifyTestElement(sampler);
@@ -81,6 +83,7 @@ public TestElement createTestElement() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public void modifyTestElement(TestElement te) {
         te.clear();
         configureTestElement(te);

File: src/examples/org/apache/jmeter/examples/testbeans/example1/Example1.java
Patch:
@@ -35,6 +35,7 @@ public class Example1 extends AbstractSampler implements TestBean {
 
     private static final long serialVersionUID = 240L;
 
+    @Override
     public SampleResult sample(Entry e) {
         SampleResult res = new SampleResult();
         res.setSampleLabel(getName());

File: src/examples/org/apache/jmeter/examples/testbeans/example2/Example2.java
Patch:
@@ -35,6 +35,7 @@ public class Example2 extends AbstractSampler implements TestBean {
 
     private static final long serialVersionUID = 240L;
 
+    @Override
     public SampleResult sample(Entry e) {
         SampleResult res = new SampleResult();
         res.setSampleLabel(getName());

File: src/examples/org/apache/jmeter/examples/testbeans/example3/Example3.java
Patch:
@@ -43,6 +43,7 @@ public class Example3 extends AbstractSampler implements TestBean {
     private File myFile1;
     private String myFile2;
 
+    @Override
     public SampleResult sample(Entry ignored) {
         SampleResult res = new SampleResult();
         res.setSampleLabel(getName());

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java
Patch:
@@ -209,6 +209,7 @@ public MonitorModel createNewMonitorModel(URL url) {
      * clear listeners, subsequent "run" will not notify the gui of data
      * changes.
      */
+    @Override
     public void clearData() {
         for (List<MonitorModel> modelList : this.serverListMap.values()) {
             modelList.clear();

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorGraph.java
Patch:
@@ -87,6 +87,7 @@ public void setThread(boolean thread) {
      * The method will first check to see if the graph is visible. If it is, it
      * will repaint the graph.
      */
+    @Override
     public void updateGui(final MonitorModel model) {
         if (this.isShowing()) {
             this.current = model;
@@ -130,13 +131,15 @@ public void paintComponent(Graphics g) {
     /**
      * updateGui() will call repaint
      */
+    @Override
     public void updateGui() {
         repaint();
     }
 
     /**
      * clear will repaint the graph
      */
+    @Override
     public void clearData() {
         paintComponent(getGraphics());
         this.repaint();

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorHealthPanel.java
Patch:
@@ -113,6 +113,7 @@ private void init() {// called from ctor, so must not be overridable
      *
      * @param model
      */
+    @Override
     public void addSample(MonitorModel model) {
         if (serverPanelMap.containsKey(model.getURL())) {
             ServerPanel pane = null;
@@ -136,6 +137,7 @@ public void addSample(MonitorModel model) {
      * clear will clear the hashmap, remove all ServerPanels from the servers
      * pane, and update the ui.
      */
+    @Override
     public void clearData() {
         this.serverPanelMap.clear();
         this.servers.removeAll();

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorModel.java
Patch:
@@ -101,6 +101,7 @@ public String toString() {
     /**
      * clear will create a new MonitorStats object.
      */
+    @Override
     public void clearData() {
         current = new MonitorStats(0, 0, 0, 0, 0, "", "", "", System.currentTimeMillis());
     }

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorPerformancePanel.java
Patch:
@@ -253,6 +253,7 @@ private JPanel createRightGridLabels() {
      * MonitorAccumModel will call this method to notify the component data has
      * changed.
      */
+    @Override
     public synchronized void addSample(MonitorModel model) {
         if (!SERVERMAP.containsKey(model.getURL())) {
             DefaultMutableTreeNode newnode = new DefaultMutableTreeNode(model);
@@ -275,6 +276,7 @@ public synchronized void addSample(MonitorModel model) {
      * node. From the node, we get the UserObject used to create the treenode in
      * the constructor.
      */
+    @Override
     public void valueChanged(TreeSelectionEvent e) {
         // we check to see if the lastSelectedPath is null
         // after we clear, it would return null
@@ -294,6 +296,7 @@ public void valueChanged(TreeSelectionEvent e) {
      * clear will remove all child nodes from the ROOTNODE, clear the HashMap,
      * update the graph and jpanel for the server tree.
      */
+    @Override
     public void clearData() {
         this.SERVERMAP.clear();
         ROOTNODE.removeAllChildren();

File: src/monitor/components/org/apache/jmeter/visualizers/ServerPanel.java
Patch:
@@ -184,6 +184,7 @@ private static ImageIcon getLoadImageIcon(int load) {
      * Method will update the ServerPanel's health, load, and timestamp. For
      * efficiency, it uses the static method to lookup the images.
      */
+    @Override
     public void updateGui(MonitorModel stat) {
         // this.DATA = null;
         // this.DATA = stat;
@@ -196,6 +197,7 @@ public void updateGui(MonitorModel stat) {
     /**
      * update the gui
      */
+    @Override
     public void updateGui() {
         this.repaint();
     }

File: src/monitor/model/org/apache/jmeter/monitor/model/JvmImpl.java
Patch:
@@ -31,11 +31,13 @@ public JvmImpl() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public Memory getMemory() {
         return this.memory;
     }
 
     /** {@inheritDoc} */
+    @Override
     public void setMemory(Memory mem) {
         this.memory = mem;
     }

File: src/monitor/model/org/apache/jmeter/monitor/model/WorkersImpl.java
Patch:
@@ -34,6 +34,7 @@ public WorkersImpl() {
         worker = new LinkedList<Worker>();
     }
 
+    @Override
     public List<Worker> getWorker() {
         return worker;
     }

File: src/monitor/model/org/apache/jmeter/monitor/parser/ParserImpl.java
Patch:
@@ -70,6 +70,7 @@ public ParserImpl(ObjectFactory factory) {
      * @param bytes
      * @return Status
      */
+    @Override
     public Status parseBytes(byte[] bytes) {
         try {
             InputSource is = new InputSource();
@@ -91,6 +92,7 @@ public Status parseBytes(byte[] bytes) {
      * @param content
      * @return Status
      */
+    @Override
     public Status parseString(String content) {
         try {
             InputSource is = new InputSource();
@@ -112,6 +114,7 @@ public Status parseString(String content) {
      * @param result
      * @return Status
      */
+    @Override
     public Status parseSampleResult(SampleResult result) {
         return parseBytes(result.getResponseData());
     }

File: src/components/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -52,7 +52,7 @@ public class ModuleController extends GenericController implements ReplaceableCo
 
     private static final String NODE_PATH = "ModuleController.node_path";// $NON-NLS-1$
 
-    private JMeterTreeNode selectedNode = null;
+    private transient JMeterTreeNode selectedNode = null;
 
     /**
      * No-arg constructor

File: src/functions/org/apache/jmeter/functions/AbstractHostIPName.java
Patch:
@@ -77,6 +77,7 @@ public synchronized void setParameters(Collection<CompoundVariable> parameters)
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/BeanShell.java
Patch:
@@ -147,6 +147,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/CSVRead.java
Patch:
@@ -121,6 +121,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/CharFunction.java
Patch:
@@ -84,6 +84,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/EscapeHtml.java
Patch:
@@ -86,6 +86,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/EscapeOroRegexpChars.java
Patch:
@@ -106,6 +106,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/EvalFunction.java
Patch:
@@ -79,6 +79,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/EvalVarFunction.java
Patch:
@@ -90,6 +90,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/FileToString.java
Patch:
@@ -136,6 +136,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/IntSum.java
Patch:
@@ -99,6 +99,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/IterationCounter.java
Patch:
@@ -114,6 +114,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/JavaScript.java
Patch:
@@ -117,6 +117,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/Jexl2Function.java
Patch:
@@ -114,6 +114,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc()
     {
         return desc;

File: src/functions/org/apache/jmeter/functions/JexlFunction.java
Patch:
@@ -108,6 +108,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc()
     {
         return desc;

File: src/functions/org/apache/jmeter/functions/LogFunction.java
Patch:
@@ -174,6 +174,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/LogFunction2.java
Patch:
@@ -110,6 +110,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/LongSum.java
Patch:
@@ -99,6 +99,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/Property.java
Patch:
@@ -100,6 +100,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/Property2.java
Patch:
@@ -98,6 +98,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/Random.java
Patch:
@@ -101,6 +101,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/RandomString.java
Patch:
@@ -124,6 +124,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/RegexFunction.java
Patch:
@@ -213,6 +213,7 @@ private void saveGroups(MatchResult result, String namep, JMeterVariables vars)
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/SamplerName.java
Patch:
@@ -82,6 +82,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/SetProperty.java
Patch:
@@ -97,6 +97,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/SplitFunction.java
Patch:
@@ -122,6 +122,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/TestPlanName.java
Patch:
@@ -64,6 +64,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/ThreadNumber.java
Patch:
@@ -56,6 +56,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/TimeFunction.java
Patch:
@@ -129,6 +129,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/UnEscape.java
Patch:
@@ -76,6 +76,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/UnEscapeHtml.java
Patch:
@@ -82,6 +82,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/Variable.java
Patch:
@@ -82,6 +82,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/functions/org/apache/jmeter/functions/XPath.java
Patch:
@@ -89,6 +89,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
     }
 
     /** {@inheritDoc} */
+    @Override
     public List<String> getArgumentDesc() {
         return desc;
     }

File: src/jorphan/org/apache/commons/cli/avalon/AbstractParserControl.java
Patch:
@@ -35,6 +35,7 @@ public abstract class AbstractParserControl implements ParserControl {
      * @return return true to halt, false to continue parsing
      * @see ParserControl#isFinished(int)
      */
+    @Override
     public boolean isFinished(int lastOptionCode) {
         return false;
     }

File: src/jorphan/org/apache/commons/jexl/bsf/JexlEngine.java
Patch:
@@ -81,6 +81,7 @@ public void undeclareBean(BSFDeclaredBean bean) throws BSFException {
     }
 
     /** {@inheritDoc} */
+    @Override
     public Object eval(String fileName, int lineNo, int colNo, Object expr)
             throws BSFException {
         if (expr == null) {
@@ -131,6 +132,7 @@ public void iexec(String fileName, int lineNo, int colNo, Object script)
     }
 
     /** {@inheritDoc} */
+    @Override
     public Object call(Object object, String name, Object[] args)
             throws BSFException {
         try {

File: src/jorphan/org/apache/jorphan/collections/SearchByClass.java
Patch:
@@ -92,6 +92,7 @@ public HashTree getSubTree(Object root) {
 
     /** {@inheritDoc} */
     @SuppressWarnings("unchecked")
+    @Override
     public void addNode(Object node, HashTree subTree) {
         if (searchClass.isAssignableFrom(node.getClass())) {
             objectsOfClass.add((T) node);
@@ -102,10 +103,12 @@ public void addNode(Object node, HashTree subTree) {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void subtractNode() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public void processPath() {
     }
 }
\ No newline at end of file

File: src/jorphan/org/apache/jorphan/gui/AbstractTreeTableModel.java
Patch:
@@ -74,20 +74,23 @@ public Object getRootNode() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public Object getValueAt(Object node, int col) {
         return null;
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean isCellEditable(Object node, int col) {
         return false;
     }
 
     /**
      * {@inheritDoc}
      */
+    @Override
     public void setValueAt(Object val, Object node, int column) {
     }
 

File: src/jorphan/org/apache/jorphan/math/NumberComparator.java
Patch:
@@ -33,6 +33,7 @@ public NumberComparator() {
     }
 
     /** {@inheritDoc} */
+    @Override
     public int compare(Number[] n1, Number[] n2) {
         if (n1[0].longValue() < n2[0].longValue()) {
             return -1;

File: src/jorphan/org/apache/jorphan/reflect/ClassFinder.java
Patch:
@@ -170,6 +170,7 @@ private static String[] addJarsInPath(String[] paths) {
                 File dir = new File(path);
                 if (dir.exists() && dir.isDirectory()) {
                     String[] jars = dir.list(new FilenameFilter() {
+                        @Override
                         public boolean accept(File f, String name) {
                             return name.endsWith(DOT_JAR);
                         }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -356,6 +356,8 @@ protected HTTPSampleResult sample(URL url, String method,
 
         } catch (IOException e) {
             res.sampleEnd();
+           // pick up headers if failed to execute the request
+            res.setRequestHeaders(getConnectionHeaders((HttpRequest) localContext.getAttribute(ExecutionContext.HTTP_REQUEST)));
             errorResult(e, res);
             return res;
         } catch (RuntimeException e) {

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -88,7 +88,7 @@ public class SampleResult implements Serializable {
     public static final String BINARY = "bin"; // $NON-NLS-1$
 
     /* empty arrays which can be returned instead of null */
-    private static final byte[] EMPTY_BA = new byte[0];
+    public static final byte[] EMPTY_BA = new byte[0];
 
     private static final SampleResult[] EMPTY_SR = new SampleResult[0];
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerFactory.java
Patch:
@@ -69,7 +69,7 @@ public static HTTPSamplerBase newInstance() {
      */
     public static HTTPSamplerBase newInstance(String alias) {
         if (alias ==null || alias.length() == 0) {
-            alias = DEFAULT_CLASSNAME;
+            return new HTTPSamplerProxy();
         }
         if (alias.equals(HTTP_SAMPLER_JAVA) || alias.equals(IMPL_JAVA)) {
             return new HTTPSamplerProxy(IMPL_JAVA);

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -172,7 +172,9 @@ protected void computeFromPostBody(HTTPSamplerBase sampler,
             // used when postData is pure xml (eg. an xml-rpc call) or for PUT
             } else if (postData.trim().startsWith("<?") || HTTPConstants.PUT.equals(sampler.getMethod())) {
                 sampler.addNonEncodedArgument("", postData, "");
-            } else if (contentType == null || contentType.startsWith(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED) ){
+            } else if (contentType == null || 
+                    (contentType.startsWith(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED) && 
+                            !isBinaryContent(contentType))) {
                 // It is the most common post request, with parameter name and values
                 // We also assume this if no content type is present, to be most backwards compatible,
                 // but maybe we should only parse arguments if the content type is as expected

File: src/components/org/apache/jmeter/control/ForeachController.java
Patch:
@@ -55,7 +55,7 @@ public ForeachController() {
      * @param startIndex Start index  of loop
      */
     public void setStartIndex(String startIndex) {
-        setProperty(START_INDEX, startIndex != null ? startIndex : "", "");
+        setProperty(START_INDEX, startIndex, "");
     }
 
     /**
@@ -77,7 +77,7 @@ public String getStartIndexAsString() {
      * @param endIndex End index  of loop
      */
     public void setEndIndex(String endIndex) {
-        setProperty(END_INDEX, endIndex != null ? endIndex : "", "");
+        setProperty(END_INDEX, endIndex, "");
     }
 
     /**

File: src/core/org/apache/jmeter/util/BSFTestElement.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.log.Logger;
 
 public abstract class BSFTestElement extends ScriptingTestElement
-    implements Serializable, Cloneable
+    implements Serializable
 {
     private static final long serialVersionUID = 233L;
 

File: src/core/org/apache/jmeter/util/JSR223TestElement.java
Patch:
@@ -48,7 +48,7 @@
 import org.apache.log.Logger;
 
 public abstract class JSR223TestElement extends ScriptingTestElement
-    implements Serializable, Cloneable, TestStateListener
+    implements Serializable, TestStateListener
 {
     /**
      * Initialization On Demand Holder pattern

File: src/core/org/apache/jmeter/util/JSR223TestElement.java
Patch:
@@ -173,10 +173,10 @@ protected Object processFileOrScript(ScriptEngine scriptEngine, Bindings binding
         boolean supportsCompilable = scriptEngine instanceof Compilable 
                 && !(scriptEngine.getClass().getName().equals("bsh.engine.BshScriptEngine"));
         if (!StringUtils.isEmpty(getFilename())) {
-            if(scriptFile.exists() && scriptFile.canRead()) {
+            if (scriptFile.exists() && scriptFile.canRead()) {
                 BufferedReader fileReader = null;
                 try {
-                    if(supportsCompilable) {
+                    if (supportsCompilable) {
                         String cacheKey = 
                                 getScriptLanguage()+"#"+
                                 scriptFile.getAbsolutePath()+"#"+
@@ -210,7 +210,7 @@ protected Object processFileOrScript(ScriptEngine scriptEngine, Bindings binding
             }  else {
                 throw new ScriptException("Script file '"+scriptFile.getAbsolutePath()+"' does not exist or is unreadable for element:"+getName());
             }
-        } else if(!StringUtils.isEmpty(getScript())){
+        } else if (!StringUtils.isEmpty(getScript())){
             return scriptEngine.eval(getScript(), bindings);
         } else {
             throw new ScriptException("Both script file and script text are empty for element:"+getName());            

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -50,7 +50,6 @@
 import org.apache.http.StatusLine;
 import org.apache.http.auth.AuthScope;
 import org.apache.http.auth.NTCredentials;
-import org.apache.http.auth.UsernamePasswordCredentials;
 import org.apache.http.client.CredentialsProvider;
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.HttpRequestRetryHandler;
@@ -506,15 +505,15 @@ protected HttpRequestRetryHandler createHttpRequestRetryHandler() {
                 if (proxyUser.length() > 0) {
                     ((AbstractHttpClient) httpClient).getCredentialsProvider().setCredentials(
                             new AuthScope(proxyHost, proxyPort),
-                            new UsernamePasswordCredentials(proxyUser, getProxyPass()));
+                            new NTCredentials(proxyUser, getProxyPass(), localHost, PROXY_DOMAIN));
                 }
             } else if (useStaticProxy) {
                 HttpHost proxy = new HttpHost(PROXY_HOST, PROXY_PORT);
                 clientParams.setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);
                 if (PROXY_USER.length() > 0) {
                     ((AbstractHttpClient) httpClient).getCredentialsProvider().setCredentials(
                             new AuthScope(PROXY_HOST, PROXY_PORT),
-                            new UsernamePasswordCredentials(PROXY_USER, PROXY_PASS));
+                            new NTCredentials(PROXY_USER, PROXY_PASS, localHost, PROXY_DOMAIN));
                 }
             }
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/Utils.java
Patch:
@@ -131,7 +131,7 @@ public static Destination lookupDestination(Context context, String name) throws
         if (o instanceof Destination){
             return (Destination) o;
         }
-        throw new NamingException("Found: "+name+"; expected Destination, but was: "+o.getClass().getName());
+        throw new NamingException("Found: "+name+"; expected Destination, but was: "+(o!=null ? o.getClass().getName() : "null"));
     }
 
     /**
@@ -162,7 +162,7 @@ public static Connection getConnection(Context ctx, String factoryName) throws J
                 return ((javax.jms.ConnectionFactory) objfac).createConnection();
             }
         }
-        throw new NamingException("Expected javax.jms.ConnectionFactory, found "+objfac.getClass().getName());
+        throw new NamingException("Expected javax.jms.ConnectionFactory, found "+(objfac != null ? objfac.getClass().getName(): "null"));
     }
     
     /**

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -301,7 +301,7 @@ public void threadStarted() {
             Object obj = context.lookup(getQueueConnectionFactory());
             if (!(obj instanceof QueueConnectionFactory)) {
                 String msg = "QueueConnectionFactory expected, but got "
-                    + obj.getClass().getName();
+                    + (obj != null ? obj.getClass().getName() : "null");
                 LOGGER.fatalError(msg);
                 throw new IllegalStateException(msg);
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java
Patch:
@@ -27,8 +27,8 @@
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.Map;
-import java.util.Set;
 import java.util.Map.Entry;
+import java.util.Set;
 
 import javax.swing.JPanel;
 import javax.swing.JSplitPane;
@@ -246,7 +246,8 @@ public static Map<String, String> getQueryMap(String query) {
             }
             String value = ""; // empty init // $NON-NLS-1$
             if (paramSplit.length > 1) {
-                value = paramSplit[1];
+                // We use substring to keep = sign (Bug 54055), we are sure = is present
+                value = param.substring(param.indexOf("=")+1); // $NON-NLS-1$
             }
             map.put(name, value);
         }

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -197,8 +197,10 @@ public MainFrame(TreeModel treeModel, JMeterTreeListener treeListener) {
         runningIndicator.setBorder(BorderFactory.createEmptyBorder());
 
         totalThreads = new JLabel("0"); // $NON-NLS-1$
+        totalThreads.setToolTipText(JMeterUtils.getResString("total_threads_tooltip")); // $NON-NLS-1$
         activeThreads = new JLabel("0"); // $NON-NLS-1$
-
+        activeThreads.setToolTipText(JMeterUtils.getResString("active_threads_tooltip")); // $NON-NLS-1$
+        
         warnIndicator = new JButton(warningIcon);
         warnIndicator.setMargin(new Insets(0, 0, 0, 0));
         // Transparent JButton with no border

File: src/core/org/apache/jmeter/util/keystore/JmeterKeyStore.java
Patch:
@@ -93,15 +93,15 @@ public void load(InputStream is, String pword) throws Exception {
                         }
                         v_certChains.add(x509certs);
                     }
+                    index++;
                 }
-                index++;
             }
     
             if (null == _key) {
                 throw new Exception("No key(s) found");
             }
             if (index <= endIndex-startIndex) {
-                LOG.warn("Did not find all requested aliases. Start="+startIndex+", end="+endIndex+", found="+index);
+                LOG.warn("Did not find all requested aliases. Start="+startIndex+", end="+endIndex+", found="+v_certChains.size());
             }
         }
     

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -240,7 +240,7 @@ public void modifyTestElement(TestElement el) {
             model.setCaptureHttpHeaders(httpHeaders.isSelected());
             model.setGroupingMode(groupingMode.getSelectedIndex());
             model.setAssertions(addAssertions.isSelected());
-            model.setSamplerTypeName(samplerTypeName.getSelectedIndex());
+            model.setSamplerTypeName(HTTPSamplerFactory.getImplementations()[samplerTypeName.getSelectedIndex()]);
             model.setSamplerRedirectAutomatically(samplerRedirectAutomatically.isSelected());
             model.setSamplerFollowRedirects(samplerFollowRedirects.isSelected());
             model.setUseKeepAlive(useKeepAlive.isSelected());

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -625,7 +625,7 @@ private JPanel createHTTPSamplerPanel() {
             m.addElement(s);
         }
         samplerTypeName = new JComboBox(m);
-        samplerTypeName.setSelectedIndex(0);
+        samplerTypeName.setSelectedItem(HTTPSamplerFactory.DEFAULT_CLASSNAME);
         samplerTypeName.addItemListener(this);
         JLabel label2 = new JLabel(JMeterUtils.getResString("proxy_sampler_type")); // $NON-NLS-1$
         label2.setLabelFor(samplerTypeName);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerFactory.java
Patch:
@@ -45,7 +45,7 @@ public final class HTTPSamplerFactory {
     //- JMX
 
     public static final String DEFAULT_CLASSNAME =
-        JMeterUtils.getPropDefault("jmeter.httpsampler", HTTP_SAMPLER_JAVA); //$NON-NLS-1$
+        JMeterUtils.getPropDefault("jmeter.httpsampler", IMPL_HTTP_CLIENT4); //$NON-NLS-1$
 
     private HTTPSamplerFactory() {
         // Not intended to be instantiated
@@ -84,7 +84,7 @@ public static HTTPSamplerBase newInstance(String alias) {
     }
 
     public static String[] getImplementations(){
-        return new String[]{IMPL_JAVA, IMPL_HTTP_CLIENT3_1, IMPL_HTTP_CLIENT4};
+        return new String[]{IMPL_HTTP_CLIENT4,IMPL_HTTP_CLIENT3_1,IMPL_JAVA};
     }
 
     public static HTTPAbstractImpl getImplementation(String impl, HTTPSamplerBase base){

File: src/core/org/apache/jmeter/gui/util/EscapeDialog.java
Patch:
@@ -45,7 +45,7 @@ public EscapeDialog(Frame frame, String title, boolean modal) {
     
     protected JRootPane createRootPane() { 
         JRootPane rootPane = new JRootPane();
-        Action actionListener = new AbstractAction() {    
+        Action escapeAction = new AbstractAction("ESCAPE") {    
             /**
              * 
              */
@@ -56,8 +56,8 @@ public void actionPerformed(ActionEvent e) {
             }
         };
         InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
-        inputMap.put(KeyStrokes.ESC, "ESCAPE");
-        rootPane.getActionMap().put("ESCAPE", actionListener);
+        inputMap.put(KeyStrokes.ESC, escapeAction.getValue(Action.NAME));
+        rootPane.getActionMap().put(escapeAction.getValue(Action.NAME), escapeAction);
         return rootPane;
     } 
 } 

File: src/core/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -1080,8 +1080,7 @@ public static String[] csvReadFile(BufferedReader infile, char delim)
         } // while not EOF
         if (ch == -1) {// EOF (or end of string) so collect any remaining data
             if (state == QUOTED) {
-                throw new IOException(state
-                        + " Missing trailing quote-char in quoted field:[\""
+                throw new IOException("Missing trailing quote-char in quoted field:[\""
                         + baos.toString() + "]");
             }
             // Do we have some data, or a trailing empty field?

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -74,6 +74,7 @@
 import org.apache.jmeter.gui.action.LoadDraggedFile;
 import org.apache.jmeter.gui.tree.JMeterCellRenderer;
 import org.apache.jmeter.gui.tree.JMeterTreeListener;
+import org.apache.jmeter.gui.util.EscapeDialog;
 import org.apache.jmeter.gui.util.JMeterMenuBar;
 import org.apache.jmeter.gui.util.JMeterToolBar;
 import org.apache.jmeter.samplers.Clearable;
@@ -341,7 +342,7 @@ public void showStoppingMessage(String host) {
         if (stoppingMessage != null){
             stoppingMessage.dispose();
         }
-        stoppingMessage = new JDialog(this, JMeterUtils.getResString("stopping_test_title"), true); //$NON-NLS-1$
+        stoppingMessage = new EscapeDialog(this, JMeterUtils.getResString("stopping_test_title"), true); //$NON-NLS-1$
         JLabel stopLabel = new JLabel(JMeterUtils.getResString("stopping_test") + ": " + host); //$NON-NLS-1$$NON-NLS-2$
         stopLabel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
         stoppingMessage.getContentPane().add(stopLabel);

File: src/core/org/apache/jmeter/gui/action/AboutCommand.java
Patch:
@@ -39,6 +39,7 @@
 import javax.swing.border.EmptyBorder;
 
 import org.apache.jmeter.gui.GuiPackage;
+import org.apache.jmeter.gui.util.EscapeDialog;
 import org.apache.jmeter.util.JMeterUtils;
 
 /**
@@ -83,7 +84,7 @@ public Set<String> getActionNames() {
     void about() {
         JFrame mainFrame = GuiPackage.getInstance().getMainFrame();
         if (about == null) {
-            about = new JDialog(mainFrame, "About Apache JMeter...", false);
+            about = new EscapeDialog(mainFrame, "About Apache JMeter...", false);
             about.addMouseListener(new MouseAdapter() {
                 @Override
                 public void mouseClicked(MouseEvent e) {

File: src/core/org/apache/jmeter/gui/action/Help.java
Patch:
@@ -29,6 +29,7 @@
 import javax.swing.JScrollPane;
 
 import org.apache.jmeter.gui.GuiPackage;
+import org.apache.jmeter.gui.util.EscapeDialog;
 import org.apache.jmeter.swing.HtmlPane;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.ComponentUtil;
@@ -69,7 +70,7 @@ public class Help implements Command {
      */
     public void doAction(ActionEvent e) {
         if (helpWindow == null) {
-            helpWindow = new JDialog(new Frame(),// independent frame to
+            helpWindow = new EscapeDialog(new Frame(),// independent frame to
                                                     // allow it to be overlaid
                                                     // by the main frame
                     JMeterUtils.getResString("help"),//$NON-NLS-1$

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -678,6 +678,7 @@ private void initializeProperties(CLArgsParser parser) {
         if (sample_variables != null){
             remoteProps.put(SampleEvent.SAMPLE_VARIABLES, sample_variables);
         }
+        jmeterProps.put("jmeter.version", JMeterUtils.getJMeterVersion());
     }
 
     /*

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -175,7 +175,7 @@ private static boolean validateFormat(String format){
 
     // Internal information only
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
-    private static final String FILEVERSION = "1374385"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1382180"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: test/src/org/apache/jmeter/save/TestSaveService.java
Patch:
@@ -71,8 +71,8 @@ public TestSaveService(String name) {
         super(name);
     }
     public void testPropfile() throws Exception {
-        assertTrue("Property Version mismatch", SaveService.checkPropertyVersion());            
-        assertTrue("Property File Version mismatch", SaveService.checkFileVersion());
+        assertTrue("Property Version mismatch, ensure you update SaveService#PROPVERSION field with _version property value from saveservice.properties", SaveService.checkPropertyVersion());            
+        assertTrue("Property File Version mismatch, ensure you update SaveService#FILEVERSION field with revision id of saveservice.properties", SaveService.checkFileVersion());
     }
     
     public void testVersions() throws Exception {

File: test/src/org/apache/jmeter/functions/PackageTest.java
Patch:
@@ -927,6 +927,7 @@ public void sumTest() throws Exception {
         checkSumNoVar(is,"3", new String[]{"1","2"});
         checkSum(is,"1", new String[]{"-1","1","1","1","-2","1"});
         checkSumNoVar(is,"1", new String[]{"-1","1","1","1","-2","1"});
+        checkSumNoVar(is,"-1", new String[]{"-1","1","1","1","-2","-1"});
         checkSum(is,maxIntVal, new String[]{maxIntVal,"0"});
         checkSum(is,minIntVal, new String[]{maxIntVal,"1"}); // wrap-round check
         }
@@ -937,6 +938,7 @@ public void sumTest() throws Exception {
         checkSum(ls,"1", new String[]{"-1","1","1","1","-1","0"});
         checkSumNoVar(ls,"3", new String[]{"1","2"});
         checkSumNoVar(ls,"1", new String[]{"-1","1","1","1","-1","0"});
+        checkSumNoVar(ls,"0", new String[]{"-1","1","1","1","-1","-1"});
         String maxIntVal_1 = Long.toString(1+(long)Integer.MAX_VALUE);
         checkSum(ls,maxIntVal, new String[]{maxIntVal,"0"});
         checkSum(ls,maxIntVal_1, new String[]{maxIntVal,"1"}); // no wrap-round check

File: src/core/org/apache/jmeter/engine/util/ValueTransformer.java
Patch:
@@ -33,21 +33,21 @@ interface ValueTransformer {
      * @param property
      * @return the transformed property
      */
-    public JMeterProperty transformValue(JMeterProperty property) throws InvalidVariableException;
+    JMeterProperty transformValue(JMeterProperty property) throws InvalidVariableException;
 
     /**
      * Set the master function for the value transformer. This handles
      * converting strings to functions.
      *
      * @param masterFunction
      */
-    public void setMasterFunction(CompoundVariable masterFunction);
+    void setMasterFunction(CompoundVariable masterFunction);
 
     /**
      * Set the variable names and values used to reverse replace functions with
      * strings, and undo functions to raw values.
      *
      * @param vars
      */
-    public void setVariables(Map<String, String> vars);
+    void setVariables(Map<String, String> vars);
 }

File: src/jorphan/org/apache/jorphan/math/StatCalculator.java
Patch:
@@ -156,7 +156,7 @@ public T getPercentPoint(double percent) {
      * Returns the distribution of the values in the list.
      *
      * @return map containing either Integer or Long keys; entries are a Number array containing the key and the [Integer] count.
-     * TODO - why is the key value also stored in the entry array?
+     * TODO - why is the key value also stored in the entry array? See Bug 53825
      */
     public Map<Number, Number[]> getDistribution() {
         Map<Number, Number[]> items = new HashMap<Number, Number[]>();

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -514,7 +514,7 @@ public static String nullifyIfEmptyTrimmed(final String input) {
     }
 
     /**
-     * Check that value is not empty (""), not null and not whitespace only.
+     * Check that value is empty (""), null or whitespace only.
      * @param value Value
      * @return true if the String is not empty (""), not null and not whitespace only.
      */

File: src/protocol/native/org/apache/jmeter/protocol/system/gui/SystemSamplerGui.java
Patch:
@@ -54,9 +54,9 @@ public class SystemSamplerGui extends AbstractSamplerGui implements ItemListener
     
     private JCheckBox checkReturnCode;
     private JLabeledTextField desiredReturnCode;
-    private final FilePanelEntry stdin = new FilePanelEntry("stdin ");
-    private final FilePanelEntry stdout = new FilePanelEntry("stdout");
-    private final FilePanelEntry stderr = new FilePanelEntry("stderr");
+    private final FilePanelEntry stdin = new FilePanelEntry(JMeterUtils.getResString("system_sampler_stdin"));
+    private final FilePanelEntry stdout = new FilePanelEntry(JMeterUtils.getResString("system_sampler_stdout"));
+    private final FilePanelEntry stderr = new FilePanelEntry(JMeterUtils.getResString("system_sampler_stderr"));
     private JLabeledTextField directory;
     private JLabeledTextField command;
     private ArgumentsPanel argsPanel;

File: src/protocol/native/org/apache/jmeter/protocol/system/StreamCopier.java
Patch:
@@ -28,6 +28,7 @@
 
 /**
  * Thread that copies a stream in the background; closes both input and output streams.
+ * @since 2.8
  */
 class StreamCopier extends Thread {
 
@@ -37,7 +38,8 @@ class StreamCopier extends Thread {
     private final OutputStream os;
 
 	/**
-	 * @param is {@link InputStream}
+     * @param is {@link InputStream}
+	 * @param is {@link OutputStream}
 	 * @throws IOException 
 	 */
 	StreamCopier(InputStream is, OutputStream os) throws IOException {

File: src/core/org/apache/jmeter/save/ScriptWrapperConverter.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.jmeter.save;
 
 import org.apache.jmeter.save.converters.ConversionHelp;
+import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.HashTree;
 
 import com.thoughtworks.xstream.mapper.Mapper;
@@ -37,6 +38,7 @@ public class ScriptWrapperConverter implements Converter {
 
     private static final String ATT_PROPERTIES = "properties"; // $NON-NLS-1$
     private static final String ATT_VERSION = "version"; // $NON-NLS-1$
+    private static final String ATT_JMETER = "jmeter"; // $NON-NLS-1$
 
     /**
      * Returns the converter version; used to check for possible
@@ -68,6 +70,7 @@ public void marshal(Object arg0, HierarchicalStreamWriter writer, MarshallingCon
         ConversionHelp.setOutVersion(version);// Ensure output follows version
         writer.addAttribute(ATT_VERSION, version);
         writer.addAttribute(ATT_PROPERTIES, SaveService.getPropertiesVersion());
+        writer.addAttribute(ATT_JMETER, JMeterUtils.getJMeterVersion());
         writer.startNode(classMapper.serializedClass(wrap.testPlan.getClass()));
         context.convertAnother(wrap.testPlan);
         writer.endNode();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -816,8 +816,7 @@ private String sendPostData(HttpPost post)  throws IOException {
                    continue;
                }
                FormBodyPart formPart;
-               StringBody stringBody = new StringBody(arg.getValue(),
-                       Charset.forName(contentEncoding == null ? "US-ASCII" : contentEncoding));
+               StringBody stringBody = new StringBody(arg.getValue(), charset);
                formPart = new FormBodyPart(arg.getName(), stringBody);                   
                multiPart.addPart(formPart);
             }

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java
Patch:
@@ -82,7 +82,7 @@ public class JavaSampler extends AbstractSampler implements TestStateListener {
      * be registered for cleanup.
      * This is done to avoid using reflection on each registration
      */
-    private transient Map<String, Boolean> isToBeRegisteredCache = new ConcurrentHashMap<String, Boolean>();
+    private Map<String, Boolean> isToBeRegisteredCache = new ConcurrentHashMap<String, Boolean>();
 
     /**
      * Set used to register all JavaSamplerClient and JavaSamplerContext. 

File: src/functions/org/apache/jmeter/functions/EscapeHtml.java
Patch:
@@ -44,7 +44,7 @@
  * Note that the commonly used apostrophe escape character (&amp;apos;)
  * is not a legal entity and so is not supported). </p>
  * 
- * @see StringEscapeUtils#escapeHtml(String) (Commons Lang)
+ * @see StringEscapeUtils#escapeHtml4(String) (Commons Lang)
  * @since 2.3.3
  */
 public class EscapeHtml extends AbstractFunction {

File: src/functions/org/apache/jmeter/functions/UnEscapeHtml.java
Patch:
@@ -40,7 +40,7 @@
  * If an entity is unrecognized, it is left alone, and inserted verbatim into the result string.
  * e.g. "&amp;gt;&amp;zzzz;x" will become "&gt;&amp;zzzz;x".
  * </p>
- * @see org.apache.commons.lang3.StringEscapeUtils#unescapeHtml(String)
+ * @see org.apache.commons.lang3.StringEscapeUtils#unescapeHtml4(String)
  * @since 2.3.3
  */
 public class UnEscapeHtml extends AbstractFunction {

File: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
Patch:
@@ -65,7 +65,7 @@ public class TestHTTPSamplersAgainstHttpMirrorServer extends JMeterTestCase {
     private static final String US_ASCII = "US-ASCII"; // $NON-NLS-1$
 
     private static final byte[] CRLF = { 0x0d, 0x0A };
-    private static final int MIRROR_PORT = 8081; // Different from TestHTTPMirrorThread port
+    private static final int MIRROR_PORT = 8182; // Different from TestHTTPMirrorThread port and standard mirror server
     private static byte[] TEST_FILE_CONTENT;
 
     private static File temporaryFile;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -199,6 +199,7 @@ public abstract class HTTPSamplerBase extends AbstractSampler
         HTTPConstants.OPTIONS,
         HTTPConstants.TRACE,
         HTTPConstants.DELETE,
+        HTTPConstants.PATCH,
         };
 
     private static final List<String> METHODLIST = Collections.unmodifiableList(Arrays.asList(METHODS));

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java
Patch:
@@ -38,6 +38,7 @@ public interface HTTPConstantsInterface {
     public static final String OPTIONS = "OPTIONS"; // $NON-NLS-1$
     public static final String TRACE = "TRACE"; // $NON-NLS-1$
     public static final String DELETE = "DELETE"; // $NON-NLS-1$
+    public static final String PATCH = "PATCH"; // $NON-NLS-1$
     public static final String CONNECT = "CONNECT"; // $NON-NLS-1$
     public static final String HEADER_AUTHORIZATION = "Authorization"; // $NON-NLS-1$
     public static final String HEADER_COOKIE = "Cookie"; // $NON-NLS-1$

File: src/components/org/apache/jmeter/config/KeystoreConfig.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.jmeter.config;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.testelement.TestStateListener;
 import org.apache.jmeter.util.JMeterUtils;

File: src/components/org/apache/jmeter/config/RandomVariableConfig.java
Patch:
@@ -21,7 +21,7 @@
 import java.text.DecimalFormat;
 import java.util.Random;
 
-import org.apache.commons.lang.math.NumberUtils;
+import org.apache.commons.lang3.math.NumberUtils;
 import org.apache.jmeter.engine.event.LoopIterationEvent;
 import org.apache.jmeter.engine.event.LoopIterationListener;
 import org.apache.jmeter.engine.util.NoConfigMerge;

File: src/components/org/apache/jmeter/extractor/RegexExtractor.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.jmeter.processor.PostProcessor;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.AbstractScopedTestElement;
@@ -167,7 +167,7 @@ private String getInputString(SampleResult result) {
                 : useHeaders() ? result.getResponseHeaders()
                 : useCode() ? result.getResponseCode() // Bug 43451
                 : useMessage() ? result.getResponseMessage() // Bug 43451
-                : useUnescapedBody() ? StringEscapeUtils.unescapeHtml(result.getResponseDataAsString())
+                : useUnescapedBody() ? StringEscapeUtils.unescapeHtml4(result.getResponseDataAsString())
                 : result.getResponseDataAsString() // Bug 36898
                 ;
        if (log.isDebugEnabled()) {

File: src/components/org/apache/jmeter/reporters/MailerModel.java
Patch:
@@ -36,7 +36,7 @@
 import javax.swing.event.ChangeEvent;
 import javax.swing.event.ChangeListener;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.AbstractTestElement;
 import org.apache.jmeter.util.JMeterUtils;

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -45,7 +45,7 @@
 import javax.swing.ListSelectionModel;
 import javax.swing.table.TableCellEditor;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;

File: src/core/org/apache/jmeter/gui/action/RawTextSearcher.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * Searcher implementation that searches text as is

File: src/core/org/apache/jmeter/gui/action/RegexpSearcher.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * Regexp search implementation

File: src/core/org/apache/jmeter/gui/action/SearchTreeDialog.java
Patch:
@@ -37,7 +37,7 @@
 import javax.swing.JFrame;
 import javax.swing.JPanel;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.Searchable;
 import org.apache.jmeter.gui.tree.JMeterTreeModel;

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -26,7 +26,7 @@
 import java.text.SimpleDateFormat;
 import java.util.Properties;
 
-import org.apache.commons.lang.CharUtils;
+import org.apache.commons.lang3.CharUtils;
 import org.apache.jmeter.save.CSVSaveService;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.util.JMeterUtils;

File: src/core/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -34,8 +34,8 @@
 import javax.swing.table.DefaultTableModel;
 
 import org.apache.commons.collections.map.LinkedMap;
-import org.apache.commons.lang.CharUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.CharUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.assertions.AssertionResult;
 import org.apache.jmeter.reporters.ResultCollector;
 import org.apache.jmeter.samplers.SampleEvent;

File: src/core/org/apache/jmeter/util/PropertiesBasedPrefixResolver.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Map;
 import java.util.Properties;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;

File: src/functions/org/apache/jmeter/functions/EscapeHtml.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
@@ -68,7 +68,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
             throws InvalidVariableException {
 
         String rawString = ((CompoundVariable) values[0]).execute();
-        return StringEscapeUtils.escapeHtml(rawString);
+        return StringEscapeUtils.escapeHtml4(rawString);
 
     }
 

File: src/functions/org/apache/jmeter/functions/RandomString.java
Patch:
@@ -22,8 +22,8 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.apache.commons.lang.RandomStringUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.RandomStringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;

File: src/functions/org/apache/jmeter/functions/UnEscape.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;

File: src/functions/org/apache/jmeter/functions/UnEscapeHtml.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
@@ -40,7 +40,7 @@
  * If an entity is unrecognized, it is left alone, and inserted verbatim into the result string.
  * e.g. "&amp;gt;&amp;zzzz;x" will become "&gt;&amp;zzzz;x".
  * </p>
- * @see org.apache.commons.lang.StringEscapeUtils#unescapeHtml(String)
+ * @see org.apache.commons.lang3.StringEscapeUtils#unescapeHtml(String)
  * @since 2.3.3
  */
 public class UnEscapeHtml extends AbstractFunction {
@@ -64,7 +64,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
             throws InvalidVariableException {
 
         String escapedString = ((CompoundVariable) values[0]).execute();
-        return StringEscapeUtils.unescapeHtml(escapedString);
+        return StringEscapeUtils.unescapeHtml4(escapedString);
 
     }
 

File: src/jorphan/org/apache/jorphan/math/StatCalculator.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.TreeMap;
 import java.util.Map.Entry;
 
-import org.apache.commons.lang.mutable.MutableLong;
+import org.apache.commons.lang3.mutable.MutableLong;
 
 /**
  * This class serves as a way to calculate the median, max, min etc. of a list of values.

File: src/jorphan/org/apache/jorphan/reflect/ClassTools.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
-import org.apache.commons.lang.ClassUtils;
+import org.apache.commons.lang3.ClassUtils;
 import org.apache.jorphan.util.JMeterException;
 
 /**

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/HttpDefaultsGui.java
Patch:
@@ -28,7 +28,7 @@
 import javax.swing.JPanel;
 import javax.swing.JTextField;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.config.gui.AbstractConfigGui;
 import org.apache.jmeter.gui.util.HorizontalPanel;

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/UrlConfigGui.java
Patch:
@@ -35,7 +35,7 @@
 import javax.swing.event.ChangeEvent;
 import javax.swing.event.ChangeListener;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.gui.util.HorizontalPanel;

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.commons.httpclient.URIException;
 import org.apache.commons.httpclient.util.DateParseException;
 import org.apache.commons.httpclient.util.DateUtil;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpRequestBase;
 import org.apache.jmeter.config.ConfigTestElement;

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/WebServiceSamplerGui.java
Patch:
@@ -37,7 +37,7 @@
 import javax.swing.border.Border;
 import javax.swing.border.EmptyBorder;
 
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.jmeter.gui.util.FilePanel;
 import org.apache.jmeter.gui.util.HorizontalPanel;
 import org.apache.jmeter.protocol.http.control.AuthManager;

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/URLCollection.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Collection;
 import java.util.Iterator;
 
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.jmeter.protocol.http.util.ConversionUtils;
 
 /**

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.protocol.http.config.MultipartUrlConfig;
 import org.apache.jmeter.protocol.http.control.gui.HttpTestSampleGui;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Map;
 import java.util.StringTokenizer;
 
-import org.apache.commons.lang.CharUtils;
+import org.apache.commons.lang3.CharUtils;
 import org.apache.jmeter.protocol.http.config.MultipartUrlConfig;
 import org.apache.jmeter.protocol.http.control.Header;
 import org.apache.jmeter.protocol.http.control.HeaderManager;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.http.Header;
 import org.apache.http.HttpConnection;
 import org.apache.http.HttpConnectionMetrics;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -44,7 +44,7 @@
 import java.util.concurrent.TimeoutException;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.config.ConfigTestElement;

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElementBeanInfo.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.testbeans.BeanInfoSupport;
 import org.apache.jmeter.testbeans.gui.TypeEditor;
 import org.apache.jorphan.logging.LoggingManager;

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java
Patch:
@@ -25,7 +25,7 @@
 import javax.naming.InitialContext;
 import javax.naming.NamingException;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/Receiver.java
Patch:
@@ -26,7 +26,7 @@
 import javax.jms.MessageConsumer;
 import javax.jms.Session;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.protocol.jms.Utils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -25,7 +25,7 @@
 import javax.jms.TextMessage;
 import javax.naming.NamingException;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.protocol.jms.Utils;
 import org.apache.jmeter.protocol.jms.client.InitialContextFactory;
 import org.apache.jmeter.protocol.jms.client.ReceiveSubscriber;

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
Patch:
@@ -39,7 +39,7 @@
 import javax.naming.directory.ModificationItem;
 import javax.naming.directory.SearchResult;
 
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.config.ConfigTestElement;

File: src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.config.ConfigTestElement;

File: src/protocol/native/org/apache/jmeter/protocol/system/gui/SystemSamplerGui.java
Patch:
@@ -28,7 +28,7 @@
 import javax.swing.JCheckBox;
 import javax.swing.JPanel;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.config.gui.ArgumentsPanel;

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPClientImpl.java
Patch:
@@ -32,7 +32,7 @@
 import java.io.OutputStream;
 import java.nio.charset.Charset;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.Properties;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Entry;

File: src/core/org/apache/jmeter/engine/ConvertListeners.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.jmeter.samplers.RemoteTestListenerWrapper;
 import org.apache.jmeter.samplers.Remoteable;
 import org.apache.jmeter.samplers.SampleListener;
-import org.apache.jmeter.testelement.TestListener;
+import org.apache.jmeter.testelement.TestStateListener;
 import org.apache.jmeter.testelement.ThreadListener;
 import org.apache.jmeter.threads.AbstractThreadGroup;
 import org.apache.jorphan.collections.HashTree;
@@ -60,10 +60,10 @@ public void addNode(Object node, HashTree subTree) {
                 }
                 try {
                     RemoteSampleListener rtl = new RemoteSampleListenerImpl(item);
-                    if (item instanceof TestListener && item instanceof SampleListener) {
+                    if (item instanceof TestStateListener && item instanceof SampleListener) { // TL - all
                         RemoteListenerWrapper wrap = new RemoteListenerWrapper(rtl);
                         subTree.replace(item, wrap);
-                    } else if (item instanceof TestListener) {
+                    } else if (item instanceof TestStateListener) {
                         RemoteTestListenerWrapper wrap = new RemoteTestListenerWrapper(rtl);
                         subTree.replace(item, wrap);
                     } else if (item instanceof SampleListener) {

File: src/core/org/apache/jmeter/engine/util/FunctionParser.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.jmeter.engine.StandardJMeterEngine;
 import org.apache.jmeter.functions.Function;
 import org.apache.jmeter.functions.InvalidVariableException;
-import org.apache.jmeter.testelement.TestListener;
+import org.apache.jmeter.testelement.TestStateListener;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
@@ -138,8 +138,8 @@ Object makeFunction(StringReader reader) throws InvalidVariableException {
                             throw new InvalidVariableException
                             ("Expected } after "+funcName+" function call in "+new String(cb, 0, nbRead));
                         }
-                        if (function instanceof TestListener) {
-                            StandardJMeterEngine.register((TestListener) function);
+                        if (function instanceof TestStateListener) {
+                            StandardJMeterEngine.register((TestStateListener) function);
                         }
                         return function;
                     } else { // Function does not exist, so treat as per missing variable

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -40,15 +40,16 @@
 import org.apache.jmeter.engine.event.LoopIterationEvent;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.samplers.SampleResult;
-import org.apache.jmeter.testelement.TestListener;
+import org.apache.jmeter.testelement.TestIterationListener;
+import org.apache.jmeter.testelement.TestStateListener;
 import org.apache.jmeter.testelement.property.BooleanProperty;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
 /**
  * Handles HTTP Caching
  */
-public class CacheManager extends ConfigTestElement implements TestListener, Serializable {
+public class CacheManager extends ConfigTestElement implements TestStateListener, TestIterationListener, Serializable {
 
     private static final long serialVersionUID = 234L;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -33,7 +33,8 @@
 import org.apache.commons.httpclient.cookie.CookiePolicy;
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.engine.event.LoopIterationEvent;
-import org.apache.jmeter.testelement.TestListener;
+import org.apache.jmeter.testelement.TestIterationListener;
+import org.apache.jmeter.testelement.TestStateListener;
 import org.apache.jmeter.testelement.property.BooleanProperty;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
@@ -50,7 +51,7 @@
  * Now uses Commons HttpClient parsing and matching code (since 2.1.2)
  *
  */
-public class CookieManager extends ConfigTestElement implements TestListener, Serializable {
+public class CookieManager extends ConfigTestElement implements TestStateListener, TestIterationListener, Serializable {
     private static final long serialVersionUID = 233L;
 
     private static final Logger log = LoggingManager.getLoggerForClass();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -67,7 +67,8 @@
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.TestElement;
-import org.apache.jmeter.testelement.TestListener;
+import org.apache.jmeter.testelement.TestIterationListener;
+import org.apache.jmeter.testelement.TestStateListener;
 import org.apache.jmeter.testelement.ThreadListener;
 import org.apache.jmeter.testelement.property.BooleanProperty;
 import org.apache.jmeter.testelement.property.CollectionProperty;
@@ -93,7 +94,7 @@
  *
  */
 public abstract class HTTPSamplerBase extends AbstractSampler
-    implements TestListener, ThreadListener, HTTPConstantsInterface {
+    implements TestStateListener, TestIterationListener, ThreadListener, HTTPConstantsInterface {
 
     private static final long serialVersionUID = 240L;
 

File: src/core/org/apache/jmeter/gui/action/KeyStrokes.java
Patch:
@@ -44,7 +44,7 @@ private KeyStrokes(){
     public static final KeyStroke CLEAR             = KeyStroke.getKeyStroke(KeyEvent.VK_E, CONTROL_MASK | InputEvent.SHIFT_DOWN_MASK);
     public static final KeyStroke ESC               = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
     public static final KeyStroke ENTER             = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
-    public static final KeyStroke FUNCTIONS         = KeyStroke.getKeyStroke(KeyEvent.VK_F, CONTROL_MASK);
+    public static final KeyStroke FUNCTIONS         = KeyStroke.getKeyStroke(KeyEvent.VK_F1, CONTROL_MASK);
     public static final KeyStroke SAVE_GRAPHICS     = KeyStroke.getKeyStroke(KeyEvent.VK_G, CONTROL_MASK);
     public static final KeyStroke SAVE_GRAPHICS_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_G, CONTROL_MASK | InputEvent.SHIFT_DOWN_MASK);
     public static final KeyStroke HELP              = KeyStroke.getKeyStroke(KeyEvent.VK_H, CONTROL_MASK);
@@ -56,6 +56,7 @@ private KeyStrokes(){
     public static final KeyStroke REMOTE_START_ALL  = KeyStroke.getKeyStroke(KeyEvent.VK_R, CONTROL_MASK | InputEvent.SHIFT_DOWN_MASK);
     public static final KeyStroke SAVE              = KeyStroke.getKeyStroke(KeyEvent.VK_S, CONTROL_MASK);
     public static final KeyStroke SAVE_ALL_AS       = KeyStroke.getKeyStroke(KeyEvent.VK_S, CONTROL_MASK | InputEvent.SHIFT_DOWN_MASK);
+    public static final KeyStroke SEARCH_TREE       = KeyStroke.getKeyStroke(KeyEvent.VK_F, CONTROL_MASK);
     public static final KeyStroke TOGGLE            = KeyStroke.getKeyStroke(KeyEvent.VK_T, CONTROL_MASK);
     public static final KeyStroke PASTE             = KeyStroke.getKeyStroke(KeyEvent.VK_V, CONTROL_MASK);
     public static final KeyStroke WHAT_CLASS        = KeyStroke.getKeyStroke(KeyEvent.VK_W, CONTROL_MASK);

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -490,7 +490,7 @@ private void makeSearchMenu() {
         // Search MENU
         searchMenu = makeMenuRes("menu_search"); //$NON-NLS-1$
 
-        JMenuItem search = makeMenuItemRes("menu_search", ActionNames.SEARCH_TREE); //$NON-NLS-1$
+        JMenuItem search = makeMenuItemRes("menu_search", 'F', ActionNames.SEARCH_TREE, KeyStrokes.SEARCH_TREE); //$NON-NLS-1$
         searchMenu.add(search);
         searchMenu.setEnabled(true);
 

File: src/core/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -185,9 +185,8 @@ public static void processSamples(String filename, Visualizer visualizer,
      * @throws JMeterError
      */
     private static SampleEvent makeResultFromDelimitedString(
-            final String[] parts, final SampleSaveConfiguration saveConfig, // may
-                                                                            // be
-                                                                            // updated
+            final String[] parts, 
+            final SampleSaveConfiguration saveConfig, // may be updated
             final long lineNumber, DateFormat dateFormat) {
 
         SampleResult result = null;

File: src/core/org/apache/jmeter/samplers/StatisticalSampleResult.java
Patch:
@@ -49,6 +49,7 @@ public StatisticalSampleResult(){// May be called by XStream
     @Deprecated
     public StatisticalSampleResult(long stamp, long elapsed) {
         super(stamp, elapsed);
+        this.elapsed = elapsed;
     }
 
     /**

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -429,7 +429,7 @@ public int numberOfActiveThreads() {
     public boolean verifyThreadsStopped() {
         boolean stoppedAll = true;
         if (delayedStartup){
-            stoppedAll &= verifyThreadStopped(threadStarter);
+            stoppedAll = verifyThreadStopped(threadStarter);
         }
         for (Thread t : allThreads.values()) {
             stoppedAll = stoppedAll && verifyThreadStopped(t);
@@ -497,6 +497,7 @@ private void pause(long ms){
         try {
             Thread.sleep(ms);
         } catch (InterruptedException e) {
+            // TODO Is this silent exception intended
         }
     }
 

File: src/components/org/apache/jmeter/visualizers/RespTimeGraphChart.java
Patch:
@@ -355,7 +355,8 @@ private double findMax(double _data[][]) {
         max = _data[0][0];
         for (int i = 0; i < _data.length; i++) {
             for (int j = 0; j < _data[i].length; j++) {
-                 if (Double.isNaN(max) || ((_data[i][j] != Double.NaN) && (_data[i][j] > max))) {
+                 if (Double.isNaN(max) || 
+                         ((!Double.isNaN(_data[i][j])) && (_data[i][j] > max))) {
                     max = _data[i][j];
                 }
             }

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -175,7 +175,7 @@ private static boolean validateFormat(String format){
 
     // Internal information only
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
-    private static final String FILEVERSION = "1372926"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1374385"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/components/org/apache/jmeter/visualizers/RespTimeGraphLineBean.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.awt.Color;
 
-public class LGraphLineBean {
+public class RespTimeGraphLineBean {
 
     private String label;
 
@@ -31,7 +31,7 @@ public class LGraphLineBean {
      * @param label
      * @param lineColor
      */
-    public LGraphLineBean(String label, Color lineColor) {
+    public RespTimeGraphLineBean(String label, Color lineColor) {
         super();
         this.label = label;
         this.lineColor = lineColor;

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -47,8 +47,8 @@ public class ThreadGroup extends AbstractThreadGroup {
     /** Ramp-up time */
     public final static String RAMP_TIME = "ThreadGroup.ramp_time";
 
-    /** Whether onDemand scheduler is being used */
-    public static final String ONDEMAND = "ThreadGroup.onDemand";
+    /** Whether thread startup is delayed until required */
+    public static final String DELAYED_START = "ThreadGroup.delayedStart";
 
     /** Whether scheduler is being used */
     public final static String SCHEDULER = "ThreadGroup.scheduler";
@@ -99,7 +99,7 @@ public void setScheduler(boolean Scheduler) {
     }
 
     public boolean getOnDemand() {
-        return getPropertyAsBoolean(ONDEMAND);
+        return getPropertyAsBoolean(DELAYED_START);
     }
 
     /**

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -175,7 +175,7 @@ private static boolean validateFormat(String format){
 
     // Internal information only
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
-    private static final String FILEVERSION = "1361414"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1372462"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -171,7 +171,7 @@ private static boolean validateFormat(String format){
 
     // This is written to JMX files by ScriptWrapperConverter
     private static String propertiesVersion = "";// read from properties file; written to JMX files
-    private static final String PROPVERSION = "2.4";// Expected version $NON-NLS-1$
+    private static final String PROPVERSION = "2.3";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -364,7 +364,6 @@ public static String getResponseAsString(SampleResult res) {
                     .append(", ").append(JMeterUtils.getResString("view_results_response_partial_message"))
                     .append("\n").append(res.getResponseDataAsString().substring(0, MAX_DISPLAY_SIZE)).append("\n...");
                 response = builder.toString();
-                log.warn(response);
             } else {
                 response = res.getResponseDataAsString();
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/SessionFilter.java
Patch:
@@ -174,6 +174,7 @@ protected CookieManager getCookieManager(String ipAddr)
             if(cm == null)
             {
                 cm = new CookieManager();
+                cm.testStarted();
                 cookieManagers.put(ipAddr,cm);
             }
             while(managersInUse.contains(cm))

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/AuthPanel.java
Patch:
@@ -249,7 +249,6 @@ public JPanel createAuthTablePanel() {
         authTable.setPreferredScrollableViewportSize(new Dimension(100, 70));
 
         TableColumn passwordColumn = authTable.getColumnModel().getColumn(AuthManager.COL_PASSWORD);
-        passwordColumn.setCellEditor(new DefaultCellEditor(new JPasswordField()));
         passwordColumn.setCellRenderer(new PasswordCellRenderer());
 
         JPanel panel = new JPanel(new BorderLayout(0, 5));

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java
Patch:
@@ -64,5 +64,6 @@ public interface HTTPConstantsInterface {
     public static final String LAST_MODIFIED = "Last-Modified"; // $NON-NLS-1$
     public static final String EXPIRES = "Expires"; // $NON-NLS-1$
     public static final String CACHE_CONTROL = "Cache-Control";  //e.g. public, max-age=259200
+    public static final String DATE = "Date";  //e.g. Date Header of response 
 
 }

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -171,11 +171,11 @@ private static boolean validateFormat(String format){
 
     // This is written to JMX files by ScriptWrapperConverter
     private static String propertiesVersion = "";// read from properties file; written to JMX files
-    private static final String PROPVERSION = "2.3";// Expected version $NON-NLS-1$
+    private static final String PROPVERSION = "2.4";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // read from saveservice.properties file// $NON-NLS-1$
-    private static final String FILEVERSION = "1332608"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "1361414"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -181,10 +181,10 @@ public void scheduleThread(JMeterThread thread)
     /**
      * This will schedule the time for the JMeterThread.
      *
-     * @param thread
-     * @param group
+     * @param thread JMeterThread
+     * @param group ThreadGroup
      */
-    private void scheduleThread(JMeterThread thread, ThreadGroup group) {
+    protected void scheduleThread(JMeterThread thread, ThreadGroup group) {
         // if true the Scheduler is enabled
         if (group.getScheduler()) {
             long now = System.currentTimeMillis();

File: test/src/org/apache/jmeter/protocol/http/control/TestCacheManager.java
Patch:
@@ -258,7 +258,7 @@ public void testNoCacheHttpClient() throws Exception{
         assertFalse("Should not find valid entry",this.cacheManager.inCache(url));
         ((HttpMethodStub)httpMethod).cacheControl="no-cache";
         this.cacheManager.saveDetails(httpMethod, sampleResultOK);
-        assertNull("Should find entry",getThreadCacheEntry(LOCAL_HOST));
+        assertNotNull("Should find entry",getThreadCacheEntry(LOCAL_HOST));
         assertFalse("Should not find valid entry",this.cacheManager.inCache(url));
     }
     

File: src/components/org/apache/jmeter/extractor/JSR223PostProcessor.java
Patch:
@@ -38,7 +38,7 @@ public class JSR223PostProcessor extends JSR223TestElement implements Cloneable,
     public void process() {
         try {
             ScriptEngine scriptEngine = getScriptEngine();
-            processFileOrScript(scriptEngine);
+            processFileOrScript(scriptEngine, null);
         } catch (ScriptException e) {
             log.warn("Problem in JSR223 script ", e);
         } catch (IOException e) {

File: src/components/org/apache/jmeter/modifiers/JSR223PreProcessor.java
Patch:
@@ -38,7 +38,7 @@ public class JSR223PreProcessor extends JSR223TestElement implements Cloneable,
     public void process() {
         try {
             ScriptEngine scriptEngine = getScriptEngine();
-            processFileOrScript(scriptEngine);
+            processFileOrScript(scriptEngine, null);
         } catch (ScriptException e) {
             log.warn("Problem in JSR223 script ", e);
         } catch (IOException e) {

File: src/components/org/apache/jmeter/timers/JSR223Timer.java
Patch:
@@ -38,7 +38,7 @@ public long delay() {
         long delay = 0;
         try {
             ScriptEngine scriptEngine = getScriptEngine();
-            Object o = processFileOrScript(scriptEngine);
+            Object o = processFileOrScript(scriptEngine, null);
             if (o == null) {
                 log.warn("Script did not return a value");
                 return 0;

File: test/src/org/apache/jmeter/protocol/http/control/TestCacheManager.java
Patch:
@@ -258,7 +258,7 @@ public void testNoCacheHttpClient() throws Exception{
         assertFalse("Should not find valid entry",this.cacheManager.inCache(url));
         ((HttpMethodStub)httpMethod).cacheControl="no-cache";
         this.cacheManager.saveDetails(httpMethod, sampleResultOK);
-        assertNotNull("Should find entry",getThreadCacheEntry(LOCAL_HOST));
+        assertNull("Should find entry",getThreadCacheEntry(LOCAL_HOST));
         assertFalse("Should not find valid entry",this.cacheManager.inCache(url));
     }
     

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -161,7 +161,7 @@ private void setCache(String lastModified, String cacheControl, String expires,
         if (useExpires) {// Check that we are processing Expires/CacheControl
             final String MAX_AGE = "max-age=";
             // TODO - check for other CacheControl attributes?
-            if (cacheControl != null && cacheControl.contains("public") && cacheControl.contains(MAX_AGE)) {
+            if (cacheControl != null && (cacheControl.contains("public") || cacheControl.contains("private")) && cacheControl.contains(MAX_AGE)) {
                 long maxAgeInSecs = Long.parseLong(
                         cacheControl.substring(cacheControl.indexOf(MAX_AGE)+MAX_AGE.length())
                             .split("[, ]")[0] // Bug 51932 - allow for optional trailing attributes

File: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
Patch:
@@ -1002,7 +1002,7 @@ private void checkGetRequest_Parameters(
             bodySent = dataSentToMirrorServer.substring(posDividerHeadersAndBody+2);
         }
         else {
-            fail("No header and body section found");
+            fail("No header and body section found in: ["+dataSentToMirrorServer+"]");
         }
         // No body should have been sent
         assertEquals(bodySent.length(), 0);

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/protocol/TrustAllSSLSocketFactory.java
Patch:
@@ -67,7 +67,7 @@ public void checkServerTrusted(
      * Factory method
      * @return New TrustAllSSLSocketFactory
      */
-    public static SocketFactory getDefault() {
+    public static synchronized SocketFactory getDefault() {
         return new TrustAllSSLSocketFactory();
     }
 

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -174,7 +174,7 @@ public class MainFrame extends JFrame implements TestListener, Remoteable, DropT
     /**
      * LogTarget that receives ERROR or FATAL
      */
-    private ErrorsAndFatalsCounterLogTarget errorsAndFatalsCounterLogTarget;
+    private transient ErrorsAndFatalsCounterLogTarget errorsAndFatalsCounterLogTarget;
 
     /**
      * Create a new JMeter frame.

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -1289,7 +1289,7 @@ public static final void runSafe(Runnable runnable) {
             try {
                 SwingUtilities.invokeAndWait(runnable);
             } catch (InterruptedException e) {
-                throw new Error(e);
+                log.warn("Interrupted in thread "+Thread.currentThread().getName(), e);
             } catch (InvocationTargetException e) {
                 throw new Error(e);
             }

File: src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
Patch:
@@ -365,6 +365,7 @@ private void init() {
         spane.setLeftComponent(myScrollPane);
         spane.setRightComponent(tabbedGraph);
         spane.setResizeWeight(.2);
+        spane.setBorder(null); // see bug jdk 4131528
         spane.setContinuousLayout(true);
 
         this.add(mainPanel, BorderLayout.NORTH);

File: src/core/org/apache/jmeter/gui/action/LoggerPanelEnableDisable.java
Patch:
@@ -64,14 +64,16 @@ public void doAction(ActionEvent e) {
         GuiPackage guiInstance = GuiPackage.getInstance();
         JSplitPane splitPane = ((JSplitPane)guiInstance.getLoggerPanel().getParent());
         if (ActionNames.LOGGER_PANEL_ENABLE_DISABLE.equals(e.getActionCommand())) {
-            if (guiInstance.getMenuItemLoggerPanel().getModel().isSelected()) {
+            if (!guiInstance.getLoggerPanel().isVisible()) {
                 splitPane.setDividerSize(UIManager.getInt("SplitPane.dividerSize"));
                 guiInstance.getLoggerPanel().setVisible(true);
                 splitPane.setDividerLocation(0.8);
+                guiInstance.getMenuItemLoggerPanel().getModel().setSelected(true);
             } else {
                 guiInstance.getLoggerPanel().clear();
                 guiInstance.getLoggerPanel().setVisible(false);
                 splitPane.setDividerSize(0);
+                guiInstance.getMenuItemLoggerPanel().getModel().setSelected(false);
             }
         }
     }

File: test/src/org/apache/jmeter/junit/JMeterTest.java
Patch:
@@ -358,7 +358,8 @@ public void runGUITitle() throws Exception {
                 && (title.toUpperCase(java.util.Locale.ENGLISH).indexOf("(BETA") == -1)
                 && (!title.matches("Example\\d+")) // Skip the example samplers ...
                 && (!name.startsWith("org.apache.jmeter.examples."))
-                )
+                && (!name.startsWith("org.apache.jmeter.report.")) // Skip report packages as implementation is incomplete
+                && (!name.equals("org.apache.jmeter.control.gui.ReportGui"))) // Skip report GUI as implementation is incomplete
             {// No, not a work in progress ...
                 String s = "component_reference.xml needs '" + title + "' anchor for " + name;
                 if (!ct) {

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -755,6 +755,7 @@ public void run() {
 
     
     public void clearData() {
+        logPanel.clear();
         if(DISPLAY_ERROR_FATAL_COUNTER) {
             errorsAndFatalsCounterLogTarget.clearData();
         }

File: src/core/org/apache/jmeter/gui/action/Clear.java
Patch:
@@ -65,6 +65,7 @@ public void doAction(ActionEvent e) {
             JMeterGUIComponent guiComp = guiPackage.getCurrentGui();
             guiComp.clearGui();
         } else {
+            guiPackage.getMainFrame().clearData();
             for (JMeterTreeNode node : guiPackage.getTreeModel().getNodesOfType(Clearable.class)) {
                 JMeterGUIComponent guiComp = guiPackage.getGui(node.getTestElement());
                 if (guiComp instanceof Clearable){

File: src/core/org/apache/jmeter/config/gui/RowDetailDialog.java
Patch:
@@ -100,7 +100,7 @@ public void actionPerformed(ActionEvent actionEvent) {
 	};
 	
 	public RowDetailDialog(ObjectTableModel tableModel, int selectedRow) {
-        super((JFrame) null, JMeterUtils.getResString("search_tree_title"), true); //$NON-NLS-1$
+        super((JFrame) null, JMeterUtils.getResString("detail"), true); //$NON-NLS-1$
         this.tableModel = tableModel;
         this.selectedRow = selectedRow;
         init();
@@ -111,8 +111,7 @@ private void init() {
 
         nameTF = new JLabeledTextField(JMeterUtils.getResString("name"), 20); //$NON-NLS-1$
         valueTA = new JLabeledTextArea(JMeterUtils.getResString("value")); //$NON-NLS-1$
-        valueTA.setPreferredSize(new Dimension(150, 300));
-        nameTF.setPreferredSize(new Dimension((int)Math.round(getWidth()*0.8), 40));
+        valueTA.setPreferredSize(new Dimension(450, 300));
         setValues(selectedRow);
         JPanel detailPanel = new JPanel();
         detailPanel.setLayout(new BorderLayout());

File: src/jorphan/org/apache/jorphan/reflect/ClassFinder.java
Patch:
@@ -253,7 +253,7 @@ public static List<String> findAnnotatedClasses(String[] strPathsOrJars,
      *
      * @return List containing discovered classes
      */
-    private static List<String> findClassesThatExtend(String[] strPathsOrJars,
+    public static List<String> findClassesThatExtend(String[] strPathsOrJars,
                 final Class<?>[] classNames, final boolean innerClasses,
                 String contains, String notContains, boolean annotations)
                 throws IOException  {

File: src/core/org/apache/jmeter/util/Calculator.java
Patch:
@@ -72,7 +72,7 @@ public void clear() {
      * 
      * @param newValue
      * 
-     * @see #addValue(long, int)
+     * @see #addValue(long)
      * @deprecated Use {@link #addSample(SampleResult)} instead
      */
     @Deprecated
@@ -119,7 +119,7 @@ public void addBytes(long newValue) {
      * Add details for a sample result, which may consist of multiple samples.
      * Updates the number of bytes read, error count, startTime and elapsedTime
      * @param res the sample result; might represent multiple values
-     * @see #addValue(long, int)
+     * @see #addSample(SampleResult)
      */
     public void addSample(SampleResult res) {
         addBytes(res.getBytes());

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -260,7 +260,6 @@ public static PatternCacheLRU getPatternCache() {
      * @param expression
      * @return compiled pattern
      *
-     * @throws  org.apache.oro.text.regex.MalformedPatternException (Runtime)
      * This should be caught for expressions that may vary (e.g. user input)
      *
      */
@@ -275,7 +274,6 @@ public static Pattern getPattern(String expression){
      * @param options e.g. READ_ONLY_MASK
      * @return compiled pattern
      *
-     * @throws  org.apache.oro.text.regex.MalformedPatternException (Runtime)
      * This should be caught for expressions that may vary (e.g. user input)
      *
      */

File: src/core/org/apache/jmeter/util/BeanShellServer.java
Patch:
@@ -85,6 +85,9 @@ public void run() {
                     Throwable t= e1.getCause();
                     if (t != null) {
                         log.warn(t.toString());
+                        if(t instanceof Error) {
+                            throw (Error)t;
+                        }
                     }
                 }
             }

File: src/core/org/apache/jmeter/samplers/RemoteListenerWrapper.java
Patch:
@@ -89,7 +89,7 @@ public void testStarted(String host) {
             if (ex instanceof RuntimeException){
                 throw (RuntimeException) ex;
             }
-}
+        }
     }
 
     public void testEnded(String host) {

File: src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java
Patch:
@@ -68,6 +68,8 @@ public class SystemSampler extends AbstractSampler {
             Arrays.asList(new String[]{
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 
+    public static final int DEFAULT_RETURN_CODE = 0;
+
 
     /**
      * Create a SystemSampler.
@@ -241,7 +243,7 @@ public Arguments getArguments() {
      * @param checkit boolean indicates if we check or not return code
      */
     public void setCheckReturnCode(boolean checkit) {
-        setProperty(CHECK_RETURN_CODE, (new Boolean(checkit)).toString());
+        setProperty(CHECK_RETURN_CODE, checkit);
     }
     
     /**

File: src/functions/org/apache/jmeter/functions/StringFromFile.java
Patch:
@@ -136,7 +136,7 @@ private synchronized void closeFile() {
         }
     }
     
-    private void openFile() {
+    private synchronized void openFile() {
         String tn = Thread.currentThread().getName();
         fileName = ((CompoundVariable) values[0]).execute();
 

File: src/protocol/native/org/apache/jmeter/protocol/system/SystemSampler.java
Patch:
@@ -98,7 +98,6 @@ public SampleResult sample(Entry entry) {
                 cmdLine.append(cmds.get(i+1));
             }
 
-            results.setSamplerData(cmdLine.toString());
             
             File directory = null;
             if(StringUtils.isEmpty(getDirectory())) {
@@ -112,6 +111,8 @@ public SampleResult sample(Entry entry) {
                     log.debug("Using configured directory:"+directory.getAbsolutePath());
                 }
             }
+            results.setSamplerData("Working Directory:"+directory.getAbsolutePath()+", Executing:" + cmdLine.toString());
+            
             NativeCommand nativeCommand = new NativeCommand(directory);
             
             String responseData = null;

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPArgumentsPanel.java
Patch:
@@ -47,7 +47,7 @@ public class HTTPArgumentsPanel extends ArgumentsPanel {
 
     @Override
     protected void initializeTableModel(ObjectTableModel model) {
-        if(tableModel == null) {
+        if(model == null) {
             tableModel = new ObjectTableModel(new String[] {
                     ArgumentsPanel.COLUMN_RESOURCE_NAMES_0, ArgumentsPanel.COLUMN_RESOURCE_NAMES_1, ENCODE_OR_NOT, INCLUDE_EQUALS },
                     HTTPArgument.class,

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -169,7 +169,7 @@ private static boolean validateFormat(String format){
 
     // This is written to JMX files by ScriptWrapperConverter
     private static String propertiesVersion = "";// read from properties file; written to JMX files
-    private static final String PROPVERSION = "2.2";// Expected version $NON-NLS-1$
+    private static final String PROPVERSION = "2.3";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // read from properties file// $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/action/ActionRouter.java
Patch:
@@ -94,7 +94,7 @@ private void performAction(final ActionEvent e) {
                     }
                     JMeterUtils.reportErrorToUser(msg);                        
                 } catch (Exception err) {
-                    log.error("", err);
+                    log.error("Error processing "+c.toString(), err);
                 }
             }
         } catch (NullPointerException er) {

File: src/reports/org/apache/jmeter/gui/util/ReportMenuFactory.java
Patch:
@@ -93,7 +93,7 @@ public final class ReportMenuFactory {
             }
 
             initializeMenus();
-        } catch (Throwable e) {
+        } catch (Exception e) {
             log.error("", e);
         }
     }
@@ -280,7 +280,7 @@ private static void initializeMenus() {
                 } catch (NoClassDefFoundError e) {
                     log.warn("Missing jar? Could not create " + name + ". " + e);
                     continue;
-                } catch (Throwable e) {
+                } catch (Exception e) {
                     log.warn("Could not instantiate " + name, e);
                     continue;
                 }

File: src/reports/org/apache/jmeter/report/gui/action/ReportSave.java
Patch:
@@ -110,7 +110,7 @@ public void doAction(ActionEvent e) throws IllegalUserActionException {
             ostream = new FileOutputStream(updateFile);
             SaveService.saveTree(subTree, ostream);
             log.info("saveTree");
-        } catch (Throwable ex) {
+        } catch (Exception ex) {
             ReportGuiPackage.getInstance().setReportPlanFile(null);
             log.error("", ex);
             throw new IllegalUserActionException("Couldn't save test plan to file: " + updateFile);

File: src/core/org/apache/jmeter/util/BSFJavaScriptEngine.java
Patch:
@@ -227,7 +227,7 @@ public void initialize(BSFManager mgr, String lang,
             }
         }
         catch (Throwable t) {
-
+            handleError(t);
         }
         finally {
             Context.exit();

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/DefaultSamplerCreator.java
Patch:
@@ -266,7 +266,6 @@ protected void computeContentEncoding(HTTPSamplerBase sampler,
     /**
      * Computes content encoding from request and if not found uses pageEncoding 
      * and formEncoding to see if URL was previously computed with a content type
-     * @param sampler {@link HTTPSamplerBase}
      * @param request {@link HttpRequestHdr}
      * @param pageEncodings Map<String, String>
      * @param formEncodings Map<String, String>

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java
Patch:
@@ -205,7 +205,7 @@ public String getSoapAction() {
     /**
      * Set the maintain session option.
      *
-     * @param cache
+     * @param maintainSession
      */
     public void setMaintainSession(boolean maintainSession) {
         setProperty(MAINTAIN_SESSION, maintainSession, MAINTAIN_SESSION_DEFAULT);

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
Patch:
@@ -73,6 +73,7 @@ public class LDAPExtSampler extends AbstractSampler implements TestListener {
     private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<String>(
             Arrays.asList(new String[]{
                     "org.apache.jmeter.protocol.ldap.config.gui.LdapConfigGui",
+                    "org.apache.jmeter.protocol.ldap.config.gui.LdapExtConfigGui",
                     "org.apache.jmeter.config.gui.SimpleConfigGui"}));
 
     /*

File: src/core/org/apache/jmeter/samplers/AbstractSampler.java
Patch:
@@ -19,9 +19,10 @@
 package org.apache.jmeter.samplers;
 
 import org.apache.jmeter.config.ConfigTestElement;
+import org.apache.jmeter.engine.util.ConfigMergabilityIndicator;
 import org.apache.jmeter.testelement.AbstractTestElement;
 
-public abstract class AbstractSampler extends AbstractTestElement implements Sampler {
+public abstract class AbstractSampler extends AbstractTestElement implements Sampler, ConfigMergabilityIndicator {
     private static final long serialVersionUID = 240L;
 
     /**

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BSFSampler.java
Patch:
@@ -132,6 +132,6 @@ public SampleResult sample(Entry e)// Entry tends to be ignored ...
      * {@inheritDoc}
      */
     public boolean applies(ConfigTestElement configElement) {
-        return true;
+        return false;
     }
 }

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -288,7 +288,9 @@ private void configureWithConfigElements(Sampler sam, List<ConfigTestElement> co
         for (ConfigTestElement config  : configs) {
             if (!(config instanceof NoConfigMerge)) 
             {
-                sam.addTestElement(config);
+                if(sam.applies(config)) {
+                    sam.addTestElement(config);
+                }
             }
         }
     }

File: src/core/org/apache/jmeter/threads/gui/ThreadGroupGui.java
Patch:
@@ -31,7 +31,6 @@
 
 import org.apache.jmeter.control.LoopController;
 import org.apache.jmeter.control.gui.LoopControlPanel;
-import org.apache.jmeter.gui.util.FocusRequester;
 import org.apache.jmeter.gui.util.JDateField;
 import org.apache.jmeter.gui.util.VerticalPanel;
 import org.apache.jmeter.testelement.TestElement;
@@ -240,7 +239,6 @@ private void init() {
         threadPanel.add(threadInput, BorderLayout.CENTER);
 
         threadPropsPanel.add(threadPanel);
-        new FocusRequester(threadInput);
 
         // RAMP-UP
         JPanel rampPanel = new JPanel(new BorderLayout(5, 0));

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -496,7 +496,7 @@ private String messageResponseHeaders(SampleResult res, boolean forcedHTTPS) {
                     headerLines[i]=headerLines[i].replaceFirst(parts[1].substring(0,HTTPS_PREFIX.length()), "http://");
                     continue;
                 }
-                if (forcedHTTPS && HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(parts[0]) || HTTPConstants.HEADER_SET_COOKIE.equalsIgnoreCase(parts[0]))
+                if (forcedHTTPS && (HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(parts[0]) || HTTPConstants.HEADER_SET_COOKIE.equalsIgnoreCase(parts[0])))
                 {
                     headerLines[i]=headerLines[i].replaceAll(" secure", "").trim(); //in forced https cookies need to be unsecured...
                 }

File: src/components/org/apache/jmeter/assertions/JSR223AssertionBeanInfo.java
Patch:
@@ -18,9 +18,9 @@
 
 package org.apache.jmeter.assertions;
 
-import org.apache.jmeter.util.BSFBeanInfoSupport;
+import org.apache.jmeter.util.JSR223BeanInfoSupport;
 
-public class JSR223AssertionBeanInfo extends BSFBeanInfoSupport {
+public class JSR223AssertionBeanInfo extends JSR223BeanInfoSupport {
 
     public JSR223AssertionBeanInfo() {
         super(JSR223Assertion.class);

File: src/components/org/apache/jmeter/extractor/JSR223PostProcessorBeanInfo.java
Patch:
@@ -18,9 +18,9 @@
 
 package org.apache.jmeter.extractor;
 
-import org.apache.jmeter.util.BSFBeanInfoSupport;
+import org.apache.jmeter.util.JSR223BeanInfoSupport;
 
-public class JSR223PostProcessorBeanInfo extends BSFBeanInfoSupport {
+public class JSR223PostProcessorBeanInfo extends JSR223BeanInfoSupport {
 
     public JSR223PostProcessorBeanInfo() {
         super(JSR223PostProcessor.class);

File: src/components/org/apache/jmeter/modifiers/JSR223PreProcessorBeanInfo.java
Patch:
@@ -18,9 +18,9 @@
 
 package org.apache.jmeter.modifiers;
 
-import org.apache.jmeter.util.BSFBeanInfoSupport;
+import org.apache.jmeter.util.JSR223BeanInfoSupport;
 
-public class JSR223PreProcessorBeanInfo extends BSFBeanInfoSupport {
+public class JSR223PreProcessorBeanInfo extends JSR223BeanInfoSupport {
 
     public JSR223PreProcessorBeanInfo() {
         super(JSR223PreProcessor.class);

File: src/components/org/apache/jmeter/timers/JSR223TimerBeanInfo.java
Patch:
@@ -18,9 +18,9 @@
 
 package org.apache.jmeter.timers;
 
-import org.apache.jmeter.util.BSFBeanInfoSupport;
+import org.apache.jmeter.util.JSR223BeanInfoSupport;
 
-public class JSR223TimerBeanInfo extends BSFBeanInfoSupport {
+public class JSR223TimerBeanInfo extends JSR223BeanInfoSupport {
 
     public JSR223TimerBeanInfo() {
         super(JSR223Timer.class);

File: src/components/org/apache/jmeter/visualizers/JSR223ListenerBeanInfo.java
Patch:
@@ -18,9 +18,9 @@
 
 package org.apache.jmeter.visualizers;
 
-import org.apache.jmeter.util.BSFBeanInfoSupport;
+import org.apache.jmeter.util.JSR223BeanInfoSupport;
 
-public class JSR223ListenerBeanInfo extends BSFBeanInfoSupport {
+public class JSR223ListenerBeanInfo extends JSR223BeanInfoSupport {
 
     public JSR223ListenerBeanInfo() {
         super(JSR223Listener.class);

File: src/core/org/apache/jmeter/util/BSFBeanInfoSupport.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.jmeter.util;
 
 import java.beans.PropertyDescriptor;
+import java.util.Arrays;
 import java.util.Properties;
 
 import org.apache.jmeter.testbeans.BeanInfoSupport;
@@ -39,7 +40,8 @@ public abstract class BSFBeanInfoSupport extends BeanInfoSupport {
         for (Object language : languages.keySet()) {
             LANGUAGE_TAGS[i++] = language.toString();
         }
-        LANGUAGE_TAGS[i] = "jexl";
+        LANGUAGE_TAGS[i] = "jexl"; // $NON-NLS-1$
+        Arrays.sort(LANGUAGE_TAGS);
     }
 
     protected BSFBeanInfoSupport(Class<?> beanClass) {

File: src/components/org/apache/jmeter/assertions/gui/XPathPanel.java
Patch:
@@ -185,9 +185,9 @@ public static boolean validXPath(String xpathString, boolean showDialog) {
         try {
             if (testDoc == null) {
                 Document doc = XPathUtil.makeDocumentBuilder(false, false, false, false).newDocument();
+                testDoc = doc;
                 Element el = testDoc.createElement("root"); //$NON-NLS-1$
                 doc.appendChild(el);
-                testDoc = doc;
 
             }
             XPathUtil.validateXPath(testDoc, xpathString);

File: src/core/org/apache/jmeter/visualizers/SamplingStatCalculator.java
Patch:
@@ -151,9 +151,7 @@ public Sample addSample(SampleResult res) {
             calculator.addBytes(res.getBytes());
             setStartTime(res);
             eCount = getCurrentSample().getErrorCount();
-            if (!res.isSuccessful()) {
-                eCount++;
-            }
+            eCount += res.getErrorCount();
             endTime = getEndTime(res);
             long howLongRunning = endTime - firstTime;
             throughput = ((double) calculator.getCount() / (double) howLongRunning) * 1000.0;

File: src/core/org/apache/jmeter/visualizers/RunningSample.java
Patch:
@@ -204,8 +204,9 @@ public int getIndex() {
     public void addSample(SampleResult res) {
         long aTimeInMillis = res.getTime();
         boolean aSuccessFlag = res.isSuccessful();
+        
+        counter+=res.getSampleCount();
 
-        counter++;
         long startTime = res.getStartTime();
         long endTime = res.getEndTime();
 
@@ -229,7 +230,7 @@ public void addSample(SampleResult res) {
         }
 
         if (!aSuccessFlag) {
-            errorCount++;
+            errorCount += res.getErrorCount();
         }
     }
 

File: src/monitor/model/org/apache/jmeter/monitor/parser/ParserImpl.java
Patch:
@@ -54,8 +54,7 @@ public ParserImpl(ObjectFactory factory) {
         try {
             SAXParserFactory parserFactory = SAXParserFactory.newInstance();
             parser = parserFactory.newSAXParser();
-            handler = new MonitorHandler();
-            handler.setObjectFactory(this.FACTORY);
+            handler = new MonitorHandler(this.FACTORY);
         } catch (SAXException e) {
             log.error("Failed to create the parser",e);
         } catch (ParserConfigurationException e) {

File: src/core/org/apache/jmeter/engine/util/ReplaceFunctionsWithStrings.java
Patch:
@@ -70,6 +70,9 @@ public JMeterProperty transformValue(JMeterProperty prop) throws InvalidVariable
         Pattern pattern = null;
         PatternCompiler compiler = new Perl5Compiler();
         String input = prop.getStringValue();
+        if(input == null) {
+            return prop;
+        }
         for(Entry<String, String> entry : getVariables().entrySet()){
             String key = entry.getKey();
             String value = entry.getValue();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -792,7 +792,8 @@ private String sendPostData(HttpPost post)  throws IOException {
 
             // Write the request to our own stream
             MultipartEntity multiPart = new MultipartEntity(
-                    getDoBrowserCompatibleMultipart() ? HttpMultipartMode.BROWSER_COMPATIBLE : HttpMultipartMode.STRICT);
+                    getDoBrowserCompatibleMultipart() ? HttpMultipartMode.BROWSER_COMPATIBLE : HttpMultipartMode.STRICT,
+                            null, Charset.forName(contentEncoding));
             // Create the parts
             // Add any parameters
             PropertyIterator args = getArguments().iterator();

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -289,7 +289,6 @@ private void configureWithConfigElements(Sampler sam, List<ConfigTestElement> co
             if (!(config instanceof NoConfigMerge)) 
             {
                 sam.addTestElement(config);
-                System.out.println(config.getName()+" "+config.getPropertyAsString(TestElement.GUI_CLASS));
             }
         }
     }

File: src/components/org/apache/jmeter/config/CSVDataSet.java
Patch:
@@ -23,6 +23,7 @@
 
 import org.apache.jmeter.engine.event.LoopIterationEvent;
 import org.apache.jmeter.engine.event.LoopIterationListener;
+import org.apache.jmeter.engine.util.NoConfigMerge;
 import org.apache.jmeter.save.CSVSaveService;
 import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.testbeans.TestBean;
@@ -59,7 +60,8 @@
  * threads with the same suffix.
  *
  */
-public class CSVDataSet extends ConfigTestElement implements TestBean, LoopIterationListener {
+public class CSVDataSet extends ConfigTestElement 
+    implements TestBean, LoopIterationListener, NoConfigMerge {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     private static final long serialVersionUID = 232L;

File: src/core/org/apache/jmeter/gui/action/ChangeParent.java
Patch:
@@ -79,6 +79,7 @@ private void changeParent(TestElement newParent, GuiPackage guiPackage, JMeterTr
         treeModel.removeNodeFromParent(currentNode);
         int childCount = currentNode.getChildCount();
         for (int i = 0; i < childCount; i++) {
+            // Using index 0 is voluntary as child is removed in next step and added to new parent
             JMeterTreeNode node = (JMeterTreeNode) currentNode.getChildAt(0);
             treeModel.removeNodeFromParent(node);
             treeModel.insertNodeInto(node, newNode, newNode.getChildCount());

File: src/functions/org/apache/jmeter/functions/BeanShell.java
Patch:
@@ -35,7 +35,7 @@
 
 /**
  * A function which understands BeanShell
- *
+ * @since 1.X
  */
 public class BeanShell extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/CSVRead.java
Patch:
@@ -48,7 +48,7 @@
  * __CSVRead(abc.csv,*TWO);
  *
  * __CSVRead(*ONE,1); etc
- *
+ * @since 1.9
  */
 public class CSVRead extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();

File: src/functions/org/apache/jmeter/functions/CharFunction.java
Patch:
@@ -31,6 +31,7 @@
 
 /**
  * Function to generate chars from a list of decimal or hex values
+ * @since 2.3.3
  */
 public class CharFunction extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/EscapeHtml.java
Patch:
@@ -45,6 +45,7 @@
  * is not a legal entity and so is not supported). </p>
  * 
  * @see StringEscapeUtils#escapeHtml(String) (Commons Lang)
+ * @since 2.3.3
  */
 public class EscapeHtml extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/EvalFunction.java
Patch:
@@ -35,7 +35,7 @@
  * Parameter: string to be evaluated
  *
  * Returns: the evaluated value
- *
+ * @since 2.3.1
  */
 public class EvalFunction extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/EvalVarFunction.java
Patch:
@@ -38,7 +38,7 @@
  * Parameter: string to be evaluated
  *
  * Returns: the evaluated value
- *
+ * @since 2.3.1
  */
 public class EvalVarFunction extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/FileToString.java
Patch:
@@ -46,7 +46,7 @@
  * - the whole text from a file
  * - or **ERR** if an error occurs
  * - value is also optionally saved in the variable for later re-use.
- *
+ * @since 2.4
  */
 public class FileToString extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();

File: src/functions/org/apache/jmeter/functions/IntSum.java
Patch:
@@ -32,6 +32,7 @@
  * Provides an intSum function that adds two or more integer values.
  *
  * @see LongSum
+ * @since 1.8.1
  */
 public class IntSum extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/IterationCounter.java
Patch:
@@ -31,6 +31,7 @@
 /**
  * Counter that can be referenced anywhere in the Thread Group. It can be configured per User (Thread Local)
  * or globally.
+ * @since 1.X
  */
 public class IterationCounter extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/JavaScript.java
Patch:
@@ -37,6 +37,7 @@
 
 /**
  * javaScript function implementation that executes a piece of JavaScript (not Java!) code and returns its value
+ * @since 1.9
  */
 public class JavaScript extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/Jexl2Function.java
Patch:
@@ -37,6 +37,7 @@
 
 /**
  * A function which understands Commons JEXL2
+ * @since 2.6
  */
 // For unit tests, see TestJexlFunction
 public class Jexl2Function extends AbstractFunction {

File: src/functions/org/apache/jmeter/functions/JexlFunction.java
Patch:
@@ -37,6 +37,7 @@
 
 /**
  * A function which understands Commons JEXL
+ * @since 2.2
  */
 // For unit tests, see TestJexlFunction
 public class JexlFunction extends AbstractFunction {

File: src/functions/org/apache/jmeter/functions/LogFunction.java
Patch:
@@ -45,7 +45,7 @@
  * </ul>
  * </p>
  * Returns: - the input string
- *
+ * @since 2.2
  */
 public class LogFunction extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();

File: src/functions/org/apache/jmeter/functions/LogFunction2.java
Patch:
@@ -43,7 +43,7 @@
  * </ul>
  * </p>
  * Returns: - Empty String (so can be used where return value would be a nuisance)
- *
+ * @since 2.2
  */
 public class LogFunction2 extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();

File: src/functions/org/apache/jmeter/functions/LongSum.java
Patch:
@@ -31,6 +31,7 @@
 /**
  * Provides a longSum function that adds two or more long values.
  * @see IntSum
+ * @since 2.3.2
  */
 public class LongSum extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/MachineIP.java
Patch:
@@ -22,6 +22,7 @@
 
 /**
  * Return Machine IP
+ * @since 2.6
  */
 public class MachineIP extends AbstractHostIPName {
 

File: src/functions/org/apache/jmeter/functions/MachineName.java
Patch:
@@ -22,6 +22,7 @@
 
 /**
  * Return Machine Host
+ * @since 1.X
  */
 public class MachineName extends AbstractHostIPName {
 

File: src/functions/org/apache/jmeter/functions/Property.java
Patch:
@@ -40,7 +40,7 @@
  * - the property value, but if not found:
  * - the default value, but if not defined:
  * - the property name itself
- *
+ * @since 2.0
  */
 public class Property extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/Property2.java
Patch:
@@ -45,7 +45,7 @@
  *
  * Returns: - the property value, but if not found - the default value, but if
  * not present - "1" (suitable for use in ThreadGroup GUI)
- *
+ * @since 2.0
  */
 public class Property2 extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/Random.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * Provides a Random function which returns a random long integer between a min
  * (first argument) and a max (second argument).
- *
+ * @since 1.9
  */
 public class Random extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/RandomString.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * Provides a RandomString function which returns a random String of length (first argument) 
  * using characters (second argument)
- *
+ * @since 2.6
  */
 public class RandomString extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();

File: src/functions/org/apache/jmeter/functions/RegexFunction.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.oro.text.regex.Util;
 /**
  * Implements regular expression parsing of sample results and variables
+ * @since 1.X
  */
 
 // @see TestRegexFunction for unit tests

File: src/functions/org/apache/jmeter/functions/SamplerName.java
Patch:
@@ -30,6 +30,7 @@
 
 /**
  * Function to return the name of the current sampler.
+ * @since 2.5
  */
 public class SamplerName extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/SetProperty.java
Patch:
@@ -39,7 +39,7 @@
  * ${__setProperty(propname,propvalue[,returnvalue?])}
  *
  * Returns: nothing or original value if the 3rd parameter is true
- *
+ * @since 2.1
  */
 public class SetProperty extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/SplitFunction.java
Patch:
@@ -53,7 +53,7 @@
  * <li>VARNAME_n - number of fields found</li>
  * <li>VARNAME_1..n - fields</li>
  * </ul>
- *
+ * @since 2.0.2
  */
 public class SplitFunction extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();

File: src/functions/org/apache/jmeter/functions/StringFromFile.java
Patch:
@@ -62,6 +62,7 @@
  * <li>the output variable name is resolved every time the function is invoked</li>
  * </ul>
  * Because function instances are shared, it does not make sense to use the thread number as part of the file name.
+ * @since 1.9
  */
 public class StringFromFile extends AbstractFunction implements TestListener {
     private static final Logger log = LoggingManager.getLoggerForClass();

File: src/functions/org/apache/jmeter/functions/TestPlanName.java
Patch:
@@ -29,6 +29,7 @@
 
 /**
  * Returns Test Plan name
+ * @since 2.6
  */
 public class TestPlanName extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/ThreadNumber.java
Patch:
@@ -28,6 +28,7 @@
 
 /**
  * Function to return the current thread number.
+ * @since 1.X
  */
 public class ThreadNumber extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/TimeFunction.java
Patch:
@@ -36,6 +36,7 @@
 
 /**
  * __time() function - returns the current time in milliseconds
+ * @since 2.2
  */
 public class TimeFunction extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/UnEscape.java
Patch:
@@ -35,6 +35,7 @@
  * unless the '\' is preceded by another '\'.
  * 
  * @see StringEscapeUtils#unescapeJava(String)
+ * @since 2.3.3
  */
 public class UnEscape extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/UnEscapeHtml.java
Patch:
@@ -41,6 +41,7 @@
  * e.g. "&amp;gt;&amp;zzzz;x" will become "&gt;&amp;zzzz;x".
  * </p>
  * @see org.apache.commons.lang.StringEscapeUtils#unescapeHtml(String)
+ * @since 2.3.3
  */
 public class UnEscapeHtml extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/Variable.java
Patch:
@@ -37,7 +37,7 @@
  * Returns:
  * - the variable value, but if not found
  * - the variable name itself
- *
+ * @since 2.3RC3
  */
 public class Variable extends AbstractFunction {
 

File: src/functions/org/apache/jmeter/functions/XPath.java
Patch:
@@ -43,7 +43,7 @@
  *
  * NOTE: A single instance of each different file/expression combination
  * is opened and used for all threads.
- *
+ * @since 2.0.3
  */
 public class XPath extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();

File: src/core/org/apache/jmeter/engine/util/ReplaceFunctionsWithStrings.java
Patch:
@@ -75,7 +75,7 @@ public JMeterProperty transformValue(JMeterProperty prop) throws InvalidVariable
             String value = entry.getValue();
             if (regexMatch) {
                 try {
-                    pattern = compiler.compile(value);
+                    pattern = compiler.compile("\\b("+value+")\\b");
                     input = Util.substitute(pm, pattern,
                             new StringSubstitution(FUNCTION_REF_PREFIX + key + FUNCTION_REF_SUFFIX),
                             input, Util.SUBSTITUTE_ALL);

File: src/core/org/apache/jmeter/visualizers/SamplingStatCalculator.java
Patch:
@@ -38,7 +38,7 @@ public class SamplingStatCalculator {
 
     private String label;
 
-    private Sample currentSample;
+    private volatile Sample currentSample;
 
     public SamplingStatCalculator(){ // Only for use by test code
         this("");

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerFactory.java
Patch:
@@ -67,7 +67,7 @@ public static HTTPSamplerBase newInstance() {
      * @throws UnsupportedOperationException if alias is not recognised
      */
     public static HTTPSamplerBase newInstance(String alias) {
-        if (alias.length() == 0) {
+        if (alias ==null || alias.length() == 0) {
             alias = DEFAULT_CLASSNAME;
         }
         if (alias.equals(HTTP_SAMPLER_JAVA) || alias.equals(IMPL_JAVA)) {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -492,7 +492,7 @@ boolean filterContentType(SampleResult result) {
         if(log.isDebugEnabled()) {
             log.debug("Content-type to filter : " + sampleContentType);
         }
-        // Check if the include pattern is mathed
+        // Check if the include pattern is matched
         if(includeExp != null && includeExp.length() > 0) {
             if(log.isDebugEnabled()) {
                 log.debug("Include expression : " + includeExp);
@@ -509,7 +509,7 @@ boolean filterContentType(SampleResult result) {
             }
         }
 
-        // Check if the exclude pattern is mathed
+        // Check if the exclude pattern is matched
         if(excludeExp != null && excludeExp.length() > 0) {
             if(log.isDebugEnabled()) {
                 log.debug("Exclude expression : " + excludeExp);
@@ -522,7 +522,7 @@ boolean filterContentType(SampleResult result) {
                     return false;
                 }
             } catch (MalformedCachePatternException e) {
-                log.warn("Skipped invalid content exclude pattern: " + includeExp, e);
+                log.warn("Skipped invalid content exclude pattern: " + excludeExp, e);
             }
         }
 

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -420,7 +420,9 @@ private void init() {
         topAndDown.setResizeWeight(.8);
         topAndDown.setContinuousLayout(true);
         topAndDown.setBorder(null); // see bug jdk 4131528
-        
+        if(!DISPLAY_LOGGER_PANEL) {
+            topAndDown.setDividerSize(0);
+        }
         mainPanel = createMainPanel();
         logPanel = createLoggerPanel();
         

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/UrlConfigGui.java
Patch:
@@ -199,7 +199,7 @@ public void modifyTestElement(TestElement element) {
              * On retrival, CRLF is converted back to LF for storage in the text field.
              * See
              */
-            HTTPArgument arg = new HTTPArgument("", text.replaceAll("\n","\r\n"), true);
+            HTTPArgument arg = new HTTPArgument("", text.replaceAll("\n","\r\n"), false);
             arg.setAlwaysEncoded(false);
             args.addArgument(arg);
         } else {

File: src/components/org/apache/jmeter/sampler/DebugSampler.java
Patch:
@@ -75,7 +75,7 @@ public SampleResult sample(Entry e) {
         res.setResponseData(sb.toString(), null);
         res.setDataType(SampleResult.TEXT);
         res.setSamplerData(rd.toString());
-        res.setSuccessful(true);
+        res.setResponseOK();
         res.sampleEnd();
         return res;
     }

File: src/components/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -423,11 +423,13 @@ private Component createResponseMetadataPanel() {
                 GuiUtils.makeScrollPane(tableResFields));
         topSplit.setOneTouchExpandable(true);
         topSplit.setResizeWeight(0.80); // set split ratio
+        topSplit.setBorder(null); // see bug jdk 4131528
 
         paneParsed = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
                 GuiUtils.makeScrollPane(tableResult), topSplit);
         paneParsed.setOneTouchExpandable(true);
         paneParsed.setResizeWeight(0.40); // set split ratio
+        paneParsed.setBorder(null); // see bug jdk 4131528
 
         // setup bottom tabs, first Raw, second Parsed
         tabbedResult.addTab(JMeterUtils.getResString("view_results_table_result_tab_raw"), paneRaw); //$NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/visualizers/RequestViewHTTP.java
Patch:
@@ -315,11 +315,13 @@ private Component createRequestPane() {
                 GuiUtils.makeScrollPane(tableHeaders));
         topSplit.setOneTouchExpandable(true);
         topSplit.setResizeWeight(0.50); // set split ratio
+        topSplit.setBorder(null); // see bug jdk 4131528
 
         JSplitPane paneParsed = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
                 GuiUtils.makeScrollPane(tableRequest), topSplit);
         paneParsed.setOneTouchExpandable(true);
         paneParsed.setResizeWeight(0.25); // set split ratio (only 5 lines to display)
+        paneParsed.setBorder(null); // see bug jdk 4131528
 
         // Hint to background color on bottom tabs (grey, not blue)
         JPanel panel = new JPanel(new BorderLayout());

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -419,9 +419,9 @@ private void init() {
         topAndDown.setDividerLocation(0.8);
         topAndDown.setResizeWeight(.8);
         topAndDown.setContinuousLayout(true);
+        topAndDown.setBorder(null); // see bug jdk 4131528
         
         mainPanel = createMainPanel();
-        
         logPanel = createLoggerPanel();
         
         topAndDown.setTopComponent(mainPanel);

File: src/core/org/apache/jmeter/gui/action/ExitCommand.java
Patch:
@@ -66,7 +66,7 @@ public void doAction(ActionEvent e) {
             if (chosenOption == JOptionPane.NO_OPTION) {
                 System.exit(0);
             } else if (chosenOption == JOptionPane.YES_OPTION) {
-                ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.SAVE_ALL_AS));
+                ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.SAVE));
                 if (!GuiPackage.getInstance().isDirty()) {
                     System.exit(0);
                 }

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -83,6 +83,9 @@ protected MapperWrapper wrapMapper(MapperWrapper next) {
             @Override
             public Class<?> realClass(String alias) {
                 String fullName = aliasToClass(alias);
+                if (fullName != null) {
+                    fullName = NameUpdater.getCurrentName(fullName);
+                }
                 return super.realClass(fullName == null ? alias : fullName);
             }
             // Translate to alias and then delegate to wrapped class

File: src/core/org/apache/jmeter/gui/action/LoggerPannelEnableDisable.java
Patch:
@@ -67,6 +67,7 @@ public void doAction(ActionEvent e) {
                 JSplitPane splitPane = ((JSplitPane)guiInstance.getLoggerPanel().getParent());
                 splitPane.setDividerLocation(0.8);
             } else {
+                guiInstance.getLoggerPanel().clear();
                 guiInstance.getLoggerPanel().setVisible(false);
             }
         }

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -60,6 +60,7 @@ public class ActionNames {
     public static final String INSERT_AFTER     = "drag_n_drop.insert_after";//$NON-NLS-1$
     public static final String INSERT_BEFORE    = "drag_n_drop.insert_before";//$NON-NLS-1$
     public static final String LAF_PREFIX       = "laf:"; // Look and Feel prefix
+    public static final String LOGGER_PANEL_ENABLE_DISABLE     = "logger_panel_enable_disable"; // $NON-NLS-1$
     public static final String MERGE            = "merge"; // $NON-NLS-1$
     public static final String OPEN             = "open"; // $NON-NLS-1$
     public static final String OPEN_RECENT      = "open_recent"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -282,11 +282,14 @@ private void makeOptionsMenu() {
         optionsMenu.add(lafMenu);
 
         JCheckBoxMenuItem menuToolBar = makeCheckBoxMenuItemRes("menu_toolbar", ActionNames.TOOLBAR); //$NON-NLS-1$
+        JCheckBoxMenuItem menuLoggerPanel = makeCheckBoxMenuItemRes("menu_logger_panel", ActionNames.LOGGER_PANEL_ENABLE_DISABLE); //$NON-NLS-1$
         GuiPackage guiInstance = GuiPackage.getInstance();
         if (guiInstance != null) { //avoid error in ant task tests (good way?)
             guiInstance.setMenuItemToolbar(menuToolBar);
+            guiInstance.setMenuItemLoggerPanel(menuLoggerPanel);
         }
         optionsMenu.add(menuToolBar);
+        optionsMenu.add(menuLoggerPanel);
         
         if (SSLManager.isSSLSupported()) {
             sslManager = makeMenuItemRes("sslmanager", 'S', ActionNames.SSL_MANAGER, KeyStrokes.SSL_MANAGER); //$NON-NLS-1$

File: test/src/org/apache/jmeter/save/TestSaveService.java
Patch:
@@ -43,7 +43,7 @@ public class TestSaveService extends JMeterTestCase {
         "ProxyServerTestPlan.jmx",
         "SimpleTestPlan.jmx",
         "GuiTest.jmx", 
-        //"GuiTest231.jmx", Commenting as testLoadAndSave will fails
+        "GuiTest231.jmx",
         };
 
     private static final boolean saveOut = JMeterUtils.getPropDefault("testsaveservice.saveout", false);

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorControl.java
Patch:
@@ -44,7 +44,7 @@ public class HttpMirrorControl extends AbstractTestElement {
 
     public static final String MAX_POOL_SIZE = "HttpMirrorControlGui.maxPoolSize"; // $NON-NLS-1$
 
-    public static final int DEFAULT_MAX_POOL_SIZE = 10;
+    public static final int DEFAULT_MAX_POOL_SIZE = 0;
 
     public HttpMirrorControl() {
         initPort(DEFAULT_PORT);

File: src/core/org/apache/jmeter/save/converters/ConversionHelp.java
Patch:
@@ -230,7 +230,7 @@ public static String getUpgradePropertyName(String name, UnmarshallingContext co
         if (name.length() != 0 && newName.length()==0) {
             return null;
         }
-        return name;
+        return newName;
     }
 
     /**

File: src/core/org/apache/jmeter/save/converters/MultiPropertyConverter.java
Patch:
@@ -67,7 +67,9 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
         while (reader.hasMoreChildren()) {
             reader.moveDown();
             JMeterProperty subProp = (JMeterProperty) readItem(reader, context, prop);
-            prop.addProperty(subProp);
+            if (subProp != null) { // could be null if it has been deleted via NameUpdater
+                prop.addProperty(subProp);
+            }
             reader.moveUp();
         }
         return prop;

File: src/core/org/apache/jmeter/save/converters/TestElementConverter.java
Patch:
@@ -105,7 +105,9 @@ public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext co
             while (reader.hasMoreChildren()) {
                 reader.moveDown();
                 JMeterProperty prop = (JMeterProperty) readItem(reader, context, el);
-                el.setProperty(prop);
+                if (prop != null) { // could be null if it has been deleted via NameUpdater
+                    el.setProperty(prop);
+                }
                 reader.moveUp();
             }
             return el;

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeModel.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.testelement.WorkBench;
 import org.apache.jmeter.testelement.property.NullProperty;
-import org.apache.jmeter.util.NameUpdater;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.collections.ListedHashTree;
 
@@ -120,8 +119,6 @@ public JMeterTreeNode addComponent(TestElement component, JMeterTreeNode node) t
         if (node.getUserObject() instanceof AbstractConfigGui) {
             throw new IllegalUserActionException("This node cannot hold sub-elements");
         }
-        component.setProperty(TestElement.GUI_CLASS, NameUpdater.getCurrentName(component
-                .getPropertyAsString(TestElement.GUI_CLASS)));
 
         GuiPackage guiPackage = GuiPackage.getInstance();
         if (guiPackage != null) {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
Patch:
@@ -38,7 +38,7 @@
  * Thread to handle one client request. Gets the request from the client and
  * sends the response back to the client.
  */
-public class HttpMirrorThread extends Thread {
+public class HttpMirrorThread implements Runnable {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     private static final String ISO_8859_1 = "ISO-8859-1"; //$NON-NLS-1$
@@ -54,7 +54,6 @@ public HttpMirrorThread(Socket _clientSocket) {
     /**
      * Main processing method for the HttpMirror object
      */
-    @Override
     public void run() {
         log.debug("Starting thread");
         BufferedInputStream in = null;

File: src/components/org/apache/jmeter/config/KeystoreConfigBeanInfo.java
Patch:
@@ -28,8 +28,8 @@
 public class KeystoreConfigBeanInfo extends BeanInfoSupport {
 
     private static final String ALIASES_GROUP = "aliases";
-    private static final String ALIAS_END_INDEX = "startIndex";
-    private static final String ALIAS_START_INDEX = "endIndex";
+    private static final String ALIAS_END_INDEX = "endIndex";
+    private static final String ALIAS_START_INDEX = "startIndex";
     private static final String PRELOAD = "preload";
 
     /**

File: src/components/org/apache/jmeter/assertions/gui/XPathPanel.java
Patch:
@@ -184,9 +184,10 @@ public static boolean validXPath(String xpathString, boolean showDialog) {
         boolean success = true;
         try {
             if (testDoc == null) {
-                testDoc = XPathUtil.makeDocumentBuilder(false, false, false, false).newDocument();
+                Document doc = XPathUtil.makeDocumentBuilder(false, false, false, false).newDocument();
                 Element el = testDoc.createElement("root"); //$NON-NLS-1$
-                testDoc.appendChild(el);
+                doc.appendChild(el);
+                testDoc = doc;
 
             }
             XPathUtil.validateXPath(testDoc, xpathString);

File: src/components/org/apache/jmeter/visualizers/SamplerResultTab.java
Patch:
@@ -256,6 +256,8 @@ public void setupTabPane() {
                 case 5:
                     style = statsDoc.getStyle(STYLE_SERVER_ERROR);
                     break;
+                default: // quieten Findbugs
+                    break; // default - do nothing
                 }
 
                 statsBuff.append(JMeterUtils.getResString("view_results_response_code")).append(responseCode).append(NL); //$NON-NLS-1$

File: test/src/org/apache/jmeter/functions/PackageTest.java
Patch:
@@ -300,16 +300,16 @@ public void BSH1() throws Exception {
     }
 
     public void splitTest1() throws Exception {
-        SplitFunction split = null;
         String src = "";
 
         try {
-            split = splitParams("a,b,c", null, null);
+            splitParams("a,b,c", null, null);
             fail("Expected InvalidVariableException (wrong number of parameters)");
         } catch (InvalidVariableException e) {
             // OK
         }
         src = "a,b,c";
+        SplitFunction split;
         split = splitParams(src, "VAR1", null);
         assertEquals(src, split.execute());
         assertEquals(src, vars.get("VAR1"));

File: test/src/org/apache/jmeter/protocol/tcp/sampler/BinaryTCPClientImplTest.java
Patch:
@@ -56,7 +56,7 @@ public void testHexStringToByteArray() throws Exception {
             // ignored
         }
         try {
-            ba = BinaryTCPClientImpl.hexStringToByteArray("0f107xxf8081ff"); // invalid
+            BinaryTCPClientImpl.hexStringToByteArray("0f107xxf8081ff"); // invalid
             fail("Expected IllegalArgumentException");
         } catch (IllegalArgumentException expected){
             // ignored
@@ -79,7 +79,7 @@ public void testRoundTrip() throws Exception {
         ByteArrayOutputStream os = new ByteArrayOutputStream();
         bi.write(os, "3132333435"); // '12345'
         os.close();
-        assertEquals("12345",os.toString());
+        assertEquals("12345",os.toString("ISO-8859-1"));
         ByteArrayInputStream bis = new ByteArrayInputStream(os.toByteArray());
         assertEquals("3132333435",bi.read(bis));
     }

File: test/src/org/apache/jmeter/protocol/tcp/sampler/TCPClientDecoratorTest.java
Patch:
@@ -160,8 +160,8 @@ public void testIntToByteArray() throws Exception {
         } catch (IllegalArgumentException iae) {
         }
         try {
-            ba = TCPClientDecorator.intToByteArray(0, 5);
-            fail();
+            TCPClientDecorator.intToByteArray(0, 5);
+            fail("Expected IllegalArgumentException");
         } catch (IllegalArgumentException iae) {
         }
     }

File: src/examples/org/apache/jmeter/examples/testbeans/example2/Example2.java
Patch:
@@ -18,6 +18,8 @@
 
 package org.apache.jmeter.examples.testbeans.example2;
 
+import java.util.Locale;
+
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
@@ -39,7 +41,7 @@ public SampleResult sample(Entry e) {
         res.setSamplerData(myStringProperty);
         res.sampleStart();
         // Do something ...
-        res.setResponseData(myStringProperty.toLowerCase(), null);
+        res.setResponseData(myStringProperty.toLowerCase(Locale.ENGLISH), null);
         res.setDataType(SampleResult.TEXT);
         res.sampleEnd();
         res.setSuccessful(true);

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -254,7 +254,6 @@ protected int parse(BufferedReader breader, TestElement el, int parseCount) {
             }
             if (line == null) {
                 breader.close();
-                breader = null;
                 this.READER = null;
                 // this.READER = new BufferedReader(new
                 // FileReader(this.SOURCE));

File: src/reports/org/apache/jmeter/testelement/JTLData.java
Patch:
@@ -179,7 +179,6 @@ public void loadData() {
             // no slow leaks
             rc.clear();
             rc.setListener(null);
-            rc = null;
         }
     }
 

File: test/src/org/apache/jmeter/functions/PackageTest.java
Patch:
@@ -229,19 +229,19 @@ public void setUp() {
 
     public void BSH1() throws Exception {
         String fn = "testfiles/BeanShellTest.bsh";
-        BeanShell bsh;
         try {
-            bsh = BSHFParams(null, null, null);
+            BSHFParams(null, null, null);
             fail("Expected InvalidVariableException");
         } catch (InvalidVariableException e) {
         }
 
         try {
-            bsh = BSHFParams("", "", "");
+            BSHFParams("", "", "");
             fail("Expected InvalidVariableException");
         } catch (InvalidVariableException e) {
         }
 
+        BeanShell bsh;
         try {
             bsh = BSHFParams("", "", null);
             assertEquals("", bsh.execute());

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/JTidyHTMLParser.java
Patch:
@@ -170,6 +170,9 @@ private URL scanNodes(Node node, URLCollection urls, URL baseUrl) throws HTMLPar
         // case Node.TEXT_NODE:
         // break;
 
+        default:
+            // ignored
+            break;
         }
 
         return baseUrl;

File: src/components/org/apache/jmeter/visualizers/RenderAsXML.java
Patch:
@@ -211,6 +211,9 @@ private String encode(char c) {
                 case '\"': // $NON-NLS-1$
                     toReturn = "&quot;"; // $NON-NLS-1$
                     break;
+                default:
+                    // ignored
+                    break;
 
                 }
                 return toReturn;

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -663,6 +663,9 @@ private void initializeProperties(CLArgsParser parser) {
             case REMOTE_STOP:
                 remoteStop = true;
                 break;
+            default:
+                // ignored
+                break;
             }
         }
 

File: src/reports/org/apache/jmeter/JMeterReport.java
Patch:
@@ -394,6 +394,9 @@ private void initializeProperties(CLArgsParser parser) {
                     LoggingManager.setPriority(name);
                 }
                 break;
+            default:
+                // ignored
+                break;
             }
         }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -191,7 +191,7 @@ public void run() {
             if ((request.getMethod().startsWith(HTTPConstants.CONNECT)) && (outStreamClient != null)) {
                 log.debug("Method CONNECT => SSL");
                 // write a OK reponse to browser, to engage SSL exchange
-                outStreamClient.write(("HTTP/1.0 200 OK\r\n\r\n").getBytes()); // $NON-NLS-1$ // TODO charset?
+                outStreamClient.write(("HTTP/1.0 200 OK\r\n\r\n").getBytes(SampleResult.DEFAULT_HTTP_ENCODING)); // $NON-NLS-1$
                 outStreamClient.flush();
                // With ssl request, url is host:port (without https:// or path)
                 String[] param = request.getUrl().split(":");  // $NON-NLS-1$
@@ -431,7 +431,7 @@ private SampleResult generateErrorResult(SampleResult result, Exception e) {
     private void writeToClient(SampleResult res, OutputStream out, boolean forcedHTTPS) throws IOException {
         try {
             String responseHeaders = massageResponseHeaders(res, forcedHTTPS);
-            out.write(responseHeaders.getBytes()); // TODO - charset?
+            out.write(responseHeaders.getBytes(SampleResult.DEFAULT_HTTP_ENCODING));
             out.write(CRLF_BYTES);
             out.write(res.getResponseData());
             out.flush();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -100,6 +100,7 @@
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.protocol.http.util.SlowHC4SSLSocketFactory;
 import org.apache.jmeter.protocol.http.util.SlowHC4SocketFactory;
+import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.util.JMeterUtils;
@@ -965,7 +966,7 @@ private String sendPostData(HttpPost post)  throws IOException {
                         if (contentEncoding != null) {
                             postedBody.append(new String(bos.toByteArray(), contentEncoding));
                         } else {
-                            postedBody.append(new String(bos.toByteArray()));
+                            postedBody.append(new String(bos.toByteArray(), SampleResult.DEFAULT_HTTP_ENCODING));
                         }
                         bos.close();
                     }  else {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
+import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 
 /**
@@ -122,7 +123,7 @@ public String sendPostData(URLConnection connection, HTTPSamplerBase sampler) th
                 postedBody.append(new String(fileMultipartEndDivider, ENCODING));
                 if(i + 1 < files.length) {
                     out.write(CRLF);
-                    postedBody.append(new String(CRLF)); // TODO - charset?
+                    postedBody.append(new String(CRLF, SampleResult.DEFAULT_HTTP_ENCODING));
                 }
             }
             // Write end of multipart

File: src/protocol/http/org/apache/jmeter/protocol/http/util/LoopbackHTTPSocket.java
Patch:
@@ -27,6 +27,8 @@
 import java.net.Socket;
 import java.net.UnknownHostException;
 
+import org.apache.jmeter.samplers.SampleResult;
+
 /*
  * Socket that reads back from the output
  */
@@ -66,7 +68,7 @@ public LoopBackInputStream(LoopbackOutputStream _os) {
     private LoopbackHTTPSocket() throws IOException{
         os=new LoopbackOutputStream();
         // Preload the output so that can be read back as HTTP
-        os.write("HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\n".getBytes()); // TODO - charset?
+        os.write("HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\n".getBytes(SampleResult.DEFAULT_HTTP_ENCODING));
     }
 
     public LoopbackHTTPSocket(String host, int port, InetAddress localAddress, int localPort, int timeout) throws IOException {

File: src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java
Patch:
@@ -186,8 +186,7 @@ private void reinitialize() {
         if (selected != null) {
             for (int i = 0; i < nodesModel.getSize(); i++) {
                 current = (TreeNodeWrapper) nodesModel.getElementAt(i);
-                if ((current.getTreeNode() == null && selected == null)
-                        || (current.getTreeNode() != null && current.getTreeNode().equals(selected))) {
+                if (current.getTreeNode() != null && current.getTreeNode().equals(selected)) {
                     nodesModel.setSelectedItem(current);
                     break;
                 }

File: src/components/org/apache/jmeter/extractor/BSFPostProcessor.java
Patch:
@@ -35,7 +35,6 @@ public class BSFPostProcessor extends BSFTestElement implements Cloneable, PostP
     public void process(){
         try {
             BSFManager mgr = getManager();
-            if (mgr == null) { return; }
             processFileOrScript(mgr);
             mgr.terminate();
         } catch (BSFException e) {

File: src/components/org/apache/jmeter/timers/BSFTimer.java
Patch:
@@ -35,9 +35,6 @@ public long delay() {
         long delay = 0;
         try {
             BSFManager mgr = getManager();
-            if (mgr == null) {
-                return 0; 
-            }
             Object o = evalFileOrScript(mgr);
             if (o == null) {
                 log.warn("Script did not return a value");

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParsingUtils.java
Patch:
@@ -82,9 +82,6 @@ public static boolean isAnchorMatched(HTTPSamplerBase newLink, HTTPSamplerBase c
         }
 
         final Arguments arguments = config.getArguments();
-        if (query == null && arguments.getArgumentCount() > 0) {
-            return false;// failed to convert query, so assume no match
-        }
 
         final Perl5Matcher matcher = JMeterUtils.getMatcher();
         final PatternCacheLRU patternCache = JMeterUtils.getPatternCache();

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -319,7 +319,7 @@ public void threadStarted() {
             Object obj = context.lookup(getQueueConnectionFactory());
             if (!(obj instanceof QueueConnectionFactory)) {
                 String msg = "QueueConnectionFactory expected, but got "
-                    + obj == null ? "null" :  obj.getClass().getName();
+                    + obj.getClass().getName();
                 LOGGER.fatalError(msg);
                 throw new IllegalStateException(msg);
             }

File: src/components/org/apache/jmeter/visualizers/DistributionGraph.java
Patch:
@@ -170,7 +170,7 @@ private void drawSample(SamplingStatCalculator p_model, Graphics g) {
 
             long total = p_model.getCount();
             Collection<Number[]> values = p_model.getDistribution().values();
-            Number[][] objval = values.toArray(new Number[][]{});
+            Number[][] objval = values.toArray(new Number[values.size()][]);
             // we sort the objects
             Arrays.sort(objval, new NumberComparator());
             int len = objval.length;

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -537,7 +537,7 @@ public AssertionResult[] getAssertionResults() {
         if (assertionResults == null) {
             return EMPTY_AR;
         }
-        return assertionResults.toArray(new AssertionResult[0]);
+        return assertionResults.toArray(new AssertionResult[assertionResults.size()]);
     }
 
     /**
@@ -598,7 +598,7 @@ public SampleResult[] getSubResults() {
         if (subResults == null) {
             return EMPTY_SR;
         }
-        return subResults.toArray(new SampleResult[0]);
+        return subResults.toArray(new SampleResult[subResults.size()]);
     }
 
     /**

File: src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
Patch:
@@ -135,7 +135,7 @@ public class TestBeanGUI extends AbstractJMeterGuiComponent implements JMeterGUI
         if (s != null) {
             paths.addAll(Arrays.asList(JOrphanUtils.split(s, ",", "")));// $NON-NLS-1$ // $NON-NLS-2$
         }
-        PropertyEditorManager.setEditorSearchPath(paths.toArray(new String[0]));
+        PropertyEditorManager.setEditorSearchPath(paths.toArray(new String[paths.size()]));
     }
 
     /**

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -648,7 +648,8 @@ public static Vector<Object> getControllers(Properties properties) {
      * @return The TestSamples value
      */
     public static String[] getTestSamples(Properties properties, String name) {
-        return getVector(properties, name + ".testsample").toArray(new String[0]); // $NON-NLS-1$
+        Vector<String> vector = getVector(properties, name + ".testsample"); // $NON-NLS-1$
+        return vector.toArray(new String[vector.size()]);
     }
 
     /**

File: src/jorphan/org/apache/jorphan/reflect/ClassFinder.java
Patch:
@@ -179,7 +179,7 @@ public boolean accept(File f, String name) {
                 }
             }
         }
-        return fullList.toArray(new String[0]);
+        return fullList.toArray(new String[fullList.size()]);
     }
 
     /**

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -158,7 +158,7 @@ public static String[] split(String splittee, String delims, String def) {
         if (lastWasDelim) {
             strList.add(def);
         }
-        return strList.toArray(new String[0]);
+        return strList.toArray(new String[strList.size()]);
     }
 
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1546,7 +1546,7 @@ public void setHTTPFiles(HTTPFileArg[] files) {
     }
 
     public static String[] getValidMethodsAsArray(){
-        return METHODLIST.toArray(new String[0]);
+        return METHODLIST.toArray(new String[METHODLIST.size()]);
     }
 
     public static boolean isSecure(String protocol){

File: src/protocol/java/org/apache/jmeter/protocol/java/control/gui/BSFSamplerGui.java
Patch:
@@ -149,7 +149,7 @@ private JPanel createLanguagePanel() {
         p.put("jexl", ""); // $NON-NLS-1$
         Set<Object> keySet = p.keySet();
         // TODO - perhaps weed out ones which don't exist?
-        String [] items = keySet.toArray(new String[]{});
+        String [] items = keySet.toArray(new String[keySet.size()]);
         Arrays.sort(items);
 
         langField = new JComboBox(items);

File: src/components/org/apache/jmeter/reporters/MailerModel.java
Patch:
@@ -267,7 +267,7 @@ public void sendMail(String from, List<String> vEmails, String subject, String a
         InternetAddress[] address = new InternetAddress[vEmails.size()];
 
         for (int k = 0; k < vEmails.size(); k++) {
-            address[k] = new InternetAddress(vEmails.get(k).toString());
+            address[k] = new InternetAddress(vEmails.get(k));
         }
 
         // create some properties and get the default Session

File: src/components/org/apache/jmeter/timers/ConstantThroughputTimerBeanInfo.java
Patch:
@@ -46,7 +46,7 @@ public ConstantThroughputTimerBeanInfo() {
 
         PropertyDescriptor p = property("throughput"); //$NON-NLS-1$
         p.setValue(NOT_UNDEFINED, Boolean.TRUE);
-        p.setValue(DEFAULT, new Double(0.0));
+        p.setValue(DEFAULT, Double.valueOf(0.0));
 
         p = property("calcMode"); //$NON-NLS-1$
         p.setValue(NOT_UNDEFINED, Boolean.TRUE);

File: src/core/org/apache/jmeter/gui/util/PowerTableModel.java
Patch:
@@ -172,15 +172,15 @@ private Object createDefaultValue(int i) {
             }
             try {
                 Constructor<?> constr = colClass.getConstructor(new Class[] { Float.TYPE });
-                return constr.newInstance(new Object[] { new Float(0F) });
+                return constr.newInstance(new Object[] { Float.valueOf(0F) });
             } catch (NoSuchMethodException err) {
             } catch (InstantiationException err) {
             } catch (IllegalAccessException err) {
             } catch (InvocationTargetException err) {
             }
             try {
                 Constructor<?> constr = colClass.getConstructor(new Class[] { Double.TYPE });
-                return constr.newInstance(new Object[] { new Double(0D) });
+                return constr.newInstance(new Object[] { Double.valueOf(0D) });
             } catch (NoSuchMethodException err) {
             } catch (InstantiationException err) {
             } catch (IllegalAccessException err) {

File: src/core/org/apache/jmeter/reporters/FileReporter.java
Patch:
@@ -268,17 +268,17 @@ public JPanel getStats() {
         c.gridx = 1;
         c.gridy = 1;
         g.setConstraints(count, c);
-        JLabel min = new JLabel("Min: " + df.format(new Float(minValue)));
+        JLabel min = new JLabel("Min: " + df.format(Float.valueOf(minValue)));
 
         c.gridx = 1;
         c.gridy = 2;
         g.setConstraints(min, c);
-        JLabel max = new JLabel("Max: " + df.format(new Float(maxValue)));
+        JLabel max = new JLabel("Max: " + df.format(Float.valueOf(maxValue)));
 
         c.gridx = 1;
         c.gridy = 3;
         g.setConstraints(max, c);
-        JLabel average = new JLabel("Average: " + df.format(new Float(averageValue)));
+        JLabel average = new JLabel("Average: " + df.format(Float.valueOf(averageValue)));
 
         c.gridx = 1;
         c.gridy = 4;

File: src/core/org/apache/jmeter/testelement/property/DoubleProperty.java
Patch:
@@ -69,7 +69,7 @@ public String getStringValue() {
      * {@inheritDoc}
      */
     public Object getObjectValue() {
-        return new Double(value);
+        return Double.valueOf(value);
     }
 
     /**

File: src/core/org/apache/jmeter/testelement/property/FloatProperty.java
Patch:
@@ -85,7 +85,7 @@ public String getStringValue() {
      * {@inheritDoc}
      */
     public Object getObjectValue() {
-        return new Float(value);
+        return Float.valueOf(value);
     }
 
     /**

File: src/jorphan/org/apache/jorphan/util/Converter.java
Patch:
@@ -44,9 +44,9 @@ public static Object convert(Object value, Class<?> toType) {
         } else if (toType.isAssignableFrom(value.getClass())) {
             return value;
         } else if (toType.equals(float.class) || toType.equals(Float.class)) {
-            return new Float(getFloat(value));
+            return Float.valueOf(getFloat(value));
         } else if (toType.equals(double.class) || toType.equals(Double.class)) {
-            return new Double(getDouble(value));
+            return Double.valueOf(getDouble(value));
         } else if (toType.equals(String.class)) {
             return getString(value);
         } else if (toType.equals(int.class) || toType.equals(Integer.class)) {

File: src/jorphan/org/apache/commons/cli/avalon/CLOptionDescriptor.java
Patch:
@@ -74,7 +74,7 @@ public CLOptionDescriptor(final String name, final int flags, final int id, fina
         m_name = name;
         m_flags = flags;
         m_description = description;
-        m_incompatible = ((flags & DUPLICATES_ALLOWED) > 0) ? new int[0] : new int[] { id };
+        m_incompatible = ((flags & DUPLICATES_ALLOWED) != 0) ? new int[0] : new int[] { id };
     }
 
 

File: src/components/org/apache/jmeter/visualizers/SplineVisualizer.java
Patch:
@@ -44,7 +44,7 @@
  * GraphVisualizer.
  *
  */
-public class SplineVisualizer extends AbstractVisualizer implements ImageVisualizer, GraphListener, Clearable {
+public class SplineVisualizer extends AbstractVisualizer implements ImageVisualizer, GraphListener {
 
     private static final long serialVersionUID = 240L;
 

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -233,12 +233,12 @@ public SampleSaveConfiguration getSaveConfig() {
     }
 
 
-    private transient final long nanoTimeOffset;
+    private final long nanoTimeOffset;
 
     // Allow testcode access to the settings
-    transient final boolean useNanoTime;
+    final boolean useNanoTime;
     
-    transient final long nanoThreadSleep;
+    final long nanoThreadSleep;
     
     private long initOffset(){
         if (useNanoTime){

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BSFSampler.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
-import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.util.BSFTestElement;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
@@ -36,7 +35,7 @@
  * A sampler which understands BSF
  *
  */
-public class BSFSampler extends BSFTestElement implements Sampler, TestBean {
+public class BSFSampler extends BSFTestElement implements Sampler {
 
     private static final long serialVersionUID = 240L;
 

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BSFSampler.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.util.BSFTestElement;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
@@ -35,7 +36,7 @@
  * A sampler which understands BSF
  *
  */
-public class BSFSampler extends BSFTestElement implements Sampler {
+public class BSFSampler extends BSFTestElement implements Sampler, TestBean {
 
     private static final long serialVersionUID = 240L;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/URLRewritingModifier.java
Patch:
@@ -77,7 +77,7 @@ public void process() {
             return;
         }
         initRegex(getArgumentName());
-        String text = new String(responseText.getResponseData()); // TODO - charset?
+        String text = responseText.getResponseDataAsString();
         Perl5Matcher matcher = JMeterUtils.getMatcher();
         String value = "";
         if (isPathExtension() && isPathExtensionNoEquals() && isPathExtensionNoQuestionmark()) {

File: src/reports/org/apache/jmeter/testelement/JTLData.java
Patch:
@@ -46,7 +46,7 @@ public class JTLData implements Serializable, DataSet {
     private String jtl_file = null;
     private long startTimestamp = 0;
     private long endTimestamp = 0;
-    private File inputFile = null;
+    private transient File inputFile = null;
 
     /**
      *

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/MessageAdmin.java
Patch:
@@ -62,6 +62,7 @@ public void putReply(String id, Message reply) {
         if (holder != null) {
             holder.setReply(reply);
             Object obj = holder.getRequest();
+            // Findbugs : False positive
             synchronized (obj) {
                 obj.notify();
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParserHTMLParser.java
Patch:
@@ -64,15 +64,15 @@ protected boolean isReusable() {
      * {@inheritDoc}
      */
     @Override
-    public Iterator<URL> getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection urls) throws HTMLParseException {
+    public Iterator<URL> getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection urls, String encoding) throws HTMLParseException {
 
         if (log.isDebugEnabled()) {
             log.debug("Parsing html of: " + baseUrl);
         }
 
         Parser htmlParser = null;
         try {
-            String contents = new String(html); // TODO - charset?
+            String contents = new String(html,encoding); 
             htmlParser = new Parser();
             htmlParser.setInputHTML(contents);
         } catch (Exception e) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1103,7 +1103,7 @@ protected HTTPSampleResult downloadPageResources(HTTPSampleResult res, HTTPSampl
                         HTMLParser.getParser(parserName)
                         :
                         HTMLParser.getParser(); // we don't; use the default parser
-                    urls = parser.getEmbeddedResourceURLs(responseData, res.getURL());
+                    urls = parser.getEmbeddedResourceURLs(responseData, res.getURL(), res.getDataEncodingWithDefault());
                 }
             }
         } catch (HTMLParseException e) {

File: test/src/org/apache/jmeter/protocol/http/parser/TestHTMLParser.java
Patch:
@@ -264,9 +264,9 @@ private static void filetest(HTMLParser p, String file, String url, String resul
             }
             Iterator<URL> result;
             if (c == null) {
-                result = p.getEmbeddedResourceURLs(buffer, new URL(url));
+                result = p.getEmbeddedResourceURLs(buffer, new URL(url), System.getProperty("file.encoding"));
             } else {
-                result = p.getEmbeddedResourceURLs(buffer, new URL(url), c);
+                result = p.getEmbeddedResourceURLs(buffer, new URL(url), c,System.getProperty("file.encoding"));
             }
             /*
              * TODO: Exact ordering is only required for some tests; change the

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -166,7 +166,7 @@ public void add(SampleResult res) {
             }
         }
         synchronized (calc) {
-            calc.addValue(res.getTime());
+            calc.addSample(res);
             int count = calc.getCount();
             Sample newS = new Sample(res.getSampleLabel(), res.getTime(), 0, 0, 0, 0, 0, 0,
                     res.isSuccessful(), count, res.getEndTime(),res.getBytes(),

File: src/core/org/apache/jmeter/util/Calculator.java
Patch:
@@ -73,7 +73,9 @@ public void clear() {
      * @param newValue
      * 
      * @see #addValue(long, int)
+     * @deprecated Use {@link #addSample(SampleResult)} instead
      */
+    @Deprecated
     public void addValue(long newValue) {
         addValue(newValue, 1);
     }

File: test/src/org/apache/jmeter/resources/PackageTest.java
Patch:
@@ -344,7 +344,7 @@ private void checkMessagesForLanguage(Map<String, Map<String, String>> missingLa
 		InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(languageBundle);
 		if(inputStream == null) {
 			Map<String, String> messagesAsProperties = new HashMap<String, String>();
-			for (Iterator iterator = messages.entrySet().iterator(); iterator.hasNext();) {
+			for (Iterator<Map.Entry<Object, Object>> iterator = messages.entrySet().iterator(); iterator.hasNext();) {
 				Map.Entry<Object, Object> entry = (Map.Entry<Object, Object>) iterator.next();
 				messagesAsProperties.put((String) entry.getKey(), (String) entry.getValue()); 
 			}

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -178,7 +178,7 @@ public SampleResult sample() {
                 msg = SUBSCRIBER.getMessage(calculateWait(until, now));
                 if (msg != null){
                     read++;
-                    extractContent(buffer, propBuffer, msg);
+                    extractContent(buffer, propBuffer, msg, (read == loop));
                 }
             } catch (JMSException e) {
                 log.warn("Error "+e.toString());
@@ -232,7 +232,7 @@ private long calculateWait(long until, long now) {
     }
 
     private void extractContent(StringBuilder buffer, StringBuilder propBuffer,
-            Message msg) {
+            Message msg, boolean isLast) {
         if (msg != null) {
             try {
                 if (msg instanceof TextMessage){
@@ -253,7 +253,7 @@ private void extractContent(StringBuilder buffer, StringBuilder propBuffer,
                     }
                 }
                 Utils.messageProperties(propBuffer, msg);
-                if(!StringUtils.isEmpty(separator)) {
+                if(!isLast && !StringUtils.isEmpty(separator)) {
                 	propBuffer.append(separator);
                 	buffer.append(separator);
                 }

File: src/core/org/apache/jmeter/threads/JMeterContextService.java
Patch:
@@ -25,7 +25,7 @@
  * Keeps track of active and total thread counts.
  */
 public final class JMeterContextService {
-    private static final ThreadLocal<JMeterContext> threadContext = new ThreadLocal<JMeterContext>() {
+    private static final ThreadLocal<JMeterContext> threadContext = new InheritableThreadLocal<JMeterContext>() {
         @Override
         public JMeterContext initialValue() {
             return new JMeterContext();

File: src/core/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -167,10 +167,9 @@ private Sampler next2() {
             prevEndTime = res.getStartTime();//???
             pauseTime = 0;
         }
-
+        boolean isLast = current==super.subControllersAndSamplers.size();
         Sampler returnValue = super.next();
-        // FIXME Broken code in case of subController that may return null (Interleave, ThroughputController, testing nullity is not enough
-        if (returnValue == null) // Must be the end of the controller
+        if (returnValue == null && isLast) // Must be the end of the controller
         {
             if (res != null) {
                 res.setIdleTime(pauseTime+res.getIdleTime());

File: src/core/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -169,8 +169,8 @@ private Sampler next2() {
         }
 
         Sampler returnValue = super.next();
-
-        if (returnValue == null && !(calls == 0)) // Must be the end of the controller
+        // FIXME Broken code in case of subController that may return null (Interleave, ThroughputController, testing nullity is not enough
+        if (returnValue == null) // Must be the end of the controller
         {
             if (res != null) {
                 res.setIdleTime(pauseTime+res.getIdleTime());

File: src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
Patch:
@@ -478,8 +478,7 @@ public void localeChanged(LocaleChangeEvent event) {
             setupGuiClasses();
         } catch (IntrospectionException e) {
             log.error("Can't get beanInfo for " + testBeanClass.getName(), e);
-            throw new Error(e.toString()); // Programming error. Don't
-                                            // continue.
+            JMeterUtils.reportErrorToUser("Can't get beanInfo for " + testBeanClass.getName());
         }
 	}
 }

File: src/functions/org/apache/jmeter/functions/StringFromFile.java
Patch:
@@ -91,11 +91,13 @@ public class StringFromFile extends AbstractFunction implements TestListener {
     // @GuardedBy("this")
     private Object[] values;
 
+    // @GuardedBy("this")
     private BufferedReader myBread = null; // Buffered reader
 
     // @GuardedBy("this")
     private boolean firstTime = false; // should we try to open the file?
 
+    // @GuardedBy("this")
     private String fileName; // needed for error messages
 
     // @GuardedBy("this")
@@ -116,7 +118,7 @@ public StringFromFile() {
     /**
      * Close file and log
      */
-    private void closeFile() {
+    private synchronized void closeFile() {
         if (myBread == null) {
             return;
         }

File: src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
Patch:
@@ -475,6 +475,7 @@ public boolean isExpert() {
 	public void localeChanged(LocaleChangeEvent event) {
 		try {
             beanInfo = Introspector.getBeanInfo(testBeanClass);
+            setupGuiClasses();
         } catch (IntrospectionException e) {
             log.error("Can't get beanInfo for " + testBeanClass.getName(), e);
             throw new Error(e.toString()); // Programming error. Don't

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/HttpDefaultsGui.java
Patch:
@@ -151,7 +151,7 @@ public void itemStateChanged(final ItemEvent e) {
         concurrentDwn = new JCheckBox(JMeterUtils.getResString("web_testing_concurrent_download")); // $NON-NLS-1$
         concurrentDwn.addItemListener(new ItemListener() {
             public void itemStateChanged(final ItemEvent e) {
-                if (e.getStateChange() == ItemEvent.SELECTED) { concurrentPool.setEnabled(true); }
+                if (imageParser.isSelected() && e.getStateChange() == ItemEvent.SELECTED) { concurrentPool.setEnabled(true); }
                 else { concurrentPool.setEnabled(false); }
             }
         });

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -168,7 +168,7 @@ public void itemStateChanged(final ItemEvent e) {
         concurrentDwn = new JCheckBox(JMeterUtils.getResString("web_testing_concurrent_download")); // $NON-NLS-1$
         concurrentDwn.addItemListener(new ItemListener() {
             public void itemStateChanged(final ItemEvent e) {
-                if (e.getStateChange() == ItemEvent.SELECTED) { concurrentPool.setEnabled(true); }
+                if (getImages.isSelected() && e.getStateChange() == ItemEvent.SELECTED) { concurrentPool.setEnabled(true); }
                 else { concurrentPool.setEnabled(false); }
             }
         });

File: src/core/org/apache/jmeter/services/FileServer.java
Patch:
@@ -100,7 +100,7 @@ public static FileServer getFileServer() {
     /**
      * Resets the current base to {@link #DEFAULT_BASE}.
      */
-    public void resetBase() {
+    public synchronized void resetBase() {
         base = new File(DEFAULT_BASE);
         log.info("Reset base to'"+base+"'");
     }

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElementBeanInfo.java
Patch:
@@ -29,6 +29,7 @@
 
 import org.apache.commons.lang.StringUtils;
 import org.apache.jmeter.testbeans.BeanInfoSupport;
+import org.apache.jmeter.testbeans.gui.TypeEditor;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
@@ -97,7 +98,7 @@ public DataSourceElementBeanInfo() {
         p = property("username");
         p.setValue(NOT_UNDEFINED, Boolean.TRUE);
         p.setValue(DEFAULT, "");
-        p = property("password");
+        p = property("password", TypeEditor.PasswordEditor);
         p.setValue(NOT_UNDEFINED, Boolean.TRUE);
         p.setValue(DEFAULT, "");
     }

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.jmeter.samplers.gui.AbstractSamplerGui;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.gui.JLabeledPasswordField;
 import org.apache.jorphan.gui.JLabeledTextArea;
 import org.apache.jorphan.gui.JLabeledTextField;
 
@@ -86,7 +87,7 @@ public class JMSPublisherGui extends AbstractSamplerGui implements ChangeListene
 
     private final JLabeledTextField jmsUser = new JLabeledTextField(JMeterUtils.getResString("jms_user")); //$NON-NLS-1$
 
-    private final JLabeledTextField jmsPwd = new JLabeledTextField(JMeterUtils.getResString("jms_pwd")); //$NON-NLS-1$
+    private final JLabeledTextField jmsPwd = new JLabeledPasswordField(JMeterUtils.getResString("jms_pwd")); //$NON-NLS-1$
 
     private final JLabeledTextField iterations = new JLabeledTextField(JMeterUtils.getResString("jms_itertions")); //$NON-NLS-1$
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSSubscriberGui.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.jmeter.samplers.gui.AbstractSamplerGui;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.gui.JLabeledPasswordField;
 import org.apache.jorphan.gui.JLabeledTextField;
 
 /**
@@ -72,7 +73,7 @@ public class JMSSubscriberGui extends AbstractSamplerGui implements ChangeListen
         new JLabeledTextField(JMeterUtils.getResString("jms_user")); // $NON-NLS-1$
 
     private final JLabeledTextField jmsPwd =
-        new JLabeledTextField(JMeterUtils.getResString("jms_pwd")); // $NON-NLS-1$
+        new JLabeledPasswordField(JMeterUtils.getResString("jms_pwd")); // $NON-NLS-1$
 
     private final JLabeledTextField iterations =
         new JLabeledTextField(JMeterUtils.getResString("jms_itertions")); // $NON-NLS-1$

File: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/gui/MailReaderSamplerGui.java
Patch:
@@ -31,6 +31,7 @@
 import javax.swing.JComponent;
 import javax.swing.JLabel;
 import javax.swing.JPanel;
+import javax.swing.JPasswordField;
 import javax.swing.JRadioButton;
 import javax.swing.JTextField;
 import javax.swing.event.ChangeEvent;
@@ -192,7 +193,7 @@ private void init() {
         usernameBox = new JTextField(20);
         addField(settingsPanel, AccountLabel, usernameBox, gbc);
 
-        passwordBox = new JTextField(20);
+        passwordBox = new JPasswordField(20);
         addField(settingsPanel, PasswordLabel, passwordBox, gbc);
 
         folderLabel = new JLabel(FolderLabel);

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java
Patch:
@@ -33,6 +33,7 @@
 import javax.swing.JFileChooser;
 import javax.swing.JLabel;
 import javax.swing.JPanel;
+import javax.swing.JPasswordField;
 import javax.swing.JTextArea;
 import javax.swing.JTextField;
 import javax.swing.event.ChangeEvent;
@@ -513,7 +514,7 @@ private void initComponents() {
         tfMailToCC = new JTextField(25);
         tfMailToBCC = new JTextField(25);
         tfAuthUsername = new JTextField(20);
-        tfAuthPassword = new JTextField(20);
+        tfAuthPassword = new JPasswordField(20);
         tfSubject = new JTextField(20);
         tfAttachment = new JTextField(30);
         tfEmlMessage = new JTextField(30);

File: src/core/org/apache/jmeter/gui/action/KeyStrokes.java
Patch:
@@ -41,6 +41,8 @@ private KeyStrokes(){
     public static final KeyStroke DEBUG_ON          = KeyStroke.getKeyStroke(KeyEvent.VK_D, CONTROL_MASK | KeyEvent.SHIFT_DOWN_MASK);
     public static final KeyStroke CLEAR_ALL         = KeyStroke.getKeyStroke(KeyEvent.VK_E, CONTROL_MASK);
     public static final KeyStroke CLEAR             = KeyStroke.getKeyStroke(KeyEvent.VK_E, CONTROL_MASK | KeyEvent.SHIFT_DOWN_MASK);
+    public static final KeyStroke ESC               = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
+    public static final KeyStroke ENTER             = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
     public static final KeyStroke FUNCTIONS         = KeyStroke.getKeyStroke(KeyEvent.VK_F, CONTROL_MASK);
     public static final KeyStroke SAVE_GRAPHICS     = KeyStroke.getKeyStroke(KeyEvent.VK_G, CONTROL_MASK);
     public static final KeyStroke SAVE_GRAPHICS_ALL = KeyStroke.getKeyStroke(KeyEvent.VK_G, CONTROL_MASK | KeyEvent.SHIFT_DOWN_MASK);

File: src/core/org/apache/jmeter/gui/action/SearchTreeCommand.java
Patch:
@@ -34,12 +34,13 @@ public class SearchTreeCommand extends AbstractAction {
         commands.add(ActionNames.SEARCH_TREE);
     }
 
+    private SearchTreeDialog dialog = new SearchTreeDialog();
     /**
      * @see Command#doAction(ActionEvent)
      */
     @Override
     public void doAction(ActionEvent e) {
-    	new SearchTreeDialog().setVisible(true);
+    	dialog.setVisible(true);
     }
 
 

File: src/core/org/apache/jmeter/gui/action/ActionRouter.java
Patch:
@@ -43,7 +43,7 @@ public final class ActionRouter implements ActionListener {
 
 	private static final Object LOCK = new Object();
 
-    private static ActionRouter router;
+    private static volatile ActionRouter router;
 
     private Map<String, Set<Command>> commands = new HashMap<String, Set<Command>>();
 

File: src/reports/org/apache/jmeter/gui/ReportGuiPackage.java
Patch:
@@ -57,7 +57,7 @@ public final class ReportGuiPackage implements LocaleChangeListener {
 	private static final Object LOCK = new Object();
 
     /** Singleton instance. */
-    private static ReportGuiPackage guiPack;
+    private static volatile ReportGuiPackage guiPack;
 
     /**
      * Flag indicating whether or not parts of the tree have changed since they

File: src/reports/org/apache/jmeter/report/gui/action/ReportActionRouter.java
Patch:
@@ -42,7 +42,7 @@
 public final class ReportActionRouter implements ActionListener {
     private Map<String, Set<Command>> commands = new HashMap<String, Set<Command>>();
 
-    private static ReportActionRouter router;
+    private static volatile ReportActionRouter router;
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 

File: src/core/org/apache/jmeter/gui/util/FileDialoger.java
Patch:
@@ -124,6 +124,7 @@ public static JFileChooser promptToSaveFile(String filename, String[] extensions
         }
         String ext = ".jmx";//$NON-NLS-1$
         if (filename != null) {
+        	jfc.setDialogTitle(filename);
             jfc.setSelectedFile(filename.lastIndexOf(System.getProperty("file.separator")) > 0 ?
                     new File(filename) :
                     new File(lastJFCDirectory, filename));
@@ -140,6 +141,7 @@ public static JFileChooser promptToSaveFile(String filename, String[] extensions
         }
 
         int retVal = jfc.showSaveDialog(GuiPackage.getInstance().getMainFrame());
+        jfc.setDialogTitle(null);
         lastJFCDirectory = jfc.getCurrentDirectory().getAbsolutePath();
         if (retVal == JFileChooser.APPROVE_OPTION) {
             return jfc;

File: src/core/org/apache/jmeter/testbeans/BeanInfoSupport.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.ResourceBundle;
 
 import org.apache.jmeter.testbeans.gui.GenericTestBeanCustomizer;
-import org.apache.jmeter.testbeans.gui.GuiEditor;
+import org.apache.jmeter.testbeans.gui.TypeEditor;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
@@ -167,7 +167,7 @@ protected PropertyDescriptor property(String name) {
      *            property name
      * @return descriptor for a property of that name, or null if there's none
      */
-    protected PropertyDescriptor property(String name, GuiEditor editor) {
+    protected PropertyDescriptor property(String name, TypeEditor editor) {
         PropertyDescriptor property = property(name);
         if (property != null) {
             property.setValue(GenericTestBeanCustomizer.GUITYPE, editor);

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -135,7 +135,7 @@ public class GenericTestBeanCustomizer extends JPanel implements SharedCustomize
 
     public static final String RESOURCE_BUNDLE = "resourceBundle"; //$NON-NLS-1$
 
-    /** Property editor override; must be an enum of type {@link GuiEditor} */
+    /** Property editor override; must be an enum of type {@link TypeEditor} */
     public static final String GUITYPE = "guiType"; // $NON-NLS-$
 
     public static final String ORDER(String group) {
@@ -217,8 +217,8 @@ public GenericTestBeanCustomizer(){
 
             PropertyEditor propertyEditor;
             Object guiType = descriptor.getValue(GUITYPE);
-            if (guiType instanceof GuiEditor) {
-                propertyEditor = ((GuiEditor) guiType).getInstance(descriptor);            
+            if (guiType instanceof TypeEditor) {
+                propertyEditor = ((TypeEditor) guiType).getInstance(descriptor);            
             } else {
                 Class<?> editorClass = descriptor.getPropertyEditorClass();
                 if (log.isDebugEnabled()) {

File: src/core/org/apache/jmeter/testbeans/gui/TypeEditor.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Allow direct specification of property editors.
  */
-public enum GuiEditor {
+public enum TypeEditor {
     FileEditor     {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new FileEditor(descriptor); }},
     PasswordEditor {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new PasswordEditor(); }},
     TableEditor    {@Override PropertyEditor getInstance(PropertyDescriptor descriptor) { return new TableEditor(); }},

File: src/examples/org/apache/jmeter/examples/testbeans/example3/Example3BeanInfo.java
Patch:
@@ -21,7 +21,7 @@
 import java.beans.PropertyDescriptor;
 
 import org.apache.jmeter.testbeans.BeanInfoSupport;
-import org.apache.jmeter.testbeans.gui.GuiEditor;
+import org.apache.jmeter.testbeans.gui.TypeEditor;
 
 public class Example3BeanInfo extends BeanInfoSupport {
 
@@ -50,6 +50,6 @@ public Example3BeanInfo() {
         getprop("myLong2", Long.valueOf(456));
         getprop("myString1");
         getprop("myString2","abcd");
-        property("myFile2", GuiEditor.FileEditor);
+        property("myFile2", TypeEditor.FileEditor);
     }
 }

File: src/examples/org/apache/jmeter/examples/testbeans/example3/Example3.java
Patch:
@@ -55,7 +55,9 @@ public SampleResult sample(Entry ignored) {
                     Object value = field.get(this);
                     bld.append(name).append('=');
                     bld.append(value);
-                    bld.append("\n");
+                    bld.append(" (");
+                    bld.append(field.getType().getCanonicalName());
+                    bld.append(")\n");
                 }
             } catch (IllegalAccessException e) {
                 bld.append(e.toString());

File: src/examples/org/apache/jmeter/examples/testbeans/example3/Example3BeanInfo.java
Patch:
@@ -21,6 +21,7 @@
 import java.beans.PropertyDescriptor;
 
 import org.apache.jmeter.testbeans.BeanInfoSupport;
+import org.apache.jmeter.testbeans.gui.GuiEditor;
 
 public class Example3BeanInfo extends BeanInfoSupport {
 
@@ -49,5 +50,6 @@ public Example3BeanInfo() {
         getprop("myLong2", Long.valueOf(456));
         getprop("myString1");
         getprop("myString2","abcd");
+        property("myFile2", GuiEditor.FileEditor);
     }
 }

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -654,7 +654,7 @@ void clearGuiFields() {
                     if (tags != null && tags.length > 0) {
                         we.setAsText(tags[0]);
                     } else {
-                        we.setValue("");
+                        we.resetValue();
                     }
                 } else if (propertyEditor instanceof ComboStringEditor) {
                     ComboStringEditor cse = (ComboStringEditor) propertyEditor;

File: src/components/org/apache/jmeter/timers/SyncTimer.java
Patch:
@@ -123,7 +123,6 @@ public void testStarted(String host) {
         createBarrier();
     }
 
-	@Override
 	public void testIterationStart(LoopIterationEvent event) {
 		// NOOP
 	}
@@ -140,7 +139,6 @@ private void createBarrier() {
         }
 	}
 
-	@Override
 	public void threadStarted() {
 		int numThreadsInGroup = JMeterContextService.getContext().getThreadGroup().getNumThreads();
 		if(getGroupSize() == 0) {
@@ -149,7 +147,6 @@ public void threadStarted() {
         }
 	}
 
-	@Override
 	public void threadFinished() {
 		// NOOP
 	}

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -36,6 +36,7 @@ public class ActionNames {
     public static final String ADD_PARENT       = "Add Parent"; // $NON-NLS-1$
     public static final String ANALYZE_FILE     = "Analyze File"; // $NON-NLS-1$
     public static final String CHANGE_LANGUAGE  = "change_language"; // $NON-NLS-1$
+    public static final String CHANGE_PARENT    = "Change Parent"; // $NON-NLS-1$
     public static final String CHECK_DIRTY      = "check_dirty"; // $NON-NLS-1$
     public static final String CHECK_REMOVE     = "check_remove"; // $NON-NLS-1$
     public static final String CLEAR            = "action.clear"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -249,6 +249,9 @@ public static JPopupMenu getDefaultControllerMenu() {
         pop.add(makeMenus(MENU_PARENT_CONTROLLER,
                 JMeterUtils.getResString("insert_parent"),// $NON-NLS-1$
                 ActionNames.ADD_PARENT));
+        pop.add(makeMenus(MENU_PARENT_CONTROLLER,
+                JMeterUtils.getResString("change_parent"),// $NON-NLS-1$
+                ActionNames.CHANGE_PARENT));
         MenuFactory.addEditMenu(pop, true);
         MenuFactory.addFileMenu(pop);
         return pop;

File: src/functions/org/apache/jmeter/functions/XPathFileContainer.java
Patch:
@@ -28,10 +28,10 @@
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.transform.TransformerException;
 
+import org.apache.jmeter.util.XPathUtil;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
-import org.apache.xpath.XPathAPI;
 import org.w3c.dom.NodeList;
 import org.xml.sax.SAXException;
 
@@ -74,7 +74,7 @@ private NodeList load() throws IOException, FileNotFoundException, ParserConfigu
             DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
 
             fis = new FileInputStream(fileName);
-            nl = XPathAPI.selectNodeList(builder.parse(fis), xpath);
+            nl = XPathUtil.selectNodeList(builder.parse(fis), xpath);
             log.debug("found " + nl.getLength());
 
         } catch (FileNotFoundException e) {

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPClientDecorator.java
Patch:
@@ -49,7 +49,7 @@ public static byte[] intToByteArray(int value, int len) {
                 byte[] b = new byte[len];
                 for (int i = 0; i < len; i++) {
                     int offset = (b.length - 1 - i) * 8;
-                    b[i] = (byte) (value >>> offset);
+                    b[i] = (byte) ((value >>> offset) & 0xFF);
                 }
                 return b;
             }

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -185,7 +185,7 @@ private void addSubResults(DefaultMutableTreeNode currNode, SampleResult res) {
     }
 
     /** {@inheritDoc} */
-    public void clearData() {
+    public synchronized void clearData() {
         while (root.getChildCount() > 0) {
             // the child to be removed will always be 0 'cos as the nodes are
             // removed the nth node will become (n-1)th
@@ -248,7 +248,7 @@ public void valueChanged(TreeSelectionEvent e) {
         }
     }
 
-    private Component createLeftPanel() {
+    private synchronized Component createLeftPanel() {
         SampleResult rootSampleResult = new SampleResult();
         rootSampleResult.setSampleLabel("Root");
         rootSampleResult.setSuccessful(true);

File: src/core/org/apache/jmeter/reporters/Summariser.java
Patch:
@@ -89,7 +89,7 @@ public class Summariser extends AbstractTestElement
     /**
      * Lock used to protect accumulators update + instanceCount update
      */
-    private transient Object lock = new Object();
+    private static final Object lock = new Object();
 
     /*
      * This map allows summarisers with the same name to contribute to the same totals.

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -140,7 +140,7 @@ public Iterator<URL> getEmbeddedResourceURLs(byte[] html, URL baseUrl) throws HT
         // Whether this can be a problem in practical situations I can't tell,
         // but
         // thought I'd keep a note just in case...
-        // BTW, note that using a Vector and removing duplicates via scan
+        // BTW, note that using a List and removing duplicates via scan
         // would not help, since URL.equals requires name resolution too.
         // The above problem has now been addressed with the URLString and
         // URLCollection classes.

File: src/jorphan/org/apache/jorphan/collections/Data.java
Patch:
@@ -50,7 +50,7 @@ public class Data implements Serializable {
 
     private ArrayList<String> header;
 
-    // saves current position in data Vector
+    // saves current position in data List
     private int currentPos, size;
 
     /**

File: src/core/org/apache/jmeter/reporters/FileReporter.java
Patch:
@@ -130,7 +130,7 @@ public void showPanel() {
 
 /**
  * Graph panel generates all the panels for this reporter. Data is organized
- * based on thread name in a hashtable. The data itself is a Vector of Integer
+ * based on thread name in a hashtable. The data itself is a List of Integer
  * objects
  */
 private static class GraphPanel extends JPanel {
@@ -291,7 +291,7 @@ public JPanel getStats() {
     }
 
     /**
-     * Gets the size of the biggest Vector.
+     * Gets the size of the biggest List.
      */
     public int getDataWidth() {
         int size = 0;

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -48,6 +48,8 @@ public class ActionNames {
     public static final String DEBUG_OFF        = "debug_off"; // $NON-NLS-1$
     public static final String DISABLE          = "disable"; // $NON-NLS-1$
     public static final String DRAG_ADD         = "drag_n_drop.add";//$NON-NLS-1$
+    /** Copy, then paste afterwards */
+    public static final String DUPLICATE        = "duplicate"; // $NON-NLS-1$
     public static final String EDIT             = "edit"; // $NON-NLS-1$
     public static final String ENABLE           = "enable"; // $NON-NLS-1$
     public static final String EXIT             = "exit"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/action/KeyStrokes.java
Patch:
@@ -36,6 +36,7 @@ private KeyStrokes(){
     private static final int CONTROL_MASK =Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();
 
     public static final KeyStroke COPY              = KeyStroke.getKeyStroke(KeyEvent.VK_C, CONTROL_MASK);
+    public static final KeyStroke DUPLICATE         = KeyStroke.getKeyStroke(KeyEvent.VK_C, CONTROL_MASK | KeyEvent.SHIFT_DOWN_MASK);
     public static final KeyStroke DEBUG_OFF         = KeyStroke.getKeyStroke(KeyEvent.VK_D, CONTROL_MASK);
     public static final KeyStroke DEBUG_ON          = KeyStroke.getKeyStroke(KeyEvent.VK_D, CONTROL_MASK | KeyEvent.SHIFT_DOWN_MASK);
     public static final KeyStroke CLEAR_ALL         = KeyStroke.getKeyStroke(KeyEvent.VK_E, CONTROL_MASK);

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -180,6 +180,7 @@ public static void addEditMenu(JPopupMenu menu, boolean removable) {
         }
         menu.add(makeMenuItemRes("copy", ActionNames.COPY, KeyStrokes.COPY));  //$NON-NLS-1$
         menu.add(makeMenuItemRes("paste", ActionNames.PASTE, KeyStrokes.PASTE)); //$NON-NLS-1$
+        menu.add(makeMenuItemRes("duplicate", ActionNames.DUPLICATE, KeyStrokes.DUPLICATE));  //$NON-NLS-1$
         menu.add(makeMenuItemRes("reset_gui", ActionNames.RESET_GUI )); //$NON-NLS-1$
         if (removable) {
             menu.add(makeMenuItemRes("remove", ActionNames.REMOVE, KeyStrokes.REMOVE)); //$NON-NLS-1$

File: test/src/org/apache/jmeter/testelement/PackageTest.java
Patch:
@@ -41,7 +41,7 @@ public PackageTest(String arg0) {
     }
 
     // Test needs to run in this package in order to give access to AbstractTestElement.addProperty() 
-    public void testBug50799() throws Exception {
+    public void DISABLEDtestBug50799() throws Exception {
         HeaderManager headerManager = new HeaderManager();
         headerManager.add(new Header("1stLevelTestHeader", "testValue1"));
         HeaderManager headerManager2 = new HeaderManager();

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -399,7 +399,7 @@ protected void mergeIn(TestElement element) {
         PropertyIterator iter = element.propertyIterator();
         while (iter.hasNext()) {
             JMeterProperty prop = iter.next();
-            addProperty(prop, true);
+            addProperty(prop, false);
         }
     }
 

File: src/core/org/apache/jmeter/samplers/DataStrippingSampleSender.java
Patch:
@@ -31,7 +31,7 @@
  *
  *
  */
-public class DataStrippingSampleSender implements SampleSender, Serializable {
+public class DataStrippingSampleSender extends AbstractSampleSender implements Serializable {
     private static final long serialVersionUID = 1;
     private static final Logger log = LoggingManager.getLoggerForClass();
 

File: src/core/org/apache/jmeter/samplers/HoldSampleSender.java
Patch:
@@ -30,7 +30,7 @@
  * caching functionality (sampleStore).
  */
 
-public class HoldSampleSender implements SampleSender, Serializable {
+public class HoldSampleSender extends AbstractSampleSender implements Serializable {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     private static final long serialVersionUID = 240L;

File: src/core/org/apache/jmeter/samplers/StandardSampleSender.java
Patch:
@@ -29,7 +29,7 @@
  * Default behaviour for remote testing.
  */
 
-public class StandardSampleSender implements SampleSender, Serializable {
+public class StandardSampleSender extends AbstractSampleSender implements Serializable {
     private static final long serialVersionUID = 240L;
 
     private static final Logger log = LoggingManager.getLoggerForClass();

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -332,7 +332,6 @@ public JTree getTree() {
     public void testStarted() {
         testStarted(LOCAL);
         menuBar.setEnabled(true);
-        toolbar.setTestStarted(true);
     }
 
     /**
@@ -349,6 +348,7 @@ public void testStarted(String host) {
         activeThreads.setText("0"); // $NON-NLS-1$
         totalThreads.setText("0"); // $NON-NLS-1$
         menuBar.setRunning(true, host);
+        toolbar.setTestStarted(true);
     }
 
     /**
@@ -359,7 +359,6 @@ public void testStarted(String host) {
     public void testEnded() {
         testEnded(LOCAL);
         menuBar.setEnabled(false);
-        toolbar.setTestStarted(false);
     }
 
     /**
@@ -376,6 +375,7 @@ public void testEnded(String host) {
             JMeterContextService.endTest();
         }
         menuBar.setRunning(false, host);
+        toolbar.setTestStarted(false);
         if (stoppingMessage != null) {
             stoppingMessage.dispose();
             stoppingMessage = null;

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -606,6 +606,7 @@ private void getRemoteItems() {
     public void localeChanged(LocaleChangeEvent event) {
         updateMenuElement(fileMenu);
         updateMenuElement(editMenu);
+        updateMenuElement(searchMenu);
         updateMenuElement(runMenu);
         updateMenuElement(optionsMenu);
         updateMenuElement(helpMenu);

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -646,7 +646,7 @@ public void setTestPlanFile(String f) {
 
         try {
             FileServer.getFileServer().setBasedir(testPlanFile);
-        } catch (IOException e1) {
+        } catch (IllegalStateException e1) {
             log.error("Failure setting file server's base dir", e1);
         }
     }

File: src/core/org/apache/jmeter/services/FileServer.java
Patch:
@@ -110,11 +110,11 @@ public void resetBase() {
      * Normally the provided path is a file, so using the parent directory is appropriate.
      * 
      * @param basedir the path to set, or {@code null} if the GUI is being cleared
-     * @throws IOException if there is a problem resolving the file name
+     * @throws IllegalStateException if files are still open
      */
-    public synchronized void setBasedir(String basedir) throws IOException {
+    public synchronized void setBasedir(String basedir) {
         if (filesOpen()) {
-            throw new IOException("Files are still open, cannot change base directory");
+            throw new IllegalStateException("Files are still open, cannot change base directory");
         }
         files.clear();
         if (basedir != null) {

File: src/core/org/apache/jmeter/testelement/TestPlan.java
Patch:
@@ -303,7 +303,7 @@ public void testStarted() {
         if (getBasedir() != null && getBasedir().length() > 0) {
             try {
                 FileServer.getFileServer().setBasedir(FileServer.getFileServer().getBaseDir() + getBasedir());
-            } catch (IOException e) {
+            } catch (IllegalStateException e) {
                 log.error("Failed to set file server base dir with " + getBasedir(), e);
             }
         }

File: src/reports/org/apache/jmeter/gui/ReportGuiPackage.java
Patch:
@@ -601,7 +601,7 @@ public void setReportPlanFile(String f) {
         ReportGuiPackage.getInstance().getMainFrame().setExtendedFrameTitle(reportPlanFile);
         try {
             FileServer.getFileServer().setBasedir(reportPlanFile);
-        } catch (IOException e1) {
+        } catch (IllegalStateException e1) {
             log.error("Failure setting file server's base dir", e1);
         }
     }

File: src/reports/org/apache/jmeter/testelement/ReportPlan.java
Patch:
@@ -208,7 +208,7 @@ public void testStarted() {
         if (getBasedir() != null && getBasedir().length() > 0) {
             try {
                 FileServer.getFileServer().setBasedir(FileServer.getFileServer().getBaseDir() + getBasedir());
-            } catch (IOException e) {
+            } catch (IllegalStateException e) {
                 log.error("Failed to set file server base dir with " + getBasedir(), e);
             }
         }

File: test/src/org/apache/jmeter/services/TestFileServer.java
Patch:
@@ -95,8 +95,8 @@ public void testopen() throws Exception {
         assertEquals("a1,b1,c1,d1",FS.readLine(infile));
         try {
             FS.setBasedir("x");
-            fail("Expected IOException");
-        } catch (IOException ignored){
+            fail("Expected IllegalStateException");
+        } catch (IllegalStateException ignored){
         }
         FS.closeFile(infile);
         FS.setBasedir("y");

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPClient.java
Patch:
@@ -66,8 +66,9 @@ public interface TCPClient {
      * @param is -
      *            InputStream for socket
      * @return String read from socket
+     * @throws ReadException exception that can contain partial response (Response until error occured)
      */
-    String read(InputStream is) throws IOException;
+    String read(InputStream is) throws ReadException;
 
     /**
      * Get the end-of-line/end-of-message byte.
@@ -83,5 +84,4 @@ public interface TCPClient {
      *            The value to set
      */
     public void setEolByte(int eolInt);
-
 }
\ No newline at end of file

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -233,6 +233,8 @@ private void startGui(String testFile) {
             try {
                 File f = new File(testFile);
                 log.info("Loading file: " + f);
+                FileServer.getFileServer().setBaseForScript(f);
+
                 reader = new FileInputStream(f);
                 HashTree tree = SaveService.loadTree(reader);
 

File: src/core/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -124,10 +124,11 @@ public void runTest() throws JMeterEngineException {
              * See https://issues.apache.org/bugzilla/show_bug.cgi?id=48350
             */
             File baseDirRelative = FileServer.getFileServer().getBaseDirRelative();
+            String scriptName = FileServer.getFileServer().getScriptName();
             synchronized(LOCK)
             {
                 methodName="rconfigure()";
-                remote.rconfigure(testTree, host, baseDirRelative);
+                remote.rconfigure(testTree, host, baseDirRelative, scriptName);
             }
             log.info("sent test to " + host + " basedir='"+baseDirRelative+"'"); // $NON-NLS-1$
             if (savep != null){

File: src/core/org/apache/jmeter/engine/RemoteJMeterEngine.java
Patch:
@@ -29,7 +29,7 @@
  * This is the interface for the RMI server engine, i.e. {@link RemoteJMeterEngineImpl}
  */
 public interface RemoteJMeterEngine extends Remote {
-    void rconfigure(HashTree testTree, String host, File jmxBase) throws RemoteException;
+    void rconfigure(HashTree testTree, String host, File jmxBase, String scriptName) throws RemoteException;
 
     void rrunTest() throws RemoteException, JMeterEngineException;
 

File: src/core/org/apache/jmeter/engine/RemoteJMeterEngineImpl.java
Patch:
@@ -132,7 +132,7 @@ private void init() throws RemoteException {
      * @param testTree
      *            the feature to be added to the ThreadGroup attribute
      */
-    public void rconfigure(HashTree testTree, String host, File jmxBase) throws RemoteException {
+    public void rconfigure(HashTree testTree, String host, File jmxBase, String scriptName) throws RemoteException {
         log.info("Creating JMeter engine on host "+host+" base '"+jmxBase+"'");
         synchronized(LOCK) { // close window where another remote client might jump in
             if (backingEngine != null && backingEngine.isActive()) {
@@ -143,6 +143,7 @@ public void rconfigure(HashTree testTree, String host, File jmxBase) throws Remo
             backingEngine = new StandardJMeterEngine(host);
             backingEngine.configure(testTree); // sets active = true
         }
+        FileServer.getFileServer().setScriptName(scriptName);
         FileServer.getFileServer().setBase(jmxBase);
     }
 

File: src/functions/org/apache/jmeter/functions/TestPlanName.java
Patch:
@@ -23,13 +23,12 @@
 import java.util.List;
 
 import org.apache.jmeter.engine.util.CompoundVariable;
-import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.services.FileServer;
 
 /**
  * Returns Test Plan name
- * FIXME : Implementation need to handle remote run and non gui mode
  */
 public class TestPlanName extends AbstractFunction {
 
@@ -48,7 +47,7 @@ public TestPlanName() {
     @Override
     public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
-    	String testPlanFile = GuiPackage.getInstance().getTestPlanFile();
+    	String testPlanFile = FileServer.getFileServer().getScriptName();
         return testPlanFile;
     }
 

File: src/core/org/apache/jmeter/services/FileServer.java
Patch:
@@ -161,10 +161,10 @@ public synchronized void setBase(File jmxBase) {
             throw new IllegalStateException("Files are still open, cannot change base directory");
         }
         files.clear();
-        // getParentFile() may not work on relative paths
         base = jmxBase;
         log.info("Set new base='"+base+"'");
     }
+
     public synchronized String getBaseDir() {
         return base.getAbsolutePath();
     }

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -399,7 +399,7 @@ protected void mergeIn(TestElement element) {
         PropertyIterator iter = element.propertyIterator();
         while (iter.hasNext()) {
             JMeterProperty prop = iter.next();
-            addProperty(prop, false);
+            addProperty(prop, true);
         }
     }
 

File: src/functions/org/apache/jmeter/functions/TestPlanName.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * Returns Test Plan name
- *
+ * FIXME : Implementation need to handle remote run and non gui mode
  */
 public class TestPlanName extends AbstractFunction {
 

File: test/src/org/apache/jmeter/testelement/PackageTest.java
Patch:
@@ -41,7 +41,7 @@ public PackageTest(String arg0) {
     }
 
     // Test needs to run in this package in order to give access to AbstractTestElement.addProperty() 
-    public void DISABLEDtestBug50799() throws Exception {
+    public void testBug50799() throws Exception {
         HeaderManager headerManager = new HeaderManager();
         headerManager.add(new Header("1stLevelTestHeader", "testValue1"));
         HeaderManager headerManager2 = new HeaderManager();

File: src/core/org/apache/jmeter/testelement/TestElement.java
Patch:
@@ -117,7 +117,7 @@ public interface TestElement extends Cloneable {
 
     /**
      * Tells the test element to return to the state it was in when
-     * makeRunningVersion() was called.
+     * setRunningVersion(true) was called.
      */
     public void recoverRunningVersion();
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1735,6 +1735,8 @@ private static class ASyncSample implements Callable<AsynSamplerResultHolder> {
             this.areFollowingRedirect = areFollowingRedirect;
             this.depth = depth;
             this.sampler = (HTTPSamplerBase) base.clone();
+            // We don't want to use CacheManager clone but the parent one, and CacheManager is Thread Safe
+            this.sampler.setCacheManager(base.getCacheManager());
             
             if(cookieManager != null) {
                 CookieManager clonedCookieManager = (CookieManager) cookieManager.clone();

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -93,7 +93,7 @@ public class SubscriberSampler extends BaseJMSSampler implements Interruptible,
     
     private transient boolean START_ON_SAMPLE = false;
 
-	private volatile String separator;
+	private transient String separator;
 
     public SubscriberSampler() {
         super();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -128,8 +128,6 @@ public void process(HttpResponse response, HttpContext context)
         }
     };
     private static final HttpRequestInterceptor METRICS_RESETTER = new HttpRequestInterceptor() {
-		
-		@Override
 		public void process(HttpRequest request, HttpContext context)
 				throws HttpException, IOException {
             HttpConnection conn = (HttpConnection) context.getAttribute(ExecutionContext.HTTP_CONNECTION);

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -96,9 +96,9 @@ public void doAction(ActionEvent e) throws IllegalUserActionException {
 
         String updateFile = GuiPackage.getInstance().getTestPlanFile();
         if (!ActionNames.SAVE.equals(e.getActionCommand()) || updateFile == null) {
-            JFileChooser chooser = FileDialoger.promptToSaveFile(GuiPackage.getInstance().getTreeListener()
+            JFileChooser chooser = FileDialoger.promptToSaveFile(updateFile == null ? GuiPackage.getInstance().getTreeListener()
                     .getCurrentNode().getName()
-                    + JMX_FILE_EXTENSION);
+                    + JMX_FILE_EXTENSION : updateFile);
             if (chooser == null) {
                 return;
             }

File: src/core/org/apache/jmeter/gui/util/FileDialoger.java
Patch:
@@ -124,7 +124,9 @@ public static JFileChooser promptToSaveFile(String filename, String[] extensions
         }
         String ext = ".jmx";//$NON-NLS-1$
         if (filename != null) {
-            jfc.setSelectedFile(new File(lastJFCDirectory, filename));
+            jfc.setSelectedFile(filename.lastIndexOf(System.getProperty("file.separator")) > 0 ?
+                    new File(filename) :
+                    new File(lastJFCDirectory, filename));
             int i = -1;
             if ((i = filename.lastIndexOf(".")) > -1) {//$NON-NLS-1$
                 ext = filename.substring(i);

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/LengthPrefixedBinaryTCPClientImpl.java
Patch:
@@ -86,8 +86,8 @@ public String read(InputStream is) {
             if (is.read(lengthBuffer, 0, lengthPrefixLen) == lengthPrefixLen) {
                 msgLen = byteArrayToInt(lengthBuffer);
                 msg = new byte[msgLen];
-                int bytes = is.read(msg);
-                if (bytes < msgLen){
+                int bytes = JOrphanUtils.read(is, msg, 0, msgLen);
+                if (bytes < msgLen) {
                     log.warn("Incomplete message read, expected: "+msgLen+" got: "+bytes);
                 }
             }

File: src/core/org/apache/jmeter/testelement/property/CollectionProperty.java
Patch:
@@ -32,7 +32,7 @@ public class CollectionProperty extends MultiProperty {
 
     private transient Collection<JMeterProperty> savedValue;
 
-    public CollectionProperty(String name, Collection value) {
+    public CollectionProperty(String name, Collection<?> value) {
         super(name);
         this.value = normalizeList(value);
     }
@@ -152,7 +152,7 @@ private Collection<JMeterProperty> cloneCollection() {
         }
     }
 
-    public void setCollection(Collection coll) {
+    public void setCollection(Collection<?> coll) {
         value = normalizeList(coll);
     }
 

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -70,7 +70,7 @@ public Object clone() {
 
             PropertyIterator iter = propertyIterator();
             while (iter.hasNext()) {
-                clonedElement.setProperty((JMeterProperty) iter.next().clone());
+                clonedElement.setProperty(iter.next().clone());
             }
             clonedElement.setRunningVersion(runningVersion);
             return clonedElement;

File: src/core/org/apache/jmeter/testelement/property/AbstractProperty.java
Patch:
@@ -86,7 +86,7 @@ protected PropertyIterator getIterator(Collection<JMeterProperty> values) {
 
     /** {@inheritDoc} */
     @Override
-    public Object clone() {
+    public AbstractProperty clone() {
         try {
             AbstractProperty prop = (AbstractProperty) super.clone();
             prop.name = name;

File: src/core/org/apache/jmeter/testelement/property/BooleanProperty.java
Patch:
@@ -62,7 +62,7 @@ public Object getObjectValue() {
     }
 
     @Override
-    public Object clone() {
+    public BooleanProperty clone() {
         BooleanProperty prop = (BooleanProperty) super.clone();
         prop.value = value;
         return prop;

File: src/core/org/apache/jmeter/testelement/property/CollectionProperty.java
Patch:
@@ -131,7 +131,7 @@ public int size() {
      * {@inheritDoc}
      */
     @Override
-    public Object clone() {
+    public CollectionProperty clone() {
         CollectionProperty prop = (CollectionProperty) super.clone();
         prop.value = cloneCollection();
         return prop;
@@ -143,7 +143,7 @@ private Collection<JMeterProperty> cloneCollection() {
             Collection<JMeterProperty> newCol = value.getClass().newInstance();
             PropertyIterator iter = iterator();
             while (iter.hasNext()) {
-                newCol.add((JMeterProperty) iter.next().clone());
+                newCol.add(iter.next().clone());
             }
             return newCol;
         } catch (Exception e) {

File: src/core/org/apache/jmeter/testelement/property/DoubleProperty.java
Patch:
@@ -76,7 +76,7 @@ public Object getObjectValue() {
      * {@inheritDoc}
      */
     @Override
-    public Object clone() {
+    public DoubleProperty clone() {
         DoubleProperty prop = (DoubleProperty) super.clone();
         prop.value = value;
         return prop;

File: src/core/org/apache/jmeter/testelement/property/FloatProperty.java
Patch:
@@ -92,7 +92,7 @@ public Object getObjectValue() {
      * {@inheritDoc}
      */
     @Override
-    public Object clone() {
+    public FloatProperty clone() {
         FloatProperty prop = (FloatProperty) super.clone();
         prop.value = value;
         return prop;

File: src/core/org/apache/jmeter/testelement/property/FunctionProperty.java
Patch:
@@ -110,7 +110,7 @@ public Object getObjectValue() {
     }
 
     @Override
-    public Object clone() {
+    public FunctionProperty clone() {
         FunctionProperty prop = (FunctionProperty) super.clone();
         prop.cacheValue = cacheValue;
         prop.testIteration = testIteration;

File: src/core/org/apache/jmeter/testelement/property/IntegerProperty.java
Patch:
@@ -97,7 +97,7 @@ public Object getObjectValue() {
      * {@inheritDoc}
      */
     @Override
-    public Object clone() {
+    public IntegerProperty clone() {
         IntegerProperty prop = (IntegerProperty) super.clone();
         prop.value = value;
         return prop;

File: src/core/org/apache/jmeter/testelement/property/JMeterProperty.java
Patch:
@@ -90,5 +90,5 @@ public interface JMeterProperty extends Serializable, Cloneable, Comparable<JMet
 
     public void setObjectValue(Object value);
 
-    public Object clone();
+    public JMeterProperty clone();
 }

File: src/core/org/apache/jmeter/testelement/property/LongProperty.java
Patch:
@@ -93,7 +93,7 @@ public Object getObjectValue() {
      * {@inheritDoc}
      */
     @Override
-    public Object clone() {
+    public LongProperty clone() {
         LongProperty prop = (LongProperty) super.clone();
         prop.value = value;
         return prop;

File: src/core/org/apache/jmeter/testelement/property/MapProperty.java
Patch:
@@ -104,7 +104,7 @@ public Object getObjectValue() {
 
     /** {@inheritDoc} */
     @Override
-    public Object clone() {
+    public MapProperty clone() {
         MapProperty prop = (MapProperty) super.clone();
         prop.value = cloneMap();
         return prop;
@@ -117,7 +117,7 @@ private Map<String, JMeterProperty> cloneMap() {
             PropertyIterator iter = valueIterator();
             while (iter.hasNext()) {
                 JMeterProperty item = iter.next();
-                newCol.put(item.getName(), (JMeterProperty) item.clone());
+                newCol.put(item.getName(), item.clone());
             }
             return newCol;
         } catch (Exception e) {

File: src/core/org/apache/jmeter/testelement/property/NullProperty.java
Patch:
@@ -81,7 +81,7 @@ public void mergeIn(JMeterProperty prop) {
     }
 
     @Override
-    public final Object clone() {
+    public final NullProperty clone() {
         return this;
     }
 

File: src/core/org/apache/jmeter/testelement/property/ObjectProperty.java
Patch:
@@ -56,7 +56,7 @@ public void setRunningVersion(boolean runningVersion) {
      * {@inheritDoc}
      */
     @Override
-    public Object clone() {
+    public ObjectProperty clone() {
         ObjectProperty p = (ObjectProperty) super.clone();
         p.value = value;
         return p;

File: src/core/org/apache/jmeter/testelement/property/StringProperty.java
Patch:
@@ -77,7 +77,7 @@ public Object getObjectValue() {
      * {@inheritDoc}
      */
     @Override
-    public Object clone() {
+    public StringProperty clone() {
         StringProperty prop = (StringProperty) super.clone();
         prop.value = value;
         return prop;

File: src/core/org/apache/jmeter/testelement/property/TestElementProperty.java
Patch:
@@ -95,7 +95,7 @@ public void setElement(TestElement el) {
      * {@inheritDoc}
      */
     @Override
-    public Object clone() {
+    public TestElementProperty clone() {
         TestElementProperty prop = (TestElementProperty) super.clone();
         prop.value = (TestElement) value.clone();
         return prop;

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -504,7 +504,7 @@ public void testIterationStart(LoopIterationEvent event) {
         if (getClearEachIteration()) {
             log.debug("Initialise cookies from pre-defined list");
             // No need to call clear
-            setProperty((CollectionProperty)initialCookies.clone());
+            setProperty(initialCookies.clone());
         }
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPFileArg.java
Patch:
@@ -86,7 +86,7 @@ public HTTPFileArg(JMeterProperty path, JMeterProperty paramname, JMeterProperty
     }
 
     private void setProperty(String name, JMeterProperty prop) {
-        JMeterProperty jmp = (JMeterProperty) prop.clone();
+        JMeterProperty jmp = prop.clone();
         jmp.setName(name);
         setProperty(jmp);
     }

File: src/core/org/apache/jmeter/testelement/property/CollectionProperty.java
Patch:
@@ -143,7 +143,7 @@ private Collection<JMeterProperty> cloneCollection() {
             Collection<JMeterProperty> newCol = value.getClass().newInstance();
             PropertyIterator iter = iterator();
             while (iter.hasNext()) {
-                newCol.add(iter.next().clone());
+                newCol.add((JMeterProperty) iter.next().clone());
             }
             return newCol;
         } catch (Exception e) {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -351,7 +351,9 @@ private void clearCache() {
             @Override
             protected Map<String, CacheEntry> initialValue(){
                 // Bug 51942 - this map may be used from multiple threads
-                return Collections.<String, CacheEntry>synchronizedMap(new LRUMap(getMaxSize()));
+                @SuppressWarnings("unchecked") // LRUMap is not generic currently
+                Map<String, CacheEntry> map = new LRUMap(getMaxSize());
+                return Collections.<String, CacheEntry>synchronizedMap(map);
             }
         };
     }

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -83,6 +83,7 @@ public class ActionNames {
     public static final String SUB_TREE_MERGED  = "sub_tree_merged"; // $NON-NLS-1$
     public static final String SUB_TREE_SAVED   = "sub_tree_saved"; // $NON-NLS-1$
     public static final String TOGGLE           = "toggle"; // $NON-NLS-1$ enable/disable
+    public static final String TOOLBAR           = "toolbar"; // $NON-NLS-1$
     public static final String WHAT_CLASS       = "what_class"; // $NON-NLS-1$
     public static final String SEARCH_TREE      = "search_tree"; // $NON-NLS-1$
     public static final String SEARCH_RESET      = "search_reset"; // $NON-NLS-1$

File: src/jorphan/org/apache/jorphan/gui/ObjectTableModel.java
Patch:
@@ -202,7 +202,7 @@ public boolean isCellEditable(int arg0, int arg1) {
     /** {@inheritDoc} */
     @Override
     public void moveRow(int start, int end, int to) {
-        List<Object> subList = new ArrayList(objects.subList(start, end));
+        List<Object> subList = new ArrayList<Object>(objects.subList(start, end));
         for (int x = end - 1; x >= start; x--) {
             objects.remove(x);
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/HttpDefaultsGui.java
Patch:
@@ -124,7 +124,7 @@ private void init() {
 
         add(makeTitlePanel(), BorderLayout.NORTH);
 
-        urlConfig = new UrlConfigGui(false);
+        urlConfig = new UrlConfigGui(false, true, false);
         add(urlConfig, BorderLayout.CENTER);
 
         // OPTIONAL TASKS

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/MultipartUrlConfigGui.java
Patch:
@@ -51,7 +51,7 @@ public MultipartUrlConfigGui(boolean showSamplerFields) {
     }
 
     public MultipartUrlConfigGui(boolean showSamplerFields, boolean showImplementation) {
-        super(showSamplerFields, showImplementation);
+        super(showSamplerFields, showImplementation, true);
         init();
     }
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/Publisher.java
Patch:
@@ -176,6 +176,5 @@ public void close() {
         Utils.close(producer, log);
         Utils.close(session, log);
         Utils.close(connection, log);
-        Utils.close(ctx, log);
     }
 }

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
Patch:
@@ -154,9 +154,8 @@ private ReceiveSubscriber(int queueSize, boolean useProps,
             String durableSubscriptionId, String clientId, String jmsSelector, boolean useAuth, 
             String securityPrincipal, String securityCredentials, boolean useMessageListener) throws NamingException, JMSException {
         boolean initSuccess = false;
-        Context ctx = null;
         try{
-            ctx = InitialContextFactory.getContext(useProps, 
+            Context ctx = InitialContextFactory.getContext(useProps, 
                     initialContextFactory, providerUrl, useAuth, securityPrincipal, securityCredentials);
             CONN = Utils.getConnection(ctx, connfactory);
             if(!isEmpty(clientId)) {
@@ -182,7 +181,6 @@ private ReceiveSubscriber(int queueSize, boolean useProps,
             if(!initSuccess) {
                 close();
             }
-            Utils.close(ctx, log);
         }
     }
     

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -27,6 +27,7 @@
 
 import org.apache.jmeter.engine.event.LoopIterationEvent;
 import org.apache.jmeter.protocol.jms.Utils;
+import org.apache.jmeter.protocol.jms.client.InitialContextFactory;
 import org.apache.jmeter.protocol.jms.client.ReceiveSubscriber;
 import org.apache.jmeter.protocol.jms.control.gui.JMSSubscriberGui;
 import org.apache.jmeter.samplers.Interruptible;
@@ -414,7 +415,7 @@ public void setStopBetweenSamples(boolean selected) {
      * {@inheritDoc}
      */
     public void testEnded() {
-        // NOOP
+        InitialContextFactory.close();
     }
 
     /**

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/Publisher.java
Patch:
@@ -176,5 +176,6 @@ public void close() {
         Utils.close(producer, log);
         Utils.close(session, log);
         Utils.close(connection, log);
+        Utils.close(ctx, log);
     }
 }

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
Patch:
@@ -154,8 +154,9 @@ private ReceiveSubscriber(int queueSize, boolean useProps,
             String durableSubscriptionId, String clientId, String jmsSelector, boolean useAuth, 
             String securityPrincipal, String securityCredentials, boolean useMessageListener) throws NamingException, JMSException {
         boolean initSuccess = false;
+        Context ctx = null;
         try{
-            Context ctx = InitialContextFactory.getContext(useProps, 
+            ctx = InitialContextFactory.getContext(useProps, 
                     initialContextFactory, providerUrl, useAuth, securityPrincipal, securityCredentials);
             CONN = Utils.getConnection(ctx, connfactory);
             if(!isEmpty(clientId)) {
@@ -181,6 +182,7 @@ private ReceiveSubscriber(int queueSize, boolean useProps,
             if(!initSuccess) {
                 close();
             }
+            Utils.close(ctx, log);
         }
     }
     

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -27,7 +27,6 @@
 
 import org.apache.jmeter.engine.event.LoopIterationEvent;
 import org.apache.jmeter.protocol.jms.Utils;
-import org.apache.jmeter.protocol.jms.client.InitialContextFactory;
 import org.apache.jmeter.protocol.jms.client.ReceiveSubscriber;
 import org.apache.jmeter.protocol.jms.control.gui.JMSSubscriberGui;
 import org.apache.jmeter.samplers.Interruptible;
@@ -415,7 +414,7 @@ public void setStopBetweenSamples(boolean selected) {
      * {@inheritDoc}
      */
     public void testEnded() {
-        InitialContextFactory.close();
+        // NOOP
     }
 
     /**

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -369,7 +369,7 @@ public String getDurableSubscriptionId(){
      * @return JMS Client ID
      */
     public String getClientId() {
-        return getPropertyAsString(CLIENT_ID);
+        return getPropertyAsString(CLIENT_ID, CLIENT_ID_DEFAULT);
     }
 
     public void setDurableSubscriptionId(String durableSubscriptionId){

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -29,6 +29,7 @@ public class ActionNames {
     public static final String ABOUT            = "about"; // $NON-NLS-1$
     public static final String ACTION_SHUTDOWN  = "shutdown"; // $NON-NLS-1$
     public static final String ACTION_START     = "start"; // $NON-NLS-1$
+    public static final String ACTION_START_NO_TIMERS = "start_no_timers"; // $NON-NLS-1$
     public static final String ACTION_STOP      = "stop"; // $NON-NLS-1$
     public static final String ADD              = "Add"; // $NON-NLS-1$
     public static final String ADD_ALL          = "add_all"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -46,7 +46,7 @@ public class JMeterTreeNode extends DefaultMutableTreeNode implements NamedTreeN
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final int TEST_PLAN_LEVEL = 2;
+    private static final int TEST_PLAN_LEVEL = 1;
 
     private final JMeterTreeModel treeModel;
 

File: src/core/org/apache/jmeter/functions/gui/FunctionHelper.java
Patch:
@@ -68,7 +68,7 @@ public FunctionHelper() {
     }
 
     private void init() {
-        parameterPanel = new ArgumentsPanel(JMeterUtils.getResString("function_params")); //$NON-NLS-1$
+        parameterPanel = new ArgumentsPanel(JMeterUtils.getResString("function_params"), false); //$NON-NLS-1$
         initializeFunctionList();
         this.getContentPane().setLayout(new BorderLayout(10, 10));
         JPanel comboPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -84,6 +84,7 @@ public class ActionNames {
     public static final String TOGGLE           = "toggle"; // $NON-NLS-1$ enable/disable
     public static final String WHAT_CLASS       = "what_class"; // $NON-NLS-1$
     public static final String SEARCH_TREE      = "search_tree"; // $NON-NLS-1$
+    public static final String SEARCH_RESET      = "search_reset"; // $NON-NLS-1$
 
     // Prevent instantiation
     private ActionNames(){

File: src/functions/org/apache/jmeter/functions/RandomString.java
Patch:
@@ -33,8 +33,8 @@
 import org.apache.log.Logger;
 
 /**
- * Provides a Random function which returns a random long integer between a min
- * (first argument) and a max (second argument).
+ * Provides a RandomString function which returns a random String of length (first argument) 
+ * using characters (second argument)
  *
  */
 public class RandomString extends AbstractFunction {

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -83,6 +83,7 @@ public class ActionNames {
     public static final String SUB_TREE_SAVED   = "sub_tree_saved"; // $NON-NLS-1$
     public static final String TOGGLE           = "toggle"; // $NON-NLS-1$ enable/disable
     public static final String WHAT_CLASS       = "what_class"; // $NON-NLS-1$
+    public static final String SEARCH_TREE      = "search_tree"; // $NON-NLS-1$
 
     // Prevent instantiation
     private ActionNames(){

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -150,7 +150,8 @@ private synchronized void updateGui(SampleResult res) {
             jTree.expandPath(new TreePath(root));
         }
         if (autoScrollCB.isSelected() && root.getChildCount() > 1) {
-            jTree.scrollRowToVisible(root.getChildCount() - 1);
+            jTree.scrollPathToVisible(new TreePath(new Object[] { root,
+                    treeModel.getChild(root, root.getChildCount() - 1) }));
         }
     }
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java
Patch:
@@ -71,15 +71,18 @@ public static Context lookupContext(String initialContextFactory,
                 throw new NamingException(e.toString());
             }
             // we want to return the context that is actually in the map
+            // if it's the first put we will have a null result
             Context oldCtx = MAP.putIfAbsent(cacheKey, ctx);
             if(oldCtx != null) {
+                // There was an object in map, destroy the temporary and return one in map (oldCtx)
                 try {
                     ctx.close();
                 } catch (Exception e) {
                     // NOOP
                 }
                 ctx = oldCtx;
             }
+            // else No object in Map, ctx is the one
         }
         return ctx;
     }

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -311,7 +311,7 @@ private void moveDown() {
         cancelEditing();
 
         int rowSelected = table.getSelectedRow();
-        if (rowSelected < table.getRowCount()-1) {
+        if (rowSelected >=0 && rowSelected < table.getRowCount()-1) {
             tableModel.moveRow(rowSelected, rowSelected+1, rowSelected+1);
             table.setRowSelectionInterval(rowSelected+1, rowSelected+1);
         }

File: src/jorphan/org/apache/jorphan/gui/ObjectTableModel.java
Patch:
@@ -202,7 +202,7 @@ public boolean isCellEditable(int arg0, int arg1) {
     /** {@inheritDoc} */
     @Override
     public void moveRow(int start, int end, int to) {
-        List<Object> subList = objects.subList(start, end);
+        List<Object> subList = new ArrayList(objects.subList(start, end));
         for (int x = end - 1; x >= start; x--) {
             objects.remove(x);
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorControl.java
Patch:
@@ -33,7 +33,8 @@ public class HttpMirrorControl extends AbstractTestElement {
 
     private transient HttpMirrorServer server;
 
-    private static final int DEFAULT_PORT = 8081;
+    // Used by HttpMirrorServer
+    static final int DEFAULT_PORT = 8081;
 
     // and as a string
     public static final String DEFAULT_PORT_S =

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
Patch:
@@ -116,7 +116,7 @@ public Exception getException(){
     }
 
     public static void main(String args[]){
-        int port = 8081;
+        int port = HttpMirrorControl.DEFAULT_PORT;
         if (args.length > 0){
             port = Integer.parseInt(args[0]);
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorControl.java
Patch:
@@ -33,7 +33,7 @@ public class HttpMirrorControl extends AbstractTestElement {
 
     private transient HttpMirrorServer server;
 
-    private static final int DEFAULT_PORT = 8080;
+    private static final int DEFAULT_PORT = 8081;
 
     // and as a string
     public static final String DEFAULT_PORT_S =

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
Patch:
@@ -116,7 +116,7 @@ public Exception getException(){
     }
 
     public static void main(String args[]){
-        int port = 8080;
+        int port = 8081;
         if (args.length > 0){
             port = Integer.parseInt(args[0]);
         }

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -403,6 +403,8 @@ private SampleResult process_sampler(Sampler current, Sampler parent, JMeterCont
                 delay(pack.getTimers());
                 Sampler sampler = pack.getSampler();
                 sampler.setThreadContext(threadContext);
+                // TODO should this set the thread names for all the subsamples?
+                // might be more efficient than fetching the name elsewehere
                 sampler.setThreadName(threadName);
                 TestBeanHelper.prepare(sampler);
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1548,7 +1548,7 @@ public void threadFinished(){
      */
     public byte[] readResponse(SampleResult sampleResult, InputStream in, int length) throws IOException {
 
-        byte[] readBuffer = getThreadContext().getReadBuffer();
+        byte[] readBuffer = new byte[8192]; // 8kB is the (max) size to have the latency ('the first packet')
         int bufferSize=32;// Enough for MD5
 
         MessageDigest md=null;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/FormCharSetFinder.java
Patch:
@@ -43,7 +43,7 @@ public class FormCharSetFinder {
         log.info("Using htmlparser version: "+Parser.getVersion());
     }
 
-    protected FormCharSetFinder() {
+    public FormCharSetFinder() {
         super();
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -823,7 +823,7 @@ private String sendPostData(HttpPost post)  throws IOException {
                     }
                 }
 
-                FileEntity fileRequestEntity = new FileEntity(new File(file.getPath()),null);
+                FileEntity fileRequestEntity = new FileEntity(new File(file.getPath()),(String) null);// TODO is null correct?
                 post.setEntity(fileRequestEntity);
 
                 // We just add placeholder text for file content
@@ -977,7 +977,7 @@ private String sendPutData(HttpPut put) throws IOException {
             hasPutBody = true;
 
             // If getSendFileAsPostBody returned true, it's sure that file is not null
-            FileEntity fileRequestEntity = new FileEntity(new File(files[0].getPath()),null);
+            FileEntity fileRequestEntity = new FileEntity(new File(files[0].getPath()), (String) null); // TODO is null correct?
             put.setEntity(fileRequestEntity);
 
             // We just add placeholder text for file content

File: src/core/org/apache/jmeter/samplers/AsynchSampleSender.java
Patch:
@@ -40,7 +40,7 @@ public class AsynchSampleSender implements SampleSender, Serializable {
     // Create unique object as marker for end of queue
     private transient static final SampleEvent FINAL_EVENT = new SampleEvent();
     
-    private static final int capacity = JMeterUtils.getPropDefault("asynch.batch.queue.size", 20); // $NON-NLS-1$
+    private static final int capacity = JMeterUtils.getPropDefault("asynch.batch.queue.size", 100); // $NON-NLS-1$
 
     // created by client 
     private final RemoteSampleListener listener;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -89,8 +89,8 @@ public class HTTPHC3Impl extends HTTPHCAbstractImpl {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    /** retry count to be used (default 3); 0 = disable retries */
-    private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient3.retrycount", 3);
+    /** retry count to be used (default 1); 0 = disable retries */
+    private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient3.retrycount", 1);
 
     private static final String HTTP_AUTHENTICATION_PREEMPTIVE = "http.authentication.preemptive"; // $NON-NLS-1$
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -111,8 +111,8 @@ public class HTTPHC4Impl extends HTTPHCAbstractImpl {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    /** retry count to be used; defaults to 0 = disable retries */
-    private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient4.retrycount", 0);
+    /** retry count to be used (default 1); 0 = disable retries */
+    private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient4.retrycount", 1);
 
     private static final String CONTEXT_METRICS = "jmeter_metrics"; // TODO hack, to be removed later
 

File: src/components/org/apache/jmeter/extractor/gui/XPathExtractorGui.java
Patch:
@@ -72,7 +72,7 @@ public XPathExtractorGui(){
     public void configure(TestElement el) {
         super.configure(el);
         XPathExtractor xpe = (XPathExtractor) el;
-        showScopeSettings(xpe);
+        showScopeSettings(xpe,true);
         xpathQueryField.setText(xpe.getXPathQuery());
         defaultField.setText(xpe.getDefaultValue());
         refNameField.setText(xpe.getRefName());
@@ -119,7 +119,7 @@ private void init() {
 
         Box box = Box.createVerticalBox();
         box.add(makeTitlePanel());
-        box.add(createScopePanel());
+        box.add(createScopePanel(true));
         xml.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils
                 .getResString("xpath_assertion_option"))); //$NON-NLS-1$
         box.add(xml);

File: src/components/org/apache/jmeter/control/IncludeController.java
Patch:
@@ -78,7 +78,7 @@ public Object clone() {
                 }
             }
             clone.SUBTREE = (HashTree)this.SUBTREE.clone();
-            clone.SUB = (TestElement)this.SUB.clone();
+            clone.SUB = this.SUB==null ? null : (TestElement) this.SUB.clone();
         }
         return clone;
     }

File: src/functions/org/apache/jmeter/functions/JavaScript.java
Patch:
@@ -89,7 +89,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
             }
 
         } catch (RhinoException e) {
-            log.error("Error processing Javascript", e);
+            log.error("Error processing Javascript: [" + script + "]\n", e);
             throw new InvalidVariableException();
         } finally {
             Context.exit();

File: src/core/org/apache/jmeter/control/IfController.java
Patch:
@@ -97,7 +97,7 @@ public String getCondition() {
     /**
      * evaluate the condition clause log error if bad condition
      */
-    private static boolean evaluateCondition(String cond) {
+    private boolean evaluateCondition(String cond) {
         logger.debug("    getCondition() : [" + cond + "]");
 
         String resultStr = "";
@@ -122,7 +122,7 @@ private static boolean evaluateCondition(String cond) {
 
             logger.debug("    >> evaluate Condition -  [ " + cond + "] results is  [" + result + "]");
         } catch (Exception e) {
-            logger.error(e.getMessage(), e);
+            logger.error(getName()+": error while processing "+ "[" + cond + "]\n", e);
         } finally {
             Context.exit();
         }

File: src/core/org/apache/jmeter/samplers/SampleSenderFactory.java
Patch:
@@ -80,7 +80,7 @@ static SampleSender getInstance(RemoteSampleListener listener) {
             } catch (Exception e) {
                 // houston we have a problem !!
                 log.error("Unable to create a sample sender from class "+type);
-                throw new IllegalArgumentException(e.getMessage());
+                throw new IllegalArgumentException(e.getMessage(), e);
             }
 
             return s;

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -538,7 +538,7 @@ public void addSubResult(SampleResult subResult) {
         subResult.setThreadName(tn); // TODO is this really necessary?
 
         // Extend the time to the end of the added sample
-        setEndTime(Math.max(getEndTime(), subResult.getEndTime()));
+        setEndTime(Math.max(getEndTime(), subResult.getEndTime() + nanoTimeOffset - subResult.nanoTimeOffset)); // Bug 51855
         // Include the byte count for the added sample
         setBytes(getBytes() + subResult.getBytes());
         addRawSubResult(subResult);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.jmeter.protocol.jms.Utils;
 import org.apache.jmeter.protocol.jms.control.gui.JMSPublisherGui;
 import org.apache.jmeter.protocol.jms.client.ClientPool;
+import org.apache.jmeter.protocol.jms.client.InitialContextFactory;
 import org.apache.jmeter.protocol.jms.client.Publisher;
 
 import org.apache.jorphan.logging.LoggingManager;
@@ -84,7 +85,7 @@ public void testStarted(String test) {
     /**
      * the implementation calls testEnded() without any parameters.
      */
-    public void testEnded(String test) {
+    public void testEnded(String host) {
         testEnded();
     }
 
@@ -96,6 +97,7 @@ public void testEnded(String test) {
     public void testEnded() {
         log.debug("PublisherSampler.testEnded called");
         ClientPool.clearClient();
+        InitialContextFactory.close();
     }
 
     public void testStarted() {

File: src/monitor/components/org/apache/jmeter/monitor/util/Stats.java
Patch:
@@ -118,7 +118,7 @@ public static int calculateStatus(Status stat) {
                 return WARNING;
             } else if (per >= ACTIVE_PER && per <= WARNING_PER) {
                 return ACTIVE;
-            } else if (per < ACTIVE_PER && per > HEALTHY_PER) {
+            } else if (per < ACTIVE_PER && per >= HEALTHY_PER) {
                 return HEALTHY;
             } else {
                 return DEAD;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/FormCharSetFinder.java
Patch:
@@ -35,7 +35,8 @@
 /**
  * A parser for html, to find the form tags, and their accept-charset value
  */
-class FormCharSetFinder {
+// made public see Bug 49976
+public class FormCharSetFinder {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     static {

File: src/core/org/apache/jmeter/threads/JMeterContext.java
Patch:
@@ -65,6 +65,7 @@ private void clear0() {
         samplingStarted = false;
         threadNum = 0;
         readBuffer = null;
+        thread = null;
     }
 
     /**

File: src/components/org/apache/jmeter/visualizers/AssertionVisualizer.java
Patch:
@@ -56,6 +56,7 @@ public void add(SampleResult sample) {
         sb.append("\n"); // $NON-NLS-1$
         synchronized (textArea) {
             textArea.append(sb.toString());
+            textArea.setCaretPosition(textArea.getText().length());
         }
     }
 

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -93,6 +93,8 @@ public class JMeter implements JMeterPlugin {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
+    public static final int UDP_PORT_DEFAULT = 4445; // needed for ShutdownClient
+
     public static final String HTTP_PROXY_PASS = "http.proxyPass"; // $NON-NLS-1$
 
     public static final String HTTP_PROXY_USER = "http.proxyUser"; // $NON-NLS-1$
@@ -1037,7 +1039,7 @@ private void logProperty(String prop,String separator){
     }
 
     private static void startUdpDdaemon(final JMeterEngine engine) {
-        int port = JMeterUtils.getPropDefault("jmeterengine.nongui.port", 4445); // $NON-NLS-1$
+        int port = JMeterUtils.getPropDefault("jmeterengine.nongui.port", UDP_PORT_DEFAULT); // $NON-NLS-1$
         int maxPort = JMeterUtils.getPropDefault("jmeterengine.nongui.maxport", 4455); // $NON-NLS-1$
         if (port > 1000){
             final DatagramSocket socket = getSocket(port, maxPort);

File: src/core/org/apache/jmeter/util/ShutdownClient.java
Patch:
@@ -23,13 +23,15 @@
 import java.net.DatagramSocket;
 import java.net.InetAddress;
 
+import org.apache.jmeter.JMeter;
+
 
 /**
  * Simple utility to send a shutdown message to a non-GUI instance of JMeter
  */
 public class ShutdownClient {
     public static void main(String[] args) throws IOException {
-        int port = 4445;
+        int port = JMeter.UDP_PORT_DEFAULT;
         if (args.length > 1){
             port = Integer.parseInt(args[1]);
         } else if (args.length == 0) {

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -77,11 +77,12 @@ public class ActionNames {
     public static final String SAVE_GRAPHICS    = "save_graphics"; // $NON-NLS-1$
     public static final String SAVE_GRAPHICS_ALL= "save_graphics_all"; // $NON-NLS-1$
     public static final String SSL_MANAGER      = "sslManager"; // $NON-NLS-1$
+    public static final String STOP_THREAD      = "stop_thread"; // $NON-NLS-1$
     public static final String SUB_TREE_LOADED  = "sub_tree_loaded"; // $NON-NLS-1$
     public static final String SUB_TREE_MERGED  = "sub_tree_merged"; // $NON-NLS-1$
     public static final String SUB_TREE_SAVED   = "sub_tree_saved"; // $NON-NLS-1$
+    public static final String TOGGLE           = "toggle"; // $NON-NLS-1$ enable/disable
     public static final String WHAT_CLASS       = "what_class"; // $NON-NLS-1$
-    public static final String STOP_THREAD       = "stop_thread"; // $NON-NLS-1$
 
     // Prevent instantiation
     private ActionNames(){

File: src/core/org/apache/jmeter/gui/action/KeyStrokes.java
Patch:
@@ -52,6 +52,7 @@ private KeyStrokes(){
     public static final KeyStroke REMOTE_START_ALL  = KeyStroke.getKeyStroke(KeyEvent.VK_R, CONTROL_MASK | KeyEvent.SHIFT_DOWN_MASK);
     public static final KeyStroke SAVE              = KeyStroke.getKeyStroke(KeyEvent.VK_S, CONTROL_MASK);
     public static final KeyStroke SAVE_ALL_AS       = KeyStroke.getKeyStroke(KeyEvent.VK_S, CONTROL_MASK | KeyEvent.SHIFT_DOWN_MASK);
+    public static final KeyStroke TOGGLE            = KeyStroke.getKeyStroke(KeyEvent.VK_T, CONTROL_MASK);
     public static final KeyStroke PASTE             = KeyStroke.getKeyStroke(KeyEvent.VK_V, CONTROL_MASK);
     public static final KeyStroke WHAT_CLASS        = KeyStroke.getKeyStroke(KeyEvent.VK_W, CONTROL_MASK);
     public static final KeyStroke CUT               = KeyStroke.getKeyStroke(KeyEvent.VK_X, CONTROL_MASK);

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -227,6 +227,8 @@ public static void addFileMenu(JPopupMenu menu) {
         }
         menu.add(enabled);
         menu.add(disabled);
+        JMenuItem toggle = makeMenuItemRes("toggle", ActionNames.TOGGLE, KeyStrokes.TOGGLE);// $NON-NLS-1$
+        menu.add(toggle);
         addSeparator(menu);
         menu.add(makeMenuItemRes("help", ActionNames.HELP));// $NON-NLS-1$
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -592,7 +592,7 @@ private void setConnectionHeaders(HttpMethod method, URL u, HeaderManager header
                     if (! HEADER_CONTENT_LENGTH.equalsIgnoreCase(n)){
                         String v = header.getValue();
                         if (HEADER_HOST.equalsIgnoreCase(n)) {
-                            v = removePortInHostHeader(v, u.getPort());
+                            v = v.replaceFirst(":\\d+$",""); // remove any port specification // $NON-NLS-1$ $NON-NLS-2$
                             method.getParams().setVirtualHost(v);
                         } else {
                             method.addRequestHeader(n, v);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -639,7 +639,7 @@ private void setConnectionHeaders(HttpRequestBase request, URL url, HeaderManage
                         String v = header.getValue();
                         if (HEADER_HOST.equalsIgnoreCase(n)) {
                             int port = url.getPort();
-                            v = removePortInHostHeader(v, port);
+                            v = v.replaceFirst(":\\d+$",""); // remove any port specification // $NON-NLS-1$ $NON-NLS-2$
                             if (port != -1) {
                                 if (port == url.getDefaultPort()) {
                                     port = -1; // no need to specify the port if it is the default

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
Patch:
@@ -592,6 +592,7 @@ private void setConnectionHeaders(HttpMethod method, URL u, HeaderManager header
                     if (! HEADER_CONTENT_LENGTH.equalsIgnoreCase(n)){
                         String v = header.getValue();
                         if (HEADER_HOST.equalsIgnoreCase(n)) {
+                            v = removePortInHostHeader(v, u.getPort());
                             method.getParams().setVirtualHost(v);
                         } else {
                             method.addRequestHeader(n, v);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -638,8 +638,8 @@ private void setConnectionHeaders(HttpRequestBase request, URL url, HeaderManage
                     if (! HEADER_CONTENT_LENGTH.equalsIgnoreCase(n)){
                         String v = header.getValue();
                         if (HEADER_HOST.equalsIgnoreCase(n)) {
-                            // TODO is it a bug that HC 4.x does not add the correct port to the generated Host header?
                             int port = url.getPort();
+                            v = removePortInHostHeader(v, port);
                             if (port != -1) {
                                 if (port == url.getDefaultPort()) {
                                     port = -1; // no need to specify the port if it is the default

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -81,6 +81,7 @@ public class ActionNames {
     public static final String SUB_TREE_MERGED  = "sub_tree_merged"; // $NON-NLS-1$
     public static final String SUB_TREE_SAVED   = "sub_tree_saved"; // $NON-NLS-1$
     public static final String WHAT_CLASS       = "what_class"; // $NON-NLS-1$
+    public static final String STOP_THREAD       = "stop_thread"; // $NON-NLS-1$
 
     // Prevent instantiation
     private ActionNames(){

File: src/core/org/apache/jmeter/gui/action/Close.java
Patch:
@@ -87,7 +87,7 @@ static boolean performAction(ActionEvent e){
                 return false; // Don't clear the plan
             }
         }
-
+        ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.STOP_THREAD));
         closeProject(e);
         return true;
     }

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -91,6 +91,8 @@ public void doAction(ActionEvent e) {
     }
 
     static void loadProjectFile(ActionEvent e, File f, boolean merging) {
+        ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.STOP_THREAD));
+
         GuiPackage guiPackage = GuiPackage.getInstance();
         InputStream reader = null;
         try {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
Patch:
@@ -22,6 +22,7 @@
 import java.net.ServerSocket;
 import java.net.Socket;
 
+import org.apache.jmeter.gui.Stoppable;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
@@ -32,7 +33,7 @@
  * For each client request, creates a thread to handle the request.
  *
  */
-public class HttpMirrorServer extends Thread {
+public class HttpMirrorServer extends Thread implements Stoppable {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.jmeter.gui.Stoppable;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
@@ -36,7 +37,7 @@
  * request.
  *
  */
-public class Daemon extends Thread {
+public class Daemon extends Thread implements Stoppable {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -340,6 +340,7 @@ public void startProxy() throws IOException {
         try {
             server = new Daemon(getPort(), this);
             server.start();
+            GuiPackage.getInstance().register(server);
         } catch (IOException e) {
             log.error("Could not create Proxy daemon", e);
             throw e;
@@ -420,6 +421,7 @@ public synchronized void deliverSampler(HTTPSamplerBase sampler, TestElement[] s
     public void stopProxy() {
         if (server != null) {
             server.stopServer();
+            GuiPackage.getInstance().unregister(server);
             try {
                 server.join(1000); // wait for server to stop
             } catch (InterruptedException e) {

File: src/core/org/apache/jmeter/control/GenericController.java
Patch:
@@ -226,8 +226,9 @@ protected void reInitializeSubController() {
                 if (currentElement instanceof Sampler) {
                     nextIsASampler((Sampler) currentElement);
                 } else { // must be a controller
-                    nextIsAController((Controller) currentElement);
-                    reInitializeSubController();
+                    if (nextIsAController((Controller) currentElement) != null) {
+                        reInitializeSubController();
+                    }
                 }
             }
         } catch (NextIsNullException e) {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CacheManager.java
Patch:
@@ -57,7 +57,7 @@ public class CacheManager extends ConfigTestElement implements TestListener, Ser
     public static final String USE_EXPIRES = "useExpires"; // $NON-NLS-1$
     //-
 
-    private transient ThreadLocal<Map<String, CacheEntry>> threadCache;
+    private transient InheritableThreadLocal<Map<String, CacheEntry>> threadCache;
 
     private transient boolean useExpires; // Cached value
 
@@ -325,7 +325,7 @@ public void clear(){
 
     private void clearCache() {
         log.debug("Clear cache");
-        threadCache = new ThreadLocal<Map<String, CacheEntry>>(){
+        threadCache = new InheritableThreadLocal<Map<String, CacheEntry>>(){
             @Override
             protected Map<String, CacheEntry> initialValue(){
                 return new HashMap<String, CacheEntry>();

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -49,6 +49,7 @@ public abstract class HTMLParser {
     protected static final String TAG_BGSOUND       = "bgsound";// $NON-NLS-1$
     protected static final String TAG_EMBED         = "embed";// $NON-NLS-1$
     protected static final String TAG_FRAME         = "frame";// $NON-NLS-1$
+    protected static final String TAG_IFRAME        = "iframe";// $NON-NLS-1$
     protected static final String TAG_IMAGE         = "img";// $NON-NLS-1$
     protected static final String TAG_INPUT         = "input";// $NON-NLS-1$
     protected static final String TAG_LINK          = "link";// $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParserHTMLParser.java
Patch:
@@ -161,7 +161,8 @@ private void parseNodes(final NodeIterator e,
                 }
             } else if (tag instanceof ScriptTag) {
                 binUrlStr = tag.getAttribute(ATT_SRC);
-            } else if (tag instanceof FrameTag) {
+                // Bug 51750
+            } else if (tag instanceof FrameTag || tagname.equalsIgnoreCase(TAG_IFRAME)) {
                 binUrlStr = tag.getAttribute(ATT_SRC);
             } else if (tagname.equalsIgnoreCase(TAG_EMBED)
                 || tagname.equalsIgnoreCase(TAG_BGSOUND)){

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
Patch:
@@ -86,7 +86,7 @@ public void run() {
                     if (running) {
                         // Pass request to new thread
                         HttpMirrorThread thd = new HttpMirrorThread(clientSocket);
-                        log.info("Starting new Mirror thread");
+                        log.debug("Starting new Mirror thread");
                         thd.start();
                     } else {
                         log.warn("Server not running");
@@ -119,6 +119,8 @@ public static void main(String args[]){
         if (args.length > 0){
             port = Integer.parseInt(args[0]);
         }
+        LoggingManager.setPriority("INFO"); // default level
+        LoggingManager.setLoggingLevels(System.getProperties() ); // allow override by system properties
         HttpMirrorServer serv = new HttpMirrorServer(port);
         serv.start();
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
Patch:
@@ -55,7 +55,7 @@ public HttpMirrorThread(Socket _clientSocket) {
      */
     @Override
     public void run() {
-        log.info("Starting thread");
+        log.debug("Starting thread");
         BufferedInputStream in = null;
         BufferedOutputStream out = null;
 
@@ -163,7 +163,7 @@ else if (isChunked) {
             JOrphanUtils.closeQuietly(in);
             JOrphanUtils.closeQuietly(clientSocket);
         }
-        log.info("End of Thread");
+        log.debug("End of Thread");
     }
 
     private static String getRequestHeaderValue(String requestHeaders, String headerName) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -398,7 +398,7 @@ public boolean equals (Object obj){
             if (this == obj) {
                 return true;
             }
-            if (obj instanceof HttpClientKey) {
+            if (!(obj instanceof HttpClientKey)) {
                 return false;
             }
             HttpClientKey other = (HttpClientKey) obj;

File: test/src/org/apache/jmeter/junit/JMeterTestCase.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.jmeter.junit;
 
 import java.io.File;
-import java.io.OutputStreamWriter;
+import java.nio.charset.Charset;
 import java.util.Collection;
 import java.util.LinkedList;
 import java.util.Locale;
@@ -85,7 +85,7 @@ public JMeterTestCase(String name) {
             logprop("java.home");
             logprop("file.encoding");
             // Display actual encoding used (will differ if file.encoding is not recognised)
-            System.out.println("default encoding="+new OutputStreamWriter( System.out ).getEncoding());
+            System.out.println("default encoding="+Charset.defaultCharset());
             logprop("user.home");
             logprop("user.dir");
             logprop("user.language");

File: test/src/org/apache/jorphan/test/AllTests.java
Patch:
@@ -22,8 +22,8 @@
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
-import java.io.OutputStreamWriter;
 import java.lang.reflect.Method;
+import java.nio.charset.Charset;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
@@ -146,7 +146,7 @@ public static void main(String[] args) {
         logprop("java.home", true);
         logprop("file.encoding", true);
         // Display actual encoding used (will differ if file.encoding is not recognised)
-        String msg = "default encoding="+new OutputStreamWriter( System.out ).getEncoding();
+        String msg = "default encoding="+Charset.defaultCharset();
         System.out.println(msg);
         log.info(msg);
         logprop("user.home");

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerFactory.java
Patch:
@@ -77,7 +77,7 @@ public static HTTPSamplerBase newInstance(String alias) {
             return new HTTPSamplerProxy(IMPL_HTTP_CLIENT3_1);
         }
         if (alias.equals(IMPL_HTTP_CLIENT4)) {
-            return new HTTPSamplerProxy(IMPL_HTTP_CLIENT3_1);
+            return new HTTPSamplerProxy(IMPL_HTTP_CLIENT4);
         }
         throw new IllegalArgumentException("Unknown sampler type: '" + alias+"'");
     }

File: src/components/org/apache/jmeter/assertions/gui/AssertionGui.java
Patch:
@@ -211,7 +211,7 @@ public void configure(TestElement el) {
         super.configure(el);
         ResponseAssertion model = (ResponseAssertion) el;
 
-        showScopeSettings(model);
+        showScopeSettings(model, true);
 
         if (model.isContainsType()) {
             containsBox.setSelected(true);

File: src/components/org/apache/jmeter/assertions/gui/SizeAssertionGui.java
Patch:
@@ -131,7 +131,7 @@ public void configure(TestElement el) {
         SizeAssertion assertion = (SizeAssertion) el;
         size.setText(assertion.getAllowedSize());
         setState(assertion.getCompOper());
-        showScopeSettings(assertion);
+        showScopeSettings(assertion, true);
         
         if (assertion.isTestFieldResponseHeaders()) {
         responseHeadersButton.setSelected(true);

File: src/components/org/apache/jmeter/extractor/gui/RegexExtractorGui.java
Patch:
@@ -81,7 +81,7 @@ public void configure(TestElement el) {
         super.configure(el);
         if (el instanceof RegexExtractor){
             RegexExtractor re = (RegexExtractor) el;
-            showScopeSettings(re);
+            showScopeSettings(re, true);
             useHeaders.setSelected(re.useHeaders());
             useBody.setSelected(re.useBody());
             useUnescapedBody.setSelected(re.useUnescapedBody());

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -252,7 +252,7 @@ public void clearGui() {
 
         tableModel.clearData();
         clearEachIteration.setSelected(false);
-        policy.setSelectedIndex(policies.length - 1);
+        policy.setText(CookieManager.DEFAULT_POLICY);
         deleteButton.setEnabled(false);
         saveButton.setEnabled(false);
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
Patch:
@@ -284,7 +284,9 @@ protected byte[] readResponse(HttpURLConnection conn, SampleResult res) throws I
             in = new BufferedInputStream(conn.getErrorStream());
         }
         byte[] responseData = readResponse(res, in, contentLength);
-        res.setBodySize(((CountingInputStream) instream).getCount());
+        if (instream != null) {
+            res.setBodySize(((CountingInputStream) instream).getCount());
+        }
         return responseData;
     }
 

File: test/src/org/apache/jmeter/assertions/SizeAssertionTest.java
Patch:
@@ -39,6 +39,7 @@ public void setUp() {
           jmctx = JMeterContextService.getContext();
           assertion = new SizeAssertion();
           assertion.setThreadContext(jmctx);
+          assertion.setTestFieldResponseBody();
           vars = new JMeterVariables();
           jmctx.setVariables(vars);
           sample0 = new SampleResult();

File: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
Patch:
@@ -277,7 +277,7 @@ public SampleResult sample(Entry e) {
         } catch (MessagingException ex) {
             log.debug("", ex);// No need to log normally, as we set the status
             parent.setResponseCode("500"); // $NON-NLS-1$
-            parent.setResponseMessage(ex.toString());
+            parent.setResponseMessage(ex.toString() + "\n" + samplerString); // $NON-NLS-1$
         } catch (IOException ex) {
             log.debug("", ex);// No need to log normally, as we set the status
             parent.setResponseCode("500"); // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java
Patch:
@@ -437,7 +437,6 @@ private void parseHeaders(HTTPSampleResult res)
         StringBuilder sb = new StringBuilder();
         sb.append(HTTP_1_1 ).append(status).append(" ").append(msg).append(NEWLINE);//$NON-NLS-1$//$NON-NLS-2$
         for(int i=0; i < nh; i++) {
-            // Currently, no Tomcat version sends translated headers
             String name;
             int thn = peekInt();
             if((thn & 0xff00) == AJP_HEADER_BASE) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java
Patch:
@@ -442,6 +442,7 @@ private void parseHeaders(HTTPSampleResult res)
             int thn = peekInt();
             if((thn & 0xff00) == AJP_HEADER_BASE) {
                 name = headerTransArray[(thn&0xff)-1];
+                getInt(); // we need to use up the int now
             } else {
                 name = getString();
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1638,11 +1638,11 @@ public String getIpSource() {
      * @return true if used
      */
     public boolean isConcurrentDwn() {
-        return getPropertyAsBoolean(CONCURRENT_DWN);
+        return getPropertyAsBoolean(CONCURRENT_DWN, false);
     }
 
     public void setConcurrentDwn(boolean concurrentDwn) {
-        setProperty(new BooleanProperty(CONCURRENT_DWN, concurrentDwn));
+        setProperty(CONCURRENT_DWN, concurrentDwn, false);
     }
     /**
      * Get the pool size for concurrent thread pool to get embedded resources.

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -739,11 +739,11 @@ public CacheManager getCacheManager() {
     }
 
     public boolean isImageParser() {
-        return getPropertyAsBoolean(IMAGE_PARSER);
+        return getPropertyAsBoolean(IMAGE_PARSER, false);
     }
 
     public void setImageParser(boolean parseImages) {
-        setProperty(new BooleanProperty(IMAGE_PARSER, parseImages));
+        setProperty(IMAGE_PARSER, parseImages, false);
     }
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1127,7 +1127,7 @@ protected HTTPSampleResult downloadPageResources(HTTPSampleResult res, HTTPSampl
             }
             
             // For concurrent get resources
-            final ArrayList<ASyncSample> liste = new ArrayList<ASyncSample>();
+            final List<Callable<HTTPSampleResult>> liste = new ArrayList<Callable<HTTPSampleResult>>();
             
             while (urls.hasNext()) {
                 Object binURL = urls.next(); // See catch clause below

File: src/core/org/apache/jmeter/control/RunTime.java
Patch:
@@ -30,7 +30,7 @@ public class RunTime extends GenericController implements Serializable {
 
     private final static String SECONDS = "RunTime.seconds"; //$NON-NLS-1$
 
-    private volatile long startTime = 0;
+    private long startTime = 0;
 
     private int loopCount = 0; // for getIterCount
 

File: src/core/org/apache/jmeter/engine/JMeterEngine.java
Patch:
@@ -34,4 +34,6 @@ public interface JMeterEngine {
     void setProperties(Properties p);
 
     void exit();
+    
+    boolean isActive();
 }

File: src/core/org/apache/jmeter/NewDriver.java
Patch:
@@ -25,6 +25,7 @@
 import java.lang.reflect.Method;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.StringTokenizer;
@@ -96,6 +97,7 @@ public boolean accept(File dir, String name) {// only accept jar files
                 new Throwable("Could not access " + libDirs[a]).printStackTrace();
                 continue;
             }
+            Arrays.sort(libJars); // Bug 50708 Ensure predictable order of jars
             for (int i = 0; i < libJars.length; i++) {
                 try {
                     String s = libJars[i].getPath();

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -391,6 +391,7 @@ public void updateCurrentNode() {
                 JMeterGUIComponent comp = getGui(currentNode.getTestElement());
                 TestElement el = currentNode.getTestElement();
                 comp.modifyTestElement(el);
+                currentNode.nameChanged(); // Bug 50221 - ensure label is updated
             }
             // The current node is now updated
             currentNodeUpdated = true;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -681,10 +681,9 @@ public AuthManager getAuthManager() {
     public void setHeaderManager(HeaderManager value) {
         HeaderManager mgr = getHeaderManager();
         if (mgr != null) {
-            log.debug("Existing HeaderManager '" + mgr.getName() + "' merged with '" + value.getName() + "'");
             value = mgr.merge(value, true);
             if (log.isDebugEnabled()) {
-                log.debug("HeaderManager merged: " + value.getName());
+                log.debug("Existing HeaderManager '" + mgr.getName() + "' merged with '" + value.getName() + "'");
                 for (int i=0; i < value.getHeaders().size(); i++) {
                     log.debug("    " + value.getHeader(i).getName() + "=" + value.getHeader(i).getValue());
                 }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -681,7 +681,7 @@ public AuthManager getAuthManager() {
     public void setHeaderManager(HeaderManager value) {
         HeaderManager mgr = getHeaderManager();
         if (mgr != null) {
-            log.warn("Existing HeaderManager '" + mgr.getName() + "' merged with '" + value.getName() + "'");
+            log.debug("Existing HeaderManager '" + mgr.getName() + "' merged with '" + value.getName() + "'");
             value = mgr.merge(value, true);
             if (log.isDebugEnabled()) {
                 log.debug("HeaderManager merged: " + value.getName());

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
Patch:
@@ -62,6 +62,7 @@
 import org.apache.http.entity.FileEntity;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.entity.mime.FormBodyPart;
+import org.apache.http.entity.mime.HttpMultipartMode;
 import org.apache.http.entity.mime.MultipartEntity;
 import org.apache.http.entity.mime.content.FileBody;
 import org.apache.http.entity.mime.content.StringBody;
@@ -665,7 +666,8 @@ private String sendPostData(HttpPost post)  throws IOException {
             }
 
             // Write the request to our own stream
-            MultipartEntity multiPart = new MultipartEntity();
+            MultipartEntity multiPart = new MultipartEntity(
+                    getDoBrowserCompatibleMultipart() ? HttpMultipartMode.BROWSER_COMPATIBLE : HttpMultipartMode.STRICT);
             // Create the parts
             // Add any parameters
             PropertyIterator args = getArguments().iterator();

File: src/core/org/apache/jmeter/engine/RemoteJMeterEngine.java
Patch:
@@ -18,14 +18,15 @@
 
 package org.apache.jmeter.engine;
 
+import java.io.File;
 import java.rmi.Remote;
 import java.rmi.RemoteException;
 import java.util.Properties;
 
 import org.apache.jorphan.collections.HashTree;
 
 public interface RemoteJMeterEngine extends Remote {
-    void configure(HashTree testTree, String host) throws RemoteException;
+    void configure(HashTree testTree, String host, File jmxBase) throws RemoteException;
 
     void runTest() throws RemoteException, JMeterEngineException;
 

File: src/core/org/apache/jmeter/engine/ConvertListeners.java
Patch:
@@ -54,7 +54,7 @@ public void addNode(Object node, HashTree subTree) {
         while (iter.hasNext()) {
             Object item = iter.next();
             if (item instanceof AbstractThreadGroup) {
-                log.info("num threads = " + ((AbstractThreadGroup) item).getNumThreads());
+                log.debug("num threads = " + ((AbstractThreadGroup) item).getNumThreads());
             }
             if (item instanceof Remoteable) {
                 if (item instanceof ThreadListener){

File: src/core/org/apache/jmeter/control/IfController.java
Patch:
@@ -168,8 +168,9 @@ public Sampler next() {
         if (result) {
             return super.next();
         }
+        // If-test is false, need to re-initialize indexes
         try {
-            super.reInitializeSubController(); // Bug 50032 - reinitialize current index element for all sub controller
+            reInitializeSubController(); // Bug 50032 - reinitialize current index element for all sub controller
             return nextIsNull();
         } catch (NextIsNullException e1) {
             return null;

File: src/components/org/apache/jmeter/visualizers/DistributionGraph.java
Patch:
@@ -168,7 +168,7 @@ private void drawSample(SamplingStatCalculator p_model, Graphics g) {
             Number ninety = p_model.getPercentPoint(0.90);
             Number fifty = p_model.getPercentPoint(0.50);
 
-            int total = p_model.getCount();
+            long total = p_model.getCount();
             Collection<Number[]> values = p_model.getDistribution().values();
             Number[][] objval = values.toArray(new Number[][]{});
             // we sort the objects

File: src/core/org/apache/jmeter/visualizers/SamplingStatCalculator.java
Patch:
@@ -127,7 +127,7 @@ public double getKBPerSecond() {
      * @return average page size in bytes (0 if sample count is zero)
      */
     public double getAvgPageBytes() {
-        int count = calculator.getCount();
+        long count = calculator.getCount();
         if (count == 0) {
             return 0;
         }
@@ -170,7 +170,7 @@ public Sample addSample(SampleResult res) {
             rbool = res.isSuccessful();
         }
 
-        int count = calculator.getCount();
+        long count = calculator.getCount();
         Sample s =
             new Sample( null, rtime, cmean, cstdv, cmedian, cpercent, throughput, eCount, rbool, count, endTime );
         currentSample = s;
@@ -252,7 +252,7 @@ public Number getPercentPoint(double percent) {
         return calculator.getPercentPoint(percent);
     }
 
-    public int getCount() {
+    public long getCount() {
         return calculator.getCount();
     }
 

File: src/jorphan/org/apache/jorphan/math/StatCalculator.java
Patch:
@@ -46,7 +46,7 @@ public abstract class StatCalculator<T extends Number & Comparable<? super T>> {
 
     private double deviation = 0;
 
-    private int count = 0;
+    private long count = 0;
 
     private T min;
 
@@ -187,7 +187,7 @@ public T getMax() {
         return max;
     }
 
-    public int getCount() {
+    public long getCount() {
         return count;
     }
 

File: src/functions/org/apache/jmeter/functions/FileToString.java
Patch:
@@ -86,6 +86,9 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
         String encoding = null;//means platform default
         if (values.length >= ENCODING) {
             encoding = ((CompoundVariable) values[ENCODING - 1]).execute().trim();
+            if (encoding.length() <= 0) { // empty encoding, return to platorm default
+                encoding = null;
+            }
         }
 
         String myName = "";//$NON-NLS-1$

File: test/src/org/apache/jmeter/junit/JMeterTest.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.jmeter.junit;
 
+import java.awt.Component;
 import java.awt.HeadlessException;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -35,8 +36,6 @@
 import java.util.Properties;
 import java.util.Set;
 
-import javax.swing.JComponent;
-
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
@@ -486,7 +485,7 @@ private static Test suiteSerializableElements() throws Exception {
      * Test serializable elements - test the object
      */
     public void runSerialTest() throws Exception {
-        if (!(serObj instanceof JComponent)) {
+        if (!(serObj instanceof Component)) {// 
             try {
                 ByteArrayOutputStream bytes = new ByteArrayOutputStream();
                 ObjectOutputStream out = new ObjectOutputStream(bytes);

File: src/core/org/apache/jmeter/control/gui/TestPlanGui.java
Patch:
@@ -87,6 +87,7 @@ public JPopupMenu createPopupMenu() {
         JPopupMenu pop = new JPopupMenu();
         JMenu addMenu = new JMenu(JMeterUtils.getResString("add")); // $NON-NLS-1$
         addMenu.add(MenuFactory.makeMenu(MenuFactory.THREADS, ActionNames.ADD));
+        addMenu.add(MenuFactory.makeMenu(MenuFactory.FRAGMENTS, ActionNames.ADD));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.CONFIG_ELEMENTS, ActionNames.ADD));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.TIMERS, ActionNames.ADD));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.PRE_PROCESSORS, ActionNames.ADD));

File: src/components/org/apache/jmeter/assertions/CompareAssertionBeanInfo.java
Patch:
@@ -37,7 +37,7 @@ public CompareAssertionBeanInfo() {
         p.setValue(NOT_EXPRESSION, Boolean.TRUE);
         p = property("compareTime"); //$NON-NLS-1$
         p.setValue(NOT_UNDEFINED, Boolean.TRUE);
-        p.setValue(DEFAULT, new Long(-1));
+        p.setValue(DEFAULT, Long.valueOf(-1));
         p.setValue(NOT_EXPRESSION, Boolean.FALSE);
         p = property("stringsToSkip"); //$NON-NLS-1$
         p.setPropertyEditorClass(TableEditor.class);

File: src/components/org/apache/jmeter/assertions/DurationAssertion.java
Patch:
@@ -51,7 +51,7 @@ public AssertionResult getResult(SampleResult response) {
         // has the Sample lasted too long?
             if ( responseTime > duration) {
                 result.setFailure(true);
-                Object[] arguments = { new Long(responseTime), new Long(duration) };
+                Object[] arguments = { Long.valueOf(responseTime), Long.valueOf(duration) };
                 String message = MessageFormat.format(
                         JMeterUtils.getResString("duration_assertion_failure") // $NON-NLS-1$
                         , arguments);

File: src/components/org/apache/jmeter/assertions/SizeAssertion.java
Patch:
@@ -80,7 +80,7 @@ public AssertionResult getResult(SampleResult response) {
         final String msg = compareSize(resultSize);
         if (msg.length() > 0) {
             result.setFailure(true);
-            Object[] arguments = { new Long(resultSize), msg, new Long(getAllowedSize()) };
+            Object[] arguments = { Long.valueOf(resultSize), msg, Long.valueOf(getAllowedSize()) };
             String message = MessageFormat.format(JMeterUtils.getResString("size_assertion_failure"), arguments); //$NON-NLS-1$
             result.setFailureMessage(message);
         }

File: src/components/org/apache/jmeter/extractor/RegexExtractor.java
Patch:
@@ -321,7 +321,7 @@ private void initTemplate() {
             if (beginMatch > beginOffset) { // string is not empty
                 combined.add(rawTemplate.substring(beginOffset, beginMatch));
             }
-            combined.add(new Integer(currentResult.group(1)));// add match as Integer
+            combined.add(Integer.valueOf(currentResult.group(1)));// add match as Integer
             beginOffset = currentResult.endOffset(0);
         }
 

File: src/components/org/apache/jmeter/modifiers/CounterConfig.java
Patch:
@@ -60,7 +60,7 @@ private void init() {
         perTheadNumber = new ThreadLocal<Long>() {
             @Override
             protected Long initialValue() {
-                return new Long(getStart());
+                return Long.valueOf(getStart());
             }
         };
     }
@@ -95,7 +95,7 @@ public synchronized void iterationStart(LoopIterationEvent event) {
             if (current > end) {
                 current = start;
             }
-            perTheadNumber.set(new Long(current));
+            perTheadNumber.set(Long.valueOf(current));
         }
     }
 

File: src/components/org/apache/jmeter/timers/SyncTimerBeanInfo.java
Patch:
@@ -31,7 +31,7 @@ public SyncTimerBeanInfo() {
 
         PropertyDescriptor p = property("groupSize");
         p.setValue(NOT_UNDEFINED, Boolean.TRUE);
-        p.setValue(DEFAULT, new Integer(0));
+        p.setValue(DEFAULT, Integer.valueOf(0));
     }
 
 }

File: src/core/org/apache/jmeter/gui/util/PowerTableModel.java
Patch:
@@ -148,15 +148,15 @@ private Object createDefaultValue(int i) {
             }
             try {
                 Constructor<?> constr = colClass.getConstructor(new Class[] { Integer.TYPE });
-                return constr.newInstance(new Object[] { new Integer(0) });
+                return constr.newInstance(new Object[] { Integer.valueOf(0) });
             } catch (NoSuchMethodException err) {
             } catch (InstantiationException err) {
             } catch (IllegalAccessException err) {
             } catch (InvocationTargetException err) {
             }
             try {
                 Constructor<?> constr = colClass.getConstructor(new Class[] { Long.TYPE });
-                return constr.newInstance(new Object[] { new Long(0L) });
+                return constr.newInstance(new Object[] { Long.valueOf(0L) });
             } catch (NoSuchMethodException err) {
             } catch (InstantiationException err) {
             } catch (IllegalAccessException err) {

File: src/core/org/apache/jmeter/testbeans/BeanInfoSupport.java
Patch:
@@ -193,10 +193,10 @@ protected void createPropertyGroup(String group, String[] names) {
             log.debug("Getting property for: " + names[i]);
             PropertyDescriptor p = property(names[i]);
             p.setValue(GenericTestBeanCustomizer.GROUP, group);
-            p.setValue(GenericTestBeanCustomizer.ORDER, new Integer(i));
+            p.setValue(GenericTestBeanCustomizer.ORDER, Integer.valueOf(i));
         }
         numCreatedGroups++;
-        getBeanDescriptor().setValue(GenericTestBeanCustomizer.ORDER(group), new Integer(numCreatedGroups));
+        getBeanDescriptor().setValue(GenericTestBeanCustomizer.ORDER(group), Integer.valueOf(numCreatedGroups));
     }
 
     /** {@inheritDoc} */

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -557,7 +557,7 @@ public int compare(PropertyDescriptor d1, PropertyDescriptor d2) {
         private Integer groupOrder(String group) {
             Integer order = (Integer) beanInfo.getBeanDescriptor().getValue(ORDER(group));
             if (order == null) {
-                order = new Integer(0);
+                order = Integer.valueOf(0);
             }
             return order;
         }
@@ -571,7 +571,7 @@ private Integer groupOrder(String group) {
         private Integer propertyOrder(PropertyDescriptor d) {
             Integer order = (Integer) d.getValue(ORDER);
             if (order == null) {
-                order = new Integer(0);
+                order = Integer.valueOf(0);
             }
             return order;
         }

File: src/core/org/apache/jmeter/testelement/property/IntegerProperty.java
Patch:
@@ -90,7 +90,7 @@ public String getStringValue() {
      * @see JMeterProperty#getObjectValue()
      */
     public Object getObjectValue() {
-        return new Integer(value);
+        return Integer.valueOf(value);
     }
 
     /**

File: src/core/org/apache/jmeter/testelement/property/LongProperty.java
Patch:
@@ -86,7 +86,7 @@ public String getStringValue() {
      * @see JMeterProperty#getObjectValue()
      */
     public Object getObjectValue() {
-        return new Long(value);
+        return Long.valueOf(value);
     }
 
     /**

File: src/core/org/apache/jmeter/util/BeanShellServer.java
Patch:
@@ -75,7 +75,7 @@ public void run() {
             Method source = Interpreter.getMethod("source", new Class[] { string });//$NON-NLS-1$
 
             setObj.invoke(instance, new Object[] { "t", this });//$NON-NLS-1$
-            setInt.invoke(instance, new Object[] { "portnum", new Integer(serverport) });//$NON-NLS-1$
+            setInt.invoke(instance, new Object[] { "portnum", Integer.valueOf(serverport) });//$NON-NLS-1$
 
             if (serverfile.length() > 0) {
                 try {

File: src/core/org/apache/jmeter/util/Calculator.java
Patch:
@@ -121,7 +121,7 @@ public double getMean() {
     }
 
     public Number getMeanAsNumber() {
-        return new Long((long) mean);
+        return Long.valueOf((long) mean);
     }
 
     public double getStandardDeviation() {

File: src/core/org/apache/jmeter/visualizers/SamplingStatCalculator.java
Patch:
@@ -265,7 +265,7 @@ public double getMean() {
     }
 
     public Number getMeanAsNumber() {
-        return new Long((long) calculator.getMean());
+        return Long.valueOf((long) calculator.getMean());
     }
 
     public Number getMedian() {
@@ -274,7 +274,7 @@ public Number getMedian() {
 
     public Number getMin() {
         if (calculator.getMin().longValue() < 0) {
-            return new Long(0);
+            return Long.valueOf(0);
         }
         return calculator.getMin();
     }

File: src/functions/org/apache/jmeter/functions/IterationCounter.java
Patch:
@@ -47,7 +47,7 @@ private void init(){
        perThreadInt = new ThreadLocal<Integer>(){
             @Override
             protected Integer initialValue() {
-                return new Integer(0);
+                return Integer.valueOf(0);
             }
         };
     }
@@ -66,7 +66,7 @@ public IterationCounter() {
     public synchronized String execute(SampleResult previousResult, Sampler currentSampler)
             throws InvalidVariableException {
 
-        new Integer(1);
+        Integer.valueOf(1);
         globalCounter++;
 
         JMeterVariables vars = getVariables();
@@ -83,7 +83,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
         if (perThread) {
             int threadCounter;
             threadCounter = perThreadInt.get().intValue() + 1;
-            perThreadInt.set(new Integer(threadCounter));
+            perThreadInt.set(Integer.valueOf(threadCounter));
             counterString = String.valueOf(threadCounter);
         } else {
             counterString = String.valueOf(globalCounter);

File: src/functions/org/apache/jmeter/functions/RegexFunction.java
Patch:
@@ -261,18 +261,18 @@ private Object[] generateTemplate(String rawTemplate) {
             boolean matchExists = matcher.contains(input, templatePattern);
             if (startsWith) {
                 if (matchExists) {
-                    combined.add(new Integer(matcher.getMatch().group(1)));
+                    combined.add(Integer.valueOf(matcher.getMatch().group(1)));
                 }
                 combined.add(iter.next());
             } else {
                 combined.add(iter.next());
                 if (matchExists) {
-                    combined.add(new Integer(matcher.getMatch().group(1)));
+                    combined.add(Integer.valueOf(matcher.getMatch().group(1)));
                 }
             }
         }
         if (matcher.contains(input, templatePattern)) {
-            combined.add(new Integer(matcher.getMatch().group(1)));
+            combined.add(Integer.valueOf(matcher.getMatch().group(1)));
         }
         return combined.toArray();
     }

File: src/jorphan/org/apache/commons/cli/avalon/CLArgsParser.java
Patch:
@@ -128,7 +128,7 @@ public final Vector<CLOption> getArguments() {
      * @see CLOption
      */
     public final CLOption getArgumentById(final int id) {
-        return m_optionIndex.get(new Integer(id));
+        return m_optionIndex.get(Integer.valueOf(id));
     }
 
     /**
@@ -672,7 +672,7 @@ private final void buildOptionIndex() {
             final CLOption option = m_options.get(i);
             final CLOptionDescriptor optionDescriptor = getDescriptorFor(option.getDescriptor().getId());
 
-            m_optionIndex.put(new Integer(option.getDescriptor().getId()), option);
+            m_optionIndex.put(Integer.valueOf(option.getDescriptor().getId()), option);
 
             if (null != optionDescriptor && null != optionDescriptor.getName()) {
                 m_optionIndex.put(optionDescriptor.getName(), option);

File: src/jorphan/org/apache/jorphan/util/Converter.java
Patch:
@@ -49,11 +49,11 @@ public static Object convert(Object value, Class<?> toType) {
         } else if (toType.equals(String.class)) {
             return getString(value);
         } else if (toType.equals(int.class) || toType.equals(Integer.class)) {
-            return new Integer(getInt(value));
+            return Integer.valueOf(getInt(value));
         } else if (toType.equals(char.class) || toType.equals(Character.class)) {
             return new Character(getChar(value));
         } else if (toType.equals(long.class) || toType.equals(Long.class)) {
-            return new Long(getLong(value));
+            return Long.valueOf(getLong(value));
         } else if (toType.equals(boolean.class) || toType.equals(Boolean.class)) {
             return  Boolean.valueOf(getBoolean(value));
         } else if (toType.equals(java.util.Date.class)) {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -198,7 +198,7 @@ public void addFile(String cookieFile) throws IOException {
                         st[_path] = "/"; //$NON-NLS-1$
                     }
                     boolean secure = Boolean.valueOf(st[_secure]).booleanValue();
-                    long expires = new Long(st[_expires]).longValue();
+                    long expires = Long.valueOf(st[_expires]).longValue();
                     if (expires==Long.MAX_VALUE) {
                         expires=0;
                     }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java
Patch:
@@ -223,7 +223,7 @@ public Header get(int i) {
      * Vector removeIndices = new Vector(); for (int i = headers.size() - 1; i >=
      * 0; i--) { Header header = (Header) headers.get(i); if (header == null) {
      * continue; } if (header.getName().equals(newHeader.getName())) {
-     * removeIndices.addElement(new Integer(i)); } }
+     * removeIndices.addElement(Integer.valueOf(i)); } }
      *
      * for (Enumeration e = removeIndices.elements(); e.hasMoreElements(); ) {
      * index = ((Integer) e.nextElement()).intValue(); headers.remove(index); }
@@ -237,7 +237,7 @@ public void removeHeaderNamed(String name) {
                 continue;
             }
             if (header.getName().equalsIgnoreCase(name)) {
-                removeIndices.addElement(new Integer(i));
+                removeIndices.addElement(Integer.valueOf(i));
             }
         }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorThread.java
Patch:
@@ -92,7 +92,7 @@ public void run() {
             final String headerString = headers.toString();
             String contentLengthHeaderValue = getRequestHeaderValue(headerString, "Content-Length"); //$NON-NLS-1$
             if(contentLengthHeaderValue != null) {
-                contentLength = new Integer(contentLengthHeaderValue).intValue();
+                contentLength = Integer.valueOf(contentLengthHeaderValue).intValue();
             }
             String sleepHeaderValue = getRequestHeaderValue(headerString, "X-Sleep"); //$NON-NLS-1$
             if(sleepHeaderValue != null) {

File: test/src/org/apache/jorphan/collections/PackageTest.java
Patch:
@@ -165,7 +165,7 @@ public void testSearch() throws Exception {
             SearchByClass<Integer> searcher = new SearchByClass<Integer>(Integer.class);
             String one = "one";
             String two = "two";
-            Integer o = new Integer(1);
+            Integer o = Integer.valueOf(1);
             tree.add(one, o);
             tree.getTree(one).add(o, two);
             tree.traverse(searcher);

File: src/core/org/apache/jmeter/visualizers/SamplingStatCalculator.java
Patch:
@@ -131,7 +131,7 @@ public double getAvgPageBytes() {
         if (count == 0) {
             return 0;
         }
-        return calculator.getTotalBytes() / count;
+        return calculator.getTotalBytes() / (double) count;
     }
 
     public String getLabel() {

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -93,7 +93,6 @@ public final class MenuFactory {
     // MENU_ADD_xxx - controls which items are in the ADD menu
     // MENU_PARENT_xxx - controls which items are in the Insert Parent menu
     private static final String[] MENU_ADD_CONTROLLER = new String[] {
-        MenuFactory.THREADS,
         MenuFactory.CONTROLLERS,
         MenuFactory.CONFIG_ELEMENTS,
         MenuFactory.TIMERS,

File: src/core/org/apache/jmeter/testelement/property/CollectionProperty.java
Patch:
@@ -182,7 +182,7 @@ public void addItem(Object item) {
      * @see AbstractProperty#getPropertyType()
      */
     @Override
-    protected Class getPropertyType() {
+    protected Class<? extends JMeterProperty> getPropertyType() {
         if (value.size() > 0) {
             return value.iterator().next().getClass();
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java
Patch:
@@ -31,7 +31,7 @@ public class HTTPSampler2 extends HTTPSamplerBase implements Interruptible {
     private final transient HTTPAbstractImpl hc;
     
     public HTTPSampler2(){
-        hc = new HTTPJavaImpl(this);
+        hc = new HTTPHC3Impl(this);
     }
 
     public boolean interrupt() {

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/URLRewritingModifier.java
Patch:
@@ -164,7 +164,7 @@ private void initRegex(String argName) {
 
         parameterRegexp = JMeterUtils.getPatternCache().getPattern(
                 // ;sessionid=value
-                "[;\\?&]" + quotedArg + "=([^\"'>&\\s;\\\\]*)" +  // $NON-NLS-1$
+                "[;\\?&]" + quotedArg + "=([^\"'<>&\\s;\\\\]*)" +  // $NON-NLS-1$
 
                 // name="sessionid" value="value"
                 "|\\s[Nn][Aa][Mm][Ee]\\s*=\\s*[\"']" + quotedArg

File: src/jorphan/org/apache/jorphan/util/HeapDumper.java
Patch:
@@ -48,7 +48,7 @@ private static HeapDumper getInstance(){
     }
 
     // This is the name of the HotSpot Diagnostic platform MBean (Sun Java 1.6)
-    // See: http://java.sun.com/javase/6/docs/jre/api/management/extension/com/sun/management/HotSpotDiagnosticMXBean.html
+    // See: http://download.oracle.com/javase/6/docs/jre/api/management/extension/com/sun/management/HotSpotDiagnosticMXBean.html
     private static final String HOTSPOT_BEAN_NAME =
          "com.sun.management:type=HotSpotDiagnostic";
 
@@ -98,7 +98,7 @@ public static void init() throws Exception {
      * Calls the dumpHeap() method of the HotSpotDiagnostic MXBean, if available.
      * <p>
      * See
-     * <a href="http://java.sun.com/javase/6/docs/jre/api/management/extension/com/sun/management/HotSpotDiagnosticMXBean.html">
+     * <a href="http://download.oracle.com/javase/6/docs/jre/api/management/extension/com/sun/management/HotSpotDiagnosticMXBean.html">
      * HotSpotDiagnosticMXBean
      * </a>
      * @param fileName name of the heap dump file. Must be creatable, i.e. must not exist.

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
Patch:
@@ -116,7 +116,7 @@ public void testIterationStart(LoopIterationEvent event) {
     private void initClient() throws JMSException, NamingException {
         publisher = new Publisher(getUseJNDIPropertiesAsBoolean(), getJNDIInitialContextFactory(), 
                 getProviderUrl(), getConnectionFactory(), getDestination(), isUseAuth(), getUsername(),
-                getPassword());
+                getPassword(), getDestinationSetup());
         ClientPool.addClient(publisher);
         log.debug("PublisherSampler.initClient called");
     }
@@ -153,12 +153,12 @@ public SampleResult sample() {
             for (int idx = 0; idx < loop; idx++) {
                 if (JMSPublisherGui.TEXT_MSG_RSC.equals(type)){
                     String tmsg = getMessageContent();
-                    Message msg = publisher.publish(tmsg);
+                    Message msg = publisher.publish(tmsg, getDestination());
                     buffer.append(tmsg);
                     Utils.messageProperties(propBuffer, msg);
                 } else if (JMSPublisherGui.MAP_MSG_RSC.equals(type)){
                     Map<String, Object> m = getMapContent();
-                    Message msg = publisher.publish(m);
+                    Message msg = publisher.publish(m, getDestination());
                     Utils.messageProperties(propBuffer, msg);
                 } else if (JMSPublisherGui.OBJECT_MSG_RSC.equals(type)){
                     throw new JMSException(type+ " is not yet supported");

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -317,7 +317,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
             throw new JMeterError("Delimiter '"+ch+"' must not be alphanumeric or "+CSVSaveService.QUOTING_CHAR+".");
         }
 
-        if (!CharUtils.isAsciiPrintable(ch)){
+        if (ch != '\t' && !CharUtils.isAsciiPrintable(ch)){
             throw new JMeterError("Delimiter (code "+(int)ch+") must be printable.");
         }
 

File: test/src/org/apache/jmeter/services/TestFileServer.java
Patch:
@@ -84,7 +84,7 @@ public void testopen() throws Exception {
             fail("Expected IOException");
         } catch (IOException ignored){
         }
-        infile=findTestPath("/testfiles/test.csv");
+        infile=findTestPath("testfiles/test.csv");
         FS.reserveFile(infile); // Does not open file
         assertFalse("Should not have any files open",FS.filesOpen());
         assertEquals("a1,b1,c1,d1",FS.readLine(infile));

File: src/core/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -188,7 +188,7 @@ private Sampler next2() {
                 if (pack == null) {
                     log.warn("Could not fetch SamplePackage");
                 } else {
-                    SampleEvent event = new SampleEvent(res, threadContext.getThreadGroup().getName(),threadVars);
+                    SampleEvent event = new SampleEvent(res, threadContext.getThreadGroup().getName(),threadVars, true);
                     // We must set res to null now, before sending the event for the transaction,
                     // so that we can ignore that event in our sampleOccured method
                     res = null;
@@ -207,8 +207,8 @@ private Sampler next2() {
     public void sampleOccurred(SampleEvent se) {
         if (!isParent()) {
             // Check if we are still sampling our children
-            if(res != null) {
-                SampleResult sampleResult = se.getResult();
+            if(res != null && !se.isTransactionSampleEvent()) {
+               	SampleResult sampleResult = se.getResult();
                 res.setThreadName(sampleResult.getThreadName());
                 res.setBytes(res.getBytes() + sampleResult.getBytes());
                 if (!isIncludeTimers()) {// Accumulate waiting time for later

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -240,7 +240,8 @@ private void addDirectParentControllers(List<TestElement> controllers, TestEleme
 
     private static class ObjectPair
     {
-        private TestElement child, parent;
+        private final TestElement child;
+        private final TestElement parent;
 
         public ObjectPair(TestElement one, TestElement two) {
             this.child = one;
@@ -270,6 +271,7 @@ public boolean equals(Object o) {
     }
 
     private void configureWithConfigElements(Sampler sam, List<ConfigTestElement> configs) {
+        sam.clearTestElementChildren();
         Iterator<ConfigTestElement> iter = configs.iterator();
         while (iter.hasNext()) {
             ConfigTestElement config = iter.next();

File: test/src/org/apache/jmeter/assertions/XMLSchemaAssertionTest.java
Patch:
@@ -82,7 +82,7 @@ private byte[] readFile(String name) throws IOException {
 
     public void testAssertionOK() throws Exception {
         result.setResponseData(readFile("testfiles/XMLSchematest.xml"));
-        assertion.setXsdFileName("testfiles/XMLSchema-pass.xsd");
+        assertion.setXsdFileName(findTestPath("testfiles/XMLSchema-pass.xsd"));
         AssertionResult res = assertion.getResult(jmctx.getPreviousResult());
         testLog.debug("isError() " + res.isError() + " isFailure() " + res.isFailure());
         testLog.debug("failure " + res.getFailureMessage());
@@ -159,7 +159,7 @@ public void testXMLTrailingcontent() throws Exception {
         ByteArrayOutputStream baos = readBA("testfiles/XMLSchematest.xml");
         baos.write("extra".getBytes()); // TODO - charset?
         result.setResponseData(baos.toByteArray());
-        assertion.setXsdFileName("testfiles/XMLSchema-pass.xsd");
+        assertion.setXsdFileName(findTestPath("testfiles/XMLSchema-pass.xsd"));
         AssertionResult res = assertion.getResult(jmctx.getPreviousResult());
         testLog.debug("isError() " + res.isError() + " isFailure() " + res.isFailure());
         testLog.debug("failure " + res.getFailureMessage());
@@ -172,7 +172,7 @@ public void testXMLTrailingwhitespace() throws Exception {
         ByteArrayOutputStream baos = readBA("testfiles/XMLSchematest.xml");
         baos.write(" \t\n".getBytes()); // TODO - charset?
         result.setResponseData(baos.toByteArray());
-        assertion.setXsdFileName("testfiles/XMLSchema-pass.xsd");
+        assertion.setXsdFileName(findTestPath("testfiles/XMLSchema-pass.xsd"));
         AssertionResult res = assertion.getResult(jmctx.getPreviousResult());
         testLog.debug("xisError() " + res.isError() + " isFailure() " + res.isFailure());
         testLog.debug("failure " + res.getFailureMessage());

File: test/src/org/apache/jmeter/functions/TestFileRowColContainer.java
Patch:
@@ -32,7 +32,7 @@ public class TestFileRowColContainer extends JMeterTestCase {
 
     public void testNull() throws Exception {
         try {
-            new FileRowColContainer("testfiles/xyzxyz");
+            new FileRowColContainer(findTestPath("testfiles/xyzxyz"));
             fail("Should not find the file");
         } catch (FileNotFoundException e) {
         }

File: test/src/org/apache/jmeter/protocol/http/control/TestAuthManager.java
Patch:
@@ -40,7 +40,7 @@ public void testFile() throws Exception {
             AuthManager am = new AuthManager();
             CollectionProperty ao = am.getAuthObjects();
             assertEquals(0, ao.size());
-            am.addFile("testfiles/TestAuth.txt");
+            am.addFile(findTestPath("testfiles/TestAuth.txt"));
             assertEquals(9, ao.size());
             Authorization at;
             at = am.getAuthForURL(new URL("http://a.b.c/"));

File: test/src/org/apache/jmeter/protocol/http/control/TestCookieManager.java
Patch:
@@ -366,7 +366,7 @@ public void testCookiePolicyIgnore() throws Exception {
 
         public void testLoad() throws Exception{
             assertEquals(0,man.getCookieCount());
-            man.addFile("testfiles/cookies.txt");
+            man.addFile(findTestPath("testfiles/cookies.txt"));
             assertEquals(3,man.getCookieCount());
 
             int num = 0;

File: test/src/org/apache/jmeter/services/TestFileServer.java
Patch:
@@ -58,7 +58,7 @@ public void testopen() throws Exception {
         assertFalse("Should not have any files open",FS.filesOpen());
         FS.closeFile("xxx"); // Unrecognised files are ignored
         assertFalse("Should not have any files open",FS.filesOpen());
-        String infile="testfiles/test.csv";
+        String infile=findTestPath("testfiles/test.csv");
         FS.reserveFile(infile); // Does not open file
         assertFalse("Should not have any files open",FS.filesOpen());
         assertEquals("a1,b1,c1,d1",FS.readLine(infile));
@@ -84,8 +84,7 @@ public void testopen() throws Exception {
             fail("Expected IOException");
         } catch (IOException ignored){
         }
-        String base=FS.getBaseDir();
-        infile=base+"/testfiles/test.csv";
+        infile=findTestPath("/testfiles/test.csv");
         FS.reserveFile(infile); // Does not open file
         assertFalse("Should not have any files open",FS.filesOpen());
         assertEquals("a1,b1,c1,d1",FS.readLine(infile));

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Patch:
@@ -204,8 +204,8 @@ public SampleResult sample(Entry e) {
             } else if (PREPARED_SELECT.equals(_queryType)) {
                 PreparedStatement pstmt = getPreparedStatement(conn);
                 setArguments(pstmt);
-                pstmt.executeQuery();
-                String sb = resultSetsToString(pstmt,true,null);
+                boolean hasResultSet = pstmt.execute();
+                String sb = resultSetsToString(pstmt,hasResultSet,null);
                 res.setResponseData(sb.getBytes(ENCODING));
             } else if (PREPARED_UPDATE.equals(_queryType)) {
                 PreparedStatement pstmt = getPreparedStatement(conn);

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -46,6 +46,7 @@
 import org.apache.jmeter.samplers.SampleSaveConfiguration;
 import org.apache.jmeter.save.CSVSaveService;
 import org.apache.jmeter.save.SaveService;
+import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestListener;
 import org.apache.jmeter.testelement.property.BooleanProperty;
@@ -375,6 +376,7 @@ private static PrintWriter getFileWriter(String filename, SampleSaveConfiguratio
         if (filename == null || filename.length() == 0) {
             return null;
         }
+        filename = FileServer.resolveBaseRelativeName(filename);
         FileEntry fe = files.get(filename);
         PrintWriter writer = null;
         boolean trimmed = true;

File: src/core/org/apache/jmeter/reporters/ResultSaver.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.jmeter.samplers.SampleEvent;
 import org.apache.jmeter.samplers.SampleListener;
 import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.testelement.AbstractTestElement;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jorphan.logging.LoggingManager;
@@ -173,7 +174,7 @@ private void saveSample(SampleResult s, int num) {
      *         text/html;charset=ISO-8859-1
      */
     private String makeFileName(String contentType, boolean skipAutoNumber, boolean skipSuffix) {
-        StrBuilder sb = new StrBuilder(getFilename());
+        StrBuilder sb = new StrBuilder(FileServer.resolveBaseRelativeName(getFilename()));
         if (!skipAutoNumber){
             sb.append(nextNumber());
         }

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -890,7 +890,7 @@ protected final void setStartTime(long start) {
         }
     }
 
-    protected void setEndTime(long end) {
+    public void setEndTime(long end) {
         endTime = end;
         if (!startTimeStamp) {
             timeStamp = endTime;

File: src/components/org/apache/jmeter/timers/SyncTimer.java
Patch:
@@ -74,11 +74,13 @@ public long delay() {
             final int groupSz = getGroupSize();
             final int count = timerCounter[0];
             if (
-                (groupSz == 0 && count >= JMeterContextService.getNumberOfThreads())
+                (groupSz == 0 && count >= // count of threads in the thread group
+                    JMeterContextService.getContext().getThreadGroup().getNumThreads())
                 ||
                 (groupSz > 0 && count >= groupSz)
                 ) {
                 sync.notifyAll();
+                timerCounter[0]=0; // reset counter once we have reached the limit
             } else {
                 try {
                     sync.wait();

File: src/core/org/apache/jmeter/control/IfController.java
Patch:
@@ -169,6 +169,7 @@ public Sampler next() {
             return super.next();
         }
         try {
+            super.reInitializeSubController(); // Bug 50032 - reinitialize current index element for all sub controller
             return nextIsNull();
         } catch (NextIsNullException e1) {
             return null;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -197,7 +197,7 @@ else if(target.getSamplerTypeName() == ProxyControl.SAMPLER_TYPE_HTTP_SAMPLER2)
             if ((request.getMethod().startsWith(HTTPConstants.CONNECT)) && (outStreamClient != null)) {
                 log.debug("Method CONNECT => SSL");
                 // write a OK reponse to browser, to engage SSL exchange
-                outStreamClient.write(("HTTP/1.0 200 OK\r\n\r\n").getBytes()); // $NON-NLS-1$
+                outStreamClient.write(("HTTP/1.0 200 OK\r\n\r\n").getBytes()); // $NON-NLS-1$ // TODO charset?
                 outStreamClient.flush();
                // With ssl request, url is host:port (without https:// or path)
                 String[] param = request.getUrl().split(":");  // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -193,6 +193,7 @@ public String getDataEncodingWithDefault() {
         if (getDataEncodingNoDefault() == null && getContentType().startsWith("text/html")){ // $NON-NLS-1$
             byte[] bytes=getResponseData();
             // get the start of the file
+            // TODO - charset?
             String prefix = new String(bytes,0,Math.min(bytes.length, 1000)).toLowerCase(java.util.Locale.ENGLISH);
             // Extract the content-type if present
             final String METATAG = "<meta http-equiv=\"content-type\" content=\""; // $NON-NLS-1$
@@ -201,7 +202,8 @@ public String getDataEncodingWithDefault() {
                 tagstart += METATAG.length();
                 int tagend = prefix.indexOf("\"", tagstart); // $NON-NLS-1$
                 if (tagend!=-1){
-                    final String ct = new String(bytes,tagstart,tagend-tagstart);
+                    // TODO use fixed charset:
+                    final String ct = new String(bytes,tagstart,tagend-tagstart); // TODO - charset?
                     setEncodingAndType(ct);// Update the dataEncoding
                 }
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/util/LoopbackHTTPSocket.java
Patch:
@@ -66,7 +66,7 @@ public LoopBackInputStream(LoopbackOutputStream _os) {
     private LoopbackHTTPSocket() throws IOException{
         os=new LoopbackOutputStream();
         // Preload the output so that can be read back as HTTP
-        os.write("HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\n".getBytes());
+        os.write("HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\n".getBytes()); // TODO - charset?
     }
 
     public LoopbackHTTPSocket(String host, int port, InetAddress localAddress, int localPort, int timeout) throws IOException {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -165,9 +165,9 @@ public SampleResult sample() {
         result.sampleEnd();
         result.setResponseMessage(read + " samples messages received");
         if (getReadResponseAsBoolean()) {
-            result.setResponseData(buffer.toString().getBytes());
+            result.setResponseData(buffer.toString().getBytes()); // TODO - charset?
         } else {
-            result.setBytes(buffer.toString().getBytes().length);
+            result.setBytes(buffer.toString().getBytes().length); // TODO - charset?
         }
         result.setResponseHeaders(propBuffer.toString());
         if (read == 0) {

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
Patch:
@@ -282,9 +282,10 @@ public SampleResult sample(Entry e) {
             byte[] buf = new byte[1024];
             int read = is.read(buf);
             while (read > 0) {
-                sb.append(new String(buf, 0, read));
+                sb.append(new String(buf, 0, read));  // TODO - charset?
                 read = is.read(buf);
             }
+            // TODO - charset?
             res.setResponseData(sb.toString().getBytes()); // TODO this should really be request data, but there is none
         } catch (IOException ex) {
             log.warn("",ex);

File: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
Patch:
@@ -1131,9 +1131,9 @@ private void checkArraysHaveSameContent(byte[] expected, byte[] actual) throws U
                 for(int i = 0; i < expected.length; i++) {
                     if(expected[i] != actual[i]) {
                         System.out.println(">>>>>>>>>>>>>>>>>>>>");
-                        System.out.println(new String(expected,0,i+1));
+                        System.out.println(new String(expected,0,i+1,"UTF-8"));
                         System.out.println("====================");
-                        System.out.println(new String(actual,0,i+1));
+                        System.out.println(new String(actual,0,i+1,"UTF-8"));
                         System.out.println("<<<<<<<<<<<<<<<<<<<<");
 /*                        
                         // Useful to when debugging

File: src/core/org/apache/jmeter/testbeans/gui/TableEditor.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.Collection;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Locale;
 
 import javax.swing.CellEditor;
 import javax.swing.JButton;
@@ -169,7 +170,7 @@ void initializeModel()
             int count = 0;
             for(String propName : props)
             {
-                propName = propName.substring(0,1).toUpperCase() + propName.substring(1);
+                propName = propName.substring(0,1).toUpperCase(Locale.ENGLISH) + propName.substring(1);
                 writers[count] = createWriter(clazz,propName);
                 readers[count] = createReader(clazz,propName);
                 editors[count] = getArgForWriter(clazz,propName);

File: src/examples/org/apache/jmeter/examples/testbeans/example1/Example1.java
Patch:
@@ -18,6 +18,8 @@
 
 package org.apache.jmeter.examples.testbeans.example1;
 
+import java.util.Locale;
+
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
@@ -39,7 +41,7 @@ public SampleResult sample(Entry e) {
         res.setSamplerData(myStringProperty);
         res.sampleStart();
         // Do something ...
-        res.setResponseData(myStringProperty.toUpperCase(), null);
+        res.setResponseData(myStringProperty.toUpperCase(Locale.ENGLISH), null);
         res.setDataType(SampleResult.TEXT);
         res.sampleEnd();
         res.setSuccessful(true);

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -439,7 +439,7 @@ public static boolean startsWith(byte [] target, byte [] search, int offset){
         return true;
     }
 
-    private static final byte[] XML_PFX = "<?xml ".getBytes(); // $NON-NLS-1$
+    private static final byte[] XML_PFX = {'<','?','x','m','l'};// "<?xml "
 
     /**
      * Detects if some content starts with the standard XML prefix.

File: test/src/org/apache/jmeter/protocol/http/sampler/PostWriterTest.java
Patch:
@@ -820,9 +820,9 @@ private void checkArraysHaveSameContent(byte[] expected, byte[] actual) throws U
             else {
                 for(int i = 0; i < expected.length; i++) {
                     if(expected[i] != actual[i]) {
-                        System.out.println(new String(expected,0,i+1));
+                        System.out.println(new String(expected,0,i+1, UTF_8));
                         System.out.println("--------------------");
-                        System.out.println(new String(actual,0,i+1));
+                        System.out.println(new String(actual,0,i+1, UTF_8));
                         System.out.println("====================");
                         fail("byte at position " + i + " is different, expected is " + expected[i] + ", actual is " + actual[i]);
                     }

File: test/src/org/apache/jmeter/protocol/http/control/TestHTTPMirrorThread.java
Patch:
@@ -355,9 +355,9 @@ private void checkArraysHaveSameContent(byte[] expected, byte[] actual) throws U
                 for(int i = 0; i < expected.length; i++) {
                     if(expected[i] != actual[i]) {
                         System.out.println(">>>>>>>>>>>>>>>>>>>> (expected) : length " + expected.length);
-                        System.out.println(new String(expected,0,i+1));
+                        System.out.println(new String(expected,0,i+1, ISO_8859_1));
                         System.out.println("==================== (actual) : length " + actual.length);
-                        System.out.println(new String(actual,0,i+1));
+                        System.out.println(new String(actual,0,i+1, ISO_8859_1));
                         System.out.println("<<<<<<<<<<<<<<<<<<<<");
 /*
                         // Useful to when debugging

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpSamplerGui.java
Patch:
@@ -74,6 +74,7 @@ public void configure(TestElement element) {
         smtpPanel.setReceiverBCC(element.getPropertyAsString(SmtpSampler.RECEIVER_BCC));
 
         smtpPanel.setBody(element.getPropertyAsString(SmtpSampler.MESSAGE));
+        smtpPanel.setPlainBody(element.getPropertyAsBoolean(SmtpSampler.PLAIN_BODY));
         smtpPanel.setSubject(element.getPropertyAsString(SmtpSampler.SUBJECT));
         smtpPanel.setSuppressSubject(element.getPropertyAsBoolean(SmtpSampler.SUPPRESS_SUBJECT));
         smtpPanel.setIncludeTimestamp(element.getPropertyAsBoolean(SmtpSampler.INCLUDE_TIMESTAMP));
@@ -130,6 +131,7 @@ public void modifyTestElement(TestElement te) {
         te.setProperty(SmtpSampler.SUPPRESS_SUBJECT, Boolean.toString(smtpPanel.isSuppressSubject()));
         te.setProperty(SmtpSampler.INCLUDE_TIMESTAMP, Boolean.toString(smtpPanel.isIncludeTimestamp()));
         te.setProperty(SmtpSampler.MESSAGE, smtpPanel.getBody());
+        te.setProperty(SmtpSampler.PLAIN_BODY, Boolean.toString(smtpPanel.isPlainBody()));
         te.setProperty(SmtpSampler.ATTACH_FILE, smtpPanel.getAttachments());
         
         SecuritySettingsPanel secPanel = smtpPanel.getSecuritySettingsPanel();

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpSamplerGui.java
Patch:
@@ -75,6 +75,7 @@ public void configure(TestElement element) {
 
         smtpPanel.setBody(element.getPropertyAsString(SmtpSampler.MESSAGE));
         smtpPanel.setSubject(element.getPropertyAsString(SmtpSampler.SUBJECT));
+        smtpPanel.setSuppressSubject(element.getPropertyAsBoolean(SmtpSampler.SUPPRESS_SUBJECT));
         smtpPanel.setIncludeTimestamp(element.getPropertyAsBoolean(SmtpSampler.INCLUDE_TIMESTAMP));
         JMeterProperty headers = element.getProperty(SmtpSampler.HEADER_FIELDS);
         if (headers instanceof CollectionProperty) { // Might be NullProperty
@@ -133,6 +134,7 @@ public void modifyTestElement(TestElement te) {
         te.setProperty(SmtpSampler.RECEIVER_CC, smtpPanel.getReceiverCC());
         te.setProperty(SmtpSampler.RECEIVER_BCC, smtpPanel.getReceiverBCC());
         te.setProperty(SmtpSampler.SUBJECT, smtpPanel.getSubject());
+        te.setProperty(SmtpSampler.SUPPRESS_SUBJECT, Boolean.toString(smtpPanel.isSuppressSubject()));
         te.setProperty(SmtpSampler.INCLUDE_TIMESTAMP, Boolean.toString(smtpPanel.isIncludeTimestamp()));
         te.setProperty(SmtpSampler.MESSAGE, smtpPanel.getBody());
         te.setProperty(SmtpSampler.ATTACH_FILE, smtpPanel.getAttachments());

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -539,7 +539,9 @@ private void tellThreadsToStop() {
                 item.stop(); // set stop flag
                 item.interrupt(); // interrupt sampler if possible
                 Thread t = allThreads.get(item);
-                t.interrupt(); // also interrupt JVM thread
+                if (t != null ) { // Bug 49734
+                    t.interrupt(); // also interrupt JVM thread
+                }
             }
         }
     }

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/SmtpSampler.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
@@ -68,6 +69,7 @@ public class SmtpSampler extends AbstractSampler {
     public final static String INCLUDE_TIMESTAMP    = "SMTPSampler.include_timestamp"; // $NON-NLS-1$
     public final static String ATTACH_FILE          = "SMTPSampler.attachFile"; // $NON-NLS-1$
     public final static String MESSAGE_SIZE_STATS   = "SMTPSampler.messageSizeStatistics"; // $NON-NLS-1$
+    public static final String HEADER_FIELDS        = "SMTPSampler.headerFields"; // $NON-NLS-1$
 
     public final static String USE_SSL              = "SMTPSampler.useSSL"; // $NON-NLS-1$
     public final static String USE_STARTTLS         = "SMTPSampler.useStartTLS"; // $NON-NLS-1$
@@ -156,6 +158,7 @@ public SampleResult sample(Entry e) {
             // needed for measuring sending time
             instance.setSynchronousMode(true);
 
+            instance.setHeaderFields((CollectionProperty)getProperty(SmtpSampler.HEADER_FIELDS));
             message = instance.prepareMessage();
 
             if (getPropertyAsBoolean(MESSAGE_SIZE_STATS)) {

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpSamplerGui.java
Patch:
@@ -94,6 +94,7 @@ public void configure(TestElement element) {
         smtpPanel.setPassword(element.getPropertyAsString(SmtpSampler.PASSWORD));
 
         smtpPanel.setMessageSizeStatistic(element.getPropertyAsBoolean(SmtpSampler.MESSAGE_SIZE_STATS));
+        smtpPanel.setEnableDebug(element.getPropertyAsBoolean(SmtpSampler.ENABLE_DEBUG));
 
         super.configure(element);
     }
@@ -143,6 +144,7 @@ public void modifyTestElement(TestElement te) {
         te.setProperty(SmtpSampler.USERNAME, smtpPanel.getUsername());
 
         te.setProperty(SmtpSampler.MESSAGE_SIZE_STATS, Boolean.toString(smtpPanel.isMessageSizeStatistics()));
+        te.setProperty(SmtpSampler.ENABLE_DEBUG, Boolean.toString(smtpPanel.isEnableDebug()));
     }
 
     /**

File: src/protocol/mail/org/apache/jmeter/protocol/smtp/sampler/gui/SmtpPanel.java
Patch:
@@ -594,6 +594,7 @@ public void actionPerformed(ActionEvent evt) {
         gridBagConstraintsMain = new GridBagConstraints();
         gridBagConstraintsMain.fill = GridBagConstraints.HORIZONTAL;
         gridBagConstraintsMain.anchor = GridBagConstraints.WEST;
+        gridBagConstraintsMain.weightx = 0.5;
 
         gridBagConstraints = new GridBagConstraints();
         gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
@@ -1081,7 +1082,7 @@ private void rbSecuritySettingsItemStateChanged(ItemEvent evt) {
             cbUseLocalTrustStore.setEnabled(true);
             tfTrustStoreToUse.setEditable(false);
         } else if (source == rbUseStartTLS) {
-            cbTrustAllCerts.setEnabled(false);
+            cbTrustAllCerts.setEnabled(true);
             cbTrustAllCerts.setSelected(false);
             cbEnforceStartTLS.setEnabled(true);
             cbUseLocalTrustStore.setEnabled(true);

File: src/reports/org/apache/jmeter/report/DataSet.java
Patch:
@@ -103,8 +103,8 @@ public interface DataSet extends Visualizer {
      * a given URL.
      * @param urls
      */
-    @SuppressWarnings("unchecked") // Method is broken anyway
-    public List<SamplingStatCalculator> getStats(List urls);
+    public List<SamplingStatCalculator> getStats(@SuppressWarnings("rawtypes")  // Method is broken anyway
+            List urls);
     /**
      * Classes implementing the method should load the data from
      * the target location. It doesn't necessarily have to be a

File: src/reports/org/apache/jmeter/report/ReportTable.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 
 public interface ReportTable {
-    @SuppressWarnings("unchecked") // TODO fix this when there is a real implementation
-    String[][] getTableData(List data);
+    String[][] getTableData(@SuppressWarnings("rawtypes")
+            // TODO fix this when there is a real implementation
+            List data);
 }

File: src/reports/org/apache/jmeter/testelement/AbstractTable.java
Patch:
@@ -144,7 +144,7 @@ public void addTestElement(TestElement el) {
      * need to filter the data in the list and return statistics.
      * The statistics should be like the aggregate listener.
      */
-    @SuppressWarnings("unchecked") // TODO fix this when there is a real implementation
+    @SuppressWarnings("rawtypes") // TODO fix this when there is a real implementation
     public abstract String[][] getTableData(List data);
 
 }

File: src/reports/org/apache/jmeter/testelement/JTLData.java
Patch:
@@ -81,7 +81,7 @@ public Set<SamplingStatCalculator>  getStats() {
      * @param urls
      * @return array list of non-null entries (may be empty)
      */
-    @SuppressWarnings("unchecked") // Method is broken anyway
+    @SuppressWarnings({ "rawtypes", "unchecked" }) // Method is broken anyway
     public List getStats(List urls) {
         ArrayList items = new ArrayList();
         Iterator itr = urls.iterator();

File: src/reports/org/apache/jmeter/testelement/Table.java
Patch:
@@ -31,7 +31,7 @@ public Table() {
      * for now the method isn't implemented. I still need to decide how
      * it should be implemented.
      */
-    @SuppressWarnings("unchecked") // TODO fix this when there is a real implementation
+    @SuppressWarnings("rawtypes") // TODO fix this when there is a real implementation
     @Override
     public String[][] getTableData(List data) {
         return new String[0][0];

File: src/core/org/apache/jmeter/util/BSFJavaScriptEngine.java
Patch:
@@ -206,7 +206,7 @@ else if (t instanceof StackOverflowError) {
      */
     @Override
     public void initialize(BSFManager mgr, String lang,
-            @SuppressWarnings("unchecked") // superclass does not support types
+            @SuppressWarnings("rawtypes") // superclass does not support types
             Vector declaredBeans)
         throws BSFException {
 

File: src/monitor/components/org/apache/jmeter/monitor/util/MemoryBenchmark.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class MemoryBenchmark {
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     public static void main(String[] args) {
         if (args.length == 1) {
             int objects = 10000;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBaseConverter.java
Patch:
@@ -47,9 +47,8 @@ public HTTPSamplerBaseConverter(Mapper arg0) {
     }
 
     /** {@inheritDoc} */
-    @SuppressWarnings("unchecked") // superclass does not support types
     @Override
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not support types
         return HTTPSamplerBase.class.isAssignableFrom(arg0);
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPResultConverter.java
Patch:
@@ -56,9 +56,8 @@ public HTTPResultConverter(Mapper arg0) {
     }
 
     /** {@inheritDoc} */
-    @SuppressWarnings("unchecked") // superclass does not support types
     @Override
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not support types
         return HTTPSampleResult.class.equals(arg0);
     }
 

File: src/components/org/apache/jmeter/sampler/DebugSampler.java
Patch:
@@ -81,8 +81,8 @@ public SampleResult sample(Entry e) {
         return res;
     }
 
-    @SuppressWarnings("unchecked")
-    private void formatSet(StringBuilder sb, Set s) {
+    private void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s) {
+        @SuppressWarnings("unchecked")
         ArrayList<Map.Entry<Object, Object>> al = new ArrayList<Map.Entry<Object, Object>>(s);
         Collections.sort(al, new Comparator<Map.Entry<Object, Object>>(){
             public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {

File: src/core/org/apache/jmeter/save/ScriptWrapperConverter.java
Patch:
@@ -55,8 +55,7 @@ public ScriptWrapperConverter(Mapper classMapper) {
     /**
      * {@inheritDoc}
      */
-    @SuppressWarnings("unchecked") // superclass is not typed
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass is not typed
         return arg0.equals(ScriptWrapper.class);
     }
 

File: src/core/org/apache/jmeter/save/converters/BooleanPropertyConverter.java
Patch:
@@ -39,8 +39,7 @@ public static String getVersion() {
     }
 
     /** {@inheritDoc} */
-    @SuppressWarnings("unchecked") // superclass does not use types
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) {// superclass does not use types
         return arg0.equals(BooleanProperty.class);
     }
 

File: src/core/org/apache/jmeter/save/converters/HashTreeConverter.java
Patch:
@@ -40,9 +40,8 @@ public static String getVersion() {
     }
 
     /** {@inheritDoc} */
-    @SuppressWarnings("unchecked") // superclass does not use types
     @Override
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return HashTree.class.isAssignableFrom(arg0);
     }
 

File: src/core/org/apache/jmeter/save/converters/IntegerPropertyConverter.java
Patch:
@@ -39,8 +39,7 @@ public static String getVersion() {
     }
 
     /** {@inheritDoc} */
-    @SuppressWarnings("unchecked") // superclass does not use types
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return arg0.equals(IntegerProperty.class);
     }
 

File: src/core/org/apache/jmeter/save/converters/LongPropertyConverter.java
Patch:
@@ -39,8 +39,7 @@ public static String getVersion() {
     }
 
     /** {@inheritDoc} */
-    @SuppressWarnings("unchecked") // superclass does not use types
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return arg0.equals(LongProperty.class);
     }
 

File: src/core/org/apache/jmeter/save/converters/MultiPropertyConverter.java
Patch:
@@ -45,8 +45,7 @@ public static String getVersion() {
 
     /** {@inheritDoc} */
     @Override
-    @SuppressWarnings("unchecked") // superclass does not use types
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return arg0.equals(CollectionProperty.class) || arg0.equals(MapProperty.class);
     }
 

File: src/core/org/apache/jmeter/save/converters/SampleEventConverter.java
Patch:
@@ -39,8 +39,7 @@ public static String getVersion() {
     }
 
     /** {@inheritDoc} */
-    @SuppressWarnings("unchecked") // superclass does not use types
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return SampleEvent.class.equals(arg0);
     }
 

File: src/core/org/apache/jmeter/save/converters/SampleResultConverter.java
Patch:
@@ -103,8 +103,7 @@ public static String getVersion() {
 
     /** {@inheritDoc} */
     @Override
-    @SuppressWarnings("unchecked") // superclass does not use types
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return SampleResult.class.equals(arg0);
     }
 

File: src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java
Patch:
@@ -76,7 +76,7 @@ public MyWrapper(Mapper wrapped) {
         /** {@inheritDoc} */
         @Override
         public boolean shouldSerializeMember(
-                @SuppressWarnings("unchecked") // superclass does not use types
+                @SuppressWarnings("rawtypes") // superclass does not use types
                 Class definedIn, 
                 String fieldName) {
             if (SampleSaveConfiguration.class != definedIn) { return true; }
@@ -109,9 +109,8 @@ public static String getVersion() {
     }
 
     /** {@inheritDoc} */
-    @SuppressWarnings("unchecked") // superclass does not use types
     @Override
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) {
         return arg0.equals(SampleSaveConfiguration.class);
     }
 

File: src/core/org/apache/jmeter/save/converters/StringPropertyConverter.java
Patch:
@@ -39,8 +39,7 @@ public static String getVersion() {
     }
 
     /** {@inheritDoc} */
-    @SuppressWarnings("unchecked") // superclass does not use types
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return StringProperty.class.equals(arg0);
     }
 

File: src/core/org/apache/jmeter/save/converters/TestElementConverter.java
Patch:
@@ -47,8 +47,7 @@ public static String getVersion() {
 
     /** {@inheritDoc} */
     @Override
-    @SuppressWarnings("unchecked") // superclass does not use types
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return TestElement.class.isAssignableFrom(arg0);
     }
 

File: src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java
Patch:
@@ -50,8 +50,7 @@ public static String getVersion() {
 
     /** {@inheritDoc} */
     @Override
-    @SuppressWarnings("unchecked") // superclass does not use types
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return arg0.equals(TestElementProperty.class);
     }
 

File: src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java
Patch:
@@ -58,9 +58,8 @@ public TestResultWrapperConverter(Mapper arg0) {
     }
 
     /** {@inheritDoc} */
-    @SuppressWarnings("unchecked") // superclass does not use types
     @Override
-    public boolean canConvert(Class arg0) {
+    public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0) { // superclass does not use types
         return arg0.equals(TestResultWrapper.class);
     }
 

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -166,7 +166,7 @@ private static boolean validateFormat(String format){
 
     // Internal information only
     private static String fileVersion = ""; // read from properties file// $NON-NLS-1$
-    private static final String FILEVERSION = "958761"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "958773"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -85,9 +85,9 @@ public Class<?> realClass(String alias) {
                 return super.realClass(fullName == null ? alias : fullName);
             }
             // Translate to alias and then delegate to wrapped class
-            @SuppressWarnings("unchecked") // superclass is not typed
             @Override
-            public String serializedClass(Class type) {
+            public String serializedClass(@SuppressWarnings("rawtypes") // superclass does not use types 
+                    Class type) {
                 if (type == null) {
                     return super.serializedClass(null); // was type, but that caused FindBugs warning
                 }
@@ -166,7 +166,7 @@ private static boolean validateFormat(String format){
 
     // Internal information only
     private static String fileVersion = ""; // read from properties file// $NON-NLS-1$
-    private static final String FILEVERSION = "941298"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "958761"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSPublisherGui.java
Patch:
@@ -207,7 +207,7 @@ public void clearGui(){
         msgChoice.setText(""); // $NON-NLS-1$
         configChoice.setText(USE_TEXT_RSC);
         updateConfig(USE_TEXT_RSC);
-        iterations.setText(""); // $NON-NLS-1$
+        iterations.setText("1"); // $NON-NLS-1$
         useAuth.setSelected(false);
     }
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSSubscriberGui.java
Patch:
@@ -201,7 +201,7 @@ public void clearGui(){
         jmsDestination.setText(""); // $NON-NLS-1$
         jmsUser.setText(""); // $NON-NLS-1$
         jmsPwd.setText(""); // $NON-NLS-1$
-        iterations.setText(""); // $NON-NLS-1$
+        iterations.setText("1"); // $NON-NLS-1$
         timeout.setText("");
         useAuth.setSelected(false);
         readResponse.setSelected(true);

File: src/components/org/apache/jmeter/assertions/gui/SMIMEAssertionGui.java
Patch:
@@ -182,6 +182,7 @@ public void stateChanged(ChangeEvent e) {
         return panel;
     }
  
+    @Override
     public void configure(TestElement el) {
         super.configure(el);
         SMIMEAssertionTestElement smimeAssertion = (SMIMEAssertionTestElement) el;

File: src/core/org/apache/jmeter/testelement/TestElement.java
Patch:
@@ -89,6 +89,8 @@ public interface TestElement extends Cloneable {
 
     public long getPropertyAsLong(String key);
 
+    public long getPropertyAsLong(String key, long defaultValue);
+
     public int getPropertyAsInt(String key);
 
     public int getPropertyAsInt(String key, int defaultValue);

File: src/core/org/apache/jmeter/gui/action/ActionRouter.java
Patch:
@@ -237,9 +237,9 @@ protected void preActionPerformed(Class<? extends Command> action, ActionEvent e
         if (action != null) {
             HashSet<ActionListener> listenerSet = preActionListeners.get(action.getName());
             if (listenerSet != null && listenerSet.size() > 0) {
-                Object[] listeners = listenerSet.toArray();
+                ActionListener[] listeners = listenerSet.toArray(new ActionListener[listenerSet.size()]);
                 for (int i = 0; i < listeners.length; i++) {
-                    ((ActionListener) listeners[i]).actionPerformed(e);
+                    listeners[i].actionPerformed(e);
                 }
             }
         }
@@ -249,7 +249,7 @@ protected void postActionPerformed(Class<? extends Command> action, ActionEvent
         if (action != null) {
             HashSet<ActionListener> listenerSet = postActionListeners.get(action.getName());
             if (listenerSet != null && listenerSet.size() > 0) {
-                ActionListener[] listeners = (ActionListener[]) listenerSet.toArray();
+                ActionListener[] listeners = listenerSet.toArray(new ActionListener[listenerSet.size()]);
                 for (int i = 0; i < listeners.length; i++) {
                     listeners[i].actionPerformed(e);
                 }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1306,8 +1306,6 @@ protected HTTPSampleResult resultProcessing(boolean areFollowingRedirect, int fr
             if (frameDepth > MAX_FRAME_DEPTH) {
                 res.addSubResult(errorResult(new Exception("Maximum frame/iframe nesting depth exceeded."), res));
             } else {
-                // If we followed redirects, we already have a container:
-                if(!areFollowingRedirect) {
                 HTTPSampleResult container = (HTTPSampleResult) (areFollowingRedirect ? res.getParent() : res);
 
                 // Only download page resources if we were not redirected.
@@ -1316,7 +1314,6 @@ protected HTTPSampleResult resultProcessing(boolean areFollowingRedirect, int fr
                 if(!wasRedirected) {
                     res = downloadPageResources(res, container, frameDepth);
                 }
-                }
             }
         }
         return res;

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -166,7 +166,7 @@ private static boolean validateFormat(String format){
 
     // Internal information only
     private static String fileVersion = ""; // read from properties file// $NON-NLS-1$
-    private static final String FILEVERSION = "905484"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "941298"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/FixedQueueExecutor.java
Patch:
@@ -67,8 +67,7 @@ public FixedQueueExecutor(QueueSender producer, int timeout, boolean useReqMsgId
     public Message sendAndReceive(Message request) throws JMSException {
         String id = request.getJMSCorrelationID();
         if(id == null && !useReqMsgIdAsCorrelId){
-            log.error("Correlation id is null. Set the JMSCorrelationID header");
-            return null;
+            throw new IllegalArgumentException("Correlation id is null. Set the JMSCorrelationID header.");
         }
 
         final MessageAdmin admin = MessageAdmin.getAdmin();

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -310,7 +310,8 @@ public void threadStarted() {
             sendQueue = queue;
             if (!useTemporyQueue()) {
                 receiveQueue = (Queue) context.lookup(getReceiveQueue());
-                receiverThread = Receiver.createReceiver(factory, receiveQueue, getPrincipal(context), getCredentials(context));
+                receiverThread = Receiver.createReceiver(factory, receiveQueue, getPrincipal(context), getCredentials(context)
+                        , isUseReqMsgIdAsCorrelId());
             }
 
             String principal = null;

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/MessageAdmin.java
Patch:
@@ -81,10 +81,10 @@ public Message get(String id) {
         if (log.isDebugEnabled()) {
             log.debug("GET_ID [" + id + "] for " + holder);
         }
-        if (!holder.hasReply()) {
-            log.info("Message with " + id + " not found.");
+        if (holder == null || !holder.hasReply()) {
+            log.debug("Message with " + id + " not found.");
         }
-        return (Message) holder.getReply();
+        return holder==null ? null : (Message) holder.getReply();
     }
 }
 

File: src/components/org/apache/jmeter/extractor/DebugPostProcessor.java
Patch:
@@ -46,7 +46,7 @@ public void process(){
             sb.append("\n");
          }
          SampleResult sr = new SampleResult();
-         sr.setResponseData(sb.toString().getBytes());
+         sr.setResponseData(sb.toString(), null);
          sr.setDataType(SampleResult.TEXT);
          sr.setSampleLabel(getName());
          sr.setSuccessful(true);

File: src/components/org/apache/jmeter/sampler/DebugSampler.java
Patch:
@@ -73,7 +73,7 @@ public SampleResult sample(Entry e) {
             sb.append("\n");
         }
 
-        res.setResponseData(sb.toString().getBytes());
+        res.setResponseData(sb.toString(), null);
         res.setDataType(SampleResult.TEXT);
         res.setSamplerData(rd.toString());
         res.setSuccessful(true);

File: src/core/org/apache/jmeter/save/converters/SampleResultConverter.java
Patch:
@@ -347,7 +347,7 @@ protected boolean retrieveItem(HierarchicalStreamReader reader, UnmarshallingCon
                 try {
                     res.setResponseData(responseData.getBytes(dataEncoding));
                 } catch (UnsupportedEncodingException e) {
-                    res.setResponseData(("Can't support the char set: " + dataEncoding).getBytes());
+                    res.setResponseData(("Can't support the char set: " + dataEncoding), null);
                     res.setDataType(SampleResult.TEXT);
                 }
             }

File: src/examples/org/apache/jmeter/examples/sampler/ExampleSampler.java
Patch:
@@ -81,7 +81,7 @@ public SampleResult sample(Entry e) {
              * Set up the sample result details
              */
             res.setSamplerData(data);
-            res.setResponseData(response.getBytes());
+            res.setResponseData(response, null);
             res.setDataType(SampleResult.TEXT);
 
             res.setResponseCodeOK();

File: src/examples/org/apache/jmeter/examples/testbeans/example1/Example1.java
Patch:
@@ -39,7 +39,7 @@ public SampleResult sample(Entry e) {
         res.setSamplerData(myStringProperty);
         res.sampleStart();
         // Do something ...
-        res.setResponseData(myStringProperty.toUpperCase().getBytes());
+        res.setResponseData(myStringProperty.toUpperCase(), null);
         res.setDataType(SampleResult.TEXT);
         res.sampleEnd();
         res.setSuccessful(true);

File: src/examples/org/apache/jmeter/examples/testbeans/example2/Example2.java
Patch:
@@ -39,7 +39,7 @@ public SampleResult sample(Entry e) {
         res.setSamplerData(myStringProperty);
         res.sampleStart();
         // Do something ...
-        res.setResponseData(myStringProperty.toLowerCase().getBytes());
+        res.setResponseData(myStringProperty.toLowerCase(), null);
         res.setDataType(SampleResult.TEXT);
         res.sampleEnd();
         res.setSuccessful(true);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java
Patch:
@@ -538,7 +538,7 @@ public SampleResult sample() {
                     // performance on slow clients
                     length=br.read();
                     result.sampleEnd();
-                    result.setResponseData(JMeterUtils.getResString("read_response_message").getBytes()); //$NON-NLS-1$
+                    result.setResponseData(JMeterUtils.getResString("read_response_message"), null); //$NON-NLS-1$
                 }
                 // It is not possible to access the actual HTTP response code, so we assume no data means failure
                 if (length > 0){

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BSFSampler.java
Patch:
@@ -151,7 +151,7 @@ public SampleResult sample(Entry e)// Entry tends to be ignored ...
             }
 
             if (bsfOut != null) {
-                res.setResponseData(bsfOut.toString().getBytes());
+                res.setResponseData(bsfOut.toString(), null);
             }
         } catch (BSFException ex) {
             log.warn("BSF error", ex);

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BeanShellSampler.java
Patch:
@@ -141,7 +141,7 @@ public SampleResult sample(Entry e)// Entry tends to be ignored ...
 
             if (bshOut != null) {// Set response data
                 String out = bshOut.toString();
-                res.setResponseData(out.getBytes());
+                res.setResponseData(out, null);
             }
             // script can also use setResponseData() so long as it returns null
 

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JSR223Sampler.java
Patch:
@@ -61,8 +61,7 @@ public SampleResult sample(Entry entry) {
             result.setResponseCodeOK();
             result.setResponseMessageOK();
             if (ret != null){
-                // TODO what encoding to use?
-                result.setResponseData(ret.toString().getBytes());
+                result.setResponseData(ret.toString(), null);
             }
         } catch (IOException e) {
             log.warn("Problem in JSR223 script "+e);

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java
Patch:
@@ -279,7 +279,7 @@ public SampleResult runTest(JavaSamplerContext p_context) {
             Thread.yield();
             SampleResult results = new SampleResult();
             results.setSuccessful(false);
-            results.setResponseData(("Class not found: " + getClassname()).getBytes());
+            results.setResponseData(("Class not found: " + getClassname()), null);
             results.setSampleLabel("ERROR: " + getClassname());
             return results;
         }

File: src/protocol/java/org/apache/jmeter/protocol/java/test/JavaTest.java
Patch:
@@ -272,7 +272,7 @@ public SampleResult runTest(JavaSamplerContext context) {
         }
 
         if (resultData != null && resultData.length() > 0) {
-            results.setResponseData(resultData.getBytes());
+            results.setResponseData(resultData, null);
             results.setDataType(SampleResult.TEXT);
         }
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -137,7 +137,7 @@ public SampleResult sample(Entry entry) {
             if (isOneway()) {
                 producer.send(msg);
                 res.setSuccessful(true);
-                res.setResponseData("Oneway request has no response data".getBytes());
+                res.setResponseData("Oneway request has no response data", null);
             } else {
                 if (!useTemporyQueue()) {
                     msg.setJMSReplyTo(receiveQueue);
@@ -151,9 +151,9 @@ public SampleResult sample(Entry entry) {
                     }
                 } else {
                     if (replyMsg instanceof TextMessage) {
-                        res.setResponseData(((TextMessage) replyMsg).getText().getBytes());
+                        res.setResponseData(((TextMessage) replyMsg).getText(), null);
                     } else {
-                        res.setResponseData(replyMsg.toString().getBytes());
+                        res.setResponseData(replyMsg.toString(), null);
                     }
                     res.setSuccessful(true);
                 }

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
Patch:
@@ -711,7 +711,7 @@ public SampleResult sample(Entry e) {
         XMLBuffer xmlBuffer = new XMLBuffer();
         xmlBuffer.openTag("ldapanswer"); // $NON-NLS-1$
         SampleResult res = new SampleResult();
-        res.setResponseData("successfull".getBytes());
+        res.setResponseData("successfull", null);
         res.setResponseMessage("Success"); // $NON-NLS-1$
         res.setResponseCode("0"); // $NON-NLS-1$
         res.setContentType("text/xml");// $NON-NLS-1$
@@ -847,7 +847,7 @@ scope, getCountlimAsLong(),
             xmlBuffer.closeTag("operation"); // $NON-NLS-1$
             xmlBuffer.tag("responsecode",res.getResponseCode()); // $NON-NLS-1$
             xmlBuffer.tag("responsemessage",res.getResponseMessage()); // $NON-NLS-1$
-            res.setResponseData(xmlBuffer.toString().getBytes());
+            res.setResponseData(xmlBuffer.toString(), null);
             res.setDataType(SampleResult.TEXT);
             res.setSuccessful(isSuccessful);
         }

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPSampler.java
Patch:
@@ -443,11 +443,11 @@ public SampleResult sample(Entry e) {
             if (getPropertyAsString(TEST).equals(SEARCHBASE) && !searchFoundEntries) {
                 res.setResponseCode("201");// TODO is this a sensible number? //$NON-NLS-1$
                 res.setResponseMessage("OK - no results");
-                res.setResponseData("successful - no results".getBytes());
+                res.setResponseData("successful - no results", null);
             } else {
                 res.setResponseCodeOK();
                 res.setResponseMessage("OK"); //$NON-NLS-1$
-                res.setResponseData("successful".getBytes());
+                res.setResponseData("successful", null);
             }
             res.setDataType(SampleResult.TEXT);
             isSuccessful = true;

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -307,7 +307,7 @@ public SampleResult sample(Entry e)// Entry tends to be ignored ...
                 res.setSamplerData(req);
                 protocolHandler.write(os, req);
                 String in = protocolHandler.read(is);
-                res.setResponseData(in.getBytes());
+                res.setResponseData(in, null);
                 res.setDataType(SampleResult.TEXT);
                 res.setResponseCodeOK();
                 res.setResponseMessage("OK"); //$NON-NLS-1$

File: test/src/org/apache/jmeter/assertions/SizeAssertionTest.java
Patch:
@@ -43,7 +43,7 @@ public void setUp() {
           jmctx.setVariables(vars);
           sample0 = new SampleResult();
           sample1 = new SampleResult();
-          sample1.setResponseData(data1.getBytes());
+          sample1.setResponseData(data1, null);
       }
 
       public void testSizeAssertionEquals() throws Exception{

File: test/src/org/apache/jmeter/engine/util/PackageTest.java
Patch:
@@ -56,7 +56,7 @@ public void setUp() {
         variables.put("my_regex", ".*");
         variables.put("server", "jakarta.apache.org");
         result = new SampleResult();
-        result.setResponseData("<html>hello world</html> costs: $3.47,$5.67".getBytes());
+        result.setResponseData("<html>hello world</html> costs: $3.47,$5.67", null);
         transformer = new ReplaceStringWithFunctions(new CompoundVariable(), variables);
         jmctx.setVariables(new JMeterVariables());
         jmctx.setSamplingStarted(true);

File: test/src/org/apache/jmeter/extractor/TestRegexExtractor.java
Patch:
@@ -56,7 +56,7 @@ public void setUp() {
                     + "<value field=\"pinposition2\">5</value>" + "<value field=\"pinpositionvalue2\"></value>"
                     + "<value field=\"pinposition3\">6</value>" + "<value field=\"pinpositionvalue3\"></value>"
                     + "</row>" + "</company-xmlext-query-ret>";
-            result.setResponseData(data.getBytes());
+            result.setResponseData(data, null);
             result.setResponseHeaders("Header1: Value1\nHeader2: Value2");
             result.setResponseCode("abcd");
             result.setResponseMessage("The quick brown fox");

File: test/src/org/apache/jmeter/extractor/TestXPathExtractor.java
Patch:
@@ -212,7 +212,7 @@ public void testInvalidXpath() throws Exception {
         }
 
         public void testInvalidDocument() throws Exception {
-            result.setResponseData("<z>".getBytes());
+            result.setResponseData("<z>", null);
             extractor.setXPathQuery("<");
             extractor.process();
             assertEquals("Default", vars.get(VAL_NAME));

File: test/src/org/apache/jmeter/functions/TestJexlFunction.java
Patch:
@@ -49,7 +49,7 @@ public void setUp() {
         result = new SampleResult();
         jmctx = JMeterContextService.getContext();
         String data = "The quick brown fox";
-        result.setResponseData(data.getBytes());
+        result.setResponseData(data, null);
         vars = new JMeterVariables();
         jmctx.setVariables(vars);
         jmctx.setPreviousResult(result);

File: test/src/org/apache/jmeter/functions/TestRegexFunction.java
Patch:
@@ -57,7 +57,7 @@ public void setUp() {
                     + " field=\"pinposition2\">5</value><value" + " field=\"pinpositionvalue2\"></value><value"
                     + " field=\"pinposition3\">6</value><value" + " field=\"pinpositionvalue3\"></value>"
                     + "</row></company-xmlext-query-ret>";
-            result.setResponseData(data.getBytes());
+            result.setResponseData(data, null);
             vars = new JMeterVariables();
             String data2 = "The quick brown fox jumped over the lazy dog 123 times";
             vars.put(INPUT_VARIABLE_NAME, data2);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -51,7 +51,6 @@ public class HTTPSampleResult extends SampleResult {
 
     public HTTPSampleResult() {
         super();
-        setDataEncoding(DEFAULT_HTTP_ENCODING); // default if encoding not provided be the page
     }
 
     public HTTPSampleResult(long elapsed) {
@@ -207,7 +206,7 @@ public String getDataEncodingWithDefault() {
                 }
             }
         }
-        return super.getDataEncodingWithDefault();
+        return super.getDataEncodingWithDefault(DEFAULT_HTTP_ENCODING);
     }
 
     public void setResponseNoContent(){

File: src/components/org/apache/jmeter/timers/SyncTimer.java
Patch:
@@ -86,7 +86,6 @@ public long delay() {
                     log.warn(e.getLocalizedMessage());
                 }
             }
-            timerCounter[0]=0; // Reset for next time
         }
         return 0;
     }

File: src/core/org/apache/jmeter/threads/gui/AbstractThreadGroupGui.java
Patch:
@@ -20,7 +20,6 @@
 
 import java.awt.BorderLayout;
 import java.awt.Dimension;
-import java.awt.event.ItemListener;
 import java.util.Arrays;
 import java.util.Collection;
 import javax.swing.BorderFactory;
@@ -39,7 +38,7 @@
 import org.apache.jmeter.threads.AbstractThreadGroup;
 import org.apache.jmeter.util.JMeterUtils;
 
-public abstract class AbstractThreadGroupGui extends AbstractJMeterGuiComponent implements ItemListener {
+public abstract class AbstractThreadGroupGui extends AbstractJMeterGuiComponent {
     private static final long serialVersionUID = 240L;
 
     // Sampler error action buttons

File: src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.testelement.WorkBench;
-import org.apache.jmeter.threads.ThreadGroup;
+import org.apache.jmeter.threads.AbstractThreadGroup;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.layout.VerticalLayout;
 
@@ -205,7 +205,7 @@ private void buildNodesModel(JMeterTreeNode node, String parent_name, int level)
                 StringBuilder name = new StringBuilder();
                 JMeterTreeNode cur = (JMeterTreeNode) node.getChildAt(i);
                 TestElement te = cur.getTestElement();
-                if (te instanceof ThreadGroup) {
+                if (te instanceof AbstractThreadGroup) {
                     name.append(parent_name);
                     name.append(cur.getName());
                     name.append(seperator);

File: src/core/org/apache/jmeter/control/gui/TestPlanGui.java
Patch:
@@ -36,7 +36,6 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.testelement.property.JMeterProperty;
-import org.apache.jmeter.threads.gui.ThreadGroupGui;
 import org.apache.jmeter.util.JMeterUtils;
 
 /**
@@ -87,8 +86,7 @@ public TestPlanGui() {
     public JPopupMenu createPopupMenu() {
         JPopupMenu pop = new JPopupMenu();
         JMenu addMenu = new JMenu(JMeterUtils.getResString("add")); // $NON-NLS-1$
-        addMenu.add(MenuFactory.makeMenuItem(new ThreadGroupGui().getStaticLabel(), ThreadGroupGui.class.getName(),
-                ActionNames.ADD));
+        addMenu.add(MenuFactory.makeMenu(MenuFactory.THREADS, ActionNames.ADD));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.CONFIG_ELEMENTS, ActionNames.ADD));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.TIMERS, ActionNames.ADD));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.PRE_PROCESSORS, ActionNames.ADD));

File: src/core/org/apache/jmeter/engine/ConvertListeners.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.jmeter.samplers.SampleListener;
 import org.apache.jmeter.testelement.TestListener;
 import org.apache.jmeter.testelement.ThreadListener;
-import org.apache.jmeter.threads.ThreadGroup;
+import org.apache.jmeter.threads.AbstractThreadGroup;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.collections.HashTreeTraverser;
 import org.apache.jorphan.logging.LoggingManager;
@@ -53,8 +53,8 @@ public void addNode(Object node, HashTree subTree) {
         Iterator<?> iter = subTree.list().iterator();
         while (iter.hasNext()) {
             Object item = iter.next();
-            if (item instanceof ThreadGroup) {
-                log.info("num threads = " + ((ThreadGroup) item).getNumThreads());
+            if (item instanceof AbstractThreadGroup) {
+                log.info("num threads = " + ((AbstractThreadGroup) item).getNumThreads());
             }
             if (item instanceof Remoteable) {
                 if (item instanceof ThreadListener){

File: src/core/org/apache/jmeter/threads/JMeterContext.java
Patch:
@@ -43,7 +43,7 @@ public class JMeterContext {
 
     private JMeterThread thread;
 
-    private ThreadGroup threadGroup;
+    private AbstractThreadGroup threadGroup;
 
     private int threadNum;
 
@@ -145,11 +145,11 @@ public void setThread(JMeterThread thread) {
         this.thread = thread;
     }
 
-    public ThreadGroup getThreadGroup() {
+    public AbstractThreadGroup getThreadGroup() {
         return this.threadGroup;
     }
 
-    public void setThreadGroup(ThreadGroup threadgrp) {
+    public void setThreadGroup(AbstractThreadGroup threadgrp) {
         this.threadGroup = threadgrp;
     }
 

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -102,7 +102,7 @@ public class JMeterThread implements Runnable, Interruptible {
     // based on this scheduler is enabled or disabled
 
     // Gives access to parent thread threadGroup
-    private ThreadGroup threadGroup;
+    private AbstractThreadGroup threadGroup;
 
     private StandardJMeterEngine engine = null; // For access to stop methods.
 
@@ -764,7 +764,7 @@ public void setOnErrorStopThread(boolean b) {
         onErrorStopThread = b;
     }
 
-    public void setThreadGroup(ThreadGroup group) {
+    public void setThreadGroup(AbstractThreadGroup group) {
         this.threadGroup = group;
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -59,7 +59,7 @@
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.testelement.property.StringProperty;
-import org.apache.jmeter.threads.ThreadGroup;
+import org.apache.jmeter.threads.AbstractThreadGroup;
 import org.apache.jmeter.timers.Timer;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
@@ -638,7 +638,7 @@ private JMeterTreeNode findFirstNodeOfType(Class<?> type) {
      * <ul>
      * <li>The controller specified by the <code>target</code> property.
      * <li>If none was specified, the first RecordingController in the tree.
-     * <li>If none is found, the first ThreadGroup in the tree.
+     * <li>If none is found, the first AbstractThreadGroup in the tree.
      * <li>If none is found, the Workspace.
      * </ul>
      *
@@ -654,7 +654,7 @@ private JMeterTreeNode findTargetControllerNode() {
         if (myTarget != null) {
             return myTarget;
         }
-        myTarget = findFirstNodeOfType(ThreadGroup.class);
+        myTarget = findFirstNodeOfType(AbstractThreadGroup.class);
         if (myTarget != null) {
             return myTarget;
         }

File: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
Patch:
@@ -180,7 +180,9 @@ public SampleResult sample(Entry e) {
                     message.setFlag(Flags.Flag.DELETED, true);
                 }
                 child.setResponseOK();
-                child.sampleEnd();
+                if (child.getEndTime()==0){// Avoid double-call if addSubResult was called.
+                    child.sampleEnd();
+                }
                 parent.addSubResult(child);
             }
 
@@ -261,7 +263,6 @@ private void appendMessageData(SampleResult child, Message message)
                 sr.setSampleLabel("Part: "+j);
                 sr.setContentType(contentType);
                 sr.setEncodingAndType(contentType);
-                sr.setResponseHeaders(bodyPart.getClass().getName());// TODO
                 sr.sampleStart();
                 if (bodyPartContent instanceof InputStream){
                     sr.setResponseData(IOUtils.toByteArray((InputStream) bodyPartContent));

File: src/components/org/apache/jmeter/visualizers/RenderAsXML.java
Patch:
@@ -49,7 +49,7 @@ public class RenderAsXML extends SamplerResultTab
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final byte[] XML_PFX = "<?xml ".getBytes(); // $NON-NLS-1$
+    private static final byte[] XML_PFX = {'<','?','x','m','l',' '};//"<?xml "
 
     public RenderAsXML(){
         activateSearchExtension = false; // TODO work out how to search the XML pane

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/MultipartUrlConfigGui.java
Patch:
@@ -82,6 +82,7 @@ private void init() {// called from ctor, so must not be overridable
 
         this.add(getWebServerTimeoutPanel(), BorderLayout.NORTH);
         this.add(webRequestPanel, BorderLayout.CENTER);
+        this.add(getProxyServerPanel(), BorderLayout.SOUTH);
     }
 
     private JPanel getHTTPFileArgsPanel() {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -166,7 +166,7 @@ private static boolean validateFormat(String format){
 
     // Internal information only
     private static String fileVersion = ""; // read from properties file// $NON-NLS-1$
-    private static final String FILEVERSION = "836188"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "905484"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/components/org/apache/jmeter/extractor/gui/RegexExtractorGui.java
Patch:
@@ -78,6 +78,7 @@ public void configure(TestElement el) {
         super.configure(el);
         if (el instanceof RegexExtractor){
             RegexExtractor re = (RegexExtractor) el;
+            showScopeSettings(re);
             useHeaders.setSelected(re.useHeaders());
             useBody.setSelected(re.useBody());
             useUnescapedBody.setSelected(re.useUnescapedBody());
@@ -110,6 +111,7 @@ public void modifyTestElement(TestElement extractor) {
         super.configureTestElement(extractor);
         if (extractor instanceof RegexExtractor) {
             RegexExtractor regex = (RegexExtractor) extractor;
+            saveScopeSettings(regex);
             regex.setUseField(group.getSelection().getActionCommand());
             regex.setRefName(refNameField.getText());
             regex.setRegex(regexField.getText());
@@ -141,6 +143,7 @@ private void init() {
 
         Box box = Box.createVerticalBox();
         box.add(makeTitlePanel());
+        box.add(createScopePanel());
         box.add(makeSourcePanel());
         add(box, BorderLayout.NORTH);
         add(makeParameterPanel(), BorderLayout.CENTER);

File: src/core/org/apache/jmeter/util/ScopePanel.java
Patch:
@@ -51,7 +51,7 @@ public ScopePanel() {
      */
     private void init() {
         setLayout(new BorderLayout(5, 0));
-        setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("sample_scope_title"))); //$NON-NLS-1$
+        setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("sample_scope"))); //$NON-NLS-1$
 
         parentButton.setSelected(true);
         

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -578,7 +578,7 @@ private void tellThreadsToStop() {
     }
 
     public void askThreadsToStop() {
-        if (engine == null) { // Will be null if StopTest thread has started
+        if (engine != null) { // Will be null if StopTest thread has started
             engine.stopTest(false);
         }
     }

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapExtConfigGui.java
Patch:
@@ -228,7 +228,7 @@ public void configure(TestElement element) {
             cl.show(cards, CARDS_BIND);
         } else if (testType.equals(LDAPExtSampler.SBIND)) {
             sbind.setSelected(true);
-            cl.show(cards, CARDS_DEFAULT);
+            cl.show(cards, CARDS_BIND);
         } else if (testType.equals(LDAPExtSampler.COMPARE)) {
             compare.setSelected(true);
             cl.show(cards, CARDS_COMPARE);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java
Patch:
@@ -507,7 +507,9 @@ public SampleResult sample() {
             spconn.setMaintainSession(true);
             msg.setSOAPTransport(spconn);
             msg.send(this.getUrl(), this.getSoapAction(), msgEnv);
-            result.setResponseHeaders(convertSoapHeaders(spconn.getHeaders()));
+            @SuppressWarnings("unchecked") // API uses raw types
+            final Hashtable<String, String> headers = spconn.getHeaders();
+            result.setResponseHeaders(convertSoapHeaders(headers));
 
             if (this.getHeaderManager() != null) {
                 this.getHeaderManager().setSOAPHeader(spconn);

File: src/monitor/model/org/apache/jmeter/monitor/model/ObjectFactory.java
Patch:
@@ -28,6 +28,7 @@
  */
 public class ObjectFactory {
 
+    //@GuardedBy("this")
     private static ObjectFactory FACTORY = null;
 
     private final Parser PARSER;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
Patch:
@@ -260,7 +260,7 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe
 
             if (instream != null) {// will be null for HEAD
 
-                org.apache.commons.httpclient.Header responseHeader = httpMethod.getResponseHeader(TRANSFER_ENCODING);
+                org.apache.commons.httpclient.Header responseHeader = httpMethod.getResponseHeader(HEADER_CONTENT_ENCODING);
                 if (responseHeader != null && ENCODING_GZIP.equals(responseHeader.getValue())) {
                     instream = new GZIPInputStream(instream);
                 }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
Patch:
@@ -142,7 +142,7 @@ protected int setPostHeaders(PostMethod post) {
             }
         } else {
             // otherwise we use "text/xml" as the default
-            post.addParameter(HEADER_CONTENT_TYPE, DEFAULT_CONTENT_TYPE); //$NON-NLS-1$
+            post.setRequestHeader(HEADER_CONTENT_TYPE, DEFAULT_CONTENT_TYPE); //$NON-NLS-1$
         }
         if (getSendSOAPAction()) {
             post.setRequestHeader(SOAPACTION, getSOAPActionQuoted());

File: src/components/org/apache/jmeter/visualizers/DistributionGraph.java
Patch:
@@ -168,8 +168,7 @@ private void drawSample(SamplingStatCalculator p_model, Graphics g) {
 
             int total = p_model.getCount();
             Collection<Number[]> values = p_model.getDistribution().values();
-            Number[][] objval = (Number[][]) new Object[values.size()];
-            objval = values.toArray(objval);
+            Number[][] objval = values.toArray(new Number[][]{});
             // we sort the objects
             Arrays.sort(objval, new NumberComparator());
             int len = objval.length;

File: test/src/org/apache/jmeter/gui/action/TestLoad.java
Patch:
@@ -96,6 +96,7 @@ public void checkTestFile() throws Exception{
     }
     
     private void assertTree(HashTree tree) throws Exception {
+        assertNotNull(parent+": "+ testFile.getName()+" caused null tree: ",tree);
         final Object object = tree.getArray()[0];
         final String name = testFile.getName();
         

File: src/core/org/apache/jmeter/save/converters/SampleSaveConfigurationConverter.java
Patch:
@@ -72,6 +72,7 @@ public MyWrapper(Mapper wrapped) {
             super(wrapped);
         }
 
+        /** {@inheritDoc} */
         @Override
         public boolean shouldSerializeMember(
                 @SuppressWarnings("unchecked") // superclass does not use types

File: src/core/org/apache/jmeter/testelement/property/AbstractProperty.java
Patch:
@@ -288,7 +288,9 @@ protected Collection<JMeterProperty> normalizeList(Collection<JMeterProperty> co
             Object item = iter.next();
             if (newColl == null) {
                 try {
-                    newColl = coll.getClass().newInstance();
+                    @SuppressWarnings("unchecked") // coll is of the correct type
+                    final Class<Collection<JMeterProperty>> class1 = (Class<Collection<JMeterProperty>>) coll.getClass();
+                    newColl = class1.newInstance();
                 } catch (Exception e) {
                     log.error("Bad collection", e);
                     return coll;

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -113,7 +113,7 @@ private void init() {// called from ctor, so must not be overridable
         add(createOptionalTasksPanel(), BorderLayout.SOUTH);
     }
 
-    private JPanel createOptionalTasksPanel() {
+    protected JPanel createOptionalTasksPanel() {
         // OPTIONAL TASKS
         JPanel optionalTasksPanel = new VerticalPanel();
         optionalTasksPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils
@@ -134,7 +134,7 @@ private JPanel createOptionalTasksPanel() {
 
         // Embedded URL match regex
         embeddedRE = new JLabeledTextField(JMeterUtils.getResString("web_testing_embedded_url_pattern"),30); // $NON-NLS-1$
-        optionalTasksPanel.add(embeddedRE);
+        optionalTasksPanel.add(embeddedRE, BorderLayout.CENTER);
         return optionalTasksPanel;
     }
 

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -370,6 +370,9 @@ public void run() {
                 } // else will be done by threadFinished()
             } else {
                 stopAllThreads();
+                if (serialized) {
+                    notifyTestListenersOfEnd(testListenersSave);
+                }
             }
         }
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -621,6 +621,7 @@ private JPanel createGroupingPanel() {
         m.addElement(JMeterUtils.getResString("grouping_add_separators")); // $NON-NLS-1$
         m.addElement(JMeterUtils.getResString("grouping_in_controllers")); // $NON-NLS-1$
         m.addElement(JMeterUtils.getResString("grouping_store_first_only")); // $NON-NLS-1$
+        m.addElement(JMeterUtils.getResString("grouping_in_transaction_controllers")); // $NON-NLS-1$
         groupingMode = new JComboBox(m);
         groupingMode.setSelectedIndex(0);
         groupingMode.addItemListener(this);

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -151,7 +151,7 @@ public void doAction(ActionEvent e) throws IllegalUserActionException {
         GuiPackage.getInstance().updateCurrentGui();
     }
 
-    // package protected to all for separate test code
+    // package protected to allow access from test code
     void convertSubTree(HashTree tree) {
         Iterator<JMeterTreeNode> iter = new LinkedList<JMeterTreeNode>(tree.list()).iterator();
         while (iter.hasNext()) {

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeModel.java
Patch:
@@ -89,6 +89,7 @@ public JMeterTreeNode getNodeOf(TestElement userObject) {
      * the added sub tree was a full test plan.
      */
     public HashTree addSubTree(HashTree subTree, JMeterTreeNode current) throws IllegalUserActionException {
+        @SuppressWarnings("unchecked") // OK
         Iterator<TestElement> iter = subTree.list().iterator();
         while (iter.hasNext()) {
             TestElement item = iter.next();

File: src/reports/org/apache/jmeter/testelement/JTLData.java
Patch:
@@ -199,7 +199,7 @@ public void add(SampleResult sample) {
         }
         SamplingStatCalculator row = data.get(url);
         if (row == null) {
-            row = new SamplingStatCalculator();
+            row = new SamplingStatCalculator(url);
             // just like the aggregate listener, we use the sample label to represent
             // a row. in this case, we use it as a key.
             this.data.put(url,row);

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java
Patch:
@@ -61,5 +61,6 @@ public interface HTTPConstantsInterface {
     public static final String IF_MODIFIED_SINCE = "If-Modified-Since"; // $NON-NLS-1$
     public static final String ETAG = "Etag"; // $NON-NLS-1$
     public static final String LAST_MODIFIED = "Last-Modified"; // $NON-NLS-1$
+    public static final String EXPIRES = "Expires"; // $NON-NLS-1$
 
 }

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSConfigGui.java
Patch:
@@ -186,7 +186,7 @@ public void configure(TestElement el) {
         useNonPersistentDelivery.setSelected(sampler.isNonPersistent());
         useReqMsgIdAsCorrelId.setSelected(sampler.isUseReqMsgIdAsCorrelId());
         
-        timeout.setText(String.valueOf(sampler.getTimeout()));
+        timeout.setText(sampler.getTimeout());
         soapXml.setText(sampler.getContent());
         initialContextFactory.setText(sampler.getInitialContextFactory());
         providerUrl.setText(sampler.getContextProvider());

File: src/core/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -202,6 +202,7 @@ public void sampleOccurred(SampleEvent se) {
                 }
                 res.setAllThreads(sampleResult.getAllThreads());
                 res.setGroupThreads(sampleResult.getGroupThreads());
+                res.setLatency(res.getLatency() + sampleResult.getLatency());
             }
         }
     }

File: src/components/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -163,8 +163,8 @@ public HashTree getReplacementSubTree() {
                 selectedNode = cloneTreeNode(selectedNode);
                 selectedNode.setEnabled(true);
             }
-            tree.add(selectedNode);
-            createSubTree(tree, selectedNode);
+            HashTree subtree = tree.add(selectedNode);
+            createSubTree(subtree, selectedNode);
         }
         return tree;
     }

File: src/core/org/apache/jmeter/gui/action/Start.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.jmeter.engine.JMeterEngineException;
 import org.apache.jmeter.engine.StandardJMeterEngine;
 import org.apache.jmeter.engine.TreeCloner;
-import org.apache.jmeter.engine.util.DisabledComponentRemover;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.util.JMeterUtils;
@@ -89,8 +88,6 @@ private void startEngine() {
         GuiPackage gui = GuiPackage.getInstance();
         HashTree testTree = gui.getTreeModel().getTestPlan();
         JMeter.convertSubTree(testTree);
-        DisabledComponentRemover remover = new DisabledComponentRemover(testTree);
-        testTree.traverse(remover);
         testTree.add(testTree.getArray()[0], gui.getMainFrame());
         log.debug("test plan before cloning is running version: "
                 + ((TestPlan) testTree.getArray()[0]).isRunningVersion());

File: src/core/org/apache/jmeter/assertions/CompareAssertionResult.java
Patch:
@@ -75,7 +75,7 @@ public void addToBaseResult(String r)
 			}
 			else
 			{
-				baseResult = baseResult + "\n\n" + r;
+				baseResult = baseResult + "\n\n" + r; //$NON-NLS-1$
 			}
 		}
 		
@@ -87,7 +87,7 @@ public void addToSecondaryResult(String r)
 			}
 			else
 			{
-				secondaryResult = secondaryResult + "\n\n" + r;
+				secondaryResult = secondaryResult + "\n\n" + r; //$NON-NLS-1$
 			}
 		}
 	}

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/Receiver.java
Patch:
@@ -81,7 +81,7 @@ public void run() {
                     if (reply.getJMSCorrelationID() == null) {
                         log.warn("Received message with correlation id null. Discarding message ...");
                     } else {
-                        MessageAdmin.getAdmin().putReply(reply.getJMSMessageID(), reply);
+                        MessageAdmin.getAdmin().putReply(reply.getJMSCorrelationID(), reply);
                     }
                 }
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/OnMessageSubscriber.java
Patch:
@@ -115,6 +115,7 @@ public Context initJNDI(boolean useProps, String jndi, String url, boolean useAu
      */
     public void initConnection(Context ctx, String connfactory, String topic) {
         try {
+            ConnectionFactory.getTopicConnectionFactory(ctx, connfactory);
             this.CONN = ConnectionFactory.getTopicConnection();
             this.TOPIC = InitialContextFactory.lookupTopic(ctx, topic);
             this.SESSION = this.CONN.createTopicSession(false, TopicSession.AUTO_ACKNOWLEDGE);

File: src/jorphan/org/apache/jorphan/math/StatCalculator.java
Patch:
@@ -86,7 +86,7 @@ public void addAll(StatCalculator<T> calc) {
         }
     }
 
-    public Number getMedian() {
+    public T getMedian() {
         if (count > 0) {
             return values.get((int) (values.size() * .5));
         }

File: src/components/org/apache/jmeter/visualizers/Graph.java
Patch:
@@ -218,7 +218,9 @@ private void drawSample(int x, Sample oneSample, Graphics g) {
                 g.setColor(JMeterColor.YELLOW);
             }
             g.drawLine(x % width, height - data, x % width, height - data - 1);
-            log.debug("Drawing coords = " + (x % width) + "," + (height - data));
+            if (log.isDebugEnabled()) {
+                log.debug("Drawing coords = " + (x % width) + "," + (height - data));
+            }
         }
 
         if (wantAverage) {

File: src/components/org/apache/jmeter/visualizers/GraphAccumModel.java
Patch:
@@ -102,7 +102,9 @@ public String getName() {
      * @return the Max value
      */
     public long getMax() {
-        log.debug("getMax1 : Returning - " + max);
+        if (log.isDebugEnabled()) {
+            log.debug("getMax1 : Returning - " + max);
+        }
         return max;
     }
 

File: src/components/org/apache/jmeter/visualizers/GraphAccumVisualizer.java
Patch:
@@ -137,8 +137,6 @@ public synchronized void clearData() {
     @Override
     public String toString() {
         String toString = "Show the samples analysys as dot plots";
-
-        log.debug("toString1 : Returning - " + toString);
         return toString;
     }
 

File: src/components/org/apache/jmeter/visualizers/SearchTextExtension.java
Patch:
@@ -138,7 +138,9 @@ public void executeAndShowTextFind() {
                 lastPosition = LAST_POSITION_DEFAULT;
             }
 
-            log.debug("lastPosition=" + lastPosition);
+            if (log.isDebugEnabled()) {
+                log.debug("lastPosition=" + lastPosition);
+            }
             Matcher matcher = null;
             try {
                 Pattern pattern = createPattern(textToFind);

File: src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java
Patch:
@@ -288,6 +288,8 @@ public void modifyTestElement(TestElement el)
         sampler.setSuccessCode(successCode.getText());
         sampler.setFailure(failureMsg.getText());
         sampler.setFailureCode(failureCode.getText());
+        sampler.setError(errorMsg.getText());
+        sampler.setErrorCode(errorCode.getText());
         sampler.setDoNotSetUpTearDown(doSetup.isSelected());
         sampler.setAppendError(appendError.isSelected());
         sampler.setAppendException(appendExc.isSelected());

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
Patch:
@@ -84,8 +84,8 @@ public ReceiveSubscriber(boolean useProps, String jndi, String url, String connf
                 ConnectionFactory.getTopicConnectionFactory(ctx,connfactory);
                 _conn = ConnectionFactory.getTopicConnection();
                 _topic = InitialContextFactory.lookupTopic(ctx, topic);
-                _session = this.CONN.createTopicSession(false, TopicSession.AUTO_ACKNOWLEDGE);
-                _subscriber = this.SESSION.createSubscriber(this.TOPIC);
+                _session = _conn.createTopicSession(false, TopicSession.AUTO_ACKNOWLEDGE);
+                _subscriber = _session.createSubscriber(this.TOPIC);
                 log.info("created the topic connection successfully");
             } catch (JMSException e) {
                 log.error("Connection error: " + e.getMessage());

File: src/core/org/apache/jmeter/testbeans/BeanInfoSupport.java
Patch:
@@ -72,6 +72,8 @@ public abstract class BeanInfoSupport extends SimpleBeanInfo {
 
     public static final String NOT_OTHER = GenericTestBeanCustomizer.NOT_OTHER;
 
+    public static final String MULTILINE = "multiline";
+
     public static final String DEFAULT = GenericTestBeanCustomizer.DEFAULT;
 
     public static final String RESOURCE_BUNDLE = GenericTestBeanCustomizer.RESOURCE_BUNDLE;

File: src/components/org/apache/jmeter/visualizers/DistributionGraph.java
Patch:
@@ -167,15 +167,15 @@ private void drawSample(SamplingStatCalculator p_model, Graphics g) {
             Number fifty = p_model.getPercentPoint(0.50);
 
             int total = p_model.getCount();
-            Collection<?> values = p_model.getDistribution().values();
-            Object[] objval = new Object[values.size()];
+            Collection<Number[]> values = p_model.getDistribution().values();
+            Number[][] objval = (Number[][]) new Object[values.size()];
             objval = values.toArray(objval);
             // we sort the objects
             Arrays.sort(objval, new NumberComparator());
             int len = objval.length;
             for (int count = 0; count < len; count++) {
                 // calculate the height
-                Number[] num = (Number[]) objval[count];
+                Number[] num = objval[count];
                 double iper = (double) num[1].intValue() / (double) total;
                 double iheight = height * iper;
                 // if the height is less than one, we set it

File: src/core/org/apache/jmeter/testelement/property/JMeterProperty.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.apache.jmeter.testelement.TestElement;
 
-public interface JMeterProperty extends Serializable, Cloneable, Comparable {
+public interface JMeterProperty extends Serializable, Cloneable, Comparable<JMeterProperty> {
     /**
      * Returns whether the property is a running version.
      *

File: src/monitor/components/org/apache/jmeter/monitor/util/Stats.java
Patch:
@@ -177,14 +177,14 @@ private static Connector fetchConnector(Status stat) {
         if (connectorPrefix != null && connectorPrefix.length() > 0) {
            // loop to fetch desired connector
            for (int i = 0; i < stat.getConnector().size(); i++) {
-               cntr = (Connector) stat.getConnector().get(i);
+               cntr = stat.getConnector().get(i);
                if (cntr.getName().startsWith(connectorPrefix)) {
                    return cntr;
                }
            }           
         }
         // default : get first connector
-        cntr = (Connector) stat.getConnector().get(0);
+        cntr = stat.getConnector().get(0);
         return cntr;
     }
 

File: src/monitor/model/org/apache/jmeter/monitor/model/Status.java
Patch:
@@ -21,7 +21,7 @@ public interface Status {
 
     void setJvm(Jvm vm);
 
-    java.util.List getConnector();
+    java.util.List<Connector> getConnector();
     
     void addConnector(Connector conn);
 

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserParameterXMLParser.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.io.IOException;
 import java.util.List;
+import java.util.Map;
 
 import org.apache.jmeter.util.JMeterUtils;
 import org.xml.sax.InputSource;
@@ -43,7 +44,7 @@ public class UserParameterXMLParser {
      *            name of the XML to load users parameter data
      * @return all users name value pairs obtained from XML file
      */
-    public List getXMLParameters(String xmlURI) throws SAXException, IOException {
+    public List<Map<String, String>> getXMLParameters(String xmlURI) throws SAXException, IOException {
         // create instances needed for parsing
         XMLReader reader = JMeterUtils.getXMLParser();
         // XMLReaderFactory.createXMLReader(vendorParseClass);

File: test/src/org/apache/jmeter/monitor/model/TestObjectFactory.java
Patch:
@@ -64,7 +64,7 @@ public static void main(String[] args) {
                     System.out.println(st.getJvm().getMemory().getTotal());
                     System.out.println(st.getJvm().getMemory().getMax());
                     System.out.println("connector size: " + st.getConnector().size());
-                    Connector conn = (Connector) st.getConnector().get(0);
+                    Connector conn = st.getConnector().get(0);
                     System.out.println("conn: " + conn.getThreadInfo().getMaxThreads());
                 }
             } catch (java.io.FileNotFoundException e) {

File: src/components/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -109,7 +109,7 @@ private void setNodePath() {
         setProperty(new CollectionProperty(NODE_PATH, nodePath));
     }
 
-    public List getNodePath() {
+    public List<?> getNodePath() {
         JMeterProperty prop = getProperty(NODE_PATH);
         if (!(prop instanceof NullProperty)) {
             return (List<?>) ((CollectionProperty) prop).getObjectValue();

File: src/components/org/apache/jmeter/modifiers/UserParameters.java
Patch:
@@ -73,7 +73,7 @@ public CollectionProperty getThreadLists() {
      * the same order as the sub lists that are given to
      * {@link #setThreadLists(Collection)}.
      */
-    public void setNames(Collection list) {
+    public void setNames(Collection<?> list) {
         setProperty(new CollectionProperty(NAMES, list));
     }
 
@@ -92,7 +92,7 @@ public void setNames(CollectionProperty list) {
      * values can be supplied in this fashion to cause JMeter to set different
      * values to variables for different test threads.
      */
-    public void setThreadLists(Collection threadLists) {
+    public void setThreadLists(Collection<?> threadLists) {
         setProperty(new CollectionProperty(THREAD_VALUES, threadLists));
     }
 

File: src/components/org/apache/jmeter/visualizers/DistributionGraph.java
Patch:
@@ -167,7 +167,7 @@ private void drawSample(SamplingStatCalculator p_model, Graphics g) {
             Number fifty = p_model.getPercentPoint(0.50);
 
             int total = p_model.getCount();
-            Collection values = p_model.getDistribution().values();
+            Collection<?> values = p_model.getDistribution().values();
             Object[] objval = new Object[values.size()];
             objval = values.toArray(objval);
             // we sort the objects

File: src/core/org/apache/jmeter/testelement/property/MapProperty.java
Patch:
@@ -76,9 +76,9 @@ public JMeterProperty get(String key) {
      * @see AbstractProperty#getPropertyType()
      */
     @Override
-    protected Class<?> getPropertyType() {
+    protected Class<? extends AbstractProperty> getPropertyType() {
         if (value.size() > 0) {
-            return valueIterator().next().getClass();
+            return (Class<? extends AbstractProperty>) valueIterator().next().getClass();
         }
         return NullProperty.class;
     }

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -788,7 +788,7 @@ public static Object setProperty(String propName, String propValue) {
      * namVec.
      * NOTUSED?
      */
-    public static void selJComboBoxItem(Properties properties, JComboBox combo, Vector namVec, String name) {
+    public static void selJComboBoxItem(Properties properties, JComboBox combo, Vector<?> namVec, String name) {
         int idx = namVec.indexOf(name);
         combo.setSelectedIndex(idx);
         // Redisplay.

File: src/components/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -112,7 +112,7 @@ private void setNodePath() {
     public List getNodePath() {
         JMeterProperty prop = getProperty(NODE_PATH);
         if (!(prop instanceof NullProperty)) {
-            return (List) ((CollectionProperty) prop).getObjectValue();
+            return (List<?>) ((CollectionProperty) prop).getObjectValue();
         }
         return null;
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPFileArgsPanel.java
Patch:
@@ -170,11 +170,11 @@ public void modifyTestElement(TestElement testElement) {
         if (testElement instanceof HTTPSamplerBase) {
             HTTPSamplerBase base = (HTTPSamplerBase) testElement;
             int rows = tableModel.getRowCount();
-            Iterator modelData = tableModel.iterator();
+            Iterator<HTTPFileArg> modelData = (Iterator<HTTPFileArg>) tableModel.iterator();
             HTTPFileArg[] files = new HTTPFileArg[rows];
             int row=0;
             while (modelData.hasNext()) {
-                HTTPFileArg file = (HTTPFileArg) modelData.next();
+                HTTPFileArg file = modelData.next();
                 files[row++]=file;
             }
             base.setHTTPFiles(files);

File: src/reports/org/apache/jmeter/testelement/AbstractTable.java
Patch:
@@ -142,6 +142,7 @@ public void addTestElement(TestElement el) {
      * need to filter the data in the list and return statistics.
      * The statistics should be like the aggregate listener.
      */
+    @SuppressWarnings("unchecked") // TODO fix this when there is a real implementation
     public abstract String[][] getTableData(List data);
 
 }

File: src/reports/org/apache/jmeter/testelement/Table.java
Patch:
@@ -29,6 +29,7 @@ public Table() {
      * for now the method isn't implemented. I still need to decide how
      * it should be implemented.
      */
+    @SuppressWarnings("unchecked") // TODO fix this when there is a real implementation
     @Override
     public String[][] getTableData(List data) {
         return new String[0][0];

File: src/jorphan/org/apache/jorphan/math/StatCalculator.java
Patch:
@@ -18,10 +18,10 @@
 
 package org.apache.jorphan.math;
 
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 
 /**
@@ -33,7 +33,7 @@
  * typed class.
  */
 public class StatCalculator {
-    List values = new ArrayList();
+    List values = new LinkedList();
 
     double sum = 0;
 

File: src/reports/org/apache/jmeter/report/DataSet.java
Patch:
@@ -99,10 +99,11 @@ public interface DataSet extends Visualizer {
      */
     public SamplingStatCalculator getStatistics(String url);
     /**
-     * Convienence method for getting all the SamplingStatCalculators for
+     * Convenience method for getting all the SamplingStatCalculators for
      * a given URL.
      * @param urls
      */
+    @SuppressWarnings("unchecked") // Method is broken anyway
     public List<SamplingStatCalculator> getStats(List urls);
     /**
      * Classes implementing the method should load the data from

File: src/components/org/apache/jmeter/modifiers/UserParameters.java
Patch:
@@ -111,7 +111,7 @@ private CollectionProperty getValues() {
         if (threadValues.size() > 0) {
             return (CollectionProperty) threadValues.get(getThreadContext().getThreadNum() % threadValues.size());
         }
-        return new CollectionProperty("noname", new LinkedList());
+        return new CollectionProperty("noname", new LinkedList<Object>());
     }
 
     public boolean isPerIteration() {

File: src/monitor/model/org/apache/jmeter/monitor/model/WorkersImpl.java
Patch:
@@ -24,17 +24,17 @@
  * @version $Revision$
  */
 public class WorkersImpl implements Workers {
-    private List worker = null;
+    private final List<Worker> worker;
 
     /**
      *
      */
     public WorkersImpl() {
         super();
-        worker = new LinkedList();
+        worker = new LinkedList<Worker>();
     }
 
-    public List getWorker() {
+    public List<Worker> getWorker() {
         return worker;
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPArgumentsPanel.java
Patch:
@@ -99,10 +99,10 @@ public HTTPArgumentsPanel() {
     @Override
     public TestElement createTestElement() {
         stopTableEditing();
-        Iterator modelData = tableModel.iterator();
+        Iterator<HTTPArgument> modelData = (Iterator<HTTPArgument>) tableModel.iterator();
         Arguments args = new Arguments();
         while (modelData.hasNext()) {
-            HTTPArgument arg = (HTTPArgument) modelData.next();
+            HTTPArgument arg = modelData.next();
             args.addArgument(arg);
         }
         this.configureTestElement(args);

File: src/reports/org/apache/jmeter/report/engine/ValueReplacer.java
Patch:
@@ -28,7 +28,7 @@
 public class ValueReplacer {
 //  private static final Logger log = LoggingManager.getLoggerForClass();
 
-    Map variables = new HashMap();
+    private Map<String, String> variables = new HashMap<String, String>();
 
     public ValueReplacer() {
     }
@@ -37,7 +37,7 @@ public ValueReplacer(ReportPlan tp) {
         setUserDefinedVariables(tp.getUserDefinedVariables());
     }
 
-    public void setUserDefinedVariables(Map variables) {
+    public void setUserDefinedVariables(Map<String, String> variables) {
         this.variables = variables;
     }
 
@@ -103,7 +103,7 @@ public void addVariable(String name, String value) {
      * @param vars
      *            A map of variable name-value pairs (String-to-String).
      */
-    public void addVariables(Map vars) {
+    public void addVariables(Map<String, String> vars) {
         variables.putAll(vars);
     }
 

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -367,7 +367,7 @@ public static void removeLocaleChangeListener(LocaleChangeListener listener) {
      */
     private static void notifyLocaleChangeListeners() {
         LocaleChangeEvent event = new LocaleChangeEvent(JMeterUtils.class, locale);
-        Iterator<LocaleChangeListener> iterator = ((Vector) localeChangeListeners.clone()).iterator();
+        Iterator<LocaleChangeListener> iterator = ((Vector<LocaleChangeListener>) localeChangeListeners.clone()).iterator();
 
         while (iterator.hasNext()) {
             LocaleChangeListener listener = iterator.next();

File: src/jorphan/org/apache/jorphan/logging/LoggingManager.java
Patch:
@@ -215,7 +215,7 @@ private static Writer makeWriter(String logFile, String propName) {
      * category.
      */
     public static void setLoggingLevels(Properties appProperties) {
-        Iterator props = appProperties.keySet().iterator();
+        Iterator<?> props = appProperties.keySet().iterator();
         while (props.hasNext()) {
             String prop = (String) props.next();
             if (prop.startsWith(LOG_PRIORITY + ".")) //$NON_NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java
Patch:
@@ -62,14 +62,14 @@ public class HeaderManager extends ConfigTestElement implements Serializable {
     private Object SOAPHeader = null;
 
     public HeaderManager() {
-        setProperty(new CollectionProperty(HEADERS, new ArrayList()));
+        setProperty(new CollectionProperty(HEADERS, new ArrayList<Object>()));
     }
 
     /** {@inheritDoc} */
     @Override
     public void clear() {
         super.clear();
-        setProperty(new CollectionProperty(HEADERS, new ArrayList()));
+        setProperty(new CollectionProperty(HEADERS, new ArrayList<Object>()));
     }
 
     /**

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -800,7 +800,7 @@ private void runNonGui(String testFile, String logFile, boolean remoteStart, Str
      * @param tree
      */
     public static void convertSubTree(HashTree tree) {
-        Iterator<?> iter = new LinkedList(tree.list()).iterator();
+        Iterator<Object> iter = new LinkedList<Object>(tree.list()).iterator();
         while (iter.hasNext()) {
             Object o = iter.next();
             if (o instanceof TestElement) {

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -415,7 +415,7 @@ public void run() {
         test.traverse(new TurnElementsOn());
         if (startListenersLater) { notifyTestListenersOfStart(testListeners); }
 
-        List testLevelElements = new LinkedList(test.list(test.getArray()[0]));
+        List<?> testLevelElements = new LinkedList<Object>(test.list(test.getArray()[0]));
         removeThreadGroups(testLevelElements);
         SearchByClass searcher = new SearchByClass(ThreadGroup.class);
         test.traverse(searcher);

File: src/core/org/apache/jmeter/engine/util/CompoundVariable.java
Patch:
@@ -156,7 +156,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler) {
 
     public CompoundVariable getFunction() {
         CompoundVariable func = new CompoundVariable();
-        func.compiledComponents = (LinkedList) compiledComponents.clone();
+        func.compiledComponents = (LinkedList<Object>) compiledComponents.clone();
         func.rawParameters = rawParameters;
         return func;
     }

File: src/core/org/apache/jmeter/gui/action/Copy.java
Patch:
@@ -105,7 +105,7 @@ public static JMeterTreeNode[] cloneTreeNodes(JMeterTreeNode nodes[]) {
     }
 
     private static void cloneChildren(JMeterTreeNode to, JMeterTreeNode from) {
-        Enumeration enumFrom = from.children();
+        Enumeration<?> enumFrom = from.children();
         while (enumFrom.hasMoreElements()) {
             JMeterTreeNode child = (JMeterTreeNode) enumFrom.nextElement();
             JMeterTreeNode childClone = (JMeterTreeNode) child.clone();

File: src/core/org/apache/jmeter/samplers/RemoteSampleListener.java
Patch:
@@ -46,7 +46,7 @@ public interface RemoteSampleListener extends java.rmi.Remote {
      *            the list of sample events to be fired locally.
      * @throws RemoteException
      */
-    public void processBatch(List samples) throws RemoteException;
+    public void processBatch(List<SampleEvent> samples) throws RemoteException;
 
     /**
      * A sample has started and stopped.

File: src/core/org/apache/jmeter/samplers/RemoteSampleListenerImpl.java
Patch:
@@ -87,11 +87,11 @@ public void testIterationStart(LoopIterationEvent event) {
      * @param samples
      *            the list of sample events to be fired locally
      */
-    public void processBatch(List samples) {
+    public void processBatch(List<SampleEvent> samples) {
         if (samples != null) {
-            Iterator iter = samples.iterator();
+            Iterator<SampleEvent> iter = samples.iterator();
             while (iter.hasNext()) {
-                SampleEvent e = (SampleEvent) iter.next();
+                SampleEvent e = iter.next();
                 sampleOccurred(e);
             }
         }

File: src/jorphan/org/apache/jorphan/gui/JLabeledField.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.util.List;
 
+import javax.swing.JComponent;
 import javax.swing.event.ChangeListener;
 
 /**
@@ -34,5 +35,5 @@ public interface JLabeledField {
 
     public void addChangeListener(ChangeListener pChangeListener);
 
-    public List getComponentList();
+    public List<JComponent> getComponentList();
 }
\ No newline at end of file

File: src/monitor/model/org/apache/jmeter/monitor/parser/MonitorHandler.java
Patch:
@@ -37,7 +37,7 @@
 public class MonitorHandler extends DefaultHandler {
     // private boolean startDoc = false;
     // private boolean endDoc = false;
-    private Stack stacktree = new Stack();
+    private Stack<Object> stacktree = new Stack<Object>();
 
     private ObjectFactory factory = null;
 
@@ -75,11 +75,13 @@ public void setObjectFactory(ObjectFactory factory) {
         this.factory = factory;
     }
 
+    /** {@inheritDoc} */
     @Override
     public void startDocument() throws SAXException {
         // this.startDoc = true;
     }
 
+    /** {@inheritDoc} */
     @Override
     public void endDocument() throws SAXException {
         // this.startDoc = false;

File: src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -82,6 +82,7 @@ public AuthManager() {
         setProperty(new CollectionProperty(AUTH_LIST, new ArrayList()));
     }
 
+    /** {@inheritDoc} */
     @Override
     public void clear() {
         super.clear();
@@ -196,6 +197,7 @@ public Authorization getAuthForURL(URL url) {
         return null;
     }
 
+    /** {@inheritDoc} */
     @Override
     public void addConfigElement(ConfigElement config) {
     }
@@ -208,6 +210,7 @@ public void addAuth() {
         getAuthObjects().addItem(new Authorization());
     }
 
+    /** {@inheritDoc} */
     @Override
     public boolean expectsModification() {
         return false;

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java
Patch:
@@ -65,6 +65,7 @@ public HeaderManager() {
         setProperty(new CollectionProperty(HEADERS, new ArrayList()));
     }
 
+    /** {@inheritDoc} */
     @Override
     public void clear() {
         super.clear();

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPArgument.java
Patch:
@@ -202,7 +202,7 @@ public String getEncodedName() {
     }
 
     public static void convertArgumentsToHTTP(Arguments args) {
-        List newArguments = new LinkedList();
+        List<Argument> newArguments = new LinkedList<Argument>();
         PropertyIterator iter = args.getArguments().iterator();
         while (iter.hasNext()) {
             Argument arg = (Argument) iter.next().getObjectValue();

File: src/protocol/java/org/apache/jmeter/protocol/java/test/JavaTest.java
Patch:
@@ -333,9 +333,9 @@ public void teardownTest(JavaSamplerContext context) {
      */
     private void listParameters(JavaSamplerContext context) {
         if (getLogger().isDebugEnabled()) {
-            Iterator argsIt = context.getParameterNamesIterator();
+            Iterator<String> argsIt = context.getParameterNamesIterator();
             while (argsIt.hasNext()) {
-                String name = (String) argsIt.next();
+                String name = argsIt.next();
                 getLogger().debug(name + "=" + context.getParameter(name));
             }
         }

File: src/core/org/apache/jmeter/gui/util/FileListPanel.java
Patch:
@@ -62,7 +62,7 @@ public class FileListPanel extends JPanel implements ActionListener {
 
     private JButton delete = new JButton(JMeterUtils.getResString("delete")); // $NON-NLS-1$
 
-    private List listeners = new LinkedList();
+    private List<ChangeListener> listeners = new LinkedList<ChangeListener>();
 
     private String title;
 
@@ -181,9 +181,9 @@ protected void deleteFile() {
     }
 
     private void fireFileChanged() {
-        Iterator iter = listeners.iterator();
+        Iterator<ChangeListener> iter = listeners.iterator();
         while (iter.hasNext()) {
-            ((ChangeListener) iter.next()).stateChanged(new ChangeEvent(this));
+            iter.next().stateChanged(new ChangeEvent(this));
         }
     }
 

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -48,7 +48,7 @@
 public class TestCompiler implements HashTreeTraverser {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private final LinkedList stack = new LinkedList();
+    private final LinkedList<Object> stack = new LinkedList<Object>();
 
     private final Map<Sampler, SamplePackage> samplerConfigMap = new HashMap<Sampler, SamplePackage>();
 

File: src/core/org/apache/jmeter/util/BSFBeanInfoSupport.java
Patch:
@@ -28,7 +28,7 @@
  */
 public abstract class BSFBeanInfoSupport extends BeanInfoSupport {
 
-    protected BSFBeanInfoSupport(Class beanClass) {
+    protected BSFBeanInfoSupport(Class<?> beanClass) {
         super(beanClass);
         PropertyDescriptor p;
 

File: src/core/org/apache/jmeter/util/BeanShellBeanInfoSupport.java
Patch:
@@ -28,7 +28,7 @@
  */
 public abstract class BeanShellBeanInfoSupport extends BeanInfoSupport {
 
-    protected BeanShellBeanInfoSupport(Class beanClass) {
+    protected BeanShellBeanInfoSupport(Class<?> beanClass) {
         super(beanClass);
         PropertyDescriptor p;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HttpClientDefaultParameters.java
Patch:
@@ -54,9 +54,9 @@ public static void load(String file, HttpParams params){
         try {
             is = new FileInputStream(f);
             props.load(is);
-            Iterator pi = props.entrySet().iterator();
+            Iterator<Map.Entry<Object, Object>> pi = props.entrySet().iterator();
             while(pi.hasNext()){
-                Map.Entry me = (Map.Entry) pi.next();
+                Map.Entry<Object, Object> me = pi.next();
                 String key = (String) me.getKey();
                 String value = (String)me.getValue();
                 int typeSep = key.indexOf("$"); // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/util/DOMPool.java
Patch:
@@ -43,7 +43,7 @@ public final class DOMPool {
      * test on an old system will likely run into memory or CPU problems long
      * before the HashMap is an issue.
      */
-    private static final HashMap MEMCACHE = new HashMap(50);
+    private static final HashMap<Object, Document> MEMCACHE = new HashMap<Object, Document>(50);
 
     /**
      * Return a document.
@@ -52,7 +52,7 @@ public final class DOMPool {
      * @return Document
      */
     public static synchronized Document getDocument(Object key) {
-        return (Document) MEMCACHE.get(key);
+        return MEMCACHE.get(key);
     }
 
     /**
@@ -61,7 +61,7 @@ public static synchronized Document getDocument(Object key) {
      * @param key
      * @param data
      */
-    public static synchronized void putDocument(Object key, Object data) {
+    public static synchronized void putDocument(Object key, Document data) {
         MEMCACHE.put(key, data);
     }
 

File: src/core/org/apache/jmeter/testelement/TestPlan.java
Patch:
@@ -55,7 +55,7 @@ public class TestPlan extends AbstractTestElement implements Serializable, TestL
 
     private final static String BASEDIR = "basedir";
 
-    private transient List threadGroups = new LinkedList();
+    private transient List<ThreadGroup> threadGroups = new LinkedList<ThreadGroup>();
 
     // Does not appear to be needed
 //  private transient List configs = new LinkedList();
@@ -96,7 +96,7 @@ public TestPlan(String name) {
 
     // create transient item
     private Object readResolve(){
-        threadGroups = new LinkedList();
+        threadGroups = new LinkedList<ThreadGroup>();
         return this;
     }
 
@@ -135,7 +135,7 @@ public Arguments getArguments() {
         return getVariables();
     }
 
-    public Map getUserDefinedVariables() {
+    public Map<String, String> getUserDefinedVariables() {
         Arguments args = getVariables();
         return args.getArgumentsAsMap();
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -112,7 +112,7 @@ public String getColumnName(int column) {
         return COLUMN_RESOURCE_NAMES[column];
     }
 
-    public Class getColumnClass(int column) {
+    public Class<?> getColumnClass(int column) {
         return COLUMN_RESOURCE_NAMES[column].getClass();
     }
 
@@ -124,7 +124,7 @@ public boolean isEditable() {
         return true;
     }
 
-    public Class getGuiClass() {
+    public Class<?> getGuiClass() {
         return org.apache.jmeter.protocol.http.gui.AuthPanel.class;
     }
 

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ClientPool.java
Patch:
@@ -32,9 +32,9 @@
  */
 public class ClientPool {
 
-    private static final ArrayList clients = new ArrayList();
+    private static final ArrayList<Object> clients = new ArrayList<Object>();
 
-    private static final HashMap client_map = new HashMap();
+    private static final HashMap<Object, Object> client_map = new HashMap<Object, Object>();
 
     /**
      * Add a ReceiveClient to the ClientPool. This is so that we can make sure
@@ -75,7 +75,7 @@ public static synchronized void addClient(Publisher client) {
      * bugs.
      */
     public static synchronized void clearClient() {
-        Iterator itr = clients.iterator();
+        Iterator<Object> itr = clients.iterator();
         while (itr.hasNext()) {
             Object client = itr.next();
             if (client instanceof ReceiveSubscriber) {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/MessageAdmin.java
Patch:
@@ -33,7 +33,7 @@
 public class MessageAdmin {
     private static final MessageAdmin SINGLETON = new MessageAdmin();
 
-    private Map table = new Hashtable();
+    private Map<String, PlaceHolder> table = new Hashtable<String, PlaceHolder>();
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
@@ -55,7 +55,7 @@ public void putRequest(String id, Message request) {
     }
 
     public void putReply(String id, Message reply) {
-        PlaceHolder holder = (PlaceHolder) table.get(id);
+        PlaceHolder holder = table.get(id);
         if (log.isDebugEnabled()) {
             log.debug("RPL_ID [" + id + "] for holder " + holder);
         }
@@ -77,7 +77,7 @@ public void putReply(String id, Message reply) {
      * @return the received message or <code>null</code>
      */
     public Message get(String id) {
-        PlaceHolder holder = (PlaceHolder) table.remove(id);
+        PlaceHolder holder = table.remove(id);
         if (log.isDebugEnabled()) {
             log.debug("GET_ID [" + id + "] for " + holder);
         }

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgumentsPanel.java
Patch:
@@ -132,9 +132,9 @@ public void modifyTestElement(TestElement args) {
         if (args instanceof LDAPArguments) {
             arguments = (LDAPArguments) args;
             arguments.clear();
-            Iterator modelData = tableModel.iterator();
+            Iterator<LDAPArgument> modelData = tableModel.iterator();
             while (modelData.hasNext()) {
-                LDAPArgument arg = (LDAPArgument) modelData.next();
+                LDAPArgument arg = modelData.next();
                 arg.setMetaData("=");
                 arguments.addArgument(arg);
             }

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapClient.java
Patch:
@@ -55,7 +55,7 @@ public LdapClient() {
      */
     public void connect(String host, String port, String rootdn, String username, String password)
             throws NamingException {
-        Hashtable env = new Hashtable();
+        Hashtable<String, String> env = new Hashtable<String, String>();
         env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory"); //$NON-NLS-1$
         env.put(Context.PROVIDER_URL, "ldap://" + host + ":" + port + "/" + rootdn); //$NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$
         env.put(Context.REFERRAL, "throw"); //$NON-NLS-1$
@@ -94,7 +94,7 @@ public boolean searchTest(String searchBase, String searchFilter) throws NamingE
                 null,// attributes (null = all)
                 false,// return object ?
                 false);// dereference links?
-        NamingEnumeration ne = dirContext.search(searchBase, searchFilter, searchcontrols);
+        NamingEnumeration<?> ne = dirContext.search(searchBase, searchFilter, searchcontrols);
         // System.out.println("Loop "+ne.toString()+" "+ne.hasMore());
         // while (ne.hasMore()){
         // Object tmp = ne.next();

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -251,7 +251,7 @@ public String getLabel() {
 
     private static final String protoPrefix = "org.apache.jmeter.protocol.tcp.sampler."; //$NON-NLS-1$
 
-    private Class getClass(String className) {
+    private Class<?> getClass(String className) {
         Class<?> c = null;
         try {
             c = Class.forName(className, false, Thread.currentThread().getContextClassLoader());

File: src/reports/org/apache/jmeter/report/gui/action/ReportSave.java
Patch:
@@ -126,9 +126,9 @@ public void doAction(ActionEvent e) throws IllegalUserActionException {
     }
 
     private void convertSubTree(HashTree tree) {
-        Iterator iter = new LinkedList(tree.list()).iterator();
+        Iterator<ReportTreeNode> iter = new LinkedList<ReportTreeNode>(tree.list()).iterator();
         while (iter.hasNext()) {
-            ReportTreeNode item = (ReportTreeNode) iter.next();
+            ReportTreeNode item = iter.next();
             convertSubTree(tree.getTree(item));
             TestElement testElement = item.getTestElement();
             tree.replace(item, testElement);

File: test/src/org/apache/jmeter/config/TestCVSDataSet.java
Patch:
@@ -105,7 +105,7 @@ public void testShareMode(){
         JMeterVariables threadVars = jmcx.getVariables();
         threadVars.put("b", "value");
         
-        CSVDataSetBeanInfo cbi = new CSVDataSetBeanInfo(); // needs to be initialised
+        new CSVDataSetBeanInfo(); // needs to be initialised
         CSVDataSet csv0 = initCSV();
         CSVDataSet csv1 = initCSV();
         assertNull(csv1.getShareMode());

File: test/src/org/apache/jmeter/control/TestRandomOrderController.java
Patch:
@@ -37,7 +37,7 @@ public void testRandomOrder() {
             roc.addTestElement(new TestSampler("two"));
             roc.addTestElement(new TestSampler("three"));
             TestElement sampler = null;
-            List usedSamplers = new ArrayList();
+            List<String> usedSamplers = new ArrayList<String>();
             roc.initialize();
             while ((sampler = roc.next()) != null) {
                 String samplerName = sampler.getName();
@@ -59,7 +59,7 @@ public void testRandomOrderOneElement() {
             RandomOrderController roc = new RandomOrderController();
             roc.addTestElement(new TestSampler("zero"));
             TestElement sampler = null;
-            List usedSamplers = new ArrayList();
+            List<String> usedSamplers = new ArrayList<String>();
             roc.initialize();
             while ((sampler = roc.next()) != null) {
                 String samplerName = sampler.getName();

File: test/src/org/apache/jmeter/control/TestSwitchController.java
Patch:
@@ -252,7 +252,7 @@ private void runTest2(String cond, String exp[]) throws Exception {
         */
         public void testFunction() throws Exception {
             JMeterContext jmctx = JMeterContextService.getContext();
-            Map variables = new HashMap();
+            Map<?, ?> variables = new HashMap<Object, Object>();
             ReplaceStringWithFunctions transformer = new ReplaceStringWithFunctions(new CompoundVariable(), variables);
             jmctx.setVariables(new JMeterVariables());
             JMeterVariables jmvars = jmctx.getVariables();

File: test/src/org/apache/jmeter/engine/util/PackageTest.java
Patch:
@@ -37,7 +37,7 @@
  * as it is needed to resolve the functions.
  */
 public class PackageTest extends JMeterTestCase {
-    private Map variables;
+    private Map<String, String> variables;
 
     private SampleResult result;
 
@@ -52,7 +52,7 @@ public PackageTest(String arg0) {
     @Override
     public void setUp() {
         jmctx = JMeterContextService.getContext();
-        variables = new HashMap();
+        variables = new HashMap<String, String>();
         variables.put("my_regex", ".*");
         variables.put("server", "jakarta.apache.org");
         result = new SampleResult();

File: test/src/org/apache/jmeter/engine/util/TestValueReplacer.java
Patch:
@@ -59,13 +59,13 @@ public void testReverseReplacement() throws Exception {
             assertTrue(replacer.containsKey("server"));
             TestElement element = new TestPlan();
             element.setProperty(new StringProperty("domain", "jakarta.apache.org"));
-            List args = new ArrayList();
+            List<Object> args = new ArrayList<Object>();
             args.add("username is jack");
             args.add("his_password");
             element.setProperty(new CollectionProperty("args", args));
             replacer.reverseReplace(element);
             assertEquals("${server}", element.getPropertyAsString("domain"));
-            args = (List) element.getProperty("args").getObjectValue();
+            args = (List<Object>) element.getProperty("args").getObjectValue();
             assertEquals("username is ${username}", ((JMeterProperty) args.get(0)).getStringValue());
             assertEquals("${password}", ((JMeterProperty) args.get(1)).getStringValue());
         }

File: test/src/org/apache/jmeter/functions/TestJexlFunction.java
Patch:
@@ -33,7 +33,7 @@ public class TestJexlFunction extends JMeterTestCase {
 
     SampleResult result;
 
-    Collection params;
+    Collection<CompoundVariable> params;
 
     private JMeterVariables vars;
 
@@ -53,7 +53,7 @@ public void setUp() {
         vars = new JMeterVariables();
         jmctx.setVariables(vars);
         jmctx.setPreviousResult(result);
-        params = new LinkedList();
+        params = new LinkedList<CompoundVariable>();
     }
 
     public void testParameterCount() throws Exception {

File: test/src/org/apache/jmeter/functions/TestTimeFunction.java
Patch:
@@ -34,7 +34,7 @@ public class TestTimeFunction extends JMeterTestCase {
 
         private SampleResult result;
 
-        private Collection params;
+        private Collection<CompoundVariable> params;
 
         private JMeterVariables vars;
 
@@ -52,7 +52,7 @@ public void setUp() {
             vars = new JMeterVariables();
             jmctx.setVariables(vars);
             jmctx.setPreviousResult(result);
-            params = new LinkedList();
+            params = new LinkedList<CompoundVariable>();
             result = new SampleResult();
             variable = new TimeFunction();
         }

File: test/src/org/apache/jmeter/protocol/http/sampler/NullURLConnection.java
Patch:
@@ -21,7 +21,6 @@
 import java.net.URL;
 import java.net.URLConnection;
 import java.net.MalformedURLException;
-import java.util.Map;
 import java.util.Properties;
 
 /**
@@ -31,7 +30,7 @@
  */
 public final class NullURLConnection extends URLConnection {
 
-    private Map data = new Properties();
+    private Properties data = new Properties();
 
     public NullURLConnection() throws MalformedURLException {
         this(new URL("http://localhost"));

File: test/src/org/apache/jmeter/protocol/http/sampler/PostWriterTest.java
Patch:
@@ -882,7 +882,7 @@ private void checkContentLength(HttpURLConnection conn, int length) {
      */
     private static class StubURLConnection extends HttpURLConnection {
         private ByteArrayOutputStream output = new ByteArrayOutputStream();
-        private Map properties = new HashMap();
+        private Map<String, String> properties = new HashMap<String, String>();
         
         public StubURLConnection(String url) throws MalformedURLException {
             super(new URL(url));
@@ -908,7 +908,7 @@ public boolean usingProxy() {
 
         @Override
         public String getRequestProperty(String key) {
-            return (String) properties.get(key);
+            return properties.get(key);
         }
 
         @Override

File: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
Patch:
@@ -748,7 +748,7 @@ private void checkPostRequestFormMultipart(
         else {
             fail("No header and body section found");
         }
-        // Check response headers
+         // Check response headers
         checkHeaderTypeLength(headersSent, "multipart/form-data" + "; boundary=" + boundaryString, expectedPostBody.length);
         // Check post body which was sent to the mirror server, and
         // sent back by the mirror server

File: test/src/org/apache/jmeter/protocol/http/util/TestHTTPFileArgs.java
Patch:
@@ -55,7 +55,7 @@ public void testAdding() throws Exception {
     }
 
     public void testSetHTTPFileArgs() throws Exception {
-        List newHTTPFileArgs = new LinkedList();
+        List<HTTPFileArg> newHTTPFileArgs = new LinkedList<HTTPFileArg>();
         newHTTPFileArgs.add(new HTTPFileArg("hede"));
         HTTPFileArgs files = new HTTPFileArgs();
         files.setHTTPFileArgs(newHTTPFileArgs);

File: test/src/org/apache/jmeter/testelement/BarChartTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import javax.swing.JComponent;
 
+import org.apache.jmeter.report.DataSet;
 import org.apache.jmeter.save.SaveGraphicsService;
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.util.JMeterUtils;
@@ -56,7 +57,7 @@ public void testGenerateBarChart() {
         assertTrue((input.getEndTimestamp() > input.getStartTimestamp()));
         assertTrue((input.getURLs().size() > 0));
         log.info("URL count=" + input.getURLs().size());
-        java.util.ArrayList list = new java.util.ArrayList();
+        java.util.ArrayList<DataSet> list = new java.util.ArrayList<DataSet>();
         list.add(input);
         list.add(input2);
         list.add(input3);

File: test/src/org/apache/jmeter/testelement/LineGraphTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import javax.swing.JComponent;
 
+import org.apache.jmeter.report.DataSet;
 import org.apache.jmeter.save.SaveGraphicsService;
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.util.JMeterUtils;
@@ -56,7 +57,7 @@ public void testGenerateLineChart() {
         assertTrue((input.getEndTimestamp() > input.getStartTimestamp()));
         assertTrue((input.getURLs().size() > 0));
         log.info("URL count=" + input.getURLs().size());
-        java.util.ArrayList list = new java.util.ArrayList();
+        java.util.ArrayList<DataSet> list = new java.util.ArrayList<DataSet>();
         list.add(input);
         list.add(input2);
         list.add(input3);

File: test/src/org/apache/jorphan/collections/PackageTest.java
Patch:
@@ -33,7 +33,7 @@ public PackageTest(String name) {
 
         public void testAdd1() throws Exception {
             Logger log = LoggingManager.getLoggerForClass();
-            Collection treePath = Arrays.asList(new String[] { "1", "2", "3", "4" });
+            Collection<String> treePath = Arrays.asList(new String[] { "1", "2", "3", "4" });
             HashTree tree = new HashTree();
             log.debug("treePath = " + treePath);
             tree.add(treePath, "value");

File: src/core/org/apache/jmeter/gui/SavePropertyDialog.java
Patch:
@@ -54,7 +54,7 @@ public class SavePropertyDialog extends JDialog implements ActionListener {
 
     private static final long serialVersionUID = 232L;
 
-    private static final Map functors = new HashMap();
+    private static final Map<String, Functor> functors = new HashMap<String, Functor>();
 
     private static final String NAME_SAVE_PFX   = "save";  // $NON-NLS-1$ i.e. boolean saveXXX()
     private static final String NAME_SET_PREFIX = "set";   // $NON-NLS-1$ i.e. void setXXX(boolean)
@@ -143,7 +143,7 @@ public void actionPerformed(ActionEvent e) {
      */
     public void actionPerformed(ActionEvent e) {
         String action = e.getActionCommand();
-        Functor f = (Functor) functors.get(action);
+        Functor f = functors.get(action);
         f.invoke(saveConfig, new Object[] {
                 Boolean.valueOf(((JCheckBox) e.getSource()).isSelected()) });
     }

File: src/core/org/apache/jmeter/save/TestElementSaver.java
Patch:
@@ -36,7 +36,8 @@
 public class TestElementSaver implements TestElementTraverser {
     private String name;
 
-    private LinkedList stack = new LinkedList();
+    // DefaultConfiguration or String
+    private LinkedList<Object> stack = new LinkedList<Object>();
 
     private DefaultConfiguration rootConfig = null;
 
@@ -175,7 +176,7 @@ public void startProperty(JMeterProperty key) {
         } else if (key instanceof MapProperty) {
             startMap((MapProperty) key);
         } else if (key instanceof TestElementProperty) {
-            stack.addLast(key.getName());
+            stack.addLast(key.getName()); // TODO: why do we add a String here?
         } else {
             DefaultConfiguration config = new DefaultConfiguration("property", "property");
             config.setValue(key.getStringValue());

File: src/jorphan/org/apache/jorphan/gui/DefaultTreeTableModel.java
Patch:
@@ -51,7 +51,7 @@ public DefaultTreeTableModel(TreeNode root, boolean editable) {
      * @param editorClasses
      */
     public DefaultTreeTableModel(String[] headers, Functor[] readFunctors,
-            Functor[] writeFunctors, Class[] editorClasses) {
+            Functor[] writeFunctors, Class<?>[] editorClasses) {
         super(headers, readFunctors, writeFunctors, editorClasses);
     }
 

File: src/jorphan/org/apache/jorphan/gui/JTreeTable.java
Patch:
@@ -58,7 +58,7 @@ public JTreeTable(Object[][] rowData, Object[] columnNames) {
      * @param rowData
      * @param columnNames
      */
-    public JTreeTable(Vector rowData, Vector columnNames) {
+    public JTreeTable(Vector<?> rowData, Vector<?> columnNames) {
         super(rowData, columnNames);
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java
Patch:
@@ -292,7 +292,7 @@ public boolean isCellEditable(int row, int column) {
         }
 
         @Override
-        public Class getColumnClass(int column) {
+        public Class<?> getColumnClass(int column) {
             return getValueAt(0, column).getClass();
         }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSamplerBeanInfo.java
Patch:
@@ -58,7 +58,7 @@ public AccessLogSamplerBeanInfo() {
             p.setValue(DEFAULT, AccessLogSampler.DEFAULT_CLASS);
             p.setValue(NOT_OTHER, Boolean.TRUE);
             p.setValue(NOT_EXPRESSION, Boolean.TRUE);
-            final List logParserClasses = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { LogParser.class });
+            final List<String> logParserClasses = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { LogParser.class });
             if (log.isDebugEnabled()) {
                 log.debug("found parsers: " + logParserClasses);
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPResultConverter.java
Patch:
@@ -60,6 +60,7 @@ public HTTPResultConverter(Mapper arg0) {
      *
      * @see com.thoughtworks.xstream.converters.Converter#canConvert(java.lang.Class)
      */
+    @SuppressWarnings("unchecked") // superclass does not support types
     @Override
     public boolean canConvert(Class arg0) {
         return HTTPSampleResult.class.equals(arg0);

File: src/reports/org/apache/jmeter/report/ReportChart.java
Patch:
@@ -28,5 +28,5 @@ public interface ReportChart {
      * @param data list of DataSet
      * @return the component
      */
-    JComponent renderChart(List data);
+    JComponent renderChart(List<DataSet> data);
 }

File: src/reports/org/apache/jmeter/testelement/AbstractChart.java
Patch:
@@ -22,6 +22,7 @@
 
 import javax.swing.JComponent;
 
+import org.apache.jmeter.report.DataSet;
 import org.apache.jmeter.report.ReportChart;
 import org.apache.jmeter.visualizers.SamplingStatCalculator;
 import org.apache.jorphan.util.JOrphanUtils;
@@ -187,7 +188,7 @@ public void setHeight(String height) {
      * 3. pass the data to the chart library
      * 4. return the generated chart
      */
-    public abstract JComponent renderChart(List data);
+    public abstract JComponent renderChart(List<DataSet> data);
 
     /**
      * this makes it easy to get the bufferedImage

File: src/reports/org/apache/jmeter/testelement/LineChart.java
Patch:
@@ -72,7 +72,7 @@ private double[][] convertToDouble(List<DataSet> data) {
     }
 
     @Override
-    public JComponent renderChart(List dataset) {
+    public JComponent renderChart(List<DataSet> dataset) {
         ArrayList<DataSet> dset = new ArrayList<DataSet>();
         ArrayList<String> xlabels = new ArrayList<String>();
         Iterator<DataSet> itr = dataset.iterator();

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParserHTMLParser.java
Patch:
@@ -68,7 +68,7 @@ protected boolean isReusable() {
      *      java.net.URL)
      */
     @Override
-    public Iterator getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection urls) throws HTMLParseException {
+    public Iterator<URL> getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection urls) throws HTMLParseException {
 
         if (log.isDebugEnabled()) {
             log.debug("Parsing html of: " + baseUrl);

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/JTidyHTMLParser.java
Patch:
@@ -56,7 +56,7 @@ protected boolean isReusable() {
      *      java.net.URL)
      */
     @Override
-    public Iterator getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection urls) throws HTMLParseException {
+    public Iterator<URL> getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection urls) throws HTMLParseException {
         Document dom = null;
         try {
             dom = (Document) getDOM(html);

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/RegexpHTMLParser.java
Patch:
@@ -142,7 +142,7 @@ protected RegexpHTMLParser() {
      *      java.net.URL)
      */
     @Override
-    public Iterator getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection urls) {
+    public Iterator<URL> getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection urls) {
 
         Perl5Matcher matcher = JMeterUtils.getMatcher();
         PatternMatcherInput input = localInput.get();

File: src/protocol/java/org/apache/jmeter/protocol/java/config/gui/JavaConfigGui.java
Patch:
@@ -166,7 +166,7 @@ public void actionPerformed(ActionEvent evt) {
 
                 Arguments currArgs = new Arguments();
                 argsPanel.modifyTestElement(currArgs);
-                Map currArgsMap = currArgs.getArgumentsAsMap();
+                Map<String, String> currArgsMap = currArgs.getArgumentsAsMap();
 
                 Arguments newArgs = new Arguments();
                 Arguments testParams = null;
@@ -190,7 +190,7 @@ public void actionPerformed(ActionEvent evt) {
                         // parameters, those parameters should have the same
                         // values that they did in the original test.
                         if (currArgsMap.containsKey(name)) {
-                            String newVal = (String) currArgsMap.get(name);
+                            String newVal = currArgsMap.get(name);
                             if (newVal != null && newVal.length() > 0) {
                                 value = newVal;
                             }

File: src/protocol/java/org/apache/jmeter/protocol/java/control/gui/BSFSamplerGui.java
Patch:
@@ -145,9 +145,9 @@ private JPanel createLanguagePanel() {
         Properties p = JMeterUtils.loadProperties("org/apache/bsf/Languages.properties"); // $NON-NLS-1$
         // We have added Jexl in BSFSampler.
         p.put("jexl", ""); // $NON-NLS-1$
-        Set keySet = p.keySet();
+        Set<Object> keySet = p.keySet();
         // TODO - perhaps weed out ones which don't exist?
-        String [] items = (String[]) keySet.toArray(new String[]{});
+        String [] items = keySet.toArray(new String[]{});
         Arrays.sort(items);
 
         langField = new JComboBox(items);

File: src/components/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -98,7 +98,7 @@ public JMeterTreeNode getSelectedNode() {
     }
 
     private void setNodePath() {
-        List nodePath = new ArrayList();
+        List<String> nodePath = new ArrayList<String>();
         if (selectedNode != null) {
             TreeNode[] path = selectedNode.getPath();
             for (int i = 0; i < path.length; i++) {

File: src/core/org/apache/jmeter/NewDriver.java
Patch:
@@ -50,7 +50,7 @@ public final class NewDriver {
     private static final String jmDir;
 
     static {
-        List jars = new LinkedList();
+        List<URL> jars = new LinkedList<URL>();
         final String initial_classpath = System.getProperty(JAVA_CLASS_PATH);
 
         // Find JMeter home dir from the initial classpath
@@ -120,7 +120,7 @@ public boolean accept(File dir, String name) {// only accept jar files
 
         // ClassFinder needs the classpath
         System.setProperty(JAVA_CLASS_PATH, initial_classpath + classpath.toString());
-        loader = new DynamicClassLoader((URL[]) jars.toArray(new URL[0]));
+        loader = new DynamicClassLoader(jars.toArray(new URL[0]));
     }
 
     /**
@@ -196,7 +196,7 @@ public static void main(String[] args) {
         }
 
         try {
-            Class initialClass;
+            Class<?> initialClass;
             if (args != null && args.length > 0 && args[0].equals("report")) {// $NON-NLS-1$
                 initialClass = loader.loadClass("org.apache.jmeter.JMeterReport");// $NON-NLS-1$
             } else {

File: src/core/org/apache/jmeter/config/Arguments.java
Patch:
@@ -77,9 +77,9 @@ public void setArguments(List arguments) {
      *
      * @return a new Map with String keys and values containing the arguments
      */
-    public Map getArgumentsAsMap() {
+    public Map<String, String> getArgumentsAsMap() {
         PropertyIterator iter = getArguments().iterator();
-        Map argMap = new LinkedHashMap();
+        Map<String, String> argMap = new LinkedHashMap<String, String>();
         while (iter.hasNext()) {
             Argument arg = (Argument) iter.next().getObjectValue();
             // Because CollectionProperty.mergeIn will not prevent adding two

File: src/functions/org/apache/jmeter/functions/FileToString.java
Patch:
@@ -50,7 +50,7 @@
 public class FileToString extends AbstractFunction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final List desc = new LinkedList();
+    private static final List<String> desc = new LinkedList<String>();
 
     private static final String KEY = "__FileToString";//$NON-NLS-1$
 
@@ -112,7 +112,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
     /** {@inheritDoc} */
     @Override
-    public synchronized void setParameters(Collection parameters) throws InvalidVariableException {
+    public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException {
         checkParameterCount(parameters, MIN_PARAM_COUNT, MAX_PARAM_COUNT);
         values = parameters.toArray();
     }
@@ -124,7 +124,7 @@ public String getReferenceKey() {
     }
 
     /** {@inheritDoc} */
-    public List getArgumentDesc() {
+    public List<String> getArgumentDesc() {
         return desc;
     }
 }
\ No newline at end of file

File: src/components/org/apache/jmeter/visualizers/PropertyControlGui.java
Patch:
@@ -99,7 +99,7 @@ public String getLabelResource() {
     }
 
     @Override
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.NON_TEST_ELEMENTS });
     }
 

File: src/core/org/apache/jmeter/assertions/gui/AbstractAssertionGui.java
Patch:
@@ -65,7 +65,7 @@ public JPopupMenu createPopupMenu() {
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.ASSERTIONS });
     }
     

File: src/core/org/apache/jmeter/config/gui/AbstractConfigGui.java
Patch:
@@ -56,7 +56,7 @@ public JPopupMenu createPopupMenu() {
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.CONFIG_ELEMENTS });
     }
 }

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -131,7 +131,7 @@ public ArgumentsPanel(String label, Color bkg) {
      *         constants defined in MenuFactory
      */
     @Override
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         if (standalone) {
             return super.getMenuCategories();
         }

File: src/core/org/apache/jmeter/config/gui/ObsoleteGui.java
Patch:
@@ -63,7 +63,7 @@ public JPopupMenu createPopupMenu() {
         return null;
     }
 
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return null;
     }
 

File: src/core/org/apache/jmeter/control/gui/AbstractControllerGui.java
Patch:
@@ -55,7 +55,7 @@ public JPopupMenu createPopupMenu() {
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.CONTROLLERS });
     }
 }

File: src/core/org/apache/jmeter/control/gui/TestPlanGui.java
Patch:
@@ -128,7 +128,7 @@ public String getLabelResource() {
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return null;
     }
 

File: src/core/org/apache/jmeter/control/gui/WorkBenchGui.java
Patch:
@@ -53,7 +53,7 @@ public WorkBenchGui() {
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return null;
     }
 

File: src/core/org/apache/jmeter/gui/JMeterGUIComponent.java
Patch:
@@ -176,7 +176,7 @@ public interface JMeterGUIComponent {
      *
      * @see org.apache.jmeter.gui.util.MenuFactory
      */
-    Collection getMenuCategories();
+    Collection<String> getMenuCategories();
 
     /**
      * Sets the tree node which this component is associated with.

File: src/core/org/apache/jmeter/processor/gui/AbstractPostProcessorGui.java
Patch:
@@ -34,7 +34,7 @@ public JPopupMenu createPopupMenu() {
         return MenuFactory.getDefaultExtractorMenu();
     }
 
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.POST_PROCESSORS });
     }
 }

File: src/core/org/apache/jmeter/processor/gui/AbstractPreProcessorGui.java
Patch:
@@ -32,7 +32,7 @@ public JPopupMenu createPopupMenu() {
         return MenuFactory.getDefaultExtractorMenu();
     }
 
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.PRE_PROCESSORS });
     }
 

File: src/core/org/apache/jmeter/samplers/gui/AbstractSamplerGui.java
Patch:
@@ -55,7 +55,7 @@ public JPopupMenu createPopupMenu() {
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.SAMPLERS });
     }
 }

File: src/core/org/apache/jmeter/threads/gui/ThreadGroupGui.java
Patch:
@@ -89,7 +89,7 @@ public ThreadGroupGui() {
         initGui();
     }
 
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return null;
     }
 

File: src/core/org/apache/jmeter/timers/gui/AbstractTimerGui.java
Patch:
@@ -56,7 +56,7 @@ public JPopupMenu createPopupMenu() {
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.TIMERS });
     }
 }
\ No newline at end of file

File: src/core/org/apache/jmeter/visualizers/gui/AbstractListenerGui.java
Patch:
@@ -55,7 +55,7 @@ public JPopupMenu createPopupMenu() {
      * @return a Collection of Strings, where each element is one of the
      *         constants defined in MenuFactory
      */
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.LISTENERS });
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpMirrorControlGui.java
Patch:
@@ -89,7 +89,7 @@ public String getLabelResource() {
     }
 
     @Override
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { MenuFactory.NON_TEST_ELEMENTS });
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -85,7 +85,7 @@ public class CookiePanel extends AbstractConfigGui implements ActionListener {
         // removed expiration because it's just an annoyance for static cookies
     };
 
-    private static final Class[] columnClasses = {
+    private static final Class<?>[] columnClasses = {
         String.class,
         String.class,
         String.class,

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgumentsPanel.java
Patch:
@@ -108,7 +108,7 @@ public LDAPArgumentsPanel(String label) {
      *         constants defined in MenuFactory
      */
     @Override
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return null;
     }
 
@@ -128,11 +128,11 @@ public TestElement createTestElement() {
     /* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
     public void modifyTestElement(TestElement args) {
         stopTableEditing();
-        Iterator modelData = tableModel.iterator();
         LDAPArguments arguments = null;
         if (args instanceof LDAPArguments) {
             arguments = (LDAPArguments) args;
             arguments.clear();
+            Iterator modelData = tableModel.iterator();
             while (modelData.hasNext()) {
                 LDAPArgument arg = (LDAPArgument) modelData.next();
                 arg.setMetaData("=");

File: src/reports/org/apache/jmeter/control/gui/ReportGui.java
Patch:
@@ -121,7 +121,7 @@ public String getLabelResource() {
      *         constants defined in MenuFactory
      */
     @Override
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return null;
     }
 

File: src/reports/org/apache/jmeter/report/gui/AbstractReportGui.java
Patch:
@@ -79,7 +79,7 @@ public JPopupMenu createPopupMenu() {
     /* (non-Javadoc)
      * @see org.apache.jmeter.gui.JMeterGUIComponent#getMenuCategories()
      */
-    public Collection getMenuCategories() {
+    public Collection<String> getMenuCategories() {
         return Arrays.asList(new String[] { ReportMenuFactory.TABLES });
     }
 

File: src/reports/org/apache/jmeter/report/gui/action/AbstractAction.java
Patch:
@@ -44,7 +44,7 @@ public void doAction(ActionEvent e) {
     /**
      * @see Command#getActionNames()
      */
-    abstract public Set getActionNames();
+    abstract public Set<String> getActionNames();
 
     /**
      * @param e

File: src/reports/org/apache/jmeter/report/gui/action/ReportAddParent.java
Patch:
@@ -33,7 +33,7 @@
 public class ReportAddParent implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
     static {
         commands.add("Add Parent");
     }
@@ -53,7 +53,7 @@ public void doAction(ActionEvent e) {
 
     }
 
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/reports/org/apache/jmeter/report/gui/action/ReportAddToTree.java
Patch:
@@ -36,10 +36,10 @@
 public class ReportAddToTree implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private Map allJMeterComponentCommands;
+    private Map<String, String> allJMeterComponentCommands;
 
     public ReportAddToTree() {
-        allJMeterComponentCommands = new HashMap();
+        allJMeterComponentCommands = new HashMap<String, String>();
         allJMeterComponentCommands.put("Add", "Add");
     }
 
@@ -48,7 +48,7 @@ public ReportAddToTree() {
      *
      * @return the ActionNames value
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return allJMeterComponentCommands.keySet();
     }
 

File: src/reports/org/apache/jmeter/report/gui/action/ReportClose.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class ReportClose implements Command {
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
     static {
         commands.add("close");
     }
@@ -52,7 +52,7 @@ public ReportClose() {
      *
      * @return the ActionNames value
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/reports/org/apache/jmeter/report/gui/action/ReportCopy.java
Patch:
@@ -36,7 +36,7 @@ public class ReportCopy extends AbstractAction {
 
     private static final String COPY = "Copy";
 
-    private static final HashSet commands = new HashSet();
+    private static final HashSet<String> commands = new HashSet<String>();
     static {
         commands.add(COPY);
     }
@@ -45,7 +45,7 @@ public class ReportCopy extends AbstractAction {
      * @see org.apache.jmeter.report.gui.action.Command#getActionNames()
      */
     @Override
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/reports/org/apache/jmeter/report/gui/action/ReportCut.java
Patch:
@@ -29,7 +29,7 @@
 public class ReportCut extends AbstractAction {
     public static final String CUT = "Cut";//$NON-NLS-1$
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
     static {
         commands.add(CUT);
     }
@@ -38,7 +38,7 @@ public class ReportCut extends AbstractAction {
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
     @Override
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/reports/org/apache/jmeter/report/gui/action/ReportDragNDrop.java
Patch:
@@ -39,7 +39,7 @@ public class ReportDragNDrop extends AbstractAction {
 
     public static final String INSERT_AFTER = "drag_n_drop.insert_after";//$NON-NLS-1$
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
     static {
         commands.add(ADD);
         commands.add(INSERT_BEFORE);
@@ -123,7 +123,7 @@ protected void removeNodesFromParents(ReportTreeNode[] nodes) {
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
     @Override
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 }

File: src/reports/org/apache/jmeter/report/gui/action/ReportEditCommand.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.jmeter.gui.NamePanel;
 
 public class ReportEditCommand implements Command {
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
     static {
         commands.add("edit");
     }
@@ -51,7 +51,7 @@ public void doAction(ActionEvent e) {
         }
     }
 
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 }

File: src/reports/org/apache/jmeter/report/gui/action/ReportEnableComponent.java
Patch:
@@ -35,7 +35,7 @@ public class ReportEnableComponent implements Command {
 
     public static final String DISABLE = "disable";
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
     static {
         commands.add(ENABLE);
         commands.add(DISABLE);
@@ -67,7 +67,7 @@ private void enableComponents(ReportTreeNode[] nodes, boolean enable) {
     /**
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 }

File: src/reports/org/apache/jmeter/report/gui/action/ReportExitCommand.java
Patch:
@@ -34,7 +34,7 @@ public class ReportExitCommand implements Command {
 
     public static final String EXIT = "exit";
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
     static {
         commands.add(EXIT);
     }
@@ -50,7 +50,7 @@ public ReportExitCommand() {
      *
      * @return The ActionNames value
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/reports/org/apache/jmeter/report/gui/action/ReportHelp.java
Patch:
@@ -41,7 +41,7 @@ public class ReportHelp implements Command {
 
     public static final String HELP = "help";
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     public static final String HELP_DOCS = "file:///" + JMeterUtils.getJMeterHome() + "/printable_docs/usermanual/";
 
@@ -115,7 +115,7 @@ private void resetPage(String source) {
     /**
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 }

File: src/reports/org/apache/jmeter/report/gui/action/ReportLoad.java
Patch:
@@ -49,7 +49,7 @@ public class ReportLoad implements Command {
 
     XStream loadService = new XStream();
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
     static {
         commands.add("open");
         commands.add("merge");
@@ -59,7 +59,7 @@ public ReportLoad() {
         super();
     }
 
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/reports/org/apache/jmeter/report/gui/action/ReportPaste.java
Patch:
@@ -35,7 +35,7 @@ public class ReportPaste extends AbstractAction {
 
     public static final String PASTE = "Paste"; //$NON-NLS-1$
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
     static {
         commands.add(PASTE);
     }
@@ -44,7 +44,7 @@ public class ReportPaste extends AbstractAction {
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
     @Override
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/reports/org/apache/jmeter/report/gui/action/ReportRemove.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.jmeter.testelement.TestElement;
 
 public class ReportRemove implements Command {
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
     static {
         commands.add("remove");
     }
@@ -48,7 +48,7 @@ public ReportRemove() {
      *
      * @return the ActionNames value
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/reports/org/apache/jmeter/report/gui/action/ReportSave.java
Patch:
@@ -52,7 +52,7 @@ public class ReportSave implements Command {
 
     // NOTUSED private String chosenFile;
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
     static {
         commands.add(SAVE_AS);
         commands.add(SAVE_ALL_AS);
@@ -70,7 +70,7 @@ public ReportSave() {
      *
      * @return the ActionNames value
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/reports/org/apache/jmeter/report/gui/action/ReportSaveGraphics.java
Patch:
@@ -48,7 +48,7 @@ public class ReportSaveGraphics implements Command {
 
     public static final String SAVE_GRAPHICS = "save_graphics"; // $NON-NLS-1$
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
     static {
         commands.add(SAVE_GRAPHICS);
     }
@@ -66,7 +66,7 @@ public ReportSaveGraphics() {
      *
      * @return the ActionNames value
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/reports/org/apache/jmeter/report/gui/action/ReportStart.java
Patch:
@@ -31,7 +31,7 @@
 public class ReportStart extends AbstractAction {
     //private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
     static {
         commands.add(ActionNames.ACTION_START);
         commands.add(ActionNames.ACTION_STOP);
@@ -52,7 +52,7 @@ public ReportStart() {
      * @return the ActionNames value
      */
     @Override
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: test/src/org/apache/jmeter/gui/action/TestLoad.java
Patch:
@@ -40,7 +40,7 @@ public class TestLoad extends JMeterTestCase {
     private static final File testfiledir = new File(basedir,"bin/testfiles");
     private static final File demofiledir = new File(basedir,"xdocs/demos");
     
-    private static final Set notTestPlan = new HashSet();// not full test plans
+    private static final Set<String> notTestPlan = new HashSet<String>();// not full test plans
     
     static{
         notTestPlan.add("load_bug_list.jmx");// used by TestAnchorModifier

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -110,7 +110,7 @@ public class MainFrame extends JFrame implements TestListener, Remoteable {
     private int previousDragYLocation = 0;
 
     /** The set of currently running hosts. */
-    private Set hosts = new HashSet();
+    private Set<String> hosts = new HashSet<String>();
 
     /** A message dialog shown while JMeter threads are stopping. */
     private JDialog stoppingMessage;

File: src/core/org/apache/jmeter/gui/action/AboutCommand.java
Patch:
@@ -70,7 +70,7 @@ public void doAction(ActionEvent e) {
     /**
      * Provide the list of Action names that are available in this command.
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return AboutCommand.commandSet;
     }
 

File: src/core/org/apache/jmeter/gui/action/AbstractAction.java
Patch:
@@ -40,7 +40,7 @@ public void doAction(ActionEvent e) {
     /**
      * @see Command#getActionNames()
      */
-    abstract public Set getActionNames();
+    abstract public Set<String> getActionNames();
 
     /**
      * @param e

File: src/core/org/apache/jmeter/gui/action/AddParent.java
Patch:
@@ -35,7 +35,7 @@
 public class AddParent implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.ADD_PARENT);
@@ -57,7 +57,7 @@ public void doAction(ActionEvent e) {
 
     }
 
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/Analyze.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.jmeter.util.JMeterUtils;
 
 public class Analyze implements Command {
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.ANALYZE_FILE);
@@ -39,7 +39,7 @@ public class Analyze implements Command {
     public Analyze() {
     }
 
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/ChangeLanguage.java
Patch:
@@ -33,7 +33,7 @@
  * @version $Revision$
  */
 public class ChangeLanguage implements Command {
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
@@ -65,7 +65,7 @@ public void doAction(ActionEvent e) {
     /**
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 }

File: src/core/org/apache/jmeter/gui/action/Close.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class Close implements Command {
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.CLOSE);
@@ -51,7 +51,7 @@ public Close() {
      *
      * @return the ActionNames value
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/CollapseExpand.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class CollapseExpand implements Command {
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.COLLAPSE_ALL);
@@ -50,7 +50,7 @@ public CollapseExpand() {
      *
      * @return the ActionNames value
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/Copy.java
Patch:
@@ -41,7 +41,7 @@ public class Copy extends AbstractAction {
 
     private static JMeterTreeNode copiedNodes[] = null;
 
-    private static final HashSet commands = new HashSet();
+    private static final HashSet<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.COPY);
@@ -51,7 +51,7 @@ public class Copy extends AbstractAction {
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
     @Override
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/CreateFunctionDialog.java
Patch:
@@ -27,9 +27,9 @@
 public class CreateFunctionDialog extends AbstractAction {
     private FunctionHelper helper = null;
 
-    private static Set commands;
+    private static final Set<String> commands;
     static {
-        commands = new HashSet();
+        commands = new HashSet<String>();
         commands.add(ActionNames.FUNCTIONS);
     }
 
@@ -41,7 +41,7 @@ public CreateFunctionDialog() {
      * Provide the list of Action names that are available in this command.
      */
     @Override
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/Cut.java
Patch:
@@ -29,7 +29,7 @@
  * Implements the Cut menu item command
  */
 public class Cut extends AbstractAction {
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.CUT);
@@ -39,7 +39,7 @@ public class Cut extends AbstractAction {
      * @see Command#getActionNames()
      */
     @Override
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/DragNDrop.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.jmeter.testelement.WorkBench;
 
 public class DragNDrop extends AbstractAction {
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.DRAG_ADD);
@@ -88,7 +88,7 @@ private static boolean canAddTo(JMeterTreeNode parentNode, JMeterTreeNode[] drag
         return ok;
     }
 
-    protected void removeNodesFromParents(JMeterTreeNode[] nodes) {
+    private void removeNodesFromParents(JMeterTreeNode[] nodes) {
         for (int i = 0; i < nodes.length; i++) {
             GuiPackage.getInstance().getTreeModel().removeNodeFromParent(nodes[i]);
         }
@@ -98,7 +98,7 @@ protected void removeNodesFromParents(JMeterTreeNode[] nodes) {
      * @see Command#getActionNames()
      */
     @Override
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 }

File: src/core/org/apache/jmeter/gui/action/EditCommand.java
Patch:
@@ -29,7 +29,7 @@
  * Implements the Edit menu item.
  */
 public class EditCommand implements Command {
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.EDIT);
@@ -54,7 +54,7 @@ public void doAction(ActionEvent e) {
         }
     }
 
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 }

File: src/core/org/apache/jmeter/gui/action/EnableComponent.java
Patch:
@@ -33,7 +33,7 @@
 public class EnableComponent implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.ENABLE);
@@ -66,7 +66,7 @@ private void enableComponents(JMeterTreeNode[] nodes, boolean enable) {
     /**
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 }

File: src/core/org/apache/jmeter/gui/action/ExitCommand.java
Patch:
@@ -29,7 +29,7 @@
 
 public class ExitCommand implements Command {
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.EXIT);
@@ -46,7 +46,7 @@ public ExitCommand() {
      *
      * @return The ActionNames value
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/Help.java
Patch:
@@ -41,7 +41,7 @@
 public class Help implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     private static final String HELP_DOCS = "file:///"  // $NON-NLS-1$
         + JMeterUtils.getJMeterHome()
@@ -117,7 +117,7 @@ private void resetPage(String source) {
     /**
      * @see org.apache.jmeter.gui.action.Command#getActionNames()
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 }

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -57,7 +57,7 @@ public class Load implements Command {
 
     private static final boolean expandTree = JMeterUtils.getPropDefault("onload.expandtree", true); //$NON-NLS-1$
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.OPEN);
@@ -68,7 +68,7 @@ public Load() {
         super();
     }
 
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java
Patch:
@@ -37,7 +37,7 @@ public class LookAndFeelCommand implements Command {
 
     private static final String JMETER_LAF = "jmeter.laf"; // $NON-NLS-1$
     
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         UIManager.LookAndFeelInfo[] lfs = UIManager.getInstalledLookAndFeels();
@@ -115,7 +115,7 @@ public void doAction(ActionEvent ev) {
         }
     }
 
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 }

File: src/core/org/apache/jmeter/gui/action/Paste.java
Patch:
@@ -40,7 +40,7 @@ public class Paste extends AbstractAction {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.PASTE);
@@ -50,7 +50,7 @@ public class Paste extends AbstractAction {
      * @see Command#getActionNames()
      */
     @Override
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/Remove.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class Remove implements Command {
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.REMOVE);
@@ -51,7 +51,7 @@ public Remove() {
      *
      * @return the ActionNames value
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/RevertProject.java
Patch:
@@ -32,7 +32,7 @@
  *
  */
 public class RevertProject implements Command {
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.REVERT_PROJECT);
@@ -42,7 +42,7 @@ public RevertProject() {
         super();
     }
 
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -54,7 +54,7 @@ public class Save implements Command {
 
     public static final String JMX_FILE_EXTENSION = ".jmx"; // $NON-NLS-1$
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.SAVE_AS); // Save (Selection) As
@@ -73,7 +73,7 @@ public Save() {
      *
      * @return the ActionNames value
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/SaveGraphics.java
Patch:
@@ -45,7 +45,7 @@
  */
 public class SaveGraphics implements Command {
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.SAVE_GRAPHICS);
@@ -66,7 +66,7 @@ public SaveGraphics() {
      *
      * @return the ActionNames value
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: src/core/org/apache/jmeter/gui/action/Start.java
Patch:
@@ -39,7 +39,7 @@
 public class Start extends AbstractAction {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final Set commands = new HashSet();
+    private static final Set<String> commands = new HashSet<String>();
 
     static {
         commands.add(ActionNames.ACTION_START);
@@ -61,7 +61,7 @@ public Start() {
      * @return the ActionNames value
      */
     @Override
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commands;
     }
 

File: test/src/org/apache/jmeter/protocol/http/proxy/TestHttpRequestHdr.java
Patch:
@@ -562,8 +562,8 @@ private HTTPSamplerBase getSamplerForRequest(String url, String request, String
         }
         req.parse(bis);
         bis.close();
-        Map pageEncodings = Collections.synchronizedMap(new HashMap());
-        Map formEncodings = Collections.synchronizedMap(new HashMap());
+        Map<String, String> pageEncodings = Collections.synchronizedMap(new HashMap<String, String>());
+        Map<String, String> formEncodings = Collections.synchronizedMap(new HashMap<String, String>());
         if(url != null && contentEncoding != null) {
             pageEncodings.put(url, contentEncoding);
         }

File: src/core/org/apache/jmeter/gui/action/AboutCommand.java
Patch:
@@ -46,12 +46,12 @@
  *
  */
 public class AboutCommand implements Command {
-    private static Set commandSet;
+    private static Set<String> commandSet;
 
     private static JDialog about;
 
     static {
-        HashSet commands = new HashSet();
+        HashSet<String> commands = new HashSet<String>();
         commands.add(ActionNames.ABOUT);
         commandSet = Collections.unmodifiableSet(commands);
     }

File: src/core/org/apache/jmeter/gui/action/AddToTree.java
Patch:
@@ -37,10 +37,10 @@
 public class AddToTree implements Command {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static Set commandSet;
+    private static Set<String> commandSet;
 
     static {
-        HashSet commands = new HashSet();
+        HashSet<String> commands = new HashSet<String>();
         commands.add(ActionNames.ADD);
         commandSet = Collections.unmodifiableSet(commands);
     }
@@ -54,7 +54,7 @@ public AddToTree() {
      *
      * @return the ActionNames value
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commandSet;
     }
 

File: src/core/org/apache/jmeter/gui/action/Command.java
Patch:
@@ -26,5 +26,5 @@
 public interface Command {
     public void doAction(ActionEvent e) throws IllegalUserActionException;
 
-    public Set getActionNames();
+    public Set<String> getActionNames();
 }
\ No newline at end of file

File: src/core/org/apache/jmeter/gui/action/SSLManagerCommand.java
Patch:
@@ -53,9 +53,9 @@
  *
  */
 public class SSLManagerCommand implements Command {
-    private static Set commandSet;
+    private static Set<String> commandSet;
     static {
-        HashSet commands = new HashSet();
+        HashSet<String> commands = new HashSet<String>();
         commands.add(ActionNames.SSL_MANAGER);
         SSLManagerCommand.commandSet = Collections.unmodifiableSet(commands);
     }
@@ -76,7 +76,7 @@ public void doAction(ActionEvent e) {
     /**
      * Provide the list of Action names that are available in this command.
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return SSLManagerCommand.commandSet;
     }
 

File: src/core/org/apache/jmeter/gui/action/What.java
Patch:
@@ -39,10 +39,10 @@
  */
 public class What implements Command {
 
-    private static final Set commandSet;
+    private static final Set<String> commandSet;
 
     static {
-        HashSet commands = new HashSet();
+        HashSet<String> commands = new HashSet<String>();
         commands.add(ActionNames.WHAT_CLASS);
         commands.add(ActionNames.DEBUG_ON);
         commands.add(ActionNames.DEBUG_OFF);
@@ -67,7 +67,7 @@ public void doAction(ActionEvent e) throws IllegalUserActionException {
     /**
      * Provide the list of Action names that are available in this command.
      */
-    public Set getActionNames() {
+    public Set<String> getActionNames() {
         return commandSet;
     }
 }

File: src/core/org/apache/jmeter/reporters/AbstractListenerElement.java
Patch:
@@ -29,7 +29,7 @@
 
 public abstract class AbstractListenerElement extends AbstractTestElement {
     // TODO should class implement SampleListener?
-    private transient WeakReference listener;
+    private transient WeakReference<Visualizer> listener;
 
     public AbstractListenerElement() {
     }
@@ -38,11 +38,11 @@ protected final Visualizer getVisualizer() {
         if (listener == null){ // e.g. in non-GUI mode
             return null;
         }
-        return (Visualizer)listener.get();
+        return listener.get();
     }
 
     public void setListener(Visualizer vis) {
-        listener = new WeakReference(vis);
+        listener = new WeakReference<Visualizer>(vis);
     }
 
     @Override

File: src/core/org/apache/jmeter/testelement/property/AbstractProperty.java
Patch:
@@ -306,7 +306,7 @@ protected Collection normalizeList(Collection coll) {
             Object item = iter.next();
             if (newColl == null) {
                 try {
-                    newColl = (Collection) coll.getClass().newInstance();
+                    newColl = coll.getClass().newInstance();
                 } catch (Exception e) {
                     log.error("Bad collection", e);
                     return coll;

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -91,7 +91,7 @@ public static String[] split(String splittee, String splitChar,boolean truncate)
                 splittee = splittee.substring(0,splittee.length()-splitLength);
             }
         }
-        Vector returns = new Vector();
+        Vector<String> returns = new Vector<String>();
         final int length = splittee.length(); // This is the new length
         int start = 0;
         spot = 0;
@@ -146,7 +146,7 @@ public static String[] split(String splittee,String splitChar)
     public static String[] split(String splittee, String delims, String def) {
         StringTokenizer tokens = new StringTokenizer(splittee,delims,def!=null);
         boolean lastWasDelim=false;
-        List strList=new ArrayList();
+        List<String> strList=new ArrayList<String>();
         while (tokens.hasMoreTokens()) {
             String tok=tokens.nextToken();
             if (   tok.length()==1 // we have a single character; could be a token
@@ -164,7 +164,7 @@ public static String[] split(String splittee, String delims, String def) {
         if (lastWasDelim) {
             strList.add(def);
         }
-        return (String[])strList.toArray(new String[0]);
+        return strList.toArray(new String[0]);
     }
 
 

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -260,7 +260,7 @@ public Connection getConnection() throws SQLException {
             if (sharedDSC != null){ // i.e. shared pool
                 dsc = sharedDSC;
             } else {
-                Map<String, ResourceLimitingJdbcDataSource> poolMap = (Map) perThreadPoolMap.get();
+                Map<String, ResourceLimitingJdbcDataSource> poolMap = perThreadPoolMap.get();
                 dsc = poolMap.get(getDataSource());
                 if (dsc == null){
                     dsc = initPool("1");

File: src/components/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -97,13 +97,13 @@ public class ResponseAssertion extends AbstractScopedAssertion implements Serial
             = JMeterUtils.getPropDefault("assertion.equals_diff_delta_end", "]]]");
 
     public ResponseAssertion() {
-        setProperty(new CollectionProperty(TEST_STRINGS, new ArrayList()));
+        setProperty(new CollectionProperty(TEST_STRINGS, new ArrayList<String>()));
     }
 
     @Override
     public void clear() {
         super.clear();
-        setProperty(new CollectionProperty(TEST_STRINGS, new ArrayList()));
+        setProperty(new CollectionProperty(TEST_STRINGS, new ArrayList<String>()));
     }
 
     private void setTestField(String testField) {

File: src/components/org/apache/jmeter/assertions/XMLAssertion.java
Patch:
@@ -39,9 +39,9 @@ public class XMLAssertion extends AbstractTestElement implements Serializable, A
     private static final char NEW_LINE = '\n'; // $NON-NLS-1$
 
     // one builder for all requests in a thread
-    private static final ThreadLocal myBuilder = new ThreadLocal() {
+    private static final ThreadLocal<SAXBuilder> myBuilder = new ThreadLocal<SAXBuilder>() {
         @Override
-        protected Object initialValue() {
+        protected SAXBuilder initialValue() {
             return new SAXBuilder();
         }
     };
@@ -64,7 +64,7 @@ public AssertionResult getResult(SampleResult response) {
         // the result data
         String resultData = new String(getResultBody(responseData)); // TODO - charset?
 
-        SAXBuilder builder = (SAXBuilder) myBuilder.get();
+        SAXBuilder builder = myBuilder.get();
 
         try {
             builder.build(new StringReader(resultData));

File: src/core/org/apache/jmeter/functions/Function.java
Patch:
@@ -65,5 +65,5 @@ public interface Function {
      * least return a List containing the correct number of blank strings, one
      * for each argument.
      */
-    public List getArgumentDesc();
+    public List<String> getArgumentDesc();
 }

File: src/core/org/apache/jmeter/threads/JMeterContextService.java
Patch:
@@ -25,9 +25,9 @@
  * Keeps track of active and total thread counts.
  */
 public final class JMeterContextService {
-    private static final ThreadLocal threadContext = new ThreadLocal() {
+    private static final ThreadLocal<JMeterContext> threadContext = new ThreadLocal<JMeterContext>() {
         @Override
-        public Object initialValue() {
+        public JMeterContext initialValue() {
             return new JMeterContext();
         }
     };
@@ -53,7 +53,7 @@ private JMeterContextService() {
      * @return the current thread Context
      */
     public static JMeterContext getContext() {
-        return (JMeterContext) threadContext.get();
+        return threadContext.get();
     }
 
     /**

File: src/core/org/apache/jmeter/util/JsseSSLManager.java
Patch:
@@ -89,7 +89,7 @@ public class JsseSSLManager extends SSLManager {
     private Provider pro = null;
 
     private SSLContext defaultContext; // If we are using a single session
-    private ThreadLocal threadlocal; // Otherwise
+    private ThreadLocal<SSLContext> threadlocal; // Otherwise
 
     /**
      * Create the SSLContext, and wrap all the X509KeyManagers with
@@ -109,7 +109,7 @@ public JsseSSLManager(Provider provider) {
                 log.debug("Creating shared context");
                 this.defaultContext = createContext();
             } else {
-                this.threadlocal = new ThreadLocal();
+                this.threadlocal = new ThreadLocal<SSLContext>();
             }
 
             /*
@@ -190,7 +190,7 @@ public SSLContext getContext() throws GeneralSecurityException {
             return this.defaultContext;
         }
 
-        SSLContext sslContext = (SSLContext) this.threadlocal.get();
+        SSLContext sslContext = this.threadlocal.get();
         if (sslContext == null) {
             if (log.isDebugEnabled()){
                 log.debug("Creating threadLocal SSL context for: "+Thread.currentThread().getName());

File: src/junit/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java
Patch:
@@ -335,7 +335,7 @@ public SampleResult sample(Entry entry) {
 
                 if (!getDoNotSetUpTearDown() && SETUP_METHOD != null){
                     try {
-                        SETUP_METHOD.invoke(this.TEST_INSTANCE,new Class[0]);
+                        SETUP_METHOD.invoke(this.TEST_INSTANCE,new Object[0]);
                     } catch (InvocationTargetException e) {
                         tr.addFailure(this.TEST_INSTANCE,
                                 new AssertionFailedError(e.getMessage()));
@@ -357,15 +357,15 @@ public SampleResult sample(Entry entry) {
                 // will include setup and teardown.
                 Protectable p = new Protectable() {
                     public void protect() throws Throwable {
-                        m.invoke(theClazz,new Class[0]);
+                        m.invoke(theClazz,new Object[0]);
                     }
                 };
                 tr.runProtected(theClazz, p);
                 tr.endTest(this.TEST_INSTANCE);
                 sresult.sampleEnd();
 
                 if (!getDoNotSetUpTearDown() && TDOWN_METHOD != null){
-                    TDOWN_METHOD.invoke(TEST_INSTANCE,new Class[0]);
+                    TDOWN_METHOD.invoke(TEST_INSTANCE,new Object[0]);
                 }
             } catch (InvocationTargetException e) {
                 // log.warn(e.getMessage());

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -102,7 +102,7 @@ private static void setTimeout(Method method, URLConnection conn ,int timeout){
             return;
         }
         try {
-            method.invoke(conn, new Integer[]{new Integer(timeout)});
+            method.invoke(conn, new Object[]{new Integer(timeout)});
         } catch (IllegalArgumentException e1) {
             log.warn("Failed to set timeout: "+e1);
         } catch (IllegalAccessException e1) {

File: src/jorphan/org/apache/jorphan/reflect/ClassTools.java
Patch:
@@ -62,7 +62,7 @@ public static Object construct(String className, int parameter) throws JMeterExc
     {
         Object instance = null;
         try {
-            Class clazz = ClassUtils.getClass(className);
+            Class<?> clazz = ClassUtils.getClass(className);
             clazz.getConstructor(new Class [] {Integer.TYPE});
             instance = ClassUtils.getClass(className).newInstance();
         } catch (ClassNotFoundException e) {
@@ -94,7 +94,7 @@ public static void invoke(Object instance, String methodName)
         Method m;
         try {
             m = ClassUtils.getPublicMethod(instance.getClass(), methodName, new Class [] {});
-            m.invoke(instance, null);
+            m.invoke(instance, (Object [])null);
         } catch (NoSuchMethodException e) {
             throw new JMeterException(e);
         } catch (IllegalAccessException e) {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -511,7 +511,7 @@ private String massageResponseHeaders(SampleResult res, boolean forcedHTTPS) {
                 final String HTTPS_PREFIX = "https://";
                 if (forcedHTTPS && HTTPConstants.HEADER_LOCATION.equalsIgnoreCase(parts[0])
                         && parts[1].substring(0, HTTPS_PREFIX.length()).equalsIgnoreCase(HTTPS_PREFIX)){
-                    headerLines[i]=headerLines[i].replaceFirst(HTTPS_PREFIX, "http://");
+                	headerLines[i]=headerLines[i].replaceFirst(parts[1].substring(0,HTTPS_PREFIX.length()), "http://");
                     continue;
                 }
                 if (forcedHTTPS && HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(parts[0]) || HTTPConstants.HEADER_SET_COOKIE.equalsIgnoreCase(parts[0]))

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -24,7 +24,6 @@
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
 import java.net.MalformedURLException;
-import java.net.ProtocolException;
 import java.net.URL;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -238,7 +237,9 @@ private HeaderManager createHeaderManager() {
         Iterator keys = headers.keySet().iterator();
         while (keys.hasNext()) {
             String key = (String) keys.next();
-            if (!key.equals(PROXY_CONNECTION) && !key.equals(CONTENT_LENGTH)) {
+            if (!key.equals(PROXY_CONNECTION) 
+             && !key.equals(CONTENT_LENGTH) 
+             && !key.equalsIgnoreCase(HTTPConstants.HEADER_CONNECTION)) {
                 manager.add((Header) headers.get(key));
             }
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPConstantsInterface.java
Patch:
@@ -38,6 +38,7 @@ public interface HTTPConstantsInterface {
     public static final String OPTIONS = "OPTIONS"; // $NON-NLS-1$
     public static final String TRACE = "TRACE"; // $NON-NLS-1$
     public static final String DELETE = "DELETE"; // $NON-NLS-1$
+    public static final String CONNECT = "CONNECT"; // $NON-NLS-1$
     public static final String HEADER_AUTHORIZATION = "Authorization"; // $NON-NLS-1$
     public static final String HEADER_COOKIE = "Cookie"; // $NON-NLS-1$
     public static final String HEADER_CONNECTION = "Connection"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/control/TransactionController.java
Patch:
@@ -198,6 +198,8 @@ public void sampleOccurred(SampleEvent se) {
                     res.setSuccessful(false);
                     noFailingSamples++;
                 }
+                res.setAllThreads(sampleResult.getAllThreads());
+                res.setGroupThreads(sampleResult.getGroupThreads());
             }
         }
     }

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -49,17 +49,17 @@ public class DataSourceElement extends AbstractTestElement
 
     private static final long serialVersionUID = 233L;
 
-    transient String dataSource, driver, dbUrl, username, password, checkQuery, poolMax, connectionAge, timeout,
+    private transient String dataSource, driver, dbUrl, username, password, checkQuery, poolMax, connectionAge, timeout,
             trimInterval;
 
-    transient boolean keepAlive, autocommit;
+    private transient boolean keepAlive, autocommit;
 
     /*
      *  The datasource is set up by testStarted and cleared by testEnded.
      *  These are called from different threads, so access must be synchronized.
      *  The same instance is called in each case.
     */
-    transient ResourceLimitingJdbcDataSource excaliburSource;
+    private transient ResourceLimitingJdbcDataSource excaliburSource;
 
     // Keep a record of the pre-thread pools so that they can be disposed of at the end of a test
     private transient Set perThreadPoolSet;

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
Patch:
@@ -604,7 +604,8 @@ public String getLabel() {
     private void addTest(LdapExtClient ldap, DirContext dirContext, SampleResult res) throws NamingException {
         try {
             res.sampleStart();
-            ldap.createTest(dirContext, getUserAttributes(), getBaseEntryDN());
+            DirContext ctx = ldap.createTest(dirContext, getUserAttributes(), getBaseEntryDN());
+            ctx.close(); // the createTest() method creates an extra context which needs to be closed
         } finally {
             res.sampleEnd();
         }

File: src/core/org/apache/jmeter/engine/RemoteJMeterEngine.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.jorphan.collections.HashTree;
 
 public interface RemoteJMeterEngine extends Remote {
-    void configure(HashTree testTree) throws RemoteException;
+    void configure(HashTree testTree, String host) throws RemoteException;
 
     void runTest() throws RemoteException, JMeterEngineException;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java
Patch:
@@ -573,7 +573,7 @@ protected HttpClient setupConnection(URL u, HttpMethodBase httpMethod, HTTPSampl
 
         int rto = getResponseTimeout();
         if (rto > 0){
-            httpMethod.getParams().setSoTimeout(1);
+            httpMethod.getParams().setSoTimeout(rto);
         }
 
         int cto = getConnectTimeout();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -698,15 +698,15 @@ public String getDomain() {
     }
 
     public void setConnectTimeout(String value) {
-        setProperty(CONNECT_TIMEOUT, value);
+        setProperty(CONNECT_TIMEOUT, value, "");
     }
 
     public int getConnectTimeout() {
         return getPropertyAsInt(CONNECT_TIMEOUT, 0);
     }
 
     public void setResponseTimeout(String value) {
-        setProperty(RESPONSE_TIMEOUT, value);
+        setProperty(RESPONSE_TIMEOUT, value, "");
     }
 
     public int getResponseTimeout() {

File: src/core/org/apache/jmeter/save/SaveGraphicsService.java
Patch:
@@ -107,7 +107,7 @@ public SaveGraphicsService() {
      */
     public void saveJComponent(String filename, int type, JComponent component) {
         Dimension size = component.getSize();
-        BufferedImage image = new BufferedImage(size.width, size.height, BufferedImage.TYPE_INT_RGB);
+        BufferedImage image = new BufferedImage(size.width, size.height, BufferedImage.TYPE_BYTE_INDEXED);
         Graphics2D grp = image.createGraphics();
         component.paint(grp);
 

File: src/core/org/apache/jmeter/control/LoopController.java
Patch:
@@ -101,6 +101,9 @@ private boolean getContinueForever() {
      */
     public Sampler next() {
         if(endOfLoop()) {
+            if (!getContinueForever()) {
+                setDone(true);
+            }
             return null;
         }
         return super.next();

File: test/src/org/apache/jmeter/resources/PackageTest.java
Patch:
@@ -188,7 +188,7 @@ private void check(String resname, boolean checkUnexpected) throws Exception {
 
 	// TODO generate list by scanning for *Resources.properties
 	private static final String[] prefixList={
-	    MESSAGES,
+	    MESSAGES, // This is in the same package, so no need for full path name
         "/org/apache/jmeter/assertions/BSFAssertionResources",
         "/org/apache/jmeter/config/CSVDataSetResources",
         "/org/apache/jmeter/config/RandomVariableConfigResources",
@@ -203,7 +203,7 @@ private void check(String resname, boolean checkUnexpected) throws Exception {
         "/org/apache/jmeter/timers/SyncTimerResources",
         "/org/apache/jmeter/visualizers/BeanShellListenerResources",
         "/org/apache/jmeter/visualizers/BSFListenerResources",
-        "/org/apache/jmeter/examples/testbeans/example2/Example2Resources",
+//        "/org/apache/jmeter/examples/testbeans/example2/Example2Resources", // examples are not built by default
         "/org/apache/jmeter/protocol/http/sampler/AccessLogSamplerResources",
         "/org/apache/jmeter/protocol/jdbc/config/DataSourceElementResources",
         "/org/apache/jmeter/protocol/jdbc/sampler/JDBCSamplerResources",

File: test/src/org/apache/jmeter/resources/PackageTest.java
Patch:
@@ -159,6 +159,9 @@ private void check(String resname, boolean checkUnexpected) throws Exception {
 		if (resname.length() == 0) // Must be the default resource file
 		{
 			defaultPRB = getRAS(res);
+			if (defaultPRB == null){
+			    throw new IOException("Could not find required file: "+res);
+			}
 		} else if (checkUnexpected) {
 			// Check all the keys are in the default props file
             PropertyResourceBundle prb = getRAS(res); 

File: src/core/org/apache/jmeter/control/GenericController.java
Patch:
@@ -147,7 +147,6 @@ public Sampler next() {
                 }
             }
         } catch (NextIsNullException e) {
-            returnValue = null;
         }
         return returnValue;
     }

File: src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java
Patch:
@@ -73,8 +73,8 @@ private static String getJMeterLaf(){
         if (laf != null) {
             return laf;
         }
-        String osFamily = osName.substring(0, osName.indexOf(' '));// e.g. windows xp => windows
-        laf = JMeterUtils.getProperty(JMETER_LAF+"."+osFamily);
+        String[] osFamily = osName.split("\\s"); // e.g. windows xp => windows
+        laf = JMeterUtils.getProperty(JMETER_LAF+"."+osFamily[0]);
         if (laf != null) {
             return laf;
         }

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeListener.java
Patch:
@@ -301,7 +301,7 @@ public void keyTyped(KeyEvent e) {
     }
 
     private boolean isRightClick(MouseEvent e) {
-        return (MouseEvent.BUTTON2_MASK & e.getModifiers()) > 0 || (MouseEvent.BUTTON3_MASK == e.getModifiers());
+        return e.isPopupTrigger() || (MouseEvent.BUTTON2_MASK & e.getModifiers()) > 0 || (MouseEvent.BUTTON3_MASK == e.getModifiers());
     }
 
     private void displayPopUp(MouseEvent e) {

File: src/reports/org/apache/jmeter/report/gui/tree/ReportTreeListener.java
Patch:
@@ -286,7 +286,7 @@ public void keyTyped(KeyEvent e) {
     }
 
     private boolean isRightClick(MouseEvent e) {
-        return (MouseEvent.BUTTON2_MASK & e.getModifiers()) > 0 || (MouseEvent.BUTTON3_MASK == e.getModifiers());
+        return e.isPopupTrigger() || (MouseEvent.BUTTON2_MASK & e.getModifiers()) > 0 || (MouseEvent.BUTTON3_MASK == e.getModifiers());
     }
 
     /*

File: src/core/org/apache/jmeter/gui/action/AddParent.java
Patch:
@@ -46,8 +46,10 @@ public AddParent() {
 
     public void doAction(ActionEvent e) {
         String name = ((Component) e.getSource()).getName();
+        GuiPackage guiPackage = GuiPackage.getInstance();
         try {
-            TestElement controller = GuiPackage.getInstance().createTestElement(name);
+            guiPackage.updateCurrentNode();
+            TestElement controller = guiPackage.createTestElement(name);
             addParentToTree(controller);
         } catch (Exception err) {
             log.error("", err);

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -229,7 +229,7 @@ private void notifyTestListenersOfStart(SearchByClass testListeners) {
     }
 
     private void notifyTestListenersOfEnd(SearchByClass testListeners) {
-        log.info("Notifying test listeners of end of test", new Throwable());
+        log.info("Notifying test listeners of end of test");
         Iterator iter = testListeners.getSearchResults().iterator();
         while (iter.hasNext()) {
             TestListener tl = (TestListener) iter.next();

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -343,6 +343,7 @@ private JMenu makeLanguageMenu() {
         langMenu.addLang(Locale.FRENCH.toString()); // fr
         langMenu.addLang(Locale.GERMAN.toString()); // de
         langMenu.addLang("no"); // $NON-NLS-1$
+        langMenu.addLang("pl"); // $NON-NLS-1$
         langMenu.addLang("es"); // $NON-NLS-1$
         langMenu.addLang("tr"); // $NON-NLS-1$
         langMenu.addLang(Locale.JAPANESE.toString()); // ja

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/AnchorModifier.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.jmeter.protocol.http.parser.HtmlParsingUtils;
 import org.apache.jmeter.protocol.http.sampler.HTTPSampleResult;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
+import org.apache.jmeter.protocol.http.util.ConversionUtils;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
@@ -184,7 +185,7 @@ private void addAnchorUrls(Document html, HTTPSampleResult result, HTTPSamplerBa
                 continue; // No point trying these
             }
             try {
-                HTTPSamplerBase newUrl = HtmlParsingUtils.createUrlFromAnchor(hrefStr, new URL(result.getURL(), base));
+                HTTPSamplerBase newUrl = HtmlParsingUtils.createUrlFromAnchor(hrefStr, ConversionUtils.makeRelativeURL(result.getURL(), base));
                 newUrl.setMethod(HTTPConstants.GET);
                 if (log.isDebugEnabled()) {
                     log.debug("Potential <a href> match: " + newUrl);
@@ -217,7 +218,7 @@ private void addFramesetUrls(Document html, HTTPSampleResult result,
            String hrefStr = namedItem.getNodeValue();
            try {
                HTTPSamplerBase newUrl = HtmlParsingUtils.createUrlFromAnchor(
-                       hrefStr, new URL(result.getURL(), base));
+                       hrefStr, ConversionUtils.makeRelativeURL(result.getURL(), base));
                newUrl.setMethod(HTTPConstants.GET);
                if (log.isDebugEnabled()) {
                    log.debug("Potential <frame src> match: " + newUrl);

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParserHTMLParser.java
Patch:
@@ -22,6 +22,7 @@
 import java.net.URL;
 import java.util.Iterator;
 
+import org.apache.jmeter.protocol.http.util.ConversionUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 import org.htmlparser.Node;
@@ -131,7 +132,7 @@ private void parseNodes(final NodeIterator e,
                 try {
                     if (!baseref.equals(""))// Bugzilla 30713
                     {
-                        baseUrl.url = new URL(baseUrl.url, baseHref.getBaseUrl());
+                        baseUrl.url = ConversionUtils.makeRelativeURL(baseUrl.url, baseHref.getBaseUrl());
                     }
                 } catch (MalformedURLException e1) {
                     throw new HTMLParseException(e1);

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParsingUtils.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerFactory;
+import org.apache.jmeter.protocol.http.util.ConversionUtils;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
@@ -260,7 +261,7 @@ public static HTTPSamplerBase createUrlFromAnchor(String parsedUrlString, URL co
         if (log.isDebugEnabled()) {
             log.debug("Creating URL from Anchor: " + parsedUrlString + ", base: " + context);
         }
-        URL url = new URL(context, parsedUrlString);
+        URL url = ConversionUtils.makeRelativeURL(context, parsedUrlString);
         HTTPSamplerBase sampler =HTTPSamplerFactory.newInstance();
         sampler.setDomain(url.getHost());
         sampler.setProtocol(url.getProtocol());

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/JTidyHTMLParser.java
Patch:
@@ -23,6 +23,7 @@
 import java.net.URL;
 import java.util.Iterator;
 
+import org.apache.jmeter.protocol.http.util.ConversionUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 import org.w3c.dom.Document;
@@ -102,7 +103,7 @@ private URL scanNodes(Node node, URLCollection urls, URL baseUrl) throws HTMLPar
                 String tmp = getValue(attrs, ATT_HREF);
                 if (tmp != null) {
                     try {
-                        baseUrl = new URL(baseUrl, tmp);
+                        baseUrl = ConversionUtils.makeRelativeURL(baseUrl, tmp);
                     } catch (MalformedURLException e) {
                         throw new HTMLParseException(e);
                     }

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/RegexpHTMLParser.java
Patch:
@@ -22,6 +22,7 @@
 import java.net.URL;
 import java.util.Iterator;
 
+import org.apache.jmeter.protocol.http.util.ConversionUtils;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
@@ -165,7 +166,7 @@ public Iterator getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection
                         log.debug("new baseUrl: " + s + " - " + baseUrl.toString());
                     }
                     try {
-                        baseUrl = new URL(baseUrl, s);
+                        baseUrl = ConversionUtils.makeRelativeURL(baseUrl, s);
                     } catch (MalformedURLException e) {
                         // Doesn't even look like a URL?
                         // Maybe it isn't: Ignore the exception.

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/URLCollection.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Iterator;
 
 import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.jmeter.protocol.http.util.ConversionUtils;
 
 /**
  * Collection class designed for handling URLs
@@ -91,7 +92,7 @@ public boolean addURL(String url, URL baseUrl) {
         url=StringEscapeUtils.unescapeXml(url);
         boolean b = false;
         try {
-            b = this.add(new URL(baseUrl, url));
+            b = this.add(ConversionUtils.makeRelativeURL(baseUrl, url));
         } catch (MalformedURLException mfue) {
             // TODO log a warning message?
             b = this.add(url);// Add the string if cannot create the URL

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -45,6 +45,7 @@
 import org.apache.jmeter.protocol.http.control.HeaderManager;
 import org.apache.jmeter.protocol.http.parser.HTMLParseException;
 import org.apache.jmeter.protocol.http.parser.HTMLParser;
+import org.apache.jmeter.protocol.http.util.ConversionUtils;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
@@ -1292,7 +1293,7 @@ protected HTTPSampleResult followRedirects(HTTPSampleResult res, int frameDepth)
             // this behaviour.
             String location = encodeSpaces(lastRes.getRedirectLocation());
             try {
-                lastRes = sample(new URL(lastRes.getURL(), location), GET, true, frameDepth);
+                lastRes = sample(ConversionUtils.makeRelativeURL(lastRes.getURL(), location), GET, true, frameDepth);
             } catch (MalformedURLException e) {
                 lastRes = errorResult(e, lastRes);
                 // The redirect URL we got was not a valid URL

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -1597,6 +1597,9 @@ public byte[] readResponse(SampleResult sampleResult, InputStream in, int length
                 w.write(readBuffer, 0, bytesRead);
             }
         }
+        if (first){ // Bug 46838 - if there was no data, still need to set latency
+            sampleResult.latencyEnd();
+        }
         in.close();
         w.flush();
         if (asMD5 && md != null) {

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Patch:
@@ -444,8 +444,8 @@ private String getStringFromResultSet(ResultSet rs) throws SQLException, Unsuppo
                 } else {
                     sb.append('\t');
                 }
-                if (jmvars != null && i < varnames.length) {
-                    String name = varnames[i].trim();
+                if (jmvars != null && i <= varnames.length) {
+                    String name = varnames[i - 1].trim();
                     if (name.length()>0){ // Save the value in the variable if present
                         jmvars.put(name+UNDERSCORE+j, o == null ? null : o.toString());
                     }

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -664,7 +664,7 @@ private String processLAST(String jmlogfile, String suffix) {
 
     private void startServer(int port) {
         try {
-            new RemoteJMeterEngineImpl(port);
+            RemoteJMeterEngineImpl.startServer(port);
         } catch (Exception ex) {
             log.error("Giving up, as server failed with:", ex);
             System.err.println("Server failed to start: "+ex);

File: src/core/org/apache/jmeter/engine/JMeterEngine.java
Patch:
@@ -31,8 +31,6 @@ public interface JMeterEngine {
 
     void reset();
 
-    void setHost(String host);
-
     void setProperties(Properties p);
 
     void exit();

File: src/core/org/apache/jmeter/engine/RemoteJMeterEngine.java
Patch:
@@ -33,8 +33,6 @@ public interface RemoteJMeterEngine extends Remote {
 
     void reset() throws RemoteException;
 
-    void setHost(String host) throws RemoteException;
-
     void setProperties(Properties p) throws RemoteException;
 
     void exit() throws RemoteException;

File: src/components/org/apache/jmeter/config/CSVDataSet.java
Patch:
@@ -135,7 +135,6 @@ public void iterationStart(LoopIterationEvent iterEvent) {
                 String[] lineValues = getQuotedData() ?
                         CSVSaveService.csvSplitString(line, delim.charAt(0))
                         : JOrphanUtils.split(line, delim, false);
-               System.out.println(line+ " count "+lineValues.length+ " vars "+vars.length);
                 for (int a = 0; a < vars.length && a < lineValues.length; a++) {
                     threadVars.put(vars[a], lineValues[a]);
                 }

File: src/monitor/components/org/apache/jmeter/monitor/util/MemoryBenchmark.java
Patch:
@@ -28,7 +28,7 @@
 public class MemoryBenchmark {
 
     public static void main(String[] args) {
-        if (args.length != 1) {
+        if (args.length == 1) {
             int objects = 10000;
             if (args[0] != null) {
                 objects = Integer.parseInt(args[0]);

File: src/core/org/apache/jmeter/gui/action/Help.java
Patch:
@@ -67,7 +67,7 @@ public class Help implements Command {
         try {
             helpDoc.setPage(HELP_PAGE);
             currentPage = HELP_PAGE;
-        } catch (IOException err) {
+        } catch (Exception err) {
             String msg = "Couldn't load help file " + err.toString();
             log.error(msg);
             currentPage = "";// Avoid NPE in resetPage() // $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -221,7 +221,9 @@ else if(target.getSamplerTypeName() == ProxyControl.SAMPLER_TYPE_HTTP_SAMPLER2)
             result = generateErrorResult(result, uhe); // Generate result (if nec.) and populate it
         } catch (IllegalArgumentException e) {
             log.error("Not implemented (probably used https)", e);
-            writeErrorToClient(HttpReplyHdr.formNotImplemented());
+            writeErrorToClient(HttpReplyHdr.formNotImplemented("Probably used https instead of http. " +
+            		"To record https requests, see " +
+            		"<a href=\"http://jakarta.apache.org/jmeter/usermanual/component_reference.html#HTTP_Proxy_Server\">HTTP Proxy Server documentation</a>"));
             result = generateErrorResult(result, e); // Generate result (if nec.) and populate it
         } catch (Exception e) {
             log.error("Exception when processing sample", e);

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -66,7 +66,7 @@ public class JMeterThread implements Runnable {
 
     private Controller controller;
 
-    private boolean running;
+    private volatile boolean running; // may be set from a different thread
 
     private HashTree testTree;
 
@@ -513,7 +513,7 @@ public String getThreadName() {
         return threadName;
     }
 
-    public void stop() {
+    public void stop() { // Called by StandardJMeterEngine
         running = false;
         log.info("Stopping " + threadName);
     }

File: src/functions/org/apache/jmeter/functions/JavaScript.java
Patch:
@@ -77,10 +77,12 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
             Scriptable scope = cx.initStandardObjects(null);
 
             // Set up some objects for the script to play with
+            scope.put("log", scope, log); //$NON-NLS-1$
             scope.put("ctx", scope, jmctx); //$NON-NLS-1$
             scope.put("vars", scope, vars); //$NON-NLS-1$
             scope.put("props", scope, JMeterUtils.getJMeterProperties()); //$NON-NLS-1$
-            scope.put("theadName", scope, Thread.currentThread().getName()); //$NON-NLS-1$
+            // Previously mis-spelt as theadName
+            scope.put("threadName", scope, Thread.currentThread().getName()); //$NON-NLS-1$
             scope.put("sampler", scope, currentSampler); //$NON-NLS-1$
             scope.put("sampleResult", scope, previousResult); //$NON-NLS-1$
 

File: src/functions/org/apache/jmeter/functions/JexlFunction.java
Patch:
@@ -76,10 +76,12 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
             Script script = ScriptFactory.createScript(exp);
             JexlContext jc = JexlHelper.createContext();
             final Map jexlVars = jc.getVars();
+            jexlVars.put("log", log); //$NON-NLS-1$
             jexlVars.put("ctx", jmctx); //$NON-NLS-1$
             jexlVars.put("vars", vars); //$NON-NLS-1$
             jexlVars.put("props", JMeterUtils.getJMeterProperties()); //$NON-NLS-1$
-            jexlVars.put("theadName", Thread.currentThread().getName()); //$NON-NLS-1$
+            // Previously mis-spelt as theadName
+            jexlVars.put("threadName", Thread.currentThread().getName()); //$NON-NLS-1$
             jexlVars.put("sampler", currentSampler); //$NON-NLS-1$ (may be null)
             jexlVars.put("sampleResult", previousResult); //$NON-NLS-1$ (may be null)
             jexlVars.put("OUT", System.out);//$NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -244,7 +244,7 @@ private HeaderManager createHeaderManager() {
                 manager.add((Header) headers.get(key));
             }
         }
-        manager.setName("Browser-derived headers");
+        manager.setName(JMeterUtils.getResString("header_manager_title")); // $NON-NLS-1$
         manager.setProperty(TestElement.TEST_CLASS, HeaderManager.class.getName());
         manager.setProperty(TestElement.GUI_CLASS, HeaderPanel.class.getName());
         return manager;

File: src/jorphan/org/apache/jorphan/gui/JLabeledRadio.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * JLabeledRadio will create a set of Radio buttons with a label.
  * 
- * @see JLabeledRadioI18N for a version that is better suited to
+ * @see org.apache.jmeter.gui.util.JLabeledRadioI18N for a version that is better suited to
  * multi-language use.
  */
 public class JLabeledRadio extends JPanel implements JLabeledField, ActionListener {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -445,7 +445,6 @@ public String getClassLabel() {
 
     public void testStarted() {
         initialCookies = getCookies();
-        clearCookies();
         cookieSpec = CookiePolicy.getCookieSpec(getPolicy());
         if (log.isDebugEnabled()){
             log.debug("Policy: "+getPolicy()+" Clear: "+getClearEachIteration());

File: src/reports/org/apache/jmeter/gui/util/ReportMenuFactory.java
Patch:
@@ -231,7 +231,7 @@ public static JMenu makeMenu(Collection menuInfo, String actionCommand, String m
         JMenu menu = new JMenu(menuName);
         while (iter.hasNext()) {
             MenuInfo info = (MenuInfo) iter.next();
-            menu.add(makeMenuItem(info.label, info.className, actionCommand));
+            menu.add(makeMenuItem(info.getLabel(), info.getClassName(), actionCommand));
         }
         return menu;
     }

File: src/components/org/apache/jmeter/control/ThroughputController.java
Patch:
@@ -68,9 +68,10 @@ public int intValue() {
     }
     
     // These items are shared between threads in a group by the clone() method
-    private MutableInteger globalNumExecutions;
+    // They are initialised by testStarted() so don't need to be serialised
+    private transient MutableInteger globalNumExecutions;
 
-    private MutableInteger globalIteration;
+    private transient MutableInteger globalIteration;
 
     private String counterLock = ""; // ensure counts are updated correctly
     // Need to use something that is serializable, so Object is no use

File: src/components/org/apache/jmeter/assertions/gui/AssertionGui.java
Patch:
@@ -34,6 +34,7 @@
 import javax.swing.JTable;
 
 import org.apache.jmeter.assertions.ResponseAssertion;
+import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.gui.util.PowerTableModel;
 import org.apache.jmeter.gui.util.TextAreaCellRenderer;
 import org.apache.jmeter.gui.util.TextAreaTableCellEditor;
@@ -346,8 +347,9 @@ private JPanel createTypePanel() {
      * @return a new panel for adding string patterns
      */
     private JPanel createStringPanel() {
-        tableModel = new PowerTableModel(new String[] { COL_RESOURCE_NAME }, new Class[] { String.class }, true);
+        tableModel = new PowerTableModel(new String[] { COL_RESOURCE_NAME }, new Class[] { String.class });
         stringTable = new JTable(tableModel);
+        stringTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
 
         TextAreaCellRenderer renderer = new TextAreaCellRenderer();
         stringTable.setRowHeight(renderer.getPreferredHeight());

File: src/components/org/apache/jmeter/visualizers/PropertyControlGui.java
Patch:
@@ -46,6 +46,7 @@
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.config.gui.AbstractConfigGui;
 import org.apache.jmeter.gui.UnsharedComponent;
+import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.gui.util.MenuFactory;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.TestElement;
@@ -168,6 +169,7 @@ public void modifyTestElement(TestElement element) {
     private Component makeMainPanel() {
         initializeTableModel();
         table = new JTable(tableModel);
+        table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         return makeScrollPane(table);
     }
@@ -247,6 +249,6 @@ private void initializeTableModel() {
                 null, //new Functor("setName"), // $NON-NLS-1$
                 new Functor(Map.Entry.class,"setValue", new Class[] { Object.class }) // $NON-NLS-1$
             },
-                new Class[] { String.class, String.class }, true);
+                new Class[] { String.class, String.class });
     }
 }
\ No newline at end of file

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -46,6 +46,7 @@
 //import javax.swing.table.TableModel;
 
 import org.apache.jmeter.gui.util.FileDialoger;
+import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.samplers.Clearable;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.save.CSVSaveService;
@@ -119,7 +120,7 @@ public StatVisualizer() {
                 },
                 new Functor[] { null, null, null, null, null, null, null, null, null, null },
                 new Class[] { String.class, Long.class, Long.class, Long.class, Long.class,
-                              Long.class, Long.class, String.class, String.class, String.class }, true);
+                              Long.class, Long.class, String.class, String.class, String.class });
         clearData();
         init();
     }
@@ -202,6 +203,7 @@ private void init() {
         // SortFilterModel mySortedModel =
         // new SortFilterModel(myStatTableModel);
         myJTable = new JTable(model);
+        myJTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         myJTable.setPreferredScrollableViewportSize(new Dimension(500, 70));
         RendererUtils.applyRenderers(myJTable, RENDERERS);
         myScrollPane = new JScrollPane(myJTable);

File: src/components/org/apache/jmeter/visualizers/SummaryReport.java
Patch:
@@ -41,6 +41,7 @@
 import javax.swing.table.TableCellRenderer;
 
 import org.apache.jmeter.gui.util.FileDialoger;
+import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.samplers.Clearable;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.save.CSVSaveService;
@@ -127,7 +128,7 @@ public SummaryReport() {
                 },
                 new Functor[] { null, null, null, null, null, null, null, null , null, null },
                 new Class[] { String.class, Long.class, Long.class, Long.class, Long.class,
-                              String.class, String.class, String.class, String.class, String.class }, true);
+                              String.class, String.class, String.class, String.class, String.class });
         clearData();
         init();
     }
@@ -193,6 +194,7 @@ private void init() {
         mainPanel.add(makeTitlePanel());
 
         myJTable = new JTable(model);
+        myJTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         myJTable.setPreferredScrollableViewportSize(new Dimension(500, 70));
         RendererUtils.applyRenderers(myJTable, RENDERERS);
         myScrollPane = new JScrollPane(myJTable);

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -35,6 +35,7 @@
 import javax.swing.border.EmptyBorder;
 import javax.swing.table.TableCellRenderer;
 
+import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.samplers.Clearable;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.util.Calculator;
@@ -127,7 +128,7 @@ public TableVisualizer() {
                 new Functor("getBytes") }, // $NON-NLS-1$
                 new Functor[] { null, null, null, null, null, null, null },
                 new Class[] {
-                Long.class, String.class, String.class, String.class, Long.class, ImageIcon.class, Integer.class }, true);
+                Long.class, String.class, String.class, String.class, Long.class, ImageIcon.class, Integer.class });
         init();
     }
 
@@ -191,6 +192,7 @@ private void init() {
 
         // Set up the table itself
         table = new JTable(model);
+        table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         // table.getTableHeader().setReorderingAllowed(false);
         RendererUtils.applyRenderers(table, RENDERERS);
 

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -38,6 +38,7 @@
 
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
+import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.util.JMeterUtils;
@@ -349,7 +350,7 @@ protected void initializeTableModel() {
                 new Functor[] {
                 new Functor("setName"), // $NON-NLS-1$
                 new Functor("setValue") }, // $NON-NLS-1$
-                new Class[] { String.class, String.class }, true);
+                new Class[] { String.class, String.class });
     }
 
     public static boolean testFunctors(){
@@ -375,6 +376,7 @@ protected void sizeColumns(JTable _table) {
     private Component makeMainPanel() {
         initializeTableModel();
         table = new JTable(tableModel);
+        table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         if (this.background != null) {
             table.setBackground(this.background);

File: src/core/org/apache/jmeter/config/gui/SimpleConfigGui.java
Patch:
@@ -31,6 +31,7 @@
 import javax.swing.table.TableCellEditor;
 
 import org.apache.jmeter.config.ConfigTestElement;
+import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.gui.util.PowerTableModel;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.JMeterProperty;
@@ -196,9 +197,10 @@ public void actionPerformed(ActionEvent e) {
     private Component createTablePanel() {
         tableModel = new PowerTableModel(
                 new String[] { COLUMN_NAMES_0, COLUMN_NAMES_1 },
-                new Class[] { String.class, String.class }, true);
+                new Class[] { String.class, String.class });
 
         table = new JTable(tableModel);
+        table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         return makeScrollPane(table);
     }

File: src/core/org/apache/jmeter/gui/util/FileListPanel.java
Patch:
@@ -189,7 +189,7 @@ private void fireFileChanged() {
     protected void initializeTableModel() {
         tableModel = new ObjectTableModel(new String[] { "Library" },
                 new Functor[0] , new Functor[0] , // i.e. bypass the Functors
-                new Class[] { String.class }, false);
+                new Class[] { String.class });
     }
 
     public void actionPerformed(ActionEvent e) {

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.commons.httpclient.cookie.CookiePolicy;
 import org.apache.jmeter.config.gui.AbstractConfigGui;
 import org.apache.jmeter.gui.util.FileDialoger;
+import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.gui.util.PowerTableModel;
 import org.apache.jmeter.protocol.http.control.Cookie;
 import org.apache.jmeter.protocol.http.control.CookieManager;
@@ -292,7 +293,7 @@ public void configure(TestElement el) {
      * Shows the main cookie configuration panel.
      */
     private void init() {
-        tableModel = new PowerTableModel(COLUMN_RESOURCE_NAMES, columnClasses, true);
+        tableModel = new PowerTableModel(COLUMN_RESOURCE_NAMES, columnClasses);
         clearEachIteration = 
             new JCheckBox(JMeterUtils.getResString("clear_cookies_per_iter"), false); //$NON-NLS-1$
         policy = new JLabeledChoice(
@@ -313,6 +314,7 @@ private void init() {
     public JPanel createCookieTablePanel() {
         // create the JTable that holds one cookie per row
         cookieTable = new JTable(tableModel);
+        cookieTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         cookieTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         cookieTable.setPreferredScrollableViewportSize(new Dimension(100, 70));
 

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPArgumentsPanel.java
Patch:
@@ -57,7 +57,7 @@ protected void initializeTableModel() {
                 new Functor("setValue"), //$NON-NLS-1$
                 new Functor("setAlwaysEncoded"), //$NON-NLS-1$
                 new Functor("setUseEquals") }, //$NON-NLS-1$
-                new Class[] {String.class, String.class, Boolean.class, Boolean.class }, true);
+                new Class[] {String.class, String.class, Boolean.class, Boolean.class });
     }
 
     public static boolean testFunctors(){

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPFileArgsPanel.java
Patch:
@@ -39,6 +39,7 @@
 import javax.swing.table.TableColumn;
 
 import org.apache.jmeter.gui.util.FileDialoger;
+import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.testelement.TestElement;
@@ -123,7 +124,7 @@ private void initializeTableModel() {
                 new Functor("setPath"), //$NON-NLS-1$
                 new Functor("setParamName"), //$NON-NLS-1$
                 new Functor("setMimeType")}, //$NON-NLS-1$
-            new Class[] {String.class, String.class, String.class}, true);
+            new Class[] {String.class, String.class, String.class});
     }
 
     public static boolean testFunctors(){
@@ -348,6 +349,7 @@ protected void stopTableEditing() {
     private Component makeMainPanel() {
         initializeTableModel();
         table = new JTable(tableModel);
+        table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         return makeScrollPane(table);
     }

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgumentsPanel.java
Patch:
@@ -36,6 +36,7 @@
 import javax.swing.table.TableCellEditor;
 
 import org.apache.jmeter.config.gui.AbstractConfigGui;
+import org.apache.jmeter.gui.util.HeaderAsPropertyRenderer;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.util.JMeterUtils;
@@ -315,7 +316,7 @@ protected void initializeTableModel() {
                 LDAPArgument.class,
                 new Functor[] { new Functor("getName"), new Functor("getValue"), new Functor("getOpcode") },
                 new Functor[] { new Functor("setName"), new Functor("setValue"), new Functor("setOpcode") },
-                new Class[] { String.class, String.class, String.class }, true);
+                new Class[] { String.class, String.class, String.class });
     }
 
     public static boolean testFunctors(){
@@ -351,6 +352,7 @@ protected void sizeColumns(JTable _table) {
     private Component makeMainPanel() {
         initializeTableModel();
         table = new JTable(tableModel);
+        table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());
         table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         return makeScrollPane(table);
     }

File: src/core/org/apache/jmeter/gui/util/FileListPanel.java
Patch:
@@ -189,7 +189,7 @@ private void fireFileChanged() {
     protected void initializeTableModel() {
         tableModel = new ObjectTableModel(new String[] { "Library" },
                 new Functor[0] , new Functor[0] , // i.e. bypass the Functors
-                new Class[] { String.class });
+                new Class[] { String.class }, false);
     }
 
     public void actionPerformed(ActionEvent e) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java
Patch:
@@ -188,8 +188,8 @@ public void setHeaders(URLConnection connection, HTTPSampler sampler) throws IOE
             while (args.hasNext()) {
                 HTTPArgument arg = (HTTPArgument) args.next().getObjectValue();
                 String parameterName = arg.getName();
-                if (parameterName.length()==0){
-                    continue; // Skip parameters with a blank name (allows use of optional variables in parameter lists)
+                if (arg.isSkippable(parameterName)){
+                    continue;
                 }
                 // End the previous multipart
                 bos.write(CRLF);

File: src/core/org/apache/jmeter/save/CSVSaveService.java
Patch:
@@ -118,6 +118,8 @@ private CSVSaveService() {
     public static void processSamples(String filename, Visualizer visualizer,
             ResultCollector resultCollector) throws IOException {
         BufferedReader dataReader = null;
+        final boolean errorsOnly = resultCollector.isErrorLogging();
+        final boolean successOnly = resultCollector.isSuccessOnlyLogging();
         try {
             dataReader = new BufferedReader(new FileReader(filename));
             dataReader.mark(400);// Enough to read the header column names
@@ -140,7 +142,7 @@ public static void processSamples(String filename, Visualizer visualizer,
                 SampleEvent event = CSVSaveService.makeResultFromDelimitedString(parts,saveConfig,lineNumber);
                 if (event != null){
                     final SampleResult result = event.getResult();
-                    if (resultCollector.isSampleWanted(result.isSuccessful())) {
+                    if (resultCollector.isSampleWanted(result.isSuccessful(),errorsOnly, successOnly)) {
                         visualizer.add(result);
                     }
                 }

File: src/core/org/apache/jmeter/save/OldSaveService.java
Patch:
@@ -488,9 +488,11 @@ public static void processSamples(String filename, Visualizer visualizer, Result
         DefaultConfigurationBuilder cfgbuilder = new DefaultConfigurationBuilder();
         Configuration savedSamples = cfgbuilder.buildFromFile(filename);
         Configuration[] samples = savedSamples.getChildren();
+        final boolean errorsOnly = rc.isErrorLogging();
+        final boolean successOnly = rc.isSuccessOnlyLogging();
         for (int i = 0; i < samples.length; i++) {
             SampleResult result = OldSaveService.getSampleResult(samples[i]);
-            if (rc.isSampleWanted(result.isSuccessful())) {
+            if (rc.isSampleWanted(result.isSuccessful(), errorsOnly, successOnly)) {
                 visualizer.add(result);
             }
         }

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapExtClient.java
Patch:
@@ -29,6 +29,7 @@
 import javax.naming.directory.ModificationItem;
 import javax.naming.directory.SearchControls;
 
+import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
@@ -49,7 +50,7 @@
 public class LdapExtClient {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    private static final String CONTEXT_IS_NULL = "Context is null"; //TODO should perhaps be a resource
+    private static final String CONTEXT_IS_NULL = "Context is null";
 
     /**
      * Constructor for the LdapClient object
@@ -135,7 +136,7 @@ public NamingEnumeration searchTest(DirContext dirContext, String searchBase, St
                     " scope=" + scope +
                     " countlim=" + countlim +
                     " timelim=" + timelim +
-                    " attrs=" + attrs +
+                    " attrs=" + JMeterUtils.unsplit(attrs,",") +
                     " retobj=" + retobj +
                     " deref=" + deref +
                     " filter=" + searchFilter

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java
Patch:
@@ -29,7 +29,6 @@
 
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
-import org.apache.jmeter.protocol.jms.sampler.BaseJMSSampler;
 
 /**
  * InitialContextFactory is responsible for getting and instance of the initial
@@ -41,13 +40,13 @@ public class InitialContextFactory {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
-    public static synchronized Context lookupContext(String jndi, String url, String useAuth, String user, String pwd) {
+    public static synchronized Context lookupContext(String jndi, String url, boolean useAuth, String user, String pwd) {
         Context ctx = (Context) MAP.get(jndi + url);
         if (ctx == null) {
             Properties props = new Properties();
             props.setProperty(Context.INITIAL_CONTEXT_FACTORY, jndi);
             props.setProperty(Context.PROVIDER_URL, url);
-            if (useAuth != null && useAuth.equals(BaseJMSSampler.required) && user != null && pwd != null
+            if (useAuth && user != null && pwd != null
                     && user.length() > 0 && pwd.length() > 0) {
                 props.setProperty(Context.SECURITY_PRINCIPAL, user);
                 props.setProperty(Context.SECURITY_CREDENTIALS, pwd);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/OnMessageSubscriber.java
Patch:
@@ -73,7 +73,7 @@ public OnMessageSubscriber() {
      * @param pwd
      */
     public OnMessageSubscriber(boolean useProps, String jndi, String url, String connfactory, String topic,
-            String useAuth, String user, String pwd) {
+            boolean useAuth, String user, String pwd) {
         Context ctx = initJNDI(useProps, jndi, url, useAuth, user, pwd);
         if (ctx != null) {
             initConnection(ctx, connfactory, topic);
@@ -93,7 +93,7 @@ public OnMessageSubscriber(boolean useProps, String jndi, String url, String con
      * @param pwd
      * @return the context or null
      */
-    public Context initJNDI(boolean useProps, String jndi, String url, String useAuth, String user, String pwd) {
+    public Context initJNDI(boolean useProps, String jndi, String url, boolean useAuth, String user, String pwd) {
         if (useProps) {
             try {
                 return new InitialContext();

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/Publisher.java
Patch:
@@ -52,7 +52,7 @@ public class Publisher {
     /**
      *
      */
-    public Publisher(boolean useProps, String jndi, String url, String connfactory, String topic, String useAuth,
+    public Publisher(boolean useProps, String jndi, String url, String connfactory, String topic, boolean useAuth,
             String user, String pwd) {
         super();
         Context ctx = initJNDI(useProps, jndi, url, useAuth, user, pwd);
@@ -63,7 +63,7 @@ public Publisher(boolean useProps, String jndi, String url, String connfactory,
         }
     }
 
-    public Context initJNDI(boolean useProps, String jndi, String url, String useAuth, String user, String pwd) {
+    public Context initJNDI(boolean useProps, String jndi, String url, boolean useAuth, String user, String pwd) {
         if (useProps) {
             try {
                 return new InitialContext();

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
Patch:
@@ -65,7 +65,7 @@ public ReceiveSubscriber() {
     }
 
     public ReceiveSubscriber(boolean useProps, String jndi, String url, String connfactory, String topic,
-            String useAuth, String user, String pwd) {
+            boolean useAuth, String user, String pwd) {
         Context ctx = initJNDI(useProps, jndi, url, useAuth, user, pwd);
         if (ctx != null) {
             initConnection(ctx, connfactory, topic);
@@ -85,7 +85,7 @@ public ReceiveSubscriber(boolean useProps, String jndi, String url, String connf
      * @param pwd
      * @return  the JNDI initial context or null
      */
-    public Context initJNDI(boolean useProps, String jndi, String url, String useAuth, String user, String pwd) {
+    public Context initJNDI(boolean useProps, String jndi, String url, boolean useAuth, String user, String pwd) {
         if (useProps) {
             try {
                 return new InitialContext();

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/PublisherSampler.java
Patch:
@@ -110,7 +110,7 @@ public void testIterationStart(LoopIterationEvent event) {
      */
     public synchronized void initClient() {
         this.PUB = new Publisher(this.getUseJNDIPropertiesAsBoolean(), this.getJNDIInitialContextFactory(), this
-                .getProviderUrl(), this.getConnectionFactory(), this.getTopic(), this.getUseAuth(), this.getUsername(),
+                .getProviderUrl(), this.getConnectionFactory(), this.getTopic(), this.isUseAuth(), this.getUsername(),
                 this.getPassword());
         ClientPool.addClient(this.PUB);
         log.info("PublisherSampler.initClient called");

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/SubscriberSampler.java
Patch:
@@ -103,7 +103,7 @@ public synchronized OnMessageSubscriber initListenerClient() {
         OnMessageSubscriber sub = (OnMessageSubscriber) ClientPool.get(this);
         if (sub == null) {
             sub = new OnMessageSubscriber(this.getUseJNDIPropertiesAsBoolean(), this.getJNDIInitialContextFactory(),
-                    this.getProviderUrl(), this.getConnectionFactory(), this.getTopic(), this.getUseAuth(), this
+                    this.getProviderUrl(), this.getConnectionFactory(), this.getTopic(), this.isUseAuth(), this
                             .getUsername(), this.getPassword());
             sub.setMessageListener(this);
             sub.resume();
@@ -122,7 +122,7 @@ public synchronized OnMessageSubscriber initListenerClient() {
     public void initReceiveClient() {
         this.SUBSCRIBER = new ReceiveSubscriber(this.getUseJNDIPropertiesAsBoolean(), this
                 .getJNDIInitialContextFactory(), this.getProviderUrl(), this.getConnectionFactory(), this.getTopic(),
-                this.getUseAuth(), this.getUsername(), this.getPassword());
+                this.isUseAuth(), this.getUsername(), this.getPassword());
         this.SUBSCRIBER.resume();
         ClientPool.addClient(this.SUBSCRIBER);
         log.info("SubscriberSampler.initReceiveClient called");

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/Receiver.java
Patch:
@@ -77,7 +77,7 @@ public void run() {
                     if (reply.getJMSCorrelationID() == null) {
                         log.warn("Received message with correlation id null. Discarding message ...");
                     } else {
-                        MessageAdmin.getAdmin().putReply(reply.getJMSCorrelationID(), reply);
+                        MessageAdmin.getAdmin().putReply(reply.getJMSMessageID(), reply);
                     }
                 }
 

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeListener.java
Patch:
@@ -310,7 +310,8 @@ private void displayPopUp(MouseEvent e) {
     }
 
     private void displayPopUp(MouseEvent e, JPopupMenu popup) {
-        log.warn("Shouldn't be here");
+        // See Bug 46108 - this log message is unnecessary and misleading
+        // log.warn("Shouldn't be here");
         if (popup != null) {
             popup.pack();
             popup.show(tree, e.getX(), e.getY());

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java
Patch:
@@ -583,7 +583,8 @@ public SampleResult sample() {
                 log.warn(exception.toString());
                 result.setResponseMessage(exception.getMessage());
             } else {
-                throw new RuntimeException(exception);
+                log.error("Problem processing the SOAP request", exception);
+                result.setResponseMessage(exception.toString());
             }
         } finally {
             // Make sure the sample start time and sample end time are recorded 

File: src/components/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.ArrayList;
 
 import org.apache.jmeter.samplers.SampleResult;
-import org.apache.jmeter.testelement.AbstractTestElement;
+import org.apache.jmeter.testelement.AbstractScopedAssertion;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.IntegerProperty;
 import org.apache.jmeter.testelement.property.JMeterProperty;
@@ -43,7 +43,7 @@
 /**
  * Test element to handle Response Assertions, @see AssertionGui
  */
-public class ResponseAssertion extends AbstractTestElement implements Serializable, Assertion {
+public class ResponseAssertion extends AbstractScopedAssertion implements Serializable, Assertion {
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     private final static String TEST_FIELD = "Assertion.test_field";  // $NON-NLS-1$

File: src/components/org/apache/jmeter/assertions/SizeAssertion.java
Patch:
@@ -22,7 +22,7 @@
 import java.text.MessageFormat;
 
 import org.apache.jmeter.samplers.SampleResult;
-import org.apache.jmeter.testelement.AbstractTestElement;
+import org.apache.jmeter.testelement.AbstractScopedAssertion;
 import org.apache.jmeter.testelement.property.IntegerProperty;
 import org.apache.jmeter.testelement.property.LongProperty;
 import org.apache.jmeter.util.JMeterUtils;
@@ -33,7 +33,7 @@
  * Checks if the results of a Sample matches a particular size.
  * 
  */
-public class SizeAssertion extends AbstractTestElement implements Serializable, Assertion {
+public class SizeAssertion extends AbstractScopedAssertion implements Serializable, Assertion {
 
     private static final long serialVersionUID = 233L;
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java
Patch:
@@ -367,11 +367,13 @@ private String sendPostData(PostMethod post) throws IOException {
 
                 // If a content encoding is specified, we set it as http parameter, so that
                 // the post body will be encoded in the specified content encoding
-                final String contentEncoding = getContentEncoding();
+                String contentEncoding = getContentEncoding();
                 boolean haveContentEncoding = false;
                 if(contentEncoding != null && contentEncoding.trim().length() > 0) {
                     post.getParams().setContentCharset(contentEncoding);
                     haveContentEncoding = true;
+                } else if (contentEncoding != null && contentEncoding.trim().length() == 0){
+                    contentEncoding=null;
                 }
 
                 // If none of the arguments have a name specified, we

File: test/src/org/apache/jmeter/protocol/http/sampler/TestHTTPSamplersAgainstHttpMirrorServer.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.Locale;
 
 import org.apache.jmeter.engine.util.ValueReplacer;
+import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.protocol.http.control.HttpMirrorServer;
 import org.apache.jmeter.protocol.http.control.TestHTTPMirrorThread;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
@@ -44,7 +45,6 @@
 import org.apache.oro.text.regex.Perl5Matcher;
 
 import junit.framework.Test;
-import junit.framework.TestCase;
 import junit.framework.TestSuite;
 import junit.extensions.TestSetup;
 
@@ -53,7 +53,7 @@
  * The samples are executed against the HttpMirrorServer, which is 
  * started when the unit tests are executed.
  */
-public class TestHTTPSamplersAgainstHttpMirrorServer extends TestCase {
+public class TestHTTPSamplersAgainstHttpMirrorServer extends JMeterTestCase {
 	private final static int HTTP_SAMPLER = 0;
     private final static int HTTP_SAMPLER2 = 1;
     

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -208,7 +208,7 @@ public String getRequestData() {
     }
 
     public void setTimeout(String newTimeout) {
-        this.setProperty(FILENAME, newTimeout);
+        this.setProperty(TIMEOUT, newTimeout);
     }
 
     public int getTimeout() {

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BeanShellSampler.java
Patch:
@@ -156,7 +156,7 @@ public SampleResult sample(Entry e)// Entry tends to be ignored ...
             log.error("BeanShell Jar missing? " + ex.toString());
             res.setResponseCode("501");//$NON-NLS-1$
             res.setResponseMessage(ex.toString());
-            response.setStopThread(true); // No point continuing
+            res.setStopThread(true); // No point continuing
         } catch (Exception ex) // Mainly for bsh.EvalError
         {
             log.warn(ex.toString());

File: src/components/org/apache/jmeter/assertions/BeanShellAssertion.java
Patch:
@@ -142,7 +142,7 @@ public AssertionResult getResult(SampleResult response) {
             log.error("BeanShell Jar missing? " + ex.toString());
             result.setError(true);
             result.setFailureMessage("BeanShell Jar missing? " + ex.toString());
-            JMeterContextService.getContext().getThread().setOnErrorStopThread(true); // No point continuing
+            response.setStopThread(true); // No point continuing
         } catch (Exception ex) // Mainly for bsh.EvalError
         {
             result.setError(true);

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BeanShellSampler.java
Patch:
@@ -156,7 +156,7 @@ public SampleResult sample(Entry e)// Entry tends to be ignored ...
             log.error("BeanShell Jar missing? " + ex.toString());
             res.setResponseCode("501");//$NON-NLS-1$
             res.setResponseMessage(ex.toString());
-            JMeterContextService.getContext().getThread().setOnErrorStopThread(true); // No point continuing
+            response.setStopThread(true); // No point continuing
         } catch (Exception ex) // Mainly for bsh.EvalError
         {
             log.warn(ex.toString());

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -590,7 +590,7 @@ private void delay(List timers) {
             try {
                 Thread.sleep(sum);
             } catch (InterruptedException e) {
-                log.error("", e);
+                log.warn("The delay timer was interrupted - probably did not wait as long as intended.");
             }
         }
     }

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -139,7 +139,7 @@ public String serializedClass(Class type) {
 
     // Internal information only
     private static String fileVersion = ""; // read from properties file// $NON-NLS-1$
-    private static final String FILEVERSION = "672065"; // Expected value $NON-NLS-1$
+    private static final String FILEVERSION = "697317"; // Expected value $NON-NLS-1$
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/components/org/apache/jmeter/config/CSVDataSet.java
Patch:
@@ -126,6 +126,9 @@ public void iterationStart(LoopIterationEvent iterEvent) {
 			String delim = getDelimiter();
 			if (delim.equals("\\t")) { // $NON-NLS-1$
 				delim = "\t";// Make it easier to enter a Tab // $NON-NLS-1$
+		    } else if (delim.length()==0){
+		        log.warn("Empty delimiter converted to ','");
+		        delim=",";
 		    }
 			// TODO: fetch this once as per vars above?
             JMeterVariables threadVars = context.getVariables();

File: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/MailReaderSampler.java
Patch:
@@ -207,6 +207,7 @@ public SampleResult sample(Entry e) {
 			 */
 			parent.setResponseData(pdata.toString().getBytes());
 			parent.setDataType(SampleResult.TEXT);
+			parent.setContentType("text/plain"); // $NON-NLS-1$
 
 			parent.setResponseCodeOK();
 			parent.setResponseMessage("OK"); // $NON-NLS-1$

File: test/src/org/apache/jmeter/functions/PackageTest.java
Patch:
@@ -736,7 +736,7 @@ public void XPathtestDefault() throws Exception {
 		XPathFileContainer f = new XPathFileContainer("../build.xml", "/project/@default");
 		assertNotNull(f);
 		assertTrue("Not empty", f.size() > 0);
-		assertEquals("all", f.getXPathString(0));
+		assertEquals("install", f.getXPathString(0));
 
 	}
     

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -98,9 +98,7 @@ public String getPolicy() {
 
     public void setCookiePolicy(String policy){
         cookieSpec = CookiePolicy.getCookieSpec(policy);
-        if (!DEFAULT_POLICY.equals(policy)){// Don't clutter the JMX file
-            setProperty(POLICY,policy);
-        }
+        setProperty(POLICY, policy, DEFAULT_POLICY);// Don't clutter the JMX file
     }
     
 	public CollectionProperty getCookies() {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -207,7 +207,6 @@ else if(target.getSamplerTypeName() == ProxyControl.SAMPLER_TYPE_HTTP_SAMPLER2)
 					"https://([^:/]+)(:"+HTTPConstants.DEFAULT_HTTPS_PORT_STRING+")?"; // $NON-NLS-1$ $NON-NLS-2$
 				noHttpsResult = noHttpsResult.replaceAll(HTTPS_HOST, "http://$1"); // $NON-NLS-1$
 				result.setResponseData(noHttpsResult.getBytes(enc));
-				// TODO adjust Content-Length header
 			}
 
             // Find the page encoding and possibly encodings for forms in the page
@@ -308,7 +307,7 @@ private String massageResponseHeaders(SampleResult res, boolean forcedHTTP) {
 		String headers = res.getResponseHeaders();
 		String [] headerLines=headers.split(NEW_LINE, 0); // drop empty trailing content
 		int contentLengthIndex=-1;
-		boolean fixContentLength = false;
+		boolean fixContentLength = forcedHTTP;
 		for (int i=0;i<headerLines.length;i++){
 			String line=headerLines[i];
 			String[] parts=line.split(":\\s+",2); // $NON-NLS-1$

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -495,7 +495,7 @@ public void addSubResult(SampleResult subResult) {
 		}
 		subResults.add(subResult);
 		// Extend the time to the end of the added sample
-		setEndTime(subResult.getEndTime());
+		setEndTime(Math.max(getEndTime(), subResult.getEndTime()));
 		// Include the byte count for the added sample
 		setBytes(getBytes() + subResult.getBytes());
 		subResult.setParent(this);

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -135,7 +135,7 @@ public String serializedClass(Class type) {
 
     // This is written to JMX files by ScriptWrapperConverter
 	private static String propertiesVersion = "";// read from properties file; written to JMX files
-    private static final String PROPVERSION = "2.0";// Expected version $NON-NLS-1$
+    private static final String PROPVERSION = "2.1";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // read from properties file// $NON-NLS-1$

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -422,9 +422,7 @@ private void populateSampler(Map pageEncodings, Map formEncodings)
                 // Set the form data
                 sampler.setArguments(urlConfig.getArguments());
                 // Set the file uploads
-                sampler.setFileField(urlConfig.getFileFieldName());
-                sampler.setFilename(urlConfig.getFilename());
-                sampler.setMimetype(urlConfig.getMimeType());
+                sampler.setHTTPFiles(urlConfig.getHTTPFileArgs().asArray());
             } else if (postData.trim().startsWith("<?")) {
                 // Not sure if this is needed anymore. I assume these requests
                 // do not have HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED as content type,

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -275,7 +275,7 @@ protected int parseLine(String line, TestElement el) {
 				// parameters.
 				line = FILTER.filter(cleanedLine);
 				if (line != null) {
-					createUrl(cleanedLine, el);
+					createUrl(line, el);
 				}
 			} else {
 				log.debug("Line was filtered");
@@ -470,7 +470,7 @@ public NVPair[] convertStringtoNVPair(String stringparams) {
 	 * @return NVPair
 	 */
 	protected NVPair parseOneParameter(String parameter) {
-		String name = null;
+		String name = ""; // avoid possible NPE when trimming the name
 		String value = null;
 		try {
 			StringTokenizer param = this.tokenize(parameter, "=");

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -141,6 +141,7 @@ private Socket getSocket() {
 
 		// Not in cache, so create new one and cache it
 		try {
+		    closeSocket(); // Bug 44910 - close previous socket (if any)
 			con = new Socket(getServer(), getPort());
 			con.setSoTimeout(getTimeout());
 			con.setTcpNoDelay(getNoDelay());

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java
Patch:
@@ -252,7 +252,7 @@ public HTTPSampler2() {
 	 *                if an I/O exception occurs
 	 */
 	private String sendPostData(PostMethod post) throws IOException {
-        // Buffer to hold the post body, expect file content
+        // Buffer to hold the post body, except file content
         StringBuffer postedBody = new StringBuffer(1000);
         
         // Check if we should do a multipart/form-data or an
@@ -683,7 +683,7 @@ private void setConnectionHeaders(HttpMethod method, URL u, HeaderManager header
      *            <code>HttpMethod</code> which represents the request
      * @return the headers as a string
      */
-    private String getConnectionHeaders(HttpMethod method) {
+    protected String getConnectionHeaders(HttpMethod method) {
         // Get all the request headers
         StringBuffer hdrs = new StringBuffer(100);        
         Header[] requestHeaders = method.getRequestHeaders();

File: src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -34,6 +34,7 @@
 
 import org.apache.jmeter.config.ConfigElement;
 import org.apache.jmeter.config.ConfigTestElement;
+import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.testelement.property.TestElementProperty;
@@ -292,7 +293,7 @@ public int getAuthCount() {
 
     // Needs to be package protected for Unit test
 	static boolean isSupportedProtocol(URL url) {
-		String protocol = url.getProtocol().toUpperCase();
-		return protocol.equals("HTTP") || protocol.equals("HTTPS"); //$NON-NLS-1$ //$NON-NLS-2$
+		String protocol = url.getProtocol().toLowerCase(java.util.Locale.ENGLISH);
+		return protocol.equals(HTTPConstants.PROTOCOL_HTTP) || protocol.equals(HTTPConstants.PROTOCOL_HTTPS);
 	}
 }

File: src/protocol/java/org/apache/jmeter/protocol/java/test/JavaTest.java
Patch:
@@ -84,7 +84,7 @@ public class JavaTest extends AbstractJavaSamplerClient implements Serializable
 	public static final long DEFAULT_SLEEP_MASK = 0xff;
 
 	/** Formatted string representation of the default SleepMask. */
-	private static final String DEFAULT_MASK_STRING = "0x" + (Long.toHexString(DEFAULT_SLEEP_MASK)).toUpperCase();
+	private static final String DEFAULT_MASK_STRING = "0x" + (Long.toHexString(DEFAULT_SLEEP_MASK)).toUpperCase(java.util.Locale.ENGLISH);
 
 	/** The name used to store the SleepMask parameter. */
 	private static final String MASK_NAME = "Sleep_Mask";

File: src/protocol/java/org/apache/jmeter/protocol/java/test/SleepTest.java
Patch:
@@ -181,7 +181,7 @@ public void teardownTest(JavaSamplerContext context) {
 	public Arguments getDefaultParameters() {
 		Arguments params = new Arguments();
 		params.addArgument("SleepTime", String.valueOf(DEFAULT_SLEEP_TIME));
-		params.addArgument("SleepMask", "0x" + (Long.toHexString(DEFAULT_SLEEP_MASK)).toUpperCase());
+		params.addArgument("SleepMask", "0x" + (Long.toHexString(DEFAULT_SLEEP_MASK)).toUpperCase(java.util.Locale.ENGLISH));
 		return params;
 	}
 

File: test/src/org/apache/jmeter/assertions/PackageTest.java
Patch:
@@ -38,7 +38,7 @@ public PackageTest(String arg0) {
 	}
 
 	public void testMD5() throws Exception {
-		assertEquals("D41D8CD98F00B204E9800998ECF8427E", MD5HexAssertion.baMD5Hex(new byte[] {}).toUpperCase());
+		assertEquals("D41D8CD98F00B204E9800998ECF8427E", MD5HexAssertion.baMD5Hex(new byte[] {}).toUpperCase(java.util.Locale.ENGLISH));
 	}
 
 	int threadsRunning;

File: test/src/org/apache/jmeter/junit/JMeterTest.java
Patch:
@@ -332,8 +332,8 @@ public void runGUITitle() throws Exception {
             String name = guiItem.getClass().getName();
 			if (// Is this a work in progress or an internal GUI component?
 			    (title != null && title.length() > 0) // Will be "" for internal components
-				&& (title.toUpperCase().indexOf("(ALPHA") == -1) 
-                && (title.toUpperCase().indexOf("(BETA") == -1)
+				&& (title.toUpperCase(java.util.Locale.ENGLISH).indexOf("(ALPHA") == -1) 
+                && (title.toUpperCase(java.util.Locale.ENGLISH).indexOf("(BETA") == -1)
 				&& (!title.equals("Example1")) // Skip the example samplers ...
 				&& (!title.equals("Example2"))
                 && (!name.startsWith("org.apache.jmeter.examples."))

File: test/src/org/apache/jmeter/resources/PackageTest.java
Patch:
@@ -81,7 +81,7 @@ private int readRF(String res, List l) throws Exception {
 				 * JMeterUtils.getResString() converts space to _ and lowercases
 				 * the key, so make sure all keys pass the test
 				 */
-				if ((key.indexOf(' ') >= 0) || !key.toLowerCase().equals(key)) {
+				if ((key.indexOf(' ') >= 0) || !key.toLowerCase(java.util.Locale.ENGLISH).equals(key)) {
 					System.out.println("Invalid key for JMeterUtils " + key);
 					fails++;
 				}

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/URLRewritingModifier.java
Patch:
@@ -165,7 +165,7 @@ private void initRegex(String argName) {
 
 		parameterRegexp = JMeterUtils.getPatternCache().getPattern(
                 // ;sessionid=value
-				"[;\\?&]" + quotedArg + "=([^\"'>&\\s;]*)[&\\s\"'>;]?$?" +  // $NON-NLS-1$
+				"[;\\?&]" + quotedArg + "=([^\"'>&\\s;\\\\]*)[&\\s\"'>;]?$?" +  // $NON-NLS-1$
                 
                 // name="sessionid" value="value"
                 "|\\s[Nn][Aa][Mm][Ee]\\s*=\\s*[\"']" + quotedArg

File: src/components/org/apache/jmeter/control/InterleaveControl.java
Patch:
@@ -117,7 +117,7 @@ protected Sampler nextIsASampler(Sampler element) throws NextIsNullException {
 	 * If the current is null, reset and continue searching. The searchStart
 	 * attribute will break us off when we start a repeat.
 	 * 
-	 * @see org.apache.jmeter.testelement.AbstractTestElement#nextIsNull()
+	 * @see org.apache.jmeter.control.GenericController#nextIsNull()
 	 */
 	protected Sampler nextIsNull() {
 		resetCurrent();

File: src/core/org/apache/jmeter/testelement/ThreadListener.java
Patch:
@@ -21,7 +21,6 @@
 /**
  * Allow threads to perform startup and closedown if necessary
  * 
- * @version $Revision$ on $Date$
  */
 public interface ThreadListener {
 	/**

File: src/monitor/model/org/apache/jmeter/monitor/model/ObjectFactory.java
Patch:
@@ -30,7 +30,7 @@ public class ObjectFactory {
 
 	private static ObjectFactory FACTORY = null;
 
-	private Parser PARSER = null;
+	private final Parser PARSER;
 
 	/**
 	 * 
@@ -40,7 +40,7 @@ protected ObjectFactory() {
 		PARSER = new MonitorParser(this);
 	}
 
-	public static ObjectFactory getInstance() {
+	public static synchronized ObjectFactory getInstance() {
 		if (FACTORY == null) {
 			FACTORY = new ObjectFactory();
 		}

File: src/reports/org/apache/jmeter/report/ReportChart.java
Patch:
@@ -25,7 +25,7 @@ public interface ReportChart {
     /**
      * The method takes a list of the DataSet items. It is up to the chart
      * class to extract the data and use it to render a graphic.
-     * @param list of DataSet 
+     * @param data list of DataSet 
      * @return the component
      */
 	JComponent renderChart(List data);

File: src/reports/org/apache/jmeter/report/ReportChart.java
Patch:
@@ -1,4 +1,3 @@
-//$Header$
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -27,7 +26,7 @@ public interface ReportChart {
      * The method takes a list of the DataSet items. It is up to the chart
      * class to extract the data and use it to render a graphic.
      * @param list of DataSet 
-     * @return
+     * @return the component
      */
 	JComponent renderChart(List data);
 }

File: src/reports/org/apache/jmeter/report/writers/AbstractReportWriter.java
Patch:
@@ -1,4 +1,3 @@
-//$Header$
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
@@ -84,7 +83,7 @@ public void archiveDirectory() {
 	
     /**
      * return the day in YYYYMMDD format
-     * @return
+     * @return the date
      */
 	public String getDayString() {
 		Calendar today = Calendar.getInstance();

File: src/reports/org/apache/jmeter/testelement/BarChart.java
Patch:
@@ -31,7 +31,6 @@
 
 /**
  * The class is reponsible for returning 
- * @author pete
  *
  */
 public class BarChart extends AbstractChart {
@@ -53,7 +52,7 @@ public void setURL(String url) {
     /**
      * Convert the data from SamplingStatCalculator to double array of array
      * @param data
-     * @return
+     * @return data values
      */
     public double[][] convertToDouble(List data) {
         double[][] dataset = new double[1][data.size()];

File: src/reports/org/apache/jmeter/testelement/LineChart.java
Patch:
@@ -115,7 +115,7 @@ public JComponent renderGraphics(double[][] data, String[] xAxisLabels) {
      * Since we only have 4 shapes, the method will start with the
      * first shape and keep cycling through the shapes in order.
      * @param count
-     * @return
+     * @return array of shapes
      */
     public Shape[] createShapes(int count) {
         Shape[] shapes = new Shape[count];
@@ -127,7 +127,7 @@ public Shape[] createShapes(int count) {
     
     /**
      * Return the next shape
-     * @return
+     * @return the shape
      */
     public Shape nextShape() {
         if (shape_counter >= (SHAPE_ARRAY.length - 1)) {
@@ -139,7 +139,7 @@ public Shape nextShape() {
     /**
      * 
      * @param count
-     * @return
+     * @return array of strokes
      */
     public Stroke[] createStrokes(int count) {
         Stroke[] str = new Stroke[count];

File: src/components/org/apache/jmeter/assertions/BeanShellAssertion.java
Patch:
@@ -43,7 +43,7 @@ public class BeanShellAssertion extends BeanShellTestElement implements Assertio
 
 	public static final String PARAMETERS = "BeanShellAssertion.parameters"; //$NON-NLS-1$
     
-    public static final String RESET_INTREPRETER = "BeanShellSampler.resetInterpreter"; //$NON-NLS-1$
+    public static final String RESET_INTERPRETER = "BeanShellAssertion.resetInterpreter"; //$NON-NLS-1$
 
 	// can be specified in jmeter.properties
 	public static final String INIT_FILE = "beanshell.assertion.init"; //$NON-NLS-1$
@@ -65,7 +65,7 @@ public String getParameters() {
 	}
     
     public boolean isResetInterpreter() {
-        return getPropertyAsBoolean(RESET_INTREPRETER);
+        return getPropertyAsBoolean(RESET_INTERPRETER);
     }
 
 	/*

File: src/protocol/java/org/apache/jmeter/protocol/java/control/gui/BeanShellSamplerGui.java
Patch:
@@ -52,7 +52,7 @@ public void configure(TestElement element) {
 		scriptField.setText(element.getPropertyAsString(BeanShellSampler.SCRIPT));
 		filename.setText(element.getPropertyAsString(BeanShellSampler.FILENAME));
 		parameters.setText(element.getPropertyAsString(BeanShellSampler.PARAMETERS));
-		resetInterpreter.setSelected(element.getPropertyAsBoolean(BeanShellSampler.RESET_INTREPRETER));
+		resetInterpreter.setSelected(element.getPropertyAsBoolean(BeanShellSampler.RESET_INTERPRETER));
 		super.configure(element);
 	}
 
@@ -73,7 +73,7 @@ public void modifyTestElement(TestElement te) {
 		te.setProperty(BeanShellSampler.SCRIPT, scriptField.getText());
 		te.setProperty(BeanShellSampler.FILENAME, filename.getText());
 		te.setProperty(BeanShellSampler.PARAMETERS, parameters.getText());
-		te.setProperty(new BooleanProperty(BeanShellSampler.RESET_INTREPRETER, resetInterpreter.isSelected()));
+		te.setProperty(new BooleanProperty(BeanShellSampler.RESET_INTERPRETER, resetInterpreter.isSelected()));
 	}
     
     /**

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BeanShellSampler.java
Patch:
@@ -48,7 +48,7 @@ public class BeanShellSampler extends BeanShellTestElement implements Sampler
 
 	public static final String INIT_FILE = "beanshell.sampler.init"; //$NON-NLS-1$
     
-	public static final String RESET_INTREPRETER = "BeanShellSampler.resetInterpreter"; //$NON-NLS-1$
+	public static final String RESET_INTERPRETER = "BeanShellSampler.resetInterpreter"; //$NON-NLS-1$
 
     protected String getInitFileProperty() {
         return INIT_FILE;
@@ -77,7 +77,7 @@ public String getParameters() {
 	}
 	
     public boolean isResetInterpreter() {
-        return getPropertyAsBoolean(RESET_INTREPRETER);
+        return getPropertyAsBoolean(RESET_INTERPRETER);
     }
 
 	public SampleResult sample(Entry e)// Entry tends to be ignored ...

File: src/core/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -66,7 +66,9 @@ protected HashTree getTestTree() {
 	}
 
 	public void configure(HashTree testTree) {
-		test = testTree;
+        TreeCloner cloner = new TreeCloner(false);
+        testTree.traverse(cloner);
+		test = cloner.getClonedTree();
 	}
 
 	public void setHost(String host) {

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapConfigGui.java
Patch:
@@ -202,7 +202,7 @@ public void clearGui() {
         servername.setText(""); //$NON-NLS-1$
         port.setText(""); //$NON-NLS-1$
         user_Defined.setSelected(false);
-        addTest.setSelected(false);
+        addTest.setSelected(true);
         modifyTest.setSelected(false);
         deleteTest.setSelected(false);
         searchTest.setSelected(false);

File: src/components/org/apache/jmeter/assertions/XPathAssertion.java
Patch:
@@ -89,7 +89,7 @@ public AssertionResult getResult(SampleResult response) {
 
 		try {
 			doc = XPathUtil.makeDocument(new ByteArrayInputStream(responseData), isValidating(),
-					isWhitespace(), isNamespace(), isTolerant(), isQuiet(), showWarnings() , reportErrors());
+					isWhitespace(), isNamespace(), isTolerant(), isQuiet(), showWarnings() , reportErrors(), true);
 		} catch (SAXException e) {
 			log.debug("Caught sax exception: " + e);
 			result.setError(true);

File: src/components/org/apache/jmeter/extractor/XPathExtractor.java
Patch:
@@ -216,7 +216,7 @@ private Document parseResponse(SampleResult result)
       byte[] utf8data = unicodeData.getBytes("UTF-8"); // $NON-NLS-1$
       ByteArrayInputStream in = new ByteArrayInputStream(utf8data);
       // this method assumes UTF-8 input data
-      return XPathUtil.makeDocument(in,false,false,useNameSpace(),isTolerant(),isQuiet(),showWarnings(),reportErrors());
+      return XPathUtil.makeDocument(in,false,false,useNameSpace(),isTolerant(),isQuiet(),showWarnings(),reportErrors(),true);
     }
 
     /**

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -583,8 +583,9 @@ public void setEncodingAndType(String ct){
     	"text/",                  //$NON-NLS-1$
     	"application/javascript", //$NON-NLS-1$
     	"application/json",       //$NON-NLS-1$
+        "application/soap+xml",   //$NON-NLS-1$
+        "application/vnd.wap.xhtml+xml", //$NON-NLS-1$
     	"application/xhtml+xml",  //$NON-NLS-1$
-    	"application/soap+xml",   //$NON-NLS-1$
     	"application/xml",        //$NON-NLS-1$
         };
  

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -585,6 +585,7 @@ public void setEncodingAndType(String ct){
     	"application/json",       //$NON-NLS-1$
     	"application/xhtml+xml",  //$NON-NLS-1$
     	"application/soap+xml",   //$NON-NLS-1$
+    	"application/xml",        //$NON-NLS-1$
         };
  
     // Additional types as needed

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -440,7 +440,7 @@ public void testEnded(String host) {
 	public void testIterationStart(LoopIterationEvent event) {
 		if (getClearEachIteration()) {
 			clearCookies();
-			setProperty(initialCookies);
+			setProperty((CollectionProperty)initialCookies.clone());
 		}
 	}
 }
\ No newline at end of file

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -146,7 +146,7 @@ public static boolean insertLoadedTree(int id, HashTree tree, boolean merging) t
 		// If we are loading a new test plan, initialize the tree with the testplan node we are loading
 		GuiPackage guiInstance = GuiPackage.getInstance();
 		if(isTestPlan && !merging) {
-			guiInstance.getTreeModel().clearTestPlan((TestElement)tree.getArray()[0]);
+			guiInstance.clearTestPlan((TestElement)tree.getArray()[0]);
 		}
 
 		if (merging){ // Check if target of merge is reasonable

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -584,6 +584,7 @@ public void setEncodingAndType(String ct){
     	"application/javascript", //$NON-NLS-1$
     	"application/json",       //$NON-NLS-1$
     	"application/xhtml+xml",  //$NON-NLS-1$
+    	"application/soap+xml",   //$NON-NLS-1$
         };
  
     // Additional types as needed

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -432,7 +432,8 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe
 			// Sampling proper - establish the connection and read the response:
 			// Repeatedly try to connect:
 			int retry;
-			for (retry = 1; retry <= MAX_CONN_RETRIES; retry++) {
+			// Start with 0 so tries at least once, and retries at most MAX_CONN_RETRIES times
+			for (retry = 0; retry <= MAX_CONN_RETRIES; retry++) {
 				try {
 					conn = setupConnection(url, method, res);
 					// Attempt the connection:

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -1095,7 +1095,7 @@ public void warning(SAXParseException exception) throws SAXParseException {
 		/**
 		 * get the JOptionPaneMessage Type
 		 * 
-		 * @return
+		 * @return the message type
 		 */
 		public int getMessageType() {
 			return messageType;
@@ -1104,7 +1104,7 @@ public int getMessageType() {
 		/**
 		 * get error message
 		 * 
-		 * @return
+		 * @return the error message
 		 */
 		public String getErrorMessage() {
 			return msg;

File: src/components/org/apache/jmeter/visualizers/XMLDefaultMutableTreeNode.java
Patch:
@@ -33,8 +33,7 @@
 
 /**
  * A extended class of DefaultMutableTreeNode except that it also attached XML
- * node and convert XML document into DefaultMutableTreeNode author <a
- * href="mailto:d.maung@mdl.com">Dave Maung</a>
+ * node and convert XML document into DefaultMutableTreeNode.
  * 
  */
 public class XMLDefaultMutableTreeNode extends DefaultMutableTreeNode {
@@ -199,7 +198,7 @@ private void initTextNode(Text node, DefaultMutableTreeNode mTreeNode) throws SA
 	/**
 	 * get the xml node
 	 * 
-	 * @return
+	 * @return the XML node
 	 */
 	public Node getXMLNode() {
 		return xmlNode;

File: src/core/org/apache/jmeter/save/SaveGraphicsService.java
Patch:
@@ -174,7 +174,7 @@ public void saveTIFFWithBatik(String filename, BufferedImage image) {
 	 * we shouldn't get a FNFE.
 	 * 
 	 * @param filename
-	 * @return
+	 * @return output stream created from the filename
 	 */
 	public FileOutputStream createFile(File filename) {
 		try {

File: src/core/org/apache/jmeter/services/FileServer.java
Patch:
@@ -42,7 +42,6 @@
 import org.apache.log.Logger;
 
 /**
- * @author mstover
  * 
  * The point of this class is to provide thread-safe access to files, and to
  * provide some simplifying assumptions about where to find files and how to
@@ -260,7 +259,7 @@ protected boolean filesOpen() {
      * File access relative to current test's base directory.  
 	 * 
 	 * @param basedir
-	 * @return
+	 * @return a random File from the basedir that matches one of the extensions
 	 */
 	public File getRandomFile(String basedir, String[] extensions) {
 		File input = null;

File: src/functions/org/apache/jmeter/functions/XPathWrapper.java
Patch:
@@ -83,7 +83,7 @@ private static XPathFileContainer open(String file, String xpathString) {
      * 
      * @param file
      * @param xpathString
-     * @return
+     * @return the next row from the file container
      */
     public static String getXPathString(String file, String xpathString) {
 		Map my = (Map) filePacks.get();

File: src/jorphan/org/apache/jorphan/gui/TreeTableModel.java
Patch:
@@ -21,7 +21,6 @@
 import javax.swing.table.TableModel;
 
 /**
- * @author Peter Lin
  *
  * This is a basic interface for TreeTableModel that extends TableModel.
  * It's pretty minimal and isn't as full featured at other implementations.
@@ -33,7 +32,7 @@ public interface TreeTableModel extends TableModel {
      * the row is an object.
      * @param node
      * @param col
-     * @return
+     * @return the value at the column
      */
     public Object getValueAt(Object node, int col);
 
@@ -42,7 +41,7 @@ public interface TreeTableModel extends TableModel {
      * the row is an object.
      * @param node
      * @param col
-     * @return
+     * @return if cell is editable
      */
     public boolean isCellEditable(Object node, int col);
 

File: src/jorphan/org/apache/jorphan/reflect/Functor.java
Patch:
@@ -130,7 +130,7 @@ public Functor(Class _clazz, String _methodName) {
 	 * 
 	 * @param _invokee object on which to invoke the method
 	 * @param _methodName method name
-	 * @param types
+	 * @param _types
 	 */
 	public Functor(Object _invokee, String _methodName, Class[] _types) {
 		this(null, _invokee, _methodName, null, _types);
@@ -143,7 +143,7 @@ public Functor(Object _invokee, String _methodName, Class[] _types) {
      *
 	 * @param _clazz the class in which to find the method
 	 * @param _methodName method name
-	 * @param types
+	 * @param _types
 	 */
 	public Functor(Class _clazz, String _methodName, Class[] _types) {
 		this(_clazz, null, _methodName, null, _types);

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -33,8 +33,6 @@
 /**
  * This class contains frequently-used static utility methods.
  * 
- * author <a href="mailto://jsalvata@atg.com">Jordi Salvat i Alabart</a>
- *         Created 27th December 2002
  */
 public final class JOrphanUtils {
 
@@ -295,7 +293,7 @@ public static String replaceAllChars(String source, char search, String replace)
     /**
      * Replace all patterns in a String
      * 
-     * @see String.replaceAll(regex,replacement) - JDK1.4 only
+     * @see String#replaceAll(String regex,String replacement) - JDK1.4 only
      * 
      * @param input - string to be transformed
      * @param pattern - pattern to replace

File: src/jorphan/org/apache/jorphan/util/XMLBuffer.java
Patch:
@@ -82,7 +82,7 @@ public XMLBuffer closeTag(String tagname){
 	 * 
 	 * @param tagname
 	 * @param content
-	 * @return
+	 * @return this
 	 */
 	public XMLBuffer tag(String tagname,String content){
 		startTag(tagname);
@@ -96,7 +96,7 @@ public XMLBuffer tag(String tagname,String content){
 	 * 
 	 * @param tagname
 	 * @param content
-	 * @return
+	 * @return this
 	 */
 	public XMLBuffer tag(String tagname,StringBuffer content){
 		startTag(tagname);

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java
Patch:
@@ -68,7 +68,7 @@ public void setBufferSize(int buffer) {
 	/**
 	 * Added this method we that we can save the calculated stats.
 	 * 
-	 * @return
+	 * @return current sample
 	 */
 	public MonitorModel getLastSample() {
 		return this.CURRENT;

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorModel.java
Patch:
@@ -144,7 +144,7 @@ public Object clone() {
 	/**
 	 * a clone method to clone the stats
 	 * 
-	 * @return
+	 * @return new instance of the class
 	 */
 	public MonitorStats cloneMonitorStats() {
 		return new MonitorStats(current.getHealth(), current.getLoad(), current.getCpuLoad(), current.getMemLoad(),

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java
Patch:
@@ -299,7 +299,7 @@ public void setWsdlURL(String url) {
 	/**
 	 * method returns the WSDL URL
 	 * 
-	 * @return
+	 * @return the WSDL URL
 	 */
 	public String getWsdlURL() {
 		return getPropertyAsString(WSDL_URL);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/InitialContextFactory.java
Patch:
@@ -73,7 +73,7 @@ public static synchronized Context lookupContext(String jndi, String url, String
 	 * 
 	 * @param ctx
 	 * @param name
-	 * @return
+	 * @return the topic or null
 	 */
 	public static synchronized Topic lookupTopic(Context ctx, String name) {
 		Topic t = null;

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/OnMessageSubscriber.java
Patch:
@@ -93,7 +93,7 @@ public OnMessageSubscriber(boolean useProps, String jndi, String url, String con
 	 * @param useAuth
 	 * @param user
 	 * @param pwd
-	 * @return
+	 * @return the context or null
 	 */
 	public Context initJNDI(boolean useProps, String jndi, String url, String useAuth, String user, String pwd) {
 		if (useProps) {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -398,9 +398,6 @@ private void logThreadStart() {
 		}
 	}
 
-	/**
-	 * @return
-	 */
 	public int getTimeout() {
 		if (getPropertyAsInt(TIMEOUT) < 1) {
 			return DEFAULT_TIMEOUT;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -40,6 +40,7 @@ public class HTTPSampleResult extends SampleResult {
 
 	public HTTPSampleResult() {
 		super();
+		setDataEncoding(DEFAULT_HTTP_ENCODING); // default if encoding not provided be the page
 	}
 
 	public HTTPSampleResult(long elapsed) {

File: src/core/org/apache/jmeter/visualizers/Visualizer.java
Patch:
@@ -28,8 +28,6 @@
  * the visualizer is to extend the
  * {@link org.apache.jmeter.visualizers.gui.AbstractVisualizer} class.
  * 
- * @author <a href="mailto:mstoer1@apache.org">Michael Stover</a>
- * @version $Revision$ $Date$
  */
 public interface Visualizer {
 	/**
@@ -41,7 +39,7 @@ public interface Visualizer {
 	/**
 	 * This method is used to indicate a visualizer generates statistics.
 	 * 
-	 * @return
+	 * @return true if visualiser generates statistics
 	 */
 	public boolean isStats();
 }

File: src/core/org/apache/jmeter/save/converters/SampleResultConverter.java
Patch:
@@ -63,8 +63,7 @@ public class SampleResultConverter extends AbstractCollectionConverter {
     protected static final String TAG_RESPONSE_FILE     = "responseFile";     //$NON-NLS-1$
 
     // samplerData attributes. Must be unique. Keep sorted by string value.
-    // Ensure the documentation is updated when new attributes are added
-    // Current in component_reference.xml "Sample Result Save Configuration"
+    // Ensure the Listener documentation is updated when new attributes are added
     private static final String ATT_BYTES             = "by"; //$NON-NLS-1$
     private static final String ATT_DATA_ENCODING     = "de"; //$NON-NLS-1$
     private static final String ATT_DATA_TYPE         = "dt"; //$NON-NLS-1$

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -94,7 +94,7 @@ public StatVisualizer() {
                     new Functor("getMax"),   //$NON-NLS-1$
                     new Functor("getErrorPercentage"),   //$NON-NLS-1$
                     new Functor("getRate"),  //$NON-NLS-1$
-    				new Functor("getPageSize")   //$NON-NLS-1$
+    				new Functor("getKBPerSecond")   //$NON-NLS-1$
                 },
                 new Functor[] { null, null, null, null, null, null, null, null, null, null }, 
                 new Class[] { String.class, Long.class, Long.class, Long.class, Long.class, 

File: src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
Patch:
@@ -163,9 +163,9 @@ public StatGraphVisualizer() {
 				new Object[] { new Float(.900) }),
 				new Functor("getMin"),						//$NON-NLS-1$
 				new Functor("getMax"), 						//$NON-NLS-1$
-				new Functor("getErrorPercentage"),	//$NON-NLS-1$
-				new Functor("getRate"),				//$NON-NLS-1$
-				new Functor("getPageSize") },			//$NON-NLS-1$
+				new Functor("getErrorPercentage"),	        //$NON-NLS-1$
+				new Functor("getRate"),				        //$NON-NLS-1$
+				new Functor("getKBPerSecond") },			//$NON-NLS-1$
 				new Functor[] { null, null, null, null, null, null, null, null,	null, null }, 
 				new Class[] { String.class, Long.class, Long.class, Long.class, Long.class, Long.class,
 				Long.class, String.class, String.class, String.class });

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -137,7 +137,7 @@ public String serializedClass(Class type) {
 
     // Internal information only
     private static String fileVersion = ""; // read from properties file// $NON-NLS-1$
-	private static final String FILEVERSION = "586574"; // Expected value $NON-NLS-1$
+	private static final String FILEVERSION = "594385"; // Expected value $NON-NLS-1$
 	private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/core/org/apache/jmeter/NewDriver.java
Patch:
@@ -174,6 +174,7 @@ public static void main(String[] args) {
             } catch (Exception e) {
                 e.printStackTrace();
                 System.out.println("JMeter home directory was detected as: "+jmDir);
+                System.exit(1);
             }
         } else {
             try {
@@ -185,6 +186,7 @@ public static void main(String[] args) {
             } catch (Exception e) {
                 e.printStackTrace();
                 System.out.println("JMeter home directory was detected as: "+jmDir);
+                System.exit(1);
            }
         }
 	}

File: src/core/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -111,7 +111,10 @@ public void run() {
 		testListeners = new SearchByClass(TestListener.class);
 		sampleListeners = new ConvertListeners();
 		HashTree testTree = getTestTree();
+		PreCompiler compiler = new PreCompiler();
 		synchronized(testTree) {
+			testTree.traverse(compiler);
+			testTree.traverse(new TurnElementsOn());
 			testTree.traverse(testListeners);
 			testTree.traverse(sampleListeners);
 		}

File: src/components/org/apache/jmeter/control/ForeachController.java
Patch:
@@ -117,6 +117,7 @@ private boolean endOfArguments() {
 	public Sampler next() {
 		if (emptyList()) {
 			reInitialize();
+			resetLoopCount();
 			return null;
 		}
 		return super.next();

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -83,7 +83,7 @@ public Class realClass(String alias) {
     		// Translate to alias and then delegate to wrapped class
     	    public String serializedClass(Class type) {
     	    	if (type == null) {
-    	    		return super.serializedClass(type);
+    	    		return super.serializedClass(null); // was type, but that caused FindBugs warning
     	    	}
     	    	String alias = classToAlias(type.getName());
                 return alias == null ? super.serializedClass(type) : alias ;
@@ -146,7 +146,7 @@ public String serializedClass(Class type) {
 
     // Internal information only
     private static String fileVersion = ""; // read from properties file// $NON-NLS-1$
-	private static final String FILEVERSION = "583199";// Expected value $NON-NLS-1$
+	private static final String FILEVERSION = "586574"; // Expected value $NON-NLS-1$
 	private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -716,7 +716,7 @@ public void setSampleCount(boolean save) {
      * Only intended for use by OldSaveService (and test cases)
      */
     public void setFormatter(DateFormat fmt){
-    	printMilliseconds = "ms".equals(fmt);// $NON-NLS-1$ maintain relationship
+    	printMilliseconds = (fmt == null); // maintain relationship
     	formatter = fmt;
     }
     

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java
Patch:
@@ -47,9 +47,9 @@ public class PostWriter {
 	public static final String ENCODING = "ISO-8859-1"; // $NON-NLS-1$
 
     /** The form data that is going to be sent as url encoded */
-    private byte[] formDataUrlEncoded;    
+    protected byte[] formDataUrlEncoded;    
     /** The form data that is going to be sent in post body */
-    private byte[] formDataPostBody;
+    protected byte[] formDataPostBody;
     /** The start of the file multipart to be sent */
     private byte[] formDataFileStartMultipart;
     /** The boundary string for multipart */

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java
Patch:
@@ -953,7 +953,7 @@ else if(getSendParameterValuesAsPostBody()) {
                 } else {
                     value = arg.getEncodedValue();
                 }
-                putBody.append(value);
+                putBodyContent.append(value);
             }
             String contentTypeValue = null;
             if(hasContentTypeHeader) {

File: test/src/org/apache/jorphan/test/AllTests.java
Patch:
@@ -129,7 +129,7 @@ private static void logprop(String prop) {
 	public static void main(String[] args) {
 		if (args.length < 1) {
 			System.out.println("You must specify a comma-delimited list of paths to search " + "for unit tests");
-			System.exit(0);
+			System.exit(1);
 		}
 		String home=new File(System.getProperty("user.dir")).getParent();
 		System.out.println("Setting JMeterHome: "+home);
@@ -235,7 +235,7 @@ public static void main(String[] args) {
 		// }
 		//System.out.println("------------");
 		// --
-		System.exit(0);
+		System.exit(0); // this is needed because the test may start the AWT EventQueue thread which is not a daemon.
 	}
 
 	/**

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -105,9 +105,10 @@ public String getSamplerData() {
 			sb.append(' ');
 			sb.append(u.toString());
             sb.append("\n");
-			if (HTTPSamplerBase.POST.equals(method)) {
+            // Include request body if it is a post or put
+            if (HTTPSamplerBase.POST.equals(method) || HTTPSamplerBase.PUT.equals(method)) {
                 sb.append("\nPOST data:\n");
-				sb.append(queryString);
+                sb.append(queryString);
                 sb.append("\n");
             }
             if (cookies.length()>0){

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpMirrorControlGui.java
Patch:
@@ -125,7 +125,7 @@ private void init() {
 		myBox.add(createPortPanel());
 		mainPanel.add(myBox, BorderLayout.NORTH);
 
-        mainPanel.add(createControls(), BorderLayout.SOUTH);
+        mainPanel.add(createControls(), BorderLayout.CENTER);
 
 		add(mainPanel, BorderLayout.CENTER);
 	}

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java
Patch:
@@ -262,7 +262,7 @@ public void setHeaders(URLConnection connection, HTTPSampler sampler) throws IOE
                     PropertyIterator args = sampler.getArguments().iterator();
                     while (args.hasNext()) {
                         HTTPArgument arg = (HTTPArgument) args.next().getObjectValue();
-                        postBodyBuffer.append(arg.getValue());
+                        postBodyBuffer.append(arg.getEncodedValue(contentEncoding));
                     }
                     postBody = postBodyBuffer.toString();
                 }

File: src/components/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -335,11 +335,11 @@ AssertionResult evaluateResponse(SampleResult response) {
 	 * @param stringPattern
 	 * @return the message for the assertion report 
 	 */
-	// TODO strings should be resources
+	// TODO strings should be resources (but currently must not contain commas or the CSV file will be broken)
 	private String getFailText(String stringPattern, String toCheck) {
 		
 		StringBuffer sb = new StringBuffer(200);
-		sb.append("Test failed, ");
+		sb.append("Test failed: ");
 
 		if (isTestFieldResponseData()) {
 			sb.append("text");

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -83,6 +83,7 @@ public void modifyTestElement(TestElement sampler) {
 			samplerBase.setImageParser(true);
 		} else {
 			// The default is false, so we can remove the property to simplify JMX files
+			// This also allows HTTPDefaults to work for this checkbox
 			sampler.removeProperty(HTTPSamplerBase.IMAGE_PARSER);
 		}
 		samplerBase.setMonitor(isMon.isSelected());

File: src/core/org/apache/jmeter/visualizers/gui/AbstractVisualizer.java
Patch:
@@ -261,7 +261,7 @@ public Collection getMenuCategories() {
 		return Arrays.asList(new String[] { MenuFactory.LISTENERS });
 	}
 
-	/* Implements JMeterGUIComponent.modifyTestElement(TestElement) */
+	/* Implements JMeterGUIComponent.createTestElement() */
 	public TestElement createTestElement() {
 		if (collector == null) {
 			collector = new ResultCollector();

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -364,6 +364,7 @@ public void valueChanged(TreeSelectionEvent e) {
 						statsBuff.append("Load time: ").append(res.getTime()).append(NL);
 						statsBuff.append("Size in bytes: ").append(res.getBytes()).append(NL);
 						statsBuff.append("Sample Count: ").append(res.getSampleCount()).append(NL);
+						statsBuff.append("Error Count: ").append(res.getErrorCount()).append(NL);
 						statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);
 						statsBuff = new StringBuffer(); //reset for reuse
 						

File: src/core/org/apache/jmeter/save/converters/SampleResultConverter.java
Patch:
@@ -63,6 +63,7 @@ public class SampleResultConverter extends AbstractCollectionConverter {
     private static final String ATT_BYTES             = "by"; //$NON-NLS-1$
     private static final String ATT_DATA_ENCODING     = "de"; //$NON-NLS-1$
     private static final String ATT_DATA_TYPE         = "dt"; //$NON-NLS-1$
+    private static final String ATT_ERROR_COUNT      = "ec"; //$NON-NLS-1$
     private static final String ATT_LABEL             = "lb"; //$NON-NLS-1$
     private static final String ATT_LATENCY           = "lt"; //$NON-NLS-1$
 
@@ -250,6 +251,7 @@ protected void setAttributes(HierarchicalStreamWriter writer, MarshallingContext
 			writer.addAttribute(ATT_BYTES, String.valueOf(res.getBytes()));
         if (save.saveSampleCount()){
         	writer.addAttribute(ATT_SAMPLE_COUNT, String.valueOf(res.getSampleCount()));
+        	writer.addAttribute(ATT_ERROR_COUNT, String.valueOf(res.getErrorCount()));
         }
         if (save.saveThreadCounts()){
            writer.addAttribute(ATT_GRP_THRDS, String.valueOf(res.getGroupThreads()));
@@ -353,6 +355,7 @@ protected void retrieveAttributes(HierarchicalStreamReader reader, Unmarshalling
 		res.setLatency(Converter.getLong(reader.getAttribute(ATT_LATENCY)));
 		res.setBytes(Converter.getInt(reader.getAttribute(ATT_BYTES)));
 		res.setSampleCount(Converter.getInt(reader.getAttribute(ATT_SAMPLE_COUNT),1)); // default is 1
+		res.setErrorCount(Converter.getInt(reader.getAttribute(ATT_ERROR_COUNT),0)); // default is 0
 		res.setGroupThreads(Converter.getInt(reader.getAttribute(ATT_GRP_THRDS)));
 		res.setAllThreads(Converter.getInt(reader.getAttribute(ATT_ALL_THRDS)));
 	}

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -300,6 +300,8 @@ public void run() {
                         
                             // If we got any results, then perform processing on the result
                             if (result != null) {
+                            	result.setGroupThreads(threadGroup.getNumberOfThreads());
+                            	result.setAllThreads(JMeterContextService.getNumberOfThreads());
                                 result.setThreadName(threadName);
                                 threadContext.setPreviousResult(result);
                                 runPostProcessors(pack.getPostProcessors());

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -606,6 +606,7 @@ public void setTestPlanFile(String f) {
         getMainFrame().setTitle(JMeterUtils.getExtendedFrameTitle(testPlanFile));
         // Enable file revert action if a file is used
         getMainFrame().setFileRevertEnabled(f != null);
+        getMainFrame().setProjectFileLoaded(f);
 
 		try {
 			FileServer.getFileServer().setBasedir(testPlanFile);

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -56,6 +56,7 @@ public class ActionNames {
     public static final String LAF_PREFIX       = "laf:"; // Look and Feel prefix
     public static final String MERGE            = "merge"; // $NON-NLS-1$
     public static final String OPEN             = "open"; // $NON-NLS-1$
+    public static final String OPEN_RECENT      = "open_recent"; // $NON-NLS-1$
     public static final String PASTE            = "Paste"; // $NON-NLS-1$
     public static final String REMOTE_EXIT      = "remote_exit"; // $NON-NLS-1$
     public static final String REMOTE_EXIT_ALL  = "remote_exit_all"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -42,7 +42,7 @@ public class JMeterVersion {
 	 * JMeterUtils This ensures that JMeterUtils always gets the correct
 	 * version, even if it is not re-compiled during the build.
 	 */
-	private static final String VERSION = "2.3";
+	private static final String VERSION = "2.3.20070902";
 
 	static final String COPYRIGHT = "Copyright (c) 1998-2007 The Apache Software Foundation";
 

File: src/components/org/apache/jmeter/control/IncludeController.java
Patch:
@@ -110,7 +110,6 @@ public void resolveReplacementSubTree(Object context) {
 
     /**
      * load the included elements using SaveService
-     * @param node
      */
     protected HashTree loadIncludedElements() {
         // only try to load the JMX test plan if there is one

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -364,7 +364,7 @@ public static boolean testFunctors(){
 	/**
 	 * Resize the table columns to appropriate widths.
 	 * 
-	 * @param table
+	 * @param _table
 	 *            the table to resize columns for
 	 */
 	protected void sizeColumns(JTable _table) {

File: src/core/org/apache/jmeter/save/converters/SampleResultConverter.java
Patch:
@@ -264,7 +264,8 @@ protected void setAttributes(HierarchicalStreamWriter writer, MarshallingContext
 
 	/**
 	 * @param writer
-	 * @param hres
+	 * @param tag
+	 * @param value
 	 */
 	protected void writeString(HierarchicalStreamWriter writer, String tag, String value) {
 		if (value != null) {

File: src/examples/org/apache/jmeter/examples/testbeans/example2/Example2BeanInfo.java
Patch:
@@ -1,4 +1,3 @@
-//$Header$
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with

File: src/jorphan/org/apache/jorphan/gui/AbstractTreeTableModel.java
Patch:
@@ -1,4 +1,3 @@
-//$Header$
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with

File: src/jorphan/org/apache/jorphan/gui/JTreeTable.java
Patch:
@@ -1,4 +1,3 @@
-//$Header$
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with

File: src/jorphan/org/apache/jorphan/gui/TreeTableModel.java
Patch:
@@ -1,4 +1,3 @@
-//$Header$
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -677,7 +677,7 @@ public void setEmbeddedUrlRE(String regex) {
 	 * 
 	 * @param e
 	 *            Exception representing the error.
-	 * @param current
+	 * @param res
 	 *            SampleResult
 	 * @return a sampling result useful to inform the user about the exception.
 	 */
@@ -948,13 +948,13 @@ private HTTPSampleResult fileSample(URI uri) throws IOException {
      * When getting a redirect target, redirects are not followed and resources
      * are not downloaded. The caller will take care of this.
      * 
-     * @param url
+     * @param u
      *            URL to sample
      * @param method
      *            HTTP method: GET, POST,...
      * @param areFollowingRedirect
      *            whether we're getting a redirect target
-     * @param frameDepth
+     * @param depth
      *            Depth of this target in the frame structure. Used only to
      *            prevent infinite recursion.
      * @return results of the sampling

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgumentsPanel.java
Patch:
@@ -347,7 +347,7 @@ public static boolean testFunctors(){
 	/**
 	 * Resize the table columns to appropriate widths.
 	 * 
-	 * @param table
+	 * @param _table
 	 *            the table to resize columns for
 	 */
 	protected void sizeColumns(JTable _table) {

File: src/components/org/apache/jmeter/config/CSVDataSetBeanInfo.java
Patch:
@@ -36,9 +36,6 @@ public class CSVDataSetBeanInfo extends BeanInfoSupport {
     private static final String RECYCLE = "recycle";                 //$NON-NLS-1$
     private static final String STOPTHREAD = "stopThread";           //$NON-NLS-1$
 
-    /**
-	 * @param beanClass
-	 */
 	public CSVDataSetBeanInfo() {
 		super(CSVDataSet.class);
 		createPropertyGroup("csv_data",             //$NON-NLS-1$

File: src/components/org/apache/jmeter/control/IncludeController.java
Patch:
@@ -90,7 +90,7 @@ public void setIncludePath(String jmxfile) {
     
     /**
      * return the JMX file path.
-     * @return
+     * @return the JMX file path
      */
     public String getIncludePath() {
         return this.getPropertyAsString(INCLUDE_PATH);

File: src/components/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -154,8 +154,6 @@ private void traverse(JMeterTreeNode node, List nodePath, int level) {
 	/**
 	 * Copies the controller's subelements into the execution tree
 	 * 
-	 * @param tree -
-	 *            The current tree under which the nodes will be added
 	 */
 	public HashTree getReplacementSubTree() {
         HashTree tree = new ListedHashTree();

File: src/components/org/apache/jmeter/control/RandomOrderController.java
Patch:
@@ -45,7 +45,7 @@ public void initialize() {
 	/**
 	 * @see GenericController#reInitialize()
 	 */
-	public void reInitialize() {
+	protected void reInitialize() {
 		super.reInitialize();
 		this.reorder();
 	}

File: src/components/org/apache/jmeter/extractor/BeanShellPostProcessorBeanInfo.java
Patch:
@@ -25,9 +25,6 @@
 
 public class BeanShellPostProcessorBeanInfo extends BeanInfoSupport {
 
-	/**
-	 * @param beanClass
-	 */
 	public BeanShellPostProcessorBeanInfo() {
 		super(BeanShellPostProcessor.class);
 

File: src/components/org/apache/jmeter/extractor/XPathExtractor.java
Patch:
@@ -179,8 +179,6 @@ private Document parseResponse(SampleResult result)
      * Extract value from Document d by XPath query.
      * @param d
      * @param query
-     * @return extracted value (even empty string) or null if queried
-     *  data were not found
      * @throws TransformerException
      */
     private void getValuesForXPath(Document d,String query, JMeterVariables vars, String refName)

File: src/components/org/apache/jmeter/modifiers/BeanShellPreProcessorBeanInfo.java
Patch:
@@ -25,9 +25,6 @@
 
 public class BeanShellPreProcessorBeanInfo extends BeanInfoSupport {
 
-	/**
-	 * @param beanClass
-	 */
 	public BeanShellPreProcessorBeanInfo() {
 		super(BeanShellPreProcessor.class);
 

File: src/components/org/apache/jmeter/timers/BeanShellTimerBeanInfo.java
Patch:
@@ -25,9 +25,6 @@
 
 public class BeanShellTimerBeanInfo extends BeanInfoSupport {
 
-	/**
-	 * @param beanClass
-	 */
 	public BeanShellTimerBeanInfo() {
 		super(BeanShellTimer.class);
 

File: src/components/org/apache/jmeter/timers/SyncTimerBeanInfo.java
Patch:
@@ -24,9 +24,6 @@
 
 public class SyncTimerBeanInfo extends BeanInfoSupport {
 
-	/**
-	 * @param beanClass
-	 */
 	public SyncTimerBeanInfo() {
 		super(SyncTimer.class);
 

File: src/components/org/apache/jmeter/visualizers/BeanShellListenerBeanInfo.java
Patch:
@@ -25,9 +25,6 @@
 
 public class BeanShellListenerBeanInfo extends BeanInfoSupport {
 
-	/**
-	 * @param beanClass
-	 */
 	public BeanShellListenerBeanInfo() {
 		super(BeanShellListener.class);
 

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -115,9 +115,8 @@ public ArgumentsPanel(String label) {
 
     /**
      * Create a new ArgumentsPanel with a border and color background
-     * @param label
-     * @param borderHeight
-     * @param borderWidth
+     * @param label text for label
+     * @param bkg background colour
      */
     public ArgumentsPanel(String label, Color bkg) {
         tableLabel = new JLabel(label);

File: src/core/org/apache/jmeter/engine/util/SimpleVariable.java
Patch:
@@ -43,7 +43,7 @@ public void setName(String name) {
 	}
 
 	/**
-	 * @see org.apache.jmeter.functions.Function#execute(SampleResult, Sampler)
+	 * @see org.apache.jmeter.functions.Function#execute
 	 */
 	public String toString() {
 		String ret = null;

File: src/core/org/apache/jmeter/gui/JMeterGUIComponent.java
Patch:
@@ -75,7 +75,7 @@ public interface JMeterGUIComponent {
 	 * this method; the definition of this method in AbstractJMeterGuiComponent
 	 * is intended for general use.
 	 * 
-	 * @see getLabelResource()
+	 * @see #getLabelResource()
 	 * @return GUI label for the component.
 	 */
 	String getStaticLabel();

File: src/core/org/apache/jmeter/gui/action/SSLManagerCommand.java
Patch:
@@ -122,7 +122,7 @@ public String getDescription() {
 		/**
 		 * Tests to see if the file ends with "*.p12" or "*.P12".
 		 * 
-		 * @param testfile
+		 * @param testFile
 		 *            file to test
 		 * @return true if file is accepted, false otherwise
 		 */

File: src/core/org/apache/jmeter/gui/util/TextAreaTableCellEditor.java
Patch:
@@ -232,7 +232,7 @@ public void setValue(Object value) {
 		 * @param anEvent
 		 *            the event
 		 * @return true if cell is ready for editing, false otherwise
-		 * @see #setClickCountToStart
+		 * @see #setClickCountToStart(int)
 		 * @see #shouldSelectCell
 		 */
 		public boolean isCellEditable(EventObject anEvent) {

File: src/core/org/apache/jmeter/save/ListenerResultWrapper.java
Patch:
@@ -41,7 +41,7 @@ public Collection getSampleResults() {
 	}
 
 	/**
-	 * @param sampleResults
+	 * @param results
 	 *            The sampleResults to set.
 	 */
 	public void setSampleResults(Collection results) {

File: src/core/org/apache/jmeter/save/OldSaveService.java
Patch:
@@ -703,8 +703,8 @@ public static Configuration getConfiguration(AssertionResult assResult) {
 	 * 
 	 * @param result
 	 *            the object containing all of the data that has been collected.
-	 * @param funcTest
-	 *            an indicator of whether the user wants all data recorded.
+	 * @param saveConfig
+	 *            the configuration giving the data items to be saved.
 	 */
 	public static Configuration getConfiguration(SampleResult result, SampleSaveConfiguration saveConfig) {
 		DefaultConfiguration config = new DefaultConfiguration(SAMPLE_RESULT_TAG_NAME, "JMeter Save Service"); // $NON-NLS-1$

File: src/core/org/apache/jmeter/testelement/property/BooleanProperty.java
Patch:
@@ -59,9 +59,6 @@ public Object getObjectValue() {
 		return Boolean.valueOf(value);
 	}
 
-	/**
-	 * @see Object#clone()
-	 */
 	public Object clone() {
 		BooleanProperty prop = (BooleanProperty) super.clone();
 		prop.value = value;

File: src/core/org/apache/jmeter/testelement/property/DoubleProperty.java
Patch:
@@ -62,9 +62,6 @@ public Object getObjectValue() {
 		return new Double(value);
 	}
 
-	/**
-	 * @see Object#clone()
-	 */
 	public Object clone() {
 		DoubleProperty prop = (DoubleProperty) super.clone();
 		prop.value = value;

File: src/core/org/apache/jmeter/testelement/property/FloatProperty.java
Patch:
@@ -81,9 +81,6 @@ public Object getObjectValue() {
 		return new Float(value);
 	}
 
-	/**
-	 * @see Object#clone()
-	 */
 	public Object clone() {
 		FloatProperty prop = (FloatProperty) super.clone();
 		prop.value = value;

File: src/core/org/apache/jmeter/testelement/property/IntegerProperty.java
Patch:
@@ -86,9 +86,6 @@ public Object getObjectValue() {
 		return new Integer(value);
 	}
 
-	/**
-	 * @see Object#clone()
-	 */
 	public Object clone() {
 		IntegerProperty prop = (IntegerProperty) super.clone();
 		prop.value = value;

File: src/core/org/apache/jmeter/testelement/property/LongProperty.java
Patch:
@@ -82,9 +82,6 @@ public Object getObjectValue() {
 		return new Long(value);
 	}
 
-	/**
-	 * @see java.lang.Object#clone()
-	 */
 	public Object clone() {
 		LongProperty prop = (LongProperty) super.clone();
 		prop.value = value;

File: src/core/org/apache/jmeter/testelement/property/MapProperty.java
Patch:
@@ -91,9 +91,6 @@ public Object getObjectValue() {
 		return value;
 	}
 
-	/**
-	 * @see java.lang.Object#clone()
-	 */
 	public Object clone() {
 		MapProperty prop = (MapProperty) super.clone();
 		prop.value = cloneMap();

File: src/core/org/apache/jmeter/testelement/property/NullProperty.java
Patch:
@@ -77,9 +77,6 @@ public void mergeIn(JMeterProperty prop) {
 		tempValue = prop;
 	}
 
-	/**
-	 * @see Object#clone()
-	 */
 	public Object clone() {
 		return this;
 	}

File: src/core/org/apache/jmeter/testelement/property/StringProperty.java
Patch:
@@ -67,9 +67,6 @@ public Object getObjectValue() {
 		return value;
 	}
 
-	/**
-	 * @see Object#clone()
-	 */
 	public Object clone() {
 		StringProperty prop = (StringProperty) super.clone();
 		prop.value = value;

File: src/core/org/apache/jmeter/util/BeanShellInterpreter.java
Patch:
@@ -137,7 +137,7 @@ public void init(final String initFile, final Object logger) throws IOException,
     /**
      * 
      * @param init initialisation file
-     * @param log logger to pass to interpreter; also used to log errors in this method
+     * @param _log logger to pass to interpreter; also used to log errors in this method
      */
     public BeanShellInterpreter(String init, Logger _log)  throws ClassNotFoundException {
         this();

File: src/core/org/apache/jmeter/util/Calculator.java
Patch:
@@ -138,8 +138,7 @@ public String getLabel() {
 
     /**
      * Returns the raw double value of the percentage of samples with errors
-     * that were recorded. (Between 0.0 and 1.0) If you want a nicer return
-     * format, see {@link #getErrorPercentageString()}.
+     * that were recorded. (Between 0.0 and 1.0)
      * 
      * @return the raw double value of the percentage of samples with errors
      *         that were recorded.

File: src/core/org/apache/jmeter/util/CustomX509TrustManager.java
Patch:
@@ -48,7 +48,7 @@ public CustomX509TrustManager(final X509TrustManager defaultTrustManager) {
     }
 
     /**
-     * @see javax.net.ssl.X509TrustManager#checkClientTrusted(X509Certificate[],String authType)
+     * @see javax.net.ssl.X509TrustManager#checkClientTrusted(X509Certificate[],String)
      */
     public void checkClientTrusted(X509Certificate[] certificates,String authType) throws CertificateException {
         if (log.isDebugEnabled() && certificates != null) {
@@ -70,7 +70,7 @@ public void checkClientTrusted(X509Certificate[] certificates,String authType) t
     }
 
     /**
-     * @see javax.net.ssl.X509TrustManager#checkServerTrusted(X509Certificate[],String authType)
+     * @see javax.net.ssl.X509TrustManager#checkServerTrusted(X509Certificate[],String)
      */
     public void checkServerTrusted(X509Certificate[] certificates,String authType) throws CertificateException {
         if (log.isDebugEnabled() && certificates != null) {

File: src/core/org/apache/jmeter/util/HttpSSLProtocolSocketFactory.java
Patch:
@@ -142,8 +142,8 @@ private Socket wrapSocket(Socket sock){
      *  
      * @param host the host name/IP
      * @param port the port on the host
-     * @param clientHost the local host name/IP to bind the socket to
-     * @param clientPort the port on the local machine
+     * @param localAddress the local host name/IP to bind the socket to
+     * @param localPort the port on the local machine
      * @param params {@link HttpConnectionParams Http connection parameters}
      * 
      * @return Socket a new socket

File: src/core/org/apache/jmeter/util/StringUtilities.java
Patch:
@@ -32,7 +32,8 @@ private StringUtilities() {
     /**
      * Replace all patterns in a String
      * 
-     * @see String.replaceAll(regex,replacement) - JDK1.4 only
+     * @see String.replaceAll(String,String)
+     *  - JDK1.4 only
      * 
      * @param input - string to be transformed
      * @param pattern - pattern to replace

File: src/core/org/apache/jmeter/visualizers/gui/AbstractVisualizer.java
Patch:
@@ -87,7 +87,7 @@
  * visualizers don't calculate, or displaying the results visually in a new and
  * interesting way. Making a new visualizer for either of these purposes is easy -
  * just extend this class and implement the
- * {@link org.apache.jmeter.visualizers.Visualizer#add(SampleResult) add(SampleResult)}
+ * {@link org.apache.jmeter.visualizers.Visualizer#add add(SampleResult)}
  * method and display the results as you see fit. This AbstractVisualizer and
  * the default
  * {@link org.apache.jmeter.reporters.ResultCollector ResultCollector} handle

File: src/jorphan/org/apache/commons/cli/avalon/CLOption.java
Patch:
@@ -28,7 +28,7 @@
  */
 public final class CLOption {
 	/**
-	 * Value of {@link #getId} when the option is a text argument.
+	 * Value of {@link CLOptionDescriptor#getId} when the option is a text argument.
 	 */
 	public static final int TEXT_ARGUMENT = 0;
 

File: src/jorphan/org/apache/jorphan/collections/HashTree.java
Patch:
@@ -598,7 +598,6 @@ public HashTree getTree(Object[] treePath) {
 	 * Create a clone of this HashTree. This is not a deep clone (ie, the
 	 * contents of the tree are not cloned).
 	 * 
-	 * @see java.lang.Object#clone()
 	 */
 	public Object clone() {
 		HashTree newTree = new HashTree();

File: src/jorphan/org/apache/jorphan/gui/JLabeledChoice.java
Patch:
@@ -125,7 +125,7 @@ private void init() {
 			 * Callback method when the focus to the Text Field component is
 			 * lost.
 			 * 
-			 * @param pFocusEvent
+			 * @param e
 			 *            The focus event that occured.
 			 */
 			public void itemStateChanged(ItemEvent e) {

File: src/jorphan/org/apache/jorphan/gui/JLabeledTextArea.java
Patch:
@@ -61,7 +61,7 @@ public JLabeledTextArea() {
 	/**
 	 * Constructs a new component with the label displaying the passed text.
 	 * 
-	 * @param pLabel
+	 * @param label
 	 *            The text to display in the label.
 	 */
 	public JLabeledTextArea(String label) {

File: src/jorphan/org/apache/jorphan/gui/ObjectTableModel.java
Patch:
@@ -224,7 +224,7 @@ public Class getColumnClass(int arg0) {
 	 * <b>** only for use in unit test code **</b>
 	 * </p>
 	 * 
-	 * @param value - an instance of the table model row data item 
+	 * @param _value - an instance of the table model row data item 
 	 * (if null, use the class passed to the constructor).
 	 * 
 	 * @param caller - class of caller.

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -376,7 +376,7 @@ public static void closeQuietly(OutputStream os){
 
     /**
      * close a Writer with no error thrown
-     * @param os - Writer (may be null)
+     * @param wr - Writer (may be null)
      */
     public static void closeQuietly(Writer wr){
         try {
@@ -387,7 +387,7 @@ public static void closeQuietly(Writer wr){
 
     /**
      * close a Reader with no error thrown
-     * @param os - Reader (may be null)
+     * @param rd - Reader (may be null)
      */
     public static void closeQuietly(Reader rd){
         try {

File: src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java
Patch:
@@ -48,7 +48,7 @@
 
 /**
  * The <code>JUnitTestSamplerGui</code> class provides the user interface
- * for the {@link JUnitTestSampler}.
+ * for the {@link JUnitSampler}.
  * 
  */
 public class JUnitTestSamplerGui extends AbstractSamplerGui 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -281,7 +281,7 @@ private org.apache.commons.httpclient.Cookie makeCookie(Cookie jmc){
     /**
      * Get array of valid HttpClient cookies for the URL
      * 
-     * @param URL
+     * @param url the target URL
      * @return array of HttpClient cookies
      * 
      */

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HttpMirrorServer.java
Patch:
@@ -54,9 +54,6 @@ public class HttpMirrorServer extends Thread {
 	 * 
 	 * @param port
 	 *            the port to listen on.
-	 * @param target
-	 *            the target which will receive the generated JMeter test
-	 *            components.
 	 */
 	public HttpMirrorServer(int port) {
 		super("HttpMirrorServer");

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java
Patch:
@@ -118,7 +118,7 @@ public Daemon(int port, ProxyControl target, Class proxyClass) {
 	/**
 	 * Configure the Daemon to listen on the specified port.
 	 * 
-	 * @param daemonPort
+	 * @param _daemonPort
 	 *            the port to listen on
 	 */
 	public void configureProxy(int _daemonPort) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSamplerBeanInfo.java
Patch:
@@ -38,9 +38,6 @@
 public class AccessLogSamplerBeanInfo extends BeanInfoSupport {
 	private static final Logger log = LoggingManager.getLoggerForClass();
 
-	/**
-	 * @param beanClass
-	 */
 	public AccessLogSamplerBeanInfo() {
 		super(AccessLogSampler.class);
 		log.debug("Entered access log sampler bean info");

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java
Patch:
@@ -206,7 +206,7 @@ public void excludePattern(String[] regexp) {
 	 * all entries are included unless it matches, which means it should be
 	 * excluded.
 	 * 
-	 * @see org.apache.jmeter.protocol.http.util.accesslog.Filter#isFiltered(java.lang.String)
+	 * @see org.apache.jmeter.protocol.http.util.accesslog.Filter#isFiltered(String, TestElement)
 	 * @param path
 	 * @return boolean
 	 */

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java
Patch:
@@ -276,7 +276,7 @@ class ErrorSamplerClient extends AbstractJavaSamplerClient {
 		/**
 		 * Return SampleResult with data on error.
 		 * 
-		 * @see JavaSamplerClient#runTest()
+		 * @see JavaSamplerClient#runTest(JavaSamplerContext)
 		 */
 		public SampleResult runTest(JavaSamplerContext p_context) {
 			log.debug(whoAmI() + "\trunTest");

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElementBeanInfo.java
Patch:
@@ -34,9 +34,6 @@
 public class DataSourceElementBeanInfo extends BeanInfoSupport {
 	Logger log = LoggingManager.getLoggerForClass();
 
-	/**
-	 * @param beanClass
-	 */
 	public DataSourceElementBeanInfo() {
 		super(DataSourceElement.class);
 		createPropertyGroup("varName", new String[] { "dataSource" });

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LDAPArgument.java
Patch:
@@ -132,7 +132,7 @@ public String getValue() {
 	/**
 	 * Sets the opcode of the Argument.
 	 * 
-	 * @param newValue
+	 * @param newOpcode
 	 *            the new value
 	 */
 	public void setOpcode(String newOpcode) {

File: src/reports/org/apache/jmeter/gui/util/ReportFileDialoger.java
Patch:
@@ -99,7 +99,7 @@ public static JFileChooser promptToOpenFile() {
 	 * 
 	 * @return the JFileChooser that interacted with the user, after they are
 	 *         finished using it (accept or otherwise).
-	 * @see #promptToOpenFile
+	 * @see #promptToOpenFile()
 	 */
 	public static JFileChooser promptToSaveFile(String filename) {
 		return promptToSaveFile(filename, null);
@@ -109,8 +109,8 @@ public static JFileChooser promptToSaveFile(String filename) {
 	 * Get a JFileChooser with a new FileFilter.
 	 * 
 	 * @param filename
-	 * @param filters
-	 * @return
+	 * @param extensions
+	 * @return JFileChooser 
 	 */
 	public static JFileChooser promptToSaveFile(String filename, String[] extensions) {
 		if (lastJFCDirectory == null) {

File: src/reports/org/apache/jmeter/report/gui/action/ReportCheckDirty.java
Patch:
@@ -86,7 +86,7 @@ public void actionPerformed(ActionEvent e) {
 	}
 
 	/**
-	 * @see Command#doAction(ActionEvent)
+	 * @see org.apache.jmeter.gui.action.Command#doAction(ActionEvent)
 	 */
 	public void doAction(ActionEvent e) {
 		String action = e.getActionCommand();
@@ -155,7 +155,7 @@ public void processPath() {
 	}
 
 	/**
-	 * @see Command#getActionNames()
+	 * @see org.apache.jmeter.gui.action.Command#getActionNames()
 	 */
 	public Set getActionNames() {
 		return commands;

File: src/reports/org/apache/jmeter/report/gui/action/ReportCut.java
Patch:
@@ -40,14 +40,14 @@ public class ReportCut extends AbstractAction {
 	}
 
 	/**
-	 * @see Command#getActionNames()
+	 * @see org.apache.jmeter.gui.action.Command#getActionNames()
 	 */
 	public Set getActionNames() {
 		return commands;
 	}
 
 	/**
-	 * @see Command#doAction(ActionEvent)
+	 * @see org.apache.jmeter.gui.action.Command#doAction(ActionEvent)
 	 */
 	public void doAction(ActionEvent e) {
 		ReportGuiPackage guiPack = ReportGuiPackage.getInstance();

File: src/reports/org/apache/jmeter/report/gui/action/ReportDragNDrop.java
Patch:
@@ -52,7 +52,7 @@ public class ReportDragNDrop extends AbstractAction {
 	}
 
 	/**
-	 * @see Command#doAction(ActionEvent)
+	 * @see org.apache.jmeter.gui.action.Command#doAction(ActionEvent)
 	 */
 	public void doAction(ActionEvent e) {
 		String action = e.getActionCommand();
@@ -119,7 +119,7 @@ protected void removeNodesFromParents(ReportTreeNode[] nodes) {
 	}
 
 	/**
-	 * @see Command#getActionNames()
+	 * @see org.apache.jmeter.gui.action.Command#getActionNames()
 	 */
 	public Set getActionNames() {
 		return commands;

File: src/reports/org/apache/jmeter/report/gui/action/ReportPaste.java
Patch:
@@ -43,14 +43,14 @@ public class ReportPaste extends AbstractAction {
 	}
 
 	/**
-	 * @see Command#getActionNames()
+	 * @see org.apache.jmeter.gui.action.Command#getActionNames()
 	 */
 	public Set getActionNames() {
 		return commands;
 	}
 
 	/**
-	 * @see Command#doAction(ActionEvent)
+	 * @see org.apache.jmeter.gui.action.Command#doAction(ActionEvent)
 	 */
 	public void doAction(ActionEvent e) {
 		ReportTreeNode draggedNodes[] = ReportCopy.getCopiedNodes();

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -667,7 +667,7 @@ private void run(String testFile, String logFile, boolean remoteStart, String re
 
 			HashTree tree = SaveService.loadTree(reader);
 
-            JMeterTreeModel treeModel = new JMeterTreeModel();
+            JMeterTreeModel treeModel = new JMeterTreeModel(new Object());// Create non-GUI version to avoid headless problems
             JMeterTreeNode root = (JMeterTreeNode) treeModel.getRoot();
             treeModel.addSubTree(tree, root);
 

File: src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
Patch:
@@ -228,9 +228,7 @@ public void modifyTestElement(TestElement element) {
 		// Fetch data from screen fields
 		if (customizer instanceof GenericTestBeanCustomizer) {
 			GenericTestBeanCustomizer gtbc = (GenericTestBeanCustomizer) customizer;
-			gtbc.propertyChange(null); 
-			// TODO - is this the best way to do this?
-			// Is the original property change Listener still needed?
+			gtbc.saveGuiFields(); 
 		}
 		configureTestElement(element);
 

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -574,8 +574,9 @@ public void propertyChange(PropertyChangeEvent evt) {
 		// evt will be null only when called from TestBeanGUI.modifyTestElement()
 		// TODO - is the propertyChange event needed, now that modifyTestElement calls this?
 		for (int i = 0; i < editors.length; i++) {
-			if (evt == null || editors[i] == evt.getSource()) {
-				Object value = editors[i].getValue();
+			PropertyEditor propertyEditor=editors[i]; // might be null in testing
+			if (propertyEditor != null && (evt == null || propertyEditor == evt.getSource())) {
+				Object value = propertyEditor.getValue();
 				String name = descriptors[i].getName();
 				if (value == null) {
 					propertyMap.remove(name);

File: src/core/org/apache/jmeter/gui/action/ActionRouter.java
Patch:
@@ -67,7 +67,7 @@ public void run() {
 
 	private void performAction(final ActionEvent e) {
 		try {
-			GuiPackage.getInstance().updateCurrentNode();
+			GuiPackage.getInstance().updateCurrentGui();
 			Set commandObjects = (Set) commands.get(e.getActionCommand());
 			Iterator iter = commandObjects.iterator();
 			while (iter.hasNext()) {

File: src/core/org/apache/jmeter/util/SSLManager.java
Patch:
@@ -246,7 +246,7 @@ protected SSLManager() {
 	 */
 	public static final SSLManager getInstance() {
 		if (null == SSLManager.manager) {
-			return new JsseSSLManager(SSLManager.sslProvider);
+			SSLManager.manager = new JsseSSLManager(SSLManager.sslProvider);
 //			if (SSLManager.isSSLSupported) {
 //				String classname = null;
 //				classname = "org.apache.jmeter.util.JsseSSLManager"; // $NON-NLS-1$

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -229,7 +229,7 @@ public void setThreadName(String threadName) {
 
 	static {
 		if (startEarlier) {
-			log.warn("jmeterthread.startearlier=true (see jmeter.properties)");
+			log.info("jmeterthread.startearlier=true (see jmeter.properties)");
 		} else {
 			log.info("jmeterthread.startearlier=false (see jmeter.properties)");
 		}

File: src/functions/org/apache/jmeter/functions/Random.java
Patch:
@@ -74,7 +74,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 		long min = Long.parseLong(minimum.execute().trim());
 		long max = Long.parseLong(maximum.execute().trim());
 
-		long rand = min + (long) Math.random() * (max - min + 1);
+		long rand = min + (long) (Math.random() * (max - min + 1));
 
 		String randString = Long.toString(rand);
 		vars.put(varName.execute(), randString);

File: src/core/org/apache/jmeter/util/JsseSSLManager.java
Patch:
@@ -228,7 +228,7 @@ private SSLContext createContext() throws GeneralSecurityException {
         KeyManagerFactory managerFactory = 
             KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());             
         JmeterKeyStore keys = this.getKeyStore();
-        managerFactory.init(null, this.defaultpw.toCharArray());
+        managerFactory.init(null, defaultpw == null ? new char[]{} : defaultpw.toCharArray());
         KeyManager[] managers = managerFactory.getKeyManagers();
         log.debug(keys.getClass().toString());
         

File: src/core/org/apache/jmeter/control/TransactionSampler.java
Patch:
@@ -51,6 +51,7 @@ public TransactionSampler(){
 
 	public TransactionSampler(TransactionController controller, String name) {
         transactionController = controller;
+		setName(name); // ensure name is available for debugging
 		transactionSampleResult = new SampleResult();
 		transactionSampleResult.setSampleLabel(name);
 		// Assume success

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -163,7 +163,6 @@ public void add(SampleResult res) {
 	}
 
 	public synchronized void clearData() {
-		log.debug("Clear called", new Exception("Debug"));
 		model.clearData();
 		currentData = 0;
 		calc.clear();

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -300,7 +300,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
 
 		_threadName = TRUE.equalsIgnoreCase(props.getProperty(SAVE_THREAD_NAME_PROP, TRUE));
 
-		_bytes = TRUE.equalsIgnoreCase(props.getProperty(SAVE_BYTES_PROP, FALSE));
+		_bytes = TRUE.equalsIgnoreCase(props.getProperty(SAVE_BYTES_PROP, TRUE));
 		
 		_url = TRUE.equalsIgnoreCase(props.getProperty(SAVE_URL_PROP, FALSE));
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java
Patch:
@@ -70,7 +70,7 @@ public class AccessLogSampler extends HTTPSampler implements TestBean,ThreadList
 
 	private static final long serialVersionUID = 221L; // Remember to change this when the class changes ...
 	
-	public static final String DEFAULT_CLASS = "org.apache.jmeter.protocol.http.util.accesslog.TCLogParser";
+	public static final String DEFAULT_CLASS = "org.apache.jmeter.protocol.http.util.accesslog.TCLogParser"; // $NON-NLS-1$
 
 	/** private members used by class * */
 	transient private LogParser PARSER = null;

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -121,7 +121,7 @@ public class SaveService {
 
     // Internal information only
     private static String fileVersion = ""; // read from properties file// $NON-NLS-1$
-	private static final String FILEVERSION = "532077";// Expected value $NON-NLS-1$
+	private static final String FILEVERSION = "545311";// Expected value $NON-NLS-1$
 	private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -99,7 +99,8 @@ public class ViewResultsFullVisualizer extends AbstractVisualizer
 
 	private static final Logger log = LoggingManager.getLoggerForClass();
 
-	private static final DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z"); // ISO format $NON-NLS-1$
+	// N.B. these are not multi-threaded, so don't make it static
+	private final DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z"); // ISO format $NON-NLS-1$
 	
 	private static final String NL = "\n"; // $NON-NLS-1$
 
@@ -449,7 +450,7 @@ protected void showTextResponse(String response) {
 		xmlButton.setEnabled(true);
 	}
 
-	transient SAXErrorHandler saxErrorHandler = new SAXErrorHandler();
+	private static final SAXErrorHandler saxErrorHandler = new SAXErrorHandler();
 
 	private void showRenderXMLResponse(String response) {
 		String parsable="";

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -85,7 +85,7 @@ public void doAction(ActionEvent e) {
 				} else {
 					log.info("Loading file: " + f);
                     // Close the test plan currently open
-					ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.CLOSE));
+					if (!Close.performAction(e)) return;
 
 					FileServer.getFileServer().setBasedir(f.getAbsolutePath());
 				}

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -211,12 +211,12 @@ protected void addProperty(JMeterProperty property) {
 			clearTemporary(property);
 		}
 		JMeterProperty prop = getProperty(property.getName());
-        removeProperty(property.getName());
+        //removeProperty(property.getName());
 
 		if (prop instanceof NullProperty || (prop instanceof StringProperty && prop.getStringValue().equals(""))) {
 			propMap.put(property.getName(), property);
 		} else {
-            propMap.put(property.getName(), prop);
+            //propMap.put(property.getName(), prop);
 			prop.mergeIn(property);
 		}
 	}

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -896,11 +896,11 @@ public static JButton createSimpleButton(String name, ActionListener listener) {
 
 	/**
 	 * Report an error through a dialog box.
-	 * Title defaults to "Error"
+	 * Title defaults to "error_title" resource string
 	 * @param errorMsg - the error message.
 	 */
 	public static void reportErrorToUser(String errorMsg) {
-		reportErrorToUser(errorMsg, "Error");
+		reportErrorToUser(errorMsg, JMeterUtils.getResString("error_title"));
 	}
 
 	/**

File: src/functions/org/apache/jmeter/functions/CSVRead.java
Patch:
@@ -70,9 +70,8 @@ public class CSVRead extends AbstractFunction implements Serializable {
 	public CSVRead() {
 	}
 
-	public Object clone() {
-		CSVRead newReader = new CSVRead();
-		return newReader;
+	public Object clone() throws CloneNotSupportedException {
+		return super.clone();
 	}
 
 	/**

File: src/functions/org/apache/jmeter/functions/IntSum.java
Patch:
@@ -58,10 +58,10 @@ public IntSum() {
 	 * Clone this Add object.
 	 * 
 	 * @return A new Add object.
+	 * @throws CloneNotSupportedException 
 	 */
-	public Object clone() {
-		IntSum newIntSum = new IntSum();
-		return newIntSum;
+	public Object clone() throws CloneNotSupportedException {
+		return super.clone();
 	}
 
 	/**

File: src/functions/org/apache/jmeter/functions/JavaScript.java
Patch:
@@ -54,9 +54,8 @@ public class JavaScript extends AbstractFunction implements Serializable {
 	public JavaScript() {
 	}
 
-	public Object clone() {
-		JavaScript newJavaScript = new JavaScript();
-		return newJavaScript;
+	public Object clone() throws CloneNotSupportedException {
+		return super.clone();
 	}
 
 	/*

File: src/functions/org/apache/jmeter/functions/LogFunction.java
Patch:
@@ -63,8 +63,8 @@ public class LogFunction extends AbstractFunction implements Serializable {
 	public LogFunction() {
 	}
 
-	public Object clone() {
-		return new LogFunction();
+	public Object clone() throws CloneNotSupportedException {
+		return super.clone();
 	}
 
 	public synchronized String execute(SampleResult previousResult, Sampler currentSampler)

File: src/functions/org/apache/jmeter/functions/LogFunction2.java
Patch:
@@ -63,8 +63,8 @@ public class LogFunction2 extends AbstractFunction implements Serializable {
 	public LogFunction2() {
 	}
 
-	public Object clone() {
-		return new LogFunction2();
+	public Object clone() throws CloneNotSupportedException {
+		return super.clone();
 	}
 
 	public synchronized String execute(SampleResult previousResult, Sampler currentSampler)

File: src/functions/org/apache/jmeter/functions/MachineName.java
Patch:
@@ -49,8 +49,8 @@ public class MachineName extends AbstractFunction implements Serializable {
 	public MachineName() {
 	}
 
-	public Object clone() {
-		return new MachineName();
+	public Object clone() throws CloneNotSupportedException {
+		return super.clone();
 	}
 
 	public synchronized String execute(SampleResult previousResult, Sampler currentSampler)

File: src/functions/org/apache/jmeter/functions/Property.java
Patch:
@@ -63,8 +63,8 @@ public class Property extends AbstractFunction implements Serializable {
 	public Property() {
 	}
 
-	public Object clone() {
-		return new Property();
+	public Object clone() throws CloneNotSupportedException {
+		return super.clone();
 	}
 
 	public synchronized String execute(SampleResult previousResult, Sampler currentSampler)

File: src/functions/org/apache/jmeter/functions/Property2.java
Patch:
@@ -68,8 +68,8 @@ public class Property2 extends AbstractFunction implements Serializable {
 	public Property2() {
 	}
 
-	public Object clone() {
-		return new Property2();
+	public Object clone() throws CloneNotSupportedException {
+		return super.clone();
 	}
 
 	public synchronized String execute(SampleResult previousResult, Sampler currentSampler)

File: src/functions/org/apache/jmeter/functions/RegexFunction.java
Patch:
@@ -46,6 +46,8 @@
 public class RegexFunction extends AbstractFunction implements Serializable {
 	private static final Logger log = LoggingManager.getLoggerForClass();
 
+	private static final long serialVersionUID = 1L;
+	
 	public static final String ALL = "ALL"; //$NON-NLS-1$
 
 	public static final String RAND = "RAND"; //$NON-NLS-1$

File: src/functions/org/apache/jmeter/functions/SetProperty.java
Patch:
@@ -62,8 +62,8 @@ public class SetProperty extends AbstractFunction implements Serializable {
 	public SetProperty() {
 	}
 
-	public Object clone() {
-		return new SetProperty();
+	public Object clone() throws CloneNotSupportedException {
+		return super.clone();
 	}
 
 	public synchronized String execute(SampleResult previousResult, Sampler currentSampler)

File: src/functions/org/apache/jmeter/functions/SplitFunction.java
Patch:
@@ -65,8 +65,8 @@ public class SplitFunction extends AbstractFunction implements Serializable {
 	public SplitFunction() {
 	}
 
-	public Object clone() {
-		return new SplitFunction();
+	public Object clone() throws CloneNotSupportedException {
+		return super.clone();
 	}
 
 	public synchronized String execute(SampleResult previousResult, Sampler currentSampler)

File: src/functions/org/apache/jmeter/functions/TimeFunction.java
Patch:
@@ -40,6 +40,8 @@
  */
 public class TimeFunction extends AbstractFunction implements Serializable {
 
+	private static final long serialVersionUID = 1L;
+	
     private static final String KEY = "__time"; // $NON-NLS-1$
 
     private static final List desc = new LinkedList();

File: src/functions/org/apache/jmeter/functions/Variable.java
Patch:
@@ -58,8 +58,8 @@ public class Variable extends AbstractFunction implements Serializable {
 	public Variable() {
 	}
 
-	public Object clone() {
-		return new Variable();
+	public Object clone() throws CloneNotSupportedException {
+		return super.clone();
 	}
 
 	public synchronized String execute(SampleResult previousResult, Sampler currentSampler)

File: src/functions/org/apache/jmeter/functions/XPath.java
Patch:
@@ -66,9 +66,8 @@ public class XPath extends AbstractFunction implements Serializable {
 	public XPath() {
 	}
 
-	public Object clone() {
-		XPath newReader = new XPath();
-		return newReader;
+	public Object clone() throws CloneNotSupportedException {
+		return super.clone();
 	}
 
 	/**

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -117,6 +117,7 @@ public void doAction(ActionEvent e) throws IllegalUserActionException {
 		} finally {
             JOrphanUtils.closeQuietly(ostream);
 		}
+        GuiPackage.getInstance().updateCurrentGui();
 	}
 
 	// package protected to all for separate test code

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -46,7 +46,7 @@
 import com.thoughtworks.xstream.converters.ConversionException;
 
 /**
- * Load a new file, replacing whatever was present.
+ * Handles the Open (load a new file) and Merge commands.
  *
  */
 public class Load implements Command {

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -71,6 +71,7 @@ public class ActionNames {
     public static final String SAVE_GRAPHICS_ALL= "save_graphics_all"; // $NON-NLS-1$
     public static final String SSL_MANAGER      = "sslManager"; // $NON-NLS-1$
     public static final String SUB_TREE_LOADED  = "sub_tree_loaded"; // $NON-NLS-1$
+    public static final String SUB_TREE_MERGED  = "sub_tree_merged"; // $NON-NLS-1$
     public static final String SUB_TREE_SAVED   = "sub_tree_saved"; // $NON-NLS-1$
     public static final String WHAT_CLASS       = "what_class"; // $NON-NLS-1$
 

File: src/components/org/apache/jmeter/assertions/gui/SizeAssertionGui.java
Patch:
@@ -141,7 +141,7 @@ public int getState() {
 	}
 
 	private void init() {
-		setLayout(new VerticalLayout(5, VerticalLayout.LEFT, VerticalLayout.TOP));
+		setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));
 		setBorder(makeBorder());
 
 		add(makeTitlePanel());

File: src/components/org/apache/jmeter/assertions/gui/XMLAssertionGui.java
Patch:
@@ -68,7 +68,7 @@ public void configure(TestElement el) {
 	 * Inits the GUI.
 	 */
 	private void init() {
-		setLayout(new VerticalLayout(5, VerticalLayout.LEFT, VerticalLayout.TOP));
+		setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));
 		setBorder(makeBorder());
 
 		add(makeTitlePanel());

File: src/components/org/apache/jmeter/control/gui/InterleaveControlGui.java
Patch:
@@ -74,7 +74,7 @@ public String getLabelResource() {
 	}
 
 	private void init() {
-		setLayout(new VerticalLayout(5, VerticalLayout.LEFT, VerticalLayout.TOP));
+		setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));
 		setBorder(makeBorder());
 
 		add(makeTitlePanel());

File: src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java
Patch:
@@ -166,7 +166,7 @@ public JPopupMenu createPopupMenu() {
 	}
 
 	private void init() {
-		setLayout(new VerticalLayout(5, VerticalLayout.LEFT, VerticalLayout.TOP));
+		setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));
 		setBorder(makeBorder());
 		add(makeTitlePanel());
 

File: src/components/org/apache/jmeter/control/gui/OnceOnlyControllerGui.java
Patch:
@@ -47,7 +47,7 @@ public String getLabelResource() {
 	}
 
 	private void init() {
-		setLayout(new VerticalLayout(5, VerticalLayout.LEFT, VerticalLayout.TOP));
+		setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));
 		setBorder(makeBorder());
 		add(makeTitlePanel());
 	}

File: src/components/org/apache/jmeter/control/gui/RandomControlGui.java
Patch:
@@ -75,7 +75,7 @@ public String getLabelResource() {
 	}
 
 	private void init() {
-		setLayout(new VerticalLayout(5, VerticalLayout.LEFT, VerticalLayout.TOP));
+		setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));
 		setBorder(makeBorder());
 		add(makeTitlePanel());
 

File: src/components/org/apache/jmeter/control/gui/ThroughputControllerGui.java
Patch:
@@ -117,7 +117,7 @@ public String getLabelResource() {
 	}
 
 	private void init() {
-		setLayout(new VerticalLayout(5, VerticalLayout.LEFT, VerticalLayout.TOP));
+		setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));
 		setBorder(makeBorder());
 		add(makeTitlePanel());
 

File: src/components/org/apache/jmeter/sampler/gui/TestActionGui.java
Patch:
@@ -145,7 +145,7 @@ public void clear() {
     }    
 
 	private void init() {
-		setLayout(new VerticalLayout(5, VerticalLayout.LEFT, VerticalLayout.TOP));
+		setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));
 		setBorder(makeBorder());
 		add(makeTitlePanel());
 

File: src/components/org/apache/jmeter/timers/gui/ConstantTimerGui.java
Patch:
@@ -32,7 +32,6 @@
 /**
  * The GUI for ConstantTimer.
  * 
- * @version $Revision$ on $Date$
  */
 public class ConstantTimerGui extends AbstractTimerGui {
 	/**
@@ -102,13 +101,13 @@ public void configure(TestElement el) {
 	 * Initialize this component.
 	 */
 	private void init() {
-		setLayout(new VerticalLayout(5, VerticalLayout.LEFT, VerticalLayout.TOP));
+		setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));
 
 		setBorder(makeBorder());
 		add(makeTitlePanel());
 
 		Box delayPanel = Box.createHorizontalBox();
-		JLabel delayLabel = new JLabel(JMeterUtils.getResString("constant_timer_delay"));
+		JLabel delayLabel = new JLabel(JMeterUtils.getResString("constant_timer_delay"));//$NON-NLS-1$
 		delayPanel.add(delayLabel);
 
 		delayField = new JTextField(6);

File: src/protocol/mail/org/apache/jmeter/protocol/mail/sampler/gui/MailReaderSamplerGui.java
Patch:
@@ -170,11 +170,13 @@ public void modifyTestElement(TestElement te) {
 		mrs.setDeleteMessages(delete);
 	}
 
+	// TODO - fix GUI layout problems
+	
 	/*
 	 * Helper method to set up the GUI screen
 	 */
 	private void init() {
-		setLayout(new VerticalLayout(5, VerticalLayout.LEFT, VerticalLayout.TOP));
+		setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));
 		setBorder(makeBorder());
 		add(makeTitlePanel());
 

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParsingUtils.java
Patch:
@@ -61,10 +61,11 @@ private HtmlParsingUtils() {
 	}
 
 	/**
-	 * Check if anchor matches by checking:
+	 * Check if anchor matches by checking against:
+	 * - protocol
 	 * - domain
 	 * - path
-	 * - protocol
+	 * - parameter names
 	 * 
 	 * @param newLink target to match
 	 * @param config pattern to match against

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -140,6 +140,8 @@ public Dimension getPreferredSize() {
 	public void clear() {
 		super.clear();
 		getImages.setSelected(false);
+		isMon.setSelected(false);
 		urlConfigGui.clear();
+		embeddedRE.setText(""); // $NON-NLS-1$
 	}
 }

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -401,9 +401,8 @@ public void updateCurrentNode() {
 				TestElement el = currentNode.getTestElement();
 				comp.modifyTestElement(el);
 			}
-			if (currentNode != treeListener.getCurrentNode()) {
-				currentNodeUpdated = true;
-			}
+			// The current node is now updated
+			currentNodeUpdated = true;
 			currentNode = treeListener.getCurrentNode();
 		} catch (Exception e) {
 			log.error("Problem retrieving gui", e);

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -366,7 +366,7 @@ public void setTarget(JMeterTreeNode target) {
 	 * test tree. param serverResponse to be added to allow saving of the
 	 * server's response while recording. A future consideration.
 	 */
-	public void deliverSampler(HTTPSamplerBase sampler, TestElement[] subConfigs, SampleResult result) {
+	public synchronized void deliverSampler(HTTPSamplerBase sampler, TestElement[] subConfigs, SampleResult result) {
 		if (filterContentType(result) && filterUrl(sampler)) {
 			JMeterTreeNode myTarget = findTargetControllerNode();
 			Collection defaultConfigurations = findApplicableElements(myTarget, ConfigTestElement.class, false);

File: src/components/org/apache/jmeter/visualizers/StatGraphVisualizer.java
Patch:
@@ -64,6 +64,7 @@
 import org.apache.jorphan.gui.RendererUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.reflect.Functor;
+import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 
 /**
@@ -389,11 +390,12 @@ public void actionPerformed(ActionEvent event) {
                 writer = new FileWriter(output);
                 Vector data = this.getAllTableData();
                 OldSaveService.saveCSVStats(data,writer);
-                writer.close();
             } catch (FileNotFoundException e) {
                 log.warn(e.getMessage());
             } catch (IOException e) {
                 log.warn(e.getMessage());
+            } finally {
+                JOrphanUtils.closeQuietly(writer);
             }
         }
     }

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -675,7 +675,9 @@ private void run(String testFile, String logFile, boolean remoteStart, String re
 		} catch (Exception e) {
 			System.out.println("Error in NonGUIDriver " + e.toString());
 			log.error("", e);
-		}
+        } finally {
+            JOrphanUtils.closeQuietly(reader);
+        }
 	}
 
 	/**

File: src/functions/org/apache/jmeter/functions/XPathFileContainer.java
Patch:
@@ -29,6 +29,7 @@
 import javax.xml.transform.TransformerException;
 
 import org.apache.jorphan.logging.LoggingManager;
+import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 import org.apache.xpath.XPathAPI;
 import org.w3c.dom.NodeList;
@@ -100,8 +101,7 @@ private void load() throws IOException, FileNotFoundException, ParserConfigurati
 			log.warn(e.toString());
 			throw e;
 		} finally {
-			if (fis != null)
-				fis.close();
+            JOrphanUtils.closeQuietly(fis);
 		}
 	}
 

File: test/src/org/apache/jmeter/samplers/TestSampleResult.java
Patch:
@@ -163,7 +163,7 @@ public void testSubResults() throws Exception {
             calculator.addSample(resWithSubResults);
             assertEquals(600, calculator.getTotalBytes());
             assertEquals(1, calculator.getCount());
-            assertEquals(1d / (totalTime / 1000d), calculator.getRate(),0d);
+            assertEquals(1d / (totalTime / 1000d), calculator.getRate(),0.0001d); // Allow for some margin of error
             // Check that the throughput uses the time elapsed for the sub results
             assertFalse(1d / (sampleWithSubResultsTime / 1000d) <= calculator.getRate());
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/config/MultipartUrlConfig.java
Patch:
@@ -30,6 +30,7 @@
  */
 public class MultipartUrlConfig implements Serializable {
 
+	/** @deprecated use HTTPSamplerBase.MULTIPART_FORM_DATA instead */
 	public static final String MULTIPART_FORM = "multipart/form-data";
 
 	private String boundary, filename, fileField, mimetype;

File: src/components/org/apache/jmeter/assertions/gui/XPathAssertionGui.java
Patch:
@@ -78,7 +78,7 @@ public void configure(TestElement el) {
 	}
 
 	private void init() {
-		setLayout(new VerticalLayout(5, VerticalLayout.LEFT, VerticalLayout.TOP));
+		setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));
 		setBorder(makeBorder());
 
 		add(makeTitlePanel());

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -541,7 +541,9 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe
 		} catch (IOException e) {
 			res.sampleEnd();
 			// We don't want to continue using this connection, even if KeepAlive is set
-            conn.disconnect();
+            if (conn != null) { // May not exist
+            	conn.disconnect();
+            }
             conn=null; // Don't process again
 			return errorResult(e, res);
 		} finally {

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -189,6 +189,9 @@ public SampleResult(SampleResult res) {
 		setResponseMessage(res.getResponseMessage());
 		setDataType(res.getDataType());
 		setResponseHeaders(res.getResponseHeaders());
+        setContentType(res.getContentType());
+        setDataEncoding(res.getDataEncoding());
+		setURL(res.getURL());
 
 		addSubResult(res); // this will add res.getTime() to getTime().
 	}

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java
Patch:
@@ -45,7 +45,7 @@ public class PostWriter {
 
 	private final static byte[] CRLF = { 0x0d, 0x0A };
 
-	public static final String ENCODING = "iso-8859-1"; // $NON-NLS-1$
+	public static final String ENCODING = "ISO-8859-1"; // $NON-NLS-1$
 
     /** The form data that is going to be sent as url encoded */
     private byte[] formDataUrlEncoded;    
@@ -343,7 +343,7 @@ private void writeStartFileMultipart(OutputStream out, String filename,
         write(out, (new File(filename).getName()));
         writeln(out, "\""); // $NON-NLS-1$
         writeln(out, "Content-Type: " + mimetype); // $NON-NLS-1$
-        writeln(out, "Content-Transfer-Encoding: 8bit"); // $NON-NLS-1$
+        writeln(out, "Content-Transfer-Encoding: binary"); // $NON-NLS-1$
         out.write(CRLF);
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/config/MultipartUrlConfig.java
Patch:
@@ -124,7 +124,7 @@ public void parseArguments(String queryString) {
 				String name = parts[i].substring(index, parts[i].indexOf("\"", index));
 				index = parts[i].indexOf("\n", index) + 2;
 				String value = parts[i].substring(index).trim();
-				this.addEncodedArgument(name, value);
+				this.addArgument(name, value);
 			}
 		}
 	}

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -460,16 +460,16 @@ protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRe
 			int errorLevel = conn.getResponseCode();
             String respMsg = conn.getResponseMessage();
             if (errorLevel == -1){// Bug 38902 - sometimes -1 seems to be returned unnecessarily
+        		String hdr=conn.getHeaderField(0);
+        		if (hdr == null) hdr="(null)";
             	if (respMsg != null) {// Bug 41902 - NPE
 	                try {
 	                    errorLevel = Integer.parseInt(respMsg.substring(0, 3));
 	                    log.warn("ResponseCode==-1; parsed "+respMsg+ " as "+errorLevel);
 	                  } catch (NumberFormatException e) {
-	                    log.warn("ResponseCode==-1; could not parse "+respMsg);
+	                    log.warn("ResponseCode==-1; could not parse "+respMsg+" hdr: "+hdr);
 	                  }
             	} else {
-            		String hdr=conn.getHeaderField(0);
-            		if (hdr == null) hdr="(null)";
             		respMsg=hdr; // for result
                     log.warn("ResponseCode==-1 & null ResponseMessage. Header(0)= "+hdr);
             	}

File: src/components/org/apache/jmeter/assertions/BeanShellAssertion.java
Patch:
@@ -96,7 +96,7 @@ public String getParameters() {
 	 * @see org.apache.jmeter.assertions.Assertion#getResult(org.apache.jmeter.samplers.SampleResult)
 	 */
 	public AssertionResult getResult(SampleResult response) {
-		AssertionResult result = new AssertionResult();
+		AssertionResult result = new AssertionResult(getName());
 
 		if (bshInterpreter == null) {
 			result.setFailure(true);

File: src/components/org/apache/jmeter/assertions/DurationAssertion.java
Patch:
@@ -43,7 +43,7 @@ public class DurationAssertion extends AbstractTestElement implements Serializab
 	 * AssertionResult will reflect the success of the Sample.
 	 */
 	public AssertionResult getResult(SampleResult response) {
-		AssertionResult result = new AssertionResult();
+		AssertionResult result = new AssertionResult(getName());
 		result.setFailure(false);
 		long duration=getAllowedDuration();
 		if (duration > 0) {

File: src/components/org/apache/jmeter/assertions/HTMLAssertion.java
Patch:
@@ -75,7 +75,7 @@ public AssertionResult getResult(SampleResult inResponse) {
 		log.debug("HTMLAssertions.getResult() called");
 
 		// no error as default
-		AssertionResult result = new AssertionResult();
+		AssertionResult result = new AssertionResult(getName());
 
 		if (inResponse.getResponseData().length == 0) {
 			return result.setResultForNull();

File: src/components/org/apache/jmeter/assertions/MD5HexAssertion.java
Patch:
@@ -51,7 +51,7 @@ public class MD5HexAssertion extends AbstractTestElement implements Serializable
 	 */
 	public AssertionResult getResult(SampleResult response) {
 
-		AssertionResult result = new AssertionResult();
+		AssertionResult result = new AssertionResult(getName());
 		result.setFailure(false);
 		byte[] resultData = response.getResponseData();
 

File: src/components/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -254,7 +254,7 @@ public void setAssumeSuccess(boolean b) {
 	AssertionResult evaluateResponse(SampleResult response) {
 		boolean pass = true;
 		boolean not = (NOT & getTestType()) > 0;
-		AssertionResult result = new AssertionResult();
+		AssertionResult result = new AssertionResult(getName());
 		String toCheck = ""; // The string to check (Url or data)
 
 		if (getAssumeSuccess()) {

File: src/components/org/apache/jmeter/assertions/SizeAssertion.java
Patch:
@@ -64,7 +64,7 @@ public class SizeAssertion extends AbstractTestElement implements Serializable,
 	 * AssertionResult will reflect the success of the Sample.
 	 */
 	public AssertionResult getResult(SampleResult response) {
-		AssertionResult result = new AssertionResult();
+		AssertionResult result = new AssertionResult(getName());
 		result.setFailure(false);
 		resultData = response.getResponseData();
 		long resultSize = resultData.length;

File: src/components/org/apache/jmeter/assertions/XMLAssertion.java
Patch:
@@ -53,7 +53,7 @@ protected Object initialValue() {
 	 */
 	public AssertionResult getResult(SampleResult response) {
 		// no error as default
-		AssertionResult result = new AssertionResult();
+		AssertionResult result = new AssertionResult(getName());
 		byte[] responseData = response.getResponseData();
 		if (responseData.length == 0) {
 			return result.setResultForNull();

File: src/components/org/apache/jmeter/assertions/XMLSchemaAssertion.java
Patch:
@@ -63,7 +63,7 @@ public class XMLSchemaAssertion extends AbstractTestElement implements Serializa
 	 * 
 	 */
 	public AssertionResult getResult(SampleResult response) {
-		AssertionResult result = new AssertionResult();
+		AssertionResult result = new AssertionResult(getName());
 		// Note: initialised with error = failure = false
 
 		byte data[] = response.getResponseData();

File: src/components/org/apache/jmeter/assertions/XPathAssertion.java
Patch:
@@ -69,7 +69,7 @@ public class XPathAssertion extends AbstractTestElement implements Serializable,
 	 */
 	public AssertionResult getResult(SampleResult response) {
 		// no error as default
-		AssertionResult result = new AssertionResult();
+		AssertionResult result = new AssertionResult(getName());
 		byte[] responseData = response.getResponseData();
 		if (responseData.length == 0) {
 			return result.setResultForNull();

File: src/components/org/apache/jmeter/visualizers/AssertionVisualizer.java
Patch:
@@ -74,6 +74,7 @@ private String getAssertionResult(SampleResult res) {
 
 				if (item.isFailure() || item.isError()) {
 					display.append("\n\t"); // $NON-NLS-1$
+					display.append(item.getName() != null ? item.getName() + " : " : "");
 					display.append(item.getFailureMessage());
 				}
 			}

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -161,7 +161,7 @@ private void init() {
 		Border margin = new EmptyBorder(10, 10, 5, 10);
 
 		mainPanel.setBorder(margin);
-		mainPanel.setLayout(new VerticalLayout(5, VerticalLayout.LEFT));
+		mainPanel.setLayout(new VerticalLayout(5, VerticalLayout.BOTH));
 
 		// NAME
 		mainPanel.add(makeTitlePanel());

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -136,6 +136,8 @@ private static void makeAlias(String alias, String clazz) {
 			log.warn("Could not set up alias " + alias + " " + e.toString());
 		} catch (NoClassDefFoundError e) {
 			log.warn("Could not set up alias " + alias + " " + e.toString());
+		} catch (Throwable e) {// (e.g. InternalError : may happen on headless boxes 
+			log.error("Could not set up alias " + alias,e);
 		}
 	}
 

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -246,8 +246,10 @@ private HTTPSamplerBase createSampler() {
 			sampler.setFileField(urlConfig.getFileFieldName());
 			sampler.setFilename(urlConfig.getFilename());
 			sampler.setMimetype(urlConfig.getMimeType());
+        } else if (postData != null && postData.trim().startsWith("<?")) {
+            sampler.addNonEncodedArgument("", postData, ""); //used when postData is pure xml (ex. an xml-rpc call)
 		} else {
-			sampler.parseArguments(postData);
+			sampler.parseArguments(postData); //standard name=value postData
 		}
         if (log.isDebugEnabled())
     		log.debug("sampler path = " + sampler.getPath());

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -41,6 +41,7 @@ public abstract class HTMLParser {
     protected static final String ATT_HREF          = "href";// $NON-NLS-1$
     protected static final String ATT_REL           = "rel";// $NON-NLS-1$
     protected static final String ATT_SRC           = "src";// $NON-NLS-1$
+    protected static final String ATT_STYLE         = "style";// $NON-NLS-1$
     protected static final String ATT_TYPE          = "type";// $NON-NLS-1$
     protected static final String ATT_IS_IMAGE      = "image";// $NON-NLS-1$
     protected static final String TAG_APPLET        = "applet";// $NON-NLS-1$

File: src/jorphan/org/apache/jorphan/reflect/Functor.java
Patch:
@@ -118,8 +118,9 @@ public Object invoke() {
 		try {
 			return createMethod(getTypes()).invoke(invokee, getArgs());
 		} catch (Exception e) {
-			log.warn("Trouble functing method: "+methodName+" invokee: "+invokee.getClass().getName(), e);
-			throw new org.apache.jorphan.util.JMeterError(e); // JDK1.4
+			final String message = "Trouble functing method: "+methodName+" invokee: "+invokee.getClass().getName();
+			log.warn(message, e);
+			throw new org.apache.jorphan.util.JMeterError(message,e); // JDK1.4
 		}
 	}
 

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPExtSampler.java
Patch:
@@ -810,7 +810,7 @@ scope, getPropertyAsLong(COUNTLIM), getPropertyAsInt(TIMELIM),
 										iets.length() + 2) + "</attributevalue></attribute>";
 					}
 				}
-				responseData = responseData + "</searchresult></operation>";
+				responseData = responseData + "</searchresult>";
 			}
 
 		} catch (NamingException ex) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java
Patch:
@@ -50,9 +50,7 @@ public class AjpSampler extends HTTPSamplerBase {
 
     private static final char NEWLINE = '\n';
     private static final String COLON_SPACE = ": ";//$NON-NLS-1$
-    private static final String APPLICATION_X_WWW_FORM_URLENCODED =
-        "application/x-www-form-urlencoded";//$NON-NLS-1$
-
+ 
     /**
      *  Translates integer codes to request header names    
      */

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
Patch:
@@ -187,7 +187,7 @@ public void writeRequest(OutputStream out) throws IOException {
                 }
 
                 public long getContentLength() {
-                    return getXmlData().length();// so we don't generate chunked encoding
+                    return getXmlData().getBytes().length;// so we don't generate chunked encoding
                 }
 
                 public String getContentType() {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
Patch:
@@ -187,7 +187,7 @@ public void writeRequest(OutputStream out) throws IOException {
                 }
 
                 public long getContentLength() {
-                    return -1;
+                    return getXmlData().length();// so we don't generate chunked encoding
                 }
 
                 public String getContentType() {

File: src/junit/org/apache/jmeter/protocol/java/sampler/JUnitSampler.java
Patch:
@@ -331,7 +331,7 @@ public SampleResult sample(Entry entry) {
         } else {
             rlabel = JUnitSampler.class.getName();
         }
-        sresult.setSampleLabel(rlabel);
+        sresult.setSampleLabel(getName());// Bug 41522 - don't use rlabel here
         sresult.setSamplerData(getClassname() + "." + getMethod());   
         // check to see if the test class is null. if it is, we create
         // a new instance. this should only happen at the start of a

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/control/gui/TCPSamplerGui.java
Patch:
@@ -61,8 +61,8 @@ public TestElement createTestElement() {
 	 */
 	public void modifyTestElement(TestElement sampler) {
 		sampler.clear();
-		((TCPSampler) sampler).addTestElement(TcpDefaultPanel.createTestElement());
-		((TCPSampler) sampler).addTestElement(loginPanel.createTestElement());
+        sampler.addTestElement(TcpDefaultPanel.createTestElement());
+		sampler.addTestElement(loginPanel.createTestElement());
 		this.configureTestElement(sampler);
 	}
 

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -288,7 +288,7 @@ static boolean checkVersions() {
 		checkVersion(IntegerPropertyConverter.class, "493779"); // $NON-NLS-1$
 		checkVersion(LongPropertyConverter.class, "493779"); // $NON-NLS-1$
 		checkVersion(MultiPropertyConverter.class, "493779"); // $NON-NLS-1$
-		checkVersion(SampleResultConverter.class, "493779"); // $NON-NLS-1$
+		checkVersion(SampleResultConverter.class, "498477"); // $NON-NLS-1$
 
         // Not built until later, so need to use this method:
         try {

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParserHTMLParser.java
Patch:
@@ -143,7 +143,7 @@ public Iterator getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection
 					InputTag input = (InputTag) node;
 					// we check the input tag type for image
 					String strType = input.getAttribute(ATT_TYPE);
-					if (strType != null && strType.equalsIgnoreCase(ATT_IS_IMAGE)) {
+					if (ATT_IS_IMAGE.equalsIgnoreCase(strType)) {
 						// then we need to download the binary
 						binUrlStr = input.getAttribute(ATT_SRC);
 					}
@@ -161,7 +161,7 @@ public Iterator getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection
 					binUrlStr = tag.getAttribute(ATT_SRC);
 				} else if (node instanceof LinkTagTag) {
 					LinkTagTag script = (LinkTagTag) node;
-					if (script.getAttribute(ATT_REL).equalsIgnoreCase(STYLESHEET)) {
+					if (STYLESHEET.equalsIgnoreCase(script.getAttribute(ATT_REL))) {
 						binUrlStr = script.getAttribute(ATT_HREF);
 					}
 				} else if (node instanceof FrameTag) {

File: src/functions/org/apache/jmeter/functions/Random.java
Patch:
@@ -77,7 +77,7 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 		long min = Long.parseLong(minimum.execute().trim());
 		long max = Long.parseLong(maximum.execute().trim());
 
-		long rand = Math.round(min + Math.random() * (max - min));
+		long rand = min + (long) Math.random() * (max - min + 1);
 
 		String randString = Long.toString(rand);
 		vars.put(varName.execute(), randString);

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -287,7 +287,7 @@ static boolean checkVersions() {
 		checkVersion(IntegerPropertyConverter.class, "332820"); // $NON-NLS-1$
 		checkVersion(LongPropertyConverter.class, "332820"); // $NON-NLS-1$
 		checkVersion(MultiPropertyConverter.class, "332820"); // $NON-NLS-1$
-		checkVersion(SampleResultConverter.class, "409495"); // $NON-NLS-1$
+		checkVersion(SampleResultConverter.class, "466304"); // $NON-NLS-1$
 
         // Not built until later, so need to use this method:
         try {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java
Patch:
@@ -195,7 +195,8 @@ private static void setDefaultParams(){
         }
         
         // Handle old-style JMeter properties
-        String ver=JMeterUtils.getProperty("httpclient.version"); // $NON-NLS-1$
+        // Default to HTTP version 1.1
+        String ver=JMeterUtils.getPropDefault("httpclient.version","1.1"); // $NON-NLS-1$ $NON-NLS-2$
         try {
             params.setParameter(HttpMethodParams.PROTOCOL_VERSION, HttpVersion.parse("HTTP/"+ver));
         } catch (ProtocolException e) {

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/Publisher.java
Patch:
@@ -81,6 +81,7 @@ public Context initJNDI(boolean useProps, String jndi, String url, String useAut
 
 	public void initConnection(Context ctx, String connfactory, String topic) {
 		try {
+			ConnectionFactory.getTopicConnectionFactory(ctx,connfactory);
 			this.CONN = ConnectionFactory.getTopicConnection();
 			this.TOPIC = InitialContextFactory.lookupTopic(ctx, topic);
 			this.SESSION = this.CONN.createTopicSession(false, TopicSession.AUTO_ACKNOWLEDGE);

File: src/protocol/jms/org/apache/jmeter/protocol/jms/client/ReceiveSubscriber.java
Patch:
@@ -112,6 +112,7 @@ public Context initJNDI(boolean useProps, String jndi, String url, String useAut
 	 */
 	public void initConnection(Context ctx, String connfactory, String topic) {
 		try {
+			ConnectionFactory.getTopicConnectionFactory(ctx,connfactory);
 			this.CONN = ConnectionFactory.getTopicConnection();
 			this.TOPIC = InitialContextFactory.lookupTopic(ctx, topic);
 			this.SESSION = this.CONN.createTopicSession(false, TopicSession.AUTO_ACKNOWLEDGE);

File: src/core/org/apache/jmeter/save/converters/SampleResultConverter.java
Patch:
@@ -348,8 +348,8 @@ protected void retrieveAttributes(HierarchicalStreamReader reader, Unmarshalling
 		res.setResponseMessage(ConversionHelp.decode(reader.getAttribute(ATT_RESPONSE_MESSAGE)));
 		res.setSuccessful(Converter.getBoolean(reader.getAttribute(ATT_SUCCESS), true));
 		res.setThreadName(ConversionHelp.decode(reader.getAttribute(ATT_THREADNAME)));
-		res.setTime(Converter.getLong(reader.getAttribute(ATT_TIME)));
-		res.setTimeStamp(Converter.getLong(reader.getAttribute(ATT_TIME_STAMP)));
+		res.setStampAndTime(Converter.getLong(reader.getAttribute(ATT_TIME_STAMP)),
+				Converter.getLong(reader.getAttribute(ATT_TIME)));
 		res.setLatency(Converter.getLong(reader.getAttribute(ATT_LATENCY)));
 		res.setBytes(Converter.getInt(reader.getAttribute(ATT_BYTES)));
         // ATT_GRP_THRDS and ATT_ALL_THRDS are write only

File: src/core/org/apache/jmeter/util/Calculator.java
Patch:
@@ -105,7 +105,8 @@ public void addSample(SampleResult res) {
         if (startTime == 0){
             startTime=res.getStartTime();
         }
-        elapsedTime=res.getEndTime()-startTime;
+        startTime = Math.min(startTime, res.getStartTime());
+        elapsedTime = Math.max(elapsedTime, res.getEndTime()-startTime);
     }
 
 

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -318,7 +318,7 @@ public class SampleSaveConfiguration implements Cloneable, Serializable {
 			_formatter = null;
 		}
 
-		_timestamp = !_timeStampFormat.equalsIgnoreCase(NONE);
+		_timestamp = !NONE.equalsIgnoreCase(_timeStampFormat);// reversed compare allows for null
 
 		_saveAssertionResultsFailureMessage = TRUE.equalsIgnoreCase(props.getProperty(
 				ASSERTION_RESULTS_FAILURE_MESSAGE_PROP, FALSE));

File: src/components/org/apache/jmeter/extractor/RegexExtractor.java
Patch:
@@ -103,7 +103,7 @@ public void process() {
 		initTemplate();
 		JMeterContext context = getThreadContext();
 		SampleResult previousResult = context.getPreviousResult();
-		if (previousResult == null || previousResult.getResponseData().length == 0) {
+		if (previousResult == null) {
 			return;
 		}
 		log.debug("RegexExtractor processing result");

File: test/src/org/apache/jmeter/control/TestWhileController.java
Patch:
@@ -164,8 +164,7 @@ public void testAlwaysFailOK() throws Exception {
 			runTestAlwaysFail(true); // Should be OK
 		}
 
-		// TODO - re-enable when fix found
-		public void disabletestAlwaysFailBAD() throws Exception {
+		public void testAlwaysFailBAD() throws Exception {
 			runTestAlwaysFail(false); // Currently fails
 		}
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java
Patch:
@@ -277,8 +277,8 @@ HttpClient setupConnection(URL u, HttpMethodBase httpMethod, HTTPSampleResult re
                     new NTCredentials(
                             PROXY_USER, 
                             PROXY_PASS, 
-                            null, // "thishost",
-                            "" // domain
+                            localHost,
+                            ""  // domain
                 ));
             }
         }

File: src/core/org/apache/jmeter/gui/SavePropertyDialog.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.reflect.Functor;
+import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 
 /**
@@ -144,7 +145,8 @@ public void actionPerformed(ActionEvent e) {
 	public void actionPerformed(ActionEvent e) {
 		String action = e.getActionCommand();
 		Functor f = (Functor) functors.get(action);
-		f.invoke(saveConfig, new Object[] {Boolean.valueOf(((JCheckBox) e.getSource()).isSelected()) });
+		f.invoke(saveConfig, new Object[] {// JDK1.4 was Boolean.valueOf()
+                JOrphanUtils.valueOf(((JCheckBox) e.getSource()).isSelected()) });
 	}
 
 	/**

File: src/jorphan/org/apache/jorphan/util/Converter.java
Patch:
@@ -57,7 +57,7 @@ public static Object convert(Object value, Class toType) {
 		} else if (toType.equals(long.class) || toType.equals(Long.class)) {
 			return new Long(getLong(value));
 		} else if (toType.equals(boolean.class) || toType.equals(Boolean.class)) {
-			return Boolean.valueOf(getBoolean(value));
+			return  JOrphanUtils.valueOf(getBoolean(value));//JDK1.4 was Boolean.valueOf()
 		} else if (toType.equals(java.util.Date.class)) {
 			return getDate(value);
 		} else if (toType.equals(Calendar.class)) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -648,9 +648,8 @@ protected abstract HTTPSampleResult sample(URL u,
 	 * 
 	 * @param res
 	 *            result of the initial request - must contain an HTML response
-	 * @param createContainerResult
-	 *            whether to create a "container" or just use the provided
-	 *            <code>res</code> for that purpose
+	 * @param container
+	 *            for storing the results
 	 * @param frameDepth
 	 *            Depth of this target in the frame structure. Used only to
 	 *            prevent infinite recursion.

File: src/core/org/apache/jmeter/save/OldSaveService.java
Patch:
@@ -500,7 +500,7 @@ public static SampleResult getSampleResult(Configuration config) {
 		Configuration[] subResults = config.getChildren(SAMPLE_RESULT_TAG_NAME);
 
 		for (int i = 0; i < subResults.length; i++) {
-			result.addSubResult(getSampleResult(subResults[i]));
+			result.storeSubResult(getSampleResult(subResults[i]));
 		}
 		Configuration[] assResults = config.getChildren(ASSERTION_RESULT_TAG_NAME);
 

File: src/core/org/apache/jmeter/save/converters/SampleResultConverter.java
Patch:
@@ -309,7 +309,7 @@ protected boolean retrieveItem(HierarchicalStreamReader reader, UnmarshallingCon
 		if (subItem instanceof AssertionResult) {
 			res.addAssertionResult((AssertionResult) subItem);
 		} else if (subItem instanceof SampleResult) {
-			res.addSubResult((SampleResult) subItem);
+			res.storeSubResult((SampleResult) subItem);
 		} else if (nodeName.equals(TAG_RESPONSE_HEADER)) {
 			res.setResponseHeaders((String) subItem);
 		} else if (nodeName.equals(TAG_REQUEST_HEADER)) {

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.IOException;
 import java.io.StringReader;
 import java.io.UnsupportedEncodingException;
+import java.util.Date;
 
 import javax.swing.BorderFactory;
 import javax.swing.ButtonGroup;
@@ -282,6 +283,8 @@ public void valueChanged(TreeSelectionEvent e) {
                     }
 
 					statsDoc.insertString(statsDoc.getLength(), "Thread Name: "+res.getThreadName()+"\n", null);
+                    String startTime = new Date(res.getStartTime()).toString();
+                    statsDoc.insertString(statsDoc.getLength(), "Sample Start: "+startTime+"\n", null);
 					statsDoc.insertString(statsDoc.getLength(), "Load time: " + res.getTime() + "\n", null);
 
 					String responseCode = res.getResponseCode();

File: src/jorphan/org/apache/jorphan/collections/ConfigurationTree.java
Patch:
@@ -35,7 +35,7 @@
 
 /**
  * @author mike
- * 
+ * TODO does not appear to be used anywhere (except by the test class)
  */
 public class ConfigurationTree implements Serializable, Cloneable {
 	private static final long serialVersionUID = 1;
@@ -637,6 +637,7 @@ public static ConfigurationTree fromXML(Reader buf) throws IOException {
 	protected static boolean fromXML(Reader buf, ConfigurationTree tree, String[] line) throws IOException {
 		boolean done = false;
 		try {
+            //TODO BUG: readLine returns a String array - which one should be compared?
 			while (!done && !(line = readLine(buf, line)).equals("}")) {
 				int equals = line[0].indexOf("=");
 				if (line[0].endsWith("{")) {

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -26,6 +26,7 @@
 import java.beans.PropertyDescriptor;
 import java.beans.PropertyEditor;
 import java.beans.PropertyEditorManager;
+import java.io.Serializable;
 import java.text.MessageFormat;
 import java.util.Arrays;
 import java.util.Comparator;
@@ -512,7 +513,7 @@ private String groupDisplayName(String group) {
 	/**
 	 * Comparator used to sort properties for presentation in the GUI.
 	 */
-	private class PropertyComparator implements Comparator {
+	private class PropertyComparator implements Comparator, Serializable {
 		public int compare(Object o1, Object o2) {
 			return compare((PropertyDescriptor) o1, (PropertyDescriptor) o2);
 		}

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserSequence.java
Patch:
@@ -35,14 +35,14 @@
  * @version $Revision$
  */
 public class UserSequence implements Serializable {
-	transient private static Logger log = LoggingManager.getLoggerForClass();
+	private static final Logger log = LoggingManager.getLoggerForClass();
 
 	// -------------------------------------------
 	// Constants and Data Members
 	// -------------------------------------------
 	private List allUsers;
 
-	private Iterator indexOfUsers;
+	private transient Iterator indexOfUsers;
 
 	// -------------------------------------------
 	// Constructors

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java
Patch:
@@ -55,7 +55,7 @@ public class AjpSampler extends HTTPSamplerBase {
     /**
      *  Translates integer codes to request header names    
      */
-    public static final String []headerTransArray = {
+    private static final String []headerTransArray = {
         "accept",               //$NON-NLS-1$
         "accept-charset",       //$NON-NLS-1$
         "accept-encoding",      //$NON-NLS-1$
@@ -79,7 +79,7 @@ public class AjpSampler extends HTTPSamplerBase {
 
     static final int MAX_SEND_SIZE = 8*1024 - 4 - 4;
 
-    private Socket channel = null;
+    private transient Socket channel = null;
     private int lastPort = -1;
     private String lastHost = null;
     private String localName = null;
@@ -89,7 +89,7 @@ public class AjpSampler extends HTTPSamplerBase {
     private transient ByteArrayOutputStream responseData = new ByteArrayOutputStream();
     private int inpos = 0;
     private int outpos = 0;
-    private InputStream body = null;
+    private transient InputStream body = null;
 
     public AjpSampler() {
     }

File: src/components/org/apache/jmeter/visualizers/LineGraph.java
Patch:
@@ -51,7 +51,7 @@ public class LineGraph extends JPanel {
     protected String[] xAxisLabels, yAxisLabel;
     protected int width, height;
     
-    public static final Shape[] SHAPE_ARRAY = {PointChartProperties.SHAPE_CIRCLE,
+    private static final Shape[] SHAPE_ARRAY = {PointChartProperties.SHAPE_CIRCLE,
             PointChartProperties.SHAPE_DIAMOND,PointChartProperties.SHAPE_SQUARE,
             PointChartProperties.SHAPE_TRIANGLE};
 
@@ -60,7 +60,7 @@ public class LineGraph extends JPanel {
      * we can add more. Though more than 12 lines per graph will look 
      * rather busy and be hard to read.
      */
-    public static final Paint[] PAINT_ARRAY = {Color.BLACK,
+    private static final Paint[] PAINT_ARRAY = {Color.BLACK,
             Color.BLUE,Color.GREEN,Color.MAGENTA,Color.ORANGE,
             Color.RED,Color.YELLOW,Color.DARK_GRAY,Color.GRAY,Color.LIGHT_GRAY,
             Color.PINK,Color.CYAN};

File: src/core/org/apache/jmeter/util/JsseSSLManager.java
Patch:
@@ -309,7 +309,6 @@ public String[] getClientAliases(String keyType, Principal[] issuers) {
 		 */
 		public String[] getServerAliases(String keyType, Principal[] issuers) {
 			log.info("WrappedX509Manager: getServerAliases: ");
-			log.info(this.manager.getServerAliases(keyType, issuers).toString());
 			return this.manager.getServerAliases(keyType, issuers);
 		}
 
@@ -322,7 +321,6 @@ public String[] getServerAliases(String keyType, Principal[] issuers) {
 		 */
 		public X509Certificate[] getCertificateChain(String alias) {
 			log.info("WrappedX509Manager: getCertificateChain(" + alias + ")");
-			log.info(this.store.getCertificateChain().toString());
 			return this.store.getCertificateChain();
 		}
 

File: src/core/org/apache/jmeter/util/Calculator.java
Patch:
@@ -232,7 +232,7 @@ public String getRateString() {
      */
     public double getPageSize() {
         if (count > 0 && bytes > 0) {
-            return bytes / count;
+            return (double) bytes / count;
         }
         return 0.0;
     }

File: src/reports/org/apache/jmeter/testelement/LineChart.java
Patch:
@@ -34,9 +34,9 @@
 
 public class LineChart extends AbstractChart {
 
-    private static final String URL_DELIM = ","; // $NON-NLS-1$
-	public static final String REPORT_CHART_URLS = "ReportChart.chart.urls"; // $NON-NLS-1$
-    public static final Shape[] SHAPE_ARRAY = {PointChartProperties.SHAPE_CIRCLE,
+    private static final String URL_DELIM = ","; //$NON-NLS-1$
+	private static final String REPORT_CHART_URLS = "ReportChart.chart.urls"; //$NON-NLS-1$
+    private static final Shape[] SHAPE_ARRAY = {PointChartProperties.SHAPE_CIRCLE,
             PointChartProperties.SHAPE_DIAMOND,PointChartProperties.SHAPE_SQUARE,
             PointChartProperties.SHAPE_TRIANGLE};
     

File: src/core/org/apache/jmeter/testbeans/gui/PasswordEditor.java
Patch:
@@ -51,7 +51,7 @@ protected PasswordEditor() {
 	}
 
 	public String getAsText() {
-		return textField.getPassword().toString();
+		return new String(textField.getPassword());
 	}
 
 	public void setAsText(String value) {

File: src/core/org/apache/jmeter/reporters/FileReporter.java
Patch:
@@ -323,7 +323,7 @@ public void update(Graphics g) {
 		// draw grid
 		g.setColor(Color.gray);
 		int dataWidth = getDataWidth();
-		int increment = Math.round((width - 1) / (dataWidth - 1));
+		int increment = Math.round((float)(width - 1) / (dataWidth - 1));
 
 		/*
 		 * for (int t = 0; t < dataWidth; t++) { g.drawLine(t * increment, 0, t *

File: src/jorphan/org/apache/jorphan/collections/HashTree.java
Patch:
@@ -924,11 +924,11 @@ public HashTree search(Object key) {
 	/**
 	 * Method readObject.
 	 */
-	void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
+	private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
 		ois.defaultReadObject();
 	}
 
-	void writeObject(ObjectOutputStream oos) throws IOException {
+	private void writeObject(ObjectOutputStream oos) throws IOException {
 		oos.defaultWriteObject();
 	}
 

File: src/jorphan/org/apache/jorphan/collections/ListedHashTree.java
Patch:
@@ -208,11 +208,11 @@ public int size() {
 		return data.size();
 	}
 
-	void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
+	private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
 		ois.defaultReadObject();
 	}
 
-	void writeObject(ObjectOutputStream oos) throws IOException {
+	private void writeObject(ObjectOutputStream oos) throws IOException {
 		oos.defaultWriteObject();
 	}
 

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -113,7 +113,7 @@ public class SaveService {
 
     // Internal information only
     private static String fileVersion = ""; // read from properties file// $NON-NLS-1$
-	private static final String FILEVERSION = "406461";// Expected value $NON-NLS-1$
+	private static final String FILEVERSION = "408187";// Expected value $NON-NLS-1$
 
     static {
         log.info("Testplan (JMX) version: "+TESTPLAN_FORMAT+". Testlog (JTL) version: "+TESTLOG_FORMAT);

File: src/components/org/apache/jmeter/config/CSVDataSet.java
Patch:
@@ -48,7 +48,7 @@ public class CSVDataSet extends ConfigTestElement implements TestBean, LoopItera
 
     private transient String delimiter;
 
-    private transient boolean recycle;
+    private transient boolean recycle = true;
     
 	transient private String[] vars;
 

File: src/core/org/apache/jmeter/util/Calculator.java
Patch:
@@ -79,7 +79,7 @@ public void addValue(long newValue) {
 	}
 
     private void addValue(long newValue, int sampleCount) {
-        count =+ sampleCount;
+        count += sampleCount;
         minimum=Math.min(newValue, minimum);
         maximum=Math.max(newValue, maximum);
         double currentVal = newValue;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -60,7 +60,6 @@ public class HTTPSampler extends HTTPSamplerBase {
 		System.setProperty("java.protocol.handler.pkgs", // $NON-NLS-1$ 
                 JMeterUtils.getPropDefault("ssl.pkgs", // $NON-NLS-1$
 				"com.sun.net.ssl.internal.www.protocol")); // $NON-NLS-1$
-		System.setProperty("javax.net.ssl.debug", "all"); // $NON-NLS-1$  // $NON-NLS-2$
 	}
 
 	/**

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -286,6 +286,9 @@ public void start(String[] args) {
 			System.out.println("Incorrect Usage");
 			System.out.println(CLUtil.describeOptions(options).toString());
 		} catch (Exception e) {
+            if (log != null){
+                log.fatalError("An error occurred: ",e);
+            }
 			e.printStackTrace();
 			System.out.println("An error occurred: " + e.getMessage());
 			System.exit(-1);

File: src/jorphan/org/apache/jorphan/math/StatCalculator.java
Patch:
@@ -77,7 +77,7 @@ public void addBytes(long newValue) {
 	}
 
 	public void addAll(StatCalculator calc) {
-		Iterator iter = values.iterator();
+		Iterator iter = calc.values.iterator();
 		while (iter.hasNext()) {
 			addValue((Number) iter.next());
 		}

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -41,6 +41,8 @@ public class ActionNames {
     public static final String CLOSE            = "close"; // $NON-NLS-1$
     public static final String COPY             = "Copy"; // $NON-NLS-1$
     public final static String CUT              = "Cut"; // $NON-NLS-1$
+    public static final String DEBUG_ON        = "debug_on"; // $NON-NLS-1$
+    public static final String DEBUG_OFF        = "debug_off"; // $NON-NLS-1$
     public static final String DISABLE          = "disable"; // $NON-NLS-1$
     public final static String DRAG_ADD         = "drag_n_drop.add";//$NON-NLS-1$
     public static final String EDIT             = "edit"; // $NON-NLS-1$

File: src/htmlparser/org/htmlparser/tests/scannersTests/BaseHREFScannerTest.java
Patch:
@@ -79,7 +79,7 @@ public void testScan() throws ParserException {
 		// Base href tag should be the 4th tag
 		assertTrue(node[3] instanceof BaseHrefTag);
 		BaseHrefTag baseRefTag = (BaseHrefTag) node[3];
-		assertEquals("Base HREF Url", "http://www.abc.com", baseRefTag.getBaseUrl());
+		assertEquals("Base HREF Url", "http://www.abc.com/", baseRefTag.getBaseUrl());
 	}
 
 }

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -242,7 +242,8 @@ public void start(String[] args) {
 			log.info("os.name=" + System.getProperty("os.name"));// $NON-NLS-1$ $NON-NLS-2$
 			log.info("os.arch=" + System.getProperty("os.arch"));// $NON-NLS-1$ $NON-NLS-2$
 			log.info("os.version=" + System.getProperty("os.version"));// $NON-NLS-1$ $NON-NLS-2$
-			log.info("Locale=" + Locale.getDefault().getDisplayName());// $NON-NLS-1$
+			log.info("Default Locale=" + Locale.getDefault().getDisplayName());// $NON-NLS-1$
+            log.info("JMeter  Locale=" + JMeterUtils.getLocale().getDisplayName());// $NON-NLS-1$
 			log.info(JMeterUtils.getJMeterCopyright());
 			log.info("JMeterHome="+JMeterUtils.getJMeterHome());// $NON-NLS-1$
             

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -58,7 +58,7 @@ public void configure(TestElement element) {
 	}
 
 	public TestElement createTestElement() {
-		HTTPSamplerBase sampler = HTTPSamplerFactory.newInstance(HTTPSamplerFactory.HTTP_SAMPLER_JAVA);
+		HTTPSamplerBase sampler = HTTPSamplerFactory.newInstance();// create default sampler
 		modifyTestElement(sampler);
 		return sampler;
 	}

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -107,7 +107,7 @@ protected void sendPostData(URLConnection connection) throws IOException {
 	 * @param u
 	 *            <code>URL</code> of the URL request
 	 * @param method
-	 *            http/https
+	 *            GET, POST etc
 	 * @param res
 	 *            sample result to save request infos to
 	 * @return <code>HttpURLConnection</code> ready for .connect

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerFactory.java
Patch:
@@ -56,6 +56,7 @@ public static HTTPSamplerBase newInstance() {
      * @throws UnsupportedOperationException if alias is not recognised
      */
 	public static HTTPSamplerBase newInstance(String alias) {
+        if (alias.length() == 0) alias = DEFAULT_CLASSNAME;
 		if (alias.equals(HTTP_SAMPLER_JAVA)) {
 			return new HTTPSampler();
 		}

File: src/core/org/apache/jmeter/gui/action/ActionNames.java
Patch:
@@ -69,6 +69,7 @@ public class ActionNames {
     public static final String SSL_MANAGER      = "sslManager"; // $NON-NLS-1$
     public static final String SUB_TREE_LOADED  = "sub_tree_loaded"; // $NON-NLS-1$
     public static final String SUB_TREE_SAVED   = "sub_tree_saved"; // $NON-NLS-1$
+    public static final String WHAT_CLASS       = "what_class"; // $NON-NLS-1$
 
     // Prevent instantiation
     private ActionNames(){

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java
Patch:
@@ -531,7 +531,7 @@ public SampleResult sample() {
 			// peter lin.
             // Removed URL, as that is already stored elsewere
 			result.setSamplerData(fileContents);// WARNING - could be large
-			result.setDataEncoding(st.getResponseSOAPContext().getContentType());
+			result.setEncodingAndType(st.getResponseSOAPContext().getContentType());
 			// setting this is just a formality, since
 			// soap will return a descriptive error
 			// message, soap errors within the response

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -288,7 +288,7 @@ static boolean checkVersions() {
 		checkVersion(IntegerPropertyConverter.class, "332820"); // $NON-NLS-1$
 		checkVersion(LongPropertyConverter.class, "332820"); // $NON-NLS-1$
 		checkVersion(MultiPropertyConverter.class, "332820"); // $NON-NLS-1$
-		checkVersion(SampleResultConverter.class, "392445"); // $NON-NLS-1$
+		checkVersion(SampleResultConverter.class, "392452"); // $NON-NLS-1$
 
         // Not built until later, so need to use this method:
         try {

File: src/core/org/apache/jmeter/engine/util/ValueReplacer.java
Patch:
@@ -53,6 +53,9 @@ public ValueReplacer(TestPlan tp) {
 		setUserDefinedVariables(tp.getUserDefinedVariables());
 	}
 
+	boolean containsKey(String k){
+		return variables.containsKey(k);
+	}
 	public void setUserDefinedVariables(Map variables) {
 		this.variables = variables;
 	}

File: test/src/org/apache/jmeter/engine/util/TestValueReplacer.java
Patch:
@@ -58,7 +58,7 @@ public void setUp() {
 		public void testReverseReplacement() throws Exception {
 			ValueReplacer replacer = new ValueReplacer(variables);
 			assertTrue(variables.getUserDefinedVariables().containsKey("server"));
-			assertTrue(replacer.variables.containsKey("server"));
+			assertTrue(replacer.containsKey("server"));
 			TestElement element = new TestPlan();
 			element.setProperty(new StringProperty("domain", "jakarta.apache.org"));
 			List args = new ArrayList();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -584,7 +584,9 @@ public SampleResult sample() {
 	protected HTTPSampleResult downloadPageResources(HTTPSampleResult res, HTTPSampleResult container, int frameDepth) {
 		Iterator urls = null;
 		try {
-			if (res.getContentType().toLowerCase().indexOf("text/html") != -1) { // $NON-NLS-1$
+			if (res.getContentType().toLowerCase().indexOf("text/html") != -1  // $NON-NLS-1$
+                    && res.getResponseData().length > 0) // Bug 39205
+            {
 				urls = HTMLParser.getParser().getEmbeddedResourceURLs(res.getResponseData(), res.getURL());
 			}
 		} catch (HTMLParseException e) {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -112,7 +112,7 @@ public class SaveService {
 
     // Internal information only
     static String fileVersion = ""; // read from properties file// $NON-NLS-1$
-	static final String FILEVERSION = "388545";// Expected $NON-NLS-1$
+	static final String FILEVERSION = "390699";// Expected $NON-NLS-1$
 
     static {
         log.info("Testplan (JMX) version: "+TESTPLAN_FORMAT+". Testlog (JTL) version: "+TESTLOG_FORMAT);

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -278,7 +278,7 @@ static void checkVersions() {
 		checkVersion(IntegerPropertyConverter.class, "332820"); // $NON-NLS-1$
 		checkVersion(LongPropertyConverter.class, "332820"); // $NON-NLS-1$
 		checkVersion(MultiPropertyConverter.class, "332820"); // $NON-NLS-1$
-		checkVersion(SampleResultConverter.class, "388321"); // $NON-NLS-1$
+		checkVersion(SampleResultConverter.class, "389871"); // $NON-NLS-1$
 		/*
 		 * Should check this, but tricky to do, because not built until later.
 		 * 

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSamplerBeanInfo.java
Patch:
@@ -50,7 +50,7 @@ public JDBCSamplerBeanInfo() {
 		p.setValue(NOT_UNDEFINED, Boolean.TRUE);
 		p.setValue(DEFAULT, JDBCSampler.SELECT);
 		p.setValue(NOT_OTHER,Boolean.TRUE);
-		p.setValue(TAGS,new String[]{JDBCSampler.SELECT,"Update Statement"});
+		p.setValue(TAGS,new String[]{JDBCSampler.SELECT,JDBCSampler.UPDATE,JDBCSampler.CALLABLE});
 
 		p = property("query");
 		p.setValue(NOT_UNDEFINED, Boolean.TRUE);

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/URLRewritingModifier.java
Patch:
@@ -123,7 +123,7 @@ private void modify(HTTPSamplerBase sampler, String value) {
 			}
 		} else {
 			sampler.getArguments().removeArgument(getArgumentName());
-			sampler.getArguments().addArgument(new HTTPArgument(getArgumentName(), value, false));
+			sampler.getArguments().addArgument(new HTTPArgument(getArgumentName(), value, true));
 		}
 	}
 

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/URLRewritingModifier.java
Patch:
@@ -123,7 +123,7 @@ private void modify(HTTPSamplerBase sampler, String value) {
 			}
 		} else {
 			sampler.getArguments().removeArgument(getArgumentName());
-			sampler.getArguments().addArgument(new HTTPArgument(getArgumentName(), value, true));
+			sampler.getArguments().addArgument(new HTTPArgument(getArgumentName(), value, false));
 		}
 	}
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -249,7 +249,7 @@ public String getCookieHeaderForURL(URL url) {
 
         String protocol = url.getProtocol().trim();
 		if (!protocol.equalsIgnoreCase(HTTPSamplerBase.PROTOCOL_HTTP) && 
-             !protocol.equalsIgnoreCase(HTTPSamplerBase.PROTOCOL_HTTP)) {
+            !protocol.equalsIgnoreCase(HTTPSamplerBase.PROTOCOL_HTTPS)) {
 			return null;
         }
 

File: src/components/org/apache/jmeter/control/IncludeController.java
Patch:
@@ -1,4 +1,3 @@
-// $Header$
 /*
  * Copyright 2005 The Apache Software Foundation.
  *
@@ -24,6 +23,7 @@
 
 import org.apache.jmeter.save.SaveService;
 import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.testelement.property.StringProperty;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.logging.LoggingManager;
@@ -75,7 +75,7 @@ public Object clone() {
      * @param jmxfile
      */
     public void setIncludePath(String jmxfile) {
-        this.setProperty(INCLUDE_PATH,jmxfile);
+        this.setProperty(new StringProperty(INCLUDE_PATH,jmxfile));
     }
     
     /**

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -431,7 +431,7 @@ private void runPostProcessors(List extractors) {
 	}
 
 	private void delay(List timers) {
-		int sum = 0;
+		long sum = 0;
 		Iterator iter = timers.iterator();
 		while (iter.hasNext()) {
 			Timer timer = (Timer) iter.next();

File: src/htmlparser/org/htmlparser/scanners/BaseHrefScanner.java
Patch:
@@ -59,7 +59,7 @@ protected Tag createTag(TagData tagData, Tag tag, String url) throws ParserExcep
 		String baseUrl = (String) tag.getAttribute("HREF");
 		String absoluteBaseUrl = "";
 		if (baseUrl != null && baseUrl.length() > 0) {
-			absoluteBaseUrl = LinkProcessor.removeLastSlash(baseUrl.trim());
+			absoluteBaseUrl = baseUrl.trim();
 			processor.setBaseUrl(absoluteBaseUrl);
 		}
 		return new BaseHrefTag(tagData, absoluteBaseUrl);

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParserHTMLParser.java
Patch:
@@ -130,7 +130,7 @@ public Iterator getEmbeddedResourceURLs(byte[] html, URL baseUrl, URLCollection
 					try {
 						if (!baseref.equals(""))// Bugzilla 30713 // $NON-NLS-1$
 						{
-							baseUrl = new URL(baseUrl, baseHref.getBaseUrl() + "/"); // $NON-NLS-1$
+							baseUrl = new URL(baseUrl, baseref);
 						}
 					} catch (MalformedURLException e1) {
 						throw new HTMLParseException(e1);

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -409,6 +409,7 @@ private void makeRunMenu() {
 	private void makeEditMenu() {
 		// EDIT MENU
 		editMenu = new JMenu(JMeterUtils.getResString("edit"));
+        editMenu.setMnemonic('E');
 		// From the Java Look and Feel Guidelines: If all items in a menu
 		// are disabled, then disable the menu. Makes sense.
 		editMenu.setEnabled(false);

File: test/src/org/apache/jmeter/protocol/http/sampler/PostWriterTest.java
Patch:
@@ -35,7 +35,6 @@
 
 public class PostWriterTest extends TestCase {
     
-    // TODO: put PostWriter.CRLF public an use it instead of this one
     private final static byte[] CRLF = { 0x0d, 0x0A };
     
     private PostWriter postWriter;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java
Patch:
@@ -78,7 +78,7 @@ public void setHeaders(URLConnection connection, HTTPSampler sampler) throws IOE
 		((HttpURLConnection) connection).setRequestMethod("POST");
 
 		// If filename was specified then send the post using multipart syntax
-		String filename = sampler.getFileField();
+		String filename = sampler.getFilename();
 		if ((filename != null) && (filename.trim().length() > 0)) {
 			connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + BOUNDARY);
 			connection.setDoOutput(true);

File: src/components/org/apache/jmeter/extractor/XPathExtractor.java
Patch:
@@ -1,4 +1,3 @@
-//$Header$
 /*
  * Copyright 2005 The Apache Software Foundation.
  *

File: src/reports/org/apache/jmeter/gui/util/DirectoryDialoger.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * @author Peter Lin
- * @version $Revision: 325542 $
+ * @version $Revision$
  */
 public final class DirectoryDialoger {
 	/**

File: src/reports/org/apache/jmeter/gui/util/DirectoryPanel.java
Patch:
@@ -37,7 +37,7 @@
 
 /**
  * @author Michael Stover Created April 18, 2002
- * @version $Revision: 325542 $ Last updated: $Date: 2005-07-12 16:51:09 -0400 (Tue, 12 Jul 2005) $
+ * @version $Revision$ Last updated: $Date$
  */
 public class DirectoryPanel extends HorizontalPanel implements ActionListener {
 	protected JTextField filename = new JTextField(20);

File: test/src/org/apache/jmeter/functions/TestFileRowColContainer.java
Patch:
@@ -25,7 +25,7 @@
  * File data container for CSV (and similar delimited) files Data is accessible
  * via row and column number
  * 
- * @version $Revision: 325542 $
+ * @version $Revision$
  */
 public class TestFileRowColContainer {
 

File: test/src/org/apache/jmeter/assertions/PackageTest.java
Patch:
@@ -86,9 +86,9 @@ public void run() {
 					failed++;
 				}
 			}
-			synchronized (this) {
+			synchronized (PackageTest.this) {
 				threadsRunning--;
-				this.notifyAll();
+				PackageTest.this.notifyAll();
 			}
 		}
 	}

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -187,6 +187,7 @@ public void loadExistingFile() throws IOException {
 						SampleResult result = OldSaveService.getSampleResult(samples[i]);
 						sendToVisualizer(result);
 					}
+					parsedOK = true;
 				} catch (Exception e1) {
 					log.warn("Error parsing XML results " + e);
 					log.info("Assuming CSV format instead");

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -114,7 +114,9 @@ public void doAction(ActionEvent e) {
 			JMeterUtils.reportErrorToUser(msg);
 		} finally {
 			try {
-				reader.close();
+				if (reader!=null) {
+                    reader.close();
+                }
 			} catch (IOException e1) {
 				// ignored
 			}

File: src/reports/org/apache/jmeter/report/gui/action/ReportLoad.java
Patch:
@@ -113,7 +113,9 @@ public void doAction(ActionEvent e) {
 			JMeterUtils.reportErrorToUser(msg);
 		} finally {
 			try {
-				reader.close();
+				if (reader != null) {
+                    reader.close();
+                }
 			} catch (IOException e1) {
 				// ignored
 			}

File: src/reports/org/apache/jmeter/report/ReportTable.java
Patch:
@@ -25,5 +25,4 @@
  */
 public interface ReportTable {
     String[][] getTableData(List data);
-    List getChartElements();
 }

File: src/reports/org/apache/jmeter/report/gui/AbstractReportGui.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.jmeter.gui.NamePanel;
 import org.apache.jmeter.gui.util.ReportMenuFactory;
 import org.apache.jmeter.gui.util.VerticalPanel;
+import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.visualizers.Printable;
 import org.apache.jorphan.logging.LoggingManager;
@@ -65,12 +66,9 @@ public String getLabelResource() {
 		return "report_page";
 	}
 
-    /**
     public void configureTestElement(TestElement element) {
-        log.info("calling super.configureTestElement");
         super.configureTestElement(element);
     }
-    **/
     
     /* (non-Javadoc)
 	 * @see org.apache.jmeter.gui.JMeterGUIComponent#createPopupMenu()

File: src/reports/org/apache/jmeter/report/gui/tree/ReportTreeModel.java
Patch:
@@ -109,9 +109,6 @@ public ReportTreeNode addComponent(TestElement component,
 		guicomp.configure(component);
 		guicomp.modifyTestElement(component);
 		ReportGuiPackage.getInstance().getCurrentGui(); // put the gui object back
-		if (component instanceof AbstractChart) {
-			((AbstractChart)component).setParentTable((AbstractTable)node.getUserObject());
-		}
 		// to the way it was.
 		ReportTreeNode newNode = new ReportTreeNode(component, this);
 

File: src/reports/org/apache/jmeter/testelement/ReportPage.java
Patch:
@@ -42,7 +42,6 @@ public class ReportPage extends AbstractTestElement implements Serializable {
      * No-arg constructor.
      */
     public ReportPage() {
-        // setProperty(TestElement.GUI_CLASS,AbstractReportGui.class.getName());
     }
 
     public static ReportPage createReportPage(String name) {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -240,7 +240,7 @@ public synchronized static void saveTestElement(TestElement elem, Writer writer)
 
 	// Extract version digits from String of the form #Revision: n.mm #
 	// (where # is actually $ above)
-	private static final String REVPFX = "$Revision$NON-NLS-1$";
+	private static final String REVPFX = "$Revision$NON-NLS-1$
 
 	private static final String REVSFX = " $"; // $NON-NLS-1$
 

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -240,7 +240,7 @@ public synchronized static void saveTestElement(TestElement elem, Writer writer)
 
 	// Extract version digits from String of the form #Revision: n.mm #
 	// (where # is actually $ above)
-	private static final String REVPFX = "$Revision$NON-NLS-1$
+	private static final String REVPFX = "$Revision$NON-NLS-1$";
 
 	private static final String REVSFX = " $"; // $NON-NLS-1$
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -129,7 +129,7 @@ public Collection getAddList() {
 	 * Return the record at index i
 	 */
 	public Authorization get(int i) {
-		return (Authorization) getAuthObjects().get(i);
+		return (Authorization) getAuthObjects().get(i).getObjectValue();
 	}
 
 	public String getAuthHeaderForURL(URL url) {
@@ -216,7 +216,7 @@ public void save(String authFile) throws IOException {
 		PrintWriter writer = new PrintWriter(new FileWriter(file));
 		writer.println("# JMeter generated Authorization file");
 		for (int i = 0; i < getAuthObjects().size(); i++) {
-			Authorization auth = (Authorization) getAuthObjects().get(i);
+			Authorization auth = (Authorization) getAuthObjects().get(i).getObjectValue();
 			writer.println(auth.toString());
 		}
 		writer.flush();
@@ -268,7 +268,7 @@ public void remove(int index) {
 	/**
 	 * Return the number of records.
 	 */
-	public int size() {
+	public int getAuthCount() {
 		return getAuthObjects().size();
 	}
 

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -69,7 +69,7 @@ public class SaveService {
 
     // Internal information only
     private static String fileVersion = ""; // read from properties file
-	private static final String FILEVERSION = "325411";
+	private static final String FILEVERSION = "327020";
 
 	// Helper method to simplify alias creation from properties
 	private static void makeAlias(String alias, String clazz) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
Patch:
@@ -729,6 +729,8 @@ protected HTTPSampleResult followRedirects(HTTPSampleResult res, int frameDepth)
 		totalRes.setResponseMessage(lastRes.getResponseMessage());
 		totalRes.setDataType(lastRes.getDataType());
 		totalRes.setResponseHeaders(lastRes.getResponseHeaders());
+        totalRes.setContentType(lastRes.getContentType());
+        totalRes.setDataEncoding(lastRes.getDataEncoding());
 		return totalRes;
 	}
 

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -121,14 +121,15 @@ public SampleSaveConfiguration getSaveConfig() {
 
 	private List subResults;
 
-	private String dataType;
+	private String dataType=""; // Don't return null if not set
 
 	private boolean success;
 
 	private Set files;
 
 	private String dataEncoding;// (is this really the character set?) e.g.
 								// ISO-8895-1, UTF-8
+	// If null, then DEFAULT_ENCODING is returned by getDataEncoding()
 
 	private long time = 0;
 

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -215,7 +215,7 @@ private static void writeFileStart(PrintWriter writer, SampleSaveConfiguration s
 			writer.println(XML_HEADER);
 			writer.println(TESTRESULTS_START_V1_1);
 		} else if (saveConfig.saveFieldNames()) {
-			writer.println(OldSaveService.printableFieldNamesToString());
+			writer.println(OldSaveService.printableFieldNamesToString(saveConfig));
 		}
 	}
 

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -146,7 +146,8 @@ public static void addEditMenu(JPopupMenu menu, boolean removable) {
 	public static void addFileMenu(JPopupMenu menu) {
 		addSeparator(menu);
 		menu.add(makeMenuItem(JMeterUtils.getResString("open"), "Open", "open"));
-		menu.add(makeMenuItem(JMeterUtils.getResString("save_as"), "Save As", "save_as"));
+        menu.add(makeMenuItem(JMeterUtils.getResString("menu_merge"), "Merge", "merge"));
+        menu.add(makeMenuItem(JMeterUtils.getResString("save_as"), "Save As", "save_as"));
 		JMenuItem savePicture = makeMenuItem(JMeterUtils.getResString("save_as_image"), "Save Image", "save_graphics",
 				KeyStroke.getKeyStroke(KeyEvent.VK_G, KeyEvent.CTRL_MASK));
 		menu.add(savePicture);

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -81,7 +81,7 @@ public final class MenuFactory {
 	// MENU_ADD_xxx - controls which items are in the ADD menu
 	// MENU_PARENT_xxx - controls which items are in the Insert Parent menu
 	private static final String[] MENU_ADD_CONTROLLER = new String[] { MenuFactory.CONTROLLERS, MenuFactory.SAMPLERS,
-			MenuFactory.CONFIG_ELEMENTS, MenuFactory.TIMERS, MenuFactory.LISTENERS, MenuFactory.PRE_PROCESSORS,
+			MenuFactory.ASSERTIONS, MenuFactory.CONFIG_ELEMENTS, MenuFactory.TIMERS, MenuFactory.LISTENERS, MenuFactory.PRE_PROCESSORS,
 			MenuFactory.POST_PROCESSORS };
 
 	private static final String[] MENU_PARENT_CONTROLLER = new String[] { MenuFactory.CONTROLLERS };

File: src/core/org/apache/jmeter/threads/gui/ThreadGroupGui.java
Patch:
@@ -180,7 +180,7 @@ public void itemStateChanged(ItemEvent ie) {
 	public JPopupMenu createPopupMenu() {
 		JPopupMenu pop = new JPopupMenu();
 		pop.add(MenuFactory.makeMenus(new String[] { MenuFactory.CONTROLLERS, MenuFactory.LISTENERS,
-				MenuFactory.SAMPLERS, MenuFactory.TIMERS, MenuFactory.CONFIG_ELEMENTS, MenuFactory.PRE_PROCESSORS,
+				MenuFactory.SAMPLERS, MenuFactory.ASSERTIONS,MenuFactory.TIMERS, MenuFactory.CONFIG_ELEMENTS, MenuFactory.PRE_PROCESSORS,
 				MenuFactory.POST_PROCESSORS }, JMeterUtils.getResString("Add"), "Add"));
 		MenuFactory.addEditMenu(pop, true);
 		MenuFactory.addFileMenu(pop);

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/config/DataSourceElement.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.jmeter.config.ConfigElement;
 import org.apache.jmeter.engine.event.LoopIterationEvent;
 import org.apache.jmeter.testbeans.TestBean;
+import org.apache.jmeter.testbeans.TestBeanHelper;
 import org.apache.jmeter.testelement.AbstractTestElement;
 import org.apache.jmeter.testelement.TestListener;
 import org.apache.jorphan.logging.LoggingManager;
@@ -89,6 +90,8 @@ public void testIterationStart(LoopIterationEvent event) {
 	public void testStarted() {
 		if (!started[0]) {
 			try {
+                this.setRunningVersion(true);
+                TestBeanHelper.prepare(this);
 				initPool();
 			} catch (Exception e) {
 				log.error("Unable to start database connection pool.", e);

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -193,7 +193,7 @@ public void loadExistingFile() throws IOException {
 					dataReader = new BufferedReader(new FileReader(getFilename()));
 					String line;
 					while ((line = dataReader.readLine()) != null) {
-						sendToVisualizer(OldSaveService.makeResultFromDelimitedString(line));
+						sendToVisualizer(OldSaveService.makeResultFromDelimitedString(line,getSaveConfig()));
 					}
 					parsedOK = true;
 				}

File: src/core/org/apache/jmeter/samplers/SampleSenderFactory.java
Patch:
@@ -46,6 +46,8 @@ static SampleSender getInstance(RemoteSampleListener listener) {
 		} else if(type.equalsIgnoreCase("Full")) {
 			StandardSampleSender s = new StandardSampleSender(listener);
 			return s;
+		}  else if(type.equalsIgnoreCase("Stripped Batch")) {
+			return new DataStrippingSampleSender(new BatchSampleSender(listener));
 		} else {
 			return new DataStrippingSampleSender(listener);
 		}

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -225,7 +225,7 @@ private static void checkVersions() {
 		checkVersion(IntegerPropertyConverter.class, "1.4");
 		checkVersion(LongPropertyConverter.class, "1.4");
 		checkVersion(MultiPropertyConverter.class, "1.4");
-		checkVersion(SampleResultConverter.class, "1.9");
+		checkVersion(SampleResultConverter.class, "1.10");
 		/*
 		 * Should check this, but tricky to do, because not built until later.
 		 * 

File: src/core/org/apache/jmeter/testbeans/BeanInfoSupport.java
Patch:
@@ -72,6 +72,8 @@ public abstract class BeanInfoSupport extends SimpleBeanInfo {
 	public static final String NOT_EXPRESSION = GenericTestBeanCustomizer.NOT_EXPRESSION;
 
 	public static final String NOT_OTHER = GenericTestBeanCustomizer.NOT_OTHER;
+	
+	public static final String MULTILINE = "multiline";
 
 	public static final String DEFAULT = GenericTestBeanCustomizer.DEFAULT;
 

File: src/core/org/apache/jmeter/testelement/property/AbstractProperty.java
Patch:
@@ -38,6 +38,7 @@
 
 package org.apache.jmeter.testelement.property;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.Map;
@@ -324,7 +325,8 @@ protected Collection normalizeList(Collection coll) {
 				try {
 					newColl = (Collection) coll.getClass().newInstance();
 				} catch (Exception e) {
-					log.error("Bad collection", e);
+					newColl = new ArrayList();
+					log.warn("Bad collection", e);
 				}
 			}
 			newColl.add(convertObject(item));

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -41,7 +41,7 @@ public class JMeterVersion {
 	 * JMeterUtils This ensures that JMeterUtils always gets the correct
 	 * version, even if it is not re-compiled during the build.
 	 */
-	private static final String VERSION = "2.1.20050815";
+	private static final String VERSION = "2.1.20050824";
 
 	static final String COPYRIGHT = "Copyright (c) 1998-2005 The Apache Software Foundation";
 

File: src/core/org/apache/jmeter/engine/util/ValueReplacer.java
Patch:
@@ -120,8 +120,8 @@ private Collection replaceValues(PropertyIterator iter, ValueTransformer transfo
 			}
 			if (val instanceof StringProperty) {
 				// Must not convert TestElement.gui_class etc
-				// TODO but perhaps we want to convert TestElement.name ?
-				if (!val.getName().startsWith("TestElement.")) {
+				if (!val.getName().equals(TestElement.GUI_CLASS) &&
+                        !val.getName().equals(TestElement.TEST_CLASS)) {
 					val = transform.transformValue(val);
 					if (log.isDebugEnabled()) {
 						log.debug("Replacement result: " + val);

File: src/core/org/apache/jmeter/gui/SavePropertyDialog.java
Patch:
@@ -92,7 +92,7 @@ protected void dialogInit() {
 			JPanel checkPanel = new JPanel(new GridLayout(x, 3));
 			for (int i = 0; i < methods.length; i++) {
 				String name = methods[i].getName();
-				if (name.startsWith("save")) {
+				if (name.startsWith("save") && methods[i].getParameterTypes().length == 0) {
 					try {
 						name = name.substring(4);
 						JCheckBox check = new JCheckBox(JMeterUtils.getResString("save " + name), ((Boolean) methods[i]

File: src/core/org/apache/jmeter/testelement/property/FunctionProperty.java
Patch:
@@ -74,6 +74,7 @@ public String getStringValue() {
 			log.debug("Not running version, return raw function string");
 			return function.getRawParameters();
 		} else {
+            if(!ctx.isSamplingStarted()) return function.execute();
 			log.debug("Running version, executing function");
 			int iter = ctx.getVariables() != null ? ctx.getVariables().getIteration() : -1;
 			if (iter < testIteration) {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler2.java
Patch:
@@ -536,11 +536,11 @@ private void saveConnectionCookies(HttpState state, CookieManager cookieManager)
 	}
 
 	public void threadStarted() {
-		log.info("Thread Started");
+		log.debug("Thread Started");
 	}
 
 	public void threadFinished() {
-		log.info("Thread Finished");
+		log.debug("Thread Finished");
 		if (httpConn != null)
 			httpConn.close();
 	}

File: src/core/org/apache/jmeter/gui/action/ActionRouter.java
Patch:
@@ -267,7 +267,6 @@ private void populateCommandMap() {
 			while (iterClasses.hasNext()) {
 				String strClassName = (String) iterClasses.next();
                 if (strClassName.startsWith("org.apache.jmeter.gui")) {
-                    log.info("classname:: " + strClassName);
                     commandClass = Class.forName(strClassName);
                     if (!Modifier.isAbstract(commandClass.getModifiers())) {
                         command = (Command) commandClass.newInstance();

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/JMSSampler.java
Patch:
@@ -139,9 +139,9 @@ public SampleResult sample(Entry entry) {
 					}
 				} else {
 					if (replyMsg instanceof TextMessage) {
-						res.setResponseData(((TextMessage) replyMsg).getText().getContentLength());
+						res.setResponseData(((TextMessage) replyMsg).getText().getBytes());
 					} else {
-						res.setResponseData(replyMsg.toString().getContentLength());
+						res.setResponseData(replyMsg.toString().getBytes());
 					}
 					res.setSuccessful(true);
 				}

File: src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java
Patch:
@@ -184,6 +184,7 @@ private JPanel createClassPanel()
         if (classnameCombo != null){
             panel.add(classnameCombo);
         }
+        constructorLabel.setText("");
         panel.add(constructorLabel);
         panel.add(methodLabel);
         if (methodName != null){
@@ -277,7 +278,8 @@ public void instantiateClass(){
         String className =
             ((String) classnameCombo.getSelectedItem());
         if (className != null) {
-            TESTCLASS = (TestCase)JUnitSampler.getClassInstance(className,"");
+            TESTCLASS = (TestCase)JUnitSampler.getClassInstance(className,
+                    constructorLabel.getText());
             if (TESTCLASS == null) {
                 clearMethodCombo();
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java
Patch:
@@ -295,6 +295,7 @@ public Object clone() {
 					if (TestCloneable.class.isAssignableFrom(Class.forName(filterClassName))) {
 						initFilter();
 						s.filter = (Filter) ((TestCloneable) filter).clone();
+                        instantiateParser();
 					}
 				} catch (Exception e) {
 					log.warn("Could not clone cloneable filter", e);

File: src/core/org/apache/jmeter/DynamicClassLoader.java
Patch:
@@ -54,6 +54,6 @@ public DynamicClassLoader(URL[] arg0, ClassLoader arg1,
 	}
 
     public void addURL(URL url) {
-        this.addURL(url);
+        super.addURL(url);
     }
 }

File: src/junit/org/apache/jmeter/protocol/java/control/gui/JUnitTestSamplerGui.java
Patch:
@@ -164,9 +164,9 @@ private JPanel createClassPanel()
         methodLabel.setLabelFor(methodName);
         
         VerticalPanel panel = new VerticalPanel();
+        panel.add(filterpkg);
         panel.add(label);
         filterpkg.addChangeListener(this);
-        panel.add(filterpkg);
 
         if (classnameCombo != null){
             panel.add(classnameCombo);

File: src/junit/org/apache/jmeter/examples/junit/SampleTestCase2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2001-2005 The Apache Software Foundation.
+ * Copyright 2005 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -55,6 +55,6 @@ public void testTwo(){
     }
     
     public int nextInt(){
-        return RANDOM.nextInt();
+        return RANDOM.nextInt(1000);
     }
 }

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Patch:
@@ -108,6 +108,8 @@ public SampleResult sample(Entry e)
             }
 
             res.setDataType(SampleResult.TEXT);
+            // Bug 31184 - make sure encoding is specified
+            res.setDataEncoding(System.getProperty("file.encoding"));
             res.setSuccessful(true);
         }
         catch (SQLException ex)

File: src/core/org/apache/jmeter/engine/RemoteJMeterEngineImpl.java
Patch:
@@ -23,6 +23,7 @@
 import java.rmi.registry.LocateRegistry;
 import java.rmi.registry.Registry;
 
+import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
@@ -38,7 +39,8 @@ public class RemoteJMeterEngineImpl
     transient private static Logger log = LoggingManager.getLoggerForClass();
     JMeterEngine backingEngine;
 
-    public static final int DEFAULT_RMI_PORT = 1099;
+    public static final int DEFAULT_RMI_PORT = 
+        JMeterUtils.getPropDefault("server.rmi.port",1099);
     
     public RemoteJMeterEngineImpl() throws RemoteException
     {

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -257,7 +257,7 @@ private static void checkVersion(Class clazz, String expected)
                null);
          actual = extractVersion(actual);
       }
-      catch (Exception e)
+      catch (Exception ignored)
       {
          //Not needed
       }
@@ -288,7 +288,7 @@ private static void checkVersions()
       checkVersion(TestElementConverter.class, "1.3");
       checkVersion(TestElementPropertyConverter.class, "1.6");
       checkVersion(ScriptWrapperConverter.class, "1.5");
-      checkVersion(TestResultWrapperConverter.class, "1.3");
+      checkVersion(TestResultWrapperConverter.class, "1.4");
       if (!PROPVERSION.equalsIgnoreCase(propertiesVersion))
       {
          log.warn("Property file - expected " + PROPVERSION + ", found "

File: src/core/org/apache/jmeter/save/converters/TestResultWrapperConverter.java
Patch:
@@ -42,6 +42,9 @@
 public class TestResultWrapperConverter extends AbstractCollectionConverter
 {
 
+    /** Returns the converter version; used to check for possible incompatibilities */
+    public static String getVersion(){  return "$Revision$";}
+
    /**
     * @param arg0
     * @param arg1

File: src/core/org/apache/jmeter/save/ScriptWrapperConverter.java
Patch:
@@ -61,7 +61,7 @@ public void marshal(Object arg0, HierarchicalStreamWriter writer,
       ScriptWrapper wrap = (ScriptWrapper)arg0;
       writer.addAttribute("version",SaveService.version);
       writer.addAttribute("properties",SaveService.propertiesVersion);
-      writer.startNode(classMapper.lookupName(wrap.testPlan.getClass()));
+      writer.startNode(classMapper.serializedClass(wrap.testPlan.getClass()));
       context.convertAnother(wrap.testPlan);
       writer.endNode();
    }
@@ -84,9 +84,9 @@ protected Class getNextType(HierarchicalStreamReader reader)
       String classAttribute = reader.getAttribute("class");
       Class type;
       if (classAttribute == null) {
-          type = classMapper.lookupType(reader.getNodeName());
+          type = classMapper.realClass(reader.getNodeName());
       } else {
-          type = classMapper.lookupType(classAttribute);
+          type = classMapper.realClass(classAttribute);
       }
       return type;
    }

File: src/core/org/apache/jmeter/save/converters/TestElementConverter.java
Patch:
@@ -71,12 +71,12 @@ public void marshal(Object arg0, HierarchicalStreamWriter writer,
    public Object unmarshal(HierarchicalStreamReader reader,
          UnmarshallingContext context)
    {
-      String classAttribute = reader.getAttribute(classAttributeIdentifier);
+      String classAttribute = reader.getAttribute("class");
       Class type;
       if (classAttribute == null) {
-          type = classMapper.lookupType(reader.getNodeName());
+          type = mapper().realClass(reader.getNodeName());
       } else {
-          type = classMapper.lookupType(classAttribute);
+          type = mapper().realClass(classAttribute);
       }
       try
       {

File: src/core/org/apache/jmeter/assertions/AssertionResult.java
Patch:
@@ -128,8 +128,7 @@ public AssertionResult setResultForFailure(String message)
     /**
      * Convenience method for setting up results where the response was null 
      * 
-     * @param message the message to set
-     * @return this
+     * @return assertion result with appropriate fields set up
      */	
     public AssertionResult setResultForNull(){
 		error=false;

File: src/core/org/apache/jmeter/save/converters/TestElementPropertyConverter.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.jmeter.save.converters;
 
 import org.apache.jmeter.config.ConfigTestElement;
-import org.apache.jmeter.protocol.http.control.Header;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
@@ -118,7 +117,8 @@ public Object unmarshal(HierarchicalStreamReader reader,
             if (isHeader) {
                 String name = subProp.getName();
                 if (TestElement.NAME.equals(name)){
-                    subProp.setName(Header.HNAME);
+                    subProp.setName("Header.name");
+                    // Must be same as Header.HNAME - but that is built later
                 }
             }
             prop.addProperty(subProp);

File: src/protocol/http/org/apache/jmeter/protocol/http/control/Header.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class Header extends AbstractTestElement implements Serializable
 {
-    public  static final String HNAME = "Header.name";
+    private static final String HNAME = "Header.name"; // See TestElementPropertyConverter
     private static final String VALUE = "Header.value";
 
     /**

File: src/protocol/http/org/apache/jmeter/protocol/http/control/Header.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class Header extends AbstractTestElement implements Serializable
 {
-    private static final String HNAME = "Header.name";
+    public  static final String HNAME = "Header.name";
     private static final String VALUE = "Header.value";
 
     /**
@@ -67,15 +67,15 @@ public String getClassLabel()
     }
 
     /**
-     * Get the value for this object.
+     * Get the name for this object.
      */
     public synchronized String getName()
     {
         return getPropertyAsString(HNAME);
     }
 
     /**
-     * Set the value for this object.
+     * Set the name for this object.
      */
     public synchronized void setName(String name)
     {

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -498,10 +498,11 @@ public void setResponseData(boolean responseData)
    /**
     * @return Returns whether to save the samplerData.
     */
-   public boolean saveSamplerData()
+   public boolean saveSamplerData(SampleResult res)
    {
       return samplerData 
-      || TestPlan.getFunctionalMode(); // as per 2.0 branch
+      || TestPlan.getFunctionalMode() // as per 2.0 branch
+      || (responseDataOnError && !res.isSuccessful());
    }
 
    /**

File: src/core/org/apache/jmeter/save/OldSaveService.java
Patch:
@@ -449,7 +449,7 @@ else if (saveConfig.formatter() != null)
 
         AssertionResult[] assResults = result.getAssertionResults();
 
-        if (saveConfig.saveSamplerData())
+        if (saveConfig.saveSamplerData(result))
         {
             config.addChild(
                 createConfigForString("samplerData", result.getSamplerData()));

File: src/core/org/apache/jmeter/save/converters/SampleResultConverter.java
Patch:
@@ -42,7 +42,7 @@
  */
 public class SampleResultConverter extends AbstractCollectionConverter
 {
-   private static Logger log = LoggingManager.getLoggerForClass();
+   private static final Logger log = LoggingManager.getLoggerForClass();
 
    /**
     * Returns the converter version; used to check for possible
@@ -92,7 +92,7 @@ public void marshal(Object obj, HierarchicalStreamWriter writer,
    protected void saveSamplerData(HierarchicalStreamWriter writer,
          SampleResult res, SampleSaveConfiguration save)
    {
-      if (save.saveSamplerData())
+      if (save.saveSamplerData(res))
       {
          writeString(writer, "samplerData", res.getSamplerData());
       }

File: src/protocol/http/org/apache/jmeter/protocol/http/util/HTTPResultConverter.java
Patch:
@@ -78,7 +78,7 @@ protected void saveSamplerData(HierarchicalStreamWriter writer,
          MarshallingContext context, HTTPSampleResult res,
          SampleSaveConfiguration save)
    {
-      if (save.saveSamplerData())
+      if (save.saveSamplerData(res))
       {
          writeString(writer, "cookies", res.getCookies());
          writeString(writer, "method", res.getHTTPMethod());

File: src/protocol/jms/org/apache/jmeter/protocol/jms/sampler/TemporaryQueueExecutor.java
Patch:
@@ -38,7 +38,7 @@ public class TemporaryQueueExecutor implements QueueExecutor
     /**
      * Constructor.
      * @param session the session to use to send the message
-     * @param queue the queue to send the message on
+     * @param destination the queue to send the message on
      * @throws JMSException
      */
     public TemporaryQueueExecutor(QueueSession session, Queue destination)

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -399,6 +399,7 @@ else if (onErrorStopThread)
             threads[i] = new JMeterThread(cloneTree(threadGroupTree), this,
                   notifier);
             threads[i].setThreadNum(i);
+            threads[i].setThreadGroup(group);
             threads[i].setInitialContext(JMeterContextService.getContext());
             threads[i].setInitialDelay((int) (perThreadDelay * i));
             threads[i].setThreadName(groupName + " " + (groupCount) + "-" + (i + 1));

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -239,6 +239,9 @@ public void startGui(CLOption testFile)
                 log.info("Loading file: " + f);
                 FileInputStream reader = new FileInputStream(f);
                 HashTree tree = SaveService.loadTree(reader);
+
+                GuiPackage.getInstance().setTestPlanFile(f.getAbsolutePath());
+
                 new Load().insertLoadedTree(1, tree);
             }
             catch (Exception e)

File: src/core/org/apache/jmeter/gui/action/AbstractAction.java
Patch:
@@ -95,9 +95,8 @@ protected void convertSubTree(HashTree tree)
      */
     protected void popupShouldSave(ActionEvent e)
     {
-        if(!( ((Save) ActionRouter.getInstance().getAction(
-                "save",
-                "org.apache.jmeter.gui.action.Save")).hasTestPlanFile()))
+        log.debug("popupShouldSave");
+        if(GuiPackage.getInstance().getTestPlanFile() == null)
         {
             if(JOptionPane.showConfirmDialog(GuiPackage.getInstance().getMainFrame(),
                     JMeterUtils.getResString("should_save"),JMeterUtils.getResString("warning"),

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -225,7 +225,7 @@ else if (action.equals("Save"))
             try
             {
                 File tmp =
-                    FileDialoger.promptToSaveFile(null).getSelectedFile();
+                    FileDialoger.promptToSaveFile("cookies.txt").getSelectedFile();
                 if (tmp != null)
                 {
                     ((CookieManager) createTestElement()).save(

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -297,6 +297,7 @@ public String getCookieHeaderForURL(URL url)
         StringBuffer header = new StringBuffer();
         String host= "."+url.getHost();
         if (debugEnabled) log.debug("URL Host="+host);
+        if (debugEnabled) log.debug("Time now (secs)"+(System.currentTimeMillis() / 1000));
         for (PropertyIterator iter = getCookies().iterator(); iter.hasNext();)
         {
             Cookie cookie = (Cookie) iter.next().getObjectValue();

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -80,7 +80,7 @@ public void modifyTestElement(TestElement sampler)
         }
         else
         {
-            ((HTTPSamplerBase)sampler).setImageParser(false);
+            sampler.removeProperty(HTTPSamplerBase.IMAGE_PARSER);
         }
         if (isMon.isSelected()){
 			((HTTPSamplerBase)sampler).setMonitor("true");

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -275,10 +275,10 @@ private static void checkVersions()
       checkVersion(IntegerPropertyConverter.class, "1.3");
       checkVersion(LongPropertyConverter.class, "1.3");
       checkVersion(MultiPropertyConverter.class, "1.3");
-      checkVersion(SampleResultConverter.class, "1.5");
+      checkVersion(SampleResultConverter.class, "1.6");
       checkVersion(StringPropertyConverter.class, "1.6");
       checkVersion(TestElementConverter.class, "1.2");
-      checkVersion(TestElementPropertyConverter.class, "1.3");
+      checkVersion(TestElementPropertyConverter.class, "1.4");
       checkVersion(ScriptWrapperConverter.class, "1.3");
       if (!PROPVERSION.equalsIgnoreCase(propertiesVersion))
       {

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Patch:
@@ -73,6 +73,7 @@ public SampleResult sample(Entry e)
         try
         {
             
+        	if (pool == null) throw new Exception("No pool created");
             // TODO: Consider creating a sub-result with the time to get the
             //       connection.
             conn = pool.getConnection();

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -186,7 +186,7 @@ public int parse(TestElement el,int parseCount)
         {
             log.error("Problem creating samples",exception);
         }
-        return 0;
+        return -1;// indicate that an error occured
     }
 
     /**

File: src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java
Patch:
@@ -1,6 +1,6 @@
 // $Header$
 /*
- * Copyright 2001-2004 The Apache Software Foundation.
+ * Copyright 2001-2005 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -81,7 +81,7 @@ public SampleResult sample(Entry e)
         SampleResult res = new SampleResult();
         boolean isSuccessful = false;
         //FtpConfig ftpConfig = (FtpConfig)e.getConfigElement(FtpConfig.class);
-        res.setSampleLabel(getLabel());
+        res.setSampleLabel(getName());
         //LoginConfig loginConfig =
         //  (LoginConfig)e.getConfigElement(LoginConfig.class);
         res.sampleStart();
@@ -93,7 +93,7 @@ public SampleResult sample(Entry e)
             // this should probably come from the setup dialog
             String s = ftp.get(getFilename());
             res.setResponseData(s.getBytes());
-            // set the response code here somewhere
+            // TODO set the response code here somewhere
             ftp.disconnect();
             isSuccessful = true;
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java
Patch:
@@ -580,7 +580,7 @@ public SampleResult sample() {
         catch (MalformedURLException exception){
             // keep this debug, since a bad URL, means the
             // soap driver can't get to it anyways
-            log.debug(exception.getMessage());
+            log.warn(exception.getMessage());
         }
         catch (IOException exception){
             // if the Webservice is unable or the stream
@@ -591,7 +591,7 @@ public SampleResult sample() {
             // keep this one debug, since it means soap isn't
             // able to parse the document, so it can't continue
             // anyways
-            log.debug(exception.getMessage());
+            log.warn(exception.getMessage());
         }
 		return RESULT;
     }

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -247,6 +247,8 @@ private static synchronized PrintWriter getFileWriter(String filename,
         if (writer == null) {
             if (saveConfig.saveAsXml()) {
                 trimmed = trimLastLine(filename);
+            } else {
+            	trimmed = new File(filename).exists();
             }
             // Find the name of the directory containing the file
             // and create it - if there is one

File: src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
Patch:
@@ -138,7 +138,7 @@ public TestBeanGUI()
    public TestBeanGUI(Class testBeanClass)
    {
       super();
-      log.warn("testing class: " + testBeanClass.getName());
+      log.debug("testing class: " + testBeanClass.getName());
       // A quick verification, just in case:
       if (!TestBean.class.isAssignableFrom(testBeanClass))
       {

File: src/components/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -323,7 +323,7 @@ else if (ResponseAssertion.RESPONSE_MESSAGE.equals(getTestField()))
       {
          result.setError(true);
          result.setFailure(false);
-         result.setFailureMessage("Bad test configuration" + e);
+         result.setFailureMessage("Bad test configuration " + e);
       }
       return result;
    }

File: src/protocol/jms/org/apache/jmeter/protocol/jms/control/gui/JMSConfigGui.java
Patch:
@@ -237,7 +237,7 @@ private JPanel createJNDIPanel() {
 		providerPanel.add(providerUrl);
 		jndiPanel.add(providerPanel, BorderLayout.SOUTH);
 
-		jndiPropertiesPanel = new ArgumentsPanel(JMeterUtils.getResString("jndi_props"));
+		jndiPropertiesPanel = new ArgumentsPanel(JMeterUtils.getResString("jms_jndi_props"));
 		jndiPanel.add(jndiPropertiesPanel);
 		return jndiPanel;
 	}

File: src/components/org/apache/jmeter/assertions/gui/XPathAssertionGui.java
Patch:
@@ -106,8 +106,6 @@ private void init()
 	    sizePanel.add(xpath);
 	    
 	    xml = new XMLConfPanel();
-	    xpath = new XPathPanel();
-	    
 	    xml.setBorder(
 		        BorderFactory.createTitledBorder(
 		            BorderFactory.createEtchedBorder(),

File: src/core/org/apache/jmeter/samplers/SampleSaveConfiguration.java
Patch:
@@ -206,7 +206,7 @@ public class SampleSaveConfiguration implements Cloneable,Serializable
        _label =
            TRUE.equalsIgnoreCase(props.getProperty(SAVE_LABEL_PROP, TRUE));
 
-       _code = // TODO is this correct?
+       _code = // TODO is this correct? - yes
            TRUE.equalsIgnoreCase(
                props.getProperty(SAVE_RESPONSE_CODE_PROP, TRUE));
 

File: src/core/org/apache/jmeter/testbeans/TestBeanHelper.java
Patch:
@@ -67,7 +67,6 @@ public static void prepare(TestElement el)
          {
             // Obtain a value of the appropriate type for this property.
             JMeterProperty jprop = el.getProperty(desc[x].getName());
-
             Class type = desc[x].getPropertyType();
             Object value = Converter.convert(jprop.getStringValue(), type);
 

File: src/core/org/apache/jmeter/util/JsseSSLManager.java
Patch:
@@ -245,12 +245,12 @@ public AlwaysTrustManager(KeyStore store)
         {
             try
             {
-                java.util.Enumeration enum = store.aliases();
+                java.util.Enumeration enumer = store.aliases();
                 java.util.ArrayList list =
                     new java.util.ArrayList(store.size());
-                while (enum.hasMoreElements())
+                while (enumer.hasMoreElements())
                 {
-                    String alias = (String) enum.nextElement();
+                    String alias = (String) enumer.nextElement();
                     log.info("AlwaysTrustManager alias: " + alias);
                     if (store.isCertificateEntry(alias))
                     {

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeListener.java
Patch:
@@ -177,6 +177,7 @@ public TreePath removedSelectedNode()
 
     public void valueChanged(TreeSelectionEvent e)
     {
+        log.debug("value changed, updating currentPath");
         currentPath = e.getNewLeadSelectionPath();
         actionHandler.actionPerformed(new ActionEvent(this, 3333, "edit"));
     }
@@ -280,12 +281,12 @@ public void mousePressed(MouseEvent e)
     {
         // Get the Main Frame.
         MainFrame mainFrame = GuiPackage.getInstance().getMainFrame();
-
         // Close any Main Menu that is open
         mainFrame.closeMenu();
         int selRow = tree.getRowForLocation(e.getX(), e.getY());
         if (tree.getPathForLocation(e.getX(), e.getY()) != null)
         {
+            log.debug("mouse pressed, updating currentPath");
             currentPath = tree.getPathForLocation(e.getX(), e.getY());
         }
         if (selRow != -1)

File: src/components/org/apache/jmeter/control/InterleaveControl.java
Patch:
@@ -58,6 +58,7 @@ public void reInitialize()
         stillSame = true;
         skipNext = false;
         incrementIterCount();
+        recoverRunningVersion();
     }
 
     public void setStyle(int style)

File: src/components/org/apache/jmeter/modifiers/gui/CounterConfigGui.java
Patch:
@@ -93,10 +93,10 @@ private void init()
         setLayout(new VerticalLayout(5, VerticalLayout.LEFT));
         
         startField =
-            new JLabeledTextField(JMeterUtils.getResString("start"), 5);
+            new JLabeledTextField(JMeterUtils.getResString("start")+"          ");//TODO proper alignment
         incrField =
-            new JLabeledTextField(JMeterUtils.getResString("increment"), 5);
-        endField = new JLabeledTextField(JMeterUtils.getResString("max"), 5);
+            new JLabeledTextField(JMeterUtils.getResString("increment"));
+        endField = new JLabeledTextField(JMeterUtils.getResString("max"));
         varNameField =
             new JLabeledTextField(JMeterUtils.getResString("var_name"));
         perUserField =

File: src/core/org/apache/jmeter/control/GenericController.java
Patch:
@@ -79,6 +79,7 @@ protected void reInitialize()
         resetCurrent();
         incrementIterCount();
         setFirst(true);
+        recoverRunningVersion();
     }
 
     /**

File: src/core/org/apache/jmeter/control/IfController.java
Patch:
@@ -233,4 +233,6 @@ public void testProcessing() throws Exception {
 			}
 	  }
 
+
+
 }
\ No newline at end of file

File: src/core/org/apache/jmeter/control/LoopController.java
Patch:
@@ -163,6 +163,7 @@ protected void reInitialize()
 		setFirst(true);
 		resetCurrent();
 		incrementLoopCount();
+        recoverRunningVersion();
 	}
 
 ///////////////////////// Start of Test code ///////////////////////////////

File: src/core/org/apache/jmeter/control/gui/WhileControllerGui.java
Patch:
@@ -137,7 +137,7 @@ private JPanel createConditionPanel()  {
 		conditionPanel.add(conditionLabel, BorderLayout.WEST);
 
 		// TEXT FIELD
-		theCondition = new JTextField("N/A");
+		theCondition = new JTextField(""); // This means exit if last sample failed
 		theCondition.setName(CONDITION);
 		conditionLabel.setLabelFor(theCondition);
 		conditionPanel.add(theCondition, BorderLayout.CENTER);

File: src/core/org/apache/jmeter/gui/action/CheckDirty.java
Patch:
@@ -48,9 +48,9 @@ public class CheckDirty
     public static final String SUB_TREE_SAVED = "sub_tree_saved";
     public static final String SUB_TREE_LOADED = "sub_tree_loaded";
     public static final String ADD_ALL = "add_all";
-    public static final String SAVE = "save_as";
-    public static final String SAVE_ALL = "save_all";
-    public static final String SAVE_TO_PREVIOUS = "save";
+    //Not implemented: public static final String SAVE = "save_as";
+    //Not implemented: public static final String SAVE_ALL = "save_all";
+    //Not implemented: public static final String SAVE_TO_PREVIOUS = "save";
     public static final String REMOVE = "check_remove";
 
     boolean checkMode = false;

File: src/core/org/apache/jmeter/gui/action/Close.java
Patch:
@@ -85,7 +85,7 @@ public void doAction(ActionEvent e)
                     new ActionEvent(
                         e.getSource(),
                         e.getID(),
-                        CheckDirty.SAVE_ALL));
+                        Save.SAVE));
             }
         }
         guiPackage.getTreeModel().clearTestPlan();

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -116,7 +116,8 @@ public void doAction(ActionEvent e)
             GuiPackage.getInstance().updateCurrentGui();
             GuiPackage.getInstance().getMainFrame().repaint();
         }
-        if (isTestPlan && f != null)
+        // don't change name if merging
+        if (!merging && isTestPlan && f != null)
         {
             ((Save) ActionRouter.getInstance().getAction(
                     "save",

File: src/core/org/apache/jmeter/testbeans/gui/PackageTest.java
Patch:
@@ -114,7 +114,7 @@ public void checkAllNecessaryKeysPresent()
 		// Check that all necessary keys are there:
 
 		// displayName is always mandatory:
-		String dn= defaultBundle.getString("displayName").toLowerCase();
+		String dn= defaultBundle.getString("displayName").toUpperCase(Locale.ENGLISH);
 
 		// Skip the rest of this test for alpha/experimental beans:
 		if (dn.indexOf("(ALPHA") != -1

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -1096,7 +1096,7 @@ public static void setJMeterHome(String home)
      */
     public static String getJMeterVersion()
     {
-        return JMeterVersion.VERSION;
+        return JMeterVersion.getVERSION();
     }
 
     /**

File: src/functions/org/apache/jmeter/functions/FileWrapper.java
Patch:
@@ -125,7 +125,7 @@ private static FileRowColContainer getFile(String file, String alias)
     	{
     		frcc = new FileRowColContainer(file);
     		fileContainers.put(alias,frcc);
-			log.info("Saved "+file+" as "+alias);
+			log.info("Saved "+file+" as "+alias+" delimiter=<"+frcc.getDelimiter()+">");
 			if (defaultFile.length() == 0){
 				defaultFile = file;// Save in case needed later
 			}

File: src/functions/org/apache/jmeter/functions/ThreadNumber.java
Patch:
@@ -42,7 +42,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
         throws InvalidVariableException
     {
         return Thread.currentThread().getName().substring(
-            Thread.currentThread().getName().indexOf("-") + 1);
+            Thread.currentThread().getName().lastIndexOf("-") + 1);
     }
 
     /* (non-Javadoc)

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -84,7 +84,7 @@ public String getRedirectLocation()
      */
     public boolean isRedirect()
     {
-        final String[] REDIRECT_CODES= { "301", "302", "303", "304" };
+        final String[] REDIRECT_CODES= { "301", "302", "303" }; // NOT 304!
         String code= getResponseCode();
         for (int i= 0; i < REDIRECT_CODES.length; i++)
         {

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -39,7 +39,7 @@ public class JMeterVersion
 	 * pattern: VERSION = <quote>.*<quote>
 	 * 
 	 */
-	static final String VERSION = "2.1.20050210";
+	static final String VERSION = "2.1.20050211";
 
 	static final String COPYRIGHT = "Copyright (c) 1998-2005 The Apache Software Foundation";
 	

File: src/jorphan/org/apache/jorphan/collections/HashTree.java
Patch:
@@ -850,7 +850,7 @@ public Object[] getArray(Object[] treePath)
     public Object[] getArray(Collection treePath)
     {
         HashTree tree = getTreePath(treePath);
-        return tree.getArray();
+        return (tree != null) ? tree.getArray() : null;
     }
     
     protected HashTree getTreePath(Collection treePath)

File: src/core/org/apache/jmeter/visualizers/gui/AbstractVisualizer.java
Patch:
@@ -122,7 +122,7 @@ public abstract class AbstractVisualizer
     SampleSaveConfiguration saveConfig;
     
     protected ResultCollector collector = new ResultCollector();
-	private boolean isStats = true;
+	protected boolean isStats = false;
 
     public AbstractVisualizer()
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/WebServiceSamplerGui.java
Patch:
@@ -221,6 +221,7 @@ public void modifyTestElement(TestElement s)
             {
                 sampler.setPort(80);
             }
+			sampler.setWsdlURL(wsdlField.getText());
             sampler.setProtocol(url.getProtocol());
             sampler.setMethod(HTTPSamplerBase.POST);
             sampler.setPath(url.getPath());
@@ -335,6 +336,7 @@ public void configure(TestElement el)
     {
         super.configure(el);
         WebServiceSampler sampler = (WebServiceSampler) el;
+        wsdlField.setText(sampler.getWsdlURL());
         try
         {
             // only set the URL if the host is not null

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -487,7 +487,7 @@ protected void showRenderedResponse(String response, SampleResult res)
 
         /* Get round problems parsing
          *  <META http-equiv='content-type' content='text/html; charset=utf-8'>
-         * See http://nagoya.apache.org/bugzilla/show_bug.cgi?id=23315
+         * See http://issues.apache.org/bugzilla/show_bug.cgi?id=23315
          *
          * Is this due to a bug in Java?
          */

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/AnchorModifier.java
Patch:
@@ -301,13 +301,13 @@ public void testProcessingHTMLFile(String HTMLFileName) throws Exception
                     .getBytes());
             result.setSampleLabel(context.toString());
             result.setSamplerData(context.toString());
-            result.setURL(new URL("http://nagoya.apache.org/fakepage.html"));
+            result.setURL(new URL("http://issues.apache.org/fakepage.html"));
             jmctx.setPreviousResult(result);
             AnchorModifier modifier = new AnchorModifier();
             modifier.setThreadContext(jmctx);
             modifier.process();
             assertEquals(
-                "http://nagoya.apache.org/bugzilla/buglist.cgi?"
+                "http://issues.apache.org/bugzilla/buglist.cgi?"
                     + "bug_status=NEW&bug_status=ASSIGNED&bug_status=REOPENED"
                     + "&email1=&emailtype1=substring&emailassigned_to1=1"
                     + "&email2=&emailtype2=substring&emailreporter2=1"
@@ -322,7 +322,7 @@ public void testProcessingHTMLFile(String HTMLFileName) throws Exception
                 config.toString());
             config.recoverRunningVersion();
             assertEquals(
-                "http://nagoya.apache.org/bugzilla/buglist.cgi?"
+                "http://issues.apache.org/bugzilla/buglist.cgi?"
                     + "bug_status=.*&bug_status=.*&bug_status=.*&email1="
                     + "&emailtype1=substring&emailassigned_to1=1&email2="
                     + "&emailtype2=substring&emailreporter2=1"

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -60,7 +60,7 @@ public class SaveService
    // Version information for test plan header
    static String version = "1.0";
    static String propertiesVersion = "";//read from properties file
-   private static final String PROPVERSION = "1.3";
+   private static final String PROPVERSION = "1.4";
 
    // Helper method to simplify alias creation from properties
    private static void makeAlias(String alias, String clazz)
@@ -249,11 +249,11 @@ private static void checkVersions()
       checkVersion(IntegerPropertyConverter.class, "1.3");
       checkVersion(LongPropertyConverter.class, "1.3");
       checkVersion(MultiPropertyConverter.class, "1.3");
-      checkVersion(SampleResultConverter.class, "1.2");
+      checkVersion(SampleResultConverter.class, "1.4");
       checkVersion(StringPropertyConverter.class, "1.6");
       checkVersion(TestElementConverter.class, "1.2");
       checkVersion(TestElementPropertyConverter.class, "1.3");
-      checkVersion(ScriptWrapperConverter.class, "1.2");
+      checkVersion(ScriptWrapperConverter.class, "1.3");
       if (!PROPVERSION.equalsIgnoreCase(propertiesVersion))
       {
          log.warn("Property file - expected " + PROPVERSION + ", found "

File: src/core/org/apache/jmeter/services/FileServer.java
Patch:
@@ -153,7 +153,7 @@ public File getRandomFile(String basedir){
 			{
 				File[] files =
 					src.listFiles(
-						new JMeterFileFilter(new String[] { ".txt,.obj" }));
+						new JMeterFileFilter(new String[] { ".txt",".obj" }));
 				int count = files.length;
 				input = files[random.nextInt(count)];
 			}

File: src/monitor/components/org/apache/jmeter/monitor/util/Stats.java
Patch:
@@ -64,7 +64,8 @@ public static int calculateLoad(Status stat){
 			// w = (int)(33 * (used/max))
 			long totMem = stat.getJvm().getMemory().getTotal();
 			long freeMem = stat.getJvm().getMemory().getFree();
-			double memdiv = (double)freeMem/(double)totMem;
+			long usedMem = totMem - freeMem;
+			double memdiv = (double)usedMem/(double)totMem;
 			double memWeight = DEFAULT_MEMORY_FACTOR * memdiv;
 
 			Connector cntr = (Connector)stat.getConnector().get(0);

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/RegexpHTMLParser.java
Patch:
@@ -54,6 +54,8 @@
  *  <li>&lt;embed src=<b>url</b> ... &gt;
  *  <li>&lt;embed codebase=<b>url</b> ... &gt;
  *  <li>&lt;object codebase=<b>url</b> ... &gt;
+ *  <li>&lt;bgsound src=<b>url</b> ... &gt;
+ *  <li>&lt;frame src=<b>url</b> ... &gt;
  * </ul>
  *
  * <p>
@@ -99,7 +101,7 @@ class RegexpHTMLParser extends HTMLParser
         "<(?:"
             + "!--.*?-->"
             + "|BASE"+SEP+"HREF"+VALUE
-            + "|(?:IMG|SCRIPT|FRAME|IFRAME)"+SEP+"SRC"+VALUE
+            + "|(?:IMG|SCRIPT|FRAME|IFRAME|BGSOUND|FRAME)"+SEP+"SRC"+VALUE
             + "|APPLET"+SEP+"CODE(?:BASE)?"+VALUE
             + "|(?:EMBED|OBJECT)"+SEP+"(?:SRC|CODEBASE)"+VALUE
             + "|(?:BODY|TABLE|TR|TD)"+SEP+"BACKGROUND"+VALUE

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPSampler.java
Patch:
@@ -288,7 +288,7 @@ private TCPClient getProtocol(){
 
     public SampleResult sample(Entry e)// Entry tends to be ignored ...
     {
-    	log.info(getLabel()+" "+getFilename()+" "+getUsername()+" "+getPassword());
+    	log.debug(getLabel()+" "+getFilename()+" "+getUsername()+" "+getPassword());
         SampleResult res = new SampleResult();
         boolean isSuccessful = false;
         res.setSampleLabel(getName());//Use the test element name for the label

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -238,11 +238,13 @@ private static synchronized PrintWriter getFileWriter(String filename)
         	 {
         	 	trimmed = trimLastLine(filename);	
         	 }
+        	 File ofile = new File(filename);
+        	 ofile.mkdirs();
             writer =
                 new PrintWriter(
                     new OutputStreamWriter(
                         new BufferedOutputStream(
-                            new FileOutputStream(filename, trimmed)),
+                            new FileOutputStream(ofile, trimmed)),
                         "UTF-8"),
                     true);
             files.put(filename, writer);

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -39,7 +39,7 @@ public class JMeterVersion
 	 * pattern: VERSION = <quote>.*<quote>
 	 * 
 	 */
-	static final String VERSION = "2.0.20040619";
+	static final String VERSION = "2.0.20040714";
 
 	static final String COPYRIGHT = "Copyright (c) 1998-2004 The Apache Software Foundation";
 	

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java
Patch:
@@ -146,6 +146,7 @@ public SampleResult sampleWithParser()
             }
             log.info("parser returned 0 paths");
             filter.reset();
+            count = 0;
             return null;
          }
          count = thisCount;

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserParameterModifier.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.engine.event.LoopIterationEvent;
 import org.apache.jmeter.processor.PreProcessor;
-import org.apache.jmeter.protocol.http.sampler.HTTPSampler;
+import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.testelement.TestListener;
 import org.apache.jmeter.testelement.property.PropertyIterator;
@@ -110,11 +110,11 @@ public void testEnded(String host)
     public void process()
     {
         Sampler entry = getThreadContext().getCurrentSampler();
-        if (!(entry instanceof HTTPSampler))
+        if (!(entry instanceof HTTPSamplerBase))
         {
             return;
         }
-        HTTPSampler config = (HTTPSampler) entry;
+        HTTPSamplerBase config = (HTTPSamplerBase) entry;
         Map currentUser = allAvailableUsers.getNextUserMods();
         PropertyIterator iter = config.getArguments().iterator();
         while (iter.hasNext())

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParsingUtils.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.protocol.http.sampler.HTTPSampler;
+import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
@@ -76,8 +77,8 @@ private HtmlParsingUtils()
     }
 
     public static synchronized boolean isAnchorMatched(
-        HTTPSampler newLink,
-        HTTPSampler config)
+        HTTPSamplerBase newLink,
+        HTTPSamplerBase config)
         throws MalformedPatternException
     {
         boolean ok = true;

File: src/components/org/apache/jmeter/extractor/gui/RegexExtractorGui.java
Patch:
@@ -65,6 +65,7 @@ public void configure(TestElement el)
     {
         super.configure(el);
         useHeaders.setSelected(el.getPropertyAsBoolean(RegexExtractor.USEHEADERS));
+        useBody.setSelected(!el.getPropertyAsBoolean(RegexExtractor.USEHEADERS));
         regexField.setText(el.getPropertyAsString(RegexExtractor.REGEX));
         templateField.setText(el.getPropertyAsString(RegexExtractor.TEMPLATE));
         defaultField.setText(el.getPropertyAsString(RegexExtractor.DEFAULT));

File: src/core/org/apache/jmeter/gui/OnErrorPanel.java
Patch:
@@ -85,7 +85,7 @@ public void configure(int errorAction)
     {
 		stopTestBox.setSelected(errorAction == OnErrorTestElement.ON_ERROR_STOPTEST);
 		stopThrdBox.setSelected(errorAction == OnErrorTestElement.ON_ERROR_STOPTHREAD);
-		//continueBox.setSelected(etc);// no need to set the remaining Radio Button
+		continueBox.setSelected(errorAction == OnErrorTestElement.ON_ERROR_CONTINUE);
     }
     
     public int getOnErrorSetting()

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -41,7 +41,7 @@ public class JMeterVersion
 	 * pattern: VERSION = <quote>.*<quote>
 	 * 
 	 */
-	static final String VERSION = "2.0.20040528";
+	static final String VERSION = "2.0.20040608";
 
     private JMeterVersion() // Not instantiable
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -256,6 +256,7 @@ protected void parse(BufferedReader breader,TestElement el)
                 {
                     break;
                 }
+                line = breader.readLine();
             }
         }
         catch (IOException ioe)

File: src/components/org/apache/jmeter/reporters/MailerModel.java
Patch:
@@ -206,7 +206,7 @@ public synchronized void add(SampleResult sample)
             }
         }
 
-        if (siteDown && (sample.getTime() != -1) & !successMsgSent)
+        if (siteDown && (sample.getTime() != -1) && !successMsgSent)
         {
             // Send the mail ...
             if (successCount > getSuccessLimit())

File: src/monitor/model/org/apache/jmeter/monitor/model/ObjectFactory.java
Patch:
@@ -103,7 +103,7 @@ public MonitorParser(ObjectFactory factory){
 	 * @param args
 	 */	
 	public static void main(String[] args){
-		if (args != null & args.length == 2){
+		if (args != null && args.length == 2){
 			String file = null;
 			//int count = 1;
 			if (args[0] != null){

File: src/core/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -23,6 +23,7 @@
 import java.rmi.RemoteException;
 
 import org.apache.jmeter.testelement.TestListener;
+import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.collections.SearchByClass;
 import org.apache.jorphan.logging.LoggingManager;
@@ -121,6 +122,7 @@ public void run()
         
         try
         {
+           JMeterContextService.startTest();
             remote.setHost(host);
             log.info("sent host ="+host);
             remote.configure(test);

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -227,6 +227,7 @@ public void run()
             verifyThreadsStopped();
             notifyTestListenersOfEnd();
          }
+         JMeterContextService.endTest();
       }
    }
 
@@ -248,6 +249,7 @@ public void run()
       {
          serialized = true;
       }
+      JMeterContextService.startTest();
       compileTree();
       /** 
        * Notification of test listeners needs to happen after function replacement, but before

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -58,6 +58,7 @@
 import org.apache.jmeter.gui.util.JMeterMenuBar;
 import org.apache.jmeter.samplers.Remoteable;
 import org.apache.jmeter.testelement.TestListener;
+import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.ComponentUtil;
 
@@ -347,6 +348,7 @@ public void testEnded(String host)
         if (hosts.size() == 0)
         {
             runningIndicator.setIcon(stoppedIcon);
+            JMeterContextService.endTest();
         }
         menuBar.setRunning(false, host);
         if (stoppingMessage != null)

File: src/core/org/apache/jmeter/testbeans/BeanInfoSupport.java
Patch:
@@ -212,6 +212,7 @@ protected void createPropertyGroup(String group, String[] names)
 	{
 		for (int i=0; i<names.length; i++)
 		{
+		   log.debug("Getting property for: " + names[i]);
 			PropertyDescriptor p= property(names[i]);
 			p.setValue(GenericTestBeanCustomizer.GROUP, group);
 			p.setValue(GenericTestBeanCustomizer.ORDER, new Integer(i));

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -98,6 +98,7 @@ public JMeterThread(
         test.traverse(threadListenerSearcher);
         testListeners = threadListenerSearcher.getSearchResults();
         notifier = note;
+        running = true;
     }
 
     public void setInitialContext(JMeterContext context)
@@ -218,7 +219,6 @@ public void run()
             threadContext.setThreadNum(getThreadNum());
             threadContext.setThread(this);
             testTree.traverse(compiler);
-            running = true;
             //listeners = controller.getListeners();
 
             if (scheduler)

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -41,7 +41,7 @@ public class JMeterVersion
 	 * pattern: VERSION = <quote>.*<quote>
 	 * 
 	 */
-	static final String VERSION = "2.0.20040521";
+	static final String VERSION = "2.0.20040528";
 
     private JMeterVersion() // Not instantiable
     {

File: src/jorphan/org/apache/jorphan/reflect/Functor.java
Patch:
@@ -57,7 +57,7 @@ public Object invoke()
       }
       catch (Exception e)
       {
-         throw new RuntimeException(e);
+         throw new org.apache.jorphan.util.JMeterError(e); //JDK1.4
       }
    }
 

File: src/core/org/apache/jmeter/control/LoopController.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.BooleanProperty;
-import org.apache.jmeter.testelement.property.FunctionProperty;
 import org.apache.jmeter.testelement.property.IntegerProperty;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.StringProperty;
@@ -66,8 +65,6 @@ public int getLoops()
         try
         {
         	JMeterProperty prop = getProperty(LOOPS);
-        	if (prop instanceof FunctionProperty)
-        		((FunctionProperty)prop).setUseCache(false);
             return Integer.parseInt(prop.getStringValue());
         }
         catch (NumberFormatException e)

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -41,7 +41,7 @@ public class JMeterVersion
 	 * pattern: VERSION = <quote>.*<quote>
 	 * 
 	 */
-	static final String VERSION = "2.0.20040520";
+	static final String VERSION = "2.0.20040521";
 
     private JMeterVersion() // Not instantiable
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -190,7 +190,7 @@ public HTTPSampler getSampler()
         tempGui.modifyTestElement(result);
         result.setFollowRedirects(false);
         result.setUseKeepAlive(true);
-        log.debug("getSampler: sampler path = " + result.getEncodedPath());
+        log.debug("getSampler: sampler path = " + result.getPath());
         return result;
     }
     
@@ -264,7 +264,7 @@ else if (sampler.getPort() == 443)
         {
             sampler.parseArguments(postData);
         }
-        log.debug("sampler path = " + sampler.getEncodedPath());
+        log.debug("sampler path = " + sampler.getPath());
         return sampler;
     }
     

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSamplerBeanInfo.java
Patch:
@@ -9,8 +9,7 @@
 import java.beans.PropertyDescriptor;
 
 import org.apache.jmeter.testbeans.BeanInfoSupport;
-
-import sun.beans.editors.StringEditor;
+import org.apache.jmeter.testbeans.gui.TextAreaEditor;
 
 /**
  * @author mstover
@@ -39,5 +38,7 @@ public JDBCSamplerBeanInfo()
       p = property("query");
       p.setValue(NOT_UNDEFINED, Boolean.TRUE);
       p.setValue(DEFAULT, "");
+      p.setPropertyEditorClass(TextAreaEditor.class);
+      
    }
 }

File: src/components/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -250,7 +250,7 @@ private AssertionResult evaluateResponse(SampleResult response)
       // What are we testing against?
       if (ResponseAssertion.RESPONSE_DATA.equals(getTestField()))
       {
-		toCheck = new String(response.responseDataAsBA());
+		toCheck = new StringBuffer(response.getResponseHeaders()).append(new String(response.responseDataAsBA())).toString();
       }
       else if (ResponseAssertion.RESPONSE_CODE.equals(getTestField()))
       {

File: src/core/org/apache/jmeter/engine/PreCompiler.java
Patch:
@@ -65,7 +65,6 @@ else if (node instanceof TestElement)
             try
             {
                 replacer.replaceValues((TestElement) node);
-                ((TestElement)node).setRunningVersion(true);
             }
             catch (InvalidVariableException e)
             {

File: src/core/org/apache/jmeter/resources/PackageTest.java
Patch:
@@ -76,7 +76,7 @@ private void readRF(String res, List l) throws Exception
        	String s;
         while((s=fileReader.readLine())!=null)
         {
-           	if (s.length() > 0)  {
+           	if (s.length() > 0 && !s.startsWith("#"))  {
            		l.add(s.substring(0,s.indexOf('=')));
            	}
        	} 

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -41,7 +41,7 @@ public class JMeterVersion
 	 * pattern: VERSION = <quote>.*<quote>
 	 * 
 	 */
-	static final String VERSION = "2.0.20040519";
+	static final String VERSION = "2.0.20040520";
 
     private JMeterVersion() // Not instantiable
     {

File: src/functions/org/apache/jmeter/functions/Random.java
Patch:
@@ -81,8 +81,8 @@ public synchronized String execute(
 
         JMeterVariables vars = getVariables();
 
-        int min = Integer.parseInt(minimum.execute());
-        int max = Integer.parseInt(maximum.execute());
+        int min = Integer.parseInt(minimum.execute().trim());
+        int max = Integer.parseInt(maximum.execute().trim());
 
         int rand = (int) Math.round(min + Math.random() * (max - min));
 

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/UrlConfigGui.java
Patch:
@@ -1,4 +1,3 @@
-// $Header$
 /*
  * Copyright 2001-2004 The Apache Software Foundation.
  *
@@ -45,7 +44,6 @@
 
 /**
  * @author    Michael Stover
- * @version   $Revision$
  */
 public class UrlConfigGui extends JPanel
 {
@@ -110,7 +108,6 @@ public TestElement createTestElement()
         element.setProperty(HTTPSampler.METHOD,
                 (post.isSelected() ? "POST" : "GET"));
         element.setProperty(HTTPSampler.PATH, path.getText());
-        element.setProperty(HTTPSampler.ENCODED_PATH,path.getText());
         element.setProperty(new BooleanProperty(HTTPSampler.FOLLOW_REDIRECTS,
                 followRedirects.isSelected()));
         element.setProperty(new BooleanProperty(HTTPSampler.AUTO_REDIRECTS,

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java
Patch:
@@ -288,7 +288,7 @@ public void addHeaderFromHeader(String headerHeader, URL url)
     public void removeHeaderNamed(String name)
     {
         Vector removeIndices = new Vector();
-        for (int i = getHeaders().size() - 1; i > 0; i--)
+        for (int i = getHeaders().size() - 1; i >= 0; i--)
         {
             Header header = (Header) getHeaders().get(i).getObjectValue();
             if (header == null)

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -1,4 +1,3 @@
-// $Header$
 /*
  * Copyright 2001-2004 The Apache Software Foundation.
  *
@@ -44,7 +43,6 @@
 /**
  * The headers of the client HTTP request.
  *
- * @version   $Revision$
  */
 public class HttpRequestHdr
 {
@@ -229,7 +227,7 @@ private HTTPSampler createSampler()
         sampler.setMethod(method);
         log.debug("Proxy: method server: " + sampler.getMethod());
         sampler.setPath(serverUrl());
-        log.debug("Proxy: setting path: " + sampler.getEncodedPath());
+        log.debug("Proxy: setting path: " + sampler.getPath());
         if (numberRequests){
         	requestNumber++;
 			sampler.setName(requestNumber + " " + sampler.getPath());

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -389,7 +389,9 @@ public void addCookieFromHeader(String cookieHeader, URL url)
             }
             else if (key.equalsIgnoreCase("domain"))
             {
-                domain= nvp.substring(index + 1);
+                //trim() is a workaround for bug in Oracle8iAS wherere
+            	//cookies would have leading spaces in the domain portion
+            	domain= nvp.substring(index + 1).trim();
                 
                 // The standard dictates domains must have a leading dot,
                 // but the new standard (Cookie2) tells us to add it if it's not

File: src/monitor/components/org/apache/jmeter/monitor/util/Stats.java
Patch:
@@ -90,14 +90,14 @@ public static int calculateLoad(Status stat){
 	 * <li> none of the above is dead
 	 * </ol>
 	 * @param stat
-	 * @return
+	 * @return integer representing the status
 	 */
 	public static int calculateStatus(Status stat){
 		if (stat != null){
 			Connector cntr = (Connector)stat.getConnector().get(0);
 			int max = cntr.getThreadInfo().getMaxThreads();
 			int current = cntr.getThreadInfo().getCurrentThreadsBusy();
-			int spare = cntr.getThreadInfo().getMaxSpareThreads();
+			//int spare = cntr.getThreadInfo().getMaxSpareThreads();
 			double per = (double)current/(double)max;
 			if (per > WARNING_PER){
 				return WARNING;

File: src/monitor/model/org/apache/jmeter/monitor/parser/ParserImpl.java
Patch:
@@ -60,7 +60,7 @@ public ParserImpl(ObjectFactory factory)
 
 	/**
 	 * parse byte array and return Status object
-	 * @param byte[]
+	 * @param bytes
 	 * @return Status
 	 */
     public Status parseBytes(byte[] bytes)
@@ -82,7 +82,7 @@ public Status parseBytes(byte[] bytes)
     }
 
 	/**
-	 * @param String data
+	 * @param content
 	 * @return Status
 	 */
     public Status parseString(String content)
@@ -91,7 +91,7 @@ public Status parseString(String content)
     }
 
 	/**
-	 * @param SampleResult result
+	 * @param result
 	 * @return Status
 	 */
     public Status parseSampleResult(SampleResult result)

File: src/monitor/model/org/apache/jmeter/monitor/parser/Constants.java
Patch:
@@ -1,4 +1,4 @@
-// $Header:
+// $Header$
 /*
  * Copyright 2001-2004 The Apache Software Foundation.
  *
@@ -18,6 +18,7 @@
 
 /**
  * Constants for the custom DocumentHandler.
+ * @version $Revision$ on $Date$
  */
 public class Constants
 {

File: src/core/org/apache/jmeter/junit/JMeterTest.java
Patch:
@@ -661,7 +661,7 @@ private static Collection getObjects(Class extendsClass) throws Exception
 		    for (int i=0;i<ss.length;i++){
 			    System.out.println(ss[i]);
 			}
-		    if (!classPathShown=false){// Only dump it once
+		    if (!classPathShown){// Only dump it once
 		        System.out.println("Class path is:");
 		        String cp=System.getProperty("java.class.path");
 				String cpe[]= JOrphanUtils.split(cp,java.io.File.pathSeparator);

File: src/monitor/model/org/apache/jmeter/monitor/model/ObjectFactory.java
Patch:
@@ -48,7 +48,7 @@ public static ObjectFactory getInstance(){
 		return FACTORY;
 	}
 	
-	public Status parseBytes(byte[] bytes){
+	public synchronized Status parseBytes(byte[] bytes){
 		return PARSER.parseBytes(bytes);
 	}
 	

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -289,7 +289,9 @@ public String getCookieHeaderForURL(URL url)
             String host= "."+url.getHost();
             if (host.endsWith(cookie.getDomain())
                 && url.getFile().startsWith(cookie.getPath())
-                && (System.currentTimeMillis() / 1000) <= cookie.getExpires())
+                && ((cookie.getExpires()==0) // treat as never expiring (bug 27713)
+				    ||
+                	(System.currentTimeMillis() / 1000) <= cookie.getExpires())				)
             {
                 if (header.length() > 0)
                 {

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorHealthVisualizer.java
Patch:
@@ -53,6 +53,8 @@ public class MonitorHealthVisualizer extends AbstractVisualizer
 	private MonitorAccumModel MODEL;
 	private MonitorGraph GRAPH;
 	
+	public static final String BUFFER = "monitor.buffer.size";
+	
     /**
      * Constructor for the GraphVisualizer object.
      */
@@ -61,6 +63,7 @@ public MonitorHealthVisualizer()
     	MODEL = new MonitorAccumModel();
     	GRAPH = new MonitorGraph(MODEL);
     	init();
+		MODEL.setBufferSize(JMeterUtils.getPropDefault(BUFFER,800));
     }
 
     public String getLabelResource()

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorAccumModel.java
Patch:
@@ -98,7 +98,7 @@ private List updateArray(MonitorModel model, List list){
 	/**
 	 * Get all MonitorModels matching the URL.
 	 * @param url
-	 * @return
+	 * @return list
 	 */
 	public List getAllSamples(String url){
 		if (!MAP.containsKey(url)){
@@ -111,7 +111,7 @@ public List getAllSamples(String url){
 	/**
 	 * Get the MonitorModel matching the url.
 	 * @param url
-	 * @return
+	 * @return list
 	 */
 	public MonitorModel getSample(String url){
 		if (MAP.containsKey(url)){

File: src/monitor/components/org/apache/jmeter/visualizers/MonitorStats.java
Patch:
@@ -74,7 +74,7 @@ public MonitorStats(int health,
 	/**
 	 * For convienance, this method returns the protocol,
 	 * host and port as a URL.
-	 * @return
+	 * @return protocol://host:port
 	 */
 	public String getURL(){
 		return protocol + "://" + host + ":" + port;

File: src/core/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java
Patch:
@@ -333,6 +333,7 @@ public String getDocAnchor()
 	 */
 	public String getLabelResource()
 	{
-		throw new UnsupportedOperationException("Needs to be implemented by each class");
+		throw new UnsupportedOperationException("Needs to be implemented by the class: "
+				+this.getClass().getName());
 	}
 }

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -41,7 +41,6 @@
  * This is a nice packaging for the various information returned from taking a
  * sample of an entry.
  *
- * @author     mstover?
  * @version    $Revision$ $Date$
  */
 public class SampleResult implements Serializable
@@ -628,7 +627,7 @@ public void setMonitor(boolean monitor){
 	/**
 	 * If the sampler is a monitor, method will
 	 * return true.
-	 * @return
+	 * @return true if the sampler is a monitor
 	 */
 	public boolean isMonitor(){
 		return isMonitor;

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BSFSampler.java
Patch:
@@ -28,7 +28,6 @@
 /**
  * A sampler which understands BSF
  *
- * @author sebb AT apache DOT org
  * @version    $Revision$ Updated on: $Date$
  */
 public class BSFSampler extends AbstractSampler
@@ -41,7 +40,7 @@ public class BSFSampler extends AbstractSampler
 	public static final String LANGUAGE   = "BSFSampler.language"; //$NON-NLS-1$
 	public static final String PARAMETERS = "BSFSampler.parameters"; //$NON-NLS-1$
 
-	private BSFManager mgr;
+	private transient BSFManager mgr;
 	private BSFEngine bsfEngine;
 	
 	public BSFSampler()

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/BeanShellSampler.java
Patch:
@@ -33,12 +33,11 @@
 /**
  * A sampler which understands BeanShell
  *
- * @author sebb AT apache DOT org
  * @version    $Revision$ Updated on: $Date$
  */
 public class BeanShellSampler extends AbstractSampler 
 {
-	protected static Logger log = LoggingManager.getLoggerForClass();
+	private static final Logger log = LoggingManager.getLoggerForClass();
 
     public static final String FILENAME   = "BeanShellSampler.filename"; //$NON-NLS-1$
 	public static final String SCRIPT     = "BeanShellSampler.query"; //$NON-NLS-1$

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -56,8 +56,6 @@
 /**
  * This class contains the static utility methods used by JMeter.
  * 
- * @author  Michael Stover
- * @author  <a href="mailto:klancast@swbell.net">Keith Lancaster</a>
  * @version $Revision$ updated on $Date$
  */
 public class JMeterUtils implements UnitTestManager
@@ -274,8 +272,9 @@ private static void notifyLocaleChangeListeners()
      */
     public static String getResString(String key)
     {
-    	return getResStringDefault(key,"[res_key="+key+"]");
+    	return getResStringDefault(key,RES_KEY_PFX+key+"]");
     }
+    public static final String RES_KEY_PFX="[res_key=";
     
 	/**
 	 * Gets the resource string for this key.

File: src/core/org/apache/jmeter/gui/action/EnableComponent.java
Patch:
@@ -52,11 +52,13 @@ public void doAction(ActionEvent e)
         {
             log.debug("enabling current gui object");
             GuiPackage.getInstance().getCurrentNode().setEnabled(true);
+            GuiPackage.getInstance().getCurrentGui().setEnabled(true);
         }
         else if (e.getActionCommand().equals(DISABLE))
         {
             log.debug("disabling current gui object");
             GuiPackage.getInstance().getCurrentNode().setEnabled(false);
+            GuiPackage.getInstance().getCurrentGui().setEnabled(false);
         }
     }
 

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -432,7 +432,7 @@ public JMeterContext getThreadContext() {
 		return threadContext;
 	}
 	/**
-	 * @param threadContext The threadContext to set.
+	 * @param inthreadContext The threadContext to set.
 	 */
 	public void setThreadContext(JMeterContext inthreadContext) {
 		if (threadContext != null)
@@ -449,7 +449,7 @@ public String getThreadName() {
 		return threadName;
 	}
 	/**
-	 * @param threadName The threadName to set.
+	 * @param inthreadName The threadName to set.
 	 */
 	public void setThreadName(String inthreadName) {
 		if (threadName != null)

File: src/core/org/apache/jmeter/testelement/property/AbstractProperty.java
Patch:
@@ -268,7 +268,7 @@ public int hashCode()
      * @param arg0 JMeterProperty to compare against
      * @return 0 if equal values or both values null;
      * -1 otherwise
-     * @seeComparable#compareTo(Object)
+     * @see Comparable#compareTo(Object)
      */
     public int compareTo(Object arg0)
     {

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Patch:
@@ -274,6 +274,7 @@ public void testStarted(String host)
 
     public synchronized void testStarted()
     {
+    	log.debug("testStarted(), thread: "+Thread.currentThread().getName());
         // The first call to getKey for a given key will set up the connection
         // pool.  This can take awhile, so do it while the test is starting
         // instead of waiting for the first sample.
@@ -294,6 +295,7 @@ public void testEnded(String host)
 
     public synchronized void testEnded()
     {
+    	log.debug("testEndded(), thread: "+Thread.currentThread().getName());
         manager.shutdown();
         dbkey = null;
     }

File: src/htmlparser/org/htmlparser/tests/BenchmarkP.java
Patch:
@@ -58,7 +58,7 @@ public BenchmarkP()
 
     public static void main(String[] args)
     {
-        if (args != null & args.length > 0)
+        if (args != null && args.length > 0)
         {
             String strurl = args[0];
             boolean addLink = true;

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java
Patch:
@@ -355,7 +355,7 @@ public String getClassLabel()
     /**
      * Added support for SOAP related header stuff.
      * 1-29-04 Peter Lin
-     * @return
+     * @return the SOAP header Object
      */
     public Object getSOAPHeader(){
     	return this.SOAPHeader;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/WebServiceSampler.java
Patch:
@@ -289,7 +289,7 @@ public void setUseProxy(boolean proxy){
 
 	/**
 	 * Return whether or not to use proxy
-	 * @return
+	 * @return true if should use proxy
 	 */	
 	public boolean getUseProxy(){
 		return this.getPropertyAsBoolean(USE_PROXY);
@@ -305,7 +305,7 @@ public void setProxyHost(String host){
 
 	/**
 	 * Return the proxy hostname
-	 * @return
+	 * @return the proxy hostname
 	 */	
 	public String getProxyHost(){
 		this.checkProxy();
@@ -322,7 +322,7 @@ public void setProxyPort(String port){
 
 	/**
 	 * Return the proxy port
-	 * @return
+	 * @return the proxy port
 	 */	
 	public int getProxyPort(){
 		this.checkProxy();

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/Filter.java
Patch:
@@ -36,8 +36,8 @@
  * Using access logs can also reduce the amount
  * of memory needed to run large test plans.
  * <br>
- * @author:	Peter Lin<br>
- * @version: 	$Revision$ last updated $Date$
+ * @author		Peter Lin<br>
+ * @version 	$Revision$ last updated $Date$
  * Created on:	Jun 26, 2003<br>
  */
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/LogFilter.java
Patch:
@@ -80,8 +80,8 @@
  * will return null if it is filtered and replace
  * any part of the string that should be replaced.
  * <p>
- * @author:	Peter Lin<br>
- * @version: 	$Revision$ last updated $Date$
+ * @author		Peter Lin<br>
+ * @version 	$Revision$ last updated $Date$
  * Created on:	Jun 26, 2003<br>
  */
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/LogParser.java
Patch:
@@ -32,8 +32,8 @@
  * make it more generic and extensible. The
  * first version was hard coded and written
  * over the weekend.<p>
- * @author:	Peter Lin<br>
- * @version: 	$Revision$ last updated $Date$
+ * @author		Peter Lin<br>
+ * @version 	$Revision$ last updated $Date$
  * Created on:	Jun 23, 2003<br>
  */
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/NVPair.java
Patch:
@@ -21,8 +21,8 @@
 /**
  * Description:<br>
  * <br>
- * @author:	Peter Lin<br>
- * @version: 	$Revision$ last updated $Date$
+ * @author		Peter Lin<br>
+ * @version 	$Revision$ last updated $Date$
  * Created on:	Jun 23, 2003<br>
  */
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/StandardGenerator.java
Patch:
@@ -49,8 +49,8 @@
  * option is to provide parameters, so the user can
  * pass the desired listener to the tool.
  * <p>
- * @author:	Peter Lin<br>
- * @version: 	$Revision$ last updated $Date$
+ * @author		Peter Lin<br>
+ * @version 	$Revision$ last updated $Date$
  * Created on:	Jul 1, 2003<br>
  */
 

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -65,8 +65,8 @@
  * work with this parser. Servers that are known
  * to use non standard formats are IIS and Netscape.
  * <p>
- * @author:	Peter Lin<br>
- * @version: 	$Revision$ last updated $Date$
+ * @author		Peter Lin<br>
+ * @version 	$Revision$ last updated $Date$
  * Created on:	June 23, 2003<br>
  */
 

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -24,7 +24,7 @@ public class JMeterVersion
 	 * pattern: VERSION = <quote>.*<quote>
 	 * 
 	 */
-	static final String VERSION = "1.9.20040130";
+	static final String VERSION = "1.9.20040211";
 
     private JMeterVersion() // Not instantiable
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java
Patch:
@@ -171,10 +171,9 @@ public void run()
 
         try
         {
-            log.info("Creating Daemon Socket...");
+            log.info("Creating Daemon Socket... on port " + daemonPort);
             mainSocket = new ServerSocket(daemonPort);
             mainSocket.setSoTimeout(ACCEPT_TIMEOUT);
-            log.info(" port " + daemonPort + " OK");
             log.info("Proxy up and running!");
 
             while (running)

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -327,6 +327,7 @@ else if (command.equals(CHANGE_TARGET))
     private void startProxy()
     {
         ValueReplacer replacer = GuiPackage.getInstance().getReplacer();
+        modifyTestElement(model);
         try
         {
             replacer.replaceValues(model);

File: src/core/org/apache/jmeter/testbeans/TestBeanBeanInfo.java
Patch:
@@ -36,6 +36,7 @@
  * a stop class AND flags. [Why? I guess this is a bug in the spec.]
  * <li>java.beans.Introspector is buggy and, opposite to what's stated in the
  * Javadocs, only results of getBeanInfo(Class) are actually cached.
+ * </ol>
  * 
  * @author <a href="mailto:jsalvata@apache.org">Jordi Salvat i Alabart</a>
  * @version $Revision$ updated on $Date$

File: src/core/org/apache/jmeter/testbeans/gui/FileEditor.java
Patch:
@@ -88,7 +88,7 @@ public void actionPerformed(ActionEvent e)
 
 		File file = chooser.getSelectedFile();
 
-		setValue(file);
+		setValue(file.getPath());
     }
 
     /**

File: src/core/org/apache/jmeter/testbeans/gui/GenericTestBeanCustomizer.java
Patch:
@@ -2,7 +2,7 @@
  * ====================================================================
  * The Apache Software License, Version 1.1
  *
- * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * Copyright (c) 2004 The Apache Software Foundation.  All rights
  * reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -135,7 +135,7 @@
  * available (where <b><i>group</i></b> is the group name).
  * </dl>
  */
-class GenericTestBeanCustomizer extends JPanel
+public class GenericTestBeanCustomizer extends JPanel
         implements SharedCustomizer, PropertyChangeListener 
 {
     private static Logger log = LoggingManager.getLoggerForClass();

File: src/core/org/apache/jmeter/testbeans/TestBean.java
Patch:
@@ -111,8 +111,7 @@ protected TestBean()
 		try
 		{
 			// Obtain the property descriptors:
-			BeanInfo beanInfo= Introspector.getBeanInfo(this.getClass(),
-				TestBean.class);
+			BeanInfo beanInfo= Introspector.getBeanInfo(this.getClass());
 			PropertyDescriptor[] desc= beanInfo.getPropertyDescriptors();
 			descriptors= new HashMap();
 			for (int i=0; i<desc.length; i++)

File: src/core/org/apache/jmeter/testbeans/gui/PackageTest.java
Patch:
@@ -113,7 +113,7 @@ public void setUp()
 		JMeterUtils.setLocale(new Locale(language,""));
 		try
 		{
-			beanInfo= Introspector.getBeanInfo(testBeanClass, TestBean.class);
+			beanInfo= Introspector.getBeanInfo(testBeanClass);
 			bundle= (ResourceBundle) beanInfo
 				.getBeanDescriptor()
 				.getValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE);
@@ -210,7 +210,7 @@ public static Test suite() throws Exception
             try
             {
                 defaultBundle= (ResourceBundle)
-                    Introspector.getBeanInfo(testBeanClass, TestBean.class)
+                    Introspector.getBeanInfo(testBeanClass)
                     .getBeanDescriptor()
                     .getValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE);
             }

File: src/core/org/apache/jmeter/junit/JMeterTest.java
Patch:
@@ -192,7 +192,7 @@ public void runGUITitle() throws Exception
 			    (title.indexOf("(BETA")  == -1)
 			)
 			{// No, not a work in progress ...
-				assertTrue("Component ref should contain entry for "+title,ct);
+				assertTrue("component_reference.xml needs '"+title+"' anchor for "+guiItem.getClass().getName(),ct);
 			}
 		}
 	}

File: src/htmlparser/org/htmlparser/parserHelper/AttributeParser.java
Patch:
@@ -153,11 +153,11 @@ public Hashtable parseAttributes(Tag tag)
             }
             else
             {
-                if (nextPart != null && (0 < nextPart.length()))
+                if (nextPart != null)
                 {
                     if (name == null)
                     {
-                        if (!nextPart.substring(0, 1).equals(" "))
+                        if (0 < nextPart.length() && !nextPart.substring(0, 1).equals(" "))
                         {
                             name = nextPart;
                             waitingForEqual = true;
@@ -222,7 +222,7 @@ private String getNextPart(StringTokenizer tokenizer, String deli)
         while (isDataReady == false && tokenizer.hasMoreTokens())
         {
             currentToken = tokenizer.nextToken(deli);
-            //
+			//
             // First let's combine tokens that are inside "" or ''
             //
             if (isDoubleQuote || isSingleQuote)

File: src/protocol/http/org/apache/jmeter/protocol/http/control/AuthManager.java
Patch:
@@ -188,7 +188,7 @@ public Authorization get(int i)
 
     public String getAuthHeaderForURL(URL url)
     {
-        if (isSupportedProtocol(url))
+        if (isUnsupportedProtocol(url))
         {
             return null;
         }
@@ -333,7 +333,7 @@ public int size()
         return getAuthObjects().size();
     }
 
-    private boolean isSupportedProtocol(URL url)
+    private boolean isUnsupportedProtocol(URL url)
     {
         return !url.getProtocol().toUpperCase().equals("HTTP")
             && !url.getProtocol().toUpperCase().equals("HTTPS");

File: src/core/org/apache/jmeter/gui/action/Remove.java
Patch:
@@ -105,9 +105,7 @@ public void doAction(ActionEvent e)
             removeNode(nodes[i]);
         }
 		guiPackage.getTreeListener().getJTree().setSelectionPath(newTreePath);
-
-        //guiPackage.getTreeListener().getJTree().setSelectionRow(1);
-
+		guiPackage.updateCurrentGui();
     }
 
     public static void removeNode(JMeterTreeNode node)

File: src/core/org/apache/jmeter/gui/action/Help.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * 
  * @author unattributed
- * @version $revision$ $date$
+ * @version $Revision$ $Date$
  */
 public class Help implements Command
 {

File: src/core/org/apache/jmeter/resources/PackageTest.java
Patch:
@@ -35,7 +35,7 @@
 
 /**
  * @author sebb AT apache DOT org
- * @version $revision$ $date$
+ * @version $Revision$ $Date$
  */
 public class PackageTest extends TestCase
 {

File: src/core/org/apache/jmeter/samplers/ExampleSampler.java
Patch:
@@ -71,7 +71,7 @@
  * However, access to class fields must be synchronized.
  *  
  * @author sebb AT apache DOT org
- * @version $revision$ $date$
+ * @version $Revision$ $Date$
  */
 public class ExampleSampler extends AbstractSampler
 {

File: src/core/org/apache/jmeter/samplers/gui/ExampleSamplerGui.java
Patch:
@@ -80,7 +80,7 @@
  * perform any additional setup that a test would need at run-time
  * 
  * @author sebb AT apache DOT org
- * @version $revision$ $date$
+ * @version $Revision$ $Date$
  */
 public class ExampleSamplerGui extends AbstractSamplerGui
 {

File: src/core/org/apache/jmeter/testelement/OnErrorTestElement.java
Patch:
@@ -8,7 +8,7 @@
 
 /**
  * @author sebb at apache dot org
- * @version $revision$ $date$
+ * @version $Revision$ $Date$
  */
 public abstract class OnErrorTestElement extends AbstractTestElement
 {

File: src/core/org/apache/jmeter/util/JMeterVersion.java
Patch:
@@ -14,7 +14,7 @@
  * Utility class to define the JMeter Version string
  * 
  * @author sebb AT apache.org
- * @version $revision$ $date$
+ * @version $Revision$ $Date$
  */
 public class JMeterVersion
 {

File: src/protocol/tcp/org/apache/jmeter/protocol/tcp/sampler/TCPClient.java
Patch:
@@ -11,7 +11,7 @@
 
 /**
  * @author sebb AT apache DOT org
- * @version $revision$ $date$
+ * @version $Revision$ $Date$
  */
 public interface TCPClient
 {

File: src/functions/org/apache/jmeter/functions/PackageTest.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * @author sebb 'AT apache DOT org
- * @version $revision$ $date$
+ * @version $Revision$ $Date$
  */
 public class PackageTest extends JMeterTestCase
 {

File: src/functions/org/apache/jmeter/functions/CSVRead.java
Patch:
@@ -155,7 +155,6 @@ public synchronized String execute(
             // if argument is 'next' - go to the next line
             if (columnOrNext.equals("next()") || columnOrNext.equals("next"))
             {
-                myfileData.incrementRowPosition();
                 storeCurrentLine(null);
                 /*
                  * All done now ,so return the empty string - this allows the caller to
@@ -175,6 +174,7 @@ public synchronized String execute(
             if (myfileData != null && processedLines == null)
             {
                 processedLines = (ArrayList) myfileData.getNextLine();
+				myfileData.incrementRowPosition();
                 this.storeCurrentLine(processedLines);
             }
 

File: src/functions/org/apache/jmeter/functions/Property2.java
Patch:
@@ -114,7 +114,7 @@ public Property2()
 
     public Object clone()
     {
-        return new Property();
+        return new Property2();
     }
 
     public synchronized String execute(

File: src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
Patch:
@@ -436,7 +436,7 @@ private WrapperEditor createWrapperEditor(
 			if (notOther) v="${}";
 			else if (notNull) v= "";
 			else if (defaultValue != null) v= wrapper.getAsText();
-			else if (tags != null && tags.length>0) v= tags[1];
+			else if (tags != null && tags.length>0) v= tags[0];
 			else if (notExpression) v= "";
 			else v="${}";
 

File: src/core/org/apache/jmeter/testbeans/gui/TestBeanGUI.java
Patch:
@@ -436,7 +436,7 @@ private WrapperEditor createWrapperEditor(
 			if (notOther) v="${}";
 			else if (notNull) v= "";
 			else if (defaultValue != null) v= wrapper.getAsText();
-			else if (tags != null) v= tags[1];
+			else if (tags != null && tags.length>0) v= tags[1];
 			else if (notExpression) v= "";
 			else v="${}";
 

File: src/core/org/apache/jmeter/testbeans/gui/FileEditor.java
Patch:
@@ -107,7 +107,7 @@ public FileEditor()
 		editor= new WrapperEditor(
 			new SimpleFileEditor(),
 			new ComboStringEditor(),
-			true, true);
+			true, true, true);
 
 		// Create a panel containing the combo and the button:
 		panel= new JPanel(new BorderLayout(5,0));

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -252,14 +252,15 @@ public void run()
             testTree.traverse(compiler);
             running = true;
             //listeners = controller.getListeners();
-            rampUpDelay();
-            
+
             if (scheduler)
             {
                 //set the scheduler to start
                 startScheduler();
             }
 
+			rampUpDelay();
+            
             log.info("Thread " + Thread.currentThread().getName() + " started");
             controller.initialize();
             controller.addIterationListener(new IterationListener());

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -111,7 +111,7 @@ public static final synchronized HTMLParser getParser(String htmlParserClassName
         // Is there a cached parser?
 		HTMLParser pars=(HTMLParser) parsers.get(htmlParserClassName);
 		if (pars != null){
-			log.info("Fetched "+htmlParserClassName);
+			log.debug("Fetched "+htmlParserClassName);
 			return pars;
 		}
 
@@ -426,7 +426,7 @@ private static void filetest(HTMLParser p,
 		                               boolean orderMatters) //Does the order matter?
 		throws Exception
 		{
-			log.info("file   "+file);
+			log.debug("file   "+file);
 			File f= findTestFile(file);
 			byte[] buffer= new byte[(int)f.length()];
 			int len= new FileInputStream(f).read(buffer);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -1218,7 +1218,6 @@ private HTTPSampleResult followRedirects(
         int frameDepth)
     {
         HTTPSampleResult totalRes= new HTTPSampleResult(res);
-        totalRes.sampleStart();
         HTTPSampleResult lastRes= res;
 
         int redirect;

File: src/protocol/java/org/apache/jmeter/protocol/java/test/JavaTest.java
Patch:
@@ -298,7 +298,8 @@ public Arguments getDefaultParameters()
      * - responseData
      * </pre>
      * 
-     * @see org.apache.jmeter.samplers.SampleResult#setTime(long)
+     * @see org.apache.jmeter.samplers.SampleResult#sampleStart()
+     * @see org.apache.jmeter.samplers.SampleResult#sampleEnd()
      * @see org.apache.jmeter.samplers.SampleResult#setSuccessful(boolean)
      * @see org.apache.jmeter.samplers.SampleResult#setSampleLabel(String)
      * @see org.apache.jmeter.samplers.SampleResult#setResponseCode(String)

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -537,7 +537,7 @@ public void testPause() throws Exception
 			Thread.sleep(100);
 			res.sampleEnd();
 			assertTrue(res.time  >= 200);
-			assertFalse(res.time >= 210); // we hope!
+			assertFalse(res.time >= 250); // we hope!
 		}
 
 		private static Formatter fmt=new RawFormatter();

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -1078,7 +1078,9 @@ public static String getJMeterVersion()
 
     /**
     *  Builds the string used as the main frame title
-    *  @param the fully qualified name of the current working file
+    * 
+    *  @param fname the fully qualified name of the current working file
+    * 
     *  @return a string of the form "FileName (<full path>/FileName) - Apache JMeter".
     *  If fname is null, returns "Apache JMeter".
     */

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -734,7 +734,7 @@ protected HttpURLConnection setupConnection(
             res.setRequestHeaders(hdrs);
         }
         setConnectionAuthorization(conn, u, getAuthManager());
-        if (getMethod().equals(HTTPSampler.POST))
+        if (method.equals(HTTPSampler.POST))
         {
             setPostHeaders(conn);
         }
@@ -1067,7 +1067,7 @@ private HTTPSampleResult sample(
                 throw new BindException();
             }
             // Nice, we've got a connection. Finish sending the request:
-            if (getMethod().equals(HTTPSampler.POST))
+            if (method.equals(HTTPSampler.POST))
             {
                 sendPostData(conn);
             }

File: src/jorphan/org/apache/jorphan/logging/LoggingManager.java
Patch:
@@ -77,8 +77,9 @@ public final class LoggingManager
 {
     private static PatternFormatter format =
         new PatternFormatter(
-            "%{time:yyyy/MM/dd h:mm:ss a} %5.5{priority} - "
+            "%{time:yyyy/MM/dd HH:mm:ss} %5.5{priority} - "
                 + "%{category}: %{message} %{throwable}\n");
+           // time pattern is passed to java.text.SimpleDateFormat
 
     /** Used to hold the default logging target. */
     private static LogTarget target;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -281,7 +281,7 @@ public void setTarget(JMeterTreeNode target)
     /**
      * Receives the recorded sampler from the proxy server for placing in the
      * test tree.
-     * @param serverResponse added to allow saving of the server's response
+     * param serverResponse to be added to allow saving of the server's response
      *                       while recording.  A future consideration.
      */
     public void deliverSampler(

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/RegexpHTMLParser.java
Patch:
@@ -126,7 +126,7 @@ class RegexpHTMLParser extends HTMLParser
      * in the web and all browsers seem to understand them.
      */
     private static final String VALUE=
-        "\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\"'\\s][^\\s]*))";
+        "\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^\"'\\s>][^\\s>]*)(?=[\\s>]))";
             // Note there's 3 capturing groups per value
 
     /**
@@ -146,8 +146,8 @@ class RegexpHTMLParser extends HTMLParser
             + "|APPLET"+SEP+"CODE(?:BASE)?"+VALUE
             + "|(?:EMBED|OBJECT)"+SEP+"(?:SRC|CODEBASE)"+VALUE
             + "|(?:BODY|TABLE|TR|TD)"+SEP+"BACKGROUND"+VALUE
-            + "|INPUT(?:"+SEP+"(?:SRC"+VALUE+"|TYPE\\s*=\\s*[\"']?image(?=[\"'\\s>]))){2,}"
-            + "|LINK(?:"+SEP+"(?:HREF"+VALUE+"|REL\\s*=\\s*[\"']?stylesheet(?=[\"'\\s>]))){2,}"
+            + "|INPUT(?:"+SEP+"(?:SRC"+VALUE+"|TYPE\\s*=\\s*(?:\"image\"|'image'|image(?=[\\s>])))){2,}"
+            + "|LINK(?:"+SEP+"(?:HREF"+VALUE+"|REL\\s*=\\s*(?:\"stylesheet\"|'stylesheet'|stylesheet(?=[\\s>])))){2,}"
             + ")";
 
     // Number of capturing groups possibly containing Base HREFs:

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -402,8 +402,7 @@ public void actionPerformed(ActionEvent e)
             )
         {
 
-            // Switch to the other mode
-            textMode = !textMode;
+            textMode = command.equals(TEXT_COMMAND);
 
             DefaultMutableTreeNode node =
                 (DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HTMLParser.java
Patch:
@@ -263,7 +263,7 @@ public static final synchronized HTMLParser getParser(String htmlParserClassName
      * should be reported by throwing an HTMLParseException. 
      * 
      * @param html HTML code
-     * @param url  Base URL from which the HTML code was obtained
+     * @param baseUrl Base URL from which the HTML code was obtained
      * @return an Iterator for the resource URLs 
      */
     public Iterator getEmbeddedResourceURLs(byte[] html, URL baseUrl)
@@ -290,7 +290,7 @@ public Iterator getEmbeddedResourceURLs(byte[] html, URL baseUrl)
 	 * should be reported by throwing an HTMLParseException. 
 	 * 
 	 * @param html HTML code
-	 * @param url  Base URL from which the HTML code was obtained
+	 * @param baseUrl Base URL from which the HTML code was obtained
 	 * @param coll Collection
 	 * @return an Iterator for the resource URLs 
 	 */

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampleResult.java
Patch:
@@ -75,7 +75,7 @@ public HTTPSampleResult()
      * Construct a 'parent' result for an already-existing result, essentially
      * cloning it:
      *  
-     * @param result
+     * @param res existing sample result
      */
     public HTTPSampleResult(HTTPSampleResult res)
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/WebServiceSamplerGui.java
Patch:
@@ -389,8 +389,8 @@ public void configureFromWSDL()
      * description is isolated to this method, we can
      * easily replace it with a different WSDL driver
      * later on.
-     * @param String url
-     * @return String[] 
+     * @param url
+     * @return array of web methods 
      */
     public String[] browseWSDL(String url)
     {
@@ -414,7 +414,7 @@ public String[] browseWSDL(String url)
 
     /**
      * method from ActionListener
-     * @param ActionEvent event
+     * @param event that occurred
      */
     public void actionPerformed(ActionEvent event)
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/ParamModifier.java
Patch:
@@ -97,8 +97,6 @@ public void testEnded(String host)
      * Modifies an entry object to replace the value of any url parameter that
      * matches a defined mask.
      *
-     * @param  entry  entry object containing information about the current test
-     * @return        <code>True</code> if modified, else <code>false</code>
      */
     public void process()
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/UserParameterModifier.java
Patch:
@@ -143,8 +143,6 @@ public void testEnded(String host)
      * Modifies an entry object to replace the value of any url parameter that
      * matches a parameter name in the XML file.
      *
-     * @param entry Entry object containing information about the current test
-     * @return <code>True</code> if modified, else <code>false</code>
      */
     public void process()
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/AccessLogSampler.java
Patch:
@@ -145,7 +145,7 @@ public String getLogFile()
     /**
      * it's kinda obvious, but we state it anyways.  Set the xml file with a
      * string path.
-     * @param String filename
+     * @param classname - parser class name
      */
     public void setParserClassName(String classname)
     {
@@ -256,7 +256,8 @@ public SampleResult sampleWithGenerator()
 
 	/**
 	 * sample(Entry e) simply calls sample().
-	 * @param Entry e
+	 * @param e - ignored
+	 * @return the new sample
 	 */
 	public SampleResult sample(Entry e)
 	{

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -592,7 +592,7 @@ public String getQueryString()
     /**
      * Set request headers in preparation to opening a connection.
      *
-     * @param connection       <code>URLConnection</code> to set headers on
+     * @param conn       <code>URLConnection</code> to set headers on
      * @exception IOException  if an I/O exception occurs
      */
     public void setPostHeaders(URLConnection conn) throws IOException
@@ -617,7 +617,8 @@ public void sendPostData(URLConnection connection) throws IOException
      * POST), headers, cookies, authorization properly set for the URL request.
      *
      * @param u                <code>URL</code> of the URL request
-     * @param url              <code>UrlConfig</code> of the URL request
+     * @param method            http/https
+     * @param res               the sample result
      * @return                 <code>HttpURLConnection</code> of the URL request
      * @exception IOException  if an I/O Exception occurs
      */

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
Patch:
@@ -66,7 +66,6 @@ public void setPostHeaders(URLConnection connection) throws IOException
      *
      * @param connection      <code>URLConnection</code> of where POST data
      *                        should be sent
-     * @param url             contains the query string for POST
      * @exception IOException if an I/O exception occurs
      */
     public void sendPostData(URLConnection connection) throws IOException

File: src/protocol/http/org/apache/jmeter/protocol/http/util/DOMPool.java
Patch:
@@ -86,7 +86,7 @@ public final class DOMPool
 
     /**
      * Return a document.
-     * @param Object key
+     * @param key
      * @return Document
      */
     public static Document getDocument(Object key)
@@ -96,8 +96,8 @@ public static Document getDocument(Object key)
 
     /**
      * Add an object to the cache.
-     * @param Object key
-     * @param Object data
+     * @param key
+     * @param data
      */
     public static void putDocument(Object key, Object data)
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/util/WSDLException.java
Patch:
@@ -76,7 +76,7 @@ public WSDLException(String message)
     }
 
     /**
-     * @param message
+     * @param exception
      */
     public WSDLException(Exception exception)
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/LogParser.java
Patch:
@@ -99,7 +99,7 @@ public interface LogParser {
 	/**
 	 * the method will parse the given number of
 	 * lines. Pass "-1" to parse the entire file.
-	 * @param int count
+	 * @param count
 	 * @return int
 	 */
 	public int parse(int count);

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/util/ConnectionObject.java
Patch:
@@ -88,8 +88,9 @@ public class ConnectionObject implements Runnable
     
     /**
      * Constructor - takes a connection object.
-     * @param man DBConnectionManager object.
+     * 
      * @param k DBKey object.
+     * @param maxUsage 
      */
     public ConnectionObject(DBKey k, int maxUsage) throws SQLException
     {
@@ -264,7 +265,6 @@ public void run()
     /**
      * Resets the use count, the last accessed time, and the in Use values
      * and replaces the old connection object with the new one.
-     * @param c new connection object to set to
      */
     public void reset() throws SQLException
     {

File: src/components/org/apache/jmeter/visualizers/GraphModel.java
Patch:
@@ -207,7 +207,7 @@ public int getThroughputMax()
     /**
      * Adds a feature to the ModelListener attribute of the GraphModel object.
      *
-     * @param  modelListener  the feature to be added to the ModelListener
+     * @param  listener  the feature to be added to the ModelListener
      *           attribute
      */
     public void addGraphListener(GraphListener listener)

File: src/core/org/apache/jmeter/engine/RemoteJMeterEngineImpl.java
Patch:
@@ -104,7 +104,7 @@ public void setHost(String host)
      * Adds a feature to the ThreadGroup attribute of the RemoteJMeterEngineImpl
      * object.
      *
-     * @param  tGroup the feature to be added to the ThreadGroup attribute
+     * @param  testTree the feature to be added to the ThreadGroup attribute
      */
     public void configure(HashTree testTree) throws RemoteException
     {

File: src/core/org/apache/jmeter/testelement/TestElementTraverser.java
Patch:
@@ -28,7 +28,6 @@ public interface TestElementTraverser
      * Notification that a property is starting.  This could be a test element
      * property or a Map property - depends on the context.
      * @param key
-     * @param value
      */
     public void startProperty(JMeterProperty key);
     

File: src/core/org/apache/jmeter/threads/ThreadGroup.java
Patch:
@@ -163,7 +163,7 @@ public boolean getScheduler()
     /**
      * Set the StartTime value.
      *
-     * @param StartTime the StartTime value.
+     * @param stime - the StartTime value.
      */
     public void setStartTime(long stime)
     {
@@ -203,7 +203,7 @@ public void setDuration(long duration)
     /**
      * Set the EndTime value.
      *
-     * @param EndTime the EndTime value.
+     * @param etime - the EndTime value.
      */
     public void setEndTime(long etime)
     {

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPSampler.java
Patch:
@@ -187,7 +187,7 @@ public String getPort()
     /**
      * Sets the Rootdn attribute of the LDAPSampler object.
      *
-     * @param  rootdn  the new rootdn value
+     * @param  newRootdn  the new rootdn value
      */
     public void setRootdn(String newRootdn)
     {

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -146,7 +146,7 @@ public class JMeter implements JMeterPlugin
                 "help",
                 CLOptionDescriptor.ARGUMENT_DISALLOWED,
                 HELP_OPT,
-                "print this message and exit"),
+                "print usage information and exit"),
             new CLOptionDescriptor(
                 "version",
                 CLOptionDescriptor.ARGUMENT_DISALLOWED,
@@ -282,6 +282,8 @@ public void start(String[] args)
         if (null != parser.getErrorString())
         {
             System.err.println("Error: " + parser.getErrorString());
+			System.out.println("Usage");
+			System.out.println(CLUtil.describeOptions(options).toString());
             return;
         }
         try

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -87,16 +87,17 @@ public byte[] parse(InputStream in) throws IOException
                     dataLength =
                         Math.max(parseLine(line.toString()), dataLength);
                 }
-                //log.debug("Client Request Line: " + line.toString());
+                log.debug("Client Request Line: " + line.toString());
                 line.reset();
             }
             else if (!inHeaders)
             {
                 readLength++;
             }
         }
-        log.debug("Client Request Line: " + line.toString());
         postData = line.toString().trim();
+		log.debug("postData: " + postData);
+		log.debug("Request: "+clientRequest.toString());
         return clientRequest.toByteArray();
     }
     

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/NewHTTPSamplerFull.java
Patch:
@@ -116,7 +116,7 @@
  * @author	Khor Soon Hin,
  *		<a href="mailto:mramshaw@alumni.concordia.ca">Martin Ramshaw</a>
  * @version	$Id$
- * @created	$Date$
+ * created	$Date$
  */
 public class NewHTTPSamplerFull
 {

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -215,7 +215,8 @@ public void clear()
                 (DefaultMutableTreeNode) root.getChildAt(0));
         }
 
-        results.setText("");
+        results.setText("");//Response Data
+        sampleDataField.setText("");//Request Data
         log.debug("End : clear1");
     }
 

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -88,14 +88,14 @@
 import org.apache.jmeter.plugin.PluginManager;
 import org.apache.jmeter.processor.gui.AbstractPostProcessorGui;
 import org.apache.jmeter.processor.gui.AbstractPreProcessorGui;
-import org.apache.jmeter.protocol.java.BeanShellServer;
 import org.apache.jmeter.reporters.ResultCollector;
 import org.apache.jmeter.samplers.Remoteable;
 import org.apache.jmeter.samplers.gui.AbstractSamplerGui;
 import org.apache.jmeter.save.SaveService;
 import org.apache.jmeter.testelement.TestListener;
 import org.apache.jmeter.threads.gui.ThreadGroupGui;
 import org.apache.jmeter.timers.gui.AbstractTimerGui;
+import org.apache.jmeter.util.BeanShellServer;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.visualizers.gui.AbstractVisualizer;
 import org.apache.jorphan.collections.HashTree;

File: src/core/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -66,7 +66,7 @@
 
 
 /**
- * @author     
+ * @author     unattributed
  * @version    $Revision$ Updated on: $Date$
  */
 public class ClientJMeterEngine implements JMeterEngine,Runnable

File: src/core/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java
Patch:
@@ -79,7 +79,7 @@
  * other abstract classes that create different classes of GUI components for
  * JMeter (Visualizers, Timers, Samplers, Modifiers, Controllers, etc).
  * 
- * @see JMeterGUIComponent
+ * @see org.apache.jmeter.gui.JMeterGUIComponent
  * @see org.apache.jmeter.config.gui.AbstractConfigGui
  * @see org.apache.jmeter.assertions.gui.AbstractAssertionGui
  * @see org.apache.jmeter.control.gui.AbstractControllerGui

File: src/core/org/apache/jmeter/gui/action/AddToTree.java
Patch:
@@ -69,7 +69,7 @@
 import org.apache.log.Logger;
 
 /**
- * @author     
+ * @author     unattributed
  * @version    $Revision$ Last updated: $Date$
  */
 public class AddToTree implements Command

File: src/core/org/apache/jmeter/gui/util/TextAreaTableCellEditor.java
Patch:
@@ -101,7 +101,7 @@ public void setClickCountToStart(int count)
 
     /**
      * Returns the number of clicks needed to start editing.
-     * @returns the number of clicks needed to start editing
+     * @return the number of clicks needed to start editing
      */
     public int getClickCountToStart()
     {

File: src/core/org/apache/jmeter/reporters/FileReporter.java
Patch:
@@ -191,7 +191,7 @@ public void showPanel()
  */
 class graphPanel extends JPanel
 {
-    boolean autoScale = true;
+    //boolean autoScale = true;
     Hashtable data;
     Vector keys = new Vector();
     Vector colorList = new Vector();

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -349,15 +349,15 @@ public void setDataEncoding(String dataEncoding)
         this.dataEncoding = dataEncoding;
     }
     /**
-     * @return
+     * @return whether to stop the test
      */
     public boolean isStopTest()
     {
         return stopTest;
     }
 
     /**
-     * @return
+     * @return whether to stop this thread
      */
     public boolean isStopThread()
     {

File: src/core/org/apache/jmeter/samplers/Sampler.java
Patch:
@@ -60,7 +60,7 @@
  * Classes which are able to generate information about an entry should
  * implement this interface.
  *
- * @author     
+ * @author     unattributed
  * @version    $Revision$ Last updated: $Date$
  */
 public interface Sampler extends java.io.Serializable, TestElement

File: src/core/org/apache/jmeter/testelement/property/NullProperty.java
Patch:
@@ -54,7 +54,7 @@ public boolean isRunningVersion()
     }
 
     /**
-     * @see JMeterProperty#isTemporary(TestElement)
+     * see JMeterProperty#isTemporary(TestElement)
      */
     public boolean isTemporary(TestElement owner)
     {

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -82,7 +82,7 @@
  * The JMeter interface to the sampling process, allowing JMeter to see the
  * timing, add listeners for sampling events and to stop the sampling process.
  *
- * @author    
+ * @author    unattributed
  * @version   $Revision$ Last updated: $Date$
  */
 public class JMeterThread implements Runnable, java.io.Serializable

File: src/core/org/apache/jmeter/threads/ReflectionThreadGroup.java
Patch:
@@ -56,11 +56,11 @@
 
 /**
  * ThreadGroup used for reflection purposes. {@link ThreadGroup} has a
- * {@link LoopController} which loops as many times as specified on the
+ * {@link org.apache.jmeter.control.LoopController} which loops as many times as specified on the
  * ThreadGroup gui. During reflection, we don't need the
  * <code>LoopController</code> because we need to run the Sampler (for example,
  * <code>JNDISampler</code>) only once. Thus we create this
- * <code>ReflectionThreadGroup</code> which has a {@link #nextEntry()}
+ * <code>ReflectionThreadGroup</code> which has a {link #nextEntry()}
  * which doesn't make use of the <code>LoopController</code>.
  *
  * @author    Khor Soon Hin

File: src/core/org/apache/jmeter/threads/gui/ThreadGroupGui.java
Patch:
@@ -136,7 +136,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement tg)
     {

File: src/core/org/apache/jmeter/visualizers/gui/AbstractVisualizer.java
Patch:
@@ -269,7 +269,7 @@ public void configure(TestElement el)
 
     /**
      * This provides a convenience for extenders when they implement the
-     * {@link JMeterGUIComponent#createTestElement()} method.  This method
+     * {@link org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()} method.  This method
      * will set the name, gui class, and test class for the created Test
      * Element.  It should be called by every extending class when creating
      * Test Elements, as that will best assure consistent behavior.

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/HttpDefaultsGui.java
Patch:
@@ -104,7 +104,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement config)
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -102,7 +102,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement sampler)
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/SoapSamplerGui.java
Patch:
@@ -48,7 +48,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement s)
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/WebServiceSamplerGui.java
Patch:
@@ -166,15 +166,15 @@ public WebServiceSamplerGui()
     }
 
     /**
-     * @see JMeterGUIComponent#getStaticLabel()
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#getStaticLabel()
      */
     public String getStaticLabel()
     {
         return label;
     }
 
     /**
-     * @see JMeterGUIComponent#createTestElement()
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#createTestElement()
      */
     public TestElement createTestElement()
     {
@@ -210,7 +210,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement s)
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/AuthPanel.java
Patch:
@@ -91,7 +91,7 @@
  * Sampler. It also understands how to get AuthManagers for the files that the
  * user selects.
  *
- * @author    
+ * @author    unattributed
  * @version   $Revision$  Last updated: $Date$
  */
 public class AuthPanel extends AbstractConfigGui implements ActionListener
@@ -133,7 +133,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement el)
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -293,7 +293,7 @@ private void addCookieToTable(Cookie cookie)
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement cm)
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java
Patch:
@@ -133,7 +133,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement el)
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Daemon.java
Patch:
@@ -212,7 +212,7 @@ public void run()
     /**
      * Stop the proxy daemon.  The daemon may not stop immediately.
      *
-     * @see #ACCEPT_TIMEOUT
+     * see #ACCEPT_TIMEOUT
      */
     public void stopServer()
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/util/WSDLHelper.java
Patch:
@@ -117,7 +117,7 @@ public WSDLHelper(String url) throws MalformedURLException
 
     /**
      * Returns the URL
-     * @return
+     * @return the URL
      */
     public URL getURL()
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/util/accesslog/TCLogParser.java
Patch:
@@ -421,7 +421,7 @@ public String cleanURL(String entry)
      * methods currently. The other methods
      * aren't supported yet.
      * @param text
-     * @return
+     * @return if method is supported
      */
     public boolean checkMethod(String text)
     {
@@ -613,7 +613,7 @@ public void close()
      */
     public static void main(String[] args)
     {
-        int count = -1;
+        int count = -1;//TODO not used
         if (args != null && args[0] != null && args[0].length() > 0)
         {
             try

File: src/components/org/apache/jmeter/control/gui/InterleaveControlGui.java
Patch:
@@ -97,7 +97,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement ic)
     {

File: src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java
Patch:
@@ -138,7 +138,7 @@ public TestElement createTestElement()
     }
 
     /* (non-Javadoc)
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement element)
     {

File: src/components/org/apache/jmeter/control/gui/OnceOnlyControllerGui.java
Patch:
@@ -79,7 +79,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement oc)
     {

File: src/components/org/apache/jmeter/control/gui/RandomControlGui.java
Patch:
@@ -84,7 +84,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement ic)
     {

File: src/components/org/apache/jmeter/control/gui/ThroughputControllerGui.java
Patch:
@@ -107,7 +107,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement tc)
     {

File: src/components/org/apache/jmeter/extractor/gui/RegexExtractorGui.java
Patch:
@@ -62,7 +62,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement extractor)
     {

File: src/components/org/apache/jmeter/modifiers/gui/CounterConfigGui.java
Patch:
@@ -42,7 +42,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement c)
     {

File: src/components/org/apache/jmeter/modifiers/gui/UserParametersGui.java
Patch:
@@ -99,7 +99,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement params)
     {

File: src/components/org/apache/jmeter/timers/gui/ConstantThroughputTimerGui.java
Patch:
@@ -111,7 +111,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement timer)
     {

File: src/components/org/apache/jmeter/timers/gui/ConstantTimerGui.java
Patch:
@@ -127,7 +127,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement timer)
     {

File: src/components/org/apache/jmeter/timers/gui/GaussianRandomTimerGui.java
Patch:
@@ -124,7 +124,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement timer)
     {

File: src/components/org/apache/jmeter/timers/gui/UniformRandomTimerGui.java
Patch:
@@ -132,7 +132,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement timer)
     {

File: src/components/org/apache/jmeter/visualizers/MailerVisualizer.java
Patch:
@@ -323,7 +323,7 @@ public TestElement createTestElement()
     }
 
     /* (non-Javadoc)
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement c)
     {

File: src/components/org/apache/jmeter/visualizers/RunningSample.java
Patch:
@@ -187,8 +187,7 @@ public int getIndex()
 
     /**
      * Records a sample.
-     * @arg aTimeInMillis Time in milliseconds that this sample took to process
-     * @arg aSuccessFlag Flag for if this sample was successful or not
+     * 
      */
     public synchronized void addSample(SampleResult res)
     {

File: src/functions/org/apache/jmeter/functions/FileDataContainer.java
Patch:
@@ -62,7 +62,7 @@
 
 /**
  * Creation date: (20/03/2003 09:37:44)
- * @author: Cyrus Montakab
+ * @author  Cyrus Montakab
  * @version $Revision$
  */
 public class FileDataContainer

File: src/protocol/ftp/org/apache/jmeter/protocol/ftp/config/gui/FtpConfigGui.java
Patch:
@@ -112,7 +112,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement element)
     {

File: src/protocol/ftp/org/apache/jmeter/protocol/ftp/control/gui/FtpTestSamplerGui.java
Patch:
@@ -96,7 +96,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement sampler)
     {

File: src/protocol/java/org/apache/jmeter/protocol/java/control/gui/BeanShellSamplerGui.java
Patch:
@@ -102,7 +102,7 @@ public TestElement createTestElement()
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
-     * @see JMeterGUIComponent#modifyTestElement(TestElement)
+     * @see org.apache.jmeter.gui.JMeterGUIComponent#modifyTestElement(TestElement)
      */
     public void modifyTestElement(TestElement te)
     {

File: src/protocol/java/org/apache/jmeter/protocol/java/test/JavaTest.java
Patch:
@@ -301,7 +301,7 @@ public Arguments getDefaultParameters()
      * @see org.apache.jmeter.samplers.SampleResult#setTime(long)
      * @see org.apache.jmeter.samplers.SampleResult#setSuccessful(boolean)
      * @see org.apache.jmeter.samplers.SampleResult#setSampleLabel(String)
-     * @see org.apache.jmeter.samplers.SampleResult#setResponsCode(String)
+     * @see org.apache.jmeter.samplers.SampleResult#setResponseCode(String)
      * @see org.apache.jmeter.samplers.SampleResult#setResponseMessage(String)
      * @see org.apache.jmeter.samplers.SampleResult#setResponseData(byte [])
      * @see org.apache.jmeter.samplers.SampleResult#setDataType(String)

File: src/protocol/jndi/config/JndiConfig.java
Patch:
@@ -68,8 +68,8 @@
  * Stores the configuration for JNDI sampling
  *
  * @author	Khor Soon Hin
- * @created	2001 Dec 17
- * @modified	2001 Dec 17
+ * Created	2001 Dec 17
+ * @version $Revision$ Last Updated: $Date$
  */
 public class JndiConfig extends AbstractConfigElement implements Serializable
 {

File: src/protocol/jndi/config/LookupConfig.java
Patch:
@@ -66,8 +66,8 @@
  * Stores the configuration for JNDI lookup
  *
  * @author	Khor Soon Hin
- * @created	2001 Dec 19
- * @modified	2001 Dec 19
+ * Created	2001 Dec 19
+ * @version $Revision$ Last Updated: $Date$
  */
 public class LookupConfig extends AbstractConfigElement implements Serializable
 {

File: src/protocol/jndi/config/MethodConfig.java
Patch:
@@ -68,9 +68,8 @@
  * Stores the configuration for remote method execution
  *
  * @author	Khor Soon Hin
- * @version	1.0
- * @created	2001 Dec 24
- * @modified	2001 Dec 24
+ * Created	2001 Dec 24
+ * @version $Revision$ Last Updated: $Date$
  */
 public class MethodConfig extends AbstractConfigElement implements Serializable
 {

File: src/protocol/jndi/config/MethodConfigUserObject.java
Patch:
@@ -65,9 +65,8 @@
  * created.  Failing which a MethodConfigUserObjectException will be thrown.
  *
  * @author	Khor Soon Hin
- * @version	1.0
- * @created	2001 Jan 08
- * @modified	2001 Jan 08
+ * @version $Revision$ Last Updated: $Date$
+ * Created	2001 Jan 08
  */
 public class MethodConfigUserObject 
 {

File: src/protocol/jndi/config/MethodConfigUserObjectException.java
Patch:
@@ -62,9 +62,8 @@
  * is not compatible for the class.
  *
  * @author	Khor Soon Hin
- * @version	1.0
- * @created	2002 Jan 08
- * @modified	2002 Jan 11
+ * @version	$Revision$ Last Updated: $Date$
+ * Created	2002 Jan 08
  */
 public class MethodConfigUserObjectException extends Exception
 {

File: src/protocol/jndi/config/gui/JndiConfigGui.java
Patch:
@@ -73,9 +73,8 @@
 /**
  * Provides the gui interface to configure JNDI sampling
  * @author	Khor Soon Hin
- * @version	1.0
- * @created	2001 Dec 17
- * @modified	2001 Dec 17
+ * @version	$Revision$  Last updated: $Date$
+ * Created	    2001 Dec 17
  */
 public class JndiConfigGui extends JPanel implements ModelSupported,
 	KeyListener

File: src/protocol/jndi/config/gui/MethodConfigGui.java
Patch:
@@ -91,9 +91,8 @@
 /**
  * Provides the gui interface to configure remote method execution
  * @author	Khor Soon Hin
- * @version	1.0
- * @created	2001 Dec 24
- * @modified	2001 Dec 30
+ * @version	$Revision$ Last Updated: $Date$
+ * Created	2001 Dec 24
  */
 public class MethodConfigGui
 	extends JPanel

File: src/protocol/jndi/control/JndiTestSample.java
Patch:
@@ -73,8 +73,8 @@
  * Controls how the sampling is done
  *
  * @author	Khor Soon Hin
- * @created	20 Dec 2001
- * @modified	20 Dec 2001
+ * Created	20 Dec 2001
+ * @version $Revision$ Last Updated: $Date$
  */
 public class JndiTestSample extends AbstractGenerativeController 
 	implements Serializable

File: src/protocol/jndi/control/gui/JndiTestSampleGui.java
Patch:
@@ -72,8 +72,8 @@
  * Provides the gui to configure JNDI sampling
  *
  * @author	Khor Soon Hin
- * @created	20 Dec 2001
- * @modified	20 Dec 2001
+ * Created	20 Dec 2001
+ * @version $Revision$ Last Updated: $Date$
  */
 public class JndiTestSampleGui extends JPanel implements ModelSupported
 {

File: src/protocol/jndi/sampler/JNDISampler.java
Patch:
@@ -74,8 +74,8 @@
  * Samples the JNDI performance and records them
  *
  * @author	Khor Soon Hin
- * @created	2001 Dec 18
- * @modified	2002 Feb 16
+ * Created	2001 Dec 18
+ * @version $Revision$ Last Updated: $Date$
  */
 public class JNDISampler implements Sampler
 {

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/LdapConfig.java
Patch:
@@ -68,8 +68,8 @@
  * 
  * @author    T.Elanjchezhiyan(chezhiyan@siptech.co.in) - Sip Technologies and
  *            Exports Ltd.
- * @created   Apr 29 2003 11:45 AM
- * @version   $Revision$
+ * Created     Apr 29 2003 11:45 AM
+ * @version   $Revision$ Last Updated: $Date$
  */
 public class LdapConfig extends ConfigTestElement implements Serializable
 {

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/config/gui/LdapConfigGui.java
Patch:
@@ -84,8 +84,8 @@
  * 
  * @author    T.Elanjchezhiyan(chezhiyan@siptech.co.in) - Sip Technologies and
  *            Exports Ltd. 
- * @created   Apr 29 2003 11:45 AM
- * @version   $Revision$
+ * Created     Apr 29 2003 11:45 AM
+ * @version   $Revision$ Last updated: $Date$
  */
 public class LdapConfigGui extends AbstractConfigGui implements ItemListener
 {

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/control/gui/LdapTestSamplerGui.java
Patch:
@@ -69,8 +69,8 @@
 /**
  * @author    T.Elanjchezhiyan(chezhiyan@siptech.co.in) - Sip Technologies and
  *            Exports Ltd. 
- * @created   Apr 29 2003 11:52 AM
- * @version   $Revision$
+ * Created     Apr 29 2003 11:52 AM
+ * @version   $Revision$ Last updated: $Date$
  */
 public class LdapTestSamplerGui extends AbstractSamplerGui
 {

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LDAPSampler.java
Patch:
@@ -85,8 +85,8 @@
  *
  * @author    T.Elanjchezhiyan(chezhiyan@siptech.co.in) - Sip Technologies and
  *            Exports Ltd.
- * @created   Apr 29 2003 11:00 AM
- * @version   $Revision$
+ * Created     Apr 29 2003 11:00 AM
+ * @version   $Revision$ Last updated: $Date$
  */
 public class LDAPSampler extends AbstractSampler
 {

File: src/protocol/ldap/org/apache/jmeter/protocol/ldap/sampler/LdapClient.java
Patch:
@@ -75,8 +75,8 @@
  * 
  * @author    T.Elanjchezhiyan(chezhiyan@siptech.co.in) - Sip Technologies and
  *            Exports Ltd.
- * @created   Apr 29 2003 11:00 AM
- * @version   $Revision$
+ * Created     Apr 29 2003 11:00 AM
+ * @version   $Revision$ Last updated: $Date$
  */
 public class LdapClient
 {

File: src/protocol/java/org/apache/jmeter/protocol/java/control/gui/BeanShellSamplerGui.java
Patch:
@@ -114,7 +114,7 @@ public void modifyTestElement(TestElement te)
 
     public String getStaticLabel()
     {
-        return JMeterUtils.getResString("bsh_sampler_title" + "(BETA CODE)");
+        return JMeterUtils.getResString("bsh_sampler_title") + " (BETA CODE)";
     }
     private JTextField filename;
     

File: src/protocol/http/org/apache/jmeter/junit/protocol/http/parser/HtmlParserTester.java
Patch:
@@ -11,8 +11,8 @@
 import org.apache.jmeter.threads.JMeterContextService;
 
 /**
- * @created    June 14, 2001
- * @version    $Revision$
+ * Created    June 14, 2001
+ * @version    $Revision$ Last updated: $Date$
  */
 public class HtmlParserTester extends TestCase
 {

File: src/jorphan/org/apache/jorphan/collections/Data.java
Patch:
@@ -78,7 +78,7 @@ public class Data implements Serializable
 {
     private static Logger log = LoggingManager.getLoggerForClass();
     Map data;
-    Map iterators = new HashMap();
+    //Map iterators = new HashMap();
     // Hashtable dataLine;
     ArrayList header;
     // saves current position in data Vector

File: src/jorphan/org/apache/jorphan/collections/HashTree.java
Patch:
@@ -1108,7 +1108,7 @@ public void testAdd1() throws Exception
                 Arrays.asList(new String[] { "1", "2", "3", "4" });
             HashTree tree = new HashTree();
             log.debug("treePath = " + treePath);
-            tree.add(treePath, new String("value"));
+            tree.add(treePath, "value");
             log.debug("Now treePath = " + treePath);
             log.debug(tree.toString());
             assertEquals(1, tree.list(treePath).size());

File: src/jorphan/org/apache/jorphan/util/JOrphanUtils.java
Patch:
@@ -60,8 +60,8 @@
  * This class contains frequently-used static utility methods.
  *
  * @author     <a href="mailto://jsalvata@atg.com">Jordi Salvat i Alabart</a>
- * @created    27th December 2002
- * @version    $Revision$
+ * Created    27th December 2002
+ * @version    $Revision$ Last updated: $Date$
  */
 public final class JOrphanUtils
 {

File: src/functions/org/apache/jmeter/functions/IterationCounter.java
Patch:
@@ -50,8 +50,7 @@ public synchronized String execute(
         JMeterVariables vars = getVariables();
 
         boolean perThread =
-            new Boolean(((CompoundVariable) variables[0]).execute())
-                .booleanValue();
+            Boolean.valueOf(((CompoundVariable) variables[0]).execute()).booleanValue();
 
         String varName =
             ((CompoundVariable) variables[variables.length - 1]).execute();

File: src/functions/org/apache/jmeter/functions/StringFromFile.java
Patch:
@@ -113,8 +113,8 @@ public class StringFromFile extends AbstractFunction implements Serializable
     private String myValue = ERR_IND;
     private String myName = "StringFromFile_";//$NON-NLS-1$ - Name to store the value in
     private Object[] values;
-    private BufferedReader myBread; // Buffered reader
-	private FileReader fis; // keep this round to close it
+	transient private BufferedReader myBread; // Buffered reader
+	transient private FileReader fis; // keep this round to close it
     private boolean firstTime = false; // should we try to open the file?
     private boolean reopenFile = true; // Set from parameter list one day ...
     private String fileName; // needed for error messages

File: src/core/org/apache/jmeter/util/ColorHelper.java
Patch:
@@ -61,7 +61,7 @@
  * This class contains the static utility methods to manipulate colors.
  *
  * @author     Khor Soon Hin
- * @created    2001/08/13
+ * Created    2001/08/13
  * @version    $Revision$ $Date$
  */
 public final class ColorHelper

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -113,7 +113,7 @@ public class ResultCollector
     // protected List results = Collections.synchronizedList(new ArrayList());
     private int current;
     transient private DefaultConfigurationSerializer serializer;
-    private boolean inLoading = false;
+    //private boolean inLoading = false;
     transient private PrintWriter out;
     private boolean inTest = false;
     private static Map files = new HashMap();
@@ -200,7 +200,7 @@ public void testStarted()
     public void loadExistingFile()
         throws SAXException, IOException, ConfigurationException
     {
-        inLoading = true;
+        //inLoading = true;
         if (new File(getFilename()).exists())
         {
             clearVisualizer();
@@ -223,7 +223,7 @@ public void loadExistingFile()
                 log.error("", e);
             }
         }
-        inLoading = false;
+        //inLoading = false;
     }
 
     private static void writeFileStart(PrintWriter writer)

File: src/core/org/apache/jmeter/samplers/Sampler.java
Patch:
@@ -60,8 +60,8 @@
  * Classes which are able to generate information about an entry should
  * implement this interface.
  *
- * @author     $Author$
- * @version    $Revision$
+ * @author     
+ * @version    $Revision$ Last updated: $Date$
  */
 public interface Sampler extends java.io.Serializable, TestElement
 {

File: src/core/org/apache/jmeter/gui/NamePanel.java
Patch:
@@ -70,11 +70,10 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.util.LocaleChangeEvent;
 /****************************************
- * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache
+ * Title: JMeter
  *
  *@author    Michael Stover
- *@created   $Date$
- *@version   1.0
+ *@version   $Revision$  Last updated: $Date$
  ***************************************/
 
 public class NamePanel extends JPanel implements JMeterGUIComponent

File: src/core/org/apache/jmeter/gui/action/AbstractAction.java
Patch:
@@ -18,7 +18,7 @@
  */
 public abstract class AbstractAction implements Command
 {
-    protected static Logger log = LoggingManager.getLoggerForClass();
+    protected static final Logger log = LoggingManager.getLoggerForClass();
 
     /**
      * @see Command#doAction(ActionEvent)

File: src/core/org/apache/jmeter/gui/action/AddToTree.java
Patch:
@@ -69,8 +69,8 @@
 import org.apache.log.Logger;
 
 /**
- * @author     $Author$
- * @version    $Revision$
+ * @author     
+ * @version    $Revision$ Last updated: $Date$
  */
 public class AddToTree implements Command
 {

File: src/core/org/apache/jmeter/gui/action/ExitCommand.java
Patch:
@@ -65,8 +65,8 @@
 
 /**
  * @author     Brendan Burns
- * @created    October 5, 2001
- * @version    $Revision$
+ * Created      October 5, 2001
+ * @version    $Revision$ Last updated: $Date$
  */
 public class ExitCommand implements Command
 {

File: src/core/org/apache/jmeter/gui/action/New.java
Patch:
@@ -68,8 +68,8 @@
  * test plan.
  *
  * @author     <a href="mramshaw@alumni.concordia.ca">Martin Ramshaw</a>
- * @created    June 6, 2002
- * @version    $Revision$
+ * Created      June 6, 2002
+ * @version    $Revision$ Last updated: $Date$
  */
 public class New implements Command
 {

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -78,8 +78,8 @@
 
 /**
  * @author    Michael Stover
- * @created   February 13, 2001
- * @version   $Revision$
+ * Created     February 13, 2001
+ * @version   $Revision$ Last updated: $Date$
  */
 public class Save implements Command
 {

File: src/core/org/apache/jmeter/gui/action/Start.java
Patch:
@@ -74,8 +74,8 @@
 
 /**
  * @author    Michael Stover
- * @created   March 1, 2001
- * @version   $Revision$
+ * Created     March 1, 2001
+ * @version   $Revision$ Last updated: $Date$
  */
 public class Start extends AbstractAction
 {

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -79,8 +79,8 @@ public class JMeterTreeNode
     implements JMeterGUIComponent
 {
     transient private static Logger log = LoggingManager.getLoggerForClass();
-    JMeterTreeModel treeModel;
-    boolean enabled = true;
+    private JMeterTreeModel treeModel;
+    //boolean enabled = true;
 
     public JMeterTreeNode(TestElement userObj, JMeterTreeModel treeModel)
     {

File: src/core/org/apache/jmeter/gui/util/FileDialoger.java
Patch:
@@ -72,8 +72,8 @@ public final class FileDialoger
     /**
      * The last directory visited by the user while choosing Files.
      */
-    public static String lastJFCDirectory = null;
-    public static JFileChooser jfc = new JFileChooser();
+    public static String lastJFCDirectory = null;//TODO: make private?
+    public static JFileChooser jfc = new JFileChooser();//TODO: make private?
 
     /**
      * Prevent instantiation of utility class.

File: src/core/org/apache/jmeter/gui/util/FilePanel.java
Patch:
@@ -73,8 +73,8 @@
 
 /**
  * @author     Michael Stover
- * @created    April 18, 2002
- * @version    $Revision$
+ * Created    April 18, 2002
+ * @version    $Revision$ Last updated: $Date$
  */
 public class FilePanel extends HorizontalPanel implements ActionListener
 {

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -91,7 +91,7 @@ public class JMeterMenuBar extends JMenuBar implements LocaleChangeListener
     JMenuItem file_new;
     JMenu editMenu;
     JMenu edit_add;
-    JMenu edit_add_submenu;
+    //JMenu edit_add_submenu;
     JMenuItem edit_remove;
     JMenu runMenu;
     JMenuItem run_start;
@@ -105,8 +105,8 @@ public class JMeterMenuBar extends JMenuBar implements LocaleChangeListener
     Collection remote_engine_stop;
     JMenuItem run_clear;
     JMenuItem run_clearAll;
-    JMenu reportMenu;
-    JMenuItem analyze;
+    //JMenu reportMenu;
+    //JMenuItem analyze;
     JMenu optionsMenu;
     JMenu lafMenu;
     JMenuItem sslManager;

File: src/core/org/apache/jmeter/gui/util/PowerTableModel.java
Patch:
@@ -163,7 +163,7 @@ private Object createDefaultValue(int i)
             {
                 Constructor constr =
                     colClass.getConstructor(new Class[] { Boolean.TYPE });
-                return constr.newInstance(new Object[] { new Boolean(false)});
+                return constr.newInstance(new Object[] { Boolean.FALSE});
             }
             catch (Exception err)
             {

File: src/core/org/apache/jmeter/control/GenericController.java
Patch:
@@ -82,7 +82,7 @@ public class GenericController
     extends AbstractTestElement
     implements Controller, Serializable
 {
-    protected static Logger log = LoggingManager.getLoggerForClass();
+    protected static final Logger log = LoggingManager.getLoggerForClass();
 
     protected LinkedList iterationListeners = new LinkedList();
     protected List subControllersAndSamplers = new ArrayList();

File: src/core/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -66,7 +66,7 @@
 
 
 /**
- * @author     $Author$
+ * @author     
  * @version    $Revision$ Updated on: $Date$
  */
 public class ClientJMeterEngine implements JMeterEngine,Runnable

File: src/core/org/apache/jmeter/engine/PreCompiler.java
Patch:
@@ -18,7 +18,6 @@
 public class PreCompiler implements HashTreeTraverser
 {
     transient private static Logger log = LoggingManager.getLoggerForClass();
-    private boolean testValid = true;
     private ValueReplacer replacer;
 
     public PreCompiler()
@@ -49,7 +48,6 @@ public void addNode(Object node, HashTree subTree)
             catch (InvalidVariableException e)
             {
                 log.error("invalid variables", e);
-                testValid = false;
             }
         }
     }

File: src/components/org/apache/jmeter/visualizers/Graph.java
Patch:
@@ -73,8 +73,8 @@
  * Implements a simple graph for displaying performance results.
  *
  * @author     Michael Stover
- * @created    March 21, 2002
- * @version    $Revision$
+ * Created      March 21, 2002
+ * @version    $Revision$ Last updated: $Date$
  */
 public class Graph
     extends JComponent

File: src/components/org/apache/jmeter/visualizers/GraphAccumModel.java
Patch:
@@ -69,8 +69,8 @@
  * The model that collects the average of the set of pages to be sampled.
  *
  * @author     Khor Soon Hin
- * @created    2001/08/11
- * @version    $Revision$
+ * Created      2001/08/11
+ * @version    $Revision$ Last updated: $Date$
  */
 
 public class GraphAccumModel implements Clearable, Serializable

File: src/components/org/apache/jmeter/visualizers/GraphAccumVisualizer.java
Patch:
@@ -82,7 +82,7 @@
  * number of times the set of pages is configured to load.
  *
  * @author    Khor Soon Hin
- * @created   2001/08/11
+ * Created     2001/08/11
  * @version   $Revision$ $Date$
  */
 public class GraphAccumVisualizer extends AbstractVisualizer

File: src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
Patch:
@@ -87,7 +87,7 @@
  * autoscaling plots.
  *
  * @author    <a href="mailto:stefano@apache.org">Stefano Mazzocchi</a>
- * @created   February 8, 2001
+ * Created     February 8, 2001
  * @version   $Revision$ $Date$
  */
 public class GraphVisualizer extends AbstractVisualizer

File: src/components/org/apache/jmeter/visualizers/MailerVisualizer.java
Patch:
@@ -115,8 +115,8 @@ public class MailerVisualizer extends AbstractVisualizer
     private JTextField failureLimitField;
     private JTextField successLimitField;
 
-    private JPanel mainPanel;
-    private JLabel panelTitleLabel;
+    //private JPanel mainPanel;
+    //private JLabel panelTitleLabel;
 
 
     /**
@@ -198,7 +198,7 @@ private void initGui()
         c.anchor = GridBagConstraints.NORTHWEST;
         c.insets = new Insets(0, 0, 0, 0);
         c.gridwidth = 1;
-        mailerPanel.add(new JLabel("Addressie(s):"));
+        mailerPanel.add(new JLabel("Addressee(s):"));
 
         addressField = new JTextField(25);
         addressField.setEditable(true);

File: src/components/org/apache/jmeter/visualizers/SimpleDataWriter.java
Patch:
@@ -69,7 +69,6 @@
  *  recording data by eliminating GUI overhead.
  *
  *@author     <a href="mailto:kcassell&#X0040;apache.org">Keith Cassell</a>
- *@created    $Date$
  *@version    $Revision$ $Date$
  ***********************************************************/
 

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -95,7 +95,7 @@ public class StatVisualizer extends AbstractVisualizer
     protected JScrollPane myScrollPane;
     private final static String VISUALIZER_NAME =
             JMeterUtils.getResString("aggregate_report");
-    private long sleepTill = 0;
+    //private long sleepTill = 0;
     transient private StatVisualizerModel model;
     transient private StatTableModel myStatTableModel;
 
@@ -137,7 +137,7 @@ public TestElement createTestElement()
     {
         TestElement t = super.createTestElement();
 
-        sleepTill = 0;
+        //sleepTill = 0;
         return t;
     }
 

File: src/components/org/apache/jmeter/visualizers/StatVisualizerModel.java
Patch:
@@ -74,8 +74,8 @@
  * you!
  * 
  * @author    James Boutcher
- * @created   March 21, 2002
- * @version   $Revision$
+ * Created     March 21, 2002
+ * @version   $Revision$ Last updated: $Date$
  */
 public class StatVisualizerModel implements Clearable
 {

File: src/components/org/apache/jmeter/visualizers/TableDataModel.java
Patch:
@@ -72,8 +72,8 @@
  * GraphModel.
  *
  * @author     <a href="mailto:alf@i100.no">Alf Hogemark</a>Hogemark
- * @created    March 10, 2002
- * @version    $Revision$
+ * Created      March 10, 2002
+ * @version    $Revision$ Last updated: $Date$
  */
 public class TableDataModel extends GraphModel implements TableModel
 {
@@ -228,7 +228,7 @@ else if (columnIndex == 3)
         {
             if ((rowIndex >= 0) && (rowIndex < urlList.size()))
             {
-                return new Boolean(
+                return Boolean.valueOf(
                     !((Sample) getSamples().get(rowIndex)).error);
             }
         }

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/AccessLogSamplerGui.java
Patch:
@@ -162,7 +162,6 @@ public String getStaticLabel()
     public TestElement createTestElement()
     {
     	if (SAMPLER == null){
-    		System.out.println("the sampler was null, therefore we create a new one");
 			SAMPLER = new AccessLogSampler();
 			SAMPLER.setSamplerGUI(this);
 			this.configureTestElement(SAMPLER);

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/AccessLogSamplerGui.java
Patch:
@@ -186,7 +186,9 @@ public int getPortNumber(){
 			int port = Integer.parseInt(PORT.getText());
 			return port;
 		} catch (NumberFormatException exception){
-			exception.printStackTrace();
+                        // since we return 80, there's not point
+                        // in printing out the stack trace or 
+                        // an exception.
 			return 80;
 		}
 	}

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -119,10 +119,10 @@ public class ProxyControlGui
 
    /**
     * Used to indicate that HTTP request headers should be captured.
-    * The default is to <b>not</b> capture the HTTP request headers,
+    * The default is to capture the HTTP request headers,
     * which are specific to particular browser settings.
     */
-   private JCheckBox httpHeaders;
+    private JCheckBox httpHeaders;
 
     private ProxyControl model;
 

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeListener.java
Patch:
@@ -206,9 +206,10 @@ public JMeterTreeNode[] getSelectedNodes()
         return nodes;
     }
 
-    public void removedSelectedNode()
+    public TreePath removedSelectedNode()
     {
         currentPath = currentPath.getParentPath();
+        return currentPath;
     }
 
     public void valueChanged(TreeSelectionEvent e)

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -80,8 +80,8 @@
  * in a JTable, and the statistics are displayed at the bottom of the table.
  *
  *@author    <a href="mailto:alf@i100.no">Alf Hogemark</a>
- *@created   March 10, 2002
- *@version   $Revision$
+ * created   March 10, 2002
+ *@version   $Revision$ Updated on $Date$
  */
 public class TableVisualizer
     extends AbstractVisualizer
@@ -145,7 +145,7 @@ public void updateGui(Sample s)
 
     public synchronized void clear()
     {
-        log.warn("Clear called",new Exception());
+        log.debug("Clear called",new Exception("Debug"));
         // this.graph.clear();
         model.clear();
         dataField.setText("0000");

File: src/core/org/apache/jmeter/swing/HtmlPane.java
Patch:
@@ -7,7 +7,7 @@
 import org.apache.log.Logger;
 
 /**
- * @version $Revision$
+ * @version $Revision$  Updated on: $Date$
  */
 public class HtmlPane extends JTextPane
 {
@@ -24,7 +24,7 @@ public void hyperlinkUpdate(HyperlinkEvent e)
                     String ref = e.getURL().getRef();
                     if (ref != null && ref.length() > 0)
                     {
-                        log.warn("reference to scroll to = " + ref);
+                        log.debug("reference to scroll to = " + ref);
                         scrollToReference(ref);
                     }
                 }

File: src/core/org/apache/jmeter/functions/gui/FunctionHelper.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.jmeter.config.gui.ArgumentsPanel;
 import org.apache.jmeter.functions.Function;
 import org.apache.jmeter.gui.action.ActionRouter;
+import org.apache.jmeter.gui.action.Help;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.ComponentUtil;
@@ -181,9 +182,7 @@ private class HelpListener implements ActionListener
         public void actionPerformed(ActionEvent e)
         {
             String[] source =
-                new String[] {
-                    JMeterUtils.getJMeterHome()
-                        + "/docs/usermanual/component_index.html",
+                new String[] { Help.HELP_PAGE,
                     functionList.getText()};
             ActionEvent helpEvent = new ActionEvent(source, e.getID(), "help");
             ActionRouter.getInstance().actionPerformed(helpEvent);

File: src/core/org/apache/jmeter/gui/action/ExitCommand.java
Patch:
@@ -100,7 +100,7 @@ public Set getActionNames()
      */
     public void doAction(ActionEvent e)
     {
-        ActionRouter.getInstance().actionPerformed(
+        ActionRouter.getInstance().doActionNow(
             new ActionEvent(e.getSource(), e.getID(), CheckDirty.CHECK_DIRTY));
         if (GuiPackage.getInstance().isDirty())
         {

File: src/core/org/apache/jmeter/gui/action/New.java
Patch:
@@ -103,7 +103,7 @@ public Set getActionNames()
      */
     public void doAction(ActionEvent e)
     {
-        ActionRouter.getInstance().actionPerformed(
+		ActionRouter.getInstance().doActionNow(
             new ActionEvent(e.getSource(), e.getID(), CheckDirty.CHECK_DIRTY));
         GuiPackage guiPackage = GuiPackage.getInstance();
         if (guiPackage.isDirty())

File: src/components/org/apache/jmeter/control/ThroughputController.java
Patch:
@@ -313,12 +313,12 @@ protected boolean canExecute()
         }
         else
         {
-            if (iteration == 0 && getPercentThroughputAsFloat() > 0)
+            if (iterations == 0 && getPercentThroughputAsFloat() > 0)
             {
                 retval = true;
             }
             else if (
-                ((float) executions / iteration) * 100
+                ((float) executions / iterations) * 100
                     <= getPercentThroughputAsFloat())
             {
                 retval = true;

File: src/core/org/apache/jmeter/gui/action/Help.java
Patch:
@@ -1,4 +1,5 @@
 package org.apache.jmeter.gui.action;
+import java.awt.Frame;
 import java.awt.GridLayout;
 import java.awt.event.ActionEvent;
 import java.io.IOException;
@@ -59,7 +60,7 @@ public void doAction(ActionEvent e)
         {
             helpWindow =
                 new JDialog(
-                    GuiPackage.getInstance().getMainFrame(),
+			        new Frame(),// independent frame to allow it to be overlaid by the main frame
                     JMeterUtils.getResString("help"),
                     false);
             helpWindow.getContentPane().setLayout(new GridLayout(1, 1));

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/util/NoConnectionsAvailableException.java
Patch:
@@ -10,9 +10,6 @@
 
 /**
  * @author ano ano
- *
- * To change the template for this generated type comment go to
- * Window>Preferences>Java>Code Generation>Code and Comments
  */
 public class NoConnectionsAvailableException extends SQLException
 {}

File: src/components/org/apache/jmeter/assertions/ResponseAssertion.java
Patch:
@@ -369,7 +369,9 @@ public void testThreadSafety() throws Exception
          synchronized (this)
          {
             while (threadsRunning > 0)
+            {
                wait();
+            }
          }
          assertEquals(failed, 0);
       }

File: src/core/org/apache/jmeter/config/ExtensionsFileFilter.java
Patch:
@@ -104,7 +104,7 @@ public boolean accept(File pFile)
         {
             return true;
         }
-        if (acceptableExtensions.contains(getExtension(pFile)) == true)
+        if (acceptableExtensions.contains(getExtension(pFile)))
         {
             return true;
         }

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -266,7 +266,9 @@ public void run()
         getTestTree().traverse(testPlan);
         Object[] plan = testPlan.getSearchResults().toArray();
         if (((TestPlan) plan[0]).isSerialized())
+        {
             serialized = true;
+        }
         compileTree();
         List testLevelElements =
             new LinkedList(getTestTree().list(getTestTree().getArray()[0]));

File: src/core/org/apache/jmeter/engine/util/CompoundVariable.java
Patch:
@@ -245,7 +245,9 @@ public void setParameters(String parameters)
     {
         this.rawParameters = parameters;
         if (parameters == null || parameters.length() == 0)
+        {
             return;
+        }
 
         compiledComponents = functionParser.compileString(parameters);
         if (compiledComponents.size() > 1

File: src/core/org/apache/jmeter/gui/GUIFactory.java
Patch:
@@ -68,7 +68,7 @@
  * @author Oliver Rossmueller
  * @version $Revision$
  */
-public class GUIFactory
+public final class GUIFactory
 {
     /** A Map from String to JComponent of registered GUI classes. */
     private static final Map GUI_MAP = new HashMap();

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -84,7 +84,7 @@
  * @author Michael Stover
  * @version $Revision$
  */
-public class GuiPackage
+public final class GuiPackage
 {
     /** Logging. */
     private static transient Logger log =

File: src/core/org/apache/jmeter/gui/action/ActionRouter.java
Patch:
@@ -77,7 +77,7 @@
  * @author     Michael Stover
  * @version    $Revision$
  */
-public class ActionRouter implements ActionListener
+public final class ActionRouter implements ActionListener
 {
     private Map commands = new HashMap();
     private static ActionRouter router;

File: src/core/org/apache/jmeter/gui/action/LookAndFeelCommand.java
Patch:
@@ -75,7 +75,9 @@ public class LookAndFeelCommand implements Command
     static {
         UIManager.LookAndFeelInfo[] lfs = UIManager.getInstalledLookAndFeels();
         for (int i = 0; i < lfs.length; i++)
+        {
             commands.add("laf:" + lfs[i].getClassName());
+        }
 
         try
         {

File: src/core/org/apache/jmeter/gui/action/New.java
Patch:
@@ -116,11 +116,13 @@ public void doAction(ActionEvent e)
                     JOptionPane.YES_NO_OPTION,
                     JOptionPane.QUESTION_MESSAGE)
                 == JOptionPane.YES_OPTION)
+            {
                 ActionRouter.getInstance().doActionNow(
                     new ActionEvent(
                         e.getSource(),
                         e.getID(),
                         CheckDirty.SAVE_ALL));
+            }
         }
         guiPackage.getTreeModel().clearTestPlan();
         guiPackage.getTreeListener().getJTree().setSelectionRow(1);

File: src/core/org/apache/jmeter/plugin/PluginManager.java
Patch:
@@ -65,7 +65,7 @@
  * @author Oliver Rossmueller
  * @version $Revision$
  */
-public class PluginManager
+public final class PluginManager
 {
     private static final PluginManager instance = new PluginManager();
 

File: src/core/org/apache/jmeter/reporters/FileReporter.java
Patch:
@@ -119,7 +119,9 @@ public void init(String file) throws IOException
             {
                 line.trim();
                 if (line.startsWith("#") || line.length() == 0)
+                {
                     continue;
+                }
                 int splitter = line.lastIndexOf(' ');
                 String key = line.substring(0, splitter);
                 int len = line.length() - 1;

File: src/jorphan/org/apache/jorphan/gui/JLabeledTextArea.java
Patch:
@@ -159,7 +159,7 @@ private void init()
     public void focusLost(FocusEvent pFocusEvent)
     {
          // Compare if the value has changed, since we received focus.
-         if (oldValue.equals(mTextArea.getText()) == false)
+         if (!oldValue.equals(mTextArea.getText()))
          {
               notifyChangeListeners();
          }

File: src/jorphan/org/apache/jorphan/gui/JLabeledTextField.java
Patch:
@@ -161,7 +161,7 @@ private void init()
     public void focusLost(FocusEvent pFocusEvent)
     {
         // Compare if the value has changed, since we received focus.
-        if (oldValue.equals(mTextField.getText()) == false)
+        if (!oldValue.equals(mTextField.getText()))
         {
             notifyChangeListeners();
         }

File: src/jorphan/org/apache/jorphan/logging/LoggingManager.java
Patch:
@@ -73,7 +73,7 @@
  * @author Michael Stover (mstover1 at apache.org)
  * @version $Revision$
  */
-public class LoggingManager
+public final class LoggingManager
 {
     private static PatternFormatter format =
         new PatternFormatter(

File: src/jorphan/org/apache/jorphan/test/AllTests.java
Patch:
@@ -123,14 +123,14 @@
  * @author     Michael Stover (mstover1 at apache.org)
  * @version $Revision$
  */
-public class AllTests
+public final class AllTests
 {
     transient private static Logger log = LoggingManager.getLoggerForClass();
 
     /**
-     * Constructor for the AllTests object.
+     * Private constructor to prevent instantiation.
      */
-    public AllTests()
+    private AllTests()
     {
     }
 

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -280,6 +280,7 @@ protected void checkDeleteStatus()
      */
     public void clear()
     {
+        stopTableEditing();
         tableModel.clearData();
     }
 

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -98,7 +98,7 @@
  */
 public class JMeterUtils implements UnitTestManager
 {
-    private static final String VERSION = "1.9";
+    private static final String VERSION = "1.9.20030815";
     private static PatternCacheLRU patternCache =
         new PatternCacheLRU(1000, new Perl5Compiler());
 

File: src/components/org/apache/jmeter/visualizers/GraphModel.java
Patch:
@@ -253,6 +253,8 @@ public void clear()
         bigChange = true;
         current = new Sample(0, 0, 0, 0, 0,false);
         statCalc.clear();
+        startTime = Long.MAX_VALUE;
+        endTime = Long.MIN_VALUE;
         this.fireDataChanged();
     }
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -703,6 +703,7 @@ protected byte[] readResponse(HttpURLConnection conn) throws IOException
         }
         catch (Exception e)
         {
+            log.info("Getting error message from server",e);
             in = new BufferedInputStream(conn.getErrorStream());
         }
         java.io.ByteArrayOutputStream w = new ByteArrayOutputStream();

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -377,7 +377,7 @@ protected Object makeNewArgument()
      * Stop any editing that is currently being done on the table.  This will
      * save any changes that have already been made.
      */
-    private void stopTableEditing()
+    protected void stopTableEditing()
     {
         if (table.isEditing())
         {

File: src/core/org/apache/jmeter/testelement/property/AbstractProperty.java
Patch:
@@ -433,7 +433,7 @@ protected Map normalizeMap(Map coll)
                     log.error("Bad collection", e);
                 }
             }
-            newColl.put(item, convertObject(item));
+            newColl.put(item, convertObject(prop));
         }
         if (newColl != null)
         {

File: src/core/org/apache/jmeter/testelement/property/MapProperty.java
Patch:
@@ -69,7 +69,9 @@ public class MapProperty extends MultiProperty
     public MapProperty(String name, Map value)
     {
         super(name);
+        log.info("map = " + value);
         this.value = normalizeMap(value);
+        log.info("normalized map = "+this.value);
     }
 
     public MapProperty()

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -142,8 +142,7 @@ public HeaderManager getHeaderManager()
         {
             String key = (String) keys.next();
             if (!key.equals("proxy-connection")
-                && !key.equals("content-length")
-                && !key.equals("accept-encoding"))
+                && !key.equals("content-length"))
             {
                 manager.add((Header) headers.get(key));
             }

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -302,7 +302,7 @@ public void run()
         }
         finally
         {
-            threadContext.setSamplingStarted(false);
+            threadContext.clear();
             log.info("Thread " + threadName + " is done");
             monitor.threadFinished(this);
         }

File: src/components/org/apache/jmeter/modifiers/gui/CounterConfigGui.java
Patch:
@@ -61,9 +61,9 @@ public void configure(TestElement element)
     {
         super.configure(element);
         CounterConfig config = (CounterConfig) element;
-        startField.setText(Integer.toString(config.getStart()));
-        endField.setText(Integer.toString(config.getEnd()));
-        incrField.setText(Integer.toString(config.getIncrement()));
+        startField.setText(config.getPropertyAsString(CounterConfig.START));
+        endField.setText(config.getPropertyAsString(CounterConfig.END));
+        incrField.setText(config.getPropertyAsString(CounterConfig.INCREMENT));
         varNameField.setText(config.getVarName());
         perUserField.setSelected(config.isPerUser());
     }

File: src/core/org/apache/jmeter/gui/action/Command.java
Patch:
@@ -57,14 +57,16 @@
 import java.awt.event.ActionEvent;
 import java.util.Set;
 
+import org.apache.jmeter.exceptions.IllegalUserActionException;
+
 /**
  * @author Michael Stover
  * @version $Revision$
  */
 
 public interface Command
 {
-    public void doAction(ActionEvent e);
+    public void doAction(ActionEvent e) throws IllegalUserActionException;
 
     public Set getActionNames();
 }
\ No newline at end of file

File: src/core/org/apache/jmeter/gui/action/New.java
Patch:
@@ -116,7 +116,7 @@ public void doAction(ActionEvent e)
                     JOptionPane.YES_NO_OPTION,
                     JOptionPane.QUESTION_MESSAGE)
                 == JOptionPane.YES_OPTION)
-                ActionRouter.getInstance().actionPerformed(
+                ActionRouter.getInstance().doActionNow(
                     new ActionEvent(
                         e.getSource(),
                         e.getID(),

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -289,6 +289,7 @@ public void run()
         notifier = new ListenerNotifier();
         schcdule_run = true;
         JMeterContextService.getContext().setSamplingStarted(true);
+        int groupCount = 1;
         while (iter.hasNext())
         {
             ThreadGroup group = (ThreadGroup) iter.next();
@@ -310,12 +311,12 @@ public void run()
                     (int) (((float) (group.getRampUp() * 1000)
                         / (float) group.getNumThreads())
                         * (float) i));
-                threads[i].setThreadName(group.getName() + "-" + (i + 1));
+                threads[i].setThreadName(group.getName() + (groupCount++) + "-" + (i + 1));
 
                 scheduleThread(threads[i], group);
 
                 Thread newThread = new Thread(threads[i]);
-                newThread.setName(group.getName() + "-" + (i + 1));
+                newThread.setName(threads[i].getThreadName());
                 allThreads.put(threads[i], newThread);
                 if (serialized
                     && !iter.hasNext()

File: src/core/org/apache/jmeter/engine/util/CompoundVariable.java
Patch:
@@ -188,7 +188,6 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
         while (iter.hasNext())
         {
             Object item = iter.next();
-            log.debug("executing object: " + item);
             if (item instanceof Function)
             {
                 testDynamic = true;

File: src/core/org/apache/jmeter/testelement/property/FunctionProperty.java
Patch:
@@ -110,6 +110,8 @@ public boolean equals(Object o)
      */
     public String getStringValue()
     {
+        log.debug("Calling getStringValue from FunctionProperty");
+        log.debug("boogedy boogedy");
         if (!isRunningVersion()
             || !JMeterContextService.getContext().isSamplingStarted())
         {

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -251,12 +251,10 @@ protected void addProperty(JMeterProperty property)
             || (prop instanceof StringProperty
                 && prop.getStringValue().equals("")))
         {
-            log.debug("setting property " + property);
             propMap.put(property.getName(), property);
         }
         else
         {
-            log.debug("merging in property: " + property.getClass());
             prop.mergeIn(property);
         }
     }

File: src/core/org/apache/jmeter/testelement/property/TestElementProperty.java
Patch:
@@ -136,10 +136,8 @@ public Object clone()
      */
     public void mergeIn(JMeterProperty prop)
     {
-        log.debug("merging in " + prop);
         if (isEqualType(prop))
         {
-            log.debug("was of equal type");
             value.addTestElement((TestElement) prop.getObjectValue());
         }
     }

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -317,7 +317,6 @@ private void configureWithConfigElements(Sampler sam, List configs)
         {
             ConfigTestElement config = (ConfigTestElement)iter.next();
             sam.addTestElement(config);
-            log.info("adding: " + config);
         }
     }
 }

File: src/core/org/apache/jmeter/testelement/property/AbstractProperty.java
Patch:
@@ -313,7 +313,6 @@ public boolean getBooleanValue()
 
     public boolean equals(Object o)
     {
-        log.debug("Testing whether " + this + " is equal to " + o);
         return compareTo(o) == 0;
     }
 

File: src/core/org/apache/jmeter/testelement/property/TestElementProperty.java
Patch:
@@ -136,8 +136,10 @@ public Object clone()
      */
     public void mergeIn(JMeterProperty prop)
     {
+        log.debug("merging in " + prop);
         if (isEqualType(prop))
         {
+            log.debug("was of equal type");
             value.addTestElement((TestElement) prop.getObjectValue());
         }
     }
@@ -151,8 +153,8 @@ public void recoverRunningVersion(TestElement owner)
         {
             value = savedValue;
         }
-        super.recoverRunningVersion(null);
         value.recoverRunningVersion();
+        super.recoverRunningVersion(null);
     }
 
     /* (non-Javadoc)

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -315,7 +315,9 @@ private void configureWithConfigElements(Sampler sam, List configs)
         Iterator iter = configs.iterator();
         while (iter.hasNext())
         {
-            sam.addTestElement((ConfigTestElement) iter.next());
+            ConfigTestElement config = (ConfigTestElement)iter.next();
+            sam.addTestElement(config);
+            log.info("adding: " + config);
         }
     }
 }

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -299,7 +299,7 @@ public void run()
         }
         notifier = new ListenerNotifier();
         schcdule_run = true;
-
+        JMeterContextService.getContext().setSamplingStarted(true);
         while (iter.hasNext())
         {
             ThreadGroup group = (ThreadGroup) iter.next();

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -297,6 +297,7 @@ public boolean isRunningVersion()
      */
     public void setRunningVersion(boolean runningVersion)
     {
+        log.debug("Setting " + this.getClass() + " to running version: " + runningVersion);
         this.runningVersion = runningVersion;
         PropertyIterator iter = propertyIterator();
         while (iter.hasNext())

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -992,6 +992,8 @@ public static String getJMeterVersion()
 
 
 
+
+
 
 
 

File: src/components/org/apache/jmeter/modifiers/UserParameters.java
Patch:
@@ -28,7 +28,7 @@ public class UserParameters extends AbstractTestElement implements Serializable,
     public static final String THREAD_VALUES = "UserParameters.thread_values";
     public static final String PER_ITERATION = "UserParameters.per_iteration";
     private int counter = 0;
-    transient private Object lock = new Object();
+	private Integer lock = new Integer(0);
 
     public CollectionProperty getNames()
     {

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -97,7 +97,7 @@
  */
 public class JMeterUtils implements UnitTestManager
 {
-        private static final String VERSION="1.9.RC20030610";
+        private static final String VERSION="1.9.RC20030611";
         private static PatternCacheLRU patternCache = new PatternCacheLRU(1000,new Perl5Compiler());
 
 	transient private static Logger log =
@@ -996,3 +996,4 @@ public static String getJMeterVersion()
 
 
 
+

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/WebServiceSamplerGui.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.jorphan.gui.JLabeledTextArea;
 import org.apache.jorphan.gui.JLabeledTextField;
 import org.apache.jorphan.gui.layout.VerticalLayout;
-import org.apache.jorphan.io.TextFile;
 
 /**
  * @author peter lin

File: src/components/org/apache/jmeter/control/gui/ModuleControllerGui.java
Patch:
@@ -96,7 +96,7 @@ public class ModuleControllerGui extends AbstractControllerGui /*implements Unsh
 	private JComboBox nodes;
 	private DefaultComboBoxModel nodesModel;
 
-	public static String STATIC_LABEL = "ModuleController";
+	public static String STATIC_LABEL = JMeterUtils.getResString("module_controller_title");
 	public static String CONTROLLER = "Module To Run";
 	
 

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -69,7 +69,7 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jorphan.collections.HashTree;
-import org.apache.log.Hierarchy;
+import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
 /**
@@ -87,7 +87,7 @@ public class GuiPackage
 {
     /** Logging. */
     private static transient Logger log =
-        Hierarchy.getDefaultHierarchy().getLoggerFor("jmeter.gui");
+        LoggingManager.getLoggerForClass();
 
     /** Singleton instance. */
     private static GuiPackage guiPack;

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -168,7 +168,7 @@ public TestElement createTestElement()
 
 	public String getStaticLabel()
 	{
-		return ((TestElement)getUserObject()).getPropertyAsString(TestElement.NAME);
+		return GuiPackage.getInstance().getGui((TestElement)getUserObject()).getStaticLabel();
 	}
 
 	/************************************************************

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -97,7 +97,7 @@
  */
 public class JMeterUtils implements UnitTestManager
 {
-        private static final String VERSION="1.9.RC20030609";
+        private static final String VERSION="1.9.RC20030610";
         private static PatternCacheLRU patternCache = new PatternCacheLRU(1000,new Perl5Compiler());
 
 	transient private static Logger log =
@@ -995,3 +995,4 @@ public static String getJMeterVersion()
 
 
 
+

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPArgumentsPanel.java
Patch:
@@ -110,4 +110,5 @@ protected boolean isMetaDataNormal(HTTPArgument arg)
     {
         return arg.getMetaData() == null || arg.getMetaData().equals("=") || (arg.getValue() != null && arg.getValue().toString().length() > 0);
     }
+
 }

File: src/core/org/apache/jmeter/gui/action/ExitCommand.java
Patch:
@@ -116,7 +116,7 @@ public void doAction(ActionEvent e)
             }
             else if (chosenOption == JOptionPane.YES_OPTION)
             {
-                ActionRouter.getInstance().actionPerformed(new ActionEvent(e.getSource(), e.getID(), Save.SAVE_ALL));
+                ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), Save.SAVE_ALL));
                 if (!GuiPackage.getInstance().isDirty())
                 {
                     System.exit(0);

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -163,7 +163,7 @@ else if(e.getActionCommand().equals(SAVE_ALL) || e.getActionCommand().equals(SAV
 			chosenFile = testPlanFile;
 		}
 
-        ActionRouter.getInstance().actionPerformed(new ActionEvent(subTree.clone(),e.getID(),CheckDirty.SUB_TREE_SAVED));
+        ActionRouter.getInstance().doActionNow(new ActionEvent(subTree,e.getID(),CheckDirty.SUB_TREE_SAVED));
         try
                 {
                     convertSubTree(subTree);

File: src/jorphan/org/apache/jorphan/collections/ListedHashTree.java
Patch:
@@ -83,8 +83,7 @@ public ListedHashTree()
 	public Object clone()
 	{
 		ListedHashTree newTree = new ListedHashTree();
-		newTree.data = (Map)((HashMap)data).clone();
-		newTree.order = (List)((LinkedList)order).clone();
+        cloneTree(newTree);
 		return newTree;
 	}
 

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -478,7 +478,7 @@ public URL getUrl() throws MalformedURLException
         {
             pathAndQuery = "/" + pathAndQuery;
         }
-        if (getPort() == UNSPECIFIED_PORT)
+        if (getPort() == UNSPECIFIED_PORT || getPort() == 80 )
         {
             return new URL(getProtocol(), getDomain(), pathAndQuery);
         }

File: src/core/org/apache/jmeter/gui/action/CheckDirty.java
Patch:
@@ -107,6 +107,7 @@ else if(action.equals(REMOVE))
 	 */
 	public void addNode(Object node,HashTree subTree)
 	{
+        log.debug("Node is class:" + node.getClass());
 		JMeterGUIComponent treeNode = (JMeterGUIComponent)node;
 		if(checkMode)
 		{

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -163,7 +163,7 @@ else if(e.getActionCommand().equals(SAVE_ALL) || e.getActionCommand().equals(SAV
 			chosenFile = testPlanFile;
 		}
 
-        ActionRouter.getInstance().actionPerformed(new ActionEvent(subTree,e.getID(),CheckDirty.SUB_TREE_SAVED));
+        ActionRouter.getInstance().actionPerformed(new ActionEvent(subTree.clone(),e.getID(),CheckDirty.SUB_TREE_SAVED));
         try
                 {
                     convertSubTree(subTree);

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -97,7 +97,7 @@
  */
 public class JMeterUtils implements UnitTestManager
 {
-        private static final String VERSION="1.9.RC20030604";
+        private static final String VERSION="1.9.RC20030605";
         private static PatternCacheLRU patternCache = new PatternCacheLRU(1000,new Perl5Compiler());
 
 	transient private static Logger log =
@@ -988,3 +988,4 @@ public static String getJMeterVersion()
 
 
 
+

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -91,13 +91,15 @@ public byte[] parse(InputStream in) throws IOException
                     dataLength =
                         Math.max(parseLine(line.toString()), dataLength);
                 }
+                //log.debug("Client Request Line: " + line.toString());
                 line.reset();
             }
             else if (!inHeaders)
             {
                 readLength++;
             }
         }
+        log.debug("Client Request Line: " + line.toString());
         postData = line.toString().trim();
         return clientRequest.toByteArray();
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -131,7 +131,6 @@ void configure(
     public void run()
     {
         HttpRequestHdr request = new HttpRequestHdr();
-        HttpReplyHdr reply = new HttpReplyHdr();
 
         try
         {
@@ -157,12 +156,12 @@ public void run()
         catch (UnknownHostException uhe)
         {
             log.warn("Server Not Found.", uhe);
-            writeErrorToClient(reply.formServerNotFound());
+            writeErrorToClient(HttpReplyHdr.formServerNotFound());
         }
         catch (Exception e)
         {
             log.error("",e);
-            writeErrorToClient(reply.formTimeout());
+            writeErrorToClient(HttpReplyHdr.formTimeout());
         }
         finally
         {

File: src/core/org/apache/jmeter/engine/util/SimpleVariable.java
Patch:
@@ -47,7 +47,7 @@ public String toString()
 		
 		if ( vars != null )
 			ret = vars.get(name);
-		if( ret == null  || ret.length() == 0 )
+		if( ret == null)
 			return "${"+name+"}";
 
 		return ret;

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -146,6 +146,7 @@ public void run()
             log.info("Thread " + Thread.currentThread().getName() + " started");
             controller.initialize();
             controller.addIterationListener(new IterationListener());
+            threadContext.setSamplingStarted(true);
             while (running)
             {
             	Sampler sam;
@@ -155,10 +156,8 @@ public void run()
                     {
                         threadContext.setCurrentSampler(sam);
                         SamplePackage pack = compiler.configureSampler(sam);
-                        delay(pack.getTimers());
-                        threadContext.setSamplingStarted(true);                        
+                        delay(pack.getTimers());                        
                         SampleResult result = pack.getSampler().sample(null);
-                        threadContext.setSamplingStarted(false);
                         result.setThreadName(threadName);
                         result.setTimeStamp(System.currentTimeMillis());
                         threadContext.setPreviousResult(result);
@@ -180,6 +179,7 @@ public void run()
         }
         finally
         {
+            threadContext.setSamplingStarted(false);
             log.info("Thread " + threadName + " is done");
             monitor.threadFinished(this);
         }

File: src/core/org/apache/jmeter/testelement/property/FunctionProperty.java
Patch:
@@ -59,7 +59,7 @@ public boolean equals(Object o)
      */
     public String getStringValue()
     {
-        if (!isRunningVersion())
+        if (!isRunningVersion() || !JMeterContextService.getContext().isSamplingStarted())
         {
             log.debug("Not running version, return raw function string");
             return function.getRawParameters();

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -156,7 +156,9 @@ public void run()
                         threadContext.setCurrentSampler(sam);
                         SamplePackage pack = compiler.configureSampler(sam);
                         delay(pack.getTimers());
+                        threadContext.setSamplingStarted(true);                        
                         SampleResult result = pack.getSampler().sample(null);
+                        threadContext.setSamplingStarted(false);
                         result.setThreadName(threadName);
                         result.setTimeStamp(System.currentTimeMillis());
                         threadContext.setPreviousResult(result);

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -147,7 +147,6 @@ public void done(SamplePackage pack)
     public void addNode(Object node, HashTree subTree)
     {
         stack.addLast(node);
-        log.debug("Added " + node + " to stack.  Stack size = " + stack.size());
     }
 
     /****************************************
@@ -160,7 +159,6 @@ public void subtractNode()
         trackIterationListeners(stack);
         if (child instanceof Sampler)
         {
-            log.debug("Saving configs for sampler: " + child);
             saveSamplerConfigs((Sampler) child);
         }
         stack.removeLast();

File: src/components/org/apache/jmeter/control/RandomController.java
Patch:
@@ -89,6 +89,7 @@ protected void resetCurrent()
 	 */
 	protected void incrementCurrent()
 	{
+		super.incrementCurrent();
 		current = rand.nextInt(this.getSubControllers().size());
 	}
 

File: src/components/org/apache/jmeter/control/ModuleController.java
Patch:
@@ -187,7 +187,7 @@ private void restoreSelected()
 		if (selectedNode == null)
 		{
 			Vector nodePath = getNodePath();
-			if (nodePath != null)
+			if (nodePath != null && nodePath.size()>0)
 			{
 				GuiPackage gp = GuiPackage.getInstance();
 				if ( gp != null ) 

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -162,6 +162,7 @@ public boolean insertLoadedTree(int id, HashTree tree) throws Exception, Illegal
 		//convertTree(tree);
         boolean isTestPlan = tree.getArray()[0] instanceof TestPlan;
 		HashTree newTree = GuiPackage.getInstance().addSubTree(tree);
+        GuiPackage.getInstance().updateCurrentGui();
         GuiPackage.getInstance().getMainFrame().getTree().setSelectionPath(
         new TreePath(((JMeterTreeNode)newTree.getArray()[0]).getPath()));
 		tree = GuiPackage.getInstance().getCurrentSubTree();				

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeModel.java
Patch:
@@ -134,6 +134,7 @@ public HashTree addSubTree(HashTree subTree, JMeterTreeNode current) throws Ille
                 ((TestElement) current.getUserObject()).addTestElement(item);
                 ((TestPlan)current.getUserObject()).setName(item.getPropertyAsString(TestElement.NAME));
                 ((TestPlan)current.getUserObject()).setFunctionalMode(item.getPropertyAsBoolean(TestPlan.FUNCTIONAL_MODE));
+                ((TestPlan)current.getUserObject()).setSerialized(item.getPropertyAsBoolean(TestPlan.SERIALIZE_THREADGROUPS));
                 addSubTree(subTree.getTree(item), current);
             }
             else if(item instanceof WorkBench)

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java
Patch:
@@ -195,6 +195,7 @@ public String getClassname()
      */
     public SampleResult sample(Entry entry)
     {
+    	context = new JavaSamplerContext(getArguments());
         if (javaClient == null)
         {
             log.debug(whoAmI() + "Creating Java Client");

File: src/components/org/apache/jmeter/control/gui/ThroughputControllerGui.java
Patch:
@@ -127,14 +127,14 @@ public void modifyTestElement(TestElement tc)
 			try {
 				((ThroughputController)tc).setMaxThroughput(Integer.parseInt(throughput.getText().trim()));
 			} catch (NumberFormatException e) {
-				((ThroughputController)tc).setMaxThroughput(1);
+				((ThroughputController)tc).setMaxThroughput(throughput.getText());
 			}
         }
         else {
         	try {
         		((ThroughputController)tc).setPercentThroughput(Float.parseFloat(throughput.getText().trim()));
         	} catch (NumberFormatException e) {
-        		((ThroughputController)tc).setPercentThroughput(100);
+        		((ThroughputController)tc).setPercentThroughput(throughput.getText());
            	}
         }
     }

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -97,7 +97,7 @@
  */
 public class JMeterUtils implements UnitTestManager
 {
-        private static final String VERSION="1.8.1";
+        private static final String VERSION="1.9-RC1";
         private static PatternCacheLRU patternCache = new PatternCacheLRU(1000,new Perl5Compiler());
 
 	transient private static Logger log =
@@ -978,3 +978,4 @@ public static String getJMeterVersion()
 	}
 }
 
+

File: src/core/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java
Patch:
@@ -82,8 +82,6 @@
  *
  * @see JMeterGUIComponent
  * @see org.apache.jmeter.config.gui.AbstractConfigGui
- * @see org.apache.jmeter.config.gui.AbstractModifierGui
- * @see org.apache.jmeter.config.gui.AbstractResponseBasedModifierGui
  * @see org.apache.jmeter.assertions.gui.AbstractAssertionGui
  * @see org.apache.jmeter.control.gui.AbstractControllerGui
  * @see org.apache.jmeter.timers.gui.AbstractTimerGui

File: src/core/org/apache/jmeter/gui/JMeterGUIComponent.java
Patch:
@@ -76,8 +76,6 @@
  * 
  * @see AbstractJMeterGuiComponent
  * @see org.apache.jmeter.config.gui.AbstractConfigGui
- * @see org.apache.jmeter.config.gui.AbstractModifierGui
- * @see org.apache.jmeter.config.gui.AbstractResponseBasedModifierGui
  * @see org.apache.jmeter.assertions.gui.AbstractAssertionGui
  * @see org.apache.jmeter.control.gui.AbstractControllerGui
  * @see org.apache.jmeter.timers.gui.AbstractTimerGui

File: src/functions/org/apache/jmeter/functions/CSVRead.java
Patch:
@@ -70,7 +70,6 @@
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
 
-/**
 /**
  * @author Cyrus M.
  * Syntax is similar to StringFromFile function.
@@ -306,14 +305,14 @@ protected synchronized void reset()
     }
 
     /**
-     * @see set the FileDataContainer
+     * Set the FileDataContainer.
      */
     protected synchronized void setFileData(FileDataContainer newValue)
     {
         fileData = newValue;
     }
     /**
-     * @see org.apache.jmeter.functions.Function#setParameters(String)
+     * @see org.apache.jmeter.functions.Function#setParameters(Collection)
      */
     public void setParameters(Collection parameters) throws InvalidVariableException
     {

File: src/functions/org/apache/jmeter/functions/FileDataContainer.java
Patch:
@@ -149,7 +149,8 @@ public void incrementRowPosition()
     /**
      *
      * @param theLine
-     * @return
+     * @return        an ArrayList of Strings containing one element for each
+     *                value in the line
      */
     protected ArrayList processNextCSVLine(String theLine)
     {

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/URLRewritingModifier.java
Patch:
@@ -36,9 +36,7 @@ public class URLRewritingModifier extends AbstractTestElement implements Seriali
     private final static String ARGUMENT_NAME = "argument_name";
     private final static String PATH_EXTENSION = "path_extension";
     private final static String PATH_EXTENSION_NO_EQUALS = "path_extension_no_equals";
-    /**
-     * @see ResponseBasedModifier#modifyEntry(Sampler, SampleResult)
-     */
+
     public void process()
     {
         Sampler sampler = JMeterContextService.getContext().getCurrentSampler();

File: src/core/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -344,8 +344,9 @@ private Component makeMainPanel()
         //		table.setRowHeight(renderer.getPreferredHeight());
         //		table.setDefaultRenderer(String.class,renderer);
         table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
-
-        return new JScrollPane(table);
+        JScrollPane pane = new JScrollPane(table);
+        pane.setPreferredSize(pane.getMinimumSize());
+        return pane;
     }
 
     private JPanel makeButtonPanel() {

File: src/core/org/apache/jmeter/control/gui/TestPlanGui.java
Patch:
@@ -53,8 +53,8 @@ public JPopupMenu createPopupMenu()
         addMenu.add(MenuFactory.makeMenu(MenuFactory.LISTENERS, "Add"));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.CONFIG_ELEMENTS, "Add"));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.ASSERTIONS, "Add"));
-        addMenu.add(MenuFactory.makeMenu(MenuFactory.MODIFIERS, "Add"));
-        addMenu.add(MenuFactory.makeMenu(MenuFactory.RESPONSE_BASED_MODIFIERS, "Add"));
+        addMenu.add(MenuFactory.makeMenu(MenuFactory.PRE_PROCESSORS, "Add"));
+        addMenu.add(MenuFactory.makeMenu(MenuFactory.POST_PROCESSORS, "Add"));
         addMenu.add(MenuFactory.makeMenu(MenuFactory.TIMERS, "Add"));
         pop.add(addMenu);
         MenuFactory.addFileMenu(pop);

File: src/core/org/apache/jmeter/threads/gui/ThreadGroupGui.java
Patch:
@@ -161,7 +161,9 @@ public JPopupMenu createPopupMenu()
         JPopupMenu pop = new JPopupMenu();
         pop.add(
             MenuFactory.makeMenus(
-                new String[] { MenuFactory.CONTROLLERS, MenuFactory.LISTENERS, MenuFactory.SAMPLERS, MenuFactory.TIMERS, MenuFactory.CONFIG_ELEMENTS },
+                new String[] { MenuFactory.CONTROLLERS, MenuFactory.LISTENERS, MenuFactory.SAMPLERS, 
+                    MenuFactory.TIMERS, MenuFactory.CONFIG_ELEMENTS,MenuFactory.PRE_PROCESSORS,
+                    MenuFactory.POST_PROCESSORS },
                 JMeterUtils.getResString("Add"),
                 "Add"));
         MenuFactory.addEditMenu(pop, true);

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/gui/ParamModifierGui.java
Patch:
@@ -10,8 +10,8 @@
 import javax.swing.JPanel;
 import javax.swing.JTextField;
 
-import org.apache.jmeter.config.gui.AbstractModifierGui;
 import org.apache.jmeter.gui.util.HorizontalPanel;
+import org.apache.jmeter.processor.gui.AbstractPreProcessorGui;
 import org.apache.jmeter.protocol.http.modifier.ParamMask;
 import org.apache.jmeter.protocol.http.modifier.ParamModifier;
 import org.apache.jmeter.testelement.TestElement;
@@ -25,7 +25,7 @@
  *@created   Jan 18, 2002
  *@version   $Revision$
  ***************************************/
-public class ParamModifierGui extends AbstractModifierGui implements FocusListener
+public class ParamModifierGui extends AbstractPreProcessorGui implements FocusListener
 {
 
     private final String NAME = "name";

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/gui/URLRewritingModifierGui.java
Patch:
@@ -4,8 +4,8 @@
 
 import javax.swing.JCheckBox;
 
-import org.apache.jmeter.config.gui.AbstractResponseBasedModifierGui;
 import org.apache.jmeter.gui.util.VerticalPanel;
+import org.apache.jmeter.processor.gui.AbstractPreProcessorGui;
 import org.apache.jmeter.protocol.http.modifier.URLRewritingModifier;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
@@ -17,7 +17,7 @@
  * To change this generated comment edit the template variable "typecomment":
  * Window>Preferences>Java>Templates.
  */
-public class URLRewritingModifierGui extends AbstractResponseBasedModifierGui {
+public class URLRewritingModifierGui extends AbstractPreProcessorGui {
 	
 	JLabeledTextField argumentName;
 	JCheckBox pathExt;

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/gui/UserParameterModifierGui.java
Patch:
@@ -63,7 +63,7 @@
 import javax.swing.JTextArea;
 import javax.swing.JTextField;
 
-import org.apache.jmeter.config.gui.AbstractModifierGui;
+import org.apache.jmeter.processor.gui.AbstractPreProcessorGui;
 import org.apache.jmeter.protocol.http.modifier.UserParameterModifier;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
@@ -76,7 +76,7 @@
  *@created    $Date$
  *@version    1.0
  ***********************************************************/
-public class UserParameterModifierGui extends AbstractModifierGui {
+public class UserParameterModifierGui extends AbstractPreProcessorGui {
 	//-------------------------------------------
 	// Constants and Data Members
 	//-------------------------------------------

File: src/components/org/apache/jmeter/visualizers/GraphModel.java
Patch:
@@ -313,7 +313,7 @@ protected Sample addNewSample(long sample, long timeStamp, boolean success)
 
         if (samples.size() == 0)
         {
-            startTime = timeStamp;
+            startTime = timeStamp - sample;
         }
 
         float throughput = 0;

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -367,6 +367,7 @@ public void sampleStopped(SampleEvent e)
     public void sampleOccurred(SampleEvent e)
     {
         SampleResult result = e.getResult();
+        result.setTimeStamp(System.currentTimeMillis());
 
         if (!isErrorLogging() || !result.isSuccessful())
         {

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -164,6 +164,7 @@ public void updateGui(Sample s)
      ***************************************/
     public synchronized void clear()
     {
+        log.warn("Clear called",new Exception());
         // this.graph.clear();
         model.clear();
         dataField.setText("0000");

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -377,6 +377,7 @@ private void makeRunMenu()
 		run_clearAll = new JMenuItem(JMeterUtils.getResString("clear_all"), 'a');
 		run_clearAll.addActionListener(ActionRouter.getInstance());
 		run_clearAll.setActionCommand(org.apache.jmeter.gui.action.Clear.CLEAR_ALL);
+        run_clearAll.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E,KeyEvent.CTRL_MASK));
 		runMenu.add(run_start);
 		if (remote_start != null)
 		{
@@ -396,7 +397,7 @@ private void makeRunMenu()
 		}
 		remote_stop_all = new JMenuItem(JMeterUtils.getResString("remote_stop_all"), 'X');
 		remote_stop_all.setAccelerator(
-			KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_MASK));
+			KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.ALT_MASK));
 		remote_stop_all.addActionListener(ActionRouter.getInstance());
 		remote_stop_all.setActionCommand("remote_stop_all");
 		runMenu.add(remote_stop_all);

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -201,7 +201,7 @@ public void loadExistingFile() throws SAXException, IOException, ConfigurationEx
             try
             {
                 Configuration savedSamples = getConfiguration(getFilename());
-                clear();
+                clearVisualizer();
                 readSamples(savedSamples);
             }
             catch (Exception e)
@@ -340,7 +340,7 @@ private Configuration getConfiguration(String filename)
         return builder.buildFromFile(filename);
     }
 
-    public void clear()
+    public void clearVisualizer()
     {
         current = -1;
         if (getVisualizer() != null && getVisualizer() instanceof Clearable)

File: src/core/org/apache/jmeter/visualizers/gui/AbstractVisualizer.java
Patch:
@@ -33,7 +33,7 @@
 public abstract class AbstractVisualizer extends AbstractJMeterGuiComponent implements Visualizer, ChangeListener, UnsharedComponent
 {
 
-    transient private static Logger log = Hierarchy.getDefaultHierarchy().getLoggerFor("jmeter.gui");
+    transient protected static Logger log = Hierarchy.getDefaultHierarchy().getLoggerFor("jmeter.gui");
 
     private FilePanel filePanel;
     private JCheckBox errorLogging;

File: src/components/org/apache/jmeter/control/gui/ThroughputControllerGui.java
Patch:
@@ -217,6 +217,6 @@ public void itemStateChanged(ItemEvent event)
 				}
 			}
 		);
-//		add(perthread);
+		add(perthread);
 	}
 }

File: src/core/org/apache/jmeter/junit/JMeterTest.java
Patch:
@@ -77,9 +77,10 @@ public void testGUIComponents() throws Exception
 				assertEquals("GUI-CLASS: Failed on " + item.getClass().getName(),"",
 						el2.getPropertyAsString("NOT"));
 			}
-            
+            log.debug("Saving element: " + el.getClass());
 			el = SaveService.createTestElement(SaveService.getConfigForTestElement(null,
 					el));
+            log.debug("Successfully saved");
 			item.configure(el);
 			assertEquals("CONFIGURE-TEST: Failed on " + item.getClass().getName(),
 					el.getPropertyAsString(TestElement.NAME), item.getName());
@@ -100,7 +101,6 @@ public void testSerializableElements() throws Exception
 			}
 			try
 			{
-				log.debug("serializing class: "+serObj.getClass().getName());
 				ByteArrayOutputStream bytes = new ByteArrayOutputStream();
 				ObjectOutputStream out = new ObjectOutputStream(bytes);
 				out.writeObject(serObj);

File: src/components/org/apache/jmeter/visualizers/AssertionVisualizer.java
Patch:
@@ -54,13 +54,10 @@
  */
 package org.apache.jmeter.visualizers;
 
-
 import java.awt.BorderLayout;
 
 import javax.swing.Box;
-import javax.swing.BoxLayout;
 import javax.swing.JLabel;
-import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 import javax.swing.JTextArea;
 import javax.swing.border.Border;

File: src/core/org/apache/jmeter/gui/util/FilePanel.java
Patch:
@@ -51,8 +51,9 @@
  * individuals on behalf of the Apache Software Foundation.  For more
  * information on the Apache Software Foundation, please see
  * <http://www.apache.org/>.
- */package org.apache.jmeter.gui.util;
-import java.awt.Dimension;
+ */
+package org.apache.jmeter.gui.util;
+
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.util.Iterator;

File: src/core/org/apache/jmeter/visualizers/gui/AbstractVisualizer.java
Patch:
@@ -1,10 +1,10 @@
 package org.apache.jmeter.visualizers.gui;
+
 import java.awt.Component;
 import java.awt.Container;
 import java.util.Arrays;
 import java.util.Collection;
 
-import javax.swing.Box;
 import javax.swing.JCheckBox;
 import javax.swing.JPopupMenu;
 import javax.swing.event.ChangeEvent;

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/URLRewritingModifier.java
Patch:
@@ -1,6 +1,5 @@
 package org.apache.jmeter.protocol.http.modifier;
 import java.io.Serializable;
-import java.net.URLDecoder;
 
 import junit.framework.TestCase;
 
@@ -16,11 +15,11 @@
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
-import org.apache.oro.text.regex.MalformedPatternException;
 import org.apache.oro.text.regex.MatchResult;
 import org.apache.oro.text.regex.Pattern;
 import org.apache.oro.text.regex.Perl5Compiler;
 import org.apache.oro.text.regex.Perl5Matcher;
+
 /**
  * @author mstover
  *

File: src/components/org/apache/jmeter/control/RandomController.java
Patch:
@@ -99,7 +99,7 @@ protected void incrementCurrent()
 
 
 	/**
-	 * @see org.apache.jmeter.testelement.ThreadListener#iterationStarted(int)
+	 * @see org.apache.jmeter.engine.event.IterationListener#iterationStarted(org.apache.jmeter.engine.event.IterationEvent)
 	 */
 	public void iterationStart(IterationEvent event)
 	{

File: src/components/org/apache/jmeter/modifiers/CounterConfig.java
Patch:
@@ -36,7 +36,7 @@ public class CounterConfig
 	private int end = Integer.MAX_VALUE;
 	private int currentIterationCount = -1;
 	/**
-	 * @see org.apache.jmeter.testelement.ThreadListener#iterationStarted(int)
+	 * @see org.apache.jmeter.engine.event.IterationListener#iterationStarted(org.apache.jmeter.engine.event.IterationEvent)
 	 */
 	public synchronized void iterationStart(IterationEvent event)
 	{

File: src/components/org/apache/jmeter/modifiers/UserParameters.java
Patch:
@@ -123,7 +123,7 @@ private void setValues()
     }
 
     /**
-     * @see org.apache.jmeter.testelement.ThreadListener#iterationStarted(int)
+     * @see org.apache.jmeter.engine.event.IterationListener#iterationStarted(org.apache.jmeter.engine.event.IterationEvent)
      */
     public void iterationStart(IterationEvent event)
     {

File: src/components/org/apache/jmeter/timers/ConstantTimer.java
Patch:
@@ -160,7 +160,7 @@ public String toString()
     /**
      * Gain access to any variables that have been defined.
      * 
-     * @see org.apache.jmeter.testelement.ThreadListener#iterationStarted(int)
+     * @see org.apache.jmeter.engine.event.IterationListener#iterationStarted(org.apache.jmeter.engine.event.IterationEvent)
      */
     public void iterationStart(IterationEvent event)
     {

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -248,12 +248,12 @@ private void notifyTestListeners()
             TestListener listener = (TestListener)iter.next();
             if(listener instanceof TestElement)
             {
-                listener.testIterationStart(new IterationEvent(controller,threadVars.getIteration()));
+                listener.testIterationStart(new IterationEvent(controller,null,threadVars.getIteration()));
                 ((TestElement)listener).recoverRunningVersion();
             }
             else
             {
-                listener.testIterationStart(new IterationEvent(controller,threadVars.getIteration()));
+                listener.testIterationStart(new IterationEvent(controller,null,threadVars.getIteration()));
             }
             
         }

File: src/core/org/apache/jmeter/gui/action/Save.java
Patch:
@@ -86,9 +86,9 @@ public class Save implements Command
 {
 	transient private static Logger log = Hierarchy.getDefaultHierarchy().getLoggerFor(
 			"jmeter.gui");
-	private final static String SAVE_ALL = "save_all";
-	private final static String SAVE = "save_as";
-	private final static String SAVE_TO_PREVIOUS = "save";
+	public final static String SAVE_ALL = "save_all";
+	public final static String SAVE = "save_as";
+	public final static String SAVE_TO_PREVIOUS = "save";
 	private String chosenFile;
 	private String testPlanFile;
 

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -258,7 +258,7 @@ public boolean isDirty()
     {
         return dirty;
     }
-    public boolean addSubTree(HashTree subTree) throws IllegalUserActionException
+    public HashTree addSubTree(HashTree subTree) throws IllegalUserActionException
     {
         return treeModel.addSubTree(subTree, treeListener.getCurrentNode());
     }

File: src/core/org/apache/jmeter/gui/action/CheckDirty.java
Patch:
@@ -22,7 +22,7 @@
 public class CheckDirty extends AbstractAction implements 
 		HashTreeTraverser
 {
-	private Map previousGuiItems;
+	private static Map previousGuiItems;
 	public static final String CHECK_DIRTY = "check_dirty";
 	public static final String SUB_TREE_SAVED = "sub_tree_saved";
 	public static final String SUB_TREE_LOADED = "sub_tree_loaded";
@@ -130,7 +130,7 @@ else if(removeMode)
 		}
 		else
 		{
-			previousGuiItems.put(treeNode,treeNode.createTestElement());
+			previousGuiItems.put(treeNode,treeNode.createTestElement().clone());
 		}
 	}
 

File: src/core/org/apache/jmeter/testelement/property/AbstractProperty.java
Patch:
@@ -261,6 +261,7 @@ public boolean getBooleanValue()
 
     public boolean equals(Object o)
     {
+        log.debug("Testing whether " + this + " is equal to " + o);
         return compareTo(o) == 0;
     }
 

File: src/core/org/apache/jmeter/testelement/property/TestElementProperty.java
Patch:
@@ -30,7 +30,7 @@ public boolean equals(Object o)
         {
             if (value != null)
             {
-                return value.equals(((TestElementProperty) o).getObjectValue());
+                return value.equals(((JMeterProperty) o).getObjectValue());
             }
         }
         return false;

File: src/components/org/apache/jmeter/timers/gui/UniformRandomTimerGui.java
Patch:
@@ -83,7 +83,7 @@ public class UniformRandomTimerGui extends AbstractTimerGui
 	private final String DELAY_FIELD = "Delay Field";
 	private final String RANGE_FIELD = "Range Field";
 
-	public final String DEFAULT_DELAY = "300";
+	public final String DEFAULT_DELAY = "0";
 	public final String DEFAULT_RANGE = "100.0";
 
 	private JTextField delayField;

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -154,7 +154,7 @@ public class JMeter implements JMeterPlugin {
 				LOGFILE_OPT,
 				"the file to log samples to"),
 			new CLOptionDescriptor(
-				"logfile",
+				"nongui",
 				CLOptionDescriptor.ARGUMENT_DISALLOWED,
 				NONGUI_OPT,
 				"run JMeter in nongui mode"),

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -58,7 +58,6 @@
 import java.awt.Font;
 import java.awt.GridBagConstraints;
 import java.awt.GridBagLayout;
-import java.awt.GridLayout;
 import java.awt.Insets;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;

File: src/core/org/apache/jmeter/gui/action/CheckDirty.java
Patch:
@@ -20,7 +20,7 @@
  * Window>Preferences>Java>Templates.
  */
 public class CheckDirty extends AbstractAction implements 
-		HashTreeTraverser 
+		HashTreeTraverser
 {
 	private Map previousGuiItems;
 	public static final String CHECK_DIRTY = "check_dirty";
@@ -53,7 +53,7 @@ public CheckDirty()
 	{
 		previousGuiItems = new HashMap();
 	}
-		
+    
 
 	/**
 	 * @see Command#doAction(ActionEvent)

File: src/core/org/apache/jmeter/gui/action/Help.java
Patch:
@@ -64,6 +64,9 @@ public void doAction(ActionEvent e)
 			helpWindow.getContentPane().setLayout(new GridLayout(1, 1));
 			ComponentUtil.centerComponentInWindow(helpWindow, 60);
 		}
+        helpWindow.getContentPane().removeAll();
+        helpWindow.getContentPane().add(scroller);
+        helpWindow.show();
 		if(e.getSource() instanceof String[])
 		{
 			String[] source = (String[])e.getSource();
@@ -79,9 +82,6 @@ public void doAction(ActionEvent e)
 				.getCurrentNode()
 				.getStaticLabel().replace(' ','_'));
 		}		
-		helpWindow.getContentPane().removeAll();
-		helpWindow.getContentPane().add(scroller);
-		helpWindow.show();
 	}
 	private void resetPage(String source)
 	{

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -498,6 +498,7 @@ private void getRemoteItems()
 			
 			for (int i = 0; i < remoteHosts.length; i++)
 			{
+                remoteHosts[i] = remoteHosts[i].trim();
 				JMenuItem item = new JMenuItem(remoteHosts[i]);
 				item.setActionCommand("remote_start");
 				item.setName(remoteHosts[i]);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -862,6 +862,7 @@ protected long connect() throws IOException
         try
         {
             conn.connect();
+            connectionTries = 0;
         }
         catch (BindException e)
         {
@@ -992,7 +993,7 @@ else if (errorLevel / 100 == 3)
             }
             return res;
         }
-        catch (IOException ex)
+        catch (Exception ex)
         {
             log.warn(ex.getMessage(), ex);
             res.setDataType(SampleResult.TEXT);

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerFull.java
Patch:
@@ -338,7 +338,7 @@ protected void parseNodes(Document html, String htmlTag, boolean type,
                 {
                     loadBinary(binUrl, binRes,sampler);
                 }
-                catch(IOException ioe)
+                catch(Exception ioe)
                 {
                     log.error("Error reading from URL - " + ioe);
                     binRes.setResponseData(ioe.toString().getBytes());
@@ -370,7 +370,7 @@ protected void parseNodes(Document html, String htmlTag, boolean type,
      *
      * @throws IOException indicates a problem reading from the URL
      */
-    protected byte[] loadBinary(URL url, SampleResult res,HTTPSampler sampler) throws IOException
+    protected byte[] loadBinary(URL url, SampleResult res,HTTPSampler sampler) throws Exception
     {
         log.debug("Start : loadBinary");
         byte[] ret = new byte[0];
@@ -381,7 +381,7 @@ protected byte[] loadBinary(URL url, SampleResult res,HTTPSampler sampler) throw
             conn = sampler.setupConnection(url, HTTPSampler.GET);
             sampler.connect();
         }
-        catch(IOException ioe)
+        catch(Exception ioe)
         {
             // don't do anything 'cos presumably the connection will return the
             // correct http response codes

File: src/core/org/apache/jmeter/testelement/property/BooleanProperty.java
Patch:
@@ -64,7 +64,7 @@ public Object clone()
      */
     public boolean getBooleanValue()
     {
-        return super.getBooleanValue();
+        return value;
     }
 
 }

File: src/components/org/apache/jmeter/visualizers/Graph.java
Patch:
@@ -166,7 +166,7 @@ public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, i
      */
     public boolean getScrollableTracksViewportWidth()
     {
-        return true;
+        return false;
     }
 
     /**

File: src/core/org/apache/jmeter/gui/AbstractJMeterGuiComponent.java
Patch:
@@ -240,6 +240,8 @@ protected Box makeTitlePanel() {
         Box titlePanel = Box.createVerticalBox();
         titlePanel.add(createTitleLabel());
         titlePanel.add(getNamePanel());
+        titlePanel.validate();
+        titlePanel.setMinimumSize(titlePanel.getPreferredSize());
         return titlePanel;
     }
     

File: src/components/org/apache/jmeter/visualizers/SimpleDataWriter.java
Patch:
@@ -122,7 +122,6 @@ private void init()
 
         // NAME
         mainPanel.add(makeTitlePanel());
-        mainPanel.add(getFilePanel());
 
         this.add(mainPanel, BorderLayout.NORTH);
     }

File: src/components/org/apache/jmeter/visualizers/SplineVisualizer.java
Patch:
@@ -186,7 +186,6 @@ public void setGUI()
 
         // NAME
         mainPanel.add(makeTitlePanel());
-        mainPanel.add(getFilePanel());
         maximumLabel = new JLabel(JMeterUtils.getResString("spline_visualizer_maximum"));
         maximumLabel.setForeground(MAXIMUM_COLOR);
         maximumLabel.setBackground(backColor);

File: src/components/org/apache/jmeter/visualizers/TableVisualizer.java
Patch:
@@ -198,7 +198,6 @@ private void init()
 
         // NAME
         mainPanel.add(makeTitlePanel());
-        mainPanel.add(getFilePanel());
 
         // Set up the table itself
         table = new JTable(model);

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -492,9 +492,6 @@ protected void init()
         treeSplitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, treePane, getBottomPane());
 
         Box titlePanel = makeTitlePanel();
-        JCheckBox errorCheckBox = getErrorLoggingCheckbox();
-        errorCheckBox.setAlignmentX(JCheckBox.CENTER_ALIGNMENT);
-        titlePanel.add(errorCheckBox);
 
         add(titlePanel, BorderLayout.NORTH);
         add(treeSplitPane, BorderLayout.CENTER);

File: src/core/org/apache/jmeter/config/Argument.java
Patch:
@@ -72,9 +72,9 @@
 
 public class Argument extends AbstractTestElement implements Serializable
 {
-	protected final static String NAME = "Argument.name";
-	protected final static String VALUE = "Argument.value";
-        private final static String METADATA = "Argument.metadata";
+	public final static String NAME = "Argument.name";
+	public final static String VALUE = "Argument.value";
+        public final static String METADATA = "Argument.metadata";
     
 	/****************************************
 	 * Constructor for the Argument object

File: src/core/org/apache/jmeter/config/Arguments.java
Patch:
@@ -275,7 +275,7 @@ public Argument getArgument(int row)
 
 		if(row < getArguments().size())
 		{
-			argument = (Argument)getArguments().get(row);
+			argument = (Argument)getArguments().get(row).getObjectValue();
 		}
 
 		return argument;

File: src/core/org/apache/jmeter/engine/PreCompiler.java
Patch:
@@ -45,6 +45,7 @@ public void addNode(Object node, HashTree subTree)
             try
             {
                 replacer.replaceValues((TestElement) node);
+                ((TestElement)node).setRunningVersion(true);
             }
             catch (InvalidVariableException e)
             {

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -267,7 +267,7 @@ protected void notifyTestListenersOfEnd()
 
 	private ListedHashTree cloneTree(ListedHashTree tree)
 	{
-		TreeCloner cloner = new TreeCloner(false);
+		TreeCloner cloner = new TreeCloner(true);
 		tree.traverse(cloner);
 		return cloner.getClonedTree();
 	}

File: src/core/org/apache/jmeter/gui/action/Load.java
Patch:
@@ -142,6 +142,7 @@ public void doAction(ActionEvent e)
 		}
 		finally
 		{
+            GuiPackage.getInstance().updateCurrentGui();
 			GuiPackage.getInstance().getMainFrame().repaint();
 		}
 		if(isTestPlan && f != null)

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -74,6 +74,7 @@
 import org.apache.avalon.framework.configuration.DefaultConfigurationBuilder;
 import org.apache.avalon.framework.configuration.DefaultConfigurationSerializer;
 import org.apache.jmeter.engine.event.IterationEvent;
+import org.apache.jmeter.engine.util.NoThreadClone;
 import org.apache.jmeter.exceptions.IllegalUserActionException;
 import org.apache.jmeter.samplers.Clearable;
 import org.apache.jmeter.samplers.Remoteable;
@@ -98,7 +99,7 @@
  * @version $Id$
  */
 public class ResultCollector extends AbstractListenerElement
-        implements SampleListener, Clearable, Serializable, TestListener, Remoteable
+        implements SampleListener, Clearable, Serializable, TestListener, Remoteable,NoThreadClone
 {
     transient private static Logger log =
             Hierarchy.getDefaultHierarchy().getLoggerFor("jmeter.elements");

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -29,7 +29,7 @@ public abstract class AbstractTestElement implements TestElement, Serializable
 
     private Map propMap = Collections.synchronizedMap(new HashMap());
 
-    private boolean runningVersion;
+    private boolean runningVersion = false;
 
     /****************************************
      * !ToDo (Method description)
@@ -51,6 +51,7 @@ public Object clone()
         {
             clonedElement.setProperty((JMeterProperty) iter.next().clone());
         }
+        clonedElement.setRunningVersion(runningVersion);
         return clonedElement;
     }
 
@@ -295,7 +296,7 @@ public void setRunningVersion(boolean runningVersion)
         PropertyIterator iter = propertyIterator();
         while (iter.hasNext())
         {
-            iter.next().setRunningVersion(true);
+            iter.next().setRunningVersion(runningVersion);
         }
     }
 

File: src/core/org/apache/jmeter/threads/gui/ThreadGroupGui.java
Patch:
@@ -222,7 +222,6 @@ private void init()
         threadPanel.add(threadLabel);
         threadInput = new JTextField(5);
         threadInput.setText("1");
-        threadInput.addFocusListener(NumberFieldErrorListener.getNumberFieldErrorListener());
         threadInput.setName(THREAD_NAME);
         threadPanel.add(threadInput);
         threadPropsPanel.add(threadPanel);
@@ -235,7 +234,6 @@ private void init()
         rampInput = new JTextField(5);
         rampInput.setText("1");
         rampInput.setName(RAMP_NAME);
-        rampInput.addFocusListener(NumberFieldErrorListener.getNumberFieldErrorListener());
         rampPanel.add(rampInput);
         threadPropsPanel.add(rampPanel);
 

File: src/core/org/apache/jmeter/config/gui/LoginConfigGui.java
Patch:
@@ -133,7 +133,7 @@ private void init()
 
 		if(displayName)
 		{
-			this.add(getNamePanel());
+			this.add(makeTitlePanel());
 		}
 
 		this.add(createUsernamePanel());

File: src/core/org/apache/jmeter/control/gui/LogicControllerGui.java
Patch:
@@ -111,8 +111,6 @@ private void init()
 	{
 		setLayout(new VerticalLayout(5, VerticalLayout.LEFT, VerticalLayout.TOP));
 		setBorder(BorderFactory.createEmptyBorder(10, 10, 5, 10));
-
-		add(createTitleLabel());
-		add(getNamePanel());
+		add(makeTitlePanel());
 	}
 }

File: src/core/org/apache/jmeter/control/gui/LoopControlPanel.java
Patch:
@@ -191,9 +191,7 @@ private void init()
         {
             setLayout(new VerticalLayout(5, VerticalLayout.LEFT, VerticalLayout.TOP));
             setBorder(BorderFactory.createEmptyBorder(10, 10, 5, 10));
-            
-            add(createTitleLabel());
-            add(getNamePanel());
+            add(makeTitlePanel());
             add(createLoopCountPanel());
         }
 

File: src/core/org/apache/jmeter/control/gui/TestPlanGui.java
Patch:
@@ -142,8 +142,7 @@ private void init()
         this.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 5));
         
         Box northPanel = Box.createVerticalBox();
-        northPanel.add(createTitleLabel());
-        northPanel.add(getNamePanel());
+        northPanel.add(makeTitlePanel());
         add(northPanel, BorderLayout.NORTH);
 
         JPanel southPanel = new JPanel(new BorderLayout());

File: src/core/org/apache/jmeter/control/gui/WorkBenchGui.java
Patch:
@@ -169,9 +169,7 @@ private void init()
 		Border margin = new EmptyBorder(10, 10, 5, 10);
 		mainPanel.setBorder(margin);
 		mainPanel.setLayout(new VerticalLayout(5, VerticalLayout.LEFT));
-
-		mainPanel.add(createTitleLabel());
-		mainPanel.add(getNamePanel());
+		mainPanel.add(makeTitlePanel());
 
 		this.add(mainPanel);
 	}

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -375,8 +375,7 @@ private void init()
         setBorder (BorderFactory.createEmptyBorder(10, 10, 5, 10));
         setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
         
-        add(createTitleLabel());
-        add(getNamePanel());
+        add(makeTitlePanel());
         add(createPortPanel());
         add(createIncludePanel());
         add(createExcludePanel());

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -467,7 +467,7 @@ private JPanel createTableButtonPanel(String addCommand, String deleteCommand) {
         JPanel buttonPanel = new JPanel();
 
         JButton addButton = new JButton(JMeterUtils.getResString("add"));
-        addButton.setActionCommand(ADD_INCLUDE);
+        addButton.setActionCommand(addCommand);
         addButton.addActionListener(this);
         buttonPanel.add(addButton);
 

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -808,10 +808,12 @@ public synchronized static HashTree loadSubTree(InputStream in) throws IOExcepti
         }
         catch (ConfigurationException e)
         {
+            log.error("Problem loading using Avalon Configuration tools", e);
             throw new IOException("Problem loading using Avalon Configuration tools");
         }
         catch (SAXException e)
         {
+            log.error("Problem with SAX implementation", e);
             throw new IOException("Problem with SAX implementation");
         }
     }

File: src/components/org/apache/jmeter/visualizers/Graph.java
Patch:
@@ -2,7 +2,7 @@
  *  ====================================================================
  *  The Apache Software License, Version 1.1
  *
- *  Copyright (c) 2001 The Apache Software Foundation.  All rights
+ *  Copyright (c) 2001,2003 The Apache Software Foundation.  All rights
  *  reserved.
  *
  *  Redistribution and use in source and binary forms, with or without
@@ -93,7 +93,6 @@ public class Graph extends JComponent implements Scrollable, GraphListener, Clea
      */
     public Graph()
     {
-        this.setPreferredSize(new Dimension(width, 800));
     }
 
     /**

File: src/components/org/apache/jmeter/visualizers/GraphAccum.java
Patch:
@@ -2,7 +2,7 @@
  *  ====================================================================
  *  The Apache Software License, Version 1.1
  *
- *  Copyright (c) 2001 The Apache Software Foundation.  All rights
+ *  Copyright (c) 2001,2003 The Apache Software Foundation.  All rights
  *  reserved.
  *
  *  Redistribution and use in source and binary forms, with or without
@@ -143,7 +143,6 @@ public class GraphAccum extends JComponent implements Scrollable,
     public GraphAccum()
     {
         log.debug("Start : GraphAnnum1");
-        this.setPreferredSize(new Dimension(width, 800));
         log.debug("End : GraphAnnum1");
     }
 

File: src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
Patch:
@@ -66,6 +66,7 @@
 
 import javax.swing.BorderFactory;
 import javax.swing.Box;
+import javax.swing.BoxLayout;
 import javax.swing.JCheckBox;
 import javax.swing.JLabel;
 import javax.swing.JPanel;
@@ -79,7 +80,6 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.visualizers.gui.AbstractVisualizer;
-import org.apache.jorphan.gui.layout.VerticalLayout;
 
 
 /****************************************
@@ -268,7 +268,7 @@ private void init()
         Border margin = new EmptyBorder(10, 10, 5, 10);
 
         mainPanel.setBorder(margin);
-        mainPanel.setLayout(new VerticalLayout(5, VerticalLayout.LEFT));
+        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
 
         // TITLE
         JLabel panelTitleLabel = new JLabel(JMeterUtils.getResString("graph_results_title"));

File: src/core/org/apache/jmeter/control/gui/TestPlanGui.java
Patch:
@@ -144,8 +144,7 @@ private void init()
         functionalMode = new JCheckBox(JMeterUtils.getResString("functional_mode"));
         southPanel.add(functionalMode, BorderLayout.NORTH);
         JTextArea explain = new JTextArea(JMeterUtils.getResString("functional_mode_explanation"));
-        explain.setColumns(30);
-        explain.setRows(10);
+        explain.setEditable(false);
         explain.setBackground(this.getBackground());
         southPanel.add(explain, BorderLayout.CENTER);
         add(getVariablePanel(), BorderLayout.CENTER);

File: src/core/org/apache/jmeter/gui/util/TextAreaTableCellEditor.java
Patch:
@@ -44,7 +44,7 @@ public Component getTableCellEditorComponent(JTable table,
     			JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
     	pane.validate();
     	this.row = row;
-    	this.col = col;
+    	this.col = column;
     	return pane;
     }
     

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -163,9 +163,9 @@ public static Properties getProperties(String file)
 		{
 			try
 			{
-				p.load(
-					JMeterUtils.class.getClassLoader().getSystemResourceAsStream(
-						"org/apache/jmeter/jmeter.properties"));
+                p.load(
+                    ClassLoader.getSystemResourceAsStream(
+                        "org/apache/jmeter/jmeter.properties"));
 			}
 			catch (IOException ex)
 			{

File: src/jorphan/org/apache/jorphan/collections/ListedHashTree.java
Patch:
@@ -292,7 +292,7 @@ public void testAddObjectAndTree() throws Exception
 			assertEquals(1,tree.getTree("key").list().size());
 			assertEquals(0,tree.getTree("key").getTree("value").size());
 			assertEquals(tree.getTree("key").getArray()[0], "value");
-			this.assertNotNull(tree.getTree("key").get("value"));
+			assertNotNull(tree.getTree("key").get("value"));
 		}
 	}
 

File: src/protocol/http/org/apache/jmeter/protocol/http/parser/HtmlParser.java
Patch:
@@ -300,7 +300,7 @@ public static String getUTFEncodingName()
 	 ***************************************/
 	public static Document createEmptyDoc()
 	{
-		return new Tidy().createEmptyDocument();
+		return Tidy.createEmptyDocument();
 	}
 
 	/****************************************

File: src/core/org/apache/jmeter/gui/MainFrame.java
Patch:
@@ -372,7 +372,7 @@ private void addThemAll()
 			gbc.gridy = 0;
 			gbc.gridheight = 1;
 			gbc.gridwidth = 1;
-			gbc.fill = gbc.BOTH;
+			gbc.fill = GridBagConstraints.BOTH;
 			gbc.weightx = 1;
 			gbc.weighty = 0;
 			all.add(toolPanel, gbc.clone());

File: src/core/org/apache/jmeter/gui/util/ButtonPanel.java
Patch:
@@ -156,7 +156,7 @@ private void init()
 		GridBagLayout g = new GridBagLayout();
 		this.setLayout(g);
 		GridBagConstraints c = new GridBagConstraints();
-		c.fill = c.NONE;
+		c.fill = GridBagConstraints.NONE;
 		c.gridwidth = 1;
 		c.gridheight = 1;
 		c.gridx = 1;

File: src/core/org/apache/jmeter/gui/util/FileDialoger.java
Patch:
@@ -111,7 +111,7 @@ public static JFileChooser promptToOpenFile(String[] exts)
 		int retVal = jfc.showOpenDialog(GuiPackage.getInstance().getMainFrame());
 		lastJFCDirectory = jfc.getCurrentDirectory().getAbsolutePath();
 
-		if(retVal == jfc.APPROVE_OPTION)
+		if(retVal == JFileChooser.APPROVE_OPTION)
 		{
 			return jfc;
 		}
@@ -175,7 +175,7 @@ public static JFileChooser promptToSaveFile(String filename)
 
 		int retVal = jfc.showSaveDialog(GuiPackage.getInstance().getMainFrame());
 		lastJFCDirectory = jfc.getCurrentDirectory().getAbsolutePath();
-		if(retVal == jfc.APPROVE_OPTION)
+		if(retVal == JFileChooser.APPROVE_OPTION)
 		{
 			return jfc;
 		}

File: src/core/org/apache/jmeter/reporters/FileReporter.java
Patch:
@@ -265,7 +265,7 @@ public JPanel getLegend()
         GridBagConstraints c = new GridBagConstraints();
 
         c.insets = new Insets(3, 3, 3, 3);
-        c.fill = c.BOTH;
+        c.fill = GridBagConstraints.BOTH;
         c.gridwidth = 1;
         c.gridheight = 1;
         for (int t = 0; t < keys.size(); t++)
@@ -321,7 +321,7 @@ public JPanel getStats()
         GridBagConstraints c = new GridBagConstraints();
 
         c.insets = new Insets(3, 6, 3, 6);
-        c.fill = c.BOTH;
+        c.fill = GridBagConstraints.BOTH;
         c.gridwidth = 1;
         c.gridheight = 1;
         JLabel count = new JLabel("Count: " + total);

File: src/protocol/http/org/apache/jmeter/junit/protocol/http/parser/HtmlParserTester.java
Patch:
@@ -248,7 +248,7 @@ private HTTPSampler makeUrlConfig(String path)
 	{
 		HTTPSampler config = new HTTPSampler();
 		config.setDomain("www.apache.org");
-		config.setMethod(config.GET);
+		config.setMethod(HTTPSampler.GET);
 		config.setPath(path);
 		config.setPort(80);
 		config.setProtocol("http");

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HeaderPanel.java
Patch:
@@ -448,7 +448,7 @@ public JPanel getPanel()
 
 			main.setLayout(g);
 			GridBagConstraints c = new GridBagConstraints();
-			c.fill = c.BOTH;
+			c.fill = GridBagConstraints.BOTH;
 			c.gridwidth = 1;
 			c.gridheight = 1;
 			JLabel nameLabel = new JLabel(JMeterUtils.getResString("name") + ":");

File: src/components/org/apache/jmeter/modifiers/UserParameters.java
Patch:
@@ -8,7 +8,6 @@
 import org.apache.jmeter.engine.event.IterationEvent;
 import org.apache.jmeter.engine.event.IterationListener;
 import org.apache.jmeter.processor.PreProcessor;
-import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.testelement.property.BooleanProperty;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;

File: src/components/org/apache/jmeter/visualizers/AssertionVisualizer.java
Patch:
@@ -57,9 +57,6 @@
 
 import java.awt.BorderLayout;
 import java.awt.Font;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
 
 import javax.swing.JLabel;
 import javax.swing.JPanel;

File: src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
Patch:
@@ -66,7 +66,6 @@
 
 import javax.swing.BorderFactory;
 import javax.swing.Box;
-import javax.swing.BoxLayout;
 import javax.swing.JCheckBox;
 import javax.swing.JLabel;
 import javax.swing.JPanel;

File: src/core/org/apache/jmeter/control/gui/WorkBenchGui.java
Patch:
@@ -64,7 +64,6 @@
 import javax.swing.border.EmptyBorder;
 
 import org.apache.jmeter.gui.AbstractJMeterGuiComponent;
-import org.apache.jmeter.gui.NamePanel;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 import org.apache.jmeter.gui.util.MenuFactory;
 import org.apache.jmeter.testelement.TestElement;

File: src/core/org/apache/jmeter/gui/action/RemoteStart.java
Patch:
@@ -59,8 +59,6 @@
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
-import java.util.Iterator;
-import java.util.StringTokenizer;
 
 import javax.swing.JOptionPane;
 

File: src/core/org/apache/jmeter/samplers/SampleResult.java
Patch:
@@ -55,15 +55,12 @@
 package org.apache.jmeter.samplers;
 import java.io.Serializable;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
 
 import org.apache.avalon.framework.configuration.Configuration;
 import org.apache.jmeter.assertions.AssertionResult;
-import org.apache.jmeter.testelement.TestElement;
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
 

File: src/functions/org/apache/jmeter/functions/RegexFunction.java
Patch:
@@ -8,10 +8,7 @@
 import java.util.List;
 import java.util.Random;
 
-import junit.framework.TestCase;
-
 import org.apache.jmeter.engine.util.CompoundVariable;
-import org.apache.jmeter.functions.util.ArgumentEncoder;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.JMeterVariables;

File: src/protocol/http/org/apache/jmeter/protocol/http/config/MultipartUrlConfig.java
Patch:
@@ -59,7 +59,6 @@
 
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
-import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.util.JOrphanUtils;
 
 /**

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -68,7 +68,6 @@
 import org.apache.jmeter.protocol.http.config.gui.MultipartUrlConfigGui;
 import org.apache.jmeter.protocol.http.config.gui.UrlConfigGui;
 import org.apache.jmeter.protocol.http.sampler.HTTPSampler;
-import org.apache.jmeter.protocol.http.sampler.HTTPSamplerFull;
 import org.apache.jmeter.samplers.gui.AbstractSamplerGui;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpReplyHdr.java
Patch:
@@ -4,8 +4,6 @@
 ***
 ***/
 
-import java.net.*;
-import java.io.*;
 
 //
 // Class:     HttpReplyHdr

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -79,7 +79,6 @@
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.IntegerProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
-import org.apache.jmeter.testelement.property.StringProperty;
 import org.apache.jmeter.threads.ThreadGroup;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.log.Hierarchy;

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java
Patch:
@@ -65,7 +65,6 @@
 import java.io.UnsupportedEncodingException;
 import java.net.HttpURLConnection;
 import java.net.URLConnection;
-import java.util.Iterator;
 
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.protocol.http.config.MultipartUrlConfig;

File: src/core/org/apache/jmeter/testelement/property/BooleanProperty.java
Patch:
@@ -38,7 +38,7 @@ public void setObjectValue(Object v)
      */
     public String getStringValue()
     {
-        return Boolean.toString(value);
+        return value ? "true" : "false";
     }
 
     /**

File: src/core/org/apache/jmeter/engine/util/ValueReplacer.java
Patch:
@@ -310,7 +310,7 @@ public void undoReverseReplace(CollectionProperty prop)
         Collection newColl = null;
         try
         {
-            newColl = (Collection) prop.getClass().newInstance();
+            newColl = (Collection) prop.getObjectValue().getClass().newInstance();
         }
         catch (Exception e)
         {

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -173,6 +173,7 @@ public void runTest() throws JMeterEngineException
 					ListedHashTree threadGroupTree = (ListedHashTree)searcher.getSubTree(group);
 					threadGroupTree.add(group,testLevelElements);
 					threads[i] = new JMeterThread(cloneTree(threadGroupTree),this,notifier);
+                    threads[i].setThreadNum(i);
                     threads[i].setInitialContext(JMeterContextService.getContext());
 					threads[i].setInitialDelay((int)(((float)(group.getRampUp() * 1000) /
 							(float)group.getNumThreads()) * (float)i));

File: src/core/org/apache/jmeter/testelement/property/AbstractProperty.java
Patch:
@@ -385,11 +385,11 @@ else if (item instanceof TestElement)
         }
         else if (item instanceof Collection)
         {
-            return new CollectionProperty("" + item.hashCode(), normalizeList((Collection) item));
+            return new CollectionProperty("" + item.hashCode(),(Collection) item);
         }
         else if (item instanceof Map)
         {
-            return new MapProperty("" + item.hashCode(), normalizeMap((Map) item));
+            return new MapProperty("" + item.hashCode(), (Map) item);
         }
         else
         {

File: src/core/org/apache/jmeter/testelement/property/CollectionProperty.java
Patch:
@@ -230,7 +230,6 @@ public void recoverRunningVersion(TestElement owner)
             }
             else
             {
-                log.debug("recovering property with hashcode: " + prop.hashCode());
                 prop.recoverRunningVersion(owner);
             }
         }

File: src/core/org/apache/jmeter/testelement/property/FunctionProperty.java
Patch:
@@ -60,7 +60,6 @@ public String getStringValue()
             {
                 testIteration = iter;
                 cacheValue = function.execute();
-                log.debug("cache value set to: '" + cacheValue + "'",new Exception());
             }
             return cacheValue;
         }

File: src/core/org/apache/jmeter/testelement/property/MapProperty.java
Patch:
@@ -87,7 +87,7 @@ public Object clone()
     {
         MapProperty prop = (MapProperty) super.clone();
         prop.value = cloneMap();
-        return value;
+        return prop;
     }
 
     private Map cloneMap()

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -889,7 +889,7 @@ private SampleResult sample(int redirects)
                 log.debug("sample2 : sampling url - " + u);
             }
             conn = setupConnection(u, getMethod());
-            if (getProperty(HTTPSampler.METHOD).equals(HTTPSampler.POST))
+            if (getMethod().equals(HTTPSampler.POST))
             {
                 setPostHeaders(conn);
                 time = connect();

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -142,7 +142,7 @@ public HeaderManager getHeaderManager()
 		while (keys.hasNext())
 		{
 			String key = (String) keys.next();
-			if (!key.equals("proxy-connection") && !key.equals("content-length") /*&& !key.equals("accept-encoding")*/)
+			if (!key.equals("proxy-connection") && !key.equals("content-length") && !key.equals("accept-encoding"))
 			{
 				manager.add((Header) headers.get(key));
 			}
@@ -193,7 +193,7 @@ private HTTPSampler createSampler()
 		sampler.setMethod(method);
 		log.debug("Proxy: method server: "+sampler.getMethod());
 		sampler.setPath(serverUrl());
-		log.debug("Proxy: setting path: "+sampler.getPath());
+		log.debug("Proxy: setting path: "+sampler.getEncodedPath());
 		sampler.setName(sampler.getPath());
 		sampler.setPort(serverPort());
 		log.debug("Proxy: setting port: "+sampler.getPort());

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/Proxy.java
Patch:
@@ -262,7 +262,6 @@ private void writeToClient(
 		OutputStream out)
 		throws IOException {
 		try {
-			
 			out.write(inBytes);
 			out.flush();
 			log.info("Done writing to client");

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/gui/ProxyControlGui.java
Patch:
@@ -66,7 +66,6 @@
 import java.awt.event.KeyListener;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -93,6 +92,7 @@
 import org.apache.jmeter.gui.util.PowerTableModel;
 import org.apache.jmeter.protocol.http.proxy.ProxyControl;
 import org.apache.jmeter.testelement.TestElement;
+import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
@@ -223,12 +223,12 @@ public void configure(TestElement element)
         repaint();
     }
 
-    private void populateTable(PowerTableModel model, Iterator iter)
+    private void populateTable(PowerTableModel model, PropertyIterator iter)
     {
         model.clearData();
         while (iter.hasNext())
         {
-            model.addRow(new Object[] { iter.next()});
+            model.addRow(new Object[] { iter.next().getStringValue()});
         }
         model.fireTableDataChanged();
     }

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -142,7 +142,7 @@ public HeaderManager getHeaderManager()
 		while (keys.hasNext())
 		{
 			String key = (String) keys.next();
-			if (!key.equals("proxy-connection") && !key.equals("content-length") && !key.equals("accept-encoding"))
+			if (!key.equals("proxy-connection") && !key.equals("content-length") /*&& !key.equals("accept-encoding")*/)
 			{
 				manager.add((Header) headers.get(key));
 			}

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -78,6 +78,7 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.IntegerProperty;
+import org.apache.jmeter.testelement.property.StringProperty;
 import org.apache.jmeter.threads.ThreadGroup;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.log.Hierarchy;
@@ -387,7 +388,7 @@ private boolean checkIncludes(HTTPSampler sampler)
         Iterator iter = getIncludePatterns().iterator();
         while (iter.hasNext())
         {
-            String item = (String) iter.next();
+            String item = ((StringProperty) iter.next()).getStringValue();
             Pattern pattern = patternCache.getPattern(item, Perl5Compiler.READ_ONLY_MASK & Perl5Compiler.SINGLELINE_MASK);
             StringBuffer url = new StringBuffer(sampler.getDomain());
             url.append(":");
@@ -412,7 +413,7 @@ private boolean checkExcludes(HTTPSampler sampler)
         Iterator iter = getExcludePatterns().iterator();
         while (iter.hasNext())
         {
-            String item = (String) iter.next();
+            String item = ((StringProperty) iter.next()).getStringValue();
             Pattern pattern = patternCache.getPattern(item, Perl5Compiler.READ_ONLY_MASK & Perl5Compiler.SINGLELINE_MASK);
             StringBuffer url = new StringBuffer(sampler.getDomain());
             url.append(":");

File: src/protocol/http/org/apache/jmeter/protocol/http/control/HeaderManager.java
Patch:
@@ -269,7 +269,7 @@ public void addHeaderFromHeader(String headerHeader, URL url) {
 	 public void removeHeaderNamed(String name) {
 		  Vector removeIndices = new Vector();
 		  for (int i = getHeaders().size() - 1; i > 0; i--) {
-				Header header = (Header) getHeaders().get(i);
+				Header header = (Header) getHeaders().get(i).getObjectValue();
 				if (header == null) {
 					 continue;
 				}

File: src/protocol/http/org/apache/jmeter/protocol/http/config/gui/UrlConfigGui.java
Patch:
@@ -194,7 +194,7 @@ public void configure(TestElement el)
             port.setText(portString);
         }
         protocol.setText(el.getPropertyAsString(HTTPSampler.PROTOCOL));
-        if ("POST".equals(el.getProperty(HTTPSampler.METHOD)))
+        if ("POST".equals(el.getPropertyAsString(HTTPSampler.METHOD)))
         {
             post.setSelected(true);
             get.setSelected(false);

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -49,7 +49,7 @@ public Object clone()
         PropertyIterator iter = propertyIterator();
         while(iter.hasNext())
         {
-            clonedElement.addProperty((JMeterProperty)iter.next().clone());
+            clonedElement.setProperty((JMeterProperty)iter.next().clone());
         }
         return clonedElement;
     }

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -320,7 +320,7 @@ public ObjectPair(TestElement one, TestElement two)
         
         public void addTestElements()
         {
-            if(parent instanceof Controller && child instanceof Sampler)
+            if(parent instanceof Controller && (child instanceof Sampler || child instanceof Controller))
             {
                 parent.addTestElement(child);
             }

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/CookiePanel.java
Patch:
@@ -277,6 +277,7 @@ private void addCookieToTable(Cookie cookie) {
      */
     public void modifyTestElement(TestElement cm)
     {
+        cm.clear();
         configureTestElement(cm);
         if(cm instanceof CookieManager)
         {
@@ -299,6 +300,7 @@ private Cookie createCookie(Object[] rowData)
 	
 	private void populateTable(CookieManager manager)
 	{
+        tableModel.clearData();
 		Iterator iter = manager.getCookies().iterator();
 		while(iter.hasNext())
 		{

File: src/protocol/ftp/org/apache/jmeter/protocol/ftp/control/gui/FtpTestSamplerGui.java
Patch:
@@ -112,6 +112,7 @@ public TestElement createTestElement()
      */
     public void modifyTestElement(TestElement sampler)
     {
+        sampler.clear();
         ((FTPSampler)sampler).addTestElement(ftpDefaultPanel.createTestElement());
         ((FTPSampler)sampler).addTestElement(loginPanel.createTestElement());
         this.configureTestElement(sampler);

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/HttpRequestHdr.java
Patch:
@@ -142,7 +142,7 @@ public HeaderManager getHeaderManager()
 		while (keys.hasNext())
 		{
 			String key = (String) keys.next();
-			if (!key.equals("proxy-connection") && !key.equals("content-length"))
+			if (!key.equals("proxy-connection") && !key.equals("content-length") && !key.equals("accept-encoding"))
 			{
 				manager.add((Header) headers.get(key));
 			}

File: src/components/org/apache/jmeter/assertions/gui/AssertionGui.java
Patch:
@@ -362,9 +362,9 @@ private class ClearPatternsListener implements ActionListener
         public void actionPerformed(ActionEvent e)
         {
             int index = stringTable.getSelectedRow();
-            stringTable.getCellEditor(index, stringTable.getSelectedColumn()).cancelCellEditing();
             if (index > -1)
             {
+                stringTable.getCellEditor(index, stringTable.getSelectedColumn()).cancelCellEditing();
                 tableModel.removeRow(index);
                 tableModel.fireTableDataChanged();
             }

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -201,11 +201,11 @@ protected static void readProperties()
 
         try
         {
-            props = JMeterUtils.getProperties(PROPS_FILE);
+            props = JMeterUtils.getJMeterProperties();
         }
         catch (Exception e)
         {
-            log.error("SaveService.readProperties: Problem loading properties file " + PROPS_FILE, e);
+            log.error("SaveService.readProperties: Problem loading properties file: ", e);
         }
 
         printFieldNames =
@@ -696,7 +696,7 @@ else if (formatter != null)
             String message = null;
             AssertionResult[] results = sample.getAssertionResults();
 
-            if (results.length > 0)
+            if ((results != null) && (results.length > 0))
             {
                 message = results[0].getFailureMessage();
             }

File: src/components/org/apache/jmeter/visualizers/GraphVisualizer.java
Patch:
@@ -142,7 +142,7 @@ public Image getImage()
     /****************************************
      * !ToDo (Method description)
      ***************************************/
-    public void updateGui()
+    public synchronized void updateGui()
     {
         graph.updateGui();
         noSamplesField.setText(Long.toString(model.getSampleCount()));
@@ -159,7 +159,7 @@ public void updateGui()
      *
      *@param s  !ToDo (Parameter description)
      ***************************************/
-    public void updateGui(Sample s)
+    public synchronized void updateGui(Sample s)
     {
         // We have received one more sample
         graph.updateGui(s);

File: src/components/org/apache/jmeter/visualizers/StatVisualizer.java
Patch:
@@ -227,7 +227,7 @@ public void clear()
      *
      *@param s  !ToDo (Parameter description)
      ***************************************/
-    public void updateGui(RunningSample s)
+    public synchronized void updateGui(RunningSample s)
     {
         myStatTableModel.rowChanged(s.getIndex());
     }

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -270,7 +270,7 @@ private void notifyListeners(List listeners, SampleResult result)
     {
         SampleEvent event = new SampleEvent(result, (String) controller.getProperty(TestElement.NAME));
         compiler.sampleOccurred(event);
-        notifier.addLast(event, listeners);
+        notifier.notifyListeners(event, listeners);
 
     }
     public void setInitialDelay(int delay)

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
Patch:
@@ -34,7 +34,7 @@ public String getXmlData()
 	 *@param connection       <code>URLConnection</code> to set headers on
 	 *@exception IOException  if an I/O exception occurs
 	 ***************************************/
-	public void setHeaders(URLConnection connection)
+	public void setPostHeaders(URLConnection connection)
 	  		throws IOException
 	{
 		((HttpURLConnection)connection).setRequestMethod("POST");

File: src/core/org/apache/jmeter/gui/action/Start.java
Patch:
@@ -62,6 +62,7 @@
 import org.apache.jmeter.engine.JMeterEngineException;
 import org.apache.jmeter.engine.StandardJMeterEngine;
 import org.apache.jmeter.engine.TreeCloner;
+import org.apache.jmeter.engine.util.DisabledComponentRemover;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.HashTree;
@@ -133,6 +134,8 @@ protected void startEngine()
 		engine = new StandardJMeterEngine();
 		HashTree testTree = gui.getTreeModel().getTestPlan();
 		convertSubTree(testTree);
+        DisabledComponentRemover remover = new DisabledComponentRemover(testTree);
+        testTree.traverse(remover);
 		testTree.add(testTree.getArray()[0],gui.getMainFrame());
         TreeCloner cloner = new TreeCloner(false);
         testTree.traverse(cloner);

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -63,6 +63,7 @@
 import org.apache.jmeter.gui.GUIFactory;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.JMeterGUIComponent;
+import org.apache.jmeter.testelement.AbstractTestElement;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
@@ -92,12 +93,12 @@ public JMeterTreeNode(TestElement userObj, JMeterTreeModel treeModel)
 
 	public boolean isEnabled()
 	{
-		return enabled;
+		return ((AbstractTestElement)createTestElement()).getPropertyAsBoolean(TestElement.ENABLED);
 	}
 
 	public void setEnabled(boolean enabled)
 	{
-		this.enabled = enabled;
+		createTestElement().setProperty(TestElement.ENABLED,new Boolean(enabled));
 	}
 
 	public ImageIcon getIcon()

File: src/core/org/apache/jmeter/testelement/TestPlan.java
Patch:
@@ -129,7 +129,7 @@ public static TestPlan createTestPlan(String name)
     public void addTestElement(TestElement tg)
     {
         super.addTestElement(tg);
-        if (tg instanceof ThreadGroup)
+        if (tg instanceof ThreadGroup && !isRunningVersion())
         {
             addThreadGroup((ThreadGroup) tg);
         }

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -967,6 +967,7 @@ public static void setJMeterHome(String home)
 	public static final String JDBC = "jmeter.protocol.jdbc";
 	public static final String FTP = "jmeter.protocol.ftp";
 	public static final String JAVA = "jmeter.protocol.java";
+    public static final String PROPERTIES = "jmeter.elements.properties";
 	/**
 	 * Gets the JMeter Version.
 	 * @returns the JMeter version.

File: src/components/org/apache/jmeter/assertions/gui/AssertionGui.java
Patch:
@@ -136,6 +136,7 @@ public void modifyTestElement(TestElement el)
         if (el instanceof ResponseAssertion)
         {
             ResponseAssertion ra = (ResponseAssertion) el;
+            ra.clearTestStrings();
             String[] testStrings = tableModel.getData().getColumn(COL_NAME);
             for (int i = 0; i < testStrings.length; i++)
             {

File: src/core/org/apache/jmeter/testelement/WorkBench.java
Patch:
@@ -10,7 +10,7 @@
  *@version   1.0
  ***************************************/
 
-public class WorkBench extends TestPlan implements Serializable
+public class WorkBench extends AbstractTestElement implements Serializable
 {
 	private static List itemsCanAdd = null;
 	private boolean isRootNode;

File: src/components/org/apache/jmeter/control/InterleaveControl.java
Patch:
@@ -57,6 +57,7 @@
 
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Sampler;
+import org.apache.jmeter.testelement.PerSampleClonable;
 import org.apache.jmeter.testelement.TestElement;
 
 /****************************************
@@ -377,7 +378,8 @@ private TestElement makeSampler(String name)
 			s.setName(name);
 			return s;
 		}
-		public class TestSampler extends AbstractSampler {
+		public class TestSampler extends AbstractSampler
+						implements PerSampleClonable {
 		  public void addCustomTestElement(TestElement t) { }
 		  public org.apache.jmeter.samplers.SampleResult sample(org.apache.jmeter.samplers.Entry e) { return null; }
 		}

File: src/components/org/apache/jmeter/control/OnceOnlyController.java
Patch:
@@ -57,6 +57,7 @@
 import java.io.Serializable;
 
 import org.apache.jmeter.samplers.AbstractSampler;
+import org.apache.jmeter.testelement.PerSampleClonable;
 import org.apache.jmeter.testelement.TestElement;
 
 /************************************************************
@@ -147,7 +148,8 @@ private TestElement makeSampler(String name)
 			s.setName(name);
 			return s;
 		}
-		public class TestSampler extends AbstractSampler {
+		public class TestSampler extends AbstractSampler
+						implements PerSampleClonable {
 		  public void addCustomTestElement(TestElement t) { }
 		  public org.apache.jmeter.samplers.SampleResult sample(org.apache.jmeter.samplers.Entry e) { return null; }
 		}

File: src/core/org/apache/jmeter/control/GenericController.java
Patch:
@@ -62,6 +62,7 @@
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.testelement.AbstractTestElement;
+import org.apache.jmeter.testelement.PerSampleClonable;
 import org.apache.jmeter.testelement.PerThreadClonable;
 import org.apache.jmeter.testelement.TestElement;
 
@@ -364,7 +365,7 @@ private TestElement makeSampler(String name)
 			s.setName(name);
 			return s;
 		}
-		class TestSampler extends AbstractSampler {
+		class TestSampler extends AbstractSampler implements PerSampleClonable {
 		  public void addCustomTestElement(TestElement t) { }
 		  public org.apache.jmeter.samplers.SampleResult sample(org.apache.jmeter.samplers.Entry e) { return null; }
 		}

File: src/core/org/apache/jmeter/control/LoopController.java
Patch:
@@ -56,6 +56,7 @@
 import java.io.Serializable;
 
 import org.apache.jmeter.samplers.AbstractSampler;
+import org.apache.jmeter.testelement.PerSampleClonable;
 import org.apache.jmeter.testelement.TestElement;
 /****************************************
  * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache
@@ -219,7 +220,7 @@ private TestElement makeSampler(String name)
 			s.setName(name);
 			return s;
 		}
-		class TestSampler extends AbstractSampler {
+		class TestSampler extends AbstractSampler implements PerSampleClonable {
 		  public void addCustomTestElement(TestElement t) { }
 		  public org.apache.jmeter.samplers.SampleResult sample(org.apache.jmeter.samplers.Entry e) { return null; }
 		}

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -68,6 +68,7 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestListener;
 import org.apache.jmeter.testelement.TestPlan;
+import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterThread;
 import org.apache.jmeter.threads.JMeterThreadMonitor;
 import org.apache.jmeter.threads.ListenerNotifier;
@@ -172,6 +173,7 @@ public void runTest() throws JMeterEngineException
 					ListedHashTree threadGroupTree = (ListedHashTree)searcher.getSubTree(group);
 					threadGroupTree.add(group,testLevelElements);
 					threads[i] = new JMeterThread(cloneTree(threadGroupTree),this,notifier);
+                    threads[i].setInitialContext(JMeterContextService.getContext());
 					threads[i].setInitialDelay((int)(((float)(group.getRampUp() * 1000) /
 							(float)group.getNumThreads()) * (float)i));
 					threads[i].setThreadName(group.getName()+"-"+(i+1));

File: src/core/org/apache/jmeter/engine/util/CompoundVariable.java
Patch:
@@ -87,7 +87,7 @@
 public class CompoundVariable implements Function
 {
     transient private static Logger log =
-        Hierarchy.getDefaultHierarchy().getLoggerFor("jmeter.elements");
+        Hierarchy.getDefaultHierarchy().getLoggerFor(JMeterUtils.ENGINE);
     
     private JMeterVariables threadVars;
 	private Map varMap = new HashMap();
@@ -154,6 +154,7 @@ public String execute(SampleResult previousResult, Sampler currentSampler)
         while (iter.hasNext())
         {
             Object item = iter.next();
+            log.debug("executing object: " + item);
             if (item instanceof Function)
             {
                 try

File: src/core/org/apache/jmeter/threads/JMeterContext.java
Patch:
@@ -29,7 +29,7 @@ public JMeterVariables getVariables() {
 		return variables;
 	}
 	
-	void setVariables( JMeterVariables vars ) {
+	public void setVariables( JMeterVariables vars ) {
 		this.variables = vars;
 	}
 	

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -340,8 +340,7 @@ public void testConfigGathering() throws Exception
             assertEquals("A test value", sampler.getProperty("test.property"));
         }
 
-        class TestSampler extends AbstractSampler
-        {
+        class TestSampler extends AbstractSampler implements PerSampleClonable {
             public void addCustomTestElement(TestElement t)
             {}
             public org.apache.jmeter.samplers.SampleResult sample(org.apache.jmeter.samplers.Entry e)

File: src/protocol/ftp/org/apache/jmeter/protocol/ftp/sampler/FTPSampler.java
Patch:
@@ -62,6 +62,7 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.AbstractSampler;
+import org.apache.jmeter.testelement.PerSampleClonable;
 import org.apache.jmeter.testelement.TestElement;
 
 /************************************************************
@@ -72,8 +73,7 @@
  *@version    $Revision$
  ***********************************************************/
 
-public class FTPSampler extends AbstractSampler
-{
+public class FTPSampler extends AbstractSampler implements PerSampleClonable {
 	public final static String SERVER = "FTPSampler.server";
 	public final static String FILENAME = "FTPSampler.filename";
 

File: src/protocol/http/org/apache/jmeter/protocol/http/config/MultipartUrlConfig.java
Patch:
@@ -153,7 +153,7 @@ public void addEncodedArgument(String name,String value)
 		HTTPArgument arg = new HTTPArgument(name,value,true);
 		if(arg.getName().equals(arg.getEncodedName()) && arg.getValue().equals(arg.getEncodedValue()))
 		{
-			arg.setAlwaysEncode(false);
+			arg.setAlwaysEncoded(false);
 		}
 		args.addArgument(new HTTPArgument(name,value,true));
 	}

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -76,6 +76,7 @@
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.testelement.PerSampleClonable;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.SSLManager;
 import org.apache.jorphan.util.JOrphanUtils;
@@ -95,8 +96,7 @@
  *@created   $Date$
  *@version   $Revision$
  ***************************************/
-public class HTTPSampler extends AbstractSampler
-{
+public class HTTPSampler extends AbstractSampler implements PerSampleClonable {
     public final static String HEADERS = "headers";
     public final static String HEADER = "header";
     public final static String ARGUMENTS = "HTTPsampler.Arguments";
@@ -261,7 +261,7 @@ public void addEncodedArgument(String name, String value, String metaData)
         HTTPArgument arg = new HTTPArgument(name, value, metaData, true);
         if (arg.getName().equals(arg.getEncodedName()) && arg.getValue().equals(arg.getEncodedValue()))
         {
-            arg.setAlwaysEncode(false);
+            arg.setAlwaysEncoded(false);
         }
         args.addArgument(arg);
     }

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Patch:
@@ -70,6 +70,7 @@
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.testelement.PerSampleClonable;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestListener;
 import org.apache.log.Hierarchy;
@@ -82,8 +83,8 @@
  *@created    $Date$
  *@version    $Revision$
  ***********************************************************/
-public class JDBCSampler extends AbstractSampler implements TestListener
-{
+public class JDBCSampler extends AbstractSampler
+	implements TestListener, PerSampleClonable {
     transient private static Logger log =
             Hierarchy.getDefaultHierarchy().getLoggerFor("jmeter.protocol.jdbc");
     public final static String URL = "JDBCSampler.url";

File: src/functions/org/apache/jmeter/functions/MachineName.java
Patch:
@@ -121,10 +121,11 @@ public synchronized String execute(SampleResult previousResult, Sampler currentS
 
 	}
 
-	public void setParameters(Collection parameters)
+	public void setParameters(String parameters)
 			throws InvalidVariableException {
 
-		values = parameters.toArray();
+		Collection params = parseArguments2(parameters);
+		values = params.toArray();
 		
 		if ( values.length < 2 ) {
 			throw new InvalidVariableException();

File: src/components/org/apache/jmeter/assertions/gui/AssertionGui.java
Patch:
@@ -168,13 +168,11 @@ public void configure(TestElement el)
 			containsBox.setSelected(true);
 			matchesBox.setSelected(false);
 		}
-
 		else
 		{
 			containsBox.setSelected(false);
 			matchesBox.setSelected(true);
 		}
-
 		if(model.isNotType())
 		{
 			notBox.setSelected(true);
@@ -194,6 +192,7 @@ public void configure(TestElement el)
 			responseStringButton.setSelected(false);
 			labelButton.setSelected(true);
 		}
+        tableModel.clearData();
 		Iterator tests = model.getTestStrings().iterator();
 		while(tests.hasNext())
 		{

File: src/components/org/apache/jmeter/assertions/SizeAssertion.java
Patch:
@@ -56,9 +56,10 @@
 
 import java.io.Serializable;
 import java.text.MessageFormat;
-import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jmeter.testelement.AbstractTestElement;
+
 import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.testelement.AbstractTestElement;
+import org.apache.jmeter.util.JMeterUtils;
 
 /**
  * Checks if an Sample is sampled within a specified time-frame. If the

File: src/components/org/apache/jmeter/assertions/gui/DurationAssertionGui.java
Patch:
@@ -70,9 +70,9 @@
 import org.apache.jmeter.assertions.DurationAssertion;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.gui.layout.VerticalLayout;
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
-import org.apache.jorphan.gui.layout.VerticalLayout;
 
 
 /****************************************

File: src/components/org/apache/jmeter/control/gui/InterleaveControlGui.java
Patch:
@@ -133,11 +133,11 @@ public TestElement createTestElement()
 		configureTestElement(ic);
 		if(style.isSelected())
 		{
-			ic.setStyle(ic.DEFAULT_STYLE);
+			ic.setStyle(InterleaveControl.DEFAULT_STYLE);
 		}
 		else
 		{
-			ic.setStyle(ic.NEW_STYLE);
+			ic.setStyle(InterleaveControl.NEW_STYLE);
 		}
 		return ic;
 	}

File: src/components/org/apache/jmeter/control/gui/RandomControlGui.java
Patch:
@@ -98,11 +98,11 @@ public TestElement createTestElement()
 		configureTestElement(ic);
 		if(style.isSelected())
 		{
-			ic.setStyle(ic.DEFAULT_STYLE);
+			ic.setStyle(InterleaveControl.DEFAULT_STYLE);
 		}
 		else
 		{
-			ic.setStyle(ic.NEW_STYLE);
+			ic.setStyle(InterleaveControl.NEW_STYLE);
 		}
 		return ic;
 	}

File: src/components/org/apache/jmeter/timers/ConstantTimer.java
Patch:
@@ -59,13 +59,13 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.apache.jmeter.util.JMeterUtils;
-import org.apache.log.Hierarchy;
-import org.apache.log.Logger;
 import org.apache.jmeter.testelement.AbstractTestElement;
 import org.apache.jmeter.testelement.ThreadListener;
 import org.apache.jmeter.testelement.VariablesCollection;
 import org.apache.jmeter.threads.JMeterVariables;
+import org.apache.jmeter.util.JMeterUtils;
+import org.apache.log.Hierarchy;
+import org.apache.log.Logger;
 
 /**
  * This class implements a constant timer with its own panel and fields for

File: src/components/org/apache/jmeter/visualizers/Graph.java
Patch:
@@ -64,6 +64,7 @@
 import javax.swing.JComponent;
 import javax.swing.Scrollable;
 import javax.swing.SwingUtilities;
+
 import org.apache.jmeter.gui.util.JMeterColor;
 import org.apache.jmeter.samplers.Clearable;
 

File: src/components/org/apache/jmeter/visualizers/GraphAccumVisualizer.java
Patch:
@@ -71,9 +71,9 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.visualizers.gui.AbstractVisualizer;
+import org.apache.jorphan.gui.layout.VerticalLayout;
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
-import org.apache.jorphan.gui.layout.VerticalLayout;
 
 
 /****************************************

File: src/components/org/apache/jmeter/visualizers/MailerVisualizer.java
Patch:
@@ -81,9 +81,9 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.visualizers.gui.AbstractVisualizer;
+import org.apache.jorphan.gui.layout.VerticalLayout;
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
-import org.apache.jorphan.gui.layout.VerticalLayout;
 
 
 /*

File: src/components/org/apache/jmeter/visualizers/RunningSample.java
Patch:
@@ -57,8 +57,6 @@
 
 // java
 import java.text.DecimalFormat;
-import java.util.HashSet;
-import java.util.Set;
 
 import org.apache.jmeter.samplers.SampleResult;
 

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -86,9 +86,9 @@
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.visualizers.gui.AbstractVisualizer;
+import org.apache.jorphan.gui.JLabeledTextArea;
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
-import org.apache.jorphan.gui.JLabeledTextArea;
 
 
 /****************************************

File: src/core/org/apache/jmeter/assertions/AssertionResult.java
Patch:
@@ -55,9 +55,7 @@
 
 package org.apache.jmeter.assertions;
 
-import java.io.*;
-
-import org.apache.avalon.framework.configuration.*;
+import java.io.Serializable;
 
 /**
  * Title:        Jakarta-JMeter

File: src/core/org/apache/jmeter/assertions/gui/AbstractAssertionGui.java
Patch:
@@ -4,10 +4,9 @@
 import java.util.Collection;
 
 import javax.swing.JPopupMenu;
+
 import org.apache.jmeter.gui.AbstractJMeterGuiComponent;
-import org.apache.jmeter.gui.NamePanel;
 import org.apache.jmeter.gui.util.MenuFactory;
-import org.apache.jmeter.testelement.TestElement;
 
 /**
  * Title:        JMeter

File: src/core/org/apache/jmeter/config/Argument.java
Patch:
@@ -53,7 +53,8 @@
  * <http://www.apache.org/>.
  */
 package org.apache.jmeter.config;
-import java.io.*;
+import java.io.Serializable;
+
 import org.apache.jmeter.testelement.AbstractTestElement;
 import org.apache.jmeter.testelement.TestElement;
 

File: src/core/org/apache/jmeter/config/ConfigElement.java
Patch:
@@ -54,7 +54,6 @@
  */
 package org.apache.jmeter.config;
 
-import java.util.*;
 
 /************************************************************
  *  Title: Apache JMeter Description: Copyright: Copyright (c) 2000 Company:

File: src/core/org/apache/jmeter/config/ConfigTestElement.java
Patch:
@@ -1,8 +1,9 @@
 package org.apache.jmeter.config;
-import org.apache.jmeter.testelement.*;
-import org.apache.jmeter.testelement.TestElement;
 import java.io.Serializable;
 
+import org.apache.jmeter.testelement.AbstractTestElement;
+import org.apache.jmeter.testelement.TestElement;
+
 /****************************************
  * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache
  *

File: src/core/org/apache/jmeter/config/ExtensionsFileFilter.java
Patch:
@@ -6,9 +6,10 @@
  */
 package org.apache.jmeter.config;
 
-import javax.swing.filechooser.FileFilter;
-import java.util.ArrayList;
 import java.io.File;
+import java.util.ArrayList;
+
+import javax.swing.filechooser.FileFilter;
 
 /**
  * This FileFilter allows for a list of file extensions

File: src/core/org/apache/jmeter/config/ResponseBasedModifier.java
Patch:
@@ -9,7 +9,8 @@
  * @version 1.0
  */
 
-import org.apache.jmeter.samplers.*;
+import org.apache.jmeter.samplers.SampleResult;
+import org.apache.jmeter.samplers.Sampler;
 
 public interface ResponseBasedModifier
 {

File: src/core/org/apache/jmeter/config/gui/AbstractConfigGui.java
Patch:
@@ -57,10 +57,9 @@
 import java.util.Collection;
 
 import javax.swing.JPopupMenu;
+
 import org.apache.jmeter.gui.AbstractJMeterGuiComponent;
-import org.apache.jmeter.gui.NamePanel;
 import org.apache.jmeter.gui.util.MenuFactory;
-import org.apache.jmeter.testelement.TestElement;
 
 /****************************************
  * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache

File: src/core/org/apache/jmeter/config/gui/AbstractModifierGui.java
Patch:
@@ -4,10 +4,9 @@
 import java.util.Collection;
 
 import javax.swing.JPopupMenu;
+
 import org.apache.jmeter.gui.AbstractJMeterGuiComponent;
-import org.apache.jmeter.gui.NamePanel;
 import org.apache.jmeter.gui.util.MenuFactory;
-import org.apache.jmeter.testelement.TestElement;
 
 /**
  * Title:        JMeter

File: src/core/org/apache/jmeter/config/gui/AbstractResponseBasedModifierGui.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Collection;
 
 import javax.swing.JPopupMenu;
+
 import org.apache.jmeter.gui.AbstractJMeterGuiComponent;
 import org.apache.jmeter.gui.util.MenuFactory;
 

File: src/core/org/apache/jmeter/control/LoopController.java
Patch:
@@ -54,9 +54,9 @@
  */
 package org.apache.jmeter.control;
 import java.io.Serializable;
-import org.apache.jmeter.util.JMeterUtils;
-import org.apache.jmeter.testelement.TestElement;
+
 import org.apache.jmeter.samplers.AbstractSampler;
+import org.apache.jmeter.testelement.TestElement;
 /****************************************
  * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache
  *

File: src/core/org/apache/jmeter/control/gui/AbstractControllerGui.java
Patch:
@@ -3,9 +3,9 @@
 import java.util.Collection;
 
 import javax.swing.JPopupMenu;
+
 import org.apache.jmeter.gui.AbstractJMeterGuiComponent;
 import org.apache.jmeter.gui.util.MenuFactory;
-import org.apache.jmeter.testelement.TestElement;
 
 /****************************************
  * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache

File: src/core/org/apache/jmeter/control/gui/TestPlanGui.java
Patch:
@@ -8,6 +8,7 @@
 import javax.swing.JPanel;
 import javax.swing.JPopupMenu;
 import javax.swing.JTextArea;
+
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.config.gui.ArgumentsPanel;
 import org.apache.jmeter.gui.AbstractJMeterGuiComponent;

File: src/core/org/apache/jmeter/engine/ClientJMeterEngine.java
Patch:
@@ -59,11 +59,10 @@
 import java.rmi.RemoteException;
 
 import org.apache.jmeter.testelement.TestListener;
-import org.apache.log.Hierarchy;
-import org.apache.log.Logger;
 import org.apache.jorphan.collections.HashTree;
-import org.apache.jorphan.collections.ListedHashTree;
 import org.apache.jorphan.collections.SearchByClass;
+import org.apache.log.Hierarchy;
+import org.apache.log.Logger;
 
 
 /************************************************************

File: src/core/org/apache/jmeter/engine/ConvertListeners.java
Patch:
@@ -12,10 +12,10 @@
 import org.apache.jmeter.samplers.SampleListener;
 import org.apache.jmeter.testelement.TestListener;
 import org.apache.jmeter.threads.ThreadGroup;
-import org.apache.log.Hierarchy;
-import org.apache.log.Logger;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.collections.HashTreeTraverser;
+import org.apache.log.Hierarchy;
+import org.apache.log.Logger;
 
 /**
  * @author mstover

File: src/core/org/apache/jmeter/engine/LagDetector.java
Patch:
@@ -122,7 +122,7 @@ public void run()
 			time = System.currentTimeMillis();
 			try
 			{
-				currentThread().sleep(incr);
+				Thread.sleep(incr);
 			}
 			catch(Exception e)
 			{

File: src/core/org/apache/jmeter/engine/PreCompiler.java
Patch:
@@ -6,10 +6,10 @@
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestPlan;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.log.Hierarchy;
-import org.apache.log.Logger;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.collections.HashTreeTraverser;
+import org.apache.log.Hierarchy;
+import org.apache.log.Logger;
 /**
  * @author mstover
  *

File: src/core/org/apache/jmeter/engine/RemoteJMeterEngineImpl.java
Patch:
@@ -57,9 +57,9 @@
 import java.rmi.Naming;
 import java.rmi.RemoteException;
 
+import org.apache.jorphan.collections.HashTree;
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
-import org.apache.jorphan.collections.HashTree;
 
 
 /************************************************************

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -73,11 +73,11 @@
 import org.apache.jmeter.threads.ListenerNotifier;
 import org.apache.jmeter.threads.TestCompiler;
 import org.apache.jmeter.threads.ThreadGroup;
-import org.apache.log.Hierarchy;
-import org.apache.log.Logger;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.collections.ListedHashTree;
 import org.apache.jorphan.collections.SearchByClass;
+import org.apache.log.Hierarchy;
+import org.apache.log.Logger;
 
 /************************************************************
  *  !ToDo (Class description)

File: src/core/org/apache/jmeter/functions/CompoundFunction.java
Patch:
@@ -68,12 +68,12 @@
 import org.apache.jmeter.samplers.Sampler;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.reflect.ClassFinder;
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
 import org.apache.oro.text.perl.Perl5Util;
 import org.apache.oro.text.regex.PatternCompiler;
 import org.apache.oro.text.regex.Perl5Compiler;
-import org.apache.jorphan.reflect.ClassFinder;
 
 /**
  * CompoundFunction

File: src/core/org/apache/jmeter/gui/JMeterComponentModel.java
Patch:
@@ -54,7 +54,7 @@
  */
  package org.apache.jmeter.gui;
 
-import java.util.*;
+import java.util.Collection;
 
 /**
  * This class is obsolete.

File: src/core/org/apache/jmeter/gui/JMeterFileFilter.java
Patch:
@@ -55,9 +55,7 @@
 
 package org.apache.jmeter.gui;
 
-import java.io.*;
-import javax.swing.*;
-import javax.swing.filechooser.*;
+import java.io.File;
 import java.util.Arrays;
 
 public class JMeterFileFilter extends javax.swing.filechooser.FileFilter 

File: src/core/org/apache/jmeter/gui/JMeterGUIComponent.java
Patch:
@@ -55,9 +55,11 @@
 
 package org.apache.jmeter.gui;
 import java.util.Collection;
+
 import javax.swing.JPopupMenu;
-import org.apache.jmeter.testelement.TestElement;
+
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
+import org.apache.jmeter.testelement.TestElement;
 /****************************************
  * Implementing this interface indicates that the class is
  * a JMeter GUI Component.  A JMeter GUI Component is essentially 

File: src/core/org/apache/jmeter/gui/NamePanel.java
Patch:
@@ -60,14 +60,14 @@
 import javax.swing.JPanel;
 import javax.swing.JPopupMenu;
 import javax.swing.JTextField;
-import javax.swing.event.DocumentListener;
 import javax.swing.event.DocumentEvent;
+import javax.swing.event.DocumentListener;
 
+import org.apache.jmeter.gui.tree.JMeterTreeNode;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.WorkBench;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.util.LocaleChangeEvent;
-import org.apache.jmeter.gui.tree.JMeterTreeNode;
 /****************************************
  * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache
  *

File: src/core/org/apache/jmeter/gui/action/ChangeLanguage.java
Patch:
@@ -61,8 +61,8 @@
 import java.util.Set;
 
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.log.Logger;
 import org.apache.jorphan.logging.LoggingManager;
+import org.apache.log.Logger;
 /**
  * @author Administrator
  *

File: src/core/org/apache/jmeter/gui/action/Command.java
Patch:
@@ -55,9 +55,7 @@
  package org.apache.jmeter.gui.action;
 
 import java.awt.event.ActionEvent;
-import java.util.*;
-
-import org.apache.jmeter.gui.*;
+import java.util.Set;
 
 /**
  * Title:        JMeter

File: src/core/org/apache/jmeter/gui/action/CreateFunctionDialog.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.Set;
 
 import org.apache.jmeter.functions.gui.FunctionHelper;
-import org.apache.jmeter.gui.GuiPackage;
 
 /**
  * @author Administrator

File: src/core/org/apache/jmeter/gui/action/GlobalMouseListener.java
Patch:
@@ -3,8 +3,8 @@
 import java.awt.event.MouseEvent;
 
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.log.Logger;
 import org.apache.jorphan.logging.LoggingManager;
+import org.apache.log.Logger;
 /**
  * @author Administrator
  *

File: src/core/org/apache/jmeter/gui/action/Help.java
Patch:
@@ -6,15 +6,14 @@
 import java.util.Set;
 
 import javax.swing.JDialog;
-import javax.swing.JOptionPane;
 import javax.swing.JScrollPane;
 
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.swing.HtmlPane;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.log.Logger;
 import org.apache.jorphan.gui.ComponentUtil;
 import org.apache.jorphan.logging.LoggingManager;
+import org.apache.log.Logger;
 /**
  * @author Administrator
  *

File: src/core/org/apache/jmeter/gui/action/RemoteStart.java
Patch:
@@ -67,9 +67,9 @@
 import org.apache.jmeter.engine.JMeterEngineException;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.collections.HashTree;
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
-import org.apache.jorphan.collections.HashTree;
 
 /****************************************
  * Title: Description: Copyright: Copyright (c) 2001 Company:

File: src/core/org/apache/jmeter/gui/action/Remove.java
Patch:
@@ -60,7 +60,6 @@
 
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
-import org.apache.jmeter.util.JMeterUtils;
 
 /**
  *  Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache

File: src/core/org/apache/jmeter/gui/util/JMeterMenuBar.java
Patch:
@@ -60,11 +60,11 @@
 import java.util.LinkedList;
 
 import javax.swing.JMenu;
-import javax.swing.MenuElement;
 import javax.swing.JMenuBar;
 import javax.swing.JMenuItem;
 import javax.swing.JPopupMenu;
 import javax.swing.KeyStroke;
+import javax.swing.MenuElement;
 import javax.swing.UIManager;
 
 import org.apache.jmeter.gui.action.ActionRouter;
@@ -73,9 +73,9 @@
 import org.apache.jmeter.util.LocaleChangeEvent;
 import org.apache.jmeter.util.LocaleChangeListener;
 import org.apache.jmeter.util.SSLManager;
+import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
-import org.apache.jorphan.util.JOrphanUtils;
 
 /****************************************
  * Title: Apache JMeter Description: Copyright: Copyright (c) 2000 Company:

File: src/core/org/apache/jmeter/gui/util/NumberFieldErrorListener.java
Patch:
@@ -61,6 +61,7 @@
 
 import javax.swing.JOptionPane;
 import javax.swing.text.JTextComponent;
+
 import org.apache.jmeter.util.JMeterUtils;
 
 /**

File: src/core/org/apache/jmeter/plugin/PluginManager.java
Patch:
@@ -58,7 +58,7 @@
 
 import java.net.URL;
 
-import javax.swing.*;
+import javax.swing.ImageIcon;
 
 import org.apache.jmeter.gui.GUIFactory;
 

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -82,9 +82,9 @@
 import org.apache.jmeter.save.SaveService;
 import org.apache.jmeter.testelement.TestListener;
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jorphan.io.TextFile;
 import org.apache.log.Hierarchy;
 import org.apache.log.Logger;
-import org.apache.jorphan.io.TextFile;
 import org.xml.sax.SAXException;
 
 

File: src/core/org/apache/jmeter/samplers/gui/AbstractSamplerGui.java
Patch:
@@ -3,10 +3,9 @@
 import java.util.Collection;
 
 import javax.swing.JPopupMenu;
+
 import org.apache.jmeter.gui.AbstractJMeterGuiComponent;
-import org.apache.jmeter.gui.NamePanel;
 import org.apache.jmeter.gui.util.MenuFactory;
-import org.apache.jmeter.testelement.TestElement;
 
 /****************************************
  * Title: JMeter Description: Copyright: Copyright (c) 2000 Company: Apache

File: src/core/org/apache/jmeter/save/DataSource.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.Collection;
 
 import org.apache.jmeter.samplers.SampleResult;
-import org.apache.jorphan.collections.HashTree;
 
 
 /**

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -1,8 +1,8 @@
 package org.apache.jmeter.testelement;
 import java.io.Serializable;
 import java.util.Collection;
-import java.util.HashMap;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
 

File: src/core/org/apache/jmeter/testelement/TestElement.java
Patch:
@@ -1,5 +1,5 @@
 package org.apache.jmeter.testelement;
-import java.util.*;
+import java.util.Collection;
 
 /****************************************
  * <p>

File: src/core/org/apache/jmeter/testelement/TestPlan.java
Patch:
@@ -122,6 +122,7 @@ public static TestPlan createTestPlan(String name)
 	 ***************************************/
 	public void addTestElement(TestElement tg)
 	{
+        super.addTestElement(tg);
 		if(tg instanceof ThreadGroup)
 		{
 			addThreadGroup((ThreadGroup)tg);

File: src/core/org/apache/jmeter/threads/ListenerNotifier.java
Patch:
@@ -6,8 +6,8 @@
 import org.apache.jmeter.samplers.SampleEvent;
 import org.apache.jmeter.samplers.SampleListener;
 import org.apache.jmeter.util.JMeterUtils;
-import org.apache.log.Logger;
 import org.apache.jorphan.logging.LoggingManager;
+import org.apache.log.Logger;
 /**
  * @author Administrator
  *

File: src/core/org/apache/jmeter/timers/gui/AbstractTimerGui.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Collection;
 
 import javax.swing.JPopupMenu;
+
 import org.apache.jmeter.gui.AbstractJMeterGuiComponent;
 import org.apache.jmeter.gui.util.MenuFactory;
 

File: src/core/org/apache/jmeter/util/ColorHelper.java
Patch:
@@ -55,8 +55,7 @@
 
 package org.apache.jmeter.util;
 
-import java.awt.*;
-import java.math.*;
+import java.awt.Color;
 
 /**
  * This class contains the static utility methods to manipulate colors.

File: src/core/org/apache/jmeter/util/LocaleChangeEvent.java
Patch:
@@ -56,7 +56,8 @@
 package org.apache.jmeter.util;
 
 
-import java.util.*;
+import java.util.EventObject;
+import java.util.Locale;
 
 
 /**

File: src/core/org/apache/jmeter/util/LocaleChangeListener.java
Patch:
@@ -56,7 +56,6 @@
 package org.apache.jmeter.util;
 
 
-import org.apache.jmeter.util.LocaleChangeEvent;
 
 
 /**

File: src/core/org/apache/jmeter/util/keystore/JmeterKeyStore.java
Patch:
@@ -54,11 +54,10 @@
  */
 package org.apache.jmeter.util.keystore;
 
-import java.lang.reflect.Constructor;
 import java.io.InputStream;
+import java.lang.reflect.Constructor;
 import java.security.PrivateKey;
 import java.security.cert.X509Certificate;
-import org.apache.jmeter.util.JMeterUtils;
 
 /**
  * Use this Keystore for JMeter specific KeyStores.

File: src/core/org/apache/jmeter/visualizers/Visualizer.java
Patch:
@@ -54,8 +54,6 @@
  */
 
 package org.apache.jmeter.visualizers;
-import javax.swing.JPanel;
-
 import org.apache.jmeter.samplers.SampleResult;
 
 /**

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -431,7 +431,7 @@ && getQueryString().length() > 0)
 		{
 			return new URL(
 				getProtocol(),
-				(String) getProperty(HTTPSampler.DOMAIN),
+				getPropertyAsString(HTTPSampler.DOMAIN),
 				getPort(),
 				pathAndQuery);
 		}

File: src/components/org/apache/jmeter/control/InterleaveControl.java
Patch:
@@ -81,6 +81,7 @@ public class InterleaveControl extends GenericController implements Serializable
 	 ***************************************/
 	public InterleaveControl()
 	{
+		
 	}
 
 	public void initialize()

File: src/core/org/apache/jmeter/control/GenericController.java
Patch:
@@ -98,6 +98,7 @@ public class GenericController extends AbstractTestElement implements Controller
 	 ***************************************/
 	public GenericController()
 	{
+		
 	}
 	
 	public boolean isNextFirst()

File: src/core/org/apache/jmeter/functions/CompoundFunction.java
Patch:
@@ -110,9 +110,7 @@ public class CompoundFunction implements Function
             while (iter.hasNext())
             {
                 Function tempFunc =
-                    (Function) Class
-                        .forName((String) iter.next())
-                        .newInstance();
+                    (Function) Class.forName((String) iter.next()).newInstance();
                 functions.put(tempFunc.getReferenceKey(), tempFunc.getClass());
             }
         }

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -223,6 +223,7 @@ private void notifyListeners(List listeners, SampleResult result) {
 			new SampleEvent(result, (String) controller.getProperty(TestElement.NAME));
 		compiler.sampleOccurred(event);
 		notifier.addLast(event,listeners);
+		
 	}
 	public void setInitialDelay(int delay) {
 		initialDelay = delay;

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -9,7 +9,6 @@
 import java.util.Set;
 
 import org.apache.jmeter.assertions.Assertion;
-import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.config.Modifier;
 import org.apache.jmeter.config.ResponseBasedModifier;
@@ -24,11 +23,11 @@
 import org.apache.jmeter.testelement.PerSampleClonable;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.timers.Timer;
-import org.apache.log.Hierarchy;
-import org.apache.log.Logger;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.collections.HashTreeTraverser;
 import org.apache.jorphan.collections.ListedHashTree;
+import org.apache.log.Hierarchy;
+import org.apache.log.Logger;
 
 /****************************************
  * <p>

File: src/core/org/apache/jmeter/testelement/AbstractTestElement.java
Patch:
@@ -2,6 +2,7 @@
 import java.io.Serializable;
 import java.util.Collection;
 import java.util.HashMap;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.Map;
 
@@ -18,7 +19,7 @@
 
 public abstract class AbstractTestElement implements TestElement,Serializable
 {
-    private Map testInfo = new HashMap();
+    private Map testInfo = Collections.synchronizedMap(new HashMap());
     transient private static Logger log =
             Hierarchy.getDefaultHierarchy().getLoggerFor("jmeter.elements");
 

File: src/core/org/apache/jmeter/gui/action/Help.java
Patch:
@@ -28,7 +28,7 @@ public class Help implements Command
 	private static Set commands = new HashSet();
 	public final static String HELP = "help";
 	private static String helpPage =
-		"file://"
+		"file:///"
 			+ JMeterUtils.getJMeterHome()
 			+ "/docs/usermanual/component_reference.html";
 	private static JDialog helpWindow;

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Patch:
@@ -190,6 +190,7 @@ public SampleResult sample(Entry e)
             stmt.close();
             manager.releaseConnection(con);
             res.setResponseData(data.toString().getBytes());
+            res.setDataType(res.TEXT);
             res.setSuccessful(true);
         }
         catch (Exception ex)

File: src/components/org/apache/jmeter/assertions/SizeAssertion.java
Patch:
@@ -84,7 +84,7 @@ public class SizeAssertion extends AbstractTestElement implements Serializable,
 	public final static int GREATERTHANEQUAL = 5;
 	public final static int LESSTHANEQUAL = 6;
 	/** Key for storing assertion-informations in the jmx-file. */
-	private static final String SIZE_KEY = "size_assertion_size";
+	private static final String SIZE_KEY = "SizeAssertion.size";
 	byte[] resultData;
 	
 	/**

File: src/core/org/apache/jmeter/JMeter.java
Patch:
@@ -192,7 +192,7 @@ public JMeter() {
 	 */
 	public void startGui(CLOption testFile) throws IllegalUserActionException, IllegalAccessException, ClassNotFoundException, InstantiationException {
 
-        PluginManager.install(this);
+        PluginManager.install(this, true);
 		JMeterTreeModel treeModel = new JMeterTreeModel();
 		JMeterTreeListener treeLis = new JMeterTreeListener(treeModel);
 		treeLis.setActionHandler(ActionRouter.getInstance());
@@ -329,7 +329,7 @@ public void startServer() {
 	public void startNonGui(CLOption testFile, CLOption logFile)
 		throws IllegalUserActionException, IllegalAccessException, ClassNotFoundException, InstantiationException {
 		JMeter driver = new JMeter();
-        PluginManager.install(this);
+        PluginManager.install(this, false);
 
 		if (testFile == null) {
 			throw new IllegalUserActionException();

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeNode.java
Patch:
@@ -74,7 +74,7 @@
  *@version    1.0
  ***********************************************************/
 
-public class JMeterTreeNode extends DefaultMutableTreeNode implements JMeterGUIComponent
+public class JMeterTreeNode extends DefaultMutableTreeNode
 {
     JMeterTreeModel treeModel;
 

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -2,7 +2,7 @@
  * ====================================================================
  * The Apache Software License, Version 1.1
  *
- * Copyright (c) 2002 The Apache Software Foundation.  All rights
+ * Copyright (c) 2001-2002 The Apache Software Foundation.  All rights
  * reserved.
  *
  * Redistribution and use in source and binary forms, with or without

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/RecordController.java
Patch:
@@ -1,6 +1,7 @@
-package org.apache.jmeter.control.gui;
+package org.apache.jmeter.protocol.http.control.gui;
 
 import org.apache.jmeter.util.JMeterUtils;
+import org.apache.jmeter.control.gui.LogicControllerGui;
 
 /**
  * @author Administrator

File: src/protocol/http/org/apache/jmeter/protocol/http/proxy/ProxyControl.java
Patch:
@@ -64,7 +64,7 @@
 
 import org.apache.jmeter.config.ConfigElement;
 import org.apache.jmeter.config.ConfigTestElement;
-import org.apache.jmeter.control.gui.RecordController;
+import org.apache.jmeter.protocol.http.control.gui.RecordController;
 import org.apache.jmeter.exceptions.IllegalUserActionException;
 import org.apache.jmeter.functions.ValueReplacer;
 import org.apache.jmeter.gui.GuiPackage;

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -118,7 +118,7 @@ public class ViewResultsFullVisualizer
         protected String response;
 
         /** The pane where the rendered HTML response is displayed.  **/
-        protected JEditorPane htmlEditPane;
+        transient protected JEditorPane htmlEditPane;
 
         protected JPanel resultPanel;
         protected JScrollPane treePane;

File: src/core/org/apache/jmeter/util/keystore/DefaultKeyStore.java
Patch:
@@ -90,11 +90,11 @@ public void load(InputStream is, String pword)
 
         Enumeration aliases = store.aliases();
         while (aliases.hasMoreElements()) {
+	    this.alias = (String) aliases.nextElement();
             if (store.isKeyEntry(alias)) {
                 key = (PrivateKey) store.getKey(alias, pword.toCharArray());
                 Certificate[] chain = store.getCertificateChain(alias);
                 certChain = new X509Certificate[chain.length];
-                this.alias = (String) aliases.nextElement();
 
                 for (int i = 0; i < chain.length; i++) {
                     certChain[i] = (X509Certificate) chain[i];
@@ -122,4 +122,4 @@ public final PrivateKey getPrivateKey() {
     public final String getAlias() {
         return this.alias;
     }
-}
\ No newline at end of file
+}

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java
Patch:
@@ -92,7 +92,7 @@ public void sendPostData(URLConnection connection, HTTPSampler sampler)
 			 throws IOException
 	{
 		// If filename was specified then send the post using multipart syntax
-		String filename = sampler.getFileField();
+		String filename = sampler.getFilename();
 		if ((filename != null) && (filename.trim().length() > 0))
 		{
 			OutputStream out = connection.getOutputStream();//new FileOutputStream("c:\\data\\experiment.txt");//new ByteArrayOutputStream();//

File: src/protocol/http/org/apache/jmeter/protocol/http/modifier/gui/ParamModifierGui.java
Patch:
@@ -94,7 +94,6 @@ public TestElement createTestElement()
 		mask.setIncrement(Long.parseLong(_increment.getText()));
 		mask.setUpperBound(Long.parseLong(_upperBound.getText()));
 		mask.setSuffix(_suffix.getText());
-		mask.resetValue();
 		return modifier;
 	}
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/CookieManager.java
Patch:
@@ -277,7 +277,7 @@ public void addCookieFromHeader(String cookieHeader, URL url) {
 			 String name = nvp.substring(0,index);
 			 String value = nvp.substring(index+1);
 			 String domain = url.getHost();
-			 String path = url.getFile();
+			 String path = "/";
 
 			 Cookie newCookie = new Cookie(name, value, domain, path, false,
 							System.currentTimeMillis() + 1000 * 60 * 60 * 24);

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -272,9 +272,9 @@ private static Configuration createConfigForString(String value)
 
 	private static Configuration createConfigForString(String name,String value)
 	{
-		if(value == null || value.equals(""))
+		if(value == null)
 		{
-			value = " ";
+			value = "";
 		}
 		DefaultConfiguration config = new DefaultConfiguration("property","property");
 		config.setAttribute("name",name);

File: src/components/org/apache/jmeter/visualizers/TableDataModel.java
Patch:
@@ -126,6 +126,7 @@ public Sample addSample(SampleResult e)
 		Sample s = addNewSample(e.getTime(),e.getTimeStamp(),e.isSuccessful(),
 				(String)e.getSampleLabel());
 		fireDataChanged();
+		
 		return s;
 	}
 

File: src/core/org/apache/jmeter/gui/GuiPackage.java
Patch:
@@ -106,9 +106,9 @@ public boolean isDirty()
 		return dirty;
 	}
 
-	public void addSubTree(ListedHashTree subTree) throws IllegalUserActionException
+	public boolean addSubTree(ListedHashTree subTree) throws IllegalUserActionException
 	{
-		treeModel.addSubTree(subTree,treeListener.getCurrentNode());
+		return treeModel.addSubTree(subTree,treeListener.getCurrentNode());
 	}
 
 	public ListedHashTree getCurrentSubTree()

File: src/core/org/apache/jmeter/gui/util/MenuFactory.java
Patch:
@@ -209,7 +209,7 @@ public static void addFileMenu(JPopupMenu menu)
 	{
 		addSeparator(menu);
 		menu.add(makeMenuItem(JMeterUtils.getResString("open"), "Open", "open"));
-		menu.add(makeMenuItem(JMeterUtils.getResString("save"), "Save", "save"));
+		menu.add(makeMenuItem(JMeterUtils.getResString("save"), "Save", "save_as"));
 		JMenuItem disabled = makeMenuItem(JMeterUtils.getResString("disable"),"Disable","disable");
 		JMenuItem enabled = makeMenuItem(JMeterUtils.getResString("enable"),"Enable","enable");
 		boolean isEnabled = GuiPackage.getInstance().getTreeListener().getCurrentNode().isEnabled();

File: src/components/org/apache/jmeter/visualizers/ViewResultsFullVisualizer.java
Patch:
@@ -329,7 +329,6 @@ else if(icon != null)
 	protected void init()
 	{
 		this.setLayout(new BorderLayout());
-		log.debug("Start : init1");
 		SampleResult rootSampleResult = new SampleResult();
 		rootSampleResult.setSampleLabel("Root");
 		rootSampleResult.setSuccessful(true);
@@ -347,9 +346,9 @@ protected void init()
 		resultPane = new JScrollPane(resultPanel);
 		treeSplitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
 				treePane, resultPane);
+		getFilePanel().add(getErrorLoggingCheckbox());
 		add(getFilePanel(),BorderLayout.NORTH);
 		add(treeSplitPane,BorderLayout.CENTER);
-		log.debug("End : init1");
 	}
 	
 	private class ResultsNodeRenderer extends DefaultTreeCellRenderer

File: src/components/org/apache/jmeter/modifiers/CounterConfig.java
Patch:
@@ -22,7 +22,7 @@ public class CounterConfig
 	private final static String VAR_NAME = "CounterConfig.name";
 	
 	private boolean perUser = false;
-	private int globalCounter = 0;
+	private int globalCounter = -1;
 	private int increment = 1;
 	private int start = 0;
 	private int end = Integer.MAX_VALUE;

File: src/components/org/apache/jmeter/visualizers/GraphAccumModel.java
Patch:
@@ -53,6 +53,7 @@
  */
 package org.apache.jmeter.visualizers;
 
+import java.io.Serializable;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.LinkedList;
@@ -70,7 +71,7 @@
  *@version    1.0
  */
 
-public class GraphAccumModel implements Clearable
+public class GraphAccumModel implements Clearable,Serializable
 {
 	/**
 	 *  Description of the Field

File: src/components/org/apache/jmeter/visualizers/GraphAccumVisualizer.java
Patch:
@@ -88,16 +88,16 @@ public class GraphAccumVisualizer extends AbstractVisualizer
 	/****************************************
 	 * !ToDo (Field description)
 	 ***************************************/
-	protected GraphAccumModel model;
+	protected transient GraphAccumModel model;
 	/****************************************
 	 * !ToDo (Field description)
 	 ***************************************/
-	protected GraphAccum graph;
+	protected transient GraphAccum graph;
 
 	/****************************************
 	 * !ToDo (Field description)
 	 ***************************************/
-	protected JPanel legendPanel;
+	transient protected JPanel legendPanel;
 	transient private static Logger log = Hierarchy.getDefaultHierarchy().getLoggerFor("jmeter.gui");
 
 

File: src/components/org/apache/jmeter/visualizers/SplineVisualizer.java
Patch:
@@ -107,7 +107,7 @@ public class SplineVisualizer extends AbstractVisualizer implements ImageVisuali
 	 ***************************************/
 	protected final boolean FILL_UP_WITH_ZEROS = false;
 
-	private SplineGraph graph = null;
+	transient private SplineGraph graph = null;
 
 	private JLabel minimumLabel = null;
 	private JLabel maximumLabel = null;
@@ -118,7 +118,7 @@ public class SplineVisualizer extends AbstractVisualizer implements ImageVisuali
 	private JLabel maximumNumberLabel = null;
 	private JLabel averageNumberLabel = null;
 	private JLabel incomingNumberLabel = null;
-	private SplineModel model;
+	transient private SplineModel model;
 
 	/****************************************
 	 * !ToDo (Constructor description)

File: src/core/org/apache/jmeter/engine/RemoteJMeterEngineImpl.java
Patch:
@@ -90,7 +90,7 @@ public RemoteJMeterEngineImpl() throws RemoteException
 		}
 		catch(Exception ex)
 		{
-			log.error("",ex);
+			log.error("rmiregistry needs to be running to start JMeter in server mode",ex);
 		}
 	}
 	

File: src/core/org/apache/jmeter/engine/StandardJMeterEngine.java
Patch:
@@ -55,6 +55,7 @@
 package org.apache.jmeter.engine;
 
 import java.io.PrintWriter;
+import java.io.Serializable;
 import java.io.StringWriter;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -84,7 +85,8 @@
  *@created    $Date$
  *@version    $Revision$
  ***********************************************************/
-public class StandardJMeterEngine implements JMeterEngine,JMeterThreadMonitor,Runnable
+public class StandardJMeterEngine implements JMeterEngine,JMeterThreadMonitor,
+		Runnable,Serializable
 {
 	transient private static Logger log = Hierarchy.getDefaultHierarchy().getLoggerFor(
 			"jmeter.engine");

File: src/core/org/apache/jmeter/gui/ListDialog.java
Patch:
@@ -85,6 +85,9 @@ public class ListDialog extends JPanel implements ActionListener, KeyListener
 
 	Vector listData;
 
+	public ListDialog()
+	{
+	}
 
 	/*************************
 	 *  Constructor takes a label for instructions to the user, and a list of items

File: src/core/org/apache/jmeter/gui/action/ActionRouter.java
Patch:
@@ -56,6 +56,7 @@
 
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import java.awt.event.MouseListener;
 import java.lang.reflect.Modifier;
 import java.util.HashMap;
 import java.util.HashSet;

File: src/core/org/apache/jmeter/gui/action/RemoteStart.java
Patch:
@@ -108,6 +108,7 @@ public void doAction(ActionEvent e)
 		String action = e.getActionCommand();
 		if(action.equals("remote_stop"))
 		{
+			GuiPackage.getInstance().getMainFrame().showStoppingMessage(name);
 			JMeterEngine engine = (JMeterEngine)remoteEngines.get(name);
 			engine.stopTest();
 		}

File: src/core/org/apache/jmeter/gui/action/Start.java
Patch:
@@ -115,7 +115,7 @@ public void doAction(ActionEvent e)
 		}
 		else if(e.getActionCommand().equals("stop"))
 		{
-			GuiPackage.getInstance().getMainFrame().showStoppingMessage();
+			GuiPackage.getInstance().getMainFrame().showStoppingMessage("");
 			engine.stopTest();
 			engine = null;
 		}

File: src/core/org/apache/jmeter/gui/tree/JMeterTreeModel.java
Patch:
@@ -79,8 +79,7 @@
 
 public class JMeterTreeModel extends DefaultTreeModel
 {
-	private static ResourceBundle rb = ResourceBundle.getBundle("org.apache.jmeter.resources.messages");
-
+	
 	/****************************************
 	 * !ToDo (Constructor description)
 	 ***************************************/

File: src/core/org/apache/jmeter/reporters/FileReporter.java
Patch:
@@ -160,6 +160,7 @@ class graphPanel extends JPanel {
 	Hashtable data;
 	Vector keys = new Vector();
 	Vector colorList = new Vector();
+	public graphPanel(){}
 	public graphPanel(Hashtable data) {
 		this.data = data;
 		Enumeration e = data.keys();

File: src/core/org/apache/jmeter/reporters/ResultCollector.java
Patch:
@@ -107,9 +107,9 @@ public class ResultCollector extends AbstractListenerElement implements SampleLi
 	 */
 	//protected List results = Collections.synchronizedList(new ArrayList());
 	private int current;
-	private DefaultConfigurationSerializer serializer;
+	transient private DefaultConfigurationSerializer serializer;
 	private boolean inLoading = false;
-	private PrintWriter out;
+	transient private PrintWriter out;
 	private boolean inTest = false;
 	private static Map files = new HashMap();
 	private Set hosts = new HashSet();

File: src/core/org/apache/jmeter/samplers/RemoteSampleListener.java
Patch:
@@ -63,7 +63,7 @@
  * and when sampling is stopped.
  */
 public interface RemoteSampleListener
-	 extends java.rmi.Remote, java.io.Serializable
+	 extends java.rmi.Remote
 {
 	
 	public void testStarted() throws RemoteException;

File: src/core/org/apache/jmeter/samplers/SampleListener.java
Patch:
@@ -60,7 +60,7 @@
  * when a specific sample is obtained,
  * and when sampling is stopped.
  */
-public interface SampleListener extends java.io.Serializable {
+public interface SampleListener {
 	 /**
 	  * A sample has started and stopped.
 	  **/

File: src/core/org/apache/jmeter/threads/ListenerNotifier.java
Patch:
@@ -15,7 +15,7 @@
  */
 public class ListenerNotifier extends LinkedList implements Runnable
 {
-	Logger log =
+	private static Logger log =
 		Hierarchy.getDefaultHierarchy().getLoggerFor(LoggingManager.ENGINE);
 	/**
 	 * @see java.lang.Runnable#run()

File: src/core/org/apache/jmeter/util/Data.java
Patch:
@@ -54,6 +54,7 @@
  */
 
 package org.apache.jmeter.util;
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -70,7 +71,7 @@
 @author Michael Stover
 @version 1.0 10/14/1998
  ******************************************************************/
-public class Data
+public class Data implements Serializable
 {
   Map data;
   Map iterators = new HashMap();

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSampler.java
Patch:
@@ -117,7 +117,7 @@ public class HTTPSampler extends AbstractSampler
 	public final static String MULTIPART_FORM = "multipart_form";
 	protected static String encoding = "iso-8859-1";
 	private static final PostWriter postWriter = new PostWriter();
-	protected HttpURLConnection conn;
+	transient protected HttpURLConnection conn;
 	private int connectionTries = 0;
 	public void setFileField(String value)
 	{

File: src/protocol/java/org/apache/jmeter/protocol/java/sampler/JavaSampler.java
Patch:
@@ -81,7 +81,7 @@ public class JavaSampler extends AbstractSampler implements JavaSamplerClient {
 	
 	public final static String ARGUMENTS = "arguments";
 
-	private JavaSamplerClient javaClient = null;
+	transient private JavaSamplerClient javaClient = null;
 
 	/** Logging  */
 	transient private static Logger log = Hierarchy.getDefaultHierarchy().getLoggerFor("jmeter.protocol.java");

File: src/protocol/java/org/apache/jmeter/protocol/java/test/SleepTest.java
Patch:
@@ -55,6 +55,7 @@
 
 package org.apache.jmeter.protocol.java.test;
 
+import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map.Entry;
@@ -70,7 +71,7 @@
  * <code>JavaSamplerClient</code> interface.
  */
 
-public class SleepTest implements JavaSamplerClient {
+public class SleepTest implements JavaSamplerClient,Serializable {
 	/** Define category for logging  */
 	transient private static Logger log = Hierarchy.getDefaultHierarchy().getLoggerFor("jmeter.protocol.java");
 	/** */

File: src/protocol/jdbc/org/apache/jmeter/protocol/jdbc/sampler/JDBCSampler.java
Patch:
@@ -90,7 +90,7 @@ public class JDBCSampler extends AbstractSampler implements TestListener
 	public static String CONNECTIONS = "JDBCSampler.connections";
 	public static String MAXUSE = "JDBCSampler.maxuse";
 	//database connection pool manager
-	DBConnectionManager manager = DBConnectionManager.getManager();
+	transient DBConnectionManager manager = DBConnectionManager.getManager();
 	// end method
 	public final static String QUERY = "JDBCSampler.query";
 	private static Map keyMap = new HashMap();

File: src/core/org/apache/jmeter/gui/action/ChangeLanguage.java
Patch:
@@ -30,7 +30,7 @@ public class ChangeLanguage implements Command
 	 */
 	public void doAction(ActionEvent e)
 	{
-		Locale loc = new Locale(((Component)e.getSource()).getName());
+		Locale loc = new Locale(((Component)e.getSource()).getName(),"");
 		log.debug("Changing language to "+loc.getLanguage());
 		JMeterUtils.reinitializeLocale(loc);
 	}

File: src/core/org/apache/jmeter/threads/JMeterThread.java
Patch:
@@ -212,6 +212,7 @@ private void notifyThreadListeners()
 	private void notifyListeners(List listeners, SampleResult result) {
 		SampleEvent event =
 			new SampleEvent(result, (String) controller.getProperty(TestElement.NAME));
+		compiler.sampleOccurred(event);
 		notifier.addLast(event,listeners);
 	}
 	public void setInitialDelay(int delay) {

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -124,7 +124,6 @@ public SamplePackage configureSampler(Sampler sampler)
 			replaceValues(clonedSampler);
 		}
 		ret.setSampler(clonedSampler);
-		ret.addSampleListener(this);
 		configureWithConfigElements(clonedSampler,configs.getConfigs());
 		configureWithResponseModifiers(clonedSampler,configs.getResponseModifiers());
 		configureWithModifiers(clonedSampler,configs.getModifiers());

File: src/protocol/http/org/apache/jmeter/protocol/http/gui/HTTPArgumentsPanel.java
Patch:
@@ -58,9 +58,10 @@ public TestElement createTestElement()
 			}
 			else
 			{
-				HTTPArgument arg = new HTTPArgument((String)model.getColumnValue(Arguments.COLUMN_NAMES[0]),
-						model.getColumnValue(Arguments.COLUMN_NAMES[1]),true);
+				HTTPArgument arg = new HTTPArgument();
 				arg.setAlwaysEncode(false);
+				arg.setName((String)model.getColumnValue(Arguments.COLUMN_NAMES[0]));
+				arg.setValue(model.getColumnValue(Arguments.COLUMN_NAMES[1]));
 				args.addArgument(arg);
 			}
 		}

File: src/core/org/apache/jmeter/util/LoggingManager.java
Patch:
@@ -15,7 +15,7 @@
  */
 public class LoggingManager
 {
-	private static PatternFormatter format = new PatternFormatter("%{time:MM/dd/yyyy h:mm:ss a} %{priority} - %{category}: %{message}\n");
+	private static PatternFormatter format = new PatternFormatter("%{time:MM/dd/yyyy h:mm:ss a} %{priority} - %{category}: %{message}\n%{throwable}\n");
 	private static WriterTarget target;
 	
 	public static final String JMETER = "jmeter";

File: src/core/org/apache/jmeter/gui/action/Start.java
Patch:
@@ -115,9 +115,9 @@ public void doAction(ActionEvent e)
 		}
 		else if(e.getActionCommand().equals("stop"))
 		{
+			GuiPackage.getInstance().getMainFrame().showStoppingMessage();
 			engine.stopTest();
 			engine = null;
-			GuiPackage.getInstance().getMainFrame().showStoppingMessage();
 		}
 	}
 

File: src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
Patch:
@@ -164,7 +164,7 @@ private void init()
 		mainPanel.add(titlePanel,BorderLayout.NORTH);
 
 		// URL CONFIG
-		urlConfigGui = new MultipartUrlConfigGui(false);
+		urlConfigGui = new MultipartUrlConfigGui();
 		mainPanel.add(urlConfigGui,BorderLayout.CENTER);
 
 		// OPTIONAL TASKS

File: src/protocol/http/org/apache/jmeter/protocol/http/sampler/PostWriter.java
Patch:
@@ -94,7 +94,7 @@ public void sendPostData(URLConnection connection, HTTPSampler sampler)
 		((HttpURLConnection)connection).setRequestMethod("POST");
 
 		// If filename was specified then send the post using multipart syntax
-		String filename = sampler.getFilename();
+		String filename = sampler.getFileField();
 		if ((filename != null) && (filename.trim().length() > 0))
 		{
 			connection.setRequestProperty("Content-type", "multipart/form-data; boundary=" + BOUNDARY);

File: src/core/org/apache/jmeter/NewDriver.java
Patch:
@@ -140,6 +140,7 @@ public boolean accept(File dir,String name) {
 			loader.loadClass("org.apache.jmeter.gui.tree.JMeterTreeListener");
 			loader.loadClass("org.apache.jmeter.gui.tree.JMeterTreeModel");
 			loader.loadClass("org.apache.jmeter.gui.util.ComponentUtil");
+			loader.loadClass("org.apache.jmeter.gui.util.MenuFactory");
 			loader.loadClass("org.apache.jmeter.util.JMeterUtils");
 			loader.loadClass("javax.xml.parsers.SAXParserFactory");
 			loader.loadClass("org.apache.xerces.jaxp.SAXParserFactoryImpl");

File: src/functions/org/apache/jmeter/functions/RegexFunction.java
Patch:
@@ -109,7 +109,6 @@ public String execute(SampleResult previousResult,Sampler currentSampler)
 		}
 		else if(valueIndex.equals(RAND))
 		{
-			System.out.println("Number of matches = "+collectAllMatches.size());
 			MatchResult result = (MatchResult)collectAllMatches.get(
 					rand.nextInt(collectAllMatches.size()));
 			return generateResult(result);
@@ -182,7 +181,6 @@ public void setParameters(String params) throws InvalidVariableException
 			if(tk.hasNext())
 			{
 				valueIndex = (String)tk.next();
-				System.out.println("Value index = "+valueIndex);
 			}
 			if(tk.hasNext())
 			{

File: src/core/org/apache/jmeter/save/SaveService.java
Patch:
@@ -348,7 +348,7 @@ private static Collection createCollection(Configuration config) throws Configur
 		{
 			if(items[i].getName().equals("property"))
 			{
-				coll.add(items[i].getValue());
+				coll.add(items[i].getValue(""));
 			}
 			else if(items[i].getName().equals("testelement"))
 			{
@@ -360,7 +360,7 @@ else if(items[i].getName().equals("collection"))
 			}
 			else if(items[i].getName().equals("string"))
 			{
-				coll.add(items[i].getValue());
+				coll.add(items[i].getValue(""));
 			}
 		}
 		return coll;

File: src/components/org/apache/jmeter/config/gui/ArgumentsPanel.java
Patch:
@@ -396,7 +396,7 @@ public void testArgumentCreation() throws Exception
 			gui.tableModel.addNewRow();
 			gui.tableModel.setValueAt("howdy",0,0);
 			gui.tableModel.setValueAt("doody",0,1);
-			assertNull(((Argument)((Arguments)gui.createTestElement()).getArguments().get(0)).getMetaData());
+			assertEquals("=",((Argument)((Arguments)gui.createTestElement()).getArguments().get(0)).getMetaData());
 		}
 	}
 }

File: src/components/org/apache/jmeter/config/Argument.java
Patch:
@@ -71,8 +71,8 @@
 
 public class Argument extends AbstractTestElement implements Serializable
 {
-	private final static String NAME = "Argument.name";
-	private final static String VALUE = "Argument.value";
+	protected final static String NAME = "Argument.name";
+	protected final static String VALUE = "Argument.value";
         private final static String METADATA = "Argument.metadata";
     
 	/****************************************

File: src/core/org/apache/jmeter/engine/PreCompiler.java
Patch:
@@ -125,5 +125,7 @@ else if(val instanceof Collection)
 		}
 		return newColl;
 	}
+	
+	
 
 }

File: src/core/org/apache/jmeter/threads/TestCompiler.java
Patch:
@@ -464,5 +464,4 @@ else if(val instanceof Collection)
 		}
 		return newColl;
 	}
-
 }

File: src/core/org/apache/jmeter/util/ClassFinder.java
Patch:
@@ -742,7 +742,7 @@ public Test(String name) {
 		
 		 ***********************************************************/
 		public void testFindClassesInPaths() {
-			String testPath = System.getProperty("user.dir") + "/classes";
+			String testPath = JMeterUtils.getJMeterHome() + "/build";
 			List listPaths = new ArrayList();
 			ArrayList listClasses = new ArrayList();
 			// listPaths will contain the path/jars where all classes will be listed

File: src/core/org/apache/jmeter/util/JMeterUtils.java
Patch:
@@ -993,6 +993,6 @@ public static void setJMeterHome(String home)
 	  */
 	 public static String getJMeterVersion()
 	 {
-		  return "1.7.2";
+		  return "@VERSION@";
 	 }
 }

