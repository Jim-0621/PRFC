File: library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImageRenderer.java
Patch:
@@ -239,6 +239,7 @@ public void run() {
                 if (bitmap.getWidth() % 2 == 1) {
                     resizedBitmap = Bitmap.createBitmap(bitmap.getWidth() + 1, bitmap.getHeight(),
                             Bitmap.Config.ARGB_8888);
+                    resizedBitmap.setDensity(bitmap.getDensity());
                     Canvas can = new Canvas(resizedBitmap);
                     can.drawARGB(0x00, 0x00, 0x00, 0x00);
                     can.drawBitmap(bitmap, 0, 0, null);

File: library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageZoomBlurFilter.java
Patch:
@@ -66,6 +66,6 @@ public void setBlurCenter(final PointF blurCenter) {
 
     public void setBlurSize(final float blurSize) {
         this.blurSize = blurSize;
-        setFloat(blurSizeLocation, blurSizeLocation);
+        setFloat(blurSizeLocation, blurSize);
     }
 }

File: library/src/main/java/jp/co/cyberagent/android/gpuimage/GPUImage.java
Patch:
@@ -261,7 +261,7 @@ public void setScaleType(ScaleType scaleType) {
      * @return array with width and height of bitmap image
      */
     public int[] getScaleSize() {
-        return new int[] = {scaleWidth, scaleHeight};
+        return new int[] {scaleWidth, scaleHeight};
     }
 
     /**

File: library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageFilter.java
Patch:
@@ -297,7 +297,7 @@ public static String convertStreamToString(java.io.InputStream is) {
     }
     
     private void checkIsInitialized() {
-        if (!mIsInitialized) {
+        if (!isInitialized) {
             throw new AssertionError("Filter should be initialized");
         }
     }

File: library/src/main/java/jp/co/cyberagent/android/gpuimage/filter/GPUImageFilter.java
Patch:
@@ -297,7 +297,7 @@ public static String convertStreamToString(java.io.InputStream is) {
     }
     
     private void checkIsInitialized() {
-        if (!mInInitialized) {
+        if (!mIsInitialized) {
             throw new AssertionError("Filter should be initialized");
         }
     }

File: sample/src/main/java/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityGallery.java
Patch:
@@ -16,7 +16,6 @@
 
 package jp.co.cyberagent.android.gpuimage.sample.activity;
 
-import android.app.Activity;
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
@@ -26,14 +25,15 @@
 import android.widget.SeekBar.OnSeekBarChangeListener;
 import android.widget.Toast;
 
+import androidx.appcompat.app.AppCompatActivity;
 import jp.co.cyberagent.android.gpuimage.GPUImageFilter;
 import jp.co.cyberagent.android.gpuimage.GPUImageView;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.FilterAdjuster;
 import jp.co.cyberagent.android.gpuimage.sample.GPUImageFilterTools.OnGpuImageFilterChosenListener;
 import jp.co.cyberagent.android.gpuimage.sample.R;
 
-public class ActivityGallery extends Activity implements OnSeekBarChangeListener,
+public class ActivityGallery extends AppCompatActivity implements OnSeekBarChangeListener,
         OnClickListener, GPUImageView.OnPictureSavedListener {
 
     private static final int REQUEST_PICK_IMAGE = 1;

File: sample/src/main/java/jp/co/cyberagent/android/gpuimage/sample/activity/ActivityMain.java
Patch:
@@ -17,18 +17,18 @@
 package jp.co.cyberagent.android.gpuimage.sample.activity;
 
 import android.Manifest;
-import android.app.Activity;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.os.Bundle;
 import android.view.View;
 import android.view.View.OnClickListener;
 
+import androidx.appcompat.app.AppCompatActivity;
 import androidx.core.app.ActivityCompat;
 import androidx.core.content.ContextCompat;
 import jp.co.cyberagent.android.gpuimage.sample.R;
 
-public class ActivityMain extends Activity implements OnClickListener {
+public class ActivityMain extends AppCompatActivity implements OnClickListener {
 
     @Override
     public void onCreate(final Bundle savedInstanceState) {

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
Patch:
@@ -239,7 +239,7 @@ public void onGlobalLayout() {
         post(new Runnable() {
             @Override
             public void run() {
-                // Show loading¥
+                // Show loading
                 addView(new LoadingView(getContext()));
 
                 mGLSurfaceView.requestLayout();

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImageView.java
Patch:
@@ -239,7 +239,7 @@ public void onGlobalLayout() {
         post(new Runnable() {
             @Override
             public void run() {
-                // Show loading¥
+                // Show loading
                 addView(new LoadingView(getContext()));
 
                 mGLSurfaceView.requestLayout();

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImageSourceOverBlendFilter.java
Patch:
@@ -26,7 +26,7 @@ public class GPUImageSourceOverBlendFilter extends GPUImageTwoInputFilter {
             " void main()\n" +
             " {\n" +
             "   lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n" +
-            "   lowp vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate);\n" +
+            "   lowp vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate2);\n" +
             "   \n" +
             "   gl_FragColor = mix(textureColor, textureColor2, textureColor2.a);\n" +
             " }";

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImageSourceOverBlendFilter.java
Patch:
@@ -26,7 +26,7 @@ public class GPUImageSourceOverBlendFilter extends GPUImageTwoInputFilter {
             " void main()\n" +
             " {\n" +
             "   lowp vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);\n" +
-            "   lowp vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate);\n" +
+            "   lowp vec4 textureColor2 = texture2D(inputImageTexture2, textureCoordinate2);\n" +
             "   \n" +
             "   gl_FragColor = mix(textureColor, textureColor2, textureColor2.a);\n" +
             " }";

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImageContrastFilter.java
Patch:
@@ -19,8 +19,8 @@
 import android.opengl.GLES20;
 
 /**
- * Changes the contrast of the image.<br />
- * <br />
+ * Changes the contrast of the image.<br>
+ * <br>
  * contrast value ranges from 0.0 to 4.0, with 1.0 as the normal level
  */
 public class GPUImageContrastFilter extends GPUImageFilter {

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImageEmbossFilter.java
Patch:
@@ -17,8 +17,8 @@
 package jp.co.cyberagent.android.gpuimage;
 
 /**
- * Applies an emboss effect to the image.<br />
- * <br />
+ * Applies an emboss effect to the image.<br>
+ * <br>
  * Intensity ranges from 0.0 to 4.0, with 1.0 as the normal level
  */
 public class GPUImageEmbossFilter extends GPUImage3x3ConvolutionFilter {

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImagePosterizeFilter.java
Patch:
@@ -19,8 +19,8 @@
 import android.opengl.GLES20;
 
 /**
- * Reduces the color range of the image. <br/>
- * <br/>
+ * Reduces the color range of the image. <br>
+ * <br>
  * colorLevels: ranges from 1 to 256, with a default of 10
  */
 public class GPUImagePosterizeFilter extends GPUImageFilter {

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImageSharpenFilter.java
Patch:
@@ -19,8 +19,8 @@
 import android.opengl.GLES20;
 
 /**
- * Sharpens the picture. <br />
- * <br />
+ * Sharpens the picture. <br>
+ * <br>
  * sharpness: from -4.0 to 4.0, with 0.0 as the normal level
  */
 public class GPUImageSharpenFilter extends GPUImageFilter {

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImageSmoothToonFilter.java
Patch:
@@ -27,7 +27,7 @@ public class GPUImageSmoothToonFilter extends GPUImageFilterGroup {
     GPUImageToonFilter toonFilter;
 
     /**
-     * setup & teardown
+     * Setup and Tear down
      */
     public GPUImageSmoothToonFilter() {
         // First pass: apply a variable Gaussian blur

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImageWhiteBalanceFilter.java
Patch:
@@ -19,8 +19,8 @@
 import android.opengl.GLES20;
 
 /**
- * Adjusts the white balance of incoming image. <br />
- * <br />
+ * Adjusts the white balance of incoming image. <br>
+ * <br>
  * temperature: 
  * tint:
  */

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
Patch:
@@ -268,8 +268,8 @@ public void run() {
                     }
                 }
             });
-            requestRender();
             synchronized(mFilter) {
+                requestRender();
                 try {
                     mFilter.wait();
                 } catch (InterruptedException e) {

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
Patch:
@@ -268,8 +268,8 @@ public void run() {
                     }
                 }
             });
-            requestRender();
             synchronized(mFilter) {
+                requestRender();
                 try {
                     mFilter.wait();
                 } catch (InterruptedException e) {

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImage.java
Patch:
@@ -489,7 +489,9 @@ protected int getImageOrientation() throws IOException {
             }
 
             cursor.moveToFirst();
-            return cursor.getInt(0);
+            int orientation = cursor.getInt(0);
+            cursor.close();
+            return orientation;
         }
     }
 

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilter.java
Patch:
@@ -223,8 +223,8 @@ protected void setPoint(final int location, final PointF point) {
             @Override
             public void run() {
                 float[] vec2 = new float[2];
-            	vec2[0] = point.x;
-            	vec2[1] = point.y;
+                vec2[0] = point.x;
+                vec2[1] = point.y;
                 GLES20.glUniform2fv(location, 1, vec2, 0);
             }
         });

File: library/src/jp/co/cyberagent/android/gpuimage/GPUImageFilterGroup.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.List;
 
 import static jp.co.cyberagent.android.gpuimage.GPUImageRenderer.CUBE;
-import static jp.co.cyberagent.android.gpuimage.GPUImageRenderer.TEXTURE_NO_ROTATION;
+import static jp.co.cyberagent.android.gpuimage.utils.TextureRotationUtils.TEXTURE_NO_ROTATION;
 
 /**
  * Resembles a filter that consists of multiple filters applied after each

File: library/src/jp/cyberagent/android/gpuimage/GPUImage.java
Patch:
@@ -159,6 +159,8 @@ public void run() {
         }
 
         GPUImageRenderer renderer = new GPUImageRenderer(mFilter);
+        renderer.setRotation(Rotation.NORMAL,
+                mRenderer.isFlippedHorizontally(), mRenderer.isFlippedVertically());
         PixelBuffer buffer = new PixelBuffer(bitmap.getWidth(), bitmap.getHeight());
         buffer.setRenderer(renderer);
         renderer.setImageBitmap(bitmap, false);

File: library/src/jp/cyberagent/android/gpuimage/GPUImageSharpenFilter.java
Patch:
@@ -84,8 +84,8 @@ public void onInit() {
     @Override
     public void onOutputSizeChanged(final int width, final int height) {
         super.onOutputSizeChanged(width, height);
-        GLES20.glUniform1f(mImageWidthFactorLocation, 1.0f / width);
-        GLES20.glUniform1f(mImageHeightFactorLocation, 1.0f / height);
+        setFloat(mImageWidthFactorLocation, 1.0f / width);
+        setFloat(mImageHeightFactorLocation, 1.0f / height);
     }
 
     public void setSharpness(final float sharpness) {

File: library/src/jp/cyberagent/android/gpuimage/GPUImageFilterGroup.java
Patch:
@@ -121,7 +121,8 @@ public void onOutputSizeChanged(final int width, final int height) {
     @Override
     public void onDraw(final int textureId, final FloatBuffer cubeBuffer,
             final FloatBuffer textureBuffer, final ShortBuffer indexBuffer) {
-        if (mFrameBuffers == null || mFrameBufferTextures == null) {
+        runPendingOnDrawTasks();
+        if (!isInitialized() || mFrameBuffers == null || mFrameBufferTextures == null) {
             return;
         }
         int previousTexture = textureId;

