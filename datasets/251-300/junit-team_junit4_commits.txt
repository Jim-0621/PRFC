File: src/test/java/junit/samples/SimpleTest.java
Patch:
@@ -60,7 +60,7 @@ public void testDivideByZero() {
     public void testEquals() {
         assertEquals(12, 12);
         assertEquals(12L, 12L);
-        assertEquals(new Long(12), new Long(12));
+        assertEquals(Long.valueOf(12), Long.valueOf(12));
 
         assertEquals("Size", 12, 13);
         assertEquals("Capacity", 12.0, 11.99, 0.0);

File: src/test/java/org/junit/runners/parameterized/TestWithParametersTest.java
Patch:
@@ -106,7 +106,7 @@ public void isNotEqualToTestWithDifferentParameters() {
     public void isNotEqualToObjectWithDifferentClass() {
         TestWithParameters test = new TestWithParameters(DUMMY_NAME,
                 DUMMY_TEST_CLASS, DUMMY_PARAMETERS);
-        assertNotEquals(test, new Integer(3));
+        assertNotEquals(test, Integer.valueOf(3));
     }
 
     @Test

File: src/test/java/org/junit/samples/ListTest.java
Patch:
@@ -85,7 +85,7 @@ public void removeAll() {
 
     @Test
     public void removeElement() {
-        fFull.remove(new Integer(3));
+        fFull.remove(Integer.valueOf(3));
         assertTrue(!fFull.contains(3));
     }
 }
\ No newline at end of file

File: src/test/java/org/junit/samples/SimpleTest.java
Patch:
@@ -38,7 +38,7 @@ public void divideByZero() {
     public void testEquals() {
         assertEquals(12, 12);
         assertEquals(12L, 12L);
-        assertEquals(new Long(12), new Long(12));
+        assertEquals(Long.valueOf(12), Long.valueOf(12));
 
         assertEquals("Size", 12, 13);
         assertEquals("Capacity", 12.0, 11.99, 0.0);

File: src/test/java/org/junit/tests/description/SuiteDescriptionTest.java
Patch:
@@ -20,7 +20,7 @@ public void equalsIsCorrect() {
         assertFalse(childless.equals(namedB));
         assertEquals(childless, twoKids);
         assertEquals(twoKids, anotherTwoKids);
-        assertFalse(twoKids.equals(new Integer(5)));
+        assertFalse(twoKids.equals(Integer.valueOf(5)));
     }
 
     @Test

File: src/test/java/org/junit/tests/description/TestDescriptionTest.java
Patch:
@@ -9,7 +9,7 @@
 public class TestDescriptionTest {
     @Test
     public void equalsIsFalseForNonTestDescription() {
-        assertFalse(Description.createTestDescription(getClass(), "a").equals(new Integer(5)));
+        assertFalse(Description.createTestDescription(getClass(), "a").equals(Integer.valueOf(5)));
     }
 
     @Test

File: src/test/java/org/junit/tests/experimental/theories/internal/AllMembersSupplierTest.java
Patch:
@@ -206,4 +206,4 @@ public void dataPointsCollectionShouldBeRecognizedIgnoringStrangeTypes() throws
 
         assertEquals(1, assignments.size());
     }
-}
\ No newline at end of file
+}

File: src/test/java/junit/samples/SimpleTest.java
Patch:
@@ -60,7 +60,7 @@ public void testDivideByZero() {
     public void testEquals() {
         assertEquals(12, 12);
         assertEquals(12L, 12L);
-        assertEquals(new Long(12), new Long(12));
+        assertEquals(Long.valueOf(12), Long.valueOf(12));
 
         assertEquals("Size", 12, 13);
         assertEquals("Capacity", 12.0, 11.99, 0.0);

File: src/test/java/org/junit/runners/parameterized/TestWithParametersTest.java
Patch:
@@ -106,7 +106,7 @@ public void isNotEqualToTestWithDifferentParameters() {
     public void isNotEqualToObjectWithDifferentClass() {
         TestWithParameters test = new TestWithParameters(DUMMY_NAME,
                 DUMMY_TEST_CLASS, DUMMY_PARAMETERS);
-        assertNotEquals(test, new Integer(3));
+        assertNotEquals(test, Integer.valueOf(3));
     }
 
     @Test

File: src/test/java/org/junit/samples/ListTest.java
Patch:
@@ -85,7 +85,7 @@ public void removeAll() {
 
     @Test
     public void removeElement() {
-        fFull.remove(new Integer(3));
+        fFull.remove(Integer.valueOf(3));
         assertTrue(!fFull.contains(3));
     }
 }
\ No newline at end of file

File: src/test/java/org/junit/samples/SimpleTest.java
Patch:
@@ -38,7 +38,7 @@ public void divideByZero() {
     public void testEquals() {
         assertEquals(12, 12);
         assertEquals(12L, 12L);
-        assertEquals(new Long(12), new Long(12));
+        assertEquals(Long.valueOf(12), Long.valueOf(12));
 
         assertEquals("Size", 12, 13);
         assertEquals("Capacity", 12.0, 11.99, 0.0);

File: src/test/java/org/junit/tests/description/SuiteDescriptionTest.java
Patch:
@@ -20,7 +20,7 @@ public void equalsIsCorrect() {
         assertFalse(childless.equals(namedB));
         assertEquals(childless, twoKids);
         assertEquals(twoKids, anotherTwoKids);
-        assertFalse(twoKids.equals(new Integer(5)));
+        assertFalse(twoKids.equals(Integer.valueOf(5)));
     }
 
     @Test

File: src/test/java/org/junit/tests/description/TestDescriptionTest.java
Patch:
@@ -9,7 +9,7 @@
 public class TestDescriptionTest {
     @Test
     public void equalsIsFalseForNonTestDescription() {
-        assertFalse(Description.createTestDescription(getClass(), "a").equals(new Integer(5)));
+        assertFalse(Description.createTestDescription(getClass(), "a").equals(Integer.valueOf(5)));
     }
 
     @Test

File: src/test/java/org/junit/tests/experimental/theories/internal/AllMembersSupplierTest.java
Patch:
@@ -206,4 +206,4 @@ public void dataPointsCollectionShouldBeRecognizedIgnoringStrangeTypes() throws
 
         assertEquals(1, assignments.size());
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/junit/tests/experimental/theories/runner/WithParameterSupplier.java
Patch:
@@ -159,7 +159,7 @@ public void theory(@ParametersSuppliedBy(SupplierWithTestClassConstructor.class)
     
     @Test
     public void shouldAcceptSuppliersWithTestClassConstructor() throws Exception {
-        new Theories(TestClassUsingSupplierWithTestClassConstructor.class);
+        Theories unused = new Theories(TestClassUsingSupplierWithTestClassConstructor.class);
     }
 
 }

File: src/test/java/org/junit/tests/experimental/theories/runner/WithParameterSupplier.java
Patch:
@@ -159,7 +159,7 @@ public void theory(@ParametersSuppliedBy(SupplierWithTestClassConstructor.class)
     
     @Test
     public void shouldAcceptSuppliersWithTestClassConstructor() throws Exception {
-        new Theories(TestClassUsingSupplierWithTestClassConstructor.class);
+        Theories unused = new Theories(TestClassUsingSupplierWithTestClassConstructor.class);
     }
 
 }

File: src/test/java/junit/tests/framework/AssertTest.java
Patch:
@@ -82,15 +82,15 @@ public void testAssertStringNotEqualsNull() {
             assertEquals("foo", null);
             fail();
         } catch (ComparisonFailure e) {
-            e.getMessage(); // why no assertion?
+            assertNotNull(e.getMessage());
         }
     }
 
     public void testAssertNullNotEqualsNull() {
         try {
             assertEquals(null, new Object());
         } catch (AssertionFailedError e) {
-            e.getMessage(); // why no assertion?
+            assertNotNull(e.getMessage());
             return;
         }
         fail();
@@ -168,4 +168,4 @@ public void testAssertNotSameFailsNull() {
         }
         fail();
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/junit/runner/Result.java
Patch:
@@ -188,7 +188,7 @@ public SerializedForm(Result result) {
         }
 
         @SuppressWarnings("unchecked")
-        private SerializedForm(ObjectInputStream.GetField fields) throws IOException {
+        private SerializedForm(ObjectInputStream.GetField fields) throws IOException, ClassNotFoundException {
             fCount = (AtomicInteger) fields.get("fCount", null);
             fIgnoreCount = (AtomicInteger) fields.get("fIgnoreCount", null);
             assumptionFailureCount = (AtomicInteger) fields.get("assumptionFailureCount", null);

File: src/main/java/org/junit/runner/Result.java
Patch:
@@ -188,7 +188,7 @@ public SerializedForm(Result result) {
         }
 
         @SuppressWarnings("unchecked")
-        private SerializedForm(ObjectInputStream.GetField fields) throws IOException {
+        private SerializedForm(ObjectInputStream.GetField fields) throws IOException, ClassNotFoundException {
             fCount = (AtomicInteger) fields.get("fCount", null);
             fIgnoreCount = (AtomicInteger) fields.get("fIgnoreCount", null);
             assumptionFailureCount = (AtomicInteger) fields.get("assumptionFailureCount", null);

File: src/main/java/org/junit/runners/model/FrameworkMember.java
Patch:
@@ -12,6 +12,7 @@ public abstract class FrameworkMember<T extends FrameworkMember<T>> implements
         Annotatable {
     abstract boolean isShadowedBy(T otherMember);
 
+    @SuppressWarnings("unchecked")
     T handlePossibleBridgeMethod(List<T> members) {
         for (int i = members.size() - 1; i >=0; i--) {
             T otherMember = members.get(i);

File: src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java
Patch:
@@ -106,7 +106,7 @@ public Builder withLookingForStuckThread(boolean enable) {
          * Builds a {@link FailOnTimeout} instance using the values in this builder,
          * wrapping the given statement.
          *
-         * @param statement
+         * @param statement statement to build
          */
         public FailOnTimeout build(Statement statement) {
             if (statement == null) {

File: src/main/java/org/junit/runner/JUnitCore.java
Patch:
@@ -63,7 +63,7 @@ public static Result runClasses(Computer computer, Class<?>... classes) {
     }
 
     /**
-     * @param system
+     * @param system system to run with
      * @param args from main()
      */
     Result runMain(JUnitSystem system, String... args) {

File: src/main/java/org/junit/internal/Classes.java
Patch:
@@ -21,7 +21,6 @@ public Classes() {
      * {@link Classes}.
      *
      * @param className Name of the class.
-     * @throws ClassNotFoundException
      */
     public static Class<?> getClass(String className) throws ClassNotFoundException {
         return getClass(className, Classes.class);
@@ -34,7 +33,6 @@ public static Class<?> getClass(String className) throws ClassNotFoundException
      *
      * @param className Name of the class.
      * @param callingClass Class that is requesting a the class
-     * @throws ClassNotFoundException
      * @since 4.13
      */
     public static Class<?> getClass(String className, Class<?> callingClass) throws ClassNotFoundException {

File: src/main/java/org/junit/runner/FilterFactories.java
Patch:
@@ -16,7 +16,6 @@ class FilterFactories {
      *
      * @param request the request that will be filtered
      * @param filterSpec the filter specification
-     * @throws org.junit.runner.FilterFactory.FilterNotCreatedException
      */
     public static Filter createFilterFromFilterSpec(Request request, String filterSpec)
             throws FilterFactory.FilterNotCreatedException {

File: src/main/java/org/junit/runner/notification/SynchronizedRunListener.java
Patch:
@@ -64,7 +64,6 @@ public void testSuiteStarted(Description description) throws Exception {
      * <p/>
      * Synchronized decorator for {@link RunListener#testSuiteFinished(Description)}.
      * @param description the description of the test suite that just ran.
-     * @throws Exception
      * @since 4.13
      */
     @Override

File: src/test/java/junit/tests/framework/AssertTest.java
Patch:
@@ -82,15 +82,15 @@ public void testAssertStringNotEqualsNull() {
             assertEquals("foo", null);
             fail();
         } catch (ComparisonFailure e) {
-            e.getMessage(); // why no assertion?
+            String unused = e.getMessage(); // why no assertion?
         }
     }
 
     public void testAssertNullNotEqualsNull() {
         try {
             assertEquals(null, new Object());
         } catch (AssertionFailedError e) {
-            e.getMessage(); // why no assertion?
+            String unused = e.getMessage(); // why no assertion?
             return;
         }
         fail();
@@ -168,4 +168,4 @@ public void testAssertNotSameFailsNull() {
         }
         fail();
     }
-}
\ No newline at end of file
+}

File: src/main/java/junit/framework/Assert.java
Patch:
@@ -117,7 +117,7 @@ static public void assertEquals(String message, double expected, double actual,
             return;
         }
         if (!(Math.abs(expected - actual) <= delta)) {
-            failNotEquals(message, new Double(expected), new Double(actual));
+            failNotEquals(message, Double.valueOf(expected), Double.valueOf(actual));
         }
     }
 
@@ -139,7 +139,7 @@ static public void assertEquals(String message, float expected, float actual, fl
             return;
         }
         if (!(Math.abs(expected - actual) <= delta)) {
-            failNotEquals(message, new Float(expected), new Float(actual));
+            failNotEquals(message, Float.valueOf(expected), Float.valueOf(actual));
         }
     }
 

File: src/main/java/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.13-SNAPSHOT";
+		return "4.14-SNAPSHOT";
 	}
 	
 	public static void main(String[] args) {

File: src/main/java/org/junit/runner/OrderWith.java
Patch:
@@ -7,6 +7,7 @@
 import java.lang.annotation.Target;
 
 import org.junit.runner.manipulation.Ordering;
+import org.junit.validator.ValidateWith;
 
 /**
  * When a test class is annotated with <code>&#064;OrderWith</code> or extends a class annotated
@@ -18,6 +19,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
 @Inherited
+@ValidateWith(OrderWithValidator.class)
 public @interface OrderWith {
     /**
      * Gets a class that extends {@link Ordering}. The class must have a public no-arg constructor.

File: src/test/java/org/junit/runner/AllRunnerTests.java
Patch:
@@ -10,6 +10,7 @@
         AllNotificationTests.class,
         FilterFactoriesTest.class,
         FilterOptionIntegrationTest.class,
+        OrderWithValidatorTest.class,
         JUnitCommandLineParseResultTest.class,
         JUnitCoreTest.class, RequestTest.class
 })

File: src/main/java/org/junit/validator/ValidateWith.java
Patch:
@@ -1,8 +1,10 @@
 package org.junit.validator;
 
+import java.lang.annotation.ElementType;
 import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
  * Allows for an {@link AnnotationValidator} to be attached to an annotation.
@@ -13,6 +15,7 @@
  * @since 4.12
  */
 @Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.ANNOTATION_TYPE)
 @Inherited
 public @interface ValidateWith {
     Class<? extends AnnotationValidator> value();

File: src/main/java/org/junit/Assume.java
Patch:
@@ -54,7 +54,7 @@ public static void assumeTrue(boolean b) {
      * The inverse of {@link #assumeTrue(boolean)}.
      */
     public static void assumeFalse(boolean b) {
-        assumeTrue(!b);
+        assumeThat(b, is(false));
     }
 
     /**

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -459,7 +459,7 @@ private long getTimeout(Test annotation) {
     private static class RuleCollector<T> implements MemberValueConsumer<T> {
         final List<T> result = new ArrayList<T>();
 
-        public void accept(FrameworkMember member, T value) {
+        public void accept(FrameworkMember<?> member, T value) {
             Rule rule = member.getAnnotation(Rule.class);
             if (rule != null) {
                 RuleContainer container = CURRENT_RULE_CONTAINER.get();

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -550,7 +550,7 @@ public void setScheduler(RunnerScheduler scheduler) {
     private static class ClassRuleCollector implements MemberValueConsumer<TestRule> {
         final List<RuleContainer.RuleEntry> entries = new ArrayList<RuleContainer.RuleEntry>();
 
-        public void accept(FrameworkMember member, TestRule value) {
+        public void accept(FrameworkMember<?> member, TestRule value) {
             ClassRule rule = member.getAnnotation(ClassRule.class);
             entries.add(new RuleContainer.RuleEntry(value, RuleContainer.RuleEntry.TYPE_TEST_RULE,
                     rule != null ? rule.order() : null));

File: src/main/java/org/junit/runners/model/MemberValueConsumer.java
Patch:
@@ -14,5 +14,5 @@ public interface MemberValueConsumer<T> {
      * @param member declaring member ({@link FrameworkMethod} or {@link FrameworkField})
      * @param value the value of the next member
      */
-    void accept(FrameworkMember member, T value);
+    void accept(FrameworkMember<?> member, T value);
 }

File: src/main/java/org/junit/runners/model/TestClass.java
Patch:
@@ -228,7 +228,7 @@ public <T> List<T> getAnnotatedFieldValues(Object test,
         final List<T> results = new ArrayList<T>();
         collectAnnotatedFieldValues(test, annotationClass, valueClass,
                 new MemberValueConsumer<T>() {
-                    public void accept(FrameworkMember member, T value) {
+                    public void accept(FrameworkMember<?> member, T value) {
                         results.add(value);
                     }
                 });
@@ -262,7 +262,7 @@ public <T> List<T> getAnnotatedMethodValues(Object test,
         final List<T> results = new ArrayList<T>();
         collectAnnotatedMethodValues(test, annotationClass, valueClass,
                 new MemberValueConsumer<T>() {
-                    public void accept(FrameworkMember member, T value) {
+                    public void accept(FrameworkMember<?> member, T value) {
                         results.add(value);
                     }
                 });

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -319,6 +319,7 @@ protected Object runReflectiveCall() throws Throwable {
         statement = withBefores(method, test, statement);
         statement = withAfters(method, test, statement);
         statement = withRules(method, test, statement);
+        statement = withInterruptIsolation(statement);
         return statement;
     }
 

File: src/test/java/org/junit/tests/running/classes/AllClassesTests.java
Patch:
@@ -17,7 +17,8 @@
         ParentRunnerClassLoaderTest.class,
         RunWithTest.class,
         SuiteTest.class,
-        UseSuiteAsASuperclassTest.class
+        UseSuiteAsASuperclassTest.class,
+        ThreadsTest.class
 })
 public class AllClassesTests {
 }

File: src/main/java/org/junit/runners/model/MemberValueConsumer.java
Patch:
@@ -11,7 +11,7 @@ public interface MemberValueConsumer<T> {
     /**
      * Receives the next value and its declaring member.
      *
-     * @param member declaring member ({@link FrameworkMethod or {@link FrameworkField}}
+     * @param member declaring member ({@link FrameworkMethod} or {@link FrameworkField})
      * @param value the value of the next member
      */
     void accept(FrameworkMember member, T value);

File: src/test/java/org/junit/rules/TemporaryFolderUsageTest.java
Patch:
@@ -111,7 +111,7 @@ public void newFolderWithPathStartingWithFileSeparatorThrowsIOException()
     }
     
     @Test
-    public void newFolderWithPathContainingFileSeparaterCreatesDirectories()
+    public void newFolderWithPathContainingFileSeparatorCreatesDirectories()
             throws IOException {
         tempFolder.create();
         tempFolder.newFolder("temp1" + File.separator + "temp2");

File: src/main/java/org/junit/rules/DisableOnDebug.java
Patch:
@@ -103,9 +103,7 @@ public Statement apply(Statement base, Description description) {
      */
     private static boolean isDebugging(List<String> arguments) {
         for (final String argument : arguments) {
-            if ("-Xdebug".equals(argument)) {
-                return true;
-            } else if (argument.startsWith("-agentlib:jdwp")) {
+            if ("-Xdebug".equals(argument) || argument.startsWith("-agentlib:jdwp")) {
                 return true;
             }
         }

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -65,7 +65,7 @@
  */
 public abstract class ParentRunner<T> extends Runner implements Filterable,
         Orderable {
-    private static final List<TestClassValidator> VALIDATORS = Arrays.<TestClassValidator>asList(
+    private static final List<TestClassValidator> VALIDATORS = Collections.<TestClassValidator>singletonList(
             new AnnotationsValidator());
 
     private final Lock childrenLock = new ReentrantLock();

File: src/test/java/junit/samples/ListTest.java
Patch:
@@ -61,7 +61,7 @@ public void testRemoveAll() {
     }
 
     public void testRemoveElement() {
-        fullList.remove(3);
+        fullList.remove(Integer.valueOf(3));
         assertFalse(fullList.contains(3));
     }
 }
\ No newline at end of file

File: src/test/java/org/junit/rules/ErrorCollectorTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.junit.rules;
 
 import org.hamcrest.Matcher;
+import org.hamcrest.Matchers;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.function.ThrowingRunnable;
@@ -45,12 +46,12 @@ public static Object[][] testsWithEventMatcher() {
                         everyTestRunSuccessful()},
                 {
                     CheckMatcherThatFailsWithoutProvidedReason.class,
-                        hasSingleFailureWithMessage(allOf(
+                        hasSingleFailureWithMessage(Matchers.<String>allOf(
                             containsString("Expected: is <4>"),
                             containsString("but: was <3>")))},
                 {
                     CheckMatcherThatFailsWithProvidedReason.class,
-                        hasSingleFailureWithMessage(allOf(
+                        hasSingleFailureWithMessage(Matchers.<String>allOf(
                             containsString("reason"),
                             containsString("Expected: is <4>"),
                             containsString("but: was <3>")))},

File: src/test/java/org/junit/rules/EventCollector.java
Patch:
@@ -18,7 +18,7 @@ static Matcher<EventCollector> everyTestRunSuccessful() {
         return allOf(hasNoFailure(), hasNoAssumptionFailure());
     }
 
-    private static Matcher<EventCollector> hasNumberOfFailures(
+    static Matcher<EventCollector> hasNumberOfFailures(
             final int numberOfFailures) {
         return new TypeSafeMatcher<EventCollector>() {
             @Override

File: src/test/java/org/junit/rules/EventCollector.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunListener;
 
-class EventCollector extends RunListener {
+public class EventCollector extends RunListener {
     static Matcher<EventCollector> everyTestRunSuccessful() {
         return allOf(hasNoFailure(), hasNoAssumptionFailure());
     }
@@ -73,7 +73,7 @@ static Matcher<EventCollector> hasNoAssumptionFailure() {
         return hasNumberOfAssumptionFailures(0);
     }
 
-    static Matcher<EventCollector> hasSingleFailureWithMessage(String message) {
+    public static Matcher<EventCollector> hasSingleFailureWithMessage(String message) {
         return hasSingleFailureWithMessage(equalTo(message));
     }
 

File: src/test/java/org/junit/rules/AllRulesTests.java
Patch:
@@ -9,6 +9,7 @@
         BlockJUnit4ClassRunnerOverrideTest.class,
         ClassRulesTest.class,
         DisableOnDebugTest.class,
+        ErrorCollectorTest.class,
         ExpectedExceptionTest.class,
         ExternalResourceRuleTest.class,
         MethodRulesTest.class,

File: src/test/java/org/junit/tests/running/classes/SuiteTest.java
Patch:
@@ -1,11 +1,11 @@
 package org.junit.tests.running.classes;
 
-import static org.hamcrest.CoreMatchers.containsString;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining;
+import static org.junit.experimental.results.ResultMatchers.isSuccessful;
 
 import java.util.List;
 
@@ -88,8 +88,8 @@ public void suiteClassDoesNotNeedToBePublic() {
     }
 
     @Test
-    public void nonPublicSuiteClassWithBeforeClassFailsWithoutRunningTests() {
-        assertThat(testResult(NonPublicSuiteWithBeforeClass.class), hasSingleFailureContaining("can not access"));
+    public void nonPublicSuiteClassWithBeforeClassPasses() {
+        assertThat(testResult(NonPublicSuiteWithBeforeClass.class), isSuccessful());
     }
 
     @Test

File: src/test/java/org/junit/tests/running/methods/AnnotationTest.java
Patch:
@@ -403,7 +403,7 @@ public void testErrorInAfterClass() throws Exception {
         assertEquals(1, result.getFailureCount());
     }
 
-    static public class SuperInheritance {
+    static class SuperInheritance {
         @BeforeClass
         static public void beforeClassSuper() {
             log += "Before class super ";

File: src/main/java/org/junit/runners/parameterized/BlockJUnit4ClassRunnerWithParameters.java
Patch:
@@ -32,7 +32,7 @@ private enum InjectionType {
 
     public BlockJUnit4ClassRunnerWithParameters(TestWithParameters test)
             throws InitializationError {
-        super(test.getTestClass().getJavaClass());
+        super(test.getTestClass());
         parameters = test.getParameters().toArray(
                 new Object[test.getParameters().size()]);
         name = test.getName();

File: src/test/java/org/junit/tests/experimental/AssumptionTest.java
Patch:
@@ -270,7 +270,7 @@ public void failedAssumptionsWithMessage() {
         final List<Failure> failures =
                 runAndGetAssumptionFailures(HasFailingAssumptionWithMessage.class);
 
-        assertEquals(failures.size(), 1);
+        assertEquals(1, failures.size());
         assertTrue(failures.get(0).getMessage().contains(message));
     }
 

File: src/main/java/org/junit/Assert.java
Patch:
@@ -842,7 +842,7 @@ static String format(String message, Object expected, Object actual) {
         }
         String expectedString = String.valueOf(expected);
         String actualString = String.valueOf(actual);
-        if (expectedString.equals(actualString)) {
+        if (equalsRegardingNull(expectedString, actualString)) {
             return formatted + "expected: "
                     + formatClassAndValue(expected, expectedString)
                     + " but was: " + formatClassAndValue(actual, actualString);

File: src/test/java/org/junit/rules/TemporaryFolderUsageTest.java
Patch:
@@ -106,7 +106,7 @@ public void newFolderWithPathStartingWithFileSeparatorThrowsIOException()
         }
         tempFolder.create();
         thrown.expect(IOException.class);
-        thrown.expectMessage("folder path '/temp1' is not a relative path");
+        thrown.expectMessage("folder path '" + fileAtRoot + "' is not a relative path");
         tempFolder.newFolder(fileAtRoot);
     }
     

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -265,8 +265,8 @@ protected String testName(FrameworkMethod method) {
      * <ul>
      * <li>Invoke {@code method} on the result of {@link #createTest(org.junit.runners.model.FrameworkMethod)}, and
      * throw any exceptions thrown by either operation.
-     * <li>HOWEVER, if {@code method}'s {@code @Test} annotation has the {@code
-     * expecting} attribute, return normally only if the previous step threw an
+     * <li>HOWEVER, if {@code method}'s {@code @Test} annotation has the {@link Test#expected()}
+     * attribute, return normally only if the previous step threw an
      * exception of the correct type, and throw an exception otherwise.
      * <li>HOWEVER, if {@code method}'s {@code @Test} annotation has the {@code
      * timeout} attribute, throw an exception if the previous step takes more
@@ -323,7 +323,7 @@ protected Statement methodInvoker(FrameworkMethod method, Object test) {
 
     /**
      * Returns a {@link Statement}: if {@code method}'s {@code @Test} annotation
-     * has the {@code expecting} attribute, return normally only if {@code next}
+     * has the {@link Test#expected()} attribute, return normally only if {@code next}
      * throws an exception of the correct type, and throw an exception
      * otherwise.
      */

File: src/main/java/org/junit/internal/runners/statements/ExpectException.java
Patch:
@@ -19,7 +19,9 @@ public void evaluate() throws Exception {
             next.evaluate();
             complete = true;
         } catch (AssumptionViolatedException e) {
-            throw e;
+            if (!expected.isAssignableFrom(e.getClass())) {
+                throw e;
+            }
         } catch (Throwable e) {
             if (!expected.isAssignableFrom(e.getClass())) {
                 String message = "Unexpected exception, expected<"

File: src/test/java/org/junit/internal/AllInternalTests.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.internal.matchers.StacktracePrintingMatcherTest;
 import org.junit.internal.matchers.ThrowableCauseMatcherTest;
 import org.junit.internal.runners.ErrorReportingRunnerTest;
+import org.junit.internal.runners.statements.ExpectExceptionTest;
 import org.junit.internal.runners.statements.FailOnTimeoutTest;
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
@@ -13,6 +14,7 @@
 @SuiteClasses({
         AnnotatedBuilderTest.class,
         ErrorReportingRunnerTest.class,
+        ExpectExceptionTest.class,
         FailOnTimeoutTest.class,
         MethodSorterTest.class,
         StacktracePrintingMatcherTest.class,

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -40,7 +40,6 @@
 import org.junit.runners.model.Statement;
 import org.junit.runners.model.TestClass;
 import org.junit.validator.AnnotationsValidator;
-import org.junit.validator.PublicClassValidator;
 import org.junit.validator.TestClassValidator;
 
 /**
@@ -58,8 +57,8 @@
  */
 public abstract class ParentRunner<T> extends Runner implements Filterable,
         Sortable {
-    private static final List<TestClassValidator> VALIDATORS = Arrays.asList(
-            new AnnotationsValidator(), new PublicClassValidator());
+    private static final List<TestClassValidator> VALIDATORS = Arrays.<TestClassValidator>asList(
+            new AnnotationsValidator());
 
     private final Object childrenLock = new Object();
     private final TestClass testClass;

File: src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.junit.tests.running.classes;
 
 import static org.hamcrest.CoreMatchers.containsString;
-import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
@@ -137,6 +136,9 @@ public void failWithHelpfulMessageForNonStaticClassRule() {
     static class NonPublicTestClass {
         public NonPublicTestClass() {
         }
+
+        @Test
+        public void alwaysPasses() {}
     }
 
     @Test

File: src/test/java/org/junit/runners/model/TestClassTest.java
Patch:
@@ -47,9 +47,9 @@ public static class SubclassWithField extends SuperclassWithField {
     }
 
     @Test
-    public void fieldsOnSubclassesShadowSuperclasses() {
+    public void fieldsOnSubclassesDoNotShadowSuperclasses() {
         assertThat(new TestClass(SubclassWithField.class).getAnnotatedFields(
-                Rule.class).size(), is(1));
+                Rule.class).size(), is(2));
     }
 
     public static class OuterClass {

File: src/main/java/org/junit/runners/model/FrameworkField.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
+import java.util.List;
 
 import org.junit.runners.BlockJUnit4ClassRunner;
 

File: src/main/java/org/junit/runners/model/FrameworkMethod.java
Patch:
@@ -134,6 +134,9 @@ public void validateNoTypeParametersOnArgs(List<Throwable> errors) {
 
     @Override
     public boolean isShadowedBy(FrameworkMethod other) {
+        if (isStatic()) {
+            return false;
+        }
         if (!other.getName().equals(getName())) {
             return false;
         }

File: src/test/java/org/junit/runners/model/TestClassTest.java
Patch:
@@ -3,9 +3,9 @@
 import static org.hamcrest.CoreMatchers.hasItem;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.nullValue;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 
 import java.lang.annotation.Annotation;

File: src/main/java/org/junit/internal/TextListener.java
Patch:
@@ -74,7 +74,7 @@ protected void printFailures(Result result) {
 
     protected void printFailure(Failure each, String prefix) {
         getWriter().println(prefix + ") " + each.getTestHeader());
-        getWriter().print(each.getTrace());
+        getWriter().print(each.getTrimmedTrace());
     }
 
     protected void printFooter(Result result) {

File: src/test/java/org/junit/internal/AllInternalTests.java
Patch:
@@ -16,6 +16,7 @@
         FailOnTimeoutTest.class,
         MethodSorterTest.class,
         StacktracePrintingMatcherTest.class,
+        StackTracesTest.class,
         ThrowableCauseMatcherTest.class,
         ArrayComparisonFailureTest.class
 })

File: src/main/java/org/junit/rules/ErrorCollector.java
Patch:
@@ -46,6 +46,9 @@ protected void verify() throws Throwable {
      * Adds a Throwable to the table.  Execution continues, but the test will fail at the end.
      */
     public void addError(Throwable error) {
+        if (error == null) {
+            throw new NullPointerException("Error cannot be null");
+        }
         if (error instanceof AssumptionViolatedException) {
             AssertionError e = new AssertionError(error.getMessage());
             e.initCause(error);

File: src/main/java/org/junit/internal/matchers/ThrowableCauseMatcher.java
Patch:
@@ -16,9 +16,9 @@
 public class ThrowableCauseMatcher<T extends Throwable> extends
         TypeSafeMatcher<T> {
 
-    private final Matcher<? extends Throwable> causeMatcher;
+    private final Matcher<?> causeMatcher;
 
-    public ThrowableCauseMatcher(Matcher<? extends Throwable> causeMatcher) {
+    public ThrowableCauseMatcher(Matcher<?> causeMatcher) {
         this.causeMatcher = causeMatcher;
     }
 
@@ -46,7 +46,7 @@ protected void describeMismatchSafely(T item, Description description) {
      * @param <T> type of the outer exception
      */
     @Factory
-    public static <T extends Throwable> Matcher<T> hasCause(final Matcher<? extends Throwable> matcher) {
+    public static <T extends Throwable> Matcher<T> hasCause(final Matcher<?> matcher) {
         return new ThrowableCauseMatcher<T>(matcher);
     }
 }
\ No newline at end of file

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -240,7 +240,7 @@ public ExpectedException expectMessage(Matcher<String> matcher) {
      * @deprecated use {@code org.hamcrest.junit.ExpectedException.expectCause()}
      */
     @Deprecated
-    public ExpectedException expectCause(Matcher<? extends Throwable> expectedCause) {
+    public ExpectedException expectCause(Matcher<?> expectedCause) {
         expect(hasCause(expectedCause));
         return this;
     }

File: src/main/java/org/junit/Assert.java
Patch:
@@ -997,7 +997,7 @@ public static <T extends Throwable> T expectThrows(Class<T> expectedThrowable, T
                 return retVal;
             } else {
                 String mismatchMessage = format("unexpected exception type thrown;",
-                        expectedThrowable.getSimpleName(), actualThrown.getClass().getSimpleName());
+                        expectedThrowable.getName(), actualThrown.getClass().getName());
 
                 // The AssertionError(String, Throwable) ctor is only available on JDK7.
                 AssertionError assertionError = new AssertionError(mismatchMessage);

File: src/test/java/org/junit/rules/VerifierRuleTest.java
Patch:
@@ -162,7 +162,7 @@ public void run() throws Throwable {
     public void usedErrorCollectorCheckThrowsClassMismatchShouldFail() {
         PrintableResult testResult = testResult(UsesErrorCollectorCheckThrowsClassMismatch.class);
         assertThat(testResult, hasFailureContaining(
-            "expected:<IllegalArgumentException> but was:<NullPointerException>"));
+            "expected:<java.lang.IllegalArgumentException> but was:<java.lang.NullPointerException>"));
     }
 
     public static class UsesErrorCollectorCheckThrowsNothingThrown {

File: src/test/java/org/junit/tests/assertion/AssertionTest.java
Patch:
@@ -849,7 +849,7 @@ public void expectThrowsSuppliesACoherentErrorMessageUponTypeMismatch() {
         try {
             expectThrows(IOException.class, throwingRunnable(npe));
         } catch (AssertionError error) {
-            assertEquals("unexpected exception type thrown; expected:<IOException> but was:<NullPointerException>",
+            assertEquals("unexpected exception type thrown; expected:<java.io.IOException> but was:<java.lang.NullPointerException>",
                     error.getMessage());
             assertSame(npe, error.getCause());
             return;

File: src/main/java/org/junit/Assume.java
Patch:
@@ -76,9 +76,11 @@ public static void assumeFalse(String message, boolean b) {
     }
 
     /**
-     * If called with one or more null elements in <code>objects</code>, the test will halt and be ignored.
+     * If called with a {@code null} array or one or more {@code null} elements in {@code objects},
+     * the test will halt and be ignored.
      */
     public static void assumeNotNull(Object... objects) {
+        assumeThat(objects, notNullValue());
         assumeThat(asList(objects), everyItem(notNullValue()));
     }
 

File: src/test/java/org/junit/runner/AllRunnerTests.java
Patch:
@@ -11,7 +11,7 @@
         FilterFactoriesTest.class,
         FilterOptionIntegrationTest.class,
         JUnitCommandLineParseResultTest.class,
-        JUnitCoreTest.class
+        JUnitCoreTest.class, RequestTest.class
 })
 public class AllRunnerTests {
 }

File: src/main/java/junit/runner/BaseTestRunner.java
Patch:
@@ -235,6 +235,7 @@ private static void readPreferences() {
             setPreferences(new Properties(getPreferences()));
             getPreferences().load(is);
         } catch (IOException ignored) {
+        } catch (SecurityException ignored) {
         } finally {
             try {
                 if (is != null) {

File: src/main/java/org/junit/runner/Request.java
Patch:
@@ -71,7 +71,7 @@ public static Request classWithoutSuiteMethod(Class<?> clazz) {
      */
     public static Request classes(Computer computer, Class<?>... classes) {
         try {
-            AllDefaultPossibilitiesBuilder builder = new AllDefaultPossibilitiesBuilder(true);
+            AllDefaultPossibilitiesBuilder builder = new AllDefaultPossibilitiesBuilder();
             Runner suite = computer.getSuite(builder, classes);
             return runner(suite);
         } catch (InitializationError e) {

File: src/main/java/org/junit/runners/Suite.java
Patch:
@@ -88,7 +88,7 @@ public Suite(RunnerBuilder builder, Class<?>[] classes) throws InitializationErr
      * @param suiteClasses the classes in the suite
      */
     protected Suite(Class<?> klass, Class<?>[] suiteClasses) throws InitializationError {
-        this(new AllDefaultPossibilitiesBuilder(true), klass, suiteClasses);
+        this(new AllDefaultPossibilitiesBuilder(), klass, suiteClasses);
     }
 
     /**

File: src/test/java/org/junit/tests/junit3compatibility/AllJUnit3CompatibilityTests.java
Patch:
@@ -12,6 +12,7 @@
         ForwardCompatibilityTest.class,
         InitializationErrorForwardCompatibilityTest.class,
         JUnit38ClassRunnerTest.class,
+        JUnit4TestAdapterTest.class,
         OldTestClassAdaptingListenerTest.class,
         OldTests.class,
         SuiteMethodTest.class

File: src/main/java/org/junit/experimental/results/ResultMatchers.java
Patch:
@@ -66,9 +66,9 @@ public void describeTo(Description description) {
      * contains {@code string}
      */
     public static Matcher<PrintableResult> hasFailureContaining(final String string) {
-        return new BaseMatcher<PrintableResult>() {
-            public boolean matches(Object item) {
-                return item.toString().contains(string);
+        return new TypeSafeMatcher<PrintableResult>() {
+            public boolean matchesSafely(PrintableResult item) {
+                return item.failureCount() > 0 && item.toString().contains(string);
             }
 
             public void describeTo(Description description) {

File: src/test/java/org/junit/tests/running/classes/AllClassesTests.java
Patch:
@@ -3,6 +3,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
+import org.junit.tests.running.classes.parent.ParentRunnerClassLoaderTest;
 
 @RunWith(Suite.class)
 @SuiteClasses({
@@ -13,6 +14,7 @@
         ParameterizedTestTest.class,
         ParentRunnerFilteringTest.class,
         ParentRunnerTest.class,
+        ParentRunnerClassLoaderTest.class,
         RunWithTest.class,
         SuiteTest.class,
         UseSuiteAsASuperclassTest.class

File: src/test/java/org/junit/internal/AllInternalTests.java
Patch:
@@ -16,7 +16,8 @@
         FailOnTimeoutTest.class,
         MethodSorterTest.class,
         StacktracePrintingMatcherTest.class,
-        ThrowableCauseMatcherTest.class
+        ThrowableCauseMatcherTest.class,
+        ArrayComparisonFailureTest.class
 })
 public class AllInternalTests {
 }

File: src/test/java/org/junit/tests/experimental/theories/runner/UnsuccessfulWithDataPointFields.java
Patch:
@@ -119,7 +119,7 @@ public void numbers(int x) {
     public void dataPointFieldsMustBeStatic() {
         assertThat(
                 testResult(DataPointFieldsMustBeStatic.class),
-                CoreMatchers.both(hasFailureContaining("DataPoint field THREE must be static"))
+                CoreMatchers.<PrintableResult>both(hasFailureContaining("DataPoint field THREE must be static"))
                         .and(hasFailureContaining("DataPoint field FOURS must be static")));
     }
     

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -35,6 +35,7 @@
 import org.junit.runner.notification.StoppedByUserException;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.InitializationError;
+import org.junit.runners.model.InvalidTestClassError;
 import org.junit.runners.model.RunnerScheduler;
 import org.junit.runners.model.Statement;
 import org.junit.runners.model.TestClass;
@@ -418,7 +419,7 @@ private void validate() throws InitializationError {
         List<Throwable> errors = new ArrayList<Throwable>();
         collectInitializationErrors(errors);
         if (!errors.isEmpty()) {
-            throw new InitializationError(errors);
+            throw new InvalidTestClassError(testClass.getJavaClass(), errors);
         }
     }
 

File: src/test/java/org/junit/runners/model/AllModelTests.java
Patch:
@@ -8,6 +8,7 @@
 @SuiteClasses({
         FrameworkFieldTest.class,
         FrameworkMethodTest.class,
+        InvalidTestClassErrorTest.class,
         TestClassTest.class
 })
 public class AllModelTests {

File: src/test/java/org/junit/tests/experimental/theories/runner/WithUnresolvedGenericTypeVariablesOnTheoryParms.java
Patch:
@@ -159,7 +159,7 @@ public void forItem(T item) {
     @Test
     public void whereTypeVariablesAbound() {
         PrintableResult result = testResult(TypeVariablesAbound.class);
-        assertThat(result, failureCountIs(7));
+        assertThat(result, failureCountIs(1));
         assertThat(result, hasFailureContaining("unresolved type variable A"));
         assertThat(result, hasFailureContaining("unresolved type variable B"));
         assertThat(result, hasFailureContaining("unresolved type variable C"));

File: src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.junit.tests.running.classes;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
@@ -149,9 +150,9 @@ private void assertClassHasFailureMessage(Class<?> klass, String message) {
         JUnitCore junitCore = new JUnitCore();
         Request request = Request.aClass(klass);
         Result result = junitCore.run(request);
-        assertThat(result.getFailureCount(), is(2)); //the second failure is no runnable methods
+        assertThat(result.getFailureCount(), is(1));
         assertThat(result.getFailures().get(0).getMessage(),
-                is(equalTo(message)));
+                containsString(message));
     }
 
     public static class AssertionErrorAtParentLevelTest {

File: src/test/java/org/junit/tests/validation/BadlyFormedClassesTest.java
Patch:
@@ -1,6 +1,8 @@
 package org.junit.tests.validation;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -54,7 +56,7 @@ public void constructorException() {
 
     @Test
     public void noRunnableMethods() {
-        assertEquals("No runnable methods", exceptionMessageFrom(NoTests.class));
+        assertThat(exceptionMessageFrom(NoTests.class), containsString("No runnable methods"));
     }
 
     @Test

File: src/test/java/org/junit/tests/validation/ValidationTest.java
Patch:
@@ -1,5 +1,7 @@
 package org.junit.tests.validation;
 
+import static org.hamcrest.CoreMatchers.containsString;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertEquals;
 
 import org.junit.BeforeClass;
@@ -35,6 +37,6 @@ public void hereBecauseEveryTestClassNeedsATest() {
     @Test
     public void nonStaticBeforeClass() {
         Result result = JUnitCore.runClasses(NonStaticBeforeClass.class);
-        assertEquals("Method before() should be static", result.getFailures().get(0).getMessage());
+        assertThat(result.getFailures().get(0).getMessage(), containsString("Method before() should be static"));
     }
 }

File: src/test/java/org/junit/tests/assertion/AssertionTest.java
Patch:
@@ -18,9 +18,9 @@
 import java.math.BigDecimal;
 
 import org.junit.Assert;
-import org.junit.Assert.ThrowingRunnable;
 import org.junit.ComparisonFailure;
 import org.junit.Test;
+import org.junit.function.ThrowingRunnable;
 import org.junit.internal.ArrayComparisonFailure;
 
 /**

File: src/main/java/org/junit/rules/TemporaryFolder.java
Patch:
@@ -224,10 +224,10 @@ private File createTemporaryFolderIn(File parentFolder) throws IOException {
             // Use createTempFile to get a suitable folder name.
             String suffix = ".tmp";
             File tmpFile = File.createTempFile(TMP_PREFIX, suffix, parentFolder);
-            String tmpName = tmpFile.getName();
-            // Discard suffix of tmpName.
+            String tmpName = tmpFile.toString();
+            // Discard .tmp suffix of tmpName.
             String folderName = tmpName.substring(0, tmpName.length() - suffix.length());
-            createdFolder = new File(parentFolder, folderName);
+            createdFolder = new File(folderName);
             if (createdFolder.mkdir()) {
                 tmpFile.delete();
                 return createdFolder;

File: src/test/java/org/junit/tests/assertion/MultipleFailureExceptionTest.java
Patch:
@@ -14,6 +14,7 @@
 import org.junit.Test;
 import org.junit.runners.model.MultipleFailureException;
 
+
 /**
  * Tests for {@link org.junit.runners.model.MultipleFailureException}
  *
@@ -37,7 +38,7 @@ public void assertEmptyRethrowsSingleRuntimeException() throws Exception {
             assertSame(e, exception);
         }
     }
-    
+
     @Test
     public void assertEmptyRethrowsSingleError() throws Exception {
         Throwable exception= new AnnotationFormatError("changeo");
@@ -51,7 +52,7 @@ public void assertEmptyRethrowsSingleError() throws Exception {
     }
 
     @Test
-    public void assertEmptyThrowsMutipleFailureExceptionForManyThrowables() throws Exception {
+    public void assertEmptyThrowsMultipleFailureExceptionForManyThrowables() throws Exception {
         List<Throwable> errors = new ArrayList<Throwable>();
         errors.add(new ExpectedException("basil"));
         errors.add(new RuntimeException("garlic"));

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -219,7 +219,7 @@ protected Statement withBeforeClasses(Statement statement) {
 
     /**
      * Returns a {@link Statement}: run all non-overridden {@code @AfterClass} methods on this class
-     * and superclasses before executing {@code statement}; all AfterClass methods are
+     * and superclasses after executing {@code statement}; all AfterClass methods are
      * always executed: exceptions thrown by previous steps are combined, if
      * necessary, with exceptions from AfterClass methods into a
      * {@link org.junit.runners.model.MultipleFailureException}.

File: src/test/java/org/junit/internal/AllInternalTests.java
Patch:
@@ -11,6 +11,7 @@
 
 @RunWith(Suite.class)
 @SuiteClasses({
+        AnnotatedBuilderTest.class,
         ErrorReportingRunnerTest.class,
         FailOnTimeoutTest.class,
         MethodSorterTest.class,

File: src/test/java/org/junit/rules/AllRulesTests.java
Patch:
@@ -21,6 +21,8 @@
         TemporaryFolderUsageTest.class,
         TestRuleTest.class,
         TestWatcherTest.class,
+        TestWatchmanTest.class,
+        // todo TestWatchmanTest.class, - doesn't work and wasn't being run before.
         TimeoutRuleTest.class,
         VerifierRuleTest.class
 })

File: src/test/java/org/junit/samples/AllSamplesTests.java
Patch:
@@ -7,6 +7,7 @@
 
 @RunWith(Suite.class)
 @SuiteClasses({
+        ListTest.class,
         MoneyTest.class
 })
 public class AllSamplesTests {

File: src/test/java/org/junit/samples/SimpleTest.java
Patch:
@@ -8,6 +8,8 @@
 
 /**
  * Some simple tests.
+ *
+ * <p>This test is expected to fail.
  */
 public class SimpleTest {
     protected int fValue1;

File: src/test/java/org/junit/tests/experimental/theories/AllTheoriesTests.java
Patch:
@@ -11,7 +11,9 @@
         AllTheoriesInternalTests.class,
         AllTheoriesRunnerTests.class,
         ParameterSignatureTest.class,
-        TestedOnSupplierTest.class
+        TestedOnSupplierTest.class,
+        AssumingInTheoriesTest.class,
+        PotentialAssignmentTest.class
 })
 public class AllTheoriesTests {
 }

File: src/test/java/org/junit/validator/AllValidatorTests.java
Patch:
@@ -6,6 +6,8 @@
 
 @RunWith(Suite.class)
 @SuiteClasses({
+        AnnotationsValidatorTest.class,
+        AnnotationValidatorFactoryTest.class,
         PublicClassValidatorTest.class
 })
 public class AllValidatorTests {

File: src/main/java/org/junit/rules/TemporaryFolder.java
Patch:
@@ -108,7 +108,7 @@ public Builder parentFolder(File parentFolder) {
         /**
          * Setting this flag assures that no resources are left undeleted. Failure
          * to fulfill the assurance results in failure of tests with an
-         * {@link IllegalStateException}.
+         * {@link AssertionError}.
          *
          * @return this
          */
@@ -237,7 +237,7 @@ public File getRoot() {
      * Delete all files and folders under the temporary folder. Usually not
      * called directly, since it is automatically applied by the {@link Rule}.
      *
-     * @throws IllegalStateException if unable to clean up resources
+     * @throws AssertionError if unable to clean up resources
      * and deletion of resources is assured.
      */
     public void delete() {

File: src/main/java/org/junit/rules/TemporaryFolder.java
Patch:
@@ -108,7 +108,7 @@ public Builder parentFolder(File parentFolder) {
         /**
          * Setting this flag assures that no resources are left undeleted. Failure
          * to fulfill the assurance results in failure of tests with an
-         * {@link IllegalStateException}.
+         * {@link AssertionError}.
          *
          * @return this
          */
@@ -237,7 +237,7 @@ public File getRoot() {
      * Delete all files and folders under the temporary folder. Usually not
      * called directly, since it is automatically applied by the {@link Rule}.
      *
-     * @throws IllegalStateException if unable to clean up resources
+     * @throws AssertionError if unable to clean up resources
      * and deletion of resources is assured.
      */
     public void delete() {

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -20,7 +20,7 @@
  *
  * <pre> public class SimpleExpectedExceptionTest {
  *     &#064;Rule
- *     public ExpectedException thrown= ExpectedException.none();
+ *     public ExpectedException thrown = ExpectedException.none();
  *
  *     &#064;Test
  *     public void throwsNothing() {
@@ -43,7 +43,7 @@
  *
  * <p>
  * Instead of specifying the exception's type you can characterize the
- * expected exception based on other criterias, too:
+ * expected exception based on other criteria, too:
  *
  * <ul>
  *   <li>The exception's message contains a specific text: {@link #expectMessage(String)}</li>

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -20,7 +20,7 @@
  *
  * <pre> public class SimpleExpectedExceptionTest {
  *     &#064;Rule
- *     public ExpectedException thrown= ExpectedException.none();
+ *     public ExpectedException thrown = ExpectedException.none();
  *
  *     &#064;Test
  *     public void throwsNothing() {
@@ -43,7 +43,7 @@
  *
  * <p>
  * Instead of specifying the exception's type you can characterize the
- * expected exception based on other criterias, too:
+ * expected exception based on other criteria, too:
  *
  * <ul>
  *   <li>The exception's message contains a specific text: {@link #expectMessage(String)}</li>

File: src/main/java/org/junit/rules/RuleChain.java
Patch:
@@ -72,7 +72,7 @@ private RuleChain(List<TestRule> rules) {
     }
 
     /**
-     * Create a new {@code RuleChain}, which encloses the {@code nextRule} with
+     * Create a new {@code RuleChain}, which encloses the given {@link TestRule} with
      * the rules of the current {@code RuleChain}.
      *
      * @param enclosedRule the rule to enclose.

File: src/main/java/org/junit/experimental/theories/Theories.java
Patch:
@@ -51,7 +51,7 @@
  *      }
  * }
  * </pre>
- * This makes it clear that the user's filename should be included in the config file name,
+ * This makes it clear that the username should be included in the config file name,
  * only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain
  * a slash. <code>UserTest</code> will attempt to run <code>filenameIncludesUsername</code> on every compatible data
  * point defined in the class. If any of the assumptions fail, the data point is silently ignored. If all of the

File: src/main/java/org/junit/experimental/theories/Theories.java
Patch:
@@ -51,7 +51,7 @@
  *      }
  * }
  * </pre>
- * This makes it clear that the user's filename should be included in the config file name,
+ * This makes it clear that the username should be included in the config file name,
  * only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain
  * a slash. <code>UserTest</code> will attempt to run <code>filenameIncludesUsername</code> on every compatible data
  * point defined in the class. If any of the assumptions fail, the data point is silently ignored. If all of the

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.runner.notification.ConcurrentRunNotifierTest;
 import org.junit.runner.notification.RunNotifierTest;
 import org.junit.runner.notification.SynchronizedRunListenerTest;
+import org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersTest;
 import org.junit.runners.CustomBlockJUnit4ClassRunnerTest;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
@@ -231,6 +232,7 @@
         TypeMatchingBetweenMultiDataPointsMethod.class,
         TheoriesPerformanceTest.class,
         MoneyTest.class,
+        BlockJUnit4ClassRunnerWithParametersTest.class,
         CategoryValidatorTest.class,
         ForwardCompatibilityPrintingTest.class,
         DescriptionTest.class,

File: src/main/java/org/junit/internal/TextListener.java
Patch:
@@ -58,7 +58,7 @@ protected void printHeader(long runTime) {
 
     protected void printFailures(Result result) {
         List<Failure> failures = result.getFailures();
-        if (failures.size() == 0) {
+        if (failures.isEmpty()) {
             return;
         }
         if (failures.size() == 1) {

File: src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java
Patch:
@@ -40,7 +40,7 @@ private static Class<?> findExpectedType(Class<?> fromClass) {
     }
 
     private static boolean isMatchesSafelyMethod(Method method) {
-        return method.getName().equals("matchesSafely")
+        return "matchesSafely".equals(method.getName())
                 && method.getParameterTypes().length == 1
                 && !method.isSynthetic();
     }

File: src/main/java/org/junit/internal/TextListener.java
Patch:
@@ -58,7 +58,7 @@ protected void printHeader(long runTime) {
 
     protected void printFailures(Result result) {
         List<Failure> failures = result.getFailures();
-        if (failures.size() == 0) {
+        if (failures.isEmpty()) {
             return;
         }
         if (failures.size() == 1) {

File: src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java
Patch:
@@ -40,7 +40,7 @@ private static Class<?> findExpectedType(Class<?> fromClass) {
     }
 
     private static boolean isMatchesSafelyMethod(Method method) {
-        return method.getName().equals("matchesSafely")
+        return "matchesSafely".equals(method.getName())
                 && method.getParameterTypes().length == 1
                 && !method.isSynthetic();
     }

File: src/main/java/org/junit/Test.java
Patch:
@@ -66,7 +66,7 @@
 public @interface Test {
 
     /**
-     * Default empty exception
+     * Default empty exception.
      */
     static class None extends Throwable {
         private static final long serialVersionUID = 1L;

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.runner.notification.ConcurrentRunNotifierTest;
 import org.junit.runner.notification.RunNotifierTest;
 import org.junit.runner.notification.SynchronizedRunListenerTest;
+import org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersTest;
 import org.junit.runners.CustomBlockJUnit4ClassRunnerTest;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
@@ -231,6 +232,7 @@
         TypeMatchingBetweenMultiDataPointsMethod.class,
         TheoriesPerformanceTest.class,
         MoneyTest.class,
+        BlockJUnit4ClassRunnerWithParametersTest.class,
         CategoryValidatorTest.class,
         ForwardCompatibilityPrintingTest.class,
         DescriptionTest.class,

File: src/main/java/org/junit/rules/Stopwatch.java
Patch:
@@ -76,7 +76,7 @@
  * @author tibor17
  * @since 4.12
  */
-public abstract class Stopwatch implements TestRule {
+public class Stopwatch implements TestRule {
     private final Clock clock;
     private volatile long startNanos;
     private volatile long endNanos;

File: src/main/java/junit/textui/TestRunner.java
Patch:
@@ -131,7 +131,7 @@ protected void pause(boolean wait) {
         }
     }
 
-    public static void main(String args[]) {
+    public static void main(String[] args) {
         TestRunner aTestRunner = new TestRunner();
         try {
             TestResult r = aTestRunner.start(args);
@@ -149,7 +149,7 @@ public static void main(String args[]) {
      * Starts a test run. Analyzes the command line arguments and runs the given
      * test suite.
      */
-    public TestResult start(String args[]) throws Exception {
+    public TestResult start(String[] args) throws Exception {
         String testCase = "";
         String method = "";
         boolean wait = false;

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.runner.notification.ConcurrentRunNotifierTest;
 import org.junit.runner.notification.RunNotifierTest;
 import org.junit.runner.notification.SynchronizedRunListenerTest;
+import org.junit.runners.CustomBlockJUnit4ClassRunnerTest;
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
 import org.junit.runners.model.FrameworkFieldTest;
@@ -203,6 +204,7 @@
         RuleMemberValidatorTest.class,
         RuleChainTest.class,
         BlockJUnit4ClassRunnerTest.class,
+        CustomBlockJUnit4ClassRunnerTest.class,
         MethodSorterTest.class,
         TestedOnSupplierTest.class,
         StacktracePrintingMatcherTest.class,

File: src/main/java/org/junit/runner/Request.java
Patch:
@@ -75,8 +75,7 @@ public static Request classes(Computer computer, Class<?>... classes) {
             Runner suite = computer.getSuite(builder, classes);
             return runner(suite);
         } catch (InitializationError e) {
-            throw new RuntimeException(
-                    "Bug in saff's brain: Suite constructor, called as above, should always complete");
+            return runner(new ErrorReportingRunner(e, classes));
         }
     }
 

File: src/main/java/org/junit/rules/TemporaryFolder.java
Patch:
@@ -237,7 +237,7 @@ public File getRoot() {
      * Delete all files and folders under the temporary folder. Usually not
      * called directly, since it is automatically applied by the {@link Rule}.
      *
-     * @throws {@code IllegalStateException} if unable to clean up resources
+     * @throws IllegalStateException if unable to clean up resources
      * and deletion of resources is assured.
      */
     public void delete() {

File: src/test/java/org/junit/tests/internal/runners/statements/FailOnTimeoutTest.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class FailOnTimeoutTest {
     private static final long TIMEOUT = 100;
-    private static final long DURATION_THAT_EXCEEDS_TIMEOUT = TimeUnit.MILLISECONDS.convert(1, TimeUnit.HOURS);
+    private static final long DURATION_THAT_EXCEEDS_TIMEOUT = 60 * 60 * 1000; //1 hour
 
     @Rule
     public final ExpectedException thrown = ExpectedException.none();

File: src/main/java/junit/extensions/TestDecorator.java
Patch:
@@ -9,6 +9,7 @@
  * test decorators. Test decorator subclasses can be introduced to add behaviour
  * before or after a test is run.
  */
+@SuppressWarnings("deprecation")
 public class TestDecorator extends Assert implements Test {
     protected Test fTest;
 

File: src/main/java/junit/framework/ComparisonCompactor.java
Patch:
@@ -18,6 +18,7 @@ public ComparisonCompactor(int contextLength, String expected, String actual) {
         fActual = actual;
     }
 
+    @SuppressWarnings("deprecation")
     public String compact(String message) {
         if (fExpected == null || fActual == null || areStringsEqual()) {
             return Assert.format(message, fExpected, fActual);

File: src/main/java/org/junit/internal/runners/rules/ValidationError.java
Patch:
@@ -5,6 +5,9 @@
 import java.lang.annotation.Annotation;
 
 class ValidationError extends Exception {
+
+    private static final long serialVersionUID = 3176511008672645574L;
+
     public ValidationError(FrameworkMember<?> member, Class<? extends Annotation> annotation, String suffix) {
         super(String.format("The @%s '%s' %s", annotation.getSimpleName(), member.getName(), suffix));
     }

File: src/main/java/org/junit/rules/TestWatcher.java
Patch:
@@ -54,7 +54,7 @@ public void evaluate() throws Throwable {
                 try {
                     base.evaluate();
                     succeededQuietly(description, errors);
-                } catch (@SuppressWarnings("deprecation") org.junit.internal.AssumptionViolatedException  e) {
+                } catch (org.junit.internal.AssumptionViolatedException  e) {
                     errors.add(e);
                     skippedQuietly(e, description, errors);
                 } catch (Throwable e) {
@@ -87,7 +87,6 @@ private void failedQuietly(Throwable e, Description description,
         }
     }
 
-    @SuppressWarnings("deprecation")
     private void skippedQuietly(
             org.junit.internal.AssumptionViolatedException e, Description description,
             List<Throwable> errors) {
@@ -135,7 +134,6 @@ protected void failed(Throwable e, Description description) {
     /**
      * Invoked when a test is skipped due to a failed assumption.
      */
-    @SuppressWarnings("deprecation")
     protected void skipped(AssumptionViolatedException e, Description description) {
         // For backwards compatibility with JUnit 4.11 and earlier, call the legacy version
         org.junit.internal.AssumptionViolatedException asInternalException = e;

File: src/main/java/org/junit/runner/FilterFactory.java
Patch:
@@ -16,6 +16,7 @@ public interface FilterFactory {
     /**
      * Exception thrown if the {@link Filter} cannot be created.
      */
+    @SuppressWarnings("serial")
     public static class FilterNotCreatedException extends Exception {
         public FilterNotCreatedException(Exception exception) {
             super(exception.getMessage(), exception);

File: src/main/java/org/junit/validator/AnnotationValidatorFactory.java
Patch:
@@ -27,9 +27,6 @@ public AnnotationValidator createAnnotationValidator(ValidateWith validateWithAn
         }
 
         Class<? extends AnnotationValidator> clazz = validateWithAnnotation.value();
-        if (clazz == null) {
-            throw new IllegalArgumentException("Can't create validator, value is null in annotation " + validateWithAnnotation.getClass().getName());
-        }
         try {
             AnnotationValidator annotationValidator = clazz.newInstance();
             VALIDATORS_FOR_ANNOTATION_TYPES.putIfAbsent(validateWithAnnotation, annotationValidator);

File: src/test/java/junit/tests/extensions/ExtensionTest.java
Patch:
@@ -71,6 +71,7 @@ public void testSetupErrorDontTearDown() {
         WasRun test = new WasRun();
 
         TornDown wrapper = new TornDown(test) {
+            @SuppressWarnings("deprecation")
             @Override
             public void setUp() {
                 fail();
@@ -87,6 +88,7 @@ public void testSetupErrorInTestSetup() {
         WasRun test = new WasRun();
 
         TestSetup wrapper = new TestSetup(test) {
+            @SuppressWarnings("deprecation")
             @Override
             public void setUp() {
                 fail();

File: src/test/java/junit/tests/runner/ResultTest.java
Patch:
@@ -50,6 +50,9 @@ private void assertResultSerializable(Result result) throws IOException, ClassNo
      * This makes values returned by the methods deterministic.
      */
     private static class ResultWithFixedRunTime extends Result {
+
+        private static final long serialVersionUID = 1L;
+
         private final Result delegate;
 
         public ResultWithFixedRunTime(Result delegate) {

File: src/test/java/org/junit/AssumptionViolatedExceptionTest.java
Patch:
@@ -3,7 +3,6 @@
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.notNullValue;
-import static org.hamcrest.CoreMatchers.nullValue;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assume.assumeThat;
 import org.hamcrest.Matcher;

File: src/test/java/org/junit/runners/parameterized/ParameterizedNamesTest.java
Patch:
@@ -19,7 +19,6 @@ public class ParameterizedNamesTest {
     @RunWith(Parameterized.class)
     public static class ParametrizedWithSpecialCharsInName {
 
-        @SuppressWarnings("unused")
         public ParametrizedWithSpecialCharsInName(String s) {
         }
 

File: src/test/java/org/junit/tests/assertion/AssertionTest.java
Patch:
@@ -366,6 +366,7 @@ public void naNsAreEqual() {
         assertEquals(Double.NaN, Double.NaN, Double.POSITIVE_INFINITY);
     }
 
+    @SuppressWarnings("unused")
     @Test
     public void nullNullmessage() {
         try {
@@ -376,6 +377,7 @@ public void nullNullmessage() {
         }
     }
 
+    @SuppressWarnings("unused")
     @Test
     public void nullWithMessage() {
         try {

File: src/test/java/org/junit/tests/experimental/rules/TestWatcherTest.java
Patch:
@@ -52,11 +52,13 @@ protected void finished(Description description) {
                 watchedLog.append("finished ");
             }
 
+            @Override
             protected void skipped(AssumptionViolatedException e, Description description) {
                 watchedLog.append("skipped ");
             }
         };
 
+        @SuppressWarnings("deprecation")
         @Test
         public void succeeds() {
             throw new AssumptionViolatedException("don't run");
@@ -80,6 +82,7 @@ protected void skipped(AssumptionViolatedException e, Description description) {
             }
         };
 
+        @SuppressWarnings("deprecation")
         @Test
         public void fails() {
             throw new AssumptionViolatedException("test failure");

File: src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java
Patch:
@@ -175,6 +175,7 @@ public void assertionErrorAtParentLevelTest() throws InitializationError {
     }
 
     public static class AssumptionViolatedAtParentLevelTest {
+        @SuppressWarnings("deprecation")
         @BeforeClass
         public static void beforeClass() {
             throw new AssumptionViolatedException("Thrown from @BeforeClass");
@@ -207,6 +208,7 @@ public void fail() {
         @Test
         public void ignore() {}
 
+        @SuppressWarnings("deprecation")
         @Test
         public void assumptionFail() {
             throw new AssumptionViolatedException("Thrown from @Test");
@@ -227,7 +229,7 @@ private CountingRunListener runTestWithParentRunner(Class<?> testClass) throws I
         CountingRunListener listener = new CountingRunListener();
         RunNotifier runNotifier = new RunNotifier();
         runNotifier.addListener(listener);
-        ParentRunner runner = new BlockJUnit4ClassRunner(testClass);
+        ParentRunner<?> runner = new BlockJUnit4ClassRunner(testClass);
         runner.run(runNotifier);
         return listener;
     }

File: src/test/java/org/junit/tests/running/core/MainRunner.java
Patch:
@@ -39,6 +39,7 @@ public void checkExit(int status) {
             throw new ExitException(status);
         }
 
+        @SuppressWarnings("deprecation")
         @Override
         public boolean getInCheck() {
             return (originalSecurityManager != null) && originalSecurityManager.getInCheck();
@@ -175,6 +176,7 @@ public void checkMulticast(InetAddress maddr) {
             }
         }
 
+        @SuppressWarnings("deprecation")
         @Override
         public void checkMulticast(InetAddress maddr, byte ttl) {
             if (originalSecurityManager != null) {

File: src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java
Patch:
@@ -229,7 +229,7 @@ private CountingRunListener runTestWithParentRunner(Class<?> testClass) throws I
         CountingRunListener listener = new CountingRunListener();
         RunNotifier runNotifier = new RunNotifier();
         runNotifier.addListener(listener);
-        ParentRunner runner = new BlockJUnit4ClassRunner(testClass);
+        ParentRunner<?> runner = new BlockJUnit4ClassRunner(testClass);
         runner.run(runNotifier);
         return listener;
     }

File: src/test/java/org/junit/tests/assertion/AssertionTest.java
Patch:
@@ -366,6 +366,7 @@ public void naNsAreEqual() {
         assertEquals(Double.NaN, Double.NaN, Double.POSITIVE_INFINITY);
     }
 
+    @SuppressWarnings("unused")
     @Test
     public void nullNullmessage() {
         try {
@@ -376,6 +377,7 @@ public void nullNullmessage() {
         }
     }
 
+    @SuppressWarnings("unused")
     @Test
     public void nullWithMessage() {
         try {

File: src/main/java/org/junit/validator/AnnotationValidatorFactory.java
Patch:
@@ -27,9 +27,6 @@ public AnnotationValidator createAnnotationValidator(ValidateWith validateWithAn
         }
 
         Class<? extends AnnotationValidator> clazz = validateWithAnnotation.value();
-        if (clazz == null) {
-            throw new IllegalArgumentException("Can't create validator, value is null in annotation " + validateWithAnnotation.getClass().getName());
-        }
         try {
             AnnotationValidator annotationValidator = clazz.newInstance();
             VALIDATORS_FOR_ANNOTATION_TYPES.putIfAbsent(validateWithAnnotation, annotationValidator);

File: src/main/java/org/junit/rules/ErrorCollector.java
Patch:
@@ -73,12 +73,12 @@ public Object call() throws Exception {
      * Execution continues, but the test will fail at the end if
      * {@code callable} threw an exception.
      */
-    public Object checkSucceeds(Callable<Object> callable) {
+    public <T> T checkSucceeds(Callable<T> callable) {
         try {
             return callable.call();
         } catch (Throwable e) {
             addError(e);
             return null;
         }
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.experimental.categories.CategoryFilterFactoryTest;
 import org.junit.internal.MethodSorterTest;
 import org.junit.internal.matchers.StacktracePrintingMatcherTest;
+import org.junit.internal.matchers.ThrowableCauseMatcherTest;
 import org.junit.rules.DisableOnDebugTest;
 import org.junit.rules.StopwatchTest;
 import org.junit.runner.FilterFactoriesTest;
@@ -205,7 +206,8 @@
         TestWithParametersTest.class,
         ParameterizedNamesTest.class,
         PublicClassValidatorTest.class,
-        DisableOnDebugTest.class
+        DisableOnDebugTest.class,
+        ThrowableCauseMatcherTest.class
 })
 public class AllTests {
     public static Test suite() {

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.experimental.categories.CategoryFilterFactoryTest;
 import org.junit.internal.MethodSorterTest;
 import org.junit.internal.matchers.StacktracePrintingMatcherTest;
+import org.junit.internal.matchers.ThrowableCauseMatcherTest;
 import org.junit.rules.DisableOnDebugTest;
 import org.junit.rules.StopwatchTest;
 import org.junit.runner.FilterFactoriesTest;
@@ -205,7 +206,8 @@
         TestWithParametersTest.class,
         ParameterizedNamesTest.class,
         PublicClassValidatorTest.class,
-        DisableOnDebugTest.class
+        DisableOnDebugTest.class,
+        ThrowableCauseMatcherTest.class
 })
 public class AllTests {
     public static Test suite() {

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.experimental.categories.CategoryFilterFactoryTest;
 import org.junit.internal.MethodSorterTest;
 import org.junit.internal.matchers.StacktracePrintingMatcherTest;
+import org.junit.rules.DisableOnDebugTest;
 import org.junit.rules.StopwatchTest;
 import org.junit.runner.FilterFactoriesTest;
 import org.junit.runner.FilterOptionIntegrationTest;
@@ -203,7 +204,8 @@
         JUnitCoreTest.class,
         TestWithParametersTest.class,
         ParameterizedNamesTest.class,
-        PublicClassValidatorTest.class
+        PublicClassValidatorTest.class,
+        DisableOnDebugTest.class
 })
 public class AllTests {
     public static Test suite() {

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.experimental.categories.CategoryFilterFactoryTest;
 import org.junit.internal.MethodSorterTest;
 import org.junit.internal.matchers.StacktracePrintingMatcherTest;
+import org.junit.rules.DisableOnDebugTest;
 import org.junit.rules.StopwatchTest;
 import org.junit.runner.FilterFactoriesTest;
 import org.junit.runner.FilterOptionIntegrationTest;
@@ -203,7 +204,8 @@
         JUnitCoreTest.class,
         TestWithParametersTest.class,
         ParameterizedNamesTest.class,
-        PublicClassValidatorTest.class
+        PublicClassValidatorTest.class,
+        DisableOnDebugTest.class
 })
 public class AllTests {
     public static Test suite() {

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -6,6 +6,7 @@
 import org.junit.experimental.categories.CategoryFilterFactoryTest;
 import org.junit.internal.MethodSorterTest;
 import org.junit.internal.matchers.StacktracePrintingMatcherTest;
+import org.junit.rules.StopwatchTest;
 import org.junit.runner.FilterFactoriesTest;
 import org.junit.runner.FilterOptionIntegrationTest;
 import org.junit.runner.JUnitCommandLineParseResultTest;
@@ -47,7 +48,6 @@
 import org.junit.tests.experimental.rules.NameRulesTest;
 import org.junit.tests.experimental.rules.RuleChainTest;
 import org.junit.tests.experimental.rules.RuleMemberValidatorTest;
-import org.junit.tests.experimental.rules.StopwatchTest;
 import org.junit.tests.experimental.rules.TempFolderRuleTest;
 import org.junit.tests.experimental.rules.TemporaryFolderUsageTest;
 import org.junit.tests.experimental.rules.TestRuleTest;

File: src/main/java/org/junit/internal/builders/AllDefaultPossibilitiesBuilder.java
Patch:
@@ -7,10 +7,10 @@
 import org.junit.runners.model.RunnerBuilder;
 
 public class AllDefaultPossibilitiesBuilder extends RunnerBuilder {
-    private final boolean fCanUseSuiteMethod;
+    private final boolean canUseSuiteMethod;
 
     public AllDefaultPossibilitiesBuilder(boolean canUseSuiteMethod) {
-        fCanUseSuiteMethod = canUseSuiteMethod;
+        this.canUseSuiteMethod = canUseSuiteMethod;
     }
 
     @Override
@@ -48,7 +48,7 @@ protected IgnoredBuilder ignoredBuilder() {
     }
 
     protected RunnerBuilder suiteMethodBuilder() {
-        if (fCanUseSuiteMethod) {
+        if (canUseSuiteMethod) {
             return new SuiteMethodBuilder();
         }
         return new NullBuilder();

File: src/main/java/org/junit/internal/builders/AnnotatedBuilder.java
Patch:
@@ -71,10 +71,10 @@
 public class AnnotatedBuilder extends RunnerBuilder {
     private static final String CONSTRUCTOR_ERROR_FORMAT = "Custom runner class %s should have a public constructor with signature %s(Class testClass)";
 
-    private final RunnerBuilder fSuiteBuilder;
+    private final RunnerBuilder suiteBuilder;
 
     public AnnotatedBuilder(RunnerBuilder suiteBuilder) {
-        fSuiteBuilder = suiteBuilder;
+        this.suiteBuilder = suiteBuilder;
     }
 
     @Override
@@ -105,7 +105,7 @@ public Runner buildRunner(Class<? extends Runner> runnerClass,
         } catch (NoSuchMethodException e) {
             try {
                 return runnerClass.getConstructor(Class.class,
-                        RunnerBuilder.class).newInstance(testClass, fSuiteBuilder);
+                        RunnerBuilder.class).newInstance(testClass, suiteBuilder);
             } catch (NoSuchMethodException e2) {
                 String simpleName = runnerClass.getSimpleName();
                 throw new InitializationError(String.format(

File: src/main/java/org/junit/internal/builders/IgnoredClassRunner.java
Patch:
@@ -5,10 +5,10 @@
 import org.junit.runner.notification.RunNotifier;
 
 public class IgnoredClassRunner extends Runner {
-    private final Class<?> fTestClass;
+    private final Class<?> clazz;
 
     public IgnoredClassRunner(Class<?> testClass) {
-        fTestClass = testClass;
+        clazz = testClass;
     }
 
     @Override
@@ -18,6 +18,6 @@ public void run(RunNotifier notifier) {
 
     @Override
     public Description getDescription() {
-        return Description.createSuiteDescription(fTestClass);
+        return Description.createSuiteDescription(clazz);
     }
 }
\ No newline at end of file

File: src/main/java/org/junit/internal/runners/InitializationError.java
Patch:
@@ -11,10 +11,10 @@
 @Deprecated
 public class InitializationError extends Exception {
     private static final long serialVersionUID = 1L;
-    private final List<Throwable> fErrors;
+    private final List<Throwable> errors;
 
     public InitializationError(List<Throwable> errors) {
-        fErrors = errors;
+        this.errors = errors;
     }
 
     public InitializationError(Throwable... errors) {
@@ -26,6 +26,6 @@ public InitializationError(String string) {
     }
 
     public List<Throwable> getCauses() {
-        return fErrors;
+        return errors;
     }
 }

File: src/main/java/org/junit/internal/runners/statements/Fail.java
Patch:
@@ -3,14 +3,14 @@
 import org.junit.runners.model.Statement;
 
 public class Fail extends Statement {
-    private final Throwable fError;
+    private final Throwable error;
 
     public Fail(Throwable e) {
-        fError = e;
+        error = e;
     }
 
     @Override
     public void evaluate() throws Throwable {
-        throw fError;
+        throw error;
     }
 }

File: src/main/java/org/junit/rules/TestName.java
Patch:
@@ -25,17 +25,17 @@
  * @since 4.7
  */
 public class TestName extends TestWatcher {
-    private String fName;
+    private String name;
 
     @Override
     protected void starting(Description d) {
-        fName = d.getMethodName();
+        name = d.getMethodName();
     }
 
     /**
      * @return the name of the currently-running test method
      */
     public String getMethodName() {
-        return fName;
+        return name;
     }
 }

File: src/main/java/org/junit/runner/manipulation/Sorter.java
Patch:
@@ -20,7 +20,7 @@ public int compare(Description o1, Description o2) {
         }
     });
 
-    private final Comparator<Description> fComparator;
+    private final Comparator<Description> comparator;
 
     /**
      * Creates a <code>Sorter</code> that uses <code>comparator</code>
@@ -29,7 +29,7 @@ public int compare(Description o1, Description o2) {
      * @param comparator the {@link Comparator} to use when sorting tests
      */
     public Sorter(Comparator<Description> comparator) {
-        fComparator = comparator;
+        this.comparator = comparator;
     }
 
     /**
@@ -43,6 +43,6 @@ public void apply(Object object) {
     }
 
     public int compare(Description o1, Description o2) {
-        return fComparator.compare(o1, o2);
+        return comparator.compare(o1, o2);
     }
 }

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -53,7 +53,7 @@
  * @since 4.5
  */
 public class BlockJUnit4ClassRunner extends ParentRunner<FrameworkMethod> {
-    private final ConcurrentHashMap<FrameworkMethod, Description> fMethodDescriptions = new ConcurrentHashMap<FrameworkMethod, Description>();
+    private final ConcurrentHashMap<FrameworkMethod, Description> methodDescriptions = new ConcurrentHashMap<FrameworkMethod, Description>();
     /**
      * Creates a BlockJUnit4ClassRunner to run {@code klass}
      *
@@ -88,12 +88,12 @@ protected boolean isIgnored(FrameworkMethod child) {
 
     @Override
     protected Description describeChild(FrameworkMethod method) {
-        Description description = fMethodDescriptions.get(method);
+        Description description = methodDescriptions.get(method);
 
         if (description == null) {
             description = Description.createTestDescription(getTestClass().getJavaClass(),
                     testName(method), method.getAnnotations());
-            fMethodDescriptions.putIfAbsent(method, description);
+            methodDescriptions.putIfAbsent(method, description);
         }
 
         return description;

File: src/main/java/org/junit/runners/MethodSorters.java
Patch:
@@ -29,13 +29,13 @@ public enum MethodSorters {
      */
     DEFAULT(MethodSorter.DEFAULT);
 
-    private final Comparator<Method> fComparator;
+    private final Comparator<Method> comparator;
 
     private MethodSorters(Comparator<Method> comparator) {
-        this.fComparator = comparator;
+        this.comparator = comparator;
     }
 
     public Comparator<Method> getComparator() {
-        return fComparator;
+        return comparator;
     }
 }

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -232,7 +232,7 @@ public class Parameterized extends Suite {
 
     private static final List<Runner> NO_RUNNERS = Collections.<Runner>emptyList();
 
-    private final List<Runner> fRunners;
+    private final List<Runner> runners;
 
     /**
      * Only called reflectively. Do not use programmatically.
@@ -243,7 +243,7 @@ public Parameterized(Class<?> klass) throws Throwable {
                 klass);
         Parameters parameters = getParametersMethod().getAnnotation(
                 Parameters.class);
-        fRunners = Collections.unmodifiableList(createRunnersForParameters(
+        runners = Collections.unmodifiableList(createRunnersForParameters(
                 allParameters(), parameters.name(), runnerFactory));
     }
 
@@ -262,7 +262,7 @@ private ParametersRunnerFactory getParametersRunnerFactory(Class<?> klass)
 
     @Override
     protected List<Runner> getChildren() {
-        return fRunners;
+        return runners;
     }
 
     private TestWithParameters createTestWithNotNormalizedParameters(

File: src/main/java/org/junit/runners/Suite.java
Patch:
@@ -58,7 +58,7 @@ private static Class<?>[] getAnnotatedClasses(Class<?> klass) throws Initializat
         return annotation.value();
     }
 
-    private final List<Runner> fRunners;
+    private final List<Runner> runners;
 
     /**
      * Called reflectively on classes annotated with <code>@RunWith(Suite.class)</code>
@@ -110,12 +110,12 @@ protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses)
      */
     protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError {
         super(klass);
-        fRunners = Collections.unmodifiableList(runners);
+        this.runners = Collections.unmodifiableList(runners);
     }
 
     @Override
     protected List<Runner> getChildren() {
-        return fRunners;
+        return runners;
     }
 
     @Override

File: src/main/java/org/junit/runners/model/InitializationError.java
Patch:
@@ -10,14 +10,14 @@
  */
 public class InitializationError extends Exception {
     private static final long serialVersionUID = 1L;
-    private final List<Throwable> fErrors;
+    private final List<Throwable> errors;
 
     /**
      * Construct a new {@code InitializationError} with one or more
      * errors {@code errors} as causes
      */
     public InitializationError(List<Throwable> errors) {
-        fErrors = errors;
+        this.errors = errors;
     }
 
     public InitializationError(Throwable error) {
@@ -36,6 +36,6 @@ public InitializationError(String string) {
      * Returns one or more Throwables that led to this initialization error.
      */
     public List<Throwable> getCauses() {
-        return fErrors;
+        return errors;
     }
 }

File: src/main/java/org/junit/runner/Description.java
Patch:
@@ -31,7 +31,7 @@ public class Description implements Serializable {
     private static final long serialVersionUID = 1L;
 
     private static final Pattern METHOD_AND_CLASS_NAME_PATTERN = Pattern
-            .compile("(.*)\\((.*)\\)");
+            .compile("([\\s\\S]*)\\((.*)\\)");
 
     /**
      * Create a <code>Description</code> named <code>name</code>.

File: src/main/java/org/junit/runner/Description.java
Patch:
@@ -31,7 +31,7 @@ public class Description implements Serializable {
     private static final long serialVersionUID = 1L;
 
     private static final Pattern METHOD_AND_CLASS_NAME_PATTERN = Pattern
-            .compile("(.*)\\((.*)\\)");
+            .compile("([\\s\\S]*)\\((.*)\\)");
 
     /**
      * Create a <code>Description</code> named <code>name</code>.

File: src/main/java/org/junit/Assert.java
Patch:
@@ -10,7 +10,7 @@
  * A set of assertion methods useful for writing tests. Only failed assertions
  * are recorded. These methods can be used directly:
  * <code>Assert.assertEquals(...)</code>, however, they read better if they
- * are referenced through static import:<br/>
+ * are referenced through static import:
  *
  * <pre>
  * import static org.junit.Assert.*;

File: src/main/java/org/junit/Assume.java
Patch:
@@ -23,7 +23,7 @@
  * }
  * </pre>
  * These methods can be used directly: <code>Assume.assumeTrue(...)</code>, however, they
- * read better if they are referenced through static import:<br/>
+ * read better if they are referenced through static import:
  * <pre>
  * import static org.junit.Assume.*;
  *    ...

File: src/main/java/org/junit/experimental/categories/CategoryFilterFactory.java
Patch:
@@ -17,7 +17,6 @@ abstract class CategoryFilterFactory implements FilterFactory {
      * {@link FilterFactoryParams} argument.
      *
      * @param params Parameters needed to create the {@link Filter}
-     * @throws FilterNotCreatedException
      */
     public Filter createFilter(FilterFactoryParams params) throws FilterNotCreatedException {
         try {

File: src/main/java/org/junit/experimental/theories/FromDataPoints.java
Patch:
@@ -9,14 +9,14 @@
 
 /**
  * Annotating a parameter of a {@link org.junit.experimental.theories.Theory
- * &#064Theory} method with <code>&#064;FromDataPoints</code> will limit the
+ * &#064;Theory} method with <code>&#064;FromDataPoints</code> will limit the
  * datapoints considered as potential values for that parameter to just the
  * {@link org.junit.experimental.theories.DataPoints DataPoints} with the given
  * name. DataPoint names can be given as the value parameter of the
- * &#064DataPoints annotation.
+ * &#064;DataPoints annotation.
  * <p>
  * DataPoints without names will not be considered as values for any parameters
- * annotated with &#064FromDataPoints.
+ * annotated with &#064;FromDataPoints.
  * <pre>
  * &#064;DataPoints
  * public static String[] unnamed = new String[] { ... };

File: src/main/java/org/junit/experimental/theories/ParametersSuppliedBy.java
Patch:
@@ -25,7 +25,7 @@
  * public &#064;interface SpecialParameter { }
  * 
  * &#064;Theory
- * public void theoryMethod(&#064SpecialParameter String param) {
+ * public void theoryMethod(&#064;SpecialParameter String param) {
  *   ...
  * }
  * </pre>

File: src/main/java/org/junit/internal/runners/InitializationError.java
Patch:
@@ -4,7 +4,8 @@
 import java.util.List;
 
 /**
- * Use the published version: {@link org.junit.runners.InitializationError}
+ * Use the published version:
+ * {@link org.junit.runners.model.InitializationError}
  * This may disappear as soon as 1 April 2009
  */
 @Deprecated

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -122,7 +122,7 @@ private ExpectedException() {
     /**
      * This method does nothing. Don't use it.
      * @deprecated AssertionErrors are handled by default since JUnit 4.12. Just
-     *             like in JUnit <= 4.10.
+     *             like in JUnit &lt;= 4.10.
      */
     @Deprecated
     public ExpectedException handleAssertionErrors() {
@@ -132,7 +132,7 @@ public ExpectedException handleAssertionErrors() {
     /**
      * This method does nothing. Don't use it.
      * @deprecated AssumptionViolatedExceptions are handled by default since
-     *             JUnit 4.12. Just like in JUnit <= 4.10.
+     *             JUnit 4.12. Just like in JUnit &lt;= 4.10.
      */
     @Deprecated
     public ExpectedException handleAssumptionViolatedExceptions() {
@@ -180,7 +180,7 @@ public void expect(Matcher<?> matcher) {
      * public void throwsExceptionWithSpecificType() {
      *     thrown.expect(NullPointerException.class);
      *     throw new NullPointerException();
-     * }
+     * }</pre>
      */
     public void expect(Class<? extends Throwable> type) {
         expect(instanceOf(type));

File: src/main/java/org/junit/rules/ExternalResource.java
Patch:
@@ -56,7 +56,7 @@ public void evaluate() throws Throwable {
     /**
      * Override to set up your specific external resource.
      *
-     * @throws if setup fails (which will disable {@code after}
+     * @throws Throwable if setup fails (which will disable {@code after}
      */
     protected void before() throws Throwable {
         // do nothing

File: src/main/java/org/junit/rules/Stopwatch.java
Patch:
@@ -6,8 +6,9 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * The Stopwatch Rule notifies one of its own protected methods of the time spent by a test.<p/>
- * Override them to get the time in nanoseconds. For example, this class will keep logging the
+ * The Stopwatch Rule notifies one of its own protected methods of the time spent by a test.
+ *
+ * <p>Override them to get the time in nanoseconds. For example, this class will keep logging the
  * time spent by each passed, failed, skipped, and finished test:
  *
  * <pre>

File: src/main/java/org/junit/runner/FilterFactories.java
Patch:
@@ -16,7 +16,6 @@ public class FilterFactories {
      * "package.of.FilterFactory".
      *
      * @param filterSpec The filter specification
-     * @throws org.junit.runner.FilterFactory.FilterNotCreatedException
      */
     public static Filter createFilterFromFilterSpec(Description description, String filterSpec)
             throws FilterFactory.FilterNotCreatedException {
@@ -36,7 +35,6 @@ public static Filter createFilterFromFilterSpec(Description description, String
      *
      * @param filterFactoryFqcn The fully qualified class name of the {@link FilterFactory}
      * @param params The arguments to the {@link FilterFactory}
-     * @throws org.junit.runner.FilterFactory.FilterNotCreatedException
      */
     public static Filter createFilter(String filterFactoryFqcn, FilterFactoryParams params)
             throws FilterFactory.FilterNotCreatedException {
@@ -50,7 +48,6 @@ public static Filter createFilter(String filterFactoryFqcn, FilterFactoryParams
      *
      * @param filterFactoryClass The class of the {@link FilterFactory}
      * @param params             The arguments to the {@link FilterFactory}
-     * @throws org.junit.runner.FilterFactory.FilterNotCreatedException
      *
      */
     public static Filter createFilter(Class<? extends FilterFactory> filterFactoryClass, FilterFactoryParams params)

File: src/main/java/org/junit/runner/FilterFactory.java
Patch:
@@ -10,7 +10,6 @@ public interface FilterFactory {
      * Creates a {@link Filter} given a {@link FilterFactoryParams} argument.
      *
      * @param params Parameters needed to create the {@link Filter}
-     * @throws FilterNotCreatedException
      */
     Filter createFilter(FilterFactoryParams params) throws FilterNotCreatedException;
 

File: src/main/java/org/junit/runner/Runner.java
Patch:
@@ -9,8 +9,8 @@
  * a custom runner, in addition to implementing the abstract methods here you must
  * also provide a constructor that takes as an argument the {@link Class} containing
  * the tests.
- * <p/>
- * The default runner implementation guarantees that the instances of the test case
+ *
+ * <p>The default runner implementation guarantees that the instances of the test case
  * class will be constructed immediately before running the test and that the runner
  * will retain no reference to the test case instances, generally making them
  * available for garbage collection.
@@ -40,4 +40,4 @@ public abstract class Runner implements Describable {
     public int testCount() {
         return getDescription().testCount();
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -376,7 +376,7 @@ protected List<org.junit.rules.MethodRule> rules(Object target) {
     }
 
     /**
-     * Returns a {@link Statement}: apply all non-static {@link Value} fields
+     * Returns a {@link Statement}: apply all non-static fields
      * annotated with {@link Rule}.
      *
      * @param statement The base statement

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -145,6 +145,7 @@ private void applyValidators(List<Throwable> errors) {
      * <li>returns something other than void, or
      * <li>is static (given {@code isStatic is false}), or
      * <li>is not static (given {@code isStatic is true}).
+     * </ul>
      */
     protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation,
             boolean isStatic, List<Throwable> errors) {
@@ -272,8 +273,8 @@ public void evaluate() {
     /**
      * Evaluates whether a child is ignored. The default implementation always
      * returns <code>false</code>.
-     * <p/>
-     * {@link BlockJUnit4ClassRunner}, for example, overrides this method to
+     * 
+     * <p>{@link BlockJUnit4ClassRunner}, for example, overrides this method to
      * filter tests based on the {@link Ignore} annotation.
      */
     protected boolean isIgnored(T child) {

File: src/main/java/org/junit/runners/model/FrameworkMethod.java
Patch:
@@ -68,6 +68,7 @@ public String getName() {
      * <li>returns something other than void, or
      * <li>is static (given {@code isStatic is false}), or
      * <li>is not static (given {@code isStatic is true}).
+     * </ul>
      */
     public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors) {
         validatePublicVoid(isStatic, errors);
@@ -84,6 +85,7 @@ public void validatePublicVoidNoArg(boolean isStatic, List<Throwable> errors) {
      * <li>returns something other than void, or
      * <li>is static (given {@code isStatic is false}), or
      * <li>is not static (given {@code isStatic is true}).
+     * </ul>
      */
     public void validatePublicVoid(boolean isStatic, List<Throwable> errors) {
         if (isStatic() != isStatic) {

File: src/main/java/org/junit/validator/AnnotationValidatorFactory.java
Patch:
@@ -16,7 +16,6 @@ public class AnnotationValidatorFactory {
      * {@link org.junit.validator.ValidateWith}. Instances are
      * cached.
      *
-     * @param validateWithAnnotation
      * @return An instance of the AnnotationValidator.
      *
      * @since 4.12

File: src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java
Patch:
@@ -88,7 +88,7 @@ private void validateStatic(FrameworkMember<?> member, List<Throwable> errors) {
             addError(errors, member, "must be static.");
         }
         if (!fStaticMembers && member.isStatic()) {
-            addError(errors, member, "must not be static.");
+            addError(errors, member, "must not be static or it has to be annotated with @ClassRule.");
         }
     }
 

File: src/test/java/org/junit/tests/experimental/rules/RuleFieldValidatorTest.java
Patch:
@@ -74,7 +74,7 @@ public static class TestWithNonStaticTestRule {
     public void rejectStaticTestRule() {
         TestClass target = new TestClass(TestWithStaticTestRule.class);
         RULE_VALIDATOR.validate(target, errors);
-        assertOneErrorWithMessage("The @Rule 'temporaryFolder' must not be static.");
+        assertOneErrorWithMessage("The @Rule 'temporaryFolder' must not be static or it has to be annotated with @ClassRule.");
     }
 
     public static class TestWithStaticTestRule {
@@ -157,7 +157,7 @@ public TestRule getTemporaryFolder() {
     public void rejectMethodStaticTestRule() {
         TestClass target = new TestClass(TestMethodWithStaticTestRule.class);
         RULE_METHOD_VALIDATOR.validate(target, errors);
-        assertOneErrorWithMessage("The @Rule 'getTemporaryFolder' must not be static.");
+        assertOneErrorWithMessage("The @Rule 'getTemporaryFolder' must not be static or it has to be annotated with @ClassRule.");
     }
 
     public static class TestMethodWithStaticTestRule {

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -178,7 +178,7 @@ private void validateClassRules(List<Throwable> errors) {
      * <li>Run all non-overridden {@code @AfterClass} methods on the test-class
      * and superclasses: exceptions thrown by previous steps are combined, if
      * necessary, with exceptions from AfterClass methods into a
-     * {@link MultipleFailureException}.</li>
+     * {@link org.junit.runners.model.MultipleFailureException}.</li>
      * </ol>
      * </li>
      * </ol>
@@ -221,7 +221,7 @@ protected Statement withBeforeClasses(Statement statement) {
      * and superclasses before executing {@code statement}; all AfterClass methods are
      * always executed: exceptions thrown by previous steps are combined, if
      * necessary, with exceptions from AfterClass methods into a
-     * {@link MultipleFailureException}.
+     * {@link org.junit.runners.model.MultipleFailureException}.
      */
     protected Statement withAfterClasses(Statement statement) {
         List<FrameworkMethod> afters = fTestClass

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -99,7 +99,6 @@
 import org.junit.tests.running.methods.TimeoutTest;
 import org.junit.tests.validation.BadlyFormedClassesTest;
 import org.junit.tests.validation.FailedConstructionTest;
-import org.junit.tests.validation.InaccessibleBaseClassTest;
 import org.junit.tests.validation.ValidationTest;
 import org.junit.validator.PublicClassValidatorTest;
 
@@ -143,7 +142,6 @@
         JUnit38ClassRunnerTest.class,
         SystemExitTest.class,
         JUnitCoreReturnsCorrectExitCodeTest.class,
-        InaccessibleBaseClassTest.class,
         SuiteMethodTest.class,
         BadlyFormedClassesTest.class,
         IgnoreClassTest.class,

File: src/main/java/org/junit/internal/runners/ErrorReportingRunner.java
Patch:
@@ -16,6 +16,9 @@ public class ErrorReportingRunner extends Runner {
     private final Class<?> fTestClass;
 
     public ErrorReportingRunner(Class<?> testClass, Throwable cause) {
+        if (testClass == null) {
+            throw new NullPointerException("Test class cannot be null");
+        }
         fTestClass = testClass;
         fCauses = getCauses(cause);
     }

File: src/main/java/org/junit/internal/runners/ErrorReportingRunner.java
Patch:
@@ -16,6 +16,9 @@ public class ErrorReportingRunner extends Runner {
     private final Class<?> fTestClass;
 
     public ErrorReportingRunner(Class<?> testClass, Throwable cause) {
+        if (testClass == null) {
+            throw new NullPointerException("Test class cannot be null");
+        }
         fTestClass = testClass;
         fCauses = getCauses(cause);
     }

File: src/main/java/org/junit/experimental/theories/internal/Assignments.java
Patch:
@@ -37,7 +37,7 @@ private Assignments(List<PotentialAssignment> assigned,
      * assigned.
      */
     public static Assignments allUnassigned(Method testMethod,
-            TestClass testClass) throws Exception {
+            TestClass testClass) {
         List<ParameterSignature> signatures;
         signatures = ParameterSignature.signatures(testClass
                 .getOnlyConstructor());

File: src/main/java/org/junit/runner/JUnitCommandLineParseResult.java
Patch:
@@ -98,7 +98,7 @@ private String[] copyArray(String[] args, int from, int to) {
             result.add(args[j]);
         }
 
-        return result.toArray(new String[]{});
+        return result.toArray(new String[result.size()]);
     }
 
     void parseParameters(String[] args) {
@@ -119,7 +119,7 @@ void parseParameters(String[] args) {
     public Request createRequest(Computer computer) {
         if (parserErrors.isEmpty()) {
             return Request
-                    .classes(computer, classes.toArray(new Class<?>[0]))
+                    .classes(computer, classes.toArray(new Class<?>[classes.size()]))
                     .filterWith(filter);
         } else {
             return new Request() {

File: src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
Patch:
@@ -40,8 +40,7 @@ protected void handleAssumptionViolation(AssumptionViolatedException e) {
 
         @Override
         protected void runWithIncompleteAssignment(Assignments incomplete)
-                throws InstantiationException, IllegalAccessException,
-                Throwable {
+                throws Throwable {
             GuesserQueue guessers = createGuesserQueue(incomplete);
             queues.add(guessers);
             while (!guessers.isEmpty())

File: src/test/java/org/junit/tests/junit3compatibility/ForwardCompatibilityTest.java
Patch:
@@ -79,15 +79,15 @@ public void testNotifyResult() {
         result.addListener(new TestListener() {
 
             public void startTest(junit.framework.Test test) {
-                log.append(" start " + test);
+                log.append(" start ").append(test);
             }
 
             public void endTest(junit.framework.Test test) {
-                log.append(" end " + test);
+                log.append(" end ").append(test);
             }
 
             public void addFailure(junit.framework.Test test, AssertionFailedError t) {
-                log.append(" failure " + test);
+                log.append(" failure ").append(test);
             }
 
             public void addError(junit.framework.Test test, Throwable e) {

File: src/main/java/org/junit/experimental/theories/internal/Assignments.java
Patch:
@@ -37,7 +37,7 @@ private Assignments(List<PotentialAssignment> assigned,
      * assigned.
      */
     public static Assignments allUnassigned(Method testMethod,
-            TestClass testClass) throws Exception {
+            TestClass testClass) {
         List<ParameterSignature> signatures;
         signatures = ParameterSignature.signatures(testClass
                 .getOnlyConstructor());

File: src/main/java/org/junit/runner/JUnitCommandLineParseResult.java
Patch:
@@ -98,7 +98,7 @@ private String[] copyArray(String[] args, int from, int to) {
             result.add(args[j]);
         }
 
-        return result.toArray(new String[]{});
+        return result.toArray(new String[result.size()]);
     }
 
     void parseParameters(String[] args) {
@@ -119,7 +119,7 @@ void parseParameters(String[] args) {
     public Request createRequest(Computer computer) {
         if (parserErrors.isEmpty()) {
             return Request
-                    .classes(computer, classes.toArray(new Class<?>[0]))
+                    .classes(computer, classes.toArray(new Class<?>[classes.size()]))
                     .filterWith(filter);
         } else {
             return new Request() {

File: src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
Patch:
@@ -40,8 +40,7 @@ protected void handleAssumptionViolation(AssumptionViolatedException e) {
 
         @Override
         protected void runWithIncompleteAssignment(Assignments incomplete)
-                throws InstantiationException, IllegalAccessException,
-                Throwable {
+                throws Throwable {
             GuesserQueue guessers = createGuesserQueue(incomplete);
             queues.add(guessers);
             while (!guessers.isEmpty())

File: src/test/java/org/junit/tests/junit3compatibility/ForwardCompatibilityTest.java
Patch:
@@ -79,15 +79,15 @@ public void testNotifyResult() {
         result.addListener(new TestListener() {
 
             public void startTest(junit.framework.Test test) {
-                log.append(" start " + test);
+                log.append(" start ").append(test);
             }
 
             public void endTest(junit.framework.Test test) {
-                log.append(" end " + test);
+                log.append(" end ").append(test);
             }
 
             public void addFailure(junit.framework.Test test, AssertionFailedError t) {
-                log.append(" failure " + test);
+                log.append(" failure ").append(test);
             }
 
             public void addError(junit.framework.Test test, Throwable e) {

File: src/main/java/org/junit/BeforeClass.java
Patch:
@@ -11,7 +11,7 @@
  * tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method
  * with <code>@BeforeClass</code> causes it to be run once before any of
  * the test methods in the class. The <code>@BeforeClass</code> methods of superclasses
- * will be run before those the current class, unless they are shadowed in the current class.
+ * will be run before those of the current class, unless they are shadowed in the current class.
  * <p>
  * For example:
  * <pre>

File: src/main/java/org/junit/BeforeClass.java
Patch:
@@ -11,7 +11,7 @@
  * tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method
  * with <code>@BeforeClass</code> causes it to be run once before any of
  * the test methods in the class. The <code>@BeforeClass</code> methods of superclasses
- * will be run before those the current class, unless they are shadowed in the current class.
+ * will be run before those of the current class, unless they are shadowed in the current class.
  * <p>
  * For example:
  * <pre>

File: src/main/java/org/junit/Assume.java
Patch:
@@ -16,7 +16,7 @@
  * For example:
  * <pre>
  * // only provides information if database is reachable.
- * \@Test public void calculateTotalSalary() {
+ * &#064;Test public void calculateTotalSalary() {
  *    DBConnection dbc = Database.connect();
  *    assumeNotNull(dbc);
  *    // ...

File: src/main/java/org/junit/Assume.java
Patch:
@@ -16,7 +16,7 @@
  * For example:
  * <pre>
  * // only provides information if database is reachable.
- * \@Test public void calculateTotalSalary() {
+ * &#064;Test public void calculateTotalSalary() {
  *    DBConnection dbc = Database.connect();
  *    assumeNotNull(dbc);
  *    // ...

File: src/main/java/org/junit/experimental/theories/internal/ParameterizedAssertionError.java
Patch:
@@ -15,7 +15,7 @@ public ParameterizedAssertionError(Throwable targetException,
 
     @Override
     public boolean equals(Object obj) {
-        return toString().equals(obj.toString());
+        return obj instanceof ParameterizedAssertionError && toString().equals(obj.toString());
     }
 
     public static String join(String delimiter, Object... params) {

File: src/main/java/org/junit/experimental/theories/internal/ParameterizedAssertionError.java
Patch:
@@ -15,7 +15,7 @@ public ParameterizedAssertionError(Throwable targetException,
 
     @Override
     public boolean equals(Object obj) {
-        return toString().equals(obj.toString());
+        return obj instanceof ParameterizedAssertionError && toString().equals(obj.toString());
     }
 
     public static String join(String delimiter, Object... params) {

File: src/main/java/org/junit/internal/runners/MethodRoadie.java
Patch:
@@ -15,6 +15,7 @@
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunNotifier;
 import org.junit.runners.BlockJUnit4ClassRunner;
+import org.junit.runners.model.TestTimedOutException;
 
 /**
  * @deprecated Included for backwards compatibility with JUnit 4.4. Will be
@@ -74,7 +75,7 @@ public Object call() throws Exception {
                     }
                     result.get(0, TimeUnit.MILLISECONDS); // throws the exception if one occurred during the invocation
                 } catch (TimeoutException e) {
-                    addFailure(new Exception(String.format("test timed out after %d milliseconds", timeout)));
+                    addFailure(new TestTimedOutException(timeout, TimeUnit.MILLISECONDS));
                 } catch (Exception e) {
                     addFailure(e);
                 }

File: src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java
Patch:
@@ -11,6 +11,7 @@
 
 import org.junit.runners.model.MultipleFailureException;
 import org.junit.runners.model.Statement;
+import org.junit.runners.model.TestTimedOutException;
 
 public class FailOnTimeout extends Statement {
     private final Statement fOriginalStatement;
@@ -68,8 +69,7 @@ private Throwable getResult(FutureTask<Throwable> task, Thread thread) {
     private Exception createTimeoutException(Thread thread) {
         StackTraceElement[] stackTrace = thread.getStackTrace();
         final Thread stuckThread = fLookForStuckThread ? getStuckThread(thread) : null;
-        Exception currThreadException = new Exception(String.format(
-                "test timed out after %d %s", fTimeout, fTimeUnit.name().toLowerCase()));
+        Exception currThreadException = new TestTimedOutException(fTimeout, fTimeUnit);
         if (stackTrace != null) {
             currThreadException.setStackTrace(stackTrace);
             thread.interrupt();

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -58,6 +58,7 @@
 import org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints;
 import org.junit.tests.experimental.theories.runner.WithDataPointMethod;
 import org.junit.tests.experimental.theories.runner.WithNamedDataPoints;
+import org.junit.tests.internal.runners.statements.FailOnTimeoutTest;
 import org.junit.tests.junit3compatibility.AllTestsTest;
 import org.junit.tests.junit3compatibility.ClassRequestTest;
 import org.junit.tests.junit3compatibility.ForwardCompatibilityTest;
@@ -200,6 +201,7 @@
         CategoryFilterFactoryTest.class,
         FrameworkFieldTest.class,
         FrameworkMethodTest.class,
+        FailOnTimeoutTest.class,
         JUnitCoreTest.class
 })
 public class AllTests {

File: src/main/java/org/junit/experimental/categories/CategoryFilterFactory.java
Patch:
@@ -32,9 +32,9 @@ public Filter createFilter(FilterFactoryParams params) throws FilterNotCreatedEx
      *
      * @param categories Category classes.
      */
-    protected abstract Filter createFilter(Class<?>... categories);
+    protected abstract Filter createFilter(List<Class<?>> categories);
 
-    private Class<?>[] parseCategories(String categories) throws ClassNotFoundException {
+    private List<Class<?>> parseCategories(String categories) throws ClassNotFoundException {
         List<Class<?>> categoryClasses = new ArrayList<Class<?>>();
 
         for (String category : categories.split(",")) {
@@ -43,6 +43,6 @@ private Class<?>[] parseCategories(String categories) throws ClassNotFoundExcept
             categoryClasses.add(categoryClass);
         }
 
-        return categoryClasses.toArray(new Class[]{});
+        return categoryClasses;
     }
 }

File: src/test/java/org/junit/tests/experimental/MatcherTest.java
Patch:
@@ -30,7 +30,7 @@ public class MatcherTest {
             Arrays.asList(failure("cheese"), failure("mustard")));
 
     @Theory
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     public void differentMatchersHaveDifferentDescriptions(
             Matcher matcher1, Matcher matcher2, Object value) {
         assumeThat(value, matcher1);

File: src/test/java/org/junit/tests/experimental/rules/BlockJUnit4ClassRunnerOverrideTest.java
Patch:
@@ -18,7 +18,6 @@
 import org.junit.runners.model.InitializationError;
 import org.junit.runners.model.Statement;
 
-@SuppressWarnings("deprecation")
 public class BlockJUnit4ClassRunnerOverrideTest {
     public static class FlipBitRule implements MethodRule {
         public Statement apply(final Statement base, FrameworkMethod method,

File: src/test/java/org/junit/tests/experimental/rules/MethodRulesTest.java
Patch:
@@ -9,7 +9,6 @@
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining;
 import static org.junit.experimental.results.ResultMatchers.isSuccessful;
-
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -251,7 +250,6 @@ public void validateWrongTypedFieldInSuperclass() {
     }
 
     public static class PrivateRule {
-        @SuppressWarnings("unused")
         @Rule
         private TestRule rule = new TestName();
 

File: src/test/java/org/junit/tests/experimental/rules/RuleFieldValidatorTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.junit.runners.model.Statement;
 import org.junit.runners.model.TestClass;
 
-@SuppressWarnings("deprecation")
 public class RuleFieldValidatorTest {
     private final List<Throwable> errors = new ArrayList<Throwable>();
 

File: src/test/java/org/junit/tests/experimental/rules/TestWatcherTest.java
Patch:
@@ -1,14 +1,13 @@
 package org.junit.tests.experimental.rules;
 
-import static junit.framework.Assert.fail;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
+import static org.junit.Assert.fail;
 import static org.junit.Assume.assumeTrue;
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.experimental.results.ResultMatchers.failureCountIs;
 import static org.junit.experimental.results.ResultMatchers.hasFailureContaining;
 import static org.junit.runner.JUnitCore.runClasses;
-
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.experimental.results.PrintableResult;

File: src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java
Patch:
@@ -134,6 +134,5 @@ private void assertClassHasFailureMessage(Class<?> klass, String message) {
         assertThat(result.getFailureCount(), is(2)); //the second failure is no runnable methods
         assertThat(result.getFailures().get(0).getMessage(),
                 is(equalTo(message)));
-
     }
 }

File: src/main/java/org/junit/Rule.java
Patch:
@@ -17,10 +17,11 @@
  * then the {@link Test} method, and finally any {@link After} methods,
  * throwing an exception if any of these fail.  If there are multiple
  * annotated {@link Rule}s on a class, they will be applied in order of fields first, then methods.
- * However, if there are mutliple fields (or methods) they will be applied in an order
+ * However, if there are multiple fields (or methods) they will be applied in an order
  * that depends on your JVM's implementation of the reflection API, which is
  * undefined, in general. Rules defined by fields will always be applied
- * before Rules defined by methods.
+ * before Rules defined by methods. You can use a {@link org.junit.rules.RuleChain} if you want
+ * to have control over the order in which the Rules are applied.
  * <p>
  * For example, here is a test class that creates a temporary folder before
  * each test method, and deletes it after each:

File: src/main/java/org/junit/experimental/theories/internal/ParameterizedAssertionError.java
Patch:
@@ -4,13 +4,13 @@
 import java.util.Collection;
 import java.util.Iterator;
 
-public class ParameterizedAssertionError extends RuntimeException {
+public class ParameterizedAssertionError extends AssertionError {
     private static final long serialVersionUID = 1L;
 
     public ParameterizedAssertionError(Throwable targetException,
             String methodName, Object... params) {
-        super(String.format("%s(%s)", methodName, join(", ", params)),
-                targetException);
+        super(String.format("%s(%s)", methodName, join(", ", params)));
+        this.initCause(targetException);
     }
 
     @Override

File: src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java
Patch:
@@ -17,7 +17,7 @@ public class FailOnTimeout extends Statement {
     private final TimeUnit fTimeUnit;
     private final long fTimeout;
     private final boolean fLookForStuckThread;
-    private ThreadGroup fThreadGroup = null;
+    private volatile ThreadGroup fThreadGroup = null;
 
     public FailOnTimeout(Statement originalStatement, long millis) {
         this(originalStatement, millis, TimeUnit.MILLISECONDS);

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -135,7 +135,8 @@
 public class Parameterized extends Suite {
     /**
      * Annotation for a method which provides parameters to be injected into the
-     * test class constructor by <code>Parameterized</code>
+     * test class constructor by <code>Parameterized</code>. The method has to
+     * be public and static.
      */
     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.METHOD)

File: src/test/java/junit/samples/ListTest.java
Patch:
@@ -8,7 +8,7 @@
 import junit.framework.TestSuite;
 
 /**
- * A sample test case, testing {@link java.util.Vector}.
+ * A sample test case, testing {@link java.util.ArrayList}.
  */
 public class ListTest extends TestCase {
     protected List<Integer> fEmpty;

File: src/test/java/org/junit/samples/ListTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.Test;
 
 /**
- * A sample test case, testing {@link java.util.Vector}.
+ * A sample test case, testing {@link java.util.ArrayList}.
  */
 public class ListTest {
     protected List<Integer> fEmpty;

File: src/test/java/org/junit/tests/running/methods/TimeoutTest.java
Patch:
@@ -199,7 +199,7 @@ public void failure(boolean mainThreadStalls) throws Exception {
     
     public static class InfiniteLoopWithStuckThreadTest {
         @Rule
-        public TestRule globalTimeout = new Timeout(100, TimeUnit.MILLISECONDS).lookForStuckThread(true);
+        public TestRule globalTimeout = new Timeout(100, TimeUnit.MILLISECONDS).lookingForStuckThread(true);
 
         @Test
         public void failure() throws Exception {
@@ -209,7 +209,7 @@ public void failure() throws Exception {
     
     public static class InfiniteLoopStuckInMainThreadTest {
         @Rule
-        public TestRule globalTimeout = new Timeout(100, TimeUnit.MILLISECONDS).lookForStuckThread(true);
+        public TestRule globalTimeout = new Timeout(100, TimeUnit.MILLISECONDS).lookingForStuckThread(true);
 
         @Test
         public void failure() throws Exception {

File: src/main/java/org/junit/experimental/categories/CategoryFilterFactory.java
Patch:
@@ -32,9 +32,9 @@ public Filter createFilter(FilterFactoryParams params) throws FilterNotCreatedEx
      *
      * @param categories Category classes.
      */
-    protected abstract Filter createFilter(Class<?>... categories);
+    protected abstract Filter createFilter(List<Class<?>> categories);
 
-    private Class<?>[] parseCategories(String categories) throws ClassNotFoundException {
+    private List<Class<?>> parseCategories(String categories) throws ClassNotFoundException {
         List<Class<?>> categoryClasses = new ArrayList<Class<?>>();
 
         for (String category : categories.split(",")) {
@@ -43,6 +43,6 @@ private Class<?>[] parseCategories(String categories) throws ClassNotFoundExcept
             categoryClasses.add(categoryClass);
         }
 
-        return categoryClasses.toArray(new Class[]{});
+        return categoryClasses;
     }
 }

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -135,7 +135,8 @@
 public class Parameterized extends Suite {
     /**
      * Annotation for a method which provides parameters to be injected into the
-     * test class constructor by <code>Parameterized</code>
+     * test class constructor by <code>Parameterized</code>. The method has to
+     * be public and static.
      */
     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.METHOD)

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -135,7 +135,8 @@
 public class Parameterized extends Suite {
     /**
      * Annotation for a method which provides parameters to be injected into the
-     * test class constructor by <code>Parameterized</code>
+     * test class constructor by <code>Parameterized</code>. The method has to
+     * be public and static.
      */
     @Retention(RetentionPolicy.RUNTIME)
     @Target(ElementType.METHOD)

File: src/test/java/junit/samples/ListTest.java
Patch:
@@ -8,7 +8,7 @@
 import junit.framework.TestSuite;
 
 /**
- * A sample test case, testing {@link java.util.Vector}.
+ * A sample test case, testing {@link java.util.ArrayList}.
  */
 public class ListTest extends TestCase {
     protected List<Integer> fEmpty;

File: src/test/java/org/junit/samples/ListTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.Test;
 
 /**
- * A sample test case, testing {@link java.util.Vector}.
+ * A sample test case, testing {@link java.util.ArrayList}.
  */
 public class ListTest {
     protected List<Integer> fEmpty;

File: src/main/java/org/junit/experimental/theories/internal/ParameterizedAssertionError.java
Patch:
@@ -4,13 +4,13 @@
 import java.util.Collection;
 import java.util.Iterator;
 
-public class ParameterizedAssertionError extends RuntimeException {
+public class ParameterizedAssertionError extends AssertionError {
     private static final long serialVersionUID = 1L;
 
     public ParameterizedAssertionError(Throwable targetException,
             String methodName, Object... params) {
-        super(String.format("%s(%s)", methodName, join(", ", params)),
-                targetException);
+        super(String.format("%s(%s)", methodName, join(", ", params)));
+        this.initCause(targetException);
     }
 
     @Override

File: src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java
Patch:
@@ -17,7 +17,7 @@ public class FailOnTimeout extends Statement {
     private final TimeUnit fTimeUnit;
     private final long fTimeout;
     private final boolean fLookForStuckThread;
-    private ThreadGroup fThreadGroup = null;
+    private volatile ThreadGroup fThreadGroup = null;
 
     public FailOnTimeout(Statement originalStatement, long millis) {
         this(originalStatement, millis, TimeUnit.MILLISECONDS);

File: src/test/java/org/junit/tests/running/methods/TimeoutTest.java
Patch:
@@ -199,7 +199,7 @@ public void failure(boolean mainThreadStalls) throws Exception {
     
     public static class InfiniteLoopWithStuckThreadTest {
         @Rule
-        public TestRule globalTimeout = new Timeout(100, TimeUnit.MILLISECONDS).lookForStuckThread(true);
+        public TestRule globalTimeout = new Timeout(100, TimeUnit.MILLISECONDS).lookingForStuckThread(true);
 
         @Test
         public void failure() throws Exception {
@@ -209,7 +209,7 @@ public void failure() throws Exception {
     
     public static class InfiniteLoopStuckInMainThreadTest {
         @Rule
-        public TestRule globalTimeout = new Timeout(100, TimeUnit.MILLISECONDS).lookForStuckThread(true);
+        public TestRule globalTimeout = new Timeout(100, TimeUnit.MILLISECONDS).lookingForStuckThread(true);
 
         @Test
         public void failure() throws Exception {

File: src/main/java/org/junit/Rule.java
Patch:
@@ -17,10 +17,11 @@
  * then the {@link Test} method, and finally any {@link After} methods,
  * throwing an exception if any of these fail.  If there are multiple
  * annotated {@link Rule}s on a class, they will be applied in order of fields first, then methods.
- * However, if there are mutliple fields (or methods) they will be applied in an order
+ * However, if there are multiple fields (or methods) they will be applied in an order
  * that depends on your JVM's implementation of the reflection API, which is
  * undefined, in general. Rules defined by fields will always be applied
- * before Rules defined by methods.
+ * before Rules defined by methods. You can use a {@link org.junit.rules.RuleChain} if you want
+ * to have control over the order in which the Rules are applied.
  * <p>
  * For example, here is a test class that creates a temporary folder before
  * each test method, and deletes it after each:

File: src/main/java/org/junit/Rule.java
Patch:
@@ -17,10 +17,11 @@
  * then the {@link Test} method, and finally any {@link After} methods,
  * throwing an exception if any of these fail.  If there are multiple
  * annotated {@link Rule}s on a class, they will be applied in order of fields first, then methods.
- * However, if there are mutliple fields (or methods) they will be applied in an order
+ * However, if there are multiple fields (or methods) they will be applied in an order
  * that depends on your JVM's implementation of the reflection API, which is
  * undefined, in general. Rules defined by fields will always be applied
- * before Rules defined by methods.
+ * before Rules defined by methods. You can use a {@link org.junit.rules.RuleChain} if you want
+ * to have control over the order in which the Rules are applied.
  * <p>
  * For example, here is a test class that creates a temporary folder before
  * each test method, and deletes it after each:

File: src/main/java/org/junit/experimental/theories/internal/ParameterizedAssertionError.java
Patch:
@@ -4,13 +4,13 @@
 import java.util.Collection;
 import java.util.Iterator;
 
-public class ParameterizedAssertionError extends RuntimeException {
+public class ParameterizedAssertionError extends AssertionError {
     private static final long serialVersionUID = 1L;
 
     public ParameterizedAssertionError(Throwable targetException,
             String methodName, Object... params) {
-        super(String.format("%s(%s)", methodName, join(", ", params)),
-                targetException);
+        super(String.format("%s(%s)", methodName, join(", ", params)));
+        this.initCause(targetException);
     }
 
     @Override

File: src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java
Patch:
@@ -68,7 +68,7 @@ private Throwable getResult(FutureTask<Throwable> task, Thread thread) {
     private Exception createTimeoutException(Thread thread) {
         StackTraceElement[] stackTrace = thread.getStackTrace();
         final Thread stuckThread = fLookForStuckThread ? getStuckThread(thread) : null;
-        Exception currThreadException = new Exception(String.format(
+        Exception currThreadException = new TestFailedOnTimeoutException(String.format(
                 "test timed out after %d %s", fTimeout, fTimeUnit.name().toLowerCase()));
         if (stackTrace != null) {
             currThreadException.setStackTrace(stackTrace);

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -56,6 +56,7 @@
 import org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints;
 import org.junit.tests.experimental.theories.runner.WithDataPointMethod;
 import org.junit.tests.experimental.theories.runner.WithNamedDataPoints;
+import org.junit.tests.internal.runners.statements.FailOnTimeoutTest;
 import org.junit.tests.junit3compatibility.AllTestsTest;
 import org.junit.tests.junit3compatibility.ClassRequestTest;
 import org.junit.tests.junit3compatibility.ForwardCompatibilityTest;
@@ -196,7 +197,8 @@
         JUnitCommandLineParseResultTest.class,
         FilterFactoriesTest.class,
         CategoryFilterFactoryTest.class,
-        JUnitCoreTest.class
+        JUnitCoreTest.class,
+        FailOnTimeoutTest.class
 })
 public class AllTests {
     public static Test suite() {

File: src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java
Patch:
@@ -104,7 +104,6 @@ private boolean isTestRule(FrameworkMember<?> member) {
         return TestRule.class.isAssignableFrom(member.getType());
     }
 
-    @SuppressWarnings("deprecation")
     private boolean isMethodRule(FrameworkMember<?> member) {
         return MethodRule.class.isAssignableFrom(member.getType());
     }

File: src/test/java/org/junit/tests/experimental/MatcherTest.java
Patch:
@@ -30,7 +30,7 @@ public class MatcherTest {
             Arrays.asList(failure("cheese"), failure("mustard")));
 
     @Theory
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     public void differentMatchersHaveDifferentDescriptions(
             Matcher matcher1, Matcher matcher2, Object value) {
         assumeThat(value, matcher1);

File: src/test/java/org/junit/tests/experimental/rules/BlockJUnit4ClassRunnerOverrideTest.java
Patch:
@@ -18,7 +18,6 @@
 import org.junit.runners.model.InitializationError;
 import org.junit.runners.model.Statement;
 
-@SuppressWarnings("deprecation")
 public class BlockJUnit4ClassRunnerOverrideTest {
     public static class FlipBitRule implements MethodRule {
         public Statement apply(final Statement base, FrameworkMethod method,

File: src/test/java/org/junit/tests/experimental/rules/MethodRulesTest.java
Patch:
@@ -9,7 +9,6 @@
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining;
 import static org.junit.experimental.results.ResultMatchers.isSuccessful;
-
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -251,7 +250,6 @@ public void validateWrongTypedFieldInSuperclass() {
     }
 
     public static class PrivateRule {
-        @SuppressWarnings("unused")
         @Rule
         private TestRule rule = new TestName();
 

File: src/test/java/org/junit/tests/experimental/rules/RuleFieldValidatorTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.junit.runners.model.Statement;
 import org.junit.runners.model.TestClass;
 
-@SuppressWarnings("deprecation")
 public class RuleFieldValidatorTest {
     private final List<Throwable> errors = new ArrayList<Throwable>();
 

File: src/test/java/org/junit/tests/experimental/rules/TestWatcherTest.java
Patch:
@@ -1,14 +1,13 @@
 package org.junit.tests.experimental.rules;
 
-import static junit.framework.Assert.fail;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
+import static org.junit.Assert.fail;
 import static org.junit.Assume.assumeTrue;
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.experimental.results.ResultMatchers.failureCountIs;
 import static org.junit.experimental.results.ResultMatchers.hasFailureContaining;
 import static org.junit.runner.JUnitCore.runClasses;
-
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.experimental.results.PrintableResult;

File: src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java
Patch:
@@ -17,7 +17,7 @@ public class FailOnTimeout extends Statement {
     private final TimeUnit fTimeUnit;
     private final long fTimeout;
     private final boolean fLookForStuckThread;
-    private ThreadGroup fThreadGroup = null;
+    private volatile ThreadGroup fThreadGroup = null;
 
     public FailOnTimeout(Statement originalStatement, long millis) {
         this(originalStatement, millis, TimeUnit.MILLISECONDS);

File: src/test/java/org/junit/tests/running/methods/TimeoutTest.java
Patch:
@@ -199,7 +199,7 @@ public void failure(boolean mainThreadStalls) throws Exception {
     
     public static class InfiniteLoopWithStuckThreadTest {
         @Rule
-        public TestRule globalTimeout = new Timeout(100, TimeUnit.MILLISECONDS).lookForStuckThread(true);
+        public TestRule globalTimeout = new Timeout(100, TimeUnit.MILLISECONDS).lookingForStuckThread(true);
 
         @Test
         public void failure() throws Exception {
@@ -209,7 +209,7 @@ public void failure() throws Exception {
     
     public static class InfiniteLoopStuckInMainThreadTest {
         @Rule
-        public TestRule globalTimeout = new Timeout(100, TimeUnit.MILLISECONDS).lookForStuckThread(true);
+        public TestRule globalTimeout = new Timeout(100, TimeUnit.MILLISECONDS).lookingForStuckThread(true);
 
         @Test
         public void failure() throws Exception {

File: src/main/java/org/junit/runners/model/FrameworkMethod.java
Patch:
@@ -114,7 +114,7 @@ public boolean isStatic() {
     public boolean isPublic() {
         return Modifier.isPublic(fMethod.getModifiers());
     }
-
+    
     /**
      * Returns the return type of the method
      */

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -74,6 +74,7 @@
 import org.junit.tests.manipulation.SingleMethodTest;
 import org.junit.tests.manipulation.SortableTest;
 import org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest;
+import org.junit.tests.running.classes.ClassLevelMethodsWithIgnoredTestsTest;
 import org.junit.tests.running.classes.EnclosedTest;
 import org.junit.tests.running.classes.IgnoreClassTest;
 import org.junit.tests.running.classes.ParameterizedTestTest;
@@ -130,6 +131,7 @@
         ParameterizedTestMethodTest.class,
         InitializationErrorForwardCompatibilityTest.class,
         SingleMethodTest.class,
+        ClassLevelMethodsWithIgnoredTestsTest.class,
         ValidationTest.class,
         UserStopTest.class,
         SortableTest.class,

File: src/main/java/org/junit/experimental/categories/Category.java
Patch:
@@ -4,6 +4,8 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
+import org.junit.validator.ValidateWith;
+
 /**
  * Marks a test class or test method as belonging to one or more categories of tests.
  * The value is an array of arbitrary classes.
@@ -40,6 +42,7 @@
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Inherited
+@ValidateWith(CategoryValidator.class)
 public @interface Category {
     Class<?>[] value();
 }
\ No newline at end of file

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -276,7 +276,7 @@ private void runChildren(final RunNotifier notifier,
             Collection<T> filteredChildren) {
         final RunnerScheduler scheduler= fScheduler;
         try {
-            for (final T each : getFilteredChildren()) {
+            for (final T each : filteredChildren) {
                 scheduler.schedule(new Runnable() {
                     public void run() {
                         ParentRunner.this.runChild(each, notifier);

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -93,6 +93,7 @@
 import org.junit.tests.running.methods.TestMethodTest;
 import org.junit.tests.running.methods.TimeoutTest;
 import org.junit.tests.validation.BadlyFormedClassesTest;
+import org.junit.tests.validation.ClassLevelMethodsOnlyRunWhenNecessaryTest;
 import org.junit.tests.validation.FailedConstructionTest;
 import org.junit.tests.validation.InaccessibleBaseClassTest;
 import org.junit.tests.validation.ValidationTest;
@@ -130,6 +131,7 @@
         ParameterizedTestMethodTest.class,
         InitializationErrorForwardCompatibilityTest.class,
         SingleMethodTest.class,
+        ClassLevelMethodsOnlyRunWhenNecessaryTest.class,
         ValidationTest.class,
         UserStopTest.class,
         SortableTest.class,

File: src/main/java/org/junit/experimental/categories/Category.java
Patch:
@@ -1,11 +1,11 @@
 package org.junit.experimental.categories;
 
-import org.junit.experimental.validator.ValidateWith;
-
 import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
+import org.junit.validator.ValidateWith;
+
 /**
  * Marks a test class or test method as belonging to one or more categories of tests.
  * The value is an array of arbitrary classes.

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -17,9 +17,9 @@
 import org.junit.BeforeClass;
 import org.junit.ClassRule;
 import org.junit.Rule;
-import org.junit.experimental.validator.AnnotationValidator;
-import org.junit.experimental.validator.AnnotationValidatorFactory;
-import org.junit.experimental.validator.ValidateWith;
+import org.junit.validator.AnnotationValidator;
+import org.junit.validator.AnnotationValidatorFactory;
+import org.junit.validator.ValidateWith;
 import org.junit.internal.AssumptionViolatedException;
 import org.junit.internal.runners.model.EachTestNotifier;
 import org.junit.internal.runners.statements.RunAfters;

File: src/main/java/org/junit/validator/AnnotationValidator.java
Patch:
@@ -1,4 +1,4 @@
-package org.junit.experimental.validator;
+package org.junit.validator;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;

File: src/main/java/org/junit/validator/AnnotationValidatorFactory.java
Patch:
@@ -1,4 +1,4 @@
-package org.junit.experimental.validator;
+package org.junit.validator;
 
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -12,7 +12,7 @@ public class AnnotationValidatorFactory {
 
     /**
      * Creates the AnnotationValidator specified by the value in
-     * {@link org.junit.experimental.validator.ValidateWith}. Instances are
+     * {@link org.junit.validator.ValidateWith}. Instances are
      * cached.
      *
      * @param validateWithAnnotation

File: src/main/java/org/junit/validator/ValidateWith.java
Patch:
@@ -1,4 +1,4 @@
-package org.junit.experimental.validator;
+package org.junit.validator;
 
 import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;

File: src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java
Patch:
@@ -3,8 +3,8 @@
 import org.hamcrest.Matcher;
 import org.hamcrest.TypeSafeMatcher;
 import org.junit.Test;
-import org.junit.experimental.validator.AnnotationValidator;
-import org.junit.experimental.validator.ValidateWith;
+import org.junit.validator.AnnotationValidator;
+import org.junit.validator.ValidateWith;
 import org.junit.runner.Description;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Request;

File: src/test/java/org/junit/validator/AnnotationValidatorFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.junit.experimental.validator;
+package org.junit.validator;
 
 import org.junit.Rule;
 import org.junit.Test;
@@ -26,7 +26,7 @@ public void createAnnotationValidator() {
     public void exceptionWhenAnnotationWithNullClassIsPassedIn() {
         exception.expect(IllegalArgumentException.class);
         exception.expectMessage("Can't create validator, value is null in " +
-                "annotation org.junit.experimental.validator.AnnotationValidatorFactoryTest$ValidatorWithNullValue");
+                "annotation org.junit.validator.AnnotationValidatorFactoryTest$ValidatorWithNullValue");
 
         new AnnotationValidatorFactory().createAnnotationValidator(new ValidatorWithNullValue());
     }
@@ -54,7 +54,7 @@ public void exceptionWhenAnnotationValidatorCantBeCreated() {
         ValidateWith validateWith = SampleTestWithValidatorThatThrowsException.class.getAnnotation(ValidateWith.class);
         exception.expect(RuntimeException.class);
         exception.expectMessage("Exception received when creating AnnotationValidator class " +
-                "org.junit.experimental.validator.AnnotationValidatorFactoryTest$ValidatorThatThrowsException");
+                "org.junit.validator.AnnotationValidatorFactoryTest$ValidatorThatThrowsException");
         new AnnotationValidatorFactory().createAnnotationValidator(validateWith);
     }
 

File: src/main/java/org/junit/runners/model/TestClass.java
Patch:
@@ -101,15 +101,15 @@ public List<FrameworkField> getAnnotatedFields(
     }
 
     /**
-     * @return a Map between annotations and non-overridden methods that have
+     * Gets a {@code Map} between annotations and methods that have
      * the annotation in this class or its superclasses.
      */
     public Map<Class<? extends Annotation>, List<FrameworkMethod>> getAnnotationToMethods() {
         return Collections.unmodifiableMap(fMethodsForAnnotations);
     }
 
     /**
-     * @return a Map between annotations and fields that have
+     * Gets a {@code Map} between annotations and fields that have
      * the annotation in this class or its superclasses.
      */
     public Map<Class<? extends Annotation>, List<FrameworkField>> getAnnotationToFields() {

File: src/test/java/org/junit/experimental/validator/AnnotationValidatorFactoryTest.java
Patch:
@@ -51,11 +51,10 @@ public static class Validator extends AnnotationValidator {
 
     @Test
     public void exceptionWhenAnnotationValidatorCantBeCreated() {
+        ValidateWith validateWith = SampleTestWithValidatorThatThrowsException.class.getAnnotation(ValidateWith.class);
         exception.expect(RuntimeException.class);
         exception.expectMessage("Exception received when creating AnnotationValidator class " +
                 "org.junit.experimental.validator.AnnotationValidatorFactoryTest$ValidatorThatThrowsException");
-
-        ValidateWith validateWith = SampleTestWithValidatorThatThrowsException.class.getAnnotation(ValidateWith.class);
         new AnnotationValidatorFactory().createAnnotationValidator(validateWith);
     }
 

File: src/test/java/org/junit/tests/running/methods/TimeoutTest.java
Patch:
@@ -172,7 +172,7 @@ public void run() {
                 if (fStall)
                     for (; ; ) ;   
                 try {
-                    Thread.sleep (50);
+                    Thread.sleep (500);
                 } catch (InterruptedException e) {
                 }
             }

File: src/main/java/org/junit/internal/Throwables.java
Patch:
@@ -15,7 +15,7 @@ private Throwables() {
      * Rethrows the given {@code Throwable}, allowing the caller to
      * declare that it throws {@code Exception}. This is useful when
      * your callers have nothing reasonable they can do when a
-     * {@code Throwable} is thrown. This is declared to throw {@code Exception}
+     * {@code Throwable} is thrown. This is declared to return {@code Exception}
      * so it can be used in a {@code throw} clause:
      * <pre>
      * try {
@@ -26,8 +26,6 @@ private Throwables() {
      * doSomethingLater();
      * </pre>
      *
-     *
-     *
      * @param e exception to rethrow
      * @return does not return anything
      * @since 4.12

File: src/main/java/junit/runner/BaseTestRunner.java
Patch:
@@ -232,7 +232,8 @@ private static void readPreferences() {
             is = new FileInputStream(getPreferencesFile());
             setPreferences(new Properties(getPreferences()));
             getPreferences().load(is);
-        } catch (IOException e) {
+        } catch (IOException ignored) {
+        } finally {
             try {
                 if (is != null) {
                     is.close();

File: src/main/java/junit/runner/BaseTestRunner.java
Patch:
@@ -232,7 +232,8 @@ private static void readPreferences() {
             is = new FileInputStream(getPreferencesFile());
             setPreferences(new Properties(getPreferences()));
             getPreferences().load(is);
-        } catch (IOException e) {
+        } catch (IOException ignored) {
+        } finally {
             try {
                 if (is != null) {
                     is.close();

File: src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java
Patch:
@@ -128,7 +128,7 @@ private static Description makeDescription(Test test) {
      */
     private static Annotation[] getAnnotations(TestCase test) {
         try {
-            Method m = test.getClass().getDeclaredMethod(test.getName());
+            Method m = test.getClass().getMethod(test.getName());
             return m.getDeclaredAnnotations();
         } catch (SecurityException e) {
         } catch (NoSuchMethodException e) {

File: src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java
Patch:
@@ -129,7 +129,7 @@ private static Description makeDescription(Test test) {
      */
     private static Annotation[] getAnnotations(TestCase test) {
         try {
-            Method m = test.getClass().getDeclaredMethod(test.getName());
+            Method m = test.getClass().getMethod(test.getName());
             return m.getDeclaredAnnotations();
         } catch (SecurityException e) {
         } catch (NoSuchMethodException e) {

File: src/main/java/org/junit/experimental/categories/ExcludeCategories.java
Patch:
@@ -26,8 +26,8 @@
  */
 public final class ExcludeCategories extends CategoryFilterFactory {
     /**
-     * Creates an {@link ExcludesAny} {@link CategoryFilter} given an array of classes used as
-     * {@link Category} values.
+     * Creates a {@link Filter} which is only passed by tests that are
+     * not categorized with any of the specified categories.
      *
      * @param categories Category classes.
      */

File: src/main/java/org/junit/experimental/categories/IncludeCategories.java
Patch:
@@ -26,8 +26,8 @@
  */
 public final class IncludeCategories extends CategoryFilterFactory {
     /**
-     * Creates an {@link IncludesAny} {@link CategoryFilter} given an array of classes used as
-     * {@link Category} values.
+     * Creates a {@link Filter} which is only passed by tests that are
+     * categorized with any of the specified categories.
      *
      * @param categories Category classes.
      */

File: src/main/java/org/junit/experimental/runners/Enclosed.java
Patch:
@@ -22,8 +22,6 @@
  *     abstract public static class Ignored {...}
  * }
  * </pre>
- *
- * @see org.junit.tests.manipulation.SortableTest
  */
 public class Enclosed extends Suite {
     /**

File: src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java
Patch:
@@ -124,8 +124,7 @@ private static Description makeDescription(Test test) {
 
     /**
      * Get the annotations associated with given TestCase.
-     * @param test
-     * @return
+     * @param test the TestCase.
      */
     private static Annotation[] getAnnotations(TestCase test) {
         try {

File: src/main/java/org/junit/runner/notification/RunNotifier.java
Patch:
@@ -3,7 +3,6 @@
 import static java.util.Arrays.asList;
 
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 
@@ -180,7 +179,7 @@ protected void notifyListener(RunListener each) throws Exception {
 
     /**
      * Invoke to tell listeners that an atomic test finished. Always invoke
-     * {@link #fireTestFinished(Description)} if you invoke {@link #fireTestStarted(Description)}
+     * this method if you invoke {@link #fireTestStarted(Description)}
      * as listeners are likely to expect them to come in pairs.
      *
      * @param description the description of the test that finished

File: src/main/java/org/junit/runner/JUnitCore.java
Patch:
@@ -64,7 +64,7 @@ public static Result runClasses(Computer computer, Class<?>... classes) {
 
     /**
      * @param system
-     * @args args from main()
+     * @param args from main()
      */
     Result runMain(JUnitSystem system, String... args) {
         system.out().println("JUnit version " + Version.id());

File: src/main/java/org/junit/experimental/theories/Theories.java
Patch:
@@ -104,7 +104,7 @@ private void validateParameterSupplier(Class<? extends ParameterSupplier> suppli
 
     @Override
     protected List<FrameworkMethod> computeTestMethods() {
-        List<FrameworkMethod> testMethods = super.computeTestMethods();
+        List<FrameworkMethod> testMethods = new ArrayList<FrameworkMethod>(super.computeTestMethods());
         List<FrameworkMethod> theoryMethods = getTestClass().getAnnotatedMethods(Theory.class);
         testMethods.removeAll(theoryMethods);
         testMethods.addAll(theoryMethods);

File: src/main/java/org/junit/internal/builders/AnnotatedBuilder.java
Patch:
@@ -8,7 +8,7 @@
 public class AnnotatedBuilder extends RunnerBuilder {
     private static final String CONSTRUCTOR_ERROR_FORMAT = "Custom runner class %s should have a public constructor with signature %s(Class testClass)";
 
-    private RunnerBuilder fSuiteBuilder;
+    private final RunnerBuilder fSuiteBuilder;
 
     public AnnotatedBuilder(RunnerBuilder suiteBuilder) {
         fSuiteBuilder = suiteBuilder;

File: src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.reflect.Method;
 
 public class JUnit38ClassRunner extends Runner implements Filterable, Sortable {
-    private final class OldTestClassAdaptingListener implements
+    private static final class OldTestClassAdaptingListener implements
             TestListener {
         private final RunNotifier fNotifier;
 
@@ -68,7 +68,7 @@ public void addFailure(Test test, AssertionFailedError t) {
         }
     }
 
-    private Test fTest;
+    private volatile Test fTest;
 
     public JUnit38ClassRunner(Class<?> klass) {
         this(new TestSuite(klass.asSubclass(TestCase.class)));

File: src/main/java/org/junit/runners/Suite.java
Patch:
@@ -5,6 +5,7 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
+import java.util.Collections;
 import java.util.List;
 
 import org.junit.internal.builders.AllDefaultPossibilitiesBuilder;
@@ -109,7 +110,7 @@ protected Suite(RunnerBuilder builder, Class<?> klass, Class<?>[] suiteClasses)
      */
     protected Suite(Class<?> klass, List<Runner> runners) throws InitializationError {
         super(klass);
-        fRunners = runners;
+        fRunners = Collections.unmodifiableList(runners);
     }
 
     @Override

File: src/main/java/org/junit/rules/MethodRule.java
Patch:
@@ -36,9 +36,9 @@ public interface MethodRule {
      *
      * @param base The {@link Statement} to be modified
      * @param method The method to be run
-     * @param target The object on with the method will be run.
+     * @param target The object on which the method will be run.
      * @return a new statement, which may be the same as {@code base},
      *         a wrapper around {@code base}, or a completely new Statement.
      */
     Statement apply(Statement base, FrameworkMethod method, Object target);
-}
\ No newline at end of file
+}

File: src/main/java/org/junit/rules/MethodRule.java
Patch:
@@ -36,9 +36,9 @@ public interface MethodRule {
      *
      * @param base The {@link Statement} to be modified
      * @param method The method to be run
-     * @param target The object on with the method will be run.
+     * @param target The object on which the method will be run.
      * @return a new statement, which may be the same as {@code base},
      *         a wrapper around {@code base}, or a completely new Statement.
      */
     Statement apply(Statement base, FrameworkMethod method, Object target);
-}
\ No newline at end of file
+}

File: src/test/java/org/junit/tests/assertion/ComparisonFailureTest.java
Patch:
@@ -31,10 +31,10 @@ public static Collection<Object[]> data() {
 			// common prefix
 			{ "ba", "bc", "expected:<b[a]> but was:<b[c]>" },
 				
-			// common postfix
+			// common suffix
 			{ "ab", "cb", "expected:<[a]b> but was:<[c]b>" },
 				
-			// common pre and postfix
+			// common pre and suffix
 			{ "abc", "adc", "expected:<a[b]c> but was:<a[d]c>" },
 			
 			// expected is subset of actual
@@ -51,7 +51,7 @@ public static Collection<Object[]> data() {
 				"01234567890123456789PRE:world:POST",
 				"expected:<...4567890123456789PRE:[hello]:POST> but was:<...4567890123456789PRE:[world]:POST>" },
 					
-			// long postfix	yielding "..."
+			// long suffix	yielding "..."
 			{ "PRE:hello:01234567890123456789POST",
 				"PRE:world:01234567890123456789POST",
 				"expected:<PRE:[hello]:0123456789012345678...> but was:<PRE:[world]:0123456789012345678...>"	

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -11,6 +11,7 @@
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
 import org.junit.tests.assertion.AssertionTest;
+import org.junit.tests.assertion.ComparisonFailureTest;
 import org.junit.tests.assertion.MultipleFailureExceptionTest;
 import org.junit.tests.deprecated.JUnit4ClassRunnerTest;
 import org.junit.tests.description.AnnotatedDescriptionTest;
@@ -108,6 +109,7 @@
         AssertionTest.class,
         CommandLineTest.class,
         ExpectedTest.class,
+        ComparisonFailureTest.class,
         MultipleFailureExceptionTest.class,
         ForwardCompatibilityTest.class,
         OldTests.class,

File: src/main/java/org/junit/experimental/categories/CategoryFilterFactory.java
Patch:
@@ -14,7 +14,7 @@
 abstract class CategoryFilterFactory implements FilterFactory {
     /**
      * Creates a {@link org.junit.experimental.categories.Categories.CategoryFilter} given a
-     * ${FilterFactoryParams} argument.
+     * {@link FilterFactoryParams} argument.
      *
      * @param params Parameters needed to create the {@link Filter}
      * @throws FilterNotCreatedException

File: src/main/java/org/junit/internal/runners/ErrorReportingRunner.java
Patch:
@@ -53,7 +53,7 @@ private List<Throwable> getCauses(Throwable cause) {
 
     private Description describeCause(Throwable child) {
         return Description.createTestDescription(fTestClass,
-                "initializationError");
+                "initializationError: " + child);
     }
 
     private void runCause(Throwable child, RunNotifier notifier) {
@@ -62,4 +62,4 @@ private void runCause(Throwable child, RunNotifier notifier) {
         notifier.fireTestFailure(new Failure(description, child));
         notifier.fireTestFinished(description);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/junit/experimental/theories/DataPoint.java
Patch:
@@ -52,4 +52,5 @@
 @Target({FIELD, METHOD})
 public @interface DataPoint {
     String[] value() default {};
-}
+    Class<? extends Throwable>[] ignoredExceptions() default {};
+}
\ No newline at end of file

File: src/main/java/org/junit/experimental/theories/DataPoints.java
Patch:
@@ -51,4 +51,5 @@
 @Target({FIELD, METHOD})
 public @interface DataPoints {
     String[] value() default {};
+    Class<? extends Throwable>[] ignoredExceptions() default {};
 }

File: src/main/java/org/junit/experimental/theories/ParameterSupplier.java
Patch:
@@ -3,5 +3,5 @@
 import java.util.List;
 
 public abstract class ParameterSupplier {
-    public abstract List<PotentialAssignment> getValueSources(ParameterSignature sig);
+    public abstract List<PotentialAssignment> getValueSources(ParameterSignature sig) throws Throwable;
 }

File: src/main/java/org/junit/experimental/theories/internal/SpecificDataPointsSupplier.java
Patch:
@@ -33,7 +33,7 @@ protected Collection<Field> getSingleDataPointFields(ParameterSignature sig) {
             }
         }
         
-        return fieldsWithMatchingNames;        
+        return fieldsWithMatchingNames;
     }
     
     @Override

File: src/test/java/org/junit/tests/experimental/theories/TheoryTestUtils.java
Patch:
@@ -18,7 +18,7 @@ public final class TheoryTestUtils {
     private TheoryTestUtils() { }
     
     public static List<PotentialAssignment> potentialAssignments(Method method)
-            throws Exception {
+            throws Throwable {
         return Assignments.allUnassigned(method,
                 new TestClass(method.getDeclaringClass()))
                 .potentialsForNextUnassigned();

File: src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
Patch:
@@ -50,7 +50,7 @@ protected void runWithIncompleteAssignment(Assignments incomplete)
         }
 
         private GuesserQueue createGuesserQueue(Assignments incomplete)
-                throws Exception {
+                throws Throwable {
             ParameterSignature nextUnassigned = incomplete.nextUnassigned();
 
             if (nextUnassigned.hasAnnotation(Stub.class)) {

File: src/test/java/org/junit/tests/experimental/theories/runner/WithNamedDataPoints.java
Patch:
@@ -60,7 +60,7 @@ public void theory(@FromDataPoints("named") String param) {
     }
     
     @Test
-    public void onlyUseSpecificDataPointsIfSpecified() throws Exception {
+    public void onlyUseSpecificDataPointsIfSpecified() throws Throwable {
         List<PotentialAssignment> assignments = potentialAssignments(HasSpecificDatapointsParameters.class
                 .getMethod("theory", String.class));
         

File: src/test/java/org/junit/tests/experimental/theories/runner/WithParameterSupplier.java
Patch:
@@ -73,7 +73,7 @@ public void theoryMethod(@ParametersSuppliedBy(SimpleSupplier.class) String para
     }
 
     @Test
-    public void shouldPickUpDataPointsFromParameterSupplier() throws Exception {
+    public void shouldPickUpDataPointsFromParameterSupplier() throws Throwable {
         List<PotentialAssignment> assignments = potentialAssignments(TestClassUsingParameterSupplier.class
                 .getMethod("theoryMethod", String.class));
 

File: src/main/java/org/junit/experimental/theories/ParameterSignature.java
Patch:
@@ -87,7 +87,7 @@ private boolean isAssignableViaTypeConversion(Class<?> targetType, Class<?> cand
         }
     }
 
-	public Class<?> getType() {
+    public Class<?> getType() {
         return type;
     }
 

File: src/main/java/org/junit/experimental/theories/ParameterSupplier.java
Patch:
@@ -3,5 +3,5 @@
 import java.util.List;
 
 public abstract class ParameterSupplier {
-    public abstract List<PotentialAssignment> getValueSources(ParameterSignature sig);
+    public abstract List<PotentialAssignment> getValueSources(ParameterSignature sig) throws Throwable;
 }

File: src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
Patch:
@@ -50,7 +50,7 @@ protected void runWithIncompleteAssignment(Assignments incomplete)
         }
 
         private GuesserQueue createGuesserQueue(Assignments incomplete)
-                throws Exception {
+                throws Throwable {
             ParameterSignature nextUnassigned = incomplete.nextUnassigned();
 
             if (nextUnassigned.hasAnnotation(Stub.class)) {

File: src/test/java/org/junit/tests/experimental/theories/runner/WithNamedDataPoints.java
Patch:
@@ -60,7 +60,7 @@ public void theory(@FromDataPoints("named") String param) {
     }
     
     @Test
-    public void onlyUseSpecificDataPointsIfSpecified() throws Exception {
+    public void onlyUseSpecificDataPointsIfSpecified() throws Throwable {
         List<PotentialAssignment> assignments = potentialAssignments(HasSpecificDatapointsParameters.class
                 .getMethod("theory", String.class));
         

File: src/test/java/org/junit/tests/experimental/theories/runner/WithParameterSupplier.java
Patch:
@@ -73,7 +73,7 @@ public void theoryMethod(@ParametersSuppliedBy(SimpleSupplier.class) String para
     }
 
     @Test
-    public void shouldPickUpDataPointsFromParameterSupplier() throws Exception {
+    public void shouldPickUpDataPointsFromParameterSupplier() throws Throwable {
         List<PotentialAssignment> assignments = potentialAssignments(TestClassUsingParameterSupplier.class
                 .getMethod("theoryMethod", String.class));
 

File: src/test/java/org/junit/tests/experimental/theories/ParameterSignatureTest.java
Patch:
@@ -79,7 +79,7 @@ public void primitiveTypesShouldBeAcceptedAsWrapperTypeAssignables() throws Exce
         ParameterSignature numberSignature = signatures.get(0);
 
         assertTrue(numberSignature.canAcceptType(int.class));
-    }    
+    }
     
     @Test
     public void wrapperTypesShouldBeAcceptedAsPrimitiveTypes() throws Exception {

File: src/main/java/org/junit/After.java
Patch:
@@ -6,13 +6,13 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>If you allocate external resources in a {@link org.junit.Before} method you need to release them
+ * If you allocate external resources in a {@link org.junit.Before} method you need to release them
  * after the test runs. Annotating a <code>public void</code> method
  * with <code>&#064;After</code> causes that method to be run after the {@link org.junit.Test} method. All <code>&#064;After</code>
  * methods are guaranteed to run even if a {@link org.junit.Before} or {@link org.junit.Test} method throws an
  * exception. The <code>&#064;After</code> methods declared in superclasses will be run after those of the current
- * class, unless they are overridden in the current class.</p>
- *
+ * class, unless they are overridden in the current class.
+ * <p>
  * Here is a simple example:
  * <pre>
  * public class Example {

File: src/main/java/org/junit/AfterClass.java
Patch:
@@ -6,13 +6,13 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>If you allocate expensive external resources in a {@link org.junit.BeforeClass} method you need to release them
+ * If you allocate expensive external resources in a {@link org.junit.BeforeClass} method you need to release them
  * after all the tests in the class have run. Annotating a <code>public static void</code> method
  * with <code>&#064;AfterClass</code> causes that method to be run after all the tests in the class have been run. All <code>&#064;AfterClass</code>
  * methods are guaranteed to run even if a {@link org.junit.BeforeClass} method throws an
  * exception. The <code>&#064;AfterClass</code> methods declared in superclasses will be run after those of the current
- * class, unless they are shadowed in the current class.</p>
- *
+ * class, unless they are shadowed in the current class.
+ * <p>
  * Here is a simple example:
  * <pre>
  * public class Example {

File: src/main/java/org/junit/Before.java
Patch:
@@ -6,13 +6,12 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>When writing tests, it is common to find that several tests need similar
+ * When writing tests, it is common to find that several tests need similar
  * objects created before they can run. Annotating a <code>public void</code> method
  * with <code>&#064;Before</code> causes that method to be run before the {@link org.junit.Test} method.
  * The <code>&#064;Before</code> methods of superclasses will be run before those of the current class,
  * unless they are overridden in the current class. No other ordering is defined.
- * </p>
- *
+ * <p>
  * Here is a simple example:
  * <pre>
  * public class Example {

File: src/main/java/org/junit/BeforeClass.java
Patch:
@@ -6,13 +6,13 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>Sometimes several tests need to share computationally expensive setup
+ * Sometimes several tests need to share computationally expensive setup
  * (like logging into a database). While this can compromise the independence of
  * tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method
  * with <code>@BeforeClass</code> causes it to be run once before any of
  * the test methods in the class. The <code>@BeforeClass</code> methods of superclasses
- * will be run before those the current class, unless they are shadowed in the current class.</p>
- *
+ * will be run before those the current class, unless they are shadowed in the current class.
+ * <p>
  * For example:
  * <pre>
  * public class Example {

File: src/main/java/org/junit/Ignore.java
Patch:
@@ -6,12 +6,12 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with
+ * Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with
  * {@link org.junit.Test} that are also annotated with <code>&#064;Ignore</code> will not be executed as tests.
  * Also, you can annotate a class containing test methods with <code>&#064;Ignore</code> and none of the containing
  * tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the
- * number of tests that ran and the number of tests that failed.</p>
- *
+ * number of tests that ran and the number of tests that failed.
+ * <p>
  * For example:
  * <pre>
  *    &#064;Ignore &#064;Test public void something() { ...

File: src/main/java/org/junit/experimental/categories/Categories.java
Patch:
@@ -63,7 +63,7 @@
  *     // Will run A.b and B.d, but not A.a and A.c
  * }
  * </pre>
- *
+ * <p>
  * Example to run multiple categories:
  * <pre>
  * &#064;RunWith(Categories.class)

File: src/main/java/org/junit/runner/Result.java
Patch:
@@ -65,6 +65,7 @@ public boolean wasSuccessful() {
         return getFailureCount() == 0;
     }
 
+    @RunListener.ThreadSafe
     private class Listener extends RunListener {
         @Override
         public void testRunStarted(Description description) throws Exception {

File: src/main/java/org/junit/After.java
Patch:
@@ -6,13 +6,13 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>If you allocate external resources in a {@link org.junit.Before} method you need to release them
+ * If you allocate external resources in a {@link org.junit.Before} method you need to release them
  * after the test runs. Annotating a <code>public void</code> method
  * with <code>&#064;After</code> causes that method to be run after the {@link org.junit.Test} method. All <code>&#064;After</code>
  * methods are guaranteed to run even if a {@link org.junit.Before} or {@link org.junit.Test} method throws an
  * exception. The <code>&#064;After</code> methods declared in superclasses will be run after those of the current
- * class, unless they are overridden in the current class.</p>
- *
+ * class, unless they are overridden in the current class.
+ * <p>
  * Here is a simple example:
  * <pre>
  * public class Example {

File: src/main/java/org/junit/AfterClass.java
Patch:
@@ -6,13 +6,13 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>If you allocate expensive external resources in a {@link org.junit.BeforeClass} method you need to release them
+ * If you allocate expensive external resources in a {@link org.junit.BeforeClass} method you need to release them
  * after all the tests in the class have run. Annotating a <code>public static void</code> method
  * with <code>&#064;AfterClass</code> causes that method to be run after all the tests in the class have been run. All <code>&#064;AfterClass</code>
  * methods are guaranteed to run even if a {@link org.junit.BeforeClass} method throws an
  * exception. The <code>&#064;AfterClass</code> methods declared in superclasses will be run after those of the current
- * class, unless they are shadowed in the current class.</p>
- *
+ * class, unless they are shadowed in the current class.
+ * <p>
  * Here is a simple example:
  * <pre>
  * public class Example {

File: src/main/java/org/junit/Before.java
Patch:
@@ -6,13 +6,12 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>When writing tests, it is common to find that several tests need similar
+ * When writing tests, it is common to find that several tests need similar
  * objects created before they can run. Annotating a <code>public void</code> method
  * with <code>&#064;Before</code> causes that method to be run before the {@link org.junit.Test} method.
  * The <code>&#064;Before</code> methods of superclasses will be run before those of the current class,
  * unless they are overridden in the current class. No other ordering is defined.
- * </p>
- *
+ * <p>
  * Here is a simple example:
  * <pre>
  * public class Example {

File: src/main/java/org/junit/BeforeClass.java
Patch:
@@ -6,13 +6,13 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>Sometimes several tests need to share computationally expensive setup
+ * Sometimes several tests need to share computationally expensive setup
  * (like logging into a database). While this can compromise the independence of
  * tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method
  * with <code>@BeforeClass</code> causes it to be run once before any of
  * the test methods in the class. The <code>@BeforeClass</code> methods of superclasses
- * will be run before those the current class, unless they are shadowed in the current class.</p>
- *
+ * will be run before those the current class, unless they are shadowed in the current class.
+ * <p>
  * For example:
  * <pre>
  * public class Example {

File: src/main/java/org/junit/Ignore.java
Patch:
@@ -6,12 +6,12 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with
+ * Sometimes you want to temporarily disable a test or a group of tests. Methods annotated with
  * {@link org.junit.Test} that are also annotated with <code>&#064;Ignore</code> will not be executed as tests.
  * Also, you can annotate a class containing test methods with <code>&#064;Ignore</code> and none of the containing
  * tests will be executed. Native JUnit 4 test runners should report the number of ignored tests along with the
- * number of tests that ran and the number of tests that failed.</p>
- *
+ * number of tests that ran and the number of tests that failed.
+ * <p>
  * For example:
  * <pre>
  *    &#064;Ignore &#064;Test public void something() { ...

File: src/main/java/org/junit/experimental/categories/Categories.java
Patch:
@@ -63,7 +63,7 @@
  *     // Will run A.b and B.d, but not A.a and A.c
  * }
  * </pre>
- *
+ * <p>
  * Example to run multiple categories:
  * <pre>
  * &#064;RunWith(Categories.class)

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -49,7 +49,7 @@
  * @since 4.5
  */
 public class BlockJUnit4ClassRunner extends ParentRunner<FrameworkMethod> {
-    private ConcurrentHashMap<FrameworkMethod, Description> fMethodDescriptions = new ConcurrentHashMap<FrameworkMethod, Description>();
+    private final ConcurrentHashMap<FrameworkMethod, Description> fMethodDescriptions = new ConcurrentHashMap<FrameworkMethod, Description>();
     /**
      * Creates a BlockJUnit4ClassRunner to run {@code klass}
      *
@@ -80,7 +80,7 @@ protected Description describeChild(FrameworkMethod method) {
         if (description == null) {
             description = Description.createTestDescription(getTestClass().getJavaClass(),
                     testName(method), method.getAnnotations());
-            fMethodDescriptions.put(method, description);
+            fMethodDescriptions.putIfAbsent(method, description);
         }
 
         return description;

File: src/main/java/org/junit/runners/model/MultipleFailureException.java
Patch:
@@ -1,5 +1,3 @@
-// Copyright 2010 Google Inc. All Rights Reserved.
-
 package org.junit.runners.model;
 
 import java.util.ArrayList;

File: src/test/java/org/junit/tests/assertion/MultipleFailureExceptionTest.java
Patch:
@@ -1,5 +1,3 @@
-// Copyright 2010 Google Inc. All Rights Reserved.
-
 package org.junit.tests.assertion;
 
 import static org.hamcrest.CoreMatchers.equalTo;

File: src/main/java/org/junit/runners/model/MultipleFailureException.java
Patch:
@@ -1,5 +1,3 @@
-// Copyright 2010 Google Inc. All Rights Reserved.
-
 package org.junit.runners.model;
 
 import java.util.ArrayList;

File: src/test/java/org/junit/tests/assertion/MultipleFailureExceptionTest.java
Patch:
@@ -1,5 +1,3 @@
-// Copyright 2010 Google Inc. All Rights Reserved.
-
 package org.junit.tests.assertion;
 
 import static org.hamcrest.CoreMatchers.equalTo;

File: src/main/java/org/junit/experimental/theories/DataPoint.java
Patch:
@@ -10,5 +10,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target({FIELD, METHOD})
 public @interface DataPoint {
-
+    String[] value() default {}; 
 }

File: src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
Patch:
@@ -50,7 +50,7 @@ protected void runWithIncompleteAssignment(Assignments incomplete)
         }
 
         private GuesserQueue createGuesserQueue(Assignments incomplete)
-                throws InstantiationException, IllegalAccessException {
+                throws Exception {
             ParameterSignature nextUnassigned = incomplete.nextUnassigned();
 
             if (nextUnassigned.hasAnnotation(Stub.class)) {

File: src/test/java/org/junit/tests/experimental/theories/internal/AllMembersSupplierTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.junit.tests.experimental.theories;
+package org.junit.tests.experimental.theories.internal;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;

File: src/test/java/org/junit/tests/experimental/theories/internal/ParameterizedAssertionErrorTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.junit.tests.experimental.theories;
+package org.junit.tests.experimental.theories.internal;
 
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;

File: src/test/java/org/junit/tests/experimental/theories/runner/UnsuccessfulWithDataPointFields.java
Patch:
@@ -3,7 +3,6 @@
 import static org.hamcrest.CoreMatchers.allOf;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertThat;
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.experimental.results.ResultMatchers.failureCountIs;

File: src/main/java/org/junit/Test.java
Patch:
@@ -59,8 +59,8 @@ private None() {
     }
 
     /**
-     * Optionally specify <code>expected</code>, a Throwable, to cause a test method to succeed iff
-     * an exception of the specified class is thrown by the method.
+     * Optionally specify <code>expected</code>, a Throwable, to cause a test method to succeed if
+     * and only if an exception of the specified class is thrown by the method.
      */
     Class<? extends Throwable> expected() default None.class;
 

File: src/main/java/org/junit/Test.java
Patch:
@@ -59,8 +59,8 @@ private None() {
     }
 
     /**
-     * Optionally specify <code>expected</code>, a Throwable, to cause a test method to succeed iff
-     * an exception of the specified class is thrown by the method.
+     * Optionally specify <code>expected</code>, a Throwable, to cause a test method to succeed if
+     * and only if an exception of the specified class is thrown by the method.
      */
     Class<? extends Throwable> expected() default None.class;
 

File: src/main/java/org/junit/rules/Verifier.java
Patch:
@@ -9,7 +9,7 @@
  * failed
  *
  * <pre>
- *     public static class ErrorLogVerifier() {
+ *     public static class ErrorLogVerifier {
  *        private ErrorLog errorLog = new ErrorLog();
  *
  *        &#064;Rule

File: src/main/java/org/junit/rules/Verifier.java
Patch:
@@ -9,7 +9,7 @@
  * failed
  *
  * <pre>
- *     public static class ErrorLogVerifier() {
+ *     public static class ErrorLogVerifier {
  *        private ErrorLog errorLog = new ErrorLog();
  *
  *        &#064;Rule

File: src/test/java/org/junit/tests/experimental/theories/TestedOnSupplierTest.java
Patch:
@@ -21,7 +21,7 @@ public void foo(@TestedOn(ints = {1}) int x) {
     public void descriptionStatesParameterName() throws Exception {
         TestedOnSupplier supplier = new TestedOnSupplier();
         List<PotentialAssignment> assignments = supplier.getValueSources(signatureOfFoo());
-        assertThat(assignments.get(0).getDescription(), is("ints"));
+        assertThat(assignments.get(0).getDescription(), is("ints: 1"));
     }
 
     private ParameterSignature signatureOfFoo() throws NoSuchMethodException {

File: src/test/java/org/junit/tests/experimental/theories/runner/UnsuccessfulWithDataPointFields.java
Patch:
@@ -61,7 +61,7 @@ public void everythingIsZero(int x, int y) {
     @Test
     public void reportBadParams() throws Exception {
         assertThat(testResult(DoesntUseParams.class),
-                hasSingleFailureContaining("everythingIsZero(ONE, ONE)"));
+                hasSingleFailureContaining("everythingIsZero(ONE: 1, ONE: 1)"));
     }
 
     @RunWith(Theories.class)

File: src/main/java/org/junit/runner/manipulation/Sorter.java
Patch:
@@ -14,11 +14,12 @@ public class Sorter implements Comparator<Description> {
     /**
      * NULL is a <code>Sorter</code> that leaves elements in an undefined order
      */
-    public static Sorter NULL = new Sorter(new Comparator<Description>() {
+    public static final Sorter NULL = new Sorter(new Comparator<Description>() {
         public int compare(Description o1, Description o2) {
             return 0;
         }
     });
+
     private final Comparator<Description> fComparator;
 
     /**

File: src/main/java/junit/framework/TestSuite.java
Patch:
@@ -87,7 +87,7 @@ public static Constructor<?> getTestConstructor(Class<?> theClass) throws NoSuch
         } catch (NoSuchMethodException e) {
             // fall through
         }
-        return theClass.getConstructor(new Class[0]);
+        return theClass.getConstructor();
     }
 
     /**
@@ -319,4 +319,4 @@ private boolean isTestMethod(Method m) {
                 m.getName().startsWith("test") &&
                 m.getReturnType().equals(Void.TYPE);
     }
-}
\ No newline at end of file
+}

File: src/main/java/junit/runner/BaseTestRunner.java
Patch:
@@ -111,7 +111,7 @@ public Test getTest(String suiteClassName) {
         }
         Method suiteMethod = null;
         try {
-            suiteMethod = testClass.getMethod(SUITE_METHODNAME, new Class[0]);
+            suiteMethod = testClass.getMethod(SUITE_METHODNAME);
         } catch (Exception e) {
             // try to extract a test suite automatically
             clearStatus();
@@ -123,7 +123,7 @@ public Test getTest(String suiteClassName) {
         }
         Test test = null;
         try {
-            test = (Test) suiteMethod.invoke(null, (Object[]) new Class[0]); // static method
+            test = (Test) suiteMethod.invoke(null); // static method
             if (test == null) {
                 return test;
             }

File: src/main/java/org/junit/runner/JUnitCore.java
Patch:
@@ -93,7 +93,7 @@ private Result runMain(JUnitSystem system, String... args) {
         }
         RunListener listener = new TextListener(system);
         addListener(listener);
-        Result result = run(classes.toArray(new Class[0]));
+        Result result = run(classes.toArray(new Class<?>[0]));
         for (Failure each : missingClasses) {
             result.getFailures().add(each);
         }

File: src/main/java/junit/framework/TestSuite.java
Patch:
@@ -87,7 +87,7 @@ public static Constructor<?> getTestConstructor(Class<?> theClass) throws NoSuch
         } catch (NoSuchMethodException e) {
             // fall through
         }
-        return theClass.getConstructor(new Class[0]);
+        return theClass.getConstructor();
     }
 
     /**
@@ -319,4 +319,4 @@ private boolean isTestMethod(Method m) {
                 m.getName().startsWith("test") &&
                 m.getReturnType().equals(Void.TYPE);
     }
-}
\ No newline at end of file
+}

File: src/main/java/junit/runner/BaseTestRunner.java
Patch:
@@ -111,7 +111,7 @@ public Test getTest(String suiteClassName) {
         }
         Method suiteMethod = null;
         try {
-            suiteMethod = testClass.getMethod(SUITE_METHODNAME, new Class[0]);
+            suiteMethod = testClass.getMethod(SUITE_METHODNAME);
         } catch (Exception e) {
             // try to extract a test suite automatically
             clearStatus();
@@ -123,7 +123,7 @@ public Test getTest(String suiteClassName) {
         }
         Test test = null;
         try {
-            test = (Test) suiteMethod.invoke(null, (Object[]) new Class[0]); // static method
+            test = (Test) suiteMethod.invoke(null); // static method
             if (test == null) {
                 return test;
             }

File: src/main/java/org/junit/runner/JUnitCore.java
Patch:
@@ -93,7 +93,7 @@ private Result runMain(JUnitSystem system, String... args) {
         }
         RunListener listener = new TextListener(system);
         addListener(listener);
-        Result result = run(classes.toArray(new Class[0]));
+        Result result = run(classes.toArray(new Class<?>[0]));
         for (Failure each : missingClasses) {
             result.getFailures().add(each);
         }

File: src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionTest.java
Patch:
@@ -3,7 +3,6 @@
 import static java.util.Arrays.asList;
 import static org.hamcrest.CoreMatchers.any;
 import static org.hamcrest.CoreMatchers.containsString;
-import static org.hamcrest.CoreMatchers.endsWith;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.CoreMatchers.startsWith;
@@ -72,8 +71,9 @@ public static Collection<Object[]> testsWithEventMatcher() {
                 {ViolateAssumptionAndExpectException.class,
                         hasSingleAssumptionFailure()},
                 {ThrowExpectedAssertionError.class, everyTestRunSuccessful()},
-                {DontThrowAssertionErrorButExpectOne.class, hasSingleFailureWithMessage(
-                        endsWith("Expected test to throw an instance of java.lang.AssertionError"))},
+                {
+                    DontThrowAssertionErrorButExpectOne.class,
+                    hasSingleFailureWithMessage("Expected test to throw an instance of java.lang.AssertionError")},
                 {
                         ThrowUnexpectedAssertionError.class,
                         hasSingleFailureWithMessage(startsWith("\nExpected: an instance of java.lang.NullPointerException"))},

File: src/main/java/org/junit/rules/Stopwatch.java
Patch:
@@ -64,9 +64,9 @@
  * public void performanceTest() throws InterruptedException {
  *     long delta= 30;
  *     Thread.sleep(300L);
- *     assertEquals(stopwatch.runtime(MILLISECONDS), 300d, delta);
+ *     assertEquals(300d, stopwatch.runtime(MILLISECONDS), delta);
  *     Thread.sleep(500L);
- *     assertEquals(stopwatch.runtime(MILLISECONDS), 800d, delta);
+ *     assertEquals(800d, stopwatch.runtime(MILLISECONDS), delta);
  * }
  * </pre>
  *

File: src/test/java/org/junit/tests/experimental/rules/StopwatchTest.java
Patch:
@@ -105,9 +105,9 @@ public static class DurationTest extends AbstractStopwatchTest {
         @Test
         public void duration() throws InterruptedException {
             Thread.sleep(300L);
-            assertEquals(fStopwatch.runtime(MILLISECONDS), 300d, 100d);
+            assertEquals(300d, fStopwatch.runtime(MILLISECONDS), 100d);
             Thread.sleep(500L);
-            assertEquals(fStopwatch.runtime(MILLISECONDS), 800d, 250d);
+            assertEquals(800d, fStopwatch.runtime(MILLISECONDS), 250d);
         }
     }
 

File: src/main/java/org/junit/rules/Stopwatch.java
Patch:
@@ -64,9 +64,9 @@
  * public void performanceTest() throws InterruptedException {
  *     long delta= 30;
  *     Thread.sleep(300L);
- *     assertEquals(stopwatch.runtime(MILLISECONDS), 300d, delta);
+ *     assertEquals(300d, stopwatch.runtime(MILLISECONDS), delta);
  *     Thread.sleep(500L);
- *     assertEquals(stopwatch.runtime(MILLISECONDS), 800d, delta);
+ *     assertEquals(800d, stopwatch.runtime(MILLISECONDS), delta);
  * }
  * </pre>
  *

File: src/test/java/org/junit/tests/experimental/rules/StopwatchTest.java
Patch:
@@ -105,9 +105,9 @@ public static class DurationTest extends AbstractStopwatchTest {
         @Test
         public void duration() throws InterruptedException {
             Thread.sleep(300L);
-            assertEquals(fStopwatch.runtime(MILLISECONDS), 300d, 100d);
+            assertEquals(300d, fStopwatch.runtime(MILLISECONDS), 100d);
             Thread.sleep(500L);
-            assertEquals(fStopwatch.runtime(MILLISECONDS), 800d, 250d);
+            assertEquals(800d, fStopwatch.runtime(MILLISECONDS), 250d);
         }
     }
 

File: src/main/java/org/junit/experimental/theories/Theories.java
Patch:
@@ -54,6 +54,7 @@ protected void validateTestMethods(List<Throwable> errors) {
         for (FrameworkMethod each : computeTestMethods()) {
             if (each.getAnnotation(Theory.class) != null) {
                 each.validatePublicVoid(false, errors);
+                each.validateNoTypeParametersOnArgs(errors);
             } else {
                 each.validatePublicVoidNoArg(false, errors);
             }

File: src/test/java/org/junit/tests/experimental/ExperimentalTests.java
Patch:
@@ -14,6 +14,7 @@
 import org.junit.tests.experimental.theories.runner.WithDataPointMethod;
 import org.junit.tests.experimental.theories.runner.WithExtendedParameterSources;
 import org.junit.tests.experimental.theories.runner.WithOnlyTestAnnotations;
+import org.junit.tests.experimental.theories.runner.WithUnresolvedGenericTypeVariablesOnTheoryParms;
 
 @RunWith(Suite.class)
 @SuiteClasses({ParameterizedAssertionErrorTest.class,
@@ -22,7 +23,8 @@
         ResultMatchersTest.class, WithDataPointMethod.class,
         ParameterSignatureTest.class, WhenNoParametersMatch.class,
         WithExtendedParameterSources.class, StubbedTheoriesTest.class,
-        WithOnlyTestAnnotations.class})
+        WithOnlyTestAnnotations.class,
+        WithUnresolvedGenericTypeVariablesOnTheoryParms.class})
 public class ExperimentalTests {
 
 }

File: src/main/java/org/junit/experimental/theories/Theories.java
Patch:
@@ -54,6 +54,7 @@ protected void validateTestMethods(List<Throwable> errors) {
         for (FrameworkMethod each : computeTestMethods()) {
             if (each.getAnnotation(Theory.class) != null) {
                 each.validatePublicVoid(false, errors);
+                each.validateNoTypeParametersOnArgs(errors);
             } else {
                 each.validatePublicVoidNoArg(false, errors);
             }

File: src/test/java/org/junit/tests/experimental/ExperimentalTests.java
Patch:
@@ -14,6 +14,7 @@
 import org.junit.tests.experimental.theories.runner.WithDataPointMethod;
 import org.junit.tests.experimental.theories.runner.WithExtendedParameterSources;
 import org.junit.tests.experimental.theories.runner.WithOnlyTestAnnotations;
+import org.junit.tests.experimental.theories.runner.WithUnresolvedGenericTypeVariablesOnTheoryParms;
 
 @RunWith(Suite.class)
 @SuiteClasses({ParameterizedAssertionErrorTest.class,
@@ -22,7 +23,8 @@
         ResultMatchersTest.class, WithDataPointMethod.class,
         ParameterSignatureTest.class, WhenNoParametersMatch.class,
         WithExtendedParameterSources.class, StubbedTheoriesTest.class,
-        WithOnlyTestAnnotations.class})
+        WithOnlyTestAnnotations.class,
+        WithUnresolvedGenericTypeVariablesOnTheoryParms.class})
 public class ExperimentalTests {
 
 }

File: src/test/java/org/junit/internal/MethodSorterTest.java
Patch:
@@ -61,7 +61,7 @@ private List<String> getDeclaredMethodNames(Class<?> clazz) {
         List<String> names = new ArrayList<String>();
         for (Method m : actualMethods) {
             // Filter out synthetic methods from, e.g., coverage tools.
-        	if (!m.isSynthetic()) {
+            if (!m.isSynthetic()) {
                 names.add(m.toString().replace(clazz.getName() + '.', ""));
         	}
         }
@@ -85,7 +85,7 @@ public void testMethodsNullSorterSuper() {
     
     @Test
     public void testMethodsNullSorterSub() {
-        List<String> expected = Arrays.asList(new String[]{SUB_METHOD});
+        List<String> expected = Arrays.asList(SUB_METHOD);
         List<String> actual = getDeclaredMethodNames(Sub.class);
         assertEquals(expected, actual);
     }

File: src/main/java/org/junit/rules/Stopwatch.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * The Stopwatch Rule notifies one of own protected methods of the time spent by a test.<p/>
+ * The Stopwatch Rule notifies one of its own protected methods of the time spent by a test.<p/>
  * Override them to get the time in nanoseconds. For example, this class will keep logging the
  * time spent by each passing, failing and skipped test:
  *

File: src/test/java/org/junit/internal/MethodSorterTest.java
Patch:
@@ -55,7 +55,7 @@ void subBowser() {
 
     private List<String> getDeclaredFilteredMethods(Class<?> clazz, List<String> ofInterest) {
         // the method under test.
-	    Method[] actualMethods = MethodSorter.getDeclaredMethods(clazz);
+        Method[] actualMethods = MethodSorter.getDeclaredMethods(clazz);
 
         // obtain just the names instead of the full methods.
         List<String> names = new ArrayList<String>();
@@ -68,7 +68,7 @@ private List<String> getDeclaredFilteredMethods(Class<?> clazz, List<String> ofI
         return names;
     }
 
-	@Test
+    @Test
     public void testMethodsNullSorterSelf() {
         List<String> expected = Arrays.asList(
         		new String[]{EPSILON, BETA, ALPHA, DELTA, GAMMA_VOID, GAMMA_BOOLEAN});

File: src/test/java/org/junit/internal/MethodSorterTest.java
Patch:
@@ -21,7 +21,7 @@ public class MethodSorterTest {
     private static final String SUPER_METHOD = "void superMario()";
     private static final String SUB_METHOD = "void subBowser()";
 
-    static class ClassWithoutSorterAnnotation {
+    static class DummySortWithoutAnnotation {
         Object alpha(int i, double d, Thread t) {
             return null;
         }
@@ -81,7 +81,7 @@ private List<String> getDeclaredFilteredMethods(Class<?> clazz, List<String> ofI
     public void testMethodsNullSorterSelf() {
         List<String> expected = Arrays.asList(
         		new String[]{EPSILON, BETA, ALPHA, DELTA, GAMMA_VOID, GAMMA_BOOLEAN});
-        List<String> actual = getDeclaredFilteredMethods(ClassWithoutSorterAnnotation.class, expected);
+        List<String> actual = getDeclaredFilteredMethods(DummySortWithoutAnnotation.class, expected);
         assertEquals(expected, actual);
     }
     
@@ -103,7 +103,7 @@ public void testMethodsNullSorterSub() {
     @Test
     public void getMethodsNullSorter() throws Exception {
         String[] expected = new String[]{EPSILON, BETA, ALPHA, DELTA, GAMMA_VOID, GAMMA_BOOLEAN};
-        assertEquals(Arrays.asList(expected).toString(), declaredMethods(ClassWithoutSorterAnnotation.class));
+        assertEquals(Arrays.asList(expected).toString(), declaredMethods(DummySortWithoutAnnotation.class));
         assertEquals("[void superMario()]", declaredMethods(Super.class));
         assertEquals("[void subBowser()]", declaredMethods(Sub.class));
     }

File: src/test/java/org/junit/internal/MethodSorterTest.java
Patch:
@@ -21,7 +21,7 @@ public class MethodSorterTest {
     private static final String SUPER_METHOD = "void superMario()";
     private static final String SUB_METHOD = "void subBowser()";
 
-    static class Dummy {
+    static class ClassWithoutSorterAnnotation {
         Object alpha(int i, double d, Thread t) {
             return null;
         }
@@ -81,7 +81,7 @@ private List<String> getDeclaredFilteredMethods(Class<?> clazz, List<String> ofI
     public void testMethodsNullSorterSelf() {
         List<String> expected = Arrays.asList(
         		new String[]{EPSILON, BETA, ALPHA, DELTA, GAMMA_VOID, GAMMA_BOOLEAN});
-        List<String> actual = getDeclaredFilteredMethods(Dummy.class, expected);
+        List<String> actual = getDeclaredFilteredMethods(ClassWithoutSorterAnnotation.class, expected);
         assertEquals(expected, actual);
     }
     
@@ -103,7 +103,7 @@ public void testMethodsNullSorterSub() {
     @Test
     public void getMethodsNullSorter() throws Exception {
         String[] expected = new String[]{EPSILON, BETA, ALPHA, DELTA, GAMMA_VOID, GAMMA_BOOLEAN};
-        assertEquals(Arrays.asList(expected).toString(), declaredMethods(Dummy.class));
+        assertEquals(Arrays.asList(expected).toString(), declaredMethods(ClassWithoutSorterAnnotation.class));
         assertEquals("[void superMario()]", declaredMethods(Super.class));
         assertEquals("[void subBowser()]", declaredMethods(Sub.class));
     }

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -223,6 +223,6 @@ private String missingExceptionMessage() {
     }
     
     private boolean isMissingExceptionMessageEmpty() {
-        return missingExceptionMessage == null || missingExceptionMessage.isEmpty();
+        return missingExceptionMessage == null || missingExceptionMessage.length() == 0;
     }
 }

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -223,6 +223,6 @@ private String missingExceptionMessage() {
     }
     
     private boolean isMissingExceptionMessageEmpty() {
-        return missingExceptionMessage == null || missingExceptionMessage.isEmpty();
+        return missingExceptionMessage == null || missingExceptionMessage.length() == 0;
     }
 }

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -113,9 +113,9 @@ public ExpectedException handleAssumptionViolatedExceptions() {
     }
     
     /**
-     * Specifies the detail message for an exception to be thrown if the test does 
-     * not throw the expected exception.
-     * @param providedMessage exception detail message
+     * Specifies the failure message for tests that are expected to throw 
+     * an exception but do not throw any.
+     * @param message exception detail message
      * @return self
      */
     public ExpectedException reportMissingExceptionWithMessage(String message) {

File: src/main/java/org/junit/experimental/ParallelComputer.java
Patch:
@@ -41,7 +41,7 @@ public void schedule(Runnable childStatement) {
                 public void finished() {
                     try {
                         fService.shutdown();
-                        fService.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);
+                        fService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
                     } catch (InterruptedException e) {
                         e.printStackTrace(System.err);
                     }

File: src/main/java/org/junit/experimental/ParallelComputer.java
Patch:
@@ -41,7 +41,7 @@ public void schedule(Runnable childStatement) {
                 public void finished() {
                     try {
                         fService.shutdown();
-                        fService.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);
+                        fService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
                     } catch (InterruptedException e) {
                         e.printStackTrace(System.err);
                     }

File: src/test/java/org/junit/tests/experimental/theories/AllMembersSupplierTest.java
Patch:
@@ -53,7 +53,9 @@ public void dataPointsArrayFieldMayContainNullValue()
 
     public static class HasDataPointsMethodWithNullValue {
         @DataPoints
-        public static Integer[] objects = {null, 1};
+        public static Integer[] getObjects() {
+            return new Integer[] {null, 1};
+        }
 
         public HasDataPointsMethodWithNullValue(Integer i) {
         }

File: src/main/java/org/junit/After.java
Patch:
@@ -9,12 +9,12 @@
  * <p>If you allocate external resources in a {@link org.junit.Before} method you need to release them
  * after the test runs. Annotating a <code>public void</code> method
  * with <code>&#064;After</code> causes that method to be run after the {@link org.junit.Test} method. All <code>&#064;After</code>
- * methods are guaranteed to run even if a {@link org.junit.Before} or {@link org.junit.Test} method throws an 
+ * methods are guaranteed to run even if a {@link org.junit.Before} or {@link org.junit.Test} method throws an
  * exception. The <code>&#064;After</code> methods declared in superclasses will be run after those of the current
  * class, unless they are overridden in the current class.</p>
  *
  * Here is a simple example:
-* <pre>
+ * <pre>
  * public class Example {
  *    File output;
  *    &#064;Before public void createOutputFile() {
@@ -28,7 +28,7 @@
  *    }
  * }
  * </pre>
- * 
+ *
  * @see org.junit.Before
  * @see org.junit.Test
  * @since 4.0

File: src/main/java/org/junit/AfterClass.java
Patch:
@@ -9,12 +9,12 @@
  * <p>If you allocate expensive external resources in a {@link org.junit.BeforeClass} method you need to release them
  * after all the tests in the class have run. Annotating a <code>public static void</code> method
  * with <code>&#064;AfterClass</code> causes that method to be run after all the tests in the class have been run. All <code>&#064;AfterClass</code>
- * methods are guaranteed to run even if a {@link org.junit.BeforeClass} method throws an 
+ * methods are guaranteed to run even if a {@link org.junit.BeforeClass} method throws an
  * exception. The <code>&#064;AfterClass</code> methods declared in superclasses will be run after those of the current
  * class, unless they are shadowed in the current class.</p>
  *
  * Here is a simple example:
-* <pre>
+ * <pre>
  * public class Example {
  *    private static DatabaseConnection database;
  *    &#064;BeforeClass public static void login() {
@@ -31,7 +31,7 @@
  *    }
  * }
  * </pre>
- * 
+ *
  * @see org.junit.BeforeClass
  * @see org.junit.Test
  * @since 4.0

File: src/main/java/org/junit/Before.java
Patch:
@@ -6,13 +6,13 @@
 import java.lang.annotation.Target;
 
 /**
- * <p>When writing tests, it is common to find that several tests need similar 
+ * <p>When writing tests, it is common to find that several tests need similar
  * objects created before they can run. Annotating a <code>public void</code> method
  * with <code>&#064;Before</code> causes that method to be run before the {@link org.junit.Test} method.
  * The <code>&#064;Before</code> methods of superclasses will be run before those of the current class,
  * unless they are overridden in the current class. No other ordering is defined.
  * </p>
- * 
+ *
  * Here is a simple example:
  * <pre>
  * public class Example {
@@ -28,7 +28,7 @@
  *    }
  * }
  * </pre>
- * 
+ *
  * @see org.junit.BeforeClass
  * @see org.junit.After
  * @since 4.0

File: src/main/java/org/junit/BeforeClass.java
Patch:
@@ -7,9 +7,9 @@
 
 /**
  * <p>Sometimes several tests need to share computationally expensive setup
- * (like logging into a database). While this can compromise the independence of 
+ * (like logging into a database). While this can compromise the independence of
  * tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method
- * with <code>@BeforeClass</code> causes it to be run once before any of 
+ * with <code>@BeforeClass</code> causes it to be run once before any of
  * the test methods in the class. The <code>@BeforeClass</code> methods of superclasses
  * will be run before those the current class, unless they are shadowed in the current class.</p>
  *
@@ -27,6 +27,7 @@
  *    }
  * }
  * </pre>
+ *
  * @see org.junit.AfterClass
  * @since 4.0
  */

File: src/main/java/org/junit/experimental/theories/ParameterSupplier.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.List;
 
-
 public abstract class ParameterSupplier {
-	public abstract List<PotentialAssignment> getValueSources(ParameterSignature sig);
+    public abstract List<PotentialAssignment> getValueSources(ParameterSignature sig);
 }

File: src/main/java/org/junit/experimental/theories/ParametersSuppliedBy.java
Patch:
@@ -7,6 +7,6 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ParametersSuppliedBy {
 
-	Class<? extends ParameterSupplier> value();
+    Class<? extends ParameterSupplier> value();
 
 }

File: src/main/java/org/junit/experimental/theories/suppliers/TestedOn.java
Patch:
@@ -5,9 +5,8 @@
 
 import org.junit.experimental.theories.ParametersSuppliedBy;
 
-
 @ParametersSuppliedBy(TestedOnSupplier.class)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface TestedOn {
-	int[] ints();
+    int[] ints();
 }

File: src/main/java/org/junit/internal/JUnitSystem.java
Patch:
@@ -3,5 +3,5 @@
 import java.io.PrintStream;
 
 public interface JUnitSystem {
-	PrintStream out();
+    PrintStream out();
 }

File: src/main/java/org/junit/internal/RealSystem.java
Patch:
@@ -3,8 +3,8 @@
 import java.io.PrintStream;
 
 public class RealSystem implements JUnitSystem {
-	public PrintStream out() {
-		return System.out;
-	}
+    public PrintStream out() {
+        return System.out;
+    }
 
 }

File: src/main/java/org/junit/internal/runners/FailedBefore.java
Patch:
@@ -2,13 +2,12 @@
 
 import org.junit.runners.BlockJUnit4ClassRunner;
 
-
 /**
  * @deprecated Included for backwards compatibility with JUnit 4.4. Will be
  *             removed in the next release. Please use
  *             {@link BlockJUnit4ClassRunner} in place of {@link JUnit4ClassRunner}.
  */
 @Deprecated
 class FailedBefore extends Exception {
-	private static final long serialVersionUID= 1L;
+    private static final long serialVersionUID = 1L;
 }
\ No newline at end of file

File: src/main/java/org/junit/package-info.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * Provides JUnit core classes and annotations. 
- * 
+ *
  * Corresponds to junit.framework in Junit 3.x.
  *
  * @since 4.0

File: src/main/java/org/junit/runner/manipulation/NoTestsRemainException.java
Patch:
@@ -2,8 +2,9 @@
 
 /**
  * Thrown when a filter removes all tests from a runner.
+ *
  * @since 4.0
  */
 public class NoTestsRemainException extends Exception {
-	private static final long serialVersionUID = 1L;
+    private static final long serialVersionUID = 1L;
 }

File: src/main/java/org/junit/runner/notification/StoppedByUserException.java
Patch:
@@ -1,12 +1,12 @@
 package org.junit.runner.notification;
 
 /**
- * Thrown when a user has requested that the test run stop. Writers of 
+ * Thrown when a user has requested that the test run stop. Writers of
  * test running GUIs should be prepared to catch a <code>StoppedByUserException</code>.
- * 
+ *
  * @see org.junit.runner.notification.RunNotifier
  * @since 4.0
  */
 public class StoppedByUserException extends RuntimeException {
-	private static final long serialVersionUID= 1L;
+    private static final long serialVersionUID = 1L;
 }

File: src/main/java/org/junit/After.java
Patch:
@@ -11,8 +11,8 @@
  * with <code>&#064;After</code> causes that method to be run after the {@link org.junit.Test} method. All <code>&#064;After</code>
  * methods are guaranteed to run even if a {@link org.junit.Before} or {@link org.junit.Test} method throws an 
  * exception. The <code>&#064;After</code> methods declared in superclasses will be run after those of the current
- * class.</p>
- * 
+ * class, unless they are overridden in the current class.</p>
+ *
  * Here is a simple example:
 * <pre>
  * public class Example {

File: src/main/java/org/junit/AfterClass.java
Patch:
@@ -11,8 +11,8 @@
  * with <code>&#064;AfterClass</code> causes that method to be run after all the tests in the class have been run. All <code>&#064;AfterClass</code>
  * methods are guaranteed to run even if a {@link org.junit.BeforeClass} method throws an 
  * exception. The <code>&#064;AfterClass</code> methods declared in superclasses will be run after those of the current
- * class.</p>
- * 
+ * class, unless they are shadowed in the current class.</p>
+ *
  * Here is a simple example:
 * <pre>
  * public class Example {

File: src/main/java/org/junit/Before.java
Patch:
@@ -9,8 +9,8 @@
  * <p>When writing tests, it is common to find that several tests need similar 
  * objects created before they can run. Annotating a <code>public void</code> method
  * with <code>&#064;Before</code> causes that method to be run before the {@link org.junit.Test} method.
- * The <code>&#064;Before</code> methods of superclasses will be run before those of the current class.
- * No other ordering is defined.
+ * The <code>&#064;Before</code> methods of superclasses will be run before those of the current class,
+ * unless they are overridden in the current class. No other ordering is defined.
  * </p>
  * 
  * Here is a simple example:

File: src/main/java/org/junit/BeforeClass.java
Patch:
@@ -11,8 +11,8 @@
  * tests, sometimes it is a necessary optimization. Annotating a <code>public static void</code> no-arg method
  * with <code>@BeforeClass</code> causes it to be run once before any of 
  * the test methods in the class. The <code>@BeforeClass</code> methods of superclasses
- * will be run before those the current class.</p>
- * 
+ * will be run before those the current class, unless they are shadowed in the current class.</p>
+ *
  * For example:
  * <pre>
  * public class Example {

File: src/main/java/org/junit/Before.java
Patch:
@@ -9,8 +9,8 @@
  * <p>When writing tests, it is common to find that several tests need similar 
  * objects created before they can run. Annotating a <code>public void</code> method
  * with <code>&#064;Before</code> causes that method to be run before the {@link org.junit.Test} method.
- * The <code>&#064;Before</code> methods of superclasses will be run before those of the current class.
- * No other ordering is defined.
+ * The <code>&#064;Before</code> methods of superclasses will be run before those of the current class,
+ * unless they are overridden in the current class. No other ordering is defined.
  * </p>
  *
  * <p>Note: If a subclass overrides a <code>&#064;Before</code> method of the superclass, it would render the

File: src/main/java/org/junit/After.java
Patch:
@@ -13,6 +13,9 @@
  * exception. The <code>&#064;After</code> methods declared in superclasses will be run after those of the current
  * class.</p>
  * 
+ * <p>Note: If a subclass overrides a <code>&#064;After</code> method of the superclass, it would render the
+ * <code>&#064;After</code> annotation of the superclass useless.</p>
+ *
  * Here is a simple example:
 * <pre>
  * public class Example {

File: src/main/java/org/junit/AfterClass.java
Patch:
@@ -13,6 +13,9 @@
  * exception. The <code>&#064;AfterClass</code> methods declared in superclasses will be run after those of the current
  * class.</p>
  * 
+ * <p>Note: If a subclass shadows a <code>&#064;AfterClass</code> method of the superclass by using the
+ * same name, it would render the <code>&#064;AfterClass</code> annotation of the superclass useless.</p>
+ *
  * Here is a simple example:
 * <pre>
  * public class Example {

File: src/main/java/org/junit/Before.java
Patch:
@@ -12,6 +12,9 @@
  * The <code>&#064;Before</code> methods of superclasses will be run before those of the current class.
  * No other ordering is defined.
  * </p>
+ *
+ * <p>Note: If a subclass overrides a <code>&#064;Before</code> method of the superclass, it would render the
+ * <code>&#064;Before</code> annotation of the superclass useless.</p>
  * 
  * Here is a simple example:
  * <pre>

File: src/main/java/org/junit/BeforeClass.java
Patch:
@@ -13,6 +13,9 @@
  * the test methods in the class. The <code>@BeforeClass</code> methods of superclasses
  * will be run before those the current class.</p>
  * 
+ * <p>Note: If a subclass shadows a <code>&#064;BeforeClass</code> method of the superclass by using the
+ * same name, it would render the <code>&#064;BeforeClass</code> annotation of the superclass useless.</p>
+ *
  * For example:
  * <pre>
  * public class Example {

File: src/main/java/org/junit/matchers/JUnitMatchers.java
Patch:
@@ -31,7 +31,7 @@ public static <T> Matcher<Iterable<? super T>> hasItem(T element) {
 	 */
 	@Deprecated
 	public static <T> Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher) {
-		return CoreMatchers.hasItem(elementMatcher);
+		return CoreMatchers.<T> hasItem(elementMatcher);
 	}
 
 	/**

File: src/test/java/org/junit/tests/experimental/AssumptionViolatedExceptionTest.java
Patch:
@@ -47,6 +47,6 @@ public void AssumptionViolatedExceptionDescribesItself() {
 	@Test
 	public void simpleAssumptionViolatedExceptionDescribesItself() {
 		AssumptionViolatedException e= new AssumptionViolatedException("not enough money");
-		assertThat(StringDescription.asString(e), is("failed assumption: not enough money"));
+		assertThat(StringDescription.asString(e), is("not enough money"));
 	}
 }

File: src/main/java/org/junit/matchers/JUnitMatchers.java
Patch:
@@ -31,7 +31,7 @@ public static <T> Matcher<Iterable<? super T>> hasItem(T element) {
 	 */
 	@Deprecated
 	public static <T> Matcher<Iterable<? super T>> hasItem(Matcher<? super T> elementMatcher) {
-		return CoreMatchers.hasItem(elementMatcher);
+		return CoreMatchers.<T> hasItem(elementMatcher);
 	}
 
 	/**

File: src/test/java/org/junit/tests/experimental/AssumptionViolatedExceptionTest.java
Patch:
@@ -47,6 +47,6 @@ public void AssumptionViolatedExceptionDescribesItself() {
 	@Test
 	public void simpleAssumptionViolatedExceptionDescribesItself() {
 		AssumptionViolatedException e= new AssumptionViolatedException("not enough money");
-		assertThat(StringDescription.asString(e), is("failed assumption: not enough money"));
+		assertThat(StringDescription.asString(e), is("not enough money"));
 	}
 }

File: src/test/java/org/junit/tests/experimental/rules/TempFolderRuleTest.java
Patch:
@@ -217,7 +217,7 @@ public void testNewFile() throws IOException {
 		}
 
 		@Test
-		public void testNewFolder() {
+		public void testNewFolder() throws IOException {
 			folder.newFolder(NEW_FOLDER_DUMMY);
 		}
 	}

File: src/main/java/org/junit/rules/TemporaryFolder.java
Patch:
@@ -89,7 +89,9 @@ public File newFolder(String... folderNames) {
 		File file= getRoot();
 		for (String folderName : folderNames) {
 			file= new File(file, folderName);
-			file.mkdir();
+			if (!file.mkdir())
+				throw new IllegalStateException(
+						"a folder with the name \'" + folderName + "\' already exists");
 		}
 		return file;
 	}

File: src/main/java/org/junit/rules/RuleChain.java
Patch:
@@ -15,7 +15,7 @@
  * <pre>
  * public static class UseRuleChain {
  * 	&#064;Rule
- * 	public TestRule chain= RuleChain
+ * 	public RuleChain chain= RuleChain
  * 	                       .outerRule(new LoggingRule("outer rule")
  * 	                       .around(new LoggingRule("middle rule")
  * 	                       .around(new LoggingRule("inner rule");

File: src/main/java/org/junit/rules/TestWatcher.java
Patch:
@@ -18,7 +18,7 @@
  * 	private static String watchedLog;
  * 
  * 	&#064;Rule
- * 	public TestRule watchman= new TestWatcher() {
+ * 	public TestWatcher watchman= new TestWatcher() {
  * 		&#064;Override
  * 		protected void failed(Throwable e, Description description) {
  * 			watchedLog+= description + &quot;\n&quot;;

File: src/main/java/org/junit/rules/Timeout.java
Patch:
@@ -12,7 +12,7 @@
  * 	public static String log;
  * 
  * 	&#064;Rule
- * 	public TestRule globalTimeout= new Timeout(20);
+ * 	public Timeout globalTimeout= new Timeout(20);
  * 
  * 	&#064;Test
  * 	public void testInfiniteLoop1() {

File: src/main/java/org/junit/rules/Verifier.java
Patch:
@@ -13,7 +13,7 @@
  *        private ErrorLog errorLog = new ErrorLog();
  *     
  *        &#064;Rule
- *        public TestRule verifier = new Verifier() {
+ *        public Verifier verifier = new Verifier() {
  *           &#064;Override public void verify() {
  *              assertTrue(errorLog.isEmpty());
  *           }

File: src/test/java/org/junit/internal/matchers/StacktracePrintingMatcherTest.java
Patch:
@@ -14,7 +14,7 @@
 public class StacktracePrintingMatcherTest {
 	
 	@Test
-	public void succeedsWhenInnerMatcherSuceeds() throws Exception {
+	public void succeedsWhenInnerMatcherSucceeds() throws Exception {
 		assertTrue(isThrowable(any(Throwable.class)).matches(new Exception()));
 	}
 	

File: src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.junit.tests.experimental.rules;
 
 import static java.util.Arrays.asList;
-import static org.hamcrest.CoreMatchers.allOf;
 import static org.hamcrest.CoreMatchers.any;
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
@@ -19,6 +18,7 @@
 
 import java.util.Collection;
 
+import org.hamcrest.CoreMatchers;
 import org.hamcrest.Matcher;
 import org.junit.Rule;
 import org.junit.Test;
@@ -83,7 +83,7 @@ public static Collection<Object[]> testsWithEventMatcher() {
 				{	ThrowExpectedNullCause.class, everyTestRunSuccessful() },
 				{
 					ThrowUnexpectedCause.class,
-						hasSingleFailureWithMessage(allOf(
+						hasSingleFailureWithMessage(CoreMatchers.<String>allOf(
 								startsWith("\nExpected: ("),
 								containsString("exception with cause is <java.lang.NullPointerException: expected cause>"),
 								containsString("Stacktrace was: java.lang.IllegalArgumentException: Ack!"),

File: src/main/java/org/junit/After.java
Patch:
@@ -31,6 +31,7 @@
  * 
  * @see org.junit.Before
  * @see org.junit.Test
+ * @since 4.0
  */
 
 @Retention(RetentionPolicy.RUNTIME)

File: src/main/java/org/junit/AfterClass.java
Patch:
@@ -34,6 +34,7 @@
  * 
  * @see org.junit.BeforeClass
  * @see org.junit.Test
+ * @since 4.0
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)

File: src/main/java/org/junit/Assert.java
Patch:
@@ -20,6 +20,7 @@
  * </pre>
  * 
  * @see AssertionError
+ * @since 4.0
  */
 public class Assert {
 	/**

File: src/main/java/org/junit/Assume.java
Patch:
@@ -29,6 +29,7 @@
  *    ...
  *    assumeTrue(...);
  * </pre>
+ * @since 4.4
  */
 public class Assume {
 	/**

File: src/main/java/org/junit/Before.java
Patch:
@@ -31,6 +31,7 @@
  * 
  * @see org.junit.BeforeClass
  * @see org.junit.After
+ * @since 4.0
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)

File: src/main/java/org/junit/BeforeClass.java
Patch:
@@ -28,6 +28,7 @@
  * }
  * </pre>
  * @see org.junit.AfterClass
+ * @since 4.0
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)

File: src/main/java/org/junit/ClassRule.java
Patch:
@@ -79,6 +79,7 @@
  * </pre>
  * 
  * For more information and more examples, see {@link org.junit.rules.TestRule}. 
+ * @since 4.9
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.FIELD, ElementType.METHOD})

File: src/main/java/org/junit/ComparisonFailure.java
Patch:
@@ -6,6 +6,7 @@
  * strings.
  * 
  * Inspired by a patch from Alex Chaffee (alex@purpletech.com)
+ * @since 4.0
  */
 public class ComparisonFailure extends AssertionError {	
 	/** 

File: src/main/java/org/junit/FixMethodOrder.java
Patch:
@@ -30,6 +30,7 @@
  * </pre>
  * 
  * @see org.junit.runners.MethodSorters
+ * @since 4.11
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE})

File: src/main/java/org/junit/Ignore.java
Patch:
@@ -28,6 +28,7 @@
  *		}
  * </pre>
  *
+ * @since 4.0
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.METHOD, ElementType.TYPE})

File: src/main/java/org/junit/Rule.java
Patch:
@@ -62,6 +62,7 @@
  * Note: for backwards compatibility, this annotation may also mark
  * fields or methods of type {@link org.junit.rules.MethodRule}, which will be honored.  However,
  * this is a deprecated interface and feature.
+ * @since 4.7
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.FIELD, ElementType.METHOD})

File: src/main/java/org/junit/Test.java
Patch:
@@ -41,6 +41,7 @@
  *       while(true);
  *    }
  * </pre></p>
+ * @since 4.0
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.METHOD})

File: src/main/java/org/junit/matchers/JUnitMatchers.java
Patch:
@@ -10,6 +10,7 @@
 /**
  * Convenience import class: these are useful matchers for use with the assertThat method, but they are
  * not currently included in the basic CoreMatchers class from hamcrest.
+ * @since 4.4
  */
 public class JUnitMatchers {
 	/**

File: src/main/java/org/junit/rules/ErrorCollector.java
Patch:
@@ -1,6 +1,3 @@
-/**
- * 
- */
 package org.junit.rules;
 
 import static org.junit.Assert.assertThat;
@@ -31,6 +28,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.7
  */
 public class ErrorCollector extends Verifier {
 	private List<Throwable> errors= new ArrayList<Throwable>();

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -78,6 +78,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.7
  */
 public class ExpectedException implements TestRule {
 	/**

File: src/main/java/org/junit/rules/ExternalResource.java
Patch:
@@ -31,6 +31,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.7
  */
 public abstract class ExternalResource implements TestRule {
 	public Statement apply(Statement base, Description description) {

File: src/main/java/org/junit/rules/MethodRule.java
Patch:
@@ -25,6 +25,7 @@
  * </ul>
  * 
  * Note that {@link MethodRule} is now deprecated, you should be using {@link TestRule} instead.
+ * @since 4.7
  */
 @Deprecated
 public interface MethodRule {

File: src/main/java/org/junit/rules/RuleChain.java
Patch:
@@ -1,6 +1,3 @@
-/**
- * 
- */
 package org.junit.rules;
 
 import java.util.ArrayList;
@@ -40,6 +37,7 @@
  * finished middle rule
  * finished outer rule
  * </pre>
+ * @since 4.10
  */
 public class RuleChain implements TestRule {
 	private static final RuleChain EMPTY_CHAIN= new RuleChain(

File: src/main/java/org/junit/rules/RunRules.java
Patch:
@@ -5,6 +5,7 @@
 
 /**
  * Runs a collection of rules on a statement.
+ * @since 4.9
  */
 public class RunRules extends Statement {
 	private final Statement statement;

File: src/main/java/org/junit/rules/TemporaryFolder.java
Patch:
@@ -23,6 +23,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.7
  */
 public class TemporaryFolder extends ExternalResource {
         private final File parentFolder;

File: src/main/java/org/junit/rules/TestName.java
Patch:
@@ -21,6 +21,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.7
  */
 public class TestName extends TestWatcher {
 	private String fName;

File: src/main/java/org/junit/rules/TestRule.java
Patch:
@@ -39,6 +39,7 @@
  *   <li>{@link Timeout}: cause test to fail after a set time</li>
  *   <li>{@link Verifier}: fail test if object state ends up incorrect</li>
  * </ul>
+ * @since 4.9
  */
 public interface TestRule {
 	/**

File: src/main/java/org/junit/rules/TestWatcher.java
Patch:
@@ -36,6 +36,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.9
  */
 public abstract class TestWatcher implements TestRule {
 	public Statement apply(final Statement base, final Description description) {

File: src/main/java/org/junit/rules/TestWatchman.java
Patch:
@@ -40,6 +40,7 @@
  * 
  * @deprecated {@link MethodRule} is deprecated.  
  *             Use {@link TestWatcher} implements {@link TestRule} instead.
+ * @since 4.7
  */
 @Deprecated
 public class TestWatchman implements MethodRule {

File: src/main/java/org/junit/rules/Timeout.java
Patch:
@@ -1,6 +1,3 @@
-/**
- * 
- */
 package org.junit.rules;
 
 import org.junit.internal.runners.statements.FailOnTimeout;
@@ -32,6 +29,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.7
  */
 public class Timeout implements TestRule {
 	private final int fMillis;

File: src/main/java/org/junit/rules/Verifier.java
Patch:
@@ -24,6 +24,7 @@
  *        }
  *     }
  * </pre>
+ * @since 4.7
  */
 public abstract class Verifier implements TestRule {
 	public Statement apply(final Statement base, Description description) {

File: src/main/java/org/junit/runner/Computer.java
Patch:
@@ -8,6 +8,7 @@
  * Represents a strategy for computing runners and suites.
  * WARNING: this class is very likely to undergo serious changes in version 4.8 and
  * beyond.
+ * @since 4.6
  */
 public class Computer {
 	/**

File: src/main/java/org/junit/runner/Describable.java
Patch:
@@ -3,6 +3,7 @@
 
 /**
  * Represents an object that can describe itself
+ * @since 4.5
  */
 public interface Describable {
 	/**

File: src/main/java/org/junit/runner/Description.java
Patch:
@@ -24,6 +24,7 @@
  * 
  * @see org.junit.runner.Request
  * @see org.junit.runner.Runner
+ * @since 4.0
  */
 public class Description implements Serializable {
 	private static final long serialVersionUID = 1L;

File: src/main/java/org/junit/runner/JUnitCore.java
Patch:
@@ -23,6 +23,7 @@
  * @see org.junit.runner.Result
  * @see org.junit.runner.notification.RunListener
  * @see org.junit.runner.Request
+ * @since 4.0
  */
 public class JUnitCore {
 	private final RunNotifier fNotifier= new RunNotifier();

File: src/main/java/org/junit/runner/Request.java
Patch:
@@ -21,6 +21,7 @@
  * a {@link org.junit.runner.Runner} is created for each class implied by the <code>Request</code> -> 
  * the {@link org.junit.runner.Runner} returns a detailed {@link org.junit.runner.Description} 
  * which is a tree structure of the tests to be run.</p>
+ * @since 4.0
  */
 public abstract class Request {
 	/**

File: src/main/java/org/junit/runner/Result.java
Patch:
@@ -12,6 +12,7 @@
 /**
  * A <code>Result</code> collects and summarizes information from running multiple tests.
  * All tests are counted -- additional information is collected from tests that fail.
+ * @since 4.0
  */
 public class Result implements Serializable {
 	private static final long serialVersionUID = 1L;

File: src/main/java/org/junit/runner/RunWith.java
Patch:
@@ -22,6 +22,7 @@
  * public class ABCSuite {
  * }
  * </pre>
+ * @since 4.0
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: src/main/java/org/junit/runner/Runner.java
Patch:
@@ -17,6 +17,7 @@
  * 
  * @see org.junit.runner.Description
  * @see org.junit.runner.RunWith
+ * @since 4.0
  */
 public abstract class Runner implements Describable {
 	/* (non-Javadoc)

File: src/main/java/org/junit/runner/manipulation/Filter.java
Patch:
@@ -11,6 +11,7 @@
  * {@link org.junit.runner.JUnitCore#run(Request)}. Alternatively, apply a <code>Filter</code> to 
  * a {@link org.junit.runner.Runner} before running tests (for example, in conjunction with 
  * {@link org.junit.runner.RunWith}.
+ * @since 4.0
  */
 public abstract class Filter {
 	/**

File: src/main/java/org/junit/runner/manipulation/Filterable.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Runners that allow filtering should implement this interface. Implement {@link #filter(Filter)}
  * to remove tests that don't pass the filter.
+ * @since 4.0
  */
 public interface Filterable {
 

File: src/main/java/org/junit/runner/manipulation/NoTestsRemainException.java
Patch:
@@ -2,6 +2,7 @@
 
 /**
  * Thrown when a filter removes all tests from a runner.
+ * @since 4.0
  */
 public class NoTestsRemainException extends Exception {
 	private static final long serialVersionUID = 1L;

File: src/main/java/org/junit/runner/manipulation/Sortable.java
Patch:
@@ -5,6 +5,7 @@
  * failed first, you can reduce the average time to the first test failing. Test sorting should not be used to
  * cope with order dependencies between tests. Tests that are isolated from each other are less
  * expensive to maintain and can be run individually.
+ * @since 4.0
  */
 public interface Sortable {
 

File: src/main/java/org/junit/runner/manipulation/Sorter.java
Patch:
@@ -8,7 +8,7 @@
  * A <code>Sorter</code> orders tests. In general you will not need
  * to use a <code>Sorter</code> directly. Instead, use {@link org.junit.runner.Request#sortWith(Comparator)}.
  * 
- * 
+ * @since 4.0
  */
 public class Sorter implements Comparator<Description> {
 	/**

File: src/main/java/org/junit/runner/notification/Failure.java
Patch:
@@ -12,6 +12,7 @@
  * will be of a single test. However, if problems are encountered while constructing the
  * test (for example, if a {@link org.junit.BeforeClass} method is not static), it may describe
  * something other than a single test.
+ * @since 4.0
  */
 public class Failure implements Serializable {
 	private static final long serialVersionUID = 1L;

File: src/main/java/org/junit/runner/notification/RunListener.java
Patch:
@@ -30,6 +30,7 @@
  * </pre>
  * </p>
  * @see org.junit.runner.JUnitCore
+ * @since 4.0
  */
 public class RunListener {
 

File: src/main/java/org/junit/runner/notification/RunNotifier.java
Patch:
@@ -17,6 +17,7 @@
  * {@link org.junit.runner.Runner#run(RunNotifier)}. Future evolution of this class is likely to 
  * move {@link #fireTestRunStarted(Description)} and {@link #fireTestRunFinished(Result)}
  * to a separate class since they should only be called once per run.
+ * @since 4.0
  */
 public class RunNotifier {
 	private final List<RunListener> fListeners= 

File: src/main/java/org/junit/runner/notification/StoppedByUserException.java
Patch:
@@ -5,6 +5,7 @@
  * test running GUIs should be prepared to catch a <code>StoppedByUserException</code>.
  * 
  * @see org.junit.runner.notification.RunNotifier
+ * @since 4.0
  */
 public class StoppedByUserException extends RuntimeException {
 	private static final long serialVersionUID= 1L;

File: src/main/java/org/junit/runners/AllTests.java
Patch:
@@ -13,6 +13,7 @@
  *    }
  * }
  * </pre>
+ * @since 4.0
  */
 public class AllTests extends SuiteMethod {
 	/**

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -44,6 +44,7 @@
  * <li>It is published, and extension and reuse are encouraged, whereas {@code
  * JUnit4ClassRunner} was in an internal package, and is now deprecated.
  * </ul>
+ * @since 4.5
  */
 public class BlockJUnit4ClassRunner extends ParentRunner<FrameworkMethod> {
 	/**

File: src/main/java/org/junit/runners/JUnit4.java
Patch:
@@ -11,6 +11,7 @@
  * This is the only way this class should be used--any extension that
  * depends on the implementation details of this class is likely to break
  * in future versions.
+ * @since 4.5
  */
 public final class JUnit4 extends BlockJUnit4ClassRunner {
 	/**

File: src/main/java/org/junit/runners/MethodSorters.java
Patch:
@@ -8,6 +8,7 @@
 /**
  * Sort the methods into a specified execution order.
  * Defines common {@link MethodSorter} implementations.
+ * @since 4.11
  */
 public enum MethodSorters {
     /** Sorts the test methods by the method name, in lexicographic order,

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -73,6 +73,7 @@
  * names like <code>[1: fib(3)=2]</code>. If you don't use the name parameter,
  * then the current parameter index is used as name.
  * </p>
+ * @since 4.0
  */
 public class Parameterized extends Suite {
 	/**

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -47,6 +47,7 @@
  * {@code @BeforeClass} and {@code @AfterClass} methods, 
  * handle annotated {@link ClassRule}s, create a composite
  * {@link Description}, and run children sequentially.
+ * @since 4.5
  */
 public abstract class ParentRunner<T> extends Runner implements Filterable,
 		Sortable {

File: src/main/java/org/junit/runners/Suite.java
Patch:
@@ -20,6 +20,7 @@
  * static {@link junit.framework.Test} <code>suite()</code> method. To use it, annotate a class
  * with <code>@RunWith(Suite.class)</code> and <code>@SuiteClasses({TestClass1.class, ...})</code>.
  * When you run this class, it will run all the tests in all the suite classes.
+ * @since 4.0
  */
 public class Suite extends ParentRunner<Runner> {
 	/**

File: src/main/java/org/junit/runners/model/FrameworkField.java
Patch:
@@ -9,6 +9,7 @@
 /**
  * Represents a field on a test class (currently used only for Rules in
  * {@link BlockJUnit4ClassRunner}, but custom runners can make other uses)
+ * @since 4.7
  */
 public class FrameworkField extends FrameworkMember<FrameworkField> {
 	private final Field fField;

File: src/main/java/org/junit/runners/model/FrameworkMethod.java
Patch:
@@ -14,6 +14,7 @@
  * test execution. These methods are usually marked with an annotation (such as
  * {@code @Test}, {@code @Before}, {@code @After}, {@code @BeforeClass}, 
  * {@code @AfterClass}, etc.)
+ * @since 4.5
  */
 public class FrameworkMethod extends FrameworkMember<FrameworkMethod> {
 	final Method fMethod;

File: src/main/java/org/junit/runners/model/InitializationError.java
Patch:
@@ -5,6 +5,7 @@
 
 /**
  * Represents one or more problems encountered while initializing a Runner
+ * @since 4.5
  */
 public class InitializationError extends Exception {
 	private static final long serialVersionUID= 1L;

File: src/main/java/org/junit/runners/model/MultipleFailureException.java
Patch:
@@ -8,6 +8,7 @@
 
 /**
  * Collects multiple {@code Throwable}s into one exception.
+ * @since 4.9
  */
 public class MultipleFailureException extends Exception {
 	private static final long serialVersionUID= 1L;

File: src/main/java/org/junit/runners/model/RunnerBuilder.java
Patch:
@@ -34,6 +34,7 @@
  * </pre>
  * 
  * @see org.junit.runners.Suite
+ * @since 4.5
  */
 public abstract class RunnerBuilder {
 	private final Set<Class<?>> parents= new HashSet<Class<?>>();

File: src/main/java/org/junit/runners/model/RunnerScheduler.java
Patch:
@@ -5,6 +5,7 @@
  * should be run (in serial or parallel)
  * 
  * WARNING: still experimental, may go away.
+ * @since 4.7
  */
 public interface RunnerScheduler {
 	/**

File: src/main/java/org/junit/runners/model/Statement.java
Patch:
@@ -1,12 +1,10 @@
-/**
- * 
- */
 package org.junit.runners.model;
 
 
 /**
  * Represents one or more actions to be taken at runtime in the course
  * of running a JUnit test suite.
+ * @since 4.5
  */
 public abstract class Statement {
 	/**

File: src/main/java/org/junit/runners/model/TestClass.java
Patch:
@@ -18,6 +18,7 @@
 
 /**
  * Wraps a class to be run, providing method validation and annotation searching
+ * @since 4.5
  */
 public class TestClass {
 	private final Class<?> fClass;

File: src/main/java/org/junit/After.java
Patch:
@@ -31,6 +31,7 @@
  * 
  * @see org.junit.Before
  * @see org.junit.Test
+ * @since 4.0
  */
 
 @Retention(RetentionPolicy.RUNTIME)

File: src/main/java/org/junit/AfterClass.java
Patch:
@@ -34,6 +34,7 @@
  * 
  * @see org.junit.BeforeClass
  * @see org.junit.Test
+ * @since 4.0
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)

File: src/main/java/org/junit/Assert.java
Patch:
@@ -20,6 +20,7 @@
  * </pre>
  * 
  * @see AssertionError
+ * @since 4.0
  */
 public class Assert {
 	/**

File: src/main/java/org/junit/Assume.java
Patch:
@@ -29,6 +29,7 @@
  *    ...
  *    assumeTrue(...);
  * </pre>
+ * @since 4.4
  */
 public class Assume {
 	/**

File: src/main/java/org/junit/Before.java
Patch:
@@ -31,6 +31,7 @@
  * 
  * @see org.junit.BeforeClass
  * @see org.junit.After
+ * @since 4.0
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)

File: src/main/java/org/junit/BeforeClass.java
Patch:
@@ -28,6 +28,7 @@
  * }
  * </pre>
  * @see org.junit.AfterClass
+ * @since 4.0
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)

File: src/main/java/org/junit/ClassRule.java
Patch:
@@ -79,6 +79,7 @@
  * </pre>
  * 
  * For more information and more examples, see {@link org.junit.rules.TestRule}. 
+ * @since 4.9
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.FIELD, ElementType.METHOD})

File: src/main/java/org/junit/ComparisonFailure.java
Patch:
@@ -6,6 +6,7 @@
  * strings.
  * 
  * Inspired by a patch from Alex Chaffee (alex@purpletech.com)
+ * @since 4.0
  */
 public class ComparisonFailure extends AssertionError {	
 	/** 

File: src/main/java/org/junit/FixMethodOrder.java
Patch:
@@ -30,6 +30,7 @@
  * </pre>
  * 
  * @see org.junit.runners.MethodSorters
+ * @since 4.11
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE})

File: src/main/java/org/junit/Ignore.java
Patch:
@@ -28,6 +28,7 @@
  *		}
  * </pre>
  *
+ * @since 4.0
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.METHOD, ElementType.TYPE})

File: src/main/java/org/junit/Rule.java
Patch:
@@ -62,6 +62,7 @@
  * Note: for backwards compatibility, this annotation may also mark
  * fields or methods of type {@link org.junit.rules.MethodRule}, which will be honored.  However,
  * this is a deprecated interface and feature.
+ * @since 4.7
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.FIELD, ElementType.METHOD})

File: src/main/java/org/junit/Test.java
Patch:
@@ -41,6 +41,7 @@
  *       while(true);
  *    }
  * </pre></p>
+ * @since 4.0
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.METHOD})

File: src/main/java/org/junit/matchers/JUnitMatchers.java
Patch:
@@ -10,6 +10,7 @@
 /**
  * Convenience import class: these are useful matchers for use with the assertThat method, but they are
  * not currently included in the basic CoreMatchers class from hamcrest.
+ * @since 4.4
  */
 public class JUnitMatchers {
 	/**

File: src/main/java/org/junit/rules/ErrorCollector.java
Patch:
@@ -1,5 +1,6 @@
 /**
  * 
+ * @since 4.7
  */
 package org.junit.rules;
 
@@ -31,6 +32,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.7
  */
 public class ErrorCollector extends Verifier {
 	private List<Throwable> errors= new ArrayList<Throwable>();

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -78,6 +78,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.7
  */
 public class ExpectedException implements TestRule {
 	/**

File: src/main/java/org/junit/rules/ExternalResource.java
Patch:
@@ -31,6 +31,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.7
  */
 public abstract class ExternalResource implements TestRule {
 	public Statement apply(Statement base, Description description) {

File: src/main/java/org/junit/rules/MethodRule.java
Patch:
@@ -25,6 +25,7 @@
  * </ul>
  * 
  * Note that {@link MethodRule} is now deprecated, you should be using {@link TestRule} instead.
+ * @since 4.7
  */
 @Deprecated
 public interface MethodRule {

File: src/main/java/org/junit/rules/RuleChain.java
Patch:
@@ -1,5 +1,6 @@
 /**
  * 
+ * @since 4.10
  */
 package org.junit.rules;
 
@@ -40,6 +41,7 @@
  * finished middle rule
  * finished outer rule
  * </pre>
+ * @since 4.10
  */
 public class RuleChain implements TestRule {
 	private static final RuleChain EMPTY_CHAIN= new RuleChain(

File: src/main/java/org/junit/rules/RunRules.java
Patch:
@@ -5,6 +5,7 @@
 
 /**
  * Runs a collection of rules on a statement.
+ * @since 4.9
  */
 public class RunRules extends Statement {
 	private final Statement statement;

File: src/main/java/org/junit/rules/TemporaryFolder.java
Patch:
@@ -23,6 +23,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.7
  */
 public class TemporaryFolder extends ExternalResource {
         private final File parentFolder;

File: src/main/java/org/junit/rules/TestName.java
Patch:
@@ -21,6 +21,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.7
  */
 public class TestName extends TestWatcher {
 	private String fName;

File: src/main/java/org/junit/rules/TestRule.java
Patch:
@@ -39,6 +39,7 @@
  *   <li>{@link Timeout}: cause test to fail after a set time</li>
  *   <li>{@link Verifier}: fail test if object state ends up incorrect</li>
  * </ul>
+ * @since 4.9
  */
 public interface TestRule {
 	/**

File: src/main/java/org/junit/rules/TestWatcher.java
Patch:
@@ -36,6 +36,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.9
  */
 public abstract class TestWatcher implements TestRule {
 	public Statement apply(final Statement base, final Description description) {

File: src/main/java/org/junit/rules/TestWatchman.java
Patch:
@@ -40,6 +40,7 @@
  * 
  * @deprecated {@link MethodRule} is deprecated.  
  *             Use {@link TestWatcher} implements {@link TestRule} instead.
+ * @since 4.7
  */
 @Deprecated
 public class TestWatchman implements MethodRule {

File: src/main/java/org/junit/rules/Timeout.java
Patch:
@@ -1,5 +1,6 @@
 /**
  * 
+ * @since 4.7
  */
 package org.junit.rules;
 
@@ -32,6 +33,7 @@
  * 	}
  * }
  * </pre>
+ * @since 4.7
  */
 public class Timeout implements TestRule {
 	private final int fMillis;

File: src/main/java/org/junit/rules/Verifier.java
Patch:
@@ -24,6 +24,7 @@
  *        }
  *     }
  * </pre>
+ * @since 4.7
  */
 public abstract class Verifier implements TestRule {
 	public Statement apply(final Statement base, Description description) {

File: src/main/java/org/junit/runner/Computer.java
Patch:
@@ -8,6 +8,7 @@
  * Represents a strategy for computing runners and suites.
  * WARNING: this class is very likely to undergo serious changes in version 4.8 and
  * beyond.
+ * @since 4.6
  */
 public class Computer {
 	/**

File: src/main/java/org/junit/runner/Describable.java
Patch:
@@ -3,6 +3,7 @@
 
 /**
  * Represents an object that can describe itself
+ * @since 4.5
  */
 public interface Describable {
 	/**

File: src/main/java/org/junit/runner/Description.java
Patch:
@@ -24,6 +24,7 @@
  * 
  * @see org.junit.runner.Request
  * @see org.junit.runner.Runner
+ * @since 4.0
  */
 public class Description implements Serializable {
 	private static final long serialVersionUID = 1L;

File: src/main/java/org/junit/runner/JUnitCore.java
Patch:
@@ -23,6 +23,7 @@
  * @see org.junit.runner.Result
  * @see org.junit.runner.notification.RunListener
  * @see org.junit.runner.Request
+ * @since 4.0
  */
 public class JUnitCore {
 	private final RunNotifier fNotifier= new RunNotifier();

File: src/main/java/org/junit/runner/Request.java
Patch:
@@ -21,6 +21,7 @@
  * a {@link org.junit.runner.Runner} is created for each class implied by the <code>Request</code> -> 
  * the {@link org.junit.runner.Runner} returns a detailed {@link org.junit.runner.Description} 
  * which is a tree structure of the tests to be run.</p>
+ * @since 4.0
  */
 public abstract class Request {
 	/**

File: src/main/java/org/junit/runner/Result.java
Patch:
@@ -12,6 +12,7 @@
 /**
  * A <code>Result</code> collects and summarizes information from running multiple tests.
  * All tests are counted -- additional information is collected from tests that fail.
+ * @since 4.0
  */
 public class Result implements Serializable {
 	private static final long serialVersionUID = 1L;

File: src/main/java/org/junit/runner/RunWith.java
Patch:
@@ -22,6 +22,7 @@
  * public class ABCSuite {
  * }
  * </pre>
+ * @since 4.0
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)

File: src/main/java/org/junit/runner/Runner.java
Patch:
@@ -17,6 +17,7 @@
  * 
  * @see org.junit.runner.Description
  * @see org.junit.runner.RunWith
+ * @since 4.0
  */
 public abstract class Runner implements Describable {
 	/* (non-Javadoc)

File: src/main/java/org/junit/runner/manipulation/Filter.java
Patch:
@@ -11,6 +11,7 @@
  * {@link org.junit.runner.JUnitCore#run(Request)}. Alternatively, apply a <code>Filter</code> to 
  * a {@link org.junit.runner.Runner} before running tests (for example, in conjunction with 
  * {@link org.junit.runner.RunWith}.
+ * @since 4.0
  */
 public abstract class Filter {
 	/**

File: src/main/java/org/junit/runner/manipulation/Filterable.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Runners that allow filtering should implement this interface. Implement {@link #filter(Filter)}
  * to remove tests that don't pass the filter.
+ * @since 4.0
  */
 public interface Filterable {
 

File: src/main/java/org/junit/runner/manipulation/NoTestsRemainException.java
Patch:
@@ -2,6 +2,7 @@
 
 /**
  * Thrown when a filter removes all tests from a runner.
+ * @since 4.0
  */
 public class NoTestsRemainException extends Exception {
 	private static final long serialVersionUID = 1L;

File: src/main/java/org/junit/runner/manipulation/Sortable.java
Patch:
@@ -5,6 +5,7 @@
  * failed first, you can reduce the average time to the first test failing. Test sorting should not be used to
  * cope with order dependencies between tests. Tests that are isolated from each other are less
  * expensive to maintain and can be run individually.
+ * @since 4.0
  */
 public interface Sortable {
 

File: src/main/java/org/junit/runner/manipulation/Sorter.java
Patch:
@@ -8,7 +8,7 @@
  * A <code>Sorter</code> orders tests. In general you will not need
  * to use a <code>Sorter</code> directly. Instead, use {@link org.junit.runner.Request#sortWith(Comparator)}.
  * 
- * 
+ * @since 4.0
  */
 public class Sorter implements Comparator<Description> {
 	/**

File: src/main/java/org/junit/runner/notification/Failure.java
Patch:
@@ -12,6 +12,7 @@
  * will be of a single test. However, if problems are encountered while constructing the
  * test (for example, if a {@link org.junit.BeforeClass} method is not static), it may describe
  * something other than a single test.
+ * @since 4.0
  */
 public class Failure implements Serializable {
 	private static final long serialVersionUID = 1L;

File: src/main/java/org/junit/runner/notification/RunListener.java
Patch:
@@ -30,6 +30,7 @@
  * </pre>
  * </p>
  * @see org.junit.runner.JUnitCore
+ * @since 4.0
  */
 public class RunListener {
 

File: src/main/java/org/junit/runner/notification/RunNotifier.java
Patch:
@@ -17,6 +17,7 @@
  * {@link org.junit.runner.Runner#run(RunNotifier)}. Future evolution of this class is likely to 
  * move {@link #fireTestRunStarted(Description)} and {@link #fireTestRunFinished(Result)}
  * to a separate class since they should only be called once per run.
+ * @since 4.0
  */
 public class RunNotifier {
 	private final List<RunListener> fListeners= 

File: src/main/java/org/junit/runner/notification/StoppedByUserException.java
Patch:
@@ -5,6 +5,7 @@
  * test running GUIs should be prepared to catch a <code>StoppedByUserException</code>.
  * 
  * @see org.junit.runner.notification.RunNotifier
+ * @since 4.0
  */
 public class StoppedByUserException extends RuntimeException {
 	private static final long serialVersionUID= 1L;

File: src/main/java/org/junit/runners/AllTests.java
Patch:
@@ -13,6 +13,7 @@
  *    }
  * }
  * </pre>
+ * @since 4.0
  */
 public class AllTests extends SuiteMethod {
 	/**

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -44,6 +44,7 @@
  * <li>It is published, and extension and reuse are encouraged, whereas {@code
  * JUnit4ClassRunner} was in an internal package, and is now deprecated.
  * </ul>
+ * @since 4.5
  */
 public class BlockJUnit4ClassRunner extends ParentRunner<FrameworkMethod> {
 	/**

File: src/main/java/org/junit/runners/JUnit4.java
Patch:
@@ -11,6 +11,7 @@
  * This is the only way this class should be used--any extension that
  * depends on the implementation details of this class is likely to break
  * in future versions.
+ * @since 4.5
  */
 public final class JUnit4 extends BlockJUnit4ClassRunner {
 	/**

File: src/main/java/org/junit/runners/MethodSorters.java
Patch:
@@ -8,6 +8,7 @@
 /**
  * Sort the methods into a specified execution order.
  * Defines common {@link MethodSorter} implementations.
+ * @since 4.11
  */
 public enum MethodSorters {
     /** Sorts the test methods by the method name, in lexicographic order,

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -73,6 +73,7 @@
  * names like <code>[1: fib(3)=2]</code>. If you don't use the name parameter,
  * then the current parameter index is used as name.
  * </p>
+ * @since 4.0
  */
 public class Parameterized extends Suite {
 	/**

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -47,6 +47,7 @@
  * {@code @BeforeClass} and {@code @AfterClass} methods, 
  * handle annotated {@link ClassRule}s, create a composite
  * {@link Description}, and run children sequentially.
+ * @since 4.5
  */
 public abstract class ParentRunner<T> extends Runner implements Filterable,
 		Sortable {

File: src/main/java/org/junit/runners/Suite.java
Patch:
@@ -20,6 +20,7 @@
  * static {@link junit.framework.Test} <code>suite()</code> method. To use it, annotate a class
  * with <code>@RunWith(Suite.class)</code> and <code>@SuiteClasses({TestClass1.class, ...})</code>.
  * When you run this class, it will run all the tests in all the suite classes.
+ * @since 4.0
  */
 public class Suite extends ParentRunner<Runner> {
 	/**

File: src/main/java/org/junit/runners/model/FrameworkField.java
Patch:
@@ -9,6 +9,7 @@
 /**
  * Represents a field on a test class (currently used only for Rules in
  * {@link BlockJUnit4ClassRunner}, but custom runners can make other uses)
+ * @since 4.7
  */
 public class FrameworkField extends FrameworkMember<FrameworkField> {
 	private final Field fField;

File: src/main/java/org/junit/runners/model/FrameworkMethod.java
Patch:
@@ -14,6 +14,7 @@
  * test execution. These methods are usually marked with an annotation (such as
  * {@code @Test}, {@code @Before}, {@code @After}, {@code @BeforeClass}, 
  * {@code @AfterClass}, etc.)
+ * @since 4.5
  */
 public class FrameworkMethod extends FrameworkMember<FrameworkMethod> {
 	final Method fMethod;

File: src/main/java/org/junit/runners/model/InitializationError.java
Patch:
@@ -5,6 +5,7 @@
 
 /**
  * Represents one or more problems encountered while initializing a Runner
+ * @since 4.5
  */
 public class InitializationError extends Exception {
 	private static final long serialVersionUID= 1L;

File: src/main/java/org/junit/runners/model/MultipleFailureException.java
Patch:
@@ -8,6 +8,7 @@
 
 /**
  * Collects multiple {@code Throwable}s into one exception.
+ * @since 4.9
  */
 public class MultipleFailureException extends Exception {
 	private static final long serialVersionUID= 1L;

File: src/main/java/org/junit/runners/model/RunnerBuilder.java
Patch:
@@ -34,6 +34,7 @@
  * </pre>
  * 
  * @see org.junit.runners.Suite
+ * @since 4.5
  */
 public abstract class RunnerBuilder {
 	private final Set<Class<?>> parents= new HashSet<Class<?>>();

File: src/main/java/org/junit/runners/model/RunnerScheduler.java
Patch:
@@ -5,6 +5,7 @@
  * should be run (in serial or parallel)
  * 
  * WARNING: still experimental, may go away.
+ * @since 4.7
  */
 public interface RunnerScheduler {
 	/**

File: src/main/java/org/junit/runners/model/Statement.java
Patch:
@@ -1,12 +1,14 @@
 /**
  * 
+ * @since 4.5
  */
 package org.junit.runners.model;
 
 
 /**
  * Represents one or more actions to be taken at runtime in the course
  * of running a JUnit test suite.
+ * @since 4.5
  */
 public abstract class Statement {
 	/**

File: src/main/java/org/junit/runners/model/TestClass.java
Patch:
@@ -18,6 +18,7 @@
 
 /**
  * Wraps a class to be run, providing method validation and annotation searching
+ * @since 4.5
  */
 public class TestClass {
 	private final Class<?> fClass;

File: src/main/java/org/junit/internal/MethodSorter.java
Patch:
@@ -22,7 +22,7 @@ public int compare(Method m1, Method m2) {
     };
     
     /**
-     * Method name ascending lexicograhic sort order
+     * Method name ascending lexicographic sort order
      */
     public static Comparator<Method> NAME_ASCENDING= new Comparator<Method>() {
         public int compare(Method m1, Method m2) {

File: src/main/java/org/junit/runners/MethodSorters.java
Patch:
@@ -12,7 +12,7 @@
 public enum MethodSorters {
     /** Sorts the test methods by the method name, in lexicographic order */
     NAME_ASCENDING(MethodSorter.NAME_ASCENDING),
-    /** Sorts the test methods by the method name, in reverse lexicographic order */
+    /** the order in which the tests are returned by the JVM, i.e. there is no sorting done */
     JVM(null),
     /** the default value, deterministic, but not predictable */
     DEFAULT(MethodSorter.DEFAULT);

File: src/main/java/org/junit/runner/Result.java
Patch:
@@ -10,9 +10,8 @@
 import org.junit.runner.notification.RunListener;
 
 /**
- * A <code>Result</code> collects and summarizes information from running multiple
- * tests. Since tests are expected to run correctly, successful tests are only noted in
- * the count of tests that ran.
+ * A <code>Result</code> collects and summarizes information from running multiple tests.
+ * All tests are counted -- additional information is collected from tests that fail.
  */
 public class Result implements Serializable {
 	private static final long serialVersionUID = 1L;

File: src/main/java/org/junit/rules/Verifier.java
Patch:
@@ -25,7 +25,7 @@
  *     }
  * </pre>
  */
-public class Verifier implements TestRule {
+public abstract class Verifier implements TestRule {
 	public Statement apply(final Statement base, Description description) {
 		return new Statement() {
 			@Override

File: src/main/java/org/junit/rules/Verifier.java
Patch:
@@ -25,7 +25,7 @@
  *     }
  * </pre>
  */
-public class Verifier implements TestRule {
+public abstract class Verifier implements TestRule {
 	public Statement apply(final Statement base, Description description) {
 		return new Statement() {
 			@Override

File: src/main/java/org/junit/rules/RuleChain.java
Patch:
@@ -18,7 +18,7 @@
  * <pre>
  * public static class UseRuleChain {
  * 	&#064;Rule
- * 	public TestRule chain= RuleChain
+ * 	public RuleChain chain= RuleChain
  * 	                       .outerRule(new LoggingRule("outer rule")
  * 	                       .around(new LoggingRule("middle rule")
  * 	                       .around(new LoggingRule("inner rule");

File: src/main/java/org/junit/rules/TestWatcher.java
Patch:
@@ -14,7 +14,7 @@
  * 	private static String watchedLog;
  * 
  * 	&#064;Rule
- * 	public TestRule watchman= new TestWatcher() {
+ * 	public TestWatcher watchman= new TestWatcher() {
  * 		&#064;Override
  * 		protected void failed(Throwable e, Description description) {
  * 			watchedLog+= description + &quot;\n&quot;;

File: src/main/java/org/junit/rules/Timeout.java
Patch:
@@ -15,7 +15,7 @@
  * 	public static String log;
  * 
  * 	&#064;Rule
- * 	public TestRule globalTimeout= new Timeout(20);
+ * 	public Timeout globalTimeout= new Timeout(20);
  * 
  * 	&#064;Test
  * 	public void testInfiniteLoop1() {

File: src/main/java/org/junit/rules/Verifier.java
Patch:
@@ -13,7 +13,7 @@
  *        private ErrorLog errorLog = new ErrorLog();
  *     
  *        &#064;Rule
- *        public TestRule verifier = new Verifier() {
+ *        public Verifier verifier = new Verifier() {
  *           &#064;Override public void verify() {
  *              assertTrue(errorLog.isEmpty());
  *           }

File: src/main/java/org/junit/runner/Result.java
Patch:
@@ -10,9 +10,8 @@
 import org.junit.runner.notification.RunListener;
 
 /**
- * A <code>Result</code> collects and summarizes information from running multiple
- * tests. Since tests are expected to run correctly, successful tests are only noted in
- * the count of tests that ran.
+ * A <code>Result</code> collects and summarizes information from running multiple tests.
+ * All tests are counted -- additional information is collected from tests that fail.
  */
 public class Result implements Serializable {
 	private static final long serialVersionUID = 1L;

File: src/main/java/org/junit/Assert.java
Patch:
@@ -560,7 +560,6 @@ static public void assertEquals(String message, double expected,
 			failNotEquals(message, new Double(expected), new Double(actual));
 	}
 	
-<<<<<<< HEAD
 	/**
 	 * Asserts that two floats are equal to within a positive delta.
 	 * If they are not, an {@link AssertionError} is thrown with the given
@@ -586,15 +585,13 @@ static public void assertEquals(String message, float expected,
 			return;
 		if (!(Math.abs(expected - actual) <= delta))
 			failNotEquals(message, new Float(expected), new Float(actual));
-=======
 	static private boolean doubleIsDifferent(double d1, double d2, double delta) {
 		if (Double.compare(d1, d2) == 0)
 			return false;
 		if ((Math.abs(d1 - d2) <= delta))
 			return false;
 		
 		return true;
->>>>>>> upstream/master
 	}
 
 	/**

File: src/main/java/org/junit/Assert.java
Patch:
@@ -792,6 +792,6 @@ public static <T> void assertThat(String reason, T actual,
 			if (actual instanceof Throwable)
 				assertionError.initCause((Throwable) actual);
 			throw assertionError;
-	}
+		}
 	}
 }

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.tests.assertion.BothTest;
 import org.junit.tests.assertion.EachTest;
 import org.junit.tests.assertion.MultipleFailureExceptionTest;
+import org.junit.tests.assertion.ThrowableMatcherTest;
 import org.junit.tests.deprecated.JUnit4ClassRunnerTest;
 import org.junit.tests.description.AnnotatedDescriptionTest;
 import org.junit.tests.description.SuiteDescriptionTest;
@@ -158,7 +159,8 @@
 	BlockJUnit4ClassRunnerOverrideTest.class,
 	RuleFieldValidatorTest.class,
 	RuleChainTest.class,
-	BlockJUnit4ClassRunnerTest.class
+	BlockJUnit4ClassRunnerTest.class,
+	ThrowableMatcherTest.class
 })
 public class AllTests {
 	public static Test suite() {

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -38,6 +38,7 @@
 import org.junit.tests.experimental.rules.TimeoutRuleTest;
 import org.junit.tests.experimental.rules.VerifierRuleTest;
 import org.junit.tests.experimental.theories.AllMembersSupplierTest;
+import org.junit.tests.experimental.theories.TestedOnSupplierTest;
 import org.junit.tests.experimental.theories.runner.TheoriesPerformanceTest;
 import org.junit.tests.junit3compatibility.AllTestsTest;
 import org.junit.tests.junit3compatibility.ClassRequestTest;
@@ -160,7 +161,8 @@
 	RuleFieldValidatorTest.class,
 	RuleChainTest.class,
 	BlockJUnit4ClassRunnerTest.class,
-	MethodSorterTest.class
+	MethodSorterTest.class,
+	TestedOnSupplierTest.class
 })
 public class AllTests {
 	public static Test suite() {

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -38,6 +38,7 @@
 import org.junit.tests.experimental.rules.TimeoutRuleTest;
 import org.junit.tests.experimental.rules.VerifierRuleTest;
 import org.junit.tests.experimental.theories.AllMembersSupplierTest;
+import org.junit.tests.experimental.theories.TestedOnSupplierTest;
 import org.junit.tests.experimental.theories.runner.TheoriesPerformanceTest;
 import org.junit.tests.junit3compatibility.AllTestsTest;
 import org.junit.tests.junit3compatibility.ClassRequestTest;
@@ -160,7 +161,8 @@
 	RuleFieldValidatorTest.class,
 	RuleChainTest.class,
 	BlockJUnit4ClassRunnerTest.class,
-	MethodSorterTest.class
+	MethodSorterTest.class,
+	TestedOnSupplierTest.class
 })
 public class AllTests {
 	public static Test suite() {

File: src/main/java/org/junit/Assert.java
Patch:
@@ -163,7 +163,7 @@ static public void assertEquals(Object expected, Object actual) {
 	 * @param first
 	 * 			  first value to check
 	 * @param second
-	 *            the value to check against <code>first</code>
+	 * 			  the value to check against <code>first</code>
 	 */
 	static public void assertNotEquals(String message, Object first, 
 			Object second) {
@@ -199,8 +199,8 @@ private static void failEquals(String message, Object actual) {
 	 * Asserts that two longs are <b>not</b> equals. If they are, an
 	 * {@link AssertionError} is thrown with the given message.
 	 * @param message
-	 *            the identifying message for the {@link AssertionError} (<code>null</code>
-	 *            okay)
+	 * 			  the identifying message for the {@link AssertionError} (<code>null</code>
+	 * 			  okay)
 	 * @param first
 	 * 			  first value to check
 	 * @param second

File: src/main/java/org/junit/rules/TemporaryFolder.java
Patch:
@@ -50,7 +50,9 @@ public void create() throws IOException {
 	 */
 	public File newFile(String fileName) throws IOException {
 		File file= new File(getRoot(), fileName);
-		file.createNewFile();
+		if (!file.createNewFile())
+			throw new IllegalStateException(
+					"a file with the name \'" + fileName + "\' already exists in the test folder");
 		return file;
 	}
 

File: src/main/java/org/junit/rules/TemporaryFolder.java
Patch:
@@ -50,7 +50,9 @@ public void create() throws IOException {
 	 */
 	public File newFile(String fileName) throws IOException {
 		File file= new File(getRoot(), fileName);
-		file.createNewFile();
+		if (!file.createNewFile())
+			throw new IllegalStateException(
+					"a file with the name \'" + fileName + "\' already exists in the test folder");
 		return file;
 	}
 

File: src/test/java/org/junit/tests/experimental/theories/ParameterSignatureTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.junit.tests.experimental.theories;
 
-import static org.hamcrest.CoreMatchers.hasItem;
 import static org.hamcrest.CoreMatchers.isA;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
@@ -10,6 +9,7 @@
 import java.lang.reflect.Method;
 import java.util.List;
 
+import org.hamcrest.CoreMatchers;
 import org.junit.Test;
 import org.junit.experimental.theories.DataPoint;
 import org.junit.experimental.theories.ParameterSignature;
@@ -51,6 +51,6 @@ public void getAnnotations() throws SecurityException,
 		List<Annotation> annotations= ParameterSignature.signatures(method)
 				.get(0).getAnnotations();
 		assertThat(annotations,
-				hasItem(isA(TestedOn.class)));
+				CoreMatchers.<TestedOn> hasItem(isA(TestedOn.class)));
 	}
 }

File: src/test/java/org/junit/tests/experimental/theories/runner/UnsuccessfulWithDataPointFields.java
Patch:
@@ -1,13 +1,14 @@
 package org.junit.tests.experimental.theories.runner;
 
-import static org.hamcrest.CoreMatchers.both;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.experimental.results.ResultMatchers.failureCountIs;
 import static org.junit.experimental.results.ResultMatchers.hasFailureContaining;
 import static org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining;
+import org.hamcrest.CoreMatchers;
 import org.junit.Test;
+import org.junit.experimental.results.PrintableResult;
 import org.junit.experimental.theories.DataPoint;
 import org.junit.experimental.theories.Theories;
 import org.junit.experimental.theories.Theory;
@@ -99,7 +100,7 @@ public void numbers(int x) {
 	public void dataPointsMustBeStatic() {
 		assertThat(
 				testResult(DataPointsMustBeStatic.class),
-				both(failureCountIs(2))
+				CoreMatchers.<PrintableResult> both(failureCountIs(2))
 						.and(
 								hasFailureContaining("DataPoint field THREE must be static"))
 						.and(

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.tests.experimental.parallel.ParallelMethodTest;
 import org.junit.tests.experimental.rules.BlockJUnit4ClassRunnerOverrideTest;
 import org.junit.tests.experimental.rules.ClassRulesTest;
-import org.junit.tests.experimental.rules.ExpectedExceptionRuleTest;
+import org.junit.tests.experimental.rules.ExpectedExceptionTest;
 import org.junit.tests.experimental.rules.ExternalResourceRuleTest;
 import org.junit.tests.experimental.rules.MethodRulesTest;
 import org.junit.tests.experimental.rules.NameRulesTest;
@@ -148,7 +148,7 @@
 	ParentRunnerTest.class,
 	NameRulesTest.class,
 	ClassRulesTest.class,
-	ExpectedExceptionRuleTest.class,
+	ExpectedExceptionTest.class,
 	TempFolderRuleTest.class,
 	TemporaryFolderUsageTest.class,
 	ExternalResourceRuleTest.class,

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -28,7 +28,7 @@
  * <pre>
  * &#064;RunWith(Parameterized.class)
  * public class FibonacciTest {
- * 	&#064;Parameters(name= &quot;fib({0})={1}&quot;)
+ * 	&#064;Parameters(name= &quot;{index}: fib({0})={1}&quot;)
  * 	public static Iterable&lt;Object[]&gt; data() {
  * 		return Arrays.asList(new Object[][] { { 0, 0 }, { 1, 1 }, { 2, 1 },
  * 				{ 3, 2 }, { 4, 3 }, { 5, 5 }, { 6, 8 } });
@@ -70,8 +70,8 @@
  * <dd></dd>
  * </dl>
  * In the example given above, the <code>Parameterized</code> runner creates
- * names like <code>fib(3)=2</code>. If you don't use the name parameter, then
- * the current parameter index is used as name.
+ * names like <code>[1: fib(3)=2]</code>. If you don't use the name parameter,
+ * then the current parameter index is used as name.
  * </p>
  */
 public class Parameterized extends Suite {

File: src/main/java/org/junit/experimental/results/ResultMatchers.java
Patch:
@@ -3,7 +3,7 @@
 import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
-import org.junit.internal.matchers.TypeSafeMatcher;
+import org.hamcrest.TypeSafeMatcher;
 
 /**
  * Matchers on a PrintableResult, to enable JUnit self-tests.

File: src/main/java/org/junit/internal/matchers/TypeSafeMatcher.java
Patch:
@@ -10,7 +10,10 @@
  * This simply implements the null check, checks the type and then casts.
  *
  * @author Joe Walnes
+ * 
+ * @deprecated Please use {@link org.hamcrest.TypeSafeMatcher}.
  */
+@Deprecated
 public abstract class TypeSafeMatcher<T> extends BaseMatcher<T> {
 
     private Class<?> expectedType;

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -6,8 +6,8 @@
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
 import org.hamcrest.StringDescription;
+import org.hamcrest.TypeSafeMatcher;
 import org.junit.Assert;
-import org.junit.internal.matchers.TypeSafeMatcher;
 import org.junit.runners.model.Statement;
 
 /**

File: src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java
Patch:
@@ -4,9 +4,9 @@
 import static org.junit.Assert.assertTrue;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
+import org.hamcrest.TypeSafeMatcher;
 import org.junit.Test;
 import org.junit.experimental.ParallelComputer;
-import org.junit.internal.matchers.TypeSafeMatcher;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
 import org.junit.runner.RunWith;

File: src/test/java/org/junit/tests/experimental/parallel/ParallelMethodTest.java
Patch:
@@ -4,9 +4,9 @@
 import static org.junit.Assert.assertTrue;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
+import org.hamcrest.TypeSafeMatcher;
 import org.junit.Test;
 import org.junit.experimental.ParallelComputer;
-import org.junit.internal.matchers.TypeSafeMatcher;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
 

File: src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java
Patch:
@@ -8,8 +8,8 @@
 import java.util.List;
 
 import org.hamcrest.Matcher;
+import org.hamcrest.TypeSafeMatcher;
 import org.junit.Test;
-import org.junit.internal.matchers.TypeSafeMatcher;
 import org.junit.runner.Description;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Request;

File: src/main/java/org/junit/internal/JUnitSystem.java
Patch:
@@ -3,6 +3,5 @@
 import java.io.PrintStream;
 
 public interface JUnitSystem {
-	void exit(int i);
 	PrintStream out();
 }

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -1,8 +1,8 @@
 package org.junit.rules;
 
+import static org.hamcrest.CoreMatchers.both;
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.junit.matchers.JUnitMatchers.both;
-import static org.junit.matchers.JUnitMatchers.containsString;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
 import org.hamcrest.StringDescription;
@@ -70,7 +70,7 @@ public void expect(Matcher<?> matcher) {
 		if (fMatcher == null)
 			fMatcher= (Matcher<Object>) matcher;
 		else
-			fMatcher= both(fMatcher).and(matcher);
+			fMatcher= both(fMatcher).and((Matcher<Object>) matcher);
 	}
 
 	/**

File: src/test/java/org/junit/tests/assertion/AssertionTest.java
Patch:
@@ -1,12 +1,13 @@
 package org.junit.tests.assertion;
 
 import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 
@@ -446,7 +447,7 @@ public void arraysDeclaredAsObjectAreComparedAsObjects() {
         String expectedMessage = "identifier\nExpected: is an instance of java.lang.Integer\n     got: \"actual\"\n";
         
         try {
-            assertThat("identifier", "actual", is(Integer.class));
+            assertThat("identifier", "actual", is(instanceOf(Integer.class)));
         } catch (AssertionError e) {
             assertEquals(expectedMessage, e.getMessage());
         }

File: src/test/java/org/junit/tests/experimental/AssumptionTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.junit.tests.experimental;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
@@ -9,7 +10,6 @@
 import static org.junit.Assume.assumeTrue;
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.experimental.results.ResultMatchers.isSuccessful;
-import static org.junit.internal.matchers.StringContains.containsString;
 import org.junit.Assume;
 import org.junit.Before;
 import org.junit.BeforeClass;

File: src/test/java/org/junit/tests/experimental/AssumptionViolatedExceptionTest.java
Patch:
@@ -1,10 +1,10 @@
 package org.junit.tests.experimental;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assume.assumeThat;
-import static org.junit.internal.matchers.StringContains.containsString;
 import org.hamcrest.Matcher;
 import org.hamcrest.StringDescription;
 import org.junit.Test;

File: src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java
Patch:
@@ -1,11 +1,11 @@
 package org.junit.tests.experimental.max;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.junit.matchers.JUnitMatchers.containsString;
 
 import java.io.File;
 import java.util.ArrayList;

File: src/test/java/org/junit/tests/experimental/results/PrintableResultTest.java
Patch:
@@ -2,8 +2,8 @@
 
 import static java.util.Arrays.asList;
 import static org.hamcrest.CoreMatchers.allOf;
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.junit.Assert.assertThat;
-import static org.junit.internal.matchers.StringContains.containsString;
 
 import java.util.Arrays;
 
@@ -17,7 +17,6 @@
 
 @RunWith(Theories.class)
 public class PrintableResultTest {
-	@SuppressWarnings("unchecked")
 	@Theory(nullsAccepted= false)
 	public void backTraceHasGoodToString(String descriptionName,
 			final String stackTraceClassName) {

File: src/test/java/org/junit/tests/experimental/results/ResultMatchersTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.junit.tests.experimental.results;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
-import static org.junit.internal.matchers.StringContains.containsString;
 import org.junit.Test;
 import org.junit.experimental.results.ResultMatchers;
 import org.junit.experimental.theories.Theory;

File: src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionRuleTest.java
Patch:
@@ -1,11 +1,11 @@
 package org.junit.tests.experimental.rules;
 
 import static org.hamcrest.CoreMatchers.any;
+import static org.hamcrest.CoreMatchers.both;
 import static org.junit.Assert.assertThat;
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining;
 import static org.junit.experimental.results.ResultMatchers.isSuccessful;
-import static org.junit.matchers.JUnitMatchers.both;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
 import org.junit.Rule;

File: src/test/java/org/junit/tests/experimental/rules/TempFolderRuleTest.java
Patch:
@@ -1,13 +1,13 @@
 package org.junit.tests.experimental.rules;
 
+import static org.hamcrest.CoreMatchers.hasItem;
 import static org.hamcrest.core.IsNot.not;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.experimental.results.ResultMatchers.failureCountIs;
 import static org.junit.experimental.results.ResultMatchers.isSuccessful;
-import static org.junit.internal.matchers.IsCollectionContaining.hasItem;
 
 import java.io.File;
 import java.io.IOException;

File: src/test/java/org/junit/tests/experimental/rules/TestRuleTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.junit.tests.experimental.rules;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
@@ -8,7 +9,6 @@
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining;
 import static org.junit.experimental.results.ResultMatchers.isSuccessful;
-import static org.junit.matchers.JUnitMatchers.containsString;
 
 import java.util.LinkedList;
 import java.util.List;

File: src/test/java/org/junit/tests/experimental/rules/TimeoutRuleTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.junit.tests.experimental.rules;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
-import static org.junit.matchers.JUnitMatchers.containsString;
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;

File: src/test/java/org/junit/tests/experimental/theories/ParameterizedAssertionErrorTest.java
Patch:
@@ -1,10 +1,10 @@
 package org.junit.tests.experimental.theories;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assume.assumeThat;
-import static org.junit.internal.matchers.StringContains.containsString;
 import org.junit.Test;
 import org.junit.experimental.theories.DataPoint;
 import org.junit.experimental.theories.Theories;

File: src/test/java/org/junit/tests/experimental/theories/runner/UnsuccessfulWithDataPointFields.java
Patch:
@@ -1,12 +1,12 @@
 package org.junit.tests.experimental.theories.runner;
 
+import static org.hamcrest.CoreMatchers.both;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.experimental.results.ResultMatchers.failureCountIs;
 import static org.junit.experimental.results.ResultMatchers.hasFailureContaining;
 import static org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining;
-import static org.junit.matchers.JUnitMatchers.both;
 import org.junit.Test;
 import org.junit.experimental.theories.DataPoint;
 import org.junit.experimental.theories.Theories;

File: src/test/java/org/junit/tests/experimental/theories/runner/WhenNoParametersMatch.java
Patch:
@@ -1,11 +1,11 @@
 package org.junit.tests.experimental.theories.runner;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assume.assumeThat;
 import static org.junit.experimental.results.PrintableResult.testResult;
-import static org.junit.internal.matchers.StringContains.containsString;
 import org.hamcrest.Matcher;
 import org.junit.experimental.theories.DataPoint;
 import org.junit.experimental.theories.DataPoints;

File: src/test/java/org/junit/tests/junit3compatibility/AllTestsTest.java
Patch:
@@ -1,9 +1,9 @@
 package org.junit.tests.junit3compatibility;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
-import static org.junit.matchers.JUnitMatchers.containsString;
 import junit.framework.JUnit4TestAdapter;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;

File: src/test/java/org/junit/tests/running/classes/ParameterizedTestTest.java
Patch:
@@ -1,9 +1,9 @@
 package org.junit.tests.running.classes;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
 import static org.junit.experimental.results.PrintableResult.testResult;
-import static org.junit.matchers.JUnitMatchers.containsString;
 
 import java.util.Arrays;
 import java.util.Collection;

File: src/test/java/org/junit/tests/running/methods/AnnotationTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.junit.tests.running.methods;
 
+import static org.hamcrest.CoreMatchers.both;
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.junit.Assert.assertThat;
-import static org.junit.matchers.JUnitMatchers.both;
-import static org.junit.matchers.JUnitMatchers.containsString;
 
 import java.util.Collection;
 import java.util.HashSet;

File: src/test/java/org/junit/tests/running/methods/TimeoutTest.java
Patch:
@@ -1,11 +1,11 @@
 package org.junit.tests.running.methods;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static org.junit.matchers.JUnitMatchers.containsString;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;

File: src/main/java/org/junit/runner/Description.java
Patch:
@@ -207,7 +207,7 @@ public Class<?> getTestClass() {
 		if (name == null)
 			return null;
 		try {
-			return Class.forName(name);
+			return Class.forName(name, false, getClass().getClassLoader());
 		} catch (ClassNotFoundException e) {
 			return null;
 		}

File: src/main/java/org/junit/runner/Description.java
Patch:
@@ -204,7 +204,7 @@ public Class<?> getTestClass() {
 		if (name == null)
 			return null;
 		try {
-			return Class.forName(name);
+			return Class.forName(name, false, getClass().getClassLoader());
 		} catch (ClassNotFoundException e) {
 			return null;
 		}

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -32,6 +32,7 @@
 import org.junit.tests.experimental.rules.RuleFieldValidatorTest;
 import org.junit.tests.experimental.rules.RuleChainTest;
 import org.junit.tests.experimental.rules.TempFolderRuleTest;
+import org.junit.tests.experimental.rules.TemporaryFolderUsageTest;
 import org.junit.tests.experimental.rules.TestRuleTest;
 import org.junit.tests.experimental.rules.TimeoutRuleTest;
 import org.junit.tests.experimental.rules.VerifierRuleTest;
@@ -148,6 +149,7 @@
 	ClassRulesTest.class,
 	ExpectedExceptionRuleTest.class,
 	TempFolderRuleTest.class,
+	TemporaryFolderUsageTest.class,
 	ExternalResourceRuleTest.class,
 	VerifierRuleTest.class,
 	CategoryTest.class,

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.tests.experimental.parallel.ParallelMethodTest;
 import org.junit.tests.experimental.rules.BlockJUnit4ClassRunnerOverrideTest;
 import org.junit.tests.experimental.rules.ClassRulesTest;
-import org.junit.tests.experimental.rules.ExpectedExceptionRuleTest;
+import org.junit.tests.experimental.rules.ExpectedExceptionTest;
 import org.junit.tests.experimental.rules.ExternalResourceRuleTest;
 import org.junit.tests.experimental.rules.MethodRulesTest;
 import org.junit.tests.experimental.rules.NameRulesTest;
@@ -144,7 +144,7 @@
 	ParentRunnerTest.class,
 	NameRulesTest.class,
 	ClassRulesTest.class,
-	ExpectedExceptionRuleTest.class,
+	ExpectedExceptionTest.class,
 	TempFolderRuleTest.class,
 	ExternalResourceRuleTest.class,
 	VerifierRuleTest.class,

File: src/test/java/junit/tests/framework/AllTests.java
Patch:
@@ -18,6 +18,7 @@ public static Test suite() {
 		suite.addTestSuite(TestCaseTest.class);
 		suite.addTest(SuiteTest.suite()); // Tests suite building, so can't use automatic test extraction 
 		suite.addTestSuite(TestListenerTest.class);
+		suite.addTestSuite(AssertionFailedErrorTest.class);
 		suite.addTestSuite(AssertTest.class);
 		suite.addTestSuite(TestImplementorTest.class);
 		suite.addTestSuite(NoArgTestCaseTest.class);

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -53,6 +53,7 @@
 import org.junit.tests.manipulation.FilterableTest;
 import org.junit.tests.manipulation.SingleMethodTest;
 import org.junit.tests.manipulation.SortableTest;
+import org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest;
 import org.junit.tests.running.classes.EnclosedTest;
 import org.junit.tests.running.classes.IgnoreClassTest;
 import org.junit.tests.running.classes.ParameterizedTestTest;
@@ -152,6 +153,7 @@
 	CategoriesAndParameterizedTest.class,
 	ParentRunnerFilteringTest.class,
 	RuleChainTest.class,
+	BlockJUnit4ClassRunnerTest.class,
 	BlockJUnit4ClassRunnerOverrideTest.class
 })
 public class AllTests {

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -53,6 +53,7 @@
 import org.junit.tests.manipulation.FilterableTest;
 import org.junit.tests.manipulation.SingleMethodTest;
 import org.junit.tests.manipulation.SortableTest;
+import org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest;
 import org.junit.tests.running.classes.EnclosedTest;
 import org.junit.tests.running.classes.IgnoreClassTest;
 import org.junit.tests.running.classes.ParameterizedTestTest;
@@ -152,6 +153,7 @@
 	CategoriesAndParameterizedTest.class,
 	ParentRunnerFilteringTest.class,
 	RuleChainTest.class,
+	BlockJUnit4ClassRunnerTest.class,
 	BlockJUnit4ClassRunnerOverrideTest.class
 })
 public class AllTests {

File: src/test/java/junit/tests/framework/AllTests.java
Patch:
@@ -18,6 +18,7 @@ public static Test suite() {
 		suite.addTestSuite(TestCaseTest.class);
 		suite.addTest(SuiteTest.suite()); // Tests suite building, so can't use automatic test extraction 
 		suite.addTestSuite(TestListenerTest.class);
+		suite.addTestSuite(AssertionFailedErrorTest.class);
 		suite.addTestSuite(AssertTest.class);
 		suite.addTestSuite(TestImplementorTest.class);
 		suite.addTestSuite(NoArgTestCaseTest.class);

File: src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java
Patch:
@@ -80,6 +80,7 @@ private void addMultiPointMethods(List<PotentialAssignment> list) {
 			}
 	}
 
+	@SuppressWarnings("deprecation")
 	private void addSinglePointMethods(ParameterSignature sig,
 			List<PotentialAssignment> list) {
 		for (FrameworkMethod dataPointMethod : fClass

File: src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java
Patch:
@@ -5,7 +5,6 @@
 
 import org.junit.ClassRule;
 import org.junit.Rule;
-import org.junit.rules.MethodRule;
 import org.junit.rules.TestRule;
 import org.junit.runners.model.FrameworkField;
 import org.junit.runners.model.TestClass;
@@ -80,7 +79,8 @@ private boolean isTestRule(FrameworkField target) {
 
 	@SuppressWarnings("deprecation")
 	private boolean isMethodRule(FrameworkField target) {
-		return MethodRule.class.isAssignableFrom(target.getType());
+		return org.junit.rules.MethodRule.class.isAssignableFrom(target
+				.getType());
 	}
 
 	private void addError(List<Throwable> errors, FrameworkField field,

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -17,7 +17,6 @@
 import org.junit.internal.runners.statements.InvokeMethod;
 import org.junit.internal.runners.statements.RunAfters;
 import org.junit.internal.runners.statements.RunBefores;
-import org.junit.rules.MethodRule;
 import org.junit.rules.RunRules;
 import org.junit.rules.TestRule;
 import org.junit.runner.Description;

File: src/test/java/junit/samples/SimpleTest.java
Patch:
@@ -47,10 +47,12 @@ public void testAdd() {
 		// forced failure result == 5
 		assertTrue(result == 6);
 	}
+
+	public int unused;
 	public void testDivideByZero() {
 		int zero= 0;
 		int result= 8/zero;
-		result++; // avoid warning for not using result
+		unused= result; // avoid warning for not using result
 	}
 	public void testEquals() {
 		assertEquals(12, 12);

File: src/test/java/org/junit/samples/SimpleTest.java
Patch:
@@ -22,11 +22,13 @@ public static junit.framework.Test suite() {
 		 return new JUnit4TestAdapter(SimpleTest.class);
 	}
 
+	public int unused;
 	@Test public void divideByZero() {
 		int zero= 0;
 		int result= 8/zero;
-		result++; // avoid warning for not using result
+		unused= result; // avoid warning for not using result
 	}
+	
 	@Test public void testEquals() {
 		assertEquals(12, 12);
 		assertEquals(12L, 12L);

File: src/test/java/org/junit/tests/experimental/rules/TempFolderRuleTest.java
Patch:
@@ -178,7 +178,7 @@ public void testNewFile() throws IOException {
 		}
 
 		@Test
-		public void testNewFolder() throws IOException {
+		public void testNewFolder() {
 			folder.newFolder(NEW_FOLDER_DUMMY);
 		}
 	}

File: src/test/java/org/junit/tests/experimental/rules/TestWatchmanTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.junit.rules.TestWatchman;
 import org.junit.runners.model.FrameworkMethod;
 
+@SuppressWarnings("deprecation")
 public class TestWatchmanTest {
 	public static class ViolatedAssumptionTest {
 		@Rule

File: src/test/java/org/junit/tests/experimental/rules/VerifierRuleTest.java
Patch:
@@ -126,6 +126,8 @@ protected void verify() {
 	}
 	
 	@Test public void verifierRunsAfterTest() {
+		sequence = "";
 		assertThat(testResult(UsesVerifier.class), isSuccessful());
+		assertEquals("test verify ", sequence);
 	}
 }
\ No newline at end of file

File: src/test/java/junit/tests/framework/TestListenerTest.java
Patch:
@@ -33,6 +33,7 @@ protected void setUp() {
 		fStartCount= 0;
 		fEndCount= 0;
 		fFailureCount= 0;
+		fErrorCount= 0;
 	}
 	public void startTest(Test test) {
 		fStartCount++;

File: src/test/java/junit/tests/framework/TestListenerTest.java
Patch:
@@ -33,6 +33,7 @@ protected void setUp() {
 		fStartCount= 0;
 		fEndCount= 0;
 		fFailureCount= 0;
+		fErrorCount= 0;
 	}
 	public void startTest(Test test) {
 		fStartCount++;

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -29,6 +29,7 @@
 import org.junit.tests.experimental.rules.ExternalResourceRuleTest;
 import org.junit.tests.experimental.rules.MethodRulesTest;
 import org.junit.tests.experimental.rules.NameRulesTest;
+import org.junit.tests.experimental.rules.RuleChainTest;
 import org.junit.tests.experimental.rules.TempFolderRuleTest;
 import org.junit.tests.experimental.rules.TestRuleTest;
 import org.junit.tests.experimental.rules.TimeoutRuleTest;
@@ -150,6 +151,7 @@
 	CategoryTest.class,
 	CategoriesAndParameterizedTest.class,
 	ParentRunnerFilteringTest.class,
+	RuleChainTest.class,
 	BlockJUnit4ClassRunnerOverrideTest.class
 })
 public class AllTests {

File: src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java
Patch:
@@ -80,6 +80,7 @@ private void addMultiPointMethods(List<PotentialAssignment> list) {
 			}
 	}
 
+	@SuppressWarnings("deprecation")
 	private void addSinglePointMethods(ParameterSignature sig,
 			List<PotentialAssignment> list) {
 		for (FrameworkMethod dataPointMethod : fClass

File: src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java
Patch:
@@ -5,7 +5,6 @@
 
 import org.junit.ClassRule;
 import org.junit.Rule;
-import org.junit.rules.MethodRule;
 import org.junit.rules.TestRule;
 import org.junit.runners.model.FrameworkField;
 import org.junit.runners.model.TestClass;
@@ -80,7 +79,8 @@ private boolean isTestRule(FrameworkField target) {
 
 	@SuppressWarnings("deprecation")
 	private boolean isMethodRule(FrameworkField target) {
-		return MethodRule.class.isAssignableFrom(target.getType());
+		return org.junit.rules.MethodRule.class.isAssignableFrom(target
+				.getType());
 	}
 
 	private void addError(List<Throwable> errors, FrameworkField field,

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -17,7 +17,6 @@
 import org.junit.internal.runners.statements.InvokeMethod;
 import org.junit.internal.runners.statements.RunAfters;
 import org.junit.internal.runners.statements.RunBefores;
-import org.junit.rules.MethodRule;
 import org.junit.rules.RunRules;
 import org.junit.rules.TestRule;
 import org.junit.runner.Description;

File: src/test/java/junit/samples/SimpleTest.java
Patch:
@@ -47,10 +47,12 @@ public void testAdd() {
 		// forced failure result == 5
 		assertTrue(result == 6);
 	}
+
+	public int unused;
 	public void testDivideByZero() {
 		int zero= 0;
 		int result= 8/zero;
-		result++; // avoid warning for not using result
+		unused= result; // avoid warning for not using result
 	}
 	public void testEquals() {
 		assertEquals(12, 12);

File: src/test/java/org/junit/samples/SimpleTest.java
Patch:
@@ -22,11 +22,13 @@ public static junit.framework.Test suite() {
 		 return new JUnit4TestAdapter(SimpleTest.class);
 	}
 
+	public int unused;
 	@Test public void divideByZero() {
 		int zero= 0;
 		int result= 8/zero;
-		result++; // avoid warning for not using result
+		unused= result; // avoid warning for not using result
 	}
+	
 	@Test public void testEquals() {
 		assertEquals(12, 12);
 		assertEquals(12L, 12L);

File: src/test/java/org/junit/tests/experimental/rules/TempFolderRuleTest.java
Patch:
@@ -178,7 +178,7 @@ public void testNewFile() throws IOException {
 		}
 
 		@Test
-		public void testNewFolder() throws IOException {
+		public void testNewFolder() {
 			folder.newFolder(NEW_FOLDER_DUMMY);
 		}
 	}

File: src/test/java/org/junit/tests/experimental/rules/TestWatchmanTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.junit.rules.TestWatchman;
 import org.junit.runners.model.FrameworkMethod;
 
+@SuppressWarnings("deprecation")
 public class TestWatchmanTest {
 	public static class ViolatedAssumptionTest {
 		@Rule

File: src/test/java/org/junit/tests/experimental/rules/VerifierRuleTest.java
Patch:
@@ -126,6 +126,8 @@ protected void verify() {
 	}
 	
 	@Test public void verifierRunsAfterTest() {
+		sequence = "";
 		assertThat(testResult(UsesVerifier.class), isSuccessful());
+		assertEquals("test verify ", sequence);
 	}
 }
\ No newline at end of file

File: src/main/java/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.9";
+		return "4.9.1-SNAPSHOT";
 	}
 	
 	public static void main(String[] args) {

File: src/main/java/org/junit/internal/runners/statements/RunAfters.java
Patch:
@@ -26,7 +26,6 @@ public RunAfters(Statement next, List<FrameworkMethod> afters, Object target) {
 	@Override
 	public void evaluate() throws Throwable {
 		List<Throwable> errors = new ArrayList<Throwable>();
-		errors.clear();
 		try {
 			fNext.evaluate();
 		} catch (Throwable e) {

File: src/main/java/org/junit/internal/runners/statements/RunAfters.java
Patch:
@@ -26,7 +26,6 @@ public RunAfters(Statement next, List<FrameworkMethod> afters, Object target) {
 	@Override
 	public void evaluate() throws Throwable {
 		List<Throwable> errors = new ArrayList<Throwable>();
-		errors.clear();
 		try {
 			fNext.evaluate();
 		} catch (Throwable e) {

File: src/main/java/org/junit/rules/TestWatcher.java
Patch:
@@ -1,5 +1,6 @@
 package org.junit.rules;
 
+import org.junit.internal.AssumptionViolatedException;
 import org.junit.runner.Description;
 import org.junit.runners.model.Statement;
 
@@ -45,6 +46,8 @@ public void evaluate() throws Throwable {
 				try {
 					base.evaluate();
 					succeeded(description);
+				} catch (AssumptionViolatedException e) {
+					throw e;
 				} catch (Throwable t) {
 					failed(t, description);
 					throw t;

File: src/main/java/org/junit/rules/TestWatchman.java
Patch:
@@ -1,5 +1,6 @@
 package org.junit.rules;
 
+import org.junit.internal.AssumptionViolatedException;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.Statement;
 
@@ -51,6 +52,8 @@ public void evaluate() throws Throwable {
 				try {
 					base.evaluate();
 					succeeded(method);
+				} catch (AssumptionViolatedException e) {
+					throw e;
 				} catch (Throwable t) {
 					failed(t, method);
 					throw t;

File: src/main/java/org/junit/rules/TestWatcher.java
Patch:
@@ -1,5 +1,6 @@
 package org.junit.rules;
 
+import org.junit.internal.AssumptionViolatedException;
 import org.junit.runner.Description;
 import org.junit.runners.model.Statement;
 
@@ -45,6 +46,8 @@ public void evaluate() throws Throwable {
 				try {
 					base.evaluate();
 					succeeded(description);
+				} catch (AssumptionViolatedException e) {
+					throw e;
 				} catch (Throwable t) {
 					failed(t, description);
 					throw t;

File: src/main/java/org/junit/rules/TestWatchman.java
Patch:
@@ -1,5 +1,6 @@
 package org.junit.rules;
 
+import org.junit.internal.AssumptionViolatedException;
 import org.junit.runners.model.FrameworkMethod;
 import org.junit.runners.model.Statement;
 
@@ -51,6 +52,8 @@ public void evaluate() throws Throwable {
 				try {
 					base.evaluate();
 					succeeded(method);
+				} catch (AssumptionViolatedException e) {
+					throw e;
 				} catch (Throwable t) {
 					failed(t, method);
 					throw t;

File: src/main/java/junit/framework/TestSuite.java
Patch:
@@ -10,6 +10,7 @@
 import java.util.Enumeration;
 import java.util.List;
 import java.util.Vector;
+import org.junit.internal.MethodSorter;
 
 /**
  * <p>A <code>TestSuite</code> is a <code>Composite</code> of Tests.
@@ -146,7 +147,7 @@ private void addTestsFromTestCase(final Class<?> theClass) {
 		Class<?> superClass= theClass;
 		List<String> names= new ArrayList<String>();
 		while (Test.class.isAssignableFrom(superClass)) {
-			for (Method each : superClass.getDeclaredMethods())
+			for (Method each : MethodSorter.getDeclaredMethods(superClass))
 				addTestMethod(each, names, theClass);
 			superClass= superClass.getSuperclass();
 		}

File: src/main/java/org/junit/internal/runners/TestClass.java
Patch:
@@ -11,6 +11,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.junit.internal.MethodSorter;
 import org.junit.runners.BlockJUnit4ClassRunner;
 
 /**
@@ -41,7 +42,7 @@ List<Method> getAfters() {
 	public List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass) {
 		List<Method> results= new ArrayList<Method>();
 		for (Class<?> eachClass : getSuperClasses(fClass)) {
-			Method[] methods= eachClass.getDeclaredMethods();
+			Method[] methods= MethodSorter.getDeclaredMethods(eachClass);
 			for (Method eachMethod : methods) {
 				Annotation annotation= eachMethod.getAnnotation(annotationClass);
 				if (annotation != null && ! isShadowed(eachMethod, results)) 

File: src/main/java/org/junit/runners/model/TestClass.java
Patch:
@@ -12,6 +12,7 @@
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
+import org.junit.internal.MethodSorter;
 
 /**
  * Wraps a class to be run, providing method validation and annotation searching
@@ -36,7 +37,7 @@ public TestClass(Class<?> klass) {
 					"Test class can only have one constructor");
 
 		for (Class<?> eachClass : getSuperClasses(fClass)) {
-			for (Method eachMethod : eachClass.getDeclaredMethods())
+			for (Method eachMethod : MethodSorter.getDeclaredMethods(eachClass))
 				addToAnnotationLists(new FrameworkMethod(eachMethod),
 						fMethodsForAnnotations);
 			for (Field eachField : eachClass.getDeclaredFields())

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -31,8 +31,8 @@
  * 	&#064;Parameters
  * 	public static List&lt;Object[]&gt; data() {
  * 		return Arrays.asList(new Object[][] {
- * 				{ { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 },
- * 						{ 6, 8 } } });
+ * 			{ 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 }, { 6, 8 }
+ * 		});
  * 	}
  * 
  * 	private int fInput;

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -31,8 +31,8 @@
  * 	&#064;Parameters
  * 	public static List&lt;Object[]&gt; data() {
  * 		return Arrays.asList(new Object[][] {
- * 				{ { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 },
- * 						{ 6, 8 } } });
+ * 			{ 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 }, { 6, 8 }
+ * 		});
  * 	}
  * 
  * 	private int fInput;

File: src/main/java/org/junit/ClassRule.java
Patch:
@@ -52,7 +52,7 @@
  * }
  * </pre>
  * 
- * For more information and more examples, see {@link TestRule}. 
+ * For more information and more examples, see {@link org.junit.rules.TestRule}. 
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.FIELD})

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -343,7 +343,7 @@ private List<org.junit.rules.MethodRule> getMethodRules(Object target) {
 	 *            the test case instance
 	 * @return a list of MethodRules that should be applied when executing this
 	 *         test
-	 * @deprecated {@link MethodRule} is a deprecated interface. Port to
+	 * @deprecated {@link org.junit.rules.MethodRule} is a deprecated interface. Port to
 	 *             {@link TestRule} and
 	 *             {@link BlockJUnit4ClassRunner#getTestRules(Object)}
 	 */

File: src/main/java/org/junit/Assert.java
Patch:
@@ -474,7 +474,7 @@ static public void assertEquals(String message, long expected, long actual) {
 
 	/**
 	 * @deprecated Use
-	 *             <code>assertEquals(double expected, double actual, double epsilon)</code>
+	 *             <code>assertEquals(double expected, double actual, double delta)</code>
 	 *             instead
 	 */
 	@Deprecated
@@ -484,7 +484,7 @@ static public void assertEquals(double expected, double actual) {
 
 	/**
 	 * @deprecated Use
-	 *             <code>assertEquals(String message, double expected, double actual, double epsilon)</code>
+	 *             <code>assertEquals(String message, double expected, double actual, double delta)</code>
 	 *             instead
 	 */
 	@Deprecated

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -31,7 +31,6 @@
  * 	&#064;Parameters
  * 	public static List&lt;Object[]&gt; data() {
  * 		return Arrays.asList(new Object[][] {
- * 				Fibonacci,
  * 				{ { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 },
  * 						{ 6, 8 } } });
  * 	}

File: src/main/java/org/junit/Assert.java
Patch:
@@ -474,7 +474,7 @@ static public void assertEquals(String message, long expected, long actual) {
 
 	/**
 	 * @deprecated Use
-	 *             <code>assertEquals(double expected, double actual, double epsilon)</code>
+	 *             <code>assertEquals(double expected, double actual, double delta)</code>
 	 *             instead
 	 */
 	@Deprecated
@@ -484,7 +484,7 @@ static public void assertEquals(double expected, double actual) {
 
 	/**
 	 * @deprecated Use
-	 *             <code>assertEquals(String message, double expected, double actual, double epsilon)</code>
+	 *             <code>assertEquals(String message, double expected, double actual, double delta)</code>
 	 *             instead
 	 */
 	@Deprecated

File: src/main/java/org/junit/ClassRule.java
Patch:
@@ -37,7 +37,7 @@
  * public class UsesExternalResource {
  * 	public static Server myServer= new Server();
  * 
- * 	&#064;Rule
+ * 	&#064;ClassRule
  * 	public static ExternalResource resource= new ExternalResource() {
  * 		&#064;Override
  * 		protected void before() throws Throwable {
@@ -57,4 +57,4 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.FIELD})
 public @interface ClassRule {
-}
\ No newline at end of file
+}

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -31,7 +31,6 @@
  * 	&#064;Parameters
  * 	public static List&lt;Object[]&gt; data() {
  * 		return Arrays.asList(new Object[][] {
- * 				Fibonacci,
  * 				{ { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 },
  * 						{ 6, 8 } } });
  * 	}

File: src/main/java/org/junit/Assert.java
Patch:
@@ -474,7 +474,7 @@ static public void assertEquals(String message, long expected, long actual) {
 
 	/**
 	 * @deprecated Use
-	 *             <code>assertEquals(double expected, double actual, double epsilon)</code>
+	 *             <code>assertEquals(double expected, double actual, double delta)</code>
 	 *             instead
 	 */
 	@Deprecated
@@ -484,7 +484,7 @@ static public void assertEquals(double expected, double actual) {
 
 	/**
 	 * @deprecated Use
-	 *             <code>assertEquals(String message, double expected, double actual, double epsilon)</code>
+	 *             <code>assertEquals(String message, double expected, double actual, double delta)</code>
 	 *             instead
 	 */
 	@Deprecated

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -31,7 +31,6 @@
  * 	&#064;Parameters
  * 	public static List&lt;Object[]&gt; data() {
  * 		return Arrays.asList(new Object[][] {
- * 				Fibonacci,
  * 				{ { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 },
  * 						{ 6, 8 } } });
  * 	}

File: src/main/java/org/junit/ClassRule.java
Patch:
@@ -37,7 +37,7 @@
  * public class UsesExternalResource {
  * 	public static Server myServer= new Server();
  * 
- * 	&#064;Rule
+ * 	&#064;ClassRule
  * 	public static ExternalResource resource= new ExternalResource() {
  * 		&#064;Override
  * 		protected void before() throws Throwable {
@@ -57,4 +57,4 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.FIELD})
 public @interface ClassRule {
-}
\ No newline at end of file
+}

File: src/main/java/org/junit/runner/Result.java
Patch:
@@ -1,5 +1,6 @@
 package org.junit.runner;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Collections;
@@ -13,7 +14,8 @@
  * tests. Since tests are expected to run correctly, successful tests are only noted in
  * the count of tests that ran.
  */
-public class Result {
+public class Result implements Serializable {
+	private static final long serialVersionUID = 1L;
 	private AtomicInteger fCount = new AtomicInteger();
 	private AtomicInteger fIgnoreCount= new AtomicInteger();
 	private final List<Failure> fFailures= Collections.synchronizedList(new ArrayList<Failure>());

File: src/main/java/org/junit/runner/notification/Failure.java
Patch:
@@ -1,6 +1,7 @@
 package org.junit.runner.notification;
 
 import java.io.PrintWriter;
+import java.io.Serializable;
 import java.io.StringWriter;
 
 import org.junit.runner.Description;
@@ -12,7 +13,8 @@
  * test (for example, if a {@link org.junit.BeforeClass} method is not static), it may describe
  * something other than a single test.
  */
-public class Failure {
+public class Failure implements Serializable {
+	private static final long serialVersionUID = 1L;
 	private final Description fDescription;
 	private final Throwable fThrownException;
 

File: src/main/java/org/junit/ClassRule.java
Patch:
@@ -37,7 +37,7 @@
  * public class UsesExternalResource {
  * 	public static Server myServer= new Server();
  * 
- * 	&#064;Rule
+ * 	&#064;ClassRule
  * 	public static ExternalResource resource= new ExternalResource() {
  * 		&#064;Override
  * 		protected void before() throws Throwable {
@@ -57,4 +57,4 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.FIELD})
 public @interface ClassRule {
-}
\ No newline at end of file
+}

File: src/main/java/org/junit/ClassRule.java
Patch:
@@ -37,7 +37,7 @@
  * public class UsesExternalResource {
  * 	public static Server myServer= new Server();
  * 
- * 	&#064;Rule
+ * 	&#064;ClassRule
  * 	public static ExternalResource resource= new ExternalResource() {
  * 		&#064;Override
  * 		protected void before() throws Throwable {
@@ -57,4 +57,4 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.FIELD})
 public @interface ClassRule {
-}
\ No newline at end of file
+}

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -353,7 +353,7 @@ private void validate() throws InitializationError {
 
 	private List<T> getFilteredChildren() {
 		if (fFilteredChildren == null)
-			fFilteredChildren = getChildren();
+			fFilteredChildren = new ArrayList<T>(getChildren());
 		return fFilteredChildren;
 	}
 

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -357,7 +357,7 @@ private void validate() throws InitializationError {
 
 	private List<T> getFilteredChildren() {
 		if (fFilteredChildren == null)
-			fFilteredChildren = getChildren();
+			fFilteredChildren = new ArrayList<T>(getChildren());
 		return fFilteredChildren;
 	}
 

File: src/main/java/org/junit/runner/Description.java
Patch:
@@ -152,8 +152,7 @@ public boolean equals(Object obj) {
 		if (!(obj instanceof Description))
 			return false;
 		Description d = (Description) obj;
-		return getDisplayName().equals(d.getDisplayName())
-				&& getChildren().equals(d.getChildren());
+		return getDisplayName().equals(d.getDisplayName());
 	}
 	
 	@Override

File: src/test/java/org/junit/tests/description/SuiteDescriptionTest.java
Patch:
@@ -16,8 +16,8 @@ public class SuiteDescriptionTest {
 	@Test public void equalsIsCorrect() {	
 		assertEquals(childless, anotherChildless);
 		assertFalse(childless.equals(namedB));
-		assertFalse(childless.equals(twoKids));
-		assertFalse(twoKids.equals(anotherTwoKids));
+		assertEquals(childless, twoKids);
+		assertEquals(twoKids, anotherTwoKids);
 		assertFalse(twoKids.equals(new Integer(5)));
 	}
 

File: src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.junit.tests;
+package org.junit.tests.running.classes;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;

File: src/main/java/org/junit/matchers/JUnitMatchers.java
Patch:
@@ -74,7 +74,7 @@ public static <T> CombinableMatcher<T> both(Matcher<T> matcher) {
 	/**
 	 * This is useful for fluently combining matchers where either may pass, for example:
 	 * <pre>
-	 *   assertThat(string, both(containsString("a")).and(containsString("b")));
+	 *   assertThat(string, either(containsString("a")).or(containsString("b")));
 	 * </pre>
 	 */
 	public static <T> CombinableMatcher<T> either(Matcher<T> matcher) {

File: src/test/java/junit/tests/framework/AssertTest.java
Patch:
@@ -1,6 +1,5 @@
 package junit.tests.framework;
 
-import junit.framework.Assert;
 import junit.framework.AssertionFailedError;
 import junit.framework.ComparisonFailure;
 import junit.framework.TestCase;

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -47,6 +47,7 @@
 import org.junit.tests.listening.TestListenerTest;
 import org.junit.tests.listening.TextListenerTest;
 import org.junit.tests.listening.UserStopTest;
+import org.junit.tests.manipulation.FilterTest;
 import org.junit.tests.manipulation.FilterableTest;
 import org.junit.tests.manipulation.SingleMethodTest;
 import org.junit.tests.manipulation.SortableTest;
@@ -128,6 +129,7 @@
 	JUnit4ClassRunnerTest.class,
 	UseSuiteAsASuperclassTest.class,
 	FilterableTest.class,
+	FilterTest.class,
 	MaxStarterTest.class,
 	JUnit38SortingTest.class,
 	MethodRulesTest.class,

File: src/main/java/org/junit/runners/ParentRunner.java
Patch:
@@ -180,7 +180,8 @@ protected Statement withAfterClasses(Statement statement) {
 	}
 
 	/**
-	 * Returns a {@link Statement}: apply all static {@link Value} fields
+	 * Returns a {@link Statement}: apply all 
+	 * static fields assignable to {@link TestRule}
 	 * annotated with {@link ClassRule}.
 	 *
 	 * @param statement
@@ -381,4 +382,4 @@ public int compare(T o1, T o2) {
 	public void setScheduler(RunnerScheduler scheduler) {
 		this.fScheduler = scheduler;
 	}
-}
\ No newline at end of file
+}

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -41,7 +41,7 @@
  * }
  * </pre>
  */
-public class ExpectedException extends TestRule {
+public class ExpectedException implements TestRule {
 	/**
 	 * @return a Rule that expects no exception to be thrown
 	 * (identical to behavior without this Rule)
@@ -56,8 +56,7 @@ private ExpectedException() {
 		
 	}
 	
-	@Override
-	protected Statement apply(Statement base,
+	public Statement apply(Statement base,
 			org.junit.runner.Description description) {
 		return new ExpectedExceptionStatement(base);
 	}

File: src/main/java/org/junit/rules/ExternalResource.java
Patch:
@@ -32,9 +32,8 @@
  * }
  * </pre>
  */
-public abstract class ExternalResource extends TestRule {
-	@Override
-	protected Statement apply(Statement base, Description description) {
+public abstract class ExternalResource implements TestRule {
+	public Statement apply(Statement base, Description description) {
 		return statement(base);
 	}
 

File: src/main/java/org/junit/rules/TestName.java
Patch:
@@ -26,7 +26,7 @@ public class TestName extends TestWatcher {
 	private String fName;
 
 	@Override
-	public void starting(Description d) {
+	protected void starting(Description d) {
 		fName= d.getMethodName();
 	}
 

File: src/main/java/org/junit/rules/TestRule.java
Patch:
@@ -40,7 +40,7 @@
  *   <li>{@link Verifier}: fail test if object state ends up incorrect</li>
  * </ul>
  */
-public abstract class TestRule {
+public interface TestRule {
 	/**
 	 * Modifies the method-running {@link Statement} to implement this
 	 * test-running rule.
@@ -50,5 +50,5 @@ public abstract class TestRule {
 	 * @return a new statement, which may be the same as {@code base},
 	 * a wrapper around {@code base}, or a completely new Statement.
 	 */
-	protected abstract Statement apply(Statement base, Description description);
+	Statement apply(Statement base, Description description);
 }

File: src/main/java/org/junit/rules/Timeout.java
Patch:
@@ -33,7 +33,7 @@
  * }
  * </pre>
  */
-public class Timeout extends TestRule {
+public class Timeout implements TestRule {
 	private final int fMillis;
 
 	/**
@@ -43,8 +43,7 @@ public Timeout(int millis) {
 		fMillis= millis;
 	}
 
-	@Override
-	protected Statement apply(Statement base, Description description) {
+	public Statement apply(Statement base, Description description) {
 		return new FailOnTimeout(base, fMillis);
 	}
 }
\ No newline at end of file

File: src/main/java/org/junit/rules/Verifier.java
Patch:
@@ -25,9 +25,8 @@
  *     }
  * </pre>
  */
-public class Verifier extends TestRule {
-	@Override
-	protected Statement apply(final Statement base, Description description) {
+public class Verifier implements TestRule {
+	public Statement apply(final Statement base, Description description) {
 		return new Statement() {
 			@Override
 			public void evaluate() throws Throwable {

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -168,7 +168,7 @@ private void validateRuleField(Field field, List<Throwable> errors) {
 		Class<?> type= field.getType();
 		if (!isMethodRule(type) && !isTestRule(type))
 			errors.add(new Exception("Field " + field.getName()
-					+ " must implement MethodRule"));
+					+ " must implement MethodRule or TestRule"));
 		if (!Modifier.isPublic(field.getModifiers()))
 			errors.add(new Exception("Field " + field.getName()
 					+ " must be public"));

File: src/test/java/org/junit/tests/experimental/rules/ClassRulesTest.java
Patch:
@@ -61,11 +61,10 @@ public void ruleIsIntroducedAndEvaluatedOnSubclass() {
 		assertEquals(1, ExampleTestWithClassRule.counter.count);
 	}
 	
-	public static class CustomCounter extends TestRule {
+	public static class CustomCounter implements TestRule {
 		public int count = 0;
 		
-		@Override
-		protected Statement apply(final Statement base, Description description) {
+		public Statement apply(final Statement base, Description description) {
 			return new Statement() {				
 				@Override
 				public void evaluate() throws Throwable {

File: src/test/java/org/junit/tests/experimental/rules/MethodRulesTest.java
Patch:
@@ -248,11 +248,10 @@ public static class PrivateRule {
 				hasSingleFailureContaining("must be public"));
 	}
 	
-	public static class CustomTestName extends TestRule {
+	public static class CustomTestName implements TestRule {
 		public String name = null;
 			
-		@Override
-		protected Statement apply(final Statement base, final Description description) {
+		public Statement apply(final Statement base, final Description description) {
 			return new Statement() {				
 				@Override
 				public void evaluate() throws Throwable {

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -18,7 +18,7 @@
  * // These tests all pass.
  * public static class HasExpectedException {
  * 	&#064;Rule
- * 	public ExpectedException thrown= new ExpectedException();
+ * 	public ExpectedException thrown= ExpectedException.none();
  * 
  * 	&#064;Test
  * 	public void throwsNothing() {

File: src/main/java/org/junit/rules/TestWatcher.java
Patch:
@@ -36,7 +36,7 @@
  * }
  * </pre>
  */
-public class TestWatcher extends TestRule {
+public abstract class TestWatcher extends TestRule {
 	@Override
 	protected Statement apply(final Statement base, final Description description) {
 		return new Statement() {

File: src/test/java/org/junit/tests/experimental/rules/VerifierRuleTest.java
Patch:
@@ -109,7 +109,7 @@ public static class UsesVerifier {
 		@Rule
 		public Verifier collector= new Verifier() {
 			@Override
-			public void verify() {
+			protected void verify() {
 				sequence+= "verify ";
 			}
 		};

File: src/main/java/org/junit/Assert.java
Patch:
@@ -88,7 +88,9 @@ static public void assertFalse(boolean condition) {
 	 * @see AssertionError
 	 */
 	static public void fail(String message) {
-		throw new AssertionError(message == null ? "" : message);
+		if (message == null)
+			throw new AssertionError();
+		throw new AssertionError(message);
 	}
 
 	/**

File: src/main/java/org/junit/ClassRule.java
Patch:
@@ -1,9 +1,7 @@
 package org.junit;
 
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
 
 import org.junit.rules.TestRule;
 
@@ -54,6 +52,5 @@
  * For more information and more examples, see {@link TestRule}. 
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.FIELD})
 public @interface ClassRule {
 }
\ No newline at end of file

File: src/main/java/org/junit/Rule.java
Patch:
@@ -1,9 +1,7 @@
 package org.junit;
 
-import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
 
 import org.junit.rules.MethodRule;
 
@@ -42,7 +40,6 @@
  */
 @SuppressWarnings("deprecation")
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.FIELD})
 public @interface Rule {
 
 }
\ No newline at end of file

File: src/main/java/org/junit/rules/ExpectedException.java
Patch:
@@ -41,7 +41,7 @@
  * }
  * </pre>
  */
-public class ExpectedException extends TestRule {
+public class ExpectedException implements TestRule {
 	/**
 	 * @return a Rule that expects no exception to be thrown
 	 * (identical to behavior without this Rule)
@@ -56,8 +56,7 @@ private ExpectedException() {
 		
 	}
 	
-	@Override
-	protected Statement apply(Statement base,
+	public Statement apply(Statement base,
 			org.junit.runner.Description description) {
 		return new ExpectedExceptionStatement(base);
 	}

File: src/main/java/org/junit/rules/ExternalResource.java
Patch:
@@ -32,9 +32,8 @@
  * }
  * </pre>
  */
-public abstract class ExternalResource extends TestRule {
-	@Override
-	protected Statement apply(Statement base, Description description) {
+public abstract class ExternalResource implements TestRule {
+	public Statement apply(Statement base, Description description) {
 		return statement(base);
 	}
 

File: src/main/java/org/junit/rules/TestWatcher.java
Patch:
@@ -36,9 +36,8 @@
  * }
  * </pre>
  */
-public class TestWatcher extends TestRule {
-	@Override
-	protected Statement apply(final Statement base, final Description description) {
+public class TestWatcher implements TestRule {
+	public Statement apply(final Statement base, final Description description) {
 		return new Statement() {
 			@Override
 			public void evaluate() throws Throwable {

File: src/main/java/org/junit/rules/Timeout.java
Patch:
@@ -33,7 +33,7 @@
  * }
  * </pre>
  */
-public class Timeout extends TestRule {
+public class Timeout implements TestRule {
 	private final int fMillis;
 
 	/**
@@ -43,8 +43,7 @@ public Timeout(int millis) {
 		fMillis= millis;
 	}
 
-	@Override
-	protected Statement apply(Statement base, Description description) {
+	public Statement apply(Statement base, Description description) {
 		return new FailOnTimeout(base, fMillis);
 	}
 }
\ No newline at end of file

File: src/main/java/org/junit/rules/Verifier.java
Patch:
@@ -25,9 +25,8 @@
  *     }
  * </pre>
  */
-public class Verifier extends TestRule {
-	@Override
-	protected Statement apply(final Statement base, Description description) {
+public class Verifier implements TestRule {
+	public Statement apply(final Statement base, Description description) {
 		return new Statement() {
 			@Override
 			public void evaluate() throws Throwable {

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -362,7 +362,9 @@ private List<org.junit.rules.MethodRule> getMethodRules(Object target) {
 
 	private Statement withTestRules(FrameworkMethod method, Object target,
 			Statement result) {
-		return TestRule.applyAll(getTestRules(target), result, describeChild(method));
+		for (TestRule each : getTestRules(target))
+			result= each.apply(result, describeChild(method));
+		return result;
 	}
 
 	private List<TestRule> getTestRules(Object target) {

File: src/test/java/org/junit/tests/experimental/rules/ClassRulesTest.java
Patch:
@@ -61,11 +61,10 @@ public void ruleIsIntroducedAndEvaluatedOnSubclass() {
 		assertEquals(1, ExampleTestWithClassRule.counter.count);
 	}
 	
-	public static class CustomCounter extends TestRule {
+	public static class CustomCounter implements TestRule {
 		public int count = 0;
 		
-		@Override
-		protected Statement apply(final Statement base, Description description) {
+		public Statement apply(final Statement base, Description description) {
 			return new Statement() {				
 				@Override
 				public void evaluate() throws Throwable {

File: src/test/java/org/junit/tests/experimental/rules/MethodRulesTest.java
Patch:
@@ -248,11 +248,10 @@ public static class PrivateRule {
 				hasSingleFailureContaining("must be public"));
 	}
 	
-	public static class CustomTestName extends TestRule {
+	public static class CustomTestName implements TestRule {
 		public String name = null;
 			
-		@Override
-		protected Statement apply(final Statement base, final Description description) {
+		public Statement apply(final Statement base, final Description description) {
 			return new Statement() {				
 				@Override
 				public void evaluate() throws Throwable {

File: src/main/java/org/junit/rules/TestRule.java
Patch:
@@ -24,8 +24,8 @@
  *
  * Multiple {@link TestRule}s can be applied to a test or suite execution. The
  * {@link Statement} that executes the method or suite is passed to each annotated
- * {@link Rule} in turn, and each may return a substitute or modified
- * {@link Statement}, which is passed to the next {@link Rule}, if any. For
+ * {@link org.junit.Rule} in turn, and each may return a substitute or modified
+ * {@link Statement}, which is passed to the next {@link org.junit.Rule}, if any. For
  * examples of how this can be useful, see these provided TestRules,
  * or write your own:
  * 

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -20,6 +20,7 @@
 import org.junit.internal.runners.statements.InvokeMethod;
 import org.junit.internal.runners.statements.RunAfters;
 import org.junit.internal.runners.statements.RunBefores;
+import org.junit.rules.MethodRule;
 import org.junit.rules.TestRule;
 import org.junit.runner.Description;
 import org.junit.runner.notification.RunNotifier;
@@ -199,7 +200,7 @@ private boolean isTestRule(Class<?> type) {
 
 	@SuppressWarnings("deprecation")
 	private boolean isMethodRule(Class<?> type) {
-		return org.junit.rules.MethodRule.class.isAssignableFrom(type);
+		return MethodRule.class.isAssignableFrom(type);
 	}
 
 	/**
@@ -245,7 +246,7 @@ protected String testName(FrameworkMethod method) {
 	 * <li>ALWAYS allow {@code @Rule} fields to modify the execution of the
 	 * above steps. A {@code Rule} may prevent all execution of the above steps,
 	 * or add additional behavior before and after, or modify thrown exceptions.
-	 * For more information, see {@link MethodRule}
+	 * For more information, see {@link TestRule}
 	 * <li>ALWAYS run all non-overridden {@code @Before} methods on this class
 	 * and superclasses before any of the previous steps; if any throws an
 	 * Exception, stop execution and pass the exception on.

File: src/main/java/org/junit/ClassRule.java
Patch:
@@ -7,7 +7,8 @@
 
 /**
  * Annotates static fields that contain rules. Such a field must be public,
- * static, and a subtype of {@link TestRule}.  The {@link Statement} passed 
+ * static, and a subtype of {@link TestRule}.  
+ * The {@link org.junit.runners.model.Statement} passed 
  * to the {@link TestRule} will run any {@link BeforeClass} methods, 
  * then the entire body of the test class (all contained methods, if it is
  * a standard JUnit test class, or all contained classes, if it is a 

File: src/main/java/org/junit/runners/model/MultipleFailureException.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.List;
 
 /**
- * Collections multiple {@code Throwable}s into one exception.
+ * Collects multiple {@code Throwable}s into one exception.
  */
 public class MultipleFailureException extends Exception {
 	private static final long serialVersionUID= 1L;
@@ -41,7 +41,7 @@ public static void assertEmpty(List<Throwable> errors) throws Throwable {
 		 * Many places in the code are documented to throw
 		 * org.junit.internal.runners.model.MultipleFailureException.
 		 * That class now extends this one, so we throw the internal
-		 * exception in case developers that have tests that catch
+		 * exception in case developers have tests that catch
 		 * MultipleFailureException.
 		 */
 		throw new org.junit.internal.runners.model.MultipleFailureException(errors);

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -137,7 +137,8 @@
 	TempFolderRuleTest.class,
 	ExternalResourceRuleTest.class,
 	VerifierRuleTest.class,
-	CategoryTest.class
+	CategoryTest.class,
+	CategoriesAndParameterizedTest.class
 })
 public class AllTests {
 	public static Test suite() {

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -2,13 +2,11 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
-import java.util.ArrayList;
 import java.util.List;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
-import org.junit.Rule;
 import org.junit.Test;
 import org.junit.Test.None;
 import org.junit.internal.AssumptionViolatedException;

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -2,11 +2,13 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
+import java.util.ArrayList;
 import java.util.List;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.Test.None;
 import org.junit.internal.AssumptionViolatedException;

File: src/main/java/org/junit/internal/runners/statements/ExpectException.java
Patch:
@@ -3,6 +3,7 @@
  */
 package org.junit.internal.runners.statements;
 
+import org.junit.internal.AssumptionViolatedException;
 import org.junit.runners.model.Statement;
 
 public class ExpectException extends Statement {
@@ -20,6 +21,8 @@ public void evaluate() throws Exception {
 		try {
 			fNext.evaluate();
 			complete = true;
+		} catch (AssumptionViolatedException e) {
+			throw e;
 		} catch (Throwable e) {
 			if (!fExpected.isAssignableFrom(e.getClass())) {
 				String message= "Unexpected exception, expected<"

File: src/main/java/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.8";
+		return "4.8.1";
 	}
 	
 	public static void main(String[] args) {

File: src/main/java/org/junit/experimental/categories/Categories.java
Patch:
@@ -24,10 +24,10 @@
  * Example:
  * 
  * <pre>
- * public interface FastTests extends CategoryType {
+ * public interface FastTests {
  * }
- * 
- * public interface SlowTests extends CategoryType {
+ * 	
+ * public interface SlowTests {
  * }
  * 
  * public static class A {

File: src/main/java/org/junit/matchers/package-info.java
Patch:
@@ -4,6 +4,6 @@
  * statement
  *
  * @since 4.0
- * @see JUnitMatchers
+ * @see org.junit.matchers.JUnitMatchers
  */
 package org.junit.matchers;
\ No newline at end of file

File: src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
Patch:
@@ -47,14 +47,13 @@ protected void runWithIncompleteAssignment(Assignments incomplete)
 			queues.remove(guessers);
 		}
 
-		@SuppressWarnings("unchecked")
 		private GuesserQueue createGuesserQueue(Assignments incomplete)
 				throws InstantiationException, IllegalAccessException {
 			ParameterSignature nextUnassigned= incomplete.nextUnassigned();
 
 			if (nextUnassigned.hasAnnotation(Stub.class)) {
 				GuesserQueue queue= new GuesserQueue();
-				queue.add(new Guesser(nextUnassigned.getType()));
+				queue.add(new Guesser<Object>(nextUnassigned.getType()));
 				return queue;
 			}
 

File: src/main/java/junit/framework/Assert.java
Patch:
@@ -222,7 +222,7 @@ static public void assertNotNull(String message, Object object) {
 	 *            Object to check or <code>null</code>
 	 */
 	static public void assertNull(Object object) {
-		String message = "Expected: <null> but was: " + object.toString();
+		String message = "Expected: <null> but was: " + String.valueOf(object);
 		assertNull(message, object);
 	}
 	/**

File: src/main/java/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.7";
+		return "4.8b1";
 	}
 	
 	public static void main(String[] args) {

File: src/main/java/org/junit/internal/ComparisonCriteria.java
Patch:
@@ -9,8 +9,6 @@
  * may demand exact equality, or, for example, equality within a given delta.
  */
 public abstract class ComparisonCriteria {
-	// TODO (Sep 8, 2008 4:36:12 PM): check structure
-
 	/**
 	 * Asserts that two arrays are equal, according to the criteria defined by
 	 * the concrete subclass. If they are not, an {@link AssertionError} is

File: src/main/java/org/junit/internal/InexactComparisonCriteria.java
Patch:
@@ -9,7 +9,6 @@ public InexactComparisonCriteria(double delta) {
 		fDelta= delta;
 	}
 
-	// TODO (Apr 29, 2009 4:43:46 PM): Look for missing JavaDoc
 	@Override
 	protected void assertElementsEqual(Object expected, Object actual) {
 		if (expected instanceof Double)

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -360,7 +360,7 @@ private Statement withRules(FrameworkMethod method, Object target,
 	protected List<MethodRule> rules(Object test) {
 		List<MethodRule> results= new ArrayList<MethodRule>();
 		for (FrameworkField each : ruleFields()) {
-			if (MethodRule.class.isAssignableFrom(each.getField().getType())) {
+			if (MethodRule.class.isAssignableFrom(each.getType())) {
 				results.add(createRule(test, each));
 			}
 		}

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -360,7 +360,7 @@ private Statement withRules(FrameworkMethod method, Object target,
 	protected List<MethodRule> rules(Object test) {
 		List<MethodRule> results= new ArrayList<MethodRule>();
 		for (FrameworkField each : ruleFields()) {
-			if (MethodRule.class.isAssignableFrom(each.getField().getType())) {
+			if (MethodRule.class.isAssignableFrom(each.getType())) {
 				results.add(createRule(test, each));
 			}
 		}

File: src/main/java/org/junit/runner/RunWith.java
Patch:
@@ -18,7 +18,7 @@
  * 
  * <pre>
  * &#064;RunWith(Suite.class)
- * &#064;SuiteClasses(ATest.class, BTest.class, CTest.class)
+ * &#064;SuiteClasses({ATest.class, BTest.class, CTest.class})
  * public class ABCSuite {
  * }
  * </pre>

File: src/main/java/org/junit/runners/Suite.java
Patch:
@@ -18,7 +18,7 @@
  * Using <code>Suite</code> as a runner allows you to manually
  * build a suite containing tests from many classes. It is the JUnit 4 equivalent of the JUnit 3.8.x
  * static {@link junit.framework.Test} <code>suite()</code> method. To use it, annotate a class
- * with <code>@RunWith(Suite.class)</code> and <code>@SuiteClasses(TestClass1.class, ...)</code>.
+ * with <code>@RunWith(Suite.class)</code> and <code>@SuiteClasses({TestClass1.class, ...})</code>.
  * When you run this class, it will run all the tests in all the suite classes.
  */
 public class Suite extends ParentRunner<Runner> {

File: src/test/java/org/junit/tests/experimental/rules/VerifierRuleTest.java
Patch:
@@ -57,8 +57,8 @@ public static class UsesErrorCollectorCheckThat {
 	
 	@Test public void usedErrorCollectorCheckThatShouldFail() {
 		PrintableResult testResult= testResult(UsesErrorCollectorCheckThat.class);
-		assertThat(testResult, hasFailureContaining("was <3>"));
-		assertThat(testResult, hasFailureContaining("was <5>"));
+		assertThat(testResult, hasFailureContaining("got: <3>"));
+		assertThat(testResult, hasFailureContaining("got: <5>"));
 	}
 
 	public static class UsesErrorCollectorCheckSucceeds {

File: src/main/java/org/junit/internal/requests/FilterRequest.java
Patch:
@@ -27,7 +27,6 @@ public FilterRequest(Request classRequest, Filter filter) {
 		fFilter= filter;
 	}
 
-	/** @inheritDoc */
 	@Override 
 	public Runner getRunner() {
 		try {

File: src/main/java/org/junit/runner/manipulation/Sorter.java
Patch:
@@ -40,7 +40,6 @@ public void apply(Object object) {
 		}
 	}
 
-	/** @inheritDoc */
 	public int compare(Description o1, Description o2) {
 		return fComparator.compare(o1, o2);
 	}

File: src/main/java/org/junit/runners/model/FrameworkMethod.java
Patch:
@@ -11,8 +11,8 @@
 /**
  * Represents a method on a test class to be invoked at the appropriate point in
  * test execution. These methods are usually marked with an annotation (such as
- * {@code @Test}, {@code @Before}, {@code @After}, {@code @BeforeClass}, {@code
- * @AfterClass}, etc.)
+ * {@code @Test}, {@code @Before}, {@code @After}, {@code @BeforeClass}, 
+ * {@code @AfterClass}, etc.)
  */
 public class FrameworkMethod extends FrameworkMember<FrameworkMethod> {
 	final Method fMethod;

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -23,7 +23,6 @@
 import org.junit.tests.experimental.interceptor.TimeoutInterceptorTest;
 import org.junit.tests.experimental.interceptor.VerifierInterceptorTest;
 import org.junit.tests.experimental.max.JUnit38SortingTest;
-import org.junit.tests.experimental.max.MaxComputerTest;
 import org.junit.tests.experimental.max.MaxStarterTest;
 import org.junit.tests.experimental.parallel.ParallelClassTest;
 import org.junit.tests.experimental.parallel.ParallelMethodTest;
@@ -123,7 +122,6 @@
 	FilterableTest.class,
 	MaxStarterTest.class,
 	JUnit38SortingTest.class,
-	MaxComputerTest.class,
 	InterceptorTest.class,
 	TimeoutInterceptorTest.class,
 	ParallelClassTest.class,

File: src/test/java/org/junit/tests/experimental/interceptor/ExternalResourceInterceptorTest.java
Patch:
@@ -6,13 +6,13 @@
 import static org.junit.experimental.results.ResultMatchers.isSuccessful;
 import org.junit.Test;
 import org.junit.experimental.interceptor.ExternalResource;
-import org.junit.experimental.interceptor.Interceptor;
+import org.junit.experimental.interceptor.Rule;
 
 public class ExternalResourceInterceptorTest {
 	private static String callSequence;
 	
 	public static class UsesExternalResource {
-		@Interceptor public ExternalResource resource = new ExternalResource() {
+		@Rule public ExternalResource resource = new ExternalResource() {
 			@Override
 			protected void before() throws Throwable {
 				callSequence += "before ";

File: src/test/java/org/junit/tests/experimental/interceptor/NameInterceptorTest.java
Patch:
@@ -2,11 +2,11 @@
 
 import static org.junit.Assert.assertEquals;
 import org.junit.Test;
-import org.junit.experimental.interceptor.Interceptor;
+import org.junit.experimental.interceptor.Rule;
 import org.junit.experimental.interceptor.TestName;
 
 public class NameInterceptorTest {
-	@Interceptor public TestName name = new TestName();
+	@Rule public TestName name = new TestName();
 	
 	@Test public void testA() {
 		assertEquals("testA", name.getMethodName());

File: src/test/java/org/junit/tests/experimental/interceptor/TempFolderInterceptorTest.java
Patch:
@@ -10,14 +10,14 @@
 import java.io.IOException;
 
 import org.junit.Test;
-import org.junit.experimental.interceptor.Interceptor;
+import org.junit.experimental.interceptor.Rule;
 import org.junit.experimental.interceptor.TemporaryFolder;
 
 public class TempFolderInterceptorTest {
 	private static File createdFile;
 
 	public static class HasTempFolder {
-		@Interceptor
+		@Rule
 		public TemporaryFolder folder= new TemporaryFolder();
 
 		@Test
@@ -34,7 +34,7 @@ public void tempFolderIsDeleted() {
 	}
 
 	public static class CreatesSubFolder {
-		@Interceptor
+		@Rule
 		public TemporaryFolder folder= new TemporaryFolder();
 
 		@Test

File: src/test/java/org/junit/tests/experimental/interceptor/TimeoutInterceptorTest.java
Patch:
@@ -5,8 +5,8 @@
 import static org.junit.Assert.assertThat;
 import org.junit.Ignore;
 import org.junit.Test;
-import org.junit.experimental.interceptor.Interceptor;
-import org.junit.experimental.interceptor.StatementInterceptor;
+import org.junit.experimental.interceptor.Rule;
+import org.junit.experimental.interceptor.MethodRule;
 import org.junit.experimental.interceptor.Timeout;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
@@ -15,7 +15,7 @@ public class TimeoutInterceptorTest {
 	public static class HasGlobalTimeout {
 		public static String log;
 		
-		@Interceptor public StatementInterceptor globalTimeout = new Timeout(20);
+		@Rule public MethodRule globalTimeout = new Timeout(20);
 		
 		@Test public void testInfiniteLoop1() {
 			log+= "ran1";

File: src/main/java/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.7-SNAPSHOT-20090601-1258";
+		return "4.7-SNAPSHOT-20090604-0055";
 	}
 	
 	public static void main(String[] args) {

File: src/test/java/org/junit/tests/assertion/AssertionTest.java
Patch:
@@ -10,9 +10,7 @@
 import static org.junit.Assert.fail;
 import static org.junit.matchers.JUnitMatchers.matches;
 
-import java.io.Serializable;
 import java.math.BigDecimal;
-import java.util.Map;
 
 import org.junit.Assert;
 import org.junit.ComparisonFailure;

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -23,7 +23,6 @@
 import org.junit.tests.experimental.interceptor.TimeoutInterceptorTest;
 import org.junit.tests.experimental.interceptor.VerifierInterceptorTest;
 import org.junit.tests.experimental.max.JUnit38SortingTest;
-import org.junit.tests.experimental.max.MaxComputerTest;
 import org.junit.tests.experimental.max.MaxStarterTest;
 import org.junit.tests.experimental.parallel.ParallelClassTest;
 import org.junit.tests.experimental.parallel.ParallelMethodTest;
@@ -123,7 +122,6 @@
 	FilterableTest.class,
 	MaxStarterTest.class,
 	JUnit38SortingTest.class,
-	MaxComputerTest.class,
 	InterceptorTest.class,
 	TimeoutInterceptorTest.class,
 	ParallelClassTest.class,

File: src/test/java/org/junit/tests/experimental/interceptor/ExternalResourceInterceptorTest.java
Patch:
@@ -6,13 +6,13 @@
 import static org.junit.experimental.results.ResultMatchers.isSuccessful;
 import org.junit.Test;
 import org.junit.experimental.interceptor.ExternalResource;
-import org.junit.experimental.interceptor.Interceptor;
+import org.junit.experimental.interceptor.Rule;
 
 public class ExternalResourceInterceptorTest {
 	private static String callSequence;
 	
 	public static class UsesExternalResource {
-		@Interceptor public ExternalResource resource = new ExternalResource() {
+		@Rule public ExternalResource resource = new ExternalResource() {
 			@Override
 			protected void before() throws Throwable {
 				callSequence += "before ";

File: src/test/java/org/junit/tests/experimental/interceptor/NameInterceptorTest.java
Patch:
@@ -2,11 +2,11 @@
 
 import static org.junit.Assert.assertEquals;
 import org.junit.Test;
-import org.junit.experimental.interceptor.Interceptor;
+import org.junit.experimental.interceptor.Rule;
 import org.junit.experimental.interceptor.TestName;
 
 public class NameInterceptorTest {
-	@Interceptor public TestName name = new TestName();
+	@Rule public TestName name = new TestName();
 	
 	@Test public void testA() {
 		assertEquals("testA", name.getMethodName());

File: src/test/java/org/junit/tests/experimental/interceptor/TempFolderInterceptorTest.java
Patch:
@@ -10,14 +10,14 @@
 import java.io.IOException;
 
 import org.junit.Test;
-import org.junit.experimental.interceptor.Interceptor;
+import org.junit.experimental.interceptor.Rule;
 import org.junit.experimental.interceptor.TemporaryFolder;
 
 public class TempFolderInterceptorTest {
 	private static File createdFile;
 
 	public static class HasTempFolder {
-		@Interceptor
+		@Rule
 		public TemporaryFolder folder= new TemporaryFolder();
 
 		@Test
@@ -34,7 +34,7 @@ public void tempFolderIsDeleted() {
 	}
 
 	public static class CreatesSubFolder {
-		@Interceptor
+		@Rule
 		public TemporaryFolder folder= new TemporaryFolder();
 
 		@Test

File: src/test/java/org/junit/tests/experimental/interceptor/TimeoutInterceptorTest.java
Patch:
@@ -5,8 +5,8 @@
 import static org.junit.Assert.assertThat;
 import org.junit.Ignore;
 import org.junit.Test;
-import org.junit.experimental.interceptor.Interceptor;
-import org.junit.experimental.interceptor.StatementInterceptor;
+import org.junit.experimental.interceptor.Rule;
+import org.junit.experimental.interceptor.MethodRule;
 import org.junit.experimental.interceptor.Timeout;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
@@ -15,7 +15,7 @@ public class TimeoutInterceptorTest {
 	public static class HasGlobalTimeout {
 		public static String log;
 		
-		@Interceptor public StatementInterceptor globalTimeout = new Timeout(20);
+		@Rule public MethodRule globalTimeout = new Timeout(20);
 		
 		@Test public void testInfiniteLoop1() {
 			log+= "ran1";

File: src/main/java/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.7-SNAPSHOT-20090601-1258";
+		return "4.7-SNAPSHOT-20090604-0055";
 	}
 	
 	public static void main(String[] args) {

File: src/test/java/org/junit/tests/assertion/AssertionTest.java
Patch:
@@ -10,9 +10,7 @@
 import static org.junit.Assert.fail;
 import static org.junit.matchers.JUnitMatchers.matches;
 
-import java.io.Serializable;
 import java.math.BigDecimal;
-import java.util.Map;
 
 import org.junit.Assert;
 import org.junit.ComparisonFailure;

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.tests.experimental.interceptor.NameInterceptorTest;
 import org.junit.tests.experimental.interceptor.TempFolderInterceptorTest;
 import org.junit.tests.experimental.interceptor.TimeoutInterceptorTest;
+import org.junit.tests.experimental.interceptor.VerifierInterceptorTest;
 import org.junit.tests.experimental.max.JUnit38SortingTest;
 import org.junit.tests.experimental.max.MaxComputerTest;
 import org.junit.tests.experimental.max.MaxStarterTest;
@@ -131,7 +132,8 @@
 	NameInterceptorTest.class,
 	ExpectedExceptionInterceptorTest.class,
 	TempFolderInterceptorTest.class,
-	ExternalResourceInterceptorTest.class
+	ExternalResourceInterceptorTest.class,
+	VerifierInterceptorTest.class
 })
 public class AllTests {
 	public static Test suite() {

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.tests.experimental.interceptor.NameInterceptorTest;
 import org.junit.tests.experimental.interceptor.TempFolderInterceptorTest;
 import org.junit.tests.experimental.interceptor.TimeoutInterceptorTest;
+import org.junit.tests.experimental.interceptor.VerifierInterceptorTest;
 import org.junit.tests.experimental.max.JUnit38SortingTest;
 import org.junit.tests.experimental.max.MaxComputerTest;
 import org.junit.tests.experimental.max.MaxStarterTest;
@@ -131,7 +132,8 @@
 	NameInterceptorTest.class,
 	ExpectedExceptionInterceptorTest.class,
 	TempFolderInterceptorTest.class,
-	ExternalResourceInterceptorTest.class
+	ExternalResourceInterceptorTest.class,
+	VerifierInterceptorTest.class
 })
 public class AllTests {
 	public static Test suite() {

File: src/main/java/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.7-SNAPSHOT-20090527-0039";
+		return "4.7-SNAPSHOT-20090529-1159";
 	}
 	
 	public static void main(String[] args) {

File: src/main/java/org/junit/matchers/JUnitMatchers.java
Patch:
@@ -133,7 +133,7 @@ public static <T> Matcher<T> isOneOf(T... objects) {
 	 * </pre>
 	 */
 	@SuppressWarnings("unchecked")
-	public static Matcher<Object> matches(Matcher<?> matcher) {
-		return (Matcher<Object>)matcher;
+	public static <T> Matcher<T> matches(Matcher<?> matcher) {
+		return (Matcher<T>)matcher;
 	}
 }

File: src/test/java/org/junit/tests/assertion/AssertionTest.java
Patch:
@@ -10,7 +10,9 @@
 import static org.junit.Assert.fail;
 import static org.junit.matchers.JUnitMatchers.matches;
 
+import java.io.Serializable;
 import java.math.BigDecimal;
+import java.util.Map;
 
 import org.junit.Assert;
 import org.junit.ComparisonFailure;
@@ -466,7 +468,5 @@ public void compareBigDecimalAndInteger() {
 		final BigDecimal bigDecimal = new BigDecimal("1.2");
 		final Integer integer = Integer.valueOf("1");
 		assertEquals(bigDecimal, integer);
-	}
-
-
+	}	
 }

File: src/main/java/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.7-SNAPSHOT-20090527-0039";
+		return "4.7-SNAPSHOT-20090529-1159";
 	}
 	
 	public static void main(String[] args) {

File: src/main/java/org/junit/matchers/JUnitMatchers.java
Patch:
@@ -133,7 +133,7 @@ public static <T> Matcher<T> isOneOf(T... objects) {
 	 * </pre>
 	 */
 	@SuppressWarnings("unchecked")
-	public static Matcher<Object> matches(Matcher<?> matcher) {
-		return (Matcher<Object>)matcher;
+	public static <T> Matcher<T> matches(Matcher<?> matcher) {
+		return (Matcher<T>)matcher;
 	}
 }

File: src/test/java/org/junit/tests/assertion/AssertionTest.java
Patch:
@@ -10,7 +10,9 @@
 import static org.junit.Assert.fail;
 import static org.junit.matchers.JUnitMatchers.matches;
 
+import java.io.Serializable;
 import java.math.BigDecimal;
+import java.util.Map;
 
 import org.junit.Assert;
 import org.junit.ComparisonFailure;
@@ -466,7 +468,5 @@ public void compareBigDecimalAndInteger() {
 		final BigDecimal bigDecimal = new BigDecimal("1.2");
 		final Integer integer = Integer.valueOf("1");
 		assertEquals(bigDecimal, integer);
-	}
-
-
+	}	
 }

File: src/test/java/org/junit/tests/assertion/AssertionTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.junit.tests.assertion;
 
-import static org.hamcrest.CoreMatchers.allOf;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertArrayEquals;
@@ -427,8 +426,7 @@ public void arraysDeclaredAsObjectAreComparedAsObjects() {
         }
     }
     
-    @SuppressWarnings("unchecked")
-	@Test public void assertThatIncludesAdvancedMismatch() {
+    @Test public void assertThatIncludesAdvancedMismatch() {
         String expectedMessage = "identifier\nExpected: is an instance of java.lang.Integer\n     but: \"actual\" is a java.lang.String";
         
         try {

File: src/test/java/org/junit/tests/assertion/BothTest.java
Patch:
@@ -1,9 +1,7 @@
 package org.junit.tests.assertion;
 
-import static org.hamcrest.CoreMatchers.allOf;
 import static org.hamcrest.CoreMatchers.any;
 import static org.hamcrest.CoreMatchers.containsString;
-import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.CoreMatchers.sameInstance;

File: src/test/java/org/junit/tests/assertion/AssertionTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.junit.tests.assertion;
 
-import static org.hamcrest.CoreMatchers.allOf;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertArrayEquals;
@@ -427,8 +426,7 @@ public void arraysDeclaredAsObjectAreComparedAsObjects() {
         }
     }
     
-    @SuppressWarnings("unchecked")
-	@Test public void assertThatIncludesAdvancedMismatch() {
+    @Test public void assertThatIncludesAdvancedMismatch() {
         String expectedMessage = "identifier\nExpected: is an instance of java.lang.Integer\n     but: \"actual\" is a java.lang.String";
         
         try {

File: src/test/java/org/junit/tests/assertion/BothTest.java
Patch:
@@ -1,9 +1,7 @@
 package org.junit.tests.assertion;
 
-import static org.hamcrest.CoreMatchers.allOf;
 import static org.hamcrest.CoreMatchers.any;
 import static org.hamcrest.CoreMatchers.containsString;
-import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.CoreMatchers.sameInstance;

File: src/test/java/org/junit/tests/experimental/interceptor/NameInterceptorTest.java
Patch:
@@ -3,11 +3,8 @@
 import static org.junit.Assert.assertEquals;
 import org.junit.Test;
 import org.junit.experimental.interceptor.Interceptor;
-import org.junit.experimental.interceptor.Interceptors;
 import org.junit.experimental.interceptor.TestName;
-import org.junit.runner.RunWith;
 
-@RunWith(Interceptors.class)
 public class NameInterceptorTest {
 	@Interceptor public TestName name = new TestName();
 	

File: src/test/java/org/junit/tests/experimental/interceptor/TimeoutInterceptorTest.java
Patch:
@@ -6,15 +6,12 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.experimental.interceptor.Interceptor;
-import org.junit.experimental.interceptor.Interceptors;
 import org.junit.experimental.interceptor.StatementInterceptor;
 import org.junit.experimental.interceptor.Timeout;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
-import org.junit.runner.RunWith;
 
 public class TimeoutInterceptorTest {
-	@RunWith(Interceptors.class)
 	public static class HasGlobalTimeout {
 		public static String log;
 		

File: src/test/java/org/junit/tests/experimental/interceptor/NameInterceptorTest.java
Patch:
@@ -3,11 +3,8 @@
 import static org.junit.Assert.assertEquals;
 import org.junit.Test;
 import org.junit.experimental.interceptor.Interceptor;
-import org.junit.experimental.interceptor.Interceptors;
 import org.junit.experimental.interceptor.TestName;
-import org.junit.runner.RunWith;
 
-@RunWith(Interceptors.class)
 public class NameInterceptorTest {
 	@Interceptor public TestName name = new TestName();
 	

File: src/test/java/org/junit/tests/experimental/interceptor/TimeoutInterceptorTest.java
Patch:
@@ -6,15 +6,12 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.experimental.interceptor.Interceptor;
-import org.junit.experimental.interceptor.Interceptors;
 import org.junit.experimental.interceptor.StatementInterceptor;
 import org.junit.experimental.interceptor.Timeout;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
-import org.junit.runner.RunWith;
 
 public class TimeoutInterceptorTest {
-	@RunWith(Interceptors.class)
 	public static class HasGlobalTimeout {
 		public static String log;
 		

File: src/main/java/junit/framework/TestSuite.java
Patch:
@@ -276,7 +276,7 @@ private void addTestMethod(Method m, List<String> names, Class<? extends TestCas
 			return;
 		if (! isPublicTestMethod(m)) {
 			if (isTestMethod(m))
-				addTest(warning("Test method isn't public: "+m.getName()));
+				addTest(warning("Test method isn't public: "+ m.getName() + "(" + theClass.getCanonicalName() + ")"));
 			return;
 		}
 		names.add(name);

File: src/main/java/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.6";
+		return "4.7-SNAPSHOT";
 	}
 	
 	public static void main(String[] args) {

File: src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java
Patch:
@@ -251,6 +251,7 @@ private static class MalformedJUnit38Test {
 		private MalformedJUnit38Test() {
 		}
 
+		@SuppressWarnings("unused")
 		public void testSucceeds() {
 		}
 	}
@@ -277,9 +278,7 @@ public void correctErrorFromMalformedTest() {
 		Runner runner= sorted.getRunner();
 		Result result= core.run(runner);
 		Failure failure= result.getFailures().get(0);
-
-		assertThat(failure.toString(),
-				containsString("MalformedJUnit38TestMethod"));
+		assertThat(failure.toString(), containsString("MalformedJUnit38TestMethod"));
 		assertThat(failure.toString(), containsString("testNothing"));
 		assertThat(failure.toString(), containsString("isn't public"));
 	}

File: src/main/java/org/junit/AfterClass.java
Patch:
@@ -16,7 +16,7 @@
  * Here is a simple example:
 * <pre>
  * public class Example {
- *    DatabaseConnection database;
+ *    private static DatabaseConnection database;
  *    &#064;BeforeClass public static void login() {
  *          database= ...;
  *    }

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -29,7 +29,7 @@
  * &#064;RunWith(Parameterized.class)
  * public class FibonacciTest {
  * 	&#064;Parameters
- * 	public static Collection&lt;Object[]&gt; data() {
+ * 	public static List&lt;Object[]&gt; data() {
  * 		return Arrays.asList(new Object[][] {
  * 				Fibonacci,
  * 				{ { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 },

File: src/main/java/org/junit/AfterClass.java
Patch:
@@ -16,7 +16,7 @@
  * Here is a simple example:
 * <pre>
  * public class Example {
- *    DatabaseConnection database;
+ *    private static DatabaseConnection database;
  *    &#064;BeforeClass public static void login() {
  *          database= ...;
  *    }

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -29,7 +29,7 @@
  * &#064;RunWith(Parameterized.class)
  * public class FibonacciTest {
  * 	&#064;Parameters
- * 	public static Collection&lt;Object[]&gt; data() {
+ * 	public static List&lt;Object[]&gt; data() {
  * 		return Arrays.asList(new Object[][] {
  * 				Fibonacci,
  * 				{ { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 },

File: src/main/java/junit/textui/TestRunner.java
Patch:
@@ -184,7 +184,7 @@ else if (args[i].equals("-m")) {
 	}
 
 	protected TestResult runSingleMethod(String testCase, String method, boolean wait) throws Exception {
-		Class<? extends TestCase> testClass= loadSuiteClass(testCase);
+		Class<? extends TestCase> testClass= loadSuiteClass(testCase).asSubclass(TestCase.class);
 		Test test= TestSuite.createTest(testClass, method);
 		return doRun(test, wait);
 	}

File: src/main/java/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.5";
+		return "4.6-RC1";
 	}
 	
 	public static void main(String[] args) {

File: src/main/java/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.5";
+		return "4.6-RC1";
 	}
 	
 	public static void main(String[] args) {

File: src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java
Patch:
@@ -92,7 +92,8 @@ private void addFields(ParameterSignature sig,
 				if (sig.canAcceptArrayType(type)
 						&& field.getAnnotation(DataPoints.class) != null) {
 					addArrayValues(field.getName(), list, getStaticFieldValue(field));
-				} else if (sig.canAcceptType(type)) {
+				} else if (sig.canAcceptType(type)
+						&& field.getAnnotation(DataPoint.class) != null) {
 					list.add(PotentialAssignment
 							.forValue(field.getName(), getStaticFieldValue(field)));
 				}

File: src/test/java/org/junit/tests/description/TestDescriptionTest.java
Patch:
@@ -8,4 +8,4 @@ public class TestDescriptionTest {
 	@Test public void equalsIsFalseForNonTestDescription() {
 		assertFalse(Description.createTestDescription(getClass(), "a").equals(new Integer(5)));
 	}
-}
+}
\ No newline at end of file

File: src/test/java/org/junit/tests/experimental/results/PrintableResultTest.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Arrays;
 
 import org.junit.experimental.results.PrintableResult;
+import org.junit.experimental.theories.DataPoint;
 import org.junit.experimental.theories.Theories;
 import org.junit.experimental.theories.Theory;
 import org.junit.runner.Description;
@@ -35,6 +36,7 @@ public StackTraceElement[] getStackTrace() {
 				containsString(descriptionName), containsString(stackTraceClassName)));
 	}
 
+	@DataPoint
 	public static String SHELL_POINT= "Shell Point";
 
 	@Theory

File: src/test/java/org/junit/tests/experimental/theories/runner/WhenNoParametersMatch.java
Patch:
@@ -7,6 +7,7 @@
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.internal.matchers.StringContains.containsString;
 import org.hamcrest.Matcher;
+import org.junit.experimental.theories.DataPoint;
 import org.junit.experimental.theories.DataPoints;
 import org.junit.experimental.theories.Theories;
 import org.junit.experimental.theories.Theory;
@@ -22,8 +23,10 @@ public class WhenNoParametersMatch {
 
 	@RunWith(Theories.class)
 	public static class AssumptionsFail {
+		@DataPoint
 		public static int DATA= 0;
 
+		@DataPoint
 		public static Matcher<Integer> MATCHER= null;
 
 		@Theory

File: src/test/java/org/junit/tests/experimental/theories/runner/WithDataPointMethod.java
Patch:
@@ -75,8 +75,10 @@ public static List<Object> empty() {
 			return new ArrayList<Object>();
 		}
 
+		@DataPoint
 		public static int ONE= 1;
 
+		@DataPoint
 		public static int TWO= 2;
 
 		@Theory

File: src/test/java/org/junit/tests/running/methods/AnnotationTest.java
Patch:
@@ -517,5 +517,4 @@ public void testRunAllAfterClassesRegardless() {
 		assertTrue(log.contains("two"));
 		assertEquals(2, result.getFailureCount());
 	}
-
 }

File: src/main/java/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.6-SNAPSHOT-20080908-1523";
+		return "4.5";
 	}
 	
 	public static void main(String[] args) {

File: src/test/java/org/junit/tests/AllTests.java
Patch:
@@ -128,7 +128,8 @@ public static void main(String[] args) throws CouldNotReadCoreException {
 		MaxCore max= MaxCore.forFolder("AllTests");
 		JUnitCore core= new JUnitCore();
 		core.addListener(new TextListener(new RealSystem()));
-		max.run(Request.aClass(AllTests.class), core);
+		Request request= Request.aClass(AllTests.class);
+		max.run(request, core);
 		// TODO: not always 0
 		System.exit(0);
 	}

File: src/main/java/org/junit/internal/runners/ErrorReportingRunner.java
Patch:
@@ -41,6 +41,9 @@ private List<Throwable> getCauses(Throwable cause) {
 			return getCauses(cause.getCause());
 		if (cause instanceof InitializationError)
 			return ((InitializationError) cause).getCauses();
+		if (cause instanceof org.junit.internal.runners.InitializationError)
+			return ((org.junit.internal.runners.InitializationError) cause)
+					.getCauses();
 		return Arrays.asList(cause);
 	}
 

File: src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java
Patch:
@@ -96,9 +96,9 @@ protected List<FrameworkMethod> getChildren() {
 	//
 
 	/**
-	 * Returns the methods that run tests (this should be called just once per
-	 * class). Default implementation returns all methods annotated with {@code
-	 * @Test} on this class and superclasses that are not overridden.
+	 * Returns the methods that run tests. Default implementation 
+	 * returns all methods annotated with {@code @Test} on this 
+	 * class and superclasses that are not overridden.
 	 */
 	protected List<FrameworkMethod> computeTestMethods() {
 		return getTestClass().getAnnotatedMethods(Test.class);

File: src/main/java/org/junit/AfterClass.java
Patch:
@@ -17,7 +17,7 @@
 * <pre>
  * public class Example {
  *    DatabaseConnection database;
- *    &#064;BeforeClass public void login() {
+ *    &#064;BeforeClass public static void login() {
  *          database= ...;
  *    }
  *    &#064;Test public void something() {
@@ -26,7 +26,7 @@
  *    &#064;Test public void somethingElse() {
  *          ...
  *    }
- *    &#064;AfterClass public void logout() {
+ *    &#064;AfterClass public static void logout() {
  *          database.logout();
  *    }
  * }

File: src/main/java/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.5-SNAPSHOT-20080626-0650";
+		return "4.5-SNAPSHOT-20080715-1721";
 	}
 	
 	public static void main(String[] args) {

File: src/main/java/org/junit/experimental/theories/Theories.java
Patch:
@@ -14,9 +14,9 @@
 import org.junit.experimental.theories.internal.Assignments;
 import org.junit.experimental.theories.internal.ParameterizedAssertionError;
 import org.junit.internal.AssumptionViolatedException;
-import org.junit.internal.runners.InitializationError;
-import org.junit.internal.runners.model.FrameworkMethod;
 import org.junit.runners.BlockJUnit4ClassRunner;
+import org.junit.runners.FrameworkMethod;
+import org.junit.runners.InitializationError;
 import org.junit.runners.Statement;
 
 public class Theories extends BlockJUnit4ClassRunner {

File: src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java
Patch:
@@ -16,8 +16,8 @@
 import org.junit.experimental.theories.ParameterSignature;
 import org.junit.experimental.theories.ParameterSupplier;
 import org.junit.experimental.theories.PotentialAssignment;
-import org.junit.internal.runners.model.FrameworkMethod;
 import org.junit.internal.runners.model.TestClass;
+import org.junit.runners.FrameworkMethod;
 
 public class AllMembersSupplier extends ParameterSupplier {
 	static class MethodParameterValue extends PotentialAssignment {

File: src/main/java/org/junit/internal/builders/AnnotatedBuilder.java
Patch:
@@ -3,9 +3,9 @@
  */
 package org.junit.internal.builders;
 
-import org.junit.internal.runners.InitializationError;
 import org.junit.runner.RunWith;
 import org.junit.runner.Runner;
+import org.junit.runners.InitializationError;
 import org.junit.runners.RunnerBuilder;
 
 public class AnnotatedBuilder extends RunnerBuilder {

File: src/main/java/org/junit/internal/runners/ErrorReportingRunner.java
Patch:
@@ -7,6 +7,7 @@
 import org.junit.runner.Description;
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunNotifier;
+import org.junit.runners.InitializationError;
 import org.junit.runners.Statement;
 
 public class ErrorReportingRunner extends ParentRunner<Throwable> {

File: src/main/java/org/junit/internal/runners/ParentRunner.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.runner.notification.RunNotifier;
 import org.junit.runner.notification.StoppedByUserException;
 import org.junit.runners.Statement;
+import org.junit.runners.InitializationError;
 
 public abstract class ParentRunner<T> extends Runner implements Filterable, Sortable {
 	private final TestClass fTestClass;
@@ -85,7 +86,7 @@ protected final TestClass getTestClass() {
 		return fTestClass;
 	}
 
-	protected void validate() throws InitializationError {
+	protected void validate() throws InitializationError { 
 		List<Throwable> errors= new ArrayList<Throwable>();
 		collectInitializationErrors(errors);
 		if (!errors.isEmpty())

File: src/main/java/org/junit/internal/runners/model/TestElement.java
Patch:
@@ -2,6 +2,8 @@
 
 import java.util.List;
 
+import org.junit.runners.FrameworkMethod;
+
 public abstract class TestElement {
 	public abstract List<FrameworkMethod> getBefores();
 

File: src/main/java/org/junit/internal/runners/model/TestMethod.java
Patch:
@@ -4,6 +4,7 @@
 
 import org.junit.After;
 import org.junit.Before;
+import org.junit.runners.FrameworkMethod;
 
 public class TestMethod extends TestElement {
 	private TestClass fTestClass;

File: src/main/java/org/junit/internal/runners/statements/InvokeMethod.java
Patch:
@@ -3,7 +3,7 @@
  */
 package org.junit.internal.runners.statements;
 
-import org.junit.internal.runners.model.FrameworkMethod;
+import org.junit.runners.FrameworkMethod;
 import org.junit.runners.Statement;
 
 public class InvokeMethod extends Statement {

File: src/main/java/org/junit/internal/runners/statements/RunAfters.java
Patch:
@@ -8,7 +8,7 @@
 
 import org.junit.internal.runners.model.MultipleFailureException;
 import org.junit.internal.runners.model.TestElement;
-import org.junit.internal.runners.model.FrameworkMethod;
+import org.junit.runners.FrameworkMethod;
 import org.junit.runners.Statement;
 
 public class RunAfters extends Statement {

File: src/main/java/org/junit/internal/runners/statements/RunBefores.java
Patch:
@@ -5,8 +5,8 @@
 
 import java.util.List;
 
-import org.junit.internal.runners.model.FrameworkMethod;
 import org.junit.internal.runners.model.TestElement;
+import org.junit.runners.FrameworkMethod;
 import org.junit.runners.Statement;
 
 public class RunBefores extends Statement {

File: src/main/java/org/junit/runner/Description.java
Patch:
@@ -169,8 +169,7 @@ public boolean isEmpty() {
 	 * children will be added back)
 	 */
 	public Description childlessCopy() {
-		// TODO: should include annotations
-		return new Description(fDisplayName);
+		return new Description(fDisplayName, fAnnotations);
 	}
 
 	/**

File: src/main/java/org/junit/runners/FrameworkMethod.java
Patch:
@@ -1,10 +1,11 @@
-package org.junit.internal.runners.model;
+package org.junit.runners;
 
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.List;
 
 import org.junit.Ignore;
+import org.junit.internal.runners.model.ReflectiveCallable;
 
 public class FrameworkMethod {
 	private final Method fMethod;
@@ -72,7 +73,7 @@ public boolean isShadowedBy(FrameworkMethod each) {
 		return true;
 	}
 
-	boolean isShadowedBy(List<FrameworkMethod> results) {
+	public boolean isShadowedBy(List<FrameworkMethod> results) {
 		for (FrameworkMethod each : results)
 			if (isShadowedBy(each))
 				return true;

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -8,8 +8,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.junit.internal.runners.InitializationError;
-import org.junit.internal.runners.model.FrameworkMethod;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.Runner;
 import org.junit.runner.notification.RunNotifier;

File: src/main/java/org/junit/runners/RunnerBuilder.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.Set;
 
 import org.junit.internal.runners.ErrorReportingRunner;
-import org.junit.internal.runners.InitializationError;
 import org.junit.runner.Runner;
 
 /**

File: src/main/java/org/junit/runners/Suite.java
Patch:
@@ -7,7 +7,6 @@
 import java.util.List;
 
 import org.junit.internal.builders.AllDefaultPossibilitiesBuilder;
-import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.ParentRunner;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
@@ -72,7 +71,6 @@ public Suite(RunnerBuilder builder, Class<?>[] classes) {
 	 * @param suiteClasses the classes in the suite
 	 * @throws InitializationError
 	 */
-	//TODO this needs a unit test
 	protected Suite(Class<?> klass, Class<?>[] suiteClasses) throws InitializationError {
 		this(new AllDefaultPossibilitiesBuilder(true), klass, suiteClasses);
 	}

File: src/test/java/org/junit/tests/ObjectContractTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.experimental.theories.DataPoints;
 import org.junit.experimental.theories.Theories;
 import org.junit.experimental.theories.Theory;
-import org.junit.internal.runners.model.FrameworkMethod;
 import org.junit.runner.RunWith;
+import org.junit.runners.FrameworkMethod;
 
 @RunWith(Theories.class)
 public class ObjectContractTest {

File: src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.experimental.theories.Theories;
 import org.junit.experimental.theories.internal.Assignments;
 import org.junit.internal.AssumptionViolatedException;
-import org.junit.internal.runners.InitializationError;
-import org.junit.internal.runners.model.FrameworkMethod;
+import org.junit.runners.FrameworkMethod;
+import org.junit.runners.InitializationError;
 import org.junit.runners.Statement;
 
 public class StubbedTheories extends Theories {

File: src/test/java/org/junit/tests/manipulation/FilterableTest.java
Patch:
@@ -23,7 +23,6 @@ public FilteredRunner(Class<?> klass) throws Throwable {
 
 				@Override
 				public boolean shouldRun(Description description) {
-					System.out.println(description.getDisplayName());
 					return !description.getDisplayName().contains("skip");
 				}
 

File: src/test/java/org/junit/tests/running/classes/UseSuiteAsASuperclassTest.java
Patch:
@@ -1,11 +1,12 @@
 package org.junit.tests.running.classes;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import org.junit.Test;
-import org.junit.internal.runners.InitializationError;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
 import org.junit.runner.RunWith;
+import org.junit.runners.InitializationError;
 import org.junit.runners.Suite;
 
 public class UseSuiteAsASuperclassTest {

File: src/test/java/org/junit/tests/running/methods/ParameterizedTestMethodTest.java
Patch:
@@ -13,9 +13,9 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.junit.internal.runners.InitializationError;
 import org.junit.runner.RunWith;
 import org.junit.runners.BlockJUnit4ClassRunner;
+import org.junit.runners.InitializationError;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;
 

File: src/test/java/org/junit/tests/running/methods/TestMethodTest.java
Patch:
@@ -16,11 +16,11 @@
 import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
-import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
 import org.junit.runners.BlockJUnit4ClassRunner;
+import org.junit.runners.InitializationError;
 
 public class TestMethodTest {
 

File: src/test/java/org/junit/tests/experimental/theories/runner/WhenNoParametersMatch.java
Patch:
@@ -13,8 +13,6 @@
 import org.junit.experimental.theories.Theory;
 import org.junit.runner.RunWith;
 
-// TODO: (Apr 7, 2008 1:53:34 PM) fix before releasing
-@Ignore("Fix before releasing")
 @RunWith(Theories.class)
 public class WhenNoParametersMatch {
 	@DataPoints

File: src/main/java/org/junit/internal/requests/ClassRequest.java
Patch:
@@ -1,10 +1,10 @@
 package org.junit.internal.requests;
 
 import org.junit.Ignore;
+import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit38ClassRunner;
 import org.junit.internal.runners.JUnit4ClassRunner;
 import org.junit.internal.runners.SuiteMethod;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.runner.Request;
 import org.junit.runner.RunWith;
 import org.junit.runner.Runner;

File: src/main/java/org/junit/internal/requests/ErrorReportingRequest.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.junit.internal.runners.CompositeRunner;
 import org.junit.internal.runners.ErrorReportingRunner;
-import org.junit.internal.runners.model.InitializationError;
+import org.junit.internal.runners.InitializationError;
 import org.junit.runner.Description;
 import org.junit.runner.Request;
 import org.junit.runner.Runner;

File: src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java
Patch:
@@ -18,9 +18,9 @@
 import org.junit.internal.runners.links.Statement;
 import org.junit.internal.runners.model.EachTestNotifier;
 import org.junit.internal.runners.model.FrameworkMethod;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.ReflectiveCallable;
 import org.junit.internal.runners.model.TestAnnotation;
+import org.junit.internal.runners.model.TestMethodElement;
 import org.junit.runner.Description;
 import org.junit.runner.manipulation.Filter;
 import org.junit.runner.manipulation.Filterable;

File: src/main/java/org/junit/internal/runners/ParentRunner.java
Patch:
@@ -11,7 +11,6 @@
 import org.junit.internal.runners.links.RunBefores;
 import org.junit.internal.runners.links.Statement;
 import org.junit.internal.runners.model.EachTestNotifier;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
@@ -37,8 +36,6 @@ public ParentRunner(Class<?> testClass) {
 	
 	protected abstract Description describeChild(T child);
 
-	// TODO: (Nov 24, 2007 11:50:17 PM) can I avoid RunNotifier?
-
 	protected abstract void runChild(T child, RunNotifier notifier);
 
 	private Statement classBlock(final RunNotifier notifier) {

File: src/main/java/org/junit/runners/Enclosed.java
Patch:
@@ -1,6 +1,6 @@
 package org.junit.runners;
 
-import org.junit.internal.runners.model.InitializationError;
+import org.junit.internal.runners.InitializationError;
 
 public class Enclosed extends Suite {
 	public Enclosed(Class<?> klass) throws InitializationError {

File: src/main/java/org/junit/runners/Parameterized.java
Patch:
@@ -10,8 +10,8 @@
 import java.util.List;
 
 import org.junit.internal.runners.CompositeRunner;
+import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.internal.runners.model.FrameworkMethod;
 import org.junit.runner.manipulation.Filterable;

File: src/main/java/org/junit/runners/Suite.java
Patch:
@@ -9,8 +9,8 @@
 import java.util.List;
 import java.util.Set;
 
+import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.ParentRunner;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.Description;
 import org.junit.runner.Request;

File: src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.experimental.theories.ParameterSignature;
 import org.junit.experimental.theories.Theories;
 import org.junit.experimental.theories.internal.Assignments;
+import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.links.Statement;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.FrameworkMethod;
 
 public class StubbedTheories extends Theories {

File: src/test/java/org/junit/tests/running/methods/ParameterizedTestMethodTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;

File: src/test/java/org/junit/tests/running/methods/TestMethodTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
+import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
-import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;

File: src/org/junit/internal/runners/links/InvokeMethod.java
Patch:
@@ -3,13 +3,13 @@
  */
 package org.junit.internal.runners.links;
 
-import org.junit.internal.runners.model.TestMethod;
+import org.junit.internal.runners.model.FrameworkMethod;
 
 public class InvokeMethod extends Statement {
-	private final TestMethod fTestMethod;
+	private final FrameworkMethod fTestMethod;
 	private Object fTarget;
 	
-	public InvokeMethod(TestMethod testMethod, Object target) {
+	public InvokeMethod(FrameworkMethod testMethod, Object target) {
 		fTestMethod= testMethod;
 		fTarget= target;
 	}

File: src/org/junit/internal/runners/links/RunAfters.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.junit.internal.runners.model.MultipleFailureException;
 import org.junit.internal.runners.model.TestElement;
-import org.junit.internal.runners.model.TestMethod;
+import org.junit.internal.runners.model.FrameworkMethod;
 
 public class RunAfters extends Statement {
 	private final Statement fNext;
@@ -30,8 +30,8 @@ public void evaluate() throws Throwable {
 		} catch (Throwable e) {
 			errors.add(e);
 		} finally {
-			List<TestMethod> afters= fElement.getAfters();
-			for (TestMethod each : afters)
+			List<FrameworkMethod> afters= fElement.getAfters();
+			for (FrameworkMethod each : afters)
 				try {
 					each.invokeExplosively(fTarget);
 				} catch (Throwable e) {

File: src/org/junit/internal/runners/model/InitializationError.java
Patch:
@@ -3,6 +3,9 @@
 import java.util.Arrays;
 import java.util.List;
 
+// TODO: (Nov 14, 2007 12:03:52 PM) Does this belong here?
+
+
 public class InitializationError extends Exception {
 	private static final long serialVersionUID= 1L;
 	private final List<Throwable> fErrors;

File: src/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
Patch:
@@ -10,20 +10,20 @@
 import org.junit.experimental.theories.internal.Assignments;
 import org.junit.internal.runners.links.Statement;
 import org.junit.internal.runners.model.InitializationError;
-import org.junit.internal.runners.model.TestMethod;
+import org.junit.internal.runners.model.FrameworkMethod;
 
 public class StubbedTheories extends Theories {
 	public StubbedTheories(Class<?> klass) throws InitializationError {
 		super(klass);
 	}
 
 	@Override
-	public Statement childBlock(TestMethod method) {
+	public Statement childBlock(FrameworkMethod method) {
 		return new StubbedTheoryAnchor(method);
 	}
 	
 	public class StubbedTheoryAnchor extends TheoryAnchor {
-		public StubbedTheoryAnchor(TestMethod method) {
+		public StubbedTheoryAnchor(FrameworkMethod method) {
 			super(method);
 		}
 

File: src/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.5-SNAPSHOT-20070904-1400";
+		return "4.5-SNAPSHOT-20071012-1919";
 	}
 	
 	public static void main(String[] args) {

File: src/org/junit/experimental/theories/ParameterSignature.java
Patch:
@@ -8,7 +8,6 @@
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collection;
 import java.util.List;
 
 
@@ -23,7 +22,7 @@ public static ArrayList<ParameterSignature> signatures(Method method) {
 	}
 
 
-	public static Collection<? extends ParameterSignature> signatures(
+	public static List<ParameterSignature> signatures(
 			Constructor<?> constructor) {
 		// TODO: (Oct 12, 2007 12:33:06 PM) handle DUP above
 		ArrayList<ParameterSignature> sigs= new ArrayList<ParameterSignature>();

File: src/org/junit/internal/runners/links/RunAfters.java
Patch:
@@ -8,7 +8,6 @@
 import org.junit.internal.runners.model.MultipleFailureException;
 import org.junit.internal.runners.model.TestElement;
 import org.junit.internal.runners.model.TestMethod;
-import org.junit.runner.notification.StoppedByUserException;
 
 public class RunAfters extends Statement {
 	private final Statement fNext;
@@ -28,8 +27,6 @@ public void evaluate() throws Throwable {
 		MultipleFailureException errors= new MultipleFailureException();
 		try {
 			fNext.evaluate();
-		} catch (StoppedByUserException e) {
-			throw e; // TODO this is ugly. if we can eliminate pleaseStop(), we can remove it
 		} catch (Throwable e) {
 			errors.add(e);
 		} finally {

File: src/org/junit/internal/runners/model/TestElement.java
Patch:
@@ -13,7 +13,7 @@ public void runBefores(Object target) throws Throwable {
 				before.invokeExplosively(target);
 	}
 
-	public void runAfters(Object target) throws MultipleFailureException {
+	public void runAfters(Object target) throws Throwable {
 		MultipleFailureException errors= new MultipleFailureException();
 		
 		List<TestMethod> afters= getAfters();

File: src/org/junit/tests/experimental/ExperimentalTests.java
Patch:
@@ -12,13 +12,15 @@
 import org.junit.tests.experimental.theories.runner.WithDataPointFields;
 import org.junit.tests.experimental.theories.runner.WithDataPointMethod;
 import org.junit.tests.experimental.theories.runner.WithExtendedParameterSources;
+import org.junit.tests.experimental.theories.runner.WithOnlyTestAnnotations;
 
 @RunWith(Suite.class)
 @SuiteClasses( { ParameterizedAssertionErrorTest.class,
 		WithDataPointFields.class, PrintableResultTest.class,
 		ResultMatchersTest.class, WithDataPointMethod.class,
 		ParameterSignatureTest.class, WhenNoParametersMatch.class,
-		WithExtendedParameterSources.class, StubbedTheoriesTest.class })
+		WithExtendedParameterSources.class, StubbedTheoriesTest.class, 
+		WithOnlyTestAnnotations.class })
 public class ExperimentalTests {
 
 }

File: src/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.experimental.theories.ParameterSignature;
 import org.junit.experimental.theories.Theories;
 import org.junit.experimental.theories.internal.Assignments;
+import org.junit.internal.runners.links.Link;
 import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestMethod;
 
@@ -18,7 +19,7 @@ public StubbedTheories(Class<?> klass) throws InitializationError {
 	}
 
 	@Override
-	protected TheoryAnchor invoke(TestMethod method, Object test) {
+	protected Link chain(TestMethod method) {
 		return new StubbedTheoryAnchor(method);
 	}
 	

File: src/org/junit/experimental/theories/Theories.java
Patch:
@@ -13,10 +13,9 @@
 import org.junit.experimental.theories.internal.Assignments;
 import org.junit.experimental.theories.internal.ParameterizedAssertionError;
 import org.junit.internal.runners.JUnit4ClassRunner;
-import org.junit.internal.runners.links.WithBeforeAndAfter;
 import org.junit.internal.runners.links.Link;
+import org.junit.internal.runners.links.WithBeforeAndAfter;
 import org.junit.internal.runners.model.EachTestNotifier;
-import org.junit.internal.runners.model.ErrorList;
 import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestMethod;
 
@@ -27,7 +26,7 @@ public Theories(Class<?> klass) throws InitializationError {
 	}
 
 	@Override
-	protected void collectInitializationErrors(ErrorList errors) {
+	protected void collectInitializationErrors(List<Throwable> errors) {
 	}
 
 	@Override

File: src/org/junit/internal/runners/SuiteMethod.java
Patch:
@@ -5,7 +5,6 @@
 import java.lang.reflect.Modifier;
 
 import junit.framework.Test;
-import org.junit.internal.runners.JUnit38ClassRunner;
 
 /** Runner for use with JUnit 3.8.x-style AllTests classes
  * (those that only implement a static <code>suite()</code>

File: src/org/junit/internal/runners/links/WithBeforeAndAfter.java
Patch:
@@ -3,8 +3,8 @@
  */
 package org.junit.internal.runners.links;
 
-import org.junit.internal.runners.model.TestElement;
 import org.junit.internal.runners.model.EachTestNotifier;
+import org.junit.internal.runners.model.TestElement;
 
 
 public class WithBeforeAndAfter extends Link {

File: src/org/junit/internal/runners/model/TestMethod.java
Patch:
@@ -77,7 +77,7 @@ public Class<?>[] getParameterTypes() {
 		return fMethod.getParameterTypes();
 	}
 
-	public void validate(boolean isStatic, ErrorList errors) {
+	public void validate(boolean isStatic, List<Throwable> errors) {
 		if (Modifier.isStatic(fMethod.getModifiers()) != isStatic) {
 			String state= isStatic ? "should" : "should not";
 			errors.add(new Exception("Method " + fMethod.getName() + "() "

File: src/org/junit/matchers/Each.java
Patch:
@@ -1,10 +1,10 @@
 package org.junit.matchers;
 
 import static org.hamcrest.CoreMatchers.not;
+import static org.junit.matchers.IsCollectionContaining.hasItem;
 import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
-import static org.junit.matchers.IsCollectionContaining.hasItem;
 
 public class Each {
 	public static <T> Matcher<Iterable<T>> each(final Matcher<T> individual) {

File: src/org/junit/tests/assertion/AssertionTest.java
Patch:
@@ -1,12 +1,12 @@
 package org.junit.tests.assertion;
 
+import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
-import static org.hamcrest.CoreMatchers.equalTo;
 
 import java.math.BigDecimal;
 

File: src/org/junit/tests/description/AnnotatedDescriptionTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.junit.tests.description;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 import java.lang.annotation.Annotation;
 import java.lang.annotation.Retention;

File: src/org/junit/tests/experimental/AssumptionTest.java
Patch:
@@ -1,15 +1,15 @@
 package org.junit.tests.experimental;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.fail;
 import static org.junit.Assume.assumeNoException;
 import static org.junit.Assume.assumeNotNull;
 import static org.junit.Assume.assumeThat;
 import static org.junit.Assume.assumeTrue;
 import static org.junit.experimental.results.PrintableResult.testResult;
 import static org.junit.experimental.results.ResultMatchers.isSuccessful;
 import static org.junit.matchers.StringContains.containsString;
-
 import org.junit.Assume;
 import org.junit.Before;
 import org.junit.BeforeClass;

File: src/org/junit/tests/experimental/AssumptionViolatedExceptionTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.junit.tests.experimental;
 
-import static org.junit.matchers.StringContains.containsString;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
+import static org.junit.matchers.StringContains.containsString;
 import org.hamcrest.Matcher;
 import org.hamcrest.StringDescription;
 import org.junit.Test;

File: src/org/junit/tests/experimental/ExperimentalTests.java
Patch:
@@ -8,9 +8,9 @@
 import org.junit.tests.experimental.theories.ParameterSignatureTest;
 import org.junit.tests.experimental.theories.ParameterizedAssertionErrorTest;
 import org.junit.tests.experimental.theories.extendingwithstubs.StubbedTheoriesTest;
-import org.junit.tests.experimental.theories.runner.WithDataPointMethod;
-import org.junit.tests.experimental.theories.runner.WithDataPointFields;
 import org.junit.tests.experimental.theories.runner.WhenNoParametersMatch;
+import org.junit.tests.experimental.theories.runner.WithDataPointFields;
+import org.junit.tests.experimental.theories.runner.WithDataPointMethod;
 import org.junit.tests.experimental.theories.runner.WithExtendedParameterSources;
 
 @RunWith(Suite.class)

File: src/org/junit/tests/experimental/theories/ParameterizedAssertionErrorTest.java
Patch:
@@ -1,10 +1,10 @@
 package org.junit.tests.experimental.theories;
 
-import static org.junit.matchers.StringContains.containsString;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assume.assumeThat;
+import static org.junit.matchers.StringContains.containsString;
 import org.junit.experimental.theories.Theories;
 import org.junit.experimental.theories.Theory;
 import org.junit.experimental.theories.internal.ParameterizedAssertionError;

File: src/org/junit/tests/manipulation/SingleMethodTest.java
Patch:
@@ -7,7 +7,6 @@
 import java.util.Collection;
 
 import junit.framework.JUnit4TestAdapter;
-
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.runner.Description;

File: src/org/junit/tests/manipulation/SortableTest.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.Comparator;
 
 import junit.framework.JUnit4TestAdapter;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.Description;

File: src/org/junit/tests/running/methods/TestMethodTest.java
Patch:
@@ -4,6 +4,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
@@ -16,7 +17,6 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.internal.runners.JUnit4ClassRunner;
-import org.junit.internal.runners.model.ErrorList;
 import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestClass;
 import org.junit.runner.JUnitCore;
@@ -123,7 +123,7 @@ public static class Confused {
 	
 	@Test public void overloaded() {
 		TestClass testClass= new TestClass(Confused.class);
-		ErrorList errors= new ErrorList();
+		List<Throwable> errors= new ArrayList<Throwable>();
 		testClass.validateMethodsForDefaultRunner(errors);
 		assertFalse(errors.isEmpty());
 	}

File: src/org/junit/experimental/theories/ParameterSupplier.java
Patch:
@@ -4,6 +4,5 @@
 
 
 public abstract class ParameterSupplier {
-	public abstract List<PotentialAssignment> getValueSources(Object test,
-			ParameterSignature sig);
+	public abstract List<PotentialAssignment> getValueSources(ParameterSignature sig);
 }

File: src/org/junit/experimental/theories/suppliers/TestedOnSupplier.java
Patch:
@@ -10,7 +10,7 @@
 
 
 public class TestedOnSupplier extends ParameterSupplier {
-	@Override public List<PotentialAssignment> getValueSources(Object test, ParameterSignature sig) {
+	@Override public List<PotentialAssignment> getValueSources(ParameterSignature sig) {
 		List<PotentialAssignment> list = new ArrayList<PotentialAssignment>();
 		TestedOn testedOn = sig.getAnnotation(TestedOn.class);
 		int[] ints = testedOn.ints();

File: src/org/junit/internal/runners/model/ErrorList.java
Patch:
@@ -10,6 +10,7 @@ public class ErrorList {
 	// TODO this appears to be the only shared method, otherwise we could just go back to using a Collection
 	// if we want sharing, we could put this method in Runner, which all current callers (JUnit4ClassRunner, Parameterized, and Suite) 
 	// all inherit from
+	// [saff] I'm fine with that--I've tried it a couple times, and haven't managed it right.
 	public void assertEmpty() throws InitializationError {
 		if (!fErrors.isEmpty())
 			throw new InitializationError(fErrors);

File: src/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
Patch:
@@ -8,6 +8,7 @@
 import org.junit.experimental.theories.ParameterSignature;
 import org.junit.experimental.theories.Theories;
 import org.junit.experimental.theories.internal.Assignments;
+import org.junit.internal.runners.model.EachTestNotifier;
 import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestMethod;
 
@@ -36,13 +37,13 @@ protected void handleAssumptionViolation(AssumptionViolatedException e) {
 		}
 
 		@Override
-		protected void runWithIncompleteAssignment(Assignments incomplete)
+		protected void runWithIncompleteAssignment(Assignments incomplete, EachTestNotifier notifier)
 				throws InstantiationException, IllegalAccessException,
 				Throwable {
 			GuesserQueue guessers= createGuesserQueue(incomplete);
 			queues.add(guessers);
 			while (!guessers.isEmpty())
-				runWithAssignment(incomplete.assignNext(guessers.remove(0)));
+				runWithAssignment(incomplete.assignNext(guessers.remove(0)), notifier);
 			queues.remove(guessers);
 		}
 

File: src/org/junit/experimental/theories/Theories.java
Patch:
@@ -12,11 +12,12 @@
 import org.junit.experimental.theories.PotentialAssignment.CouldNotGenerateValueException;
 import org.junit.experimental.theories.internal.Assignments;
 import org.junit.experimental.theories.internal.ParameterizedAssertionError;
-import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
 import org.junit.internal.runners.links.WithBeforeAndAfter;
 import org.junit.internal.runners.links.Link;
 import org.junit.internal.runners.model.EachTestNotifier;
+import org.junit.internal.runners.model.ErrorList;
+import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestMethod;
 
 @SuppressWarnings("restriction")
@@ -26,7 +27,7 @@ public Theories(Class<?> klass) throws InitializationError {
 	}
 
 	@Override
-	protected void collectInitializationErrors(List<Throwable> errors) {
+	protected void collectInitializationErrors(ErrorList errors) {
 	}
 
 	@Override

File: src/org/junit/internal/requests/ClassRequest.java
Patch:
@@ -1,10 +1,10 @@
 package org.junit.internal.requests;
 
 import org.junit.Ignore;
-import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit38ClassRunner;
 import org.junit.internal.runners.JUnit4ClassRunner;
 import org.junit.internal.runners.SuiteMethod;
+import org.junit.internal.runners.model.InitializationError;
 import org.junit.runner.Request;
 import org.junit.runner.RunWith;
 import org.junit.runner.Runner;

File: src/org/junit/internal/requests/ErrorReportingRequest.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.junit.internal.runners.CompositeRunner;
 import org.junit.internal.runners.ErrorReportingRunner;
-import org.junit.internal.runners.InitializationError;
+import org.junit.internal.runners.model.InitializationError;
 import org.junit.runner.Description;
 import org.junit.runner.Request;
 import org.junit.runner.Runner;

File: src/org/junit/internal/runners/model/InitializationError.java
Patch:
@@ -1,4 +1,4 @@
-package org.junit.internal.runners;
+package org.junit.internal.runners.model;
 
 import java.util.Arrays;
 import java.util.List;

File: src/org/junit/internal/runners/model/TestMethod.java
Patch:
@@ -77,7 +77,7 @@ public Class<?>[] getParameterTypes() {
 		return fMethod.getParameterTypes();
 	}
 
-	public void validate(boolean isStatic, List<Throwable> errors) {
+	public void validate(boolean isStatic, ErrorList errors) {
 		if (Modifier.isStatic(fMethod.getModifiers()) != isStatic) {
 			String state= isStatic ? "should" : "should not";
 			errors.add(new Exception("Method " + fMethod.getName() + "() "

File: src/org/junit/runners/Enclosed.java
Patch:
@@ -1,6 +1,6 @@
 package org.junit.runners;
 
-import org.junit.internal.runners.InitializationError;
+import org.junit.internal.runners.model.InitializationError;
 
 public class Enclosed extends Suite {
 	public Enclosed(Class<?> klass) throws InitializationError {

File: src/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.experimental.theories.ParameterSignature;
 import org.junit.experimental.theories.Theories;
 import org.junit.experimental.theories.internal.Assignments;
-import org.junit.internal.runners.InitializationError;
+import org.junit.internal.runners.model.InitializationError;
 import org.junit.internal.runners.model.TestMethod;
 
 public class StubbedTheories extends Theories {

File: src/org/junit/tests/running/methods/ParameterizedTestMethodTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
+import org.junit.internal.runners.model.InitializationError;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;

File: src/org/junit/internal/runners/model/TestMethod.java
Patch:
@@ -73,8 +73,6 @@ public String getName() {
 	}
 
 	public Class<?>[] getParameterTypes() {
-		// TODO: (Oct 8, 2007 10:31:33 AM) push out
-	
 		return fMethod.getParameterTypes();
 	}
 

File: src/org/junit/internal/runners/JUnit4ClassRunner.java
Patch:
@@ -77,7 +77,7 @@ protected void invokeTestMethod(Method method, RunNotifier notifier) {
 		Object test;
 		try {
 			test= createTest();
-		} catch (InvocationTargetException e) {
+		} catch (InvocationTargetException e) { //TODO looks like this could use ExplosiveMethod
 			notifier.testAborted(description, e.getCause());
 			return;			
 		} catch (Exception e) {

File: src/org/junit/tests/running/methods/AnnotationTest.java
Patch:
@@ -124,8 +124,9 @@ public void testTestAndTeardownFailure() throws Exception {
 		Result runner= core.run(TestAndTeardownFailureTest.class);
 		assertEquals(1, runner.getRunCount());
 		assertEquals(2, runner.getFailureCount());
-		assertEquals(Exception.class, runner.getFailures().get(0).getException().getClass());
-		assertEquals(Error.class, runner.getFailures().get(1).getException().getClass());
+		// TODO is order important?
+		assertEquals(Exception.class, runner.getFailures().get(1).getException().getClass());
+		assertEquals(Error.class, runner.getFailures().get(0).getException().getClass());
 	}
 	
 	static public class TeardownAfterFailureTest {

File: src/org/junit/internal/runners/TestMethod.java
Patch:
@@ -56,12 +56,12 @@ boolean expectsException() {
 	}
 
 	@Override
-	protected List<Method> getBefores() {
+	public List<Method> getBefores() {
 		return fTestClass.getAnnotatedMethods(Before.class);
 	}
 
 	@Override
-	protected List<Method> getAfters() {
+	public List<Method> getAfters() {
 		return fTestClass.getAnnotatedMethods(After.class);
 	}
 

File: src/org/junit/tests/listening/TextListenerTest.java
Patch:
@@ -41,7 +41,7 @@ public static class ErrorTest {
 	public void testError() throws Exception {
 		runner.run(ErrorTest.class);
 		assertTrue(results.toString().startsWith(convert(".E\nTime: ")));
-		assertTrue(results.toString().indexOf(convert("\nThere was 1 failure:\n1) error(org.junit.tests.TextListenerTest$ErrorTest)\njava.lang.Exception")) != -1);
+		assertTrue(results.toString().indexOf(convert("\nThere was 1 failure:\n1) error(org.junit.tests.listening.TextListenerTest$ErrorTest)\njava.lang.Exception")) != -1);
 	}
 	
 	public static class Slow {

File: src/org/junit/tests/running/core/CommandLineTest.java
Patch:
@@ -34,7 +34,7 @@ static public class Example {
 
 	@Test public void runATest() {
 		testWasRun= false;
-		new JUnitCore().runMain(new String[]{"org.junit.tests.CommandLineTest$Example"});
+		new JUnitCore().runMain(new String[]{"org.junit.tests.running.core.CommandLineTest$Example"});
 		assertTrue(testWasRun);
 	}
 	

File: src/org/junit/tests/running/core/JUnitCoreTest.java
Patch:
@@ -31,7 +31,7 @@ static public class Succeed {
 	}
 	
 	@Test public void successCausesExitCodeOf0() throws Exception {
-		runClass("org.junit.tests.JUnitCoreTest$Succeed", 0);
+		runClass("org.junit.tests.running.core.JUnitCoreTest$Succeed", 0);
 	}
 
 	private void runClass(String className, int returnCode) throws IOException, InterruptedException {

File: src/org/junit/experimental/test/ExperimentalTests.java
Patch:
@@ -3,6 +3,7 @@
 import org.junit.experimental.test.results.PrintableResultTest;
 import org.junit.experimental.test.results.ResultMatchersTest;
 import org.junit.experimental.test.theories.DataPointMethodTest;
+import org.junit.experimental.test.theories.ParameterSignatureTest;
 import org.junit.experimental.test.theories.ParameterizedAssertionErrorTest;
 import org.junit.experimental.test.theories.TheoriesTest;
 import org.junit.runner.RunWith;
@@ -12,7 +13,7 @@
 @RunWith(Suite.class)
 @SuiteClasses( { ParameterizedAssertionErrorTest.class,
 		TheoriesTest.class, PrintableResultTest.class,
-		ResultMatchersTest.class, DataPointMethodTest.class })
+		ResultMatchersTest.class, DataPointMethodTest.class, ParameterSignatureTest.class })
 public class ExperimentalTests {
 
 }

File: src/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.4-snapshot-20070629-0646";
+		return "4.4-snapshot-20070709-1651";
 	}
 	
 	public static void main(String[] args) {

File: src/org/junit/runners/Parameterized.java
Patch:
@@ -156,5 +156,3 @@ public static Collection<Object[]> eachOne(Object... params) {
 	}
 }
 
-// TODO: (Before June 2007) single-class this extension
-

File: src/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.4-snapshot-20070322-1027";
+		return "4.4-snapshot-20070629-0646";
 	}
 	
 	public static void main(String[] args) {

File: src/org/junit/internal/requests/ClassRequest.java
Patch:
@@ -57,7 +57,7 @@ Class<? extends Runner> getRunnerClass(final Class<?> testClass) {
 	}
 	
 	public boolean hasSuiteMethod() {
-		// TODO: check all attributes
+		// TODO: (Before June 2007) check all attributes
 		try {
 			fTestClass.getMethod("suite");
 		} catch (NoSuchMethodException e) {

File: src/org/junit/runner/Request.java
Patch:
@@ -86,7 +86,6 @@ public Request filterWith(final Description desiredDescription) {
 		return filterWith(new Filter() {
 			@Override
 			public boolean shouldRun(Description description) {
-				// TODO: test for equality even if we have children?
 				if (description.isTest())
 					return desiredDescription.equals(description);
 				for (Description each : description.getChildren())

File: src/org/junit/runner/notification/RunListener.java
Patch:
@@ -75,7 +75,6 @@ public void testFailure(Failure failure) throws Exception {
 	 */
 	public void testIgnored(Description description) throws Exception {
 	}
-
 }
 
 

File: src/org/junit/runners/Parameterized.java
Patch:
@@ -156,5 +156,5 @@ public static Collection<Object[]> eachOne(Object... params) {
 	}
 }
 
-// TODO: single-class this extension
+// TODO: (Before June 2007) single-class this extension
 

File: src/org/junit/tests/AllTests.java
Patch:
@@ -11,10 +11,10 @@
 
 @RunWith(Suite.class)
 @SuiteClasses({
+	AssumptionTest.class,
 	ClassRequestTest.class,
 	ListenerTest.class,
 	FailedConstructionTest.class,
-	// TODO: What did CVS do with this?  CustomRunnerTest.class,
 	TestDescriptionTest.class,
 	SuiteDescriptionTest.class,
 	AllTestsTest.class,

File: src/junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.3";
+		return "4.4-snapshot-20070322-1027";
 	}
 	
 	public static void main(String[] args) {

File: src/org/junit/Assert.java
Patch:
@@ -455,8 +455,8 @@ static String format(String message, Object expected, Object actual) {
 		String formatted= "";
 		if (message != null && ! message.equals(""))
 			formatted= message + " ";
-		String expectedString= expected.toString();
-		String actualString= actual.toString();
+		String expectedString= String.valueOf(expected);
+		String actualString= String.valueOf(actual);
 		if (expectedString.equals(actualString))
 			return formatted + "expected: " + expected.getClass().getName() + "<" + expectedString + "> but was: " + actual.getClass().getName() + "<" + actualString + ">";
 		else

File: src/org/junit/tests/AllTests.java
Patch:
@@ -46,7 +46,8 @@
 	SuiteMethodTest.class,
 	TestClassMethodsRunnerTest.class,
 	IgnoreClassTest.class,
-	OldTestClassAdaptingListenerTest.class
+	OldTestClassAdaptingListenerTest.class,
+	AnnotatedDescriptionTest.class
 })
 public class AllTests {
 	public static Test suite() {

File: src/org/junit/internal/runners/TestClass.java
Patch:
@@ -23,11 +23,11 @@ List<Method> getTestMethods() {
 		return getAnnotatedMethods(Test.class);
 	}
 
-	public List<Method> getBefores() {
+	List<Method> getBefores() {
 		return getAnnotatedMethods(BeforeClass.class);
 	}
 
-	public List<Method> getAfters() {
+	List<Method> getAfters() {
 		return getAnnotatedMethods(AfterClass.class);
 	}
 	

File: src/org/junit/runners/package-info.java
Patch:
@@ -3,6 +3,6 @@
  *
  * @since 4.0
  * @see org.junit.runner.Runner
- * @see org.junit.internal.runners.TryToDoEverythingRunner
+ * @see org.junit.internal.runners.JUnit4ClassRunner
  */
 package org.junit.runners;
\ No newline at end of file

File: src/org/junit/Before.java
Patch:
@@ -15,7 +15,7 @@
  * <pre>
  * public class Example {
  *    List empty;
- *    &#064;Before public static void initialize() {
+ *    &#064;Before public void initialize() {
  *       empty= new ArrayList();
  *    }
  *    &#064;Test public void size() {

File: src/org/junit/internal/requests/ClassRequest.java
Patch:
@@ -60,9 +60,6 @@ public boolean hasSuiteMethod() {
 		// TODO: check all attributes
 		try {
 			fTestClass.getMethod("suite");
-		} catch (SecurityException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
 		} catch (NoSuchMethodException e) {
 			return false;
 		}

File: src/org/junit/runner/manipulation/Sorter.java
Patch:
@@ -5,10 +5,11 @@
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
 
-//TODO add an example
 /**
  * A <code>Sorter</code> orders tests. In general you will not need
  * to use a <code>Sorter</code> directly. Instead, use {@link org.junit.runner.Request#sortWith(Comparator)}.
+ * 
+ * 
  */
 public class Sorter implements Comparator<Description> {
 	private final Comparator<Description> fComparator;

File: src/org/junit/runners/Suite.java
Patch:
@@ -16,7 +16,7 @@
  * Using <code>Suite</code> as a runner allows you to manually
  * build a suite containing tests from many classes. It is the JUnit 4 equivalent of the JUnit 3.8.x
  * static {@link junit.framework.Test} <code>suite()</code> method. To use it, annotate a class
- * with <code>@RunWith(Suite.class)</code> and <code>SuiteClasses(TestClass1.class, ...)</code>.
+ * with <code>@RunWith(Suite.class)</code> and <code>@SuiteClasses(TestClass1.class, ...)</code>.
  * When you run this class, it will run all the tests in all the suite classes.
  */
 public class Suite extends TestClassRunner {

File: src/org/junit/tests/AllTests.java
Patch:
@@ -6,7 +6,8 @@
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
 
-// TODO (Feb 21, 2007 10:05:41 AM):  organize these tests
+// These test files need to be cleaned.  See
+// https://sourceforge.net/pm/task.php?func=detailtask&project_task_id=136507&group_id=15278&group_project_id=51407
 
 @RunWith(Suite.class)
 @SuiteClasses({

File: src/org/junit/internal/runners/MethodValidator.java
Patch:
@@ -35,8 +35,7 @@ public void validateStaticMethods() {
 		validateTestMethods(AfterClass.class, true);
 	}
 	
-	// TODO Ugly API--one method should do both
-	public List<Throwable> validateAllMethods() {
+	public List<Throwable> validateMethodsForDefaultRunner() {
 		validateNoArgConstructor();
 		validateStaticMethods();
 		validateInstanceMethods();

File: src/org/junit/internal/runners/TestClassRunner.java
Patch:
@@ -30,7 +30,7 @@ public TestClassRunner(Class<?> klass, Runner runner) throws InitializationError
 
 	// TODO: this is parallel to passed-in runner
 	protected void validate(MethodValidator methodValidator) {
-		methodValidator.validateAllMethods();
+		methodValidator.validateMethodsForDefaultRunner();
 	}
 
 	@Override

File: src/org/junit/tests/InaccessibleBaseClassTest.java
Patch:
@@ -9,7 +9,7 @@ public class InaccessibleBaseClassTest {
 	@Test(expected=InitializationError.class)
 	public void inaccessibleBaseClassIsCaughtAtValidation() throws InitializationError {
 		MethodValidator methodValidator= new MethodValidator(Sub.class);
-		methodValidator.validateAllMethods();
+		methodValidator.validateMethodsForDefaultRunner();
 		methodValidator.assertValid();
 	}
 }

File: src/org/junit/tests/TestMethodTest.java
Patch:
@@ -121,7 +121,7 @@ public static class Confused {
 	
 	@Test public void overloaded() {
 		MethodValidator validator= new MethodValidator(Confused.class);
-		List<Throwable> errors= validator.validateAllMethods();
+		List<Throwable> errors= validator.validateMethodsForDefaultRunner();
 		assertEquals(1, errors.size());
 	}
 	

File: src/org/junit/internal/runners/OldTestClassRunner.java
Patch:
@@ -11,8 +11,8 @@
 import junit.framework.TestSuite;
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
-import org.junit.runner.notification.RunNotifier;
 import org.junit.runner.notification.Failure;
+import org.junit.runner.notification.RunNotifier;
 
 public class OldTestClassRunner extends Runner {
 	

File: src/org/junit/tests/IgnoreClassTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.junit.tests;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.JUnitCore;

File: src/junit/extensions/RepeatedTest.java
Patch:
@@ -13,7 +13,7 @@ public class RepeatedTest extends TestDecorator {
 	public RepeatedTest(Test test, int repeat) {
 		super(test);
 		if (repeat < 0)
-			throw new IllegalArgumentException("Repetition count must be > 0");
+			throw new IllegalArgumentException("Repetition count must be >= 0");
 		fTimesRepeat= repeat;
 	}
 

File: src/junit/framework/JUnit4TestAdapterCache.java
Patch:
@@ -9,9 +9,9 @@
 import java.util.List;
 
 import org.junit.runner.Description;
+import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunListener;
 import org.junit.runner.notification.RunNotifier;
-import org.junit.runner.notification.Failure;
 
 public class JUnit4TestAdapterCache extends HashMap<Description, Test> {
 	private static final long serialVersionUID = 1L;

File: src/junit/tests/extensions/RepeatedTestTest.java
Patch:
@@ -55,6 +55,7 @@ public void testRepeatedNegative() {
  		try {
 			new RepeatedTest(fSuite, -1);
  		} catch (IllegalArgumentException e) {
+ 			assertTrue(e.getMessage().contains(">="));
  			return;
  		}
  		fail("Should throw an IllegalArgumentException");

File: src/junit/textui/ResultPrinter.java
Patch:
@@ -4,6 +4,7 @@
 import java.io.PrintStream;
 import java.text.NumberFormat;
 import java.util.Enumeration;
+
 import junit.framework.AssertionFailedError;
 import junit.framework.Test;
 import junit.framework.TestFailure;

File: src/org/junit/internal/runners/ErrorReportingRunner.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
-import org.junit.runner.notification.RunNotifier;
 import org.junit.runner.notification.Failure;
+import org.junit.runner.notification.RunNotifier;
 
 public class ErrorReportingRunner extends Runner {
 	private final Description fDescription;

File: src/org/junit/internal/runners/TestClassRunner.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.runner.manipulation.NoTestsRemainException;
 import org.junit.runner.manipulation.Sortable;
 import org.junit.runner.manipulation.Sorter;
-import org.junit.runner.notification.RunNotifier;
 import org.junit.runner.notification.Failure;
+import org.junit.runner.notification.RunNotifier;
 
 public class TestClassRunner extends Runner implements Filterable, Sortable {
 	protected final Runner fEnclosedRunner;

File: src/org/junit/internal/runners/TestMethodRunner.java
Patch:
@@ -12,8 +12,8 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.runner.Description;
-import org.junit.runner.notification.RunNotifier;
 import org.junit.runner.notification.Failure;
+import org.junit.runner.notification.RunNotifier;
 
 public class TestMethodRunner extends BeforeAndAfterRunner {
 	private final Object fTest;

File: src/org/junit/tests/AllTests.java
Patch:
@@ -39,6 +39,7 @@
 	OldTestClassRunnerTest.class,
 	JUnitCoreTest.class,
 	InaccessibleBaseClassTest.class,
+//	SuiteMethodTest.class,
 	TestClassMethodsRunnerTest.class
 })
 public class AllTests {	

File: src/org/junit/tests/CustomRunnerTest.java
Patch:
@@ -1,5 +1,7 @@
 package org.junit.tests;
 
+import static org.junit.Assert.assertEquals;
+
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -13,8 +15,6 @@
 import org.junit.runner.RunWith;
 import org.junit.runner.notification.RunNotifier;
 
-import static org.junit.Assert.*;
-
 // TODO: better factoring here
 public class CustomRunnerTest {
 	public static class CustomRunner extends TestClassRunner {

File: src/org/junit/tests/OldTestClassRunnerTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.junit.tests;
 
 import static org.junit.Assert.assertEquals;
-
 import junit.extensions.TestDecorator;
 import junit.framework.JUnit4TestAdapter;
 import junit.framework.TestCase;

File: src/org/junit/tests/TestDescriptionTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.junit.tests;
 
+import static org.junit.Assert.assertFalse;
 import org.junit.Test;
 import org.junit.runner.Description;
-import static org.junit.Assert.assertFalse;
 
 public class TestDescriptionTest {
 	@Test public void equalsIsFalseForNonTestDescription() {

File: src/org/junit/tests/TextListenerTest.java
Patch:
@@ -5,7 +5,6 @@
 import java.io.PrintStream;
 
 import junit.framework.TestCase;
-
 import org.junit.Test;
 import org.junit.internal.runners.TextListener;
 import org.junit.runner.JUnitCore;

File: src/org/junit/tests/TimeoutTest.java
Patch:
@@ -63,7 +63,7 @@ static public class TimeoutFailureTest {
 		}
 	}
 	
-	@Test public void timeoutFailure() throws Exception {
+	@Ignore("was breaking gump") @Test public void timeoutFailure() throws Exception {
 		JUnitCore core= new JUnitCore();
 		Result result= core.run(TimeoutFailureTest.class);
 		assertEquals(1, result.getRunCount());

File: src/org/junit/internal/runners/TestMethodRunner.java
Patch:
@@ -63,7 +63,7 @@ public Object call() throws Exception {
 					TimeUnit.MILLISECONDS);
 			if (!terminated)
 				service.shutdownNow();
-			result.get(timeout, TimeUnit.MILLISECONDS); // throws the exception if one occurred during the invocation
+			result.get(0, TimeUnit.MILLISECONDS); // throws the exception if one occurred during the invocation
 		} catch (TimeoutException e) {
 			addFailure(new Exception(String.format("test timed out after %d milliseconds", timeout)));
 		} catch (Exception e) {

File: junit/framework/JUnit4TestAdapter.java
Patch:
@@ -38,7 +38,7 @@ public List<Test> getTests() {
 	}
 
 	// reflective interface for Eclipse
-	public Class getTestClass() {
+	public Class<?> getTestClass() {
 		return fNewTestClass;
 	}
 	

File: junit/runner/BaseTestRunner.java
Patch:
@@ -205,9 +205,7 @@ public static String truncate(String s) {
 	 * Returns the loaded Class for a suite name.
 	 */
 	protected Class<? extends TestCase> loadSuiteClass(String suiteClassName) throws ClassNotFoundException {
-		@SuppressWarnings("unchecked") 
-		Class<? extends TestCase> testClass = (Class<? extends TestCase>) Class.forName(suiteClassName);
-		return testClass;
+		return Class.forName(suiteClassName).asSubclass(TestCase.class);
 	}
 
 	/**

File: junit/runner/Version.java
Patch:
@@ -9,7 +9,7 @@ private Version() {
 	}
 
 	public static String id() {
-		return "4.1";
+		return "4.2";
 	}
 	
 	public static void main(String[] args) {

File: org/junit/internal/requests/ClassesRequest.java
Patch:
@@ -5,10 +5,10 @@
 import org.junit.runner.Runner;
 
 public class ClassesRequest extends Request {
-	private final Class[] fClasses;
+	private final Class<?>[] fClasses;
 	private final String fName;
 	
-	public ClassesRequest(String name, Class... classes) {
+	public ClassesRequest(String name, Class<?>... classes) {
 		fClasses= classes;
 		fName= name;
 	}

File: org/junit/internal/runners/CompositeRunner.java
Patch:
@@ -51,8 +51,8 @@ public void add(Runner runner) {
 	}
 	
 	public void filter(Filter filter) throws NoTestsRemainException {
-		for (Iterator iter= fRunners.iterator(); iter.hasNext();) {
-			Runner runner= (Runner) iter.next();
+		for (Iterator<Runner> iter= fRunners.iterator(); iter.hasNext();) {
+			Runner runner= iter.next();
 			if (filter.shouldRun(runner.getDescription())) {
 				filter.apply(runner);
 			} else {

File: org/junit/internal/runners/OldTestClassRunner.java
Patch:
@@ -20,7 +20,7 @@ public class OldTestClassRunner extends Runner {
 	
 	@SuppressWarnings("unchecked")
 	public OldTestClassRunner(Class<?> klass) {
-		this(new TestSuite((Class<? extends TestCase>) klass));
+		this(new TestSuite(klass.asSubclass(TestCase.class)));
 	}
 
 	public OldTestClassRunner(Test test) {

File: org/junit/internal/runners/TestClassMethodsRunner.java
Patch:
@@ -88,8 +88,8 @@ protected Description methodDescription(Method method) {
 	}
 
 	public void filter(Filter filter) throws NoTestsRemainException {
-		for (Iterator iter= fTestMethods.iterator(); iter.hasNext();) {
-			Method method= (Method) iter.next();
+		for (Iterator<Method> iter= fTestMethods.iterator(); iter.hasNext();) {
+			Method method= iter.next();
 			if (!filter.shouldRun(methodDescription(method)))
 				iter.remove();
 		}

File: org/junit/internal/runners/TestIntrospector.java
Patch:
@@ -22,7 +22,7 @@ public TestIntrospector(Class<?> testClass) {
 
 	public List<Method> getTestMethods(Class<? extends Annotation> annotationClass) {
 		List<Method> results= new ArrayList<Method>();
-		for (Class eachClass : getSuperClasses(fTestClass)) {
+		for (Class<?> eachClass : getSuperClasses(fTestClass)) {
 			Method[] methods= eachClass.getDeclaredMethods();
 			for (Method eachMethod : methods) {
 				Annotation annotation= eachMethod.getAnnotation(annotationClass);
@@ -63,8 +63,8 @@ private boolean isShadowed(Method current, Method previous) {
 		return true;
 	}
 
-	private List<Class> getSuperClasses(Class< ?> testClass) {
-		ArrayList<Class> results= new ArrayList<Class>();
+	private List<Class<?>> getSuperClasses(Class< ?> testClass) {
+		ArrayList<Class<?>> results= new ArrayList<Class<?>>();
 		Class<?> current= testClass;
 		while (current != null) {
 			results.add(current);

File: org/junit/runner/Description.java
Patch:
@@ -38,7 +38,7 @@ public static Description createSuiteDescription(String name) {
 	 * @param name the name of the test (a method name for test annotated with {@link org.junit.Test})
 	 * @return a <code>Description</code> named <code>name</code>
 	 */
-	public static Description createTestDescription(Class clazz, String name) {
+	public static Description createTestDescription(Class<?> clazz, String name) {
 		return new Description(String.format("%s(%s)", name, clazz.getName()));
 	}
 	

File: org/junit/runner/Request.java
Patch:
@@ -52,7 +52,7 @@ public static Request aClass(Class<?> clazz) {
 	 * @param classes the classes containing the tests
 	 * @return a <code>Request</code> that will cause all tests in the classes to be run
 	 */
-	public static Request classes(String collectionName, Class... classes) {
+	public static Request classes(String collectionName, Class<?>... classes) {
 		return new ClassesRequest(collectionName, classes);
 	}
 

File: org/junit/runner/notification/RunListener.java
Patch:
@@ -70,7 +70,7 @@ public void testFailure(Failure failure) throws Exception {
 
 	/**
 	 * Called when a test will not be run, generally because a test method is annotated 
-	 * with {@link org.junit.tests.TestMethodTest.IgnoredTest}.
+	 * with {@link org.junit.Ignore}.
 	 * @param description describes the test that will not be run
 	 */
 	public void testIgnored(Description description) throws Exception {

File: org/junit/tests/TimeoutTest.java
Patch:
@@ -59,7 +59,7 @@ static public class SuccessWithTimeoutTest {
 
 	static public class TimeoutFailureTest {
 		@Test(timeout= 100) public void success() throws InterruptedException {			
-			Thread.sleep(200);
+			Thread.sleep(40000);
 		}
 	}
 	

File: org/junit/internal/requests/ClassRequest.java
Patch:
@@ -23,9 +23,11 @@ public Runner getRunner() {
 			Runner runner= (Runner) constructor
 					.newInstance(new Object[] { fTestClass });
 			return runner;
+		} catch (StackOverflowError e) {
+			throw new RuntimeException();
 		} catch (Exception e) {
 			return Request.errorReport(fTestClass, e).getRunner();
-		}
+		} 
 	}
 
 	Class getRunnerClass(Class<?> testClass) {

File: org/junit/tests/JUnitCoreTest.java
Patch:
@@ -37,7 +37,7 @@ static public class Succeed {
 
 	private void runClass(String className, int returnCode) throws IOException, InterruptedException {
 		String java= System.getProperty("java.home")+File.separator+"bin"+File.separator+"java";
-		String classPath= getClass().getClassLoader().getResource(".").getFile() + ";" + System.getProperty("java.class.path");
+		String classPath= getClass().getClassLoader().getResource(".").getFile() + File.pathSeparator + System.getProperty("java.class.path");
 		String [] cmd= { java, "-cp", classPath, "org.junit.runner.JUnitCore", className}; 
 		Process process= Runtime.getRuntime().exec(cmd);
 		InputStream input= process.getInputStream();

File: org/junit/tests/AllTests.java
Patch:
@@ -38,7 +38,8 @@
 	SortableTest.class,
 	OldTestClassRunnerTest.class,
 	JUnitCoreTest.class,
-	InaccessibleBaseClassTest.class
+	InaccessibleBaseClassTest.class,
+	TestClassMethodsRunnerTest.class
 })
 public class AllTests {	
 //	public static class Compatibility {

File: org/junit/Assert.java
Patch:
@@ -68,7 +68,7 @@ static public void assertFalse(boolean condition) {
 	 * @see AssertionError
 	 */
 	static public void fail(String message) {
-		throw new AssertionError(message);
+		throw new AssertionError(message == null ? "" : message);
 	}
 
 	/**

File: org/junit/Ignore.java
Patch:
@@ -6,7 +6,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Sometimes you want to temporarily disable a test. Methods annotated with <code>@Test</code>
+ * Sometimes you want to temporarily disable a test. Methods annotated with {@link org.junit.Test}
  * that are also annotated with <code>@Ignore</code> will not be executed as tests. Native JUnit 4 test runners
  * should report the number of ignored tests along with the number of tests that ran and the
  * number of tests that failed.

File: org/junit/tests/AllTests.java
Patch:
@@ -8,6 +8,7 @@
 
 @RunWith(Suite.class)
 @SuiteClasses({
+	ListenerTest.class,
 	FailedConstructionTest.class,
 	CustomRunnerTest.class,
 	TestDescriptionTest.class,

File: junit/textui/TestRunner.java
Patch:
@@ -179,7 +179,7 @@ else if (args[i].equals("-m")) {
 			throw new Exception("Usage: TestRunner [-wait] testCaseName, where name is the name of the TestCase class");
 
 		try {
-			if (method != null) 
+			if (!method.equals("")) 
 				return runSingleMethod(testCase, method, wait);
 			Test suite= getTest(testCase);
 			return doRun(suite, wait);

File: junit/runner/BaseTestRunner.java
Patch:
@@ -56,14 +56,15 @@ protected static Properties getPreferences() {
 	public static void savePreferences() throws IOException {
 		FileOutputStream fos= new FileOutputStream(getPreferencesFile());
 		try {
-			getPreferences().store(fos, "");
+			// calling of the deprecated save method to enable compiling under 1.1.7
+			getPreferences().save(fos, "");
 		} finally {
 			fos.close();
 		}
 	}
 
 	public static void setPreference(String key, String value) {
-		getPreferences().setProperty(key, value);
+		getPreferences().put(key, value);
 	}
 
 	public synchronized void endTest(Test test) {

File: junit/swingui/DefaultFailureDetailView.java
Patch:
@@ -48,7 +48,7 @@ private void scan(String trace) {
 			fLines.removeAllElements();
      		StringTokenizer st= new StringTokenizer(trace, "\n\r", false);
 	    	while (st.hasMoreTokens()) 
- 				fLines.add(st.nextToken());
+ 				fLines.addElement(st.nextToken());
 		}
 	}
 	

File: junit/extensions/ActiveTestSuite.java
Patch:
@@ -1,6 +1,8 @@
 package junit.extensions;
 
-import junit.framework.*;
+import junit.framework.Test;
+import junit.framework.TestResult;
+import junit.framework.TestSuite;
 
 /**
  * A TestSuite for active Tests. It runs each

File: junit/extensions/ExceptionTestCase.java
Patch:
@@ -1,6 +1,6 @@
 package junit.extensions;
 
-import junit.framework.*;
+import junit.framework.TestCase;
 
 /**
  * A TestCase that expects an Exception of class fExpected to be thrown.

File: junit/extensions/RepeatedTest.java
Patch:
@@ -1,6 +1,7 @@
 package junit.extensions;
 
-import junit.framework.*;
+import junit.framework.Test;
+import junit.framework.TestResult;
 
 /**
  * A Decorator that runs a test repeatedly.

File: junit/extensions/TestDecorator.java
Patch:
@@ -1,6 +1,8 @@
 package junit.extensions;
 
-import junit.framework.*;
+import junit.framework.Assert;
+import junit.framework.Test;
+import junit.framework.TestResult;
 
 /**
  * A Decorator for Tests. Use TestDecorator as the base class

File: junit/extensions/TestSetup.java
Patch:
@@ -1,6 +1,8 @@
 package junit.extensions;
 
-import junit.framework.*;
+import junit.framework.Protectable;
+import junit.framework.Test;
+import junit.framework.TestResult;
 
 /**
  * A Decorator to set up and tear down additional fixture state.

File: junit/framework/TestCase.java
Patch:
@@ -1,6 +1,8 @@
 package junit.framework;
 
-import java.lang.reflect.*;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 
 /**
  * A test case defines the fixture to run multiple tests. To define a test case<br>

File: junit/framework/TestResult.java
Patch:
@@ -1,7 +1,7 @@
 package junit.framework;
 
-import java.util.Vector;
 import java.util.Enumeration;
+import java.util.Vector;
 
 /**
  * A <code>TestResult</code> collects the results of executing

File: junit/runner/FailureDetailView.java
Patch:
@@ -1,8 +1,8 @@
 package junit.runner;
 
-import java.awt.Component; 
+import java.awt.Component;
 
-import junit.framework.*;
+import junit.framework.TestFailure;
 
 /**
  * A view to show a details about a failure

File: junit/runner/Sorter.java
Patch:
@@ -1,8 +1,6 @@
 package junit.runner;
 
-import java.util.*;
-
-import junit.runner.*;
+import java.util.Vector;
 
 /**
  * A custom quick sort with support to customize the swap behaviour.

File: junit/runner/TestCollector.java
Patch:
@@ -1,6 +1,6 @@
 package junit.runner;
 
-import java.util.*;
+import java.util.Enumeration;
 
 
 /**

File: junit/samples/AllTests.java
Patch:
@@ -1,6 +1,7 @@
 package junit.samples;
 
-import junit.framework.*;
+import junit.framework.Test;
+import junit.framework.TestSuite;
 
 /**
  * TestSuite that runs all the sample tests

File: junit/samples/money/MoneyBag.java
Patch:
@@ -1,6 +1,7 @@
 package junit.samples.money;
 
-import java.util.*;
+import java.util.Enumeration;
+import java.util.Vector;
 
 /**
  * A MoneyBag defers exchange rate conversions. For example adding 

File: junit/samples/money/MoneyTest.java
Patch:
@@ -1,6 +1,6 @@
 package junit.samples.money;
 
-import junit.framework.*;
+import junit.framework.TestCase;
 
 public class MoneyTest extends TestCase {
 	private Money f12CHF;

File: junit/swingui/TestRunView.java
Patch:
@@ -1,7 +1,9 @@
 package junit.swingui;
 
 import javax.swing.JTabbedPane;
-import junit.framework.*;
+
+import junit.framework.Test;
+import junit.framework.TestResult;
 
 /**
  * A TestRunView is shown as a page in a tabbed folder.

File: junit/tests/AllTests.java
Patch:
@@ -1,6 +1,7 @@
 package junit.tests;
 
-import junit.framework.*;
+import junit.framework.Test;
+import junit.framework.TestSuite;
 
 /**
  * TestSuite that runs all the JUnit tests

File: junit/tests/WasRun.java
Patch:
@@ -1,6 +1,6 @@
 package junit.tests;
 
-import junit.framework.*;
+import junit.framework.TestCase;
 
 /**
  * A helper test case for testing whether the testing method

File: junit/tests/extensions/AllTests.java
Patch:
@@ -1,6 +1,7 @@
 package junit.tests.extensions;
 
-import junit.framework.*;
+import junit.framework.Test;
+import junit.framework.TestSuite;
 
 /**
  * TestSuite that runs all the extension tests

File: junit/tests/extensions/ExceptionTestCaseTest.java
Patch:
@@ -1,7 +1,7 @@
 package junit.tests.extensions;
 
-import junit.framework.*;
-import junit.extensions.*;
+import junit.extensions.ExceptionTestCase;
+import junit.framework.TestResult;
 
 public class ExceptionTestCaseTest extends junit.framework.TestCase {
 

File: junit/tests/framework/AllTests.java
Patch:
@@ -1,6 +1,7 @@
 package junit.tests.framework;
 
-import junit.framework.*;
+import junit.framework.Test;
+import junit.framework.TestSuite;
 
 /**
  * TestSuite that runs all the sample tests

File: junit/tests/framework/Failure.java
Patch:
@@ -1,6 +1,6 @@
 package junit.tests.framework;
 
-import junit.framework.*;
+import junit.framework.TestCase;
 
 /**
  * A test case testing the testing framework.

File: junit/tests/framework/Success.java
Patch:
@@ -1,6 +1,6 @@
 package junit.tests.framework;
 
-import junit.framework.*;
+import junit.framework.TestCase;
 
 /**
  * A test case testing the testing framework.

File: junit/tests/runner/AllTests.java
Patch:
@@ -1,6 +1,7 @@
 package junit.tests.runner;
 
-import junit.framework.*;
+import junit.framework.Test;
+import junit.framework.TestSuite;
 import junit.runner.BaseTestRunner;
 
 /**

File: junit/tests/runner/ClassLoaderTest.java
Patch:
@@ -3,7 +3,8 @@
 /**
  * Test class used in TestTestCaseClassLoader
  */
-import junit.framework.*;
+import junit.framework.Assert;
+import junit.framework.TestCase;
 
 public class ClassLoaderTest extends Assert {
 	public ClassLoaderTest() {

File: junit/tests/runner/LoadedFromJar.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Test class used in TestTestCaseClassLoader
  */
-import junit.framework.*;
+import junit.framework.Assert;
 
 public class LoadedFromJar extends Assert {
 	public void verify() {

File: junit/tests/runner/SorterTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.Vector;
 
-import junit.framework.*;
+import junit.framework.TestCase;
 import junit.runner.Sorter;
 
 public class SorterTest extends TestCase {

File: junit/tests/runner/TextRunnerTest.java
Patch:
@@ -31,8 +31,7 @@ void execTest(String testClass, boolean success) throws Exception {
 		String [] cmd= { java, "-classpath", cp, "junit.textui.TestRunner", testClass}; 
 		Process p= Runtime.getRuntime().exec(cmd);
 		InputStream i= p.getInputStream();
-		int b;
-		while((b= i.read()) != -1) 
+		while((i.read()) != -1) 
 			; //System.out.write(b); 
 		assertTrue((p.waitFor() == 0) == success);
 		if (success)

File: junit/framework/Assert.java
Patch:
@@ -146,7 +146,7 @@ static public void assertEquals(long expected, long actual) {
 	 * an AssertionFailedError is thrown with the given message.
 	 */
 	static public void assertEquals(String message, boolean expected, boolean actual) {
-    		assertEquals(message, new Boolean(expected), new Boolean(actual));
+    		assertEquals(message, Boolean.valueOf(expected), Boolean.valueOf(actual));
   	}
 	/**
 	 * Asserts that two booleans are equal.

File: junit/tests/runner/BaseTestRunnerTest.java
Patch:
@@ -7,7 +7,7 @@
 
 public class BaseTestRunnerTest extends TestCase {
 	
-	public class MockRunner extends BaseTestRunner {
+	public static class MockRunner extends BaseTestRunner {
 		protected void runFailed(String message) {
 		}
 

File: junit/framework/TestCase.java
Patch:
@@ -49,7 +49,7 @@
  * In this case the name of the test case has to correspond to the test method
  * to be run.
  * <pre>
- * TestCase test = new MathTest("testAdd");
+ * TestCase test= new MathTest("testAdd");
  * test.run();
  * </pre>
  * The tests to be run can be collected into a TestSuite. JUnit provides

File: junit/framework/TestCase.java
Patch:
@@ -49,7 +49,7 @@
  * In this case the name of the test case has to correspond to the test method
  * to be run.
  * <pre>
- * TestCase= new MathTest("testAdd");
+ * TestCase test = new MathTest("testAdd");
  * test.run();
  * </pre>
  * The tests to be run can be collected into a TestSuite. JUnit provides
@@ -194,4 +194,4 @@ public String getName() {
 	public void setName(String name) {
 		fName= name;
 	}
-}
\ No newline at end of file
+}

File: junit/tests/framework/AssertTest.java
Patch:
@@ -178,7 +178,7 @@ public void testAssertNotSameFailsNull() {
 
 	public void testComparisonErrorMessage() {
 		ComparisonFailure failure= new ComparisonFailure("a", "b", "c");
-		assertEquals("a: expected:<b> but was:<c>", failure.getMessage());
+		assertEquals("a expected:<b> but was:<c>", failure.getMessage());
 	}
 
 	public void testComparisonErrorStartSame() {

File: junit/framework/ComparisonFailure.java
Patch:
@@ -23,7 +23,7 @@ public ComparisonFailure (String message, String expected, String actual) {
 	
 	/**
 	 * Returns ... in place of common prefix and ... in
-	 * place of common suffix.
+	 * place of common suffix between expected and actual.
 	 * 
 	 * @see java.lang.Throwable#getMessage()
 	 */

File: junit/tests/runner/TextFeedbackTest.java
Patch:
@@ -79,7 +79,7 @@ public void printFailures(TestResult result) {
 	
 	public void testError() {
 		String expected= expected(new String[]{".E", "Time: 0", "Errors here", "", "FAILURES!!!", "Tests run: 1,  Failures: 0,  Errors: 1", ""});
-		ResultPrinter printer= new ResultPrinter(new PrintStream(output)) {
+		ResultPrinter printer= new TestResultPrinter(new PrintStream(output)) {
 			public void printErrors(TestResult result) {
 				getWriter().println("Errors here");
 			}

File: junit/swingui/DefaultFailureDetailView.java
Patch:
@@ -10,8 +10,8 @@
 /**
  * A view that shows a stack trace of a failure
  */
-class DefaultFailureDetailView implements FailureDetailView {
-	JList fList; 
+public class DefaultFailureDetailView implements FailureDetailView {
+	JList fList;  
 	
 	/**
 	 * A ListModel representing the scanned failure stack trace.

File: junit/swingui/FailureRunView.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * A view presenting the test failures as a list.
  */
-class FailureRunView implements TestRunView {
+public class FailureRunView implements TestRunView {
 	JList fFailureList;
 	TestRunContext fRunContext;
 	

File: junit/swingui/TestHierarchyRunView.java
Patch:
@@ -12,7 +12,7 @@
  * The contents of a test suite is shown
  * as a tree.
  */
-class TestHierarchyRunView implements TestRunView {
+public class TestHierarchyRunView implements TestRunView {
 	TestSuitePanel fTreeBrowser;
 	TestRunContext fTestContext;
 	

File: junit/swingui/TestRunner.java
Patch:
@@ -437,7 +437,7 @@ private void addGrid(JPanel p, Component co, int x, int y, int w, int fill, doub
 		c.fill= fill;
 		if (fill == GridBagConstraints.BOTH || fill == GridBagConstraints.VERTICAL)
 			c.weighty= 1.0;
-		c.insets= new Insets(y == 0 ? GAP : 0, x == 0 ? GAP : 0, GAP, GAP);
+		c.insets= new Insets(y == 0 ? 10 : 0, x == 0 ? 10 : GAP, GAP, GAP); 
 		p.add(co, c);
 	}
 

File: junit/framework/TestCase.java
Patch:
@@ -29,11 +29,11 @@
  *
  * For each test implement a method which interacts
  * with the fixture. Verify the expected results with assertions specified
- * by calling <code>assert</code> with a boolean.
+ * by calling <code>assertTrue</code> with a boolean.
  * <pre>
  *    protected void testAdd() {
  *        double result= fValue1 + fValue2;
- *        assert(result == 5.0);
+ *        assertTrue(result == 5.0);
  *    }
  * </pre>
  * Once the methods are defined you can run them. The framework supports

File: junit/framework/TestCase.java
Patch:
@@ -41,8 +41,8 @@
  * In the static way you override the runTest method and define the method to
  * be invoked. A convenient way to do so is with an anonymous inner class.
  * <pre>
- * Test test= new MathTest("add") {
- *        public void runTest() {
+ * TestCase test= new MathTest("add") {
+ *        protected void runTest() {
  *            testAdd();
  *        }
  * };
@@ -53,7 +53,7 @@
  * In this case the name of the test case has to correspond to the test method
  * to be run.
  * <pre>
- * Test= new MathTest("testAdd");
+ * TestCase= new MathTest("testAdd");
  * test.run();
  * </pre>
  * The tests to be run can be collected into a TestSuite. JUnit provides

File: junit/awtui/TestRunner.java
Patch:
@@ -276,7 +276,7 @@ public void actionPerformed(ActionEvent e) {
 		
 		addGrid(panel, fSuiteField, 	 0, 1, 2, GridBagConstraints.HORIZONTAL, 	1.0, GridBagConstraints.WEST);
 		addGrid(panel, fRun, 			 2, 1, 1, GridBagConstraints.HORIZONTAL, 	0.0, GridBagConstraints.CENTER);
-		addGrid(panel, fUseLoadingRunner, 0, 2, 2, GridBagConstraints.HORIZONTAL, 	1.0, GridBagConstraints.WEST);
+		addGrid(panel, fUseLoadingRunner, 0, 2, 2, GridBagConstraints.NONE, 	1.0, GridBagConstraints.WEST);
 		addGrid(panel, fProgressIndicator, 0, 3, 2, GridBagConstraints.HORIZONTAL, 	1.0, GridBagConstraints.WEST);
 		addGrid(panel, fLogo, 			 2, 3, 1, GridBagConstraints.NONE, 			0.0, GridBagConstraints.NORTH);
 

File: junit/swingui/TestRunner.java
Patch:
@@ -407,7 +407,7 @@ protected JFrame createUI(String suiteName) {
 		addGrid(panel, browseButton, 	1, 1, 1, GridBagConstraints.NONE, 			0.0, GridBagConstraints.WEST);
 		addGrid(panel, fRun, 		2, 1, 1, GridBagConstraints.HORIZONTAL, 	0.0, GridBagConstraints.CENTER);
 
-		addGrid(panel, fUseLoadingRunner,  	0, 2, 3, GridBagConstraints.HORIZONTAL, 1.0, GridBagConstraints.WEST);
+		addGrid(panel, fUseLoadingRunner,  	0, 2, 3, GridBagConstraints.NONE, 1.0, GridBagConstraints.WEST);
 		addGrid(panel, new JSeparator(), 	0, 3, 3, GridBagConstraints.HORIZONTAL, 1.0, GridBagConstraints.WEST);
 
 		
@@ -795,6 +795,4 @@ private void about() {
 		AboutDialog about= new AboutDialog(fFrame); 
 		about.show();
 	}
-	
-
 }
\ No newline at end of file

File: junit/tests/TestCaseClassLoaderTest.java
Patch:
@@ -30,6 +30,7 @@ public void testClassLoading() throws Exception {
 
 	public void testJarClassLoading() throws Exception {
 		URL url= getClass().getResource("test.jar");
+		assertNotNull("Cannot find test.jar", url);
 		String path= url.getFile();
 		TestCaseClassLoader loader= new TestCaseClassLoader(path);
 		Class loadedClass= loader.loadClass("junit.tests.LoadedFromJar", true);

File: junit/extensions/TestDecorator.java
Patch:
@@ -32,7 +32,7 @@ public String toString() {
 		return fTest.toString();
 	}
 	
-	protected Test getTest() {
+	public Test getTest() {
 		return fTest;
 	}
 }
\ No newline at end of file

File: junit/framework/TestCase.java
Patch:
@@ -144,11 +144,11 @@ protected void runTest() throws Throwable {
 			// methods. getDeclaredMethods returns all
 			// methods of this class but excludes the
 			// inherited ones.
-			runMethod= getClass().getMethod(fName, new Class[0]);
+			runMethod= getClass().getMethod(fName, null);
 		} catch (NoSuchMethodException e) {
 			fail("Method \""+fName+"\" not found");
 		}
-		if (runMethod != null && !Modifier.isPublic(runMethod.getModifiers())) {
+		if (!Modifier.isPublic(runMethod.getModifiers())) {
 			fail("Method \""+fName+"\" should be public");
 		}
 

File: junit/runner/LoadingTestCollector.java
Patch:
@@ -10,11 +10,11 @@
  * it is assignable from Test or provides a static suite method.
  * @see TestCollector
  */
-public class LoadingClassPathTestCollector extends ClassPathTestCollector {
+public class LoadingTestCollector extends ClassPathTestCollector {
 	
 	TestCaseClassLoader fLoader;
 	
-	public LoadingClassPathTestCollector() {
+	public LoadingTestCollector() {
 		fLoader= new TestCaseClassLoader();
 	}
 	

File: junit/runner/SimpleTestCollector.java
Patch:
@@ -6,9 +6,9 @@
  * pattern "Test" in its name
  * @see TestCollector
  */
-public class SimpleClassPathTestCollector extends ClassPathTestCollector {
+public class SimpleTestCollector extends ClassPathTestCollector {
 	
-	public SimpleClassPathTestCollector() {
+	public SimpleTestCollector() {
 	}
 	
 	protected boolean isTestClass(String classFileName) {

File: junit/swingui/StatusLine.java
Patch:
@@ -31,9 +31,11 @@ public void showError(String status) {
 		setFont(BOLD_FONT);
 		setForeground(Color.red);
 		setText(status);
+		setToolTipText(status);
 	}
 	
 	public void clear() {
 		setText("");
+		setToolTipText(null);
 	}
 }
\ No newline at end of file

File: junit/textui/TestRunner.java
Patch:
@@ -136,7 +136,7 @@ public void printErrors(TestResult result) {
 			for (Enumeration e= result.errors(); e.hasMoreElements(); i++) {
 			    TestFailure failure= (TestFailure)e.nextElement();
 				writer().println(i+") "+failure.failedTest());
-				failure.thrownException().printStackTrace(writer());
+				writer().print(getFilteredTrace(failure.thrownException()));
 		    }
 		}
 	}
@@ -158,7 +158,7 @@ public void printFailures(TestResult result) {
 					writer().println(" \"" + truncate(t.getMessage()) + "\"");
 				else {
 					writer().println();
-					failure.thrownException().printStackTrace(writer());
+					writer().print(getFilteredTrace(failure.thrownException()));
 				}
 			}
 		}

File: junit/textui/TestRunner.java
Patch:
@@ -39,6 +39,8 @@ public TestRunner() {
 	 */
 	public TestRunner(PrintStream writer) {
 		this();
+		if (writer == null)
+			throw new IllegalArgumentException("Writer can't be null");
 		fWriter= writer;
 	}
 	

File: junit/framework/TestResult.java
Patch:
@@ -150,8 +150,9 @@ public synchronized boolean shouldStop() {
 	 * Informs the result that a test will be started.
 	 */
 	public void startTest(Test test) {
+		final int count= test.countTestCases();
 		synchronized(this) {
-			fRunTests++;
+			fRunTests+= count;
 		}
 		for (Enumeration e= cloneListeners().elements(); e.hasMoreElements(); ) {
 			((TestListener)e.nextElement()).startTest(test);

File: junit/tests/StackFilterTest.java
Patch:
@@ -13,7 +13,7 @@ public StackFilterTest(String name) {
 	}
 	
 	protected void setUp() {
-		StringWriter swin= new StringWriter(500);
+		StringWriter swin= new StringWriter();
 		PrintWriter pwin= new PrintWriter(swin);
 		pwin.println("junit.framework.AssertionFailedError");
 		pwin.println("	at junit.framework.Assert.fail(Assert.java:144)");
@@ -33,7 +33,7 @@ protected void setUp() {
 		pwin.println("	at junit.swingui.TestRunner$17.run(TestRunner.java:669)");
 		fUnfiltered= swin.toString();
 
-		StringWriter swout= new StringWriter(500);
+		StringWriter swout= new StringWriter();
 		PrintWriter pwout= new PrintWriter(swout);
 		pwout.println("junit.framework.AssertionFailedError");
 		pwout.println("	at MyTest.f(MyTest.java:13)");

File: junit/tests/TestCaseClassLoaderTest.java
Patch:
@@ -9,9 +9,9 @@
  * A TestCase for testing the TestCaseClassLoader
  *
  */ 
-public class TestTestCaseClassLoader extends TestCase {
+public class TestCaseClassLoaderTest extends TestCase {
 
-	public TestTestCaseClassLoader(String name) {
+	public TestCaseClassLoaderTest(String name) {
 		super(name);
 	}
 	public void testClassLoading() throws Exception {

