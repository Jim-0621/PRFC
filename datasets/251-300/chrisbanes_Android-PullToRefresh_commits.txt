File: library/src/com/handmark/pulltorefresh/library/internal/RotateLoadingLayout.java
Patch:
@@ -57,8 +57,8 @@ public RotateLoadingLayout(Context context, Mode mode, Orientation scrollDirecti
 
 	public void onLoadingDrawableSet(Drawable imageDrawable) {
 		if (null != imageDrawable) {
-			mRotationPivotX = imageDrawable.getIntrinsicWidth() / 2f;
-			mRotationPivotY = imageDrawable.getIntrinsicHeight() / 2f;
+			mRotationPivotX = Math.round(imageDrawable.getIntrinsicWidth() / 2f);
+			mRotationPivotY = Math.round(imageDrawable.getIntrinsicHeight() / 2f);
 		}
 	}
 

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java
Patch:
@@ -63,7 +63,7 @@ public final Orientation getPullToRefreshScrollDirection() {
 	}
 
 	@Override
-	void onRefreshing(final boolean doScroll) {
+	protected void onRefreshing(final boolean doScroll) {
 		/**
 		 * If we're not showing the Refreshing view, or the list is empty, the
 		 * the header/footer views won't show so we use the normal method.
@@ -127,7 +127,7 @@ void onRefreshing(final boolean doScroll) {
 	}
 
 	@Override
-	void onReset() {
+	protected void onReset() {
 		/**
 		 * If the extras are not enabled, just call up to super and return.
 		 */

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -912,7 +912,7 @@ protected final void refreshRefreshableViewSize(int width, int height) {
 
 		switch (getPullToRefreshScrollDirection()) {
 			case HORIZONTAL:
-				if (lp.weight != width) {
+				if (lp.width != width) {
 					lp.width = width;
 					mRefreshableViewWrapper.requestLayout();
 				}

File: library/src/com/handmark/pulltorefresh/library/LoadingLayoutProxy.java
Patch:
@@ -52,7 +52,7 @@ public void setPullLabel(CharSequence label) {
 	@Override
 	public void setReleaseLabel(CharSequence label) {
 		for (LoadingLayout layout : mLoadingLayouts) {
-			layout.setRefreshingLabel(label);
+			layout.setReleaseLabel(label);
 		}
 	}
 

File: library/src/com/handmark/pulltorefresh/library/LoadingLayoutProxy.java
Patch:
@@ -52,7 +52,7 @@ public void setPullLabel(CharSequence label) {
 	@Override
 	public void setReleaseLabel(CharSequence label) {
 		for (LoadingLayout layout : mLoadingLayouts) {
-			layout.setRefreshingLabel(label);
+			layout.setReleaseLabel(label);
 		}
 	}
 

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java
Patch:
@@ -172,8 +172,7 @@ public final void setEmptyView(View newEmptyView) {
 				((ViewGroup) newEmptyViewParent).removeView(newEmptyView);
 			}
 
-			refreshableViewWrapper.addView(newEmptyView, ViewGroup.LayoutParams.MATCH_PARENT,
-					ViewGroup.LayoutParams.MATCH_PARENT);
+			refreshableViewWrapper.addView(newEmptyView);
 		}
 
 		if (mRefreshableView instanceof EmptyViewMethodAccessor) {

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshListView.java
Patch:
@@ -105,7 +105,8 @@ void onRefreshing(final boolean doScroll) {
 		}
 
 		// Hide our original Loading View
-		origLoadingView.setVisibility(View.INVISIBLE);
+		origLoadingView.reset();
+		origLoadingView.hideAllViews();
 
 		// Make sure the opposite end is hidden too
 		oppositeListViewLoadingView.setVisibility(View.GONE);
@@ -169,7 +170,7 @@ void onReset() {
 		if (listViewLoadingLayout.getVisibility() == View.VISIBLE) {
 
 			// Set our Original View to Visible
-			originalLoadingLayout.setVisibility(View.VISIBLE);
+			originalLoadingLayout.showInvisibleViews();
 
 			// Hide the ListView Header/Footer
 			listViewLoadingLayout.setVisibility(View.GONE);

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -860,7 +860,7 @@ protected final void onRestoreInstanceState(Parcelable state) {
 		if (state instanceof Bundle) {
 			Bundle bundle = (Bundle) state;
 
-			mMode = Mode.mapIntToValue(bundle.getInt(STATE_MODE, 0));
+			setMode(Mode.mapIntToValue(bundle.getInt(STATE_MODE, 0)));
 			mCurrentMode = Mode.mapIntToValue(bundle.getInt(STATE_CURRENT_MODE, 0));
 
 			mScrollingWhileRefreshingEnabled = bundle.getBoolean(STATE_SCROLLING_REFRESHING_ENABLED, false);

File: library/src/com/handmark/pulltorefresh/library/OverscrollHelper.java
Patch:
@@ -118,7 +118,8 @@ public static void overScrollBy(final PullToRefreshBase<?> view, final int delta
 				break;
 		}
 
-		// Check that OverScroll is enabled and that we're not currently refreshing.
+		// Check that OverScroll is enabled and that we're not currently
+		// refreshing.
 		if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {
 			final Mode mode = view.getMode();
 

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshExpandableListView.java
Patch:
@@ -100,8 +100,8 @@ public InternalExpandableListViewSDK9(Context context, AttributeSet attrs) {
 		protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,
 				int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {
 
-			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX, scrollRangeY,
-					maxOverScrollX, maxOverScrollY, isTouchEvent);
+			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,
+					scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);
 
 			// Does all of the hard work...
 			OverscrollHelper.overScrollBy(PullToRefreshExpandableListView.this, deltaX, scrollX, deltaY, scrollY,

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshGridView.java
Patch:
@@ -101,8 +101,8 @@ public InternalGridViewSDK9(Context context, AttributeSet attrs) {
 		protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,
 				int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {
 
-			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX, scrollRangeY,
-					maxOverScrollX, maxOverScrollY, isTouchEvent);
+			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,
+					scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);
 
 			// Does all of the hard work...
 			OverscrollHelper.overScrollBy(PullToRefreshGridView.this, deltaX, scrollX, deltaY, scrollY, isTouchEvent);

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshHorizontalScrollView.java
Patch:
@@ -85,8 +85,8 @@ public InternalHorizontalScrollViewSDK9(Context context, AttributeSet attrs) {
 		protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,
 				int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {
 
-			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX, scrollRangeY,
-					maxOverScrollX, maxOverScrollY, isTouchEvent);
+			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,
+					scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);
 
 			// Does all of the hard work...
 			OverscrollHelper.overScrollBy(PullToRefreshHorizontalScrollView.this, deltaX, scrollX, deltaY, scrollY,

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshScrollView.java
Patch:
@@ -84,8 +84,8 @@ public InternalScrollViewSDK9(Context context, AttributeSet attrs) {
 		protected boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX,
 				int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) {
 
-			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX, scrollRangeY,
-					maxOverScrollX, maxOverScrollY, isTouchEvent);
+			final boolean returnValue = super.overScrollBy(deltaX, deltaY, scrollX, scrollY, scrollRangeX,
+					scrollRangeY, maxOverScrollX, maxOverScrollY, isTouchEvent);
 
 			// Does all of the hard work...
 			OverscrollHelper.overScrollBy(PullToRefreshScrollView.this, deltaX, scrollX, deltaY, scrollY,

File: library/src/com/handmark/pulltorefresh/library/extras/SoundPullEventListener.java
Patch:
@@ -34,7 +34,7 @@ public class SoundPullEventListener<V extends View> implements PullToRefreshBase
 
 	/**
 	 * Constructor
-	 *
+	 * 
 	 * @param context - Context
 	 */
 	public SoundPullEventListener(Context context) {
@@ -57,10 +57,10 @@ public final void onPullEvent(PullToRefreshBase<V> refreshView, State event, Mod
 	 * <p/>
 	 * If you've already set a sound for a certain event, and add another sound
 	 * for that event, only the new sound will be played.
-	 *
+	 * 
 	 * @param event - The event for which the sound will be played.
 	 * @param resId - Resource Id of the sound file to be played (e.g.
-	 *              <var>R.raw.pull_sound</var>)
+	 *            <var>R.raw.pull_sound</var>)
 	 */
 	public void addSoundEvent(State event, int resId) {
 		mSoundMap.put(event, resId);

File: library/src/com/handmark/pulltorefresh/library/internal/LoadingLayout.java
Patch:
@@ -111,7 +111,7 @@ public LoadingLayout(Context context, final Mode mode, final int scrollDirection
 		if (attrs.hasValue(R.styleable.PullToRefresh_ptrHeaderBackground)) {
 			Drawable background = attrs.getDrawable(R.styleable.PullToRefresh_ptrHeaderBackground);
 			if (null != background) {
-				setBackgroundDrawable(background);
+				ViewCompat.setBackground(this, background);
 			}
 		}
 

File: library/src/com/handmark/pulltorefresh/library/IPullToRefresh.java
Patch:
@@ -224,7 +224,7 @@ public interface IPullToRefresh<T extends View> {
 	 * Set Text to show when the Widget is being Pulled
 	 * <code>setPullLabel(releaseLabel, Mode.BOTH)</code>
 	 * 
-	 * @param releaseLabel
+	 * @param pullLabel
 	 *            - CharSequence to display
 	 */
 	public void setPullLabel(CharSequence pullLabel);
@@ -260,7 +260,7 @@ public interface IPullToRefresh<T extends View> {
 	 * Set Text to show when the Widget is refreshing
 	 * <code>setRefreshingLabel(releaseLabel, Mode.BOTH)</code>
 	 * 
-	 * @param releaseLabel
+	 * @param refreshingLabel
 	 *            - CharSequence to display
 	 */
 	public void setRefreshingLabel(CharSequence refreshingLabel);

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java
Patch:
@@ -75,7 +75,7 @@ public PullToRefreshAdapterViewBase(Context context, Mode mode, AnimationStyle a
 	 * Gets whether an indicator graphic should be displayed when the View is in
 	 * a state where a Pull-to-Refresh can happen. An example of this state is
 	 * when the Adapter View is scrolled to the top and the mode is set to
-	 * {@link Mode#PULL_DOWN_TO_REFRESH}. The default value is <var>true</var>
+	 * {@link Mode#PULL_FROM_START}. The default value is <var>true</var>
 	 * if {@link PullToRefreshBase#isPullToRefreshOverScrollEnabled()
 	 * isPullToRefreshOverScrollEnabled()} returns false.
 	 * 
@@ -131,7 +131,7 @@ public final void onScrollStateChanged(final AbsListView view, final int scrollS
 
 	/**
 	 * Pass-through method for {@link PullToRefreshBase#getRefreshableView()
-	 * getRefreshableView()}.{@link AdapterView#setAdapter(ListAdapter)
+	 * getRefreshableView()}.{@link AdapterView#setAdapter(android.widget.Adapter)}
 	 * setAdapter(adapter)}. This is just for convenience!
 	 * 
 	 * @param adapter
@@ -214,7 +214,7 @@ public final void setScrollEmptyView(boolean doScroll) {
 	 * Sets whether an indicator graphic should be displayed when the View is in
 	 * a state where a Pull-to-Refresh can happen. An example of this state is
 	 * when the Adapter View is scrolled to the top and the mode is set to
-	 * {@link Mode#PULL_DOWN_TO_REFRESH}
+	 * {@link Mode#PULL_FROM_START}
 	 * 
 	 * @param showIndicator
 	 *            - true if the indicators should be shown.

File: library/src/com/handmark/pulltorefresh/library/internal/EmptyViewMethodAccessor.java
Patch:
@@ -28,7 +28,7 @@ public interface EmptyViewMethodAccessor {
 	/**
 	 * Calls upto AdapterView.setEmptyView()
 	 * 
-	 * @param View
+	 * @param emptyView -
 	 *            to set as Empty View
 	 */
 	public void setEmptyViewInternal(View emptyView);
@@ -37,7 +37,7 @@ public interface EmptyViewMethodAccessor {
 	 * Should call PullToRefreshBase.setEmptyView() which will then
 	 * automatically call through to setEmptyViewInternal()
 	 * 
-	 * @param View
+	 * @param emptyView -
 	 *            to set as Empty View
 	 */
 	public void setEmptyView(View emptyView);

File: library/src/com/handmark/pulltorefresh/library/internal/FlipLoadingLayout.java
Patch:
@@ -75,7 +75,7 @@ protected void onLoadingDrawableSet(Drawable imageDrawable) {
 			mHeaderImage.setScaleType(ScaleType.MATRIX);
 			Matrix matrix = new Matrix();
 			matrix.postTranslate((lp.width - dWidth) / 2f, (lp.height - dHeight) / 2f);
-			matrix.postRotate(getDrawableRotationAngle(), dWidth / 2f, dHeight / 2f);
+			matrix.postRotate(getDrawableRotationAngle(), lp.width / 2f, lp.height / 2f);
 			mHeaderImage.setImageMatrix(matrix);
 		}
 	}

File: library/src/com/handmark/pulltorefresh/library/internal/IndicatorLayout.java
Patch:
@@ -15,6 +15,7 @@
  *******************************************************************************/
 package com.handmark.pulltorefresh.library.internal;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.Matrix;
 import android.graphics.drawable.Drawable;
@@ -32,6 +33,7 @@
 import com.handmark.pulltorefresh.library.PullToRefreshBase;
 import com.handmark.pulltorefresh.library.R;
 
+@SuppressLint("ViewConstructor")
 public class IndicatorLayout extends FrameLayout implements AnimationListener {
 
 	static final int DEFAULT_ROTATION_ANIMATION_DURATION = 150;
@@ -45,7 +47,7 @@ public IndicatorLayout(Context context, PullToRefreshBase.Mode mode) {
 		super(context);
 		mArrowImageView = new ImageView(context);
 
-		Drawable arrowD = getResources().getDrawable(R.drawable.indicator);
+		Drawable arrowD = getResources().getDrawable(R.drawable.indicator_arrow);
 		mArrowImageView.setImageDrawable(arrowD);
 
 		final int padding = getResources().getDimensionPixelSize(R.dimen.indicator_internal_padding);

File: sample/src/com/handmark/pulltorefresh/samples/LauncherActivity.java
Patch:
@@ -15,8 +15,6 @@
  *******************************************************************************/
 package com.handmark.pulltorefresh.samples;
 
-import com.handmark.pulltorefresh.library.PullToRefreshHorizontalScrollView;
-
 import android.app.ListActivity;
 import android.content.Intent;
 import android.os.Bundle;

File: library/src/com/handmark/pulltorefresh/library/internal/FlipLoadingLayout.java
Patch:
@@ -35,7 +35,7 @@ public class FlipLoadingLayout extends LoadingLayout {
 	public FlipLoadingLayout(Context context, Mode mode, TypedArray attrs) {
 		super(context, mode, attrs);
 		
-		final int rotateAngle = mode == Mode.PULL_DOWN_TO_REFRESH ? 180 : -180;
+		final int rotateAngle = mode == Mode.PULL_DOWN_TO_REFRESH ? -180 : 180;
 
 		mRotateAnimation = new RotateAnimation(0, rotateAngle, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF,
 				0.5f);

File: library/src/com/handmark/pulltorefresh/library/internal/LoadingLayout.java
Patch:
@@ -135,9 +135,9 @@ public LoadingLayout(Context context, final Mode mode, TypedArray attrs) {
 		// If we don't have a user defined drawable, load the default
 		if (null == imageDrawable) {
 			if (mode == Mode.PULL_DOWN_TO_REFRESH) {
-				imageDrawable = context.getResources().getDrawable(getDefaultBottomDrawableResId());
-			} else {
 				imageDrawable = context.getResources().getDrawable(getDefaultTopDrawableResId());
+			} else {
+				imageDrawable = context.getResources().getDrawable(getDefaultBottomDrawableResId());
 			}
 		}
 

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -24,6 +24,7 @@
 import android.os.Parcelable;
 import android.util.AttributeSet;
 import android.util.Log;
+import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewConfiguration;
@@ -818,6 +819,7 @@ private void addRefreshableView(Context context, T refreshableView) {
 	@SuppressWarnings("deprecation")
 	private void init(Context context, AttributeSet attrs) {
 		setOrientation(LinearLayout.VERTICAL);
+		setGravity(Gravity.CENTER_HORIZONTAL);
 
 		ViewConfiguration config = ViewConfiguration.get(context);
 		mTouchSlop = config.getScaledTouchSlop();

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -401,11 +401,13 @@ public void setOnPullEventListener(OnPullEventListener<T> listener) {
 	@Override
 	public final void setOnRefreshListener(OnRefreshListener<T> listener) {
 		mOnRefreshListener = listener;
+		mOnRefreshListener2 = null;
 	}
 
 	@Override
 	public final void setOnRefreshListener(OnRefreshListener2<T> listener) {
 		mOnRefreshListener2 = listener;
+		mOnRefreshListener = null;
 	}
 
 	@Override

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -34,6 +34,7 @@
 import android.widget.LinearLayout;
 
 import com.handmark.pulltorefresh.library.internal.LoadingLayout;
+import com.handmark.pulltorefresh.library.internal.RotateLoadingLayout;
 import com.handmark.pulltorefresh.library.internal.SDK16;
 
 public abstract class PullToRefreshBase<T extends View> extends LinearLayout implements IPullToRefresh<T> {
@@ -505,7 +506,7 @@ protected final void addViewInternal(View child, ViewGroup.LayoutParams params)
 	}
 
 	protected LoadingLayout createLoadingLayout(Context context, Mode mode, TypedArray attrs) {
-		return new LoadingLayout(context, mode, attrs);
+		return new RotateLoadingLayout(context, mode, attrs);
 	}
 
 	/**

File: library/src/com/handmark/pulltorefresh/library/OverscrollHelper.java
Patch:
@@ -115,7 +115,7 @@ static void overScrollBy(final PullToRefreshBase<?> view, final int deltaY, fina
 					}
 				} else if (Math.abs(newY) <= fuzzyThreshold || Math.abs(newY - scrollRange) <= fuzzyThreshold) {
 					// Means we've stopped overscrolling, so scroll back to 0
-					view.smoothScrollTo(0, PullToRefreshBase.SMOOTH_SCROLL_LONG_DURATION_MS);
+					view.smoothScrollToLonger(0);
 				}
 			}
 		}

File: sample/src/com/handmark/pulltorefresh/samples/PullToRefreshListActivity.java
Patch:
@@ -81,7 +81,8 @@ public void onLastItemVisible() {
 
 		mAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, mListItems);
 
-		// You can also just use setListAdapter(mAdapter)
+		// You can also just use setListAdapter(mAdapter) or
+		// mPullRefreshListView.setAdapter(mAdapter)
 		actualListView.setAdapter(mAdapter);
 	}
 

File: library/src/com/handmark/pulltorefresh/library/OverscrollHelper.java
Patch:
@@ -5,7 +5,7 @@
 final class OverscrollHelper {
 
 	static void overScrollBy(PullToRefreshBase<?> view, int deltaY, int scrollY, boolean isTouchEvent) {
-		final Mode mode = view.getCurrentMode();
+		final Mode mode = view.getMode();
 
 		if (mode != Mode.DISABLED && !isTouchEvent) {
 			final int newY = (deltaY + scrollY);

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java
Patch:
@@ -285,6 +285,8 @@ protected void updateUIForMode() {
 		// Check Indicator Views consistent with new Mode
 		if (getShowIndicatorInternal()) {
 			addIndicatorViews();
+		} else {
+			removeIndicatorViews();
 		}
 	}
 

File: library/src/com/handmark/pulltorefresh/library/internal/IndicatorLayout.java
Patch:
@@ -101,6 +101,7 @@ public void hide() {
 	}
 
 	public void show() {
+		mArrowImageView.clearAnimation();
 		startAnimation(mInAnim);
 	}
 

File: sample/src/com/handmark/pulltorefresh/sample/PullToRefreshListActivity.java
Patch:
@@ -27,6 +27,7 @@
 import android.widget.ArrayAdapter;
 import android.widget.ListView;
 
+import com.handmark.pulltorefresh.library.PullToRefreshBase;
 import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;
 import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener;
 import com.handmark.pulltorefresh.library.PullToRefreshListView;
@@ -50,9 +51,9 @@ public void onCreate(Bundle savedInstanceState) {
 		mPullRefreshListView = (PullToRefreshListView) findViewById(R.id.pull_refresh_list);
 
 		// Set a listener to be invoked when the list should be refreshed.
-		mPullRefreshListView.setOnRefreshListener(new OnRefreshListener() {
+		mPullRefreshListView.setOnRefreshListener(new OnRefreshListener<ListView>() {
 			@Override
-			public void onRefresh() {
+			public void onRefresh(PullToRefreshBase<ListView> refreshView) {
 				mPullRefreshListView.setLastUpdatedLabel(DateUtils.formatDateTime(getApplicationContext(),
 						System.currentTimeMillis(), DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_SHOW_DATE
 								| DateUtils.FORMAT_ABBREV_ALL));

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshWebView.java
Patch:
@@ -17,6 +17,7 @@
 
 import android.content.Context;
 import android.util.AttributeSet;
+import android.util.FloatMath;
 import android.webkit.WebChromeClient;
 import android.webkit.WebView;
 
@@ -87,7 +88,7 @@ protected boolean isReadyForPullDown() {
 
 	@Override
 	protected boolean isReadyForPullUp() {
-		int exactContentHeight = (int) Math.floor(mRefreshableView.getContentHeight() * mRefreshableView.getScale());
+		float exactContentHeight = FloatMath.floor(mRefreshableView.getContentHeight() * mRefreshableView.getScale());
 		return mRefreshableView.getScrollY() >= (exactContentHeight - mRefreshableView.getHeight());
 	}
 }

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java
Patch:
@@ -43,7 +43,7 @@ public PullToRefreshAdapterViewBase(Context context) {
 		mRefreshableView.setOnScrollListener(this);
 	}
 
-	public PullToRefreshAdapterViewBase(Context context, int mode) {
+	public PullToRefreshAdapterViewBase(Context context, Mode mode) {
 		super(context, mode);
 		mRefreshableView.setOnScrollListener(this);
 	}

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshExpandableListView.java
Patch:
@@ -50,7 +50,7 @@ public PullToRefreshExpandableListView(Context context) {
 		super(context);
 	}
 
-	public PullToRefreshExpandableListView(Context context, int mode) {
+	public PullToRefreshExpandableListView(Context context, Mode mode) {
 		super(context, mode);
 	}
 

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshGridView.java
Patch:
@@ -51,7 +51,7 @@ public PullToRefreshGridView(Context context) {
 		super(context);
 	}
 
-	public PullToRefreshGridView(Context context, int mode) {
+	public PullToRefreshGridView(Context context, Mode mode) {
 		super(context, mode);
 	}
 

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshWebView.java
Patch:
@@ -52,7 +52,7 @@ public PullToRefreshWebView(Context context) {
 		mRefreshableView.setWebChromeClient(defaultWebChromeClient);
 	}
 
-	public PullToRefreshWebView(Context context, int mode) {
+	public PullToRefreshWebView(Context context, Mode mode) {
 		super(context, mode);
 
 		/**

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -92,7 +92,7 @@ public void stop() {
 	// Constants
 	// ===========================================================
 
-	static final boolean DEBUG = true;
+	static final boolean DEBUG = false;
 	static final String LOG_TAG = "PullToRefresh";
 
 	static final float FRICTION = 2.0f;

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshWebView.java
Patch:
@@ -72,6 +72,7 @@ protected boolean isReadyForPullDown() {
 
 	@Override
 	protected boolean isReadyForPullUp() {
-		return mRefreshableView.getScrollY() >= (mRefreshableView.getContentHeight() - mRefreshableView.getHeight());
+		int exactContentHeight = (int) Math.floor(mRefreshableView.getContentHeight() * mRefreshableView.getScale());
+		return mRefreshableView.getScrollY() >= (exactContentHeight - mRefreshableView.getHeight());
 	}
 }

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -339,6 +339,7 @@ public final void setRefreshing(boolean doScroll) {
 		if (!isRefreshing()) {
 			setRefreshingInternal(doScroll);
 			mState = MANUAL_REFRESHING;
+			mCurrentMode = MODE_PULL_DOWN_TO_REFRESH;
 		}
 	}
 

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java
Patch:
@@ -148,7 +148,7 @@ private boolean isLastItemVisible() {
 
 		if (count == getNumberInternalViews()) {
 			return true;
-		} else if (lastVisiblePosition == (count - 1 - getNumberInternalFooterViews())) {
+		} else if (lastVisiblePosition == (count - getNumberInternalFooterViews())) {
 
 			final int childIndex = lastVisiblePosition - mRefreshableView.getFirstVisiblePosition();
 			final View lastVisibleChild = mRefreshableView.getChildAt(childIndex);

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -309,7 +309,7 @@ public final boolean onTouchEvent(MotionEvent event) {
 			return false;
 		}
 
-		if (state == REFRESHING && disableScrollingWhileRefreshing) {
+		if (isRefreshing() && disableScrollingWhileRefreshing) {
 			return true;
 		}
 
@@ -363,7 +363,7 @@ public final boolean onInterceptTouchEvent(MotionEvent event) {
 			return false;
 		}
 
-		if (state == REFRESHING && disableScrollingWhileRefreshing) {
+		if (isRefreshing() && disableScrollingWhileRefreshing) {
 			return true;
 		}
 

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -508,7 +508,7 @@ protected void setRefreshingInternal(boolean doScroll) {
 		}
 
 		if (doScroll) {
-			smoothScrollTo(mode == MODE_PULL_DOWN_TO_REFRESH ? -headerHeight : headerHeight);
+			smoothScrollTo(currentMode == MODE_PULL_DOWN_TO_REFRESH ? -headerHeight : headerHeight);
 		}
 	}
 

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -363,8 +363,8 @@ public final boolean onInterceptTouchEvent(MotionEvent event) {
 			return false;
 		}
 
-		if (state == REFRESHING && disableScrollingWhileRefreshing) {
-			return true;
+		if (state == REFRESHING) {
+			return disableScrollingWhileRefreshing;
 		}
 
 		final int action = event.getAction();

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshAdapterViewBase.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.Context;
 import android.util.AttributeSet;
-import android.util.Log;
 import android.view.ContextMenu.ContextMenuInfo;
 import android.view.View;
 import android.view.ViewGroup;
@@ -11,7 +10,6 @@
 import android.widget.AbsListView.OnScrollListener;
 import android.widget.FrameLayout;
 import android.widget.LinearLayout;
-import android.widget.TextView;
 
 import com.handmark.pulltorefresh.library.internal.EmptyViewMethodAccessor;
 

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -193,8 +193,8 @@ public final void setOnRefreshListener(OnRefreshListener listener) {
 	 * @param enable
 	 *            Whether Pull-To-Refresh should be used
 	 */
-	public final void setPullToRefreshEnabled(boolean enabled) {
-		this.isPullToRefreshEnabled = enabled;
+	public final void setPullToRefreshEnabled(boolean enable) {
+		this.isPullToRefreshEnabled = enable;
 	}
 
 	public final void setReleaseLabel(String releaseLabel) {

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -193,8 +193,8 @@ public final void setOnRefreshListener(OnRefreshListener listener) {
 	 * @param enable
 	 *            Whether Pull-To-Refresh should be used
 	 */
-	public final void setPullToRefreshEnabled(boolean enabled) {
-		this.isPullToRefreshEnabled = enabled;
+	public final void setPullToRefreshEnabled(boolean enable) {
+		this.isPullToRefreshEnabled = enable;
 	}
 
 	public final void setReleaseLabel(String releaseLabel) {

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -244,6 +244,7 @@ protected final void resetHeader() {
 		startY = -1;
 		headerImage.setVisibility(View.VISIBLE);
 		headerProgress.setVisibility(View.GONE);
+		headerText.setText(R.string.pull_to_refresh_pull_label);
 
 		smoothScrollTo(0);
 	}
@@ -459,4 +460,4 @@ public static interface OnRefreshListener {
 
 	}
 
-}
\ No newline at end of file
+}

File: library/src/com/handmark/pulltorefresh/library/PullToRefreshBase.java
Patch:
@@ -244,6 +244,7 @@ protected final void resetHeader() {
 		startY = -1;
 		headerImage.setVisibility(View.VISIBLE);
 		headerProgress.setVisibility(View.GONE);
+		headerText.setText(R.string.pull_to_refresh_pull_label);
 
 		smoothScrollTo(0);
 	}
@@ -459,4 +460,4 @@ public static interface OnRefreshListener {
 
 	}
 
-}
\ No newline at end of file
+}

