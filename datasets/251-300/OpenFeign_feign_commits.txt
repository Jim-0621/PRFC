File: core/src/main/java/feign/template/Expressions.java
Patch:
@@ -262,7 +262,7 @@ public String expand(Object value) {
     @Override
     public String getValue() {
       if (this.getPattern() != null) {
-        return "{" + this.separator + this.getName() + ":" + this.getName() + "}";
+        return "{" + this.separator + this.getName() + ":" + this.getPattern() + "}";
       }
       return "{" + this.separator + this.getName() + "}";
     }

File: src/main/java/feign/VertxMethodHandler.java
Patch:
@@ -26,7 +26,7 @@
  * @author Alexei KLENIN
  * @author Gordon McKinney
  */
-final class AsynchronousMethodHandler implements MethodHandler {
+final class VertxMethodHandler implements MethodHandler {
   private static final long MAX_RESPONSE_BUFFER_SIZE = 8192L;
 
   private final MethodMetadata metadata;
@@ -41,7 +41,7 @@ final class AsynchronousMethodHandler implements MethodHandler {
   private final ErrorDecoder errorDecoder;
   private final boolean decode404;
 
-  private AsynchronousMethodHandler(
+  private VertxMethodHandler(
       final Target<?> target,
       final VertxHttpClient client,
       final Retryer retryer,
@@ -260,7 +260,7 @@ MethodHandler create(
         final RequestTemplate.Factory buildTemplateFromArgs,
         final Decoder decoder,
         final ErrorDecoder errorDecoder) {
-      return new AsynchronousMethodHandler(
+      return new VertxMethodHandler(
           target,
           client,
           retryer,

File: feign-form/src/test/java/feign/form/Server.java
Patch:
@@ -170,7 +170,8 @@ public ResponseEntity<String> uploadUnknownType(@RequestPart("file") MultipartFi
   public ResponseEntity<String> uploadFormData(@RequestPart("file") MultipartFile file) {
     val status = file != null ? OK : I_AM_A_TEAPOT;
     String sanitizedFilename = StringEscapeUtils.escapeHtml4(file.getOriginalFilename());
-    return ResponseEntity.status(status).body(sanitizedFilename + ':' + file.getContentType());
+    String sanitizedContentType = StringEscapeUtils.escapeHtml4(file.getContentType());
+    return ResponseEntity.status(status).body(sanitizedFilename + ':' + sanitizedContentType);
   }
 
   @PostMapping(path = "/submit/url", consumes = APPLICATION_FORM_URLENCODED_VALUE)

File: feign-form/src/test/java/feign/form/Server.java
Patch:
@@ -28,7 +28,6 @@
 import java.io.IOException;
 import java.util.Collection;
 import java.util.List;
-import org.apache.commons.text.StringEscapeUtils;
 import lombok.val;
 import org.apache.commons.text.StringEscapeUtils;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -171,8 +170,7 @@ public ResponseEntity<String> uploadUnknownType(@RequestPart("file") MultipartFi
   public ResponseEntity<String> uploadFormData(@RequestPart("file") MultipartFile file) {
     val status = file != null ? OK : I_AM_A_TEAPOT;
     String sanitizedFilename = StringEscapeUtils.escapeHtml4(file.getOriginalFilename());
-    return ResponseEntity.status(status)
-        .body(sanitizedFilename + ':' + file.getContentType());
+    return ResponseEntity.status(status).body(sanitizedFilename + ':' + file.getContentType());
   }
 
   @PostMapping(path = "/submit/url", consumes = APPLICATION_FORM_URLENCODED_VALUE)

File: feign-form/src/test/java/feign/form/Server.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.IOException;
 import java.util.Collection;
 import java.util.List;
+import org.apache.commons.text.StringEscapeUtils;
 import lombok.val;
 import org.apache.commons.text.StringEscapeUtils;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -169,8 +170,9 @@ public ResponseEntity<String> uploadUnknownType(@RequestPart("file") MultipartFi
   @PostMapping(path = "/upload/form_data", consumes = MULTIPART_FORM_DATA_VALUE)
   public ResponseEntity<String> uploadFormData(@RequestPart("file") MultipartFile file) {
     val status = file != null ? OK : I_AM_A_TEAPOT;
+    String sanitizedFilename = StringEscapeUtils.escapeHtml4(file.getOriginalFilename());
     return ResponseEntity.status(status)
-        .body(file.getOriginalFilename() + ':' + file.getContentType());
+        .body(sanitizedFilename + ':' + file.getContentType());
   }
 
   @PostMapping(path = "/submit/url", consumes = APPLICATION_FORM_URLENCODED_VALUE)

File: feign-form/src/test/java/feign/form/Server.java
Patch:
@@ -26,10 +26,10 @@
 import static org.springframework.http.MediaType.MULTIPART_FORM_DATA_VALUE;
 
 import java.io.IOException;
-import org.springframework.web.util.HtmlUtils;
 import java.util.Collection;
 import java.util.List;
 import lombok.val;
+import org.apache.commons.text.StringEscapeUtils;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
@@ -42,6 +42,7 @@
 import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.multipart.MultipartFile;
 import org.springframework.web.multipart.MultipartHttpServletRequest;
+import org.springframework.web.util.HtmlUtils;
 
 @Controller
 @SpringBootApplication
@@ -162,7 +163,7 @@ public ResponseEntity<String> uploadByteArrayParameter(MultipartHttpServletReque
   @PostMapping(path = "/upload/unknown_type", consumes = MULTIPART_FORM_DATA_VALUE)
   public ResponseEntity<String> uploadUnknownType(@RequestPart("file") MultipartFile file) {
     val status = file != null ? OK : I_AM_A_TEAPOT;
-    return ResponseEntity.status(status).body(file.getContentType());
+    return ResponseEntity.status(status).body(StringEscapeUtils.escapeHtml4(file.getContentType()));
   }
 
   @PostMapping(path = "/upload/form_data", consumes = MULTIPART_FORM_DATA_VALUE)

File: feign-form/src/test/java/feign/form/Server.java
Patch:
@@ -26,6 +26,7 @@
 import static org.springframework.http.MediaType.MULTIPART_FORM_DATA_VALUE;
 
 import java.io.IOException;
+import org.springframework.web.util.HtmlUtils;
 import java.util.Collection;
 import java.util.List;
 import lombok.val;
@@ -140,7 +141,8 @@ public ResponseEntity<Long> uploadWithDto(Dto dto, @RequestPart("file") Multipar
   @PostMapping(path = "/upload/byte_array", consumes = MULTIPART_FORM_DATA_VALUE)
   public ResponseEntity<String> uploadByteArray(@RequestPart("file") MultipartFile file) {
     val status = file != null ? OK : I_AM_A_TEAPOT;
-    return ResponseEntity.status(status).body(file.getOriginalFilename());
+    String safeFilename = HtmlUtils.htmlEscape(file.getOriginalFilename());
+    return ResponseEntity.status(status).body(safeFilename);
   }
 
   @PostMapping(path = "/upload/byte_array_parameter", consumes = MULTIPART_FORM_DATA_VALUE)

File: feign-form/src/test/java/feign/form/Server.java
Patch:
@@ -26,6 +26,7 @@
 import static org.springframework.http.MediaType.MULTIPART_FORM_DATA_VALUE;
 
 import java.io.IOException;
+import org.springframework.web.util.HtmlUtils;
 import java.util.Collection;
 import java.util.List;
 import lombok.val;
@@ -140,7 +141,8 @@ public ResponseEntity<Long> uploadWithDto(Dto dto, @RequestPart("file") Multipar
   @PostMapping(path = "/upload/byte_array", consumes = MULTIPART_FORM_DATA_VALUE)
   public ResponseEntity<String> uploadByteArray(@RequestPart("file") MultipartFile file) {
     val status = file != null ? OK : I_AM_A_TEAPOT;
-    return ResponseEntity.status(status).body(file.getOriginalFilename());
+    String safeFilename = HtmlUtils.htmlEscape(file.getOriginalFilename());
+    return ResponseEntity.status(status).body(safeFilename);
   }
 
   @PostMapping(path = "/upload/byte_array_parameter", consumes = MULTIPART_FORM_DATA_VALUE)

File: feign-form/src/test/java/feign/form/Server.java
Patch:
@@ -26,6 +26,7 @@
 import static org.springframework.http.MediaType.MULTIPART_FORM_DATA_VALUE;
 
 import java.io.IOException;
+import org.apache.commons.text.StringEscapeUtils;
 import java.util.Collection;
 import java.util.List;
 import lombok.val;
@@ -160,7 +161,7 @@ public ResponseEntity<String> uploadByteArrayParameter(MultipartHttpServletReque
   @PostMapping(path = "/upload/unknown_type", consumes = MULTIPART_FORM_DATA_VALUE)
   public ResponseEntity<String> uploadUnknownType(@RequestPart("file") MultipartFile file) {
     val status = file != null ? OK : I_AM_A_TEAPOT;
-    return ResponseEntity.status(status).body(file.getContentType());
+    return ResponseEntity.status(status).body(StringEscapeUtils.escapeHtml4(file.getContentType()));
   }
 
   @PostMapping(path = "/upload/form_data", consumes = MULTIPART_FORM_DATA_VALUE)

File: feign-form/src/test/java/feign/form/Server.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.IOException;
 import java.util.Collection;
 import java.util.List;
+import org.apache.commons.text.StringEscapeUtils;
 import lombok.val;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.http.HttpStatus;
@@ -166,8 +167,9 @@ public ResponseEntity<String> uploadUnknownType(@RequestPart("file") MultipartFi
   @PostMapping(path = "/upload/form_data", consumes = MULTIPART_FORM_DATA_VALUE)
   public ResponseEntity<String> uploadFormData(@RequestPart("file") MultipartFile file) {
     val status = file != null ? OK : I_AM_A_TEAPOT;
+    String sanitizedFilename = StringEscapeUtils.escapeHtml4(file.getOriginalFilename());
     return ResponseEntity.status(status)
-        .body(file.getOriginalFilename() + ':' + file.getContentType());
+        .body(sanitizedFilename + ':' + file.getContentType());
   }
 
   @PostMapping(path = "/submit/url", consumes = APPLICATION_FORM_URLENCODED_VALUE)

File: feign-form-spring/src/test/java/feign/form/feign/spring/Server.java
Patch:
@@ -22,6 +22,7 @@
 import static org.springframework.http.MediaType.MULTIPART_FORM_DATA_VALUE;
 
 import java.io.IOException;
+import org.springframework.web.util.HtmlUtils;
 import java.util.Map;
 import lombok.val;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -80,7 +81,7 @@ public String upload4(
       @PathVariable("id") String id,
       @RequestBody Map<String, Object> map,
       @RequestParam String userName) {
-    return userName + ':' + id + ':' + map.size();
+    return HtmlUtils.htmlEscape(userName) + ':' + HtmlUtils.htmlEscape(id) + ':' + map.size();
   }
 
   @PostMapping(path = "/multipart/upload5", consumes = MULTIPART_FORM_DATA_VALUE)

File: feign-form-spring/src/test/java/feign/form/feign/spring/Server.java
Patch:
@@ -22,6 +22,7 @@
 import static org.springframework.http.MediaType.MULTIPART_FORM_DATA_VALUE;
 
 import java.io.IOException;
+import org.apache.commons.text.StringEscapeUtils;
 import java.util.Map;
 import lombok.val;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -99,7 +100,7 @@ public ResponseEntity<String> upload6(
     String result = "";
     if (popa1 != null && popa2 != null) {
       status = OK;
-      result = new String(popa1.getBytes()) + new String(popa2.getBytes());
+      result = StringEscapeUtils.escapeHtml4(new String(popa1.getBytes())) + StringEscapeUtils.escapeHtml4(new String(popa2.getBytes()));
     }
     return ResponseEntity.status(status).body(result);
   }

File: micrometer/src/main/java/feign/micrometer/MeteredAsyncClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -24,7 +24,7 @@
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 
-/** Warp feign {@link Client} with metrics. */
+/** Wrap feign {@link Client} with metrics. */
 public class MeteredAsyncClient extends BaseMeteredClient implements AsyncClient<Object> {
 
   private final AsyncClient<Object> client;

File: micrometer/src/main/java/feign/micrometer/MeteredClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -22,7 +22,7 @@
 import io.micrometer.core.instrument.Timer;
 import java.io.IOException;
 
-/** Warp feign {@link Client} with metrics. */
+/** Wrap feign {@link Client} with metrics. */
 public class MeteredClient extends BaseMeteredClient implements Client {
 
   private final Client client;

File: micrometer/src/main/java/feign/micrometer/MeteredDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -23,7 +23,7 @@
 import java.lang.reflect.Type;
 import java.util.Optional;
 
-/** Warp feign {@link Decoder} with metrics. */
+/** Wrap feign {@link Decoder} with metrics. */
 public class MeteredDecoder implements Decoder {
 
   private final Decoder decoder;

File: micrometer/src/main/java/feign/micrometer/MeteredEncoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -21,7 +21,7 @@
 import io.micrometer.core.instrument.*;
 import java.lang.reflect.Type;
 
-/** Warp feign {@link Encoder} with metrics. */
+/** Wrap feign {@link Encoder} with metrics. */
 public class MeteredEncoder implements Encoder {
 
   private final Encoder encoder;

File: micrometer/src/main/java/feign/micrometer/MeteredInvocationHandleFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -23,7 +23,7 @@
 import java.util.List;
 import java.util.Map;
 
-/** Warp feign {@link InvocationHandler} with metrics. */
+/** Wrap feign {@link InvocationHandler} with metrics. */
 public class MeteredInvocationHandleFactory implements InvocationHandlerFactory {
 
   /**

File: micrometer/src/main/java/feign/micrometer/MicrometerObservationCapability.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -21,7 +21,7 @@
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationRegistry;
 
-/** Warp feign {@link Client} with metrics. */
+/** Wrap feign {@link Client} with metrics. */
 public class MicrometerObservationCapability implements Capability {
 
   private final ObservationRegistry observationRegistry;

File: src/test/java/feign/vertx/testcase/domain/IceCreamOrder.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.time.Instant;
 import java.util.HashMap;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
@@ -26,7 +26,7 @@ public IceCreamOrder() {
   IceCreamOrder(final Instant orderTimestamp) {
     this.id = ThreadLocalRandom.current().nextInt();
     this.balls = new HashMap<>();
-    this.mixins = new HashSet<>();
+    this.mixins = new LinkedHashSet<>();
     this.orderTimestamp = orderTimestamp;
   }
 

File: micrometer/src/main/java/feign/micrometer/MeteredAsyncClient.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 
-/** Warp feign {@link Client} with metrics. */
+/** Wrap feign {@link Client} with metrics. */
 public class MeteredAsyncClient extends BaseMeteredClient implements AsyncClient<Object> {
 
   private final AsyncClient<Object> client;

File: micrometer/src/main/java/feign/micrometer/MeteredClient.java
Patch:
@@ -22,7 +22,7 @@
 import io.micrometer.core.instrument.Timer;
 import java.io.IOException;
 
-/** Warp feign {@link Client} with metrics. */
+/** Wrap feign {@link Client} with metrics. */
 public class MeteredClient extends BaseMeteredClient implements Client {
 
   private final Client client;

File: micrometer/src/main/java/feign/micrometer/MeteredDecoder.java
Patch:
@@ -23,7 +23,7 @@
 import java.lang.reflect.Type;
 import java.util.Optional;
 
-/** Warp feign {@link Decoder} with metrics. */
+/** Wrap feign {@link Decoder} with metrics. */
 public class MeteredDecoder implements Decoder {
 
   private final Decoder decoder;

File: micrometer/src/main/java/feign/micrometer/MeteredEncoder.java
Patch:
@@ -21,7 +21,7 @@
 import io.micrometer.core.instrument.*;
 import java.lang.reflect.Type;
 
-/** Warp feign {@link Encoder} with metrics. */
+/** Wrap feign {@link Encoder} with metrics. */
 public class MeteredEncoder implements Encoder {
 
   private final Encoder encoder;

File: micrometer/src/main/java/feign/micrometer/MeteredInvocationHandleFactory.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 import java.util.Map;
 
-/** Warp feign {@link InvocationHandler} with metrics. */
+/** Wrap feign {@link InvocationHandler} with metrics. */
 public class MeteredInvocationHandleFactory implements InvocationHandlerFactory {
 
   /**

File: micrometer/src/main/java/feign/micrometer/MicrometerObservationCapability.java
Patch:
@@ -21,7 +21,7 @@
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationRegistry;
 
-/** Warp feign {@link Client} with metrics. */
+/** Wrap feign {@link Client} with metrics. */
 public class MicrometerObservationCapability implements Capability {
 
   private final ObservationRegistry observationRegistry;

File: src/test/java/feign/vertx/testcase/domain/IceCreamOrder.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.time.Instant;
 import java.util.HashMap;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
@@ -26,7 +26,7 @@ public class IceCreamOrder {
   IceCreamOrder(final Instant orderTimestamp) {
     this.id = ThreadLocalRandom.current().nextInt();
     this.balls = new HashMap<>();
-    this.mixins = new HashSet<>();
+    this.mixins = new LinkedHashSet<>();
     this.orderTimestamp = orderTimestamp;
   }
 

File: core/src/main/java/feign/Logger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -15,6 +15,7 @@
 
 import static feign.Util.UTF_8;
 import static feign.Util.decodeOrDefault;
+import static feign.Util.ensureClosed;
 import static feign.Util.valuesOrEmpty;
 import static java.util.Objects.nonNull;
 
@@ -120,6 +121,7 @@ protected Response logAndRebufferResponse(
           log(configKey, ""); // CRLF
         }
         byte[] bodyData = Util.toByteArray(response.body().asInputStream());
+        ensureClosed(response.body());
         bodyLength = bodyData.length;
         if (logLevel.ordinal() >= Level.FULL.ordinal() && bodyLength > 0) {
           log(configKey, "%s", decodeOrDefault(bodyData, UTF_8, "Binary data"));

File: core/src/main/java/feign/Client.java
Patch:
@@ -137,9 +137,9 @@ Response convertResponse(HttpURLConnection connection, Request request) throws I
       } else {
         stream = connection.getInputStream();
       }
-      if (this.isGzip(headers.get(CONTENT_ENCODING))) {
+      if (stream != null && this.isGzip(headers.get(CONTENT_ENCODING))) {
         stream = new GZIPInputStream(stream);
-      } else if (this.isDeflate(headers.get(CONTENT_ENCODING))) {
+      } else if (stream != null && this.isDeflate(headers.get(CONTENT_ENCODING))) {
         stream = new InflaterInputStream(stream);
       }
       return Response.builder()

File: feign-form/src/main/java/feign/form/FormEncoder.java
Patch:
@@ -83,13 +83,13 @@ public void encode(Object object, Type bodyType, RequestTemplate template)
       throws EncodeException {
     String contentTypeValue = getContentTypeValue(template.headers());
     val contentType = ContentType.of(contentTypeValue);
-    if (!processors.containsKey(contentType)) {
+    if (processors.containsKey(contentType) == false) {
       delegate.encode(object, bodyType, template);
       return;
     }
 
     Map<String, Object> data;
-    if (MAP_STRING_WILDCARD.equals(bodyType)) {
+    if (object instanceof Map) {
       data = (Map<String, Object>) object;
     } else if (isUserPojo(bodyType)) {
       data = toMap(object);

File: feign-form/src/test/java/feign/form/Server.java
Patch:
@@ -34,7 +34,6 @@
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
-import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
@@ -119,7 +118,7 @@ public ResponseEntity<String> json(@RequestBody Dto dto) {
     return ResponseEntity.status(status).body("ok");
   }
 
-  @GetMapping("/query_map")
+  @PostMapping("/query_map")
   public ResponseEntity<Integer> queryMap(@RequestParam("filter") List<String> filters) {
     val status = filters != null && !filters.isEmpty() ? OK : I_AM_A_TEAPOT;
     return ResponseEntity.status(status).body(filters.size());

File: feign-form-spring/src/main/java/feign/form/spring/converter/SpringManyMultipartFilesReader.java
Patch:
@@ -124,7 +124,7 @@ protected void writeInternal(
 
   private byte[] getMultiPartBoundary(MediaType contentType) {
     val boundaryString = unquote(contentType.getParameter("boundary"));
-    if (StringUtils.isEmpty(boundaryString)) {
+    if (StringUtils.hasLength(boundaryString) == false) {
       throw new HttpMessageConversionException("Content-Type missing boundary information.");
     }
     return boundaryString.getBytes(UTF_8);
@@ -161,7 +161,7 @@ private Map<String, String> splitIntoKeyValuePairs(
       Pattern keyValueSeparatorPattern,
       boolean unquoteValue) {
     val keyValuePairs = new IgnoreKeyCaseMap();
-    if (!StringUtils.isEmpty(str)) {
+    if (StringUtils.hasLength(str)) {
       val tokens = entriesSeparatorPattern.split(str);
       for (val token : tokens) {
         val pair = keyValueSeparatorPattern.split(token.trim(), 2);

File: feign-form/src/main/java/feign/form/MultipartFormContentProcessor.java
Patch:
@@ -19,7 +19,6 @@
 import static feign.form.ContentType.MULTIPART;
 import static lombok.AccessLevel.PRIVATE;
 
-import feign.Request;
 import feign.RequestTemplate;
 import feign.codec.EncodeException;
 import feign.codec.Encoder;
@@ -104,8 +103,7 @@ public void process(RequestTemplate template, Charset charset, Map<String, Objec
       // Feign's clients try to determine binary/string content by charset presence
       // so, I set it to null (in spite of availability charset) for backward compatibility.
       val bytes = output.toByteArray();
-      val body = Request.Body.encoded(bytes, null);
-      template.body(body);
+      template.body(bytes, null);
     } catch (IOException ex) {
       throw new EncodeException("Output closing error", ex);
     }

File: feign-form/src/main/java/feign/form/multipart/DelegateWriter.java
Patch:
@@ -47,7 +47,7 @@ public boolean isApplicable(Object value) {
   protected void write(Output output, String key, Object value) throws EncodeException {
     val fake = new RequestTemplate();
     delegate.encode(value, value.getClass(), fake);
-    val bytes = fake.requestBody().asBytes();
+    val bytes = fake.body();
     val string = new String(bytes, output.getCharset()).replaceAll("\n", "");
     parameterWriter.write(output, key, string);
   }

File: feign-form/src/test/java/feign/form/BasicClientTest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.DEFINED_PORT;
 
 import feign.Feign;
+import feign.Logger.JavaLogger;
 import feign.Response;
 import feign.jackson.JacksonEncoder;
 import java.io.File;
@@ -43,7 +44,7 @@ class BasicClientTest {
     API =
         Feign.builder()
             .encoder(new FormEncoder(new JacksonEncoder()))
-            .logger(new feign.Logger.JavaLogger().appendToFile("log.txt"))
+            .logger(new JavaLogger(BasicClientTest.class).appendToFile("log.txt"))
             .logLevel(FULL)
             .target(TestClient.class, "http://localhost:8080");
   }

File: feign-form/src/test/java/feign/form/ByteArrayClientTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import feign.Feign;
 import feign.Headers;
+import feign.Logger.JavaLogger;
 import feign.Param;
 import feign.RequestLine;
 import feign.Response;
@@ -41,7 +42,7 @@ class ByteArrayClientTest {
     API =
         Feign.builder()
             .encoder(encoder)
-            .logger(new feign.Logger.JavaLogger().appendToFile("log-byte.txt"))
+            .logger(new JavaLogger(ByteArrayClientTest.class).appendToFile("log-byte.txt"))
             .logLevel(FULL)
             .target(CustomClient.class, "http://localhost:8080");
   }

File: feign-form/src/test/java/feign/form/CustomClientTest.java
Patch:
@@ -23,6 +23,7 @@
 
 import feign.Feign;
 import feign.Headers;
+import feign.Logger.JavaLogger;
 import feign.Param;
 import feign.RequestLine;
 import feign.codec.EncodeException;
@@ -46,7 +47,7 @@ class CustomClientTest {
     API =
         Feign.builder()
             .encoder(encoder)
-            .logger(new feign.Logger.JavaLogger().appendToFile("log.txt"))
+            .logger(new JavaLogger(CustomClientTest.class).appendToFile("log.txt"))
             .logLevel(FULL)
             .target(CustomClient.class, "http://localhost:8080");
   }

File: feign-form/src/test/java/feign/form/FormPropertyTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import feign.Feign;
 import feign.Headers;
+import feign.Logger.JavaLogger;
 import feign.RequestLine;
 import feign.jackson.JacksonEncoder;
 import lombok.val;
@@ -37,7 +38,7 @@ class FormPropertyTest {
     API =
         Feign.builder()
             .encoder(new FormEncoder(new JacksonEncoder()))
-            .logger(new feign.Logger.JavaLogger().appendToFile("log.txt"))
+            .logger(new JavaLogger(FormPropertyTest.class).appendToFile("log.txt"))
             .logLevel(FULL)
             .target(FormClient.class, "http://localhost:8080");
   }

File: feign-form/src/test/java/feign/form/WildCardMapTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import feign.Feign;
 import feign.Headers;
-import feign.Logger;
+import feign.Logger.JavaLogger;
 import feign.RequestLine;
 import feign.Response;
 import java.util.HashMap;
@@ -41,7 +41,7 @@ static void configureClient() {
     api =
         Feign.builder()
             .encoder(new FormEncoder())
-            .logger(new Logger.JavaLogger().appendToFile("log.txt"))
+            .logger(new JavaLogger(WildCardMapTest.class).appendToFile("log.txt"))
             .logLevel(FULL)
             .target(FormUrlEncodedApi.class, "http://localhost:8080");
   }

File: core/src/main/java/feign/Client.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -191,7 +191,7 @@ HttpURLConnection convertAndSend(Request request, Options options) throws IOExce
             }
           }
           // Avoid add "Accept-encoding" twice or more when "compression" option is enabled
-          if (field.equals(ACCEPT_ENCODING)) {
+          else if (field.equals(ACCEPT_ENCODING)) {
             connection.addRequestProperty(field, String.join(", ", request.headers().get(field)));
             break;
           } else {

File: okhttp/src/main/java/feign/okhttp/OkHttpClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -94,7 +94,7 @@ static Request toOkHttpRequest(feign.Request input) {
   private static feign.Response toFeignResponse(Response response, feign.Request request)
       throws IOException {
     return feign.Response.builder()
-        .protocolVersion(enumForName(ProtocolVersion.class, response.protocol()))
+        .protocolVersion(enumForName(ProtocolVersion.class, response.protocol().name()))
         .status(response.code())
         .reason(response.message())
         .request(request)

File: jaxrs3/src/main/java/feign/jaxrs3/JAXRS3Contract.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: core/src/test/java/feign/AsyncFeignTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -60,8 +60,8 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import okio.Buffer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Disabled;

File: core/src/test/java/feign/BaseApiTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -19,8 +19,8 @@
 import com.google.gson.reflect.TypeToken;
 import java.io.IOException;
 import java.util.List;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 

File: core/src/test/java/feign/ContractWithRuntimeInjectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -19,8 +19,8 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.BeanFactory;

File: core/src/test/java/feign/FeignBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -37,8 +37,8 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.stream.Stream;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.assertj.core.data.MapEntry;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;

File: core/src/test/java/feign/LoggerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -26,8 +26,8 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;

File: core/src/test/java/feign/MethodMetadataPresenceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -21,8 +21,8 @@
 import feign.codec.Decoder;
 import feign.codec.Encoder;
 import java.io.IOException;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 

File: core/src/test/java/feign/OptionsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -20,8 +20,8 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.junit.jupiter.api.Test;
 
 /**

File: core/src/test/java/feign/TargetTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -18,8 +18,8 @@
 import feign.Target.HardCodedTarget;
 import java.io.IOException;
 import java.net.URI;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 

File: core/src/test/java/feign/assertj/MockWebServerAssertions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -13,7 +13,7 @@
  */
 package feign.assertj;
 
-import mockwebserver3.RecordedRequest;
+import okhttp3.mockwebserver.RecordedRequest;
 import org.assertj.core.api.Assertions;
 
 public class MockWebServerAssertions extends Assertions {

File: core/src/test/java/feign/assertj/RecordedRequestAssert.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -28,8 +28,8 @@
 import java.util.Set;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.InflaterInputStream;
-import mockwebserver3.RecordedRequest;
 import okhttp3.Headers;
+import okhttp3.mockwebserver.RecordedRequest;
 import org.assertj.core.api.AbstractAssert;
 import org.assertj.core.data.MapEntry;
 import org.assertj.core.internal.ByteArrays;

File: core/src/test/java/feign/optionals/OptionalDecoderTests.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -20,8 +20,8 @@
 import feign.codec.Decoder;
 import java.io.IOException;
 import java.util.Optional;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.junit.jupiter.api.Test;
 
 class OptionalDecoderTests {

File: core/src/test/java/feign/stream/StreamDecoderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -31,8 +31,8 @@
 import java.util.Iterator;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.junit.jupiter.api.Test;
 
 @SuppressWarnings("deprecation")

File: googlehttpclient/src/test/java/feign/googlehttpclient/GoogleHttpClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -25,7 +25,7 @@
 import feign.assertj.MockWebServerAssertions;
 import feign.client.AbstractClientTest;
 import java.util.Collections;
-import mockwebserver3.MockResponse;
+import okhttp3.mockwebserver.MockResponse;
 import org.junit.jupiter.api.Test;
 
 public class GoogleHttpClientTest extends AbstractClientTest {

File: hc5/src/test/java/feign/hc5/ApacheHttp5ClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -29,8 +29,8 @@
 import javax.ws.rs.PUT;
 import javax.ws.rs.Path;
 import javax.ws.rs.QueryParam;
-import mockwebserver3.MockResponse;
-import mockwebserver3.RecordedRequest;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.RecordedRequest;
 import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
 import org.junit.jupiter.api.Test;
 

File: hc5/src/test/java/feign/hc5/AsyncApacheHttp5ClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -75,8 +75,8 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import okio.Buffer;
 import org.apache.hc.client5.http.protocol.HttpClientContext;
 import org.junit.jupiter.api.AfterEach;

File: hc5/src/test/java/feign/hc5/GzipHttp5ClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -24,8 +24,8 @@
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.util.zip.GZIPInputStream;
-import mockwebserver3.MockResponse;
-import mockwebserver3.RecordedRequest;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.RecordedRequest;
 import org.junit.jupiter.api.Test;
 
 /** Tests that 'Content-Encoding: gzip' is handled correctly */

File: httpclient/src/test/java/feign/httpclient/ApacheHttpClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -28,8 +28,8 @@
 import javax.ws.rs.PUT;
 import javax.ws.rs.Path;
 import javax.ws.rs.QueryParam;
-import mockwebserver3.MockResponse;
-import mockwebserver3.RecordedRequest;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.RecordedRequest;
 import org.apache.http.impl.client.HttpClientBuilder;
 import org.junit.jupiter.api.Test;
 

File: hystrix/src/test/java/feign/hystrix/FallbackFactoryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -21,8 +21,8 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 

File: hystrix/src/test/java/feign/hystrix/HystrixBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -35,8 +35,8 @@
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 import rx.Completable;

File: hystrix/src/test/java/feign/hystrix/SetterFactoryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -22,8 +22,8 @@
 import com.netflix.hystrix.exception.HystrixRuntimeException;
 import feign.RequestLine;
 import java.io.IOException;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 

File: java11/src/test/java/feign/http2client/test/Http2ClientAsyncTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -77,8 +77,8 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import okio.Buffer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;

File: java11/src/test/java/feign/http2client/test/Http2ClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -29,7 +29,7 @@
 import java.io.IOException;
 import java.net.http.HttpTimeoutException;
 import java.util.concurrent.TimeUnit;
-import mockwebserver3.MockResponse;
+import okhttp3.mockwebserver.MockResponse;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 

File: jaxrs2/src/test/java/feign/jaxrs2/JAXRSClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -34,7 +34,7 @@
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
 import javax.ws.rs.ProcessingException;
-import mockwebserver3.MockResponse;
+import okhttp3.mockwebserver.MockResponse;
 import org.assertj.core.data.MapEntry;
 import org.junit.jupiter.api.Assumptions;
 import org.junit.jupiter.api.Test;

File: okhttp/src/test/java/feign/okhttp/OkHttpClientAsyncTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -76,8 +76,8 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import okio.Buffer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;

File: okhttp/src/test/java/feign/okhttp/OkHttpClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -28,7 +28,7 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.concurrent.TimeUnit;
-import mockwebserver3.MockResponse;
+import okhttp3.mockwebserver.MockResponse;
 import org.assertj.core.data.MapEntry;
 import org.junit.jupiter.api.Test;
 

File: reactive/src/test/java/feign/reactive/ReactiveFeignIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -55,8 +55,8 @@
 import java.util.List;
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 import org.mockito.AdditionalAnswers;

File: ribbon/src/test/java/feign/ribbon/LoadBalancingTargetTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -20,8 +20,8 @@
 import feign.RequestLine;
 import java.io.IOException;
 import java.net.URL;
-import mockwebserver3.MockResponse;
-import mockwebserver3.MockWebServer;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 

File: jackson-jr/src/main/java/feign/jackson/jr/JacksonJrDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2023 The Feign Authors
+ * Copyright 2012-2024 The Feign Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -32,7 +32,7 @@
 public class JacksonJrDecoder extends JacksonJrMapper implements Decoder {
 
   @FunctionalInterface
-  interface Transformer {
+  protected interface Transformer {
     Object apply(JSON mapper, Reader reader) throws IOException;
   }
 
@@ -90,7 +90,7 @@ public Object decode(Response response, Type type) throws IOException {
     }
   }
 
-  private static Transformer findTransformer(Response response, Type type) {
+  protected Transformer findTransformer(Response response, Type type) {
     if (type instanceof Class) {
       return (mapper, reader) -> mapper.beanFrom((Class<?>) type, reader);
     }

File: core/src/main/java/feign/Response.java
Patch:
@@ -220,7 +220,8 @@ public Charset charset() {
 
   @Override
   public String toString() {
-    StringBuilder builder = new StringBuilder("HTTP/1.1 ").append(status);
+    StringBuilder builder =
+        new StringBuilder(protocolVersion.toString()).append(" ").append(status);
     if (reason != null) builder.append(' ').append(reason);
     builder.append('\n');
     for (String field : headers.keySet()) {

File: reactive/src/main/java/feign/reactive/ReactiveDelegatingContract.java
Patch:
@@ -56,7 +56,7 @@ public List<MethodMetadata> parseAndValidateMetadata(Class<?> targetType) {
           throw new IllegalArgumentException(
               "Streams are not supported when using Reactive Wrappers");
         }
-        metadata.returnType(actualTypes[0]);
+        metadata.returnType(type);
       }
     }
 

File: reactive/src/main/java/feign/reactive/ReactorInvocationHandler.java
Patch:
@@ -35,7 +35,7 @@ public class ReactorInvocationHandler extends ReactiveInvocationHandler {
   protected Publisher invoke(Method method, MethodHandler methodHandler, Object[] arguments) {
     Publisher<?> invocation = this.invokeMethod(methodHandler, arguments);
     if (Flux.class.isAssignableFrom(method.getReturnType())) {
-      return Flux.from(invocation).subscribeOn(scheduler);
+      return Flux.from(invocation).flatMapIterable(e -> (Iterable) e).subscribeOn(scheduler);
     } else if (Mono.class.isAssignableFrom(method.getReturnType())) {
       return Mono.from(invocation).subscribeOn(scheduler);
     }

File: java11/src/main/java/feign/http2client/Http2Client.java
Patch:
@@ -98,7 +98,7 @@ public Response execute(Request request, Options options) throws IOException {
       httpResponse = clientForRequest.send(httpRequest, BodyHandlers.ofByteArray());
     } catch (final InterruptedException e) {
       Thread.currentThread().interrupt();
-      throw new IOException("Invalid uri " + request.url(), e);
+      throw new IOException(e);
     }
 
     return toFeignResponse(request, httpResponse);

File: core/src/main/java/feign/FeignException.java
Patch:
@@ -289,12 +289,13 @@ private static FeignServerException serverErrorStatus(
   }
 
   static FeignException errorExecuting(Request request, IOException cause) {
+    final Long nonRetryable = null;
     return new RetryableException(
         -1,
         format("%s executing %s %s", cause.getMessage(), request.httpMethod(), request.url()),
         request.httpMethod(),
         cause,
-        null,
+        nonRetryable,
         request);
   }
 

File: core/src/test/java/feign/RetryableExceptionTest.java
Patch:
@@ -25,6 +25,7 @@ public class RetryableExceptionTest {
   @Test
   public void createRetryableExceptionWithResponseAndResponseHeader() {
     // given
+    Long retryAfter = 5000L;
     Request request =
         Request.create(Request.HttpMethod.GET, "/", Collections.emptyMap(), null, Util.UTF_8);
     byte[] response = "response".getBytes(StandardCharsets.UTF_8);
@@ -33,10 +34,11 @@ public void createRetryableExceptionWithResponseAndResponseHeader() {
 
     // when
     RetryableException retryableException =
-        new RetryableException(-1, null, null, new Date(5000), request, response, responseHeader);
+        new RetryableException(-1, null, null, retryAfter, request, response, responseHeader);
 
     // then
     assertNotNull(retryableException);
+    assertEquals(retryAfter, retryableException.retryAfter());
     assertEquals(new String(response, UTF_8), retryableException.contentUTF8());
     assertTrue(retryableException.responseHeaders().containsKey("TEST_HEADER"));
     assertTrue(retryableException.responseHeaders().get("TEST_HEADER").contains("TEST_CONTENT"));

File: core/src/test/java/feign/UtilTest.java
Patch:
@@ -50,7 +50,7 @@ public void removesEmptyStrings() {
 
   @Test
   public void removesEvenNumbers() {
-    Integer[] values = new Integer[] {22, 23};
+    Integer[] values = {22, 23};
     assertThat(removeValues(values, number -> number % 2 == 0, Integer.class)).containsExactly(23);
   }
 
@@ -167,7 +167,7 @@ public void checkNotNullInputZeroNotNull0OutputZero() {
     // Act
     final Object retval = Util.checkNotNull(reference, errorMessageTemplate, errorMessageArgs);
     // Assert result
-    assertEquals(new Integer(0), retval);
+    assertEquals(0, retval);
   }
 
   @Test

File: core/src/test/java/feign/codec/DefaultEncoderTest.java
Patch:
@@ -18,8 +18,8 @@
 import static org.junit.Assert.assertTrue;
 
 import feign.RequestTemplate;
+import java.time.Clock;
 import java.util.Arrays;
-import java.util.Date;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -51,6 +51,6 @@ public void testRefusesToEncodeOtherTypes() throws Exception {
     thrown.expect(EncodeException.class);
     thrown.expectMessage("is not a type supported by this encoder.");
 
-    encoder.encode(new Date(), Date.class, new RequestTemplate());
+    encoder.encode(Clock.systemUTC(), Clock.class, new RequestTemplate());
   }
 }

File: jaxrs2/src/main/java/feign/jaxrs2/JAXRSClient.java
Patch:
@@ -88,7 +88,7 @@ private Integer integerHeader(Response response, String header) {
     }
 
     try {
-      return new Integer(headers.getFirst(header));
+      return Integer.valueOf(headers.getFirst(header));
     } catch (final NumberFormatException e) {
       // not a number or too big to fit Integer
       return null;

File: json/src/test/java/feign/json/JsonDecoderTest.java
Patch:
@@ -27,8 +27,8 @@
 import feign.codec.DecodeException;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
+import java.time.Clock;
 import java.util.Collections;
-import java.util.Date;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -162,9 +162,9 @@ public void unknownTypeThrowsDecodeException() throws IOException {
             .request(request)
             .build();
     Exception exception =
-        assertThrows(DecodeException.class, () -> new JsonDecoder().decode(response, Date.class));
+        assertThrows(DecodeException.class, () -> new JsonDecoder().decode(response, Clock.class));
     assertEquals(
-        "class java.util.Date is not a type supported by this decoder.", exception.getMessage());
+        "class java.time.Clock is not a type supported by this decoder.", exception.getMessage());
   }
 
   @Test

File: json/src/test/java/feign/json/JsonEncoderTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import feign.RequestTemplate;
 import feign.codec.EncodeException;
-import java.util.Date;
+import java.time.Clock;
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.junit.Before;
@@ -67,8 +67,8 @@ public void unknownTypeThrowsEncodeException() {
     Exception exception =
         assertThrows(
             EncodeException.class,
-            () -> new JsonEncoder().encode("qwerty", Date.class, new RequestTemplate()));
+            () -> new JsonEncoder().encode("qwerty", Clock.class, new RequestTemplate()));
     assertEquals(
-        "class java.util.Date is not a type supported by this encoder.", exception.getMessage());
+        "class java.time.Clock is not a type supported by this encoder.", exception.getMessage());
   }
 }

File: core/src/main/java/feign/template/Expressions.java
Patch:
@@ -88,8 +88,8 @@ public static Expression create(final String value) {
       /* we have a valid variable expression, extract the name from the first group */
       variableName = matcher.group(3).trim();
       if (variableName.contains(":")) {
-        /* split on the colon */
-        String[] parts = variableName.split(":");
+        /* split on the colon and ensure the size of parts array must be 2 */
+        String[] parts = variableName.split(":", 2);
         variableName = parts[0];
         variablePattern = parts[1];
       }

File: core/src/main/java/feign/Util.java
Patch:
@@ -61,6 +61,9 @@ public class Util {
   /** The HTTP Content-Encoding header field name. */
   public static final String CONTENT_ENCODING = "Content-Encoding";
 
+  /** The HTTP Accept-Encoding header field name. */
+  public static final String ACCEPT_ENCODING = "Accept-Encoding";
+
   /** The HTTP Retry-After header field name. */
   public static final String RETRY_AFTER = "Retry-After";
 

File: core/src/main/java/feign/AsyncResponseHandler.java
Patch:
@@ -34,6 +34,7 @@ class AsyncResponseHandler {
       ErrorDecoder errorDecoder,
       boolean dismiss404,
       boolean closeAfterDecode,
+      boolean decodeVoid,
       ResponseInterceptor responseInterceptor) {
     this.responseHandler =
         new ResponseHandler(
@@ -43,6 +44,7 @@ class AsyncResponseHandler {
             errorDecoder,
             dismiss404,
             closeAfterDecode,
+            decodeVoid,
             responseInterceptor);
   }
 

File: core/src/main/java/feign/template/Expressions.java
Patch:
@@ -39,10 +39,9 @@ public final class Expressions {
    *
    * <p>This is not a complete implementation of the rfc
    *
-   * <p><a href="https://www.rfc-editor.org/rfc/rfc6570#section-2.2>RFC 6570 Expressions</a>
+   * <p><a href="https://www.rfc-editor.org/rfc/rfc6570#section-2.2">RFC 6570 Expressions</a>
    */
-  private static final Pattern EXPRESSION_PATTERN =
-      Pattern.compile("^(\\{([+#./;?&=,!@|]?)(.+)})$");
+  static final Pattern EXPRESSION_PATTERN = Pattern.compile("^(\\{([+#./;?&=,!@|]?)(.+)\\})$");
 
   // Partially From:
   // https://stackoverflow.com/questions/29494608/regex-for-uri-templates-rfc-6570-wanted -- I

File: core/src/main/java/feign/querymap/BeanQueryMapEncoder.java
Patch:
@@ -38,6 +38,9 @@ public class BeanQueryMapEncoder implements QueryMapEncoder {
 
   @Override
   public Map<String, Object> encode(Object object) throws EncodeException {
+    if (object == null) {
+      return Collections.emptyMap();
+    }
     try {
       ObjectParamMetadata metadata = getMetadata(object.getClass());
       Map<String, Object> propertyNameToValue = new HashMap<String, Object>();

File: core/src/main/java/feign/querymap/FieldQueryMapEncoder.java
Patch:
@@ -39,6 +39,9 @@ public class FieldQueryMapEncoder implements QueryMapEncoder {
 
   @Override
   public Map<String, Object> encode(Object object) throws EncodeException {
+    if (object == null) {
+      return Collections.emptyMap();
+    }
     ObjectParamMetadata metadata =
         classToMetadata.computeIfAbsent(object.getClass(), ObjectParamMetadata::parseObjectType);
 

File: kotlin/src/main/java/feign/kotlin/CoroutineFeign.java
Patch:
@@ -166,6 +166,7 @@ public CoroutineFeign<C> build() {
                   .logLevel(logLevel)
                   .client((AsyncClient<Object>) client)
                   .decoder(decoder)
+                  .errorDecoder(errorDecoder)
                   .contract(contract)
                   .retryer(retryer)
                   .logger(logger)

File: dropwizard-metrics5/src/main/java/feign/metrics5/BaseMeteredClient.java
Patch:
@@ -51,6 +51,7 @@ protected void recordSuccess(RequestTemplate template, Response response) {
             httpResponseCode(template)
                 .tagged("http_status", String.valueOf(response.status()))
                 .tagged("status_group", response.status() / 100 + "xx")
+                .tagged("http_method", template.methodMetadata().template().method())
                 .tagged("uri", template.methodMetadata().template().path()))
         .inc();
   }
@@ -64,6 +65,7 @@ protected void recordFailure(RequestTemplate template, FeignException e) {
                     "root_cause_name", ExceptionUtils.getRootCause(e).getClass().getSimpleName())
                 .tagged("http_status", String.valueOf(e.status()))
                 .tagged("status_group", e.status() / 100 + "xx")
+                .tagged("http_method", template.methodMetadata().template().method())
                 .tagged("uri", template.methodMetadata().template().path()))
         .inc();
   }

File: micrometer/src/main/java/feign/micrometer/BaseMeteredClient.java
Patch:
@@ -50,6 +50,7 @@ protected void countResponseCode(
                 e,
                 Tag.of("http_status", String.valueOf(responseStatus)),
                 Tag.of("status_group", responseStatus / 100 + "xx"),
+                Tag.of("http_method", template.methodMetadata().template().method()),
                 Tag.of("uri", template.methodMetadata().template().path()))
             .and(extraTags);
     meterRegistry.counter(metricName.name("http_response_code"), allTags).increment();

File: example-wikipedia-with-springboot/src/main/java/example/wikipedia/WikipediaApplication.java
Patch:
@@ -16,8 +16,8 @@
 import example.wikipedia.WikipediaClient.Page;
 import example.wikipedia.WikipediaClient.Response;
 import example.wikipedia.WikipediaClient.Wikipedia;
+import jakarta.annotation.PostConstruct;
 import java.util.Iterator;
-import javax.annotation.PostConstruct;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java
Patch:
@@ -178,7 +178,8 @@ protected void registerParamAnnotations() {
   }
 
   // Not using override as the super-type's method is deprecated and will be removed.
-  private String addTemplatedParam(String name) {
+  // Protected so JAXRS2Contract can make use of this
+  protected String addTemplatedParam(String name) {
     return String.format("{%s}", name);
   }
 }

File: reactive/src/test/java/feign/reactive/ReactiveInvocationHandlerTest.java
Patch:
@@ -58,7 +58,7 @@ public void invokeOnSubscribeReactor() throws Throwable {
         new ReactorInvocationHandler(
             this.target,
             Collections.singletonMap(method, this.methodHandler),
-            Schedulers.elastic());
+            Schedulers.boundedElastic());
 
     Object result = handler.invoke(method, this.methodHandler, new Object[] {});
     assertThat(result).isInstanceOf(Mono.class);
@@ -76,7 +76,7 @@ public void invokeOnSubscribeEmptyReactor() throws Throwable {
         new ReactorInvocationHandler(
             this.target,
             Collections.singletonMap(method, this.methodHandler),
-            Schedulers.elastic());
+            Schedulers.boundedElastic());
 
     Object result = handler.invoke(method, this.methodHandler, new Object[] {});
     assertThat(result).isInstanceOf(Mono.class);
@@ -94,7 +94,7 @@ public void invokeFailureReactor() throws Throwable {
         new ReactorInvocationHandler(
             this.target,
             Collections.singletonMap(this.method, this.methodHandler),
-            Schedulers.elastic());
+            Schedulers.boundedElastic());
 
     Object result = handler.invoke(this.method, this.methodHandler, new Object[] {});
     assertThat(result).isInstanceOf(Mono.class);

File: httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java
Patch:
@@ -94,6 +94,7 @@ HttpUriRequest toHttpUriRequest(Request request, Request.Options options)
                 : RequestConfig.custom())
             .setConnectTimeout(options.connectTimeoutMillis())
             .setSocketTimeout(options.readTimeoutMillis())
+            .setRedirectsEnabled(options.isFollowRedirects())
             .build();
     requestBuilder.setConfig(requestConfig);
 

File: soap/src/main/java/feign/soap/SOAPEncoder.java
Patch:
@@ -90,7 +90,7 @@ public class SOAPEncoder implements Encoder {
   private final JAXBContextFactory jaxbContextFactory;
   private final String soapProtocol;
 
-  private SOAPEncoder(Builder builder) {
+  public SOAPEncoder(Builder builder) {
     this.jaxbContextFactory = builder.jaxbContextFactory;
     this.writeXmlDeclaration = builder.writeXmlDeclaration;
     this.charsetEncoding = builder.charsetEncoding;

File: core/src/main/java/feign/Feign.java
Patch:
@@ -219,7 +219,7 @@ public Feign build() {
               queryMapEncoder,
               errorDecoder,
               synchronousMethodHandlerFactory);
-      return new ReflectiveFeign<>(handlersByName, invocationHandlerFactory, queryMapEncoder);
+      return new ReflectiveFeign<>(handlersByName, invocationHandlerFactory, () -> null);
     }
   }
 

File: slf4j/src/test/java/feign/slf4j/Slf4jLoggerTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.slf4j.LoggerFactory;
-import org.slf4j.impl.RecordingSimpleLogger;
+import org.slf4j.simple.RecordingSimpleLogger;
 
 @SuppressWarnings("deprecation")
 public class Slf4jLoggerTest {

File: slf4j/src/test/java/org/slf4j/simple/RecordingSimpleLogger.java
Patch:
@@ -11,11 +11,11 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package org.slf4j.impl;
+package org.slf4j.simple;
 
 import static org.junit.Assert.assertEquals;
-import static org.slf4j.impl.SimpleLogger.DEFAULT_LOG_LEVEL_KEY;
-import static org.slf4j.impl.SimpleLogger.SHOW_THREAD_NAME_KEY;
+import static org.slf4j.simple.SimpleLogger.DEFAULT_LOG_LEVEL_KEY;
+import static org.slf4j.simple.SimpleLogger.SHOW_THREAD_NAME_KEY;
 
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;

File: core/src/main/java/feign/Feign.java
Patch:
@@ -189,7 +189,7 @@ public Builder addCapability(Capability capability) {
     }
 
     /** Internal - used to indicate that the decoder should be immediately called */
-    Builder forceDecoding() {
+    public /* FIXME should not be public */ Builder forceDecoding() {
       this.forceDecoding = true;
       return this;
     }

File: core/src/main/java/feign/MethodInfo.java
Patch:
@@ -19,12 +19,12 @@
 import java.util.concurrent.CompletableFuture;
 
 @Experimental
-class MethodInfo {
+public class MethodInfo {
   private final String configKey;
   private final Type underlyingReturnType;
   private final boolean asyncReturnType;
 
-  MethodInfo(String configKey, Type underlyingReturnType, boolean asyncReturnType) {
+  protected MethodInfo(String configKey, Type underlyingReturnType, boolean asyncReturnType) {
     this.configKey = configKey;
     this.underlyingReturnType = underlyingReturnType;
     this.asyncReturnType = asyncReturnType;

File: core/src/main/java/feign/Feign.java
Patch:
@@ -95,6 +95,7 @@ public static class Builder extends BaseBuilder<Builder> {
 
     public Builder client(Client client) {
       this.client = client;
+
       return this;
     }
 
@@ -120,6 +121,7 @@ public Feign build() {
               client,
               retryer,
               requestInterceptors,
+              responseInterceptor,
               logger,
               logLevel,
               dismiss404,

File: core/src/test/java/feign/BaseBuilderTest.java
Patch:
@@ -66,7 +66,7 @@ private List<String> getExclusiveMethods(Class<?> clazz) {
   @Test
   public void checkEnrichTouchesAllAsyncBuilderFields()
       throws IllegalArgumentException, IllegalAccessException {
-    test(AsyncFeign.asyncBuilder().requestInterceptor(template -> {}), 12);
+    test(AsyncFeign.asyncBuilder().requestInterceptor(template -> {}), 13);
   }
 
   private void test(BaseBuilder<?> builder, int expectedFieldsCount)
@@ -90,6 +90,6 @@ private void test(BaseBuilder<?> builder, int expectedFieldsCount)
   @Test
   public void checkEnrichTouchesAllBuilderFields()
       throws IllegalArgumentException, IllegalAccessException {
-    test(Feign.builder().requestInterceptor(template -> {}), 11);
+    test(Feign.builder().requestInterceptor(template -> {}), 12);
   }
 }

File: dropwizard-metrics5/src/main/java/feign/metrics5/FeignMetricName.java
Patch:
@@ -21,7 +21,7 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 
-public final class FeignMetricName {
+final class FeignMetricName {
 
   private final Class<?> meteredComponent;
 

File: core/src/main/java/feign/Contract.java
Patch:
@@ -133,7 +133,8 @@ protected MethodMetadata parseAndValidateMetadata(Class<?> targetType, Method me
 
         if (parameterTypes[i] == URI.class) {
           data.urlIndex(i);
-        } else if (!isHttpAnnotation && parameterTypes[i] != Request.Options.class) {
+        } else if (!isHttpAnnotation
+            && !Request.Options.class.isAssignableFrom(parameterTypes[i])) {
           if (data.isAlreadyProcessed(i)) {
             checkState(
                 data.formParams().isEmpty() || data.bodyIndex() == null,

File: core/src/main/java/feign/Request.java
Patch:
@@ -46,7 +46,7 @@ public enum ProtocolVersion {
     HTTP_2("HTTP/2.0"),
     MOCK;
 
-    String protocolVersion;
+    final String protocolVersion;
 
     ProtocolVersion() {
       protocolVersion = name();

File: core/src/main/java/feign/template/Template.java
Patch:
@@ -331,7 +331,7 @@ public enum EncodingOptions {
     REQUIRED(true),
     NOT_REQUIRED(false);
 
-    private boolean shouldEncode;
+    private final boolean shouldEncode;
 
     EncodingOptions(boolean shouldEncode) {
       this.shouldEncode = shouldEncode;

File: core/src/test/java/feign/CapabilityTest.java
Patch:
@@ -13,7 +13,7 @@
  */
 package feign;
 
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 import feign.Request.Options;
 import java.io.IOException;

File: example-github/src/test/java/feign/example/github/GitHubExampleIT.java
Patch:
@@ -13,7 +13,7 @@
  */
 package feign.example.github;
 
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 import java.io.File;
 import java.util.Arrays;

File: example-wikipedia/src/test/java/feign/example/wikipedia/WikipediaExampleIT.java
Patch:
@@ -13,7 +13,7 @@
  */
 package feign.example.wikipedia;
 
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 import java.io.File;
 import java.util.Arrays;

File: mock/src/test/java/feign/mock/MockTargetTest.java
Patch:
@@ -13,8 +13,8 @@
  */
 package feign.mock;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.assertThat;
 
 import org.junit.Before;
 import org.junit.Test;

File: mock/src/test/java/feign/mock/RequestKeyTest.java
Patch:
@@ -13,13 +13,13 @@
  */
 package feign.mock;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.both;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.startsWith;
-import static org.junit.Assert.assertThat;
 
 import feign.Request;
 import java.nio.charset.StandardCharsets;

File: ribbon/src/test/java/feign/ribbon/RibbonClientTest.java
Patch:
@@ -15,11 +15,11 @@
 
 import static com.netflix.config.ConfigurationManager.getConfigInstance;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.IsEqual.equalTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 

File: micrometer/src/main/java/feign/micrometer/MeteredClient.java
Patch:
@@ -54,7 +54,6 @@ public Response execute(Request request, Options options) throws IOException {
       final Response response = client.execute(request, options);
       countResponseCode(request, response, options, response.status(), null);
       timer = createTimer(request, response, options, null);
-      sample.stop(timer);
       return response;
     } catch (FeignException e) {
       timer = createTimer(request, null, options, e);

File: httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: mock/src/main/java/feign/mock/MockClient.java
Patch:
@@ -17,6 +17,7 @@
 
 import feign.Client;
 import feign.Request;
+import feign.Request.ProtocolVersion;
 import feign.Response;
 import feign.Util;
 import java.io.IOException;
@@ -68,6 +69,7 @@ public synchronized Response execute(Request request, Request.Options options)
     } else {
       responseBuilder = executeAny(request, requestKey);
     }
+    responseBuilder.protocolVersion(ProtocolVersion.MOCK);
 
     return responseBuilder.request(request).build();
   }

File: core/src/main/java/feign/AsyncFeign.java
Patch:
@@ -64,7 +64,7 @@ public static class AsyncBuilder<C> {
     private AsyncClient<C> client;
 
     private Logger.Level logLevel = Logger.Level.NONE;
-    private final Logger logger = new NoOpLogger();
+    private Logger logger = new NoOpLogger();
 
     private Decoder decoder = new Decoder.Default();
     private ErrorDecoder errorDecoder = new ErrorDecoder.Default();
@@ -177,6 +177,7 @@ public AsyncBuilder<C> contract(Contract contract) {
      */
     public AsyncBuilder<C> logger(Logger logger) {
       builder.logger(logger);
+      this.logger = logger;
       return this;
     }
 

File: core/src/test/java/feign/MultipleLoggerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
@@ -41,7 +41,7 @@ public void testAppendSeveralFilesToOneJavaLogger() throws Exception {
   }
 
   @Test
-  public void testJavaLoggerInstantationWithLoggerName() throws Exception {
+  public void testJavaLoggerInstantiationWithLoggerName() throws Exception {
     Logger.JavaLogger l1 =
         new Logger.JavaLogger("First client").appendToFile(tmp.newFile("1.log").getAbsolutePath());
     Logger.JavaLogger l2 =

File: slf4j/src/main/java/feign/slf4j/Slf4jLogger.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: java11/src/test/java/feign/http2client/test/CustomPojo.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: soap/src/main/java/feign/soap/SOAPDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: soap/src/main/java/feign/soap/SOAPErrorDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: soap/src/test/java/feign/soap/SOAPCodecTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: soap/src/test/java/feign/soap/SOAPFaultDecoderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: soap/src/test/java/feign/soap/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: dropwizard-metrics4/src/test/java/feign/metrics4/Metrics4CapabilityTest.java
Patch:
@@ -69,7 +69,8 @@ protected Metric getMetric(String suffix, String... tags) {
               }
 
               for (int i = 0; i < tags.length; i += 2) {
-                if (!name.contains(tags[i]) && !name.contains(tags[i] + 1)) {
+                // metrics 4 doesn't support tags, for that reason we don't include tag name
+                if (!name.contains(tags[i + 1])) {
                   return false;
                 }
               }

File: micrometer/src/main/java/feign/micrometer/CountingInputStream.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: micrometer/src/main/java/feign/micrometer/MeteredBody.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: micrometer/src/main/java/feign/micrometer/MicrometerCapability.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: micrometer/src/test/java/feign/micrometer/AbstractMetricsTestBase.java
Patch:
@@ -101,7 +101,7 @@ public void clientPropagatesUncheckedException() {
         Feign.builder()
             .client(
                 (request, options) -> {
-                  notFound.set(new FeignException.NotFound("test", request, null));
+                  notFound.set(new FeignException.NotFound("test", request, null, null));
                   throw notFound.get();
                 })
             .addCapability(createMetricCapability())
@@ -130,7 +130,7 @@ public void decoderPropagatesUncheckedException() {
             .client(new MockClient().ok(HttpMethod.GET, "/get", "1234567890abcde"))
             .decoder(
                 (response, type) -> {
-                  notFound.set(new FeignException.NotFound("test", response.request(), null));
+                  notFound.set(new FeignException.NotFound("test", response.request(), null, null));
                   throw notFound.get();
                 })
             .addCapability(createMetricCapability())

File: core/src/main/java/feign/AsyncFeign.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
@@ -63,7 +63,7 @@ public static class AsyncBuilder<C> {
     private Supplier<C> defaultContextSupplier = () -> null;
     private AsyncClient<C> client;
 
-    private final Logger.Level logLevel = Logger.Level.NONE;
+    private Logger.Level logLevel = Logger.Level.NONE;
     private final Logger logger = new NoOpLogger();
 
     private Decoder decoder = new Decoder.Default();
@@ -160,6 +160,7 @@ public AsyncFeign<C> build() {
      */
     public AsyncBuilder<C> logLevel(Logger.Level logLevel) {
       builder.logLevel(logLevel);
+      this.logLevel = logLevel;
       return this;
     }
 

File: slf4j/src/test/java/feign/slf4j/Slf4jLoggerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2020 The Feign Authors
+ * Copyright 2012-2021 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
@@ -25,6 +25,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.slf4j.LoggerFactory;
+import org.slf4j.impl.RecordingSimpleLogger;
 
 @SuppressWarnings("deprecation")
 public class Slf4jLoggerTest {

File: core/src/main/java/feign/FeignException.java
Patch:
@@ -430,11 +430,11 @@ private static String getResponseBodyPreview(byte[] body, Charset charset) {
     private static Charset getResponseCharset(Map<String, Collection<String>> headers) {
 
       Collection<String> strings = headers.get("content-type");
-      if (strings == null || strings.size() == 0) {
+      if (strings == null || strings.isEmpty()) {
         return null;
       }
 
-      Pattern pattern = Pattern.compile("charset=([^\\s])");
+      Pattern pattern = Pattern.compile(".*charset=([^\\s|^;]+).*");
       Matcher matcher = pattern.matcher(strings.iterator().next());
       if (!matcher.lookingAt()) {
         return null;

File: jackson/src/main/java/feign/jackson/JacksonDecoder.java
Patch:
@@ -18,7 +18,6 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.RuntimeJsonMappingException;
 import feign.Response;
-import feign.Util;
 import feign.codec.Decoder;
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -48,7 +47,7 @@ public JacksonDecoder(ObjectMapper mapper) {
   @Override
   public Object decode(Response response, Type type) throws IOException {
     if (response.body() == null) return null;
-    Reader reader = response.body().asReader(Util.UTF_8);
+    Reader reader = response.body().asReader(response.charset());
     if (!reader.markSupported()) {
       reader = new BufferedReader(reader, 1);
     }

File: core/src/test/java/feign/ResponseTest.java
Patch:
@@ -41,7 +41,7 @@ public void reasonPhraseIsOptional() {
             .build();
 
     assertThat(response.reason()).isNull();
-    assertThat(response.toString()).isEqualTo("HTTP/1.1 200\n\n");
+    assertThat(response.toString()).startsWith("HTTP/1.1 200");
   }
 
   @Test

File: okhttp/src/test/java/feign/okhttp/OkHttpClientTest.java
Patch:
@@ -24,6 +24,7 @@
 import feign.Util;
 import feign.assertj.MockWebServerAssertions;
 import feign.client.AbstractClientTest;
+import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.concurrent.TimeUnit;
 import okhttp3.mockwebserver.MockResponse;
@@ -98,7 +99,8 @@ public void testFollowRedirect() throws Exception {
     Response response = api.get();
     // Response length should not be null
     assertEquals(200, response.status());
-    assertEquals(expectedBody, response.body().toString());
+    String payload = Util.toString(response.body().asReader(StandardCharsets.UTF_8));
+    assertEquals(expectedBody, payload);
   }
 
   public interface OkHttpClientTestInterface {

File: jaxrs2/src/main/java/feign/jaxrs2/JAXRS2Contract.java
Patch:
@@ -14,6 +14,7 @@
 package feign.jaxrs2;
 
 import feign.jaxrs.JAXRSContract;
+import javax.ws.rs.BeanParam;
 import javax.ws.rs.container.Suspended;
 import javax.ws.rs.core.Context;
 
@@ -30,5 +31,6 @@ public JAXRS2Contract() {
     // https://github.com/OpenFeign/feign/issues/669
     super.registerParameterAnnotation(Suspended.class, (ann, data, i) -> data.ignoreParamater(i));
     super.registerParameterAnnotation(Context.class, (ann, data, i) -> data.ignoreParamater(i));
+    super.registerParameterAnnotation(BeanParam.class, (ann, data, i) -> data.ignoreParamater(i));
   }
 }

File: ribbon/src/test/java/feign/ribbon/RibbonClientTest.java
Patch:
@@ -45,10 +45,12 @@
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TestName;
 
+@Ignore("inconsistent, deprecated toolset")
 public class RibbonClientTest {
 
   @Rule public final TestName testName = new TestName();

File: core/src/main/java/feign/Param.java
Patch:
@@ -27,7 +27,7 @@
 public @interface Param {
 
   /** The name of the template parameter. */
-  String value();
+  String value() default "";
 
   /** How to expand the value of this parameter, if {@link ToStringExpander} isn't adequate. */
   Class<? extends Expander> expander() default ToStringExpander.class;

File: core/src/main/java/feign/RequestInterceptor.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * Zero or more {@code RequestInterceptors} may be configured for purposes such as adding headers to
- * all requests. No guarantees are give with regards to the order that interceptors are applied.
+ * all requests. No guarantees are given with regards to the order that interceptors are applied.
  * Once interceptors are applied, {@link Target#apply(RequestTemplate)} is called to create the
  * immutable http request sent via {@link Client#execute(Request, feign.Request.Options)}. <br>
  * <br>

File: micrometer/src/main/java/feign/micrometer/MeteredClient.java
Patch:
@@ -43,7 +43,7 @@ public Response execute(Request request, Options options) throws IOException {
           .timer(
               metricName.name(), metricName.tag(template.methodMetadata(), template.feignTarget()))
           .recordCallable(() -> client.execute(request, options));
-    } catch (IOException e) {
+    } catch (IOException | RuntimeException e) {
       throw e;
     } catch (Exception e) {
       throw new IOException(e);

File: micrometer/src/main/java/feign/micrometer/MeteredDecoder.java
Patch:
@@ -52,7 +52,7 @@ public Object decode(Response response, Type type)
                   metricName.name(),
                   metricName.tag(template.methodMetadata(), template.feignTarget()))
               .recordCallable(() -> decoder.decode(meteredResponse, type));
-    } catch (IOException e) {
+    } catch (IOException | RuntimeException e) {
       throw e;
     } catch (Exception e) {
       throw new IOException(e);

File: core/src/main/java/feign/template/Literal.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
@@ -14,7 +14,7 @@
 package feign.template;
 
 /** URI Template Literal. */
-class Literal implements TemplateChunk {
+public class Literal implements TemplateChunk {
 
   private final String value;
 

File: core/src/main/java/feign/template/TemplateChunk.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
@@ -15,7 +15,7 @@
 
 /** Represents the parts of a URI Template. */
 @FunctionalInterface
-interface TemplateChunk {
+public interface TemplateChunk {
 
   String getValue();
 }

File: core/src/test/java/feign/client/DefaultClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
@@ -51,7 +51,7 @@ public boolean verify(String s, SSLSession sslSession) {
 
   @Override
   public Builder newBuilder() {
-    return Feign.builder().client(new Client.Default(TrustingSSLSocketFactory.get(), null));
+    return Feign.builder().client(new Client.Default(TrustingSSLSocketFactory.get(), null, false));
   }
 
   @Test

File: benchmark/src/main/java/feign/benchmark/RealRequestBenchmarks.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: core/src/main/java/feign/Types.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: core/src/main/java/feign/Util.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: core/src/main/java/feign/stream/StreamDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: core/src/main/java/feign/template/Expression.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: core/src/test/java/feign/TargetTest.java
Patch:
@@ -41,7 +41,7 @@ public void baseCaseQueryParamsArePercentEncoded() throws InterruptedException {
 
     Feign.builder().target(TestQuery.class, baseUrl).get("slash/foo", "slash/bar");
 
-    assertThat(server.takeRequest()).hasPath("/default/slash/foo?query=slash%2Fbar");
+    assertThat(server.takeRequest()).hasPath("/default/slash/foo?query=slash/bar");
   }
 
   /**

File: core/src/test/java/feign/assertj/RecordedRequestAssert.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: httpclient/src/test/java/feign/httpclient/ApacheHttpClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: jackson-jaxb/src/main/java/feign/jackson/jaxb/JacksonJaxbJsonDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: jaxrs/src/test/java/feign/jaxrs/JAXRSContractTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
@@ -15,7 +15,6 @@
 
 import static feign.assertj.FeignAssertions.assertThat;
 import static java.util.Arrays.asList;
-import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.data.MapEntry.entry;
 
 import feign.MethodMetadata;

File: reactive/src/main/java/feign/reactive/ReactiveFeign.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: sax/src/main/java/feign/sax/SAXDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: soap/src/test/java/feign/soap/SOAPCodecTest.java
Patch:
@@ -15,7 +15,6 @@
 
 import static feign.Util.UTF_8;
 import static feign.assertj.FeignAssertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 
 import feign.Request;

File: spring4/src/test/java/feign/spring/SpringContractTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at

File: benchmark/src/main/java/feign/benchmark/DecoderIteratorsBenchmark.java
Patch:
@@ -73,6 +73,7 @@ private void fetch(Object o) {
     }
   }
 
+  @SuppressWarnings("deprecation")
   @Setup(Level.Invocation)
   public void buildResponse() {
     response =
@@ -81,7 +82,7 @@ public void buildResponse() {
             .reason("OK")
             .request(Request.create(HttpMethod.GET, "/", Collections.emptyMap(), null, Util.UTF_8))
             .headers(Collections.emptyMap())
-            .body(carsJson(Integer.valueOf(size)), Util.UTF_8)
+            .body(carsJson(Integer.parseInt(size)), Util.UTF_8)
             .build();
   }
 

File: core/src/main/java/feign/Client.java
Patch:
@@ -159,7 +159,7 @@ HttpURLConnection convertAndSend(Request request, Options options) throws IOExce
         connection.addRequestProperty("Accept", "*/*");
       }
 
-      if (request.requestBody().asBytes() != null) {
+      if (request.body() != null) {
         if (contentLength != null) {
           connection.setFixedLengthStreamingMode(contentLength);
         } else {
@@ -173,7 +173,7 @@ HttpURLConnection convertAndSend(Request request, Options options) throws IOExce
           out = new DeflaterOutputStream(out);
         }
         try {
-          out.write(request.requestBody().asBytes());
+          out.write(request.body());
         } finally {
           try {
             out.close();

File: core/src/main/java/feign/Contract.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
@@ -302,7 +302,6 @@ public Default() {
             if (expander != Param.ToStringExpander.class) {
               data.indexToExpanderClass().put(paramIndex, expander);
             }
-            data.indexToEncoded().put(paramIndex, paramAnnotation.encoded());
             if (!data.template().hasRequestVariable(name)) {
               data.formParams().add(name);
             }

File: core/src/main/java/feign/Feign.java
Patch:
@@ -22,6 +22,7 @@
 import feign.codec.Decoder;
 import feign.codec.Encoder;
 import feign.codec.ErrorDecoder;
+import feign.querymap.FieldQueryMapEncoder;
 import java.io.IOException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
@@ -103,7 +104,7 @@ public static class Builder {
     private Logger logger = new NoOpLogger();
     private Encoder encoder = new Encoder.Default();
     private Decoder decoder = new Decoder.Default();
-    private QueryMapEncoder queryMapEncoder = new QueryMapEncoder.Default();
+    private QueryMapEncoder queryMapEncoder = new FieldQueryMapEncoder();
     private ErrorDecoder errorDecoder = new ErrorDecoder.Default();
     private Options options = new Options();
     private InvocationHandlerFactory invocationHandlerFactory =

File: core/src/main/java/feign/FeignException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2012-2019 The Feign Authors
+ * Copyright 2012-2020 The Feign Authors
  *
  * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
@@ -147,7 +147,7 @@ static FeignException errorReading(Request request, Response response, IOExcepti
         format("%s reading %s %s", cause.getMessage(), request.httpMethod(), request.url()),
         request,
         cause,
-        request.requestBody().asBytes());
+        request.body());
   }
 
   public static FeignException errorStatus(String methodKey, Response response) {

File: core/src/main/java/feign/QueryMap.java
Patch:
@@ -56,9 +56,11 @@
  * Once this conversion is applied, the query keys and resulting String values follow the same
  * contract as if they were set using {@link RequestTemplate#query(String, String...)}.
  */
+@SuppressWarnings("deprecation")
 @Retention(RUNTIME)
 @java.lang.annotation.Target(PARAMETER)
 public @interface QueryMap {
+
   /**
    * Specifies whether parameter names and values are already encoded.
    *

File: core/src/main/java/feign/codec/StringDecoder.java
Patch:
@@ -29,7 +29,7 @@ public Object decode(Response response, Type type) throws IOException {
       return null;
     }
     if (String.class.equals(type)) {
-      return Util.toString(body.asReader());
+      return Util.toString(body.asReader(Util.UTF_8));
     }
     throw new DecodeException(
         response.status(),

File: core/src/test/java/feign/DefaultQueryMapEncoderTest.java
Patch:
@@ -16,6 +16,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
+import feign.querymap.FieldQueryMapEncoder;
 import java.util.HashMap;
 import java.util.Map;
 import org.junit.Rule;
@@ -26,7 +27,7 @@ public class DefaultQueryMapEncoderTest {
 
   @Rule public final ExpectedException thrown = ExpectedException.none();
 
-  private final QueryMapEncoder encoder = new QueryMapEncoder.Default();
+  private final QueryMapEncoder encoder = new FieldQueryMapEncoder();
 
   @Test
   public void testEncodesObject_visibleFields() {

File: core/src/test/java/feign/MethodMetadataPresenceTest.java
Patch:
@@ -46,7 +46,7 @@ public void client() throws Exception {
             .target(TestInterface.class, url);
 
     final Response response = api.codecPost("request data");
-    assertEquals("response data", Util.toString(response.body().asReader()));
+    assertEquals("response data", Util.toString(response.body().asReader(Util.UTF_8)));
 
     assertThat(server.takeRequest()).hasBody("request data");
   }
@@ -68,7 +68,7 @@ public void encoder() throws Exception {
             .target(TestInterface.class, url);
 
     final Response response = api.codecPost("request data");
-    assertEquals("response data", Util.toString(response.body().asReader()));
+    assertEquals("response data", Util.toString(response.body().asReader(Util.UTF_8)));
 
     assertThat(server.takeRequest()).hasBody("request data");
   }
@@ -91,7 +91,7 @@ public void decoder() throws Exception {
             .target(TestInterface.class, url);
 
     final Response response = api.codecPost("request data");
-    assertEquals("response data", Util.toString(response.body().asReader()));
+    assertEquals("response data", Util.toString(response.body().asReader(Util.UTF_8)));
 
     assertThat(server.takeRequest()).hasBody("request data");
   }

File: core/src/test/java/feign/MultipleLoggerTest.java
Patch:
@@ -29,6 +29,7 @@ private static java.util.logging.Logger getInnerLogger(Logger.JavaLogger logger)
     return (java.util.logging.Logger) inner.get(logger);
   }
 
+  @SuppressWarnings("deprecation")
   @Test
   public void testAppendSeveralFilesToOneJavaLogger() throws Exception {
     Logger.JavaLogger logger =

File: core/src/test/java/feign/OptionsTest.java
Patch:
@@ -27,6 +27,7 @@
 /**
  * @author pengfei.zhao
  */
+@SuppressWarnings("deprecation")
 public class OptionsTest {
 
   interface OptionsInterface {

File: core/src/test/java/feign/RetryerTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+@SuppressWarnings("deprecation")
 public class RetryerTest {
 
   @Rule public final ExpectedException thrown = ExpectedException.none();
@@ -58,7 +59,7 @@ public void only5TriesAllowedAndExponentialBackoff() throws Exception {
   }
 
   @Test
-  public void considersRetryAfterButNotMoreThanMaxPeriod() throws Exception {
+  public void considersRetryAfterButNotMoreThanMaxPeriod() {
     Default retryer =
         new Retryer.Default() {
           protected long currentTimeMillis() {

File: core/src/test/java/feign/TargetTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 
+@SuppressWarnings("deprecation")
 public class TargetTest {
 
   @Rule public final MockWebServer server = new MockWebServer();
@@ -62,7 +63,7 @@ public Request apply(RequestTemplate input) {
                 urlEncoded.httpMethod(),
                 urlEncoded.url().replace("%2F", "/"),
                 urlEncoded.headers(),
-                urlEncoded.requestBody().asBytes(),
+                urlEncoded.body(),
                 urlEncoded.charset());
           }
         };

File: core/src/test/java/feign/client/AbstractClientTest.java
Patch:
@@ -275,7 +275,7 @@ public void testContentTypeWithCharset() throws Exception {
 
     Response response = api.postWithContentType("foo", "text/plain;charset=utf-8");
     // Response length should not be null
-    assertEquals("AAAAAAAA", Util.toString(response.body().asReader()));
+    assertEquals("AAAAAAAA", Util.toString(response.body().asReader(UTF_8)));
   }
 
   @Test
@@ -286,7 +286,7 @@ public void testContentTypeWithoutCharset() throws Exception {
 
     Response response = api.postWithContentType("foo", "text/plain");
     // Response length should not be null
-    assertEquals("AAAAAAAA", Util.toString(response.body().asReader()));
+    assertEquals("AAAAAAAA", Util.toString(response.body().asReader(UTF_8)));
   }
 
   @Test

File: core/src/test/java/feign/codec/DefaultDecoderTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.junit.rules.ExpectedException;
 import org.w3c.dom.Document;
 
+@SuppressWarnings("deprecation")
 public class DefaultDecoderTest {
 
   @Rule public final ExpectedException thrown = ExpectedException.none();

File: core/src/test/java/feign/codec/DefaultErrorDecoderHttpErrorTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
+@SuppressWarnings("deprecation")
 @RunWith(Parameterized.class)
 public class DefaultErrorDecoderHttpErrorTest {
 

File: core/src/test/java/feign/codec/DefaultErrorDecoderTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+@SuppressWarnings("deprecation")
 public class DefaultErrorDecoderTest {
 
   @Rule public final ExpectedException thrown = ExpectedException.none();

File: core/src/test/java/feign/examples/GitHubExample.java
Patch:
@@ -13,6 +13,7 @@
  */
 package feign.examples;
 
+import static feign.Util.UTF_8;
 import static feign.Util.ensureClosed;
 
 import com.google.gson.Gson;
@@ -68,7 +69,7 @@ public Object decode(Response response, Type type) throws IOException {
       if (void.class == type || response.body() == null) {
         return null;
       }
-      Reader reader = response.body().asReader();
+      Reader reader = response.body().asReader(UTF_8);
       try {
         return gson.fromJson(reader, type);
       } catch (JsonIOException e) {

File: core/src/test/java/feign/stream/StreamDecoderTest.java
Patch:
@@ -35,6 +35,7 @@
 import okhttp3.mockwebserver.MockWebServer;
 import org.junit.Test;
 
+@SuppressWarnings("deprecation")
 public class StreamDecoderTest {
 
   interface StreamInterface {
@@ -73,7 +74,7 @@ public void simpleStreamTest() {
             .decoder(
                 StreamDecoder.create(
                     (response, type) ->
-                        new BufferedReader(response.body().asReader()).lines().iterator()))
+                        new BufferedReader(response.body().asReader(UTF_8)).lines().iterator()))
             .doNotCloseAfterDecode()
             .target(StreamInterface.class, server.url("/").toString());
 

File: googlehttpclient/src/main/java/feign/googlehttpclient/GoogleHttpClient.java
Patch:
@@ -64,15 +64,15 @@ private final HttpRequest convertRequest(
       final Request inputRequest, final Request.Options options) throws IOException {
     // Setup the request body
     HttpContent content = null;
-    if (inputRequest.requestBody().length() > 0) {
+    if (inputRequest.length() > 0) {
       final Collection<String> contentTypeValues = inputRequest.headers().get("Content-Type");
       String contentType = null;
       if (contentTypeValues != null && contentTypeValues.size() > 0) {
         contentType = contentTypeValues.iterator().next();
       } else {
         contentType = "application/octet-stream";
       }
-      content = new ByteArrayContent(contentType, inputRequest.requestBody().asBytes());
+      content = new ByteArrayContent(contentType, inputRequest.body());
     }
 
     // Build the request

File: gson/src/main/java/feign/gson/GsonDecoder.java
Patch:
@@ -13,6 +13,7 @@
  */
 package feign.gson;
 
+import static feign.Util.UTF_8;
 import static feign.Util.ensureClosed;
 
 import com.google.gson.Gson;
@@ -44,7 +45,7 @@ public GsonDecoder(Gson gson) {
   @Override
   public Object decode(Response response, Type type) throws IOException {
     if (response.body() == null) return null;
-    Reader reader = response.body().asReader();
+    Reader reader = response.body().asReader(UTF_8);
     try {
       return gson.fromJson(reader, type);
     } catch (JsonIOException e) {

File: gson/src/test/java/feign/gson/GsonCodecTest.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Map;
 import org.junit.Test;
 
+@SuppressWarnings("deprecation")
 public class GsonCodecTest {
 
   @Test

File: jackson-jaxb/src/test/java/feign/jackson/jaxb/JacksonJaxbCodecTest.java
Patch:
@@ -28,6 +28,7 @@
 import javax.xml.bind.annotation.XmlRootElement;
 import org.junit.Test;
 
+@SuppressWarnings("deprecation")
 public class JacksonJaxbCodecTest {
 
   @Test

File: jackson/src/main/java/feign/jackson/JacksonDecoder.java
Patch:
@@ -18,6 +18,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.RuntimeJsonMappingException;
 import feign.Response;
+import feign.Util;
 import feign.codec.Decoder;
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -47,7 +48,7 @@ public JacksonDecoder(ObjectMapper mapper) {
   @Override
   public Object decode(Response response, Type type) throws IOException {
     if (response.body() == null) return null;
-    Reader reader = response.body().asReader();
+    Reader reader = response.body().asReader(Util.UTF_8);
     if (!reader.markSupported()) {
       reader = new BufferedReader(reader, 1);
     }

File: jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java
Patch:
@@ -13,6 +13,7 @@
  */
 package feign.jackson;
 
+import static feign.Util.UTF_8;
 import static feign.Util.ensureClosed;
 
 import com.fasterxml.jackson.core.JsonParser;
@@ -67,7 +68,7 @@ public final class JacksonIteratorDecoder implements Decoder {
   @Override
   public Object decode(Response response, Type type) throws IOException {
     if (response.body() == null) return null;
-    Reader reader = response.body().asReader();
+    Reader reader = response.body().asReader(UTF_8);
     if (!reader.markSupported()) {
       reader = new BufferedReader(reader, 1);
     }

File: jackson/src/test/java/feign/jackson/JacksonCodecTest.java
Patch:
@@ -45,6 +45,7 @@
 import java.util.Map;
 import org.junit.Test;
 
+@SuppressWarnings("deprecation")
 public class JacksonCodecTest {
 
   private String zonesJson =

File: jackson/src/test/java/feign/jackson/JacksonIteratorTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+@SuppressWarnings("deprecation")
 public class JacksonIteratorTest {
 
   @Rule public final ExpectedException thrown = ExpectedException.none();

File: java11/src/main/java/feign/http2client/Http2Client.java
Patch:
@@ -79,10 +79,11 @@ private Builder newRequestBuilder(Request request) throws IOException {
     }
 
     final BodyPublisher body;
-    if (request.requestBody().asBytes() == null) {
+    final byte[] data = request.body();
+    if (data == null) {
       body = BodyPublishers.noBody();
     } else {
-      body = BodyPublishers.ofByteArray(request.requestBody().asBytes());
+      body = BodyPublishers.ofByteArray(data);
     }
 
     final Builder requestBuilder = HttpRequest.newBuilder().uri(uri).version(Version.HTTP_2);

File: jaxb/src/test/java/feign/jaxb/JAXBCodecTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+@SuppressWarnings("deprecation")
 public class JAXBCodecTest {
 
   @Rule public final ExpectedException thrown = ExpectedException.none();

File: jaxb/src/test/java/feign/jaxb/examples/AWSSignatureVersion4.java
Patch:
@@ -78,7 +78,8 @@ private static String canonicalString(RequestTemplate input, String host) {
     canonicalRequest.append("host").append('\n');
 
     // HexEncode(Hash(Payload))
-    String bodyText = input.requestBody().asString();
+    byte[] data = input.body();
+    String bodyText = (data != null) ? new String(data, input.requestCharset()) : null;
     if (bodyText != null) {
       canonicalRequest.append(hex(sha256(bodyText)));
     } else {

File: jaxrs2/src/main/java/feign/jaxrs2/JAXRSClient.java
Patch:
@@ -71,12 +71,12 @@ public feign.Response execute(feign.Request request, Options options) throws IOE
   }
 
   private Entity<byte[]> createRequestEntity(feign.Request request) {
-    if (request.requestBody().asBytes() == null) {
+    if (request.body() == null) {
       return null;
     }
 
     return Entity.entity(
-        request.requestBody().asBytes(),
+        request.body(),
         new Variant(
             mediaType(request.headers()), locale(request.headers()), encoding(request.charset())));
   }

File: jaxrs2/src/test/java/feign/jaxrs2/JAXRSClientTest.java
Patch:
@@ -116,7 +116,7 @@ public void testContentTypeWithoutCharset2() throws Exception {
 
     final Response response = api.getWithContentType();
     // Response length should not be null
-    assertEquals("AAAAAAAA", Util.toString(response.body().asReader()));
+    assertEquals("AAAAAAAA", Util.toString(response.body().asReader(UTF_8)));
 
     MockWebServerAssertions.assertThat(server.takeRequest())
         .hasHeaders(

File: mock/src/main/java/feign/mock/RequestKey.java
Patch:
@@ -112,7 +112,7 @@ private RequestKey(Request request) {
     this.url = buildUrl(request);
     this.headers = RequestHeaders.of(request.headers());
     this.charset = request.charset();
-    this.body = request.requestBody().asBytes();
+    this.body = request.body();
   }
 
   public HttpMethod getMethod() {

File: mock/src/test/java/feign/mock/RequestKeyTest.java
Patch:
@@ -56,6 +56,7 @@ public void builder() throws Exception {
     assertThat(requestKey.getCharset(), equalTo(StandardCharsets.UTF_16));
   }
 
+  @SuppressWarnings("deprecation")
   @Test
   public void create() throws Exception {
     Map<String, Collection<String>> map = new HashMap<String, Collection<String>>();

File: okhttp/src/main/java/feign/okhttp/OkHttpClient.java
Patch:
@@ -71,7 +71,7 @@ static Request toOkHttpRequest(feign.Request input) {
       requestBuilder.addHeader("Accept", "*/*");
     }
 
-    byte[] inputBody = input.requestBody().asBytes();
+    byte[] inputBody = input.body();
     boolean isMethodWithBody =
         HttpMethod.POST == input.httpMethod()
             || HttpMethod.PUT == input.httpMethod()
@@ -139,6 +139,7 @@ public InputStream asInputStream() throws IOException {
         return input.byteStream();
       }
 
+      @SuppressWarnings("deprecation")
       @Override
       public Reader asReader() throws IOException {
         return input.charStream();

File: okhttp/src/test/java/feign/okhttp/OkHttpClientTest.java
Patch:
@@ -47,7 +47,7 @@ public void testContentTypeWithoutCharset() throws Exception {
 
     Response response = api.getWithContentType();
     // Response length should not be null
-    assertEquals("AAAAAAAA", Util.toString(response.body().asReader()));
+    assertEquals("AAAAAAAA", Util.toString(response.body().asReader(Util.UTF_8)));
 
     MockWebServerAssertions.assertThat(server.takeRequest())
         .hasHeaders(

File: ribbon/src/test/java/feign/ribbon/LBClientTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Map;
 import org.junit.Test;
 
+@SuppressWarnings("deprecation")
 public class LBClientTest {
 
   @Test

File: sax/src/test/java/feign/sax/SAXDecoderTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.junit.rules.ExpectedException;
 import org.xml.sax.helpers.DefaultHandler;
 
+@SuppressWarnings("deprecation")
 public class SAXDecoderTest {
 
   static String statusFailed =

File: sax/src/test/java/feign/sax/examples/AWSSignatureVersion4.java
Patch:
@@ -78,7 +78,8 @@ private static String canonicalString(RequestTemplate input, String host) {
     canonicalRequest.append("host").append('\n');
 
     // HexEncode(Hash(Payload))
-    String bodyText = input.requestBody().asString();
+    byte[] data = input.body();
+    String bodyText = (data != null) ? new String(data, input.requestCharset()) : null;
     if (bodyText != null) {
       canonicalRequest.append(hex(sha256(bodyText)));
     } else {

File: slf4j/src/test/java/feign/slf4j/Slf4jLoggerTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.Test;
 import org.slf4j.LoggerFactory;
 
+@SuppressWarnings("deprecation")
 public class Slf4jLoggerTest {
 
   private static final String CONFIG_KEY = "someMethod()";

File: soap/src/test/java/feign/soap/SOAPCodecTest.java
Patch:
@@ -40,6 +40,7 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+@SuppressWarnings("deprecation")
 public class SOAPCodecTest {
 
   @Rule public final ExpectedException thrown = ExpectedException.none();

File: soap/src/test/java/feign/soap/SOAPFaultDecoderTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+@SuppressWarnings("deprecation")
 public class SOAPFaultDecoderTest {
 
   @Rule public final ExpectedException thrown = ExpectedException.none();

File: spring4/src/main/java/feign/spring/SpringContract.java
Patch:
@@ -32,7 +32,7 @@ public SpringContract() {
           appendMappings(data, requestMapping.value());
 
           if (requestMapping.method().length == 1)
-            data.template().method(requestMapping.method()[0].name());
+            data.template().method(Request.HttpMethod.valueOf(requestMapping.method()[0].name()));
 
           handleProducesAnnotation(data, requestMapping.produces());
           handleConsumesAnnotation(data, requestMapping.consumes());
@@ -45,7 +45,7 @@ public SpringContract() {
           appendMappings(data, mappings);
 
           if (requestMapping.method().length == 1)
-            data.template().method(requestMapping.method()[0].name());
+            data.template().method(Request.HttpMethod.valueOf(requestMapping.method()[0].name()));
         });
 
     registerMethodAnnotation(

File: core/src/main/java/feign/template/QueryTemplate.java
Patch:
@@ -133,7 +133,7 @@ public List<String> getValues() {
   }
 
   public List<String> getVariables() {
-    List<String> variables = new ArrayList<>();
+    List<String> variables = new ArrayList<>(this.name.getVariables());
     for (Template template : this.values) {
       variables.addAll(template.getVariables());
     }

File: core/src/test/java/feign/RequestTemplateTest.java
Patch:
@@ -174,7 +174,7 @@ public void resolveTemplateWithMixedCollectionFormatsByQuery() {
             mapOf("keys", Arrays.asList("one", "two"), "values[]", Arrays.asList("1", "2")));
 
     assertThat(template.url())
-        .isEqualToIgnoringCase("/api/collections?keys=one&keys=two&values%5B%5D=1,2");
+        .isEqualToIgnoringCase("/api/collections?keys=one&keys=two&values%5B%5D=1%2C2");
   }
 
   @Test
@@ -429,7 +429,7 @@ public void encodedQueryWithUnsafeCharactersMixedWithUnencoded() {
     assertThat(template.queryLine()).isEqualTo("?params%5B%5D=not%20encoded&params%5B%5D=encoded");
     Map<String, Collection<String>> queries = template.queries();
     assertThat(queries).containsKey("params[]");
-    assertThat(queries.get("params[]")).contains("encoded").contains("not encoded");
+    assertThat(queries.get("params[]")).contains("encoded").contains("not%20encoded");
   }
 
   @SuppressWarnings("unchecked")

File: benchmark/src/main/java/feign/benchmark/WhatShouldWeCacheBenchmarks.java
Patch:
@@ -57,9 +57,9 @@ public void setup() {
     cachedContact =
         new Contract() {
           private final List<MethodMetadata> cached =
-              new Default().parseAndValidatateMetadata(FeignTestInterface.class);
+              new Default().parseAndValidateMetadata(FeignTestInterface.class);
 
-          public List<MethodMetadata> parseAndValidatateMetadata(Class<?> declaring) {
+          public List<MethodMetadata> parseAndValidateMetadata(Class<?> declaring) {
             return cached;
           }
         };
@@ -86,7 +86,7 @@ public Response execute(Request request, Request.Options options) throws IOExcep
   /** How fast is parsing an api interface? */
   @Benchmark
   public List<MethodMetadata> parseFeignContract() {
-    return feignContract.parseAndValidatateMetadata(FeignTestInterface.class);
+    return feignContract.parseAndValidateMetadata(FeignTestInterface.class);
   }
 
   /** How fast is creating a feign instance for each http request, without considering network? */

File: core/src/main/java/feign/DeclarativeContract.java
Patch:
@@ -31,9 +31,9 @@ public abstract class DeclarativeContract extends BaseContract {
       parameterAnnotationProcessors = new HashMap<>();
 
   @Override
-  public final List<MethodMetadata> parseAndValidatateMetadata(Class<?> targetType) {
+  public final List<MethodMetadata> parseAndValidateMetadata(Class<?> targetType) {
     // any implementations must register processors
-    return super.parseAndValidatateMetadata(targetType);
+    return super.parseAndValidateMetadata(targetType);
   }
 
   /**

File: core/src/main/java/feign/ReflectiveFeign.java
Patch:
@@ -156,7 +156,7 @@ static final class ParseHandlersByName {
     }
 
     public Map<String, MethodHandler> apply(Target key) {
-      List<MethodMetadata> metadata = contract.parseAndValidatateMetadata(key.type());
+      List<MethodMetadata> metadata = contract.parseAndValidateMetadata(key.type());
       Map<String, MethodHandler> result = new LinkedHashMap<String, MethodHandler>();
       for (MethodMetadata md : metadata) {
         BuildTemplateByResolvingArgs buildTemplate;

File: core/src/test/java/feign/ContractWithRuntimeInjectionTest.java
Patch:
@@ -92,8 +92,8 @@ static class ContractWithRuntimeInjection implements Contract {
      * Injects {@link MethodMetadata#indexToExpander(Map)} via {@link BeanFactory#getBean(Class)}.
      */
     @Override
-    public List<MethodMetadata> parseAndValidatateMetadata(Class<?> targetType) {
-      List<MethodMetadata> result = new Contract.Default().parseAndValidatateMetadata(targetType);
+    public List<MethodMetadata> parseAndValidateMetadata(Class<?> targetType) {
+      List<MethodMetadata> result = new Contract.Default().parseAndValidateMetadata(targetType);
       for (MethodMetadata md : result) {
         Map<Integer, Param.Expander> indexToExpander = new LinkedHashMap<Integer, Param.Expander>();
         for (Map.Entry<Integer, Class<? extends Param.Expander>> entry :

File: hystrix/src/main/java/feign/hystrix/HystrixDelegatingContract.java
Patch:
@@ -43,8 +43,8 @@ public HystrixDelegatingContract(Contract delegate) {
   }
 
   @Override
-  public List<MethodMetadata> parseAndValidatateMetadata(Class<?> targetType) {
-    List<MethodMetadata> metadatas = this.delegate.parseAndValidatateMetadata(targetType);
+  public List<MethodMetadata> parseAndValidateMetadata(Class<?> targetType) {
+    List<MethodMetadata> metadatas = this.delegate.parseAndValidateMetadata(targetType);
 
     for (MethodMetadata metadata : metadatas) {
       Type type = metadata.returnType();

File: reactive/src/main/java/feign/reactive/ReactiveDelegatingContract.java
Patch:
@@ -32,8 +32,8 @@ public class ReactiveDelegatingContract implements Contract {
   }
 
   @Override
-  public List<MethodMetadata> parseAndValidatateMetadata(Class<?> targetType) {
-    List<MethodMetadata> methodsMetadata = this.delegate.parseAndValidatateMetadata(targetType);
+  public List<MethodMetadata> parseAndValidateMetadata(Class<?> targetType) {
+    List<MethodMetadata> methodsMetadata = this.delegate.parseAndValidateMetadata(targetType);
 
     for (final MethodMetadata metadata : methodsMetadata) {
       final Type type = metadata.returnType();

File: core/src/main/java/feign/Contract.java
Patch:
@@ -92,6 +92,9 @@ protected MethodMetadata parseAndValidateMetadata(Class<?> targetType, Method me
       for (Annotation methodAnnotation : method.getAnnotations()) {
         processAnnotationOnMethod(data, methodAnnotation, method);
       }
+      if (data.isIgnored()) {
+        return data;
+      }
       checkState(
           data.template().method() != null,
           "Method %s not annotated with HTTP method type (ex. GET, POST)",

File: core/src/main/java/feign/SynchronousMethodHandler.java
Patch:
@@ -189,7 +189,7 @@ Object decode(Response response) throws Throwable {
     } catch (FeignException e) {
       throw e;
     } catch (RuntimeException e) {
-      throw new DecodeException(response.status(), e.getMessage(), e);
+      throw new DecodeException(response.status(), e.getMessage(), response.request(), e);
     }
   }
 

File: core/src/main/java/feign/codec/ErrorDecoder.java
Patch:
@@ -94,7 +94,8 @@ public Exception decode(String methodKey, Response response) {
             exception.getMessage(),
             response.request().httpMethod(),
             exception,
-            retryAfter);
+            retryAfter,
+            response.request());
       }
       return exception;
     }

File: core/src/main/java/feign/codec/StringDecoder.java
Patch:
@@ -32,6 +32,8 @@ public Object decode(Response response, Type type) throws IOException {
       return Util.toString(body.asReader());
     }
     throw new DecodeException(
-        response.status(), format("%s is not a type supported by this decoder.", type));
+        response.status(),
+        format("%s is not a type supported by this decoder.", type),
+        response.request());
   }
 }

File: jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java
Patch:
@@ -152,7 +152,7 @@ public boolean hasNext() {
         current = objectReader.readValue(parser);
       } catch (IOException e) {
         // Input Stream closed automatically by parser
-        throw new DecodeException(response.status(), e.getMessage(), e);
+        throw new DecodeException(response.status(), e.getMessage(), response.request(), e);
       }
       return current != null;
     }

File: jaxb/src/main/java/feign/jaxb/JAXBDecoder.java
Patch:
@@ -91,7 +91,7 @@ public Object decode(Response response, Type type) throws IOException {
                   saxParserFactory.newSAXParser().getXMLReader(),
                   new InputSource(response.body().asInputStream())));
     } catch (JAXBException | ParserConfigurationException | SAXException e) {
-      throw new DecodeException(response.status(), e.toString(), e);
+      throw new DecodeException(response.status(), e.toString(), response.request(), e);
     } finally {
       if (response.body() != null) {
         response.body().close();

File: sax/src/main/java/feign/sax/SAXDecoder.java
Patch:
@@ -90,7 +90,7 @@ public Object decode(Response response, Type type) throws IOException, DecodeExc
       }
       return handler.result();
     } catch (SAXException e) {
-      throw new DecodeException(response.status(), e.getMessage(), e);
+      throw new DecodeException(response.status(), e.getMessage(), response.request(), e);
     }
   }
 

File: soap/src/main/java/feign/soap/SOAPDecoder.java
Patch:
@@ -117,7 +117,7 @@ public Object decode(Response response, Type type) throws IOException {
             .unmarshal(message.getSOAPBody().extractContentAsDocument());
       }
     } catch (SOAPException | JAXBException e) {
-      throw new DecodeException(response.status(), e.toString(), e);
+      throw new DecodeException(response.status(), e.toString(), response.request(), e);
     } finally {
       if (response.body() != null) {
         response.body().close();

File: jaxrs/src/test/java/feign/jaxrs/JAXRSContractTest.java
Patch:
@@ -407,7 +407,7 @@ public void producesWithHeaderParamContainAllHeaders() throws Exception {
                     String.class,
                     String.class)
                 .template())
-        .hasHeaders(entry("Accept", Arrays.asList("{Accept}", "application/json")))
+        .hasHeaders(entry("Accept", Arrays.asList("application/json", "{Accept}")))
         .hasQueries(
             entry("multiple", Arrays.asList("stuff", "{multiple}")),
             entry("another", Collections.singletonList("{another}")));

File: gson/src/main/java/feign/gson/GsonDecoder.java
Patch:
@@ -19,7 +19,6 @@
 import com.google.gson.JsonIOException;
 import com.google.gson.TypeAdapter;
 import feign.Response;
-import feign.Util;
 import feign.codec.Decoder;
 import java.io.IOException;
 import java.io.Reader;
@@ -44,7 +43,6 @@ public GsonDecoder(Gson gson) {
 
   @Override
   public Object decode(Response response, Type type) throws IOException {
-    if (response.status() == 404) return Util.emptyValueOf(type);
     if (response.body() == null) return null;
     Reader reader = response.body().asReader();
     try {

File: gson/src/test/java/feign/gson/GsonCodecTest.java
Patch:
@@ -244,7 +244,7 @@ public void customEncoder() {
 
   /** Enabled via {@link feign.Feign.Builder#decode404()} */
   @Test
-  public void notFoundDecodesToEmpty() throws Exception {
+  public void notFoundDecodesToNull() throws Exception {
     Response response =
         Response.builder()
             .status(404)
@@ -253,6 +253,6 @@ public void notFoundDecodesToEmpty() throws Exception {
             .request(
                 Request.create(HttpMethod.GET, "/api", Collections.emptyMap(), null, Util.UTF_8))
             .build();
-    assertThat((byte[]) new GsonDecoder().decode(response, byte[].class)).isEmpty();
+    assertThat((byte[]) new GsonDecoder().decode(response, byte[].class)).isNull();
   }
 }

File: jackson-jaxb/src/main/java/feign/jackson/jaxb/JacksonJaxbJsonDecoder.java
Patch:
@@ -20,7 +20,6 @@
 import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;
 import feign.FeignException;
 import feign.Response;
-import feign.Util;
 import feign.codec.Decoder;
 import java.io.IOException;
 import java.lang.reflect.Type;
@@ -38,7 +37,6 @@ public JacksonJaxbJsonDecoder(ObjectMapper objectMapper) {
 
   @Override
   public Object decode(Response response, Type type) throws IOException, FeignException {
-    if (response.status() == 404) return Util.emptyValueOf(type);
     if (response.body() == null) return null;
     return jacksonJaxbJsonProvider.readFrom(
         Object.class, type, null, APPLICATION_JSON_TYPE, null, response.body().asInputStream());

File: jackson-jaxb/src/test/java/feign/jackson/jaxb/JacksonJaxbCodecTest.java
Patch:
@@ -58,7 +58,7 @@ public void decodeTest() throws Exception {
 
   /** Enabled via {@link feign.Feign.Builder#decode404()} */
   @Test
-  public void notFoundDecodesToEmpty() throws Exception {
+  public void notFoundDecodesToNull() throws Exception {
     Response response =
         Response.builder()
             .status(404)
@@ -67,7 +67,7 @@ public void notFoundDecodesToEmpty() throws Exception {
                 Request.create(HttpMethod.GET, "/api", Collections.emptyMap(), null, Util.UTF_8))
             .headers(Collections.emptyMap())
             .build();
-    assertThat((byte[]) new JacksonJaxbJsonDecoder().decode(response, byte[].class)).isEmpty();
+    assertThat((byte[]) new JacksonJaxbJsonDecoder().decode(response, byte[].class)).isNull();
   }
 
   @XmlRootElement

File: jackson/src/main/java/feign/jackson/JacksonDecoder.java
Patch:
@@ -18,7 +18,6 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.RuntimeJsonMappingException;
 import feign.Response;
-import feign.Util;
 import feign.codec.Decoder;
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -47,7 +46,6 @@ public JacksonDecoder(ObjectMapper mapper) {
 
   @Override
   public Object decode(Response response, Type type) throws IOException {
-    if (response.status() == 404) return Util.emptyValueOf(type);
     if (response.body() == null) return null;
     Reader reader = response.body().asReader();
     if (!reader.markSupported()) {

File: jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java
Patch:
@@ -23,7 +23,6 @@
 import com.fasterxml.jackson.databind.ObjectReader;
 import com.fasterxml.jackson.databind.RuntimeJsonMappingException;
 import feign.Response;
-import feign.Util;
 import feign.codec.DecodeException;
 import feign.codec.Decoder;
 import java.io.BufferedReader;
@@ -69,7 +68,6 @@ public final class JacksonIteratorDecoder implements Decoder {
 
   @Override
   public Object decode(Response response, Type type) throws IOException {
-    if (response.status() == 404) return Util.emptyValueOf(type);
     if (response.body() == null) return null;
     Reader reader = response.body().asReader();
     if (!reader.markSupported()) {

File: jaxb/src/main/java/feign/jaxb/JAXBDecoder.java
Patch:
@@ -63,7 +63,7 @@ private JAXBDecoder(Builder builder) {
 
   @Override
   public Object decode(Response response, Type type) throws IOException {
-    if (response.status() == 404 || response.status() == 204) return Util.emptyValueOf(type);
+    if (response.status() == 204) return Util.emptyValueOf(type);
     if (response.body() == null) return null;
     while (type instanceof ParameterizedType) {
       ParameterizedType ptype = (ParameterizedType) type;

File: jaxb/src/test/java/feign/jaxb/JAXBCodecTest.java
Patch:
@@ -254,7 +254,7 @@ public void decodeAnnotatedParameterizedTypes() throws Exception {
 
   /** Enabled via {@link feign.Feign.Builder#decode404()} */
   @Test
-  public void notFoundDecodesToEmpty() throws Exception {
+  public void notFoundDecodesToNull() throws Exception {
     Response response =
         Response.builder()
             .status(404)
@@ -267,7 +267,7 @@ public void notFoundDecodesToEmpty() throws Exception {
             (byte[])
                 new JAXBDecoder(new JAXBContextFactory.Builder().build())
                     .decode(response, byte[].class))
-        .isEmpty();
+        .isNull();
   }
 
   @XmlRootElement

File: sax/src/main/java/feign/sax/SAXDecoder.java
Patch:
@@ -19,7 +19,6 @@
 import static feign.Util.resolveLastTypeParameter;
 
 import feign.Response;
-import feign.Util;
 import feign.codec.DecodeException;
 import feign.codec.Decoder;
 import java.io.IOException;
@@ -65,7 +64,6 @@ public static Builder builder() {
 
   @Override
   public Object decode(Response response, Type type) throws IOException, DecodeException {
-    if (response.status() == 404) return Util.emptyValueOf(type);
     if (response.body() == null) return null;
     ContentHandlerWithResult.Factory<?> handlerFactory = handlerFactories.get(type);
     checkState(

File: sax/src/test/java/feign/sax/SAXDecoderTest.java
Patch:
@@ -101,7 +101,7 @@ public void nullBodyDecodesToNull() throws Exception {
 
   /** Enabled via {@link feign.Feign.Builder#decode404()} */
   @Test
-  public void notFoundDecodesToEmpty() throws Exception {
+  public void notFoundDecodesToNull() throws Exception {
     Response response =
         Response.builder()
             .status(404)
@@ -110,7 +110,7 @@ public void notFoundDecodesToEmpty() throws Exception {
                 Request.create(HttpMethod.GET, "/api", Collections.emptyMap(), null, Util.UTF_8))
             .headers(Collections.<String, Collection<String>>emptyMap())
             .build();
-    assertThat((byte[]) decoder.decode(response, byte[].class)).isEmpty();
+    assertThat((byte[]) decoder.decode(response, byte[].class)).isNull();
   }
 
   static enum NetworkStatus {

File: soap/src/test/java/feign/soap/SOAPCodecTest.java
Patch:
@@ -343,7 +343,7 @@ public void decodeAnnotatedParameterizedTypes() throws Exception {
 
   /** Enabled via {@link feign.Feign.Builder#decode404()} */
   @Test
-  public void notFoundDecodesToEmpty() throws Exception {
+  public void notFoundDecodesToNull() throws Exception {
     Response response =
         Response.builder()
             .status(404)
@@ -356,7 +356,7 @@ public void notFoundDecodesToEmpty() throws Exception {
             (byte[])
                 new JAXBDecoder(new JAXBContextFactory.Builder().build())
                     .decode(response, byte[].class))
-        .isEmpty();
+        .isNull();
   }
 
   @XmlRootElement(name = "GetPrice")

File: reactive/src/main/java/feign/reactive/RxJavaInvocationHandler.java
Patch:
@@ -29,7 +29,7 @@ public class RxJavaInvocationHandler extends ReactiveInvocationHandler {
 
   @Override
   protected Publisher invoke(Method method, MethodHandler methodHandler, Object[] arguments) {
-    return Flowable.fromCallable(this.invokeMethod(methodHandler, arguments))
+    return Flowable.fromPublisher(this.invokeMethod(methodHandler, arguments))
         .observeOn(Schedulers.trampoline());
   }
 }

File: core/src/main/java/feign/Contract.java
Patch:
@@ -115,7 +115,7 @@ protected MethodMetadata parseAndValidateMetadata(Class<?> targetType, Method me
         }
         if (parameterTypes[i] == URI.class) {
           data.urlIndex(i);
-        } else if (!isHttpAnnotation) {
+        } else if (!isHttpAnnotation && parameterTypes[i] != Request.Options.class) {
           checkState(
               data.formParams().isEmpty(), "Body parameters cannot be used with form parameters.");
           checkState(data.bodyIndex() == null, "Method has too many Body parameters: %s", method);

File: core/src/test/java/feign/codec/DefaultErrorDecoderHttpErrorTest.java
Patch:
@@ -43,11 +43,13 @@ public static Object[][] errorCodes() {
       {409, FeignException.Conflict.class},
       {429, FeignException.TooManyRequests.class},
       {422, FeignException.UnprocessableEntity.class},
+      {450, FeignException.FeignClientException.class},
       {500, FeignException.InternalServerError.class},
       {501, FeignException.NotImplemented.class},
       {502, FeignException.BadGateway.class},
       {503, FeignException.ServiceUnavailable.class},
       {504, FeignException.GatewayTimeout.class},
+      {599, FeignException.FeignServerException.class},
       {599, FeignException.class},
     };
   }

File: core/src/main/java/feign/Client.java
Patch:
@@ -48,7 +48,7 @@ public interface Client {
    */
   Response execute(Request request, Options options) throws IOException;
 
-  public static class Default implements Client {
+  class Default implements Client {
 
     private final SSLSocketFactory sslContextFactory;
     private final HostnameVerifier hostnameVerifier;

File: core/src/main/java/feign/Retryer.java
Patch:
@@ -26,7 +26,7 @@ public interface Retryer extends Cloneable {
 
   Retryer clone();
 
-  public static class Default implements Retryer {
+  class Default implements Retryer {
 
     private final int maxAttempts;
     private final long period;

File: core/src/main/java/feign/template/Expressions.java
Patch:
@@ -104,7 +104,7 @@ String expand(Object variable, boolean encode) {
         for (Object item : ((Iterable) variable)) {
           items.add((encode) ? encode(item) : item.toString());
         }
-        expanded.append(String.join(",", items));
+        expanded.append(String.join(Template.COLLECTION_DELIMITER, items));
       } else {
         expanded.append((encode) ? encode(variable) : variable);
       }

File: feign-form-spring/src/main/java/feign/form/spring/SpringSingleMultipartFileWriter.java
Patch:
@@ -36,7 +36,6 @@ public boolean isApplicable(Object value) {
   @Override
   protected void write(Output output, String key, Object value) throws EncodeException {
     val file = (MultipartFile) value;
-
     writeFileMetadata(output, key, file.getOriginalFilename(), file.getContentType());
 
     byte[] bytes;

File: feign-form/src/main/java/feign/form/FormEncoder.java
Patch:
@@ -89,7 +89,7 @@ public void encode(Object object, Type bodyType, RequestTemplate template)
     Map<String, Object> data;
     if (MAP_STRING_WILDCARD.equals(bodyType)) {
       data = (Map<String, Object>) object;
-    } else if (isUserPojo(object)) {
+    } else if (isUserPojo(bodyType)) {
       data = toMap(object);
     } else {
       delegate.encode(object, bodyType, template);

File: feign-form/src/main/java/feign/form/multipart/ManyFilesWriter.java
Patch:
@@ -57,6 +57,8 @@ public void write(Output output, String boundary, String key, Object value)
       for (val file : iterable) {
         fileWriter.write(output, boundary, key, file);
       }
+    } else {
+      throw new IllegalArgumentException();
     }
   }
 }

File: feign-form/src/main/java/feign/form/multipart/SingleFileWriter.java
Patch:
@@ -43,7 +43,7 @@ protected void write(Output output, String key, Object value) throws EncodeExcep
     InputStream input = null;
     try {
       input = new FileInputStream(file);
-      val buf = new byte[1024];
+      val buf = new byte[4096];
       int length = input.read(buf);
       while (length > 0) {
         output.write(buf, 0, length);

File: core/src/main/java/feign/RequestTemplate.java
Patch:
@@ -171,7 +171,7 @@ public RequestTemplate resolve(Map<String, ?> variables) {
         QueryTemplate queryTemplate = queryTemplates.next();
         String queryExpanded = queryTemplate.expand(variables);
         if (Util.isNotBlank(queryExpanded)) {
-          query.append(queryTemplate.expand(variables));
+          query.append(queryExpanded);
           if (queryTemplates.hasNext()) {
             query.append("&");
           }

File: feign-form-spring/src/main/java/feign/form/spring/SpringFormEncoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form-spring/src/main/java/feign/form/spring/SpringManyMultipartFilesWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form-spring/src/main/java/feign/form/spring/SpringSingleMultipartFileWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form-spring/src/main/java/feign/form/spring/converter/ByteArrayMultipartFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form-spring/src/main/java/feign/form/spring/converter/IgnoreKeyCaseMap.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form-spring/src/main/java/feign/form/spring/converter/SpringManyMultipartFilesReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form-spring/src/test/java/feign/form/feign/spring/Client.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form-spring/src/test/java/feign/form/feign/spring/DownloadClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form-spring/src/test/java/feign/form/feign/spring/Dto.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form-spring/src/test/java/feign/form/feign/spring/Server.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form-spring/src/test/java/feign/form/feign/spring/SpringFormEncoderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form-spring/src/test/java/feign/form/feign/spring/SpringMultipartDecoderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form-spring/src/test/java/feign/form/feign/spring/converter/SpringManyMultipartFilesReaderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/main/java/feign/form/ContentProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/main/java/feign/form/ContentType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/main/java/feign/form/FormData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/main/java/feign/form/FormEncoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/main/java/feign/form/multipart/AbstractWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/main/java/feign/form/multipart/ByteArrayWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/main/java/feign/form/multipart/DelegateWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public class DelegateWriter extends AbstractWriter {
 
   Encoder delegate;
 
-  ParameterWriter parameterWriter = new ParameterWriter();
+  SingleParameterWriter parameterWriter = new SingleParameterWriter();
 
   @Override
   public boolean isApplicable(Object value) {

File: feign-form/src/main/java/feign/form/multipart/FormDataWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/main/java/feign/form/multipart/Output.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/main/java/feign/form/multipart/PojoWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/main/java/feign/form/multipart/SingleFileWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/main/java/feign/form/multipart/Writer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/main/java/feign/form/util/CharsetUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/main/java/feign/form/util/PojoUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/test/java/feign/form/ByteArrayClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/test/java/feign/form/CustomClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/test/java/feign/form/Dto.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: feign-form/src/test/java/feign/form/WildCardMapTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Artem Labazin
+ * Copyright 2019 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: soap/src/main/java/feign/soap/SOAPEncoder.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import javax.xml.bind.JAXBException;
 import javax.xml.bind.Marshaller;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -101,7 +102,7 @@ public SOAPEncoder(JAXBContextFactory jaxbContextFactory) {
     this.jaxbContextFactory = jaxbContextFactory;
     this.writeXmlDeclaration = true;
     this.formattedOutput = false;
-    this.charsetEncoding = Charset.defaultCharset();
+    this.charsetEncoding = StandardCharsets.UTF_8;
     this.soapProtocol = DEFAULT_SOAP_PROTOCOL;
   }
 
@@ -146,7 +147,7 @@ public static class Builder {
     private JAXBContextFactory jaxbContextFactory;
     public boolean formattedOutput = false;
     private boolean writeXmlDeclaration = true;
-    private Charset charsetEncoding = Charset.defaultCharset();
+    private Charset charsetEncoding = StandardCharsets.UTF_8;
     private String soapProtocol = DEFAULT_SOAP_PROTOCOL;
 
     /** The {@link JAXBContextFactory} for body part. */

File: core/src/test/java/feign/LoggerTest.java
Patch:
@@ -381,7 +381,7 @@ public Retryer clone() {
                       return this;
                     }
                   })
-              .target(SendsStuff.class, "http://sna%fu.abc");
+              .target(SendsStuff.class, "http://sna%25fu.abc");
 
       thrown.expect(FeignException.class);
 

File: core/src/test/java/feign/FeignTest.java
Patch:
@@ -787,7 +787,7 @@ public void encodedQueryParam() throws Exception {
 
     api.encodedQueryParam("5.2FSi+");
 
-    assertThat(server.takeRequest()).hasPath("/?trim=5.2FSi+");
+    assertThat(server.takeRequest()).hasPath("/?trim=5.2FSi%2B");
   }
 
   @Test

File: java11/src/test/java/feign/http2client/test/Http2ClientTest.java
Patch:
@@ -21,9 +21,11 @@
 import java.io.IOException;
 import okhttp3.mockwebserver.MockResponse;
 import org.assertj.core.api.Assertions;
+import org.junit.Ignore;
 import org.junit.Test;
 
 /** Tests client-specific behavior, such as ensuring Content-Length is sent when specified. */
+@Ignore
 public class Http2ClientTest extends AbstractClientTest {
 
   public interface TestInterface {

File: feign-form-spring/src/main/java/feign/form/spring/SpringFormEncoder.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * Adds support for {@link MultipartFile} type to {@link FormEncoder}.
  *
- * @author Tomasz Juchniewicz <tjuchniewicz@gmail.com>
+ * @author Tomasz Juchniewicz &lt;tjuchniewicz@gmail.com&gt;
  * @since 14.09.2016
  */
 public class SpringFormEncoder extends FormEncoder {

File: feign-form/src/main/java/feign/form/multipart/AbstractWriter.java
Patch:
@@ -42,7 +42,7 @@ public void write(Output output, String boundary, String key, Object value)
    * @param output output writer.
    * @param key name for piece of data.
    * @param value piece of data.
-   * @throws Exception in case of write errors
+   * @throws EncodeException in case of write errors
    */
   @SuppressWarnings({
     "PMD.UncommentedEmptyMethodBody",

File: feign-form-spring/src/main/java/feign/form/spring/SpringManyMultipartFilesWriter.java
Patch:
@@ -18,6 +18,7 @@
 
 import static lombok.AccessLevel.PRIVATE;
 
+import feign.codec.EncodeException;
 import feign.form.multipart.AbstractWriter;
 import feign.form.multipart.Output;
 import lombok.experimental.FieldDefaults;
@@ -33,7 +34,8 @@ public class SpringManyMultipartFilesWriter extends AbstractWriter {
   SpringSingleMultipartFileWriter fileWriter = new SpringSingleMultipartFileWriter();
 
   @Override
-  public void write(Output output, String boundary, String key, Object value) throws Exception {
+  public void write(Output output, String boundary, String key, Object value)
+      throws EncodeException {
     if (value instanceof MultipartFile[]) {
       val files = (MultipartFile[]) value;
       for (val file : files) {

File: feign-form-spring/src/main/java/feign/form/spring/converter/IgnoreKeyCaseMap.java
Patch:
@@ -28,7 +28,7 @@ final class IgnoreKeyCaseMap extends HashMap<String, String> {
   private static final long serialVersionUID = -2321516556941546746L;
 
   private static String normalizeKey(Object key) {
-    return key != null ? key.toString().toUpperCase(new Locale("en_US")) : null;
+    return key == null ? null : key.toString().toUpperCase(new Locale("en_US"));
   }
 
   @Override

File: feign-form-spring/src/test/java/feign/form/feign/spring/Client.java
Patch:
@@ -86,7 +86,7 @@ String upload4(
   @RequestMapping(path = "/multipart/upload5", method = POST, consumes = MULTIPART_FORM_DATA_VALUE)
   Response upload5(Dto dto);
 
-  public static class ClientConfiguration {
+  class ClientConfiguration {
 
     @Autowired private ObjectFactory<HttpMessageConverters> messageConverters;
 

File: feign-form/src/main/java/feign/form/ContentProcessor.java
Patch:
@@ -17,6 +17,7 @@
 package feign.form;
 
 import feign.RequestTemplate;
+import feign.codec.EncodeException;
 import java.nio.charset.Charset;
 import java.util.Map;
 
@@ -39,10 +40,10 @@ public interface ContentProcessor {
    * @param template Feign's request template.
    * @param charset request charset from 'Content-Type' header (UTF-8 by default).
    * @param data reqeust data.
-   * @throws Exception in case of...exception
+   * @throws EncodeException in case of any encode exception
    */
   void process(RequestTemplate template, Charset charset, Map<String, Object> data)
-      throws Exception;
+      throws EncodeException;
 
   /**
    * Returns supported {@link ContentType} of this processor.

File: feign-form/src/main/java/feign/form/multipart/ByteArrayWriter.java
Patch:
@@ -16,6 +16,8 @@
 
 package feign.form.multipart;
 
+import feign.codec.EncodeException;
+
 /**
  * @author Artem Labazin
  */
@@ -27,7 +29,7 @@ public boolean isApplicable(Object value) {
   }
 
   @Override
-  protected void write(Output output, String key, Object value) throws Exception {
+  protected void write(Output output, String key, Object value) throws EncodeException {
     writeFileMetadata(output, key, null, null);
 
     byte[] bytes = (byte[]) value;

File: feign-form/src/main/java/feign/form/multipart/DelegateWriter.java
Patch:
@@ -19,6 +19,7 @@
 import static lombok.AccessLevel.PRIVATE;
 
 import feign.RequestTemplate;
+import feign.codec.EncodeException;
 import feign.codec.Encoder;
 import lombok.RequiredArgsConstructor;
 import lombok.experimental.FieldDefaults;
@@ -41,7 +42,7 @@ public boolean isApplicable(Object value) {
   }
 
   @Override
-  protected void write(Output output, String key, Object value) throws Exception {
+  protected void write(Output output, String key, Object value) throws EncodeException {
     val fake = new RequestTemplate();
     delegate.encode(value, value.getClass(), fake);
     val bytes = fake.requestBody().asBytes();

File: feign-form/src/main/java/feign/form/multipart/FormDataWriter.java
Patch:
@@ -16,6 +16,7 @@
 
 package feign.form.multipart;
 
+import feign.codec.EncodeException;
 import feign.form.FormData;
 import lombok.val;
 
@@ -31,7 +32,7 @@ public boolean isApplicable(Object value) {
   }
 
   @Override
-  protected void write(Output output, String key, Object value) throws Exception {
+  protected void write(Output output, String key, Object value) throws EncodeException {
     val formData = (FormData) value;
     writeFileMetadata(output, key, formData.getFileName(), formData.getContentType());
     output.write(formData.getData());

File: feign-form/src/main/java/feign/form/multipart/ManyFilesWriter.java
Patch:
@@ -18,6 +18,7 @@
 
 import static lombok.AccessLevel.PRIVATE;
 
+import feign.codec.EncodeException;
 import java.io.File;
 import lombok.experimental.FieldDefaults;
 import lombok.val;
@@ -31,7 +32,8 @@ public class ManyFilesWriter extends AbstractWriter {
   SingleFileWriter fileWriter = new SingleFileWriter();
 
   @Override
-  public void write(Output output, String boundary, String key, Object value) throws Exception {
+  public void write(Output output, String boundary, String key, Object value)
+      throws EncodeException {
     if (value instanceof File[]) {
       val files = (File[]) value;
       for (val file : files) {

File: feign-form/src/main/java/feign/form/multipart/ParameterWriter.java
Patch:
@@ -18,6 +18,7 @@
 
 import static feign.form.ContentProcessor.CRLF;
 
+import feign.codec.EncodeException;
 import lombok.val;
 
 /**
@@ -34,7 +35,7 @@ public boolean isApplicable(Object value) {
   }
 
   @Override
-  protected void write(Output output, String key, Object value) throws Exception {
+  protected void write(Output output, String key, Object value) throws EncodeException {
     val string =
         new StringBuilder()
             .append("Content-Disposition: form-data; name=\"")

File: feign-form/src/test/java/feign/form/CustomClientTest.java
Patch:
@@ -26,6 +26,7 @@
 import feign.Headers;
 import feign.Param;
 import feign.RequestLine;
+import feign.codec.EncodeException;
 import feign.form.multipart.ByteArrayWriter;
 import feign.form.multipart.Output;
 import feign.jackson.JacksonEncoder;
@@ -48,7 +49,7 @@ public class CustomClientTest {
   static {
     val encoder = new FormEncoder(new JacksonEncoder());
     val processor = (MultipartFormContentProcessor) encoder.getContentProcessor(MULTIPART);
-    processor.setWriter(0, new CustomByteArrayWriter());
+    processor.addFirstWriter(new CustomByteArrayWriter());
 
     API =
         Feign.builder()
@@ -69,7 +70,7 @@ public void test() {
   private static class CustomByteArrayWriter extends ByteArrayWriter {
 
     @Override
-    protected void write(Output output, String key, Object value) throws Exception {
+    protected void write(Output output, String key, Object value) throws EncodeException {
       writeFileMetadata(output, key, "popa.txt", null);
 
       val bytes = (byte[]) value;

File: feign-form-spring/src/main/java/feign/form/spring/converter/SpringManyMultipartFilesReader.java
Patch:
@@ -35,6 +35,7 @@
 import org.springframework.http.MediaType;
 import org.springframework.http.converter.AbstractHttpMessageConverter;
 import org.springframework.http.converter.FormHttpMessageConverter;
+import org.springframework.http.converter.HttpMessageConversionException;
 import org.springframework.http.converter.HttpMessageConverter;
 import org.springframework.http.converter.HttpMessageNotReadableException;
 import org.springframework.util.StringUtils;
@@ -126,7 +127,7 @@ private byte[] getMultiPartBoundary(MediaType contentType) {
     if (!StringUtils.isEmpty(boundaryString)) {
       return boundaryString.getBytes(UTF_8);
     } else {
-      throw new HttpMessageNotReadableException("Content-Type missing boundary information.");
+      throw new HttpMessageConversionException("Content-Type missing boundary information.");
     }
   }
 
@@ -143,7 +144,7 @@ private ByteArrayMultipartFile readMultiPart(MultipartStream multipartStream) th
             true);
 
     if (!contentDisposition.containsKey("form-data")) {
-      throw new HttpMessageNotReadableException("Content-Disposition is not of type form-data.");
+      throw new HttpMessageConversionException("Content-Disposition is not of type form-data.");
     }
 
     val bodyStream = new ByteArrayOutputStream();

File: feign-form/src/main/java/feign/form/multipart/DelegateWriter.java
Patch:
@@ -44,7 +44,8 @@ public boolean isApplicable(Object value) {
   protected void write(Output output, String key, Object value) throws Exception {
     val fake = new RequestTemplate();
     delegate.encode(value, value.getClass(), fake);
-    val string = new String(fake.body(), output.getCharset()).replaceAll("\n", "");
+    val bytes = fake.requestBody().asBytes();
+    val string = new String(bytes, output.getCharset()).replaceAll("\n", "");
     parameterWriter.write(output, key, string);
   }
 }

File: feign-form/src/main/java/feign/form/multipart/PojoWriter.java
Patch:
@@ -40,6 +40,7 @@ public boolean isApplicable(Object object) {
   }
 
   @Override
+  @SuppressWarnings("unchecked")
   public void write(Output output, String boundary, String key, Object value) throws Exception {
     val result = new HashMap<String, Object>();
     if (value instanceof Map) {

File: feign-form-spring/src/test/java/feign/form/feign/spring/Client.java
Patch:
@@ -25,9 +25,9 @@
 import java.util.Map;
 import org.springframework.beans.factory.ObjectFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.autoconfigure.web.HttpMessageConverters;
-import org.springframework.cloud.netflix.feign.FeignClient;
-import org.springframework.cloud.netflix.feign.support.SpringEncoder;
+import org.springframework.boot.autoconfigure.http.HttpMessageConverters;
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.cloud.openfeign.support.SpringEncoder;
 import org.springframework.context.annotation.Bean;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestBody;

File: feign-form-spring/src/test/java/feign/form/feign/spring/DownloadClient.java
Patch:
@@ -8,9 +8,9 @@
 import lombok.val;
 import org.springframework.beans.factory.ObjectFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.autoconfigure.web.HttpMessageConverters;
-import org.springframework.cloud.netflix.feign.FeignClient;
-import org.springframework.cloud.netflix.feign.support.SpringDecoder;
+import org.springframework.boot.autoconfigure.http.HttpMessageConverters;
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.cloud.openfeign.support.SpringDecoder;
 import org.springframework.context.annotation.Bean;
 import org.springframework.http.converter.HttpMessageConverter;
 import org.springframework.web.bind.annotation.PathVariable;

File: feign-form-spring/src/test/java/feign/form/feign/spring/Server.java
Patch:
@@ -26,7 +26,7 @@
 import lombok.SneakyThrows;
 import lombok.val;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.cloud.netflix.feign.EnableFeignClients;
+import org.springframework.cloud.openfeign.EnableFeignClients;
 import org.springframework.core.io.ClassPathResource;
 import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpHeaders;

File: java11/src/main/java/feign/http2client/Http2Client.java
Patch:
@@ -41,7 +41,7 @@ public Http2Client() {
   }
 
   public Http2Client(HttpClient client) {
-    this.client = Util.checkNotNull(client, "http cliet must be not unll");
+    this.client = Util.checkNotNull(client, "HttpClient must not be null");
   }
 
   @Override

File: core/src/main/java/feign/codec/Decoder.java
Patch:
@@ -88,7 +88,7 @@ public class Default extends StringDecoder {
 
     @Override
     public Object decode(Response response, Type type) throws IOException {
-      if (response.status() == 404) return Util.emptyValueOf(type);
+      if (response.status() == 404 || response.status() == 204) return Util.emptyValueOf(type);
       if (response.body() == null) return null;
       if (byte[].class.equals(type)) {
         return Util.toByteArray(response.body().asInputStream());

File: core/src/test/java/feign/UtilTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Set;
 import org.junit.Assert;
 import org.junit.Rule;
@@ -60,6 +61,7 @@ public void emptyValueOf() throws Exception {
     assertEquals(Collections.emptyList(), Util.emptyValueOf(List.class));
     assertEquals(Collections.emptyMap(), Util.emptyValueOf(Map.class));
     assertEquals(Collections.emptySet(), Util.emptyValueOf(Set.class));
+    assertEquals(Optional.empty(), Util.emptyValueOf(Optional.class));
   }
 
   /** In other words, {@code List<String>} is as empty as {@code List<?>}. */

File: core/src/main/java/feign/template/BodyTemplate.java
Patch:
@@ -34,7 +34,7 @@ public static BodyTemplate create(String template) {
   }
 
   private BodyTemplate(String value, Charset charset) {
-    super(value, false, false, false, charset);
+    super(value, ExpansionOptions.ALLOW_UNRESOLVED, EncodingOptions.NOT_REQUIRED, false, charset);
   }
 
   @Override

File: core/src/main/java/feign/template/HeaderTemplate.java
Patch:
@@ -79,7 +79,7 @@ public static HeaderTemplate append(HeaderTemplate headerTemplate, Iterable<Stri
    * @param template to parse.
    */
   private HeaderTemplate(String template, String name, Iterable<String> values, Charset charset) {
-    super(template, false, false, false, charset);
+    super(template, ExpansionOptions.REQUIRED, EncodingOptions.NOT_REQUIRED, false, charset);
     this.values =
         StreamSupport.stream(values.spliterator(), false)
             .filter(Util::isNotBlank)

File: core/src/main/java/feign/template/UriTemplate.java
Patch:
@@ -70,6 +70,6 @@ public static UriTemplate append(UriTemplate uriTemplate, String fragment) {
    * @param charset to use when encoding.
    */
   private UriTemplate(String template, boolean encodeSlash, Charset charset) {
-    super(template, false, true, encodeSlash, charset);
+    super(template, ExpansionOptions.REQUIRED, EncodingOptions.REQUIRED, encodeSlash, charset);
   }
 }

File: core/src/test/java/feign/assertj/RecordedRequestAssert.java
Patch:
@@ -157,7 +157,7 @@ public RecordedRequestAssert hasNoHeaderNamed(final String... names) {
     Set<String> found = new LinkedHashSet<String>();
     for (String header : actual.getHeaders().names()) {
       for (String name : names) {
-        if (header.toLowerCase().startsWith(name.toLowerCase() + ":")) {
+        if (header.equalsIgnoreCase(name)) {
           found.add(header);
         }
       }

File: httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java
Patch:
@@ -153,7 +153,7 @@ HttpUriRequest toHttpUriRequest(Request request, Request.Options options)
   }
 
   private ContentType getContentType(Request request) {
-    ContentType contentType = ContentType.DEFAULT_TEXT;
+    ContentType contentType = null;
     for (Map.Entry<String, Collection<String>> entry : request.headers().entrySet())
       if (entry.getKey().equalsIgnoreCase("Content-Type")) {
         Collection<String> values = entry.getValue();

File: java11/src/main/java/feign/http2client/Http2Client.java
Patch:
@@ -11,7 +11,7 @@
  * express or implied. See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package feign.httpclient;
+package feign.http2client;
 
 import feign.*;
 import feign.Request.Options;

File: java11/src/test/java/feign/http2client/test/Http2ClientTest.java
Patch:
@@ -11,13 +11,13 @@
  * express or implied. See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package feign.httpclient.test;
+package feign.http2client.test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
 import feign.*;
 import feign.client.AbstractClientTest;
-import feign.httpclient.Http2Client;
+import feign.http2client.Http2Client;
 import java.io.IOException;
 import okhttp3.mockwebserver.MockResponse;
 import org.assertj.core.api.Assertions;

File: core/src/main/java/feign/Types.java
Patch:
@@ -29,15 +29,15 @@
  * @author Bob Lee
  * @author Jesse Wilson
  */
-final class Types {
+public final class Types {
 
   private static final Type[] EMPTY_TYPE_ARRAY = new Type[0];
 
   private Types() {
     // No instances.
   }
 
-  static Class<?> getRawType(Type type) {
+  public static Class<?> getRawType(Type type) {
     if (type instanceof Class<?>) {
       // Type is a normal class.
       return (Class<?>) type;

File: core/src/test/java/feign/assertj/RequestTemplateAssert.java
Patch:
@@ -86,7 +86,7 @@ public RequestTemplateAssert hasQueries(MapEntry... entries) {
 
   public RequestTemplateAssert hasHeaders(MapEntry... entries) {
     isNotNull();
-    maps.assertContainsExactly(info, actual.headers(), entries);
+    maps.assertContainsOnly(info, actual.headers(), entries);
     return this;
   }
 

File: core/src/main/java/feign/optionals/OptionalDecoder.java
Patch:
@@ -39,7 +39,7 @@ public Object decode(Response response, Type type) throws IOException {
       return Optional.empty();
     }
     Type enclosedType = Util.resolveLastTypeParameter(type, Optional.class);
-    return Optional.of(delegate.decode(response, enclosedType));
+    return Optional.ofNullable(delegate.decode(response, enclosedType));
   }
 
   static boolean isOptional(Type type) {

File: benchmark/src/main/java/feign/benchmark/DecoderIteratorsBenchmark.java
Patch:
@@ -14,6 +14,7 @@
 package feign.benchmark;
 
 import com.fasterxml.jackson.core.type.TypeReference;
+import feign.Request;
 import feign.Response;
 import feign.Util;
 import feign.codec.Decoder;
@@ -77,6 +78,7 @@ public void buildResponse() {
         Response.builder()
             .status(200)
             .reason("OK")
+            .request(Request.create("GET", "/", Collections.emptyMap(), null, Util.UTF_8))
             .headers(Collections.emptyMap())
             .body(carsJson(Integer.valueOf(size)), Util.UTF_8)
             .build();

File: core/src/main/java/feign/FeignException.java
Patch:
@@ -42,7 +42,7 @@ public int status() {
 
   static FeignException errorReading(Request request, Response ignored, IOException cause) {
     return new FeignException(
-        format("%s reading %s %s", cause.getMessage(), request.method(), request.url()), cause);
+        format("%s reading %s %s", cause.getMessage(), request.httpMethod(), request.url()), cause);
   }
 
   public static FeignException errorStatus(String methodKey, Response response) {
@@ -59,7 +59,8 @@ public static FeignException errorStatus(String methodKey, Response response) {
 
   static FeignException errorExecuting(Request request, IOException cause) {
     return new RetryableException(
-        format("%s executing %s %s", cause.getMessage(), request.method(), request.url()),
+        format("%s executing %s %s", cause.getMessage(), request.httpMethod(), request.url()),
+        request.httpMethod(),
         cause,
         null);
   }

File: core/src/main/java/feign/Logger.java
Patch:
@@ -46,7 +46,7 @@ protected static String methodTag(String configKey) {
   protected abstract void log(String configKey, String format, Object... args);
 
   protected void logRequest(String configKey, Level logLevel, Request request) {
-    log(configKey, "---> %s %s HTTP/1.1", request.method(), request.url());
+    log(configKey, "---> %s %s HTTP/1.1", request.httpMethod().name(), request.url());
     if (logLevel.ordinal() >= Level.HEADERS.ordinal()) {
 
       for (String field : request.headers().keySet()) {

File: core/src/main/java/feign/RequestTemplate.java
Patch:
@@ -168,7 +168,7 @@ public static String expand(String template, Map<String, ?> variables) {
   }
 
   private static Map<String, Collection<String>> parseAndDecodeQueries(String queryLine) {
-    Map<String, Collection<String>> map = new LinkedHashMap<String, Collection<String>>();
+    Map<String, Collection<String>> map = new LinkedHashMap<>();
     if (emptyToNull(queryLine) == null) {
       return map;
     }

File: core/src/main/java/feign/codec/ErrorDecoder.java
Patch:
@@ -89,7 +89,8 @@ public Exception decode(String methodKey, Response response) {
       FeignException exception = errorStatus(methodKey, response);
       Date retryAfter = retryAfterDecoder.apply(firstOrNull(response.headers(), RETRY_AFTER));
       if (retryAfter != null) {
-        return new RetryableException(exception.getMessage(), exception, retryAfter);
+        return new RetryableException(
+            exception.getMessage(), response.request().httpMethod(), exception, retryAfter);
       }
       return exception;
     }

File: core/src/test/java/feign/stream/StreamDecoderTest.java
Patch:
@@ -18,8 +18,10 @@
 
 import com.fasterxml.jackson.core.type.TypeReference;
 import feign.Feign;
+import feign.Request;
 import feign.RequestLine;
 import feign.Response;
+import feign.Util;
 import java.io.BufferedReader;
 import java.io.Closeable;
 import java.io.IOException;
@@ -86,6 +88,7 @@ public void shouldCloseIteratorWhenStreamClosed() throws IOException {
             .status(200)
             .reason("OK")
             .headers(Collections.emptyMap())
+            .request(Request.create("GET", "/api", Collections.emptyMap(), null, Util.UTF_8))
             .body("", UTF_8)
             .build();
 

File: httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java
Patch:
@@ -83,7 +83,7 @@ public Response execute(Request request, Request.Options options) throws IOExcep
       throw new IOException("URL '" + request.url() + "' couldn't be parsed into a URI", e);
     }
     HttpResponse httpResponse = client.execute(httpUriRequest);
-    return toFeignResponse(httpResponse).toBuilder().request(request).build();
+    return toFeignResponse(httpResponse, request);
   }
 
   HttpUriRequest toHttpUriRequest(Request request, Request.Options options)
@@ -169,7 +169,7 @@ private ContentType getContentType(Request request) {
     return contentType;
   }
 
-  Response toFeignResponse(HttpResponse httpResponse) throws IOException {
+  Response toFeignResponse(HttpResponse httpResponse, Request request) throws IOException {
     StatusLine statusLine = httpResponse.getStatusLine();
     int statusCode = statusLine.getStatusCode();
 
@@ -192,6 +192,7 @@ Response toFeignResponse(HttpResponse httpResponse) throws IOException {
         .status(statusCode)
         .reason(reason)
         .headers(headers)
+        .request(request)
         .body(toFeignBody(httpResponse))
         .build();
   }

File: slf4j/src/test/java/feign/slf4j/Slf4jLoggerTest.java
Patch:
@@ -18,6 +18,7 @@
 import feign.Request;
 import feign.RequestTemplate;
 import feign.Response;
+import feign.Util;
 import java.util.Collection;
 import java.util.Collections;
 import org.junit.Rule;
@@ -33,6 +34,7 @@ public class Slf4jLoggerTest {
       Response.builder()
           .status(200)
           .reason("OK")
+          .request(Request.create("GET", "/api", Collections.emptyMap(), null, Util.UTF_8))
           .headers(Collections.<String, Collection<String>>emptyMap())
           .body(new byte[0])
           .build();

File: mock/src/test/java/feign/mock/MockClientTest.java
Patch:
@@ -91,7 +91,6 @@ public Object decode(Response response, Type type)
   }
 
   private GitHub github;
-
   private MockClient mockClient;
 
   @Before

File: mock/src/test/java/feign/mock/MockTargetTest.java
Patch:
@@ -14,7 +14,7 @@
 package feign.mock;
 
 import static org.hamcrest.Matchers.equalTo;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertThat;
 
 import org.junit.Before;
 import org.junit.Test;

File: core/src/main/java/feign/Feign.java
Patch:
@@ -215,7 +215,7 @@ public Builder invocationHandlerFactory(InvocationHandlerFactory invocationHandl
      * lazy-evaluated construct, such as a {@link java.util.Iterator}. Feign standard decoders do
      * not have built in support for this flag. If you are using this flag, you MUST also use a
      * custom Decoder, and be sure to close all resources appropriately somewhere in the Decoder
-     * (you can use {@link Util.ensureClosed} for convenience).
+     * (you can use {@link Util#ensureClosed} for convenience).
      *
      * @since 9.6
      */

File: core/src/main/java/feign/Contract.java
Patch:
@@ -246,6 +246,8 @@ protected void processAnnotationOnMethod(
         }
 
         data.template().decodeSlash(RequestLine.class.cast(methodAnnotation).decodeSlash());
+        data.template()
+            .collectionFormat(RequestLine.class.cast(methodAnnotation).collectionFormat());
 
       } else if (annotationType == Body.class) {
         String body = Body.class.cast(methodAnnotation).value();

File: core/src/main/java/feign/RequestLine.java
Patch:
@@ -75,4 +75,6 @@
   String value();
 
   boolean decodeSlash() default true;
+
+  CollectionFormat collectionFormat() default CollectionFormat.EXPLODED;
 }

File: core/src/main/java/feign/Retryer.java
Patch:
@@ -71,6 +71,7 @@ public void continueOrPropagate(RetryableException e) {
         Thread.sleep(interval);
       } catch (InterruptedException ignored) {
         Thread.currentThread().interrupt();
+        throw e;
       }
       sleptForMillis += interval;
     }

File: core/src/main/java/feign/Client.java
Patch:
@@ -80,7 +80,7 @@ HttpURLConnection convertAndSend(Request request, Options options) throws IOExce
       connection.setConnectTimeout(options.connectTimeoutMillis());
       connection.setReadTimeout(options.readTimeoutMillis());
       connection.setAllowUserInteraction(false);
-      connection.setInstanceFollowRedirects(true);
+      connection.setInstanceFollowRedirects(options.isFollowRedirects());
       connection.setRequestMethod(request.method());
 
       Collection<String> contentEncodingValues = request.headers().get(CONTENT_ENCODING);

File: okhttp/src/main/java/feign/okhttp/OkHttpClient.java
Patch:
@@ -153,6 +153,7 @@ public feign.Response execute(feign.Request input, feign.Request.Options options
               .newBuilder()
               .connectTimeout(options.connectTimeoutMillis(), TimeUnit.MILLISECONDS)
               .readTimeout(options.readTimeoutMillis(), TimeUnit.MILLISECONDS)
+              .followRedirects(options.isFollowRedirects())
               .build();
     } else {
       requestScoped = delegate;

File: ribbon/src/main/java/feign/ribbon/RibbonClient.java
Patch:
@@ -107,6 +107,7 @@ static class FeignOptionsClientConfig extends DefaultClientConfigImpl {
     public FeignOptionsClientConfig(Request.Options options) {
       setProperty(CommonClientConfigKey.ConnectTimeout, options.connectTimeoutMillis());
       setProperty(CommonClientConfigKey.ReadTimeout, options.readTimeoutMillis());
+      setProperty(CommonClientConfigKey.FollowRedirects, options.isFollowRedirects());
     }
 
     @Override

File: core/src/main/java/feign/Logger.java
Patch:
@@ -121,7 +121,7 @@ protected IOException logIOException(
     if (logLevel.ordinal() >= Level.FULL.ordinal()) {
       StringWriter sw = new StringWriter();
       ioe.printStackTrace(new PrintWriter(sw));
-      log(configKey, sw.toString());
+      log(configKey, "%s", sw.toString());
       log(configKey, "<--- END ERROR");
     }
     return ioe;

File: feign-form/src/main/java/feign/form/MultipartFormContentProcessor.java
Patch:
@@ -23,6 +23,7 @@
 import feign.codec.Encoder;
 import feign.form.multipart.ByteArrayWriter;
 import feign.form.multipart.DelegateWriter;
+import feign.form.multipart.FormDataWriter;
 import feign.form.multipart.ManyFilesWriter;
 import feign.form.multipart.Output;
 import feign.form.multipart.ParameterWriter;
@@ -55,6 +56,7 @@ public class MultipartFormContentProcessor implements ContentProcessor {
   public MultipartFormContentProcessor(Encoder delegate) {
     writers = new ArrayList<Writer>(6);
     addWriter(new ByteArrayWriter());
+    addWriter(new FormDataWriter());
     addWriter(new SingleFileWriter());
     addWriter(new ManyFilesWriter());
     addWriter(new ParameterWriter());

File: java8/src/main/java/feign/optionals/OptionalDecoder.java
Patch:
@@ -35,8 +35,7 @@ public Object decode(Response response, Type type) throws IOException {
     if (!isOptional(type)) {
       return delegate.decode(response, type);
     }
-
-    if (response.status() == 404) {
+    if (response.status() == 404 || response.status() == 204) {
       return Optional.empty();
     }
     Type enclosedType = Util.resolveLastTypeParameter(type, Optional.class);

File: benchmark/src/main/java/feign/benchmark/RealRequestBenchmarks.java
Patch:
@@ -64,7 +64,7 @@ public rx.Observable handle(
             });
     server.start();
     client = new OkHttpClient();
-    client.setRetryOnConnectionFailure(false);
+    client.retryOnConnectionFailure();
     okFeign =
         Feign.builder()
             .client(new feign.okhttp.OkHttpClient(client))
@@ -82,8 +82,8 @@ public void tearDown() throws InterruptedException {
 
   /** How fast can we execute get commands synchronously? */
   @Benchmark
-  public com.squareup.okhttp.Response query_baseCaseUsingOkHttp() throws IOException {
-    com.squareup.okhttp.Response result = client.newCall(queryRequest).execute();
+  public okhttp3.Response query_baseCaseUsingOkHttp() throws IOException {
+    okhttp3.Response result = client.newCall(queryRequest).execute();
     result.body().close();
     return result;
   }

File: src/test/java/feign/vertx/VertxHttp11ClientReconnectTest.java
Patch:
@@ -52,7 +52,7 @@ public void before(TestContext context) {
         .options(options)
         .encoder(new JacksonEncoder())
         .decoder(new JacksonDecoder())
-        .target(HelloServiceAPI.class, "http://localhost:8089");
+        .target(HelloServiceAPI.class, "http://localhost:8091");
   }
 
   /**
@@ -75,7 +75,7 @@ protected Future<HttpServer> createServer() {
     HttpServerOptions serverOptions =
         new HttpServerOptions()
             .setLogActivity(true)
-            .setPort(8089)
+            .setPort(8091)
             .setSsl(false);
 
     httpServer = this.vertx.createHttpServer(serverOptions);

File: src/test/java/feign/vertx/OtherTest.java
Patch:
@@ -13,8 +13,8 @@
 import feign.VertxFeign;
 import feign.jackson.JacksonDecoder;
 import feign.jackson.JacksonEncoder;
-import feign.vertx.testcase.domain.Bill;
 import feign.vertx.testcase.AnotherServiceAPI;
+import feign.vertx.testcase.domain.Bill;
 import feign.vertx.testcase.domain.Flavor;
 import feign.vertx.testcase.domain.OrderGenerator;
 import io.vertx.core.Vertx;

File: src/test/java/feign/vertx/VertxHttp2ClientLeakFixTest.java
Patch:
@@ -1,15 +1,15 @@
 package feign.vertx;
 
-import feign.*;
+import feign.VertxFeign;
 import feign.jackson.JacksonDecoder;
 import feign.jackson.JacksonEncoder;
 import feign.vertx.testcase.HelloServiceAPI;
 import io.vertx.core.Vertx;
 import io.vertx.core.http.HttpClientOptions;
+import io.vertx.core.http.HttpConnection;
 import io.vertx.core.http.HttpServer;
 import io.vertx.core.http.HttpServerOptions;
 import io.vertx.core.http.HttpVersion;
-import io.vertx.core.http.HttpConnection;
 import io.vertx.ext.unit.Async;
 import io.vertx.ext.unit.TestContext;
 import io.vertx.ext.unit.junit.VertxUnitRunner;

File: src/test/java/feign/vertx/VertxHttpClientTest.java
Patch:
@@ -21,9 +21,9 @@
 import feign.vertx.testcase.IcecreamServiceApi;
 import feign.vertx.testcase.IcecreamServiceApiBroken;
 import feign.vertx.testcase.domain.Bill;
+import feign.vertx.testcase.domain.Flavor;
 import feign.vertx.testcase.domain.IceCreamOrder;
 import feign.vertx.testcase.domain.Mixin;
-import feign.vertx.testcase.domain.Flavor;
 import feign.vertx.testcase.domain.OrderGenerator;
 import io.vertx.core.CompositeFuture;
 import io.vertx.core.Future;
@@ -39,7 +39,6 @@
 
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.concurrent.ExecutionException;
 import java.util.stream.Collectors;
 
 @RunWith(VertxUnitRunner.class)
@@ -161,7 +160,7 @@ public void testFindOrder_success(TestContext context) {
   }
 
   @Test
-  public void testFindOrder_404(TestContext context) throws ExecutionException {
+  public void testFindOrder_404(TestContext context) {
 
     /* Given */
     stubFor(get(urlEqualTo("/icecream/orders/123"))

File: src/test/java/feign/vertx/testcase/HelloServiceAPI.java
Patch:
@@ -3,7 +3,6 @@
 import feign.Headers;
 import feign.RequestLine;
 import feign.Response;
-import feign.vertx.testcase.domain.Bill;
 import io.vertx.core.Future;
 
 /**

File: src/test/java/feign/vertx/testcase/IcecreamServiceApi.java
Patch:
@@ -3,10 +3,10 @@
 import feign.Headers;
 import feign.Param;
 import feign.RequestLine;
-import feign.vertx.testcase.domain.Mixin;
 import feign.vertx.testcase.domain.Bill;
 import feign.vertx.testcase.domain.Flavor;
 import feign.vertx.testcase.domain.IceCreamOrder;
+import feign.vertx.testcase.domain.Mixin;
 import io.vertx.core.Future;
 
 import java.util.Collection;

File: src/test/java/feign/vertx/testcase/IcecreamServiceApiBroken.java
Patch:
@@ -3,11 +3,11 @@
 import feign.Headers;
 import feign.Param;
 import feign.RequestLine;
-import feign.vertx.testcase.domain.Mixin;
 import feign.vertx.VertxDelegatingContract;
 import feign.vertx.testcase.domain.Bill;
 import feign.vertx.testcase.domain.Flavor;
 import feign.vertx.testcase.domain.IceCreamOrder;
+import feign.vertx.testcase.domain.Mixin;
 import io.vertx.core.Future;
 
 import java.util.Collection;

File: feign-form-spring/src/main/java/feign/form/spring/converter/SpringManyMultipartFilesReader.java
Patch:
@@ -16,7 +16,7 @@
 
 package feign.form.spring.converter;
 
-import static java.nio.charset.StandardCharsets.UTF_8;
+import static feign.form.util.CharsetUtil.UTF_8;
 import static lombok.AccessLevel.PRIVATE;
 import static org.springframework.http.HttpHeaders.CONTENT_DISPOSITION;
 import static org.springframework.http.HttpHeaders.CONTENT_TYPE;
@@ -25,6 +25,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.LinkedList;
+import java.util.Map;
 import java.util.regex.Pattern;
 import lombok.experimental.FieldDefaults;
 import lombok.val;
@@ -143,7 +144,7 @@ private ByteArrayMultipartFile readMultiPart(MultipartStream multipartStream) th
         bodyStream.toByteArray());
   }
 
-  private IgnoreKeyCaseMap splitIntoKeyValuePairs(
+  private Map<String, String> splitIntoKeyValuePairs(
       String str,
       Pattern entriesSeparatorPattern,
       Pattern keyValueSeparatorPattern,

File: feign-form-spring/src/test/java/feign/form/feign/spring/SpringFormEncoderTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package feign.form.feign.spring;
 
-import static java.nio.charset.StandardCharsets.UTF_8;
+import static feign.form.util.CharsetUtil.UTF_8;
 import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.DEFINED_PORT;
 
 import java.util.HashMap;

File: feign-form-spring/src/main/java/feign/form/spring/SpringManyMultipartFilesWriter.java
Patch:
@@ -40,7 +40,7 @@ public void write(Output output, String boundary, String key, Object value) thro
         fileWriter.write(output, boundary, key, file);
       }
     } else if (value instanceof Iterable) {
-      val iterable = (Iterable) value;
+      val iterable = (Iterable<?>) value;
       for (val file : iterable) {
         fileWriter.write(output, boundary, key, file);
       }
@@ -56,7 +56,7 @@ public boolean isApplicable(Object value) {
       return true;
     }
     if (value instanceof Iterable) {
-      val iterable = (Iterable) value;
+      val iterable = (Iterable<?>) value;
       val iterator = iterable.iterator();
       if (iterator.hasNext() && iterator.next() instanceof MultipartFile) {
         return true;

File: feign-form-spring/src/test/java/feign/form/feign/spring/SpringFormEncoderTest.java
Patch:
@@ -80,7 +80,7 @@ public void uploadFileNameAndContentTypeTest() throws Exception {
 
   @Test
   public void upload4Test() throws Exception {
-    val map = new HashMap<>();
+    val map = new HashMap<Object, Object>();
     map.put("one", 1);
     map.put("two", 2);
 

File: feign-form/src/main/java/feign/form/multipart/ManyFilesWriter.java
Patch:
@@ -38,7 +38,7 @@ public void write(Output output, String boundary, String key, Object value) thro
         fileWriter.write(output, boundary, key, file);
       }
     } else if (value instanceof Iterable) {
-      val iterable = (Iterable) value;
+      val iterable = (Iterable<?>) value;
       for (val file : iterable) {
         fileWriter.write(output, boundary, key, file);
       }
@@ -54,7 +54,7 @@ public boolean isApplicable(Object value) {
       return true;
     }
     if (value instanceof Iterable) {
-      val iterable = (Iterable) value;
+      val iterable = (Iterable<?>) value;
       val iterator = iterable.iterator();
       if (iterator.hasNext() && iterator.next() instanceof File) {
         return true;

File: feign-form/src/test/java/feign/form/BasicClientTest.java
Patch:
@@ -18,15 +18,14 @@
 
 import static feign.Logger.Level.FULL;
 import static java.util.Arrays.asList;
+import static java.util.Collections.singletonMap;
 import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.DEFINED_PORT;
 
 import feign.Feign;
 import feign.jackson.JacksonEncoder;
 import java.io.File;
 import java.nio.file.Files;
 import java.nio.file.Paths;
-import java.util.Arrays;
-import java.util.Collections;
 import java.util.Map;
 import lombok.val;
 import org.junit.Assert;
@@ -99,7 +98,7 @@ public void testJson() {
   @Test
   public void testQueryMap() {
     Map<String, Object> value =
-        Collections.singletonMap("filter", Arrays.asList("one", "two", "three", "four"));
+        singletonMap("filter", (Object) asList("one", "two", "three", "four"));
 
     val stringResponse = api.queryMap(value);
     Assert.assertEquals("4", stringResponse);

File: feign-form-spring/src/main/java/feign/form/spring/SpringFormEncoder.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: feign-form-spring/src/main/java/feign/form/spring/SpringManyMultipartFilesWriter.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *  http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -25,7 +25,7 @@
 import org.springframework.web.multipart.MultipartFile;
 
 /**
- * @author Artem Labazin <xxlabaza@gmail.com>
+ * @author Artem Labazin
  */
 @FieldDefaults(level = PRIVATE, makeFinal = true)
 public class SpringManyMultipartFilesWriter extends AbstractWriter {

File: feign-form-spring/src/test/java/feign/form/feign/spring/Client.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *  http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -37,7 +37,7 @@
 import org.springframework.web.multipart.MultipartFile;
 
 /**
- * @author Artem Labazin <xxlabaza@gmail.com>
+ * @author Artem Labazin
  */
 @FeignClient(
     name = "multipart-support-service",

File: feign-form-spring/src/test/java/feign/form/feign/spring/Server.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: feign-form-spring/src/test/java/feign/form/feign/spring/SpringFormEncoderTest.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: feign-form/src/main/java/feign/form/ContentProcessor.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -25,7 +25,7 @@
  *
  * @see MultipartFormContentProcessor
  * @see UrlencodedFormContentProcessor
- * @author Artem Labazin <xxlabaza@gmail.com>
+ * @author Artem Labazin
  */
 public interface ContentProcessor {
 

File: feign-form/src/main/java/feign/form/MultipartFormContentProcessor.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -37,7 +37,7 @@
 import lombok.val;
 
 /**
- * @author Artem Labazin <xxlabaza@gmail.com>
+ * @author Artem Labazin
  */
 @FieldDefaults(level = PRIVATE, makeFinal = true)
 public class MultipartFormContentProcessor implements ContentProcessor {

File: feign-form/src/main/java/feign/form/multipart/DelegateWriter.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -25,7 +25,7 @@
 import lombok.val;
 
 /**
- * @author Artem Labazin <xxlabaza@gmail.com>
+ * @author Artem Labazin
  */
 @RequiredArgsConstructor
 @FieldDefaults(level = PRIVATE, makeFinal = true)

File: feign-form/src/main/java/feign/form/multipart/ManyFilesWriter.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -23,7 +23,7 @@
 import lombok.val;
 
 /**
- * @author Artem Labazin <xxlabaza@gmail.com>
+ * @author Artem Labazin
  */
 @FieldDefaults(level = PRIVATE, makeFinal = true)
 public class ManyFilesWriter extends AbstractWriter {

File: feign-form/src/main/java/feign/form/multipart/ParameterWriter.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -21,7 +21,7 @@
 import lombok.val;
 
 /**
- * @author Artem Labazin <xxlabaza@gmail.com>
+ * @author Artem Labazin
  */
 public class ParameterWriter extends AbstractWriter {
 

File: feign-form/src/main/java/feign/form/multipart/Writer.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -17,7 +17,7 @@
 package feign.form.multipart;
 
 /**
- * @author Artem Labazin <xxlabaza@gmail.com>
+ * @author Artem Labazin
  */
 public interface Writer {
 

File: feign-form/src/test/java/feign/form/BasicClientTest.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -36,7 +36,7 @@
 import org.springframework.test.context.junit4.SpringRunner;
 
 /**
- * @author Artem Labazin <xxlabaza@gmail.com>
+ * @author Artem Labazin
  * @since 30.04.2016
  */
 @RunWith(SpringRunner.class)

File: feign-form/src/test/java/feign/form/CustomClientTest.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -36,7 +36,7 @@
 import org.springframework.test.context.junit4.SpringRunner;
 
 /**
- * @author Artem Labazin <xxlabaza@gmail.com>
+ * @author Artem Labazin
  * @since 27.11.2017
  */
 @RunWith(SpringRunner.class)

File: feign-form/src/test/java/feign/form/Dto.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -25,7 +25,7 @@
 import lombok.experimental.FieldDefaults;
 
 /**
- * @author Artem Labazin <xxlabaza@gmail.com>
+ * @author Artem Labazin
  * @since 01.05.2016
  */
 @Data

File: feign-form/src/test/java/feign/form/Server.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -46,7 +46,7 @@
 import org.springframework.web.multipart.MultipartFile;
 
 /**
- * @author Artem Labazin <xxlabaza@gmail.com>
+ * @author Artem Labazin
  * @since 30.04.2016
  */
 @Controller

File: feign-form/src/test/java/feign/form/TestClient.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -26,7 +26,7 @@
 import java.util.Map;
 
 /**
- * @author Artem Labazin <xxlabaza@gmail.com>
+ * @author Artem Labazin
  */
 public interface TestClient {
 

File: feign-form/src/test/java/feign/form/WildCardMapTest.java
Patch:
@@ -1,11 +1,11 @@
 /*
- * Copyright 2017 Artem Labazin <xxlabaza@gmail.com>.
+ * Copyright 2018 Artem Labazin
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *    http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: feign-form/src/main/java/feign/form/MultipartFormContentProcessor.java
Patch:
@@ -85,7 +85,9 @@ public void process(RequestTemplate template, Charset charset, Map<String, Objec
             .toString();
 
     template.header(CONTENT_TYPE_HEADER, contentTypeHeaderValue);
-    template.body(output.toByteArray(), charset);
+    // Feign's clients try to determine binary/string content by charset presence
+    // so, I set it to null (in spite of availability charset) for backward compatibility.
+    template.body(output.toByteArray(), null);
 
     output.close();
   }

File: httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java
Patch:
@@ -156,6 +156,9 @@ private ContentType getContentType(Request request) {
         Collection<String> values = entry.getValue();
         if (values != null && !values.isEmpty()) {
           contentType = ContentType.parse(values.iterator().next());
+          if (contentType.getCharset() == null) {
+            contentType = contentType.withCharset(request.charset());
+          }
           break;
         }
       }

File: core/src/main/java/feign/SynchronousMethodHandler.java
Patch:
@@ -139,7 +139,7 @@ Object executeAndDecode(RequestTemplate template) throws Throwable {
         } else {
           return decode(response);
         }
-      } else if (decode404 && response.status() == 404) {
+      } else if (decode404 && response.status() == 404 && void.class != metadata.returnType()) {
         return decode(response);
       } else {
         throw errorDecoder.decode(metadata.configKey(), response);

File: core/src/main/java/feign/RequestTemplate.java
Patch:
@@ -86,7 +86,7 @@ private static String urlDecode(String arg) {
     }
   }
 
-  private static String urlEncode(Object arg) {
+  static String urlEncode(Object arg) {
     try {
       return URLEncoder.encode(String.valueOf(arg), UTF_8.name());
     } catch (UnsupportedEncodingException e) {

File: core/src/main/java/feign/RequestInterceptor.java
Patch:
@@ -25,7 +25,7 @@
  *
  * <pre>
  * public void apply(RequestTemplate input) {
- *     input.replaceHeader(&quot;X-Auth&quot;, currentToken);
+ *     input.header(&quot;X-Auth&quot;, currentToken);
  * }
  * </pre>
  *

File: core/src/main/java/feign/Util.java
Patch:
@@ -286,7 +286,7 @@ private static long copy(InputStream from, OutputStream to) throws IOException {
     return total;
   }
 
-  static String decodeOrDefault(byte[] data, Charset charset, String defaultValue) {
+  public static String decodeOrDefault(byte[] data, Charset charset, String defaultValue) {
     if (data == null) {
       return defaultValue;
     }

File: hystrix/src/main/java/feign/hystrix/FallbackFactory.java
Patch:
@@ -33,9 +33,8 @@ public interface FallbackFactory<T> {
   /**
    * Returns an instance of the fallback appropriate for the given cause
    *
-   * @param cause corresponds to {@link
-   *     com.netflix.hystrix.AbstractCommand#getFailedExecutionException()} often, but not always an
-   *     instance of {@link FeignException}.
+   * @param cause corresponds to {@link com.netflix.hystrix.AbstractCommand#getExecutionException()}
+   *     often, but not always an instance of {@link FeignException}.
    */
   T create(Throwable cause);
 

File: hystrix/src/main/java/feign/hystrix/HystrixInvocationHandler.java
Patch:
@@ -119,7 +119,7 @@ protected Object getFallback() {
               return super.getFallback();
             }
             try {
-              Object fallback = fallbackFactory.create(getFailedExecutionException());
+              Object fallback = fallbackFactory.create(getExecutionException());
               Object result = fallbackMethodMap.get(method).invoke(fallback, args);
               if (isReturnsHystrixCommand(method)) {
                 return ((HystrixCommand) result).execute();

File: feign-form/src/main/java/feign/form/FormEncoder.java
Patch:
@@ -100,7 +100,7 @@ public FormEncoder(Encoder delegate) {
 
   @Override
   public void encode(Object object, Type bodyType, RequestTemplate template) {
-    if (bodyType != MAP_STRING_WILDCARD) {
+    if (!MAP_STRING_WILDCARD.equals(bodyType)) {
       deligate.encode(object, bodyType, template);
       return;
     }

File: feign-form/src/main/java/feign/form/FormEncoder.java
Patch:
@@ -100,7 +100,7 @@ public FormEncoder(Encoder delegate) {
 
   @Override
   public void encode(Object object, Type bodyType, RequestTemplate template) {
-    if (bodyType != MAP_STRING_WILDCARD) {
+    if (!MAP_STRING_WILDCARD.equals(bodyType)) {
       deligate.encode(object, bodyType, template);
       return;
     }

File: core/src/main/java/feign/codec/ErrorDecoder.java
Patch:
@@ -38,13 +38,13 @@
  * <p>Ex:
  *
  * <pre>
- * class IllegalArgumentExceptionOn404Decoder extends ErrorDecoder {
+ * class IllegalArgumentExceptionOn404Decoder implements ErrorDecoder {
  *
  *   &#064;Override
  *   public Exception decode(String methodKey, Response response) {
  *    if (response.status() == 400)
  *        throw new IllegalArgumentException(&quot;bad zone name&quot;);
- *    return new ErrorDecoder.Default().decode(methodKey, request, response);
+ *    return new ErrorDecoder.Default().decode(methodKey, response);
  *   }
  *
  * }

File: feign-form/src/main/java/feign/form/FormEncodedDataProcessor.java
Patch:
@@ -24,6 +24,8 @@
 import lombok.val;
 
 /**
+ * Form urlencoded implementation of {@link feign.form.FormDataProcessor}.
+ *
  * @author Artem Labazin <xxlabaza@gmail.com>
  * @since 30.04.2016
  */

File: feign-form-spring/src/test/java/feign/form/feign/spring/FeignClientAnnotatedInterfaceTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package feign.form;
+package feign.form.feign.spring;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.DEFINED_PORT;
@@ -34,7 +34,7 @@
 @RunWith(SpringRunner.class)
 @SpringBootTest(
     webEnvironment = DEFINED_PORT,
-    classes = Server.class,
+    classes = MultipartSupportService.class,
     properties = {"server.port=8080", "feign.hystrix.enabled=false"})
 public class FeignClientAnnotatedInterfaceTest {
 

File: feign-form-spring/src/test/java/feign/form/feign/spring/IMultipartSupportService.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package feign.form;
+package feign.form.feign.spring;
 
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.PathVariable;

File: feign-form/src/main/java/feign/form/FormDataProcessor.java
Patch:
@@ -22,7 +22,7 @@
  * @author Artem Labazin <xxlabaza@gmail.com>
  * @since 30.04.2016
  */
-interface FormDataProcessor {
+public interface FormDataProcessor {
 
   void process(Map<String, Object> data, RequestTemplate template);
 

File: feign-form/src/main/java/feign/form/FormEncodedDataProcessor.java
Patch:
@@ -27,7 +27,7 @@
  * @author Artem Labazin <xxlabaza@gmail.com>
  * @since 30.04.2016
  */
-class FormEncodedDataProcessor implements FormDataProcessor {
+public class FormEncodedDataProcessor implements FormDataProcessor {
 
   public static final String CONTENT_TYPE;
 

File: feign-form/src/test/java/feign/form/Server.java
Patch:
@@ -26,7 +26,6 @@
 
 import java.util.List;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.cloud.netflix.feign.EnableFeignClients;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
@@ -43,7 +42,6 @@
  */
 @Controller
 @SpringBootApplication
-@EnableFeignClients
 public class Server {
 
   @RequestMapping(value = "/form", method = POST)

File: ribbon/src/main/java/feign/ribbon/LBClient.java
Patch:
@@ -20,7 +20,6 @@
 import com.netflix.client.ClientRequest;
 import com.netflix.client.IResponse;
 import com.netflix.client.RequestSpecificRetryHandler;
-import com.netflix.client.RetryHandler;
 import com.netflix.client.config.CommonClientConfigKey;
 import com.netflix.client.config.IClientConfig;
 import com.netflix.loadbalancer.ILoadBalancer;
@@ -46,7 +45,6 @@ public static LBClient create(ILoadBalancer lb, IClientConfig clientConfig) {
 
   LBClient(ILoadBalancer lb, IClientConfig clientConfig) {
     super(lb, clientConfig);
-    this.setRetryHandler(RetryHandler.DEFAULT);
     this.clientConfig = clientConfig;
     connectTimeout = clientConfig.get(CommonClientConfigKey.ConnectTimeout);
     readTimeout = clientConfig.get(CommonClientConfigKey.ReadTimeout);

File: src/test/java/ru/xxlabaza/feign/form/Dto.java
Patch:
@@ -32,6 +32,5 @@ public class Dto implements Serializable {
   private static final long serialVersionUID = 4743133513526293872L;
 
   private String name;
-
   private Integer age;
 }

File: httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java
Patch:
@@ -153,9 +153,9 @@ private ContentType getContentType(Request request) {
     ContentType contentType = ContentType.DEFAULT_TEXT;
     for (Map.Entry<String, Collection<String>> entry : request.headers().entrySet())
       if (entry.getKey().equalsIgnoreCase("Content-Type")) {
-        Collection values = entry.getValue();
+        Collection<String> values = entry.getValue();
         if (values != null && !values.isEmpty()) {
-          contentType = ContentType.create(entry.getValue().iterator().next(), request.charset());
+          contentType = ContentType.parse(values.iterator().next());
           break;
         }
       }

File: src/test/java/ru/xxlabaza/feign/form/Server.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.util.List;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.netflix.feign.EnableFeignClients;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
@@ -42,6 +43,7 @@
  */
 @Controller
 @SpringBootApplication
+@EnableFeignClients
 public class Server {
 
   @RequestMapping(value = "/form", method = POST)

File: hystrix/src/test/java/feign/hystrix/HystrixBuilderTest.java
Patch:
@@ -145,7 +145,7 @@ public List<String> contributors(String owner, String repo) {
   @Test
   public void errorInFallbackHasExpectedBehavior() {
     thrown.expect(HystrixRuntimeException.class);
-    thrown.expectMessage("contributors failed and fallback failed.");
+    thrown.expectMessage("GitHub#contributors(String,String) failed and fallback failed.");
     thrown.expectCause(
         isA(FeignException.class)); // as opposed to RuntimeException (from the fallback)
 
@@ -169,7 +169,7 @@ public List<String> contributors(String owner, String repo) {
   @Test
   public void hystrixRuntimeExceptionPropagatesOnException() {
     thrown.expect(HystrixRuntimeException.class);
-    thrown.expectMessage("contributors failed and no fallback available.");
+    thrown.expectMessage("GitHub#contributors(String,String) failed and no fallback available.");
     thrown.expectCause(isA(FeignException.class));
 
     server.enqueue(new MockResponse().setResponseCode(500));
@@ -300,7 +300,7 @@ public void rxObservableListFall_noFallback() {
     assertThat(testSubscriber.getOnNextEvents()).isEmpty();
     assertThat(testSubscriber.getOnErrorEvents().get(0))
         .isInstanceOf(HystrixRuntimeException.class)
-        .hasMessage("listObservable failed and no fallback available.");
+        .hasMessage("TestInterface#listObservable() failed and no fallback available.");
   }
 
   @Test

File: core/src/main/java/feign/Contract.java
Patch:
@@ -282,7 +282,7 @@ protected boolean processAnnotationsOnParameter(
           isHttpAnnotation = true;
         } else if (annotationType == HeaderMap.class) {
           checkState(
-              data.queryMapIndex() == null,
+              data.headerMapIndex() == null,
               "HeaderMap annotation was present on multiple parameters.");
           data.headerMapIndex(paramIndex);
           isHttpAnnotation = true;

File: core/src/main/java/feign/Contract.java
Patch:
@@ -282,7 +282,7 @@ protected boolean processAnnotationsOnParameter(
           isHttpAnnotation = true;
         } else if (annotationType == HeaderMap.class) {
           checkState(
-              data.queryMapIndex() == null,
+              data.headerMapIndex() == null,
               "HeaderMap annotation was present on multiple parameters.");
           data.headerMapIndex(paramIndex);
           isHttpAnnotation = true;

File: core/src/main/java/feign/codec/ErrorDecoder.java
Patch:
@@ -44,7 +44,7 @@
  *   public Exception decode(String methodKey, Response response) {
  *    if (response.status() == 400)
  *        throw new IllegalArgumentException(&quot;bad zone name&quot;);
- *    return ErrorDecoder.DEFAULT.decode(methodKey, request, response);
+ *    return new ErrorDecoder.Default().decode(methodKey, request, response);
  *   }
  *
  * }

File: core/src/main/java/feign/codec/ErrorDecoder.java
Patch:
@@ -44,7 +44,7 @@
  *   public Exception decode(String methodKey, Response response) {
  *    if (response.status() == 400)
  *        throw new IllegalArgumentException(&quot;bad zone name&quot;);
- *    return ErrorDecoder.DEFAULT.decode(methodKey, request, response);
+ *    return new ErrorDecoder.Default().decode(methodKey, request, response);
  *   }
  *
  * }

File: core/src/main/java/feign/Contract.java
Patch:
@@ -60,7 +60,8 @@ public List<MethodMetadata> parseAndValidatateMetadata(Class<?> targetType) {
       Map<String, MethodMetadata> result = new LinkedHashMap<String, MethodMetadata>();
       for (Method method : targetType.getMethods()) {
         if (method.getDeclaringClass() == Object.class
-            || (method.getModifiers() & Modifier.STATIC) != 0) {
+            || (method.getModifiers() & Modifier.STATIC) != 0
+            || Util.isDefault(method)) {
           continue;
         }
         MethodMetadata metadata = parseAndValidateMetadata(targetType, method);

File: core/src/main/java/feign/Contract.java
Patch:
@@ -60,7 +60,8 @@ public List<MethodMetadata> parseAndValidatateMetadata(Class<?> targetType) {
       Map<String, MethodMetadata> result = new LinkedHashMap<String, MethodMetadata>();
       for (Method method : targetType.getMethods()) {
         if (method.getDeclaringClass() == Object.class
-            || (method.getModifiers() & Modifier.STATIC) != 0) {
+            || (method.getModifiers() & Modifier.STATIC) != 0
+            || Util.isDefault(method)) {
           continue;
         }
         MethodMetadata metadata = parseAndValidateMetadata(targetType, method);

File: core/src/main/java/feign/ReflectiveFeign.java
Patch:
@@ -270,7 +270,7 @@ protected RequestTemplate resolve(
         }
       }
       try {
-        encoder.encode(formVariables, Types.MAP_STRING_WILDCARD, mutable);
+        encoder.encode(formVariables, Encoder.MAP_STRING_WILDCARD, mutable);
       } catch (EncodeException e) {
         throw e;
       } catch (RuntimeException e) {

File: core/src/main/java/feign/Contract.java
Patch:
@@ -20,6 +20,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -58,7 +59,8 @@ public List<MethodMetadata> parseAndValidatateMetadata(Class<?> targetType) {
       }
       Map<String, MethodMetadata> result = new LinkedHashMap<String, MethodMetadata>();
       for (Method method : targetType.getMethods()) {
-        if (method.getDeclaringClass() == Object.class) {
+        if (method.getDeclaringClass() == Object.class
+            || (method.getModifiers() & Modifier.STATIC) != 0) {
           continue;
         }
         MethodMetadata metadata = parseAndValidateMetadata(targetType, method);

File: core/src/main/java/feign/RequestTemplate.java
Patch:
@@ -543,7 +543,7 @@ private StringBuilder pullAnyQueriesOutOfUrl(StringBuilder url) {
       for (String key : firstQueries.keySet()) {
         Collection<String> values = firstQueries.get(key);
         if (allValuesAreNull(values)) {
-          // Queryies where all values are null will
+          // Queries where all values are null will
           // be ignored by the query(key, value)-method
           // So we manually avoid this case here, to ensure that
           // we still fulfill the contract (ex. parameters without values)

File: core/src/main/java/feign/RequestTemplate.java
Patch:
@@ -543,7 +543,7 @@ private StringBuilder pullAnyQueriesOutOfUrl(StringBuilder url) {
       for (String key : firstQueries.keySet()) {
         Collection<String> values = firstQueries.get(key);
         if (allValuesAreNull(values)) {
-          // Queryies where all values are null will
+          // Queries where all values are null will
           // be ignored by the query(key, value)-method
           // So we manually avoid this case here, to ensure that
           // we still fulfill the contract (ex. parameters without values)

File: core/src/main/java/feign/RequestTemplate.java
Patch:
@@ -17,6 +17,7 @@
 
 import static feign.Util.CONTENT_LENGTH;
 import static feign.Util.UTF_8;
+import static feign.Util.checkArgument;
 import static feign.Util.checkNotNull;
 import static feign.Util.emptyToNull;
 import static feign.Util.toArray;
@@ -256,6 +257,7 @@ public Request request() {
   /* @see Request#method() */
   public RequestTemplate method(String method) {
     this.method = checkNotNull(method, "method");
+    checkArgument(method.matches("^[A-Z]+$"), "Invalid HTTP Method: %s", method);
     return this;
   }
 

File: core/src/main/java/feign/RequestTemplate.java
Patch:
@@ -17,6 +17,7 @@
 
 import static feign.Util.CONTENT_LENGTH;
 import static feign.Util.UTF_8;
+import static feign.Util.checkArgument;
 import static feign.Util.checkNotNull;
 import static feign.Util.emptyToNull;
 import static feign.Util.toArray;
@@ -256,6 +257,7 @@ public Request request() {
   /* @see Request#method() */
   public RequestTemplate method(String method) {
     this.method = checkNotNull(method, "method");
+    checkArgument(method.matches("^[A-Z]+$"), "Invalid HTTP Method: %s", method);
     return this;
   }
 

File: hystrix/src/main/java/feign/hystrix/HystrixFeign.java
Patch:
@@ -5,8 +5,9 @@
 import feign.Feign;
 
 /**
- * Allows Feign interfaces to return HystrixCommand objects. Also decorates normal Feign methods
- * with circuit breakers, but calls {@link HystrixCommand#execute()} directly.
+ * Allows Feign interfaces to return HystrixCommand or rx.Observable or rx.Single objects. Also
+ * decorates normal Feign methods with circuit breakers, but calls {@link HystrixCommand#execute()}
+ * directly.
  */
 public final class HystrixFeign {
 

File: hystrix/src/main/java/feign/hystrix/HystrixFeign.java
Patch:
@@ -5,8 +5,9 @@
 import feign.Feign;
 
 /**
- * Allows Feign interfaces to return HystrixCommand objects. Also decorates normal Feign methods
- * with circuit breakers, but calls {@link HystrixCommand#execute()} directly.
+ * Allows Feign interfaces to return HystrixCommand or rx.Observable or rx.Single objects. Also
+ * decorates normal Feign methods with circuit breakers, but calls {@link HystrixCommand#execute()}
+ * directly.
  */
 public final class HystrixFeign {
 

File: jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java
Patch:
@@ -92,7 +92,7 @@ protected void processAnnotationOnMethod(
       String pathValue = emptyToNull(Path.class.cast(methodAnnotation).value());
       checkState(pathValue != null, "Path.value() was empty on method %s", method.getName());
       String methodAnnotationValue = Path.class.cast(methodAnnotation).value();
-      if (!methodAnnotationValue.startsWith("/") && !data.template().toString().endsWith("/")) {
+      if (!methodAnnotationValue.startsWith("/") && !data.template().url().endsWith("/")) {
         methodAnnotationValue = "/" + methodAnnotationValue;
       }
       // jax-rs allows whitespace around the param name, as well as an optional regex. The contract

File: jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java
Patch:
@@ -92,7 +92,7 @@ protected void processAnnotationOnMethod(
       String pathValue = emptyToNull(Path.class.cast(methodAnnotation).value());
       checkState(pathValue != null, "Path.value() was empty on method %s", method.getName());
       String methodAnnotationValue = Path.class.cast(methodAnnotation).value();
-      if (!methodAnnotationValue.startsWith("/") && !data.template().toString().endsWith("/")) {
+      if (!methodAnnotationValue.startsWith("/") && !data.template().url().endsWith("/")) {
         methodAnnotationValue = "/" + methodAnnotationValue;
       }
       // jax-rs allows whitespace around the param name, as well as an optional regex. The contract

File: core/src/main/java/feign/SynchronousMethodHandler.java
Patch:
@@ -128,7 +128,7 @@ Object executeAndDecode(RequestTemplate template) throws Throwable {
           return decode(response);
         }
       } else if (decode404 && response.status() == 404) {
-        return decode(response);
+        return decoder.decode(response, metadata.returnType());
       } else {
         throw errorDecoder.decode(metadata.configKey(), response);
       }

File: gson/src/main/java/feign/gson/GsonDecoder.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.gson.JsonIOException;
 import com.google.gson.TypeAdapter;
 import feign.Response;
+import feign.Util;
 import feign.codec.Decoder;
 import java.io.IOException;
 import java.io.Reader;
@@ -45,9 +46,8 @@ public GsonDecoder(Gson gson) {
 
   @Override
   public Object decode(Response response, Type type) throws IOException {
-    if (response.body() == null) {
-      return null;
-    }
+    if (response.status() == 404) return Util.emptyValueOf(type);
+    if (response.body() == null) return null;
     Reader reader = response.body().asReader();
     try {
       return gson.fromJson(reader, type);

File: jackson-jaxb/src/main/java/feign/jackson/jaxb/JacksonJaxbJsonDecoder.java
Patch:
@@ -7,6 +7,7 @@
 import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;
 import feign.FeignException;
 import feign.Response;
+import feign.Util;
 import feign.codec.Decoder;
 import java.io.IOException;
 import java.lang.reflect.Type;
@@ -24,6 +25,8 @@ public JacksonJaxbJsonDecoder(ObjectMapper objectMapper) {
 
   @Override
   public Object decode(Response response, Type type) throws IOException, FeignException {
+    if (response.status() == 404) return Util.emptyValueOf(type);
+    if (response.body() == null) return null;
     return jacksonJaxbJsonProvider.readFrom(
         Object.class, type, null, APPLICATION_JSON_TYPE, null, response.body().asInputStream());
   }

File: jackson/src/main/java/feign/jackson/JacksonDecoder.java
Patch:
@@ -20,6 +20,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.RuntimeJsonMappingException;
 import feign.Response;
+import feign.Util;
 import feign.codec.Decoder;
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -48,9 +49,8 @@ public JacksonDecoder(ObjectMapper mapper) {
 
   @Override
   public Object decode(Response response, Type type) throws IOException {
-    if (response.body() == null) {
-      return null;
-    }
+    if (response.status() == 404) return Util.emptyValueOf(type);
+    if (response.body() == null) return null;
     Reader reader = response.body().asReader();
     if (!reader.markSupported()) {
       reader = new BufferedReader(reader, 1);

File: jaxb/src/main/java/feign/jaxb/JAXBDecoder.java
Patch:
@@ -16,6 +16,7 @@
 package feign.jaxb;
 
 import feign.Response;
+import feign.Util;
 import feign.codec.DecodeException;
 import feign.codec.Decoder;
 import java.io.IOException;
@@ -52,6 +53,8 @@ public JAXBDecoder(JAXBContextFactory jaxbContextFactory) {
 
   @Override
   public Object decode(Response response, Type type) throws IOException {
+    if (response.status() == 404) return Util.emptyValueOf(type);
+    if (response.body() == null) return null;
     if (!(type instanceof Class)) {
       throw new UnsupportedOperationException(
           "JAXB only supports decoding raw types. Found " + type);

File: sax/src/main/java/feign/sax/SAXDecoder.java
Patch:
@@ -21,6 +21,7 @@
 import static feign.Util.resolveLastTypeParameter;
 
 import feign.Response;
+import feign.Util;
 import feign.codec.DecodeException;
 import feign.codec.Decoder;
 import java.io.IOException;
@@ -66,9 +67,8 @@ public static Builder builder() {
 
   @Override
   public Object decode(Response response, Type type) throws IOException, DecodeException {
-    if (response.body() == null) {
-      return null;
-    }
+    if (response.status() == 404) return Util.emptyValueOf(type);
+    if (response.body() == null) return null;
     ContentHandlerWithResult.Factory<?> handlerFactory = handlerFactories.get(type);
     checkState(
         handlerFactory != null,

File: core/src/main/java/feign/RequestTemplate.java
Patch:
@@ -236,7 +236,7 @@ public RequestTemplate resolve(Map<String, ?> unencoded) {
     headers.clear();
     headers.putAll(resolvedHeaders);
     if (bodyTemplate != null) {
-      body(urlDecode(expand(bodyTemplate, unencoded)));
+      body(urlDecode(expand(bodyTemplate, encoded)));
     }
     return this;
   }

File: jackson/src/main/java/feign/jackson/JacksonDecoder.java
Patch:
@@ -52,6 +52,9 @@ public Object decode(Response response, Type type) throws IOException {
     }
     InputStream inputStream = response.body().asInputStream();
     try {
+      if (inputStream.available() <= 0) {
+        return null;
+      }
       return mapper.readValue(inputStream, mapper.constructType(type));
     } catch (RuntimeJsonMappingException e) {
       if (e.getCause() != null && e.getCause() instanceof IOException) {

File: core/src/main/java/feign/Logger.java
Patch:
@@ -41,7 +41,7 @@ protected static String methodTag(String configKey) {
    * Override to log requests and responses using your own implementation. Messages will be http
    * request and response text.
    *
-   * @param configKey value of {@link Feign#configKey(java.lang.reflect.Method)}
+   * @param configKey value of {@link Feign#configKey(Class, java.lang.reflect.Method)}
    * @param format {@link java.util.Formatter format string}
    * @param args arguments applied to {@code format}
    */

File: core/src/main/java/feign/MethodMetadata.java
Patch:
@@ -42,7 +42,7 @@ public final class MethodMetadata implements Serializable {
   MethodMetadata() {}
 
   /**
-   * @see Feign#configKey(java.lang.reflect.Method)
+   * @see Feign#configKey(Class, java.lang.reflect.Method)
    */
   public String configKey() {
     return configKey;

File: core/src/main/java/feign/ReflectiveFeign.java
Patch:
@@ -53,11 +53,11 @@ public class ReflectiveFeign extends Feign {
   public <T> T newInstance(Target<T> target) {
     Map<String, MethodHandler> nameToHandler = targetToHandlersByName.apply(target);
     Map<Method, MethodHandler> methodToHandler = new LinkedHashMap<Method, MethodHandler>();
-    for (Method method : target.type().getDeclaredMethods()) {
+    for (Method method : target.type().getMethods()) {
       if (method.getDeclaringClass() == Object.class) {
         continue;
       }
-      methodToHandler.put(method, nameToHandler.get(Feign.configKey(method)));
+      methodToHandler.put(method, nameToHandler.get(Feign.configKey(target.type(), method)));
     }
     InvocationHandler handler = factory.create(target, methodToHandler);
     return (T)

File: core/src/main/java/feign/SynchronousMethodHandler.java
Patch:
@@ -72,7 +72,7 @@ private SynchronousMethodHandler(
   @Override
   public Object invoke(Object[] argv) throws Throwable {
     RequestTemplate template = buildTemplateFromArgs.create(argv);
-    Retryer retryer = this.retryer;
+    Retryer retryer = this.retryer.clone();
     while (true) {
       try {
         return executeAndDecode(template);

File: jackson/src/main/java/feign/jackson/JacksonEncoder.java
Patch:
@@ -51,7 +51,7 @@ public JacksonEncoder(ObjectMapper mapper) {
   public void encode(Object object, Type bodyType, RequestTemplate template) {
     try {
       JavaType javaType = mapper.getTypeFactory().constructType(bodyType);
-      template.body(mapper.writerWithType(javaType).writeValueAsString(object));
+      template.body(mapper.writerFor(javaType).writeValueAsString(object));
     } catch (JsonProcessingException e) {
       throw new EncodeException(e.getMessage(), e);
     }

File: jackson/src/main/java/feign/jackson/JacksonEncoder.java
Patch:
@@ -51,7 +51,7 @@ public JacksonEncoder(ObjectMapper mapper) {
   public void encode(Object object, Type bodyType, RequestTemplate template) {
     try {
       JavaType javaType = mapper.getTypeFactory().constructType(bodyType);
-      template.body(mapper.writerWithType(javaType).writeValueAsString(object));
+      template.body(mapper.writerFor(javaType).writeValueAsString(object));
     } catch (JsonProcessingException e) {
       throw new EncodeException(e.getMessage(), e);
     }

File: core/src/main/java/feign/RequestTemplate.java
Patch:
@@ -404,8 +404,7 @@ public RequestTemplate header(String name, Iterable<String> values) {
    * ex. <br>
    *
    * <pre>
-   * template.headers(ImmutableMultimap.of(&quot;X-Application-Version&quot;,
-   * &quot;{version}&quot;));
+   * template.headers(mapOf(&quot;X-Application-Version&quot;, asList(&quot;{version}&quot;)));
    * </pre>
    *
    * @param headers if null, remove all headers. else value to replace all headers with.

File: core/src/main/java/feign/RequestTemplate.java
Patch:
@@ -404,8 +404,7 @@ public RequestTemplate header(String name, Iterable<String> values) {
    * ex. <br>
    *
    * <pre>
-   * template.headers(ImmutableMultimap.of(&quot;X-Application-Version&quot;,
-   * &quot;{version}&quot;));
+   * template.headers(mapOf(&quot;X-Application-Version&quot;, asList(&quot;{version}&quot;)));
    * </pre>
    *
    * @param headers if null, remove all headers. else value to replace all headers with.

File: ribbon/src/main/java/feign/ribbon/LoadBalancingTarget.java
Patch:
@@ -104,7 +104,7 @@ public Request apply(RequestTemplate input) {
   @Override
   public boolean equals(Object obj) {
     if (obj instanceof LoadBalancingTarget) {
-      LoadBalancingTarget<?> other = (LoadBalancingTarget) obj;
+      LoadBalancingTarget<?> other = (LoadBalancingTarget<?>) obj;
       return type.equals(other.type) && name.equals(other.name);
     }
     return false;

File: core/src/main/java/feign/Util.java
Patch:
@@ -112,7 +112,7 @@ public static <T> T[] toArray(Iterable<? extends T> iterable, Class<T> type) {
 
   /** Returns an unmodifiable collection which may be empty, but is never null. */
   public static <T> Collection<T> valuesOrEmpty(Map<String, Collection<T>> map, String key) {
-    return map.containsKey(key) ? map.get(key) : Collections.<T>emptyList();
+    return map.containsKey(key) && map.get(key) != null ? map.get(key) : Collections.<T>emptyList();
   }
 
   public static void ensureClosed(Closeable closeable) {

File: core/src/main/java/feign/Util.java
Patch:
@@ -112,7 +112,7 @@ public static <T> T[] toArray(Iterable<? extends T> iterable, Class<T> type) {
 
   /** Returns an unmodifiable collection which may be empty, but is never null. */
   public static <T> Collection<T> valuesOrEmpty(Map<String, Collection<T>> map, String key) {
-    return map.containsKey(key) ? map.get(key) : Collections.<T>emptyList();
+    return map.containsKey(key) && map.get(key) != null ? map.get(key) : Collections.<T>emptyList();
   }
 
   public static void ensureClosed(Closeable closeable) {

File: core/src/test/java/feign/client/TrustingSSLSocketFactory.java
Patch:
@@ -37,7 +37,7 @@
 import javax.net.ssl.X509TrustManager;
 
 /** Used for ssl tests to simplify setup. */
-final class TrustingSSLSocketFactory extends SSLSocketFactory
+public final class TrustingSSLSocketFactory extends SSLSocketFactory
     implements X509TrustManager, X509KeyManager {
 
   private static final Map<String, SSLSocketFactory> sslSocketFactories =

File: core/src/main/java/feign/RequestTemplate.java
Patch:
@@ -208,7 +208,7 @@ public RequestTemplate resolve(Map<String, ?> unencoded) {
       for (String value : valuesOrEmpty(headers, field)) {
         String resolved;
         if (value.indexOf('{') == 0) {
-          resolved = String.valueOf(unencoded.get(field));
+          resolved = expand(value, unencoded);
         } else {
           resolved = value;
         }

File: core/src/main/java/feign/MethodMetadata.java
Patch:
@@ -79,6 +79,7 @@ MethodMetadata bodyIndex(Integer bodyIndex) {
     return this;
   }
 
+  /** Type corresponding to {@link #bodyIndex()}. */
   public Type bodyType() {
     return bodyType;
   }

File: core/src/main/java/feign/ReflectiveFeign.java
Patch:
@@ -218,7 +218,7 @@ protected RequestTemplate resolve(
           formVariables.put(entry.getKey(), entry.getValue());
       }
       try {
-        encoder.encode(formVariables, mutable);
+        encoder.encode(formVariables, Types.MAP_STRING_WILDCARD, mutable);
       } catch (EncodeException e) {
         throw e;
       } catch (RuntimeException e) {
@@ -242,7 +242,7 @@ protected RequestTemplate resolve(
       Object body = argv[metadata.bodyIndex()];
       checkArgument(body != null, "Body parameter %s was null", metadata.bodyIndex());
       try {
-        encoder.encode(body, mutable);
+        encoder.encode(body, metadata.bodyType(), mutable);
       } catch (EncodeException e) {
         throw e;
       } catch (RuntimeException e) {

File: core/src/test/java/feign/FeignBuilderTest.java
Patch:
@@ -21,7 +21,6 @@
 import com.squareup.okhttp.mockwebserver.MockResponse;
 import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;
 import feign.codec.Decoder;
-import feign.codec.EncodeException;
 import feign.codec.Encoder;
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
@@ -68,7 +67,7 @@ public void testOverrideEncoder() throws Exception {
     Encoder encoder =
         new Encoder() {
           @Override
-          public void encode(Object object, RequestTemplate template) throws EncodeException {
+          public void encode(Object object, Type bodyType, RequestTemplate template) {
             template.body(object.toString());
           }
         };

File: core/src/test/java/feign/codec/DefaultEncoderTest.java
Patch:
@@ -35,15 +35,15 @@ public class DefaultEncoderTest {
   public void testEncodesStrings() throws Exception {
     String content = "This is my content";
     RequestTemplate template = new RequestTemplate();
-    encoder.encode(content, template);
+    encoder.encode(content, String.class, template);
     assertEquals(content, new String(template.body(), UTF_8));
   }
 
   @Test
   public void testEncodesByteArray() throws Exception {
     byte[] content = {12, 34, 56};
     RequestTemplate template = new RequestTemplate();
-    encoder.encode(content, template);
+    encoder.encode(content, byte[].class, template);
     assertTrue(Arrays.equals(content, template.body()));
   }
 
@@ -52,6 +52,6 @@ public void testRefusesToEncodeOtherTypes() throws Exception {
     thrown.expect(EncodeException.class);
     thrown.expectMessage("is not a type supported by this encoder.");
 
-    encoder.encode(new Date(), new RequestTemplate());
+    encoder.encode(new Date(), Date.class, new RequestTemplate());
   }
 }

File: gson/src/main/java/feign/gson/GsonEncoder.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.gson.TypeAdapter;
 import feign.RequestTemplate;
 import feign.codec.Encoder;
+import java.lang.reflect.Type;
 import java.util.Collections;
 
 public class GsonEncoder implements Encoder {
@@ -37,7 +38,7 @@ public GsonEncoder(Gson gson) {
   }
 
   @Override
-  public void encode(Object object, RequestTemplate template) {
-    template.body(gson.toJson(object));
+  public void encode(Object object, Type bodyType, RequestTemplate template) {
+    template.body(gson.toJson(object, bodyType));
   }
 }

File: core/src/main/java/feign/MethodMetadata.java
Patch:
@@ -79,6 +79,7 @@ MethodMetadata bodyIndex(Integer bodyIndex) {
     return this;
   }
 
+  /** Type corresponding to {@link #bodyIndex()}. */
   public Type bodyType() {
     return bodyType;
   }

File: core/src/main/java/feign/ReflectiveFeign.java
Patch:
@@ -218,7 +218,7 @@ protected RequestTemplate resolve(
           formVariables.put(entry.getKey(), entry.getValue());
       }
       try {
-        encoder.encode(formVariables, mutable);
+        encoder.encode(formVariables, Types.MAP_STRING_WILDCARD, mutable);
       } catch (EncodeException e) {
         throw e;
       } catch (RuntimeException e) {
@@ -242,7 +242,7 @@ protected RequestTemplate resolve(
       Object body = argv[metadata.bodyIndex()];
       checkArgument(body != null, "Body parameter %s was null", metadata.bodyIndex());
       try {
-        encoder.encode(body, mutable);
+        encoder.encode(body, metadata.bodyType(), mutable);
       } catch (EncodeException e) {
         throw e;
       } catch (RuntimeException e) {

File: core/src/test/java/feign/FeignBuilderTest.java
Patch:
@@ -21,7 +21,6 @@
 import com.squareup.okhttp.mockwebserver.MockResponse;
 import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;
 import feign.codec.Decoder;
-import feign.codec.EncodeException;
 import feign.codec.Encoder;
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
@@ -68,7 +67,7 @@ public void testOverrideEncoder() throws Exception {
     Encoder encoder =
         new Encoder() {
           @Override
-          public void encode(Object object, RequestTemplate template) throws EncodeException {
+          public void encode(Object object, Type bodyType, RequestTemplate template) {
             template.body(object.toString());
           }
         };

File: core/src/test/java/feign/codec/DefaultEncoderTest.java
Patch:
@@ -35,15 +35,15 @@ public class DefaultEncoderTest {
   public void testEncodesStrings() throws Exception {
     String content = "This is my content";
     RequestTemplate template = new RequestTemplate();
-    encoder.encode(content, template);
+    encoder.encode(content, String.class, template);
     assertEquals(content, new String(template.body(), UTF_8));
   }
 
   @Test
   public void testEncodesByteArray() throws Exception {
     byte[] content = {12, 34, 56};
     RequestTemplate template = new RequestTemplate();
-    encoder.encode(content, template);
+    encoder.encode(content, byte[].class, template);
     assertTrue(Arrays.equals(content, template.body()));
   }
 
@@ -52,6 +52,6 @@ public void testRefusesToEncodeOtherTypes() throws Exception {
     thrown.expect(EncodeException.class);
     thrown.expectMessage("is not a type supported by this encoder.");
 
-    encoder.encode(new Date(), new RequestTemplate());
+    encoder.encode(new Date(), Date.class, new RequestTemplate());
   }
 }

File: gson/src/main/java/feign/gson/GsonEncoder.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.gson.TypeAdapter;
 import feign.RequestTemplate;
 import feign.codec.Encoder;
+import java.lang.reflect.Type;
 import java.util.Collections;
 
 public class GsonEncoder implements Encoder {
@@ -37,7 +38,7 @@ public GsonEncoder(Gson gson) {
   }
 
   @Override
-  public void encode(Object object, RequestTemplate template) {
-    template.body(gson.toJson(object));
+  public void encode(Object object, Type bodyType, RequestTemplate template) {
+    template.body(gson.toJson(object, bodyType));
   }
 }

File: core/src/test/java/feign/client/DefaultClientTest.java
Patch:
@@ -52,6 +52,7 @@ interface TestInterface {
     Response post(String body);
 
     @RequestLine("PATCH /")
+    @Headers("Accept: text/plain")
     String patch();
   }
 
@@ -75,7 +76,7 @@ public void parsesRequestAndResponse() throws IOException, InterruptedException
     assertThat(server.takeRequest())
         .hasMethod("POST")
         .hasPath("/?foo=bar&foo=baz&qux=")
-        .hasHeaders("Foo: Bar", "Foo: Baz", "Qux: ", "Content-Length: 3")
+        .hasHeaders("Foo: Bar", "Foo: Baz", "Qux: ", "Accept: */*", "Content-Length: 3")
         .hasBody("foo");
   }
 

File: okhttp/src/test/java/feign/okhttp/OkHttpClientTest.java
Patch:
@@ -43,6 +43,7 @@ interface TestInterface {
     Response post(String body);
 
     @RequestLine("PATCH /")
+    @Headers("Accept: text/plain")
     String patch();
   }
 
@@ -68,7 +69,7 @@ public void parsesRequestAndResponse() throws IOException, InterruptedException
     assertThat(server.takeRequest())
         .hasMethod("POST")
         .hasPath("/?foo=bar&foo=baz&qux=")
-        .hasHeaders("Foo: Bar", "Foo: Baz", "Qux: ", "Content-Length: 3")
+        .hasHeaders("Foo: Bar", "Foo: Baz", "Qux: ", "Accept: */*", "Content-Length: 3")
         .hasBody("foo");
   }
 
@@ -100,7 +101,7 @@ public void patch() throws IOException, InterruptedException {
     assertEquals("foo", api.patch());
 
     assertThat(server.takeRequest())
-        .hasHeaders("Content-Length: 0") // Note: OkHttp adds content length.
+        .hasHeaders("Accept: text/plain", "Content-Length: 0") // Note: OkHttp adds content length.
         .hasNoHeaderNamed("Content-Type")
         .hasMethod("PATCH");
   }

File: core/src/test/java/feign/client/DefaultClientTest.java
Patch:
@@ -52,6 +52,7 @@ interface TestInterface {
     Response post(String body);
 
     @RequestLine("PATCH /")
+    @Headers("Accept: text/plain")
     String patch();
   }
 
@@ -75,7 +76,7 @@ public void parsesRequestAndResponse() throws IOException, InterruptedException
     assertThat(server.takeRequest())
         .hasMethod("POST")
         .hasPath("/?foo=bar&foo=baz&qux=")
-        .hasHeaders("Foo: Bar", "Foo: Baz", "Qux: ", "Content-Length: 3")
+        .hasHeaders("Foo: Bar", "Foo: Baz", "Qux: ", "Accept: */*", "Content-Length: 3")
         .hasBody("foo");
   }
 

File: okhttp/src/test/java/feign/okhttp/OkHttpClientTest.java
Patch:
@@ -43,6 +43,7 @@ interface TestInterface {
     Response post(String body);
 
     @RequestLine("PATCH /")
+    @Headers("Accept: text/plain")
     String patch();
   }
 
@@ -68,7 +69,7 @@ public void parsesRequestAndResponse() throws IOException, InterruptedException
     assertThat(server.takeRequest())
         .hasMethod("POST")
         .hasPath("/?foo=bar&foo=baz&qux=")
-        .hasHeaders("Foo: Bar", "Foo: Baz", "Qux: ", "Content-Length: 3")
+        .hasHeaders("Foo: Bar", "Foo: Baz", "Qux: ", "Accept: */*", "Content-Length: 3")
         .hasBody("foo");
   }
 
@@ -100,7 +101,7 @@ public void patch() throws IOException, InterruptedException {
     assertEquals("foo", api.patch());
 
     assertThat(server.takeRequest())
-        .hasHeaders("Content-Length: 0") // Note: OkHttp adds content length.
+        .hasHeaders("Accept: text/plain", "Content-Length: 0") // Note: OkHttp adds content length.
         .hasNoHeaderNamed("Content-Type")
         .hasMethod("PATCH");
   }

File: core/src/test/java/feign/DefaultContractTest.java
Patch:
@@ -282,7 +282,7 @@ public void formParamsParseIntoIndexToName() throws Exception {
 
   interface HeaderParams {
     @RequestLine("POST /")
-    @Headers("Auth-Token: {Auth-Token}")
+    @Headers({"Auth-Token: {Auth-Token}", "Auth-Token: Foo"})
     void logout(@Param("Auth-Token") String token);
   }
 
@@ -292,7 +292,7 @@ public void headerParamsParseIntoIndexToName() throws Exception {
         contract.parseAndValidatateMetadata(
             HeaderParams.class.getDeclaredMethod("logout", String.class));
 
-    assertThat(md.template()).hasHeaders(entry("Auth-Token", asList("{Auth-Token}")));
+    assertThat(md.template()).hasHeaders(entry("Auth-Token", asList("{Auth-Token}", "Foo")));
 
     assertThat(md.indexToName()).containsExactly(entry(0, asList("Auth-Token")));
   }

File: core/src/test/java/feign/client/TrustingSSLSocketFactory.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package feign;
+package feign.client;
 
 import static com.google.common.base.Throwables.propagate;
 

File: core/src/main/java/feign/codec/DecodeException.java
Patch:
@@ -21,8 +21,8 @@
 
 /**
  * Similar to {@code javax.websocket.DecodeException}, raised when a problem occurs decoding a
- * message. Note that {@code DecodeException} is not an {@code IOException}, nor have one set as its
- * cause.
+ * message. Note that {@code DecodeException} is not an {@code IOException}, nor does it have one
+ * set as its cause.
  */
 public class DecodeException extends FeignException {
 

File: core/src/main/java/feign/codec/EncodeException.java
Patch:
@@ -20,9 +20,9 @@
 import feign.FeignException;
 
 /**
- * Similar to {@code javax.websocket.EncodeException}, raised when a problem occurs decoding a
- * message. Note that {@code DecodeException} is not an {@code IOException}, nor have one set as its
- * cause.
+ * Similar to {@code javax.websocket.EncodeException}, raised when a problem occurs encoding a
+ * message. Note that {@code EncodeException} is not an {@code IOException}, nor does it have one
+ * set as its cause.
  */
 public class EncodeException extends FeignException {
 

File: core/src/main/java/feign/Util.java
Patch:
@@ -52,6 +52,9 @@ private Util() { // no instances
   /** UTF-8: eight-bit UCS Transformation Format. */
   public static final Charset UTF_8 = Charset.forName("UTF-8");
 
+  /** ISO-8859-1: ISO Latin Alphabet Number 1 (ISO-LATIN-1). */
+  public static final Charset ISO_8859_1 = Charset.forName("ISO-8859-1");
+
   /** Copy of {@code com.google.common.base.Preconditions#checkArgument}. */
   public static void checkArgument(
       boolean expression, String errorMessageTemplate, Object... errorMessageArgs) {

File: gson/src/test/java/feign/gson/GsonModuleTest.java
Patch:
@@ -52,8 +52,8 @@ public void providesEncoderDecoder() throws Exception {
     EncoderAndDecoderBindings bindings = new EncoderAndDecoderBindings();
     ObjectGraph.create(bindings).inject(bindings);
 
-    assertEquals(bindings.encoder.getClass(), GsonCodec.class);
-    assertEquals(bindings.decoder.getClass(), GsonCodec.class);
+    assertEquals(bindings.encoder.getClass(), GsonEncoder.class);
+    assertEquals(bindings.decoder.getClass(), GsonDecoder.class);
   }
 
   @Module(includes = GsonModule.class, injects = EncoderBindings.class)

File: gson/src/test/java/feign/gson/examples/GitHubExample.java
Patch:
@@ -17,7 +17,7 @@
 
 import feign.Feign;
 import feign.RequestLine;
-import feign.gson.GsonCodec;
+import feign.gson.GsonDecoder;
 import java.util.List;
 import javax.inject.Named;
 
@@ -36,7 +36,7 @@ static class Contributor {
 
   public static void main(String... args) throws InterruptedException {
     GitHub github =
-        Feign.builder().decoder(new GsonCodec()).target(GitHub.class, "https://api.github.com");
+        Feign.builder().decoder(new GsonDecoder()).target(GitHub.class, "https://api.github.com");
 
     System.out.println("Let's fetch and print a list of the contributors to this library.");
     List<Contributor> contributors = github.contributors("netflix", "feign");

File: core/src/main/java/feign/Util.java
Patch:
@@ -146,6 +146,7 @@ public static Type resolveLastTypeParameter(Type genericContext, Class<?> supert
 
   private static final int BUF_SIZE = 0x800; // 2K chars (4K bytes)
 
+  /** Adapted from {@code com.google.common.io.CharStreams.toString()}. */
   public static String toString(Reader reader) throws IOException {
     if (reader == null) {
       return null;

File: core/src/main/java/feign/Util.java
Patch:
@@ -146,6 +146,7 @@ public static Type resolveLastTypeParameter(Type genericContext, Class<?> supert
 
   private static final int BUF_SIZE = 0x800; // 2K chars (4K bytes)
 
+  /** Adapted from {@code com.google.common.io.CharStreams.toString()}. */
   public static String toString(Reader reader) throws IOException {
     if (reader == null) {
       return null;

File: core/src/main/java/feign/Client.java
Patch:
@@ -141,7 +141,7 @@ Response convertResponse(HttpURLConnection connection) throws IOException {
       } else {
         stream = connection.getInputStream();
       }
-      Reader body = stream != null ? new InputStreamReader(stream) : null;
+      Reader body = stream != null ? new InputStreamReader(stream, UTF_8) : null;
       return Response.create(status, reason, headers, body, length);
     }
   }

File: core/src/main/java/feign/FeignException.java
Patch:
@@ -21,9 +21,9 @@
 
 /** Origin exception type for all Http Apis. */
 public class FeignException extends RuntimeException {
-  static FeignException errorReading(Request request, Response response, IOException cause) {
+  static FeignException errorReading(Request request, Response ignored, IOException cause) {
     return new FeignException(
-        format("%s %s %s", cause.getMessage(), request.method(), request.url(), 0), cause);
+        format("%s %s %s", cause.getMessage(), request.method(), request.url()), cause);
   }
 
   public static FeignException errorStatus(String methodKey, Response response) {

File: core/src/main/java/feign/Target.java
Patch:
@@ -108,6 +108,7 @@ public int hashCode() {
 
     @Override
     public boolean equals(Object obj) {
+      if (obj == null) return false;
       if (this == obj) return true;
       if (HardCodedTarget.class != obj.getClass()) return false;
       HardCodedTarget<?> that = HardCodedTarget.class.cast(obj);

File: core/src/test/java/feign/LoggerTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package feign;
 
+import static feign.Util.UTF_8;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
 import static org.testng.Assert.fail;
@@ -127,7 +128,7 @@ public void levelEmits(final Logger.Level logLevel, List<String> expectedMessage
       }
 
       assertEquals(
-          new String(server.takeRequest().getBody()),
+          new String(server.takeRequest().getBody(), UTF_8),
           "{\"customer_name\": \"netflix\", \"user_name\": \"denominator\", \"password\":"
               + " \"password\"}");
     } finally {
@@ -242,7 +243,7 @@ public void readTimeoutEmits(final Logger.Level logLevel, List<String> expectedM
       assertMessagesMatch(expectedMessages);
 
       assertEquals(
-          new String(server.takeRequest().getBody()),
+          new String(server.takeRequest().getBody(), UTF_8),
           "{\"customer_name\": \"netflix\", \"user_name\": \"denominator\", \"password\":"
               + " \"password\"}");
     } finally {

File: core/src/test/java/feign/UtilTest.java
Patch:
@@ -39,7 +39,7 @@ interface ParameterizedDecoder<T extends List<String>> extends Decoder {}
 
   interface Parameterized<T> {}
 
-  class ParameterizedSubtype implements Parameterized<String> {}
+  static class ParameterizedSubtype implements Parameterized<String> {}
 
   @Test
   public void resolveLastTypeParameterWhenNotSubtype() throws Exception {

File: ribbon/src/main/java/feign/ribbon/LoadBalancingTarget.java
Patch:
@@ -109,6 +109,7 @@ public int hashCode() {
 
   @Override
   public boolean equals(Object obj) {
+    if (obj == null) return false;
     if (this == obj) return true;
     if (LoadBalancingTarget.class != obj.getClass()) return false;
     LoadBalancingTarget<?> that = LoadBalancingTarget.class.cast(obj);

File: ribbon/src/test/java/feign/ribbon/LoadBalancingTargetTest.java
Patch:
@@ -16,6 +16,7 @@
 package feign.ribbon;
 
 import static com.netflix.config.ConfigurationManager.getConfigInstance;
+import static feign.Util.UTF_8;
 import static org.testng.Assert.assertEquals;
 
 import com.google.mockwebserver.MockResponse;
@@ -39,10 +40,10 @@ public void loadBalancingDefaultPolicyRoundRobin() throws IOException, Interrupt
     String serverListKey = name + ".ribbon.listOfServers";
 
     MockWebServer server1 = new MockWebServer();
-    server1.enqueue(new MockResponse().setResponseCode(200).setBody("success!".getBytes()));
+    server1.enqueue(new MockResponse().setBody("success!".getBytes(UTF_8)));
     server1.play();
     MockWebServer server2 = new MockWebServer();
-    server2.enqueue(new MockResponse().setResponseCode(200).setBody("success!".getBytes()));
+    server2.enqueue(new MockResponse().setBody("success!".getBytes(UTF_8)));
     server2.play();
 
     getConfigInstance()

File: ribbon/src/test/java/feign/ribbon/RibbonClientTest.java
Patch:
@@ -16,6 +16,7 @@
 package feign.ribbon;
 
 import static com.netflix.config.ConfigurationManager.getConfigInstance;
+import static feign.Util.UTF_8;
 import static org.testng.Assert.assertEquals;
 
 import com.google.mockwebserver.MockResponse;
@@ -55,10 +56,10 @@ public void loadBalancingDefaultPolicyRoundRobin() throws IOException, Interrupt
     String serverListKey = client + ".ribbon.listOfServers";
 
     MockWebServer server1 = new MockWebServer();
-    server1.enqueue(new MockResponse().setResponseCode(200).setBody("success!".getBytes()));
+    server1.enqueue(new MockResponse().setBody("success!".getBytes(UTF_8)));
     server1.play();
     MockWebServer server2 = new MockWebServer();
-    server2.enqueue(new MockResponse().setResponseCode(200).setBody("success!".getBytes()));
+    server2.enqueue(new MockResponse().setBody("success!".getBytes(UTF_8)));
     server2.play();
 
     getConfigInstance()

File: core/src/main/java/feign/Client.java
Patch:
@@ -141,7 +141,7 @@ Response convertResponse(HttpURLConnection connection) throws IOException {
       } else {
         stream = connection.getInputStream();
       }
-      Reader body = stream != null ? new InputStreamReader(stream) : null;
+      Reader body = stream != null ? new InputStreamReader(stream, UTF_8) : null;
       return Response.create(status, reason, headers, body, length);
     }
   }

File: core/src/main/java/feign/FeignException.java
Patch:
@@ -21,9 +21,9 @@
 
 /** Origin exception type for all Http Apis. */
 public class FeignException extends RuntimeException {
-  static FeignException errorReading(Request request, Response response, IOException cause) {
+  static FeignException errorReading(Request request, Response ignored, IOException cause) {
     return new FeignException(
-        format("%s %s %s", cause.getMessage(), request.method(), request.url(), 0), cause);
+        format("%s %s %s", cause.getMessage(), request.method(), request.url()), cause);
   }
 
   public static FeignException errorStatus(String methodKey, Response response) {

File: core/src/main/java/feign/Target.java
Patch:
@@ -108,6 +108,7 @@ public int hashCode() {
 
     @Override
     public boolean equals(Object obj) {
+      if (obj == null) return false;
       if (this == obj) return true;
       if (HardCodedTarget.class != obj.getClass()) return false;
       HardCodedTarget<?> that = HardCodedTarget.class.cast(obj);

File: core/src/test/java/feign/LoggerTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package feign;
 
+import static feign.Util.UTF_8;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
 import static org.testng.Assert.fail;
@@ -127,7 +128,7 @@ public void levelEmits(final Logger.Level logLevel, List<String> expectedMessage
       }
 
       assertEquals(
-          new String(server.takeRequest().getBody()),
+          new String(server.takeRequest().getBody(), UTF_8),
           "{\"customer_name\": \"netflix\", \"user_name\": \"denominator\", \"password\":"
               + " \"password\"}");
     } finally {
@@ -242,7 +243,7 @@ public void readTimeoutEmits(final Logger.Level logLevel, List<String> expectedM
       assertMessagesMatch(expectedMessages);
 
       assertEquals(
-          new String(server.takeRequest().getBody()),
+          new String(server.takeRequest().getBody(), UTF_8),
           "{\"customer_name\": \"netflix\", \"user_name\": \"denominator\", \"password\":"
               + " \"password\"}");
     } finally {

File: core/src/test/java/feign/UtilTest.java
Patch:
@@ -39,7 +39,7 @@ interface ParameterizedDecoder<T extends List<String>> extends Decoder {}
 
   interface Parameterized<T> {}
 
-  class ParameterizedSubtype implements Parameterized<String> {}
+  static class ParameterizedSubtype implements Parameterized<String> {}
 
   @Test
   public void resolveLastTypeParameterWhenNotSubtype() throws Exception {

File: ribbon/src/main/java/feign/ribbon/LoadBalancingTarget.java
Patch:
@@ -109,6 +109,7 @@ public int hashCode() {
 
   @Override
   public boolean equals(Object obj) {
+    if (obj == null) return false;
     if (this == obj) return true;
     if (LoadBalancingTarget.class != obj.getClass()) return false;
     LoadBalancingTarget<?> that = LoadBalancingTarget.class.cast(obj);

File: ribbon/src/test/java/feign/ribbon/LoadBalancingTargetTest.java
Patch:
@@ -16,6 +16,7 @@
 package feign.ribbon;
 
 import static com.netflix.config.ConfigurationManager.getConfigInstance;
+import static feign.Util.UTF_8;
 import static org.testng.Assert.assertEquals;
 
 import com.google.mockwebserver.MockResponse;
@@ -39,10 +40,10 @@ public void loadBalancingDefaultPolicyRoundRobin() throws IOException, Interrupt
     String serverListKey = name + ".ribbon.listOfServers";
 
     MockWebServer server1 = new MockWebServer();
-    server1.enqueue(new MockResponse().setResponseCode(200).setBody("success!".getBytes()));
+    server1.enqueue(new MockResponse().setBody("success!".getBytes(UTF_8)));
     server1.play();
     MockWebServer server2 = new MockWebServer();
-    server2.enqueue(new MockResponse().setResponseCode(200).setBody("success!".getBytes()));
+    server2.enqueue(new MockResponse().setBody("success!".getBytes(UTF_8)));
     server2.play();
 
     getConfigInstance()

File: ribbon/src/test/java/feign/ribbon/RibbonClientTest.java
Patch:
@@ -16,6 +16,7 @@
 package feign.ribbon;
 
 import static com.netflix.config.ConfigurationManager.getConfigInstance;
+import static feign.Util.UTF_8;
 import static org.testng.Assert.assertEquals;
 
 import com.google.mockwebserver.MockResponse;
@@ -55,10 +56,10 @@ public void loadBalancingDefaultPolicyRoundRobin() throws IOException, Interrupt
     String serverListKey = client + ".ribbon.listOfServers";
 
     MockWebServer server1 = new MockWebServer();
-    server1.enqueue(new MockResponse().setResponseCode(200).setBody("success!".getBytes()));
+    server1.enqueue(new MockResponse().setBody("success!".getBytes(UTF_8)));
     server1.play();
     MockWebServer server2 = new MockWebServer();
-    server2.enqueue(new MockResponse().setResponseCode(200).setBody("success!".getBytes()));
+    server2.enqueue(new MockResponse().setBody("success!".getBytes(UTF_8)));
     server2.play();
 
     getConfigInstance()

File: gson/src/main/java/feign/gson/GsonModule.java
Patch:
@@ -106,7 +106,7 @@ public void encode(Object object, RequestTemplate template) {
 
     @Override
     public Object decode(Response response, Type type) throws IOException {
-      if (void.class.equals(type) || response.body() == null) {
+      if (response.body() == null) {
         return null;
       }
       Reader reader = response.body().asReader();

File: sax/src/main/java/feign/sax/SAXDecoder.java
Patch:
@@ -157,7 +157,7 @@ private SAXDecoder(Map<Type, Provider<? extends ContentHandlerWithResult<?>>> ha
 
   @Override
   public Object decode(Response response, Type type) throws IOException, DecodeException {
-    if (void.class.equals(type) || response.body() == null) {
+    if (response.body() == null) {
       return null;
     }
     Provider<? extends ContentHandlerWithResult<?>> handlerProvider = handlerProviders.get(type);

File: gson/src/main/java/feign/gson/GsonModule.java
Patch:
@@ -106,7 +106,7 @@ public void encode(Object object, RequestTemplate template) {
 
     @Override
     public Object decode(Response response, Type type) throws IOException {
-      if (void.class.equals(type) || response.body() == null) {
+      if (response.body() == null) {
         return null;
       }
       Reader reader = response.body().asReader();

File: sax/src/main/java/feign/sax/SAXDecoder.java
Patch:
@@ -157,7 +157,7 @@ private SAXDecoder(Map<Type, Provider<? extends ContentHandlerWithResult<?>>> ha
 
   @Override
   public Object decode(Response response, Type type) throws IOException, DecodeException {
-    if (void.class.equals(type) || response.body() == null) {
+    if (response.body() == null) {
       return null;
     }
     Provider<? extends ContentHandlerWithResult<?>> handlerProvider = handlerProviders.get(type);

File: gson/src/main/java/feign/gson/GsonModule.java
Patch:
@@ -29,6 +29,7 @@
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonWriter;
 import dagger.Provides;
+import feign.Feign;
 import feign.RequestTemplate;
 import feign.Response;
 import feign.codec.Decoder;
@@ -77,7 +78,7 @@
  * }
  * </pre>
  */
-@dagger.Module(library = true)
+@dagger.Module(injects = Feign.class, addsTo = Feign.Defaults.class)
 public final class GsonModule {
 
   @Provides

File: ribbon/src/test/java/feign/ribbon/LoadBalancingTargetTest.java
Patch:
@@ -52,7 +52,7 @@ public void loadBalancingDefaultPolicyRoundRobin() throws IOException, Interrupt
     try {
       LoadBalancingTarget<TestInterface> target =
           LoadBalancingTarget.create(TestInterface.class, "http://" + name);
-      TestInterface api = Feign.create(target);
+      TestInterface api = Feign.builder().target(target);
 
       api.post();
       api.post();

File: gson/src/main/java/feign/gson/GsonModule.java
Patch:
@@ -29,6 +29,7 @@
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonWriter;
 import dagger.Provides;
+import feign.Feign;
 import feign.RequestTemplate;
 import feign.Response;
 import feign.codec.Decoder;
@@ -77,7 +78,7 @@
  * }
  * </pre>
  */
-@dagger.Module(library = true)
+@dagger.Module(injects = Feign.class, addsTo = Feign.Defaults.class)
 public final class GsonModule {
 
   @Provides

File: ribbon/src/test/java/feign/ribbon/LoadBalancingTargetTest.java
Patch:
@@ -52,7 +52,7 @@ public void loadBalancingDefaultPolicyRoundRobin() throws IOException, Interrupt
     try {
       LoadBalancingTarget<TestInterface> target =
           LoadBalancingTarget.create(TestInterface.class, "http://" + name);
-      TestInterface api = Feign.create(target);
+      TestInterface api = Feign.builder().target(target);
 
       api.post();
       api.post();

File: feign-core/src/main/java/feign/MethodHandler.java
Patch:
@@ -101,13 +101,13 @@ private SynchronousMethodHandler(
 
     @Override
     protected Object decode(Object[] argv, Response response) throws Throwable {
-      if (metadata.returnType().equals(Response.class)) {
+      if (metadata.decodeInto().equals(Response.class)) {
         return response;
-      } else if (metadata.returnType() == void.class || response.body() == null) {
+      } else if (metadata.decodeInto() == void.class || response.body() == null) {
         return null;
       }
       try {
-        return decoder.decode(response.body().asReader(), metadata.returnType());
+        return decoder.decode(response.body().asReader(), metadata.decodeInto());
       } catch (FeignException e) {
         throw e;
       } catch (RuntimeException e) {

File: feign-core/src/main/java/feign/ReflectiveFeign.java
Patch:
@@ -179,7 +179,7 @@ public Map<String, MethodHandler> apply(Target key) {
       List<MethodMetadata> metadata = contract.parseAndValidatateMetadata(key.type());
       Map<String, MethodHandler> result = new LinkedHashMap<String, MethodHandler>();
       for (MethodMetadata md : metadata) {
-        Decoder.TextStream decoder = decoders.get(md.returnType());
+        Decoder.TextStream decoder = decoders.get(md.decodeInto());
         if (decoder == null) {
           decoder = decoders.get(Object.class);
         }
@@ -188,7 +188,7 @@ public Map<String, MethodHandler> apply(Target key) {
               format(
                   "%s needs @Provides(type = Set) Decoder decoder()"
                       + "{ // Decoder.TextStream<%s> or Decoder.TextStream<Object>}",
-                  md.configKey(), md.returnType()));
+                  md.configKey(), md.decodeInto()));
         }
         BuildTemplateByResolvingArgs buildTemplate;
         if (!md.formParams().isEmpty() && md.template().bodyTemplate() == null) {
@@ -210,7 +210,7 @@ public Map<String, MethodHandler> apply(Target key) {
                 format(
                     "%s needs @Provides(type = Set) Encoder encoder()"
                         + "{ // Encoder.Text<%s> or Encoder.Text<Object>}",
-                    md.bodyType(), md.returnType()));
+                    md.bodyType(), md.decodeInto()));
           }
           buildTemplate = new BuildEncodedTemplateFromArgs(md, encoder);
         } else {

File: feign-jaxrs/src/main/java/feign/jaxrs/JAXRSModule.java
Patch:
@@ -43,7 +43,7 @@ Contract provideContract() {
     return new JAXRSContract();
   }
 
-  static final class JAXRSContract extends Contract {
+  public static final class JAXRSContract extends Contract {
 
     @Override
     protected void processAnnotationOnMethod(

File: feign-core/src/main/java/feign/Contract.java
Patch:
@@ -69,6 +69,7 @@ public MethodMetadata parseAndValidatateMetadata(Method method) {
             "Body parameters cannot be used with @FormParam parameters.");
         checkState(data.bodyIndex() == null, "Method has too many Body parameters: %s", method);
         data.bodyIndex(i);
+        data.bodyType(method.getGenericParameterTypes()[i]);
       }
     }
     return data;
@@ -107,7 +108,7 @@ protected void nameParam(MethodMetadata data, String name, int i) {
     data.indexToName().put(i, names);
   }
 
-  static class DefaultContract extends Contract {
+  static class Default extends Contract {
 
     @Override
     protected void processAnnotationOnMethod(

File: feign-core/src/main/java/feign/FeignException.java
Patch:
@@ -32,8 +32,8 @@ static FeignException errorReading(Request request, Response response, IOExcepti
   public static FeignException errorStatus(String methodKey, Response response) {
     String message = format("status %s reading %s", response.status(), methodKey);
     try {
-      Object body = toString.decode(response, String.class);
-      if (body != null) {
+      if (response.body() != null) {
+        String body = toString.decode(response.body().asReader(), String.class);
         response =
             Response.create(
                 response.status(), response.reason(), response.headers(), body.toString());

File: feign-core/src/main/java/feign/RequestTemplate.java
Patch:
@@ -379,7 +379,7 @@ public Map<String, Collection<String>> headers() {
 
   /**
    * replaces the {@link feign.Util#CONTENT_LENGTH} header. <br>
-   * Usually populated by {@link feign.codec.BodyEncoder} or {@link feign.codec.FormEncoder}
+   * Usually populated by an {@link feign.codec.Encoder}.
    *
    * @see Request#body()
    */

File: feign-jaxrs/src/main/java/feign/jaxrs/JAXRSModule.java
Patch:
@@ -33,7 +33,7 @@
 import javax.ws.rs.Produces;
 import javax.ws.rs.QueryParam;
 
-@dagger.Module(library = true)
+@dagger.Module(library = true, overrides = true)
 public final class JAXRSModule {
   static final String ACCEPT = "Accept";
   static final String CONTENT_TYPE = "Content-Type";

File: feign-jaxrs/src/main/java/feign/jaxrs/JAXRSModule.java
Patch:
@@ -33,7 +33,7 @@
 import javax.ws.rs.Produces;
 import javax.ws.rs.QueryParam;
 
-@dagger.Module(library = true)
+@dagger.Module(library = true, overrides = true)
 public final class JAXRSModule {
   static final String ACCEPT = "Accept";
   static final String CONTENT_TYPE = "Content-Type";

File: feign-core/src/main/java/feign/MethodHandler.java
Patch:
@@ -122,7 +122,7 @@ public Object executeAndDecode(String configKey, RequestTemplate template, Type
         }
         return decoder.decode(configKey, response, returnType);
       } else {
-        return errorDecoder.decode(configKey, response, returnType);
+        throw errorDecoder.decode(configKey, response);
       }
     } catch (Throwable e) {
       ensureBodyClosed(response);

File: feign-core/src/test/java/feign/codec/DefaultErrorDecoderTest.java
Patch:
@@ -34,7 +34,7 @@ public void throwsFeignException() throws Throwable {
         Response.create(
             500, "Internal server error", ImmutableMap.<String, Collection<String>>of(), null);
 
-    ErrorDecoder.DEFAULT.decode("Service#foo()", response, void.class);
+    throw ErrorDecoder.DEFAULT.decode("Service#foo()", response);
   }
 
   @Test(
@@ -49,7 +49,7 @@ public void throwsFeignExceptionIncludingBody() throws Throwable {
             ImmutableMap.<String, Collection<String>>of(),
             "hello world");
 
-    ErrorDecoder.DEFAULT.decode("Service#foo()", response, void.class);
+    throw ErrorDecoder.DEFAULT.decode("Service#foo()", response);
   }
 
   @Test(
@@ -63,6 +63,6 @@ public void retryAfterHeaderThrowsRetryableException() throws Throwable {
             ImmutableMultimap.of(RETRY_AFTER, "Sat, 1 Jan 2000 00:00:00 GMT").asMap(),
             null);
 
-    ErrorDecoder.DEFAULT.decode("Service#foo()", response, void.class);
+    throw ErrorDecoder.DEFAULT.decode("Service#foo()", response);
   }
 }

File: feign-core/src/main/java/feign/MethodHandler.java
Patch:
@@ -122,7 +122,7 @@ public Object executeAndDecode(String configKey, RequestTemplate template, Type
         }
         return decoder.decode(configKey, response, returnType);
       } else {
-        return errorDecoder.decode(configKey, response, returnType);
+        throw errorDecoder.decode(configKey, response);
       }
     } catch (Throwable e) {
       ensureBodyClosed(response);

File: feign-core/src/test/java/feign/codec/DefaultErrorDecoderTest.java
Patch:
@@ -34,7 +34,7 @@ public void throwsFeignException() throws Throwable {
         Response.create(
             500, "Internal server error", ImmutableMap.<String, Collection<String>>of(), null);
 
-    ErrorDecoder.DEFAULT.decode("Service#foo()", response, void.class);
+    throw ErrorDecoder.DEFAULT.decode("Service#foo()", response);
   }
 
   @Test(
@@ -49,7 +49,7 @@ public void throwsFeignExceptionIncludingBody() throws Throwable {
             ImmutableMap.<String, Collection<String>>of(),
             "hello world");
 
-    ErrorDecoder.DEFAULT.decode("Service#foo()", response, void.class);
+    throw ErrorDecoder.DEFAULT.decode("Service#foo()", response);
   }
 
   @Test(
@@ -63,6 +63,6 @@ public void retryAfterHeaderThrowsRetryableException() throws Throwable {
             ImmutableMultimap.of(RETRY_AFTER, "Sat, 1 Jan 2000 00:00:00 GMT").asMap(),
             null);
 
-    ErrorDecoder.DEFAULT.decode("Service#foo()", response, void.class);
+    throw ErrorDecoder.DEFAULT.decode("Service#foo()", response);
   }
 }

