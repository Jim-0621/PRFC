File: library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -27,8 +27,8 @@
 
 import com.sothree.slidinguppanel.library.R;
 
-import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 public class SlidingUpPanelLayout extends ViewGroup {
 
@@ -216,7 +216,7 @@ public enum PanelState {
     private float mInitialMotionY;
     private boolean mIsScrollableViewHandlingTouch = false;
 
-    private List<PanelSlideListener> mPanelSlideListeners = new ArrayList<>();
+    private List<PanelSlideListener> mPanelSlideListeners = new CopyOnWriteArrayList<>();
     private View.OnClickListener mFadeOnClickListener;
 
     private final ViewDragHelper mDragHelper;

File: library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -1173,7 +1173,7 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
         boolean result;
         final int save = canvas.save(Canvas.CLIP_SAVE_FLAG);
 
-        if (mSlideableView != child) { // if main view
+        if (mSlideableView != null && mSlideableView != child) { // if main view
             // Clip against the slider; no sense drawing what will immediately be covered,
             // Unless the panel is set to overlay content
             canvas.getClipBounds(mTmpRect);

File: library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -1125,7 +1125,9 @@ private void applyParallaxForCurrentSlideOffset() {
     }
 
     private void onPanelDragged(int newTop) {
-        mLastNotDraggingSlideState = mSlideState;
+        if (mSlideState != PanelState.DRAGGING) {
+            mLastNotDraggingSlideState = mSlideState;
+        }
         setPanelStateInternal(PanelState.DRAGGING);
         // Recompute the slide offset based on the new top position
         mSlideOffset = computeSlideOffset(newTop);

File: library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -719,9 +719,9 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         final int heightMode = MeasureSpec.getMode(heightMeasureSpec);
         final int heightSize = MeasureSpec.getSize(heightMeasureSpec);
 
-        if (widthMode != MeasureSpec.EXACTLY) {
+        if (widthMode != MeasureSpec.EXACTLY && widthMode != MeasureSpec.AT_MOST) {
             throw new IllegalStateException("Width must have an exact value or MATCH_PARENT");
-        } else if (heightMode != MeasureSpec.EXACTLY) {
+        } else if (heightMode != MeasureSpec.EXACTLY && heightMode != MeasureSpec.AT_MOST) {
             throw new IllegalStateException("Height must have an exact value or MATCH_PARENT");
         }
 

File: library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -1124,7 +1124,9 @@ private void applyParallaxForCurrentSlideOffset() {
     }
 
     private void onPanelDragged(int newTop) {
-        mLastNotDraggingSlideState = mSlideState;
+        if (mSlideState != PanelState.DRAGGING) {
+            mLastNotDraggingSlideState = mSlideState;
+        }
         setPanelStateInternal(PanelState.DRAGGING);
         // Recompute the slide offset based on the new top position
         mSlideOffset = computeSlideOffset(newTop);

File: library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -714,9 +714,9 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         final int heightMode = MeasureSpec.getMode(heightMeasureSpec);
         final int heightSize = MeasureSpec.getSize(heightMeasureSpec);
 
-        if (widthMode != MeasureSpec.EXACTLY) {
+        if (widthMode != MeasureSpec.EXACTLY && widthMode != MeasureSpec.AT_MOST) {
             throw new IllegalStateException("Width must have an exact value or MATCH_PARENT");
-        } else if (heightMode != MeasureSpec.EXACTLY) {
+        } else if (heightMode != MeasureSpec.EXACTLY && heightMode != MeasureSpec.AT_MOST) {
             throw new IllegalStateException("Height must have an exact value or MATCH_PARENT");
         }
 

File: library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -1154,7 +1154,7 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
         boolean result;
         final int save = canvas.save(Canvas.CLIP_SAVE_FLAG);
 
-        if (mSlideableView != child) { // if main view
+        if (mSlideableView != null && mSlideableView != child) { // if main view
             // Clip against the slider; no sense drawing what will immediately be covered,
             // Unless the panel is set to overlay content
             canvas.getClipBounds(mTmpRect);

File: library/src/main/java/com/sothree/slidinguppanel/ScrollableViewHelper.java
Patch:
@@ -7,7 +7,7 @@
 
 /**
  * Helper class for determining the current scroll positions for scrollable views. Currently works
- * for ListView, ScrollView & RecyclerView, but the library users can override it to add support
+ * for ListView, ScrollView and RecyclerView, but the library users can override it to add support
  * for other views.
  */
 public class ScrollableViewHelper {

File: library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -921,7 +921,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
     }
 
     @Override
-    public boolean onTouchEvent(@NonNull MotionEvent ev) {
+    public boolean onTouchEvent(MotionEvent ev) {
         if (!isEnabled() || !isTouchEnabled()) {
             return super.onTouchEvent(ev);
         }
@@ -935,7 +935,7 @@ public boolean onTouchEvent(@NonNull MotionEvent ev) {
     }
 
     @Override
-    public boolean dispatchTouchEvent(@NonNull MotionEvent ev) {
+    public boolean dispatchTouchEvent(MotionEvent ev) {
         final int action = MotionEventCompat.getActionMasked(ev);
 
         if (!isEnabled() || !isTouchEnabled() || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {

File: library/src/main/java/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -910,7 +910,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
                 // Check if this was a click on the faded part of the screen, and fire off the listener if there is one.
                 if (ady <= dragSlop
                         && adx <= dragSlop
-                        && mSlideOffset >=0 && !isViewUnder(mSlideableView, (int) mInitialMotionX, (int) mInitialMotionY) && mFadeOnClickListener != null) {
+                        && mSlideOffset > 0 && !isViewUnder(mSlideableView, (int) mInitialMotionX, (int) mInitialMotionY) && mFadeOnClickListener != null) {
                     playSoundEffect(android.view.SoundEffectConstants.CLICK);
                     mFadeOnClickListener.onClick(this);
                     return true;

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -869,7 +869,7 @@ protected void onSizeChanged(int w, int h, int oldw, int oldh) {
     @Override
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         // If the scrollable view is handling touch, never intercept
-        if (mIsScrollableViewHandlingTouch) {
+        if (mIsScrollableViewHandlingTouch || !isTouchEnabled()) {
             mDragHelper.cancel();
             return false;
         }

File: library/src/com/sothree/slidinguppanel/ViewDragHelper.java
Patch:
@@ -822,7 +822,7 @@ private void clearMotionHistory() {
     }
 
     private void clearMotionHistory(int pointerId) {
-        if (mInitialMotionX == null) {
+        if (mInitialMotionX == null || mInitialMotionX.length <= pointerId) {
             return;
         }
         mInitialMotionX[pointerId] = 0;

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -1272,7 +1272,7 @@ public void draw(Canvas c) {
         super.draw(c);
 
         // draw the shadow
-        if (mShadowDrawable != null) {
+        if (mShadowDrawable != null && mSlideableView != null) {
             final int right = mSlideableView.getRight();
             final int top;
             final int bottom;

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -410,7 +410,7 @@ public void setGravity(int gravity) {
      */
     public void setCoveredFadeColor(int color) {
         mCoveredFadeColor = color;
-        invalidate();
+        requestLayout();
     }
 
     /**

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -174,7 +174,7 @@ public enum PanelState {
     /**
      * If the current slide state is DRAGGING, this will store the last non dragging state
      */
-    private PanelState mLastNotDraggingSlideState = null;
+    private PanelState mLastNotDraggingSlideState = DEFAULT_SLIDE_STATE;
 
     /**
      * How far the panel is offset from its expanded position.

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -174,7 +174,7 @@ public enum PanelState {
     /**
      * If the current slide state is DRAGGING, this will store the last non dragging state
      */
-    private PanelState mLastNotDraggingSlideState = null;
+    private PanelState mLastNotDraggingSlideState = DEFAULT_SLIDE_STATE;
 
     /**
      * How far the panel is offset from its expanded position.

File: library/src/com/sothree/slidinguppanel/ViewDragHelper.java
Patch:
@@ -1146,7 +1146,7 @@ public void processTouchEvent(MotionEvent ev) {
                             break;
                         }
 
-                        final View toCapture = findTopChildUnder((int) x, (int) y);
+                        final View toCapture = findTopChildUnder((int) mInitialMotionX[pointerId], (int) mInitialMotionY[pointerId]);
                         if (checkTouchSlop(toCapture, dx, dy) &&
                                 tryCaptureViewForDrag(toCapture, pointerId)) {
                             break;

File: library/src/com/sothree/slidinguppanel/ViewDragHelper.java
Patch:
@@ -873,7 +873,7 @@ void setDragState(int state) {
         if (mDragState != state) {
             mDragState = state;
             mCallback.onViewDragStateChanged(state);
-            if (state == STATE_IDLE) {
+            if (mDragState == STATE_IDLE) {
                 mCapturedView = null;
             }
         }
@@ -1463,4 +1463,4 @@ private int getEdgesTouched(int x, int y) {
 
         return result;
     }
-}
\ No newline at end of file
+}

File: library/src/com/sothree/slidinguppanel/ViewDragHelper.java
Patch:
@@ -843,7 +843,9 @@ private void saveLastMotion(MotionEvent ev) {
             final int pointerId = MotionEventCompat.getPointerId(ev, i);
             final float x = MotionEventCompat.getX(ev, i);
             final float y = MotionEventCompat.getY(ev, i);
-            if (mLastMotionX != null && mLastMotionY != null) {
+            // Sometimes we can try and save last motion for a pointer never recorded in initial motion. In this case we just discard it.
+            if (mLastMotionX != null && mLastMotionY != null
+                    && mLastMotionX.length > pointerId && mLastMotionY.length > pointerId) {
                 mLastMotionX[pointerId] = x;
                 mLastMotionY[pointerId] = y;
             }

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -614,7 +614,7 @@ public boolean isOverlayed() {
     /**
      * Sets whether or not the main content is clipped to the top of the panel
      *
-     * @param overlayed
+     * @param clip
      */
     public void setClipPanel(boolean clip) {
         mClipPanel = clip;

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -1029,7 +1029,7 @@ private boolean isViewUnder(View view, int x, int y) {
                 screenY >= viewLocation[1] && screenY < viewLocation[1] + view.getHeight();
     }
 
-    private int getScrollableViewScrollPosition() {
+    protected int getScrollableViewScrollPosition() {
         if (mScrollableView == null) return 0;
         if (mScrollableView instanceof ScrollView) {
             if (mIsSlidingUp) {

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -976,7 +976,7 @@ public boolean dispatchTouchEvent(@NonNull MotionEvent ev) {
                 if (mIsScrollableViewHandlingTouch) {
                     // Send an 'UP' event to the child.
                     MotionEvent up = MotionEvent.obtain(ev);
-                    up.setAction(MotionEvent.ACTION_UP);
+                    up.setAction(MotionEvent.ACTION_CANCEL);
                     super.dispatchTouchEvent(up);
                     up.recycle();
 

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -1212,7 +1212,7 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
      * @param velocity    initial velocity in case of fling, or 0.
      */
     boolean smoothSlideTo(float slideOffset, int velocity) {
-        if (!isEnabled()) {
+        if (!isEnabled() || mSlideableView == null) {
             // Nothing to do.
             return false;
         }

File: library/src/com/sothree/slidinguppanel/ViewDragHelper.java
Patch:
@@ -871,7 +871,7 @@ void setDragState(int state) {
         if (mDragState != state) {
             mDragState = state;
             mCallback.onViewDragStateChanged(state);
-            if (state == STATE_IDLE) {
+            if (mDragState == STATE_IDLE) {
                 mCapturedView = null;
             }
         }
@@ -1457,4 +1457,4 @@ private int getEdgesTouched(int x, int y) {
 
         return result;
     }
-}
\ No newline at end of file
+}

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -158,7 +158,7 @@ public enum PanelState {
         HIDDEN,
         DRAGGING
     }
-    private PanelState mSlideState = PanelState.COLLAPSED;
+    private PanelState mSlideState = DEFAULT_SLIDE_STATE;
 
     /**
      * How far the panel is offset from its expanded position.
@@ -392,7 +392,7 @@ public void setTouchEnabled(boolean enabled) {
     }
 
     public boolean isTouchEnabled() {
-        return mIsTouchEnabled && mSlideableView != null;
+        return mIsTouchEnabled && mSlideableView != null && mSlideState != PanelState.HIDDEN;
     }
 
     /**
@@ -931,7 +931,7 @@ public void setPanelState(PanelState state) {
             throw new IllegalArgumentException("Panel state cannot be null or DRAGGING.");
         }
         if (!isEnabled()
-                || mSlideableView == null
+                || (!mFirstLayout && mSlideableView == null)
                 || state == mSlideState
                 || mSlideState == PanelState.DRAGGING) return;
 

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -904,7 +904,7 @@ private void onPanelDragged(int newTop) {
             // expand the main view
             lp.height = mIsSlidingUp ? (newTop - getPaddingBottom()) : (getHeight() - getPaddingBottom() - mSlideableView.getMeasuredHeight() - newTop);
             mMainView.requestLayout();
-        } else if (lp.height != defaultHeight) {
+        } else if (lp.height != defaultHeight && !mOverlayContent) {
             lp.height = defaultHeight;
             mMainView.requestLayout();
         }

File: library/src/com/sothree/slidinguppanel/ViewDragHelper.java
Patch:
@@ -1006,6 +1006,9 @@ public boolean shouldInterceptTouchEvent(MotionEvent ev) {
                 final int pointerCount = MotionEventCompat.getPointerCount(ev);
                 for (int i = 0; i < pointerCount && mInitialMotionX != null && mInitialMotionY != null; i++) {
                     final int pointerId = MotionEventCompat.getPointerId(ev, i);
+                    if (pointerId >= mInitialMotionX.length || pointerId >= mInitialMotionY.length) {
+                        continue;
+                    }
                     final float x = MotionEventCompat.getX(ev, i);
                     final float y = MotionEventCompat.getY(ev, i);
                     final float dx = x - mInitialMotionX[pointerId];

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -295,7 +295,7 @@ public SlidingUpPanelLayout(Context context, AttributeSet attrs, int defStyle) {
                 mMinFlingVelocity = ta.getInt(R.styleable.SlidingUpPanelLayout_umanoFlingVelocity, DEFAULT_MIN_FLING_VELOCITY);
                 mCoveredFadeColor = ta.getColor(R.styleable.SlidingUpPanelLayout_umanoFadeColor, DEFAULT_FADE_COLOR);
 
-                mDragViewResId = ta.getResourceId(R.styleable.SlidingUpPanelLayout_umanoFragView, -1);
+                mDragViewResId = ta.getResourceId(R.styleable.SlidingUpPanelLayout_umanoDragView, -1);
 
                 mOverlayContent = ta.getBoolean(R.styleable.SlidingUpPanelLayout_umanoOverlay,DEFAULT_OVERLAY_FLAG);
 

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -1028,7 +1028,7 @@ boolean smoothSlideTo(float slideOffset, int velocity) {
 
     @Override
     public void computeScroll() {
-        if (mDragHelper.continueSettling(true)) {
+        if (mDragHelper != null && mDragHelper.continueSettling(true)) {
             if (!isSlidingEnabled()) {
                 mDragHelper.abort();
                 return;

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -22,6 +22,7 @@
 import android.view.ViewConfiguration;
 import android.view.ViewGroup;
 import android.view.accessibility.AccessibilityEvent;
+
 import com.nineoldandroids.view.animation.AnimatorProxy;
 import com.sothree.slidinguppanel.library.R;
 
@@ -888,7 +889,7 @@ public boolean expandPanel() {
      * @return true if the pane was slideable and is now expanded/in the process of expanding
      */
     public boolean expandPanel(float mSlideOffset) {
-        if (mSlideState == SlideState.EXPANDED) return false;
+        if (mSlideableView == null || mSlideState == SlideState.EXPANDED) return false;
         mSlideableView.setVisibility(View.VISIBLE);
         return expandPanel(mSlideableView, 0, mSlideOffset);
     }
@@ -921,7 +922,7 @@ public boolean isPanelHidden() {
     }
 
     public void showPanel() {
-        if (mSlideState != SlideState.HIDDEN) return;
+        if (mSlideableView == null || mSlideState != SlideState.HIDDEN) return;
         mSlideableView.setVisibility(View.VISIBLE);
         requestLayout();
         smoothSlideTo(0, 0);

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -374,7 +374,7 @@ public void setSlidingEnabled(boolean enabled) {
     }
 
     public boolean isSlidingEnabled() {
-        return mIsSlidingEnabled && mSlideableView != null && mSlideableView.getVisibility() == View.VISIBLE;
+        return mIsSlidingEnabled && mSlideableView != null;
     }
 
     /**
@@ -869,7 +869,6 @@ public boolean collapsePanel() {
      * @return true if the pane was slideable and is now expanded/in the process of expading
      */
     public boolean expandPanel() {
-        if (mSlideState == SlideState.EXPANDED) return false;
         return expandPanel(1.0f);
     }
 
@@ -880,6 +879,8 @@ public boolean expandPanel() {
      * @return true if the pane was slideable and is now expanded/in the process of expanding
      */
     public boolean expandPanel(float mSlideOffset) {
+        if (mSlideState == SlideState.EXPANDED) return false;
+        mSlideableView.setVisibility(View.VISIBLE);
         return expandPanel(mSlideableView, 0, mSlideOffset);
     }
 

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -891,12 +891,11 @@ public boolean isPanelHidden() {
     }
 
     public void showPanel() {
-        if (!isSlidingEnabled()) return;
+        if (!isPanelHidden()) return;
         smoothSlideTo(0, 0);
     }
 
     public void hidePanel() {
-        if (!isSlidingEnabled()) return;
         mIsPanelBeingHidden = true;
         int newTop = computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
         smoothSlideTo(computeSlideOffset(newTop), 0);

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -805,7 +805,7 @@ private int computePanelTopPosition(float slideOffset) {
         // Compute the top of the panel if its collapsed
         return mIsSlidingUp
                 ? getMeasuredHeight() - getPaddingBottom() - mPanelHeight - slidePixelOffset
-                : getPaddingTop() + slidePixelOffset;
+                : getPaddingTop() - panelHeight + mPanelHeight + slidePixelOffset;
     }
 
     /*
@@ -957,7 +957,7 @@ protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
         result = super.drawChild(canvas, child, drawingTime);
         canvas.restoreToCount(save);
 
-        if (drawScrim && mCoveredFadeColor > 0) {
+        if (drawScrim && mCoveredFadeColor != 0) {
             final int baseAlpha = (mCoveredFadeColor & 0xff000000) >>> 24;
             final int imag = (int) (baseAlpha * mSlideOffset);
             final int color = imag << 24 | (mCoveredFadeColor & 0xffffff);

File: demo/src/com/sothree/slidinguppanel/demo/DemoActivity.java
Patch:
@@ -29,7 +29,6 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.activity_demo);
 
         SlidingUpPanelLayout layout = (SlidingUpPanelLayout) findViewById(R.id.sliding_layout);
-        layout.setAnchorPoint(0.3f);
         layout.setPanelSlideListener(new PanelSlideListener() {
             @Override
             public void onPanelSlide(View panel, float slideOffset) {

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -236,7 +236,7 @@ public SlidingUpPanelLayout(Context context, AttributeSet attrs, int defStyle) {
             if (defAttrs != null) {
                 int gravity = defAttrs.getInt(0, Gravity.NO_GRAVITY);
                 if (gravity != Gravity.TOP && gravity != Gravity.BOTTOM) {
-                    throw new IllegalArgumentException("layout_gravity must be set to either top or bottom");
+                    throw new IllegalArgumentException("gravity must be set to either top or bottom");
                 }
                 mIsSlidingUp = gravity == Gravity.BOTTOM;
             }

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -735,7 +735,9 @@ private boolean collapsePane(View pane, int initialVelocity) {
 
     private int getSlidingTop() {
         if (mSlideableView != null) {
-            return getMeasuredHeight() - getPaddingBottom() - mSlideableView.getMeasuredHeight();
+            return mIsSlidingUp
+                ? getMeasuredHeight() - getPaddingBottom() - mSlideableView.getMeasuredHeight()
+                : getMeasuredHeight() - getPaddingBottom() - (mSlideableView.getMeasuredHeight() * 2);
         }
 
         return getMeasuredHeight() - getPaddingBottom();

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -735,7 +735,9 @@ private boolean collapsePane(View pane, int initialVelocity) {
 
     private int getSlidingTop() {
         if (mSlideableView != null) {
-            return getMeasuredHeight() - getPaddingBottom() - mSlideableView.getMeasuredHeight();
+            return mIsSlidingUp
+                ? getMeasuredHeight() - getPaddingBottom() - mSlideableView.getMeasuredHeight()
+                : getMeasuredHeight() - getPaddingBottom() - (mSlideableView.getMeasuredHeight() * 2);
         }
 
         return getMeasuredHeight() - getPaddingBottom();

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -51,7 +51,7 @@ public class SlidingUpPanelLayout extends ViewGroup {
     /**
      * Default attributes for layout
      */
-    private static final int[] ATTRS = new int[] {
+    private static final int[] DEFAULT_ATTRS = new int[] {
         android.R.attr.layout_gravity
     };
 
@@ -231,7 +231,7 @@ public SlidingUpPanelLayout(Context context, AttributeSet attrs) {
     public SlidingUpPanelLayout(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
         if (attrs != null) {
-            TypedArray defAttrs = context.obtainStyledAttributes(attrs, ATTRS);
+            TypedArray defAttrs = context.obtainStyledAttributes(attrs, DEFAULT_ATTRS);
 
             if (defAttrs != null) {
                 mIsSlidingUp = defAttrs.getInt(0, Gravity.BOTTOM) == Gravity.BOTTOM;

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -618,7 +618,7 @@ else if (ady > mScrollTouchSlop) {
                     }
                 }
 
-                if (ady > dragSlop && adx > ady) {
+                if ((ady > dragSlop && adx > ady) || !isDragViewUnder((int) x, (int) y)) {
                     mDragHelper.cancel();
                     mIsUnableToDrag = true;
                     return false;

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -249,8 +249,6 @@ public SlidingUpPanelLayout(Context context, AttributeSet attrs, int defStyle) {
         mCanSlide = true;
         mIsSlidingEnabled = true;
 
-        setCoveredFadeColor(DEFAULT_FADE_COLOR);
-
         ViewConfiguration vc = ViewConfiguration.get(context);
         mScrollTouchSlop = vc.getScaledTouchSlop();
     }

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -620,7 +620,7 @@ else if (ady > mScrollTouchSlop) {
                     }
                 }
 
-                if (ady > dragSlop && adx > ady) {
+                if ((ady > dragSlop && adx > ady) || !isDragViewUnder((int) x, (int) y)) {
                     mDragHelper.cancel();
                     mIsUnableToDrag = true;
                     return false;

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -216,6 +216,7 @@ public int getCoveredFadeColor() {
      */
     public void setPanelHeight(int val) {
         mPanelHeight = val;
+        requestLayout();
     }
 
     /**

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -216,6 +216,7 @@ public int getCoveredFadeColor() {
      */
     public void setPanelHeight(int val) {
         mPanelHeight = val;
+        requestLayout();
     }
 
     /**

File: library/src/com/sothree/slidinguppanel/SlidingUpPanelLayout.java
Patch:
@@ -558,7 +558,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
                         return super.onInterceptTouchEvent(ev);
                     }
                     // Intercept the touch if the drag view has any vertical scroll.
-	            // onTouchEvent will determine if the view should drag vertically.
+                    // onTouchEvent will determine if the view should drag vertically.
                     else if (ady > mScrollTouchSlop) {
                         interceptTap = mDragViewHit;
                     }

