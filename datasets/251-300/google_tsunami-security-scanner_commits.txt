File: plugin/src/main/java/com/google/tsunami/plugin/TcsClient.java
Patch:
@@ -138,7 +138,7 @@ private Optional<PollingResult> sendPollingRequest(String secretString) {
         jsonParser.merge(response.bodyString().get(), result);
         return Optional.of(result.build());
       } else {
-        logger.atInfo().log("OOB server returned %s", response.status().code());
+        logger.atInfo().log("Callback server returned %s", response.status().code());
       }
     } catch (IOException e) {
       logger.atWarning().withCause(e).log("Polling request failed");

File: common/src/main/java/com/google/tsunami/common/config/TsunamiConfig.java
Patch:
@@ -77,7 +77,7 @@ public <T> T getConfig(String configPrefix, Class<T> clazz) {
   }
 
   @SuppressWarnings("unchecked") // We know Map key is always String from yaml file.
-  private ImmutableMap<String, Object> readConfigValue(String configPrefix) {
+  public ImmutableMap<String, Object> readConfigValue(String configPrefix) {
     Map<String, Object> retrievedData = rawConfigData;
 
     // Config prefixes are dot separated words list, e.g. example.config.prefix.

File: plugin/src/main/java/com/google/tsunami/plugin/RemoteVulnDetectorLoadingModule.java
Patch:
@@ -16,7 +16,6 @@
 package com.google.tsunami.plugin;
 
 import static com.google.common.base.Preconditions.checkNotNull;
-import static java.util.concurrent.TimeUnit.SECONDS;
 
 import com.google.api.client.util.ExponentialBackOff;
 import com.google.auto.value.AutoAnnotation;
@@ -29,9 +28,9 @@
 import com.google.tsunami.common.server.LanguageServerCommand;
 import com.google.tsunami.plugin.annotations.PluginInfo;
 import io.grpc.Channel;
-import io.grpc.Deadline;
 import io.grpc.netty.NegotiationType;
 import io.grpc.netty.NettyChannelBuilder;
+import java.time.Duration;
 
 /** A Guice module that loads all {@link RemoteVulnDetector RemoteVulnDetectors} at runtime. */
 public final class RemoteVulnDetectorLoadingModule extends AbstractModule {
@@ -69,7 +68,7 @@ protected void configure() {
           var channel = getLanguageServerChannel(command);
           var deadline =
               command.deadlineRunSeconds() > 0
-                  ? Deadline.after(command.deadlineRunSeconds(), SECONDS)
+                  ? Duration.ofSeconds(command.deadlineRunSeconds())
                   : null;
           tsunamiPluginBinder
               .addBinding(getRemoteVulnDetectorPluginDefinition(channel.hashCode()))

File: common/src/main/java/com/google/tsunami/common/config/TsunamiConfig.java
Patch:
@@ -77,7 +77,7 @@ public <T> T getConfig(String configPrefix, Class<T> clazz) {
   }
 
   @SuppressWarnings("unchecked") // We know Map key is always String from yaml file.
-  private ImmutableMap<String, Object> readConfigValue(String configPrefix) {
+  public ImmutableMap<String, Object> readConfigValue(String configPrefix) {
     Map<String, Object> retrievedData = rawConfigData;
 
     // Config prefixes are dot separated words list, e.g. example.config.prefix.

File: common/src/main/java/com/google/tsunami/common/net/http/HttpClient.java
Patch:
@@ -93,8 +93,6 @@ public abstract static class Builder<T extends HttpClient> {
 
     public abstract Builder<T> setFollowRedirects(boolean followRedirects);
 
-    public abstract Builder<T> setTrustAllCertificates(boolean trustAllCertificates);
-
     public abstract Builder<T> setLogId(String logId);
 
     public abstract Builder<T> setConnectTimeout(Duration connectionTimeout);

File: common/src/main/java/com/google/tsunami/common/net/http/HttpClientCliOptions.java
Patch:
@@ -27,6 +27,7 @@ public final class HttpClientCliOptions implements CliOption {
 
   @Parameter(
       names = "--http-client-trust-all-certificates",
+      arity = 1,
       description = "Whether the HTTP client should trust all certificates on HTTPS traffic.")
   public Boolean trustAllCertificates;
 

File: common/src/main/java/com/google/tsunami/common/net/http/HttpClientModule.java
Patch:
@@ -171,7 +171,7 @@ boolean shouldTrustAllCertificates(
     if (httpClientConfigProperties.trustAllCertificates != null) {
       return httpClientConfigProperties.trustAllCertificates;
     }
-    return false;
+    return true;
   }
 
   @Provides

File: common/src/main/java/com/google/tsunami/common/net/http/HttpClient.java
Patch:
@@ -93,8 +93,6 @@ public abstract static class Builder<T extends HttpClient> {
 
     public abstract Builder<T> setFollowRedirects(boolean followRedirects);
 
-    public abstract Builder<T> setTrustAllCertificates(boolean trustAllCertificates);
-
     public abstract Builder<T> setLogId(String logId);
 
     public abstract Builder<T> setConnectTimeout(Duration connectionTimeout);

File: common/src/main/java/com/google/tsunami/common/net/http/HttpClientCliOptions.java
Patch:
@@ -27,6 +27,7 @@ public final class HttpClientCliOptions implements CliOption {
 
   @Parameter(
       names = "--http-client-trust-all-certificates",
+      arity = 1,
       description = "Whether the HTTP client should trust all certificates on HTTPS traffic.")
   public Boolean trustAllCertificates;
 

File: common/src/main/java/com/google/tsunami/common/net/http/HttpClientModule.java
Patch:
@@ -171,7 +171,7 @@ boolean shouldTrustAllCertificates(
     if (httpClientConfigProperties.trustAllCertificates != null) {
       return httpClientConfigProperties.trustAllCertificates;
     }
-    return false;
+    return true;
   }
 
   @Provides

File: main/src/main/java/com/google/tsunami/main/cli/server/RemoteServerLoader.java
Patch:
@@ -19,6 +19,7 @@
 import static com.google.common.collect.ImmutableList.toImmutableList;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
+import com.google.common.base.Strings;
 import com.google.common.collect.ImmutableList;
 import com.google.common.flogger.GoogleLogger;
 import com.google.tsunami.common.command.CommandExecutor;
@@ -46,6 +47,8 @@ public class RemoteServerLoader {
   public ImmutableList<Process> runServerProcesses() {
     logger.atInfo().log("Starting language server processes (if any)...");
     return commands.stream()
+        // Filter out commands that don't need server start up
+        .filter(command -> !Strings.isNullOrEmpty(command.serverCommand()))
         .map(
             command ->
                 runProcess(

File: plugin/src/main/java/com/google/tsunami/plugin/RemoteVulnDetectorImpl.java
Patch:
@@ -59,6 +59,7 @@ public DetectionReportList detect(
           .get()
           .getStatus()
           .equals(HealthCheckResponse.ServingStatus.SERVING)) {
+        logger.atInfo().log("Detecting with language server plugins...");
         return service
             .runWithDeadline(
                 RunRequest.newBuilder().setTarget(target).addAllPlugins(pluginsToRun).build(),
@@ -83,6 +84,7 @@ public ImmutableList<PluginDefinition> getAllPlugins() {
           .get()
           .getStatus()
           .equals(HealthCheckResponse.ServingStatus.SERVING)) {
+        logger.atInfo().log("Getting language server plugins...");
         return ImmutableList.copyOf(
             service
                 .listPluginsWithDeadline(ListPluginsRequest.getDefaultInstance(), DEFAULT_DEADLINE)

File: main/src/main/java/com/google/tsunami/main/cli/server/RemoteServerLoader.java
Patch:
@@ -69,7 +69,7 @@ private String getCommand(String flag, Object command) {
 
   private Optional<Process> runProcess(CommandExecutor executor) {
     try {
-      return Optional.of(executor.executeWithNoStreamCollection());
+      return Optional.of(executor.executeAsync());
     } catch (IOException | InterruptedException | ExecutionException e) {
       logger.atWarning().withCause(e).log("Could not execute language server binary.");
     }

File: workflow/src/main/java/com/google/tsunami/workflow/DefaultScanningWorkflow.java
Patch:
@@ -32,6 +32,7 @@
 import com.google.protobuf.util.Timestamps;
 import com.google.tsunami.common.TsunamiException;
 import com.google.tsunami.common.time.UtcClock;
+import com.google.tsunami.plugin.LanguageServerException;
 import com.google.tsunami.plugin.PluginExecutionException;
 import com.google.tsunami.plugin.PluginExecutionResult;
 import com.google.tsunami.plugin.PluginExecutor;
@@ -151,6 +152,7 @@ public ListenableFuture<ScanResults> runAsync(ScanTarget scanTarget) {
             directExecutor())
         // Execution errors are handled and reported back in the ScanResults.
         .catching(PluginExecutionException.class, this::onExecutionError, directExecutor())
+        .catching(LanguageServerException.class, this::onExecutionError, directExecutor())
         .catching(ScanningWorkflowException.class, this::onExecutionError, directExecutor());
   }
 

File: plugin/src/test/java/com/google/tsunami/plugin/PluginServiceClientTest.java
Patch:
@@ -64,7 +64,7 @@ public final class PluginServiceClientTest {
   private static final String PLUGIN_DESCRIPTION = "test description";
   private static final String PLUGIN_AUTHOR = "tester";
 
-  private static final Deadline DEADLINE_DEFAULT = Deadline.after(1, SECONDS);
+  private static final Deadline DEADLINE_DEFAULT = Deadline.after(5, SECONDS);
 
   private PluginServiceClient pluginService;
   private final MutableHandlerRegistry serviceRegistry = new MutableHandlerRegistry();

File: common/src/main/java/com/google/tsunami/common/ErrorCode.java
Patch:
@@ -20,6 +20,7 @@ public enum ErrorCode {
   CONFIG_ERROR,
   PLUGIN_EXECUTION_ERROR,
   WORKFLOW_ERROR,
+  LANGUAGE_SERVER_ERROR,
 
   UNKNOWN;
 }

File: plugin/src/main/java/com/google/tsunami/plugin/payload/NotImplementedException.java
Patch:
@@ -20,8 +20,8 @@
 import com.google.errorprone.annotations.FormatString;
 
 /**
- * Thrown whenever a {@link PayloadGeneratorConfig} results in a combination that does not have a
- * payload.
+ * Thrown whenever a {@link com.google.tsunami.proto.PayloadGeneratorConfig} results in a
+ * combination that does not have a payload.
  *
  * <p> To reduce the burden on callers, this is an unchecked exception. The goal is simply to
  * notify the developer that the payload generator cannot be used in the requested context. If the

File: plugin/src/main/java/com/google/tsunami/plugin/payload/PayloadGenerator.java
Patch:
@@ -58,6 +58,9 @@ public boolean isCallbackServerEnabled() {
    *
    * <p>The framework prioritizes finding a callback server payload if callback server is enabled
    * and falls back to any payload that matches.
+   *
+   * @param config configurations to the payload generator
+   * @return the generated {@link Payload} based on the given {@code config}
    */
   public Payload generate(PayloadGeneratorConfig config) {
     PayloadDefinition selectedPayload = null;

File: plugin/src/main/java/com/google/tsunami/plugin/payload/PayloadSecretGenerator.java
Patch:
@@ -41,11 +41,11 @@ public String generate(int secretLength) {
     return BaseEncoding.base16().lowerCase().encode(randomBytes);
   }
 
-  public static Module getModule() {
-    return new Module();
+  public static PayloadSecretGeneratorModule getModule() {
+    return new PayloadSecretGeneratorModule();
   }
 
-  private static final class Module extends AbstractModule {
+  private static final class PayloadSecretGeneratorModule extends AbstractModule {
     @Provides
     @PayloadSecretRng
     @Singleton

File: plugin/src/main/java/com/google/tsunami/plugin/PluginExecutorImpl.java
Patch:
@@ -79,7 +79,8 @@ private <T> PluginExecutionResult<T> buildSucceededResult(
 
   private <T> PluginExecutionResult<T> buildFailedResult(
       Throwable t, PluginExecutorConfig<T> executorConfig) {
-    logger.atWarning().log("Plugin '%s' failed.", executorConfig.matchedPlugin().pluginId());
+    logger.atWarning().log(
+        "Plugin '%s' failed: %s", executorConfig.matchedPlugin().pluginId(), t.getMessage());
     if (executionStopwatch.isRunning()) {
       executionStopwatch.stop();
     }

File: common/src/main/java/com/google/tsunami/common/net/http/HttpResponse.java
Patch:
@@ -31,8 +31,6 @@
 // HttpUrl is immutable even if not marked as such.
 @SuppressWarnings("Immutable")
 public abstract class HttpResponse {
-  private static final JsonParser JSON_PARSER = new JsonParser();
-
   public abstract HttpStatus status();
   public abstract HttpHeaders headers();
   public abstract Optional<ByteString> bodyBytes();
@@ -58,7 +56,7 @@ public Optional<String> bodyString() {
    */
   @Memoized
   public Optional<JsonElement> bodyJson() {
-    return bodyString().map(JSON_PARSER::parse);
+    return bodyString().map(JsonParser::parseString);
   }
 
   public static Builder builder() {

File: plugin/src/main/java/com/google/tsunami/plugin/PluginExecutor.java
Patch:
@@ -26,6 +26,7 @@ public interface PluginExecutor {
    * Executes a plugin's core business logic implemented in non-block manner.
    *
    * @param executorConfig The configuration of the execution, cannot be null.
+   * @param <T> type of the plugin execution result.
    * @return The future of the execution result.
    */
   <T> ListenableFuture<PluginExecutionResult<T>> executeAsync(

File: plugin/src/main/java/com/google/tsunami/plugin/annotations/ForServiceName.java
Patch:
@@ -45,6 +45,8 @@
    * Array of target network service names for a Tsunami {@link
    * com.google.tsunami.plugin.VulnDetector} plugin. The values for application layer protocols
    * should genuinely follow naming conventions listed at RFC6335.
+   *
+   * @return the targeted network service names for a Tsunami plugin.
    */
   String[] value();
 }

File: common/src/main/java/com/google/tsunami/common/command/CommandExecutorFactory.java
Patch:
@@ -23,6 +23,8 @@ public class CommandExecutorFactory {
   /**
    * Sets an executor instance that will be returned by all future calls to {@link
    * CommandExecutorFactory#create(String...)}
+   *
+   * @param executor The {@link CommandExecutor} returned by this factory.
    */
   public static void setInstance(CommandExecutor executor) {
     instance = executor;
@@ -32,6 +34,7 @@ public static void setInstance(CommandExecutor executor) {
    * Creates a new {@link CommandExecutor} if none is set.
    *
    * @param args List of arguments to pass to the newly created {@link CommandExecutor}.
+   * @return the {@link CommandExecutor} instance created by this factory.
    */
   public static CommandExecutor create(String... args) {
     if (instance == null) {

File: common/src/main/java/com/google/tsunami/common/time/testing/FakeUtcClock.java
Patch:
@@ -44,6 +44,8 @@ private FakeUtcClock(Instant now) {
    * <p>To create a fake UTC clock at a specific instant, calling {@code setNow()} as in:
    *
    * <pre>{@code FakeUtcClock fakeUtcClock = FakeUtcClock.create().setNow(TARGET_INSTANT);}</pre>
+   *
+   * @return a {@link FakeUtcClock} instance.
    */
   public static FakeUtcClock create() {
     return new FakeUtcClock(Instant.now());

File: common/src/main/java/com/google/tsunami/common/version/Segment.java
Patch:
@@ -37,7 +37,6 @@
 abstract class Segment implements Comparable<Segment> {
   static final Segment NULL = Segment.fromTokenList(ImmutableList.of(Token.EMPTY));
 
-  private static final String KEEP_DELIMITER = "((?<=%1$s)|(?=%1$s))";
   private static final ImmutableSet<String> TOKENIZER_DELIMITERS =
       ImmutableSet.of("\\.", "\\+", "-", ":", "_", "~");
   private static final Pattern TOKENIZER_SPLIT_REGEX =
@@ -46,7 +45,7 @@ abstract class Segment implements Comparable<Segment> {
           "(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)|"
               // We keep the delimiter for comparison.
               + TOKENIZER_DELIMITERS.stream()
-                  .map(delimiter -> String.format(KEEP_DELIMITER, delimiter))
+                  .map(delimiter -> String.format("((?<=%1$s)|(?=%1$s))", delimiter))
                   .collect(Collectors.joining("|")));
   private static final ImmutableSet<String> EXCLUDED_TOKENS = ImmutableSet.of(".", "gg", "N/A");
 

File: common/src/main/java/com/google/tsunami/common/version/VersionRange.java
Patch:
@@ -64,6 +64,9 @@ public abstract static class Builder {
    *   <li>(1.0,): from version 1.0 (exclusive) to positive infinity.
    *   <li>[1.0,2.0): from version 1.0 (inclusive) to version 2.0 (exclusive).
    * </ul>
+   *
+   * @param rangeString the string representation of a version range.
+   * @return the parsed {@link VersionRange} object from the given string.
    */
   public static VersionRange parse(String rangeString) {
     validateRangeString(rangeString);

File: common/src/main/java/com/google/tsunami/common/concurrent/BaseThreadPoolModule.java
Patch:
@@ -42,7 +42,8 @@
  * corresponding {@link ExecutorService} families. Based on the intended usage, it is expected that
  * subclasses of this module should provides bindings to a concrete thread pool implementation of
  * {@link ExecutorService}. This base module wraps the actual {@link ExecutorService} implementation
- * in order to support {@link ListenableFuture} usage in the code base.
+ * in order to support {@link com.google.common.util.concurrent.ListenableFuture} usage in the code
+ * base.
  *
  * @param <ExecutorServiceT> The expected thread pool implementation, must be a subclass of {@link
  *     ListeningExecutorService}.

File: common/src/main/java/com/google/tsunami/common/config/annotations/ConfigProperties.java
Patch:
@@ -27,7 +27,7 @@
  * <p>This annotation is required for any config object in order for Tsunami initialization logic to
  * identify and automatically populate config properties.
  *
- * <h4>Example usage</h4>
+ * Example usage:
  *
  * <pre>{@code
  * {@literal @}ConfigProperties("example.config.location")})
@@ -58,6 +58,8 @@
    *
    * value {@code "plugin.example.abc"} will select {@code fieldA} and {@code fieldB} for config
    * binding for the annotated class.
+   *
+   * @return the prefix of the config properties.
    */
   String value();
 }

File: plugin/src/main/java/com/google/tsunami/plugin/PluginLoadingModule.java
Patch:
@@ -29,9 +29,9 @@
 /**
  * A Guice module that loads all {@link TsunamiPlugin TsunamiPlugins} at runtime.
  *
- * <p>This module relies on the {@link ClassGraph} scan results to identify all installed {@link
- * TsunamiPlugin TsunamiPlugins} and bootstrap each {@link TsunamiPlugin plugin} using the
- * corresponding {@link PluginBootstrapModule} instantiated via reflection.
+ * <p>This module relies on the {@link io.github.classgraph.ClassGraph} scan results to identify all
+ * installed {@link TsunamiPlugin TsunamiPlugins} and bootstrap each {@link TsunamiPlugin plugin}
+ * using the corresponding {@link PluginBootstrapModule} instantiated via reflection.
  */
 public final class PluginLoadingModule extends AbstractModule {
   private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();

File: plugin/src/main/java/com/google/tsunami/plugin/annotations/ForServiceName.java
Patch:
@@ -29,7 +29,7 @@
  * listed service name in the annotation. Network service names should genuinely follow those listed
  * at RFC6335.
  *
- * <h4>Example usage</h4>
+ * Example usage:
  *
  * <pre>{@code
  * {@literal @}ForServiceName({"http", "https"})

File: plugin/src/main/java/com/google/tsunami/plugin/annotations/ForSoftware.java
Patch:
@@ -28,7 +28,7 @@
  * be executed by the scanner when the scan target is running the matching software behind a network
  * service.
  *
- * <h4>Example usage</h4>
+ * Example usage:
  *
  * <pre>{@code
  * {@literal @}ForSoftware(

File: plugin/src/main/java/com/google/tsunami/plugin/annotations/PluginInfo.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * An annotation for adding related information about a Tsunami plugin.
  *
- * <h4>Example usage</h4>
+ * Example usage:
  *
  * <pre>{@code
  * {@literal @}PluginInfo(

