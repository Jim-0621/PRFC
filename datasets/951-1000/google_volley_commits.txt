File: core/src/main/java/com/android/volley/toolbox/BasicAsyncNetwork.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.android.volley.toolbox;
 
-import static com.android.volley.toolbox.NetworkUtility.logSlowRequests;
+import static com.android.volley.toolbox.NetworkUtility.logRequestSummary;
 
 import android.os.SystemClock;
 import androidx.annotation.NonNull;
@@ -213,9 +213,9 @@ private void onResponseRead(
             OnRequestComplete callback,
             List<Header> responseHeaders,
             byte[] responseContents) {
-        // if the request is slow, log it.
+        // log request when debugging is enabled.
         long requestLifetime = SystemClock.elapsedRealtime() - requestStartMs;
-        logSlowRequests(requestLifetime, request, responseContents, statusCode);
+        logRequestSummary(requestLifetime, request, responseContents, statusCode);
 
         if (statusCode < 200 || statusCode > 299) {
             onRequestFailed(

File: core/src/main/java/com/android/volley/toolbox/BasicNetwork.java
Patch:
@@ -124,9 +124,9 @@ public NetworkResponse performRequest(Request<?> request) throws VolleyError {
                     responseContents = new byte[0];
                 }
 
-                // if the request is slow, log it.
+                // log request when debugging is enabled.
                 long requestLifetime = SystemClock.elapsedRealtime() - requestStart;
-                NetworkUtility.logSlowRequests(
+                NetworkUtility.logRequestSummary(
                         requestLifetime, request, responseContents, statusCode);
 
                 if (statusCode < 200 || statusCode > 299) {

File: src/test/java/com/android/volley/toolbox/DiskBasedCacheTest.java
Patch:
@@ -59,7 +59,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest = "src/main/AndroidManifest.xml", sdk = 16)
+@Config(sdk = 16)
 public class DiskBasedCacheTest {
 
     private static final int MAX_SIZE = 1024 * 1024;

File: src/test/java/com/android/volley/toolbox/NetworkImageViewTest.java
Patch:
@@ -21,6 +21,7 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
+import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
 import android.view.ViewGroup.LayoutParams;
 import android.widget.ImageView.ScaleType;
@@ -90,8 +91,10 @@ public void publicMethods() throws Exception {
 
         assertNotNull(
                 NetworkImageView.class.getMethod("setImageUrl", String.class, ImageLoader.class));
+        assertNotNull(NetworkImageView.class.getMethod("setDefaultImageDrawable", Drawable.class));
         assertNotNull(NetworkImageView.class.getMethod("setDefaultImageBitmap", Bitmap.class));
         assertNotNull(NetworkImageView.class.getMethod("setDefaultImageResId", int.class));
+        assertNotNull(NetworkImageView.class.getMethod("setErrorImageDrawable", Drawable.class));
         assertNotNull(NetworkImageView.class.getMethod("setErrorImageBitmap", Bitmap.class));
         assertNotNull(NetworkImageView.class.getMethod("setErrorImageResId", int.class));
     }

File: src/test/java/com/android/volley/toolbox/NetworkImageViewTest.java
Patch:
@@ -20,6 +20,7 @@
 import static org.junit.Assert.assertNotNull;
 
 import android.content.Context;
+import android.graphics.Bitmap;
 import android.util.AttributeSet;
 import android.view.ViewGroup.LayoutParams;
 import android.widget.ImageView.ScaleType;
@@ -89,7 +90,9 @@ public void publicMethods() throws Exception {
 
         assertNotNull(
                 NetworkImageView.class.getMethod("setImageUrl", String.class, ImageLoader.class));
+        assertNotNull(NetworkImageView.class.getMethod("setDefaultImageBitmap", Bitmap.class));
         assertNotNull(NetworkImageView.class.getMethod("setDefaultImageResId", int.class));
+        assertNotNull(NetworkImageView.class.getMethod("setErrorImageBitmap", Bitmap.class));
         assertNotNull(NetworkImageView.class.getMethod("setErrorImageResId", int.class));
     }
 }

File: src/main/java/com/android/volley/toolbox/DiskBasedCache.java
Patch:
@@ -400,7 +400,7 @@ private CacheHeader(
                 long softTtl,
                 List<Header> allResponseHeaders) {
             this.key = key;
-            this.etag = ("".equals(etag)) ? null : etag;
+            this.etag = "".equals(etag) ? null : etag;
             this.serverDate = serverDate;
             this.lastModified = lastModified;
             this.ttl = ttl;

File: src/main/java/com/android/volley/Request.java
Patch:
@@ -538,7 +538,7 @@ public Priority getPriority() {
      * remaining, this will cause delivery of a {@link TimeoutError} error.
      */
     public final int getTimeoutMs() {
-        return mRetryPolicy.getCurrentTimeout();
+        return getRetryPolicy().getCurrentTimeout();
     }
 
     /** Returns the retry policy that should be used for this request. */

File: src/test/java/com/android/volley/toolbox/ImageLoaderTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mockito;
 import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
@@ -75,7 +76,7 @@ public void getWithCacheMiss() throws Exception {
         // Response callback should be called both times.
         verify(listener, times(2)).onResponse(any(ImageLoader.ImageContainer.class), eq(true));
         // But request should be enqueued only once.
-        verify(mRequestQueue, times(1)).add(any(Request.class));
+        verify(mRequestQueue, times(1)).add(Mockito.<Request<?>>any());
     }
 
     @Test

File: src/main/java/com/android/volley/CacheDispatcher.java
Patch:
@@ -271,7 +271,7 @@ private synchronized boolean maybeAddToWaitingRequests(Request<?> request) {
                 // There is already a request in flight. Queue up.
                 List<Request<?>> stagedRequests = mWaitingRequests.get(cacheKey);
                 if (stagedRequests == null) {
-                    stagedRequests = new ArrayList<Request<?>>();
+                    stagedRequests = new ArrayList<>();
                 }
                 request.addMarker("waiting-for-response");
                 stagedRequests.add(request);

File: src/main/java/com/android/volley/RequestQueue.java
Patch:
@@ -47,7 +47,7 @@ public interface RequestFinishedListener<T> {
      * The set of all requests currently being processed by this RequestQueue. A Request will be in
      * this set if it is waiting in any queue or currently being processed by any dispatcher.
      */
-    private final Set<Request<?>> mCurrentRequests = new HashSet<Request<?>>();
+    private final Set<Request<?>> mCurrentRequests = new HashSet<>();
 
     /** The cache triage queue. */
     private final PriorityBlockingQueue<Request<?>> mCacheQueue = new PriorityBlockingQueue<>();

File: src/main/java/com/android/volley/Response.java
Patch:
@@ -40,15 +40,15 @@ public interface ErrorListener {
 
     /** Returns a successful response containing the parsed result. */
     public static <T> Response<T> success(T result, Cache.Entry cacheEntry) {
-        return new Response<T>(result, cacheEntry);
+        return new Response<>(result, cacheEntry);
     }
 
     /**
      * Returns a failed response containing the given error code and an optional localized message
      * displayed to the user.
      */
     public static <T> Response<T> error(VolleyError error) {
-        return new Response<T>(error);
+        return new Response<>(error);
     }
 
     /** Parsed response, or null in the case of error. */

File: src/main/java/com/android/volley/VolleyLog.java
Patch:
@@ -123,7 +123,7 @@ public Marker(String name, long thread, long time) {
             }
         }
 
-        private final List<Marker> mMarkers = new ArrayList<Marker>();
+        private final List<Marker> mMarkers = new ArrayList<>();
         private boolean mFinished = false;
 
         /** Adds a marker to this log with the specified name. */

File: src/main/java/com/android/volley/toolbox/BaseHttpStack.java
Patch:
@@ -70,7 +70,7 @@ public final org.apache.http.HttpResponse performRequest(
         ProtocolVersion protocolVersion = new ProtocolVersion("HTTP", 1, 1);
         StatusLine statusLine =
                 new BasicStatusLine(
-                        protocolVersion, response.getStatusCode(), "" /* reasonPhrase */);
+                        protocolVersion, response.getStatusCode(), /* reasonPhrase= */ "");
         BasicHttpResponse apacheResponse = new BasicHttpResponse(statusLine);
 
         List<org.apache.http.Header> headers = new ArrayList<>();

File: src/main/java/com/android/volley/toolbox/ByteArrayPool.java
Patch:
@@ -53,7 +53,7 @@ public class ByteArrayPool {
     /** The buffer pool, arranged both by last use and by buffer size */
     private final List<byte[]> mBuffersByLastUse = new ArrayList<>();
 
-    private final List<byte[]> mBuffersBySize = new ArrayList<byte[]>(64);
+    private final List<byte[]> mBuffersBySize = new ArrayList<>(64);
 
     /** The total size of the buffers in the pool */
     private int mCurrentSize = 0;

File: src/main/java/com/android/volley/toolbox/DiskBasedCache.java
Patch:
@@ -50,8 +50,7 @@
 public class DiskBasedCache implements Cache {
 
     /** Map of the Key, CacheHeader pairs */
-    private final Map<String, CacheHeader> mEntries =
-            new LinkedHashMap<String, CacheHeader>(16, .75f, true);
+    private final Map<String, CacheHeader> mEntries = new LinkedHashMap<>(16, .75f, true);
 
     /** Total amount of space currently used by the cache in bytes. */
     private long mTotalSize = 0;

File: src/main/java/com/android/volley/toolbox/HttpClientStack.java
Patch:
@@ -66,7 +66,7 @@ private static void addHeaders(HttpUriRequest httpRequest, Map<String, String> h
 
     @SuppressWarnings("unused")
     private static List<NameValuePair> getPostParameterPairs(Map<String, String> postParams) {
-        List<NameValuePair> result = new ArrayList<NameValuePair>(postParams.size());
+        List<NameValuePair> result = new ArrayList<>(postParams.size());
         for (String key : postParams.keySet()) {
             result.add(new BasicNameValuePair(key, postParams.get(key)));
         }

File: src/main/java/com/android/volley/toolbox/HttpResponse.java
Patch:
@@ -35,7 +35,7 @@ public final class HttpResponse {
      * @param headers the response headers
      */
     public HttpResponse(int statusCode, List<Header> headers) {
-        this(statusCode, headers, -1 /* contentLength */, null /* content */);
+        this(statusCode, headers, /* contentLength= */ -1, /* content= */ null);
     }
 
     /**

File: src/main/java/com/android/volley/toolbox/HurlStack.java
Patch:
@@ -51,12 +51,12 @@ public interface UrlRewriter {
     private final SSLSocketFactory mSslSocketFactory;
 
     public HurlStack() {
-        this(null);
+        this(/* urlRewriter = */ null);
     }
 
     /** @param urlRewriter Rewriter to use for request URLs */
     public HurlStack(UrlRewriter urlRewriter) {
-        this(urlRewriter, null);
+        this(urlRewriter, /* sslSocketFactory = */ null);
     }
 
     /**

File: src/main/java/com/android/volley/toolbox/NetworkImageView.java
Patch:
@@ -66,7 +66,7 @@ public void setImageUrl(String url, ImageLoader imageLoader) {
         mUrl = url;
         mImageLoader = imageLoader;
         // The URL has potentially changed. See if we need to load it.
-        loadImageIfNecessary(false);
+        loadImageIfNecessary(/* isInLayoutPass= */ false);
     }
 
     /**
@@ -165,7 +165,7 @@ public void onResponse(
                                             new Runnable() {
                                                 @Override
                                                 public void run() {
-                                                    onResponse(response, false);
+                                                    onResponse(response, /* isImmediate= */ false);
                                                 }
                                             });
                                     return;
@@ -194,7 +194,7 @@ private void setDefaultImageOrNull() {
     @Override
     protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
         super.onLayout(changed, left, top, right, bottom);
-        loadImageIfNecessary(true);
+        loadImageIfNecessary(/* isInLayoutPass= */ true);
     }
 
     @Override

File: src/main/java/com/android/volley/toolbox/RequestFuture.java
Patch:
@@ -59,7 +59,7 @@ public class RequestFuture<T> implements Future<T>, Response.Listener<T>, Respon
     private VolleyError mException;
 
     public static <E> RequestFuture<E> newFuture() {
-        return new RequestFuture<E>();
+        return new RequestFuture<>();
     }
 
     private RequestFuture() {}
@@ -85,7 +85,7 @@ public synchronized boolean cancel(boolean mayInterruptIfRunning) {
     @Override
     public T get() throws InterruptedException, ExecutionException {
         try {
-            return doGet(null);
+            return doGet(/* timeoutMs= */ null);
         } catch (TimeoutException e) {
             throw new AssertionError(e);
         }

File: src/main/java/com/android/volley/toolbox/Volley.java
Patch:
@@ -50,7 +50,8 @@ public static RequestQueue newRequestQueue(Context context, BaseHttpStack stack)
                 String userAgent = "volley/0";
                 try {
                     String packageName = context.getPackageName();
-                    PackageInfo info = context.getPackageManager().getPackageInfo(packageName, 0);
+                    PackageInfo info =
+                            context.getPackageManager().getPackageInfo(packageName, /* flags= */ 0);
                     userAgent = packageName + "/" + info.versionCode;
                 } catch (NameNotFoundException e) {
                 }

File: src/main/java/com/android/volley/toolbox/AndroidAuthenticator.java
Patch:
@@ -23,6 +23,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
+import android.support.annotation.VisibleForTesting;
 import com.android.volley.AuthFailureError;
 
 /**
@@ -61,7 +62,7 @@ public AndroidAuthenticator(
         this(AccountManager.get(context), account, authTokenType, notifyAuthFailure);
     }
 
-    // Visible for testing. Allows injection of a mock AccountManager.
+    @VisibleForTesting
     AndroidAuthenticator(
             AccountManager accountManager,
             Account account,

File: src/main/java/com/android/volley/toolbox/DiskBasedCache.java
Patch:
@@ -17,6 +17,7 @@
 package com.android.volley.toolbox;
 
 import android.os.SystemClock;
+import android.support.annotation.VisibleForTesting;
 import android.text.TextUtils;
 import com.android.volley.Cache;
 import com.android.volley.Header;
@@ -482,7 +483,7 @@ boolean writeHeader(OutputStream os) {
         }
     }
 
-    // VisibleForTesting
+    @VisibleForTesting
     static class CountingInputStream extends FilterInputStream {
         private final long length;
         private long bytesRead;
@@ -510,7 +511,7 @@ public int read(byte[] buffer, int offset, int count) throws IOException {
             return result;
         }
 
-        // VisibleForTesting
+        @VisibleForTesting
         long bytesRead() {
             return bytesRead;
         }

File: src/main/java/com/android/volley/toolbox/HurlStack.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.android.volley.toolbox;
 
+import android.support.annotation.VisibleForTesting;
 import com.android.volley.AuthFailureError;
 import com.android.volley.Header;
 import com.android.volley.Request;
@@ -106,7 +107,7 @@ public HttpResponse executeRequest(Request<?> request, Map<String, String> addit
                 inputStreamFromConnection(connection));
     }
 
-    // VisibleForTesting
+    @VisibleForTesting
     static List<Header> convertHeaders(Map<String, List<String>> responseHeaders) {
         List<Header> headerList = new ArrayList<>(responseHeaders.size());
         for (Map.Entry<String, List<String>> entry : responseHeaders.entrySet()) {

File: src/main/java/com/android/volley/toolbox/JsonRequest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.android.volley.toolbox;
 
+import android.support.annotation.GuardedBy;
 import com.android.volley.NetworkResponse;
 import com.android.volley.Request;
 import com.android.volley.Response;
@@ -41,8 +42,9 @@ public abstract class JsonRequest<T> extends Request<T> {
     /** Lock to guard mListener as it is cleared on cancel() and read on delivery. */
     private final Object mLock = new Object();
 
-    // @GuardedBy("mLock")
+    @GuardedBy("mLock")
     private Listener<T> mListener;
+
     private final String mRequestBody;
 
     /**

File: src/main/java/com/android/volley/toolbox/StringRequest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.android.volley.toolbox;
 
+import android.support.annotation.GuardedBy;
 import com.android.volley.NetworkResponse;
 import com.android.volley.Request;
 import com.android.volley.Response;
@@ -29,7 +30,7 @@ public class StringRequest extends Request<String> {
     /** Lock to guard mListener as it is cleared on cancel() and read on delivery. */
     private final Object mLock = new Object();
 
-    // @GuardedBy("mLock")
+    @GuardedBy("mLock")
     private Listener<String> mListener;
 
     /**

File: src/main/java/com/android/volley/ClientError.java
Patch:
@@ -19,8 +19,8 @@
 /**
  * Indicates that the server responded with an error response indicating that the client has erred.
  *
- * For backwards compatibility, extends ServerError which used to be thrown for all server errors,
- * including 4xx error codes indicating a client error.
+ * <p>For backwards compatibility, extends ServerError which used to be thrown for all server
+ * errors, including 4xx error codes indicating a client error.
  */
 @SuppressWarnings("serial")
 public class ClientError extends ServerError {
@@ -32,4 +32,3 @@ public ClientError() {
         super();
     }
 }
-

File: src/main/java/com/android/volley/Header.java
Patch:
@@ -42,8 +42,7 @@ public boolean equals(Object o) {
 
         Header header = (Header) o;
 
-        return TextUtils.equals(mName, header.mName)
-                && TextUtils.equals(mValue, header.mValue);
+        return TextUtils.equals(mName, header.mName) && TextUtils.equals(mValue, header.mValue);
     }
 
     @Override

File: src/main/java/com/android/volley/Network.java
Patch:
@@ -16,12 +16,11 @@
 
 package com.android.volley;
 
-/**
- * An interface for performing requests.
- */
+/** An interface for performing requests. */
 public interface Network {
     /**
      * Performs the specified request.
+     *
      * @param request Request to process
      * @return A {@link NetworkResponse} with data and caching metadata; will never be null
      * @throws VolleyError on errors

File: src/main/java/com/android/volley/NetworkError.java
Patch:
@@ -16,9 +16,7 @@
 
 package com.android.volley;
 
-/**
- * Indicates that there was a network error when performing a Volley request.
- */
+/** Indicates that there was a network error when performing a Volley request. */
 @SuppressWarnings("serial")
 public class NetworkError extends VolleyError {
     public NetworkError() {

File: src/main/java/com/android/volley/NoConnectionError.java
Patch:
@@ -16,9 +16,7 @@
 
 package com.android.volley;
 
-/**
- * Error indicating that no connection could be established when performing a Volley request.
- */
+/** Error indicating that no connection could be established when performing a Volley request. */
 @SuppressWarnings("serial")
 public class NoConnectionError extends NetworkError {
     public NoConnectionError() {

File: src/main/java/com/android/volley/toolbox/HttpResponse.java
Patch:
@@ -16,7 +16,6 @@
 package com.android.volley.toolbox;
 
 import com.android.volley.Header;
-
 import java.io.InputStream;
 import java.util.Collections;
 import java.util.List;

File: src/test/java/com/android/volley/mock/MockHttpStack.java
Patch:
@@ -20,7 +20,6 @@
 import com.android.volley.Request;
 import com.android.volley.toolbox.BaseHttpStack;
 import com.android.volley.toolbox.HttpResponse;
-
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;

File: src/test/java/com/android/volley/mock/MockRequest.java
Patch:
@@ -22,7 +22,6 @@
 import com.android.volley.Response.ErrorListener;
 import com.android.volley.VolleyError;
 import com.android.volley.utils.CacheTestUtils;
-
 import java.util.HashMap;
 import java.util.Map;
 
@@ -97,5 +96,4 @@ protected Response<byte[]> parseNetworkResponse(NetworkResponse response) {
         parseResponse_called = true;
         return Response.success(response.data, CacheTestUtils.makeRandomCacheEntry(response.data));
     }
-
 }

File: src/test/java/com/android/volley/mock/MockResponseDelivery.java
Patch:
@@ -32,6 +32,7 @@ public boolean wasEitherResponseCalled() {
     }
 
     public Response<?> responsePosted = null;
+
     @Override
     public void postResponse(Request<?> request, Response<?> response) {
         postResponse_called = true;

File: src/test/java/com/android/volley/toolbox/CacheTest.java
Patch:
@@ -16,13 +16,13 @@
 
 package com.android.volley.toolbox;
 
+import static org.junit.Assert.assertNotNull;
+
 import com.android.volley.Cache;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertNotNull;
-
 @RunWith(RobolectricTestRunner.class)
 public class CacheTest {
 

File: src/test/java/com/android/volley/toolbox/RequestFutureTest.java
Patch:
@@ -16,13 +16,13 @@
 
 package com.android.volley.toolbox;
 
+import static org.junit.Assert.assertNotNull;
+
 import com.android.volley.Request;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.junit.Assert.assertNotNull;
-
 @RunWith(RobolectricTestRunner.class)
 public class RequestFutureTest {
 

File: src/test/java/com/android/volley/utils/CacheTestUtils.java
Patch:
@@ -17,13 +17,13 @@
 package com.android.volley.utils;
 
 import com.android.volley.Cache;
-
 import java.util.Random;
 
 public class CacheTestUtils {
 
     /**
      * Makes a random cache entry.
+     *
      * @param data Data to use, or null to use random data
      * @param isExpired Whether the TTLs should be set such that this entry is expired
      * @param needsRefresh Whether the TTLs should be set such that this entry needs refresh
@@ -45,8 +45,8 @@ public static Cache.Entry makeRandomCacheEntry(
     }
 
     /**
-     * Like {@link #makeRandomCacheEntry(byte[], boolean, boolean)} but
-     * defaults to an unexpired entry.
+     * Like {@link #makeRandomCacheEntry(byte[], boolean, boolean)} but defaults to an unexpired
+     * entry.
      */
     public static Cache.Entry makeRandomCacheEntry(byte[] data) {
         return makeRandomCacheEntry(data, false, false);

File: src/main/java/com/android/volley/DefaultRetryPolicy.java
Patch:
@@ -90,7 +90,7 @@ public float getBackoffMultiplier() {
     @Override
     public void retry(VolleyError error) throws VolleyError {
         mCurrentRetryCount++;
-        mCurrentTimeoutMs += (mCurrentTimeoutMs * mBackoffMultiplier);
+        mCurrentTimeoutMs += (int) (mCurrentTimeoutMs * mBackoffMultiplier);
         if (!hasAttemptRemaining()) {
             throw error;
         }

File: src/main/java/com/android/volley/ExecutorDelivery.java
Patch:
@@ -74,7 +74,7 @@ public void postError(Request<?> request, VolleyError error) {
      * main thread.
      */
     @SuppressWarnings("rawtypes")
-    private class ResponseDeliveryRunnable implements Runnable {
+    private static class ResponseDeliveryRunnable implements Runnable {
         private final Request mRequest;
         private final Response mResponse;
         private final Runnable mRunnable;

File: src/main/java/com/android/volley/toolbox/ByteArrayPool.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
-import java.util.LinkedList;
 import java.util.List;
 
 /**
@@ -53,7 +52,7 @@
  */
 public class ByteArrayPool {
     /** The buffer pool, arranged both by last use and by buffer size */
-    private final List<byte[]> mBuffersByLastUse = new LinkedList<byte[]>();
+    private final List<byte[]> mBuffersByLastUse = new ArrayList<>();
     private final List<byte[]> mBuffersBySize = new ArrayList<byte[]>(64);
 
     /** The total size of the buffers in the pool */

File: src/main/java/com/android/volley/toolbox/HttpHeaderParser.java
Patch:
@@ -74,7 +74,7 @@ public static Cache.Entry parseCacheHeaders(NetworkResponse response) {
         headerValue = headers.get("Cache-Control");
         if (headerValue != null) {
             hasCacheControl = true;
-            String[] tokens = headerValue.split(",");
+            String[] tokens = headerValue.split(",", 0);
             for (int i = 0; i < tokens.length; i++) {
                 String token = tokens[i].trim();
                 if (token.equals("no-cache") || token.equals("no-store")) {
@@ -170,9 +170,9 @@ private static SimpleDateFormat newRfc1123Formatter() {
     public static String parseCharset(Map<String, String> headers, String defaultCharset) {
         String contentType = headers.get(HEADER_CONTENT_TYPE);
         if (contentType != null) {
-            String[] params = contentType.split(";");
+            String[] params = contentType.split(";", 0);
             for (int i = 1; i < params.length; i++) {
-                String[] pair = params[i].trim().split("=");
+                String[] pair = params[i].trim().split("=", 0);
                 if (pair.length == 2) {
                     if (pair[0].equals("charset")) {
                         return pair[1];

File: src/main/java/com/android/volley/toolbox/PoolingByteArrayOutputStream.java
Patch:
@@ -68,6 +68,7 @@ public void finalize() {
     /**
      * Ensures there is enough space in the buffer for the given number of additional bytes.
      */
+    @SuppressWarnings("UnsafeFinalization")
     private void expand(int i) {
         /* Can the buffer handle @i more bytes, if not expand it */
         if (count + i <= buf.length) {

File: src/test/java/com/android/volley/NetworkDispatcherTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 
 import static org.junit.Assert.*;
@@ -40,7 +41,8 @@ public class NetworkDispatcherTest {
     private MockCache mCache;
     private MockRequest mRequest;
 
-    private static final byte[] CANNED_DATA = "Ceci n'est pas une vraie reponse".getBytes();
+    private static final byte[] CANNED_DATA =
+            "Ceci n'est pas une vraie reponse".getBytes(StandardCharsets.UTF_8);
     private static final long TIMEOUT_MILLIS = 5000;
 
     @Before public void setUp() throws Exception {

File: src/test/java/com/android/volley/RequestTest.java
Patch:
@@ -45,7 +45,7 @@ public class RequestTest {
         assertTrue(immediate.compareTo(high) < 0);
     }
 
-    private class TestRequest extends Request<Object> {
+    private static class TestRequest extends Request<Object> {
         private Priority mPriority = Priority.NORMAL;
         public TestRequest(Priority priority) {
             super(Request.Method.GET, "", null);
@@ -80,7 +80,7 @@ protected Response<Object> parseNetworkResponse(NetworkResponse response) {
         assertFalse(0 == goodProtocol.getTrafficStatsTag());
     }
 
-    private class UrlParseRequest extends Request<Object> {
+    private static class UrlParseRequest extends Request<Object> {
         public UrlParseRequest(String url) {
             super(Request.Method.GET, url, null);
         }

File: src/test/java/com/android/volley/toolbox/ImageRequestTest.java
Patch:
@@ -31,6 +31,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 
 import static org.junit.Assert.*;
 
@@ -45,7 +46,7 @@ public class ImageRequestTest {
         // "file:" + name in its lookaside map. I write all this because it will
         // probably break mysteriously at some point and I feel terrible about your
         // having to debug it.
-        byte[] jpegBytes = "file:fake".getBytes();
+        byte[] jpegBytes = "file:fake".getBytes(StandardCharsets.UTF_8);
         ShadowBitmapFactory.provideWidthAndHeightHints("fake", 1024, 500);
         NetworkResponse jpeg = new NetworkResponse(jpegBytes);
 

File: src/test/java/com/android/volley/toolbox/NetworkImageViewTest.java
Patch:
@@ -52,7 +52,7 @@ public class NetworkImageViewTest {
     // // instrumentation test. Write this test once it's figured out.
     // }
 
-    private class MockImageLoader extends ImageLoader {
+    private static class MockImageLoader extends ImageLoader {
         public MockImageLoader() {
             super(null, null);
         }
@@ -61,6 +61,7 @@ public MockImageLoader() {
         public int lastMaxWidth;
         public int lastMaxHeight;
 
+        @Override
         public ImageContainer get(String requestUrl, ImageListener imageListener, int maxWidth,
                 int maxHeight, ScaleType scaleType) {
             lastRequestUrl = requestUrl;

File: src/main/java/com/android/volley/NetworkDispatcher.java
Patch:
@@ -99,10 +99,10 @@ public void run() {
     // of time. Update consumer-proguard-rules.pro when modifying this. See also
     // https://github.com/google/volley/issues/114
     private void processRequest() throws InterruptedException {
-        long startTimeMs = SystemClock.elapsedRealtime();
         // Take a request from the queue.
         Request<?> request = mQueue.take();
 
+        long startTimeMs = SystemClock.elapsedRealtime();
         try {
             request.addMarker("network-queue-take");
 

File: src/main/java/com/android/volley/Request.java
Patch:
@@ -249,7 +249,7 @@ void finish(final String tag) {
                     @Override
                     public void run() {
                         mEventLog.add(tag, threadId);
-                        mEventLog.finish(this.toString());
+                        mEventLog.finish(Request.this.toString());
                     }
                 });
                 return;

File: src/main/java/com/android/volley/CacheDispatcher.java
Patch:
@@ -229,6 +229,7 @@ public synchronized void onNoUsableResponseReceived(Request<?> request) {
                 }
                 Request<?> nextInLine = waitingRequests.remove(0);
                 mWaitingRequests.put(cacheKey, waitingRequests);
+                nextInLine.setNetworkRequestCompleteListener(this);
                 try {
                     mCacheDispatcher.mNetworkQueue.put(nextInLine);
                 } catch (InterruptedException iex) {

File: src/main/java/com/android/volley/toolbox/AdaptedHttpStack.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
-import java.util.TreeMap;
 
 /**
  * {@link BaseHttpStack} implementation wrapping a {@link HttpStack}.

File: src/test/java/com/android/volley/toolbox/HttpHeaderParserTest.java
Patch:
@@ -279,7 +279,7 @@ private static String rfc1123Date(long millis) {
         headers.add(new Header("cache-control", "public, max-age=86400"));
         headers.add(new Header("content-type", "text/plain"));
 
-        NetworkResponse response = new NetworkResponse(0, null, headers, false, 0);
+        NetworkResponse response = new NetworkResponse(0, null, false, 0, headers);
         Cache.Entry entry = HttpHeaderParser.parseCacheHeaders(response);
 
         assertNotNull(entry);

File: src/test/java/com/android/volley/toolbox/HurlStackTest.java
Patch:
@@ -162,6 +162,7 @@ public class HurlStackTest {
 
     @Test public void convertHeaders() {
         Map<String, List<String>> headers = new HashMap<>();
+        headers.put(null, Collections.singletonList("Ignored"));
         headers.put("HeaderA", Collections.singletonList("ValueA"));
         List<String> values = new ArrayList<>();
         values.add("ValueB_1");

File: src/test/java/com/android/volley/mock/MockResponseDelivery.java
Patch:
@@ -25,6 +25,7 @@ public class MockResponseDelivery implements ResponseDelivery {
 
     public boolean postResponse_called = false;
     public boolean postError_called = false;
+    public long postResponse_calledNtimes = 0;
 
     public boolean wasEitherResponseCalled() {
         return postResponse_called || postError_called;
@@ -34,12 +35,14 @@ public boolean wasEitherResponseCalled() {
     @Override
     public void postResponse(Request<?> request, Response<?> response) {
         postResponse_called = true;
+        postResponse_calledNtimes++;
         responsePosted = response;
     }
 
     @Override
     public void postResponse(Request<?> request, Response<?> response, Runnable runnable) {
         postResponse_called = true;
+        postResponse_calledNtimes++;
         responsePosted = response;
         runnable.run();
     }

File: src/test/java/com/android/volley/toolbox/HttpHeaderParserTest.java
Patch:
@@ -268,6 +268,8 @@ private static String rfc1123Date(long millis) {
         assertEquals("ISO-8859-1", HttpHeaderParser.parseCharset(headers));
     }
 
+    // TODO(#21): Rewrite this test without using Apache HTTP after we rewrite the header logic
+    // to support multiple response headers with the same key.
     @Test public void parseCaseInsensitive() {
 
         long now = System.currentTimeMillis();

File: src/main/java/com/android/volley/Cache.java
Patch:
@@ -87,12 +87,12 @@ class Entry {
         public Map<String, String> responseHeaders = Collections.emptyMap();
 
         /** True if the entry is expired. */
-        boolean isExpired() {
+        public boolean isExpired() {
             return this.ttl < System.currentTimeMillis();
         }
 
         /** True if a refresh is needed from the original data source. */
-        boolean refreshNeeded() {
+        public boolean refreshNeeded() {
             return this.softTtl < System.currentTimeMillis();
         }
     }

File: src/main/java/com/android/volley/Cache.java
Patch:
@@ -87,12 +87,12 @@ class Entry {
         public Map<String, String> responseHeaders = Collections.emptyMap();
 
         /** True if the entry is expired. */
-        boolean isExpired() {
+        public boolean isExpired() {
             return this.ttl < System.currentTimeMillis();
         }
 
         /** True if a refresh is needed from the original data source. */
-        boolean refreshNeeded() {
+        public boolean refreshNeeded() {
             return this.softTtl < System.currentTimeMillis();
         }
     }

File: src/main/java/com/android/volley/toolbox/ImageRequest.java
Patch:
@@ -216,7 +216,9 @@ private Response<Bitmap> doParse(NetworkResponse response) {
 
     @Override
     protected void deliverResponse(Bitmap response) {
-        mListener.onResponse(response);
+        if (mListener != null) {
+            mListener.onResponse(response);
+        }
     }
 
     /**

File: src/main/java/com/android/volley/toolbox/JsonRequest.java
Patch:
@@ -63,7 +63,9 @@ public JsonRequest(int method, String url, String requestBody, Listener<T> liste
 
     @Override
     protected void deliverResponse(T response) {
-        mListener.onResponse(response);
+        if (mListener != null) {
+            mListener.onResponse(response);
+        }
     }
 
     @Override

File: src/main/java/com/android/volley/toolbox/StringRequest.java
Patch:
@@ -57,7 +57,9 @@ public StringRequest(String url, Listener<String> listener, ErrorListener errorL
 
     @Override
     protected void deliverResponse(String response) {
-        mListener.onResponse(response);
+        if (mListener != null) {
+            mListener.onResponse(response);
+        }
     }
 
     @Override

File: src/main/java/com/android/volley/toolbox/ImageRequest.java
Patch:
@@ -216,7 +216,9 @@ private Response<Bitmap> doParse(NetworkResponse response) {
 
     @Override
     protected void deliverResponse(Bitmap response) {
-        mListener.onResponse(response);
+        if (mListener != null) {
+            mListener.onResponse(response);
+        }
     }
 
     /**

File: src/main/java/com/android/volley/toolbox/JsonRequest.java
Patch:
@@ -63,7 +63,9 @@ public JsonRequest(int method, String url, String requestBody, Listener<T> liste
 
     @Override
     protected void deliverResponse(T response) {
-        mListener.onResponse(response);
+        if (mListener != null) {
+            mListener.onResponse(response);
+        }
     }
 
     @Override

File: src/main/java/com/android/volley/toolbox/StringRequest.java
Patch:
@@ -57,7 +57,9 @@ public StringRequest(String url, Listener<String> listener, ErrorListener errorL
 
     @Override
     protected void deliverResponse(String response) {
-        mListener.onResponse(response);
+        if (mListener != null) {
+            mListener.onResponse(response);
+        }
     }
 
     @Override

File: src/main/java/com/android/volley/toolbox/BasicNetwork.java
Patch:
@@ -265,7 +265,7 @@ private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError
     }
 
     /**
-     * Converts Headers[] to Map<String, String>.
+     * Converts Headers[] to Map&lt;String, String&gt;.
      */
     protected static Map<String, String> convertHeaders(Header[] headers) {
         Map<String, String> result = new TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);

File: src/main/java/com/android/volley/toolbox/HttpHeaderParser.java
Patch:
@@ -31,7 +31,7 @@
 public class HttpHeaderParser {
 
     /**
-     * Extracts a {@link Cache.Entry} from a {@link NetworkResponse}.
+     * Extracts a {@link com.android.volley.Cache.Entry} from a {@link NetworkResponse}.
      *
      * @param response The network response to parse headers from
      * @return a cache entry for the given response, or null if the response is not cacheable.

File: src/main/java/com/android/volley/toolbox/BasicNetwork.java
Patch:
@@ -265,7 +265,7 @@ private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError
     }
 
     /**
-     * Converts Headers[] to Map<String, String>.
+     * Converts Headers[] to Map&lt;String, String&gt;.
      */
     protected static Map<String, String> convertHeaders(Header[] headers) {
         Map<String, String> result = new TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);

File: src/main/java/com/android/volley/toolbox/HttpHeaderParser.java
Patch:
@@ -31,7 +31,7 @@
 public class HttpHeaderParser {
 
     /**
-     * Extracts a {@link Cache.Entry} from a {@link NetworkResponse}.
+     * Extracts a {@link com.android.volley.Cache.Entry} from a {@link NetworkResponse}.
      *
      * @param response The network response to parse headers from
      * @return a cache entry for the given response, or null if the response is not cacheable.

File: src/main/java/com/android/volley/toolbox/BasicNetwork.java
Patch:
@@ -257,7 +257,7 @@ private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError
             } catch (IOException e) {
                 // This can happen if there was an exception above that left the entity in
                 // an invalid state.
-                VolleyLog.v("Error occured when calling consumingContent");
+                VolleyLog.v("Error occurred when calling consumingContent");
             }
             mPool.returnBuf(buffer);
             bytes.close();

File: src/test/java/com/android/volley/toolbox/ImageRequestTest.java
Patch:
@@ -171,6 +171,6 @@ public void publicMethods() throws Exception {
                 Response.ErrorListener.class));
         assertEquals(ImageRequest.DEFAULT_IMAGE_TIMEOUT_MS, 1000);
         assertEquals(ImageRequest.DEFAULT_IMAGE_MAX_RETRIES, 2);
-        assertEquals(ImageRequest.DEFAULT_IMAGE_BACKOFF_MULT, 2f);
+        assertEquals(ImageRequest.DEFAULT_IMAGE_BACKOFF_MULT, 2f, 0);
     }
 }

File: src/test/java/com/android/volley/toolbox/ImageRequestTest.java
Patch:
@@ -171,6 +171,6 @@ public void publicMethods() throws Exception {
                 Response.ErrorListener.class));
         assertEquals(ImageRequest.DEFAULT_IMAGE_TIMEOUT_MS, 1000);
         assertEquals(ImageRequest.DEFAULT_IMAGE_MAX_RETRIES, 2);
-        assertEquals(ImageRequest.DEFAULT_IMAGE_BACKOFF_MULT, 2f);
+        assertEquals(ImageRequest.DEFAULT_IMAGE_BACKOFF_MULT, 2f, 0);
     }
 }

File: src/test/java/com/android/volley/toolbox/ImageLoaderTest.java
Patch:
@@ -84,6 +84,8 @@ public void publicMethods() throws Exception {
         assertNotNull(ImageLoader.class.getMethod("getImageListener", ImageView.class,
                 int.class, int.class));
         assertNotNull(ImageLoader.class.getMethod("isCached", String.class, int.class, int.class));
+        assertNotNull(ImageLoader.class.getMethod("isCached", String.class, int.class, int.class,
+                ImageView.ScaleType.class));
         assertNotNull(ImageLoader.class.getMethod("get", String.class,
                 ImageLoader.ImageListener.class));
         assertNotNull(ImageLoader.class.getMethod("get", String.class,

File: src/test/java/com/android/volley/toolbox/ImageLoaderTest.java
Patch:
@@ -84,6 +84,8 @@ public void publicMethods() throws Exception {
         assertNotNull(ImageLoader.class.getMethod("getImageListener", ImageView.class,
                 int.class, int.class));
         assertNotNull(ImageLoader.class.getMethod("isCached", String.class, int.class, int.class));
+        assertNotNull(ImageLoader.class.getMethod("isCached", String.class, int.class, int.class,
+                ImageView.ScaleType.class));
         assertNotNull(ImageLoader.class.getMethod("get", String.class,
                 ImageLoader.ImageListener.class));
         assertNotNull(ImageLoader.class.getMethod("get", String.class,

File: src/test/java/com/android/volley/toolbox/ImageLoaderTest.java
Patch:
@@ -84,6 +84,8 @@ public void publicMethods() throws Exception {
         assertNotNull(ImageLoader.class.getMethod("getImageListener", ImageView.class,
                 int.class, int.class));
         assertNotNull(ImageLoader.class.getMethod("isCached", String.class, int.class, int.class));
+        assertNotNull(ImageLoader.class.getMethod("isCached", String.class, int.class, int.class,
+                ImageView.ScaleType.class));
         assertNotNull(ImageLoader.class.getMethod("get", String.class,
                 ImageLoader.ImageListener.class));
         assertNotNull(ImageLoader.class.getMethod("get", String.class,

File: src/test/java/com/android/volley/toolbox/ImageLoaderTest.java
Patch:
@@ -84,6 +84,8 @@ public void publicMethods() throws Exception {
         assertNotNull(ImageLoader.class.getMethod("getImageListener", ImageView.class,
                 int.class, int.class));
         assertNotNull(ImageLoader.class.getMethod("isCached", String.class, int.class, int.class));
+        assertNotNull(ImageLoader.class.getMethod("isCached", String.class, int.class, int.class,
+                ImageView.ScaleType.class));
         assertNotNull(ImageLoader.class.getMethod("get", String.class,
                 ImageLoader.ImageListener.class));
         assertNotNull(ImageLoader.class.getMethod("get", String.class,

File: src/test/java/com/android/volley/toolbox/ImageLoaderTest.java
Patch:
@@ -84,6 +84,8 @@ public void publicMethods() throws Exception {
         assertNotNull(ImageLoader.class.getMethod("getImageListener", ImageView.class,
                 int.class, int.class));
         assertNotNull(ImageLoader.class.getMethod("isCached", String.class, int.class, int.class));
+        assertNotNull(ImageLoader.class.getMethod("isCached", String.class, int.class, int.class,
+                ImageView.ScaleType.class));
         assertNotNull(ImageLoader.class.getMethod("get", String.class,
                 ImageLoader.ImageListener.class));
         assertNotNull(ImageLoader.class.getMethod("get", String.class,

File: src/main/java/com/android/volley/toolbox/JsonArrayRequest.java
Patch:
@@ -45,8 +45,8 @@ public JsonArrayRequest(String url, Listener<JSONArray> listener, ErrorListener
     @Override
     protected Response<JSONArray> parseNetworkResponse(NetworkResponse response) {
         try {
-            String jsonString =
-                new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+            String jsonString = new String(response.data,
+                    HttpHeaderParser.parseCharset(response.headers, PROTOCOL_CHARSET));
             return Response.success(new JSONArray(jsonString),
                     HttpHeaderParser.parseCacheHeaders(response));
         } catch (UnsupportedEncodingException e) {

File: src/main/java/com/android/volley/toolbox/JsonObjectRequest.java
Patch:
@@ -63,8 +63,8 @@ public JsonObjectRequest(String url, JSONObject jsonRequest, Listener<JSONObject
     @Override
     protected Response<JSONObject> parseNetworkResponse(NetworkResponse response) {
         try {
-            String jsonString =
-                new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+            String jsonString = new String(response.data,
+                    HttpHeaderParser.parseCharset(response.headers, PROTOCOL_CHARSET));
             return Response.success(new JSONObject(jsonString),
                     HttpHeaderParser.parseCacheHeaders(response));
         } catch (UnsupportedEncodingException e) {

File: src/main/java/com/android/volley/toolbox/JsonRequest.java
Patch:
@@ -32,8 +32,8 @@
  * @param <T> JSON type of response expected
  */
 public abstract class JsonRequest<T> extends Request<T> {
-    /** Charset for request. */
-    private static final String PROTOCOL_CHARSET = "utf-8";
+    /** Default charset for JSON request. */
+    protected static final String PROTOCOL_CHARSET = "utf-8";
 
     /** Content type for request. */
     private static final String PROTOCOL_CONTENT_TYPE =

File: src/main/java/com/android/volley/toolbox/JsonArrayRequest.java
Patch:
@@ -45,8 +45,8 @@ public JsonArrayRequest(String url, Listener<JSONArray> listener, ErrorListener
     @Override
     protected Response<JSONArray> parseNetworkResponse(NetworkResponse response) {
         try {
-            String jsonString =
-                new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+            String jsonString = new String(response.data,
+                    HttpHeaderParser.parseCharset(response.headers, PROTOCOL_CHARSET));
             return Response.success(new JSONArray(jsonString),
                     HttpHeaderParser.parseCacheHeaders(response));
         } catch (UnsupportedEncodingException e) {

File: src/main/java/com/android/volley/toolbox/JsonObjectRequest.java
Patch:
@@ -63,8 +63,8 @@ public JsonObjectRequest(String url, JSONObject jsonRequest, Listener<JSONObject
     @Override
     protected Response<JSONObject> parseNetworkResponse(NetworkResponse response) {
         try {
-            String jsonString =
-                new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+            String jsonString = new String(response.data,
+                    HttpHeaderParser.parseCharset(response.headers, PROTOCOL_CHARSET));
             return Response.success(new JSONObject(jsonString),
                     HttpHeaderParser.parseCacheHeaders(response));
         } catch (UnsupportedEncodingException e) {

File: src/main/java/com/android/volley/toolbox/JsonRequest.java
Patch:
@@ -32,8 +32,8 @@
  * @param <T> JSON type of response expected
  */
 public abstract class JsonRequest<T> extends Request<T> {
-    /** Charset for request. */
-    private static final String PROTOCOL_CHARSET = "utf-8";
+    /** Default charset for JSON request. */
+    protected static final String PROTOCOL_CHARSET = "utf-8";
 
     /** Content type for request. */
     private static final String PROTOCOL_CONTENT_TYPE =

File: src/main/java/com/android/volley/toolbox/JsonArrayRequest.java
Patch:
@@ -45,8 +45,8 @@ public JsonArrayRequest(String url, Listener<JSONArray> listener, ErrorListener
     @Override
     protected Response<JSONArray> parseNetworkResponse(NetworkResponse response) {
         try {
-            String jsonString =
-                new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+            String jsonString = new String(response.data,
+                    HttpHeaderParser.parseCharset(response.headers, PROTOCOL_CHARSET));
             return Response.success(new JSONArray(jsonString),
                     HttpHeaderParser.parseCacheHeaders(response));
         } catch (UnsupportedEncodingException e) {

File: src/main/java/com/android/volley/toolbox/JsonObjectRequest.java
Patch:
@@ -63,8 +63,8 @@ public JsonObjectRequest(String url, JSONObject jsonRequest, Listener<JSONObject
     @Override
     protected Response<JSONObject> parseNetworkResponse(NetworkResponse response) {
         try {
-            String jsonString =
-                new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+            String jsonString = new String(response.data,
+                    HttpHeaderParser.parseCharset(response.headers, PROTOCOL_CHARSET));
             return Response.success(new JSONObject(jsonString),
                     HttpHeaderParser.parseCacheHeaders(response));
         } catch (UnsupportedEncodingException e) {

File: src/main/java/com/android/volley/toolbox/JsonRequest.java
Patch:
@@ -32,8 +32,8 @@
  * @param <T> JSON type of response expected
  */
 public abstract class JsonRequest<T> extends Request<T> {
-    /** Charset for request. */
-    private static final String PROTOCOL_CHARSET = "utf-8";
+    /** Default charset for JSON request. */
+    protected static final String PROTOCOL_CHARSET = "utf-8";
 
     /** Content type for request. */
     private static final String PROTOCOL_CONTENT_TYPE =

File: src/main/java/com/android/volley/toolbox/JsonArrayRequest.java
Patch:
@@ -45,8 +45,8 @@ public JsonArrayRequest(String url, Listener<JSONArray> listener, ErrorListener
     @Override
     protected Response<JSONArray> parseNetworkResponse(NetworkResponse response) {
         try {
-            String jsonString =
-                new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+            String jsonString = new String(response.data,
+                    HttpHeaderParser.parseCharset(response.headers, PROTOCOL_CHARSET));
             return Response.success(new JSONArray(jsonString),
                     HttpHeaderParser.parseCacheHeaders(response));
         } catch (UnsupportedEncodingException e) {

File: src/main/java/com/android/volley/toolbox/JsonObjectRequest.java
Patch:
@@ -63,8 +63,8 @@ public JsonObjectRequest(String url, JSONObject jsonRequest, Listener<JSONObject
     @Override
     protected Response<JSONObject> parseNetworkResponse(NetworkResponse response) {
         try {
-            String jsonString =
-                new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+            String jsonString = new String(response.data,
+                    HttpHeaderParser.parseCharset(response.headers, PROTOCOL_CHARSET));
             return Response.success(new JSONObject(jsonString),
                     HttpHeaderParser.parseCacheHeaders(response));
         } catch (UnsupportedEncodingException e) {

File: src/main/java/com/android/volley/toolbox/JsonRequest.java
Patch:
@@ -32,8 +32,8 @@
  * @param <T> JSON type of response expected
  */
 public abstract class JsonRequest<T> extends Request<T> {
-    /** Charset for request. */
-    private static final String PROTOCOL_CHARSET = "utf-8";
+    /** Default charset for JSON request. */
+    protected static final String PROTOCOL_CHARSET = "utf-8";
 
     /** Content type for request. */
     private static final String PROTOCOL_CONTENT_TYPE =

File: src/main/java/com/android/volley/toolbox/NetworkImageView.java
Patch:
@@ -103,6 +103,7 @@ public void setErrorImageResId(int errorImage) {
     void loadImageIfNecessary(final boolean isInLayoutPass) {
         int width = getWidth();
         int height = getHeight();
+        ScaleType scaleType = getScaleType();
 
         boolean wrapWidth = false, wrapHeight = false;
         if (getLayoutParams() != null) {
@@ -177,7 +178,7 @@ public void run() {
                             setImageResource(mDefaultImageId);
                         }
                     }
-                }, maxWidth, maxHeight);
+                }, maxWidth, maxHeight, scaleType);
 
         // update the ImageContainer to be the new bitmap container.
         mImageContainer = newContainer;

File: src/test/java/com/android/volley/toolbox/NetworkImageViewTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.android.volley.toolbox;
 
 import android.view.ViewGroup.LayoutParams;
+import android.widget.ImageView.ScaleType;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -43,7 +44,7 @@ public MockImageLoader() {
         public int lastMaxHeight;
 
         public ImageContainer get(String requestUrl, ImageListener imageListener, int maxWidth,
-                int maxHeight) {
+                int maxHeight, ScaleType scaleType) {
             lastRequestUrl = requestUrl;
             lastMaxWidth = maxWidth;
             lastMaxHeight = maxHeight;

File: src/main/java/com/android/volley/toolbox/NetworkImageView.java
Patch:
@@ -103,6 +103,7 @@ public void setErrorImageResId(int errorImage) {
     void loadImageIfNecessary(final boolean isInLayoutPass) {
         int width = getWidth();
         int height = getHeight();
+        ScaleType scaleType = getScaleType();
 
         boolean wrapWidth = false, wrapHeight = false;
         if (getLayoutParams() != null) {
@@ -177,7 +178,7 @@ public void run() {
                             setImageResource(mDefaultImageId);
                         }
                     }
-                }, maxWidth, maxHeight);
+                }, maxWidth, maxHeight, scaleType);
 
         // update the ImageContainer to be the new bitmap container.
         mImageContainer = newContainer;

File: src/test/java/com/android/volley/toolbox/NetworkImageViewTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.android.volley.toolbox;
 
 import android.view.ViewGroup.LayoutParams;
+import android.widget.ImageView.ScaleType;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -43,7 +44,7 @@ public MockImageLoader() {
         public int lastMaxHeight;
 
         public ImageContainer get(String requestUrl, ImageListener imageListener, int maxWidth,
-                int maxHeight) {
+                int maxHeight, ScaleType scaleType) {
             lastRequestUrl = requestUrl;
             lastMaxWidth = maxWidth;
             lastMaxHeight = maxHeight;

File: src/main/java/com/android/volley/toolbox/NetworkImageView.java
Patch:
@@ -103,6 +103,7 @@ public void setErrorImageResId(int errorImage) {
     void loadImageIfNecessary(final boolean isInLayoutPass) {
         int width = getWidth();
         int height = getHeight();
+        ScaleType scaleType = getScaleType();
 
         boolean wrapWidth = false, wrapHeight = false;
         if (getLayoutParams() != null) {
@@ -177,7 +178,7 @@ public void run() {
                             setImageResource(mDefaultImageId);
                         }
                     }
-                }, maxWidth, maxHeight);
+                }, maxWidth, maxHeight, scaleType);
 
         // update the ImageContainer to be the new bitmap container.
         mImageContainer = newContainer;

File: src/test/java/com/android/volley/toolbox/NetworkImageViewTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.android.volley.toolbox;
 
 import android.view.ViewGroup.LayoutParams;
+import android.widget.ImageView.ScaleType;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -43,7 +44,7 @@ public MockImageLoader() {
         public int lastMaxHeight;
 
         public ImageContainer get(String requestUrl, ImageListener imageListener, int maxWidth,
-                int maxHeight) {
+                int maxHeight, ScaleType scaleType) {
             lastRequestUrl = requestUrl;
             lastMaxWidth = maxWidth;
             lastMaxHeight = maxHeight;

File: src/main/java/com/android/volley/toolbox/JsonArrayRequest.java
Patch:
@@ -45,8 +45,8 @@ public JsonArrayRequest(String url, Listener<JSONArray> listener, ErrorListener
     @Override
     protected Response<JSONArray> parseNetworkResponse(NetworkResponse response) {
         try {
-            String jsonString =
-                new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+            String jsonString = new String(response.data,
+                    HttpHeaderParser.parseCharset(response.headers, PROTOCOL_CHARSET));
             return Response.success(new JSONArray(jsonString),
                     HttpHeaderParser.parseCacheHeaders(response));
         } catch (UnsupportedEncodingException e) {

File: src/main/java/com/android/volley/toolbox/JsonObjectRequest.java
Patch:
@@ -63,8 +63,8 @@ public JsonObjectRequest(String url, JSONObject jsonRequest, Listener<JSONObject
     @Override
     protected Response<JSONObject> parseNetworkResponse(NetworkResponse response) {
         try {
-            String jsonString =
-                new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+            String jsonString = new String(response.data,
+                    HttpHeaderParser.parseCharset(response.headers, PROTOCOL_CHARSET));
             return Response.success(new JSONObject(jsonString),
                     HttpHeaderParser.parseCacheHeaders(response));
         } catch (UnsupportedEncodingException e) {

File: src/main/java/com/android/volley/toolbox/JsonRequest.java
Patch:
@@ -32,8 +32,8 @@
  * @param <T> JSON type of response expected
  */
 public abstract class JsonRequest<T> extends Request<T> {
-    /** Charset for request. */
-    private static final String PROTOCOL_CHARSET = "utf-8";
+    /** Default charset for JSON request. */
+    protected static final String PROTOCOL_CHARSET = "utf-8";
 
     /** Content type for request. */
     private static final String PROTOCOL_CONTENT_TYPE =

File: src/main/java/com/android/volley/toolbox/NetworkImageView.java
Patch:
@@ -103,6 +103,7 @@ public void setErrorImageResId(int errorImage) {
     void loadImageIfNecessary(final boolean isInLayoutPass) {
         int width = getWidth();
         int height = getHeight();
+        ScaleType scaleType = getScaleType();
 
         boolean wrapWidth = false, wrapHeight = false;
         if (getLayoutParams() != null) {
@@ -177,7 +178,7 @@ public void run() {
                             setImageResource(mDefaultImageId);
                         }
                     }
-                }, maxWidth, maxHeight);
+                }, maxWidth, maxHeight, scaleType);
 
         // update the ImageContainer to be the new bitmap container.
         mImageContainer = newContainer;

File: src/test/java/com/android/volley/toolbox/NetworkImageViewTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.android.volley.toolbox;
 
 import android.view.ViewGroup.LayoutParams;
+import android.widget.ImageView.ScaleType;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -43,7 +44,7 @@ public MockImageLoader() {
         public int lastMaxHeight;
 
         public ImageContainer get(String requestUrl, ImageListener imageListener, int maxWidth,
-                int maxHeight) {
+                int maxHeight, ScaleType scaleType) {
             lastRequestUrl = requestUrl;
             lastMaxWidth = maxWidth;
             lastMaxHeight = maxHeight;

File: src/com/android/volley/ServerError.java
Patch:
@@ -20,7 +20,7 @@
 import com.android.volley.VolleyError;
 
 /**
- * Indicates that the error responded with an error response.
+ * Indicates that the server responded with an error response.
  */
 @SuppressWarnings("serial")
 public class ServerError extends VolleyError {

File: src/com/android/volley/toolbox/HurlStack.java
Patch:
@@ -223,8 +223,8 @@ private HttpURLConnection openConnection(URL url, Request<?> request) throws IOE
                 connection.setRequestMethod("TRACE");
                 break;
             case Method.PATCH:
-                addBodyIfExists(connection, request);
                 connection.setRequestMethod("PATCH");
+                addBodyIfExists(connection, request);
                 break;
             default:
                 throw new IllegalStateException("Unknown method type.");

File: src/com/android/volley/toolbox/HurlStack.java
Patch:
@@ -223,8 +223,8 @@ private HttpURLConnection openConnection(URL url, Request<?> request) throws IOE
                 connection.setRequestMethod("TRACE");
                 break;
             case Method.PATCH:
-                addBodyIfExists(connection, request);
                 connection.setRequestMethod("PATCH");
+                addBodyIfExists(connection, request);
                 break;
             default:
                 throw new IllegalStateException("Unknown method type.");

File: src/com/android/volley/toolbox/HurlStack.java
Patch:
@@ -223,8 +223,8 @@ private HttpURLConnection openConnection(URL url, Request<?> request) throws IOE
                 connection.setRequestMethod("TRACE");
                 break;
             case Method.PATCH:
-                addBodyIfExists(connection, request);
                 connection.setRequestMethod("PATCH");
+                addBodyIfExists(connection, request);
                 break;
             default:
                 throw new IllegalStateException("Unknown method type.");

File: src/com/android/volley/toolbox/HurlStack.java
Patch:
@@ -223,8 +223,8 @@ private HttpURLConnection openConnection(URL url, Request<?> request) throws IOE
                 connection.setRequestMethod("TRACE");
                 break;
             case Method.PATCH:
-                addBodyIfExists(connection, request);
                 connection.setRequestMethod("PATCH");
+                addBodyIfExists(connection, request);
                 break;
             default:
                 throw new IllegalStateException("Unknown method type.");

File: src/com/android/volley/toolbox/ImageLoader.java
Patch:
@@ -275,10 +275,10 @@ private void onGetImageError(String cacheKey, VolleyError error) {
         // Remove this request from the list of in-flight requests.
         BatchedImageRequest request = mInFlightRequests.remove(cacheKey);
 
-        // Set the error for this request
-        request.setError(error);
-
         if (request != null) {
+            // Set the error for this request
+            request.setError(error);
+
             // Send the batched response
             batchResponse(cacheKey, request);
         }

File: src/com/android/volley/toolbox/ImageLoader.java
Patch:
@@ -275,10 +275,10 @@ private void onGetImageError(String cacheKey, VolleyError error) {
         // Remove this request from the list of in-flight requests.
         BatchedImageRequest request = mInFlightRequests.remove(cacheKey);
 
-        // Set the error for this request
-        request.setError(error);
-
         if (request != null) {
+            // Set the error for this request
+            request.setError(error);
+
             // Send the batched response
             batchResponse(cacheKey, request);
         }

File: src/com/android/volley/toolbox/ImageLoader.java
Patch:
@@ -275,10 +275,10 @@ private void onGetImageError(String cacheKey, VolleyError error) {
         // Remove this request from the list of in-flight requests.
         BatchedImageRequest request = mInFlightRequests.remove(cacheKey);
 
-        // Set the error for this request
-        request.setError(error);
-
         if (request != null) {
+            // Set the error for this request
+            request.setError(error);
+
             // Send the batched response
             batchResponse(cacheKey, request);
         }

File: src/com/android/volley/toolbox/ImageLoader.java
Patch:
@@ -275,10 +275,10 @@ private void onGetImageError(String cacheKey, VolleyError error) {
         // Remove this request from the list of in-flight requests.
         BatchedImageRequest request = mInFlightRequests.remove(cacheKey);
 
-        // Set the error for this request
-        request.setError(error);
-
         if (request != null) {
+            // Set the error for this request
+            request.setError(error);
+
             // Send the batched response
             batchResponse(cacheKey, request);
         }

File: src/com/android/volley/RequestQueue.java
Patch:
@@ -213,7 +213,7 @@ public boolean apply(Request<?> request) {
      * @param request The request to service
      * @return The passed-in request
      */
-    public Request<?> add(Request<?> request) {
+    public <T> Request<T> add(Request<T> request) {
         // Tag the request as belonging to this queue and add it to the set of current requests.
         request.setRequestQueue(this);
         synchronized (mCurrentRequests) {

File: src/com/android/volley/RequestQueue.java
Patch:
@@ -213,7 +213,7 @@ public boolean apply(Request<?> request) {
      * @param request The request to service
      * @return The passed-in request
      */
-    public Request<?> add(Request<?> request) {
+    public <T> Request<T> add(Request<T> request) {
         // Tag the request as belonging to this queue and add it to the set of current requests.
         request.setRequestQueue(this);
         synchronized (mCurrentRequests) {

File: src/com/android/volley/RequestQueue.java
Patch:
@@ -213,7 +213,7 @@ public boolean apply(Request<?> request) {
      * @param request The request to service
      * @return The passed-in request
      */
-    public Request<?> add(Request<?> request) {
+    public <T> Request<T> add(Request<T> request) {
         // Tag the request as belonging to this queue and add it to the set of current requests.
         request.setRequestQueue(this);
         synchronized (mCurrentRequests) {

File: src/com/android/volley/RequestQueue.java
Patch:
@@ -213,7 +213,7 @@ public boolean apply(Request<?> request) {
      * @param request The request to service
      * @return The passed-in request
      */
-    public Request<?> add(Request<?> request) {
+    public <T> Request<T> add(Request<T> request) {
         // Tag the request as belonging to this queue and add it to the set of current requests.
         request.setRequestQueue(this);
         synchronized (mCurrentRequests) {

File: src/com/android/volley/RequestQueue.java
Patch:
@@ -213,7 +213,7 @@ public boolean apply(Request<?> request) {
      * @param request The request to service
      * @return The passed-in request
      */
-    public Request<?> add(Request<?> request) {
+    public <T> Request<T> add(Request<T> request) {
         // Tag the request as belonging to this queue and add it to the set of current requests.
         request.setRequestQueue(this);
         synchronized (mCurrentRequests) {

File: src/com/android/volley/toolbox/BasicNetwork.java
Patch:
@@ -98,7 +98,8 @@ public NetworkResponse performRequest(Request<?> request) throws VolleyError {
                 // Handle cache validation.
                 if (statusCode == HttpStatus.SC_NOT_MODIFIED) {
                     return new NetworkResponse(HttpStatus.SC_NOT_MODIFIED,
-                            request.getCacheEntry().data, responseHeaders, true);
+                            request.getCacheEntry() == null ? null : request.getCacheEntry().data,
+                            responseHeaders, true);
                 }
 
                 // Some responses such as 204s do not have content.  We must check.

File: src/com/android/volley/toolbox/ImageRequest.java
Patch:
@@ -175,7 +175,7 @@ private Response<Bitmap> doParse(NetworkResponse response) {
         }
 
         if (bitmap == null) {
-            return Response.error(new ParseError());
+            return Response.error(new ParseError(response));
         } else {
             return Response.success(bitmap, HttpHeaderParser.parseCacheHeaders(response));
         }

File: src/com/android/volley/toolbox/ImageRequest.java
Patch:
@@ -175,7 +175,7 @@ private Response<Bitmap> doParse(NetworkResponse response) {
         }
 
         if (bitmap == null) {
-            return Response.error(new ParseError());
+            return Response.error(new ParseError(response));
         } else {
             return Response.success(bitmap, HttpHeaderParser.parseCacheHeaders(response));
         }

File: src/com/android/volley/toolbox/ImageRequest.java
Patch:
@@ -175,7 +175,7 @@ private Response<Bitmap> doParse(NetworkResponse response) {
         }
 
         if (bitmap == null) {
-            return Response.error(new ParseError());
+            return Response.error(new ParseError(response));
         } else {
             return Response.success(bitmap, HttpHeaderParser.parseCacheHeaders(response));
         }

File: src/com/android/volley/toolbox/NetworkImageView.java
Patch:
@@ -18,8 +18,8 @@
 import android.content.Context;
 import android.text.TextUtils;
 import android.util.AttributeSet;
+import android.view.ViewGroup.LayoutParams;
 import android.widget.ImageView;
-import android.widget.LinearLayout.LayoutParams;
 
 import com.android.volley.VolleyError;
 import com.android.volley.toolbox.ImageLoader.ImageContainer;
@@ -104,7 +104,8 @@ private void loadImageIfNecessary(final boolean isInLayoutPass) {
         int width = getWidth();
         int height = getHeight();
 
-        boolean isFullyWrapContent = getLayoutParams().height == LayoutParams.WRAP_CONTENT
+        boolean isFullyWrapContent = getLayoutParams() != null
+                && getLayoutParams().height == LayoutParams.WRAP_CONTENT
                 && getLayoutParams().width == LayoutParams.WRAP_CONTENT;
         // if the view's bounds aren't known yet, and this is not a wrap-content/wrap-content
         // view, hold off on loading the image.

File: src/com/android/volley/toolbox/NetworkImageView.java
Patch:
@@ -18,8 +18,8 @@
 import android.content.Context;
 import android.text.TextUtils;
 import android.util.AttributeSet;
+import android.view.ViewGroup.LayoutParams;
 import android.widget.ImageView;
-import android.widget.LinearLayout.LayoutParams;
 
 import com.android.volley.VolleyError;
 import com.android.volley.toolbox.ImageLoader.ImageContainer;
@@ -104,7 +104,8 @@ private void loadImageIfNecessary(final boolean isInLayoutPass) {
         int width = getWidth();
         int height = getHeight();
 
-        boolean isFullyWrapContent = getLayoutParams().height == LayoutParams.WRAP_CONTENT
+        boolean isFullyWrapContent = getLayoutParams() != null
+                && getLayoutParams().height == LayoutParams.WRAP_CONTENT
                 && getLayoutParams().width == LayoutParams.WRAP_CONTENT;
         // if the view's bounds aren't known yet, and this is not a wrap-content/wrap-content
         // view, hold off on loading the image.

File: src/com/android/volley/toolbox/NetworkImageView.java
Patch:
@@ -18,8 +18,8 @@
 import android.content.Context;
 import android.text.TextUtils;
 import android.util.AttributeSet;
+import android.view.ViewGroup.LayoutParams;
 import android.widget.ImageView;
-import android.widget.LinearLayout.LayoutParams;
 
 import com.android.volley.VolleyError;
 import com.android.volley.toolbox.ImageLoader.ImageContainer;
@@ -104,7 +104,8 @@ private void loadImageIfNecessary(final boolean isInLayoutPass) {
         int width = getWidth();
         int height = getHeight();
 
-        boolean isFullyWrapContent = getLayoutParams().height == LayoutParams.WRAP_CONTENT
+        boolean isFullyWrapContent = getLayoutParams() != null
+                && getLayoutParams().height == LayoutParams.WRAP_CONTENT
                 && getLayoutParams().width == LayoutParams.WRAP_CONTENT;
         // if the view's bounds aren't known yet, and this is not a wrap-content/wrap-content
         // view, hold off on loading the image.

File: src/com/android/volley/toolbox/NetworkImageView.java
Patch:
@@ -18,8 +18,8 @@
 import android.content.Context;
 import android.text.TextUtils;
 import android.util.AttributeSet;
+import android.view.ViewGroup.LayoutParams;
 import android.widget.ImageView;
-import android.widget.LinearLayout.LayoutParams;
 
 import com.android.volley.VolleyError;
 import com.android.volley.toolbox.ImageLoader.ImageContainer;
@@ -104,7 +104,8 @@ private void loadImageIfNecessary(final boolean isInLayoutPass) {
         int width = getWidth();
         int height = getHeight();
 
-        boolean isFullyWrapContent = getLayoutParams().height == LayoutParams.WRAP_CONTENT
+        boolean isFullyWrapContent = getLayoutParams() != null
+                && getLayoutParams().height == LayoutParams.WRAP_CONTENT
                 && getLayoutParams().width == LayoutParams.WRAP_CONTENT;
         // if the view's bounds aren't known yet, and this is not a wrap-content/wrap-content
         // view, hold off on loading the image.

File: src/com/android/volley/toolbox/NetworkImageView.java
Patch:
@@ -18,8 +18,8 @@
 import android.content.Context;
 import android.text.TextUtils;
 import android.util.AttributeSet;
+import android.view.ViewGroup.LayoutParams;
 import android.widget.ImageView;
-import android.widget.LinearLayout.LayoutParams;
 
 import com.android.volley.VolleyError;
 import com.android.volley.toolbox.ImageLoader.ImageContainer;
@@ -104,7 +104,8 @@ private void loadImageIfNecessary(final boolean isInLayoutPass) {
         int width = getWidth();
         int height = getHeight();
 
-        boolean isFullyWrapContent = getLayoutParams().height == LayoutParams.WRAP_CONTENT
+        boolean isFullyWrapContent = getLayoutParams() != null
+                && getLayoutParams().height == LayoutParams.WRAP_CONTENT
                 && getLayoutParams().width == LayoutParams.WRAP_CONTENT;
         // if the view's bounds aren't known yet, and this is not a wrap-content/wrap-content
         // view, hold off on loading the image.

