File: MyPerf4J-Base/src/test/java/cn/myperf4j/base/util/concurrent/AtomicIntHashCounterTest.java
Patch:
@@ -162,7 +162,7 @@ public void testSingleThreadV2() {
 
     @Test
     public void testMultiThread4HighRace() throws InterruptedException, BrokenBarrierException {
-        final int threadCnt = Runtime.getRuntime().availableProcessors() - 2;
+        final int threadCnt = Math.max(Runtime.getRuntime().availableProcessors() - 2, 1);
         final ExecutorService executor = Executors.newFixedThreadPool(threadCnt);
         int failureTimes = 0;
 //        final int testTimes = 1024 * 1024;
@@ -184,7 +184,7 @@ public void testMultiThread4HighRace() throws InterruptedException, BrokenBarrie
 
     @Test
     public void testMultiThread4LowRace() throws InterruptedException, BrokenBarrierException {
-        final int threadCnt = Runtime.getRuntime().availableProcessors() - 2;
+        final int threadCnt = Math.max(Runtime.getRuntime().availableProcessors() - 2, 1);
         final ExecutorService executor = Executors.newFixedThreadPool(threadCnt);
         int failureTimes = 0;
 //        final int testTimes = 1024 * 1024;

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/util/concurrent/FixedAtomicIntHashCounter.java
Patch:
@@ -14,6 +14,7 @@
 /**
  * Created by LinShunkang on 2022/03/19
  */
+@Deprecated
 public final class FixedAtomicIntHashCounter implements AtomicIntHashCounter, Serializable {
 
     private static final long serialVersionUID = 6187812026945356420L;

File: MyPerf4J-Base/src/test/java/cn/myperf4j/base/util/concurrent/ScalableAtomicIntHashCounterTest.java
Patch:
@@ -144,15 +144,15 @@ private void mode1(AtomicIntHashCounter intMap,
     @Test
     public void testSingleThreadV2() {
         final AtomicIntHashCounter intMap = new ScalableAtomicIntHashCounter(16);
-        for (int i = 1; i < 10240; i++) {
+        for (int i = 1; i < 1024; i++) {
             intMap.incrementAndGet(i);
         }
         System.out.println(intMap);
     }
 
     @Test
     public void testMultiThread4HighRace() throws InterruptedException, BrokenBarrierException {
-        final int threadCnt = Runtime.getRuntime().availableProcessors();
+        final int threadCnt = Runtime.getRuntime().availableProcessors() - 2;
         final ExecutorService executor = Executors.newFixedThreadPool(threadCnt);
         int failureTimes = 0;
 //        final int testTimes = 1024 * 1024;
@@ -174,7 +174,7 @@ public void testMultiThread4HighRace() throws InterruptedException, BrokenBarrie
 
     @Test
     public void testMultiThread4LowRace() throws InterruptedException, BrokenBarrierException {
-        final int threadCnt = Runtime.getRuntime().availableProcessors();
+        final int threadCnt = Runtime.getRuntime().availableProcessors() - 2;
         final ExecutorService executor = Executors.newFixedThreadPool(threadCnt);
         int failureTimes = 0;
 //        final int testTimes = 1024 * 1024;

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/util/concurrent/FixedAtomicIntHashCounter.java
Patch:
@@ -14,6 +14,7 @@
 /**
  * Created by LinShunkang on 2022/03/19
  */
+@Deprecated
 public final class FixedAtomicIntHashCounter implements AtomicIntHashCounter, Serializable {
 
     private static final long serialVersionUID = 6187812026945356420L;

File: MyPerf4J-Base/src/test/java/cn/myperf4j/base/util/concurrent/ScalableAtomicIntHashCounterTest.java
Patch:
@@ -144,15 +144,15 @@ private void mode1(AtomicIntHashCounter intMap,
     @Test
     public void testSingleThreadV2() {
         final AtomicIntHashCounter intMap = new ScalableAtomicIntHashCounter(16);
-        for (int i = 1; i < 10240; i++) {
+        for (int i = 1; i < 1024; i++) {
             intMap.incrementAndGet(i);
         }
         System.out.println(intMap);
     }
 
     @Test
     public void testMultiThread4HighRace() throws InterruptedException, BrokenBarrierException {
-        final int threadCnt = Runtime.getRuntime().availableProcessors();
+        final int threadCnt = Runtime.getRuntime().availableProcessors() - 2;
         final ExecutorService executor = Executors.newFixedThreadPool(threadCnt);
         int failureTimes = 0;
 //        final int testTimes = 1024 * 1024;
@@ -174,7 +174,7 @@ public void testMultiThread4HighRace() throws InterruptedException, BrokenBarrie
 
     @Test
     public void testMultiThread4LowRace() throws InterruptedException, BrokenBarrierException {
-        final int threadCnt = Runtime.getRuntime().availableProcessors();
+        final int threadCnt = Runtime.getRuntime().availableProcessors() - 2;
         final ExecutorService executor = Executors.newFixedThreadPool(threadCnt);
         int failureTimes = 0;
 //        final int testTimes = 1024 * 1024;

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/util/concurrent/AtomicIntArray.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * Created by LinShunkang on 2020/11/24
  */
-public final class MyAtomicIntArray implements Serializable {
+public final class AtomicIntArray implements Serializable {
 
     private static final long serialVersionUID = 4512166855752664301L;
 
@@ -41,7 +41,7 @@ private static long byteOffset(int i) {
      *
      * @param length the length of the array
      */
-    public MyAtomicIntArray(int length) {
+    public AtomicIntArray(int length) {
         array = new int[length];
     }
 

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/config/FilterConfig.java
Patch:
@@ -77,13 +77,13 @@ public String toString() {
     }
 
     public static FilterConfig loadFilterConfig() {
-        String includePackages = getStr(PACKAGES_INCLUDE);
+        final String includePackages = getStr(PACKAGES_INCLUDE);
         if (StrUtils.isBlank(includePackages)) {
             throw new IllegalArgumentException(PACKAGES_INCLUDE.key() + " or " + PACKAGES_INCLUDE.legacyKey() +
                     " is required!!!");
         }
 
-        FilterConfig config = new FilterConfig();
+        final FilterConfig config = new FilterConfig();
         config.includePackages(includePackages);
         config.excludeClassLoaders(getStr(CLASS_LOADERS_EXCLUDE));
         config.excludePackages(getStr(PACKAGES_EXCLUDE));

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/config/HttpServerConfig.java
Patch:
@@ -12,6 +12,7 @@
 import static cn.myperf4j.base.constant.PropertyKeys.HttpServer.MIN_WORKERS;
 import static cn.myperf4j.base.constant.PropertyKeys.HttpServer.PORT;
 import static cn.myperf4j.base.util.NumUtils.parseInt;
+import static cn.myperf4j.base.util.StrUtils.isBlank;
 
 /**
  * Created by LinShunkang on 2020/09/13
@@ -92,7 +93,7 @@ public String toString() {
 
     public static HttpServerConfig loadHttpServerConfig() {
         String portStr = getStr(PORT);
-        if (portStr == null) {
+        if (isBlank(portStr)) {
             portStr = "2048,2000,2040";
             Logger.info(PORT.key() + " is not configured, so use '" + portStr + "' as default.");
         }

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/config/InfluxDbConfig.java
Patch:
@@ -1,7 +1,6 @@
 package cn.myperf4j.base.config;
 
 import cn.myperf4j.base.util.Logger;
-import cn.myperf4j.base.util.StrUtils;
 
 import static cn.myperf4j.base.config.MyProperties.getInt;
 import static cn.myperf4j.base.config.MyProperties.getStr;
@@ -12,6 +11,7 @@
 import static cn.myperf4j.base.constant.PropertyKeys.InfluxDB.PORT;
 import static cn.myperf4j.base.constant.PropertyKeys.InfluxDB.READ_TIMEOUT;
 import static cn.myperf4j.base.constant.PropertyKeys.InfluxDB.USERNAME;
+import static cn.myperf4j.base.util.StrUtils.isBlank;
 
 /**
  * Created by LinShunkang on 2020/05/24
@@ -103,7 +103,7 @@ public String toString() {
 
     public static InfluxDbConfig loadInfluxDbConfig() {
         String host = getStr(HOST);
-        if (StrUtils.isBlank(host)) {
+        if (isBlank(host)) {
             host = "127.0.0.1";
             Logger.info(HOST.key() + " is not configured, so use '127.0.0.1' as default host.");
         }

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/config/MetricsConfig.java
Patch:
@@ -28,7 +28,7 @@
 import static cn.myperf4j.base.constant.PropertyValues.Metrics.EXPORTER_LOG_STDOUT;
 import static cn.myperf4j.base.constant.PropertyValues.Metrics.LOG_ROLLING_DAILY;
 import static cn.myperf4j.base.constant.PropertyValues.Metrics.STDOUT_METRICS_FILE;
-import static cn.myperf4j.base.util.StrUtils.isNotEmpty;
+import static cn.myperf4j.base.util.StrUtils.isNotBlank;
 
 /**
  * Created by LinShunkang on 2020/05/24
@@ -234,7 +234,7 @@ public static MetricsConfig loadMetricsConfig() {
 
     private static String getExporter() {
         final String exporter = getStr(EXPORTER.key());
-        if (isNotEmpty(exporter)) {
+        if (isNotBlank(exporter)) {
             return exporter;
         }
 

File: MyPerf4J-Benchmark/src/main/java/cn/myperf4j/bench/metric/MethodMetricsBench.java
Patch:
@@ -71,15 +71,15 @@ public void setup() {
 
     @Benchmark
     public MethodMetrics roughRecorder() {
-        return MethodMetricsCalculator.calPerfStats(roughRecorder,
+        return MethodMetricsCalculator.calMetrics(roughRecorder,
                 roughMethodTag,
                 recorders.getStartTime(),
                 recorders.getStopTime());
     }
 
     @Benchmark
     public MethodMetrics accurateRecorder() {
-        return MethodMetricsCalculator.calPerfStats(accurateRecorder,
+        return MethodMetricsCalculator.calMetrics(accurateRecorder,
                 accurateMethodTag,
                 recorders.getStartTime(),
                 recorders.getStopTime());

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/util/concurrent/MyAtomicIntArray.java
Patch:
@@ -139,6 +139,6 @@ public int addAndGet(int i, int delta) {
 
     public void reset() {
         final int[] array = this.array;
-        unsafe.setMemory(array, byteOffset(0), array.length * scale, (byte) 0);
+        unsafe.setMemory(array, byteOffset(0), (long) array.length * scale, (byte) 0);
     }
 }

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/util/concurrent/MyAtomicIntArray.java
Patch:
@@ -139,6 +139,6 @@ public int addAndGet(int i, int delta) {
 
     public void reset() {
         final int[] array = this.array;
-        unsafe.setMemory(array, byteOffset(0), (long) array.length * scale, ((byte) (0)));
+        unsafe.setMemory(array, byteOffset(0), (long) array.length * scale, (byte) 0);
     }
 }

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/util/concurrent/MyAtomicIntArray.java
Patch:
@@ -139,6 +139,6 @@ public int addAndGet(int i, int delta) {
 
     public void reset() {
         final int[] array = this.array;
-        unsafe.setMemory(array, byteOffset(0), array.length * scale, (byte) 0);
+        unsafe.setMemory(array, byteOffset(0), (long) array.length * scale, ((byte) (0)));
     }
 }

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/util/concurrent/ExecutorManager.java
Patch:
@@ -31,6 +31,7 @@ public static void stopAll(long timeout, TimeUnit unit) {
                 executorService.awaitTermination(timeout, unit);
             } catch (InterruptedException e) {
                 Logger.error("ExecutorManager.stopAll()", e);
+                Thread.currentThread().interrupt();
             }
         }
     }

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/util/concurrent/ExecutorManager.java
Patch:
@@ -31,6 +31,7 @@ public static void stopAll(long timeout, TimeUnit unit) {
                 executorService.awaitTermination(timeout, unit);
             } catch (InterruptedException e) {
                 Logger.error("ExecutorManager.stopAll()", e);
+                Thread.currentThread().interrupt();
             }
         }
     }

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/config/HttpServerConfig.java
Patch:
@@ -116,6 +116,6 @@ private static void completePorts(final HttpServerConfig config, final String po
 
         config.setPreferencePort(parseInt(ports.get(0), 2048));
         config.setMinPort(parseInt(ports.get(1), 2000));
-        config.setMaxPort(parseInt(ports.get(1), 2040));
+        config.setMaxPort(parseInt(ports.get(2), 2040));
     }
 }

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/config/HttpServerConfig.java
Patch:
@@ -116,6 +116,6 @@ private static void completePorts(final HttpServerConfig config, final String po
 
         config.setPreferencePort(parseInt(ports.get(0), 2048));
         config.setMinPort(parseInt(ports.get(1), 2000));
-        config.setMaxPort(parseInt(ports.get(1), 2040));
+        config.setMaxPort(parseInt(ports.get(2), 2040));
     }
 }

File: MyPerf4J-ASM/src/main/java/cn/myperf4j/asm/ASMBootstrap.java
Patch:
@@ -27,7 +27,7 @@ public static ASMBootstrap getInstance() {
     public AbstractRecorderMaintainer doInitRecorderMaintainer() {
         RecorderConfig recorderConf = ProfilingConfig.recorderConfig();
         ASMRecorderMaintainer maintainer = ASMRecorderMaintainer.getInstance();
-        if (maintainer.initial(processor, recorderConf.accurateMode(), recorderConf.backupCount())) {
+        if (maintainer.initial(methodMetricsExporter, recorderConf.accurateMode(), recorderConf.backupCount())) {
             return maintainer;
         }
         return null;

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/config/InfluxDbConfig.java
Patch:
@@ -122,8 +122,8 @@ public static InfluxDbConfig loadInfluxDbConfig() {
         config.database(getStr(DATABASE));
         config.username(getStr(USERNAME));
         config.password(getStr(PASSWORD));
-        config.connectTimeout(getInt(CONN_TIMEOUT, 1000));
-        config.readTimeout(getInt(READ_TIMEOUT, 3000));
+        config.connectTimeout(getInt(CONN_TIMEOUT, 3000));
+        config.readTimeout(getInt(READ_TIMEOUT, 5000));
         return config;
     }
 }

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/config/InfluxDbConfig.java
Patch:
@@ -122,8 +122,8 @@ public static InfluxDbConfig loadInfluxDbConfig() {
         config.database(getStr(DATABASE));
         config.username(getStr(USERNAME));
         config.password(getStr(PASSWORD));
-        config.connectTimeout(getInt(CONN_TIMEOUT, 1000));
-        config.readTimeout(getInt(READ_TIMEOUT, 3000));
+        config.connectTimeout(getInt(CONN_TIMEOUT, 3000));
+        config.readTimeout(getInt(READ_TIMEOUT, 5000));
         return config;
     }
 }

File: MyPerf4J-Core/src/main/java/cn/myperf4j/core/MethodMetricsHistogram.java
Patch:
@@ -90,7 +90,7 @@ private static void writeProfilingInfo(MethodTagMaintainer tagMaintainer,
         fileWriter.write(methodTag.getFullDesc());
         fileWriter.write('=');
 
-        fileWriter.write(mostTimeThreshold + ':' + calOutThresholdCount(mostTimeThreshold));
+        fileWriter.write(mostTimeThreshold + ":" + calOutThresholdCount(mostTimeThreshold));
         fileWriter.newLine();
     }
 

File: MyPerf4J-Core/src/main/java/cn/myperf4j/core/recorder/RoughRecorder.java
Patch:
@@ -10,7 +10,7 @@
  */
 
 /**
- * 默认使用该类作为 MyPerf4J 的 Recorder
+ * MyPerf4J默认使用的是 AccurateRecorder，如果需要使用 RoughRecorder，则在配置文件里加上 RecorderMode=rough
  * <p>
  * 该类用于粗略存储某一个方法在指定时间片内的响应时间
  * 为了进一步减小内存占用，只利用数组方式:
@@ -53,8 +53,8 @@ public void recordTime(long startNanoTime, long endNanoTime) {
     }
 
     @Override
-    public int fillSortedRecords(IntBuf intBuf) {
-        int totalCount = 0;
+    public long fillSortedRecords(IntBuf intBuf) {
+        long totalCount = 0L;
         AtomicIntegerArray timingArr = this.timingArr;
         for (int i = 0; i < timingArr.length(); ++i) {
             int count = timingArr.get(i);

File: MyPerf4J-Core/src/main/java/cn/myperf4j/core/recorder/RoughRecorder.java
Patch:
@@ -10,7 +10,7 @@
  */
 
 /**
- * 默认使用该类作为 MyPerf4J 的 Recorder
+ * MyPerf4J默认使用的是 AccurateRecorder，如果需要使用 RoughRecorder，则在配置文件里加上 RecorderMode=rough
  * <p>
  * 该类用于粗略存储某一个方法在指定时间片内的响应时间
  * 为了进一步减小内存占用，只利用数组方式:
@@ -53,8 +53,8 @@ public void recordTime(long startNanoTime, long endNanoTime) {
     }
 
     @Override
-    public int fillSortedRecords(IntBuf intBuf) {
-        int totalCount = 0;
+    public long fillSortedRecords(IntBuf intBuf) {
+        long totalCount = 0L;
         AtomicIntegerArray timingArr = this.timingArr;
         for (int i = 0; i < timingArr.length(); ++i) {
             int count = timingArr.get(i);

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/metric/formatter/impl/DefaultMethodMetricsFormatter.java
Patch:
@@ -21,7 +21,7 @@ public String format(List<MethodMetrics> methodMetricsList, long startMillis, lo
         String dataTitleFormat = "%-" + maxApiLength + "s%13s%13s%9s%9s%9s%9s%9s%10s%9s%9s%9s%9s%9s%9s%9s%n";
         StringBuilder sb = new StringBuilder((methodMetricsList.size() + 2) * (9 * 11 + 1 + maxApiLength));
         sb.append("MyPerf4J Method Metrics [").append(DateFormatUtils.format(startMillis)).append(", ").append(DateFormatUtils.format(stopMillis)).append(']').append(LINE_SEPARATOR);
-        sb.append(String.format(dataTitleFormat, "Method[" + methodMetricsList.size() + "]", "Type", "Level", "RPS", "Avg(ms)", "Min(ms)", "Max(ms)", "StdDev", "Count", "TP50", "TP90", "TP95", "TP99", "TP999", "TP9999",  "TP100"));
+        sb.append(String.format(dataTitleFormat, "Method[" + methodMetricsList.size() + "]", "Type", "Level", "RPS", "Avg(ms)", "Min(ms)", "Max(ms)", "StdDev", "Count", "TP50", "TP90", "TP95", "TP99", "TP999", "TP9999", "TP100"));
         if (methodMetricsList.isEmpty()) {
             return sb.toString();
         }

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/metric/collector/JvmMemoryCollector.java
Patch:
@@ -45,7 +45,7 @@ public static JvmMemoryMetrics collectMemoryMetrics() {
             } else if (poolName.endsWith("Survivor Space")) {
                 survivorUsed = usage.getUsed() >> 10;
                 survivorMax = usage.getMax() >> 10;
-            } else if(poolName.endsWith("ZHeap")){
+            } else if (poolName.endsWith("ZHeap")) {
                 zHeapUsed = usage.getUsed() >> 10;
                 zHeapMax = usage.getMax() >> 10;
             }

File: MyPerf4J-Base/src/test/java/cn/myperf4j/base/test/ProfilingFilterTest.java
Patch:
@@ -28,6 +28,8 @@ public void test() {
         Assert.assertTrue(ProfilingFilter.isNotNeedInjectMethod("hello"));
         Assert.assertFalse(ProfilingFilter.isNotNeedInjectMethod("assertFalse"));
 
+        Assert.assertTrue(ProfilingFilter.isNotNeedInjectMethod("hello(ClassA$ClassB)"));
+
         Assert.assertTrue(ProfilingFilter.isNotNeedInjectClassLoader("org.apache.catalina.loader.WebappClassLoader"));
         Assert.assertFalse(ProfilingFilter.isNotNeedInjectClassLoader("org.springframework.boot.loader.LaunchedURLClassLoader"));
     }

File: MyPerf4J-Core/src/main/java/cn/myperf4j/core/AbstractBootstrap.java
Patch:
@@ -206,7 +206,7 @@ private void initTimeSliceConfig(ProfilingConfig config) {
     }
 
     private void initRecorderConfig(ProfilingConfig config) {
-        config.setRecorderMode(MyProperties.getStr(PropertyKeys.RECORDER_MODE, PropertyValues.RECORDER_MODE_ROUGH));
+        config.setRecorderMode(MyProperties.getStr(PropertyKeys.RECORDER_MODE, PropertyValues.RECORDER_MODE_ACCURATE));
         config.setBackupRecorderCount(MyProperties.getInt(PropertyKeys.BACKUP_RECORDERS_COUNT, PropertyValues.MIN_BACKUP_RECORDERS_COUNT));
     }
 
@@ -453,7 +453,7 @@ private Scheduler buildSysGenProfilingScheduler() {
             @Override
             public void run(long lastTimeSliceStartTime, long millTimeSlice) {
                 RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean();
-                if (System.currentTimeMillis() - bean.getStartTime() >= 60 * 60 * 1000) {//60min
+                if (bean.getUptime() >= 60 * 60 * 1000) {//60min
                     MethodMetricsHistogram.buildSysGenProfilingFile();
                 }
             }

File: MyPerf4J-ASM/src/main/java/cn/myperf4j/asm/aop/ProfilingMethodVisitor.java
Patch:
@@ -46,7 +46,7 @@ private MethodTag getMethodTag(String innerClassName, String methodName, String
         int idx = innerClassName.replace('.', '/').lastIndexOf('/');
         String simpleClassName = innerClassName.substring(idx + 1);
         String methodParamDesc = profilingConfig.isShowMethodParams() ? "(" + TypeDescUtils.getMethodParamsDesc(desc) + ")" : "";
-        return MethodTag.getInstance(simpleClassName, methodName, methodParamDesc);
+        return MethodTag.getGeneralInstance(simpleClassName, methodName, methodParamDesc);
     }
 
     @Override

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/metric/processor/influxdb/InfluxDBMethodMetricsProcessor.java
Patch:
@@ -52,6 +52,7 @@ private String createLineProtocol(MethodMetrics methodMetrics, long startNanos,
                 .append(",AppName=").append(ProfilingConfig.getInstance().getAppName())
                 .append(",ClassName=").append(methodTag.getClassName())
                 .append(",Method=").append(methodDesc)
+                .append(",Type=").append(methodTag.getType())
                 .append(" RPS=").append(methodMetrics.getRPS()).append("i")
                 .append(",Avg=").append(NumFormatUtils.getFormatStr(methodMetrics.getAvgTime()))
                 .append(",Min=").append(methodMetrics.getMinTime()).append("i")
@@ -74,6 +75,7 @@ private int getSuitSize(MethodMetrics methodMetrics) {
         MethodTag methodTag = methodMetrics.getMethodTag();
         return methodTag.getClassName().length()
                 + 8 + methodTag.getSimpleDesc().length()//Method
+                + 6 + methodTag.getType().length()//Type
                 + 5 + 6 + 1//RPS
                 + 5 + 7 //Avg
                 + 5 + 3 + 1//Min

File: MyPerf4J-Core/src/main/java/cn/myperf4j/core/MethodTagMaintainer.java
Patch:
@@ -74,7 +74,7 @@ public int addMethodTag(Method method) {
 
     private static MethodTag createMethodTag(Method method) {
         String methodParamDesc = profilingConfig.isShowMethodParams() ? "(" + TypeDescUtils.getMethodParamsDesc(method) + ")" : "";
-        return MethodTag.getInstance(method.getDeclaringClass().getSimpleName(), method.getName(), methodParamDesc);
+        return MethodTag.getDynamicProxyInstance(method.getDeclaringClass().getSimpleName(), method.getName(), methodParamDesc);
     }
 
     @Override

File: MyPerf4J-Core/src/test/java/MyPerf4J/MethodMetricsTest.java
Patch:
@@ -21,10 +21,10 @@ public void test() {
         Recorders recorders = new Recorders(new AtomicReferenceArray<Recorder>(10));
         MethodTagMaintainer methodTagMaintainer = MethodTagMaintainer.getInstance();
 
-        int methodId1 = methodTagMaintainer.addMethodTag(MethodTag.getInstance("Test", "test1", ""));
+        int methodId1 = methodTagMaintainer.addMethodTag(MethodTag.getGeneralInstance("Test", "test1", ""));
         recorders.setRecorder(methodId1, AccurateRecorder.getInstance(0, 100000, 50));
 
-        int methodId2 = methodTagMaintainer.addMethodTag(MethodTag.getInstance("Test", "test1", ""));
+        int methodId2 = methodTagMaintainer.addMethodTag(MethodTag.getGeneralInstance("Test", "test1", ""));
         recorders.setRecorder(methodId2, RoughRecorder.getInstance(0, 100000));
 
         testRecorder(recorders, methodTagMaintainer, methodId1);

File: MyPerf4J-Core/src/test/java/MyPerf4J/RecorderBenchmarkTest.java
Patch:
@@ -20,7 +20,7 @@ public static void main(String[] args) {
         recorderArr.set(0, recorder);
 
         Recorders recorders = new Recorders(recorderArr);
-        MethodTag methodTag = MethodTag.getInstance("", "", "");
+        MethodTag methodTag = MethodTag.getGeneralInstance("", "", "");
 
         int times = 100000000;
         singleThreadBenchmark(recorders, times / 10);//warm up

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/config/ProfilingFilter.java
Patch:
@@ -48,7 +48,6 @@ public class ProfilingFilter {
         excludePackagePrefix.add("javax/");
         excludePackagePrefix.add("sun/");
         excludePackagePrefix.add("com/sun/");
-        excludePackagePrefix.add("org/");
         excludePackagePrefix.add("com/intellij/");
 
         // 不注入MyPerf4J本身

File: MyPerf4J-ASM/src/main/java/cn/myperf4j/asm/aop/ProfilingTransformer.java
Patch:
@@ -36,7 +36,7 @@ public byte[] transform(ClassLoader loader,
             Logger.info("ProfilingTransformer.transform(" + loader + ", " + className + ", classBeingRedefined, protectionDomain, " + classFileBuffer.length + ")...");
             return getBytes(loader, className, classFileBuffer);
         } catch (Throwable e) {
-            Logger.error("ProfilingTransformer.transform(" + loader + ", " + className + ", " + classBeingRedefined + ", " + protectionDomain + ", " + classFileBuffer.length + ")", e);
+            Logger.error("ProfilingTransformer.transform(" + loader + ", " + className + ", " + classBeingRedefined + ", protectionDomain, " + classFileBuffer.length + ")", e);
         }
         return classFileBuffer;
     }

File: MyPerf4J-Base/src/main/java/cn/myperf4j/base/util/Logger.java
Patch:
@@ -60,7 +60,7 @@ public static void error(String msg) {
 
     public static void error(String msg, Throwable throwable) {
         synchronized (System.err) {
-            System.err.println(getPrefix(ERROR_LEVEL) + msg);
+            System.err.println(getPrefix(ERROR_LEVEL) + msg + " " + throwable.getMessage());
             throwable.printStackTrace();
         }
     }

File: MyPerf4J-Core/src/main/java/cn/myperf4j/core/config/ProfilingFilter.java
Patch:
@@ -78,7 +78,7 @@ public static boolean isNotNeedInject(String innerClassName) {
     }
 
     public static void addExcludePackage(String pkg) {
-        if (pkg == null) {
+        if (pkg == null || pkg.isEmpty()) {
             return;
         }
 
@@ -103,7 +103,7 @@ public static boolean isNeedInject(String innerClassName) {
     }
 
     public static void addIncludePackage(String pkg) {
-        if (pkg == null) {
+        if (pkg == null || pkg.isEmpty()) {
             return;
         }
 

File: MyPerf4J-ASM/src/test/java/MyPerf4J/test2/Test2.java
Patch:
@@ -22,10 +22,10 @@ public static void main(String[] args) throws IOException {
 
     private static void test2() throws IOException {
         ClassReader cr = new ClassReader(Foo2.class.getName());
-        ClassWriter cw = new ClassWriter(cr, ClassWriter.COMPUTE_FRAMES);
+        ClassWriter cw = new ClassWriter(cr, ClassWriter.COMPUTE_MAXS);
 //        ClassVisitor cv = new ProfilerClassAdapter(cw, Foo2.class.getName(), true);
         ClassVisitor cv = new PackageClassAdapter(cw, Foo2.class.getName(), false);
-        cr.accept(cv, ClassReader.EXPAND_FRAMES);
+        cr.accept(cv, ClassReader.SKIP_FRAMES);
 
         byte[] bytes = cw.toByteArray();
         rewriteClass(bytes);

File: MyPerf4J-ASM/src/main/java/cn/myperf4j/asm/aop/ProfilingTransformer.java
Patch:
@@ -40,7 +40,7 @@ public byte[] transform(ClassLoader loader,
 
             Logger.info("ProfilingTransformer.transform(" + loader + ", " + className + ", classBeingRedefined, protectionDomain, " + classFileBuffer.length + ")...");
             ClassReader cr = new ClassReader(classFileBuffer);
-            ClassWriter cw = new ClassWriter(cr, ClassWriter.COMPUTE_MAXS);
+            ClassWriter cw = new ClassWriter(cr, ClassWriter.COMPUTE_FRAMES);
             ClassVisitor cv = getClassVisitor(cw, className);
             cr.accept(cv, ClassReader.EXPAND_FRAMES);
 

File: MyPerf4J-ASM/src/test/java/MyPerf4J/test2/Test2.java
Patch:
@@ -22,7 +22,7 @@ public static void main(String[] args) throws IOException {
 
     private static void test2() throws IOException {
         ClassReader cr = new ClassReader(Foo2.class.getName());
-        ClassWriter cw = new ClassWriter(cr, ClassWriter.COMPUTE_MAXS);
+        ClassWriter cw = new ClassWriter(cr, ClassWriter.COMPUTE_FRAMES);
 //        ClassVisitor cv = new ProfilerClassAdapter(cw, Foo2.class.getName(), true);
         ClassVisitor cv = new PackageClassAdapter(cw, Foo2.class.getName(), false);
         cr.accept(cv, ClassReader.EXPAND_FRAMES);

File: MyPerf4J-ASM/src/main/java/cn/myperf4j/asm/aop/pkg/PackageClassAdapter.java
Patch:
@@ -78,7 +78,7 @@ public MethodVisitor visitMethod(int access,
     }
 
     private boolean isNeedVisit(int access, String name) {
-        if ((access & ACC_PRIVATE) != 0 && ProfilingConfig.getInstance().isAsmExcludePrivateMethod()) {
+        if ((access & ACC_PRIVATE) != 0 && ProfilingConfig.getInstance().isExcludePrivateMethod()) {
             return false;
         }
 

File: MyPerf4J-ASM/src/main/java/cn/myperf4j/asm/aop/profiler/ProfilerClassAdapter.java
Patch:
@@ -69,7 +69,7 @@ public MethodVisitor visitMethod(int access,
                                      String signature,
                                      String[] exceptions) {
         Logger.debug("ProfilerClassAdapter.visitMethod(" + access + ", " + name + ", " + desc + ", " + signature + ", " + Arrays.toString(exceptions) + ")");
-        if (isInterface || isNeedVisit(access, name)) {
+        if (isInterface || !isNeedVisit(access, name)) {
             return super.visitMethod(access, name, desc, signature, exceptions);
         }
 
@@ -86,7 +86,7 @@ public MethodVisitor visitMethod(int access,
     }
 
     private boolean isNeedVisit(int access, String name) {
-        if ((access & ACC_PRIVATE) != 0 && ProfilingConfig.getInstance().isAsmExcludePrivateMethod()) {
+        if ((access & ACC_PRIVATE) != 0 && ProfilingConfig.getInstance().isExcludePrivateMethod()) {
             return false;
         }
 

File: MyPerf4J-ASM/src/test/java/MyPerf4J/test2/MyPerfStatsProcessor.java
Patch:
@@ -1,7 +1,7 @@
 package MyPerf4J.test2;
 
 import cn.myperf4j.base.PerfStats;
-import cn.myperf4j.base.PerfStatsFormatter;
+import cn.myperf4j.core.util.PerfStatsFormatter;
 import cn.myperf4j.base.PerfStatsProcessor;
 
 import java.util.List;

File: MyPerf4J-Core/src/main/java/cn/myperf4j/core/util/DateUtils.java
Patch:
@@ -1,4 +1,4 @@
-package cn.myperf4j.base.util;
+package cn.myperf4j.core.util;
 
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;

File: MyPerf4J-Core/src/main/java/cn/myperf4j/core/util/Logger.java
Patch:
@@ -1,7 +1,5 @@
 package cn.myperf4j.core.util;
 
-import cn.myperf4j.base.util.DateUtils;
-
 import java.util.Date;
 
 /**

File: MyPerf4J-Core/src/main/java/cn/myperf4j/core/util/MyPerfStatsProcessor.java
Patch:
@@ -2,7 +2,6 @@
 
 
 import cn.myperf4j.base.PerfStats;
-import cn.myperf4j.base.PerfStatsFormatter;
 import cn.myperf4j.base.PerfStatsProcessor;
 
 import java.util.List;

File: MyPerf4J-Core/src/main/java/cn/myperf4j/core/util/PerfStatsCalculator.java
Patch:
@@ -90,14 +90,15 @@ private static int[] getTotalTimeAndTotalCount(int[] sortedRecords) {
 
         for (int i = 0, length = sortedRecords.length; i < length; i = i + 2) {
             int timeCost = sortedRecords[i];
+            int count = sortedRecords[i + 1];
 
             //sortedRecords中只有第0位的响应时间可以为0
             if (i > 0 && timeCost <= 0) {
                 break;
             }
 
-            result[0] += timeCost;
-            result[1] += sortedRecords[i + 1];//count
+            result[0] += timeCost * count;
+            result[1] += count;
         }
         return result;
     }

File: MyPerf4J-Core/src/main/java/cn/myperf4j/core/util/PerfStatsFormatter.java
Patch:
@@ -1,7 +1,7 @@
-package cn.myperf4j.base;
+package cn.myperf4j.core.util;
 
 
-import cn.myperf4j.base.util.DateUtils;
+import cn.myperf4j.base.PerfStats;
 
 import java.util.List;
 

File: src/main/java/cn/perf4j/aop/ProfilerAspect.java
Patch:
@@ -23,7 +23,7 @@ public class ProfilerAspect implements InitializingBean/*, MethodInterceptor*/ {
 
     private RecorderContainer recorderContainer;
 
-    @Around("@within(cn.perf4j.aop.Profiler) || @annotation(cn.perf4j.aop.Profiler)")
+    @Around("(@within(cn.perf4j.aop.Profiler) || @annotation(cn.perf4j.aop.Profiler)) && !(@within(cn.perf4j.aop.NonProfiler) || @annotation(cn.perf4j.aop.NonProfiler))")
     public Object doProfiling(ProceedingJoinPoint joinPoint) throws Throwable {
         long startNano = System.nanoTime();
         String api = null;

File: src/main/java/cn/perf4j/ShutdownHook.java
Patch:
@@ -1,6 +1,7 @@
 package cn.perf4j;
 
 import cn.perf4j.util.Logger;
+import cn.perf4j.util.PerfStatsCalculator;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.util.Assert;
 

File: src/test/java/cn/perf4j/test/recorder/RecorderBenchmarkTest.java
Patch:
@@ -1,6 +1,7 @@
 package cn.perf4j.test.recorder;
 
 import cn.perf4j.*;
+import cn.perf4j.util.PerfStatsCalculator;
 
 import java.util.concurrent.*;
 

File: src/test/java/cn/perf4j/test/profiler/ProfilerApi.java
Patch:
@@ -1,4 +1,4 @@
-package cn.perf4j.test;
+package cn.perf4j.test.profiler;
 
 /**
  * Created by LinShunkang on 2018/3/11

File: src/test/java/cn/perf4j/test/recorder/RecorderTest.java
Patch:
@@ -1,4 +1,4 @@
-package cn.perf4j.test;
+package cn.perf4j.test.recorder;
 
 import cn.perf4j.*;
 import cn.perf4j.utils.StopWatch;
@@ -9,7 +9,7 @@
 /**
  * Created by LinShunkang on 2018/3/11
  */
-public class TimingRecorderTest {
+public class RecorderTest {
 
     public static void main(String[] args) throws InterruptedException {
         AbstractRecorder recorder = Recorder.getInstance(100, 10);

