File: app-mvvm/src/main/java/uk/ivanc/archimvvm/viewmodel/RepositoryViewModel.java
Patch:
@@ -88,7 +88,7 @@ public void destroy() {
         if (subscription != null && !subscription.isUnsubscribed()) subscription.unsubscribe();
     }
 
-    @BindingAdapter({"bind:imageUrl"})
+    @BindingAdapter({"imageUrl"})
     public static void loadImage(ImageView view, String imageUrl) {
         Picasso.with(view.getContext())
                 .load(imageUrl)

File: app-mvp/src/main/java/uk/ivanc/archimvp/presenter/MainPresenter.java
Patch:
@@ -40,10 +40,11 @@ public void loadRepositories(String usernameEntered) {
 
         mainActivity.showProgressIndicator();
         if (subscription != null) subscription.unsubscribe();
-        GithubService githubService = ArchiApplication.get(mainActivity).getGithubService();
+        ArchiApplication application = ArchiApplication.get(mainActivity);
+        GithubService githubService = application.getGithubService();
         subscription = githubService.publicRepositories(username)
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribeOn(Schedulers.io())
+                .subscribeOn(application.defaultSubscribeScheduler())
                 .subscribe(new Subscriber<List<Repository>>() {
                     @Override
                     public void onCompleted() {

File: app-mvp/src/main/java/uk/ivanc/archimvp/presenter/RepositoryPresenter.java
Patch:
@@ -30,10 +30,11 @@ public void detachView() {
     }
 
     public void loadOwner(String userUrl) {
-        GithubService githubService = ArchiApplication.get(repositoryActivity).getGithubService();
+        ArchiApplication application = ArchiApplication.get(repositoryActivity);
+        GithubService githubService = application.getGithubService();
         subscription = githubService.userFromUrl(userUrl)
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribeOn(Schedulers.io())
+                .subscribeOn(application.defaultSubscribeScheduler())
                 .subscribe(new Action1<User>() {
                     @Override
                     public void call(User user) {

File: app-mvvm/src/main/java/uk/ivanc/archimvvm/viewmodel/ItemRepoViewModel.java
Patch:
@@ -16,7 +16,7 @@ public class ItemRepoViewModel extends BaseObservable implements ViewModel {
     private Repository repository;
     private Context context;
 
-    public ItemRepoViewModel( Context context, Repository repository) {
+    public ItemRepoViewModel(Context context, Repository repository) {
         this.repository = repository;
         this.context = context;
     }

File: app-mvvm/src/main/java/uk/ivanc/archimvvm/viewmodel/MainViewModel.java
Patch:
@@ -73,10 +73,11 @@ private void loadGithubRepos(String username) {
         recyclerViewVisibility.set(View.INVISIBLE);
         infoMessageVisibility.set(View.INVISIBLE);
         if (subscription != null && !subscription.isUnsubscribed()) subscription.unsubscribe();
-        GithubService githubService = ArchiApplication.get(context).getGithubService();
+        ArchiApplication application = ArchiApplication.get(context);
+        GithubService githubService = application.getGithubService();
         subscription = githubService.publicRepositories(username)
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribeOn(Schedulers.io())
+                .subscribeOn(application.defaultSubscribeScheduler())
                 .subscribe(new Subscriber<List<Repository>>() {
                     @Override
                     public void onCompleted() {

File: app/src/main/java/uk/ivanc/archi/MainActivity.java
Patch:
@@ -73,10 +73,11 @@ public void loadGithubRepos(String username) {
         progressBar.setVisibility(View.VISIBLE);
         reposRecycleView.setVisibility(View.GONE);
         infoTextView.setVisibility(View.GONE);
-        GithubService githubService = ArchiApplication.get(this).getGithubService();
+        ArchiApplication application = ArchiApplication.get(this);
+        GithubService githubService = application.getGithubService();
         subscription = githubService.publicRepositories(username)
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribeOn(Schedulers.io())
+                .subscribeOn(application.defaultSubscribeScheduler())
                 .subscribe(new Subscriber<List<Repository>>() {
                     @Override
                     public void onCompleted() {

File: app/src/main/java/uk/ivanc/archi/RepositoryActivity.java
Patch:
@@ -103,10 +103,11 @@ private void bindOwnerData(final User owner) {
 
 
     private void loadFullUser(String url) {
-        GithubService githubService = ArchiApplication.get(this).getGithubService();
+        ArchiApplication application = ArchiApplication.get(this);
+        GithubService githubService = application.getGithubService();
         subscription = githubService.userFromUrl(url)
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribeOn(Schedulers.io())
+                .subscribeOn(application.defaultSubscribeScheduler())
                 .subscribe(new Action1<User>() {
                     @Override
                     public void call(User user) {

