File: bundles/binding/org.openhab.binding.garadget/src/main/java/org/openhab/binding/garadget/internal/GaradgetBinding.java
Patch:
@@ -130,6 +130,9 @@ public void modified(final Map<String, Object> configuration) {
         if (isNotBlank(username) && isNotBlank(password)) {
             connection = new Connection(username, password, timeout);
             connection.login();
+        }
+
+        if (connection.isLoggedIn()) {
             // Poll at the earliest opportunity
             schedulePoll(0);
             setProperlyConfigured(true);

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConnectorThread.java
Patch:
@@ -135,7 +135,7 @@ void sendSwitch(int switchNr, boolean newState) {
                 try {
                     connector.sendDatagram(cmd.getBytes());
                 } catch (Exception e) {
-                    logger.error(maskPwd("Error occurred when sending UDP data to Anel device: " + cmd, e));
+                    logger.error(maskPwd("Error occurred when sending UDP data to Anel device: " + cmd), e);
                 }
             } else {
                 logger.debug("switch " + switchNr + " is locked, nothing sent.");

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/VeluxBindingConstants.java
Patch:
@@ -39,6 +39,8 @@ public class VeluxBindingConstants {
 
     // List of all bridge channel ids
     public static final String CHANNEL_BRIDGE_STATUS = "status";
+    public static final String CHANNEL_BRIDGE_RELOAD = "reload";
+    public static final String CHANNEL_BRIDGE_TIMESTAMP = "timestamp";
     public static final String CHANNEL_BRIDGE_DO_DETECTION = "doDetection";
     public static final String CHANNEL_BRIDGE_FIRMWARE = "firmware";
     public static final String CHANNEL_BRIDGE_IPADDRESS = "ipAddress";

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/VeluxBridgeGetFirmware.java
Patch:
@@ -90,7 +90,7 @@ public Channel retrieve(VeluxBridge bridge) {
 
         GetFirmware bcp = bridge.bridgeAPI().getFirmware();
         if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) {
-            this.channel.firmwareVersion = new StringType(bcp.getFirmware().toString());
+            this.channel.firmwareVersion = new StringType(bcp.getFirmware().getfirmwareVersion());
             this.channel.isRetrieved = true;
             logger.trace("retrieve() found successfully firmware {}.", this.channel.firmwareVersion);
             return channel;

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/common/BridgeAPI.java
Patch:
@@ -28,6 +28,8 @@
 public interface BridgeAPI {
     public boolean bridgeDirectCommunicate(BridgeCommunicationProtocol communication, boolean useAuthentication);
 
+    public long bridgeLastSuccessfullCommunication();
+
     public CheckLostNodes checkLostNodes();
 
     public DetectProducts detectProducts();

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/json/JCcheckLostNodes.java
Patch:
@@ -37,7 +37,7 @@ public class JCcheckLostNodes extends CheckLostNodes implements JsonBridgeCommun
     private static final String URL = "/api/v1/device";
     private static final String DESCRIPTION = "check lost nodes";
 
-    private Request request;
+    private Request request = new Request();
     private Response response;
 
     /*

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/json/JCdetectProducts.java
Patch:
@@ -37,7 +37,7 @@ public class JCdetectProducts extends DetectProducts implements JsonBridgeCommun
     private static final String URL = "/api/v1/products";
     private static final String DESCRIPTION = "discover products";
 
-    private Request request;
+    private Request request = new Request();
     private Response response;
 
     /*

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/json/JCgetDeviceStatus.java
Patch:
@@ -40,7 +40,7 @@ public class JCgetDeviceStatus extends GetDeviceStatus implements JsonBridgeComm
     private static final String URL = "/api/v1/device";
     private static final String DESCRIPTION = "get device status";
 
-    private Request request;
+    private Request request = new Request();
     private Response response;
 
     /*

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/json/JCgetFirmware.java
Patch:
@@ -37,7 +37,7 @@ public class JCgetFirmware extends GetFirmware implements JsonBridgeCommunicatio
     private static final String URL = "/api/v1/settings";
     private static final String DESCRIPTION = "get firmware version";
 
-    private Request request;
+    private Request request = new Request();
     private Response response;
 
     /*

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/json/JCgetProducts.java
Patch:
@@ -40,7 +40,7 @@ public class JCgetProducts extends GetProducts implements JsonBridgeCommunicatio
     private static final String URL = "/api/v1/products";
     private static final String DESCRIPTION = "get Products";
 
-    private Request request;
+    private Request request = new Request();
     private Response response;
 
     /**

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/json/JCgetScenes.java
Patch:
@@ -40,7 +40,7 @@ public class JCgetScenes extends GetScenes implements JsonBridgeCommunicationPro
     private static final String URL = "/api/v1/scenes";
     private static final String DESCRIPTION = "get Scenes";
 
-    private Request request;
+    private Request request = new Request();
     private Response response;
 
     /**

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/json/JClogout.java
Patch:
@@ -37,7 +37,7 @@ public class JClogout extends Logout implements JsonBridgeCommunicationProtocol
     private static final String URL = "/api/v1/auth";
     private static final String DESCRIPTION = "deauthenticate / logout";
 
-    private Request request;
+    private Request request = new Request();
     private Response response;
 
     /*

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/slip/SCgetScenes.java
Patch:
@@ -102,6 +102,7 @@ public void setResponse(short responseCommand, byte[] thisResponseData) {
                 if (ntfTotalNumberOfObjects == 0) {
                     logger.trace("setResponse(): no scenes defined.");
                     success = true;
+                    finished = true;
                 } else {
                     logger.trace("setResponse(): {} scenes defined.", ntfTotalNumberOfObjects);
                 }

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/slip/SCgetWLANConfig.java
Patch:
@@ -116,7 +116,7 @@ public boolean isCommunicationSuccessful() {
     public VeluxGwWLAN getWLANConfig() {
         logger.trace("getWLANConfig() called.");
         // ToDo: Velux will provide an API for retrieving the SSID.
-        return new VeluxGwWLAN("SSID", "Password");
+        return new VeluxGwWLAN("***yet-unsupported-by-firmware**", "***yet-unsupported-by-firmware**");
     }
 
 }

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcBaseDAO.java
Patch:
@@ -319,6 +319,7 @@ public void doCreateItemTable(ItemVO vo) {
         String sql = StringUtilsExt.replaceArrayMerge(SQL_CREATE_ITEM_TABLE,
                 new String[] { "#tableName#", "#dbType#", "#tablePrimaryKey#" },
                 new String[] { vo.getTableName(), vo.getDbType(), sqlTypes.get("tablePrimaryKey") });
+        logger.debug("JDBC::doCreateItemTable sql={}", sql);
         Yank.execute(sql, null);
     }
 

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcMapper.java
Patch:
@@ -116,10 +116,10 @@ public List<ItemsVO> getItemTables() {
      * MAPPERS ITEM *
      ****************/
     public void updateItemTableNames(List<ItemVO> vol) {
-        logger.debug("JDBC::createItemTable");
+        logger.debug("JDBC::updateItemTableNames");
         long timerStart = System.currentTimeMillis();
         conf.getDBDAO().doUpdateItemTableNames(vol);
-        logTime("createItemTable", timerStart, System.currentTimeMillis());
+        logTime("updateItemTableNames", timerStart, System.currentTimeMillis());
     }
 
     public ItemVO createItemTable(ItemVO vo) {

File: bundles/api/org.openhab.core1/src/main/java/org/openhab/io/net/http/HttpUtil.java
Patch:
@@ -119,7 +119,7 @@ public static String executeUrl(String httpMethod, String url, Properties httpHe
                 try {
                     proxyPort = Integer.valueOf(proxyPortString);
                 } catch (NumberFormatException e) {
-                    logger.warn("'{}' is not a valid proxy port - using port 80 instead");
+                    logger.warn("'{}' is not a valid proxy port - using port 80 instead", proxyPortString);
                 }
             }
             proxyUser = System.getProperty("http.proxyUser");

File: bundles/binding/org.openhab.binding.autelis/src/main/java/org/openhab/binding/autelis/internal/AutelisGenericBindingProvider.java
Patch:
@@ -13,7 +13,6 @@
 import org.openhab.binding.autelis.AutelisBindingProvider;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.items.SwitchItem;
@@ -57,7 +56,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem || item instanceof NumberItem
+        if (!(item instanceof SwitchItem || item instanceof NumberItem
                 || item instanceof StringItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.cardio2e/src/main/java/org/openhab/binding/cardio2e/internal/Cardio2eGenericBindingProvider.java
Patch:
@@ -34,7 +34,6 @@
 import org.openhab.core.items.Item;
 import org.openhab.core.library.items.ContactItem;
 import org.openhab.core.library.items.DateTimeItem;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.SwitchItem;
@@ -74,7 +73,7 @@ public String getBindingType() {
 	@Override
 	public void validateItemType(Item item, String bindingConfig)
 			throws BindingConfigParseException {
-		if (!(item instanceof SwitchItem || item instanceof DimmerItem
+		if (!(item instanceof SwitchItem
 				|| item instanceof RollershutterItem
 				|| item instanceof ContactItem || item instanceof NumberItem || item instanceof DateTimeItem)) {
 			throw new BindingConfigParseException(
@@ -621,4 +620,4 @@ public void setPendingUpdates(int pendingUpdates) {
 			this.pendingUpdates = pendingUpdates;
 		}
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.denon/src/main/java/org/openhab/binding/denon/internal/DenonGenericBindingProvider.java
Patch:
@@ -14,7 +14,6 @@
 import org.openhab.binding.denon.DenonBindingProvider;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
@@ -53,7 +52,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem || item instanceof StringItem)) {
+        if (!(item instanceof SwitchItem || item instanceof StringItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()
                     + "', only Switch-, Dimmer- and StringItems are allowed - please check your *.items configuration");

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/DigitalSTROMBinding.java
Patch:
@@ -1697,7 +1697,7 @@ private void updateItemState(Item item) {
                 if (item instanceof DimmerItem) {
                     state = new PercentType(getPercent(device.getMaxOutPutValue(), device.getOutputValue()));
 
-                } else if (item instanceof SwitchItem && !(item instanceof DimmerItem)) {
+                } else if (item instanceof SwitchItem) {
 
                     state = device.getOutputValue() > 0 ? OnOffType.ON : OnOffType.OFF;
                 } else if (item instanceof NumberItem) {

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/DigitalSTROMGenericBindingProvider.java
Patch:
@@ -15,7 +15,6 @@
 import org.openhab.binding.digitalstrom.internal.config.DigitalSTROMBindingConfig;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.StringItem;
@@ -45,7 +44,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem || item instanceof StringItem
+        if (!(item instanceof SwitchItem || item instanceof StringItem
                 || item instanceof NumberItem || item instanceof RollershutterItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/DmxGenericBindingProvider.java
Patch:
@@ -92,7 +92,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem || item instanceof ColorItem)) {
+        if (!(item instanceof SwitchItem || item instanceof DimmerItem)) {
             throw new BindingConfigParseException("Item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName() + "', which is not supported by the DMX Binding.");
         }

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java
Patch:
@@ -179,7 +179,7 @@ public Map<ItemConfiguration, String> getTr064Values(Collection<ItemConfiguratio
 
             String itemCommand = itemConfiguration.getItemCommand();
 
-            if (values.containsKey(itemCommand)) {
+            if (values.containsKey(itemConfiguration)) {
                 // item value already read by earlier MultiItemMap
                 continue;
             }

File: bundles/binding/org.openhab.binding.fs20/src/main/java/org/openhab/binding/fs20/internal/FS20GenericBindingProvider.java
Patch:
@@ -14,7 +14,6 @@
 import org.openhab.binding.fs20.FS20BindingConfig;
 import org.openhab.binding.fs20.FS20BindingProvider;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
 import org.openhab.model.item.binding.BindingConfigParseException;
@@ -42,7 +41,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem)) {
+        if (!(item instanceof SwitchItem)) {
             throw new BindingConfigParseException(
                     "item '" + item.getName() + "' is of type '" + item.getClass().getSimpleName()
                             + "', only Switch- and DimmerItems are allowed - please check your *.items configuration");

File: bundles/binding/org.openhab.binding.horizon/src/main/java/org/openhab/binding/horizon/internal/HorizonGenericBindingProvider.java
Patch:
@@ -15,7 +15,6 @@
 import org.openhab.binding.horizon.internal.control.Key;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.StringItem;
@@ -44,7 +43,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof NumberItem || item instanceof DimmerItem
+        if (!(item instanceof SwitchItem || item instanceof NumberItem
                 || item instanceof RollershutterItem || item instanceof StringItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/HueGenericBindingProvider.java
Patch:
@@ -64,7 +64,7 @@ public String getBindingType() {
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
 
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem)) {
+        if (!(item instanceof SwitchItem)) {
             throw new BindingConfigParseException("Item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()
                     + "', only SwitchItems, DimmerItems and ColorItems are allowed - please check your *.items configuration");

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/IhcGenericBindingProvider.java
Patch:
@@ -17,7 +17,6 @@
 import org.openhab.core.items.Item;
 import org.openhab.core.library.items.ContactItem;
 import org.openhab.core.library.items.DateTimeItem;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.StringItem;
@@ -288,7 +287,7 @@ public boolean hasInBinding(String itemName) {
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
 
         if (!(item instanceof NumberItem || item instanceof SwitchItem || item instanceof ContactItem
-                || item instanceof StringItem || item instanceof DateTimeItem || item instanceof DimmerItem
+                || item instanceof StringItem || item instanceof DateTimeItem
                 || item instanceof RollershutterItem)) {
             throw new BindingConfigParseException("Item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.lgtv/src/main/java/org/openhab/binding/lgtv/internal/LgtvBinding.java
Patch:
@@ -204,8 +204,6 @@ private String convertOpenHabCommandToDeviceCommand(Command command, String cmdT
         } else if (command instanceof DecimalType) {
             deviceCmd = String.format(cmdTemplate, ((DecimalType) command).intValue());
 
-        } else if (command instanceof PercentType) {
-            deviceCmd = String.format(cmdTemplate, ((DecimalType) command).intValue());
         }
 
         return deviceCmd;

File: bundles/binding/org.openhab.binding.lgtv/src/main/java/org/openhab/binding/lgtv/internal/LgtvGenericBindingProvider.java
Patch:
@@ -15,7 +15,6 @@
 import org.openhab.binding.lgtv.lginteraction.LgTvCommand;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.StringItem;
@@ -66,7 +65,7 @@ public String getBindingType() {
      * @{inheritDoc
      */
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof NumberItem || item instanceof DimmerItem
+        if (!(item instanceof SwitchItem || item instanceof NumberItem
                 || item instanceof RollershutterItem || item instanceof StringItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightGenericBindingProvider.java
Patch:
@@ -53,7 +53,7 @@ public String getBindingType() {
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
 
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem || item instanceof ColorItem)) {
+        if (!(item instanceof SwitchItem)) {
             throw new BindingConfigParseException("Item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()
                     + "', only SwitchItems, DimmerItems and ColorItems are allowed - please check your *.items configuration");

File: bundles/binding/org.openhab.binding.mochadx10/src/main/java/org/openhab/binding/mochadx10/internal/MochadX10GenericBindingProvider.java
Patch:
@@ -17,7 +17,6 @@
 import org.openhab.binding.mochadx10.commands.MochadX10Address;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
@@ -58,7 +57,7 @@ public String getBindingType() {
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
 
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem || item instanceof RollershutterItem)) {
+        if (!(item instanceof SwitchItem || item instanceof RollershutterItem)) {
             throw new BindingConfigParseException("Item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()
                     + "', only SwitchItems, DimmerItems and RollershutterItems are allowed - please check your *.items configuration");

File: bundles/binding/org.openhab.binding.mpd/src/main/java/org/openhab/binding/mpd/internal/MpdGenericBindingProvider.java
Patch:
@@ -16,7 +16,6 @@
 import org.openhab.binding.mpd.MpdBindingProvider;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.items.SwitchItem;
@@ -60,7 +59,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem || item instanceof StringItem
+        if (!(item instanceof SwitchItem || item instanceof StringItem
                 || item instanceof NumberItem)) {
             throw new BindingConfigParseException(
                     "item '" + item.getName() + "' is of type '" + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.onkyo/src/main/java/org/openhab/binding/onkyo/internal/OnkyoBinding.java
Patch:
@@ -181,8 +181,6 @@ private String convertOpenHabCommandToDeviceCommand(Command command, String cmdT
         } else if (command instanceof DecimalType) {
             deviceCmd = String.format(cmdTemplate, ((DecimalType) command).intValue());
 
-        } else if (command instanceof PercentType) {
-            deviceCmd = String.format(cmdTemplate, ((DecimalType) command).intValue());
         }
 
         return deviceCmd;

File: bundles/binding/org.openhab.binding.onkyo/src/main/java/org/openhab/binding/onkyo/internal/OnkyoGenericBindingProvider.java
Patch:
@@ -15,7 +15,6 @@
 import org.openhab.binding.onkyo.internal.eiscp.EiscpCommand;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.StringItem;
@@ -68,7 +67,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof NumberItem || item instanceof DimmerItem
+        if (!(item instanceof SwitchItem || item instanceof NumberItem
                 || item instanceof RollershutterItem || item instanceof StringItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.pilight/src/main/java/org/openhab/binding/pilight/internal/PilightGenericBindingProvider.java
Patch:
@@ -19,7 +19,6 @@
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.items.ContactItem;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.items.SwitchItem;
@@ -57,7 +56,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem || item instanceof ContactItem
+        if (!(item instanceof SwitchItem || item instanceof ContactItem
                 || item instanceof StringItem || item instanceof NumberItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.pioneeravr/src/main/java/org/openhab/binding/pioneeravr/internal/PioneerAvrGenericBindingProvider.java
Patch:
@@ -15,7 +15,6 @@
 import org.openhab.binding.pioneeravr.internal.ipcontrolprotocol.IpControlCommand;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.StringItem;
@@ -70,7 +69,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof NumberItem || item instanceof DimmerItem
+        if (!(item instanceof SwitchItem || item instanceof NumberItem
                 || item instanceof RollershutterItem || item instanceof StringItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexGenericBindingProvider.java
Patch:
@@ -15,7 +15,6 @@
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.items.DateTimeItem;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
@@ -61,7 +60,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem || item instanceof StringItem
+        if (!(item instanceof SwitchItem || item instanceof StringItem
                 || item instanceof DateTimeItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.powerdoglocalapi/src/main/java/org/openhab/binding/powerdoglocalapi/internal/PowerDogLocalApiGenericBindingProvider.java
Patch:
@@ -8,7 +8,6 @@
  */
 package org.openhab.binding.powerdoglocalapi.internal;
 
-import java.net.URL;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -19,7 +18,6 @@
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.items.ContactItem;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.items.SwitchItem;
@@ -92,7 +90,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem || item instanceof ContactItem
+        if (!(item instanceof SwitchItem || item instanceof ContactItem
                 || item instanceof NumberItem || item instanceof StringItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.primare/src/main/java/org/openhab/binding/primare/internal/PrimareGenericBindingProvider.java
Patch:
@@ -14,7 +14,6 @@
 import org.openhab.binding.primare.PrimareBindingProvider;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.StringItem;
@@ -70,7 +69,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof NumberItem || item instanceof DimmerItem
+        if (!(item instanceof SwitchItem || item instanceof NumberItem
                 || item instanceof RollershutterItem || item instanceof StringItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.pulseaudio/src/main/java/org/openhab/binding/pulseaudio/internal/PulseaudioGenericBindingProvider.java
Patch:
@@ -12,7 +12,6 @@
 import org.openhab.binding.pulseaudio.PulseaudioBindingProvider;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.items.SwitchItem;
@@ -60,8 +59,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if ((item instanceof NumberItem) || (item instanceof StringItem) || (item instanceof SwitchItem)
-                || (item instanceof DimmerItem)) {
+        if ((item instanceof NumberItem) || (item instanceof StringItem) || (item instanceof SwitchItem)) {
             return;
         }
         throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"

File: bundles/binding/org.openhab.binding.rme/src/main/java/org/openhab/binding/rme/internal/RMEGenericBindingProvider.java
Patch:
@@ -14,7 +14,6 @@
 import org.openhab.binding.rme.RMEValueSelector;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
 import org.openhab.model.item.binding.BindingConfigParseException;
@@ -49,10 +48,10 @@ public String getBindingType() {
      * {@inheritDoc}
      */
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem)) {
+        if (!(item instanceof SwitchItem)) {
             throw new BindingConfigParseException(
                     "item '" + item.getName() + "' is of type '" + item.getClass().getSimpleName()
-                            + "', only Switch- and Dimmer Items are allowed - please check your *.items configuration");
+                            + "', only Switch- and DimmerItems are allowed - please check your *.items configuration");
         }
     }
 

File: bundles/binding/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/SamsungTvGenericBindingProvider.java
Patch:
@@ -14,7 +14,6 @@
 import org.openhab.binding.samsungtv.SamsungTvBindingProvider;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.StringItem;
@@ -71,7 +70,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof NumberItem || item instanceof DimmerItem
+        if (!(item instanceof SwitchItem || item instanceof NumberItem
                 || item instanceof RollershutterItem || item instanceof StringItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.sapp/src/main/java/org/openhab/binding/sapp/internal/SappGenericBindingProvider.java
Patch:
@@ -90,8 +90,6 @@ public void validateItemType(Item item, String bindingConfig) throws BindingConf
             ; // OK, nothing to validate
         } else if (item instanceof RollershutterItem) {
             ; // OK, nothing to validate
-        } else if (item instanceof DimmerItem) {
-            ; // OK, nothing to validate
         } else {
             throw new BindingConfigParseException(
                     "item '" + item.getName() + "' is of type '" + item.getClass().getSimpleName()

File: bundles/binding/org.openhab.binding.serial/src/main/java/org/openhab/binding/serial/internal/SerialBinding.java
Patch:
@@ -19,7 +19,6 @@
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.items.ContactItem;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.StringItem;
@@ -160,7 +159,7 @@ public void validateItemType(Item item, String bindingConfig) throws BindingConf
         }
 
         if (!(item instanceof SwitchItem || item instanceof StringItem || item instanceof NumberItem
-                || item instanceof RollershutterItem || item instanceof ContactItem || item instanceof DimmerItem)) {
+                || item instanceof RollershutterItem || item instanceof ContactItem)) {
             throw new BindingConfigParseException("Item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()
                     + "', only Switch-, Number-, Rollershutter-, Contact-, Dimmer- and StringItems are allowed - please check your *.items configuration");

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickGenericBindingProvider.java
Patch:
@@ -22,7 +22,6 @@
 import org.openhab.binding.tellstick.internal.device.TellstickDevice;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
@@ -57,7 +56,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof NumberItem || item instanceof DimmerItem)) {
+        if (!(item instanceof SwitchItem || item instanceof NumberItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()
                     + "', only Number and Switch- and DimmerItems are allowed - please check your *.items configuration");

File: bundles/binding/org.openhab.binding.ucprelayboard/src/main/java/org/openhab/binding/ucprelayboard/internal/UCPRelayBoardBinding.java
Patch:
@@ -101,7 +101,7 @@ public void modified(final Map<String, Object> properties) throws Initialization
         for (Map.Entry<String, SerialDeviceConfig> config : configs.entrySet()) {
             if (serialDevices.containsKey(config.getKey())) {
                 SerialDevice device = serialDevices.get(config.getKey());
-                if (!config.equals(device.getConfig())) {
+                if (!config.getValue().equals(device.getConfig())) {
                     device.close();
                     prepareSerialDevice(config.getValue());
                 }

File: bundles/binding/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBGenericBindingProvider.java
Patch:
@@ -36,7 +36,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem)) {
+        if (!(item instanceof SwitchItem)) {
             throw new BindingConfigParseException(
                     "item '" + item.getName() + "' is of type '" + item.getClass().getSimpleName()
                             + "', only Switch- and DimmerItems are allowed - please check your *.items configuration");

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/VeluxBridge.java
Patch:
@@ -228,7 +228,7 @@ public synchronized boolean bridgeCommunicate(BridgeCommunicationProtocol commun
      */
     public BridgeAPI bridgeAPI() {
         logger.debug(
-                "bridgeAPI({}) called. Should NEVER occur as it seems to be a lack of protocol-specific implementation of this bridge API.");
+                "bridgeAPI() called. Should NEVER occur as it seems to be a lack of protocol-specific implementation of this bridge API.");
         return null;
     }
 

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/slip/util/SlipEncoding.java
Patch:
@@ -55,7 +55,7 @@ public SlipEncoding(short command, byte[] data) {
         logger.trace("SlipEncoding(constructor) for command 0x{} with data size {} called.",
                 Integer.toHexString(new Short(command).intValue()), data.length);
         if (data.length > 250) {
-            logger.warn("SlipEncoding(constructor) called with data size {}: too big, aborting.");
+            logger.warn("SlipEncoding(constructor) called with data size {}: too big, aborting.", data.length);
             encodingValid = false;
         } else {
             byte checksum = 0;

File: bundles/binding/org.openhab.binding.wago/src/main/java/org/openhab/binding/wago/internal/WagoGenericBindingProvider.java
Patch:
@@ -12,7 +12,6 @@
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.items.ContactItem;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.library.types.OpenClosedType;
@@ -51,7 +50,7 @@ public WagoBindingConfig getConfig(String name) {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof DimmerItem)) {
+        if (!(item instanceof SwitchItem)) {
             throw new BindingConfigParseException(
                     "item '" + item.getName() + "' is of type '" + item.getClass().getSimpleName()
                             + "', only Switch- and DimmerItems are allowed - please check your *.items configuration");

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/internal/XbmcGenericBindingProvider.java
Patch:
@@ -14,7 +14,6 @@
 import org.openhab.binding.xbmc.XbmcBindingProvider;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
@@ -37,7 +36,7 @@ public String getBindingType() {
 
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof StringItem) && !(item instanceof SwitchItem) && !(item instanceof DimmerItem)) {
+        if (!(item instanceof StringItem) && !(item instanceof SwitchItem)) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName() + "', but only String, Switch or Dimmer items are allowed.");
         }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveSceneConverter.java
Patch:
@@ -86,7 +86,7 @@ void handleEvent(ZWaveCommandClassValueEvent event, Item item, Map<String, Strin
             return;
         }
 
-        if (scene != (Integer) event.getValue()) {
+        if (!scene.equals((Integer) event.getValue())) {
             return;
         }
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveSecurityCommandClass.java
Patch:
@@ -445,7 +445,7 @@ protected void processSecurityCommandsSupportedReport(SerialMessage serialMessag
     public void sendNonceReport() {
         SerialMessage nonceReportMessage = nonceGeneration.generateAndBuildNonceReport();
         if (nonceReportMessage == null) {
-            logger.error("NODE {}: generateAndBuildNonceReport returned null");
+            logger.error("NODE {}: generateAndBuildNonceReport returned null", this.getNode().getNodeId());
         } else {
             transmitMessage(nonceReportMessage);
         }
@@ -632,7 +632,7 @@ private void removeFromEncapsulationQueue(ZWaveSecurityPayloadFrame frameToRemov
         if (hasMultipleParts) {
             if (!iter.hasNext()) {
                 logger.warn("NODE {}: security payload frame was marked as having 2 parts, "
-                        + "but only found 1 in payloadEncapsulationQueue: {}", frameToRemove);
+                        + "but only found 1 in payloadEncapsulationQueue: {}", this.getNode().getNodeId(), frameToRemove);
             } else {
                 ZWaveSecurityPayloadFrame secondFrame = iter.next(); // Go to the 2nd part
                 logger.info("NODE {}: Removing 2nd part from payloadEncapsulationQueue: {}", getNode().getNodeId(),

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveSecurityCommandClassWithInitialization.java
Patch:
@@ -157,7 +157,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
                 // Should be received during inclusion only
                 if (!wasThisNodeJustIncluded() || inclusionStateTracker == null) {
                     logger.error("NODE {}: Received SECURITY_SCHEME_REPORT but we are not in inclusion mode! {}",
-                            serialMessage);
+                    		this.getNode().getNodeId(), serialMessage);
                     return;
                 }
                 int schemes = serialMessage.getMessagePayloadByte(offset + 1);
@@ -209,7 +209,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
                 // Should be received during inclusion only
                 if (!wasThisNodeJustIncluded() || inclusionStateTracker == null) {
                     logger.error("NODE {}: Received SECURITY_NETWORK_KEY_VERIFY but we are not in inclusion mode! {}",
-                            serialMessage);
+                    		this.getNode().getNodeId(), serialMessage);
                     return;
                 }
                 // Since we got here, it means we decrypted a packet using the key we sent in

File: bundles/io/org.openhab.io.harmonyhub/src/main/java/org/openhab/io/harmonyhub/HarmonyHubDiscovery.java
Patch:
@@ -174,7 +174,7 @@ private void sendDiscoveryMessage(String discoverString) {
                     continue;
                 }
                 for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {
-                    InetAddress[] broadcast = new InetAddress[3];
+                    InetAddress[] broadcast = new InetAddress[4];
                     broadcast[0] = InetAddress.getByName("224.0.0.1");
                     broadcast[1] = InetAddress.getByName("255.255.255.255");
                     broadcast[2] = interfaceAddress.getBroadcast();

File: bundles/persistence/org.openhab.persistence.db4o/src/main/java/org/openhab/persistence/db4o/internal/Db4oConfiguration.java
Patch:
@@ -54,7 +54,7 @@ public void activate(final BundleContext bundleContext, final Map<String, Object
             try {
                 commitInterval = Integer.valueOf(commitIntervalString);
             } catch (IllegalArgumentException iae) {
-                logger.warn("couldn't parse '{}' to an integer");
+                logger.warn("couldn't parse '{}' to an integer", commitIntervalString);
             }
         }
 
@@ -63,7 +63,7 @@ public void activate(final BundleContext bundleContext, final Map<String, Object
             try {
                 maxBackups = Integer.valueOf(maxBackupsString);
             } catch (IllegalArgumentException iae) {
-                logger.warn("couldn't parse '{}' to an integer");
+                logger.warn("couldn't parse '{}' to an integer", maxBackupsString);
             }
         }
     }

File: bundles/persistence/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java
Patch:
@@ -478,8 +478,6 @@ private String stateToString(State state) {
             value = ((OnOffType) state) == OnOffType.ON ? DIGITAL_VALUE_ON : DIGITAL_VALUE_OFF;
         } else if (state instanceof OpenClosedType) {
             value = ((OpenClosedType) state) == OpenClosedType.OPEN ? DIGITAL_VALUE_ON : DIGITAL_VALUE_OFF;
-        } else if (state instanceof HSBType) {
-            value = ((HSBType) state).toString();
         } else if (state instanceof DateTimeType) {
             value = String.valueOf(((DateTimeType) state).getCalendar().getTime().getTime());
         } else {

File: bundles/persistence/org.openhab.persistence.mapdb/src/main/java/org/openhab/persistence/mapdb/internal/MapDBPersistenceService.java
Patch:
@@ -88,15 +88,15 @@ public void activate(final BundleContext bundleContext, final Map<String, Object
             try {
                 commitInterval = Integer.valueOf(commitIntervalString);
             } catch (IllegalArgumentException iae) {
-                logger.warn("couldn't parse '{}' to an integer");
+                logger.warn("couldn't parse '{}' to an integer", commitIntervalString);
             }
         }
         String commitSameStateString = (String) config.get("commitsamestate");
         if (StringUtils.isNotBlank(commitSameStateString)) {
             try {
                 commitSameState = Boolean.valueOf(commitSameStateString);
             } catch (IllegalArgumentException iae) {
-                logger.warn("couldn't parse '{}' to an integer");
+                logger.warn("couldn't parse '{}' to an integer", commitSameStateString);
             }
         }
 

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/bridge/slip/SlipVeluxBridge.java
Patch:
@@ -187,6 +187,7 @@ private byte[] io(String host, int port, byte[] request) throws ConnectException
         logger.info("io(): socket I/O failed {} times.", bridgeInstance.veluxBridgeConfiguration().retries);
         logger.trace("io(): shutting down connection.");
         connectivity.close();
+        connectivity = null;
         logger.trace("io() finishes with failure by throwing exception.");
         throw lastIOE;
     }

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/annotation/ForecastMappings.java
Patch:
@@ -24,6 +24,6 @@
 @Retention(RUNTIME)
 public @interface ForecastMappings {
 
-    public Forecast[]value();
+    public Forecast[] value();
 
 }

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/annotation/ProviderMappings.java
Patch:
@@ -25,6 +25,6 @@
 @Retention(RUNTIME)
 public @interface ProviderMappings {
 
-    public Provider[]value();
+    public Provider[] value();
 
 }

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/bus/WeatherBinding.java
Patch:
@@ -29,7 +29,7 @@
  * @author Gerhard Riegler
  * @since 1.6.0
  */
-public class WeatherBinding extends AbstractBinding<WeatherBindingProvider>implements ManagedService {
+public class WeatherBinding extends AbstractBinding<WeatherBindingProvider> implements ManagedService {
     private static final Logger logger = LoggerFactory.getLogger(WeatherBinding.class);
 
     private static WeatherContext context = WeatherContext.getInstance();

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/common/LocationConfig.java
Patch:
@@ -75,13 +75,15 @@ public void setLongitude(Double longitude) {
 
     /**
      * Returns the woeid.
+     * @deprecated The Yahoo weather API has ceased to exist. This method will be removed eventually.
      */
     public String getWoeid() {
         return woeid;
     }
 
     /**
      * Sets the woeid.
+     * @deprecated The Yahoo weather API has ceased to exist. This method will be removed eventually.
      */
     public void setWoeid(String woeid) {
         this.woeid = woeid;
@@ -176,8 +178,7 @@ public boolean isValid() {
     public String toString() {
         return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE).append("providerName", providerName)
                 .append("language", language).append("updateInterval", updateInterval).append("latitude", latitude)
-                .append("longitude", longitude).append("woeid", woeid).append("locationId", locationId)
-                .append("name", name).toString();
+                .append("longitude", longitude).append("locationId", locationId).append("name", name).toString();
     }
 
 }

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/model/Weather.java
Patch:
@@ -36,19 +36,20 @@ public class Weather {
     private Wind wind = new Wind();
     private Station station = new Station();
     private ProviderName provider;
+
     @ProviderMappings({ @Provider(name = ProviderName.HAMWEATHER, property = "error.description"),
             @Provider(name = ProviderName.FORECASTIO, property = "error"),
             @Provider(name = ProviderName.OPENWEATHERMAP, property = "message"),
             @Provider(name = ProviderName.WORLDWEATHERONLINE, property = "data.error.msg"),
-            @Provider(name = ProviderName.WUNDERGROUND, property = "response.error.type"),
             @Provider(name = ProviderName.METEOBLUE, property = "error_message"),
             @Provider(name = ProviderName.APIXU, property = "error.message"),
             @Provider(name = ProviderName.WEATHERBIT, property = "error") })
     private String error;
+
     @ProviderMappings({ @Provider(name = ProviderName.OPENWEATHERMAP, property = "cod") })
     private Integer responseCode;
+
     @ForecastMappings({ @Forecast(provider = ProviderName.OPENWEATHERMAP, property = "list"),
-            @Forecast(provider = ProviderName.WUNDERGROUND, property = "forecast.simpleforecast.forecastday"),
             @Forecast(provider = ProviderName.FORECASTIO, property = "daily.data"),
             @Forecast(provider = ProviderName.WORLDWEATHERONLINE, property = "data.weather"),
             @Forecast(provider = ProviderName.HAMWEATHER, property = "response.responses.response.periods"),

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/provider/WeatherProviderFactory.java
Patch:
@@ -28,7 +28,6 @@ public class WeatherProviderFactory {
         weatherProviders.put(ProviderName.HAMWEATHER, HamweatherProvider.class);
         weatherProviders.put(ProviderName.OPENWEATHERMAP, OpenWeatherMapProvider.class);
         weatherProviders.put(ProviderName.WORLDWEATHERONLINE, WorldWeatherOnlineProvider.class);
-        weatherProviders.put(ProviderName.WUNDERGROUND, WundergroundProvider.class);
         weatherProviders.put(ProviderName.METEOBLUE, MeteoBlueProvider.class);
         weatherProviders.put(ProviderName.APIXU, ApiXuProvider.class);
         weatherProviders.put(ProviderName.WEATHERBIT, WeatherbitProvider.class);
@@ -37,7 +36,7 @@ public class WeatherProviderFactory {
     /**
      * Creates a WeatherProvider for the specified provider.
      */
-    public static WeatherProvider createWeatherProvider( ProviderName providerName) throws Exception {
+    public static WeatherProvider createWeatherProvider(ProviderName providerName) throws Exception {
         Class<? extends WeatherProvider> provider = weatherProviders.get(providerName);
         if (provider != null) {
             return provider.newInstance();

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/provider/AbstractWeatherProvider.java
Patch:
@@ -115,7 +115,7 @@ private void executeRequest(Weather weather, String url, LocationConfig location
             }
 
             if (weather.hasError()) {
-                logger.error("{}[{}]: Can't retreive weather data: {}", getProviderName(),
+                logger.error("{}[{}]: Can't retrieve weather data: {}", getProviderName(),
                         locationConfig.getLocationId(), weather.getError());
             } else {
                 setLastUpdate(weather);

File: bundles/binding/org.openhab.binding.plcbus/src/main/java/org/openhab/binding/plcbus/internal/protocol/AbstractReceiveFrameContainer.java
Patch:
@@ -72,7 +72,7 @@ private void parseFrame(IByteProvider byteProvider) {
                 }
             }
         } catch (Exception e) {
-            logger.error("Error while parsing ReceiveFrame");
+            logger.warn("Error while parsing ReceiveFrame", e);
         }
     }
 

File: bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/Twitter.java
Patch:
@@ -115,7 +115,7 @@ public static boolean sendTweet(
         if (!checkPrerequisites()) {
             return false;
         }
-        return doSendTweet(tweetTxt, null);
+        return sendTweet(tweetTxt, (File)null);
     }
 
     /**
@@ -167,7 +167,7 @@ public static boolean sendTweet(
         }
     
         // send the Tweet
-        final boolean result = sendTweet(tweetTxt, fileToAttach);
+        boolean result = sendTweet(tweetTxt, fileToAttach);
         // delete temp file (if needed)
         if (deleteTemporaryFile) {
         	FileUtils.deleteQuietly(fileToAttach);

File: bundles/binding/org.openhab.binding.velux/src/main/java/org/openhab/binding/velux/things/VeluxProduct.java
Patch:
@@ -44,6 +44,7 @@ public enum ProductTypeId {
         ROLLER_SHUTTER(2, 0),
         OTHER(3, 0),
         WINDOW_OPENER(4, 1),
+        SOLAR_SLIDER(10, 2),
         UNDEFTYPE(-1);
 
         // Class internal

File: bundles/binding/org.openhab.binding.knx.test/src/test/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapperTest.java
Patch:
@@ -1439,7 +1439,7 @@ public void testTypeMapping4ByteFloat_14() throws KNXFormatException {
 
                 try {
                     Type type = testToType(dpt, new byte[] { 0x00, 0x00, 0x00, 0x00 }, DecimalType.class);
-                    testToDPTValue(dpt, type, "0.0");
+                    testToDPTValue(dpt, type, "0");
                 } catch (NumberFormatException nfe) {
                     fail("DptId: " + dpt.getID() + ", locale: " + locale + ", NumberFormatException. Expecting 0.0");
                 }
@@ -1985,7 +1985,7 @@ private void testTypeMapping2ByteFloat(DPT dpt, Class<? extends Type> expectedCl
                 testToType(dpt, new byte[] {}, expectedClass));
 
         Type type = testToType(dpt, new byte[] { 0x00, 0x00 }, expectedClass);
-        testToDPTValue(dpt, type, "0.0");
+        testToDPTValue(dpt, type, "0");
 
         if (expectedClass.equals(DecimalType.class.getClass())) {
             /*

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/ZibaseBindingConfigScenario.java
Patch:
@@ -47,13 +47,13 @@ public void sendCommand(Zibase zibase, Command command, int dim) {
      */
     @Override
     protected boolean isItemConfigValid() {
-        logger.info("Checking config for scenario item " + this.getId());
+        logger.info("Checking config for scenario item {}", this.getId());
 
         try {
             Integer.parseInt(this.values[ZibaseBindingConfig.POS_ID]);
             return true;
         } catch (NumberFormatException ex) {
-            logger.error("bad scenario id : " + this.getId());
+            logger.error("bad scenario id : {}", this.getId());
         }
 
         return false;

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/ZibaseBindingConfigVariable.java
Patch:
@@ -49,7 +49,7 @@ public void sendCommand(Zibase zibase, Command command, int dim) {
         if (valueToSet >= -32768 && valueToSet <= 32768) {
             zibase.setVariable(Integer.parseInt(this.getId()), valueToSet);
         } else {
-            logger.error("Out of range value " + valueToSet + " for variable " + this.getId());
+            logger.error("Out of range value {} for variable {}", valueToSet, this.getId());
         }
     }
 
@@ -58,15 +58,15 @@ public void sendCommand(Zibase zibase, Command command, int dim) {
      */
     @Override
     protected boolean isItemConfigValid() {
-        logger.info("Checking config for variable " + this.getId());
+        logger.info("Checking config for variable {}", this.getId());
 
         int variableNumber = Integer.parseInt(this.getId());
 
         // The Zibase has 32 hardware pubic variable, from 0 to 31
         if (variableNumber >= 0 && variableNumber <= 31) {
             return true;
         } else {
-            logger.error("bad variable number : " + this.getId());
+            logger.error("bad variable number : {}", this.getId());
             return false;
 
         }

File: bundles/binding/org.openhab.binding.vdr/src/main/java/org/openhab/binding/vdr/internal/VDRConnection.java
Patch:
@@ -63,7 +63,7 @@ public Response send(final Command cmd) {
             res = connection.send(cmd);
             logger.debug("Received Message from VDR: {}", res.getMessage());
         } catch (Exception e) {
-            logger.error("Could not connect to VDR on {}: {}", mIp + ":" + mPort, e);
+            logger.debug("Could not connect to VDR on {}: {}", mIp + ":" + mPort, e);
         } finally {
             if (connection != null) {
                 try {
@@ -124,4 +124,4 @@ public Boolean isRecording() {
         logger.trace("VDR (" + mIp + ") recording state: " + ret);
         return ret;
     }
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.gpio/src/main/java/org/openhab/binding/gpio/internal/GPIOGenericBindingProvider.java
Patch:
@@ -108,7 +108,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
         /* Configuration string should be in the form "pin:NUMBER [debounse:NUMBER] [activelow:yes|no]" */
         String[] properties = bindingConfig.split(" ");
 
-        if (properties.length > 3) {
+        if (properties.length > 4) {
             logger.error("Wrong number of arguments (" + properties.length + ") in configuration string '"
                     + bindingConfig + "'");
             throw new BindingConfigParseException("Wrong number of agruments (" + properties.length

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/SceneToStateMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -70,7 +70,7 @@ public boolean isMappable(short val) {
     /**
      * Please check at first with a call 'isMappable(short)'
      * if there is a mapping for this number.
-     * If not you can not be sure to get a valid boolean-false
+     * If not you cannot be sure to get a valid boolean-false
      * 
      * @param val scene-number
      * @return true or false if this scene will cause a 'isOn' state in device

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm1/internal/protocol/APIMessage.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -324,7 +324,7 @@ private void parseAPIMessage() {
                         break;
                     case PartitionNotReady: /* 651 */
                         apiName = "Partition Not Ready";
-                        apiDescription = apiCodeReceived + ": Partition can not be armed.";
+                        apiDescription = apiCodeReceived + ": Partition cannot be armed.";
                         partition = Integer.parseInt(apiMessage.substring(3, 4));
                         apiMessageType = APIMessageType.PARTITION_EVENT;
                         break;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Thermostat.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -5581,7 +5581,7 @@ public String toString() {
      * <p>
      * When adding a Climate it is optional whether you reference the new Climate in the schedule cells in the same
      * request or not. However, when deleting a Climate (by omitting that entire Climate object from the POST request)
-     * it can not be be deleted if it is still referenced in the schedule cells.
+     * it cannot be be deleted if it is still referenced in the schedule cells.
      *
      * <p>
      * There are three default Climates for each {@link Thermostat}, with possible <code>climateRef</code> values of

File: bundles/binding/org.openhab.binding.irtrans/src/main/java/org/openhab/binding/irtrans/internal/IRtransBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -414,7 +414,7 @@ protected boolean internalReceiveChanneledCommand(String itemName, Command comma
                         if (newState != null) {
                             eventPublisher.postUpdate(itemName, newState);
                         } else {
-                            logger.warn("Can not parse " + commandAsString + " to match command {} on item {}  ",
+                            logger.warn("Cannot parse " + commandAsString + " to match command {} on item {}  ",
                                     command, itemName);
                         }
 
@@ -557,7 +557,7 @@ protected void parseDecodedCommand(String itemName, IrCommand theCommand, Comman
                                 if (newState != null) {
                                     eventPublisher.postUpdate(itemName, newState);
                                 } else {
-                                    logger.warn("Can not create an Item State to match command {} on item {}  ",
+                                    logger.warn("Cannot create an Item State to match command {} on item {}  ",
                                             aCommand, itemName);
                                 }
                             } else {

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/util/SerialParameters.java
Patch:
@@ -195,7 +195,7 @@ public void setBaudRate(String rate) throws IllegalArgumentException {
             intBaudRate = Integer.parseInt(rate);
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException(
-                    "baudString '" + rate + "' can not be converted to a number: " + e.getMessage());
+                    "baudString '" + rate + "' cannot be converted to a number: " + e.getMessage());
         }
         setBaudRate(intBaudRate);
     }// setBaudRate
@@ -350,7 +350,7 @@ public void setDatabits(String databits) throws IllegalArgumentException {
             intDataBits = Integer.parseInt(databits);
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException(
-                    "databitsString '" + databits + "' can not be converted to a number: " + e.getMessage());
+                    "databitsString '" + databits + "' cannot be converted to a number: " + e.getMessage());
         }
 
         setDatabits(intDataBits);
@@ -417,7 +417,7 @@ public void setStopbits(String stopbits) throws IllegalArgumentException {
             doubleStopBits = Double.parseDouble(stopbits);
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException(
-                    "stopbitsString '" + stopbits + "' can not be converted to a number: " + e.getMessage());
+                    "stopbitsString '" + stopbits + "' cannot be converted to a number: " + e.getMessage());
         }
 
         setStopbits(doubleStopBits);

File: bundles/binding/org.openhab.binding.nikobus/src/main/java/org/openhab/binding/nikobus/internal/core/NikobusCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -189,7 +189,7 @@ public boolean getAllowDuplicates() {
     }
 
     /**
-     * When no duplicates are allowed, the same command can not be queued for
+     * When no duplicates are allowed, the same command cannot be queued for
      * sending when a similar command is already in the to send queue.
      * 
      * @param allowDuplicates

File: bundles/binding/org.openhab.binding.oceanic/src/main/java/org/openhab/binding/oceanic/internal/OceanicBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -134,7 +134,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
                         command.toString());
             }
         } else {
-            // can not set the value of a read-only "get" variable
+            // cannot set the value of a read-only "get" variable
             logger.warn("An error occurred while trying to set the read-only variable '{}' to {}",
                     valueSelector.toString(), command.toString());
         }
@@ -381,7 +381,7 @@ public String getResponse() {
         /**
          * Initialize this device and open the serial port
          *
-         * @throws InitializationException if port can not be opened
+         * @throws InitializationException if port cannot be opened
          */
         @SuppressWarnings("rawtypes")
         public void initialize() throws InitializationException {

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/Stick.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -172,7 +172,7 @@ public boolean isInitialised() {
     /**
      * Initialize this device and open the serial port
      *
-     * @throws PlugwiseInitializationException if port can not be opened
+     * @throws PlugwiseInitializationException if port cannot be opened
      */
     @SuppressWarnings("rawtypes")
     private void initialize() throws PlugwiseInitializationException {
@@ -738,7 +738,7 @@ private void processMessage(Message message) {
             if (target != null) {
                 result = target.processMessage(message);
             } else {
-                // if we can not find the target MAC for this message, we let the stick deal with it
+                // if we cannot find the target MAC for this message, we let the stick deal with it
                 result = stick.processMessage(message);
             }
 

File: bundles/binding/org.openhab.binding.primare/src/main/java/org/openhab/binding/primare/internal/protocol/PrimareTCPConnector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -214,7 +214,7 @@ private void connectSocket() throws UnknownHostException, IOException {
                 logger.error("connect - unknown host for {} at", this.toString());
                 throw unknownHost;
             } catch (IOException ioException) {
-                logger.error("Can not connect to socket for {} : {}", this.toString(), ioException.getMessage());
+                logger.error("Cannot connect to socket for {} : {}", this.toString(), ioException.getMessage());
                 throw ioException;
             }
 

File: bundles/binding/org.openhab.binding.rme/src/main/java/org/openhab/binding/rme/internal/RMEBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -219,7 +219,7 @@ public String getPort() {
         /**
          * Initialize this device and open the serial port
          *
-         * @throws InitializationException if port can not be opened
+         * @throws InitializationException if port cannot be opened
          */
         @SuppressWarnings("rawtypes")
         public void initialize() throws InitializationException {

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/command/SatelCommandBase.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -174,10 +174,10 @@ protected static boolean hasCommandSucceeded(SatelMessage response) {
                 errorMsg = "Other error";
                 break;
             case 0x11:
-                errorMsg = "Can not arm, but can use force arm";
+                errorMsg = "Cannot arm, but can use force arm";
                 break;
             case 0x12:
-                errorMsg = "Can not arm";
+                errorMsg = "Cannot arm";
                 break;
             case (byte) 0xff:
                 logger.trace("Command accepted");

File: bundles/binding/org.openhab.binding.serial/src/main/java/org/openhab/binding/serial/internal/SerialDevice.java
Patch:
@@ -188,7 +188,7 @@ public String getFormat(String itemName) {
     /**
      * Initialize this device and open the serial port
      *
-     * @throws InitializationException if port can not be opened
+     * @throws InitializationException if port cannot be opened
      */
     @SuppressWarnings("rawtypes")
     public void initialize() throws InitializationException {

File: bundles/binding/org.openhab.binding.smarthomatic/src/main/java/org/openhab/binding/smarthomatic/internal/SerialDevice.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -89,7 +89,7 @@ public String getPort() {
      * Initialize this device and open the serial port
      * 
      * @throws InitializationException
-     *             if port can not be opened
+     *             if port cannot be opened
      */
     public void initialize() throws InitializationException {
         // parse ports and if the default port is found, initialized the reader

File: bundles/binding/org.openhab.binding.stiebelheatpump/src/main/java/org/openhab/binding/stiebelheatpump/protocol/DataParser.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -165,14 +165,14 @@ public byte[] composeRecord(String value, byte[] response, RecordDefinition reco
         short newValue = 0;
 
         if (recordDefinition.getDataType() != Type.Settings) {
-            logger.warn("The record {} can not be set as it is not a setable value!", recordDefinition.getName());
+            logger.warn("The record {} cannot be set as it is not a setable value!", recordDefinition.getName());
             throw new StiebelHeatPumpException("record is not a setting!");
         }
 
         double number = Double.parseDouble(value);
 
         if (number > recordDefinition.getMax() || number < recordDefinition.getMin()) {
-            logger.warn("The record {} can not be set to value {} as allowed range is {}<-->{} !",
+            logger.warn("The record {} cannot be set to value {} as allowed range is {}<-->{} !",
                     recordDefinition.getName(), value, recordDefinition.getMax(), recordDefinition.getMin());
             throw new StiebelHeatPumpException("invalid value !");
         }

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/AbstractDatagramChannelBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2017 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -1161,7 +1161,7 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
                             logger.warn("An exception occurred while connecting a channel: {}", e.getMessage());
                         }
                     } else {
-                        logger.warn("The listener channel can not be closed!");
+                        logger.warn("The listener channel cannot be closed!");
                     }
                 } else {
                     logger.debug("I cannot proceed without remote address");

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/protocol/internal/TCPBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -119,7 +119,7 @@ protected boolean internalReceiveChanneledCommand(String itemName, Command comma
                     if (newState != null) {
                         eventPublisher.postUpdate(itemName, newState);
                     } else {
-                        logger.warn("Can not parse transformed output " + transformedResponse
+                        logger.warn("Cannot parse transformed output " + transformedResponse
                                 + " to match command {} on item {}  ", command, itemName);
                     }
 
@@ -161,7 +161,7 @@ protected void parseBuffer(String itemName, Command aCommand, Direction theDirec
         if (newState != null) {
             eventPublisher.postUpdate(itemName, newState);
         } else {
-            logger.warn("Can not parse input " + theUpdate + " to match command {} on item {}  ", aCommand, itemName);
+            logger.warn("Cannot parse input " + theUpdate + " to match command {} on item {}  ", aCommand, itemName);
         }
     }
 

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MServoImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -1262,7 +1262,7 @@ public void enable() {
                 tinkerBrickServo.enable(servoNum);
                 fetchSwitchState();
             } catch (NumberFormatException e) {
-                TinkerforgeErrorHandler.handleError(this, "can not determine servoNum", e);
+                TinkerforgeErrorHandler.handleError(this, "cannot determine servoNum", e);
             } catch (TimeoutException e) {
                 TinkerforgeErrorHandler.handleError(this, TinkerforgeErrorHandler.TF_TIMEOUT_EXCEPTION, e);
             } catch (NotConnectedException e) {

File: bundles/binding/org.openhab.binding.ucprelayboard/src/main/java/org/openhab/binding/ucprelayboard/internal/SerialDevice.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -53,7 +53,7 @@ public SerialDeviceConfig getConfig() {
      * Initialize this device and open the serial port
      * 
      * @throws InitializationException
-     *             if port can not be opened
+     *             if port cannot be opened
      */
     public void initialize() throws InitializationException {
         try {

File: bundles/binding/org.openhab.binding.urtsi/src/main/java/org/openhab/binding/urtsi/internal/UrtsiDevice.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -82,7 +82,7 @@ public int getInterval() {
      * Initialize this device and open the serial port.
      *
      * @throws InitializationException
-     *             if port can not be opened
+     *             if port cannot be opened
      */
     void initialize() throws InitializationException {
         try {

File: bundles/persistence/org.openhab.persistence.mongodb/java/org/openhab/persistence/mongodb/internal/MongoDBPersistenceService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -152,7 +152,7 @@ public void store(Item item, String alias) {
         // If we still didn't manage to connect, then return!
         if (!isConnected()) {
             logger.warn(
-                    "mongodb: No connection to database. Can not persist item '{}'! Will retry connecting to database next time.",
+                    "mongodb: No connection to database. Cannot persist item '{}'! Will retry connecting to database next time.",
                     item);
             return;
         }

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2017 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -386,7 +386,7 @@ public void store(Item item, String alias) {
         // If we still didn't manage to connect, then return!
         if (!isConnected()) {
             logger.warn(
-                    "mySQL: No connection to database. Can not persist item '{}'! "
+                    "mySQL: No connection to database. Cannot persist item '{}'! "
                             + "Will retry connecting to database when error count:{} equals errReconnectThreshold:{}",
                     item, errCnt, errReconnectThreshold);
             return;

File: bundles/binding/org.openhab.binding.bticino/src/main/java/com/myhome/fcrisciani/connector/MyHomeJavaConnector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2017, openHAB.org and others.
+ * Copyright (c) 2010-2018, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -35,8 +35,10 @@
  * plant
  *
  * @author Flavio Crisciani
+ * @author Reinhard Freuis - various enhancements for heating, rollershutter
  * @serial 1.0
  * @since 1.7.0
+ *
  */
 public class MyHomeJavaConnector {
 

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/FritzboxTr064Binding.java
Patch:
@@ -138,12 +138,12 @@ public void activate(final BundleContext bundleContext, final Map<String, Object
         this._pw = fboxpw;
         this._user = fboxuser;
         this._url = fboxurl;
-        
+
         try {
             this._pbid = Integer.valueOf(fboxphonebookid);
-    	} catch(NumberFormatException ex) { //set fallback to 0
+        } catch (NumberFormatException ex) { // set fallback to 0
             this._pbid = 0;
-    	}
+        }
 
         if (_fboxComm == null) {
             _fboxComm = new Tr064Comm(_url, _user, _pw);

File: bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2018 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -206,6 +206,8 @@ public void execute() {
 
             String heatpumpState = getStateString(heatpumpValues) + ": " + getStateTime(heatpumpValues); //$NON-NLS-1$
             handleEventType(new StringType(heatpumpState), HeatpumpCommandType.TYPE_HEATPUMP_STATE);
+            String heatpumpSimpleState = getStateString(heatpumpValues);
+            handleEventType(new StringType(heatpumpSimpleState), HeatpumpCommandType.TYPE_HEATPUMP_SIMPLE_STATE);
             String heatpumpExtendedState = getExtendeStateString(heatpumpValues) + ": " //$NON-NLS-1$
                     + formatHours(heatpumpValues[120]);
             handleEventType(new StringType(heatpumpExtendedState), HeatpumpCommandType.TYPE_HEATPUMP_EXTENDED_STATE);

File: bundles/binding/org.openhab.binding.panstamp/src/main/java/org/openhab/binding/panstamp/internal/ConfigDeviceStore.java
Patch:
@@ -54,7 +54,7 @@ void addProductCode(int address, int manId, int prodId) {
         val[7] = (byte) (prodId);
         if (map.containsKey(address)) {
             byte oldVal[] = map.get(address);
-            if (Arrays.equals(oldVal, val)) {
+            if (!Arrays.equals(oldVal, val)) {
                 logger.warn("Product code for device {} re-assigned from {}/{} to {}/{}.", address,
                         bytesToInt(oldVal, 0, 4), bytesToInt(oldVal, 4, 4), manId, prodId);
             }
@@ -81,7 +81,7 @@ public void setRegisterValue(Register reg, byte[] val) {
 
     private int bytesToInt(byte bytes[], int idx, int len) {
         int val = 0;
-        for (int i = 0; i < len; ++len) {
+        for (int i = 0; i < len; i++) {
             val = val << 8;
             val = val | bytes[idx + i];
         }

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/IhcGenericBindingProvider.java
Patch:
@@ -200,7 +200,7 @@ private int getResourceIdFromString(String resourceId) {
      * This is an internal data structure to store information from the binding
      * config strings and use it to answer the requests to the IHC binding
      * provider.
-     * 
+     *
      */
     static private class IhcBindingConfig implements BindingConfig {
         Class<? extends Item> itemType;
@@ -263,7 +263,7 @@ public int getResourceId(String itemName, Command cmd) {
     @Override
     public int getRefreshInterval(String itemName) {
         IhcBindingConfig config = (IhcBindingConfig) bindingConfigs.get(itemName);
-        return config != null ? config.refreshInterval : null;
+        return config != null ? config.refreshInterval : 0;
     }
 
     @Override
@@ -283,7 +283,7 @@ public boolean isOutBinding(String itemName, int resourceId) {
     public boolean hasInBinding(String itemName) {
         IhcBindingConfig config = (IhcBindingConfig) bindingConfigs.get(itemName);
 
-        return config != null ? config.resourceId > 0 : null;
+        return config != null ? config.resourceId > 0 : false;
     }
 
     @Override

File: bundles/io/org.openhab.io.transport.cul/src/main/java/org/openhab/io/transport/cul/internal/AbstractCULHandler.java
Patch:
@@ -155,7 +155,7 @@ public void unregisterListener(CULListener listener) {
 
     @Override
     public boolean hasListeners() {
-        return listeners.size() > 0;
+        return (listeners.size() == 1 && listeners.get(0) != sendThread || listeners.size() > 1);
     }
 
     @Override

File: bundles/binding/org.openhab.binding.fatekplc/src/main/java/org/openhab/binding/fatekplc/items/FatekSwitchItem.java
Patch:
@@ -114,7 +114,9 @@ public void command(FatekPLC fatekPLC, Command command) throws CommandException
 			}
 			reg = reg1;
 		} else {
-			value = !negate2;
+			if (negate2){
+				value = !value;
+			}
 			reg = reg2;
 		}
 

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcBaseDAO.java
Patch:
@@ -432,10 +432,9 @@ protected ItemVO storeItemValueProvider(Item item, ItemVO vo) {
             logger.debug("JDBC::storeItemValueProvider: newVal.intValue: '{}'", newVal.intValue());
             vo.setValue(newVal.intValue());
         } else if ("DATETIMEITEM".equals(itemType)) {
-            // vo.setValueTypes(getSqlTypes().get(itemType), java.util.Date.class);
-            vo.setValueTypes(getSqlTypes().get(itemType), java.sql.Date.class);
+            vo.setValueTypes(getSqlTypes().get(itemType), java.sql.Timestamp.class);
             Calendar x = ((DateTimeType) item.getState()).getCalendar();
-            java.sql.Date d = new java.sql.Date(x.getTimeInMillis());
+            java.sql.Timestamp d = new java.sql.Timestamp(x.getTimeInMillis());
             logger.debug("JDBC::storeItemValueProvider: DateTimeItem: '{}'", d);
             vo.setValue(d);
         } else {

File: bundles/binding/org.openhab.binding.intertechno/src/main/java/org/openhab/binding/intertechno/internal/parser/AddressParserFactory.java
Patch:
@@ -27,6 +27,8 @@ public static IntertechnoAddressParser getParser(String type) {
             return new REVParser();
         } else if ("raw".equals(type)) {
             return new RawParser();
+        } else if ("v3".equals(type)) {
+            return new V3Parser();
         }
 
         return null;

File: bundles/action/org.openhab.action.nma/src/main/java/org/openhab/action/nma/internal/NotifyMyAndroid.java
Patch:
@@ -172,7 +172,7 @@ public static boolean notifyMyAndroid(
                 return false;
             }
         } catch (Exception e) {
-            logger.error("An error occured while notifying your android", e);
+            logger.error("An error occurred while notifying your android", e);
             return false;
         }
     }

File: bundles/binding/org.openhab.binding.bticino/src/main/java/org/openhab/binding/bticino/internal/BticinoDevice.java
Patch:
@@ -214,7 +214,7 @@ public void handleEvent(ProtocolRead p_protocol_read) throws Exception {
         List<BticinoBindingConfig> l_binding_configs = m_bticino_binding.getItemForBticinoBindingConfig(
                 p_protocol_read.getProperty("who"), p_protocol_read.getProperty("where"));
 
-        // log it when an event has occured that no item is bound to
+        // log it when an event has occurred that no item is bound to
         if (l_binding_configs.isEmpty()) {
             logger.debug("Gateway [" + m_gateway_id + "], No Item found for bticino event, WHO ["
                     + p_protocol_read.getProperty("who") + "], WHAT [" + p_protocol_read.getProperty("what")

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm1/internal/model/Panel.java
Patch:
@@ -223,7 +223,7 @@ public String getFormattedPanelTime(String time) {
             try {
                 date = receivedSDF.parse(time);
             } catch (ParseException e) {
-                logger.error("setTimeDate(): Parse Exception occured while trying parse date string - {}. ", e);
+                logger.error("setTimeDate(): Parse Exception occurred while trying parse date string - {}. ", e);
             }
 
             this.panelTime = date;

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/DSMRPort.java
Patch:
@@ -234,7 +234,7 @@ public List<OBISMessage> read() {
                 // Port was closed
                 logger.info("Read aborted: DSMRPort is closed");
             } else {
-                logger.error("Unexpected problem occured", npe);
+                logger.error("Unexpected problem occurred", npe);
 
                 close();
             }

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/connection/AbstractEBusConnector.java
Patch:
@@ -155,7 +155,7 @@ public void run() {
                     // lastReceiveTime = System.nanoTime();
 
                     if (read == -1) {
-                        logger.debug("eBUS read timeout occured, no data on bus ...");
+                        logger.debug("eBUS read timeout occurred, no data on bus ...");
 
                     } else {
 
@@ -179,7 +179,7 @@ public void run() {
                 }
 
             } catch (IOException e) {
-                logger.error("An IO exception has occured! Try to reconnect eBus connector ...", e);
+                logger.error("An IO exception has occurred! Try to reconnect eBus connector ...", e);
 
                 try {
                     reconnect();

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/connection/AbstractEBusWriteConnector.java
Patch:
@@ -221,7 +221,7 @@ protected void send(boolean secondTry) throws IOException {
 
                     // last send try was a collision
                     if (lastSendCollisionDetected) {
-                        logger.warn("A second collision occured!");
+                        logger.warn("A second collision occurred!");
                         resetSend();
                         return;
                     }

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/connector/EpsonProjectorSerialConnector.java
Patch:
@@ -136,7 +136,7 @@ public String sendMessage(String data, int timeout) throws EpsonProjectorExcepti
 
         } catch (IOException e) {
 
-            logger.debug("IO error occured...reconnect and resend ones");
+            logger.debug("IO error occurred...reconnect and resend ones");
             disconnect();
             connect();
 

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/connector/EpsonProjectorTcpConnector.java
Patch:
@@ -74,7 +74,7 @@ public void disconnect() throws EpsonProjectorException {
             try {
                 socket.close();
             } catch (IOException e) {
-                logger.warn("Error occured when closing tcp socket", e);
+                logger.warn("Error occurred when closing tcp socket", e);
             }
         }
 
@@ -116,7 +116,7 @@ public String sendMessage(String data, int timeout) throws EpsonProjectorExcepti
 
         } catch (IOException e) {
 
-            logger.debug("IO error occured...reconnect and resend ones");
+            logger.debug("IO error occurred...reconnect and resend ones");
             disconnect();
             connect();
 

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorBinding.java
Patch:
@@ -98,7 +98,7 @@ private void closeConnection() {
                             logger.debug("Closing connection to device '{}' ", deviceCfg.deviceId);
                             device.disconnect();
                         } catch (EpsonProjectorException e) {
-                            logger.error("Error occured when closing connection to device '{}'", deviceCfg.deviceId);
+                            logger.error("Error occurred when closing connection to device '{}'", deviceCfg.deviceId);
                         }
                     }
                 }

File: bundles/binding/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecBinding.java
Patch:
@@ -361,7 +361,7 @@ private String executeCommandAndWaitResponse(String commandLine) {
             logger.debug("exit code '{}', result '{}'", exitCode, retval);
 
         } catch (InterruptedException e) {
-            logger.error("Timeout occured when executing commandLine '" + commandLine + "'", e);
+            logger.error("Timeout occurred when executing commandLine '" + commandLine + "'", e);
         }
 
         return retval;

File: bundles/binding/org.openhab.binding.fritzaha/src/main/java/org/openhab/binding/fritzaha/internal/hardware/callbacks/FritzahaQueryscriptUpdateNumberCallback.java
Patch:
@@ -92,7 +92,7 @@ public void execute(int status, String response) {
                 logger.error("Error mapping JSON:\n" + response);
                 return;
             } catch (IOException e) {
-                logger.error("An I/O error occured while decoding JSON:\n" + response);
+                logger.error("An I/O error occurred while decoding JSON:\n" + response);
                 return;
             }
             if (type == MeterType.ENERGY) {

File: bundles/binding/org.openhab.binding.fritzaha/src/main/java/org/openhab/binding/fritzaha/internal/hardware/callbacks/FritzahaQueryscriptUpdateSwitchCallback.java
Patch:
@@ -73,7 +73,7 @@ public void execute(int status, String response) {
                 logger.error("Error mapping JSON:\n" + response);
                 return;
             } catch (IOException e) {
-                logger.error("An I/O error occured while decoding JSON:\n" + response);
+                logger.error("An I/O error occurred while decoding JSON:\n" + response);
                 return;
             }
             if (deviceData.containsKey("DeviceSwitchState")) {

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Helper.java
Patch:
@@ -58,7 +58,7 @@ public static String documentToString(Document doc) {
             lsSerializer.write(doc, lsOutput);
             strMsg = stringWriter.toString();
         } catch (Exception e) {
-            logger.warn("Error occured when converting document to string", e);
+            logger.warn("Error occurred when converting document to string", e);
         }
         return strMsg;
     }

File: bundles/binding/org.openhab.binding.fs20/src/main/java/org/openhab/binding/fs20/internal/FS20Binding.java
Patch:
@@ -72,7 +72,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
                 FS20Command fs20Command = FS20CommandHelper.convertHABCommandToFS20Command(command);
                 culHandlerLifecycle.getCul().send("F" + bindingConfig.getAddress() + fs20Command.getHexValue());
             } catch (CULCommunicationException e) {
-                logger.error("An exception occured while sending a command", e);
+                logger.error("An exception occurred while sending a command", e);
             }
         }
     }

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/IhcBinding.java
Patch:
@@ -258,7 +258,7 @@ public void execute() {
                                 }
 
                             } catch (Exception e) {
-                                logger.error("Error occured during resource query", e);
+                                logger.error("Error occurred during resource query", e);
                             }
 
                             lastUpdateMap.put(itemName, System.currentTimeMillis());
@@ -473,7 +473,7 @@ private void updateResource(String itemName, Type type, boolean updateOnlyExclus
             } catch (IhcExecption e) {
                 logger.error("Can't update Item '{}' value ", itemName, e);
             } catch (Exception e) {
-                logger.error("Error occured during item update", e);
+                logger.error("Error occurred during item update", e);
             }
         }
 
@@ -614,7 +614,7 @@ public void resourceValueUpdateReceived(EventObject event, WSResourceValue value
 
     @Override
     public void errorOccured(EventObject event, IhcExecption e) {
-        logger.warn("Error occured on communication to IHC controller: {}", e.getMessage());
+        logger.warn("Error occurred on communication to IHC controller: {}", e.getMessage());
 
         logger.debug("Reconnection request");
         setReconnectRequest(true);

File: bundles/binding/org.openhab.binding.lgtv/src/main/java/org/openhab/binding/lgtv/lginteraction/LgTvInteractor.java
Patch:
@@ -67,7 +67,7 @@ public enum lgtvconnectionstatus {
 
     private int waitafterbyebye = 10; // wait 10secs for new interaction with tv
                                       // after byebye event
-    private long byebyeseen = -1; // time when last byebye event occured
+    private long byebyeseen = -1; // time when last byebye event occurred
 
     public String quickfind(String sourcestring, String tag) {
         String retval = "#notfound";

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/ModbusSlaveException.java
Patch:
@@ -36,7 +36,7 @@ public class ModbusSlaveException extends ModbusException {
      * specification in <tt>net.wimpi.modbus.Modbus</tt>.
      * <p>
      *
-     * @param TYPE the type of exception that occured.
+     * @param TYPE the type of exception that occurred.
      *
      * @see net.wimpi.modbus.Modbus
      */

File: bundles/binding/org.openhab.binding.mqttitude/src/main/java/org/openhab/binding/mqttitude/internal/MqttitudeConsumer.java
Patch:
@@ -211,7 +211,7 @@ private Map<String, String> readJsonPayload(String payload) {
             logger.error("Error mapping JSON:\n" + payload);
             return null;
         } catch (IOException e) {
-            logger.error("An I/O error occured while decoding JSON:\n" + payload);
+            logger.error("An I/O error occurred while decoding JSON:\n" + payload);
             return null;
         }
     }

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/NetatmoError.java
Patch:
@@ -36,7 +36,7 @@ public class NetatmoError extends AbstractMessagePart {
      * <li>5 : The application has been deactivated
      * <li>9 : The device has not been found
      * <li>10 : A mandatory API parameter is missing
-     * <li>11 : An unexpected error occured
+     * <li>11 : An unexpected error occurred
      * <li>13 : Operation not allowed
      * <li>15 : Installation of the device has not been finalized
      * <li>21 : Invalid argument

File: bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/internal/NibeHeatPumpBinding.java
Patch:
@@ -146,7 +146,7 @@ public void run() {
             try {
                 connector.connect();
             } catch (NibeHeatPumpException e) {
-                logger.error("Error occured when connecting to heat pump", e);
+                logger.error("Error occurred when connecting to heat pump", e);
 
                 logger.warn("Closing Nibe heatpump message listener");
 
@@ -227,14 +227,14 @@ public void run() {
 
                     }
                 } catch (NibeHeatPumpException e) {
-                    logger.error("Error occured when received data from heat pump", e);
+                    logger.error("Error occurred when received data from heat pump", e);
                 }
             }
 
             try {
                 connector.disconnect();
             } catch (NibeHeatPumpException e) {
-                logger.error("Error occured when disconnecting form heat pump", e);
+                logger.error("Error occurred when disconnecting form heat pump", e);
             }
         }
 

File: bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java
Patch:
@@ -1132,7 +1132,7 @@ public static Hashtable<Integer, Short> ParseData(byte[] data) throws NibeHeatPu
                         }
                     }
                 } catch (ArrayIndexOutOfBoundsException e) {
-                    throw new NibeHeatPumpException("Error occured during data parsing", e);
+                    throw new NibeHeatPumpException("Error occurred during data parsing", e);
                 }
 
                 return values;

File: bundles/binding/org.openhab.binding.oceanic/src/main/java/org/openhab/binding/oceanic/internal/OceanicBinding.java
Patch:
@@ -568,7 +568,7 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
                                 try {
                                     value = createStateForType(valueSelector, response);
                                 } catch (BindingConfigParseException e) {
-                                    logger.error("An exception occured while converting {} to a valid state : {}",
+                                    logger.error("An exception occurred while converting {} to a valid state : {}",
                                             response, e.getMessage());
                                     return;
                                 }

File: bundles/binding/org.openhab.binding.onkyo/src/main/java/org/openhab/binding/onkyo/internal/eiscp/Eiscp.java
Patch:
@@ -315,7 +315,7 @@ private void sendCommand(StringBuilder eiscpCmd, boolean closeSocket, int retry)
                 outStream.writeBytes(eiscpCmd.toString());
                 outStream.flush();
             } catch (IOException ioException) {
-                logger.error("Error occured when sending command", ioException);
+                logger.error("Error occurred when sending command", ioException);
 
                 if (retry > 0) {
                     logger.debug("Retry {}...", retry);
@@ -498,7 +498,7 @@ public void run() {
 
                 } catch (EiscpException e) {
 
-                    logger.error("Error occured during message waiting", e);
+                    logger.error("Error occurred during message waiting", e);
 
                 } catch (SocketTimeoutException e) {
 
@@ -509,7 +509,7 @@ public void run() {
                 } catch (Exception e) {
 
                     if (interrupted != true && this.isInterrupted() != true) {
-                        logger.error("Error occured during message waiting", e);
+                        logger.error("Error occurred during message waiting", e);
 
                         restartConnection = true;
 

File: bundles/binding/org.openhab.binding.onkyo/src/main/java/org/openhab/binding/onkyo/internal/eiscp/EiscpSerial.java
Patch:
@@ -191,7 +191,7 @@ public void sendCommand(String eiscpCmd) {
 
         } catch (IOException e) {
 
-            logger.debug("IO error occured...reconnect and resend ones");
+            logger.debug("IO error occurred...reconnect and resend ones");
             closeSocket();
             connectSocket();
 

File: bundles/binding/org.openhab.binding.openenergymonitor/src/main/java/org/openhab/binding/openenergymonitor/protocol/OpenEnergyMonitorSerialConnector.java
Patch:
@@ -105,7 +105,7 @@ public byte[] receiveDatagram() throws OpenEnergyMonitorException {
          * }
          * } catch (IOException e) {
          * throw new OpenEnergyMonitorException(
-         * "Error occured while receiving data", e);
+         * "Error occurred while receiving data", e);
          * }
          */
 

File: bundles/binding/org.openhab.binding.openpaths/src/main/java/org/openhab/binding/openpaths/internal/OpenPathsBinding.java
Patch:
@@ -231,7 +231,7 @@ private Location getUserLocation(String accessKey, String secretKey) {
             logger.error("Error mapping JSON:\n" + toParse, e);
             return null;
         } catch (IOException e) {
-            logger.error("An I/O error occured while decoding JSON:\n" + response.getBody());
+            logger.error("An I/O error occurred while decoding JSON:\n" + response.getBody());
             return null;
         }
 

File: bundles/binding/org.openhab.binding.pioneeravr/src/main/java/org/openhab/binding/pioneeravr/internal/ipcontrolprotocol/IpControl.java
Patch:
@@ -269,7 +269,7 @@ private void sendCommand(StringBuilder ipCmd, boolean closeSocket, int retry) {
                 outStream.flush();
 
             } catch (IOException ioException) {
-                logger.error("Error occured when sending command", ioException);
+                logger.error("Error occurred when sending command", ioException);
 
                 if (retry > 0) {
                     logger.debug("Retry {}...", retry);
@@ -354,7 +354,7 @@ public void run() {
 
                 } catch (IpcontrolException e) {
 
-                    logger.error("Error occured during message waiting", e);
+                    logger.error("Error occurred during message waiting", e);
 
                 } catch (SocketTimeoutException e) {
 
@@ -366,7 +366,7 @@ public void run() {
                 } catch (Exception e) {
 
                     if (interrupted != true && this.isInterrupted() != true) {
-                        logger.error("Error occured during message waiting", e);
+                        logger.error("Error occurred during message waiting", e);
 
                         restartConnection = true;
 

File: bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexConnector.java
Patch:
@@ -571,7 +571,7 @@ private SessionUpdate getSessionUpdateFrom(String message) {
             } catch (JsonMappingException e) {
                 logger.error("Error mapping JSON", e);
             } catch (IOException e) {
-                logger.error("An I/O error occured while decoding JSON", e);
+                logger.error("An I/O error occurred while decoding JSON", e);
             }
 
             return null;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/RFXComBinding.java
Patch:
@@ -270,7 +270,7 @@ public void packetReceived(EventObject event, byte[] packet) {
                     }
                 }
             } catch (RFXComException e) {
-                logger.error("Error occured during packet receiving, data: {}",
+                logger.error("Error occurred during packet receiving, data: {}",
                         DatatypeConverter.printHexBinary(packet), e);
             }
         }

File: bundles/binding/org.openhab.binding.rme/src/main/java/org/openhab/binding/rme/internal/RMEBinding.java
Patch:
@@ -360,7 +360,7 @@ private void processData(String data) {
                                                     matcher.group(selector.getFieldIndex()));
                                         }
                                     } catch (BindingConfigParseException e) {
-                                        logger.error("An exception occured while converting {} to a valid state : {}",
+                                        logger.error("An exception occurred while converting {} to a valid state : {}",
                                                 matcher.group(selector.getFieldIndex()), e.getMessage());
                                         return;
                                     }

File: bundles/binding/org.openhab.binding.smarthomatic/src/main/java/org/openhab/binding/smarthomatic/internal/BaseStation.java
Patch:
@@ -189,15 +189,15 @@ public void eventOccured(String message) {
 
         // Filter out the lines that contain garbage data
         if (message.contains("(CRC wrong after decryption)")) {
-            logger.debug("BaseStation eventOccured: CRC wrong after decryption");
+            logger.debug("BaseStation eventOccurred: CRC wrong after decryption");
             return;
         }
 
         if (message.contains("Base Station")) {
             StringTokenizer strTok = new StringTokenizer(message, "\n");
             String data = null;
             versionInfo = new String[strTok.countTokens()];
-            logger.debug("BaseStation eventOccured - initial message ( {} )", strTok.countTokens());
+            logger.debug("BaseStation eventOccurred - initial message ( {} )", strTok.countTokens());
             int i = 0;
             while (strTok.hasMoreTokens()) {
                 versionInfo[i] = strTok.nextToken();
@@ -207,7 +207,7 @@ public void eventOccured(String message) {
         } else {
             String logResult = message.replaceAll("\n", "\\\\n").replaceAll("\r", "\\\\r").substring(0, 40);
 
-            logger.debug("BaseStation eventOccured - giving to Binding {}", logResult);
+            logger.debug("BaseStation eventOccurred - giving to Binding {}", logResult);
             if (bindingEventWorker != null) {
                 bindingEventWorker.eventOccured(message);
             }

File: bundles/binding/org.openhab.binding.smarthomatic/src/main/java/org/openhab/binding/smarthomatic/internal/SerialEventWorker.java
Patch:
@@ -17,7 +17,7 @@
 public interface SerialEventWorker {
 
     /**
-     * fired is a event on the serial line has occured
+     * fired is a event on the serial line has occurred
      * 
      * @param message
      */

File: bundles/binding/org.openhab.binding.sonance/src/main/java/org/openhab/binding/sonance/internal/SonanceBinding.java
Patch:
@@ -162,7 +162,7 @@ protected void execute() {
 
                         }
                     } catch (UnknownHostException e) {
-                        logger.error("UnknownHostException occured when connecting to amplifier {}:{}.", ip, port);
+                        logger.error("UnknownHostException occurred when connecting to amplifier {}:{}.", ip, port);
                     } catch (IOException e) {
                         logger.debug("Amplifier ({},{}) is offline, status can't be updated at this moment.", ip, port);
                         try {

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -310,7 +310,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
                 try {
                     sonosCommandType = SonosCommandType.getCommandType(sonosCommand, Direction.OUT);
                 } catch (Exception e) {
-                    logger.error("An exception occured while verifying command compatibility ({})", e.getMessage());
+                    logger.error("An exception occurred while verifying command compatibility ({})", e.getMessage());
                 }
 
                 if (sonosID != null) {

File: bundles/binding/org.openhab.binding.swegonventilation/src/main/java/org/openhab/binding/swegonventilation/protocol/SwegonVentilationSerialConnector.java
Patch:
@@ -139,7 +139,7 @@ public byte[] receiveDatagram() throws SwegonVentilationException {
                 }
             }
         } catch (IOException e) {
-            throw new SwegonVentilationException("Error occured while receiving data", e);
+            throw new SwegonVentilationException("Error occurred while receiving data", e);
         }
 
         return null;

File: bundles/binding/org.openhab.binding.systeminfo/src/main/java/org/openhab/binding/systeminfo/internal/SysteminfoBinding.java
Patch:
@@ -280,7 +280,7 @@ private State getData(SysteminfoCommandType commandType, Class<? extends Item> i
             }
 
         } catch (SigarException e) {
-            logger.error("Error occured while reading KPI's", e);
+            logger.error("Error occurred while reading KPI's", e);
         }
 
         return state;

File: bundles/binding/org.openhab.binding.urtsi/src/main/java/org/openhab/binding/urtsi/internal/InitializationException.java
Patch:
@@ -9,7 +9,7 @@
 package org.openhab.binding.urtsi.internal;
 
 /**
- * The InitializationException indicates that an error occured while initializing the device or while parsing the
+ * The InitializationException indicates that an error occurred while initializing the device or while parsing the
  * binding configuration.
  * 
  * @author Oliver Libutzki

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/rpc/XbmcConnector.java
Patch:
@@ -233,7 +233,7 @@ public void onMessage(String message) {
                 logger.error("Error mapping JSON", e);
                 return;
             } catch (IOException e) {
-                logger.error("An I/O error occured while decoding JSON", e);
+                logger.error("An I/O error occurred while decoding JSON", e);
                 return;
             }
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveSecurityCommandClassWithInitialization.java
Patch:
@@ -362,7 +362,7 @@ public Collection<SerialMessage> initialize(boolean firstIteration) {
                 logger.debug(
                         "NODE {}: call from NodeAdvancer initialize, inclusion flow, get the next message or wait for a response to the current one, nextMessage={}",
                         this.getNode().getNodeId(), nextMessage);
-                if (nextMessage == null) { // There is an outstanding request or a timeout error occured
+                if (nextMessage == null) { // There is an outstanding request or a timeout error occurred
                     if (securePairingComplete) {
                         inclusionStateTracker = null;
                         return null; // all done

File: bundles/io/org.openhab.io.caldav/src/main/java/org/openhab/io/caldav/internal/job/EventJob.java
Patch:
@@ -48,7 +48,7 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
             }
             if (eventContainer.getEventList().size() <= recIndex) {
                 throw new JobExecutionException("cannot get recurence-event for config: " + config + " and eventId: "
-                        + eventId + " and occurence: " + recIndex, false);
+                        + eventId + " and occurrence: " + recIndex, false);
             }
             CalDavEvent event = eventContainer.getEventList().get(recIndex);
 

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/model/Precipitation.java
Patch:
@@ -27,8 +27,7 @@ public class Precipitation {
             @Provider(name = ProviderName.WUNDERGROUND, property = "current_observation.precip_1hr_metric"),
             @Provider(name = ProviderName.WUNDERGROUND, property = "qpf_allday.mm"),
             @Provider(name = ProviderName.OPENWEATHERMAP, property = "rain.3h", converter = ConverterType.DOUBLE_3H),
-            @Provider(name = ProviderName.OPENWEATHERMAP, property = "rain", converter = ConverterType.DOUBLE_3H),
-            @Provider(name = ProviderName.OPENWEATHERMAP, property = "rain.1h"),
+            @Provider(name = ProviderName.OPENWEATHERMAP, property = "rain"),
             @Provider(name = ProviderName.WORLDWEATHERONLINE, property = "precipMM"),
             @Provider(name = ProviderName.HAMWEATHER, property = "precipMM"),
             @Provider(name = ProviderName.METEOBLUE, property = "precipitation_amount") })
@@ -37,6 +36,7 @@ public class Precipitation {
     @ProviderMappings({
             @Provider(name = ProviderName.WUNDERGROUND, property = "snow_allday.cm"),
             @Provider(name = ProviderName.OPENWEATHERMAP, property = "snow.3h", converter = ConverterType.DOUBLE_3H),
+            @Provider(name = ProviderName.OPENWEATHERMAP, property = "snow"),
             @Provider(name = ProviderName.HAMWEATHER, property = "snowDepthCM") })
     private Double snow;
 

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorBinding.java
Patch:
@@ -346,7 +346,7 @@ private State queryDataFromDevice(String deviceId, EpsonProjectorCommandType com
             }
 
         } catch (EpsonProjectorException e) {
-            logger.warn("Couldn't execute command '{}', {}", commmandType.toString(), e);
+            logger.warn("Couldn't execute command '{}', {}", commmandType.toString(), e.getMessage());
 
         } catch (Exception e) {
             logger.warn("Couldn't create state of type '{}'", itemType);
@@ -521,7 +521,7 @@ private void sendDataToDevice(String deviceId, EpsonProjectorCommandType commman
             }
 
         } catch (EpsonProjectorException e) {
-            logger.error("Couldn't execute command '{}', {}", commmandType, e);
+            logger.warn("Couldn't execute command '{}', {}", commmandType, e.getMessage());
 
         }
     }

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/DSMRBinding.java
Patch:
@@ -20,7 +20,6 @@
 import org.openhab.binding.dsmr.internal.messages.OBISMsgFactory;
 import org.openhab.binding.dsmr.internal.p1telegram.P1TelegramParser;
 import org.openhab.core.binding.AbstractActiveBinding;
-import org.openhab.core.types.State;
 import org.osgi.service.cm.ConfigurationException;
 import org.osgi.service.cm.ManagedService;
 import org.slf4j.Logger;
@@ -160,7 +159,7 @@ protected void execute() {
             for (DSMRBindingProvider provider : providers) {
                 for (String itemName : provider.getItemNames()) {
                     String dsmrItemId = provider.getDSMRItemID(itemName);
-                    for (CosemValue<? extends State> openHABValue : msg.getOpenHABValues()) {
+                    for (CosemValue<? extends Object> openHABValue : msg.getOpenHABValues()) {
                         // DSMR items with an empty dsmrItemId are filtered
                         // automatically
                         if (dsmrItemId.equals(openHABValue.getDsmrItemId())) {

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcPersistenceService.java
Patch:
@@ -120,7 +120,7 @@ public void store(Item item) {
     public void store(Item item, String alias) {
         // Don not store undefined/uninitialised data
         if (item.getState() instanceof UnDefType) {
-            logger.warn("JDBC::store: ignore Item '{}' because it is UnDefType", item.getName());
+            logger.debug("JDBC::store: ignore Item '{}' because it is UnDefType", item.getName());
             return;
         }
         if (!checkDBAccessability()) {

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/FritzboxTr064BindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/CallEvent.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/CallMonitor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/FritzboxTr064GenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Helper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/PhoneBookEntry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/PhonebookManager.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -117,7 +117,7 @@ public String getNameFromNumber(String number, int compareCount) {
      */
     public Document downloadPhonebook(int id) {
         logger.info("Downloading phonebook ID {}", id);
-        String phoneBookUrl = _tr064comm.getTr064Value("phonebook:" + id);
+        String phoneBookUrl = _tr064comm.getTr064Value(new ItemConfiguration("phonebook", String.valueOf(id)));
         Document phoneBook = _tr064comm.getFboxXmlResponse(phoneBookUrl);
         logger.debug("Downloaded Phonebook:");
         logger.trace(Helper.documentToString(phoneBook));

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Service.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java
Patch:
@@ -676,6 +676,8 @@ public String parseValueFromSoapMessage(SOAPMessage sm, ItemMap mapping, String
         _alItemMap.add(new ItemMap("modelName", "GetInfo", "DeviceInfo-com:serviceId:DeviceInfo1", "", "NewModelName"));
         _alItemMap.add(new ItemMap("wanip", "GetExternalIPAddress",
                 "urn:WANPPPConnection-com:serviceId:WANPPPConnection1", "", "NewExternalIPAddress"));
+        _alItemMap.add(new ItemMap("externalWanip", "GetExternalIPAddress",
+                "urn:WANIPConnection-com:serviceId:WANIPConnection1", "", "NewExternalIPAddress"));
 
         // Wifi 2,4GHz
         ItemMap imWifi24Switch = new ItemMap("wifi24Switch", "GetInfo",

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcBaseDAO.java
Patch:
@@ -142,7 +142,7 @@ private void initSqlQueries() {
         SQL_CREATE_ITEMS_TABLE_IF_NOT = "CREATE TABLE IF NOT EXISTS #itemsManageTable# (ItemId INT NOT NULL AUTO_INCREMENT,#colname# #coltype# NOT NULL,PRIMARY KEY (ItemId))";
         SQL_DELETE_ITEMS_ENTRY = "DELETE FROM items WHERE ItemName=#itemname#";
         SQL_GET_ITEMID_TABLE_NAMES = "SELECT itemid, itemname FROM #itemsManageTable#";
-        SQL_GET_ITEM_TABLES = "SELECT table_name FROM information_schema.tables WHERE table_type='BASE TABLE' AND table_schema=#jdbcUriDatabaseName# AND NOT table_name=#itemsManageTable#";
+        SQL_GET_ITEM_TABLES = "SELECT table_name FROM information_schema.tables WHERE table_type='BASE TABLE' AND table_schema='#jdbcUriDatabaseName#' AND NOT table_name='#itemsManageTable#'";
         SQL_CREATE_ITEM_TABLE = "CREATE TABLE IF NOT EXISTS #tableName# (time #tablePrimaryKey# NOT NULL, value #dbType#, PRIMARY KEY(time))";
         SQL_INSERT_ITEM_VALUE = "INSERT INTO #tableName# (TIME, VALUE) VALUES( #tablePrimaryValue#, ? ) ON DUPLICATE KEY UPDATE VALUE= ?";
     }

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcPostgresqlDAO.java
Patch:
@@ -54,7 +54,7 @@ private void initSqlQueries() {
         SQL_IF_TABLE_EXISTS = "SELECT * FROM PG_TABLES WHERE TABLENAME='#searchTable#'";
         SQL_CREATE_ITEMS_TABLE_IF_NOT = "CREATE TABLE IF NOT EXISTS #itemsManageTable# (itemid SERIAL NOT NULL, #colname# #coltype# NOT NULL, CONSTRAINT #itemsManageTable#_pkey PRIMARY KEY (itemid))";
         SQL_CREATE_NEW_ENTRY_IN_ITEMS_TABLE = "INSERT INTO items (itemname) SELECT itemname FROM #itemsManageTable# UNION VALUES ('#itemname#') EXCEPT SELECT itemname FROM items";
-        SQL_GET_ITEM_TABLES = "SELECT table_name FROM information_schema.tables WHERE table_type='BASE TABLE' AND table_schema='public' AND NOT table_name=#itemsManageTable#";
+        SQL_GET_ITEM_TABLES = "SELECT table_name FROM information_schema.tables WHERE table_type='BASE TABLE' AND table_schema='public' AND NOT table_name='#itemsManageTable#'";
         // http://stackoverflow.com/questions/17267417/how-do-i-do-an-upsert-merge-insert-on-duplicate-update-in-postgresql
         // for later use, PostgreSql > 9.5 to prevent PRIMARY key violation use:
         // SQL_INSERT_ITEM_VALUE = "INSERT INTO #tableName# (TIME, VALUE) VALUES( NOW(), CAST( ? as #dbType#) ) ON

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java
Patch:
@@ -446,6 +446,7 @@ private SOAPMessage readSoapResponse(String soapActionHeader, SOAPMessage reques
             if (slResponse.getStatusCode() == 401) {
                 logger.error(
                         "Could not read response from FritzBox. Unauthorized! Check User/PW in config. Create user for tr064 requests");
+                _httpClientContext.getTargetAuthState().reset();
                 return null;
             }
 
@@ -476,6 +477,7 @@ private SOAPMessage readSoapResponse(String soapActionHeader, SOAPMessage reques
             // Make sure connection is released. If error occurred make sure to print in log
             if (exceptionOccurred) {
                 logger.error("Releasing connection to FritzBox because of error!");
+                _httpClientContext.getTargetAuthState().reset();
             } else {
                 logger.debug("Releasing connection");
             }

File: bundles/binding/org.openhab.binding.ecotouch/src/main/java/org/openhab/binding/ecotouch/internal/EcoTouchBinding.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.ecotouch.internal;
 
 import java.math.BigDecimal;
+import java.math.RoundingMode;
 import java.util.Dictionary;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -127,7 +128,8 @@ protected void execute() {
                     State value;
                     if (item.getType() == EcoTouchTags.Type.Analog) {
                         // analog value encoded as a scaled integer
-                        BigDecimal decimal = new BigDecimal(heatpumpValue).divide(new BigDecimal(10));
+                        BigDecimal decimal = new BigDecimal(heatpumpValue).divide(BigDecimal.valueOf(item.getDivisor()),
+                                1, RoundingMode.HALF_UP);
                         value = new DecimalType(decimal);
                     } else if (item.getType() == EcoTouchTags.Type.Word) {
                         // integer

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java
Patch:
@@ -303,6 +303,7 @@ public void handleMessage(String fromPort, Msg msg) {
             // not status features
             for (DeviceFeature f : m_features.values()) {
                 if (!f.isStatusFeature()) {
+                    logger.debug("----- applying message to feature: {}", f.getName());
                     if (f.handleMessage(msg, fromPort)) {
                         // handled a reply to a query,
                         // mark it as processed

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/MessageHandler.java
Patch:
@@ -973,7 +973,7 @@ public int transform(int raw) {
 
         private int extractValue(Msg msg, int group) throws FieldException {
             String lowByte = getStringParameter("low_byte", "");
-            if (!lowByte.equals("")) {
+            if (lowByte.equals("")) {
                 logger.error("{} handler misconfigured, missing low_byte!", nm());
                 return 0;
             }

File: bundles/binding/org.openhab.binding.modbus.test/src/test/java/org/openhab/binding/modbus/internal/TestCaseSupport.java
Patch:
@@ -98,7 +98,7 @@ public enum ServerType {
     /**
      * Max time to wait for connections/requests from client
      */
-    protected static final int MAX_WAIT_REQUESTS_MILLIS = 1000;
+    protected int MAX_WAIT_REQUESTS_MILLIS = 1000;
 
     /**
      * The server runs in single thread, only one connection is accepted at a time.

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/net/TCPConnectionHandler.java
Patch:
@@ -64,7 +64,6 @@ public void run() {
             do {
                 // 1. read the request
                 ModbusRequest request = m_Transport.readRequest();
-                logger.trace("Request:{}", request.getHexMessage());
                 ModbusResponse response = null;
 
                 // test if Process image exists
@@ -73,8 +72,8 @@ public void run() {
                 } else {
                     response = request.createResponse();
                 }
-                logger.debug("Request:{}", request.getHexMessage());
-                logger.debug("Response:{}", response.getHexMessage());
+                logger.debug("Request (transaction id {}): {}", request.getHexMessage(), request.getTransactionID());
+                logger.debug("Response (transaction id {}): {}", response.getHexMessage(), response.getTransactionID());
 
                 m_Transport.writeMessage(response);
             } while (true);

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/pooling/ModbusSlaveConnectionFactoryImpl.java
Patch:
@@ -123,6 +123,8 @@ public PooledObject<ModbusSlaveConnection> wrap(ModbusSlaveConnection connection
 
     @Override
     public void destroyObject(ModbusSlaveEndpoint endpoint, final PooledObject<ModbusSlaveConnection> obj) {
+        logger.trace("destroyObject for connection {} and endpoint {} -> closing the connection", obj.getObject(),
+                endpoint);
         obj.getObject().resetConnection();
     }
 
@@ -188,8 +190,7 @@ public Map<ModbusSlaveEndpoint, EndpointPoolConfiguration> getEndpointPoolConfig
     }
 
     public void applyEndpointPoolConfigs(Map<ModbusSlaveEndpoint, EndpointPoolConfiguration> endpointPoolConfigs) {
-        this.endpointPoolConfigs = new ConcurrentHashMap<>(
-                endpointPoolConfigs);
+        this.endpointPoolConfigs = new ConcurrentHashMap<>(endpointPoolConfigs);
     }
 
     private void tryConnect(ModbusSlaveEndpoint endpoint, PooledObject<ModbusSlaveConnection> obj,

File: bundles/binding/org.openhab.binding.caldav-personal/src/main/java/org/openhab/binding/caldav_personal/internal/CalDavBinding.java
Patch:
@@ -220,7 +220,7 @@ private void updateItemsForEvent() {
         for (String item : bindingProvider.getItemNames()) {
             CalDavConfig config = bindingProvider.getConfig(item);
             List<CalDavEvent> events = eventCache.get(config.getUniqueEventListKey());
-            if (events == null) {
+            if (events == null && this.calDavLoader != null) {
                 CalDavQuery query = getQueryForConfig(config);
                 events = this.calDavLoader.getEvents(query);
                 eventCache.put(config.getUniqueEventListKey(), events);

File: bundles/binding/org.openhab.binding.modbus.test/src/test/java/org/openhab/binding/modbus/internal/ConfigUpdatedTestCase.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -34,7 +34,7 @@ public class ConfigUpdatedTestCase extends TestCaseSupport {
 
     @Parameters
     public static List<Object[]> data() {
-        List<Object[]> parameters = new ArrayList<Object[]>();
+        List<Object[]> parameters = new ArrayList<>();
         for (ServerType server : TEST_SERVERS) {
             parameters.add(new Object[] { server });
         }

File: bundles/binding/org.openhab.binding.modbus.test/src/test/java/org/openhab/binding/modbus/internal/ErroringQueriesTestCase.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -119,8 +119,8 @@ public void run() {
             // After 100ms the binding has not yet given up, i.e. no UNDEF posted to event bus
             verifyNoMoreInteractions(eventPublisher);
 
-            // After 100ms+300ms the timeout of 300ms has passed and UNDEF should have been posted
-            lock.await(300, TimeUnit.MILLISECONDS);
+            // After 100ms+300ms+margin 500ms the timeout of 300ms has passed and UNDEF should have been posted
+            lock.await(100 + 300 + 500, TimeUnit.MILLISECONDS);
             verify(eventPublisher).postUpdate("Item1", UnDefType.UNDEF);
             verifyNoMoreInteractions(eventPublisher);
         } finally {

File: bundles/binding/org.openhab.binding.modbus.test/src/test/java/org/openhab/binding/modbus/internal/ModbusSlaveEndpointTestCase.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.modbus.test/src/test/java/org/openhab/binding/modbus/internal/ResultCaptor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -15,7 +15,7 @@
 
 public class ResultCaptor<T> implements Answer<T> {
 
-    private ArrayList<T> results = new ArrayList<T>();
+    private ArrayList<T> results = new ArrayList<>();
     private long waitMillis;
 
     public ResultCaptor(long waitMillis) {

File: bundles/binding/org.openhab.binding.modbus.test/src/test/java/org/openhab/binding/modbus/internal/SimultaneousReadWriteTestCase.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -43,7 +43,7 @@ public class SimultaneousReadWriteTestCase extends TestCaseSupport {
 
     @Parameters
     public static List<Object[]> parameters() {
-        List<Object[]> parameters = new ArrayList<Object[]>();
+        List<Object[]> parameters = new ArrayList<>();
         for (ServerType serverType : TestCaseSupport.TEST_SERVERS) {
             parameters.add(new Object[] { serverType, new short[] { 5, 5, 5, 5, 5 }, ModbusBindingProvider.TYPE_HOLDING,
                     ModbusBindingProvider.VALUE_TYPE_INT16, new DecimalType(5.0) });

File: bundles/binding/org.openhab.binding.modbus.test/src/test/java/org/openhab/binding/modbus/internal/TestCaseSupport.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -203,7 +203,7 @@ protected static void putSlaveConfigParameter(Dictionary<String, Object> config,
     }
 
     protected static Dictionary<String, Object> newLongPollBindingConfig() {
-        Dictionary<String, Object> config = new Hashtable<String, Object>();
+        Dictionary<String, Object> config = new Hashtable<>();
         config.put("poll", String.valueOf(REFRESH_INTERVAL));
         return config;
     }
@@ -273,7 +273,7 @@ protected void verifyBitItems(String expectedBits) {
 
     @Before
     public void setUp() throws Exception {
-        modbustRequestCaptor = new ResultCaptor<ModbusRequest>(artificialServerWait);
+        modbustRequestCaptor = new ResultCaptor<>(artificialServerWait);
         MockitoAnnotations.initMocks(this);
         startServer();
     }

File: bundles/binding/org.openhab.binding.modbus.test/src/test/java/org/openhab/binding/modbus/internal/WriteCoilsAndDiscreteTestCase.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -55,7 +55,7 @@ public static class ExpectedFailure extends AssertionError {
      * @return
      */
     private static ArrayList<Object[]> generateParameters(Object expectedValue, Command... commands) {
-        ArrayList<Object[]> parameters = new ArrayList<Object[]>();
+        ArrayList<Object[]> parameters = new ArrayList<>();
         for (ServerType serverType : TEST_SERVERS) {
             for (boolean discreteInputInitialValue : new Boolean[] { true, false }) {
                 for (boolean coilInitialValue : new Boolean[] { true, false }) {

File: bundles/binding/org.openhab.binding.modbus.test/src/test/java/org/openhab/binding/modbus/internal/WriteRegistersTestCase.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/ModbusException.java
Patch:
@@ -37,7 +37,7 @@ public ModbusException() {
      * Constructs a new <tt>ModbusException</tt>
      * instance with the given message.
      * <p>
-     * 
+     *
      * @param message the message describing this
      *            <tt>ModbusException</tt>.
      */

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/ModbusSlaveException.java
Patch:
@@ -35,7 +35,7 @@ public class ModbusSlaveException extends ModbusException {
      * Types are defined according to the protocol
      * specification in <tt>net.wimpi.modbus.Modbus</tt>.
      * <p>
-     * 
+     *
      * @param TYPE the type of exception that occured.
      *
      * @see net.wimpi.modbus.Modbus
@@ -51,7 +51,7 @@ public ModbusSlaveException(int TYPE) {
      * Types are defined according to the protocol
      * specification in <tt>net.wimpi.modbus.Modbus</tt>.
      * <p>
-     * 
+     *
      * @return the type of this <tt>ModbusSlaveException</tt>.
      *
      * @see net.wimpi.modbus.Modbus
@@ -67,7 +67,7 @@ public int getType() {
      * Types are defined according to the protocol
      * specification in <tt>net.wimpi.modbus.Modbus</tt>.
      * <p>
-     * 
+     *
      * @param TYPE the type to test this
      *            <tt>ModbusSlaveException</tt> type against.
      *

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/io/FastByteArrayInputStream.java
Patch:
@@ -194,7 +194,7 @@ public boolean markSupported() {
     /**
      * Re-positions this stream to the position at
      * the time the mark method was last called this <tt>FastByteArrayInputStream</tt>.
-     * 
+     *
      * @throws IOException if the readlimit was exceeded.
      */
     @Override

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/io/ModbusSocketBasedTransportFactory.java
Patch:
@@ -3,5 +3,5 @@
 import java.net.Socket;
 
 public interface ModbusSocketBasedTransportFactory {
-  public ModbusTransport create(Socket socket);
+    public ModbusTransport create(Socket socket);
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/io/ModbusUDPTransport.java
Patch:
@@ -44,7 +44,7 @@ public class ModbusUDPTransport implements ModbusTransport {
      * Constructs a new <tt>ModbusTransport</tt> instance,
      * for a given <tt>UDPTerminal</tt>.
      * <p>
-     * 
+     *
      * @param terminal the <tt>UDPTerminal</tt> used for message transport.
      */
     public ModbusUDPTransport(UDPTerminal terminal) {

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/io/ModbusUDPTransportFactory.java
Patch:
@@ -3,5 +3,5 @@
 import net.wimpi.modbus.net.UDPTerminal;
 
 public interface ModbusUDPTransportFactory {
-  public ModbusTransport create(UDPTerminal terminal);
+    public ModbusTransport create(UDPTerminal terminal);
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/msg/ExceptionResponse.java
Patch:
@@ -74,7 +74,7 @@ public ExceptionResponse(int fc, int exc) {
      * Returns the Modbus exception code of this
      * <tt>ExceptionResponse</tt>.
      * <p>
-     * 
+     *
      * @return the exception code as <tt>int</tt>.
      */
     public int getExceptionCode() {

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/msg/ModbusMessageImpl.java
Patch:
@@ -78,7 +78,7 @@ public int getTransactionID() {
      * The identifier should be a 2-byte (short) non negative
      * integer value valid in the range of 0-65535.<br>
      * <p>
-     * 
+     *
      * @param tid the transaction identifier as <tt>int</tt>.
      */
     public void setTransactionID(int tid) {
@@ -98,7 +98,7 @@ public int getProtocolID() {
      * The identifier should be a 2-byte (short) non negative
      * integer value valid in the range of 0-65535.<br>
      * <p>
-     * 
+     *
      * @param pid the protocol identifier as <tt>int</tt>.
      */
     public void setProtocolID(int pid) {
@@ -121,7 +121,7 @@ public int getDataLength() {
      * of each and every message. Thus this message will
      * append two (2) to the passed in integer value.
      * <p>
-     * 
+     *
      * @param length the data length as <tt>int</tt>.
      */
     public void setDataLength(int length) {

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/msg/ModbusRequest.java
Patch:
@@ -32,7 +32,7 @@ public abstract class ModbusRequest extends ModbusMessageImpl {
      * Returns the <tt>ModbusResponse</tt> that
      * correlates with this <tt>ModbusRequest</tt>.
      * <p>
-     * 
+     *
      * @return the corresponding <tt>ModbusResponse</tt>.
      *
      *         public abstract ModbusResponse getResponse();
@@ -45,7 +45,7 @@ public abstract class ModbusRequest extends ModbusMessageImpl {
      * The implementation should take care about assembling
      * the reply to this <tt>ModbusRequest</tt>.
      * <p>
-     * 
+     *
      * @return the corresponding <tt>ModbusResponse</tt>.
      */
     public abstract ModbusResponse createResponse();

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/msg/ModbusResponse.java
Patch:
@@ -36,7 +36,7 @@ public abstract class ModbusResponse extends ModbusMessageImpl {
      * Utility method to set the raw data of the message.
      * Should not be used except under rare circumstances.
      * <p>
-     * 
+     *
      * @param msg the <tt>byte[]</tt> resembling the raw modbus
      *            response message.
      */

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/msg/WriteMultipleCoilsResponse.java
Patch:
@@ -54,7 +54,7 @@ public WriteMultipleCoilsResponse() {
      * Constructs a new <tt>WriteMultipleCoilsResponse</tt>
      * instance with a given count of coils (i.e. bits).
      * <b>
-     * 
+     *
      * @param ref the offset to begin writing from.
      * @param count the number of bits to be read.
      */
@@ -70,7 +70,7 @@ public WriteMultipleCoilsResponse(int ref, int count) {
      * Returns the reference of the register to to start
      * reading from with this <tt>WriteMultipleCoilsRequest</tt>.
      * <p>
-     * 
+     *
      * @return the reference of the register
      *         to start reading from as <tt>int</tt>.
      */
@@ -82,7 +82,7 @@ public int getReference() {
      * Returns the number of bits (i.e. coils)
      * read with the request.
      * <p>
-     * 
+     *
      * @return the number of bits that have been read.
      */
     public int getBitCount() {

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/net/ModbusSlaveConnection.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -11,7 +11,7 @@
 public interface ModbusSlaveConnection {
     /**
      * Connects the connection to the endpoint
-     * 
+     *
      * @return whether connection was successfull
      * @throws Exception on any connection errors
      */

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/net/ModbusTCPListener.java
Patch:
@@ -112,7 +112,7 @@ public void setPort(int port) {
 
     /**
      * Return local port of the ServerSocket.
-     * 
+     *
      * @return
      */
     public int getLocalPort() {

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/net/SerialConnectionFactory.java
Patch:
@@ -3,5 +3,5 @@
 import net.wimpi.modbus.util.SerialParameters;
 
 public interface SerialConnectionFactory {
-  public SerialConnection create(SerialParameters parameters);
+    public SerialConnection create(SerialParameters parameters);
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/net/TCPSlaveConnectionFactory.java
Patch:
@@ -3,5 +3,5 @@
 import java.net.Socket;
 
 public interface TCPSlaveConnectionFactory {
-  public TCPSlaveConnection create(Socket socket);
+    public TCPSlaveConnection create(Socket socket);
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/net/UDPSlaveTerminalFactory.java
Patch:
@@ -1,8 +1,7 @@
 package net.wimpi.modbus.net;
 
 import java.net.InetAddress;
-import java.net.Socket;
 
 public interface UDPSlaveTerminalFactory {
-  public UDPSlaveTerminal create(InetAddress interfac, int port);
+    public UDPSlaveTerminal create(InetAddress interfac, int port);
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/procimg/SimpleRegister.java
Patch:
@@ -37,7 +37,7 @@ public SimpleRegister() {
 
     /**
      * Constructs a new <tt>SimpleRegister</tt> instance.
-     * 
+     *
      * @param b1 the first (hi) byte of the word.
      * @param b2 the second (low) byte of the word.
      */

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/util/AtomicCounter.java
Patch:
@@ -60,7 +60,7 @@ public synchronized int increment() {
 
     /**
      * Returns the value of this <tt>AtomicInteger</tt>.
-     * 
+     *
      * @return the actual value.
      */
     public synchronized int get() {

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/util/Mutex.java
Patch:
@@ -37,7 +37,7 @@
  * potential concurrency, at the cost of additional complexity and
  * overhead that would normally make this worthwhile only in cases of
  * extreme contention.
- * 
+ *
  * <pre>
  * class Node {
  * Object item;

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/util/SerialParameterValidator.java
Patch:
@@ -26,7 +26,7 @@ public class SerialParameterValidator {
 
     /**
      * validating the given baudRate
-     * 
+     *
      * @param baudRate value to be checked
      * @return whether if the value is valid or not
      */

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/ModbusBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -8,7 +8,7 @@
  */
 package org.openhab.binding.modbus;
 
-import org.openhab.binding.modbus.internal.ModbusGenericBindingProvider.ModbusBindingConfig;
+import org.openhab.binding.modbus.internal.ModbusBindingConfig;
 import org.openhab.core.binding.BindingProvider;
 
 /**

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusIPSlave.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusSerialSlave.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusTcpSlave.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -34,7 +34,7 @@ public ModbusTcpSlave(String slave, KeyedObjectPool<ModbusSlaveEndpoint, ModbusS
 
     /**
      * Performs physical write to device when slave type is "holding" using Modbus FC06 function
-     * 
+     *
      * @param command command received from OpenHAB
      * @param readRegister reference to the register that stores current value
      * @param writeRegister register reference to write data to

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusUdpSlave.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/pooling/EndpointPoolConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/pooling/ModbusIPSlaveEndpoint.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/pooling/ModbusSerialSlaveEndpoint.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/pooling/ModbusSlaveConnectionFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/pooling/ModbusSlaveEndpoint.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/pooling/ModbusSlaveEndpointVisitor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/pooling/ModbusTCPSlaveEndpoint.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/pooling/ModbusUDPSlaveEndpoint.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016, openHAB.org and others.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/GCalEventDownloader.java
Patch:
@@ -107,7 +107,7 @@ protected long getRefreshInterval() {
 
     @Override
     protected String getName() {
-        return "Google Calender Event-Downloader";
+        return "Google Calendar Event Downloader";
     }
 
     @Override
@@ -156,7 +156,7 @@ protected void execute() {
      *         the amount of events to process.
      */
     private static Events downloadEventFeed() {
-        // TODO: teichsta: there could be more than one calender url in openHAB.cfg
+        // TODO: teichsta: there could be more than one calendar url in openHAB.cfg
         // for now we accept this limitation of downloading just one feed ...
 
         if (StringUtils.isBlank(calendar_name)) {
@@ -220,7 +220,7 @@ private static void checkIfFullCalendarFeed(List<Event> list) {
         if (list != null && !list.isEmpty()) {
             Event referenceEvent = list.get(0);
             if (referenceEvent.getICalUID() == null || referenceEvent.getStart().toString().isEmpty()) {
-                logger.warn("calender entries are incomplete - please make sure to use the full calendar feed");
+                logger.warn("calendar entries are incomplete - please make sure to use the full calendar feed");
             }
 
         }

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcConfiguration.java
Patch:
@@ -297,7 +297,7 @@ private void testJDBCDriver(String driver) {
             } else if (serviceName.equals("postgresql")) {
                 warn += "\tPostgreSQL:version >= 9.4.1208 from    http://mvnrepository.com/artifact/org.postgresql/postgresql\n";
             } else if (serviceName.equals("sqlite")) {
-                warn += "\tSQLite:    version >= 3.8.11.2 from           http://mvnrepository.com/artifact/org.xerial/sqlite-jdbc\n";
+                warn += "\tSQLite:    version >= 3.16.1 from           http://mvnrepository.com/artifact/org.xerial/sqlite-jdbc\n";
             }
             logger.warn(warn, serviceName);
         }

File: bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyQResponseCode.java
Patch:
@@ -30,7 +30,7 @@ public enum MyQResponseCode {
     DEVICE_LEARNMODE(305, "The device is currently in Learn Mode."),
     DEVICE_NOT_RESPONDING(308, "The device is not responding. Please check that the device is powered and in range."),
     DEVICE_OFFLINE(309, "The gateway or hub is offline. Please check the power and network connections."),
-    UNKNOWN(-1, "Unknow resonse");
+    UNKNOWN(-1, "Unknown resonse");
 
     private int code;
     private String desc;

File: bundles/binding/org.openhab.binding.fatekplc/src/main/java/org/openhab/binding/fatekplc/internal/FatekPLCBinding.java
Patch:
@@ -19,15 +19,13 @@
 import org.openhab.binding.fatekplc.FatekPLCBindingProvider;
 import org.openhab.binding.fatekplc.items.FatekPLCItem;
 import org.openhab.core.binding.AbstractActiveBinding;
-import org.openhab.core.items.ItemRegistry;
 import org.openhab.core.types.Command;
 import org.osgi.service.cm.ConfigurationException;
 import org.osgi.service.cm.ManagedService;
+import org.simplify4u.jfatek.io.FatekIOException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.github.s4u.jfatek.io.FatekIOException;
-
 /**
  * Binding implementation for Fatek PLC.
  *

File: bundles/binding/org.openhab.binding.fatekplc/src/main/java/org/openhab/binding/fatekplc/items/FatekDateTimeItem.java
Patch:
@@ -20,9 +20,9 @@
 import org.openhab.core.library.types.DateTimeType;
 import org.openhab.core.types.State;
 import org.openhab.model.item.binding.BindingConfigParseException;
-import com.github.s4u.jfatek.registers.Reg;
-import com.github.s4u.jfatek.registers.RegValue;
-import com.github.s4u.jfatek.registers.UnknownRegNameException;
+import org.simplify4u.jfatek.registers.Reg;
+import org.simplify4u.jfatek.registers.RegValue;
+import org.simplify4u.jfatek.registers.UnknownRegNameException;
 
 /**
  * DateTime item implementation.

File: bundles/binding/org.openhab.binding.fatekplc/src/main/java/org/openhab/binding/fatekplc/serial/SerialFatekConnectionFactory.java
Patch:
@@ -12,9 +12,9 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 
-import com.github.s4u.jfatek.io.FatekConfig;
-import com.github.s4u.jfatek.io.FatekConnection;
-import com.github.s4u.jfatek.io.FatekConnectionFactory;
+import org.simplify4u.jfatek.io.FatekConfig;
+import org.simplify4u.jfatek.io.FatekConnection;
+import org.simplify4u.jfatek.io.FatekConnectionFactory;
 
 /**
  * Serial connection for Fatek PLC binding.

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/CupsBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/internal/CupsActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2016 by the respective copyright holders.
+ * Copyright (c) 2010-2017 by the respective copyright holders.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/io/org.openhab.io.transport.cul/src/main/java/org/openhab/io/transport/cul/CULLifecycleManager.java
Patch:
@@ -85,13 +85,13 @@ public void open() {
         try {
             cul = culManager.getOpenCULHandler(config);
         } catch (CULDeviceException e) {
-            logger.error("Can't open CUL", e);
+            logger.warn("Can't open CUL", e);
         }
 
         try {
             listener.open(cul);
         } catch (CULCommunicationException e) {
-            logger.error("Can't set parameters", e);
+            logger.warn("Can't start listener", e);
             cul = null;
         }
     }

File: bundles/io/org.openhab.io.transport.cul/src/main/java/org/openhab/io/transport/cul/internal/AbstractCULHandler.java
Patch:
@@ -54,7 +54,7 @@ public void run() {
                     try {
                         writeMessage(command);
                     } catch (CULCommunicationException e) {
-                        logger.error("Error while writing command to CUL", e);
+                        logger.warn("Error while writing command to CUL", e);
                     }
                 }
                 try {

File: bundles/io/org.openhab.io.transport.cul/src/main/java/org/openhab/io/transport/cul/CULLifecycleManager.java
Patch:
@@ -77,6 +77,7 @@ public void config(Dictionary<String, ?> allConfig) throws ConfigurationExceptio
 
     public void open() {
         if (config == null || (cul != null && config.equals(cul.getConfig()))) {
+            logger.warn("CUL config is NULL, doing nothing");
             return;
         }
 

File: bundles/binding/org.openhab.binding.fht/src/main/java/org/openhab/binding/fht/internal/FHTBinding.java
Patch:
@@ -559,7 +559,7 @@ private void updateTime(FHTBindingConfig config) {
 
     private void writeRegister(String device, String register, String value) {
         StringBuffer sendBuffer = new StringBuffer(8);
-        sendBuffer.append('F');
+        sendBuffer.append('T');
         sendBuffer.append(device);
         sendBuffer.append(register); // register to write
         sendBuffer.append(value);
@@ -587,7 +587,7 @@ private void writeRegisters(String deviceAddress, WriteRegisterCommand... comman
             return;
         }
         StringBuffer sendBuffer = new StringBuffer(8);
-        sendBuffer.append('F');
+        sendBuffer.append('T');
         sendBuffer.append(deviceAddress);
         for (WriteRegisterCommand command : commands) {
             sendBuffer.append(command.register);

File: bundles/io/org.openhab.io.gcal.test/src/test/java/org/openhab/io/gcal/internal/util/ExecuteCommandJobTest.java
Patch:
@@ -47,7 +47,7 @@ public void testParseCommand() {
         content = commandJob.parseCommand("send ItemName 125");
         Assert.assertEquals("send", content[0]);
         Assert.assertEquals("ItemName", content[1]);
-        Assert.assertEquals("125.0", content[2]);
+        Assert.assertEquals("125", content[2]);
 
         content = commandJob.parseCommand("> say(\"Hello\")");
         Assert.assertEquals(">", content[0]);

File: bundles/binding/org.openhab.binding.fht/src/main/java/org/openhab/binding/fht/internal/FHTBinding.java
Patch:
@@ -220,7 +220,7 @@ private void setDesiredTemperature(FHTBindingConfig config, DecimalType command)
             int temp = (int) (temperature * 2.0);
 
             FHTDesiredTemperatureCommand commandItem = new FHTDesiredTemperatureCommand(config.getFullAddress(),
-                    "41" + Integer.toHexString(temp));
+                    "41" + String.format("%02X", temp));
             logger.debug("Queuing new desired temperature");
             temperatureCommandQueue.put(config.getFullAddress(), commandItem);
         } else {

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpBinding.java
Patch:
@@ -194,7 +194,8 @@ public void execute() {
                                         transformationType);
                             }
                         } catch (TransformationException te) {
-                            logger.error("Transformation '{}' threw an exception. [response={}]", transformation, response, te);
+                            logger.error("Transformation '{}' threw an exception. [response={}]", transformation,
+                                    response, te);
 
                             // in case of an error we return the response without any
                             // transformation

File: bundles/binding/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200ErrorService.java
Patch:
@@ -74,7 +74,6 @@ void updateErrors(JSONObject nodeRoot) {
                 }
             } catch (Exception e) {
                 logger.error("Error in parsing of the errorlist: {}", e.getMessage());
-                e.printStackTrace();
             }
         }
     }

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/connection/OneWireConnection.java
Patch:
@@ -318,7 +318,7 @@ public static synchronized String readFromOneWire(AbstractOneWireDevicePropertyB
                     reconnect();
                 }
             } catch (IOException ioe) {
-                logger.error("couldn't establish network connection while read attempt {} '{}'" + " ip:port={}:{}",
+                logger.error("couldn't establish network connection while read attempt {} '{}' ip:port={}:{}",
                         lvAttempt, lvDevicePropertyPath, cvIp, cvPort, ioe);
                 reconnect();
             } catch (NumberFormatException lvNumberFormatException) {
@@ -355,7 +355,7 @@ public static synchronized void writeToOneWire(String pvDevicePropertyPath, Stri
                         lvAttempt, oe);
                 reconnect();
             } catch (IOException ioe) {
-                logger.error("Couldn't establish network connection while write attempt {} to '{}'" + " ip:port={}:{}",
+                logger.error("Couldn't establish network connection while write attempt {} to '{}' ip:port={}:{}",
                         lvAttempt, pvDevicePropertyPath, cvIp, cvPort, ioe);
                 reconnect();
             } finally {

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/deviceproperties/AbstractOneWireDevicePropertyBindingConfig.java
Patch:
@@ -210,8 +210,8 @@ public Type convertReadValueToType(String pvReadValue) {
         Type lvType = convertReadValueToUnmodifiedType(pvReadValue);
 
         for (OneWireTypeModifier lvTypeModifier : getTypeModifieryList()) {
-            logger.debug("type of " + getDevicePropertyPath() + " before modifier:" + lvTypeModifier.getModifierName()
-                    + "type=" + lvType.toString());
+            logger.debug("type of {} before modifier:{} type={}", getDevicePropertyPath(),
+                    lvTypeModifier.getModifierName(), lvType);
             lvType = lvTypeModifier.modify4Read(lvType);
             logger.debug("type of {} after modifier:{} type={}", getDevicePropertyPath(),
                     lvTypeModifier.getModifierName(), lvType);

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/deviceproperties/AbstractOneWireDevicePropertyWritableBindingConfig.java
Patch:
@@ -38,8 +38,8 @@ public AbstractOneWireDevicePropertyWritableBindingConfig(String pvBindingConfig
      */
     public String convertTypeToString(Type pvType) {
         for (OneWireTypeModifier lvTypeModifier : getTypeModifieryList()) {
-            logger.debug("type of " + getDevicePropertyPath() + " before modifier:" + lvTypeModifier.getModifierName()
-                    + "type=" + pvType.toString());
+            logger.debug("type of {} before modifier:{} type={}", getDevicePropertyPath(),
+                    lvTypeModifier.getModifierName(), pvType);
             pvType = lvTypeModifier.modify4Write(pvType);
             logger.debug("type of {} after modifier:{} type={}", getDevicePropertyPath(),
                     lvTypeModifier.getModifierName(), pvType);

File: bundles/binding/org.openhab.binding.vdr/src/main/java/org/openhab/binding/vdr/VDRBindingProvider.java
Patch:
@@ -53,7 +53,7 @@ public interface VDRBindingProvider extends BindingProvider {
      * @param vdrCommand the vdr command for which items should be returned
      * 
      * @return the name of the item which is associated to <code>vdrId</code>
-     *         and <code>vdrComannd</code>
+     *         and <code>vdrCommand</code>
      */
     public String getBindingItemName(String vdrId, VDRCommandType vdrCommand);
 

File: bundles/binding/org.openhab.binding.vdr/src/main/java/org/openhab/binding/vdr/internal/VDRMonitor.java
Patch:
@@ -104,5 +104,4 @@ protected void execute() {
     private Boolean checkRecording(VDRConfig vdrConfig) {
         return vdrConfig.getVDRConnection().isRecording();
     }
-
 }

File: bundles/persistence/org.openhab.persistence.db4o/src/main/java/org/openhab/persistence/db4o/internal/Db4oPersistenceService.java
Patch:
@@ -247,7 +247,7 @@ private void cancelAllJobs() {
             Set<JobKey> jobKeys = sched.getJobKeys(jobGroupEquals(SCHEDULER_GROUP));
             if (jobKeys.size() > 0) {
                 sched.deleteJobs(new ArrayList<JobKey>(jobKeys));
-                logger.debug("Found {} DB4O-Jobs to delete from DefaulScheduler (keys={})", jobKeys.size(), jobKeys);
+                logger.debug("Found {} DB4O-Jobs to delete from DefaultScheduler (keys={})", jobKeys.size(), jobKeys);
             }
         } catch (SchedulerException e) {
             logger.warn("Couldn't remove Commit-Job: {}", e.getMessage());

File: bundles/persistence/org.openhab.persistence.mapdb/src/main/java/org/openhab/persistence/mapdb/internal/MapDBPersistenceService.java
Patch:
@@ -210,7 +210,7 @@ private void cancelAllJobs() {
             Set<JobKey> jobKeys = sched.getJobKeys(jobGroupEquals(SCHEDULER_GROUP));
             if (jobKeys.size() > 0) {
                 sched.deleteJobs(new ArrayList<JobKey>(jobKeys));
-                logger.debug("Found {} MapDB-Jobs to delete from DefaulScheduler (keys={})", jobKeys.size(), jobKeys);
+                logger.debug("Found {} MapDB-Jobs to delete from DefaultScheduler (keys={})", jobKeys.size(), jobKeys);
             }
         } catch (SchedulerException e) {
             logger.warn("Couldn't remove Commit-Job: {}", e.getMessage());

File: bundles/binding/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200Device.java
Patch:
@@ -186,7 +186,7 @@ public void listAllServices() {
                         type = new String();
                     }
                     if (!type.equals("refEnum") && !type.equals("") && !type.equals("switchProgram")
-                            && !type.equals("yRecording")) {
+                            && !type.equals("yRecording") && !type.equals("errorList")) {
                         val = object.getValue().toString();
                         if (object.getValueParameter() != null) {
                             if (type.equals("stringValue")) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java
Patch:
@@ -100,7 +100,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
                 if (batteryLevel == 255) {
                     batteryLevel = 0;
                     batteryLow = true;
-                    logger.warn("NODE {}: BATTERY LOW!", this.getNode().getNodeId());
+                    logger.debug("NODE {}: BATTERY LOW!", this.getNode().getNodeId());
                 } else {
                     batteryLow = false;
                 }

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/deviceproperties/AbstractOneWireDevicePropertyBindingConfig.java
Patch:
@@ -12,7 +12,9 @@
 
 import org.openhab.binding.onewire.internal.OneWireBindingConfig;
 import org.openhab.binding.onewire.internal.deviceproperties.modifier.OneWireTypeModifier;
+import org.openhab.core.types.Type;
 import org.openhab.model.item.binding.BindingConfigParseException;
+import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/deviceproperties/AbstractOneWireDevicePropertyWritableBindingConfig.java
Patch:
@@ -9,7 +9,9 @@
 package org.openhab.binding.onewire.internal.deviceproperties;
 
 import org.openhab.binding.onewire.internal.deviceproperties.modifier.OneWireTypeModifier;
+import org.openhab.core.types.Type;
 import org.openhab.model.item.binding.BindingConfigParseException;
+import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**

File: bundles/persistence/org.openhab.persistence.jpa/java/org/openhab/persistence/jpa/internal/JpaConfiguration.java
Patch:
@@ -77,7 +77,7 @@ public void activate(final BundleContext bundleContext, final Map<String, Object
         dbPassword = (String) properties.get(CFG_PASSWORD);
 
         if (properties.get(CFG_SYNCMAPPING) == null) {
-            logger.info("{} was not specified!", CFG_SYNCMAPPING);
+            logger.debug("{} was not specified!", CFG_SYNCMAPPING);
         }
         dbSyncMapping = (String) properties.get(CFG_SYNCMAPPING);
 

File: bundles/persistence/org.openhab.persistence.jpa/java/org/openhab/persistence/jpa/internal/JpaPersistenceService.java
Patch:
@@ -91,15 +91,15 @@ public void store(Item item) {
 
     @Override
     public void store(Item item, String alias) {
-        logger.debug("Storing item: " + item.getName());
+        logger.debug("Storing item: {}, item.getName());
 
         if (item.getState() instanceof UnDefType) {
             logger.debug("This item is of undefined type. Cannot persist it!");
             return;
         }
 
         if (!JpaConfiguration.isInitialized) {
-            logger.warn("Trying to create EntityManagerFactory but we don't have configuration yet!");
+            logger.debug("Trying to create EntityManagerFactory but we don't have configuration yet!");
             return;
         }
 

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -186,7 +186,7 @@ public void groupWrite(ProcessEvent e) {
                 && e.getSourceAddr().toString().equalsIgnoreCase(KNXConnection.getLocalSourceAddr()))) {
             readFromKNX(e);
         } else {
-            logger.warn("Ignoring local Event, received from my local Source address {} for Group address {}.",
+            logger.debug("Ignoring local Event, received from my local Source address {} for Group address {}.",
                     e.getSourceAddr().toString(), e.getDestination().toString());
         }
     }

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBinding.java
Patch:
@@ -210,7 +210,8 @@ public void updated(final Dictionary<String, ?> config) throws ConfigurationExce
 
                 // the config-key enumeration contains additional keys that we
                 // don't want to process here ...
-                if (CONFIG_REFRESH.equals(configKey) || "service.pid".equals(configKey)) {
+                if (CONFIG_GRANULARITY.equals(configKey) || CONFIG_REFRESH.equals(configKey)
+                        || "service.pid".equals(configKey)) {
                     continue;
                 }
 

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/AccelerometerLed.java
Patch:
@@ -17,10 +17,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.AccelerometerLed#getDeviceType <em>Device Type</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getAccelerometerLed()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/AmbientTemperature.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.AmbientTemperature#getDeviceType
- *        <em>Device Type</em>}</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.AmbientTemperature#getDeviceType <em>Device
+ *        Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getAmbientTemperature()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/BrickletColorConfiguration.java
Patch:
@@ -17,12 +17,12 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.BrickletColorConfiguration#getGain <em>Gain</em>}</li>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.BrickletColorConfiguration#getIntegrationTime
  * <em>Integration Time</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getBrickletColorConfiguration()
  * @model
@@ -76,8 +76,8 @@ public interface BrickletColorConfiguration extends TFConfig {
     Short getIntegrationTime();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.BrickletColorConfiguration#getIntegrationTime
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.BrickletColorConfiguration#getIntegrationTime
      * <em>Integration Time</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/BrickletIndustrialDualAnalogInConfiguration.java
Patch:
@@ -17,11 +17,11 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.BrickletIndustrialDualAnalogInConfiguration#getSampleRate
  * <em>Sample Rate</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getBrickletIndustrialDualAnalogInConfiguration()
  * @model
@@ -46,8 +46,8 @@ public interface BrickletIndustrialDualAnalogInConfiguration extends TFBaseConfi
     Short getSampleRate();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.BrickletIndustrialDualAnalogInConfiguration#getSampleRate
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.BrickletIndustrialDualAnalogInConfiguration#getSampleRate
      * <em>Sample Rate</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/ButtonConfiguration.java
Patch:
@@ -15,10 +15,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.ButtonConfiguration#isTactile <em>Tactile</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getButtonConfiguration()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/CallbackListener.java
Patch:
@@ -20,11 +20,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.CallbackListener#getCallbackPeriod
- *        <em>Callback Period</em>}</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.CallbackListener#getCallbackPeriod <em>Callback
+ *        Period</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getCallbackListener()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/ColorActor.java
Patch:
@@ -21,10 +21,10 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.ColorActor#getColor <em>Color</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getColorActor()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/ColorLed.java
Patch:
@@ -17,10 +17,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.ColorLed#getDeviceType <em>Device Type</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getColorLed()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/DigitalActor.java
Patch:
@@ -21,11 +21,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.DigitalActor#getDigitalState <em>Digital State</em>}
- *        </li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.DigitalActor#getDigitalState <em>Digital
+ *        State</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getDigitalActor()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/DigitalActorDigitalOut4.java
Patch:
@@ -18,12 +18,12 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.DigitalActorDigitalOut4#getPin <em>Pin</em>}</li>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.DigitalActorDigitalOut4#getDeviceType
- *        <em>Device Type</em>}</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.DigitalActorDigitalOut4#getDeviceType <em>Device
+ *        Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getDigitalActorDigitalOut4()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/DimmableConfiguration.java
Patch:
@@ -17,11 +17,11 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.DimmableConfiguration#getMinValue <em>Min Value</em>}</li>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.DimmableConfiguration#getMaxValue <em>Max Value</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getDimmableConfiguration()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/DualButtonLed.java
Patch:
@@ -15,11 +15,11 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.DualButtonLed#getDeviceType <em>Device Type</em>}</li>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.DualButtonLed#getPosition <em>Position</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getDualButtonLed()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/Electrode.java
Patch:
@@ -18,10 +18,10 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.Electrode#getDeviceType <em>Device Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getElectrode()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/GenericDevice.java
Patch:
@@ -20,11 +20,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.GenericDevice#getGenericDeviceId
- *        <em>Generic Device Id</em>}</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.GenericDevice#getGenericDeviceId <em>Generic Device
+ *        Id</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getGenericDevice()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/InterruptListener.java
Patch:
@@ -20,11 +20,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.InterruptListener#getDebouncePeriod
- *        <em>Debounce Period</em>}</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.InterruptListener#getDebouncePeriod <em>Debounce
+ *        Period</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getInterruptListener()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/LEDGroup.java
Patch:
@@ -15,10 +15,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.LEDGroup#getDeviceType <em>Device Type</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getLEDGroup()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/LEDGroupConfiguration.java
Patch:
@@ -15,10 +15,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.LEDGroupConfiguration#getLeds <em>Leds</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getLEDGroupConfiguration()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/LaserRangeFinderLaser.java
Patch:
@@ -17,11 +17,11 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.LaserRangeFinderLaser#getDeviceType <em>Device Type</em>}
  * </li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getLaserRangeFinderLaser()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/LoadCellLed.java
Patch:
@@ -17,10 +17,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.LoadCellLed#getDeviceType <em>Device Type</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getLoadCellLed()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBaseDevice.java
Patch:
@@ -23,13 +23,13 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MBaseDevice#getLogger <em>Logger</em>}</li>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MBaseDevice#getUid <em>Uid</em>}</li>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MBaseDevice#isPoll <em>Poll</em>}</li>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MBaseDevice#getEnabledA <em>Enabled A</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBaseDevice()
  * @model interface="true" abstract="true"
@@ -142,8 +142,8 @@ public interface MBaseDevice extends EObject {
     AtomicBoolean getEnabledA();
 
     /**
-     * Sets the value of the '{@link org.openhab.binding.tinkerforge.internal.model.MBaseDevice#getEnabledA
-     * <em>Enabled A</em>}' attribute.
+     * Sets the value of the '{@link org.openhab.binding.tinkerforge.internal.model.MBaseDevice#getEnabledA <em>Enabled
+     * A</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->
      * 

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MDualRelay.java
Patch:
@@ -18,10 +18,10 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MDualRelay#getDeviceType <em>Device Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMDualRelay()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MIndustrialQuadRelay.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MIndustrialQuadRelay#getDeviceType
- *        <em>Device Type</em>}</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MIndustrialQuadRelay#getDeviceType <em>Device
+ *        Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMIndustrialQuadRelay()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MLCD20x4Backlight.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MLCD20x4Backlight#getDeviceType <em>Device Type</em>
- *        }</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MLCD20x4Backlight#getDeviceType <em>Device
+ *        Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMLCD20x4Backlight()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MSensor.java
Patch:
@@ -23,10 +23,10 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MSensor#getSensorValue <em>Sensor Value</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMSensor()
  * @model interface="true" abstract="true"
@@ -52,8 +52,8 @@ public interface MSensor<DeviceValue extends TinkerforgeValue> extends EObject {
     DeviceValue getSensorValue();
 
     /**
-     * Sets the value of the '{@link org.openhab.binding.tinkerforge.internal.model.MSensor#getSensorValue
-     * <em>Sensor Value</em>}' attribute.
+     * Sets the value of the '{@link org.openhab.binding.tinkerforge.internal.model.MSensor#getSensorValue <em>Sensor
+     * Value</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->
      * 

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MoveActor.java
Patch:
@@ -20,10 +20,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.MoveActor#getDirection <em>Direction</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMoveActor()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MultiTouchDeviceConfiguration.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MultiTouchDeviceConfiguration#getDisableElectrode
  *        <em>Disable Electrode</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMultiTouchDeviceConfiguration()
  * @model
@@ -47,8 +47,8 @@ public interface MultiTouchDeviceConfiguration extends TFConfig {
     Boolean getDisableElectrode();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.MultiTouchDeviceConfiguration#getDisableElectrode
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.MultiTouchDeviceConfiguration#getDisableElectrode
      * <em>Disable Electrode</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/OHConfig.java
Patch:
@@ -21,10 +21,10 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.OHConfig#getOhTfDevices <em>Oh Tf Devices</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getOHConfig()
  * @model
@@ -34,8 +34,8 @@ public interface OHConfig extends EObject {
     /**
      * Returns the value of the '<em><b>Oh Tf Devices</b></em>' containment reference list.
      * The list contents are of type {@link org.openhab.binding.tinkerforge.internal.model.OHTFDevice}&lt;?, ?>.
-     * It is bidirectional and its opposite is '
-     * {@link org.openhab.binding.tinkerforge.internal.model.OHTFDevice#getOhConfig <em>Oh Config</em>}'.
+     * It is bidirectional and its opposite is
+     * '{@link org.openhab.binding.tinkerforge.internal.model.OHTFDevice#getOhConfig <em>Oh Config</em>}'.
      * <!-- begin-user-doc -->
      * <p>
      * If the meaning of the '<em>Oh Tf Devices</em>' containment reference list isn't clear,

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/PercentTypeActor.java
Patch:
@@ -22,11 +22,11 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.PercentTypeActor#getPercentValue <em>Percent Value</em>}
  * </li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getPercentTypeActor()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/Proximity.java
Patch:
@@ -18,10 +18,10 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.Proximity#getDeviceType <em>Device Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getProximity()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/SwitchSensor.java
Patch:
@@ -18,10 +18,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.SwitchSensor#getSwitchState <em>Switch State</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getSwitchSensor()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/TFDistanceUSBrickletConfiguration.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.TFDistanceUSBrickletConfiguration#getMovingAverage
  *        <em>Moving Average</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getTFDistanceUSBrickletConfiguration()
  * @model
@@ -47,8 +47,8 @@ public interface TFDistanceUSBrickletConfiguration extends TFBaseConfiguration {
     Short getMovingAverage();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.TFDistanceUSBrickletConfiguration#getMovingAverage
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.TFDistanceUSBrickletConfiguration#getMovingAverage
      * <em>Moving Average</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/TFInterruptListenerConfiguration.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.TFInterruptListenerConfiguration#getDebouncePeriod
  *        <em>Debounce Period</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getTFInterruptListenerConfiguration()
  * @model
@@ -48,8 +48,8 @@ public interface TFInterruptListenerConfiguration extends TFConfig {
     long getDebouncePeriod();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.TFInterruptListenerConfiguration#getDebouncePeriod
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.TFInterruptListenerConfiguration#getDebouncePeriod
      * <em>Debounce Period</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/TFMoistureBrickletConfiguration.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.TFMoistureBrickletConfiguration#getMovingAverage
  *        <em>Moving Average</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getTFMoistureBrickletConfiguration()
  * @model
@@ -47,8 +47,8 @@ public interface TFMoistureBrickletConfiguration extends TFBaseConfiguration {
     Short getMovingAverage();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.TFMoistureBrickletConfiguration#getMovingAverage
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.TFMoistureBrickletConfiguration#getMovingAverage
      * <em>Moving Average</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/TFObjectTemperatureConfiguration.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.TFObjectTemperatureConfiguration#getEmissivity
  *        <em>Emissivity</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getTFObjectTemperatureConfiguration()
  * @model
@@ -47,8 +47,8 @@ public interface TFObjectTemperatureConfiguration extends TFBaseConfiguration {
     int getEmissivity();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.TFObjectTemperatureConfiguration#getEmissivity
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.TFObjectTemperatureConfiguration#getEmissivity
      * <em>Emissivity</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/TFTemperatureConfiguration.java
Patch:
@@ -17,11 +17,11 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.TFTemperatureConfiguration#isSlowI2C <em>Slow I2C</em>}
  * </li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getTFTemperatureConfiguration()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/VCDevicePower.java
Patch:
@@ -20,12 +20,12 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.VCDevicePower#getDeviceType <em>Device Type</em>}
- *        </li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.VCDevicePower#getDeviceType <em>Device
+ *        Type</em>}</li>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.VCDevicePower#getThreshold <em>Threshold</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getVCDevicePower()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/AccelerometerLed.java
Patch:
@@ -17,10 +17,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.AccelerometerLed#getDeviceType <em>Device Type</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getAccelerometerLed()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/AmbientTemperature.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.AmbientTemperature#getDeviceType
- *        <em>Device Type</em>}</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.AmbientTemperature#getDeviceType <em>Device
+ *        Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getAmbientTemperature()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/BrickletColorConfiguration.java
Patch:
@@ -17,12 +17,12 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.BrickletColorConfiguration#getGain <em>Gain</em>}</li>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.BrickletColorConfiguration#getIntegrationTime
  * <em>Integration Time</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getBrickletColorConfiguration()
  * @model
@@ -76,8 +76,8 @@ public interface BrickletColorConfiguration extends TFConfig {
     Short getIntegrationTime();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.BrickletColorConfiguration#getIntegrationTime
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.BrickletColorConfiguration#getIntegrationTime
      * <em>Integration Time</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/BrickletIndustrialDualAnalogInConfiguration.java
Patch:
@@ -17,11 +17,11 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.BrickletIndustrialDualAnalogInConfiguration#getSampleRate
  * <em>Sample Rate</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getBrickletIndustrialDualAnalogInConfiguration()
  * @model
@@ -46,8 +46,8 @@ public interface BrickletIndustrialDualAnalogInConfiguration extends TFBaseConfi
     Short getSampleRate();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.BrickletIndustrialDualAnalogInConfiguration#getSampleRate
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.BrickletIndustrialDualAnalogInConfiguration#getSampleRate
      * <em>Sample Rate</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/ButtonConfiguration.java
Patch:
@@ -15,10 +15,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.ButtonConfiguration#isTactile <em>Tactile</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getButtonConfiguration()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/CallbackListener.java
Patch:
@@ -20,11 +20,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.CallbackListener#getCallbackPeriod
- *        <em>Callback Period</em>}</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.CallbackListener#getCallbackPeriod <em>Callback
+ *        Period</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getCallbackListener()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/ColorActor.java
Patch:
@@ -21,10 +21,10 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.ColorActor#getColor <em>Color</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getColorActor()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/ColorLed.java
Patch:
@@ -17,10 +17,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.ColorLed#getDeviceType <em>Device Type</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getColorLed()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/DigitalActor.java
Patch:
@@ -21,11 +21,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.DigitalActor#getDigitalState <em>Digital State</em>}
- *        </li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.DigitalActor#getDigitalState <em>Digital
+ *        State</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getDigitalActor()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/DigitalActorDigitalOut4.java
Patch:
@@ -18,12 +18,12 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.DigitalActorDigitalOut4#getPin <em>Pin</em>}</li>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.DigitalActorDigitalOut4#getDeviceType
- *        <em>Device Type</em>}</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.DigitalActorDigitalOut4#getDeviceType <em>Device
+ *        Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getDigitalActorDigitalOut4()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/DimmableConfiguration.java
Patch:
@@ -17,11 +17,11 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.DimmableConfiguration#getMinValue <em>Min Value</em>}</li>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.DimmableConfiguration#getMaxValue <em>Max Value</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getDimmableConfiguration()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/DualButtonLed.java
Patch:
@@ -15,11 +15,11 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.DualButtonLed#getDeviceType <em>Device Type</em>}</li>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.DualButtonLed#getPosition <em>Position</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getDualButtonLed()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/Electrode.java
Patch:
@@ -18,10 +18,10 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.Electrode#getDeviceType <em>Device Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getElectrode()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/GenericDevice.java
Patch:
@@ -20,11 +20,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.GenericDevice#getGenericDeviceId
- *        <em>Generic Device Id</em>}</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.GenericDevice#getGenericDeviceId <em>Generic Device
+ *        Id</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getGenericDevice()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/InterruptListener.java
Patch:
@@ -20,11 +20,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.InterruptListener#getDebouncePeriod
- *        <em>Debounce Period</em>}</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.InterruptListener#getDebouncePeriod <em>Debounce
+ *        Period</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getInterruptListener()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/LEDGroup.java
Patch:
@@ -15,10 +15,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.LEDGroup#getDeviceType <em>Device Type</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getLEDGroup()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/LEDGroupConfiguration.java
Patch:
@@ -15,10 +15,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.LEDGroupConfiguration#getLeds <em>Leds</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getLEDGroupConfiguration()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/LaserRangeFinderLaser.java
Patch:
@@ -17,11 +17,11 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.LaserRangeFinderLaser#getDeviceType <em>Device Type</em>}
  * </li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getLaserRangeFinderLaser()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/LoadCellLed.java
Patch:
@@ -17,10 +17,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.LoadCellLed#getDeviceType <em>Device Type</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getLoadCellLed()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBaseDevice.java
Patch:
@@ -23,13 +23,13 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MBaseDevice#getLogger <em>Logger</em>}</li>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MBaseDevice#getUid <em>Uid</em>}</li>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MBaseDevice#isPoll <em>Poll</em>}</li>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MBaseDevice#getEnabledA <em>Enabled A</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBaseDevice()
  * @model interface="true" abstract="true"
@@ -142,8 +142,8 @@ public interface MBaseDevice extends EObject {
     AtomicBoolean getEnabledA();
 
     /**
-     * Sets the value of the '{@link org.openhab.binding.tinkerforge.internal.model.MBaseDevice#getEnabledA
-     * <em>Enabled A</em>}' attribute.
+     * Sets the value of the '{@link org.openhab.binding.tinkerforge.internal.model.MBaseDevice#getEnabledA <em>Enabled
+     * A</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->
      * 

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MDualRelay.java
Patch:
@@ -18,10 +18,10 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MDualRelay#getDeviceType <em>Device Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMDualRelay()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MIndustrialQuadRelay.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MIndustrialQuadRelay#getDeviceType
- *        <em>Device Type</em>}</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MIndustrialQuadRelay#getDeviceType <em>Device
+ *        Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMIndustrialQuadRelay()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MLCD20x4Backlight.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MLCD20x4Backlight#getDeviceType <em>Device Type</em>
- *        }</li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MLCD20x4Backlight#getDeviceType <em>Device
+ *        Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMLCD20x4Backlight()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MSensor.java
Patch:
@@ -23,10 +23,10 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MSensor#getSensorValue <em>Sensor Value</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMSensor()
  * @model interface="true" abstract="true"
@@ -52,8 +52,8 @@ public interface MSensor<DeviceValue extends TinkerforgeValue> extends EObject {
     DeviceValue getSensorValue();
 
     /**
-     * Sets the value of the '{@link org.openhab.binding.tinkerforge.internal.model.MSensor#getSensorValue
-     * <em>Sensor Value</em>}' attribute.
+     * Sets the value of the '{@link org.openhab.binding.tinkerforge.internal.model.MSensor#getSensorValue <em>Sensor
+     * Value</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->
      * 

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MoveActor.java
Patch:
@@ -20,10 +20,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.MoveActor#getDirection <em>Direction</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMoveActor()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MultiTouchDeviceConfiguration.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.MultiTouchDeviceConfiguration#getDisableElectrode
  *        <em>Disable Electrode</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMultiTouchDeviceConfiguration()
  * @model
@@ -47,8 +47,8 @@ public interface MultiTouchDeviceConfiguration extends TFConfig {
     Boolean getDisableElectrode();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.MultiTouchDeviceConfiguration#getDisableElectrode
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.MultiTouchDeviceConfiguration#getDisableElectrode
      * <em>Disable Electrode</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/OHConfig.java
Patch:
@@ -21,10 +21,10 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.OHConfig#getOhTfDevices <em>Oh Tf Devices</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getOHConfig()
  * @model
@@ -34,8 +34,8 @@ public interface OHConfig extends EObject {
     /**
      * Returns the value of the '<em><b>Oh Tf Devices</b></em>' containment reference list.
      * The list contents are of type {@link org.openhab.binding.tinkerforge.internal.model.OHTFDevice}&lt;?, ?>.
-     * It is bidirectional and its opposite is '
-     * {@link org.openhab.binding.tinkerforge.internal.model.OHTFDevice#getOhConfig <em>Oh Config</em>}'.
+     * It is bidirectional and its opposite is
+     * '{@link org.openhab.binding.tinkerforge.internal.model.OHTFDevice#getOhConfig <em>Oh Config</em>}'.
      * <!-- begin-user-doc -->
      * <p>
      * If the meaning of the '<em>Oh Tf Devices</em>' containment reference list isn't clear,

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/PercentTypeActor.java
Patch:
@@ -22,11 +22,11 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.PercentTypeActor#getPercentValue <em>Percent Value</em>}
  * </li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getPercentTypeActor()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/Proximity.java
Patch:
@@ -18,10 +18,10 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.Proximity#getDeviceType <em>Device Type</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getProximity()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/SwitchSensor.java
Patch:
@@ -18,10 +18,10 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.SwitchSensor#getSwitchState <em>Switch State</em>}</li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getSwitchSensor()
  * @model interface="true" abstract="true"

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/TFDistanceUSBrickletConfiguration.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.TFDistanceUSBrickletConfiguration#getMovingAverage
  *        <em>Moving Average</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getTFDistanceUSBrickletConfiguration()
  * @model
@@ -47,8 +47,8 @@ public interface TFDistanceUSBrickletConfiguration extends TFBaseConfiguration {
     Short getMovingAverage();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.TFDistanceUSBrickletConfiguration#getMovingAverage
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.TFDistanceUSBrickletConfiguration#getMovingAverage
      * <em>Moving Average</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/TFInterruptListenerConfiguration.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.TFInterruptListenerConfiguration#getDebouncePeriod
  *        <em>Debounce Period</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getTFInterruptListenerConfiguration()
  * @model
@@ -48,8 +48,8 @@ public interface TFInterruptListenerConfiguration extends TFConfig {
     long getDebouncePeriod();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.TFInterruptListenerConfiguration#getDebouncePeriod
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.TFInterruptListenerConfiguration#getDebouncePeriod
      * <em>Debounce Period</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/TFMoistureBrickletConfiguration.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.TFMoistureBrickletConfiguration#getMovingAverage
  *        <em>Moving Average</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getTFMoistureBrickletConfiguration()
  * @model
@@ -47,8 +47,8 @@ public interface TFMoistureBrickletConfiguration extends TFBaseConfiguration {
     Short getMovingAverage();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.TFMoistureBrickletConfiguration#getMovingAverage
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.TFMoistureBrickletConfiguration#getMovingAverage
      * <em>Moving Average</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/TFObjectTemperatureConfiguration.java
Patch:
@@ -18,11 +18,11 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.TFObjectTemperatureConfiguration#getEmissivity
  *        <em>Emissivity</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getTFObjectTemperatureConfiguration()
  * @model
@@ -47,8 +47,8 @@ public interface TFObjectTemperatureConfiguration extends TFBaseConfiguration {
     int getEmissivity();
 
     /**
-     * Sets the value of the '
-     * {@link org.openhab.binding.tinkerforge.internal.model.TFObjectTemperatureConfiguration#getEmissivity
+     * Sets the value of the
+     * '{@link org.openhab.binding.tinkerforge.internal.model.TFObjectTemperatureConfiguration#getEmissivity
      * <em>Emissivity</em>}' attribute.
      * <!-- begin-user-doc -->
      * <!-- end-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/TFTemperatureConfiguration.java
Patch:
@@ -17,11 +17,11 @@
  *
  * <p>
  * The following features are supported:
+ * </p>
  * <ul>
  * <li>{@link org.openhab.binding.tinkerforge.internal.model.TFTemperatureConfiguration#isSlowI2C <em>Slow I2C</em>}
  * </li>
  * </ul>
- * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getTFTemperatureConfiguration()
  * @model

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/VCDevicePower.java
Patch:
@@ -20,12 +20,12 @@
  *
  *        <p>
  *        The following features are supported:
+ *        </p>
  *        <ul>
- *        <li>{@link org.openhab.binding.tinkerforge.internal.model.VCDevicePower#getDeviceType <em>Device Type</em>}
- *        </li>
+ *        <li>{@link org.openhab.binding.tinkerforge.internal.model.VCDevicePower#getDeviceType <em>Device
+ *        Type</em>}</li>
  *        <li>{@link org.openhab.binding.tinkerforge.internal.model.VCDevicePower#getThreshold <em>Threshold</em>}</li>
  *        </ul>
- *        </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getVCDevicePower()
  * @model

File: bundles/binding/org.openhab.binding.km200/src/main/java/org/openhab/binding/km200/internal/KM200Binding.java
Patch:
@@ -392,8 +392,8 @@ public void run() {
                         logger.debug("Data sended, reset und updated providers");
 
                         /* Now update the set values and for all virtual values depending on same parent */
-                        if (device.serviceMap.get(provider.getService(item)).getVirtual() == 1) {
-                            String parent = device.serviceMap.get(provider.getService(item)).getParent();
+                        if (object.getVirtual() == 1) {
+                            String parent = object.getParent();
                             device.serviceMap.get(parent).setUpdated(false);
 
                             for (KM200BindingProvider tmpProvider : providers) {
@@ -413,6 +413,7 @@ public void run() {
                             }
                         } else {
                             try {
+                                object.setUpdated(false);
                                 state = comm.getProvidersState(provider, item);
                                 if (state != null) {
                                     eventPublisher.postUpdate(item, state);

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/PlugwiseBinding.java
Patch:
@@ -98,6 +98,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 
         if (stick != null) {
             setupNonStickDevices(config);
+            stick.startBackgroundThreads();
             setProperlyConfigured(true);
         } else {
             logger.warn("Plugwise needs at least one Stick in order to operate");

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -506,7 +506,7 @@ public void advanceNodeStage(SerialMessageClass eventClass) {
                                     node.getNodeId());
                             currentStage = ZWaveNodeInitStage.SESSION_START;
                         }
-                        logger.info("NODE {}: does not support SECURITY_REPORT, proceeding to next stage.",
+                        logger.debug("NODE {}: does not support SECURITY_REPORT, proceeding to next stage.",
                                 this.node.getNodeId());
                     }
                     break;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/RFXComConnection.java
Patch:
@@ -121,7 +121,7 @@ private void connect() throws NoSuchPortException, PortInUseException, Unsupport
         // so wait a while
         Thread.sleep(1000);
         // Clear received buffers
-        connector.clearReceiveBuffer();        
+        connector.clearReceiveBuffer();
 
         if (setMode != null) {
             try {

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/connector/RFXComConnectorInterface.java
Patch:
@@ -56,7 +56,7 @@ public interface RFXComConnectorInterface {
      *            Event listener instance to remove.
      */
     public void removeEventListener(RFXComEventListener listener);
-    
+
     /**
      * Ignore any data in the receive buffer
      */

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/connector/RFXComSerialConnector.java
Patch:
@@ -252,7 +252,7 @@ public void serialEvent(SerialPortEvent arg0) {
     public boolean isConnected() {
         return out != null;
     }
-    
+
     @Override
     public void clearReceiveBuffer() {
         ignoreReceiveBuffer = true;

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/scheduler/WeatherJobScheduler.java
Patch:
@@ -60,7 +60,7 @@ public WeatherJobScheduler(WeatherContext context) {
     /**
      * Restarts the JobScheduler after a short delay.
      */
-    public void restart() {
+    public synchronized void restart() {
         delayedExecutor.cancel();
         delayedExecutor.schedule(new TimerTask() {
 

File: bundles/action/org.openhab.action.satel/src/main/java/org/openhab/action/satel/internal/SatelActionService.java
Patch:
@@ -66,16 +66,16 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
      *
      * @param module reference to set
      */
-    public static void setSatelCommModule(SatelCommModule module) {
+    public void setSatelCommModule(SatelCommModule module) {
         satelCommModule = module;
     }
 
     /**
-     * Removes reference to Satel communication module service/
+     * Removes reference to Satel communication module service.
      *
      * @param module reference to remove
      */
-    public static void unsetSatelCommModule(SatelCommModule module) {
+    public void unsetSatelCommModule(SatelCommModule module) {
         if (satelCommModule == module) {
             satelCommModule = null;
         }

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java
Patch:
@@ -54,7 +54,7 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item pvItem, String pvBindingConfig) throws BindingConfigParseException {
-        logger.debug("validateItemType: " + pvItem.getName() + " - bindingConfig:" + pvBindingConfig);
+        logger.debug("validateItemType: {} - bindingConfig:{}", pvItem.getName(), pvBindingConfig);
 
         if (OneWireBindingConfigFactory.isValidItemType(pvItem, pvBindingConfig)) {
             return;

File: bundles/binding/org.openhab.binding.caldav-personal/src/main/java/org/openhab/binding/caldav_personal/internal/CalDavConfig.java
Patch:
@@ -112,7 +112,7 @@ public int hashCode() {
         result = prime * result + ((filterName == null) ? 0 : filterName.hashCode());
         result = prime * result + ((type == null) ? 0 : type.hashCode());
         result = prime * result + ((value == null) ? 0 : value.hashCode());
-        result = prime * result + Boolean.hashCode(categoriesFiltersAny);
+        result = prime * result + (categoriesFiltersAny ? 1231 : 1237);
         return result;
     }
 
@@ -170,7 +170,7 @@ public int getUniqueEventListKey() {
         result = prime * result + ((calendar == null) ? 0 : calendar.hashCode());
         result = prime * result + ((filterCategory == null) ? 0 : filterCategory.hashCode());
         result = prime * result + ((filterName == null) ? 0 : filterName.hashCode());
-        result = prime * result + Boolean.hashCode(categoriesFiltersAny);
+        result = prime * result + (categoriesFiltersAny ? 1231 : 1237);
         return result;
     }
 

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/GCalEventDownloader.java
Patch:
@@ -292,7 +292,7 @@ private void processEntries(List<Event> entries) throws SchedulerException {
 
             if (StringUtils.isNotBlank(eventContent)) {
                 CalendarEventContent cec = parseEventContent(eventContent,
-                        eventTitle.startsWith("[PresenceSimulation]"));
+                        (eventTitle != null) && eventTitle.startsWith("[PresenceSimulation]"));
 
                 String modifiedByEvent = null;
                 if (calendarCache.containsKey(cec.modifiedByEvent)) {

File: bundles/binding/org.openhab.binding.caldav-personal/src/main/java/org/openhab/binding/caldav_personal/internal/CalDavBinding.java
Patch:
@@ -41,7 +41,7 @@
  * @author Robert Delbrück
  * @since 1.8.0
  */
-public class CalDavBinding extends AbstractBinding<CalDavBindingProvider>implements ManagedService, EventNotifier {
+public class CalDavBinding extends AbstractBinding<CalDavBindingProvider> implements ManagedService, EventNotifier {
 
     private static final String PARAM_HOME_IDENTIFIERS = "homeIdentifiers";
     private static final String PARAM_USED_CALENDARS = "usedCalendars";
@@ -233,8 +233,10 @@ private CalDavQuery getQueryForConfig(CalDavConfig config) {
         CalDavQuery query = new CalDavQuery(config.getCalendar(), DateTime.now(), Sort.ASCENDING);
         query.setFilterName(config.getFilterName());
         query.setFilterCategory(config.getFilterCategory());
+        query.setFilterCategoryMatchesAny(config.getCategoriesFiltersAny());
         return query;
     }
+
     private synchronized void updateItem(String itemName, CalDavConfig config, List<CalDavEvent> events) {
         if (config.getType() == Type.PRESENCE) {
             List<CalDavEvent> subList = getActiveEvents(events);

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/CirclePlus.java
Patch:
@@ -106,7 +106,7 @@ public boolean processMessage(Message message) {
                             // devices
                             device = new Circle(((RoleCallResponseMessage) message).getNodeMAC(), stick,
                                     ((RoleCallResponseMessage) message).getNodeMAC());
-                            stick.plugwiseDeviceCache.add(device);
+                            stick.addDevice(device);
                             logger.debug("Added a Circle with MAC {} to the cache", device.getMAC());
                         }
 

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/PlugwiseBinding.java
Patch:
@@ -156,7 +156,7 @@ private void setupNonStickDevices(Dictionary<String, ?> config) {
                 PlugwiseDevice device = createPlugwiseDevice(deviceType, MAC, deviceName);
 
                 if (device != null) {
-                    stick.plugwiseDeviceCache.add(device);
+                    stick.addDevice(device);
                 }
             }
 
@@ -479,7 +479,7 @@ private void scheduleJobs(Scheduler scheduler) {
                             if (!cp.getMAC().equals(element.getId())) {
                                 // a circleplus has been added/detected and it is not what is in the binding config
                                 PlugwiseDevice device = new Circle(element.getId(), stick, element.getId());
-                                stick.plugwiseDeviceCache.add(device);
+                                stick.addDevice(device);
                                 logger.debug("Plugwise added Circle with MAC address: {}", element.getId());
                             }
                         } else {

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/hardware/HueBulb.java
Patch:
@@ -101,6 +101,7 @@ public void getStatus(HueSettings settings) {
             }
         } else {
             logger.warn("Not a valid id on the bridge: " + deviceId);
+            throw new IllegalStateException("Not a valid id on the bridge: " + deviceId);
         }
     }
 

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentEnergyMessage.java
Patch:
@@ -147,9 +147,9 @@ public void encodeMessage(byte[] data) {
 
     @Override
     public byte[] decodeMessage() {
-        byte[] data = new byte[19];
+        byte[] data = new byte[20];
 
-        data[0] = 0x13;
+        data[0] = (byte)(data.length-1);
         data[1] = RFXComBaseMessage.PacketType.CURRENT_ENERGY.toByte();
         data[2] = subType.toByte();
         data[3] = seqNbr;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComDateTimeMessage.java
Patch:
@@ -163,9 +163,9 @@ public void encodeMessage(byte[] data) {
 
     @Override
     public byte[] decodeMessage() {
-        byte[] data = new byte[13];
+        byte[] data = new byte[14];
 
-        data[0] = 0x0D;
+        data[0] = (byte)(data.length-1);
         data[1] = RFXComBaseMessage.PacketType.DATE_TIME.toByte();
         data[2] = subType.toByte();
         data[3] = seqNbr;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComHumidityMessage.java
Patch:
@@ -136,7 +136,7 @@ public void encodeMessage(byte[] data) {
     public byte[] decodeMessage() {
         byte[] data = new byte[9];
 
-        data[0] = 0x0A;
+        data[0] = (byte)(data.length-1);
         data[1] = RFXComBaseMessage.PacketType.HUMIDITY.toByte();
         data[2] = subType.toByte();
         data[3] = seqNbr;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting3Message.java
Patch:
@@ -167,7 +167,7 @@ public byte[] decodeMessage() {
 
         byte[] data = new byte[9];
 
-        data[0] = 0x09;
+        data[0] = (byte)(data.length-1);
         data[1] = RFXComBaseMessage.PacketType.LIGHTING3.toByte();
         data[2] = subType.toByte();
         data[3] = seqNbr;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComTemperatureRainMessage.java
Patch:
@@ -108,9 +108,9 @@ public void encodeMessage(byte[] data) {
 
     @Override
     public byte[] decodeMessage() {
-        byte[] data = new byte[10];
+        byte[] data = new byte[11];
 
-        data[0] = 0x0B;
+        data[0] = (byte)(data.length-1);
         data[1] = RFXComBaseMessage.PacketType.TEMPERATURE_RAIN.toByte();
         data[2] = subType.toByte();
         data[3] = seqNbr;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComThermostat1Message.java
Patch:
@@ -160,7 +160,7 @@ public void encodeMessage(byte[] data) {
     public byte[] decodeMessage() {
         byte[] data = new byte[10];
 
-        data[0] = 0x08;
+        data[0] = (byte)(data.length-1);
         data[1] = RFXComBaseMessage.PacketType.THERMOSTAT1.toByte();
         data[2] = subType.toByte();
         data[3] = seqNbr;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComThermostat2Message.java
Patch:
@@ -151,7 +151,7 @@ public void encodeMessage(byte[] data) {
     public byte[] decodeMessage() {
         byte[] data = new byte[7];
 
-        data[0] = 0x07;
+        data[0] = (byte)(data.length-1);
         data[1] = RFXComBaseMessage.PacketType.THERMOSTAT2.toByte();
         data[2] = subType.toByte();
         data[3] = seqNbr;

File: bundles/binding/org.openhab.binding.xpl/src/main/java/org/openhab/binding/xpl/internal/XplGenericBindingProvider.java
Patch:
@@ -22,6 +22,7 @@
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.items.SwitchItem;
+import org.openhab.core.library.items.ContactItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
 import org.openhab.model.item.binding.BindingConfigParseException;
 
@@ -46,10 +47,10 @@ public String getBindingType() {
      */
     @Override
     public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-        if (!(item instanceof SwitchItem || item instanceof NumberItem || item instanceof StringItem)) {
+        if (!(item instanceof SwitchItem || item instanceof NumberItem || item instanceof StringItem || item instanceof ContactItem) ) {
             throw new BindingConfigParseException("item '" + item.getName() + "' is of type '"
                     + item.getClass().getSimpleName()
-                    + "', only String, Switch and Number are allowed - please check your *.items configuration");
+                    + "', only String, Switch, Contact and Number are allowed - please check your *.items configuration");
         }
     }
 

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcDerbyDAO.java
Patch:
@@ -65,7 +65,7 @@ private void initSqlTypes() {
         sqlTypes.put("ROLLERSHUTTERITEM", "SMALLINT");
         sqlTypes.put("STRINGITEM", "VARCHAR(32000)");
         sqlTypes.put("tablePrimaryValue", "CURRENT_TIMESTAMP");
-        logger.debug("JDBC::initEtendedSqlTypes: Initialize the type array sqlTypes={}", sqlTypes.values());
+        logger.debug("JDBC::initSqlTypes: Initialized the type array sqlTypes={}", sqlTypes.values());
     }
 
     /**
@@ -127,7 +127,7 @@ public ItemsVO doCreateItemsTableIfNot(ItemsVO vo) {
             logger.debug("JDBC::doCreateItemsTableIfNot tableExists={} therefore sql={}", tableExists, sql);
             Yank.execute(sql, null);
         } else {
-            logger.debug("JDBC::doCreateItemsTableIfNot tableExists={}, did no CREATE TABLE", tableExists);
+            logger.debug("JDBC::doCreateItemsTableIfNot tableExists={}, did not CREATE TABLE", tableExists);
         }
         return vo;
     }
@@ -160,7 +160,7 @@ public List<HistoricItem> doGetHistItemFilterQuery(Item item, FilterCriteria fil
         String sql = histItemFilterQueryProvider(filter, numberDecimalcount, table, name);
         List<Object[]> m = Yank.queryObjectArrays(sql, null);
 
-        logger.debug("JDBC::doGetHistItemFilterQuery gor Array length={}", m.size());
+        logger.debug("JDBC::doGetHistItemFilterQuery got Array length={}", m.size());
 
         List<HistoricItem> items = new ArrayList<HistoricItem>();
         for (int i = 0; i < m.size(); i++) {

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcPostgresqlDAO.java
Patch:
@@ -77,7 +77,7 @@ private void initSqlTypes() {
         sqlTypes.put("ROLLERSHUTTERITEM", "SMALLINT");
         sqlTypes.put("STRINGITEM", "VARCHAR");
         sqlTypes.put("SWITCHITEM", "VARCHAR");
-        logger.debug("JDBC::initSqlTypes: Initialize the type array sqlTypes={}", sqlTypes.values());
+        logger.debug("JDBC::initSqlTypes: Initialized the type array sqlTypes={}", sqlTypes.values());
     }
 
     /**

File: bundles/persistence/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java
Patch:
@@ -77,7 +77,7 @@ public class InfluxDBPersistenceService implements QueryablePersistenceService {
     private static final String DEFAULT_URL = "http://127.0.0.1:8086";
     private static final String DEFAULT_DB = "openhab";
     private static final String DEFAULT_USER = "openhab";
-    private static final String DEFAULT_RETENTION_POLICY = "default";
+    private static final String DEFAULT_RETENTION_POLICY = "autogen";
     private static final String DIGITAL_VALUE_OFF = "0";
     private static final String DIGITAL_VALUE_ON = "1";
     private static final String VALUE_COLUMN_NAME = "value";
@@ -283,7 +283,7 @@ public Iterable<HistoricItem> query(FilterCriteria filter) {
         query.append("select ");
         query.append(VALUE_COLUMN_NAME);
         query.append(" ");
-        query.append("from ");
+        query.append("from " + retentionPolicy + ".");
 
         if (filter.getItemName() != null) {
             query.append(filter.getItemName());

File: bundles/binding/org.openhab.binding.nest/src/main/java/org/openhab/binding/nest/internal/messages/AbstractDevice.java
Patch:
@@ -39,7 +39,7 @@ public AbstractDevice(@JsonProperty("device_id") String device_id) {
     }
 
     /**
-     * @return the unique thermostat identifier.
+     * @return the unique device identifier.
      */
     @JsonProperty("device_id")
     public String getDevice_id() {

File: bundles/binding/org.openhab.binding.nest/src/main/java/org/openhab/binding/nest/internal/messages/Structure.java
Patch:
@@ -39,7 +39,7 @@ public class Structure extends AbstractMessagePart implements DataModelElement {
     public static enum AwayState {
         HOME("home"),
         AWAY("away"),
-        AUTO_AWAY("auto-away"),
+        AUTO_AWAY("auto-away"), // deprecated by Oct 2016 API update
         UNKNOWN("unknown");
 
         private final String state;

File: bundles/binding/org.openhab.binding.vdr/src/main/java/org/openhab/binding/vdr/internal/VDRBinding.java
Patch:
@@ -40,7 +40,7 @@
  * @since 0.9.0
  */
 
-public class VDRBinding extends AbstractBinding<VDRBindingProvider>implements ManagedService {
+public class VDRBinding extends AbstractBinding<VDRBindingProvider> implements ManagedService {
 
     private static final Logger logger = LoggerFactory.getLogger(VDRBinding.class);
 

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/PlugwiseBinding.java
Patch:
@@ -286,10 +286,10 @@ public void deactivate() {
     protected void internalReceiveCommand(String itemName, Command command) {
 
         PlugwiseBindingProvider provider = findFirstMatchingBindingProvider(itemName);
-        String commandAsString = command.toString();
 
         if (command != null) {
 
+            String commandAsString = command.toString();
             List<Command> commands = new ArrayList<Command>();
 
             // check if the command is valid for this item by checking if a pw ID exists

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/protocol/InitialiseResponseMessage.java
Patch:
@@ -82,7 +82,7 @@ protected void parsePayLoad() {
 
     @Override
     protected String payLoadToHexString() {
-        return unknown1 + String.format("%02X", online ? "1" : "0") + networkID + shortNetworkID + unknown2;
+        return unknown1 + String.format("%02X", online ? 1 : 0) + networkID + shortNetworkID + unknown2;
     }
 
 }

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/protocol/NodeAvailableResponseMessage.java
Patch:
@@ -30,7 +30,7 @@ public NodeAvailableResponseMessage(boolean code, String destination) {
 
     @Override
     protected String payLoadToHexString() {
-        return String.format("%02X", acceptanceCode ? "01" : "00") + destinationMAC;
+        return String.format("%02X", acceptanceCode ? 1 : 0) + destinationMAC;
     }
 
     @Override

File: bundles/binding/org.openhab.binding.garadget/src/main/java/org/openhab/binding/garadget/internal/Connection.java
Patch:
@@ -287,9 +287,9 @@ public void sendCommand(AbstractDevice device, String funcName, String user, Str
                 proc.handleResponse(statusCode, responseBody);
             }
         } catch (HttpException he) {
-            logger.warn("Fatal protocol violation: {}", he.toString());
+            logger.warn("{}", he);
         } catch (IOException ioe) {
-            logger.warn("Fatal transport error: {}", ioe.toString());
+            logger.debug("{}", ioe);
         } finally {
             method.releaseConnection();
         }

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/protocol/CalibrationResponseMessage.java
Patch:
@@ -19,6 +19,8 @@
  */
 public class CalibrationResponseMessage extends Message {
 
+    private static final Pattern RESPONSE_PATTERN = Pattern.compile("(\\w{16})(\\w{8})(\\w{8})(\\w{8})(\\w{8})");
+
     private float gaina;
     private float gainb;
     private float offtot;
@@ -52,8 +54,6 @@ protected String payLoadToHexString() {
 
     @Override
     protected void parsePayLoad() {
-        Pattern RESPONSE_PATTERN = Pattern.compile("(\\w{16})(\\w{8})(\\w{8})(\\w{8})(\\w{8})");
-
         Matcher matcher = RESPONSE_PATTERN.matcher(payLoad);
         if (matcher.matches()) {
             MAC = matcher.group(1);

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/protocol/ClockGetResponseMessage.java
Patch:
@@ -21,6 +21,9 @@
  */
 public class ClockGetResponseMessage extends Message {
 
+    private static final Pattern RESPONSE_PATTERN = Pattern
+            .compile("(\\w{16})(\\w{2})(\\w{2})(\\w{2})(\\w{2})(\\w{2})(\\w{2})(\\w{2})");
+
     private int hour;
     private int minutes;
     private int seconds;
@@ -58,9 +61,6 @@ protected String payLoadToHexString() {
 
     @Override
     protected void parsePayLoad() {
-
-        Pattern RESPONSE_PATTERN = Pattern.compile("(\\w{16})(\\w{2})(\\w{2})(\\w{2})(\\w{2})(\\w{2})(\\w{2})(\\w{2})");
-
         Matcher matcher = RESPONSE_PATTERN.matcher(payLoad);
         if (matcher.matches()) {
             MAC = matcher.group(1);

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/protocol/InitialiseResponseMessage.java
Patch:
@@ -23,6 +23,9 @@
  */
 public class InitialiseResponseMessage extends Message {
 
+    private static final Pattern RESPONSE_PATTERN = Pattern
+            .compile("(\\w{16})(\\w{2})(\\w{2})(\\w{16})(\\w{4})(\\w{2})");
+
     boolean online;
     String networkID;
     String unknown1;
@@ -59,9 +62,6 @@ public String getCirclePlusMAC() {
 
     @Override
     protected void parsePayLoad() {
-
-        Pattern RESPONSE_PATTERN = Pattern.compile("(\\w{16})(\\w{2})(\\w{2})(\\w{16})(\\w{4})(\\w{2})");
-
         Matcher matcher = RESPONSE_PATTERN.matcher(payLoad);
         if (matcher.matches()) {
             MAC = matcher.group(1);

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/protocol/NodeAvailableMessage.java
Patch:
@@ -21,6 +21,8 @@
  */
 public class NodeAvailableMessage extends Message {
 
+    private static final Pattern RESPONSE_PATTERN = Pattern.compile("(\\w{16})");
+
     public NodeAvailableMessage(int sequenceNumber, String payLoad) {
         super(sequenceNumber, payLoad);
         type = MessageType.NODE_AVAILABLE;
@@ -33,8 +35,6 @@ protected String payLoadToHexString() {
 
     @Override
     protected void parsePayLoad() {
-        Pattern RESPONSE_PATTERN = Pattern.compile("(\\w{16})");
-
         Matcher matcher = RESPONSE_PATTERN.matcher(payLoad);
         if (matcher.matches()) {
             MAC = matcher.group(1);

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/protocol/PowerBufferResponseMessage.java
Patch:
@@ -21,6 +21,9 @@
  */
 public class PowerBufferResponseMessage extends Message {
 
+    private static final Pattern RESPONSE_PATTERN = Pattern
+            .compile("(\\w{16})(\\w{8})(\\w{8})(\\w{8})(\\w{8})(\\w{8})(\\w{8})(\\w{8})(\\w{8})(\\w{8})");
+
     Energy[] datapoints;
     private int logAddress;
 
@@ -48,9 +51,6 @@ public int getLogAddress() {
 
     @Override
     protected void parsePayLoad() {
-        Pattern RESPONSE_PATTERN = Pattern
-                .compile("(\\w{16})(\\w{8})(\\w{8})(\\w{8})(\\w{8})(\\w{8})(\\w{8})(\\w{8})(\\w{8})(\\w{8})");
-
         Matcher matcher = RESPONSE_PATTERN.matcher(payLoad);
         if (matcher.matches()) {
             MAC = matcher.group(1);

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/protocol/PowerInformationResponseMessage.java
Patch:
@@ -23,6 +23,9 @@
  */
 public class PowerInformationResponseMessage extends Message {
 
+    private static final Pattern RESPONSE_PATTERN = Pattern
+            .compile("(\\w{16})(\\w{4})(\\w{4})(\\w{8})(\\w{4})(\\w{4})(\\w{4})");
+
     private Energy oneSecond;
     private Energy eightSecond;
     private Energy allSeconds;
@@ -45,8 +48,6 @@ protected String payLoadToHexString() {
 
     @Override
     protected void parsePayLoad() {
-        Pattern RESPONSE_PATTERN = Pattern.compile("(\\w{16})(\\w{4})(\\w{4})(\\w{8})(\\w{4})(\\w{4})(\\w{4})");
-
         Matcher matcher = RESPONSE_PATTERN.matcher(payLoad);
         if (matcher.matches()) {
             MAC = matcher.group(1);

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/protocol/RealTimeClockGetResponseMessage.java
Patch:
@@ -22,6 +22,9 @@
  */
 public class RealTimeClockGetResponseMessage extends Message {
 
+    private static final Pattern RESPONSE_PATTERN = Pattern
+            .compile("(\\w{16})(\\w{2})(\\w{2})(\\w{2})(\\w{2})(\\w{2})(\\w{2})(\\w{2})");
+
     private int seconds;
     private int minutes;
     private int hour;
@@ -43,9 +46,6 @@ protected String payLoadToHexString() {
 
     @Override
     protected void parsePayLoad() {
-
-        Pattern RESPONSE_PATTERN = Pattern.compile("(\\w{16})(\\w{2})(\\w{2})(\\w{2})(\\w{2})(\\w{2})(\\w{2})(\\w{2})");
-
         Matcher matcher = RESPONSE_PATTERN.matcher(payLoad);
         if (matcher.matches()) {
             MAC = matcher.group(1);

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/protocol/RoleCallResponseMessage.java
Patch:
@@ -19,6 +19,8 @@
  */
 public class RoleCallResponseMessage extends Message {
 
+    private static final Pattern RESPONSE_PATTERN = Pattern.compile("(\\w{16})(\\w{16})(\\w{2})");
+
     private String nodeMAC;
     private int nodeID;
 
@@ -34,8 +36,6 @@ protected String payLoadToHexString() {
 
     @Override
     protected void parsePayLoad() {
-        Pattern RESPONSE_PATTERN = Pattern.compile("(\\w{16})(\\w{16})(\\w{2})");
-
         Matcher matcher = RESPONSE_PATTERN.matcher(payLoad);
         if (matcher.matches()) {
             MAC = matcher.group(1);

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/DSCAlarmActiveBinding.java
Patch:
@@ -44,7 +44,7 @@
  * @since 1.6.0
  */
 
-public class DSCAlarmActiveBinding extends AbstractActiveBinding<DSCAlarmBindingProvider>implements ManagedService, DSCAlarmEventListener, DSCAlarmActionProvider {
+public class DSCAlarmActiveBinding extends AbstractActiveBinding<DSCAlarmBindingProvider> implements ManagedService, DSCAlarmEventListener, DSCAlarmActionProvider {
 
     private static final Logger logger = LoggerFactory.getLogger(DSCAlarmActiveBinding.class);
 
@@ -1265,7 +1265,7 @@ public boolean sendDSCAlarmCommand(String command, String data) {
                 return api.sendCommand(apiCode, data);
             }
         } catch (Exception e) {
-            logger.error("sendDSCAlarmCommand(): Failed to send DSC Alarm Command! - {}", e);
+            logger.error("sendDSCAlarmCommand(): Failed to Send DSC Alarm Command! - {}", e);
             return false;
         }
     }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -785,7 +785,7 @@ public void advanceNodeStage(SerialMessageClass eventClass) {
                     for (ZWaveDbConfigurationParameter parameter : configList) {
                         // Some parameters don't return anything, so don't request them!
                         if (parameter.WriteOnly != null && parameter.WriteOnly == true) {
-                            configurationCommandClass.setParameterWriteOnly(parameter.Index, true);
+                            configurationCommandClass.setParameterWriteOnly(parameter.Index, parameter.Size, true);
                             continue;
                         }
 

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusBinding.java
Patch:
@@ -336,10 +336,7 @@ protected void internalUpdateItem(String slaveName, BitVector coils, String item
             if (provider.providesBindingFor(itemName)) {
                 ModbusBindingConfig config = provider.getConfig(itemName);
                 if (config.slaveName.equals(slaveName)) {
-                    boolean state = coils.getBit(config.readIndex);
-                    State newState = config.translateBoolean2State(state);
                     ModbusSlave slave = modbusSlaves.get(slaveName);
-
                     if (config.readIndex >= slave.getLength()) {
                         logger.warn(
                                 "Item '{}' read index '{}' is out-of-bounds. Slave '{}' has been configured "
@@ -348,6 +345,8 @@ protected void internalUpdateItem(String slaveName, BitVector coils, String item
                         continue;
                     }
 
+                    boolean state = coils.getBit(config.readIndex);
+                    State newState = config.translateBoolean2State(state);
                     if (slave.isUpdateUnchangedItems() || !newState.equals(config.getState())) {
                         eventPublisher.postUpdate(itemName, newState);
                         config.setState(newState);

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/Squeezebox.java
Patch:
@@ -187,7 +187,7 @@ public static boolean squeezeboxSpeak(
         if (!isReady()) {
             return false;
         }
-        return squeezeboxSpeak(playerId, message, -1, true);
+        return squeezeboxSpeak(playerId, message, volume, true);
     }
 
     @ActionDoc(text = "Speak a message via one of your Squeezebox devices using the specified volume and using specified resume status", returns = "<code>true</code>, if successful and <code>false</code> otherwise.")

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeBarometricTrend.java
Patch:
@@ -44,7 +44,7 @@ protected String getTrendText(int n) {
                 trend = "no trend info available";
                 break;
             default:
-                trend = "unkown";
+                trend = "unknown";
                 break;
         }
         return trend;

File: bundles/binding/org.openhab.binding.frontiersiliconradio/src/main/java/org/openhab/binding/frontiersiliconradio/internal/FrontierSiliconRadioBinding.java
Patch:
@@ -325,7 +325,7 @@ public void run() {
                     break;
                 default:
                     logger.error(
-                            "command on unkown property: '" + property + "'. Maybe trying to set read-only property?");
+                            "command on unknown property: '" + property + "'. Maybe trying to set read-only property?");
                     break;
             }
         }

File: bundles/binding/org.openhab.binding.intertechno/src/main/java/org/openhab/binding/intertechno/internal/parser/REVParser.java
Patch:
@@ -38,7 +38,7 @@ private String getGroupAddress(String group) throws BindingConfigParseException
             case 'D':
                 return "FFF1";
             default:
-                throw new BindingConfigParseException("Unkown group: " + group);
+                throw new BindingConfigParseException("Unknown group: " + group);
         }
     }
 
@@ -52,7 +52,7 @@ private String getSubAddress(String sub) throws BindingConfigParseException {
             case 3:
                 return "FF1";
             default:
-                throw new BindingConfigParseException("Unkwown sub address: " + sub);
+                throw new BindingConfigParseException("Unknown sub address: " + sub);
         }
     }
 

File: bundles/binding/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubGenericBindingProvider.java
Patch:
@@ -83,7 +83,7 @@ public void processBindingConfiguration(final String context, final Item item, S
         if (config.property == null) {
             throw new BindingConfigParseException(
                     "item '" + item.getName() + "' has to define an property (" + StringUtils.join(bindings, ", ")
-                            + ") value. unkown value: " + property + " - please check your *.items configuration");
+                            + ") value. unknown value: " + property + " - please check your *.items configuration");
 
         }
 

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/DigitalActorDigitalOut4Impl.java
Patch:
@@ -588,7 +588,7 @@ public void turnDigital(HighLowValue digitalState) {
             } else if (digitalState == HighLowValue.LOW) {
                 bricklet.setSelectedValues((short) mask, (short) 0);
             } else {
-                logger.error("{} unkown digitalState {}", LoggerConstants.TFMODELUPDATE, digitalState);
+                logger.error("{} unknown digitalState {}", LoggerConstants.TFMODELUPDATE, digitalState);
             }
             setDigitalState(digitalState);
         } catch (TimeoutException e) {

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/DigitalActorIO16Impl.java
Patch:
@@ -813,7 +813,7 @@ public void turnDigital(HighLowValue digitalState) {
             } else if (digitalState == HighLowValue.LOW) {
                 brickletIO16.setSelectedValues(getPort(), (short) mask, (short) 0);
             } else {
-                logger.error("{} unkown digitalState {}", LoggerConstants.TFMODELUPDATE, digitalState);
+                logger.error("{} unknown digitalState {}", LoggerConstants.TFMODELUPDATE, digitalState);
             }
             setDigitalState(digitalState);
         } catch (TimeoutException e) {

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/DigitalActorIO4Impl.java
Patch:
@@ -763,7 +763,7 @@ public void turnDigital(HighLowValue digitalState) {
             } else if (digitalState == HighLowValue.LOW) {
                 bricklet.setSelectedValues((short) mask, (short) 0);
             } else {
-                logger.error("{} unkown digitalState {}", LoggerConstants.TFMODELUPDATE, digitalState);
+                logger.error("{} unknown digitalState {}", LoggerConstants.TFMODELUPDATE, digitalState);
             }
             setDigitalState(digitalState);
         } catch (TimeoutException e) {

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickDCImpl.java
Patch:
@@ -1702,7 +1702,7 @@ public void turnSwitch(OnOffValue state, DeviceOptions opts) {
         } else if (state == OnOffValue.ON) {
             setSpeed(Tools.getShortOpt(ConfigOptsSwitchSpeed.SPEED.toString(), opts), null, null, null);
         } else {
-            logger.error("{} unkown switchstate {}", LoggerConstants.TFMODELUPDATE, state);
+            logger.error("{} unknown switchstate {}", LoggerConstants.TFMODELUPDATE, state);
         }
     }
 

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletLEDStripImpl.java
Patch:
@@ -929,7 +929,7 @@ public void enable() {
                 } else if (chipTypeString.equalsIgnoreCase("ws2812")) {
                     chipType = BrickletLEDStrip.CHIP_TYPE_WS2812;
                 } else {
-                    logger.error("Unkown ChipType {}", chipTypeString);
+                    logger.error("Unknown ChipType {}", chipTypeString);
                     // TODO raise configuration error
                 }
             }

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletSolidStateRelayImpl.java
Patch:
@@ -738,7 +738,7 @@ public void turnSwitch(OnOffValue state) {
             } else if (state == OnOffValue.ON) {
                 tinkerforgeDevice.setState(true);
             } else {
-                logger.error("{} unkown switchstate {}", LoggerConstants.TFMODELUPDATE, state);
+                logger.error("{} unknown switchstate {}", LoggerConstants.TFMODELUPDATE, state);
             }
         } catch (TimeoutException e) {
             TinkerforgeErrorHandler.handleError(this, TinkerforgeErrorHandler.TF_TIMEOUT_EXCEPTION, e);

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MDualRelayImpl.java
Patch:
@@ -830,7 +830,7 @@ public void turnSwitch(OnOffValue state) {
                 logger.debug("setSwitchState on");
                 getMbrick().getTinkerforgeDevice().setSelectedState(relayNum, true);
             } else {
-                logger.error("{} unkown switchstate {}", LoggerConstants.TFMODELUPDATE, state);
+                logger.error("{} unknown switchstate {}", LoggerConstants.TFMODELUPDATE, state);
             }
             setSwitchState(state);
         } catch (TimeoutException e) {

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MIndustrialQuadRelayImpl.java
Patch:
@@ -292,7 +292,7 @@ public void turnSwitch(OnOffValue state) {
                 logger.debug("setSwitchState on");
                 getMbrick().getTinkerforgeDevice().setSelectedValues(mask, mask);
             } else {
-                logger.error("{} unkown switchstate {}", LoggerConstants.TFMODELUPDATE, state);
+                logger.error("{} unknown switchstate {}", LoggerConstants.TFMODELUPDATE, state);
             }
             setSwitchState(state);
         } catch (TimeoutException e) {

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MLCD20x4BacklightImpl.java
Patch:
@@ -525,7 +525,7 @@ public void turnSwitch(OnOffValue state) {
                 logger.debug("setSwitchState on");
                 brickletLCD20x4.backlightOn();
             } else {
-                logger.error("{} unkown switchstate {}", LoggerConstants.TFMODELUPDATE, state);
+                logger.error("{} unknown switchstate {}", LoggerConstants.TFMODELUPDATE, state);
             }
             setSwitchState(state);
         } catch (TimeoutException e) {

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MServoImpl.java
Patch:
@@ -1368,7 +1368,7 @@ public void turnSwitch(OnOffValue state, DeviceOptions opts) {
                 return;
             }
         } else {
-            logger.error("{} unkown switchstate {}", LoggerConstants.TFMODELUPDATE, state);
+            logger.error("{} unknown switchstate {}", LoggerConstants.TFMODELUPDATE, state);
         }
         setPoint(position, opts);
     }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanModeCommandClass.java
Patch:
@@ -123,7 +123,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
                             logger.debug("NODE {}: Added Fan Mode type {} ({})", this.getNode().getNodeId(),
                                     fanModeTypeToAdd.getLabel(), index);
                         } else {
-                            logger.warn("NODE {}: Uknown fan mode type {}", this.getNode().getNodeId(), index);
+                            logger.warn("NODE {}: Unknown fan mode type {}", this.getNode().getNodeId(), index);
                         }
                     }
                 }

File: bundles/binding/org.openhab.binding.bticino/src/main/java/be/devlaminck/openwebnet/OpenWebNet.java
Patch:
@@ -49,7 +49,7 @@ public class OpenWebNet extends Thread {
     /*
      * OWN Diagnostic Frames
      */
-    private final static String LIGHTNING_DIAGNOSTIC_FRAME = "*#1*0##";
+    private final static String LIGHTING_DIAGNOSTIC_FRAME = "*#1*0##";
     private final static String AUTOMATIONS_DIAGNOSTIC_FRAME = "*#2*0##";
     private final static String ALARM_DIAGNOSTIC_FRAME = "*#5##";
     private final static String POWER_MANAGEMENT_DIAGNOSTIC_FRAME = "*#3##";
@@ -127,8 +127,8 @@ private void checkForBusScan() {
     // sends diagnostic frames to initialize the system
     public void initSystem() {
         try {
-            logger.info("Sending " + LIGHTNING_DIAGNOSTIC_FRAME + " frame to (re)initialize LIGHTNING");
-            myPlant.sendCommandSync(LIGHTNING_DIAGNOSTIC_FRAME);
+            logger.info("Sending " + LIGHTING_DIAGNOSTIC_FRAME + " frame to (re)initialize LIGHTING");
+            myPlant.sendCommandSync(LIGHTING_DIAGNOSTIC_FRAME);
             logger.info("Sending " + AUTOMATIONS_DIAGNOSTIC_FRAME + " frame to (re)initialize AUTOMATIONS");
             myPlant.sendCommandSync(AUTOMATIONS_DIAGNOSTIC_FRAME);
             logger.info("Sending " + ALARM_DIAGNOSTIC_FRAME + " frame to (re)initialize ALARM");

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting6Message.java
Patch:
@@ -161,7 +161,7 @@ public byte[] decodeMessage() {
 
     @Override
     public String generateDeviceId() {
-        return sensorId + groupCode + "." + unitcode;
+        return sensorId + "." + groupCode + "." + unitcode;
     }
 
     @Override

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/MaxCulMsgHandler.java
Patch:
@@ -275,7 +275,7 @@ public void checkPendingAcks() {
                     logger.debug("Retransmitting packet " + qi.msg.msgCount + " attempt " + qi.retryCount);
                     sendMessage(qi.msg, qi);
                 } else {
-                    logger.error("Transmission of packet " + qi.msg.msgCount + " failed 3 times");
+                    logger.error("Transmission of packet {} failed 3 times, message was: {} to address {} => {}",  qi.msg.msgCount, qi.msg.msgType, qi.msg.dstAddrStr, qi.msg.rawMsg);
                 }
             }
         }

File: bundles/binding/org.openhab.binding.intertechno/src/main/java/org/openhab/binding/intertechno/internal/CULIntertechnoBinding.java
Patch:
@@ -97,7 +97,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
                 break;
             }
         }
-        if (config != null && command instanceof OnOffType) {
+        if (config != null && culHandlerLifecycle.isCulReady() && command instanceof OnOffType) {
             OnOffType type = (OnOffType) command;
             String commandValue = null;
             switch (type) {

File: bundles/binding/org.openhab.binding.sonance/src/main/java/org/openhab/binding/sonance/internal/SonanceConsts.java
Patch:
@@ -22,12 +22,11 @@ final class SonanceConsts {
     protected static final String VOLUME_UP = "FF550204";
     protected static final String VOLUME_DOWN = "FF550205";
     protected static final String VOLUME_QUERY = "FF550210";
-
     protected static final String MUTE_ON = "FF550207";
     protected static final String MUTE_OFF = "FF550208";
     protected static final String MUTE_QUERY = "FF550212";
-
     protected static final String POWER_ON = "FF550101";
     protected static final String POWER_OFF = "FF550102";
     protected static final String POWER_QUERY = "FF550170";
+    protected static final String DIRECT_VOLUME_QUERY = "FF5502";
 }

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java
Patch:
@@ -317,6 +317,7 @@ private synchronized void connect() {
                 m_port.disableReceiveFraming();
                 m_port.disableReceiveThreshold();
                 m_reader = new BufferedReader(new InputStreamReader(m_port.getInputStream()));
+                m_writer = new BufferedWriter(new OutputStreamWriter(m_port.getOutputStream()));
                 logger.info("connected to serial port: {}", m_serialDeviceName);
                 startMsgReader();
             } else {

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/DSCAlarmBindingConfig.java
Patch:
@@ -28,8 +28,7 @@ public class DSCAlarmBindingConfig implements BindingConfig {
      * @param zoneId the ZoneId of the item
      * @param itemType the DSC Alarm Item Type.
      */
-    public DSCAlarmBindingConfig(DSCAlarmDeviceType dscAlarmDeviceType, int partitionId, int zoneId,
-            DSCAlarmItemType dscAlarmItemType) {
+    public DSCAlarmBindingConfig(DSCAlarmDeviceType dscAlarmDeviceType, int partitionId, int zoneId, DSCAlarmItemType dscAlarmItemType) {
         this.dscAlarmDeviceType = dscAlarmDeviceType;
         this.partitionId = partitionId;
         this.zoneId = zoneId;

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/connector/DSCAlarmConnectorType.java
Patch:
@@ -15,6 +15,6 @@
  * @since 1.6.0
  */
 public enum DSCAlarmConnectorType {
-	SERIAL,
-	TCP;
+    SERIAL,
+    TCP;
 }

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/DSCAlarmDevice.java
Patch:
@@ -38,8 +38,7 @@ public abstract class DSCAlarmDevice {
      * @param config
      * @param publisher
      */
-    public abstract void handleEvent(Item item, DSCAlarmBindingConfig config, EventPublisher publisher,
-            DSCAlarmEvent event);
+    public abstract void handleEvent(Item item, DSCAlarmBindingConfig config, EventPublisher publisher, DSCAlarmEvent event);
 
     /**
      * Update a DSC Alarm Device Property

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/Zone.java
Patch:
@@ -146,8 +146,7 @@ public void handleEvent(Item item, DSCAlarmBindingConfig config, EventPublisher
                             break;
                         case ZONE_GENERAL_STATUS:
                             zoneProperties.setState(StateType.GENERAL_STATE, (tpiCode == 609) ? 1 : 0, strStatus);
-                            publisher.postUpdate(item.getName(), (zoneProperties.getState(StateType.GENERAL_STATE) == 1)
-                                    ? OpenClosedType.OPEN : OpenClosedType.CLOSED);
+                            publisher.postUpdate(item.getName(), (zoneProperties.getState(StateType.GENERAL_STATE) == 1) ? OpenClosedType.OPEN : OpenClosedType.CLOSED);
                             break;
                         default:
                             logger.debug("handleEvent(): Zone item not updated.");

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/cmd/SerialAITest.java
Patch:
@@ -76,12 +76,13 @@ public static void main(String[] args) {
             // 3. Setup serial parameters
             SerialParameters params = new SerialParameters();
             params.setPortName(portname);
-            params.setBaudRate(9600);
+            params.setBaudRate(115200);
             params.setDatabits(8);
             params.setParity("None");
             params.setStopbits(1);
             params.setEncoding("ascii");
             params.setEcho(false);
+            params.setReceiveTimeoutMillis(500);
             if (Modbus.debug) {
                 System.out.println("Encoding [" + params.getEncoding() + "]");
             }

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/cmd/SerialSlaveTest.java
Patch:
@@ -67,12 +67,13 @@ public static void main(String[] args) {
             // 3. Set up serial parameters
             SerialParameters params = new SerialParameters();
             params.setPortName(portname);
-            params.setBaudRate(9600);
+            params.setBaudRate(115200);
             params.setDatabits(8);
             params.setParity("None");
             params.setStopbits(1);
             params.setEncoding("ascii");
             params.setEcho(false);
+            params.setReceiveTimeoutMillis(100);
             if (Modbus.debug) {
                 System.out.println("Encoding [" + params.getEncoding() + "]");
             }

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/net/UDPTerminal.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.net.InetAddress;
 
-import net.wimpi.modbus.io.ModbusUDPTransport;
+import net.wimpi.modbus.io.ModbusTransport;
 
 /**
  * Interface defining a <tt>UDPTerminal</tt>.
@@ -67,7 +67,7 @@ public interface UDPTerminal {
      *
      * @return a <tt>ModbusTransport</tt> instance.
      */
-    public ModbusUDPTransport getModbusTransport();
+    public ModbusTransport getModbusTransport();
 
     /**
      * Sends the given message.

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusGenericBindingProvider.java
Patch:
@@ -172,6 +172,8 @@ public String getItemName() {
          * Calculates new item state based on the new boolean value, current item state and item class
          * Used with item bound to "coil" type slaves
          *
+         * Returns UnDefType.UNDEF for Number and other "uncompatible" item types
+         *
          * @param b new boolean value
          * @param c class of the current item state
          * @param itemClass class of the item
@@ -200,6 +202,7 @@ protected State translateBoolean2State(boolean b) {
             } else if (c == OpenClosedType.class && itemClass == ContactItem.class) {
                 return b ? OpenClosedType.OPEN : OpenClosedType.CLOSED;
             } else {
+                // Number items
                 return UnDefType.UNDEF;
             }
         }

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/connector/DSCAlarmConnectorType.java
Patch:
@@ -15,6 +15,6 @@
  * @since 1.6.0
  */
 public enum DSCAlarmConnectorType {
-	IT100,
-	ENVISALINK;
+	SERIAL,
+	TCP;
 }

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/connector/SerialConnector.java
Patch:
@@ -48,7 +48,7 @@ public class SerialConnector implements DSCAlarmConnector, SerialPortEventListen
 	private SerialPort serialPort = null;
 	private OutputStreamWriter serialOutput = null;
 	private BufferedReader serialInput = null;
-	private DSCAlarmConnectorType connectorType = DSCAlarmConnectorType.IT100;
+	private DSCAlarmConnectorType connectorType = DSCAlarmConnectorType.SERIAL;
 	private static boolean connected = false;
 	private static List<DSCAlarmEventListener> _listeners = new ArrayList<DSCAlarmEventListener>();
 

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/connector/TCPConnector.java
Patch:
@@ -43,7 +43,7 @@ public class TCPConnector implements DSCAlarmConnector {
 	private OutputStreamWriter tcpOutput = null;
 	private BufferedReader tcpInput = null;
 	private TCPListener TCPListener = null;
-	private DSCAlarmConnectorType connectorType = DSCAlarmConnectorType.ENVISALINK;
+	private DSCAlarmConnectorType connectorType = DSCAlarmConnectorType.TCP;
 	private static boolean connected = false;
 	private static List<DSCAlarmEventListener> _listeners = new ArrayList<DSCAlarmEventListener>();
 

File: bundles/binding/org.openhab.binding.em/src/main/java/org/openhab/binding/em/internal/EMBinding.java
Patch:
@@ -141,7 +141,7 @@ private boolean checkNewMessage(String address, int counter) {
     private EMBindingConfig findConfig(EMType type, String address, Datapoint datapoint) {
         EMBindingConfig emConfig = null;
         for (EMBindingProvider provider : this.providers) {
-            emConfig = provider.getConfigByTypeAndAddressAndDatapoint(type, address, Datapoint.CUMULATED_VALUE);
+            emConfig = provider.getConfigByTypeAndAddressAndDatapoint(type, address, datapoint);
             if (emConfig != null) {
                 return emConfig;
             }

File: bundles/binding/org.openhab.binding.samsungac.test/src/test/java/org/openhab/binding/samsungac/communicator/ResponseParserTest.java
Patch:
@@ -12,9 +12,9 @@
 
 import java.util.Map;
 
-import org.binding.openhab.samsungac.communicator.ResponseParser;
 import org.junit.Test;
 import org.openhab.binding.samsungac.internal.CommandEnum;
+import org.openhab.binding.samsungac.internal.ResponseParser;
 import org.xml.sax.SAXException;
 
 /**

File: bundles/binding/org.openhab.binding.samsungac/src/main/java/org/openhab/binding/samsungac/internal/CommandEnum.java
Patch:
@@ -86,7 +86,6 @@ static ConvenientModeEnum getFromValue(Command value) {
 }
 
 enum DirectionEnum {
-    Auto(0),
     SwingUD(1),
     Rotation(2),
     Fixed(3),
@@ -104,7 +103,7 @@ static DirectionEnum getFromValue(Command value) {
                 return en;
             }
         }
-        return DirectionEnum.Auto;
+        return DirectionEnum.Fixed;
     }
 }
 

File: bundles/binding/org.openhab.binding.samsungac/src/main/java/org/openhab/binding/samsungac/internal/SsdpDiscovery.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.binding.openhab.samsungac.communicator;
+package org.openhab.binding.samsungac.internal;
 
 import java.io.IOException;
 import java.net.DatagramPacket;

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/DSCAlarmActiveBinding.java
Patch:
@@ -376,9 +376,8 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 		logger.debug("updated(): Configuration updated, config {}", config != null ? true:false);
 
 		if (config != null) {
-
-			String deviceType = null;
-			if(StringUtils.isNotBlank((String) config.get("deviceType"))) {
+			String deviceType = (String) config.get("deviceType");
+			if(StringUtils.isNotBlank(deviceType)) {
 				if(deviceType.equals("it100")) {
 					connectorType = DSCAlarmConnectorType.IT100;
 				} else if(deviceType.equals("envisalink")) {

File: bundles/binding/org.openhab.binding.mystromecopower/src/main/java/org/openhab/binding/mystromecopower/internal/MyStromEcoPowerActivator.java
Patch:
@@ -17,7 +17,7 @@
  * Extension of the default OSGi bundle activator
  *
  * @author Jordens Christophe
- * @since 1.8.0-SNAPSHOT
+ * @since 1.8.0
  */
 public final class MyStromEcoPowerActivator implements BundleActivator {
 
@@ -45,7 +45,7 @@ public void stop(BundleContext bc) throws Exception {
 
     /**
      * Returns the bundle context of this bundle
-     * 
+     *
      * @return the bundle context
      */
     public static BundleContext getContext() {

File: bundles/binding/org.openhab.binding.mystromecopower/src/main/java/org/openhab/binding/mystromecopower/internal/MyStromEcoPowerGenericBindingProvider.java
Patch:
@@ -21,7 +21,7 @@
  * This class is responsible for parsing the binding configuration.
  *
  * @author Jordens Christophe
- * @since 1.8.0-SNAPSHOT
+ * @since 1.8.0
  */
 /**
  * @author Christophe
@@ -68,7 +68,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 
     /*
      * (non-Javadoc)
-     * 
+     *
      * @see org.openhab.binding.mystromecopower.MyStromEcoPowerBindingProvider#
      * getMystromFriendlyName(java.lang.String)
      */
@@ -107,7 +107,7 @@ public Boolean getIsStringItem(String itemName) {
 
     /**
      * This class is responsible to transport configuration data.
-     * 
+     *
      * @author Jordens Christophe
      * @since 1.7.0-SNAPSHOT
      */

File: bundles/binding/org.openhab.binding.mystromecopower/src/main/java/org/openhab/binding/mystromecopower/internal/api/model/GetDeviceInfoResult.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Structure class for Json deserialization.
  *
- * @since 1.8.0-SNAPSHOT
+ * @since 1.8.0
  * @author Jordens Christophe
  *
  */

File: bundles/binding/org.openhab.binding.mystromecopower/src/main/java/org/openhab/binding/mystromecopower/internal/api/model/GetDevicesResult.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * Structure class for Json deserialization.
  *
- * @since 1.8.0-SNAPSHOT
+ * @since 1.8.0
  * @author Jordens Christophe
  *
  */

File: bundles/binding/org.openhab.binding.mystromecopower/src/main/java/org/openhab/binding/mystromecopower/internal/api/model/MystromDevice.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Class model for a mystrom eco power device.
  *
- * @since 1.8.0-SNAPSHOT
+ * @since 1.8.0
  * @author Jordens Christophe
  *
  */

File: bundles/binding/org.openhab.binding.mystromecopower/src/main/java/org/openhab/binding/mystromecopower/internal/util/ChangeStateJob.java
Patch:
@@ -21,7 +21,7 @@
  * mystrom device.
  *
  * @author Christophe Jordens
- * @since 1.8.0-SNAPSHOT
+ * @since 1.8.0
  */
 public class ChangeStateJob implements Job {
 
@@ -32,7 +32,7 @@ public class ChangeStateJob implements Job {
 
     /*
      * (non-Javadoc)
-     * 
+     *
      * @see org.quartz.Job#execute(org.quartz.JobExecutionContext)
      */
     @Override

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBindingDatapointReaderTask.java
Patch:
@@ -63,7 +63,7 @@ public void run() {
 
                 if (dp != null) {
                     if (mKNXConnected) {
-                        sLogger.debug("Autorefresh: Trying to read form KNX bus: {}", dp);
+                        sLogger.debug("Autorefresh: Trying to read from KNX bus: {}", dp);
                         readFromKNXBus(dp);
 
                         long readingPause = KNXConnection.getReadingPause();

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBusReaderScheduler.java
Patch:
@@ -142,7 +142,7 @@ public synchronized boolean readOnce(Datapoint datapoint) {
         }
 
         if (mReadQueue.size() > KNXConnection.getMaxRefreshQueueEntries()) {
-            sLogger.error("Maximium number of permissible reading queue entries reached ('{}'). Ignoring new entries.",
+            sLogger.error("Maximum number of permissible reading queue entries reached ('{}'). Ignoring new entries.",
                     KNXConnection.getMaxRefreshQueueEntries());
             return false;
         }
@@ -181,7 +181,7 @@ public synchronized boolean scheduleRead(Datapoint datapoint, int autoRefreshTim
         }
 
         if (mReadQueue.size() > KNXConnection.getMaxRefreshQueueEntries()) {
-            sLogger.error("Maximium number of permissible reading queue entries reached ('{}'). Ignoring new entries.",
+            sLogger.error("Maximum number of permissible reading queue entries reached ('{}'). Ignoring new entries.",
                     KNXConnection.getMaxRefreshQueueEntries());
             return false;
         }
@@ -190,7 +190,7 @@ public synchronized boolean scheduleRead(Datapoint datapoint, int autoRefreshTim
         int oldListNumber = getAutoRefreshTimeInSecs(datapoint);
         if (oldListNumber > 0) {
             if (oldListNumber == autoRefreshTimeInSecs) {
-                sLogger.debug("Datapoint '{}' was already in  auto refresh list {}", datapoint.getName(),
+                sLogger.debug("Datapoint '{}' was already in auto refresh list {}", datapoint.getName(),
                         autoRefreshTimeInSecs);
                 return true;
             }

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/connection/KNXConnection.java
Patch:
@@ -436,7 +436,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
             if (sPC == null) {
                 sLogger.debug("Not connected yet. Trying to connect.");
                 if (!connect()) {
-                    sLogger.warn("Inital connection to KNX bus failed!");
+                    sLogger.warn("Initial connection to KNX bus failed!");
                     if (sAutoReconnectPeriod > 0) {
                         sLogger.info("KNX link will be retried in {} seconds", sAutoReconnectPeriod);
                         final Timer timer = new Timer();

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/LightwaveRFSenderThread.java
Patch:
@@ -122,7 +122,7 @@ public void run() {
                 if (!unlatched) {
                     Integer sendCount = retryCountMap.get(commandToSend.getMessageId());
                     if (sendCount.intValue() >= MAX_RETRY_ATTEMPS) {
-                        logger.error("Unable to send message {} after {} attemps giving up",
+                        logger.error("Unable to send message {} after {} attempts giving up",
                                 commandToSend.getLightwaveRfCommandString(), MAX_RETRY_ATTEMPS);
                         return;
                     }

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBindingDatapointReaderTask.java
Patch:
@@ -63,7 +63,7 @@ public void run() {
 
                 if (dp != null) {
                     if (mKNXConnected) {
-                        sLogger.debug("Autorefresh: Trying to read form KNX bus: {}", dp);
+                        sLogger.debug("Autorefresh: Trying to read from KNX bus: {}", dp);
                         readFromKNXBus(dp);
 
                         long readingPause = KNXConnection.getReadingPause();

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBusReaderScheduler.java
Patch:
@@ -142,7 +142,7 @@ public synchronized boolean readOnce(Datapoint datapoint) {
         }
 
         if (mReadQueue.size() > KNXConnection.getMaxRefreshQueueEntries()) {
-            sLogger.error("Maximium number of permissible reading queue entries reached ('{}'). Ignoring new entries.",
+            sLogger.error("Maximum number of permissible reading queue entries reached ('{}'). Ignoring new entries.",
                     KNXConnection.getMaxRefreshQueueEntries());
             return false;
         }
@@ -181,7 +181,7 @@ public synchronized boolean scheduleRead(Datapoint datapoint, int autoRefreshTim
         }
 
         if (mReadQueue.size() > KNXConnection.getMaxRefreshQueueEntries()) {
-            sLogger.error("Maximium number of permissible reading queue entries reached ('{}'). Ignoring new entries.",
+            sLogger.error("Maximum number of permissible reading queue entries reached ('{}'). Ignoring new entries.",
                     KNXConnection.getMaxRefreshQueueEntries());
             return false;
         }
@@ -190,7 +190,7 @@ public synchronized boolean scheduleRead(Datapoint datapoint, int autoRefreshTim
         int oldListNumber = getAutoRefreshTimeInSecs(datapoint);
         if (oldListNumber > 0) {
             if (oldListNumber == autoRefreshTimeInSecs) {
-                sLogger.debug("Datapoint '{}' was already in  auto refresh list {}", datapoint.getName(),
+                sLogger.debug("Datapoint '{}' was already in auto refresh list {}", datapoint.getName(),
                         autoRefreshTimeInSecs);
                 return true;
             }

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/connection/KNXConnection.java
Patch:
@@ -436,7 +436,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
             if (sPC == null) {
                 sLogger.debug("Not connected yet. Trying to connect.");
                 if (!connect()) {
-                    sLogger.warn("Inital connection to KNX bus failed!");
+                    sLogger.warn("Initial connection to KNX bus failed!");
                     if (sAutoReconnectPeriod > 0) {
                         sLogger.info("KNX link will be retried in {} seconds", sAutoReconnectPeriod);
                         final Timer timer = new Timer();

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/LightwaveRFSenderThread.java
Patch:
@@ -122,7 +122,7 @@ public void run() {
                 if (!unlatched) {
                     Integer sendCount = retryCountMap.get(commandToSend.getMessageId());
                     if (sendCount.intValue() >= MAX_RETRY_ATTEMPS) {
-                        logger.error("Unable to send message {} after {} attemps giving up",
+                        logger.error("Unable to send message {} after {} attempts giving up",
                                 commandToSend.getLightwaveRfCommandString(), MAX_RETRY_ATTEMPS);
                         return;
                     }

File: bundles/binding/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/WemoBinding.java
Patch:
@@ -289,7 +289,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
             try {
                 String udn = provider.getUDN(itemName);
                 logger.trace("item '{}' has UDN '{}'", itemName, udn);
-                logger.trace("Command '{}' is about to be send to item '{}'", command, itemName);
+                logger.trace("Command '{}' is about to be sent to item '{}'", command, itemName);
                 sendCommand(itemName, command);
 
             } catch (Exception e) {

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/api/WithingsAuthenticator.java
Patch:
@@ -162,7 +162,7 @@ public synchronized void finishAuthentication(String accountId, String verificat
     private void printSetupInstructions(String url) {
         logger.info(LINE);
         logger.info("# Withings Binding Setup: ");
-        logger.info("# 1. Open URL '" + url + "' in your webbrowser");
+        logger.info("# 1. Open URL '" + url + "' in your web browser");
         logger.info("# 2. Login, choose your user and allow openHAB to access your Withings data");
         logger.info(
                 "# 3. Execute 'withings:finishAuthentication \"<accountId>\" \"<verifier>\" \"<userId>\"' on OSGi console");

File: bundles/binding/org.openhab.binding.yamahareceiver/src/main/java/org/openhab/binding/yamahareceiver/internal/YamahaReceiverBinding.java
Patch:
@@ -36,7 +36,7 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * Yamaha Reciever binding. Handles all commands and polls configured devices to
+ * Yamaha Receiver binding. Handles all commands and polls configured devices to
  * process updates.
  *
  * @author Eric Thill

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/ZibaseBinding.java
Patch:
@@ -132,7 +132,7 @@ public void deactivate() {
         logger.info("Shutting down zibase connection and/or thread...");
         zibaseListener.shutdown();
         zibase = null;
-        logger.info("Zibase binding desactivated");
+        logger.info("Zibase binding deactivated");
     }
 
     /**

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/ZibaseBindingConfigEmitter.java
Patch:
@@ -88,7 +88,7 @@ public ZibaseBindingConfigEmitter(String[] configParameters) {
      */
     @Override
     public void sendCommand(Zibase zibase, Command command, int dim) {
-        logger.error("sendCommand : not implemeted for Config receiver");
+        logger.error("sendCommand : not implemented for Config receiver");
     }
 
     /**

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/ZibaseBindingConfigVariable.java
Patch:
@@ -58,7 +58,7 @@ public void sendCommand(Zibase zibase, Command command, int dim) {
      */
     @Override
     protected boolean isItemConfigValid() {
-        logger.info("Checking config for variable n°" + this.getId());
+        logger.info("Checking config for variable " + this.getId());
 
         int variableNumber = Integer.parseInt(this.getId());
 

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/ZibaseListener.java
Patch:
@@ -161,7 +161,7 @@ public void run() {
             } catch (UnknownHostException ex) {
                 logger.error("Given Zibase host not reachable : " + ex);
             } catch (IOException ex) {
-                logger.error("IO eror reading Zibase soket : " + ex);
+                logger.error("IO eror reading Zibase socket : " + ex);
             }
 
         } else {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveIndicatorConverter.java
Patch:
@@ -208,7 +208,7 @@ public void handleEvent(ZWaveCommandClassValueEvent event, Item item, Map<String
      * {@inheritDoc}
      *
      * The node's indicator status can change at any time, and without the knowledge of the Z-Wave binding so
-     * before any changes are made to the indicator we need to get it's actual value from the device.
+     * before any changes are made to the indicator we need to get its actual value from the device.
      * Hence the receiveCommand method adds the desired command to a "pending" list, and issues an INDICATOR_GET
      * it does not change the actual device Indicator value.
      *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java
Patch:
@@ -109,7 +109,7 @@ public int getMaxVersion() {
     };
 
     /**
-     * Gets the endpoint object using it's endpoint ID as key.
+     * Gets the endpoint object using its endpoint ID as key.
      * Returns null if the endpoint is not found.
      *
      * @param endpointId the endpoint ID of the endpoint to get.

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveWakeUpCommandClass.java
Patch:
@@ -414,7 +414,7 @@ public void ZWaveIncomingEvent(ZWaveEvent event) {
         // Send the next message in the wake-up queue
         if (!this.wakeUpQueue.isEmpty()) {
             // Get the next message from the queue.
-            // Bump it's priority to highest to try and send it while the node is awake
+            // Bump its priority to highest to try and send it while the node is awake
             serialMessage = this.wakeUpQueue.poll();
             serialMessage.setPriority(SerialMessagePriority.Immediate);
             this.getController().sendData(serialMessage);
@@ -458,7 +458,7 @@ public void setAwake(boolean isAwake) {
             // We send the first message, and when that's ACKed, we sent the next
             if (!this.wakeUpQueue.isEmpty()) {
                 // Get the next message from the queue.
-                // Bump it's priority to highest to try and send it while the node is awake
+                // Bump its priority to highest to try and send it while the node is awake
                 SerialMessage serialMessage = this.wakeUpQueue.poll();
                 serialMessage.setPriority(SerialMessagePriority.Immediate);
                 this.getController().sendData(serialMessage);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/IdentifyNodeMessageClass.java
Patch:
@@ -118,7 +118,7 @@ public boolean handleResponse(ZWaveController zController, SerialMessage lastSen
         // If restored the node from configuration file then
         // the classes will already exist and this will be ignored
 
-        // Add mandatory command classes as specified by it's generic device class.
+        // Add mandatory command classes as specified by its generic device class.
         for (CommandClass commandClass : generic.getMandatoryCommandClasses()) {
             ZWaveCommandClass zwaveCommandClass = ZWaveCommandClass.getInstance(commandClass.getKey(), node,
                     zController);
@@ -127,7 +127,7 @@ public boolean handleResponse(ZWaveController zController, SerialMessage lastSen
             }
         }
 
-        // Add mandatory command classes as specified by it's specific device class.
+        // Add mandatory command classes as specified by its specific device class.
         for (CommandClass commandClass : specific.getMandatoryCommandClasses()) {
             ZWaveCommandClass zwaveCommandClass = ZWaveCommandClass.getInstance(commandClass.getKey(), node,
                     zController);

File: bundles/binding/org.openhab.binding.wemo/src/main/java/org/openhab/binding/wemo/internal/WemoBinding.java
Patch:
@@ -289,7 +289,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
             try {
                 String udn = provider.getUDN(itemName);
                 logger.trace("item '{}' has UDN '{}'", itemName, udn);
-                logger.trace("Command '{}' is about to be send to item '{}'", command, itemName);
+                logger.trace("Command '{}' is about to be sent to item '{}'", command, itemName);
                 sendCommand(itemName, command);
 
             } catch (Exception e) {

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/api/WithingsAuthenticator.java
Patch:
@@ -162,7 +162,7 @@ public synchronized void finishAuthentication(String accountId, String verificat
     private void printSetupInstructions(String url) {
         logger.info(LINE);
         logger.info("# Withings Binding Setup: ");
-        logger.info("# 1. Open URL '" + url + "' in your webbrowser");
+        logger.info("# 1. Open URL '" + url + "' in your web browser");
         logger.info("# 2. Login, choose your user and allow openHAB to access your Withings data");
         logger.info(
                 "# 3. Execute 'withings:finishAuthentication \"<accountId>\" \"<verifier>\" \"<userId>\"' on OSGi console");

File: bundles/binding/org.openhab.binding.yamahareceiver/src/main/java/org/openhab/binding/yamahareceiver/internal/YamahaReceiverBinding.java
Patch:
@@ -36,7 +36,7 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * Yamaha Reciever binding. Handles all commands and polls configured devices to
+ * Yamaha Receiver binding. Handles all commands and polls configured devices to
  * process updates.
  *
  * @author Eric Thill

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/ZibaseBinding.java
Patch:
@@ -132,7 +132,7 @@ public void deactivate() {
         logger.info("Shutting down zibase connection and/or thread...");
         zibaseListener.shutdown();
         zibase = null;
-        logger.info("Zibase binding desactivated");
+        logger.info("Zibase binding deactivated");
     }
 
     /**

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/ZibaseBindingConfigEmitter.java
Patch:
@@ -88,7 +88,7 @@ public ZibaseBindingConfigEmitter(String[] configParameters) {
      */
     @Override
     public void sendCommand(Zibase zibase, Command command, int dim) {
-        logger.error("sendCommand : not implemeted for Config receiver");
+        logger.error("sendCommand : not implemented for Config receiver");
     }
 
     /**

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/ZibaseBindingConfigVariable.java
Patch:
@@ -58,7 +58,7 @@ public void sendCommand(Zibase zibase, Command command, int dim) {
      */
     @Override
     protected boolean isItemConfigValid() {
-        logger.info("Checking config for variable n°" + this.getId());
+        logger.info("Checking config for variable " + this.getId());
 
         int variableNumber = Integer.parseInt(this.getId());
 

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/ZibaseListener.java
Patch:
@@ -161,7 +161,7 @@ public void run() {
             } catch (UnknownHostException ex) {
                 logger.error("Given Zibase host not reachable : " + ex);
             } catch (IOException ex) {
-                logger.error("IO eror reading Zibase soket : " + ex);
+                logger.error("IO eror reading Zibase socket : " + ex);
             }
 
         } else {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveIndicatorConverter.java
Patch:
@@ -208,7 +208,7 @@ public void handleEvent(ZWaveCommandClassValueEvent event, Item item, Map<String
      * {@inheritDoc}
      *
      * The node's indicator status can change at any time, and without the knowledge of the Z-Wave binding so
-     * before any changes are made to the indicator we need to get it's actual value from the device.
+     * before any changes are made to the indicator we need to get its actual value from the device.
      * Hence the receiveCommand method adds the desired command to a "pending" list, and issues an INDICATOR_GET
      * it does not change the actual device Indicator value.
      *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java
Patch:
@@ -109,7 +109,7 @@ public int getMaxVersion() {
     };
 
     /**
-     * Gets the endpoint object using it's endpoint ID as key.
+     * Gets the endpoint object using its endpoint ID as key.
      * Returns null if the endpoint is not found.
      *
      * @param endpointId the endpoint ID of the endpoint to get.

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveWakeUpCommandClass.java
Patch:
@@ -414,7 +414,7 @@ public void ZWaveIncomingEvent(ZWaveEvent event) {
         // Send the next message in the wake-up queue
         if (!this.wakeUpQueue.isEmpty()) {
             // Get the next message from the queue.
-            // Bump it's priority to highest to try and send it while the node is awake
+            // Bump its priority to highest to try and send it while the node is awake
             serialMessage = this.wakeUpQueue.poll();
             serialMessage.setPriority(SerialMessagePriority.Immediate);
             this.getController().sendData(serialMessage);
@@ -458,7 +458,7 @@ public void setAwake(boolean isAwake) {
             // We send the first message, and when that's ACKed, we sent the next
             if (!this.wakeUpQueue.isEmpty()) {
                 // Get the next message from the queue.
-                // Bump it's priority to highest to try and send it while the node is awake
+                // Bump its priority to highest to try and send it while the node is awake
                 SerialMessage serialMessage = this.wakeUpQueue.poll();
                 serialMessage.setPriority(SerialMessagePriority.Immediate);
                 this.getController().sendData(serialMessage);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/IdentifyNodeMessageClass.java
Patch:
@@ -118,7 +118,7 @@ public boolean handleResponse(ZWaveController zController, SerialMessage lastSen
         // If restored the node from configuration file then
         // the classes will already exist and this will be ignored
 
-        // Add mandatory command classes as specified by it's generic device class.
+        // Add mandatory command classes as specified by its generic device class.
         for (CommandClass commandClass : generic.getMandatoryCommandClasses()) {
             ZWaveCommandClass zwaveCommandClass = ZWaveCommandClass.getInstance(commandClass.getKey(), node,
                     zController);
@@ -127,7 +127,7 @@ public boolean handleResponse(ZWaveController zController, SerialMessage lastSen
             }
         }
 
-        // Add mandatory command classes as specified by it's specific device class.
+        // Add mandatory command classes as specified by its specific device class.
         for (CommandClass commandClass : specific.getMandatoryCommandClasses()) {
             ZWaveCommandClass zwaveCommandClass = ZWaveCommandClass.getInstance(commandClass.getKey(), node,
                     zController);

File: bundles/binding/org.openhab.binding.tacmi/src/main/java/org/openhab/binding/tacmi/internal/TACmiBinding.java
Patch:
@@ -108,7 +108,7 @@ public void activate(final BundleContext bundleContext, final Map<String, Object
         try {
             clientSocket = new DatagramSocket(cmiPort);
         } catch (SocketException e) {
-            logger.error("Failed to create Socket for receiving UDP packts from CMI");
+            logger.error("Failed to create Socket for receiving UDP packets from CMI");
             setProperlyConfigured(true);
             return;
         }

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/AbstractDatagramChannelBinding.java
Patch:
@@ -1047,7 +1047,7 @@ protected ByteBuffer writeBuffer(ByteBuffer theBuffer, Channel theChannel, boole
                     try {
                         Thread.sleep(50);
                     } catch (InterruptedException e) {
-                        logger.warn("An Exception occurred while waiting waiting during a blocking buffer write");
+                        logger.warn("An Exception occurred while waiting during a blocking buffer write");
                     }
                 }
 

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/AbstractSocketChannelBinding.java
Patch:
@@ -1067,7 +1067,7 @@ protected ByteBuffer writeBuffer(ByteBuffer theBuffer, Channel theChannel, boole
                     try {
                         Thread.sleep(100);
                     } catch (InterruptedException e) {
-                        logger.warn("Exception occurred while waiting waiting during a blocking buffer write");
+                        logger.warn("Exception occurred while waiting during a blocking buffer write");
                     }
                 }
 
@@ -1532,12 +1532,12 @@ protected void execute() {
                         } catch (NoConnectionPendingException e) {
                             // this channel is not connected and a connection operation
                             // has not been initiated
-                            logger.warn("The channel  {} has no connection pending ({})", theSocketChannel,
+                            logger.warn("The channel {} has no connection pending ({})", theSocketChannel,
                                     e.getMessage());
                             error = true;
                         } catch (ClosedChannelException e) {
                             // If some other I/O error occurs
-                            logger.warn("The channel  {} is closed ({})", theSocketChannel, e.getMessage());
+                            logger.warn("The channel {} is closed ({})", theSocketChannel, e.getMessage());
                             error = true;
                         } catch (IOException e) {
                             // If some other I/O error occurs

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickdImpl.java
Patch:
@@ -794,7 +794,7 @@ public void run() {
                         try {
                             Thread.sleep(1000);
                         } catch (InterruptedException e1) {
-                            logger.debug("connect interrupt recieved: {}:{}", host, port);
+                            logger.debug("connect interrupt received: {}:{}", host, port);
                             interrupt();
                         }
                     } catch (UnknownHostException e) {
@@ -806,7 +806,7 @@ public void run() {
                         try {
                             Thread.sleep(1000);
                         } catch (InterruptedException e1) {
-                            logger.debug("connect interrupt recieved: {}:{}", host, port);
+                            logger.debug("connect interrupt received: {}:{}", host, port);
                             interrupt();
                         }
                     }

File: bundles/binding/org.openhab.binding.vdr/src/main/java/org/openhab/binding/vdr/internal/VDRConnection.java
Patch:
@@ -61,7 +61,7 @@ public Response send(final Command cmd) {
             logger.debug("Try to send VDR command: {}", cmd.getCommand());
 
             res = connection.send(cmd);
-            logger.debug("Recived Message from VDR: {}", res.getMessage());
+            logger.debug("Received Message from VDR: {}", res.getMessage());
         } catch (Exception e) {
             logger.error("Could not connect to VDR on {}: {}", mIp + ":" + mPort, e);
         } finally {

File: bundles/binding/org.openhab.binding.tacmi/src/main/java/org/openhab/binding/tacmi/internal/TACmiBinding.java
Patch:
@@ -108,7 +108,7 @@ public void activate(final BundleContext bundleContext, final Map<String, Object
         try {
             clientSocket = new DatagramSocket(cmiPort);
         } catch (SocketException e) {
-            logger.error("Failed to create Socket for receiving UDP packts from CMI");
+            logger.error("Failed to create Socket for receiving UDP packets from CMI");
             setProperlyConfigured(true);
             return;
         }

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/AbstractDatagramChannelBinding.java
Patch:
@@ -1047,7 +1047,7 @@ protected ByteBuffer writeBuffer(ByteBuffer theBuffer, Channel theChannel, boole
                     try {
                         Thread.sleep(50);
                     } catch (InterruptedException e) {
-                        logger.warn("An Exception occurred while waiting waiting during a blocking buffer write");
+                        logger.warn("An Exception occurred while waiting during a blocking buffer write");
                     }
                 }
 

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/AbstractSocketChannelBinding.java
Patch:
@@ -1067,7 +1067,7 @@ protected ByteBuffer writeBuffer(ByteBuffer theBuffer, Channel theChannel, boole
                     try {
                         Thread.sleep(100);
                     } catch (InterruptedException e) {
-                        logger.warn("Exception occurred while waiting waiting during a blocking buffer write");
+                        logger.warn("Exception occurred while waiting during a blocking buffer write");
                     }
                 }
 
@@ -1532,12 +1532,12 @@ protected void execute() {
                         } catch (NoConnectionPendingException e) {
                             // this channel is not connected and a connection operation
                             // has not been initiated
-                            logger.warn("The channel  {} has no connection pending ({})", theSocketChannel,
+                            logger.warn("The channel {} has no connection pending ({})", theSocketChannel,
                                     e.getMessage());
                             error = true;
                         } catch (ClosedChannelException e) {
                             // If some other I/O error occurs
-                            logger.warn("The channel  {} is closed ({})", theSocketChannel, e.getMessage());
+                            logger.warn("The channel {} is closed ({})", theSocketChannel, e.getMessage());
                             error = true;
                         } catch (IOException e) {
                             // If some other I/O error occurs

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickdImpl.java
Patch:
@@ -794,7 +794,7 @@ public void run() {
                         try {
                             Thread.sleep(1000);
                         } catch (InterruptedException e1) {
-                            logger.debug("connect interrupt recieved: {}:{}", host, port);
+                            logger.debug("connect interrupt received: {}:{}", host, port);
                             interrupt();
                         }
                     } catch (UnknownHostException e) {
@@ -806,7 +806,7 @@ public void run() {
                         try {
                             Thread.sleep(1000);
                         } catch (InterruptedException e1) {
-                            logger.debug("connect interrupt recieved: {}:{}", host, port);
+                            logger.debug("connect interrupt received: {}:{}", host, port);
                             interrupt();
                         }
                     }

File: bundles/binding/org.openhab.binding.vdr/src/main/java/org/openhab/binding/vdr/internal/VDRConnection.java
Patch:
@@ -61,7 +61,7 @@ public Response send(final Command cmd) {
             logger.debug("Try to send VDR command: {}", cmd.getCommand());
 
             res = connection.send(cmd);
-            logger.debug("Recived Message from VDR: {}", res.getMessage());
+            logger.debug("Received Message from VDR: {}", res.getMessage());
         } catch (Exception e) {
             logger.error("Could not connect to VDR on {}: {}", mIp + ":" + mPort, e);
         } finally {

File: bundles/binding/org.openhab.binding.s300th/src/main/java/org/openhab/binding/s300th/internal/S300THBinding.java
Patch:
@@ -262,7 +262,7 @@ private S300THBindingConfig findConfig(String address, Datapoint datapoint) {
 
     @Override
     public void error(Exception e) {
-        logger.error("Received error from CUL instead fo data", e);
+        logger.error("Received error from CUL instead of data", e);
 
     }
 

File: bundles/binding/org.openhab.binding.samsungac/src/main/java/org/binding/openhab/samsungac/communicator/AirConditioner.java
Patch:
@@ -77,7 +77,7 @@ public AirConditioner login() throws Exception {
             getToken();
             loginWithToken();
         } catch (Exception e) {
-            logger.debug("Disconneting...", e);
+            logger.debug("Disconnecting...", e);
             disconnect();
             throw e;
         }

File: bundles/binding/org.openhab.binding.samsungtv/src/main/java/de/quist/samy/remocon/RemoteSession.java
Patch:
@@ -151,7 +151,7 @@ private String readRegistrationReply(Reader reader) throws IOException {
         logger.debug("Received ID: " + text1);
         char[] result = readCharArray(reader); // Read result sequence
         if (Arrays.equals(result, ALLOWED_BYTES)) {
-            logger.debug("Registration successfull");
+            logger.debug("Registration successful");
             return ALLOWED;
         } else if (Arrays.equals(result, DENIED_BYTES)) {
             logger.warn("Registration denied");

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/Ethm1Module.java
Patch:
@@ -65,7 +65,7 @@ protected CommunicationChannel connect() {
         try {
             Socket socket = new Socket();
             socket.connect(new InetSocketAddress(this.host, this.port), this.getTimeout());
-            logger.info("ETHM-1 module connected successfuly");
+            logger.info("ETHM-1 module connected successfully");
 
             if (StringUtils.isBlank(this.encryptionKey)) {
                 return new TCPCommunicationChannel(socket);

File: bundles/binding/org.openhab.binding.snmp/src/main/java/org/openhab/binding/snmp/internal/SnmpBinding.java
Patch:
@@ -250,7 +250,7 @@ private void dispatchPdu(Address address, PDU pdu) {
                                     variable.toString());
                         }
                     } else {
-                        logger.trace("PDU doesn't contain a variable with OID ‘{}‘", oid.toString());
+                        logger.trace("PDU doesn't contain a variable with OID '{}'", oid.toString());
                     }
                 }
             }

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosXMLParser.java
Patch:
@@ -347,7 +347,7 @@ public void endElement(String uri, String localName, String qName) throws SAXExc
                 try {
                     md = getEmbededMetaDataFromResource(desc.toString());
                 } catch (SAXException ignore) {
-                    logger.debug("Failed to parse embeded", ignore);
+                    logger.debug("Failed to parse embedded", ignore);
                 }
 
                 artists.add(new SonosEntry(id, title.toString(), parentId, album.toString(), albumArtUri.toString(),

File: bundles/binding/org.openhab.binding.stiebelheatpump/src/main/java/org/openhab/binding/stiebelheatpump/internal/CommunicationService.java
Patch:
@@ -554,9 +554,9 @@ private void startCommunication() throws StiebelHeatPumpException {
             throw new StiebelHeatPumpException("heat pump communication could not be established !");
         }
         if (response != DataParser.ESCAPE) {
-            logger.warn("heat pump is communicating, but did not received Escape message in inital handshake!");
+            logger.warn("heat pump is communicating, but did not receive Escape message in initial handshake!");
             throw new StiebelHeatPumpException(
-                    "heat pump is communicating, but did not received Escape message in inital handshake!");
+                    "heat pump is communicating, but did not receive Escape message in initial handshake!");
         }
     }
 

File: bundles/binding/org.openhab.binding.stiebelheatpump/src/main/java/org/openhab/binding/stiebelheatpump/internal/StiebelHeatPumpBinding.java
Patch:
@@ -261,7 +261,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
                 if (host != null) {
                     logger.info("Created heatpump configuration with tcp {}:{}, version:{} ", host, port, version);
                 } else {
-                    logger.info("Created heatpump configuration with  serialport:{}, baudrate:{}, version:{} ",
+                    logger.info("Created heatpump configuration with serialport:{}, baudrate:{}, version:{} ",
                             serialPort, baudRate, version);
                 }
                 setProperlyConfigured(isInitialized);
@@ -294,7 +294,7 @@ public boolean getInitialHeatPumpSettings() {
                         return false;
                     }
                 } catch (InterruptedException e) {
-                    logger.error("could not access Heat pump for has version {}", version);
+                    logger.error("could not access Heat pump for version {}", version);
                 }
             }
 

File: bundles/binding/org.openhab.binding.stiebelheatpump/src/main/java/org/openhab/binding/stiebelheatpump/protocol/DataParser.java
Patch:
@@ -74,7 +74,7 @@ public Map<String, String> parseRecords(final byte[] response, Request request)
         logger.debug("Parse bytes: {}", DataParser.bytesToHex(response));
 
         if (response.length < 2) {
-            logger.error("response does not have a valid length ogf bytes: {}", DataParser.bytesToHex(response));
+            logger.error("response does not have a valid length of bytes: {}", DataParser.bytesToHex(response));
             return map;
         }
 

File: bundles/binding/org.openhab.binding.swegonventilation/src/main/java/org/openhab/binding/swegonventilation/internal/SwegonVentilationBinding.java
Patch:
@@ -255,7 +255,7 @@ public void run() {
             try {
                 connector.disconnect();
             } catch (SwegonVentilationException e) {
-                logger.error("Error occured when disconnecting form Swegon ventilation system", e);
+                logger.error("Error occured when disconnecting from Swegon ventilation system", e);
             }
 
         }

File: bundles/binding/org.openhab.binding.s300th/src/main/java/org/openhab/binding/s300th/internal/S300THBinding.java
Patch:
@@ -262,7 +262,7 @@ private S300THBindingConfig findConfig(String address, Datapoint datapoint) {
 
     @Override
     public void error(Exception e) {
-        logger.error("Received error from CUL instead fo data", e);
+        logger.error("Received error from CUL instead of data", e);
 
     }
 

File: bundles/binding/org.openhab.binding.samsungac/src/main/java/org/binding/openhab/samsungac/communicator/AirConditioner.java
Patch:
@@ -77,7 +77,7 @@ public AirConditioner login() throws Exception {
             getToken();
             loginWithToken();
         } catch (Exception e) {
-            logger.debug("Disconneting...", e);
+            logger.debug("Disconnecting...", e);
             disconnect();
             throw e;
         }

File: bundles/binding/org.openhab.binding.samsungtv/src/main/java/de/quist/samy/remocon/RemoteSession.java
Patch:
@@ -151,7 +151,7 @@ private String readRegistrationReply(Reader reader) throws IOException {
         logger.debug("Received ID: " + text1);
         char[] result = readCharArray(reader); // Read result sequence
         if (Arrays.equals(result, ALLOWED_BYTES)) {
-            logger.debug("Registration successfull");
+            logger.debug("Registration successful");
             return ALLOWED;
         } else if (Arrays.equals(result, DENIED_BYTES)) {
             logger.warn("Registration denied");

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/Ethm1Module.java
Patch:
@@ -65,7 +65,7 @@ protected CommunicationChannel connect() {
         try {
             Socket socket = new Socket();
             socket.connect(new InetSocketAddress(this.host, this.port), this.getTimeout());
-            logger.info("ETHM-1 module connected successfuly");
+            logger.info("ETHM-1 module connected successfully");
 
             if (StringUtils.isBlank(this.encryptionKey)) {
                 return new TCPCommunicationChannel(socket);

File: bundles/binding/org.openhab.binding.snmp/src/main/java/org/openhab/binding/snmp/internal/SnmpBinding.java
Patch:
@@ -250,7 +250,7 @@ private void dispatchPdu(Address address, PDU pdu) {
                                     variable.toString());
                         }
                     } else {
-                        logger.trace("PDU doesn't contain a variable with OID ‘{}‘", oid.toString());
+                        logger.trace("PDU doesn't contain a variable with OID '{}'", oid.toString());
                     }
                 }
             }

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosXMLParser.java
Patch:
@@ -347,7 +347,7 @@ public void endElement(String uri, String localName, String qName) throws SAXExc
                 try {
                     md = getEmbededMetaDataFromResource(desc.toString());
                 } catch (SAXException ignore) {
-                    logger.debug("Failed to parse embeded", ignore);
+                    logger.debug("Failed to parse embedded", ignore);
                 }
 
                 artists.add(new SonosEntry(id, title.toString(), parentId, album.toString(), albumArtUri.toString(),

File: bundles/binding/org.openhab.binding.stiebelheatpump/src/main/java/org/openhab/binding/stiebelheatpump/internal/CommunicationService.java
Patch:
@@ -554,9 +554,9 @@ private void startCommunication() throws StiebelHeatPumpException {
             throw new StiebelHeatPumpException("heat pump communication could not be established !");
         }
         if (response != DataParser.ESCAPE) {
-            logger.warn("heat pump is communicating, but did not received Escape message in inital handshake!");
+            logger.warn("heat pump is communicating, but did not receive Escape message in initial handshake!");
             throw new StiebelHeatPumpException(
-                    "heat pump is communicating, but did not received Escape message in inital handshake!");
+                    "heat pump is communicating, but did not receive Escape message in initial handshake!");
         }
     }
 

File: bundles/binding/org.openhab.binding.stiebelheatpump/src/main/java/org/openhab/binding/stiebelheatpump/internal/StiebelHeatPumpBinding.java
Patch:
@@ -261,7 +261,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
                 if (host != null) {
                     logger.info("Created heatpump configuration with tcp {}:{}, version:{} ", host, port, version);
                 } else {
-                    logger.info("Created heatpump configuration with  serialport:{}, baudrate:{}, version:{} ",
+                    logger.info("Created heatpump configuration with serialport:{}, baudrate:{}, version:{} ",
                             serialPort, baudRate, version);
                 }
                 setProperlyConfigured(isInitialized);
@@ -294,7 +294,7 @@ public boolean getInitialHeatPumpSettings() {
                         return false;
                     }
                 } catch (InterruptedException e) {
-                    logger.error("could not access Heat pump for has version {}", version);
+                    logger.error("could not access Heat pump for version {}", version);
                 }
             }
 

File: bundles/binding/org.openhab.binding.stiebelheatpump/src/main/java/org/openhab/binding/stiebelheatpump/protocol/DataParser.java
Patch:
@@ -74,7 +74,7 @@ public Map<String, String> parseRecords(final byte[] response, Request request)
         logger.debug("Parse bytes: {}", DataParser.bytesToHex(response));
 
         if (response.length < 2) {
-            logger.error("response does not have a valid length ogf bytes: {}", DataParser.bytesToHex(response));
+            logger.error("response does not have a valid length of bytes: {}", DataParser.bytesToHex(response));
             return map;
         }
 

File: bundles/binding/org.openhab.binding.swegonventilation/src/main/java/org/openhab/binding/swegonventilation/internal/SwegonVentilationBinding.java
Patch:
@@ -255,7 +255,7 @@ public void run() {
             try {
                 connector.disconnect();
             } catch (SwegonVentilationException e) {
-                logger.error("Error occured when disconnecting form Swegon ventilation system", e);
+                logger.error("Error occured when disconnecting from Swegon ventilation system", e);
             }
 
         }

File: bundles/binding/org.openhab.binding.panstamp/src/main/java/org/openhab/binding/panstamp/internal/PanStampBinding.java
Patch:
@@ -322,10 +322,10 @@ private void setupDirectories(PanStampBindingSettings cfg) {
                 network.setDeviceLibrary(new CompoundDeviceLibrary(new FileLibrary(xmlDir), new ClassLoaderLibrary()));
                 logger.info("Configured XML directory to {}", cfg.xmlDir);
             } else {
-                logger.error("devices.xml in XML directory {} can not be read", cfg.xmlDir);
+                logger.error("devices.xml in XML directory {} cannot be read", cfg.xmlDir);
             }
         } else {
-            logger.error("XML directory {} can not be read", cfg.xmlDir);
+            logger.error("XML directory {} cannot be read", cfg.xmlDir);
         }
     }
 
@@ -438,7 +438,7 @@ private List<PanStampBindingConfig<?>> getConfigs(Endpoint<?> ep) {
     }
 
     /**
-     * Update all items associated with an endpoint with it's new value
+     * Update all items associated with an endpoint with its new value
      *
      * @param ep
      *            The endpoint for which a new value is available

File: bundles/binding/org.openhab.binding.plcbus/src/main/java/org/openhab/binding/plcbus/internal/PLCBusActivator.java
Patch:
@@ -30,7 +30,7 @@ public class PLCBusActivator implements BundleActivator {
      */
     @Override
     public void start(BundleContext bundleContext) throws Exception {
-        logger.debug("PLCBus Binding startet");
+        logger.debug("PLCBus Binding started");
     }
 
     /*

File: bundles/binding/org.openhab.binding.plcbus/src/main/java/org/openhab/binding/plcbus/internal/protocol/SerialPortGateway.java
Patch:
@@ -49,7 +49,7 @@ public void send(TransmitFrame frame, IReceiveFrameContainer receivedFrameContai
             }
 
         } catch (Exception e) {
-            logger.info("Error in write methode: " + e.getMessage());
+            logger.info("Error in write method: " + e.getMessage());
         }
     }
 

File: bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexBinding.java
Patch:
@@ -191,7 +191,7 @@ private void configureBinding(final Map<String, Object> configuration) {
     }
 
     public void deactivate(final int reason) {
-        logger.trace("Plex binding deactived");
+        logger.trace("Plex binding deactivated");
         disconnect();
     }
 

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/CirclePlus.java
Patch:
@@ -64,7 +64,7 @@ public CirclePlus(String mac, Stick stick) {
         try {
             sched = StdSchedulerFactory.getDefaultScheduler();
         } catch (SchedulerException e) {
-            logger.error("Error getting a reference to the Quarz Scheduler");
+            logger.error("Error getting a reference to the Quartz Scheduler");
         }
 
         JobDataMap map = new JobDataMap();

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/PlugwiseBinding.java
Patch:
@@ -222,7 +222,7 @@ public void deactivate() {
             try {
                 sched = StdSchedulerFactory.getDefaultScheduler();
             } catch (SchedulerException e) {
-                logger.error("An exception occurred while getting a reference to the Quarz Scheduler");
+                logger.error("An exception occurred while getting a reference to the Quartz Scheduler");
             }
 
             for (PlugwiseBindingProvider provider : providers) {
@@ -453,7 +453,7 @@ protected void execute() {
                                 }
                             }
                         } catch (SchedulerException e1) {
-                            logger.error("An exception occurred while quering the Quartz Scheduler ({})",
+                            logger.error("An exception occurred while querying the Quartz Scheduler ({})",
                                     e1.getMessage());
                         }
 

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/Stick.java
Patch:
@@ -816,7 +816,7 @@ public void jobWasExecuted(JobExecutionContext context, JobExecutionException jo
             JobDataMap dataMap = context.getJobDetail().getJobDataMap();
             Stick theStick = (Stick) dataMap.get("Stick");
 
-            // logger.debug("SendJobListener: SJobListeren reschedule a job");
+            // logger.debug("SendJobListener: SJobListener reschedule a job");
 
             Scheduler sched = null;
             try {

File: bundles/binding/org.openhab.binding.rme/src/main/java/org/openhab/binding/rme/internal/RMEBinding.java
Patch:
@@ -360,7 +360,7 @@ private void processData(String data) {
                                                     matcher.group(selector.getFieldIndex()));
                                         }
                                     } catch (BindingConfigParseException e) {
-                                        logger.error("An exception occured while converting {} to a valide state : {}",
+                                        logger.error("An exception occured while converting {} to a valid state : {}",
                                                 matcher.group(selector.getFieldIndex()), e.getMessage());
                                         return;
                                     }

File: bundles/binding/org.openhab.binding.panstamp/src/main/java/org/openhab/binding/panstamp/internal/PanStampBinding.java
Patch:
@@ -322,10 +322,10 @@ private void setupDirectories(PanStampBindingSettings cfg) {
                 network.setDeviceLibrary(new CompoundDeviceLibrary(new FileLibrary(xmlDir), new ClassLoaderLibrary()));
                 logger.info("Configured XML directory to {}", cfg.xmlDir);
             } else {
-                logger.error("devices.xml in XML directory {} can not be read", cfg.xmlDir);
+                logger.error("devices.xml in XML directory {} cannot be read", cfg.xmlDir);
             }
         } else {
-            logger.error("XML directory {} can not be read", cfg.xmlDir);
+            logger.error("XML directory {} cannot be read", cfg.xmlDir);
         }
     }
 
@@ -438,7 +438,7 @@ private List<PanStampBindingConfig<?>> getConfigs(Endpoint<?> ep) {
     }
 
     /**
-     * Update all items associated with an endpoint with it's new value
+     * Update all items associated with an endpoint with its new value
      *
      * @param ep
      *            The endpoint for which a new value is available

File: bundles/binding/org.openhab.binding.plcbus/src/main/java/org/openhab/binding/plcbus/internal/PLCBusActivator.java
Patch:
@@ -30,7 +30,7 @@ public class PLCBusActivator implements BundleActivator {
      */
     @Override
     public void start(BundleContext bundleContext) throws Exception {
-        logger.debug("PLCBus Binding startet");
+        logger.debug("PLCBus Binding started");
     }
 
     /*

File: bundles/binding/org.openhab.binding.plcbus/src/main/java/org/openhab/binding/plcbus/internal/protocol/SerialPortGateway.java
Patch:
@@ -49,7 +49,7 @@ public void send(TransmitFrame frame, IReceiveFrameContainer receivedFrameContai
             }
 
         } catch (Exception e) {
-            logger.info("Error in write methode: " + e.getMessage());
+            logger.info("Error in write method: " + e.getMessage());
         }
     }
 

File: bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/PlexBinding.java
Patch:
@@ -191,7 +191,7 @@ private void configureBinding(final Map<String, Object> configuration) {
     }
 
     public void deactivate(final int reason) {
-        logger.trace("Plex binding deactived");
+        logger.trace("Plex binding deactivated");
         disconnect();
     }
 

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/CirclePlus.java
Patch:
@@ -64,7 +64,7 @@ public CirclePlus(String mac, Stick stick) {
         try {
             sched = StdSchedulerFactory.getDefaultScheduler();
         } catch (SchedulerException e) {
-            logger.error("Error getting a reference to the Quarz Scheduler");
+            logger.error("Error getting a reference to the Quartz Scheduler");
         }
 
         JobDataMap map = new JobDataMap();

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/PlugwiseBinding.java
Patch:
@@ -222,7 +222,7 @@ public void deactivate() {
             try {
                 sched = StdSchedulerFactory.getDefaultScheduler();
             } catch (SchedulerException e) {
-                logger.error("An exception occurred while getting a reference to the Quarz Scheduler");
+                logger.error("An exception occurred while getting a reference to the Quartz Scheduler");
             }
 
             for (PlugwiseBindingProvider provider : providers) {
@@ -453,7 +453,7 @@ protected void execute() {
                                 }
                             }
                         } catch (SchedulerException e1) {
-                            logger.error("An exception occurred while quering the Quartz Scheduler ({})",
+                            logger.error("An exception occurred while querying the Quartz Scheduler ({})",
                                     e1.getMessage());
                         }
 

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/Stick.java
Patch:
@@ -816,7 +816,7 @@ public void jobWasExecuted(JobExecutionContext context, JobExecutionException jo
             JobDataMap dataMap = context.getJobDetail().getJobDataMap();
             Stick theStick = (Stick) dataMap.get("Stick");
 
-            // logger.debug("SendJobListener: SJobListeren reschedule a job");
+            // logger.debug("SendJobListener: SJobListener reschedule a job");
 
             Scheduler sched = null;
             try {

File: bundles/binding/org.openhab.binding.rme/src/main/java/org/openhab/binding/rme/internal/RMEBinding.java
Patch:
@@ -360,7 +360,7 @@ private void processData(String data) {
                                                     matcher.group(selector.getFieldIndex()));
                                         }
                                     } catch (BindingConfigParseException e) {
-                                        logger.error("An exception occured while converting {} to a valide state : {}",
+                                        logger.error("An exception occured while converting {} to a valid state : {}",
                                                 matcher.group(selector.getFieldIndex()), e.getMessage());
                                         return;
                                     }

File: bundles/binding/org.openhab.binding.nikobus/src/main/java/org/openhab/binding/nikobus/internal/NikobusBinding.java
Patch:
@@ -60,7 +60,7 @@ public class NikobusBinding extends AbstractBinding<NikobusBindingProvider>imple
     private ExecutorService statusRequestService = Executors.newSingleThreadExecutor();
 
     public NikobusBinding() {
-        // setup a command receiver in it's own thread
+        // setup a command receiver in its own thread
         commandReceiver = new NikobusCommandReceiver(this);
         commandReceiver.setBufferQueue(serialInterface.getBufferQueue());
         Thread receiverThread = new Thread(commandReceiver);

File: bundles/binding/org.openhab.binding.oceanic/src/main/java/org/openhab/binding/oceanic/internal/OceanicBinding.java
Patch:
@@ -228,7 +228,7 @@ protected void execute() {
                                 }
                             }
                         } catch (SchedulerException e1) {
-                            logger.error("An exception occurred while quering the Quartz Scheduler ({})",
+                            logger.error("An exception occurred while querying the Quartz Scheduler ({})",
                                     e1.getMessage());
                         }
 
@@ -275,7 +275,7 @@ protected void execute() {
                                 }
                             }
                         } catch (SchedulerException e1) {
-                            logger.error("An exception occurred while quering the Quartz Scheduler ({})",
+                            logger.error("An exception occurred while querying the Quartz Scheduler ({})",
                                     e1.getMessage());
                         }
                     }
@@ -568,7 +568,7 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
                                 try {
                                     value = createStateForType(valueSelector, response);
                                 } catch (BindingConfigParseException e) {
-                                    logger.error("An exception occured while converting {} to a valide state : {}",
+                                    logger.error("An exception occured while converting {} to a valid state : {}",
                                             response, e.getMessage());
                                     return;
                                 }

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmniLinkBinding.java
Patch:
@@ -194,7 +194,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
                 }
             }
         } else {
-            logger.debug("Could not send message, conncetion not established {}", omniWorker == null);
+            logger.debug("Could not send message, connection not established {}", omniWorker == null);
         }
 
         // get the

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/model/Area.java
Patch:
@@ -107,7 +107,7 @@ public void updateItem(Item item, OmniLinkBindingConfig config, EventPublisher p
             default:
                 break;
         }
-        logger.debug("updating item {} for type {} to  {}", item.getName(), config.getObjectType(), setting);
+        logger.debug("updating item {} for type {} to {}", item.getName(), config.getObjectType(), setting);
         if (item instanceof NumberItem) {
             publisher.postUpdate(item.getName(), new DecimalType(setting));
         } else if (item instanceof StringItem) {

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/model/Auxiliary.java
Patch:
@@ -67,7 +67,7 @@ public void updateItem(Item item, OmniLinkBindingConfig config, EventPublisher p
             default:
                 return;
         }
-        logger.debug("updating item {} for type {} to  {}", item.getName(), config.getObjectType(), setting);
+        logger.debug("updating item {} for type {} to {}", item.getName(), config.getObjectType(), setting);
         if (item instanceof NumberItem) {
             publisher.postUpdate(item.getName(), new DecimalType(setting));
         }

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/model/Thermostat.java
Patch:
@@ -100,7 +100,7 @@ public void updateItem(Item item, OmniLinkBindingConfig config, EventPublisher p
             default:
                 return;
         }
-        logger.debug("updating item {} for type {} to  {}", item.getName(), config.getObjectType(), setting);
+        logger.debug("updating item {} for type {} to {}", item.getName(), config.getObjectType(), setting);
         if (item instanceof NumberItem) {
             publisher.postUpdate(item.getName(), new DecimalType(setting));
         } else if (item instanceof SwitchItem) {

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/connection/OneWireConnection.java
Patch:
@@ -158,7 +158,7 @@ public static synchronized void updated(Dictionary<String, ?> pvConfig) throws C
             if (cvOwConnection == null) {
                 logger.debug("Not connected to owserver yet. Trying to connect...");
                 if (!connect()) {
-                    logger.warn("Inital connection to owserver failed!");
+                    logger.warn("Initial connection to owserver failed!");
                 } else {
                     logger.debug("Success: connected to owserver.");
                 }
@@ -189,7 +189,7 @@ private static synchronized boolean checkIfDeviceExists(String pvDevicePropertyP
         String[] pvDevicePropertyPathParts = pvDevicePropertyPath.trim().split("/");
 
         String lvDevicePath = pvDevicePropertyPathParts[0];
-        logger.debug("check if device exisits '{}': ", new Object[] { lvDevicePath });
+        logger.debug("check if device exists '{}': ", new Object[] { lvDevicePath });
 
         return OneWireConnection.getConnection().exists(lvDevicePath);
     }

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/scheduler/OneWireUpdateScheduler.java
Patch:
@@ -199,7 +199,7 @@ public synchronized boolean scheduleUpdate(String pvItemName, int pvAutoRefreshT
         int lvOldListNumber = getAutoRefreshTimeInSecs(pvItemName);
         if (lvOldListNumber > 0) {
             if (lvOldListNumber == pvAutoRefreshTimeInSecs) {
-                logger.debug("item '{}' was already in  auto refresh list {}", pvItemName, pvAutoRefreshTimeInSecs);
+                logger.debug("item '{}' was already in auto refresh list {}", pvItemName, pvAutoRefreshTimeInSecs);
                 return true;
             }
             List<String> lvOldList = cvScheduleMap.get(lvOldListNumber);

File: bundles/binding/org.openhab.binding.onkyo/src/main/java/org/openhab/binding/onkyo/internal/OnkyoBinding.java
Patch:
@@ -365,7 +365,7 @@ public void statusUpdateReceived(EventObject event, String ip, String data) {
                                 }
 
                             } catch (Exception e) {
-                                logger.error("Unregonized command '" + deviceCmd + "'", e);
+                                logger.error("Unrecognized command '" + deviceCmd + "'", e);
                             }
                         }
 

File: bundles/binding/org.openhab.binding.nikobus/src/main/java/org/openhab/binding/nikobus/internal/NikobusBinding.java
Patch:
@@ -60,7 +60,7 @@ public class NikobusBinding extends AbstractBinding<NikobusBindingProvider>imple
     private ExecutorService statusRequestService = Executors.newSingleThreadExecutor();
 
     public NikobusBinding() {
-        // setup a command receiver in it's own thread
+        // setup a command receiver in its own thread
         commandReceiver = new NikobusCommandReceiver(this);
         commandReceiver.setBufferQueue(serialInterface.getBufferQueue());
         Thread receiverThread = new Thread(commandReceiver);

File: bundles/binding/org.openhab.binding.oceanic/src/main/java/org/openhab/binding/oceanic/internal/OceanicBinding.java
Patch:
@@ -228,7 +228,7 @@ protected void execute() {
                                 }
                             }
                         } catch (SchedulerException e1) {
-                            logger.error("An exception occurred while quering the Quartz Scheduler ({})",
+                            logger.error("An exception occurred while querying the Quartz Scheduler ({})",
                                     e1.getMessage());
                         }
 
@@ -275,7 +275,7 @@ protected void execute() {
                                 }
                             }
                         } catch (SchedulerException e1) {
-                            logger.error("An exception occurred while quering the Quartz Scheduler ({})",
+                            logger.error("An exception occurred while querying the Quartz Scheduler ({})",
                                     e1.getMessage());
                         }
                     }
@@ -568,7 +568,7 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
                                 try {
                                     value = createStateForType(valueSelector, response);
                                 } catch (BindingConfigParseException e) {
-                                    logger.error("An exception occured while converting {} to a valide state : {}",
+                                    logger.error("An exception occured while converting {} to a valid state : {}",
                                             response, e.getMessage());
                                     return;
                                 }

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmniLinkBinding.java
Patch:
@@ -194,7 +194,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
                 }
             }
         } else {
-            logger.debug("Could not send message, conncetion not established {}", omniWorker == null);
+            logger.debug("Could not send message, connection not established {}", omniWorker == null);
         }
 
         // get the

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/model/Area.java
Patch:
@@ -107,7 +107,7 @@ public void updateItem(Item item, OmniLinkBindingConfig config, EventPublisher p
             default:
                 break;
         }
-        logger.debug("updating item {} for type {} to  {}", item.getName(), config.getObjectType(), setting);
+        logger.debug("updating item {} for type {} to {}", item.getName(), config.getObjectType(), setting);
         if (item instanceof NumberItem) {
             publisher.postUpdate(item.getName(), new DecimalType(setting));
         } else if (item instanceof StringItem) {

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/model/Auxiliary.java
Patch:
@@ -67,7 +67,7 @@ public void updateItem(Item item, OmniLinkBindingConfig config, EventPublisher p
             default:
                 return;
         }
-        logger.debug("updating item {} for type {} to  {}", item.getName(), config.getObjectType(), setting);
+        logger.debug("updating item {} for type {} to {}", item.getName(), config.getObjectType(), setting);
         if (item instanceof NumberItem) {
             publisher.postUpdate(item.getName(), new DecimalType(setting));
         }

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/model/Thermostat.java
Patch:
@@ -100,7 +100,7 @@ public void updateItem(Item item, OmniLinkBindingConfig config, EventPublisher p
             default:
                 return;
         }
-        logger.debug("updating item {} for type {} to  {}", item.getName(), config.getObjectType(), setting);
+        logger.debug("updating item {} for type {} to {}", item.getName(), config.getObjectType(), setting);
         if (item instanceof NumberItem) {
             publisher.postUpdate(item.getName(), new DecimalType(setting));
         } else if (item instanceof SwitchItem) {

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/connection/OneWireConnection.java
Patch:
@@ -158,7 +158,7 @@ public static synchronized void updated(Dictionary<String, ?> pvConfig) throws C
             if (cvOwConnection == null) {
                 logger.debug("Not connected to owserver yet. Trying to connect...");
                 if (!connect()) {
-                    logger.warn("Inital connection to owserver failed!");
+                    logger.warn("Initial connection to owserver failed!");
                 } else {
                     logger.debug("Success: connected to owserver.");
                 }
@@ -189,7 +189,7 @@ private static synchronized boolean checkIfDeviceExists(String pvDevicePropertyP
         String[] pvDevicePropertyPathParts = pvDevicePropertyPath.trim().split("/");
 
         String lvDevicePath = pvDevicePropertyPathParts[0];
-        logger.debug("check if device exisits '{}': ", new Object[] { lvDevicePath });
+        logger.debug("check if device exists '{}': ", new Object[] { lvDevicePath });
 
         return OneWireConnection.getConnection().exists(lvDevicePath);
     }

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/scheduler/OneWireUpdateScheduler.java
Patch:
@@ -199,7 +199,7 @@ public synchronized boolean scheduleUpdate(String pvItemName, int pvAutoRefreshT
         int lvOldListNumber = getAutoRefreshTimeInSecs(pvItemName);
         if (lvOldListNumber > 0) {
             if (lvOldListNumber == pvAutoRefreshTimeInSecs) {
-                logger.debug("item '{}' was already in  auto refresh list {}", pvItemName, pvAutoRefreshTimeInSecs);
+                logger.debug("item '{}' was already in auto refresh list {}", pvItemName, pvAutoRefreshTimeInSecs);
                 return true;
             }
             List<String> lvOldList = cvScheduleMap.get(lvOldListNumber);

File: bundles/binding/org.openhab.binding.onkyo/src/main/java/org/openhab/binding/onkyo/internal/OnkyoBinding.java
Patch:
@@ -365,7 +365,7 @@ public void statusUpdateReceived(EventObject event, String ip, String data) {
                                 }
 
                             } catch (Exception e) {
-                                logger.error("Unregonized command '" + deviceCmd + "'", e);
+                                logger.error("Unrecognized command '" + deviceCmd + "'", e);
                             }
                         }
 

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -282,7 +282,7 @@ public synchronized void execute() {
                     logger.info("Unsupported MAX!Cube message detected. Ignoring and continue with next Line.");
                     this.messageProcessor.reset();
                 } catch (MessageIsWaitingException ex) {
-                    logger.info("There was and unhandled message waiting. Ignoring and continue with next Line.");
+                    logger.info("There was an unhandled message waiting. Ignoring and continue with next Line.");
                     this.messageProcessor.reset();
                 } catch (Exception e) {
                     logger.info("Failed to process message received by MAX! protocol.");

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -84,7 +84,7 @@ public static Device create(byte[] raw, List<Configuration> configurations) {
         String rfAddress = Utils.toHex(raw[0] & 0xFF, raw[1] & 0xFF, raw[2] & 0xFF);
 
         // Based on the RF address and the corresponding configuration,
-        // create the device based on the type specified in it's configuration
+        // create the device based on the type specified in its configuration
 
         Device device = Device.create(rfAddress, configurations);
         if (device == null) {

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/S_Message.java
Patch:
@@ -39,7 +39,7 @@ public S_Message(String raw) {
                 logger.debug("Exception occurred during parsing of S message: {}", e.getMessage(), e);
             }
         } else {
-            logger.debug("Unexpected # of tolkens ({}) received in S message: {}", tokens.length, this.getPayload());
+            logger.debug("Unexpected # of tokens ({}) received in S message: {}", tokens.length, this.getPayload());
         }
     }
 

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/MaxCulBinding.java
Patch:
@@ -145,7 +145,7 @@ protected void internalReceiveCommand(final String itemName, Command command) {
                                 TimerTask task = new TimerTask() {
                                     @Override
                                     public void run() {
-                                        logger.debug(itemName + " pairMode time out executed");
+                                        logger.debug(itemName + " pairMode timeout executed");
                                         pairMode = false;
                                         eventPublisher.postUpdate(itemName, OnOffType.OFF);
                                     }

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/MaxCulGenericBindingProvider.java
Patch:
@@ -215,7 +215,7 @@ public List<MaxCulBindingConfig> getConfigsForRadioAddr(String addr) {
      * -> B,C B -> C,D
      */
     private void buildAssociationMap() {
-        // TODO refactor into it's own class e.g. AssociationMap extends HashMap
+        // TODO refactor into its own class e.g. AssociationMap extends HashMap
         if (super.bindingConfigs.values().isEmpty() == false) {
             logger.debug(
                     "Found " + super.bindingConfigs.values().size() + " binding configs to process in association map");
@@ -249,7 +249,7 @@ private void buildAssociationMap() {
                         }
                     }
                 } else if (config.getAssociatedSerialNum().isEmpty() == false) {
-                    /* new serial number, add it and it's associations */
+                    /* new serial number, add it and its associations */
                     HashSet<MaxCulBindingConfig> set = new HashSet<MaxCulBindingConfig>();
                     for (String serial : config.getAssociatedSerialNum()) {
                         /*

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/MiosUnit.java
Patch:
@@ -65,7 +65,7 @@ public class MiosUnit {
     private static final Logger logger = LoggerFactory.getLogger(MiosUnit.class);
 
     /**
-     * All MiOS unit's have a name, that must be specified as the configuration is being loaded.
+     * All MiOS units have a name, that must be specified as the configuration is being loaded.
      */
     public MiosUnit(String name) {
         this.name = name;

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/MiosUnitConnector.java
Patch:
@@ -191,7 +191,7 @@ private void callDevice(DeviceBindingConfig config, Command command, State state
                     command.toString(), config.getItemName());
             return;
         } else if (newCommand.equals("")) {
-            logger.trace("callDevice: Item '{}' has disabled the use of Command '{}' via it's configuration '{}'",
+            logger.trace("callDevice: Item '{}' has disabled the use of Command '{}' via its configuration '{}'",
                     new Object[] { config.getItemName(), command.toString(), config.toProperty() });
             return;
         }

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/config/DeviceBindingConfig.java
Patch:
@@ -76,7 +76,7 @@
  * <p>
  *
  * In addition to binding against a Device's Variables, you can bind to the set of Device Attributes it exposes.
- * Specifically it's <code>id</code> and <code>status</code>:
+ * Specifically its <code>id</code> and <code>status</code>:
  * <p>
  * <ul>
  * <li>

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/config/MiosBindingConfig.java
Patch:
@@ -388,7 +388,7 @@ private State createState(String value) {
      * If the <code>in:</code> parameter is missing, then no transformation will occur, and the source-value will be
      * returned (as a <code>StringType</code>).
      * <p>
-     * If the <code>in:</code> parameter is present, then it's value is used to determine which openHAB
+     * If the <code>in:</code> parameter is present, then its value is used to determine which openHAB
      * TransformationService should be used to transform the value.
      * 
      * @return the transformed value, or the input (<code>value</code>) if no transformation has been specified in the
@@ -441,7 +441,7 @@ private TransformationService getOutTransformationService() {
      * Transform data in an openHAB Item into a form suitable for use in calls made to a MiOS Unit.
      * <p>
      * 
-     * In order to calls a MiOS Unit, we may need to transform an Item's current value from it's openHAB State to a form
+     * In order to calls a MiOS Unit, we may need to transform an Item's current value from its openHAB State to a form
      * suitable for transmission to remote MiOS Unit.
      * <p>
      * This method is responsible for transforming an Item's State value, using metadata supplied by the user, via the
@@ -450,7 +450,7 @@ private TransformationService getOutTransformationService() {
      * If the <code>out:</code> parameter is missing, then no transformation will occur, and the source-value will be
      * returned.
      * <p>
-     * If the <code>out:</code> parameter is present, then it's value is used to determine which openHAB
+     * If the <code>out:</code> parameter is present, then its value is used to determine which openHAB
      * TransformationService should be used to transform the value.
      * 
      * @return the transformed value, or the input (<code>value</code>) if no transformation has been specified in the

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/procimg/ProcessImageFactory.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * Interface defining the factory methods for
- * the process image and it's elements.
+ * the process image and its elements.
  *
  * @author Dieter Wimberger
  * @version @version@ (@date@)

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/procimg/SimpleDigitalOut.java
Patch:
@@ -34,7 +34,7 @@ public class SimpleDigitalOut implements DigitalOut {
 
     /**
      * Constructs a new <tt>SimpleDigitalOut</tt> instance.
-     * It's state will be invalid.
+     * Its state will be invalid.
      */
     public SimpleDigitalOut() {
     }// constructor

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/procimg/SimpleInputRegister.java
Patch:
@@ -29,7 +29,7 @@ public class SimpleInputRegister extends SynchronizedAbstractRegister implements
 
     /**
      * Constructs a new <tt>SimpleInputRegister</tt> instance.
-     * It's state will be invalid.
+     * Its state will be invalid.
      */
     public SimpleInputRegister() {
     }// constructor

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/procimg/SimpleRegister.java
Patch:
@@ -29,7 +29,7 @@ public class SimpleRegister extends SynchronizedAbstractRegister implements Regi
 
     /**
      * Constructs a new <tt>SimpleRegister</tt> instance.
-     * It's state will be invalid.
+     * Its state will be invalid.
      */
     public SimpleRegister() {
         m_Register = null;

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttEventBusBinding.java
Patch:
@@ -211,7 +211,7 @@ private void setupEventBusStatePublisher(String topic) {
     private void setupEventBusCommandSubscriber(String topic) {
 
         if (StringUtils.isBlank(topic)) {
-            logger.trace("No topic defined for Event Bus Command Subsriber");
+            logger.trace("No topic defined for Event Bus Command Subscriber");
             return;
         }
 
@@ -260,7 +260,7 @@ public void processMessage(String topic, byte[] message) {
     private void setupEventBusStateSubscriber(String topic) {
 
         if (StringUtils.isBlank(topic)) {
-            logger.trace("No topic defined for Event Bus State Subsriber");
+            logger.trace("No topic defined for Event Bus State Subscriber");
             return;
         }
 

File: bundles/binding/org.openhab.binding.mqttitude/src/main/java/org/openhab/binding/mqttitude/internal/MqttitudeBinding.java
Patch:
@@ -91,7 +91,7 @@ public void activate() {
      */
     @Override
     public void deactivate() {
-        logger.debug("Deactivating Mqtt binding");
+        logger.debug("Deactivating Mqttitude binding");
         super.deactivate();
         unregisterAll();
     }

File: bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java
Patch:
@@ -290,7 +290,7 @@ public void internalReceiveCommand(String itemName, Command command) {
 
     /**
      * Checks whether the command is value and if the deviceID exists then get
-     * status of Garage Door Opener and send command to change it's state
+     * status of Garage Door Opener and send command to change its state
      * opposite of its current state
      *
      * @param command
@@ -353,7 +353,7 @@ private void schedulePoll(long millis) {
             pollFuture.cancel(false);
         }
 
-        logger.trace("rapidRefreshFuture scheduleing for {} millis", millis);
+        logger.trace("rapidRefreshFuture scheduling for {} millis", millis);
         // start polling at the RAPID_REFRESH_SECS interval
         pollFuture = pollService.scheduleAtFixedRate(new Runnable() {
             @Override

File: bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java
Patch:
@@ -96,7 +96,7 @@ public MyqData(String username, String password, String appId, int timeout) {
      * 
      */
     public GarageDoorData getGarageData() throws InvalidLoginException, IOException {
-        logger.trace("Retreiveing door data");
+        logger.trace("Retrieving door data");
         String url = String.format("%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s", WEBSITE, enc(appId),
                 enc(getSecurityToken()));
 
@@ -175,7 +175,7 @@ private String getSecurityToken() throws IOException, InvalidLoginException {
     private synchronized JsonNode request(String method, String url, String payload, String payloadType, boolean retry)
             throws IOException, InvalidLoginException {
 
-        logger.trace("Requsting URL {}", url);
+        logger.trace("Requesting URL {}", url);
 
         String dataString = executeUrl(method, url, header, payload == null ? null : IOUtils.toInputStream(payload),
                 payloadType, timeout);

File: bundles/binding/org.openhab.binding.mystromecopower/src/main/java/org/openhab/binding/mystromecopower/internal/MyStromEcoPowerBinding.java
Patch:
@@ -172,7 +172,7 @@ protected void execute() {
                         }
                     }
                 } else {
-                    logger.warn("The device itemName '{}' not found on discovery verify device is not offline",
+                    logger.warn("The device itemName '{}' not found on discovery. Verify device is not offline",
                             itemName);
                 }
             }
@@ -198,7 +198,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
             if (deviceId != null) {
                 if (provider.getIsSwitch(itemName)) {
                     try {
-                        logger.debug("Command '{}' is about to be send to item '{}'", command, itemName);
+                        logger.debug("Command '{}' is about to be sent to item '{}'", command, itemName);
 
                         if (OnOffType.ON.equals(command) || OnOffType.OFF.equals(command)) {
                             // on/off command
@@ -253,7 +253,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
                     }
                 }
             } else {
-                logger.error("Unable to send command to '{}' device is not in discovery table", itemName);
+                logger.error("Unable to send command to '{}'. Device is not in discovery table", itemName);
             }
         }
     }

File: bundles/binding/org.openhab.binding.mystromecopower/src/main/java/org/openhab/binding/mystromecopower/internal/api/MystromClient.java
Patch:
@@ -85,7 +85,7 @@ public Boolean login() {
             if (!status.equals("ok")) {
                 return false;
             }
-            logger.debug("Logon successfull");
+            logger.debug("Logon successful");
 
             authToken = jsonObject.get("authToken").getAsString();
 
@@ -243,7 +243,7 @@ public Boolean ChangeState(String deviceId, Boolean newStateIsOn) {
             }
 
             String newState = jsonObject.get("state").getAsString();
-            logger.debug("Switch state for device '{}' successfull, state is '{}'", deviceId, newState);
+            logger.debug("Switch state for device '{}' successful, state is '{}'", deviceId, newState);
 
             return true;
         } catch (Exception ex) {

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -282,7 +282,7 @@ public synchronized void execute() {
                     logger.info("Unsupported MAX!Cube message detected. Ignoring and continue with next Line.");
                     this.messageProcessor.reset();
                 } catch (MessageIsWaitingException ex) {
-                    logger.info("There was and unhandled message waiting. Ignoring and continue with next Line.");
+                    logger.info("There was an unhandled message waiting. Ignoring and continue with next Line.");
                     this.messageProcessor.reset();
                 } catch (Exception e) {
                     logger.info("Failed to process message received by MAX! protocol.");

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -84,7 +84,7 @@ public static Device create(byte[] raw, List<Configuration> configurations) {
         String rfAddress = Utils.toHex(raw[0] & 0xFF, raw[1] & 0xFF, raw[2] & 0xFF);
 
         // Based on the RF address and the corresponding configuration,
-        // create the device based on the type specified in it's configuration
+        // create the device based on the type specified in its configuration
 
         Device device = Device.create(rfAddress, configurations);
         if (device == null) {

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/S_Message.java
Patch:
@@ -39,7 +39,7 @@ public S_Message(String raw) {
                 logger.debug("Exception occurred during parsing of S message: {}", e.getMessage(), e);
             }
         } else {
-            logger.debug("Unexpected # of tolkens ({}) received in S message: {}", tokens.length, this.getPayload());
+            logger.debug("Unexpected # of tokens ({}) received in S message: {}", tokens.length, this.getPayload());
         }
     }
 

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/MaxCulBinding.java
Patch:
@@ -145,7 +145,7 @@ protected void internalReceiveCommand(final String itemName, Command command) {
                                 TimerTask task = new TimerTask() {
                                     @Override
                                     public void run() {
-                                        logger.debug(itemName + " pairMode time out executed");
+                                        logger.debug(itemName + " pairMode timeout executed");
                                         pairMode = false;
                                         eventPublisher.postUpdate(itemName, OnOffType.OFF);
                                     }

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/MaxCulGenericBindingProvider.java
Patch:
@@ -215,7 +215,7 @@ public List<MaxCulBindingConfig> getConfigsForRadioAddr(String addr) {
      * -> B,C B -> C,D
      */
     private void buildAssociationMap() {
-        // TODO refactor into it's own class e.g. AssociationMap extends HashMap
+        // TODO refactor into its own class e.g. AssociationMap extends HashMap
         if (super.bindingConfigs.values().isEmpty() == false) {
             logger.debug(
                     "Found " + super.bindingConfigs.values().size() + " binding configs to process in association map");
@@ -249,7 +249,7 @@ private void buildAssociationMap() {
                         }
                     }
                 } else if (config.getAssociatedSerialNum().isEmpty() == false) {
-                    /* new serial number, add it and it's associations */
+                    /* new serial number, add it and its associations */
                     HashSet<MaxCulBindingConfig> set = new HashSet<MaxCulBindingConfig>();
                     for (String serial : config.getAssociatedSerialNum()) {
                         /*

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/MiosUnit.java
Patch:
@@ -65,7 +65,7 @@ public class MiosUnit {
     private static final Logger logger = LoggerFactory.getLogger(MiosUnit.class);
 
     /**
-     * All MiOS unit's have a name, that must be specified as the configuration is being loaded.
+     * All MiOS units have a name, that must be specified as the configuration is being loaded.
      */
     public MiosUnit(String name) {
         this.name = name;

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/MiosUnitConnector.java
Patch:
@@ -191,7 +191,7 @@ private void callDevice(DeviceBindingConfig config, Command command, State state
                     command.toString(), config.getItemName());
             return;
         } else if (newCommand.equals("")) {
-            logger.trace("callDevice: Item '{}' has disabled the use of Command '{}' via it's configuration '{}'",
+            logger.trace("callDevice: Item '{}' has disabled the use of Command '{}' via its configuration '{}'",
                     new Object[] { config.getItemName(), command.toString(), config.toProperty() });
             return;
         }

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/config/DeviceBindingConfig.java
Patch:
@@ -76,7 +76,7 @@
  * <p>
  *
  * In addition to binding against a Device's Variables, you can bind to the set of Device Attributes it exposes.
- * Specifically it's <code>id</code> and <code>status</code>:
+ * Specifically its <code>id</code> and <code>status</code>:
  * <p>
  * <ul>
  * <li>

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/config/MiosBindingConfig.java
Patch:
@@ -388,7 +388,7 @@ private State createState(String value) {
      * If the <code>in:</code> parameter is missing, then no transformation will occur, and the source-value will be
      * returned (as a <code>StringType</code>).
      * <p>
-     * If the <code>in:</code> parameter is present, then it's value is used to determine which openHAB
+     * If the <code>in:</code> parameter is present, then its value is used to determine which openHAB
      * TransformationService should be used to transform the value.
      * 
      * @return the transformed value, or the input (<code>value</code>) if no transformation has been specified in the
@@ -441,7 +441,7 @@ private TransformationService getOutTransformationService() {
      * Transform data in an openHAB Item into a form suitable for use in calls made to a MiOS Unit.
      * <p>
      * 
-     * In order to calls a MiOS Unit, we may need to transform an Item's current value from it's openHAB State to a form
+     * In order to calls a MiOS Unit, we may need to transform an Item's current value from its openHAB State to a form
      * suitable for transmission to remote MiOS Unit.
      * <p>
      * This method is responsible for transforming an Item's State value, using metadata supplied by the user, via the
@@ -450,7 +450,7 @@ private TransformationService getOutTransformationService() {
      * If the <code>out:</code> parameter is missing, then no transformation will occur, and the source-value will be
      * returned.
      * <p>
-     * If the <code>out:</code> parameter is present, then it's value is used to determine which openHAB
+     * If the <code>out:</code> parameter is present, then its value is used to determine which openHAB
      * TransformationService should be used to transform the value.
      * 
      * @return the transformed value, or the input (<code>value</code>) if no transformation has been specified in the

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/procimg/ProcessImageFactory.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * Interface defining the factory methods for
- * the process image and it's elements.
+ * the process image and its elements.
  *
  * @author Dieter Wimberger
  * @version @version@ (@date@)

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/procimg/SimpleDigitalOut.java
Patch:
@@ -34,7 +34,7 @@ public class SimpleDigitalOut implements DigitalOut {
 
     /**
      * Constructs a new <tt>SimpleDigitalOut</tt> instance.
-     * It's state will be invalid.
+     * Its state will be invalid.
      */
     public SimpleDigitalOut() {
     }// constructor

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/procimg/SimpleInputRegister.java
Patch:
@@ -29,7 +29,7 @@ public class SimpleInputRegister extends SynchronizedAbstractRegister implements
 
     /**
      * Constructs a new <tt>SimpleInputRegister</tt> instance.
-     * It's state will be invalid.
+     * Its state will be invalid.
      */
     public SimpleInputRegister() {
     }// constructor

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/procimg/SimpleRegister.java
Patch:
@@ -29,7 +29,7 @@ public class SimpleRegister extends SynchronizedAbstractRegister implements Regi
 
     /**
      * Constructs a new <tt>SimpleRegister</tt> instance.
-     * It's state will be invalid.
+     * Its state will be invalid.
      */
     public SimpleRegister() {
         m_Register = null;

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttEventBusBinding.java
Patch:
@@ -211,7 +211,7 @@ private void setupEventBusStatePublisher(String topic) {
     private void setupEventBusCommandSubscriber(String topic) {
 
         if (StringUtils.isBlank(topic)) {
-            logger.trace("No topic defined for Event Bus Command Subsriber");
+            logger.trace("No topic defined for Event Bus Command Subscriber");
             return;
         }
 
@@ -260,7 +260,7 @@ public void processMessage(String topic, byte[] message) {
     private void setupEventBusStateSubscriber(String topic) {
 
         if (StringUtils.isBlank(topic)) {
-            logger.trace("No topic defined for Event Bus State Subsriber");
+            logger.trace("No topic defined for Event Bus State Subscriber");
             return;
         }
 

File: bundles/binding/org.openhab.binding.mqttitude/src/main/java/org/openhab/binding/mqttitude/internal/MqttitudeBinding.java
Patch:
@@ -91,7 +91,7 @@ public void activate() {
      */
     @Override
     public void deactivate() {
-        logger.debug("Deactivating Mqtt binding");
+        logger.debug("Deactivating Mqttitude binding");
         super.deactivate();
         unregisterAll();
     }

File: bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java
Patch:
@@ -290,7 +290,7 @@ public void internalReceiveCommand(String itemName, Command command) {
 
     /**
      * Checks whether the command is value and if the deviceID exists then get
-     * status of Garage Door Opener and send command to change it's state
+     * status of Garage Door Opener and send command to change its state
      * opposite of its current state
      *
      * @param command
@@ -353,7 +353,7 @@ private void schedulePoll(long millis) {
             pollFuture.cancel(false);
         }
 
-        logger.trace("rapidRefreshFuture scheduleing for {} millis", millis);
+        logger.trace("rapidRefreshFuture scheduling for {} millis", millis);
         // start polling at the RAPID_REFRESH_SECS interval
         pollFuture = pollService.scheduleAtFixedRate(new Runnable() {
             @Override

File: bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqData.java
Patch:
@@ -96,7 +96,7 @@ public MyqData(String username, String password, String appId, int timeout) {
      * 
      */
     public GarageDoorData getGarageData() throws InvalidLoginException, IOException {
-        logger.trace("Retreiveing door data");
+        logger.trace("Retrieving door data");
         String url = String.format("%s/api/v4/userdevicedetails/get?appId=%s&SecurityToken=%s", WEBSITE, enc(appId),
                 enc(getSecurityToken()));
 
@@ -175,7 +175,7 @@ private String getSecurityToken() throws IOException, InvalidLoginException {
     private synchronized JsonNode request(String method, String url, String payload, String payloadType, boolean retry)
             throws IOException, InvalidLoginException {
 
-        logger.trace("Requsting URL {}", url);
+        logger.trace("Requesting URL {}", url);
 
         String dataString = executeUrl(method, url, header, payload == null ? null : IOUtils.toInputStream(payload),
                 payloadType, timeout);

File: bundles/binding/org.openhab.binding.mystromecopower/src/main/java/org/openhab/binding/mystromecopower/internal/MyStromEcoPowerBinding.java
Patch:
@@ -172,7 +172,7 @@ protected void execute() {
                         }
                     }
                 } else {
-                    logger.warn("The device itemName '{}' not found on discovery verify device is not offline",
+                    logger.warn("The device itemName '{}' not found on discovery. Verify device is not offline",
                             itemName);
                 }
             }
@@ -198,7 +198,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
             if (deviceId != null) {
                 if (provider.getIsSwitch(itemName)) {
                     try {
-                        logger.debug("Command '{}' is about to be send to item '{}'", command, itemName);
+                        logger.debug("Command '{}' is about to be sent to item '{}'", command, itemName);
 
                         if (OnOffType.ON.equals(command) || OnOffType.OFF.equals(command)) {
                             // on/off command
@@ -253,7 +253,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
                     }
                 }
             } else {
-                logger.error("Unable to send command to '{}' device is not in discovery table", itemName);
+                logger.error("Unable to send command to '{}'. Device is not in discovery table", itemName);
             }
         }
     }

File: bundles/binding/org.openhab.binding.mystromecopower/src/main/java/org/openhab/binding/mystromecopower/internal/api/MystromClient.java
Patch:
@@ -85,7 +85,7 @@ public Boolean login() {
             if (!status.equals("ok")) {
                 return false;
             }
-            logger.debug("Logon successfull");
+            logger.debug("Logon successful");
 
             authToken = jsonObject.get("authToken").getAsString();
 
@@ -243,7 +243,7 @@ public Boolean ChangeState(String deviceId, Boolean newStateIsOn) {
             }
 
             String newState = jsonObject.get("state").getAsString();
-            logger.debug("Switch state for device '{}' successfull, state is '{}'", deviceId, newState);
+            logger.debug("Switch state for device '{}' successful, state is '{}'", deviceId, newState);
 
             return true;
         } catch (Exception ex) {

File: bundles/binding/org.openhab.binding.gpio/src/main/java/org/openhab/binding/gpio/internal/GPIOGenericBindingProvider.java
Patch:
@@ -107,7 +107,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
         String[] properties = bindingConfig.split(" ");
 
         if (properties.length > 3) {
-            logger.error("Wrong number of agruments (" + properties.length + ") in configuration string '"
+            logger.error("Wrong number of arguments (" + properties.length + ") in configuration string '"
                     + bindingConfig + "'");
             throw new BindingConfigParseException("Wrong number of agruments (" + properties.length
                     + ") in configuration string '" + bindingConfig + "'");
@@ -185,9 +185,9 @@ public void processBindingConfiguration(String context, Item item, String bindin
 
         /* Pin number wasn't configured */
         if (config.pinNumber == GPIOBindingProvider.PINNUMBER_UNDEFINED) {
-            logger.error("Mandatory paratemer (pin) is missing in configuration string '" + bindingConfig + "'");
+            logger.error("Mandatory parameter (pin) is missing in configuration string '" + bindingConfig + "'");
             throw new BindingConfigParseException(
-                    "Mandatory paratemer (pin) is missing in configuration string '" + bindingConfig + "'");
+                    "Mandatory parameter (pin) is missing in configuration string '" + bindingConfig + "'");
         }
 
         if (item instanceof ContactItem) {

File: bundles/binding/org.openhab.binding.harmonyhub/src/main/java/org/openhab/binding/harmonyhub/internal/HarmonyHubBindingType.java
Patch:
@@ -32,7 +32,7 @@ public enum HarmonyHubBindingType {
     private HarmonyHubBindingDirection direction;
 
     /**
-     * helper map retrieve HarmonyHubBindingType by it's label
+     * helper map retrieve HarmonyHubBindingType by its label
      */
     private static Map<String, HarmonyHubBindingType> labelToHarmonyHubBindingType;
 

File: bundles/binding/org.openhab.binding.hdanywhere/src/main/java/org/openhab/binding/hdanywhere/internal/HDanywhereBinding.java
Patch:
@@ -126,7 +126,7 @@ public void deactivate() {
         try {
             sched = StdSchedulerFactory.getDefaultScheduler();
         } catch (SchedulerException e) {
-            logger.error("An exception occurred while getting a reference to the Quarz Scheduler");
+            logger.error("An exception occurred while getting a reference to the Quartz Scheduler");
         }
 
         for (HDanywhereBindingProvider provider : providers) {
@@ -262,7 +262,7 @@ protected void execute() {
                                 }
                             }
                         } catch (SchedulerException e1) {
-                            logger.error("An exception occurred while quering the Quartz Scheduler ({})",
+                            logger.error("An exception occurred while querying the Quartz Scheduler ({})",
                                     e1.getMessage());
                         }
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/RemoteControlOptionParser.java
Patch:
@@ -50,10 +50,10 @@ public HmRemoteControlOptions parse(String remoteControlAddress, String options)
         String[] unitValueList = getValueItems("UNIT");
 
         if (logger.isDebugEnabled()) {
-            logger.debug("Remote control {} supports these beep parameter: {}", remoteControlAddress, beepValueList);
-            logger.debug("Remote control {} supports these backlight parameter: {}", remoteControlAddress,
+            logger.debug("Remote control {} supports these beep parameters: {}", remoteControlAddress, beepValueList);
+            logger.debug("Remote control {} supports these backlight parameters: {}", remoteControlAddress,
                     backlightValueList);
-            logger.debug("Remote control {} supports these unit parameter: {}", remoteControlAddress, unitValueList);
+            logger.debug("Remote control {} supports these unit parameters: {}", remoteControlAddress, unitValueList);
             logger.debug("Remote control {} supports these symbols: {}", remoteControlAddress, symbols);
         }
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/StringTypeConverter.java
Patch:
@@ -53,7 +53,7 @@ protected String toString(StringType type, HmValueItem hmValueItem) {
             if (idx != -1) {
                 return String.valueOf(idx);
             } else {
-                logger.warn("Cant' find value '{}' in valueList for item {}, converting plain value", type.toString(),
+                logger.warn("Can't find value '{}' in valueList for item {}, converting plain value", type.toString(),
                         hmValueItem);
             }
         }
@@ -109,7 +109,7 @@ private String getValueListValue(HmValueItem hmValueItem) {
             if (valueListValue != null) {
                 return valueListValue;
             } else {
-                logger.warn("Cant' find value '{}' in valueList for item {}, converting plain value",
+                logger.warn("Can't find value '{}' in valueList for item {}, converting plain value",
                         hmValueItem.getValue(), hmValueItem);
             }
         }

File: bundles/binding/org.openhab.binding.iec6205621meter/src/main/java/org/openhab/binding/iec6205621meter/internal/Iec6205621MeterBinding.java
Patch:
@@ -125,7 +125,7 @@ protected void execute() {
                         if (obis != null && dataSets.containsKey(obis)) {
                             DataSet dataSet = dataSets.get(obis);
                             if (logger.isDebugEnabled()) {
-                                logger.debug("Updateing item " + itemName + " with OBIS code " + obis + " and value "
+                                logger.debug("Updating item " + itemName + " with OBIS code " + obis + " and value "
                                         + dataSet.getValue());
                             }
                             Class<? extends Item> itemType = provider.getItemType(itemName);

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/IhcBinding.java
Patch:
@@ -525,7 +525,7 @@ private IhcBindingProvider findFirstMatchingBindingProvider(String itemName, Com
      */
     private void enableResourceValueNotifications() throws IhcExecption {
 
-        logger.debug("Subscripe resource runtime value notifications");
+        logger.debug("Subscribe resource runtime value notifications");
 
         if (ihc != null) {
 

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/message/Msg.java
Patch:
@@ -414,7 +414,7 @@ public void setUserData(byte[] arg) {
             setByte("userData13", data[12]);
             setByte("userData14", data[13]);
         } catch (FieldException e) {
-            logger.error("got field exception for msg {}:", e);
+            logger.error("got field exception on msg {}:", e);
         }
     }
 

File: bundles/binding/org.openhab.binding.gpio/src/main/java/org/openhab/binding/gpio/internal/GPIOGenericBindingProvider.java
Patch:
@@ -107,7 +107,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
         String[] properties = bindingConfig.split(" ");
 
         if (properties.length > 3) {
-            logger.error("Wrong number of agruments (" + properties.length + ") in configuration string '"
+            logger.error("Wrong number of arguments (" + properties.length + ") in configuration string '"
                     + bindingConfig + "'");
             throw new BindingConfigParseException("Wrong number of agruments (" + properties.length
                     + ") in configuration string '" + bindingConfig + "'");
@@ -185,9 +185,9 @@ public void processBindingConfiguration(String context, Item item, String bindin
 
         /* Pin number wasn't configured */
         if (config.pinNumber == GPIOBindingProvider.PINNUMBER_UNDEFINED) {
-            logger.error("Mandatory paratemer (pin) is missing in configuration string '" + bindingConfig + "'");
+            logger.error("Mandatory parameter (pin) is missing in configuration string '" + bindingConfig + "'");
             throw new BindingConfigParseException(
-                    "Mandatory paratemer (pin) is missing in configuration string '" + bindingConfig + "'");
+                    "Mandatory parameter (pin) is missing in configuration string '" + bindingConfig + "'");
         }
 
         if (item instanceof ContactItem) {

File: bundles/binding/org.openhab.binding.harmonyhub/src/main/java/org/openhab/binding/harmonyhub/internal/HarmonyHubBindingType.java
Patch:
@@ -32,7 +32,7 @@ public enum HarmonyHubBindingType {
     private HarmonyHubBindingDirection direction;
 
     /**
-     * helper map retrieve HarmonyHubBindingType by it's label
+     * helper map retrieve HarmonyHubBindingType by its label
      */
     private static Map<String, HarmonyHubBindingType> labelToHarmonyHubBindingType;
 

File: bundles/binding/org.openhab.binding.hdanywhere/src/main/java/org/openhab/binding/hdanywhere/internal/HDanywhereBinding.java
Patch:
@@ -126,7 +126,7 @@ public void deactivate() {
         try {
             sched = StdSchedulerFactory.getDefaultScheduler();
         } catch (SchedulerException e) {
-            logger.error("An exception occurred while getting a reference to the Quarz Scheduler");
+            logger.error("An exception occurred while getting a reference to the Quartz Scheduler");
         }
 
         for (HDanywhereBindingProvider provider : providers) {
@@ -262,7 +262,7 @@ protected void execute() {
                                 }
                             }
                         } catch (SchedulerException e1) {
-                            logger.error("An exception occurred while quering the Quartz Scheduler ({})",
+                            logger.error("An exception occurred while querying the Quartz Scheduler ({})",
                                     e1.getMessage());
                         }
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/RemoteControlOptionParser.java
Patch:
@@ -50,10 +50,10 @@ public HmRemoteControlOptions parse(String remoteControlAddress, String options)
         String[] unitValueList = getValueItems("UNIT");
 
         if (logger.isDebugEnabled()) {
-            logger.debug("Remote control {} supports these beep parameter: {}", remoteControlAddress, beepValueList);
-            logger.debug("Remote control {} supports these backlight parameter: {}", remoteControlAddress,
+            logger.debug("Remote control {} supports these beep parameters: {}", remoteControlAddress, beepValueList);
+            logger.debug("Remote control {} supports these backlight parameters: {}", remoteControlAddress,
                     backlightValueList);
-            logger.debug("Remote control {} supports these unit parameter: {}", remoteControlAddress, unitValueList);
+            logger.debug("Remote control {} supports these unit parameters: {}", remoteControlAddress, unitValueList);
             logger.debug("Remote control {} supports these symbols: {}", remoteControlAddress, symbols);
         }
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/StringTypeConverter.java
Patch:
@@ -53,7 +53,7 @@ protected String toString(StringType type, HmValueItem hmValueItem) {
             if (idx != -1) {
                 return String.valueOf(idx);
             } else {
-                logger.warn("Cant' find value '{}' in valueList for item {}, converting plain value", type.toString(),
+                logger.warn("Can't find value '{}' in valueList for item {}, converting plain value", type.toString(),
                         hmValueItem);
             }
         }
@@ -109,7 +109,7 @@ private String getValueListValue(HmValueItem hmValueItem) {
             if (valueListValue != null) {
                 return valueListValue;
             } else {
-                logger.warn("Cant' find value '{}' in valueList for item {}, converting plain value",
+                logger.warn("Can't find value '{}' in valueList for item {}, converting plain value",
                         hmValueItem.getValue(), hmValueItem);
             }
         }

File: bundles/binding/org.openhab.binding.iec6205621meter/src/main/java/org/openhab/binding/iec6205621meter/internal/Iec6205621MeterBinding.java
Patch:
@@ -125,7 +125,7 @@ protected void execute() {
                         if (obis != null && dataSets.containsKey(obis)) {
                             DataSet dataSet = dataSets.get(obis);
                             if (logger.isDebugEnabled()) {
-                                logger.debug("Updateing item " + itemName + " with OBIS code " + obis + " and value "
+                                logger.debug("Updating item " + itemName + " with OBIS code " + obis + " and value "
                                         + dataSet.getValue());
                             }
                             Class<? extends Item> itemType = provider.getItemType(itemName);

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/IhcBinding.java
Patch:
@@ -525,7 +525,7 @@ private IhcBindingProvider findFirstMatchingBindingProvider(String itemName, Com
      */
     private void enableResourceValueNotifications() throws IhcExecption {
 
-        logger.debug("Subscripe resource runtime value notifications");
+        logger.debug("Subscribe resource runtime value notifications");
 
         if (ihc != null) {
 

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/message/Msg.java
Patch:
@@ -414,7 +414,7 @@ public void setUserData(byte[] arg) {
             setByte("userData13", data[12]);
             setByte("userData14", data[13]);
         } catch (FieldException e) {
-            logger.error("got field exception for msg {}:", e);
+            logger.error("got field exception on msg {}:", e);
         }
     }
 

File: bundles/binding/org.openhab.binding.tacmi/src/main/java/org/openhab/binding/tacmi/internal/message/AnalogValue.java
Patch:
@@ -33,7 +33,7 @@ public AnalogValue(int rawValue, int type) {
         switch (type) {
             case 1:
                 measureType = TACmiMeasureType.TEMPERATURE;
-                value = new BigDecimal(rawValue / 10.0);
+                value = new BigDecimal(rawValue).movePointLeft(1);
                 break;
             case 4:
                 measureType = TACmiMeasureType.SECONDS;

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcBaseDAO.java
Patch:
@@ -210,7 +210,7 @@ public String doGetDB() {
     public boolean doIfTableExists(ItemsVO vo) {
         String sql = StringUtilsExt.replaceArrayMerge(SQL_IF_TABLE_EXISTS, new String[] { "#searchTable#" },
                 new String[] { vo.getItemsManageTable() });
-        logger.debug("JDBC::doCreateNewEntryInItemsTable sql={}", sql);
+        logger.debug("JDBC::doIfTableExists sql={}", sql);
         return Yank.queryScalar(sql, String.class, null) != null;
     }
 

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcPersistenceService.java
Patch:
@@ -183,7 +183,9 @@ public Iterable<HistoricItem> query(FilterCriteria filter) {
 
         String table = sqlTables.get(itemName);
         if (table == null) {
-            logger.warn("JDBC::query: unable to find table for query, no Data in Database for Item '{}'", itemName);
+            logger.warn(
+                    "JDBC::query: unable to find table for query, no Data in Database for Item '{}'. Current number of tables in the database: {}",
+                    itemName, sqlTables.size());
             // if enabled, table will be created immediately
             if (item != null) {
                 logger.warn("JDBC::query: try to generate the table for item '{}'", itemName);

File: bundles/binding/org.openhab.binding.denon/src/main/java/org/openhab/binding/denon/internal/DenonBinding.java
Patch:
@@ -238,7 +238,7 @@ private void updateInputProperties(String instance, String property) {
     }
 
     /**
-     * Only update the property if newState is different than it's current state.
+     * Only update the property if newState is different than its current state.
      */
     private void updateIfChanged(String instance, String property, State newState) {
         DenonBindingProvider firstProvider = getFirstMatchingProvider(instance, property);

File: bundles/binding/org.openhab.binding.denon/src/main/java/org/openhab/binding/denon/internal/DenonPropertyUpdatedCallback.java
Patch:
@@ -23,7 +23,7 @@ public interface DenonPropertyUpdatedCallback {
      * 
      * @param instance Name of the Denon receiver instance
      * @param property The property that was updated
-     * @param state It's current state
+     * @param state Its current state
      */
     public void updated(String instance, String property, State state);
 

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/connector/SerialConnector.java
Patch:
@@ -158,7 +158,7 @@ public void open() {
 	  */
 	 public synchronized void handleIncomingMessage(String incomingMessage) {
 		APIMessage Message = new APIMessage(incomingMessage);
-		logger.debug("handleIncomingMessage(): Message recieved: {} - {}",incomingMessage,Message.toString());
+		logger.debug("handleIncomingMessage(): Message received: {} - {}",incomingMessage,Message.toString());
 
 		DSCAlarmEvent event = new DSCAlarmEvent(this);
 		event.dscAlarmEventMessage(Message);

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/connector/TCPConnector.java
Patch:
@@ -144,7 +144,7 @@ public void open() {
 	  */
 	 public synchronized void handleIncomingMessage(String incomingMessage) {
 		APIMessage Message = new APIMessage(incomingMessage);
-		logger.debug("handleIncomingMessage(): Message recieved: {} - {}",incomingMessage,Message.toString());
+		logger.debug("handleIncomingMessage(): Message received: {} - {}",incomingMessage,Message.toString());
 
 		DSCAlarmEvent event = new DSCAlarmEvent(this);
 		event.dscAlarmEventMessage(Message);

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/messages/OBISMsgFactory.java
Patch:
@@ -94,7 +94,7 @@ public OBISMessage getMessage(String obisIdString, LinkedList<String> cosemStrin
 
                     return msg;
                 } catch (ParseException pe) {
-                    logger.debug("Failed to parse OBIS identifer " + obisId + ", values:" + cosemStringValues
+                    logger.debug("Failed to parse OBIS identifier " + obisId + ", values:" + cosemStringValues
                             + " for type" + msgType, pe);
                 }
             }

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/EBusBinding.java
Patch:
@@ -126,7 +126,7 @@ private void stopConnector() {
                 if (connector.isAlive()) {
                     logger.debug("Unable to stop eBUS connection thread!");
                 } else {
-                    logger.debug("Connector thread sucessufuly shutdown ...");
+                    logger.debug("Connector thread successfully shutdown ...");
                 }
 
             } catch (InterruptedException e) {

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/connection/AbstractEBusWriteConnector.java
Patch:
@@ -289,7 +289,7 @@ else if ((byte) (readByte & 0x0F) == (byte) (b & 0x0F)) {
                         byte crc = EBusUtils.crc8_tab(nn2, (byte) 0);
 
                         if (nn2 > 16) {
-                            logger.warn("slave data to long, invalid!");
+                            logger.warn("slave data too long, invalid!");
 
                             // resend telegram (max. once)
                             if (!resend(secondTry)) {

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/connection/EBusCommandProcessor.java
Patch:
@@ -177,7 +177,7 @@ private byte[] composeEBusTelegram(String commandId, Byte dst, Byte src, Map<Str
             }
 
             if (dst == null) {
-                logger.error("Unable to send command, destination adress is missing. Set \"dst\" in item.cfg ...");
+                logger.error("Unable to send command, destination address is missing. Set \"dst\" in item.cfg ...");
                 return null;
             }
 

File: bundles/binding/org.openhab.binding.ehealth/src/main/java/org/openhab/binding/ehealth/protocol/SerialConnector.java
Patch:
@@ -70,7 +70,7 @@ public void removeSerialEventProcessor(SerialEventProcessor processor) {
     }
 
     public void connect() throws EHealthException {
-        logger.debug("Goint to open Serial connection on port '{}'", portName);
+        logger.debug("Going to open Serial connection on port '{}'", portName);
 
         // parse ports and if the default port is found, initialized the reader
         Enumeration<?> portList = CommPortIdentifier.getPortIdentifiers();

File: bundles/binding/org.openhab.binding.ekey/src/main/java/org/openhab/binding/ekey/internal/EKeyBinding.java
Patch:
@@ -104,7 +104,7 @@ public void activate() {
 
     @Override
     public void deactivate() {
-        logger.debug("Stoppig eKey listener...");
+        logger.debug("Stopping eKey listener...");
         if (packetlistener != null) {
             packetlistener.stopListener();
         }

File: bundles/binding/org.openhab.binding.energenie/src/main/java/org/openhab/binding/energenie/internal/EnergenieBinding.java
Patch:
@@ -198,7 +198,7 @@ private void sendOn(String pmsId, int pmsSocketId) {
             logger.trace("send command ON to socket {} at host {}", pmsSocketId, pmsIp);
 
         } catch (Exception e) {
-            logger.error("failed so send command ON to socket {} at ip {}", pmsIp, pmsSocketId);
+            logger.error("failed to send command ON to socket {} at ip {}", pmsIp, pmsSocketId);
         }
 
     }
@@ -214,7 +214,7 @@ private void sendOff(String pmsId, int pmsSocketId) {
             logger.trace("sending 'POST' request to URL : {}", url);
             logger.trace("send command OFF to socket {} at host {}", pmsSocketId, pmsIp);
         } catch (Exception e) {
-            logger.error("failed so send command OFF to socket {} at ip {}", pmsIp, pmsSocketId);
+            logger.error("failed to send command OFF to socket {} at ip {}", pmsIp, pmsSocketId);
         }
     }
 

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/config/BindingConfigParser.java
Patch:
@@ -53,7 +53,7 @@ public void parse(String configLine, TYPE config) throws BindingConfigParseExcep
             try {
                 config.getClass().getDeclaredField(key).set(config, value);
             } catch (Exception e) {
-                logger.error("Could set value " + value + " to attribute " + key + " in class EnoceanBindingConfig");
+                logger.error("Could not set value " + value + " to attribute " + key + " in class EnoceanBindingConfig");
             }
         }
 

File: bundles/binding/org.openhab.binding.fht/src/main/java/org/openhab/binding/fht/internal/FHTBinding.java
Patch:
@@ -393,7 +393,7 @@ private void handleFHTMessage(String data) {
 
                 }
             } else {
-                logger.warn("Received unkown FHT command: ", command);
+                logger.warn("Received unknown FHT command: ", command);
             }
         } else if (data.length() == 11) {
             // is FHT8b frame
@@ -491,7 +491,7 @@ private void receivedNewValveOpening(String device, int actuatorNumber, double v
             DecimalType state = new DecimalType(valve);
             eventPublisher.postUpdate(config.getItem().getName(), state);
         } else {
-            logger.debug("Received valve opening of unkown actuator with address " + fullAddress);
+            logger.debug("Received valve opening of unknown actuator with address " + fullAddress);
         }
     }
 
@@ -503,7 +503,7 @@ private void receivedNewMeasuredTemperature(String deviceAddress, double tempera
             DecimalType state = new DecimalType(temperature);
             eventPublisher.postUpdate(config.getItem().getName(), state);
         } else {
-            logger.debug("Received new measured temp for unkown device with address " + deviceAddress);
+            logger.debug("Received new measured temp for unknown device with address " + deviceAddress);
         }
     }
 

File: bundles/binding/org.openhab.binding.freeswitch/src/main/java/org/openhab/binding/freeswitch/internal/FreeswitchBinding.java
Patch:
@@ -171,7 +171,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 
     @Override
     public void eventReceived(EslEvent event) {
-        logger.debug("Recieved ESLEvent {}", event.getEventName());
+        logger.debug("Received ESLEvent {}", event.getEventName());
         logger.trace(printEvent(event));
         if (CHANNEl_CREATE.matches(event.getEventName())) {
             handleNewCallEvent(event);

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcBaseDAO.java
Patch:
@@ -210,7 +210,7 @@ public String doGetDB() {
     public boolean doIfTableExists(ItemsVO vo) {
         String sql = StringUtilsExt.replaceArrayMerge(SQL_IF_TABLE_EXISTS, new String[] { "#searchTable#" },
                 new String[] { vo.getItemsManageTable() });
-        logger.debug("JDBC::doCreateNewEntryInItemsTable sql={}", sql);
+        logger.debug("JDBC::doIfTableExists sql={}", sql);
         return Yank.queryScalar(sql, String.class, null) != null;
     }
 

File: bundles/binding/org.openhab.binding.akm868/src/main/java/org/openhab/binding/akm868/internal/AKM868Binding.java
Patch:
@@ -64,7 +64,7 @@ public void deactivate() {
     }
 
     private void stopListener() {
-        logger.debug("Stoppig AKM868 listener...");
+        logger.debug("Stopping AKM868 listener...");
         if (packetlistener != null) {
             packetlistener.stopListener();
         }

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConnectorThread.java
Patch:
@@ -162,7 +162,7 @@ protected void sendIO(int ioNr, boolean newState) {
 
         // check whether IO is of direction output
         if (isInput == null || !isInput) {
-            logger.warn("Attempted to change IO" + ioNr + " to " + (newState ? "ON" : "OFF") + " but it's direction is "
+            logger.warn("Attempted to change IO" + ioNr + " to " + (newState ? "ON" : "OFF") + " but its direction is "
                     + (isInput == null ? "unknown" : "input"));
             return; // better not send anything if direction is not
                     // 'out'
@@ -280,7 +280,7 @@ public void run() {
         try {
             connector.disconnect();
         } catch (Exception e) {
-            logger.error("Error occured when disconnecting form Anel device: " + state.host, e);
+            logger.error("Error occured when disconnecting from Anel device: " + state.host, e);
         }
     }
 

File: bundles/binding/org.openhab.binding.autelis/src/main/java/org/openhab/binding/autelis/internal/AutelisBinding.java
Patch:
@@ -179,7 +179,7 @@ public class AutelisBinding extends AbstractActiveBinding<AutelisBindingProvider
     private long refreshInterval = 5000;
 
     public AutelisBinding() {
-        logger.debug("Autelius binding started");
+        logger.debug("Autelis binding started");
     }
 
     /**
@@ -235,7 +235,7 @@ private void configureBinding(final Map<String, Object> configuration) {
 
         baseURL = "http://" + prefix + host + ":" + port;
 
-        logger.debug("Autelius binding configured for host {}", host);
+        logger.debug("Autelis binding configured for host {}", host);
 
         setProperlyConfigured(true);
     }

File: bundles/binding/org.openhab.binding.caldav-personal/src/main/java/org/openhab/binding/caldav_personal/internal/CalDavBinding.java
Patch:
@@ -294,7 +294,7 @@ private synchronized void updateItem(String itemName, CalDavConfig config, List<
 
             logger.debug("sending command {} for item {}", command, itemName);
             eventPublisher.postUpdate(itemName, command);
-            logger.trace("command {} successfuly send", command);
+            logger.trace("command {} successfully sent", command);
         }
     }
 

File: bundles/binding/org.openhab.binding.akm868/src/main/java/org/openhab/binding/akm868/internal/AKM868Binding.java
Patch:
@@ -64,7 +64,7 @@ public void deactivate() {
     }
 
     private void stopListener() {
-        logger.debug("Stoppig AKM868 listener...");
+        logger.debug("Stopping AKM868 listener...");
         if (packetlistener != null) {
             packetlistener.stopListener();
         }

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConnectorThread.java
Patch:
@@ -162,7 +162,7 @@ protected void sendIO(int ioNr, boolean newState) {
 
         // check whether IO is of direction output
         if (isInput == null || !isInput) {
-            logger.warn("Attempted to change IO" + ioNr + " to " + (newState ? "ON" : "OFF") + " but it's direction is "
+            logger.warn("Attempted to change IO" + ioNr + " to " + (newState ? "ON" : "OFF") + " but its direction is "
                     + (isInput == null ? "unknown" : "input"));
             return; // better not send anything if direction is not
                     // 'out'
@@ -280,7 +280,7 @@ public void run() {
         try {
             connector.disconnect();
         } catch (Exception e) {
-            logger.error("Error occured when disconnecting form Anel device: " + state.host, e);
+            logger.error("Error occured when disconnecting from Anel device: " + state.host, e);
         }
     }
 

File: bundles/binding/org.openhab.binding.autelis/src/main/java/org/openhab/binding/autelis/internal/AutelisBinding.java
Patch:
@@ -179,7 +179,7 @@ public class AutelisBinding extends AbstractActiveBinding<AutelisBindingProvider
     private long refreshInterval = 5000;
 
     public AutelisBinding() {
-        logger.debug("Autelius binding started");
+        logger.debug("Autelis binding started");
     }
 
     /**
@@ -235,7 +235,7 @@ private void configureBinding(final Map<String, Object> configuration) {
 
         baseURL = "http://" + prefix + host + ":" + port;
 
-        logger.debug("Autelius binding configured for host {}", host);
+        logger.debug("Autelis binding configured for host {}", host);
 
         setProperlyConfigured(true);
     }

File: bundles/binding/org.openhab.binding.caldav-personal/src/main/java/org/openhab/binding/caldav_personal/internal/CalDavBinding.java
Patch:
@@ -294,7 +294,7 @@ private synchronized void updateItem(String itemName, CalDavConfig config, List<
 
             logger.debug("sending command {} for item {}", command, itemName);
             eventPublisher.postUpdate(itemName, command);
-            logger.trace("command {} successfuly send", command);
+            logger.trace("command {} successfully sent", command);
         }
     }
 

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java
Patch:
@@ -224,7 +224,7 @@ public String getTr064Value(String request) {
         // check if special "soap value parser" handler for extracting SOAP value is defined. If yes, use svp
         if (itemMap.getSoapValueParser() == null) { // extract dataOutName1 as default, no handler used
             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());
-            if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {
+            if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {
                 // extract value from soap response
                 value = nlDataOutNodes.item(0).getTextContent();
             } else {
@@ -734,7 +734,7 @@ public String parseValueFromSoapMessage(SOAPMessage sm, ItemMap mapping, String
                         }
                     } else {
                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL
-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {
+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {
                             // extract URL from soap response
                             String url = nlDataOutNodes.item(0).getTextContent();
                             Document xmlTamInfo = getFboxXmlResponse(url);
@@ -799,7 +799,7 @@ public String parseValueFromSoapMessage(SOAPMessage sm, ItemMap mapping, String
                         }
                     } else {
                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL
-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {
+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {
                             // extract URL from soap response
                             String url = nlDataOutNodes.item(0).getTextContent();
                             // only get missed calls of the last x days

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/Tr064Comm.java
Patch:
@@ -224,7 +224,7 @@ public String getTr064Value(String request) {
         // check if special "soap value parser" handler for extracting SOAP value is defined. If yes, use svp
         if (itemMap.getSoapValueParser() == null) { // extract dataOutName1 as default, no handler used
             NodeList nlDataOutNodes = response.getSOAPPart().getElementsByTagName(itemMap.getReadDataOutName());
-            if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {
+            if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {
                 // extract value from soap response
                 value = nlDataOutNodes.item(0).getTextContent();
             } else {
@@ -734,7 +734,7 @@ public String parseValueFromSoapMessage(SOAPMessage sm, ItemMap mapping, String
                         }
                     } else {
                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL
-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {
+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {
                             // extract URL from soap response
                             String url = nlDataOutNodes.item(0).getTextContent();
                             Document xmlTamInfo = getFboxXmlResponse(url);
@@ -799,7 +799,7 @@ public String parseValueFromSoapMessage(SOAPMessage sm, ItemMap mapping, String
                         }
                     } else {
                         NodeList nlDataOutNodes = sm.getSOAPPart().getElementsByTagName(mapping.getReadDataOutName()); // URL
-                        if (nlDataOutNodes != null & nlDataOutNodes.getLength() > 0) {
+                        if (nlDataOutNodes != null && nlDataOutNodes.getLength() > 0) {
                             // extract URL from soap response
                             String url = nlDataOutNodes.item(0).getTextContent();
                             // only get missed calls of the last x days

File: bundles/binding/org.openhab.binding.tacmi/src/main/java/org/openhab/binding/tacmi/internal/message/AnalogValue.java
Patch:
@@ -33,7 +33,7 @@ public AnalogValue(int rawValue, int type) {
         switch (type) {
             case 1:
                 measureType = TACmiMeasureType.TEMPERATURE;
-                value = new BigDecimal(rawValue / 10.0);
+                value = new BigDecimal(rawValue).movePointLeft(1);
                 break;
             case 4:
                 measureType = TACmiMeasureType.SECONDS;

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/config/KNXGenericBindingProvider.java
Patch:
@@ -415,16 +415,16 @@ protected KNXBindingConfig parseBindingConfigString(Item item, String bindingCon
                                         }
                                     } catch (NumberFormatException nfe) {
                                         throw new BindingConfigParseException(
-                                                "Autorefresh time must be a number, bust was '"
+                                                "Autorefresh time must be a number, but was '"
                                                         + dataPoint.substring(1, endIndex) + "'.");
                                     }
                                 } else {
                                     throw new BindingConfigParseException(
-                                            "Autorefresh time paramter: missing time. Empty brackets are not allowed.");
+                                            "Autorefresh time parameter: missing time. Empty brackets are not allowed.");
                                 }
                             } else {
                                 throw new BindingConfigParseException(
-                                        "Closing ')' missing on autorefresh time paramter.");
+                                        "Closing ')' missing on autorefresh time parameter.");
                             }
                         }
                     }

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/config/KNXGenericBindingProvider.java
Patch:
@@ -415,16 +415,16 @@ protected KNXBindingConfig parseBindingConfigString(Item item, String bindingCon
                                         }
                                     } catch (NumberFormatException nfe) {
                                         throw new BindingConfigParseException(
-                                                "Autorefresh time must be a number, bust was '"
+                                                "Autorefresh time must be a number, but was '"
                                                         + dataPoint.substring(1, endIndex) + "'.");
                                     }
                                 } else {
                                     throw new BindingConfigParseException(
-                                            "Autorefresh time paramter: missing time. Empty brackets are not allowed.");
+                                            "Autorefresh time parameter: missing time. Empty brackets are not allowed.");
                                 }
                             } else {
                                 throw new BindingConfigParseException(
-                                        "Closing ')' missing on autorefresh time paramter.");
+                                        "Closing ')' missing on autorefresh time parameter.");
                             }
                         }
                     }

File: bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java
Patch:
@@ -193,7 +193,7 @@ public void execute() {
             handleEventType(new StringType(formatHours(heatpumpValues[63])), HeatpumpCommandType.TYPE_HOURS_HETPUMP);
             handleEventType(new StringType(formatHours(heatpumpValues[64])), HeatpumpCommandType.TYPE_HOURS_HEATING);
             handleEventType(new StringType(formatHours(heatpumpValues[65])), HeatpumpCommandType.TYPE_HOURS_WARMWATER);
-            handleEventType(new StringType(formatHours(heatpumpValues[65])), HeatpumpCommandType.TYPE_HOURS_COOLING);
+            handleEventType(new StringType(formatHours(heatpumpValues[66])), HeatpumpCommandType.TYPE_HOURS_COOLING);
             handleEventType(new DecimalType((double) heatpumpValues[151] / 10),
                     HeatpumpCommandType.TYPE_THERMALENERGY_HEATING);
             handleEventType(new DecimalType((double) heatpumpValues[152] / 10),

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/ZWaveBindingProvider.java
Patch:
@@ -14,15 +14,15 @@
 /**
  * Binding provider interface. Defines the methods
  * to interact with the binding provider.
- * 
+ *
  * @author Victor Belov
  * @since 1.3.0
  */
 public interface ZWaveBindingProvider extends AutoUpdateBindingProvider {
     /**
      * Returns the binding configuration for the item with
      * this name.
-     * 
+     *
      * @param itemName the name to get the binding configuration for.
      * @return the binding configuration.
      */
@@ -31,7 +31,7 @@ public interface ZWaveBindingProvider extends AutoUpdateBindingProvider {
     /**
      * Returns the {@link Item} with the specified item name. Returns null
      * if the item was not found.
-     * 
+     *
      * @param itemName the name of the item.
      * @return the item.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveGenericBindingProvider.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * This class is responsible for parsing the binding configuration.
- * 
+ *
  * @author Victor Belov
  * @author Brian Crosby
  * @author Chris Jackson
@@ -125,7 +125,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 
     /**
      * Returns the binding configuration for a string.
-     * 
+     *
      * @return the binding configuration.
      */
     @Override

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbAssociationGroup.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * This implements the configuration group for the XML product database.
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbCommandClass.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * Implements a commandclass for the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbConfigurationListItem.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Implements the configuration list of the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbConfigurationParameter.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Implements the configuration parameters for the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbLabel.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Implements a label class for the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbManufacturer.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * Implements the manufacturer class for the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbProduct.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * Implements the product class for the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbProductFile.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * Implements the top level class for the product file
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbProductReference.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Implements the reference class for the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveAlarmConverter.java
Patch:
@@ -34,7 +34,7 @@
  * ZWaveAlarmConverter class. Converter for communication with the
  * {@link ZWaveAlarmCommandClass}. Implements polling of the alarm
  * status and receiving of alarm events.
- * 
+ *
  * @author Chris Jackson
  * @since 1.6.0
  */
@@ -45,7 +45,7 @@ public class ZWaveAlarmConverter extends ZWaveCommandClassConverter<ZWaveAlarmCo
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveAlarmConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveAlarmSensorConverter.java
Patch:
@@ -34,7 +34,7 @@
  * ZWaveAlarmSensorConverter class. Converter for communication with the
  * {@link ZWaveAlarmSensorCommandClass}. Implements polling of the alarm sensor
  * status and receiving of alarm sensor events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -45,7 +45,7 @@ public class ZWaveAlarmSensorConverter extends ZWaveCommandClassConverter<ZWaveA
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveAlarmSensorConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveBasicConverter.java
Patch:
@@ -38,7 +38,7 @@
  * through the BASIC command class. Note that some devices report their
  * status as BASIC Report messages as well. We try to handle these devices
  * as best as possible.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -49,7 +49,7 @@ public class ZWaveBasicConverter extends ZWaveCommandClassConverter<ZWaveBasicCo
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveBasicConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveBatteryConverter.java
Patch:
@@ -30,7 +30,7 @@
  * ZWaveBatteryConverter class. Converter for communication with the
  * {@link ZWaveBatteryCommandClass}. Implements polling of the battery
  * status and receiving of battery events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -41,7 +41,7 @@ public class ZWaveBatteryConverter extends ZWaveCommandClassConverter<ZWaveBatte
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveBatteryConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveBinarySensorConverter.java
Patch:
@@ -34,7 +34,7 @@
  * ZWaveBinarySensorConverter class. Converter for communication with the
  * {@link ZWaveBinarySensorConverter}. Implements polling of the binary sensor
  * status and receiving of binary sensor events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @author Chris Jackson
  * @since 1.4.0
@@ -46,7 +46,7 @@ public class ZWaveBinarySensorConverter extends ZWaveCommandClassConverter<ZWave
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveBinarySensorConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveBinarySwitchConverter.java
Patch:
@@ -35,7 +35,7 @@
  * ZWaveBinarySwitchConverter class. Converter for communication with the
  * {@link ZWaveBatteryCommandClass}. Implements polling of the battery
  * status and receiving of battery events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -46,7 +46,7 @@ public class ZWaveBinarySwitchConverter extends ZWaveCommandClassConverter<ZWave
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveBinarySwitchConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConfigurationConverter.java
Patch:
@@ -37,7 +37,7 @@
 /***
  * ZWaveConfigurationConverter class. Converter for communication with the
  * {@link ZWaveConfigurationCommandClass}.
- * 
+ *
  * @author Chris Jackson
  * @since 1.7.0
  */
@@ -48,7 +48,7 @@ public class ZWaveConfigurationConverter extends ZWaveCommandClassConverter<ZWav
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveConfigurationConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMeterConverter.java
Patch:
@@ -35,7 +35,7 @@
  * ZWaveMultiLevelSensorConverter class. Converter for communication with the
  * {@link ZWaveMultiLevelSensorCommandClass}. Implements polling of the sensor
  * status and receiving of sensor events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -46,7 +46,7 @@ public class ZWaveMeterConverter extends ZWaveCommandClassConverter<ZWaveMeterCo
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveMeterConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMultiLevelSensorConverter.java
Patch:
@@ -35,7 +35,7 @@
  * ZWaveMultiLevelSensorConverter class. Converter for communication with the
  * {@link ZWaveMultiLevelSensorCommandClass}. Implements polling of the sensor
  * status and receiving of sensor events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @author Chris Jackson
  * @since 1.4.0
@@ -50,7 +50,7 @@ public class ZWaveMultiLevelSensorConverter extends ZWaveCommandClassConverter<Z
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveMultiLevelSensorConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMultiLevelSwitchConverter.java
Patch:
@@ -44,7 +44,7 @@
  * ZWaveBinarySwitchConverter class. Converter for communication with the
  * {@link ZWaveBatteryCommandClass}. Implements polling of the battery
  * status and receiving of battery events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -65,7 +65,7 @@ public class ZWaveMultiLevelSwitchConverter extends ZWaveCommandClassConverter<Z
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveMultiLevelSwitchConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveSceneConverter.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * ZWaveSceneConverter class. Converters between binding items
  * and the Z-Wave API for scene controllers.
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  */
@@ -40,7 +40,7 @@ public class ZWaveSceneConverter extends ZWaveCommandClassConverter<ZWaveSceneAc
     /**
      * Constructor. Creates a new instance of the {@link ZWaveConverterBase}
      * class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use to send messages.
      * @param eventPublisher the {@link EventPublisher} that can be used to send updates.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveSwitchAllConverter.java
Patch:
@@ -33,7 +33,7 @@
 /***
  * ZWaveSwitchAllConverter class. Converter for communication with the
  * {@link ZWaveSwitchAllCommandClass}. Implements All On/All Off.
- * 
+ *
  * @author Pedro Paixao
  * @since 1.8.0
  */
@@ -42,7 +42,7 @@ public class ZWaveSwitchAllConverter extends ZWaveCommandClassConverter<ZWaveSwi
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveSwitchAllConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatFanModeConverter.java
Patch:
@@ -30,7 +30,7 @@
  * ZWaveThermostatFanModeConverter class. Converter for communication with the
  * {@link ZWaveThermostatFanModeCommandClass}. Implements polling of the fan
  * mode state and receiving of fan mode events.
- * 
+ *
  * @author Dan Cunningham
  * @since 1.6.0
  */
@@ -41,7 +41,7 @@ public class ZWaveThermostatFanModeConverter extends ZWaveCommandClassConverter<
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveThermostatFanModeConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatFanStateConverter.java
Patch:
@@ -28,7 +28,7 @@
  * ZWaveThermostatFanStateConverter class. Converter for communication with the
  * {@link ZWaveThermostatFanStateCommandClass}. Implements polling of the fan
  * state and receiving of fan state events.
- * 
+ *
  * @author Dan Cunningham
  * @since 1.6.0
  */
@@ -39,7 +39,7 @@ public class ZWaveThermostatFanStateConverter extends ZWaveCommandClassConverter
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveThermostatFanStateConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatModeConverter.java
Patch:
@@ -30,7 +30,7 @@
  * ZWaveThermostatModeConverter class. Converter for communication with the
  * {@link ZWaveThermostatModeCommandClass}. Implements polling of the mode
  * state and receiving of mode state events.
- * 
+ *
  * @author Dan Cunningham
  * @since 1.6.0
  */
@@ -41,7 +41,7 @@ public class ZWaveThermostatModeConverter extends ZWaveCommandClassConverter<ZWa
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveThermostatModeConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatOperatingStateConverter.java
Patch:
@@ -28,7 +28,7 @@
  * ZWaveThermostatOperatingStateConverter class. Converter for communication with the
  * {@link ZWaveThermostatOperatingStateCommandClass}. Implements polling of the operating
  * state and receiving of operating state events.
- * 
+ *
  * @author Dan Cunningham
  * @since 1.6.0
  */
@@ -40,7 +40,7 @@ public class ZWaveThermostatOperatingStateConverter
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveThermostatOperatingStateConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatSetpointConverter.java
Patch:
@@ -33,7 +33,7 @@
  * ZWaveThermostatSetpointConverter class. Converter for communication with the
  * {@link ZWaveThermostatSetpointCommandClass}. Implements polling of the setpoint
  * status and receiving of setpoint events.
- * 
+ *
  * @author Matthew Bowman
  * @author Dave Hock
  * @author Chris Jackson
@@ -46,7 +46,7 @@ public class ZWaveThermostatSetpointConverter extends ZWaveCommandClassConverter
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveThermostatSetpointConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/BigDecimalCommandConverter.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * Converts from {@link DecimalType} command to a Z-Wave value.
- * 
+ *
  * @author Matthew Bowman
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/BinaryOnOffCommandConverter.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Converts from {@link OnOffType} command to a Z-Wave value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/BinaryPercentCommandConverter.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Converts from {@link PercentType} command to a Z-Wave value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/IntegerCommandConverter.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Converts from {@link DecimalType} command to a Z-Wave value.
- * 
+ *
  * @author Chris Jackson
  * @since 1.7.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/MultiLevelIncreaseDecreaseCommandConverter.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Converts from {@link IncreaseDecreaseType} command to a Z-Wave value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/MultiLevelOnOffCommandConverter.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Converts from {@link OnOffType} command to a Z-Wave value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/MultiLevelPercentCommandConverter.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Converts from {@link PercentType} command to a Z-Wave value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/MultiLevelUpDownCommandConverter.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Converts from {@link UpDownType} command to a Z-Wave value.
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/RestoreValueMultiLevelOnOffCommandConverter.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * Converts from {@link OnOffType} command to a Z-Wave value.
  * Restores the dimmer to the last value it had.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BatteryDecimalTypeConverter.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * Converts from a {@link Integer} to a {@link DecimalType}
  * Only processes for the BATTERY command class.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BatteryPercentTypeConverter.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * Converts from a {@link Integer} to a {@link PercentType}
  * Only processes for the BATTERY command class.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BigDecimalDecimalTypeConverter.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Converts from an {@link BigDecimal} to a {@link DecimalType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BigDecimalOnOffTypeConverter.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Converts from big decimal Z-Wave value to a {@link OnOffType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BigDecimalOpenClosedTypeConverter.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Converts from a Z-Wave big decimal value to a {@link OpenClosedType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BinaryDecimalTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a binary Z-Wave value to a {@link DecimalType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BinaryPercentTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a binary Z-Wave value to a {@link PercentType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BooleanOnOffTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from Z-Wave boolean value to a {@link OnOffType}
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BooleanOpenClosedTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a Z-Wave boolean value to a {@link OpenClosedType}
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/DateDateTimeTypeConverter.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * Converts from a {@link Date} to a {@link DateTimeType}
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/IntegerDecimalTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from an {@link Integer} to a {@link DecimalType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/IntegerOnOffTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from integer Z-Wave value to a {@link OnOffType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/IntegerOpenClosedTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a Z-Wave integer value to a {@link OpenClosedType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/IntegerPercentTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a {@link Integer} to a {@link PercentType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/IntegerUpDownTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a {@link Integer} to a {@link UpDownType}
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/StateComparator.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * State Comparator class. Compares two States to determine which one is more
  * specific.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/StringStringTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a {@link String} to a {@link StringType}
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveEventListener.java
Patch:
@@ -13,15 +13,15 @@
 /**
  * ZWave Event Listener interface. Classes that implement this interface
  * need to be able to handle incoming ZWaveEvent events.
- * 
+ *
  * @author Brian Crosby
  * @since 1.3.0
  */
 public interface ZWaveEventListener {
 
     /**
      * Event handler method for incoming Z-Wave events.
-     * 
+     *
      * @param event the incoming Z-Wave event.
      */
     void ZWaveIncomingEvent(ZWaveEvent event);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNodeState.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * Represents the state that the node is in.
- * 
+ *
  * @author Chris Jackson
  * @since 1.7.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveApplicationStatusClass.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * Handles the Application Status command class.
- * 
+ *
  * @author Dan Cunningham
  * @since 1.6.0
  */
@@ -49,7 +49,7 @@ public class ZWaveApplicationStatusClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZWaveApplicationStatusClass class.
-     * 
+     *
      * @param node the node this command class belongs to
      * @param controller the controller to use
      * @param endpoint the endpoint this Command class belongs to

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBasicCommands.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Interface to implement for all command classes that implement the basic
  * commands like GET/SET value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.3.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCRC16EncapsulationCommandClass.java
Patch:
@@ -35,7 +35,7 @@ public class ZWaveCRC16EncapsulationCommandClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZWaveMultiCommandCommandClass class.
-     * 
+     *
      * @param node
      *            the node this command class belongs to
      * @param controller
@@ -72,7 +72,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
     /**
      * Handle the crc16 encapsulated message. This processes the received frame,
      * checks the crc and forwards to the real command class.
-     * 
+     *
      * @param serialMessage
      *            The received message
      * @param offset

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClassDynamicState.java
Patch:
@@ -16,7 +16,7 @@
  * Interface that command classes can implement to implement retrieval of
  * dynamic state information..
  * For instance to support getting dynamic values from a node.
- * 
+ *
  * @author Jan-Willem Spuij
  * @author Chris Jackson
  * @since 1.3.0
@@ -27,7 +27,7 @@ public interface ZWaveCommandClassDynamicState {
      * state information. These queries need to be completed to be able to proceed to the next
      * node phase. The queries are returned so that the node can handle processing
      * to proceed to the next node phase.
-     * 
+     *
      * @param refresh if true will request all dynamic states even if they are already initialised
      * @return the messages with the queries for dynamic values.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClassInitialization.java
Patch:
@@ -16,7 +16,7 @@
  * Interface that command classes can implement to implement initialization.
  * For instance to support getting static values from a node, or handle dependencies
  * on other command classes.
- * 
+ *
  * @author Jan-Willem Spuij
  * @author Chris Jackson
  * @since 1.3.0
@@ -27,7 +27,7 @@ public interface ZWaveCommandClassInitialization {
      * to be performed. These queries need to be completed to be able to proceed to the next
      * node phase. The queries are returned so that the node can handle processing and counting
      * to proceed to the next node phase.
-     * 
+     *
      * @param refresh if true will request all initialised even if the class is already initialised
      * @return the messages with the queries for initialization.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveGetCommands.java
Patch:
@@ -12,14 +12,14 @@
 
 /**
  * Interface to implement for all command classes that implement the Get command.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.3.0
  */
 public interface ZWaveGetCommands {
     /**
      * Gets a SerialMessage with the GET command
-     * 
+     *
      * @return the serial message
      */
     public SerialMessage getValueMessage();

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveHailCommandClass.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Handles the Hail command class. Some devices handle state changes by
  * 'hailing' the controller and asking it to request the device values
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */
@@ -36,7 +36,7 @@ public class ZWaveHailCommandClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZWaveHailCommandClass class.
-     * 
+     *
      * @param node the node this command class belongs to
      * @param controller the controller to use
      * @param endpoint the endpoint this Command class belongs to

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveManufacturerSpecificCommandClass.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Handles the manufacturer specific command class. Class to request and report
  * manufacturer specific information.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.3.0
  */
@@ -39,7 +39,7 @@ public class ZWaveManufacturerSpecificCommandClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZwaveManufacturerSpecificCommandClass class.
-     * 
+     *
      * @param node the node this command class belongs to
      * @param controller the controller to use
      * @param endpoint the endpoint this Command class belongs to
@@ -98,7 +98,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
 
     /**
      * Gets a SerialMessage with the ManufacturerSpecific GET command
-     * 
+     *
      * @return the serial message
      */
     public SerialMessage getManufacturerSpecificMessage() {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Handles the Multi Command command class.
- * 
+ *
  * @author Chris Jackson
  * @since 1.6.0
  */
@@ -34,7 +34,7 @@ public class ZWaveMultiCommandCommandClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZWaveMultiCommandCommandClass class.
-     * 
+     *
      * @param node the node this command class belongs to
      * @param controller the controller to use
      * @param endpoint the endpoint this Command class belongs to
@@ -68,7 +68,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
     /**
      * Handle the multi command message. This processes the received frame, processing each
      * command class in turn.
-     * 
+     *
      * @param serialMessage The received message
      * @param offset The starting offset into the payload
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveNoOperationCommandClass.java
Patch:
@@ -26,7 +26,7 @@
  * to check if a node is reachable by sending a serial message without a command
  * to the specified node. This can for instance be used to check that a node is
  * non-responding.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.3.0
  */
@@ -38,7 +38,7 @@ public class ZWaveNoOperationCommandClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZWaveNoOperationCommandClass class.
-     * 
+     *
      * @param node the node this command class belongs to
      * @param controller the controller to use
      * @param endpoint the endpoint this Command class belongs to
@@ -65,7 +65,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
 
     /**
      * Gets a SerialMessage with the No Operation command
-     * 
+     *
      * @return the serial message
      */
     public SerialMessage getNoOperationMessage() {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveSceneActivationCommandClass.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Handles scene activation messages
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  */
@@ -36,7 +36,7 @@ public class ZWaveSceneActivationCommandClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZWaveSceneActivationCommandClass class.
-     * 
+     *
      * @param node the node this command class belongs to
      * @param controller the controller to use
      * @param endpoint the endpoint this Command class belongs to
@@ -74,7 +74,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
 
     /**
      * Processes a SCENEACTIVATION_SET message.
-     * 
+     *
      * @param serialMessage the incoming message to process.
      * @param offset the offset position from which to start message processing.
      * @param endpoint the endpoint or instance number this message is meant for.

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveSetCommands.java
Patch:
@@ -13,14 +13,14 @@
 /**
  * Interface to implement for all command classes that implement the SET
  * commands like SET value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.3.0
  */
 public interface ZWaveSetCommands {
     /**
      * Gets a SerialMessage with the SET command
-     * 
+     *
      * @param value the value to set.
      * @return the serial message
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveInclusionEvent.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * This event signals a node being included or excluded into the network.
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */
@@ -20,7 +20,7 @@ public class ZWaveInclusionEvent extends ZWaveEvent {
     /**
      * Constructor. Creates a new instance of the ZWaveInclusionEvent
      * class.
-     * 
+     *
      * @param nodeId the nodeId of the event.
      */
     public ZWaveInclusionEvent(Type type, int nodeId) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveIndicatorCommandClassChangeEvent.java
Patch:
@@ -16,7 +16,7 @@
  * ZWave Command Class event. This event is fired when a command class
  * receives a value from the node. The event can be subclasses to add
  * additional information to the event.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -25,7 +25,7 @@ public class ZWaveIndicatorCommandClassChangeEvent extends ZWaveCommandClassValu
 
     /**
      * Constructor. Creates a new instance of the ZWaveCommandClassValueEvent class.
-     * 
+     *
      * @param nodeId the nodeId of the event
      * @param endpoint the endpoint of the event.
      * @param commandClass the command class that fired the ZWaveCommandClassValueEvent;
@@ -40,7 +40,7 @@ public ZWaveIndicatorCommandClassChangeEvent(int nodeId, int endpoint, CommandCl
 
     /**
      * Gets the value for the event.
-     * 
+     *
      * @return the value.
      */
     public int getOldValue() {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveInitializationCompletedEvent.java
Patch:
@@ -13,7 +13,7 @@
  * Indicates that the ZWaveController has completed
  * the initialization phase and is ready to start
  * accepting commands and receiving events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -22,7 +22,7 @@ public class ZWaveInitializationCompletedEvent extends ZWaveEvent {
     /**
      * Constructor. Creates a new instance of the ZWaveTransactionCompletedEvent
      * class.
-     * 
+     *
      * @param nodeId the nodeId of the event. Must be set to the controller node.
      */
     public ZWaveInitializationCompletedEvent(int nodeId) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNetworkEvent.java
Patch:
@@ -12,7 +12,7 @@
  * Network event signals that a network function has completed.
  * This is used to notify higher layers of network functions so they
  * can be handled by (for example) a network heal process.
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  */
@@ -23,7 +23,7 @@ public class ZWaveNetworkEvent extends ZWaveEvent {
     /**
      * Constructor. Creates a new instance of the ZWaveNetworkEvent
      * class.
-     * 
+     *
      * @param nodeId the nodeId of the event.
      */
     public ZWaveNetworkEvent(Type type, int nodeId, State state) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNodeInfoEvent.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * This event signals a node information frame.
- * 
+ *
  * @author Chris Jackson
  * @since 1.8.0
  */
@@ -19,7 +19,7 @@ public class ZWaveNodeInfoEvent extends ZWaveEvent {
     /**
      * Constructor. Creates a new instance of the ZWaveInclusionEvent
      * class.
-     * 
+     *
      * @param nodeId the nodeId of the event.
      */
     public ZWaveNodeInfoEvent(int nodeId) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNodeStatusEvent.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Node status event is used to signal if a node is alive or dead
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */
@@ -22,7 +22,7 @@ public class ZWaveNodeStatusEvent extends ZWaveEvent {
     /**
      * Constructor. Creates a new instance of the ZWaveNetworkEvent
      * class.
-     * 
+     *
      * @param nodeId the nodeId of the event.
      */
     public ZWaveNodeStatusEvent(int nodeId, ZWaveNodeState state) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeSerializer.java
Patch:
@@ -87,7 +87,7 @@ public ZWaveNodeSerializer() {
 
     /**
      * Serializes an XML tree of a {@link ZWaveNode}
-     * 
+     *
      * @param node
      *            the node to serialize
      */
@@ -125,7 +125,7 @@ public void SerializeNode(ZWaveNode node) {
 
     /**
      * Deserializes an XML tree of a {@link ZWaveNode}
-     * 
+     *
      * @param nodeId
      *            the number of the node to deserialize
      * @return returns the Node or null in case Serialization failed.
@@ -161,7 +161,7 @@ public ZWaveNode DeserializeNode(int nodeId) {
 
     /**
      * Deletes the persistence store for the specified node.
-     * 
+     *
      * @param nodeId The node ID to remove
      * @return true if the file was deleted
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ApplicationCommandMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignSucReturnRouteMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ControllerSetDefaultMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.7.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/EnableSucMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * This class processes a serial message to enable or disable the controller
  * SUC/SIS functionality
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/GetControllerCapabilitiesMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/GetRoutingInfoMessageClass.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/GetSucNodeIdMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message to get the SUC node ID
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/GetVersionMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/IdentifyNodeMessageClass.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/IsFailedNodeMessageClass.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * This class processes a serial message from the zwave controller.
  * It queries the controller to see if the node is on its 'failed nodes' list.
- * 
+ *
  * @author Wez Hunter
  * @since 1.6.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/MemoryGetIdMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RemoveFailedNodeMessageClass.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RemoveNodeMessageClass.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RequestNodeInfoMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RequestNodeNeighborUpdateMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SendDataMessageClass.java
Patch:
@@ -163,7 +163,7 @@ public boolean handleFailedSendDataRequest(ZWaveController zController, SerialMe
     /**
      * Transmission state enumeration. Indicates the
      * transmission state of the message to the node.
-     * 
+     *
      * @author Jan-Willem Spuij
      * @ since 1.3.0
      */
@@ -198,7 +198,7 @@ private static void initMapping() {
         /**
          * Lookup function based on the transmission state code.
          * Returns null when there is no transmission state with code i.
-         * 
+         *
          * @param i the code to lookup
          * @return enumeration value of the transmission state.
          */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SerialApiGetCapabilitiesMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SerialApiGetInitDataMessageClass.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SerialApiSetTimeoutsMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.7.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SerialApiSoftResetMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SetSucNodeMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java
Patch:
@@ -193,7 +193,7 @@ public void execute() {
             handleEventType(new StringType(formatHours(heatpumpValues[63])), HeatpumpCommandType.TYPE_HOURS_HETPUMP);
             handleEventType(new StringType(formatHours(heatpumpValues[64])), HeatpumpCommandType.TYPE_HOURS_HEATING);
             handleEventType(new StringType(formatHours(heatpumpValues[65])), HeatpumpCommandType.TYPE_HOURS_WARMWATER);
-            handleEventType(new StringType(formatHours(heatpumpValues[65])), HeatpumpCommandType.TYPE_HOURS_COOLING);
+            handleEventType(new StringType(formatHours(heatpumpValues[66])), HeatpumpCommandType.TYPE_HOURS_COOLING);
             handleEventType(new DecimalType((double) heatpumpValues[151] / 10),
                     HeatpumpCommandType.TYPE_THERMALENERGY_HEATING);
             handleEventType(new DecimalType((double) heatpumpValues[152] / 10),

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/connection/AbstractEBusConnector.java
Patch:
@@ -136,10 +136,10 @@ protected void reconnect() throws IOException, InterruptedException {
     public void run() {
 
         // create new thread pool to send received telegrams
-        threadPool = Executors.newCachedThreadPool();
+        threadPool = Executors.newCachedThreadPool(new WorkerThreadFactory("ebus-send-receive"));
 
         int read = -1;
-
+        
         // loop until interrupt or reconnector count is -1 (to many retries)
         while (!isInterrupted() || reConnectCounter == -1) {
             try {

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/connection/EBusCommandProcessor.java
Patch:
@@ -127,8 +127,8 @@ public void run() {
                 futureMap.remove(itemName).cancel(true);
             }
 
-            if (scheduler == null) {
-                scheduler = Executors.newScheduledThreadPool(2);
+            if(scheduler == null) {
+                scheduler = Executors.newScheduledThreadPool(2, new WorkerThreadFactory("ebus-scheduler"));
             }
 
             logger.debug("Add polling item {} with refresh rate {} to scheduler ...", itemName, refreshRate);

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/connection/AbstractEBusConnector.java
Patch:
@@ -136,10 +136,10 @@ protected void reconnect() throws IOException, InterruptedException {
     public void run() {
 
         // create new thread pool to send received telegrams
-        threadPool = Executors.newCachedThreadPool();
+        threadPool = Executors.newCachedThreadPool(new WorkerThreadFactory("ebus-send-receive"));
 
         int read = -1;
-
+        
         // loop until interrupt or reconnector count is -1 (to many retries)
         while (!isInterrupted() || reConnectCounter == -1) {
             try {

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/connection/EBusCommandProcessor.java
Patch:
@@ -127,8 +127,8 @@ public void run() {
                 futureMap.remove(itemName).cancel(true);
             }
 
-            if (scheduler == null) {
-                scheduler = Executors.newScheduledThreadPool(2);
+            if(scheduler == null) {
+                scheduler = Executors.newScheduledThreadPool(2, new WorkerThreadFactory("ebus-scheduler"));
             }
 
             logger.debug("Add polling item {} with refresh rate {} to scheduler ...", itemName, refreshRate);

File: bundles/binding/org.openhab.binding.caldav-command/src/main/java/org/openhab/binding/caldav_command/internal/CalDavBinding.java
Patch:
@@ -95,7 +95,7 @@ public void setCalDavLoader(CalDavLoader calDavLoader) {
         this.calDavLoader.addListener(this);
     }
 
-    public void unsetCalDavLoader() {
+    public void unsetCalDavLoader(CalDavLoader calDavLoader) {
         this.calDavLoader.removeListener(this);
         this.calDavLoader = null;
     }

File: bundles/binding/org.openhab.binding.caldav-personal/src/main/java/org/openhab/binding/caldav_personal/internal/CalDavBinding.java
Patch:
@@ -64,7 +64,7 @@ public void setCalDavLoader(CalDavLoader calDavLoader) {
         this.calDavLoader.addListener(this);
     }
 
-    public void unsetCalDavLoader() {
+    public void unsetCalDavLoader(CalDavLoader calDavLoader) {
         this.calDavLoader.removeListener(this);
         this.calDavLoader = null;
     }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/ZWaveBindingProvider.java
Patch:
@@ -14,15 +14,15 @@
 /**
  * Binding provider interface. Defines the methods
  * to interact with the binding provider.
- * 
+ *
  * @author Victor Belov
  * @since 1.3.0
  */
 public interface ZWaveBindingProvider extends AutoUpdateBindingProvider {
     /**
      * Returns the binding configuration for the item with
      * this name.
-     * 
+     *
      * @param itemName the name to get the binding configuration for.
      * @return the binding configuration.
      */
@@ -31,7 +31,7 @@ public interface ZWaveBindingProvider extends AutoUpdateBindingProvider {
     /**
      * Returns the {@link Item} with the specified item name. Returns null
      * if the item was not found.
-     * 
+     *
      * @param itemName the name of the item.
      * @return the item.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveGenericBindingProvider.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * This class is responsible for parsing the binding configuration.
- * 
+ *
  * @author Victor Belov
  * @author Brian Crosby
  * @author Chris Jackson
@@ -125,7 +125,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 
     /**
      * Returns the binding configuration for a string.
-     * 
+     *
      * @return the binding configuration.
      */
     @Override

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbAssociationGroup.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * This implements the configuration group for the XML product database.
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbCommandClass.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * Implements a commandclass for the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbConfigurationListItem.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Implements the configuration list of the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbConfigurationParameter.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Implements the configuration parameters for the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbLabel.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Implements a label class for the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbManufacturer.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * Implements the manufacturer class for the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbProduct.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * Implements the product class for the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbProductFile.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * Implements the top level class for the product file
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbProductReference.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Implements the reference class for the XML product database
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  *

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveAlarmConverter.java
Patch:
@@ -34,7 +34,7 @@
  * ZWaveAlarmConverter class. Converter for communication with the
  * {@link ZWaveAlarmCommandClass}. Implements polling of the alarm
  * status and receiving of alarm events.
- * 
+ *
  * @author Chris Jackson
  * @since 1.6.0
  */
@@ -45,7 +45,7 @@ public class ZWaveAlarmConverter extends ZWaveCommandClassConverter<ZWaveAlarmCo
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveAlarmConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveAlarmSensorConverter.java
Patch:
@@ -34,7 +34,7 @@
  * ZWaveAlarmSensorConverter class. Converter for communication with the
  * {@link ZWaveAlarmSensorCommandClass}. Implements polling of the alarm sensor
  * status and receiving of alarm sensor events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -45,7 +45,7 @@ public class ZWaveAlarmSensorConverter extends ZWaveCommandClassConverter<ZWaveA
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveAlarmSensorConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveBasicConverter.java
Patch:
@@ -38,7 +38,7 @@
  * through the BASIC command class. Note that some devices report their
  * status as BASIC Report messages as well. We try to handle these devices
  * as best as possible.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -49,7 +49,7 @@ public class ZWaveBasicConverter extends ZWaveCommandClassConverter<ZWaveBasicCo
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveBasicConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveBatteryConverter.java
Patch:
@@ -30,7 +30,7 @@
  * ZWaveBatteryConverter class. Converter for communication with the
  * {@link ZWaveBatteryCommandClass}. Implements polling of the battery
  * status and receiving of battery events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -41,7 +41,7 @@ public class ZWaveBatteryConverter extends ZWaveCommandClassConverter<ZWaveBatte
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveBatteryConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveBinarySensorConverter.java
Patch:
@@ -34,7 +34,7 @@
  * ZWaveBinarySensorConverter class. Converter for communication with the
  * {@link ZWaveBinarySensorConverter}. Implements polling of the binary sensor
  * status and receiving of binary sensor events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @author Chris Jackson
  * @since 1.4.0
@@ -46,7 +46,7 @@ public class ZWaveBinarySensorConverter extends ZWaveCommandClassConverter<ZWave
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveBinarySensorConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveBinarySwitchConverter.java
Patch:
@@ -35,7 +35,7 @@
  * ZWaveBinarySwitchConverter class. Converter for communication with the
  * {@link ZWaveBatteryCommandClass}. Implements polling of the battery
  * status and receiving of battery events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -46,7 +46,7 @@ public class ZWaveBinarySwitchConverter extends ZWaveCommandClassConverter<ZWave
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveBinarySwitchConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConfigurationConverter.java
Patch:
@@ -37,7 +37,7 @@
 /***
  * ZWaveConfigurationConverter class. Converter for communication with the
  * {@link ZWaveConfigurationCommandClass}.
- * 
+ *
  * @author Chris Jackson
  * @since 1.7.0
  */
@@ -48,7 +48,7 @@ public class ZWaveConfigurationConverter extends ZWaveCommandClassConverter<ZWav
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveConfigurationConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMeterConverter.java
Patch:
@@ -35,7 +35,7 @@
  * ZWaveMultiLevelSensorConverter class. Converter for communication with the
  * {@link ZWaveMultiLevelSensorCommandClass}. Implements polling of the sensor
  * status and receiving of sensor events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -46,7 +46,7 @@ public class ZWaveMeterConverter extends ZWaveCommandClassConverter<ZWaveMeterCo
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveMeterConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMultiLevelSensorConverter.java
Patch:
@@ -35,7 +35,7 @@
  * ZWaveMultiLevelSensorConverter class. Converter for communication with the
  * {@link ZWaveMultiLevelSensorCommandClass}. Implements polling of the sensor
  * status and receiving of sensor events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @author Chris Jackson
  * @since 1.4.0
@@ -50,7 +50,7 @@ public class ZWaveMultiLevelSensorConverter extends ZWaveCommandClassConverter<Z
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveMultiLevelSensorConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMultiLevelSwitchConverter.java
Patch:
@@ -44,7 +44,7 @@
  * ZWaveBinarySwitchConverter class. Converter for communication with the
  * {@link ZWaveBatteryCommandClass}. Implements polling of the battery
  * status and receiving of battery events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -65,7 +65,7 @@ public class ZWaveMultiLevelSwitchConverter extends ZWaveCommandClassConverter<Z
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveMultiLevelSwitchConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveSceneConverter.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * ZWaveSceneConverter class. Converters between binding items
  * and the Z-Wave API for scene controllers.
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  */
@@ -40,7 +40,7 @@ public class ZWaveSceneConverter extends ZWaveCommandClassConverter<ZWaveSceneAc
     /**
      * Constructor. Creates a new instance of the {@link ZWaveConverterBase}
      * class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use to send messages.
      * @param eventPublisher the {@link EventPublisher} that can be used to send updates.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveSwitchAllConverter.java
Patch:
@@ -33,7 +33,7 @@
 /***
  * ZWaveSwitchAllConverter class. Converter for communication with the
  * {@link ZWaveSwitchAllCommandClass}. Implements All On/All Off.
- * 
+ *
  * @author Pedro Paixao
  * @since 1.8.0
  */
@@ -42,7 +42,7 @@ public class ZWaveSwitchAllConverter extends ZWaveCommandClassConverter<ZWaveSwi
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveSwitchAllConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatFanModeConverter.java
Patch:
@@ -30,7 +30,7 @@
  * ZWaveThermostatFanModeConverter class. Converter for communication with the
  * {@link ZWaveThermostatFanModeCommandClass}. Implements polling of the fan
  * mode state and receiving of fan mode events.
- * 
+ *
  * @author Dan Cunningham
  * @since 1.6.0
  */
@@ -41,7 +41,7 @@ public class ZWaveThermostatFanModeConverter extends ZWaveCommandClassConverter<
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveThermostatFanModeConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatFanStateConverter.java
Patch:
@@ -28,7 +28,7 @@
  * ZWaveThermostatFanStateConverter class. Converter for communication with the
  * {@link ZWaveThermostatFanStateCommandClass}. Implements polling of the fan
  * state and receiving of fan state events.
- * 
+ *
  * @author Dan Cunningham
  * @since 1.6.0
  */
@@ -39,7 +39,7 @@ public class ZWaveThermostatFanStateConverter extends ZWaveCommandClassConverter
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveThermostatFanStateConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatModeConverter.java
Patch:
@@ -30,7 +30,7 @@
  * ZWaveThermostatModeConverter class. Converter for communication with the
  * {@link ZWaveThermostatModeCommandClass}. Implements polling of the mode
  * state and receiving of mode state events.
- * 
+ *
  * @author Dan Cunningham
  * @since 1.6.0
  */
@@ -41,7 +41,7 @@ public class ZWaveThermostatModeConverter extends ZWaveCommandClassConverter<ZWa
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveThermostatModeConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatOperatingStateConverter.java
Patch:
@@ -28,7 +28,7 @@
  * ZWaveThermostatOperatingStateConverter class. Converter for communication with the
  * {@link ZWaveThermostatOperatingStateCommandClass}. Implements polling of the operating
  * state and receiving of operating state events.
- * 
+ *
  * @author Dan Cunningham
  * @since 1.6.0
  */
@@ -40,7 +40,7 @@ public class ZWaveThermostatOperatingStateConverter
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveThermostatOperatingStateConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatSetpointConverter.java
Patch:
@@ -33,7 +33,7 @@
  * ZWaveThermostatSetpointConverter class. Converter for communication with the
  * {@link ZWaveThermostatSetpointCommandClass}. Implements polling of the setpoint
  * status and receiving of setpoint events.
- * 
+ *
  * @author Matthew Bowman
  * @author Dave Hock
  * @author Chris Jackson
@@ -46,7 +46,7 @@ public class ZWaveThermostatSetpointConverter extends ZWaveCommandClassConverter
 
     /**
      * Constructor. Creates a new instance of the {@link ZWaveThermostatSetpointConverter} class.
-     * 
+     *
      * @param controller the {@link ZWaveController} to use for sending messages.
      * @param eventPublisher the {@link EventPublisher} to use to publish events.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/BigDecimalCommandConverter.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * Converts from {@link DecimalType} command to a Z-Wave value.
- * 
+ *
  * @author Matthew Bowman
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/BinaryOnOffCommandConverter.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Converts from {@link OnOffType} command to a Z-Wave value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/BinaryPercentCommandConverter.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Converts from {@link PercentType} command to a Z-Wave value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/IntegerCommandConverter.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Converts from {@link DecimalType} command to a Z-Wave value.
- * 
+ *
  * @author Chris Jackson
  * @since 1.7.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/MultiLevelIncreaseDecreaseCommandConverter.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Converts from {@link IncreaseDecreaseType} command to a Z-Wave value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/MultiLevelOnOffCommandConverter.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Converts from {@link OnOffType} command to a Z-Wave value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/MultiLevelPercentCommandConverter.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Converts from {@link PercentType} command to a Z-Wave value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/MultiLevelUpDownCommandConverter.java
Patch:
@@ -13,7 +13,7 @@
 
 /**
  * Converts from {@link UpDownType} command to a Z-Wave value.
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/RestoreValueMultiLevelOnOffCommandConverter.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * Converts from {@link OnOffType} command to a Z-Wave value.
  * Restores the dimmer to the last value it had.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BatteryDecimalTypeConverter.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * Converts from a {@link Integer} to a {@link DecimalType}
  * Only processes for the BATTERY command class.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BatteryPercentTypeConverter.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * Converts from a {@link Integer} to a {@link PercentType}
  * Only processes for the BATTERY command class.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BigDecimalDecimalTypeConverter.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Converts from an {@link BigDecimal} to a {@link DecimalType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BigDecimalOnOffTypeConverter.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Converts from big decimal Z-Wave value to a {@link OnOffType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BigDecimalOpenClosedTypeConverter.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Converts from a Z-Wave big decimal value to a {@link OpenClosedType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BinaryDecimalTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a binary Z-Wave value to a {@link DecimalType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BinaryPercentTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a binary Z-Wave value to a {@link PercentType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BooleanOnOffTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from Z-Wave boolean value to a {@link OnOffType}
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/BooleanOpenClosedTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a Z-Wave boolean value to a {@link OpenClosedType}
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/DateDateTimeTypeConverter.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * Converts from a {@link Date} to a {@link DateTimeType}
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/IntegerDecimalTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from an {@link Integer} to a {@link DecimalType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/IntegerOnOffTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from integer Z-Wave value to a {@link OnOffType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/IntegerOpenClosedTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a Z-Wave integer value to a {@link OpenClosedType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/IntegerPercentTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a {@link Integer} to a {@link PercentType}
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/IntegerUpDownTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a {@link Integer} to a {@link UpDownType}
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/StateComparator.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * State Comparator class. Compares two States to determine which one is more
  * specific.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/state/StringStringTypeConverter.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Converts from a {@link String} to a {@link StringType}
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveEventListener.java
Patch:
@@ -13,15 +13,15 @@
 /**
  * ZWave Event Listener interface. Classes that implement this interface
  * need to be able to handle incoming ZWaveEvent events.
- * 
+ *
  * @author Brian Crosby
  * @since 1.3.0
  */
 public interface ZWaveEventListener {
 
     /**
      * Event handler method for incoming Z-Wave events.
-     * 
+     *
      * @param event the incoming Z-Wave event.
      */
     void ZWaveIncomingEvent(ZWaveEvent event);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNodeState.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * Represents the state that the node is in.
- * 
+ *
  * @author Chris Jackson
  * @since 1.7.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveApplicationStatusClass.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * Handles the Application Status command class.
- * 
+ *
  * @author Dan Cunningham
  * @since 1.6.0
  */
@@ -49,7 +49,7 @@ public class ZWaveApplicationStatusClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZWaveApplicationStatusClass class.
-     * 
+     *
      * @param node the node this command class belongs to
      * @param controller the controller to use
      * @param endpoint the endpoint this Command class belongs to

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBasicCommands.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Interface to implement for all command classes that implement the basic
  * commands like GET/SET value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.3.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCRC16EncapsulationCommandClass.java
Patch:
@@ -35,7 +35,7 @@ public class ZWaveCRC16EncapsulationCommandClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZWaveMultiCommandCommandClass class.
-     * 
+     *
      * @param node
      *            the node this command class belongs to
      * @param controller
@@ -72,7 +72,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
     /**
      * Handle the crc16 encapsulated message. This processes the received frame,
      * checks the crc and forwards to the real command class.
-     * 
+     *
      * @param serialMessage
      *            The received message
      * @param offset

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClassDynamicState.java
Patch:
@@ -16,7 +16,7 @@
  * Interface that command classes can implement to implement retrieval of
  * dynamic state information..
  * For instance to support getting dynamic values from a node.
- * 
+ *
  * @author Jan-Willem Spuij
  * @author Chris Jackson
  * @since 1.3.0
@@ -27,7 +27,7 @@ public interface ZWaveCommandClassDynamicState {
      * state information. These queries need to be completed to be able to proceed to the next
      * node phase. The queries are returned so that the node can handle processing
      * to proceed to the next node phase.
-     * 
+     *
      * @param refresh if true will request all dynamic states even if they are already initialised
      * @return the messages with the queries for dynamic values.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClassInitialization.java
Patch:
@@ -16,7 +16,7 @@
  * Interface that command classes can implement to implement initialization.
  * For instance to support getting static values from a node, or handle dependencies
  * on other command classes.
- * 
+ *
  * @author Jan-Willem Spuij
  * @author Chris Jackson
  * @since 1.3.0
@@ -27,7 +27,7 @@ public interface ZWaveCommandClassInitialization {
      * to be performed. These queries need to be completed to be able to proceed to the next
      * node phase. The queries are returned so that the node can handle processing and counting
      * to proceed to the next node phase.
-     * 
+     *
      * @param refresh if true will request all initialised even if the class is already initialised
      * @return the messages with the queries for initialization.
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveGetCommands.java
Patch:
@@ -12,14 +12,14 @@
 
 /**
  * Interface to implement for all command classes that implement the Get command.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.3.0
  */
 public interface ZWaveGetCommands {
     /**
      * Gets a SerialMessage with the GET command
-     * 
+     *
      * @return the serial message
      */
     public SerialMessage getValueMessage();

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveHailCommandClass.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Handles the Hail command class. Some devices handle state changes by
  * 'hailing' the controller and asking it to request the device values
- * 
+ *
  * @author Ben Jones
  * @since 1.4.0
  */
@@ -36,7 +36,7 @@ public class ZWaveHailCommandClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZWaveHailCommandClass class.
-     * 
+     *
      * @param node the node this command class belongs to
      * @param controller the controller to use
      * @param endpoint the endpoint this Command class belongs to

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveManufacturerSpecificCommandClass.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Handles the manufacturer specific command class. Class to request and report
  * manufacturer specific information.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.3.0
  */
@@ -39,7 +39,7 @@ public class ZWaveManufacturerSpecificCommandClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZwaveManufacturerSpecificCommandClass class.
-     * 
+     *
      * @param node the node this command class belongs to
      * @param controller the controller to use
      * @param endpoint the endpoint this Command class belongs to
@@ -98,7 +98,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
 
     /**
      * Gets a SerialMessage with the ManufacturerSpecific GET command
-     * 
+     *
      * @return the serial message
      */
     public SerialMessage getManufacturerSpecificMessage() {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Handles the Multi Command command class.
- * 
+ *
  * @author Chris Jackson
  * @since 1.6.0
  */
@@ -34,7 +34,7 @@ public class ZWaveMultiCommandCommandClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZWaveMultiCommandCommandClass class.
-     * 
+     *
      * @param node the node this command class belongs to
      * @param controller the controller to use
      * @param endpoint the endpoint this Command class belongs to
@@ -68,7 +68,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
     /**
      * Handle the multi command message. This processes the received frame, processing each
      * command class in turn.
-     * 
+     *
      * @param serialMessage The received message
      * @param offset The starting offset into the payload
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveNoOperationCommandClass.java
Patch:
@@ -26,7 +26,7 @@
  * to check if a node is reachable by sending a serial message without a command
  * to the specified node. This can for instance be used to check that a node is
  * non-responding.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.3.0
  */
@@ -38,7 +38,7 @@ public class ZWaveNoOperationCommandClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZWaveNoOperationCommandClass class.
-     * 
+     *
      * @param node the node this command class belongs to
      * @param controller the controller to use
      * @param endpoint the endpoint this Command class belongs to
@@ -65,7 +65,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
 
     /**
      * Gets a SerialMessage with the No Operation command
-     * 
+     *
      * @return the serial message
      */
     public SerialMessage getNoOperationMessage() {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveSceneActivationCommandClass.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Handles scene activation messages
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  */
@@ -36,7 +36,7 @@ public class ZWaveSceneActivationCommandClass extends ZWaveCommandClass {
 
     /**
      * Creates a new instance of the ZWaveSceneActivationCommandClass class.
-     * 
+     *
      * @param node the node this command class belongs to
      * @param controller the controller to use
      * @param endpoint the endpoint this Command class belongs to
@@ -74,7 +74,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
 
     /**
      * Processes a SCENEACTIVATION_SET message.
-     * 
+     *
      * @param serialMessage the incoming message to process.
      * @param offset the offset position from which to start message processing.
      * @param endpoint the endpoint or instance number this message is meant for.

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveSetCommands.java
Patch:
@@ -13,14 +13,14 @@
 /**
  * Interface to implement for all command classes that implement the SET
  * commands like SET value.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.3.0
  */
 public interface ZWaveSetCommands {
     /**
      * Gets a SerialMessage with the SET command
-     * 
+     *
      * @param value the value to set.
      * @return the serial message
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveInclusionEvent.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * This event signals a node being included or excluded into the network.
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */
@@ -20,7 +20,7 @@ public class ZWaveInclusionEvent extends ZWaveEvent {
     /**
      * Constructor. Creates a new instance of the ZWaveInclusionEvent
      * class.
-     * 
+     *
      * @param nodeId the nodeId of the event.
      */
     public ZWaveInclusionEvent(Type type, int nodeId) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveIndicatorCommandClassChangeEvent.java
Patch:
@@ -16,7 +16,7 @@
  * ZWave Command Class event. This event is fired when a command class
  * receives a value from the node. The event can be subclasses to add
  * additional information to the event.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -25,7 +25,7 @@ public class ZWaveIndicatorCommandClassChangeEvent extends ZWaveCommandClassValu
 
     /**
      * Constructor. Creates a new instance of the ZWaveCommandClassValueEvent class.
-     * 
+     *
      * @param nodeId the nodeId of the event
      * @param endpoint the endpoint of the event.
      * @param commandClass the command class that fired the ZWaveCommandClassValueEvent;
@@ -40,7 +40,7 @@ public ZWaveIndicatorCommandClassChangeEvent(int nodeId, int endpoint, CommandCl
 
     /**
      * Gets the value for the event.
-     * 
+     *
      * @return the value.
      */
     public int getOldValue() {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveInitializationCompletedEvent.java
Patch:
@@ -13,7 +13,7 @@
  * Indicates that the ZWaveController has completed
  * the initialization phase and is ready to start
  * accepting commands and receiving events.
- * 
+ *
  * @author Jan-Willem Spuij
  * @since 1.4.0
  */
@@ -22,7 +22,7 @@ public class ZWaveInitializationCompletedEvent extends ZWaveEvent {
     /**
      * Constructor. Creates a new instance of the ZWaveTransactionCompletedEvent
      * class.
-     * 
+     *
      * @param nodeId the nodeId of the event. Must be set to the controller node.
      */
     public ZWaveInitializationCompletedEvent(int nodeId) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNetworkEvent.java
Patch:
@@ -12,7 +12,7 @@
  * Network event signals that a network function has completed.
  * This is used to notify higher layers of network functions so they
  * can be handled by (for example) a network heal process.
- * 
+ *
  * @author Chris Jackson
  * @since 1.4.0
  */
@@ -23,7 +23,7 @@ public class ZWaveNetworkEvent extends ZWaveEvent {
     /**
      * Constructor. Creates a new instance of the ZWaveNetworkEvent
      * class.
-     * 
+     *
      * @param nodeId the nodeId of the event.
      */
     public ZWaveNetworkEvent(Type type, int nodeId, State state) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNodeInfoEvent.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * This event signals a node information frame.
- * 
+ *
  * @author Chris Jackson
  * @since 1.8.0
  */
@@ -19,7 +19,7 @@ public class ZWaveNodeInfoEvent extends ZWaveEvent {
     /**
      * Constructor. Creates a new instance of the ZWaveInclusionEvent
      * class.
-     * 
+     *
      * @param nodeId the nodeId of the event.
      */
     public ZWaveNodeInfoEvent(int nodeId) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNodeStatusEvent.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Node status event is used to signal if a node is alive or dead
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */
@@ -22,7 +22,7 @@ public class ZWaveNodeStatusEvent extends ZWaveEvent {
     /**
      * Constructor. Creates a new instance of the ZWaveNetworkEvent
      * class.
-     * 
+     *
      * @param nodeId the nodeId of the event.
      */
     public ZWaveNodeStatusEvent(int nodeId, ZWaveNodeState state) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeSerializer.java
Patch:
@@ -87,7 +87,7 @@ public ZWaveNodeSerializer() {
 
     /**
      * Serializes an XML tree of a {@link ZWaveNode}
-     * 
+     *
      * @param node
      *            the node to serialize
      */
@@ -125,7 +125,7 @@ public void SerializeNode(ZWaveNode node) {
 
     /**
      * Deserializes an XML tree of a {@link ZWaveNode}
-     * 
+     *
      * @param nodeId
      *            the number of the node to deserialize
      * @return returns the Node or null in case Serialization failed.
@@ -161,7 +161,7 @@ public ZWaveNode DeserializeNode(int nodeId) {
 
     /**
      * Deletes the persistence store for the specified node.
-     * 
+     *
      * @param nodeId The node ID to remove
      * @return true if the file was deleted
      */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ApplicationCommandMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignSucReturnRouteMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ControllerSetDefaultMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.7.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/EnableSucMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * This class processes a serial message to enable or disable the controller
  * SUC/SIS functionality
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/GetControllerCapabilitiesMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/GetRoutingInfoMessageClass.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/GetSucNodeIdMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message to get the SUC node ID
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/GetVersionMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/IdentifyNodeMessageClass.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/IsFailedNodeMessageClass.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * This class processes a serial message from the zwave controller.
  * It queries the controller to see if the node is on its 'failed nodes' list.
- * 
+ *
  * @author Wez Hunter
  * @since 1.6.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/MemoryGetIdMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RemoveFailedNodeMessageClass.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RemoveNodeMessageClass.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RequestNodeInfoMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RequestNodeNeighborUpdateMessageClass.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SendDataMessageClass.java
Patch:
@@ -163,7 +163,7 @@ public boolean handleFailedSendDataRequest(ZWaveController zController, SerialMe
     /**
      * Transmission state enumeration. Indicates the
      * transmission state of the message to the node.
-     * 
+     *
      * @author Jan-Willem Spuij
      * @ since 1.3.0
      */
@@ -198,7 +198,7 @@ private static void initMapping() {
         /**
          * Lookup function based on the transmission state code.
          * Returns null when there is no transmission state with code i.
-         * 
+         *
          * @param i the code to lookup
          * @return enumeration value of the transmission state.
          */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SerialApiGetCapabilitiesMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SerialApiGetInitDataMessageClass.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SerialApiSetTimeoutsMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.7.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SerialApiSoftResetMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SetSucNodeMessageClass.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * This class processes a serial message from the zwave controller
- * 
+ *
  * @author Chris Jackson
  * @since 1.5.0
  */

File: bundles/binding/org.openhab.binding.caldav-command/src/main/java/org/openhab/binding/caldav_command/internal/CalDavBinding.java
Patch:
@@ -95,7 +95,7 @@ public void setCalDavLoader(CalDavLoader calDavLoader) {
         this.calDavLoader.addListener(this);
     }
 
-    public void unsetCalDavLoader() {
+    public void unsetCalDavLoader(CalDavLoader calDavLoader) {
         this.calDavLoader.removeListener(this);
         this.calDavLoader = null;
     }

File: bundles/binding/org.openhab.binding.caldav-personal/src/main/java/org/openhab/binding/caldav_personal/internal/CalDavBinding.java
Patch:
@@ -64,7 +64,7 @@ public void setCalDavLoader(CalDavLoader calDavLoader) {
         this.calDavLoader.addListener(this);
     }
 
-    public void unsetCalDavLoader() {
+    public void unsetCalDavLoader(CalDavLoader calDavLoader) {
         this.calDavLoader.removeListener(this);
         this.calDavLoader = null;
     }

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentMessage.java
Patch:
@@ -128,7 +128,7 @@ public void encodeMessage(byte[] data) {
 
     @Override
     public byte[] decodeMessage() {
-        byte[] data = new byte[13];
+        byte[] data = new byte[14];
 
         data[0] = 0x0D;
         data[1] = RFXComBaseMessage.PacketType.CURRENT.toByte();

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java
Patch:
@@ -139,7 +139,7 @@ public void encodeMessage(byte[] data) {
 
     @Override
     public byte[] decodeMessage() {
-        byte[] data = new byte[17];
+        byte[] data = new byte[18];
 
         data[0] = 0x11;
         data[1] = RFXComBaseMessage.PacketType.ENERGY.toByte();

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComRainMessage.java
Patch:
@@ -112,7 +112,7 @@ public void encodeMessage(byte[] data) {
 
     @Override
     public byte[] decodeMessage() {
-        byte[] data = new byte[10];
+        byte[] data = new byte[12];
 
         data[0] = 0x0B;
         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComUVMessage.java
Patch:
@@ -126,7 +126,7 @@ public void encodeMessage(byte[] data) {
 
     @Override
     public byte[] decodeMessage() {
-        byte[] data = new byte[9];
+        byte[] data = new byte[10];
 
         data[0] = 0x09;
         data[1] = RFXComBaseMessage.PacketType.UV.toByte();

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java
Patch:
@@ -137,7 +137,7 @@ public void encodeMessage(byte[] data) {
 
     @Override
     public byte[] decodeMessage() {
-        byte[] data = new byte[16];
+        byte[] data = new byte[17];
 
         data[0] = 0x10;
         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();

File: bundles/binding/org.openhab.binding.smarthomatic/src/test/java/org/openhab/binding/smarthomatic/TestSHCMessage.java
Patch:
@@ -19,12 +19,11 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.openhab.binding.smarthomatic.internal.SHCMessage;
+import org.openhab.binding.smarthomatic.internal.packetData.Packet;
 import org.openhab.core.library.types.DecimalType;
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.types.Type;
 
-import com.sun.xml.internal.ws.api.message.Packet;
-
 /**
  * test of the different smarthomatic messages to make sure they are parsed
  * correctly
@@ -38,7 +37,7 @@ public class TestSHCMessage {
 
     /**
      * common setup
-     * 
+     *
      * @throws Exception
      */
     @Before

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/ColorpickerRenderer.java
Patch:
@@ -64,6 +64,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		}
 		String label = getLabel(cp);
 		String purelabel = label;
+		purelabel = purelabel.replaceAll("\\\"", "\\\\'");
 		if(label.contains("<span>")) {
 			purelabel = purelabel.substring(0, label.indexOf("<span>"));
 		}

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/NetatmoMeasureType.java
Patch:
@@ -30,6 +30,8 @@ public enum NetatmoMeasureType {
     LATITUDE("Latitude", NetatmoScale.MAX),
     LONGITUDE("Longitude", NetatmoScale.MAX),
     RFSTATUS("RfStatus", NetatmoScale.MAX),
+    BATTERYPERCENT("BatteryPercent", NetatmoScale.MAX),
+    BATTERYSTATUS("BatteryStatus", NetatmoScale.MAX),
     BATTERYVP("BatteryVp", NetatmoScale.MAX),
     TIMESTAMP("TimeStamp", NetatmoScale.MAX),
     MODULENAME("ModuleName", NetatmoScale.MAX),

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java
Patch:
@@ -53,8 +53,8 @@ public class RFXComEnergyMessage extends RFXComBaseMessage {
     private static float WATTS_TO_AMPS_CONVERSION_FACTOR = 230F;
 
     public enum SubType {
-        ELEC1(0),
-        ELEC2(1),
+        ELEC2(1), // CM119/160
+        ELEC3(2), // CM180
 
         UNKNOWN(255);
 
@@ -77,7 +77,7 @@ public byte toByte() {
             RFXComValueSelector.SIGNAL_LEVEL, RFXComValueSelector.BATTERY_LEVEL, RFXComValueSelector.COMMAND,
             RFXComValueSelector.INSTANT_AMPS, RFXComValueSelector.TOTAL_AMP_HOURS);
 
-    public SubType subType = SubType.ELEC1;
+    public SubType subType = SubType.ELEC2;
     public int sensorId = 0;
     public byte count = 0;
     public double instantAmps = 0;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java
Patch:
@@ -53,8 +53,8 @@ public class RFXComEnergyMessage extends RFXComBaseMessage {
     private static float WATTS_TO_AMPS_CONVERSION_FACTOR = 230F;
 
     public enum SubType {
-        ELEC1(0),
-        ELEC2(1),
+        ELEC2(1), // CM119/160
+        ELEC3(2), // CM180
 
         UNKNOWN(255);
 
@@ -77,7 +77,7 @@ public byte toByte() {
             RFXComValueSelector.SIGNAL_LEVEL, RFXComValueSelector.BATTERY_LEVEL, RFXComValueSelector.COMMAND,
             RFXComValueSelector.INSTANT_AMPS, RFXComValueSelector.TOTAL_AMP_HOURS);
 
-    public SubType subType = SubType.ELEC1;
+    public SubType subType = SubType.ELEC2;
     public int sensorId = 0;
     public byte count = 0;
     public double instantAmps = 0;

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/ColorpickerRenderer.java
Patch:
@@ -64,6 +64,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		}
 		String label = getLabel(cp);
 		String purelabel = label;
+		purelabel = purelabel.replaceAll("\\\"", "\\\\'");
 		if(label.contains("<span>")) {
 			purelabel = purelabel.substring(0, label.indexOf("<span>"));
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -390,7 +390,7 @@ record = new OpenHABConfigurationRecord(domain + "associations/", "Association G
                     records.add(record);
                 }
 
-                if ((ZWaveConfigurationCommandClass) node.getCommandClass(CommandClass.WAKE_UP) != null) {
+                if ((ZWaveWakeUpCommandClass) node.getCommandClass(CommandClass.WAKE_UP) != null) {
                     record = new OpenHABConfigurationRecord(domain + "wakeup/", "Wakeup Period");
                     record.addAction("Refresh", "Refresh");
                     records.add(record);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -390,7 +390,7 @@ record = new OpenHABConfigurationRecord(domain + "associations/", "Association G
                     records.add(record);
                 }
 
-                if ((ZWaveConfigurationCommandClass) node.getCommandClass(CommandClass.WAKE_UP) != null) {
+                if ((ZWaveWakeUpCommandClass) node.getCommandClass(CommandClass.WAKE_UP) != null) {
                     record = new OpenHABConfigurationRecord(domain + "wakeup/", "Wakeup Period");
                     record.addAction("Refresh", "Refresh");
                     records.add(record);

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/NetatmoMeasureType.java
Patch:
@@ -30,6 +30,8 @@ public enum NetatmoMeasureType {
     LATITUDE("Latitude", NetatmoScale.MAX),
     LONGITUDE("Longitude", NetatmoScale.MAX),
     RFSTATUS("RfStatus", NetatmoScale.MAX),
+    BATTERYPERCENT("BatteryPercent", NetatmoScale.MAX),
+    BATTERYSTATUS("BatteryStatus", NetatmoScale.MAX),
     BATTERYVP("BatteryVp", NetatmoScale.MAX),
     TIMESTAMP("TimeStamp", NetatmoScale.MAX),
     MODULENAME("ModuleName", NetatmoScale.MAX),

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/utils/StringUtilsExt.java
Patch:
@@ -126,10 +126,10 @@ public static Properties parseJdbcURL(String url, Properties def) {
 
         URI dbURI = null;
         try {
-            dbURI = new URI(stringAfterSubstr(url, ":", 1));
+            dbURI = new URI(stringAfterSubstr(url, ":", 1).replaceFirst(" ", ""));
             if (dbURI.getScheme() != null) {
                 props.put("scheme", dbURI.getScheme());
-                dbURI = new URI(stringAfterSubstr(url, ":", 2));
+                dbURI = new URI(stringAfterSubstr(url, ":", 2).replaceFirst(" ", ""));
             }
         } catch (URISyntaxException e) {
             logger.error("parseJdbcURL: URI '{}' is not well formated URISyntaxException: {}", url, e);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -384,7 +384,7 @@ record = new OpenHABConfigurationRecord(domain + "parameters/", "Configuration P
                     records.add(record);
                 }
 
-                if ((ZWaveConfigurationCommandClass) node.getCommandClass(CommandClass.ASSOCIATION) != null) {
+                if ((ZWaveAssociationCommandClass) node.getCommandClass(CommandClass.ASSOCIATION) != null) {
                     record = new OpenHABConfigurationRecord(domain + "associations/", "Association Groups");
                     record.addAction("Refresh", "Refresh");
                     records.add(record);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -384,7 +384,7 @@ record = new OpenHABConfigurationRecord(domain + "parameters/", "Configuration P
                     records.add(record);
                 }
 
-                if ((ZWaveConfigurationCommandClass) node.getCommandClass(CommandClass.ASSOCIATION) != null) {
+                if ((ZWaveAssociationCommandClass) node.getCommandClass(CommandClass.ASSOCIATION) != null) {
                     record = new OpenHABConfigurationRecord(domain + "associations/", "Association Groups");
                     record.addAction("Refresh", "Refresh");
                     records.add(record);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurrentMessage.java
Patch:
@@ -128,7 +128,7 @@ public void encodeMessage(byte[] data) {
 
     @Override
     public byte[] decodeMessage() {
-        byte[] data = new byte[13];
+        byte[] data = new byte[14];
 
         data[0] = 0x0D;
         data[1] = RFXComBaseMessage.PacketType.CURRENT.toByte();

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComEnergyMessage.java
Patch:
@@ -139,7 +139,7 @@ public void encodeMessage(byte[] data) {
 
     @Override
     public byte[] decodeMessage() {
-        byte[] data = new byte[17];
+        byte[] data = new byte[18];
 
         data[0] = 0x11;
         data[1] = RFXComBaseMessage.PacketType.ENERGY.toByte();

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComRainMessage.java
Patch:
@@ -112,7 +112,7 @@ public void encodeMessage(byte[] data) {
 
     @Override
     public byte[] decodeMessage() {
-        byte[] data = new byte[10];
+        byte[] data = new byte[12];
 
         data[0] = 0x0B;
         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComUVMessage.java
Patch:
@@ -126,7 +126,7 @@ public void encodeMessage(byte[] data) {
 
     @Override
     public byte[] decodeMessage() {
-        byte[] data = new byte[9];
+        byte[] data = new byte[10];
 
         data[0] = 0x09;
         data[1] = RFXComBaseMessage.PacketType.UV.toByte();

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComWindMessage.java
Patch:
@@ -137,7 +137,7 @@ public void encodeMessage(byte[] data) {
 
     @Override
     public byte[] decodeMessage() {
-        byte[] data = new byte[16];
+        byte[] data = new byte[17];
 
         data[0] = 0x10;
         data[1] = RFXComBaseMessage.PacketType.RAIN.toByte();

File: bundles/binding/org.openhab.binding.netatmo.test/src/test/java/org/openhab/binding/netatmo/internal/authentication/RefreshTokenRequestStub.java
Patch:
@@ -36,7 +36,7 @@ public static RefreshTokenRequestStub createRequest(final String resource) throw
     private String content;
 
     private RefreshTokenRequestStub(final String response) throws Exception {
-        super(CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN);
+        super(CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN, true, true);
 
         final URL resource = getClass().getResource(response);
 

File: bundles/binding/org.openhab.binding.netatmo.test/src/test/java/org/openhab/binding/netatmo/internal/authentication/RefreshTokenRequestStub.java
Patch:
@@ -36,7 +36,7 @@ public static RefreshTokenRequestStub createRequest(final String resource) throw
     private String content;
 
     private RefreshTokenRequestStub(final String response) throws Exception {
-        super(CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN);
+        super(CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN, true, true);
 
         final URL resource = getClass().getResource(response);
 

File: bundles/binding/org.openhab.binding.souliss/src/main/java/org/openhab/binding/souliss/internal/network/udp/SendDispatcher.java
Patch:
@@ -295,7 +295,7 @@ public static void safeSendCheck() {
                         // traduce il comando inviato con lo stato previsto e
                         // poi fa il confronto con lo stato attuale
                         if (logger.isDebugEnabled() && typ != null) {
-                            String s1 = Integer.toHexString(state);
+                            String s1 = Integer.toHexString((int) typ.getState());
                             String sStateMemoria = s1.length() < 2 ? "0x0" + s1.toUpperCase() : "0x" + s1.toUpperCase();
 
                             String sCmd = Integer.toHexString(packetsList.get(i).packet.getData()[j]);

File: bundles/binding/org.openhab.binding.souliss/src/main/java/org/openhab/binding/souliss/internal/network/udp/SendDispatcher.java
Patch:
@@ -295,7 +295,7 @@ public static void safeSendCheck() {
                         // traduce il comando inviato con lo stato previsto e
                         // poi fa il confronto con lo stato attuale
                         if (logger.isDebugEnabled() && typ != null) {
-                            String s1 = String.valueOf((int) typ.getState());
+                            String s1 = Integer.toHexString(state);
                             String sStateMemoria = s1.length() < 2 ? "0x0" + s1.toUpperCase() : "0x" + s1.toUpperCase();
 
                             String sCmd = Integer.toHexString(packetsList.get(i).packet.getData()[j]);

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/rpc/XbmcConnector.java
Patch:
@@ -563,7 +563,7 @@ private void requestPlayerUpdate(int playerId) {
     private void requestPlayerUpdate(int playerId, boolean updatePolledPropertiesOnly) {
         // CRIT: if a PVR recording is played in XBMC the playerId is reported as -1
         if (playerId == -1) {
-            logger.warn(
+            logger.debug(
                     "[{}]: Invalid playerId ({}) - assume this is a PVR recording playback and update playerId -> 1 (video player)",
                     xbmc.getHostname(), playerId);
             playerId = 1;

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/rpc/XbmcConnector.java
Patch:
@@ -563,7 +563,7 @@ private void requestPlayerUpdate(int playerId) {
     private void requestPlayerUpdate(int playerId, boolean updatePolledPropertiesOnly) {
         // CRIT: if a PVR recording is played in XBMC the playerId is reported as -1
         if (playerId == -1) {
-            logger.warn(
+            logger.debug(
                     "[{}]: Invalid playerId ({}) - assume this is a PVR recording playback and update playerId -> 1 (video player)",
                     xbmc.getHostname(), playerId);
             playerId = 1;

File: bundles/binding/org.openhab.binding.frontiersiliconradio/src/main/java/org/openhab/binding/frontiersiliconradio/internal/FrontierSiliconRadioBinding.java
Patch:
@@ -150,10 +150,11 @@ private void updateProvider(FrontierSiliconRadioBindingProvider provider) {
                             if (stateChanged(deviceId, property, volume)) {
                                 final int percent = radio.convertVolumeToPercent(volume);
                                 logger.debug("volume changed to " + volume + " (" + percent + "%)");
+                                // based on the item type, either set absolue value or percent value
                                 if (provider.getItemType(itemName) == DimmerItem.class) {
                                     eventPublisher.postUpdate(itemName, new PercentType(percent));
                                 } else {
-                                    eventPublisher.postUpdate(itemName, new DecimalType(percent));
+                                    eventPublisher.postUpdate(itemName, new DecimalType(volume));
                                 }
                             }
                             break;

File: bundles/binding/org.openhab.binding.frontiersiliconradio/src/main/java/org/openhab/binding/frontiersiliconradio/internal/FrontierSiliconRadioBinding.java
Patch:
@@ -150,10 +150,11 @@ private void updateProvider(FrontierSiliconRadioBindingProvider provider) {
                             if (stateChanged(deviceId, property, volume)) {
                                 final int percent = radio.convertVolumeToPercent(volume);
                                 logger.debug("volume changed to " + volume + " (" + percent + "%)");
+                                // based on the item type, either set absolue value or percent value
                                 if (provider.getItemType(itemName) == DimmerItem.class) {
                                     eventPublisher.postUpdate(itemName, new PercentType(percent));
                                 } else {
-                                    eventPublisher.postUpdate(itemName, new DecimalType(percent));
+                                    eventPublisher.postUpdate(itemName, new DecimalType(volume));
                                 }
                             }
                             break;

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/provider/YahooProvider.java
Patch:
@@ -18,9 +18,8 @@
  * @since 1.6.0
  */
 public class YahooProvider extends AbstractWeatherProvider {
-    // SELECT * FROM weather.forecast WHERE woeid in (SELECT woeid FROM geo.placefinder WHERE
-    // text='[LATITUDE],[LONGITUDE]' and gflags='R')
-    private static final String URL = "http://query.yahooapis.com/v1/public/yql?format=json&q=SELECT%20*%20FROM%20weather.forecast%20WHERE%20u%3D'c'%20AND%20woeid%20in%20(SELECT%20woeid%20FROM%20geo.placefinder%20WHERE%20text%3D'[LATITUDE]%2C[LONGITUDE]'%20and%20gflags%3D'R')";
+    // SELECT * FROM weather.forecast WHERE woeid='[WOEID]'
+    private static final String URL = "http://query.yahooapis.com/v1/public/yql?format=json&q=SELECT%20*%20FROM%20weather.forecast%20WHERE%20u%3D'c'%20AND%20woeid%20%3D%20'[WOEID]'";
 
     public YahooProvider() {
         super(new JsonWeatherParser());

File: bundles/binding/org.openhab.binding.netatmo.test/src/test/java/org/openhab/binding/netatmo/internal/authentication/RefreshTokenRequestStub.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.netatmo.internal.messages;
+package org.openhab.binding.netatmo.internal.authentication;
 
 import static com.google.common.base.Charsets.UTF_8;
 

File: bundles/binding/org.openhab.binding.netatmo.test/src/test/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataRequestStub.java
Patch:
@@ -6,11 +6,13 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.netatmo.internal.messages;
+package org.openhab.binding.netatmo.internal.weather;
 
 import java.io.IOException;
 import java.net.URL;
 
+import org.openhab.binding.netatmo.internal.weather.GetStationsDataRequest;
+
 import com.google.common.base.Charsets;
 import com.google.common.io.Resources;
 

File: bundles/binding/org.openhab.binding.netatmo.test/src/test/java/org/openhab/binding/netatmo/internal/weather/MeasurementRequestStub.java
Patch:
@@ -6,13 +6,15 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.netatmo.internal.messages;
+package org.openhab.binding.netatmo.internal.weather;
 
 import static com.google.common.base.Charsets.UTF_8;
 
 import java.io.IOException;
 import java.net.URL;
 
+import org.openhab.binding.netatmo.internal.weather.MeasurementRequest;
+
 import com.google.common.io.Resources;
 
 /**

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/authentication/RefreshTokenResponse.java
Patch:
@@ -6,11 +6,12 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.netatmo.internal.messages;
+package org.openhab.binding.netatmo.internal.authentication;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;
 import org.codehaus.jackson.annotate.JsonProperty;
+import org.openhab.binding.netatmo.internal.messages.AbstractResponse;
 
 /**
  * Java Bean to represent a JSON response to a <code>refresh_token</code> API

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataRequest.java
Patch:
@@ -6,14 +6,15 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.netatmo.internal.messages;
+package org.openhab.binding.netatmo.internal.weather;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
+import org.openhab.binding.netatmo.internal.messages.AbstractRequest;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/GetStationsDataResponse.java
Patch:
@@ -6,14 +6,16 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.netatmo.internal.messages;
+package org.openhab.binding.netatmo.internal.weather;
 
 import java.util.Date;
 import java.util.List;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;
 import org.codehaus.jackson.annotate.JsonProperty;
+import org.openhab.binding.netatmo.internal.messages.AbstractMessagePart;
+import org.openhab.binding.netatmo.internal.messages.AbstractResponse;
 
 /**
  * Java Bean to represent a JSON response to a <code>getstationsdata</code> API

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/MeasurementRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.netatmo.internal.messages;
+package org.openhab.binding.netatmo.internal.weather;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 
@@ -17,8 +17,7 @@
 import java.util.TreeSet;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
-import org.openhab.binding.netatmo.internal.NetatmoMeasureType;
-import org.openhab.binding.netatmo.internal.NetatmoScale;
+import org.openhab.binding.netatmo.internal.messages.AbstractRequest;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/MeasurementResponse.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.netatmo.internal.messages;
+package org.openhab.binding.netatmo.internal.weather;
 
 import java.math.BigDecimal;
 import java.util.Calendar;
@@ -15,6 +15,8 @@
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;
 import org.codehaus.jackson.annotate.JsonProperty;
+import org.openhab.binding.netatmo.internal.messages.AbstractMessagePart;
+import org.openhab.binding.netatmo.internal.messages.AbstractResponse;
 
 /**
  * Java Bean to represent a JSON response to a <code>getmeasure</code> API

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/NetatmoMeasureType.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.netatmo.internal;
+package org.openhab.binding.netatmo.internal.weather;
 
 import org.apache.commons.lang.StringUtils;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/NetatmoPressureUnit.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.netatmo.internal;
+package org.openhab.binding.netatmo.internal.weather;
 
 import java.math.BigDecimal;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/NetatmoScale.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.netatmo.internal;
+package org.openhab.binding.netatmo.internal.weather;
 
 import org.apache.commons.lang.StringUtils;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/weather/NetatmoUnitSystem.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.netatmo.internal;
+package org.openhab.binding.netatmo.internal.weather;
 
 import java.math.BigDecimal;
 

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/exec/ExecUtil.java
Patch:
@@ -112,7 +112,7 @@ public static String executeCommandLineAndWaitResponse(String commandLine, int t
         ByteArrayOutputStream stdout = new ByteArrayOutputStream();
         PumpStreamHandler streamHandler = new PumpStreamHandler(stdout);
 
-        executor.setExitValue(1);
+        executor.setExitValues(null);
         executor.setStreamHandler(streamHandler);
         executor.setWatchdog(watchdog);
 

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/exec/ExecUtil.java
Patch:
@@ -112,7 +112,7 @@ public static String executeCommandLineAndWaitResponse(String commandLine, int t
         ByteArrayOutputStream stdout = new ByteArrayOutputStream();
         PumpStreamHandler streamHandler = new PumpStreamHandler(stdout);
 
-        executor.setExitValue(1);
+        executor.setExitValues(null);
         executor.setStreamHandler(streamHandler);
         executor.setWatchdog(watchdog);
 

File: bundles/binding/org.openhab.binding.souliss/src/main/java/org/openhab/binding/souliss/internal/network/udp/SendDispatcher.java
Patch:
@@ -295,7 +295,7 @@ public static void safeSendCheck() {
                         // traduce il comando inviato con lo stato previsto e
                         // poi fa il confronto con lo stato attuale
                         if (logger.isDebugEnabled() && typ != null) {
-                            String s1 = String.valueOf((int) typ.getState());
+                            String s1 = Integer.toHexString(state);
                             String sStateMemoria = s1.length() < 2 ? "0x0" + s1.toUpperCase() : "0x" + s1.toUpperCase();
 
                             String sCmd = Integer.toHexString(packetsList.get(i).packet.getData()[j]);

File: bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-﻿/**
+/**
  * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials

File: bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/MyqBinding.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-﻿/**
+/**
  * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveDeviceClass.java
Patch:
@@ -521,7 +521,7 @@ public CommandClass[] getMandatoryCommandClasses() {
 					return new CommandClass[] { CommandClass.ASSOCIATION, CommandClass.SCENE_CONTROLLER_CONF, CommandClass.MANUFACTURER_SPECIFIC };
 				case POWER_SWITCH_BINARY:
 				case POWER_SWITCH_MULTILEVEL:
-					return new CommandClass[] { CommandClass.SWITCH_ALL };
+					return new CommandClass[0];
 				case SCENE_SWITCH_BINARY:
 				case SCENE_SWITCH_BINARY_DISCONTINUED:
 				case SCENE_SWITCH_MULTILEVEL:

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveDeviceClass.java
Patch:
@@ -521,7 +521,7 @@ public CommandClass[] getMandatoryCommandClasses() {
 					return new CommandClass[] { CommandClass.ASSOCIATION, CommandClass.SCENE_CONTROLLER_CONF, CommandClass.MANUFACTURER_SPECIFIC };
 				case POWER_SWITCH_BINARY:
 				case POWER_SWITCH_MULTILEVEL:
-					return new CommandClass[] { CommandClass.SWITCH_ALL };
+					return new CommandClass[0];
 				case SCENE_SWITCH_BINARY:
 				case SCENE_SWITCH_BINARY_DISCONTINUED:
 				case SCENE_SWITCH_MULTILEVEL:

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/FritzboxTr064GenericBindingProvider.java
Patch:
@@ -11,8 +11,6 @@
 import org.openhab.binding.fritzboxtr064.FritzboxTr064BindingProvider;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
-import org.openhab.core.library.items.SwitchItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
 import org.openhab.model.item.binding.BindingConfigParseException;
 import org.slf4j.Logger;

File: bundles/binding/org.openhab.binding.fritzboxtr064/src/main/java/org/openhab/binding/fritzboxtr064/internal/FritzboxTr064GenericBindingProvider.java
Patch:
@@ -11,8 +11,6 @@
 import org.openhab.binding.fritzboxtr064.FritzboxTr064BindingProvider;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.DimmerItem;
-import org.openhab.core.library.items.SwitchItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
 import org.openhab.model.item.binding.BindingConfigParseException;
 import org.slf4j.Logger;

File: bundles/binding/org.openhab.binding.stiebelheatpump.test/src/test/java/org/openhab/binding/stiebelheatpump/protocol/StiebelHeatPumpDataParserTest.java
Patch:
@@ -5,6 +5,7 @@
 
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.openhab.binding.stiebelheatpump.internal.ConfigParserTest;
 import org.openhab.binding.stiebelheatpump.internal.StiebelHeatPumpException;
@@ -78,6 +79,7 @@ public boolean matches(Request r) {
 	}
 
 	@Test
+	@Ignore
 	// request FC
 	public void testParseTime2() throws StiebelHeatPumpException {
 		List<Request> result = Requests.searchIn(configuration,
@@ -819,6 +821,7 @@ public boolean matches(Request r) {
 	}
 
 	@Test
+	@Ignore
 	// write new value for bitPosition use case
 	public void testwriteSettingsDomesticWaterProgram()
 			throws StiebelHeatPumpException {

File: bundles/binding/org.openhab.binding.stiebelheatpump.test/src/test/java/org/openhab/binding/stiebelheatpump/protocol/StiebelHeatPumpDataParserTest.java
Patch:
@@ -5,6 +5,7 @@
 
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.openhab.binding.stiebelheatpump.internal.ConfigParserTest;
 import org.openhab.binding.stiebelheatpump.internal.StiebelHeatPumpException;
@@ -78,6 +79,7 @@ public boolean matches(Request r) {
 	}
 
 	@Test
+	@Ignore
 	// request FC
 	public void testParseTime2() throws StiebelHeatPumpException {
 		List<Request> result = Requests.searchIn(configuration,
@@ -819,6 +821,7 @@ public boolean matches(Request r) {
 	}
 
 	@Test
+	@Ignore
 	// write new value for bitPosition use case
 	public void testwriteSettingsDomesticWaterProgram()
 			throws StiebelHeatPumpException {

File: bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java
Patch:
@@ -46,7 +46,7 @@ public LoginData(JsonNode root) throws IOException, InvalidDataException {
 			throw new InvalidDataException(
 					"Could not find SecurityToken in JSON data");
 		securityToken = data.toString();
-		logger.debug("myq securityToken: {}", securityToken);
+		logger.trace("myq securityToken: {}", securityToken);
 	}
 
 	/**

File: bundles/persistence/org.openhab.persistence.db4o/src/main/java/org/openhab/persistence/db4o/internal/Db4oPersistenceService.java
Patch:
@@ -115,10 +115,10 @@ public void store(Item item, String alias) {
 		
 		try {
 			db.store(historicItem);
-			logger.debug("Stored item state '{}' -> '{}'", new String[] {historicItem.getName(), historicItem.getState().toString() } );
+			logger.debug("Stored item state '{}' -> '{}'", historicItem.getName(), historicItem.getState().toString() );
 		} catch(Db4oException e) {
 			db.rollback();
-			logger.warn("Error storing state for item '{}' as '{}': {}", new String[] { item.getName(), alias, e.getMessage() });
+			logger.warn("Error storing state for item '{}' as '{}': {}", item.getName(), alias, e.getMessage() );
 		}
 	}
 

File: bundles/persistence/org.openhab.persistence.db4o/src/main/java/org/openhab/persistence/db4o/internal/Db4oPersistenceService.java
Patch:
@@ -115,10 +115,10 @@ public void store(Item item, String alias) {
 		
 		try {
 			db.store(historicItem);
-			logger.debug("Stored item state '{}' -> '{}'", new String[] {historicItem.getName(), historicItem.getState().toString() } );
+			logger.debug("Stored item state '{}' -> '{}'", historicItem.getName(), historicItem.getState().toString() );
 		} catch(Db4oException e) {
 			db.rollback();
-			logger.warn("Error storing state for item '{}' as '{}': {}", new String[] { item.getName(), alias, e.getMessage() });
+			logger.warn("Error storing state for item '{}' as '{}': {}", item.getName(), alias, e.getMessage() );
 		}
 	}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAlarmCommandClass.java
Patch:
@@ -236,6 +236,7 @@ public String getLabel() {
 	 * Class to hold alarm state
 	 * @author Chris Jackson
 	 */
+	@XStreamAlias("alarmState")
 	private class Alarm {
 		AlarmType alarmType;
 		boolean initialised = false;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAlarmCommandClass.java
Patch:
@@ -236,6 +236,7 @@ public String getLabel() {
 	 * Class to hold alarm state
 	 * @author Chris Jackson
 	 */
+	@XStreamAlias("alarmState")
 	private class Alarm {
 		AlarmType alarmType;
 		boolean initialised = false;

File: bundles/binding/org.openhab.binding.myq/src/main/java/org/openhab/binding/myq/internal/LoginData.java
Patch:
@@ -46,7 +46,7 @@ public LoginData(JsonNode root) throws IOException, InvalidDataException {
 			throw new InvalidDataException(
 					"Could not find SecurityToken in JSON data");
 		securityToken = data.toString();
-		logger.debug("myq securityToken: {}", securityToken);
+		logger.trace("myq securityToken: {}", securityToken);
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.energenie/src/main/java/org/openhab/binding/energenie/internal/EnergenieBinding.java
Patch:
@@ -223,7 +223,7 @@ private void sendOff(String pmsId, int pmsSocketId) {
 
 	private void sendLogOut(String pmsId) {
 		String pmsIp = pmsIpConfig.get(pmsId);
-		String url = "http://"+pmsIp;
+		String url = "http://"+pmsIp+"/login.html";
 
 		try {
 			HttpUtil.executeUrl("POST", url, timeout);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -52,6 +52,7 @@ public abstract class ZWaveCommandClass {
 	@XStreamOmitField
 	private ZWaveController controller;
 
+	@XStreamOmitField
 	private ZWaveEndpoint endpoint;
 	
 	private int version = 0;

File: bundles/binding/org.openhab.binding.energenie/src/main/java/org/openhab/binding/energenie/internal/EnergenieBinding.java
Patch:
@@ -223,7 +223,7 @@ private void sendOff(String pmsId, int pmsSocketId) {
 
 	private void sendLogOut(String pmsId) {
 		String pmsIp = pmsIpConfig.get(pmsId);
-		String url = "http://"+pmsIp;
+		String url = "http://"+pmsIp+"/login.html";
 
 		try {
 			HttpUtil.executeUrl("POST", url, timeout);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -52,6 +52,7 @@ public abstract class ZWaveCommandClass {
 	@XStreamOmitField
 	private ZWaveController controller;
 
+	@XStreamOmitField
 	private ZWaveEndpoint endpoint;
 	
 	private int version = 0;

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/ColorpickerRenderer.java
Patch:
@@ -16,6 +16,7 @@
 import org.openhab.core.types.State;
 import org.openhab.model.sitemap.Colorpicker;
 import org.openhab.model.sitemap.Widget;
+import org.openhab.ui.webapp.internal.servlet.BaseServlet;
 import org.openhab.ui.webapp.internal.servlet.WebAppServlet;
 import org.openhab.ui.webapp.render.RenderException;
 import org.openhab.ui.webapp.render.WidgetRenderer;
@@ -74,7 +75,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		snippet = StringUtils.replace(snippet, "%purelabel%", purelabel);
 		snippet = StringUtils.replace(snippet, "%state%", hexValue);
 		snippet = StringUtils.replace(snippet, "%frequency%", frequency);
-		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_NAME);
+		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_PATH);
 
 		String style = "";
 		String color = itemUIRegistry.getLabelColor(w);

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/PageRenderer.java
Patch:
@@ -74,7 +74,7 @@ public StringBuilder processPage(String id, String sitemap, String label, EList<
 			label = label.replace("[", "").replace("]", "");
 		}
 		snippet = StringUtils.replace(snippet, "%label%", label);
-		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_NAME);
+		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_PATH);
 		snippet = StringUtils.replace(snippet, "%sitemap%", sitemap);
 
 		String[] parts = snippet.split("%children%");

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SetpointRenderer.java
Patch:
@@ -88,7 +88,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		snippet = StringUtils.replace(snippet, "%newlowerstate%", newLowerState);
 		snippet = StringUtils.replace(snippet, "%newhigherstate%", newHigherState);
 		snippet = StringUtils.replace(snippet, "%label%", getLabel(w));
-		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_NAME);
+		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_PATH);
 		snippet = StringUtils.replace(snippet, "%minValue%", minValue.toString());
 		snippet = StringUtils.replace(snippet, "%maxValue%", maxValue.toString());
 		snippet = StringUtils.replace(snippet, "%step%", step.toString());

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SliderRenderer.java
Patch:
@@ -56,7 +56,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		snippet = StringUtils.replace(snippet, "%state%", itemUIRegistry.getState(s).toString());
 		snippet = StringUtils.replace(snippet, "%frequency%", frequency);
 		snippet = StringUtils.replace(snippet, "%switch%", s.isSwitchEnabled() ? "1" : "0");
-		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_NAME);
+		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_PATH);
 
 		// Process the color tags
 		snippet = processColor(w, snippet);

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SwitchRenderer.java
Patch:
@@ -77,7 +77,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		snippet = StringUtils.replace(snippet, "%icon%", escapeURLPath(itemUIRegistry.getIcon(w)));
 		snippet = StringUtils.replace(snippet, "%item%", w.getItem());
 		snippet = StringUtils.replace(snippet, "%label%", getLabel(w));
-		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_NAME);
+		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_PATH);
 		
 		State state = itemUIRegistry.getState(w);
 		

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/servlet/BaseServlet.java
Patch:
@@ -26,7 +26,7 @@
 public abstract class BaseServlet implements Servlet {
 	
 	/** the root path of this web application */
-	public static final String WEBAPP_ALIAS = "/";
+	public static final String WEBAPP_ALIAS = "/classicui";
 		
 	protected HttpService httpService;
 	protected ItemRegistry itemRegistry;

File: bundles/binding/org.openhab.binding.caldav-command/src/main/java/org/openhab/binding/caldav_command/internal/CalDavBinding.java
Patch:
@@ -195,7 +195,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 		}
 		
 		if (config.getType() != CalDavType.DISABLE) {
-			logger.error("can just use commands for type=DISABLE");
+			logger.trace("can just use commands for type=DISABLE");
 			return;
 		}
 		

File: bundles/binding/org.openhab.binding.caldav-command/src/main/java/org/openhab/binding/caldav_command/internal/CalDavBinding.java
Patch:
@@ -195,7 +195,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 		}
 		
 		if (config.getType() != CalDavType.DISABLE) {
-			logger.trace("can just use commands for type=DISABLE");
+			logger.error("can just use commands for type=DISABLE");
 			return;
 		}
 		

File: bundles/binding/org.openhab.binding.caldav-command/src/main/java/org/openhab/binding/caldav_command/internal/CalDavBinding.java
Patch:
@@ -195,7 +195,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 		}
 		
 		if (config.getType() != CalDavType.DISABLE) {
-			logger.trace("can just use commands for type=DISABLE");
+			logger.error("can just use commands for type=DISABLE");
 			return;
 		}
 		

File: bundles/binding/org.openhab.binding.caldav-command/src/main/java/org/openhab/binding/caldav_command/internal/CalDavBinding.java
Patch:
@@ -195,7 +195,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 		}
 		
 		if (config.getType() != CalDavType.DISABLE) {
-			logger.error("can just use commands for type=DISABLE");
+			logger.trace("can just use commands for type=DISABLE");
 			return;
 		}
 		

File: bundles/binding/org.openhab.binding.caldav-command/src/main/java/org/openhab/binding/caldav_command/internal/CalDavBinding.java
Patch:
@@ -195,7 +195,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 		}
 		
 		if (config.getType() != CalDavType.DISABLE) {
-			logger.error("can just use commands for type=DISABLE");
+			logger.trace("can just use commands for type=DISABLE");
 			return;
 		}
 		

File: bundles/binding/org.openhab.binding.caldav-command/src/main/java/org/openhab/binding/caldav_command/internal/CalDavBinding.java
Patch:
@@ -195,7 +195,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 		}
 		
 		if (config.getType() != CalDavType.DISABLE) {
-			logger.error("can just use commands for type=DISABLE");
+			logger.trace("can just use commands for type=DISABLE");
 			return;
 		}
 		

File: bundles/binding/org.openhab.binding.fht/src/main/java/org/openhab/binding/fht/internal/FHTBinding.java
Patch:
@@ -275,7 +275,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 				timeUpdatecronExpression = (String) config.get(KEY_UPDATE_CRON);
 				if (StringUtils.isEmpty(timeUpdatecronExpression)) {
 					setProperlyConfigured(false);
-					logger.debug(""Time update was configured but no cron expression");
+					logger.debug("Time update was configured but no cron expression");
 					throw new ConfigurationException(KEY_UPDATE_CRON,
 							"Time update was configured but no cron expression");
 				}

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusSlave.java
Patch:
@@ -116,7 +116,7 @@ public ModbusSlave(String slave) {
 	 */
 	void executeCommand(Command command, int readRegister,
 			int writeRegister) {
-		if (ModbusBindingProvider.TYPE_COIL.equals(getType()) || ModbusBindingProvider.TYPE_DISCRETE.equals(getType())) {
+		if (ModbusBindingProvider.TYPE_COIL.equals(getType())) {
 			setCoil(command, readRegister, writeRegister);
 		}
 		if (ModbusBindingProvider.TYPE_HOLDING.equals(getType())) {

File: bundles/binding/org.openhab.binding.lightwaverf.test/src/test/java/org/openhab/binding/lightwaverf/internal/LightwaverfConvertorTest.java
Patch:
@@ -10,7 +10,6 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.openhab.binding.lightwaverf.internal.command.LightwaveRFCommand;
 import org.openhab.binding.lightwaverf.internal.command.LightwaveRfDeviceRegistrationCommand;

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/LightwaveRfHeatPoller.java
Patch:
@@ -30,15 +30,15 @@ public class LightwaveRfHeatPoller {
 
 	private static final Logger logger = LoggerFactory
 			.getLogger(LightwaveRfHeatPoller.class);
-	private final LightwaveRFSender sender;
+	private final LightwaveRfWifiLink sender;
 	private final LightwaverfConvertor convertor;
 	private final Map<String, Integer> roomsToPoll = new HashMap<String, Integer>();
 	private final Map<String, String> itemNameToRoomMap = new HashMap<String, String>();
 	private final Map<String, ScheduledFuture<?>> tasksMap = new HashMap<String, ScheduledFuture<?>>();
 	private final ScheduledExecutorService executor = Executors
 			.newScheduledThreadPool(1);
 
-	public LightwaveRfHeatPoller(LightwaveRFSender sender,
+	public LightwaveRfHeatPoller(LightwaveRfWifiLink sender,
 			LightwaverfConvertor convertor) {
 		this.sender = sender;
 		this.convertor = convertor;
@@ -65,7 +65,7 @@ public void addRoomToPoll(String itemName, String roomId, int requestedPoll) {
 		} else {
 			logger.info(
 					"Request to set poll interval is larger than the current poll interval so ignored RoomId{{}], RequestedPoll[{}], CurrentPoll[{}]",
-					roomId, requestedPoll, currentPoll);
+					new Object[] {roomId, requestedPoll, currentPoll});
 		}
 
 		ScheduledFuture<?> currentFuture = tasksMap.remove(roomId);

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/command/LightwaveRfCommandOk.java
Patch:
@@ -26,7 +26,7 @@ public class LightwaveRfCommandOk extends AbstractLightwaveRfCommand implements
 		LightwaveRFCommand {
 
 	private static final Pattern REG_EXP = Pattern
-			.compile("([0-9]{1,3}),OK\\s*");
+			.compile(".*?([0-9]{1,3}),OK\\s*");
 
 	private final LightwaveRfMessageId messageId;
 

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/command/LightwaveRfHeatInfoRequest.java
Patch:
@@ -26,7 +26,7 @@ public class LightwaveRfHeatInfoRequest extends AbstractLightwaveRfCommand
 		implements LightwaveRfRoomMessage {
 
 	private static final Pattern REG_EXP = Pattern
-			.compile("([0-9]{1,3}),!R([0-9])F\\*r\\s*");
+			.compile(".*?([0-9]{1,3}),!R([0-9])F\\*r\\s*");
 	private static final String FUNCTION = "*r";
 
 	private final LightwaveRfMessageId messageId;

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/command/LightwaveRfOnOffCommand.java
Patch:
@@ -32,7 +32,7 @@ public class LightwaveRfOnOffCommand extends AbstractLightwaveRfCommand
 		implements LightwaveRfRoomDeviceMessage {
 
 	private static final Pattern REG_EXP = Pattern
-			.compile("(\\d{1,3}),!R(\\d)D(\\d)F([0,1]).*\\s*");
+			.compile(".*?(\\d{1,3}),!R(\\d)D(\\d)F([0,1]).*\\s*");
 	private static final String ON_FUNCTION = "1";
 	private static final String OFF_FUNCTION = "0";
 

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/command/LightwaveRfSetHeatingTemperatureCommand.java
Patch:
@@ -29,7 +29,7 @@ public class LightwaveRfSetHeatingTemperatureCommand extends
 		AbstractLightwaveRfCommand implements LightwaveRfRoomMessage {
 
 	private static final Pattern REG_EXP = Pattern
-			.compile("([0-9]{1,3}),!R([0-9])DhF\\*tP([0-9\\.]{1,5}).*\\s*");
+			.compile(".*?([0-9]{1,3}),!R([0-9])DhF\\*tP([0-9\\.]{1,5}).*\\s*");
 	private static final String FUNCTION = "*t";
 	private final LightwaveRfMessageId messageId;
 	private final String roomId;
@@ -54,7 +54,7 @@ public LightwaveRfSetHeatingTemperatureCommand(int messageId,
 	@Override
 	public String getLightwaveRfCommandString() {
 		return getMessageString(messageId, roomId, deviceId, FUNCTION,
-				String.valueOf(setTemperature));
+				setTemperature);
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/command/LightwaveRfVersionMessage.java
Patch:
@@ -27,7 +27,7 @@ public class LightwaveRfVersionMessage extends AbstractLightwaveRfCommand
 		implements LightwaveRFCommand {
 
 	private static final Pattern REG_EXP = Pattern
-			.compile("(\\d{1,3}).*V=\"(.*)\"\\s*");
+			.compile(".*?(\\d{1,3}).*V=\"(.*)\"\\s*");
 
 	private final LightwaveRfMessageId messageId;
 	private final String version;

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/exception/LightwaveRfMessageException.java
Patch:
@@ -9,6 +9,8 @@
 package org.openhab.binding.lightwaverf.internal.exception;
 
 /**
+ * This represents an exception parsing a LightwaveRf Message.
+ * 
  * @author Neil Renaud
  * @since 1.7.0
  */

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/io/ModbusTCPTransaction.java
Patch:
@@ -222,9 +222,6 @@ public void execute() throws ModbusIOException,
     } catch (InterruptedException ex) {
       throw new ModbusIOException("Thread acquiring lock was interrupted.");
     } finally {
-    	if (m_Connection != null && m_Connection.isConnected()) {
-        	m_Connection.close();
-    	}
       m_TransactionLock.release();
     }
   }//execute

File: bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/L_MessageTest.java
Patch:
@@ -28,10 +28,10 @@ public class L_MessageTest {
 
 	private static final String rawData = "L:BgVPngkSEAsLhBkJEhkLJQDAAAsLhwwJEhkRJwDKAAYO8ZIJEhAGBU+kCRIQCwxuRPEaGQMmAMcACwxuQwkSGQgnAM8ACwQd5t0SGQ0oAMsA";
 
-	private final Map<String, Device> testDevices = new HashMap<>();
+	private final Map<String, Device> testDevices = new HashMap<String, Device>();
 
 	private L_Message message;
-	private final List<Configuration> configurations = new ArrayList<>();
+	private final List<Configuration> configurations = new ArrayList<Configuration>();
 
 	@Before
 	public void setUp() {

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/BindingType.java
Patch:
@@ -15,5 +15,5 @@
 * @since 1.4.0
 */
 public enum BindingType {
-	VALVE, BATTERY , MODE, ACTUAL
+	VALVE, BATTERY , MODE, ACTUAL, CONNECTION_ERROR
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.mystromecopower/src/main/java/org/openhab/binding/mystromecopower/internal/MyStromEcoPowerBinding.java
Patch:
@@ -249,7 +249,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 										.startAt(dateTrigger).build();
 								this.scheduler.scheduleJob(job, trigger);
 							} else {
-								if (deviceId != this.masterDevice.id) {
+								if (this.masterDevice == null || (this.masterDevice != null && deviceId != this.masterDevice.id)) {
 									// This is not the master device.
 									if (!this.mystromClient.ChangeState(
 											deviceId, onOff)) {
@@ -262,7 +262,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 									}
 								} else {
 									// This is the mater device.
-									if (OnOffType.OFF.equals(command)) {
+									if (this.masterDevice != null && OnOffType.OFF.equals(command)) {
 										// Do a reset if try to set OFF the
 										// master device.
 										logger.debug("Restart master device");

File: bundles/binding/org.openhab.binding.mystromecopower/src/main/java/org/openhab/binding/mystromecopower/internal/MyStromEcoPowerBinding.java
Patch:
@@ -249,7 +249,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 										.startAt(dateTrigger).build();
 								this.scheduler.scheduleJob(job, trigger);
 							} else {
-								if (deviceId != this.masterDevice.id) {
+								if (this.masterDevice == null || (this.masterDevice != null && deviceId != this.masterDevice.id)) {
 									// This is not the master device.
 									if (!this.mystromClient.ChangeState(
 											deviceId, onOff)) {
@@ -262,7 +262,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 									}
 								} else {
 									// This is the mater device.
-									if (OnOffType.OFF.equals(command)) {
+									if (this.masterDevice != null && OnOffType.OFF.equals(command)) {
 										// Do a reset if try to set OFF the
 										// master device.
 										logger.debug("Restart master device");

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/BindingType.java
Patch:
@@ -15,5 +15,5 @@
 * @since 1.4.0
 */
 public enum BindingType {
-	VALVE, BATTERY , MODE, ACTUAL
+	VALVE, BATTERY , MODE, ACTUAL, CONNECTION_ERROR
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/utils/NumberUtils.java
Patch:
@@ -31,6 +31,8 @@ public static BigDecimal toBigDecimal(Object obj) {
 			return BigDecimal.valueOf((Long)obj);
 		} else if (obj instanceof Short ) {
 			return BigDecimal.valueOf((Short)obj);
+		} else if (obj instanceof Byte ) {
+			return BigDecimal.valueOf((Byte)obj);
 		} else if (obj instanceof Double ) {
 			return BigDecimal.valueOf((Double)obj);
 		} else if (obj instanceof Float ) {

File: bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/annotations/ItemMapping.java
Patch:
@@ -13,6 +13,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import org.openhab.binding.plex.internal.PlexProperty;
 import org.openhab.core.types.Command;
 
 /**
@@ -24,7 +25,7 @@
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ItemMapping {
-	String property();
+	PlexProperty property();
 	Class<? extends Command> type();
  	ItemPlayerStateMapping[] stateMappings() default {};
 }

File: bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/annotations/ItemPlayerStateMapping.java
Patch:
@@ -14,6 +14,7 @@
 import java.lang.annotation.Target;
 
 import org.openhab.binding.plex.internal.PlexPlayerState;
+import org.openhab.binding.plex.internal.PlexProperty;
 
 /**
  * Annotation to map Plex player states to OnOffType items
@@ -24,6 +25,6 @@
 @Target(ElementType.ANNOTATION_TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ItemPlayerStateMapping {
-	String property();
+	PlexProperty property();
 	PlexPlayerState state();
 }

File: bundles/binding/org.openhab.binding.plex/src/main/java/org/openhab/binding/plex/internal/communication/Server.java
Patch:
@@ -33,7 +33,7 @@ public class Server {
 	private String address;
 	
 	@XmlAttribute
-	private String port;
+	private String port = "80";
 	
 	@XmlAttribute
 	private String machineIdentifier;

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/EBusBinding.java
Patch:
@@ -27,6 +27,7 @@
 import org.openhab.binding.ebus.internal.utils.EBusUtils;
 import org.openhab.binding.ebus.internal.utils.StateUtils;
 import org.openhab.core.binding.AbstractBinding;
+import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;
 import org.osgi.service.cm.Configuration;
@@ -202,7 +203,7 @@ public void updated(Dictionary<String, ?> properties) throws ConfigurationExcept
 	 * @see org.openhab.core.binding.AbstractBinding#addBindingProvider(org.openhab.core.binding.BindingProvider)
 	 */
 	@Override
-	public void addBindingProvider(EBusBindingProvider provider) {
+	public void addBindingProvider(BindingProvider provider) {
 		super.addBindingProvider(provider);
 
 		if(commandProcessor == null) {
@@ -222,7 +223,7 @@ public void addBindingProvider(EBusBindingProvider provider) {
 	 * @see org.openhab.core.binding.AbstractBinding#removeBindingProvider(org.openhab.core.binding.BindingProvider)
 	 */
 	@Override
-	public void removeBindingProvider(EBusBindingProvider provider) {
+	public void removeBindingProvider(BindingProvider provider) {
 		super.removeBindingProvider(provider);
 		provider.removeBindingChangeListener(commandProcessor);
 	}

File: bundles/binding/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecBinding.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.commons.lang.StringUtils;
 import org.openhab.binding.exec.ExecBindingProvider;
 import org.openhab.core.binding.AbstractActiveBinding;
+import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.items.ContactItem;
 import org.openhab.core.library.items.NumberItem;
@@ -411,10 +412,9 @@ public void updated(Dictionary config) throws ConfigurationException {
 	}
 
 	@Override
-	public void addBindingProvider(ExecBindingProvider provider) {
+	public void addBindingProvider(BindingProvider provider) {
 		super.addBindingProvider(provider);
 		
-		
 		setProperlyConfigured(true);
 	}
 }

File: bundles/binding/org.openhab.binding.lcn/src/main/java/org/openhab/binding/lcn/internal/LcnBinding.java
Patch:
@@ -201,14 +201,14 @@ public boolean bindingsExists() {
 	
 	/** {@inheritDoc} */
 	@Override
-	public void addBindingProvider(P provider) {
+	public void addBindingProvider(BindingProvider provider) {
 		super.addBindingProvider(provider);
 		this.activeService.start();
 	}
 
 	/** {@inheritDoc} */
 	@Override
-	public void removeBindingProvider(P provider) {
+	public void removeBindingProvider(BindingProvider provider) {
 		super.removeBindingProvider(provider);
 		// If there are no binding providers left, we can stop the service
 		if (this.providers.size() == 0) {

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/binding/AbstractActiveBinding.java
Patch:
@@ -37,7 +37,7 @@ public abstract class AbstractActiveBinding<P extends BindingProvider> extends A
 	 * 
 	 * @param provider the new {@link BindingProvider} to add
 	 */
-	public void addBindingProvider(P provider) {
+	public void addBindingProvider(BindingProvider provider) {
 		super.addBindingProvider(provider);
 		activeService.activate();
 	}
@@ -48,7 +48,7 @@ public void addBindingProvider(P provider) {
 	 * 
 	 * @param provider the {@link BindingProvider} to remove
 	 */
-	public void removeBindingProvider(P provider) {
+	public void removeBindingProvider(BindingProvider provider) {
 		super.removeBindingProvider(provider);
 		
 		// if there are no binding providers there is no need to run this 

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/utils/NumberUtils.java
Patch:
@@ -31,6 +31,8 @@ public static BigDecimal toBigDecimal(Object obj) {
 			return BigDecimal.valueOf((Long)obj);
 		} else if (obj instanceof Short ) {
 			return BigDecimal.valueOf((Short)obj);
+		} else if (obj instanceof Byte ) {
+			return BigDecimal.valueOf((Byte)obj);
 		} else if (obj instanceof Double ) {
 			return BigDecimal.valueOf((Double)obj);
 		} else if (obj instanceof Float ) {

File: bundles/binding/org.openhab.binding.souliss/src/main/java/org/openhab/binding/souliss/internal/network/typicals/Constants.java
Patch:
@@ -75,6 +75,7 @@ public class Constants {
 	public static final short Souliss_T55_VoltageSensor = 0x55;
 	public static final short Souliss_T56_CurrentSensor = 0x56;
 	public static final short Souliss_T57_PowerSensor = 0x57;
+	public static final short Souliss_T58_PressureSensor = 0x58;
 
 	// customized (remote) AirCon commands
 	public static final int Souliss_T_IrCom_AirCon_Pow_On = 0x8FFE;
@@ -282,4 +283,4 @@ public class Constants {
 	public static final String Openhab_RGB_TYPE = "HSBType";
 
 	
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/utils/UnitUtils.java
Patch:
@@ -132,6 +132,9 @@ public static double getHumidex(double temp, int humidity) {
 	 * Returns the wind direction based on degree.
 	 */
 	public static String getWindDirection(Integer degree) {
+		if (degree < 0 || degree > 360) {
+			return null;
+		}
 		String[] directions = new String[] { "N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW",
 				"W", "WNW", "NW", "NNW" };
 

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/utils/UnitUtils.java
Patch:
@@ -132,6 +132,9 @@ public static double getHumidex(double temp, int humidity) {
 	 * Returns the wind direction based on degree.
 	 */
 	public static String getWindDirection(Integer degree) {
+		if (degree < 0 || degree > 360) {
+			return null;
+		}
 		String[] directions = new String[] { "N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW",
 				"W", "WNW", "NW", "NNW" };
 

File: bundles/binding/org.openhab.binding.lightwaverf.test/src/test/java/org/openhab/binding/lightwaverf/internal/LightwaverfConvertorTest.java
Patch:
@@ -10,7 +10,6 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.openhab.binding.lightwaverf.internal.command.LightwaveRFCommand;
 import org.openhab.binding.lightwaverf.internal.command.LightwaveRfDeviceRegistrationCommand;

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/LightwaveRfHeatPoller.java
Patch:
@@ -30,15 +30,15 @@ public class LightwaveRfHeatPoller {
 
 	private static final Logger logger = LoggerFactory
 			.getLogger(LightwaveRfHeatPoller.class);
-	private final LightwaveRFSender sender;
+	private final LightwaveRfWifiLink sender;
 	private final LightwaverfConvertor convertor;
 	private final Map<String, Integer> roomsToPoll = new HashMap<String, Integer>();
 	private final Map<String, String> itemNameToRoomMap = new HashMap<String, String>();
 	private final Map<String, ScheduledFuture<?>> tasksMap = new HashMap<String, ScheduledFuture<?>>();
 	private final ScheduledExecutorService executor = Executors
 			.newScheduledThreadPool(1);
 
-	public LightwaveRfHeatPoller(LightwaveRFSender sender,
+	public LightwaveRfHeatPoller(LightwaveRfWifiLink sender,
 			LightwaverfConvertor convertor) {
 		this.sender = sender;
 		this.convertor = convertor;
@@ -65,7 +65,7 @@ public void addRoomToPoll(String itemName, String roomId, int requestedPoll) {
 		} else {
 			logger.info(
 					"Request to set poll interval is larger than the current poll interval so ignored RoomId{{}], RequestedPoll[{}], CurrentPoll[{}]",
-					roomId, requestedPoll, currentPoll);
+					new Object[] {roomId, requestedPoll, currentPoll});
 		}
 
 		ScheduledFuture<?> currentFuture = tasksMap.remove(roomId);

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/command/LightwaveRfCommandOk.java
Patch:
@@ -26,7 +26,7 @@ public class LightwaveRfCommandOk extends AbstractLightwaveRfCommand implements
 		LightwaveRFCommand {
 
 	private static final Pattern REG_EXP = Pattern
-			.compile("([0-9]{1,3}),OK\\s*");
+			.compile(".*?([0-9]{1,3}),OK\\s*");
 
 	private final LightwaveRfMessageId messageId;
 

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/command/LightwaveRfHeatInfoRequest.java
Patch:
@@ -26,7 +26,7 @@ public class LightwaveRfHeatInfoRequest extends AbstractLightwaveRfCommand
 		implements LightwaveRfRoomMessage {
 
 	private static final Pattern REG_EXP = Pattern
-			.compile("([0-9]{1,3}),!R([0-9])F\\*r\\s*");
+			.compile(".*?([0-9]{1,3}),!R([0-9])F\\*r\\s*");
 	private static final String FUNCTION = "*r";
 
 	private final LightwaveRfMessageId messageId;

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/command/LightwaveRfOnOffCommand.java
Patch:
@@ -32,7 +32,7 @@ public class LightwaveRfOnOffCommand extends AbstractLightwaveRfCommand
 		implements LightwaveRfRoomDeviceMessage {
 
 	private static final Pattern REG_EXP = Pattern
-			.compile("(\\d{1,3}),!R(\\d)D(\\d)F([0,1]).*\\s*");
+			.compile(".*?(\\d{1,3}),!R(\\d)D(\\d)F([0,1]).*\\s*");
 	private static final String ON_FUNCTION = "1";
 	private static final String OFF_FUNCTION = "0";
 

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/command/LightwaveRfSetHeatingTemperatureCommand.java
Patch:
@@ -29,7 +29,7 @@ public class LightwaveRfSetHeatingTemperatureCommand extends
 		AbstractLightwaveRfCommand implements LightwaveRfRoomMessage {
 
 	private static final Pattern REG_EXP = Pattern
-			.compile("([0-9]{1,3}),!R([0-9])DhF\\*tP([0-9\\.]{1,5}).*\\s*");
+			.compile(".*?([0-9]{1,3}),!R([0-9])DhF\\*tP([0-9\\.]{1,5}).*\\s*");
 	private static final String FUNCTION = "*t";
 	private final LightwaveRfMessageId messageId;
 	private final String roomId;
@@ -54,7 +54,7 @@ public LightwaveRfSetHeatingTemperatureCommand(int messageId,
 	@Override
 	public String getLightwaveRfCommandString() {
 		return getMessageString(messageId, roomId, deviceId, FUNCTION,
-				String.valueOf(setTemperature));
+				setTemperature);
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/command/LightwaveRfVersionMessage.java
Patch:
@@ -27,7 +27,7 @@ public class LightwaveRfVersionMessage extends AbstractLightwaveRfCommand
 		implements LightwaveRFCommand {
 
 	private static final Pattern REG_EXP = Pattern
-			.compile("(\\d{1,3}).*V=\"(.*)\"\\s*");
+			.compile(".*?(\\d{1,3}).*V=\"(.*)\"\\s*");
 
 	private final LightwaveRfMessageId messageId;
 	private final String version;

File: bundles/binding/org.openhab.binding.lightwaverf/src/main/java/org/openhab/binding/lightwaverf/internal/exception/LightwaveRfMessageException.java
Patch:
@@ -9,6 +9,8 @@
 package org.openhab.binding.lightwaverf.internal.exception;
 
 /**
+ * This represents an exception parsing a LightwaveRf Message.
+ * 
  * @author Neil Renaud
  * @since 1.7.0
  */

File: bundles/binding/org.openhab.binding.lcn/src/main/java/org/openhab/binding/lcn/connection/ConnectionSettings.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * Settings for a connection to LCN-PCHK.
  * 
- * @author Tobias J�ttner
+ * @author Tobias Jüttner
  */
 public class ConnectionSettings {
 	
@@ -150,6 +150,7 @@ public long getTimeout() {
 	 * @return the connection settings on success or null
 	 */
 	public static ConnectionSettings tryParse(Dictionary<String, ?> config, int counter) {
+	    if(config==null) return null;
 		String id = (String)config.get("id" + (counter + 1));
 		id = id == null ? "" : id.trim();
 		String addressWithOptPort = (String)config.get("address" + (counter + 1));

File: bundles/binding/org.openhab.binding.lcn/src/main/java/org/openhab/binding/lcn/connection/ConnectionSettings.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * Settings for a connection to LCN-PCHK.
  * 
- * @author Tobias J�ttner
+ * @author Tobias Jüttner
  */
 public class ConnectionSettings {
 	
@@ -150,6 +150,7 @@ public long getTimeout() {
 	 * @return the connection settings on success or null
 	 */
 	public static ConnectionSettings tryParse(Dictionary<String, ?> config, int counter) {
+	    if(config==null) return null;
 		String id = (String)config.get("id" + (counter + 1));
 		id = id == null ? "" : id.trim();
 		String addressWithOptPort = (String)config.get("address" + (counter + 1));

File: bundles/binding/org.openhab.binding.souliss/src/main/java/org/openhab/binding/souliss/internal/network/typicals/Constants.java
Patch:
@@ -75,6 +75,7 @@ public class Constants {
 	public static final short Souliss_T55_VoltageSensor = 0x55;
 	public static final short Souliss_T56_CurrentSensor = 0x56;
 	public static final short Souliss_T57_PowerSensor = 0x57;
+	public static final short Souliss_T58_PressureSensor = 0x58;
 
 	// customized (remote) AirCon commands
 	public static final int Souliss_T_IrCom_AirCon_Pow_On = 0x8FFE;
@@ -282,4 +283,4 @@ public class Constants {
 	public static final String Openhab_RGB_TYPE = "HSBType";
 
 	
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java
Patch:
@@ -101,7 +101,7 @@ private void handleMultiCommandEncapResponse(
 					zwaveCommandClass = ZWaveCommandClass.getInstance(commandClass.getKey(), getNode(), this.getController());
 	
 					if (zwaveCommandClass != null) {
-						logger.debug("NODE {}: Adding command class %s", getNode().getNodeId(), commandClass.getLabel());
+						logger.debug("NODE {}: Adding command class {}", getNode().getNodeId(), commandClass.getLabel());
 						getNode().addCommandClass(zwaveCommandClass);
 					}
 				}

File: bundles/binding/org.openhab.binding.openenergymonitor/src/main/java/org/openhab/binding/openenergymonitor/internal/OpenEnergyMonitorBinding.java
Patch:
@@ -68,7 +68,9 @@ public void activate() {
 
 	public void deactivate() {
 		logger.debug("Deactivate");
-		messageListener.setInterrupted(true);
+		if(messageListener!=null) {
+		    messageListener.setInterrupted(true);
+		}
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.openenergymonitor/src/main/java/org/openhab/binding/openenergymonitor/internal/OpenEnergyMonitorBinding.java
Patch:
@@ -68,7 +68,9 @@ public void activate() {
 
 	public void deactivate() {
 		logger.debug("Deactivate");
-		messageListener.setInterrupted(true);
+		if(messageListener!=null) {
+		    messageListener.setInterrupted(true);
+		}
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttGenericBindingProvider.java
Patch:
@@ -56,7 +56,7 @@ public void processBindingConfiguration(String context, Item item,
 					"Missing mqtt binding configuration for item " + itemName);
 		}
 
-		final MqttItemConfig itemConfig = new MqttItemConfig(itemName, bindingConfig);
+		final MqttItemConfig itemConfig = new MqttItemConfig(item, bindingConfig);
 
 		// register all message consumers
 		for (MqttMessageSubscriber subscriber : itemConfig.getMessageSubscribers()) {

File: bundles/action/org.openhab.action.telegram/src/main/java/org/openhab/action/telegram/internal/Telegram.java
Patch:
@@ -67,6 +67,7 @@ static public boolean sendTelegram(@ParamDoc(name = "group") String group,
 		HttpClient client = new HttpClient();
 
 		PostMethod postMethod = new PostMethod(url);
+		postMethod.getParams().setContentCharset("UTF-8");
 		postMethod.getParams().setSoTimeout(HTTP_TIMEOUT);
 		postMethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,
 				new DefaultHttpMethodRetryHandler(3, false));

File: bundles/action/org.openhab.action.telegram/src/main/java/org/openhab/action/telegram/internal/Telegram.java
Patch:
@@ -67,6 +67,7 @@ static public boolean sendTelegram(@ParamDoc(name = "group") String group,
 		HttpClient client = new HttpClient();
 
 		PostMethod postMethod = new PostMethod(url);
+		postMethod.getParams().setContentCharset("UTF-8");
 		postMethod.getParams().setSoTimeout(HTTP_TIMEOUT);
 		postMethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,
 				new DefaultHttpMethodRetryHandler(3, false));

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcConfiguration.java
Patch:
@@ -166,7 +166,8 @@ public void updateConfig(Map<Object, Object> configuration) {
 
         String np = (String) configuration.get("tableNamePrefix");
         if (StringUtils.isNotBlank(np)) {
-            dBDAO.databaseProps.setProperty("tableNamePrefix", np);
+	    tableNamePrefix = np;
+	    logger.debug("JDBC::updateConfig: tableNamePrefix={}", tableNamePrefix);
         }
 
         String dd = (String) configuration.get("numberDecimalcount");
@@ -327,4 +328,4 @@ public boolean isDriverAvailable() {
         return driverAvailable;
     }
 
-}
\ No newline at end of file
+}

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcConfiguration.java
Patch:
@@ -166,7 +166,8 @@ public void updateConfig(Map<Object, Object> configuration) {
 
         String np = (String) configuration.get("tableNamePrefix");
         if (StringUtils.isNotBlank(np)) {
-            dBDAO.databaseProps.setProperty("tableNamePrefix", np);
+	    tableNamePrefix = np;
+	    logger.debug("JDBC::updateConfig: tableNamePrefix={}", tableNamePrefix);
         }
 
         String dd = (String) configuration.get("numberDecimalcount");
@@ -327,4 +328,4 @@ public boolean isDriverAvailable() {
         return driverAvailable;
     }
 
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttGenericBindingProvider.java
Patch:
@@ -56,7 +56,7 @@ public void processBindingConfiguration(String context, Item item,
 					"Missing mqtt binding configuration for item " + itemName);
 		}
 
-		final MqttItemConfig itemConfig = new MqttItemConfig(itemName, bindingConfig);
+		final MqttItemConfig itemConfig = new MqttItemConfig(item, bindingConfig);
 
 		// register all message consumers
 		for (MqttMessageSubscriber subscriber : itemConfig.getMessageSubscribers()) {

File: bundles/binding/org.openhab.binding.ucprelayboard/src/main/java/org/openhab/binding/ucprelayboard/internal/DowCRC.java
Patch:
@@ -36,7 +36,7 @@ public class DowCRC {
 	public static byte compute(byte[] tab) {
 		int result = 0;
 		for (byte value : tab) {
-			result = crc8[ (int)value ^ result];
+			result = crc8[(value ^ result) & 0xFF];
 		}
 		return (byte) result;
 	}

File: bundles/binding/org.openhab.binding.ucprelayboard/src/main/java/org/openhab/binding/ucprelayboard/internal/DowCRC.java
Patch:
@@ -36,7 +36,7 @@ public class DowCRC {
 	public static byte compute(byte[] tab) {
 		int result = 0;
 		for (byte value : tab) {
-			result = crc8[ (int)value ^ result];
+			result = crc8[(value ^ result) & 0xFF];
 		}
 		return (byte) result;
 	}

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcBaseDAO.java
Patch:
@@ -41,7 +41,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 public class JdbcBaseDAO {
     private static final Logger logger = LoggerFactory.getLogger(JdbcBaseDAO.class);

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcDerbyDAO.java
Patch:
@@ -25,7 +25,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 /**
  * Extended Database Configuration class. Class represents

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcH2DAO.java
Patch:
@@ -14,7 +14,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 /**
  * Extended Database Configuration class. Class represents

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcHsqldbDAO.java
Patch:
@@ -15,7 +15,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 /**
  * Extended Database Configuration class. Class represents

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcMysqlDAO.java
Patch:
@@ -11,7 +11,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 /**
  * Extended Database Configuration class. Class represents

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcPostgresqlDAO.java
Patch:
@@ -25,7 +25,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 /**
  * Extended Database Configuration class. Class represents

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcSqliteDAO.java
Patch:
@@ -15,7 +15,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 /**
  * Extended Database Configuration class. Class represents

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcConfiguration.java
Patch:
@@ -258,7 +258,7 @@ else if (serviceName.equals("mysql"))
             else if (serviceName.equals("postgresql"))
                 warn += "\tPostgreSQL:version >= 9.4-1201-jdbc41 from    http://mvnrepository.com/artifact/org.postgresql/postgresql\n";
             else if (serviceName.equals("sqlite"))
-                warn += "\tSQLite:    version >= 3.8.11.1 from           http://mvnrepository.com/artifact/org.xerial/sqlite-jdbc\n";
+                warn += "\tSQLite:    version >= 3.8.11.2 from           http://mvnrepository.com/artifact/org.xerial/sqlite-jdbc\n";
             logger.warn(warn, serviceName);
         }
 

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcMapper.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.knowm.yank.Yank;
 import org.openhab.core.items.Item;
 import org.openhab.core.persistence.FilterCriteria;
 import org.openhab.core.persistence.HistoricItem;
@@ -13,8 +14,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
-
 public class JdbcMapper {
     static final Logger logger = LoggerFactory.getLogger(JdbcMapper.class);
 

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcBaseDAO.java
Patch:
@@ -41,7 +41,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 public class JdbcBaseDAO {
     private static final Logger logger = LoggerFactory.getLogger(JdbcBaseDAO.class);

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcDerbyDAO.java
Patch:
@@ -25,7 +25,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 /**
  * Extended Database Configuration class. Class represents

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcH2DAO.java
Patch:
@@ -14,7 +14,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 /**
  * Extended Database Configuration class. Class represents

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcHsqldbDAO.java
Patch:
@@ -15,7 +15,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 /**
  * Extended Database Configuration class. Class represents

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcMysqlDAO.java
Patch:
@@ -11,7 +11,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 /**
  * Extended Database Configuration class. Class represents

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcPostgresqlDAO.java
Patch:
@@ -25,7 +25,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 /**
  * Extended Database Configuration class. Class represents

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/db/JdbcSqliteDAO.java
Patch:
@@ -15,7 +15,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
+import org.knowm.yank.Yank;
 
 /**
  * Extended Database Configuration class. Class represents

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcConfiguration.java
Patch:
@@ -258,7 +258,7 @@ else if (serviceName.equals("mysql"))
             else if (serviceName.equals("postgresql"))
                 warn += "\tPostgreSQL:version >= 9.4-1201-jdbc41 from    http://mvnrepository.com/artifact/org.postgresql/postgresql\n";
             else if (serviceName.equals("sqlite"))
-                warn += "\tSQLite:    version >= 3.8.11.1 from           http://mvnrepository.com/artifact/org.xerial/sqlite-jdbc\n";
+                warn += "\tSQLite:    version >= 3.8.11.2 from           http://mvnrepository.com/artifact/org.xerial/sqlite-jdbc\n";
             logger.warn(warn, serviceName);
         }
 

File: bundles/persistence/org.openhab.persistence.jdbc/java/org/openhab/persistence/jdbc/internal/JdbcMapper.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.knowm.yank.Yank;
 import org.openhab.core.items.Item;
 import org.openhab.core.persistence.FilterCriteria;
 import org.openhab.core.persistence.HistoricItem;
@@ -13,8 +14,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.xeiam.yank.Yank;
-
 public class JdbcMapper {
     static final Logger logger = LoggerFactory.getLogger(JdbcMapper.class);
 

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelDataParser.java
Patch:
@@ -71,9 +71,9 @@ public static Map<AnelCommandType, State> parseData(byte[] data, AnelState state
 		final String string = new String(data);
 		final String[] arr = string.split(":");
 
-		if (arr.length != 26 && arr.length != 16)
-			throw new IllegalArgumentException("Data with 16 or 26 values expected but " + arr.length + " received: "
-					+ string);
+		if (arr.length != 28 && arr.length != 26 && arr.length != 16)
+			throw new IllegalArgumentException("Data with 16, 26, or 28 values expected but " + arr.length
+					+ " received: " + string);
 		if (!arr[0].equals("NET-PwrCtrl"))
 			throw new IllegalArgumentException("Data must start with 'NET-PwrCtrl' but it didn't: " + arr[0]);
 		if (!state.host.equals(arr[2]) && !state.host.equalsIgnoreCase(arr[1].trim()))

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelDataParser.java
Patch:
@@ -71,9 +71,9 @@ public static Map<AnelCommandType, State> parseData(byte[] data, AnelState state
 		final String string = new String(data);
 		final String[] arr = string.split(":");
 
-		if (arr.length != 26 && arr.length != 16)
-			throw new IllegalArgumentException("Data with 16 or 26 values expected but " + arr.length + " received: "
-					+ string);
+		if (arr.length != 28 && arr.length != 26 && arr.length != 16)
+			throw new IllegalArgumentException("Data with 16, 26, or 28 values expected but " + arr.length
+					+ " received: " + string);
 		if (!arr[0].equals("NET-PwrCtrl"))
 			throw new IllegalArgumentException("Data must start with 'NET-PwrCtrl' but it didn't: " + arr[0]);
 		if (!state.host.equals(arr[2]) && !state.host.equalsIgnoreCase(arr[1].trim()))

File: bundles/core/org.openhab.core.library.test/src/test/java/org/openhab/core/library/types/LocationItemTest.java
Patch:
@@ -34,10 +34,10 @@ public void testDistance() {
 		LocationItem locationBerlin = new LocationItem("berlin");
 		locationBerlin.setState(pointBerlin);
 		
-		DecimalType distance = locationParis.distanceFrom(pointParis);
+		DecimalType distance = locationParis.distanceFrom(locationParis);
 		assertEquals(distance.intValue(),0);
 		
-		double parisBerlin = locationParis.distanceFrom(pointBerlin).doubleValue();
+		double parisBerlin = locationParis.distanceFrom(locationBerlin).doubleValue();
 		assertEquals(parisBerlin,878400,50);	
 		
 		double gravParis = pointParis.getGravity().doubleValue();

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAlarmCommandClass.java
Patch:
@@ -179,7 +179,8 @@ public enum AlarmType {
 		POWER_MANAGEMENT(8, "Power Management"),
 		SYSTEM(9, "System"),
 		EMERGENCY(10, "Emergency"),
-		COUNT(11, "Count");
+		COUNT(11, "Count"),
+		UNKNOWN12(12, "Unknown12");
 
 		/**
 		 * A mapping between the integer code and its corresponding Alarm type

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAlarmCommandClass.java
Patch:
@@ -179,7 +179,8 @@ public enum AlarmType {
 		POWER_MANAGEMENT(8, "Power Management"),
 		SYSTEM(9, "System"),
 		EMERGENCY(10, "Emergency"),
-		COUNT(11, "Count");
+		COUNT(11, "Count"),
+		UNKNOWN12(12, "Unknown12");
 
 		/**
 		 * A mapping between the integer code and its corresponding Alarm type

File: bundles/core/org.openhab.core.library.test/src/test/java/org/openhab/core/library/types/LocationItemTest.java
Patch:
@@ -34,10 +34,10 @@ public void testDistance() {
 		LocationItem locationBerlin = new LocationItem("berlin");
 		locationBerlin.setState(pointBerlin);
 		
-		DecimalType distance = locationParis.distanceFrom(pointParis);
+		DecimalType distance = locationParis.distanceFrom(locationParis);
 		assertEquals(distance.intValue(),0);
 		
-		double parisBerlin = locationParis.distanceFrom(pointBerlin).doubleValue();
+		double parisBerlin = locationParis.distanceFrom(locationBerlin).doubleValue();
 		assertEquals(parisBerlin,878400,50);	
 		
 		double gravParis = pointParis.getGravity().doubleValue();

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/config/MiosBindingConfig.java
Patch:
@@ -72,7 +72,7 @@
  * @since 1.6.0
  */
 public abstract class MiosBindingConfig implements BindingConfig {
-	private static Pattern TRANSFORM_PATTERN = Pattern.compile("(?<transform>.+)[(]{1}?(?<param>.*)[)]{1}");
+	private static Pattern TRANSFORM_PATTERN = Pattern.compile("(?<transform>[a-zA-Z]+)[(]{1}?(?<param>.*)[)]{1}");
 
 	protected static final Logger logger = LoggerFactory.getLogger(MiosBindingConfig.class);
 

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/config/MiosBindingConfig.java
Patch:
@@ -72,7 +72,7 @@
  * @since 1.6.0
  */
 public abstract class MiosBindingConfig implements BindingConfig {
-	private static Pattern TRANSFORM_PATTERN = Pattern.compile("(?<transform>.+)[(]{1}?(?<param>.*)[)]{1}");
+	private static Pattern TRANSFORM_PATTERN = Pattern.compile("(?<transform>[a-zA-Z]+)[(]{1}?(?<param>.*)[)]{1}");
 
 	protected static final Logger logger = LoggerFactory.getLogger(MiosBindingConfig.class);
 

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/ModemDBBuilder.java
Patch:
@@ -32,7 +32,7 @@ public class ModemDBBuilder implements MsgListener, Runnable {
 	private boolean	m_isComplete 	= false;
 	private Port	m_port 			= null;
 	private	Thread	m_writeThread	= null;
-	private int		m_timeoutMillis = 60000;
+	private int		m_timeoutMillis = 120000;
 
 	public ModemDBBuilder(Port port) {
 		m_port = port;

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/Driver.java
Patch:
@@ -34,7 +34,7 @@ public class Driver {
 	private DriverListener m_listener = null; // single listener for notifications
 	private HashMap<InsteonAddress, ModemDBEntry> m_modemDBEntries = new HashMap<InsteonAddress, ModemDBEntry>();
 	private ReentrantLock m_modemDBEntriesLock = new ReentrantLock();
-	private int	m_modemDBRetryTimeout	= 30000;	// in milliseconds
+	private int	m_modemDBRetryTimeout	= 120000;	// in milliseconds
 
 	public void setDriverListener(DriverListener listener) {
 		m_listener = listener;

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/hub/HubIOStream.java
Patch:
@@ -106,6 +106,9 @@ private synchronized String bufferStatus() throws IOException {
 		String[] parts = result.split("<BS>");
 		if (parts.length > 1) {
 			result = parts[1].split("</BS>")[0].trim();
+		} else if (result.startsWith("401 Unauthorized:")) {
+			logger.error("bad username or password. See bottom label of hub for correct login");
+			throw new IOException("login credentials incorrect");
 		} else {
 			logger.error("got invalid buffer status: {}", result);
 			throw new IOException("malformed bufferstatus.xml");

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/ModemDBBuilder.java
Patch:
@@ -32,7 +32,7 @@ public class ModemDBBuilder implements MsgListener, Runnable {
 	private boolean	m_isComplete 	= false;
 	private Port	m_port 			= null;
 	private	Thread	m_writeThread	= null;
-	private int		m_timeoutMillis = 60000;
+	private int		m_timeoutMillis = 120000;
 
 	public ModemDBBuilder(Port port) {
 		m_port = port;

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/Driver.java
Patch:
@@ -34,7 +34,7 @@ public class Driver {
 	private DriverListener m_listener = null; // single listener for notifications
 	private HashMap<InsteonAddress, ModemDBEntry> m_modemDBEntries = new HashMap<InsteonAddress, ModemDBEntry>();
 	private ReentrantLock m_modemDBEntriesLock = new ReentrantLock();
-	private int	m_modemDBRetryTimeout	= 30000;	// in milliseconds
+	private int	m_modemDBRetryTimeout	= 120000;	// in milliseconds
 
 	public void setDriverListener(DriverListener listener) {
 		m_listener = listener;

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/hub/HubIOStream.java
Patch:
@@ -106,6 +106,9 @@ private synchronized String bufferStatus() throws IOException {
 		String[] parts = result.split("<BS>");
 		if (parts.length > 1) {
 			result = parts[1].split("</BS>")[0].trim();
+		} else if (result.startsWith("401 Unauthorized:")) {
+			logger.error("bad username or password. See bottom label of hub for correct login");
+			throw new IOException("login credentials incorrect");
 		} else {
 			logger.error("got invalid buffer status: {}", result);
 			throw new IOException("malformed bufferstatus.xml");

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/RefreshTokenRequest.java
Patch:
@@ -54,6 +54,9 @@ public RefreshTokenResponse execute() {
 					this.clientId, this.clientSecret);
 
 			json = executeQuery(content);
+			if (json == null) {
+				return null;
+			}
 
 			final RefreshTokenResponse response = JSON.readValue(json,
 					RefreshTokenResponse.class);

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/RefreshTokenRequest.java
Patch:
@@ -54,6 +54,9 @@ public RefreshTokenResponse execute() {
 					this.clientId, this.clientSecret);
 
 			json = executeQuery(content);
+			if (json == null) {
+				return null;
+			}
 
 			final RefreshTokenResponse response = JSON.readValue(json,
 					RefreshTokenResponse.class);

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/ColorpickerRenderer.java
Patch:
@@ -16,6 +16,7 @@
 import org.openhab.core.types.State;
 import org.openhab.model.sitemap.Colorpicker;
 import org.openhab.model.sitemap.Widget;
+import org.openhab.ui.webapp.internal.servlet.BaseServlet;
 import org.openhab.ui.webapp.internal.servlet.WebAppServlet;
 import org.openhab.ui.webapp.render.RenderException;
 import org.openhab.ui.webapp.render.WidgetRenderer;
@@ -74,7 +75,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		snippet = StringUtils.replace(snippet, "%purelabel%", purelabel);
 		snippet = StringUtils.replace(snippet, "%state%", hexValue);
 		snippet = StringUtils.replace(snippet, "%frequency%", frequency);
-		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_NAME);
+		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_PATH);
 
 		String style = "";
 		String color = itemUIRegistry.getLabelColor(w);

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/PageRenderer.java
Patch:
@@ -74,7 +74,7 @@ public StringBuilder processPage(String id, String sitemap, String label, EList<
 			label = label.replace("[", "").replace("]", "");
 		}
 		snippet = StringUtils.replace(snippet, "%label%", label);
-		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_NAME);
+		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_PATH);
 		snippet = StringUtils.replace(snippet, "%sitemap%", sitemap);
 
 		String[] parts = snippet.split("%children%");

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SetpointRenderer.java
Patch:
@@ -88,7 +88,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		snippet = StringUtils.replace(snippet, "%newlowerstate%", newLowerState);
 		snippet = StringUtils.replace(snippet, "%newhigherstate%", newHigherState);
 		snippet = StringUtils.replace(snippet, "%label%", getLabel(w));
-		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_NAME);
+		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_PATH);
 		snippet = StringUtils.replace(snippet, "%minValue%", minValue.toString());
 		snippet = StringUtils.replace(snippet, "%maxValue%", maxValue.toString());
 		snippet = StringUtils.replace(snippet, "%step%", step.toString());

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SliderRenderer.java
Patch:
@@ -56,7 +56,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		snippet = StringUtils.replace(snippet, "%state%", itemUIRegistry.getState(s).toString());
 		snippet = StringUtils.replace(snippet, "%frequency%", frequency);
 		snippet = StringUtils.replace(snippet, "%switch%", s.isSwitchEnabled() ? "1" : "0");
-		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_NAME);
+		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_PATH);
 
 		// Process the color tags
 		snippet = processColor(w, snippet);

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SwitchRenderer.java
Patch:
@@ -77,7 +77,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		snippet = StringUtils.replace(snippet, "%icon%", escapeURLPath(itemUIRegistry.getIcon(w)));
 		snippet = StringUtils.replace(snippet, "%item%", w.getItem());
 		snippet = StringUtils.replace(snippet, "%label%", getLabel(w));
-		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_NAME);
+		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_PATH);
 		
 		State state = itemUIRegistry.getState(w);
 		

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/servlet/BaseServlet.java
Patch:
@@ -26,7 +26,7 @@
 public abstract class BaseServlet implements Servlet {
 	
 	/** the root path of this web application */
-	public static final String WEBAPP_ALIAS = "/";
+	public static final String WEBAPP_ALIAS = "/classicui";
 		
 	protected HttpService httpService;
 	protected ItemRegistry itemRegistry;

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/WithingsGenericBindingProvider.java
Patch:
@@ -47,7 +47,7 @@ public void processBindingConfiguration(String context, Item item,
 		MeasureType measureType = null;
 		
 		if (configElements.length == 1) {
-			measureType = MeasureType.valueOf(configElements[1].toUpperCase());
+			measureType = MeasureType.valueOf(configElements[0].toUpperCase());
 		}
 		else if (configElements.length == 2) {
 			accountId = configElements[0];

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -747,7 +747,7 @@ else if (zwaveStaticClass instanceof ZWaveMultiInstanceCommandClass) {
 
 				// If there are no configuration entries for this node, then continue.
 				List<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();
-				if(configList.size() == 0) {
+				if(configList == null || configList.size() == 0) {
 					break;
 				}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -747,7 +747,7 @@ else if (zwaveStaticClass instanceof ZWaveMultiInstanceCommandClass) {
 
 				// If there are no configuration entries for this node, then continue.
 				List<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();
-				if(configList.size() == 0) {
+				if(configList == null || configList.size() == 0) {
 					break;
 				}
 

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/WithingsGenericBindingProvider.java
Patch:
@@ -47,7 +47,7 @@ public void processBindingConfiguration(String context, Item item,
 		MeasureType measureType = null;
 		
 		if (configElements.length == 1) {
-			measureType = MeasureType.valueOf(configElements[1].toUpperCase());
+			measureType = MeasureType.valueOf(configElements[0].toUpperCase());
 		}
 		else if (configElements.length == 2) {
 			accountId = configElements[0];

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java
Patch:
@@ -371,7 +371,7 @@ public long processRequestQueue(long timeNow) {
 							m_address, -dt);
 					return (timeNow + 2000L); // retry soon
 				} else {
-					logger.warn("gave up waiting for query reply from device {}", m_address);
+					logger.debug("gave up waiting for query reply from device {}", m_address);
 				}
 			}
 			QEntry qe = m_requestQueue.poll(); // take it off the queue!

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java
Patch:
@@ -371,7 +371,7 @@ public long processRequestQueue(long timeNow) {
 							m_address, -dt);
 					return (timeNow + 2000L); // retry soon
 				} else {
-					logger.warn("gave up waiting for query reply from device {}", m_address);
+					logger.debug("gave up waiting for query reply from device {}", m_address);
 				}
 			}
 			QEntry qe = m_requestQueue.poll(); // take it off the queue!

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/Poller.java
Patch:
@@ -180,6 +180,7 @@ public void run() {
 						readPollQueue();
 					} catch (InterruptedException e) {
 						logger.warn("poll queue reader thread interrupted!");
+						break;
 					}
 				}
 			}

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/SerialIOStream.java
Patch:
@@ -59,7 +59,8 @@ public boolean open() {
 			logger.debug("setting port speed to {}", m_speed);
 			m_port.disableReceiveFraming();
 			m_port.enableReceiveThreshold(1);
-			m_port.disableReceiveTimeout();
+			//m_port.disableReceiveTimeout();
+			m_port.enableReceiveTimeout(1000);
 			m_in	= m_port.getInputStream();
 			m_out	= m_port.getOutputStream();
 			logger.info("successfully opened port {}", m_devName);

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/hub/ReadByteBuffer.java
Patch:
@@ -45,7 +45,7 @@ public synchronized byte get() {
     		try {
     			wait();
     		} catch (InterruptedException e) {
-    			// do nothin'
+    			return (0);
     		}
     	}
     	return m_buf[m_index++];
@@ -62,7 +62,7 @@ public synchronized int get(byte[] bytes, int off, int len) {
     		try {
     			wait();
     		} catch (InterruptedException e) {
-    			// do nothing
+    			return 0;
     		}
     	}
     	int b = Math.min(len, remaining());

File: bundles/core/org.openhab.core.jsr223/src/main/java/org/openhab/core/jsr223/internal/engine/scriptmanager/Script.java
Patch:
@@ -52,6 +52,7 @@
 import org.openhab.core.persistence.extensions.PersistenceExtensions;
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;
+import org.openhab.core.types.UnDefType;
 import org.openhab.library.tel.types.CallType;
 import org.openhab.model.script.actions.BusEvent;
 import org.slf4j.Logger;
@@ -180,6 +181,7 @@ private void initializeNashornGlobals() {
 				+"StopMoveType 			= Java.type('org.openhab.core.library.types.StopMoveType'),\n"
 				+"UpDownType 			= Java.type('org.openhab.core.library.types.UpDownType'),\n"
 				+"StringType 			= Java.type('org.openhab.core.library.types.StringType'),\n"
+				+"UnDefType 			= Java.type('org.openhab.core.types.UnDefType'),\n"
 				
 				//As of now, Nashorn does not support calling super class methods.
 				//http://nashorn-dev.openjdk.java.narkive.com/VX59ksgk/calling-super-methods-when-extending-classes
@@ -253,6 +255,7 @@ private void initializeGeneralGlobals() {
 		engine.put("StopMoveType", 			StopMoveType.class);
 		engine.put("UpDownType", 			UpDownType.class);
 		engine.put("StringType", 			StringType.class);
+		engine.put("UnDefType", 			UnDefType.class);
 	}
 
 	private String getFileExtension(File file) {

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/Poller.java
Patch:
@@ -180,6 +180,7 @@ public void run() {
 						readPollQueue();
 					} catch (InterruptedException e) {
 						logger.warn("poll queue reader thread interrupted!");
+						break;
 					}
 				}
 			}

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/SerialIOStream.java
Patch:
@@ -59,7 +59,8 @@ public boolean open() {
 			logger.debug("setting port speed to {}", m_speed);
 			m_port.disableReceiveFraming();
 			m_port.enableReceiveThreshold(1);
-			m_port.disableReceiveTimeout();
+			//m_port.disableReceiveTimeout();
+			m_port.enableReceiveTimeout(1000);
 			m_in	= m_port.getInputStream();
 			m_out	= m_port.getOutputStream();
 			logger.info("successfully opened port {}", m_devName);

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/hub/ReadByteBuffer.java
Patch:
@@ -45,7 +45,7 @@ public synchronized byte get() {
     		try {
     			wait();
     		} catch (InterruptedException e) {
-    			// do nothin'
+    			return (0);
     		}
     	}
     	return m_buf[m_index++];
@@ -62,7 +62,7 @@ public synchronized int get(byte[] bytes, int off, int len) {
     		try {
     			wait();
     		} catch (InterruptedException e) {
-    			// do nothing
+    			return 0;
     		}
     	}
     	int b = Math.min(len, remaining());

File: bundles/core/org.openhab.core.jsr223/src/main/java/org/openhab/core/jsr223/internal/engine/scriptmanager/Script.java
Patch:
@@ -50,6 +50,7 @@
 import org.openhab.core.persistence.extensions.PersistenceExtensions;
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;
+import org.openhab.core.types.UnDefType;
 import org.openhab.library.tel.types.CallType;
 import org.openhab.model.script.actions.BusEvent;
 import org.slf4j.Logger;
@@ -177,6 +178,7 @@ private void initializeNashornGlobals() {
 				+"StopMoveType 			= Java.type('org.openhab.core.library.types.StopMoveType'),\n"
 				+"UpDownType 			= Java.type('org.openhab.core.library.types.UpDownType'),\n"
 				+"StringType 			= Java.type('org.openhab.core.library.types.StringType'),\n"
+				+"UnDefType 			= Java.type('org.openhab.core.types.UnDefType'),\n"
 				
 				//As of now, Nashorn does not support calling super class methods.
 				//http://nashorn-dev.openjdk.java.narkive.com/VX59ksgk/calling-super-methods-when-extending-classes
@@ -248,6 +250,7 @@ private void initializeGeneralGlobals() {
 		engine.put("StopMoveType", 			StopMoveType.class);
 		engine.put("UpDownType", 			UpDownType.class);
 		engine.put("StringType", 			StringType.class);
+		engine.put("UnDefType", 			UnDefType.class);
 	}
 
 	private String getFileExtension(File file) {

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/protocol/APICode.java
Patch:
@@ -183,7 +183,7 @@ public String getCode() {
 	}
 	
    /**
-	 * Lookup function to return the APICode value based on the string code
+	 * Lookup function to return the APICode value based on the string code. 
 	 * Returns null if the string code is not found
 	 * 
 	 * @param code

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/io/ModbusTCPTransaction.java
Patch:
@@ -222,6 +222,9 @@ public void execute() throws ModbusIOException,
     } catch (InterruptedException ex) {
       throw new ModbusIOException("Thread acquiring lock was interrupted.");
     } finally {
+    	if (m_Connection != null && m_Connection.isConnected()) {
+        	m_Connection.close();
+    	}
       m_TransactionLock.release();
     }
   }//execute

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/HueBinding.java
Patch:
@@ -99,6 +99,9 @@ public void execute() {
 			if (settings == null) {
 				logger.warn("Hue settings were null, maybe misconfigured bridge IP.");
 				return;
+			} else if (!settings.isAuthorized()){
+				logger.warn("openHAB not authorized to access Hue bridge");
+				return;
 			}
 			Set<String> keys = settings.getKeys();
 			for(String key: keys){				

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/HueBinding.java
Patch:
@@ -99,6 +99,9 @@ public void execute() {
 			if (settings == null) {
 				logger.warn("Hue settings were null, maybe misconfigured bridge IP.");
 				return;
+			} else if (!settings.isAuthorized()){
+				logger.warn("openHAB not authorized to access Hue bridge");
+				return;
 			}
 			Set<String> keys = settings.getKeys();
 			for(String key: keys){				

File: bundles/binding/org.openhab.binding.souliss/src/main/java/org/openhab/binding/souliss/internal/network/typicals/Constants.java
Patch:
@@ -143,7 +143,9 @@ public class Constants {
 
 	public static final short Souliss_T1n_OnFeedback = 0x23;
 	public static final short Souliss_T1n_OffFeedback = 0x24;
-
+	public static final String Souliss_T12_Use_Of_Slot_AUTOMODE  = "automode";
+	public static final String Souliss_T12_Use_Of_Slot_SWITCH  = "switch";
+			
 	public static final long Souliss_T16_Red = 0x22FF0000; // Set a state
 	public static final long Souliss_T16_Green = 0x2200FF00;
 	public static final long Souliss_T16_Blue = 0x220000FF;

File: bundles/binding/org.openhab.binding.souliss/src/main/java/org/openhab/binding/souliss/internal/network/typicals/SoulissT19.java
Patch:
@@ -11,6 +11,7 @@
 import java.net.DatagramSocket;
 
 import org.openhab.binding.souliss.internal.network.udp.SoulissCommGate;
+import org.openhab.core.library.types.DecimalType;
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.types.State;
@@ -75,8 +76,8 @@ public State getOHState() {
 		if (sOHState != null) {
 			return OnOffType.valueOf(sOHState);
 		} else {
-			return new PercentType(
-					String.valueOf((this.getState() / 250) * 100));
+			//return new DecimalType(Math.round((this.getState() / 254) * 100));
+			return new PercentType(Math.round((this.getState() / 254) * 100));
 		}
 	}
 }

File: bundles/binding/org.openhab.binding.souliss/src/main/java/org/openhab/binding/souliss/internal/network/typicals/SoulissTypicals.java
Patch:
@@ -52,7 +52,7 @@ public void addTypical(String sItem, SoulissGenericTypical typical) {
 			}
 			typical.setName(sItem);
 			// Index is : node + slot + iBit + sUseOfSlot
-			logger.info("hashTableItemToAddress <-- [key: {} - value: {} - iBit {}]", sItem, String.valueOf(typical.getSoulissNodeID()),String.valueOf(typical.getSlot())); 
+			logger.info("hashTableItemToAddress <-- [key: {} - value: {} - Slot {}]", sItem, String.valueOf(typical.getSoulissNodeID()),String.valueOf(typical.getSlot())); 
 			hashTableItemToAddress.put(
 					sItem,
 					String.valueOf(typical.getSoulissNodeID())

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java
Patch:
@@ -268,7 +268,7 @@ private void sendPercent(int bulb, int rgbwSteps, String bridgeId, PercentType c
 			// RGBW Bulbs:
 			} else if (bulb > 5) {
 				if (command.intValue() > 0 && command.intValue() < 100 ) {
-					int newCommand = (command.intValue() * rgbwSteps / 100);
+					int newCommand = (command.intValue() * (rgbwSteps -2) / 100 + 2);
 					Thread.sleep(100);
 					String messageBytes = "4E:" + Integer.toHexString(newCommand) + ":55";
 			        	logger.debug("milight: send dimming packet '{}' to RGBW bulb channel '{}'", messageBytes, bulb);
@@ -331,7 +331,7 @@ private PercentType sendIncrease(int bulb, int rgbwSteps, String bridgeId) {
 		}
 		PercentType newValue = new PercentType(newPercent);
 		if (bulb > 5) {
-			int increasePercent = newPercent * rgbwSteps / 100;
+			int increasePercent = newPercent * (rgbwSteps -2) / 100 + 2;
 			messageBytes = "4E:" + Integer.toHexString(increasePercent) + ":55";
 			logger.debug("Bulb '{}' set to '{}' dimming Steps", bulb, rgbwSteps);
 		} else if (bulb < 5) {
@@ -370,7 +370,7 @@ private PercentType sendDecrease(int bulb, int rgbwSteps, String bridgeId) {
 			sendOff(bulb, bridgeId);
 		} else {
 			if (bulb > 5) {
-				int decreasePercent = newPercent * rgbwSteps / 100;
+				int decreasePercent = newPercent * (rgbwSteps -2) / 100 +2;
 				messageBytes = "4E:" + Integer.toHexString(decreasePercent) + ":55";
 				logger.debug("Bulb '{}' set to '{}' dimming Steps", bulb, rgbwSteps);
 			} else if (bulb < 5) {

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java
Patch:
@@ -268,7 +268,7 @@ private void sendPercent(int bulb, int rgbwSteps, String bridgeId, PercentType c
 			// RGBW Bulbs:
 			} else if (bulb > 5) {
 				if (command.intValue() > 0 && command.intValue() < 100 ) {
-					int newCommand = (command.intValue() * rgbwSteps / 100);
+					int newCommand = (command.intValue() * (rgbwSteps -2) / 100 + 2);
 					Thread.sleep(100);
 					String messageBytes = "4E:" + Integer.toHexString(newCommand) + ":55";
 			        	logger.debug("milight: send dimming packet '{}' to RGBW bulb channel '{}'", messageBytes, bulb);
@@ -331,7 +331,7 @@ private PercentType sendIncrease(int bulb, int rgbwSteps, String bridgeId) {
 		}
 		PercentType newValue = new PercentType(newPercent);
 		if (bulb > 5) {
-			int increasePercent = newPercent * rgbwSteps / 100;
+			int increasePercent = newPercent * (rgbwSteps -2) / 100 + 2;
 			messageBytes = "4E:" + Integer.toHexString(increasePercent) + ":55";
 			logger.debug("Bulb '{}' set to '{}' dimming Steps", bulb, rgbwSteps);
 		} else if (bulb < 5) {
@@ -370,7 +370,7 @@ private PercentType sendDecrease(int bulb, int rgbwSteps, String bridgeId) {
 			sendOff(bulb, bridgeId);
 		} else {
 			if (bulb > 5) {
-				int decreasePercent = newPercent * rgbwSteps / 100;
+				int decreasePercent = newPercent * (rgbwSteps -2) / 100 +2;
 				messageBytes = "4E:" + Integer.toHexString(decreasePercent) + ":55";
 				logger.debug("Bulb '{}' set to '{}' dimming Steps", bulb, rgbwSteps);
 			} else if (bulb < 5) {

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/items/DateTimeItem.java
Patch:
@@ -33,6 +33,8 @@ public class DateTimeItem extends GenericItem {
 	static {
 		acceptedDataTypes.add((DateTimeType.class));
 		acceptedDataTypes.add(UnDefType.class);
+
+		acceptedCommandTypes.add(DateTimeType.class);
 	}
 	
 	public DateTimeItem(String name) {

File: bundles/io/org.openhab.io.cv/src/main/java/org/openhab/io/cv/CVApplication.java
Patch:
@@ -96,7 +96,7 @@ public void unsetEventPublisher(EventPublisher eventPublisher) {
 	}
 
 	static public EventPublisher getEventPublisher() {
-		return eventPublisher;
+		return CVApplication.eventPublisher;
 	}
 
 	public void setItemUIRegistry(ItemUIRegistry itemUIRegistry) {
@@ -108,7 +108,7 @@ public void unsetItemUIRegistry(ItemRegistry itemUIRegistry) {
 	}
 
 	static public ItemUIRegistry getItemUIRegistry() {
-		return itemUIRegistry;
+		return CVApplication.itemUIRegistry;
 	}
 
 	public void setModelRepository(ModelRepository modelRepository) {
@@ -120,7 +120,7 @@ public void unsetModelRepository(ModelRepository modelRepository) {
 	}
 
 	static public ModelRepository getModelRepository() {
-		return modelRepository;
+		return CVApplication.modelRepository;
 	}
 
 	public void setDiscoveryService(DiscoveryService discoveryService) {

File: bundles/io/org.openhab.io.cv/src/main/java/org/openhab/io/cv/internal/broadcaster/CometVisuBroadcaster.java
Patch:
@@ -41,12 +41,10 @@ public Broadcaster initialize(String name, URI uri, AtmosphereConfig config) {
 			
 			@Override
 			public void onIdle() {
-				logger.debug("broadcaster '{}' is idle", this.toString());
 			}
 			
 			@Override
 			public void onEmpty() {
-				logger.debug("broadcaster '{}' is empty", this.toString());
 			}
 			
 			@Override
@@ -78,6 +76,7 @@ public void modelChanged(String modelName, EventType type) {
 		for (ResourceStateChangeListener l : listeners) {
 			// Item Model has changed so the listener listen to non existent items and need to be registered again
 			l.setBroadcaster(this);
+			l.refreshRelevantItems();
 			l.registerItems();
 		}
 	}

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/items/DateTimeItem.java
Patch:
@@ -33,6 +33,8 @@ public class DateTimeItem extends GenericItem {
 	static {
 		acceptedDataTypes.add((DateTimeType.class));
 		acceptedDataTypes.add(UnDefType.class);
+
+		acceptedCommandTypes.add(DateTimeType.class);
 	}
 	
 	public DateTimeItem(String name) {

File: bundles/io/org.openhab.io.cv/src/main/java/org/openhab/io/cv/CVApplication.java
Patch:
@@ -96,7 +96,7 @@ public void unsetEventPublisher(EventPublisher eventPublisher) {
 	}
 
 	static public EventPublisher getEventPublisher() {
-		return eventPublisher;
+		return CVApplication.eventPublisher;
 	}
 
 	public void setItemUIRegistry(ItemUIRegistry itemUIRegistry) {
@@ -108,7 +108,7 @@ public void unsetItemUIRegistry(ItemRegistry itemUIRegistry) {
 	}
 
 	static public ItemUIRegistry getItemUIRegistry() {
-		return itemUIRegistry;
+		return CVApplication.itemUIRegistry;
 	}
 
 	public void setModelRepository(ModelRepository modelRepository) {
@@ -120,7 +120,7 @@ public void unsetModelRepository(ModelRepository modelRepository) {
 	}
 
 	static public ModelRepository getModelRepository() {
-		return modelRepository;
+		return CVApplication.modelRepository;
 	}
 
 	public void setDiscoveryService(DiscoveryService discoveryService) {

File: bundles/io/org.openhab.io.cv/src/main/java/org/openhab/io/cv/internal/broadcaster/CometVisuBroadcaster.java
Patch:
@@ -41,12 +41,10 @@ public Broadcaster initialize(String name, URI uri, AtmosphereConfig config) {
 			
 			@Override
 			public void onIdle() {
-				logger.debug("broadcaster '{}' is idle", this.toString());
 			}
 			
 			@Override
 			public void onEmpty() {
-				logger.debug("broadcaster '{}' is empty", this.toString());
 			}
 			
 			@Override
@@ -78,6 +76,7 @@ public void modelChanged(String modelName, EventType type) {
 		for (ResourceStateChangeListener l : listeners) {
 			// Item Model has changed so the listener listen to non existent items and need to be registered again
 			l.setBroadcaster(this);
+			l.refreshRelevantItems();
 			l.registerItems();
 		}
 	}

File: bundles/binding/org.openhab.binding.souliss/src/main/java/org/openhab/binding/souliss/internal/network/typicals/Constants.java
Patch:
@@ -143,7 +143,9 @@ public class Constants {
 
 	public static final short Souliss_T1n_OnFeedback = 0x23;
 	public static final short Souliss_T1n_OffFeedback = 0x24;
-
+	public static final String Souliss_T12_Use_Of_Slot_AUTOMODE  = "automode";
+	public static final String Souliss_T12_Use_Of_Slot_SWITCH  = "switch";
+			
 	public static final long Souliss_T16_Red = 0x22FF0000; // Set a state
 	public static final long Souliss_T16_Green = 0x2200FF00;
 	public static final long Souliss_T16_Blue = 0x220000FF;

File: bundles/binding/org.openhab.binding.souliss/src/main/java/org/openhab/binding/souliss/internal/network/typicals/SoulissT19.java
Patch:
@@ -11,6 +11,7 @@
 import java.net.DatagramSocket;
 
 import org.openhab.binding.souliss.internal.network.udp.SoulissCommGate;
+import org.openhab.core.library.types.DecimalType;
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.types.State;
@@ -75,8 +76,8 @@ public State getOHState() {
 		if (sOHState != null) {
 			return OnOffType.valueOf(sOHState);
 		} else {
-			return new PercentType(
-					String.valueOf((this.getState() / 250) * 100));
+			//return new DecimalType(Math.round((this.getState() / 254) * 100));
+			return new PercentType(Math.round((this.getState() / 254) * 100));
 		}
 	}
 }

File: bundles/binding/org.openhab.binding.souliss/src/main/java/org/openhab/binding/souliss/internal/network/typicals/SoulissTypicals.java
Patch:
@@ -52,7 +52,7 @@ public void addTypical(String sItem, SoulissGenericTypical typical) {
 			}
 			typical.setName(sItem);
 			// Index is : node + slot + iBit + sUseOfSlot
-			logger.info("hashTableItemToAddress <-- [key: {} - value: {} - iBit {}]", sItem, String.valueOf(typical.getSoulissNodeID()),String.valueOf(typical.getSlot())); 
+			logger.info("hashTableItemToAddress <-- [key: {} - value: {} - Slot {}]", sItem, String.valueOf(typical.getSoulissNodeID()),String.valueOf(typical.getSlot())); 
 			hashTableItemToAddress.put(
 					sItem,
 					String.valueOf(typical.getSoulissNodeID())

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/Squeezebox.java
Patch:
@@ -39,7 +39,7 @@ public class Squeezebox {
 	// handle to the Squeeze Server connection
 	public static SqueezeServer squeezeServer;
 
-	private final static String GOOGLE_TRANSLATE_URL = "http://translate.google.com/translate_tts?tl=%s&q=";
+	private final static String GOOGLE_TRANSLATE_URL = "http://translate.google.com/translate_tts?tl=%s&ie=UTF-8&q=";
 	private final static int MAX_SENTENCE_LENGTH = 100;
 
 	private static boolean isReady() {

File: bundles/binding/org.openhab.binding.bticino/src/main/java/be/devlaminck/openwebnet/IBticinoEventListener.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/be/devlaminck/openwebnet/MonitorSessionThread.java
Patch:
@@ -1,5 +1,5 @@
 /** 
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/be/devlaminck/openwebnet/OWNUtilities.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/be/devlaminck/openwebnet/OpenWebNet.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/be/devlaminck/openwebnet/ProtocolRead.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/com/myhome/fcrisciani/connector/MyHomeJavaConnector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/com/myhome/fcrisciani/connector/MyHomeSocketFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/com/myhome/fcrisciani/datastructure/action/Action.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/com/myhome/fcrisciani/datastructure/command/CommandOPEN.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/com/myhome/fcrisciani/datastructure/command/DelayInterval.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/com/myhome/fcrisciani/datastructure/command/DimensionResponseCmd.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/com/myhome/fcrisciani/datastructure/command/StatusRequestCmd.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/com/myhome/fcrisciani/datastructure/command/StatusResponseCmd.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/com/myhome/fcrisciani/exception/MalformedCommandOPEN.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/com/myhome/fcrisciani/queue/PriorityCommandQueue.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bticino/src/main/java/com/myhome/fcrisciani/queue/PriorityQueueThread.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinBindingConfig.java
Patch:
@@ -16,6 +16,7 @@
  * The binding configuration for a Daikin controller item.
  *  
  * @author Ben Jones
+ * @author Jos schering
  * @since 1.5.0
  */
 public class DaikinBindingConfig implements BindingConfig {

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinGenericBindingProvider.java
Patch:
@@ -37,7 +37,6 @@ public String getBindingType() {
 	/**
 	 * @{inheritDoc}
 	 */
-	@Override
 	public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
 		DaikinBindingConfig config = new DaikinBindingConfig(item.getName(), bindingConfig);
 		if (item.getClass() != config.getCommandType().getSupportedItemType()) {
@@ -64,7 +63,6 @@ public void processBindingConfiguration(String context, Item item, String bindin
 		}
 	}
 
-	@Override
 	public DaikinBindingConfig getBindingConfig(String itemName) {
 		return (DaikinBindingConfig) bindingConfigs.get(itemName);
 	}	

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/connection/transport/HttpTransport.java
Patch:
@@ -52,7 +52,7 @@ public String execute(String request, int connectTimeout, int readTimeout) {
 			BufferedReader in = null;
 			try {
 				URL url = new URL(this.uri+request);
-				
+								
 				connection = (HttpURLConnection) url.openConnection();
 				int responseCode =-1;
 				if (connection != null) {

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/OutputModeEnum.java
Patch:
@@ -20,6 +20,7 @@ public enum OutputModeEnum {
 	DISABLED	(0),
 	SWITCHED	(16),
 	DIMMED		(22),
+	DIMMED_2	(51),
 	UP_DOWN		(33),
 	SWITCHED_2	(35),
 	SWITCH		(39),

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/config/DigitalSTROMBindingConfigEnum.java
Patch:
@@ -20,6 +20,7 @@ public enum DigitalSTROMBindingConfigEnum {
 	timeinterval,
 	context,
 	zoneid,
-	groupid
+	groupid, 
+	sensor
 	
 }

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/connector/SerialConnector.java
Patch:
@@ -74,6 +74,7 @@ public void write(String writeString) {
         try {
         	serialOutput.write(writeString);
             serialOutput.flush();
+    		logger.debug("write(): Message Sent: {}",writeString);
         }catch (IOException ioException) {
         	logger.error("write(): {}",ioException);
 			connected = false;
@@ -91,6 +92,7 @@ public String read() {
 
         try {
         	message = readLine();
+    		logger.debug("read(): Message Received: {}",message);
         }
         catch (IOException ioException) {
 			logger.error("read(): IO Exception: ", ioException);

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/connector/TCPConnector.java
Patch:
@@ -70,6 +70,7 @@ public void write(String writeString) {
         try {
         	tcpOutput.write(writeString);
             tcpOutput.flush();
+    		logger.debug("write(): Message Sent: {}",writeString);
         }catch (IOException ioException) {
         	logger.error("write(): {}",ioException);
 			connected = false;
@@ -87,6 +88,7 @@ public String read() {
 
         try {
         	message = tcpInput.readLine();
+    		logger.debug("read(): Message Received: {}",message);
         }
         catch (IOException ioException) {
 			logger.error("read(): IO Exception: ", ioException);

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/messages/OBISMsgFactory.java
Patch:
@@ -72,7 +72,7 @@ public OBISMessage getMessage(String obisIdString,
 			obisId = new OBISIdentifier(obisIdString);
 			reducedObisId = obisId.getReducedOBISIdentifier();
 		} catch (ParseException pe) {
-			logger.error("Received invalid OBIS identifer:" + obisIdString);
+			logger.error("Received invalid OBIS identifier:" + obisIdString);
 
 			return null;
 		}

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/connection/EBusTCPConnector.java
Patch:
@@ -54,9 +54,9 @@ public EBusTCPConnector(String hostname, int port) {
 	public boolean connect() throws IOException  {
 		try {
 			socket = new Socket(hostname, port);
-			socket.setSoTimeout(10000);
+			socket.setSoTimeout(20000);
 			socket.setKeepAlive(true);
-			
+			socket.setTcpNoDelay(true);
 			inputStream = socket.getInputStream();
 			outputStream = socket.getOutputStream();
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/EcobeeGenericBindingProvider.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.regex.Pattern;
 
 import org.openhab.binding.ecobee.EcobeeBindingProvider;
-import org.openhab.binding.ecobee.internal.messages.Selection;
+import org.openhab.binding.ecobee.messages.Selection;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/AbstractAuthResponse.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/AbstractFunction.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
@@ -51,8 +51,9 @@ protected AbstractFunction(String type) {
 	}
 
 	protected final Map<String, Object> makeParams() {
-		if (params == null)
+		if (params == null) {
 			params = new HashMap<String, Object>();
+		}
 		return params;
 	}
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/AbstractMessage.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.apache.commons.lang.builder.ToStringStyle.SHORT_PREFIX_STYLE;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/AbstractMessagePart.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.apache.commons.lang.builder.ToStringStyle.SHORT_PREFIX_STYLE;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/ApiResponse.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonProperty;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/AuthorizeRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/AuthorizeResponse.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/DeleteVacationFunction.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 /**
  * The delete vacation function deletes a vacation event from a thermostat. This is the only way to cancel a vacation

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/FanMode.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.codehaus.jackson.annotate.JsonCreator;
 import org.codehaus.jackson.annotate.JsonValue;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Group.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.util.List;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Page.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/RefreshTokenRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Request.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 /**
  * Base interface for all Ecobee API requests.

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Response.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 /**
  * Base interface for all Ecobee API responses.

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Selection.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.util.Set;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/SendMessageFunction.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 /**
  * The send message function allows an alert message to be sent to the thermostat. The message properties are same

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/SetHoldFunction.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.util.Date;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/SetOccupiedFunction.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.util.Date;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Status.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Thermostat.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.Date;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/ThermostatRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/ThermostatResponse.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.util.List;
 import org.apache.commons.lang.builder.ToStringBuilder;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/ThermostatSummaryRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/ThermostatSummaryResponse.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.util.HashSet;
 import java.util.List;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/TokenRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/TokenResponse.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/UpdateSensorFunction.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 /**
  * The update sensor function allows the caller to update the name of an ecobee3 remote sensor.

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/UpdateThermostatRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/User.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;

File: bundles/binding/org.openhab.binding.energenie/src/main/java/org/openhab/binding/energenie/internal/EnergenieBinding.java
Patch:
@@ -112,9 +112,9 @@ protected void execute() {
 					try {
 						loginResponseString = HttpUtil.executeUrl("POST", url, urlContent, "TEXT/PLAIN", timeout);
 						
-						String stateResponseSearch = "var sockstates = ";
+						String stateResponseSearch = "var sockstates =";
 						int findState=loginResponseString.lastIndexOf(stateResponseSearch);
-						if (findState !=0) {
+						if (findState > 0) {
 							logger.trace("searchstring sockstates found at position {}", findState);
 							
 							String slicedResponse = loginResponseString.substring(findState+18, findState+25);

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/BinRpcClient.java
Patch:
@@ -191,7 +191,7 @@ private synchronized Object[] sendMessage(HmInterface hmInterface, BinRpcRequest
 				logger.trace("Client BinRpcRequest {}", request);
 			}
 			socket = new Socket(context.getConfig().getHost(), hmInterface.getPort());
-			socket.setSoTimeout(5000);
+			socket.setSoTimeout(context.getConfig().getTimeout() * 1000);
 			socket.getOutputStream().write(request.createMessage());
 			BinRpcResponse resp = new BinRpcResponse(socket.getInputStream(), false);
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/CcuClient.java
Patch:
@@ -82,8 +82,9 @@ public void start() throws HomematicClientException {
 
 		httpClient = new HttpClient(new SimpleHttpConnectionManager(true));
 		HttpClientParams params = httpClient.getParams();
-		params.setConnectionManagerTimeout(5000);
-		params.setSoTimeout(30000);
+		Long timeout = context.getConfig().getTimeout() * 1000L;
+		params.setConnectionManagerTimeout(timeout);
+		params.setSoTimeout(timeout.intValue());
 		params.setContentCharset("ISO-8859-1");
 	}
 

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -68,7 +68,7 @@ public class KNXBinding extends AbstractBinding<KNXBindingProvider> implements
 	private boolean mKNXConnectionEstablished;
 
 	public void activate(ComponentContext componentContext) {
-		logger.info("Calimero library version {}", Settings.getLibraryVersion());
+		logger.debug("Calimero library version {}", Settings.getLibraryVersion());
 		logger.trace("KNXBinding: activating");
 		KNXConnection.addConnectionListener(this);
 		mKNXBusReaderScheduler.start();

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/DeviceListRequest.java
Patch:
@@ -20,6 +20,7 @@
  * modules.
  * 
  * @author Andreas Brenk
+ * @author Rob Nielsen
  * @since 1.4.0
  * @see <a href="http://dev.netatmo.com/doc/restapi/devicelist">devicelist</a>
  */

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/DeviceListResponse.java
Patch:
@@ -411,7 +411,7 @@ else if (level < WIFI_STATUS_THRESHOLD_0)
 			return result;
 		}
 
-		public Integer getAltitude() {
+		public Double getAltitude() {
 			return this.place.altitude;
 		}
 
@@ -566,7 +566,7 @@ public String toString() {
 	@JsonIgnoreProperties(ignoreUnknown = true)
 	public static class Place extends AbstractMessagePart {
 
-		private Integer altitude;
+		private Double altitude;
 		private String country;
 		private List<Double> location;
 		private String timezone;
@@ -576,7 +576,7 @@ public static class Place extends AbstractMessagePart {
 		 * "altitude": 33
 		 */
 		@JsonProperty("altitude")
-		public Integer getAltitude() {
+		public Double getAltitude() {
 			return this.altitude;
 		}
 

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireBinding.java
Patch:
@@ -278,6 +278,7 @@ public void updateItemFromOneWire(String pvItemName) {
 				}
 			} else {
 				logger.error("Set Item for itemName=" + pvItemName + " to Undefined, because the readvalue is null");
+				ivCacheItemStates.remove(pvItemName);
 				eventPublisher.postUpdate(lvItem.getName(), UnDefType.UNDEF);
 			}
 		}

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireBindingConfigFactory.java
Patch:
@@ -41,7 +41,7 @@ public class OneWireBindingConfigFactory {
 	 * @throws BindingConfigParseException
 	 */
 	public static OneWireBindingConfig createOneWireDeviceProperty(Item pvItem, String pvBindingConfig) throws BindingConfigParseException {
-		logger.debug("createOneWireDeviceProperty: " + pvItem.getName() + "bindingConfig:" + pvBindingConfig);
+		logger.debug("createOneWireDeviceProperty: " + pvItem.getName() + " - bindingConfig:" + pvBindingConfig);
 
 		OneWireBindingConfig lvNewBindingConfig = null;
 		if (OneWireClearCacheControlBindingConfig.isBindingConfigToCreate(pvItem, pvBindingConfig)) {

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java
Patch:
@@ -47,7 +47,7 @@ public String getBindingType() {
 	 * @see org.openhab.model.item.binding.BindingConfigReader#validateItemType(org.openhab.core.items.Item, java.lang.String)
 	 */
 	public void validateItemType(Item pvItem, String pvBindingConfig) throws BindingConfigParseException {
-		logger.debug("validateItemType: " + pvItem.getName() + "bindingConfig:" + pvBindingConfig);
+		logger.debug("validateItemType: " + pvItem.getName() + " - bindingConfig:" + pvBindingConfig);
 
 		if (OneWireBindingConfigFactory.isValidItemType(pvItem, pvBindingConfig)) {
 			return;

File: bundles/binding/org.openhab.binding.samsungac/src/main/java/org/binding/openhab/samsungac/communicator/ResponseParser.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.samsungtv/src/main/java/de/quist/samy/remocon/ConnectionDeniedException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.samsungtv/src/main/java/de/quist/samy/remocon/Key.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.samsungtv/src/main/java/de/quist/samy/remocon/RemoteReader.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.samsungtv/src/main/java/de/quist/samy/remocon/RemoteSession.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/config/IntegraStateBindingConfig.java
Patch:
@@ -44,6 +44,7 @@
  * <ul>
  * <li>commands_only - binding does not update state of the item, but accepts commands</li>
  * <li>force_arm - forces arming for items that accept arming commands</li>
+ * <li>invert_state - uses 0 as active state</li>
  * </ul>
  * 
  * @author Krzysztof Goworek
@@ -76,7 +77,7 @@ public static IntegraStateBindingConfig parseConfig(String bindingConfig) throws
 
 		// parse object type, mandatory
 		try {
-			objectType = ObjectType.valueOf(iterator.nextUpperCase());
+			objectType = iterator.nextOfType(ObjectType.class, "object type");
 		} catch (Exception e) {
 			// wrong config type, skip parsing
 			return null;
@@ -118,7 +119,7 @@ public static IntegraStateBindingConfig parseConfig(String bindingConfig) throws
 			}
 		}
 
-		return new IntegraStateBindingConfig(stateType, objectNumbers, parseOptions(iterator));
+		return new IntegraStateBindingConfig(stateType, objectNumbers, iterator.parseOptions());
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -647,6 +647,9 @@ private void executeCommand(String itemName, Command command,
 				case RADIO:
 					result = player.playRadio(commandAsString);
 					break;
+				case FAVORITE:
+					result = player.playFavorite(commandAsString);
+					break;
 				case SETALARM:
 					result = player.setAlarm(commandAsString);
 					break;

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/ModelPackage.java
Patch:
@@ -35,7 +35,7 @@
  * <!-- end-user-doc -->
  * <!-- begin-model-doc -->
  * *
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/scheduler/WeatherJobScheduler.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.TimerTask;
 
 import org.openhab.binding.weather.WeatherBindingProvider;
-import org.openhab.binding.weather.internal.bus.WeatherPublisher;
 import org.openhab.binding.weather.internal.common.LocationConfig;
 import org.openhab.binding.weather.internal.common.WeatherContext;
 import org.openhab.binding.weather.internal.common.binding.WeatherBindingConfig;
@@ -127,7 +126,6 @@ public void stop() {
 		} catch (SchedulerException ex) {
 			logger.error(ex.getMessage(), ex);
 		}
-		WeatherPublisher.getInstance().clear();
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/io/ModbusTCPTransaction.java
Patch:
@@ -222,6 +222,9 @@ public void execute() throws ModbusIOException,
     } catch (InterruptedException ex) {
       throw new ModbusIOException("Thread acquiring lock was interrupted.");
     } finally {
+    	if (m_Connection != null && m_Connection.isConnected()) {
+        	m_Connection.close();
+    	}
       m_TransactionLock.release();
     }
   }//execute

File: bundles/core/org.openhab.core.jsr223/src/main/java/org/openhab/core/jsr223/internal/engine/Jsr223Engine.java
Patch:
@@ -71,11 +71,11 @@ public void activate() {
 		scriptManager = new ScriptManager(triggerManager, itemRegistry);
 
 		if (!isEnabled()) {
-			logger.info("Jsr232 engine is disabled.");
+			logger.info("jsr223 engine is disabled.");
 			return;
 		}
 
-		logger.debug("Started Jsr232 engine");
+		logger.debug("Started jsr223 engine");
 
 		// register us on all items which are already available in the registry
 		for (Item item : itemRegistry.getItems()) {

File: bundles/core/org.openhab.core.jsr223/src/main/java/org/openhab/core/jsr223/internal/engine/scriptmanager/Script.java
Patch:
@@ -47,6 +47,7 @@
 import org.openhab.core.library.types.StopMoveType;
 import org.openhab.core.library.types.StringType;
 import org.openhab.core.library.types.UpDownType;
+import org.openhab.core.persistence.*;
 import org.openhab.core.persistence.extensions.PersistenceExtensions;
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;
@@ -158,6 +159,7 @@ private void initializeNashornGlobals() {
 				+"TriggerType 			= Java.type('org.openhab.core.jsr223.internal.shared.TriggerType'),\n"
 				+"PersistenceExtensions	= Java.type('org.openhab.core.persistence.extensions.PersistenceExtensions'),\n"
 				+"pe					= Java.type('org.openhab.core.persistence.extensions.PersistenceExtensions'),\n"
+				+"HistoricItem			= Java.type('org.openhab.core.persistence.HistoricItem'),\n"
 				+"oh 					= Java.type('org.openhab.core.jsr223.internal.shared.Openhab'),\n"
 				+"State 				= Java.type('org.openhab.core.types.State'),\n"
 				+"Command 				= Java.type('org.openhab.core.types.Command'),\n"
@@ -223,6 +225,7 @@ private void initializeGeneralGlobals() {
 		engine.put("be", 					BusEvent.class);
 		engine.put("PersistenceExtensions", PersistenceExtensions.class);
 		engine.put("pe", 					PersistenceExtensions.class);
+		engine.put("HistoricItem", 			HistoricItem.class);
 		engine.put("oh", 					Openhab.class);
 		engine.put("State", 				State.class);
 		engine.put("Command", 				Command.class);

File: bundles/core/org.openhab.core.jsr223/src/main/java/org/openhab/core/jsr223/internal/shared/Openhab.java
Patch:
@@ -39,7 +39,7 @@
 public class Openhab extends BusEvent {
 	private static final Logger logger = LoggerFactory.getLogger(Openhab.class);
 
-	private static String LOGGER_NAME_PREFIX = "org.openhab.model.jsr232.";
+	private static String LOGGER_NAME_PREFIX = "org.openhab.model.jsr223.";
 
 	/**
 	 * Returns all available action providers

File: bundles/binding/org.openhab.binding.harmonyhub/src/main/java/org/openhab/binding/harmonyhub/internal/HarmonyHubBinding.java
Patch:
@@ -76,7 +76,7 @@ public void bindingChanged(BindingProvider provider, final String itemName) {
 		if(provider instanceof HarmonyHubBindingProvider) {
 			HarmonyHubBindingProvider harmonyProvider = (HarmonyHubBindingProvider)provider;
 			final HarmonyHubBindingConfig config = harmonyProvider.getHarmonyHubBindingConfig(itemName);
-			if(harmonyHubGateway != null && config.getBindingType() == HarmonyHubBindingType.CurrentActivity) {
+			if(harmonyHubGateway != null && config != null && config.getBindingType() == HarmonyHubBindingType.CurrentActivity) {
 				if(!harmonyListeners.containsKey(config.getQualifier())) {
 					logger.debug("adding new listener for {}", config.getQualifier());
 					HarmonyHubListener listener = new HarmonyHubListener() {

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java
Patch:
@@ -61,12 +61,11 @@ public void validateItemType(Item pvItem, String pvBindingConfig) throws Binding
 	 */
 	@Override
 	public void processBindingConfiguration(String pvContext, Item pvItem, String pvBindingConfig) throws BindingConfigParseException {
-		super.processBindingConfiguration(pvContext, pvItem, pvBindingConfig);
-
 		OneWireBindingConfig pvDevicePropertyBindingConfig = OneWireBindingConfigFactory.createOneWireDeviceProperty(pvItem, pvBindingConfig);
 
 		addBindingConfig(pvItem, pvDevicePropertyBindingConfig);
 
+		super.processBindingConfiguration(pvContext, pvItem, pvBindingConfig);
 	}
 
 	/* (non-Javadoc)

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/SatelGenericBindingProvider.java
Patch:
@@ -53,11 +53,11 @@ public void validateItemType(Item item, String bindingConfig) throws BindingConf
 	public void processBindingConfiguration(String context, Item item, String bindingConfig)
 			throws BindingConfigParseException {
 		logger.trace("Processing binding configuration for item {}", item.getName());
-		super.processBindingConfiguration(context, item, bindingConfig);
 
 		SatelBindingConfig bc = this.createBindingConfig(bindingConfig);
 		logger.trace("Adding binding configuration for item {}: {}", item.getName(), bc);
 		addBindingConfig(item, bc);
+		super.processBindingConfiguration(context, item, bindingConfig);
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.xpl/src/main/java/org/openhab/binding/xpl/internal/XplGenericBindingProvider.java
Patch:
@@ -120,7 +120,6 @@ public List<String> hasMessage(xPL_MessageI theMessage) {
 	 */
 	@Override
 	public void processBindingConfiguration(String context, Item item, String bindingConfig) throws BindingConfigParseException {
-		super.processBindingConfiguration(context, item, bindingConfig);
 		
 		String[] configParts = bindingConfig.trim().split(",");
 		if (configParts.length < 5) {
@@ -159,6 +158,7 @@ else if (configParts[1].equalsIgnoreCase("COMMAND"))
 	    } 
 		
 		addBindingConfig(item, config);
+		super.processBindingConfiguration(context, item, bindingConfig);
 	}
 		
 }

File: bundles/io/org.openhab.io.multimedia.tts.googletts/src/main/java/org/openhab/io/multimedia/internal/tts/TTSServiceGoogleTTS.java
Patch:
@@ -53,7 +53,7 @@ public class TTSServiceGoogleTTS implements TTSService, ManagedService {
 	private static final String TRANSLATE_URL_PROPERTY = "translateUrl";
 
 	private String ttsLanguage = "en";
-	private String translateUrl = "http://translate.google.com/translate_tts?tl=%s&q=%s";
+	private String translateUrl = "http://translate.google.com/translate_tts?tl=%s&q=%s&client=t";
 
 	private final GoogleTTSTextProcessor textProcessor = new GoogleTTSTextProcessor(MAX_SENTENCE_LENGTH);
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveDeviceClass.java
Patch:
@@ -422,6 +422,7 @@ public enum Specific {
 		DOOR_LOCK(1, Generic.ENTRY_CONTROL, "Door Lock"),
 		ADVANCED_DOOR_LOCK(2, Generic.ENTRY_CONTROL, "Advanced Door Lock"),
 		SECURE_KEYPAD_DOOR_LOCK(3, Generic.ENTRY_CONTROL, "Secure Keypad Door Lock"),
+		SECURE_BARRIER(7, Generic.ENTRY_CONTROL, "Secure Barrier Add-on"),
 
 		ENERGY_PRODUCTION(1, Generic.SEMI_INTEROPERABLE, "Energy Production"),
 

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/scheduler/WeatherJobScheduler.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.TimerTask;
 
 import org.openhab.binding.weather.WeatherBindingProvider;
-import org.openhab.binding.weather.internal.bus.WeatherPublisher;
 import org.openhab.binding.weather.internal.common.LocationConfig;
 import org.openhab.binding.weather.internal.common.WeatherContext;
 import org.openhab.binding.weather.internal.common.binding.WeatherBindingConfig;
@@ -127,7 +126,6 @@ public void stop() {
 		} catch (SchedulerException ex) {
 			logger.error(ex.getMessage(), ex);
 		}
-		WeatherPublisher.getInstance().clear();
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/scheduler/WeatherJobScheduler.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.TimerTask;
 
 import org.openhab.binding.weather.WeatherBindingProvider;
-import org.openhab.binding.weather.internal.bus.WeatherPublisher;
 import org.openhab.binding.weather.internal.common.LocationConfig;
 import org.openhab.binding.weather.internal.common.WeatherContext;
 import org.openhab.binding.weather.internal.common.binding.WeatherBindingConfig;
@@ -127,7 +126,6 @@ public void stop() {
 		} catch (SchedulerException ex) {
 			logger.error(ex.getMessage(), ex);
 		}
-		WeatherPublisher.getInstance().clear();
 	}
 
 	/**

File: bundles/io/org.openhab.io.multimedia.tts.googletts/src/main/java/org/openhab/io/multimedia/internal/tts/TTSServiceGoogleTTS.java
Patch:
@@ -53,7 +53,7 @@ public class TTSServiceGoogleTTS implements TTSService, ManagedService {
 	private static final String TRANSLATE_URL_PROPERTY = "translateUrl";
 
 	private String ttsLanguage = "en";
-	private String translateUrl = "http://translate.google.com/translate_tts?tl=%s&q=%s";
+	private String translateUrl = "http://translate.google.com/translate_tts?tl=%s&q=%s&client=t";
 
 	private final GoogleTTSTextProcessor textProcessor = new GoogleTTSTextProcessor(MAX_SENTENCE_LENGTH);
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -367,7 +367,7 @@ public enum CommandClass {
 		ZIP_SERVER(0x24,"ZIP_SERVER",null),
 		SWITCH_BINARY(0x25,"SWITCH_BINARY",ZWaveBinarySwitchCommandClass.class),
 		SWITCH_MULTILEVEL(0x26,"SWITCH_MULTILEVEL",ZWaveMultiLevelSwitchCommandClass.class),
-		SWITCH_ALL(0x27,"SWITCH_ALL",ZWaveSwithcAllCommandClass.class),
+		SWITCH_ALL(0x27,"SWITCH_ALL",ZWaveSwitchAllCommandClass.class),
 		SWITCH_TOGGLE_BINARY(0x28,"SWITCH_TOGGLE_BINARY",null),
 		SWITCH_TOGGLE_MULTILEVEL(0x29,"SWITCH_TOGGLE_MULTILEVEL",null),
 		CHIMNEY_FAN(0x2A,"CHIMNEY_FAN",null),

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/EcobeeGenericBindingProvider.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.regex.Pattern;
 
 import org.openhab.binding.ecobee.EcobeeBindingProvider;
-import org.openhab.binding.ecobee.internal.messages.Selection;
+import org.openhab.binding.ecobee.messages.Selection;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/AbstractAuthResponse.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/AbstractFunction.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
@@ -51,8 +51,9 @@ protected AbstractFunction(String type) {
 	}
 
 	protected final Map<String, Object> makeParams() {
-		if (params == null)
+		if (params == null) {
 			params = new HashMap<String, Object>();
+		}
 		return params;
 	}
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/AbstractMessage.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.apache.commons.lang.builder.ToStringStyle.SHORT_PREFIX_STYLE;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/AbstractMessagePart.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.apache.commons.lang.builder.ToStringStyle.SHORT_PREFIX_STYLE;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/AbstractRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.text.SimpleDateFormat;
 import java.util.Properties;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/ApiResponse.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonProperty;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/AuthorizeRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/AuthorizeResponse.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/DeleteVacationFunction.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 /**
  * The delete vacation function deletes a vacation event from a thermostat. This is the only way to cancel a vacation

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/FanMode.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.codehaus.jackson.annotate.JsonCreator;
 import org.codehaus.jackson.annotate.JsonValue;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Group.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.util.List;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Page.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/RefreshTokenRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Request.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 /**
  * Base interface for all Ecobee API requests.

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Response.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 /**
  * Base interface for all Ecobee API responses.

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Selection.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.util.Set;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/SendMessageFunction.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 /**
  * The send message function allows an alert message to be sent to the thermostat. The message properties are same

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/SetHoldFunction.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.util.Date;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/SetOccupiedFunction.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.util.Date;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Status.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/Thermostat.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.Date;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/ThermostatRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/ThermostatResponse.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.util.List;
 import org.apache.commons.lang.builder.ToStringBuilder;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/ThermostatSummaryRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/ThermostatSummaryResponse.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import java.util.HashSet;
 import java.util.List;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/TokenRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/TokenResponse.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/UpdateSensorFunction.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 /**
  * The update sensor function allows the caller to update the name of an ecobee3 remote sensor.

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/UpdateThermostatRequest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import static org.openhab.io.net.http.HttpUtil.executeUrl;
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/messages/User.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ecobee.internal.messages;
+package org.openhab.binding.ecobee.messages;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java
Patch:
@@ -111,7 +111,7 @@ private void handleMultiCommandEncapResponse(
 				}
 				else {
 					logger.debug("NODE {}: Calling handleApplicationCommandRequest.", this.getNode().getNodeId());
-					zwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, 1);
+					zwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, 0);
 				}
 			}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java
Patch:
@@ -433,7 +433,8 @@ private void handleMultiChannelEncapResponse(
 		logger.trace("Process Multi-channel Encapsulation");
 
 		if(serialMessage.getMessagePayload().length < offset + 2) {
-			logger.error("NODE {}: Invalid data length", this.getNode().getNodeId());
+			logger.error("NODE {}: Invalid data length ({}/{})", this.getNode().getNodeId(),
+					serialMessage.getMessagePayload().length, offset);
 			return;
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java
Patch:
@@ -433,7 +433,8 @@ private void handleMultiChannelEncapResponse(
 		logger.trace("Process Multi-channel Encapsulation");
 
 		if(serialMessage.getMessagePayload().length < offset + 2) {
-			logger.error("NODE {}: Invalid data length", this.getNode().getNodeId());
+			logger.error("NODE {}: Invalid data length ({}/{})", this.getNode().getNodeId(),
+					serialMessage.getMessagePayload().length, offset);
 			return;
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiCommandCommandClass.java
Patch:
@@ -111,7 +111,7 @@ private void handleMultiCommandEncapResponse(
 				}
 				else {
 					logger.debug("NODE {}: Calling handleApplicationCommandRequest.", this.getNode().getNodeId());
-					zwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, 1);
+					zwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, 0);
 				}
 			}
 

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/connection/EBusTCPConnector.java
Patch:
@@ -54,9 +54,9 @@ public EBusTCPConnector(String hostname, int port) {
 	public boolean connect() throws IOException  {
 		try {
 			socket = new Socket(hostname, port);
-			socket.setSoTimeout(10000);
+			socket.setSoTimeout(20000);
 			socket.setKeepAlive(true);
-			
+			socket.setTcpNoDelay(true);
 			inputStream = socket.getInputStream();
 			outputStream = socket.getOutputStream();
 

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jService.java
Patch:
@@ -110,11 +110,11 @@ public synchronized void store(final Item item, final String alias) {
 							sample.setTime(now - 1);
 							sample.setValue(DATASOURCE_STATE, lastValue);
 							sample.update();
-							logger.debug("Stored '{}' with state '{}' in rrd4j database", name, mapToState(lastValue, item.getName()));
+							logger.debug("Stored '{}' with state '{}' in rrd4j database (again)", name, mapToState(lastValue, item.getName()));
 						}
 					}
 				} catch (IOException e) {
-					logger.debug("Error re-storing last value: {}", e.getMessage());
+					logger.debug("Error storing last value (again): {}", e.getMessage());
 				}
 			}
 			try {
@@ -129,7 +129,7 @@ public synchronized void store(final Item item, final String alias) {
 					}
 					sample.setValue(DATASOURCE_STATE, value);
 					sample.update();
-					logger.debug("Stored '{}' with state '{}' in rrd4j database", name, item.getState());
+					logger.debug("Stored '{}' with state '{}' in rrd4j database", name, state);
 				}
 			} catch (IllegalArgumentException e) {
 				if(e.getMessage().contains("at least one second step is required")) {

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jService.java
Patch:
@@ -110,11 +110,11 @@ public synchronized void store(final Item item, final String alias) {
 							sample.setTime(now - 1);
 							sample.setValue(DATASOURCE_STATE, lastValue);
 							sample.update();
-							logger.debug("Stored '{}' with state '{}' in rrd4j database", name, mapToState(lastValue, item.getName()));
+							logger.debug("Stored '{}' with state '{}' in rrd4j database (again)", name, mapToState(lastValue, item.getName()));
 						}
 					}
 				} catch (IOException e) {
-					logger.debug("Error re-storing last value: {}", e.getMessage());
+					logger.debug("Error storing last value (again): {}", e.getMessage());
 				}
 			}
 			try {
@@ -129,7 +129,7 @@ public synchronized void store(final Item item, final String alias) {
 					}
 					sample.setValue(DATASOURCE_STATE, value);
 					sample.update();
-					logger.debug("Stored '{}' with state '{}' in rrd4j database", name, item.getState());
+					logger.debug("Stored '{}' with state '{}' in rrd4j database", name, state);
 				}
 			} catch (IllegalArgumentException e) {
 				if(e.getMessage().contains("at least one second step is required")) {

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/connection/EBusTCPConnector.java
Patch:
@@ -54,9 +54,9 @@ public EBusTCPConnector(String hostname, int port) {
 	public boolean connect() throws IOException  {
 		try {
 			socket = new Socket(hostname, port);
-			socket.setSoTimeout(10000);
+			socket.setSoTimeout(20000);
 			socket.setKeepAlive(true);
-			
+			socket.setTcpNoDelay(true);
 			inputStream = socket.getInputStream();
 			outputStream = socket.getOutputStream();
 

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinBindingConfig.java
Patch:
@@ -16,6 +16,7 @@
  * The binding configuration for a Daikin controller item.
  *  
  * @author Ben Jones
+ * @author Jos schering
  * @since 1.5.0
  */
 public class DaikinBindingConfig implements BindingConfig {

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinGenericBindingProvider.java
Patch:
@@ -37,7 +37,6 @@ public String getBindingType() {
 	/**
 	 * @{inheritDoc}
 	 */
-	@Override
 	public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
 		DaikinBindingConfig config = new DaikinBindingConfig(item.getName(), bindingConfig);
 		if (item.getClass() != config.getCommandType().getSupportedItemType()) {
@@ -64,7 +63,6 @@ public void processBindingConfiguration(String context, Item item, String bindin
 		}
 	}
 
-	@Override
 	public DaikinBindingConfig getBindingConfig(String itemName) {
 		return (DaikinBindingConfig) bindingConfigs.get(itemName);
 	}	

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/messages/OBISMsgFactory.java
Patch:
@@ -72,7 +72,7 @@ public OBISMessage getMessage(String obisIdString,
 			obisId = new OBISIdentifier(obisIdString);
 			reducedObisId = obisId.getReducedOBISIdentifier();
 		} catch (ParseException pe) {
-			logger.error("Received invalid OBIS identifer:" + obisIdString);
+			logger.error("Received invalid OBIS identifier:" + obisIdString);
 
 			return null;
 		}

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/messages/OBISMsgFactory.java
Patch:
@@ -72,7 +72,7 @@ public OBISMessage getMessage(String obisIdString,
 			obisId = new OBISIdentifier(obisIdString);
 			reducedObisId = obisId.getReducedOBISIdentifier();
 		} catch (ParseException pe) {
-			logger.error("Received invalid OBIS identifer:" + obisIdString);
+			logger.error("Received invalid OBIS identifier:" + obisIdString);
 
 			return null;
 		}

File: bundles/binding/org.openhab.binding.souliss/src/main/java/org/openhab/binding/souliss/internal/network/typicals/Constants.java
Patch:
@@ -143,7 +143,9 @@ public class Constants {
 
 	public static final short Souliss_T1n_OnFeedback = 0x23;
 	public static final short Souliss_T1n_OffFeedback = 0x24;
-
+	public static final String Souliss_T12_Use_Of_Slot_AUTOMODE  = "automode";
+	public static final String Souliss_T12_Use_Of_Slot_SWITCH  = "switch";
+			
 	public static final long Souliss_T16_Red = 0x22FF0000; // Set a state
 	public static final long Souliss_T16_Green = 0x2200FF00;
 	public static final long Souliss_T16_Blue = 0x220000FF;

File: bundles/binding/org.openhab.binding.souliss/src/main/java/org/openhab/binding/souliss/internal/network/typicals/SoulissTypicals.java
Patch:
@@ -52,7 +52,7 @@ public void addTypical(String sItem, SoulissGenericTypical typical) {
 			}
 			typical.setName(sItem);
 			// Index is : node + slot + iBit + sUseOfSlot
-			logger.info("hashTableItemToAddress <-- [key: {} - value: {} - iBit {}]", sItem, String.valueOf(typical.getSoulissNodeID()),String.valueOf(typical.getSlot())); 
+			logger.info("hashTableItemToAddress <-- [key: {} - value: {} - Slot {}]", sItem, String.valueOf(typical.getSoulissNodeID()),String.valueOf(typical.getSlot())); 
 			hashTableItemToAddress.put(
 					sItem,
 					String.valueOf(typical.getSoulissNodeID())

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ConfigurationParameter.java
Patch:
@@ -34,7 +34,7 @@ public class ConfigurationParameter {
 	 */
 	public ConfigurationParameter(Integer index, Integer value, Integer size) throws IllegalArgumentException {
 		
-		if (size != 1 && size != 2 && size != 4) {
+		if (size < 1 || size > 4) {
 			throw new IllegalArgumentException("illegal parameter size");
 		}
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ConfigurationParameter.java
Patch:
@@ -34,7 +34,7 @@ public class ConfigurationParameter {
 	 */
 	public ConfigurationParameter(Integer index, Integer value, Integer size) throws IllegalArgumentException {
 		
-		if (size != 1 && size != 2 && size != 4) {
+		if (size < 1 || size > 4) {
 			throw new IllegalArgumentException("illegal parameter size");
 		}
 		

File: bundles/binding/org.openhab.binding.energenie/src/main/java/org/openhab/binding/energenie/internal/EnergenieBinding.java
Patch:
@@ -112,9 +112,9 @@ protected void execute() {
 					try {
 						loginResponseString = HttpUtil.executeUrl("POST", url, urlContent, "TEXT/PLAIN", timeout);
 						
-						String stateResponseSearch = "var sockstates = ";
+						String stateResponseSearch = "var sockstates =";
 						int findState=loginResponseString.lastIndexOf(stateResponseSearch);
-						if (findState !=0) {
+						if (findState > 0) {
 							logger.trace("searchstring sockstates found at position {}", findState);
 							
 							String slicedResponse = loginResponseString.substring(findState+18, findState+25);

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/DeviceListRequest.java
Patch:
@@ -20,6 +20,7 @@
  * modules.
  * 
  * @author Andreas Brenk
+ * @author Rob Nielsen
  * @since 1.4.0
  * @see <a href="http://dev.netatmo.com/doc/restapi/devicelist">devicelist</a>
  */

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/DeviceListResponse.java
Patch:
@@ -411,7 +411,7 @@ else if (level < WIFI_STATUS_THRESHOLD_0)
 			return result;
 		}
 
-		public Integer getAltitude() {
+		public Double getAltitude() {
 			return this.place.altitude;
 		}
 
@@ -566,7 +566,7 @@ public String toString() {
 	@JsonIgnoreProperties(ignoreUnknown = true)
 	public static class Place extends AbstractMessagePart {
 
-		private Integer altitude;
+		private Double altitude;
 		private String country;
 		private List<Double> location;
 		private String timezone;
@@ -576,7 +576,7 @@ public static class Place extends AbstractMessagePart {
 		 * "altitude": 33
 		 */
 		@JsonProperty("altitude")
-		public Integer getAltitude() {
+		public Double getAltitude() {
 			return this.altitude;
 		}
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/messages/Temperature.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.ecobee.internal.messages;
 
 import java.math.BigDecimal;
+import java.math.MathContext;
 
 import org.codehaus.jackson.annotate.JsonCreator;
 import org.codehaus.jackson.annotate.JsonValue;
@@ -132,7 +133,7 @@ public static Temperature fromFahrenheit(BigDecimal fahrenheit) {
 	 *            the Celsius temperature
 	 */
 	public static Temperature fromCelsius(BigDecimal celsius) {
-		return new Temperature(celsius.multiply(NINE).divide(FIVE).add(THIRTY_TWO).movePointRight(1));
+		return new Temperature(celsius.multiply(NINE).divide(FIVE, MathContext.DECIMAL32).add(THIRTY_TWO).movePointRight(1));
 	}
 
 	/**
@@ -159,7 +160,7 @@ public final BigDecimal toFahrenheit() {
 	 * @return temperature in Celsius
 	 */
 	public final BigDecimal toCelsius() {
-		return temp.movePointLeft(1).subtract(THIRTY_TWO).divide(NINE.divide(FIVE));
+		return temp.movePointLeft(1).subtract(THIRTY_TWO).divide(NINE.divide(FIVE), MathContext.DECIMAL32);
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatModeCommandClass.java
Patch:
@@ -115,8 +115,6 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 						continue;
 
 					int index = ((i - (offset + 1)) * 8 ) + bit;             
-					if(index >= ModeType.values().length)
-						continue;
 
 					// (n)th bit is set. n is the index for the mode type enumeration.
 					ModeType modeTypeToAdd = ModeType.getModeType(index);

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireBindingConfigFactory.java
Patch:
@@ -41,7 +41,7 @@ public class OneWireBindingConfigFactory {
 	 * @throws BindingConfigParseException
 	 */
 	public static OneWireBindingConfig createOneWireDeviceProperty(Item pvItem, String pvBindingConfig) throws BindingConfigParseException {
-		logger.debug("createOneWireDeviceProperty: " + pvItem.getName() + "bindingConfig:" + pvBindingConfig);
+		logger.debug("createOneWireDeviceProperty: " + pvItem.getName() + " - bindingConfig:" + pvBindingConfig);
 
 		OneWireBindingConfig lvNewBindingConfig = null;
 		if (OneWireClearCacheControlBindingConfig.isBindingConfigToCreate(pvItem, pvBindingConfig)) {

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java
Patch:
@@ -47,7 +47,7 @@ public String getBindingType() {
 	 * @see org.openhab.model.item.binding.BindingConfigReader#validateItemType(org.openhab.core.items.Item, java.lang.String)
 	 */
 	public void validateItemType(Item pvItem, String pvBindingConfig) throws BindingConfigParseException {
-		logger.debug("validateItemType: " + pvItem.getName() + "bindingConfig:" + pvBindingConfig);
+		logger.debug("validateItemType: " + pvItem.getName() + " - bindingConfig:" + pvBindingConfig);
 
 		if (OneWireBindingConfigFactory.isValidItemType(pvItem, pvBindingConfig)) {
 			return;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatModeCommandClass.java
Patch:
@@ -115,8 +115,6 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 						continue;
 
 					int index = ((i - (offset + 1)) * 8 ) + bit;             
-					if(index >= ModeType.values().length)
-						continue;
 
 					// (n)th bit is set. n is the index for the mode type enumeration.
 					ModeType modeTypeToAdd = ModeType.getModeType(index);

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireBindingConfigFactory.java
Patch:
@@ -41,7 +41,7 @@ public class OneWireBindingConfigFactory {
 	 * @throws BindingConfigParseException
 	 */
 	public static OneWireBindingConfig createOneWireDeviceProperty(Item pvItem, String pvBindingConfig) throws BindingConfigParseException {
-		logger.debug("createOneWireDeviceProperty: " + pvItem.getName() + "bindingConfig:" + pvBindingConfig);
+		logger.debug("createOneWireDeviceProperty: " + pvItem.getName() + " - bindingConfig:" + pvBindingConfig);
 
 		OneWireBindingConfig lvNewBindingConfig = null;
 		if (OneWireClearCacheControlBindingConfig.isBindingConfigToCreate(pvItem, pvBindingConfig)) {

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java
Patch:
@@ -47,7 +47,7 @@ public String getBindingType() {
 	 * @see org.openhab.model.item.binding.BindingConfigReader#validateItemType(org.openhab.core.items.Item, java.lang.String)
 	 */
 	public void validateItemType(Item pvItem, String pvBindingConfig) throws BindingConfigParseException {
-		logger.debug("validateItemType: " + pvItem.getName() + "bindingConfig:" + pvBindingConfig);
+		logger.debug("validateItemType: " + pvItem.getName() + " - bindingConfig:" + pvBindingConfig);
 
 		if (OneWireBindingConfigFactory.isValidItemType(pvItem, pvBindingConfig)) {
 			return;

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/messages/OBISMsgType.java
Patch:
@@ -243,7 +243,9 @@ public enum OBISMsgType {
 			"Equipment identifier"),
 	GMETER_24H_DELIVERY_V2_X(new OBISIdentifier(7, 0, 23, 1, 0, null), 
 			DSMRMeterType.GAS, 
-			new CosemValueDescriptor(CosemString.class, "m3", "gValue"),
+			new CosemValueDescriptor[]{ 
+				new CosemValueDescriptor(CosemString.class, "m3", "gValue"),
+				new CosemValueDescriptor(CosemDate.class, "", "gValueTS") },
 			"Delivery of the past hour(v3.0 and up) or 24 hours (v2.1 / v2.2)"), 
 	GMETER_24H_DELIVERY_COMPENSATED_V2_X(new OBISIdentifier(7, 0, 23, 2, 0, null),
 			DSMRMeterType.GAS, 

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/Squeezebox.java
Patch:
@@ -39,7 +39,7 @@ public class Squeezebox {
 	// handle to the Squeeze Server connection
 	public static SqueezeServer squeezeServer;
 
-	private final static String GOOGLE_TRANSLATE_URL = "http://translate.google.com/translate_tts?tl=%s&q=";
+	private final static String GOOGLE_TRANSLATE_URL = "http://translate.google.com/translate_tts?tl=%s&ie=UTF-8&q=";
 	private final static int MAX_SENTENCE_LENGTH = 100;
 
 	private static boolean isReady() {

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -68,7 +68,7 @@ public class KNXBinding extends AbstractBinding<KNXBindingProvider> implements
 	private boolean mKNXConnectionEstablished;
 
 	public void activate(ComponentContext componentContext) {
-		logger.info("Calimero library version {}", Settings.getLibraryVersion());
+		logger.debug("Calimero library version {}", Settings.getLibraryVersion());
 		logger.trace("KNXBinding: activating");
 		KNXConnection.addConnectionListener(this);
 		mKNXBusReaderScheduler.start();

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/messages/OBISMsgType.java
Patch:
@@ -243,7 +243,9 @@ public enum OBISMsgType {
 			"Equipment identifier"),
 	GMETER_24H_DELIVERY_V2_X(new OBISIdentifier(7, 0, 23, 1, 0, null), 
 			DSMRMeterType.GAS, 
-			new CosemValueDescriptor(CosemString.class, "m3", "gValue"),
+			new CosemValueDescriptor[]{ 
+				new CosemValueDescriptor(CosemString.class, "m3", "gValue"),
+				new CosemValueDescriptor(CosemDate.class, "", "gValueTS") },
 			"Delivery of the past hour(v3.0 and up) or 24 hours (v2.1 / v2.2)"), 
 	GMETER_24H_DELIVERY_COMPENSATED_V2_X(new OBISIdentifier(7, 0, 23, 2, 0, null),
 			DSMRMeterType.GAS, 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/EcobeeBinding.java
Patch:
@@ -339,7 +339,8 @@ private void readEcobee(OAuthCredentials oauthCredentials, Selection selection)
 		// Iterate through bindings and update all inbound values.
 		for (final EcobeeBindingProvider provider : this.providers) {
 			for (final String itemName : provider.getItemNames()) {
-				if (provider.isInBound(itemName) && credentialsMatch(provider, itemName, oauthCredentials)) {
+				if (provider.isInBound(itemName) && credentialsMatch(provider, itemName, oauthCredentials)
+						&& thermostats.containsKey(provider.getThermostatIdentifier(itemName))) {
 					final State newState = getState(provider, thermostats, itemName);
 
 					logger.debug("readEcobee: Updating itemName '{}' with newState '{}'", itemName, newState);

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jService.java
Patch:
@@ -343,6 +343,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 
 		if ((config == null) || config.isEmpty()) {
 			logger.debug("using default configuration only");
+			return;
 		}
 
 		Enumeration<String> keys = config.keys();

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -68,7 +68,7 @@ public class KNXBinding extends AbstractBinding<KNXBindingProvider> implements
 	private boolean mKNXConnectionEstablished;
 
 	public void activate(ComponentContext componentContext) {
-		logger.info("Calimero library version {}", Settings.getLibraryVersion());
+		logger.debug("Calimero library version {}", Settings.getLibraryVersion());
 		logger.trace("KNXBinding: activating");
 		KNXConnection.addConnectionListener(this);
 		mKNXBusReaderScheduler.start();

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jService.java
Patch:
@@ -343,6 +343,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 
 		if ((config == null) || config.isEmpty()) {
 			logger.debug("using default configuration only");
+			return;
 		}
 
 		Enumeration<String> keys = config.keys();

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/connection/transport/HttpTransport.java
Patch:
@@ -52,7 +52,7 @@ public String execute(String request, int connectTimeout, int readTimeout) {
 			BufferedReader in = null;
 			try {
 				URL url = new URL(this.uri+request);
-				
+								
 				connection = (HttpURLConnection) url.openConnection();
 				int responseCode =-1;
 				if (connection != null) {

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/config/DigitalSTROMBindingConfigEnum.java
Patch:
@@ -20,6 +20,7 @@ public enum DigitalSTROMBindingConfigEnum {
 	timeinterval,
 	context,
 	zoneid,
-	groupid
+	groupid, 
+	sensor
 	
 }

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/BinRpcClient.java
Patch:
@@ -191,7 +191,7 @@ private synchronized Object[] sendMessage(HmInterface hmInterface, BinRpcRequest
 				logger.trace("Client BinRpcRequest {}", request);
 			}
 			socket = new Socket(context.getConfig().getHost(), hmInterface.getPort());
-			socket.setSoTimeout(5000);
+			socket.setSoTimeout(context.getConfig().getTimeout() * 1000);
 			socket.getOutputStream().write(request.createMessage());
 			BinRpcResponse resp = new BinRpcResponse(socket.getInputStream(), false);
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/BinRpcClient.java
Patch:
@@ -191,7 +191,7 @@ private synchronized Object[] sendMessage(HmInterface hmInterface, BinRpcRequest
 				logger.trace("Client BinRpcRequest {}", request);
 			}
 			socket = new Socket(context.getConfig().getHost(), hmInterface.getPort());
-			socket.setSoTimeout(5000);
+			socket.setSoTimeout(context.getConfig().getTimeout() * 1000);
 			socket.getOutputStream().write(request.createMessage());
 			BinRpcResponse resp = new BinRpcResponse(socket.getInputStream(), false);
 

File: bundles/io/org.openhab.io.transport.cul/src/main/java/org/openhab/io/transport/cul/CULManager.java
Patch:
@@ -51,7 +51,7 @@ public class CULManager {
 	 * @throws CULDeviceException
 	 */
 	public static CULHandler getOpenCULHandler(String deviceName, CULMode mode) throws CULDeviceException {
-		return getOpenCULHandler(deviceName, mode, null);
+		return getOpenCULHandler(deviceName, mode, new HashMap<String, Object>());
 	}
 	
 	/**

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireBinding.java
Patch:
@@ -278,6 +278,7 @@ public void updateItemFromOneWire(String pvItemName) {
 				}
 			} else {
 				logger.error("Set Item for itemName=" + pvItemName + " to Undefined, because the readvalue is null");
+				ivCacheItemStates.remove(pvItemName);
 				eventPublisher.postUpdate(lvItem.getName(), UnDefType.UNDEF);
 			}
 		}

File: bundles/io/org.openhab.io.transport.cul/src/main/java/org/openhab/io/transport/cul/CULManager.java
Patch:
@@ -51,7 +51,7 @@ public class CULManager {
 	 * @throws CULDeviceException
 	 */
 	public static CULHandler getOpenCULHandler(String deviceName, CULMode mode) throws CULDeviceException {
-		return getOpenCULHandler(deviceName, mode, null);
+		return getOpenCULHandler(deviceName, mode, new HashMap<String, Object>());
 	}
 	
 	/**

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireBinding.java
Patch:
@@ -278,6 +278,7 @@ public void updateItemFromOneWire(String pvItemName) {
 				}
 			} else {
 				logger.error("Set Item for itemName=" + pvItemName + " to Undefined, because the readvalue is null");
+				ivCacheItemStates.remove(pvItemName);
 				eventPublisher.postUpdate(lvItem.getName(), UnDefType.UNDEF);
 			}
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatModeCommandClass.java
Patch:
@@ -304,7 +304,8 @@ public enum ModeType
 		AUTO_CHANGEOVER(10,"Auto Changeover"),
 		HEAT_ECON(11,"Heat Econ"),
 		COOL_ECON(12,"Cool Econ"),
-		AWAY(13,"Away");
+		AWAY(13,"Away"),
+		MANUAL(31, "Manual");
 
 		/**
 		 * A mapping between the integer code and its corresponding mode type

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatModeCommandClass.java
Patch:
@@ -304,7 +304,8 @@ public enum ModeType
 		AUTO_CHANGEOVER(10,"Auto Changeover"),
 		HEAT_ECON(11,"Heat Econ"),
 		COOL_ECON(12,"Cool Econ"),
-		AWAY(13,"Away");
+		AWAY(13,"Away"),
+		MANUAL(31, "Manual");
 
 		/**
 		 * A mapping between the integer code and its corresponding mode type

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/EcobeeBinding.java
Patch:
@@ -154,9 +154,9 @@ public Object convert(Class type, Object value) {
 	}
 
 	/**
-	 * the refresh interval which is used to poll values from the Ecobee server (optional, defaults to 60000ms)
+	 * the refresh interval which is used to poll values from the Ecobee server (optional, defaults to 180000ms)
 	 */
-	private long refreshInterval = 60000;
+	private long refreshInterval = 180000;
 
 	/**
 	 * A map of userids from the openhab.cfg file to OAuth credentials used to communicate with each app instance.
@@ -597,7 +597,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 		if (config != null) {
 
 			// to override the default refresh interval one has to add a
-			// parameter to openhab.cfg like ecobee:refresh=120000
+			// parameter to openhab.cfg like ecobee:refresh=240000
 			String refreshIntervalString = (String) config.get(CONFIG_REFRESH);
 			if (isNotBlank(refreshIntervalString)) {
 				refreshInterval = Long.parseLong(refreshIntervalString);

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/EcobeeBinding.java
Patch:
@@ -154,9 +154,9 @@ public Object convert(Class type, Object value) {
 	}
 
 	/**
-	 * the refresh interval which is used to poll values from the Ecobee server (optional, defaults to 60000ms)
+	 * the refresh interval which is used to poll values from the Ecobee server (optional, defaults to 180000ms)
 	 */
-	private long refreshInterval = 60000;
+	private long refreshInterval = 180000;
 
 	/**
 	 * A map of userids from the openhab.cfg file to OAuth credentials used to communicate with each app instance.
@@ -597,7 +597,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 		if (config != null) {
 
 			// to override the default refresh interval one has to add a
-			// parameter to openhab.cfg like ecobee:refresh=120000
+			// parameter to openhab.cfg like ecobee:refresh=240000
 			String refreshIntervalString = (String) config.get(CONFIG_REFRESH);
 			if (isNotBlank(refreshIntervalString)) {
 				refreshInterval = Long.parseLong(refreshIntervalString);

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/bus/PlanetPublisher.java
Patch:
@@ -55,7 +55,7 @@ private PlanetPublisher() {
 	/**
 	 * Returns the singleton instance of PlanetPublisher.
 	 */
-	public static PlanetPublisher getInstance() {
+	public static synchronized PlanetPublisher getInstance() {
 		if (instance == null) {
 			instance = new PlanetPublisher();
 		}

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/protocol/internal/UDPBinding.java
Patch:
@@ -56,7 +56,7 @@ public class UDPBinding extends AbstractDatagramChannelBinding<UDPBindingProvide
 	// string to prepend to data being sent
 	private static String preAmble = "";
 	// string to append to data being sent
-	private static String postAmble = "\r\n";
+	private static String postAmble = "";
 	// flag to use the reply of the remote end to update the status of the Item receiving the data
 	private static boolean updateWithResponse = true;
 	// used character set
@@ -289,4 +289,4 @@ protected String getName() {
 	}
 
 
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/protocol/internal/TCPBinding.java
Patch:
@@ -55,7 +55,7 @@ public class TCPBinding extends AbstractSocketChannelBinding<TCPBindingProvider>
 	// string to prepend to data being sent
 	private static String preAmble = "";
 	// string to append to data being sent
-	private static String postAmble = "\r\n";
+	private static String postAmble = "";
 	// flag to use the reply of the remote end to update the status of the Item receving the data
 	private static boolean updateWithResponse = true;
 	// used character set
@@ -286,4 +286,4 @@ protected String getName() {
 		return "TCP Refresh Service";
 	}
 
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/RFXComBinding.java
Patch:
@@ -88,7 +88,7 @@ public void unsetEventPublisher(EventPublisher eventPublisher) {
 	 */
 	@Override
 	protected void internalReceiveCommand(String itemName, Command command) {
-		logger.info("RFXComBinding.internalReceiveCommand: " + itemName + " " + command);
+		logger.debug("Received command: {} {}", itemName, command);
 		if(itemName != null) {
 			if(executeCommand(itemName, command) && command instanceof State) {
 				eventPublisher.postUpdate(itemName, (State)command);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/RFXComBinding.java
Patch:
@@ -88,7 +88,7 @@ public void unsetEventPublisher(EventPublisher eventPublisher) {
 	 */
 	@Override
 	protected void internalReceiveCommand(String itemName, Command command) {
-		logger.info("RFXComBinding.internalReceiveCommand: " + itemName + " " + command);
+		logger.debug("Received command: {} {}", itemName, command);
 		if(itemName != null) {
 			if(executeCommand(itemName, command) && command instanceof State) {
 				eventPublisher.postUpdate(itemName, (State)command);

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/servlet/CmdServlet.java
Patch:
@@ -101,6 +101,8 @@ public void service(ServletRequest req, ServletResponse res)
 				}
 			}
 		}
+		res.setContentType("application/xml;charset=UTF-8");
+		res.getWriter().write("<root></root>");
 	}
 	
 

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/servlet/WebAppServlet.java
Patch:
@@ -142,6 +142,8 @@ public void service(ServletRequest req, ServletResponse res)
 					result.append(renderer.processPage(renderer.getItemUIRegistry().getWidgetId(w), sitemapName, label, children, async));
 				}
 				
+			} else if (widgetId.equals("Colorpicker")) {
+				result.append("<root></root>");
 			}
 		} catch(RenderException e) {
 			throw new ServletException(e.getMessage(), e);

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/servlet/CmdServlet.java
Patch:
@@ -101,6 +101,8 @@ public void service(ServletRequest req, ServletResponse res)
 				}
 			}
 		}
+		res.setContentType("application/xml;charset=UTF-8");
+		res.getWriter().write("<root></root>");
 	}
 	
 

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/servlet/WebAppServlet.java
Patch:
@@ -142,6 +142,8 @@ public void service(ServletRequest req, ServletResponse res)
 					result.append(renderer.processPage(renderer.getItemUIRegistry().getWidgetId(w), sitemapName, label, children, async));
 				}
 				
+			} else if (widgetId.equals("Colorpicker")) {
+				result.append("<root></root>");
 			}
 		} catch(RenderException e) {
 			throw new ServletException(e.getMessage(), e);

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -29,7 +29,6 @@
 import org.openhab.binding.maxcube.internal.message.Configuration;
 import org.openhab.binding.maxcube.internal.message.Device;
 import org.openhab.binding.maxcube.internal.message.DeviceInformation;
-import org.openhab.binding.maxcube.internal.message.H_Message;
 import org.openhab.binding.maxcube.internal.message.HeatingThermostat;
 import org.openhab.binding.maxcube.internal.message.L_Message;
 import org.openhab.binding.maxcube.internal.message.M_Message;
@@ -208,6 +207,8 @@ public synchronized void execute() {
 					} else {
 						continue;
 					}
+					
+					message.debug(logger);
 
 					if (message != null) {
 						message.debug(logger);

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/exceptions/IncorrectMultilineIndexException.java
Patch:
@@ -16,4 +16,6 @@
  */
 public class IncorrectMultilineIndexException extends Exception {
 
+	private static final long serialVersionUID = -2261755876987011907L;
+
 }

File: bundles/binding/org.openhab.binding.panasonictv/src/main/java/org/openhab/binding/panasonictv/PanasonicTVBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.panasonictv/src/main/java/org/openhab/binding/panasonictv/internal/PanasonicTVActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.panasonictv/src/main/java/org/openhab/binding/panasonictv/internal/PanasonicTVGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConfigurationConverter.java
Patch:
@@ -96,7 +96,8 @@ public void handleEvent(ZWaveCommandClassValueEvent event, Item item, Map<String
 		
 		ZWaveStateConverter<?,?> converter = this.getStateConverter(item, cfgEvent.getParameter().getValue());
 		if (converter == null) {
-			logger.warn("NODE {}: No converter found for item = {}, endpoint = {}, ignoring event.", event.getNodeId(), item.getName(), event.getEndpoint());
+			logger.warn("NODE {}: No converter found for item = {}({}), endpoint = {}, ignoring event.",
+					event.getNodeId(), item.getName(), item.getClass().getSimpleName(), event.getEndpoint());
 			return;
 		}
 

File: bundles/action/org.openhab.action.harmonyhub/src/main/java/org/openhab/action/harmonyhub/internal/HarmonyHub.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.harmonyhub/src/main/java/org/openhab/action/harmonyhub/internal/HarmonyHubActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.harmonyhub/src/main/java/org/openhab/action/harmonyhub/internal/HarmonyHubActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.autelis/src/main/java/org/openhab/binding/autelis/internal/AutelisGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
-w * Copyright (c) 2010-2015, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.hms/src/main/java/org/openhab/binding/hms/HMSBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.hms/src/main/java/org/openhab/binding/hms/internal/HMSActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.hms/src/main/java/org/openhab/binding/hms/internal/HMSBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.hms/src/main/java/org/openhab/binding/hms/internal/HMSGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/IOStream.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/SerialIOStream.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/hub/HubIOStream.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/hub/ReadByteBuffer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.networkupstools/src/main/java/org/openhab/binding/networkupstools/NetworkUpsToolsBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.networkupstools/src/main/java/org/openhab/binding/networkupstools/internal/NetworkUpsToolsActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.networkupstools/src/main/java/org/openhab/binding/networkupstools/internal/NetworkUpsToolsBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.networkupstools/src/main/java/org/openhab/binding/networkupstools/internal/NetworkUpsToolsGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/SatelBindingConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/SatelBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/config/IntegraStateBindingConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/config/IntegraStatusBindingConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/SatelActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/SatelBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/SatelGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/event/EventDispatcher.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/event/IntegraStateEvent.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/event/IntegraStatusEvent.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/event/IntegraVersionEvent.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/event/NewStatesEvent.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/event/SatelEvent.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/event/SatelEventListener.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/EncryptionHelper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/Ethm1Module.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/IntRSModule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/SatelMessage.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/SatelModule.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/command/ClearTroublesCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/command/ControlObjectCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/command/IntegraStateCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/command/IntegraStatusCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/command/IntegraVersionCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/command/NewStatesCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/command/SatelCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/command/SetClockCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/types/ControlType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/types/DoorsState.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/types/IntegraType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/types/ObjectType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/types/OutputControl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/types/OutputState.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/types/PartitionControl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/types/PartitionState.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/types/StateType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/types/ZoneState.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/api/WithingsAccount.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/io/org.openhab.io.harmonyhub/src/main/java/org/openhab/io/harmonyhub/HarmonyHubGateway.java
Patch:
@@ -1,8 +1,9 @@
 /**
  * Copyright (c) 2010-2015, openHAB.org and others.
  *
- * All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse
- * Public License v1.0 which accompanies this distribution, and is available at
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
 package org.openhab.io.harmonyhub;

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/SitemapResource.java
Patch:
@@ -423,6 +423,9 @@ else if (widget instanceof Mapview) {
 					throw new RuntimeException(ex.getMessage(), ex);
 				}
 			}
+			if(uri.getFragment() != null) {
+				sb.append("#" + uri.getFragment());
+			}
 			sbBaseUrl.append(sb.toString());
 			bean.url = sbBaseUrl.toString();
     	}

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java
Patch:
@@ -225,7 +225,7 @@ public String getLabel(Widget w) {
 		try {
 			item = getItem(itemName);
 		} catch (ItemNotFoundException e) {
-			logger.error("Cannot retrieve item {} for widget {}", itemName, w.eClass().getInstanceTypeName());
+			logger.debug("Cannot retrieve item {} for widget {}", itemName, w.eClass().getInstanceTypeName());
 		}
 		return formatLabel(item, itemName, label);
 	}

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java
Patch:
@@ -225,7 +225,7 @@ public String getLabel(Widget w) {
 		try {
 			item = getItem(itemName);
 		} catch (ItemNotFoundException e) {
-			logger.error("Cannot retrieve item {} for widget {}", itemName, w.eClass().getInstanceTypeName());
+			logger.debug("Cannot retrieve item {} for widget {}", itemName, w.eClass().getInstanceTypeName());
 		}
 		return formatLabel(item, itemName, label);
 	}

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java
Patch:
@@ -225,7 +225,7 @@ public String getLabel(Widget w) {
 		try {
 			item = getItem(itemName);
 		} catch (ItemNotFoundException e) {
-			logger.error("Cannot retrieve item for widget {}", w.eClass().getInstanceTypeName());
+			logger.error("Cannot retrieve item {} for widget {}", itemName, w.eClass().getInstanceTypeName());
 		}
 		return formatLabel(item, itemName, label);
 	}
@@ -435,7 +435,7 @@ public State getState(Widget w) {
 				Item item = getItem(itemName);
 				return item.getState();
 			} catch (ItemNotFoundException e) {
-				logger.error("Cannot retrieve item '{}' for widget {}", new String[] { itemName, w.eClass().getInstanceTypeName() });
+				logger.error("Cannot retrieve item {} for widget {}", itemName, w.eClass().getInstanceTypeName());
 			}
 		}
 		return UnDefType.UNDEF;

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java
Patch:
@@ -225,7 +225,7 @@ public String getLabel(Widget w) {
 		try {
 			item = getItem(itemName);
 		} catch (ItemNotFoundException e) {
-			logger.error("Cannot retrieve item for widget {}", w.eClass().getInstanceTypeName());
+			logger.error("Cannot retrieve item {} for widget {}", itemName, w.eClass().getInstanceTypeName());
 		}
 		return formatLabel(item, itemName, label);
 	}
@@ -435,7 +435,7 @@ public State getState(Widget w) {
 				Item item = getItem(itemName);
 				return item.getState();
 			} catch (ItemNotFoundException e) {
-				logger.error("Cannot retrieve item '{}' for widget {}", new String[] { itemName, w.eClass().getInstanceTypeName() });
+				logger.error("Cannot retrieve item {} for widget {}", itemName, w.eClass().getInstanceTypeName());
 			}
 		}
 		return UnDefType.UNDEF;

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/converter/ConverterFactory.java
Patch:
@@ -18,6 +18,7 @@
 import org.openhab.binding.weather.internal.converter.property.IntegerConverter;
 import org.openhab.binding.weather.internal.converter.property.MultiIdConverter;
 import org.openhab.binding.weather.internal.converter.property.PercentIntegerConverter;
+import org.openhab.binding.weather.internal.converter.property.PressureTrendConverter;
 import org.openhab.binding.weather.internal.converter.property.SimpleDateConverter;
 import org.openhab.binding.weather.internal.converter.property.StringConverter;
 import org.openhab.binding.weather.internal.converter.property.ThreeHoursDoubleConverter;
@@ -48,6 +49,7 @@ public class ConverterFactory {
 		addConverter(new MultiIdConverter());
 		addConverter(new WindMpsConverter());
 		addConverter(new ThreeHoursDoubleConverter());
+		addConverter(new PressureTrendConverter());
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/converter/ConverterType.java
Patch:
@@ -16,5 +16,5 @@
  */
 
 public enum ConverterType {
-	NONE, AUTO, INTEGER, DOUBLE, STRING, PERCENT_INTEGER, UNIX_DATE, FRACTION_INTEGER, UTC_DATE, DATE, FULL_UTC_DATE, SIMPLE_DATE, MULTI_ID, WIND_MPS, DOUBLE_3H;
+	NONE, AUTO, INTEGER, DOUBLE, STRING, PERCENT_INTEGER, UNIX_DATE, FRACTION_INTEGER, UTC_DATE, DATE, FULL_UTC_DATE, SIMPLE_DATE, MULTI_ID, WIND_MPS, DOUBLE_3H, PRESSURE_TREND;
 }

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/model/Atmosphere.java
Patch:
@@ -52,6 +52,9 @@ public class Atmosphere {
 	})
 	private Double pressure;
 
+	@ProviderMappings({ 
+		@Provider(name = ProviderName.WUNDERGROUND, property = "current_observation.pressure_trend", converter = ConverterType.PRESSURE_TREND)
+	})
 	private String pressureTrend;
 
 	@ProviderMappings({ 

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/provider/WeatherProvider.java
Patch:
@@ -23,7 +23,7 @@ public interface WeatherProvider {
 	/**
 	 * Returns the weather data for the specified location config.
 	 */
-	public Weather getWeather(LocationConfig locationConfig);
+	public Weather getWeather(LocationConfig locationConfig) throws Exception;
 
 	/**
 	 * Returns the provider name.

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/scheduler/WeatherJob.java
Patch:
@@ -50,6 +50,7 @@ public void execute(JobExecutionContext jobContext) throws JobExecutionException
 			weatherPublisher.publish(locationId);
 
 		} catch (Exception ex) {
+			logger.error(ex.getMessage(), ex);
 			throw new JobExecutionException(ex.getMessage(), ex);
 		}
 	}

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/data/HueSettings.java
Patch:
@@ -144,7 +144,7 @@ public int getColorTemperature(String deviceId) {
 	 * 
 	 * @param deviceId
 	 *            The bulb id the bridge has filed the bulb under.
-	 * @return The brightness as a value from 0 - 255
+	 * @return The brightness as a value from 0 - {@link HueBulb#MAX_BRIGHTNESS}
 	 */
 	public int getBrightness(String deviceId) {
 		if (settingsData == null) {
@@ -184,7 +184,7 @@ public int getHue(String deviceId) {
 	 * 
 	 * @param deviceId
 	 *            The bulb id the bridge has filed the bulb under.
-	 * @return The saturation as a value from 0 - 254
+	 * @return The saturation as a value from 0 - {@link HueBulb#MAX_BRIGHTNESS}
 	 */
 	public int getSaturation(String deviceId) {
 		if (settingsData == null) {

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/PointType.java
Patch:
@@ -126,8 +126,7 @@ public PointType valueOf(String value) {
 
 	@Override
 	public String toString() {
-		return String.format("%1$.2f°N, %2$.2f°W, %2$.2f m", latitude,
-				longitude, altitude);
+		return String.format("%1$.2f°N, %2$.2f°W, %3$.2f m", latitude, longitude, altitude);
 	}
 
 	@Override

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/PointType.java
Patch:
@@ -126,8 +126,7 @@ public PointType valueOf(String value) {
 
 	@Override
 	public String toString() {
-		return String.format("%1$.2f°N, %2$.2f°W, %2$.2f m", latitude,
-				longitude, altitude);
+		return String.format("%1$.2f°N, %2$.2f°W, %3$.2f m", latitude, longitude, altitude);
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/provider/AbstractWeatherProvider.java
Patch:
@@ -14,6 +14,7 @@
 
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpStatus;
+import org.apache.commons.httpclient.HttpVersion;
 import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
 import org.apache.commons.httpclient.cookie.CookiePolicy;
 import org.apache.commons.httpclient.methods.GetMethod;
@@ -47,10 +48,11 @@ public abstract class AbstractWeatherProvider implements WeatherProvider {
 	static {
 		httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());
 		HttpClientParams params = httpClient.getParams();
-		params.setConnectionManagerTimeout(5000);
+		params.setConnectionManagerTimeout(15000);
 		params.setSoTimeout(30000);
 		params.setContentCharset("UTF-8");
 		params.setCookiePolicy(CookiePolicy.IGNORE_COOKIES);
+		params.setVersion(HttpVersion.HTTP_1_0);
 	}
 
 	public AbstractWeatherProvider(WeatherParser parser) {

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/scheduler/WeatherJob.java
Patch:
@@ -50,6 +50,7 @@ public void execute(JobExecutionContext jobContext) throws JobExecutionException
 			weatherPublisher.publish(locationId);
 
 		} catch (Exception ex) {
+			logger.error(ex.getMessage(), ex);
 			throw new JobExecutionException(ex.getMessage(), ex);
 		}
 	}

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -247,7 +247,7 @@ public void bindingChanged(BindingProvider provider, String itemName) {
 					if(datapoint.getName().equals(itemName)) {
 						logger.debug("Initializing read of item {}.", itemName);
 						if (!mKNXBusReaderScheduler.scheduleRead(datapoint, knxProvider.getAutoRefreshTime(datapoint))) {
-							logger.warn("Clouldn't add to KNX bus reader scheduler (bindingChanged)",datapoint);
+							logger.warn("Couldn't add to KNX bus reader scheduler (bindingChanged, datapoint='{}')",datapoint);
 						}
 						break;
 					}
@@ -273,7 +273,7 @@ public void allBindingsChanged(BindingProvider provider) {
 					int autoRefreshTimeInSecs=knxProvider.getAutoRefreshTime(datapoint);
 					if (autoRefreshTimeInSecs>0) {
 						if (!mKNXBusReaderScheduler.scheduleRead(datapoint, knxProvider.getAutoRefreshTime(datapoint))) {
-							logger.warn("Clouldn't add to KNX bus reader scheduler (allBindingsChanged)",datapoint);
+							logger.warn("Couldn't add to KNX bus reader scheduler (allBindingsChanged, datapoint='{}')",datapoint);
 						}
 					}
 				}
@@ -296,7 +296,7 @@ public void connectionEstablished() {
 				int autoRefreshTimeInSecs=knxProvider.getAutoRefreshTime(datapoint);
 				if (autoRefreshTimeInSecs>0) {
 					if (!mKNXBusReaderScheduler.scheduleRead(datapoint, autoRefreshTimeInSecs)) {
-						logger.warn("Clouldn't add to KNX bus reader scheduler (connectionEstablished)",datapoint);
+						logger.warn("Couldn't add to KNX bus reader scheduler (connectionEstablished, datapoint='{}')",datapoint);
 					}
 				}
 			}

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -247,7 +247,7 @@ public void bindingChanged(BindingProvider provider, String itemName) {
 					if(datapoint.getName().equals(itemName)) {
 						logger.debug("Initializing read of item {}.", itemName);
 						if (!mKNXBusReaderScheduler.scheduleRead(datapoint, knxProvider.getAutoRefreshTime(datapoint))) {
-							logger.warn("Clouldn't add to KNX bus reader scheduler (bindingChanged)",datapoint);
+							logger.warn("Couldn't add to KNX bus reader scheduler (bindingChanged, datapoint='{}')",datapoint);
 						}
 						break;
 					}
@@ -273,7 +273,7 @@ public void allBindingsChanged(BindingProvider provider) {
 					int autoRefreshTimeInSecs=knxProvider.getAutoRefreshTime(datapoint);
 					if (autoRefreshTimeInSecs>0) {
 						if (!mKNXBusReaderScheduler.scheduleRead(datapoint, knxProvider.getAutoRefreshTime(datapoint))) {
-							logger.warn("Clouldn't add to KNX bus reader scheduler (allBindingsChanged)",datapoint);
+							logger.warn("Couldn't add to KNX bus reader scheduler (allBindingsChanged, datapoint='{}')",datapoint);
 						}
 					}
 				}
@@ -296,7 +296,7 @@ public void connectionEstablished() {
 				int autoRefreshTimeInSecs=knxProvider.getAutoRefreshTime(datapoint);
 				if (autoRefreshTimeInSecs>0) {
 					if (!mKNXBusReaderScheduler.scheduleRead(datapoint, autoRefreshTimeInSecs)) {
-						logger.warn("Clouldn't add to KNX bus reader scheduler (connectionEstablished)",datapoint);
+						logger.warn("Couldn't add to KNX bus reader scheduler (connectionEstablished, datapoint='{}')",datapoint);
 					}
 				}
 			}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMeterConverter.java
Patch:
@@ -126,7 +126,7 @@ public void receiveCommand(Item item, Command command, ZWaveNode node,
 		SerialMessage serialMessage = node.encapsulate(commandClass.getResetMessage(), commandClass, endpointId);
 		
 		if (serialMessage == null) {
-			logger.warn("NODE {}: Meter reset not supported for item = {}, endpoint = {}, ignoring event.", event.getNodeId(), item.getName(), event.getEndpoint());
+			logger.warn("NODE {}: Meter reset not supported for item = {}, endpoint = {}, ignoring event.", node.getNodeId(), item.getName(), endpointId);
 			return;
 		}
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMeterConverter.java
Patch:
@@ -126,7 +126,7 @@ public void receiveCommand(Item item, Command command, ZWaveNode node,
 		SerialMessage serialMessage = node.encapsulate(commandClass.getResetMessage(), commandClass, endpointId);
 		
 		if (serialMessage == null) {
-			logger.warn("NODE {}: Meter reset not supported for item = {}, endpoint = {}, ignoring event.", event.getNodeId(), item.getName(), event.getEndpoint());
+			logger.warn("NODE {}: Meter reset not supported for item = {}, endpoint = {}, ignoring event.", node.getNodeId(), item.getName(), endpointId);
 			return;
 		}
 		

File: bundles/binding/org.openhab.binding.knx.test/src/test/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapperTest.java
Patch:
@@ -984,7 +984,8 @@ public void testTypeMappingTime_10_001() throws KNXFormatException {
 		 * 
 		 */
 		type=testToType(dpt, new byte[] { 0x00, 0x00, 0x00 }, DateTimeType.class);
-		testToDPTValue(dpt, type, "00:00:00");
+		String today=String.format(Locale.US, "%1$ta", Calendar.getInstance());
+		testToDPTValue(dpt, type, today+", 00:00:00");
 
 		/*
 		 * Set day to Monday, 0 hours, 0 minutes and 0 seconds January 5th, 1970 was a Monday

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MIndustrialQuadRelay.java
Patch:
@@ -32,7 +32,7 @@ public interface MIndustrialQuadRelay extends MInSwitchActor, MSubDevice<MIndust
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.
-   * The default value is <code>"industrial_quad_relay"</code>.
+   * The default value is <code>"quad_relay"</code>.
    * <!-- begin-user-doc -->
    * <p>
    * If the meaning of the '<em>Device Type</em>' attribute isn't clear,
@@ -41,7 +41,7 @@ public interface MIndustrialQuadRelay extends MInSwitchActor, MSubDevice<MIndust
    * <!-- end-user-doc -->
    * @return the value of the '<em>Device Type</em>' attribute.
    * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMIndustrialQuadRelay_DeviceType()
-   * @model default="industrial_quad_relay" unique="false" changeable="false"
+   * @model default="quad_relay" unique="false" changeable="false"
    * @generated
    */
   String getDeviceType();

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MIndustrialQuadRelayImpl.java
Patch:
@@ -187,7 +187,7 @@ public class MIndustrialQuadRelayImpl extends MinimalEObjectImpl.Container imple
    * @generated
    * @ordered
    */
-  protected static final String DEVICE_TYPE_EDEFAULT = "industrial_quad_relay";
+  protected static final String DEVICE_TYPE_EDEFAULT = "quad_relay";
 
   /**
    * The cached value of the '{@link #getDeviceType() <em>Device Type</em>}' attribute.

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/HueBindingConfig.java
Patch:
@@ -22,7 +22,9 @@
  * 
  * <ul>
  * <li>The device number the bulb has on the Hue bridge. The bulbs should have
- * numbers from 1 up to the number of connected bulbs.</li>
+ * numbers from 1 up to the number of connected bulbs.
+ * (Since the option to delete items on the bridge the assumption of continuous sequence 
+ * of item numbers is no longer correct, but this is now handled in HueBinding execute correctly)</li>
  * <li>The binding type of the hue item</li>
  * <ul>
  * <li>Switch</li>

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MIndustrialQuadRelay.java
Patch:
@@ -32,7 +32,7 @@ public interface MIndustrialQuadRelay extends MInSwitchActor, MSubDevice<MIndust
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.
-   * The default value is <code>"industrial_quad_relay"</code>.
+   * The default value is <code>"quad_relay"</code>.
    * <!-- begin-user-doc -->
    * <p>
    * If the meaning of the '<em>Device Type</em>' attribute isn't clear,
@@ -41,7 +41,7 @@ public interface MIndustrialQuadRelay extends MInSwitchActor, MSubDevice<MIndust
    * <!-- end-user-doc -->
    * @return the value of the '<em>Device Type</em>' attribute.
    * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMIndustrialQuadRelay_DeviceType()
-   * @model default="industrial_quad_relay" unique="false" changeable="false"
+   * @model default="quad_relay" unique="false" changeable="false"
    * @generated
    */
   String getDeviceType();

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MIndustrialQuadRelayImpl.java
Patch:
@@ -187,7 +187,7 @@ public class MIndustrialQuadRelayImpl extends MinimalEObjectImpl.Container imple
    * @generated
    * @ordered
    */
-  protected static final String DEVICE_TYPE_EDEFAULT = "industrial_quad_relay";
+  protected static final String DEVICE_TYPE_EDEFAULT = "quad_relay";
 
   /**
    * The cached value of the '{@link #getDeviceType() <em>Device Type</em>}' attribute.

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/SitemapResource.java
Patch:
@@ -261,7 +261,7 @@ private SitemapBean createSitemapBean(String sitemapName, Sitemap sitemap, URI u
 		bean.label = sitemap.getLabel();
 
     	bean.link = UriBuilder.fromUri(uri).path(SitemapResource.PATH_SITEMAPS).path(bean.name).build().toASCIIString();
-    	bean.homepage = createPageBean(sitemap.getName(), sitemap.getLabel(), sitemap.getIcon(), sitemap.getName(), sitemap.getChildren(), true, false, uri);
+    	bean.homepage = createPageBean(sitemapName, sitemap.getLabel(), sitemap.getIcon(), sitemap.getName(), sitemap.getChildren(), true, false, uri);
     	return bean;
     }
     

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConfigurationConverter.java
Patch:
@@ -96,7 +96,8 @@ public void handleEvent(ZWaveCommandClassValueEvent event, Item item, Map<String
 		
 		ZWaveStateConverter<?,?> converter = this.getStateConverter(item, cfgEvent.getParameter().getValue());
 		if (converter == null) {
-			logger.warn("NODE {}: No converter found for item = {}, endpoint = {}, ignoring event.", event.getNodeId(), item.getName(), event.getEndpoint());
+			logger.warn("NODE {}: No converter found for item = {}({}), endpoint = {}, ignoring event.",
+					event.getNodeId(), item.getName(), item.getClass().getSimpleName(), event.getEndpoint());
 			return;
 		}
 

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java
Patch:
@@ -203,7 +203,7 @@ private void sendPercent(int bulb, int rgbwSteps, String bridgeId, PercentType c
 			if (bulb < 6) {
 				if (command.compareTo(oldPercent) > 0) {
 					int repeatCount = (command.intValue() - oldPercent.intValue()) / 10;
-					for(int i = 0; i <= repeatCount; i++) {
+					for(int i = 0; i < repeatCount; i++) {
 						Thread.sleep(100);
 						if(BindingType.brightness.equals(type) && bulb < 6) {
 							sendIncrease(bulb, rgbwSteps, bridgeId);
@@ -218,7 +218,7 @@ private void sendPercent(int bulb, int rgbwSteps, String bridgeId, PercentType c
 					}
 				} else if (command.compareTo(oldPercent) < 0) {
 					int repeatCount = (oldPercent.intValue() - command.intValue()) / 10;
-					for(int i = 0; i <= repeatCount; i++) {
+					for(int i = 0; i < repeatCount; i++) {
 						Thread.sleep(100);
 						if(BindingType.brightness.equals(type) && bulb < 6) {
 							sendDecrease(bulb, rgbwSteps, bridgeId);

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java
Patch:
@@ -203,7 +203,7 @@ private void sendPercent(int bulb, int rgbwSteps, String bridgeId, PercentType c
 			if (bulb < 6) {
 				if (command.compareTo(oldPercent) > 0) {
 					int repeatCount = (command.intValue() - oldPercent.intValue()) / 10;
-					for(int i = 0; i <= repeatCount; i++) {
+					for(int i = 0; i < repeatCount; i++) {
 						Thread.sleep(100);
 						if(BindingType.brightness.equals(type) && bulb < 6) {
 							sendIncrease(bulb, rgbwSteps, bridgeId);
@@ -218,7 +218,7 @@ private void sendPercent(int bulb, int rgbwSteps, String bridgeId, PercentType c
 					}
 				} else if (command.compareTo(oldPercent) < 0) {
 					int repeatCount = (oldPercent.intValue() - command.intValue()) / 10;
-					for(int i = 0; i <= repeatCount; i++) {
+					for(int i = 0; i < repeatCount; i++) {
 						Thread.sleep(100);
 						if(BindingType.brightness.equals(type) && bulb < 6) {
 							sendDecrease(bulb, rgbwSteps, bridgeId);

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -191,9 +191,8 @@ public synchronized void execute() {
 				try {
 					message = processRawMessage(raw);
 
-					message.debug(logger);
-
 					if (message != null) {
+						message.debug(logger);
 						if (message.getType() == MessageType.M) {
 							M_Message msg = (M_Message) message;
 							for (DeviceInformation di : msg.devices) {
@@ -334,7 +333,7 @@ public void internalReceiveCommand(String itemName, Command command) {
 		for (MaxCubeBindingProvider provider : providers) {
 			serialNumber = provider.getSerialNumber(itemName);
 
-			if (serialNumber.equals(null)) {
+			if (StringUtils.isBlank(serialNumber)) {
 				continue;
 			}
 

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -93,6 +93,7 @@ public static Device create(byte[] raw, List<Configuration> configurations) {
 		Device device = Device.create(rfAddress, configurations);
 		if (device == null) {
 			logger.warn("Can't create device from received message, returning NULL.");
+			return null;
 		}
 		
 		return Device.update(raw,configurations, device);

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/DimmableActor.java
Patch:
@@ -3,9 +3,9 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import java.math.BigDecimal;
+
 import org.openhab.binding.tinkerforge.internal.config.DeviceOptions;
 import org.openhab.core.library.types.IncreaseDecreaseType;
-import org.eclipse.emf.ecore.EObject;
 
 /**
  * <!-- begin-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/JoystickButton.java
Patch:
@@ -2,7 +2,7 @@
  */
 package org.openhab.binding.tinkerforge.internal.model;
 
-import org.openhab.binding.tinkerforge.internal.types.HighLowValue;
+import org.openhab.binding.tinkerforge.internal.types.OnOffValue;
 
 /**
  * <!-- begin-user-doc -->
@@ -17,10 +17,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getJoystickButton()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.JoystickDevice org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.DigitalValue>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.JoystickDevice org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.SwitchState> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.ButtonConfiguration>"
  * @generated
  */
-public interface JoystickButton extends JoystickDevice, MSensor<HighLowValue>
+public interface JoystickButton extends JoystickDevice, MSensor<OnOffValue>, MTFConfigConsumer<ButtonConfiguration>
 {
 
   /**

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/JoystickXPosition.java
Patch:
@@ -2,7 +2,6 @@
  */
 package org.openhab.binding.tinkerforge.internal.model;
 
-import java.math.BigDecimal;
 import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 /**

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/JoystickYPosition.java
Patch:
@@ -2,7 +2,6 @@
  */
 package org.openhab.binding.tinkerforge.internal.model;
 
-import java.math.BigDecimal;
 import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 /**

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickDCImpl.java
Patch:
@@ -2189,14 +2189,14 @@ public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
     {
       switch (derivedFeatureID)
       {
+        case ModelPackage.MBRICK_DC__SWITCH_STATE: return ModelPackage.SWITCH_SENSOR__SWITCH_STATE;
         default: return -1;
       }
     }
     if (baseClass == ProgrammableSwitchActor.class)
     {
       switch (derivedFeatureID)
       {
-        case ModelPackage.MBRICK_DC__SWITCH_STATE: return ModelPackage.PROGRAMMABLE_SWITCH_ACTOR__SWITCH_STATE;
         default: return -1;
       }
     }
@@ -2281,14 +2281,14 @@ public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
     {
       switch (baseFeatureID)
       {
+        case ModelPackage.SWITCH_SENSOR__SWITCH_STATE: return ModelPackage.MBRICK_DC__SWITCH_STATE;
         default: return -1;
       }
     }
     if (baseClass == ProgrammableSwitchActor.class)
     {
       switch (baseFeatureID)
       {
-        case ModelPackage.PROGRAMMABLE_SWITCH_ACTOR__SWITCH_STATE: return ModelPackage.MBRICK_DC__SWITCH_STATE;
         default: return -1;
       }
     }

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MServoImpl.java
Patch:
@@ -1828,14 +1828,14 @@ public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
     {
       switch (derivedFeatureID)
       {
+        case ModelPackage.MSERVO__SWITCH_STATE: return ModelPackage.SWITCH_SENSOR__SWITCH_STATE;
         default: return -1;
       }
     }
     if (baseClass == ProgrammableSwitchActor.class)
     {
       switch (derivedFeatureID)
       {
-        case ModelPackage.MSERVO__SWITCH_STATE: return ModelPackage.PROGRAMMABLE_SWITCH_ACTOR__SWITCH_STATE;
         default: return -1;
       }
     }
@@ -1907,14 +1907,14 @@ public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
     {
       switch (baseFeatureID)
       {
+        case ModelPackage.SWITCH_SENSOR__SWITCH_STATE: return ModelPackage.MSERVO__SWITCH_STATE;
         default: return -1;
       }
     }
     if (baseClass == ProgrammableSwitchActor.class)
     {
       switch (baseFeatureID)
       {
-        case ModelPackage.PROGRAMMABLE_SWITCH_ACTOR__SWITCH_STATE: return ModelPackage.MSERVO__SWITCH_STATE;
         default: return -1;
       }
     }

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -191,9 +191,8 @@ public synchronized void execute() {
 				try {
 					message = processRawMessage(raw);
 
-					message.debug(logger);
-
 					if (message != null) {
+						message.debug(logger);
 						if (message.getType() == MessageType.M) {
 							M_Message msg = (M_Message) message;
 							for (DeviceInformation di : msg.devices) {
@@ -334,7 +333,7 @@ public void internalReceiveCommand(String itemName, Command command) {
 		for (MaxCubeBindingProvider provider : providers) {
 			serialNumber = provider.getSerialNumber(itemName);
 
-			if (serialNumber.equals(null)) {
+			if (StringUtils.isBlank(serialNumber)) {
 				continue;
 			}
 

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -93,6 +93,7 @@ public static Device create(byte[] raw, List<Configuration> configurations) {
 		Device device = Device.create(rfAddress, configurations);
 		if (device == null) {
 			logger.warn("Can't create device from received message, returning NULL.");
+			return null;
 		}
 		
 		return Device.update(raw,configurations, device);

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -191,9 +191,8 @@ public synchronized void execute() {
 				try {
 					message = processRawMessage(raw);
 
-					message.debug(logger);
-
 					if (message != null) {
+						message.debug(logger);
 						if (message.getType() == MessageType.M) {
 							M_Message msg = (M_Message) message;
 							for (DeviceInformation di : msg.devices) {
@@ -334,7 +333,7 @@ public void internalReceiveCommand(String itemName, Command command) {
 		for (MaxCubeBindingProvider provider : providers) {
 			serialNumber = provider.getSerialNumber(itemName);
 
-			if (serialNumber.equals(null)) {
+			if (StringUtils.isBlank(serialNumber)) {
 				continue;
 			}
 

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -93,6 +93,7 @@ public static Device create(byte[] raw, List<Configuration> configurations) {
 		Device device = Device.create(rfAddress, configurations);
 		if (device == null) {
 			logger.warn("Can't create device from received message, returning NULL.");
+			return null;
 		}
 		
 		return Device.update(raw,configurations, device);

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/DimmableActor.java
Patch:
@@ -3,9 +3,9 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import java.math.BigDecimal;
+
 import org.openhab.binding.tinkerforge.internal.config.DeviceOptions;
 import org.openhab.core.library.types.IncreaseDecreaseType;
-import org.eclipse.emf.ecore.EObject;
 
 /**
  * <!-- begin-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/JoystickButton.java
Patch:
@@ -2,7 +2,7 @@
  */
 package org.openhab.binding.tinkerforge.internal.model;
 
-import org.openhab.binding.tinkerforge.internal.types.HighLowValue;
+import org.openhab.binding.tinkerforge.internal.types.OnOffValue;
 
 /**
  * <!-- begin-user-doc -->
@@ -17,10 +17,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getJoystickButton()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.JoystickDevice org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.DigitalValue>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.JoystickDevice org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.SwitchState> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.ButtonConfiguration>"
  * @generated
  */
-public interface JoystickButton extends JoystickDevice, MSensor<HighLowValue>
+public interface JoystickButton extends JoystickDevice, MSensor<OnOffValue>, MTFConfigConsumer<ButtonConfiguration>
 {
 
   /**

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/JoystickXPosition.java
Patch:
@@ -2,7 +2,6 @@
  */
 package org.openhab.binding.tinkerforge.internal.model;
 
-import java.math.BigDecimal;
 import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 /**

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/JoystickYPosition.java
Patch:
@@ -2,7 +2,6 @@
  */
 package org.openhab.binding.tinkerforge.internal.model;
 
-import java.math.BigDecimal;
 import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 /**

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickDCImpl.java
Patch:
@@ -2189,14 +2189,14 @@ public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
     {
       switch (derivedFeatureID)
       {
+        case ModelPackage.MBRICK_DC__SWITCH_STATE: return ModelPackage.SWITCH_SENSOR__SWITCH_STATE;
         default: return -1;
       }
     }
     if (baseClass == ProgrammableSwitchActor.class)
     {
       switch (derivedFeatureID)
       {
-        case ModelPackage.MBRICK_DC__SWITCH_STATE: return ModelPackage.PROGRAMMABLE_SWITCH_ACTOR__SWITCH_STATE;
         default: return -1;
       }
     }
@@ -2281,14 +2281,14 @@ public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
     {
       switch (baseFeatureID)
       {
+        case ModelPackage.SWITCH_SENSOR__SWITCH_STATE: return ModelPackage.MBRICK_DC__SWITCH_STATE;
         default: return -1;
       }
     }
     if (baseClass == ProgrammableSwitchActor.class)
     {
       switch (baseFeatureID)
       {
-        case ModelPackage.PROGRAMMABLE_SWITCH_ACTOR__SWITCH_STATE: return ModelPackage.MBRICK_DC__SWITCH_STATE;
         default: return -1;
       }
     }

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MServoImpl.java
Patch:
@@ -1828,14 +1828,14 @@ public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
     {
       switch (derivedFeatureID)
       {
+        case ModelPackage.MSERVO__SWITCH_STATE: return ModelPackage.SWITCH_SENSOR__SWITCH_STATE;
         default: return -1;
       }
     }
     if (baseClass == ProgrammableSwitchActor.class)
     {
       switch (derivedFeatureID)
       {
-        case ModelPackage.MSERVO__SWITCH_STATE: return ModelPackage.PROGRAMMABLE_SWITCH_ACTOR__SWITCH_STATE;
         default: return -1;
       }
     }
@@ -1907,14 +1907,14 @@ public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
     {
       switch (baseFeatureID)
       {
+        case ModelPackage.SWITCH_SENSOR__SWITCH_STATE: return ModelPackage.MSERVO__SWITCH_STATE;
         default: return -1;
       }
     }
     if (baseClass == ProgrammableSwitchActor.class)
     {
       switch (baseFeatureID)
       {
-        case ModelPackage.PROGRAMMABLE_SWITCH_ACTOR__SWITCH_STATE: return ModelPackage.MSERVO__SWITCH_STATE;
         default: return -1;
       }
     }

File: bundles/io/org.openhab.io.cv/src/main/java/org/openhab/io/cv/internal/resources/RrdResource.java
Patch:
@@ -255,7 +255,7 @@ private String convertToRrd(Map<Long, ArrayList<String>> data) {
 		buffer.append("[");
 		for (Long time : data.keySet()) {
 			// change to microseconds
-			buffer.append("[\"" + time + "\",");
+			buffer.append("[" + time + ",");
 			buffer.append("[");
 			buffer.append("\""+StringUtils.join(data.get(time), "\",\"")+"\"");
 			buffer.append("]],");

File: bundles/io/org.openhab.io.cv/src/main/java/org/openhab/io/cv/internal/resources/RrdResource.java
Patch:
@@ -255,7 +255,7 @@ private String convertToRrd(Map<Long, ArrayList<String>> data) {
 		buffer.append("[");
 		for (Long time : data.keySet()) {
 			// change to microseconds
-			buffer.append("[\"" + time + "\",");
+			buffer.append("[" + time + ",");
 			buffer.append("[");
 			buffer.append("\""+StringUtils.join(data.get(time), "\",\"")+"\"");
 			buffer.append("]],");

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -186,7 +186,7 @@ private String getTable(Item item) {
 			tableName = new String("Item" + rowId);
 			logger.debug("mySQL: new item {} is Item{}", itemName, rowId);
 		} catch (SQLException e) {
-			logger.error("mySQL: Could not create table for item '{}': ", itemName, e.getMessage());
+			logger.error("mySQL: Could not create item for '{}' in table 'Items' with statement '{}': {}", itemName, sqlCmd, e.getMessage());
 		} finally {
 			if (statement != null) {
 				try {

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/RFXComConnection.java
Patch:
@@ -43,7 +43,7 @@ public class RFXComConnection implements ManagedService {
 	private static byte[] setMode = null;
 
 	static RFXComSerialConnector connector = new RFXComSerialConnector();
-	private MessageLister eventLister = new MessageLister();
+	private final MessageLister eventLister = new MessageLister();
 	
 	public void activate() {
 		logger.debug("Activate");
@@ -138,13 +138,12 @@ private void connect() throws NoSuchPortException, PortInUseException, Unsupport
 		}
 	}
 	
-	private class MessageLister implements RFXComEventListener {
+	private static class MessageLister implements RFXComEventListener {
 
 		@Override
 		public void packetReceived(EventObject event, byte[] data) {
 
 			try {
-				
 				RFXComMessageInterface obj = RFXComMessageFactory.getMessageInterface(data);
 				logger.debug("Data received:\n{}", obj.toString());
 				

File: bundles/binding/org.openhab.binding.snmp/src/main/java/org/openhab/binding/snmp/internal/SnmpBinding.java
Patch:
@@ -56,6 +56,7 @@
  * 
  * @author Thomas.Eichstaedt-Engelen
  * @author Chris Jackson - modified binding to support polling SNMP OIDs (SNMP GET) and setting values (SNMP SET).
+ * @author Jan N. Klug - modified binding to change protocol version
  * @since 0.9.0
  */
 public class SnmpBinding extends AbstractActiveBinding<SnmpBindingProvider>
@@ -286,7 +287,7 @@ public void internalReceiveCommand(String itemName, Command command) {
 			target.setAddress(providerCmd.getAddress(itemName, command));
 			target.setRetries(retries);
 			target.setTimeout(timeout);
-			target.setVersion(SnmpConstants.version1);
+			target.setVersion(providerCmd.getSnmpVersion(itemName, command));
 
 		Variable var = providerCmd.getValue(itemName, command);
 		OID oid = providerCmd.getOID(itemName, command);
@@ -339,7 +340,7 @@ public void execute() {
 						target.setAddress(provider.getAddress(itemName));
 						target.setRetries(retries);
 						target.setTimeout(timeout);
-						target.setVersion(SnmpConstants.version1);
+						target.setVersion(provider.getSnmpVersion(itemName));
 
 					// Create the PDU
 					PDU pdu = new PDU();

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/CoreItemFactory.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class CoreItemFactory implements ItemFactory {
 	
-	private static String[] ITEM_TYPES = new String[] { "Switch", "Rollershutter", "Contact", "String", "Number", "Dimmer", "DateTime", "Color", "Point" };
+	private static String[] ITEM_TYPES = new String[] { "Switch", "Rollershutter", "Contact", "String", "Number", "Dimmer", "DateTime", "Color", "Location" };
 
 	/**
 	 * @{inheritDoc}

File: bundles/model/org.openhab.model.item.ui/src/org/openhab/model/ui/contentassist/ItemsProposalProvider.java
Patch:
@@ -40,7 +40,7 @@ public class ItemsProposalProvider extends AbstractItemsProposalProvider {
 		ITEMTYPES.add("Contact");
 		ITEMTYPES.add("Rollershutter");
 		ITEMTYPES.add("DateTime");
-		ITEMTYPES.add("Point");
+		ITEMTYPES.add("Location");
 	}
 	
 	@Override

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java
Patch:
@@ -198,7 +198,7 @@ public Widget getDefaultWidget(Class<? extends Item> itemType, String itemName)
 			return SitemapFactory.eINSTANCE.createText();
 		}
 		if (itemType.equals(LocationItem.class)) {
-			return SitemapFactory.eINSTANCE.createText();
+			return SitemapFactory.eINSTANCE.createMapview();
 		}
 		if (itemType.equals(DateTimeItem.class)) {
 			return SitemapFactory.eINSTANCE.createText();

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/proxy/ProxyServlet.java
Patch:
@@ -27,6 +27,7 @@
 import org.openhab.io.net.http.SecureHttpContext;
 import org.openhab.model.core.ModelRepository;
 import org.openhab.model.sitemap.Image;
+import org.openhab.model.sitemap.Mapview;
 import org.openhab.model.sitemap.Sitemap;
 import org.openhab.model.sitemap.Video;
 import org.openhab.model.sitemap.Webview;
@@ -155,6 +156,8 @@ protected void doGet(HttpServletRequest request,
 			} else if(widget instanceof Webview) {
 				Webview webview = (Webview) widget;
 				uriString = baseUrl + webview.getUrl();
+			} else if(widget instanceof Mapview) {
+				uriString = baseUrl;
 			} else {
 				if(widget==null) {
 					throw new ServletException("Widget '" + widgetId + "' could not be found!");

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/CoreItemFactory.java
Patch:
@@ -14,6 +14,7 @@
 import org.openhab.core.library.items.ContactItem;
 import org.openhab.core.library.items.DateTimeItem;
 import org.openhab.core.library.items.DimmerItem;
+import org.openhab.core.library.items.LocationItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.StringItem;
@@ -28,7 +29,7 @@
  */
 public class CoreItemFactory implements ItemFactory {
 	
-	private static String[] ITEM_TYPES = new String[] { "Switch", "Rollershutter", "Contact", "String", "Number", "Dimmer", "DateTime", "Color" };
+	private static String[] ITEM_TYPES = new String[] { "Switch", "Rollershutter", "Contact", "String", "Number", "Dimmer", "DateTime", "Color", "Location" };
 
 	/**
 	 * @{inheritDoc}
@@ -42,6 +43,7 @@ public GenericItem createItem(String itemTypeName, String itemName) {
 		if (itemTypeName.equals(ITEM_TYPES[5])) return new DimmerItem(itemName);
 		if (itemTypeName.equals(ITEM_TYPES[6])) return new DateTimeItem(itemName);
 		if (itemTypeName.equals(ITEM_TYPES[7])) return new ColorItem(itemName);
+		if (itemTypeName.equals(ITEM_TYPES[8])) return new LocationItem(itemName);
 		else return null;
 	}
 	

File: bundles/model/org.openhab.model.item.ui/src/org/openhab/model/ui/contentassist/ItemsProposalProvider.java
Patch:
@@ -40,6 +40,7 @@ public class ItemsProposalProvider extends AbstractItemsProposalProvider {
 		ITEMTYPES.add("Contact");
 		ITEMTYPES.add("Rollershutter");
 		ITEMTYPES.add("DateTime");
+		ITEMTYPES.add("Location");
 	}
 	
 	@Override

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/proxy/ProxyServlet.java
Patch:
@@ -27,6 +27,7 @@
 import org.openhab.io.net.http.SecureHttpContext;
 import org.openhab.model.core.ModelRepository;
 import org.openhab.model.sitemap.Image;
+import org.openhab.model.sitemap.Mapview;
 import org.openhab.model.sitemap.Sitemap;
 import org.openhab.model.sitemap.Video;
 import org.openhab.model.sitemap.Webview;
@@ -155,6 +156,8 @@ protected void doGet(HttpServletRequest request,
 			} else if(widget instanceof Webview) {
 				Webview webview = (Webview) widget;
 				uriString = baseUrl + webview.getUrl();
+			} else if(widget instanceof Mapview) {
+				uriString = baseUrl;
 			} else {
 				if(widget==null) {
 					throw new ServletException("Widget '" + widgetId + "' could not be found!");

File: bundles/action/org.openhab.action.mail/src/main/java/org/openhab/action/mail/internal/Mail.java
Patch:
@@ -122,7 +122,7 @@ static public boolean sendMail(
 				logger.debug("Sent email to '{}' with subject '{}'.", to, subject);
 				success = true;
 			} catch (EmailException e) {
-				logger.error("Could not send e-mail to '" + to + "‘.", e);
+				logger.error("Could not send e-mail to '" + to + "'.", e);
 			}
 		} else {
 			logger.error("Cannot send e-mail because of missing configuration settings. The current settings are: " +

File: bundles/binding/org.openhab.binding.systeminfo/src/main/java/org/openhab/binding/systeminfo/internal/SysteminfoGenericBindingProvider.java
Patch:
@@ -55,8 +55,8 @@ public void processBindingConfiguration(String context, Item item, String bindin
 
 		String[] configParts = bindingConfig.trim().split(":");
 
-		if (configParts.length < 2 && configParts.length > 3) {
-			throw new BindingConfigParseException("Systeminf binding must contain 2-3 parts separated by ':'");
+		if (configParts.length < 2 || configParts.length > 3) {
+			throw new BindingConfigParseException("Systeminfo binding must contain 2-3 parts separated by ':'");
 		}
 
 		String commandType = configParts[0].trim();

File: bundles/action/org.openhab.action.mail/src/main/java/org/openhab/action/mail/internal/Mail.java
Patch:
@@ -122,7 +122,7 @@ static public boolean sendMail(
 				logger.debug("Sent email to '{}' with subject '{}'.", to, subject);
 				success = true;
 			} catch (EmailException e) {
-				logger.error("Could not send e-mail to '" + to + "‘.", e);
+				logger.error("Could not send e-mail to '" + to + "'.", e);
 			}
 		} else {
 			logger.error("Cannot send e-mail because of missing configuration settings. The current settings are: " +

File: bundles/binding/org.openhab.binding.systeminfo/src/main/java/org/openhab/binding/systeminfo/internal/SysteminfoGenericBindingProvider.java
Patch:
@@ -55,8 +55,8 @@ public void processBindingConfiguration(String context, Item item, String bindin
 
 		String[] configParts = bindingConfig.trim().split(":");
 
-		if (configParts.length < 2 && configParts.length > 3) {
-			throw new BindingConfigParseException("Systeminf binding must contain 2-3 parts separated by ':'");
+		if (configParts.length < 2 || configParts.length > 3) {
+			throw new BindingConfigParseException("Systeminfo binding must contain 2-3 parts separated by ':'");
 		}
 
 		String commandType = configParts[0].trim();

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/protocol/APIMessage.java
Patch:
@@ -332,7 +332,7 @@ private void parseAPIMessage() {
 						apiMessageType = APIMessageType.PARTITION_EVENT;
 						break;
 					case PartitionArmed: /*652*/
-						apiName = "Partition Armed (0=Away, 1=Stay, 2=ZEA, 3=ZES)";
+						apiName = "Partition Armed";
 						apiDescription = apiCodeReceived + ": Partition has been armed.";
 						partition = Integer.parseInt(apiMessage.substring(3, 4));
 						mode = apiMessage.substring(4);

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/EBusBinding.java
Patch:
@@ -330,4 +330,4 @@ public void onTelegramReceived(EBusTelegram telegram) {
 		}
 	}
 
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/EBusGenericBindingProvider.java
Patch:
@@ -223,4 +223,4 @@ public Byte getTelegramSource(String itemName) {
 	public Byte getTelegramDestination(String itemName) {
 		return get(itemName, "dst", null);
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/EBusTelegram.java
Patch:
@@ -156,4 +156,4 @@ public byte[] getSlaveData() {
 		System.arraycopy(data.array(), getDataLen()+8, buffer, 0, l);
 		return buffer;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/connection/EBusTCPConnector.java
Patch:
@@ -74,4 +74,4 @@ public boolean disconnect() throws IOException  {
 		return true;
 	}
 
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.ebus/src/main/java/org/openhab/binding/ebus/internal/parser/EBusTelegramParser.java
Patch:
@@ -409,4 +409,4 @@ public Map<String, Object> parse(EBusTelegram telegram) {
 		return valueRegistry;
 	}
 
-}
\ No newline at end of file
+}

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java
Patch:
@@ -61,7 +61,7 @@ public void chatCreated(Chat chat, boolean arg1) {
 
 	public void processMessage(Chat chat, Message msg) {
 		logger.debug("Received XMPP message: {} of type {}", msg.getBody(), msg.getType());
-		if (msg.getType() == Message.Type.error) {
+		if (msg.getType() == Message.Type.error || msg.getBody() == null) {
 			return;
 		}
 		String cmd = msg.getBody();

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/__binding-name__BindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConfigReader.java
Patch:
@@ -135,7 +135,7 @@ static long readConfig(Dictionary<String, ?> config, Map<String, AnelConnectorTh
 		// we collected all configs, now let's create the actual threads
 		for (String device : anelConfigs.keySet()) {
 			final AnelConfig anelConfig = anelConfigs.get(device);
-			final AnelConnectorThread thread = new AnelConnectorThread(anelConfig.host, anelConfig.receivePort,
+			final AnelConnectorThread thread = new AnelConnectorThread(device, anelConfig.host, anelConfig.receivePort,
 					anelConfig.sendPort, anelConfig.user, anelConfig.password, bindingFacade, cachePeriod);
 			threads.put(device, thread);
 		}

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/Keypad.java
Patch:
@@ -30,7 +30,7 @@
 public class Keypad extends DSCAlarmDevice{
 	private static final Logger logger = LoggerFactory.getLogger(Keypad.class);
 
-	DSCAlarmDeviceProperties keypadProperties = new DSCAlarmDeviceProperties();
+	public DSCAlarmDeviceProperties keypadProperties = new DSCAlarmDeviceProperties();
 
 	/**
 	 * Constructor

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/Partition.java
Patch:
@@ -32,7 +32,7 @@
 public class Partition extends DSCAlarmDevice{
 	private static final Logger logger = LoggerFactory.getLogger(Partition.class);
 
-	DSCAlarmDeviceProperties partitionProperties = new DSCAlarmDeviceProperties();
+	public DSCAlarmDeviceProperties partitionProperties = new DSCAlarmDeviceProperties();
 
 	/**
 	 * Constructor
@@ -123,13 +123,11 @@ public void handleEvent(Item item, DSCAlarmBindingConfig config, EventPublisher
 								case 650:
 								case 653:
 									state = 1;
-									partitionProperties.setState(StateType.GENERAL_STATE, state, strStatus);
 									break;
 								case 651:
 								case 672:
 								case 673:
 									state = 0;
-									partitionProperties.setState(StateType.GENERAL_STATE, 0, strStatus);
 									break;
 								case 654:
 									partitionProperties.setState(StateType.ALARM_STATE, 1, strStatus);

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/Zone.java
Patch:
@@ -31,7 +31,7 @@
 public class Zone extends DSCAlarmDevice{
 	private static final Logger logger = LoggerFactory.getLogger(Zone.class);
 
-	DSCAlarmDeviceProperties zoneProperties = new DSCAlarmDeviceProperties();
+	public DSCAlarmDeviceProperties zoneProperties = new DSCAlarmDeviceProperties();
 	
 	/**
 	 * Constructor

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/DSMRMeter.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * DSMR Meter represents a meter for this binding.
  * <p>
- * The main Electricity meter {@link DSMRMeterType}.ELECTRICTY is available 
+ * The main Electricity meter {@link DSMRMeterType}.ELECTRICTY is available
  * implicit and an instance of this class for this meter is not necessary.
  * 
  * @author M. Volaart

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/DSMRMeterType.java
Patch:
@@ -30,7 +30,7 @@ public enum DSMRMeterType {
 	/** Generic meter (generic.channel) */
 	GENERIC("generic.channel"),
 	/** Slave electricity meter (slaveelectricity.channel) */
-	SLAVE_ELECTRICITY("slavelectricity.channel");
+	SLAVE_ELECTRICITY("slaveelectricity.channel");
 
 	/** Channel configuration key for openhab.cfg */
 	public final String channelConfigKey;

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/cosem/CosemFloat.java
Patch:
@@ -46,7 +46,8 @@ protected DecimalType parse(String cosemValue) throws ParseException {
 		try {
 			return new DecimalType(Float.parseFloat(cosemValue));
 		} catch (NumberFormatException nfe) {
-			throw new ParseException("Failed to parse value " + value + " as float", 0);
+			throw new ParseException("Failed to parse value " + value
+					+ " as float", 0);
 		}
 	}
 }

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/cosem/CosemString.java
Patch:
@@ -32,7 +32,8 @@ public CosemString(String unit, String bindingSuffix) {
 	}
 
 	/**
-	 * Parses a String value (that represents an integer) to an openHAB StringType
+	 * Parses a String value (that represents an integer) to an openHAB
+	 * StringType
 	 * 
 	 * @param cosemValue
 	 *            the value to parse

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/cosem/CosemValueDescriptor.java
Patch:
@@ -47,6 +47,7 @@ public CosemValueDescriptor(
 
 	/**
 	 * Returns the class of the CosemValue
+	 * 
 	 * @return the class of the CosemValue
 	 */
 	public Class<? extends CosemValue<? extends State>> getCosemValueClass() {
@@ -55,14 +56,15 @@ public Class<? extends CosemValue<? extends State>> getCosemValueClass() {
 
 	/**
 	 * Returns the unit
+	 * 
 	 * @return the unit
 	 */
 	public String getUnit() {
 		return unit;
 	}
 
 	/**
-	 * Returns the DSMR item id 
+	 * Returns the DSMR item id
 	 * 
 	 * @return the DSMR item id
 	 */

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/ConverterFactory.java
Patch:
@@ -8,6 +8,7 @@
  */
 package org.openhab.binding.homematic.internal.converter;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -47,7 +48,7 @@ public Converter<? extends State> createConverter(Item item, HomematicBindingCon
 			return ((ValueBindingConfig) bindingConfig).getConverter();
 		}
 
-		List<Class<? extends State>> acceptedTypes = item.getAcceptedDataTypes();
+		List<Class<? extends State>> acceptedTypes = new ArrayList<Class<? extends State>>(item.getAcceptedDataTypes());
 		Collections.sort(acceptedTypes, typeComparator);
 
 		for (Class<? extends State> clazz : acceptedTypes) {

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java
Patch:
@@ -178,8 +178,7 @@ else if (deviceConfig.getCommandType().equals(BindingType.rgb)) {
 				logger.debug("milight: item is of type rgb");
 				if (command instanceof HSBType) {
 					sendColor(command, bridgeId, bulb);
-				}				
-				if (command instanceof PercentType) {
+				} else if (command instanceof PercentType) {
 					sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);
 				}
 	        }

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/MiosActivator.java
Patch:
@@ -50,8 +50,7 @@ public void stop(BundleContext bc) throws Exception {
 	/**
 	 * Returns the OSGi BundleContext of this bundle.
 	 * 
-	 * The OSGi BundleContext is needed to talk with other services running
-	 * under OSGi.
+	 * The OSGi BundleContext is needed to talk with other services running under OSGi.
 	 * <p>
 	 * eg. openHAB's {@code TransformationService}.
 	 * 

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/config/ParameterDefaults.java
Patch:
@@ -14,8 +14,7 @@ public class ParameterDefaults {
 	private String mCommandTransform;
 	private String mFormatted;
 
-	private ParameterDefaults(String formatted, String in, String out,
-			String command) {
+	private ParameterDefaults(String formatted, String in, String out, String command) {
 		mFormatted = formatted;
 		mInTransform = in;
 		mOutTransform = out;

File: bundles/io/org.openhab.io.dropbox/src/main/java/org/openhab/io/dropbox/internal/DropboxSynchronizer.java
Patch:
@@ -176,7 +176,7 @@ private void activateSynchronizer() {
 	 * @throws DbxException if there are technical or application level errors 
 	 * in the Dropbox communication
 	 * 
-	 * @see <a href="http://code.google.com/p/openhab/wiki/DropboxIOBundle">openHAB Dropbox Wiki</a>
+	 * @see <a href="https://github.com/openhab/openhab/wiki/Dropbox-IO">openHAB Dropbox IO Wiki</a>
 	 */
 	public void startAuthentication() throws DbxException {
 		DbxWebAuthNoRedirect webAuth = new DbxWebAuthNoRedirect(requestConfig, appInfo);
@@ -198,7 +198,7 @@ public void startAuthentication() throws DbxException {
 	 * @throws DbxException if there are technical or application level errors 
 	 * in the Dropbox communication
 	 * 
-	 * @see <a href="http://code.google.com/p/openhab/wiki/DropboxIOBundle">openHAB Dropbox Wiki</a>
+	 * @see <a href="https://github.com/openhab/openhab/wiki/Dropbox-IO">openHAB Dropbox IO Wiki</a>
 	 */
 	public void finishAuthentication(String code) throws DbxException {
 		DbxWebAuthNoRedirect webAuth = new DbxWebAuthNoRedirect(requestConfig, appInfo);

File: bundles/io/org.openhab.io.dropbox/src/main/java/org/openhab/io/dropbox/internal/DropboxSynchronizer.java
Patch:
@@ -176,7 +176,7 @@ private void activateSynchronizer() {
 	 * @throws DbxException if there are technical or application level errors 
 	 * in the Dropbox communication
 	 * 
-	 * @see <a href="http://code.google.com/p/openhab/wiki/DropboxIOBundle">openHAB Dropbox Wiki</a>
+	 * @see <a href="https://github.com/openhab/openhab/wiki/Dropbox-IO">openHAB Dropbox IO Wiki</a>
 	 */
 	public void startAuthentication() throws DbxException {
 		DbxWebAuthNoRedirect webAuth = new DbxWebAuthNoRedirect(requestConfig, appInfo);
@@ -198,7 +198,7 @@ public void startAuthentication() throws DbxException {
 	 * @throws DbxException if there are technical or application level errors 
 	 * in the Dropbox communication
 	 * 
-	 * @see <a href="http://code.google.com/p/openhab/wiki/DropboxIOBundle">openHAB Dropbox Wiki</a>
+	 * @see <a href="https://github.com/openhab/openhab/wiki/Dropbox-IO">openHAB Dropbox IO Wiki</a>
 	 */
 	public void finishAuthentication(String code) throws DbxException {
 		DbxWebAuthNoRedirect webAuth = new DbxWebAuthNoRedirect(requestConfig, appInfo);

File: bundles/binding/org.openhab.binding.knx.test/src/test/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapperTest.java
Patch:
@@ -984,7 +984,8 @@ public void testTypeMappingTime_10_001() throws KNXFormatException {
 		 * 
 		 */
 		type=testToType(dpt, new byte[] { 0x00, 0x00, 0x00 }, DateTimeType.class);
-		testToDPTValue(dpt, type, "00:00:00");
+		String today=String.format(Locale.US, "%1$ta", Calendar.getInstance());
+		testToDPTValue(dpt, type, today+", 00:00:00");
 
 		/*
 		 * Set day to Monday, 0 hours, 0 minutes and 0 seconds January 5th, 1970 was a Monday

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -115,7 +115,7 @@ public void activate() {
 		// Initialise the type array
 		sqlTypes.put("COLORITEM", "VARCHAR(70)");
 		sqlTypes.put("CONTACTITEM", "VARCHAR(6)");
-		sqlTypes.put("DATETIMEITEM", "DATETIME(3)");
+		sqlTypes.put("DATETIMEITEM", "DATETIME");
 		sqlTypes.put("DIMMERITEM", "TINYINT");
 		sqlTypes.put("GROUPITEM", "DOUBLE");
 		sqlTypes.put("NUMBERITEM", "DOUBLE");

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -115,7 +115,7 @@ public void activate() {
 		// Initialise the type array
 		sqlTypes.put("COLORITEM", "VARCHAR(70)");
 		sqlTypes.put("CONTACTITEM", "VARCHAR(6)");
-		sqlTypes.put("DATETIMEITEM", "DATETIME(3)");
+		sqlTypes.put("DATETIMEITEM", "DATETIME");
 		sqlTypes.put("DIMMERITEM", "TINYINT");
 		sqlTypes.put("GROUPITEM", "DOUBLE");
 		sqlTypes.put("NUMBERITEM", "DOUBLE");

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/Keypad.java
Patch:
@@ -30,7 +30,7 @@
 public class Keypad extends DSCAlarmDevice{
 	private static final Logger logger = LoggerFactory.getLogger(Keypad.class);
 
-	DSCAlarmDeviceProperties keypadProperties = new DSCAlarmDeviceProperties();
+	public DSCAlarmDeviceProperties keypadProperties = new DSCAlarmDeviceProperties();
 
 	/**
 	 * Constructor

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/Partition.java
Patch:
@@ -32,7 +32,7 @@
 public class Partition extends DSCAlarmDevice{
 	private static final Logger logger = LoggerFactory.getLogger(Partition.class);
 
-	DSCAlarmDeviceProperties partitionProperties = new DSCAlarmDeviceProperties();
+	public DSCAlarmDeviceProperties partitionProperties = new DSCAlarmDeviceProperties();
 
 	/**
 	 * Constructor
@@ -123,13 +123,11 @@ public void handleEvent(Item item, DSCAlarmBindingConfig config, EventPublisher
 								case 650:
 								case 653:
 									state = 1;
-									partitionProperties.setState(StateType.GENERAL_STATE, state, strStatus);
 									break;
 								case 651:
 								case 672:
 								case 673:
 									state = 0;
-									partitionProperties.setState(StateType.GENERAL_STATE, 0, strStatus);
 									break;
 								case 654:
 									partitionProperties.setState(StateType.ALARM_STATE, 1, strStatus);

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/Zone.java
Patch:
@@ -31,7 +31,7 @@
 public class Zone extends DSCAlarmDevice{
 	private static final Logger logger = LoggerFactory.getLogger(Zone.class);
 
-	DSCAlarmDeviceProperties zoneProperties = new DSCAlarmDeviceProperties();
+	public DSCAlarmDeviceProperties zoneProperties = new DSCAlarmDeviceProperties();
 	
 	/**
 	 * Constructor

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/util/ThreadPool.java
Patch:
@@ -79,10 +79,9 @@ private class PoolThread extends Thread {
      * up available tasks from the <tt>LinkedQueue</tt>.
      */
     public void run() {
-      //System.out.println("Running PoolThread");
+      // Running PoolThread
       do {
         try {
-          //System.out.println(this.toString());
           ((Runnable) m_TaskPool.take()).run();
         } catch (Exception ex) {
           //FIXME: Handle somehow!?

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusGenericBindingProvider.java
Patch:
@@ -85,7 +85,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 			addBindingConfig(item, config);
 		}
 		else {
-			logger.warn("bindingConfig is NULL (item=" + item + ") -> processing bindingConfig aborted!");
+			logger.warn("bindingConfig is NULL (item={}) -> processing bindingConfig aborted!", item);
 		}
 	}
 

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusTcpSlave.java
Patch:
@@ -54,7 +54,7 @@ public boolean connect() {
 			if (connection == null)
 				connection = new TCPMasterConnection(InetAddress.getByName(getHost()));
 		} catch (UnknownHostException e) {
-			logger.debug("ModbusSlave: Error connecting to master: " + e.getMessage());				
+			logger.debug("ModbusSlave: Error connecting to master: {}", e.getMessage());
 			connection = null;
 			return false;
 		}
@@ -65,7 +65,7 @@ public boolean connect() {
 				((ModbusTCPTransaction)transaction).setConnection(connection);
 				((ModbusTCPTransaction)transaction).setReconnecting(false);
 			} catch (Exception e) {
-				logger.debug("ModbusSlave: Error connecting to master: " + e.getMessage());				
+				logger.debug("ModbusSlave: Error connecting to master: {}", e.getMessage());
 				return false;
 			}
 		return true;

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusUdpSlave.java
Patch:
@@ -46,7 +46,7 @@ public boolean connect() {
 			if (connection == null)
 				connection = new UDPMasterConnection(InetAddress.getByName(getHost()));
 		} catch (UnknownHostException e) {
-			logger.debug("ModbusSlave: Error connecting to master: " + e.getMessage());				
+			logger.debug("ModbusSlave: Error connecting to master: {}", e.getMessage());
 			connection = null;
 			return false;
 		}
@@ -56,7 +56,7 @@ public boolean connect() {
 				connection.connect();
                                 ((ModbusUDPTransaction)transaction).setTerminal(connection.getTerminal());
 			} catch (Exception e) {
-				logger.debug("ModbusSlave: Error connecting to master: " + e.getMessage());				
+				logger.debug("ModbusSlave: Error connecting to master: {}", e.getMessage());
 				return false;
 			}
 		return true;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveWakeUpCommandClass.java
Patch:
@@ -502,7 +502,7 @@ public synchronized void setSleepTimer() {
 		timerTask = new WakeupTimerTask(this);
 
 		// Start the timer
-		timer.schedule(timerTask, 2000);
+		timer.schedule(timerTask, 1000);
 	}
 
 	public synchronized void resetSleepTimer() {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbProduct.java
Patch:
@@ -42,12 +42,12 @@ private class ZWaveDbConfigFile {
 		String Filename;
 	}
 
-	public String getConfigFile(Double version) {
+	public String getConfigFile(String version) {
 		if(ConfigFile == null) {
 			return null;
 		}
 
-		Version vIn = new Version(Double.toString(version));
+		Version vIn = new Version(version);
 		String filename = null;
 		// Check for a version'ed file
 		// There are multiple permutations of the file that we need to account for -:

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveProductDatabase.java
Patch:
@@ -42,7 +42,7 @@ public class ZWaveProductDatabase {
 	ZWaveDbProduct selProduct = null;
 
 	ZWaveDbProductFile productFile = null;
-	double productVersion;
+	String productVersion;
 
 	public ZWaveProductDatabase() {
 		loadDatabase();
@@ -194,7 +194,7 @@ public boolean FindManufacturer(int manufacturerId) {
 	 *            The product ID
 	 * @return true if the product was found
 	 */
-	public boolean FindProduct(int manufacturerId, int productType, int productId, double version) {
+	public boolean FindProduct(int manufacturerId, int productType, int productId, String version) {
 		if (FindManufacturer(manufacturerId) == false) {
 			return false;
 		}
@@ -212,7 +212,7 @@ public boolean FindProduct(int manufacturerId, int productType, int productId, d
 	 *            The product ID
 	 * @return true if the product was found
 	 */
-	public boolean FindProduct(int productType, int productId, double version) {
+	public boolean FindProduct(int productType, int productId, String version) {
 		if (selManufacturer == null) {
 			return false;
 		}

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/Keypad.java
Patch:
@@ -30,7 +30,7 @@
 public class Keypad extends DSCAlarmDevice{
 	private static final Logger logger = LoggerFactory.getLogger(Keypad.class);
 
-	DSCAlarmDeviceProperties keypadProperties = new DSCAlarmDeviceProperties();
+	public DSCAlarmDeviceProperties keypadProperties = new DSCAlarmDeviceProperties();
 
 	/**
 	 * Constructor

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/Partition.java
Patch:
@@ -32,7 +32,7 @@
 public class Partition extends DSCAlarmDevice{
 	private static final Logger logger = LoggerFactory.getLogger(Partition.class);
 
-	DSCAlarmDeviceProperties partitionProperties = new DSCAlarmDeviceProperties();
+	public DSCAlarmDeviceProperties partitionProperties = new DSCAlarmDeviceProperties();
 
 	/**
 	 * Constructor
@@ -123,13 +123,11 @@ public void handleEvent(Item item, DSCAlarmBindingConfig config, EventPublisher
 								case 650:
 								case 653:
 									state = 1;
-									partitionProperties.setState(StateType.GENERAL_STATE, state, strStatus);
 									break;
 								case 651:
 								case 672:
 								case 673:
 									state = 0;
-									partitionProperties.setState(StateType.GENERAL_STATE, 0, strStatus);
 									break;
 								case 654:
 									partitionProperties.setState(StateType.ALARM_STATE, 1, strStatus);

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/Zone.java
Patch:
@@ -31,7 +31,7 @@
 public class Zone extends DSCAlarmDevice{
 	private static final Logger logger = LoggerFactory.getLogger(Zone.class);
 
-	DSCAlarmDeviceProperties zoneProperties = new DSCAlarmDeviceProperties();
+	public DSCAlarmDeviceProperties zoneProperties = new DSCAlarmDeviceProperties();
 	
 	/**
 	 * Constructor

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/net/SerialConnection.java
Patch:
@@ -114,7 +114,7 @@ public void open() throws Exception {
       m_SerialPort = (SerialPort)
           m_PortIdentifyer.open("Modbus Serial Master", 30000);
     } catch (PortInUseException e) {
-      logger.debug(e.getMessage());
+      logger.debug("open port failed: " + e.getMessage());
 
       throw new Exception(e.getMessage());
     }
@@ -127,7 +127,7 @@ public void open() throws Exception {
     } catch (Exception e) {
       //ensure it is closed
       m_SerialPort.close();
-      logger.debug(e.getMessage());
+      logger.debug("parameter setup failed: " + e.getMessage());
       throw e;
     }
 

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/Keypad.java
Patch:
@@ -30,7 +30,7 @@
 public class Keypad extends DSCAlarmDevice{
 	private static final Logger logger = LoggerFactory.getLogger(Keypad.class);
 
-	DSCAlarmDeviceProperties keypadProperties = new DSCAlarmDeviceProperties();
+	public DSCAlarmDeviceProperties keypadProperties = new DSCAlarmDeviceProperties();
 
 	/**
 	 * Constructor

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/Partition.java
Patch:
@@ -32,7 +32,7 @@
 public class Partition extends DSCAlarmDevice{
 	private static final Logger logger = LoggerFactory.getLogger(Partition.class);
 
-	DSCAlarmDeviceProperties partitionProperties = new DSCAlarmDeviceProperties();
+	public DSCAlarmDeviceProperties partitionProperties = new DSCAlarmDeviceProperties();
 
 	/**
 	 * Constructor
@@ -123,13 +123,11 @@ public void handleEvent(Item item, DSCAlarmBindingConfig config, EventPublisher
 								case 650:
 								case 653:
 									state = 1;
-									partitionProperties.setState(StateType.GENERAL_STATE, state, strStatus);
 									break;
 								case 651:
 								case 672:
 								case 673:
 									state = 0;
-									partitionProperties.setState(StateType.GENERAL_STATE, 0, strStatus);
 									break;
 								case 654:
 									partitionProperties.setState(StateType.ALARM_STATE, 1, strStatus);

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/model/Zone.java
Patch:
@@ -31,7 +31,7 @@
 public class Zone extends DSCAlarmDevice{
 	private static final Logger logger = LoggerFactory.getLogger(Zone.class);
 
-	DSCAlarmDeviceProperties zoneProperties = new DSCAlarmDeviceProperties();
+	public DSCAlarmDeviceProperties zoneProperties = new DSCAlarmDeviceProperties();
 	
 	/**
 	 * Constructor

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBinding.java
Patch:
@@ -134,8 +134,8 @@ protected void execute() {
                                 for (Module module : oauthCredentials.deviceListResponse.getModules()) {
                                     if (module.getId().equals(moduleId)) {
                                         switch (measureType) {
-                                            case BATTERYVP: state = new DecimalType(module.getBatteryVp()); break;
-                                            case RFSTATUS: state = new DecimalType(module.getRfStatus()); break;
+                                            case BATTERYVP: state = new DecimalType(module.getBatteryLevel()); break;
+                                            case RFSTATUS: state = new DecimalType(module.getRfLevel()); break;
                                         }
                                     }
                                 }
@@ -150,7 +150,7 @@ protected void execute() {
                                             case LATITUDE: state = stationPosition.getLatitude(); break;
                                             case LONGITUDE: state = stationPosition.getLongitude(); break;
                                             case ALTITUDE: state = stationPosition.getAltitude(); break;
-                                            case WIFISTATUS: state = new DecimalType(device.getWifiStatus()); break;
+                                            case WIFISTATUS: state = new DecimalType(device.getWifiLevel()); break;
                                             case COORDINATE: state = stationPosition; break;
                                         }
                                     }

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -10,6 +10,7 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -60,7 +61,7 @@ public class KNXBinding extends AbstractBinding<KNXBindingProvider> implements
 	/**
 	 * used to store events that we have sent ourselves; we need to remember them for not reacting to them
 	 */
-	private List<String> ignoreEventList = new ArrayList<String>();
+	private List<String> ignoreEventList = Collections.synchronizedList(new ArrayList<String>());
 
 	private KNXBusReaderScheduler mKNXBusReaderScheduler = new KNXBusReaderScheduler();
 
@@ -117,8 +118,7 @@ protected void internalReceiveUpdate(String itemName, State newState) {
 
 	private boolean isEcho(String itemName, Type type) {
 		String ignoreEventListKey = itemName + type.toString();
-		if (ignoreEventList.contains(ignoreEventListKey)) {
-			ignoreEventList.remove(ignoreEventListKey);
+		if (ignoreEventList.remove(ignoreEventListKey)) {
 			logger.trace("We received this event (item='{}', state='{}') from KNX, so we don't send it back again -> ignore!", itemName, type.toString());
 			return true;
 		}

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -10,6 +10,7 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -60,7 +61,7 @@ public class KNXBinding extends AbstractBinding<KNXBindingProvider> implements
 	/**
 	 * used to store events that we have sent ourselves; we need to remember them for not reacting to them
 	 */
-	private List<String> ignoreEventList = new ArrayList<String>();
+	private List<String> ignoreEventList = Collections.synchronizedList(new ArrayList<String>());
 
 	private KNXBusReaderScheduler mKNXBusReaderScheduler = new KNXBusReaderScheduler();
 
@@ -117,8 +118,7 @@ protected void internalReceiveUpdate(String itemName, State newState) {
 
 	private boolean isEcho(String itemName, Type type) {
 		String ignoreEventListKey = itemName + type.toString();
-		if (ignoreEventList.contains(ignoreEventListKey)) {
-			ignoreEventList.remove(ignoreEventListKey);
+		if (ignoreEventList.remove(ignoreEventListKey)) {
 			logger.trace("We received this event (item='{}', state='{}') from KNX, so we don't send it back again -> ignore!", itemName, type.toString());
 			return true;
 		}

File: bundles/binding/org.openhab.binding.nest/src/main/java/org/openhab/binding/nest/internal/NestBinding.java
Patch:
@@ -285,7 +285,7 @@ private boolean isEcho(String itemName, State state) {
 		String ignoreEventSetKey = itemName + state.toString();
 		if (ignoreEventSet.contains(ignoreEventSetKey)) {
 			ignoreEventSet.remove(ignoreEventSetKey);
-			logger.debug(
+			logger.trace(
 					"We received this event (item='{}', state='{}') from Nest, so we don't send it back again -> ignore!",
 					itemName, state);
 			return true;
@@ -319,7 +319,7 @@ private void updateNest(final String itemName, final State newState) {
 		} else {
 
 			try {
-				logger.trace("About to set property '{}' to '{}'", property, newState);
+				logger.debug("About to set property '{}' to '{}'", property, newState);
 
 				// Ask the old DataModel to generate a new DataModel that only contains the update we want to send
 				DataModel updateDataModel = oldDataModel.updateDataModel(property, newState);

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/config/IntegraStateBindingConfig.java
Patch:
@@ -104,12 +104,12 @@ public static IntegraStateBindingConfig parseConfig(String bindingConfig) throws
 				for (int i = 0; i < objectNumbersStr.length; ++i) {
 					int objectNumber = Integer.parseInt(objectNumbersStr[i]);
 					if (objectNumber < 1 || objectNumber > 256) {
-						throw new BindingConfigParseException(String.format("Invalid object number: {}", bindingConfig));
+						throw new BindingConfigParseException(String.format("Invalid object number: %s", bindingConfig));
 					}
 					objectNumbers[i] = objectNumber;
 				}
 			} catch (NumberFormatException e) {
-				throw new BindingConfigParseException(String.format("Invalid object number: {}", bindingConfig));
+				throw new BindingConfigParseException(String.format("Invalid object number: %s", bindingConfig));
 			}
 		}
 

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/SatelGenericBindingProvider.java
Patch:
@@ -105,6 +105,6 @@ private SatelBindingConfig createBindingConfig(String bindingConfig) throws Bind
 			// throw parse exception in case of any error
 		}
 
-		throw new BindingConfigParseException(String.format("Invalid binding configuration: {}", bindingConfig));
+		throw new BindingConfigParseException(String.format("Invalid binding configuration: %s", bindingConfig));
 	}
 }

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/command/SatelCommand.java
Patch:
@@ -153,9 +153,9 @@ protected boolean commandSucceeded(SatelMessage response) {
 			return true;
 		default:
 			if (responseCode >= 0x80 && responseCode <= 0x8f) {
-				errorMsg = String.format("Other error: {}", responseCode);
+				errorMsg = String.format("Other error: %02X", responseCode);
 			} else {
-				errorMsg = String.format("Unknown response code: {}", responseCode);
+				errorMsg = String.format("Unknown response code: %02X", responseCode);
 			}
 		}
 

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/charts/RRD4jChartServlet.java
Patch:
@@ -11,6 +11,7 @@
 import java.awt.Color;
 import java.awt.Font;
 import java.awt.image.BufferedImage;
+import java.io.File;
 import java.io.IOException;
 import java.util.Date;
 import java.util.HashMap;
@@ -177,11 +178,11 @@ protected void addLine(RrdGraphDef graphDef, Item item, int counter) {
 		}
 		if(item instanceof NumberItem) {
 			// we only draw a line
-			graphDef.datasource(Integer.toString(counter), "./etc/rrd4j/" + item.getName() + ".rrd", "state", RRD4jService.getConsolidationFunction(item));
+			graphDef.datasource(Integer.toString(counter), RRD4jService.DB_FOLDER + File.separator + item.getName() + ".rrd", "state", RRD4jService.getConsolidationFunction(item));
 			graphDef.line(Integer.toString(counter), color, label, 2);
 		} else {
 			// we draw a line and fill the area beneath it with a transparent color
-			graphDef.datasource(Integer.toString(counter), "./etc/rrd4j/" + item.getName() + ".rrd", "state", RRD4jService.getConsolidationFunction(item));
+			graphDef.datasource(Integer.toString(counter), RRD4jService.DB_FOLDER + File.separator + item.getName() + ".rrd", "state", RRD4jService.getConsolidationFunction(item));
 			Color areaColor = AREACOLORS[counter%LINECOLORS.length];
 			
 			graphDef.area(Integer.toString(counter), areaColor);

File: bundles/binding/org.openhab.binding.nest/src/main/java/org/openhab/binding/nest/internal/NestBinding.java
Patch:
@@ -319,7 +319,7 @@ private void updateNest(final String itemName, final State newState) {
 		} else {
 
 			try {
-				logger.trace("About to set property '{}' to '{}'", property, newState);
+				logger.debug("About to set property '{}' to '{}'", property, newState);
 
 				// Ask the old DataModel to generate a new DataModel that only contains the update we want to send
 				DataModel updateDataModel = oldDataModel.updateDataModel(property, newState);

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/config/IntegraStateBindingConfig.java
Patch:
@@ -104,12 +104,12 @@ public static IntegraStateBindingConfig parseConfig(String bindingConfig) throws
 				for (int i = 0; i < objectNumbersStr.length; ++i) {
 					int objectNumber = Integer.parseInt(objectNumbersStr[i]);
 					if (objectNumber < 1 || objectNumber > 256) {
-						throw new BindingConfigParseException(String.format("Invalid object number: {}", bindingConfig));
+						throw new BindingConfigParseException(String.format("Invalid object number: %s", bindingConfig));
 					}
 					objectNumbers[i] = objectNumber;
 				}
 			} catch (NumberFormatException e) {
-				throw new BindingConfigParseException(String.format("Invalid object number: {}", bindingConfig));
+				throw new BindingConfigParseException(String.format("Invalid object number: %s", bindingConfig));
 			}
 		}
 

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/SatelGenericBindingProvider.java
Patch:
@@ -105,6 +105,6 @@ private SatelBindingConfig createBindingConfig(String bindingConfig) throws Bind
 			// throw parse exception in case of any error
 		}
 
-		throw new BindingConfigParseException(String.format("Invalid binding configuration: {}", bindingConfig));
+		throw new BindingConfigParseException(String.format("Invalid binding configuration: %s", bindingConfig));
 	}
 }

File: bundles/binding/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/command/SatelCommand.java
Patch:
@@ -153,9 +153,9 @@ protected boolean commandSucceeded(SatelMessage response) {
 			return true;
 		default:
 			if (responseCode >= 0x80 && responseCode <= 0x8f) {
-				errorMsg = String.format("Other error: {}", responseCode);
+				errorMsg = String.format("Other error: %02X", responseCode);
 			} else {
-				errorMsg = String.format("Unknown response code: {}", responseCode);
+				errorMsg = String.format("Unknown response code: %02X", responseCode);
 			}
 		}
 

File: bundles/binding/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/EcobeeBinding.java
Patch:
@@ -10,6 +10,7 @@
 
 import java.math.BigDecimal;
 import java.util.Calendar;
+import java.util.Collections;
 import java.util.Date;
 import java.util.Dictionary;
 import java.util.Enumeration;
@@ -165,7 +166,7 @@ public Object convert(Class type, Object value) {
 	/**
 	 * used to store events that we have sent ourselves; we need to remember them for not reacting to them
 	 */
-	private Set<String> ignoreEventSet = new HashSet<String>();
+	private Set<String> ignoreEventSet = Collections.synchronizedSet(new HashSet<String>());
 
 	/**
 	 * The most recently received list of revisions, or an empty Map if none have been retrieved yet.
@@ -500,8 +501,7 @@ private void commandEcobee(final String itemName, final Command command) {
 
 	private boolean isEcho(String itemName, State state) {
 		String ignoreEventSetKey = itemName + state.toString();
-		if (ignoreEventSet.contains(ignoreEventSetKey)) {
-			ignoreEventSet.remove(ignoreEventSetKey);
+		if (ignoreEventSet.remove(ignoreEventSetKey)) {
 			logger.trace(
 					"We received this event (item='{}', state='{}') from Ecobee, so we don't send it back again -> ignore!",
 					itemName, state.toString());

File: bundles/binding/org.openhab.binding.nest/src/main/java/org/openhab/binding/nest/internal/NestBinding.java
Patch:
@@ -10,6 +10,7 @@
 
 import java.math.BigDecimal;
 import java.util.Calendar;
+import java.util.Collections;
 import java.util.Date;
 import java.util.Dictionary;
 import java.util.Enumeration;
@@ -76,7 +77,7 @@ public class NestBinding extends AbstractActiveBinding<NestBindingProvider> impl
 	/**
 	 * used to store events that we have sent ourselves; we need to remember them for not reacting to them
 	 */
-	private Set<String> ignoreEventSet = new HashSet<String>();
+	private Set<String> ignoreEventSet = Collections.synchronizedSet(new HashSet<String>());
 
 	/**
 	 * The most recently received data model, or <code>null</code> if none have been retrieved yet.
@@ -283,8 +284,7 @@ private void commandNest(final String itemName, final Command command) {
 
 	private boolean isEcho(String itemName, State state) {
 		String ignoreEventSetKey = itemName + state.toString();
-		if (ignoreEventSet.contains(ignoreEventSetKey)) {
-			ignoreEventSet.remove(ignoreEventSetKey);
+		if (ignoreEventSet.remove(ignoreEventSetKey)) {
 			logger.debug(
 					"We received this event (item='{}', state='{}') from Nest, so we don't send it back again -> ignore!",
 					itemName, state);

File: bundles/binding/org.openhab.binding.nest/src/main/java/org/openhab/binding/nest/internal/NestBinding.java
Patch:
@@ -285,7 +285,7 @@ private boolean isEcho(String itemName, State state) {
 		String ignoreEventSetKey = itemName + state.toString();
 		if (ignoreEventSet.contains(ignoreEventSetKey)) {
 			ignoreEventSet.remove(ignoreEventSetKey);
-			logger.debug(
+			logger.trace(
 					"We received this event (item='{}', state='{}') from Nest, so we don't send it back again -> ignore!",
 					itemName, state);
 			return true;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -721,11 +721,13 @@ else if (zwaveStaticClass instanceof ZWaveMultiInstanceCommandClass) {
 					if(group.SetToController == true) {
 						// Check if we're already a member
 						if(associationCls.getGroupMembers(group.Index).contains(controller.getOwnNodeId())) {
-							logger.debug("NODE {}: Node advancer: SET_ASSOCIATION - ASSOCIATION already set for group {}", node.getNodeId(), group.Index);
+							logger.debug("NODE {}: Node advancer: SET_ASSOCIATION - ASSOCIATION set for group {}", node.getNodeId(), group.Index);
 						}
 						else {
 							logger.debug("NODE {}: Node advancer: SET_ASSOCIATION - Adding ASSOCIATION to group {}", node.getNodeId(), group.Index);
+							// Set the association, and request the update so we confirm if it's set 
 							addToQueue(associationCls.setAssociationMessage(group.Index, controller.getOwnNodeId()));
+							addToQueue(associationCls.getAssociationMessage(group.Index));
 						}
 					}
 				}

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/bus/BindingConfigParser.java
Patch:
@@ -31,7 +31,7 @@
  * <pre>
  * Number  Temperature    "Temperature [%.2f °C]"        {weather="locationId=home, type=temperature, property=current"} 
  * Number  Temperature_F  "Temperature [%.2f °F]"        {weather="locationId=home, type=temperature, property=current, unit=fahrenheit"} 
- * Number  Humidity       "Humidity [%.0f %]"            {weather="locationId=home, type=athmosphere, property=humidity"}
+ * Number  Humidity       "Humidity [%.0f %]"            {weather="locationId=home, type=atmosphere, property=humidity"}
  * Number  Rain           "Rain [%.2f mm]"               {weather="locationId=home, type=precipitation, property=rain"}
  * 
  * Number  Temperature    "Temperature [%.0f °C]"        {weather="locationId=home, type=precipitation, property=rain, roundingMode=ceiling, scale=0"}
@@ -76,6 +76,8 @@ public WeatherBindingConfig parse(Item item, String bindingConfig) throws Bindin
 			throw new BindingConfigParseException("Invalid binding: " + bindingConfig);
 		}
 
+		helper.type = StringUtils.replace(helper.type, "athmosphere", "atmosphere");
+		
 		WeatherBindingConfig weatherConfig = null;
 		if (helper.isForecast()) {
 			Integer forecast = parseInteger(helper.forecast, bindingConfig);

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/model/Atmosphere.java
Patch:
@@ -15,12 +15,12 @@
 import org.openhab.binding.weather.internal.converter.ConverterType;
 
 /**
- * Common provider model for athmosphere data.
+ * Common provider model for atmosphere data.
  * 
  * @author Gerhard Riegler
  * @since 1.6.0
  */
-public class Athmosphere {
+public class Atmosphere {
 
 	@ProviderMappings({
 			@Provider(name = ProviderName.WUNDERGROUND, property = "current_observation.relative_humidity", converter = ConverterType.PERCENT_INTEGER),

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/utils/UnitUtils.java
Patch:
@@ -151,7 +151,7 @@ public static Double convertUnit(Double value, WeatherBindingConfig bindingConfi
 			case MPH:
 				return kmhToMph(value);
 			case INCHES:
-				if ("athmosphere.pressure".equals(bindingConfig.getWeatherProperty())) {
+				if ("atmosphere.pressure".equals(bindingConfig.getWeatherProperty())) {
 					return millibarToInches(value);
 				} else if ("precipitation.snow".equals(bindingConfig.getWeatherProperty())) {
 					return millimetersToInches(centimeterToMillimeter(value));

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/bus/BindingConfigParser.java
Patch:
@@ -31,7 +31,7 @@
  * <pre>
  * Number  Temperature    "Temperature [%.2f °C]"        {weather="locationId=home, type=temperature, property=current"} 
  * Number  Temperature_F  "Temperature [%.2f °F]"        {weather="locationId=home, type=temperature, property=current, unit=fahrenheit"} 
- * Number  Humidity       "Humidity [%.0f %]"            {weather="locationId=home, type=athmosphere, property=humidity"}
+ * Number  Humidity       "Humidity [%.0f %]"            {weather="locationId=home, type=atmosphere, property=humidity"}
  * Number  Rain           "Rain [%.2f mm]"               {weather="locationId=home, type=precipitation, property=rain"}
  * 
  * Number  Temperature    "Temperature [%.0f °C]"        {weather="locationId=home, type=precipitation, property=rain, roundingMode=ceiling, scale=0"}
@@ -76,6 +76,8 @@ public WeatherBindingConfig parse(Item item, String bindingConfig) throws Bindin
 			throw new BindingConfigParseException("Invalid binding: " + bindingConfig);
 		}
 
+		helper.type = StringUtils.replace(helper.type, "athmosphere", "atmosphere");
+		
 		WeatherBindingConfig weatherConfig = null;
 		if (helper.isForecast()) {
 			Integer forecast = parseInteger(helper.forecast, bindingConfig);

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/utils/UnitUtils.java
Patch:
@@ -151,7 +151,7 @@ public static Double convertUnit(Double value, WeatherBindingConfig bindingConfi
 			case MPH:
 				return kmhToMph(value);
 			case INCHES:
-				if ("athmosphere.pressure".equals(bindingConfig.getWeatherProperty())) {
+				if ("atmosphere.pressure".equals(bindingConfig.getWeatherProperty())) {
 					return millibarToInches(value);
 				} else if ("precipitation.snow".equals(bindingConfig.getWeatherProperty())) {
 					return millimetersToInches(centimeterToMillimeter(value));

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/listeners/ResourceStateChangeListener.java
Patch:
@@ -130,7 +130,7 @@ public BroadcastAction filter(String broadcasterId,
 		stateChangeListener = new StateChangeListener() {
 			// don't react on update events
 			public void stateUpdated(Item item, State state) {
-				broadcaster.broadcast(item);
+//				broadcaster.broadcast(item);
 				// if the group has a base item and thus might calculate its state
 				// as a DecimalType or other, we also consider it to be necessary to
 				// send an update to the client as the label of the item might have changed,

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoGenericBindingProvider.java
Patch:
@@ -12,6 +12,7 @@
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.items.DateTimeItem;
+import org.openhab.core.library.items.LocationItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
 import org.openhab.model.item.binding.BindingConfigParseException;
@@ -79,10 +80,10 @@ public String getBindingType() {
 	 */
 	@Override
 	public void validateItemType(final Item item, final String bindingConfig) throws BindingConfigParseException {
-		if (!(item instanceof NumberItem || item instanceof DateTimeItem)) {
+		if (!(item instanceof NumberItem || item instanceof DateTimeItem || item instanceof LocationItem)) {
 			throw new BindingConfigParseException(
 				"item '" + item.getName() + "' is of type '" + item.getClass().getSimpleName() + 
-				"', only NumberItems and DateTimeItems are allowed - please check your *.items configuration");
+				"', only NumberItems, DateTimeItems and LocationItems are allowed - please check your *.items configuration");
 		}
 	}
 	

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoMeasureType.java
Patch:
@@ -18,7 +18,7 @@
  * to be retrieved by the Netatmo binding
  */
 public enum NetatmoMeasureType {
-	CO2("Co2"),
+	CO2("CO2"),
 	TEMPERATURE("Temperature"),
 	HUMIDITY("Humidity"),
 	NOISE("Noise"),
@@ -30,7 +30,8 @@ public enum NetatmoMeasureType {
 	LONGITUDE("Longitude"),
 	RFSTATUS("RfStatus"),
 	BATTERYVP("BatteryVp"),
-	TIMESTAMP("TimeStamp");
+	TIMESTAMP("TimeStamp"),
+	COORDINATE("Coordinate");
 	
 	String measure;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/DeviceListResponse.java
Patch:
@@ -408,11 +408,11 @@ public Integer getAltitude() {
 		 }
 		
 		 public Double getLatitude() {
-			 return this.place.location.get(0);
+			 return this.place.location.get(1);
 		 }
 		
 		 public Double getLongitude() {
-			 return this.place.location.get(1);
+			 return this.place.location.get(0);
 		 }
 		
 	}

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/CoreItemFactory.java
Patch:
@@ -14,6 +14,7 @@
 import org.openhab.core.library.items.ContactItem;
 import org.openhab.core.library.items.DateTimeItem;
 import org.openhab.core.library.items.DimmerItem;
+import org.openhab.core.library.items.LocationItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.StringItem;
@@ -28,7 +29,7 @@
  */
 public class CoreItemFactory implements ItemFactory {
 	
-	private static String[] ITEM_TYPES = new String[] { "Switch", "Rollershutter", "Contact", "String", "Number", "Dimmer", "DateTime", "Color" };
+	private static String[] ITEM_TYPES = new String[] { "Switch", "Rollershutter", "Contact", "String", "Number", "Dimmer", "DateTime", "Color", "Point" };
 
 	/**
 	 * @{inheritDoc}
@@ -42,6 +43,7 @@ public GenericItem createItem(String itemTypeName, String itemName) {
 		if (itemTypeName.equals(ITEM_TYPES[5])) return new DimmerItem(itemName);
 		if (itemTypeName.equals(ITEM_TYPES[6])) return new DateTimeItem(itemName);
 		if (itemTypeName.equals(ITEM_TYPES[7])) return new ColorItem(itemName);
+		if (itemTypeName.equals(ITEM_TYPES[8])) return new LocationItem(itemName);
 		else return null;
 	}
 	

File: bundles/model/org.openhab.model.item.ui/src/org/openhab/model/ui/contentassist/ItemsProposalProvider.java
Patch:
@@ -40,6 +40,7 @@ public class ItemsProposalProvider extends AbstractItemsProposalProvider {
 		ITEMTYPES.add("Contact");
 		ITEMTYPES.add("Rollershutter");
 		ITEMTYPES.add("DateTime");
+		ITEMTYPES.add("Point");
 	}
 	
 	@Override

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/handling/ComfoAirCommandType.java
Patch:
@@ -287,7 +287,7 @@ public enum ComfoAirCommandType {
 	int[] possible_values;
 
 	/*
-	 * Cmd code to swich properties on the comforair.
+	 * Cmd code to change properties on the comfoair.
 	 */
 	int change_command;
 	/*

File: bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/HeatpumpCommandType.java
Patch:
@@ -316,7 +316,7 @@ public enum HeatpumpCommandType {
 	//in german Heizung Temperatur (Parallelverschiebung)
 	TYPE_HEATING_TEMPERATURE {
 		{
-			command = "heating_temperatur";
+			command = "heating_temperature";
 			itemClass = NumberItem.class;
 		}
 	},	
@@ -330,7 +330,7 @@ public enum HeatpumpCommandType {
 	//in german Warmwasser Temperatur
 	TYPE_WARMWATER_TEMPERATURE {
 		{
-			command = "warmwater_temperatur";
+			command = "warmwater_temperature";
 			itemClass = NumberItem.class;
 		}
 	};

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/RemoteSwitchBConfiguration.java
Patch:
@@ -30,7 +30,7 @@
  * @model
  * @generated
  */
-public interface RemoteSwitchBConfiguration extends TFConfig
+public interface RemoteSwitchBConfiguration extends DimmableConfiguration
 {
 
   /**

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/TFServoConfiguration.java
Patch:
@@ -34,7 +34,7 @@
  * @model
  * @generated
  */
-public interface TFServoConfiguration extends TFConfig
+public interface TFServoConfiguration extends DimmableConfiguration
 {
   /**
    * Returns the value of the '<em><b>Velocity</b></em>' attribute.

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConfigReader.java
Patch:
@@ -135,7 +135,7 @@ static long readConfig(Dictionary<String, ?> config, Map<String, AnelConnectorTh
 		// we collected all configs, now let's create the actual threads
 		for (String device : anelConfigs.keySet()) {
 			final AnelConfig anelConfig = anelConfigs.get(device);
-			final AnelConnectorThread thread = new AnelConnectorThread(anelConfig.host, anelConfig.receivePort,
+			final AnelConnectorThread thread = new AnelConnectorThread(device, anelConfig.host, anelConfig.receivePort,
 					anelConfig.sendPort, anelConfig.user, anelConfig.password, bindingFacade, cachePeriod);
 			threads.put(device, thread);
 		}

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/MiosActivator.java
Patch:
@@ -50,8 +50,7 @@ public void stop(BundleContext bc) throws Exception {
 	/**
 	 * Returns the OSGi BundleContext of this bundle.
 	 * 
-	 * The OSGi BundleContext is needed to talk with other services running
-	 * under OSGi.
+	 * The OSGi BundleContext is needed to talk with other services running under OSGi.
 	 * <p>
 	 * eg. openHAB's {@code TransformationService}.
 	 * 

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/config/ParameterDefaults.java
Patch:
@@ -14,8 +14,7 @@ public class ParameterDefaults {
 	private String mCommandTransform;
 	private String mFormatted;
 
-	private ParameterDefaults(String formatted, String in, String out,
-			String command) {
+	private ParameterDefaults(String formatted, String in, String out, String command) {
 		mFormatted = formatted;
 		mInTransform = in;
 		mOutTransform = out;

File: bundles/binding/org.openhab.binding.samsungac.test/src/test/java/org/openhab/binding/samsungac/communicator/ResponseParserTest.java
Patch:
@@ -69,12 +69,13 @@ public void shouldCheckIfItIsCorrectResponseCommand() {
 	
 	@Test
 	public void shouldParseXMLStatusResponseCorrectly() throws SAXException {
-		String response = "<?xml version=\"1.0\" encoding=\"utf-8\" ?><Response Type=\"DeviceState\" Status=\"Okay\"><DeviceState><Device DUID=\"7825AD1243BA\" GroupID=\"AC\" ModelID=\"AC\" ><Attr ID=\"AC_FUN_ENABLE\" Type=\"RW\" Value=\"Enable\"/><Attr ID=\"AC_FUN_POWER\" Type=\"RW\" Value=\"On\"/><Attr ID=\"AC_FUN_SUPPORTED\" Type=\"R\" Value=\"0\"/><Attr ID=\"AC_FUN_OPMODE\" Type=\"RW\" Value=\"Heat\"/><Attr ID=\"AC_FUN_TEMPSET\" Type=\"RW\" Value=\"20\"/><Attr ID=\"AC_FUN_COMODE\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_FUN_ERROR\" Type=\"RW\" Value=\"00000000\"/><Attr ID=\"AC_FUN_TEMPNOW\" Type=\"R\" Value=\"21\"/><Attr ID=\"AC_FUN_SLEEP\" Type=\"RW\" Value=\"0\"/><Attr ID=\"AC_FUN_WINDLEVEL\" Type=\"RW\" Value=\"Auto\"/><Attr ID=\"AC_FUN_DIRECTION\" Type=\"RW\" Value=\"Fixed\"/><Attr ID=\"AC_ADD_AUTOCLEAN\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_ADD_APMODE_END\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_ADD_STARTWPS\" Type=\"RW\" Value=\"Direct\"/><Attr ID=\"AC_ADD_SPI\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_SG_WIFI\" Type=\"W\" Value=\"Connected\"/><Attr ID=\"AC_SG_INTERNET\" Type=\"W\" Value=\"Connected\"/><Attr ID=\"AC_ADD2_VERSION\" Type=\"RW\" Value=\"0\"/><Attr ID=\"AC_SG_MACHIGH\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_MACMID\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_MACLOW\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER01\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER02\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER03\" Type=\"W\" Value=\"0\"/></Device></DeviceState></Response>";
+		String response = "<?xml version=\"1.0\" encoding=\"utf-8\" ?><Response Type=\"DeviceState\" Status=\"Okay\"><DeviceState><Device DUID=\"7825AD1243BA\" GroupID=\"AC\" ModelID=\"AC\" ><Attr ID=\"AC_FUN_ENABLE\" Type=\"RW\" Value=\"Enable\"/><Attr ID=\"AC_FUN_POWER\" Type=\"RW\" Value=\"On\"/><Attr ID=\"AC_FUN_SUPPORTED\" Type=\"R\" Value=\"0\"/><Attr ID=\"AC_FUN_OPMODE\" Type=\"RW\" Value=\"Heat\"/><Attr ID=\"AC_FUN_TEMPSET\" Type=\"RW\" Value=\"20\"/><Attr ID=\"AC_FUN_COMODE\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_FUN_ERROR\" Type=\"RW\" Value=\"45010D00\"/><Attr ID=\"AC_FUN_TEMPNOW\" Type=\"R\" Value=\"21\"/><Attr ID=\"AC_FUN_SLEEP\" Type=\"RW\" Value=\"0\"/><Attr ID=\"AC_FUN_WINDLEVEL\" Type=\"RW\" Value=\"Auto\"/><Attr ID=\"AC_FUN_DIRECTION\" Type=\"RW\" Value=\"Fixed\"/><Attr ID=\"AC_ADD_AUTOCLEAN\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_ADD_APMODE_END\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_ADD_STARTWPS\" Type=\"RW\" Value=\"Direct\"/><Attr ID=\"AC_ADD_SPI\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_SG_WIFI\" Type=\"W\" Value=\"Connected\"/><Attr ID=\"AC_SG_INTERNET\" Type=\"W\" Value=\"Connected\"/><Attr ID=\"AC_ADD2_VERSION\" Type=\"RW\" Value=\"0\"/><Attr ID=\"AC_SG_MACHIGH\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_MACMID\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_MACLOW\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER01\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER02\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER03\" Type=\"W\" Value=\"0\"/></Device></DeviceState></Response>";
 		Map<CommandEnum,String> result = ResponseParser.parseStatusResponse(response);
 		
 		assertEquals("On", result.get(CommandEnum.AC_FUN_POWER));
 		assertEquals("21", result.get(CommandEnum.AC_FUN_TEMPNOW));
 		assertEquals("20", result.get(CommandEnum.AC_FUN_TEMPSET));
+		assertEquals("45010D00", result.get(CommandEnum.AC_FUN_ERROR));
 	}
 	
 	@Test

File: bundles/binding/org.openhab.binding.samsungac/src/main/java/org/openhab/binding/samsungac/SamsungAcBindingProvider.java
Patch:
@@ -21,5 +21,5 @@
 public interface SamsungAcBindingProvider extends BindingProvider {
 	String getAirConditionerInstance(String itemname);
 	CommandEnum getProperty(String itemname);
-	String getItemName(CommandEnum property);
+	String getItemName(String acName, CommandEnum property);
 }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java
Patch:
@@ -454,8 +454,9 @@ private void handleZWaveCommandClassValueEvent(
 			for (String itemName : provider.getItemNames()) {
 				ZWaveBindingConfig bindingConfig = provider.getZwaveBindingConfig(itemName);
 				
-				if (bindingConfig.getNodeId() != event.getNodeId() || bindingConfig.getEndpoint() != event.getEndpoint())
+				if (bindingConfig.getNodeId() != event.getNodeId() || bindingConfig.getEndpoint() != event.getEndpoint()) {
 					continue;
+				}
 				
 				converterHandler.handleEvent(provider, itemName, event);
 				handled = true;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterHandler.java
Patch:
@@ -83,6 +83,7 @@ public ZWaveConverterHandler(ZWaveController controller, EventPublisher eventPub
 		converters.put(CommandClass.SCENE_ACTIVATION, new ZWaveSceneConverter(controller, eventPublisher));
 		converters.put(CommandClass.FIBARO_FGRM_222, new FibaroFGRM222Converter(controller, eventPublisher));
 		converters.put(CommandClass.ALARM, new ZWaveAlarmConverter(controller, eventPublisher));
+		converters.put(CommandClass.CONFIGURATION, new ZWaveConfigurationConverter(controller, eventPublisher));
 
 		infoConverter = new ZWaveInfoConverter(controller, eventPublisher);
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatFanStateConverter.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.Map;
 
 import org.openhab.binding.zwave.internal.converter.state.BigDecimalDecimalTypeConverter;
+import org.openhab.binding.zwave.internal.converter.state.IntegerDecimalTypeConverter;
 import org.openhab.binding.zwave.internal.converter.state.ZWaveStateConverter;
 import org.openhab.binding.zwave.internal.protocol.SerialMessage;
 import org.openhab.binding.zwave.internal.protocol.ZWaveController;
@@ -45,7 +46,7 @@ public class ZWaveThermostatFanStateConverter extends
 	public ZWaveThermostatFanStateConverter(ZWaveController controller,
 			EventPublisher eventPublisher) {
 		super(controller, eventPublisher);
-		this.addStateConverter(new BigDecimalDecimalTypeConverter());
+		this.addStateConverter(new IntegerDecimalTypeConverter());
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatSetpointConverter.java
Patch:
@@ -11,7 +11,7 @@
 import java.math.BigDecimal;
 import java.util.Map;
 
-import org.openhab.binding.zwave.internal.converter.command.DecimalCommandConverter;
+import org.openhab.binding.zwave.internal.converter.command.BigDecimalCommandConverter;
 import org.openhab.binding.zwave.internal.converter.command.ZWaveCommandConverter;
 import org.openhab.binding.zwave.internal.converter.state.BigDecimalDecimalTypeConverter;
 import org.openhab.binding.zwave.internal.converter.state.ZWaveStateConverter;
@@ -52,7 +52,7 @@ public class ZWaveThermostatSetpointConverter extends
 	public ZWaveThermostatSetpointConverter(ZWaveController controller,
 			EventPublisher eventPublisher) {
 		super(controller, eventPublisher);
-		this.addCommandConverter(new DecimalCommandConverter());
+		this.addCommandConverter(new BigDecimalCommandConverter());
 		this.addStateConverter(new BigDecimalDecimalTypeConverter());
 	}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/BigDecimalCommandConverter.java
Patch:
@@ -18,7 +18,7 @@
  * @author Matthew Bowman
  * @since 1.4.0
  */
-public class DecimalCommandConverter extends
+public class BigDecimalCommandConverter extends
 		ZWaveCommandConverter<DecimalType, BigDecimal> {
 
 	/**

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java
Patch:
@@ -671,10 +671,9 @@ public int getSendQueueLength() {
 	 * @param event the event to send.
 	 */
 	public void notifyEventListeners(ZWaveEvent event) {
-		logger.debug("Notifying event listeners");
+		logger.debug("Notifying event listeners: {}", event.getClass().getSimpleName());
 		ArrayList<ZWaveEventListener> copy = new ArrayList<ZWaveEventListener>(this.zwaveEventListeners);
 		for (ZWaveEventListener listener : copy) {
-			logger.trace("Notifying {}", listener.toString());
 			listener.ZWaveIncomingEvent(event);
 		}
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanModeCommandClass.java
Patch:
@@ -8,7 +8,6 @@
  */
 package org.openhab.binding.zwave.internal.protocol.commandclass;
 
-import java.math.BigDecimal;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
@@ -170,7 +169,7 @@ protected void processThermostatFanModeReport(SerialMessage serialMessage, int o
 		
 		dynamicDone = true;
 		logger.debug("NODE {}: Thermostat Fan Mode Report value = {}", this.getNode().getNodeId(), fanModeType.getLabel());
-		ZWaveCommandClassValueEvent zEvent = new ZWaveCommandClassValueEvent(this.getNode().getNodeId(), endpoint, this.getCommandClass(), new BigDecimal(value));
+		ZWaveCommandClassValueEvent zEvent = new ZWaveCommandClassValueEvent(this.getNode().getNodeId(), endpoint, this.getCommandClass(), value);
 		this.getController().notifyEventListeners(zEvent);
 	}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanStateCommandClass.java
Patch:
@@ -8,7 +8,6 @@
  */
 package org.openhab.binding.zwave.internal.protocol.commandclass;
 
-import java.math.BigDecimal;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
@@ -129,7 +128,7 @@ protected void processThermostatFanStateReport(SerialMessage serialMessage, int
 		dynamicDone = true;
 		
 		logger.debug("NODE {}: Thermostat fan state  Report value = {}", this.getNode().getNodeId(), fanStateType.getLabel());
-		ZWaveCommandClassValueEvent zEvent = new ZWaveCommandClassValueEvent(this.getNode().getNodeId(), endpoint, this.getCommandClass(), new BigDecimal(value));
+		ZWaveCommandClassValueEvent zEvent = new ZWaveCommandClassValueEvent(this.getNode().getNodeId(), endpoint, this.getCommandClass(), value);
 		this.getController().notifyEventListeners(zEvent);
 	}
 

File: bundles/io/org.openhab.io.cv/src/main/java/org/openhab/io/cv/internal/filter/ResponseObjectFilter.java
Patch:
@@ -37,12 +37,12 @@ public class ResponseObjectFilter implements PerRequestBroadcastFilter {
 			.getLogger(ResponseObjectFilter.class);
 
 	@Override
-	public BroadcastAction filter(Object originalMessage, Object message) {
-		return new BroadcastAction(ACTION.CONTINUE, message);
+	public BroadcastAction filter(String broadcasterId, Object originalMessage, Object message) {
+		return new BroadcastAction(message);
 	}
 
 	@Override
-	public BroadcastAction filter(AtmosphereResource resource,
+	public BroadcastAction filter(String broadcasterId, AtmosphereResource resource,
 			Object originalMessage, Object message) {
 		final HttpServletRequest request = resource.getRequest();
 		try {

File: bundles/io/org.openhab.io.cv/src/main/java/org/openhab/io/cv/internal/resources/RrdResource.java
Patch:
@@ -76,8 +76,9 @@ public Response getRrd(@Context HttpHeaders headers,
 			@QueryParam("start") String start, @QueryParam("end") String end,
 			@QueryParam("res") long res) {
 
-		logger.debug("Received GET request at '{}' for rrd '{}'.",
-				new String[] { uriInfo.getPath(), rrdName });
+		if (logger.isDebugEnabled())
+			logger.debug("Received GET request at '{}' for rrd '{}'.",
+					uriInfo.getPath(), rrdName);
 		String responseType = MediaTypeHelper.getResponseMediaType(headers
 				.getAcceptableMediaTypes());
 		

File: bundles/io/org.openhab.io.cv/src/main/java/org/openhab/io/cv/internal/resources/WriteResource.java
Patch:
@@ -55,7 +55,7 @@ public Response getResults(
     		@QueryParam("v") String value,
     		@QueryParam("ts") long timestamp,
     		@QueryParam("jsoncallback") @DefaultValue("callback") String callback) {
-		logger.debug("Received HTTP GET request at '{}' for item '{}'.", new String[] { uriInfo.getPath(), itemName });
+		if (logger.isDebugEnabled()) logger.debug("Received HTTP GET request at '{}' for item '{}'.", uriInfo.getPath(), itemName);
 		String responseType = MediaTypeHelper.getResponseMediaType(headers.getAcceptableMediaTypes());
 		if(responseType!=null) {
 			Item item = ReadResource.getItem(itemName);

File: bundles/io/org.openhab.io.transport.cul/src/main/java/org/openhab/io/transport/cul/CULManager.java
Patch:
@@ -77,7 +77,7 @@ public static CULHandler getOpenCULHandler(String deviceName, CULMode mode, Map<
 
 			if (openDevices.containsKey(deviceName)) {
 				CULHandler handler = openDevices.get(deviceName);
-				if (handler.getCULMode() == mode) {
+				if ((handler.getCULMode() == mode)  && (handler.arePropertiesEqual(properties))){
 					logger.debug("Device " + deviceName + " is already open in mode " + mode.toString()
 							+ ", returning already openend handler");
 					return handler;

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jService.java
Patch:
@@ -305,9 +305,9 @@ private State mapToState(double value, String itemName) {
 	}
 	
 	static private String getUserDataFolder() {
-		String progArg = System.getProperty("smarthome.userdata");
+		String progArg = System.getProperty("openhab.userdata");
 		if (progArg != null) {
-			return progArg;
+			return progArg + File.separator + "persistence";
 		} else {
 			return "etc";
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbConfigurationParameter.java
Patch:
@@ -26,6 +26,7 @@ public class ZWaveDbConfigurationParameter {
 	public Integer Minimum;
 	public Integer Maximum;
 	public String Units;
+	public Boolean ReadOnly;
 	public Boolean WriteOnly;
 	@XStreamImplicit
 	public List<ZWaveDbLabel> Label;

File: bundles/binding/org.openhab.binding.nest/src/main/java/org/openhab/binding/nest/internal/NestBinding.java
Patch:
@@ -285,7 +285,7 @@ private boolean isEcho(String itemName, State state) {
 		String ignoreEventSetKey = itemName + state.toString();
 		if (ignoreEventSet.contains(ignoreEventSetKey)) {
 			ignoreEventSet.remove(ignoreEventSetKey);
-			logger.trace(
+			logger.debug(
 					"We received this event (item='{}', state='{}') from Nest, so we don't send it back again -> ignore!",
 					itemName, state);
 			return true;

File: bundles/binding/org.openhab.binding.samsungac.test/src/test/java/org/openhab/binding/samsungac/communicator/ResponseParserTest.java
Patch:
@@ -69,12 +69,13 @@ public void shouldCheckIfItIsCorrectResponseCommand() {
 	
 	@Test
 	public void shouldParseXMLStatusResponseCorrectly() throws SAXException {
-		String response = "<?xml version=\"1.0\" encoding=\"utf-8\" ?><Response Type=\"DeviceState\" Status=\"Okay\"><DeviceState><Device DUID=\"7825AD1243BA\" GroupID=\"AC\" ModelID=\"AC\" ><Attr ID=\"AC_FUN_ENABLE\" Type=\"RW\" Value=\"Enable\"/><Attr ID=\"AC_FUN_POWER\" Type=\"RW\" Value=\"On\"/><Attr ID=\"AC_FUN_SUPPORTED\" Type=\"R\" Value=\"0\"/><Attr ID=\"AC_FUN_OPMODE\" Type=\"RW\" Value=\"Heat\"/><Attr ID=\"AC_FUN_TEMPSET\" Type=\"RW\" Value=\"20\"/><Attr ID=\"AC_FUN_COMODE\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_FUN_ERROR\" Type=\"RW\" Value=\"00000000\"/><Attr ID=\"AC_FUN_TEMPNOW\" Type=\"R\" Value=\"21\"/><Attr ID=\"AC_FUN_SLEEP\" Type=\"RW\" Value=\"0\"/><Attr ID=\"AC_FUN_WINDLEVEL\" Type=\"RW\" Value=\"Auto\"/><Attr ID=\"AC_FUN_DIRECTION\" Type=\"RW\" Value=\"Fixed\"/><Attr ID=\"AC_ADD_AUTOCLEAN\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_ADD_APMODE_END\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_ADD_STARTWPS\" Type=\"RW\" Value=\"Direct\"/><Attr ID=\"AC_ADD_SPI\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_SG_WIFI\" Type=\"W\" Value=\"Connected\"/><Attr ID=\"AC_SG_INTERNET\" Type=\"W\" Value=\"Connected\"/><Attr ID=\"AC_ADD2_VERSION\" Type=\"RW\" Value=\"0\"/><Attr ID=\"AC_SG_MACHIGH\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_MACMID\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_MACLOW\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER01\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER02\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER03\" Type=\"W\" Value=\"0\"/></Device></DeviceState></Response>";
+		String response = "<?xml version=\"1.0\" encoding=\"utf-8\" ?><Response Type=\"DeviceState\" Status=\"Okay\"><DeviceState><Device DUID=\"7825AD1243BA\" GroupID=\"AC\" ModelID=\"AC\" ><Attr ID=\"AC_FUN_ENABLE\" Type=\"RW\" Value=\"Enable\"/><Attr ID=\"AC_FUN_POWER\" Type=\"RW\" Value=\"On\"/><Attr ID=\"AC_FUN_SUPPORTED\" Type=\"R\" Value=\"0\"/><Attr ID=\"AC_FUN_OPMODE\" Type=\"RW\" Value=\"Heat\"/><Attr ID=\"AC_FUN_TEMPSET\" Type=\"RW\" Value=\"20\"/><Attr ID=\"AC_FUN_COMODE\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_FUN_ERROR\" Type=\"RW\" Value=\"45010D00\"/><Attr ID=\"AC_FUN_TEMPNOW\" Type=\"R\" Value=\"21\"/><Attr ID=\"AC_FUN_SLEEP\" Type=\"RW\" Value=\"0\"/><Attr ID=\"AC_FUN_WINDLEVEL\" Type=\"RW\" Value=\"Auto\"/><Attr ID=\"AC_FUN_DIRECTION\" Type=\"RW\" Value=\"Fixed\"/><Attr ID=\"AC_ADD_AUTOCLEAN\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_ADD_APMODE_END\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_ADD_STARTWPS\" Type=\"RW\" Value=\"Direct\"/><Attr ID=\"AC_ADD_SPI\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_SG_WIFI\" Type=\"W\" Value=\"Connected\"/><Attr ID=\"AC_SG_INTERNET\" Type=\"W\" Value=\"Connected\"/><Attr ID=\"AC_ADD2_VERSION\" Type=\"RW\" Value=\"0\"/><Attr ID=\"AC_SG_MACHIGH\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_MACMID\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_MACLOW\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER01\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER02\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER03\" Type=\"W\" Value=\"0\"/></Device></DeviceState></Response>";
 		Map<CommandEnum,String> result = ResponseParser.parseStatusResponse(response);
 		
 		assertEquals("On", result.get(CommandEnum.AC_FUN_POWER));
 		assertEquals("21", result.get(CommandEnum.AC_FUN_TEMPNOW));
 		assertEquals("20", result.get(CommandEnum.AC_FUN_TEMPSET));
+		assertEquals("45010D00", result.get(CommandEnum.AC_FUN_ERROR));
 	}
 	
 	@Test

File: bundles/binding/org.openhab.binding.samsungac/src/main/java/org/openhab/binding/samsungac/SamsungAcBindingProvider.java
Patch:
@@ -21,5 +21,5 @@
 public interface SamsungAcBindingProvider extends BindingProvider {
 	String getAirConditionerInstance(String itemname);
 	CommandEnum getProperty(String itemname);
-	String getItemName(CommandEnum property);
+	String getItemName(String acName, CommandEnum property);
 }

File: bundles/binding/org.openhab.binding.samsungac.test/src/test/java/org/openhab/binding/samsungac/communicator/ResponseParserTest.java
Patch:
@@ -69,12 +69,13 @@ public void shouldCheckIfItIsCorrectResponseCommand() {
 	
 	@Test
 	public void shouldParseXMLStatusResponseCorrectly() throws SAXException {
-		String response = "<?xml version=\"1.0\" encoding=\"utf-8\" ?><Response Type=\"DeviceState\" Status=\"Okay\"><DeviceState><Device DUID=\"7825AD1243BA\" GroupID=\"AC\" ModelID=\"AC\" ><Attr ID=\"AC_FUN_ENABLE\" Type=\"RW\" Value=\"Enable\"/><Attr ID=\"AC_FUN_POWER\" Type=\"RW\" Value=\"On\"/><Attr ID=\"AC_FUN_SUPPORTED\" Type=\"R\" Value=\"0\"/><Attr ID=\"AC_FUN_OPMODE\" Type=\"RW\" Value=\"Heat\"/><Attr ID=\"AC_FUN_TEMPSET\" Type=\"RW\" Value=\"20\"/><Attr ID=\"AC_FUN_COMODE\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_FUN_ERROR\" Type=\"RW\" Value=\"00000000\"/><Attr ID=\"AC_FUN_TEMPNOW\" Type=\"R\" Value=\"21\"/><Attr ID=\"AC_FUN_SLEEP\" Type=\"RW\" Value=\"0\"/><Attr ID=\"AC_FUN_WINDLEVEL\" Type=\"RW\" Value=\"Auto\"/><Attr ID=\"AC_FUN_DIRECTION\" Type=\"RW\" Value=\"Fixed\"/><Attr ID=\"AC_ADD_AUTOCLEAN\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_ADD_APMODE_END\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_ADD_STARTWPS\" Type=\"RW\" Value=\"Direct\"/><Attr ID=\"AC_ADD_SPI\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_SG_WIFI\" Type=\"W\" Value=\"Connected\"/><Attr ID=\"AC_SG_INTERNET\" Type=\"W\" Value=\"Connected\"/><Attr ID=\"AC_ADD2_VERSION\" Type=\"RW\" Value=\"0\"/><Attr ID=\"AC_SG_MACHIGH\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_MACMID\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_MACLOW\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER01\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER02\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER03\" Type=\"W\" Value=\"0\"/></Device></DeviceState></Response>";
+		String response = "<?xml version=\"1.0\" encoding=\"utf-8\" ?><Response Type=\"DeviceState\" Status=\"Okay\"><DeviceState><Device DUID=\"7825AD1243BA\" GroupID=\"AC\" ModelID=\"AC\" ><Attr ID=\"AC_FUN_ENABLE\" Type=\"RW\" Value=\"Enable\"/><Attr ID=\"AC_FUN_POWER\" Type=\"RW\" Value=\"On\"/><Attr ID=\"AC_FUN_SUPPORTED\" Type=\"R\" Value=\"0\"/><Attr ID=\"AC_FUN_OPMODE\" Type=\"RW\" Value=\"Heat\"/><Attr ID=\"AC_FUN_TEMPSET\" Type=\"RW\" Value=\"20\"/><Attr ID=\"AC_FUN_COMODE\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_FUN_ERROR\" Type=\"RW\" Value=\"45010D00\"/><Attr ID=\"AC_FUN_TEMPNOW\" Type=\"R\" Value=\"21\"/><Attr ID=\"AC_FUN_SLEEP\" Type=\"RW\" Value=\"0\"/><Attr ID=\"AC_FUN_WINDLEVEL\" Type=\"RW\" Value=\"Auto\"/><Attr ID=\"AC_FUN_DIRECTION\" Type=\"RW\" Value=\"Fixed\"/><Attr ID=\"AC_ADD_AUTOCLEAN\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_ADD_APMODE_END\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_ADD_STARTWPS\" Type=\"RW\" Value=\"Direct\"/><Attr ID=\"AC_ADD_SPI\" Type=\"RW\" Value=\"Off\"/><Attr ID=\"AC_SG_WIFI\" Type=\"W\" Value=\"Connected\"/><Attr ID=\"AC_SG_INTERNET\" Type=\"W\" Value=\"Connected\"/><Attr ID=\"AC_ADD2_VERSION\" Type=\"RW\" Value=\"0\"/><Attr ID=\"AC_SG_MACHIGH\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_MACMID\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_MACLOW\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER01\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER02\" Type=\"W\" Value=\"0\"/><Attr ID=\"AC_SG_VENDER03\" Type=\"W\" Value=\"0\"/></Device></DeviceState></Response>";
 		Map<CommandEnum,String> result = ResponseParser.parseStatusResponse(response);
 		
 		assertEquals("On", result.get(CommandEnum.AC_FUN_POWER));
 		assertEquals("21", result.get(CommandEnum.AC_FUN_TEMPNOW));
 		assertEquals("20", result.get(CommandEnum.AC_FUN_TEMPSET));
+		assertEquals("45010D00", result.get(CommandEnum.AC_FUN_ERROR));
 	}
 	
 	@Test

File: bundles/binding/org.openhab.binding.samsungac/src/main/java/org/openhab/binding/samsungac/SamsungAcBindingProvider.java
Patch:
@@ -21,5 +21,5 @@
 public interface SamsungAcBindingProvider extends BindingProvider {
 	String getAirConditionerInstance(String itemname);
 	CommandEnum getProperty(String itemname);
-	String getItemName(CommandEnum property);
+	String getItemName(String acName, CommandEnum property);
 }

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConfigReader.java
Patch:
@@ -135,7 +135,7 @@ static long readConfig(Dictionary<String, ?> config, Map<String, AnelConnectorTh
 		// we collected all configs, now let's create the actual threads
 		for (String device : anelConfigs.keySet()) {
 			final AnelConfig anelConfig = anelConfigs.get(device);
-			final AnelConnectorThread thread = new AnelConnectorThread(anelConfig.host, anelConfig.receivePort,
+			final AnelConnectorThread thread = new AnelConnectorThread(device, anelConfig.host, anelConfig.receivePort,
 					anelConfig.sendPort, anelConfig.user, anelConfig.password, bindingFacade, cachePeriod);
 			threads.put(device, thread);
 		}

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConfigReader.java
Patch:
@@ -135,7 +135,7 @@ static long readConfig(Dictionary<String, ?> config, Map<String, AnelConnectorTh
 		// we collected all configs, now let's create the actual threads
 		for (String device : anelConfigs.keySet()) {
 			final AnelConfig anelConfig = anelConfigs.get(device);
-			final AnelConnectorThread thread = new AnelConnectorThread(anelConfig.host, anelConfig.receivePort,
+			final AnelConnectorThread thread = new AnelConnectorThread(device, anelConfig.host, anelConfig.receivePort,
 					anelConfig.sendPort, anelConfig.user, anelConfig.password, bindingFacade, cachePeriod);
 			threads.put(device, thread);
 		}

File: bundles/binding/org.openhab.binding.dscalarm/src/main/java/org/openhab/binding/dscalarm/internal/DSCAlarmActiveBinding.java
Patch:
@@ -495,7 +495,7 @@ private void openConnection() {
     	switch (connectorType) {
 	    	case SERIAL:
 	     		if (api == null) {
-	    			api = new API(serialPort, baudRate);
+	    			api = new API(serialPort, baudRate, userCode);
 	    		}
 	     		break;
 	    	case TCP:

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatFanStateConverter.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.Map;
 
 import org.openhab.binding.zwave.internal.converter.state.BigDecimalDecimalTypeConverter;
+import org.openhab.binding.zwave.internal.converter.state.IntegerDecimalTypeConverter;
 import org.openhab.binding.zwave.internal.converter.state.ZWaveStateConverter;
 import org.openhab.binding.zwave.internal.protocol.SerialMessage;
 import org.openhab.binding.zwave.internal.protocol.ZWaveController;
@@ -45,7 +46,7 @@ public class ZWaveThermostatFanStateConverter extends
 	public ZWaveThermostatFanStateConverter(ZWaveController controller,
 			EventPublisher eventPublisher) {
 		super(controller, eventPublisher);
-		this.addStateConverter(new BigDecimalDecimalTypeConverter());
+		this.addStateConverter(new IntegerDecimalTypeConverter());
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanModeCommandClass.java
Patch:
@@ -8,7 +8,6 @@
  */
 package org.openhab.binding.zwave.internal.protocol.commandclass;
 
-import java.math.BigDecimal;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
@@ -170,7 +169,7 @@ protected void processThermostatFanModeReport(SerialMessage serialMessage, int o
 		
 		dynamicDone = true;
 		logger.debug("NODE {}: Thermostat Fan Mode Report value = {}", this.getNode().getNodeId(), fanModeType.getLabel());
-		ZWaveCommandClassValueEvent zEvent = new ZWaveCommandClassValueEvent(this.getNode().getNodeId(), endpoint, this.getCommandClass(), new BigDecimal(value));
+		ZWaveCommandClassValueEvent zEvent = new ZWaveCommandClassValueEvent(this.getNode().getNodeId(), endpoint, this.getCommandClass(), value);
 		this.getController().notifyEventListeners(zEvent);
 	}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatSetpointConverter.java
Patch:
@@ -11,7 +11,7 @@
 import java.math.BigDecimal;
 import java.util.Map;
 
-import org.openhab.binding.zwave.internal.converter.command.DecimalCommandConverter;
+import org.openhab.binding.zwave.internal.converter.command.BigDecimalCommandConverter;
 import org.openhab.binding.zwave.internal.converter.command.ZWaveCommandConverter;
 import org.openhab.binding.zwave.internal.converter.state.BigDecimalDecimalTypeConverter;
 import org.openhab.binding.zwave.internal.converter.state.ZWaveStateConverter;
@@ -52,7 +52,7 @@ public class ZWaveThermostatSetpointConverter extends
 	public ZWaveThermostatSetpointConverter(ZWaveController controller,
 			EventPublisher eventPublisher) {
 		super(controller, eventPublisher);
-		this.addCommandConverter(new DecimalCommandConverter());
+		this.addCommandConverter(new BigDecimalCommandConverter());
 		this.addStateConverter(new BigDecimalDecimalTypeConverter());
 	}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java
Patch:
@@ -671,10 +671,9 @@ public int getSendQueueLength() {
 	 * @param event the event to send.
 	 */
 	public void notifyEventListeners(ZWaveEvent event) {
-		logger.debug("Notifying event listeners");
+		logger.debug("Notifying event listeners: {}", event.getClass().getSimpleName());
 		ArrayList<ZWaveEventListener> copy = new ArrayList<ZWaveEventListener>(this.zwaveEventListeners);
 		for (ZWaveEventListener listener : copy) {
-			logger.trace("Notifying {}", listener.toString());
 			listener.ZWaveIncomingEvent(event);
 		}
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveProductDatabase.java
Patch:
@@ -90,8 +90,9 @@ private void loadDatabase() {
 			// this.Manufacturer = (ZWaveDbManufacturer)
 			InputStream x = entry.openStream();
 			database = (ZWaveDbRoot) xstream.fromXML(x);
-			if (database == null)
+			if (database == null) {
 				return;
+			}
 		} catch (IOException e) {
 			e.printStackTrace();
 		}

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/DSMRMeter.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * DSMR Meter represents a meter for this binding.
  * <p>
- * The main Electricity meter {@link DSMRMeterType}.ELECTRICTY is available 
+ * The main Electricity meter {@link DSMRMeterType}.ELECTRICTY is available
  * implicit and an instance of this class for this meter is not necessary.
  * 
  * @author M. Volaart

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/DSMRMeterType.java
Patch:
@@ -30,7 +30,7 @@ public enum DSMRMeterType {
 	/** Generic meter (generic.channel) */
 	GENERIC("generic.channel"),
 	/** Slave electricity meter (slaveelectricity.channel) */
-	SLAVE_ELECTRICITY("slavelectricity.channel");
+	SLAVE_ELECTRICITY("slaveelectricity.channel");
 
 	/** Channel configuration key for openhab.cfg */
 	public final String channelConfigKey;

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/cosem/CosemFloat.java
Patch:
@@ -46,7 +46,8 @@ protected DecimalType parse(String cosemValue) throws ParseException {
 		try {
 			return new DecimalType(Float.parseFloat(cosemValue));
 		} catch (NumberFormatException nfe) {
-			throw new ParseException("Failed to parse value " + value + " as float", 0);
+			throw new ParseException("Failed to parse value " + value
+					+ " as float", 0);
 		}
 	}
 }

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/cosem/CosemString.java
Patch:
@@ -32,7 +32,8 @@ public CosemString(String unit, String bindingSuffix) {
 	}
 
 	/**
-	 * Parses a String value (that represents an integer) to an openHAB StringType
+	 * Parses a String value (that represents an integer) to an openHAB
+	 * StringType
 	 * 
 	 * @param cosemValue
 	 *            the value to parse

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/cosem/CosemValueDescriptor.java
Patch:
@@ -47,6 +47,7 @@ public CosemValueDescriptor(
 
 	/**
 	 * Returns the class of the CosemValue
+	 * 
 	 * @return the class of the CosemValue
 	 */
 	public Class<? extends CosemValue<? extends State>> getCosemValueClass() {
@@ -55,14 +56,15 @@ public Class<? extends CosemValue<? extends State>> getCosemValueClass() {
 
 	/**
 	 * Returns the unit
+	 * 
 	 * @return the unit
 	 */
 	public String getUnit() {
 		return unit;
 	}
 
 	/**
-	 * Returns the DSMR item id 
+	 * Returns the DSMR item id
 	 * 
 	 * @return the DSMR item id
 	 */

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/DSMRMeter.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * DSMR Meter represents a meter for this binding.
  * <p>
- * The main Electricity meter {@link DSMRMeterType}.ELECTRICTY is available 
+ * The main Electricity meter {@link DSMRMeterType}.ELECTRICTY is available
  * implicit and an instance of this class for this meter is not necessary.
  * 
  * @author M. Volaart

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/DSMRMeterType.java
Patch:
@@ -30,7 +30,7 @@ public enum DSMRMeterType {
 	/** Generic meter (generic.channel) */
 	GENERIC("generic.channel"),
 	/** Slave electricity meter (slaveelectricity.channel) */
-	SLAVE_ELECTRICITY("slavelectricity.channel");
+	SLAVE_ELECTRICITY("slaveelectricity.channel");
 
 	/** Channel configuration key for openhab.cfg */
 	public final String channelConfigKey;

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/cosem/CosemFloat.java
Patch:
@@ -46,7 +46,8 @@ protected DecimalType parse(String cosemValue) throws ParseException {
 		try {
 			return new DecimalType(Float.parseFloat(cosemValue));
 		} catch (NumberFormatException nfe) {
-			throw new ParseException("Failed to parse value " + value + " as float", 0);
+			throw new ParseException("Failed to parse value " + value
+					+ " as float", 0);
 		}
 	}
 }

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/cosem/CosemString.java
Patch:
@@ -32,7 +32,8 @@ public CosemString(String unit, String bindingSuffix) {
 	}
 
 	/**
-	 * Parses a String value (that represents an integer) to an openHAB StringType
+	 * Parses a String value (that represents an integer) to an openHAB
+	 * StringType
 	 * 
 	 * @param cosemValue
 	 *            the value to parse

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/cosem/CosemValueDescriptor.java
Patch:
@@ -47,6 +47,7 @@ public CosemValueDescriptor(
 
 	/**
 	 * Returns the class of the CosemValue
+	 * 
 	 * @return the class of the CosemValue
 	 */
 	public Class<? extends CosemValue<? extends State>> getCosemValueClass() {
@@ -55,14 +56,15 @@ public Class<? extends CosemValue<? extends State>> getCosemValueClass() {
 
 	/**
 	 * Returns the unit
+	 * 
 	 * @return the unit
 	 */
 	public String getUnit() {
 		return unit;
 	}
 
 	/**
-	 * Returns the DSMR item id 
+	 * Returns the DSMR item id
 	 * 
 	 * @return the DSMR item id
 	 */

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoGenericBindingProvider.java
Patch:
@@ -13,6 +13,7 @@
 import org.openhab.core.items.Item;
 import org.openhab.core.library.items.DateTimeItem;
 import org.openhab.core.library.items.NumberItem;
+import org.openhab.library.gps.items.CoordinateItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
 import org.openhab.model.item.binding.BindingConfigParseException;
 import org.slf4j.Logger;
@@ -79,10 +80,10 @@ public String getBindingType() {
 	 */
 	@Override
 	public void validateItemType(final Item item, final String bindingConfig) throws BindingConfigParseException {
-		if (!(item instanceof NumberItem || item instanceof DateTimeItem)) {
+		if (!(item instanceof NumberItem || item instanceof DateTimeItem || item instanceof CoordinateItem)) {
 			throw new BindingConfigParseException(
 				"item '" + item.getName() + "' is of type '" + item.getClass().getSimpleName() + 
-				"', only NumberItems and DateTimeItems are allowed - please check your *.items configuration");
+				"', only NumberItems, DateTimeItems and CoordinateItems are allowed - please check your *.items configuration");
 		}
 	}
 	

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoMeasureType.java
Patch:
@@ -30,7 +30,8 @@ public enum NetatmoMeasureType {
 	LONGITUDE("Longitude"),
 	RFSTATUS("RfStatus"),
 	BATTERYVP("BatteryVp"),
-	TIMESTAMP("TimeStamp");
+	TIMESTAMP("TimeStamp"),
+	COORDINATE("Coordinate");
 	
 	String measure;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/DeviceListResponse.java
Patch:
@@ -408,11 +408,11 @@ public Integer getAltitude() {
 		 }
 		
 		 public Double getLatitude() {
-			 return this.place.location.get(0);
+			 return this.place.location.get(1);
 		 }
 		
 		 public Double getLongitude() {
-			 return this.place.location.get(1);
+			 return this.place.location.get(0);
 		 }
 		
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java
Patch:
@@ -454,8 +454,9 @@ private void handleZWaveCommandClassValueEvent(
 			for (String itemName : provider.getItemNames()) {
 				ZWaveBindingConfig bindingConfig = provider.getZwaveBindingConfig(itemName);
 				
-				if (bindingConfig.getNodeId() != event.getNodeId() || bindingConfig.getEndpoint() != event.getEndpoint())
+				if (bindingConfig.getNodeId() != event.getNodeId() || bindingConfig.getEndpoint() != event.getEndpoint()) {
 					continue;
+				}
 				
 				converterHandler.handleEvent(provider, itemName, event);
 				handled = true;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConfigurationConverter.java
Patch:
@@ -99,14 +99,14 @@ public void handleEvent(ZWaveCommandClassValueEvent event, Item item, Map<String
 		if(cfgEvent.getParameter() != null && cfgEvent.getParameter().getIndex() != Integer.parseInt(parmNumber)) {
 			return;
 		}
-
-		ZWaveStateConverter<?,?> converter = this.getStateConverter(item, event.getValue());
+		
+		ZWaveStateConverter<?,?> converter = this.getStateConverter(item, cfgEvent.getParameter().getValue());
 		if (converter == null) {
 			logger.warn("NODE {}: No converter found for item = {}, endpoint = {}, ignoring event.", event.getNodeId(), item.getName(), event.getEndpoint());
 			return;
 		}
 
-		State state = converter.convertFromValueToState(event.getValue());
+		State state = converter.convertFromValueToState(cfgEvent.getParameter().getValue());
 		this.getEventPublisher().postUpdate(item.getName(), state);
 	}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterHandler.java
Patch:
@@ -83,6 +83,7 @@ public ZWaveConverterHandler(ZWaveController controller, EventPublisher eventPub
 		converters.put(CommandClass.SCENE_ACTIVATION, new ZWaveSceneConverter(controller, eventPublisher));
 		converters.put(CommandClass.FIBARO_FGRM_222, new FibaroFGRM222Converter(controller, eventPublisher));
 		converters.put(CommandClass.ALARM, new ZWaveAlarmConverter(controller, eventPublisher));
+		converters.put(CommandClass.CONFIGURATION, new ZWaveConfigurationConverter(controller, eventPublisher));
 
 		infoConverter = new ZWaveInfoConverter(controller, eventPublisher);
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveConfigurationCommandClass.java
Patch:
@@ -238,7 +238,7 @@ public class ZWaveConfigurationParameterEvent extends ZWaveCommandClassValueEven
 		 * @param nodeId the nodeId of the event. Must be set to the controller node.
 		 */
 		public ZWaveConfigurationParameterEvent(int nodeId, ConfigurationParameter parameter) {
-			super(nodeId, nodeId, CommandClass.CONFIGURATION, parameter);
+			super(nodeId, 0, CommandClass.CONFIGURATION, parameter);
 		}
 
 		/**

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveDbCommandClass.java
Patch:
@@ -30,6 +30,9 @@ public class ZWaveDbCommandClass {
 	// If we want to remove this class, set to true
 	public Boolean remove;
 
+	// IF we want to add this class if it doesn't exist, set to true
+	public Boolean add;
+
 	// Sets whether or not get is supported by ZWaveGetCommandClass
 	public Boolean isGetSupported;
 	

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterHandler.java
Patch:
@@ -81,6 +81,7 @@ public ZWaveConverterHandler(ZWaveController controller, EventPublisher eventPub
 		converters.put(CommandClass.METER, new ZWaveMeterConverter(controller, eventPublisher));
 		converters.put(CommandClass.BASIC, new ZWaveBasicConverter(controller, eventPublisher));
 		converters.put(CommandClass.SCENE_ACTIVATION, new ZWaveSceneConverter(controller, eventPublisher));
+		converters.put(CommandClass.FIBARO_FGRM_222, new FibaroFGRM222Converter(controller, eventPublisher));
 		converters.put(CommandClass.ALARM, new ZWaveAlarmConverter(controller, eventPublisher));
 
 		infoConverter = new ZWaveInfoConverter(controller, eventPublisher);

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -113,7 +113,7 @@ public class MysqlPersistenceService implements QueryablePersistenceService, Man
 	
 	public void activate() {
 		// Initialise the type array
-		sqlTypes.put("COLORITEM", "CHAR(25)");
+		sqlTypes.put("COLORITEM", "VARCHAR(70)");
 		sqlTypes.put("CONTACTITEM", "VARCHAR(6)");
 		sqlTypes.put("DATETIMEITEM", "DATETIME(3)");
 		sqlTypes.put("DIMMERITEM", "TINYINT");

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/DSMRMeter.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * DSMR Meter represents a meter for this binding.
  * <p>
- * The main Electricity meter {@link DSMRMeterType}.ELECTRICTY is available 
+ * The main Electricity meter {@link DSMRMeterType}.ELECTRICTY is available
  * implicit and an instance of this class for this meter is not necessary.
  * 
  * @author M. Volaart

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/DSMRMeterType.java
Patch:
@@ -30,7 +30,7 @@ public enum DSMRMeterType {
 	/** Generic meter (generic.channel) */
 	GENERIC("generic.channel"),
 	/** Slave electricity meter (slaveelectricity.channel) */
-	SLAVE_ELECTRICITY("slavelectricity.channel");
+	SLAVE_ELECTRICITY("slaveelectricity.channel");
 
 	/** Channel configuration key for openhab.cfg */
 	public final String channelConfigKey;

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/cosem/CosemFloat.java
Patch:
@@ -46,7 +46,8 @@ protected DecimalType parse(String cosemValue) throws ParseException {
 		try {
 			return new DecimalType(Float.parseFloat(cosemValue));
 		} catch (NumberFormatException nfe) {
-			throw new ParseException("Failed to parse value " + value + " as float", 0);
+			throw new ParseException("Failed to parse value " + value
+					+ " as float", 0);
 		}
 	}
 }

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/cosem/CosemString.java
Patch:
@@ -32,7 +32,8 @@ public CosemString(String unit, String bindingSuffix) {
 	}
 
 	/**
-	 * Parses a String value (that represents an integer) to an openHAB StringType
+	 * Parses a String value (that represents an integer) to an openHAB
+	 * StringType
 	 * 
 	 * @param cosemValue
 	 *            the value to parse

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/cosem/CosemValueDescriptor.java
Patch:
@@ -47,6 +47,7 @@ public CosemValueDescriptor(
 
 	/**
 	 * Returns the class of the CosemValue
+	 * 
 	 * @return the class of the CosemValue
 	 */
 	public Class<? extends CosemValue<? extends State>> getCosemValueClass() {
@@ -55,14 +56,15 @@ public Class<? extends CosemValue<? extends State>> getCosemValueClass() {
 
 	/**
 	 * Returns the unit
+	 * 
 	 * @return the unit
 	 */
 	public String getUnit() {
 		return unit;
 	}
 
 	/**
-	 * Returns the DSMR item id 
+	 * Returns the DSMR item id
 	 * 
 	 * @return the DSMR item id
 	 */

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -113,7 +113,7 @@ public class MysqlPersistenceService implements QueryablePersistenceService, Man
 	
 	public void activate() {
 		// Initialise the type array
-		sqlTypes.put("COLORITEM", "CHAR(25)");
+		sqlTypes.put("COLORITEM", "VARCHAR(70)");
 		sqlTypes.put("CONTACTITEM", "VARCHAR(6)");
 		sqlTypes.put("DATETIMEITEM", "DATETIME(3)");
 		sqlTypes.put("DIMMERITEM", "TINYINT");

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -113,7 +113,7 @@ public class MysqlPersistenceService implements QueryablePersistenceService, Man
 	
 	public void activate() {
 		// Initialise the type array
-		sqlTypes.put("COLORITEM", "CHAR(25)");
+		sqlTypes.put("COLORITEM", "VARCHAR(70)");
 		sqlTypes.put("CONTACTITEM", "VARCHAR(6)");
 		sqlTypes.put("DATETIMEITEM", "DATETIME(3)");
 		sqlTypes.put("DIMMERITEM", "TINYINT");

File: bundles/io/org.openhab.io.transport.cul/src/main/java/org/openhab/io/transport/cul/CULManager.java
Patch:
@@ -77,7 +77,7 @@ public static CULHandler getOpenCULHandler(String deviceName, CULMode mode, Map<
 
 			if (openDevices.containsKey(deviceName)) {
 				CULHandler handler = openDevices.get(deviceName);
-				if (handler.getCULMode() == mode) {
+				if ((handler.getCULMode() == mode)  && (handler.arePropertiesEqual(properties))){
 					logger.debug("Device " + deviceName + " is already open in mode " + mode.toString()
 							+ ", returning already openend handler");
 					return handler;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveBinarySwitchConverter.java
Patch:
@@ -67,7 +67,7 @@ public ZWaveBinarySwitchConverter(ZWaveController controller, EventPublisher eve
 	@Override
 	public SerialMessage executeRefresh(ZWaveNode node, 
 			ZWaveBinarySwitchCommandClass commandClass, int endpointId, Map<String,String> arguments) {
-		logger.debug("NODE {}: Generating poll message for {} for node {} endpoint {}", node.getNodeId(), commandClass.getCommandClass().getLabel(), endpointId);
+		logger.debug("NODE {}: Generating poll message for {}, endpoint {}", node.getNodeId(), commandClass.getCommandClass().getLabel(), endpointId);
 		return node.encapsulate(commandClass.getValueMessage(), commandClass, endpointId);
 	}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMultiLevelSwitchConverter.java
Patch:
@@ -189,6 +189,8 @@ public void receiveCommand(Item item, Command command, ZWaveNode node,
 			logger.warn("Generating message failed for command class = {}, node = {}, endpoint = {}", commandClass.getCommandClass().getLabel(), node.getNodeId(), endpointId);
 			return;
 		}
+		
+		this.getController().sendData(serialMessage);
 
 		// update the bus in case of normal dimming. schedule refresh in case of restore to last value dimming.
 		if (!"true".equalsIgnoreCase(restoreLastValue) && command instanceof OnOffType && (OnOffType)command == OnOffType.ON) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -407,7 +407,6 @@ public void setVersion(int version) {
 	public double getApplicationVersion() {
 		ZWaveVersionCommandClass versionCmdClass = (ZWaveVersionCommandClass) this.getCommandClass(CommandClass.VERSION);
 		if(versionCmdClass == null) {
-			logger.trace("NODE {}: App version requested but Version class not supported", this.getNodeId());
 			return 0.0;
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveConfigurationCommandClass.java
Patch:
@@ -137,7 +137,7 @@ public SerialMessage getConfigMessage(int parameter) {
 		logger.debug("NODE {}: Creating new message for application command CONFIGURATIONCMD_GET", this.getNode()
 				.getNodeId());
 		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData,
-				SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
+				SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Config);
 		byte[] newPayload = { (byte) this.getNode().getNodeId(), 3, (byte) getCommandClass().getKey(),
 				(byte) CONFIGURATIONCMD_GET, (byte) (parameter & 0xff) };
 		result.setMessagePayload(newPayload);
@@ -154,7 +154,7 @@ public SerialMessage setConfigMessage(ConfigurationParameter parameter) {
 		logger.debug("NODE {}: Creating new message for application command CONFIGURATIONCMD_SET", this.getNode()
 				.getNodeId());
 		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData,
-				SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Set);
+				SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Config);
 		byte[] newPayload = new byte[parameter.getSize() + 6];
 		newPayload[0] = (byte) this.getNode().getNodeId();
 		newPayload[1] = (byte) (4 + parameter.getSize());

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveManufacturerSpecificCommandClass.java
Patch:
@@ -99,7 +99,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 	 */
 	public SerialMessage getManufacturerSpecificMessage() {
 		logger.debug("NODE {}: Creating new message for command MANUFACTURER_SPECIFIC_GET", this.getNode().getNodeId());
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Config);
     	byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
     							2, 
 								(byte) getCommandClass().getKey(), 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMeterCommandClass.java
Patch:
@@ -301,7 +301,7 @@ public SerialMessage getSupportedMessage() {
 		logger.debug("NODE {}: Creating new message for application command METER_SUPPORTED_GET", this.getNode()
 				.getNodeId());
 		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData,
-				SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
+				SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Config);
 		byte[] newPayload = { (byte) this.getNode().getNodeId(), 2, (byte) getCommandClass().getKey(),
 				(byte) METER_SUPPORTED_GET };
 		result.setMessagePayload(newPayload);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java
Patch:
@@ -493,7 +493,7 @@ public SerialMessage getMultiInstanceEncapMessage(SerialMessage serialMessage, i
 	 */
 	public SerialMessage getMultiChannelEndpointGetMessage() {
 		logger.debug("NODE {}: Creating new message for command MULTI_CHANNEL_ENDPOINT_GET", this.getNode().getNodeId());
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Config);
     	byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
     							2, 
 								(byte) getCommandClass().getKey(), 
@@ -510,7 +510,7 @@ public SerialMessage getMultiChannelEndpointGetMessage() {
 	 */
 	public SerialMessage getMultiChannelCapabilityGetMessage(ZWaveEndpoint endpoint) {
 		logger.debug("NODE {}: Creating new message for command MULTI_CHANNEL_CAPABILITY_GET endpoint {}", this.getNode().getNodeId(), endpoint.getEndpointId());
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Config);
     	byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
     							3, 
 								(byte) getCommandClass().getKey(), 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiLevelSensorCommandClass.java
Patch:
@@ -227,7 +227,7 @@ public SerialMessage getSupportedValueMessage() {
 		SerialMessage result = new SerialMessage(this.getNode().getNodeId(),
 				SerialMessageClass.SendData, SerialMessageType.Request,
 				SerialMessageClass.ApplicationCommandHandler,
-				SerialMessagePriority.High);
+				SerialMessagePriority.Config);
 		byte[] newPayload = { (byte) this.getNode().getNodeId(), 
 				2,
 				(byte) getCommandClass().getKey(),

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanModeCommandClass.java
Patch:
@@ -237,7 +237,7 @@ public boolean setOptions (ZWaveDbCommandClass options) {
 	public SerialMessage getSupportedMessage() {
 		logger.debug("NODE {}: Creating new message for application command THERMOSTAT_FAN_MODE_SUPPORTED_GET", this.getNode().getNodeId());
 
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.High);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Config);
 		byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
 				2, 
 				(byte) getCommandClass().getKey(), 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatModeCommandClass.java
Patch:
@@ -237,7 +237,7 @@ public boolean setOptions (ZWaveDbCommandClass options) {
 	public SerialMessage getSupportedMessage() {
 		logger.debug("NODE {}: Creating new message for application command THERMOSTAT_MODE_SUPPORTED_GET", this.getNode().getNodeId());
 
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.High);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Config);
 		byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
 				2, 
 				(byte) getCommandClass().getKey(), 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatSetpointCommandClass.java
Patch:
@@ -283,7 +283,7 @@ public SerialMessage getMessage(SetpointType setpointType) {
 	public SerialMessage getSupportedMessage() {
 		logger.debug("NODE {}: Creating new message for command THERMOSTAT_SETPOINT_SUPPORTED_GET", this.getNode().getNodeId());
 		
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.High);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Config);
     	byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
     							2, 
 								(byte) getCommandClass().getKey(), 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveVersionCommandClass.java
Patch:
@@ -149,7 +149,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 	 */
 	public SerialMessage getVersionMessage() {
 		logger.debug("NODE {}: Creating new message for command VERSION_GET", this.getNode().getNodeId());
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Config);
     	byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
     							2, 
 								(byte) getCommandClass().getKey(), 
@@ -167,7 +167,7 @@ public SerialMessage getVersionMessage() {
 	 */
 	public SerialMessage getCommandClassVersionMessage(CommandClass commandClass) {
 	logger.debug("NODE {}: Creating new message for application command VERSION_COMMAND_CLASS_GET command class {}", this.getNode().getNodeId(), commandClass.getLabel());
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Config);
     	byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
     							3, 
 								(byte) getCommandClass().getKey(), 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveWakeUpCommandClass.java
Patch:
@@ -247,7 +247,7 @@ public boolean processOutgoingWakeupMessage(SerialMessage serialMessage) {
 	 */
 	public SerialMessage getIntervalMessage() {
 		logger.debug("NODE {}: Creating new message for application command WAKE_UP_INTERVAL_GET", this.getNode().getNodeId());
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Config);
     	byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
     							2, 
 								(byte) getCommandClass().getKey(), 
@@ -262,7 +262,7 @@ public SerialMessage getIntervalMessage() {
 	 */
 	public SerialMessage getIntervalCapabilitiesMessage() {
 		logger.debug("NODE {}: Creating new message for application command WAKE_UP_INTERVAL_CAPABILITIES_GET", this.getNode().getNodeId());
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Config);
     	byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
     							2, 
 								(byte) getCommandClass().getKey(), 
@@ -439,7 +439,7 @@ public void setAwake(boolean isAwake) {
 	 */
 	public SerialMessage setInterval(int interval) {
 		logger.debug("NODE {}: Creating new message for application command WAKE_UP_INTERVAL_SET to {}", this.getNode().getNodeId(), interval);
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Config);
     	byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
     							6, 
 								(byte) getCommandClass().getKey(), 

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBusReaderScheduler.java
Patch:
@@ -109,6 +109,7 @@ public synchronized void clear() {
 				}
 			} catch (InterruptedException e) {
 				sLogger.debug("Schedule executor restart failed: interrupted while waiting for termination.");
+				Thread.currentThread().interrupt();
 			}
 			mScheduledExecutorService = Executors.newScheduledThreadPool(KNXConnection.getNumberOfThreads());
 			sLogger.debug("Schedule executor restart: started.");
@@ -288,4 +289,4 @@ public void run() {
 			}
 		}
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java
Patch:
@@ -1178,7 +1178,7 @@ public void run() {
 	    				sendAllowed.release();
 	    			}
 					recvMessage = recvQueue.take();
-					logger.trace("Receive queue TAKE: Length={}", recvQueue.size());
+					logger.debug("Receive queue TAKE: Length={}", recvQueue.size());
 					logger.debug("Process Message = {}", SerialMessage.bb2hex(recvMessage.getMessageBuffer()));
 
 		    		handleIncomingMessage(recvMessage);
@@ -1420,7 +1420,7 @@ private void processIncomingMessage(byte[] buffer) throws InterruptedException {
     		}
 
     		recvQueue.add(recvMessage);
-			logger.trace("Receive queue ADD: Length={}", recvQueue.size());
+			logger.debug("Receive queue ADD: Length={}", recvQueue.size());
         }
 
 		/**

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -407,13 +407,13 @@ public void setVersion(int version) {
 	public double getApplicationVersion() {
 		ZWaveVersionCommandClass versionCmdClass = (ZWaveVersionCommandClass) this.getCommandClass(CommandClass.VERSION);
 		if(versionCmdClass == null) {
-			logger.debug("NODE {}: App version requested but Version class not supported", this.getNodeId());
+			logger.trace("NODE {}: App version requested but Version class not supported", this.getNodeId());
 			return 0.0;
 		}
 
 		Double appVersion = versionCmdClass.getApplicationVersion();
 		if(appVersion == null) {
-			logger.debug("NODE {}: App version requested but version is unknown", this.getNodeId());
+			logger.trace("NODE {}: App version requested but version is unknown", this.getNodeId());
 			return 0.0;			
 		}
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -316,15 +316,15 @@ public void advanceNodeStage(SerialMessageClass eventClass) {
 					if(currentStage.isStaticComplete()) {
 						// If static stages are complete, then we skip forward to the next
 						// stage.
-						logger.debug("NODE {}: Retry timout: Advancing");
+						logger.debug("NODE {}: Retry timout: Advancing", node.getNodeId());
 						setCurrentStage(currentStage.getNextStage());
 					}
 					else {
 						// For static stages, we MUST complete all steps otherwise we end
 						// up with incomplete information about the device.
 						// During the static stages, we use the back off timer to pace things
 						// and retry until the stage is complete
-						logger.debug("NODE {}: Retry timout: Can't advance");
+						logger.debug("NODE {}: Retry timout: Can't advance", node.getNodeId());
 						break;
 					}
 				}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java
Patch:
@@ -56,7 +56,7 @@ public class ZWaveActiveBinding extends AbstractActiveBinding<ZWaveBindingProvid
 	private String port;
 	private boolean isSUC = false;
 	private boolean softReset = false;
-	private boolean masterController = false;
+	private boolean masterController = true;
 	private Integer healtime = null;
 	private Integer aliveCheckPeriod = null;
 	private Integer timeout = null;
@@ -390,7 +390,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 				masterController = Boolean.parseBoolean((String) config.get("masterController"));
 				logger.info("Update config, masterController = {}", masterController);
 			} catch (NumberFormatException e) {
-				masterController = false;
+				masterController = true;
 				logger.error("Error parsing 'masterController'. This must be boolean.");
 			}
 		}

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/ConverterFactory.java
Patch:
@@ -8,6 +8,7 @@
  */
 package org.openhab.binding.homematic.internal.converter;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -47,7 +48,7 @@ public Converter<? extends State> createConverter(Item item, HomematicBindingCon
 			return ((ValueBindingConfig) bindingConfig).getConverter();
 		}
 
-		List<Class<? extends State>> acceptedTypes = item.getAcceptedDataTypes();
+		List<Class<? extends State>> acceptedTypes = new ArrayList<Class<? extends State>>(item.getAcceptedDataTypes());
 		Collections.sort(acceptedTypes, typeComparator);
 
 		for (Class<? extends State> clazz : acceptedTypes) {

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/io/ASCIIInputStream.java
Patch:
@@ -57,7 +57,7 @@ public ASCIIInputStream(InputStream in) {
    */
   public int read() throws IOException {
     StringBuffer sbuf = new StringBuffer(2);
-    int ch = in.read();
+    int ch = in.read(); //!@todo that thing blocks until something was received
     if(ch == -1) {
       return -1;
     }

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/net/SerialConnection.java
Patch:
@@ -102,7 +102,7 @@ public void open() throws Exception {
           CommPortIdentifier.getPortIdentifier(m_Parameters.getPortName());
     } catch (NoSuchPortException e) {
       if(Modbus.debug) System.out.println(e.getMessage());
-      throw new Exception(e.getMessage());
+      throw new Exception("Could not get port identifier, maybe insufficient permissions. " + e.getMessage());
     }
     //System.out.println("Got Port Identifier");
 

File: bundles/binding/org.openhab.binding.pilight/src/main/java/org/openhab/binding/pilight/internal/PilightBindingConfig.java
Patch:
@@ -31,7 +31,7 @@ public class PilightBindingConfig implements BindingConfig {
 		
 		private String property; 
 		
-		private Integer scale = 1; 
+		private int scale = 0; 
 		
 		public String getItemName() {
 			return itemName;
@@ -82,11 +82,11 @@ public void setProperty(String value) {
 			this.property = value;
 		}
 		
-		public Integer getScale() {
+		public int getScale() {
 			return scale;
 		}
 		
-		public void setScale(Integer scale) {
+		public void setScale(int scale) {
 			this.scale = scale;
 		}
 		

File: bundles/binding/org.openhab.binding.snmp/src/main/java/org/openhab/binding/snmp/SnmpBindingProvider.java
Patch:
@@ -13,7 +13,6 @@
 import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.items.Item;
 import org.openhab.core.transform.TransformationException;
-import org.openhab.core.transform.TransformationService;
 import org.openhab.core.types.Command;
 import org.snmp4j.smi.Address;
 import org.snmp4j.smi.Integer32;

File: bundles/binding/org.openhab.binding.snmp/src/main/java/org/openhab/binding/snmp/internal/SnmpBinding.java
Patch:
@@ -89,7 +89,6 @@ public class SnmpBinding extends AbstractActiveBinding<SnmpBindingProvider>
 	public void activate() {
 		logger.debug("SNMP binding activated");
 		super.activate();
-		setProperlyConfigured(true);
 	}
 
 	public void deactivate() {
@@ -431,6 +430,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 		if (mapping) {
 			listen();
 		}
+		setProperlyConfigured(true);
 	}
 
 	private void sendPDU(CommunityTarget target, PDU pdu) {

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/ConverterFactory.java
Patch:
@@ -8,6 +8,7 @@
  */
 package org.openhab.binding.homematic.internal.converter;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -47,7 +48,7 @@ public Converter<? extends State> createConverter(Item item, HomematicBindingCon
 			return ((ValueBindingConfig) bindingConfig).getConverter();
 		}
 
-		List<Class<? extends State>> acceptedTypes = item.getAcceptedDataTypes();
+		List<Class<? extends State>> acceptedTypes = new ArrayList<Class<? extends State>>(item.getAcceptedDataTypes());
 		Collections.sort(acceptedTypes, typeComparator);
 
 		for (Class<? extends State> clazz : acceptedTypes) {

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/io/ASCIIInputStream.java
Patch:
@@ -57,7 +57,7 @@ public ASCIIInputStream(InputStream in) {
    */
   public int read() throws IOException {
     StringBuffer sbuf = new StringBuffer(2);
-    int ch = in.read();
+    int ch = in.read(); //!@todo that thing blocks until something was received
     if(ch == -1) {
       return -1;
     }

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/net/SerialConnection.java
Patch:
@@ -102,7 +102,7 @@ public void open() throws Exception {
           CommPortIdentifier.getPortIdentifier(m_Parameters.getPortName());
     } catch (NoSuchPortException e) {
       if(Modbus.debug) System.out.println(e.getMessage());
-      throw new Exception(e.getMessage());
+      throw new Exception("Could not get port identifier, maybe insufficient permissions. " + e.getMessage());
     }
     //System.out.println("Got Port Identifier");
 

File: bundles/binding/org.openhab.binding.pilight/src/main/java/org/openhab/binding/pilight/internal/PilightBindingConfig.java
Patch:
@@ -31,7 +31,7 @@ public class PilightBindingConfig implements BindingConfig {
 		
 		private String property; 
 		
-		private Integer scale = 1; 
+		private int scale = 0; 
 		
 		public String getItemName() {
 			return itemName;
@@ -82,11 +82,11 @@ public void setProperty(String value) {
 			this.property = value;
 		}
 		
-		public Integer getScale() {
+		public int getScale() {
 			return scale;
 		}
 		
-		public void setScale(Integer scale) {
+		public void setScale(int scale) {
 			this.scale = scale;
 		}
 		

File: bundles/binding/org.openhab.binding.snmp/src/main/java/org/openhab/binding/snmp/SnmpBindingProvider.java
Patch:
@@ -13,7 +13,6 @@
 import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.items.Item;
 import org.openhab.core.transform.TransformationException;
-import org.openhab.core.transform.TransformationService;
 import org.openhab.core.types.Command;
 import org.snmp4j.smi.Address;
 import org.snmp4j.smi.Integer32;

File: bundles/binding/org.openhab.binding.snmp/src/main/java/org/openhab/binding/snmp/internal/SnmpBinding.java
Patch:
@@ -89,7 +89,6 @@ public class SnmpBinding extends AbstractActiveBinding<SnmpBindingProvider>
 	public void activate() {
 		logger.debug("SNMP binding activated");
 		super.activate();
-		setProperlyConfigured(true);
 	}
 
 	public void deactivate() {
@@ -431,6 +430,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 		if (mapping) {
 			listen();
 		}
+		setProperlyConfigured(true);
 	}
 
 	private void sendPDU(CommunityTarget target, PDU pdu) {

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/ConverterFactory.java
Patch:
@@ -8,6 +8,7 @@
  */
 package org.openhab.binding.homematic.internal.converter;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -47,7 +48,7 @@ public Converter<? extends State> createConverter(Item item, HomematicBindingCon
 			return ((ValueBindingConfig) bindingConfig).getConverter();
 		}
 
-		List<Class<? extends State>> acceptedTypes = item.getAcceptedDataTypes();
+		List<Class<? extends State>> acceptedTypes = new ArrayList<Class<? extends State>>(item.getAcceptedDataTypes());
 		Collections.sort(acceptedTypes, typeComparator);
 
 		for (Class<? extends State> clazz : acceptedTypes) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java
Patch:
@@ -284,7 +284,6 @@ private void initialise() throws ConfigurationException {
 			this.deactivate();
 			this.zController = new ZWaveController(masterController, isSUC, port, timeout, softReset);
 			this.converterHandler = new ZWaveConverterHandler(this.zController, this.eventPublisher);
-			zController.initialize();
 			zController.addEventListener(this);
 
 			// The network monitor service needs to know the controller...

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/ConverterFactory.java
Patch:
@@ -8,6 +8,7 @@
  */
 package org.openhab.binding.homematic.internal.converter;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -47,7 +48,7 @@ public Converter<? extends State> createConverter(Item item, HomematicBindingCon
 			return ((ValueBindingConfig) bindingConfig).getConverter();
 		}
 
-		List<Class<? extends State>> acceptedTypes = item.getAcceptedDataTypes();
+		List<Class<? extends State>> acceptedTypes = new ArrayList<Class<? extends State>>(item.getAcceptedDataTypes());
 		Collections.sort(acceptedTypes, typeComparator);
 
 		for (Class<? extends State> clazz : acceptedTypes) {

File: bundles/binding/org.openhab.binding.snmp/src/main/java/org/openhab/binding/snmp/SnmpBindingProvider.java
Patch:
@@ -13,7 +13,6 @@
 import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.items.Item;
 import org.openhab.core.transform.TransformationException;
-import org.openhab.core.transform.TransformationService;
 import org.openhab.core.types.Command;
 import org.snmp4j.smi.Address;
 import org.snmp4j.smi.Integer32;

File: bundles/binding/org.openhab.binding.snmp/src/main/java/org/openhab/binding/snmp/internal/SnmpBinding.java
Patch:
@@ -89,7 +89,6 @@ public class SnmpBinding extends AbstractActiveBinding<SnmpBindingProvider>
 	public void activate() {
 		logger.debug("SNMP binding activated");
 		super.activate();
-		setProperlyConfigured(true);
 	}
 
 	public void deactivate() {
@@ -431,6 +430,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 		if (mapping) {
 			listen();
 		}
+		setProperlyConfigured(true);
 	}
 
 	private void sendPDU(CommunityTarget target, PDU pdu) {

File: bundles/binding/org.openhab.binding.snmp/src/main/java/org/openhab/binding/snmp/SnmpBindingProvider.java
Patch:
@@ -13,7 +13,6 @@
 import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.items.Item;
 import org.openhab.core.transform.TransformationException;
-import org.openhab.core.transform.TransformationService;
 import org.openhab.core.types.Command;
 import org.snmp4j.smi.Address;
 import org.snmp4j.smi.Integer32;

File: bundles/binding/org.openhab.binding.snmp/src/main/java/org/openhab/binding/snmp/internal/SnmpBinding.java
Patch:
@@ -89,7 +89,6 @@ public class SnmpBinding extends AbstractActiveBinding<SnmpBindingProvider>
 	public void activate() {
 		logger.debug("SNMP binding activated");
 		super.activate();
-		setProperlyConfigured(true);
 	}
 
 	public void deactivate() {
@@ -431,6 +430,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 		if (mapping) {
 			listen();
 		}
+		setProperlyConfigured(true);
 	}
 
 	private void sendPDU(CommunityTarget target, PDU pdu) {

File: bundles/binding/org.openhab.binding.pilight/src/main/java/org/openhab/binding/pilight/internal/PilightBindingConfig.java
Patch:
@@ -31,7 +31,7 @@ public class PilightBindingConfig implements BindingConfig {
 		
 		private String property; 
 		
-		private Integer scale = 1; 
+		private int scale = 0; 
 		
 		public String getItemName() {
 			return itemName;
@@ -82,11 +82,11 @@ public void setProperty(String value) {
 			this.property = value;
 		}
 		
-		public Integer getScale() {
+		public int getScale() {
 			return scale;
 		}
 		
-		public void setScale(Integer scale) {
+		public void setScale(int scale) {
 			this.scale = scale;
 		}
 		

File: bundles/binding/org.openhab.binding.netatmo.test/src/test/java/org/openhab/binding/netatmo/internal/messages/DeviceListTest.java
Patch:
@@ -40,7 +40,7 @@ public void testSuccess() throws Exception {
 		final DeviceListResponse response = request.execute();
 
 		assertFalse(response.isError());
-		assertEquals("http://api.netatmo.net/api/devicelist?access_token="
+		assertEquals("https://api.netatmo.net/api/devicelist?access_token="
 				+ ACCESS_TOKEN, request.getQuery());
 		assertEquals("ok", response.getStatus());
 

File: bundles/binding/org.openhab.binding.netatmo.test/src/test/java/org/openhab/binding/netatmo/internal/messages/MeasurementTest.java
Patch:
@@ -57,7 +57,7 @@ public void testSuccess() throws Exception {
 		assertFalse(response.isError());
 		assertNull(response.getError());
 
-		assertEquals("http://api.netatmo.net/api/getmeasure?access_token="
+		assertEquals("https://api.netatmo.net/api/getmeasure?access_token="
 				+ encodeQuery(ACCESS_TOKEN)
 				+ "&scale=max&date_end=last&device_id=" + DEVICE_ID
 				+ "&module_id=" + MODULE_ID + "&type=Humidity,Temperature",

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBinding.java
Patch:
@@ -172,7 +172,6 @@ static class DeviceMeasureValueMap extends HashMap<String, Map<String,BigDecimal
     }
 
     private DeviceMeasureValueMap processMeasurements(OAuthCredentials oauthCredentials) {
-        //Map<String, Map<String, BigDecimal>> deviceMeasureValueMap = new HashMap<String, Map<String,BigDecimal>>();
     	DeviceMeasureValueMap deviceMeasureValueMap = new DeviceMeasureValueMap();
     	
         for (final MeasurementRequest request : createMeasurementRequests()) {

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/AbstractRequest.java
Patch:
@@ -25,6 +25,8 @@ public abstract class AbstractRequest extends AbstractMessage implements Request
 	protected static final String HTTP_GET = "GET";
 
 	protected static final String HTTP_POST = "POST";
+	
+	protected static final String API_BASE_URL = "https://api.netatmo.net/api/";
 
 	protected static final Properties HTTP_HEADERS;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/DeviceListRequest.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class DeviceListRequest extends AbstractRequest {
 
-	private static final String RESOURCE_URL = "http://api.netatmo.net/api/devicelist";
+	private static final String RESOURCE_URL = API_BASE_URL + "devicelist";
 
 	private final String accessToken;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/MeasurementRequest.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class MeasurementRequest extends AbstractRequest {
 
-	private static final String RESOURCE_URL = "http://api.netatmo.net/api/getmeasure";
+	private static final String RESOURCE_URL = API_BASE_URL + "getmeasure";
 
 	/**
 	 * @param deviceId

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmniLinkBinding.java
Patch:
@@ -399,6 +399,8 @@ public void notConnectedEvent(Exception e) {
 						
 						omni = c.reqSystemInformation().getModel() < 36;
 						
+						celius = c.reqSystemFormats().getTempFormat() > 1;
+						
 						/*
 						 * We need to explicitly tell the controller to send us
 						 * real time notifications

File: bundles/binding/org.openhab.binding.netatmo.test/src/test/java/org/openhab/binding/netatmo/internal/messages/DeviceListTest.java
Patch:
@@ -40,7 +40,7 @@ public void testSuccess() throws Exception {
 		final DeviceListResponse response = request.execute();
 
 		assertFalse(response.isError());
-		assertEquals("http://api.netatmo.net/api/devicelist?access_token="
+		assertEquals("https://api.netatmo.net/api/devicelist?access_token="
 				+ ACCESS_TOKEN, request.getQuery());
 		assertEquals("ok", response.getStatus());
 

File: bundles/binding/org.openhab.binding.netatmo.test/src/test/java/org/openhab/binding/netatmo/internal/messages/MeasurementTest.java
Patch:
@@ -57,7 +57,7 @@ public void testSuccess() throws Exception {
 		assertFalse(response.isError());
 		assertNull(response.getError());
 
-		assertEquals("http://api.netatmo.net/api/getmeasure?access_token="
+		assertEquals("https://api.netatmo.net/api/getmeasure?access_token="
 				+ encodeQuery(ACCESS_TOKEN)
 				+ "&scale=max&date_end=last&device_id=" + DEVICE_ID
 				+ "&module_id=" + MODULE_ID + "&type=Humidity,Temperature",

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBinding.java
Patch:
@@ -172,7 +172,6 @@ static class DeviceMeasureValueMap extends HashMap<String, Map<String,BigDecimal
     }
 
     private DeviceMeasureValueMap processMeasurements(OAuthCredentials oauthCredentials) {
-        //Map<String, Map<String, BigDecimal>> deviceMeasureValueMap = new HashMap<String, Map<String,BigDecimal>>();
     	DeviceMeasureValueMap deviceMeasureValueMap = new DeviceMeasureValueMap();
     	
         for (final MeasurementRequest request : createMeasurementRequests()) {

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/AbstractRequest.java
Patch:
@@ -25,6 +25,8 @@ public abstract class AbstractRequest extends AbstractMessage implements Request
 	protected static final String HTTP_GET = "GET";
 
 	protected static final String HTTP_POST = "POST";
+	
+	protected static final String API_BASE_URL = "https://api.netatmo.net/api/";
 
 	protected static final Properties HTTP_HEADERS;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/DeviceListRequest.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class DeviceListRequest extends AbstractRequest {
 
-	private static final String RESOURCE_URL = "http://api.netatmo.net/api/devicelist";
+	private static final String RESOURCE_URL = API_BASE_URL + "devicelist";
 
 	private final String accessToken;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/MeasurementRequest.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class MeasurementRequest extends AbstractRequest {
 
-	private static final String RESOURCE_URL = "http://api.netatmo.net/api/getmeasure";
+	private static final String RESOURCE_URL = API_BASE_URL + "getmeasure";
 
 	/**
 	 * @param deviceId

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmniLinkBinding.java
Patch:
@@ -399,6 +399,8 @@ public void notConnectedEvent(Exception e) {
 						
 						omni = c.reqSystemInformation().getModel() < 36;
 						
+						celius = c.reqSystemFormats().getTempFormat() > 1;
+						
 						/*
 						 * We need to explicitly tell the controller to send us
 						 * real time notifications

File: bundles/binding/org.openhab.binding.netatmo.test/src/test/java/org/openhab/binding/netatmo/internal/messages/DeviceListTest.java
Patch:
@@ -40,7 +40,7 @@ public void testSuccess() throws Exception {
 		final DeviceListResponse response = request.execute();
 
 		assertFalse(response.isError());
-		assertEquals("http://api.netatmo.net/api/devicelist?access_token="
+		assertEquals("https://api.netatmo.net/api/devicelist?access_token="
 				+ ACCESS_TOKEN, request.getQuery());
 		assertEquals("ok", response.getStatus());
 

File: bundles/binding/org.openhab.binding.netatmo.test/src/test/java/org/openhab/binding/netatmo/internal/messages/MeasurementTest.java
Patch:
@@ -57,7 +57,7 @@ public void testSuccess() throws Exception {
 		assertFalse(response.isError());
 		assertNull(response.getError());
 
-		assertEquals("http://api.netatmo.net/api/getmeasure?access_token="
+		assertEquals("https://api.netatmo.net/api/getmeasure?access_token="
 				+ encodeQuery(ACCESS_TOKEN)
 				+ "&scale=max&date_end=last&device_id=" + DEVICE_ID
 				+ "&module_id=" + MODULE_ID + "&type=Humidity,Temperature",

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBinding.java
Patch:
@@ -172,7 +172,6 @@ static class DeviceMeasureValueMap extends HashMap<String, Map<String,BigDecimal
     }
 
     private DeviceMeasureValueMap processMeasurements(OAuthCredentials oauthCredentials) {
-        //Map<String, Map<String, BigDecimal>> deviceMeasureValueMap = new HashMap<String, Map<String,BigDecimal>>();
     	DeviceMeasureValueMap deviceMeasureValueMap = new DeviceMeasureValueMap();
     	
         for (final MeasurementRequest request : createMeasurementRequests()) {

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/AbstractRequest.java
Patch:
@@ -25,6 +25,8 @@ public abstract class AbstractRequest extends AbstractMessage implements Request
 	protected static final String HTTP_GET = "GET";
 
 	protected static final String HTTP_POST = "POST";
+	
+	protected static final String API_BASE_URL = "https://api.netatmo.net/api/";
 
 	protected static final Properties HTTP_HEADERS;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/DeviceListRequest.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class DeviceListRequest extends AbstractRequest {
 
-	private static final String RESOURCE_URL = "http://api.netatmo.net/api/devicelist";
+	private static final String RESOURCE_URL = API_BASE_URL + "devicelist";
 
 	private final String accessToken;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/MeasurementRequest.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class MeasurementRequest extends AbstractRequest {
 
-	private static final String RESOURCE_URL = "http://api.netatmo.net/api/getmeasure";
+	private static final String RESOURCE_URL = API_BASE_URL + "getmeasure";
 
 	/**
 	 * @param deviceId

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmniLinkBinding.java
Patch:
@@ -399,6 +399,8 @@ public void notConnectedEvent(Exception e) {
 						
 						omni = c.reqSystemInformation().getModel() < 36;
 						
+						celius = c.reqSystemFormats().getTempFormat() > 1;
+						
 						/*
 						 * We need to explicitly tell the controller to send us
 						 * real time notifications

File: bundles/binding/org.openhab.binding.pilight/src/main/java/org/openhab/binding/pilight/internal/PilightBindingConfig.java
Patch:
@@ -31,7 +31,7 @@ public class PilightBindingConfig implements BindingConfig {
 		
 		private String property; 
 		
-		private Integer scale = 1; 
+		private int scale = 0; 
 		
 		public String getItemName() {
 			return itemName;
@@ -82,11 +82,11 @@ public void setProperty(String value) {
 			this.property = value;
 		}
 		
-		public Integer getScale() {
+		public int getScale() {
 			return scale;
 		}
 		
-		public void setScale(Integer scale) {
+		public void setScale(int scale) {
 			this.scale = scale;
 		}
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java
Patch:
@@ -96,7 +96,9 @@ protected String getName() {
 	@Override
 	protected void execute() {
 		// Call the network monitor
-		networkMonitor.execute();
+		if(networkMonitor != null) {
+			networkMonitor.execute();
+		}
 
 		// If we're not currently in a poll cycle, restart the polling table
 		if(pollingIterator == null) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/SerialMessage.java
Patch:
@@ -159,11 +159,11 @@ public SerialMessage(int nodeId, byte[] buffer) {
      * @return string the string representation
      */
     static public String bb2hex(byte[] bb) {
-		String result = "";
+		StringBuilder result = new StringBuilder();
 		for (int i=0; i<bb.length; i++) {
-			result = result + String.format("%02X ", bb[i]);
+			result.append(String.format("%02X ", bb[i]));
 		}
-		return result;
+		return result.toString();
 	}
 	
 	/**

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -389,6 +389,7 @@ public enum CommandClass {
 		SCHEDULE_ENTRY_LOCK(0x4E,"SCHEDULE_ENTRY_LOCK",null),
 		BASIC_WINDOW_COVERING(0x50,"BASIC_WINDOW_COVERING",null),
 		MTP_WINDOW_COVERING(0x51,"MTP_WINDOW_COVERING",null),
+		CRC_16_ENCAP(0x56,"CRC_16_ENCAP",ZWaveCRC16EncapsulationCommandClass.class),
 		ASSOCIATION_GROUP_INFO(0x59,"ASSOCIATION_GROUP_INFO",null),
 		DEVICE_RESET_LOCALLY(0x5a,"DEVICE_RESET_LOCALLY",null),
 		ZWAVE_PLUS_INFO(0x5e,"ZWAVE_PLUS_INFO",null),

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCRC16EncapsulationCommandClass.java
Patch:
@@ -91,7 +91,7 @@ private void handleCRC16EncapResponse(SerialMessage serialMessage, int offset) {
 		ByteBuffer byteBuffer = ByteBuffer.allocate(2);
 		byteBuffer.putShort(calculatedCrc);
 		if (!Arrays.equals(messageCrc, byteBuffer.array())) {
-			logger.error("NODE %d: CRC check failed message contains %s but should be %s",
+			logger.error("NODE {}: CRC check failed message contains {} but should be {}",
 					this.getNode().getNodeId(), SerialMessage.bb2hex(messageCrc), SerialMessage.bb2hex(byteBuffer.array()));
 			return;
 		}

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java
Patch:
@@ -61,7 +61,7 @@ public void chatCreated(Chat chat, boolean arg1) {
 
 	public void processMessage(Chat chat, Message msg) {
 		logger.debug("Received XMPP message: {} of type {}", msg.getBody(), msg.getType());
-		if (msg.getType() == Message.Type.error) {
+		if (msg.getType() == Message.Type.error || msg.getBody() == null) {
 			return;
 		}
 		String cmd = msg.getBody();

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java
Patch:
@@ -61,7 +61,7 @@ public void chatCreated(Chat chat, boolean arg1) {
 
 	public void processMessage(Chat chat, Message msg) {
 		logger.debug("Received XMPP message: {} of type {}", msg.getBody(), msg.getType());
-		if (msg.getType() == Message.Type.error) {
+		if (msg.getType() == Message.Type.error || msg.getBody() == null) {
 			return;
 		}
 		String cmd = msg.getBody();

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java
Patch:
@@ -61,7 +61,7 @@ public void chatCreated(Chat chat, boolean arg1) {
 
 	public void processMessage(Chat chat, Message msg) {
 		logger.debug("Received XMPP message: {} of type {}", msg.getBody(), msg.getType());
-		if (msg.getType() == Message.Type.error) {
+		if (msg.getType() == Message.Type.error || msg.getBody() == null) {
 			return;
 		}
 		String cmd = msg.getBody();

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/RemoteSwitchBConfiguration.java
Patch:
@@ -30,7 +30,7 @@
  * @model
  * @generated
  */
-public interface RemoteSwitchBConfiguration extends TFConfig
+public interface RemoteSwitchBConfiguration extends DimmableConfiguration
 {
 
   /**

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/RemoteSwitchBConfigurationImpl.java
Patch:
@@ -35,7 +35,7 @@
  *
  * @generated
  */
-public class RemoteSwitchBConfigurationImpl extends MinimalEObjectImpl.Container implements RemoteSwitchBConfiguration
+public class RemoteSwitchBConfigurationImpl extends DimmableConfigurationImpl implements RemoteSwitchBConfiguration
 {
   /**
    * The default value of the '{@link #getAddress() <em>Address</em>}' attribute.

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBinding.java
Patch:
@@ -172,7 +172,6 @@ static class DeviceMeasureValueMap extends HashMap<String, Map<String,BigDecimal
     }
 
     private DeviceMeasureValueMap processMeasurements(OAuthCredentials oauthCredentials) {
-        //Map<String, Map<String, BigDecimal>> deviceMeasureValueMap = new HashMap<String, Map<String,BigDecimal>>();
     	DeviceMeasureValueMap deviceMeasureValueMap = new DeviceMeasureValueMap();
     	
         for (final MeasurementRequest request : createMeasurementRequests()) {

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/AbstractRequest.java
Patch:
@@ -25,6 +25,8 @@ public abstract class AbstractRequest extends AbstractMessage implements Request
 	protected static final String HTTP_GET = "GET";
 
 	protected static final String HTTP_POST = "POST";
+	
+	protected static final String API_BASE_URL = "https://api.netatmo.net/api/";
 
 	protected static final Properties HTTP_HEADERS;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/DeviceListRequest.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class DeviceListRequest extends AbstractRequest {
 
-	private static final String RESOURCE_URL = "http://api.netatmo.net/api/devicelist";
+	private static final String RESOURCE_URL = API_BASE_URL + "devicelist";
 
 	private final String accessToken;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/MeasurementRequest.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class MeasurementRequest extends AbstractRequest {
 
-	private static final String RESOURCE_URL = "http://api.netatmo.net/api/getmeasure";
+	private static final String RESOURCE_URL = API_BASE_URL + "getmeasure";
 
 	/**
 	 * @param deviceId

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/net/SerialConnection.java
Patch:
@@ -102,7 +102,7 @@ public void open() throws Exception {
           CommPortIdentifier.getPortIdentifier(m_Parameters.getPortName());
     } catch (NoSuchPortException e) {
       if(Modbus.debug) System.out.println(e.getMessage());
-      throw new Exception(e.getMessage());
+      throw new Exception("Could not get port identifier, maybe insufficient permissions. " + e.getMessage());
     }
     //System.out.println("Got Port Identifier");
 

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusBinding.java
Patch:
@@ -319,6 +319,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 				}
 			}
 
+			logger.debug("config looked good, proceeding with slave-connections");
 			// connect instances to modbus slaves
 			for (ModbusSlave slave : modbusSlaves.values()) {
 				slave.connect();

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java
Patch:
@@ -61,7 +61,7 @@ public void chatCreated(Chat chat, boolean arg1) {
 
 	public void processMessage(Chat chat, Message msg) {
 		logger.debug("Received XMPP message: {} of type {}", msg.getBody(), msg.getType());
-		if (msg.getType() == Message.Type.error) {
+		if (msg.getType() == Message.Type.error || msg.getBody() == null) {
 			return;
 		}
 		String cmd = msg.getBody();

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/__binding-name__BindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jService.java
Patch:
@@ -165,7 +165,7 @@ public Iterable<HistoricItem> query(FilterCriteria filter) {
 		RrdDb db = getDB(itemName, consolidationFunction);
 		if(db!=null) {
 			long start = 0L;
-			long end = filter.getEndDate()==null ? System.currentTimeMillis()/1000 - 1 : filter.getEndDate().getTime()/1000;
+			long end = filter.getEndDate()==null ? System.currentTimeMillis()/1000 : filter.getEndDate().getTime()/1000;
 
 			try {
 				if(filter.getBeginDate()==null) {

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/__binding-name__BindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jService.java
Patch:
@@ -165,7 +165,7 @@ public Iterable<HistoricItem> query(FilterCriteria filter) {
 		RrdDb db = getDB(itemName, consolidationFunction);
 		if(db!=null) {
 			long start = 0L;
-			long end = filter.getEndDate()==null ? System.currentTimeMillis()/1000 - 1 : filter.getEndDate().getTime()/1000;
+			long end = filter.getEndDate()==null ? System.currentTimeMillis()/1000 : filter.getEndDate().getTime()/1000;
 
 			try {
 				if(filter.getBeginDate()==null) {

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/__binding-name__BindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jService.java
Patch:
@@ -165,7 +165,7 @@ public Iterable<HistoricItem> query(FilterCriteria filter) {
 		RrdDb db = getDB(itemName, consolidationFunction);
 		if(db!=null) {
 			long start = 0L;
-			long end = filter.getEndDate()==null ? System.currentTimeMillis()/1000 - 1 : filter.getEndDate().getTime()/1000;
+			long end = filter.getEndDate()==null ? System.currentTimeMillis()/1000 : filter.getEndDate().getTime()/1000;
 
 			try {
 				if(filter.getBeginDate()==null) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMultiLevelSensorConverter.java
Patch:
@@ -108,7 +108,7 @@ public void handleEvent(ZWaveCommandClassValueEvent event, Item item, Map<String
 			int intType = Integer.parseInt(sensorType);
 			SensorType senType = SensorType.getSensorType(intType);
 			if(senType == null) {
-				logger.error("Node {}: Error parsing sensor type {}", event.getNodeId(), sensorType);
+				logger.error("NODE {}: Error parsing sensor type {}", event.getNodeId(), sensorType);
 			}
 			else {
 				switch(senType) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMultiLevelSensorConverter.java
Patch:
@@ -108,7 +108,7 @@ public void handleEvent(ZWaveCommandClassValueEvent event, Item item, Map<String
 			int intType = Integer.parseInt(sensorType);
 			SensorType senType = SensorType.getSensorType(intType);
 			if(senType == null) {
-				logger.error("Node {}: Error parsing sensor type {}", event.getNodeId(), sensorType);
+				logger.error("NODE {}: Error parsing sensor type {}", event.getNodeId(), sensorType);
 			}
 			else {
 				switch(senType) {

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/__binding-name__BindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jService.java
Patch:
@@ -165,7 +165,7 @@ public Iterable<HistoricItem> query(FilterCriteria filter) {
 		RrdDb db = getDB(itemName, consolidationFunction);
 		if(db!=null) {
 			long start = 0L;
-			long end = filter.getEndDate()==null ? System.currentTimeMillis()/1000 - 1 : filter.getEndDate().getTime()/1000;
+			long end = filter.getEndDate()==null ? System.currentTimeMillis()/1000 : filter.getEndDate().getTime()/1000;
 
 			try {
 				if(filter.getBeginDate()==null) {

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java
Patch:
@@ -133,7 +133,7 @@ public void processMessage(Chat chat, Message message) {
 					is = url.openStream();
 					OutgoingFileTransfer.setResponseTimeout(10000);
 					transfer.sendStream(is, url.getFile(), is.available(), message);
-					logger.debug("Sent message '{}' with attachment '{}' to '{}'.", new String[] { message, attachmentUrl, to });
+					logger.debug("Sent message '{}' with attachment '{}' to '{}'.", (Object[]) new String[] { message, attachmentUrl, to });
 					success = true;
 				} catch (IOException e) {
 					logger.error("Could not open url '{}' for sending it via XMPP", attachmentUrl, e);

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelBinding.java
Patch:
@@ -75,7 +75,7 @@ static interface IInternalAnelBinding {
 	}
 
 	/** The refresh interval which is used to poll values from the Anel server. */
-	private long refreshInterval;
+	private long refreshInterval = AnelConfigReader.DEFAULT_REFRESH_INTERVAL;
 
 	/** Threads to communicate with Anel devices */
 	private final Map<String, AnelConnectorThread> connectorThreads = new HashMap<String, AnelConnectorThread>();
@@ -232,7 +232,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 
 		// clear map of previous threads because config changed
 		connectorThreads.clear();
-		refreshInterval = 0;
+		refreshInterval = AnelConfigReader.DEFAULT_REFRESH_INTERVAL;
 
 		// read new config
 		try {

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConfigReader.java
Patch:
@@ -29,7 +29,7 @@ public class AnelConfigReader {
 	/**
 	 * Refresh rate with which the state is regularly updated.
 	 */
-	private final static long DEFAULT_REFRESH_INTERVAL = 60000;
+	final static long DEFAULT_REFRESH_INTERVAL = 60000;
 
 	/**
 	 * If cache period is set to a positive integer, then this specifies the
@@ -68,7 +68,7 @@ private static class AnelConfig {
 	static long readConfig(Dictionary<String, ?> config, Map<String, AnelConnectorThread> threads,
 			IInternalAnelBinding bindingFacade) throws ConfigurationException {
 		if (config == null || config.isEmpty())
-			return 0;
+			return DEFAULT_REFRESH_INTERVAL;
 
 		long cachePeriod = DEFAULT_CACHE_PERIOD;
 		long refresh = DEFAULT_REFRESH_INTERVAL;

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java
Patch:
@@ -178,8 +178,7 @@ else if (deviceConfig.getCommandType().equals(BindingType.rgb)) {
 				logger.debug("milight: item is of type rgb");
 				if (command instanceof HSBType) {
 					sendColor(command, bridgeId, bulb);
-				}				
-				if (command instanceof PercentType) {
+				} else if (command instanceof PercentType) {
 					sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);
 				}
 	        }

File: bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java
Patch:
@@ -125,7 +125,7 @@ public VariableInformation(int factor, String variable,
 		put(43239, new VariableInformation(1,	"Total hot water operation time add",	NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43395, new VariableInformation(1,	"HPAC relays",							NibeDataType.U8,	Type.Sensor));   // Unit: none
 		put(43416, new VariableInformation(1,	"Compressor starts EB100-EP14",			NibeDataType.S32,	Type.Sensor));   // Unit: none
-		put(43420, new VariableInformation(10,	"Total operation time compressor",		NibeDataType.S32,	Type.Sensor));   // Unit: hours
+		put(43420, new VariableInformation(1,	"Total operation time compressor",		NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43424, new VariableInformation(1,	"Total hot water operation time compr",	NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43427, new VariableInformation(1,	"Compressor state EP14",				NibeDataType.U8,	Type.Sensor));   // Unit: none, // 20 = Stopped, 40 = Starting, 60 = Running, 100 = Stopping 
 		put(43514, new VariableInformation(1,	"PCA-Base relayes EP14",				NibeDataType.U8,	Type.Sensor));   // Unit: none 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveDeviceClass.java
Patch:
@@ -416,6 +416,8 @@ public enum Specific {
 		ROUTING_SENSOR_MULTILEVEL(1, Generic.MULTILEVEL_SENSOR, "Routing Multilevel Sensor"),
 
 		SIMPLE_METER(1, Generic.METER, "Simple Meter"),
+		
+		SIMPLE_GARAGE_DOOR(1, Generic.GARAGE_DOOR, "Simple Garage Door"),
 
 		DOOR_LOCK(1, Generic.ENTRY_CONTROL, "Door Lock"),
 		ADVANCED_DOOR_LOCK(2, Generic.ENTRY_CONTROL, "Advanced Door Lock"),

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveWakeUpCommandClass.java
Patch:
@@ -150,7 +150,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
                 	return;
                 }
 
-                targetNodeId = serialMessage.getMessagePayloadByte(offset +4);
+                targetNodeId = serialMessage.getMessagePayloadByte(offset + 4);
                 int receivedInterval = ((serialMessage.getMessagePayloadByte(offset + 1)) << 16) | ((serialMessage.getMessagePayloadByte(offset + 2)) << 8) | (serialMessage.getMessagePayloadByte(offset + 3));
 				logger.debug("NODE {}: Wake up interval report, value = {} seconds, targetNodeId = {}", this.getNode().getNodeId(), receivedInterval, targetNodeId);
 
@@ -176,7 +176,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 				break;
 			case WAKE_UP_NOTIFICATION:
 				logger.debug("NODE {}: Received WAKE_UP_NOTIFICATION", this.getNode().getNodeId());
-				serialMessage.setTransactionCanceled(true);
+				serialMessage.setTransactionCanceled();
 
 				// Set the awake flag. This will also empty the queue
 				this.setAwake(true);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ApplicationUpdateMessageClass.java
Patch:
@@ -115,7 +115,7 @@ public  boolean handleRequest(ZWaveController zController, SerialMessage lastSen
 			}
 
 			// Transaction is not successful
-			incomingMessage.setTransactionCanceled(true);
+			incomingMessage.setTransactionCanceled();
 			result = false;
 			break;
 		default:

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java
Patch:
@@ -48,7 +48,7 @@ public boolean handleResponse(ZWaveController zController, SerialMessage lastSen
 			logger.error("NODE {}: AssignReturnRoute command failed.", nodeId);
 			zController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,
 					ZWaveNetworkEvent.State.Failure));
-			incomingMessage.setTransactionCanceled(true);
+			incomingMessage.setTransactionCanceled();
 		}
 		
 		return true;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/IdentifyNodeMessageClass.java
Patch:
@@ -50,14 +50,14 @@ public boolean handleResponse(ZWaveController zController, SerialMessage lastSen
 
 		int nodeId = lastSentMessage.getMessagePayloadByte(0);
 		logger.debug("NODE {}: ProtocolInfo", nodeId);
-		
+
 		ZWaveNode node = zController.getNode(nodeId);
-		
+
 		boolean listening = (incomingMessage.getMessagePayloadByte(0) & 0x80)!=0 ? true : false;
 		boolean routing = (incomingMessage.getMessagePayloadByte(0) & 0x40)!=0 ? true : false;
 		int version = (incomingMessage.getMessagePayloadByte(0) & 0x07) + 1;
 		boolean frequentlyListening = (incomingMessage.getMessagePayloadByte(1) & 0x60)!= 0 ? true : false;
-		
+
 		logger.debug("NODE {}: Listening = {}", nodeId, listening);
 		logger.debug("NODE {}: Routing = {}", nodeId, routing);
 		logger.debug("NODE {}: Version = {}", nodeId, version);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RemoveFailedNodeMessageClass.java
Patch:
@@ -53,7 +53,7 @@ public boolean handleResponse(ZWaveController zController, SerialMessage lastSen
 		logger.debug("Got RemoveFailedNode response.");
 		int nodeId = lastSentMessage.getMessagePayloadByte(0);
 
-		switch(incomingMessage.getMessagePayloadByte(1)) {
+		switch(incomingMessage.getMessagePayloadByte(0)) {
 			case FAILED_NODE_REMOVE_STARTED:
 				logger.debug("NODE {}: Remove failed node successfully placed on stack.", nodeId);
 				break;

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java
Patch:
@@ -178,8 +178,7 @@ else if (deviceConfig.getCommandType().equals(BindingType.rgb)) {
 				logger.debug("milight: item is of type rgb");
 				if (command instanceof HSBType) {
 					sendColor(command, bridgeId, bulb);
-				}				
-				if (command instanceof PercentType) {
+				} else if (command instanceof PercentType) {
 					sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);
 				}
 	        }

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java
Patch:
@@ -606,7 +606,7 @@ private void postUpdate(String uid, String subId, TinkerforgeValue sensorValue)
         } else if (itemType.isAssignableFrom(SwitchItem.class)) {
           value = sensorValue == HighLowValue.HIGH ? OnOffType.ON : OnOffType.OFF;
         } else {
-          logger.error("{} unsupported item type {} for item {}", LoggerConstants.TFMODELUPDATE,
+          logger.trace("{} unsupported item type {} for item {}", LoggerConstants.TFMODELUPDATE,
               provider.getItem(itemName), itemName);
         }
       } else if (sensorValue instanceof OnOffValue) {
@@ -619,7 +619,7 @@ private void postUpdate(String uid, String subId, TinkerforgeValue sensorValue)
         } else if (itemType.isAssignableFrom(SwitchItem.class)) {
           value = sensorValue == OnOffValue.ON ? OnOffType.ON : OnOffType.OFF;
         } else {
-          logger.error("{} unsupported item type {} for item {}", LoggerConstants.TFMODELUPDATE,
+          logger.trace("{} unsupported item type {} for item {}", LoggerConstants.TFMODELUPDATE,
               provider.getItem(itemName), itemName);
         }
       } else if (sensorValue == UnDefValue.UNDEF || sensorValue == null) {

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jService.java
Patch:
@@ -165,7 +165,7 @@ public Iterable<HistoricItem> query(FilterCriteria filter) {
 		RrdDb db = getDB(itemName, consolidationFunction);
 		if(db!=null) {
 			long start = 0L;
-			long end = filter.getEndDate()==null ? System.currentTimeMillis()/1000 - 1 : filter.getEndDate().getTime()/1000;
+			long end = filter.getEndDate()==null ? System.currentTimeMillis()/1000 : filter.getEndDate().getTime()/1000;
 
 			try {
 				if(filter.getBeginDate()==null) {

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/__binding-name__BindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java
Patch:
@@ -178,8 +178,7 @@ else if (deviceConfig.getCommandType().equals(BindingType.rgb)) {
 				logger.debug("milight: item is of type rgb");
 				if (command instanceof HSBType) {
 					sendColor(command, bridgeId, bulb);
-				}				
-				if (command instanceof PercentType) {
+				} else if (command instanceof PercentType) {
 					sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);
 				}
 	        }

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBinding.java
Patch:
@@ -178,8 +178,7 @@ else if (deviceConfig.getCommandType().equals(BindingType.rgb)) {
 				logger.debug("milight: item is of type rgb");
 				if (command instanceof HSBType) {
 					sendColor(command, bridgeId, bulb);
-				}				
-				if (command instanceof PercentType) {
+				} else if (command instanceof PercentType) {
 					sendPercent(bulb, rgbwSteps, bridgeId, (PercentType) command, BindingType.brightness);
 				}
 	        }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RemoveFailedNodeMessageClass.java
Patch:
@@ -53,7 +53,7 @@ public boolean handleResponse(ZWaveController zController, SerialMessage lastSen
 		logger.debug("Got RemoveFailedNode response.");
 		int nodeId = lastSentMessage.getMessagePayloadByte(0);
 
-		switch(incomingMessage.getMessagePayloadByte(1)) {
+		switch(incomingMessage.getMessagePayloadByte(0)) {
 			case FAILED_NODE_REMOVE_STARTED:
 				logger.debug("NODE {}: Remove failed node successfully placed on stack.", nodeId);
 				break;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAlarmCommandClass.java
Patch:
@@ -167,7 +167,8 @@ public SerialMessage getMessage(AlarmType alarmType) {
 	 */
 	@XStreamAlias("alarmType")
 	public enum AlarmType {
-		GENERAL(0, "General");
+		GENERAL(0, "General"),
+		MOTION(7, "Motion");
 
 		/**
 		 * A mapping between the integer code and its corresponding Alarm type

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java
Patch:
@@ -133,7 +133,7 @@ public void processMessage(Chat chat, Message message) {
 					is = url.openStream();
 					OutgoingFileTransfer.setResponseTimeout(10000);
 					transfer.sendStream(is, url.getFile(), is.available(), message);
-					logger.debug("Sent message '{}' with attachment '{}' to '{}'.", new String[] { message, attachmentUrl, to });
+					logger.debug("Sent message '{}' with attachment '{}' to '{}'.", (Object[]) new String[] { message, attachmentUrl, to });
 					success = true;
 				} catch (IOException e) {
 					logger.error("Could not open url '{}' for sending it via XMPP", attachmentUrl, e);

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelBinding.java
Patch:
@@ -75,7 +75,7 @@ static interface IInternalAnelBinding {
 	}
 
 	/** The refresh interval which is used to poll values from the Anel server. */
-	private long refreshInterval;
+	private long refreshInterval = AnelConfigReader.DEFAULT_REFRESH_INTERVAL;
 
 	/** Threads to communicate with Anel devices */
 	private final Map<String, AnelConnectorThread> connectorThreads = new HashMap<String, AnelConnectorThread>();
@@ -232,7 +232,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 
 		// clear map of previous threads because config changed
 		connectorThreads.clear();
-		refreshInterval = 0;
+		refreshInterval = AnelConfigReader.DEFAULT_REFRESH_INTERVAL;
 
 		// read new config
 		try {

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConfigReader.java
Patch:
@@ -29,7 +29,7 @@ public class AnelConfigReader {
 	/**
 	 * Refresh rate with which the state is regularly updated.
 	 */
-	private final static long DEFAULT_REFRESH_INTERVAL = 60000;
+	final static long DEFAULT_REFRESH_INTERVAL = 60000;
 
 	/**
 	 * If cache period is set to a positive integer, then this specifies the
@@ -68,7 +68,7 @@ private static class AnelConfig {
 	static long readConfig(Dictionary<String, ?> config, Map<String, AnelConnectorThread> threads,
 			IInternalAnelBinding bindingFacade) throws ConfigurationException {
 		if (config == null || config.isEmpty())
-			return 0;
+			return DEFAULT_REFRESH_INTERVAL;
 
 		long cachePeriod = DEFAULT_CACHE_PERIOD;
 		long refresh = DEFAULT_REFRESH_INTERVAL;

File: bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java
Patch:
@@ -125,7 +125,7 @@ public VariableInformation(int factor, String variable,
 		put(43239, new VariableInformation(1,	"Total hot water operation time add",	NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43395, new VariableInformation(1,	"HPAC relays",							NibeDataType.U8,	Type.Sensor));   // Unit: none
 		put(43416, new VariableInformation(1,	"Compressor starts EB100-EP14",			NibeDataType.S32,	Type.Sensor));   // Unit: none
-		put(43420, new VariableInformation(10,	"Total operation time compressor",		NibeDataType.S32,	Type.Sensor));   // Unit: hours
+		put(43420, new VariableInformation(1,	"Total operation time compressor",		NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43424, new VariableInformation(1,	"Total hot water operation time compr",	NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43427, new VariableInformation(1,	"Compressor state EP14",				NibeDataType.U8,	Type.Sensor));   // Unit: none, // 20 = Stopped, 40 = Starting, 60 = Running, 100 = Stopping 
 		put(43514, new VariableInformation(1,	"PCA-Base relayes EP14",				NibeDataType.U8,	Type.Sensor));   // Unit: none 

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java
Patch:
@@ -133,7 +133,7 @@ public void processMessage(Chat chat, Message message) {
 					is = url.openStream();
 					OutgoingFileTransfer.setResponseTimeout(10000);
 					transfer.sendStream(is, url.getFile(), is.available(), message);
-					logger.debug("Sent message '{}' with attachment '{}' to '{}'.", new String[] { message, attachmentUrl, to });
+					logger.debug("Sent message '{}' with attachment '{}' to '{}'.", (Object[]) new String[] { message, attachmentUrl, to });
 					success = true;
 				} catch (IOException e) {
 					logger.error("Could not open url '{}' for sending it via XMPP", attachmentUrl, e);

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelBinding.java
Patch:
@@ -75,7 +75,7 @@ static interface IInternalAnelBinding {
 	}
 
 	/** The refresh interval which is used to poll values from the Anel server. */
-	private long refreshInterval;
+	private long refreshInterval = AnelConfigReader.DEFAULT_REFRESH_INTERVAL;
 
 	/** Threads to communicate with Anel devices */
 	private final Map<String, AnelConnectorThread> connectorThreads = new HashMap<String, AnelConnectorThread>();
@@ -232,7 +232,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 
 		// clear map of previous threads because config changed
 		connectorThreads.clear();
-		refreshInterval = 0;
+		refreshInterval = AnelConfigReader.DEFAULT_REFRESH_INTERVAL;
 
 		// read new config
 		try {

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConfigReader.java
Patch:
@@ -29,7 +29,7 @@ public class AnelConfigReader {
 	/**
 	 * Refresh rate with which the state is regularly updated.
 	 */
-	private final static long DEFAULT_REFRESH_INTERVAL = 60000;
+	final static long DEFAULT_REFRESH_INTERVAL = 60000;
 
 	/**
 	 * If cache period is set to a positive integer, then this specifies the
@@ -68,7 +68,7 @@ private static class AnelConfig {
 	static long readConfig(Dictionary<String, ?> config, Map<String, AnelConnectorThread> threads,
 			IInternalAnelBinding bindingFacade) throws ConfigurationException {
 		if (config == null || config.isEmpty())
-			return 0;
+			return DEFAULT_REFRESH_INTERVAL;
 
 		long cachePeriod = DEFAULT_CACHE_PERIOD;
 		long refresh = DEFAULT_REFRESH_INTERVAL;

File: bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java
Patch:
@@ -125,7 +125,7 @@ public VariableInformation(int factor, String variable,
 		put(43239, new VariableInformation(1,	"Total hot water operation time add",	NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43395, new VariableInformation(1,	"HPAC relays",							NibeDataType.U8,	Type.Sensor));   // Unit: none
 		put(43416, new VariableInformation(1,	"Compressor starts EB100-EP14",			NibeDataType.S32,	Type.Sensor));   // Unit: none
-		put(43420, new VariableInformation(10,	"Total operation time compressor",		NibeDataType.S32,	Type.Sensor));   // Unit: hours
+		put(43420, new VariableInformation(1,	"Total operation time compressor",		NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43424, new VariableInformation(1,	"Total hot water operation time compr",	NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43427, new VariableInformation(1,	"Compressor state EP14",				NibeDataType.U8,	Type.Sensor));   // Unit: none, // 20 = Stopped, 40 = Starting, 60 = Running, 100 = Stopping 
 		put(43514, new VariableInformation(1,	"PCA-Base relayes EP14",				NibeDataType.U8,	Type.Sensor));   // Unit: none 

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java
Patch:
@@ -133,7 +133,7 @@ public void processMessage(Chat chat, Message message) {
 					is = url.openStream();
 					OutgoingFileTransfer.setResponseTimeout(10000);
 					transfer.sendStream(is, url.getFile(), is.available(), message);
-					logger.debug("Sent message '{}' with attachment '{}' to '{}'.", new String[] { message, attachmentUrl, to });
+					logger.debug("Sent message '{}' with attachment '{}' to '{}'.", (Object[]) new String[] { message, attachmentUrl, to });
 					success = true;
 				} catch (IOException e) {
 					logger.error("Could not open url '{}' for sending it via XMPP", attachmentUrl, e);

File: bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java
Patch:
@@ -351,7 +351,7 @@ public Iterable<HistoricItem> query(FilterCriteria filter) {
     logger.trace("appending limit {}", limit);
 
     int totalEntriesAffected = ((filter.getPageNumber() + 1) * filter.getPageSize());
-    int startEntryNum = totalEntriesAffected - (totalEntriesAffected - filter.getPageSize());
+    int startEntryNum = totalEntriesAffected - (totalEntriesAffected - (filter.getPageSize() * filter.getPageNumber()));
     logger.trace("startEntryNum {}", startEntryNum);
     
     logger.debug("query string: {}", query.toString());

File: bundles/action/org.openhab.action.homematic/src/main/java/org/openhab/action/homematic/internal/Homematic.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.homematic/src/main/java/org/openhab/action/homematic/internal/HomematicActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.homematic/src/main/java/org/openhab/action/homematic/internal/HomematicActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.mail/src/main/java/org/openhab/action/mail/internal/Mail.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.mail/src/main/java/org/openhab/action/mail/internal/MailActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.mail/src/main/java/org/openhab/action/mail/internal/MailActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.nma/src/main/java/org/openhab/action/nma/internal/NotifyMyAndroid.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.nma/src/main/java/org/openhab/action/nma/internal/NotifyMyAndroidActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.nma/src/main/java/org/openhab/action/nma/internal/NotifyMyAndroidActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/OpenWebIf.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/OpenWebIfActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/OpenWebIfActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/OpenWebIfCommunicator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/UrlBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/config/OpenWebIfConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/model/MessageType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/model/PowerState.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/model/SimpleResult.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/model/adapter/BooleanTypeAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/model/adapter/TrimToNullStringAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/ssl/AllowAllHostnameVerifier.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/ssl/SimpleTrustManager.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.prowl/src/main/java/org/openhab/action/prowl/internal/Prowl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.prowl/src/main/java/org/openhab/action/prowl/internal/ProwlActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.prowl/src/main/java/org/openhab/action/prowl/internal/ProwlActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.pushover/src/main/java/org/openhab/action/pushover/internal/Pushover.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.pushover/src/main/java/org/openhab/action/pushover/internal/PushoverActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.pushover/src/main/java/org/openhab/action/pushover/internal/PushoverActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/SqueezeboxActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/SqueezeboxActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/SqueezeboxSentenceListener.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/Twitter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/TwitterActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/TwitterActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xbmc/src/main/java/org/openhab/action/xbmc/internal/XBMC.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xbmc/src/main/java/org/openhab/action/xbmc/internal/XBMCActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xbmc/src/main/java/org/openhab/action/xbmc/internal/XBMCActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/NotInitializedException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xpl/src/main/java/org/openhab/action/xpl/internal/Xpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xpl/src/main/java/org/openhab/action/xpl/internal/XplActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xpl/src/main/java/org/openhab/action/xpl/internal/XplActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/internal/__binding-name__Binding.java
Patch:
@@ -102,7 +102,7 @@ protected void internalReceiveUpdate(String itemName, State newState) {
 		// the code being executed when a state was sent on the openHAB
 		// event bus goes here. This method is only called if one of the 
 		// BindingProviders provide a binding for the given 'itemName'.
-		logger.debug("internalReceiveCommand() is called!");
+		logger.debug("internalReceiveUpdate() is called!");
 	}
 		
 	/**

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/AlarmDecoderBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/ADMsgType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBindingConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/AnelBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -75,7 +75,7 @@ static interface IInternalAnelBinding {
 	}
 
 	/** The refresh interval which is used to poll values from the Anel server. */
-	private long refreshInterval;
+	private long refreshInterval = AnelConfigReader.DEFAULT_REFRESH_INTERVAL;
 
 	/** Threads to communicate with Anel devices */
 	private final Map<String, AnelConnectorThread> connectorThreads = new HashMap<String, AnelConnectorThread>();
@@ -232,7 +232,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 
 		// clear map of previous threads because config changed
 		connectorThreads.clear();
-		refreshInterval = 0;
+		refreshInterval = AnelConfigReader.DEFAULT_REFRESH_INTERVAL;
 
 		// read new config
 		try {

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelCommandType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConfigReader.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -29,7 +29,7 @@ public class AnelConfigReader {
 	/**
 	 * Refresh rate with which the state is regularly updated.
 	 */
-	private final static long DEFAULT_REFRESH_INTERVAL = 60000;
+	final static long DEFAULT_REFRESH_INTERVAL = 60000;
 
 	/**
 	 * If cache period is set to a positive integer, then this specifies the
@@ -68,7 +68,7 @@ private static class AnelConfig {
 	static long readConfig(Dictionary<String, ?> config, Map<String, AnelConnectorThread> threads,
 			IInternalAnelBinding bindingFacade) throws ConfigurationException {
 		if (config == null || config.isEmpty())
-			return 0;
+			return DEFAULT_REFRESH_INTERVAL;
 
 		long cachePeriod = DEFAULT_CACHE_PERIOD;
 		long refresh = DEFAULT_REFRESH_INTERVAL;

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConnectorThread.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelDataParser.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelState.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelUDPConnector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/AsteriskBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskBindingTypes.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/AstroBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/bus/AstroActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/bus/AstroBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/bus/AstroGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/bus/BindingConfigParser.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/bus/PlanetPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/MoonCalc.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SeasonCalc.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -82,7 +82,7 @@ private boolean isSunUpAllDay(Calendar calendar, double latitude, double longitu
 		Calendar cal = DateTimeUtils.truncateToMidnight(calendar);
 		Sun sun = new Sun();
 		for (int minutes = 0; minutes <= MINUTES_PER_DAY; minutes += CURVE_TIME_INTERVAL) {
-			setSunPosition(calendar, latitude, longitude, sun);
+			setSunPosition(cal, latitude, longitude, sun);
 			if (sun.getPosition().getElevation() < SUN_ANGLE) {
 				return false;
 			}

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/common/AstroConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/common/AstroContext.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/config/AstroBindingConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/job/AbstractBaseJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/job/DailyJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/job/IntervalJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/job/ItemJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/job/SeasonJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Eclipse.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Moon.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/MoonDistance.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/MoonPhase.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/MoonPhaseName.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Planet.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/PlanetName.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Position.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Range.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/RiseSet.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Season.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/SeasonName.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Sun.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/SunEclipse.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/SunZodiac.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Zodiac.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/ZodiacSign.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DelayedExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/ItemIterator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/PropertyUtils.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/BenqProjectorBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorBindingConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorItemMode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorSourceMapping.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/transport/BenqProjectorNetworkTransport.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/transport/BenqProjectorTransport.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/BluetoothEventHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BTDeviceDiscoveryService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BluetoothActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BluetoothBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BluetoothDevice.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/ComfoAirBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/ComfoAirDataType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/DataTypeBoolean.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/DataTypeMessage.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/DataTypeNumber.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/DataTypeTemperature.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/handling/ComfoAirCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/handling/ComfoAirCommandType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/handling/ComfoAirConnector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/InitializationException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.configadmin/src/main/java/org/openhab/binding/configadmin/ConfigAdminBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.configadmin/src/main/java/org/openhab/binding/configadmin/internal/ConfigAdminActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.configadmin/src/main/java/org/openhab/binding/configadmin/internal/ConfigAdminBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.configadmin/src/main/java/org/openhab/binding/configadmin/internal/ConfigAdminGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/CupsBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/internal/CupsActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/internal/CupsBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/internal/CupsGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/DaikinBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinBindingConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinCommandType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinFan.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHost.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinMode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinSwing.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/DavisBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeBarometer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeBarometricTrend.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeNumber.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeRain.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeSplitString.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeStationType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeString.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeTemperature.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeTemperatureExtra.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeTemperatureF.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeTime.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeVoltage.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeWind.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeWindHiRes.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DavisCommandType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DavisDataType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DavisValueType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -450,7 +450,7 @@ public enum DavisValueType {
 	UV {
 		{
 			key = "uv";
-			data_type = DataTypeUV.class;
+			data_type = DataTypeNumber.class;
 			command = DavisCommandType.LOOP;
 			data_offset = 43;
 			data_size = 1;	

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/internal/Constants.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/internal/DavisActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/internal/DavisCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/internal/DavisGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/internal/InitializationException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/DigitalSTROMBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/DigitalSTROMActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/DigitalSTROMBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/DigitalSTROMGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/DigitalSTROMAPI.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/connection/JSONResponseHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/connection/transport/HttpTransport.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/ApartmentSceneEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/DeviceConstants.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/DeviceParameterClassEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/JSONApiResponseKeysEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/JSONRequestConstants.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/JobPriority.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/MeteringTypeEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/MeteringUnitsEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/OutputModeEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/SceneEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/SceneToStateMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/SensorEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/SensorIndexEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/ZoneSceneEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/Apartment.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/CachedMeteringValue.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConnect.java
Patch:
@@ -229,7 +229,9 @@ public void connectionClosed() {
 		}
 
 		public void connectionClosedOnError(Exception e) {
-			logger.info("XMPP connection has been closed on error: {}", e.getMessage());
+			// Log a warning and the *full* exception as the stacktrace could be useful to diagnose
+			// the issue for uncommon exceptions besides e.g. a broken pipe
+			logger.warn("XMPP connection has been closed on error: {}", e);
 			try {
 				if (!connection.isConnected()) {
 					initialized = false;

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConnect.java
Patch:
@@ -141,7 +141,7 @@ private static void establishConnection() {
 
 		try {
 			connection.connect();
-			connection.login(username, password);
+			connection.login(username, password, null);
 			if (consoleUsers.length > 0) {
 				ChatManager.getInstanceFor(connection).addChatListener(
 						new XMPPConsole(consoleUsers));

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelBinding.java
Patch:
@@ -75,7 +75,7 @@ static interface IInternalAnelBinding {
 	}
 
 	/** The refresh interval which is used to poll values from the Anel server. */
-	private long refreshInterval;
+	private long refreshInterval = AnelConfigReader.DEFAULT_REFRESH_INTERVAL;
 
 	/** Threads to communicate with Anel devices */
 	private final Map<String, AnelConnectorThread> connectorThreads = new HashMap<String, AnelConnectorThread>();
@@ -232,7 +232,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 
 		// clear map of previous threads because config changed
 		connectorThreads.clear();
-		refreshInterval = 0;
+		refreshInterval = AnelConfigReader.DEFAULT_REFRESH_INTERVAL;
 
 		// read new config
 		try {

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConfigReader.java
Patch:
@@ -29,7 +29,7 @@ public class AnelConfigReader {
 	/**
 	 * Refresh rate with which the state is regularly updated.
 	 */
-	private final static long DEFAULT_REFRESH_INTERVAL = 60000;
+	final static long DEFAULT_REFRESH_INTERVAL = 60000;
 
 	/**
 	 * If cache period is set to a positive integer, then this specifies the
@@ -68,7 +68,7 @@ private static class AnelConfig {
 	static long readConfig(Dictionary<String, ?> config, Map<String, AnelConnectorThread> threads,
 			IInternalAnelBinding bindingFacade) throws ConfigurationException {
 		if (config == null || config.isEmpty())
-			return 0;
+			return DEFAULT_REFRESH_INTERVAL;
 
 		long cachePeriod = DEFAULT_CACHE_PERIOD;
 		long refresh = DEFAULT_REFRESH_INTERVAL;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -292,8 +292,8 @@ public void advanceNodeStage(SerialMessageClass eventClass) {
 					retryCount = 0;
 					logger.error("NODE {}: Node advancer: Retries exceeded at {}", 
 							node.getNodeId(), currentStage.toString());
-					if(currentStage != NodeStage.DYNAMIC_VALUES) {
-						currentStage = NodeStage.DEAD;
+					if(currentStage != ZWaveNodeInitStage.DYNAMIC_VALUES) {
+//						currentStage = ZWaveNodeInitStage.DEAD;
 						break;
 					}
 				}
@@ -836,7 +836,7 @@ public void ZWaveIncomingEvent(ZWaveEvent event) {
 				// We use this as a trigger to kick things off again if they've stalled
 				// by checking to see if the transmit queue is now empty.
 				// This will allow battery devices stuck in WAIT state to get moving.
-				if(controller.getTxQueueLength() < 2 && currentStage == ZWaveNodeInitStage.WAIT) {
+				if(controller.getSendQueueLength() < 2 && currentStage == ZWaveNodeInitStage.WAIT) {
 					logger.debug("NODE {}: Node advancer - WAIT: The WAIT is over!", node.getNodeId());
 
 					currentStage = currentStage.getNextStage();

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/internal/__binding-name__Binding.java
Patch:
@@ -102,7 +102,7 @@ protected void internalReceiveUpdate(String itemName, State newState) {
 		// the code being executed when a state was sent on the openHAB
 		// event bus goes here. This method is only called if one of the 
 		// BindingProviders provide a binding for the given 'itemName'.
-		logger.debug("internalReceiveCommand() is called!");
+		logger.debug("internalReceiveUpdate() is called!");
 	}
 		
 	/**

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java
Patch:
@@ -82,7 +82,7 @@ private boolean isSunUpAllDay(Calendar calendar, double latitude, double longitu
 		Calendar cal = DateTimeUtils.truncateToMidnight(calendar);
 		Sun sun = new Sun();
 		for (int minutes = 0; minutes <= MINUTES_PER_DAY; minutes += CURVE_TIME_INTERVAL) {
-			setSunPosition(calendar, latitude, longitude, sun);
+			setSunPosition(cal, latitude, longitude, sun);
 			if (sun.getPosition().getElevation() < SUN_ANGLE) {
 				return false;
 			}

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java
Patch:
@@ -35,13 +35,15 @@ public static Calendar truncateToMidnight(Calendar calendar) {
 	 * Creates a Range object within the specified months and days. The start
 	 * time is midnight, the end time is end of the day.
 	 */
-	public static Range getRange(int startMonth, int startDay, int endMonth, int endDay) {
+	public static Range getRange(int startYear, int startMonth, int startDay, int endYear,int endMonth, int endDay) {
 		Calendar start = Calendar.getInstance();
+		start.set(Calendar.YEAR, startYear);
 		start.set(Calendar.MONTH, startMonth);
 		start.set(Calendar.DAY_OF_MONTH, startDay);
 		start = truncateToMidnight(start);
 
 		Calendar end = Calendar.getInstance();
+		end.set(Calendar.YEAR, endYear);
 		end.set(Calendar.MONTH, endMonth);
 		end.set(Calendar.DAY_OF_MONTH, endDay);
 		end.set(Calendar.HOUR_OF_DAY, 23);

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxTokenizer.java
Patch:
@@ -60,4 +60,4 @@ public byte[] nextElement() {
 		
 		return token;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/Utils.java
Patch:
@@ -191,4 +191,4 @@ public static String getStackTrace(Exception e) {
 		e.printStackTrace(printWriter);
 		return stringWriter.toString();
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Configuration.java
Patch:
@@ -80,4 +80,4 @@ public int getRoomId() {
 	public void setRoomId(int roomId) {
 		this.roomId = roomId;
 	}	
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -248,4 +248,4 @@ private void setInitialized(boolean initialized) {
 	private void setAnswer(boolean answer) {
 		this.answer = answer;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/DeviceInformation.java
Patch:
@@ -49,4 +49,4 @@ public int getRoomId() {
 	public String getName() {
 		return name;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/DeviceType.java
Patch:
@@ -65,4 +65,4 @@ public String toString() {
 	      return "Invalid";
 	    }
 	  }
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/L_Message.java
Patch:
@@ -92,4 +92,4 @@ public void debug(Logger logger) {
 	public MessageType getType() {
 		return MessageType.L;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Message.java
Patch:
@@ -34,4 +34,4 @@ public Message(String raw) {
 	protected final String getPayload() {
 		return raw.substring(2, raw.length());
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/MessageType.java
Patch:
@@ -16,4 +16,4 @@
 */
 public enum MessageType {
 	H, M, C, L, S
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/RoomInformation.java
Patch:
@@ -48,4 +48,4 @@ public String getRFAddress() {
 	public void setRFAddress(String rfAddress) {
 		this.rfAddress = rfAddress;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/S_Command.java
Patch:
@@ -117,4 +117,4 @@ public String getCommandString() {
 
 		return "s:" + encodedString;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoMeasureType.java
Patch:
@@ -29,7 +29,8 @@ public enum NetatmoMeasureType {
 	LATITUDE("Latitude"),
 	LONGITUDE("Longitude"),
 	RFSTATUS("RfStatus"),
-	BATTERYVP("BatteryVp");
+	BATTERYVP("BatteryVp"),
+	TIMESTAMP("TimeStamp");
 	
 	String measure;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/MeasurementRequest.java
Patch:
@@ -24,6 +24,7 @@
  * Queries the Netatmo API for the measures of a single device or module.
  * 
  * @author Andreas Brenk
+ * @author Gaël L'hopital
  * @since 1.4.0
  * @see <a href="http://dev.netatmo.com/doc/restapi/getmeasure">getmeasure</a>
  */
@@ -92,8 +93,9 @@ public MeasurementResponse execute() {
 		String json = null;
 
 		try {
+			
 			json = executeQuery(url);
-
+			
 			final MeasurementResponse response = JSON.readValue(json,
 					MeasurementResponse.class);
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/RefreshTokenRequest.java
Patch:
@@ -14,7 +14,6 @@
 import java.io.InputStream;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
-import org.openhab.binding.netatmo.internal.NetatmoException;
 
 /**
  * Gets a renewed refresh token from the Netatmo API to use in future

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/provider/AbstractWeatherProvider.java
Patch:
@@ -15,6 +15,7 @@
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpStatus;
 import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
+import org.apache.commons.httpclient.cookie.CookiePolicy;
 import org.apache.commons.httpclient.methods.GetMethod;
 import org.apache.commons.httpclient.params.HttpClientParams;
 import org.apache.commons.lang.StringUtils;
@@ -49,6 +50,7 @@ public abstract class AbstractWeatherProvider implements WeatherProvider {
 		params.setConnectionManagerTimeout(5000);
 		params.setSoTimeout(30000);
 		params.setContentCharset("UTF-8");
+		params.setCookiePolicy(CookiePolicy.IGNORE_COOKIES);
 	}
 
 	public AbstractWeatherProvider(WeatherParser parser) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveInfoConverter.java
Patch:
@@ -153,7 +153,7 @@ private Object getInformationItemValue(ZWaveNode node, ZWaveInformationItem info
 			case REPORT_TIME_OUT:
 				return this.getController().getTimeOutCount();
 			case REPORT_TX_QUEUE:
-				return this.getController().getTxQueueLength();
+				return this.getController().getSendQueueLength();
 		}
         
         return null;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/SerialMessage.java
Patch:
@@ -136,16 +136,16 @@ public SerialMessage(int nodeId, byte[] buffer) {
 		messageLength = buffer.length - 2; // buffer[1];
 		byte messageCheckSumm = calculateChecksum(buffer);
 		byte messageCheckSummReceived = buffer[messageLength+1];
-		logger.trace(String.format("NODE %d: Message checksum calculated = 0x%02X, received = 0x%02X", nodeId, messageCheckSumm, messageCheckSummReceived));
 		if (messageCheckSumm == messageCheckSummReceived) {
 			logger.trace("NODE {}: Checksum matched", nodeId);
 			isValid = true;
 		} else {
-			logger.trace("NODE {}: Checksum error", nodeId);
+			logger.trace("NODE {}: Checksum error. Calculated = 0x%02X, Received = 0x%02X", nodeId, messageCheckSumm, messageCheckSummReceived);
 			isValid = false;
 			return;
 		}
-		this.messageType = buffer[2] == 0x00 ? SerialMessageType.Request : SerialMessageType.Response;;
+		this.priority = SerialMessagePriority.High;
+		this.messageType = buffer[2] == 0x00 ? SerialMessageType.Request : SerialMessageType.Response;
 		this.messageClass = SerialMessageClass.getMessageClass(buffer[3] & 0xFF);
 		this.messagePayload = ArrayUtils.subarray(buffer, 4, messageLength + 1);
 		this.messageNode = nodeId;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanModeCommandClass.java
Patch:
@@ -249,6 +249,7 @@ public SerialMessage getSupportedMessage() {
 	public SerialMessage setValueMessage(int value) {
 
 		if(fanModeTypes.isEmpty()) {
+			logger.warn("NODE {}: requesting fan mode types, set request ignored (try again later)", this.getNode().getNodeId());
 			return this.getSupportedMessage();
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatModeCommandClass.java
Patch:
@@ -252,10 +252,11 @@ public SerialMessage setValueMessage(int value) {
 
 		//if we do not have any mode types yet, get them
 		if(modeTypes.isEmpty()) {
+			logger.warn("NODE {}: requesting mode types, set request ignored (try again later)", this.getNode().getNodeId());
 			return this.getSupportedMessage();
 		}
 
-		if(modeTypes.contains(ModeType.getModeType(value))){
+		if(!modeTypes.contains(ModeType.getModeType(value))){
 			logger.error("NODE {}: Unsupported mode type {}", this.getNode().getNodeId(), value);
 			return null;
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeSerializer.java
Patch:
@@ -120,15 +120,15 @@ public ZWaveNode DeserializeNode(int nodeId) {
 			logger.debug("NODE {}: Deserializing from file {}", nodeId, file.getPath());
 
 			if (!file.exists()) {
-				logger.debug("NODE {}: Deserializing from file {} failed, file does not exist.", nodeId, file.getPath());
+				logger.debug("NODE {}: Error deserializing from file, file does not exist.", nodeId);
 				return null;
 			}
 
 			try {
 				reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
 				return (ZWaveNode)stream.fromXML(reader);
 			} catch (IOException e) {
-				logger.error("NODE {}: There was an error reading the node config from a file: {}", nodeId, e.getMessage());
+				logger.error("NODE {}: Error deserializing from file: {}", nodeId, e.getMessage());
 			} finally {
 				if (reader != null)
 					try {

File: bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java
Patch:
@@ -461,7 +461,7 @@ static public DecimalType deltaSince(Item item, AbstractInstant timestamp) {
 	 */
 	static public DecimalType deltaSince(Item item, AbstractInstant timestamp, String serviceName) {
 		DecimalType result = null;
-		HistoricItem itemThen = historicState(item, timestamp);
+		HistoricItem itemThen = historicState(item, timestamp, serviceName);
 		if (itemThen != null) {
 			DecimalType valueThen = (DecimalType) itemThen.getState();
 			DecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);
@@ -503,7 +503,7 @@ static public DecimalType evolutionRate(Item item, AbstractInstant timestamp) {
 	 */
 	static public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {
 		DecimalType result = null;
-		HistoricItem itemThen = historicState(item, timestamp);
+		HistoricItem itemThen = historicState(item, timestamp, serviceName);
 		if (itemThen != null) {
 			DecimalType valueThen = (DecimalType) itemThen.getState();
 			DecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);

File: bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/JSonPathTransformationService.java
Patch:
@@ -41,9 +41,9 @@ public String transform(String JSonPathExpression, String source) throws Transfo
 		logger.debug("about to transform '{}' by the function '{}'", source, JSonPathExpression);
 
 		try {
-			String transformationResult = JsonPath.read(source, JSonPathExpression);
+			Object transformationResult = JsonPath.read(source, JSonPathExpression);
 			logger.debug("transformation resulted in '{}'", transformationResult);
-			return transformationResult;
+			return (transformationResult != null) ? transformationResult.toString() : null;
 		} catch(InvalidPathException e) {
 			throw new TransformationException("An error occured while transforming JSON expression.", e);
 		} 

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/filter/SendPageUpdateFilter.java
Patch:
@@ -63,7 +63,7 @@ public void run() {
 				                	
 									
 								} catch (Exception e) {
-									logger.error(e.getMessage());
+									logger.error("Could not broadcast messages",e);
 								} 
 				            }
 				        });
@@ -104,7 +104,7 @@ private boolean isPageUpdated(HttpServletRequest request, Object responseEntity)
 		}
 		
 		CacheEntry entry =  ResourceStateChangeListener.getCachedEntries().get(clientId); 
-		if(entry ==null || entry.getData() instanceof PageBean){
+		if(entry != null && entry.getData() instanceof PageBean){
 			Object firedEntity = entry.getData();
 			if( firedEntity == null ||  ((PageBean)firedEntity).icon != ((PageBean)responseEntity).icon ||  ((PageBean)firedEntity).title != ((PageBean)responseEntity).title    ) {
 		    	return true;

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java
Patch:
@@ -246,9 +246,9 @@ else if (timeEnd.before(timeBegin)) {
 					req.getParameter("items"), req.getParameter("groups"));
 			ImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());
 		} catch (ItemNotFoundException e) {
-			logger.debug("Item not found error while generating chart.");
+			logger.info("Item not found error while generating chart: {}", e);
 		} catch (IllegalArgumentException e) {
-			logger.debug("Illegal argument in chart: {}", e);
+			logger.info("Illegal argument in chart: {}", e);
 		}
 	}
 

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelBinding.java
Patch:
@@ -75,7 +75,7 @@ static interface IInternalAnelBinding {
 	}
 
 	/** The refresh interval which is used to poll values from the Anel server. */
-	private long refreshInterval;
+	private long refreshInterval = AnelConfigReader.DEFAULT_REFRESH_INTERVAL;
 
 	/** Threads to communicate with Anel devices */
 	private final Map<String, AnelConnectorThread> connectorThreads = new HashMap<String, AnelConnectorThread>();
@@ -232,7 +232,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 
 		// clear map of previous threads because config changed
 		connectorThreads.clear();
-		refreshInterval = 0;
+		refreshInterval = AnelConfigReader.DEFAULT_REFRESH_INTERVAL;
 
 		// read new config
 		try {

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConfigReader.java
Patch:
@@ -29,7 +29,7 @@ public class AnelConfigReader {
 	/**
 	 * Refresh rate with which the state is regularly updated.
 	 */
-	private final static long DEFAULT_REFRESH_INTERVAL = 60000;
+	final static long DEFAULT_REFRESH_INTERVAL = 60000;
 
 	/**
 	 * If cache period is set to a positive integer, then this specifies the
@@ -68,7 +68,7 @@ private static class AnelConfig {
 	static long readConfig(Dictionary<String, ?> config, Map<String, AnelConnectorThread> threads,
 			IInternalAnelBinding bindingFacade) throws ConfigurationException {
 		if (config == null || config.isEmpty())
-			return 0;
+			return DEFAULT_REFRESH_INTERVAL;
 
 		long cachePeriod = DEFAULT_CACHE_PERIOD;
 		long refresh = DEFAULT_REFRESH_INTERVAL;

File: bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java
Patch:
@@ -125,7 +125,7 @@ public VariableInformation(int factor, String variable,
 		put(43239, new VariableInformation(1,	"Total hot water operation time add",	NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43395, new VariableInformation(1,	"HPAC relays",							NibeDataType.U8,	Type.Sensor));   // Unit: none
 		put(43416, new VariableInformation(1,	"Compressor starts EB100-EP14",			NibeDataType.S32,	Type.Sensor));   // Unit: none
-		put(43420, new VariableInformation(10,	"Total operation time compressor",		NibeDataType.S32,	Type.Sensor));   // Unit: hours
+		put(43420, new VariableInformation(1,	"Total operation time compressor",		NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43424, new VariableInformation(1,	"Total hot water operation time compr",	NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43427, new VariableInformation(1,	"Compressor state EP14",				NibeDataType.U8,	Type.Sensor));   // Unit: none, // 20 = Stopped, 40 = Starting, 60 = Running, 100 = Stopping 
 		put(43514, new VariableInformation(1,	"PCA-Base relayes EP14",				NibeDataType.U8,	Type.Sensor));   // Unit: none 

File: bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpDataParser.java
Patch:
@@ -125,7 +125,7 @@ public VariableInformation(int factor, String variable,
 		put(43239, new VariableInformation(1,	"Total hot water operation time add",	NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43395, new VariableInformation(1,	"HPAC relays",							NibeDataType.U8,	Type.Sensor));   // Unit: none
 		put(43416, new VariableInformation(1,	"Compressor starts EB100-EP14",			NibeDataType.S32,	Type.Sensor));   // Unit: none
-		put(43420, new VariableInformation(10,	"Total operation time compressor",		NibeDataType.S32,	Type.Sensor));   // Unit: hours
+		put(43420, new VariableInformation(1,	"Total operation time compressor",		NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43424, new VariableInformation(1,	"Total hot water operation time compr",	NibeDataType.S32,	Type.Sensor));   // Unit: hours
 		put(43427, new VariableInformation(1,	"Compressor state EP14",				NibeDataType.U8,	Type.Sensor));   // Unit: none, // 20 = Stopped, 40 = Starting, 60 = Running, 100 = Stopping 
 		put(43514, new VariableInformation(1,	"PCA-Base relayes EP14",				NibeDataType.U8,	Type.Sensor));   // Unit: none 

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java
Patch:
@@ -246,9 +246,9 @@ else if (timeEnd.before(timeBegin)) {
 					req.getParameter("items"), req.getParameter("groups"));
 			ImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());
 		} catch (ItemNotFoundException e) {
-			logger.debug("Item not found error while generating chart.");
+			logger.info("Item not found error while generating chart: {}", e);
 		} catch (IllegalArgumentException e) {
-			logger.debug("Illegal argument in chart: {}", e);
+			logger.info("Illegal argument in chart: {}", e);
 		}
 	}
 

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java
Patch:
@@ -246,9 +246,9 @@ else if (timeEnd.before(timeBegin)) {
 					req.getParameter("items"), req.getParameter("groups"));
 			ImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());
 		} catch (ItemNotFoundException e) {
-			logger.debug("Item not found error while generating chart.");
+			logger.info("Item not found error while generating chart: {}", e);
 		} catch (IllegalArgumentException e) {
-			logger.debug("Illegal argument in chart: {}", e);
+			logger.info("Illegal argument in chart: {}", e);
 		}
 	}
 

File: bundles/binding/org.openhab.binding.wago/src/main/java/org/openhab/binding/wago/internal/WagoGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -27,7 +27,7 @@
  * This class is responsible for parsing the binding configuration.
  *
  * @author Kaltofen
- * @since 1.5.0
+ * @since 1.7.0
  */
 public class WagoGenericBindingProvider extends AbstractGenericBindingProvider
 		implements WagoBindingProvider {
@@ -130,4 +130,5 @@ State getItemState() {
 			return item.getState();
 		}
 	}
+	
 }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java
Patch:
@@ -48,7 +48,7 @@ public boolean handleResponse(ZWaveController zController, SerialMessage lastSen
 			logger.error("NODE {}: AssignReturnRoute command failed.", nodeId);
 			zController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,
 					ZWaveNetworkEvent.State.Failure));
-			incomingMessage.setTransActionCanceled(true);
+			incomingMessage.setTransactionCanceled(true);
 		}
 		
 		return true;

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java
Patch:
@@ -246,9 +246,9 @@ else if (timeEnd.before(timeBegin)) {
 					req.getParameter("items"), req.getParameter("groups"));
 			ImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());
 		} catch (ItemNotFoundException e) {
-			logger.debug("Item not found error while generating chart.");
+			logger.info("Item not found error while generating chart: {}", e);
 		} catch (IllegalArgumentException e) {
-			logger.debug("Illegal argument in chart: {}", e);
+			logger.info("Illegal argument in chart: {}", e);
 		}
 	}
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/MeasurementRequest.java
Patch:
@@ -93,8 +93,9 @@ public MeasurementResponse execute() {
 		String json = null;
 
 		try {
+			
 			json = executeQuery(url);
-
+			
 			final MeasurementResponse response = JSON.readValue(json,
 					MeasurementResponse.class);
 

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/filter/SendPageUpdateFilter.java
Patch:
@@ -63,7 +63,7 @@ public void run() {
 				                	
 									
 								} catch (Exception e) {
-									logger.error(e.getMessage());
+									logger.error("Could not broadcast messages",e);
 								} 
 				            }
 				        });
@@ -104,7 +104,7 @@ private boolean isPageUpdated(HttpServletRequest request, Object responseEntity)
 		}
 		
 		CacheEntry entry =  ResourceStateChangeListener.getCachedEntries().get(clientId); 
-		if(entry ==null || entry.getData() instanceof PageBean){
+		if(entry != null && entry.getData() instanceof PageBean){
 			Object firedEntity = entry.getData();
 			if( firedEntity == null ||  ((PageBean)firedEntity).icon != ((PageBean)responseEntity).icon ||  ((PageBean)firedEntity).title != ((PageBean)responseEntity).title    ) {
 		    	return true;

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/MeasurementRequest.java
Patch:
@@ -93,8 +93,9 @@ public MeasurementResponse execute() {
 		String json = null;
 
 		try {
+			
 			json = executeQuery(url);
-
+			
 			final MeasurementResponse response = JSON.readValue(json,
 					MeasurementResponse.class);
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/MeasurementRequest.java
Patch:
@@ -93,8 +93,9 @@ public MeasurementResponse execute() {
 		String json = null;
 
 		try {
+			
 			json = executeQuery(url);
-
+			
 			final MeasurementResponse response = JSON.readValue(json,
 					MeasurementResponse.class);
 

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/filter/SendPageUpdateFilter.java
Patch:
@@ -63,7 +63,7 @@ public void run() {
 				                	
 									
 								} catch (Exception e) {
-									logger.error(e.getMessage());
+									logger.error("Could not broadcast messages",e);
 								} 
 				            }
 				        });
@@ -104,7 +104,7 @@ private boolean isPageUpdated(HttpServletRequest request, Object responseEntity)
 		}
 		
 		CacheEntry entry =  ResourceStateChangeListener.getCachedEntries().get(clientId); 
-		if(entry ==null || entry.getData() instanceof PageBean){
+		if(entry != null && entry.getData() instanceof PageBean){
 			Object firedEntity = entry.getData();
 			if( firedEntity == null ||  ((PageBean)firedEntity).icon != ((PageBean)responseEntity).icon ||  ((PageBean)firedEntity).title != ((PageBean)responseEntity).title    ) {
 		    	return true;

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/internal/__binding-name__Binding.java
Patch:
@@ -102,7 +102,7 @@ protected void internalReceiveUpdate(String itemName, State newState) {
 		// the code being executed when a state was sent on the openHAB
 		// event bus goes here. This method is only called if one of the 
 		// BindingProviders provide a binding for the given 'itemName'.
-		logger.debug("internalReceiveCommand() is called!");
+		logger.debug("internalReceiveUpdate() is called!");
 	}
 		
 	/**

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java
Patch:
@@ -82,7 +82,7 @@ private boolean isSunUpAllDay(Calendar calendar, double latitude, double longitu
 		Calendar cal = DateTimeUtils.truncateToMidnight(calendar);
 		Sun sun = new Sun();
 		for (int minutes = 0; minutes <= MINUTES_PER_DAY; minutes += CURVE_TIME_INTERVAL) {
-			setSunPosition(calendar, latitude, longitude, sun);
+			setSunPosition(cal, latitude, longitude, sun);
 			if (sun.getPosition().getElevation() < SUN_ANGLE) {
 				return false;
 			}

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java
Patch:
@@ -35,13 +35,15 @@ public static Calendar truncateToMidnight(Calendar calendar) {
 	 * Creates a Range object within the specified months and days. The start
 	 * time is midnight, the end time is end of the day.
 	 */
-	public static Range getRange(int startMonth, int startDay, int endMonth, int endDay) {
+	public static Range getRange(int startYear, int startMonth, int startDay, int endYear,int endMonth, int endDay) {
 		Calendar start = Calendar.getInstance();
+		start.set(Calendar.YEAR, startYear);
 		start.set(Calendar.MONTH, startMonth);
 		start.set(Calendar.DAY_OF_MONTH, startDay);
 		start = truncateToMidnight(start);
 
 		Calendar end = Calendar.getInstance();
+		end.set(Calendar.YEAR, endYear);
 		end.set(Calendar.MONTH, endMonth);
 		end.set(Calendar.DAY_OF_MONTH, endDay);
 		end.set(Calendar.HOUR_OF_DAY, 23);

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxTokenizer.java
Patch:
@@ -60,4 +60,4 @@ public byte[] nextElement() {
 		
 		return token;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/Utils.java
Patch:
@@ -191,4 +191,4 @@ public static String getStackTrace(Exception e) {
 		e.printStackTrace(printWriter);
 		return stringWriter.toString();
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Configuration.java
Patch:
@@ -80,4 +80,4 @@ public int getRoomId() {
 	public void setRoomId(int roomId) {
 		this.roomId = roomId;
 	}	
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -248,4 +248,4 @@ private void setInitialized(boolean initialized) {
 	private void setAnswer(boolean answer) {
 		this.answer = answer;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/DeviceInformation.java
Patch:
@@ -49,4 +49,4 @@ public int getRoomId() {
 	public String getName() {
 		return name;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/DeviceType.java
Patch:
@@ -65,4 +65,4 @@ public String toString() {
 	      return "Invalid";
 	    }
 	  }
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/L_Message.java
Patch:
@@ -92,4 +92,4 @@ public void debug(Logger logger) {
 	public MessageType getType() {
 		return MessageType.L;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Message.java
Patch:
@@ -34,4 +34,4 @@ public Message(String raw) {
 	protected final String getPayload() {
 		return raw.substring(2, raw.length());
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/MessageType.java
Patch:
@@ -16,4 +16,4 @@
 */
 public enum MessageType {
 	H, M, C, L, S
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/RoomInformation.java
Patch:
@@ -48,4 +48,4 @@ public String getRFAddress() {
 	public void setRFAddress(String rfAddress) {
 		this.rfAddress = rfAddress;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/S_Command.java
Patch:
@@ -117,4 +117,4 @@ public String getCommandString() {
 
 		return "s:" + encodedString;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoMeasureType.java
Patch:
@@ -29,7 +29,8 @@ public enum NetatmoMeasureType {
 	LATITUDE("Latitude"),
 	LONGITUDE("Longitude"),
 	RFSTATUS("RfStatus"),
-	BATTERYVP("BatteryVp");
+	BATTERYVP("BatteryVp"),
+	TIMESTAMP("TimeStamp");
 	
 	String measure;
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/MeasurementRequest.java
Patch:
@@ -24,6 +24,7 @@
  * Queries the Netatmo API for the measures of a single device or module.
  * 
  * @author Andreas Brenk
+ * @author Gaël L'hopital
  * @since 1.4.0
  * @see <a href="http://dev.netatmo.com/doc/restapi/getmeasure">getmeasure</a>
  */

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/RefreshTokenRequest.java
Patch:
@@ -14,7 +14,6 @@
 import java.io.InputStream;
 
 import org.apache.commons.lang.builder.ToStringBuilder;
-import org.openhab.binding.netatmo.internal.NetatmoException;
 
 /**
  * Gets a renewed refresh token from the Netatmo API to use in future

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/provider/AbstractWeatherProvider.java
Patch:
@@ -15,6 +15,7 @@
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpStatus;
 import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
+import org.apache.commons.httpclient.cookie.CookiePolicy;
 import org.apache.commons.httpclient.methods.GetMethod;
 import org.apache.commons.httpclient.params.HttpClientParams;
 import org.apache.commons.lang.StringUtils;
@@ -49,6 +50,7 @@ public abstract class AbstractWeatherProvider implements WeatherProvider {
 		params.setConnectionManagerTimeout(5000);
 		params.setSoTimeout(30000);
 		params.setContentCharset("UTF-8");
+		params.setCookiePolicy(CookiePolicy.IGNORE_COOKIES);
 	}
 
 	public AbstractWeatherProvider(WeatherParser parser) {

File: bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java
Patch:
@@ -461,7 +461,7 @@ static public DecimalType deltaSince(Item item, AbstractInstant timestamp) {
 	 */
 	static public DecimalType deltaSince(Item item, AbstractInstant timestamp, String serviceName) {
 		DecimalType result = null;
-		HistoricItem itemThen = historicState(item, timestamp);
+		HistoricItem itemThen = historicState(item, timestamp, serviceName);
 		if (itemThen != null) {
 			DecimalType valueThen = (DecimalType) itemThen.getState();
 			DecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);
@@ -503,7 +503,7 @@ static public DecimalType evolutionRate(Item item, AbstractInstant timestamp) {
 	 */
 	static public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {
 		DecimalType result = null;
-		HistoricItem itemThen = historicState(item, timestamp);
+		HistoricItem itemThen = historicState(item, timestamp, serviceName);
 		if (itemThen != null) {
 			DecimalType valueThen = (DecimalType) itemThen.getState();
 			DecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);

File: bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/JSonPathTransformationService.java
Patch:
@@ -41,9 +41,9 @@ public String transform(String JSonPathExpression, String source) throws Transfo
 		logger.debug("about to transform '{}' by the function '{}'", source, JSonPathExpression);
 
 		try {
-			String transformationResult = JsonPath.read(source, JSonPathExpression);
+			Object transformationResult = JsonPath.read(source, JSonPathExpression);
 			logger.debug("transformation resulted in '{}'", transformationResult);
-			return transformationResult;
+			return (transformationResult != null) ? transformationResult.toString() : null;
 		} catch(InvalidPathException e) {
 			throw new TransformationException("An error occured while transforming JSON expression.", e);
 		} 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java
Patch:
@@ -324,7 +324,7 @@ public void execute() {
 				}
 				// Use the last sent time for comparisson.
 				// This avoids the situation where we only poll a dead node if we use the received time!
-				if (oldestNode == null) {
+				if (oldestNode == null || oldestNode.getLastSent() == null) {
 					oldestNode = node;
 				} else if (node.getLastSent() == null || node.getLastSent().getTime() < oldestNode.getLastSent().getTime()) {
 					oldestNode = node;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/SerialMessage.java
Patch:
@@ -136,16 +136,16 @@ public SerialMessage(int nodeId, byte[] buffer) {
 		messageLength = buffer.length - 2; // buffer[1];
 		byte messageCheckSumm = calculateChecksum(buffer);
 		byte messageCheckSummReceived = buffer[messageLength+1];
-		logger.trace(String.format("NODE %d: Message checksum calculated = 0x%02X, received = 0x%02X", nodeId, messageCheckSumm, messageCheckSummReceived));
 		if (messageCheckSumm == messageCheckSummReceived) {
 			logger.trace("NODE {}: Checksum matched", nodeId);
 			isValid = true;
 		} else {
-			logger.trace("NODE {}: Checksum error", nodeId);
+			logger.trace("NODE {}: Checksum error. Calculated = 0x%02X, Received = 0x%02X", nodeId, messageCheckSumm, messageCheckSummReceived);
 			isValid = false;
 			return;
 		}
-		this.messageType = buffer[2] == 0x00 ? SerialMessageType.Request : SerialMessageType.Response;;
+		this.priority = SerialMessagePriority.High;
+		this.messageType = buffer[2] == 0x00 ? SerialMessageType.Request : SerialMessageType.Response;
 		this.messageClass = SerialMessageClass.getMessageClass(buffer[3] & 0xFF);
 		this.messagePayload = ArrayUtils.subarray(buffer, 4, messageLength + 1);
 		this.messageNode = nodeId;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java
Patch:
@@ -1298,7 +1298,7 @@ private void processIncomingMessage(byte[] buffer) {
     			logger.error("Message is not valid, discarding");
     			return;
     		}
-    		
+   
     		recvQueue.add(recvMessage);
 			logger.debug("Receive queue ADD: Length={}", recvQueue.size());
         }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveInfoConverter.java
Patch:
@@ -153,7 +153,7 @@ private Object getInformationItemValue(ZWaveNode node, ZWaveInformationItem info
 			case REPORT_TIME_OUT:
 				return this.getController().getTimeOutCount();
 			case REPORT_TX_QUEUE:
-				return this.getController().getTxQueueLength();
+				return this.getController().getSendQueueLength();
 		}
         
         return null;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -805,7 +805,7 @@ public void ZWaveIncomingEvent(ZWaveEvent event) {
 				// We use this as a trigger to kick things off again if they've stalled
 				// by checking to see if the transmit queue is now empty.
 				// This will allow battery devices stuck in WAIT state to get moving.
-				if(controller.getTxQueueLength() < 2 && currentStage == NodeStage.WAIT) {
+				if(controller.getSendQueueLength() < 2 && currentStage == NodeStage.WAIT) {
 					logger.debug("NODE {}: Node advancer - WAIT: The WAIT is over!", node.getNodeId());
 
 					currentStage = currentStage.getNextStage();

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/filter/SendPageUpdateFilter.java
Patch:
@@ -63,7 +63,7 @@ public void run() {
 				                	
 									
 								} catch (Exception e) {
-									logger.error(e.getMessage());
+									logger.error("Could not broadcast messages",e);
 								} 
 				            }
 				        });
@@ -104,7 +104,7 @@ private boolean isPageUpdated(HttpServletRequest request, Object responseEntity)
 		}
 		
 		CacheEntry entry =  ResourceStateChangeListener.getCachedEntries().get(clientId); 
-		if(entry ==null || entry.getData() instanceof PageBean){
+		if(entry != null && entry.getData() instanceof PageBean){
 			Object firedEntity = entry.getData();
 			if( firedEntity == null ||  ((PageBean)firedEntity).icon != ((PageBean)responseEntity).icon ||  ((PageBean)firedEntity).title != ((PageBean)responseEntity).title    ) {
 		    	return true;

File: bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java
Patch:
@@ -461,7 +461,7 @@ static public DecimalType deltaSince(Item item, AbstractInstant timestamp) {
 	 */
 	static public DecimalType deltaSince(Item item, AbstractInstant timestamp, String serviceName) {
 		DecimalType result = null;
-		HistoricItem itemThen = historicState(item, timestamp);
+		HistoricItem itemThen = historicState(item, timestamp, serviceName);
 		if (itemThen != null) {
 			DecimalType valueThen = (DecimalType) itemThen.getState();
 			DecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);
@@ -503,7 +503,7 @@ static public DecimalType evolutionRate(Item item, AbstractInstant timestamp) {
 	 */
 	static public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {
 		DecimalType result = null;
-		HistoricItem itemThen = historicState(item, timestamp);
+		HistoricItem itemThen = historicState(item, timestamp, serviceName);
 		if (itemThen != null) {
 			DecimalType valueThen = (DecimalType) itemThen.getState();
 			DecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanModeCommandClass.java
Patch:
@@ -249,6 +249,7 @@ public SerialMessage getSupportedMessage() {
 	public SerialMessage setValueMessage(int value) {
 
 		if(fanModeTypes.isEmpty()) {
+			logger.warn("NODE {}: requesting fan mode types, set request ignored (try again later)", this.getNode().getNodeId());
 			return this.getSupportedMessage();
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatModeCommandClass.java
Patch:
@@ -252,10 +252,11 @@ public SerialMessage setValueMessage(int value) {
 
 		//if we do not have any mode types yet, get them
 		if(modeTypes.isEmpty()) {
+			logger.warn("NODE {}: requesting mode types, set request ignored (try again later)", this.getNode().getNodeId());
 			return this.getSupportedMessage();
 		}
 
-		if(modeTypes.contains(ModeType.getModeType(value))){
+		if(!modeTypes.contains(ModeType.getModeType(value))){
 			logger.error("NODE {}: Unsupported mode type {}", this.getNode().getNodeId(), value);
 			return null;
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanModeCommandClass.java
Patch:
@@ -249,6 +249,7 @@ public SerialMessage getSupportedMessage() {
 	public SerialMessage setValueMessage(int value) {
 
 		if(fanModeTypes.isEmpty()) {
+			logger.warn("NODE {}: requesting fan mode types, set request ignored (try again later)", this.getNode().getNodeId());
 			return this.getSupportedMessage();
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatModeCommandClass.java
Patch:
@@ -252,10 +252,11 @@ public SerialMessage setValueMessage(int value) {
 
 		//if we do not have any mode types yet, get them
 		if(modeTypes.isEmpty()) {
+			logger.warn("NODE {}: requesting mode types, set request ignored (try again later)", this.getNode().getNodeId());
 			return this.getSupportedMessage();
 		}
 
-		if(modeTypes.contains(ModeType.getModeType(value))){
+		if(!modeTypes.contains(ModeType.getModeType(value))){
 			logger.error("NODE {}: Unsupported mode type {}", this.getNode().getNodeId(), value);
 			return null;
 		}

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickBinding.java
Patch:
@@ -376,6 +376,7 @@ private void resetTellstick() {
 			logger.info("Telldus reset");
 			registerListeners();
 			logger.info("Listeners restarted");
+			controller.setLastSend(System.currentTimeMillis());
 		} catch (Exception e) {
 			logger.error("Failed to reset listener", e);
 		}

File: bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java
Patch:
@@ -461,7 +461,7 @@ static public DecimalType deltaSince(Item item, AbstractInstant timestamp) {
 	 */
 	static public DecimalType deltaSince(Item item, AbstractInstant timestamp, String serviceName) {
 		DecimalType result = null;
-		HistoricItem itemThen = historicState(item, timestamp);
+		HistoricItem itemThen = historicState(item, timestamp, serviceName);
 		if (itemThen != null) {
 			DecimalType valueThen = (DecimalType) itemThen.getState();
 			DecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);
@@ -503,7 +503,7 @@ static public DecimalType evolutionRate(Item item, AbstractInstant timestamp) {
 	 */
 	static public DecimalType evolutionRate(Item item, AbstractInstant timestamp, String serviceName) {
 		DecimalType result = null;
-		HistoricItem itemThen = historicState(item, timestamp);
+		HistoricItem itemThen = historicState(item, timestamp, serviceName);
 		if (itemThen != null) {
 			DecimalType valueThen = (DecimalType) itemThen.getState();
 			DecimalType valueNow = (DecimalType) item.getStateAs(DecimalType.class);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanModeCommandClass.java
Patch:
@@ -249,6 +249,7 @@ public SerialMessage getSupportedMessage() {
 	public SerialMessage setValueMessage(int value) {
 
 		if(fanModeTypes.isEmpty()) {
+			logger.warn("NODE {}: requesting fan mode types, set request ignored (try again later)", this.getNode().getNodeId());
 			return this.getSupportedMessage();
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatModeCommandClass.java
Patch:
@@ -252,10 +252,11 @@ public SerialMessage setValueMessage(int value) {
 
 		//if we do not have any mode types yet, get them
 		if(modeTypes.isEmpty()) {
+			logger.warn("NODE {}: requesting mode types, set request ignored (try again later)", this.getNode().getNodeId());
 			return this.getSupportedMessage();
 		}
 
-		if(modeTypes.contains(ModeType.getModeType(value))){
+		if(!modeTypes.contains(ModeType.getModeType(value))){
 			logger.error("NODE {}: Unsupported mode type {}", this.getNode().getNodeId(), value);
 			return null;
 		}

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java
Patch:
@@ -246,9 +246,9 @@ else if (timeEnd.before(timeBegin)) {
 					req.getParameter("items"), req.getParameter("groups"));
 			ImageIO.write(chart, provider.getChartType().toString(), res.getOutputStream());
 		} catch (ItemNotFoundException e) {
-			logger.debug("Item not found error while generating chart.");
+			logger.error("Item not found error while generating chart.", e);
 		} catch (IllegalArgumentException e) {
-			logger.debug("Illegal argument in chart: {}", e);
+			logger.error("Illegal argument in chart", e);
 		}
 	}
 

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/internal/__binding-name__Binding.java
Patch:
@@ -102,7 +102,7 @@ protected void internalReceiveUpdate(String itemName, State newState) {
 		// the code being executed when a state was sent on the openHAB
 		// event bus goes here. This method is only called if one of the 
 		// BindingProviders provide a binding for the given 'itemName'.
-		logger.debug("internalReceiveCommand() is called!");
+		logger.debug("internalReceiveUpdate() is called!");
 	}
 		
 	/**

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/internal/__binding-name__Binding.java
Patch:
@@ -102,7 +102,7 @@ protected void internalReceiveUpdate(String itemName, State newState) {
 		// the code being executed when a state was sent on the openHAB
 		// event bus goes here. This method is only called if one of the 
 		// BindingProviders provide a binding for the given 'itemName'.
-		logger.debug("internalReceiveCommand() is called!");
+		logger.debug("internalReceiveUpdate() is called!");
 	}
 		
 	/**

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxTokenizer.java
Patch:
@@ -60,4 +60,4 @@ public byte[] nextElement() {
 		
 		return token;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/Utils.java
Patch:
@@ -191,4 +191,4 @@ public static String getStackTrace(Exception e) {
 		e.printStackTrace(printWriter);
 		return stringWriter.toString();
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Configuration.java
Patch:
@@ -80,4 +80,4 @@ public int getRoomId() {
 	public void setRoomId(int roomId) {
 		this.roomId = roomId;
 	}	
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -248,4 +248,4 @@ private void setInitialized(boolean initialized) {
 	private void setAnswer(boolean answer) {
 		this.answer = answer;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/DeviceInformation.java
Patch:
@@ -49,4 +49,4 @@ public int getRoomId() {
 	public String getName() {
 		return name;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/DeviceType.java
Patch:
@@ -65,4 +65,4 @@ public String toString() {
 	      return "Invalid";
 	    }
 	  }
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/L_Message.java
Patch:
@@ -92,4 +92,4 @@ public void debug(Logger logger) {
 	public MessageType getType() {
 		return MessageType.L;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Message.java
Patch:
@@ -34,4 +34,4 @@ public Message(String raw) {
 	protected final String getPayload() {
 		return raw.substring(2, raw.length());
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/MessageType.java
Patch:
@@ -16,4 +16,4 @@
 */
 public enum MessageType {
 	H, M, C, L, S
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/RoomInformation.java
Patch:
@@ -48,4 +48,4 @@ public String getRFAddress() {
 	public void setRFAddress(String rfAddress) {
 		this.rfAddress = rfAddress;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/S_Command.java
Patch:
@@ -117,4 +117,4 @@ public String getCommandString() {
 
 		return "s:" + encodedString;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/S_Message.java
Patch:
@@ -72,4 +72,4 @@ public MessageType getType() {
 		return MessageType.S;
 	}
 	
-}
\ No newline at end of file
+}

File: bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/JSonPathTransformationService.java
Patch:
@@ -41,9 +41,9 @@ public String transform(String JSonPathExpression, String source) throws Transfo
 		logger.debug("about to transform '{}' by the function '{}'", source, JSonPathExpression);
 
 		try {
-			String transformationResult = JsonPath.read(source, JSonPathExpression);
+			Object transformationResult = JsonPath.read(source, JSonPathExpression);
 			logger.debug("transformation resulted in '{}'", transformationResult);
-			return transformationResult;
+			return (transformationResult != null) ? transformationResult.toString() : null;
 		} catch(InvalidPathException e) {
 			throw new TransformationException("An error occured while transforming JSON expression.", e);
 		} 

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/DSMRBinding.java
Patch:
@@ -59,7 +59,7 @@ public class DSMRBinding extends AbstractActiveBinding<DSMRBindingProvider>
 	/* DSMR Version (configurable via openhab.cfg) */
 	private DSMRVersion version = DSMRVersion.NONE;
 	/* Meter - channel mapping (configurable via openhab.cfg) */
-	private final List<DSMRMeter> dsmrMeters = new ArrayList<>();
+	private final List<DSMRMeter> dsmrMeters = new ArrayList<DSMRMeter>();
 
 	/* DSMR Port object */
 	private DSMRPort dsmrPort;

File: bundles/binding/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/messages/OBISMessage.java
Patch:
@@ -49,7 +49,7 @@ public class OBISMessage {
 	public OBISMessage(OBISMsgType msgType) {
 		this.msgType = msgType;
 
-		cosemValues = new ArrayList<>();
+		cosemValues = new ArrayList<CosemValue<? extends State>>();
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java
Patch:
@@ -82,7 +82,7 @@ private boolean isSunUpAllDay(Calendar calendar, double latitude, double longitu
 		Calendar cal = DateTimeUtils.truncateToMidnight(calendar);
 		Sun sun = new Sun();
 		for (int minutes = 0; minutes <= MINUTES_PER_DAY; minutes += CURVE_TIME_INTERVAL) {
-			setSunPosition(calendar, latitude, longitude, sun);
+			setSunPosition(cal, latitude, longitude, sun);
 			if (sun.getPosition().getElevation() < SUN_ANGLE) {
 				return false;
 			}

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java
Patch:
@@ -35,13 +35,15 @@ public static Calendar truncateToMidnight(Calendar calendar) {
 	 * Creates a Range object within the specified months and days. The start
 	 * time is midnight, the end time is end of the day.
 	 */
-	public static Range getRange(int startMonth, int startDay, int endMonth, int endDay) {
+	public static Range getRange(int startYear, int startMonth, int startDay, int endYear,int endMonth, int endDay) {
 		Calendar start = Calendar.getInstance();
+		start.set(Calendar.YEAR, startYear);
 		start.set(Calendar.MONTH, startMonth);
 		start.set(Calendar.DAY_OF_MONTH, startDay);
 		start = truncateToMidnight(start);
 
 		Calendar end = Calendar.getInstance();
+		end.set(Calendar.YEAR, endYear);
 		end.set(Calendar.MONTH, endMonth);
 		end.set(Calendar.DAY_OF_MONTH, endDay);
 		end.set(Calendar.HOUR_OF_DAY, 23);

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java
Patch:
@@ -133,7 +133,7 @@ public void processMessage(Chat chat, Message message) {
 					is = url.openStream();
 					OutgoingFileTransfer.setResponseTimeout(10000);
 					transfer.sendStream(is, url.getFile(), is.available(), message);
-					logger.debug("Sent message '{}' with attachment '{}' to '{}'.", new String[] { message, attachmentUrl, to });
+					logger.debug("Sent message '{}' with attachment '{}' to '{}'.", (Object[]) new String[] { message, attachmentUrl, to });
 					success = true;
 				} catch (IOException e) {
 					logger.error("Could not open url '{}' for sending it via XMPP", attachmentUrl, e);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanModeCommandClass.java
Patch:
@@ -209,7 +209,7 @@ public SerialMessage getValueMessage() {
 		}
 		
 		logger.debug("NODE {}: Creating new message for application command THERMOSTAT_FAN_MODE_GET", this.getNode().getNodeId());
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
 		byte[] payload = {
 				(byte) this.getNode().getNodeId(),
 				2,

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanStateCommandClass.java
Patch:
@@ -156,7 +156,7 @@ public SerialMessage getValueMessage() {
 		}
 		
 		logger.debug("NODE {}: Creating new message for application command THERMOSTAT_FAN_STATE_GET", this.getNode().getNodeId());
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
 		byte[] payload = {
 				(byte) this.getNode().getNodeId(),
 				2,

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatModeCommandClass.java
Patch:
@@ -209,7 +209,7 @@ public SerialMessage getValueMessage() {
 		}
 		
 		logger.debug("NODE {}: Creating new message for application command THERMOSTAT_MODE_GET", this.getNode().getNodeId());
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
 		byte[] payload = {
 				(byte) this.getNode().getNodeId(),
 				2,

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatOperatingStateCommandClass.java
Patch:
@@ -150,7 +150,7 @@ public SerialMessage getValueMessage() {
 		}
 		
 		logger.debug("NODE {}: Creating new message for application command THERMOSTAT_OPERATING_STATE_GET", this.getNode().getNodeId());
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
 		byte[] payload = {
 				(byte) this.getNode().getNodeId(),
 				2,

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatSetpointCommandClass.java
Patch:
@@ -259,7 +259,7 @@ public SerialMessage getMessage(SetpointType setpointType) {
 		}
 
 		logger.debug("NODE {}: Creating new message for application command THERMOSTAT_SETPOINT_GET ({})", this.getNode().getNodeId(),setpointType.getLabel());
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
 		byte[] payload = {
 				(byte) this.getNode().getNodeId(),
 				3,

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java
Patch:
@@ -82,7 +82,7 @@ private boolean isSunUpAllDay(Calendar calendar, double latitude, double longitu
 		Calendar cal = DateTimeUtils.truncateToMidnight(calendar);
 		Sun sun = new Sun();
 		for (int minutes = 0; minutes <= MINUTES_PER_DAY; minutes += CURVE_TIME_INTERVAL) {
-			setSunPosition(calendar, latitude, longitude, sun);
+			setSunPosition(cal, latitude, longitude, sun);
 			if (sun.getPosition().getElevation() < SUN_ANGLE) {
 				return false;
 			}

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/provider/AbstractWeatherProvider.java
Patch:
@@ -15,6 +15,7 @@
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpStatus;
 import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
+import org.apache.commons.httpclient.cookie.CookiePolicy;
 import org.apache.commons.httpclient.methods.GetMethod;
 import org.apache.commons.httpclient.params.HttpClientParams;
 import org.apache.commons.lang.StringUtils;
@@ -49,6 +50,7 @@ public abstract class AbstractWeatherProvider implements WeatherProvider {
 		params.setConnectionManagerTimeout(5000);
 		params.setSoTimeout(30000);
 		params.setContentCharset("UTF-8");
+		params.setCookiePolicy(CookiePolicy.IGNORE_COOKIES);
 	}
 
 	public AbstractWeatherProvider(WeatherParser parser) {

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/provider/AbstractWeatherProvider.java
Patch:
@@ -15,6 +15,7 @@
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpStatus;
 import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
+import org.apache.commons.httpclient.cookie.CookiePolicy;
 import org.apache.commons.httpclient.methods.GetMethod;
 import org.apache.commons.httpclient.params.HttpClientParams;
 import org.apache.commons.lang.StringUtils;
@@ -49,6 +50,7 @@ public abstract class AbstractWeatherProvider implements WeatherProvider {
 		params.setConnectionManagerTimeout(5000);
 		params.setSoTimeout(30000);
 		params.setContentCharset("UTF-8");
+		params.setCookiePolicy(CookiePolicy.IGNORE_COOKIES);
 	}
 
 	public AbstractWeatherProvider(WeatherParser parser) {

File: bundles/action/org.openhab.action.homematic/src/main/java/org/openhab/action/homematic/internal/Homematic.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.homematic/src/main/java/org/openhab/action/homematic/internal/HomematicActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.homematic/src/main/java/org/openhab/action/homematic/internal/HomematicActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.mail/src/main/java/org/openhab/action/mail/internal/Mail.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.mail/src/main/java/org/openhab/action/mail/internal/MailActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.mail/src/main/java/org/openhab/action/mail/internal/MailActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.nma/src/main/java/org/openhab/action/nma/internal/NotifyMyAndroid.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.nma/src/main/java/org/openhab/action/nma/internal/NotifyMyAndroidActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.nma/src/main/java/org/openhab/action/nma/internal/NotifyMyAndroidActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/OpenWebIf.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/OpenWebIfActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/OpenWebIfActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/OpenWebIfCommunicator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/UrlBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/config/OpenWebIfConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/model/MessageType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/model/PowerState.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/model/SimpleResult.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/model/adapter/BooleanTypeAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/model/adapter/TrimToNullStringAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/ssl/AllowAllHostnameVerifier.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.openwebif/src/main/java/org/openhab/action/openwebif/internal/impl/ssl/SimpleTrustManager.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.prowl/src/main/java/org/openhab/action/prowl/internal/Prowl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.prowl/src/main/java/org/openhab/action/prowl/internal/ProwlActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.prowl/src/main/java/org/openhab/action/prowl/internal/ProwlActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.pushover/src/main/java/org/openhab/action/pushover/internal/Pushover.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.pushover/src/main/java/org/openhab/action/pushover/internal/PushoverActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.pushover/src/main/java/org/openhab/action/pushover/internal/PushoverActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/Squeezebox.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/SqueezeboxActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/SqueezeboxActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/SqueezeboxSentenceListener.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/Twitter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/TwitterActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/TwitterActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.weather/src/main/java/org/openhab/action/weather/internal/Weather.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.weather/src/main/java/org/openhab/action/weather/internal/WeatherActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.weather/src/main/java/org/openhab/action/weather/internal/WeatherActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xbmc/src/main/java/org/openhab/action/xbmc/internal/XBMC.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xbmc/src/main/java/org/openhab/action/xbmc/internal/XBMCActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xbmc/src/main/java/org/openhab/action/xbmc/internal/XBMCActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/NotInitializedException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConnect.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xpl/src/main/java/org/openhab/action/xpl/internal/Xpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xpl/src/main/java/org/openhab/action/xpl/internal/XplActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xpl/src/main/java/org/openhab/action/xpl/internal/XplActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/AlarmDecoderBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/ADMsgType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBindingConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/AnelBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelCommandType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConfigReader.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelConnectorThread.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelDataParser.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelState.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelUDPConnector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/AsteriskBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskBindingTypes.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/AstroBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/bus/AstroActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/bus/AstroBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/bus/AstroGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/bus/BindingConfigParser.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/bus/PlanetPublisher.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/MoonCalc.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SeasonCalc.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunZodiacCalc.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/common/AstroConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/common/AstroContext.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/config/AstroBindingConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/job/AbstractBaseJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/job/DailyJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/job/IntervalJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/job/ItemJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/job/JobScheduler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/job/SeasonJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Eclipse.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Moon.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/MoonDistance.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/MoonPhase.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/MoonPhaseName.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Planet.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/PlanetName.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Position.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Range.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/RiseSet.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Season.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/SeasonName.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Sun.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/SunEclipse.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/SunZodiac.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/Zodiac.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/model/ZodiacSign.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DelayedExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/ItemIterator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/PropertyUtils.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/BenqProjectorBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorBindingConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorItemMode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/BenqProjectorSourceMapping.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/transport/BenqProjectorNetworkTransport.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.benqprojector/src/main/java/org/openhab/binding/benqprojector/internal/transport/BenqProjectorTransport.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/BluetoothEventHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BTDeviceDiscoveryService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BluetoothActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BluetoothBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BluetoothDevice.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/ComfoAirBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/ComfoAirDataType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/DataTypeBoolean.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/DataTypeMessage.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/DataTypeNumber.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/DataTypeTemperature.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/handling/ComfoAirCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/handling/ComfoAirCommandType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/handling/ComfoAirConnector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/InitializationException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.configadmin/src/main/java/org/openhab/binding/configadmin/ConfigAdminBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.configadmin/src/main/java/org/openhab/binding/configadmin/internal/ConfigAdminActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.configadmin/src/main/java/org/openhab/binding/configadmin/internal/ConfigAdminBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.configadmin/src/main/java/org/openhab/binding/configadmin/internal/ConfigAdminGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/CupsBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/internal/CupsActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/internal/CupsBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/internal/CupsGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/DaikinBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinBindingConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinCommandType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinFan.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHost.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinMode.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinSwing.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinTimer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/DavisBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeBarometer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeBarometricTrend.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeNumber.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeRain.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeSplitString.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeStationType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeString.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeTemperature.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeTemperatureExtra.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeTemperatureF.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeTime.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeVoltage.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeWind.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DataTypeWindHiRes.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DavisCommandType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DavisDataType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DavisValueType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/internal/Constants.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/internal/DavisActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/internal/DavisBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/internal/DavisCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/internal/DavisGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/internal/InitializationException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/DigitalSTROMBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/DigitalSTROMActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/DigitalSTROMBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/DigitalSTROMGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/DigitalSTROMAPI.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/connection/JSONResponseHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/connection/transport/HttpTransport.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/ApartmentSceneEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/DeviceConstants.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/DeviceParameterClassEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/JSONApiResponseKeysEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/JSONRequestConstants.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/JobPriority.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/MeteringTypeEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/MeteringUnitsEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/OutputModeEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/SceneEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/SceneToStateMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/SensorEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/SensorIndexEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/ZoneSceneEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/Apartment.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/CachedMeteringValue.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/DSID.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/DetailedGroupInfo.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/Device.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/DeviceConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/DeviceSceneSpec.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/Event.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/EventItem.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/Group.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/Scene.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/Zone.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONApartmentImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONCachedMeteringValueImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONDetailedGroupInfoImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONDeviceConfigImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONDeviceImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONDeviceSceneSpecImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONEventImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONEventItemImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONGroupImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONZoneImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/events/DeviceListener.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/events/EventPropertyEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/impl/DigitalSTROMJSONImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/job/DeviceConsumptionSensorJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2014, openHAB.org and others.
+ * Copyright (c) 2010-2015, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.pilight/src/main/java/org/openhab/binding/pilight/internal/PilightListener.java
Patch:
@@ -12,7 +12,6 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.net.Socket;
-import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanStateCommandClass.java
Patch:
@@ -23,7 +23,6 @@
 import org.openhab.binding.zwave.internal.protocol.ZWaveController;
 import org.openhab.binding.zwave.internal.protocol.ZWaveEndpoint;
 import org.openhab.binding.zwave.internal.protocol.ZWaveNode;
-import org.openhab.binding.zwave.internal.protocol.commandclass.ZWaveThermostatModeCommandClass.ModeType;
 import org.openhab.binding.zwave.internal.protocol.event.ZWaveCommandClassValueEvent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DavisValueType.java
Patch:
@@ -450,7 +450,7 @@ public enum DavisValueType {
 	UV {
 		{
 			key = "uv";
-			data_type = DataTypeUV.class;
+			data_type = DataTypeNumber.class;
 			command = DavisCommandType.LOOP;
 			data_offset = 43;
 			data_size = 1;	

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -362,7 +362,8 @@ public void internalReceiveCommand(String itemName, Command command) {
 					cmd = new S_Command(rfAddress, device.getRoomId(), commandThermoType);
 				} else if (commandContent.contentEquals(ThermostatModeType.BOOST.toString())) {
 					commandThermoType = ThermostatModeType.BOOST;
-					cmd = new S_Command(rfAddress, device.getRoomId(), commandThermoType);
+					Double setTemp = Double.parseDouble( ((HeatingThermostat) device).getTemperatureSetpoint().toString());
+					cmd = new S_Command(rfAddress, device.getRoomId(), commandThermoType, setTemp);
 				} else if (commandContent.contentEquals(ThermostatModeType.MANUAL.toString())) {
 					commandThermoType = ThermostatModeType.MANUAL;
 					Double setTemp = Double.parseDouble( ((HeatingThermostat) device).getTemperatureSetpoint().toString());

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/S_Command.java
Patch:
@@ -57,6 +57,9 @@ public S_Command(String rfAddress, int roomId, ThermostatModeType mode, double s
 		if (mode.equals(ThermostatModeType.MANUAL)){
 			bits[7] = false;  // A (MSB)
 			bits[6] = true;   // B
+		} else if (mode.equals(ThermostatModeType.BOOST)){
+			bits[7] = true;   // A (MSB)
+			bits[6] = true;   // B
 		} else
 		{
 			bits[7] = false ;  // A (MSB)

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/JNA.java
Patch:
@@ -62,7 +62,7 @@ public static Method getMethodById(int nativeId) {
 	public enum DataType {
 		HUMIDITY(CLibrary.TELLSTICK_HUMIDITY), TEMPERATURE(CLibrary.TELLSTICK_TEMPERATURE),
 		WINDAVERAGE(CLibrary.TELLSTICK_WINDAVERAGE), WINDDIRECTION(CLibrary.TELLSTICK_WINDDIRECTION),
-		WINDGUST(CLibrary.TELLSTICK_WINDGUST);
+		WINDGUST(CLibrary.TELLSTICK_WINDGUST), RAINRATE(CLibrary.TELLSTICK_RAINRATE), RAINTOTAL(CLibrary.TELLSTICK_RAINTOTAL);
 
 		private int nativeInt;
 

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickActivator.java
Patch:
@@ -14,8 +14,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.Platform;
-
 /**
  * Tellstick activator, starts the JNA connection to Telldus Center.
  * 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanModeCommandClass.java
Patch:
@@ -249,6 +249,7 @@ public SerialMessage getSupportedMessage() {
 	public SerialMessage setValueMessage(int value) {
 
 		if(fanModeTypes.isEmpty()) {
+			logger.warn("NODE {}: requesting fan mode types, set request ignored (try again later)", this.getNode().getNodeId());
 			return this.getSupportedMessage();
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatFanStateCommandClass.java
Patch:
@@ -23,7 +23,6 @@
 import org.openhab.binding.zwave.internal.protocol.ZWaveController;
 import org.openhab.binding.zwave.internal.protocol.ZWaveEndpoint;
 import org.openhab.binding.zwave.internal.protocol.ZWaveNode;
-import org.openhab.binding.zwave.internal.protocol.commandclass.ZWaveThermostatModeCommandClass.ModeType;
 import org.openhab.binding.zwave.internal.protocol.event.ZWaveCommandClassValueEvent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatModeCommandClass.java
Patch:
@@ -252,10 +252,11 @@ public SerialMessage setValueMessage(int value) {
 
 		//if we do not have any mode types yet, get them
 		if(modeTypes.isEmpty()) {
+			logger.warn("NODE {}: requesting mode types, set request ignored (try again later)", this.getNode().getNodeId());
 			return this.getSupportedMessage();
 		}
 
-		if(modeTypes.contains(ModeType.getModeType(value))){
+		if(!modeTypes.contains(ModeType.getModeType(value))){
 			logger.error("NODE {}: Unsupported mode type {}", this.getNode().getNodeId(), value);
 			return null;
 		}

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/JNA.java
Patch:
@@ -62,7 +62,7 @@ public static Method getMethodById(int nativeId) {
 	public enum DataType {
 		HUMIDITY(CLibrary.TELLSTICK_HUMIDITY), TEMPERATURE(CLibrary.TELLSTICK_TEMPERATURE),
 		WINDAVERAGE(CLibrary.TELLSTICK_WINDAVERAGE), WINDDIRECTION(CLibrary.TELLSTICK_WINDDIRECTION),
-		WINDGUST(CLibrary.TELLSTICK_WINDGUST);
+		WINDGUST(CLibrary.TELLSTICK_WINDGUST), RAINRATE(CLibrary.TELLSTICK_RAINRATE), RAINTOTAL(CLibrary.TELLSTICK_RAINTOTAL);
 
 		private int nativeInt;
 

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickActivator.java
Patch:
@@ -14,8 +14,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.Platform;
-
 /**
  * Tellstick activator, starts the JNA connection to Telldus Center.
  * 

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/DateTimeType.java
Patch:
@@ -14,11 +14,12 @@
 import java.util.Date;
 import java.util.Locale;
 
+import org.openhab.core.types.Command;
 import org.openhab.core.types.PrimitiveType;
 import org.openhab.core.types.State;
 
 
-public class DateTimeType implements PrimitiveType, State {
+public class DateTimeType implements PrimitiveType, State, Command {
 	
 	public final static SimpleDateFormat DATE_FORMATTER_WITH_TZ = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssz");
 	public final static SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

File: bundles/io/org.openhab.io.gpio/src/main/java/org/openhab/io/gpio/linux/GPIOLinux.java
Patch:
@@ -200,7 +200,9 @@ public GPIOPin reservePin(Integer pinNumber) throws IOException {
 
 					/* Exports the pin to user space. */
 					Files.write(Paths.get(SYSFS_CLASS_GPIO + "export"), pinNumber.toString().getBytes());
-					
+
+					/* Wait for the export to proceed */
+					Thread.sleep(500);
 					/* Create backend object */
 					pin = new GPIOPinLinux(pinNumber, SYSFS_CLASS_GPIO + "gpio" + pinNumber, defaultDebounceInterval);
 

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -289,7 +289,7 @@ public void execute() {
 							} else if (provider.getBindingType(itemName) == BindingType.ACTUAL
 									&& ((HeatingThermostat) device).isTemperatureActualUpdated()) {
 								eventPublisher.postUpdate(itemName, ((HeatingThermostat) device).getTemperatureActual());
-							} else if (((HeatingThermostat) device).isTemperatureSetpointUpdated()){
+							} else if (((HeatingThermostat) device).isTemperatureSetpointUpdated() && provider.getBindingType(itemName) == null){
 								eventPublisher.postUpdate(itemName, ((HeatingThermostat) device).getTemperatureSetpoint());
 							}
 							break;

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/DateTimeType.java
Patch:
@@ -14,11 +14,12 @@
 import java.util.Date;
 import java.util.Locale;
 
+import org.openhab.core.types.Command;
 import org.openhab.core.types.PrimitiveType;
 import org.openhab.core.types.State;
 
 
-public class DateTimeType implements PrimitiveType, State {
+public class DateTimeType implements PrimitiveType, State, Command {
 	
 	public final static SimpleDateFormat DATE_FORMATTER_WITH_TZ = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssz");
 	public final static SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/MessageHandler.java
Patch:
@@ -134,7 +134,9 @@ protected boolean isDuplicate(Msg msg) {
 				isDuplicate = !updateGroupState(group, hops,
 								GroupMessage.CLEAN);
 			}
-		} catch (IllegalArgumentException | FieldException e) {
+		} catch (IllegalArgumentException e) {
+			logger.error("cannot parse msg: {}", msg, e);			
+		} catch (FieldException e) {
 			logger.error("cannot parse msg: {}", msg, e);
 		}
 		return (isDuplicate);

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/ModemDBBuilder.java
Patch:
@@ -93,7 +93,6 @@ private void logModemDB() {
 				for (Msg m: lrs) {
 					int recordFlags = m.getByte("RecordFlags") & 0xff;
 					String ms = ((recordFlags & (0x1 << 6)) != 0) ? "CTRL" : "RESP";
-					int group = m.getByte("ALLLinkGroup") & 0xff;
 					logger.debug("MDB {}: {} group: {} data1: {} data2: {} data3: {}",
 								db.getKey(), ms, toHex(m.getByte("ALLLinkGroup")),
 									toHex(m.getByte("LinkData1")), toHex(m.getByte("LinkData2")),

File: bundles/io/org.openhab.io.gpio/src/main/java/org/openhab/io/gpio/linux/GPIOLinux.java
Patch:
@@ -200,7 +200,9 @@ public GPIOPin reservePin(Integer pinNumber) throws IOException {
 
 					/* Exports the pin to user space. */
 					Files.write(Paths.get(SYSFS_CLASS_GPIO + "export"), pinNumber.toString().getBytes());
-					
+
+					/* Wait for the export to proceed */
+					Thread.sleep(500);
 					/* Create backend object */
 					pin = new GPIOPinLinux(pinNumber, SYSFS_CLASS_GPIO + "gpio" + pinNumber, defaultDebounceInterval);
 

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/InsteonPLMGenericBindingProvider.java
Patch:
@@ -72,7 +72,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 				logger.error("parameter {} does not have format a=b", params[i]);
 			}
 		}
-		InsteonPLMBindingConfig config = new InsteonPLMBindingConfig(addr, feature, parts[1], args);
+		InsteonPLMBindingConfig config = new InsteonPLMBindingConfig(item.getName(), addr, feature, parts[1], args);
 		addBindingConfig(item, config);
 
 		logger.trace("processing item \"{}\" read from .items file with cfg string {}",

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java
Patch:
@@ -152,7 +152,9 @@ public void processCommand(Driver driver, InsteonPLMBindingConfig c, Command com
 		logger.debug("processing command {} features: {}", command, m_features.size());
 		synchronized(m_features) {
 			for (DeviceFeature i : m_features.values()) {
-				i.handleCommand(c, command);
+				if (i.isReferencedByItem(c.getItemName())) {
+					i.handleCommand(c, command);
+				}
 			}
 		}
 	}

File: bundles/binding/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/CommandType.java
Patch:
@@ -45,7 +45,9 @@ public enum CommandType {
 	REMOTETITLE("remotetitle"),
 	GENRE("genre"),
 	
-	IRCODE("ircode");
+	IRCODE("ircode"),
+	
+	COMMAND("command");
 	
 	/** Represents the player command as it will be used in *.items configuration */
 	String command;

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/InsteonPLMGenericBindingProvider.java
Patch:
@@ -72,7 +72,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 				logger.error("parameter {} does not have format a=b", params[i]);
 			}
 		}
-		InsteonPLMBindingConfig config = new InsteonPLMBindingConfig(addr, feature, parts[1], args);
+		InsteonPLMBindingConfig config = new InsteonPLMBindingConfig(item.getName(), addr, feature, parts[1], args);
 		addBindingConfig(item, config);
 
 		logger.trace("processing item \"{}\" read from .items file with cfg string {}",

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/InsteonDevice.java
Patch:
@@ -152,7 +152,9 @@ public void processCommand(Driver driver, InsteonPLMBindingConfig c, Command com
 		logger.debug("processing command {} features: {}", command, m_features.size());
 		synchronized(m_features) {
 			for (DeviceFeature i : m_features.values()) {
-				i.handleCommand(c, command);
+				if (i.isReferencedByItem(c.getItemName())) {
+					i.handleCommand(c, command);
+				}
 			}
 		}
 	}

File: bundles/binding/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/CommandType.java
Patch:
@@ -45,7 +45,9 @@ public enum CommandType {
 	REMOTETITLE("remotetitle"),
 	GENRE("genre"),
 	
-	IRCODE("ircode");
+	IRCODE("ircode"),
+	
+	COMMAND("command");
 	
 	/** Represents the player command as it will be used in *.items configuration */
 	String command;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveWakeUpCommandClass.java
Patch:
@@ -155,7 +155,6 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 				logger.debug("NODE {}: Wake up interval report, value = {} seconds, targetNodeId = {}", this.getNode().getNodeId(), receivedInterval, targetNodeId);
 
 				this.interval = receivedInterval;
-				logger.debug("NODE {}: Wake up interval set", this.getNode().getNodeId());
 
 				ZWaveWakeUpEvent event = new ZWaveWakeUpEvent(getNode().getNodeId(), WAKE_UP_INTERVAL_REPORT);
 				this.getController().notifyEventListeners(event);
@@ -434,7 +433,7 @@ public void setAwake(boolean isAwake) {
 	 */
 	public SerialMessage setInterval(int interval) {
 		logger.debug("NODE {}: Creating new message for application command WAKE_UP_INTERVAL_SET to {}", this.getNode().getNodeId(), interval);
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Get);
     	byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
     							6, 
 								(byte) getCommandClass().getKey(), 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiLevelSensorCommandClass.java
Patch:
@@ -312,7 +312,7 @@ else if(dynamicDone == false){
 	 * @author Jan-Willem Spuij
 	 * @since 1.3.0
 	 */
-	@XStreamAlias("sensorType")
+	@XStreamAlias("multilevelSensorType")
 	public enum SensorType
 	{
 		TEMPERATURE(1,"Temperature"),
@@ -402,6 +402,7 @@ public String getLabel() {
 	 * Class to hold alarm state
 	 * @author Chris Jackson
 	 */
+	@XStreamAlias("multilevelSensor")
 	private class Sensor {
 		SensorType sensorType;
 		boolean initialised = false;

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/http/HttpUtil.java
Patch:
@@ -196,7 +196,7 @@ public static String executeUrl(String httpMethod, String url, Properties httpHe
 		try {
 			
 			int statusCode = client.executeMethod(method);
-			if (statusCode == HttpStatus.SC_NO_CONTENT) {
+			if (statusCode == HttpStatus.SC_NO_CONTENT || statusCode == HttpStatus.SC_ACCEPTED) {
 				// perfectly fine but we cannot expect any answer...
 				return null;
 			}

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/ModelRepositoryImpl.java
Patch:
@@ -56,6 +56,7 @@ public EObject getModel(String name) {
 					return resource.getContents().get(0);
 				} else {
 					logger.warn("Configuration model '{}' is either empty or cannot be parsed correctly!", name);
+					logger.debug("Errors reported for '{}': {}", name, resource.getErrors());
 					resourceSet.getResources().remove(resource);
 					return null;
 				}

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/http/HttpUtil.java
Patch:
@@ -196,7 +196,7 @@ public static String executeUrl(String httpMethod, String url, Properties httpHe
 		try {
 			
 			int statusCode = client.executeMethod(method);
-			if (statusCode == HttpStatus.SC_NO_CONTENT) {
+			if (statusCode == HttpStatus.SC_NO_CONTENT || statusCode == HttpStatus.SC_ACCEPTED) {
 				// perfectly fine but we cannot expect any answer...
 				return null;
 			}

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/ModelRepositoryImpl.java
Patch:
@@ -56,6 +56,7 @@ public EObject getModel(String name) {
 					return resource.getContents().get(0);
 				} else {
 					logger.warn("Configuration model '{}' is either empty or cannot be parsed correctly!", name);
+					logger.debug("Errors reported for '{}': {}", name, resource.getErrors());
 					resourceSet.getResources().remove(resource);
 					return null;
 				}

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/DateTimeType.java
Patch:
@@ -14,11 +14,12 @@
 import java.util.Date;
 import java.util.Locale;
 
+import org.openhab.core.types.Command;
 import org.openhab.core.types.PrimitiveType;
 import org.openhab.core.types.State;
 
 
-public class DateTimeType implements PrimitiveType, State {
+public class DateTimeType implements PrimitiveType, State, Command {
 	
 	public final static SimpleDateFormat DATE_FORMATTER_WITH_TZ = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssz");
 	public final static SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/ModelRepositoryImpl.java
Patch:
@@ -56,6 +56,7 @@ public EObject getModel(String name) {
 					return resource.getContents().get(0);
 				} else {
 					logger.warn("Configuration model '{}' is either empty or cannot be parsed correctly!", name);
+					logger.debug("Errors reported for '{}': {}", name, resource.getErrors());
 					resourceSet.getResources().remove(resource);
 					return null;
 				}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAssociationCommandClass.java
Patch:
@@ -346,7 +346,7 @@ public void getAllAssociations() {
 	 */
 	public List<Integer> getGroupMembers(int group) {
 		if(configAssociations.get(group) == null) {
-			return null;
+			return new ArrayList<Integer>();
 		}
 		return configAssociations.get(group).getNodes();
 	}

File: bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/BatteryTest.java
Patch:
@@ -44,7 +44,7 @@ public void testBatteryChargeUpdated() {
 		assertTrue("Battery charge should be set to updated "
 				+ "after change to low", battery.isChargeUpdated());
 		battery.setCharge(Charge.LOW);
-		assertFalse("Battery charge should be set to updated "
+		assertFalse("Battery charge should not be set to updated "
 				+ "after setting same charge again", battery.isChargeUpdated());
 		battery.setCharge(Charge.OK);
 		assertTrue("Battery charge should be set to updated "

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -291,7 +291,7 @@ public void execute() {
 							} else if (provider.getBindingType(itemName) == BindingType.ACTUAL
 									&& ((HeatingThermostat) device).isTemperatureActualUpdated()) {
 								eventPublisher.postUpdate(itemName, ((HeatingThermostat) device).getTemperatureActual());
-							} else if (((HeatingThermostat) device).isTemperatureSetpointUpdated()){
+							} else if (((HeatingThermostat) device).isTemperatureSetpointUpdated() && provider.getBindingType(itemName) == null){
 								eventPublisher.postUpdate(itemName, ((HeatingThermostat) device).getTemperatureSetpoint());
 							}
 							break;

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -274,13 +274,14 @@ public void execute() {
 					//all devices have a battery state, so this is type-independent
 					if (provider.getBindingType(itemName) == BindingType.BATTERY && device.isBatteryLowUpdated()) {
 						eventPublisher.postUpdate(itemName, device.getBatteryLow());
-					} else {
+					} else if  (provider.getBindingType(itemName) != BindingType.BATTERY) {
 					switch (device.getType()) {
 						case HeatingThermostatPlus:
 						case HeatingThermostat:
 							if (provider.getBindingType(itemName) == BindingType.VALVE
 									&& ((HeatingThermostat) device).isValvePositionUpdated()) {
 								eventPublisher.postUpdate(itemName, ((HeatingThermostat) device).getValvePosition());
+								break;
 							}
 							//omitted break, fall through
 						case WallMountedThermostat: // and also HeatingThermostat

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java
Patch:
@@ -423,7 +423,7 @@ private void nextHealStage(HealNode healing) {
 
 			// Since the GETNEIGHBORS state fails often, it seems better to
 			// continue with the heal than to abort here.
-			if (healing.state == HealState.GETNEIGHBORS) {
+			if (healing.state == HealState.UPDATENEIGHBORS) {
 				healing.state = healing.stateNext;
 				healing.retryCnt = 0;
 				logger.debug("NODE {}: Heal - continuing to state {}", healing.nodeId, healing.stateNext);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java
Patch:
@@ -470,7 +470,7 @@ public void disconnect() {
 	public void enqueue(SerialMessage serialMessage) {
 		// First try and get the node
 		// If we're sending to a node, then this obviously isn't to the controller, and we should
-		// queue anything to a battery node!
+		// queue anything to a battery node (ie a node supporting the WAKEUP class)!
     	ZWaveNode node = this.getNode(serialMessage.getMessageNode());
     	if (node != null) {
 	    	// Keep track of the number of packets sent to this device
@@ -641,7 +641,7 @@ public void checkForDeadOrSleepingNodes(){
 //				notifyEventListeners(event);
 //			}
 
-			// If we're done, or dead, then we consider this node is done (!)
+			// If we're done, or dead, or not listening, then we consider this node is done (!)
 			if(entry.getValue().getNodeStage() == NodeStage.DONE || entry.getValue().isDead() == true
 					 || (!entry.getValue().isListening() && !entry.getValue().isFrequentlyListening())) {
 				completeCount++;

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -274,13 +274,14 @@ public void execute() {
 					//all devices have a battery state, so this is type-independent
 					if (provider.getBindingType(itemName) == BindingType.BATTERY && device.isBatteryLowUpdated()) {
 						eventPublisher.postUpdate(itemName, device.getBatteryLow());
-					} else {
+					} else if  (provider.getBindingType(itemName) != BindingType.BATTERY) {
 					switch (device.getType()) {
 						case HeatingThermostatPlus:
 						case HeatingThermostat:
 							if (provider.getBindingType(itemName) == BindingType.VALVE
 									&& ((HeatingThermostat) device).isValvePositionUpdated()) {
 								eventPublisher.postUpdate(itemName, ((HeatingThermostat) device).getValvePosition());
+								break;
 							}
 							//omitted break, fall through
 						case WallMountedThermostat: // and also HeatingThermostat

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -274,13 +274,14 @@ public void execute() {
 					//all devices have a battery state, so this is type-independent
 					if (provider.getBindingType(itemName) == BindingType.BATTERY && device.isBatteryLowUpdated()) {
 						eventPublisher.postUpdate(itemName, device.getBatteryLow());
-					} else {
+					} else if  (provider.getBindingType(itemName) != BindingType.BATTERY) {
 					switch (device.getType()) {
 						case HeatingThermostatPlus:
 						case HeatingThermostat:
 							if (provider.getBindingType(itemName) == BindingType.VALVE
 									&& ((HeatingThermostat) device).isValvePositionUpdated()) {
 								eventPublisher.postUpdate(itemName, ((HeatingThermostat) device).getValvePosition());
+								break;
 							}
 							//omitted break, fall through
 						case WallMountedThermostat: // and also HeatingThermostat

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/DeviceTypeLoader.java
Patch:
@@ -142,7 +142,7 @@ private void logDeviceTypes() {
 	 * Singleton instance function, creates DeviceTypeLoader
 	 * @return DeviceTypeLoader singleton reference
 	 */
-	public static DeviceTypeLoader s_instance() {
+	public static synchronized DeviceTypeLoader s_instance() {
 		if (s_deviceTypeLoader == null) {
 			s_deviceTypeLoader = new DeviceTypeLoader();
 			InputStream input = DeviceTypeLoader.class.getResourceAsStream("/device_types.xml");

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/PollHandler.java
Patch:
@@ -21,7 +21,7 @@
  * @since 1.5.0
  */
 public abstract class PollHandler {
-	private static final Logger logger = LoggerFactory.getLogger(MessageDispatcher.class);		
+	private static final Logger logger = LoggerFactory.getLogger(PollHandler.class);		
 	DeviceFeature m_feature = null;
 	/**
 	 * Constructor

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/RequestQueueManager.java
Patch:
@@ -120,7 +120,7 @@ public int compareTo(RequestQueue a) {
 			return (int)(m_expirationTime - a.m_expirationTime);
 		}
 	}
-	public static RequestQueueManager s_instance() {
+	public static synchronized RequestQueueManager s_instance() {
 		if (s_instance == null) {
 			s_instance = new RequestQueueManager();
 		}

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/Poller.java
Patch:
@@ -213,7 +213,7 @@ public String toString() {
 		}
 	}
 	
-	public static Poller s_instance() {
+	public static synchronized Poller s_instance() {
 		if (s_poller == null) {
 			s_poller = new Poller();
 		}

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -423,7 +423,7 @@ else if (!translatorDateTime.isValidField(DPTXlatorDateTime.YEAR) && translatorD
 					// Pure time format, no date information
 					cal.clear();
 					cal.set(Calendar.HOUR_OF_DAY, translatorDateTime.getHour());
-					cal.set(Calendar.MINUTE, translatorDateTime.getHour());
+					cal.set(Calendar.MINUTE, translatorDateTime.getMinute());
 					cal.set(Calendar.SECOND, translatorDateTime.getSecond());
 					value=DateTimeType.DATE_FORMATTER.format(cal.getTime());
 					return DateTimeType.valueOf(value);

File: bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java
Patch:
@@ -13,7 +13,6 @@
 
 import org.apache.commons.codec.binary.Base64;
 import org.junit.Test;
-
 import org.junit.Before;
 import org.openhab.binding.maxcube.internal.Utils;
 
@@ -29,7 +28,7 @@ public class S_CommandTest {
 	
 	@Test
 	public void PrefixTest() {
-		S_Command scmd = new S_Command("00FE30", 1, 20.0);
+		S_Command scmd = new S_Command("00FE30", 1, ThermostatModeType.MANUAL, 20.0);
 		
 		String commandStr = scmd.getCommandString();
 		
@@ -41,7 +40,7 @@ public void PrefixTest() {
 	
 	@Test
 	public void BaseCommandTest() {
-		S_Command scmd = new S_Command("00FE30", 1, 20.0);
+		S_Command scmd = new S_Command("00FE30", 1, ThermostatModeType.MANUAL, 20.0);
 		
 		String commandStr = scmd.getCommandString();
 		

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Message.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.maxcube.internal.message;
 
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
 * Base message received by the MAX!Cube protocol. 
@@ -19,6 +20,7 @@
 public abstract class Message {
 
 	public static final String DELIMETER = ",";
+	protected final static Logger logger = LoggerFactory.getLogger(Device.class);
 	
 	private String raw = null;
 	

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/MessageType.java
Patch:
@@ -15,5 +15,5 @@
 * @since 1.4.0
 */
 public enum MessageType {
-	H, M, C, L
+	H, M, C, L, S
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBinding.java
Patch:
@@ -115,7 +115,7 @@ protected void execute() {
 
                         State state = null;
                         switch (measureType) {
-                            case TEMPERATURE: case CO2: case HUMIDITY: case NOISE: case PRESSURE:
+                            case TEMPERATURE: case CO2: case HUMIDITY: case NOISE: case PRESSURE: case RAIN:
                                     final String requestKey = createKey(deviceId, moduleId);
                                     state = new DecimalType(deviceMeasureValueMap.get(requestKey).get(measureType.getMeasure()));
                                     break;
@@ -311,7 +311,7 @@ private Collection<MeasurementRequest> createMeasurementRequests() {
                 final String requestKey = createKey(deviceId, moduleId);
 
                 switch (measureType) {
-                    case TEMPERATURE: case CO2: case HUMIDITY: case NOISE: case PRESSURE:
+                    case TEMPERATURE: case CO2: case HUMIDITY: case NOISE: case PRESSURE: case RAIN:
                         OAuthCredentials oauthCredentials = getOAuthCredentials(userid);
                         if (oauthCredentials != null) {
                             if (!requests.containsKey(requestKey)) {

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoGenericBindingProvider.java
Patch:
@@ -42,6 +42,7 @@
  * <code>{ netatmo="00:00:00:00:00:00#00:00:00:00:00:00#Temperature" }</code></li>
  * <li><code>{ netatmo="00:00:00:00:00:00#00:00:00:00:00:00#Humidity" }</code></li>
  * <li><code>{ netatmo="00:00:00:00:00:00#00:00:00:00:00:00#Co2" }</code></li>
+ * <li><code>{ netatmo="00:00:00:00:00:00#00:00:00:00:00:00#Rain" }</code></li>
  * </ul>
  * </li> </ul>
  * 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoMeasureType.java
Patch:
@@ -23,6 +23,7 @@ public enum NetatmoMeasureType {
 	HUMIDITY("Humidity"),
 	NOISE("Noise"),
 	PRESSURE("Pressure"),
+	RAIN("Rain"),
 	WIFISTATUS("WifiStatus"),
 	ALTITUDE("Altitude"),
 	LATITUDE("Latitude"),

File: bundles/binding/org.openhab.binding.davis/src/main/java/org/openhab/binding/davis/datatypes/DavisValueType.java
Patch:
@@ -450,7 +450,7 @@ public enum DavisValueType {
 	UV {
 		{
 			key = "uv";
-			data_type = DataTypeUV.class;
+			data_type = DataTypeNumber.class;
 			command = DavisCommandType.LOOP;
 			data_offset = 43;
 			data_size = 1;	

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/ModelRepositoryImpl.java
Patch:
@@ -56,6 +56,7 @@ public EObject getModel(String name) {
 					return resource.getContents().get(0);
 				} else {
 					logger.warn("Configuration model '{}' is either empty or cannot be parsed correctly!", name);
+					logger.debug("Errors reported for '{}': {}", name, resource.getErrors());
 					resourceSet.getResources().remove(resource);
 					return null;
 				}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java
Patch:
@@ -286,7 +286,7 @@ public boolean rescheduleHeal() {
 			healNode(node.getNodeId());
 		}
 
-		if (healNodes.size() == 0)
+		if (healNodes.size() == 0) {
 			return false;
 		}
 

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/PollHandler.java
Patch:
@@ -21,7 +21,7 @@
  * @since 1.5.0
  */
 public abstract class PollHandler {
-	private static final Logger logger = LoggerFactory.getLogger(MessageDispatcher.class);		
+	private static final Logger logger = LoggerFactory.getLogger(PollHandler.class);		
 	DeviceFeature m_feature = null;
 	/**
 	 * Constructor

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -423,7 +423,7 @@ else if (!translatorDateTime.isValidField(DPTXlatorDateTime.YEAR) && translatorD
 					// Pure time format, no date information
 					cal.clear();
 					cal.set(Calendar.HOUR_OF_DAY, translatorDateTime.getHour());
-					cal.set(Calendar.MINUTE, translatorDateTime.getHour());
+					cal.set(Calendar.MINUTE, translatorDateTime.getMinute());
 					cal.set(Calendar.SECOND, translatorDateTime.getSecond());
 					value=DateTimeType.DATE_FORMATTER.format(cal.getTime());
 					return DateTimeType.valueOf(value);

File: bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java
Patch:
@@ -13,7 +13,6 @@
 
 import org.apache.commons.codec.binary.Base64;
 import org.junit.Test;
-
 import org.junit.Before;
 import org.openhab.binding.maxcube.internal.Utils;
 
@@ -29,7 +28,7 @@ public class S_CommandTest {
 	
 	@Test
 	public void PrefixTest() {
-		S_Command scmd = new S_Command("00FE30", 1, 20.0);
+		S_Command scmd = new S_Command("00FE30", 1, ThermostatModeType.MANUAL, 20.0);
 		
 		String commandStr = scmd.getCommandString();
 		
@@ -41,7 +40,7 @@ public void PrefixTest() {
 	
 	@Test
 	public void BaseCommandTest() {
-		S_Command scmd = new S_Command("00FE30", 1, 20.0);
+		S_Command scmd = new S_Command("00FE30", 1, ThermostatModeType.MANUAL, 20.0);
 		
 		String commandStr = scmd.getCommandString();
 		

File: bundles/persistence/org.openhab.persistence.sense/src/main/java/org/openhab/persistence/sense/internal/SenseService.java
Patch:
@@ -41,7 +41,7 @@ public class SenseService implements PersistenceService, ManagedService {
 	private final static String DEFAULT_EVENT_URL = "http://api.sen.se/events/?sense_key=";
 
 	private boolean initialized = false;
-	
+
 	/**
 	 * @{inheritDoc}
 	 */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java
Patch:
@@ -331,7 +331,8 @@ public void execute() {
 
 			// We now have the oldest node that we've heard from - ping it!
 			// If we've actually received from this node recently, the don't bother to ping
-			if (oldestNode != null && oldestNode.getLastReceived().getTime() < System.currentTimeMillis() - pollPeriod) {
+			if (oldestNode != null && oldestNode.getLastReceived() != null &&
+					oldestNode.getLastReceived().getTime() < System.currentTimeMillis() - pollPeriod) {
 				logger.debug("NODE {}: Sending periodic PING.", oldestNode.getNodeId());
 
 				// Reset the resend count - also resets the lastUpdate timer

File: bundles/persistence/org.openhab.persistence.sense/src/main/java/org/openhab/persistence/sense/internal/SenseService.java
Patch:
@@ -41,7 +41,7 @@ public class SenseService implements PersistenceService, ManagedService {
 	private final static String DEFAULT_EVENT_URL = "http://api.sen.se/events/?sense_key=";
 
 	private boolean initialized = false;
-	
+
 	/**
 	 * @{inheritDoc}
 	 */

File: bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java
Patch:
@@ -13,7 +13,6 @@
 
 import org.apache.commons.codec.binary.Base64;
 import org.junit.Test;
-
 import org.junit.Before;
 import org.openhab.binding.maxcube.internal.Utils;
 
@@ -29,7 +28,7 @@ public class S_CommandTest {
 	
 	@Test
 	public void PrefixTest() {
-		S_Command scmd = new S_Command("00FE30", 1, 20.0);
+		S_Command scmd = new S_Command("00FE30", 1, ThermostatModeType.MANUAL, 20.0);
 		
 		String commandStr = scmd.getCommandString();
 		
@@ -41,7 +40,7 @@ public void PrefixTest() {
 	
 	@Test
 	public void BaseCommandTest() {
-		S_Command scmd = new S_Command("00FE30", 1, 20.0);
+		S_Command scmd = new S_Command("00FE30", 1, ThermostatModeType.MANUAL, 20.0);
 		
 		String commandStr = scmd.getCommandString();
 		

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -423,7 +423,7 @@ else if (!translatorDateTime.isValidField(DPTXlatorDateTime.YEAR) && translatorD
 					// Pure time format, no date information
 					cal.clear();
 					cal.set(Calendar.HOUR_OF_DAY, translatorDateTime.getHour());
-					cal.set(Calendar.MINUTE, translatorDateTime.getHour());
+					cal.set(Calendar.MINUTE, translatorDateTime.getMinute());
 					cal.set(Calendar.SECOND, translatorDateTime.getSecond());
 					value=DateTimeType.DATE_FORMATTER.format(cal.getTime());
 					return DateTimeType.valueOf(value);

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -274,8 +274,7 @@ public void execute() {
 					//all devices have a battery state, so this is type-independent
 					if (provider.getBindingType(itemName) == BindingType.BATTERY && device.isBatteryLowUpdated()) {
 						eventPublisher.postUpdate(itemName, device.getBatteryLow());
-					} 
-					
+					} else {
 					switch (device.getType()) {
 						case HeatingThermostatPlus:
 						case HeatingThermostat:
@@ -303,6 +302,7 @@ public void execute() {
 						default:
 							// no further devices supported yet
 					}
+					}
 				}
 			}
 		} catch (UnknownHostException e) {

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -274,8 +274,7 @@ public void execute() {
 					//all devices have a battery state, so this is type-independent
 					if (provider.getBindingType(itemName) == BindingType.BATTERY && device.isBatteryLowUpdated()) {
 						eventPublisher.postUpdate(itemName, device.getBatteryLow());
-					} 
-					
+					} else {
 					switch (device.getType()) {
 						case HeatingThermostatPlus:
 						case HeatingThermostat:
@@ -303,6 +302,7 @@ public void execute() {
 						default:
 							// no further devices supported yet
 					}
+					}
 				}
 			}
 		} catch (UnknownHostException e) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -270,11 +270,10 @@ public void advanceNodeStage(SerialMessageClass eventClass) {
 				logger.debug("NODE {}: Node advancer: PROTOINFO - send IdentifyNode", node.getNodeId());
 				addToQueue(new IdentifyNodeMessageClass().doRequest(node.getNodeId()));
 				break;
-				
+
 			case WAIT:
 				// If the node is listening, then we progress.
 				// If it's not listening, we'll wait a while before progressing with initialisation.
-				// TODO: How to progress? Wait for wakeup or some other message?
 				if(node.isListening() == true || node.isFrequentlyListening() == true) {
 					break;
 				}
@@ -707,7 +706,7 @@ public void ZWaveIncomingEvent(ZWaveEvent event) {
 				break;
 			}
 		} else if (event instanceof ZWaveWakeUpCommandClass.ZWaveWakeUpEvent) {
-			// WAKEUP EVENT
+			// WAKEUP EVENT - only act if this is a wakeup notification
 			if (((ZWaveWakeUpCommandClass.ZWaveWakeUpEvent) event).getEvent() != ZWaveWakeUpCommandClass.WAKE_UP_NOTIFICATION) {
 				return;
 			}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ZWaveCommandProcessor.java
Patch:
@@ -52,6 +52,8 @@ public boolean isTransactionComplete() {
 	 * @param incomingMessage The response from the controller
 	 */
 	protected void checkTransactionComplete(SerialMessage lastSentMessage, SerialMessage incomingMessage) {
+		logger.debug("Sent message {}", lastSentMessage.toString());
+		logger.debug("Recv message {}", incomingMessage.toString());
 		logger.debug("Checking transaction complete: class={}, expected={}, cancelled={}", incomingMessage.getMessageClass(), lastSentMessage.getExpectedReply(), incomingMessage.isTransActionCanceled());
 		if (incomingMessage.getMessageClass() == lastSentMessage.getExpectedReply() && !incomingMessage.isTransActionCanceled()) {
 			transactionComplete = true;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java
Patch:
@@ -59,7 +59,7 @@ public boolean handleRequest(ZWaveController zController, SerialMessage lastSent
 
 		logger.debug("NODE {}: Got AssignReturnRoute request.", nodeId);
 		if(incomingMessage.getMessagePayloadByte(1) != 0x00) {
-			logger.error("NODE {}: Assign return routes failed with error 0x{}.", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));
+			logger.error("NODE {}: Assign return routes failed with error 0x{}.", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));
 			zController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,
 					ZWaveNetworkEvent.State.Failure));
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java
Patch:
@@ -59,7 +59,7 @@ public boolean handleRequest(ZWaveController zController, SerialMessage lastSent
 
 		logger.debug("NODE {}: Got DeleteReturnRoute request.", nodeId);
 		if(incomingMessage.getMessagePayloadByte(1) != 0x00) {
-			logger.error("NODE {}: Delete return routes failed with error 0x{}.", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));
+			logger.error("NODE {}: Delete return routes failed with error 0x{}.", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));
 
 			zController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.DeleteReturnRoute, nodeId,
 					ZWaveNetworkEvent.State.Failure));

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -423,7 +423,7 @@ else if (!translatorDateTime.isValidField(DPTXlatorDateTime.YEAR) && translatorD
 					// Pure time format, no date information
 					cal.clear();
 					cal.set(Calendar.HOUR_OF_DAY, translatorDateTime.getHour());
-					cal.set(Calendar.MINUTE, translatorDateTime.getHour());
+					cal.set(Calendar.MINUTE, translatorDateTime.getMinute());
 					cal.set(Calendar.SECOND, translatorDateTime.getSecond());
 					value=DateTimeType.DATE_FORMATTER.format(cal.getTime());
 					return DateTimeType.valueOf(value);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java
Patch:
@@ -45,7 +45,7 @@ public boolean handleResponse(ZWaveController zController, SerialMessage lastSen
 		if(incomingMessage.getMessagePayloadByte(0) != 0x00) {
 			logger.debug("NODE {}: DeleteReturnRoute command in progress.", nodeId);
 		} else {
-			logger.error("NODE {}: DeleteReturnRoute command failed.");
+			logger.error("NODE {}: DeleteReturnRoute command failed.", nodeId);
 			zController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.DeleteReturnRoute, nodeId,
 					ZWaveNetworkEvent.State.Failure));
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java
Patch:
@@ -59,7 +59,7 @@ public boolean handleRequest(ZWaveController zController, SerialMessage lastSent
 
 		logger.debug("NODE {}: Got DeleteReturnRoute request.", nodeId);
 		if(incomingMessage.getMessagePayloadByte(1) != 0x00) {
-			logger.error("NODE {}: Delete return routes failed with error 0x{}.", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));
+			logger.error("NODE {}: Delete return routes failed with error 0x{}.", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));
 
 			zController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.DeleteReturnRoute, nodeId,
 					ZWaveNetworkEvent.State.Failure));

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/DeleteReturnRouteMessageClass.java
Patch:
@@ -59,7 +59,7 @@ public boolean handleRequest(ZWaveController zController, SerialMessage lastSent
 
 		logger.debug("NODE {}: Got DeleteReturnRoute request.", nodeId);
 		if(incomingMessage.getMessagePayloadByte(1) != 0x00) {
-			logger.error("NODE {}: Delete return routes failed with error 0x{}.", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));
+			logger.error("NODE {}: Delete return routes failed with error 0x{}.", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));
 
 			zController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.DeleteReturnRoute, nodeId,
 					ZWaveNetworkEvent.State.Failure));

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java
Patch:
@@ -59,7 +59,7 @@ public boolean handleRequest(ZWaveController zController, SerialMessage lastSent
 
 		logger.debug("NODE {}: Got AssignReturnRoute request.", nodeId);
 		if(incomingMessage.getMessagePayloadByte(1) != 0x00) {
-			logger.error("NODE {}: Assign return routes failed with error 0x{}.", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));
+			logger.error("NODE {}: Assign return routes failed with error 0x{}.", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));
 			zController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,
 					ZWaveNetworkEvent.State.Failure));
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java
Patch:
@@ -59,7 +59,7 @@ public boolean handleRequest(ZWaveController zController, SerialMessage lastSent
 
 		logger.debug("NODE {}: Got AssignReturnRoute request.", nodeId);
 		if(incomingMessage.getMessagePayloadByte(1) != 0x00) {
-			logger.error("NODE {}: Assign return routes failed with error 0x{}.", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(0)));
+			logger.error("NODE {}: Assign return routes failed with error 0x{}.", nodeId, Integer.toHexString(incomingMessage.getMessagePayloadByte(1)));
 			zController.notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssignReturnRoute, nodeId,
 					ZWaveNetworkEvent.State.Failure));
 		}

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBinding.java
Patch:
@@ -115,7 +115,7 @@ protected void execute() {
 
                         State state = null;
                         switch (measureType) {
-                            case TEMPERATURE: case CO2: case HUMIDITY: case NOISE: case PRESSURE:
+                            case TEMPERATURE: case CO2: case HUMIDITY: case NOISE: case PRESSURE: case RAIN:
                                     final String requestKey = createKey(deviceId, moduleId);
                                     state = new DecimalType(deviceMeasureValueMap.get(requestKey).get(measureType.getMeasure()));
                                     break;
@@ -311,7 +311,7 @@ private Collection<MeasurementRequest> createMeasurementRequests() {
                 final String requestKey = createKey(deviceId, moduleId);
 
                 switch (measureType) {
-                    case TEMPERATURE: case CO2: case HUMIDITY: case NOISE: case PRESSURE:
+                    case TEMPERATURE: case CO2: case HUMIDITY: case NOISE: case PRESSURE: case RAIN:
                         OAuthCredentials oauthCredentials = getOAuthCredentials(userid);
                         if (oauthCredentials != null) {
                             if (!requests.containsKey(requestKey)) {

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoGenericBindingProvider.java
Patch:
@@ -42,6 +42,7 @@
  * <code>{ netatmo="00:00:00:00:00:00#00:00:00:00:00:00#Temperature" }</code></li>
  * <li><code>{ netatmo="00:00:00:00:00:00#00:00:00:00:00:00#Humidity" }</code></li>
  * <li><code>{ netatmo="00:00:00:00:00:00#00:00:00:00:00:00#Co2" }</code></li>
+ * <li><code>{ netatmo="00:00:00:00:00:00#00:00:00:00:00:00#Rain" }</code></li>
  * </ul>
  * </li> </ul>
  * 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoMeasureType.java
Patch:
@@ -23,6 +23,7 @@ public enum NetatmoMeasureType {
 	HUMIDITY("Humidity"),
 	NOISE("Noise"),
 	PRESSURE("Pressure"),
+	RAIN("Rain"),
 	WIFISTATUS("WifiStatus"),
 	ALTITUDE("Altitude"),
 	LATITUDE("Latitude"),

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/listeners/ResourceStateChangeListener.java
Patch:
@@ -50,7 +50,7 @@ abstract public class ResourceStateChangeListener {
 	
 	private Set<String> relevantItems = null;
 	private StateChangeListener stateChangeListener;
-	private GeneralBroadcaster broadcaster;
+	protected GeneralBroadcaster broadcaster;
 
 	public ResourceStateChangeListener(){
 		
@@ -79,7 +79,7 @@ public void registerItems(){
 	        broadcaster.getBroadcasterConfig().getBroadcasterCache().configure(broadcaster.getBroadcasterConfig());
 	        broadcaster.getBroadcasterConfig().getBroadcasterCache().start();
 		
-		broadcaster.getBroadcasterConfig().addFilter(new PerRequestBroadcastFilter() {
+	        broadcaster.getBroadcasterConfig().addFilter(new PerRequestBroadcastFilter() {
 			
 			@Override
 			public BroadcastAction filter(Object originalMessage, Object message) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java
Patch:
@@ -424,7 +424,7 @@ private void nextHealStage(HealNode healing) {
 
 			// Since the GETNEIGHBORS state fails often, it seems better to
 			// continue with the heal than to abort here.
-			if (healing.state == HealState.GETNEIGHBORS) {
+			if (healing.state == HealState.UPDATENEIGHBORS) {
 				healing.state = healing.stateNext;
 				logger.debug("NODE {}: Heal - continuing to state {}", healing.nodeId, healing.stateNext);
 			} else {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiLevelSensorCommandClass.java
Patch:
@@ -150,7 +150,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 			try {
 				BigDecimal value = extractValue(serialMessage.getMessagePayload(), offset + 2);
 
-				logger.debug("NODE %d: Sensor Value = ({})", this.getNode().getNodeId(), value);
+				logger.debug("NODE {}: Sensor Value = {}", this.getNode().getNodeId(), value);
 				
 				ZWaveMultiLevelSensorValueEvent zEvent = new ZWaveMultiLevelSensorValueEvent(this.getNode().getNodeId(), endpoint, sensorType, sensorScale, value);
 				this.getController().notifyEventListeners(zEvent);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiLevelSensorCommandClass.java
Patch:
@@ -150,7 +150,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 			try {
 				BigDecimal value = extractValue(serialMessage.getMessagePayload(), offset + 2);
 
-				logger.debug("NODE %d: Sensor Value = ({})", this.getNode().getNodeId(), value);
+				logger.debug("NODE {}: Sensor Value = {}", this.getNode().getNodeId(), value);
 				
 				ZWaveMultiLevelSensorValueEvent zEvent = new ZWaveMultiLevelSensorValueEvent(this.getNode().getNodeId(), endpoint, sensorType, sensorScale, value);
 				this.getController().notifyEventListeners(zEvent);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java
Patch:
@@ -400,6 +400,8 @@ public void execute() {
 	 *            The node on which to perform the heal
 	 */
 	private void nextHealStage(HealNode healing) {
+		logger.debug("NODE {}: Heal advancing - state {}, retries {}", healing.state, healing.retryCnt);
+
 		// Don't do anything if it's failed already
 		if (healing.state == HealState.FAILED) {
 			return;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java
Patch:
@@ -370,6 +370,8 @@ public void execute() {
 	 *            The node on which to perform the heal
 	 */
 	private void nextHealStage(HealNode healing) {
+		logger.debug("NODE {}: Heal advancing - state {}, retries {}", healing.state, healing.retryCnt);
+
 		// Don't do anything if it's failed already
 		if (healing.state == HealState.FAILED) {
 			return;

File: bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java
Patch:
@@ -13,7 +13,6 @@
 
 import org.apache.commons.codec.binary.Base64;
 import org.junit.Test;
-
 import org.junit.Before;
 import org.openhab.binding.maxcube.internal.Utils;
 
@@ -29,7 +28,7 @@ public class S_CommandTest {
 	
 	@Test
 	public void PrefixTest() {
-		S_Command scmd = new S_Command("00FE30", 1, 20.0);
+		S_Command scmd = new S_Command("00FE30", 1, ThermostatModeType.MANUAL, 20.0);
 		
 		String commandStr = scmd.getCommandString();
 		
@@ -41,7 +40,7 @@ public void PrefixTest() {
 	
 	@Test
 	public void BaseCommandTest() {
-		S_Command scmd = new S_Command("00FE30", 1, 20.0);
+		S_Command scmd = new S_Command("00FE30", 1, ThermostatModeType.MANUAL, 20.0);
 		
 		String commandStr = scmd.getCommandString();
 		

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -352,7 +352,7 @@ public void internalReceiveCommand(String itemName, Command command) {
 					decimalType = OnOffType.ON.equals(command) ? DEFAULT_ON_TEMPERATURE : DEFAULT_OFF_TEMPERATURE;
 				}
 
-				S_Command cmd = new S_Command(rfAddress, device.getRoomId(), decimalType.doubleValue());
+				S_Command cmd = new S_Command(rfAddress, device.getRoomId(), ((HeatingThermostat) device).getMode(), decimalType.doubleValue());
 				commandString = cmd.getCommandString();
 			} else if (command instanceof StringType) {
 				String commandContent = command.toString().trim().toUpperCase();

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoMeasureType.java
Patch:
@@ -23,6 +23,7 @@ public enum NetatmoMeasureType {
 	HUMIDITY("Humidity"),
 	NOISE("Noise"),
 	PRESSURE("Pressure"),
+	RAIN("Rain"),
 	WIFISTATUS("WifiStatus"),
 	ALTITUDE("Altitude"),
 	LATITUDE("Latitude"),

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/listeners/ResourceStateChangeListener.java
Patch:
@@ -50,7 +50,7 @@ abstract public class ResourceStateChangeListener {
 	
 	private Set<String> relevantItems = null;
 	private StateChangeListener stateChangeListener;
-	private GeneralBroadcaster broadcaster;
+	protected GeneralBroadcaster broadcaster;
 
 	public ResourceStateChangeListener(){
 		
@@ -79,7 +79,7 @@ public void registerItems(){
 	        broadcaster.getBroadcasterConfig().getBroadcasterCache().configure(broadcaster.getBroadcasterConfig());
 	        broadcaster.getBroadcasterConfig().getBroadcasterCache().start();
 		
-		broadcaster.getBroadcasterConfig().addFilter(new PerRequestBroadcastFilter() {
+	        broadcaster.getBroadcasterConfig().addFilter(new PerRequestBroadcastFilter() {
 			
 			@Override
 			public BroadcastAction filter(Object originalMessage, Object message) {

File: bundles/config/org.openhab.config.core/src/main/java/org/openhab/config/core/ConfigDispatcher.java
Patch:
@@ -70,7 +70,7 @@
  * @author Thomas.Eichstaedt-Engelen
  * @since 0.3.0
  */
-public class ConfigDispatcher {
+public class ConfigDispatcher implements ManagedService {
 
 	private static final Logger logger = LoggerFactory.getLogger(ConfigDispatcher.class);
 

File: bundles/binding/org.openhab.binding.fritzaha/src/main/java/org/openhab/binding/fritzaha/internal/FritzahaGenericBindingProvider.java
Patch:
@@ -87,6 +87,8 @@ public void processBindingConfiguration(String context, Item item, String bindin
 					config = new FritzahaWebserviceMeter(configParts[0], configParts[1], MeterType.POWER);
 				} else if ("energy".equalsIgnoreCase(configParts[2])) {
 					config = new FritzahaWebserviceMeter(configParts[0], configParts[1], MeterType.ENERGY);
+				} else if ("temperature".equalsIgnoreCase(configParts[2])) {
+					config = new FritzahaWebserviceMeter(configParts[0], configParts[1], MeterType.TEMPERATURE);
 				} else {
 					logger.warn("Could not configure item " + item + " - Unsupported meter type for webservice");
 					return;

File: bundles/binding/org.openhab.binding.fritzaha/src/main/java/org/openhab/binding/fritzaha/internal/hardware/interfaces/FritzahaOutletMeter.java
Patch:
@@ -24,7 +24,7 @@ public interface FritzahaOutletMeter extends FritzahaDevice {
 	 * @since 1.3.0
 	 */
 	public static enum MeterType {
-		VOLTAGE, CURRENT, POWER, ENERGY;
+		VOLTAGE, CURRENT, POWER, ENERGY, TEMPERATURE;
 	};
 
 	public static enum TimeDef {

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/DeviceTypeLoader.java
Patch:
@@ -142,7 +142,7 @@ private void logDeviceTypes() {
 	 * Singleton instance function, creates DeviceTypeLoader
 	 * @return DeviceTypeLoader singleton reference
 	 */
-	public static DeviceTypeLoader s_instance() {
+	public static synchronized DeviceTypeLoader s_instance() {
 		if (s_deviceTypeLoader == null) {
 			s_deviceTypeLoader = new DeviceTypeLoader();
 			InputStream input = DeviceTypeLoader.class.getResourceAsStream("/device_types.xml");

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/RequestQueueManager.java
Patch:
@@ -120,7 +120,7 @@ public int compareTo(RequestQueue a) {
 			return (int)(m_expirationTime - a.m_expirationTime);
 		}
 	}
-	public static RequestQueueManager s_instance() {
+	public static synchronized RequestQueueManager s_instance() {
 		if (s_instance == null) {
 			s_instance = new RequestQueueManager();
 		}

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/Poller.java
Patch:
@@ -213,7 +213,7 @@ public String toString() {
 		}
 	}
 	
-	public static Poller s_instance() {
+	public static synchronized Poller s_instance() {
 		if (s_poller == null) {
 			s_poller = new Poller();
 		}

File: bundles/binding/org.openhab.binding.knx.test/src/test/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapperTest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.knx.internal.config;
+package org.openhab.binding.knx.internal.dpt;
 
 import static org.junit.Assert.*;
 

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Message.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.maxcube.internal.message;
 
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
 * Base message received by the MAX!Cube protocol. 
@@ -19,6 +20,7 @@
 public abstract class Message {
 
 	public static final String DELIMETER = ",";
+	protected final static Logger logger = LoggerFactory.getLogger(Device.class);
 	
 	private String raw = null;
 	

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/MessageType.java
Patch:
@@ -15,5 +15,5 @@
 * @since 1.4.0
 */
 public enum MessageType {
-	H, M, C, L
+	H, M, C, L, S
 }
\ No newline at end of file

File: bundles/config/org.openhab.config.core/src/main/java/org/openhab/config/core/ConfigDispatcher.java
Patch:
@@ -70,7 +70,7 @@
  * @author Thomas.Eichstaedt-Engelen
  * @since 0.3.0
  */
-public class ConfigDispatcher {
+public class ConfigDispatcher implements ManagedService {
 
 	private static final Logger logger = LoggerFactory.getLogger(ConfigDispatcher.class);
 

File: bundles/config/org.openhab.config.core/src/main/java/org/openhab/config/core/ConfigDispatcher.java
Patch:
@@ -70,7 +70,7 @@
  * @author Thomas.Eichstaedt-Engelen
  * @since 0.3.0
  */
-public class ConfigDispatcher {
+public class ConfigDispatcher implements ManagedService {
 
 	private static final Logger logger = LoggerFactory.getLogger(ConfigDispatcher.class);
 

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickBinding.java
Patch:
@@ -199,7 +199,7 @@ public void onRequest(TellstickDeviceEvent newDevices) {
 	private void handleDeviceEvent(TellstickDeviceEvent event) {
 		TellstickDevice device = event.getDevice();
 		controller.setLastSend(System.currentTimeMillis());
-		logger.debug("Got deviceEvent for " + device + " name:" + device + " method" + event.getMethod());
+		logger.debug("Got deviceEvent for " + device + " name:" + device + " method " + event.getMethod());
 		if (device != null) {
 			State cmd = resolveCommand(event.getMethod(), event.getData());
 			TellstickBindingConfig conf = findTellstickBindingConfig(device.getId(), null, null);
@@ -218,8 +218,8 @@ private State resolveCommand(Method method, String data) {
 		} else if (method == Method.TURNOFF) {
 			cmd = OnOffType.OFF;
 		} else if (method == Method.DIM) {
-			double value = ((Double.valueOf(data)) / 255);
-			cmd = new PercentType((int) (value * 100));
+			double value = ((Double.valueOf(data)*100) / 255);
+			cmd = new PercentType((int) Math.round(value));
 		}
 		return cmd;
 	}

File: bundles/designer/org.openhab.designer.ui/src/main/java/org/openhab/designer/ui/internal/actions/SelectConfigFolderAction.java
Patch:
@@ -64,7 +64,7 @@ public void run() {
 	private boolean isValidConfigurationFolder(File dir) {
 		if(dir.isDirectory()) {
 			for(File file : dir.listFiles()) {
-				if(file.getName().equals(ConfigConstants.DEFAULT_SERVICE_CFG_FILE)) {
+				if(file.getName().equals(ConfigConstants.DEFAULT_CONFIG_FILENAME)) {
 					return true;
 				}
 			}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java
Patch:
@@ -1114,9 +1114,7 @@ public void run() {
 					
 					// Now wait for the REQUEST message FROM the controller
 					try {
-						logger.debug("NODE {}: Wait for response", lastSentMessage.getMessageNode());
 						if (!transactionCompleted.tryAcquire(1, zWaveResponseTimeout, TimeUnit.MILLISECONDS)) {
-							logger.debug("NODE {}: NO response = {}", lastSentMessage.getMessageNode());
 							timeOutCount.incrementAndGet();
 							// If this is a SendData message, then we need to abort
 							// TODO: CDJ - not according to the doc? Should check this.

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickBinding.java
Patch:
@@ -199,7 +199,7 @@ public void onRequest(TellstickDeviceEvent newDevices) {
 	private void handleDeviceEvent(TellstickDeviceEvent event) {
 		TellstickDevice device = event.getDevice();
 		controller.setLastSend(System.currentTimeMillis());
-		logger.debug("Got deviceEvent for " + device + " name:" + device + " method" + event.getMethod());
+		logger.debug("Got deviceEvent for " + device + " name:" + device + " method " + event.getMethod());
 		if (device != null) {
 			State cmd = resolveCommand(event.getMethod(), event.getData());
 			TellstickBindingConfig conf = findTellstickBindingConfig(device.getId(), null, null);
@@ -218,8 +218,8 @@ private State resolveCommand(Method method, String data) {
 		} else if (method == Method.TURNOFF) {
 			cmd = OnOffType.OFF;
 		} else if (method == Method.DIM) {
-			double value = ((Double.valueOf(data)) / 255);
-			cmd = new PercentType((int) (value * 100));
+			double value = ((Double.valueOf(data)*100) / 255);
+			cmd = new PercentType((int) Math.round(value));
 		}
 		return cmd;
 	}

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/DeviceTypeLoader.java
Patch:
@@ -142,7 +142,7 @@ private void logDeviceTypes() {
 	 * Singleton instance function, creates DeviceTypeLoader
 	 * @return DeviceTypeLoader singleton reference
 	 */
-	public static DeviceTypeLoader s_instance() {
+	public static synchronized DeviceTypeLoader s_instance() {
 		if (s_deviceTypeLoader == null) {
 			s_deviceTypeLoader = new DeviceTypeLoader();
 			InputStream input = DeviceTypeLoader.class.getResourceAsStream("/device_types.xml");

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/RequestQueueManager.java
Patch:
@@ -120,7 +120,7 @@ public int compareTo(RequestQueue a) {
 			return (int)(m_expirationTime - a.m_expirationTime);
 		}
 	}
-	public static RequestQueueManager s_instance() {
+	public static synchronized RequestQueueManager s_instance() {
 		if (s_instance == null) {
 			s_instance = new RequestQueueManager();
 		}

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/Poller.java
Patch:
@@ -213,7 +213,7 @@ public String toString() {
 		}
 	}
 	
-	public static Poller s_instance() {
+	public static synchronized Poller s_instance() {
 		if (s_poller == null) {
 			s_poller = new Poller();
 		}

File: bundles/binding/org.openhab.binding.knx.test/src/test/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapperTest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.knx.internal.config;
+package org.openhab.binding.knx.internal.dpt;
 
 import static org.junit.Assert.*;
 

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Message.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.maxcube.internal.message;
 
 import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
 * Base message received by the MAX!Cube protocol. 
@@ -19,6 +20,7 @@
 public abstract class Message {
 
 	public static final String DELIMETER = ",";
+	protected final static Logger logger = LoggerFactory.getLogger(Device.class);
 	
 	private String raw = null;
 	

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/MessageType.java
Patch:
@@ -15,5 +15,5 @@
 * @since 1.4.0
 */
 public enum MessageType {
-	H, M, C, L
+	H, M, C, L, S
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/JNA.java
Patch:
@@ -314,7 +314,7 @@ void invoke(String data, int controllerId, int callbackId, Pointer context)
 	}
 
 	static {
-		if (Platform.isWindows()) {
+		if (Platform.isWindows() || Platform.isMac()) {
 			JNA.library = "TelldusCore";
 		} else {
 			JNA.library = "telldus-core";

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java
Patch:
@@ -74,7 +74,7 @@ public CommandClass getCommandClass() {
 	public void handleApplicationCommandRequest(SerialMessage serialMessage,
 			int offset, int endpoint) {
 		logger.trace("Handle Message Battery Request");
-		logger.debug("Node {}: Received Battery Request", this.getNode().getNodeId());
+		logger.debug("NODE {}: Received Battery Request", this.getNode().getNodeId());
 		int command = serialMessage.getMessagePayloadByte(offset);
 		switch (command) {
 			case BATTERY_GET:
@@ -84,7 +84,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 				logger.trace("Process Battery Report");
 				
 				batteryLevel = serialMessage.getMessagePayloadByte(offset + 1); 
-				logger.debug(String.format("Node %d: Battery report value = 0x%02X", this.getNode().getNodeId(), batteryLevel));
+				logger.debug(String.format("NODE %d: Battery report value = 0x%02X", this.getNode().getNodeId(), batteryLevel));
 				ZWaveCommandClassValueEvent zEvent = new ZWaveCommandClassValueEvent(this.getNode().getNodeId(), endpoint, this.getCommandClass(), batteryLevel);
 				this.getController().notifyEventListeners(zEvent);
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -537,7 +537,7 @@ else if (zwaveDynamicClass instanceof ZWaveMultiInstanceCommandClass) {
 			// If we have all the data, set stageAdvanced to true to tell the
 			// system
 			// that we're starting again, then loop around again.
-			if (sendMessage() == false) {
+			if (currentStage != NodeStage.DONE && sendMessage() == false) {
 				// Move on to the next stage
 				currentStage = currentStage.getNextStage();
 				stageAdvanced = true;

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/JNA.java
Patch:
@@ -62,7 +62,7 @@ public static Method getMethodById(int nativeId) {
 	public enum DataType {
 		HUMIDITY(CLibrary.TELLSTICK_HUMIDITY), TEMPERATURE(CLibrary.TELLSTICK_TEMPERATURE),
 		WINDAVERAGE(CLibrary.TELLSTICK_WINDAVERAGE), WINDDIRECTION(CLibrary.TELLSTICK_WINDDIRECTION),
-		WINDGUST(CLibrary.TELLSTICK_WINDGUST);
+		WINDGUST(CLibrary.TELLSTICK_WINDGUST), RAINRATE(CLibrary.TELLSTICK_RAINRATE), RAINTOTAL(CLibrary.TELLSTICK_RAINTOTAL);
 
 		private int nativeInt;
 

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickActivator.java
Patch:
@@ -14,8 +14,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.Platform;
-
 /**
  * Tellstick activator, starts the JNA connection to Telldus Center.
  * 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java
Patch:
@@ -74,7 +74,7 @@ public CommandClass getCommandClass() {
 	public void handleApplicationCommandRequest(SerialMessage serialMessage,
 			int offset, int endpoint) {
 		logger.trace("Handle Message Battery Request");
-		logger.debug("Node {}: Received Battery Request", this.getNode().getNodeId());
+		logger.debug("NODE {}: Received Battery Request", this.getNode().getNodeId());
 		int command = serialMessage.getMessagePayloadByte(offset);
 		switch (command) {
 			case BATTERY_GET:
@@ -84,7 +84,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 				logger.trace("Process Battery Report");
 				
 				batteryLevel = serialMessage.getMessagePayloadByte(offset + 1); 
-				logger.debug(String.format("Node %d: Battery report value = 0x%02X", this.getNode().getNodeId(), batteryLevel));
+				logger.debug(String.format("NODE %d: Battery report value = 0x%02X", this.getNode().getNodeId(), batteryLevel));
 				ZWaveCommandClassValueEvent zEvent = new ZWaveCommandClassValueEvent(this.getNode().getNodeId(), endpoint, this.getCommandClass(), batteryLevel);
 				this.getController().notifyEventListeners(zEvent);
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -537,7 +537,7 @@ else if (zwaveDynamicClass instanceof ZWaveMultiInstanceCommandClass) {
 			// If we have all the data, set stageAdvanced to true to tell the
 			// system
 			// that we're starting again, then loop around again.
-			if (sendMessage() == false) {
+			if (currentStage != NodeStage.DONE && sendMessage() == false) {
 				// Move on to the next stage
 				currentStage = currentStage.getNextStage();
 				stageAdvanced = true;

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickBinding.java
Patch:
@@ -199,7 +199,7 @@ public void onRequest(TellstickDeviceEvent newDevices) {
 	private void handleDeviceEvent(TellstickDeviceEvent event) {
 		TellstickDevice device = event.getDevice();
 		controller.setLastSend(System.currentTimeMillis());
-		logger.debug("Got deviceEvent for " + device + " name:" + device + " method" + event.getMethod());
+		logger.debug("Got deviceEvent for " + device + " name:" + device + " method " + event.getMethod());
 		if (device != null) {
 			State cmd = resolveCommand(event.getMethod(), event.getData());
 			TellstickBindingConfig conf = findTellstickBindingConfig(device.getId(), null, null);

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickBinding.java
Patch:
@@ -218,8 +218,8 @@ private State resolveCommand(Method method, String data) {
 		} else if (method == Method.TURNOFF) {
 			cmd = OnOffType.OFF;
 		} else if (method == Method.DIM) {
-			double value = ((Double.valueOf(data)) / 255);
-			cmd = new PercentType((int) (value * 100));
+			double value = ((Double.valueOf(data)*100) / 255);
+			cmd = new PercentType((int) Math.round(value));
 		}
 		return cmd;
 	}

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickController.java
Patch:
@@ -72,7 +72,7 @@ private void increaseDecrease(TellstickDevice dev, IncreaseDecreaseType increase
 		if (strValue != null) {
 			 value = Double.valueOf(strValue);
 		}
-		int precent = (int) ((value / 255) * 100);
+		int precent = (int) Math.round((value / 255) * 100);
 		if (IncreaseDecreaseType.INCREASE == increaseDecreaseType) {			
 			precent = Math.min(precent + 10, 100);			
 		} else if (IncreaseDecreaseType.DECREASE == increaseDecreaseType) {

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickGenericBindingProvider.java
Patch:
@@ -149,7 +149,9 @@ public void addListener(EventListener changeListener) {
 
 	public void resetTellstickListener() throws SupportedMethodsException {
 		try {
-			listener.remove();
+			if(listener != null) {
+				listener.remove();
+			}
 		} catch (Exception e) {
 			logger.error("Failed to remove telldus core listeners", e);
 		}

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/DeviceTypeLoader.java
Patch:
@@ -142,7 +142,7 @@ private void logDeviceTypes() {
 	 * Singleton instance function, creates DeviceTypeLoader
 	 * @return DeviceTypeLoader singleton reference
 	 */
-	public static DeviceTypeLoader s_instance() {
+	public static synchronized DeviceTypeLoader s_instance() {
 		if (s_deviceTypeLoader == null) {
 			s_deviceTypeLoader = new DeviceTypeLoader();
 			InputStream input = DeviceTypeLoader.class.getResourceAsStream("/device_types.xml");

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/RequestQueueManager.java
Patch:
@@ -120,7 +120,7 @@ public int compareTo(RequestQueue a) {
 			return (int)(m_expirationTime - a.m_expirationTime);
 		}
 	}
-	public static RequestQueueManager s_instance() {
+	public static synchronized RequestQueueManager s_instance() {
 		if (s_instance == null) {
 			s_instance = new RequestQueueManager();
 		}

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/Poller.java
Patch:
@@ -213,7 +213,7 @@ public String toString() {
 		}
 	}
 	
-	public static Poller s_instance() {
+	public static synchronized Poller s_instance() {
 		if (s_poller == null) {
 			s_poller = new Poller();
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -419,6 +419,7 @@ public void advanceNodeStage(SerialMessageClass eventClass) {
 								.getCommandClass().getLabel());
 						ZWaveCommandClassInitialization zcci = (ZWaveCommandClassInitialization) zwaveStaticClass;
 						int instances = zwaveStaticClass.getInstances();
+						logger.debug("NODE {}: Found {} instances of {}", node.getNodeId(), instances, zwaveStaticClass.getCommandClass());
 						if (instances == 1) {
 							addToQueue(zcci.initialize(stageAdvanced));
 						}
@@ -458,6 +459,7 @@ else if (zwaveStaticClass instanceof ZWaveMultiInstanceCommandClass) {
 								.getCommandClass().getLabel());
 						ZWaveCommandClassDynamicState zdds = (ZWaveCommandClassDynamicState) zwaveDynamicClass;
 						int instances = zwaveDynamicClass.getInstances();
+						logger.debug("NODE {}: Found {} instances of {}", node.getNodeId(), instances, zwaveDynamicClass.getCommandClass());
 						if (instances == 1) {
 							addToQueue(zdds.getDynamicValues(stageAdvanced));
 						}

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/DeviceTypeLoader.java
Patch:
@@ -142,7 +142,7 @@ private void logDeviceTypes() {
 	 * Singleton instance function, creates DeviceTypeLoader
 	 * @return DeviceTypeLoader singleton reference
 	 */
-	public static DeviceTypeLoader s_instance() {
+	public static synchronized DeviceTypeLoader s_instance() {
 		if (s_deviceTypeLoader == null) {
 			s_deviceTypeLoader = new DeviceTypeLoader();
 			InputStream input = DeviceTypeLoader.class.getResourceAsStream("/device_types.xml");

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/device/RequestQueueManager.java
Patch:
@@ -120,7 +120,7 @@ public int compareTo(RequestQueue a) {
 			return (int)(m_expirationTime - a.m_expirationTime);
 		}
 	}
-	public static RequestQueueManager s_instance() {
+	public static synchronized RequestQueueManager s_instance() {
 		if (s_instance == null) {
 			s_instance = new RequestQueueManager();
 		}

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/Poller.java
Patch:
@@ -213,7 +213,7 @@ public String toString() {
 		}
 	}
 	
-	public static Poller s_instance() {
+	public static synchronized Poller s_instance() {
 		if (s_poller == null) {
 			s_poller = new Poller();
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -535,7 +535,7 @@ else if (multiInstanceCommandClass.getVersion() == 2) {
 		}
 		else if (multiInstanceCommandClass.getVersion() == 1) {
 			ZWaveCommandClass result = getCommandClass(commandClass);
-			if (endpointId <= result.getInstances()) {
+			if (result != null && endpointId <= result.getInstances()) {
 				return result;
 			}
 		} else {

File: bundles/binding/org.openhab.binding.fritzaha/src/main/java/org/openhab/binding/fritzaha/internal/FritzahaGenericBindingProvider.java
Patch:
@@ -87,6 +87,8 @@ public void processBindingConfiguration(String context, Item item, String bindin
 					config = new FritzahaWebserviceMeter(configParts[0], configParts[1], MeterType.POWER);
 				} else if ("energy".equalsIgnoreCase(configParts[2])) {
 					config = new FritzahaWebserviceMeter(configParts[0], configParts[1], MeterType.ENERGY);
+				} else if ("temperature".equalsIgnoreCase(configParts[2])) {
+					config = new FritzahaWebserviceMeter(configParts[0], configParts[1], MeterType.TEMPERATURE);
 				} else {
 					logger.warn("Could not configure item " + item + " - Unsupported meter type for webservice");
 					return;

File: bundles/binding/org.openhab.binding.fritzaha/src/main/java/org/openhab/binding/fritzaha/internal/hardware/interfaces/FritzahaOutletMeter.java
Patch:
@@ -24,7 +24,7 @@ public interface FritzahaOutletMeter extends FritzahaDevice {
 	 * @since 1.3.0
 	 */
 	public static enum MeterType {
-		VOLTAGE, CURRENT, POWER, ENERGY;
+		VOLTAGE, CURRENT, POWER, ENERGY, TEMPERATURE;
 	};
 
 	public static enum TimeDef {

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/TellstickBindingProvider.java
Patch:
@@ -38,7 +38,7 @@ public interface TellstickBindingProvider extends BindingProvider {
 	 * @param valueSel
 	 * @return The config.
 	 */
-	TellstickBindingConfig getTellstickBindingConfig(int id, TellstickValueSelector valueSel);
+	TellstickBindingConfig getTellstickBindingConfig(int id, TellstickValueSelector valueSel, String protocol);
 
 	/**
 	 * Get a device given its name.

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java
Patch:
@@ -88,14 +88,14 @@ public boolean handleRequest(ZWaveController zController, SerialMessage lastSent
 			break;
 		case ADD_NODE_STATUS_DONE:
 			logger.debug("Done.");
-			zController.sendData(doRequestStop());
+			zController.enqueue(doRequestStop());
 			// If the node ID is 0, ignore!
 			if(incomingMessage.getMessagePayloadByte(2) != 0)
 				zController.notifyEventListeners(new ZWaveInclusionEvent(ZWaveInclusionEvent.Type.IncludeDone, incomingMessage.getMessagePayloadByte(2)));
 			break;
 		case ADD_NODE_STATUS_FAILED:
 			logger.debug("Failed.");
-			zController.sendData(doRequestStop());
+			zController.enqueue(doRequestStop());
 			zController.notifyEventListeners(new ZWaveInclusionEvent(ZWaveInclusionEvent.Type.IncludeFail));
 			break;
 		default:

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/TellstickBindingProvider.java
Patch:
@@ -38,7 +38,7 @@ public interface TellstickBindingProvider extends BindingProvider {
 	 * @param valueSel
 	 * @return The config.
 	 */
-	TellstickBindingConfig getTellstickBindingConfig(int id, TellstickValueSelector valueSel);
+	TellstickBindingConfig getTellstickBindingConfig(int id, TellstickValueSelector valueSel, String protocol);
 
 	/**
 	 * Get a device given its name.

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/TellstickBindingConfig.java
Patch:
@@ -23,6 +23,7 @@ public TellstickBindingConfig() {
 
 	/**
 	 * Get the deviceId.
+	 * The deviceID in Telldus Center (tdtool -l)
 	 * 
 	 * @return The id of the device
 	 */
@@ -94,6 +95,7 @@ public int getResend() {
 	}
 
 	/** Get the model of a sensor value.
+	 * oregon, fineoffset, madolyn
 	 * 
 	 * @return the model
 	 */

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/TellstickGenericBindingProvider.java
Patch:
@@ -165,13 +165,13 @@ public void resetTellstickListener() throws SupportedMethodsException {
 	}
 
 	@Override
-	public TellstickBindingConfig getTellstickBindingConfig(int id, TellstickValueSelector valueSel, String model) {
+	public TellstickBindingConfig getTellstickBindingConfig(int id, TellstickValueSelector valueSel, String protocol) {
 		TellstickBindingConfig name = null;
 		for (Entry<String, BindingConfig> entry : bindingConfigs.entrySet()) {
 			TellstickBindingConfig bv = (TellstickBindingConfig) entry.getValue();
 			if (bv.getId() == id) {
 				if (valueSel == null || valueSel.equals(bv.getValueSelector())) {
-					if (model == null || model.equals(bv.getProtocol())) {
+					if (protocol == null || bv.getProtocol() == null || protocol.equals(bv.getProtocol())) {
 						name = bv;
 						break;
 					}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAssociationCommandClass.java
Patch:
@@ -218,7 +218,7 @@ protected void processAssociationReport(SerialMessage serialMessage, int offset)
 	 */
 	protected void processGroupingsReport(SerialMessage serialMessage, int offset) {
 		maxGroups = serialMessage.getMessagePayloadByte(offset + 1);
-		logger.debug("NODE {} processGroupingsReport number of groups {}", getNode(), maxGroups);
+		logger.debug("NODE {} processGroupingsReport number of groups {}", getNode().getNodeId(), maxGroups);
 		//Start the process to query these nodes
 		updateAssociationsNode = 1;
 		configAssociations.clear();

File: bundles/designer/org.openhab.designer.ui/src/main/java/org/openhab/designer/ui/internal/actions/SelectConfigFolderAction.java
Patch:
@@ -64,7 +64,7 @@ public void run() {
 	private boolean isValidConfigurationFolder(File dir) {
 		if(dir.isDirectory()) {
 			for(File file : dir.listFiles()) {
-				if(file.getName().equals(ConfigConstants.DEFAULT_CONFIG_FILENAME)) {
+				if(file.getName().equals(ConfigConstants.DEFAULT_SERVICE_CFG_FILE)) {
 					return true;
 				}
 			}

File: bundles/binding/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Command.java
Patch:
@@ -2,11 +2,11 @@
 
 /**
  * Enumeration representing the available commands for the binding
- *  
+ * 
  * @author Sebastian Kutschbach
  * @since 1.6.0
- *
+ * 
  */
 public enum Enigma2Command {
-	VOLUME, CHANNEL, PAUSE, MUTE, REMOTE_CONTROL, POWERSTATE
+	VOLUME, CHANNEL, PAUSE, MUTE, REMOTECONTROL, POWERSTATE
 }

File: bundles/binding/org.openhab.binding.samsungac/src/main/java/org/openhab/binding/samsungac/internal/CommandEnum.java
Patch:
@@ -101,4 +101,4 @@ static WindLevelEnum getFromValue(Command value) {
 		}
 		return WindLevelEnum.Auto;
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.samsungac/src/main/java/org/openhab/binding/samsungac/internal/SamsungAcBinding.java
Patch:
@@ -57,7 +57,6 @@ public SamsungAcBinding() {
 
 	public void activate() {
 		logger.info("active");
-		setProperlyConfigured(true);
 	}
 
 	public void deactivate() {
@@ -204,9 +203,7 @@ public void updated(Dictionary<String, ?> config)
 				host.setToken(value);
 			}
 			hosts.put(hostname, host);
-			setProperlyConfigured(true);
 		}
-
 		nameHostMapper = hosts;
 		
 		if (nameHostMapper == null || nameHostMapper.size() == 0) {
@@ -219,6 +216,8 @@ public void updated(Dictionary<String, ?> config)
 			} else {
 				logger.warn("No Samsung Air Conditioner has been configured, and we could not find one either");
 			}
+		} else {
+			setProperlyConfigured(true);
 		}
 	}
 

File: bundles/binding/org.openhab.binding.knx.test/src/test/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapperTest.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.knx.internal.config;
+package org.openhab.binding.knx.internal.dpt;
 
 import static org.junit.Assert.*;
 

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/connection/KNXConnectionListener.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * This interface should be implemented by classes that need to be informed when
- * a KNX connection has been established.
+ * a KNX connection has been established or was lost.
  * 
  * @author Andrea Giacosi
  * @author Kai Kreuzer
@@ -19,7 +19,7 @@
 public interface KNXConnectionListener {
 	
 	/**
-	 * The callback method that is used to notify listeners about a successfull KNX connection
+	 * The callback method that is used to notify listeners about a successful KNX connection
 	 */
 	void connectionEstablished();
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAssociationCommandClass.java
Patch:
@@ -218,7 +218,7 @@ protected void processAssociationReport(SerialMessage serialMessage, int offset)
 	 */
 	protected void processGroupingsReport(SerialMessage serialMessage, int offset) {
 		maxGroups = serialMessage.getMessagePayloadByte(offset + 1);
-		logger.debug("NODE {} processGroupingsReport number of groups {}", getNode(), maxGroups);
+		logger.debug("NODE {} processGroupingsReport number of groups {}", getNode().getNodeId(), maxGroups);
 		//Start the process to query these nodes
 		updateAssociationsNode = 1;
 		configAssociations.clear();

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAssociationCommandClass.java
Patch:
@@ -225,7 +225,7 @@ protected void processAssociationReport(SerialMessage serialMessage, int offset)
 	 */
 	protected void processGroupingsReport(SerialMessage serialMessage, int offset) {
 		maxGroups = serialMessage.getMessagePayloadByte(offset + 1);
-		logger.debug("NODE {}: processGroupingsReport number of groups {}", getNode(), maxGroups);
+		logger.debug("NODE {}: processGroupingsReport number of groups {}", getNode().getNodeId(), maxGroups);
 
 		initialiseDone = true;
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAssociationCommandClass.java
Patch:
@@ -218,7 +218,7 @@ protected void processAssociationReport(SerialMessage serialMessage, int offset)
 	 */
 	protected void processGroupingsReport(SerialMessage serialMessage, int offset) {
 		maxGroups = serialMessage.getMessagePayloadByte(offset + 1);
-		logger.debug("NODE {} processGroupingsReport number of groups {}", getNode(), maxGroups);
+		logger.debug("NODE {} processGroupingsReport number of groups {}", getNode().getNodeId(), maxGroups);
 		//Start the process to query these nodes
 		updateAssociationsNode = 1;
 		configAssociations.clear();

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java
Patch:
@@ -245,7 +245,7 @@ private void handleIncomingResponseMessage(SerialMessage incomingMessage) {
 			case SerialApiGetInitData:
 				this.isConnected = true;
 				for(Integer nodeId : ((SerialApiGetInitDataMessageClass)processor).getNodes()) {
-//					if(nodeId != 16)
+//					if(nodeId != 5)
 	//					continue;
 					
 					

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -641,6 +641,7 @@ else if (event instanceof ZWaveWakeUpCommandClass.ZWaveWakeUpEvent) {
 			// If the stage is PING, then move on to the next stage
 			if(currentStage == NodeStage.PING) {
 				currentStage = currentStage.getNextStage();
+				this.msgQueue.clear();
 			}
 
 			advanceNodeStage(null);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java
Patch:
@@ -1082,7 +1082,7 @@ public void run() {
 					
 					// Send the message to the controller
 					byte[] buffer = lastSentMessage.getMessageBuffer();
-					logger.debug("NODE {}: Sending Message = ", lastSentMessage.getMessageNode(), SerialMessage.bb2hex(buffer));
+					logger.debug("NODE {}: Sending Message = {}", lastSentMessage.getMessageNode(), SerialMessage.bb2hex(buffer));
 					lastMessageStartTime = System.currentTimeMillis();
 					try {
 						synchronized (serialPort.getOutputStream()) {
@@ -1114,7 +1114,7 @@ public void run() {
 							}
 	
 							if (--lastSentMessage.attempts >= 0) {
-								logger.error("NODE {}: Timeout while sending message. Requeueing", lastSentMessage.getMessageNode());
+								logger.error("NODE {}: Timeout while sending message. Requeueing!", lastSentMessage.getMessageNode());
 								if (lastSentMessage.getMessageClass() == SerialMessageClass.SendData) {
 									handleFailedSendDataRequest(lastSentMessage);
 								}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveWakeUpCommandClass.java
Patch:
@@ -392,10 +392,10 @@ public void setAwake(boolean isAwake) {
 		this.isAwake = isAwake;
 		
 		if(isAwake) {
+			logger.debug("NODE {}: Is awake with {} messages in the wake-up queue.", this.getNode().getNodeId(), this.wakeUpQueue.size());
+
 			ZWaveWakeUpEvent event = new ZWaveWakeUpEvent(getNode().getNodeId(), WAKE_UP_NOTIFICATION);
 			this.getController().notifyEventListeners(event);
-			
-			logger.debug("NODE {}: Is awake with {} messages in the wake-up queue.", this.getNode().getNodeId(), this.wakeUpQueue.size());
 
 			// Handle the wake-up queue for this node.
 			// We send the first message, and when that's ACKed, we sent the next

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ApplicationCommandMessageClass.java
Patch:
@@ -34,12 +34,12 @@ public  boolean handleRequest(ZWaveController zController, SerialMessage lastSen
 			logger.warn("NODE {}: Not initialized yet, ignoring message.", nodeId);
 			return false;
 		}
-		logger.debug("NODE {}: Application Command Request (Stage {})", nodeId, node.getNodeStage().getLabel());
+		logger.debug("NODE {}: Application Command Request (Stage: {})", nodeId, node.getNodeStage().toString());
 		
 		// If the node is DEAD, but we've just received a message from it, then it's not dead!
 		if(node.isDead()) {
 			node.setAlive();
-			logger.debug("NODE {}: Node has risen from the DEAD. Set stage to {}.", nodeId, node.getNodeStage());			
+			logger.debug("NODE {}: Node has risen from the DEAD. Set stage to {}.", nodeId, node.getNodeStage().toString());			
 		}
 		
 		node.resetResendCount();

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ApplicationUpdateMessageClass.java
Patch:
@@ -83,7 +83,7 @@ public  boolean handleRequest(ZWaveController zController, SerialMessage lastSen
 			SerialMessage requestInfoMessage = lastSentMessage;
 
 			if (requestInfoMessage.getMessageClass() != SerialMessageClass.RequestNodeInfo) {
-				logger.warn("NODE {}: Got application update request without node info request, ignoring. Last {}.", nodeId, requestInfoMessage.getMessageClass());
+				logger.warn("NODE {}: Got application update request without node info request, ignoring. Last message was {}.", nodeId, requestInfoMessage.getMessageClass());
 				return false;
 			}
 				

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SendDataMessageClass.java
Patch:
@@ -59,7 +59,7 @@ public boolean handleRequest(ZWaveController zController, SerialMessage lastSent
 			return false;
 		}
 
-		logger.debug("NODE {}: SendData Request. CallBack ID = {}, Status = {} ({})", node.getNodeId(), callbackId, status.getLabel(), status.getKey());
+		logger.debug("NODE {}: SendData Request. CallBack ID = {}, Status = {}({})", node.getNodeId(), callbackId, status.getLabel(), status.getKey());
 
 		if (originalMessage == null || originalMessage.getCallbackId() != callbackId) {
 			logger.warn("NODE {}: Already processed another send data request for this callback Id, ignoring.", node.getNodeId());

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ZWaveCommandProcessor.java
Patch:
@@ -52,7 +52,7 @@ public boolean isTransactionComplete() {
 	 * @param incomingMessage The response from the controller
 	 */
 	protected void checkTransactionComplete(SerialMessage lastSentMessage, SerialMessage incomingMessage) {
-		logger.debug("Checking transaction complete: {}-|-{} cancelled={}", incomingMessage.getMessageClass(), lastSentMessage.getExpectedReply(), incomingMessage.isTransActionCanceled());
+		logger.debug("Checking transaction complete: class={}, expected={}, cancelled={}", incomingMessage.getMessageClass(), lastSentMessage.getExpectedReply(), incomingMessage.isTransActionCanceled());
 		if (incomingMessage.getMessageClass() == lastSentMessage.getExpectedReply() && !incomingMessage.isTransActionCanceled()) {
 			transactionComplete = true;
 			logger.debug("         transaction complete!");

File: bundles/designer/org.openhab.designer.ui/src/main/java/org/openhab/designer/ui/internal/actions/SelectConfigFolderAction.java
Patch:
@@ -64,7 +64,7 @@ public void run() {
 	private boolean isValidConfigurationFolder(File dir) {
 		if(dir.isDirectory()) {
 			for(File file : dir.listFiles()) {
-				if(file.getName().equals(ConfigConstants.DEFAULT_CONFIG_FILENAME)) {
+				if(file.getName().equals(ConfigConstants.DEFAULT_SERVICE_CFG_FILE)) {
 					return true;
 				}
 			}

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/zibaseBindingConfigCalendar.java
Patch:
@@ -14,7 +14,7 @@ public zibaseBindingConfigCalendar(String[] configParameters) {
 	}
 
 	@Override
-	public State getOpenhabStateFromZibaseValue(ZbResponse zbResponse) {
+	public State getOpenhabStateFromZibaseValue(String zbResponseStr) {
 		// TODO Auto-generated method stub
 		return null;
 	}

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/zibaseBindingConfigCommand.java
Patch:
@@ -61,6 +61,8 @@ public void sendCommand(Zibase zibase, Command command, int dim) {
 		} else {
 			zibase.sendCommand(this.getId(), action, protocol);
 		}
+		
+		logger.debug("Send command to " + this.getId() + " : " + action.toString() + " / " + protocol.toString());
 	}
 
 	
@@ -90,7 +92,7 @@ protected boolean isItemConfigValid() {
 
 
 	@Override
-	public State getOpenhabStateFromZibaseValue(ZbResponse zbResponse) {
+	public State getOpenhabStateFromZibaseValue(String zbResponseStr) {
 		logger.error("getOpenhabStateFromZibaseValue : not implemented for command item");
 		return null;
 	}

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/zibaseBindingConfigReceiver.java
Patch:
@@ -95,10 +95,10 @@ public static HashMap<String, Class<?>> getValueStateMap() {
 
 	
 	@Override
-	public State getOpenhabStateFromZibaseValue(ZbResponse zbResponse) {
+	public State getOpenhabStateFromZibaseValue(String zbResponseStr) {
 		if(constructor != null) {
 			try {
-				String zibaseValue = XmlSimpleParse.getTagValue(this.values[this.POS_VALUES], zbResponse.getMessage());
+				String zibaseValue = XmlSimpleParse.getTagValue(this.values[this.POS_VALUES], zbResponseStr);
 				return (State) constructor.newInstance(zibaseValue);
 			} catch (Exception e) {
 				logger.error("unable to convert zibase value to openHab State : " + e.toString());

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/zibaseBindingConfigScenario.java
Patch:
@@ -31,7 +31,7 @@ protected boolean isItemConfigValid() {
 	}
 
 	@Override
-	public State getOpenhabStateFromZibaseValue(ZbResponse zbResponse) {
+	public State getOpenhabStateFromZibaseValue(String zbResponseStr) {
 		// TODO Auto-generated method stub
 		return null;
 	}

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/zibaseBindingConfigScript.java
Patch:
@@ -14,7 +14,7 @@ public zibaseBindingConfigScript(String[] configParameters) {
 	}
 
 	@Override
-	public State getOpenhabStateFromZibaseValue(ZbResponse zbResponse) {
+	public State getOpenhabStateFromZibaseValue(String zbResponseStr) {
 		// TODO Auto-generated method stub
 		return null;
 	}

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/zibaseBindingConfigVariable.java
Patch:
@@ -14,7 +14,7 @@ public zibaseBindingConfigVariable(String[] configParameters) {
 	}
 
 	@Override
-	public State getOpenhabStateFromZibaseValue(ZbResponse zbResponse) {
+	public State getOpenhabStateFromZibaseValue(String zbResponseStr) {
 		// TODO Auto-generated method stub
 		return null;
 	}

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/zibaseBindingConfigX10Event.java
Patch:
@@ -14,7 +14,7 @@ public zibaseBindingConfigX10Event(String[] configParameters) {
 	}
 
 	@Override
-	public State getOpenhabStateFromZibaseValue(ZbResponse zbResponse) {
+	public State getOpenhabStateFromZibaseValue(String zbResponseStr) {
 		// TODO Auto-generated method stub
 		return null;
 	}

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/zibaseBindingConfigZwaveEvent.java
Patch:
@@ -14,7 +14,7 @@ public zibaseBindingConfigZwaveEvent(String[] configParameters) {
 	}
 
 	@Override
-	public State getOpenhabStateFromZibaseValue(ZbResponse zbResponse) {
+	public State getOpenhabStateFromZibaseValue(String zbResponseStr) {
 		// TODO Auto-generated method stub
 		return null;
 	}

File: bundles/binding/org.openhab.binding.zibase/src/main/java/org/openhab/binding/zibase/internal/zibaseGenericBindingProvider.java
Patch:
@@ -83,12 +83,11 @@ public void processBindingConfiguration(String context, Item item, String bindin
 		logger.debug("read item : " + item);
 		logger.debug("read config : " + bindingConfig);
 		
-		String[] itemConfig = StringUtils.split(bindingConfig);
+		String[] itemConfig = StringUtils.split(bindingConfig,zibaseBindingConfig.CONFIG_SEPARATOR);
 		
 		zibaseBindingConfig config = zibaseBindingConfig.factory(itemConfig);
 		itemMap.put(item.getName(), config);
-		
-		// TODO Check accepted values
+
 		if (idMap.containsKey(config.getId())) {
 			idMap.get(config.getId()).add(item.getName());
 		} else {

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/filter/PollingDelayFilter.java
Patch:
@@ -59,10 +59,10 @@ public void run() {
 		                try {
 		                    Thread.sleep(300);
 							GeneralBroadcaster delayedBroadcaster = (GeneralBroadcaster) BroadcasterFactory.getDefault().lookup(GeneralBroadcaster.class, delayedBroadcasterName);
-							delayedBroadcaster.broadcast(message, resource);
-							
+							if(delayedBroadcaster != null)
+								delayedBroadcaster.broadcast(message, resource);
 						} catch (Exception e) {
-							logger.error(e.getMessage());
+							logger.error("Could not broadcast message",e);
 						} 
 		            }
 		        });

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoMeasureType.java
Patch:
@@ -18,7 +18,7 @@
  * to be retrieved by the Netatmo binding
  */
 public enum NetatmoMeasureType {
-	CO2("co2"),
+	CO2("Co2"),
 	TEMPERATURE("Temperature"),
 	HUMIDITY("Humidity"),
 	NOISE("Noise"),

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/AbstractRequest.java
Patch:
@@ -20,8 +20,7 @@
  * @author Andreas Brenk
  * @since 1.4.0
  */
-public abstract class AbstractRequest extends AbstractMessage implements
-		Request {
+public abstract class AbstractRequest extends AbstractMessage implements Request {
 
 	protected static final String HTTP_GET = "GET";
 
@@ -48,4 +47,5 @@ protected final RuntimeException newException(
 
 		return new NetatmoException(message, cause);
 	}
+	
 }

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/AbstractResponse.java
Patch:
@@ -17,8 +17,7 @@
  * @author Andreas Brenk
  * @since 1.4.0
  */
-public abstract class AbstractResponse extends AbstractMessage implements
-		Response {
+public abstract class AbstractResponse extends AbstractMessage implements Response {
 
 	private NetatmoError error;
 
@@ -43,4 +42,5 @@ public String toString() {
 
 		return builder.toString();
 	}
+	
 }

File: bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java
Patch:
@@ -539,7 +539,7 @@ static public HistoricItem parentState(Item item, String serviceName) {
 			filter.setItemName(item.getName());
 			filter.setOrdering(Ordering.DESCENDING);
 
-			filter.setPageSize(3);
+			filter.setPageSize(1000);
 			int startPage = 0;
 			filter.setPageNumber(startPage);
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java
Patch:
@@ -594,8 +594,9 @@ public void requestNodeInfo(int nodeId) {
 	public void checkForDeadOrSleepingNodes(){
 		int completeCount = 0;
 
-		if (zwaveNodes.isEmpty())
+		if (zwaveNodes.isEmpty()) {
 			return;
+		}
 
 		// There are still nodes waiting to get a ping.
 		// So skip the dead node checking.
@@ -610,7 +611,7 @@ public void checkForDeadOrSleepingNodes(){
 			if (entry.getValue().getNodeStage() == NodeStage.EMPTYNODE) {
 				continue;
 			}
-			
+
 			logger.debug("NODE {}: In Stage {} since {}, listening={}, FLiRS={}", entry.getKey(),
 					entry.getValue().getNodeStage().getLabel(), entry.getValue().getQueryStageTimeStamp().toString(),
 					entry.getValue().isListening(), entry.getValue().isFrequentlyListening());

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java
Patch:
@@ -538,7 +538,7 @@ public void notifyEventListeners(ZWaveEvent event) {
 					}
 					if (networkEvent.getState() == State.Success) {
 						logger.warn("NODE {}: Marking node as FAILED because its on the controllers failed node list.", networkEvent.getNodeId());
-						getNode(networkEvent.getNodeId()).setFailed();
+						getNode(networkEvent.getNodeId()).setNodeStage(NodeStage.FAILED);
 						
 						ZWaveEvent zEvent = new ZWaveNodeStatusEvent(networkEvent.getNodeId(), ZWaveNodeStatusEvent.State.Failed);
 						this.notifyEventListeners(zEvent);
@@ -609,6 +609,7 @@ public void checkForDeadOrSleepingNodes(){
 		for (Map.Entry<Integer, ZWaveNode> entry : zwaveNodes.entrySet()){
 			if (entry.getValue().getNodeStage() == NodeStage.EMPTYNODE) {
 				continue;
+			}
 			
 			logger.debug("NODE {}: In Stage {} since {}, listening={}, FLiRS={}", entry.getKey(),
 					entry.getValue().getNodeStage().getLabel(), entry.getValue().getQueryStageTimeStamp().toString(),

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveTransactionCompletedEvent.java
Patch:
@@ -29,7 +29,7 @@ public class ZWaveTransactionCompletedEvent extends ZWaveEvent {
 	 * @param completedMessage the original {@link SerialMessage} that has been completed.
 	 * @param state a flag indicating success / failure of the transaction processing
 	 */
-	public ZWaveTransactionCompletedEvent(SerialMessage completedMessage) {
+	public ZWaveTransactionCompletedEvent(SerialMessage completedMessage, boolean state) {
 		super(completedMessage.getMessageNode());
 
 		this.completedMessage = completedMessage;

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/job/JobScheduler.java
Patch:
@@ -79,7 +79,7 @@ public void run() {
 				stop();
 				start();
 			}
-		}, 5000);
+		}, 3000);
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/bus/HomematicBinding.java
Patch:
@@ -200,7 +200,7 @@ protected void execute() {
 	 */
 	@Override
 	protected long getRefreshInterval() {
-		return context.getConfig().getAliveInterval() * 1000;
+		return 60000;
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/common/HomematicConfig.java
Patch:
@@ -24,9 +24,6 @@
  * # Hostname / IP address of the Homematic CCU or Homegear server
  * homematic:host=
  *
- * # The communication with the Homematic server. xml for xmlrpc or bin for the lightweight binrpc, (optional, default is bin).
- * # homematic:rpc=
- * 
  * # Hostname / IP address for the callback server (optional, default is auto-discovery)
  * # This is normally the IP / hostname of the local host (but not "localhost" or "127.0.0.1"). 
  * # homematic:callback.host=

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java
Patch:
@@ -253,7 +253,7 @@ private HmVariable createVariable(String name, Object value) {
 		HmVariable var = new HmVariable();
 		var.setName(name);
 		var.setWriteable(true);
-		var.setValue(guessType(value));
+		var.setValueType(guessType(value));
 		var.setValue(value);
 		return var;
 	}

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/server/BinRpcCallbackHandler.java
Patch:
@@ -78,9 +78,8 @@ private byte[] handleMethodCall(String methodName, Object[] responseData) throws
 		if ("event".equals(methodName)) {
 			handleEvent(responseData);
 			return BIN_EMPTY_STRING;
-		} else if ("listDevices".equals(methodName)) {
-			return BIN_EMPTY_ARRAY;
-		} else if ("deleteDevices".equals(methodName)) {
+		} else if ("listDevices".equals(methodName) || "deleteDevices".equals(methodName)
+				|| "updateDevice".equals(methodName)) {
 			return BIN_EMPTY_ARRAY;
 		} else if ("newDevices".equals(methodName)) {
 			callbackReceiver.newDevices(null, null);

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/AbstractEnumTypeConverter.java
Patch:
@@ -34,6 +34,7 @@ public abstract class AbstractEnumTypeConverter<T extends State> extends Abstrac
 		stateInvertDevices.add(new StateInvertInfo("HM-SEC-TIS"));
 		stateInvertDevices.add(new StateInvertInfo("HMW-IO-12-SW14-DR", 15, 26));
 		stateInvertDevices.add(new StateInvertInfo("BC-SC-RD-WM"));
+		stateInvertDevices.add(new StateInvertInfo("HM-SCI-3-FM"));
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.netatmo.test/src/test/java/org/openhab/binding/netatmo/internal/messages/MeasurementTest.java
Patch:
@@ -18,6 +18,7 @@
 import static org.openhab.binding.netatmo.internal.messages.MeasurementRequestStub.DEVICE_ID;
 import static org.openhab.binding.netatmo.internal.messages.MeasurementRequestStub.MODULE_ID;
 import static org.openhab.binding.netatmo.internal.messages.MeasurementRequestStub.createRequest;
+import static org.openhab.binding.netatmo.internal.NetatmoMeasureType.*;
 
 import java.math.BigDecimal;
 import java.util.List;
@@ -48,8 +49,8 @@ public void testError() throws Exception {
 	@Test
 	public void testSuccess() throws Exception {
 		final MeasurementRequestStub request = createRequest("/getmeasure.json");
-		request.addMeasure("Temperature");
-		request.addMeasure("Humidity");
+		request.addMeasure(TEMPERATURE);
+		request.addMeasure(HUMIDITY);
 
 		final MeasurementResponse response = request.execute();
 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/NetatmoBindingProvider.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.netatmo;
 
 import org.openhab.core.binding.BindingProvider;
+import org.openhab.binding.netatmo.internal.NetatmoMeasureType;
 
 /**
  * This interface is implemented by classes that can provide mapping information
@@ -40,7 +41,7 @@ public interface NetatmoBindingProvider extends BindingProvider {
 	 * @return the Netatmo measure of the Item identified by {@code itemName} if
 	 *         it has a Netatmo binding, <code>null</code> otherwise
 	 */
-	String getMeasure(String itemName);
+	NetatmoMeasureType getMeasureType(String itemName);
 
 	/**
 	 * Queries the Netatmo module of the given {@code itemName}.

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/MeasurementRequest.java
Patch:
@@ -18,6 +18,7 @@
 import org.apache.commons.httpclient.util.URIUtil;
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.openhab.binding.netatmo.internal.NetatmoException;
+import org.openhab.binding.netatmo.internal.NetatmoMeasureType;
 
 /**
  * Queries the Netatmo API for the measures of a single device or module.
@@ -81,8 +82,8 @@ public MeasurementRequest(final String accessToken, final String deviceId,
 	 *            the name of a supported measure, e.g. "Temperature" or
 	 *            "Humidity"
 	 */
-	public void addMeasure(final String measure) {
-		this.measures.add(measure);
+	public void addMeasure(final NetatmoMeasureType measureType) {
+		this.measures.add(measureType.getMeasure());
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -67,7 +67,6 @@
 import org.teleal.cling.registry.Registry;
 import org.teleal.cling.registry.RegistryListener;
 import org.teleal.cling.transport.impl.apache.StreamClientConfigurationImpl;
-import org.teleal.cling.transport.impl.apache.StreamClientImpl;
 import org.teleal.cling.transport.impl.apache.StreamServerConfigurationImpl;
 import org.teleal.cling.transport.impl.apache.StreamServerImpl;
 import org.teleal.cling.transport.spi.NetworkAddressFactory;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveGenericBindingProvider.java
Patch:
@@ -66,7 +66,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 			throw new BindingConfigParseException(segments[1] + " is not a valid node id.");
 		}
 		
-		int endpoint = 1;
+		int endpoint = 0;
 		Integer refreshInterval = null;
 		Map<String, String> arguments = new HashMap<String, String>();
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveDeviceClass.java
Patch:
@@ -218,7 +218,7 @@ public enum Generic {
 		STATIC_CONTOLLER(0x02, "Static Controller"), 
 		AV_CONTROL_POINT(0x03, "A/V Control Point"), 
 		DISPLAY(0x06, "Display"),
-		GARAGE_DOOR(0x07, "Garage Door")
+		GARAGE_DOOR(0x07, "Garage Door"),
 		THERMOSTAT(0x08, "Thermostat"), 
 		WINDOW_COVERING(0x09, "Window Covering"), 
 		REPEATER_SLAVE(0x0f, "Repeater Slave"), 

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoMeasureType.java
Patch:
@@ -18,7 +18,7 @@
  * to be retrieved by the Netatmo binding
  */
 public enum NetatmoMeasureType {
-	CO2("co2"),
+	CO2("Co2"),
 	TEMPERATURE("Temperature"),
 	HUMIDITY("Humidity"),
 	NOISE("Noise"),

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/server/BinRpcCallbackHandler.java
Patch:
@@ -78,9 +78,8 @@ private byte[] handleMethodCall(String methodName, Object[] responseData) throws
 		if ("event".equals(methodName)) {
 			handleEvent(responseData);
 			return BIN_EMPTY_STRING;
-		} else if ("listDevices".equals(methodName)) {
-			return BIN_EMPTY_ARRAY;
-		} else if ("deleteDevices".equals(methodName)) {
+		} else if ("listDevices".equals(methodName) || "deleteDevices".equals(methodName)
+				|| "updateDevice".equals(methodName)) {
 			return BIN_EMPTY_ARRAY;
 		} else if ("newDevices".equals(methodName)) {
 			callbackReceiver.newDevices(null, null);

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/connection/KNXConnection.java
Patch:
@@ -116,7 +116,6 @@ public static synchronized ProcessCommunicator getCommunicator() {
 	}
 
 	public void setProcessListener(ProcessListener listener) {
-		sLogger.debug("setProcessListener() event: {}", listener);
 		if (sPC != null) {
 			sPC.removeProcessListener(KNXConnection.sProcessCommunicationListener);
 			sLogger.debug("Adding Process Listener: {}", listener);
@@ -126,7 +125,6 @@ public void setProcessListener(ProcessListener listener) {
 	}
 	
 	public void unsetProcessListener(ProcessListener listener) {
-		sLogger.debug("unsetProcessListener() event: {}", listener);
 		if (sPC != null) {
 			sPC.removeProcessListener(KNXConnection.sProcessCommunicationListener);
 		}

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java
Patch:
@@ -138,7 +138,7 @@ public void processMessage(Chat chat, Message message) {
 				} catch (IOException e) {
 					logger.error("Could not open url '{}' for sending it via XMPP", attachmentUrl, e);
 				} finally {
-					IOUtils.closeQuitely(is);
+					IOUtils.closeQuietly(is);
 				}
 			}
 		} catch (NotInitializedException e) {

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPP.java
Patch:
@@ -138,7 +138,7 @@ public void processMessage(Chat chat, Message message) {
 				} catch (IOException e) {
 					logger.error("Could not open url '{}' for sending it via XMPP", attachmentUrl, e);
 				} finally {
-					IOUtils.closeQuitely(is);
+					IOUtils.closeQuietly(is);
 				}
 			}
 		} catch (NotInitializedException e) {

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/bus/HomematicBinding.java
Patch:
@@ -200,7 +200,7 @@ protected void execute() {
 	 */
 	@Override
 	protected long getRefreshInterval() {
-		return context.getConfig().getAliveInterval() * 1000;
+		return 60000;
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/common/HomematicConfig.java
Patch:
@@ -24,9 +24,6 @@
  * # Hostname / IP address of the Homematic CCU or Homegear server
  * homematic:host=
  *
- * # The communication with the Homematic server. xml for xmlrpc or bin for the lightweight binrpc, (optional, default is bin).
- * # homematic:rpc=
- * 
  * # Hostname / IP address for the callback server (optional, default is auto-discovery)
  * # This is normally the IP / hostname of the local host (but not "localhost" or "127.0.0.1"). 
  * # homematic:callback.host=

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java
Patch:
@@ -253,7 +253,7 @@ private HmVariable createVariable(String name, Object value) {
 		HmVariable var = new HmVariable();
 		var.setName(name);
 		var.setWriteable(true);
-		var.setValue(guessType(value));
+		var.setValueType(guessType(value));
 		var.setValue(value);
 		return var;
 	}

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/AbstractEnumTypeConverter.java
Patch:
@@ -34,6 +34,7 @@ public abstract class AbstractEnumTypeConverter<T extends State> extends Abstrac
 		stateInvertDevices.add(new StateInvertInfo("HM-SEC-TIS"));
 		stateInvertDevices.add(new StateInvertInfo("HMW-IO-12-SW14-DR", 15, 26));
 		stateInvertDevices.add(new StateInvertInfo("BC-SC-RD-WM"));
+		stateInvertDevices.add(new StateInvertInfo("HM-SCI-3-FM"));
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -67,7 +67,6 @@
 import org.teleal.cling.registry.Registry;
 import org.teleal.cling.registry.RegistryListener;
 import org.teleal.cling.transport.impl.apache.StreamClientConfigurationImpl;
-import org.teleal.cling.transport.impl.apache.StreamClientImpl;
 import org.teleal.cling.transport.impl.apache.StreamServerConfigurationImpl;
 import org.teleal.cling.transport.impl.apache.StreamServerImpl;
 import org.teleal.cling.transport.spi.NetworkAddressFactory;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveConfigurationCommandClass.java
Patch:
@@ -196,7 +196,7 @@ public class ZWaveConfigurationParameterEvent extends ZWaveEvent {
 		 * @param nodeId the nodeId of the event. Must be set to the controller node.
 		 */
 		public ZWaveConfigurationParameterEvent(int nodeId, ConfigurationParameter parameter) {
-			super(nodeId, 1);
+			super(nodeId);
 			this.parameter = parameter;
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAssociationCommandClass.java
Patch:
@@ -364,7 +364,7 @@ public class ZWaveAssociationEvent extends ZWaveEvent {
 		 * @param nodeId the nodeId of the event. Must be set to the controller node.
 		 */
 		public ZWaveAssociationEvent(int nodeId, int group) {
-			super(nodeId, 1);
+			super(nodeId);
 			
 			this.group = group;
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveConfigurationCommandClass.java
Patch:
@@ -196,7 +196,7 @@ public class ZWaveConfigurationParameterEvent extends ZWaveEvent {
 		 * @param nodeId the nodeId of the event. Must be set to the controller node.
 		 */
 		public ZWaveConfigurationParameterEvent(int nodeId, ConfigurationParameter parameter) {
-			super(nodeId, 1);
+			super(nodeId);
 			this.parameter = parameter;
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAssociationCommandClass.java
Patch:
@@ -364,7 +364,7 @@ public class ZWaveAssociationEvent extends ZWaveEvent {
 		 * @param nodeId the nodeId of the event. Must be set to the controller node.
 		 */
 		public ZWaveAssociationEvent(int nodeId, int group) {
-			super(nodeId, 1);
+			super(nodeId);
 			
 			this.group = group;
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveWakeUpCommandClass.java
Patch:
@@ -183,7 +183,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 
 				// if this node has not gone through it's query stages yet, and there
 				// are no initialization packets on the wake-up queue, restart initialization.
-				if (!this.initializationComplete && (this.wakeUpQueue.isEmpty() || this.getNode().getNodeStage() == NodeStage.DEAD)) {
+				if (!this.initializationComplete && (this.wakeUpQueue.isEmpty() || this.getNode().isDead() == true)) {
 					logger.info("NODE {}: Got Wake Up Notification from node, continuing initialization.", this.getNode().getNodeId());
 					
 					this.getNode().setNodeStage(NodeStage.WAKEUP);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SendDataMessageClass.java
Patch:
@@ -103,9 +103,10 @@ public boolean handleFailedSendDataRequest(ZWaveController zController, SerialMe
 
 		ZWaveNode node = zController.getNode(originalMessage.getMessageNode());
 
-		// No retries if the node is DEAD
-		if (node.getNodeStage() == NodeStage.DEAD)
+		// No retries if the node is DEAD or FAILED
+		if (node.isDead()) {
 			return false;
+		}
 
 		// High priority messages get requeued, low priority get dropped
 		if (!node.isListening() && !node.isFrequentlyListening()

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/MiosBinding.java
Patch:
@@ -372,11 +372,11 @@ public void updated(Dictionary<String, ?> properties)
 			}
 
 			boolean created = false;
-			String hackUnitName = (unitName == null) ? "_default" : unitName;
+			String hackUnitName = (unitName == null) ? MiosUnit.CONFIG_DEFAULT_UNIT : unitName;
 			MiosUnit unit = units.get(hackUnitName);
 
 			if (unit == null) {
-				unit = new MiosUnit(unitName);
+				unit = new MiosUnit(hackUnitName);
 				created = true;
 			}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -439,7 +439,7 @@ public void resetResendCount() {
 		this.resendCount = 0;
 		if (this.nodeStageAdvancer.isInitializationComplete() && this.isDead() == false) {
 			this.nodeStage = NodeStage.DONE;
-		this.lastUpdated = Calendar.getInstance().getTime();
+		}
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveGenericBindingProvider.java
Patch:
@@ -66,7 +66,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 			throw new BindingConfigParseException(segments[1] + " is not a valid node id.");
 		}
 		
-		int endpoint = 1;
+		int endpoint = 0;
 		Integer refreshInterval = null;
 		Map<String, String> arguments = new HashMap<String, String>();
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java
Patch:
@@ -299,7 +299,7 @@ public void execute() {
 					continue;
 				if (oldestNode == null) {
 					oldestNode = node;
-				} else if (node.getLastUpdated().getTime() < oldestNode.getLastUpdated().getTime()) {
+				} else if (node.getLastSent().getTime() < oldestNode.getLastSent().getTime()) {
 					oldestNode = node;
 				}
 			}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveInfoConverter.java
Patch:
@@ -151,7 +151,7 @@ private Object getInformationItemValue(ZWaveNode node, ZWaveInformationItem info
 			case REPORT_TIME_OUT:
 				return this.getController().getTimeOutCount();
 			case REPORT_LASTUPDATE:
-				return node.getLastUpdated();
+				return node.getLastReceived();
 		}
         
         return null;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveEndpoint.java
Patch:
@@ -40,6 +40,9 @@ public class ZWaveEndpoint {
 	 * @param endpointId the endpoint ID.
 	 */
 	public ZWaveEndpoint(int endpointId) {
+		if (endpointId == 0) {
+			throw new IllegalArgumentException("Endpoint number cannot be 0");
+		}
 		this.endpointId = endpointId;
 		this.deviceClass = new ZWaveDeviceClass(Basic.NOT_KNOWN,
 				Generic.NOT_KNOWN, Specific.NOT_USED);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -47,7 +47,7 @@ public abstract class ZWaveCommandClass {
 	private ZWaveNode node;
 	@XStreamOmitField
 	private ZWaveController controller;
-	@XStreamOmitField
+//	@XStreamOmitField
 	private ZWaveEndpoint endpoint;
 	
 	private int version = 0;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveInclusionEvent.java
Patch:
@@ -22,13 +22,13 @@ public class ZWaveInclusionEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event.
 	 */
 	public ZWaveInclusionEvent(Type type, int nodeId) {
-		super(nodeId, 1);
+		super(nodeId);
 		
 		this.type = type;
 	}
 
 	public ZWaveInclusionEvent(Type type) {
-		super(255, 1);
+		super(255);
 		
 		this.type = type;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveInitializationCompletedEvent.java
Patch:
@@ -24,7 +24,7 @@ public class ZWaveInitializationCompletedEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event. Must be set to the controller node.
 	 */
 	public ZWaveInitializationCompletedEvent(int nodeId) {
-		super(nodeId, 1);
+		super(nodeId);
 	}
 
 }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNetworkEvent.java
Patch:
@@ -25,7 +25,7 @@ public class ZWaveNetworkEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event.
 	 */
 	public ZWaveNetworkEvent(Type type, int nodeId, State state) {
-		super(nodeId, 1);
+		super(nodeId);
 		
 		this.type = type;
 		this.state = state;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNodeStatusEvent.java
Patch:
@@ -22,7 +22,7 @@ public class ZWaveNodeStatusEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event.
 	 */
 	public ZWaveNodeStatusEvent(int nodeId, State state) {
-		super(nodeId, 1);
+		super(nodeId);
 
 		this.state = state;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveTransactionCompletedEvent.java
Patch:
@@ -26,7 +26,7 @@ public class ZWaveTransactionCompletedEvent extends ZWaveEvent {
 	 * @param completedMessage the original {@link SerialMessage} that has been completed.
 	 */
 	public ZWaveTransactionCompletedEvent(SerialMessage completedMessage) {
-		super(completedMessage.getMessageNode(), 1);
+		super(completedMessage.getMessageNode());
 
 		this.completedMessage = completedMessage;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ApplicationCommandMessageClass.java
Patch:
@@ -43,6 +43,7 @@ public  boolean handleRequest(ZWaveController zController, SerialMessage lastSen
 		}
 		
 		node.resetResendCount();
+		node.incrementReceiveCount();
 		
 		int commandClassCode = incomingMessage.getMessagePayloadByte(3);
 		CommandClass commandClass = CommandClass.getCommandClass(commandClassCode);
@@ -76,7 +77,7 @@ public  boolean handleRequest(ZWaveController zController, SerialMessage lastSen
 		}
 		
 		logger.trace("NODE {}: Found Command Class {}, passing to handleApplicationCommandRequest", nodeId, zwaveCommandClass.getCommandClass().getLabel());
-		zwaveCommandClass.handleApplicationCommandRequest(incomingMessage, 4, 1);
+		zwaveCommandClass.handleApplicationCommandRequest(incomingMessage, 4, 0);
 
 		checkTransactionComplete(lastSentMessage, incomingMessage);
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveGenericBindingProvider.java
Patch:
@@ -66,7 +66,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 			throw new BindingConfigParseException(segments[1] + " is not a valid node id.");
 		}
 		
-		int endpoint = 1;
+		int endpoint = 0;
 		Integer refreshInterval = null;
 		Map<String, String> arguments = new HashMap<String, String>();
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -575,7 +575,7 @@ record = new OpenHABConfigurationRecord(domain, "configuration" + parameter.Inde
 						for (ZWaveDbAssociationGroup group : groupList) {
 							// TODO: Controller reporting associations are set to read only
 							record = new OpenHABConfigurationRecord(domain, "association" + group.Index + "/",
-									database.getLabel(group.Label), group.SetToController);
+									database.getLabel(group.Label), true);
 
 							// Add the description
 							record.description = database.getLabel(group.Help);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveEndpoint.java
Patch:
@@ -40,6 +40,9 @@ public class ZWaveEndpoint {
 	 * @param endpointId the endpoint ID.
 	 */
 	public ZWaveEndpoint(int endpointId) {
+		if (endpointId == 0) {
+			throw new IllegalArgumentException("Endpoint number cannot be 0");
+		}
 		this.endpointId = endpointId;
 		this.deviceClass = new ZWaveDeviceClass(Basic.NOT_KNOWN,
 				Generic.NOT_KNOWN, Specific.NOT_USED);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -47,7 +47,7 @@ public abstract class ZWaveCommandClass {
 	private ZWaveNode node;
 	@XStreamOmitField
 	private ZWaveController controller;
-	@XStreamOmitField
+//	@XStreamOmitField
 	private ZWaveEndpoint endpoint;
 	
 	private int version = 0;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveInclusionEvent.java
Patch:
@@ -22,13 +22,13 @@ public class ZWaveInclusionEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event.
 	 */
 	public ZWaveInclusionEvent(Type type, int nodeId) {
-		super(nodeId, 1);
+		super(nodeId);
 		
 		this.type = type;
 	}
 
 	public ZWaveInclusionEvent(Type type) {
-		super(255, 1);
+		super(255);
 		
 		this.type = type;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveInitializationCompletedEvent.java
Patch:
@@ -24,7 +24,7 @@ public class ZWaveInitializationCompletedEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event. Must be set to the controller node.
 	 */
 	public ZWaveInitializationCompletedEvent(int nodeId) {
-		super(nodeId, 1);
+		super(nodeId);
 	}
 
 }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNetworkEvent.java
Patch:
@@ -25,7 +25,7 @@ public class ZWaveNetworkEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event.
 	 */
 	public ZWaveNetworkEvent(Type type, int nodeId, State state) {
-		super(nodeId, 1);
+		super(nodeId);
 		
 		this.type = type;
 		this.state = state;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNodeStatusEvent.java
Patch:
@@ -22,7 +22,7 @@ public class ZWaveNodeStatusEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event.
 	 */
 	public ZWaveNodeStatusEvent(int nodeId, State state) {
-		super(nodeId, 1);
+		super(nodeId);
 
 		this.state = state;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveTransactionCompletedEvent.java
Patch:
@@ -26,7 +26,7 @@ public class ZWaveTransactionCompletedEvent extends ZWaveEvent {
 	 * @param completedMessage the original {@link SerialMessage} that has been completed.
 	 */
 	public ZWaveTransactionCompletedEvent(SerialMessage completedMessage) {
-		super(completedMessage.getMessageNode(), 1);
+		super(completedMessage.getMessageNode());
 
 		this.completedMessage = completedMessage;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ApplicationCommandMessageClass.java
Patch:
@@ -82,7 +82,7 @@ public  boolean handleRequest(ZWaveController zController, SerialMessage lastSen
 		}
 		
 		logger.trace("NODE {}: Found Command Class {}, passing to handleApplicationCommandRequest", nodeId, zwaveCommandClass.getCommandClass().getLabel());
-		zwaveCommandClass.handleApplicationCommandRequest(incomingMessage, 4, 1);
+		zwaveCommandClass.handleApplicationCommandRequest(incomingMessage, 4, 0);
 
 		checkTransactionComplete(lastSentMessage, incomingMessage);
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveGenericBindingProvider.java
Patch:
@@ -66,7 +66,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 			throw new BindingConfigParseException(segments[1] + " is not a valid node id.");
 		}
 		
-		int endpoint = 1;
+		int endpoint = 0;
 		Integer refreshInterval = null;
 		Map<String, String> arguments = new HashMap<String, String>();
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveEndpoint.java
Patch:
@@ -40,6 +40,9 @@ public class ZWaveEndpoint {
 	 * @param endpointId the endpoint ID.
 	 */
 	public ZWaveEndpoint(int endpointId) {
+		if (endpointId == 0) {
+			throw new IllegalArgumentException("Endpoint number cannot be 0");
+		}
 		this.endpointId = endpointId;
 		this.deviceClass = new ZWaveDeviceClass(Basic.NOT_KNOWN,
 				Generic.NOT_KNOWN, Specific.NOT_USED);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveInclusionEvent.java
Patch:
@@ -22,13 +22,13 @@ public class ZWaveInclusionEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event.
 	 */
 	public ZWaveInclusionEvent(Type type, int nodeId) {
-		super(nodeId, 1);
+		super(nodeId);
 		
 		this.type = type;
 	}
 
 	public ZWaveInclusionEvent(Type type) {
-		super(255, 1);
+		super(255);
 		
 		this.type = type;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveInitializationCompletedEvent.java
Patch:
@@ -24,7 +24,7 @@ public class ZWaveInitializationCompletedEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event. Must be set to the controller node.
 	 */
 	public ZWaveInitializationCompletedEvent(int nodeId) {
-		super(nodeId, 1);
+		super(nodeId);
 	}
 
 }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNetworkEvent.java
Patch:
@@ -25,7 +25,7 @@ public class ZWaveNetworkEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event.
 	 */
 	public ZWaveNetworkEvent(Type type, int nodeId, State state) {
-		super(nodeId, 1);
+		super(nodeId);
 		
 		this.type = type;
 		this.state = state;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNodeStatusEvent.java
Patch:
@@ -22,7 +22,7 @@ public class ZWaveNodeStatusEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event.
 	 */
 	public ZWaveNodeStatusEvent(int nodeId, State state) {
-		super(nodeId, 1);
+		super(nodeId);
 
 		this.state = state;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveTransactionCompletedEvent.java
Patch:
@@ -26,7 +26,7 @@ public class ZWaveTransactionCompletedEvent extends ZWaveEvent {
 	 * @param completedMessage the original {@link SerialMessage} that has been completed.
 	 */
 	public ZWaveTransactionCompletedEvent(SerialMessage completedMessage) {
-		super(completedMessage.getMessageNode(), 1);
+		super(completedMessage.getMessageNode());
 
 		this.completedMessage = completedMessage;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ApplicationCommandMessageClass.java
Patch:
@@ -81,7 +81,7 @@ public  boolean handleRequest(ZWaveController zController, SerialMessage lastSen
 		}
 		
 		logger.trace("NODE {}: Found Command Class {}, passing to handleApplicationCommandRequest", nodeId, zwaveCommandClass.getCommandClass().getLabel());
-		zwaveCommandClass.handleApplicationCommandRequest(incomingMessage, 4, 1);
+		zwaveCommandClass.handleApplicationCommandRequest(incomingMessage, 4, 0);
 
 		checkTransactionComplete(lastSentMessage, incomingMessage);
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java
Patch:
@@ -536,7 +536,7 @@ public void checkForDeadOrSleepingNodes(){
 			logger.debug(String.format("NODE %d: Has been in Stage %s since %s", entry.getKey(), entry.getValue().getNodeStage().getLabel(), entry.getValue().getQueryStageTimeStamp().toString()));
 			
 			if(entry.getValue().getNodeStage() == NodeStage.DONE || entry.getValue().getNodeStage() == NodeStage.DEAD
-					|| (!entry.getValue().isListening() && !entry.getValue().isFrequentlyListening())) {
+					 || entry.getValue().getNodeStage() == NodeStage.FAILED || (!entry.getValue().isListening() && !entry.getValue().isFrequentlyListening())) {
 				completeCount++;
 				continue;
 			}
@@ -546,7 +546,7 @@ public void checkForDeadOrSleepingNodes(){
 			if(Calendar.getInstance().getTimeInMillis() < (entry.getValue().getQueryStageTimeStamp().getTime() + QUERY_STAGE_TIMEOUT))
 				continue;
 			
-			logger.warn(String.format("NODE %d: May be dead, setting stage to DEAD.", entry.getKey()));
+			logger.warn("NODE {}: May be dead, setting stage to DEAD.", entry.getKey());
 			entry.getValue().setNodeStage(NodeStage.DEAD);
 
 			completeCount++;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -432,8 +432,10 @@ public void incrementResendCount() {
 	 */
 	public void resetResendCount() {
 		this.resendCount = 0;
-		if (this.nodeStageAdvancer.isInitializationComplete() && this.nodeStage != NodeStage.DEAD)
+		if (this.nodeStageAdvancer.isInitializationComplete() &&
+				this.nodeStage != NodeStage.DEAD && this.nodeStage != NodeStage.FAILED) {
 			this.nodeStage = NodeStage.DONE;
+		}
 		this.lastUpdated = Calendar.getInstance().getTime();
 	}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SendDataMessageClass.java
Patch:
@@ -103,9 +103,10 @@ public boolean handleFailedSendDataRequest(ZWaveController zController, SerialMe
 
 		ZWaveNode node = zController.getNode(originalMessage.getMessageNode());
 
-		// No retries if the node is DEAD
-		if (node.getNodeStage() == NodeStage.DEAD)
+		// No retries if the node is DEAD or FAILED
+		if (node.getNodeStage() == NodeStage.DEAD || node.getNodeStage() == NodeStage.FAILED) {
 			return false;
+		}
 
 		// High priority messages get requeued, low priority get dropped
 		if (!node.isListening() && !node.isFrequentlyListening()

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java
Patch:
@@ -253,7 +253,7 @@ private HmVariable createVariable(String name, Object value) {
 		HmVariable var = new HmVariable();
 		var.setName(name);
 		var.setWriteable(true);
-		var.setValue(guessType(value));
+		var.setValueType(guessType(value));
 		var.setValue(value);
 		return var;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAssociationCommandClass.java
Patch:
@@ -402,9 +402,11 @@ public void addMember(int member) {
 
 	@Override
 	public Collection<SerialMessage> getDynamicValues(boolean refresh) {
+		logger.debug("NODE {}: Initialising associations. MaxGroups={}", this.getNode(), maxGroups);
+
 		ArrayList<SerialMessage> result = new ArrayList<SerialMessage>();
 		// If we're already initialized, then don't do it again unless we're refreshing
-		if(refresh == true || initialiseDone == false) {
+		if(refresh == true || dynamicDone == false) {
 			for(int group = 1; group <= maxGroups; group++) {
 				result.add(this.getAssociationMessage(group));
 			}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -47,7 +47,7 @@ public abstract class ZWaveCommandClass {
 	private ZWaveNode node;
 	@XStreamOmitField
 	private ZWaveController controller;
-	@XStreamOmitField
+//	@XStreamOmitField
 	private ZWaveEndpoint endpoint;
 	
 	private int version = 0;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAlarmCommandClass.java
Patch:
@@ -130,7 +130,7 @@ public SerialMessage getValueMessage() {
 		for (Map.Entry<AlarmType, Alarm> entry : this.alarms.entrySet()) {
 			return getMessage(entry.getValue().getAlarmType());
 		}
-		
+
 		// in case there are no supported alarms, get them.
 		
 		return getMessage(AlarmType.GENERAL);

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java
Patch:
@@ -38,7 +38,7 @@ public static Calendar truncateToMidnight(Calendar calendar) {
 	public static Range getRange(int startMonth, int startDay, int endMonth, int endDay) {
 		Calendar start = Calendar.getInstance();
 		start.set(Calendar.MONTH, startMonth);
-		start.set(Calendar.DAY_OF_MONTH, startMonth);
+		start.set(Calendar.DAY_OF_MONTH, startDay);
 		start = truncateToMidnight(start);
 
 		Calendar end = Calendar.getInstance();

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/HueBindingConfig.java
Patch:
@@ -136,7 +136,7 @@ private int parseStepSizeConfigString(String configString)
 			return Integer.parseInt(configString);
 		} catch (Exception e) {
 			throw new BindingConfigParseException(
-					"Error parsing device number.");
+					"Error parsing step size.");
 		}
 	}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterHandler.java
Patch:
@@ -72,6 +72,8 @@ public ZWaveConverterHandler(ZWaveController controller, EventPublisher eventPub
 		converters.put(CommandClass.METER, new ZWaveMeterConverter(controller, eventPublisher));
 		converters.put(CommandClass.BASIC, new ZWaveBasicConverter(controller, eventPublisher));
 		converters.put(CommandClass.SCENE_ACTIVATION, new ZWaveSceneConverter(controller, eventPublisher));
+		converters.put(CommandClass.ALARM, new ZWaveAlarmConverter(controller, eventPublisher));
+
 		infoConverter = new ZWaveInfoConverter(controller, eventPublisher);
 		
 		// add preferred command classes per Item class here

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/NodeStage.java
Patch:
@@ -36,7 +36,8 @@ public enum NodeStage {
 	CONFIG(14, "Parameter Information"),
 	DONE(15, "Node Complete"),
 	INIT(16, "Node Not Started"),
-	DEAD(17, "Node Dead");
+	DEAD(17, "Node Dead"),
+	FAILED(18,"Node Failed");
 	
 	private int stage;
 	private String label;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -380,7 +380,7 @@ public enum CommandClass {
 		DOOR_LOCK(0x62,"DOOR_LOCK",null),
 		USER_CODE(0x63,"USER_CODE",null),
 		CONFIGURATION(0x70,"CONFIGURATION",ZWaveConfigurationCommandClass.class),
-		ALARM(0x71,"ALARM",null),
+		ALARM(0x71,"ALARM",ZWaveAlarmCommandClass.class),
 		MANUFACTURER_SPECIFIC(0x72,"MANUFACTURER_SPECIFIC",ZWaveManufacturerSpecificCommandClass.class),
 		POWERLEVEL(0x73,"POWERLEVEL",null),
 		PROTECTION(0x75,"PROTECTION",null),

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNetworkEvent.java
Patch:
@@ -40,7 +40,7 @@ public State getState() {
 	}
 
 	public enum Type {
-		AssignSucReturnRoute, AssignReturnRoute, DeleteReturnRoute, NodeNeighborUpdate, NodeRoutingInfo, AssociationUpdate,
+		AssignSucReturnRoute, AssignReturnRoute, DeleteReturnRoute, NodeNeighborUpdate, NodeRoutingInfo, AssociationUpdate, DeleteNode, FailedNode
 		
 		
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNodeStatusEvent.java
Patch:
@@ -32,6 +32,6 @@ public State getState() {
 	}
 
 	public enum State {
-		Dead, Alive
+		Dead, Alive, Failed
 	}
 }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ZWaveCommandProcessor.java
Patch:
@@ -104,6 +104,7 @@ public static ZWaveCommandProcessor getMessageDispatcher(SerialMessage.SerialMes
 			messageMap.put(SerialMessage.SerialMessageClass.IdentifyNode, IdentifyNodeMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.MemoryGetId, MemoryGetIdMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.RemoveFailedNodeID, RemoveFailedNodeMessageClass.class);
+			messageMap.put(SerialMessage.SerialMessageClass.IsFailedNodeID, IsFailedNodeMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.RemoveNodeFromNetwork, RemoveNodeMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.RequestNodeInfo, RequestNodeInfoMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.RequestNodeNeighborUpdate, RequestNodeNeighborUpdateMessageClass.class);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatFanStateConverter.java
Patch:
@@ -47,7 +47,7 @@ public ZWaveThermostatFanStateConverter(ZWaveController controller,
 	void executeRefresh(ZWaveNode node,
 			ZWaveThermostatFanStateCommandClass commandClass, int endpointId,
 			Map<String, String> arguments) {
-		logger.debug("NODE {}: Generating poll message for {} for node {} endpoint {}", commandClass.getCommandClass().getLabel(), node.getNodeId(), endpointId);
+		logger.debug("NODE {}: Generating poll message for {} endpoint {}", node.getNodeId(), commandClass.getCommandClass().getLabel(), endpointId);
 		SerialMessage serialMessage = node.encapsulate(commandClass.getValueMessage(), commandClass, endpointId);
 
 		if (serialMessage == null) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatModeConverter.java
Patch:
@@ -51,7 +51,7 @@ public ZWaveThermostatModeConverter(ZWaveController controller,
 	void executeRefresh(ZWaveNode node,
 			ZWaveThermostatModeCommandClass commandClass, int endpointId,
 			Map<String, String> arguments) {
-		logger.debug("NODE {}: Generating poll message for {} for node {} endpoint {}", commandClass.getCommandClass().getLabel(), node.getNodeId(), endpointId);
+		logger.debug("NODE {}: Generating poll message for {} endpoint {}", node.getNodeId(), commandClass.getCommandClass().getLabel(), endpointId);
 		SerialMessage serialMessage = node.encapsulate(commandClass.getValueMessage(), commandClass, endpointId);
 		
 		if (serialMessage == null) {

File: bundles/io/org.openhab.io.transport.cul/src/main/java/org/openhab/io/transport/cul/internal/AbstractCULHandler.java
Patch:
@@ -235,7 +235,7 @@ protected void processNextLine() throws CULCommunicationException  {
 			} else if ("LOVF".equals(data)) {
 				log.warn("(LOVF) Limit Overflow: Last message lost. You are using more than 1% transmitting time. Reduce the number of rf messages");
 				return;
-			} else if (data.matches("^.. *\\d*"))
+			} else if (data.matches("^\\d+\\s+\\d+"))
 			{					
 				processCreditReport(data);
 				return;
@@ -293,7 +293,7 @@ private void requestCreditReport() {
 	 * @throws CULCommunicationException
 	 */
 	private  void writeMessage(String message) throws CULCommunicationException {
-		log.debug("Sending raw message to CUL "+deviceName+":  +'"+ message+"'");
+		log.debug("Sending raw message to CUL "+deviceName+":  '"+ message+"'");
 		if (bw == null) {
 			log.error("Can't write message, BufferedWriter is NULL");
 		}

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java
Patch:
@@ -38,7 +38,7 @@ public static Calendar truncateToMidnight(Calendar calendar) {
 	public static Range getRange(int startMonth, int startDay, int endMonth, int endDay) {
 		Calendar start = Calendar.getInstance();
 		start.set(Calendar.MONTH, startMonth);
-		start.set(Calendar.DAY_OF_MONTH, startMonth);
+		start.set(Calendar.DAY_OF_MONTH, startDay);
 		start = truncateToMidnight(start);
 
 		Calendar end = Calendar.getInstance();

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/HueBindingConfig.java
Patch:
@@ -136,7 +136,7 @@ private int parseStepSizeConfigString(String configString)
 			return Integer.parseInt(configString);
 		} catch (Exception e) {
 			throw new BindingConfigParseException(
-					"Error parsing device number.");
+					"Error parsing step size.");
 		}
 	}
 

File: bundles/binding/org.openhab.binding.opensprinkler/src/main/java/org/openhab/binding/opensprinkler/internal/OpenSprinklerBinding.java
Patch:
@@ -103,7 +103,7 @@ protected void execute() {
 			String stationItemName = findFirstMatchingItemName(station);
 			logger.debug("Checking state of item: " + stationItemName);
 			
-			if ( stationItemName != null ) {
+			if ( stationItemName != null && openSprinkler != null ) {
 				if ( openSprinkler.isStationOpen(station) ) {
 					eventPublisher.postUpdate(stationItemName, OnOffType.ON);
 				} else {

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java
Patch:
@@ -38,7 +38,7 @@ public static Calendar truncateToMidnight(Calendar calendar) {
 	public static Range getRange(int startMonth, int startDay, int endMonth, int endDay) {
 		Calendar start = Calendar.getInstance();
 		start.set(Calendar.MONTH, startMonth);
-		start.set(Calendar.DAY_OF_MONTH, startMonth);
+		start.set(Calendar.DAY_OF_MONTH, startDay);
 		start = truncateToMidnight(start);
 
 		Calendar end = Calendar.getInstance();

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/HueBindingConfig.java
Patch:
@@ -136,7 +136,7 @@ private int parseStepSizeConfigString(String configString)
 			return Integer.parseInt(configString);
 		} catch (Exception e) {
 			throw new BindingConfigParseException(
-					"Error parsing device number.");
+					"Error parsing step size.");
 		}
 	}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveInclusionEvent.java
Patch:
@@ -22,13 +22,13 @@ public class ZWaveInclusionEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event.
 	 */
 	public ZWaveInclusionEvent(Type type, int nodeId) {
-		super(nodeId, 1);
+		super(nodeId);
 		
 		this.type = type;
 	}
 
 	public ZWaveInclusionEvent(Type type) {
-		super(255, 1);
+		super(255);
 		
 		this.type = type;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveInitializationCompletedEvent.java
Patch:
@@ -24,7 +24,7 @@ public class ZWaveInitializationCompletedEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event. Must be set to the controller node.
 	 */
 	public ZWaveInitializationCompletedEvent(int nodeId) {
-		super(nodeId, 1);
+		super(nodeId);
 	}
 
 }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNetworkEvent.java
Patch:
@@ -25,7 +25,7 @@ public class ZWaveNetworkEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event.
 	 */
 	public ZWaveNetworkEvent(Type type, int nodeId, State state) {
-		super(nodeId, 1);
+		super(nodeId);
 		
 		this.type = type;
 		this.state = state;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveNodeStatusEvent.java
Patch:
@@ -22,7 +22,7 @@ public class ZWaveNodeStatusEvent extends ZWaveEvent {
 	 * @param nodeId the nodeId of the event.
 	 */
 	public ZWaveNodeStatusEvent(int nodeId, State state) {
-		super(nodeId, 1);
+		super(nodeId);
 
 		this.state = state;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/event/ZWaveTransactionCompletedEvent.java
Patch:
@@ -26,7 +26,7 @@ public class ZWaveTransactionCompletedEvent extends ZWaveEvent {
 	 * @param completedMessage the original {@link SerialMessage} that has been completed.
 	 */
 	public ZWaveTransactionCompletedEvent(SerialMessage completedMessage) {
-		super(completedMessage.getMessageNode(), 1);
+		super(completedMessage.getMessageNode());
 
 		this.completedMessage = completedMessage;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ApplicationCommandMessageClass.java
Patch:
@@ -76,7 +76,7 @@ public  boolean handleRequest(ZWaveController zController, SerialMessage lastSen
 		}
 		
 		logger.trace("NODE {}: Found Command Class {}, passing to handleApplicationCommandRequest", nodeId, zwaveCommandClass.getCommandClass().getLabel());
-		zwaveCommandClass.handleApplicationCommandRequest(incomingMessage, 4, 1);
+		zwaveCommandClass.handleApplicationCommandRequest(incomingMessage, 4, 0);
 
 		checkTransactionComplete(lastSentMessage, incomingMessage);
 		

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/config/MiosBindingConfig.java
Patch:
@@ -57,7 +57,7 @@
  * <p>
  * <ul>
  * <li>
- * <tt>mios="unit:<i>unitName</i>,<i>miosThing</i>{,command:<i>commandThing</i>}{,in:<i>inTransform</i>}{,out:<i>outTransform</i>}"</tt>
+ * <tt>mios="unit:<i>unitName</i>,<i>miosThing</i>{,command:<i>commandTransform</i>}{,in:<i>inTransform</i>}{,out:<i>outTransform</i>}"</tt>
  * </ul>
  * <p>
  * 

File: bundles/action/org.openhab.action.xpl/src/main/java/org/openhab/action/xpl/internal/XplActivator.java
Patch:
@@ -18,11 +18,11 @@
  * Extension of the default OSGi bundle activator
  * 
  * @author clinique
- * @since 1.5.0
+ * @since 1.6.0
  */
-public final class xPLActivator implements BundleActivator {
+public final class XplActivator implements BundleActivator {
 
-	private static Logger logger = LoggerFactory.getLogger(xPLActivator.class); 
+	private static Logger logger = LoggerFactory.getLogger(XplActivator.class); 
 	
 	private static BundleContext context;
 	

File: bundles/binding/org.openhab.binding.xpl/src/main/java/org/openhab/binding/xpl/internal/XplActivator.java
Patch:
@@ -18,11 +18,11 @@
  * Extension of the default OSGi bundle activator
  * 
  * @author Clinique
- * @since 1.5.0
+ * @since 1.6.0
  */
-public final class xPLActivator implements BundleActivator {
+public final class XplActivator implements BundleActivator {
 
-	private static Logger logger = LoggerFactory.getLogger(xPLActivator.class); 
+	private static Logger logger = LoggerFactory.getLogger(XplActivator.class); 
 	
 	private static BundleContext context;
 	

File: bundles/binding/org.openhab.binding.yamahareceiver/src/main/java/org/openhab/binding/yamahareceiver/internal/YamahaReceiverBindingConfig.java
Patch:
@@ -45,7 +45,7 @@ public String toString() {
 	}
 
 	public enum BindingType {
-		power, volumePercent, volumeDb, mute, input, surroundProgram;
+		power, volumePercent, volumeDb, mute, input, surroundProgram, netRadio;
 	}
 
 	private final String deviceUid;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterHandler.java
Patch:
@@ -72,6 +72,8 @@ public ZWaveConverterHandler(ZWaveController controller, EventPublisher eventPub
 		converters.put(CommandClass.METER, new ZWaveMeterConverter(controller, eventPublisher));
 		converters.put(CommandClass.BASIC, new ZWaveBasicConverter(controller, eventPublisher));
 		converters.put(CommandClass.SCENE_ACTIVATION, new ZWaveSceneConverter(controller, eventPublisher));
+		converters.put(CommandClass.ALARM, new ZWaveAlarmConverter(controller, eventPublisher));
+
 		infoConverter = new ZWaveInfoConverter(controller, eventPublisher);
 		
 		// add preferred command classes per Item class here

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatFanModeConverter.java
Patch:
@@ -11,7 +11,6 @@
 import org.openhab.binding.zwave.internal.protocol.ZWaveController;
 import org.openhab.binding.zwave.internal.protocol.ZWaveNode;
 import org.openhab.binding.zwave.internal.protocol.commandclass.ZWaveThermostatFanModeCommandClass;
-import org.openhab.binding.zwave.internal.protocol.commandclass.ZWaveThermostatModeCommandClass;
 import org.openhab.binding.zwave.internal.protocol.event.ZWaveCommandClassValueEvent;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatFanStateConverter.java
Patch:
@@ -8,7 +8,6 @@
 import org.openhab.binding.zwave.internal.protocol.ZWaveController;
 import org.openhab.binding.zwave.internal.protocol.ZWaveNode;
 import org.openhab.binding.zwave.internal.protocol.commandclass.ZWaveThermostatFanStateCommandClass;
-import org.openhab.binding.zwave.internal.protocol.commandclass.ZWaveThermostatModeCommandClass;
 import org.openhab.binding.zwave.internal.protocol.event.ZWaveCommandClassValueEvent;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatModeConverter.java
Patch:
@@ -11,7 +11,6 @@
 import org.openhab.binding.zwave.internal.protocol.ZWaveController;
 import org.openhab.binding.zwave.internal.protocol.ZWaveNode;
 import org.openhab.binding.zwave.internal.protocol.commandclass.ZWaveThermostatModeCommandClass;
-import org.openhab.binding.zwave.internal.protocol.commandclass.ZWaveThermostatSetpointCommandClass;
 import org.openhab.binding.zwave.internal.protocol.event.ZWaveCommandClassValueEvent;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatOperatingStateConverter.java
Patch:
@@ -8,7 +8,6 @@
 import org.openhab.binding.zwave.internal.protocol.ZWaveController;
 import org.openhab.binding.zwave.internal.protocol.ZWaveNode;
 import org.openhab.binding.zwave.internal.protocol.commandclass.ZWaveThermostatOperatingStateCommandClass;
-import org.openhab.binding.zwave.internal.protocol.commandclass.ZWaveThermostatSetpointCommandClass;
 import org.openhab.binding.zwave.internal.protocol.event.ZWaveCommandClassValueEvent;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -341,7 +341,7 @@ public enum CommandClass {
 		NO_OPERATION(0x00,"NO_OPERATION", ZWaveNoOperationCommandClass.class),
 		BASIC(0x20,"BASIC",ZWaveBasicCommandClass.class),
 		CONTROLLER_REPLICATION(0x21,"CONTROLLER_REPLICATION",null),
-		APPLICATION_STATUS(0x22,"APPLICATION_STATUS",null),
+		APPLICATION_STATUS(0x22,"APPLICATION_STATUS",ZWaveApplicationStatusClass.class),
 		ZIP_SERVICES(0x23,"ZIP_SERVICES",null),
 		ZIP_SERVER(0x24,"ZIP_SERVER",null),
 		SWITCH_BINARY(0x25,"SWITCH_BINARY",ZWaveBinarySwitchCommandClass.class),
@@ -380,7 +380,7 @@ public enum CommandClass {
 		DOOR_LOCK(0x62,"DOOR_LOCK",null),
 		USER_CODE(0x63,"USER_CODE",null),
 		CONFIGURATION(0x70,"CONFIGURATION",ZWaveConfigurationCommandClass.class),
-		ALARM(0x71,"ALARM",null),
+		ALARM(0x71,"ALARM",ZWaveAlarmCommandClass.class),
 		MANUFACTURER_SPECIFIC(0x72,"MANUFACTURER_SPECIFIC",ZWaveManufacturerSpecificCommandClass.class),
 		POWERLEVEL(0x73,"POWERLEVEL",null),
 		PROTECTION(0x75,"PROTECTION",null),

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveHailCommandClass.java
Patch:
@@ -8,7 +8,6 @@
  */
 package org.openhab.binding.zwave.internal.protocol.commandclass;
 
-import java.util.Collection;
 
 import org.openhab.binding.zwave.internal.protocol.SerialMessage;
 import org.openhab.binding.zwave.internal.protocol.ZWaveController;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -343,6 +343,8 @@ public boolean restoreFromConfig() {
 		this.node.setDeviceId(restoredNode.getDeviceId());
 		this.node.setDeviceType(restoredNode.getDeviceType());
 		this.node.setManufacturer(restoredNode.getManufacturer());
+		
+		this.node.setHealState(restoredNode.getHealState());
 
 		for (ZWaveCommandClass commandClass : restoredNode.getCommandClasses()) {
 			commandClass.setController(this.controller);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveEndpoint.java
Patch:
@@ -40,6 +40,9 @@ public class ZWaveEndpoint {
 	 * @param endpointId the endpoint ID.
 	 */
 	public ZWaveEndpoint(int endpointId) {
+		if (endpointId == 0) {
+			throw new IllegalArgumentException("Endpoint number cannot be 0");
+		}
 		this.endpointId = endpointId;
 		this.deviceClass = new ZWaveDeviceClass(Basic.NOT_KNOWN,
 				Generic.NOT_KNOWN, Specific.NOT_USED);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveGenericBindingProvider.java
Patch:
@@ -66,7 +66,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 			throw new BindingConfigParseException(segments[1] + " is not a valid node id.");
 		}
 		
-		int endpoint = 1;
+		int endpoint = 0;
 		Integer refreshInterval = null;
 		Map<String, String> arguments = new HashMap<String, String>();
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterHandler.java
Patch:
@@ -115,7 +115,7 @@ private ZWaveCommandClass resolveConverter(Item item, ZWaveNode node, int endpoi
 		ZWaveMultiInstanceCommandClass multiInstanceCommandClass = null;
 		ZWaveCommandClass result = null;
 		
-		if (endpointId != 1)
+		if (endpointId != 0)
 			multiInstanceCommandClass = (ZWaveMultiInstanceCommandClass)node.getCommandClass(CommandClass.MULTI_INSTANCE);
 
 		if (!preferredCommandClasses.containsKey(item.getClass())) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -484,7 +484,7 @@ public void addCommandClass(ZWaveCommandClass commandClass)
 	
 	/**
 	 * Resolves a command class for this node. First endpoint is checked. 
-	 * If endpoint == 1 or (endpoint != 1 and version of the multi instance 
+	 * If endpoint == 0 or (endpoint != 1 and version of the multi instance 
 	 * command == 1) then return a supported command class on the node itself. 
 	 * If endpoint != 1 and version of the multi instance command == 2 then
 	 * first try command classes of endpoints. If not found the return a  
@@ -520,7 +520,7 @@ public ZWaveCommandClass resolveCommandClass(CommandClass commandClass, int endp
 				result.getInstances() >= endpointId)
 			return result;
 		
-		return endpointId == 1 ? result : null;
+		return endpointId == 0 ? result : null;
 	}
 	
 	/**

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveGenericBindingProvider.java
Patch:
@@ -14,6 +14,8 @@
 import org.openhab.binding.zwave.ZWaveBindingConfig;
 import org.openhab.binding.zwave.ZWaveBindingProvider;
 import org.openhab.core.items.Item;
+import org.openhab.model.item.binding.AbstractGenericBindingProvider;
+import org.openhab.model.item.binding.BindingConfigParseException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -64,7 +66,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 			throw new BindingConfigParseException(segments[1] + " is not a valid node id.");
 		}
 		
-		int endpoint = 0;
+		int endpoint = 1;
 		Integer refreshInterval = null;
 		Map<String, String> arguments = new HashMap<String, String>();
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveGenericBindingProvider.java
Patch:
@@ -14,8 +14,6 @@
 import org.openhab.binding.zwave.ZWaveBindingConfig;
 import org.openhab.binding.zwave.ZWaveBindingProvider;
 import org.openhab.core.items.Item;
-import org.openhab.model.item.binding.AbstractGenericBindingProvider;
-import org.openhab.model.item.binding.BindingConfigParseException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -66,7 +64,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 			throw new BindingConfigParseException(segments[1] + " is not a valid node id.");
 		}
 		
-		int endpoint = 1;
+		int endpoint = 0;
 		Integer refreshInterval = null;
 		Map<String, String> arguments = new HashMap<String, String>();
 		

File: bundles/binding/org.openhab.binding.iec6205621meter/src/main/java/org/openhab/binding/iec6205621meter/internal/Iec6205621MeterBinding.java
Patch:
@@ -115,7 +115,8 @@ protected void execute() {
 
 				for (String itemName : provider.getItemNames()) {
 					String obis = provider.getObis(itemName);
-					if (obis != null && dataSets.containsKey(obis)) {
+					String meterName = provider.getMeterName(itemName);
+					if (obis != null && dataSets.containsKey(obis) && meterName != null && meterName.equals(entry.getKey())) {
 						DataSet dataSet = dataSets.get(obis);
 						Class<? extends Item> itemType = provider
 								.getItemType(itemName);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -246,7 +246,7 @@ record = new OpenHABConfigurationRecord(domain, "class" + iClass.Id,
 					record = new OpenHABConfigurationRecord("nodes/" + "node" + node.getNodeId() + "/", "Node " + node.getNodeId());
 				}
 				else {
-					record = new OpenHABConfigurationRecord("nodes/" + "node" + node.getNodeId() + "/", node.getName());
+					record = new OpenHABConfigurationRecord("nodes/" + "node" + node.getNodeId() + "/", node.getNodeId() + ": " + node.getName());
 				}
 				
 				// If we can't find the product, then try and find just the

File: bundles/action/org.openhab.action.xpl/src/main/java/org/openhab/action/xpl/internal/XplActionService.java
Patch:
@@ -18,7 +18,7 @@
  * This class registers an OSGi service for the Xpl action.
  * 
  * @author clinique
- * @since 1.5.0
+ * @since 1.6.0
  */
 public class XplActionService implements ActionService {
 

File: bundles/action/org.openhab.action.xpl/src/main/java/org/openhab/action/xpl/internal/XplActivator.java
Patch:
@@ -18,7 +18,7 @@
  * Extension of the default OSGi bundle activator
  * 
  * @author clinique
- * @since 1.5.0
+ * @since 1.6.0
  */
 public final class XplActivator implements BundleActivator {
 

File: bundles/binding/org.openhab.binding.xpl/src/main/java/org/openhab/binding/xpl/XplBindingConfig.java
Patch:
@@ -7,11 +7,10 @@
  * This is a class that stores xPL binding configuration elements :
  *	- an interface to the message template to match toward incoming messages
  * 	- the name of the body key that will be returned if matched
+ * 
  * @author clinique
- * @since 1.5.0
- *
+ * @since 1.6.0
  */
-
 public class XplBindingConfig implements BindingConfig {
 	public xPL_MutableMessageI Message;
 	public String NamedParameter;

File: bundles/binding/org.openhab.binding.xpl/src/main/java/org/openhab/binding/xpl/XplBindingProvider.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.xpl;
 
 import java.util.List;
+
 import org.cdp1802.xpl.xPL_MessageI;
 import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.items.Item;
@@ -21,7 +22,7 @@
  * taken into account.
  * 
  * @author clinique
- * @since 1.5.0
+ * @since 1.6.0
  */
 public interface XplBindingProvider extends BindingProvider {
 	
@@ -56,4 +57,5 @@ public interface XplBindingProvider extends BindingProvider {
 	 *         could be found.
 	 */
 	public Item getItem(String itemName);
+	
 }

File: bundles/binding/org.openhab.binding.xpl/src/main/java/org/openhab/binding/xpl/internal/XplActivator.java
Patch:
@@ -18,7 +18,7 @@
  * Extension of the default OSGi bundle activator
  * 
  * @author Clinique
- * @since 1.5.0
+ * @since 1.6.0
  */
 public final class XplActivator implements BundleActivator {
 

File: bundles/binding/org.openhab.binding.xpl/src/main/java/org/openhab/binding/xpl/internal/XplBinding.java
Patch:
@@ -10,6 +10,8 @@
 
 import java.util.List;
 
+import org.cdp1802.xpl.xPL_MessageI;
+import org.cdp1802.xpl.xPL_MessageListenerI;
 import org.openhab.binding.xpl.XplBindingConfig;
 import org.openhab.binding.xpl.XplBindingProvider;
 import org.openhab.core.binding.AbstractBinding;
@@ -23,14 +25,12 @@
 import org.openhab.core.library.types.StringType;
 import org.openhab.core.types.Command;
 import org.openhab.io.transport.xpl.XplTransportService;
-import org.cdp1802.xpl.xPL_MessageI;
-import org.cdp1802.xpl.xPL_MessageListenerI;
 
 /**
  * xPL binding for openHAB
  * 
  * @author clinique
- * @since 1.5.0
+ * @since 1.6.0
  */
 public class XplBinding extends AbstractBinding<XplBindingProvider> implements xPL_MessageListenerI {
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -246,7 +246,7 @@ record = new OpenHABConfigurationRecord(domain, "class" + iClass.Id,
 					record = new OpenHABConfigurationRecord("nodes/" + "node" + node.getNodeId() + "/", "Node " + node.getNodeId());
 				}
 				else {
-					record = new OpenHABConfigurationRecord("nodes/" + "node" + node.getNodeId() + "/", node.getName());
+					record = new OpenHABConfigurationRecord("nodes/" + "node" + node.getNodeId() + "/", node.getNodeId() + ": " + node.getName());
 				}
 				
 				// If we can't find the product, then try and find just the

File: bundles/io/org.openhab.io.squeezeserver/src/main/java/org/openhab/io/squeezeserver/SqueezePlayer.java
Patch:
@@ -383,7 +383,6 @@ public String getPlayerId() {
 		}
 	}
 	
-	
 	private synchronized void fireCurrentPlaylistIndexEvent() {
 		PlayerEvent event = new PlayerEvent(this);
 	    Iterator<SqueezePlayerEventListener> itr = squeezeServer.getPlayerEventListeners().iterator();

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/AnelBindingProvider.java
Patch:
@@ -13,7 +13,7 @@
 import org.openhab.core.items.Item;
 
 /**
- * The binding provider.
+ * The binding provider for Anel Elektronik NET-PrwCrtl devices.
  * 
  * @author paphko
  * @since 1.6.0

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/Squeezebox.java
Patch:
@@ -214,7 +214,7 @@ public static boolean squeezeboxSpeak(
 			
 			// create an instance of our special listener so we can detect when the sentence is complete
 			SqueezeboxSentenceListener listener = new SqueezeboxSentenceListener(playerId);
-			player.addPlayerEventListener(listener);
+			squeezeServer.addPlayerEventListener(listener);
 			
 			// send the URL (this will power up the player and un-mute if necessary)
 			logger.trace("Sending URL '{}' to device to play", url);
@@ -236,7 +236,7 @@ public static boolean squeezeboxSpeak(
 			}
 			
 			// clean up the listener
-			player.removePlayerEventListener(listener);
+			squeezeServer.removePlayerEventListener(listener);
 			listener = null;
 		}
 		

File: bundles/binding/org.openhab.binding.yamahareceiver/src/main/java/org/openhab/binding/yamahareceiver/internal/hardware/YamahaReceiverProxy.java
Patch:
@@ -87,8 +87,9 @@ public void setSurroundProgram(Zone zone, String name) throws IOException {
 	}
 
 	public void setNetRadio(int lineNo) throws IOException {
-		postAndGetResponse("<?xml version=\"1.0\" encoding=\"utf-8\"?><YAMAHA_AV cmd=\"PUT\"><NET_RADIO><Play_Control><Preset_Sel>"
-				+ lineNo + "</Preset_Sel></Play_Control></NET_RADIO></YAMAHA_AV>");
+		 /* Jump to specified line in preset list */
+		postAndGetResponse("<?xml version=\"1.0\" encoding=\"utf-8\"?><YAMAHA_AV cmd=\"PUT\"><NET_RADIO><Play_Control><Preset><Preset_Sel>"
+				+ lineNo + "</Preset_Sel></Preset></Play_Control></NET_RADIO></YAMAHA_AV>");
 	}
 	
 	public YamahaReceiverState getState(Zone zone) throws IOException {

File: bundles/binding/org.openhab.binding.anel/src/main/java/org/openhab/binding/anel/internal/AnelBinding.java
Patch:
@@ -271,6 +271,8 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 		// read new config
 		try {
 			refreshInterval = AnelConfigReader.readConfig(config, connectorThreads, bindingFacade);
+			logger.debug("Anel configuration read with refresh interval " + refreshInterval + "ms and "
+					+ connectorThreads.size() + " devices.");
 		} catch (ConfigurationException e) {
 			logger.error("Could not read configuration for Anel binding: " + e.getMessage());
 			return;
@@ -282,8 +284,8 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 
 		// successful! now start all device threads
 		for (String device : connectorThreads.keySet()) {
-			logger.debug("Starting message listener for device '" + device + "'");
 			final AnelConnectorThread connectorThread = connectorThreads.get(device);
+			logger.debug("Starting message listener for device: " + connectorThread);
 			connectorThread.start();
 		}
 

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/parser/AbstractWeatherParser.java
Patch:
@@ -100,7 +100,9 @@ public Weather startIfForecast(Weather weather, String propertyName) {
 	@Override
 	public boolean endIfForecast(Weather weather, Weather forecast, String propertyName) {
 		if (metadataHandler.isForecast(forecast.getProvider(), propertyName)) {
-			weather.getForecast().add((Forecast) forecast);
+			Forecast fc = (Forecast) forecast;
+			fc.setDay(weather.getForecast().size());
+			weather.getForecast().add(fc);
 			return true;
 		}
 		return false;

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/converter/property/AbstractDateConverter.java
Patch:
@@ -13,6 +13,7 @@
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Date;
+import java.util.Locale;
 
 import org.openhab.binding.weather.internal.converter.Converter;
 
@@ -30,7 +31,7 @@ public abstract class AbstractDateConverter implements Converter<Calendar> {
 	 * Creates a DateConverter with the specified pattern.
 	 */
 	public AbstractDateConverter(String pattern) {
-		DATE_PATTERN = new SimpleDateFormat(pattern);
+		DATE_PATTERN = new SimpleDateFormat(pattern, Locale.ENGLISH);
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/SqueezeboxBinding.java
Patch:
@@ -135,7 +135,7 @@ else if (command.equals(OnOffType.OFF))
 						if (command.equals(OnOffType.ON))
 							squeezeServer.syncPlayer(playerId, bindingConfig.getExtra()); 
 						else if (command.equals(OnOffType.OFF))
-							squeezeServer.unSyncPlayer(playerId);
+							squeezeServer.unSyncPlayer(bindingConfig.getExtra());
 						break;
 
 					default:

File: bundles/binding/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/SqueezeboxBinding.java
Patch:
@@ -135,7 +135,7 @@ else if (command.equals(OnOffType.OFF))
 						if (command.equals(OnOffType.ON))
 							squeezeServer.syncPlayer(playerId, bindingConfig.getExtra()); 
 						else if (command.equals(OnOffType.OFF))
-							squeezeServer.unSyncPlayer(playerId);
+							squeezeServer.unSyncPlayer(bindingConfig.getExtra());
 						break;
 
 					default:

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/ArithmeticGroupFunction.java
Patch:
@@ -57,7 +57,7 @@ public And(State activeValue, State passiveValue) {
 		public State calculate(List<Item> items) {
 			if(items!=null && items.size()>0) {
 				for(Item item : items) {
-					if(!activeState.equals(item.getState())) {
+					if(!activeState.equals(item.getStateAs(activeState.getClass()))) {
 						return passiveState;
 					}
 				}
@@ -132,7 +132,7 @@ public Or(State activeValue, State passiveValue) {
 		public State calculate(List<Item> items) {	
 			if(items!=null) {
 				for(Item item : items) {
-					if(activeState.equals(item.getState())) {
+					if(activeState.equals(item.getStateAs(activeState.getClass()))) {
 						return activeState;
 					}
 				}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAssociationCommandClass.java
Patch:
@@ -109,7 +109,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage, int off
 			return;
 		case ASSOCIATIONCMD_GROUPINGSREPORT:
 			logger.trace("Process Association GroupingsReport");
-			processGropuReport(serialMessage, offset);
+			processGroupingsReport(serialMessage, offset);
 			return;
 		default:
 			logger.warn(String.format("NODE %d: Unsupported Command 0x%02X for command class %s (0x%02X).", this.getNode().getNodeId(), command, this
@@ -216,9 +216,9 @@ protected void processAssociationReport(SerialMessage serialMessage, int offset)
 	 * @param offset
 	 *            the offset position from which to start message processing.
 	 */
-	protected void processGropuReport(SerialMessage serialMessage, int offset) {
+	protected void processGroupingsReport(SerialMessage serialMessage, int offset) {
 		maxGroups = serialMessage.getMessagePayloadByte(offset + 1);
-		logger.debug("processGropuReport number of groups {}", maxGroups);
+		logger.debug("NODE {} processGroupingsReport number of groups {}", getNode(), maxGroups);
 		//Start the process to query these nodes
 		updateAssociationsNode = 1;
 		configAssociations.clear();

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveThermostatSetpointConverter.java
Patch:
@@ -136,7 +136,7 @@ void receiveCommand(Item item, Command command, ZWaveNode node,
 		int scale = 0;
 		if (scaleString !=null ) scale= Integer.parseInt(scaleString);
 
-		logger.debug("NODE {}: Command received for {}", node.getNodeId(), command.toString());
+		logger.debug("NODE {}: Thermostat command received for {}", node.getNodeId(), command.toString());
 
 		if (converter == null) {
 			logger.warn("No converter found for item = {}, node = {} endpoint = {}, ignoring command.", item.getName(), node.getNodeId(), endpointId);
@@ -175,9 +175,7 @@ void receiveCommand(Item item, Command command, ZWaveNode node,
 			return;
 		}
 
-		logger.debug("NODE {}: sending update request !!!!!!!", node.getNodeId());
 		logger.debug("Sending Message: {}", serialMessage);
-
 		this.getController().sendData(serialMessage);
 	}
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/HomegearClient.java
Patch:
@@ -98,10 +98,11 @@ public void iterateAllDatapoints(HmValueItemIteratorCallback callback) throws Ho
 				Map<String, ?> entryMap = (Map<String, ?>) result[i];
 				HmDevice device = parseDevice(entryMap);
 				addBatteryInfo(device);
+				logger.trace("{}", device);
 
 				for (HmChannel channel : device.getChannels()) {
 					for (HmDatapoint dp : channel.getDatapoints()) {
-						logger.trace("{}", dp);
+						logger.trace("  {}", dp.toDumpString());
 						DatapointConfig bindingConfig = new DatapointConfig(device.getAddress(), channel.getNumber(),
 								dp.getName());
 						callback.iterate(bindingConfig, dp);
@@ -149,6 +150,7 @@ public void setVariable(HmValueItem hmValueItem, Object value) throws HomematicC
 	 */
 	@Override
 	public Map<String, HmRssiInfo> getRssiInfo() throws HomematicClientException {
+		logger.info("Reloading RSSI infos not necessary for Homegear, values are always up to date");
 		return new HashMap<String, HmRssiInfo>();
 	}
 

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java
Patch:
@@ -434,7 +434,7 @@ private void parseRFMessage(String msg) throws MessageParseException {
 			throw new MessageParseException("need 2 comma separated fields in msg");
 		}
 		try {
-			int numeric = Integer.parseInt(parts[1]);
+			int numeric = Integer.parseInt(parts[1], 16);
 			ArrayList<AlarmDecoderBindingConfig> bcl = getItems(ADMsgType.RFX, parts[0], null);
 			for (AlarmDecoderBindingConfig c : bcl) {
 				if (c.hasFeature("data")) {
@@ -443,8 +443,8 @@ private void parseRFMessage(String msg) throws MessageParseException {
 					int v = (bit == -1) ? numeric : ((numeric >> bit) & 0x00000001);
 					updateItem(c, new DecimalType(v));
 				} else if (c.hasFeature("contact")) {
-					// if no loop indicator bitmask is set, default to 0x50
-					int bit = c.getIntParameter("bitmask", 0, 255, 0x50);
+					// if no loop indicator bitmask is set, default to 0x80
+					int bit = c.getIntParameter("bitmask", 0, 255, 0x80);
 					int v = numeric & bit;
 					updateItem(c, v == 0 ? OpenClosedType.CLOSED : OpenClosedType.OPEN);
 				}

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java
Patch:
@@ -443,8 +443,8 @@ private void parseRFMessage(String msg) throws MessageParseException {
 					int v = (bit == -1) ? numeric : ((numeric >> bit) & 0x00000001);
 					updateItem(c, new DecimalType(v));
 				} else if (c.hasFeature("contact")) {
-					// if no loop indicator bitmask is set, default to 0x50
-					int bit = c.getIntParameter("bitmask", 0, 255, 0x50);
+					// if no loop indicator bitmask is set, default to 0x80
+					int bit = c.getIntParameter("bitmask", 0, 255, 0x80);
 					int v = numeric & bit;
 					updateItem(c, v == 0 ? OpenClosedType.CLOSED : OpenClosedType.OPEN);
 				}

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/internal/AlarmDecoderBinding.java
Patch:
@@ -434,7 +434,7 @@ private void parseRFMessage(String msg) throws MessageParseException {
 			throw new MessageParseException("need 2 comma separated fields in msg");
 		}
 		try {
-			int numeric = Integer.parseInt(parts[1]);
+			int numeric = Integer.parseInt(parts[1], 16);
 			ArrayList<AlarmDecoderBindingConfig> bcl = getItems(ADMsgType.RFX, parts[0], null);
 			for (AlarmDecoderBindingConfig c : bcl) {
 				if (c.hasFeature("data")) {

File: bundles/binding/org.openhab.binding.weather/src/main/java/org/openhab/binding/weather/internal/common/binding/ForecastBindingConfig.java
Patch:
@@ -64,7 +64,7 @@ public boolean equals(Object obj) {
 	@Override
 	public String toString() {
 		ToStringBuilder tsb = new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE);
-		tsb.append("locationId", getLocationId()).append("forecastDay", forecastDay).append("type", getType())
+		tsb.append("locationId", getLocationId()).append("forecast", forecastDay).append("type", getType())
 				.append("property", getProperty());
 		return tsb.toString();
 	}

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -67,7 +67,6 @@
 import org.teleal.cling.registry.Registry;
 import org.teleal.cling.registry.RegistryListener;
 import org.teleal.cling.transport.impl.apache.StreamClientConfigurationImpl;
-import org.teleal.cling.transport.impl.apache.StreamClientImpl;
 import org.teleal.cling.transport.impl.apache.StreamServerConfigurationImpl;
 import org.teleal.cling.transport.impl.apache.StreamServerImpl;
 import org.teleal.cling.transport.spi.NetworkAddressFactory;

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/AlarmDecoderBindingProvider.java
Patch:
@@ -11,15 +11,14 @@
 import java.util.ArrayList;
 import org.openhab.binding.alarmdecoder.internal.ADMsgType;
 import org.openhab.binding.alarmdecoder.internal.AlarmDecoderBindingConfig;
-import org.openhab.core.binding.BindingProvider;
-
+import org.openhab.core.autoupdate.AutoUpdateBindingProvider;
 /**
  * This interface is implemented by classes that provide per-item binding configuration
  * 
  * @author Bernd Pfrommer
  * @since 1.6.0
  */
-public interface AlarmDecoderBindingProvider extends BindingProvider {
+public interface AlarmDecoderBindingProvider extends AutoUpdateBindingProvider {
 
 	/**
 	 * Get the binding configuration for a given itemName. This method

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/api/WithingsAuthenticator.java
Patch:
@@ -71,11 +71,11 @@ public OAuthTokens(String token, String tokenSecret) {
 	/**
 	 * Default OAuth consumer key
 	 */
-	private static final String DEFAULT_CONSUMER_KEY = "8d512d30824ee862602f7df249e31d0476cf286bc99b4068b60d4e1c541";
+	private static final String DEFAULT_CONSUMER_KEY = "74c0e77021ef5be1ec8dcb4dd88c15539f9541c86799dcbbfcb8fc8b236";
 	/**
 	 * Default OAuth consumer secret
 	 */
-	private static final String DEFAULT_CONSUMER_SECRET = "1d0117ec8f6f4cb4cf123484f2b39d8f3524264ebefc7edbd435e0e28e60";
+	private static final String DEFAULT_CONSUMER_SECRET = "25f1098263e511711b3287288f90740ff45532cef91658c5043db0b0e0c851c";
 
 	/**
 	 * Default content dir for data storage

File: bundles/binding/org.openhab.binding.alarmdecoder/src/main/java/org/openhab/binding/alarmdecoder/AlarmDecoderBindingProvider.java
Patch:
@@ -11,15 +11,14 @@
 import java.util.ArrayList;
 import org.openhab.binding.alarmdecoder.internal.ADMsgType;
 import org.openhab.binding.alarmdecoder.internal.AlarmDecoderBindingConfig;
-import org.openhab.core.binding.BindingProvider;
-
+import org.openhab.core.autoupdate.AutoUpdateBindingProvider;
 /**
  * This interface is implemented by classes that provide per-item binding configuration
  * 
  * @author Bernd Pfrommer
  * @since 1.6.0
  */
-public interface AlarmDecoderBindingProvider extends BindingProvider {
+public interface AlarmDecoderBindingProvider extends AutoUpdateBindingProvider {
 
 	/**
 	 * Get the binding configuration for a given itemName. This method

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/api/WithingsAuthenticator.java
Patch:
@@ -71,11 +71,11 @@ public OAuthTokens(String token, String tokenSecret) {
 	/**
 	 * Default OAuth consumer key
 	 */
-	private static final String DEFAULT_CONSUMER_KEY = "8d512d30824ee862602f7df249e31d0476cf286bc99b4068b60d4e1c541";
+	private static final String DEFAULT_CONSUMER_KEY = "74c0e77021ef5be1ec8dcb4dd88c15539f9541c86799dcbbfcb8fc8b236";
 	/**
 	 * Default OAuth consumer secret
 	 */
-	private static final String DEFAULT_CONSUMER_SECRET = "1d0117ec8f6f4cb4cf123484f2b39d8f3524264ebefc7edbd435e0e28e60";
+	private static final String DEFAULT_CONSUMER_SECRET = "25f1098263e511711b3287288f90740ff45532cef91658c5043db0b0e0c851c";
 
 	/**
 	 * Default content dir for data storage

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -14,6 +14,7 @@
 import java.math.BigInteger;
 import java.util.HashMap;
 import java.util.Map;
+import java.lang.NumberFormatException;
 
 import org.openhab.binding.zwave.internal.protocol.SerialMessage;
 import org.openhab.binding.zwave.internal.protocol.ZWaveController;
@@ -231,7 +232,7 @@ protected BigDecimal extractValue(byte[] buffer, int offset) {
 		if((size+offset) >= buffer.length) {
 			logger.error("Error extracting value - length={}, offset={}, size={}.", 
 					new Object[] { buffer.length, offset, size});
-			return BigDecimal.ZERO;
+			throw new NumberFormatException();
 		}
 		
 		int value = 0;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/CcuClient.java
Patch:
@@ -126,7 +126,8 @@ public void iterateAllDatapoints(HmValueItemIteratorCallback callback) throws Ho
 
 			for (HmChannel channel : device.getChannels()) {
 				for (HmDatapoint dp : channel.getDatapoints()) {
-					DatapointConfig bindingConfig = new DatapointConfig(device.getAddress(), channel.getNumber(),
+					String deviceAddress = StringUtils.stripStart(device.getAddress(), "*");
+					DatapointConfig bindingConfig = new DatapointConfig(deviceAddress, channel.getNumber(),
 							dp.getName());
 					callback.iterate(bindingConfig, dp);
 				}

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/model/HmBatteryTypeProvider.java
Patch:
@@ -78,8 +78,9 @@ public class HmBatteryTypeProvider {
 		batteries.put("HM-SEC-SCO", new HmBattery(HmBatteryType.AAA, 1));
 		batteries.put("HM-TC-IT-WM-W-EU", new HmBattery(HmBatteryType.AAA, 2));
 		batteries.put("HM-WDS30-TO", new HmBattery(HmBatteryType.AAA, 2));
+		batteries.put("HM-SEC-SCO", new HmBattery(HmBatteryType.AAA, 1));
 
-		batteries.put("HM-Sec-Win", new HmBattery(HmBatteryType.WINMATIC_ACCU, 1));
+		batteries.put("HM-SEC-WIN", new HmBattery(HmBatteryType.WINMATIC_ACCU, 1));
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveVersionCommandClass.java
Patch:
@@ -89,7 +89,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 				applicationVersion = serialMessage.getMessagePayloadByte(offset + 4) +
 						((double)serialMessage.getMessagePayloadByte(offset + 5) / 10);
 				
-				logger.debug(String.format("NODE %d: Library Type = 0x%02x", this.getNode().getNodeId(), libraryType));
+				logger.debug(String.format("NODE %d: Library Type = 0x%02x", this.getNode().getNodeId(), libraryType.key));
 				logger.debug(String.format("NODE %d: Protocol Version = %.1f", this.getNode().getNodeId(), protocolVersion));
 				logger.debug(String.format("NODE %d: Application Version = %.1f", this.getNode().getNodeId(), applicationVersion));
 				break;

File: bundles/io/org.openhab.io.transport.mqtt/src/main/java/org/openhab/io/transport/mqtt/MqttService.java
Patch:
@@ -99,6 +99,8 @@ public void updated(Dictionary<String, ?> properties)
 				MqttWillAndTestament will = MqttWillAndTestament.fromString(value);
 				logger.debug("Setting last will: {}", will);
 				conn.setLastWill(will);
+			} else if (property.equals("keepAlive")) {
+				conn.setKeepAliveInterval(Integer.parseInt(value));
 			} else {
 				logger.warn("Unrecognized property: {}", key);
 			}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterHandler.java
Patch:
@@ -80,7 +80,7 @@ public ZWaveConverterHandler(ZWaveController controller, EventPublisher eventPub
 			CommandClass.BASIC, CommandClass.SENSOR_MULTILEVEL, CommandClass.SENSOR_BINARY, CommandClass.SENSOR_ALARM });
 		preferredCommandClasses.put(NumberItem.class, new CommandClass[] { CommandClass.SENSOR_MULTILEVEL, CommandClass.METER, 
 			CommandClass.SWITCH_MULTILEVEL, CommandClass.BATTERY, CommandClass.BASIC, CommandClass.SENSOR_BINARY, 
-			CommandClass.SENSOR_ALARM, CommandClass.SWITCH_BINARY, CommandClass.THERMOSTAT_SETPOINT });
+			CommandClass.SENSOR_ALARM, CommandClass.SWITCH_BINARY, CommandClass.THERMOSTAT_SETPOINT, CommandClass.THERMOSTAT_MODE });
 		preferredCommandClasses.put(ContactItem.class, new CommandClass[] { CommandClass.SENSOR_BINARY, CommandClass.SENSOR_ALARM, 
 			CommandClass.SWITCH_BINARY, CommandClass.BASIC });
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveController.java
Patch:
@@ -402,7 +402,8 @@ public int getSendQueueLength() {
 	 */
 	public void notifyEventListeners(ZWaveEvent event) {
 		logger.debug("Notifying event listeners");
-		for (ZWaveEventListener listener : this.zwaveEventListeners) {
+		ArrayList<ZWaveEventListener> copy = new ArrayList<ZWaveEventListener>(this.zwaveEventListeners);
+		for (ZWaveEventListener listener : copy) {
 			logger.trace("Notifying {}", listener.toString());
 			listener.ZWaveIncomingEvent(event);
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatModeCommandClass.java
Patch:
@@ -244,7 +244,7 @@ public SerialMessage setValueMessage(int value) {
 		if(modeTypes.isEmpty())
 			return this.getSupportedMessage();
 		
-		if(modeTypes.contains(ModeType.getModeType(value))){
+		if(!modeTypes.contains(ModeType.getModeType(value))){
 			logger.error("Unsupported mode type {} for node {}", value, this.getNode().getNodeId());
 			return null;
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveVersionCommandClass.java
Patch:
@@ -89,7 +89,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 				applicationVersion = serialMessage.getMessagePayloadByte(offset + 4) +
 						((double)serialMessage.getMessagePayloadByte(offset + 5) / 10);
 				
-				logger.debug(String.format("NODE %d: Library Type = 0x%02x", this.getNode().getNodeId(), libraryType));
+				logger.debug(String.format("NODE %d: Library Type = 0x%02x", this.getNode().getNodeId(), libraryType.key));
 				logger.debug(String.format("NODE %d: Protocol Version = %.1f", this.getNode().getNodeId(), protocolVersion));
 				logger.debug(String.format("NODE %d: Application Version = %.1f", this.getNode().getNodeId(), applicationVersion));
 				break;

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusBinding.java
Patch:
@@ -116,7 +116,6 @@ protected void internalUpdateItem(String slaveName, InputRegister[] registers,
 					}
 
 					State currentState = config.getItemState();
-					logger.info("currentState = " + currentState.toString());
 					if (! newState.equals(currentState))
 						eventPublisher.postUpdate(itemName, newState);
 				}

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/RESTApplication.java
Patch:
@@ -198,7 +198,7 @@ private Dictionary<String, String> getJerseyServletParams() {
         jerseyServletParams.put("org.atmosphere.cpr.AtmosphereInterceptor", "org.atmosphere.interceptor.DefaultHeadersInterceptor,org.atmosphere.interceptor.AndroidAtmosphereInterceptor,org.atmosphere.interceptor.SSEAtmosphereInterceptor,org.atmosphere.interceptor.JSONPAtmosphereInterceptor,org.atmosphere.interceptor.JavaScriptProtocol,org.atmosphere.interceptor.OnDisconnectInterceptor");
 //      The BroadcasterCache is set in ResourceStateChangeListener.registerItems(), because otherwise
 //      it gets somehow overridden by other registered servlets (e.g. the CV-bundle)
-        jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.atmosphere.cache.UUIDBroadcasterCache");
+        //jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.atmosphere.cache.UUIDBroadcasterCache");
         jerseyServletParams.put("org.atmosphere.cpr.broadcasterLifeCyclePolicy", "IDLE_DESTROY");
         jerseyServletParams.put("org.atmosphere.cpr.CometSupport.maxInactiveActivity", "3000000");
         

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/listeners/ResourceStateChangeListener.java
Patch:
@@ -67,7 +67,9 @@ public static ConcurrentMap<String, Object> getMap() {
 	}
 	
 	public void registerItems(){
-		//broadcaster.getBroadcasterConfig().setBroadcasterCache(new UUIDBroadcasterCache());
+	        broadcaster.getBroadcasterConfig().setBroadcasterCache(new UUIDBroadcasterCache()); 
+	        broadcaster.getBroadcasterConfig().getBroadcasterCache().configure(broadcaster.getBroadcasterConfig());
+	        broadcaster.getBroadcasterConfig().getBroadcasterCache().start();
 		
 		broadcaster.getBroadcasterConfig().addFilter(new PerRequestBroadcastFilter() {
 			

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/model/HmBatteryTypeProvider.java
Patch:
@@ -80,7 +80,7 @@ public class HmBatteryTypeProvider {
 		batteries.put("HM-WDS30-TO", new HmBattery(HmBatteryType.AAA, 2));
 		batteries.put("HM-SEC-SCO", new HmBattery(HmBatteryType.AAA, 1));
 
-		batteries.put("HM-Sec-Win", new HmBattery(HmBatteryType.WINMATIC_ACCU, 1));
+		batteries.put("HM-SEC-WIN", new HmBattery(HmBatteryType.WINMATIC_ACCU, 1));
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/model/HmBatteryTypeProvider.java
Patch:
@@ -78,6 +78,7 @@ public class HmBatteryTypeProvider {
 		batteries.put("HM-SEC-SCO", new HmBattery(HmBatteryType.AAA, 1));
 		batteries.put("HM-TC-IT-WM-W-EU", new HmBattery(HmBatteryType.AAA, 2));
 		batteries.put("HM-WDS30-TO", new HmBattery(HmBatteryType.AAA, 2));
+		batteries.put("HM-SEC-SCO", new HmBattery(HmBatteryType.AAA, 1));
 
 		batteries.put("HM-Sec-Win", new HmBattery(HmBatteryType.WINMATIC_ACCU, 1));
 	}

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/RESTApplication.java
Patch:
@@ -198,7 +198,7 @@ private Dictionary<String, String> getJerseyServletParams() {
         jerseyServletParams.put("org.atmosphere.cpr.AtmosphereInterceptor", "org.atmosphere.interceptor.DefaultHeadersInterceptor,org.atmosphere.interceptor.AndroidAtmosphereInterceptor,org.atmosphere.interceptor.SSEAtmosphereInterceptor,org.atmosphere.interceptor.JSONPAtmosphereInterceptor,org.atmosphere.interceptor.JavaScriptProtocol,org.atmosphere.interceptor.OnDisconnectInterceptor");
 //      The BroadcasterCache is set in ResourceStateChangeListener.registerItems(), because otherwise
 //      it gets somehow overridden by other registered servlets (e.g. the CV-bundle)
-//        jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.atmosphere.cache.UUIDBroadcasterCache");
+        jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.atmosphere.cache.UUIDBroadcasterCache");
         jerseyServletParams.put("org.atmosphere.cpr.broadcasterLifeCyclePolicy", "IDLE_DESTROY");
         jerseyServletParams.put("org.atmosphere.cpr.CometSupport.maxInactiveActivity", "3000000");
         

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/listeners/ResourceStateChangeListener.java
Patch:
@@ -67,7 +67,7 @@ public static ConcurrentMap<String, Object> getMap() {
 	}
 	
 	public void registerItems(){
-		broadcaster.getBroadcasterConfig().setBroadcasterCache(new UUIDBroadcasterCache());
+		//broadcaster.getBroadcasterConfig().setBroadcasterCache(new UUIDBroadcasterCache());
 		
 		broadcaster.getBroadcasterConfig().addFilter(new PerRequestBroadcastFilter() {
 			

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -14,6 +14,7 @@
 import java.math.BigInteger;
 import java.util.HashMap;
 import java.util.Map;
+import java.lang.NumberFormatException;
 
 import org.openhab.binding.zwave.internal.protocol.SerialMessage;
 import org.openhab.binding.zwave.internal.protocol.ZWaveController;
@@ -231,7 +232,7 @@ protected BigDecimal extractValue(byte[] buffer, int offset) {
 		if((size+offset) >= buffer.length) {
 			logger.error("Error extracting value - length={}, offset={}, size={}.", 
 					new Object[] { buffer.length, offset, size});
-			return BigDecimal.ZERO;
+			throw new NumberFormatException();
 		}
 		
 		int value = 0;

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/XbmcBindingProvider.java
Patch:
@@ -20,4 +20,5 @@ public interface XbmcBindingProvider extends BindingProvider {
 	String getXbmcInstance(String itemname);
 	String getProperty(String itemname);
 	boolean isInBound(String itemname);
+	boolean isOutBound(String itemname);
 }

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosZonePlayer.java
Patch:
@@ -1157,9 +1157,9 @@ public boolean updateCurrentURIFormatted() {
 							logger.error("Could not parse RadioTime from String {}",response);
 						}
 
-						if(fields != null) {
+						resultString = new String();
 
-							resultString = new String();
+						if(fields != null && fields.size()>1) {
 
 							artist = fields.get(0);
 							title = fields.get(1);

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/XbmcBindingProvider.java
Patch:
@@ -20,4 +20,5 @@ public interface XbmcBindingProvider extends BindingProvider {
 	String getXbmcInstance(String itemname);
 	String getProperty(String itemname);
 	boolean isInBound(String itemname);
+	boolean isOutBound(String itemname);
 }

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/job/JobScheduler.java
Patch:
@@ -123,6 +123,9 @@ private boolean isBindingForIntervalJobAvailable() {
 		intervalBindings.add(new AstroBindingConfig(PlanetName.MOON, "distance", "miles"));
 		intervalBindings.add(new AstroBindingConfig(PlanetName.MOON, "distance", "date"));
 		intervalBindings.add(new AstroBindingConfig(PlanetName.MOON, "phase", "illumination"));
+		intervalBindings.add(new AstroBindingConfig(PlanetName.MOON, "zodiac", "sign"));
+		intervalBindings.add(new AstroBindingConfig(PlanetName.MOON, "position", "azimuth"));
+		intervalBindings.add(new AstroBindingConfig(PlanetName.MOON, "position", "elevation"));
 
 		for (AstroBindingProvider provider : context.getProviders()) {
 			for (AstroBindingConfig astroBindingConfig : intervalBindings) {

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java
Patch:
@@ -62,7 +62,7 @@ public static Calendar toCalendar(double julianDate) {
 		long millis = (long) ((julianDate + 0.5 - J1970) * MILLISECONDS_PER_DAY);
 		Calendar cal = Calendar.getInstance();
 		cal.setTimeInMillis(millis);
-		return DateUtils.truncate(cal, Calendar.MINUTE);
+		return DateUtils.round(cal, Calendar.MINUTE);
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/BinRpcClient.java
Patch:
@@ -168,7 +168,7 @@ private synchronized Object[] sendMessage(HmInterface hmInterface, BinRpcRequest
 			}
 			throw new IOException("Unknown Result: " + data);
 		} catch (ConnectException cex) {
-			if (HmInterface.WIRED == hmInterface) {
+			if (HmInterface.WIRED == hmInterface || HmInterface.CUXD == hmInterface) {
 				logger.info("Interface {} not available, disabling support.", hmInterface);
 				return null;
 			}

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/CcuClient.java
Patch:
@@ -103,6 +103,7 @@ public void shutdown() throws HomematicClientException {
 	public void registerCallback() throws HomematicClientException {
 		rpcClient.init(getDefaultInterface());
 		rpcClient.init(HmInterface.WIRED);
+		rpcClient.init(HmInterface.CUXD);
 	}
 
 	/**
@@ -112,6 +113,7 @@ public void registerCallback() throws HomematicClientException {
 	public void releaseCallback() throws HomematicClientException {
 		rpcClient.release(getDefaultInterface());
 		rpcClient.release(HmInterface.WIRED);
+		rpcClient.release(HmInterface.CUXD);
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/AbstractEnumTypeConverter.java
Patch:
@@ -33,6 +33,7 @@ public abstract class AbstractEnumTypeConverter<T extends State> extends Abstrac
 		stateInvertDevices.add(new StateInvertInfo("ZEL STG RM FFK"));
 		stateInvertDevices.add(new StateInvertInfo("HM-SEC-TIS"));
 		stateInvertDevices.add(new StateInvertInfo("HMW-IO-12-SW14-DR", 15, 26));
+		stateInvertDevices.add(new StateInvertInfo("BC-SC-RD-WM"));
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -134,7 +134,7 @@ public static Device create(byte[] raw, List<Configuration> configurations) {
 			}
 
 			heatingThermostat.setValvePosition(raw[6] & 0xFF);
-			heatingThermostat.setTemperatureSetpoint(raw[7] & 0xFF);
+			heatingThermostat.setTemperatureSetpoint(raw[7] & 0x7F);
 
 			// 9 2 858B Date until (05-09-2011) (see Encoding/Decoding
 			// date/time)
@@ -147,8 +147,8 @@ public static Device create(byte[] raw, List<Configuration> configurations) {
 
 			int actualTemp = 0;
 			if (device.getType() == DeviceType.WallMountedThermostat) {
-				actualTemp = (raw[11] & 0xFF);
-				if ( actualTemp < 100 ) actualTemp += 256;
+				actualTemp = (raw[11] & 0xFF) + (raw[7] & 0x80) * 2 ;
+				
 			} else {
 				if ( heatingThermostat.getMode() != ThermostatModeType.VACATION && 
 						heatingThermostat.getMode() != ThermostatModeType.BOOST){

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/rpc/calls/PlayerGetItem.java
Patch:
@@ -54,6 +54,8 @@ protected Map<String, Object> getParams() {
 		for (String property : properties) {
 			if (property.equals("Player.Type"))
 				continue;
+			if (property.equals("Player.Label"))
+				continue;
 			String paramProperty = getParamProperty(property);
 			paramProperties.add(paramProperty);
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBinarySensorCommandClass.java
Patch:
@@ -83,7 +83,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 				int value = serialMessage.getMessagePayloadByte(offset + 1);
 
 				SensorType sensorType = SensorType.UNKNOWN;
-				if(this.getVersion() > 1) {
+				if(this.getVersion() > 1 && serialMessage.getMessagePayload().length > offset + 2) {
 					logger.debug("Processing Sensor Type {}", serialMessage.getMessagePayloadByte(offset + 2));
 					// For V2, we have the sensor type after the value
 					sensorType = SensorType.getSensorType(serialMessage.getMessagePayloadByte(offset + 2));

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/RESTApplication.java
Patch:
@@ -199,7 +199,7 @@ private Dictionary<String, String> getJerseyServletParams() {
 //      The BroadcasterCache is set in ResourceStateChangeListener.registerItems(), because otherwise
 //      it gets somehow overridden by other registered servlets (e.g. the CV-bundle)
 //        jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.atmosphere.cache.UUIDBroadcasterCache");
-        jerseyServletParams.put("org.atmosphere.cpr.broadcasterLifeCyclePolicy", "NEVER");
+        jerseyServletParams.put("org.atmosphere.cpr.broadcasterLifeCyclePolicy", "IDLE_DESTROY");
         jerseyServletParams.put("org.atmosphere.cpr.CometSupport.maxInactiveActivity", "3000000");
         
         jerseyServletParams.put("com.sun.jersey.spi.container.ResourceFilter", "org.atmosphere.core.AtmosphereFilter");

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosZonePlayer.java
Patch:
@@ -1157,9 +1157,9 @@ public boolean updateCurrentURIFormatted() {
 							logger.error("Could not parse RadioTime from String {}",response);
 						}
 
-						if(fields != null) {
+						resultString = new String();
 
-							resultString = new String();
+						if(fields != null && fields.size()>1) {
 
 							artist = fields.get(0);
 							title = fields.get(1);

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/RESTApplication.java
Patch:
@@ -199,7 +199,7 @@ private Dictionary<String, String> getJerseyServletParams() {
 //      The BroadcasterCache is set in ResourceStateChangeListener.registerItems(), because otherwise
 //      it gets somehow overridden by other registered servlets (e.g. the CV-bundle)
 //        jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.atmosphere.cache.UUIDBroadcasterCache");
-        jerseyServletParams.put("org.atmosphere.cpr.broadcasterLifeCyclePolicy", "NEVER");
+        jerseyServletParams.put("org.atmosphere.cpr.broadcasterLifeCyclePolicy", "IDLE_DESTROY");
         jerseyServletParams.put("org.atmosphere.cpr.CometSupport.maxInactiveActivity", "3000000");
         
         jerseyServletParams.put("com.sun.jersey.spi.container.ResourceFilter", "org.atmosphere.core.AtmosphereFilter");

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/MiosBinding.java
Patch:
@@ -88,8 +88,8 @@
  * <p>
  * 
  * All updates are received asynchronously from the MiOS Units. This interaction
- * is managed by a per MiOS Unit {@link MiosPollCall Poll Call} object that
- * utilized a {@link MiosUnit MiOS Unit} configuration object to determine the
+ * is managed by a per MiOS Unit {@link MiosConnector} Polling Thread object that
+ * utilizes a {@link MiosUnit MiOS Unit} configuration object to determine the
  * location of the MiOS Unit.
  * <p>
  * 

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/MiosBindingProviderImpl.java
Patch:
@@ -37,8 +37,8 @@
  * 
  * The order is:
  * <ul>
- * <li>{@code unit:}id - the name of the MiOS Unit, declared in the openHAB
- * configuration. The value is a case-sensitive MiOS Unit "id" [alphaNumeric]
+ * <li>{@code unit:<name>} - the name of the MiOS Unit, declared in the openHAB
+ * configuration. The value is a case-sensitive MiOS Unit name [alphaNumeric]
  * String.
  * 
  * <li>{@code <type>:<id>} - the type of entity bound at the MiOS Unit. The

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/rpc/calls/PlayerGetItem.java
Patch:
@@ -54,6 +54,8 @@ protected Map<String, Object> getParams() {
 		for (String property : properties) {
 			if (property.equals("Player.Type"))
 				continue;
+			if (property.equals("Player.Label"))
+				continue;
 			String paramProperty = getParamProperty(property);
 			paramProperties.add(paramProperty);
 		}

File: bundles/binding/org.openhab.binding.knx.test/src/test/java/org/openhab/binding/knx/internal/config/KNXCoreTypeMapperTest.java
Patch:
@@ -289,7 +289,7 @@ public void testTypeMappingB1_1_021() throws KNXFormatException {
 	 */
 	@Test
 	public void testTypeMappingB1_1_022() throws KNXFormatException {
-		testTypeMappingB1(DPTXlatorBoolean.DPT_SCENE_AB, OnOffType.class, "scene A", "scene B");
+		testTypeMappingB1(DPTXlatorBoolean.DPT_SCENE_AB, DecimalType.class, "0", "1");
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -99,7 +99,7 @@ public class KNXCoreTypeMapper implements KNXTypeMapper {
 		dptTypeMap.put(DPTXlatorBoolean.DPT_OCCUPANCY.getID(), OnOffType.class);
 		dptTypeMap.put(DPTXlatorBoolean.DPT_WINDOW_DOOR.getID(), OpenClosedType.class);
 		dptTypeMap.put(DPTXlatorBoolean.DPT_LOGICAL_FUNCTION.getID(), OnOffType.class);
-		dptTypeMap.put(DPTXlatorBoolean.DPT_SCENE_AB.getID(), OnOffType.class);
+		dptTypeMap.put(DPTXlatorBoolean.DPT_SCENE_AB.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlatorBoolean.DPT_SHUTTER_BLINDS_MODE.getID(), OnOffType.class);
 
 		// Datapoint Types "B2", Main number 2
@@ -323,6 +323,8 @@ public Type toType(Datapoint datapoint, byte[] data) {
 					return translatorBoolean.getValueBoolean() ? StopMoveType.MOVE:StopMoveType.STOP;
 				case 19:
 					return translatorBoolean.getValueBoolean() ? OpenClosedType.OPEN:OpenClosedType.CLOSED;
+				case 22:
+					return DecimalType.valueOf(translatorBoolean.getValueBoolean() ? "1": "0");
 				default:
 					return translatorBoolean.getValueBoolean() ? OnOffType.ON:OnOffType.OFF;
 				}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -134,7 +134,7 @@ public static Device create(byte[] raw, List<Configuration> configurations) {
 			}
 
 			heatingThermostat.setValvePosition(raw[6] & 0xFF);
-			heatingThermostat.setTemperatureSetpoint(raw[7] & 0xFF);
+			heatingThermostat.setTemperatureSetpoint(raw[7] & 0x7F);
 
 			// 9 2 858B Date until (05-09-2011) (see Encoding/Decoding
 			// date/time)
@@ -147,8 +147,8 @@ public static Device create(byte[] raw, List<Configuration> configurations) {
 
 			int actualTemp = 0;
 			if (device.getType() == DeviceType.WallMountedThermostat) {
-				actualTemp = (raw[11] & 0xFF);
-				if ( actualTemp < 100 ) actualTemp += 256;
+				actualTemp = (raw[11] & 0xFF) + (raw[7] & 0x80) * 2 ;
+				
 			} else {
 				if ( heatingThermostat.getMode() != ThermostatModeType.VACATION && 
 						heatingThermostat.getMode() != ThermostatModeType.BOOST){

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -134,7 +134,7 @@ public static Device create(byte[] raw, List<Configuration> configurations) {
 			}
 
 			heatingThermostat.setValvePosition(raw[6] & 0xFF);
-			heatingThermostat.setTemperatureSetpoint(raw[7] & 0xFF);
+			heatingThermostat.setTemperatureSetpoint(raw[7] & 0x7F);
 
 			// 9 2 858B Date until (05-09-2011) (see Encoding/Decoding
 			// date/time)
@@ -147,8 +147,8 @@ public static Device create(byte[] raw, List<Configuration> configurations) {
 
 			int actualTemp = 0;
 			if (device.getType() == DeviceType.WallMountedThermostat) {
-				actualTemp = (raw[11] & 0xFF);
-				if ( actualTemp < 100 ) actualTemp += 256;
+				actualTemp = (raw[11] & 0xFF) + (raw[7] & 0x80) * 2 ;
+				
 			} else {
 				if ( heatingThermostat.getMode() != ThermostatModeType.VACATION && 
 						heatingThermostat.getMode() != ThermostatModeType.BOOST){

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/common/AstroConfig.java
Patch:
@@ -133,7 +133,7 @@ public String toString() {
 		tzInfo.append(")");
 		return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE).append("latitude", latitude)
 				.append("longitude", longitude).append("interval", intervallMessage)
-				.append("systemTimezone", tzInfo.toString()).append("daylightSavings", tz.getDSTSavings() != 0)
-				.toString();
+				.append("systemTimezone", tzInfo.toString())
+				.append("daylightSavings", Calendar.getInstance().get(Calendar.DST_OFFSET) != 0).toString();
 	}
 }

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/MoonCalc.java
Patch:
@@ -144,7 +144,7 @@ private double[] getRiseSet(Calendar calendar, double latitude, double longitude
 		}
 
 		double moonJd = Math.floor(DateTimeUtils.midnightDateToJulianDate(calendar)) - 2400000.0;
-		moonJd -= ((calendar.getTimeZone().getRawOffset() + calendar.getTimeZone().getDSTSavings()) / 60000.0) / 1440.0;
+		moonJd -= ((calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET)) / 60000.0) / 1440.0;
 
 		double sphi = SN(phi);
 		double cphi = CS(phi);

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -301,7 +301,8 @@ public void store(Item item, String alias) {
 		try {
 			statement = connection.createStatement();
 			sqlCmd = new String("INSERT INTO " + tableName + " (TIME, VALUE) VALUES(NOW(),'"
-					+ item.getState().toString() + "');");
+					+ item.getState().toString() + "') ON DUPLICATE KEY UPDATE VALUE='"
+					+ item.getState().toString() + "';");
 			statement.executeUpdate(sqlCmd);
 
 			logger.debug("mySQL: Stored item '{}' as '{}'[{}] in SQL database at {}.", item.getName(), item.getState()

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -301,7 +301,8 @@ public void store(Item item, String alias) {
 		try {
 			statement = connection.createStatement();
 			sqlCmd = new String("INSERT INTO " + tableName + " (TIME, VALUE) VALUES(NOW(),'"
-					+ item.getState().toString() + "');");
+					+ item.getState().toString() + "') ON DUPLICATE KEY UPDATE VALUE='"
+					+ item.getState().toString() + "';");
 			statement.executeUpdate(sqlCmd);
 
 			logger.debug("mySQL: Stored item '{}' as '{}'[{}] in SQL database at {}.", item.getName(), item.getState()

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -301,7 +301,8 @@ public void store(Item item, String alias) {
 		try {
 			statement = connection.createStatement();
 			sqlCmd = new String("INSERT INTO " + tableName + " (TIME, VALUE) VALUES(NOW(),'"
-					+ item.getState().toString() + "');");
+					+ item.getState().toString() + "') ON DUPLICATE KEY UPDATE VALUE='"
+					+ item.getState().toString() + "';");
 			statement.executeUpdate(sqlCmd);
 
 			logger.debug("mySQL: Stored item '{}' as '{}'[{}] in SQL database at {}.", item.getName(), item.getState()

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBindingConfig.java
Patch:
@@ -109,7 +109,7 @@ public MilightBindingConfig(String deviceId, String channelNumber, String comman
 		if (steps != null) {
 			this.steps = parseStepsConfigString(steps);
 		} else {
-				this.steps = 31;
+				this.steps = 27; // http://www.limitlessled.com/dev/
 		}
 	}
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/binrpc/BinRpcRequest.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.lang.builder.ToStringStyle;
 
 /**
- * A BIN-RPC request for sending data to the CCU.
+ * A BIN-RPC request for sending data to the Homematic server.
  * 
  * @author Gerhard Riegler
  * @since 1.5.0

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/bus/BindingConfigParser.java
Patch:
@@ -62,9 +62,8 @@ public HomematicBindingConfig parse(Item item, String bindingConfig) throws Bind
 
 			// convert entry id to device if necessary
 			if ("id".equalsIgnoreCase(key)) {
-				// logger.info("Please change the Homematic binding with the attribute 'id' to 'address' in entry: "
-				// + entry + " -> " + StringUtils.replace(entry, "id=",
-				// "address="));
+				logger.info("Please change the Homematic binding with the attribute 'id' to 'address' in entry: "
+						+ entry + " -> " + StringUtils.replace(entry, "id=", "address="));
 				key = "address";
 			}
 			String value = StringUtils.trim(entryParts[1]);

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/Event.java
Patch:
@@ -8,9 +8,9 @@
  */
 package org.openhab.binding.homematic.internal.communicator;
 
-import org.openhab.binding.homematic.internal.config.binding.ValueBindingConfig;
 import org.openhab.binding.homematic.internal.config.binding.HomematicBindingConfig;
 import org.openhab.binding.homematic.internal.config.binding.ProgramConfig;
+import org.openhab.binding.homematic.internal.config.binding.ValueBindingConfig;
 import org.openhab.binding.homematic.internal.config.binding.VariableConfig;
 import org.openhab.binding.homematic.internal.model.HmDatapoint;
 import org.openhab.binding.homematic.internal.model.HmValueItem;
@@ -23,7 +23,7 @@
 
 /**
  * Common Event class for Homematic and openHAB events.
- * Used by the CcuCommunicator.
+ * Used by the HomematicCommunicator.
  * 
  * @author Gerhard Riegler
  * @since 1.5.0
@@ -36,7 +36,7 @@ public class Event {
 	private Object newValue;
 
 	/**
-	 * Creates a new event received from the CCU.
+	 * Creates a new event received from the Homematic server.
 	 */
 	public Event(HomematicBindingConfig bindingConfig, Object newValue) {
 		this.bindingConfig = bindingConfig;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/HomematicCallbackServer.java
Patch:
@@ -15,15 +15,15 @@
  * @author Gerhard Riegler
  * @since 1.5.0
  */
-public interface CcuCallbackServer {
+public interface HomematicCallbackServer {
 
 	/**
-	 * Starts the CCU callback server.
+	 * Starts the Homematic callback server.
 	 */
 	public void start() throws Exception;
 
 	/**
-	 * Stops the CCU callback server.
+	 * Stops the Homematic callback server.
 	 */
 	public void shutdown();
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/config/binding/DatapointConfig.java
Patch:
@@ -30,7 +30,7 @@ public class DatapointConfig extends ValueBindingConfig {
 	private String parameter;
 
 	/**
-	 * Creates a datapoint config from an CCU event.
+	 * Creates a datapoint config from an Homematic server event.
 	 */
 	public DatapointConfig(HmInterface hmInterface, String addressWithChannel, String parameter) {
 		this.hmInterface = hmInterface;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/config/binding/ValueBindingConfig.java
Patch:
@@ -28,7 +28,7 @@ public Converter<?> getConverter() {
 	}
 
 	/**
-	 * Returns true for always sending the value to the CCU.
+	 * Returns true for always sending the value to the Homematic server.
 	 */
 	public boolean isForceUpdate() {
 		return forceUpdate;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/util/BindingChangedDelayedExecutor.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Iterator;
 import java.util.Map;
 
-import org.openhab.binding.homematic.internal.communicator.CcuCommunicator;
+import org.openhab.binding.homematic.internal.communicator.HomematicCommunicator;
 import org.openhab.binding.homematic.internal.config.binding.HomematicBindingConfig;
 import org.openhab.core.items.Item;
 
@@ -25,14 +25,14 @@
  * @since 1.5.0
  */
 public class BindingChangedDelayedExecutor extends DelayedExecutor {
-	private CcuCommunicator communicator;
+	private HomematicCommunicator communicator;
 
 	private Map<Item, HomematicBindingConfig> bindingConfigs = new HashMap<Item, HomematicBindingConfig>();
 
 	/**
 	 * Creates the Executor for the communicator.
 	 */
-	public BindingChangedDelayedExecutor(CcuCommunicator communicator) {
+	public BindingChangedDelayedExecutor(HomematicCommunicator communicator) {
 		this.communicator = communicator;
 	}
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/xmlrpc/XmlRpcConnectionRF.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.homematic.internal.xmlrpc;
 
 import org.apache.xmlrpc.client.XmlRpcClient;
+import org.openhab.binding.homematic.internal.model.HmInterface;
 
 /**
  * This class adds RF specific methods of the CCU interface. It connects to port
@@ -41,7 +42,7 @@ public String getAddress() {
 
 	@Override
 	public Integer getPort() {
-		return 2001;
+		return HmInterface.RF.getPort();
 	}
 
 	public void getServiceMessages() {

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/xmlrpc/XmlRpcConnectionWired.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.homematic.internal.xmlrpc;
 
 import org.apache.xmlrpc.client.XmlRpcClient;
+import org.openhab.binding.homematic.internal.model.HmInterface;
 
 /**
  * This class adds Wired specific methods of the CCU interface. It connects to
@@ -41,7 +42,7 @@ public String getAddress() {
 
 	@Override
 	public Integer getPort() {
-		return 2000;
+		return HmInterface.WIRED.getPort();
 	}
 
 }

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/HueBinding.java
Patch:
@@ -104,7 +104,7 @@ private void computeCommandForItemOnBridge(Command command,
 		}
 
 		if (command instanceof OnOffType) {
-			bulb.setOnAtFullBrightness(OnOffType.ON.equals(command));
+			bulb.switchOn(OnOffType.ON.equals(command));
 		}
 
 		if (command instanceof HSBType) {

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/driver/Driver.java
Patch:
@@ -68,6 +68,8 @@ public void addPort(String name, String port) {
 	public void addMsgListener(MsgListener listener, String port) {
 		if (m_ports.keySet().contains(port)) {
 			m_ports.get(port).addListener(listener);
+		} else {
+			logger.error("referencing unknown port {}!", port);
 		}
 	}
 	

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/BindingType.java
Patch:
@@ -15,5 +15,5 @@
 * @since 1.4.0
 */
 public enum BindingType {
-	VALVE, BATTERY , MODE
+	VALVE, BATTERY , MODE, ACTUAL
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeGenericBindingProvider.java
Patch:
@@ -33,6 +33,7 @@
  * <li>{ maxcube="JEQ304492:type=valve" } - returns the corresponding valve position in percentage. Only available for heating thermostats.</li>
  * <li>{ maxcube="JEQ304492:type=battery" } - returns the current battery state as text.</li>
  * <li>{ maxcube="JEQ304492:type=mode" } - returns the current mode as text.</li>
+ * <li>{ maxcube="JEQ304492:type=actual" } - returns the current measured temparature.</li>
  * </ul>
  * @author Andreas Heil
  * @since 1.4.0
@@ -82,6 +83,8 @@ public void processBindingConfiguration(String context, Item item, String bindin
 					config.bindingType = BindingType.VALVE;
 				} else if (bindingToken[1].toLowerCase().equals("mode")) {
 					config.bindingType = BindingType.MODE;
+				} else if (bindingToken[1].toLowerCase().equals("actual")) {
+					config.bindingType = BindingType.ACTUAL;
 				} else if (bindingToken[1].toLowerCase().equals("battery")) {
 					config.bindingType = BindingType.BATTERY;
 				}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/DeviceType.java
Patch:
@@ -16,7 +16,7 @@
 */
 public enum DeviceType {
 	Invalid(256), Cube (0), HeatingThermostat(1), HeatingThermostatPlus(2), WallMountedThermostat(
-			3), ShutterContact(4), PushButton(5);
+			3), ShutterContact(4), EcoSwitch(5);
 
 	private int value;
 
@@ -41,7 +41,7 @@ public static DeviceType create(int value) {
 		case 4: 
 			return ShutterContact;
 		case 5:
-			return PushButton;
+			return EcoSwitch;
 		default:
 			return Invalid;
 		}
@@ -60,7 +60,7 @@ public String toString() {
 	    case 4: 
 	      return "Shutter Contact";
 	    case 5:
-	      return "Push Button";
+	      return "Eco Switch";
 	    default:
 	      return "Invalid";
 	    }

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/L_Message.java
Patch:
@@ -50,7 +50,7 @@ public Collection<? extends Device> getDevices(List<Configuration> configuration
 	@Override
 	public void debug(Logger logger) {
 		logger.debug("=== L_Message === ");
-		logger.debug("\tRAW:" + this.getPayload());
+		logger.trace("\tRAW:" + this.getPayload());
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/messages/RefreshTokenRequest.java
Patch:
@@ -33,7 +33,7 @@ public class RefreshTokenRequest extends AbstractRequest {
 			+ CHARSET;
 
 	private static final String URL = "https://api.netatmo.net/oauth2/token";
-	private static final String CONTENT = "grant_type=refresh_token&refresh_token=%s&client_id=%s&client_secret=%s";
+	private static final String CONTENT = "grant_type=refresh_token&refresh_token=%s&client_id=%s&client_secret=%s&scope=read_station";
 
 	private final String clientId;
 	private final String clientSecret;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/RFXComValueSelector.java
Patch:
@@ -22,14 +22,15 @@
  * Represents all valid value selectors which could be processed by this
  * binding.
  * 
- * @author Pauli Anttila, Evert van Es
+ * @author Pauli Anttila, Evert van Es, Neil Renaud
  * @since 1.2.0
  */
 public enum RFXComValueSelector {
 
 	RAW_DATA ("RawData", StringItem.class),
 	SHUTTER ("Shutter", RollershutterItem.class),
 	COMMAND ("Command", SwitchItem.class),
+	MOOD ("Mood", NumberItem.class),
 	SIGNAL_LEVEL ("SignalLevel", NumberItem.class),
 	DIMMING_LEVEL ("DimmingLevel", DimmerItem.class),
 	TEMPERATURE ("Temperature", NumberItem.class),
@@ -123,4 +124,4 @@ public static RFXComValueSelector getValueSelector(String valueSelectorText)
 		throw new IllegalArgumentException("Not valid value selector");
 	}
 
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBindingConfig.java
Patch:
@@ -109,7 +109,7 @@ public MilightBindingConfig(String deviceId, String channelNumber, String comman
 		if (steps != null) {
 			this.steps = parseStepsConfigString(steps);
 		} else {
-				this.steps = 31;
+				this.steps = 27; // http://www.limitlessled.com/dev/
 		}
 	}
 

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/MaxCulMsgHandler.java
Patch:
@@ -459,6 +459,7 @@ public void error(Exception e) {
 		/* Ignore errors for now - not sure what I would need to handle here at the moment
 		 * TODO lookup error cases
 		 */
+		logger.error("Received CUL Error", e);
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/messages/ThermostatStateMsg.java
Patch:
@@ -57,10 +57,9 @@ public ThermostatStateMsg(String rawMsg) {
 				/* extract measured temperature */
 				if (ctrlMode != ThermostatControlMode.TEMPORARY)
 				{
-					int mTemp = (this.payload[3]&0x80);
-					mTemp <<= 1;
+					int mTemp = (this.payload[3]&0x1);
+					mTemp <<= 8;
 					mTemp |= (((int)this.payload[4])&0xff);
-					logger.debug("mTemp => "+mTemp);
 					measuredTemperature = mTemp/10.0; // temperature over 25.5 uses extra bit in desiredTemperature byte
 					if (measuredTemperature < 4.5)
 						measuredTemperature = null;

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/messages/BaseMsg.java
Patch:
@@ -254,9 +254,9 @@ public int requiredCredit()
 		/* length in bits = amount of credit needed
 		 * length in bits = num chars * 4
 		 * This is because each char represents 4 bits of a hex number. RawMsg length
-		 * is decremented by one to account for the 'Z'
+		 * is decremented by one to account for the 'Z[s|f]'
 		 */
-		int credit = (this.rawMsg.length()-1)*4;
+		int credit = (this.rawMsg.length()-2)*4;
 
 		/* credit is in 10ms units, round up */
 		credit = (int)Math.ceil(credit/10.0);

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/MaxCulFeature.java
Patch:
@@ -11,5 +11,6 @@ public enum MaxCulFeature {
 	BATTERY,
 	MODE,
 	SWITCH,
-	VALVE_POS;
+	VALVE_POS,
+	UNKNOWN;
 }

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/messages/ThermostatStateMsg.java
Patch:
@@ -90,12 +90,12 @@ protected void printFormattedPayload()
 			logger.debug("\tUntil DateTime      => "+untilDateTime.get(Calendar.YEAR)+"-"+(untilDateTime.get(Calendar.MONTH)+1)+"-"+untilDateTime.get(Calendar.DAY_OF_MONTH)+" "+untilDateTime.get(Calendar.HOUR_OF_DAY)+":"+untilDateTime.get(Calendar.MINUTE)+":"+untilDateTime.get(Calendar.SECOND));
 	}
 
-	public double getDesiredTemperature()
+	public Double getDesiredTemperature()
 	{
 		return desiredTemperature;
 	}
 
-	public double getMeasuredTemperature()
+	public Double getMeasuredTemperature()
 	{
 		return measuredTemperature;
 	}

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/MaxCulFeature.java
Patch:
@@ -10,5 +10,6 @@ public enum MaxCulFeature {
 	TEMPERATURE,
 	BATTERY,
 	MODE,
-	SWITCH;
+	SWITCH,
+	VALVE_POS;
 }

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/MaxCulGenericBindingProvider.java
Patch:
@@ -28,7 +28,7 @@
  * and registering the {@link MaxCulBindingProvider}.
  *
  * The following devices have the following valid types:
- * <li>RadiatorThermostat - thermostat,temperature,battery</li>
+ * <li>RadiatorThermostat - thermostat,temperature,battery,valvepos</li>
  * <li>WallThermostat - thermostat,temperature,battery</li>
  *
  * Examples:
@@ -80,6 +80,8 @@ public void validateItemType(Item item, String bindingConfig) throws BindingConf
 		case WALL_THERMOSTAT:
 			if (config.feature == MaxCulFeature.TEMPERATURE && !(item instanceof NumberItem))
 				throw new BindingConfigParseException("Invalid item type. Feature 'temperature' can only be a Number");
+			else if (config.feature == MaxCulFeature.VALVE_POS && !(item instanceof NumberItem))
+				throw new BindingConfigParseException("Invalid item type. Feature 'valvepos' can only be a Number");
 			else if (config.feature == MaxCulFeature.THERMOSTAT && !((item instanceof NumberItem) || (item instanceof SwitchItem)))
 				throw new BindingConfigParseException("Invalid item type. Feature 'thermostat' can only be a Number or a Switch");
 			else if (config.feature == MaxCulFeature.BATTERY && !(item instanceof NumberItem))

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/MaxCulMsgHandler.java
Patch:
@@ -16,6 +16,7 @@
 import org.openhab.binding.maxcul.internal.messages.SetGroupIdMsg;
 import org.openhab.binding.maxcul.internal.messages.SetTemperatureMsg;
 import org.openhab.binding.maxcul.internal.messages.ThermostatControlMode;
+import org.openhab.binding.maxcul.internal.messages.ThermostatStateMsg;
 import org.openhab.binding.maxcul.internal.messages.TimeInfoMsg;
 import org.openhab.binding.maxcul.internal.messages.WakeupMsg;
 import org.openhab.binding.maxcul.internal.messages.WallThermostatControlMsg;
@@ -343,6 +344,7 @@ else if (BaseMsg.isForUs(data, "000000"))
 				{
 				case PAIR_PING:
 				case WALL_THERMOSTAT_CONTROL:
+				case THERMOSTAT_STATE:
 					this.mcbmp.MaxCulMsgReceived(data, true);
 					break;
 				default:

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/MaxCulMsgHandler.java
Patch:
@@ -171,8 +171,8 @@ public void run() {
 
 				timer = new Timer();
 				timers.put(qi, timer);
-				/* calculate when we want to TX this item in the queue, with a margin of 2 credits*/
-				this.endOfQueueTransmit = new Date(this.endOfQueueTransmit.getTime() + ((msg.requiredCredit()+2)*10));
+				/* calculate when we want to TX this item in the queue, with a margin of 2 credits. x1000 as we accumulate 1 x 10ms credit every 1000ms */
+				this.endOfQueueTransmit = new Date(this.endOfQueueTransmit.getTime() + ((msg.requiredCredit()+2)*1000));
 				timer.schedule(task, this.endOfQueueTransmit);
 				this.sendQueue.add(qi);
 

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/messages/MaxCulMsgHandler.java
Patch:
@@ -230,7 +230,7 @@ public void error(Exception e) {
 	 */
 	public void sendPairPong(String dstAddr)
 	{
-		PairPongMsg pp = new PairPongMsg(getMessageCount(), (byte)0, MaxCulMsgType.PAIR_PONG, (byte) 0, this.srcAddr, dstAddr);
+		PairPongMsg pp = new PairPongMsg(getMessageCount(), (byte)0, (byte) 0, this.srcAddr, dstAddr);
 		sendMessage(pp);
 	}
 

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/messages/PairPongMsg.java
Patch:
@@ -4,9 +4,9 @@ public class PairPongMsg extends BaseMsg {
 
 	final static private int PAIR_PONG_PAYLOAD_LEN = 1; /* in bytes */
 
-	public PairPongMsg(byte msgCount, byte msgFlag, MaxCulMsgType msgType,
+	public PairPongMsg(byte msgCount, byte msgFlag,
 			byte groupId, String srcAddr, String dstAddr) {
-		super(msgCount, msgFlag, msgType, groupId, srcAddr, dstAddr);
+		super(msgCount, msgFlag, MaxCulMsgType.PAIR_PONG, groupId, srcAddr, dstAddr);
 
 		byte[] payload = new byte[PAIR_PONG_PAYLOAD_LEN];
 

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/MaxCulGenericBindingProvider.java
Patch:
@@ -72,7 +72,7 @@ public void validateItemType(Item item, String bindingConfig) throws BindingConf
 		case WALL_THERMOSTAT:
 			if (config.feature == MaxCulFeature.TEMPERATURE && !(item instanceof NumberItem))
 				throw new BindingConfigParseException("Invalid item type. Feature 'temperature' can only be a Number");
-			if (config.feature == MaxCulFeature.TEMPERATURE && !(item instanceof NumberItem))
+			if (config.feature == MaxCulFeature.THERMOSTAT && !(item instanceof NumberItem))
 				throw new BindingConfigParseException("Invalid item type. Feature 'thermostat' can only be a Number");
 			if (config.feature == MaxCulFeature.BATTERY && !(item instanceof NumberItem))
 				throw new BindingConfigParseException("Invalid item type. Feature 'battery' can only be a Number");

File: bundles/binding/org.openhab.binding.maxcul/src/main/java/org/openhab/binding/maxcul/internal/MaxCulCommandHelper.java
Patch:
@@ -19,6 +19,7 @@ static class MaxPacket {
 		byte msgCount;
 		byte msgFlag;
 		byte msgTypeRaw;
+		MaxCulMsgType msgType;
 		byte[] srcAddr = new byte[3];
 		byte[] dstAddr = new byte[3];
 		byte groupid;
@@ -52,6 +53,8 @@ static public MaxPacket parsePacket(String rawMsg)
 		pkt.msgTypeRaw = Byte.parseByte(rawMsg.substring(startIdx,startIdx+2),16);
 		startIdx += 2;
 
+		pkt.msgType = MaxCulMsgType.fromByte(pkt.msgTypeRaw);
+
 		pkt.srcAddr[0] = Byte.parseByte(rawMsg.substring(startIdx,startIdx+2),16);
 		startIdx += 2;
 		pkt.srcAddr[1] = Byte.parseByte(rawMsg.substring(startIdx,startIdx+2),16);

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -215,7 +215,8 @@ private void readFromKNX(ProcessEvent e) {
 						}
 						else {
 							final char[] hexCode = "0123456789ABCDEF".toCharArray();
-					        StringBuilder sb = new StringBuilder(asdu.length * 2);
+					        StringBuilder sb = new StringBuilder(2+asdu.length * 2);
+					        sb.append("0x");
 					        for (byte b : asdu) {
 					            sb.append(hexCode[(b >> 4) & 0xF]);
 					            sb.append(hexCode[(b & 0xF)]);

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java
Patch:
@@ -179,7 +179,7 @@ private Sun getSunInfo(Calendar calendar, double latitude, double longitude, boo
 		}
 		else {
 			Sun sunTomorrow = getSunInfo(addDays(calendar, 1), latitude, longitude, true);
-			sun.setNight(new Range(eveningNightRange.getStart(), sunTomorrow.getAstroDawn().getStart()));
+			sun.setNight(new Range(sun.getAstroDusk().getEnd(), sunTomorrow.getAstroDawn().getStart()));
 		}
 		
 		return sun;

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java
Patch:
@@ -190,7 +190,7 @@ private Sun getSunInfo(Calendar calendar, double latitude, double longitude, boo
 	 * Returns the julian date from the calendar object.
 	 */
 	public static double plainDateToJulianDate(Calendar calendar) {
-		return calendar.getTimeInMillis() / MILLISECONDS_PER_DAY - 0.5 + J1970;
+		return calendar.getTimeInMillis() / MILLISECONDS_PER_DAY + J1970;
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/hardware/HueBulb.java
Patch:
@@ -150,6 +150,7 @@ public int setBrightness(int brightness) {
 	 */
 	
 	public boolean switchOn(boolean powerOn) {
+		this.isOn = powerOn;
 		if(powerOn) {
 			executeMessage("{\"on\":true}");
 		} else {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -330,12 +330,12 @@ public boolean restoreFromConfig() {
 
 		// Sanity check the data from the file
 		if (restoredNode.getVersion() != this.node.getVersion()
-				|| restoredNode.getManufacturer() == 0
+				|| restoredNode.getManufacturer() == Integer.MAX_VALUE
 				|| restoredNode.isListening() != this.node.isListening()
 				|| restoredNode.isFrequentlyListening() != this.node.isFrequentlyListening()
 				|| restoredNode.isRouting() != this.node.isRouting()
 				|| !restoredNode.getDeviceClass().equals(this.node.getDeviceClass())) {
-			logger.warn("NODE {}: Config file differs from controler information, ignoring config.",
+			logger.warn("NODE {}: Config file differs from controller information, ignoring config.",
 					this.node.getNodeId());
 			return false;
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -245,7 +245,7 @@ record = new OpenHABConfigurationRecord("nodes/" + "node" + node.getNodeId() + "
 				
 				// If we can't find the product, then try and find just the
 				// manufacturer
-				if (node.getManufacturer() == 0) {
+				if (node.getManufacturer() == Integer.MAX_VALUE) {
 				} else if (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {
 					if (database.FindManufacturer(node.getManufacturer()) == false) {
 						record.value = "Manufacturer:" + node.getManufacturer() + " [ID:"

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -63,11 +63,11 @@ public class ZWaveNode {
 	private String location;
 	
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int manufacturer = -1;
+	private int manufacturer = Integer.MAX_VALUE;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceId = -1;
+	private int deviceId = Integer.MAX_VALUE;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceType = -1;
+	private int deviceType = Integer.MAX_VALUE;
 	
 	private boolean listening;			 // i.e. sleeping
 	private boolean frequentlyListening; 

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -584,6 +584,8 @@ public Iterable<HistoricItem> query(FilterCriteria filter) {
 
 				if (item instanceof NumberItem)
 					state = new DecimalType(rs.getDouble(2));
+				else if (item instanceof ColorItem)
+					state = new HSBType(rs.getString(2));
 				else if (item instanceof DimmerItem)
 					state = new PercentType(rs.getInt(2));
 				else if (item instanceof SwitchItem)
@@ -592,8 +594,6 @@ else if (item instanceof ContactItem)
 					state = OpenClosedType.valueOf(rs.getString(2));
 				else if (item instanceof RollershutterItem)
 					state = new PercentType(rs.getInt(2));
-				else if (item instanceof ColorItem)
-					state = new HSBType(rs.getString(2));
 				else if (item instanceof DateTimeItem) {
 					Calendar calendar = Calendar.getInstance();
 					calendar.setTimeInMillis(rs.getTimestamp(2).getTime());

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/hardware/HueBulb.java
Patch:
@@ -150,6 +150,7 @@ public int setBrightness(int brightness) {
 	 */
 	
 	public boolean switchOn(boolean powerOn) {
+		this.isOn = powerOn;
 		if(powerOn) {
 			executeMessage("{\"on\":true}");
 		} else {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -245,7 +245,7 @@ record = new OpenHABConfigurationRecord("nodes/" + "node" + node.getNodeId() + "
 				
 				// If we can't find the product, then try and find just the
 				// manufacturer
-				if (node.getManufacturer() == 0) {
+				if (node.getManufacturer() == Integer.MAX_VALUE) {
 				} else if (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {
 					if (database.FindManufacturer(node.getManufacturer()) == false) {
 						record.value = "Manufacturer:" + node.getManufacturer() + " [ID:"

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -63,11 +63,11 @@ public class ZWaveNode {
 	private String location;
 	
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int manufacturer = -1;
+	private int manufacturer = Integer.MAX_VALUE;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceId = -1;
+	private int deviceId = Integer.MAX_VALUE;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceType = -1;
+	private int deviceType = Integer.MAX_VALUE;
 	
 	private boolean listening;			 // i.e. sleeping
 	private boolean frequentlyListening; 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -330,12 +330,12 @@ public boolean restoreFromConfig() {
 
 		// Sanity check the data from the file
 		if (restoredNode.getVersion() != this.node.getVersion()
-				|| restoredNode.getManufacturer() == 0
+				|| restoredNode.getManufacturer() == Integer.MAX_VALUE
 				|| restoredNode.isListening() != this.node.isListening()
 				|| restoredNode.isFrequentlyListening() != this.node.isFrequentlyListening()
 				|| restoredNode.isRouting() != this.node.isRouting()
 				|| !restoredNode.getDeviceClass().equals(this.node.getDeviceClass())) {
-			logger.warn("NODE {}: Config file differs from controler information, ignoring config.",
+			logger.warn("NODE {}: Config file differs from controller information, ignoring config.",
 					this.node.getNodeId());
 			return false;
 		}

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -584,6 +584,8 @@ public Iterable<HistoricItem> query(FilterCriteria filter) {
 
 				if (item instanceof NumberItem)
 					state = new DecimalType(rs.getDouble(2));
+				else if (item instanceof ColorItem)
+					state = new HSBType(rs.getString(2));
 				else if (item instanceof DimmerItem)
 					state = new PercentType(rs.getInt(2));
 				else if (item instanceof SwitchItem)
@@ -592,8 +594,6 @@ else if (item instanceof ContactItem)
 					state = OpenClosedType.valueOf(rs.getString(2));
 				else if (item instanceof RollershutterItem)
 					state = new PercentType(rs.getInt(2));
-				else if (item instanceof ColorItem)
-					state = new HSBType(rs.getString(2));
 				else if (item instanceof DateTimeItem) {
 					Calendar calendar = Calendar.getInstance();
 					calendar.setTimeInMillis(rs.getTimestamp(2).getTime());

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/HueBinding.java
Patch:
@@ -104,7 +104,7 @@ private void computeCommandForItemOnBridge(Command command,
 		}
 
 		if (command instanceof OnOffType) {
-			bulb.setOnAtFullBrightness(OnOffType.ON.equals(command));
+			bulb.switchOn(OnOffType.ON.equals(command));
 		}
 
 		if (command instanceof HSBType) {

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -584,6 +584,8 @@ public Iterable<HistoricItem> query(FilterCriteria filter) {
 
 				if (item instanceof NumberItem)
 					state = new DecimalType(rs.getDouble(2));
+				else if (item instanceof ColorItem)
+					state = new HSBType(rs.getString(2));
 				else if (item instanceof DimmerItem)
 					state = new PercentType(rs.getInt(2));
 				else if (item instanceof SwitchItem)
@@ -592,8 +594,6 @@ else if (item instanceof ContactItem)
 					state = OpenClosedType.valueOf(rs.getString(2));
 				else if (item instanceof RollershutterItem)
 					state = new PercentType(rs.getInt(2));
-				else if (item instanceof ColorItem)
-					state = new HSBType(rs.getString(2));
 				else if (item instanceof DateTimeItem) {
 					Calendar calendar = Calendar.getInstance();
 					calendar.setTimeInMillis(rs.getTimestamp(2).getTime());

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/config/DeviceBindingConfig.java
Patch:
@@ -354,7 +354,7 @@ private TransformationService getCommandTransformationService() {
 
 		if (commandTransformationService == null) {
 
-			logger.debug(
+			logger.warn(
 					"Transformation Service (command) '{}' not found for declaration '{}'.",
 					name, getCommandThing());
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -330,12 +330,12 @@ public boolean restoreFromConfig() {
 
 		// Sanity check the data from the file
 		if (restoredNode.getVersion() != this.node.getVersion()
-				|| restoredNode.getManufacturer() == 0
+				|| restoredNode.getManufacturer() == Integer.MAX_VALUE
 				|| restoredNode.isListening() != this.node.isListening()
 				|| restoredNode.isFrequentlyListening() != this.node.isFrequentlyListening()
 				|| restoredNode.isRouting() != this.node.isRouting()
 				|| !restoredNode.getDeviceClass().equals(this.node.getDeviceClass())) {
-			logger.warn("NODE {}: Config file differs from controler information, ignoring config.",
+			logger.warn("NODE {}: Config file differs from controller information, ignoring config.",
 					this.node.getNodeId());
 			return false;
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -245,7 +245,7 @@ record = new OpenHABConfigurationRecord("nodes/" + "node" + node.getNodeId() + "
 				
 				// If we can't find the product, then try and find just the
 				// manufacturer
-				if (node.getManufacturer() == 0) {
+				if (node.getManufacturer() == Integer.MAX_VALUE) {
 				} else if (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) == false) {
 					if (database.FindManufacturer(node.getManufacturer()) == false) {
 						record.value = "Manufacturer:" + node.getManufacturer() + " [ID:"

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -63,11 +63,11 @@ public class ZWaveNode {
 	private String location;
 	
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int manufacturer = -1;
+	private int manufacturer = Integer.MAX_VALUE;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceId = -1;
+	private int deviceId = Integer.MAX_VALUE;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceType = -1;
+	private int deviceType = Integer.MAX_VALUE;
 	
 	private boolean listening;			 // i.e. sleeping
 	private boolean frequentlyListening; 

File: bundles/binding/org.openhab.binding.mios/src/main/java/org/openhab/binding/mios/internal/config/SceneBindingConfig.java
Patch:
@@ -29,11 +29,11 @@ private SceneBindingConfig(String context, String unitName, int id,
 
 	public static final MiosBindingConfig create(String context,
 			String unitName, int id, String stuff,
-			Class<? extends Item> itemType, String outType, String outStuff,
+			Class<? extends Item> itemType, String commandThing, String updateThing,
 			String inTransform, String outTransform)
 			throws BindingConfigParseException {
 		MiosBindingConfig c = new SceneBindingConfig(context, unitName, id,
-				stuff, itemType, outType, outStuff, inTransform, outTransform);
+				stuff, itemType, commandThing, updateThing, inTransform, outTransform);
 
 		c.initialize();
 		return c;
@@ -48,7 +48,6 @@ public String transformCommand(Command command)
 			throws TransformationException {
 		String key = command.toString();
 
-		// TODO: Don't do this on the fly...
 		String cThing = getCommandThing();
 		if (cThing == null || "".equals(cThing)) {
 			return key;

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java
Patch:
@@ -72,7 +72,7 @@ public void deactivate(ComponentContext componentContext) {
 	public Item getItem(String name) throws ItemNotFoundException {
 		for(Collection<Item> items : itemMap.values()) {
 			for(Item item : items) {
-				if(item.getName().matches(name)) {
+				if(item.getName().equals(name)) {
 					return item;
 				}
 			}

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/model/HmBatteryTypeProvider.java
Patch:
@@ -17,7 +17,7 @@
  * @author Gerhard Riegler
  * @since 1.5.1
  */
-public class HmBatteryInfoProvider {
+public class HmBatteryTypeProvider {
 	private static Map<String, HmBattery> batteries = new HashMap<String, HmBattery>();
 
 	static {
@@ -85,7 +85,7 @@ public class HmBatteryInfoProvider {
 	/**
 	 * Returns the battery info of the specified device type.
 	 */
-	public static HmBattery getBatteryInfo(String deviceType) {
+	public static HmBattery getBatteryType(String deviceType) {
 		return batteries.get(deviceType.toUpperCase());
 	}
 }

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/BindingType.java
Patch:
@@ -15,5 +15,5 @@
 * @since 1.4.0
 */
 public enum BindingType {
-	VALVE, BATTERY , MODE
+	VALVE, BATTERY , MODE, ACTUAL
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeGenericBindingProvider.java
Patch:
@@ -33,6 +33,7 @@
  * <li>{ maxcube="JEQ304492:type=valve" } - returns the corresponding valve position in percentage. Only available for heating thermostats.</li>
  * <li>{ maxcube="JEQ304492:type=battery" } - returns the current battery state as text.</li>
  * <li>{ maxcube="JEQ304492:type=mode" } - returns the current mode as text.</li>
+ * <li>{ maxcube="JEQ304492:type=actual" } - returns the current measured temparature.</li>
  * </ul>
  * @author Andreas Heil
  * @since 1.4.0
@@ -82,6 +83,8 @@ public void processBindingConfiguration(String context, Item item, String bindin
 					config.bindingType = BindingType.VALVE;
 				} else if (bindingToken[1].toLowerCase().equals("mode")) {
 					config.bindingType = BindingType.MODE;
+				} else if (bindingToken[1].toLowerCase().equals("actual")) {
+					config.bindingType = BindingType.ACTUAL;
 				} else if (bindingToken[1].toLowerCase().equals("battery")) {
 					config.bindingType = BindingType.BATTERY;
 				}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/DeviceType.java
Patch:
@@ -16,7 +16,7 @@
 */
 public enum DeviceType {
 	Invalid(256), Cube (0), HeatingThermostat(1), HeatingThermostatPlus(2), WallMountedThermostat(
-			3), ShutterContact(4), PushButton(5);
+			3), ShutterContact(4), EcoSwitch(5);
 
 	private int value;
 
@@ -41,7 +41,7 @@ public static DeviceType create(int value) {
 		case 4: 
 			return ShutterContact;
 		case 5:
-			return PushButton;
+			return EcoSwitch;
 		default:
 			return Invalid;
 		}
@@ -60,7 +60,7 @@ public String toString() {
 	    case 4: 
 	      return "Shutter Contact";
 	    case 5:
-	      return "Push Button";
+	      return "Eco Switch";
 	    default:
 	      return "Invalid";
 	    }

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/L_Message.java
Patch:
@@ -50,7 +50,7 @@ public Collection<? extends Device> getDevices(List<Configuration> configuration
 	@Override
 	public void debug(Logger logger) {
 		logger.debug("=== L_Message === ");
-		logger.debug("\tRAW:" + this.getPayload());
+		logger.trace("\tRAW:" + this.getPayload());
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -316,6 +316,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 
 				if (sonosID != null) {
 					if (sonosCommandType != null) {
+						logger.debug("Executing command: item:{}, command:{}, ID:{}, CommandType:{}, commandString:{}",new Object[] {itemName, someCommand, sonosID, sonosCommandType, commandAsString} );
 						executeCommand(itemName, someCommand, sonosID,
 								sonosCommandType, commandAsString);
 					} else {
@@ -923,7 +924,6 @@ public List<SonosZoneGroup> getSonosZoneGroups() {
 
 	public void setSonosZoneGroups(List<SonosZoneGroup> sonosZoneGroups) {
 		this.sonosZoneGroups = sonosZoneGroups;
-		logger.debug("The following Zone Groups are in operation {}",sonosZoneGroups.toString());
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java
Patch:
@@ -473,10 +473,10 @@ private Map<String, TinkerforgeBindingProvider> getBindingProviders(String uid,
         String subDeviceId = provider.getSubId(itemName);
         String deviceName = provider.getName(itemName);
         if (deviceName != null) {
-          logger.trace("found item for command: name {}", deviceName);
           OHTFDevice<?, ?> ohtfDevice = ohConfig.getConfigByOHId(deviceName);
           deviceUid = ohtfDevice.getUid();
-          deviceName = ohtfDevice.getSubid();
+          subDeviceId = ohtfDevice.getSubid();
+          logger.trace("found deviceName {}, uid={}, subId {}", deviceName, deviceUid, subDeviceId);
         }
         if (uid.equals(deviceUid)) {
           if (subId == null && subDeviceId == null) {
@@ -633,7 +633,7 @@ private void postUpdate(String uid, String subId, TinkerforgeValue sensorValue)
    *         subid as second element as {@code String} or {@code null}.
    */
   private String[] getDeviceIdsForDeviceName(String deviceName) {
-    logger.trace("found item for command: name {}", deviceName);
+    logger.trace("searching ids for name {}", deviceName);
     OHTFDevice<?, ?> ohtfDevice = ohConfig.getConfigByOHId(deviceName);
     String[] ids = {ohtfDevice.getUid(), ohtfDevice.getSubid()};
     return ids;

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/DigitalSensorIO4Impl.java
Patch:
@@ -40,10 +40,10 @@
 /**
  * <!-- begin-user-doc -->
  * An implementation of the model object '<em><b>Digital Sensor IO4</b></em>'.
- * <!-- end-user-doc -->
- * 
+
  * @author Theo Weiss
  * @since 1.3.0
+ * <!-- end-user-doc -->
  * <p>
  * The following features are implemented:
  * <ul>

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/command/MultiLevelUpDownCommandConverter.java
Patch:
@@ -24,7 +24,7 @@ public class MultiLevelUpDownCommandConverter extends
 	 */
 	@Override
 	protected Integer convert(Item item, UpDownType command) {
-		return command == UpDownType.DOWN ? 0x63 : 0x00;
+		return command != UpDownType.DOWN ? 0x63 : 0x00;
 	}
 
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -63,11 +63,11 @@ public class ZWaveNode {
 	private String location;
 	
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int manufacturer;
+	private int manufacturer = -1;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceId;
+	private int deviceId = -1;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceType;
+	private int deviceType = -1;
 	
 	private boolean listening;			 // i.e. sleeping
 	private boolean frequentlyListening; 

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/DigitalSensorIO4Impl.java
Patch:
@@ -40,10 +40,10 @@
 /**
  * <!-- begin-user-doc -->
  * An implementation of the model object '<em><b>Digital Sensor IO4</b></em>'.
- * <!-- end-user-doc -->
- * 
+
  * @author Theo Weiss
  * @since 1.3.0
+ * <!-- end-user-doc -->
  * <p>
  * The following features are implemented:
  * <ul>

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java
Patch:
@@ -473,10 +473,10 @@ private Map<String, TinkerforgeBindingProvider> getBindingProviders(String uid,
         String subDeviceId = provider.getSubId(itemName);
         String deviceName = provider.getName(itemName);
         if (deviceName != null) {
-          logger.trace("found item for command: name {}", deviceName);
           OHTFDevice<?, ?> ohtfDevice = ohConfig.getConfigByOHId(deviceName);
           deviceUid = ohtfDevice.getUid();
-          deviceName = ohtfDevice.getSubid();
+          subDeviceId = ohtfDevice.getSubid();
+          logger.trace("found deviceName {}, uid={}, subId {}", deviceName, deviceUid, subDeviceId);
         }
         if (uid.equals(deviceUid)) {
           if (subId == null && subDeviceId == null) {
@@ -633,7 +633,7 @@ private void postUpdate(String uid, String subId, TinkerforgeValue sensorValue)
    *         subid as second element as {@code String} or {@code null}.
    */
   private String[] getDeviceIdsForDeviceName(String deviceName) {
-    logger.trace("found item for command: name {}", deviceName);
+    logger.trace("searching ids for name {}", deviceName);
     OHTFDevice<?, ?> ohtfDevice = ohConfig.getConfigByOHId(deviceName);
     String[] ids = {ohtfDevice.getUid(), ohtfDevice.getSubid()};
     return ids;

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java
Patch:
@@ -473,10 +473,10 @@ private Map<String, TinkerforgeBindingProvider> getBindingProviders(String uid,
         String subDeviceId = provider.getSubId(itemName);
         String deviceName = provider.getName(itemName);
         if (deviceName != null) {
-          logger.trace("found item for command: name {}", deviceName);
           OHTFDevice<?, ?> ohtfDevice = ohConfig.getConfigByOHId(deviceName);
           deviceUid = ohtfDevice.getUid();
-          deviceName = ohtfDevice.getSubid();
+          subDeviceId = ohtfDevice.getSubid();
+          logger.trace("found deviceName {}, uid={}, subId {}", deviceName, deviceUid, subDeviceId);
         }
         if (uid.equals(deviceUid)) {
           if (subId == null && subDeviceId == null) {
@@ -633,7 +633,7 @@ private void postUpdate(String uid, String subId, TinkerforgeValue sensorValue)
    *         subid as second element as {@code String} or {@code null}.
    */
   private String[] getDeviceIdsForDeviceName(String deviceName) {
-    logger.trace("found item for command: name {}", deviceName);
+    logger.trace("searching ids for name {}", deviceName);
     OHTFDevice<?, ?> ohtfDevice = ohConfig.getConfigByOHId(deviceName);
     String[] ids = {ohtfDevice.getUid(), ohtfDevice.getSubid()};
     return ids;

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/DigitalSensorIO4Impl.java
Patch:
@@ -40,10 +40,10 @@
 /**
  * <!-- begin-user-doc -->
  * An implementation of the model object '<em><b>Digital Sensor IO4</b></em>'.
- * <!-- end-user-doc -->
- * 
+
  * @author Theo Weiss
  * @since 1.3.0
+ * <!-- end-user-doc -->
  * <p>
  * The following features are implemented:
  * <ul>

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/DigitalSensorIO4Impl.java
Patch:
@@ -40,10 +40,10 @@
 /**
  * <!-- begin-user-doc -->
  * An implementation of the model object '<em><b>Digital Sensor IO4</b></em>'.
- * <!-- end-user-doc -->
- * 
+
  * @author Theo Weiss
  * @since 1.3.0
+ * <!-- end-user-doc -->
  * <p>
  * The following features are implemented:
  * <ul>

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/TinkerforgeBinding.java
Patch:
@@ -473,10 +473,10 @@ private Map<String, TinkerforgeBindingProvider> getBindingProviders(String uid,
         String subDeviceId = provider.getSubId(itemName);
         String deviceName = provider.getName(itemName);
         if (deviceName != null) {
-          logger.trace("found item for command: name {}", deviceName);
           OHTFDevice<?, ?> ohtfDevice = ohConfig.getConfigByOHId(deviceName);
           deviceUid = ohtfDevice.getUid();
-          deviceName = ohtfDevice.getSubid();
+          subDeviceId = ohtfDevice.getSubid();
+          logger.trace("found deviceName {}, uid={}, subId {}", deviceName, deviceUid, subDeviceId);
         }
         if (uid.equals(deviceUid)) {
           if (subId == null && subDeviceId == null) {
@@ -633,7 +633,7 @@ private void postUpdate(String uid, String subId, TinkerforgeValue sensorValue)
    *         subid as second element as {@code String} or {@code null}.
    */
   private String[] getDeviceIdsForDeviceName(String deviceName) {
-    logger.trace("found item for command: name {}", deviceName);
+    logger.trace("searching ids for name {}", deviceName);
     OHTFDevice<?, ?> ohtfDevice = ohConfig.getConfigByOHId(deviceName);
     String[] ids = {ohtfDevice.getUid(), ohtfDevice.getSubid()};
     return ids;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -63,11 +63,11 @@ public class ZWaveNode {
 	private String location;
 	
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int manufacturer;
+	private int manufacturer = -1;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceId;
+	private int deviceId = -1;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceType;
+	private int deviceType = -1;
 	
 	private boolean listening;			 // i.e. sleeping
 	private boolean frequentlyListening; 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -63,11 +63,11 @@ public class ZWaveNode {
 	private String location;
 	
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int manufacturer;
+	private int manufacturer = -1;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceId;
+	private int deviceId = -1;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceType;
+	private int deviceType = -1;
 	
 	private boolean listening;			 // i.e. sleeping
 	private boolean frequentlyListening; 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -63,11 +63,11 @@ public class ZWaveNode {
 	private String location;
 	
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int manufacturer;
+	private int manufacturer = -1;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceId;
+	private int deviceId = -1;
 	@XStreamConverter(HexToIntegerConverter.class)
-	private int deviceType;
+	private int deviceType = -1;
 	
 	private boolean listening;			 // i.e. sleeping
 	private boolean frequentlyListening; 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMultiLevelSensorConverter.java
Patch:
@@ -103,10 +103,8 @@ public void handleEvent(ZWaveCommandClassValueEvent event, Item item, Map<String
 		Object val = event.getValue();
 		// Perform a scale conversion if needed
 		if (sensorScale != null && Integer.parseInt(sensorScale) != sensorEvent.getSensorScale()) {
-			logger.debug("MultiLevel - scale conversion - in  - {}", val);
 			switch(SensorType.getSensorType(Integer.parseInt(sensorType))) {
 			case TEMPERATURE:
-				logger.debug("MultiLevel - scale conversion - temperature - {}", sensorEvent.getSensorScale());
 				// For temperature, there are only two scales, so we simplify the conversion
 				if(sensorEvent.getSensorScale() == 0) {
 					// Scale is celsius, convert to fahrenheit
@@ -118,7 +116,6 @@ else if(sensorEvent.getSensorScale() == 1) {
 					double f = ((BigDecimal)val).doubleValue();
 					val = new BigDecimal((f - 32.0) * 5.0 / 9.0 );					
 				}
-				logger.debug("MultiLevel - scale conversion - out - {}", val);
 				break;
 			default:
 				break;

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -145,7 +145,6 @@ public static Device create(byte[] raw, List<Configuration> configurations) {
 			Date date = Utils.resolveDateTime(dateValue, timeValue);
 			heatingThermostat.setDateSetpoint(date);
 
-			logger.debug ("Yeah I'm a {}" , device.getType().toString() );
 			int actualTemp = 0;
 			if (device.getType() == DeviceType.WallMountedThermostat) {
 				actualTemp = (raw[11] & 0xFF);
@@ -158,9 +157,8 @@ public static Device create(byte[] raw, List<Configuration> configurations) {
 					logger.debug ("No temperature reading in {} mode", heatingThermostat.getMode()) ;
 				}
 			}
-			heatingThermostat.setTemperatureActual(actualTemp);
 			logger.debug ("Actual Temperature : {}",  (double)actualTemp / 10);
-			logger.debug ("Actual Temperature: {}", heatingThermostat.getTemperatureActual().toString());
+			heatingThermostat.setTemperatureActual((double)actualTemp / 10);
 			break;
 		case EcoSwitch:
 			String eCoSwitchData = Utils.toHex(raw[3] & 0xFF, raw[4] & 0xFF, raw[5] & 0xFF);

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/HeatingThermostat.java
Patch:
@@ -8,6 +8,7 @@
  */
 package org.openhab.binding.maxcube.internal.message;
 
+import java.text.DecimalFormat;
 import java.util.Calendar;
 import java.util.Date;
 
@@ -113,8 +114,8 @@ public void setDateSetpoint(Date date) {
 	 * Sets the actual temperature for this thermostat. 
 	 * @param value the actual temperature raw value as provided by the L message
 	 */
-	public void setTemperatureActual(int value) {
-		this.temperatureActual = (double)value / 10;
+	public void setTemperatureActual(double value) {
+		this.temperatureActual = value ;
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMultiLevelSensorConverter.java
Patch:
@@ -103,7 +103,7 @@ public void handleEvent(ZWaveCommandClassValueEvent event, Item item, Map<String
 		Object val = event.getValue();
 		// Perform a scale conversion if needed
 		if (sensorScale != null && Integer.parseInt(sensorScale) != sensorEvent.getSensorScale()) {
-			logger.debug("MultiLevel - scale conversion");
+			logger.debug("MultiLevel - scale conversion - in  - {}", val);
 			switch(SensorType.getSensorType(Integer.parseInt(sensorType))) {
 			case TEMPERATURE:
 				logger.debug("MultiLevel - scale conversion - temperature - {}", sensorEvent.getSensorScale());
@@ -118,12 +118,13 @@ else if(sensorEvent.getSensorScale() == 1) {
 					double f = ((BigDecimal)val).doubleValue();
 					val = new BigDecimal((f - 32.0) * 5.0 / 9.0 );					
 				}
+				logger.debug("MultiLevel - scale conversion - out - {}", val);
 				break;
 			default:
 				break;
 			}
 		}
-		
+
 		State state = converter.convertFromValueToState(val);
 		this.getEventPublisher().postUpdate(item.getName(), state);
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveMeterConverter.java
Patch:
@@ -104,11 +104,9 @@ public void handleEvent(ZWaveCommandClassValueEvent event, Item item, Map<String
 		Object val = event.getValue();
 
 		// If we've set a zero, then anything below this value needs to be considered ZERO
-		if (meterZero != null && MeterScale.getMeterScale(meterScale) != meterEvent.getMeterScale()){
-			logger.debug("Meter - zero conversion - {}", val.toString());
+		if (meterZero != null) {
 			if(((BigDecimal)val).doubleValue() <= Double.parseDouble(meterZero))
 				val = BigDecimal.ZERO;
-			logger.debug("Meter - zero conversion - {}", val.toString());
 		}
 
 		State state = converter.convertFromValueToState(val);

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -70,9 +70,7 @@ private static Device create(String rfAddress, List<Configuration> configuration
 				case ShutterContact:
 					return new ShutterContact(c);
 				case WallMountedThermostat:
-					WallMountedThermostat wallThermostat = new WallMountedThermostat(c);
-					wallThermostat.setType(c.getDeviceType());
-					return wallThermostat;
+					return new WallMountedThermostat(c);
 				default:
 					return new UnsupportedDevice(c);
 				}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/HeatingThermostat.java
Patch:
@@ -50,7 +50,7 @@ public DeviceType getType() {
 
 	/**
 	 * Sets the DeviceType for this thermostat.
-	 * @param DeviceType the valve position as provided by the L message
+	 * @param DeviceType as provided by the C message
 	 */
 	void setType (DeviceType type) {
 		this.deviceType = type;

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/BindingType.java
Patch:
@@ -15,5 +15,5 @@
 * @since 1.4.0
 */
 public enum BindingType {
-	VALVE, BATTERY , MODE
+	VALVE, BATTERY , MODE, ACTUAL
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -316,6 +316,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 
 				if (sonosID != null) {
 					if (sonosCommandType != null) {
+						logger.debug("Executing command: item:{}, command:{}, ID:{}, CommandType:{}, commandString:{}",new Object[] {itemName, someCommand, sonosID, sonosCommandType, commandAsString} );
 						executeCommand(itemName, someCommand, sonosID,
 								sonosCommandType, commandAsString);
 					} else {

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -923,7 +923,6 @@ public List<SonosZoneGroup> getSonosZoneGroups() {
 
 	public void setSonosZoneGroups(List<SonosZoneGroup> sonosZoneGroups) {
 		this.sonosZoneGroups = sonosZoneGroups;
-		logger.debug("The following Zone Groups are in operation {}",sonosZoneGroups.toString());
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -316,6 +316,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 
 				if (sonosID != null) {
 					if (sonosCommandType != null) {
+						logger.debug("Executing command: item:{}, command:{}, ID:{}, CommandType:{}, commandString:{}",new Object[] {itemName, someCommand, sonosID, sonosCommandType, commandAsString} );
 						executeCommand(itemName, someCommand, sonosID,
 								sonosCommandType, commandAsString);
 					} else {
@@ -923,7 +924,6 @@ public List<SonosZoneGroup> getSonosZoneGroups() {
 
 	public void setSonosZoneGroups(List<SonosZoneGroup> sonosZoneGroups) {
 		this.sonosZoneGroups = sonosZoneGroups;
-		logger.debug("The following Zone Groups are in operation {}",sonosZoneGroups.toString());
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -316,6 +316,7 @@ protected void internalReceiveCommand(String itemName, Command command) {
 
 				if (sonosID != null) {
 					if (sonosCommandType != null) {
+						logger.debug("Executing command: item:{}, command:{}, ID:{}, CommandType:{}, commandString:{}",new Object[] {itemName, someCommand, sonosID, sonosCommandType, commandAsString} );
 						executeCommand(itemName, someCommand, sonosID,
 								sonosCommandType, commandAsString);
 					} else {

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -923,7 +923,6 @@ public List<SonosZoneGroup> getSonosZoneGroups() {
 
 	public void setSonosZoneGroups(List<SonosZoneGroup> sonosZoneGroups) {
 		this.sonosZoneGroups = sonosZoneGroups;
-		logger.debug("The following Zone Groups are in operation {}",sonosZoneGroups.toString());
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/internal/XbmcGenericBindingProvider.java
Patch:
@@ -99,7 +99,7 @@ public String getProperty(String itemname) {
 	@Override
 	public boolean isInBound(String itemname) {
 		XbmcBindingConfig bindingConfig = (XbmcBindingConfig) bindingConfigs.get(itemname);
-		return bindingConfig.isInBound();
+		return bindingConfig != null ? bindingConfig.isInBound(): false;
 	}
 
 	class XbmcBindingConfig implements BindingConfig {

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/model/Zone.java
Patch:
@@ -55,7 +55,6 @@ public void updateItem(Item item, OmniLinkBindingConfig config,
 		int current = ((properties.getStatus() >> 0) & 0x03);
 		int latched = ((properties.getStatus() >> 2) & 0x03);
 		int arming = ((properties.getStatus() >> 4) & 0x03);
-		int trouble = ((properties.getStatus() >> 6) & 0x01);
 
 		String latchedTxt = (latched < LATCHED_TEXT.length ? LATCHED_TEXT[latched]
 				: "?");
@@ -80,7 +79,7 @@ public void updateItem(Item item, OmniLinkBindingConfig config,
 			str = latchedTxt;
 			break;
 		case ZONE_STATUS_ALL:
-			str = currentTxt + " | " + latchedTxt + " | " + arming;
+			str = currentTxt + " | " + latchedTxt + " | " + armingTxt;
 			break;
 		default:
 			break;

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -78,6 +78,7 @@ public class KNXCoreTypeMapper implements KNXTypeMapper {
 		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_ELECTRICAL_CURRENT.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_BRIGHTNESS.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_TIMEPERIOD_HOURS.getID(), DecimalType.class);
+		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_VALUE_2_UCOUNT.getID(), DecimalType.class);		
 		dptTypeMap.put("9.001", DecimalType.class);
 		dptTypeMap.put(DPTXlator4ByteSigned.DPT_COUNT.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator4ByteSigned.DPT_ACTIVE_ENERGY.getID(), DecimalType.class);

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/RESTApplication.java
Patch:
@@ -196,7 +196,9 @@ private Dictionary<String, String> getJerseyServletParams() {
         // use the default interceptors without PaddingAtmosphereInterceptor
         // see: https://groups.google.com/forum/#!topic/openhab/Z-DVBXdNiYE
         jerseyServletParams.put("org.atmosphere.cpr.AtmosphereInterceptor", "org.atmosphere.interceptor.DefaultHeadersInterceptor,org.atmosphere.interceptor.AndroidAtmosphereInterceptor,org.atmosphere.interceptor.SSEAtmosphereInterceptor,org.atmosphere.interceptor.JSONPAtmosphereInterceptor,org.atmosphere.interceptor.JavaScriptProtocol,org.atmosphere.interceptor.OnDisconnectInterceptor");
-        jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.atmosphere.cache.UUIDBroadcasterCache");
+//      The BroadcasterCache is set in ResourceStateChangeListener.registerItems(), because otherwise
+//      it gets somehow overridden by other registered servlets (e.g. the CV-bundle)
+//        jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.atmosphere.cache.UUIDBroadcasterCache");
         jerseyServletParams.put("org.atmosphere.cpr.broadcasterLifeCyclePolicy", "NEVER");
         jerseyServletParams.put("org.atmosphere.cpr.CometSupport.maxInactiveActivity", "3000000");
         

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/listeners/ResourceStateChangeListener.java
Patch:
@@ -16,6 +16,7 @@
 
 import javax.servlet.http.HttpServletRequest;
 
+import org.atmosphere.cache.UUIDBroadcasterCache;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.BroadcastFilter.BroadcastAction.ACTION;
 import org.atmosphere.cpr.PerRequestBroadcastFilter;
@@ -66,6 +67,8 @@ public static ConcurrentMap<String, Object> getMap() {
 	}
 	
 	public void registerItems(){
+		broadcaster.getBroadcasterConfig().setBroadcasterCache(new UUIDBroadcasterCache());
+		
 		broadcaster.getBroadcasterConfig().addFilter(new PerRequestBroadcastFilter() {
 			
 			@Override

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/RESTApplication.java
Patch:
@@ -196,7 +196,9 @@ private Dictionary<String, String> getJerseyServletParams() {
         // use the default interceptors without PaddingAtmosphereInterceptor
         // see: https://groups.google.com/forum/#!topic/openhab/Z-DVBXdNiYE
         jerseyServletParams.put("org.atmosphere.cpr.AtmosphereInterceptor", "org.atmosphere.interceptor.DefaultHeadersInterceptor,org.atmosphere.interceptor.AndroidAtmosphereInterceptor,org.atmosphere.interceptor.SSEAtmosphereInterceptor,org.atmosphere.interceptor.JSONPAtmosphereInterceptor,org.atmosphere.interceptor.JavaScriptProtocol,org.atmosphere.interceptor.OnDisconnectInterceptor");
-        jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.atmosphere.cache.UUIDBroadcasterCache");
+//      The BroadcasterCache is set in ResourceStateChangeListener.registerItems(), because otherwise
+//      it gets somehow overridden by other registered servlets (e.g. the CV-bundle)
+//        jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.atmosphere.cache.UUIDBroadcasterCache");
         jerseyServletParams.put("org.atmosphere.cpr.broadcasterLifeCyclePolicy", "NEVER");
         jerseyServletParams.put("org.atmosphere.cpr.CometSupport.maxInactiveActivity", "3000000");
         

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/listeners/ResourceStateChangeListener.java
Patch:
@@ -16,6 +16,7 @@
 
 import javax.servlet.http.HttpServletRequest;
 
+import org.atmosphere.cache.UUIDBroadcasterCache;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.BroadcastFilter.BroadcastAction.ACTION;
 import org.atmosphere.cpr.PerRequestBroadcastFilter;
@@ -66,6 +67,8 @@ public static ConcurrentMap<String, Object> getMap() {
 	}
 	
 	public void registerItems(){
+		broadcaster.getBroadcasterConfig().setBroadcasterCache(new UUIDBroadcasterCache());
+		
 		broadcaster.getBroadcasterConfig().addFilter(new PerRequestBroadcastFilter() {
 			
 			@Override

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -78,6 +78,7 @@ public class KNXCoreTypeMapper implements KNXTypeMapper {
 		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_ELECTRICAL_CURRENT.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_BRIGHTNESS.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_TIMEPERIOD_HOURS.getID(), DecimalType.class);
+		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_VALUE_2_UCOUNT.getID(), DecimalType.class);		
 		dptTypeMap.put("9.001", DecimalType.class);
 		dptTypeMap.put(DPTXlator4ByteSigned.DPT_COUNT.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator4ByteSigned.DPT_ACTIVE_ENERGY.getID(), DecimalType.class);

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -78,6 +78,7 @@ public class KNXCoreTypeMapper implements KNXTypeMapper {
 		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_ELECTRICAL_CURRENT.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_BRIGHTNESS.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_TIMEPERIOD_HOURS.getID(), DecimalType.class);
+		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_VALUE_2_UCOUNT.getID(), DecimalType.class);		
 		dptTypeMap.put("9.001", DecimalType.class);
 		dptTypeMap.put(DPTXlator4ByteSigned.DPT_COUNT.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator4ByteSigned.DPT_ACTIVE_ENERGY.getID(), DecimalType.class);

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/model/Zone.java
Patch:
@@ -55,7 +55,6 @@ public void updateItem(Item item, OmniLinkBindingConfig config,
 		int current = ((properties.getStatus() >> 0) & 0x03);
 		int latched = ((properties.getStatus() >> 2) & 0x03);
 		int arming = ((properties.getStatus() >> 4) & 0x03);
-		int trouble = ((properties.getStatus() >> 6) & 0x01);
 
 		String latchedTxt = (latched < LATCHED_TEXT.length ? LATCHED_TEXT[latched]
 				: "?");
@@ -80,7 +79,7 @@ public void updateItem(Item item, OmniLinkBindingConfig config,
 			str = latchedTxt;
 			break;
 		case ZONE_STATUS_ALL:
-			str = currentTxt + " | " + latchedTxt + " | " + arming;
+			str = currentTxt + " | " + latchedTxt + " | " + armingTxt;
 			break;
 		default:
 			break;

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/RESTApplication.java
Patch:
@@ -196,7 +196,9 @@ private Dictionary<String, String> getJerseyServletParams() {
         // use the default interceptors without PaddingAtmosphereInterceptor
         // see: https://groups.google.com/forum/#!topic/openhab/Z-DVBXdNiYE
         jerseyServletParams.put("org.atmosphere.cpr.AtmosphereInterceptor", "org.atmosphere.interceptor.DefaultHeadersInterceptor,org.atmosphere.interceptor.AndroidAtmosphereInterceptor,org.atmosphere.interceptor.SSEAtmosphereInterceptor,org.atmosphere.interceptor.JSONPAtmosphereInterceptor,org.atmosphere.interceptor.JavaScriptProtocol,org.atmosphere.interceptor.OnDisconnectInterceptor");
-        jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.atmosphere.cache.UUIDBroadcasterCache");
+//      The BroadcasterCache is set in ResourceStateChangeListener.registerItems(), because otherwise
+//      it gets somehow overridden by other registered servlets (e.g. the CV-bundle)
+//        jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.atmosphere.cache.UUIDBroadcasterCache");
         jerseyServletParams.put("org.atmosphere.cpr.broadcasterLifeCyclePolicy", "NEVER");
         jerseyServletParams.put("org.atmosphere.cpr.CometSupport.maxInactiveActivity", "3000000");
         

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/listeners/ResourceStateChangeListener.java
Patch:
@@ -16,6 +16,7 @@
 
 import javax.servlet.http.HttpServletRequest;
 
+import org.atmosphere.cache.UUIDBroadcasterCache;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.BroadcastFilter.BroadcastAction.ACTION;
 import org.atmosphere.cpr.PerRequestBroadcastFilter;
@@ -66,6 +67,8 @@ public static ConcurrentMap<String, Object> getMap() {
 	}
 	
 	public void registerItems(){
+		broadcaster.getBroadcasterConfig().setBroadcasterCache(new UUIDBroadcasterCache());
+		
 		broadcaster.getBroadcasterConfig().addFilter(new PerRequestBroadcastFilter() {
 			
 			@Override

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/ItemResource.java
Patch:
@@ -40,7 +40,6 @@
 import org.openhab.core.items.GroupItem;
 import org.openhab.core.items.Item;
 import org.openhab.core.items.ItemNotFoundException;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.core.library.types.OnOffType;
@@ -144,9 +143,11 @@ public SuspendResponse<Response>  getItemData(
 			} else {
 				throw new WebApplicationException(Response.notAcceptable(null).build());
 			}
-		}		
+		}
+		
 		GeneralBroadcaster itemBroadcaster = (GeneralBroadcaster) BroadcasterFactory.getDefault().lookup(GeneralBroadcaster.class, resource.getRequest().getPathInfo(), true); 
 		itemBroadcaster.addStateChangeListener(new ItemStateChangeListener());
+		
 		return new SuspendResponse.SuspendResponseBuilder<Response>()
 					.scope(SCOPE.REQUEST)
 					.resumeOnBroadcast(!ResponseTypeHelper.isStreamingTransport(resource.getRequest()))

File: bundles/binding/org.openhab.binding.ecotouch/src/main/java/org/openhab/binding/ecotouch/internal/EcoTouchActivator.java
Patch:
@@ -31,15 +31,15 @@ public final class EcoTouchActivator implements BundleActivator {
 	 */
 	public void start(BundleContext bc) throws Exception {
 		context = bc;
-		logger.debug("EcoTouch binding has been started.");
+		// logger.debug("EcoTouch binding has been started.");
 	}
 
 	/**
 	 * Called whenever the OSGi framework stops our bundle
 	 */
 	public void stop(BundleContext bc) throws Exception {
 		context = null;
-		logger.debug("EcoTouch binding has been stopped.");
+		// logger.debug("EcoTouch binding has been stopped.");
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.ecotouch/src/main/java/org/openhab/binding/ecotouch/internal/EcoTouchGenericBindingProvider.java
Patch:
@@ -47,7 +47,7 @@ public String getBindingType() {
 	@Override
 	public void validateItemType(Item item, String bindingConfig)
 			throws BindingConfigParseException {
-		logger.debug("validateItemType() method is called!");
+		// logger.debug("validateItemType() method is called!");
 		// if (!(item instanceof SwitchItem || item instanceof DimmerItem)) {
 		// throw new BindingConfigParseException("item '" + item.getName()
 		// + "' is of type '" + item.getClass().getSimpleName()
@@ -64,7 +64,7 @@ public void processBindingConfiguration(String context, Item item,
 			String bindingConfig) throws BindingConfigParseException {
 		super.processBindingConfiguration(context, item, bindingConfig);
 
-		logger.debug("processBindingConfiguration() method is called!");
+		// logger.debug("processBindingConfiguration() method is called!");
 
 		if (bindingConfig != null) {
 			EcoTouchBindingConfig config = parseBindingConfig(item,

File: bundles/binding/org.openhab.binding.ecotouch/src/main/java/org/openhab/binding/ecotouch/internal/EcoTouchBinding.java
Patch:
@@ -47,11 +47,13 @@ public EcoTouchBinding() {
 		
 	
 	public void activate() {
+		logger.debug("activate() method is called!");
 	}
 	
 	public void deactivate() {
 		// deallocate resources here that are no longer needed and 
 		// should be reset when activating this binding again
+		logger.debug("deactivate() method is called!");
 	}
 
 	
@@ -107,6 +109,7 @@ protected void internalReceiveUpdate(String itemName, State newState) {
 	 */
 	@Override
 	public void updated(Dictionary<String, ?> config) throws ConfigurationException {
+		logger.debug("updated() is called!");
 		if (config != null) {
 			
 			// to override the default refresh interval one has to add a 

File: bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/RegExTransformationService.java
Patch:
@@ -41,14 +41,15 @@ public String transform(String regExpression, String source) throws Transformati
 
 		logger.debug("about to transform '{}' by the function '{}'", source, regExpression);
 
+		String result = source;
+
 		Matcher matcher = Pattern.compile("^" + regExpression + "$", Pattern.DOTALL).matcher(source.trim());
 		if (!matcher.matches()) {
 			logger.debug("the given regex '^{}$' doesn't match the given content '{}' -> couldn't compute transformation", regExpression, source);
-			return null;
+			return result;
 		}
 		matcher.reset();
 
-		String result = "";
 		while (matcher.find()) {
 			
 			if (matcher.groupCount() == 0) {

File: bundles/binding/org.openhab.binding.jointspace/src/main/java/org/openhab/binding/jointspace/internal/JointSpaceHelpers.java
Patch:
@@ -17,6 +17,7 @@
  * @since 1.5.0
  */
 class volumeConfig {
+	
 	public volumeConfig() {
 		volume = 20;
 		mute = false;
@@ -43,4 +44,5 @@ public volumeConfig() {
 	 * The maximal possible value for @see volume
 	 */
 	int max;
+	
 }

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/IlluminationConverter.java
Patch:
@@ -13,7 +13,6 @@
 import org.enocean.java.common.values.NumberWithUnit;
 import org.enocean.java.common.values.Unit;
 import org.openhab.core.library.types.DecimalType;
-import org.openhab.core.library.types.PercentType;
 
 /**
  * A converter to convert a NumberWithUnit ILLUMINATION to a DecimalType
@@ -31,7 +30,7 @@ protected NumberWithUnit convertFromImpl(DecimalType source) {
 
     @Override
     protected DecimalType convertToImpl(NumberWithUnit source) {
-        return new PercentType((BigDecimal) source.getValue());
+        return new DecimalType((BigDecimal) source.getValue());
     }
 
 }

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/IlluminationConverter.java
Patch:
@@ -13,7 +13,6 @@
 import org.enocean.java.common.values.NumberWithUnit;
 import org.enocean.java.common.values.Unit;
 import org.openhab.core.library.types.DecimalType;
-import org.openhab.core.library.types.PercentType;
 
 /**
  * A converter to convert a NumberWithUnit ILLUMINATION to a DecimalType
@@ -31,7 +30,7 @@ protected NumberWithUnit convertFromImpl(DecimalType source) {
 
     @Override
     protected DecimalType convertToImpl(NumberWithUnit source) {
-        return new PercentType((BigDecimal) source.getValue());
+        return new DecimalType((BigDecimal) source.getValue());
     }
 
 }

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/IlluminationConverter.java
Patch:
@@ -13,7 +13,6 @@
 import org.enocean.java.common.values.NumberWithUnit;
 import org.enocean.java.common.values.Unit;
 import org.openhab.core.library.types.DecimalType;
-import org.openhab.core.library.types.PercentType;
 
 /**
  * A converter to convert a NumberWithUnit ILLUMINATION to a DecimalType
@@ -31,7 +30,7 @@ protected NumberWithUnit convertFromImpl(DecimalType source) {
 
     @Override
     protected DecimalType convertToImpl(NumberWithUnit source) {
-        return new PercentType((BigDecimal) source.getValue());
+        return new DecimalType((BigDecimal) source.getValue());
     }
 
 }

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/ItemResource.java
Patch:
@@ -40,7 +40,6 @@
 import org.openhab.core.items.GroupItem;
 import org.openhab.core.items.Item;
 import org.openhab.core.items.ItemNotFoundException;
-import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.core.library.types.OnOffType;
@@ -144,9 +143,11 @@ public SuspendResponse<Response>  getItemData(
 			} else {
 				throw new WebApplicationException(Response.notAcceptable(null).build());
 			}
-		}		
+		}
+		
 		GeneralBroadcaster itemBroadcaster = (GeneralBroadcaster) BroadcasterFactory.getDefault().lookup(GeneralBroadcaster.class, resource.getRequest().getPathInfo(), true); 
 		itemBroadcaster.addStateChangeListener(new ItemStateChangeListener());
+		
 		return new SuspendResponse.SuspendResponseBuilder<Response>()
 					.scope(SCOPE.REQUEST)
 					.resumeOnBroadcast(!ResponseTypeHelper.isStreamingTransport(resource.getRequest()))

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java
Patch:
@@ -65,6 +65,7 @@ public void start() {
 				ccuCallbackServer = isBinRpc ? new BinRpcCallbackServer(this) : new XmlRpcCallbackServer(this);
 
 				context.getTclRegaScriptClient().start();
+				context.getStateHolder().init();
 				context.getStateHolder().loadDatapoints();
 				context.getStateHolder().loadVariables();
 

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/Squeezebox.java
Patch:
@@ -38,7 +38,6 @@ public class Squeezebox {
 	// handle to the Squeeze Server connection
 	public static SqueezeServer squeezeServer;
 
-	// TODO: could make these properties configurable to support other translation services
 	private final static String GOOGLE_TRANSLATE_URL = "http://translate.google.com/translate_tts?tl=%s&q=";
 	private final static int MAX_SENTENCE_LENGTH = 100;
 

File: bundles/binding/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/CommandType.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.squeezebox.internal;
 
 import org.apache.commons.lang.StringUtils;
+import org.openhab.model.item.binding.BindingConfigParseException;
 
 /**
  * Represents all valid commands which could be processed by this binding
@@ -52,7 +53,7 @@ public String getCommand() {
 		return command;
 	}
 	
-	public static CommandType fromString(String command) {
+	public static CommandType fromString(String command) throws BindingConfigParseException {
 		if (!StringUtils.isEmpty(command)) {
 			for (CommandType commandType : CommandType.values()) {
 				if (commandType.getCommand().equals(command)) {
@@ -61,6 +62,6 @@ public static CommandType fromString(String command) {
 			}
 		}
 		
-		throw new IllegalArgumentException("Invalid command: " + command);
+		throw new BindingConfigParseException("Invalid command: " + command);
 	}
 }

File: bundles/binding/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/SqueezeboxGenericBindingProvider.java
Patch:
@@ -86,6 +86,9 @@ private SqueezeboxBindingConfig parseBindingConfig(String bindingConfig) throws
 		String extra = null;		
 		if (configParts.length > 2)
 			extra = configParts[2];
+			for(int i=3;i<configParts.length;i++) {
+				extra += ":"+configParts[i];
+			}
 
 		return new SqueezeboxBindingConfig(playerId, commandType, extra);
 	}

File: bundles/io/org.openhab.io.squeezeserver/src/main/java/org/openhab/io/squeezeserver/SqueezeServer.java
Patch:
@@ -369,9 +369,9 @@ public synchronized void updated(Dictionary<String, ?> config)
 
 				playersById.put(playerId, player);
 				playersByMacAddress.put(macAddress, player);
-			}  else if (languageMatcher.matches() && StringUtils.isNotBlank(value)) {
+			} else if (languageMatcher.matches() && StringUtils.isNotBlank(value)) {
 				language=value;
-			}else {
+			} else {
 				logger.warn("Unexpected or unsupported configuration: " + key
 						+ ". Ignoring.");
 			}

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/Squeezebox.java
Patch:
@@ -38,7 +38,6 @@ public class Squeezebox {
 	// handle to the Squeeze Server connection
 	public static SqueezeServer squeezeServer;
 
-	// TODO: could make these properties configurable to support other translation services
 	private final static String GOOGLE_TRANSLATE_URL = "http://translate.google.com/translate_tts?tl=%s&q=";
 	private final static int MAX_SENTENCE_LENGTH = 100;
 

File: bundles/binding/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/CommandType.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.squeezebox.internal;
 
 import org.apache.commons.lang.StringUtils;
+import org.openhab.model.item.binding.BindingConfigParseException;
 
 /**
  * Represents all valid commands which could be processed by this binding
@@ -52,7 +53,7 @@ public String getCommand() {
 		return command;
 	}
 	
-	public static CommandType fromString(String command) {
+	public static CommandType fromString(String command) throws BindingConfigParseException {
 		if (!StringUtils.isEmpty(command)) {
 			for (CommandType commandType : CommandType.values()) {
 				if (commandType.getCommand().equals(command)) {
@@ -61,6 +62,6 @@ public static CommandType fromString(String command) {
 			}
 		}
 		
-		throw new IllegalArgumentException("Invalid command: " + command);
+		throw new BindingConfigParseException("Invalid command: " + command);
 	}
 }

File: bundles/binding/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/SqueezeboxGenericBindingProvider.java
Patch:
@@ -86,6 +86,9 @@ private SqueezeboxBindingConfig parseBindingConfig(String bindingConfig) throws
 		String extra = null;		
 		if (configParts.length > 2)
 			extra = configParts[2];
+			for(int i=3;i<configParts.length;i++) {
+				extra += ":"+configParts[i];
+			}
 
 		return new SqueezeboxBindingConfig(playerId, commandType, extra);
 	}

File: bundles/io/org.openhab.io.squeezeserver/src/main/java/org/openhab/io/squeezeserver/SqueezeServer.java
Patch:
@@ -369,9 +369,9 @@ public synchronized void updated(Dictionary<String, ?> config)
 
 				playersById.put(playerId, player);
 				playersByMacAddress.put(macAddress, player);
-			}  else if (languageMatcher.matches() && StringUtils.isNotBlank(value)) {
+			} else if (languageMatcher.matches() && StringUtils.isNotBlank(value)) {
 				language=value;
-			}else {
+			} else {
 				logger.warn("Unexpected or unsupported configuration: " + key
 						+ ". Ignoring.");
 			}

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/Squeezebox.java
Patch:
@@ -39,7 +39,7 @@ public class Squeezebox {
 	public static SqueezeServer squeezeServer;
 
 	// TODO: could make these properties configurable to support other translation services
-	private final static String GOOGLE_TRANSLATE_URL = "http://translate.google.com/translate_tts?tl=en&q=";
+	private final static String GOOGLE_TRANSLATE_URL = "http://translate.google.com/translate_tts?tl=%s&q=";
 	private final static int MAX_SENTENCE_LENGTH = 100;
 
 	@ActionDoc(text = "Turn one of your Squeezebox devices on/off", returns = "<code>true</code>, if successful and <code>false</code> otherwise.")
@@ -211,7 +211,7 @@ public static boolean squeezeboxSpeak(
 			logger.debug("Encoded sentence " + encodedSentence);
 			
 			// build the URL to send to the Squeezebox to play
-			String url = GOOGLE_TRANSLATE_URL + encodedSentence;
+			String url = String.format(GOOGLE_TRANSLATE_URL,squeezeServer.language()) + encodedSentence;
 			
 			// create an instance of our special listener so we can detect when the sentence is complete
 			SqueezeboxSentenceListener listener = new SqueezeboxSentenceListener(playerId);

File: bundles/binding/org.openhab.binding.oceanic/src/main/java/org/openhab/binding/oceanic/OceanicValueSelector.java
Patch:
@@ -207,7 +207,7 @@ public String convertValue(String value) {
 		@Override
 		public String convertValue(String value) {
 
-			final SimpleDateFormat IN_DATE_FORMATTER = new SimpleDateFormat("dd.mm.yy HH:mm:ss");
+			final SimpleDateFormat IN_DATE_FORMATTER = new SimpleDateFormat("dd.MM.yy HH:mm:ss");
 			final SimpleDateFormat OUT_DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
 
 

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletIO16Impl.java
Patch:
@@ -25,7 +25,7 @@
 import org.eclipse.emf.ecore.util.InternalEList;
 import org.openhab.binding.tinkerforge.internal.LoggerConstants;
 import org.openhab.binding.tinkerforge.internal.TinkerforgeErrorHandler;
-import org.openhab.binding.tinkerforge.internal.model.DigitalActor;
+import org.openhab.binding.tinkerforge.internal.model.DigitalActorIO16;
 import org.openhab.binding.tinkerforge.internal.model.DigitalSensor;
 import org.openhab.binding.tinkerforge.internal.model.IODevice;
 import org.openhab.binding.tinkerforge.internal.model.InterruptListener;
@@ -746,7 +746,7 @@ public void initSubDevices() {
 						subId);
 			}
 			for (int i = 0; i < 8; i++) {
-				DigitalActor actor = factory.createDigitalActor();
+				DigitalActorIO16 actor = factory.createDigitalActorIO16();
 				actor.setUid(getUid());
 				String genericDeviceId = port + String.valueOf(i);
 				String subId = "out" + genericDeviceId;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AssignReturnRouteMessageClass.java
Patch:
@@ -25,13 +25,13 @@
 public class AssignReturnRouteMessageClass extends ZWaveCommandProcessor {
 	private static final Logger logger = LoggerFactory.getLogger(AssignReturnRouteMessageClass.class);
 
-	public SerialMessage doRequest(int nodeId, int destinationId) {
+	public SerialMessage doRequest(int nodeId, int destinationId, int callbackId) {
 		logger.debug("NODE {}: Assigning return route to node {}", nodeId, destinationId);
 
 		// Queue the request
 		SerialMessage newMessage = new SerialMessage(SerialMessageClass.AssignReturnRoute, SerialMessageType.Request,
 				SerialMessageClass.AssignReturnRoute, SerialMessagePriority.High);
-		byte[] newPayload = { (byte) nodeId, (byte) destinationId };
+		byte[] newPayload = { (byte) nodeId, (byte) destinationId, (byte) callbackId };
 		newMessage.setMessagePayload(newPayload);
     	return newMessage;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ZWaveCommandProcessor.java
Patch:
@@ -96,8 +96,10 @@ public static ZWaveCommandProcessor getMessageDispatcher(SerialMessage.SerialMes
 			messageMap.put(SerialMessage.SerialMessageClass.AssignReturnRoute, AssignReturnRouteMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.AssignSucReturnRoute, AssignSucReturnRouteMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.DeleteReturnRoute, DeleteReturnRouteMessageClass.class);
+			messageMap.put(SerialMessage.SerialMessageClass.EnableSuc, EnableSucMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.GetRoutingInfo, GetRoutingInfoMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.GetVersion, GetVersionMessageClass.class);
+			messageMap.put(SerialMessage.SerialMessageClass.GetSucNodeId, GetSucNodeIdMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.GetControllerCapabilities, GetControllerCapabilitiesMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.IdentifyNode, IdentifyNodeMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.MemoryGetId, MemoryGetIdMessageClass.class);
@@ -108,6 +110,7 @@ public static ZWaveCommandProcessor getMessageDispatcher(SerialMessage.SerialMes
 			messageMap.put(SerialMessage.SerialMessageClass.SendData, SendDataMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.SerialApiGetCapabilities, SerialApiGetCapabilitiesMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.SerialApiGetInitData, SerialApiGetInitDataMessageClass.class);
+			messageMap.put(SerialMessage.SerialMessageClass.SetSucNodeID, SetSucNodeMessageClass.class);
 		}
 
 		Constructor<? extends ZWaveCommandProcessor> constructor;

File: bundles/binding/org.openhab.binding.oceanic/src/main/java/org/openhab/binding/oceanic/OceanicValueSelector.java
Patch:
@@ -207,7 +207,7 @@ public String convertValue(String value) {
 		@Override
 		public String convertValue(String value) {
 
-			final SimpleDateFormat IN_DATE_FORMATTER = new SimpleDateFormat("dd.mm.yy HH:mm:ss");
+			final SimpleDateFormat IN_DATE_FORMATTER = new SimpleDateFormat("dd.MM.yy HH:mm:ss");
 			final SimpleDateFormat OUT_DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
 
 

File: bundles/binding/org.openhab.binding.oceanic/src/main/java/org/openhab/binding/oceanic/internal/OceanicBinding.java
Patch:
@@ -236,6 +236,7 @@ protected void execute() {
 											.build();
 
 							try {
+								logger.debug("Adding a poll job {} for {}",job.getKey(),itemName);
 								sched.scheduleJob(job, trigger);
 							} catch (SchedulerException e) {
 								logger.error("An exception occurred while scheduling a Quartz Job");
@@ -249,6 +250,7 @@ protected void execute() {
 								if(group.equals("Oceanic-"+provider.toString())) {
 									for(JobKey jobKey : sched.getJobKeys(jobGroupEquals(group))) {
 										if(findFirstMatchingBindingProvider(jobKey.getName().split("-")[0]) == null) {
+											logger.debug("Removing a poll job {} for {}",jobKey,itemName);
 											sched.deleteJob(jobKey);
 										}
 									}
@@ -269,6 +271,7 @@ protected void execute() {
 				Set<String> itemNames = contextMap.get(serialPort);
 				if(itemNames == null || itemNames.size()==0 ) {
 					contextMap.remove(serialPort);
+					logger.debug("Closing the serial port {}",serialPort);
 					serialDevice.close();
 					serialDevices.remove(serialPort);						
 				}

File: bundles/binding/org.openhab.binding.freeswitch/src/main/java/org/openhab/binding/freeswitch/internal/FreeswitchBinding.java
Patch:
@@ -486,7 +486,7 @@ private void handleMessageWaiting(EslEvent event) {
 			return;
 		}
 
-		Pattern pattern = Pattern.compile("([0-9]+)/([0-9]+)\\s\\([0-9]+\\/[0-9]+\\)");
+		Pattern pattern = Pattern.compile("([0-9]+)/([0-9]+).*");
 
 		Matcher matcher = pattern.matcher(messagesString);
 

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/AbstractMqttMessagePubSub.java
Patch:
@@ -205,7 +205,7 @@ public String getTransformationServiceParam() {
 	 */
 	protected void initTransformService() {
 
-		if (getTransformationService() != null) {
+		if (getTransformationService() != null || StringUtils.isBlank(getTransformationServiceName())) {
 			return;
 		}
 

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttEventBusBinding.java
Patch:
@@ -118,7 +118,7 @@ private String getItemNameFromTopic(String topicDefinition,
 	@Override
 	public void receiveUpdate(String itemName, State newState) {
 		if (newState == null || statePublisher == null
-				|| !statePublisher.isActived()) {
+				|| !statePublisher.isActivated()) {
 			return;
 		}
 		statePublisher.publish(statePublisher.getTopic(itemName), newState
@@ -127,7 +127,7 @@ public void receiveUpdate(String itemName, State newState) {
 
 	@Override
 	public void receiveCommand(String itemName, Command command) {
-		if (commandPublisher == null || command == null || !commandPublisher.isActived()) {
+		if (commandPublisher == null || command == null || !commandPublisher.isActivated()) {
 			return;
 		}
 		commandPublisher.publish(

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttMessagePublisher.java
Patch:
@@ -84,6 +84,7 @@ public MqttMessagePublisher(String configuration) throws BindingConfigParseExcep
 				throw new BindingConfigParseException("Missing transformation configuration.");
 			} else {
 				setTransformationRule(config[4].trim());
+				initTransformService();
 			}
 
 		} catch (BindingConfigParseException e) {
@@ -144,6 +145,7 @@ private byte[] createMessage(String value) throws Exception {
 
 		if (getTransformationServiceName() != null
 				&& getTransformationService() == null) {
+			logger.debug("Sending message before transformation service '{}' was initialized.");
 			initTransformService();
 		}
 
@@ -199,7 +201,7 @@ public String getTrigger() {
 	 * @return true if this publisher has been activated by the
 	 *         MqttBrokerConnection.
 	 */
-	public boolean isActived() {
+	public boolean isActivated() {
 		return senderChannel != null;
 	}
 

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttMessageSubscriber.java
Patch:
@@ -93,6 +93,7 @@ public MqttMessageSubscriber(String configuration) throws BindingConfigParseExce
 						"Missing transformation configuration.");
 			} else {
 				setTransformationRule(config[3].trim());
+				initTransformService();
 			}
 
 		} catch (BindingConfigParseException e) {
@@ -110,6 +111,7 @@ public void processMessage(String topic, byte[] message) {
 		try {
 
 			if (getTransformationServiceName() != null && getTransformationService() == null) {
+				logger.debug("Received message before transformation service '{}' was initialized.");
 				initTransformService();
 			}
 

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosGenericBindingProvider.java
Patch:
@@ -20,6 +20,7 @@
 import org.openhab.binding.sonos.internal.Direction;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
+import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.types.DecimalType;
@@ -139,12 +140,12 @@ private void parseBindingConfig(SonosBindingConfig config,Item item,
 				Command command = null;
 				if(commandAsString == null) {
 
-					if(item instanceof NumberItem || item instanceof StringItem){
+					if(item instanceof NumberItem || item instanceof StringItem || item instanceof DimmerItem){
 						command = createCommandFromString(item,Integer.toString(counter));
 						counter++;
 						config.put(command, newElement);
 					} else {
-						logger.warn("Only NumberItem or StringItem can have undefined command types");
+						logger.warn("Only NumberItem, StringItem or DimmerItem can have undefined command types");
 					}								
 				} else { 
 					command = createCommandFromString(item, commandAsString);

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosZonePlayer.java
Patch:
@@ -1754,7 +1754,7 @@ public boolean playLineIn(String remotePlayerName) {
 		coordinator.stop();
 
 		// set the
-		coordinator.setCurrentURI("x-rincon-stream:" + remotePlayer.getUdn(), "");
+		coordinator.setCurrentURI("x-rincon-stream:" + remotePlayer.getUdn().getIdentifierString(), "");
 
 		// take the system off mute
 		coordinator.setMute("OFF");

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/BrickletMultiTouchConfiguration.java
Patch:
@@ -2,8 +2,6 @@
  */
 package org.openhab.binding.tinkerforge.internal.model;
 
-import org.eclipse.emf.common.util.EList;
-
 /**
  * <!-- begin-user-doc -->
  * A representation of the model object '<em><b>Bricklet Multi Touch Configuration</b></em>'.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/DigitalActor.java
Patch:
@@ -191,9 +191,9 @@ public interface DigitalActor extends IODevice, MTFConfigConsumer<TFIOActorConfi
   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
-   * @model dataType="org.openhab.binding.tinkerforge.internal.model.DigitalValue" unique="false"
+   * @model
    * @generated
    */
-  HighLowValue fetchDigitalValue();
+  void fetchDigitalValue();
 
 } // DigitalActor

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletMultiTouch.java
Patch:
@@ -3,7 +3,6 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletMultiTouch;
-import org.eclipse.emf.common.util.EList;
 
 /**
  * <!-- begin-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MSensor.java
Patch:
@@ -61,9 +61,9 @@ public interface MSensor<DeviceValue extends TinkerforgeValue> extends EObject
   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
-   * @model unique="false"
+   * @model
    * @generated
    */
-  DeviceValue fetchSensorValue();
+  void fetchSensorValue();
 
 } // MSensor

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MSwitchActor.java
Patch:
@@ -67,9 +67,9 @@ public interface MSwitchActor extends EObject
   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
-   * @model dataType="org.openhab.binding.tinkerforge.internal.model.SwitchState" unique="false"
+   * @model
    * @generated
    */
-  OnOffValue fetchSwitchState();
+  void fetchSwitchState();
 
 } // MSwitchActor

File: bundles/binding/org.openhab.binding.oceanic/src/main/java/org/openhab/binding/oceanic/OceanicValueSelector.java
Patch:
@@ -207,7 +207,7 @@ public String convertValue(String value) {
 		@Override
 		public String convertValue(String value) {
 
-			final SimpleDateFormat IN_DATE_FORMATTER = new SimpleDateFormat("dd.mm.yy HH:mm:ss");
+			final SimpleDateFormat IN_DATE_FORMATTER = new SimpleDateFormat("dd.MM.yy HH:mm:ss");
 			final SimpleDateFormat OUT_DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
 
 

File: bundles/persistence/org.openhab.persistence.influxdb/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistenceService.java
Patch:
@@ -317,7 +317,7 @@ private Object convertBigDecimalToNum(BigDecimal value) {
     Object convertedValue;
     if (value.scale() == 0) {
       logger.trace("found no fractional part");
-      convertedValue = value.doubleValue();
+      convertedValue = value.toBigInteger();
     } else {
       logger.trace("found fractional part");
       convertedValue = value.doubleValue();

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/BrickletMultiTouchConfiguration.java
Patch:
@@ -2,8 +2,6 @@
  */
 package org.openhab.binding.tinkerforge.internal.model;
 
-import org.eclipse.emf.common.util.EList;
-
 /**
  * <!-- begin-user-doc -->
  * A representation of the model object '<em><b>Bricklet Multi Touch Configuration</b></em>'.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/DigitalActor.java
Patch:
@@ -191,9 +191,9 @@ public interface DigitalActor extends IODevice, MTFConfigConsumer<TFIOActorConfi
   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
-   * @model dataType="org.openhab.binding.tinkerforge.internal.model.DigitalValue" unique="false"
+   * @model
    * @generated
    */
-  HighLowValue fetchDigitalValue();
+  void fetchDigitalValue();
 
 } // DigitalActor

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletMultiTouch.java
Patch:
@@ -3,7 +3,6 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletMultiTouch;
-import org.eclipse.emf.common.util.EList;
 
 /**
  * <!-- begin-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MSensor.java
Patch:
@@ -61,9 +61,9 @@ public interface MSensor<DeviceValue extends TinkerforgeValue> extends EObject
   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
-   * @model unique="false"
+   * @model
    * @generated
    */
-  DeviceValue fetchSensorValue();
+  void fetchSensorValue();
 
 } // MSensor

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MSwitchActor.java
Patch:
@@ -67,9 +67,9 @@ public interface MSwitchActor extends EObject
   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
-   * @model dataType="org.openhab.binding.tinkerforge.internal.model.SwitchState" unique="false"
+   * @model
    * @generated
    */
-  OnOffValue fetchSwitchState();
+  void fetchSwitchState();
 
 } // MSwitchActor

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/BrickletMultiTouchConfiguration.java
Patch:
@@ -2,8 +2,6 @@
  */
 package org.openhab.binding.tinkerforge.internal.model;
 
-import org.eclipse.emf.common.util.EList;
-
 /**
  * <!-- begin-user-doc -->
  * A representation of the model object '<em><b>Bricklet Multi Touch Configuration</b></em>'.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/DigitalActor.java
Patch:
@@ -191,9 +191,9 @@ public interface DigitalActor extends IODevice, MTFConfigConsumer<TFIOActorConfi
   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
-   * @model dataType="org.openhab.binding.tinkerforge.internal.model.DigitalValue" unique="false"
+   * @model
    * @generated
    */
-  HighLowValue fetchDigitalValue();
+  void fetchDigitalValue();
 
 } // DigitalActor

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletMultiTouch.java
Patch:
@@ -3,7 +3,6 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletMultiTouch;
-import org.eclipse.emf.common.util.EList;
 
 /**
  * <!-- begin-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MSensor.java
Patch:
@@ -61,9 +61,9 @@ public interface MSensor<DeviceValue extends TinkerforgeValue> extends EObject
   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
-   * @model unique="false"
+   * @model
    * @generated
    */
-  DeviceValue fetchSensorValue();
+  void fetchSensorValue();
 
 } // MSensor

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MSwitchActor.java
Patch:
@@ -67,9 +67,9 @@ public interface MSwitchActor extends EObject
   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
-   * @model dataType="org.openhab.binding.tinkerforge.internal.model.SwitchState" unique="false"
+   * @model
    * @generated
    */
-  OnOffValue fetchSwitchState();
+  void fetchSwitchState();
 
 } // MSwitchActor

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/BinRpcClient.java
Patch:
@@ -115,7 +115,7 @@ private synchronized void sendMessage(HmInterface hmInterface, BinRpcRequest req
 		} catch (ConnectException cex) {
 			logger.info("Can't connect to interface {}", hmInterface);
 		} catch (Exception ex) {
-			throw new CcuClientException(ex.getMessage(), ex);
+			throw new CcuClientException(ex.getMessage() + "(sending " + request + ")", ex);
 		} finally {
 			try {
 				if (socket != null) {

File: bundles/binding/org.openhab.binding.freeswitch/src/main/java/org/openhab/binding/freeswitch/internal/FreeswitchBinding.java
Patch:
@@ -486,7 +486,7 @@ private void handleMessageWaiting(EslEvent event) {
 			return;
 		}
 
-		Pattern pattern = Pattern.compile("([0-9]+)/([0-9]+)\\s\\([0-9]+\\/[0-9]+\\)");
+		Pattern pattern = Pattern.compile("([0-9]+)/([0-9]+).*");
 
 		Matcher matcher = pattern.matcher(messagesString);
 

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosZonePlayer.java
Patch:
@@ -1754,7 +1754,7 @@ public boolean playLineIn(String remotePlayerName) {
 		coordinator.stop();
 
 		// set the
-		coordinator.setCurrentURI("x-rincon-stream:" + remotePlayer.getUdn(), "");
+		coordinator.setCurrentURI("x-rincon-stream:" + remotePlayer.getUdn().getIdentifierString(), "");
 
 		// take the system off mute
 		coordinator.setMute("OFF");

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java
Patch:
@@ -64,7 +64,7 @@ private void setParameters(Calendar calendar, double latitude, double longitude)
   }
 
   private int getTimeZone() {
-    return calendar.getTimeZone().getDSTSavings() / 3600000;
+    return calendar.getTimeZone().getRawOffset() / 3600000;
   }
 
   private boolean isDaylightSavingTime() {

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/AbstractMqttMessagePubSub.java
Patch:
@@ -205,7 +205,7 @@ public String getTransformationServiceParam() {
 	 */
 	protected void initTransformService() {
 
-		if (getTransformationService() != null) {
+		if (getTransformationService() != null || StringUtils.isBlank(getTransformationServiceName())) {
 			return;
 		}
 

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttEventBusBinding.java
Patch:
@@ -118,7 +118,7 @@ private String getItemNameFromTopic(String topicDefinition,
 	@Override
 	public void receiveUpdate(String itemName, State newState) {
 		if (newState == null || statePublisher == null
-				|| !statePublisher.isActived()) {
+				|| !statePublisher.isActivated()) {
 			return;
 		}
 		statePublisher.publish(statePublisher.getTopic(itemName), newState
@@ -127,7 +127,7 @@ public void receiveUpdate(String itemName, State newState) {
 
 	@Override
 	public void receiveCommand(String itemName, Command command) {
-		if (commandPublisher == null || command == null || !commandPublisher.isActived()) {
+		if (commandPublisher == null || command == null || !commandPublisher.isActivated()) {
 			return;
 		}
 		commandPublisher.publish(

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttMessagePublisher.java
Patch:
@@ -84,6 +84,7 @@ public MqttMessagePublisher(String configuration) throws BindingConfigParseExcep
 				throw new BindingConfigParseException("Missing transformation configuration.");
 			} else {
 				setTransformationRule(config[4].trim());
+				initTransformService();
 			}
 
 		} catch (BindingConfigParseException e) {
@@ -144,6 +145,7 @@ private byte[] createMessage(String value) throws Exception {
 
 		if (getTransformationServiceName() != null
 				&& getTransformationService() == null) {
+			logger.debug("Sending message before transformation service '{}' was initialized.");
 			initTransformService();
 		}
 
@@ -199,7 +201,7 @@ public String getTrigger() {
 	 * @return true if this publisher has been activated by the
 	 *         MqttBrokerConnection.
 	 */
-	public boolean isActived() {
+	public boolean isActivated() {
 		return senderChannel != null;
 	}
 

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttMessageSubscriber.java
Patch:
@@ -93,6 +93,7 @@ public MqttMessageSubscriber(String configuration) throws BindingConfigParseExce
 						"Missing transformation configuration.");
 			} else {
 				setTransformationRule(config[3].trim());
+				initTransformService();
 			}
 
 		} catch (BindingConfigParseException e) {
@@ -110,6 +111,7 @@ public void processMessage(String topic, byte[] message) {
 		try {
 
 			if (getTransformationServiceName() != null && getTransformationService() == null) {
+				logger.debug("Received message before transformation service '{}' was initialized.");
 				initTransformService();
 			}
 

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosGenericBindingProvider.java
Patch:
@@ -20,6 +20,7 @@
 import org.openhab.binding.sonos.internal.Direction;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
+import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.types.DecimalType;
@@ -139,12 +140,12 @@ private void parseBindingConfig(SonosBindingConfig config,Item item,
 				Command command = null;
 				if(commandAsString == null) {
 
-					if(item instanceof NumberItem || item instanceof StringItem){
+					if(item instanceof NumberItem || item instanceof StringItem || item instanceof DimmerItem){
 						command = createCommandFromString(item,Integer.toString(counter));
 						counter++;
 						config.put(command, newElement);
 					} else {
-						logger.warn("Only NumberItem or StringItem can have undefined command types");
+						logger.warn("Only NumberItem, StringItem or DimmerItem can have undefined command types");
 					}								
 				} else { 
 					command = createCommandFromString(item, commandAsString);

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/protocol/internal/TCPBinding.java
Patch:
@@ -91,7 +91,7 @@ protected boolean internalReceiveChanneledCommand(String itemName,
 			if(result!=null && blocking) {
 				String resultString = "";
 				try {
-					resultString = new String(result.array(), charset);
+					resultString = new String(result.array(), charset).split("\0")[0];
 				} catch (UnsupportedEncodingException e) {
 					logger.warn("Exception while attempting an unsupported encoding scheme");
 				}
@@ -137,7 +137,7 @@ protected void parseBuffer(String itemName, Command aCommand, Direction theDirec
 
 		String theUpdate = "";
 		try {
-			theUpdate = new String(byteBuffer.array(), charset);
+			theUpdate = new String(byteBuffer.array(), charset).split("\0")[0];
 		} catch (UnsupportedEncodingException e) {
 			logger.warn("Exception while attempting an unsupported encoding scheme");
 		}

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/AbstractMqttMessagePubSub.java
Patch:
@@ -205,7 +205,7 @@ public String getTransformationServiceParam() {
 	 */
 	protected void initTransformService() {
 
-		if (getTransformationService() != null) {
+		if (getTransformationService() != null || StringUtils.isBlank(getTransformationServiceName())) {
 			return;
 		}
 

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttEventBusBinding.java
Patch:
@@ -118,7 +118,7 @@ private String getItemNameFromTopic(String topicDefinition,
 	@Override
 	public void receiveUpdate(String itemName, State newState) {
 		if (newState == null || statePublisher == null
-				|| !statePublisher.isActived()) {
+				|| !statePublisher.isActivated()) {
 			return;
 		}
 		statePublisher.publish(statePublisher.getTopic(itemName), newState
@@ -127,7 +127,7 @@ public void receiveUpdate(String itemName, State newState) {
 
 	@Override
 	public void receiveCommand(String itemName, Command command) {
-		if (commandPublisher == null || command == null || !commandPublisher.isActived()) {
+		if (commandPublisher == null || command == null || !commandPublisher.isActivated()) {
 			return;
 		}
 		commandPublisher.publish(

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttMessagePublisher.java
Patch:
@@ -84,6 +84,7 @@ public MqttMessagePublisher(String configuration) throws BindingConfigParseExcep
 				throw new BindingConfigParseException("Missing transformation configuration.");
 			} else {
 				setTransformationRule(config[4].trim());
+				initTransformService();
 			}
 
 		} catch (BindingConfigParseException e) {
@@ -144,6 +145,7 @@ private byte[] createMessage(String value) throws Exception {
 
 		if (getTransformationServiceName() != null
 				&& getTransformationService() == null) {
+			logger.debug("Sending message before transformation service '{}' was initialized.");
 			initTransformService();
 		}
 
@@ -199,7 +201,7 @@ public String getTrigger() {
 	 * @return true if this publisher has been activated by the
 	 *         MqttBrokerConnection.
 	 */
-	public boolean isActived() {
+	public boolean isActivated() {
 		return senderChannel != null;
 	}
 

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttMessageSubscriber.java
Patch:
@@ -93,6 +93,7 @@ public MqttMessageSubscriber(String configuration) throws BindingConfigParseExce
 						"Missing transformation configuration.");
 			} else {
 				setTransformationRule(config[3].trim());
+				initTransformService();
 			}
 
 		} catch (BindingConfigParseException e) {
@@ -110,6 +111,7 @@ public void processMessage(String topic, byte[] message) {
 		try {
 
 			if (getTransformationServiceName() != null && getTransformationService() == null) {
+				logger.debug("Received message before transformation service '{}' was initialized.");
 				initTransformService();
 			}
 

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosGenericBindingProvider.java
Patch:
@@ -20,6 +20,7 @@
 import org.openhab.binding.sonos.internal.Direction;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
+import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.types.DecimalType;
@@ -139,12 +140,12 @@ private void parseBindingConfig(SonosBindingConfig config,Item item,
 				Command command = null;
 				if(commandAsString == null) {
 
-					if(item instanceof NumberItem || item instanceof StringItem){
+					if(item instanceof NumberItem || item instanceof StringItem || item instanceof DimmerItem){
 						command = createCommandFromString(item,Integer.toString(counter));
 						counter++;
 						config.put(command, newElement);
 					} else {
-						logger.warn("Only NumberItem or StringItem can have undefined command types");
+						logger.warn("Only NumberItem, StringItem or DimmerItem can have undefined command types");
 					}								
 				} else { 
 					command = createCommandFromString(item, commandAsString);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveVersionCommandClass.java
Patch:
@@ -131,7 +131,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 					
 				break;
 			default:
-			logger.warn(String.format("Unsupported Command 0x%02X for command class %s (0x%02X).", 
+				logger.warn(String.format("Unsupported Command 0x%02X for command class %s (0x%02X).", 
 					command, 
 					this.getCommandClass().getLabel(),
 					this.getCommandClass().getKey()));

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ZWaveCommandProcessor.java
Patch:
@@ -102,6 +102,7 @@ public static ZWaveCommandProcessor getMessageDispatcher(SerialMessage.SerialMes
 			messageMap.put(SerialMessage.SerialMessageClass.IdentifyNode, IdentifyNodeMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.MemoryGetId, MemoryGetIdMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.RemoveFailedNodeID, RemoveFailedNodeMessageClass.class);
+			messageMap.put(SerialMessage.SerialMessageClass.RemoveNodeFromNetwork, RemoveNodeMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.RequestNodeInfo, RequestNodeInfoMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.RequestNodeNeighborUpdate, RequestNodeNeighborUpdateMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.SendData, SendDataMessageClass.class);

File: bundles/io/org.openhab.io.transport.cul/src/main/java/org/openhab/io/transport/cul/CULActivator.java
Patch:
@@ -8,6 +8,7 @@
  */
 package org.openhab.io.transport.cul;
 
+import org.openhab.io.transport.cul.internal.CULNetworkHandlerImpl;
 import org.openhab.io.transport.cul.internal.CULSerialHandlerImpl;
 import org.osgi.framework.BundleActivator;
 import org.osgi.framework.BundleContext;
@@ -33,6 +34,7 @@ public void start(BundleContext bc) throws Exception {
 		context = bc;
 		logger.debug("CUL transport has been started.");
 		CULManager.registerHandlerClass("serial", CULSerialHandlerImpl.class);
+		CULManager.registerHandlerClass("network", CULNetworkHandlerImpl.class);
 	}
 
 	@Override

File: bundles/io/org.openhab.io.transport.mqtt/src/main/java/org/openhab/io/transport/mqtt/MqttService.java
Patch:
@@ -144,7 +144,7 @@ public void deactivate() {
 	 *            to look for.
 	 * @return existing connection or new one if it didn't exist yet.
 	 */
-	private MqttBrokerConnection getConnection(String brokerName) {
+	private synchronized MqttBrokerConnection getConnection(String brokerName) {
 
 		MqttBrokerConnection conn = brokerConnections.get(brokerName
 				.toLowerCase());

File: bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/AstroCalculator.java
Patch:
@@ -64,7 +64,7 @@ private void setParameters(Calendar calendar, double latitude, double longitude)
   }
 
   private int getTimeZone() {
-    return calendar.getTimeZone().getDSTSavings() / 3600000;
+    return calendar.getTimeZone().getRawOffset() / 3600000;
   }
 
   private boolean isDaylightSavingTime() {

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosZonePlayer.java
Patch:
@@ -1754,7 +1754,7 @@ public boolean playLineIn(String remotePlayerName) {
 		coordinator.stop();
 
 		// set the
-		coordinator.setCurrentURI("x-rincon-stream:" + remotePlayer.getUdn(), "");
+		coordinator.setCurrentURI("x-rincon-stream:" + remotePlayer.getUdn().getIdentifierString(), "");
 
 		// take the system off mute
 		coordinator.setMute("OFF");

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosGenericBindingProvider.java
Patch:
@@ -20,6 +20,7 @@
 import org.openhab.binding.sonos.internal.Direction;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
+import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.types.DecimalType;
@@ -139,12 +140,12 @@ private void parseBindingConfig(SonosBindingConfig config,Item item,
 				Command command = null;
 				if(commandAsString == null) {
 
-					if(item instanceof NumberItem || item instanceof StringItem){
+					if(item instanceof NumberItem || item instanceof StringItem || item instanceof DimmerItem){
 						command = createCommandFromString(item,Integer.toString(counter));
 						counter++;
 						config.put(command, newElement);
 					} else {
-						logger.warn("Only NumberItem or StringItem can have undefined command types");
+						logger.warn("Only NumberItem, StringItem or DimmerItem can have undefined command types");
 					}								
 				} else { 
 					command = createCommandFromString(item, commandAsString);

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBaseDevice.java
Patch:
@@ -88,7 +88,7 @@ public interface MBaseDevice extends EObject
 
   /**
    * Returns the value of the '<em><b>Poll</b></em>' attribute.
-   * The default value is <code>"false"</code>.
+   * The default value is <code>"true"</code>.
    * <!-- begin-user-doc -->
    * <p>
    * If the meaning of the '<em>Poll</em>' attribute isn't clear,
@@ -98,7 +98,7 @@ public interface MBaseDevice extends EObject
    * @return the value of the '<em>Poll</em>' attribute.
    * @see #setPoll(boolean)
    * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBaseDevice_Poll()
-   * @model default="false" unique="false"
+   * @model default="true" unique="false"
    * @generated
    */
   boolean isPoll();

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/AmbientTemperatureImpl.java
Patch:
@@ -118,7 +118,7 @@ public class AmbientTemperatureImpl extends MinimalEObjectImpl.Container impleme
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/DigitalActorImpl.java
Patch:
@@ -114,7 +114,7 @@ public class DigitalActorImpl extends MinimalEObjectImpl.Container implements Di
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/DigitalSensorImpl.java
Patch:
@@ -115,7 +115,7 @@ public class DigitalSensorImpl extends MinimalEObjectImpl.Container implements D
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBarometerTemperatureImpl.java
Patch:
@@ -117,7 +117,7 @@ public class MBarometerTemperatureImpl extends MinimalEObjectImpl.Container impl
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickDCImpl.java
Patch:
@@ -143,7 +143,7 @@ public class MBrickDCImpl extends MinimalEObjectImpl.Container implements MBrick
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickServoImpl.java
Patch:
@@ -113,7 +113,7 @@ public class MBrickServoImpl extends MinimalEObjectImpl.Container implements MBr
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletAmbientLightImpl.java
Patch:
@@ -120,7 +120,7 @@ public class MBrickletAmbientLightImpl extends MinimalEObjectImpl.Container impl
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletBarometerImpl.java
Patch:
@@ -128,7 +128,7 @@ public class MBrickletBarometerImpl extends MinimalEObjectImpl.Container impleme
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletDistanceIRImpl.java
Patch:
@@ -122,7 +122,7 @@ public class MBrickletDistanceIRImpl extends MinimalEObjectImpl.Container implem
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletDistanceUSImpl.java
Patch:
@@ -121,7 +121,7 @@ public class MBrickletDistanceUSImpl extends MinimalEObjectImpl.Container implem
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletHumidityImpl.java
Patch:
@@ -133,7 +133,7 @@ public class MBrickletHumidityImpl extends MinimalEObjectImpl.Container implemen
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletIO16Impl.java
Patch:
@@ -125,7 +125,7 @@ public class MBrickletIO16Impl extends MinimalEObjectImpl.Container implements M
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletIndustrialDigitalIn4Impl.java
Patch:
@@ -133,7 +133,7 @@ public class MBrickletIndustrialDigitalIn4Impl extends MinimalEObjectImpl.Contai
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletLCD20x4Impl.java
Patch:
@@ -123,7 +123,7 @@ public class MBrickletLCD20x4Impl extends MinimalEObjectImpl.Container
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletMoistureImpl.java
Patch:
@@ -112,7 +112,7 @@ public class MBrickletMoistureImpl extends MinimalEObjectImpl.Container implemen
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletMotionDetectorImpl.java
Patch:
@@ -113,7 +113,7 @@ public class MBrickletMotionDetectorImpl extends MinimalEObjectImpl.Container im
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletMultiTouchImpl.java
Patch:
@@ -123,7 +123,7 @@ public class MBrickletMultiTouchImpl extends MinimalEObjectImpl.Container implem
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletRemoteSwitchImpl.java
Patch:
@@ -115,7 +115,7 @@ public class MBrickletRemoteSwitchImpl extends MinimalEObjectImpl.Container impl
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletSoundIntensityImpl.java
Patch:
@@ -119,7 +119,7 @@ public class MBrickletSoundIntensityImpl extends MinimalEObjectImpl.Container im
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletTemperatureIRImpl.java
Patch:
@@ -115,7 +115,7 @@ public class MBrickletTemperatureIRImpl extends MinimalEObjectImpl.Container imp
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletTemperatureImpl.java
Patch:
@@ -122,7 +122,7 @@ public class MBrickletTemperatureImpl extends MinimalEObjectImpl.Container imple
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletTiltImpl.java
Patch:
@@ -103,7 +103,7 @@ public class MBrickletTiltImpl extends MinimalEObjectImpl.Container implements M
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletVoltageCurrentImpl.java
Patch:
@@ -125,7 +125,7 @@ public class MBrickletVoltageCurrentImpl extends MinimalEObjectImpl.Container im
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MDualRelayBrickletImpl.java
Patch:
@@ -113,7 +113,7 @@ public class MDualRelayBrickletImpl extends MinimalEObjectImpl.Container impleme
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MDualRelayImpl.java
Patch:
@@ -128,7 +128,7 @@ public class MDualRelayImpl extends MinimalEObjectImpl.Container implements MDua
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MIndustrialDigitalInImpl.java
Patch:
@@ -106,7 +106,7 @@ public class MIndustrialDigitalInImpl extends MinimalEObjectImpl.Container imple
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MIndustrialQuadRelayBrickletImpl.java
Patch:
@@ -120,7 +120,7 @@ public class MIndustrialQuadRelayBrickletImpl extends MinimalEObjectImpl.Contain
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MIndustrialQuadRelayImpl.java
Patch:
@@ -127,7 +127,7 @@ public class MIndustrialQuadRelayImpl extends MinimalEObjectImpl.Container imple
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MLCD20x4BacklightImpl.java
Patch:
@@ -129,7 +129,7 @@ public class MLCD20x4BacklightImpl extends MinimalEObjectImpl.Container implemen
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MLCD20x4ButtonImpl.java
Patch:
@@ -129,7 +129,7 @@ public class MLCD20x4ButtonImpl extends MinimalEObjectImpl.Container implements
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MServoImpl.java
Patch:
@@ -142,7 +142,7 @@ public class MServoImpl extends MinimalEObjectImpl.Container implements MServo
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.
    * <!-- begin-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/ModelPackageImpl.java
Patch:
@@ -5548,7 +5548,7 @@ public void initializePackageContents()
     initEClass(mBaseDeviceEClass, MBaseDevice.class, "MBaseDevice", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
     initEAttribute(getMBaseDevice_Logger(), this.getMLogger(), "logger", null, 0, 1, MBaseDevice.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
     initEAttribute(getMBaseDevice_Uid(), theEcorePackage.getEString(), "uid", null, 0, 1, MBaseDevice.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
-    initEAttribute(getMBaseDevice_Poll(), theEcorePackage.getEBoolean(), "poll", "false", 0, 1, MBaseDevice.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
+    initEAttribute(getMBaseDevice_Poll(), theEcorePackage.getEBoolean(), "poll", "true", 0, 1, MBaseDevice.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
     initEAttribute(getMBaseDevice_EnabledA(), this.getMAtomicBoolean(), "enabledA", null, 0, 1, MBaseDevice.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
 
     initEOperation(getMBaseDevice__Init(), null, "init", 0, 1, !IS_UNIQUE, IS_ORDERED);

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MultiTouchDeviceImpl.java
Patch:
@@ -109,7 +109,7 @@ public class MultiTouchDeviceImpl extends MinimalEObjectImpl.Container implement
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/ObjectTemperatureImpl.java
Patch:
@@ -119,7 +119,7 @@ public class ObjectTemperatureImpl extends MinimalEObjectImpl.Container implemen
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/RemoteSwitchAImpl.java
Patch:
@@ -125,7 +125,7 @@ public class RemoteSwitchAImpl extends MinimalEObjectImpl.Container implements R
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/RemoteSwitchBImpl.java
Patch:
@@ -125,7 +125,7 @@ public class RemoteSwitchBImpl extends MinimalEObjectImpl.Container implements R
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/RemoteSwitchCImpl.java
Patch:
@@ -125,7 +125,7 @@ public class RemoteSwitchCImpl extends MinimalEObjectImpl.Container implements R
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/VCDeviceCurrentImpl.java
Patch:
@@ -125,7 +125,7 @@ public class VCDeviceCurrentImpl extends MinimalEObjectImpl.Container implements
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/VCDevicePowerImpl.java
Patch:
@@ -125,7 +125,7 @@ public class VCDevicePowerImpl extends MinimalEObjectImpl.Container implements V
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/VCDeviceVoltageImpl.java
Patch:
@@ -125,7 +125,7 @@ public class VCDeviceVoltageImpl extends MinimalEObjectImpl.Container implements
    * @generated
    * @ordered
    */
-  protected static final boolean POLL_EDEFAULT = false;
+  protected static final boolean POLL_EDEFAULT = true;
 
   /**
    * The cached value of the '{@link #isPoll() <em>Poll</em>}' attribute.

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java
Patch:
@@ -254,11 +254,11 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 		}
 		if (StringUtils.isNotBlank((String) config.get("setSUC"))) {
 			try {
-				isSUC = Boolean.parseBoolean((String) config.get("timeout"));
-				logger.info("Update config, isSUC = {}", isSUC);
+				isSUC = Boolean.parseBoolean((String) config.get("setSUC"));
+				logger.info("Update config, setSUC = {}", isSUC);
 			} catch (NumberFormatException e) {
 				isSUC = false;
-				logger.error("Error parsing 'isSUC'. This must be boolean.");
+				logger.error("Error parsing 'setSUC'. This must be boolean.");
 			}
 		}
 

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosGenericBindingProvider.java
Patch:
@@ -20,6 +20,7 @@
 import org.openhab.binding.sonos.internal.Direction;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
+import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.types.DecimalType;
@@ -139,12 +140,12 @@ private void parseBindingConfig(SonosBindingConfig config,Item item,
 				Command command = null;
 				if(commandAsString == null) {
 
-					if(item instanceof NumberItem || item instanceof StringItem){
+					if(item instanceof NumberItem || item instanceof StringItem || item instanceof DimmerItem){
 						command = createCommandFromString(item,Integer.toString(counter));
 						counter++;
 						config.put(command, newElement);
 					} else {
-						logger.warn("Only NumberItem or StringItem can have undefined command types");
+						logger.warn("Only NumberItem, StringItem or DimmerItem can have undefined command types");
 					}								
 				} else { 
 					command = createCommandFromString(item, commandAsString);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -270,7 +270,7 @@ record = new OpenHABConfigurationRecord("nodes/" + "node" + node.getNodeId() + "
 					Date lastDead = node.getDeadTime();
 					Long timeSinceLastDead = Long.MAX_VALUE;
 					if(lastDead != null) {
-						timeSinceLastDead = lastDead.getTime() - System.currentTimeMillis();
+						timeSinceLastDead = System.currentTimeMillis() - lastDead.getTime();
 					}
 					if(node.getDeadCount() > 0 && timeSinceLastDead < 86400000)
 						record.state = OpenHABConfigurationRecord.STATE.WARNING;

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/ModelPackageImpl.java
Patch:
@@ -83,7 +83,6 @@
 import org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer;
 import org.openhab.binding.tinkerforge.internal.model.MTemperatureIRDevice;
 import org.openhab.binding.tinkerforge.internal.model.MTextActor;
-import org.openhab.binding.tinkerforge.internal.model.MVoltageCurrentDevice;
 import org.openhab.binding.tinkerforge.internal.model.ModelFactory;
 import org.openhab.binding.tinkerforge.internal.model.ModelPackage;
 import org.openhab.binding.tinkerforge.internal.model.MultiTouchDevice;

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/VCDeviceCurrent.java
Patch:
@@ -42,7 +42,7 @@ public interface VCDeviceCurrent extends VoltageCurrentDevice
 
   /**
    * Returns the value of the '<em><b>Threshold</b></em>' attribute.
-   * The default value is <code>"0.1"</code>.
+   * The default value is <code>"10"</code>.
    * <!-- begin-user-doc -->
    * <p>
    * If the meaning of the '<em>Threshold</em>' attribute isn't clear,
@@ -52,7 +52,7 @@ public interface VCDeviceCurrent extends VoltageCurrentDevice
    * @return the value of the '<em>Threshold</em>' attribute.
    * @see #setThreshold(BigDecimal)
    * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getVCDeviceCurrent_Threshold()
-   * @model default="0.1" unique="false"
+   * @model default="10" unique="false"
    * @generated
    */
   BigDecimal getThreshold();

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/VCDevicePower.java
Patch:
@@ -42,7 +42,7 @@ public interface VCDevicePower extends VoltageCurrentDevice
 
   /**
    * Returns the value of the '<em><b>Threshold</b></em>' attribute.
-   * The default value is <code>"0.1"</code>.
+   * The default value is <code>"50"</code>.
    * <!-- begin-user-doc -->
    * <p>
    * If the meaning of the '<em>Threshold</em>' attribute isn't clear,
@@ -52,7 +52,7 @@ public interface VCDevicePower extends VoltageCurrentDevice
    * @return the value of the '<em>Threshold</em>' attribute.
    * @see #setThreshold(BigDecimal)
    * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getVCDevicePower_Threshold()
-   * @model default="0.1" unique="false"
+   * @model default="50" unique="false"
    * @generated
    */
   BigDecimal getThreshold();

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/VCDeviceVoltage.java
Patch:
@@ -42,7 +42,7 @@ public interface VCDeviceVoltage extends VoltageCurrentDevice
 
   /**
    * Returns the value of the '<em><b>Threshold</b></em>' attribute.
-   * The default value is <code>"0.1"</code>.
+   * The default value is <code>"20"</code>.
    * <!-- begin-user-doc -->
    * <p>
    * If the meaning of the '<em>Threshold</em>' attribute isn't clear,
@@ -52,7 +52,7 @@ public interface VCDeviceVoltage extends VoltageCurrentDevice
    * @return the value of the '<em>Threshold</em>' attribute.
    * @see #setThreshold(BigDecimal)
    * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getVCDeviceVoltage_Threshold()
-   * @model default="0.1" unique="false"
+   * @model default="20" unique="false"
    * @generated
    */
   BigDecimal getThreshold();

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/ModelPackageImpl.java
Patch:
@@ -5711,15 +5711,15 @@ public void initializePackageContents()
 
     initEClass(vcDeviceVoltageEClass, VCDeviceVoltage.class, "VCDeviceVoltage", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
     initEAttribute(getVCDeviceVoltage_DeviceType(), theEcorePackage.getEString(), "deviceType", "voltageCurrent_voltage", 0, 1, VCDeviceVoltage.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
-    initEAttribute(getVCDeviceVoltage_Threshold(), theEcorePackage.getEBigDecimal(), "threshold", "0.1", 0, 1, VCDeviceVoltage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
+    initEAttribute(getVCDeviceVoltage_Threshold(), theEcorePackage.getEBigDecimal(), "threshold", "20", 0, 1, VCDeviceVoltage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
 
     initEClass(vcDeviceCurrentEClass, VCDeviceCurrent.class, "VCDeviceCurrent", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
     initEAttribute(getVCDeviceCurrent_DeviceType(), theEcorePackage.getEString(), "deviceType", "voltageCurrent_current", 0, 1, VCDeviceCurrent.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
-    initEAttribute(getVCDeviceCurrent_Threshold(), theEcorePackage.getEBigDecimal(), "threshold", "0.1", 0, 1, VCDeviceCurrent.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
+    initEAttribute(getVCDeviceCurrent_Threshold(), theEcorePackage.getEBigDecimal(), "threshold", "10", 0, 1, VCDeviceCurrent.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
 
     initEClass(vcDevicePowerEClass, VCDevicePower.class, "VCDevicePower", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
     initEAttribute(getVCDevicePower_DeviceType(), theEcorePackage.getEString(), "deviceType", "voltageCurrent_power", 0, 1, VCDevicePower.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
-    initEAttribute(getVCDevicePower_Threshold(), theEcorePackage.getEBigDecimal(), "threshold", "0.1", 0, 1, VCDevicePower.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
+    initEAttribute(getVCDevicePower_Threshold(), theEcorePackage.getEBigDecimal(), "threshold", "50", 0, 1, VCDevicePower.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
 
     initEClass(mBrickletBarometerEClass, MBrickletBarometer.class, "MBrickletBarometer", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
     initEAttribute(getMBrickletBarometer_DeviceType(), theEcorePackage.getEString(), "deviceType", "bricklet_barometer", 0, 1, MBrickletBarometer.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/VCDeviceCurrentImpl.java
Patch:
@@ -235,7 +235,7 @@ public class VCDeviceCurrentImpl extends MinimalEObjectImpl.Container implements
    * @generated
    * @ordered
    */
-  protected static final BigDecimal THRESHOLD_EDEFAULT = new BigDecimal("0.1");
+  protected static final BigDecimal THRESHOLD_EDEFAULT = new BigDecimal("10");
 
   /**
    * The cached value of the '{@link #getThreshold() <em>Threshold</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/VCDevicePowerImpl.java
Patch:
@@ -235,7 +235,7 @@ public class VCDevicePowerImpl extends MinimalEObjectImpl.Container implements V
    * @generated
    * @ordered
    */
-  protected static final BigDecimal THRESHOLD_EDEFAULT = new BigDecimal("0.1");
+  protected static final BigDecimal THRESHOLD_EDEFAULT = new BigDecimal("50");
 
   /**
    * The cached value of the '{@link #getThreshold() <em>Threshold</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/VCDeviceVoltageImpl.java
Patch:
@@ -235,7 +235,7 @@ public class VCDeviceVoltageImpl extends MinimalEObjectImpl.Container implements
    * @generated
    * @ordered
    */
-  protected static final BigDecimal THRESHOLD_EDEFAULT = new BigDecimal("0.1");
+  protected static final BigDecimal THRESHOLD_EDEFAULT = new BigDecimal("20");
 
   /**
    * The cached value of the '{@link #getThreshold() <em>Threshold</em>}' attribute.

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/AbstractMqttMessagePubSub.java
Patch:
@@ -205,7 +205,7 @@ public String getTransformationServiceParam() {
 	 */
 	protected void initTransformService() {
 
-		if (getTransformationService() != null) {
+		if (getTransformationService() != null || StringUtils.isBlank(getTransformationServiceName())) {
 			return;
 		}
 

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttEventBusBinding.java
Patch:
@@ -118,7 +118,7 @@ private String getItemNameFromTopic(String topicDefinition,
 	@Override
 	public void receiveUpdate(String itemName, State newState) {
 		if (newState == null || statePublisher == null
-				|| !statePublisher.isActived()) {
+				|| !statePublisher.isActivated()) {
 			return;
 		}
 		statePublisher.publish(statePublisher.getTopic(itemName), newState
@@ -127,7 +127,7 @@ public void receiveUpdate(String itemName, State newState) {
 
 	@Override
 	public void receiveCommand(String itemName, Command command) {
-		if (commandPublisher == null || command == null || !commandPublisher.isActived()) {
+		if (commandPublisher == null || command == null || !commandPublisher.isActivated()) {
 			return;
 		}
 		commandPublisher.publish(

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttMessagePublisher.java
Patch:
@@ -84,6 +84,7 @@ public MqttMessagePublisher(String configuration) throws BindingConfigParseExcep
 				throw new BindingConfigParseException("Missing transformation configuration.");
 			} else {
 				setTransformationRule(config[4].trim());
+				initTransformService();
 			}
 
 		} catch (BindingConfigParseException e) {
@@ -144,6 +145,7 @@ private byte[] createMessage(String value) throws Exception {
 
 		if (getTransformationServiceName() != null
 				&& getTransformationService() == null) {
+			logger.debug("Sending message before transformation service '{}' was initialized.");
 			initTransformService();
 		}
 
@@ -199,7 +201,7 @@ public String getTrigger() {
 	 * @return true if this publisher has been activated by the
 	 *         MqttBrokerConnection.
 	 */
-	public boolean isActived() {
+	public boolean isActivated() {
 		return senderChannel != null;
 	}
 

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttMessageSubscriber.java
Patch:
@@ -93,6 +93,7 @@ public MqttMessageSubscriber(String configuration) throws BindingConfigParseExce
 						"Missing transformation configuration.");
 			} else {
 				setTransformationRule(config[3].trim());
+				initTransformService();
 			}
 
 		} catch (BindingConfigParseException e) {
@@ -110,6 +111,7 @@ public void processMessage(String topic, byte[] message) {
 		try {
 
 			if (getTransformationServiceName() != null && getTransformationService() == null) {
+				logger.debug("Received message before transformation service '{}' was initialized.");
 				initTransformService();
 			}
 

File: bundles/io/org.openhab.io.transport.mqtt/src/main/java/org/openhab/io/transport/mqtt/MqttService.java
Patch:
@@ -144,7 +144,7 @@ public void deactivate() {
 	 *            to look for.
 	 * @return existing connection or new one if it didn't exist yet.
 	 */
-	private MqttBrokerConnection getConnection(String brokerName) {
+	private synchronized MqttBrokerConnection getConnection(String brokerName) {
 
 		MqttBrokerConnection conn = brokerConnections.get(brokerName
 				.toLowerCase());

File: bundles/io/org.openhab.io.transport.cul/src/main/java/org/openhab/io/transport/cul/CULActivator.java
Patch:
@@ -8,6 +8,7 @@
  */
 package org.openhab.io.transport.cul;
 
+import org.openhab.io.transport.cul.internal.CULNetworkHandlerImpl;
 import org.openhab.io.transport.cul.internal.CULSerialHandlerImpl;
 import org.osgi.framework.BundleActivator;
 import org.osgi.framework.BundleContext;
@@ -33,6 +34,7 @@ public void start(BundleContext bc) throws Exception {
 		context = bc;
 		logger.debug("CUL transport has been started.");
 		CULManager.registerHandlerClass("serial", CULSerialHandlerImpl.class);
+		CULManager.registerHandlerClass("network", CULNetworkHandlerImpl.class);
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.insteonplm/src/main/java/org/openhab/binding/insteonplm/internal/message/Msg.java
Patch:
@@ -15,8 +15,8 @@
 import java.util.TreeSet;
 
 import org.openhab.binding.insteonplm.internal.device.InsteonAddress;
-import org.openhab.binding.insteonplm.internal.message.XMLMessageReader.ParsingException;
 import org.openhab.binding.insteonplm.internal.utils.Utils;
+import org.openhab.binding.insteonplm.internal.utils.Utils.ParsingException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/protocol/internal/TCPBinding.java
Patch:
@@ -91,7 +91,7 @@ protected boolean internalReceiveChanneledCommand(String itemName,
 			if(result!=null && blocking) {
 				String resultString = "";
 				try {
-					resultString = new String(result.array(), charset);
+					resultString = new String(result.array(), charset).split("\0")[0];
 				} catch (UnsupportedEncodingException e) {
 					logger.warn("Exception while attempting an unsupported encoding scheme");
 				}
@@ -137,7 +137,7 @@ protected void parseBuffer(String itemName, Command aCommand, Direction theDirec
 
 		String theUpdate = "";
 		try {
-			theUpdate = new String(byteBuffer.array(), charset);
+			theUpdate = new String(byteBuffer.array(), charset).split("\0")[0];
 		} catch (UnsupportedEncodingException e) {
 			logger.warn("Exception while attempting an unsupported encoding scheme");
 		}

File: bundles/binding/org.openhab.binding.urtsi/src/main/java/org/openhab/binding/urtsi/UrtsiBindingProvider.java
Patch:
@@ -21,4 +21,5 @@ public interface UrtsiBindingProvider extends AutoUpdateBindingProvider {
 	String getDeviceId(String itemName);
 	
 	int getChannel (String itemName);
+	int getAddress (String itemName);
 }

File: bundles/binding/org.openhab.binding.urtsi/src/main/java/org/openhab/binding/urtsi/internal/UrtsiBinding.java
Patch:
@@ -92,6 +92,7 @@ private boolean sendToUrtsi(String itemName, Type type) {
 		}
 		
 		int channel = provider.getChannel(itemName);
+		int address = provider.getAddress(itemName);
 		
 		if (urtsiDevice != null) {
 			if (logger.isDebugEnabled()) {
@@ -123,7 +124,8 @@ private boolean sendToUrtsi(String itemName, Type type) {
 			}
 			if (actionKey != null) {
 				String channelString = String.format("%02d", channel);
-				String command = "01" + channelString + actionKey;
+				String addressString = String.format("%02d", address);
+				String command = addressString + channelString + actionKey;
 				boolean executedSuccessfully = urtsiDevice.writeString(command);
 				if (!executedSuccessfully) {
 					if (logger.isErrorEnabled()) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java
Patch:
@@ -250,7 +250,7 @@ public boolean rescheduleHeal() {
 	public void execute() {
 		// Don't start the next node if there's a queue
 		if(zController.getSendQueueLength() > 1) {
-			logger.debug("Queue length is {} - deferring HEAL.");
+			logger.debug("Queue length is {} - deferring HEAL.", zController.getSendQueueLength());
 			return;
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/OpenHABConfigurationRecord.java
Patch:
@@ -35,7 +35,7 @@ public class OpenHABConfigurationRecord {
 	public Map<String, String> actionlist;
 
 	enum TYPE {
-		LIST, FREELIST, MULTILIST, STRING, GROUP, DECIMAL, HEXADECIMAL, BINARY, BYTE, SHORT, LONG
+		LIST, FREELIST, MULTILIST, CONSTANT, STRING, GROUP, DECIMAL, HEXADECIMAL, BINARY, BYTE, SHORT, LONG
 	}
 	
 	enum STATE {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RequestNodeInfoMessageClass.java
Patch:
@@ -34,7 +34,7 @@ public SerialMessage doRequest(int nodeId) {
 	@Override
 	public boolean handleResponse(ZWaveController zController, SerialMessage lastSentMessage, SerialMessage incomingMessage) {
 		logger.trace("Handle RequestNodeInfo Response");
-		if(incomingMessage.getMessageBuffer()[2] != 0x00)
+		if(incomingMessage.getMessagePayloadByte(0) != 0x00)
 			logger.debug("Request node info successfully placed on stack.");
 		else
 			logger.error("Request node info not placed on stack due to error.");

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SendDataMessageClass.java
Patch:
@@ -32,10 +32,10 @@ public class SendDataMessageClass extends ZWaveCommandProcessor {
 	public boolean handleResponse(ZWaveController zController, SerialMessage lastSentMessage,
 			SerialMessage incomingMessage) {
 		logger.trace("Handle Message Send Data Response");
-		if (incomingMessage.getMessageBuffer()[2] != 0x00)
+		if (incomingMessage.getMessagePayloadByte(0) != 0x00)
 			logger.debug("Sent Data successfully placed on stack.");
 		else
-			logger.error("Sent Data was not placed on stack due to error {}.", incomingMessage.getMessageBuffer()[2]);
+			logger.error("Sent Data was not placed on stack due to error {}.", incomingMessage.getMessagePayloadByte(0));
 
 		return true;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ZWaveCommandProcessor.java
Patch:
@@ -98,6 +98,7 @@ public static ZWaveCommandProcessor getMessageDispatcher(SerialMessage.SerialMes
 			messageMap.put(SerialMessage.SerialMessageClass.DeleteReturnRoute, DeleteReturnRouteMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.GetRoutingInfo, GetRoutingInfoMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.GetVersion, GetVersionMessageClass.class);
+			messageMap.put(SerialMessage.SerialMessageClass.GetControllerCapabilities, GetControllerCapabilitiesMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.IdentifyNode, IdentifyNodeMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.MemoryGetId, MemoryGetIdMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.RemoveFailedNodeID, RemoveFailedNodeMessageClass.class);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java
Patch:
@@ -157,6 +157,7 @@ public void bindingChanged(BindingProvider provider, String itemName) {
 	 * {@inheritDoc}
 	 */
 	public void allBindingsChanged(BindingProvider provider) {
+		logger.trace("allBindingsChanged");		
 		super.allBindingsChanged(provider);
 
 		// Bindings have changed - rebuild the polling table

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveVersionCommandClass.java
Patch:
@@ -131,7 +131,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 					
 				break;
 			default:
-			logger.warn(String.format("Unsupported Command 0x%02X for command class %s (0x%02X).", 
+				logger.warn(String.format("Unsupported Command 0x%02X for command class %s (0x%02X).", 
 					command, 
 					this.getCommandClass().getLabel(),
 					this.getCommandClass().getKey()));

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java
Patch:
@@ -250,7 +250,7 @@ public boolean rescheduleHeal() {
 	public void execute() {
 		// Don't start the next node if there's a queue
 		if(zController.getSendQueueLength() > 1) {
-			logger.debug("Queue length is {} - deferring HEAL.");
+			logger.debug("Queue length is {} - deferring HEAL.", zController.getSendQueueLength());
 			return;
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RequestNodeInfoMessageClass.java
Patch:
@@ -34,7 +34,7 @@ public SerialMessage doRequest(int nodeId) {
 	@Override
 	public boolean handleResponse(ZWaveController zController, SerialMessage lastSentMessage, SerialMessage incomingMessage) {
 		logger.trace("Handle RequestNodeInfo Response");
-		if(incomingMessage.getMessageBuffer()[2] != 0x00)
+		if(incomingMessage.getMessagePayloadByte(0) != 0x00)
 			logger.debug("Request node info successfully placed on stack.");
 		else
 			logger.error("Request node info not placed on stack due to error.");

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SendDataMessageClass.java
Patch:
@@ -32,10 +32,10 @@ public class SendDataMessageClass extends ZWaveCommandProcessor {
 	public boolean handleResponse(ZWaveController zController, SerialMessage lastSentMessage,
 			SerialMessage incomingMessage) {
 		logger.trace("Handle Message Send Data Response");
-		if (incomingMessage.getMessageBuffer()[2] != 0x00)
+		if (incomingMessage.getMessagePayloadByte(0) != 0x00)
 			logger.debug("Sent Data successfully placed on stack.");
 		else
-			logger.error("Sent Data was not placed on stack due to error {}.", incomingMessage.getMessageBuffer()[2]);
+			logger.error("Sent Data was not placed on stack due to error {}.", incomingMessage.getMessagePayloadByte(0));
 
 		return true;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ZWaveCommandProcessor.java
Patch:
@@ -98,6 +98,7 @@ public static ZWaveCommandProcessor getMessageDispatcher(SerialMessage.SerialMes
 			messageMap.put(SerialMessage.SerialMessageClass.DeleteReturnRoute, DeleteReturnRouteMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.GetRoutingInfo, GetRoutingInfoMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.GetVersion, GetVersionMessageClass.class);
+			messageMap.put(SerialMessage.SerialMessageClass.GetControllerCapabilities, GetControllerCapabilitiesMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.IdentifyNode, IdentifyNodeMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.MemoryGetId, MemoryGetIdMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.RemoveFailedNodeID, RemoveFailedNodeMessageClass.class);

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletAmbientLight.java
Patch:
@@ -49,7 +49,7 @@ public interface MBrickletAmbientLight extends MDevice<BrickletAmbientLight>, MS
 
   /**
    * Returns the value of the '<em><b>Threshold</b></em>' attribute.
-   * The default value is <code>"0.5"</code>.
+   * The default value is <code>"1"</code>.
    * <!-- begin-user-doc -->
    * <p>
    * If the meaning of the '<em>Threshold</em>' attribute isn't clear,
@@ -59,7 +59,7 @@ public interface MBrickletAmbientLight extends MDevice<BrickletAmbientLight>, MS
    * @return the value of the '<em>Threshold</em>' attribute.
    * @see #setThreshold(BigDecimal)
    * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletAmbientLight_Threshold()
-   * @model default="0.5" unique="false"
+   * @model default="1" unique="false"
    * @generated
    */
   BigDecimal getThreshold();

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletBarometer.java
Patch:
@@ -49,7 +49,7 @@ public interface MBrickletBarometer extends MDevice<BrickletBarometer>, MSensor<
 
   /**
    * Returns the value of the '<em><b>Threshold</b></em>' attribute.
-   * The default value is <code>"0.5"</code>.
+   * The default value is <code>"1"</code>.
    * <!-- begin-user-doc -->
    * <p>
    * If the meaning of the '<em>Threshold</em>' attribute isn't clear,
@@ -59,7 +59,7 @@ public interface MBrickletBarometer extends MDevice<BrickletBarometer>, MSensor<
    * @return the value of the '<em>Threshold</em>' attribute.
    * @see #setThreshold(BigDecimal)
    * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletBarometer_Threshold()
-   * @model default="0.5" unique="false"
+   * @model default="1" unique="false"
    * @generated
    */
   BigDecimal getThreshold();

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletTemperature.java
Patch:
@@ -52,7 +52,7 @@ public interface MBrickletTemperature extends MDevice<BrickletTemperature>, MSen
 
   /**
    * Returns the value of the '<em><b>Threshold</b></em>' attribute.
-   * The default value is <code>"0.05"</code>.
+   * The default value is <code>"0.1"</code>.
    * <!-- begin-user-doc -->
    * <p>
    * If the meaning of the '<em>Threshold</em>' attribute isn't clear,
@@ -62,7 +62,7 @@ public interface MBrickletTemperature extends MDevice<BrickletTemperature>, MSen
    * @return the value of the '<em>Threshold</em>' attribute.
    * @see #setThreshold(BigDecimal)
    * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletTemperature_Threshold()
-   * @model default="0.05" unique="false"
+   * @model default="0.1" unique="false"
    * @generated
    */
   BigDecimal getThreshold();

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletAmbientLightImpl.java
Patch:
@@ -330,7 +330,7 @@ public class MBrickletAmbientLightImpl extends MinimalEObjectImpl.Container impl
    * @generated
    * @ordered
    */
-  protected static final BigDecimal THRESHOLD_EDEFAULT = new BigDecimal("0.5");
+  protected static final BigDecimal THRESHOLD_EDEFAULT = new BigDecimal("1");
 
   /**
    * The cached value of the '{@link #getThreshold() <em>Threshold</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletBarometerImpl.java
Patch:
@@ -348,7 +348,7 @@ public class MBrickletBarometerImpl extends MinimalEObjectImpl.Container impleme
    * @generated
    * @ordered
    */
-  protected static final BigDecimal THRESHOLD_EDEFAULT = new BigDecimal("0.5");
+  protected static final BigDecimal THRESHOLD_EDEFAULT = new BigDecimal("1");
 
   /**
    * The cached value of the '{@link #getThreshold() <em>Threshold</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletTemperatureImpl.java
Patch:
@@ -332,7 +332,7 @@ public class MBrickletTemperatureImpl extends MinimalEObjectImpl.Container imple
    * @generated
    * @ordered
    */
-  protected static final BigDecimal THRESHOLD_EDEFAULT = new BigDecimal("0.05");
+  protected static final BigDecimal THRESHOLD_EDEFAULT = new BigDecimal("0.1");
 
   /**
    * The cached value of the '{@link #getThreshold() <em>Threshold</em>}' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/ModelPackageImpl.java
Patch:
@@ -5008,7 +5008,7 @@ public void initializePackageContents()
 
     initEClass(mBrickletTemperatureEClass, MBrickletTemperature.class, "MBrickletTemperature", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
     initEAttribute(getMBrickletTemperature_DeviceType(), theEcorePackage.getEString(), "deviceType", "bricklet_temperature", 0, 1, MBrickletTemperature.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
-    initEAttribute(getMBrickletTemperature_Threshold(), theEcorePackage.getEBigDecimal(), "threshold", "0.05", 0, 1, MBrickletTemperature.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
+    initEAttribute(getMBrickletTemperature_Threshold(), theEcorePackage.getEBigDecimal(), "threshold", "0.1", 0, 1, MBrickletTemperature.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
 
     initEOperation(getMBrickletTemperature__Init(), null, "init", 0, 1, !IS_UNIQUE, IS_ORDERED);
 
@@ -5027,7 +5027,7 @@ public void initializePackageContents()
 
     initEClass(mBrickletBarometerEClass, MBrickletBarometer.class, "MBrickletBarometer", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
     initEAttribute(getMBrickletBarometer_DeviceType(), theEcorePackage.getEString(), "deviceType", "bricklet_barometer", 0, 1, MBrickletBarometer.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
-    initEAttribute(getMBrickletBarometer_Threshold(), theEcorePackage.getEBigDecimal(), "threshold", "0.5", 0, 1, MBrickletBarometer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
+    initEAttribute(getMBrickletBarometer_Threshold(), theEcorePackage.getEBigDecimal(), "threshold", "1", 0, 1, MBrickletBarometer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
 
     initEOperation(getMBrickletBarometer__Init(), null, "init", 0, 1, !IS_UNIQUE, IS_ORDERED);
 
@@ -5038,7 +5038,7 @@ public void initializePackageContents()
 
     initEClass(mBrickletAmbientLightEClass, MBrickletAmbientLight.class, "MBrickletAmbientLight", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
     initEAttribute(getMBrickletAmbientLight_DeviceType(), theEcorePackage.getEString(), "deviceType", "bricklet_ambient_light", 0, 1, MBrickletAmbientLight.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
-    initEAttribute(getMBrickletAmbientLight_Threshold(), theEcorePackage.getEBigDecimal(), "threshold", "0.5", 0, 1, MBrickletAmbientLight.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
+    initEAttribute(getMBrickletAmbientLight_Threshold(), theEcorePackage.getEBigDecimal(), "threshold", "1", 0, 1, MBrickletAmbientLight.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
 
     initEOperation(getMBrickletAmbientLight__Init(), null, "init", 0, 1, !IS_UNIQUE, IS_ORDERED);
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -647,9 +647,9 @@ record = new OpenHABConfigurationRecord(domain, "node" + neighbor, neighborName,
 				record = new OpenHABConfigurationRecord(domain, "Type", "Controller Type", true);
 				record.type = OpenHABConfigurationRecord.TYPE.LIST;
 				record.value = zController.getControllerType().getLabel();
-				record.addValue(ZWaveDeviceType.PRIMARY.toString(), ZWaveDeviceType.PRIMARY.toString());
-				record.addValue(ZWaveDeviceType.SECONDARY.toString(), ZWaveDeviceType.SECONDARY.toString());
-				record.addValue(ZWaveDeviceType.SUC.toString(), ZWaveDeviceType.SUC.toString());
+				record.addValue(ZWaveDeviceType.PRIMARY.toString(), ZWaveDeviceType.PRIMARY.getLabel());
+				record.addValue(ZWaveDeviceType.SECONDARY.toString(), ZWaveDeviceType.SECONDARY.getLabel());
+				record.addValue(ZWaveDeviceType.SUC.toString(), ZWaveDeviceType.SUC.getLabel());
 
 				// Set the read-only if this isn't a controller!
 				switch(zController.getControllerType()) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -645,6 +645,7 @@ record = new OpenHABConfigurationRecord(domain, "node" + neighbor, neighborName,
 			} else if (arg.equals("controller/")) {
 				// Create the record
 				record = new OpenHABConfigurationRecord(domain, "Type", "Controller Type", true);
+				record.type = OpenHABConfigurationRecord.TYPE.LIST;
 				record.value = zController.getControllerType().getLabel();
 				record.addValue(ZWaveDeviceType.PRIMARY.toString(), ZWaveDeviceType.PRIMARY.toString());
 				record.addValue(ZWaveDeviceType.SECONDARY.toString(), ZWaveDeviceType.SECONDARY.toString());

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -645,6 +645,7 @@ record = new OpenHABConfigurationRecord(domain, "node" + neighbor, neighborName,
 			} else if (arg.equals("controller/")) {
 				// Create the record
 				record = new OpenHABConfigurationRecord(domain, "Type", "Controller Type", true);
+				record.value = zController.getControllerType().getLabel();
 				record.addValue(ZWaveDeviceType.PRIMARY.toString(), ZWaveDeviceType.PRIMARY.toString());
 				record.addValue(ZWaveDeviceType.SECONDARY.toString(), ZWaveDeviceType.SECONDARY.toString());
 				record.addValue(ZWaveDeviceType.SUC.toString(), ZWaveDeviceType.SUC.toString());

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/ZWaveCommandProcessor.java
Patch:
@@ -98,6 +98,7 @@ public static ZWaveCommandProcessor getMessageDispatcher(SerialMessage.SerialMes
 			messageMap.put(SerialMessage.SerialMessageClass.DeleteReturnRoute, DeleteReturnRouteMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.GetRoutingInfo, GetRoutingInfoMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.GetVersion, GetVersionMessageClass.class);
+			messageMap.put(SerialMessage.SerialMessageClass.GetControllerCapabilities, GetControllerCapabilitiesMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.IdentifyNode, IdentifyNodeMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.MemoryGetId, MemoryGetIdMessageClass.class);
 			messageMap.put(SerialMessage.SerialMessageClass.RemoveFailedNodeID, RemoveFailedNodeMessageClass.class);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/OpenHABConfigurationRecord.java
Patch:
@@ -35,7 +35,7 @@ public class OpenHABConfigurationRecord {
 	public Map<String, String> actionlist;
 
 	enum TYPE {
-		LIST, FREELIST, MULTILIST, STRING, GROUP, DECIMAL, HEXADECIMAL, BINARY, BYTE, SHORT, LONG
+		LIST, FREELIST, MULTILIST, CONSTANT, STRING, GROUP, DECIMAL, HEXADECIMAL, BINARY, BYTE, SHORT, LONG
 	}
 	
 	enum STATE {

File: bundles/binding/org.openhab.binding.freeswitch/src/main/java/org/openhab/binding/freeswitch/internal/FreeswitchBinding.java
Patch:
@@ -486,7 +486,8 @@ private void handleMessageWaiting(EslEvent event) {
 			return;
 		}
 
-		Pattern pattern = Pattern.compile("([0-9]+)/([0-9]+)\\s\\([0-9]+\\/[0-9]+\\)");
+		//Pattern pattern = Pattern.compile("([0-9]+)/([0-9]+)\\s\\([0-9]+\\/[0-9]+\\)");
+		Pattern pattern = Pattern.compile("([0-9]+)/([0-9]+).*");
 
 		Matcher matcher = pattern.matcher(messagesString);
 

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/BrickletMultiTouchConfiguration.java
Patch:
@@ -2,8 +2,6 @@
  */
 package org.openhab.binding.tinkerforge.internal.model;
 
-import org.eclipse.emf.common.util.EList;
-
 /**
  * <!-- begin-user-doc -->
  * A representation of the model object '<em><b>Bricklet Multi Touch Configuration</b></em>'.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletMultiTouch.java
Patch:
@@ -3,7 +3,6 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletMultiTouch;
-import org.eclipse.emf.common.util.EList;
 
 /**
  * <!-- begin-user-doc -->

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/util/ModelSwitch.java
Patch:
@@ -625,6 +625,7 @@ protected T doSwitch(int classifierID, EObject theEObject)
         T result = caseMLCD20x4Button(mlcd20x4Button);
         if (result == null) result = caseMOutSwitchActor(mlcd20x4Button);
         if (result == null) result = caseMLCDSubDevice(mlcd20x4Button);
+        if (result == null) result = caseCallbackListener(mlcd20x4Button);
         if (result == null) result = caseMSwitchActor(mlcd20x4Button);
         if (result == null) result = caseMSubDevice(mlcd20x4Button);
         if (result == null) result = caseMBaseDevice(mlcd20x4Button);

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/api/WithingsAuthenticator.java
Patch:
@@ -85,7 +85,7 @@ public OAuthTokens(String token, String tokenSecret) {
 	/**
 	 * Default Redirect URL to which the user is redirected after the login
 	 */
-	private static final String DEFAULT_REDIRECT_URL = "http://dnobel.github.io/openhab/withings.html";
+	private static final String DEFAULT_REDIRECT_URL = "http://www.openhab.org/oauth/withings";
 
 	private static final String FILE_NAME_OAUTH_TOKEN = "oauth_tokens";
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/CcuCommunicator.java
Patch:
@@ -329,7 +329,7 @@ private void executeBindingAction(HomematicBindingConfig bindingConfig) {
 			if (bindingConfig.getAction() == BindingAction.RELOAD_VARIABLES) {
 				stateHolder.reloadVariables();
 			} else if (bindingConfig.getAction() == BindingAction.RELOAD_DATAPOINTS) {
-				stateHolder.reloadVariables();
+				stateHolder.reloadDatapoints();
 			} else {
 				logger.warn("Unknown action {}", bindingConfig.getAction());
 			}

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireBinding.java
Patch:
@@ -281,7 +281,7 @@ private Filter getFilter(OneWireBindingProvider provider, String itemName) {
 		if (filterType == null) {
 			return null;
 		}
-		if (!filterType.equals("tuckey")) {
+		if (!filterType.equals("tukey")) {
 			logger.warn("invalid filter type specified: " + filterType);
 			return null;
 		}

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java
Patch:
@@ -45,7 +45,7 @@
  * @since 0.6.0
  */
 public class OneWireGenericBindingProvider extends AbstractGenericBindingProvider implements OneWireBindingProvider {
-	private static final TreeSet<String> filterTypes = new TreeSet<String>(Arrays.asList("tuckey"));
+	private static final TreeSet<String> filterTypes = new TreeSet<String>(Arrays.asList("tukey"));
 	/**
 	 * {@inheritDoc}
 	 */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -425,6 +425,8 @@ record = new OpenHABConfigurationRecord(domain, "Power", "Power", true);
 			} else if (arg.equals("parameters/")) {
 				if (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {
 					List<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();
+					if(configList == null)
+						return records;
 
 					// Get the configuration command class for this node
 					ZWaveConfigurationCommandClass configurationCommandClass = (ZWaveConfigurationCommandClass) node

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/XmlRpcClient.java
Patch:
@@ -54,7 +54,7 @@ public void init(HmInterface hmInterface) throws CcuClientException {
 	 */
 	@Override
 	public void release(HmInterface hmInterface) throws CcuClientException {
-		xmlRpcConnections.get(hmInterface).init("", hmInterface.toString());
+		xmlRpcConnections.get(hmInterface).init(config.getXmlRpcCallbackUrl(), "");
 	}
 
 	/**

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -425,6 +425,8 @@ record = new OpenHABConfigurationRecord(domain, "Power", "Power", true);
 			} else if (arg.equals("parameters/")) {
 				if (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {
 					List<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();
+					if(configList == null)
+						return records;
 
 					// Get the configuration command class for this node
 					ZWaveConfigurationCommandClass configurationCommandClass = (ZWaveConfigurationCommandClass) node

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -425,6 +425,8 @@ record = new OpenHABConfigurationRecord(domain, "Power", "Power", true);
 			} else if (arg.equals("parameters/")) {
 				if (database.FindProduct(node.getManufacturer(), node.getDeviceType(), node.getDeviceId()) != false) {
 					List<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();
+					if(configList == null)
+						return records;
 
 					// Get the configuration command class for this node
 					ZWaveConfigurationCommandClass configurationCommandClass = (ZWaveConfigurationCommandClass) node

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSBooleanValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSDateValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSEnumValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSFloatingPointValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSIntegerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSPhoneNumberValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSResourceValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneDimmerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneRelayValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneShutterSimpleValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSTimeValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSTimerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSWeekdayValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSBooleanValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSDateValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSEnumValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSFloatingPointValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSIntegerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSPhoneNumberValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSResourceValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneDimmerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneRelayValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneShutterSimpleValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSTimeValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSTimerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSWeekdayValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java
Patch:
@@ -250,7 +250,7 @@ public boolean rescheduleHeal() {
 	public void execute() {
 		// Don't start the next node if there's a queue
 		if(zController.getSendQueueLength() > 1) {
-			logger.debug("Queue length is {} - deferring HEAL.");
+			logger.debug("Queue length is {} - deferring HEAL.", zController.getSendQueueLength());
 			return;
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/RequestNodeInfoMessageClass.java
Patch:
@@ -34,7 +34,7 @@ public SerialMessage doRequest(int nodeId) {
 	@Override
 	public boolean handleResponse(ZWaveController zController, SerialMessage lastSentMessage, SerialMessage incomingMessage) {
 		logger.trace("Handle RequestNodeInfo Response");
-		if(incomingMessage.getMessageBuffer()[2] != 0x00)
+		if(incomingMessage.getMessagePayloadByte(0) != 0x00)
 			logger.debug("Request node info successfully placed on stack.");
 		else
 			logger.error("Request node info not placed on stack due to error.");

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SendDataMessageClass.java
Patch:
@@ -32,10 +32,10 @@ public class SendDataMessageClass extends ZWaveCommandProcessor {
 	public boolean handleResponse(ZWaveController zController, SerialMessage lastSentMessage,
 			SerialMessage incomingMessage) {
 		logger.trace("Handle Message Send Data Response");
-		if (incomingMessage.getMessageBuffer()[2] != 0x00)
+		if (incomingMessage.getMessagePayloadByte(0) != 0x00)
 			logger.debug("Sent Data successfully placed on stack.");
 		else
-			logger.error("Sent Data was not placed on stack due to error {}.", incomingMessage.getMessageBuffer()[2]);
+			logger.error("Sent Data was not placed on stack due to error {}.", incomingMessage.getMessagePayloadByte(0));
 
 		return true;
 	}

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/model/Area.java
Patch:
@@ -27,7 +27,7 @@
  * @since 1.5.0
  */
 public class Area extends OmnilinkDevice {
-	private static final Logger logger = LoggerFactory.getLogger(Aux.class);
+	private static final Logger logger = LoggerFactory.getLogger(Area.class);
 
 	public static final String[] omniText = { "Off", "Day", "Night", "Away",
 			"Vacation", "Day-Instant", "Night-Delayed" };

File: bundles/binding/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/model/Area.java
Patch:
@@ -27,7 +27,7 @@
  * @since 1.5.0
  */
 public class Area extends OmnilinkDevice {
-	private static final Logger logger = LoggerFactory.getLogger(Aux.class);
+	private static final Logger logger = LoggerFactory.getLogger(Area.class);
 
 	public static final String[] omniText = { "Off", "Day", "Night", "Away",
 			"Vacation", "Day-Instant", "Night-Delayed" };

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ConfigurationParameter.java
Patch:
@@ -36,7 +36,7 @@ public ConfigurationParameter(int index, int value, int size) throws IllegalArgu
 			throw new IllegalArgumentException("illegal parameter size");
 		}
 		
-		if (index < 1 || index > 0xFF) {
+		if (index < 0 || index > 0xFF) {
 			throw new IllegalArgumentException("illegal parameter index");
 		}
 		

File: bundles/persistence/org.openhab.persistence.mongodb/java/org/openhab/persistence/mongodb/internal/MongoDBPersistenceService.java
Patch:
@@ -122,7 +122,7 @@ public void store(Item item, String alias) {
 			return;
 		}
 
-		// Connect to mySQL server if we're not already connected
+		// Connect to mongodb server if we're not already connected
 		if (!isConnected()) {
 			connectToDatabase();
 		}
@@ -211,7 +211,7 @@ private void disconnectFromDatabase() {
 	}
 
 	/**
-	 * @{inheritDoc
+	 * @{inheritDoc}
 	 */
 	public void updated(Dictionary<String, ?> config)
 			throws ConfigurationException {

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/TellstickBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2013-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -15,9 +15,9 @@
 import org.openhab.core.binding.BindingProvider;
 
 /**
- * This interface provides the method for getting the openhab configuration 
+ * This interface provides the methods for getting the openhab configuration
  * for the tellstick binding.
- * @author jbh
+ * @author jarlebh
  * @since 1.5.0
  */
 public interface TellstickBindingProvider extends BindingProvider {

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/device/DeviceNotSupportedException.java
Patch:
@@ -7,18 +7,18 @@
  * http://www.eclipse.org/legal/epl-v10.html
  */
 package org.openhab.binding.tellstick.internal.device;
+
 /**
  * Exception for unsuported devices.
  * 
  * @author jarlebh
  * @since 1.5.0
  */
-public class DeviceNotSupportedException extends Exception{
-	
+public class DeviceNotSupportedException extends Exception {
 
 	private static final long serialVersionUID = 1L;
 
-	public DeviceNotSupportedException(String message){
+	public DeviceNotSupportedException(String message) {
 		super(message);
 	}
 }

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/device/iface/DeviceChangeListener.java
Patch:
@@ -21,9 +21,9 @@
 public interface DeviceChangeListener extends EventListener {
 
 	/**
-	 * This event listener must be implemented.
-	 * This is the method that will get called if we got requests.
+	 * This event listener must be implemented. This is the method that will get
+	 * called if we got requests.
 	 */
 	void onRequest(TellstickDeviceEvent newDevices);
-	
+
 }

File: bundles/binding/org.openhab.binding.tellstick/src/main/java/org/openhab/binding/tellstick/internal/device/iface/SensorListener.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.EventListener;
 
 import org.openhab.binding.tellstick.internal.device.TellstickSensorEvent;
+
 /**
  * A listener for sensor events.
  * 

File: bundles/binding/org.openhab.binding.urtsi/src/main/java/org/openhab/binding/urtsi/internal/UrtsiBinding.java
Patch:
@@ -198,6 +198,7 @@ public void updated(Dictionary<String, ? > config)	throws ConfigurationException
 							}
 							urtsiDevice = new UrtsiDevice(port);
 							try {
+								System.setProperty("gnu.io.rxtx.SerialPorts", port);
 								urtsiDevice.initialize();
 							} catch (InitializationException e) {
 								throw new ConfigurationException(configKey, 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/OpenHABConfigurationRecord.java
Patch:
@@ -35,11 +35,11 @@ public class OpenHABConfigurationRecord {
 	public Map<String, String> actionlist;
 
 	enum TYPE {
-		LIST, BYTE, SHORT, LONG, STRING, GROUP
+		LIST, FREELIST, MULTILIST, STRING, GROUP, DECIMAL, HEXADECIMAL, BINARY, BYTE, SHORT, LONG
 	}
 	
 	enum STATE {
-		OK, WARNING, ERROR, INITIALIZING
+		OK, WARNING, ERROR, INITIALIZING, PENDING
 	}
 	
 	/**

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveProductDatabase.java
Patch:
@@ -104,6 +104,9 @@ public ZWaveDbProductFile LoadProductFile() {
 		// Have we selected a product?
 		if (selProduct == null)
 			return null;
+		
+		if(selProduct.ConfigFile == null || selProduct.ConfigFile.isEmpty())
+			return null;
 
 		URL entry = FrameworkUtil.getBundle(ZWaveProductDatabase.class).getEntry("database/" + selProduct.ConfigFile);
 		if (entry == null) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/SerialMessage.java
Patch:
@@ -122,7 +122,7 @@ public SerialMessage(byte[] buffer) {
 	 * @param buffer the buffer to create the SerialMessage from.
 	 */
 	public SerialMessage(int nodeId, byte[] buffer) {
-		logger.debug("NODE {}: Creating new SerialMessage from buffer = {}", nodeId, SerialMessage.bb2hex(buffer));
+		logger.trace("NODE {}: Creating new SerialMessage from buffer = {}", nodeId, SerialMessage.bb2hex(buffer));
 		messageLength = buffer.length - 2; // buffer[1];
 		byte messageCheckSumm = calculateChecksum(buffer);
 		byte messageCheckSummReceived = buffer[messageLength+1];
@@ -139,7 +139,7 @@ public SerialMessage(int nodeId, byte[] buffer) {
 		this.messageClass = SerialMessageClass.getMessageClass(buffer[3] & 0xFF);
 		this.messagePayload = ArrayUtils.subarray(buffer, 4, messageLength + 1);
 		this.messageNode = nodeId;
-		logger.debug("NODE {}: Message payload = {}", getMessageNode(), SerialMessage.bb2hex(messagePayload));
+		logger.trace("NODE {}: Message payload = {}", getMessageNode(), SerialMessage.bb2hex(messagePayload));
 	}
 
     /**

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -544,7 +544,7 @@ public Iterable<HistoricItem> query(FilterCriteria filter) {
 		}
 
 		if (filter.getOrdering() == Ordering.ASCENDING) {
-			filterString += " ORDER BY 'Time' ASC";
+			filterString += " ORDER BY Time ASC";
 		} else {
 			filterString += " ORDER BY Time DESC";
 		}

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/WithingsBindingConfig.java
Patch:
@@ -8,7 +8,7 @@
  * The binding supports to define the {@link MeasureType}.
  * 
  * @author Dennis Nobel
- * @since 0.1.0
+ * @since 1.5.0
  */
 public class WithingsBindingConfig implements BindingConfig {
 

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/WithingsBindingProvider.java
Patch:
@@ -14,7 +14,7 @@
  * Default {@link BindingProvider} for Withings binding.
  * 
  * @author Dennis Nobel
- * @since 0.1.0
+ * @since 1.5.0
  */
 public interface WithingsBindingProvider extends BindingProvider {
 

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/WithingsGenericBindingProvider.java
Patch:
@@ -21,7 +21,7 @@
  * configuration.
  * 
  * @author Dennis Nobel
- * @since 0.1.0
+ * @since 1.5.0
  */
 public class WithingsGenericBindingProvider extends
 		AbstractGenericBindingProvider implements WithingsBindingProvider {

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/api/JsonDeserializers.java
Patch:
@@ -17,7 +17,7 @@
  * {@link MeasureType}.
  * 
  * @author Dennis Nobel
- * @since 0.1.0
+ * @since 1.5.0
  */
 public class JsonDeserializers {
 

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/api/WithingsConnectionException.java
Patch:
@@ -9,7 +9,7 @@
  * 
  * @see http://www.withings.com/de/api#responsecodes
  * @author Dennis Nobel
- * @since 0.1.0
+ * @since 1.5.0
  */
 public class WithingsConnectionException extends Exception {
 

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/model/Attribute.java
Patch:
@@ -5,7 +5,7 @@
  * 
  * @see http://www.withings.com/de/api#bodymetrics
  * @author Dennis Nobel
- * @since 0.1.0
+ * @since 1.5.0
  */
 public enum Attribute {
 

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/model/Category.java
Patch:
@@ -5,7 +5,7 @@
  * 
  * @see http://www.withings.com/de/api#bodymetrics
  * @author Dennis Nobel
- * @since 0.1.0
+ * @since 1.5.0
  */
 public enum Category {
 	MEASURE("Measure", 1), TARGET("Target", 2);

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/model/Measure.java
Patch:
@@ -5,7 +5,7 @@
  * 
  * @see http://www.withings.com/de/api#bodymetrics
  * @author Dennis Nobel
- * @since 0.1.0
+ * @since 1.5.0
  */
 public class Measure {
 

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/model/MeasureGroup.java
Patch:
@@ -9,7 +9,7 @@
  * 
  * @see http://www.withings.com/de/api#bodymetrics
  * @author Dennis Nobel
- * @since 0.1.0
+ * @since 1.5.0
  */
 public class MeasureGroup {
 

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/model/MeasureResult.java
Patch:
@@ -9,7 +9,7 @@
  * 
  * @see http://www.withings.com/de/api#bodymetrics
  * @author Dennis Nobel
- * @since 0.1.0
+ * @since 1.5.0
  */
 public class MeasureResult {
 

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/internal/model/MeasureType.java
Patch:
@@ -5,7 +5,7 @@
  * 
  * @see http://www.withings.com/de/api#bodymetrics
  * @author Dennis Nobel
- * @since 0.1.0
+ * @since 1.5.0
  */
 public enum MeasureType {
 

File: bundles/binding/org.openhab.binding.withings/src/main/java/org/openhab/binding/withings/WithingsBindingProvider.java
Patch:
@@ -11,6 +11,8 @@
 import org.openhab.core.binding.BindingProvider;
 
 /**
+ * Default {@link BindingProvider} for Withings binding.
+ * 
  * @author Dennis Nobel
  * @since 0.1.0
  */

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveSceneConverter.java
Patch:
@@ -65,6 +65,9 @@ void executeRefresh(ZWaveNode node, ZWaveBasicCommandClass commandClass, int end
 
 	@Override
 	void handleEvent(ZWaveCommandClassValueEvent event, Item item, Map<String, String> arguments) {
+		if(arguments.get("scene")==null)
+			return;
+		
 		int scene = Integer.parseInt(arguments.get("scene"));
 		if(scene != (Integer)event.getValue())
 			return;

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSBooleanValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSDateValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSEnumValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSFloatingPointValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSIntegerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSPhoneNumberValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSResourceValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneDimmerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneRelayValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneShutterSimpleValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSTimeValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSTimerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSWeekdayValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveSceneConverter.java
Patch:
@@ -65,6 +65,9 @@ void executeRefresh(ZWaveNode node, ZWaveBasicCommandClass commandClass, int end
 
 	@Override
 	void handleEvent(ZWaveCommandClassValueEvent event, Item item, Map<String, String> arguments) {
+		if(arguments.get("scene")==null)
+			return;
+		
 		int scene = Integer.parseInt(arguments.get("scene"));
 		if(scene != (Integer)event.getValue())
 			return;

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSBooleanValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSDateValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSEnumValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSFloatingPointValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSIntegerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSPhoneNumberValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSResourceValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneDimmerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneRelayValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneShutterSimpleValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSTimeValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSTimerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSWeekdayValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/BindingType.java
Patch:
@@ -15,5 +15,5 @@
 * @since 1.4.0
 */
 public enum BindingType {
-	VALVE, BATTERY
+	VALVE, BATTERY , MODE
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/Utils.java
Patch:
@@ -97,6 +97,7 @@ public static final int fromByte(byte b) {
 	 * 			the time to be converted based on a single byte
 	 * @return the date time based on the values provided
 	 */
+	@SuppressWarnings("deprecation")
 	public static Date resolveDateTime(int date, int time) {
 		
 		int month = ((date & 0xE000) >> 12)+((date & 0x80) >> 7);

File: bundles/binding/org.openhab.binding.nikobus/src/main/java/org/openhab/binding/nikobus/internal/NikobusGenericBindingProvider.java
Patch:
@@ -19,6 +19,7 @@
 import org.openhab.binding.nikobus.internal.config.ModuleChannelGroup;
 import org.openhab.binding.nikobus.internal.core.NikobusModule;
 import org.openhab.core.items.Item;
+import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
 import org.openhab.model.item.binding.BindingConfigParseException;
@@ -52,7 +53,7 @@ public String getBindingType() {
 
 	@Override
 	public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-		if (!(item instanceof SwitchItem)) {
+		if (!(item instanceof SwitchItem) && !(item instanceof RollershutterItem)) {
 			throw new BindingConfigParseException("Item '" + item.getName()
 					+ "' is of type '" + item.getClass().getSimpleName()
 					+ "', which is not supported by the Nikobus Binding.");

File: bundles/binding/org.openhab.binding.nikobus/src/main/java/org/openhab/binding/nikobus/internal/core/NikobusModule.java
Patch:
@@ -8,7 +8,6 @@
  */
 package org.openhab.binding.nikobus.internal.core;
 
-import org.openhab.binding.nikobus.internal.NikobusBinding;
 
 /**
  * A NikobusModule represents a physical module like a switch module or dimmer
@@ -27,7 +26,7 @@ public interface NikobusModule extends NikobusCommandListener {
 	 * 
 	 * @return command or null if none available.
 	 */
-	public NikobusCommand getStatusRequestCommand(NikobusBinding binding);
+	public NikobusCommand getStatusRequestCommand();
 
 	/**
 	 * Get the address of the module.

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosGenericBindingProvider.java
Patch:
@@ -121,8 +121,8 @@ private void parseBindingConfig(SonosBindingConfig config,Item item,
 
 			if (!actionMatcher.matches() && !statusMatcher.matches()) {
 				throw new BindingConfigParseException(
-						"Sonos binding configuration must consist of either three [config="
-								+ statusMatcher + "] or four parts [config="+actionMatcher+"]");
+						"Sonos binding configuration must consist of either two [config="
+								+ statusMatcher + "] or three parts [config="+actionMatcher+"]");
 			} else {	
 				if(actionMatcher.matches()) {
 					commandAsString = actionMatcher.group(1);

File: bundles/binding/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/CommandType.java
Patch:
@@ -37,7 +37,9 @@ public enum CommandType {
 	COVERART("coverart"),
 	YEAR("year"),
 	REMOTETITLE("remotetitle"),
-	GENRE("genre");
+	GENRE("genre"),
+	
+	IRCODE("ircode");
 	
 	/** Represents the player command as it will be used in *.items configuration */
 	String command;

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSBooleanValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSDateValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSEnumValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSFloatingPointValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSIntegerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSPhoneNumberValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSResourceValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneDimmerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneRelayValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSSceneShutterSimpleValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSTimeValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSTimerValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/ws/datatypes/WSWeekdayValue.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.ihc.utcs;
+package org.openhab.binding.ihc.ws.datatypes;
 
 /**
  * <p>

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jService.java
Patch:
@@ -84,7 +84,7 @@ public String getName() {
 	/**
 	 * @{inheritDoc}
 	 */
-	public void store(final Item item, final String alias) {
+	public synchronized void store(final Item item, final String alias) {
 		final String name = alias==null ? item.getName() : alias;
 		ConsolFun function = getConsolidationFunction(item);
 		RrdDb db = getDB(name, function);

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/DateTimeType.java
Patch:
@@ -20,7 +20,7 @@
 
 public class DateTimeType implements PrimitiveType, State {
 	
-	public final static SimpleDateFormat DATE_FORMATTER_WITHTZ = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssz");
+	public final static SimpleDateFormat DATE_FORMATTER_WITH_TZ = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssz");
 	public final static SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
 
 	protected Calendar calendar;
@@ -39,7 +39,7 @@ public DateTimeType(String calendarValue) {
 		
 		try {
 			try {
-				date = DATE_FORMATTER_WITHTZ.parse(calendarValue);
+				date = DATE_FORMATTER_WITH_TZ.parse(calendarValue);
 			}
 			catch (ParseException fpe2) {
 				date = DATE_FORMATTER.parse(calendarValue);

File: bundles/io/org.openhab.io.squeezeserver/src/main/java/org/openhab/io/squeezeserver/SqueezeServer.java
Patch:
@@ -505,7 +505,7 @@ private void handleStatusMessage(SqueezePlayer player, String[] messageParts) {
 				// Parameter Volume
 				else if (messagePart.startsWith("mixer%20volume%3A")) {
 					String value = messagePart.substring("mixer%20volume%3A".length());
-					player.setVolume(Integer.parseInt(value));
+					player.setVolume((int) Double.parseDouble(value));
 				}
 				// Parameter Mode
 				else if (messagePart.startsWith("mode%3A")) {

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/SerialApiGetInitDataMessageClass.java
Patch:
@@ -62,6 +62,8 @@ public boolean handleResponse(ZWaveController zController, SerialMessage lastSen
 			}
 		}
 		
+		logger.info("ZWave API {} API", incomingMessage.getMessagePayloadByte(1) & 0x01 ? "Controller" : "Slave");
+		logger.info("ZWave Controller is {} Controller", incomingMessage.getMessagePayloadByte(1) & 0x04 ? "Primary" : "Secondary");
 		logger.info("------------Number of Nodes Found Registered to ZWave Controller------------");
 		logger.info(String.format("# Nodes = %d", zwaveNodes.size()));
 		logger.info("----------------------------------------------------------------------------");

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -228,8 +228,9 @@ protected BigDecimal extractValue(byte[] buffer, int offset) {
 		int size = buffer[offset] & SIZE_MASK;
 		int precision = (buffer[offset] & PRECISION_MASK) >> PRECISION_SHIFT;
 
-		if((size+offset) > buffer.length) {
-			logger.error("Error extracting value - offset={}, size={}.", offset, size);
+		if((size+offset) >= buffer.length) {
+			logger.error("Error extracting value - length={}, offset={}, size={}.", 
+					new Object[] { buffer.length, offset, size});
 			return BigDecimal.ZERO;
 		}
 		

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting1Message.java
Patch:
@@ -44,6 +44,7 @@ public enum SubType {
 		IMPULS(5),
 		RISINGSUN(6),
 		PHILIPS(7),
+		ENERGENIE(8),
 		
 		UNKNOWN(255);
 

File: bundles/binding/org.openhab.binding.k8055/src/main/java/org/openhab/binding/k8055/internal/k8055GenericBindingProvider.java
Patch:
@@ -106,7 +106,7 @@ protected k8055BindingConfig parseBindingConfig(String bindingConfig)
 			throw new BindingConfigParseException(
 					"Unable to parse k8055 binding string: "
 							+ bindingConfig
-							+ ". IO channel number was greater than the number of physicl channels ");
+							+ ". IO channel number was greater than the number of physical channels ");
 		}
 
 		return config;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -458,7 +458,6 @@ record = new OpenHABConfigurationRecord(domain, "configuration" + parameter.Inde
 						try {
 							record.type = OpenHABConfigurationRecord.TYPE.valueOf(parameter.Type.toUpperCase());
 						} catch(IllegalArgumentException e) {
-							logger.error("Error with parameter type for {} - Set {} - assuming LONG", parameter.Label.toString(), parameter.Type);
 							record.type = OpenHABConfigurationRecord.TYPE.LONG;							
 						}
 

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/internal/XbmcActiveBinding.java
Patch:
@@ -219,15 +219,15 @@ private XbmcConnector getXbmcConnector(String xbmcInstance) {
 		}		
 
 		// create a new connection handler
-		logger.debug("Creating new XbmcConnector for '{}'", xbmcInstance);
+		logger.debug("Creating new XbmcConnector for '{}' on {}", xbmcInstance, xbmcHost.getHostname());
 		connector = new XbmcConnector(xbmcHost, eventPublisher);
 		connectors.put(xbmcInstance, connector);
 		
 		// attempt to open the connection straight away
 		try {
 			connector.open();
 		} catch (Exception e) {
-			logger.error("Connection failed for '{}'", xbmcInstance);
+			logger.error("Connection failed for '{}' on {}", xbmcInstance, xbmcHost.getHostname());
 		}
 
 		return connector;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java
Patch:
@@ -265,7 +265,7 @@ public void execute() {
 					logger.debug("NODE {}: DEAD node.", node.getNodeId());
 					// The node is dead, but we may have already started a Heal
 					// If so, don't start it again!
-					if(isNodeHealing(node.getNodeId())) {
+					if(!isNodeHealing(node.getNodeId())) {
 						logger.debug("NODE {}: DEAD node - requesting network heal.", node.getNodeId());
 
 						healNode(node.getNodeId());

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/XbmcBindingProvider.java
Patch:
@@ -31,10 +31,10 @@
 import org.openhab.core.binding.BindingProvider;
 
 /**
- *  Binding provider interface. Defines how to get properties from a binding configuration
+ * Binding provider interface. Defines how to get properties from a binding configuration.
  *  
- * @author tlan
- * @since 1.3.0
+ * @author tlan, Ben Jones
+ * @since 1.5.0
  */
 public interface XbmcBindingProvider extends BindingProvider {
 	String getXbmcInstance(String itemname);

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/internal/XbmcActivator.java
Patch:
@@ -33,12 +33,11 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-
 /**
  * Extension of the default OSGi bundle activator
  * 
- * @author tlan
- * @since 1.3.0
+ * @author tlan, Ben Jones
+ * @since 1.5.0
  */
 public final class XbmcActivator implements BundleActivator {
 

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/internal/XbmcGenericBindingProvider.java
Patch:
@@ -42,8 +42,8 @@
 /**
  * This class is responsible for parsing the binding configuration.
  * 
- * @author tlan
- * @since 1.3.0
+ * @author tlan, Ben Jones
+ * @since 1.5.0
  */
 public class XbmcGenericBindingProvider extends AbstractGenericBindingProvider implements XbmcBindingProvider {
 

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting1Message.java
Patch:
@@ -44,6 +44,7 @@ public enum SubType {
 		IMPULS(5),
 		RISINGSUN(6),
 		PHILIPS(7),
+		ENERGENIE(8),
 		
 		UNKNOWN(255);
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -376,8 +376,8 @@ public void incrementResendCount() {
 	 */
 	public void resetResendCount() {
 		this.resendCount = 0;
-		//if (this.nodeStageAdvancer.isInitializationComplete())
-			//this.nodeStage = NodeStage.DONE;
+		if (this.nodeStageAdvancer.isInitializationComplete())
+			this.nodeStage = NodeStage.DONE;
 		this.lastUpdated = Calendar.getInstance().getTime();
 	}	
 

File: bundles/binding/org.openhab.binding.xbmc/src/main/java/org/openhab/binding/xbmc/rpc/calls/GUIShowNotification.java
Patch:
@@ -48,7 +48,7 @@ protected Map<String, Object> getParams() {
 		Map<String, Object> params = new HashMap<String, Object>();
 		params.put("title", title);
 		params.put("message", message);
-		//if (image != null) params.put("image", image);
+		if (image != null) params.put("image", image);
 		params.put("displaytime", displaytime);
 		return params;
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveNetworkMonitor.java
Patch:
@@ -282,6 +282,9 @@ public void execute() {
 						// initialisation
 						node.resetResendCount();
 					}
+					else {
+						logger.debug("NODE {}: DEAD node - already healing.", node.getNodeId());
+					}
 				}
 			}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -47,7 +47,8 @@ public class ZWaveConfiguration implements OpenHABConfigurationService, ZWaveEve
 	private ZWaveController zController = null;
 	private ZWaveNetworkMonitor networkMonitor = null;
 
-	private Timer timer = null;
+	private Timer timer = new Timer();
+
 	private TimerTask timerTask = null;
 	
 	private PendingConfiguration PendingCfg = new PendingConfiguration();

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/serialmessage/AddNodeMessageClass.java
Patch:
@@ -96,11 +96,13 @@ public boolean handleRequest(ZWaveController zController, SerialMessage lastSent
 			logger.debug("Unknown request ({}).", incomingMessage.getMessagePayloadByte(0));
 			break;
 		}
+		checkTransactionComplete(lastSentMessage, incomingMessage);
 
 		return transactionComplete;
 	}
 
 	public boolean handleResponse(ZWaveController zController, SerialMessage lastSentMessage, SerialMessage incomingMessage) {
+		logger.debug("handleResponse.");
 		checkTransactionComplete(lastSentMessage, incomingMessage);
 		
 		return true;

File: bundles/binding/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubBinding.java
Patch:
@@ -66,23 +66,23 @@ public void deactivate() {
 	}
 
 	/**
-	 * @{inheritDoc
+	 * @{inheritDoc}
 	 */
 	@Override
 	protected long getRefreshInterval() {
 		return refreshInterval;
 	}
 
 	/**
-	 * @{inheritDoc
+	 * @{inheritDoc}
 	 */
 	@Override
 	protected String getName() {
 		return "neohub Refresh Service";
 	}
 
 	/**
-	 * @{inheritDoc
+	 * @{inheritDoc}
 	 */
 	@Override
 	protected void execute() {

File: bundles/binding/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubGenericBindingProvider.java
Patch:
@@ -102,7 +102,9 @@ public void processBindingConfiguration(String context, Item item,
 				throw new BindingConfigParseException(
 						"item '"
 								+ item.getName()
-								+ "' has to define an property (TODO: values here) value. unkown value: "
+								+ "' has to define an property ("
+								+ StringUtils.join(bindings, ", ")
+								+") value. unkown value: "
 								+ obj.getString("property")
 								+ " - please check your *.items configuration");
 

File: bundles/action/org.openhab.action.pushover/src/main/java/org/openhab/action/pushover/internal/PushoverActivator.java
Patch:
@@ -15,7 +15,8 @@
 
 
 /**
- * Extension of the default OSGi bundle activator
+ * Extension of the default OSGi bundle activator for Pushover. Pushover is
+ * a web based service that allows pushing of messages to mobile devices.
  * 
  * @author Chris Graham
  * @since 1.5.0

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/Utils.java
Patch:
@@ -97,6 +97,7 @@ public static final int fromByte(byte b) {
 	 * 			the time to be converted based on a single byte
 	 * @return the date time based on the values provided
 	 */
+	@SuppressWarnings("deprecation")
 	public static Date resolveDateTime(int date, int time) {
 		
 		int month = ((date & 0xE000) >> 12)+((date & 0x80) >> 7);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java
Patch:
@@ -193,8 +193,6 @@ private void handleMultiInstanceReportResponse(SerialMessage serialMessage,
 			
 			if (zwaveCommandClass.getInstances() == 0) {
 				// Still waiting for an instance report of another command class. 
-				logger.debug(String.format("NODE %d: Waiting for Command Class = %s (0x%02x)", this.getNode().getNodeId(), 
-						zwaveCommandClass.getCommandClass().getLabel() , zwaveCommandClass.getCommandClass().getKey()));
 				return;
 			}
 		}
@@ -231,7 +229,7 @@ private void handleMultiInstanceEncapResponse(
 		}
 		
 		logger.debug(String.format("NODE %d: Instance = %d, calling handleApplicationCommandRequest.", this.getNode().getNodeId(), instance));
-		zwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset+ 3, instance);
+		zwaveCommandClass.handleApplicationCommandRequest(serialMessage, offset + 2, instance);
 	}
 	
 	/**

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosGenericBindingProvider.java
Patch:
@@ -121,8 +121,8 @@ private void parseBindingConfig(SonosBindingConfig config,Item item,
 
 			if (!actionMatcher.matches() && !statusMatcher.matches()) {
 				throw new BindingConfigParseException(
-						"Sonos binding configuration must consist of either three [config="
-								+ statusMatcher + "] or four parts [config="+actionMatcher+"]");
+						"Sonos binding configuration must consist of either two [config="
+								+ statusMatcher + "] or three parts [config="+actionMatcher+"]");
 			} else {	
 				if(actionMatcher.matches()) {
 					commandAsString = actionMatcher.group(1);

File: bundles/binding/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/CommandType.java
Patch:
@@ -37,7 +37,9 @@ public enum CommandType {
 	COVERART("coverart"),
 	YEAR("year"),
 	REMOTETITLE("remotetitle"),
-	GENRE("genre");
+	GENRE("genre"),
+	
+	IRCODE("ircode");
 	
 	/** Represents the player command as it will be used in *.items configuration */
 	String command;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterBase.java
Patch:
@@ -97,7 +97,9 @@ protected void addCommandConverter(ZWaveCommandConverter<?,?> converter) {
 	 * @return a converter object that converts between the value and the state;
 	 */
 	protected ZWaveStateConverter<?,?> getStateConverter(Item item, Object value) {
-		
+		if(item == null)
+			return null;
+
 		List<Class<? extends State>> list = new ArrayList<Class<? extends State>>(item.getAcceptedDataTypes());
 		Collections.sort(list, new StateComparator());
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterHandler.java
Patch:
@@ -101,6 +101,9 @@ public ZWaveCommandClassConverter<?> getConverter(CommandClass commandClass) {
 	 * @return the {@link ZWaveCommandClass} that can be used to get a converter suitable to do the conversion.
 	 */
 	private ZWaveCommandClass resolveConverter(Item item, ZWaveNode node, int endpointId) {
+		if(item == null)
+			return null;
+
 		ZWaveMultiInstanceCommandClass multiInstanceCommandClass = null;
 		ZWaveCommandClass result = null;
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveInfoConverter.java
Patch:
@@ -65,6 +65,9 @@ public ZWaveInfoConverter(ZWaveController controller, EventPublisher eventPublis
 	 * @param arguments the arguments for the converter.
 	 */
 	public void executeRefresh(Item item, ZWaveNode node, int endpointId, Map<String,String> arguments) {
+		if(item == null)
+			return;
+
 		// not bound to an item.
 		if (!arguments.containsKey("item"))
 			return;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java
Patch:
@@ -69,7 +69,7 @@ public CommandClass getCommandClass() {
 	public void handleApplicationCommandRequest(SerialMessage serialMessage,
 			int offset, int endpoint) {
 		logger.trace("Handle Message Battery Request");
-		logger.debug(String.format("Received Battery Request for Node ID = %d", this.getNode().getNodeId()));
+		logger.debug("Node {}: Received Battery Request", this.getNode().getNodeId());
 		int command = serialMessage.getMessagePayloadByte(offset);
 		switch (command) {
 			case BATTERY_GET:
@@ -79,7 +79,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 				logger.trace("Process Battery Report");
 				
 				int value = serialMessage.getMessagePayloadByte(offset + 1); 
-				logger.debug(String.format("Battery report from nodeId = %d, value = 0x%02X", this.getNode().getNodeId(), value));
+				logger.debug(String.format("Node %d: Battery report value = 0x%02X", this.getNode().getNodeId(), value));
 				ZWaveCommandClassValueEvent zEvent = new ZWaveCommandClassValueEvent(this.getNode().getNodeId(), endpoint, this.getCommandClass(), value);
 				this.getController().notifyEventListeners(zEvent);
 
@@ -99,7 +99,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 	 * @return the serial message
 	 */
 	public SerialMessage getValueMessage() {
-		logger.debug("Creating new message for application command BATTERY_GET for node {}", this.getNode().getNodeId());
+		logger.debug("Node {}: Creating new message for application command BATTERY_GET", this.getNode().getNodeId());
 		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.ApplicationCommandHandler, SerialMessagePriority.Get);
     	byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
     							2, 

File: bundles/io/org.openhab.io.squeezeserver/src/main/java/org/openhab/io/squeezeserver/SqueezePlayerEventListener.java
Patch:
@@ -29,5 +29,5 @@ public interface SqueezePlayerEventListener {
 	 void yearChangeEvent(PlayerEvent event);
 	 void genreChangeEvent(PlayerEvent event);
 	 void remoteTitleChangeEvent(PlayerEvent event);
-     
+	 void irCodeChangeEvent(PlayerEvent event);
 }

File: bundles/io/org.openhab.io.squeezeserver/src/main/java/org/openhab/io/squeezeserver/SqueezeServer.java
Patch:
@@ -470,6 +470,8 @@ private void handlePlayerUpdate(String message) {
 				handlePlaylistMessage(player, messageParts);
 			} else if (messageType.equals("prefset")) {
 				handlePrefsetMessage(player, messageParts);
+			} else if (messageType.equals("ir")) {
+					player.setIrCode(messageParts[2]);
 			} else if (messageType.equals("power")) {
 				// ignore these for now
 				//player.setPowered(messageParts[1].equals("1"));

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -389,7 +389,7 @@ private void connectToDatabase() {
 	 * Disconnects from the database
 	 */
 	private void disconnectFromDatabase() {
-		if (isConnected()) {
+		if (connection != null) {
 			try {
 				connection.close();
 				logger.debug("mySQL: Disconnected from database " + url);

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosGenericBindingProvider.java
Patch:
@@ -121,8 +121,8 @@ private void parseBindingConfig(SonosBindingConfig config,Item item,
 
 			if (!actionMatcher.matches() && !statusMatcher.matches()) {
 				throw new BindingConfigParseException(
-						"Sonos binding configuration must consist of either three [config="
-								+ statusMatcher + "] or four parts [config="+actionMatcher+"]");
+						"Sonos binding configuration must consist of either two [config="
+								+ statusMatcher + "] or three parts [config="+actionMatcher+"]");
 			} else {	
 				if(actionMatcher.matches()) {
 					commandAsString = actionMatcher.group(1);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterBase.java
Patch:
@@ -97,7 +97,9 @@ protected void addCommandConverter(ZWaveCommandConverter<?,?> converter) {
 	 * @return a converter object that converts between the value and the state;
 	 */
 	protected ZWaveStateConverter<?,?> getStateConverter(Item item, Object value) {
-		
+		if(item == null)
+			return null;
+
 		List<Class<? extends State>> list = new ArrayList<Class<? extends State>>(item.getAcceptedDataTypes());
 		Collections.sort(list, new StateComparator());
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterHandler.java
Patch:
@@ -101,6 +101,9 @@ public ZWaveCommandClassConverter<?> getConverter(CommandClass commandClass) {
 	 * @return the {@link ZWaveCommandClass} that can be used to get a converter suitable to do the conversion.
 	 */
 	private ZWaveCommandClass resolveConverter(Item item, ZWaveNode node, int endpointId) {
+		if(item == null)
+			return null;
+
 		ZWaveMultiInstanceCommandClass multiInstanceCommandClass = null;
 		ZWaveCommandClass result = null;
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveInfoConverter.java
Patch:
@@ -65,6 +65,9 @@ public ZWaveInfoConverter(ZWaveController controller, EventPublisher eventPublis
 	 * @param arguments the arguments for the converter.
 	 */
 	public void executeRefresh(Item item, ZWaveNode node, int endpointId, Map<String,String> arguments) {
+		if(item == null)
+			return;
+
 		// not bound to an item.
 		if (!arguments.containsKey("item"))
 			return;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterBase.java
Patch:
@@ -97,7 +97,9 @@ protected void addCommandConverter(ZWaveCommandConverter<?,?> converter) {
 	 * @return a converter object that converts between the value and the state;
 	 */
 	protected ZWaveStateConverter<?,?> getStateConverter(Item item, Object value) {
-		
+		if(item == null)
+			return null;
+
 		List<Class<? extends State>> list = new ArrayList<Class<? extends State>>(item.getAcceptedDataTypes());
 		Collections.sort(list, new StateComparator());
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterHandler.java
Patch:
@@ -101,6 +101,9 @@ public ZWaveCommandClassConverter<?> getConverter(CommandClass commandClass) {
 	 * @return the {@link ZWaveCommandClass} that can be used to get a converter suitable to do the conversion.
 	 */
 	private ZWaveCommandClass resolveConverter(Item item, ZWaveNode node, int endpointId) {
+		if(item == null)
+			return null;
+
 		ZWaveMultiInstanceCommandClass multiInstanceCommandClass = null;
 		ZWaveCommandClass result = null;
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveInfoConverter.java
Patch:
@@ -65,6 +65,9 @@ public ZWaveInfoConverter(ZWaveController controller, EventPublisher eventPublis
 	 * @param arguments the arguments for the converter.
 	 */
 	public void executeRefresh(Item item, ZWaveNode node, int endpointId, Map<String,String> arguments) {
+		if(item == null)
+			return;
+
 		// not bound to an item.
 		if (!arguments.containsKey("item"))
 			return;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/ZWaveNode.java
Patch:
@@ -350,8 +350,8 @@ public void incrementResendCount() {
 	 */
 	public void resetResendCount() {
 		this.resendCount = 0;
-		if (this.nodeStageAdvancer.isInitializationComplete())
-			this.nodeStage = NodeStage.DONE;
+		//if (this.nodeStageAdvancer.isInitializationComplete())
+			//this.nodeStage = NodeStage.DONE;
 		this.lastUpdated = Calendar.getInstance().getTime();
 	}	
 

File: bundles/binding/org.openhab.binding.mpd/src/main/java/org/openhab/binding/mpd/internal/MpdGenericBindingProvider.java
Patch:
@@ -112,6 +112,8 @@ public String[] getItemNamesByPlayerAndPlayerCommand(String playerId, PlayerComm
 			MpdBindingConfig mpdConfig = (MpdBindingConfig) bindingConfigs.get(itemName);
 			if (mpdConfig.containsKey("PERCENT") && PlayerCommandTypeMapping.VOLUME.equals(playerCommand)) {
 				itemNames.add(itemName);
+			} else if (mpdConfig.containsKey("VALUE") && PlayerCommandTypeMapping.TRACKINFO.equals(playerCommand)) {
+				itemNames.add(itemName);
 			}
 			else if (mpdConfig.containsKey(playerCommand.type.toString())) {
 				itemNames.add(itemName);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -69,8 +69,8 @@ public ZWaveNodeStageAdvancer(ZWaveNode node, ZWaveController controller) {
 	 */
 	public void advanceNodeStage(NodeStage targetStage) {
 		if (targetStage.getStage() <= this.node.getNodeStage().getStage() && targetStage != NodeStage.DONE) {
-			logger.warn(String.format("NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s", this.node
-					.getNodeStage().getLabel(), targetStage.getLabel()));
+			logger.warn(String.format("NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s", this.node.getNodeId(),
+					this.node.getNodeStage().getLabel(), targetStage.getLabel()));
 			return;
 		}
 

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/GCalEventDownloader.java
Patch:
@@ -167,6 +167,8 @@ public static CalendarEventFeed downloadEventFeed(String username, String passwo
         	
        	if (StringUtils.isBlank(username) && StringUtils.isBlank(password)) {
        		logger.info("gcal without username and password (make sure url is accessable without those)");
+       	} else if (!StringUtils.isBlank(username) && !StringUtils.isBlank(password)) {
+       		logger.info("gcal with username and password");
         } else {
             logger.warn("Login aborted none of the 2 cased are fulfilled 1)url, username, password 2) url ");
             return null;                            

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -69,8 +69,8 @@ public ZWaveNodeStageAdvancer(ZWaveNode node, ZWaveController controller) {
 	 */
 	public void advanceNodeStage(NodeStage targetStage) {
 		if (targetStage.getStage() <= this.node.getNodeStage().getStage() && targetStage != NodeStage.DONE) {
-			logger.warn(String.format("NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s", this.node
-					.getNodeStage().getLabel(), targetStage.getLabel()));
+			logger.warn(String.format("NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s", this.node.getNodeId(),
+					this.node.getNodeStage().getLabel(), targetStage.getLabel()));
 			return;
 		}
 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/initialization/ZWaveNodeStageAdvancer.java
Patch:
@@ -69,8 +69,8 @@ public ZWaveNodeStageAdvancer(ZWaveNode node, ZWaveController controller) {
 	 */
 	public void advanceNodeStage(NodeStage targetStage) {
 		if (targetStage.getStage() <= this.node.getNodeStage().getStage() && targetStage != NodeStage.DONE) {
-			logger.warn(String.format("NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s", this.node
-					.getNodeStage().getLabel(), targetStage.getLabel()));
+			logger.warn(String.format("NODE %d: Already in or beyond node stage, ignoring. current = %s, requested = %s", this.node.getNodeId(),
+					this.node.getNodeStage().getLabel(), targetStage.getLabel()));
 			return;
 		}
 

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/PlugwiseBinding.java
Patch:
@@ -404,7 +404,7 @@ protected void execute() {
 					// check if the device already exists (via cfg definition of Role Call)
 
 					if(stick.getDevice(anElement.getId())==null) {
-						logger.info("The Plugwise device with id {} is not yet defined",anElement.getId());
+						logger.debug("The Plugwise device with id {} is not yet defined",anElement.getId());
 
 						// check if the config string really contains a MAC address
 						Pattern MAC_PATTERN = Pattern.compile("(\\w{16})");

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/Stick.java
Patch:
@@ -465,7 +465,7 @@ private void parseAndQueue(ByteBuffer readBuffer) {
 						logger.error("Plugwise protocol CRC error: {} does not match {} in message", new String[] { calculatedCRC, CRC});
 					}
 				} else {
-					logger.error("Plugwise protocol header error: {} in message {}", new String[] { protocolHeader, response});
+					logger.debug("Plugwise protocol header error: {} in message {}", new String[] { protocolHeader, response});
 				}			
 			} else {
 				logger.error("Plugwise protocol message error: {} ", response);

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/PlugwiseBinding.java
Patch:
@@ -147,6 +147,8 @@ public void updated(Dictionary config) throws ConfigurationException {
 						if ("interval".equals(configKey)) {
 							stick.setInterval(Integer.valueOf(value));
 							logger.info("Plugwise set the interval to send ZigBee PDUs to {} ms",value);
+						} else if ("port".equals(configKey)) {
+							//ignore
 						}
 						else {
 							throw new ConfigurationException(configKey,

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -69,7 +69,7 @@
  * DimmerItem        PercentType   TINYINT
  * NumberItem        DecimalType   DOUBLE
  * RollershutterItem PercentType   TINYINT
- * StringItem        StringType    VARCHAR(65500)
+ * StringItem        StringType    VARCHAR(20000)
  * SwitchItem        OnOffType     CHAR(3)
  * 
  * In the store method, type conversion is performed where the default type for
@@ -114,7 +114,7 @@ public void activate() {
 		sqlTypes.put("GROUPITEM", "DOUBLE");
 		sqlTypes.put("NUMBERITEM", "DOUBLE");
 		sqlTypes.put("ROLERSHUTTERITEM", "TINYINT");
-		sqlTypes.put("STRINGITEM", "VARCHAR(65500)");
+		sqlTypes.put("STRINGITEM", "VARCHAR(20000)");
 		sqlTypes.put("SWITCHITEM", "CHAR(3)");
 	}
 

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -69,7 +69,7 @@
  * DimmerItem        PercentType   TINYINT
  * NumberItem        DecimalType   DOUBLE
  * RollershutterItem PercentType   TINYINT
- * StringItem        StringType    VARCHAR(65500)
+ * StringItem        StringType    VARCHAR(20000)
  * SwitchItem        OnOffType     CHAR(3)
  * 
  * In the store method, type conversion is performed where the default type for
@@ -114,7 +114,7 @@ public void activate() {
 		sqlTypes.put("GROUPITEM", "DOUBLE");
 		sqlTypes.put("NUMBERITEM", "DOUBLE");
 		sqlTypes.put("ROLERSHUTTERITEM", "TINYINT");
-		sqlTypes.put("STRINGITEM", "VARCHAR(65500)");
+		sqlTypes.put("STRINGITEM", "VARCHAR(20000)");
 		sqlTypes.put("SWITCHITEM", "CHAR(3)");
 	}
 

File: bundles/io/org.openhab.io.cv/src/main/java/org/openhab/io/cv/CVApplication.java
Patch:
@@ -205,7 +205,7 @@ private Dictionary<String, String> getJerseyServletParams() {
 //        The BroadcasterCache is set in ResourceStateChangeListener.registerItems(), because otherwise
 //        it gets somehow overridden by other registered servlets (e.g. the REST-bundle)
 //        the other advantage of this solution is, that the BroadcasterCache class does not need to be exported by this package
-//        jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.openhab.io.cv.cache.CVBroadcasterCache");        
+//        jerseyServletParams.put("org.atmosphere.cpr.broadcasterCacheClass", "org.openhab.io.cv.internal.cache.CVBroadcasterCache");        
         
         // required because of bug http://java.net/jira/browse/JERSEY-361
         jerseyServletParams.put(FeaturesAndProperties.FEATURE_XMLROOTELEMENT_PROCESSING, "true");

File: bundles/io/org.openhab.io.cv/src/main/java/org/openhab/io/cv/internal/filter/ResponseObjectFilter.java
Patch:
@@ -38,7 +38,6 @@ public class ResponseObjectFilter implements PerRequestBroadcastFilter {
 
 	@Override
 	public BroadcastAction filter(Object originalMessage, Object message) {
-		// logger.info("ResponseObjectFilter->filter("+originalMessage+","+message+")");
 		return new BroadcastAction(ACTION.CONTINUE, message);
 	}
 

File: bundles/binding/org.openhab.binding.intertechno/src/main/java/org/openhab/binding/intertechno/internal/CULIntertechnoGenericBindingProvider.java
Patch:
@@ -54,7 +54,8 @@ public void validateItemType(Item item, String bindingConfig)
 
 	/**
 	 * config of style
-	 * {intertechno="type=<classic|fls|rev>;group=<group>;address=<address>"}
+	 * <code>{{@literal intertechno="type=<classic|fls|rev>;group=<group>;address=<address>"}}</code><br>
+	 * 
 	 * {@inheritDoc}
 	 */
 	@Override

File: bundles/binding/org.openhab.binding.intertechno/src/main/java/org/openhab/binding/intertechno/internal/parser/AbstractIntertechnoParser.java
Patch:
@@ -19,7 +19,7 @@ public abstract class AbstractIntertechnoParser implements
 
 	/**
 	 * Encode an integer as String for sending it via Intertechno. Numbers are
-	 * repesented as "binary" Strings where each letter represents a byte. It si
+	 * represented as "binary" Strings where each letter represents a byte. It is
 	 * configurable which letters represents 0 and which represents 1.
 	 * 
 	 * @param length

File: bundles/binding/org.openhab.binding.intertechno/src/main/java/org/openhab/binding/intertechno/internal/CULIntertechnoGenericBindingProvider.java
Patch:
@@ -54,7 +54,8 @@ public void validateItemType(Item item, String bindingConfig)
 
 	/**
 	 * config of style
-	 * {intertechno="type=<classic|fls|rev>;group=<group>;address=<address>"}
+	 * <code>{{@literal intertechno="type=<classic|fls|rev>;group=<group>;address=<address>"}}</code><br>
+	 * 
 	 * {@inheritDoc}
 	 */
 	@Override

File: bundles/binding/org.openhab.binding.intertechno/src/main/java/org/openhab/binding/intertechno/internal/parser/AbstractIntertechnoParser.java
Patch:
@@ -19,7 +19,7 @@ public abstract class AbstractIntertechnoParser implements
 
 	/**
 	 * Encode an integer as String for sending it via Intertechno. Numbers are
-	 * repesented as "binary" Strings where each letter represents a byte. It si
+	 * represented as "binary" Strings where each letter represents a byte. It is
 	 * configurable which letters represents 0 and which represents 1.
 	 * 
 	 * @param length

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiLevelSwitchCommandClass.java
Patch:
@@ -161,7 +161,7 @@ public SerialMessage stopLevelChangeMessage() {
 		logger.debug("Creating new message for application command SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE for node {}", this.getNode().getNodeId());
 		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Set);
     	byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
-    							3, 
+    							2, 
 								(byte) getCommandClass().getKey(), 
 								(byte) SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE };
     	result.setMessagePayload(newPayload);

File: bundles/binding/org.openhab.binding.intertechno/src/main/java/org/openhab/binding/intertechno/internal/parser/AbstractIntertechnoParser.java
Patch:
@@ -45,7 +45,7 @@ protected static String getEncodedString(int length, int value, char char1,
 		for (int i = length - 1; i >= 0; i--) {
 			int currentBitValue = (int) Math.pow(2, i);
 			char bit = char0;
-			if (currentBitValue >= value) {
+			if (value >= currentBitValue) {
 				bit = char1;
 				value = value - currentBitValue;
 			}

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/bus/HomematicBinding.java
Patch:
@@ -102,7 +102,7 @@ public void run() {
         });
 
         converterLookupByConfiguredDevices = new StateConverterLookupByConfiguredDevices();
-        DeviceConfigLocator locator = new DeviceConfigLocator("HM-CC-RT-DN.xml", "HM-LC-Dim1L-Pl.xml", "HM-LC-BI1PBU-FM.xml",
+        DeviceConfigLocator locator = new DeviceConfigLocator("HM-CC-RT-DN.xml", "HM-LC-Dim1L-Pl.xml", "HM-LC-Bl1PBU-FM.xml",
                 "HM-LC-Bl1-FM.xml", "HM-LC-Dim2L-SM.xml", "HM-LC-Dim2L-CV.xml", "HM-LC-Dim1L-CV.xml", "HM-LC-Dim1T-Pl.xml",
                 "HM-LC-Dim1T-CV.xml", "HM-LC-Dim2T-SM.xml", "HM-PB-4DIS-WM.xml", "HM-Sec-SD.xml", "HM-Sec-SC.xml", "HM-Sec-RHS.xml");
         List<ConfiguredDevice> configuredDevices = locator.findAll();

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -97,7 +97,7 @@ protected long getRefreshInterval() {
 	@Override
 	public void activate() {
 		super.activate();
-		setProperlyConfigured(true);
+		setProperlyConfigured(false);
 	}
 
 	/**
@@ -364,6 +364,8 @@ public void updated(Dictionary config) throws ConfigurationException {
 			ip = discoveryGatewayIP();
 		}
 		
+		if (ip != null) setProperlyConfigured(true);
+		else setProperlyConfigured(false);
 	}
 	
 	/**

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -452,7 +452,7 @@ public SonosSubscriptionCallback(Service service, Integer interval) {
 		@SuppressWarnings("rawtypes")
 		@Override
 		public void established(GENASubscription sub) {
-			logger.info("The GENA Subscription for serviceID {} is established for device {}",sub.getService().getServiceId(),sub.getService().getDevice());
+			logger.debug("The GENA Subscription for serviceID {} is established for device {}",sub.getService().getServiceId(),sub.getService().getDevice());
 		}
 
 		@SuppressWarnings("rawtypes")
@@ -499,7 +499,7 @@ public void eventsMissed(GENASubscription sub, int numberOfMissedEvents) {
 		@Override
 		protected void ended(GENASubscription subscription,
 				CancelReason reason, UpnpResponse responseStatus) {
-			logger.warn("The GENA Subscription for serviceID {} ended for device {}",subscription.getService().getServiceId(),subscription.getService().getDevice());
+			logger.debug("The GENA Subscription for serviceID {} ended for device {}",subscription.getService().getServiceId(),subscription.getService().getDevice());
 
 			//rebooting the GENA subscription
 			Service service = subscription.getService();			

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosGenericBindingProvider.java
Patch:
@@ -38,10 +38,10 @@
  * requiring input variables could potentially take their inputs from elsewhere in the binding, e.g. config parameters
  * or other
  *
- * sonos=">[ON:office:play], >[OFF:office:stop]" - switch items for ordinary sonos commands
+ * sonos="[ON:office:play], [OFF:office:stop]" - switch items for ordinary sonos commands
  * 		using openhab command : player name : sonos command as format
  * 
- * sonos="<[office:getcurrenttrack]" - string and number items for UPNP service variable updates using
+ * sonos="[office:getcurrenttrack]" - string and number items for UPNP service variable updates using
  * 		using player_name : somecommand, where somecommand takes a simple input/output value from/to the string
  * 
  * @author Karel Goderis

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java
Patch:
@@ -111,7 +111,7 @@ public void bindingChanged(BindingProvider provider, String itemName) {
 		if (zProvider != null) {
 			ZWaveBindingConfig bindingConfig = zProvider.getZwaveBindingConfig(itemName);
 			
-			if (bindingConfig != null) {
+			if (bindingConfig != null && converterHandler != null) {
 					converterHandler.executeRefresh(zProvider, itemName, true);
 			}
 		}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/ZWaveActiveBinding.java
Patch:
@@ -111,7 +111,7 @@ public void bindingChanged(BindingProvider provider, String itemName) {
 		if (zProvider != null) {
 			ZWaveBindingConfig bindingConfig = zProvider.getZwaveBindingConfig(itemName);
 			
-			if (bindingConfig != null) {
+			if (bindingConfig != null && converterHandler != null) {
 					converterHandler.executeRefresh(zProvider, itemName, true);
 			}
 		}

File: bundles/binding/org.openhab.binding.intertechno/src/main/java/org/openhab/binding/intertechno/internal/parser/AbstractIntertechnoParser.java
Patch:
@@ -45,7 +45,7 @@ protected static String getEncodedString(int length, int value, char char1,
 		for (int i = length - 1; i >= 0; i--) {
 			int currentBitValue = (int) Math.pow(2, i);
 			char bit = char0;
-			if (currentBitValue >= value) {
+			if (value >= currentBitValue) {
 				bit = char1;
 				value = value - currentBitValue;
 			}

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosGenericBindingProvider.java
Patch:
@@ -38,10 +38,10 @@
  * requiring input variables could potentially take their inputs from elsewhere in the binding, e.g. config parameters
  * or other
  *
- * sonos=">[ON:office:play], >[OFF:office:stop]" - switch items for ordinary sonos commands
+ * sonos="[ON:office:play], [OFF:office:stop]" - switch items for ordinary sonos commands
  * 		using openhab command : player name : sonos command as format
  * 
- * sonos="<[office:getcurrenttrack]" - string and number items for UPNP service variable updates using
+ * sonos="[office:getcurrenttrack]" - string and number items for UPNP service variable updates using
  * 		using player_name : somecommand, where somecommand takes a simple input/output value from/to the string
  * 
  * @author Karel Goderis

File: bundles/action/org.openhab.action.mail/src/main/java/org/openhab/action/mail/internal/Mail.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.mail/src/main/java/org/openhab/action/mail/internal/MailActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.mail/src/main/java/org/openhab/action/mail/internal/MailActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.nma/src/main/java/org/openhab/action/nma/internal/NotifyMyAndroid.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.nma/src/main/java/org/openhab/action/nma/internal/NotifyMyAndroidActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.nma/src/main/java/org/openhab/action/nma/internal/NotifyMyAndroidActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.prowl/src/main/java/org/openhab/action/prowl/internal/Prowl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.prowl/src/main/java/org/openhab/action/prowl/internal/ProwlActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.prowl/src/main/java/org/openhab/action/prowl/internal/ProwlActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/Twitter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/TwitterActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.twitter/src/main/java/org/openhab/action/twitter/internal/TwitterActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xbmc/src/main/java/org/openhab/action/xbmc/internal/XBMC.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xbmc/src/main/java/org/openhab/action/xbmc/internal/XBMCActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xbmc/src/main/java/org/openhab/action/xbmc/internal/XBMCActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/NotInitializedException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPActionService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/action/org.openhab.action.xmpp/src/main/java/org/openhab/action/xmpp/internal/XMPPConsole.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/__binding-name__BindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/internal/__binding-name__Activator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/internal/__binding-name__Binding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/internal/__binding-name__GenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/AsteriskBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskBindingTypes.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/BluetoothEventHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BTDeviceDiscoveryService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BluetoothActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BluetoothBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BluetoothDevice.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/ComfoAirBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/ComfoAirDataType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/DataTypeBoolean.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/DataTypeMessage.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/DataTypeNumber.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/datatypes/DataTypeTemperature.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/handling/ComfoAirCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/handling/ComfoAirCommandType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/InitializationException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.configadmin/src/main/java/org/openhab/binding/configadmin/ConfigAdminBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.configadmin/src/main/java/org/openhab/binding/configadmin/internal/ConfigAdminActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.configadmin/src/main/java/org/openhab/binding/configadmin/internal/ConfigAdminBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.configadmin/src/main/java/org/openhab/binding/configadmin/internal/ConfigAdminGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/CupsBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/internal/CupsActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/internal/CupsGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/DigitalSTROMBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/DigitalSTROMActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/DigitalSTROMBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/DigitalSTROMGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/DigitalSTROMAPI.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/connection/JSONResponseHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/connection/transport/HttpTransport.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/ApartmentSceneEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/DeviceConstants.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/DeviceParameterClassEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/JSONApiResponseKeysEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/JSONRequestConstants.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/JobPriority.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/MeteringTypeEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/MeteringUnitsEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/OutputModeEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/SceneEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/SceneToStateMapper.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/SensorEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/SensorIndexEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/constants/ZoneSceneEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/Apartment.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/CachedMeteringValue.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/DSID.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/DetailedGroupInfo.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/Device.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/DeviceConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/DeviceSceneSpec.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/Event.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/EventItem.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/Group.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/Scene.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/Zone.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONApartmentImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONCachedMeteringValueImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONDetailedGroupInfoImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONDeviceConfigImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONDeviceImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONDeviceSceneSpecImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONEventImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONEventItemImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONGroupImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/entity/impl/JSONZoneImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/events/DeviceListener.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/events/EventPropertyEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/impl/DigitalSTROMJSONImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/job/DeviceConsumptionSensorJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/job/DeviceOutputValueSensorJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/job/SceneOutputValueSensorJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/job/SensorJob.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/config/ConnectionConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/config/ConsumptionConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/config/ContextConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/config/DigitalSTROMBindingConfig.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/config/DigitalSTROMBindingConfigEnum.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx.lib485/src/main/java/org/openhab/binding/dmx/lib485/Lib485Connection.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx.ola/src/main/java/org/openhab/binding/dmx/ola/OlaConnection.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx.test/src/test/java/org/openhab/binding/dmx/internal/config/DmxColorItemTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx.test/src/test/java/org/openhab/binding/dmx/internal/config/DmxDimmerItemTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx.test/src/test/java/org/openhab/binding/dmx/internal/config/DmxSwitchItemTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/DmxBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/DmxConnection.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/DmxService.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/DmxStatusUpdateListener.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/DmxBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/DmxCommandProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/DmxGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/action/BaseAction.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/action/FadeAction.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/action/MirrorAction.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/action/ResumeAction.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/cmd/DmxCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/cmd/DmxFadeCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/cmd/DmxSuspendingFadeCommand.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/config/DmxColorItem.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/config/DmxDimmerItem.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/config/DmxItem.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/config/DmxSwitchItem.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/core/DmxChannel.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/core/DmxController.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/core/DmxTransmitter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/core/DmxUniverse.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/core/DmxUtil.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/BasicBindingTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/EnoceanBindingProviderMock.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -12,7 +12,7 @@
 import java.util.Collection;
 
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.openhab.binding.enocean.EnoceanBindingProvider;
 import org.openhab.binding.enocean.internal.profiles.Profile;
 import org.openhab.core.binding.BindingChangeListener;

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/EventPublisherMock.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/ProtocolConnectorMock.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -12,8 +12,8 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.RockerSwitch;
 import org.junit.Test;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.core.library.types.OnOffType;
@@ -22,7 +22,7 @@ public class RockerSwitchTest extends BasicBindingTest {
 
     @Test
     public void testReceiveButtonPress() {
-        parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID), RockerSwitch.BUTTON_I);
+        parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID), Parameter.I);
         provider.setParameterAddress(parameterAddress);
         binding.addBindingProvider(provider);
 

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/config/BindingConfigParserTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/config/EnoceanGenericBindingProviderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -14,7 +14,7 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.junit.Test;
 import org.openhab.core.items.GenericItem;
 import org.openhab.core.types.Command;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/EnoceanBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -9,7 +9,7 @@
 package org.openhab.binding.enocean;
 
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.openhab.binding.enocean.internal.profiles.Profile;
 import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.items.Item;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/EnoceanActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/config/BindingConfigParser.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/config/EnoceanGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
@@ -14,7 +14,7 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.openhab.binding.enocean.EnoceanBindingProvider;
 import org.openhab.binding.enocean.internal.profiles.Profile;
 import org.openhab.core.binding.BindingConfig;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/ButtonStateConverter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/CommandConverter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/CommandToConverterMap.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/ContactStateConverter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/ConverterFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/MatchingConverters.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/StateCommandConverter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/StateComparator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/StateConverter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/StateToConverterMap.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/converter/TemperatureNumberWithUnitConverter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/BasicProfile.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/Profile.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/EpsonProjectorBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/connector/EpsonProjectorConnector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/connector/EpsonProjectorSerialConnector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/connector/EpsonProjectorTcpConnector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/i18n/Messages.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorCommandType.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorDevice.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.exec.test/src/test/java/org/openhab/binding/exec/internal/ExecGenericBindingProviderTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/ExecBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecBinding.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecGenericBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.fritzaha/src/main/java/org/openhab/binding/fritzaha/FritzahaBindingProvider.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.fritzaha/src/main/java/org/openhab/binding/fritzaha/internal/FritzahaActivator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2010-2013, openHAB.org and others.
+ * Copyright (c) 2010-2014, openHAB.org and others.
  *
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/bus/ButtonTest.java
Patch:
@@ -8,6 +8,8 @@
  */
 package org.openhab.binding.homematic.internal.bus;
 
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.openhab.binding.homematic.internal.device.ParameterKey;
@@ -25,6 +27,7 @@ public void setupProvider() {
     @Test
     public void receiveShortPress() {
         checkValueReceived(ParameterKey.PRESS_SHORT, Boolean.TRUE, OnOffType.ON);
+        assertEquals("State received", OnOffType.OFF, publisher.popLastState());
     }
 
     @Test

File: bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java
Patch:
@@ -29,7 +29,7 @@ public class S_CommandTest {
 	
 	@Test
 	public void PrefixTest() {
-		S_Command scmd = new S_Command("00FE30", 20.0);
+		S_Command scmd = new S_Command("00FE30", 1, 20.0);
 		
 		String commandStr = scmd.getCommandString();
 		
@@ -41,7 +41,7 @@ public void PrefixTest() {
 	
 	@Test
 	public void BaseCommandTest() {
-		S_Command scmd = new S_Command("00FE30", 20.0);
+		S_Command scmd = new S_Command("00FE30", 1, 20.0);
 		
 		String commandStr = scmd.getCommandString();
 		

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeActivator.java
Patch:
@@ -13,7 +13,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-
 /**
  * Extension of the default OSGi bundle activator
  * 
@@ -37,5 +36,4 @@ public void start(BundleContext bc) throws Exception {
 	public void stop(BundleContext bc) throws Exception {
 		logger.debug("MAX!Cube LAN gateway binding has been stopped.");
 	}
-	
 }

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeGenericBindingProvider.java
Patch:
@@ -61,7 +61,6 @@ public void validateItemType(Item item, String bindingConfig) throws BindingConf
 	 */
 	@Override
 	public void processBindingConfiguration(String context, Item item, String bindingConfig) throws BindingConfigParseException {
-
 		super.processBindingConfiguration(context, item, bindingConfig);
 
 		String[] configParts = bindingConfig.trim().split(":");

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComHumidityMessage.java
Patch:
@@ -32,6 +32,7 @@
 public class RFXComHumidityMessage extends RFXComBaseMessage {
 
 	public enum SubType {
+		UNDEF(0),
 		LACROSSE_TX3(1),
 		LACROSSE_WS2300(2),
 		

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComTemperatureHumidityMessage.java
Patch:
@@ -32,6 +32,7 @@
 public class RFXComTemperatureHumidityMessage extends RFXComBaseMessage {
 
 	public enum SubType {
+		UNDEF(0),
 		THGN122_123_132_THGR122_228_238_268(1),
 		THGN800_THGR810(2),
 		RTGR328(3),

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComTemperatureMessage.java
Patch:
@@ -32,6 +32,7 @@
 public class RFXComTemperatureMessage extends RFXComBaseMessage {
 
 	public enum SubType {
+		UNDEF(0),
 		THR128_138_THC138(1),
 		THC238_268_THN122_132_THWR288_THRN122_AW129_131(2),
 		THWR800(3),

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosXMLParser.java
Patch:
@@ -709,9 +709,9 @@ public Map<String, StateVariableValue> getChanges() {
 	
 	public static  String compileMetadataString(SonosEntry entry) {
 		String upnpClass = entry.getUpnpClass();
-		if (upnpClass.startsWith("object.container")) {
-			upnpClass = "object.container";
-		}
+//		if (upnpClass.startsWith("object.container")) {
+//			upnpClass = "object.container";
+//		}
 		String metadata = METADATA_FORMAT.format(new Object[] {entry.getId(), entry.getParentId(), entry.getTitle(), upnpClass});
 
 		return metadata;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveBinarySwitchConverter.java
Patch:
@@ -16,6 +16,7 @@
 import org.openhab.binding.zwave.internal.converter.state.BinaryPercentTypeConverter;
 import org.openhab.binding.zwave.internal.converter.state.IntegerOnOffTypeConverter;
 import org.openhab.binding.zwave.internal.converter.state.IntegerOpenClosedTypeConverter;
+import org.openhab.binding.zwave.internal.converter.state.IntegerUpDownTypeConverter;
 import org.openhab.binding.zwave.internal.converter.state.ZWaveStateConverter;
 import org.openhab.binding.zwave.internal.protocol.SerialMessage;
 import org.openhab.binding.zwave.internal.protocol.ZWaveController;
@@ -55,6 +56,7 @@ public ZWaveBinarySwitchConverter(ZWaveController controller, EventPublisher eve
 		this.addStateConverter(new BinaryPercentTypeConverter());
 		this.addStateConverter(new IntegerOnOffTypeConverter());
 		this.addStateConverter(new IntegerOpenClosedTypeConverter());
+		this.addStateConverter(new IntegerUpDownTypeConverter());
 		
 		this.addCommandConverter(new BinaryOnOffCommandConverter());
 	}

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/beans/WidgetBean.java
Patch:
@@ -48,6 +48,7 @@ public class WidgetBean {
 	public BigDecimal maxValue;
 	public BigDecimal step;
 	public String url;
+	public String encoding;
 	public String service;
 	public String period;
 	

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComHumidityMessage.java
Patch:
@@ -32,6 +32,7 @@
 public class RFXComHumidityMessage extends RFXComBaseMessage {
 
 	public enum SubType {
+		UNDEF(0),
 		LACROSSE_TX3(1),
 		LACROSSE_WS2300(2),
 		

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComTemperatureHumidityMessage.java
Patch:
@@ -32,6 +32,7 @@
 public class RFXComTemperatureHumidityMessage extends RFXComBaseMessage {
 
 	public enum SubType {
+		UNDEF(0),
 		THGN122_123_132_THGR122_228_238_268(1),
 		THGN800_THGR810(2),
 		RTGR328(3),

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComTemperatureMessage.java
Patch:
@@ -32,6 +32,7 @@
 public class RFXComTemperatureMessage extends RFXComBaseMessage {
 
 	public enum SubType {
+		UNDEF(0),
 		THR128_138_THC138(1),
 		THC238_268_THN122_132_THWR288_THRN122_AW129_131(2),
 		THWR800(3),

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/beans/WidgetBean.java
Patch:
@@ -48,6 +48,7 @@ public class WidgetBean {
 	public BigDecimal maxValue;
 	public BigDecimal step;
 	public String url;
+	public String encoding;
 	public String service;
 	public String period;
 	

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateComparatorTest.java
Patch:
@@ -6,14 +6,15 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.lookup;
 
 import static org.junit.Assert.assertEquals;
 
 import java.util.ArrayList;
 import java.util.Collections;
 
 import org.junit.Test;
+import org.openhab.binding.homematic.internal.converter.lookup.StateComparator;
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.library.types.UpDownType;
 import org.openhab.core.types.State;

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/state/InvertedDoublePercentageConverterTest.java
Patch:
@@ -6,11 +6,12 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
+import org.openhab.binding.homematic.internal.converter.state.InvertedDoublePercentageConverter;
 import org.openhab.core.library.types.PercentType;
 
 public class InvertedDoublePercentageConverterTest {

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/state/TestDecimalTypeConverter.java
Patch:
@@ -6,8 +6,9 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
+import org.openhab.binding.homematic.internal.converter.state.StateConverter;
 import org.openhab.core.library.types.DecimalType;
 
 public class TestDecimalTypeConverter extends StateConverter<Double, DecimalType> {

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/state/TestOnOffConverter.java
Patch:
@@ -6,8 +6,9 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
+import org.openhab.binding.homematic.internal.converter.command.CommandConverter;
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.types.State;

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/state/TestPercentageTypeConverter.java
Patch:
@@ -6,8 +6,9 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
+import org.openhab.binding.homematic.internal.converter.state.StateConverter;
 import org.openhab.core.library.types.DecimalType;
 
 public class TestPercentageTypeConverter extends StateConverter<Double, DecimalType> {

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/test/HomematicBindingProviderMock.java
Patch:
@@ -14,7 +14,7 @@
 import org.openhab.binding.homematic.HomematicBindingProvider;
 import org.openhab.binding.homematic.internal.config.AdminItem;
 import org.openhab.binding.homematic.internal.config.HomematicParameterAddress;
-import org.openhab.binding.homematic.internal.converter.StateConverter;
+import org.openhab.binding.homematic.internal.converter.state.StateConverter;
 import org.openhab.core.binding.BindingChangeListener;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.items.SwitchItem;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/HomematicBindingProvider.java
Patch:
@@ -10,7 +10,7 @@
 
 import org.openhab.binding.homematic.internal.config.AdminItem;
 import org.openhab.binding.homematic.internal.config.HomematicParameterAddress;
-import org.openhab.binding.homematic.internal.converter.StateConverter;
+import org.openhab.binding.homematic.internal.converter.state.StateConverter;
 import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.items.Item;
 
@@ -45,8 +45,7 @@ public interface HomematicBindingProvider extends BindingProvider {
     Item getItem(String itemName);
 
     /**
-     * Returns the configured converter class if a custom converter is specified
-     * in the config line. Otherwise it returns null.
+     * Returns the configured converter class if a custom converter is specified in the config line. Otherwise it returns null.
      * 
      * @param itemName
      *            The name of the item

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/CommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/CommandToConverterMap.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import java.util.HashMap;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/IncreaseDecreasePercentageCommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.library.types.IncreaseDecreaseType;
 import org.openhab.core.library.types.PercentType;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/OnOffPercentageCommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.library.types.PercentType;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/StopMoveBooleanCommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.library.types.StopMoveType;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/UpDownPercentageCommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.library.types.UpDownType;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/lookup/StateComparator.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.lookup;
 
 import java.util.Comparator;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/BooleanOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/BooleanOpenCloseConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/BrightnessConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.PercentType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/BrightnessIntegerDecimalConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.DecimalType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/DoubleDecimalConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/DoubleOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/DoublePercentageConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/DoubleUpDownConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.UpDownType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerDecimalConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.DecimalType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerOpenClosedConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerPercentConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.PercentType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerPercentageOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerPercentageOpenClosedConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/InvertedBooleanOpenCloseConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/InvertedDoubleOpenClosedConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/InvertedDoublePercentageConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/InvertedDoubleUpDownConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.UpDownType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/NegativeBooleanOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/StateCommandConverter.java
Patch:
@@ -6,8 +6,9 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
+import org.openhab.binding.homematic.internal.converter.command.CommandConverter;
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/StateConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.types.State;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/TemperatureConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComBlinds1Message.java
Patch:
@@ -244,7 +244,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String[] ids = id.split("\\.");
 		sensorId = Integer.parseInt(ids[0]);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurtain1Message.java
Patch:
@@ -231,7 +231,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 		
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String[] ids = id.split("\\.");
 		sensorId = ids[0].charAt(0);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting2Message.java
Patch:
@@ -316,7 +316,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 		
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String[] ids = id.split("\\.");
 		sensorId = Integer.parseInt(ids[0]);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting5Message.java
Patch:
@@ -325,7 +325,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String[] ids = id.split("\\.");
 		sensorId = Integer.parseInt(ids[0]);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComSecurity1Message.java
Patch:
@@ -365,7 +365,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String ids = id;
 		sensorId = Integer.parseInt(ids);

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosXMLParser.java
Patch:
@@ -709,9 +709,9 @@ public Map<String, StateVariableValue> getChanges() {
 	
 	public static  String compileMetadataString(SonosEntry entry) {
 		String upnpClass = entry.getUpnpClass();
-		if (upnpClass.startsWith("object.container")) {
-			upnpClass = "object.container";
-		}
+//		if (upnpClass.startsWith("object.container")) {
+//			upnpClass = "object.container";
+//		}
 		String metadata = METADATA_FORMAT.format(new Object[] {entry.getId(), entry.getParentId(), entry.getTitle(), upnpClass});
 
 		return metadata;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveBinarySwitchConverter.java
Patch:
@@ -16,6 +16,7 @@
 import org.openhab.binding.zwave.internal.converter.state.BinaryPercentTypeConverter;
 import org.openhab.binding.zwave.internal.converter.state.IntegerOnOffTypeConverter;
 import org.openhab.binding.zwave.internal.converter.state.IntegerOpenClosedTypeConverter;
+import org.openhab.binding.zwave.internal.converter.state.IntegerUpDownTypeConverter;
 import org.openhab.binding.zwave.internal.converter.state.ZWaveStateConverter;
 import org.openhab.binding.zwave.internal.protocol.SerialMessage;
 import org.openhab.binding.zwave.internal.protocol.ZWaveController;
@@ -55,6 +56,7 @@ public ZWaveBinarySwitchConverter(ZWaveController controller, EventPublisher eve
 		this.addStateConverter(new BinaryPercentTypeConverter());
 		this.addStateConverter(new IntegerOnOffTypeConverter());
 		this.addStateConverter(new IntegerOpenClosedTypeConverter());
+		this.addStateConverter(new IntegerUpDownTypeConverter());
 		
 		this.addCommandConverter(new BinaryOnOffCommandConverter());
 	}

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterHandler.java
Patch:
@@ -67,6 +67,7 @@ public ZWaveConverterHandler(ZWaveController controller, EventPublisher eventPub
 		converters.put(CommandClass.SENSOR_ALARM, new ZWaveAlarmSensorConverter(controller, eventPublisher));
 		converters.put(CommandClass.METER, new ZWaveMeterConverter(controller, eventPublisher));
 		converters.put(CommandClass.BASIC, new ZWaveBasicConverter(controller, eventPublisher));
+		converters.put(CommandClass.SCENE_ACTIVATION, new ZWaveSceneConverter(controller, eventPublisher));
 		infoConverter = new ZWaveInfoConverter(controller, eventPublisher);
 		
 		// add preferred command classes per Item class here

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -317,7 +317,7 @@ public enum CommandClass {
 		SWITCH_TOGGLE_BINARY(0x28,"SWITCH_TOGGLE_BINARY",null),
 		SWITCH_TOGGLE_MULTILEVEL(0x29,"SWITCH_TOGGLE_MULTILEVEL",null),
 		CHIMNEY_FAN(0x2A,"CHIMNEY_FAN",null),
-		SCENE_ACTIVATION(0x2B,"SCENE_ACTIVATION",null),
+		SCENE_ACTIVATION(0x2B,"SCENE_ACTIVATION",ZWaveSceneActivationCommandClass.class),
 		SCENE_ACTUATOR_CONF(0x2C,"SCENE_ACTUATOR_CONF",null),
 		SCENE_CONTROLLER_CONF(0x2D,"SCENE_CONTROLLER_CONF",null),
 		ZIP_CLIENT(0x2E,"ZIP_CLIENT",null),
@@ -471,4 +471,4 @@ public Class<? extends ZWaveCommandClass> getCommandClassClass() {
 			return commandClassClass;
 		}
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosXMLParser.java
Patch:
@@ -709,9 +709,9 @@ public Map<String, StateVariableValue> getChanges() {
 	
 	public static  String compileMetadataString(SonosEntry entry) {
 		String upnpClass = entry.getUpnpClass();
-		if (upnpClass.startsWith("object.container")) {
-			upnpClass = "object.container";
-		}
+//		if (upnpClass.startsWith("object.container")) {
+//			upnpClass = "object.container";
+//		}
 		String metadata = METADATA_FORMAT.format(new Object[] {entry.getId(), entry.getParentId(), entry.getTitle(), upnpClass});
 
 		return metadata;

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateComparatorTest.java
Patch:
@@ -6,14 +6,15 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.lookup;
 
 import static org.junit.Assert.assertEquals;
 
 import java.util.ArrayList;
 import java.util.Collections;
 
 import org.junit.Test;
+import org.openhab.binding.homematic.internal.converter.lookup.StateComparator;
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.library.types.UpDownType;
 import org.openhab.core.types.State;

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/state/InvertedDoublePercentageConverterTest.java
Patch:
@@ -6,11 +6,12 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
+import org.openhab.binding.homematic.internal.converter.state.InvertedDoublePercentageConverter;
 import org.openhab.core.library.types.PercentType;
 
 public class InvertedDoublePercentageConverterTest {

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/state/TestDecimalTypeConverter.java
Patch:
@@ -6,8 +6,9 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
+import org.openhab.binding.homematic.internal.converter.state.StateConverter;
 import org.openhab.core.library.types.DecimalType;
 
 public class TestDecimalTypeConverter extends StateConverter<Double, DecimalType> {

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/state/TestOnOffConverter.java
Patch:
@@ -6,8 +6,9 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
+import org.openhab.binding.homematic.internal.converter.command.CommandConverter;
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.types.State;

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/state/TestPercentageTypeConverter.java
Patch:
@@ -6,8 +6,9 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
+import org.openhab.binding.homematic.internal.converter.state.StateConverter;
 import org.openhab.core.library.types.DecimalType;
 
 public class TestPercentageTypeConverter extends StateConverter<Double, DecimalType> {

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/test/HomematicBindingProviderMock.java
Patch:
@@ -14,7 +14,7 @@
 import org.openhab.binding.homematic.HomematicBindingProvider;
 import org.openhab.binding.homematic.internal.config.AdminItem;
 import org.openhab.binding.homematic.internal.config.HomematicParameterAddress;
-import org.openhab.binding.homematic.internal.converter.StateConverter;
+import org.openhab.binding.homematic.internal.converter.state.StateConverter;
 import org.openhab.core.binding.BindingChangeListener;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.items.SwitchItem;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/HomematicBindingProvider.java
Patch:
@@ -10,7 +10,7 @@
 
 import org.openhab.binding.homematic.internal.config.AdminItem;
 import org.openhab.binding.homematic.internal.config.HomematicParameterAddress;
-import org.openhab.binding.homematic.internal.converter.StateConverter;
+import org.openhab.binding.homematic.internal.converter.state.StateConverter;
 import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.items.Item;
 
@@ -45,8 +45,7 @@ public interface HomematicBindingProvider extends BindingProvider {
     Item getItem(String itemName);
 
     /**
-     * Returns the configured converter class if a custom converter is specified
-     * in the config line. Otherwise it returns null.
+     * Returns the configured converter class if a custom converter is specified in the config line. Otherwise it returns null.
      * 
      * @param itemName
      *            The name of the item

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/CommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/CommandToConverterMap.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import java.util.HashMap;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/IncreaseDecreasePercentageCommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.library.types.IncreaseDecreaseType;
 import org.openhab.core.library.types.PercentType;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/OnOffPercentageCommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.library.types.PercentType;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/StopMoveBooleanCommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.library.types.StopMoveType;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/UpDownPercentageCommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.library.types.UpDownType;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/lookup/StateComparator.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.lookup;
 
 import java.util.Comparator;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/BooleanOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/BooleanOpenCloseConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/BrightnessConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.PercentType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/BrightnessIntegerDecimalConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.DecimalType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/DoubleDecimalConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/DoubleOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/DoublePercentageConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/DoubleUpDownConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.UpDownType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerDecimalConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.DecimalType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerOpenClosedConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerPercentConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.PercentType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerPercentageOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerPercentageOpenClosedConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/InvertedBooleanOpenCloseConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/InvertedDoubleOpenClosedConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/InvertedDoublePercentageConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/InvertedDoubleUpDownConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.UpDownType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/NegativeBooleanOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/StateCommandConverter.java
Patch:
@@ -6,8 +6,9 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
+import org.openhab.binding.homematic.internal.converter.command.CommandConverter;
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/StateConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.types.State;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/TemperatureConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComBlinds1Message.java
Patch:
@@ -244,7 +244,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String[] ids = id.split("\\.");
 		sensorId = Integer.parseInt(ids[0]);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurtain1Message.java
Patch:
@@ -231,7 +231,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 		
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String[] ids = id.split("\\.");
 		sensorId = ids[0].charAt(0);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting2Message.java
Patch:
@@ -316,7 +316,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 		
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String[] ids = id.split("\\.");
 		sensorId = Integer.parseInt(ids[0]);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting5Message.java
Patch:
@@ -325,7 +325,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String[] ids = id.split("\\.");
 		sensorId = Integer.parseInt(ids[0]);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComSecurity1Message.java
Patch:
@@ -365,7 +365,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String ids = id;
 		sensorId = Integer.parseInt(ids);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterHandler.java
Patch:
@@ -67,6 +67,7 @@ public ZWaveConverterHandler(ZWaveController controller, EventPublisher eventPub
 		converters.put(CommandClass.SENSOR_ALARM, new ZWaveAlarmSensorConverter(controller, eventPublisher));
 		converters.put(CommandClass.METER, new ZWaveMeterConverter(controller, eventPublisher));
 		converters.put(CommandClass.BASIC, new ZWaveBasicConverter(controller, eventPublisher));
+		converters.put(CommandClass.SCENE_ACTIVATION, new ZWaveSceneConverter(controller, eventPublisher));
 		infoConverter = new ZWaveInfoConverter(controller, eventPublisher);
 		
 		// add preferred command classes per Item class here

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveCommandClass.java
Patch:
@@ -344,7 +344,7 @@ public enum CommandClass {
 		SWITCH_TOGGLE_BINARY(0x28,"SWITCH_TOGGLE_BINARY",null),
 		SWITCH_TOGGLE_MULTILEVEL(0x29,"SWITCH_TOGGLE_MULTILEVEL",null),
 		CHIMNEY_FAN(0x2A,"CHIMNEY_FAN",null),
-		SCENE_ACTIVATION(0x2B,"SCENE_ACTIVATION",null),
+		SCENE_ACTIVATION(0x2B,"SCENE_ACTIVATION",ZWaveSceneActivationCommandClass.class),
 		SCENE_ACTUATOR_CONF(0x2C,"SCENE_ACTUATOR_CONF",null),
 		SCENE_CONTROLLER_CONF(0x2D,"SCENE_CONTROLLER_CONF",null),
 		ZIP_CLIENT(0x2E,"ZIP_CLIENT",null),

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosXMLParser.java
Patch:
@@ -709,9 +709,9 @@ public Map<String, StateVariableValue> getChanges() {
 	
 	public static  String compileMetadataString(SonosEntry entry) {
 		String upnpClass = entry.getUpnpClass();
-		if (upnpClass.startsWith("object.container")) {
-			upnpClass = "object.container";
-		}
+//		if (upnpClass.startsWith("object.container")) {
+//			upnpClass = "object.container";
+//		}
 		String metadata = METADATA_FORMAT.format(new Object[] {entry.getId(), entry.getParentId(), entry.getTitle(), upnpClass});
 
 		return metadata;

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -216,6 +216,7 @@ public void execute() {
 					}
 
 					switch (device.getType()) {
+					case HeatingThermostatPlus:
 					case HeatingThermostat:
 						if (provider.getBindingType(itemName) == BindingType.VALVE) {
 							eventPublisher.postUpdate(itemName, ((HeatingThermostat) device).getValvePosition());

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -60,6 +60,7 @@ private static Device create(String rfAddress, List<Configuration> configuration
 		for (Configuration c : configurations) {
 			if (c.getRFAddress().toUpperCase().equals(rfAddress.toUpperCase())) {
 				switch (c.getDeviceType()) {
+				case HeatingThermostatPlus:
 				case HeatingThermostat:
 					return new HeatingThermostat(c);
 				case ShutterContact:

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/H_Message.java
Patch:
@@ -77,7 +77,7 @@ private final void setDateTime(String hexDate, String hexTime) {
 	@Override
 	public void debug(Logger logger) {
 		logger.debug("=== H_Message === ");
-		logger.debug("\tRAW:             " + this.getPayload());
+		logger.trace("\tRAW:             " + this.getPayload());
 		logger.debug("\tReading Time:    " + cal.getTime());
 		logger.debug("\tSerial number:   " + rawSerialNumber);
 		logger.debug("\tRF address (HEX):" + rawRfHexAddress);

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -261,7 +261,7 @@ public void internalReceiveCommand(String itemName, Command command) {
 		for (MaxCubeBindingProvider provider : providers) {
 			serialNumber = provider.getSerialNumber(itemName);
 
-			if (serialNumber.equals(null))
+			if (!serialNumber.equals(null))
 				break;
 		}
 

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeActivator.java
Patch:
@@ -36,4 +36,4 @@ public void start(BundleContext bc) throws Exception {
 	public void stop(BundleContext bc) throws Exception {
 		logger.debug("MAX!Cube LAN gateway binding has been stopped.");
 	}
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -176,7 +176,7 @@ public void execute() {
 								}
 							}
 							
-							logger.debug(devices.size() + " devices found.");
+							logger.debug("{} devices found.", devices.size());
 
 							// the L message is the last one, while the reader
 							// would hang trying to read a new line and eventually the
@@ -253,7 +253,7 @@ public void execute() {
 	 */
 	@Override
 	public void internalReceiveCommand(String itemName, Command command) {
-		logger.debug("Received command from " + itemName);
+		logger.debug("Received command from {}", itemName);
 
 		// resolve serial number for item
 		String serialNumber = null;

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Device.java
Patch:
@@ -60,6 +60,7 @@ private static Device create(String rfAddress, List<Configuration> configuration
 		for (Configuration c : configurations) {
 			if (c.getRFAddress().toUpperCase().equals(rfAddress.toUpperCase())) {
 				switch (c.getDeviceType()) {
+				case HeatingThermostatPlus:
 				case HeatingThermostat:
 					return new HeatingThermostat(c);
 				case ShutterContact:

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateComparatorTest.java
Patch:
@@ -6,14 +6,15 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.lookup;
 
 import static org.junit.Assert.assertEquals;
 
 import java.util.ArrayList;
 import java.util.Collections;
 
 import org.junit.Test;
+import org.openhab.binding.homematic.internal.converter.lookup.StateComparator;
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.library.types.UpDownType;
 import org.openhab.core.types.State;

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/state/InvertedDoublePercentageConverterTest.java
Patch:
@@ -6,11 +6,12 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
+import org.openhab.binding.homematic.internal.converter.state.InvertedDoublePercentageConverter;
 import org.openhab.core.library.types.PercentType;
 
 public class InvertedDoublePercentageConverterTest {

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/state/TestDecimalTypeConverter.java
Patch:
@@ -6,8 +6,9 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
+import org.openhab.binding.homematic.internal.converter.state.StateConverter;
 import org.openhab.core.library.types.DecimalType;
 
 public class TestDecimalTypeConverter extends StateConverter<Double, DecimalType> {

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/state/TestOnOffConverter.java
Patch:
@@ -6,8 +6,9 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
+import org.openhab.binding.homematic.internal.converter.command.CommandConverter;
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.types.State;

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/state/TestPercentageTypeConverter.java
Patch:
@@ -6,8 +6,9 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
+import org.openhab.binding.homematic.internal.converter.state.StateConverter;
 import org.openhab.core.library.types.DecimalType;
 
 public class TestPercentageTypeConverter extends StateConverter<Double, DecimalType> {

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/test/HomematicBindingProviderMock.java
Patch:
@@ -14,7 +14,7 @@
 import org.openhab.binding.homematic.HomematicBindingProvider;
 import org.openhab.binding.homematic.internal.config.AdminItem;
 import org.openhab.binding.homematic.internal.config.HomematicParameterAddress;
-import org.openhab.binding.homematic.internal.converter.StateConverter;
+import org.openhab.binding.homematic.internal.converter.state.StateConverter;
 import org.openhab.core.binding.BindingChangeListener;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.items.SwitchItem;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/HomematicBindingProvider.java
Patch:
@@ -10,7 +10,7 @@
 
 import org.openhab.binding.homematic.internal.config.AdminItem;
 import org.openhab.binding.homematic.internal.config.HomematicParameterAddress;
-import org.openhab.binding.homematic.internal.converter.StateConverter;
+import org.openhab.binding.homematic.internal.converter.state.StateConverter;
 import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.items.Item;
 
@@ -45,8 +45,7 @@ public interface HomematicBindingProvider extends BindingProvider {
     Item getItem(String itemName);
 
     /**
-     * Returns the configured converter class if a custom converter is specified
-     * in the config line. Otherwise it returns null.
+     * Returns the configured converter class if a custom converter is specified in the config line. Otherwise it returns null.
      * 
      * @param itemName
      *            The name of the item

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/CommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/CommandToConverterMap.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import java.util.HashMap;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/IncreaseDecreasePercentageCommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.library.types.IncreaseDecreaseType;
 import org.openhab.core.library.types.PercentType;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/OnOffPercentageCommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.library.types.PercentType;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/StopMoveBooleanCommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.library.types.StopMoveType;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/command/UpDownPercentageCommandConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.command;
 
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.library.types.UpDownType;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/lookup/StateComparator.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.lookup;
 
 import java.util.Comparator;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/BooleanOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/BooleanOpenCloseConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/BrightnessConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.PercentType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/BrightnessIntegerDecimalConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.DecimalType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/DoubleDecimalConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/DoubleOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/DoublePercentageConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/DoubleUpDownConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.UpDownType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerDecimalConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.DecimalType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerOpenClosedConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerPercentConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.PercentType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerPercentageOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/IntegerPercentageOpenClosedConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/InvertedBooleanOpenCloseConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/InvertedDoubleOpenClosedConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OpenClosedType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/InvertedDoublePercentageConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/InvertedDoubleUpDownConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.UpDownType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/NegativeBooleanOnOffConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.library.types.OnOffType;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/StateCommandConverter.java
Patch:
@@ -6,8 +6,9 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
+import org.openhab.binding.homematic.internal.converter.command.CommandConverter;
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/StateConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import org.openhab.core.types.State;
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/converter/state/TemperatureConverter.java
Patch:
@@ -6,7 +6,7 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  */
-package org.openhab.binding.homematic.internal.converter;
+package org.openhab.binding.homematic.internal.converter.state;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/ConverterLookupTest.java
Patch:
@@ -71,7 +71,7 @@ public void testGetBindingValueToStateConverterForDifferentState() {
     public void testGetBindingValueToStateConverterWithCustomConverter() {
         parameterIdToStateConverterMap.addStateConverter(ParameterKey.STATE.name(), DecimalType.class, IntegerDecimalConverter.class);
         parameterIdToStateConverterMap.addStateConverter(ParameterKey.STATE.name(), OnOffType.class, BooleanOnOffConverter.class);
-        stateConverterLookupByCustomConverter.addCustomConverter(new NumberItem(NUMBER_ITEM_NAME), IntegerPercentConverter.class);
+        stateConverterLookupByCustomConverter.addCustomConverter(NUMBER_ITEM_NAME, IntegerPercentConverter.class);
         converterLookup.configureItem(new NumberItem(NUMBER_ITEM_NAME), numberItemAddress);
         StateConverter<?, ?> toStateConverterNumberItem = converterLookup.getBindingValueToStateConverter(NUMBER_ITEM_NAME);
         assertEquals(IntegerPercentConverter.class, toStateConverterNumberItem.getClass());
@@ -103,7 +103,7 @@ public void testGetStateToBindingValueConverterForDifferentState() {
     public void testGetStateToBindingValueConverterWithCustomConverter() {
         parameterIdToStateConverterMap.addStateConverter(ParameterKey.STATE.name(), DecimalType.class, IntegerDecimalConverter.class);
         parameterIdToStateConverterMap.addStateConverter(ParameterKey.STATE.name(), OnOffType.class, BooleanOnOffConverter.class);
-        stateConverterLookupByCustomConverter.addCustomConverter(new NumberItem(NUMBER_ITEM_NAME), IntegerPercentConverter.class);
+        stateConverterLookupByCustomConverter.addCustomConverter(NUMBER_ITEM_NAME, IntegerPercentConverter.class);
         converterLookup.configureItem(new NumberItem(NUMBER_ITEM_NAME), numberItemAddress);
         StateConverter<?, ?> toStateConverterNumberItem = converterLookup.getStateToBindingValueConverter(NUMBER_ITEM_NAME,
                 DecimalType.class);

File: bundles/binding/org.openhab.binding.homematic.test/src/test/java/org/openhab/binding/homematic/internal/converter/lookup/StateConverterLookupByCustomConverterTest.java
Patch:
@@ -16,15 +16,15 @@ public class StateConverterLookupByCustomConverterTest {
     @Test
     public void testGetStateToBindingValueConverter() {
         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);
-        converterLookup.addCustomConverter(item, IntegerDecimalConverter.class);
+        converterLookup.addCustomConverter(NUMBER_ITEM_NAME, IntegerDecimalConverter.class);
         StateConverterMap converter = converterLookup.getStateToBindingValueConverter(item, null);
         assertEquals(IntegerDecimalConverter.class, converter.get("bla").getClass());
     }
 
     @Test
     public void testGetBindingValueToStateConverter() {
         NumberItem item = new NumberItem(NUMBER_ITEM_NAME);
-        converterLookup.addCustomConverter(item, IntegerDecimalConverter.class);
+        converterLookup.addCustomConverter(NUMBER_ITEM_NAME, IntegerDecimalConverter.class);
         StateConverter<?, ?> converter = converterLookup.getBindingValueToStateConverter(item, null);
         assertEquals(IntegerDecimalConverter.class, converter.getClass());
     }

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComBlinds1Message.java
Patch:
@@ -244,7 +244,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String[] ids = id.split("\\.");
 		sensorId = Integer.parseInt(ids[0]);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComCurtain1Message.java
Patch:
@@ -231,7 +231,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 		
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String[] ids = id.split("\\.");
 		sensorId = ids[0].charAt(0);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting1Message.java
Patch:
@@ -274,7 +274,7 @@ public State convertToState(
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String[] ids = id.split("\\.");
 		sensorId = ids[0].charAt(0);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting2Message.java
Patch:
@@ -316,7 +316,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 		
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String[] ids = id.split("\\.");
 		sensorId = Integer.parseInt(ids[0]);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting5Message.java
Patch:
@@ -325,7 +325,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String[] ids = id.split("\\.");
 		sensorId = Integer.parseInt(ids[0]);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComSecurity1Message.java
Patch:
@@ -365,7 +365,7 @@ public State convertToState(RFXComValueSelector valueSelector)
 	public void convertFromState(RFXComValueSelector valueSelector, String id,
 			Object subType, Type type, byte seqNumber) throws RFXComException {
 
-		subType = (SubType) subType;
+		this.subType = ((SubType) subType);
 		seqNbr = seqNumber;
 		String ids = id;
 		sensorId = Integer.parseInt(ids);

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/SitemapResource.java
Patch:
@@ -333,7 +333,8 @@ static private WidgetBean createWidgetBean(String sitemapName, Widget widget, bo
 					}
 					else {
 						mappingBean.command = mapping.getCmd();
-					}				}
+					}				
+				}
 				else {
 					mappingBean.command = mapping.getCmd();
 				}

File: bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/S_CommandTest.java
Patch:
@@ -29,7 +29,7 @@ public class S_CommandTest {
 	
 	@Test
 	public void PrefixTest() {
-		S_Command scmd = new S_Command("00FE30", 20.0);
+		S_Command scmd = new S_Command("00FE30", 1, 20.0);
 		
 		String commandStr = scmd.getCommandString();
 		
@@ -41,7 +41,7 @@ public void PrefixTest() {
 	
 	@Test
 	public void BaseCommandTest() {
-		S_Command scmd = new S_Command("00FE30", 20.0);
+		S_Command scmd = new S_Command("00FE30", 1, 20.0);
 		
 		String commandStr = scmd.getCommandString();
 		

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Configuration.java
Patch:
@@ -28,9 +28,7 @@ public final class Configuration {
 	private Configuration() {
 	}
 	
-	public static Configuration create(Message message) {
-		C_Message c_message = (C_Message) message;
-		
+	public static Configuration create(Message message) {	
 		Configuration configuration = new Configuration();
 		configuration.setValues((C_Message) message);
 		

File: bundles/designer/org.openhab.designer.ui/src/main/java/org/openhab/designer/ui/internal/actions/SelectConfigFolderAction.java
Patch:
@@ -32,8 +32,8 @@ public class SelectConfigFolderAction extends Action {
 	
 	public SelectConfigFolderAction(Viewer viewer) {
 		this.viewer = viewer;
-		setText("Select configuration folder");
-		setToolTipText("select a configuration folder");
+		setText("Select Configuration Folder");
+		setToolTipText("Select a Configuration Folder");
 		setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJ_FOLDER));
 	}
 	

File: bundles/designer/org.openhab.designer.ui/src/main/java/org/openhab/designer/ui/internal/actions/SelectConfigFolderAction.java
Patch:
@@ -32,8 +32,8 @@ public class SelectConfigFolderAction extends Action {
 	
 	public SelectConfigFolderAction(Viewer viewer) {
 		this.viewer = viewer;
-		setText("Select configuration folder");
-		setToolTipText("select a configuration folder");
+		setText("Select Configuration Folder");
+		setToolTipText("Select a Configuration Folder");
 		setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJ_FOLDER));
 	}
 	

File: bundles/binding/org.openhab.binding.pioneeravr/src/main/java/org/openhab/binding/pioneeravr/internal/PioneerAvrBinding.java
Patch:
@@ -146,7 +146,6 @@ protected void internalReceiveCommand(String itemName, Command command) {
 				if (deviceCmd != null) {
 					remoteController.send(deviceCmd);
 				} else {
-					logger.warn("Cannot convert value '{}' to eISCP format", command);
 					logger.warn("Cannot convert value '{}' to IpControl format", command);
 				}
 

File: bundles/binding/org.openhab.binding.pioneeravr/src/main/java/org/openhab/binding/pioneeravr/internal/PioneerAvrConnection.java
Patch:
@@ -72,4 +72,4 @@ public void statusUpdateReceived(EventObject event, String ip, String data) {
 		
 	}
 
-}
\ No newline at end of file
+}

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirBinding.java
Patch:
@@ -137,7 +137,7 @@ public void execute() {
 	 * @param command
 	 */
 	private void sendCommand(ComfoAirCommand command) {
-
+		
 		int[] response = connector.sendCommand(command);
 
 		if (response == null) {
@@ -181,8 +181,6 @@ public void updated(Dictionary config) throws ConfigurationException {
 					refreshInterval = Long.parseLong(refreshIntervalString);
 				}
 
-				setProperlyConfigured(true);
-
 				if (connector != null) {
 					connector.close();
 				}
@@ -193,6 +191,8 @@ public void updated(Dictionary config) throws ConfigurationException {
 				} catch (InitializationException e) {
 					logger.error(e.getMessage());
 				}
+
+				setProperlyConfigured(true);
 			}
 		}
 	}

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/device/HMDeviceFactory.java
Patch:
@@ -34,7 +34,7 @@ public static HMRFDevice createRFDevice(CCURF ccu, String address) {
         try {
             return new DefaultHMRFDevice(ccu, address);
         } catch (RuntimeException e) {
-            logger.trace("Could not create Device with address " + address, e);
+            logger.error("Could not create Device with address " + address, e);
             return null;
         }
     }

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/xmlrpc/callback/CallbackServer.java
Patch:
@@ -77,9 +77,9 @@ public CallbackServer(InetAddress inetAddress, Integer port, CallbackHandler han
          * configure and start server
          */
         if (inetAddress != null) {
-            webServer = new WebServer(port, inetAddress);
+            webServer = new TimeoutWebServer(port, inetAddress);
         } else {
-            webServer = new WebServer(port);
+            webServer = new TimeoutWebServer(port);
         }
 
         XmlRpcServer xmlRpcServer = webServer.getXmlRpcServer();
@@ -89,6 +89,7 @@ public CallbackServer(InetAddress inetAddress, Integer port, CallbackHandler han
         XmlRpcServerConfigImpl serverConfig = (XmlRpcServerConfigImpl) xmlRpcServer.getConfig();
         serverConfig.setEnabledForExtensions(true);
         serverConfig.setContentLengthOptional(false);
+        serverConfig.setEncoding("ISO-8859-1");
 
     }
 

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -77,6 +77,7 @@ public class KNXCoreTypeMapper implements KNXTypeMapper {
 		dptTypeMap.put(DPTXlator8BitUnsigned.DPT_VALUE_1_UCOUNT.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_ELECTRICAL_CURRENT.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_BRIGHTNESS.getID(), DecimalType.class);
+		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_TIMEPERIOD_HOURS.getID(), DecimalType.class);
 		dptTypeMap.put("9.001", DecimalType.class);
 		dptTypeMap.put(DPTXlator4ByteSigned.DPT_VALUE_4_COUNT.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator4ByteSigned.DPT_VALUE_4_ACTIVE_ENERGY.getID(), DecimalType.class);

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBindingConfig.java
Patch:
@@ -51,10 +51,11 @@ public class MilightBindingConfig extends HashMap<String, String> implements Bin
 	 * <li>Night Mode</li>
 	 * <li>Disco Mode</li>
 	 * <li>Disco Speed</li>
+	 * <li>White Mode</li>
 	 * </ul>
 	 */
 	public enum BindingType {
-		brightness, colorTemperature, rgb, nightMode, discoMode, discoSpeed
+		brightness, colorTemperature, rgb, nightMode, discoMode, discoSpeed, whiteMode
 	}
 
 	/**
@@ -71,7 +72,6 @@ public enum BindingType {
 	 * The binding type of the Mi-Light item.
 	 */
 	private final BindingType commandType;
-	
 
 	/**
 	 * Constructor of the MilightBindingConfig.
@@ -88,6 +88,7 @@ public enum BindingType {
 	 *            <li>Night Mode</li>
 	 *            <li>Disco Mode</li>
 	 *            <li>Disco Speed</li>
+	 *            <li>White Mode</li>
 	 *            </ul>
 	 * @throws BindingConfigParseException
 	 */

File: bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpUDPConnector.java
Patch:
@@ -25,6 +25,7 @@
  * 
  * OK:          echo -e "\x5C\x00\x20\x68\x50\x01\xA8\x1F\x01\x00\xA8\x64\x00\xFD\xA7\xD0\x03\x44\x9C\x1E\x00\x4F\x9C\xA0\x00\x50\x9C\x78\x00\x51\x9C\x03\x01\x52\x9C\x1B\x01\x87\x9C\x14\x01\x4E\x9C\xC6\x01\x47\x9C\x01\x01\x15\xB9\xB0\xFF\x3A\xB9\x4B\x00\xC9\xAF\x00\x00\x48\x9C\x0D\x01\x4C\x9C\xE7\x00\x4B\x9C\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\x45" | nc -4u -w1 localhost 9999
  * Special len: echo -e "\x5C\x00\x20\x68\x51\x44\x9C\x25\x00\x48\x9C\xFC\x00\x4C\x9C\xF1\x00\x4E\x9C\xC7\x01\x4D\x9C\x0B\x02\x4F\x9C\x25\x00\x50\x9C\x33\x00\x51\x9C\x0B\x01\x52\x9C\x5C\x5C\x01\x56\x9C\x31\x00\xC9\xAF\x00\x00\x01\xA8\x0C\x01\xFD\xA7\x16\xFA\xFA\xA9\x07\x00\x98\xA9\x1B\x1B\xFF\xFF\x00\x00\xA0\xA9\xCA\x02\xFF\xFF\x00\x00\x9C\xA9\x92\x12\xFF\xFF\x00\x00\xBE" | nc -4u -w1 localhost 9999
+ * Special len: echo -e "\x5C\x00\x20\x68\x52\x44\x9C\x25\x00\x48\x9C\xFE\x00\x4C\x9C\xF2\x00\x4E\x9C\xD4\x01\x4D\x9C\xFB\x01\x4F\x9C\x25\x00\x50\x9C\x37\x00\x51\x9C\x0D\x01\x52\x9C\x5C\x5C\x01\x56\x9C\x32\x00\xC9\xAF\x00\x00\x01\xA8\x0C\x01\xFD\xA7\x12\xFA\xFA\xA9\x07\x00\x98\xA9\x5C\x5C\x1B\xFF\xFF\x00\x00\xA0\xA9\xD1\x02\xFF\xFF\x00\x00\x9C\xA9\xB4\x12\xFF\xFF\x00\x00\x7F" | nc -4u -w1 localhost 9999
  * Special CRC: echo -e "\x5C\x00\x20\x68\x50\x44\x9C\x26\x00\x48\x9C\xF6\x00\x4C\x9C\xF1\x00\x4E\x9C\xD6\x01\x4D\x9C\x0C\x02\x4F\x9C\x45\x00\x50\x9C\x3F\x00\x51\x9C\xF1\x00\x52\x9C\x04\x01\x56\x9C\xD5\x00\xC9\xAF\x00\x00\x01\xA8\x0C\x01\xFD\xA7\x99\xFA\xFA\xA9\x02\x00\x98\xA9\x1A\x1B\xFF\xFF\x00\x00\xA0\xA9\xCA\x02\xFF\xFF\x00\x00\x9C\xA9\x92\x12\xFF\xFF\x00\x00\xC5" | nc -4u -w1 localhost 9999
  * CRC failure: echo -e "\x5C\x00\x20\x68\x50\x01\xA8\x1F\x01\x00\xA8\x64\x00\xFD\xA7\xD0\x03\x44\x9C\x1E\x00\x4F\x9C\xA0\x00\x50\x9C\x78\x00\x51\x9C\x03\x01\x52\x9C\x1B\x01\x87\x9C\x14\x01\x4E\x9C\xC6\x01\x47\x9C\x01\x01\x15\xB9\xB0\xFF\x3A\xB9\x4B\x00\xC9\xAF\x00\x00\x48\x9C\x0D\x01\x4C\x9C\xE7\x00\x4B\x9C\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\x44" | nc -4u -w1 localhost 9999
  *

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/LoggerConstants.java
Patch:
@@ -18,6 +18,8 @@ public class LoggerConstants {
 	public static String TFINITSUB = "TFINITSUB";
 	public static String TFCOMMAND = "TFCOMMAND";
 	public static String TFMODELUPDATE = "TFMODELUPDATE";
-	public static String TFOPENHABCONFIG = "TFOPENHABCONFIG";
+	public static String CONFIG = "CONFIG";
+	public static String ITEMUPDATE = "ITEMUPDATE";
+	public static String COMMAND = "COMMAND";
 	
 }

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletAmbientLight.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletAmbientLight;
+import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 /**
  * <!-- begin-user-doc -->
@@ -25,10 +26,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletAmbientLight()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletAmbientLight> org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletAmbientLight> org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.MDecimalValue> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletAmbientLight extends MDevice<BrickletAmbientLight>, MSensor, MTFConfigConsumer<TFBaseConfiguration>
+public interface MBrickletAmbientLight extends MDevice<BrickletAmbientLight>, MSensor<DecimalValue>, MTFConfigConsumer<TFBaseConfiguration>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletBarometer.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletBarometer;
+import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 /**
  * <!-- begin-user-doc -->
@@ -25,10 +26,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletBarometer()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletBarometer> org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.MSubDeviceHolder<org.openhab.binding.tinkerforge.internal.model.MBarometerTemperature>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletBarometer> org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.MDecimalValue> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.MSubDeviceHolder<org.openhab.binding.tinkerforge.internal.model.MBarometerTemperature> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletBarometer extends MDevice<BrickletBarometer>, MSensor, MTFConfigConsumer<TFBaseConfiguration>, MSubDeviceHolder<MBarometerTemperature>
+public interface MBrickletBarometer extends MDevice<BrickletBarometer>, MSensor<DecimalValue>, MTFConfigConsumer<TFBaseConfiguration>, MSubDeviceHolder<MBarometerTemperature>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletDistanceIR.java
Patch:
@@ -11,6 +11,7 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletDistanceIR;
+import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 
 /**
@@ -28,10 +29,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletDistanceIR()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletDistanceIR> org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletDistanceIR> org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.MDecimalValue> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletDistanceIR extends MDevice<BrickletDistanceIR>, MSensor, MTFConfigConsumer<TFBaseConfiguration>
+public interface MBrickletDistanceIR extends MDevice<BrickletDistanceIR>, MSensor<DecimalValue>, MTFConfigConsumer<TFBaseConfiguration>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletHumidity.java
Patch:
@@ -11,6 +11,7 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletHumidity;
+import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 
 /**
@@ -28,10 +29,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletHumidity()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletHumidity> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.MDecimalValue> org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletHumidity> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletHumidity extends MSensor, MDevice<BrickletHumidity>, MTFConfigConsumer<TFBaseConfiguration>
+public interface MBrickletHumidity extends MSensor<DecimalValue>, MDevice<BrickletHumidity>, MTFConfigConsumer<TFBaseConfiguration>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletLCD20x4.java
Patch:
@@ -27,10 +27,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletLCD20x4()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletLCD20x4> org.openhab.binding.tinkerforge.internal.model.MTextActor org.openhab.binding.tinkerforge.internal.model.MInSwitchActor org.openhab.binding.tinkerforge.internal.model.MSubDeviceHolder<org.openhab.binding.tinkerforge.internal.model.MLCD20x4Button>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletLCD20x4> org.openhab.binding.tinkerforge.internal.model.MTextActor org.openhab.binding.tinkerforge.internal.model.MSubDeviceHolder<org.openhab.binding.tinkerforge.internal.model.MLCDSubDevice>"
  * @generated
  */
-public interface MBrickletLCD20x4 extends MDevice<BrickletLCD20x4>, MTextActor, MInSwitchActor, MSubDeviceHolder<MLCD20x4Button>
+public interface MBrickletLCD20x4 extends MDevice<BrickletLCD20x4>, MTextActor, MSubDeviceHolder<MLCDSubDevice>
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletTemperature.java
Patch:
@@ -11,6 +11,7 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletTemperature;
+import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 
 /**
@@ -28,10 +29,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletTemperature()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletTemperature> org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletTemperature> org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.MDecimalValue> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletTemperature extends MDevice<BrickletTemperature>, MSensor, MTFConfigConsumer<TFBaseConfiguration>
+public interface MBrickletTemperature extends MDevice<BrickletTemperature>, MSensor<DecimalValue>, MTFConfigConsumer<TFBaseConfiguration>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MLCD20x4Button.java
Patch:
@@ -27,7 +27,7 @@
  * @model
  * @generated
  */
-public interface MLCD20x4Button extends MOutSwitchActor, MSubDevice<MBrickletLCD20x4>
+public interface MLCD20x4Button extends MOutSwitchActor, MLCDSubDevice
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickServoImpl.java
Patch:
@@ -38,6 +38,9 @@
 /**
  * <!-- begin-user-doc -->
  * An implementation of the model object '<em><b>MBrick Servo</b></em>'.
+ * 
+ * @author Theo Weiss
+ * @since 1.3.0
  * <!-- end-user-doc -->
  * <p>
  * The following features are implemented:

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/xmlrpc/XmlRpcConnectionRF.java
Patch:
@@ -36,7 +36,6 @@ public XmlRpcConnectionRF(String address) {
         if (address == null) {
             throw new IllegalArgumentException("address must not be null");
         }
-        ;
         this.address = address;
         URL url = null;
         try {

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/xmlrpc/callback/CallbackServer.java
Patch:
@@ -77,9 +77,9 @@ public CallbackServer(InetAddress inetAddress, Integer port, CallbackHandler han
          * configure and start server
          */
         if (inetAddress != null) {
-            webServer = new WebServer(port, inetAddress);
+            webServer = new TimeoutWebServer(port, inetAddress);
         } else {
-            webServer = new WebServer(port);
+            webServer = new TimeoutWebServer(port);
         }
 
         XmlRpcServer xmlRpcServer = webServer.getXmlRpcServer();
@@ -89,6 +89,7 @@ public CallbackServer(InetAddress inetAddress, Integer port, CallbackHandler han
         XmlRpcServerConfigImpl serverConfig = (XmlRpcServerConfigImpl) xmlRpcServer.getConfig();
         serverConfig.setEnabledForExtensions(true);
         serverConfig.setContentLengthOptional(false);
+        serverConfig.setEncoding("ISO-8859-1");
 
     }
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/xmlrpc/callback/SystemHandler.java
Patch:
@@ -59,7 +59,7 @@ public String[] listMethods(String param) throws XmlRpcException {
     }
 
     public Object[] multicall(String interfaceId) throws XmlRpcException {
-        log.debug("multicall: " + interfaceId);
+        log.debug("multicall: {}", interfaceId);
         return new Object[] {};
     }
 
@@ -73,7 +73,7 @@ public Object[] multicall(Object[] calls) throws XmlRpcException {
             String methodname = call.get("methodName").toString();
             Object[] params = (Object[]) call.get("params");
 
-            log.debug("calls to " + methodname + " with params " + Arrays.toString(calls));
+            log.debug("calls to {} with params {}", methodname, Arrays.toString(calls));
 
             XmlRpcRequest req = new XmlRpcClientRequestImpl(new XmlRpcRequestConfig() {
 

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -77,6 +77,7 @@ public class KNXCoreTypeMapper implements KNXTypeMapper {
 		dptTypeMap.put(DPTXlator8BitUnsigned.DPT_VALUE_1_UCOUNT.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_ELECTRICAL_CURRENT.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_BRIGHTNESS.getID(), DecimalType.class);
+		dptTypeMap.put(DPTXlator2ByteUnsigned.DPT_TIMEPERIOD_HOURS.getID(), DecimalType.class);
 		dptTypeMap.put("9.001", DecimalType.class);
 		dptTypeMap.put(DPTXlator4ByteSigned.DPT_VALUE_4_COUNT.getID(), DecimalType.class);
 		dptTypeMap.put(DPTXlator4ByteSigned.DPT_VALUE_4_ACTIVE_ENERGY.getID(), DecimalType.class);

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/converter/ZWaveConverterHandler.java
Patch:
@@ -27,6 +27,7 @@
 import org.openhab.core.library.items.ContactItem;
 import org.openhab.core.library.items.DimmerItem;
 import org.openhab.core.library.items.NumberItem;
+import org.openhab.core.library.items.RollershutterItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.core.types.Command;
 import org.slf4j.Logger;
@@ -73,6 +74,8 @@ public ZWaveConverterHandler(ZWaveController controller, EventPublisher eventPub
 			CommandClass.METER, CommandClass.BASIC, CommandClass.SENSOR_BINARY, CommandClass.SENSOR_ALARM });
 		preferredCommandClasses.put(DimmerItem.class, new CommandClass[] { CommandClass.SWITCH_MULTILEVEL, CommandClass.SWITCH_BINARY, 
 			CommandClass.BASIC, CommandClass.SENSOR_MULTILEVEL, CommandClass.SENSOR_BINARY, CommandClass.SENSOR_ALARM });
+		preferredCommandClasses.put(RollershutterItem.class, new CommandClass[] { CommandClass.SWITCH_MULTILEVEL, CommandClass.SWITCH_BINARY, 
+			CommandClass.BASIC, CommandClass.SENSOR_MULTILEVEL, CommandClass.SENSOR_BINARY, CommandClass.SENSOR_ALARM });
 		preferredCommandClasses.put(NumberItem.class, new CommandClass[] { CommandClass.SENSOR_MULTILEVEL, CommandClass.METER, 
 			CommandClass.SWITCH_MULTILEVEL, CommandClass.BATTERY, CommandClass.BASIC, CommandClass.SENSOR_BINARY, 
 			CommandClass.SENSOR_ALARM, CommandClass.SWITCH_BINARY, CommandClass.THERMOSTAT_SETPOINT });

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/HeatmiserGenericBindingProvider.java
Patch:
@@ -80,7 +80,6 @@ public void processBindingConfiguration(String context, Item item, String bindin
 				// Check the type for different functions
 				switch(config.function) {
 					case SETTEMP:
-						break;
 					case FROSTTEMP:
 					case ROOMTEMP:
 					case FLOORTEMP:

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/HeatmiserActivator.java
Patch:
@@ -18,7 +18,7 @@
  * Extension of the default OSGi bundle activator
  * 
  * @author Chris Jackson
- * @since 1.3.0
+ * @since 1.4.0
  */
 public final class HeatmiserActivator implements BundleActivator {
 

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/HeatmiserConnector.java
Patch:
@@ -29,7 +29,7 @@
  * If responses stop, the connection is reconnected.
  * 
  * @author Chris Jackson
- * @since 1.3.0
+ * @since 1.4.0
  */
 public class HeatmiserConnector {
 

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/HeatmiserEventListener.java
Patch:
@@ -15,7 +15,7 @@
  * This interface defines an interface to receive data from the Heatmiser thermostats.
  * 
  * @author Chris Jackson
- * @since 1.3.0
+ * @since 1.4.0
  */
 public interface HeatmiserEventListener extends EventListener {
 

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/HeatmiserGenericBindingProvider.java
Patch:
@@ -32,7 +32,7 @@
  * This class is responsible for parsing the binding configuration.
  * 
  * @author Chris Jackson
- * @since 1.3.0
+ * @since 1.4.0
  */
 public class HeatmiserGenericBindingProvider extends AbstractGenericBindingProvider implements HeatmiserBindingProvider {
 

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/HeatmiserResponseEvent.java
Patch:
@@ -14,7 +14,7 @@
  * The listener interface for receiving data from Heatmiser connector.
  * 
  * @author Chris Jackson
- * @since 1.3.0
+ * @since 1.4.0
  */
 public class HeatmiserResponseEvent extends EventObject {
 

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/thermostat/HeatmiserPRT.java
Patch:
@@ -19,7 +19,7 @@
  * and disabled
  * 
  * @author Chris Jackson
- * @since 1.3.0
+ * @since 1.4.0
  *
  */
 public class HeatmiserPRT extends HeatmiserThermostat {

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/thermostat/HeatmiserPRTHW.java
Patch:
@@ -13,11 +13,11 @@
 import org.openhab.core.types.State;
 
 /**
- * Thermostat class for the PRTHW thermostat (Programable Room Thermostat - Hot Water)
+ * Thermostat class for the PRTHW thermostat (Programmable Room Thermostat - Hot Water)
  * Most functions are handled by the base class
  * 
  * @author Chris Jackson
- * @since 1.3.0
+ * @since 1.4.0
  *
  */
 public class HeatmiserPRTHW extends HeatmiserThermostat {

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/xmlrpc/XmlRpcConnectionRF.java
Patch:
@@ -36,7 +36,6 @@ public XmlRpcConnectionRF(String address) {
         if (address == null) {
             throw new IllegalArgumentException("address must not be null");
         }
-        ;
         this.address = address;
         URL url = null;
         try {

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/xmlrpc/callback/CallbackServer.java
Patch:
@@ -77,9 +77,9 @@ public CallbackServer(InetAddress inetAddress, Integer port, CallbackHandler han
          * configure and start server
          */
         if (inetAddress != null) {
-            webServer = new WebServer(port, inetAddress);
+            webServer = new TimeoutWebServer(port, inetAddress);
         } else {
-            webServer = new WebServer(port);
+            webServer = new TimeoutWebServer(port);
         }
 
         XmlRpcServer xmlRpcServer = webServer.getXmlRpcServer();
@@ -89,6 +89,7 @@ public CallbackServer(InetAddress inetAddress, Integer port, CallbackHandler han
         XmlRpcServerConfigImpl serverConfig = (XmlRpcServerConfigImpl) xmlRpcServer.getConfig();
         serverConfig.setEnabledForExtensions(true);
         serverConfig.setContentLengthOptional(false);
+        serverConfig.setEncoding("ISO-8859-1");
 
     }
 

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/xmlrpc/callback/SystemHandler.java
Patch:
@@ -59,7 +59,7 @@ public String[] listMethods(String param) throws XmlRpcException {
     }
 
     public Object[] multicall(String interfaceId) throws XmlRpcException {
-        log.debug("multicall: " + interfaceId);
+        log.debug("multicall: {}", interfaceId);
         return new Object[] {};
     }
 
@@ -73,7 +73,7 @@ public Object[] multicall(Object[] calls) throws XmlRpcException {
             String methodname = call.get("methodName").toString();
             Object[] params = (Object[]) call.get("params");
 
-            log.debug("calls to " + methodname + " with params " + Arrays.toString(calls));
+            log.debug("calls to {} with params {}", methodname, Arrays.toString(calls));
 
             XmlRpcRequest req = new XmlRpcClientRequestImpl(new XmlRpcRequestConfig() {
 

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirBinding.java
Patch:
@@ -137,7 +137,7 @@ public void execute() {
 	 * @param command
 	 */
 	private void sendCommand(ComfoAirCommand command) {
-
+		
 		int[] response = connector.sendCommand(command);
 
 		if (response == null) {
@@ -181,8 +181,6 @@ public void updated(Dictionary config) throws ConfigurationException {
 					refreshInterval = Long.parseLong(refreshIntervalString);
 				}
 
-				setProperlyConfigured(true);
-
 				if (connector != null) {
 					connector.close();
 				}
@@ -193,6 +191,8 @@ public void updated(Dictionary config) throws ConfigurationException {
 				} catch (InitializationException e) {
 					logger.error(e.getMessage());
 				}
+
+				setProperlyConfigured(true);
 			}
 		}
 	}

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/bus/HomematicBinding.java
Patch:
@@ -87,7 +87,6 @@ public class HomematicBinding extends AbstractBinding<HomematicBindingProvider>
     private ConverterFactory converterFactory = new ConverterFactory();
 
     private CCU<?> ccu;
-    protected EventPublisher eventPublisher = null;
     private Integer callbackPort;
     private String ccuHost;
     private String callbackHost;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/device/HMDeviceFactory.java
Patch:
@@ -34,7 +34,7 @@ public static HMRFDevice createRFDevice(CCURF ccu, String address) {
         try {
             return new DefaultHMRFDevice(ccu, address);
         } catch (RuntimeException e) {
-            logger.trace("Could not create Device with address " + address, e);
+            logger.error("Could not create Device with address " + address, e);
             return null;
         }
     }

File: bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpUDPConnector.java
Patch:
@@ -25,6 +25,7 @@
  * 
  * OK:          echo -e "\x5C\x00\x20\x68\x50\x01\xA8\x1F\x01\x00\xA8\x64\x00\xFD\xA7\xD0\x03\x44\x9C\x1E\x00\x4F\x9C\xA0\x00\x50\x9C\x78\x00\x51\x9C\x03\x01\x52\x9C\x1B\x01\x87\x9C\x14\x01\x4E\x9C\xC6\x01\x47\x9C\x01\x01\x15\xB9\xB0\xFF\x3A\xB9\x4B\x00\xC9\xAF\x00\x00\x48\x9C\x0D\x01\x4C\x9C\xE7\x00\x4B\x9C\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\x45" | nc -4u -w1 localhost 9999
  * Special len: echo -e "\x5C\x00\x20\x68\x51\x44\x9C\x25\x00\x48\x9C\xFC\x00\x4C\x9C\xF1\x00\x4E\x9C\xC7\x01\x4D\x9C\x0B\x02\x4F\x9C\x25\x00\x50\x9C\x33\x00\x51\x9C\x0B\x01\x52\x9C\x5C\x5C\x01\x56\x9C\x31\x00\xC9\xAF\x00\x00\x01\xA8\x0C\x01\xFD\xA7\x16\xFA\xFA\xA9\x07\x00\x98\xA9\x1B\x1B\xFF\xFF\x00\x00\xA0\xA9\xCA\x02\xFF\xFF\x00\x00\x9C\xA9\x92\x12\xFF\xFF\x00\x00\xBE" | nc -4u -w1 localhost 9999
+ * Special len: echo -e "\x5C\x00\x20\x68\x52\x44\x9C\x25\x00\x48\x9C\xFE\x00\x4C\x9C\xF2\x00\x4E\x9C\xD4\x01\x4D\x9C\xFB\x01\x4F\x9C\x25\x00\x50\x9C\x37\x00\x51\x9C\x0D\x01\x52\x9C\x5C\x5C\x01\x56\x9C\x32\x00\xC9\xAF\x00\x00\x01\xA8\x0C\x01\xFD\xA7\x12\xFA\xFA\xA9\x07\x00\x98\xA9\x5C\x5C\x1B\xFF\xFF\x00\x00\xA0\xA9\xD1\x02\xFF\xFF\x00\x00\x9C\xA9\xB4\x12\xFF\xFF\x00\x00\x7F" | nc -4u -w1 localhost 9999
  * Special CRC: echo -e "\x5C\x00\x20\x68\x50\x44\x9C\x26\x00\x48\x9C\xF6\x00\x4C\x9C\xF1\x00\x4E\x9C\xD6\x01\x4D\x9C\x0C\x02\x4F\x9C\x45\x00\x50\x9C\x3F\x00\x51\x9C\xF1\x00\x52\x9C\x04\x01\x56\x9C\xD5\x00\xC9\xAF\x00\x00\x01\xA8\x0C\x01\xFD\xA7\x99\xFA\xFA\xA9\x02\x00\x98\xA9\x1A\x1B\xFF\xFF\x00\x00\xA0\xA9\xCA\x02\xFF\xFF\x00\x00\x9C\xA9\x92\x12\xFF\xFF\x00\x00\xC5" | nc -4u -w1 localhost 9999
  * CRC failure: echo -e "\x5C\x00\x20\x68\x50\x01\xA8\x1F\x01\x00\xA8\x64\x00\xFD\xA7\xD0\x03\x44\x9C\x1E\x00\x4F\x9C\xA0\x00\x50\x9C\x78\x00\x51\x9C\x03\x01\x52\x9C\x1B\x01\x87\x9C\x14\x01\x4E\x9C\xC6\x01\x47\x9C\x01\x01\x15\xB9\xB0\xFF\x3A\xB9\x4B\x00\xC9\xAF\x00\x00\x48\x9C\x0D\x01\x4C\x9C\xE7\x00\x4B\x9C\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\x44" | nc -4u -w1 localhost 9999
  *

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/RFXComValueSelector.java
Patch:
@@ -51,7 +51,8 @@ public enum RFXComValueSelector {
 	STATUS("Status", StringItem.class),  	// Security1
 	MOTION("Motion", SwitchItem.class),		// Security1
 	CONTACT("Contact", ContactItem.class),	// Security1
-	VOLTAGE("Voltage", NumberItem.class);
+	VOLTAGE("Voltage", NumberItem.class),
+	SET_POINT("SetPoint", NumberItem.class);
 
 	private final String text;
 	private Class<? extends Item> itemClass;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComBaseMessage.java
Patch:
@@ -27,7 +27,9 @@ public enum PacketType {
 		LIGHTING5(20),
 		CURTAIN1(18),
 		SECURITY1(32),
+		THERMOSTAT1(64),
 		TEMPERATURE(80),
+		HUMIDITY(81),
 		TEMPERATURE_HUMIDITY(82),
 		ENERGY(90),
 
@@ -94,7 +96,7 @@ public String toString() {
 
 		str += "Raw data = " + DatatypeConverter.printHexBinary(rawMessage);
 		str += "\n - Packet type = " + packetType;
-		str += "\n - Seq number = " + seqNbr;
+		str += "\n - Seq number = " + (short)(seqNbr & 0xFF);
 
 		return str;
 	}

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting5Message.java
Patch:
@@ -60,8 +60,9 @@ public enum SubType {
 		EMW100(1),
 		BBSB_NEW(2),
 		MDREMOTE(3),
-		CONRAD_RSL2(4);
-
+		CONRAD_RSL2(4),
+		LIVOLO(5);
+		
 		private final int subType;
 
 		SubType(int subType) {

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/LoggerConstants.java
Patch:
@@ -18,6 +18,8 @@ public class LoggerConstants {
 	public static String TFINITSUB = "TFINITSUB";
 	public static String TFCOMMAND = "TFCOMMAND";
 	public static String TFMODELUPDATE = "TFMODELUPDATE";
-	public static String TFOPENHABCONFIG = "TFOPENHABCONFIG";
+	public static String CONFIG = "CONFIG";
+	public static String ITEMUPDATE = "ITEMUPDATE";
+	public static String COMMAND = "COMMAND";
 	
 }

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletAmbientLight.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletAmbientLight;
+import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 /**
  * <!-- begin-user-doc -->
@@ -25,10 +26,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletAmbientLight()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletAmbientLight> org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletAmbientLight> org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.MDecimalValue> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletAmbientLight extends MDevice<BrickletAmbientLight>, MSensor, MTFConfigConsumer<TFBaseConfiguration>
+public interface MBrickletAmbientLight extends MDevice<BrickletAmbientLight>, MSensor<DecimalValue>, MTFConfigConsumer<TFBaseConfiguration>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletBarometer.java
Patch:
@@ -9,6 +9,7 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletBarometer;
+import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 /**
  * <!-- begin-user-doc -->
@@ -25,10 +26,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletBarometer()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletBarometer> org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.MSubDeviceHolder<org.openhab.binding.tinkerforge.internal.model.MBarometerTemperature>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletBarometer> org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.MDecimalValue> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.MSubDeviceHolder<org.openhab.binding.tinkerforge.internal.model.MBarometerTemperature> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletBarometer extends MDevice<BrickletBarometer>, MSensor, MTFConfigConsumer<TFBaseConfiguration>, MSubDeviceHolder<MBarometerTemperature>
+public interface MBrickletBarometer extends MDevice<BrickletBarometer>, MSensor<DecimalValue>, MTFConfigConsumer<TFBaseConfiguration>, MSubDeviceHolder<MBarometerTemperature>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletDistanceIR.java
Patch:
@@ -11,6 +11,7 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletDistanceIR;
+import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 
 /**
@@ -28,10 +29,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletDistanceIR()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletDistanceIR> org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletDistanceIR> org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.MDecimalValue> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletDistanceIR extends MDevice<BrickletDistanceIR>, MSensor, MTFConfigConsumer<TFBaseConfiguration>
+public interface MBrickletDistanceIR extends MDevice<BrickletDistanceIR>, MSensor<DecimalValue>, MTFConfigConsumer<TFBaseConfiguration>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletHumidity.java
Patch:
@@ -11,6 +11,7 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletHumidity;
+import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 
 /**
@@ -28,10 +29,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletHumidity()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletHumidity> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.MDecimalValue> org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletHumidity> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletHumidity extends MSensor, MDevice<BrickletHumidity>, MTFConfigConsumer<TFBaseConfiguration>
+public interface MBrickletHumidity extends MSensor<DecimalValue>, MDevice<BrickletHumidity>, MTFConfigConsumer<TFBaseConfiguration>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletLCD20x4.java
Patch:
@@ -27,10 +27,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletLCD20x4()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletLCD20x4> org.openhab.binding.tinkerforge.internal.model.MTextActor org.openhab.binding.tinkerforge.internal.model.MInSwitchActor org.openhab.binding.tinkerforge.internal.model.MSubDeviceHolder<org.openhab.binding.tinkerforge.internal.model.MLCD20x4Button>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletLCD20x4> org.openhab.binding.tinkerforge.internal.model.MTextActor org.openhab.binding.tinkerforge.internal.model.MSubDeviceHolder<org.openhab.binding.tinkerforge.internal.model.MLCDSubDevice>"
  * @generated
  */
-public interface MBrickletLCD20x4 extends MDevice<BrickletLCD20x4>, MTextActor, MInSwitchActor, MSubDeviceHolder<MLCD20x4Button>
+public interface MBrickletLCD20x4 extends MDevice<BrickletLCD20x4>, MTextActor, MSubDeviceHolder<MLCDSubDevice>
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletTemperature.java
Patch:
@@ -11,6 +11,7 @@
 package org.openhab.binding.tinkerforge.internal.model;
 
 import com.tinkerforge.BrickletTemperature;
+import org.openhab.binding.tinkerforge.internal.types.DecimalValue;
 
 
 /**
@@ -28,10 +29,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletTemperature()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletTemperature> org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletTemperature> org.openhab.binding.tinkerforge.internal.model.MSensor<org.openhab.binding.tinkerforge.internal.model.MDecimalValue> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletTemperature extends MDevice<BrickletTemperature>, MSensor, MTFConfigConsumer<TFBaseConfiguration>
+public interface MBrickletTemperature extends MDevice<BrickletTemperature>, MSensor<DecimalValue>, MTFConfigConsumer<TFBaseConfiguration>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MLCD20x4Button.java
Patch:
@@ -27,7 +27,7 @@
  * @model
  * @generated
  */
-public interface MLCD20x4Button extends MOutSwitchActor, MSubDevice<MBrickletLCD20x4>
+public interface MLCD20x4Button extends MOutSwitchActor, MLCDSubDevice
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickServoImpl.java
Patch:
@@ -38,6 +38,9 @@
 /**
  * <!-- begin-user-doc -->
  * An implementation of the model object '<em><b>MBrick Servo</b></em>'.
+ * 
+ * @author Theo Weiss
+ * @since 1.3.0
  * <!-- end-user-doc -->
  * <p>
  * The following features are implemented:

File: bundles/persistence/org.openhab.persistence.mysql/java/org/openhab/persistence/mysql/internal/MysqlPersistenceService.java
Patch:
@@ -220,7 +220,7 @@ private String getTable(Item item) {
 		// Check if the new entry is in the table list
 		// If it's not in the list, then there was an error and we need to do some tidying up
 		// The item needs to be removed from the index table to avoid duplicates
-		if(sqlTables.containsKey(tableName) == false) {
+		if(sqlTables.get(itemName) == null) {
 			logger.error("mySQL: Item '" + itemName + "' was not added to the table - removing index");
 			sqlCmd = new String("DELETE FROM Items WHERE ItemName='" + itemName+"'");
 			logger.debug("SQL: " + sqlCmd);

File: bundles/binding/org.openhab.binding.insteonhub/src/main/java/org/openhab/binding/insteonhub/internal/hardware/InsteonHubProxyListener.java
Patch:
@@ -15,5 +15,5 @@
  * @since 1.4.0
  */
 public interface InsteonHubProxyListener {
-	void onLevelUpdate(String device, int level);
+	void onLevelUpdate(String device, int level, InsteonHubLevelUpdateType updateType);
 }

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -83,7 +83,7 @@ public List<OpenHABConfigurationRecord> getConfiguration(String domain) {
 			case 1:
 				// Just list the manufacturers
 				for (ZWaveDbManufacturer manufacturer : database.GetManufacturers()) {
-					record = new OpenHABConfigurationRecord(domain, manufacturer.Id.toString(), manufacturer.Name, true);
+					record = new OpenHABConfigurationRecord(domain + manufacturer.Id.toString() + "/", manufacturer.Name);
 
 					records.add(record);
 				}

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeBinding.java
Patch:
@@ -195,10 +195,10 @@ public void execute() {
 				}
 			}
 		} catch (UnknownHostException e) {
-			logger.info("Cannot establish connection with MAX!cube lan gateway while connecting to '{}'", ip);
+			logger.info("Cannot establish connection with MAX!Cube lan gateway while connecting to '{}'", ip);
 			logger.debug(Utils.getStackTrace(e));
 		} catch (IOException e) {
-			logger.info("Cannot read data from MAX!cube lan gateway while connecting to '{}'", ip);
+			logger.info("Cannot read data from MAX!Cube lan gateway while connecting to '{}'", ip);
 			logger.debug(Utils.getStackTrace(e));
 		}
 	}

File: bundles/binding/org.openhab.binding.s300th.test/src/test/java/org/openhab/binding/s300th/internal/ParsingTest.java
Patch:
@@ -22,7 +22,7 @@ public void testS300THParsing() throws Exception {
 		double temp = ParseUtils.parseTemperature(S300TH_DATA_1);
 		Assert.assertEquals(23.2, temp, 0.01);
 
-		double humidity = ParseUtils.parseHumidity(S300TH_DATA_1);
+		double humidity = ParseUtils.parseS300THHumidity(S300TH_DATA_1);
 		Assert.assertEquals(50.8, humidity, 0.01);
 
 		String address = ParseUtils.parseS300THAddress(S300TH_DATA_1);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComHumidityMessage.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * RFXCOM data class for humidity message.
  * 
- * @author Pauli Anttila, Janne
+ * @author Pauli Anttila, Jan Sjölander
  * @since 1.4.0
  */
 public class RFXComHumidityMessage extends RFXComBaseMessage {

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComThermostat1Message.java
Patch:
@@ -8,8 +8,6 @@
  */
 package org.openhab.binding.rfxcom.internal.messages;
 
-import org.openhab.binding.rfxcom.internal.messages.RFXComSecurity1Message.Contact;
-
 /**
  * RFXCOM data class for thermostat1 message.
  * Digimax 210 Thermostat RF sensor operational
@@ -21,7 +19,8 @@ public class RFXComThermostat1Message extends RFXComBaseMessage {
 
 	public enum SubType {
 		Digimax_TLX7506(0),
-
+		Digimax_short_format(1),
+		
 		UNKNOWN(255);
 
 		private final int subType;

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComLighting5Message.java
Patch:
@@ -60,8 +60,9 @@ public enum SubType {
 		EMW100(1),
 		BBSB_NEW(2),
 		MDREMOTE(3),
-		CONRAD_RSL2(4);
-
+		CONRAD_RSL2(4),
+		LIVOLO(5);
+		
 		private final int subType;
 
 		SubType(int subType) {

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComHumidityMessage.java
Patch:
@@ -66,7 +66,7 @@ public byte toByte() {
 	public byte batteryLevel = 0;
 
 	public RFXComHumidityMessage() {
-		packetType = PacketType.TEMPERATURE_HUMIDITY;
+		packetType = PacketType.HUMIDITY;
 	}
 
 	public RFXComHumidityMessage(byte[] data) {
@@ -116,7 +116,7 @@ public byte[] decodeMessage() {
 		byte[] data = new byte[9];
 
 		data[0] = 0x0A;
-		data[1] = RFXComBaseMessage.PacketType.TEMPERATURE_HUMIDITY.toByte();
+		data[1] = RFXComBaseMessage.PacketType.HUMIDITY.toByte();
 		data[2] = subType.toByte();
 		data[3] = seqNbr;
 		data[4] = (byte) ((sensorId & 0xFF00) >> 8);

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComBaseMessage.java
Patch:
@@ -96,7 +96,7 @@ public String toString() {
 
 		str += "Raw data = " + DatatypeConverter.printHexBinary(rawMessage);
 		str += "\n - Packet type = " + packetType;
-		str += "\n - Seq number = " + seqNbr;
+		str += "\n - Seq number = " + (short)(seqNbr & 0xFF);
 
 		return str;
 	}

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/ModelRepositoryImpl.java
Patch:
@@ -112,8 +112,8 @@ public boolean removeModel(String name) {
 		if(resource!=null) {
 			synchronized(resourceSet) {
 				// do not physically delete it, but remove it from the resource set
-				resourceSet.getResources().remove(resource);
 				notifyListeners(name, EventType.REMOVED);
+				resourceSet.getResources().remove(resource);
 				return true;
 			}
 		} else {

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/xmlrpc/XmlRpcConnectionRF.java
Patch:
@@ -36,7 +36,6 @@ public XmlRpcConnectionRF(String address) {
         if (address == null) {
             throw new IllegalArgumentException("address must not be null");
         }
-        ;
         this.address = address;
         URL url = null;
         try {

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/xmlrpc/callback/CallbackServer.java
Patch:
@@ -77,9 +77,9 @@ public CallbackServer(InetAddress inetAddress, Integer port, CallbackHandler han
          * configure and start server
          */
         if (inetAddress != null) {
-            webServer = new WebServer(port, inetAddress);
+            webServer = new TimeoutWebServer(port, inetAddress);
         } else {
-            webServer = new WebServer(port);
+            webServer = new TimeoutWebServer(port);
         }
 
         XmlRpcServer xmlRpcServer = webServer.getXmlRpcServer();
@@ -89,6 +89,7 @@ public CallbackServer(InetAddress inetAddress, Integer port, CallbackHandler han
         XmlRpcServerConfigImpl serverConfig = (XmlRpcServerConfigImpl) xmlRpcServer.getConfig();
         serverConfig.setEnabledForExtensions(true);
         serverConfig.setContentLengthOptional(false);
+        serverConfig.setEncoding("ISO-8859-1");
 
     }
 

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java
Patch:
@@ -43,7 +43,7 @@
 
 
 /**
- * ItemProvider implementation which computes *.item file based item configurations.
+ * ItemProvider implementation which computes *.items file based item configurations.
  * 
  * @author Kai Kreuzer 
  * @author Thomas.Eichstaedt-Engelen

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/thermostat/HeatmiserPRT.java
Patch:
@@ -13,7 +13,7 @@
 import org.openhab.core.types.State;
 
 /**
- * Thermostat class for the PRT thermostat (Programable Room Thermostat)
+ * Thermostat class for the PRT thermostat (Programmable Room Thermostat)
  * Most functions are handled by the base class
  * This thermostat does no include hot water, so these functions are overridden
  * and disabled
@@ -35,7 +35,7 @@ public boolean setData(byte in[]) {
 		dcbRoomTemperature = getTemp(41);
 		dcbSetTemperature = data[27];
 		dcbFloorTemperature = getTemp(39);
-		dcbHolidayTime = data[33] * 256 + data[34];
+		dcbHolidayTime = (data[34] & 0xFF) + ((data[33] & 0xFF) * 256);
 		dcbHoldTime = data[35] * 256 + data[36];
 
 		return true;

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/thermostat/HeatmiserPRTHW.java
Patch:
@@ -33,9 +33,9 @@ public boolean setData(byte in[]) {
 		dcbRoomTemperature = getTemp(41);
 		dcbSetTemperature = data[27];
 
-		dcbHolidayTime = data[33] * 256 + data[34];
-		dcbHoldTime = data[35] * 256 + data[36];
-		
+		dcbHolidayTime = (data[34] & 0xFF) + ((data[33] & 0xFF) * 256);
+		dcbHoldTime = (data[36] & 0xFF) + ((data[35] & 0xFF) * 256);
+
 		dcbWaterState = data[45];
 
 		return true;

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/thermostat/HeatmiserThermostat.java
Patch:
@@ -243,7 +243,7 @@ public byte[] setRoomTemperature(Command command) {
 	public byte[] setFrostTemperature(Command command) {
 		byte[] cmdByte = new byte[1];
 
-		byte temperature = Byte.parseByte(command.toString());
+		byte temperature = ((DecimalType) command).byteValue();
 		if (temperature < 5)
 			temperature = 5;
 		if (temperature > 18)

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/bus/HomematicBinding.java
Patch:
@@ -87,7 +87,6 @@ public class HomematicBinding extends AbstractBinding<HomematicBindingProvider>
     private ConverterFactory converterFactory = new ConverterFactory();
 
     private CCU<?> ccu;
-    protected EventPublisher eventPublisher = null;
     private Integer callbackPort;
     private String ccuHost;
     private String callbackHost;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/device/HMDeviceFactory.java
Patch:
@@ -34,7 +34,7 @@ public static HMRFDevice createRFDevice(CCURF ccu, String address) {
         try {
             return new DefaultHMRFDevice(ccu, address);
         } catch (RuntimeException e) {
-            logger.trace("Could not create Device with address " + address, e);
+            logger.error("Could not create Device with address " + address, e);
             return null;
         }
     }

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/xmlrpc/XmlRpcConnectionRF.java
Patch:
@@ -46,14 +46,15 @@ public XmlRpcConnectionRF(String address) {
         }
 
         logger.debug("Connecting to " + url);
-
         XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();
         config.setServerURL(url);
         config.setConnectionTimeout(3000);
         config.setReplyTimeout(3000);
+        config.setEncoding("ISO-8859-1");
 
         xmlRpcClient = new XmlRpcClient();
         xmlRpcClient.setConfig(config);
+        xmlRpcClient.setTransportFactory(new SameEncodingXmlRpcSun15HttpTransportFactory(xmlRpcClient));
     }
 
     @Override

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveThermostatSetpointCommandClass.java
Patch:
@@ -284,7 +284,7 @@ public enum SetpointType
 		MOIST_AIR(9,"Moist Air"),
 		AUTO_CHANGEOVER(10,"Auto Changeover"),
 		HEATING_ECON(11,"Heating Economical"),
-		COOLING_ECON(12, "Cooling Econmical"),
+		COOLING_ECON(12, "Cooling Economical"),
 		AWAY_HEATING(13, "Away Heating");
 
 		/**

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/config/ZWaveConfiguration.java
Patch:
@@ -412,7 +412,7 @@ public void doSet(String domain, String value) {
 					node.setName(value);
 				if(splitDomain[2].equals("Location"))
 					node.setLocation(value);
-			} else if (splitDomain.length == 4) {
+			} else if (splitDomain.length == 5) {
 				if (splitDomain[2].equals("parameters")) {
 					int paramIndex = Integer.parseInt(splitDomain[3].substring(10));
 					List<ZWaveDbConfigurationParameter> configList = database.getProductConfigParameters();
@@ -429,8 +429,8 @@ public void doSet(String domain, String value) {
 					node.configParameterSet(paramIndex, Integer.parseInt(value), size);
 				}
 				if (splitDomain[2].equals("associations")) {
-					int assocId = Integer.parseInt(splitDomain[3].substring(12));
-					int assocArg = Integer.parseInt(splitDomain[4].substring(12));
+					int assocId = Integer.parseInt(splitDomain[3].substring(11));
+					int assocArg = Integer.parseInt(splitDomain[4].substring(4));
 
 					if (value.equalsIgnoreCase("true"))
 						node.configAssociationAdd(assocId, assocArg);

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/DigitalSensorImpl.java
Patch:
@@ -698,7 +698,7 @@ public void interrupt(char port, short interruptMask, short valueMask) {
 			logger.debug(
 					"{} interruptListner DigitalSensor called interrupt mask {}, valuemask {}",
 					LoggerConstants.TFMODELUPDATE, interruptMask, valueMask);
-			if ((interruptMask & mask) == mask) {
+			if (port == getPort() && (interruptMask & mask) == mask) {
 				logger.debug("{} interruptListner DigitalSensor updating",
 						LoggerConstants.TFMODELUPDATE);
 				setSensorValue(extractValue(valueMask));

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MBrickletIO16Impl.java
Patch:
@@ -749,8 +749,8 @@ public void enable() {
 			logger.debug("{} BrickletIO16 setting debouncePeriod to {}", LoggerConstants.TFINIT,
 					getDebouncePeriod());
 			tinkerforgeDevice.setDebouncePeriod(getDebouncePeriod());
-			tinkerforgeDevice.setPortInterrupt('a', (short) 129);
-			tinkerforgeDevice.setPortInterrupt('b', (short) 129);
+			tinkerforgeDevice.setPortInterrupt('a', (short) 255);
+			tinkerforgeDevice.setPortInterrupt('b', (short) 255);
 		} catch (TimeoutException e) {
 			TinkerforgeErrorHandler.handleError(this,
 					TinkerforgeErrorHandler.TF_TIMEOUT_EXCEPTION, e);

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirBinding.java
Patch:
@@ -137,7 +137,7 @@ public void execute() {
 	 * @param command
 	 */
 	private void sendCommand(ComfoAirCommand command) {
-
+		
 		int[] response = connector.sendCommand(command);
 
 		if (response == null) {
@@ -181,8 +181,6 @@ public void updated(Dictionary config) throws ConfigurationException {
 					refreshInterval = Long.parseLong(refreshIntervalString);
 				}
 
-				setProperlyConfigured(true);
-
 				if (connector != null) {
 					connector.close();
 				}
@@ -193,6 +191,8 @@ public void updated(Dictionary config) throws ConfigurationException {
 				} catch (InitializationException e) {
 					logger.error(e.getMessage());
 				}
+
+				setProperlyConfigured(true);
 			}
 		}
 	}

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/internal/CupsBinding.java
Patch:
@@ -173,6 +173,9 @@ public void updated(Dictionary config) throws ConfigurationException {
 				} catch (UnknownHostException e) {
 					throw new ConfigurationException("host", "unknown host '" + host + "'!");
 				}
+			} else {
+				// host should contain an IP address
+				ip = host;
 			}
 
 			String portString = (String) config.get("port");

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/EnoceanBindingProviderMock.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Collection;
 
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.openhab.binding.enocean.EnoceanBindingProvider;
 import org.openhab.binding.enocean.internal.profiles.Profile;
 import org.openhab.core.binding.BindingChangeListener;

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchTest.java
Patch:
@@ -12,8 +12,8 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.RockerSwitch;
 import org.junit.Test;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.core.library.types.OnOffType;
@@ -22,7 +22,7 @@ public class RockerSwitchTest extends BasicBindingTest {
 
     @Test
     public void testReceiveButtonPress() {
-        parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID), RockerSwitch.BUTTON_I);
+        parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID), Parameter.I);
         provider.setParameterAddress(parameterAddress);
         binding.addBindingProvider(provider);
 

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/TemperatureSensorTest.java
Patch:
@@ -14,9 +14,9 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.NumberWithUnit;
 import org.enocean.java.common.values.Unit;
-import org.enocean.java.eep.TemperaturSensor;
 import org.junit.Test;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.types.DecimalType;
@@ -25,8 +25,7 @@ public class TemperatureSensorTest extends BasicBindingTest {
 
     @Test
     public void testReceiveTempertureUpdate() {
-        parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID),
-                TemperaturSensor.PARAMETER_ID);
+        parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID), Parameter.TEMPERATURE);
         provider.setParameterAddress(parameterAddress);
         binding.addBindingProvider(provider);
         provider.setItem(new NumberItem("dummie"));

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/config/EnoceanGenericBindingProviderTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.junit.Test;
 import org.openhab.core.items.GenericItem;
 import org.openhab.core.types.Command;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/EnoceanBindingProvider.java
Patch:
@@ -9,7 +9,7 @@
 package org.openhab.binding.enocean;
 
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.openhab.binding.enocean.internal.profiles.Profile;
 import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.items.Item;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/config/EnoceanGenericBindingProvider.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.openhab.binding.enocean.EnoceanBindingProvider;
 import org.openhab.binding.enocean.internal.profiles.Profile;
 import org.openhab.core.binding.BindingConfig;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/DimmerOnOffProfile.java
Patch:
@@ -8,10 +8,10 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.ButtonState;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.RockerSwitch;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.IncreaseDecreaseType;
@@ -96,11 +96,11 @@ private void startDimmerThread(IncreaseDecreaseType type) {
     }
 
     private boolean buttonDownPressed(ParameterAddress parameterAddress) {
-        return RockerSwitch.BUTTON_I.equals(parameterAddress.getParameterId());
+        return Parameter.I.name().equals(parameterAddress.getParameterId());
     }
 
     private boolean buttonUpPressed(ParameterAddress parameterAddress) {
-        return RockerSwitch.BUTTON_O.equals(parameterAddress.getParameterId());
+        return Parameter.O.name().equals(parameterAddress.getParameterId());
     }
 
     private boolean isLongIButtonReleased() {

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/DimmerProfile.java
Patch:
@@ -8,10 +8,10 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.ButtonState;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.RockerSwitch;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.IncreaseDecreaseType;
@@ -73,11 +73,11 @@ private void startDimmerThread(IncreaseDecreaseType type) {
     }
 
     private boolean buttonDownPressed(ParameterAddress parameterAddress) {
-        return RockerSwitch.BUTTON_I.equals(parameterAddress.getParameterId());
+        return Parameter.I.name().equals(parameterAddress.getParameterId());
     }
 
     private boolean buttonUpPressed(ParameterAddress parameterAddress) {
-        return RockerSwitch.BUTTON_O.equals(parameterAddress.getParameterId());
+        return Parameter.O.name().equals(parameterAddress.getParameterId());
     }
 
     private class DimmerThread extends Thread {

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/DimmerSteppingProfile.java
Patch:
@@ -8,10 +8,10 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.ButtonState;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.RockerSwitch;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.IncreaseDecreaseType;
@@ -96,11 +96,11 @@ private void startDimmerThread(IncreaseDecreaseType type) {
     }
 
     private boolean buttonDownPressed(ParameterAddress parameterAddress) {
-        return RockerSwitch.BUTTON_I.equals(parameterAddress.getParameterId());
+        return Parameter.I.name().equals(parameterAddress.getParameterId());
     }
 
     private boolean buttonUpPressed(ParameterAddress parameterAddress) {
-        return RockerSwitch.BUTTON_O.equals(parameterAddress.getParameterId());
+        return Parameter.O.name().equals(parameterAddress.getParameterId());
     }
 
     private boolean isLongIButtonReleased() {

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/RollershutterProfile.java
Patch:
@@ -8,10 +8,10 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.ButtonState;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.RockerSwitch;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.StopMoveType;
@@ -54,7 +54,7 @@ public RollershutterProfile(Item item, EventPublisher eventPublisher) {
     public void valueChanged(ParameterAddress parameterAddress, Value valueObject) {
         ButtonState buttonState = (ButtonState) valueObject;
         Command command = null;
-        if (RockerSwitch.BUTTON_O.equals(parameterAddress.getParameterId())) {
+        if (Parameter.O.name().equals(parameterAddress.getParameterId())) {
             switch (buttonState) {
             case PRESSED:
                 if (belongsToLastShortButtonPress()) {
@@ -79,7 +79,7 @@ public void valueChanged(ParameterAddress parameterAddress, Value valueObject) {
                 }
                 break;
             }
-        } else if (RockerSwitch.BUTTON_I.equals(parameterAddress.getParameterId())) {
+        } else if (Parameter.I.name().equals(parameterAddress.getParameterId())) {
             switch (buttonState) {
             case PRESSED:
                 if (belongsToLastShortButtonPress()) {

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/bus/HomematicBinding.java
Patch:
@@ -140,9 +140,9 @@ public HomematicBinding() {
 
         converterFactory.addStateConverter(ParameterKey.LOWBAT.name(), OnOffType.class, BooleanOnOffConverter.class);
 
-        DeviceConfigLocator locator = new DeviceConfigLocator("HM-LC-Dim1L-Pl.xml", "HM-LC-BI1PBU-FM.xml", "HM-LC-Bl1-FM.xml",
-                "HM-Sec-SC.xml", "HM-Sec-RHS.xml", "HM-LC-Dim2L-SM.xml", "HM-LC-Dim2L-CV.xml", "HM-LC-Dim1L-CV.xml", "HM-LC-Dim1T-Pl.xml",
-                "HM-LC-Dim1T-CV.xml", "HM-LC-Dim2T-SM.xml", "HM-Sec-SD.xml");
+        DeviceConfigLocator locator = new DeviceConfigLocator("HM-CC-RT-DN.xml", "HM-LC-Dim1L-Pl.xml", "HM-LC-BI1PBU-FM.xml",
+                "HM-LC-Bl1-FM.xml", "HM-LC-Dim2L-SM.xml", "HM-LC-Dim2L-CV.xml", "HM-LC-Dim1L-CV.xml", "HM-LC-Dim1T-Pl.xml",
+                "HM-LC-Dim1T-CV.xml", "HM-LC-Dim2T-SM.xml", "HM-PB-4DIS-WM.xml", "HM-Sec-SD.xml", "HM-Sec-SC.xml", "HM-Sec-RHS.xml");
         List<ConfiguredDevice> configuredDevices = locator.findAll();
         converterFactory.addConfiguredDevices(configuredDevices);
 

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBindingConfig.java
Patch:
@@ -51,10 +51,11 @@ public class MilightBindingConfig extends HashMap<String, String> implements Bin
 	 * <li>Night Mode</li>
 	 * <li>Disco Mode</li>
 	 * <li>Disco Speed</li>
+	 * <li>White Mode</li>
 	 * </ul>
 	 */
 	public enum BindingType {
-		brightness, colorTemperature, rgb, nightMode, discoMode, discoSpeed
+		brightness, colorTemperature, rgb, nightMode, discoMode, discoSpeed, whiteMode
 	}
 
 	/**
@@ -71,7 +72,6 @@ public enum BindingType {
 	 * The binding type of the Mi-Light item.
 	 */
 	private final BindingType commandType;
-	
 
 	/**
 	 * Constructor of the MilightBindingConfig.
@@ -88,6 +88,7 @@ public enum BindingType {
 	 *            <li>Night Mode</li>
 	 *            <li>Disco Mode</li>
 	 *            <li>Disco Speed</li>
+	 *            <li>White Mode</li>
 	 *            </ul>
 	 * @throws BindingConfigParseException
 	 */

File: bundles/binding/org.openhab.binding.rfxcom/src/main/java/org/openhab/binding/rfxcom/internal/messages/RFXComSecurity1Message.java
Patch:
@@ -206,7 +206,7 @@ public byte[] decodeMessage() {
 
 		byte[] data = new byte[9];
 
-		data[0] = 0x09;
+		data[0] = 0x08;
 		data[1] = RFXComBaseMessage.PacketType.SECURITY1.toByte();
 		data[2] = subType.toByte();
 		data[3] = seqNbr;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java
Patch:
@@ -281,7 +281,7 @@ private void handleMultiChannelCapabilityReportResponse(SerialMessage serialMess
 			ZWaveEndpoint endpoint = this.endpoints.get(endpointId);
 			
 			if (endpoint == null){
-				logger.error("Endpoint {} not found on node {}. Cannot set command classes.", endpoint, this.getNode().getNodeId());
+				logger.error("Endpoint {} not found on node {}. Cannot set command classes.", endpointId, this.getNode().getNodeId());
 				continue;
 			}
 	
@@ -377,7 +377,7 @@ private void handleMultiChannelEncapResponse(
 		ZWaveEndpoint endpoint = this.endpoints.get(endpointId);
 		
 		if (endpoint == null){
-			logger.error("Endpoint {} not found on node {}. Cannot set command classes.", endpoint, this.getNode().getNodeId());
+			logger.error("Endpoint {} not found on node {}. Cannot set command classes.", endpointId, this.getNode().getNodeId());
 			return;
 		}
 		

File: bundles/io/org.openhab.io.squeezeserver/src/main/java/org/openhab/io/squeezeserver/SqueezeServer.java
Patch:
@@ -257,6 +257,7 @@ public void updated(Dictionary<String, ?> config)
         playersByMacAddress.clear();
         
 		if (config == null || config.isEmpty()) {
+			logger.warn("Empty or null configuration. Ignoring.");            	
 			return;
 		}
         
@@ -294,6 +295,8 @@ else if (serverConfig.equals("webport")) {
                 
             	playersById.put(playerId, player);
                 playersByMacAddress.put(macAddress, player);
+            } else {
+    			logger.warn("Unexpected or unsupported configuration: " + key + ". Ignoring.");            	
             }
         }
         

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirBinding.java
Patch:
@@ -137,7 +137,7 @@ public void execute() {
 	 * @param command
 	 */
 	private void sendCommand(ComfoAirCommand command) {
-
+		
 		int[] response = connector.sendCommand(command);
 
 		if (response == null) {
@@ -181,8 +181,6 @@ public void updated(Dictionary config) throws ConfigurationException {
 					refreshInterval = Long.parseLong(refreshIntervalString);
 				}
 
-				setProperlyConfigured(true);
-
 				if (connector != null) {
 					connector.close();
 				}
@@ -193,6 +191,8 @@ public void updated(Dictionary config) throws ConfigurationException {
 				} catch (InitializationException e) {
 					logger.error(e.getMessage());
 				}
+
+				setProperlyConfigured(true);
 			}
 		}
 	}

File: bundles/binding/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirBinding.java
Patch:
@@ -137,7 +137,7 @@ public void execute() {
 	 * @param command
 	 */
 	private void sendCommand(ComfoAirCommand command) {
-
+		
 		int[] response = connector.sendCommand(command);
 
 		if (response == null) {
@@ -181,8 +181,6 @@ public void updated(Dictionary config) throws ConfigurationException {
 					refreshInterval = Long.parseLong(refreshIntervalString);
 				}
 
-				setProperlyConfigured(true);
-
 				if (connector != null) {
 					connector.close();
 				}
@@ -193,6 +191,8 @@ public void updated(Dictionary config) throws ConfigurationException {
 				} catch (InitializationException e) {
 					logger.error(e.getMessage());
 				}
+
+				setProperlyConfigured(true);
 			}
 		}
 	}

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/SitemapResource.java
Patch:
@@ -327,7 +327,7 @@ static private WidgetBean createWidgetBean(String sitemapName, Widget widget, bo
 						mappingBean.command = mapping.getCmd().substring(1, mapping.getCmd().length()-1);
 				}
 				else
-    			mappingBean.command = mapping.getCmd();
+					mappingBean.command = mapping.getCmd();
     			mappingBean.label = mapping.getLabel();
     			bean.mappings.add(mappingBean);
     		}

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/AbstractWidgetRenderer.java
Patch:
@@ -108,7 +108,7 @@ public String getLabel(Widget w) {
 		String label = itemUIRegistry.getLabel(w);
 		
 		// insert the span between the left and right side of the label, if state section exists 
-		label = label.replaceAll("\\[", "<span>").replaceAll("\\]", "</span>");
+		label = label.replaceAll("\\[", "<span style=\"%valuestyle%\">").replaceAll("\\]", "</span>");
 
 		return label;
 	}

File: bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpUDPConnector.java
Patch:
@@ -25,6 +25,7 @@
  * 
  * OK:          echo -e "\x5C\x00\x20\x68\x50\x01\xA8\x1F\x01\x00\xA8\x64\x00\xFD\xA7\xD0\x03\x44\x9C\x1E\x00\x4F\x9C\xA0\x00\x50\x9C\x78\x00\x51\x9C\x03\x01\x52\x9C\x1B\x01\x87\x9C\x14\x01\x4E\x9C\xC6\x01\x47\x9C\x01\x01\x15\xB9\xB0\xFF\x3A\xB9\x4B\x00\xC9\xAF\x00\x00\x48\x9C\x0D\x01\x4C\x9C\xE7\x00\x4B\x9C\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\x45" | nc -4u -w1 localhost 9999
  * Special len: echo -e "\x5C\x00\x20\x68\x51\x44\x9C\x25\x00\x48\x9C\xFC\x00\x4C\x9C\xF1\x00\x4E\x9C\xC7\x01\x4D\x9C\x0B\x02\x4F\x9C\x25\x00\x50\x9C\x33\x00\x51\x9C\x0B\x01\x52\x9C\x5C\x5C\x01\x56\x9C\x31\x00\xC9\xAF\x00\x00\x01\xA8\x0C\x01\xFD\xA7\x16\xFA\xFA\xA9\x07\x00\x98\xA9\x1B\x1B\xFF\xFF\x00\x00\xA0\xA9\xCA\x02\xFF\xFF\x00\x00\x9C\xA9\x92\x12\xFF\xFF\x00\x00\xBE" | nc -4u -w1 localhost 9999
+ * Special len: echo -e "\x5C\x00\x20\x68\x52\x44\x9C\x25\x00\x48\x9C\xFE\x00\x4C\x9C\xF2\x00\x4E\x9C\xD4\x01\x4D\x9C\xFB\x01\x4F\x9C\x25\x00\x50\x9C\x37\x00\x51\x9C\x0D\x01\x52\x9C\x5C\x5C\x01\x56\x9C\x32\x00\xC9\xAF\x00\x00\x01\xA8\x0C\x01\xFD\xA7\x12\xFA\xFA\xA9\x07\x00\x98\xA9\x5C\x5C\x1B\xFF\xFF\x00\x00\xA0\xA9\xD1\x02\xFF\xFF\x00\x00\x9C\xA9\xB4\x12\xFF\xFF\x00\x00\x7F" | nc -4u -w1 localhost 9999
  * Special CRC: echo -e "\x5C\x00\x20\x68\x50\x44\x9C\x26\x00\x48\x9C\xF6\x00\x4C\x9C\xF1\x00\x4E\x9C\xD6\x01\x4D\x9C\x0C\x02\x4F\x9C\x45\x00\x50\x9C\x3F\x00\x51\x9C\xF1\x00\x52\x9C\x04\x01\x56\x9C\xD5\x00\xC9\xAF\x00\x00\x01\xA8\x0C\x01\xFD\xA7\x99\xFA\xFA\xA9\x02\x00\x98\xA9\x1A\x1B\xFF\xFF\x00\x00\xA0\xA9\xCA\x02\xFF\xFF\x00\x00\x9C\xA9\x92\x12\xFF\xFF\x00\x00\xC5" | nc -4u -w1 localhost 9999
  * CRC failure: echo -e "\x5C\x00\x20\x68\x50\x01\xA8\x1F\x01\x00\xA8\x64\x00\xFD\xA7\xD0\x03\x44\x9C\x1E\x00\x4F\x9C\xA0\x00\x50\x9C\x78\x00\x51\x9C\x03\x01\x52\x9C\x1B\x01\x87\x9C\x14\x01\x4E\x9C\xC6\x01\x47\x9C\x01\x01\x15\xB9\xB0\xFF\x3A\xB9\x4B\x00\xC9\xAF\x00\x00\x48\x9C\x0D\x01\x4C\x9C\xE7\x00\x4B\x9C\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\x44" | nc -4u -w1 localhost 9999
  *

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/bus/HomematicBinding.java
Patch:
@@ -87,7 +87,6 @@ public class HomematicBinding extends AbstractBinding<HomematicBindingProvider>
     private ConverterFactory converterFactory = new ConverterFactory();
 
     private CCU<?> ccu;
-    protected EventPublisher eventPublisher = null;
     private Integer callbackPort;
     private String ccuHost;
     private String callbackHost;

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/device/HMDeviceFactory.java
Patch:
@@ -34,7 +34,7 @@ public static HMRFDevice createRFDevice(CCURF ccu, String address) {
         try {
             return new DefaultHMRFDevice(ccu, address);
         } catch (RuntimeException e) {
-            logger.trace("Could not create Device with address " + address, e);
+            logger.error("Could not create Device with address " + address, e);
             return null;
         }
     }

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/xmlrpc/XmlRpcConnectionRF.java
Patch:
@@ -49,6 +49,8 @@ public XmlRpcConnectionRF(String address) {
 
         XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();
         config.setServerURL(url);
+        config.setConnectionTimeout(3000);
+        config.setReplyTimeout(3000);
 
         xmlRpcClient = new XmlRpcClient();
         xmlRpcClient.setConfig(config);

File: bundles/binding/org.openhab.binding.nibeheatpump/src/main/java/org/openhab/binding/nibeheatpump/protocol/NibeHeatPumpUDPConnector.java
Patch:
@@ -25,6 +25,7 @@
  * 
  * OK:          echo -e "\x5C\x00\x20\x68\x50\x01\xA8\x1F\x01\x00\xA8\x64\x00\xFD\xA7\xD0\x03\x44\x9C\x1E\x00\x4F\x9C\xA0\x00\x50\x9C\x78\x00\x51\x9C\x03\x01\x52\x9C\x1B\x01\x87\x9C\x14\x01\x4E\x9C\xC6\x01\x47\x9C\x01\x01\x15\xB9\xB0\xFF\x3A\xB9\x4B\x00\xC9\xAF\x00\x00\x48\x9C\x0D\x01\x4C\x9C\xE7\x00\x4B\x9C\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\x45" | nc -4u -w1 localhost 9999
  * Special len: echo -e "\x5C\x00\x20\x68\x51\x44\x9C\x25\x00\x48\x9C\xFC\x00\x4C\x9C\xF1\x00\x4E\x9C\xC7\x01\x4D\x9C\x0B\x02\x4F\x9C\x25\x00\x50\x9C\x33\x00\x51\x9C\x0B\x01\x52\x9C\x5C\x5C\x01\x56\x9C\x31\x00\xC9\xAF\x00\x00\x01\xA8\x0C\x01\xFD\xA7\x16\xFA\xFA\xA9\x07\x00\x98\xA9\x1B\x1B\xFF\xFF\x00\x00\xA0\xA9\xCA\x02\xFF\xFF\x00\x00\x9C\xA9\x92\x12\xFF\xFF\x00\x00\xBE" | nc -4u -w1 localhost 9999
+ * Special len: echo -e "\x5C\x00\x20\x68\x52\x44\x9C\x25\x00\x48\x9C\xFE\x00\x4C\x9C\xF2\x00\x4E\x9C\xD4\x01\x4D\x9C\xFB\x01\x4F\x9C\x25\x00\x50\x9C\x37\x00\x51\x9C\x0D\x01\x52\x9C\x5C\x5C\x01\x56\x9C\x32\x00\xC9\xAF\x00\x00\x01\xA8\x0C\x01\xFD\xA7\x12\xFA\xFA\xA9\x07\x00\x98\xA9\x5C\x5C\x1B\xFF\xFF\x00\x00\xA0\xA9\xD1\x02\xFF\xFF\x00\x00\x9C\xA9\xB4\x12\xFF\xFF\x00\x00\x7F" | nc -4u -w1 localhost 9999
  * Special CRC: echo -e "\x5C\x00\x20\x68\x50\x44\x9C\x26\x00\x48\x9C\xF6\x00\x4C\x9C\xF1\x00\x4E\x9C\xD6\x01\x4D\x9C\x0C\x02\x4F\x9C\x45\x00\x50\x9C\x3F\x00\x51\x9C\xF1\x00\x52\x9C\x04\x01\x56\x9C\xD5\x00\xC9\xAF\x00\x00\x01\xA8\x0C\x01\xFD\xA7\x99\xFA\xFA\xA9\x02\x00\x98\xA9\x1A\x1B\xFF\xFF\x00\x00\xA0\xA9\xCA\x02\xFF\xFF\x00\x00\x9C\xA9\x92\x12\xFF\xFF\x00\x00\xC5" | nc -4u -w1 localhost 9999
  * CRC failure: echo -e "\x5C\x00\x20\x68\x50\x01\xA8\x1F\x01\x00\xA8\x64\x00\xFD\xA7\xD0\x03\x44\x9C\x1E\x00\x4F\x9C\xA0\x00\x50\x9C\x78\x00\x51\x9C\x03\x01\x52\x9C\x1B\x01\x87\x9C\x14\x01\x4E\x9C\xC6\x01\x47\x9C\x01\x01\x15\xB9\xB0\xFF\x3A\xB9\x4B\x00\xC9\xAF\x00\x00\x48\x9C\x0D\x01\x4C\x9C\xE7\x00\x4B\x9C\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\xFF\xFF\x00\x00\x44" | nc -4u -w1 localhost 9999
  *

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java
Patch:
@@ -140,12 +140,12 @@ protected void deactivate() {
 	protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
 		logger.debug("Received incoming chart request: ", req);
 
-		int width = 480;
+		int width = 1024;
 		try {
 			width = Integer.parseInt(req.getParameter("w"));
 		} catch (Exception e) {
 		}
-		int height = 240;
+		int height = 512;
 		try {
 			height = Integer.parseInt(req.getParameter("h"));
 		} catch (Exception e) {

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/DefaultChartProvider.java
Patch:
@@ -151,7 +151,7 @@ public BufferedImage createChart(String service, String theme, Date startTime, D
 				if (item instanceof GroupItem) {
 					GroupItem groupItem = (GroupItem) item;
 					for (Item member : groupItem.getMembers()) {
-						addItem(chart, persistenceService, startTime, endTime, member, seriesCounter);
+						addItem(chart, persistenceService, startTime, endTime, member, seriesCounter++);
 					}
 				} else {
 					throw new ItemNotFoundException("Item '" + item.getName() + "' defined in groups is not a group.");

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/chart/ChartProvider.java
Patch:
@@ -67,7 +67,7 @@ BufferedImage createChart(String service, String theme, Date startTime, Date end
 
 	/**
 	 * Gets the type of data that will be written by the chart. This should be
-	 * 'image/png', or gif etc.
+	 * 'png', or gif etc.
 	 * 
 	 * @return String resource type
 	 */

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/chart/ChartServlet.java
Patch:
@@ -60,7 +60,7 @@ public class ChartServlet extends HttpServlet {
 	private static final Logger logger = LoggerFactory.getLogger(ChartServlet.class);
 
 	// The URI of this servlet
-	public static final String SERVLET_NAME = "/chart.png";
+	public static final String SERVLET_NAME = "/chart";
 
 	protected static final Color[] LINECOLORS = new Color[] { Color.RED, Color.GREEN, Color.BLUE, Color.MAGENTA,
 			Color.ORANGE, Color.CYAN, Color.PINK, Color.DARK_GRAY, Color.YELLOW };
@@ -167,10 +167,10 @@ protected void doGet(HttpServletRequest req, HttpServletResponse res) throws Ser
 			throw new ServletException("Could not get chart provider.");
 
 		// Set the content type to that provided by the chart provider
-		res.setContentType(provider.getChartType());
+		res.setContentType("image/"+provider.getChartType());
 		try {
 			BufferedImage chart = provider.createChart(serviceName, null, timeBegin, timeEnd, height, width, req.getParameter("items"), req.getParameter("groups"));
-			ImageIO.write(chart, "png", res.getOutputStream());
+			ImageIO.write(chart, provider.getChartType(), res.getOutputStream());
 		} catch (ItemNotFoundException e) {
 			logger.debug("Item not found error while generating chart.");
 		} catch (IllegalArgumentException e) {

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/impl/MLCD20x4BacklightImpl.java
Patch:
@@ -159,7 +159,7 @@ public class MLCD20x4BacklightImpl extends MinimalEObjectImpl.Container implemen
    * @generated
    * @ordered
    */
-  protected static final String DEVICE_TYPE_EDEFAULT = "lcd_backlight";
+  protected static final String DEVICE_TYPE_EDEFAULT = "backlight";
 
   /**
    * The cached value of the '{@link #getDeviceType() <em>Device Type</em>}' attribute.

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/EnoceanBindingProviderMock.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Collection;
 
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.openhab.binding.enocean.EnoceanBindingProvider;
 import org.openhab.binding.enocean.internal.profiles.Profile;
 import org.openhab.core.binding.BindingChangeListener;

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchInDimmerOnOffProfileTest.java
Patch:
@@ -13,9 +13,9 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.EEPId;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.Parameter;
-import org.enocean.java.eep.RockerSwitch;
 import org.junit.Before;
 import org.junit.Test;
 import org.openhab.core.library.items.DimmerItem;
@@ -31,7 +31,7 @@ public void setUpDefaultDevice() {
         parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID), CHANNEL, (String) null);
         provider.setParameterAddress(parameterAddress);
         provider.setItem(new DimmerItem("dummie"));
-        provider.setEep(RockerSwitch.EEP_ID_1);
+        provider.setEep(EEPId.EEP_F6_02_01);
         binding.addBindingProvider(provider);
     }
 

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchInDimmerProfileTest.java
Patch:
@@ -13,9 +13,9 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.EEPId;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.Parameter;
-import org.enocean.java.eep.RockerSwitch;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -30,7 +30,7 @@ public void setUpDefaultDevice() {
         parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID));
         provider.setParameterAddress(parameterAddress);
         provider.setItem(new DimmerItem("dummie"));
-        provider.setEep(RockerSwitch.EEP_ID_1);
+        provider.setEep(EEPId.EEP_F6_02_01);
         binding.addBindingProvider(provider);
     }
 

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchInDimmerSteppingProfileTest.java
Patch:
@@ -13,9 +13,9 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.EEPId;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.Parameter;
-import org.enocean.java.eep.RockerSwitch;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -34,7 +34,7 @@ public void setUpDefaultDevice() {
         parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID), CHANNEL);
         provider.setParameterAddress(parameterAddress);
         provider.setItem(new DimmerItem("dummie"));
-        provider.setEep(RockerSwitch.EEP_ID_1);
+        provider.setEep(EEPId.EEP_F6_02_01);
         binding.addBindingProvider(provider);
     }
 

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchInRollershutterProfileTest.java
Patch:
@@ -12,9 +12,9 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.EEPId;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.Parameter;
-import org.enocean.java.eep.RockerSwitch;
 import org.junit.Before;
 import org.junit.Test;
 import org.openhab.core.library.items.RollershutterItem;
@@ -30,7 +30,7 @@ public void setUpDefaultDevice() {
         parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID));
         provider.setParameterAddress(parameterAddress);
         provider.setItem(new RollershutterItem("dummie"));
-        provider.setEep(RockerSwitch.EEP_ID_1);
+        provider.setEep(EEPId.EEP_F6_02_01);
         binding.addBindingProvider(provider);
     }
 

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchInSwitchOnOffProfileTest.java
Patch:
@@ -12,9 +12,9 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.EEPId;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.Parameter;
-import org.enocean.java.eep.RockerSwitch;
 import org.junit.Before;
 import org.junit.Test;
 import org.openhab.core.library.items.SwitchItem;
@@ -29,7 +29,7 @@ public void setUpDefaultDevice() {
         parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID), CHANNEL, (String) null);
         provider.setParameterAddress(parameterAddress);
         provider.setItem(new SwitchItem("dummie"));
-        provider.setEep(RockerSwitch.EEP_ID_1);
+        provider.setEep(EEPId.EEP_F6_02_01);
         binding.addBindingProvider(provider);
     }
 

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchTest.java
Patch:
@@ -12,8 +12,8 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.Parameter;
 import org.junit.Test;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.core.library.types.OnOffType;

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/TemperatureSensorTest.java
Patch:
@@ -14,9 +14,9 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.NumberWithUnit;
 import org.enocean.java.common.values.Unit;
-import org.enocean.java.eep.Parameter;
 import org.junit.Test;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.types.DecimalType;

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/config/EnoceanGenericBindingProviderTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.junit.Test;
 import org.openhab.core.items.GenericItem;
 import org.openhab.core.types.Command;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/EnoceanBindingProvider.java
Patch:
@@ -9,7 +9,7 @@
 package org.openhab.binding.enocean;
 
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.openhab.binding.enocean.internal.profiles.Profile;
 import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.items.Item;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/bus/EnoceanBinding.java
Patch:
@@ -20,12 +20,11 @@
 import org.enocean.java.ESP3Host;
 import org.enocean.java.EnoceanSerialConnector;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.EEPId;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.ParameterValueChangeListener;
 import org.enocean.java.common.ProtocolConnector;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.EEPId;
-import org.enocean.java.eep.RockerSwitch;
 import org.openhab.binding.enocean.EnoceanBindingProvider;
 import org.openhab.binding.enocean.internal.converter.CommandConverter;
 import org.openhab.binding.enocean.internal.converter.ConverterFactory;
@@ -201,7 +200,7 @@ private void processEEPs(EnoceanBindingProvider enoceanBindingProvider, String i
             } catch (Exception e) {
                 logger.error("Could not create class for profile " + customProfileClass, e);
             }
-        } else if (RockerSwitch.EEP_ID_1.equals(eep) || RockerSwitch.EEP_ID_2.equals(eep)) {
+        } else if (EEPId.EEP_F6_02_01.equals(eep) || EEPId.EEP_F6_02_01.equals(eep)) {
             if (item.getClass().equals(RollershutterItem.class)) {
                 RollershutterProfile profile = new RollershutterProfile(item, eventPublisher);
                 addProfile(item, parameterAddress, profile);

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/config/EnoceanGenericBindingProvider.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.openhab.binding.enocean.EnoceanBindingProvider;
 import org.openhab.binding.enocean.internal.profiles.Profile;
 import org.openhab.core.binding.BindingConfig;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/DimmerOnOffProfile.java
Patch:
@@ -8,10 +8,10 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.ButtonState;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.Parameter;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.IncreaseDecreaseType;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/DimmerProfile.java
Patch:
@@ -8,10 +8,10 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.ButtonState;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.Parameter;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.IncreaseDecreaseType;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/DimmerSteppingProfile.java
Patch:
@@ -8,10 +8,10 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.ButtonState;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.Parameter;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.IncreaseDecreaseType;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/RollershutterProfile.java
Patch:
@@ -8,10 +8,10 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.ButtonState;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.Parameter;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.StopMoveType;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/StandardProfile.java
Patch:
@@ -8,9 +8,9 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.Parameter;
 import org.openhab.binding.enocean.internal.converter.ButtonStateConverter;
 import org.openhab.binding.enocean.internal.converter.ContactStateConverter;
 import org.openhab.binding.enocean.internal.converter.ConverterFactory;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/SwitchOnOffProfile.java
Patch:
@@ -8,9 +8,9 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.Parameter;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.OnOffType;

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/EnoceanBindingProviderMock.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Collection;
 
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.openhab.binding.enocean.EnoceanBindingProvider;
 import org.openhab.binding.enocean.internal.profiles.Profile;
 import org.openhab.core.binding.BindingChangeListener;

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchInDimmerOnOffProfileTest.java
Patch:
@@ -13,9 +13,9 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.EEPId;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.Parameter;
-import org.enocean.java.eep.RockerSwitch;
 import org.junit.Before;
 import org.junit.Test;
 import org.openhab.core.library.items.DimmerItem;
@@ -31,7 +31,7 @@ public void setUpDefaultDevice() {
         parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID), CHANNEL, (String) null);
         provider.setParameterAddress(parameterAddress);
         provider.setItem(new DimmerItem("dummie"));
-        provider.setEep(RockerSwitch.EEP_ID_1);
+        provider.setEep(EEPId.EEP_F6_02_01);
         binding.addBindingProvider(provider);
     }
 

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchInDimmerProfileTest.java
Patch:
@@ -13,9 +13,9 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.EEPId;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.Parameter;
-import org.enocean.java.eep.RockerSwitch;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -30,7 +30,7 @@ public void setUpDefaultDevice() {
         parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID));
         provider.setParameterAddress(parameterAddress);
         provider.setItem(new DimmerItem("dummie"));
-        provider.setEep(RockerSwitch.EEP_ID_1);
+        provider.setEep(EEPId.EEP_F6_02_01);
         binding.addBindingProvider(provider);
     }
 

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchInDimmerSteppingProfileTest.java
Patch:
@@ -13,9 +13,9 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.EEPId;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.Parameter;
-import org.enocean.java.eep.RockerSwitch;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -34,7 +34,7 @@ public void setUpDefaultDevice() {
         parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID), CHANNEL);
         provider.setParameterAddress(parameterAddress);
         provider.setItem(new DimmerItem("dummie"));
-        provider.setEep(RockerSwitch.EEP_ID_1);
+        provider.setEep(EEPId.EEP_F6_02_01);
         binding.addBindingProvider(provider);
     }
 

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchInRollershutterProfileTest.java
Patch:
@@ -12,9 +12,9 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.EEPId;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.Parameter;
-import org.enocean.java.eep.RockerSwitch;
 import org.junit.Before;
 import org.junit.Test;
 import org.openhab.core.library.items.RollershutterItem;
@@ -30,7 +30,7 @@ public void setUpDefaultDevice() {
         parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID));
         provider.setParameterAddress(parameterAddress);
         provider.setItem(new RollershutterItem("dummie"));
-        provider.setEep(RockerSwitch.EEP_ID_1);
+        provider.setEep(EEPId.EEP_F6_02_01);
         binding.addBindingProvider(provider);
     }
 

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchInSwitchOnOffProfileTest.java
Patch:
@@ -12,9 +12,9 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.EEPId;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.Parameter;
-import org.enocean.java.eep.RockerSwitch;
 import org.junit.Before;
 import org.junit.Test;
 import org.openhab.core.library.items.SwitchItem;
@@ -29,7 +29,7 @@ public void setUpDefaultDevice() {
         parameterAddress = new EnoceanParameterAddress(EnoceanId.fromString(EnoceanBindingProviderMock.DEVICE_ID), CHANNEL, (String) null);
         provider.setParameterAddress(parameterAddress);
         provider.setItem(new SwitchItem("dummie"));
-        provider.setEep(RockerSwitch.EEP_ID_1);
+        provider.setEep(EEPId.EEP_F6_02_01);
         binding.addBindingProvider(provider);
     }
 

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/RockerSwitchTest.java
Patch:
@@ -12,8 +12,8 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.ButtonState;
-import org.enocean.java.eep.Parameter;
 import org.junit.Test;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.core.library.types.OnOffType;

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/bus/TemperatureSensorTest.java
Patch:
@@ -14,9 +14,9 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.values.NumberWithUnit;
 import org.enocean.java.common.values.Unit;
-import org.enocean.java.eep.Parameter;
 import org.junit.Test;
 import org.openhab.core.library.items.NumberItem;
 import org.openhab.core.library.types.DecimalType;

File: bundles/binding/org.openhab.binding.enocean.test/src/test/java/org/openhab/binding/enocean/internal/config/EnoceanGenericBindingProviderTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.junit.Test;
 import org.openhab.core.items.GenericItem;
 import org.openhab.core.types.Command;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/EnoceanBindingProvider.java
Patch:
@@ -9,7 +9,7 @@
 package org.openhab.binding.enocean;
 
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.openhab.binding.enocean.internal.profiles.Profile;
 import org.openhab.core.binding.BindingProvider;
 import org.openhab.core.items.Item;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/bus/EnoceanBinding.java
Patch:
@@ -20,12 +20,11 @@
 import org.enocean.java.ESP3Host;
 import org.enocean.java.EnoceanSerialConnector;
 import org.enocean.java.address.EnoceanParameterAddress;
+import org.enocean.java.common.EEPId;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.ParameterValueChangeListener;
 import org.enocean.java.common.ProtocolConnector;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.EEPId;
-import org.enocean.java.eep.RockerSwitch;
 import org.openhab.binding.enocean.EnoceanBindingProvider;
 import org.openhab.binding.enocean.internal.converter.CommandConverter;
 import org.openhab.binding.enocean.internal.converter.ConverterFactory;
@@ -201,7 +200,7 @@ private void processEEPs(EnoceanBindingProvider enoceanBindingProvider, String i
             } catch (Exception e) {
                 logger.error("Could not create class for profile " + customProfileClass, e);
             }
-        } else if (RockerSwitch.EEP_ID_1.equals(eep) || RockerSwitch.EEP_ID_2.equals(eep)) {
+        } else if (EEPId.EEP_F6_02_01.equals(eep) || EEPId.EEP_F6_02_01.equals(eep)) {
             if (item.getClass().equals(RollershutterItem.class)) {
                 RollershutterProfile profile = new RollershutterProfile(item, eventPublisher);
                 addProfile(item, parameterAddress, profile);

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/config/EnoceanGenericBindingProvider.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.enocean.java.address.EnoceanId;
 import org.enocean.java.address.EnoceanParameterAddress;
-import org.enocean.java.eep.EEPId;
+import org.enocean.java.common.EEPId;
 import org.openhab.binding.enocean.EnoceanBindingProvider;
 import org.openhab.binding.enocean.internal.profiles.Profile;
 import org.openhab.core.binding.BindingConfig;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/DimmerOnOffProfile.java
Patch:
@@ -8,10 +8,10 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.ButtonState;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.Parameter;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.IncreaseDecreaseType;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/DimmerProfile.java
Patch:
@@ -8,10 +8,10 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.ButtonState;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.Parameter;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.IncreaseDecreaseType;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/DimmerSteppingProfile.java
Patch:
@@ -8,10 +8,10 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.ButtonState;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.Parameter;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.IncreaseDecreaseType;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/RollershutterProfile.java
Patch:
@@ -8,10 +8,10 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.ButtonState;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.Parameter;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.StopMoveType;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/StandardProfile.java
Patch:
@@ -8,9 +8,9 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.Parameter;
 import org.openhab.binding.enocean.internal.converter.ButtonStateConverter;
 import org.openhab.binding.enocean.internal.converter.ContactStateConverter;
 import org.openhab.binding.enocean.internal.converter.ConverterFactory;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/SwitchOnOffProfile.java
Patch:
@@ -8,9 +8,9 @@
  */
 package org.openhab.binding.enocean.internal.profiles;
 
+import org.enocean.java.common.Parameter;
 import org.enocean.java.common.ParameterAddress;
 import org.enocean.java.common.values.Value;
-import org.enocean.java.eep.Parameter;
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.library.types.OnOffType;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java
Patch:
@@ -281,7 +281,7 @@ private void handleMultiChannelCapabilityReportResponse(SerialMessage serialMess
 			ZWaveEndpoint endpoint = this.endpoints.get(endpointId);
 			
 			if (endpoint == null){
-				logger.error("Endpoint {} not found on node {}. Cannot set command classes.", endpoint, this.getNode().getNodeId());
+				logger.error("Endpoint {} not found on node {}. Cannot set command classes.", endpointId, this.getNode().getNodeId());
 				continue;
 			}
 	
@@ -377,7 +377,7 @@ private void handleMultiChannelEncapResponse(
 		ZWaveEndpoint endpoint = this.endpoints.get(endpointId);
 		
 		if (endpoint == null){
-			logger.error("Endpoint {} not found on node {}. Cannot set command classes.", endpoint, this.getNode().getNodeId());
+			logger.error("Endpoint {} not found on node {}. Cannot set command classes.", endpointId, this.getNode().getNodeId());
 			return;
 		}
 		

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveMultiInstanceCommandClass.java
Patch:
@@ -281,7 +281,7 @@ private void handleMultiChannelCapabilityReportResponse(SerialMessage serialMess
 			ZWaveEndpoint endpoint = this.endpoints.get(endpointId);
 			
 			if (endpoint == null){
-				logger.error("Endpoint {} not found on node {}. Cannot set command classes.", endpoint, this.getNode().getNodeId());
+				logger.error("Endpoint {} not found on node {}. Cannot set command classes.", endpointId, this.getNode().getNodeId());
 				continue;
 			}
 	
@@ -377,7 +377,7 @@ private void handleMultiChannelEncapResponse(
 		ZWaveEndpoint endpoint = this.endpoints.get(endpointId);
 		
 		if (endpoint == null){
-			logger.error("Endpoint {} not found on node {}. Cannot set command classes.", endpoint, this.getNode().getNodeId());
+			logger.error("Endpoint {} not found on node {}. Cannot set command classes.", endpointId, this.getNode().getNodeId());
 			return;
 		}
 		

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/thermostat/HeatmiserPRT.java
Patch:
@@ -45,6 +45,8 @@ public boolean setData(byte in[]) {
 		dcbRoomTemperature = getTemp(41);
 		dcbSetTemperature = data[27];
 		dcbFloorTemperature = getTemp(39);
+		dcbHolidayTime = data[35] * 256 + data[36];
+		dcbHoldTime = data[33] * 256 + data[34];
 
 		return true;
 	}

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/thermostat/HeatmiserPRTHW.java
Patch:
@@ -70,8 +70,7 @@ public byte[] formatCommand(Functions function, Command command) {
 			return setWaterState(command);
 		default:
 			// Default to calling the parent class.
-			super.formatCommand(function, command);
-			return null;
+			return super.formatCommand(function, command);
 		}
 	}
 }

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/internal/CupsBinding.java
Patch:
@@ -173,6 +173,9 @@ public void updated(Dictionary config) throws ConfigurationException {
 				} catch (UnknownHostException e) {
 					throw new ConfigurationException("host", "unknown host '" + host + "'!");
 				}
+			} else {
+				// host should contain an IP address
+				ip = host;
 			}
 
 			String portString = (String) config.get("port");

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeGenericBindingProvider.java
Patch:
@@ -49,8 +49,6 @@ public String getBindingType() {
 	 */
 	@Override
 	public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-		// TODO: Check if DimmerType support makes sense at all as it does not
-		// support DecimalTypes for setpoint temperatures
 		if (!(item instanceof NumberItem || item instanceof DimmerItem || item instanceof ContactItem)) {
 			throw new BindingConfigParseException("item '" + item.getName() + "' is of type '" + item.getClass().getSimpleName()
 					+ "', only Numbers, Dimmer- and ContactItems are allowed - please check your *.items configuration");

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/DeviceType.java
Patch:
@@ -15,9 +15,8 @@
 * @since 1.4.0
 */
 public enum DeviceType {
-	// TODO: Plug Adapter device id not known yet
 	Invalid(256), HeatingThermostat(1), HeatingThermostatPlus(2), WallMountedThermostat(
-			3), ShutterContact(4), PushButton(5) , PlugAdapter(-1);
+			3), ShutterContact(4), PushButton(5) ,;
 
 	private int value;
 

File: bundles/binding/org.openhab.binding.milight/src/main/java/org/openhab/binding/milight/internal/MilightBindingConfig.java
Patch:
@@ -51,10 +51,11 @@ public class MilightBindingConfig extends HashMap<String, String> implements Bin
 	 * <li>Night Mode</li>
 	 * <li>Disco Mode</li>
 	 * <li>Disco Speed</li>
+	 * <li>White Mode</li>
 	 * </ul>
 	 */
 	public enum BindingType {
-		brightness, colorTemperature, rgb, nightMode, discoMode, discoSpeed
+		brightness, colorTemperature, rgb, nightMode, discoMode, discoSpeed, whiteMode
 	}
 
 	/**
@@ -71,7 +72,6 @@ public enum BindingType {
 	 * The binding type of the Mi-Light item.
 	 */
 	private final BindingType commandType;
-	
 
 	/**
 	 * Constructor of the MilightBindingConfig.
@@ -88,6 +88,7 @@ public enum BindingType {
 	 *            <li>Night Mode</li>
 	 *            <li>Disco Mode</li>
 	 *            <li>Disco Speed</li>
+	 *            <li>White Mode</li>
 	 *            </ul>
 	 * @throws BindingConfigParseException
 	 */

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/SqueezeboxActionService.java
Patch:
@@ -32,12 +32,10 @@ public void deactivate() {
 		logger.debug("Squeezebox action service deactivated");
 	}
 	
-	@Override
 	public String getActionClassName() {
 		return Squeezebox.class.getCanonicalName();
 	}
 
-	@Override
 	public Class<?> getActionClass() {
 		return Squeezebox.class;
 	}

File: bundles/io/org.openhab.io.squeezeserver/src/main/java/org/openhab/io/squeezeserver/BaseSqueezePlayerEventListener.java
Patch:
@@ -53,13 +53,13 @@ public void artistChangeEvent(PlayerEvent event,
 	}
 
 	@Override
-	public void artChangeEvent(PlayerEvent event,
+	public void coverArtChangeEvent(PlayerEvent event,
 			String playerId, String art) {
 	}
 
 	@Override
 	public void yearChangeEvent(PlayerEvent event,
-			String playerId, String year) {
+			String playerId, int year) {
 	}
 
 	@Override

File: bundles/io/org.openhab.io.squeezeserver/src/main/java/org/openhab/io/squeezeserver/SqueezePlayerEventListener.java
Patch:
@@ -26,8 +26,8 @@ public interface SqueezePlayerEventListener {
 	 void titleChangeEvent(PlayerEvent event, String playerId, String title);
 	 void albumChangeEvent(PlayerEvent event, String playerId, String album);	 
 	 void artistChangeEvent(PlayerEvent event, String playerId, String artist);	 
-	 void artChangeEvent(PlayerEvent event, String playerId, String art);		 
-	 void yearChangeEvent(PlayerEvent event, String playerId, String year);
+	 void coverArtChangeEvent(PlayerEvent event, String playerId, String art);		 
+	 void yearChangeEvent(PlayerEvent event, String playerId, int year);
 	 void genreChangeEvent(PlayerEvent event, String playerId, String genre);
 	 void remoteTitleChangeEvent(PlayerEvent event, String playerId, String title);
      

File: bundles/action/org.openhab.action.squeezebox/src/main/java/org/openhab/action/squeezebox/internal/SqueezeboxActionService.java
Patch:
@@ -32,12 +32,10 @@ public void deactivate() {
 		logger.debug("Squeezebox action service deactivated");
 	}
 	
-	@Override
 	public String getActionClassName() {
 		return Squeezebox.class.getCanonicalName();
 	}
 
-	@Override
 	public Class<?> getActionClass() {
 		return Squeezebox.class;
 	}

File: bundles/io/org.openhab.io.squeezeserver/src/main/java/org/openhab/io/squeezeserver/BaseSqueezePlayerEventListener.java
Patch:
@@ -53,13 +53,13 @@ public void artistChangeEvent(PlayerEvent event,
 	}
 
 	@Override
-	public void artChangeEvent(PlayerEvent event,
+	public void coverArtChangeEvent(PlayerEvent event,
 			String playerId, String art) {
 	}
 
 	@Override
 	public void yearChangeEvent(PlayerEvent event,
-			String playerId, String year) {
+			String playerId, int year) {
 	}
 
 	@Override

File: bundles/io/org.openhab.io.squeezeserver/src/main/java/org/openhab/io/squeezeserver/SqueezePlayerEventListener.java
Patch:
@@ -26,8 +26,8 @@ public interface SqueezePlayerEventListener {
 	 void titleChangeEvent(PlayerEvent event, String playerId, String title);
 	 void albumChangeEvent(PlayerEvent event, String playerId, String album);	 
 	 void artistChangeEvent(PlayerEvent event, String playerId, String artist);	 
-	 void artChangeEvent(PlayerEvent event, String playerId, String art);		 
-	 void yearChangeEvent(PlayerEvent event, String playerId, String year);
+	 void coverArtChangeEvent(PlayerEvent event, String playerId, String art);		 
+	 void yearChangeEvent(PlayerEvent event, String playerId, int year);
 	 void genreChangeEvent(PlayerEvent event, String playerId, String genre);
 	 void remoteTitleChangeEvent(PlayerEvent event, String playerId, String title);
      

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpBinding.java
Patch:
@@ -333,9 +333,9 @@ private HttpBindingProvider findFirstMatchingBindingProvider(String itemName, Co
 	 * @return true if a valid HTTP request, false otherwise
 	 */
 	private boolean isValidUrl(String url) {
-		if (StringUtils.startsWith(url, "http://"))
+		if (StringUtils.startsWithIgnoreCase(url, "http://"))
 			return true;
-		if (StringUtils.startsWith(url, "https://"))
+		if (StringUtils.startsWithIgnoreCase(url, "https://"))
 			return true;
 		
 		return false;

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBarometerTemperature.java
Patch:
@@ -45,10 +45,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBarometerTemperature()
- * @model
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MSensor<org.eclipse.emf.ecore.EDoubleObject> org.openhab.binding.tinkerforge.internal.model.MSubDevice<org.openhab.binding.tinkerforge.internal.model.MBrickletBarometer>"
  * @generated
  */
-public interface MBarometerTemperature extends MSensor, MSubDevice<MBrickletBarometer>
+public interface MBarometerTemperature extends MSensor<Double>, MSubDevice<MBrickletBarometer>
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletAmbientLight.java
Patch:
@@ -47,10 +47,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletAmbientLight()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletAmbientLight> org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletAmbientLight> org.openhab.binding.tinkerforge.internal.model.MSensor<org.eclipse.emf.ecore.EDoubleObject> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletAmbientLight extends MDevice<BrickletAmbientLight>, MSensor, MTFConfigConsumer<TFBaseConfiguration>
+public interface MBrickletAmbientLight extends MDevice<BrickletAmbientLight>, MSensor<Double>, MTFConfigConsumer<TFBaseConfiguration>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletBarometer.java
Patch:
@@ -47,10 +47,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletBarometer()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletBarometer> org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.MSubDeviceHolder<org.openhab.binding.tinkerforge.internal.model.MBarometerTemperature>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletBarometer> org.openhab.binding.tinkerforge.internal.model.MSensor<org.eclipse.emf.ecore.EDoubleObject> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.MSubDeviceHolder<org.openhab.binding.tinkerforge.internal.model.MBarometerTemperature> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletBarometer extends MDevice<BrickletBarometer>, MSensor, MTFConfigConsumer<TFBaseConfiguration>, MSubDeviceHolder<MBarometerTemperature>
+public interface MBrickletBarometer extends MDevice<BrickletBarometer>, MSensor<Double>, MTFConfigConsumer<TFBaseConfiguration>, MSubDeviceHolder<MBarometerTemperature>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletDistanceIR.java
Patch:
@@ -20,10 +20,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletDistanceIR()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletDistanceIR> org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletDistanceIR> org.openhab.binding.tinkerforge.internal.model.MSensor<org.eclipse.emf.ecore.EDoubleObject> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletDistanceIR extends MDevice<BrickletDistanceIR>, MSensor, MTFConfigConsumer<TFBaseConfiguration>
+public interface MBrickletDistanceIR extends MDevice<BrickletDistanceIR>, MSensor<Double>, MTFConfigConsumer<TFBaseConfiguration>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletHumidity.java
Patch:
@@ -20,10 +20,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletHumidity()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletHumidity> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MSensor<org.eclipse.emf.ecore.EDoubleObject> org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletHumidity> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletHumidity extends MSensor, MDevice<BrickletHumidity>, MTFConfigConsumer<TFBaseConfiguration>
+public interface MBrickletHumidity extends MSensor<Double>, MDevice<BrickletHumidity>, MTFConfigConsumer<TFBaseConfiguration>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.tinkerforge/src/main/java/org/openhab/binding/tinkerforge/internal/model/MBrickletTemperature.java
Patch:
@@ -20,10 +20,10 @@
  * </p>
  *
  * @see org.openhab.binding.tinkerforge.internal.model.ModelPackage#getMBrickletTemperature()
- * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletTemperature> org.openhab.binding.tinkerforge.internal.model.MSensor org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration>"
+ * @model superTypes="org.openhab.binding.tinkerforge.internal.model.MDevice<org.openhab.binding.tinkerforge.internal.model.MTinkerBrickletTemperature> org.openhab.binding.tinkerforge.internal.model.MSensor<org.eclipse.emf.ecore.EDoubleObject> org.openhab.binding.tinkerforge.internal.model.MTFConfigConsumer<org.openhab.binding.tinkerforge.internal.model.TFBaseConfiguration> org.openhab.binding.tinkerforge.internal.model.CallbackListener"
  * @generated
  */
-public interface MBrickletTemperature extends MDevice<BrickletTemperature>, MSensor, MTFConfigConsumer<TFBaseConfiguration>
+public interface MBrickletTemperature extends MDevice<BrickletTemperature>, MSensor<Double>, MTFConfigConsumer<TFBaseConfiguration>, CallbackListener
 {
   /**
    * Returns the value of the '<em><b>Device Type</b></em>' attribute.

File: bundles/binding/org.openhab.binding.swegonventilation/src/main/java/org/openhab/binding/swegonventilation/protocol/SwegonVentilationUDPConnector.java
Patch:
@@ -74,7 +74,7 @@ public void connect() throws SwegonVentilationException {
 	@Override
 	public void disconnect() throws SwegonVentilationException {
 
-		if (socket == null) {
+		if (socket != null) {
 			socket.close();
 			socket = null;
 		}

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/internal/CupsBinding.java
Patch:
@@ -173,6 +173,9 @@ public void updated(Dictionary config) throws ConfigurationException {
 				} catch (UnknownHostException e) {
 					throw new ConfigurationException("host", "unknown host '" + host + "'!");
 				}
+			} else {
+				// host should contain an IP address
+				ip = host;
 			}
 
 			String portString = (String) config.get("port");

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/PlugwiseDevice.java
Patch:
@@ -84,7 +84,7 @@ public int compareTo(Object arg0) {
 	 */
 	public boolean processMessage(Message message) {
 		if(message!=null) {
-			logger.debug("Received unrecognized Plugwise protocol data unit: MAC:{} command:{} sequence:{} payload:{}", new String[] { message.getMAC(),message.getType().toString(), Integer.toString(message.getSequenceNumber()), message.getPayLoad()});
+			logger.debug("Received unrecognized Plugwise protocol data unit: MAC:{} command:{} sequence:{} payload:{}", new Object[] { message.getMAC(),message.getType().toString(), Integer.toString(message.getSequenceNumber()), message.getPayLoad()});
 			return true;	
 		} else {
 			return false;
@@ -104,7 +104,7 @@ public boolean processMessage(Message message) {
 	 */
 	public boolean postUpdate(String MAC, PlugwiseCommandType type, Object value) {
 		if(MAC != null && type != null && value != null) {
-			logger.debug("Passing on an update to the openHAB bus: MAC: {} Type:{} value:{}", new String[] { MAC,type.toString(), value.toString()});
+			logger.debug("Passing on an update to the openHAB bus: MAC: {} Type:{} value:{}", new Object[] { MAC,type.toString(), value.toString()});
 			return true;
 		} else {
 			return false;

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/PlugwiseDevice.java
Patch:
@@ -84,7 +84,7 @@ public int compareTo(Object arg0) {
 	 */
 	public boolean processMessage(Message message) {
 		if(message!=null) {
-			logger.debug("Received unrecognized Plugwise protocol data unit: MAC:{} command:{} sequence:{} payload:{}", new String[] { message.getMAC(),message.getType().toString(), Integer.toString(message.getSequenceNumber()), message.getPayLoad()});
+			logger.debug("Received unrecognized Plugwise protocol data unit: MAC:{} command:{} sequence:{} payload:{}", new Object[] { message.getMAC(),message.getType().toString(), Integer.toString(message.getSequenceNumber()), message.getPayLoad()});
 			return true;	
 		} else {
 			return false;
@@ -104,7 +104,7 @@ public boolean processMessage(Message message) {
 	 */
 	public boolean postUpdate(String MAC, PlugwiseCommandType type, Object value) {
 		if(MAC != null && type != null && value != null) {
-			logger.debug("Passing on an update to the openHAB bus: MAC: {} Type:{} value:{}", new String[] { MAC,type.toString(), value.toString()});
+			logger.debug("Passing on an update to the openHAB bus: MAC: {} Type:{} value:{}", new Object[] { MAC,type.toString(), value.toString()});
 			return true;
 		} else {
 			return false;

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/MaxCubeGenericBindingProvider.java
Patch:
@@ -46,7 +46,7 @@
  * 
  * <p>
  * Example for a valid binding configuration strings:
- * <code>{ maxcube="JEQ0304492" }</code> - returns the corrseponding value of the default attribute based on the MAX device type
+ * <code>{ maxcube="JEQ0304492" }</code> - returns the corresponding value of the default attribute based on the MAX device type
  * 
  * @author Andreas Heil
  * 

File: bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/CULManager.java
Patch:
@@ -119,11 +119,14 @@ private static CULHandler createNewHandler(String deviceName, CULMode mode) thro
 			CULHandler culHandler = culHanlderConstructor.newInstance(parameters);
 			List<String> initCommands = mode.getCommands();
 			if (!(culHandler instanceof CULHandlerInternal)) {
+				logger.error("Class " + culHandlerclass.getCanonicalName()
+						+ " does not implement the internal interface");
 				throw new CULDeviceException("This CULHandler class does not implement the internal interface: "
 						+ culHandlerclass.getCanonicalName());
 			}
 			CULHandlerInternal internalHandler = (CULHandlerInternal) culHandler;
 			internalHandler.open();
+			logger.debug("Setting rf of CUL device with " + initCommands.size() + " commands");
 			for (String command : initCommands) {
 				internalHandler.sendWithoutCheck(command);
 			}

File: bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/internal/CULSerialHandlerImpl.java
Patch:
@@ -118,6 +118,7 @@ public void sendRaw(String sendString) throws CULCommunicationException {
 		}
 		log.debug("Sending raw message to CUL: " + sendString);
 		if (bw == null) {
+			log.error("Can't write message, BufferedWriter is NULL");
 			throw new CULCommunicationException("BufferedWriter is null, probably the device is not open");
 		}
 		synchronized (bw) {

File: bundles/binding/org.openhab.binding.fs20/src/main/java/org/openhab/binding/fs20/internal/FS20CommandHelper.java
Patch:
@@ -35,6 +35,7 @@
 import org.openhab.core.library.types.UpDownType;
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;
+import org.openhab.core.types.UnDefType;
 
 /**
  * This class is responsible to convert openHAB commands to commands which can
@@ -89,7 +90,7 @@ public static State getStateFromFS20Command(FS20Command command) {
 		case TOGGLE:
 			return OnOffType.ON;
 		default:
-			return null;
+			return UnDefType.UNDEF;
 		}
 	}
 

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttMessageSubscriber.java
Patch:
@@ -221,7 +221,7 @@ protected Command getCommand(String value) {
 
 	@Override
 	public String getTopic() {
-		return StringUtils.replace(super.getTopic(), "{item}", "+");
+		return StringUtils.replace(super.getTopic(), "${item}", "+");
 	}
 
 }

File: bundles/binding/org.openhab.binding.owserver/src/main/java/org/openhab/binding/owserver/internal/OWServerBinding.java
Patch:
@@ -212,6 +212,8 @@ public void execute() {
 					if (server == null) {
 						needsUpdate = false;
 						logger.error("Unknown OW server referenced: "+unit);
+						
+						continue;
 					}
 					else {
 						age = System.currentTimeMillis() - server.lastUpdate;

File: bundles/io/org.openhab.io.transport.mqtt/src/main/java/org/openhab/io/transport/mqtt/MqttService.java
Patch:
@@ -125,7 +125,7 @@ public void updated(Dictionary<String, ?> properties)
 			try {
 				con.start();
 			} catch (Exception e) {
-				logger.debug("Error starting broker connection {} : {}",
+				logger.error("Error starting broker connection {} : {}",
 						con.getName(), e.getMessage());
 			}
 		}

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttMessageSubscriber.java
Patch:
@@ -221,7 +221,7 @@ protected Command getCommand(String value) {
 
 	@Override
 	public String getTopic() {
-		return StringUtils.replace(super.getTopic(), "{item}", "+");
+		return StringUtils.replace(super.getTopic(), "${item}", "+");
 	}
 
 }

File: bundles/io/org.openhab.io.transport.mqtt/src/main/java/org/openhab/io/transport/mqtt/MqttService.java
Patch:
@@ -125,7 +125,7 @@ public void updated(Dictionary<String, ?> properties)
 			try {
 				con.start();
 			} catch (Exception e) {
-				logger.debug("Error starting broker connection {} : {}",
+				logger.error("Error starting broker connection {} : {}",
 						con.getName(), e.getMessage());
 			}
 		}

File: bundles/binding/org.openhab.binding.mqtt/src/main/java/org/openhab/binding/mqtt/internal/MqttMessageSubscriber.java
Patch:
@@ -221,7 +221,7 @@ protected Command getCommand(String value) {
 
 	@Override
 	public String getTopic() {
-		return StringUtils.replace(super.getTopic(), "{item}", "+");
+		return StringUtils.replace(super.getTopic(), "${item}", "+");
 	}
 
 }

File: bundles/io/org.openhab.io.transport.mqtt/src/main/java/org/openhab/io/transport/mqtt/MqttService.java
Patch:
@@ -125,7 +125,7 @@ public void updated(Dictionary<String, ?> properties)
 			try {
 				con.start();
 			} catch (Exception e) {
-				logger.debug("Error starting broker connection {} : {}",
+				logger.error("Error starting broker connection {} : {}",
 						con.getName(), e.getMessage());
 			}
 		}

File: bundles/binding/org.openhab.binding.s300th/src/main/java/org/openhab/binding/s300th/internal/S300THBinding.java
Patch:
@@ -196,6 +196,9 @@ private void parseKS300Data(String data) {
 		}
 		for (Datapoint datapoint : Datapoint.values()) {
 			S300THBindingConfig config = findConfig(KS_300_ADDRESS, datapoint);
+			if (config == null) {
+				continue;
+			}
 			double value = 0.0;
 			switch (datapoint) {
 			case TEMPERATURE:

File: bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/CULManager.java
Patch:
@@ -106,7 +106,7 @@ public static void registerHandlerClass(String deviceType, Class<? extends CULHa
 	private static CULHandler createNewHandler(String deviceName, CULMode mode) throws CULDeviceException {
 		String deviceType = getPrefix(deviceName);
 		String deviceAddress = getRawDeviceName(deviceName);
-		logger.debug("Searching class for device type " + deviceAddress);
+		logger.debug("Searching class for device type " + deviceType);
 		Class<? extends CULHandler> culHandlerclass = deviceTypeClasses.get(deviceType);
 		if (culHandlerclass == null) {
 			throw new CULDeviceException("No class for the device type " + deviceType + " is registred");

File: bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/CULActivator.java
Patch:
@@ -9,8 +9,7 @@
 
 public class CULActivator implements BundleActivator {
 
-	private static final Logger logger = LoggerFactory
-			.getLogger(CULActivator.class);
+	private static final Logger logger = LoggerFactory.getLogger(CULActivator.class);
 
 	private static BundleContext context;
 

File: bundles/io/org.openhab.io.transport.cul/src/main/java/de/akuz/cul/internal/AbstractCULHandler.java
Patch:
@@ -14,8 +14,7 @@
  * @author Till Klocke
  * @since 1.4.0
  */
-public abstract class AbstractCULHandler implements CULHandler,
-		CULHandlerInternal {
+public abstract class AbstractCULHandler implements CULHandler, CULHandlerInternal {
 
 	protected String deviceName;
 	protected CULMode mode;

File: bundles/binding/org.openhab.binding.owserver/src/main/java/org/openhab/binding/owserver/internal/OWServerBinding.java
Patch:
@@ -212,6 +212,8 @@ public void execute() {
 					if (server == null) {
 						needsUpdate = false;
 						logger.error("Unknown OW server referenced: "+unit);
+						
+						continue;
 					}
 					else {
 						age = System.currentTimeMillis() - server.lastUpdate;

File: bundles/binding/org.openhab.binding.owserver/src/main/java/org/openhab/binding/owserver/internal/OWServerBinding.java
Patch:
@@ -212,6 +212,8 @@ public void execute() {
 					if (server == null) {
 						needsUpdate = false;
 						logger.error("Unknown OW server referenced: "+unit);
+						
+						continue;
 					}
 					else {
 						age = System.currentTimeMillis() - server.lastUpdate;

File: bundles/action/org.openhab.action.xbmc/src/main/java/org/openhab/action/xbmc/internal/XBMC.java
Patch:
@@ -77,7 +77,7 @@ static public void sendXbmcNotification(
 	*/
 	@ActionDoc(text="Send an XBMC notification via POST-HTTP. Errors will be logged, returned values just ignored. ")
 	static public void sendXbmcNotification(@ParamDoc(name="host") String host,@ParamDoc(name="port") int port,@ParamDoc(name="title") String title,@ParamDoc(name="message") String message,@ParamDoc(name="image") String image,@ParamDoc(name="displayTime") long displayTime) { 
-		String url = "http://" + host + ":" + port + "/jsonrpc?request=";
+		String url = "http://" + host + ":" + port + "/jsonrpc";
 		
 		StringBuilder content = new StringBuilder();
 		content.append("{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"GUI.ShowNotification\",\"params\":{\"title\":\"" + title + "\",\"message\":\"" + message + "\"");

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/protocol/internal/TCPBinding.java
Patch:
@@ -174,8 +174,6 @@ protected void parseBuffer(String itemName, Command aCommand, Direction theDirec
 		}
 	}
 
-
-
 	@SuppressWarnings("rawtypes")
 	@Override
 	public void updated(Dictionary config) throws ConfigurationException {

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/protocol/internal/UDPBinding.java
Patch:
@@ -174,7 +174,7 @@ protected void parseBuffer(String itemName, Command aCommand, Direction theDirec
 			logger.warn("Can not parse input "+theUpdate+" to match command {} on item {}  ",aCommand,itemName);
 		}
 	}
-
+	
 	@SuppressWarnings("rawtypes")
 	@Override
 	public void updated(Dictionary config) throws ConfigurationException {

File: bundles/binding/org.openhab.binding.heatmiser/src/main/java/org/openhab/binding/heatmiser/internal/thermostat/HeatmiserPRT.java
Patch:
@@ -59,8 +59,7 @@ public byte[] formatCommand(Functions function, Command command) {
 		switch (function) {
 		default:
 			// Default to calling the parent class.
-			super.formatCommand(function, command);
-			return null;
+			return super.formatCommand(function, command);
 		}
 	}
 }

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/protocol/internal/TCPBinding.java
Patch:
@@ -174,8 +174,6 @@ protected void parseBuffer(String itemName, Command aCommand, Direction theDirec
 		}
 	}
 
-
-
 	@SuppressWarnings("rawtypes")
 	@Override
 	public void updated(Dictionary config) throws ConfigurationException {

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/protocol/internal/UDPBinding.java
Patch:
@@ -174,7 +174,7 @@ protected void parseBuffer(String itemName, Command aCommand, Direction theDirec
 			logger.warn("Can not parse input "+theUpdate+" to match command {} on item {}  ",aCommand,itemName);
 		}
 	}
-
+	
 	@SuppressWarnings("rawtypes")
 	@Override
 	public void updated(Dictionary config) throws ConfigurationException {

File: bundles/binding/org.openhab.binding.piface/src/main/java/org/openhab/binding/piface/internal/PifaceActivator.java
Patch:
@@ -56,5 +56,4 @@ public void start(BundleContext bc) throws Exception {
 	public void stop(BundleContext bc) throws Exception {
 		logger.info("Piface binding has been stopped.");
 	}
-	
 }

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/Direction.java
Patch:
@@ -26,7 +26,7 @@
  * (EPL), the licensors of this Program grant you additional permission
  * to convey the resulting work.
  */
-package org.openhab.binding.tcp.protocol.internal;
+package org.openhab.binding.tcp;
 
 /**
  * Each binding configuration can define a direction. This can be used to qualify, limit, control, ... 

File: bundles/binding/org.openhab.binding.tcp/src/main/java/org/openhab/binding/tcp/protocol/ProtocolBindingProvider.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.List;
 
 import org.openhab.binding.tcp.ChannelBindingProvider;
-import org.openhab.binding.tcp.protocol.internal.Direction;
+import org.openhab.binding.tcp.Direction;
 import org.openhab.core.types.Command;
 
 /**

File: bundles/binding/org.openhab.binding.maxcube.test/src/test/java/org/openhab/binding/maxcube/internal/message/ConfigurationTest.java
Patch:
@@ -48,7 +48,7 @@ public class ConfigurationTest {
 	@Before
 	public void Before() {
 		c_message = new C_Message(rawData);
-		Configuration configuration =  Configuration.create(c_message);
+		configuration =  Configuration.create(c_message);
 	}
 	
 	@Test

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/L_Message.java
Patch:
@@ -34,6 +34,7 @@
 
 import org.apache.commons.codec.binary.Base64;
 import org.openhab.binding.maxcube.internal.MaxTokenizer;
+import org.slf4j.Logger;
 
 /**
  * The L message contains real time information about all MAX! devices.
@@ -65,8 +66,8 @@ public Collection<? extends Device> getDevices(List<Configuration> configuration
 	}
 	
 	@Override
-	public String debug() {
-		return "=== L_Message === ";
+	public void debug(Logger logger) {
+		logger.debug("=== L_Message === ");
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Message.java
Patch:
@@ -28,6 +28,8 @@
  */
 package org.openhab.binding.maxcube.internal.message;
 
+import org.slf4j.Logger;
+
 /**
 * Base message received by the MAX!Cube protocol. 
 * 
@@ -44,7 +46,7 @@ public Message(String raw) {
 		this.raw = raw;
 	}
 	
-	public abstract String debug();
+	public abstract void debug(Logger logger);
 	public abstract MessageType getType();
 	
 	protected final String getPayload() {

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/C_Message.java
Patch:
@@ -76,9 +76,8 @@ public C_Message(String raw) {
 	}
 
 	@Override
-	public void debug() {
-		// TODO Auto-generated method stub
-		System.out.println("=== C_Message === ");
+	public String debug() {
+		return "=== C_Message === ";
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/L_Message.java
Patch:
@@ -42,9 +42,8 @@ public L_Message(String raw) {
 	}
 	
 	@Override
-	public void debug() {
-		// TODO Auto-generated method stub
-		System.out.println("=== L_Message === ");
+	public String debug() {
+		return "=== L_Message === ";
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/M_Message.java
Patch:
@@ -42,9 +42,8 @@ public M_Message(String raw) {
 	}
 	
 	@Override
-	public void debug() {
-		// TODO Auto-generated method stub
-		System.out.println("=== M_Message === ");
+	public String debug() {
+		return "=== M_Message === ";
 	}
 
 	@Override

File: bundles/binding/org.openhab.binding.maxcube/src/main/java/org/openhab/binding/maxcube/internal/message/Message.java
Patch:
@@ -44,7 +44,7 @@ public Message(String raw) {
 		this.raw = raw;
 	}
 	
-	public abstract void debug();
+	public abstract String debug();
 	public abstract MessageType getType();
 	
 	protected final String getPayload() {

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/connection/JSONResponseHandler.java
Patch:
@@ -38,6 +38,7 @@
 
 /**
  * @author Alexander Betker
+ * @author Alex Maier
  * @since 1.3.0
  */
 public class JSONResponseHandler {
@@ -79,4 +80,4 @@ public JSONObject getResultJSONObject(JSONObject jsonObject) {
 		return null;
 	}
 
-}
+}
\ No newline at end of file

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/impl/DigitalSTROMJSONImpl.java
Patch:
@@ -61,6 +61,7 @@
 
 /**
  * @author 	Alexander Betker
+ * @author Alex Maier
  * @since 1.3.0
  * @version	digitalSTROM-API 1.14.5
  */
@@ -1085,4 +1086,4 @@ public boolean logout() {
 		return false;
 	}
 
-}
+}
\ No newline at end of file

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/Profile.java
Patch:
@@ -44,4 +44,6 @@ public interface Profile extends ParameterValueChangeListener {
 
     void addItem(Item item);
 
+    void removeItem(Item item);
+
 }
\ No newline at end of file

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/IhcBinding.java
Patch:
@@ -221,7 +221,7 @@ public void execute() {
 				}
 			}
 		} else {
-			logger.warn("Controller is null => refresh cycle aborted!");
+			logger.debug("Controller is null => refresh cycle aborted!");
 		}
 
 	}

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/util/LinkedQueue.java
Patch:
@@ -66,7 +66,7 @@ protected void insert(Object x) {
     }
   }//insert
 
-  /** Main mechanics for take/poll **/
+  /** Main mechanics for take/pollInterval **/
   protected synchronized Object extract() {
     synchronized (m_Head) {
       Object x = null;
@@ -174,7 +174,7 @@ public Object poll(long msecs) throws InterruptedException {
         }
       }
     }
-  }//poll
+  }//pollInterval
 
 
 }//LinkedQueue

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusSlave.java
Patch:
@@ -43,7 +43,6 @@
 import net.wimpi.modbus.msg.ReadMultipleRegistersResponse;
 import net.wimpi.modbus.msg.WriteCoilRequest;
 import net.wimpi.modbus.msg.WriteMultipleRegistersRequest;
-import net.wimpi.modbus.msg.WriteMultipleRegistersResponse;
 import net.wimpi.modbus.msg.WriteSingleRegisterRequest;
 import net.wimpi.modbus.procimg.InputRegister;
 import net.wimpi.modbus.procimg.Register;

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/ModelRepositoryImpl.java
Patch:
@@ -114,6 +114,7 @@ public boolean addOrRefreshModel(String name, InputStream inputStream) {
 			synchronized(resourceSet) {
 				resource.unload();
 				try {
+					logger.info("Refreshing model '{}'", name);
 					resource.load(inputStream, Collections.EMPTY_MAP);
 					notifyListeners(name, EventType.MODIFIED);
 					return true;

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java
Patch:
@@ -143,7 +143,7 @@ public void removeBindingConfigReader(BindingConfigReader reader) {
 	 */
 	@Override
 	public Collection<Item> getItems() {
-		Set<Item> items = new HashSet<Item>();
+		List<Item> items = new ArrayList<Item>();
 		for (String name : modelRepository.getAllModelNamesOfType("items")) {
 			items.addAll(getItemsFromModel(name));
 		}

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/connection/JSONResponseHandler.java
Patch:
@@ -38,6 +38,7 @@
 
 /**
  * @author Alexander Betker
+ * @author Alex Maier
  * @since 1.3.0
  */
 public class JSONResponseHandler {
@@ -79,4 +80,4 @@ public JSONObject getResultJSONObject(JSONObject jsonObject) {
 		return null;
 	}
 
-}
+}
\ No newline at end of file

File: bundles/binding/org.openhab.binding.digitalstrom/src/main/java/org/openhab/binding/digitalstrom/internal/client/impl/DigitalSTROMJSONImpl.java
Patch:
@@ -61,6 +61,7 @@
 
 /**
  * @author 	Alexander Betker
+ * @author Alex Maier
  * @since 1.3.0
  * @version	digitalSTROM-API 1.14.5
  */
@@ -1085,4 +1086,4 @@ public boolean logout() {
 		return false;
 	}
 
-}
+}
\ No newline at end of file

File: bundles/binding/org.openhab.binding.modbus/src/main/java/net/wimpi/modbus/util/LinkedQueue.java
Patch:
@@ -66,7 +66,7 @@ protected void insert(Object x) {
     }
   }//insert
 
-  /** Main mechanics for take/poll **/
+  /** Main mechanics for take/pollInterval **/
   protected synchronized Object extract() {
     synchronized (m_Head) {
       Object x = null;
@@ -174,7 +174,7 @@ public Object poll(long msecs) throws InterruptedException {
         }
       }
     }
-  }//poll
+  }//pollInterval
 
 
 }//LinkedQueue

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusSlave.java
Patch:
@@ -43,7 +43,6 @@
 import net.wimpi.modbus.msg.ReadMultipleRegistersResponse;
 import net.wimpi.modbus.msg.WriteCoilRequest;
 import net.wimpi.modbus.msg.WriteMultipleRegistersRequest;
-import net.wimpi.modbus.msg.WriteMultipleRegistersResponse;
 import net.wimpi.modbus.msg.WriteSingleRegisterRequest;
 import net.wimpi.modbus.procimg.InputRegister;
 import net.wimpi.modbus.procimg.Register;

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/ModelRepositoryImpl.java
Patch:
@@ -114,6 +114,7 @@ public boolean addOrRefreshModel(String name, InputStream inputStream) {
 			synchronized(resourceSet) {
 				resource.unload();
 				try {
+					logger.info("Refreshing model '{}'", name);
 					resource.load(inputStream, Collections.EMPTY_MAP);
 					notifyListeners(name, EventType.MODIFIED);
 					return true;

File: bundles/binding/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/profiles/Profile.java
Patch:
@@ -44,4 +44,6 @@ public interface Profile extends ParameterValueChangeListener {
 
     void addItem(Item item);
 
+    void removeItem(Item item);
+
 }
\ No newline at end of file

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java
Patch:
@@ -143,7 +143,7 @@ public void removeBindingConfigReader(BindingConfigReader reader) {
 	 */
 	@Override
 	public Collection<Item> getItems() {
-		Set<Item> items = new HashSet<Item>();
+		List<Item> items = new ArrayList<Item>();
 		for (String name : modelRepository.getAllModelNamesOfType("items")) {
 			items.addAll(getItemsFromModel(name));
 		}

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/config/HomematicGenericBindingProvider.java
Patch:
@@ -106,8 +106,8 @@ public void processBindingConfiguration(String context, Item item, String bindin
 
     @Override
     protected void addBindingConfig(Item item, BindingConfig config) {
-        super.addBindingConfig(item, config);
         items.put(item.getName(), item);
+        super.addBindingConfig(item, config);
     }
 
     @Override

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -245,6 +245,7 @@ public SonosBinding() {
 	}
 
 	public void activate() {
+		start();
 	}
 
 	/**

File: bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java
Patch:
@@ -180,7 +180,7 @@ static public Boolean changedSince(Item item, AbstractInstant timestamp) {
 	static public Boolean changedSince(Item item, AbstractInstant timestamp, String serviceName) {
 		Iterable<HistoricItem> result = getAllStatesSince(item, timestamp, serviceName);
 		Iterator<HistoricItem> it = result.iterator();
-		State state = null;
+		State state = historicState(item, timestamp);
 		while(it.hasNext()) {
 			HistoricItem hItem = it.next();
 			if(state!=null && !hItem.getState().equals(state)) {

File: bundles/binding/org.openhab.binding.mpd/src/main/java/org/openhab/binding/mpd/internal/MpdBinding.java
Patch:
@@ -191,8 +191,9 @@ private void executePlayerCommand(String playerCommandLine) {
 				MPDPlayer player = daemon.getMPDPlayer();
 				
 				switch (pCommand) {
+					case PAUSE: player.pause(); break;
 					case PLAY: player.play(); break;
-					case STOP: player.pause(); break;
+					case STOP: player.stop(); break;
 					case VOLUME_INCREASE: player.setVolume(player.getVolume() + VOLUME_CHANGE_SIZE); break;
 					case VOLUME_DECREASE: player.setVolume(player.getVolume() - VOLUME_CHANGE_SIZE); break;
 					case NEXT: player.playNext(); break;

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/commandclass/ZWaveNoOperationCommandClass.java
Patch:
@@ -90,7 +90,7 @@ public void handleApplicationCommandRequest(SerialMessage serialMessage,
 	 */
 	public SerialMessage getNoOperationMessage() {
 		logger.debug("Creating new message for application command No Operation for node {}", this.getNode().getNodeId());
-		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Ping);
+		SerialMessage result = new SerialMessage(this.getNode().getNodeId(), SerialMessageClass.SendData, SerialMessageType.Request, SerialMessageClass.SendData, SerialMessagePriority.Low);
     	byte[] newPayload = { 	(byte) this.getNode().getNodeId(), 
     							1, 
 								(byte) getCommandClass().getKey() }; 

File: bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/commandclass/ZWaveWakeUpCommandClass.java
Patch:
@@ -76,7 +76,7 @@ public class ZWaveWakeUpCommandClass extends ZWaveCommandClass implements ZWaveC
 	private int defaultInterval = 0;
 	private int intervalStep = 0;
 	
-	private boolean isAwake = false;
+	private volatile boolean isAwake = false;
 	
 	private boolean initializationComplete = false;
 	

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/bus/HomematicBinding.java
Patch:
@@ -460,7 +460,9 @@ private void registerCallbackHandler() {
         Runtime.getRuntime().addShutdownHook(new Thread() {
             @Override
             public void run() {
-                removeCallbackHandler(cbServer);
+            	if(cbServer!=null) {
+            		removeCallbackHandler(cbServer);
+            	}
             }
         });
         ccu.getConnection().init("http://" + callbackHost + ":" + callbackPort + "/xmlrpc", "" + ccu.getConnection().hashCode());

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/items/GroupItem.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 import org.apache.commons.collections.ListUtils;
 import org.openhab.core.types.Command;
@@ -59,7 +60,7 @@ public GroupItem(String name, GenericItem baseItem) {
 
 	public GroupItem(String name, GenericItem baseItem, GroupFunction function) {
 		super(name);
-		members = new ArrayList<Item>();
+		members = new CopyOnWriteArrayList<Item>();
 		this.function = function;
 		this.baseItem = baseItem;
 	}

File: bundles/binding/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/config/HomematicGenericBindingProvider.java
Patch:
@@ -102,8 +102,8 @@ public void processBindingConfiguration(String context, Item item, String bindin
 
     @Override
     protected void addBindingConfig(Item item, BindingConfig config) {
-        super.addBindingConfig(item, config);
         items.put(item.getName(), item);
+        super.addBindingConfig(item, config);
     }
 
     @Override

File: bundles/action/org.openhab.action.nma/src/main/java/org/openhab/action/nma/internal/NotifyMyAndroidActionService.java
Patch:
@@ -135,7 +135,7 @@ public void updated(Dictionary<String, ?> config) throws ConfigurationException
 				NotifyMyAndroid.defaultPriotiy = 
 					Integer.parseInt((String) config.get(PARAM_KEY_DEFAULT_PRIORITY));
 			} catch (NumberFormatException e) {
-				throw new ConfigurationException(PARAM_KEY_DEFAULT_PRIORITY, REASON_CANT_PARSE_NUMBER, e);
+				logger.warn("Can't parse the default priority value, falling back to default value");
 			}
 			
 			NotifyMyAndroid.defaultUrl = (String) config.get(PARAM_KEY_DEFAULT_URL);

File: bundles/action/org.openhab.action.nma/src/main/java/org/openhab/action/nma/internal/NotifyMyAndroid.java
Patch:
@@ -187,7 +187,7 @@ public static boolean notifyMyAndroid(
 				logger.warn("Can't parse response from NMA: " + response, e);
 				return false;
 			}
-		} catch (IOException e) {
+		} catch (Exception e) {
 			logger.error("An error occured while notifying your android", e);
 			return false;
 		}

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/PageRenderer.java
Patch:
@@ -93,7 +93,7 @@ public StringBuilder processPage(String id, String sitemap, String label, EList<
 		if(label.contains("[") && label.endsWith("]")) {
 			label = label.replace("[", "").replace("]", "");
 		}
-		snippet = StringUtils.replace(snippet, "%label%", StringEscapeUtils.escapeHtml(label));
+		snippet = StringUtils.replace(snippet, "%label%", label);
 		snippet = StringUtils.replace(snippet, "%servletname%", WebAppServlet.SERVLET_NAME);
 		snippet = StringUtils.replace(snippet, "%sitemap%", sitemap);
 

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/beans/PageBean.java
Patch:
@@ -51,6 +51,7 @@ public class PageBean {
 	public String icon;
 	public String link;
 	public PageBean parent;
+	public boolean leaf;
 	
 	@XmlElement(name="widget")
 	public List<WidgetBean> widgets = new ArrayList<WidgetBean>();

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/FrameRenderer.java
Patch:
@@ -29,6 +29,7 @@
 package org.openhab.ui.webapp.internal.render;
 
 import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang.StringUtils;
 import org.eclipse.emf.common.util.EList;
 import org.openhab.model.sitemap.Frame;
 import org.openhab.model.sitemap.Widget;
@@ -57,7 +58,7 @@ public boolean canRender(Widget w) {
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("frame");
 
-		snippet = snippet.replaceAll("%label%", StringEscapeUtils.escapeHtml(getLabel(w)));
+		snippet = StringUtils.replace(snippet, "%label%", StringEscapeUtils.escapeHtml(getLabel(w)));
 		
 		sb.append(snippet);
 		return ((Frame)w).getChildren();

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/ListRenderer.java
Patch:
@@ -28,6 +28,7 @@
  */
 package org.openhab.ui.webapp.internal.render;
 
+import org.apache.commons.lang.StringUtils;
 import org.eclipse.emf.common.util.EList;
 import org.openhab.model.sitemap.List;
 import org.openhab.model.sitemap.Widget;
@@ -62,9 +63,9 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		String[] rowContents = state.split(((List) w).getSeparator());
 		StringBuilder rowSB = new StringBuilder();
 		for(String row : rowContents) {
-			rowSB.append(rowSnippet.replace("%title%", row));
+			rowSB.append(StringUtils.replace(rowSnippet, "%title%", row));
 		}
-		snippet = snippet.replace("%rows%", rowSB.toString());
+		snippet = StringUtils.replace(snippet, "%rows%", rowSB.toString());
 		
 		sb.append(snippet);
 		return null;

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/VideoRenderer.java
Patch:
@@ -28,6 +28,7 @@
  */
 package org.openhab.ui.webapp.internal.render;
 
+import org.apache.commons.lang.StringUtils;
 import org.eclipse.emf.common.util.EList;
 import org.openhab.model.sitemap.Video;
 import org.openhab.model.sitemap.Widget;
@@ -61,7 +62,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		String sitemap = w.eResource().getURI().path();
 		
 		String url = "proxy?sitemap=" + sitemap + "&widgetId=" + widgetId;
-		snippet = snippet.replaceAll("%url%", url);
+		snippet = StringUtils.replace(snippet, "%url%", url);
 		
 		sb.append(snippet);
 		return null;

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/WebviewRenderer.java
Patch:
@@ -28,6 +28,7 @@
  */
 package org.openhab.ui.webapp.internal.render;
 
+import org.apache.commons.lang.StringUtils;
 import org.eclipse.emf.common.util.EList;
 import org.openhab.model.sitemap.Webview;
 import org.openhab.model.sitemap.Widget;
@@ -63,8 +64,8 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 			height = 1;
 		}
 		
-		snippet = snippet.replaceAll("%url%", webview.getUrl());
-		snippet = snippet.replaceAll("%height%", Integer.toString(height*36));
+		snippet = StringUtils.replace(snippet, "%url%", webview.getUrl());
+		snippet = StringUtils.replace(snippet, "%height%", Integer.toString(height*36));
 		
 		sb.append(snippet);
 		return null;

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/FrameRenderer.java
Patch:
@@ -28,6 +28,7 @@
  */
 package org.openhab.ui.webapp.internal.render;
 
+import org.apache.commons.lang.StringEscapeUtils;
 import org.eclipse.emf.common.util.EList;
 import org.openhab.model.sitemap.Frame;
 import org.openhab.model.sitemap.Widget;
@@ -56,7 +57,7 @@ public boolean canRender(Widget w) {
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("frame");
 
-		snippet = snippet.replaceAll("%label%", getLabel(w));
+		snippet = snippet.replaceAll("%label%", StringEscapeUtils.escapeHtml(getLabel(w)));
 		
 		sb.append(snippet);
 		return ((Frame)w).getChildren();

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/PageRenderer.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.commons.lang.StringEscapeUtils;
 import org.eclipse.emf.common.util.EList;
 import org.eclipse.emf.ecore.EObject;
 import org.openhab.model.sitemap.Frame;
@@ -91,7 +92,7 @@ public StringBuilder processPage(String id, String sitemap, String label, EList<
 		if(label.contains("[") && label.endsWith("]")) {
 			label = label.replace("[", "").replace("]", "");
 		}
-		snippet = snippet.replaceAll("%label%", label);
+		snippet = snippet.replaceAll("%label%", StringEscapeUtils.escapeHtml(label));
 		snippet = snippet.replaceAll("%servletname%", WebAppServlet.SERVLET_NAME);
 		snippet = snippet.replaceAll("%sitemap%", sitemap);
 

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpBinding.java
Patch:
@@ -103,7 +103,8 @@ public HttpBinding() {
 	
 	@Override
 	public void activate() {
-		super.activate();
+		super.activate();		
+		setProperlyConfigured(true);
 	}
 	
 	/**
@@ -406,8 +407,6 @@ public void updated(Dictionary config) throws ConfigurationException {
 				}
 
 			}
-			
-			setProperlyConfigured(true);
 		}
 
 	}

File: bundles/io/org.openhab.io.multimedia.tts.freetts/src/main/java/org/openhab/io/multimedia/internal/tts/TTSServiceFreeTTS.java
Patch:
@@ -77,7 +77,7 @@ public void deactivate() {
 	/**
 	 * {@inheritDoc}
 	 */
-	public void say(String text, String voiceName) {
+	public void say(String text, String voiceName, String outputDevice) {
 
 		if(text==null) {
 			return;

File: bundles/io/org.openhab.io.multimedia.tts.marytts/src/main/java/org/openhab/io/multimedia/internal/tts/TTSServiceMaryTTS.java
Patch:
@@ -82,7 +82,7 @@ public void deactivate() {
 	/**
 	 * {@inheritDoc}
 	 */
-	public void say(String text, String voiceName) {
+	public void say(String text, String voiceName, String outputDevice) {
 		if (marytts==null) {
 			logger.error("Mary TTS is not available");
 			return;

File: bundles/io/org.openhab.io.multimedia/src/main/java/org/openhab/io/multimedia/tts/TTSService.java
Patch:
@@ -42,6 +42,8 @@ public interface TTSService {
 	 * 
 	 * @param text the text to speak
 	 * @param voice the name of the voice to use or null, if the default voice should be used
+	 * @param device the name of audio device to be used to play the audio or null, if the default output device should be used
 	 */
-	void say(String text, String voice);
+	void say(String text, String voice, String outputDevice);
+
 }

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/ModelRepositoryImpl.java
Patch:
@@ -96,6 +96,7 @@ public boolean addOrRefreshModel(String name, InputStream inputStream) {
 					// seems to be a new file
 					resource = resourceSet.createResource(URI.createURI(name));
 					if(resource!=null) {
+						logger.info("Loading model '{}'", name);
 						try {
 							Map<String, String> options = new HashMap<String, String>();
 							options.put(XtextResource.OPTION_ENCODING, "UTF-8");

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/folder/FolderObserver.java
Patch:
@@ -159,7 +159,6 @@ private void checkFolder(String foldername) {
 			if(FileUtils.isFileNewer(file, timeLastCheck)) {
 				if(modelRepo!=null) {
 					try {
-						logger.info("Loading file '{}'", file.getName());
 						if(modelRepo.addOrRefreshModel(file.getName(), FileUtils.openInputStream(file))) {
 							lastCheckedMap.put(file.getName(), new Date().getTime());							
 						}

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/binding/AbstractBinding.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
+import java.util.concurrent.CopyOnWriteArraySet;
 
 import org.openhab.core.events.AbstractEventSubscriber;
 import org.openhab.core.events.EventPublisher;
@@ -48,7 +49,8 @@
 public abstract class AbstractBinding<P extends BindingProvider> extends AbstractEventSubscriber implements BindingChangeListener {
 	
 	/** to keep track of all binding providers */
-	protected Collection<P> providers = Collections.synchronizedSet(new HashSet<P>());
+
+	protected Collection<P> providers = new CopyOnWriteArraySet<P>();
 	
 	protected EventPublisher eventPublisher = null;
 	

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java
Patch:
@@ -82,8 +82,8 @@ protected void start() {
 			return;
 		}
 				
+		shutdown = false;
 		if (!isRunning()) {
-			shutdown = false;
 			this.refreshThread = new RefreshThread(getName(), getRefreshInterval());
 			this.refreshThread.start();
 		} else {

File: bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/i18n/Messages.java
Patch:
@@ -33,7 +33,7 @@
 
 public class Messages extends NLS {
 	
-	private static final String BUNDLE_NAME = "org.openhab.binding.novelanheatpump.internal.messages"; //$NON-NLS-1$
+	private static final String BUNDLE_NAME = "org.openhab.binding.novelanheatpump.i18n.messages"; //$NON-NLS-1$
 	
 	public static String HeatPumpBinding_APPEAR;
 	public static String HeatPumpBinding_DEFROSTING;

File: bundles/binding/org.openhab.binding.cups/src/main/java/org/openhab/binding/cups/internal/CupsBinding.java
Patch:
@@ -209,7 +209,7 @@ public void updated(Dictionary config) throws ConfigurationException {
 			// server ...
 			connect(ip, port);
 
-			setProperlyConfigured(true);
+			setProperlyConfigured();
 		}
 
 	}

File: bundles/binding/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecBinding.java
Patch:
@@ -115,7 +115,7 @@ protected String getName() {
 	@Override
 	public void activate() {
 		super.activate();
-		setProperlyConfigured(true);
+		setProperlyConfigured();
 	}
 	
 	public void execute() {
@@ -426,6 +426,6 @@ public void addBindingProvider(ExecBindingProvider provider) {
 		super.addBindingProvider(provider);
 		
 		
-		setProperlyConfigured(true);
+		setProperlyConfigured();
 	}
 }

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpBinding.java
Patch:
@@ -95,7 +95,7 @@ public HttpBinding() {
 	@Override
 	public void activate() {
 		super.activate();
-		setProperlyConfigured(true);
+		setProperlyConfigured();
 	}
 	
     /**

File: bundles/binding/org.openhab.binding.ihc/src/main/java/org/openhab/binding/ihc/internal/IhcBinding.java
Patch:
@@ -393,7 +393,7 @@ public void updated(Dictionary config) throws ConfigurationException {
 		if (config != null) {
 		}
 
-		setProperlyConfigured(true);
+		setProperlyConfigured();
 	}
 
 	private void startIhcListener() {

File: bundles/binding/org.openhab.binding.koubachi/src/main/java/org/openhab/binding/koubachi/internal/KoubachiBinding.java
Patch:
@@ -80,7 +80,7 @@ public void activate() {
 		// we set properlyConfigured to true right from the start. Note that his is not fully correct as the update()
 		// method might not have been called yet. To fix it, this binding would require a refactoring to make
 		// the binding itself implement ManagedService instead of doing this in a separate class.
-		setProperlyConfigured(true);
+		setProperlyConfigured();
 	}
 	
 	/**

File: bundles/binding/org.openhab.binding.networkhealth/src/main/java/org/openhab/binding/networkhealth/internal/NetworkHealthBinding.java
Patch:
@@ -75,7 +75,7 @@ protected long getRefreshInterval() {
 	@Override
 	public void activate() {
 		super.activate();
-		setProperlyConfigured(true);
+		setProperlyConfigured();
 	}
 	
 	/**

File: bundles/binding/org.openhab.binding.novelanheatpump/src/main/java/org/openhab/binding/novelanheatpump/internal/HeatPumpBinding.java
Patch:
@@ -89,7 +89,7 @@ public void updated(Dictionary config) throws ConfigurationException {
 					refreshInterval = Long.parseLong(refreshIntervalString);
 				}
 
-				setProperlyConfigured(true);
+				setProperlyConfigured();
 			}
 		}
 	}

File: bundles/binding/org.openhab.binding.ntp/src/main/java/org/openhab/binding/ntp/internal/NtpBinding.java
Patch:
@@ -163,7 +163,7 @@ public void updated(Dictionary config) throws ConfigurationException {
 				refreshInterval = Long.parseLong(refreshIntervalString);
 			}
 			
-			setProperlyConfigured(true);
+			setProperlyConfigured();
 		}
 
 	}

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireBinding.java
Patch:
@@ -227,7 +227,7 @@ public void updated(Dictionary config) throws ConfigurationException {
 			// server ...
 			connect(ip, port);
 
-			setProperlyConfigured(true);
+			setProperlyConfigured();
 		}
 
 	}

File: bundles/binding/org.openhab.binding.pulseaudio/src/main/java/org/openhab/binding/pulseaudio/internal/PulseaudioBinding.java
Patch:
@@ -140,7 +140,7 @@ protected String getName() {
 	@Override
 	public void activate() {
 		super.activate();
-		setProperlyConfigured(true);
+		setProperlyConfigured();
 	}
 
 	@Override

File: bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManager.java
Patch:
@@ -163,6 +163,7 @@ public void unsetItemRegistry(ItemRegistry itemRegistry) {
 	}
 
 	public void addPersistenceService(PersistenceService persistenceService) {
+		logger.debug("Initializing {} persistence service.", persistenceService.getName());
 		persistenceServices.put(persistenceService.getName(), persistenceService);
 		stopEventHandling(persistenceService.getName());
 		startEventHandling(persistenceService.getName());
@@ -182,7 +183,7 @@ public void modelChanged(String modelName, EventType type) {
 			}
 	
 			if(type==EventType.ADDED || type==EventType.MODIFIED) {
-				if(itemRegistry!=null) {
+				if(itemRegistry!=null && persistenceServices.containsKey(serviceName)) {
 					startEventHandling(serviceName);
 				}
 			}

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/folder/FolderObserver.java
Patch:
@@ -159,8 +159,8 @@ private void checkFolder(String foldername) {
 			if(FileUtils.isFileNewer(file, timeLastCheck)) {
 				if(modelRepo!=null) {
 					try {
+						logger.info("Loading file '{}'", file.getName());
 						if(modelRepo.addOrRefreshModel(file.getName(), FileUtils.openInputStream(file))) {
-							logger.info("Loaded file '{}'", file.getName());
 							lastCheckedMap.put(file.getName(), new Date().getTime());							
 						}
 					} catch (IOException e) {

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpBinding.java
Patch:
@@ -153,7 +153,7 @@ public void execute() {
 				
 				if (needsUpdate) {
 					
-					logger.debug("item '{}' is about to be refreshed now", itemName);
+					logger.debug("Item '{}' is about to be refreshed now", itemName);
 					
 					String response = HttpUtil.executeUrl("GET", url, headers, null, null, timeout);
 					

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java
Patch:
@@ -161,7 +161,7 @@ public RefreshThread(String name, long refreshInterval) {
 		
 		@Override
 		public void run() {
-			logger.debug(getName() + " has been started");
+			logger.info(getName() + " has been started");
 			
 			while (!shutdown) {
 				try {

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java
Patch:
@@ -76,7 +76,7 @@ public void deactivate() {
 	 */
 	protected void start() {
 		if (!isProperlyConfigured()) {
-			logger.trace("{} won't be started because it isn't properly configured.", getName());
+			logger.trace("{} won't be started because it isn't yet properly configured.", getName());
 			return;
 		}
 		

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/GCalConfiguration.java
Patch:
@@ -40,7 +40,7 @@
 /**
  * Configuration class which implements {@link ManagedService} to act as a central
  * handler for configuration issues. It holds the current configuration values
- * and gives acces through static member fields.
+ * and gives access through static member fields.
  * 
  * @author Thomas.Eichstaedt-Engelen
  * @since 1.0.0
@@ -121,6 +121,7 @@ public void updated(Dictionary config) throws ConfigurationException {
 			}
 			
 			initialized = true;
+			
 		}
 	}
 	

File: bundles/io/org.openhab.io.dropbox/src/main/java/org/openhab/io/dropbox/internal/DropboxSynchronizerImpl.java
Patch:
@@ -785,13 +785,13 @@ public void updated(Dictionary config) throws ConfigurationException {
 			String uploadFilterString = (String) config.get("uploadfilter");
 			if (isNotBlank(uploadFilterString)) {
 				String[] newFilterElements = uploadFilterString.split(",");
-				uploadFilterElements.addAll(Arrays.asList(newFilterElements));
+				uploadFilterElements = Arrays.asList(newFilterElements);
 			}
 
 			String downloadFilterString = (String) config.get("downloadfilter");
 			if (isNotBlank(downloadFilterString)) {
 				String[] newFilterElements = downloadFilterString.split(",");
-				downloadFilterElements.addAll(Arrays.asList(newFilterElements));
+				downloadFilterElements = Arrays.asList(newFilterElements);
 			}
 			
 			// we got thus far, so we define this synchronizer as properly configured ...

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/ColorpickerRenderer.java
Patch:
@@ -87,7 +87,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		}
 
 		snippet = snippet.replaceAll("%id%", itemUIRegistry.getWidgetId(cp));
-		snippet = snippet.replaceAll("%icon%", itemUIRegistry.getIcon(cp));
+		snippet = snippet.replaceAll("%icon%", escapeURLPath(itemUIRegistry.getIcon(cp)));
 		snippet = snippet.replaceAll("%item%", w.getItem());
 		snippet = snippet.replaceAll("%label%", label);
 		snippet = snippet.replaceAll("%purelabel%", purelabel);

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/GroupRenderer.java
Patch:
@@ -58,7 +58,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		String snippet = getSnippet("group");
 
 		snippet = snippet.replaceAll("%id%", itemUIRegistry.getWidgetId(w));
-		snippet = snippet.replaceAll("%icon%", itemUIRegistry.getIcon(w));
+		snippet = snippet.replaceAll("%icon%", escapeURLPath(itemUIRegistry.getIcon(w)));
 		snippet = snippet.replaceAll("%label%", getLabel(w));
 
 		sb.append(snippet);

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SelectionRenderer.java
Patch:
@@ -57,7 +57,7 @@ public boolean canRender(Widget w) {
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("selection");
 
-		snippet = snippet.replaceAll("%icon%", itemUIRegistry.getIcon(w));
+		snippet = snippet.replaceAll("%icon%", escapeURLPath(itemUIRegistry.getIcon(w)));
 		snippet = snippet.replace("%label_header%", getLabel(w));
 		
 		String state = itemUIRegistry.getState(w).toString();

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SetpointRenderer.java
Patch:
@@ -99,7 +99,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		String snippet = getSnippet(snippetName);
 
 		snippet = snippet.replaceAll("%id%", itemUIRegistry.getWidgetId(w));
-		snippet = snippet.replaceAll("%icon%", itemUIRegistry.getIcon(w));
+		snippet = snippet.replaceAll("%icon%", escapeURLPath(itemUIRegistry.getIcon(w)));
 		snippet = snippet.replaceAll("%item%", w.getItem());
 		snippet = snippet.replaceAll("%state%", state.toString());
 		snippet = snippet.replaceAll("%newlowerstate%", newLowerState);

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SliderRenderer.java
Patch:
@@ -69,7 +69,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		String frequency = s.getFrequency()==0 ? "200" : Integer.toString(s.getFrequency());
 
 		snippet = snippet.replaceAll("%id%", itemUIRegistry.getWidgetId(s));
-		snippet = snippet.replaceAll("%icon%", itemUIRegistry.getIcon(s));
+		snippet = snippet.replaceAll("%icon%", escapeURLPath(itemUIRegistry.getIcon(s)));
 		snippet = snippet.replaceAll("%item%", w.getItem());
 		snippet = snippet.replaceAll("%label%", getLabel(s));
 		snippet = snippet.replaceAll("%state%", itemUIRegistry.getState(s).toString());

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SwitchRenderer.java
Patch:
@@ -93,7 +93,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		String snippet = getSnippet(snippetName);
 
 		snippet = snippet.replaceAll("%id%", itemUIRegistry.getWidgetId(w));
-		snippet = snippet.replaceAll("%icon%", itemUIRegistry.getIcon(w));
+		snippet = snippet.replaceAll("%icon%", escapeURLPath(itemUIRegistry.getIcon(w)));
 		snippet = snippet.replaceAll("%item%", w.getItem());
 		snippet = snippet.replaceAll("%label%", getLabel(w));
 		snippet = snippet.replaceAll("%servletname%", WebAppServlet.SERVLET_NAME);

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/TextRenderer.java
Patch:
@@ -60,7 +60,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 			getSnippet("text_link") : getSnippet("text");			
 
 		snippet = snippet.replaceAll("%id%", itemUIRegistry.getWidgetId(w));
-		snippet = snippet.replaceAll("%icon%", itemUIRegistry.getIcon(w));
+		snippet = snippet.replaceAll("%icon%", escapeURLPath(itemUIRegistry.getIcon(w)));
 		snippet = snippet.replaceAll("%label%", getLabel(w));
 		
 		sb.append(snippet);

File: bundles/binding/org.openhab.binding.networkhealth/src/main/java/org/openhab/binding/networkhealth/internal/NetworkHealthGenericBindingProvider.java
Patch:
@@ -31,6 +31,7 @@
 import org.openhab.binding.networkhealth.NetworkHealthBindingProvider;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
+import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
 import org.openhab.model.item.binding.BindingConfigParseException;
@@ -67,7 +68,7 @@ public String getBindingType() {
 	 */
 	@Override
 	public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-		if (!(item instanceof SwitchItem)) {
+		if (!(item instanceof SwitchItem || item instanceof StringItem)) {
 			throw new BindingConfigParseException("item '" + item.getName()
 					+ "' is of type '" + item.getClass().getSimpleName()
 					+ "', only Switch- and StringItems are allowed - please check your *.items configuration");

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/Energy.java
Patch:
@@ -41,8 +41,6 @@
 public class Energy {
 			
 	private DateTime time;
-	@SuppressWarnings("unused")
-	private DateTime local;
 	private long pulses;
 	private int interval;
 	

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/PlugwiseActivator.java
Patch:
@@ -41,7 +41,6 @@
  */
 public class PlugwiseActivator implements BundleActivator {
 
-	/** The logger */
 	private static Logger logger = LoggerFactory.getLogger(PlugwiseActivator.class); 
 	
 	/**

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosGenericBindingProvider.java
Patch:
@@ -65,6 +65,7 @@
  * 		using player_name : somecommand, where somecommand takes a simple input/output value from/to the string
  * 
  * @author Karel Goderis
+ * @author Pauli Anttila
  * @since 1.1.0
  */
 
@@ -320,7 +321,7 @@ public SonosCommandType getSonosCommandType(String itemName, Command aCommand, D
 		if(aBindingConfig != null) {
 			for(Command command : aBindingConfig.keySet()){
 				SonosBindingConfigElement anElement = aBindingConfig.get(command);
-				if(anElement.getDirection().equals(direction)){
+				if(command == aCommand && anElement.getDirection().equals(direction)){
 					return anElement.getCommandType();
 				}
 			}

File: bundles/io/org.openhab.io.dropbox/src/main/java/org/openhab/io/dropbox/internal/DropboxSynchronizerImpl.java
Patch:
@@ -136,8 +136,8 @@ public class DropboxSynchronizerImpl implements ManagedService {
 	/** the configured synchronization mode (defaults to LOCAL_TO_DROPBOX) */
 	private static DropboxSyncMode syncMode = DropboxSyncMode.LOCAL_TO_DROPBOX;
 
-	/** the upload interval as Cron-Expression (optional, defaults to '0 0/5 * * * ?' which means every 5 minutes) */
-	private static String uploadInterval = "0 0/5 * * * ?";
+	/** the upload interval as Cron-Expression (optional, defaults to '0 0 2 * * ?' which means once a day at 2am) */
+	private static String uploadInterval = "0 0 2 * * ?";
 
 	/** the download interval as Cron-Expression (optional, defaults to '0 0/5 * * * ?' which means every 5 minutes) */
 	private static String downloadInterval = "0 0/5 * * * ?";

File: bundles/binding/org.openhab.binding.mpd/src/main/java/org/openhab/binding/mpd/internal/MpdBinding.java
Patch:
@@ -93,8 +93,8 @@ public class MpdBinding extends AbstractBinding<MpdBindingProvider> implements M
 		
 	private Map<String, MpdPlayerConfig> playerConfigCache = new HashMap<String, MpdPlayerConfig>();
 	
-	/** RegEx to validate a mpdPlayer config <code>'^(.*?)\\.(host|port)$'</code> */
-	private static final Pattern EXTRACT_PLAYER_CONFIG_PATTERN = Pattern.compile("^(.*?)\\.(host|port)$");
+	/** RegEx to validate a mpdPlayer config <code>'^(.*?)\\.(host|port|password)$'</code> */
+	private static final Pattern EXTRACT_PLAYER_CONFIG_PATTERN = Pattern.compile("^(.*?)\\.(host|port|password)$");
 	
 	/** The value by which the volume is changed by each INCREASE or DECREASE-Event */ 
 	private static final int VOLUME_CHANGE_SIZE = 5;

File: bundles/io/org.openhab.io.dropbox/src/main/java/org/openhab/io/dropbox/internal/DropboxSynchronizerImpl.java
Patch:
@@ -136,8 +136,8 @@ public class DropboxSynchronizerImpl implements ManagedService {
 	/** the configured synchronization mode (defaults to LOCAL_TO_DROPBOX) */
 	private static DropboxSyncMode syncMode = DropboxSyncMode.LOCAL_TO_DROPBOX;
 
-	/** the upload interval as Cron-Expression (optional, defaults to '0 0/5 * * * ?' which means every 5 minutes) */
-	private static String uploadInterval = "0 0/5 * * * ?";
+	/** the upload interval as Cron-Expression (optional, defaults to '0 0 2 * * ?' which means once a day at 2am) */
+	private static String uploadInterval = "0 0 2 * * ?";
 
 	/** the download interval as Cron-Expression (optional, defaults to '0 0/5 * * * ?' which means every 5 minutes) */
 	private static String downloadInterval = "0 0/5 * * * ?";

File: bundles/binding/org.openhab.binding.networkhealth/src/main/java/org/openhab/binding/networkhealth/internal/NetworkHealthGenericBindingProvider.java
Patch:
@@ -31,6 +31,7 @@
 import org.openhab.binding.networkhealth.NetworkHealthBindingProvider;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
+import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
 import org.openhab.model.item.binding.BindingConfigParseException;
@@ -67,7 +68,7 @@ public String getBindingType() {
 	 */
 	@Override
 	public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-		if (!(item instanceof SwitchItem)) {
+		if (!(item instanceof SwitchItem || item instanceof StringItem)) {
 			throw new BindingConfigParseException("item '" + item.getName()
 					+ "' is of type '" + item.getClass().getSimpleName()
 					+ "', only Switch- and StringItems are allowed - please check your *.items configuration");

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/RRD4jService.java
Patch:
@@ -285,7 +285,7 @@ private RrdDef getRrdDef(ConsolFun function, File file) {
 		return rrdDef;
 	}
 
-	private ConsolFun getConsolidationFunction(Item item) {
+	static public ConsolFun getConsolidationFunction(Item item) {
 		if(item instanceof NumberItem) {
 			return ConsolFun.AVERAGE;
 		} else {

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/actions/Twitter.java
Patch:
@@ -121,7 +121,7 @@ public static boolean sendTweet(String tweet) {
 
 		try {
 			Status status = client.updateStatus(tweet);
-			logger.debug("Successfully sent tweet '{}'", status.getText());
+			logger.debug("Successfully sent Tweet '{}'", status.getText());
 			return true;
 		} catch (TwitterException e) {
 			logger.error("Failed to send Tweet '" + tweet + "' because of: " + e.getLocalizedMessage());
@@ -167,7 +167,7 @@ private static AccessToken getAccessToken() {
 				logger.info("# Twitter-Integration: U S E R   I N T E R A C T I O N   R E Q U I R E D !!");
 				logger.info("# 1. Open URL '{}'", requestToken.getAuthorizationURL());
 				logger.info("# 2. Grant openHAB access to your Twitter account");
-				logger.info("# 3. Create an empty file 'client.pin' in your openHAB home directory");
+				logger.info("# 3. Create an empty file 'twitter.pin' in your openHAB home directory");
 				logger.info("# 4. Add the line 'pin=<authpin>' to the twitter.pin file");
 				logger.info("# 5. openHAB will automatically detect the file and complete the authentication process");
 				logger.info("# NOTE: You will only have 5 mins before openHAB gives up waiting for the pin!!!");

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/Energy.java
Patch:
@@ -41,8 +41,6 @@
 public class Energy {
 			
 	private DateTime time;
-	@SuppressWarnings("unused")
-	private DateTime local;
 	private long pulses;
 	private int interval;
 	

File: bundles/binding/org.openhab.binding.plugwise/src/main/java/org/openhab/binding/plugwise/internal/PlugwiseActivator.java
Patch:
@@ -41,7 +41,6 @@
  */
 public class PlugwiseActivator implements BundleActivator {
 
-	/** The logger */
 	private static Logger logger = LoggerFactory.getLogger(PlugwiseActivator.class); 
 	
 	/**

File: bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/FilterCriteria.java
Patch:
@@ -94,7 +94,7 @@ public enum Ordering {
 	private Operator operator = Operator.EQ;
 	
 	/** how to sort the result list by date */
-	private Ordering ordering = Ordering.ASCENDING;
+	private Ordering ordering = Ordering.DESCENDING;
 
 	/** filter result to only contain entries that evaluate to true with the given operator and state */
 	private State state;

File: bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java
Patch:
@@ -180,11 +180,13 @@ static public Boolean changedSince(Item item, AbstractInstant timestamp) {
 	static public Boolean changedSince(Item item, AbstractInstant timestamp, String serviceName) {
 		Iterable<HistoricItem> result = getAllStatesSince(item, timestamp, serviceName);
 		Iterator<HistoricItem> it = result.iterator();
+		State state = null;
 		while(it.hasNext()) {
 			HistoricItem hItem = it.next();
-			if(!hItem.getState().equals(item.getState())) {
+			if(state!=null && !hItem.getState().equals(state)) {
 				return true;
 			}
+			state = hItem.getState();
 		}
 		return false;
 	} 

File: bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/extensions/PersistenceExtensions.java
Patch:
@@ -180,11 +180,13 @@ static public Boolean changedSince(Item item, AbstractInstant timestamp) {
 	static public Boolean changedSince(Item item, AbstractInstant timestamp, String serviceName) {
 		Iterable<HistoricItem> result = getAllStatesSince(item, timestamp, serviceName);
 		Iterator<HistoricItem> it = result.iterator();
+		State state = null;
 		while(it.hasNext()) {
 			HistoricItem hItem = it.next();
-			if(!hItem.getState().equals(item.getState())) {
+			if(state!=null && !hItem.getState().equals(state)) {
 				return true;
 			}
+			state = hItem.getState();
 		}
 		return false;
 	} 

File: bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/FilterCriteria.java
Patch:
@@ -94,7 +94,7 @@ public enum Ordering {
 	private Operator operator = Operator.EQ;
 	
 	/** how to sort the result list by date */
-	private Ordering ordering = Ordering.ASCENDING;
+	private Ordering ordering = Ordering.DESCENDING;
 
 	/** filter result to only contain entries that evaluate to true with the given operator and state */
 	private State state;

File: bundles/core/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManager.java
Patch:
@@ -321,7 +321,7 @@ protected Iterable<Item> getAllItems(PersistenceConfiguration config) {
 					Item item = itemRegistry.getItem(singleItemConfig.getItem());
 					items.add(item);
 				} catch (ItemNotFoundException e) {
-					logger.warn("Item '{}' does not exist and thus will not be persisted.", singleItemConfig.getItem());
+					logger.debug("Item '{}' does not exist.", singleItemConfig.getItem());
 				}
 			}
 			if (itemCfg instanceof GroupConfig) {
@@ -334,7 +334,7 @@ protected Iterable<Item> getAllItems(PersistenceConfiguration config) {
 						items.addAll(groupItem.getAllMembers());
 					}
 				} catch (ItemNotFoundException e) {
-					logger.warn("Item group '{}' does not exist and thus its members will not be persisted.", groupName);
+					logger.debug("Item group '{}' does not exist.", groupName);
 				}
 			}
 		}

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/GCalEventDownloader.java
Patch:
@@ -118,7 +118,7 @@ public boolean isProperlyConfigured() {
 	public void activate() {
         try {
             scheduler = StdSchedulerFactory.getDefaultScheduler();
-        	start();
+            super.activate();
         }
         catch (SchedulerException se) {
             logger.error("initializing scheduler throws exception", se);

File: bundles/binding/org.openhab.binding.http.test/src/test/java/org/openhab/binding/http/internal/HttpGenericBindingProviderTest.java
Patch:
@@ -66,7 +66,7 @@ public void init() {
 	
 	@Test(expected=BindingConfigParseException.class)
 	public void testParseBindingConfig_wrongDirection() throws BindingConfigParseException {
-		provider.parseBindingConfig(null, "?");
+		provider.parseBindingConfig(testItem, "?");
 	}
 
 	@Test

File: bundles/binding/org.openhab.binding.dmx/src/main/java/org/openhab/binding/dmx/internal/action/FadeAction.java
Patch:
@@ -139,7 +139,7 @@ protected int calculateNewValue(DmxChannel channel, long currentTime) {
 			}
 		}
 
-		if (newValue == targetValue) {
+		if (newValue == targetValue && holdTime > -1) {
 			// we reached the target already, check if we need to hold longer
 			if (((holdTime > 0 || fadeTime > 0) && (duration >= fadeTime
 					+ holdTime))

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpBinding.java
Patch:
@@ -146,6 +146,8 @@ public void execute() {
 			for (String itemName : provider.getInBindingItemNames()) {
 				
 				String url = provider.getUrl(itemName);
+				url = String.format(url, Calendar.getInstance().getTime());
+
 				Properties headers = provider.getHttpHeaders(itemName);
 				int refreshInterval = provider.getRefreshInterval(itemName);
 				String transformation = provider.getTransformation(itemName);

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/items/SwitchItem.java
Patch:
@@ -49,8 +49,8 @@
  */
 public class SwitchItem extends GenericItem {
 	
-	protected static List<Class<? extends State>> acceptedDataTypes = new ArrayList<Class<? extends State>>();
-	protected static List<Class<? extends Command>> acceptedCommandTypes = new ArrayList<Class<? extends Command>>();
+	private static List<Class<? extends State>> acceptedDataTypes = new ArrayList<Class<? extends State>>();
+	private static List<Class<? extends Command>> acceptedCommandTypes = new ArrayList<Class<? extends Command>>();
 
 	static {
 		acceptedDataTypes.add(OnOffType.class);

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemUpdater.java
Patch:
@@ -81,9 +81,9 @@ public void receiveUpdate(String itemName, State newStatus) {
 								break;
 							}
 						} catch (InstantiationException e) {
-							logger.warn("InstantiationException on ", e.getMessage()); // Should never happen
+							logger.warn("InstantiationException on {}", e.getMessage()); // Should never happen
 						} catch (IllegalAccessException e) {
-							logger.warn("IllegalAccessException on ", e.getMessage()); // Should never happen
+							logger.warn("IllegalAccessException on {}", e.getMessage()); // Should never happen
 						}
 					}
 				}				

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java
Patch:
@@ -62,6 +62,7 @@ public AbstractActiveService() {
 	
 
 	public void activate() {
+		shutdown = false;
 		start();
 	}
 

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/CoreActivator.java
Patch:
@@ -194,10 +194,10 @@ private void checkVersion(String uuidString, String versionString) {
  			}
 		}
 		catch (HttpException he) {
-			logger.debug("Fatal protocol violation: {}", he);
+			logger.debug("Fatal protocol violation: {}", he.getMessage());
 		}
 		catch (IOException ioe) {
-			logger.debug("Fatal transport error: {}", ioe);
+			logger.debug("Fatal transport error: {}", ioe.getMessage());
 		}
 		finally {
 			method.releaseConnection();

File: bundles/binding/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/HueBinding.java
Patch:
@@ -145,7 +145,7 @@ private void computeCommandForItemOnBridge(Command command,
 			} else if (IncreaseDecreaseType.DECREASE.equals(command)) {
 				int resultingValue = bulb.decreaseBrightness(deviceConfig.getStepSize());
 				eventPublisher.postUpdate(itemName, new PercentType(resultingValue));
-			} else if (command instanceof PercentType) {
+			} else if ((command instanceof PercentType) && !(command instanceof HSBType)) {
 				bulb.setBrightness((255 / 100)
 						* ((PercentType) command).intValue());
 			}

File: bundles/binding/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/internal/ModbusSlave.java
Patch:
@@ -259,6 +259,7 @@ public void doSetCoil(int writeRegister, boolean b) {
 	 */
 	public void update(ModbusBinding binding) {
 		if (!connect()) {
+			resetConnection();
 			logger.info("ModbusSlave not connected");
 			return;
 		}

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/__binding-name__BindingProvider.java
Patch:
@@ -3,7 +3,7 @@
 #set( $symbol_escape = '\' )
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010-2012, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2010-2013, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/internal/__binding-name__Activator.java
Patch:
@@ -3,7 +3,7 @@
 #set( $symbol_escape = '\' )
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010-2012, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2010-2013, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/archetype/org.openhab.archetype.binding/src/main/resources/archetype-resources/src/main/java/internal/__binding-name__GenericBindingProvider.java
Patch:
@@ -3,7 +3,7 @@
 #set( $symbol_escape = '\' )
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010-2012, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2010-2013, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/persistence/org.openhab.persistence.db4o/src/main/java/org/openhab/persistence/db4o/internal/Db4oPersistenceService.java
Patch:
@@ -171,9 +171,9 @@ public Iterable<HistoricItem> query(FilterCriteria filter) {
 			}
 			
 			if(filter.getOrdering()==Ordering.ASCENDING) {
-				query.descend("timestamp").orderDescending();
-			} else {
 				query.descend("timestamp").orderAscending();
+			} else {
+				query.descend("timestamp").orderDescending();
 			}
 			ObjectSet<HistoricItem> results = query.execute();
 	

File: bundles/core/org.openhab.core.test/src/test/java/org/openhab/core/items/GroupItemTest.java
Patch:
@@ -65,7 +65,7 @@ public void setup() {
 	@Test
 	public void testGetAllMembers() {
 		int expectedAmountOfMembers = 5;
-		Assert.assertEquals(expectedAmountOfMembers, rootGroupItem.getAllMembers().length);
+		Assert.assertEquals(expectedAmountOfMembers, rootGroupItem.getAllMembers().size());
 		for (Item member : rootGroupItem.getAllMembers()) {
 			if (member instanceof GroupItem) {
 				fail("There are no GroupItems allowed in this Collection");

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SwitchRenderer.java
Patch:
@@ -104,7 +104,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		
 		if(s.getMappings().size()==0) {
 			if(state instanceof PercentType) {
-				state = ((PercentType) state).toBigDecimal().compareTo(BigDecimal.ZERO) > 0 ? OnOffType.ON : OnOffType.OFF;
+				state = ((PercentType) state).intValue() > 0 ? OnOffType.ON : OnOffType.OFF;
 			}
 			if(state.equals(OnOffType.ON)) {
 				snippet = snippet.replaceAll("%checked%", "checked=true");

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/servlet/CmdServlet.java
Patch:
@@ -107,7 +107,7 @@ public void service(ServletRequest req, ServletResponse res)
 					// this is no command officially supported and must be translated 
 					// into real commands by the webapp.
 					if ((item instanceof SwitchItem || item instanceof GroupItem) && commandName.equals("TOGGLE")) {
-						commandName = item.getState().equals(OnOffType.ON) ? "OFF" : "ON";
+						commandName = OnOffType.ON.equals(item.getStateAs(OnOffType.class)) ? "OFF" : "ON";
 					}
 					
 					Command command = TypeParser.parseCommand(item.getAcceptedCommandTypes(), commandName);

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/items/ColorItem.java
Patch:
@@ -81,7 +81,7 @@ public void setState(State state) {
 					this.state = HSBType.BLACK;
 				} else if(state==OnOffType.ON) {
 					this.state = HSBType.WHITE;
-				} else if(state instanceof PercentType) {
+				} else if(state instanceof PercentType && !(state instanceof HSBType)) {
 					this.state = new HSBType(DecimalType.ZERO, PercentType.ZERO, (PercentType) state);
 				} else {
 					super.setState(state);

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/items/ColorItem.java
Patch:
@@ -31,7 +31,6 @@
 import org.openhab.core.library.types.DecimalType;
 import org.openhab.core.library.types.HSBType;
 import org.openhab.core.library.types.OnOffType;
-import org.openhab.core.library.types.OpenClosedType;
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.types.State;
 
@@ -52,7 +51,7 @@ public ColorItem(String name) {
 			super(name);
 		}
 
-		public void send(OpenClosedType command) {
+		public void send(HSBType command) {
 			internalSend(command);
 		}
 

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/items/SwitchItem.java
Patch:
@@ -49,8 +49,8 @@
  */
 public class SwitchItem extends GenericItem {
 	
-	private static List<Class<? extends State>> acceptedDataTypes = new ArrayList<Class<? extends State>>();
-	private static List<Class<? extends Command>> acceptedCommandTypes = new ArrayList<Class<? extends Command>>();
+	protected static List<Class<? extends State>> acceptedDataTypes = new ArrayList<Class<? extends State>>();
+	protected static List<Class<? extends Command>> acceptedCommandTypes = new ArrayList<Class<? extends Command>>();
 
 	static {
 		acceptedDataTypes.add(OnOffType.class);

File: bundles/model/org.openhab.model.item.ui/src/org/openhab/model/ui/contentassist/ItemsProposalProvider.java
Patch:
@@ -56,6 +56,7 @@ public class ItemsProposalProvider extends AbstractItemsProposalProvider {
 		ITEMTYPES.add("Number");
 		ITEMTYPES.add("String");
 		ITEMTYPES.add("Dimmer");
+		ITEMTYPES.add("Color");
 		ITEMTYPES.add("Contact");
 		ITEMTYPES.add("Rollershutter");
 		ITEMTYPES.add("DateTime");

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/internal/SonosBinding.java
Patch:
@@ -1005,7 +1005,7 @@ public void setSonosZoneGroups(List<SonosZoneGroup> sonosZoneGroups) {
 	 * {@inheritDoc}
 	 */
 	public void bindingChanged(BindingProvider provider, String itemName) {
-		if(bindingStarted = false) {
+		if(bindingStarted == false) {
 			start();
 			bindingStarted = true;
 		}

File: bundles/binding/org.openhab.binding.sonos/src/main/java/org/openhab/binding/sonos/SonosCommandType.java
Patch:
@@ -611,7 +611,7 @@ public static List<SonosCommandType> getPolling(){
 		return result;
 	}
 	
-	public static SonosCommandType getCommandType(String sonosCommand, Direction direction) throws BindingConfigParseException {
+	public static SonosCommandType getCommandType(String sonosCommand, Direction direction) throws SonosIllegalCommandTypeException {
 
 		if ("".equals(sonosCommand)) {
 			return null;
@@ -624,7 +624,7 @@ public static SonosCommandType getCommandType(String sonosCommand, Direction dir
 			}
 		}
 
-		throw new BindingConfigParseException("Cannot find sonosCommandType for '"
+		throw new SonosIllegalCommandTypeException("Cannot find sonosCommandType for '"
 				+ sonosCommand + "' with direction '"+direction.toString()+"'");
 	}
 

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpOutBinding.java
Patch:
@@ -29,6 +29,7 @@
 package org.openhab.binding.http.internal;
 
 import static org.apache.commons.lang.StringUtils.isNotBlank;
+import static org.openhab.binding.http.internal.HttpGenericBindingProvider.CHANGED_COMMAND_KEY;
 
 import java.util.Calendar;
 
@@ -62,7 +63,7 @@ public class HttpOutBinding extends AbstractEventSubscriberBinding<HttpBindingPr
 	 */
 	@Override
 	protected void internalReceiveUpdate(String itemName, State newState) {
-		formatAndExecute(itemName, HttpGenericBindingProvider.UPDATE_COMMAND_KEY, newState);
+		formatAndExecute(itemName, CHANGED_COMMAND_KEY, newState);
 	}
 	
 	/**

File: bundles/binding/org.openhab.binding.plugwise/src/org/openhab/binding/plugwise/internal/PlugwiseGenericBindingProvider.java
Patch:
@@ -161,9 +161,10 @@ private void parseBindingConfig(PlugwiseBindingConfig config,Item item,
 					interval = Integer.valueOf(statusMatcher.group(3));
 				}
 
-				if(PlugwiseCommandType.validateBinding(plugwiseCommand, item.getClass())) {
+				PlugwiseCommandType type = PlugwiseCommandType.getCommandType(plugwiseCommand);	
+
+				if(PlugwiseCommandType.validateBinding(type, item)) {
 
-					PlugwiseCommandType type = PlugwiseCommandType.getCommandType(plugwiseCommand);	
 					PlugwiseBindingConfigElement newElement = new PlugwiseBindingConfigElement(plugwiseID,type,interval);
 
 					Command command = null;

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpGenericBindingProvider.java
Patch:
@@ -76,7 +76,7 @@ public String format(String pattern) {
 		}};
 	
 	/** {@link Pattern} which matches a binding configuration part */
-	private static final Pattern BASE_CONFIG_PATTERN = Pattern.compile("(<|>)\\[(.*?)\\]");
+	private static final Pattern BASE_CONFIG_PATTERN = Pattern.compile("(<|>)\\[(.*?)\\](\\s|$)");
 	
 	/** {@link Pattern} which matches an In-Binding */
 	private static final Pattern IN_BINDING_PATTERN = Pattern.compile("(.*?):(?!//)(\\d*):(.*)");

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpGenericBindingProvider.java
Patch:
@@ -76,7 +76,7 @@ public String format(String pattern) {
 		}};
 	
 	/** {@link Pattern} which matches a binding configuration part */
-	private static final Pattern BASE_CONFIG_PATTERN = Pattern.compile("(<|>)\\[(.*?)\\]");
+	private static final Pattern BASE_CONFIG_PATTERN = Pattern.compile("(<|>)\\[(.*?)\\](\\s|$)");
 	
 	/** {@link Pattern} which matches an In-Binding */
 	private static final Pattern IN_BINDING_PATTERN = Pattern.compile("(.*?):(?!//)(\\d*):(.*)");

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/config/KNXGenericBindingProvider.java
Patch:
@@ -55,6 +55,7 @@
 import com.google.common.base.Function;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Iterables;
+import com.google.common.collect.Lists;
 
 /**
  * <p>This class can parse information from the generic binding format and provides KNX binding information from it. It
@@ -187,7 +188,7 @@ public Datapoint apply(KNXBindingConfigItem configItem) {
 						}
 					});
 				
-				return datapoints;
+				return Lists.newArrayList(datapoints);
 			}
 			catch (NoSuchElementException e) {
 				// ignore and return null

File: bundles/binding/org.openhab.binding.ntp/src/main/java/org/openhab/binding/ntp/internal/NtpBinding.java
Patch:
@@ -121,7 +121,7 @@ public void execute() {
 				Calendar calendar = Calendar.getInstance(timeZone, locale);
 				calendar.setTimeInMillis(networkTimeInMillis);
 
-				eventPublisher.postUpdate(itemName, new DateTimeType(calendar)); break;
+				eventPublisher.postUpdate(itemName, new DateTimeType(calendar));
 			}
 		}
 		

File: bundles/binding/org.openhab.binding.knx.test/src/test/java/org/openhab/binding/knx/internal/config/KNXCoreTypeMapperTest.java
Patch:
@@ -35,7 +35,7 @@ public void testTypeMapping() throws KNXFormatException {
 
 		type = typeMapper.toType(createDP("5.004"), data);
 		assertNotNull(type);
-		assertEquals("15", type.toString());
+		assertEquals("5", type.toString());
 	}
 	
 	private Datapoint createDP(String dpt) throws KNXFormatException {

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/config/KNXGenericBindingProvider.java
Patch:
@@ -324,9 +324,9 @@ protected KNXBindingConfig parseBindingConfigString(Item item, String bindingCon
 				configItem.itemName = item.getName();
 
 				// check for the readable flag
-				if (datapointConfig.startsWith("<")) {
+				if (datapointConfig.trim().startsWith("<")) {
 					configItem.readable = true;
-					datapointConfig = datapointConfig.substring(1);
+					datapointConfig = datapointConfig.trim().substring(1);
 				}
 
 				// find the DPT for this entry

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/CoreActivator.java
Patch:
@@ -165,10 +165,10 @@ private void checkVersion(String version) {
 			String versionFromWeb = StringUtils.trimToEmpty(
 				IOUtils.toString(method.getResponseBodyAsStream()));
 			if (versionFromWeb.matches("\\d\\.\\d\\.\\d")) {
-				if (Collator.getInstance().compare(versionFromWeb, version) > 1) {
+				if (Collator.getInstance().compare(versionFromWeb, version) > 0) {
 					logger.info("A newer version of openHAB is available 'v{}'. Please check http://www.openhab.org for further information.", versionFromWeb);
-				} else if (Collator.getInstance().compare(versionFromWeb, version) < 1) {
-					logger.debug("You are running a potentially unstable version of openHAB. The current stable version is 'v{}'.", versionFromWeb);
+				} else if (Collator.getInstance().compare(versionFromWeb, version) < 0) {
+					logger.debug("You are running 'v{}' a potentially unstable version of openHAB. The current stable version is 'v{}'.", version, versionFromWeb);
 				}
  			} else {
  				logger.debug("Received version number from '{}' which doesn't match the required format '#.#.#' ({})", VERSION_URL, versionFromWeb);

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/ArithmeticGroupFunction.java
Patch:
@@ -112,7 +112,7 @@ private int count(List<Item> items, State state) {
 			int count = 0;
 			if(items!=null && state!=null) {
 				for(Item item : items) {
-					if(state.equals(item.getState())) {
+					if(state.equals(item.getStateAs(state.getClass()))) {
 						count++;
 					}
 				}
@@ -180,7 +180,7 @@ private int count(List<Item> items, State state) {
 			int count = 0;
 			if(items!=null && state!=null) {
 				for(Item item : items) {
-					if(state.equals(item.getState())) {
+					if(state.equals(item.getStateAs(state.getClass()))) {
 						count++;
 					}
 				}

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/DecimalType.java
Patch:
@@ -103,7 +103,7 @@ public boolean equals(Object obj) {
 			return true;
 		if (obj == null)
 			return false;
-		if (getClass() != obj.getClass())
+		if (!(obj instanceof DecimalType))
 			return false;
 		DecimalType other = (DecimalType) obj;
 		if (value == null) {

File: bundles/persistence/org.openhab.persistence.rrd4j/src/main/java/org/openhab/persistence/rrd4j/internal/charts/RRD4jChartServlet.java
Patch:
@@ -145,7 +145,8 @@ public void service(ServletRequest req, ServletResponse res)
 		try {
 			RrdGraph graph = new RrdGraph(graphDef);
 			BufferedImage bi = new BufferedImage(graph.getRrdGraphInfo().getWidth(), graph.getRrdGraphInfo().getHeight(), BufferedImage.TYPE_INT_RGB);
-			graph.render(bi.getGraphics());			
+			graph.render(bi.getGraphics());
+			res.setContentType("image/png");
 			javax.imageio.ImageIO.write(bi, "png", res.getOutputStream());
 		} catch(FileNotFoundException e) {
 			throw new ServletException("Could not read database files for all requested items.", e);

File: bundles/designer/org.openhab.designer.core/src/main/java/org/openhab/designer/core/config/ConfigurationFolderProvider.java
Patch:
@@ -41,7 +41,6 @@
 import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.preferences.ConfigurationScope;
 import org.eclipse.core.runtime.preferences.IPreferencesService;
-import org.eclipse.core.runtime.preferences.InstanceScope;
 import org.openhab.config.core.ConfigDispatcher;
 import org.openhab.designer.core.CoreActivator;
 import org.openhab.designer.core.DesignerCoreConstants;
@@ -66,6 +65,7 @@ static public synchronized IFolder getRootConfigurationFolder() throws CoreExcep
 			if(configFolder!=null) {
 				folder = defaultProject.getFolder("config");
 				folder.createLink(configFolder.toURI(), IResource.BACKGROUND_REFRESH|IResource.REPLACE, null);
+				ConfigDispatcher.setConfigFolder(configFolder.getAbsolutePath());
 			}
 		}
 		return folder;

File: bundles/designer/org.openhab.designer.ui/src/main/java/org/openhab/designer/ui/internal/views/ItemView.java
Patch:
@@ -135,6 +135,7 @@ private void initialize() {
 			if(registry!=null) {
 				registry.addItemRegistryChangeListener(this);
 				invisibleRoot = new Object();
+				allItemsChanged(null);
 			}
 		}
 

File: bundles/model/org.openhab.model.script/src/org/openhab/model/script/lib/NumberExtensions.java
Patch:
@@ -100,15 +100,15 @@ public static boolean operator_equals(Type type, Number x) {
 		if(type instanceof DecimalType) {
 			return ((DecimalType)type).toBigDecimal().compareTo(new BigDecimal(x.toString()))==0;
 		} else {
-			return false;
+			return type==x; // both might be null, then we should return true
 		}
 	}
 
 	public static boolean operator_notEquals(Type type, Number x) {
 		if(type instanceof DecimalType) {
 			return ((DecimalType)type).toBigDecimal().compareTo(new BigDecimal(x.toString()))!=0;
 		} else {
-			return false;
+			return type!=x; // both might be null, then we should return false, otherwise true
 		}
 	}
 

File: bundles/io/org.openhab.io.multimedia/src/main/java/org/openhab/io/multimedia/actions/Audio.java
Patch:
@@ -95,10 +95,11 @@ static public void playSound(String filename) {
 		}
 	}
 
-	static public void playStream(String url) {
+	static public synchronized void playStream(String url) {
 		if (streamPlayer != null) {
 			// if we are already playing a stream, stop it first
 			streamPlayer.close();
+			streamPlayer = null;
 		}
 		if (url == null) {
 			// the call was only for stopping the currently playing stream

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpInBinding.java
Patch:
@@ -39,7 +39,6 @@
 import org.openhab.core.binding.AbstractActiveBinding;
 import org.openhab.core.items.Item;
 import org.openhab.core.items.ItemNotFoundException;
-import org.openhab.core.items.ItemNotUniqueException;
 import org.openhab.core.items.ItemRegistry;
 import org.openhab.core.library.types.StringType;
 import org.openhab.core.transform.TransformationException;

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpOutBinding.java
Patch:
@@ -81,7 +81,7 @@ public void internalReceiveCommand(String itemName, Command command) {
 	 * @param itemName
 	 * @param command
 	 * 
-	 * @return the mathing binding provder or <code>null</code> if no binding
+	 * @return the matching binding provider or <code>null</code> if no binding
 	 * provider could be found
 	 */
 	private HttpBindingProvider findFirstMatchingBindingProvider(String itemName, Command command) {

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/persistence/GCalPresenceSimulation.java
Patch:
@@ -75,7 +75,7 @@ public class GCalPresenceSimulation implements PersistenceService {
 	
 	private static final String GCAL_SCHEDULER_GROUP = "GoogleCalendar";
 	
-	/** the upload interval as Cron-Expression (optional, defaults to 10 seconds) */
+	/** the upload interval (optional, defaults to 10 seconds) */
 	private static int uploadInterval = 10;
 	
 	/** holds the Google Calendar entries to upload to Google */

File: bundles/persistence/org.openhab.persistence.db4o.test/src/test/java/org/openhab/persistence/db4o/internal/Db4oPersistenceServiceTest.java
Patch:
@@ -30,6 +30,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.Arrays;
 
 import junit.framework.Assert;
 
@@ -76,8 +77,9 @@ public void testRemoveObsoleteBackupFiles() throws IOException {
 		
 		// Expected results ...
 		File[] result = db4oDir.listFiles();
-		Assert.assertEquals(Db4oConfiguration.maxBackups, result.length);
+		Arrays.sort(result);
 		
+		Assert.assertEquals(Db4oConfiguration.maxBackups, result.length);
 		for (int index = 0; index < result.length; index++) {
 			Assert.assertEquals(backupFileNames[expectedResultIndexes[index]] + "_store.db4o.bak", result[index].getName());
 		}

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/persistence/GCalPresenceSimulation.java
Patch:
@@ -158,7 +158,7 @@ private void scheduleUploadJob() {
 			    .build();
 
 			sched.scheduleJob(job, trigger);
-			logger.debug("Scheduled Google Calendar Upload-Job with interval '{}'", uploadInterval);
+			logger.debug("Scheduled Google Calendar Upload-Job with interval {}sec.", uploadInterval);
 		} catch (SchedulerException e) {
 			logger.warn("Could not create Google Calendar Upload-Job: {}", e.getMessage());
 		}		

File: bundles/model/org.openhab.model.script/xtend-gen/org/openhab/model/script/jvmmodel/ScriptIdentifiableSimpleNameProvider.java
Patch:
@@ -12,8 +12,7 @@ protected String _getSimpleName(final JvmType element) {
   }
   
   protected String _getSimpleName(final JvmIdentifiableElement element) {
-    String _simpleName = super.getSimpleName(element);
-    return _simpleName;
+    return super.getSimpleName(element);
   }
   
   public String getSimpleName(final JvmIdentifiableElement element) {

File: bundles/config/org.openhab.config.core/src/main/java/org/openhab/config/core/internal/ConfigActivator.java
Patch:
@@ -47,12 +47,15 @@ public void start(BundleContext bc) throws Exception {
 		
 		// upon startup of this bundle, we directly launch the configuration process
 		ConfigDispatcher.initializeBundleConfigurations();
+		ConfigDispatcher.scheduleRefreshJob();
 	}
 
 	/**
 	 * Called whenever the OSGi framework stops our bundle
 	 */
 	public void stop(BundleContext bc) throws Exception {
 		configurationAdminTracker.close();
+		ConfigDispatcher.cancelRefreshJob();
 	}
+	
 }

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/GCalConfiguration.java
Patch:
@@ -67,7 +67,7 @@ public class GCalConfiguration implements ManagedService {
 	 * to and the second represents the State.
 	 */
 	public static String executeScript = 
-		"> if (PresenceSimulation.state == ON) sendCommand(%s,%s)";
+		"> if (PresenceSimulation.state == ON) %s.sendCommand(%s)";
 	
 	private static boolean initialized = false;
 	

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/persistence/GCalPresenceSimulation.java
Patch:
@@ -80,7 +80,7 @@ public void store(Item item) {
 	 * @param item the item which state should be persisted.
 	 * @param alias the alias under which the item should be persisted.
 	 */
-	public void store(Item item, String alias) {
+	public void store(final Item item, final String alias) {
 		if (GCalConfiguration.isInitialized()) {
 			String newAlias = alias != null ? alias : item.getName();
 			

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/RESTApplication.java
Patch:
@@ -208,7 +208,7 @@ private Dictionary<String, String> getJerseyServletParams() {
         jerseyServletParams.put("org.atmosphere.cpr.padding", "whitespace");     
         
         jerseyServletParams.put("org.atmosphere.cpr.broadcastFilterClasses", "org.atmosphere.client.FormParamFilter");
-        jerseyServletParams.put("org.atmosphere.cpr.broadcasterLifeCyclePolicy", "EMPTY_DESTROY");
+        jerseyServletParams.put("org.atmosphere.cpr.broadcasterLifeCyclePolicy", "IDLE_DESTROY");
         jerseyServletParams.put("org.atmosphere.cpr.CometSupport.maxInactiveActivity", "300000");
         
         jerseyServletParams.put("com.sun.jersey.spi.container.ResourceFilter", "org.atmosphere.core.AtmosphereFilter");

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/broadcaster/GeneralBroadcaster.java
Patch:
@@ -60,10 +60,11 @@ public void onIdle() {
 			@Override
 			public void onEmpty() {
 				logger.debug("broadcaster '{}' is empty", this.toString());
-				for (ResourceStateChangeListener l : listeners){
+			/*	for (ResourceStateChangeListener l : listeners){
 					l.unregisterItems();
 					listeners.remove(l);
-				}
+
+				} */
 				
 			}
 			

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/RESTApplication.java
Patch:
@@ -208,7 +208,7 @@ private Dictionary<String, String> getJerseyServletParams() {
         jerseyServletParams.put("org.atmosphere.cpr.padding", "whitespace");     
         
         jerseyServletParams.put("org.atmosphere.cpr.broadcastFilterClasses", "org.atmosphere.client.FormParamFilter");
-        jerseyServletParams.put("org.atmosphere.cpr.broadcasterLifeCyclePolicy", "EMPTY_DESTROY");
+        jerseyServletParams.put("org.atmosphere.cpr.broadcasterLifeCyclePolicy", "IDLE_DESTROY");
         jerseyServletParams.put("org.atmosphere.cpr.CometSupport.maxInactiveActivity", "300000");
         
         jerseyServletParams.put("com.sun.jersey.spi.container.ResourceFilter", "org.atmosphere.core.AtmosphereFilter");

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/broadcaster/GeneralBroadcaster.java
Patch:
@@ -60,10 +60,11 @@ public void onIdle() {
 			@Override
 			public void onEmpty() {
 				logger.debug("broadcaster '{}' is empty", this.toString());
-				for (ResourceStateChangeListener l : listeners){
+			/*	for (ResourceStateChangeListener l : listeners){
 					l.unregisterItems();
 					listeners.remove(l);
-				}
+
+				} */
 				
 			}
 			

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/GCalConfiguration.java
Patch:
@@ -67,7 +67,7 @@ public class GCalConfiguration implements ManagedService {
 	 * to and the second represents the State.
 	 */
 	public static String executeScript = 
-		"> if (PresenceSimulation.state == ON) sendCommand(%s,%s)";
+		"> if (PresenceSimulation.state == ON) %s.sendCommand(%s)";
 	
 	private static boolean initialized = false;
 	

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/binding/AbstractGenericBindingProvider.java
Patch:
@@ -62,9 +62,10 @@ public abstract class AbstractGenericBindingProvider implements BindingConfigRea
 
 	/** 
 	 * stores information about the context of items. The map has this content
-	 * structure: context -> Set of itemNames
+	 * structure: context -> Set of Items
 	 */ 
-	private Map<String, Set<Item>> contextMap = Collections.synchronizedMap(new HashMap<String, Set<Item>>());
+	protected Map<String, Set<Item>> contextMap = Collections.synchronizedMap(new HashMap<String, Set<Item>>());
+	
 
 	public AbstractGenericBindingProvider() {
 		super();

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/beans/WidgetBean.java
Patch:
@@ -46,6 +46,7 @@
 @XmlRootElement(name="widget")
 public class WidgetBean {
 
+	public String widgetId;
 	public String type;
 	public String name;
 	
@@ -77,4 +78,4 @@ public class WidgetBean {
 	
 	public WidgetBean() {}
 		
-}
+}
\ No newline at end of file

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SwitchRenderer.java
Patch:
@@ -29,6 +29,7 @@
 package org.openhab.ui.webapp.internal.render;
 
 import org.eclipse.emf.common.util.EList;
+import org.openhab.core.items.GroupItem;
 import org.openhab.core.items.Item;
 import org.openhab.core.items.ItemNotFoundException;
 import org.openhab.core.library.items.RollershutterItem;
@@ -75,6 +76,8 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 			if(s.getMappings().size()==0) {
 				if(item instanceof RollershutterItem) {
 					snippetName = "rollerblind";
+				} else if (item instanceof GroupItem && ((GroupItem) item).getBaseItem() instanceof RollershutterItem) {
+					snippetName = "rollerblind";
 				} else {
 					snippetName = "switch";
 				}

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/items/ItemRegistryImpl.java
Patch:
@@ -194,7 +194,7 @@ public void allItemsChanged(ItemProvider provider, Collection<String> oldItemNam
 			}
 		}
 
-		Collection<Item> items = Collections.synchronizedCollection(new HashSet<Item>());
+		Collection<Item> items = Collections.synchronizedCollection(new ArrayList<Item>());
 		itemMap.put(provider, items);
 
 		for(Item item : provider.getItems()) {

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java
Patch:
@@ -94,7 +94,7 @@ public void removeItemFactory(ItemFactory factory) {
 	
 
 	public Collection<Item> getItems() {
-		Map<String, Item> items = new HashMap<String, Item>();
+		List<Item> items = new ArrayList<Item>();
 		if (modelRepository != null) {
 			for (String modelName : modelRepository.getAllModelNamesOfType("items")) {
 				ItemModel model = (ItemModel) modelRepository.getModel(modelName);
@@ -133,13 +133,13 @@ public Collection<Item> getItems() {
 						for (String groupName : modelItem.getGroups()) {
 							item.getGroupNames().add(groupName);
 						}
-						items.put(modelItem.getName(), item);
+						items.add(item);
 						dispatchBindings(modelName, item, modelItem.getBindings());
 					}
 				}
 			}
 		}
-		return items.values();
+		return items;
 	}
 	
 	private GroupItem applyGroupFunction(GenericItem baseItem, ModelGroupItem modelGroupItem, ModelGroupFunction function) {

File: bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleContextHelper.java
Patch:
@@ -72,7 +72,7 @@ public class RuleContextHelper {
 	 * @param rule the rule to get the context for
 	 * @return the evaluation context
 	 */
-	public static IEvaluationContext getContext(Rule rule) {
+	public static synchronized IEvaluationContext getContext(Rule rule) {
 	    RuleModel ruleModel = (RuleModel) rule.eContainer();
 
 	    // check if a context already exists on the resource

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/http/SecureHttpContext.java
Patch:
@@ -278,7 +278,7 @@ private boolean computeAuthHeader(HttpServletRequest request, final String authH
 	 */
 	private Subject authenticate(final String realm, final String username, final String password) {
 		try {
-			logger.trace("going to authenticate user '{}', real '{}'", username, realm);
+			logger.trace("going to authenticate user '{}', realm '{}'", username, realm);
 
 			Subject subject = new Subject();
 			

File: bundles/model/org.openhab.model.persistence/src/org/openhab/model/persistence/scoping/PersistenceScopeProvider.java
Patch:
@@ -13,5 +13,5 @@
  *
  */
 public class PersistenceScopeProvider extends AbstractDeclarativeScopeProvider {
-
+	
 }

File: bundles/persistence/org.openhab.persistence.db4o/src/main/java/org/openhab/persistence/db4o/internal/Db4oPersistenceService.java
Patch:
@@ -92,7 +92,7 @@ public void store(Item item, String alias) {
 		try {
 			db.store(historicItem);	
 			db.commit();
-			logger.debug("Stored item: " + historicItem.toString());
+			logger.debug("Stored item state '{}' -> '{}'", new String[] {historicItem.getName(), historicItem.getState().toString() } );
 		} catch(Db4oException e) {
 			db.rollback();
 			logger.warn("Error storing state for item '{}' as '{}': {}", new String[] { item.getName(), alias, e.getMessage() });

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/CoreActivator.java
Patch:
@@ -135,7 +135,7 @@ private void writeFile(File file, String content) {
 		file.getParentFile().mkdirs();
 		try {
 			IOUtils.write(content, new FileOutputStream(file));
-			logger.info("Created file '{}' with content '{}'", file.getAbsolutePath(), content);
+			logger.debug("Created file '{}' with content '{}'", file.getAbsolutePath(), content);
 		} catch (FileNotFoundException e) {
 			logger.error("Couldn't create file '" + file.getPath() + "'.", e);
 		} catch (IOException e) {

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/connection/KNXConnection.java
Patch:
@@ -115,8 +115,9 @@ public static synchronized ProcessCommunicator getCommunicator() {
 	public void setProcessListener(ProcessListener listener) {
 		if (pc != null) {
 			pc.removeProcessListener(KNXConnection.listener);
-			pc.addProcessListener(KNXConnection.listener);
+			pc.addProcessListener(listener);
 		}
+		KNXConnection.listener = listener;
 	}
 	
 	public void unsetProcessListener(ProcessListener listener) {

File: bundles/designer/org.openhab.designer.ui/src/main/java/org/openhab/designer/ui/internal/actions/SelectConfigFolderAction.java
Patch:
@@ -67,6 +67,7 @@ public void run() {
 			try {
 				File file = new File(selection);
 				if(isValidConfigurationFolder(file)) {
+					ConfigurationFolderProvider.saveFolderToPreferences(selection);
 					ConfigurationFolderProvider.setRootConfigurationFolder(new File(selection));
 					viewer.setInput(ConfigurationFolderProvider.getRootConfigurationFolder());
 				} else {

File: bundles/io/org.openhab.io.console/src/main/java/org/openhab/io/console/ConsoleInterpreter.java
Patch:
@@ -199,8 +199,7 @@ static public void handleSend(String[] args, Console console) {
 	static public void handleItems(String[] args, Console console) {
 		ItemRegistry registry = (ItemRegistry) ConsoleActivator.itemRegistryTracker.getService();
 		if(registry!=null) {
-			String pattern = args[0];
-			if(args.length==0) pattern ="*";
+			String pattern = (args.length == 0) ? "*" : args[0];
 			Collection<Item> items = registry.getItems(pattern);
 			if(items.size()>0) {
 				for(Item item : items) {

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/listeners/ItemTransportListener.java
Patch:
@@ -81,7 +81,9 @@ protected Object getResponseObject(AtmosphereResourceEvent<HttpServletRequest, H
 			// we want the full item data (as xml or json(p))
 			String responseType = getResponseType(request);
 			if(responseType!=null) {
-				String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+request.getContextPath() + RESTApplication.REST_SERVLET_ALIAS +"/";
+				String basePath = request.getScheme()+"://" + request.getServerName() + ":" +
+						request.getServerPort() + (request.getContextPath().equals("null")?"":request.getContextPath()) +
+						RESTApplication.REST_SERVLET_ALIAS +"/";
 				if (pathInfo.startsWith("/" + ItemResource.PATH_ITEMS)) {
 		        	String[] pathSegments = pathInfo.substring(1).split("/");
 		            if(pathSegments.length>=2) {

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/listeners/SitemapTransportListener.java
Patch:
@@ -68,7 +68,9 @@ protected Object getResponseObject(
 		String responseType = getResponseType(request);
 		
 		if(responseType!=null) {
-			URI basePath = UriBuilder.fromUri(request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+request.getContextPath() + RESTApplication.REST_SERVLET_ALIAS +"/").build();
+			URI basePath = UriBuilder.fromUri(request.getScheme() + "://" + request.getServerName() + ":" + 
+					request.getServerPort() + (request.getContextPath().equals("null")?"":request.getContextPath()) +
+					RESTApplication.REST_SERVLET_ALIAS + "/").build();
 			if (pathInfo.startsWith("/" + SitemapResource.PATH_SITEMAPS)) {
 	        	String[] pathSegments = pathInfo.substring(1).split("/");
 	            if(pathSegments.length>=3) {

File: bundles/binding/org.openhab.binding.fritzbox/src/main/java/org/openhab/binding/fritzbox/internal/FritzboxGenericBindingProvider.java
Patch:
@@ -36,8 +36,8 @@
 import org.openhab.binding.fritzbox.FritzboxBindingProvider;
 import org.openhab.core.binding.BindingConfig;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.items.SwitchItem;
+import org.openhab.library.tel.items.CallItem;
 import org.openhab.model.item.binding.AbstractGenericBindingProvider;
 import org.openhab.model.item.binding.BindingConfigParseException;
 import org.slf4j.Logger;
@@ -80,10 +80,10 @@ public String getBindingType() {
 	 */
 	@Override
 	public void validateItemType(Item item, String bindingConfig) throws BindingConfigParseException {
-		if (!(item instanceof SwitchItem || item instanceof StringItem)) {
+		if (!(item instanceof SwitchItem || item instanceof CallItem)) {
 			throw new BindingConfigParseException("item '" + item.getName()
 					+ "' is of type '" + item.getClass().getSimpleName()
-					+ "', only Switch- and StringItems are allowed - please check your *.items configuration");
+					+ "', only Switch- and CallItems are allowed - please check your *.items configuration");
 		}
 	}
 	

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskBinding.java
Patch:
@@ -48,7 +48,6 @@
 import org.openhab.core.events.EventPublisher;
 import org.openhab.core.items.Item;
 import org.openhab.core.items.ItemNotFoundException;
-import org.openhab.core.items.ItemNotUniqueException;
 import org.openhab.core.items.ItemRegistry;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.core.library.types.OnOffType;
@@ -215,8 +214,6 @@ public void onManagerEvent(ManagerEvent managerEvent) {
 							}
 							catch (ItemNotFoundException e) {
 							}
-							catch (ItemNotUniqueException e) {
-							}
 						}
 					}
 				}

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpGenericBindingProvider.java
Patch:
@@ -84,7 +84,7 @@ public String format(String pattern) {
 	private static final Pattern IN_BINDING_PATTERN = Pattern.compile("(.*?):(?!//)(\\d*):(.*)");
 	
 	/** {@link Pattern} which matches an Out-Binding */
-	private static final Pattern OUT_BINDING_PATTERN = Pattern.compile("(.*?):([A-Z]*):(.*)"	);
+	private static final Pattern OUT_BINDING_PATTERN = Pattern.compile("(.*?):([A-Z]*):(.*)");
 	
 
 	/**
@@ -184,7 +184,7 @@ protected HttpBindingConfig parseInBindingConfig(Item item, String bindingConfig
 		Matcher matcher = IN_BINDING_PATTERN.matcher(bindingConfig);
 		
 		if (!matcher.matches()) {
-			throw new BindingConfigParseException("bindingConfig '" + bindingConfig + "' doesn't contain a valid in-binding-configuration");
+			throw new BindingConfigParseException("bindingConfig '" + bindingConfig + "' doesn't represent a valid in-binding-configuration. A valid configuration is matched by the RegExp '(.*?):(?!//)(\\d*):(.*)'");
 		}
 		matcher.reset();
 				
@@ -225,7 +225,7 @@ protected HttpBindingConfig parseOutBindingConfig(Item item, String bindingConfi
 		Matcher matcher = OUT_BINDING_PATTERN.matcher(bindingConfig);
 		
 		if (!matcher.matches()) {
-			throw new BindingConfigParseException("bindingConfig '" + bindingConfig + "' doesn't contain a valid out-binding-configuration");
+			throw new BindingConfigParseException("bindingConfig '" + bindingConfig + "' doesn't contain a valid out-binding-configuration. A valid configuration is matched by the RegExp '(.*?):([A-Z]*):(.*)'");
 		}
 		matcher.reset();
 		

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpInBinding.java
Patch:
@@ -207,8 +207,6 @@ private Item getItemFromItemName(String itemName) {
 			return itemRegistry.getItem(itemName);
 		} catch (ItemNotFoundException e) {
 			logger.error("couldn't find item for itemName '" + itemName + "'");
-		} catch (ItemNotUniqueException e) {
-			logger.error("itemName '" + itemName + "' is not unique");
 		}
 		
 		return null;

File: bundles/core/org.openhab.core.autoupdate/src/main/java/org/openhab/core/autoupdate/internal/AutoUpdateBinding.java
Patch:
@@ -117,8 +117,6 @@ private void postUpdate(String itemName, State newStatus) {
 				}
 			} catch (ItemNotFoundException e) {
 				logger.debug("Received update for non-existing item: {}", e.getMessage());
-			} catch (ItemNotUniqueException e) {
-				logger.debug("Received update for a not uniquely identifiable item: {}", e.getMessage());
 			}
 		}
 	}

File: bundles/core/org.openhab.core.drools/src/main/java/org/openhab/core/drools/internal/RuleService.java
Patch:
@@ -61,7 +61,6 @@
 import org.openhab.core.items.GenericItem;
 import org.openhab.core.items.Item;
 import org.openhab.core.items.ItemNotFoundException;
-import org.openhab.core.items.ItemNotUniqueException;
 import org.openhab.core.items.ItemRegistry;
 import org.openhab.core.items.ItemRegistryChangeListener;
 import org.openhab.core.items.StateChangeListener;
@@ -225,8 +224,7 @@ public void receiveCommand(String itemName, Command command) {
 		try {
 			Item item = itemRegistry.getItem(itemName);
 			eventQueue.add(new CommandEvent(item, command));
-		} catch (ItemNotFoundException e) {
-		} catch (ItemNotUniqueException e) {}
+		} catch (ItemNotFoundException e) {}
 	}
 	
 	private void internalItemAdded(Item item) {

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/ExecuteCommandJob.java
Patch:
@@ -33,6 +33,7 @@
 import java.io.StreamTokenizer;
 import java.io.StringReader;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 
@@ -70,6 +71,7 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
 			String[] commands = parseCommands(content);
 			for (String command : commands) {
 				String[] args = parseCommand(command);
+				logger.debug("about to execute CommandJob with arguments {}", Arrays.asList(args));
 				ConsoleInterpreter.handleRequest(args, new LogConsole());
 			}
 		}
@@ -109,7 +111,7 @@ protected String[] parseCommands(String content) {
 	}
 
 	/**
-	 * Parses <code>command</code>. Utilizes the {@link StreamTokenizer} which
+	 * Parses a <code>command</code>. Utilizes the {@link StreamTokenizer} which
 	 * takes care of quoted Strings as well.
 	 * 
 	 * @param command the command to parse 

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/ItemResource.java
Patch:
@@ -232,8 +232,6 @@ static public Item getItem(String itemname) {
 				return item;
 			} catch (ItemNotFoundException e) {
 				logger.debug(e.getMessage());
-			} catch (ItemNotUniqueException e) {
-				logger.debug(e.getMessage());
 			}
         }
         return null;

File: bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java
Patch:
@@ -45,7 +45,6 @@
 import org.openhab.core.items.GenericItem;
 import org.openhab.core.items.Item;
 import org.openhab.core.items.ItemNotFoundException;
-import org.openhab.core.items.ItemNotUniqueException;
 import org.openhab.core.items.ItemRegistry;
 import org.openhab.core.items.ItemRegistryChangeListener;
 import org.openhab.core.items.StateChangeListener;
@@ -218,8 +217,6 @@ public void receiveCommand(String itemName, Command command) {
 					executeRules(rules, context);
 				} catch (ItemNotFoundException e) {
 					// ignore commands for non-existent items
-				} catch (ItemNotUniqueException e) {
-					// ignore commands for non-existent items
 				}
 			}
 		}

File: bundles/model/org.openhab.model.script/src/org/openhab/model/script/actions/ScriptExecution.java
Patch:
@@ -73,7 +73,7 @@ public static Object callScript(String scriptName) throws ScriptExecutionExcepti
 					throw new ScriptExecutionException("Script engine is not available.");
 				}
 			} else {
-				throw new ScriptExecutionException("Script '" + scriptName + " cannot be found.");
+				throw new ScriptExecutionException("Script '" + scriptName + "' cannot be found.");
 			}
 		} else {
 			throw new ScriptExecutionException("Model repository is not available.");

File: bundles/model/org.openhab.model.script/src/org/openhab/model/script/internal/engine/ScriptImpl.java
Patch:
@@ -82,14 +82,14 @@ public Object execute(IEvaluationContext evaluationContext) throws ScriptExecuti
 			    	return null;
 			    }
 			    if (result.getException() != null) {
-			        throw new ScriptExecutionException("An error occured during the script execution", result.getException());
+			        throw new ScriptExecutionException(result.getException().getMessage(), result.getException());
 			    } 
 			    return result.getResult();
 		    } catch(Throwable e) {
 		    	if(e instanceof ScriptExecutionException) {
 		    		throw (ScriptExecutionException) e;
 		    	} else {
-		    		throw new ScriptExecutionException("An error occured during the script execution", e);
+		    		throw new ScriptExecutionException("An error occured during the script execution: " + e.getMessage(), e);
 		    	}
 		    }
 		} else {

File: bundles/model/org.openhab.model.script/src/org/openhab/model/script/interpreter/ScriptInterpreter.java
Patch:
@@ -112,8 +112,6 @@ protected Item getItem(String itemName) {
 			return itemRegistry.getItem(itemName);
 		} catch (ItemNotFoundException e) {
 			return null;
-		} catch (ItemNotUniqueException e) {
-			return null;
 		}
 	}
 	

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/servlet/CmdServlet.java
Patch:
@@ -39,7 +39,6 @@
 import org.openhab.core.items.GroupItem;
 import org.openhab.core.items.Item;
 import org.openhab.core.items.ItemNotFoundException;
-import org.openhab.core.items.ItemNotUniqueException;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.types.Command;
@@ -119,8 +118,6 @@ public void service(ServletRequest req, ServletResponse res)
 					}
 				} catch (ItemNotFoundException e) {
 					logger.warn("Received command '{}' for item '{}', but the item does not exist in the registry", commandName, itemName);
-				} catch (ItemNotUniqueException e) {
-					logger.warn("Received command '{}' for an ambiguous item name.", commandName, e);
 				}
 			}
 		}

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/servlet/WebAppServlet.java
Patch:
@@ -42,7 +42,6 @@
 import org.openhab.core.items.GenericItem;
 import org.openhab.core.items.Item;
 import org.openhab.core.items.ItemNotFoundException;
-import org.openhab.core.items.ItemNotUniqueException;
 import org.openhab.core.items.StateChangeListener;
 import org.openhab.core.types.State;
 import org.openhab.model.sitemap.Frame;
@@ -231,8 +230,6 @@ private Set<GenericItem> getAllItems(EList<Widget> widgets) {
 						}
 					} catch (ItemNotFoundException e) {
 						// ignore
-					} catch (ItemNotUniqueException e) {
-						// ignore
 					}
 				} else {
 					if(widget instanceof Frame) {

File: bundles/io/org.openhab.io.servicediscovery/src/main/java/org/openhab/io/servicediscovery/internal/DiscoveryServiceImpl.java
Patch:
@@ -74,7 +74,7 @@ public void registerService(ServiceDescription description) {
 	public void unregisterService(ServiceDescription description) {
 		ServiceInfo serviceInfo = ServiceInfo.create(description.serviceType, description.serviceName, description.servicePort,
 				0, 0, description.serviceProperties);
-		logger.info("Unregistering new service " + description.serviceType + " at port " + 
+		logger.info("Unregistering service " + description.serviceType + " at port " + 
 				String.valueOf(description.servicePort));
 		jmdns.unregisterService(serviceInfo);
 	}

File: bundles/model/org.openhab.model.script/src/org/openhab/model/script/actions/ScriptExecution.java
Patch:
@@ -73,7 +73,7 @@ public static Object callScript(String scriptName) throws ScriptExecutionExcepti
 					throw new ScriptExecutionException("Script engine is not available.");
 				}
 			} else {
-				throw new ScriptExecutionException("Script '" + scriptName + " cannot be found.");
+				throw new ScriptExecutionException("Script '" + scriptName + "' cannot be found.");
 			}
 		} else {
 			throw new ScriptExecutionException("Model repository is not available.");

File: bundles/model/org.openhab.model.script/src/org/openhab/model/script/internal/engine/ScriptImpl.java
Patch:
@@ -82,14 +82,14 @@ public Object execute(IEvaluationContext evaluationContext) throws ScriptExecuti
 			    	return null;
 			    }
 			    if (result.getException() != null) {
-			        throw new ScriptExecutionException("An error occured during the script execution", result.getException());
+			        throw new ScriptExecutionException(result.getException().getMessage(), result.getException());
 			    } 
 			    return result.getResult();
 		    } catch(Throwable e) {
 		    	if(e instanceof ScriptExecutionException) {
 		    		throw (ScriptExecutionException) e;
 		    	} else {
-		    		throw new ScriptExecutionException("An error occured during the script execution", e);
+		    		throw new ScriptExecutionException("An error occured during the script execution: " + e.getMessage(), e);
 		    	}
 		    }
 		} else {

File: bundles/designer/org.openhab.designer.ui/src/main/java/org/openhab/designer/ui/internal/views/ConfigNavigator.java
Patch:
@@ -28,7 +28,6 @@
  */
 package org.openhab.designer.ui.internal.views;
 
-import org.eclipse.core.runtime.CoreException;
 import org.eclipse.ui.actions.ActionGroup;
 import org.eclipse.ui.navigator.CommonNavigator;
 import org.openhab.designer.core.config.ConfigurationFolderProvider;
@@ -39,7 +38,7 @@ public class ConfigNavigator extends CommonNavigator {
 	protected Object getInitialInput() {
 		try {
 			return ConfigurationFolderProvider.getRootConfigurationFolder().getProject();
-		} catch (CoreException e) {
+		} catch (Exception e) {
 			return null;
 		}
 	}

File: bundles/binding/org.openhab.binding.snmp/src/main/java/org/openhab/binding/snmp/internal/SnmpBinding.java
Patch:
@@ -49,7 +49,6 @@
 import org.snmp4j.MessageDispatcherImpl;
 import org.snmp4j.PDU;
 import org.snmp4j.Snmp;
-import org.snmp4j.TransportMapping;
 import org.snmp4j.mp.MPv1;
 import org.snmp4j.mp.MPv2c;
 import org.snmp4j.security.Priv3DES;
@@ -182,7 +181,6 @@ public void processPdu(CommandResponderEvent event) {
 					OID oid = provider.getOID(itemName);				
 					Variable variable = pdu.getVariable(oid);
 					eventPublisher.postUpdate(itemName, new StringType(variable.toString()));
-					break;
 				}
 			}
 			

File: bundles/core/org.openhab.core.drools/src/main/java/org/openhab/core/drools/event/StateEvent.java
Patch:
@@ -55,7 +55,7 @@ public StateEvent(Item item, State state) {
 		this(item, state, state);
 	}
 	
-	public boolean hasChanged() {
+	public boolean isChanged() {
 		return changed;
 	}
 

File: bundles/core/org.openhab.core.library.test/src/test/java/org/openhab/core/library/types/StringTypeTest.java
Patch:
@@ -52,6 +52,9 @@ public void testEquals() {
 		assertEquals(true, expected2.equals(new StringType("expected2")));
 		assertEquals(false, expected1.equals(new StringType("expected2")));
 		assertEquals(false, expected2.equals(new StringType("expected1")));
+		
+		assertEquals(true, expected1.equals("expected1"));
+		assertEquals(false, expected1.equals("expected2"));
 	}
 
 }

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/StringType.java
Patch:
@@ -72,6 +72,9 @@ public boolean equals(Object obj) {
 			return true;
 		if (obj == null)
 			return false;
+		if(obj instanceof String) {
+			return obj.equals(value);
+		}
 		if (getClass() != obj.getClass())
 			return false;
 		StringType other = (StringType) obj;

File: bundles/core/org.openhab.core.autoupdate/src/main/java/org/openhab/core/autoupdate/internal/AutoUpdateBinding.java
Patch:
@@ -44,7 +44,7 @@
  * updated automatically which is desired behavior in most of the cases. However
  * it could be useful to disable this default behavior.</p>
  * <p>For example when implementing validation steps before changing a State one
- * needs to control the State-Update himself.</p>
+ * needs to control the State update oneself.</p>
  * 
  * @author Thomas.Eichstaedt-Engelen
  * @since 0.9.1
@@ -99,7 +99,7 @@ public void receiveCommand(String itemName, Command command) {
 		if (autoUpdate && command instanceof State) {
 			eventPublisher.postUpdate(itemName, (State) command);
 		} else {
-			logger.trace("Item '{}' is not configured to updated it's State automatically -> please update State manually");
+			logger.trace("Item '{}' is not configured to updated its state automatically.");
 		}
 	}
 	

File: bundles/core/org.openhab.core.library.test/src/test/java/org/openhab/core/library/types/StringTypeTest.java
Patch:
@@ -52,6 +52,9 @@ public void testEquals() {
 		assertEquals(true, expected2.equals(new StringType("expected2")));
 		assertEquals(false, expected1.equals(new StringType("expected2")));
 		assertEquals(false, expected2.equals(new StringType("expected1")));
+		
+		assertEquals(true, expected1.equals("expected1"));
+		assertEquals(false, expected1.equals("expected2"));
 	}
 
 }

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/StringType.java
Patch:
@@ -72,6 +72,9 @@ public boolean equals(Object obj) {
 			return true;
 		if (obj == null)
 			return false;
+		if(obj instanceof String) {
+			return obj.equals(value);
+		}
 		if (getClass() != obj.getClass())
 			return false;
 		StringType other = (StringType) obj;

File: bundles/core/org.openhab.core.drools/src/main/java/org/openhab/core/drools/event/StateEvent.java
Patch:
@@ -55,7 +55,7 @@ public StateEvent(Item item, State state) {
 		this(item, state, state);
 	}
 	
-	public boolean hasChanged() {
+	public boolean isChanged() {
 		return changed;
 	}
 

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java
Patch:
@@ -112,7 +112,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 	 * correctly and <code>false</code> otherwise
 	 */
 	protected boolean checkSensorId(String sensorIdString) {
-		return sensorIdString.matches("\\[A-F0-9]{2}\\.[A-F0-9]{12}");
+		return sensorIdString.matches("[A-F0-9]{2}\\.[A-F0-9]{12}");
 	}
 	
 	

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java
Patch:
@@ -112,7 +112,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 	 * correctly and <code>false</code> otherwise
 	 */
 	protected boolean checkSensorId(String sensorIdString) {
-		return sensorIdString.matches("\\d{2}\\.[A-F0-9]{12}");
+		return sensorIdString.matches("\\[A-F0-9]{2}\\.[A-F0-9]{12}");
 	}
 	
 	

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/servlet/CmdServlet.java
Patch:
@@ -36,6 +36,7 @@
 import javax.servlet.ServletResponse;
 
 import org.openhab.core.events.EventPublisher;
+import org.openhab.core.items.GroupItem;
 import org.openhab.core.items.Item;
 import org.openhab.core.items.ItemNotFoundException;
 import org.openhab.core.items.ItemNotUniqueException;
@@ -106,7 +107,7 @@ public void service(ServletRequest req, ServletResponse res)
 					// we need a special treatment for the "TOGGLE" command of switches;
 					// this is no command officially supported and must be translated 
 					// into real commands by the webapp.
-					if(item instanceof SwitchItem && commandName.equals("TOGGLE")) {
+					if ((item instanceof SwitchItem || item instanceof GroupItem) && commandName.equals("TOGGLE")) {
 						commandName = item.getState().equals(OnOffType.ON) ? "OFF" : "ON";
 					}
 					

File: bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java
Patch:
@@ -190,7 +190,7 @@ public void stateChanged(Item item, State oldState, State newState) {
 			
 			// and now the rules, which only want to see state changes
 			if(triggerManager!=null) {
-				Iterable<Rule> rules = triggerManager.getRules(CHANGE, item, newState, oldState);
+				Iterable<Rule> rules = triggerManager.getRules(CHANGE, item, oldState, newState);
 				RuleEvaluationContext context = new RuleEvaluationContext();
 				context.newValue(QualifiedName.create(RuleContextHelper.VAR_PREVIOUS_STATE), oldState);
 				executeRules(rules, context);

File: bundles/model/org.openhab.model.script/src/org/openhab/model/script/internal/engine/ScriptImpl.java
Patch:
@@ -82,11 +82,11 @@ public Object execute(IEvaluationContext evaluationContext) throws ScriptExecuti
 			    	return null;
 			    }
 			    if (result.getException() != null) {
-			        throw new ScriptExecutionException("Error executing script", result.getException());
+			        throw new ScriptExecutionException("Error executing script: {}", result.getException());
 			    } 
 			    return result.getResult();
-		    } catch(RuntimeException e) {
-		    	throw new ScriptExecutionException("An exception occured during the script execution", e);
+		    } catch(Throwable e) {
+		    	throw new ScriptExecutionException("An error occured during the script execution", e);
 		    }
 		} else {
 	        throw new ScriptExecutionException("Script does not contain any expression");

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -61,6 +61,7 @@
 
 import com.google.common.base.Function;
 import com.google.common.collect.Iterables;
+import com.google.common.collect.Sets;
 
 /**
  * This is the central class that takes care of the event exchange between openHAB and KNX.
@@ -382,7 +383,7 @@ public Iterable<Datapoint> apply(KNXBindingProvider provider) {
 						return provider.getDatapoints(itemName, typeClass);
 					}
 				}));
-		return datapoints;
+		return Sets.newHashSet(datapoints);
 	}
 
 	/**
@@ -458,7 +459,7 @@ private void initializeDatapoints(Collection<Datapoint> readableDatapoints) {
 					logger.warn("Cannot read value for item '{}' from KNX bus!", datapoint.getName(), e);
 					logger.error(e.getMessage());
 				} catch (KNXIllegalArgumentException e) {
-					logger.warn("Error sending KNX read request for '{}'!", datapoint.getName(), e);
+					logger.warn("Error sending KNX read request for '{}': {}", new String[] { datapoint.getName(), e.getMessage() });
 				}
 				datapointsToInitialize.remove(datapoint);
 				long pause = KNXConnection.getReadingPause();

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/binding/AbstractActiveBinding.java
Patch:
@@ -29,6 +29,7 @@
 package org.openhab.core.binding;
 
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashSet;
 
 import org.openhab.core.events.EventPublisher;
@@ -45,7 +46,7 @@
 public abstract class AbstractActiveBinding<P extends BindingProvider> extends AbstractActiveService implements BindingChangeListener {
 
 	/** to keep track of all binding providers */
-	protected Collection<P> providers = new HashSet<P>();
+	protected Collection<P> providers = Collections.synchronizedSet(new HashSet<P>());
 	
 	protected EventPublisher eventPublisher = null;
 	

File: bundles/io/org.openhab.io.monitor/src/main/java/org/openhab/io/monitor/internal/EventLogger.java
Patch:
@@ -36,7 +36,7 @@
 
 public class EventLogger extends AbstractEventSubscriber {
 
-	static private Logger logger = LoggerFactory.getLogger(EventLogger.class);
+	static private Logger logger = LoggerFactory.getLogger("runtime.busevents");
 
 	public void receiveCommand(String itemName, Command command) {
 		logger.info("{} received command {}", itemName, command);

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/PercentType.java
Patch:
@@ -38,6 +38,8 @@
  */
 public class PercentType extends DecimalType {
 	
+	private static final long serialVersionUID = -9066279845951780879L;
+	
 	final static public PercentType ZERO = new PercentType(0); 
 	final static public PercentType HUNDRED = new PercentType(100); 
 	

File: bundles/model/org.openhab.model.script/src/org/openhab/model/script/scoping/ScriptExtensionClassNameProvider.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.Collection;
 
 import org.eclipse.xtext.xbase.scoping.featurecalls.StaticImplicitMethodsFeatureForTypeProvider.ExtensionClassNameProvider;
+import org.openhab.core.types.Type;
 import org.openhab.model.script.lib.NumberExtensions;
 
 import com.google.common.collect.Multimap;
@@ -69,6 +70,7 @@ protected Multimap<Class<?>, Class<?>> simpleComputeExtensionClasses() {
 		result.removeAll(Double.class);
 		result.removeAll(double.class);
 		result.put(Number.class, NumberExtensions.class);
+		result.put(Type.class, NumberExtensions.class);
 		result.put(Comparable.class, NumberExtensions.class);
 		return result;
 	}

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BTDeviceDiscoveryService.java
Patch:
@@ -131,7 +131,7 @@ public void setInterrupted(boolean interrupted) {
 	public void run() {
 		try {
 			LocalDevice localDevice = LocalDevice.getLocalDevice();
-			logger.info("Initializing local bluetooth device ({}, {})", localDevice.getBluetoothAddress(), localDevice.getFriendlyName());
+			logger.debug("Initializing local bluetooth device ({}, {})", localDevice.getBluetoothAddress(), localDevice.getFriendlyName());
 			DiscoveryAgent agent = localDevice.getDiscoveryAgent();
 			final Object inquiryCompletedEvent = new Object();
 

File: bundles/binding/org.openhab.binding.ntp/src/main/java/org/openhab/binding/ntp/internal/NtpBinding.java
Patch:
@@ -110,7 +110,7 @@ public void execute() {
 		
 		long networkTimeInMillis = getTime(hostname);
 		
-		logger.info("Got time from {}: {}", hostname, SDF.format(new Date(networkTimeInMillis)));
+		logger.debug("Got time from {}: {}", hostname, SDF.format(new Date(networkTimeInMillis)));
 				
 		for (NtpBindingProvider provider : providers) {
 			for (String itemName : provider.getItemNames()) {

File: bundles/config/org.openhab.config.core/src/main/java/org/openhab/config/core/ConfigDispatcher.java
Patch:
@@ -100,7 +100,7 @@ static public void initializeBundleConfigurations() {
 		String defaultConfigFilePath = getDefaultConfigurationFilePath();
 		File defaultConfigFile = new File(defaultConfigFilePath);
 		try {
-			logger.info("Process openHAB default configuration file '{}'.", defaultConfigFile.getAbsolutePath());
+			logger.debug("Processing openHAB default configuration file '{}'.", defaultConfigFile.getAbsolutePath());
 			processConfigFile(defaultConfigFile);
 		} catch (FileNotFoundException e) {
 			// we do not care if we do not have a default file
@@ -111,7 +111,7 @@ static public void initializeBundleConfigurations() {
 		String mainConfigFilePath = getMainConfigurationFilePath();
 		File mainConfigFile = new File(mainConfigFilePath);
 		try {
-			logger.info("Process openHAB main configuration file '{}'.", mainConfigFile.getAbsolutePath());
+			logger.debug("Processing openHAB main configuration file '{}'.", mainConfigFile.getAbsolutePath());
 			processConfigFile(mainConfigFile);
 		} catch (FileNotFoundException e) {
 			logger.warn("Main openHAB configuration file '{}' does not exist.", mainConfigFilePath);

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/CoreActivator.java
Patch:
@@ -45,7 +45,7 @@ public class CoreActivator implements BundleActivator {
 	 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)
 	 */
 	public void start(BundleContext context) throws Exception {
-		logger.info("openHAB Runtime Core has been started.");
+		logger.info("openHAB runtime has been started.");
 
 		java.util.logging.Logger rootLogger = java.util.logging.LogManager.getLogManager().getLogger("");
 		Handler[] handlers = rootLogger.getHandlers();

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java
Patch:
@@ -152,7 +152,7 @@ public RefreshThread(String name, long refreshInterval) {
 		@Override
 		public void run() {
 			
-			logger.info(getName() + " has been started");
+			logger.debug(getName() + " has been started");
 			
 			while (!shutdown) {
 				try {

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/RESTApplication.java
Patch:
@@ -136,7 +136,7 @@ public void activate() {
 			httpService.registerServlet(REST_SERVLET_ALIAS,
 				new AtmosphereServlet(), getJerseyServletParams(), createHttpContext());
 
- 			logger.info("Registered REST servlet as /rest");
+ 			logger.debug("Registered REST servlet as /rest");
         } catch (ServletException se) {
             throw new RuntimeException(se);
         } catch (NamespaceException se) {

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/ItemModelActivator.java
Patch:
@@ -41,7 +41,7 @@ public class ItemModelActivator implements BundleActivator {
 
 	public void start(BundleContext context) throws Exception {
 		new ItemsStandaloneSetup().createInjectorAndDoEMFRegistration();
-		logger.info("Registered 'item' configuration parser");		
+		logger.debug("Registered 'item' configuration parser");		
 	}
 
 	public void stop(BundleContext context) throws Exception {

File: bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/RuleModelActivator.java
Patch:
@@ -59,7 +59,7 @@ public void start(BundleContext bc) throws Exception {
 		scriptEngineTracker.open();		
 
 		RulesStandaloneSetup.doSetup();
-		logger.info("Registered 'rules' configuration parser");	
+		logger.debug("Registered 'rules' configuration parser");	
 	}
 
 	public void stop(BundleContext context) throws Exception {

File: bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java
Patch:
@@ -90,11 +90,11 @@ public void activate() {
 			triggerManager = new RuleTriggerManager();
 
 			if(!isEnabled()) {
-				logger.info("Rule engine is disabled. I guess we are running in the openHAB designer");
+				logger.info("Rule engine is disabled.");
 				return;
 			}
 			
-			logger.info("Started rule engine");		
+			logger.debug("Started rule engine");		
 			
 			// read all rule files
 			Iterable<String> ruleModelNames = modelRepository.getAllModelNamesOfType("rules");

File: bundles/model/org.openhab.model.sitemap/src/org/openhab/model/sitemap/internal/SitemapModelActivator.java
Patch:
@@ -40,7 +40,7 @@ public class SitemapModelActivator implements BundleActivator {
 	
 	public void start(BundleContext context) throws Exception {
 		new SitemapStandaloneSetup().createInjectorAndDoEMFRegistration();
-		logger.info("Registered 'sitemap' configuration parser");
+		logger.debug("Registered 'sitemap' configuration parser");
 	}
 
 	public void stop(BundleContext context) throws Exception {

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java
Patch:
@@ -195,6 +195,7 @@ private void dispatchBindings(String modelName, Item item,
 			BindingConfigReader reader = bindingConfigReaders.get(bindingType);
 			if (reader != null) {
 				try {
+					reader.validateItemType(item);
 					reader.processBindingConfiguration(modelName, item, config);
 				} catch (BindingConfigParseException e) {
 					logger.error("Binding information of type '" + bindingType

File: bundles/io/org.openhab.io.multimedia/src/main/java/org/openhab/io/multimedia/internal/tts/TTSServiceMacOS.java
Patch:
@@ -50,7 +50,7 @@ public class TTSServiceMacOS implements TTSService {
 	 */
 	public synchronized void say(String text, String voiceName) {
 
-		String command = "say " + (voiceName!=null ? " -v " + voiceName + " " : "") + text;  
+		String command = "say " + (voiceName!=null ? " -v " + voiceName + " " : "") + text.replace("-", " minus ");  
 		try {
 			Process process = Runtime.getRuntime().exec(command);
 			process.waitFor();

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/http/SecureHttpContext.java
Patch:
@@ -77,10 +77,9 @@ public class SecureHttpContext implements HttpContext, ManagedService {
 
 	private String realm = null;
 	
-	private static SecurityOptions securityOptions;
+	private static SecurityOptions securityOptions = SecurityOptions.OFF;
 	
 	private static SubnetInfo subnetUtils;
-
 	
 	public SecureHttpContext() {
 		// default constructor

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/http/SecureHttpContext.java
Patch:
@@ -90,7 +90,6 @@ public SecureHttpContext() {
 	public SecureHttpContext(HttpContext defaultContext, final String realm) {
 		this.defaultContext = defaultContext;
 		this.realm = realm;
-		SecureHttpContext.subnetUtils = new SubnetUtils("192.168.1.0/24").getInfo();
 	}
 
 	
@@ -325,6 +324,8 @@ public void updated(Dictionary config) throws ConfigurationException {
 				SecureHttpContext.subnetUtils = new SubnetUtils(netmask).getInfo();
 			}
 			else {
+				// set default a value ...
+				SecureHttpContext.subnetUtils = new SubnetUtils("192.168.1.0/24").getInfo();
 				logger.debug("couldn't find netmask configuration -> using '{}' instead", SecureHttpContext.subnetUtils.getCidrSignature());
 			}
 		}

File: bundles/io/org.openhab.io.rest.test/src/org/openhab/io/rest/test/internal/TestService.java
Patch:
@@ -16,8 +16,7 @@ public class TestService
 	 
    protected void bindHttpService( HttpService httpService )
    {
-      try {
-    	 
+      try { 	 
           httpService.registerResources( "/resttest", "/html", null );
           httpService.registerResources( "/resttest/jquery", "/jquery", null );
           logger.info("Registered resources for the REST TestApp");

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/SitemapResource.java
Patch:
@@ -187,9 +187,10 @@ public PageBean getPageBean(String sitemapName, String pageId, URI uri) {
 						parentPage = parentPage.eContainer();
 					}
 					if(parentPage instanceof Widget) {
-						String parentId = itemUIRegistry.getWidgetId((Widget) pageWidget);
+						String parentId = itemUIRegistry.getWidgetId((Widget) parentPage);
 						pageBean.parent = getPageBean(sitemapName, parentId, uri);
 						pageBean.parent.widgets = null;
+						pageBean.parent.parent = null;
 					} else if(parentPage instanceof Sitemap) {
 						pageBean.parent = getPageBean(sitemapName, sitemapName, uri);
 						pageBean.parent.widgets = null;

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/GenericItemUIProvider.java
Patch:
@@ -67,11 +67,10 @@ public Widget getDefaultWidget(Class<? extends org.openhab.core.items.Item> item
 
 	public ModelItem getItem(String itemName) {
 		if (itemName != null && modelRepository != null) {
-			for (String modelName : modelRepository
-					.getAllModelNamesOfType("items")) {
+			for (String modelName : modelRepository.getAllModelNamesOfType("items")) {
 				ItemModel model = (ItemModel) modelRepository.getModel(modelName);
 				for (ModelItem item : model.getItems()) {
-					if (item.getName().equals(itemName))
+					if (itemName.equals(item.getName()))
 						return item;
 				}
 			}

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/RESTApplication.java
Patch:
@@ -127,8 +127,8 @@ public void setItemUIRegistry(ItemUIRegistry itemUIRegistry) {
 	}
 	
 	public void unsetItemUIRegistry(ItemRegistry itemUIRegistry) {
-		RESTApplication.itemUIRegistry = null;
 		RESTApplication.itemUIRegistry.removeItemRegistryChangeListener(this);
+		RESTApplication.itemUIRegistry = null;
 	}
 
 	static public ItemUIRegistry getItemUIRegistry() {
@@ -141,8 +141,8 @@ public void setModelRepository(ModelRepository modelRepository) {
 	}
 	
 	public void unsetModelRepository(ModelRepository modelRepository) {
-		RESTApplication.modelRepository = null;
 		RESTApplication.modelRepository.removeModelRepositoryChangeListener(this);
+		RESTApplication.modelRepository = null;
 	}
 
 	static public ModelRepository getModelRepository() {

File: bundles/model/org.openhab.model.rule/src/org/openhab/model/rule/internal/engine/RuleEngine.java
Patch:
@@ -235,7 +235,6 @@ public void handleEvent(Event event) {
 			}
 		}
 
-		@Override
 		public void modelChanged(String modelName,
 				org.openhab.model.core.EventType type) {
 			if(isEnabled() && modelName.endsWith("rules")) {

File: bundles/model/org.openhab.model.script/src/org/openhab/model/script/internal/engine/ScriptEngineImpl.java
Patch:
@@ -88,7 +88,6 @@ public void deactivate() {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public Script newScriptFromString(String scriptAsString)
 			throws ScriptParsingException {
 		return newScriptFromXExpression(parseScriptIntoXTextEObject(scriptAsString));
@@ -97,7 +96,6 @@ public Script newScriptFromString(String scriptAsString)
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public Script newScriptFromXExpression(XExpression expression) {
 		ScriptImpl script = guiceInjector.getInstance(ScriptImpl.class);
 		script.setXExpression(expression);
@@ -107,7 +105,6 @@ public Script newScriptFromXExpression(XExpression expression) {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public Object executeScript(String scriptAsString)
 			throws ScriptParsingException, ScriptExecutionException {
 		return newScriptFromString(scriptAsString).execute();

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/beans/WidgetBean.java
Patch:
@@ -60,7 +60,7 @@ public class WidgetBean {
 	public String separator;
 
 	public ItemBean item;
-	public String link;
+	public String url;
 	public PageBean linkedPage;
 
 

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/beans/ItemListBean.java
Patch:
@@ -37,13 +37,13 @@
 import javax.xml.bind.annotation.XmlRootElement;
 
 /**
- * This is a java bean that is used with JAXB to serialize item lists to JSONP.
+ * This is a java bean that is used with JAXB to serialize item lists.
  *  
  * @author Kai Kreuzer
  * @since 0.9.0
  *
  */
-@XmlRootElement(name="itemlist")
+@XmlRootElement(name="items")
 public class ItemListBean {
 
 	public ItemListBean() {}
@@ -52,7 +52,7 @@ public ItemListBean(Collection<ItemBean> list) {
 		entries.addAll(list);
 	}
 	
-	@XmlElement(name="items")
+	@XmlElement(name="item")
 	public final List<ItemBean> entries = new ArrayList<ItemBean>();
 	
 }

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/beans/SitemapListBean.java
Patch:
@@ -43,7 +43,7 @@
  * @since 0.9.0
  *
  */
-@XmlRootElement(name="sitemaplist")
+@XmlRootElement(name="sitemaps")
 public class SitemapListBean {
 
 	public SitemapListBean() {}
@@ -52,7 +52,7 @@ public SitemapListBean(Collection<SitemapBean> list) {
 		entries.addAll(list);
 	}
 	
-	@XmlElement(name="sitemaps")
+	@XmlElement(name="sitemap")
 	public final List<SitemapBean> entries = new ArrayList<SitemapBean>();
 	
 }

File: bundles/binding/org.openhab.binding.asterisk/src/main/java/org/openhab/binding/asterisk/internal/AsteriskBinding.java
Patch:
@@ -243,8 +243,7 @@ else if (managerEvent instanceof HangupEvent) {
 		private void handleNewCall(Item item, NewChannelEvent event) {
 			CallType call = new CallType(
 					new StringType(event.getCallerIdNum()),
-					new StringType(event.getExten()), 
-					new StringType(event.getChannelStateDesc()));
+					new StringType(event.getExten()));
 			eventCache.put(event.getUniqueId(), call);
 			
 			if (item instanceof SwitchItem) {

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/types/ComplexType.java
Patch:
@@ -47,4 +47,5 @@ public interface ComplexType extends Type {
 	 * @return all constituents with their names
 	 */
 	public SortedMap<String, PrimitiveType> getConstituents();
+	
 }

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/items/ItemUIRegistryImpl.java
Patch:
@@ -57,8 +57,8 @@
 import org.openhab.core.transform.TransformationException;
 import org.openhab.core.transform.TransformationHelper;
 import org.openhab.core.transform.TransformationService;
-import org.openhab.core.types.PrimitiveType;
 import org.openhab.core.types.State;
+import org.openhab.core.types.Type;
 import org.openhab.core.types.UnDefType;
 import org.openhab.model.sitemap.Group;
 import org.openhab.model.sitemap.LinkableWidget;
@@ -277,8 +277,8 @@ public String getLabel(Widget w) {
 					formatPattern = String.format(formatPattern, 0f);
 				}
 				
-			} else if (state instanceof PrimitiveType) {
-				formatPattern = ((PrimitiveType) state).format(formatPattern);
+			} else if (state instanceof Type) {
+				formatPattern = ((Type) state).format(formatPattern);
 			}
 
 			label = label.substring(0, indexOpenBracket + 1) + formatPattern + label.substring(indexCloseBracket);

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/SitemapResource.java
Patch:
@@ -183,6 +183,8 @@ private Collection<SitemapBean> getSitemapBeans() {
 			SitemapBean bean = new SitemapBean();
 			bean.name = StringUtils.removeEnd(modelName, SITEMAP_FILEEXT);
 			bean.link = uriInfo.getAbsolutePathBuilder().path(bean.name).build().toASCIIString();
+			bean.homepage = new PageBean();
+			bean.homepage.link = bean.link + "/" + bean.name;
 			beans.add(bean);
 		}
 		return beans;

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/beans/PageBean.java
Patch:
@@ -51,9 +51,10 @@ public class PageBean {
 	public String title;
 	public String icon;
 	public String link;
+	public PageBean parent;
 	
 	@XmlElement(name="widget")
-	public final List<WidgetBean> widgets = new ArrayList<WidgetBean>();
+	public List<WidgetBean> widgets = new ArrayList<WidgetBean>();
 	
 	public PageBean() {}
 		

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/ItemResource.java
Patch:
@@ -97,7 +97,7 @@ public List<ItemBean> getItems() {
 		return getItemBeans();
 	}
 
-	@GET @Path("/jsonp")
+	@GET
     @Produces( { "application/x-javascript" })
     public JSONWithPadding getJSONPItems(@QueryParam("jsoncallback") @DefaultValue("callback") String callback) {
 		logger.debug("Received HTTP GET request at '{}' for JSONP.", uriInfo.getPath());
@@ -123,7 +123,7 @@ public ItemBean getItemData(@PathParam("itemname") String itemname) {
     	return getItemDataBean(itemname);
     }
 
-	@GET @Path("/{itemname: [a-zA-Z_0-9]*}/jsonp")
+	@GET @Path("/{itemname: [a-zA-Z_0-9]*}")
     @Produces( { "application/x-javascript" })
     public JSONWithPadding getJSONPItemData(@PathParam("itemname") String itemname, 
     		@QueryParam("jsoncallback") @DefaultValue("callback") String callback) {

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/RootResource.java
Patch:
@@ -58,13 +58,14 @@ public class RootResource {
 
     @Context UriInfo uriInfo;
 
-    @GET @Produces( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
+    @GET 
+    @Produces( { MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
     public RootBean getRoot() {
         return getRootBean();
 
     }
 
-	@GET @Path("/jsonp")
+	@GET
     @Produces( { "application/x-javascript" })
     public JSONWithPadding getJSONPRoot(@QueryParam("jsoncallback") @DefaultValue("callback") String callback) {
    		return new JSONWithPadding(getRootBean(), callback);

File: bundles/io/org.openhab.io.rest/src/main/java/org/openhab/io/rest/internal/resources/SitemapResource.java
Patch:
@@ -96,7 +96,7 @@ public Collection<SitemapBean> getSitemaps() {
 		return getSitemapBeans();
 	}
 
-	@GET @Path("/jsonp")
+	@GET
     @Produces( { "application/x-javascript" })
     public JSONWithPadding getJSONPSitemaps(@QueryParam("jsoncallback") @DefaultValue("callback") String callback) {
    		return new JSONWithPadding(new SitemapListBean(getSitemapBeans()), callback);
@@ -109,7 +109,7 @@ public SitemapBean getSitemapData(@PathParam("sitemapname") String sitemapname)
     	return getSitemapBean(sitemapname);
     }
 
-	@GET @Path("/{sitemapname: [a-zA-Z_0-9]*}/jsonp")
+	@GET @Path("/{sitemapname: [a-zA-Z_0-9]*}")
     @Produces( { "application/x-javascript" })
     public JSONWithPadding getJSONPSitemapData(@PathParam("sitemapname") String sitemapname, 
     		@QueryParam("jsoncallback") @DefaultValue("callback") String callback) {
@@ -124,7 +124,7 @@ public PageBean getPageData(@PathParam("sitemapname") String sitemapName, @PathP
     	return getPageBean(sitemapName, pageId);
     }
 
-	@GET @Path("/{sitemapname: [a-zA-Z_0-9]*}/{pageid: [a-zA-Z_0-9]*}/jsonp")
+	@GET @Path("/{sitemapname: [a-zA-Z_0-9]*}/{pageid: [a-zA-Z_0-9]*}")
     @Produces( { "application/x-javascript" })
     public JSONWithPadding getJSONPPageData(@PathParam("sitemapname") String sitemapname, @PathParam("pageid") String pageId,
     		@QueryParam("jsoncallback") @DefaultValue("callback") String callback) {

File: bundles/model/org.openhab.model.script/src/org/openhab/model/script/scoping/ScriptExtensionClassNameProvider.java
Patch:
@@ -67,6 +67,8 @@ protected Collection<String> computeLiteralClassNames() {
 	protected Multimap<Class<?>, Class<?>> simpleComputeExtensionClasses() {
 		Multimap<Class<?>, Class<?>> result = super.simpleComputeExtensionClasses();
 		result.removeAll(Comparable.class);
+		result.removeAll(Double.class);
+		result.removeAll(double.class);
 		result.put(Number.class, NumberExtensions.class);
 		result.put(Comparable.class, NumberExtensions.class);
 		return result;

File: bundles/io/org.openhab.io.multimedia/src/main/java/org/openhab/io/multimedia/actions/Audio.java
Patch:
@@ -152,7 +152,7 @@ static public void say(String text) {
 	 * @param voice the name of the voice to use or null, if the default voice should be used
 	 */
 	static public void say(String text, String voice) {
-		if(StringUtils.isBlank(text)) {
+		if(StringUtils.isNotBlank(text)) {
 			TTSService ttsService = getTTSService(MultimediaActivator.getContext(), System.getProperty("osgi.os"));
 			if(ttsService==null) {
 				ttsService = getTTSService(MultimediaActivator.getContext(), "any");

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/folder/FolderObserver.java
Patch:
@@ -127,7 +127,7 @@ public void run() {
 			}			
 			try {
 				if(gcdRefresh <= 0) break;
-				synchronized(this) {
+				synchronized(FolderObserver.this) {
 					wait(gcdRefresh * 1000L);
 				}
 			} catch (InterruptedException e) {
@@ -217,8 +217,9 @@ public void updated(Dictionary config) throws ConfigurationException {
 								this.start();
 							} else {
 								// make sure that we notify the sleeping thread and directly refresh the folders
-								synchronized (this) {
+								synchronized (FolderObserver.this) {
 									notify();
+									checkFolder(foldername);
 								}
 							}
 						} else {

File: bundles/binding/org.openhab.binding.mpd/src/main/java/org/openhab/binding/mpd/internal/PlayerCommandTypeMapping.java
Patch:
@@ -26,6 +26,7 @@
  * (EPL), the licensors of this Program grant you additional permission
  * to convey the resulting work.
  */
+
 package org.openhab.binding.mpd.internal;
 
 import org.openhab.core.library.types.IncreaseDecreaseType;

File: bundles/binding/org.openhab.binding.mpd/src/main/java/org/openhab/binding/mpd/internal/PlayerCommandTypeMapping.java
Patch:
@@ -26,6 +26,7 @@
  * (EPL), the licensors of this Program grant you additional permission
  * to convey the resulting work.
  */
+
 package org.openhab.binding.mpd.internal;
 
 import org.openhab.core.library.types.IncreaseDecreaseType;

File: bundles/core/org.openhab.core.scheduler/src/main/java/org/openhab/core/scheduler/internal/SchedulerActivator.java
Patch:
@@ -27,7 +27,7 @@
  * to convey the resulting work.
  */
 
-package org.openhab.binding.http.internal;
+package org.openhab.core.scheduler.internal;
 
 import org.osgi.framework.BundleActivator;
 import org.osgi.framework.BundleContext;

File: bundles/io/org.openhab.io.console/src/main/java/org/openhab/io/console/ConsoleInterpreter.java
Patch:
@@ -270,7 +270,7 @@ static public void handleSay(String[] args, Console console) {
 			msg.append(" ");
 		}
 		try {
-			Audio.speak(msg.toString());
+			Audio.say(msg.toString());
 			console.println("Said: " + msg);
 		} catch(NoClassDefFoundError e) {
 			// The dependency to the Audio class is optional, so we have to handle the case that it is not there

File: bundles/io/org.openhab.io.console/src/main/java/org/openhab/io/console/internal/commands/ConsoleCommandProvider.java
Patch:
@@ -85,6 +85,8 @@ public Object _openhab(CommandInterpreter interpreter) {
 			ConsoleInterpreter.handleUpdate(args, console);
 		} else if(arg.equals("status")) {
 			ConsoleInterpreter.handleStatus(args, console);
+		} else if(arg.equals("say")) {
+			ConsoleInterpreter.handleSay(args, console);
 		} else {
 			interpreter.println(getHelp());
 		}
@@ -102,7 +104,7 @@ public String getHelp() {
 		buffer.append("openhab " + ConsoleInterpreter.getCommandUsage() + "\n\t");
 		buffer.append("openhab " + ConsoleInterpreter.getUpdateUsage() + "\n\t");
 		buffer.append("openhab " + ConsoleInterpreter.getStatusUsage() + "\n\t");
-		buffer.append("openhab " + ConsoleInterpreter.getItemsUsage() + "\n");
+		buffer.append("openhab " + ConsoleInterpreter.getItemsUsage() + "\n\t");
 		buffer.append("openhab " + ConsoleInterpreter.getSayUsage() + "\n");
 		return buffer.toString();
 	}

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/GCalEventDownloader.java
Patch:
@@ -96,7 +96,7 @@ public class GCalEventDownloader extends AbstractActiveService implements Manage
 	 * content
 	 */
 	private static final Pattern EXTRACT_START_END_COMMANDS = 
-		Pattern.compile("start ?\\{(.*?)\\}\\s*end ?\\{(.*)\\}", Pattern.DOTALL);
+		Pattern.compile("start ?\\{(.*?)\\}\\s*end ?\\{(.*)\\}\\s*", Pattern.DOTALL);
 		
 
 	@Override
@@ -272,6 +272,8 @@ protected String[] parseEventContent(String content) {
 
 		if (!matcher.matches()) {
 			startCommands = content.toString();
+			logger.warn("given event content doesn't match regular expression for " +
+				"extracting start- and stopCommands -> using whole content as startCommand instead ({})", content.toString());
 		}
 		else {
 			matcher.reset();

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/GCalEventDownloader.java
Patch:
@@ -272,7 +272,7 @@ protected String[] parseEventContent(String content) {
 
 		if (!matcher.matches()) {
 			startCommands = content.toString();
-			logger.warn("given event content doesn't match regular expression for " +
+			logger.debug("given event content doesn't match regular expression for " +
 				"extracting start- and stopCommands -> using whole content as startCommand instead ({})", content.toString());
 		}
 		else {

File: bundles/io/org.openhab.io.gcal/src/main/java/org/openhab/io/gcal/internal/GCalEventDownloader.java
Patch:
@@ -96,7 +96,7 @@ public class GCalEventDownloader extends AbstractActiveService implements Manage
 	 * content
 	 */
 	private static final Pattern EXTRACT_START_END_COMMANDS = 
-		Pattern.compile("start ?\\{(.*?)\\}\\s*end ?\\{(.*)\\}", Pattern.DOTALL);
+		Pattern.compile("start ?\\{(.*?)\\}\\s*end ?\\{(.*)\\}\\s*", Pattern.DOTALL);
 		
 
 	@Override
@@ -272,6 +272,8 @@ protected String[] parseEventContent(String content) {
 
 		if (!matcher.matches()) {
 			startCommands = content.toString();
+			logger.warn("given event content doesn't match regular expression for " +
+				"extracting start- and stopCommands -> using whole content as startCommand instead ({})", content.toString());
 		}
 		else {
 			matcher.reset();

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpInBinding.java
Patch:
@@ -146,7 +146,7 @@ public void execute() {
 							logger.error("transformation throws exception [transformation="
 									+ transformation + ", response=" + response + "]", te);
 							
-							// in case of an error we return the reponse without any
+							// in case of an error we return the response without any
 							// transformation
 							transformedResponse = response;
 						}

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/connection/KNXConnection.java
Patch:
@@ -121,7 +121,6 @@ public void unsetProcessListener(ProcessListener listener) {
 		KNXConnection.listener = null;
 	}
 	
-	@SuppressWarnings("rawtypes")
 	public static synchronized void connect() {
 		
 		try {
@@ -203,7 +202,7 @@ private static KNXNetworkLink connectBySerial(String serialPort) throws KNXExcep
 		} catch(KNXException knxe) {
 			if(knxe.getMessage().startsWith("can not open serial port")) {
 				StringBuilder sb = new StringBuilder("Available ports are:\n");
-				Enumeration portList = CommPortIdentifier.getPortIdentifiers();
+				Enumeration<?> portList = CommPortIdentifier.getPortIdentifiers();
 				while (portList.hasMoreElements()) {
 					CommPortIdentifier id = (CommPortIdentifier) portList.nextElement();
 					if (id.getPortType() == CommPortIdentifier.PORT_SERIAL) {

File: bundles/binding/org.openhab.binding.mpd/src/main/java/org/openhab/binding/mpd/MpdBindingProvider.java
Patch:
@@ -31,7 +31,6 @@
 
 import org.openhab.binding.mpd.internal.PlayerCommandTypeMapping;
 import org.openhab.core.binding.BindingProvider;
-import org.openhab.core.library.types.OnOffType;
 
 
 /**

File: bundles/designer/org.openhab.designer.core/src/main/java/org/openhab/designer/core/internal/preferences/PreferenceInitializer.java
Patch:
@@ -51,7 +51,7 @@ public PreferenceInitializer() {
 	}
 
 	public void initializeDefaultPreferences() {
-		IScopeContext context = new DefaultScope();
+		IScopeContext context = DefaultScope.INSTANCE;
 		IEclipsePreferences node = context.getNode(CoreActivator.getDefault().getBundle().getSymbolicName());
 		String folderPath = ConfigConstants.MAIN_CONFIG_FOLDER;
 		node.put(DesignerCoreConstants.CONFIG_FOLDER_PREFERENCE, folderPath);

File: bundles/io/org.openhab.io.multimedia/src/main/java/org/openhab/io/multimedia/internal/MultimediaActivator.java
Patch:
@@ -29,7 +29,6 @@
 
 package org.openhab.io.multimedia.internal;
 
-import org.openhab.io.multimedia.actions.Audio;
 import org.osgi.framework.BundleActivator;
 import org.osgi.framework.BundleContext;
 import org.slf4j.Logger;

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/PageRenderer.java
Patch:
@@ -89,8 +89,8 @@ public StringBuilder processPage(String id, String sitemap, String label, EList<
 		// Note: we can have a span here, if the parent widget had a label
 		// with some value defined (e.g. "Windows [%d]"), which getLabel()
 		// will convert into a "Windows <span>5</span>".
-		if(label.contains("<span>")) {
-			label = label.substring(0, label.indexOf("<span>"));
+		if(label.contains("[") && label.endsWith("]")) {
+			label = label.replace("[", "").replace("]", "");
 		}
 		snippet = snippet.replaceAll("%label%", label);
 		snippet = snippet.replaceAll("%servletname%", WebAppServlet.SERVLET_NAME);

File: bundles/binding/org.openhab.binding.mpd/src/main/java/org/openhab/binding/mpd/internal/MpdBinding.java
Patch:
@@ -184,7 +184,7 @@ private void executePlayerCommand(String playerCommandLine) {
 				}
 			}
 			catch (MPDPlayerException pe) {
-				logger.error("error while executing {} command", pCommand, pe.getMessage());
+				logger.error("error while executing {} command: " + pe.getMessage(), pCommand);
 			}
 			catch (Exception e) {
 				logger.warn("unknow playerCommand '{}'", playerCommand);

File: bundles/binding/org.openhab.binding.fritzbox/src/main/java/org/openhab/binding/fritzbox/internal/FritzboxBinding.java
Patch:
@@ -85,7 +85,9 @@ public void activate() {
 	}
 	
 	public void deactivate() {
-		monitorThread.interrupt();
+		if(monitorThread!=null) {
+			monitorThread.interrupt();
+		}
 		monitorThread = null;
 	}
 	

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpGenericBindingProvider.java
Patch:
@@ -80,7 +80,7 @@ public class HttpGenericBindingProvider extends AbstractGenericBindingProvider i
 	private static final Pattern IN_BINDING_PATTERN = Pattern.compile("(.*?):(?!//)(\\d*):(.*)");
 	
 	/** {@link Pattern} which matches an Out-Binding */
-	private static final Pattern OUT_BINDING_PATTERN = Pattern.compile("([A-Z]*):([A-Z]*):(.*)"	);
+	private static final Pattern OUT_BINDING_PATTERN = Pattern.compile("(.*?):([A-Z]*):(.*)"	);
 	
 
 	/**
@@ -209,7 +209,7 @@ protected HttpBindingConfig parseOutBindingConfig(Item item, String bindingConfi
 		Matcher matcher = OUT_BINDING_PATTERN.matcher(bindingConfig);
 		
 		if (!matcher.matches()) {
-			throw new BindingConfigParseException("bindingConfig '" + bindingConfig + "' doesn't contain a valid in-binding-configuration");
+			throw new BindingConfigParseException("bindingConfig '" + bindingConfig + "' doesn't contain a valid out-binding-configuration");
 		}
 		matcher.reset();
 		

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/FrameRenderer.java
Patch:
@@ -57,7 +57,7 @@ public boolean canRender(Widget w) {
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("frame");
 
-		snippet = snippet.replaceAll("%label%", itemUIRegistry.getLabel(w));
+		snippet = snippet.replaceAll("%label%", getLabel(w));
 		
 		sb.append(snippet);
 		return ((Frame)w).getChildren();

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/GroupRenderer.java
Patch:
@@ -60,7 +60,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 
 		snippet = snippet.replaceAll("%id%", itemUIRegistry.getWidgetId(w));
 		snippet = snippet.replaceAll("%icon%", itemUIRegistry.getIcon(w));
-		snippet = snippet.replaceAll("%label%", itemUIRegistry.getLabel(w));
+		snippet = snippet.replaceAll("%label%", getLabel(w));
 
 		sb.append(snippet);
 		return null;

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/ListRenderer.java
Patch:
@@ -56,7 +56,7 @@ public boolean canRender(Widget w) {
 	 */
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("list");
-		snippet = snippet.replaceAll("%label%", itemUIRegistry.getLabel(w));
+		snippet = snippet.replaceAll("%label%", getLabel(w));
 		
 		String rowSnippet = getSnippet("list_row");
 		String state = itemUIRegistry.getState(w).toString();

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SelectionRenderer.java
Patch:
@@ -59,7 +59,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		String snippet = getSnippet("selection");
 
 		snippet = snippet.replaceAll("%icon%", itemUIRegistry.getIcon(w));
-		snippet = snippet.replace("%label_header%", itemUIRegistry.getLabel(w));
+		snippet = snippet.replace("%label_header%", getLabel(w));
 		
 		String state = itemUIRegistry.getState(w).toString();
 		Selection selection = (Selection) w;

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SliderRenderer.java
Patch:
@@ -73,7 +73,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		snippet = snippet.replaceAll("%id%", itemUIRegistry.getWidgetId(s));
 		snippet = snippet.replaceAll("%icon%", itemUIRegistry.getIcon(s));
 		snippet = snippet.replaceAll("%item%", w.getItem());
-		snippet = snippet.replaceAll("%label%", itemUIRegistry.getLabel(s));
+		snippet = snippet.replaceAll("%label%", getLabel(s));
 		snippet = snippet.replaceAll("%state%", itemUIRegistry.getState(s).toString());
 		snippet = snippet.replaceAll("%frequency%", frequency);
 		snippet = snippet.replaceAll("%switch%", s.isSwitchEnabled() ? "1" : "0");

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SwitchRenderer.java
Patch:
@@ -96,7 +96,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 		snippet = snippet.replaceAll("%id%", itemUIRegistry.getWidgetId(w));
 		snippet = snippet.replaceAll("%icon%", itemUIRegistry.getIcon(w));
 		snippet = snippet.replaceAll("%item%", w.getItem());
-		snippet = snippet.replaceAll("%label%", itemUIRegistry.getLabel(w));
+		snippet = snippet.replaceAll("%label%", getLabel(w));
 		snippet = snippet.replaceAll("%servletname%", WebAppServlet.SERVLET_NAME);
 		
 		State state = itemUIRegistry.getState(w);

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/TextRenderer.java
Patch:
@@ -62,7 +62,7 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 
 		snippet = snippet.replaceAll("%id%", itemUIRegistry.getWidgetId(w));
 		snippet = snippet.replaceAll("%icon%", itemUIRegistry.getIcon(w));
-		snippet = snippet.replaceAll("%label%", itemUIRegistry.getLabel(w));
+		snippet = snippet.replaceAll("%label%", getLabel(w));
 		
 		sb.append(snippet);
 		return null;

File: bundles/core/org.openhab.core.rules/src/main/java/org/openhab/core/rules/internal/RuleService.java
Patch:
@@ -129,7 +129,7 @@ public void activate() {
 				itemAdded(item);
 			}
 		}
-		setInterrupted(false);
+		
 		start();
 	}
 	
@@ -139,7 +139,7 @@ public void deactivate() {
 			ksession = null;
 		}
 		factHandleMap.clear();
-		setInterrupted(true);
+		shutdown();
 	}
 	
 	public void setItemRegistry(ItemRegistry itemRegistry) {

File: bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/XsltTransformationService.java
Patch:
@@ -42,6 +42,7 @@
 import org.openhab.config.core.ConfigDispatcher;
 import org.openhab.core.transform.TransformationException;
 import org.openhab.core.transform.TransformationService;
+import org.openhab.core.transform.internal.TransformationActivator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -70,7 +71,7 @@ public class XsltTransformationService implements TransformationService {
 	 * @param source
 	 *            the input to transform
 	 * 
-	 * @{inheritDoc
+	 * @{inheritDoc}
 	 * 
 	 */
 	public String transform(String filename, String source) throws TransformationException {
@@ -82,7 +83,7 @@ public String transform(String filename, String source) throws TransformationExc
 		Source xsl = null;
 
 		try {
-			String path = ConfigDispatcher.getConfigFolder() + File.separator + filename;
+			String path = ConfigDispatcher.getConfigFolder() + File.separator + TransformationActivator.TRANSFORM_FOLDER_NAME + File.separator + filename;
 			xsl = new StreamSource(new File(path));
 		} catch (Exception e) {
 			String message = "opening file '" + filename + "' throws exception";

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpUtil.java
Patch:
@@ -84,6 +84,7 @@ public static String executeUrl(String httpMethod, String url, int timeout) {
 
 		Credentials credentials = extractCredentials(url);
 		if (credentials != null) {
+			client.getParams().setAuthenticationPreemptive(true); 
 			client.getState().setCredentials(AuthScope.ANY, credentials);			
 		}
 

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/config/KNXGenericBindingProvider.java
Patch:
@@ -251,7 +251,9 @@ private KNXBindingConfig parseBindingConfigString(Item item, String bindingConfi
 				String dptId = null;
 				String[] segments = datapointConfig.trim().split(":");
 				Class<? extends Type> typeClass = item.getAcceptedCommandTypes().size()>0 ?
-					item.getAcceptedCommandTypes().get(i) : item.getAcceptedDataTypes().get(0);
+					item.getAcceptedCommandTypes().get(i) : 
+						item.getAcceptedDataTypes().size() >1 ? 
+								item.getAcceptedDataTypes().get(i) : item.getAcceptedDataTypes().get(0);
 				dptId = segments.length == 1 ? getDefaultDPTId(typeClass) : segments[0];
 				if (dptId == null || dptId.trim().isEmpty()) {
 					throw new BindingConfigParseException("No DPT could be determined for the type '"

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/config/KNXGenericBindingProvider.java
Patch:
@@ -251,7 +251,9 @@ private KNXBindingConfig parseBindingConfigString(Item item, String bindingConfi
 				String dptId = null;
 				String[] segments = datapointConfig.trim().split(":");
 				Class<? extends Type> typeClass = item.getAcceptedCommandTypes().size()>0 ?
-					item.getAcceptedCommandTypes().get(i) : item.getAcceptedDataTypes().get(0);
+					item.getAcceptedCommandTypes().get(i) : 
+						item.getAcceptedDataTypes().size() >1 ? 
+								item.getAcceptedDataTypes().get(i) : item.getAcceptedDataTypes().get(0);
 				dptId = segments.length == 1 ? getDefaultDPTId(typeClass) : segments[0];
 				if (dptId == null || dptId.trim().isEmpty()) {
 					throw new BindingConfigParseException("No DPT could be determined for the type '"

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/TimeType.java
Patch:
@@ -32,11 +32,12 @@
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
+import java.util.Locale;
 
 
 public class TimeType extends CalendarType {
 	
-	private final static SimpleDateFormat TIME_FORMATTER = new SimpleDateFormat("EEE, hh:mm:ss");
+	private final static SimpleDateFormat TIME_FORMATTER = new SimpleDateFormat("EEE, hh:mm:ss", Locale.US);
 	
 	public TimeType(Calendar calendar) {
 		super(calendar);

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/TimeType.java
Patch:
@@ -32,11 +32,12 @@
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
+import java.util.Locale;
 
 
 public class TimeType extends CalendarType {
 	
-	private final static SimpleDateFormat TIME_FORMATTER = new SimpleDateFormat("EEE, hh:mm:ss");
+	private final static SimpleDateFormat TIME_FORMATTER = new SimpleDateFormat("EEE, hh:mm:ss", Locale.US);
 	
 	public TimeType(Calendar calendar) {
 		super(calendar);

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpUtil.java
Patch:
@@ -116,7 +116,7 @@ public static String executeUrl(String httpMethod, String url, int timeout) {
 			logger.error("Fatal protocol violation: ", he);
 		}
 		catch (IOException e) {
-			logger.error("Fatal transport error: ", e);
+			logger.error("Fatal transport error: {}", e.toString());
 		}
 		finally {
 			method.releaseConnection();

File: bundles/binding/org.openhab.binding.networkhealth/src/main/java/org/openhab/binding/networkhealth/internal/NetworkHealthBinding.java
Patch:
@@ -113,8 +113,9 @@ public void execute() {
 				catch (IOException ioe) {
 					logger.debug("couldn't establish network connection [host '{}' port '{}' timeout '{}']", new Object[] {hostname, port, timeout});
 				}
-
-				eventPublisher.postUpdate(itemName, success ? OnOffType.ON : OnOffType.OFF);
+				if(eventPublisher!=null) {
+					eventPublisher.postUpdate(itemName, success ? OnOffType.ON : OnOffType.OFF);
+				}
 			}
 		}
 		

File: bundles/core/org.openhab.core.library.test/src/test/java/org/openhab/core/library/types/PercentTypeTest.java
Patch:
@@ -26,6 +26,7 @@
  * (EPL), the licensors of this Program grant you additional permission
  * to convey the resulting work.
  */
+
 package org.openhab.core.library.types;
 
 import org.junit.Test;

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/PercentType.java
Patch:
@@ -39,6 +39,9 @@
  */
 public class PercentType extends DecimalType {
 	
+	final static public PercentType ZERO = new PercentType(0); 
+	final static public PercentType HUNDRED = new PercentType(100); 
+	
 	public PercentType() {
 		super();
 	}

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java
Patch:
@@ -66,6 +66,7 @@ public void deactivate() {
 
 	public void setInterrupted(boolean interrupted) {
 		this.interrupted = interrupted;
+		this.refreshThread = null;
 	}
 	
 	/**

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/folder/FolderObserver.java
Patch:
@@ -87,9 +87,6 @@ public class FolderObserver extends Thread implements ManagedService {
 	/* a counter to know which folders need to be refreshed when waking up */
 	private int refreshCount = 0;
 	
-	/* a lock for being able to wake up the dormant thread */
-	private Object waitLock = new Object();
-	
 	/* the model repository is provided as a service */
 	private ModelRepository modelRepo = null;
 	

File: bundles/model/org.openhab.model.item/src-gen/org/openhab/model/items/ItemModel.java
Patch:
@@ -53,7 +53,7 @@ public interface ItemModel extends EObject
 {
   /**
    * Returns the value of the '<em><b>Items</b></em>' containment reference list.
-   * The list contents are of type {@link org.openhab.model.items.Item}.
+   * The list contents are of type {@link org.openhab.model.items.ModelItem}.
    * <!-- begin-user-doc -->
    * <p>
    * If the meaning of the '<em>Items</em>' containment reference list isn't clear,
@@ -65,6 +65,6 @@ public interface ItemModel extends EObject
    * @model containment="true"
    * @generated
    */
-  EList<Item> getItems();
+  EList<ModelItem> getItems();
 
 } // ItemModel

File: bundles/model/org.openhab.model.sitemap.ui/src/org/openhab/model/ui/contentassist/SitemapProposalProvider.java
Patch:
@@ -59,7 +59,6 @@ public void completeGroup_Item(EObject model, Assignment assignment,
 					acceptor.accept(completionProposal);
 				}
 			}
-			context.setPrefix("");
 		}
 	}
 	
@@ -87,7 +86,6 @@ public void doComplete(ContentAssistContext context,
 				ICompletionProposal completionProposal = createCompletionProposal(item.getName(), context);
 				acceptor.accept(completionProposal);
 			}
-			context.setPrefix("");
 		}
 	}
 }

File: bundles/binding/org.openhab.binding.gcal/src/main/java/org/openhab/binding/gcal/internal/GCalEventDownloader.java
Patch:
@@ -85,7 +85,7 @@ public class GCalEventDownloader extends AbstractActiveService implements Manage
 	private String username = "";
 	private String password = "";
 	private String url = "";
-	private int refreshInterval = 60000;
+	private int refreshInterval = 900000;
 	
 	/**
 	 * RegEx to extract the start and end commands 

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/StringType.java
Patch:
@@ -35,6 +35,8 @@
 
 public class StringType implements PrimitiveType, State, Command {
 
+	public final static StringType EMPTY = new StringType();
+	
 	private String value;
 
 	public StringType() {

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/PercentType.java
Patch:
@@ -39,6 +39,7 @@
  */
 public class PercentType extends DecimalType {
 	
+	final static public PercentType ZERO = new PercentType(0); 
 	final static public PercentType HUNDRED = new PercentType(100); 
 	
 	public PercentType() {

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java
Patch:
@@ -70,7 +70,7 @@ public State getState() {
 	 * {@inheritDoc}
 	 */
 	public State getStateAs(Class<? extends State> typeClass) {
-		if(state.getClass().equals(typeClass)) {
+		if(typeClass!=null && typeClass.isInstance(state)) {
 			return state;
 		} else {
 			return null;

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/connection/KNXConnection.java
Patch:
@@ -1,5 +1,5 @@
 /**
-v  * openHAB, the open Home Automation Bus.
+ * openHAB, the open Home Automation Bus.
  * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a

File: bundles/core/org.openhab.core.library.test/src/test/java/org/openhab/core/library/types/PercentTypeTest.java
Patch:
@@ -26,6 +26,7 @@
  * (EPL), the licensors of this Program grant you additional permission
  * to convey the resulting work.
  */
+
 package org.openhab.core.library.types;
 
 import org.junit.Test;

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/PercentType.java
Patch:
@@ -39,6 +39,8 @@
  */
 public class PercentType extends DecimalType {
 	
+	final static public PercentType HUNDRED = new PercentType(100); 
+	
 	public PercentType() {
 		super();
 	}

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/service/AbstractActiveService.java
Patch:
@@ -66,6 +66,7 @@ public void deactivate() {
 
 	public void setInterrupted(boolean interrupted) {
 		this.interrupted = interrupted;
+		this.refreshThread = null;
 	}
 
 	/**

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/folder/FolderObserver.java
Patch:
@@ -87,9 +87,6 @@ public class FolderObserver extends Thread implements ManagedService {
 	/* a counter to know which folders need to be refreshed when waking up */
 	private int refreshCount = 0;
 	
-	/* a lock for being able to wake up the dormant thread */
-	private Object waitLock = new Object();
-	
 	/* the model repository is provided as a service */
 	private ModelRepository modelRepo = null;
 	

File: bundles/model/org.openhab.model.item/src-gen/org/openhab/model/items/ItemModel.java
Patch:
@@ -53,7 +53,7 @@ public interface ItemModel extends EObject
 {
   /**
    * Returns the value of the '<em><b>Items</b></em>' containment reference list.
-   * The list contents are of type {@link org.openhab.model.items.Item}.
+   * The list contents are of type {@link org.openhab.model.items.ModelItem}.
    * <!-- begin-user-doc -->
    * <p>
    * If the meaning of the '<em>Items</em>' containment reference list isn't clear,
@@ -65,6 +65,6 @@ public interface ItemModel extends EObject
    * @model containment="true"
    * @generated
    */
-  EList<Item> getItems();
+  EList<ModelItem> getItems();
 
 } // ItemModel

File: bundles/model/org.openhab.model.sitemap.ui/src/org/openhab/model/ui/contentassist/SitemapProposalProvider.java
Patch:
@@ -59,7 +59,6 @@ public void completeGroup_Item(EObject model, Assignment assignment,
 					acceptor.accept(completionProposal);
 				}
 			}
-			context.setPrefix("");
 		}
 	}
 	
@@ -87,7 +86,6 @@ public void doComplete(ContentAssistContext context,
 				ICompletionProposal completionProposal = createCompletionProposal(item.getName(), context);
 				acceptor.accept(completionProposal);
 			}
-			context.setPrefix("");
 		}
 	}
 }

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BTDeviceDiscoveryService.java
Patch:
@@ -112,7 +112,6 @@ public void removeBluetoothEventHandler(BluetoothEventHandler handler) {
 	}
 
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		if(config!=null) {
 			String value = (String) config.get(REFRESH_RATE);

File: bundles/binding/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecGenericBindingProvider.java
Patch:
@@ -61,7 +61,6 @@ public class ExecGenericBindingProvider extends AbstractGenericBindingProvider i
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public String getBindingType() {
 		return "exec";
 	}
@@ -123,7 +122,6 @@ protected void parseBindingConfig(String bindingConfig, ExecBindingConfig config
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public String getCommandLine(String itemName, String command) {
 		ExecBindingConfig config = (ExecBindingConfig) bindingConfigs.get(itemName);
 		return config != null ? config.get(command) : null;

File: bundles/binding/org.openhab.binding.http.test/src/test/java/org/openhab/binding/http/internal/HttpGenericBindingProviderTest.java
Patch:
@@ -70,14 +70,12 @@ public void testParseBindingConfig() throws BindingConfigParseException {
 		
 		Item testItem = new GenericItem("TEST") {
 			
-			@Override
 			public List<Class<? extends State>> getAcceptedDataTypes() {
 				List<Class<? extends State>> list = new ArrayList<Class<? extends State>>();
 				list.add(StringType.class);
 				return list;
 			}
 			
-			@Override
 			public List<Class<? extends Command>> getAcceptedCommandTypes() {
 				List<Class<? extends Command>> list = new ArrayList<Class<? extends Command>>();
 				list.add(StringType.class);

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpInBinding.java
Patch:
@@ -270,7 +270,6 @@ protected String getName() {
 	 * {@inheritDoc}
 	 */
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		
 		if (config != null) {

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -84,7 +84,6 @@ public class KNXCoreTypeMapper implements KNXTypeMapper {
 		
 	}
 
-	@Override
 	public String toDPValue(Type type) {
 		if(type instanceof OnOffType) return type.toString().toLowerCase();
 		if(type instanceof UpDownType) return type.toString().toLowerCase();
@@ -99,7 +98,6 @@ public String toDPValue(Type type) {
 		return null;
 	}
 
-	@Override
 	public Type toType(Datapoint datapoint, byte[] data) {
 		try {
 			DPTXlator translator = TranslatorTypes.createTranslator(datapoint.getMainNumber(), datapoint.getDPT());

File: bundles/binding/org.openhab.binding.networkhealth/src/main/java/org/openhab/binding/networkhealth/internal/NetworkHealthBinding.java
Patch:
@@ -156,7 +156,6 @@ private boolean checkReachability(String host, int port, int timeout) throws IOE
 	 * {@inheritDoc}
 	 */
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		
 		if (config != null) {

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireBinding.java
Patch:
@@ -165,7 +165,6 @@ public void execute() {
 	
 	
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		
 		if (config != null) {

File: bundles/binding/org.openhab.binding.serial/src/main/java/org/openhab/binding/serial/internal/SerialBinding.java
Patch:
@@ -111,15 +111,13 @@ public void receiveUpdate(String itemName, State newStatus) {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public String getBindingType() {
 		return "serial";
 	}
 
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void processBindingConfiguration(String context, Item item, String bindingConfig)
 			throws BindingConfigParseException {
 		if(item instanceof SwitchItem || item instanceof StringItem) {		
@@ -166,7 +164,6 @@ public void processBindingConfiguration(String context, Item item, String bindin
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void removeConfigurations(String context) {
 		Set<String> itemNames = contextMap.get(context);
 		if(itemNames!=null) {

File: bundles/binding/org.openhab.binding.serial/src/main/java/org/openhab/binding/serial/internal/SerialDevice.java
Patch:
@@ -178,7 +178,6 @@ public void initialize() throws InitializationException {
 		}
 	}
 
-	@Override
 	public void serialEvent(SerialPortEvent event) {
 		switch (event.getEventType()) {
 		case SerialPortEvent.BI:

File: bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/RegExTransformationService.java
Patch:
@@ -54,7 +54,6 @@ public class RegExTransformationService implements TransformationService {
 	/**
 	 * @{inheritDoc
 	 */
-	@Override
 	public String transform(String regExpression, String source) throws TransformationException {
 
 		if (regExpression == null || source == null) {

File: bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/XPathTransformationService.java
Patch:
@@ -60,7 +60,6 @@ public class XPathTransformationService implements TransformationService {
 	/**
 	 * @{inheritDoc
 	 */
-	@Override
 	public String transform(String xpathExpression, String source) throws TransformationException {
 
 		if (xpathExpression == null || source == null) {

File: bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/XsltTransformationService.java
Patch:
@@ -73,7 +73,6 @@ public class XsltTransformationService implements TransformationService {
 	 * @{inheritDoc
 	 * 
 	 */
-	@Override
 	public String transform(String filename, String source) throws TransformationException {
 
 		if (filename == null || source == null) {

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/binding/AbstractActiveBinding.java
Patch:
@@ -93,7 +93,6 @@ public void removeBindingProvider(P provider) {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void bindingChanged(BindingProvider provider, String itemName) {
 		if (bindingsExist()) {
 			start();
@@ -105,7 +104,6 @@ public void bindingChanged(BindingProvider provider, String itemName) {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void allBindingsChanged(BindingProvider provider) {
 		if (!bindingsExist()) {
 			setInterrupted(true);

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/events/AbstractEventSubscriber.java
Patch:
@@ -43,7 +43,6 @@ abstract public class AbstractEventSubscriber implements EventSubscriber, EventH
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void handleEvent(Event event) {  
 		String itemName = (String) event.getProperty("item");
 		
@@ -68,15 +67,13 @@ public void handleEvent(Event event) {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void receiveCommand(String itemName, Command command) {
 		// default implementation: do nothing
 	}
 
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void receiveUpdate(String itemName, State newState) {
 		// default implementation: do nothing
 	}

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java
Patch:
@@ -62,7 +62,6 @@ public GenericItem(String name) {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public State getState() {
 		return state;
 	}
@@ -76,7 +75,6 @@ public void dispose() {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public String getName() {
 		return name;
 	}

File: bundles/designer/org.openhab.designer.core/src/main/java/org/openhab/designer/core/config/ConfigurationFolderProvider.java
Patch:
@@ -80,7 +80,6 @@ static public synchronized IFolder getRootConfigurationFolder() throws CoreExcep
 	static public synchronized void setRootConfigurationFolder(final File configFolder) throws CoreException {
 		ConfigDispatcher.setConfigFolder(configFolder.getAbsolutePath());
 		IWorkspaceRunnable runnable = new IWorkspaceRunnable() {
-			@Override
 			public void run(IProgressMonitor monitor) throws CoreException {
 				IProject defaultProject = ResourcesPlugin.getWorkspace().getRoot().getProject("config");
 				if(!defaultProject.exists()) {

File: bundles/io/org.openhab.io.console/src/main/java/org/openhab/io/console/internal/commands/ConsoleCommandProvider.java
Patch:
@@ -114,17 +114,14 @@ public OSGiConsole(CommandInterpreter interpreter) {
 			this.interpreter = interpreter;
 		}
 		
-		@Override
 		public void print(String s) {
 			interpreter.print(s);
 		}
 
-		@Override
 		public void println(String s) {
 			interpreter.println(s);
 		}
 
-		@Override
 		public void printUsage(String s) {
 			interpreter.println("Usage: openhab " + s);
 		}

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/actions/Mail.java
Patch:
@@ -129,7 +129,6 @@ static public void sendMail(String to, String subject, String message, String at
 	}
 
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		if(config!=null) {
 			Mail.hostname = (String) config.get("hostname");

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/actions/Prowl.java
Patch:
@@ -93,7 +93,6 @@ static public void pushNotification(String subject, String message) {
 	}
 
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		
 		if (config!=null) {

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/folder/FolderObserver.java
Patch:
@@ -188,7 +188,6 @@ private String getExtension(String filename) {
 	}
 
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		if (config != null) {
 			// make sure to clear the caches first

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java
Patch:
@@ -168,7 +168,6 @@ public void unsetModelRepository(ModelRepository modelRepository) {
 		this.modelRepository = null;
 	}
 
-	@Override
 	public void modelChanged(String modelName, EventType type) {
 		if(modelName.endsWith("items")) {
 			for(ItemsChangeListener listener : listeners) {

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/ItemModelActivator.java
Patch:
@@ -40,13 +40,11 @@ public class ItemModelActivator implements BundleActivator {
 
 	private final static Logger logger = LoggerFactory.getLogger(ItemModelActivator.class);
 
-	@Override
 	public void start(BundleContext context) throws Exception {
 		new ItemsStandaloneSetup().createInjectorAndDoEMFRegistration();
 		logger.info("Registered 'item' configuration parser");		
 	}
 
-	@Override
 	public void stop(BundleContext context) throws Exception {
 	}
 

File: bundles/model/org.openhab.model.sitemap/src/org/openhab/model/sitemap/internal/SitemapModelActivator.java
Patch:
@@ -39,13 +39,11 @@ public class SitemapModelActivator implements BundleActivator {
 
 	private final static Logger logger = LoggerFactory.getLogger(SitemapModelActivator.class);
 	
-	@Override
 	public void start(BundleContext context) throws Exception {
 		new SitemapStandaloneSetup().createInjectorAndDoEMFRegistration();
 		logger.info("Registered 'sitemap' configuration parser");
 	}
 
-	@Override
 	public void stop(BundleContext context) throws Exception {
 	}
 

File: bundles/model/org.openhab.model.sitemap/src/org/openhab/model/sitemap/internal/SitemapProviderImpl.java
Patch:
@@ -58,7 +58,6 @@ public void unsetModelRepository(ModelRepository modelRepo) {
 	/* (non-Javadoc)
 	 * @see org.openhab.model.sitemap.internal.SitemapProvider#getSitemap(java.lang.String)
 	 */
-	@Override
 	public Sitemap getSitemap(String sitemapName) {
 		if(modelRepo!=null) {
 			Sitemap sitemap = (Sitemap) modelRepo.getModel(sitemapName + ".sitemap");

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/FrameRenderer.java
Patch:
@@ -47,15 +47,13 @@ public class FrameRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Frame;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("frame");
 

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/GroupRenderer.java
Patch:
@@ -48,15 +48,13 @@ public class GroupRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Group;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("group");
 

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/ImageRenderer.java
Patch:
@@ -47,15 +47,13 @@ public class ImageRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Image;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("image");
 		snippet = snippet.replaceAll("%url%", ((Image) w).getUrl());

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/ListRenderer.java
Patch:
@@ -47,15 +47,13 @@ public class ListRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof List;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("list");
 		snippet = snippet.replaceAll("%label%", getLabel(w));

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/PageRenderer.java
Patch:
@@ -167,7 +167,6 @@ private void processChildren(StringBuilder sb_pre, StringBuilder sb_post,
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		for(WidgetRenderer renderer : widgetRenderers) {
 			if(renderer.canRender(w)) {
@@ -180,7 +179,6 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return false;		
 	}

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SelectionRenderer.java
Patch:
@@ -48,15 +48,13 @@ public class SelectionRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Selection;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("selection");
 

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SliderRenderer.java
Patch:
@@ -53,15 +53,13 @@ public class SliderRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Slider;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		Slider s = (Slider) w;
 		

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SwitchRenderer.java
Patch:
@@ -59,15 +59,13 @@ public class SwitchRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Switch;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		Switch s = (Switch) w;
 		

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/TextRenderer.java
Patch:
@@ -47,15 +47,13 @@ public class TextRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Text;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		Text text = (Text) w;
 		String snippet = (text.getChildren().size() > 0) ? 

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/UIActivator.java
Patch:
@@ -34,11 +34,9 @@
 
 public class UIActivator implements BundleActivator {
 
-	@Override
 	public void start(BundleContext context) throws Exception {
 	}
 
-	@Override
 	public void stop(BundleContext context) throws Exception {
 	}
 

File: bundles/binding/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BTDeviceDiscoveryService.java
Patch:
@@ -112,7 +112,6 @@ public void removeBluetoothEventHandler(BluetoothEventHandler handler) {
 	}
 
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		if(config!=null) {
 			String value = (String) config.get(REFRESH_RATE);

File: bundles/binding/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecGenericBindingProvider.java
Patch:
@@ -61,7 +61,6 @@ public class ExecGenericBindingProvider extends AbstractGenericBindingProvider i
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public String getBindingType() {
 		return "exec";
 	}
@@ -123,7 +122,6 @@ protected void parseBindingConfig(String bindingConfig, ExecBindingConfig config
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public String getCommandLine(String itemName, String command) {
 		ExecBindingConfig config = (ExecBindingConfig) bindingConfigs.get(itemName);
 		return config != null ? config.get(command) : null;

File: bundles/binding/org.openhab.binding.http.test/src/test/java/org/openhab/binding/http/internal/HttpGenericBindingProviderTest.java
Patch:
@@ -70,14 +70,12 @@ public void testParseBindingConfig() throws BindingConfigParseException {
 		
 		Item testItem = new GenericItem("TEST") {
 			
-			@Override
 			public List<Class<? extends State>> getAcceptedDataTypes() {
 				List<Class<? extends State>> list = new ArrayList<Class<? extends State>>();
 				list.add(StringType.class);
 				return list;
 			}
 			
-			@Override
 			public List<Class<? extends Command>> getAcceptedCommandTypes() {
 				List<Class<? extends Command>> list = new ArrayList<Class<? extends Command>>();
 				list.add(StringType.class);

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpInBinding.java
Patch:
@@ -270,7 +270,6 @@ protected String getName() {
 	 * {@inheritDoc}
 	 */
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		
 		if (config != null) {

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -84,7 +84,6 @@ public class KNXCoreTypeMapper implements KNXTypeMapper {
 		
 	}
 
-	@Override
 	public String toDPValue(Type type) {
 		if(type instanceof OnOffType) return type.toString().toLowerCase();
 		if(type instanceof UpDownType) return type.toString().toLowerCase();
@@ -99,7 +98,6 @@ public String toDPValue(Type type) {
 		return null;
 	}
 
-	@Override
 	public Type toType(Datapoint datapoint, byte[] data) {
 		try {
 			DPTXlator translator = TranslatorTypes.createTranslator(datapoint.getMainNumber(), datapoint.getDPT());

File: bundles/binding/org.openhab.binding.networkhealth/src/main/java/org/openhab/binding/networkhealth/internal/NetworkHealthBinding.java
Patch:
@@ -156,7 +156,6 @@ private boolean checkReachability(String host, int port, int timeout) throws IOE
 	 * {@inheritDoc}
 	 */
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		
 		if (config != null) {

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireBinding.java
Patch:
@@ -165,7 +165,6 @@ public void execute() {
 	
 	
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		
 		if (config != null) {

File: bundles/binding/org.openhab.binding.serial/src/main/java/org/openhab/binding/serial/internal/SerialBinding.java
Patch:
@@ -111,15 +111,13 @@ public void receiveUpdate(String itemName, State newStatus) {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public String getBindingType() {
 		return "serial";
 	}
 
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void processBindingConfiguration(String context, Item item, String bindingConfig)
 			throws BindingConfigParseException {
 		if(item instanceof SwitchItem || item instanceof StringItem) {		
@@ -166,7 +164,6 @@ public void processBindingConfiguration(String context, Item item, String bindin
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void removeConfigurations(String context) {
 		Set<String> itemNames = contextMap.get(context);
 		if(itemNames!=null) {

File: bundles/binding/org.openhab.binding.serial/src/main/java/org/openhab/binding/serial/internal/SerialDevice.java
Patch:
@@ -178,7 +178,6 @@ public void initialize() throws InitializationException {
 		}
 	}
 
-	@Override
 	public void serialEvent(SerialPortEvent event) {
 		switch (event.getEventType()) {
 		case SerialPortEvent.BI:

File: bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/RegExTransformationService.java
Patch:
@@ -54,7 +54,6 @@ public class RegExTransformationService implements TransformationService {
 	/**
 	 * @{inheritDoc
 	 */
-	@Override
 	public String transform(String regExpression, String source) throws TransformationException {
 
 		if (regExpression == null || source == null) {

File: bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/XPathTransformationService.java
Patch:
@@ -60,7 +60,6 @@ public class XPathTransformationService implements TransformationService {
 	/**
 	 * @{inheritDoc
 	 */
-	@Override
 	public String transform(String xpathExpression, String source) throws TransformationException {
 
 		if (xpathExpression == null || source == null) {

File: bundles/core/org.openhab.core.transform/src/main/java/org/openhab/core/transform/internal/service/XsltTransformationService.java
Patch:
@@ -73,7 +73,6 @@ public class XsltTransformationService implements TransformationService {
 	 * @{inheritDoc
 	 * 
 	 */
-	@Override
 	public String transform(String filename, String source) throws TransformationException {
 
 		if (filename == null || source == null) {

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/binding/AbstractActiveBinding.java
Patch:
@@ -93,7 +93,6 @@ public void removeBindingProvider(P provider) {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void bindingChanged(BindingProvider provider, String itemName) {
 		if (bindingsExist()) {
 			start();
@@ -105,7 +104,6 @@ public void bindingChanged(BindingProvider provider, String itemName) {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void allBindingsChanged(BindingProvider provider) {
 		if (!bindingsExist()) {
 			setInterrupted(true);

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/events/AbstractEventSubscriber.java
Patch:
@@ -43,7 +43,6 @@ abstract public class AbstractEventSubscriber implements EventSubscriber, EventH
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void handleEvent(Event event) {  
 		String itemName = (String) event.getProperty("item");
 		
@@ -68,15 +67,13 @@ public void handleEvent(Event event) {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void receiveCommand(String itemName, Command command) {
 		// default implementation: do nothing
 	}
 
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public void receiveUpdate(String itemName, State newState) {
 		// default implementation: do nothing
 	}

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java
Patch:
@@ -62,7 +62,6 @@ public GenericItem(String name) {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public State getState() {
 		return state;
 	}
@@ -76,7 +75,6 @@ public void dispose() {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public String getName() {
 		return name;
 	}

File: bundles/designer/org.openhab.designer.core/src/main/java/org/openhab/designer/core/config/ConfigurationFolderProvider.java
Patch:
@@ -80,7 +80,6 @@ static public synchronized IFolder getRootConfigurationFolder() throws CoreExcep
 	static public synchronized void setRootConfigurationFolder(final File configFolder) throws CoreException {
 		ConfigDispatcher.setConfigFolder(configFolder.getAbsolutePath());
 		IWorkspaceRunnable runnable = new IWorkspaceRunnable() {
-			@Override
 			public void run(IProgressMonitor monitor) throws CoreException {
 				IProject defaultProject = ResourcesPlugin.getWorkspace().getRoot().getProject("config");
 				if(!defaultProject.exists()) {

File: bundles/io/org.openhab.io.console/src/main/java/org/openhab/io/console/internal/commands/ConsoleCommandProvider.java
Patch:
@@ -114,17 +114,14 @@ public OSGiConsole(CommandInterpreter interpreter) {
 			this.interpreter = interpreter;
 		}
 		
-		@Override
 		public void print(String s) {
 			interpreter.print(s);
 		}
 
-		@Override
 		public void println(String s) {
 			interpreter.println(s);
 		}
 
-		@Override
 		public void printUsage(String s) {
 			interpreter.println("Usage: openhab " + s);
 		}

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/actions/Mail.java
Patch:
@@ -129,7 +129,6 @@ static public void sendMail(String to, String subject, String message, String at
 	}
 
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		if(config!=null) {
 			Mail.hostname = (String) config.get("hostname");

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/actions/Prowl.java
Patch:
@@ -93,7 +93,6 @@ static public void pushNotification(String subject, String message) {
 	}
 
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		
 		if (config!=null) {

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/folder/FolderObserver.java
Patch:
@@ -188,7 +188,6 @@ private String getExtension(String filename) {
 	}
 
 	@SuppressWarnings("rawtypes")
-	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		if (config != null) {
 			// make sure to clear the caches first

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java
Patch:
@@ -168,7 +168,6 @@ public void unsetModelRepository(ModelRepository modelRepository) {
 		this.modelRepository = null;
 	}
 
-	@Override
 	public void modelChanged(String modelName, EventType type) {
 		if(modelName.endsWith("items")) {
 			for(ItemsChangeListener listener : listeners) {

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/ItemModelActivator.java
Patch:
@@ -40,13 +40,11 @@ public class ItemModelActivator implements BundleActivator {
 
 	private final static Logger logger = LoggerFactory.getLogger(ItemModelActivator.class);
 
-	@Override
 	public void start(BundleContext context) throws Exception {
 		new ItemsStandaloneSetup().createInjectorAndDoEMFRegistration();
 		logger.info("Registered 'item' configuration parser");		
 	}
 
-	@Override
 	public void stop(BundleContext context) throws Exception {
 	}
 

File: bundles/model/org.openhab.model.sitemap/src/org/openhab/model/sitemap/internal/SitemapModelActivator.java
Patch:
@@ -39,13 +39,11 @@ public class SitemapModelActivator implements BundleActivator {
 
 	private final static Logger logger = LoggerFactory.getLogger(SitemapModelActivator.class);
 	
-	@Override
 	public void start(BundleContext context) throws Exception {
 		new SitemapStandaloneSetup().createInjectorAndDoEMFRegistration();
 		logger.info("Registered 'sitemap' configuration parser");
 	}
 
-	@Override
 	public void stop(BundleContext context) throws Exception {
 	}
 

File: bundles/model/org.openhab.model.sitemap/src/org/openhab/model/sitemap/internal/SitemapProviderImpl.java
Patch:
@@ -58,7 +58,6 @@ public void unsetModelRepository(ModelRepository modelRepo) {
 	/* (non-Javadoc)
 	 * @see org.openhab.model.sitemap.internal.SitemapProvider#getSitemap(java.lang.String)
 	 */
-	@Override
 	public Sitemap getSitemap(String sitemapName) {
 		if(modelRepo!=null) {
 			Sitemap sitemap = (Sitemap) modelRepo.getModel(sitemapName + ".sitemap");

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/FrameRenderer.java
Patch:
@@ -47,15 +47,13 @@ public class FrameRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Frame;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("frame");
 

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/GroupRenderer.java
Patch:
@@ -48,15 +48,13 @@ public class GroupRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Group;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("group");
 

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/ImageRenderer.java
Patch:
@@ -47,15 +47,13 @@ public class ImageRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Image;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("image");
 		snippet = snippet.replaceAll("%url%", ((Image) w).getUrl());

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/ListRenderer.java
Patch:
@@ -47,15 +47,13 @@ public class ListRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof List;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("list");
 		snippet = snippet.replaceAll("%label%", getLabel(w));

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/PageRenderer.java
Patch:
@@ -167,7 +167,6 @@ private void processChildren(StringBuilder sb_pre, StringBuilder sb_post,
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		for(WidgetRenderer renderer : widgetRenderers) {
 			if(renderer.canRender(w)) {
@@ -180,7 +179,6 @@ public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderExcep
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return false;		
 	}

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SelectionRenderer.java
Patch:
@@ -48,15 +48,13 @@ public class SelectionRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Selection;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		String snippet = getSnippet("selection");
 

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SliderRenderer.java
Patch:
@@ -53,15 +53,13 @@ public class SliderRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Slider;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		Slider s = (Slider) w;
 		

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/SwitchRenderer.java
Patch:
@@ -59,15 +59,13 @@ public class SwitchRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Switch;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		Switch s = (Switch) w;
 		

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/TextRenderer.java
Patch:
@@ -47,15 +47,13 @@ public class TextRenderer extends AbstractWidgetRenderer {
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public boolean canRender(Widget w) {
 		return w instanceof Text;
 	}
 	
 	/**
 	 * {@inheritDoc}
 	 */
-	@Override
 	public EList<Widget> renderWidget(Widget w, StringBuilder sb) throws RenderException {
 		Text text = (Text) w;
 		String snippet = (text.getChildren().size() > 0) ? 

File: bundles/ui/org.openhab.ui/src/main/java/org/openhab/ui/internal/UIActivator.java
Patch:
@@ -34,11 +34,9 @@
 
 public class UIActivator implements BundleActivator {
 
-	@Override
 	public void start(BundleContext context) throws Exception {
 	}
 
-	@Override
 	public void stop(BundleContext context) throws Exception {
 	}
 

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -88,7 +88,7 @@ public class KNXCoreTypeMapper implements KNXTypeMapper {
 	public String toDPValue(Type type) {
 		if(type instanceof OnOffType) return type.toString().toLowerCase();
 		if(type instanceof UpDownType) return type.toString().toLowerCase();
-		if(type instanceof IncreaseDecreaseType) return type.toString().toLowerCase();
+		if(type instanceof IncreaseDecreaseType) return type.toString().toLowerCase() + " 5";
 		if(type instanceof PercentType) return mapTo8bit((PercentType) type);
 		if(type instanceof DecimalType) return type.toString();
 		if(type instanceof StringType) return type.toString();
@@ -156,7 +156,7 @@ static public String toDPTid(Class<? extends Type> typeClass) {
 	 * @return the real value as a string (e.g. "99.5")
 	 */
 	static private String mapToPercent(String value) {
-		int percent = Integer.parseInt(value.toString());
+		int percent = Integer.parseInt(StringUtils.substringBefore(value.toString(), " "));
 		return Integer.toString(percent * 100 / 255);
 	}
 

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/dpt/KNXCoreTypeMapper.java
Patch:
@@ -73,6 +73,7 @@ public class KNXCoreTypeMapper implements KNXTypeMapper {
 	static {
 		dptTypeMap = new HashMap<String, Class<? extends Type>>();
 		dptTypeMap.put(DPTXlatorBoolean.DPT_UPDOWN.getID(), UpDownType.class);
+		dptTypeMap.put(DPTXlatorBoolean.DPT_STEP.getID(), IncreaseDecreaseType.class);
 		dptTypeMap.put(DPTXlator3BitControlled.DPT_CONTROL_DIMMING.getID(), IncreaseDecreaseType.class);
 		dptTypeMap.put(DPTXlatorBoolean.DPT_SWITCH.getID(), OnOffType.class);
 		dptTypeMap.put(DPTXlator8BitUnsigned.DPT_PERCENT_U8.getID(), PercentType.class);

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/IncreaseDecreaseType.java
Patch:
@@ -30,10 +30,9 @@
 package org.openhab.core.library.types;
 
 import org.openhab.core.types.Command;
-import org.openhab.core.types.State;
 import org.openhab.core.types.PrimitiveType;
 
-public enum IncreaseDecreaseType implements PrimitiveType, State, Command {
+public enum IncreaseDecreaseType implements PrimitiveType, Command {
 	INCREASE, DECREASE;
 	
 	public String toString() {

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/render/PageRenderer.java
Patch:
@@ -114,8 +114,9 @@ private void processChildren(StringBuilder sb_pre, StringBuilder sb_post,
 		
 		// put a single frame around all children widgets, if there are no explicit frames 
 		if(!children.isEmpty()) {
-			EObject firstChild = children.get(0).eContainer();
-			if(!(firstChild instanceof Frame || firstChild instanceof Sitemap || firstChild instanceof List)) {
+			EObject firstChild = children.get(0);
+			EObject parent = firstChild.eContainer();
+			if(!(firstChild instanceof Frame || parent instanceof Frame || parent instanceof Sitemap || parent instanceof List)) {
 				String frameSnippet = getSnippet("frame");
 				frameSnippet = frameSnippet.replace("%label%", "");
 				

File: bundles/binding/org.openhab.binding.exec.test/src/test/java/org/openhab/binding/exec/internal/ExecGenericBindingProviderTest.java
Patch:
@@ -51,7 +51,7 @@ public void init() {
 
 	@Test
 	public void testParseBindingConfig() {
-		ExecBindingConfig config = provider.new ExecBindingConfig();
+		ExecBindingConfig config = new ExecGenericBindingProvider.ExecBindingConfig();
 		String bindingConfig = "ON:some command to execute, OFF: 'other command with comma\\, and \\'quotes\\' and slashes \\\\ ', *:and a fallback";
 		
 		provider.parseBindingConfig(bindingConfig, config);

File: bundles/binding/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecGenericBindingProvider.java
Patch:
@@ -135,12 +135,11 @@ public String getCommandLine(String itemName, String command) {
 	 * config strings and use it to answer the requests to the Exec
 	 * binding provider.
 	 */
-	class ExecBindingConfig extends HashMap<String, String> implements BindingConfig {
+	static class ExecBindingConfig extends HashMap<String, String> implements BindingConfig {
 		
         /** generated serialVersion UID */
 		private static final long serialVersionUID = 6164971643530954095L;
 		
 	}
 
-
 }

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpGenericBindingProvider.java
Patch:
@@ -290,7 +290,7 @@ public String getUrl(String itemName) {
 	@Override
 	public int getRefreshInterval(String itemName) {
 		HttpBindingConfig config = (HttpBindingConfig) bindingConfigs.get(itemName);
-		return config != null && config.get(IN_BINDING_KEY) != null ? config.get(IN_BINDING_KEY).refreshInterval : null;
+		return config != null && config.get(IN_BINDING_KEY) != null ? config.get(IN_BINDING_KEY).refreshInterval : 0;
 	}
 	
 	/**
@@ -323,7 +323,7 @@ public List<String> getInBindingItemNames() {
 	 * {@link HttpBindingConfigElement }. There will be map like 
 	 * <code>ON->HttpBindingConfigElement</code>
 	 */
-	class HttpBindingConfig extends HashMap<Command, HttpBindingConfigElement> implements BindingConfig {
+	static class HttpBindingConfig extends HashMap<Command, HttpBindingConfigElement> implements BindingConfig {
 		
         /** generated serialVersion UID */
 		private static final long serialVersionUID = 6164971643530954095L;
@@ -335,7 +335,7 @@ class HttpBindingConfig extends HashMap<Command, HttpBindingConfigElement> imple
 	 * config strings and use it to answer the requests to the HTTP binding 
 	 * provider.
 	 */
-	class HttpBindingConfigElement implements BindingConfig {
+	static class HttpBindingConfigElement implements BindingConfig {
 		
 		public String httpMethod;
 		public String url;

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpUtil.java
Patch:
@@ -106,7 +106,7 @@ public static String executeUrl(String httpMethod, String url, int timeout) {
 			String responseBody = method.getResponseBodyAsString();
 
 			if (!responseBody.isEmpty()) {
-				logger.debug(new String(responseBody));
+				logger.debug(responseBody);
 			}
 			
 			return responseBody;

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/connection/KNXConnection.java
Patch:
@@ -95,7 +95,7 @@ public void unsetProcessListener(ProcessListener listener) {
 		KNXConnection.listener = null;
 	}
 	
-	public static void connect() {
+	public static synchronized void connect() {
 		if (ip != null && !ip.isEmpty()) {
 			try {
 				link = new KNXNetworkLinkIP(ip,

File: bundles/binding/org.openhab.binding.networkhealth/src/main/java/org/openhab/binding/networkhealth/internal/NetworkHealthGenericBindingProvider.java
Patch:
@@ -107,7 +107,7 @@ public String getHostname(String itemName) {
 	@Override
 	public int getPort(String itemName) {
 		NhBindingConfig config = (NhBindingConfig) bindingConfigs.get(itemName);
-		return config != null ? config.port : null;
+		return config != null ? config.port : 0;
 	}
 
 	/**
@@ -116,7 +116,7 @@ public int getPort(String itemName) {
 	@Override
 	public int getTimeout(String itemName) {
 		NhBindingConfig config = (NhBindingConfig) bindingConfigs.get(itemName);
-		return config != null ? config.timeout : null;
+		return config != null ? config.timeout : 0;
 	}
 	
 	/**
@@ -133,7 +133,7 @@ public Iterable<String> getItemNames() {
 	 * config strings and use it to answer the requests to the NetworkHealth
 	 * binding provider.
 	 */
-	private class NhBindingConfig implements BindingConfig {
+	static private class NhBindingConfig implements BindingConfig {
 		public String hostname;
 		public int port;
 		public int timeout;

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java
Patch:
@@ -140,8 +140,7 @@ public void removeConfigurations(String context) {
 		if(itemNames!=null) {
 			for(String itemName : itemNames) {
 				// we remove all information in the serial devices
-				BindingConfig owDeviceConfig = owDeviceConfigs.get(itemName);
-				owDeviceConfigs.remove(owDeviceConfig);
+				owDeviceConfigs.remove(itemName);
 			}
 			contextMap.remove(context);
 		}
@@ -155,7 +154,7 @@ public void removeConfigurations(String context) {
 	 * 
 	 * @author thomasee
 	 */
-	private class BindingConfig {
+	static private class BindingConfig {
 		public String sensorId;
 		public String unit;
 	}

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/binding/AbstractActiveBinding.java
Patch:
@@ -222,7 +222,7 @@ protected void pause(long refreshInterval) {
 				Thread.sleep(refreshInterval);
 			}
 			catch (InterruptedException e) {
-				logger.error("pausing " + getName() +" throws exception", e);
+				logger.error("pausing " + super.getName() +" throws exception", e);
 			}
 		}
 

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/internal/logging/OSGILogListener.java
Patch:
@@ -88,7 +88,7 @@ public void removeLogReaderService(LogReaderService aLogReaderService) {
 	 * @since 0.1.0
 	 *
 	 */
-	private class NLogListener implements LogListener {
+	private static class NLogListener implements LogListener {
 	 	public void logged(LogEntry entry) {
 	 		Logger logger = LoggerFactory.getLogger("OSGi");
 	 		Marker marker = MarkerFactory.getMarker(entry.getBundle().getSymbolicName());

File: bundles/designer/org.openhab.designer.ui/src/main/java/org/openhab/designer/ui/internal/views/ConfigView.java
Patch:
@@ -205,7 +205,7 @@ public boolean hasChildren(Object parent) {
 		}
 	}
 
-	class ViewLabelProvider extends LabelProvider {
+	static class ViewLabelProvider extends LabelProvider {
 
 		private Map<String, Image> imageCache = new HashMap<String, Image>();
 		
@@ -259,10 +259,10 @@ public Image getImage(Object obj) {
 		}
 	}
 	
-	class NameSorter extends ViewerSorter {
+	static class NameSorter extends ViewerSorter {
 	}
 	
-	class DropListener extends ViewerDropAdapter {
+	static class DropListener extends ViewerDropAdapter {
 
 		protected DropListener(Viewer viewer) {
 			super(viewer);

File: bundles/designer/org.openhab.designer.ui/src/main/java/org/openhab/designer/ui/internal/views/ItemView.java
Patch:
@@ -167,7 +167,7 @@ public void run() {
 		}
 	}
 
-	class ViewLabelProvider extends LabelProvider {
+	static class ViewLabelProvider extends LabelProvider {
 
 		private Map<String, Image> imageCache = new HashMap<String, Image>();
 		
@@ -209,7 +209,7 @@ public Image getImage(Object obj) {
 		}
 	}
 	
-	class NameSorter extends ViewerSorter {
+	static class NameSorter extends ViewerSorter {
 	}
 
 	/**

File: bundles/io/org.openhab.io.console/src/main/java/org/openhab/io/console/internal/commands/ConsoleCommandProvider.java
Patch:
@@ -106,7 +106,7 @@ public String getHelp() {
 		return buffer.toString();
 	}
 	
-	private class OSGiConsole implements Console {
+	private static class OSGiConsole implements Console {
 		
 		private CommandInterpreter interpreter;
 

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/internal/jabber/XMPPConsole.java
Patch:
@@ -95,7 +95,7 @@ public void processMessage(Chat chat, Message msg) {
 	 * @since 0.4.0
 	 *
 	 */
-	private class ChatConsole implements Console {
+	private static class ChatConsole implements Console {
 		
 		private Chat chat;
 		

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/binding/AbstractGenericBindingProvider.java
Patch:
@@ -108,8 +108,7 @@ public void removeConfigurations(String context) {
 		if(items!=null) {
 			for(Item item : items) {
 				// we remove all binding configurations for all items
-				BindingConfig config = bindingConfigs.get(item.getName());
-				bindingConfigs.remove(config);
+				bindingConfigs.remove(item.getName());
 				notifyListeners(item);
 			}
 			contextMap.remove(context);

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/servlet/WebAppServlet.java
Patch:
@@ -282,7 +282,7 @@ private Set<GenericItem> getAllItems(EList<Widget> widgets) {
 	 * @author Kai Kreuzer
 	 *
 	 */
-	private class BlockingStateChangeListener implements StateChangeListener {
+	private static class BlockingStateChangeListener implements StateChangeListener {
 		
 		private boolean changed = false;
 		

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpUtil.java
Patch:
@@ -62,7 +62,7 @@ public class HttpUtil {
 	private static final Logger logger = LoggerFactory.getLogger(HttpUtil.class);
 	
 	/** {@link Pattern} which matches the credentials out of an URL */ 
-	private static final Pattern URL_CREDENTIALS_PATTER = Pattern.compile("http://(.*?):(.*?)@.*");
+	private static final Pattern URL_CREDENTIALS_PATTERN = Pattern.compile("http://(.*?):(.*?)@.*");
 
 	/**
 	 * Excutes the given <code>url</code> with the given <code>httpMethod</code>
@@ -139,7 +139,7 @@ public static String executeUrl(String httpMethod, String url, int timeout) {
  	 */
 	protected static Credentials extractCredentials(String url) {
 		
-		Matcher matcher = URL_CREDENTIALS_PATTER.matcher(url);
+		Matcher matcher = URL_CREDENTIALS_PATTERN.matcher(url);
 		
 		if (matcher.matches()) {
 			

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpGenericBindingProvider.java
Patch:
@@ -73,7 +73,7 @@ public class HttpGenericBindingProvider extends AbstractGenericBindingProvider i
 	private static final Pattern BASE_CONFIG_PATTERN = Pattern.compile("(<|>)\\[(.*?)\\]");
 	
 	/** {@link Pattern} which matches an In-Binding */
-	private static final Pattern IN_BINDING_PATTERN = Pattern.compile("(.*?):(\\d*):(.*)");
+	private static final Pattern IN_BINDING_PATTERN = Pattern.compile("(.*?):(?!//)(\\d*):(.*)");
 	
 	/** {@link Pattern} which matches an Out-Binding */
 	private static final Pattern OUT_BINDING_PATTERN = Pattern.compile("([A-Z]*):([A-Z]*):(.*)"	);
@@ -169,7 +169,7 @@ protected HttpBindingConfig parseInBindingConfig(Item item, String bindingConfig
 			configElement = new HttpBindingConfigElement();
 			configElement.url = matcher.group(1).replaceAll("\\\\\"", "");
 			configElement.refreshInterval = Integer.valueOf(matcher.group(2)).intValue();
-			configElement.transformation = matcher.group(3);
+			configElement.transformation = matcher.group(3).replaceAll("\\\\\"", "\"");
 			
 			config.put(IN_BINDING_KEY, configElement);
 		}

File: bundles/binding/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpInBinding.java
Patch:
@@ -148,7 +148,7 @@ protected String extractRegexTransformation(String transformation) {
      * @{inheritDoc}
      */
     @Override
-    protected int getRefreshInterval() {
+    protected long getRefreshInterval() {
     	return HttpInBinding.granularity;
     }
     

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -151,9 +151,6 @@ public void receiveCommand(String itemName, Command command) {
 				if (pc != null) {
 					try {
 						pc.write(datapoint, toDPTValue(command));
-						// after sending this out to KNX, we need to make sure that we do not
-						// react on our own command
-						ignoreEventList.add(itemName + command.toString());
 					} catch (KNXException e) {
 						logger.warn("Command could not be sent to the KNX bus - retrying one time", e);
 						try {

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireBinding.java
Patch:
@@ -51,7 +51,7 @@
  * 	onewire="&lt;familyCode&gt;.&lt;serialId&gt;#temperature|humidity"
  * </code></p>
  * where 'temperature' or 'humidity' classifies whether the sensor's value should be 
- * interpreted as temperature (unit '�C') or as humidity (unit '%') value.
+ * interpreted as temperature (unit '°C') or as humidity (unit '%') value.
  * 
  * <p>Here are some examples for valid binding configuration strings:
  * <ul>
@@ -107,7 +107,6 @@ public void processBindingConfiguration(String context, Item item, String bindin
 			
 			config.sensorId = configParts[0];
 			config.unit = configParts[1];
-			config.itemName = item.getName();
 										
 			owDeviceConfigs.put(item.getName(), config);
 		}
@@ -160,7 +159,6 @@ public void removeConfigurations(String context) {
 	 * @author thomasee
 	 */
 	private class BindingConfig {
-		public String itemName;
 		public String sensorId;
 		public String unit;
 	}

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireRefreshService.java
Patch:
@@ -218,6 +218,7 @@ private void pause(long refreshInterval) {
 	}
 	
 	
+	@SuppressWarnings("rawtypes")
 	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		

File: bundles/config/core/src/main/java/org/openhab/config/core/internal/ConfigActivator.java
Patch:
@@ -28,6 +28,7 @@
  */
 
 package org.openhab.config.core.internal;
+import org.openhab.config.core.ConfigDispatcher;
 import org.osgi.framework.BundleActivator;
 import org.osgi.framework.BundleContext;
 import org.osgi.service.cm.ConfigurationAdmin;

File: bundles/designer/org.openhab.designer.core/src/main/java/org/openhab/designer/core/config/ConfigurationFolderProvider.java
Patch:
@@ -47,6 +47,7 @@
 import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.preferences.DefaultScope;
 import org.eclipse.core.runtime.preferences.IPreferencesService;
+import org.openhab.config.core.ConfigDispatcher;
 import org.openhab.designer.core.CoreActivator;
 import org.openhab.designer.core.DesignerCoreConstants;
 import org.osgi.service.prefs.Preferences;
@@ -77,6 +78,7 @@ static public synchronized IFolder getRootConfigurationFolder() throws CoreExcep
 	}
 	
 	static public synchronized void setRootConfigurationFolder(final File configFolder) throws CoreException {
+		ConfigDispatcher.setConfigFolder(configFolder.getAbsolutePath());
 		IWorkspaceRunnable runnable = new IWorkspaceRunnable() {
 			@Override
 			public void run(IProgressMonitor monitor) throws CoreException {
@@ -101,7 +103,7 @@ public void run(IProgressMonitor monitor) throws CoreException {
 	private static void initialize(IProject project) {
 		try {
 			IProjectDescription desc = project.getDescription();
-			desc.setNatureIds(new String[] { "org.eclipse.xtext.ui.shared.xtextNature", "org.eclipse.pde.PluginNature" } );
+			desc.setNatureIds(new String[] { "org.eclipse.xtext.ui.shared.xtextNature", "org.eclipse.jdt.core.javanature", "org.eclipse.pde.PluginNature" } );
 			project.setDescription(desc, null);
 			
 			IFolder metaInfFolder = project.getFolder("META-INF");

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/actions/Mail.java
Patch:
@@ -119,7 +119,7 @@ static public void sendMail(String to, String subject, String message, String at
 				email.send();
 				logger.debug("Sent email to '{}' with subject '{}'.", to, subject);
 			} catch (EmailException e) {
-				logger.error("Could not send e-mail to '{}‘.", to, e);
+				logger.error("Could not send e-mail to '" + to + "‘.", e);
 			}
 		} else {
 			logger.error("Cannot send e-mail because of missing configuration settings. The current settings are: " +

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/ModelRepositoryImpl.java
Patch:
@@ -110,12 +110,12 @@ public boolean addOrRefreshModel(String name, InputStream inputStream) {
 				resource.unload();
 				try {
 					resource.load(inputStream, Collections.EMPTY_MAP);
+					notifyListeners(name, EventType.MODIFIED);
 					return true;
 				} catch (IOException e) {
 					logger.warn("Configuration model '" + name + "' cannot be parsed correctly!", e);
 					resourceSet.getResources().remove(resource);
 				}
-				notifyListeners(name, EventType.MODIFIED);
 			}
 		}
 		return false;

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java
Patch:
@@ -129,7 +129,7 @@ private void dispatchBindings(String modelName, Item item, EList<Binding> bindin
 				try {
 					reader.processBindingConfiguration(modelName, item, config);
 				} catch (BindingConfigParseException e) {
-					logger.error("Binding information of type '" + bindingType + "' for item ‘{}‘ could not be parsed correctly.", item.getName() , e);
+					logger.error("Binding information of type '" + bindingType + "' for item ‘" + item.getName() + "‘ could not be parsed correctly.", e);
 				}
 			}
 		}

File: bundles/binding/org.openhab.binding.serial/src/main/java/org/openhab/binding/serial/internal/SerialDevice.java
Patch:
@@ -222,13 +222,13 @@ public void serialEvent(SerialPortEvent event) {
 	 * @param msg the string to send
 	 */
 	public void writeString(String msg) {
-		logger.debug("Writing ‘{}‘ to serial port {}", new String[] { msg, port });
+		logger.debug("Writing '{}' to serial port {}", new String[] { msg, port });
 		try {
 			// write string to serial port
 			outputStream.write(msg.getBytes());
 			outputStream.flush();
 		} catch (IOException e) {
-			logger.error("Error writing ‘{}‘ to serial port {}: {}", new String[] { msg, port, e.getMessage() });
+			logger.error("Error writing '{}' to serial port {}: {}", new String[] { msg, port, e.getMessage() });
 		}
 	}
 

File: bundles/binding/org.openhab.binding.serial/src/main/java/org/openhab/binding/serial/internal/SerialBinding.java
Patch:
@@ -44,7 +44,6 @@
 import org.openhab.core.types.State;
 import org.openhab.model.item.binding.BindingConfigParseException;
 import org.openhab.model.item.binding.BindingConfigReader;
-import org.openhab.model.item.internal.GenericItemProvider;
 
 /**
  * <p>This class implements a binding of serial devices to openHAB.

File: bundles/model/org.openhab.model.item/src/org/openhab/model/item/internal/GenericItemProvider.java
Patch:
@@ -129,7 +129,7 @@ private void dispatchBindings(String modelName, Item item, EList<Binding> bindin
 				try {
 					reader.processBindingConfiguration(modelName, item, config);
 				} catch (BindingConfigParseException e) {
-					logger.error("Binding information of type '" + bindingType + "' for item ‘{}‘ could not be parsed correctly.", item.getName() , e);
+					logger.error("Binding information of type '" + bindingType + "' for item ‘" + item.getName() + "‘ could not be parsed correctly.", e);
 				}
 			}
 		}

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -151,9 +151,6 @@ public void receiveCommand(String itemName, Command command) {
 				if (pc != null) {
 					try {
 						pc.write(datapoint, toDPTValue(command));
-						// after sending this out to KNX, we need to make sure that we do not
-						// react on our own command
-						ignoreEventList.add(itemName + command.toString());
 					} catch (KNXException e) {
 						logger.warn("Command could not be sent to the KNX bus - retrying one time", e);
 						try {

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireBinding.java
Patch:
@@ -51,7 +51,7 @@
  * 	onewire="&lt;familyCode&gt;.&lt;serialId&gt;#temperature|humidity"
  * </code></p>
  * where 'temperature' or 'humidity' classifies whether the sensor's value should be 
- * interpreted as temperature (unit '�C') or as humidity (unit '%') value.
+ * interpreted as temperature (unit '°C') or as humidity (unit '%') value.
  * 
  * <p>Here are some examples for valid binding configuration strings:
  * <ul>
@@ -107,7 +107,6 @@ public void processBindingConfiguration(String context, Item item, String bindin
 			
 			config.sensorId = configParts[0];
 			config.unit = configParts[1];
-			config.itemName = item.getName();
 										
 			owDeviceConfigs.put(item.getName(), config);
 		}
@@ -160,7 +159,6 @@ public void removeConfigurations(String context) {
 	 * @author thomasee
 	 */
 	private class BindingConfig {
-		public String itemName;
 		public String sensorId;
 		public String unit;
 	}

File: bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireRefreshService.java
Patch:
@@ -218,6 +218,7 @@ private void pause(long refreshInterval) {
 	}
 	
 	
+	@SuppressWarnings("rawtypes")
 	@Override
 	public void updated(Dictionary config) throws ConfigurationException {
 		

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/ModelRepositoryImpl.java
Patch:
@@ -110,12 +110,12 @@ public boolean addOrRefreshModel(String name, InputStream inputStream) {
 				resource.unload();
 				try {
 					resource.load(inputStream, Collections.EMPTY_MAP);
+					notifyListeners(name, EventType.MODIFIED);
 					return true;
 				} catch (IOException e) {
 					logger.warn("Configuration model '" + name + "' cannot be parsed correctly!", e);
 					resourceSet.getResources().remove(resource);
 				}
-				notifyListeners(name, EventType.MODIFIED);
 			}
 		}
 		return false;

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/folder/FolderObserver.java
Patch:
@@ -194,8 +194,6 @@ public void updated(Dictionary config) throws ConfigurationException {
 							if(!this.isAlive()) {
 								// seems we have the first folder to observe, so let's start the thread
 								this.start();
-							} else {
-								checkFolder(foldername);
 							}
 						} else {
 							// deactivate the refresh for this folder

File: bundles/io/org.openhab.io.net/src/main/java/org/openhab/io/net/actions/Mail.java
Patch:
@@ -119,7 +119,7 @@ static public void sendMail(String to, String subject, String message, String at
 				email.send();
 				logger.debug("Sent email to '{}' with subject '{}'.", to, subject);
 			} catch (EmailException e) {
-				logger.error("Could not send e-mail to '{}‘.", to, e);
+				logger.error("Could not send e-mail to '" + to + "‘.", e);
 			}
 		} else {
 			logger.error("Cannot send e-mail because of missing configuration settings. The current settings are: " +

File: bundles/model/org.openhab.model.sitemap.ui/src/org/openhab/model/ui/ResourceForFileEditorFactory.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap.ui/src/org/openhab/model/ui/SitemapUiModule.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap.ui/src/org/openhab/model/ui/contentassist/SitemapProposalProvider.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap.ui/src/org/openhab/model/ui/labeling/SitemapDescriptionLabelProvider.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap.ui/src/org/openhab/model/ui/labeling/SitemapLabelProvider.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap.ui/src/org/openhab/model/ui/outline/SitemapOutlineNodeAdapterFactory.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap.ui/src/org/openhab/model/ui/outline/SitemapTransformer.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap.ui/src/org/openhab/model/ui/quickfix/SitemapQuickfixProvider.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap/src/org/openhab/model/SitemapRuntimeModule.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap/src/org/openhab/model/SitemapStandaloneSetup.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap/src/org/openhab/model/formatting/SitemapFormatter.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap/src/org/openhab/model/scoping/SitemapScopeProvider.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap/src/org/openhab/model/sitemap/SitemapProvider.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap/src/org/openhab/model/sitemap/internal/SitemapModelActivator.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap/src/org/openhab/model/sitemap/internal/SitemapProviderImpl.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/model/org.openhab.model.sitemap/src/org/openhab/model/validation/SitemapJavaValidator.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/WebAppActivator.java
Patch:
@@ -1,6 +1,6 @@
 /**
  * openHAB, the open Home Automation Bus.
- * Copyright (C) 2010, openHAB.org <admin@openhab.org>
+ * Copyright (C) 2011, openHAB.org <admin@openhab.org>
  *
  * See the contributors.txt file in the distribution for a
  * full listing of individual contributors.

File: bundles/binding/org.openhab.binding.exec.test/src/test/java/org/openhab/binding/exec/internal/ExecGenericBindingProviderTest.java
Patch:
@@ -23,13 +23,13 @@ public void init() {
 	@Test
 	public void testParseBindingConfig() {
 		ExecBindingConfig config = provider.new ExecBindingConfig();
-		String bindingConfig = "ON:some command to execute, OFF: 'other command\\, with comma and \\'quotes\\'', *:and a fallback";
+		String bindingConfig = "ON:some command to execute, OFF: 'other command with comma\\, and \\'quotes\\' and slashes \\\\ ', *:and a fallback";
 		
 		provider.parseBindingConfig(bindingConfig, config);
 		
 		Assert.assertEquals(3, config.size());
 		Assert.assertEquals("some command to execute", config.get("ON"));
-		Assert.assertEquals("other command\\, with comma and \\'quotes\\'", config.get("OFF"));
+		Assert.assertEquals("other command with comma, and 'quotes' and slashes \\ ", config.get("OFF"));
 		Assert.assertEquals("and a fallback", config.get("*"));
 	}
 

File: bundles/binding/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/ExecGenericBindingProvider.java
Patch:
@@ -49,7 +49,7 @@
  * 	<li><code>{ exec="ON:ssh user@openhab.org touch ~/test.txt" }</code> - connect to openhab.org via ssh and issue the command 'touch ~/test.txt'</li>
  * 	<li><code>{ exec="OFF:ssh teichsta@openhab.org shutdown -p now" }</code></li>
  *  <li><code>{ exec="OFF:ssh teichsta@wlan-router ifconfig wlan0 down" }</code></li>
- *  <li><code>{ exec="OFF:some command, ON:'some other command, \'which is quite \' more complex', *:and a fallback" }</code></li>
+ *  <li><code>{ exec="OFF:some command, ON:'some other command\, \'which is quite \' more \\complex\\ ', *:and a fallback" }</code></li>
  * </ul>
  * 
  * @author Thomas.Eichstaedt-Engelen
@@ -116,7 +116,7 @@ protected void parseBindingConfig(String bindingConfig, ExecBindingConfig config
 			}
 		}
 		
-		config.put(command, commandLine);
+		config.put(command, commandLine.replaceAll("(?<!\\\\)\\\\", ""));
 		
 	}
 	

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/config/KNXGenericBindingProvider.java
Patch:
@@ -150,7 +150,9 @@ public boolean apply(KNXBindingConfigItem input) {
 	public Datapoint getDatapoint(final String itemName, final Class<? extends Type> typeClass) {
 		synchronized(bindingConfigs) {
 			try {
-				KNXBindingConfigItem bindingConfig = Iterables.find(Iterables.filter(Iterables.concat(bindingConfigs.values()), KNXBindingConfigItem.class),
+				Iterable<KNXBindingConfig> configList = Iterables.filter(Iterables.concat(bindingConfigs.values()), KNXBindingConfig.class);
+				Iterable<KNXBindingConfigItem> configItemList = Iterables.filter(Iterables.concat(configList), KNXBindingConfigItem.class);
+				KNXBindingConfigItem bindingConfig = Iterables.find(configItemList,
 						new Predicate<KNXBindingConfigItem>() {
 							public boolean apply(KNXBindingConfigItem input) {
 								if(input==null) {

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/binding/BindingProvider.java
Patch:
@@ -13,14 +13,14 @@ public interface BindingProvider {
 	 * 
 	 * @param listener the binding change listener to add
 	 */
-	public void addBindingChangeListener(BindingChangeListener listener);
+	public void addBindingChangeListener(BindingChangeListener<? extends BindingProvider> listener);
 
 	/**
 	 * Removes a binding change listener again.
 	 * Does nothing, if this listener has not been added before.
 	 * 
 	 * @param listener the binding listener to remove
 	 */
-	public void removeBindingChangeListener(BindingChangeListener listener);
+	public void removeBindingChangeListener(BindingChangeListener<? extends BindingProvider> listener);
 
 }

File: bundles/binding/org.openhab.binding.wol/src/main/java/org/openhab/binding/wol/internal/WolBinding.java
Patch:
@@ -40,7 +40,6 @@
 
 import org.openhab.core.events.AbstractEventSubscriber;
 import org.openhab.core.items.Item;
-import org.openhab.core.library.items.StringItem;
 import org.openhab.core.library.items.SwitchItem;
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.types.Command;
@@ -158,7 +157,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 			}
 			
 			WolBindingConfig wolBindingConfig = new WolBindingConfig();
-			wolBindingConfig.address =getInetAdress(configParts[0]);
+			wolBindingConfig.address = getInetAdress(configParts[0]);
 			wolBindingConfig.macBytes = getMacBytes(configParts[1]);
 			
 			itemMap.put(item.getName(), wolBindingConfig);
@@ -171,7 +170,7 @@ public void processBindingConfiguration(String context, Item item, String bindin
 			
 		}
 		else {
-			throw new BindingConfigParseException("WoL binding only supports Switch and String items!");
+			throw new BindingConfigParseException("WoL binding only supports Switch items!");
 		}
 		
 	}

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/types/OpenClosedType.java
Patch:
@@ -33,13 +33,13 @@
 import org.openhab.core.types.State;
 import org.openhab.core.types.PrimitiveType;
 
-public enum OpenCloseType implements PrimitiveType, State, Command {
-	OPEN, CLOSE;
+public enum OpenClosedType implements PrimitiveType, State, Command {
+	OPEN, CLOSED;
 	
 	public String toString() {
 		switch(this) {
 			case OPEN:  return "OPEN";
-			case CLOSE: return "CLOSE";
+			case CLOSED: return "CLOSED";
 		}
 		return "";
 	}

File: bundles/ui/org.openhab.ui.webapp/src/main/java/org/openhab/ui/webapp/internal/servlet/WebAppServlet.java
Patch:
@@ -115,7 +115,7 @@ public void service(ServletRequest req, ServletResponse res)
 				if(poll) {
 					if(waitForChanges(children)==false) {
 						// we have reached the timeout, so we do not return any content as nothing has changed
-						res.getWriter().append("<timeout/>").close();
+						res.getWriter().append("<root><timeout/></root>").close();
 						return;
 					}
 				}
@@ -129,7 +129,7 @@ public void service(ServletRequest req, ServletResponse res)
 					if(poll) {
 						if(waitForChanges(children)==false) {
 							// we have reached the timeout, so we do not return any content as nothing has changed
-							res.getWriter().append("<timeout/>").close();
+							res.getWriter().append("<root><timeout/></root>").close();
 							return;
 						}
 					}

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/folder/FolderObserver.java
Patch:
@@ -137,6 +137,7 @@ private void checkFolder(String foldername) {
 		for(File file : folder.listFiles()) {
 			if(file.isDirectory()) continue;
 			if(!file.getName().contains(".")) continue;
+			if(file.getName().startsWith(".")) continue;
 			
 			// if there is an extension filter defined, continue if the file has a different extension
 			String fileExt = file.getName().substring(file.getName().lastIndexOf(".") + 1);

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/items/DimmerItem.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.openhab.core.library.types.IncreaseDecreaseType;
 import org.openhab.core.library.types.OnOffType;
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.types.Command;
@@ -57,6 +58,7 @@ public class DimmerItem extends SwitchItem {
 		acceptedDataTypes.add(UnDefType.class);
 
 		acceptedCommandTypes.add(OnOffType.class);
+		acceptedCommandTypes.add(IncreaseDecreaseType.class);
 		acceptedCommandTypes.add(PercentType.class);
 	}
 	

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -374,7 +374,6 @@ public void run() {
 					// we first clone the list, so that it stays unmodified
 					Collection<Datapoint> clonedList = new HashSet<Datapoint>(datapointsToInitialize);
 					initializeDatapoints(clonedList);
-					datapointsToInitialize.removeAll(clonedList);
 				}
 				// just wait before looping again
 				try {

File: bundles/binding/org.openhab.binding.knx/src/main/java/org/openhab/binding/knx/internal/bus/KNXBinding.java
Patch:
@@ -374,6 +374,7 @@ public void run() {
 					// we first clone the list, so that it stays unmodified
 					Collection<Datapoint> clonedList = new HashSet<Datapoint>(datapointsToInitialize);
 					initializeDatapoints(clonedList);
+					datapointsToInitialize.removeAll(clonedList);
 				}
 				// just wait before looping again
 				try {

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java
Patch:
@@ -117,7 +117,7 @@ public void setState(State state) {
 		notifyListeners(oldState, state);
 	}
 
-	private void notifyListeners(State oldState, State newState) {
+	private synchronized void notifyListeners(State oldState, State newState) {
 		// if nothing has changed, we do not need to send notifications
 		if(oldState.equals(newState)) return;
 		

File: bundles/designer/org.openhab.designer.ui/src/main/java/org/openhab/designer/ui/internal/actions/SelectConfigFolderAction.java
Patch:
@@ -39,6 +39,7 @@
 import org.eclipse.jface.viewers.Viewer;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.widgets.DirectoryDialog;
+import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.ISharedImages;
 import org.eclipse.ui.PlatformUI;

File: bundles/model/org.openhab.model.core/src/main/java/org/openhab/model/core/internal/ModelRepositoryImpl.java
Patch:
@@ -90,14 +90,14 @@ public void addOrRefreshModel(String name, InputStream inputStream) {
 				resource.load(inputStream, Collections.EMPTY_MAP);
 				notifyListeners(name, EventType.ADDED);
 			} catch (IOException e) {
-				logger.warn("File '{}' cannot be parsed correctly!", name, e);
+				logger.warn("File '" + name + "' cannot be parsed correctly!", e);
 			}
 		} else {
 			resource.unload();
 			try {
 				resource.load(inputStream, Collections.EMPTY_MAP);
 			} catch (IOException e) {
-				logger.warn("File '{}' cannot be parsed correctly!", name, e);
+				logger.warn("File '" + name + "' cannot be parsed correctly!", e);
 			}
 			notifyListeners(name, EventType.MODIFIED);
 		}

File: bundles/binding/org.openhab.binding.serial/src/main/java/org/openhab/binding/serial/internal/SerialBinding.java
Patch:
@@ -109,6 +109,8 @@ public void processBindingConfiguration(String context, Item item, String bindin
 				} catch (Throwable e) {
 					throw new BindingConfigParseException("Could not open serial port " + port + ": " + e.getMessage());
 				}
+				itemMap.put(item.getName(), port);
+				serialDevices.put(port, serialDevice);
 			}
 			if(item instanceof StringItem) {
 				if(serialDevice.getStringItemName()==null) {
@@ -142,6 +144,7 @@ public void removeConfigurations(String context) {
 			for(String itemName : itemNames) {
 				// we remove all information in the serial devices
 				SerialDevice serialDevice = serialDevices.get(itemMap.get(itemName));
+				itemMap.remove(itemName);
 				if(serialDevice==null) {
 					continue;
 				}

File: bundles/binding/bluetooth/src/main/java/org/openhab/binding/bluetooth/internal/BluetoothBinding.java
Patch:
@@ -122,6 +122,7 @@ public void handleAllDevicesInRange(Iterable<BluetoothDevice> devices) {
 			int noOfDevices = 0;
 			for(BluetoothDevice device : devices) {
 				noOfDevices++;
+				handleDeviceInRange(device);
 				if(!device.getFriendlyName().trim().isEmpty()) {
 					sb.append(device.getFriendlyName());
 				} else {

File: bundles/designer/org.openhab.designer.ui/src/main/java/org/openhab/designer/ui/internal/views/ItemView.java
Patch:
@@ -51,7 +51,7 @@
 import org.eclipse.ui.part.ViewPart;
 import org.openhab.core.items.GroupItem;
 import org.openhab.core.items.Item;
-import org.openhab.core.items.ItemChangeListener;
+import org.openhab.core.items.ItemsChangeListener;
 import org.openhab.core.items.ItemProvider;
 import org.openhab.core.items.ItemRegistry;
 import org.openhab.designer.ui.UIActivator;
@@ -77,7 +77,7 @@ public class ItemView extends ViewPart {
 	 * (like Task List, for example).
 	 */
 	class ViewContentProvider implements IStructuredContentProvider, 
-										   ITreeContentProvider, ItemChangeListener {
+										   ITreeContentProvider, ItemsChangeListener {
 		private Object invisibleRoot;
 
 		private ItemRegistry registry;
@@ -149,7 +149,7 @@ private void initialize() {
 			}
 		}
 
-		public void allItemsChanged(ItemProvider provider) {
+		public void allItemsChanged(ItemProvider provider, Collection<String> oldItemNames) {
 			PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
 				public void run() {
 					viewer.refresh();

File: bundles/core/org.openhab.core.library/src/main/java/org/openhab/core/library/items/MeasurementItem.java
Patch:
@@ -37,6 +37,8 @@ public class MeasurementItem extends GenericItem {
 	static {
 		acceptedDataTypes.add(DecimalType.class);
 		acceptedDataTypes.add(UnDefType.class);
+
+		acceptedCommandTypes.add(DecimalType.class);
 	}
 	
 	public MeasurementItem(String name) {

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java
Patch:
@@ -31,7 +31,7 @@ abstract public class GenericItem implements Item {
 	
 	final protected String name;
 	
-	protected State state = UnDefType.NULL;
+	protected State state = UnDefType.UNDEF;
 	
 	public GenericItem(String name) {
 		this.name = name;

File: bundles/core/org.openhab.core/src/main/java/org/openhab/core/types/State.java
Patch:
@@ -21,5 +21,4 @@
 package org.openhab.core.types;
 
 public interface State extends Type {
-
 }

File: openhab-runtime/core/org.openhab.core.library/src/main/java/org/openhab/core/library/items/ContactItem.java
Patch:
@@ -25,9 +25,9 @@
 
 import org.openhab.core.items.GenericItem;
 import org.openhab.core.library.types.OpenCloseType;
-import org.openhab.core.library.types.UnDefType;
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;
+import org.openhab.core.types.UnDefType;
 
 public class ContactItem extends GenericItem {
 	

File: openhab-runtime/core/org.openhab.core.library/src/main/java/org/openhab/core/library/items/RollerblindItem.java
Patch:
@@ -27,10 +27,10 @@
 import org.openhab.core.library.types.OpenCloseType;
 import org.openhab.core.library.types.PercentType;
 import org.openhab.core.library.types.StopMoveType;
-import org.openhab.core.library.types.UnDefType;
 import org.openhab.core.library.types.UpDownType;
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;
+import org.openhab.core.types.UnDefType;
 
 public class RollerblindItem extends GenericItem {
 	

File: openhab-runtime/core/org.openhab.core.library/src/main/java/org/openhab/core/library/items/SwitchItem.java
Patch:
@@ -25,9 +25,9 @@
 
 import org.openhab.core.items.GenericItem;
 import org.openhab.core.library.types.OnOffType;
-import org.openhab.core.library.types.UnDefType;
 import org.openhab.core.types.Command;
 import org.openhab.core.types.State;
+import org.openhab.core.types.UnDefType;
 
 public class SwitchItem extends GenericItem {
 	

File: openhab-runtime/config/misterhouse/src/main/java/org/openhab/config/misterhouse/internal/items/MhItemProvider.java
Patch:
@@ -63,7 +63,7 @@ public GenericItem[] getItems() {
 		return new GenericItem[0];
 	}
 
-	@SuppressWarnings("unchecked")
+	@SuppressWarnings("rawtypes")
 	public void updated(Dictionary config) throws ConfigurationException {
 		if(config!=null) {
 			try {

File: openhab-runtime/core/library/src/main/java/org/openhab/core/library/types/DecimalType.java
Patch:
@@ -22,11 +22,11 @@
 
 import java.math.BigDecimal;
 
-import org.openhab.core.types.CommandType;
-import org.openhab.core.types.DataType;
+import org.openhab.core.types.Command;
+import org.openhab.core.types.State;
 import org.openhab.core.types.PrimitiveType;
 
-public class DecimalType implements PrimitiveType, DataType, CommandType {
+public class DecimalType implements PrimitiveType, State, Command {
 
 	private BigDecimal value; 
 	

File: openhab-runtime/core/library/src/main/java/org/openhab/core/library/types/OnOffType.java
Patch:
@@ -20,11 +20,11 @@
 */
 package org.openhab.core.library.types;
 
-import org.openhab.core.types.CommandType;
-import org.openhab.core.types.DataType;
+import org.openhab.core.types.Command;
+import org.openhab.core.types.State;
 import org.openhab.core.types.PrimitiveType;
 
-public enum OnOffType implements PrimitiveType, DataType, CommandType {
+public enum OnOffType implements PrimitiveType, State, Command {
 	ON, OFF;
 	
 	public String toString() {

File: openhab-runtime/core/library/src/main/java/org/openhab/core/library/types/OpenCloseType.java
Patch:
@@ -20,11 +20,11 @@
 */
 package org.openhab.core.library.types;
 
-import org.openhab.core.types.CommandType;
-import org.openhab.core.types.DataType;
+import org.openhab.core.types.Command;
+import org.openhab.core.types.State;
 import org.openhab.core.types.PrimitiveType;
 
-public enum OpenCloseType implements PrimitiveType, DataType, CommandType {
+public enum OpenCloseType implements PrimitiveType, State, Command {
 	OPEN, CLOSE, AJAR;
 	
 	public String toString() {

File: openhab-runtime/core/library/src/main/java/org/openhab/core/library/types/PercentType.java
Patch:
@@ -20,11 +20,11 @@
 */
 package org.openhab.core.library.types;
 
-import org.openhab.core.types.CommandType;
-import org.openhab.core.types.DataType;
+import org.openhab.core.types.Command;
+import org.openhab.core.types.State;
 import org.openhab.core.types.PrimitiveType;
 
-public class PercentType implements PrimitiveType, DataType, CommandType {
+public class PercentType implements PrimitiveType, State, Command {
 
 	private int value; 
 	

File: openhab-runtime/core/library/src/main/java/org/openhab/core/library/types/StopMoveType.java
Patch:
@@ -20,10 +20,10 @@
 */
 package org.openhab.core.library.types;
 
-import org.openhab.core.types.CommandType;
+import org.openhab.core.types.Command;
 import org.openhab.core.types.PrimitiveType;
 
-public enum StopMoveType implements PrimitiveType, CommandType {
+public enum StopMoveType implements PrimitiveType, Command {
 	STOP, MOVE;
 	
 	public String toString() {

File: openhab-runtime/core/library/src/main/java/org/openhab/core/library/types/StringType.java
Patch:
@@ -20,11 +20,11 @@
 */
 package org.openhab.core.library.types;
 
-import org.openhab.core.types.CommandType;
-import org.openhab.core.types.DataType;
+import org.openhab.core.types.Command;
+import org.openhab.core.types.State;
 import org.openhab.core.types.PrimitiveType;
 
-public class StringType implements PrimitiveType, DataType, CommandType {
+public class StringType implements PrimitiveType, State, Command {
 
 	private String value;
 

File: openhab-runtime/core/library/src/main/java/org/openhab/core/library/types/UnDefType.java
Patch:
@@ -20,10 +20,10 @@
 */
 package org.openhab.core.library.types;
 
-import org.openhab.core.types.DataType;
+import org.openhab.core.types.State;
 import org.openhab.core.types.PrimitiveType;
 
-public enum UnDefType implements PrimitiveType, DataType {
+public enum UnDefType implements PrimitiveType, State {
 	UNDEF, NULL;
 	
 	public String toString() {

File: openhab-runtime/core/library/src/main/java/org/openhab/core/library/types/UpDownType.java
Patch:
@@ -20,11 +20,11 @@
 */
 package org.openhab.core.library.types;
 
-import org.openhab.core.types.CommandType;
-import org.openhab.core.types.DataType;
+import org.openhab.core.types.Command;
+import org.openhab.core.types.State;
 import org.openhab.core.types.PrimitiveType;
 
-public enum UpDownType implements PrimitiveType, DataType, CommandType {
+public enum UpDownType implements PrimitiveType, State, Command {
 	UP, DOWN;
 	
 	public String toString() {

File: openhab-runtime/core/core/src/main/java/org/openhab/core/internal/items/ItemUpdater.java
Patch:
@@ -4,7 +4,7 @@
 import org.openhab.core.items.GenericItem;
 import org.openhab.core.items.ItemNotFoundException;
 import org.openhab.core.items.ItemRegistry;
-import org.openhab.core.types.DataType;
+import org.openhab.core.types.State;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -23,7 +23,7 @@ public void unsetItemRegistry(ItemRegistry itemRegistry) {
 	}
 
 	@Override
-	public void receiveUpdate(String itemName, DataType newStatus) {
+	public void receiveUpdate(String itemName, State newStatus) {
 		if(itemRegistry!=null) {
 			try {
 				GenericItem item = (GenericItem) itemRegistry.getItem(itemName);

File: openhab-runtime/core/core/src/main/java/org/openhab/core/types/State.java
Patch:
@@ -20,6 +20,6 @@
 */
 package org.openhab.core.types;
 
-public interface DataType extends Type {
+public interface State extends Type {
 
 }

File: openhab-runtime/core/core/src/main/java/org/openhab/core/events/EventPublisher.java
Patch:
@@ -31,6 +31,4 @@ public interface EventPublisher {
 
 	public abstract void postUpdate(String itemName, DataType newState);
 
-	public abstract void refresh(String itemName);
-
 }

File: openhab-runtime/core/core/src/main/java/org/openhab/core/events/EventSubscriber.java
Patch:
@@ -29,6 +29,4 @@ public interface EventSubscriber {
 	
 	public void receiveUpdate(String itemName, DataType newStatus);
 
-	public void refresh(String itemName);
-	
 }

File: openhab-runtime/core/console/src/main/java/org/openhab/core/console/internal/commands/ConsoleCommandProvider.java
Patch:
@@ -23,7 +23,7 @@
 import org.eclipse.osgi.framework.console.CommandInterpreter;
 import org.eclipse.osgi.framework.console.CommandProvider;
 import org.openhab.core.console.internal.ConsoleActivator;
-import org.openhab.core.items.GenericItem;
+import org.openhab.core.items.Item;
 import org.openhab.core.items.ItemRegistry;
 
 /**
@@ -51,7 +51,7 @@ public Object _openhab(CommandInterpreter interpreter) {
 		if(arg.equals("items")) {
 			ItemRegistry registry = (ItemRegistry) ConsoleActivator.itemRegistryTracker.getService();
 			if(registry!=null) {
-				for(GenericItem item : registry.getItems()) {
+				for(Item item : registry.getItems()) {
 					interpreter.println(item.getClass().getSimpleName() + ": " + item.getName());
 				}
 			} else {

File: openhab-runtime/core/core/src/main/java/org/openhab/core/items/ItemRegistry.java
Patch:
@@ -25,9 +25,9 @@
 
 public interface ItemRegistry {
 
-	public abstract GenericItem getItem(String name)
+	public abstract Item getItem(String name)
 			throws ItemNotFoundException;
 
-	public abstract Collection<GenericItem> getItems();
+	public abstract Collection<Item> getItems();
 
 }
\ No newline at end of file

File: openhab-runtime/core/console/src/main/java/org/openhab/core/console/internal/commands/ConsoleCommandProvider.java
Patch:
@@ -29,7 +29,7 @@ public String getHelp() {
 		buffer.append("---openHAB commands---\n\t");
 		buffer.append("openhab command <item> <command> - sends a command for an item\n\t");
 		buffer.append("openhab update <item> <state> - sends a status update for an item\n\t");
-		buffer.append("openhab refresh <item> - sends a refresh request for an item\n");
+		buffer.append("openhab refresh <item> - sends a refresh request for an item\n\t");
 		buffer.append("openhab items - lists names and types of all registered items\n\t");
 		return buffer.toString();
 	}

File: openhab-runtime/core/core/src/main/java/org/openhab/core/internal/CoreActivator.java
Patch:
@@ -35,8 +35,6 @@ public class CoreActivator implements BundleActivator {
 	 */
 	public void start(BundleContext context) throws Exception {
 		logger.info("openHAB Runtime Core has been started.");
-		HeartbeatPublisher heartBeat = new HeartbeatPublisher(context);
-		new Thread(heartBeat).start();
 	}
 
 	/*

