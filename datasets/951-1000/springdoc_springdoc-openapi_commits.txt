File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/hints/SpringDocHints.java
Patch:
@@ -78,8 +78,8 @@
 import io.swagger.v3.oas.models.security.Scopes;
 import io.swagger.v3.oas.models.servers.ServerVariables;
 import org.apache.commons.lang3.reflect.FieldUtils;
-import org.springdoc.core.configuration.SpringDocUIConfiguration;
 import org.springdoc.core.properties.SpringDocConfigProperties.ModelConverters;
+import org.springdoc.core.properties.SwaggerUiConfigProperties;
 
 import org.springframework.aot.hint.MemberCategory;
 import org.springframework.aot.hint.RuntimeHints;
@@ -206,7 +206,7 @@ public void registerHints(RuntimeHints hints, ClassLoader classLoader) {
 		//springdoc
 		hints.reflection().registerField(FieldUtils.getDeclaredField(io.swagger.v3.core.converter.ModelConverters.class, "converters", true));
 		hints.reflection().registerType(org.springdoc.core.utils.Constants.class, hint -> hint.withMembers(MemberCategory.DECLARED_FIELDS));
-		hints.resources().registerPattern(SpringDocUIConfiguration.SPRINGDOC_CONFIG_PROPERTIES)
+		hints.resources().registerPattern(SwaggerUiConfigProperties.SPRINGDOC_CONFIG_PROPERTIES)
 				.registerResourceBundle("sun.util.resources.LocaleNames");
 	}
 

File: springdoc-openapi-starter-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerConfig.java
Patch:
@@ -26,6 +26,8 @@
 
 package org.springdoc.webflux.ui;
 
+import java.util.Optional;
+
 import org.springdoc.core.configuration.SpringDocConfiguration;
 import org.springdoc.core.properties.SpringDocConfigProperties;
 import org.springdoc.core.properties.SwaggerUiConfigProperties;
@@ -34,10 +36,10 @@
 import org.springdoc.core.providers.ObjectMapperProvider;
 import org.springdoc.core.providers.SpringWebProvider;
 import org.springdoc.webflux.core.providers.SpringWebFluxProvider;
+
 import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
 import org.springframework.boot.actuate.autoconfigure.web.server.ConditionalOnManagementPort;
 import org.springframework.boot.actuate.autoconfigure.web.server.ManagementPortType;
-import org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties;
 import org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
@@ -51,8 +53,6 @@
 import org.springframework.context.annotation.Lazy;
 import org.springframework.web.reactive.config.WebFluxConfigurer;
 
-import java.util.Optional;
-
 import static org.springdoc.core.utils.Constants.SPRINGDOC_SWAGGER_UI_ENABLED;
 import static org.springdoc.core.utils.Constants.SPRINGDOC_USE_MANAGEMENT_PORT;
 import static org.springdoc.core.utils.Constants.SPRINGDOC_USE_ROOT_PATH;

File: springdoc-openapi-starter-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeWebFlux.java
Patch:
@@ -31,11 +31,12 @@
 import org.springdoc.core.properties.SwaggerUiConfigParameters;
 import org.springdoc.core.properties.SwaggerUiConfigProperties;
 import org.springdoc.core.providers.SpringWebProvider;
+import reactor.core.publisher.Mono;
+
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.http.server.reactive.ServerHttpResponse;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.GetMapping;
-import reactor.core.publisher.Mono;
 
 import static org.springdoc.core.utils.Constants.SWAGGER_CONFIG_FILE;
 import static org.springdoc.core.utils.Constants.SWAGGER_UI_PATH;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/AbstractSpringDocTest.java
Patch:
@@ -19,7 +19,6 @@
 package test.org.springdoc.ui;
 
 import org.springdoc.core.configuration.SpringDocConfiguration;
-import org.springdoc.core.configuration.SpringDocUIConfiguration;
 import org.springdoc.core.properties.SpringDocConfigProperties;
 import org.springdoc.core.properties.SwaggerUiConfigParameters;
 import org.springdoc.core.properties.SwaggerUiConfigProperties;
@@ -41,7 +40,7 @@
 @WebFluxTest
 @ContextConfiguration(classes = { SpringDocConfiguration.class, SpringDocConfigProperties.class,
 		SpringDocWebFluxConfiguration.class, SwaggerUiConfigParameters.class, SwaggerUiConfigProperties.class,
-		SwaggerConfig.class, SwaggerUiOAuthProperties.class, SpringDocUIConfiguration.class })
+		SwaggerConfig.class, SwaggerUiOAuthProperties.class })
 public abstract class AbstractSpringDocTest extends AbstractCommonTest {
 
 	private static final String DEFAULT_SWAGGER_INITIALIZER_URL = Constants.SWAGGER_INITIALIZER_URL;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirecFilterTest.java
Patch:
@@ -20,10 +20,11 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 
 @TestPropertySource(properties = "springdoc.swagger-ui.filter=false")

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectConfigUrlTest.java
Patch:
@@ -20,10 +20,11 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 
 @TestPropertySource(properties = {

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectDefaultTest.java
Patch:
@@ -20,9 +20,10 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.web.reactive.server.WebTestClient;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 
 public class SpringDocApp1RedirectDefaultTest extends AbstractSpringDocTest {

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectLayoutTest.java
Patch:
@@ -20,10 +20,11 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 
 @TestPropertySource(properties = "springdoc.swagger-ui.layout=BaseLayout")

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectWithConfigTest.java
Patch:
@@ -20,10 +20,11 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = {
 		"springdoc.swagger-ui.validatorUrl=/foo/validate",

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app13/SpringDocApp13Test.java
Patch:
@@ -25,13 +25,14 @@
 package test.org.springdoc.ui.app13;
 
 import org.junit.jupiter.api.Test;
+import reactor.core.publisher.Mono;
+import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.HttpStatusCode;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
-import reactor.core.publisher.Mono;
-import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app14/SpringDocApp14Test.java
Patch:
@@ -25,13 +25,14 @@
 package test.org.springdoc.ui.app14;
 
 import org.junit.jupiter.api.Test;
+import reactor.core.publisher.Mono;
+import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.HttpStatusCode;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
-import reactor.core.publisher.Mono;
-import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app15/SpringDocApp15Test.java
Patch:
@@ -25,13 +25,14 @@
 package test.org.springdoc.ui.app15;
 
 import org.junit.jupiter.api.Test;
+import reactor.core.publisher.Mono;
+import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.HttpStatusCode;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
-import reactor.core.publisher.Mono;
-import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app16/SpringDocApp16Test.java
Patch:
@@ -25,13 +25,14 @@
 package test.org.springdoc.ui.app16;
 
 import org.junit.jupiter.api.Test;
+import reactor.core.publisher.Mono;
+import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.HttpStatusCode;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
-import reactor.core.publisher.Mono;
-import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app17/SpringDocApp17Test.java
Patch:
@@ -19,10 +19,11 @@
 package test.org.springdoc.ui.app17;
 
 import org.junit.jupiter.api.Test;
+import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
-import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
 

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app19/SpringDocApp19Test.java
Patch:
@@ -26,15 +26,16 @@
 
 import jakarta.annotation.PostConstruct;
 import org.junit.jupiter.api.Test;
+import reactor.core.publisher.Mono;
+import test.org.springdoc.ui.AbstractCommonTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.HttpStatusCode;
 import org.springframework.web.reactive.function.client.WebClient;
-import reactor.core.publisher.Mono;
-import test.org.springdoc.ui.AbstractCommonTest;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app20/SpringDocApp20Test.java
Patch:
@@ -27,15 +27,16 @@
 
 import jakarta.annotation.PostConstruct;
 import org.junit.jupiter.api.Test;
+import reactor.core.publisher.Mono;
+import test.org.springdoc.ui.AbstractCommonTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.HttpStatusCode;
 import org.springframework.web.reactive.function.client.WebClient;
-import reactor.core.publisher.Mono;
-import test.org.springdoc.ui.AbstractCommonTest;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app24/SpringDocApp24Test.java
Patch:
@@ -19,10 +19,11 @@
 package test.org.springdoc.ui.app24;
 
 import org.junit.jupiter.api.Test;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Import;
 import org.springframework.test.context.TestPropertySource;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = {
 		"springdoc.api-docs.enabled=false",

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app3/SpringDocApp3RedirectDefaultTest.java
Patch:
@@ -21,10 +21,11 @@
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
 import org.springdoc.core.utils.Constants;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 
 @TestPropertySource(properties = {

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app3/SpringDocApp3Test.java
Patch:
@@ -19,9 +19,10 @@
 package test.org.springdoc.ui.app3;
 
 import org.junit.jupiter.api.Test;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = {
 		"springdoc.swagger-ui.path=/documentation/swagger-ui.html",

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app32/SpringDocBehindProxyWithCustomUIPathTest.java
Patch:
@@ -19,10 +19,11 @@
 package test.org.springdoc.ui.app32;
 
 import org.junit.jupiter.api.Test;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Import;
 import org.springframework.test.context.TestPropertySource;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app32/SpringDocBehindProxyWithCustomUIPathWithApiDocsTest.java
Patch:
@@ -19,10 +19,11 @@
 package test.org.springdoc.ui.app32;
 
 import org.junit.jupiter.api.Test;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Import;
 import org.springframework.test.context.TestPropertySource;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app33/SpringDocBehindProxyBasePathTest.java
Patch:
@@ -20,6 +20,9 @@
 
 import jakarta.annotation.PostConstruct;
 import org.junit.jupiter.api.Test;
+import reactor.core.publisher.Mono;
+import test.org.springdoc.ui.AbstractCommonTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
@@ -28,8 +31,6 @@
 import org.springframework.http.HttpStatus;
 import org.springframework.http.HttpStatusCode;
 import org.springframework.web.reactive.function.client.WebClient;
-import reactor.core.publisher.Mono;
-import test.org.springdoc.ui.AbstractCommonTest;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app4/SpringDocOauthPathsTest.java
Patch:
@@ -19,9 +19,10 @@
 package test.org.springdoc.ui.app4;
 
 import org.junit.jupiter.api.Test;
-import org.springframework.boot.autoconfigure.SpringBootApplication;
 import test.org.springdoc.ui.AbstractSpringDocTest;
 
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
 public class SpringDocOauthPathsTest extends AbstractSpringDocTest {
 
 	@Test

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app4/SpringDocOauthRedirectUrlRecalculateTest.java
Patch:
@@ -19,9 +19,10 @@
 package test.org.springdoc.ui.app4;
 
 import org.junit.jupiter.api.Test;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = { "server.forward-headers-strategy=framework" })
 public class SpringDocOauthRedirectUrlRecalculateTest extends AbstractSpringDocTest {

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app4/SpringDocOauthServletPathsTest.java
Patch:
@@ -19,9 +19,10 @@
 package test.org.springdoc.ui.app4;
 
 import org.junit.jupiter.api.Test;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = {
 		"springdoc.swagger-ui.path=/test/swagger.html"

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app6/SpringDocApp6Test.java
Patch:
@@ -25,10 +25,11 @@
 
 import org.junit.jupiter.api.Test;
 import org.springdoc.core.utils.Constants;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = { "springdoc.swagger-ui.oauth.clientId=myClientId", "springdoc.swagger-ui.disable-swagger-default-url=true" })
 public class SpringDocApp6Test extends AbstractSpringDocTest {

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app7/SpringDocApp7Test.java
Patch:
@@ -25,10 +25,11 @@
 
 import org.junit.jupiter.api.Test;
 import org.springdoc.core.utils.Constants;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = "springdoc.swagger-ui.disable-swagger-default-url=true")
 public class SpringDocApp7Test extends AbstractSpringDocTest {

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocAppRedirectWithPrefixTest.java
Patch:
@@ -21,9 +21,10 @@
 import org.apache.commons.lang3.StringUtils;
 import org.junit.jupiter.api.Test;
 import org.springdoc.core.utils.Constants;
+import test.org.springdoc.ui.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
-import test.org.springdoc.ui.AbstractSpringDocTest;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app21/SpringDocApp21Test.java
Patch:
@@ -19,9 +19,10 @@
 package test.org.springdoc.ui.app21;
 
 import org.junit.jupiter.api.Test;
-import org.springframework.boot.autoconfigure.SpringBootApplication;
 import test.org.springdoc.ui.AbstractSpringDocTest;
 
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/AbstractSpringDocTest.java
Patch:
@@ -44,7 +44,7 @@
 		SwaggerConfig.class, SwaggerUiOAuthProperties.class, SpringDocUIConfiguration.class })
 public abstract class AbstractSpringDocTest extends AbstractCommonTest {
 
-	private static final String DEFAULT_SWAGGER_INITIALIZER_URL = Constants.DEFAULT_WEB_JARS_PREFIX_URL + Constants.SWAGGER_INITIALIZER_URL;
+	private static final String DEFAULT_SWAGGER_INITIALIZER_URL = Constants.SWAGGER_INITIALIZER_URL;
 
 	@Autowired
 	protected WebTestClient webTestClient;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirecFilterTest.java
Patch:
@@ -20,11 +20,10 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 
 @TestPropertySource(properties = "springdoc.swagger-ui.filter=false")
@@ -36,7 +35,7 @@ void shouldRedirectWithConfigUrlIgnoringQueryParams() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
+				.value("Location", Matchers.is("/swagger-ui/index.html"));
 		super.checkJS("index1-filter");
 	}
 

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectConfigUrlTest.java
Patch:
@@ -20,11 +20,10 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 
 @TestPropertySource(properties = {
@@ -39,7 +38,7 @@ void shouldRedirectWithConfigUrlIgnoringQueryParams() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
+                .value("Location", Matchers.is("/swagger-ui/index.html"));
 
 		super.checkJS("index1-configurl");
 	}

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectDefaultTest.java
Patch:
@@ -20,10 +20,9 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.web.reactive.server.WebTestClient;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 
 public class SpringDocApp1RedirectDefaultTest extends AbstractSpringDocTest {
@@ -33,7 +32,7 @@ void shouldRedirectWithDefaultQueryParams() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
+                .value("Location", Matchers.is("/swagger-ui/index.html"));
 
 		webTestClient.get().uri("/v3/api-docs/swagger-config").exchange()
 				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl").isEqualTo("");

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectLayoutTest.java
Patch:
@@ -20,11 +20,10 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 
 @TestPropertySource(properties = "springdoc.swagger-ui.layout=BaseLayout")
@@ -36,7 +35,7 @@ void shouldRedirectWithConfigUrlIgnoringQueryParams() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
+                .value("Location", Matchers.is("/swagger-ui/index.html"));
 
 		super.checkJS("index1-layout");
 	}

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectWithConfigTest.java
Patch:
@@ -20,11 +20,10 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = {
 		"springdoc.swagger-ui.validatorUrl=/foo/validate",
@@ -38,7 +37,7 @@ void shouldRedirectWithConfiguredParams() {
 				.expectStatus().isFound();
 
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
+                .value("Location", Matchers.is("/swagger-ui/index.html"));
 
 		webTestClient.get().uri("/baf/batz/swagger-config").exchange()
 				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl").isEqualTo("/foo/validate");

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app17/SpringDocApp17Test.java
Patch:
@@ -19,11 +19,10 @@
 package test.org.springdoc.ui.app17;
 
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
+import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -38,7 +37,7 @@ class SpringDocApp17Test extends AbstractSpringDocActuatorTest {
 
 	@Test
 	void testIndex() {
-		EntityExchangeResult<byte[]> getResult = webTestClient.get().uri("/webjars/swagger-ui/index.html")
+		EntityExchangeResult<byte[]> getResult = webTestClient.get().uri("/swagger-ui/index.html")
 				.exchange()
 				.expectStatus().isOk()
 				.expectBody().returnResult();

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app24/SpringDocApp24Test.java
Patch:
@@ -19,11 +19,10 @@
 package test.org.springdoc.ui.app24;
 
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Import;
 import org.springframework.test.context.TestPropertySource;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = {
 		"springdoc.api-docs.enabled=false",
@@ -40,7 +39,7 @@ void test_apidocs_disabled() {
 				.jsonPath("$.url").isEqualTo("/api-docs/xxx/v1/openapi.yml")
 				.jsonPath("$.configUrl").isEqualTo("/api-docs/swagger-config")
 				.jsonPath("$.validatorUrl").isEqualTo("")
-				.jsonPath("$.oauth2RedirectUrl").isEqualTo("/webjars/swagger-ui/oauth2-redirect.html");
+                .jsonPath("$.oauth2RedirectUrl").isEqualTo("/swagger-ui/oauth2-redirect.html");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app3/SpringDocApp3Test.java
Patch:
@@ -19,10 +19,9 @@
 package test.org.springdoc.ui.app3;
 
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = {
 		"springdoc.swagger-ui.path=/documentation/swagger-ui.html",
@@ -34,7 +33,7 @@ public class SpringDocApp3Test extends AbstractSpringDocTest {
 	void shouldDisplaySwaggerUiPage() {
 		webTestClient.get().uri("/documentation/swagger-ui.html").exchange()
 				.expectStatus().isFound();
-		webTestClient.get().uri("/documentation/webjars/swagger-ui/index.html").exchange()
+        webTestClient.get().uri("/documentation/swagger-ui/index.html").exchange()
 				.expectStatus().isOk();
 	}
 

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app33/SpringDocBehindProxyBasePathTest.java
Patch:
@@ -20,9 +20,6 @@
 
 import jakarta.annotation.PostConstruct;
 import org.junit.jupiter.api.Test;
-import reactor.core.publisher.Mono;
-import test.org.springdoc.ui.AbstractCommonTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
@@ -31,6 +28,8 @@
 import org.springframework.http.HttpStatus;
 import org.springframework.http.HttpStatusCode;
 import org.springframework.web.reactive.function.client.WebClient;
+import reactor.core.publisher.Mono;
+import test.org.springdoc.ui.AbstractCommonTest;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app4/SpringDocOauthPathsTest.java
Patch:
@@ -19,17 +19,16 @@
 package test.org.springdoc.ui.app4;
 
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 public class SpringDocOauthPathsTest extends AbstractSpringDocTest {
 
 	@Test
 	void oauth2_redirect_url_calculated() throws Exception {
 		webTestClient.get().uri("/v3/api-docs/swagger-config").exchange()
 				.expectStatus().isOk().expectBody()
-				.jsonPath("$.oauth2RedirectUrl").isEqualTo("/webjars/swagger-ui/oauth2-redirect.html");
+                .jsonPath("$.oauth2RedirectUrl").isEqualTo("/swagger-ui/oauth2-redirect.html");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app6/SpringDocApp6Test.java
Patch:
@@ -25,18 +25,17 @@
 
 import org.junit.jupiter.api.Test;
 import org.springdoc.core.utils.Constants;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = { "springdoc.swagger-ui.oauth.clientId=myClientId", "springdoc.swagger-ui.disable-swagger-default-url=true" })
 public class SpringDocApp6Test extends AbstractSpringDocTest {
 
 	@Test
 	void transformed_index_with_oauth() throws Exception {
-		EntityExchangeResult<byte[]> getResult = webTestClient.get().uri("/webjars" + Constants.SWAGGER_INITIALIZER_URL)
+        EntityExchangeResult<byte[]> getResult = webTestClient.get().uri(Constants.SWAGGER_INITIALIZER_URL)
 				.exchange()
 				.expectStatus().isOk()
 				.expectBody().returnResult();

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app7/SpringDocApp7Test.java
Patch:
@@ -25,18 +25,17 @@
 
 import org.junit.jupiter.api.Test;
 import org.springdoc.core.utils.Constants;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = "springdoc.swagger-ui.disable-swagger-default-url=true")
 public class SpringDocApp7Test extends AbstractSpringDocTest {
 
 	@Test
 	void transformed_index_with_oauth() throws Exception {
-		EntityExchangeResult<byte[]> getResult = webTestClient.get().uri("/webjars" + Constants.SWAGGER_INITIALIZER_URL)
+        EntityExchangeResult<byte[]> getResult = webTestClient.get().uri(Constants.SWAGGER_INITIALIZER_URL)
 				.exchange()
 				.expectStatus().isOk()
 				.expectBody().returnResult();

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app21/SpringDocApp21Test.java
Patch:
@@ -19,9 +19,8 @@
 package test.org.springdoc.ui.app21;
 
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/AbstractSpringDocTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.springdoc.core.utils.Constants;
 import org.springdoc.webflux.core.configuration.SpringDocWebFluxConfiguration;
 import org.springdoc.webflux.ui.SwaggerConfig;
-
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
 import org.springframework.test.context.ContextConfiguration;
@@ -44,7 +43,7 @@
 		SwaggerConfig.class, SwaggerUiOAuthProperties.class, SpringDocUIConfiguration.class })
 public abstract class AbstractSpringDocTest extends AbstractCommonTest {
 
-	private static final String DEFAULT_SWAGGER_INITIALIZER_URL = Constants.DEFAULT_WEB_JARS_PREFIX_URL + Constants.SWAGGER_INITIALIZER_URL;
+	private static final String DEFAULT_SWAGGER_INITIALIZER_URL = Constants.SWAGGER_INITIALIZER_URL;
 
 	@Autowired
 	protected WebTestClient webTestClient;

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirecFilterTest.java
Patch:
@@ -20,11 +20,10 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 
 @TestPropertySource(properties = "springdoc.swagger-ui.filter=false")
@@ -36,7 +35,7 @@ void shouldRedirectWithConfigUrlIgnoringQueryParams() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
+				.value("Location", Matchers.is("/swagger-ui/index.html"));
 		super.checkJS("index1-filter");
 	}
 

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectConfigUrlTest.java
Patch:
@@ -20,11 +20,10 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 
 @TestPropertySource(properties = {
@@ -39,7 +38,7 @@ void shouldRedirectWithConfigUrlIgnoringQueryParams() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
+                .value("Location", Matchers.is("/swagger-ui/index.html"));
 
 		super.checkJS("index1-configurl");
 	}

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectDefaultTest.java
Patch:
@@ -20,10 +20,9 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.web.reactive.server.WebTestClient;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 
 public class SpringDocApp1RedirectDefaultTest extends AbstractSpringDocTest {
@@ -33,7 +32,7 @@ void shouldRedirectWithDefaultQueryParams() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
+                .value("Location", Matchers.is("/swagger-ui/index.html"));
 
 		webTestClient.get().uri("/v3/api-docs/swagger-config").exchange()
 				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl").isEqualTo("");

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectLayoutTest.java
Patch:
@@ -20,11 +20,10 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 
 @TestPropertySource(properties = "springdoc.swagger-ui.layout=BaseLayout")
@@ -36,7 +35,7 @@ void shouldRedirectWithConfigUrlIgnoringQueryParams() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
+                .value("Location", Matchers.is("/swagger-ui/index.html"));
 
 		super.checkJS("index1-layout");
 	}

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectWithConfigTest.java
Patch:
@@ -20,11 +20,10 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = {
 		"springdoc.swagger-ui.validatorUrl=/foo/validate",
@@ -38,7 +37,7 @@ void shouldRedirectWithConfiguredParams() {
 				.expectStatus().isFound();
 
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
+                .value("Location", Matchers.is("/swagger-ui/index.html"));
 
 		webTestClient.get().uri("/baf/batz/swagger-config").exchange()
 				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl").isEqualTo("/foo/validate");

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app17/SpringDocApp17Test.java
Patch:
@@ -19,11 +19,10 @@
 package test.org.springdoc.ui.app17;
 
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
+import test.org.springdoc.ui.AbstractSpringDocActuatorTest;
 
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -38,7 +37,7 @@ class SpringDocApp17Test extends AbstractSpringDocActuatorTest {
 
 	@Test
 	void testIndex() {
-		EntityExchangeResult<byte[]> getResult = webTestClient.get().uri("/webjars/swagger-ui/index.html")
+		EntityExchangeResult<byte[]> getResult = webTestClient.get().uri("/swagger-ui/index.html")
 				.exchange()
 				.expectStatus().isOk()
 				.expectBody().returnResult();

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app24/SpringDocApp24Test.java
Patch:
@@ -19,11 +19,10 @@
 package test.org.springdoc.ui.app24;
 
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Import;
 import org.springframework.test.context.TestPropertySource;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = {
 		"springdoc.api-docs.enabled=false",
@@ -40,7 +39,7 @@ void test_apidocs_disabled() {
 				.jsonPath("$.url").isEqualTo("/api-docs/xxx/v1/openapi.yml")
 				.jsonPath("$.configUrl").isEqualTo("/api-docs/swagger-config")
 				.jsonPath("$.validatorUrl").isEqualTo("")
-				.jsonPath("$.oauth2RedirectUrl").isEqualTo("/webjars/swagger-ui/oauth2-redirect.html");
+                .jsonPath("$.oauth2RedirectUrl").isEqualTo("/swagger-ui/oauth2-redirect.html");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app3/SpringDocApp3Test.java
Patch:
@@ -19,10 +19,9 @@
 package test.org.springdoc.ui.app3;
 
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = {
 		"springdoc.swagger-ui.path=/documentation/swagger-ui.html",
@@ -34,7 +33,7 @@ public class SpringDocApp3Test extends AbstractSpringDocTest {
 	void shouldDisplaySwaggerUiPage() {
 		webTestClient.get().uri("/documentation/swagger-ui.html").exchange()
 				.expectStatus().isFound();
-		webTestClient.get().uri("/documentation/webjars/swagger-ui/index.html").exchange()
+        webTestClient.get().uri("/documentation/swagger-ui/index.html").exchange()
 				.expectStatus().isOk();
 	}
 

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app4/SpringDocOauthPathsTest.java
Patch:
@@ -19,17 +19,16 @@
 package test.org.springdoc.ui.app4;
 
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 public class SpringDocOauthPathsTest extends AbstractSpringDocTest {
 
 	@Test
 	void oauth2_redirect_url_calculated() throws Exception {
 		webTestClient.get().uri("/v3/api-docs/swagger-config").exchange()
 				.expectStatus().isOk().expectBody()
-				.jsonPath("$.oauth2RedirectUrl").isEqualTo("/webjars/swagger-ui/oauth2-redirect.html");
+                .jsonPath("$.oauth2RedirectUrl").isEqualTo("/swagger-ui/oauth2-redirect.html");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app6/SpringDocApp6Test.java
Patch:
@@ -25,18 +25,17 @@
 
 import org.junit.jupiter.api.Test;
 import org.springdoc.core.utils.Constants;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = { "springdoc.swagger-ui.oauth.clientId=myClientId", "springdoc.swagger-ui.disable-swagger-default-url=true" })
 public class SpringDocApp6Test extends AbstractSpringDocTest {
 
 	@Test
 	void transformed_index_with_oauth() throws Exception {
-		EntityExchangeResult<byte[]> getResult = webTestClient.get().uri("/webjars" + Constants.SWAGGER_INITIALIZER_URL)
+        EntityExchangeResult<byte[]> getResult = webTestClient.get().uri(Constants.SWAGGER_INITIALIZER_URL)
 				.exchange()
 				.expectStatus().isOk()
 				.expectBody().returnResult();

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app7/SpringDocApp7Test.java
Patch:
@@ -25,18 +25,17 @@
 
 import org.junit.jupiter.api.Test;
 import org.springdoc.core.utils.Constants;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 @TestPropertySource(properties = "springdoc.swagger-ui.disable-swagger-default-url=true")
 public class SpringDocApp7Test extends AbstractSpringDocTest {
 
 	@Test
 	void transformed_index_with_oauth() throws Exception {
-		EntityExchangeResult<byte[]> getResult = webTestClient.get().uri("/webjars" + Constants.SWAGGER_INITIALIZER_URL)
+        EntityExchangeResult<byte[]> getResult = webTestClient.get().uri(Constants.SWAGGER_INITIALIZER_URL)
 				.exchange()
 				.expectStatus().isOk()
 				.expectBody().returnResult();

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app21/SpringDocApp21Test.java
Patch:
@@ -19,9 +19,8 @@
 package test.org.springdoc.ui.app21;
 
 import org.junit.jupiter.api.Test;
-import test.org.springdoc.ui.AbstractSpringDocTest;
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import test.org.springdoc.ui.AbstractSpringDocTest;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/utils/Constants.java
Patch:
@@ -175,7 +175,7 @@ public final class Constants {
 	/**
 	 * The constant DEFAULT_WEB_JARS_PREFIX_URL.
 	 */
-	public static final String DEFAULT_WEB_JARS_PREFIX_URL = "/webjars";
+	public static final String DEFAULT_WEB_JARS_PREFIX_URL = "/webjars/swagger-ui/5.18.2";
 
 	/**
 	 * The constant CLASSPATH_RESOURCE_LOCATION.

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/converters/PageOpenAPIConverter.java
Patch:
@@ -35,12 +35,13 @@
 import io.swagger.v3.core.converter.ModelConverter;
 import io.swagger.v3.core.converter.ModelConverterContext;
 import io.swagger.v3.oas.models.media.Schema;
-import org.apache.commons.lang3.StringUtils;
 import org.springdoc.core.providers.ObjectMapperProvider;
 
 import org.springframework.core.ResolvableType;
 import org.springframework.data.web.PagedModel;
 
+import static org.springdoc.core.utils.SpringDocUtils.getParentTypeName;
+
 /**
  * The Spring Data Page type model converter.
  *
@@ -95,7 +96,7 @@ public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterato
 				if (!type.isSchemaProperty())
 					type = resolvePagedModelType(type);
 				else
-					type.name(cls.getSimpleName() + StringUtils.capitalize(type.getParent().getType()));
+					type.name(getParentTypeName(type, cls));
 			}
 		}
 		return (chain.hasNext()) ? chain.next().resolve(type, context, chain) : null;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/converters/PageableOpenAPIConverter.java
Patch:
@@ -33,10 +33,11 @@
 import io.swagger.v3.core.converter.ModelConverter;
 import io.swagger.v3.core.converter.ModelConverterContext;
 import io.swagger.v3.oas.models.media.Schema;
-import org.apache.commons.lang3.StringUtils;
 import org.springdoc.core.converters.models.Pageable;
 import org.springdoc.core.providers.ObjectMapperProvider;
 
+import static org.springdoc.core.utils.SpringDocUtils.getParentTypeName;
+
 /**
  * The Pageable Type models converter.
  *
@@ -90,7 +91,7 @@ public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterato
 				if (!type.isSchemaProperty())
 					type = PAGEABLE;
 				else
-					type.name(cls.getSimpleName() + StringUtils.capitalize(type.getParent().getType()));
+					type.name(getParentTypeName(type, cls));
 			}
 		}
 		return (chain.hasNext()) ? chain.next().resolve(type, context, chain) : null;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/converters/SortOpenAPIConverter.java
Patch:
@@ -33,10 +33,11 @@
 import io.swagger.v3.core.converter.ModelConverter;
 import io.swagger.v3.core.converter.ModelConverterContext;
 import io.swagger.v3.oas.models.media.Schema;
-import org.apache.commons.lang3.StringUtils;
 import org.springdoc.core.converters.models.Sort;
 import org.springdoc.core.providers.ObjectMapperProvider;
 
+import static org.springdoc.core.utils.SpringDocUtils.getParentTypeName;
+
 /**
  * The Spring Data Sort type model converter.
  *
@@ -85,7 +86,7 @@ public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterato
 				if (!type.isSchemaProperty())
 					type = SORT;
 				else
-					type.name(cls.getSimpleName() + StringUtils.capitalize(type.getParent().getType()));
+					type.name(getParentTypeName(type, cls));
 			}
 		}
 		return (chain.hasNext()) ? chain.next().resolve(type, context, chain) : null;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/customizers/OpenApiHateoasLinksCustomizer.java
Patch:
@@ -33,7 +33,7 @@
 import io.swagger.v3.core.util.AnnotationsUtils;
 import io.swagger.v3.oas.models.OpenAPI;
 import io.swagger.v3.oas.models.media.MapSchema;
-import io.swagger.v3.oas.models.media.ObjectSchema;
+import io.swagger.v3.oas.models.media.Schema;
 import io.swagger.v3.oas.models.media.StringSchema;
 import org.springdoc.core.properties.SpringDocConfigProperties;
 
@@ -68,7 +68,7 @@ public void customise(OpenAPI openApi) {
 				.schema("Link", resolvedLinkSchema.schema)
 				.schema("Links", new MapSchema()
 						.additionalProperties(new StringSchema())
-						.additionalProperties(new ObjectSchema().$ref(AnnotationsUtils.COMPONENTS_REF + "Link")));
+						.additionalProperties(new Schema<>().$ref(AnnotationsUtils.COMPONENTS_REF + "Link")));
 		if (springDocConfigProperties.isRemoveBrokenReferenceDefinitions())
 			this.removeBrokenReferenceDefinitions(openApi);
 	}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/mixins/SortedOpenAPIMixin31.java
Patch:
@@ -42,7 +42,7 @@
  *
  * @author bnasslashen
  */
-@JsonPropertyOrder(value = { "openapi", "info", "externalDocs", "servers", "security", "tags", "paths", "components", "webhooks" }, alphabetic = true)
+@JsonPropertyOrder(value = {"openapi", "info", "externalDocs", "servers", "security", "tags", "paths", "components", "webhooks"}, alphabetic = true)
 public interface SortedOpenAPIMixin31 {
 
 	/**
@@ -71,5 +71,4 @@ public interface SortedOpenAPIMixin31 {
 	 */
 	@JsonSerialize(using = PathsSerializer.class)
 	Paths getPaths();
-
 }
\ No newline at end of file

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/AbstractRequestService.java
Patch:
@@ -302,7 +302,7 @@ public Operation build(HandlerMethod handlerMethod, RequestMethod requestMethod,
 
 		for (MethodParameter methodParameter : parameters) {
 			// check if query param
-			Parameter parameter = null;
+			Parameter parameter;
 			io.swagger.v3.oas.annotations.Parameter parameterDoc = AnnotatedElementUtils.findMergedAnnotation(
 					AnnotatedElementUtils.forAnnotations(methodParameter.getParameterAnnotations()),
 					io.swagger.v3.oas.annotations.Parameter.class);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -510,6 +510,8 @@ private void trimIndentOperation(Operation operation) {
 	 */
 	protected void calculateWebhooks(OpenAPI calculatedOpenAPI, Locale locale) {
 		Webhooks[] webhooksAttr = openAPIService.getWebhooks();
+		if(ArrayUtils.isEmpty(webhooksAttr))
+			return;
 		var webhooks = Arrays.stream(webhooksAttr).map(Webhooks::value).flatMap(Arrays::stream).toArray(Webhook[]::new);
 		Arrays.stream(webhooks).forEach(webhook -> {
 			io.swagger.v3.oas.annotations.Operation apiOperation = webhook.operation();

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/properties/SpringDocConfigProperties.java
Patch:
@@ -1304,7 +1304,7 @@ public static class ApiDocs {
 		/**
 		 * The OpenAPI version.
 		 */
-		private OpenApiVersion version;
+		private OpenApiVersion version = OpenApiVersion.OPENAPI_3_1;
 
 		/**
 		 * Gets path.

File: springdoc-openapi-starter-webflux-api/src/test/java/test/org/springdoc/api/AbstractCommonTest.java
Patch:
@@ -11,10 +11,12 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 @AutoConfigureWebTestClient(timeout = "3600000")
 @ActiveProfiles("test")
+@TestPropertySource(properties =  "springdoc.api-docs.version=openapi_3_0" )
 public abstract class AbstractCommonTest {
 
 	protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractCommonTest.class);

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/AbstractCommonTest.java
Patch:
@@ -12,10 +12,12 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 @AutoConfigureWebTestClient(timeout = "3600000")
 @ActiveProfiles("test")
+@TestPropertySource(properties =  "springdoc.api-docs.version=openapi_3_0" )
 public abstract class AbstractCommonTest {
 
 	protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractCommonTest.class);

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/AbstractSpringDocV30Test.java
Patch:
@@ -29,6 +29,7 @@
 import test.org.springdoc.api.AbstractCommonTest;
 
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.servlet.MvcResult;
 
 import static org.hamcrest.Matchers.is;
@@ -38,6 +39,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 @SpringBootTest
+@TestPropertySource(properties = { "springdoc.api-docs.version=openapi_3_0" })
 public abstract class AbstractSpringDocV30Test extends AbstractCommonTest {
 
 	public static String className;

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app136/SpringDocApp136Test.java
Patch:
@@ -52,7 +52,7 @@
 /**
  * Tests deterministic creation of operationIds
  */
-@SpringBootTest(properties = { SPRINGDOC_CACHE_DISABLED + "=true" })
+@SpringBootTest(properties = { SPRINGDOC_CACHE_DISABLED + "=true", "springdoc.api-docs.version=openapi_3_0"  })
 public class SpringDocApp136Test extends AbstractCommonTest {
 
 	@Autowired

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app193/SpringDocApp193Test.java
Patch:
@@ -39,7 +39,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-@SpringBootTest
+@SpringBootTest(properties = { "springdoc.api-docs.version=openapi_3_0" })
 public class SpringDocApp193Test extends AbstractCommonTest {
 
 	@Test

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app209/SpringDocApp209Test.java
Patch:
@@ -56,7 +56,8 @@
 
 @SpringBootTest(properties = {
 		"springdoc.pre-loading-enabled=true",
-		"springdoc.pre-loading-locales=ja"
+		"springdoc.pre-loading-locales=ja",
+		"springdoc.api-docs.version=openapi_3_0"
 })
 public class SpringDocApp209Test extends AbstractCommonTest {
 	public static String className;

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v31/AbstractSpringDocV31Test.java
Patch:
@@ -39,7 +39,6 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 @SpringBootTest
-@TestPropertySource(properties = { "springdoc.api-docs.version=openapi_3_1" })
 public abstract class AbstractSpringDocV31Test extends AbstractCommonTest {
 
 	public static String className;

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/AbstractCommonTest.java
Patch:
@@ -9,10 +9,12 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.servlet.MockMvc;
 
 @AutoConfigureMockMvc
 @ActiveProfiles("test")
+@TestPropertySource(properties =  "springdoc.api-docs.version=openapi_3_0" )
 public abstract class AbstractCommonTest {
 
 	@Autowired

File: springdoc-openapi-tests/springdoc-openapi-actuator-webflux-tests/src/test/java/test/org/springdoc/api/AbstractCommonTest.java
Patch:
@@ -20,7 +20,7 @@
 
 @AutoConfigureWebTestClient(timeout = "3600000")
 @ActiveProfiles("test")
-@TestPropertySource(properties = { "management.endpoints.enabled-by-default=false" })
+@TestPropertySource(properties = { "management.endpoints.enabled-by-default=false" ,  "springdoc.api-docs.version=openapi_3_0" })
 public abstract class AbstractCommonTest {
 
 	protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractCommonTest.class);

File: springdoc-openapi-tests/springdoc-openapi-actuator-webmvc-tests/src/test/java/test/org/springdoc/api/AbstractCommonTest.java
Patch:
@@ -13,7 +13,7 @@
 
 @AutoConfigureMockMvc
 @ActiveProfiles("test")
-@TestPropertySource(properties = { "management.endpoints.enabled-by-default=false" })
+@TestPropertySource(properties = { "management.endpoints.enabled-by-default=false" ,  "springdoc.api-docs.version=openapi_3_0" })
 public abstract class AbstractCommonTest {
 
 	@Autowired

File: springdoc-openapi-tests/springdoc-openapi-function-webflux-tests/src/test/java/test/org/springdoc/api/AbstractCommonTest.java
Patch:
@@ -11,10 +11,12 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 @AutoConfigureWebTestClient(timeout = "3600000")
 @ActiveProfiles("test")
+@TestPropertySource(properties =  "springdoc.api-docs.version=openapi_3_0" )
 public abstract class AbstractCommonTest {
 
 	protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractCommonTest.class);

File: springdoc-openapi-tests/springdoc-openapi-function-webmvc-tests/src/test/java/test/org/springdoc/api/AbstractCommonTest.java
Patch:
@@ -8,10 +8,12 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.servlet.MockMvc;
 
 @AutoConfigureMockMvc
 @ActiveProfiles("test")
+@TestPropertySource(properties =  "springdoc.api-docs.version=openapi_3_0" )
 public abstract class AbstractCommonTest {
 
 	@Autowired

File: springdoc-openapi-tests/springdoc-openapi-groovy-tests/src/test/groovy/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.MvcResult;
 
@@ -44,6 +45,7 @@
 @ActiveProfiles("test")
 @SpringBootTest
 @AutoConfigureMockMvc
+@TestPropertySource(properties =  "springdoc.api-docs.version=openapi_3_0" )
 public abstract class AbstractSpringDocTest {
 
 	protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractSpringDocTest.class);

File: springdoc-openapi-tests/springdoc-openapi-hateoas-tests/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.MvcResult;
 
@@ -48,6 +49,7 @@
 @ActiveProfiles("test")
 @SpringBootTest
 @AutoConfigureMockMvc
+@TestPropertySource(properties =  "springdoc.api-docs.version=openapi_3_0" )
 public abstract class AbstractSpringDocTest {
 
 	public static String className;

File: springdoc-openapi-tests/springdoc-openapi-javadoc-tests/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.MvcResult;
 
@@ -47,6 +48,7 @@
 @ActiveProfiles("test")
 @SpringBootTest
 @AutoConfigureMockMvc
+@TestPropertySource(properties =  "springdoc.api-docs.version=openapi_3_0" )
 public abstract class AbstractSpringDocTest {
 
 	/**

File: springdoc-openapi-tests/springdoc-openapi-kotlin-webflux-tests/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -31,13 +31,15 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
 import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;
 
 @WebFluxTest
 @ActiveProfiles("test")
+@TestPropertySource(properties =  "springdoc.api-docs.version=openapi_3_0" )
 public abstract class AbstractSpringDocTest {
 
 	protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractSpringDocTest.class);

File: springdoc-openapi-tests/springdoc-openapi-security-tests/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.MvcResult;
 
@@ -45,6 +46,7 @@
 @ActiveProfiles("test")
 @SpringBootTest
 @AutoConfigureMockMvc
+@TestPropertySource(properties =  "springdoc.api-docs.version=openapi_3_0" )
 public abstract class AbstractSpringDocTest {
 
 	public static String className;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/data/DataRestRequestService.java
Patch:
@@ -226,7 +226,7 @@ private boolean isParamToIgnore(MethodParameter methodParameter) {
 	private void addParameters(OpenAPI openAPI, RequestMethod requestMethod, MethodAttributes methodAttributes, Operation operation,
 			MethodParameter methodParameter, ParameterInfo parameterInfo, Parameter parameter) {
 		List<Annotation> parameterAnnotations = Arrays.asList(getParameterAnnotations(methodParameter));
-		if (requestBuilder.isValidParameter(parameter)) {
+		if (requestBuilder.isValidParameter(parameter,methodAttributes)) {
 			requestBuilder.applyBeanValidatorAnnotations(parameter, parameterAnnotations);
 			operation.addParametersItem(parameter);
 		}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/customizers/OperationIdCustomizer.java
Patch:
@@ -72,7 +72,7 @@ private void processOperation(Operation operation, Map<String, Integer> operatio
 			String originalOperationId = operation.getOperationId();
 
 			// Check if operationId already exists
-			if (operationIdCount.containsKey(originalOperationId)) {
+			if ( originalOperationId!=null && operationIdCount.containsKey(originalOperationId)) {
 				// Get the count for the current operationId and increment
 				int count = operationIdCount.get(originalOperationId);
 				count++;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/extractor/MethodParameterPojoExtractor.java
Patch:
@@ -192,7 +192,7 @@ private static Stream<MethodParameter> fromSimpleClass(Class<?> paramClass, Fiel
 						.map(RecordComponent::getAccessor)
 						.map(method -> new MethodParameter(method, -1))
 						.map(methodParameter -> DelegatingMethodParameter.changeContainingClass(methodParameter, paramClass))
-						.map(param -> new DelegatingMethodParameter(param, fieldNamePrefix + field.getName(), fieldAnnotations, true, isNotRequired));
+						.map(param -> new DelegatingMethodParameter(param, fieldNamePrefix + field.getName(), fieldAnnotations, param.getMethodAnnotations(), true, isNotRequired));
 
 			}
 			else
@@ -202,7 +202,7 @@ private static Stream<MethodParameter> fromSimpleClass(Class<?> paramClass, Fiel
 						.filter(Objects::nonNull)
 						.map(method -> new MethodParameter(method, -1))
 						.map(methodParameter -> DelegatingMethodParameter.changeContainingClass(methodParameter, paramClass))
-						.map(param -> new DelegatingMethodParameter(param, fieldNamePrefix + field.getName(), fieldAnnotations, true, isNotRequired));
+						.map(param -> new DelegatingMethodParameter(param, fieldNamePrefix + field.getName(), fieldAnnotations, param.getMethodAnnotations(), true, isNotRequired));
 		}
 		catch (IntrospectionException e) {
 			return Stream.of();

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/AbstractRequestService.java
Patch:
@@ -778,7 +778,7 @@ private boolean isRequestBodyParam(RequestMethod requestMethod, ParameterInfo pa
 	 * @param methodParameter the method parameter
 	 * @return the boolean
  	 */
-	private boolean checkRequestBodyAnnotation(MethodParameter methodParamater) {
+	private boolean checkRequestBodyAnnotation(MethodParameter methodParameter) {
 		return methodParameter.getParameterAnnotation(org.springframework.web.bind.annotation.RequestBody.class) != null
 				|| AnnotatedElementUtils.findMergedAnnotation(Objects.requireNonNull(methodParameter.getParameter()), io.swagger.v3.oas.annotations.parameters.RequestBody.class) != null
 				|| AnnotatedElementUtils.findMergedAnnotation(Objects.requireNonNull(methodParameter.getMethod()), io.swagger.v3.oas.annotations.parameters.RequestBody.class) != null;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericParameterService.java
Patch:
@@ -88,6 +88,7 @@
 import org.springframework.web.multipart.MultipartRequest;
 
 import static org.springdoc.core.utils.Constants.DOT;
+import static org.springdoc.core.utils.SpringDocUtils.getParameterAnnotations;
 
 /**
  * The type Generic parameter builder.
@@ -377,7 +378,7 @@ Schema calculateSchema(Components components, ParameterInfo parameterInfo, Reque
 						type = springConvertedType;
 				}
 			}
-			schemaN = SpringDocAnnotationsUtils.extractSchema(components, type, jsonView, methodParameter.getParameterAnnotations(), propertyResolverUtils.getSpecVersion());
+			schemaN = SpringDocAnnotationsUtils.extractSchema(components, type, jsonView, getParameterAnnotations(methodParameter), propertyResolverUtils.getSpecVersion());
 		}
 		else
 			schemaN = parameterInfo.getParameterModel().getSchema();

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericResponseService.java
Patch:
@@ -94,6 +94,7 @@
 import static org.springdoc.core.utils.SpringDocAnnotationsUtils.extractSchema;
 import static org.springdoc.core.utils.SpringDocAnnotationsUtils.getContent;
 import static org.springdoc.core.utils.SpringDocAnnotationsUtils.mergeSchema;
+import static org.springdoc.core.utils.SpringDocUtils.getParameterAnnotations;
 
 /**
  * The type Generic response builder.
@@ -518,7 +519,7 @@ public Set<io.swagger.v3.oas.annotations.responses.ApiResponse> getApiResponses(
 	 */
 	private Content buildContent(Components components, MethodParameter methodParameter, String[] methodProduces, JsonView jsonView) {
 		Type returnType = GenericTypeResolver.resolveType(methodParameter.getGenericParameterType(), methodParameter.getContainingClass());
-		return buildContent(components, methodParameter.getParameterAnnotations(), methodProduces, jsonView, returnType);
+		return buildContent(components, getParameterAnnotations(methodParameter), methodProduces, jsonView, returnType);
 	}
 
 	/**
@@ -611,7 +612,7 @@ else if (CollectionUtils.isEmpty(apiResponse.getContent()))
 			Content existingContent = apiResponse.getContent();
 			Type type = GenericTypeResolver.resolveType( methodParameter.getGenericParameterType(), methodParameter.getContainingClass());
 			Schema<?> schemaN = calculateSchema(components, type,
-					methodAttributes.getJsonViewAnnotation(), methodParameter.getParameterAnnotations());
+					methodAttributes.getJsonViewAnnotation(), getParameterAnnotations(methodParameter));
 			if (schemaN != null && ArrayUtils.isNotEmpty(methodAttributes.getMethodProduces()))
 				Arrays.stream(methodAttributes.getMethodProduces()).forEach(mediaTypeStr -> mergeSchema(existingContent, schemaN, mediaTypeStr));
 		}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocJavadocConfiguration.java
Patch:
@@ -38,6 +38,8 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
+import org.springframework.core.Ordered;
+import org.springframework.core.annotation.Order;
 
 /**
  * The type Spring doc security configuration.
@@ -73,6 +75,7 @@ SpringDocJavadocProvider springDocJavadocProvider() {
 	@Bean
 	@ConditionalOnMissingBean
 	@Lazy(false)
+	@Order(Ordered.HIGHEST_PRECEDENCE)
 	JavadocPropertyCustomizer javadocPropertyCustomizer(JavadocProvider javadocProvider, ObjectMapperProvider objectMapperProvider) {
 		return new JavadocPropertyCustomizer(javadocProvider, objectMapperProvider);
 	}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocSortConfiguration.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.Optional;
 
 import org.springdoc.core.converters.SortOpenAPIConverter;
-import org.springdoc.core.converters.models.SortObject;
 import org.springdoc.core.customizers.DataRestDelegatingMethodParameterCustomizer;
 import org.springdoc.core.providers.ObjectMapperProvider;
 import org.springdoc.core.providers.RepositoryRestConfigurationProvider;
@@ -71,7 +70,6 @@ public class SpringDocSortConfiguration {
 	@Lazy(false)
 	SortOpenAPIConverter sortOpenAPIConverter(ObjectMapperProvider objectMapperProvider) {
 		getConfig().replaceParameterObjectWithClass(org.springframework.data.domain.Sort.class, org.springdoc.core.converters.models.Sort.class);
-		getConfig().replaceWithClass(org.springframework.data.domain.Sort.class, SortObject.class);
 		return new SortOpenAPIConverter(objectMapperProvider);
 	}
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/properties/SwaggerUiConfigParameters.java
Patch:
@@ -284,7 +284,7 @@ public Map<String, Object> getConfigParameters() {
 		org.springdoc.core.utils.SpringDocPropertiesUtils.put("tagsSorter", tagsSorter, params);
 		org.springdoc.core.utils.SpringDocPropertiesUtils.put(SwaggerUiConfigParameters.LAYOUT_PROPERTY, layout, params);
 		if (supportedSubmitMethods != null)
-			org.springdoc.core.utils.SpringDocPropertiesUtils.put("supportedSubmitMethods", supportedSubmitMethods.toString(), params);
+			org.springdoc.core.utils.SpringDocPropertiesUtils.put("supportedSubmitMethods", supportedSubmitMethods, params);
 		org.springdoc.core.utils.SpringDocPropertiesUtils.put(OAUTH2_REDIRECT_URL_PROPERTY, oauth2RedirectUrl, params);
 		org.springdoc.core.utils.SpringDocPropertiesUtils.put(URL_PROPERTY, url, params);
 		put(URLS_PROPERTY, urls, params);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/utils/SpringDocPropertiesUtils.java
Patch:
@@ -45,9 +45,7 @@ public interface SpringDocPropertiesUtils {
 	 * @param params the params
 	 */
 	static void put(String name, List<String> value, Map<String, Object> params) {
-		if (!CollectionUtils.isEmpty(value)) {
 			params.put(name, value);
-		}
 	}
 
 	/**

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app227/model/Item.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app227.model;
+package test.org.springdoc.api.v30.app227.model;
 
 /**
  * Base item

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/extractor/MethodParameterPojoExtractor.java
Patch:
@@ -52,8 +52,8 @@
 
 import io.swagger.v3.core.util.PrimitiveType;
 import io.swagger.v3.oas.annotations.Parameter;
-import org.springdoc.core.parsers.ReturnTypeParser;
 
+import org.springframework.core.GenericTypeResolver;
 import org.springframework.core.MethodParameter;
 
 import static org.springdoc.core.utils.Constants.DOT;
@@ -158,7 +158,7 @@ private static Stream<MethodParameter> fromGetterOfField(Class<?> paramClass, Fi
 	private static Class<?> extractType(Class<?> paramClass, Field field) {
 		Class<?> type = field.getType();
 		if (field.getGenericType() instanceof TypeVariable<?>) {
-			Type fieldType = ReturnTypeParser.resolveType(field.getGenericType(), paramClass);
+			Type fieldType = GenericTypeResolver.resolveType(field.getGenericType(), paramClass);
 
 			if (fieldType instanceof Class<?>)
 				type = (Class<?>) fieldType;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericParameterService.java
Patch:
@@ -66,7 +66,6 @@
 import org.springdoc.core.extractor.MethodParameterPojoExtractor;
 import org.springdoc.core.models.ParameterInfo;
 import org.springdoc.core.models.RequestBodyInfo;
-import org.springdoc.core.parsers.ReturnTypeParser;
 import org.springdoc.core.providers.JavadocProvider;
 import org.springdoc.core.providers.ObjectMapperProvider;
 import org.springdoc.core.providers.WebConversionServiceProvider;
@@ -77,6 +76,7 @@
 import org.springframework.beans.factory.config.BeanExpressionContext;
 import org.springframework.beans.factory.config.BeanExpressionResolver;
 import org.springframework.beans.factory.config.ConfigurableBeanFactory;
+import org.springframework.core.GenericTypeResolver;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.ResolvableType;
 import org.springframework.core.annotation.AnnotatedElementUtils;
@@ -364,7 +364,7 @@ Schema calculateSchema(Components components, ParameterInfo parameterInfo, Reque
 		MethodParameter methodParameter = parameterInfo.getMethodParameter();
 
 		if (parameterInfo.getParameterModel() == null || parameterInfo.getParameterModel().getSchema() == null) {
-			Type type = ReturnTypeParser.getType(methodParameter);
+			Type type = GenericTypeResolver.resolveType( methodParameter.getGenericParameterType(), methodParameter.getContainingClass());
 			if (type instanceof Class && !((Class<?>) type).isEnum() && optionalWebConversionServiceProvider.isPresent()) {
 				WebConversionServiceProvider webConversionServiceProvider = optionalWebConversionServiceProvider.get();
 				if (!MethodParameterPojoExtractor.isSwaggerPrimitiveType((Class) type) && methodParameter.getParameterType().getAnnotation(io.swagger.v3.oas.annotations.media.Schema.class) == null) {

File: springdoc-openapi-starter-webflux-api/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.jupiter.api.Test;
 import org.springdoc.core.utils.Constants;
 
+import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
 import org.springframework.web.reactive.function.server.HandlerFunction;
@@ -30,6 +31,7 @@
 
 
 @WebFluxTest
+@AutoConfigureWebTestClient(timeout = "3600000")
 public abstract class AbstractSpringDocTest extends AbstractCommonTest {
 
 	public static final HandlerFunction<ServerResponse> HANDLER_FUNCTION = request -> ServerResponse.ok().build();

File: springdoc-openapi-starter-webflux-api/src/test/java/test/org/springdoc/api/app150/SpringDocApp150Test.java
Patch:
@@ -23,10 +23,8 @@
 import test.org.springdoc.api.AbstractSpringDocTest;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.context.annotation.ComponentScan;
 
-@AutoConfigureWebTestClient(timeout = "3600000")
 public class SpringDocApp150Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webflux-api/src/test/java/test/org/springdoc/api/app65/SpringDocApp65Test.java
Patch:
@@ -21,10 +21,8 @@
 import test.org.springdoc.api.AbstractSpringDocTest;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.context.annotation.ComponentScan;
 
-@AutoConfigureWebTestClient(timeout = "3600000")
 public class SpringDocApp65Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication

File: springdoc-openapi-tests/springdoc-openapi-security-tests/src/test/java/test/org/springdoc/api/app9/SpringDocApp9Test.java
Patch:
@@ -30,7 +30,7 @@
 @TestPropertySource(properties = { "springdoc.show-login-endpoint=true", "springdoc.enable-spring-security=false" })
 public class SpringDocApp9Test extends AbstractSpringDocTest {
 
-	@SpringBootApplication(scanBasePackages = { "test.org.springdoc.api.configuration,test.org.springdoc.api.app9" })
+	@SpringBootApplication(scanBasePackages = { "test.org.springdoc.api.configuration","test.org.springdoc.api.app9" })
 	static class SpringDocTestApp {
 		@Bean
 		public OpenAPI customOpenAPI() {

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -113,6 +113,7 @@
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.core.env.Environment;
 import org.springframework.util.AntPathMatcher;
+import org.springframework.util.ClassUtils;
 import org.springframework.util.CollectionUtils;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -306,7 +307,7 @@ public static boolean containsResponseBody(HandlerMethod handlerMethod) {
 	 * @return the boolean
 	 */
 	public static boolean isHiddenRestControllers(Class<?> rawClass) {
-		return HIDDEN_REST_CONTROLLERS.stream().anyMatch(clazz -> clazz.isAssignableFrom(rawClass));
+		return HIDDEN_REST_CONTROLLERS.stream().anyMatch(clazz -> ClassUtils.getUserClass(clazz).isAssignableFrom(rawClass));
 	}
 
 	/**
@@ -938,7 +939,7 @@ protected String decode(String requestURI) {
 	 * @return the boolean
 	 */
 	protected boolean isAdditionalRestController(Class<?> rawClass) {
-		return ADDITIONAL_REST_CONTROLLERS.stream().anyMatch(clazz -> clazz.isAssignableFrom(rawClass));
+		return ADDITIONAL_REST_CONTROLLERS.stream().anyMatch(clazz -> ClassUtils.getUserClass(clazz).isAssignableFrom(rawClass));
 	}
 
 	/**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocJacksonKotlinModuleConfiguration.java
Patch:
@@ -24,7 +24,7 @@
 @ConditionalOnExpression("${springdoc.api-docs.enabled:true} and ${springdoc.enable-kotlin:true}")
 @ConditionalOnWebApplication
 @ConditionalOnBean(SpringDocConfiguration.class)
-class SpringDocJacksonKotlinModuleConfiguration {
+public class SpringDocJacksonKotlinModuleConfiguration {
 
 	/**
 	 * Instantiates a new objectMapperProvider with a kotlin module.

File: springdoc-openapi-starter-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerIndexPageTransformer.java
Patch:
@@ -69,8 +69,7 @@ public SwaggerIndexPageTransformer(SwaggerUiConfigProperties swaggerUiConfig, Sw
 
 	@Override
 	public Mono<Resource> transform(ServerWebExchange serverWebExchange, Resource resource, ResourceTransformerChain resourceTransformerChain) {
-		if (swaggerUiConfigParameters.getConfigUrl() == null)
-			swaggerWelcomeCommon.buildFromCurrentContextPath(serverWebExchange.getRequest());
+		swaggerWelcomeCommon.buildFromCurrentContextPath(serverWebExchange.getRequest());
 
 		final AntPathMatcher antPathMatcher = new AntPathMatcher();
 		try {

File: springdoc-openapi-starter-webmvc-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerIndexPageTransformer.java
Patch:
@@ -69,8 +69,7 @@ public SwaggerIndexPageTransformer(SwaggerUiConfigProperties swaggerUiConfig, Sw
 	@Override
 	public Resource transform(HttpServletRequest request, Resource resource,
 			ResourceTransformerChain transformerChain) throws IOException {
-		if (swaggerUiConfigParameters.getConfigUrl() == null)
-			swaggerWelcomeCommon.buildFromCurrentContextPath(request);
+		swaggerWelcomeCommon.buildFromCurrentContextPath(request);
 
 		final AntPathMatcher antPathMatcher = new AntPathMatcher();
 		boolean isIndexFound = antPathMatcher.match("**/swagger-ui/**/" + SWAGGER_INITIALIZER_JS, resource.getURL().toString());

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocAppRedirectWithPrefixTest.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app1;
 
+import org.apache.commons.lang3.StringUtils;
 import org.junit.jupiter.api.Test;
 import org.springdoc.core.utils.Constants;
 import test.org.springdoc.ui.AbstractSpringDocTest;
@@ -45,7 +46,7 @@ public void shouldRedirectWithPrefix() throws Exception {
 				.andExpect(jsonPath("validatorUrl", equalTo("")))
 				.andExpect(jsonPath("oauth2RedirectUrl", equalTo("http://localhost/documentation/swagger-ui/oauth2-redirect.html")));
 
-		super.checkJS("results/app1-prefix", "/documentation" + Constants.SWAGGER_INITIALIZER_URL);
+		super.checkJS("results/app1-prefix", "/documentation" + Constants.SWAGGER_INITIALIZER_URL, StringUtils.EMPTY);
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericResponseService.java
Patch:
@@ -181,6 +181,7 @@ public static void buildContentFromDoc(Components components, ApiResponses apiRe
 			io.swagger.v3.oas.annotations.responses.ApiResponse apiResponseAnnotations,
 			ApiResponse apiResponse, boolean openapi31) {
 
+		methodAttributes.setUseReturnTypeSchema(apiResponseAnnotations.useReturnTypeSchema());
 		io.swagger.v3.oas.annotations.media.Content[] contentdoc = apiResponseAnnotations.content();
 		Optional<Content> optionalContent = getContent(contentdoc, new String[0],
 				methodAttributes.getMethodProduces(), null, components, methodAttributes.getJsonViewAnnotation(), openapi31);
@@ -620,8 +621,8 @@ else if (CollectionUtils.isEmpty(apiResponse.getContent()))
 					setDescription(httpCode, apiResponse);
 			}
 		}
-		if (apiResponse.getContent() != null
-				&& ((isGeneric || methodAttributes.isMethodOverloaded()) && methodAttributes.isNoApiResponseDoc())) {
+		if (apiResponse.getContent() != null && (methodAttributes.isUseReturnTypeSchema() ||
+			 ((isGeneric || methodAttributes.isMethodOverloaded()) && methodAttributes.isNoApiResponseDoc()))) {
 			// Merge with existing schema
 			Content existingContent = apiResponse.getContent();
 			Type type = ReturnTypeParser.getType(methodParameter);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -693,7 +693,7 @@ protected void calculatePath(RouterOperation routerOperation, Locale locale, Ope
 			if (apiOperation != null)
 				openAPI = operationParser.parse(apiOperation, operation, openAPI, methodAttributes);
 
-			String operationId = operationParser.getOperationId(operation.getOperationId(), openAPI);
+			String operationId = operation.getOperationId();
 			operation.setOperationId(operationId);
 
 			fillParametersList(operation, queryParams, methodAttributes);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/AbstractRequestService.java
Patch:
@@ -278,8 +278,7 @@ public static Collection<Parameter> getHeaders(MethodAttributes methodAttributes
 	public Operation build(HandlerMethod handlerMethod, RequestMethod requestMethod,
 			Operation operation, MethodAttributes methodAttributes, OpenAPI openAPI) {
 		// Documentation
-		String operationId = operationService.getOperationId(handlerMethod.getMethod().getName(),
-				operation.getOperationId(), openAPI);
+		String operationId = operation.getOperationId()!=null ? operation.getOperationId() : handlerMethod.getMethod().getName();
 		operation.setOperationId(operationId);
 		// requests
 		String[] pNames = this.localSpringDocParameterNameDiscoverer.getParameterNames(handlerMethod.getMethod());

File: springdoc-openapi-starter-common/src/test/java/org/springdoc/core/configuration/SpringDocHateoasConfigurationTest.java
Patch:
@@ -32,8 +32,8 @@ void linksSchemaCustomizerShouldBeRegistered() {
                 ))
                 .run(context -> {
                     assertThat(context).getBeanNames(GlobalOpenApiCustomizer.class)
-                        .hasSize(1)
-                        .containsExactly(LINKS_SCHEMA_CUSTOMISER);
+                        .hasSize(2)
+						.contains(LINKS_SCHEMA_CUSTOMISER);
                     assertThat(context.getBean(LINKS_SCHEMA_CUSTOMISER)).isExactlyInstanceOf(OpenApiHateoasLinksCustomizer.class);
                 });
     }

File: springdoc-openapi-starter-webflux-api/src/test/java/test/org/springdoc/api/app65/SpringDocApp65Test.java
Patch:
@@ -21,8 +21,10 @@
 import test.org.springdoc.api.AbstractSpringDocTest;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.context.annotation.ComponentScan;
 
+@AutoConfigureWebTestClient(timeout = "3600000")
 public class SpringDocApp65Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocPageableConfiguration.java
Patch:
@@ -106,7 +106,7 @@ PageOpenAPIConverter pageOpenAPIConverter(Optional<SpringDataWebSettings> settin
 	@Bean
 	@ConditionalOnMissingBean
 	@Lazy(false)
-	DelegatingMethodParameterCustomizer delegatingMethodParameterCustomizer(Optional<SpringDataWebPropertiesProvider> optionalSpringDataWebPropertiesProvider, Optional<RepositoryRestConfigurationProvider> optionalRepositoryRestConfiguration) {
+	DataRestDelegatingMethodParameterCustomizer dataRestDelegatingMethodParameterCustomizer(Optional<SpringDataWebPropertiesProvider> optionalSpringDataWebPropertiesProvider, Optional<RepositoryRestConfigurationProvider> optionalRepositoryRestConfiguration) {
 		return new DataRestDelegatingMethodParameterCustomizer(optionalSpringDataWebPropertiesProvider, optionalRepositoryRestConfiguration);
 	}
 }
\ No newline at end of file

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocSortConfiguration.java
Patch:
@@ -86,7 +86,7 @@ SortOpenAPIConverter sortOpenAPIConverter(ObjectMapperProvider objectMapperProvi
 	@Bean
 	@ConditionalOnMissingBean
 	@Lazy(false)
-	DelegatingMethodParameterCustomizer delegatingMethodParameterCustomizer(Optional<SpringDataWebPropertiesProvider> optionalSpringDataWebPropertiesProvider, Optional<RepositoryRestConfigurationProvider> optionalRepositoryRestConfiguration) {
+	DataRestDelegatingMethodParameterCustomizer dataRestDelegatingMethodParameterCustomizer(Optional<SpringDataWebPropertiesProvider> optionalSpringDataWebPropertiesProvider, Optional<RepositoryRestConfigurationProvider> optionalRepositoryRestConfiguration) {
 		return new DataRestDelegatingMethodParameterCustomizer(optionalSpringDataWebPropertiesProvider, optionalRepositoryRestConfiguration);
 	}
 }
\ No newline at end of file

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/data/DataRestRequestService.java
Patch:
@@ -151,7 +151,7 @@ public void buildParameters(OpenAPI openAPI, HandlerMethod handlerMethod, Reques
 	 */
 	public void buildCommonParameters(OpenAPI openAPI, RequestMethod requestMethod, MethodAttributes methodAttributes, Operation operation, String[] pNames, MethodParameter[] parameters,
 			DataRestRepository dataRestRepository) {
-		parameters = DelegatingMethodParameter.customize(pNames, parameters, parameterBuilder.getDelegatingMethodParameterCustomizer(), requestBuilder.isDefaultFlatParamObject());
+		parameters = DelegatingMethodParameter.customize(pNames, parameters, parameterBuilder.getOptionalDelegatingMethodParameterCustomizers(), requestBuilder.isDefaultFlatParamObject());
 		Class<?> domainType = dataRestRepository.getDomainType();
 		for (MethodParameter methodParameter : parameters) {
 			final String pName = methodParameter.getParameterName();

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/extractor/DelegatingMethodParameter.java
Patch:
@@ -113,12 +113,12 @@ public class DelegatingMethodParameter extends MethodParameter {
 	 *
 	 * @param pNames the p names
 	 * @param parameters the parameters
-	 * @param optionalDelegatingMethodParameterCustomizer the optional delegating method parameter customizer
+	 * @param optionalDelegatingMethodParameterCustomizers the optional list delegating method parameter customizer
 	 * @param defaultFlatParamObject the default flat param object
 	 * @return the method parameter [ ]
 	 */
 	public static MethodParameter[] customize(String[] pNames, MethodParameter[] parameters,
-			Optional<DelegatingMethodParameterCustomizer> optionalDelegatingMethodParameterCustomizer, boolean defaultFlatParamObject) {
+			Optional<List<DelegatingMethodParameterCustomizer>> optionalDelegatingMethodParameterCustomizers, boolean defaultFlatParamObject) {
 		List<MethodParameter> explodedParameters = new ArrayList<>();
 		for (int i = 0; i < parameters.length; ++i) {
 			MethodParameter p = parameters[i];
@@ -130,7 +130,7 @@ public static MethodParameter[] customize(String[] pNames, MethodParameter[] par
 			if (!MethodParameterPojoExtractor.isSimpleType(paramClass)
 				&& (hasFlatAnnotation || (defaultFlatParamObject && !hasNotFlatAnnotation && !AbstractRequestService.isRequestTypeToIgnore(paramClass)))) {
 				MethodParameterPojoExtractor.extractFrom(paramClass).forEach(methodParameter -> {
-					optionalDelegatingMethodParameterCustomizer.ifPresent(customizer -> customizer.customize(p, methodParameter));
+					optionalDelegatingMethodParameterCustomizers.ifPresent(delegatingMethodParameterCustomizers -> delegatingMethodParameterCustomizers.forEach(customizer -> customizer.customize(p, methodParameter)));
 					explodedParameters.add(methodParameter);
 				});
 			}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/AbstractRequestService.java
Patch:
@@ -287,7 +287,7 @@ public Operation build(HandlerMethod handlerMethod, RequestMethod requestMethod,
 		String[] reflectionParametersNames = Arrays.stream(handlerMethod.getMethod().getParameters()).map(java.lang.reflect.Parameter::getName).toArray(String[]::new);
 		if (pNames == null || Arrays.stream(pNames).anyMatch(Objects::isNull))
 			pNames = reflectionParametersNames;
-		parameters = DelegatingMethodParameter.customize(pNames, parameters, parameterBuilder.getDelegatingMethodParameterCustomizer(), this.defaultFlatParamObject);
+		parameters = DelegatingMethodParameter.customize(pNames, parameters, parameterBuilder.getOptionalDelegatingMethodParameterCustomizers(), this.defaultFlatParamObject);
 		RequestBodyInfo requestBodyInfo = new RequestBodyInfo();
 		List<Parameter> operationParameters = (operation.getParameters() != null) ? operation.getParameters() : new ArrayList<>();
 		Map<ParameterId, io.swagger.v3.oas.annotations.Parameter> parametersDocMap = getApiParameters(handlerMethod.getMethod());

File: springdoc-openapi-tests/springdoc-openapi-data-rest-tests/src/test/java/test/org/springdoc/api/app14/SpringDocApp14Test.java
Patch:
@@ -57,7 +57,7 @@ static class SpringDocTestApp {
 		@Bean
 		@ConditionalOnMissingBean
 		@Lazy(false)
-		DelegatingMethodParameterCustomizer delegatingMethodParameterCustomizer(Optional<SpringDataWebPropertiesProvider> optionalSpringDataWebPropertiesProvider, Optional<RepositoryRestConfigurationProvider> optionalRepositoryRestConfiguration) {
+		DataRestDelegatingMethodParameterCustomizer dataRestDelegatingMethodParameterCustomizer(Optional<SpringDataWebPropertiesProvider> optionalSpringDataWebPropertiesProvider, Optional<RepositoryRestConfigurationProvider> optionalRepositoryRestConfiguration) {
 			return new DataRestDelegatingMethodParameterCustomizer(optionalSpringDataWebPropertiesProvider, optionalRepositoryRestConfiguration);
 		}
 	}

File: springdoc-openapi-tests/springdoc-openapi-data-rest-tests/src/test/java/test/org/springdoc/api/app32/SpringDocApp32Test.java
Patch:
@@ -52,7 +52,7 @@ static class SpringDocTestApp {
 		@Bean
 		@ConditionalOnMissingBean
 		@Lazy(false)
-		DelegatingMethodParameterCustomizer delegatingMethodParameterCustomizer(Optional<SpringDataWebPropertiesProvider> optionalSpringDataWebPropertiesProvider, Optional<RepositoryRestConfigurationProvider> optionalRepositoryRestConfiguration) {
+		DataRestDelegatingMethodParameterCustomizer dataRestDelegatingMethodParameterCustomizer(Optional<SpringDataWebPropertiesProvider> optionalSpringDataWebPropertiesProvider, Optional<RepositoryRestConfigurationProvider> optionalRepositoryRestConfiguration) {
 			return new DataRestDelegatingMethodParameterCustomizer(optionalSpringDataWebPropertiesProvider, optionalRepositoryRestConfiguration);
 		}
 	}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericParameterService.java
Patch:
@@ -321,7 +321,9 @@ private void setSchema(io.swagger.v3.oas.annotations.Parameter parameterDoc, Com
 		else {
 			Schema schema = null;
 			try {
-				schema = AnnotationsUtils.getSchema(parameterDoc.schema(), null, false, parameterDoc.schema().implementation(), components, jsonView, propertyResolverUtils.isOpenapi31()).orElse(null);
+				if(StringUtils.isNotEmpty(parameterDoc.schema().type()) || !Void.class.equals(parameterDoc.schema().implementation())){
+					schema = AnnotationsUtils.getSchema(parameterDoc.schema(), null, false, parameterDoc.schema().implementation(), components, jsonView, propertyResolverUtils.isOpenapi31()).orElse(null);
+				}
 				// Cast default value
 				if (schema != null && schema.getDefault() != null) {
 					PrimitiveType primitiveType = PrimitiveType.fromTypeAndFormat(schema.getType(), schema.getFormat());

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/customizers/JavadocPropertyCustomizer.java
Patch:
@@ -24,6 +24,7 @@
 
 package org.springdoc.core.customizers;
 
+import io.swagger.v3.oas.models.Components;
 import java.beans.IntrospectionException;
 import java.beans.Introspector;
 import java.beans.PropertyDescriptor;
@@ -95,7 +96,7 @@ public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterato
 						setJavadocDescription(cls, fields, clsProperties, existingSchema, false);
 					}
 					else if (resolvedSchema != null && resolvedSchema.get$ref() != null && resolvedSchema.get$ref().contains(AnnotationsUtils.COMPONENTS_REF)) {
-						String schemaName = resolvedSchema.get$ref().substring(21);
+						String schemaName = resolvedSchema.get$ref().substring(Components.COMPONENTS_SCHEMAS_REF.length());
 						Schema existingSchema = context.getDefinedModels().get(schemaName);
 						setJavadocDescription(cls, fields, clsProperties, existingSchema, false);
 					}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericParameterService.java
Patch:
@@ -407,7 +407,7 @@ private Schema calculateRequestBodySchema(Components components, ParameterInfo p
 		if (schemaN != null && StringUtils.isEmpty(schemaN.getDescription()) && parameterInfo.getParameterModel() != null) {
 			String description = parameterInfo.getParameterModel().getDescription();
 			if (schemaN.get$ref() != null && schemaN.get$ref().contains(AnnotationsUtils.COMPONENTS_REF)) {
-				String key = schemaN.get$ref().substring(21);
+				String key = schemaN.get$ref().substring(Components.COMPONENTS_SCHEMAS_REF.length());
 				Schema existingSchema = components.getSchemas().get(key);
 				if (!StringUtils.isEmpty(description))
 					existingSchema.setDescription(description);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/customizers/JavadocPropertyCustomizer.java
Patch:
@@ -24,6 +24,7 @@
 
 package org.springdoc.core.customizers;
 
+import io.swagger.v3.oas.models.Components;
 import java.beans.IntrospectionException;
 import java.beans.Introspector;
 import java.beans.PropertyDescriptor;
@@ -95,7 +96,7 @@ public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterato
 						setJavadocDescription(cls, fields, clsProperties, existingSchema, false);
 					}
 					else if (resolvedSchema != null && resolvedSchema.get$ref() != null && resolvedSchema.get$ref().contains(AnnotationsUtils.COMPONENTS_REF)) {
-						String schemaName = resolvedSchema.get$ref().substring(21);
+						String schemaName = resolvedSchema.get$ref().substring(Components.COMPONENTS_SCHEMAS_REF.length());
 						Schema existingSchema = context.getDefinedModels().get(schemaName);
 						setJavadocDescription(cls, fields, clsProperties, existingSchema, false);
 					}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericParameterService.java
Patch:
@@ -407,7 +407,7 @@ private Schema calculateRequestBodySchema(Components components, ParameterInfo p
 		if (schemaN != null && StringUtils.isEmpty(schemaN.getDescription()) && parameterInfo.getParameterModel() != null) {
 			String description = parameterInfo.getParameterModel().getDescription();
 			if (schemaN.get$ref() != null && schemaN.get$ref().contains(AnnotationsUtils.COMPONENTS_REF)) {
-				String key = schemaN.get$ref().substring(21);
+				String key = schemaN.get$ref().substring(Components.COMPONENTS_SCHEMAS_REF.length());
 				Schema existingSchema = components.getSchemas().get(key);
 				if (!StringUtils.isEmpty(description))
 					existingSchema.setDescription(description);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocSecurityConfiguration.java
Patch:
@@ -147,7 +147,7 @@ OpenApiCustomizer springSecurityLoginEndpointCustomizer(ApplicationContext appli
 						operation.requestBody(requestBody);
 						ApiResponses apiResponses = new ApiResponses();
 						apiResponses.addApiResponse(String.valueOf(HttpStatus.OK.value()), new ApiResponse().description(HttpStatus.OK.getReasonPhrase()));
-						apiResponses.addApiResponse(String.valueOf(HttpStatus.FORBIDDEN.value()), new ApiResponse().description(HttpStatus.FORBIDDEN.getReasonPhrase()));
+						apiResponses.addApiResponse(String.valueOf(HttpStatus.UNAUTHORIZED.value()), new ApiResponse().description(HttpStatus.UNAUTHORIZED.getReasonPhrase()));
 						operation.responses(apiResponses);
 						operation.addTagsItem("login-endpoint");
 						PathItem pathItem = new PathItem().post(operation);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocSecurityConfiguration.java
Patch:
@@ -147,7 +147,7 @@ OpenApiCustomizer springSecurityLoginEndpointCustomizer(ApplicationContext appli
 						operation.requestBody(requestBody);
 						ApiResponses apiResponses = new ApiResponses();
 						apiResponses.addApiResponse(String.valueOf(HttpStatus.OK.value()), new ApiResponse().description(HttpStatus.OK.getReasonPhrase()));
-						apiResponses.addApiResponse(String.valueOf(HttpStatus.FORBIDDEN.value()), new ApiResponse().description(HttpStatus.FORBIDDEN.getReasonPhrase()));
+						apiResponses.addApiResponse(String.valueOf(HttpStatus.UNAUTHORIZED.value()), new ApiResponse().description(HttpStatus.UNAUTHORIZED.getReasonPhrase()));
 						operation.responses(apiResponses);
 						operation.addTagsItem("login-endpoint");
 						PathItem pathItem = new PathItem().post(operation);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/customizers/JavadocPropertyCustomizer.java
Patch:
@@ -24,6 +24,7 @@
 
 package org.springdoc.core.customizers;
 
+import io.swagger.v3.oas.models.Components;
 import java.beans.IntrospectionException;
 import java.beans.Introspector;
 import java.beans.PropertyDescriptor;
@@ -95,7 +96,7 @@ public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterato
 						setJavadocDescription(cls, fields, clsProperties, existingSchema, false);
 					}
 					else if (resolvedSchema != null && resolvedSchema.get$ref() != null && resolvedSchema.get$ref().contains(AnnotationsUtils.COMPONENTS_REF)) {
-						String schemaName = resolvedSchema.get$ref().substring(21);
+						String schemaName = resolvedSchema.get$ref().substring(Components.COMPONENTS_SCHEMAS_REF.length());
 						Schema existingSchema = context.getDefinedModels().get(schemaName);
 						setJavadocDescription(cls, fields, clsProperties, existingSchema, false);
 					}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericParameterService.java
Patch:
@@ -407,7 +407,7 @@ private Schema calculateRequestBodySchema(Components components, ParameterInfo p
 		if (schemaN != null && StringUtils.isEmpty(schemaN.getDescription()) && parameterInfo.getParameterModel() != null) {
 			String description = parameterInfo.getParameterModel().getDescription();
 			if (schemaN.get$ref() != null && schemaN.get$ref().contains(AnnotationsUtils.COMPONENTS_REF)) {
-				String key = schemaN.get$ref().substring(21);
+				String key = schemaN.get$ref().substring(Components.COMPONENTS_SCHEMAS_REF.length());
 				Schema existingSchema = components.getSchemas().get(key);
 				if (!StringUtils.isEmpty(description))
 					existingSchema.setDescription(description);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocSecurityConfiguration.java
Patch:
@@ -147,7 +147,7 @@ OpenApiCustomizer springSecurityLoginEndpointCustomiser(ApplicationContext appli
 						operation.requestBody(requestBody);
 						ApiResponses apiResponses = new ApiResponses();
 						apiResponses.addApiResponse(String.valueOf(HttpStatus.OK.value()), new ApiResponse().description(HttpStatus.OK.getReasonPhrase()));
-						apiResponses.addApiResponse(String.valueOf(HttpStatus.UNAUTHORIZED.value()), new ApiResponse().description(HttpStatus.FORBIDDEN.getReasonPhrase()));
+						apiResponses.addApiResponse(String.valueOf(HttpStatus.UNAUTHORIZED.value()), new ApiResponse().description(HttpStatus.UNAUTHORIZED.getReasonPhrase()));
 						operation.responses(apiResponses);
 						operation.addTagsItem("login-endpoint");
 						PathItem pathItem = new PathItem().post(operation);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocSecurityConfiguration.java
Patch:
@@ -147,7 +147,7 @@ OpenApiCustomizer springSecurityLoginEndpointCustomiser(ApplicationContext appli
 						operation.requestBody(requestBody);
 						ApiResponses apiResponses = new ApiResponses();
 						apiResponses.addApiResponse(String.valueOf(HttpStatus.OK.value()), new ApiResponse().description(HttpStatus.OK.getReasonPhrase()));
-						apiResponses.addApiResponse(String.valueOf(HttpStatus.FORBIDDEN.value()), new ApiResponse().description(HttpStatus.FORBIDDEN.getReasonPhrase()));
+						apiResponses.addApiResponse(String.valueOf(HttpStatus.UNAUTHORIZED.value()), new ApiResponse().description(HttpStatus.FORBIDDEN.getReasonPhrase()));
 						operation.responses(apiResponses);
 						operation.addTagsItem("login-endpoint");
 						PathItem pathItem = new PathItem().post(operation);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocSecurityConfiguration.java
Patch:
@@ -110,7 +110,7 @@ class SpringSecurityLoginEndpointConfiguration {
 		@Bean
 		@ConditionalOnProperty(SPRINGDOC_SHOW_LOGIN_ENDPOINT)
 		@Lazy(false)
-		OpenApiCustomizer springSecurityLoginEndpointCustomiser(ApplicationContext applicationContext) {
+		OpenApiCustomizer springSecurityLoginEndpointCustomizer(ApplicationContext applicationContext) {
 			FilterChainProxy filterChainProxy = applicationContext.getBean(AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME, FilterChainProxy.class);
 			return openAPI -> {
 				for (SecurityFilterChain filterChain : filterChainProxy.getFilterChains()) {
@@ -203,6 +203,6 @@ class SpringDocSecurityOAuth2ClientConfiguration {
 			getConfig()
 					.addAnnotationsToIgnore(RegisteredOAuth2AuthorizedClient.class);
 		}
-		
+
 	}
 }
\ No newline at end of file

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/converters/PolymorphicModelConverter.java
Patch:
@@ -122,7 +122,7 @@ private List<Schema> findComposedSchemas(String ref, Collection<Schema> schemas)
 				.filter(s -> s.getAllOf() != null)
 				.filter(s -> s.getAllOf().stream().anyMatch(s2 -> ref.equals(s2.get$ref())))
 				.map(s -> new Schema().$ref(AnnotationsUtils.COMPONENTS_REF + s.getName()))
-				.collect(Collectors.toList());
+				.toList();
 
 		List<Schema> resultSchemas = new ArrayList<>(composedSchemas);
 

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app185/Pet.java
Patch:
@@ -26,12 +26,14 @@
 
 import com.fasterxml.jackson.annotation.JsonSubTypes;
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import io.swagger.v3.oas.annotations.media.Schema;
 
 @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
 @JsonSubTypes({
 		@JsonSubTypes.Type(Dog.class),
 		@JsonSubTypes.Type(Cat.class)
 })
+@Schema(description = "This is a Pet")
 public class Pet {
 
 	public final String name;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/data/DataRestRequestService.java
Patch:
@@ -175,7 +175,7 @@ else if (methodParameter.getParameterAnnotation(BackendId.class) != null) {
 					parameterInfo.setParameterModel(parameter);
 				}
 				if (!ArrayUtils.isEmpty(methodParameter.getParameterAnnotations()))
-					parameter = requestBuilder.buildParams(parameterInfo, openAPI.getComponents(), requestMethod, null,
+					parameter = requestBuilder.buildParams(parameterInfo, openAPI.getComponents(), requestMethod, methodAttributes,
 							openAPI.getOpenapi());
 				addParameters(openAPI, requestMethod, methodAttributes, operation, methodParameter, parameterInfo, parameter);
 			}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/extractor/MethodParameterPojoExtractor.java
Patch:
@@ -88,6 +88,7 @@ public class MethodParameterPojoExtractor {
 		SIMPLE_TYPES.add(Iterable.class);
 		SIMPLE_TYPES.add(Duration.class);
 		SIMPLE_TYPES.add(LocalTime.class);
+		SIMPLE_TYPES.add(Class.class);
 
 		SIMPLE_TYPE_PREDICATES.add(Class::isPrimitive);
 		SIMPLE_TYPE_PREDICATES.add(Class::isEnum);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/properties/SwaggerUiConfigParameters.java
Patch:
@@ -304,9 +304,9 @@ public Map<String, Object> getConfigParameters() {
 	private void put(String urls, Set<SwaggerUrl> swaggerUrls, Map<String, Object> params) {
 		Comparator<SwaggerUrl> swaggerUrlComparator;
 		if (groupsOrder.isAscending())
-			swaggerUrlComparator = Comparator.comparing(SwaggerUrl::getName);
+			swaggerUrlComparator = Comparator.comparing(SwaggerUrl::getDisplayName);
 		else
-			swaggerUrlComparator = (h1, h2) -> h2.getName().compareTo(h1.getName());
+			swaggerUrlComparator = (h1, h2) -> h2.getDisplayName().compareTo(h1.getDisplayName());
 
 		swaggerUrls = swaggerUrls.stream().sorted(swaggerUrlComparator).filter(elt -> StringUtils.isNotEmpty(elt.getUrl())).collect(Collectors.toCollection(LinkedHashSet::new));
 		if (!CollectionUtils.isEmpty(swaggerUrls)) {

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app4/SpringDocTestApp.java
Patch:
@@ -47,7 +47,7 @@ public GroupedOpenApi groupOpenApi() {
 		String[] paths = { "/pet/**" };
 		return GroupedOpenApi.builder()
 				.group("pets")
-				.displayName("The pets")
+				.displayName("zpets")
 				.pathsToMatch(paths)
 				.build();
 	}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericResponseService.java
Patch:
@@ -66,6 +66,7 @@
 import org.springdoc.core.parsers.ReturnTypeParser;
 import org.springdoc.core.properties.SpringDocConfigProperties;
 import org.springdoc.core.providers.JavadocProvider;
+import org.springdoc.core.providers.ObjectMapperProvider;
 import org.springdoc.core.utils.PropertyResolverUtils;
 import org.springdoc.core.utils.SpringDocAnnotationsUtils;
 
@@ -736,7 +737,7 @@ private Map<String, ApiResponse> getGenericMapResponse(HandlerMethod handlerMeth
 
 			LinkedHashMap<String, ApiResponse> genericApiResponsesClone;
 			try {
-				ObjectMapper objectMapper = new ObjectMapper();
+				ObjectMapper objectMapper = ObjectMapperProvider.createJson(springDocConfigProperties);
 				genericApiResponsesClone = objectMapper.readValue(objectMapper.writeValueAsString(genericApiResponseMap), ApiResponses.class);
 				return genericApiResponsesClone;
 			}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericResponseService.java
Patch:
@@ -66,6 +66,7 @@
 import org.springdoc.core.parsers.ReturnTypeParser;
 import org.springdoc.core.properties.SpringDocConfigProperties;
 import org.springdoc.core.providers.JavadocProvider;
+import org.springdoc.core.providers.ObjectMapperProvider;
 import org.springdoc.core.utils.PropertyResolverUtils;
 import org.springdoc.core.utils.SpringDocAnnotationsUtils;
 
@@ -736,7 +737,7 @@ private Map<String, ApiResponse> getGenericMapResponse(HandlerMethod handlerMeth
 
 			LinkedHashMap<String, ApiResponse> genericApiResponsesClone;
 			try {
-				ObjectMapper objectMapper = new ObjectMapper();
+				ObjectMapper objectMapper = ObjectMapperProvider.createJson(springDocConfigProperties);
 				genericApiResponsesClone = objectMapper.readValue(objectMapper.writeValueAsString(genericApiResponseMap), ApiResponses.class);
 				return genericApiResponsesClone;
 			}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/utils/PropertyResolverUtils.java
Patch:
@@ -143,7 +143,7 @@ private int resolveMinIndent(String[] lines) {
 	private int countLeadingSpaces(String line) {
         int count = 0;
         for (char ch : line.toCharArray()) {
-            if (ch != ' ') break;
+            if (ch != ' ' && ch != '\t') break;
             count++;
         }
         return count;
@@ -222,4 +222,4 @@ public Map<String, Object> resolveExtensions(Locale locale, Map<String, Object>
 		else
 			return extensions;
 	}
-}
\ No newline at end of file
+}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericResponseService.java
Patch:
@@ -66,6 +66,7 @@
 import org.springdoc.core.parsers.ReturnTypeParser;
 import org.springdoc.core.properties.SpringDocConfigProperties;
 import org.springdoc.core.providers.JavadocProvider;
+import org.springdoc.core.providers.ObjectMapperProvider;
 import org.springdoc.core.utils.PropertyResolverUtils;
 import org.springdoc.core.utils.SpringDocAnnotationsUtils;
 
@@ -736,7 +737,7 @@ private Map<String, ApiResponse> getGenericMapResponse(HandlerMethod handlerMeth
 
 			LinkedHashMap<String, ApiResponse> genericApiResponsesClone;
 			try {
-				ObjectMapper objectMapper = new ObjectMapper();
+				ObjectMapper objectMapper = ObjectMapperProvider.createJson(springDocConfigProperties);
 				genericApiResponsesClone = objectMapper.readValue(objectMapper.writeValueAsString(genericApiResponseMap), ApiResponses.class);
 				return genericApiResponsesClone;
 			}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocSpecPropertiesConfiguration.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.List;
 import java.util.Set;
 
+import org.springdoc.core.conditions.SpecPropertiesCondition;
 import org.springdoc.core.customizers.SpecPropertiesCustomizer;
 import org.springdoc.core.models.GroupedOpenApi;
 import org.springdoc.core.properties.SpringDocConfigProperties;
@@ -36,6 +37,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
 
@@ -48,6 +50,7 @@
 @Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnBean(SpringDocConfiguration.class)
+@Conditional(SpecPropertiesCondition.class)
 public class SpringDocSpecPropertiesConfiguration {
 
     /**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -562,7 +562,7 @@ protected void calculatePath(List<RouterOperation> routerOperationList, Locale l
 					if (StringUtils.isNotBlank(routerOperation.getBeanMethod())) {
 						try {
 							if (ArrayUtils.isEmpty(routerOperation.getParameterTypes())) {
-								Method[] declaredMethods = AopUtils.getTargetClass(handlerBean).getDeclaredMethods();
+								Method[] declaredMethods = org.springframework.util.ReflectionUtils.getAllDeclaredMethods(AopUtils.getTargetClass(handlerBean));
 								Optional<Method> methodOptional = Arrays.stream(declaredMethods)
 										.filter(method -> routerOperation.getBeanMethod().equals(method.getName()) && method.getParameters().length == 0)
 										.findAny();

File: springdoc-openapi-tests/springdoc-openapi-actuator-webflux-tests/src/test/java/test/org/springdoc/api/app186/SpringDocApp186Test.java
Patch:
@@ -26,6 +26,7 @@
 
 
 import org.junit.jupiter.api.Test;
+import org.springdoc.core.customizers.ActuatorOpenApiCustomizer;
 import org.springdoc.core.customizers.OpenApiCustomizer;
 import org.springdoc.core.customizers.OperationCustomizer;
 import org.springdoc.core.models.GroupedOpenApi;
@@ -83,7 +84,7 @@ public void testGroupActuatorAsProperties() throws Exception {
 	static class SpringDocTestApp {
 
 		@Bean
-		public GroupedOpenApi asCodeCheckBackwardsCompatibility(OpenApiCustomizer actuatorOpenApiCustomiser,
+		public GroupedOpenApi asCodeCheckBackwardsCompatibility(ActuatorOpenApiCustomizer actuatorOpenApiCustomiser,
 				OperationCustomizer actuatorCustomizer, WebEndpointProperties endpointProperties) {
 			return GroupedOpenApi.builder()
 					.group("group-actuator-as-code-check-backwards-compatibility")

File: springdoc-openapi-tests/springdoc-openapi-actuator-webmvc-tests/src/test/java/test/org/springdoc/api/app186/SpringDocApp186Test.java
Patch:
@@ -25,7 +25,7 @@
 package test.org.springdoc.api.app186;
 
 import org.junit.jupiter.api.Test;
-import org.springdoc.core.customizers.OpenApiCustomizer;
+import org.springdoc.core.customizers.ActuatorOpenApiCustomizer;
 import org.springdoc.core.customizers.OperationCustomizer;
 import org.springdoc.core.models.GroupedOpenApi;
 import org.springdoc.core.utils.Constants;
@@ -87,7 +87,7 @@ public void testGroupActuatorAsProperties() throws Exception {
 	static class SpringDocTestApp {
 
 		@Bean
-		public GroupedOpenApi asCodeCheckBackwardsCompatibility(OpenApiCustomizer actuatorOpenApiCustomiser,
+		public GroupedOpenApi asCodeCheckBackwardsCompatibility(ActuatorOpenApiCustomizer actuatorOpenApiCustomiser,
 				OperationCustomizer actuatorCustomizer, WebEndpointProperties endpointProperties) {
 			return GroupedOpenApi.builder()
 					.group("group-actuator-as-code-check-backwards-compatibility")

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/providers/SpringRepositoryRestResourceProvider.java
Patch:
@@ -352,7 +352,7 @@ private void findSearchResourceMappings(OpenAPI openAPI, List<RouterOperation> r
 			if (handlerMapping instanceof RepositoryRestHandlerMapping repositoryRestHandlerMapping) {
 				Map<RequestMappingInfo, HandlerMethod> handlerMethodMap = repositoryRestHandlerMapping.getHandlerMethods();
 				Map<RequestMappingInfo, HandlerMethod> handlerMethodMapFiltered = handlerMethodMap.entrySet().stream()
-						.filter(requestMappingInfoHandlerMethodEntry -> REPOSITORY_SERACH_CONTROLLER.equals(requestMappingInfoHandlerMethodEntry
+						.filter(requestMappingInfoHandlerMethodEntry -> REPOSITORY_SEARCH_CONTROLLER.equals(requestMappingInfoHandlerMethodEntry
 								.getValue().getBeanType().getName()))
 						.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (a1, a2) -> a1));
 				ResourceMetadata metadata = associations.getMetadataFor(dataRestRepository.getDomainType());

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/providers/SpringRepositoryRestResourceProvider.java
Patch:
@@ -92,7 +92,7 @@ public class SpringRepositoryRestResourceProvider implements RepositoryRestResou
 	/**
 	 * The constant REPOSITORY_SEARCH_CONTROLLER.
 	 */
-	private static final String REPOSITORY_SERACH_CONTROLLER = SPRING_DATA_REST_PACKAGE + ".webmvc.RepositorySearchController";
+	private static final String REPOSITORY_SEARCH_CONTROLLER = SPRING_DATA_REST_PACKAGE + ".webmvc.RepositorySearchController";
 
 	/**
 	 * The constant REPOSITORY_PROPERTY_CONTROLLER.

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/providers/SpringRepositoryRestResourceProvider.java
Patch:
@@ -92,7 +92,7 @@ public class SpringRepositoryRestResourceProvider implements RepositoryRestResou
 	/**
 	 * The constant REPOSITORY_SEARCH_CONTROLLER.
 	 */
-	private static final String REPOSITORY_SERACH_CONTROLLER = SPRING_DATA_REST_PACKAGE + ".webmvc.RepositorySearchController";
+	private static final String REPOSITORY_SEARCH_CONTROLLER = SPRING_DATA_REST_PACKAGE + ".webmvc.RepositorySearchController";
 
 	/**
 	 * The constant REPOSITORY_PROPERTY_CONTROLLER.

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocJacksonKotlinModuleConfiguration.java
Patch:
@@ -34,7 +34,7 @@ class SpringDocJacksonKotlinModuleConfiguration {
 
 	@Bean
 	@Primary
-	ObjectMapperProvider objectMapperProvider(SpringDocConfigProperties springDocConfigProperties) {
+	ObjectMapperProvider springdocKotlinObjectMapperProvider(SpringDocConfigProperties springDocConfigProperties) {
 		ObjectMapperProvider mapperProvider =  new ObjectMapperProvider(springDocConfigProperties);
 		mapperProvider.jsonMapper().registerModule(new KotlinModule.Builder().build());
 		return mapperProvider;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericResponseService.java
Patch:
@@ -772,7 +772,7 @@ private boolean isValidHttpCode(String httpCode, MethodParameter methodParameter
 					if (isHttpCodePresent(httpCode, responseSet))
 						result = true;
 				}
-				else if (httpCode.equals(evaluateResponseStatus(method, method.getClass(), false)))
+				if (httpCode.equals(evaluateResponseStatus(method, method.getClass(), false)))
 					result = true;
 			}
 		}

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app110/PersonController.java
Patch:
@@ -34,6 +34,7 @@
 import jakarta.validation.constraints.Size;
 
 import org.springframework.validation.annotation.Validated;
+import org.springframework.web.HttpMediaTypeNotSupportedException;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
@@ -46,7 +47,7 @@ public class PersonController {
 	private final Random ran = new Random();
 
 	@RequestMapping(path = "/person", method = RequestMethod.POST)
-	public Person person(@Valid @RequestBody Person person) {
+	public Person person(@Valid @RequestBody Person person) throws HttpMediaTypeNotSupportedException {
 
 		int nxt = ran.nextInt(10);
 		if (nxt >= 5) {
@@ -58,7 +59,7 @@ public Person person(@Valid @RequestBody Person person) {
 	@RequestMapping(path = "/personByLastName", method = RequestMethod.GET)
 	public List<Person> findByLastName(@RequestParam(name = "lastName", required = true) @NotNull
 	@NotBlank
-	@Size(max = 10) String lastName) {
+	@Size(max = 10) String lastName) throws HttpMediaTypeNotSupportedException {
 		List<Person> hardCoded = new ArrayList<>();
 		Person person = new Person();
 		person.setAge(20);

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app112/sample/PersonController2.java
Patch:
@@ -35,6 +35,7 @@
 import test.org.springdoc.api.v30.app112.Person;
 
 import org.springframework.validation.annotation.Validated;
+import org.springframework.web.HttpMediaTypeNotSupportedException;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
@@ -47,7 +48,7 @@ public class PersonController2 {
 	private final Random ran = new Random();
 
 	@RequestMapping(path = "/person2", method = RequestMethod.POST)
-	public Person person(@Valid @RequestBody Person person) {
+	public Person person(@Valid @RequestBody Person person) throws HttpMediaTypeNotSupportedException {
 
 		int nxt = ran.nextInt(10);
 		if (nxt >= 5) {
@@ -59,7 +60,7 @@ public Person person(@Valid @RequestBody Person person) {
 	@RequestMapping(path = "/personByLastName2", method = RequestMethod.GET)
 	public List<Person> findByLastName(@RequestParam(name = "lastName", required = true) @NotNull
 	@NotBlank
-	@Size(max = 10) String lastName) {
+	@Size(max = 10) String lastName) throws HttpMediaTypeNotSupportedException {
 		List<Person> hardCoded = new ArrayList<>();
 		Person person = new Person();
 		person.setAge(20);

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app197/Example2Controller.java
Patch:
@@ -1,6 +1,7 @@
 package test.org.springdoc.api.v30.app197;
 
 import org.springframework.http.HttpStatus;
+import org.springframework.web.HttpRequestMethodNotSupportedException;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -11,7 +12,7 @@
 @RequestMapping("/example2")
 public class Example2Controller {
 	@GetMapping("/")
-	public void index() {
+	public void index() throws HttpRequestMethodNotSupportedException {
 		throw new IllegalArgumentException();
 	}
 

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app197/ExampleController.java
Patch:
@@ -1,6 +1,7 @@
 package test.org.springdoc.api.v30.app197;
 
 import org.springframework.http.HttpStatus;
+import org.springframework.web.HttpRequestMethodNotSupportedException;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -11,7 +12,7 @@
 @RequestMapping("/example")
 public class ExampleController {
 	@GetMapping("/")
-	public void index() {
+	public void index() throws HttpRequestMethodNotSupportedException {
 		throw new IllegalArgumentException();
 	}
 

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app199/HelloController.java
Patch:
@@ -30,6 +30,7 @@
 import io.swagger.v3.oas.models.Operation;
 import io.swagger.v3.oas.models.examples.Example;
 import org.springdoc.core.customizers.OperationCustomizer;
+import test.org.springdoc.api.v30.app199.CustomExceptionHandler.MyInternalException;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
@@ -50,13 +51,13 @@ public class HelloController {
 		value = "/first",
 		produces = APPLICATION_JSON_VALUE
 	)
-	public void first() {}
+	public void first() throws MyInternalException {}
 
 	@GetMapping(
 		value = "/second",
 		produces = APPLICATION_JSON_VALUE
 	)
-	public void second() {}
+	public void second() throws MyInternalException {}
 
 	@Bean
 	public OperationCustomizer operationCustomizer()

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app202/Example2Controller.java
Patch:
@@ -1,6 +1,7 @@
 package test.org.springdoc.api.v30.app202;
 
 import org.springframework.http.HttpStatus;
+import org.springframework.web.HttpRequestMethodNotSupportedException;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -11,7 +12,7 @@
 @RequestMapping("/example2")
 public class Example2Controller {
 	@GetMapping("/")
-	public void index() {
+	public void index() throws HttpRequestMethodNotSupportedException {
 		throw new IllegalArgumentException();
 	}
 

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app202/ExampleController.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.springframework.http.HttpStatus;
 import org.springframework.validation.annotation.Validated;
+import org.springframework.web.HttpRequestMethodNotSupportedException;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -13,7 +14,7 @@
 @Validated
 public class ExampleController {
 	@GetMapping("/")
-	public void index() {
+	public void index() throws HttpRequestMethodNotSupportedException {
 		throw new IllegalArgumentException();
 	}
 

File: springdoc-openapi-tests/springdoc-openapi-javadoc-tests/src/test/java/test/org/springdoc/api/app110/PersonController.java
Patch:
@@ -10,6 +10,7 @@
 import jakarta.validation.constraints.Size;
 
 import org.springframework.validation.annotation.Validated;
+import org.springframework.web.HttpMediaTypeNotSupportedException;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
@@ -34,7 +35,7 @@ public class PersonController {
 	 * @return the person
 	 */
 	@RequestMapping(path = "/person", method = RequestMethod.POST)
-	public Person person(@Valid @RequestBody Person person) {
+	public Person person(@Valid @RequestBody Person person) throws HttpMediaTypeNotSupportedException {
 
 		int nxt = ran.nextInt(10);
 		if (nxt >= 5) {
@@ -52,7 +53,7 @@ public Person person(@Valid @RequestBody Person person) {
 	@RequestMapping(path = "/personByLastName", method = RequestMethod.GET)
 	public List<Person> findByLastName(@RequestParam(name = "lastName", required = true) @NotNull
 	@NotBlank
-	@Size(max = 10) String lastName) {
+	@Size(max = 10) String lastName) throws HttpMediaTypeNotSupportedException {
 		List<Person> hardCoded = new ArrayList<>();
 		Person person = new Person();
 		person.setAge(20);

File: springdoc-openapi-tests/springdoc-openapi-javadoc-tests/src/test/java/test/org/springdoc/api/app112/sample/PersonController2.java
Patch:
@@ -11,6 +11,7 @@
 import test.org.springdoc.api.app112.Person;
 
 import org.springframework.validation.annotation.Validated;
+import org.springframework.web.HttpMediaTypeNotSupportedException;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
@@ -35,7 +36,7 @@ public class PersonController2 {
 	 * @return the person
 	 */
 	@RequestMapping(path = "/person2", method = RequestMethod.POST)
-	public Person person(@Valid @RequestBody Person person) {
+	public Person person(@Valid @RequestBody Person person) throws HttpMediaTypeNotSupportedException {
 
 		int nxt = ran.nextInt(10);
 		if (nxt >= 5) {
@@ -53,7 +54,7 @@ public Person person(@Valid @RequestBody Person person) {
 	@RequestMapping(path = "/personByLastName2", method = RequestMethod.GET)
 	public List<Person> findByLastName(@RequestParam(name = "lastName", required = true) @NotNull
 	@NotBlank
-	@Size(max = 10) String lastName) {
+	@Size(max = 10) String lastName) throws HttpMediaTypeNotSupportedException {
 		List<Person> hardCoded = new ArrayList<>();
 		Person person = new Person();
 		person.setAge(20);

File: springdoc-openapi-starter-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeActuator.java
Patch:
@@ -128,8 +128,8 @@ protected void calculateUiRootPath(StringBuilder... sbUrls) {
 	@Override
 	protected void calculateOauth2RedirectUrl(UriComponentsBuilder uriComponentsBuilder) {
 		if (StringUtils.isBlank(swaggerUiConfig.getOauth2RedirectUrl()) || !swaggerUiConfigParameters.isValidUrl(swaggerUiConfig.getOauth2RedirectUrl())) {
-			this.oauthPrefix = uriComponentsBuilder.path(managementServerProperties.getBasePath() + swaggerUiConfigParameters.getUiRootPath()).path(webJarsPrefixUrl);
-			swaggerUiConfigParameters.setOauth2RedirectUrl(this.oauthPrefix.path(getOauth2RedirectUrl()).build().toString());
+			UriComponentsBuilder oauthPrefix = uriComponentsBuilder.path(managementServerProperties.getBasePath() + swaggerUiConfigParameters.getUiRootPath()).path(webJarsPrefixUrl);
+			swaggerUiConfigParameters.setOauth2RedirectUrl(oauthPrefix.path(getOauth2RedirectUrl()).build().toString());
 		}
 	}
 

File: springdoc-openapi-starter-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeWebFlux.java
Patch:
@@ -108,8 +108,8 @@ protected void calculateUiRootPath(StringBuilder... sbUrls) {
 	@Override
 	protected void calculateOauth2RedirectUrl(UriComponentsBuilder uriComponentsBuilder) {
 		if (StringUtils.isBlank(swaggerUiConfig.getOauth2RedirectUrl()) || !swaggerUiConfigParameters.isValidUrl(swaggerUiConfig.getOauth2RedirectUrl())) {
-			this.oauthPrefix = uriComponentsBuilder.path(contextPath).path(swaggerUiConfigParameters.getUiRootPath()).path(webJarsPrefixUrl);
-			swaggerUiConfigParameters.setOauth2RedirectUrl(this.oauthPrefix.path(getOauth2RedirectUrl()).build().toString());
+			UriComponentsBuilder oauthPrefix = uriComponentsBuilder.path(contextPath).path(swaggerUiConfigParameters.getUiRootPath()).path(webJarsPrefixUrl);
+			swaggerUiConfigParameters.setOauth2RedirectUrl(oauthPrefix.path(getOauth2RedirectUrl()).build().toString());
 		}
 	}
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/utils/SpringDocDataRestUtils.java
Patch:
@@ -281,7 +281,7 @@ else if (EMBEDDED.equals(propId)) {
 	 */
 	private void updateResponseSchemaEmbedded(Components components, EntityInfo entityInfo, Entry<String, Schema> entry, boolean openapi31) {
 		String entityClassName = linkRelationProvider.getCollectionResourceRelFor(entityInfo.getDomainType()).value();
-		ArraySchema arraySchema = (ArraySchema) ((ObjectSchema) entry.getValue()).getProperties().get(entityClassName);
+		ArraySchema arraySchema = (ArraySchema) entry.getValue().getProperties().get(entityClassName);
 		if (arraySchema != null) {
 			Schema itemsSchema = arraySchema.getItems();
 			Set<String> entitiesNames = entityInoMap.keySet();

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/fn/RouterFunctionData.java
Patch:
@@ -285,6 +285,7 @@ private RequestMethod getRequestMethod(HttpMethod httpMethod) {
 			case "PATCH" -> requestMethod = RequestMethod.PATCH;
 			case "HEAD" -> requestMethod = RequestMethod.HEAD;
 			case "OPTIONS" -> requestMethod = RequestMethod.OPTIONS;
+			case "TRACE" -> requestMethod = RequestMethod.TRACE;
 			default ->
 					throw new IllegalStateException("Unexpected value: " + httpMethod.name());
 		}

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/api/OpenApiActuatorResource.java
Patch:
@@ -40,6 +40,7 @@
 
 import org.springframework.beans.factory.ObjectFactory;
 import org.springframework.boot.actuate.endpoint.web.annotation.RestControllerEndpoint;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.http.MediaType;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -48,6 +49,7 @@
 import static org.springdoc.core.utils.Constants.APPLICATION_OPENAPI_YAML;
 import static org.springdoc.core.utils.Constants.DEFAULT_API_DOCS_ACTUATOR_URL;
 import static org.springdoc.core.utils.Constants.DEFAULT_YAML_API_DOCS_ACTUATOR_PATH;
+import static org.springdoc.core.utils.Constants.SPRINGDOC_ENABLE_DEFAULT_API_DOCS;
 import static org.springdoc.core.utils.Constants.YAML;
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 
@@ -56,6 +58,7 @@
  * @author bnasslashen
  */
 @RestControllerEndpoint(id = DEFAULT_API_DOCS_ACTUATOR_URL)
+@ConditionalOnProperty(name = SPRINGDOC_ENABLE_DEFAULT_API_DOCS, havingValue = "true", matchIfMissing = true)
 public class OpenApiActuatorResource extends OpenApiResource {
 
 	/**

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/api/OpenApiWebfluxResource.java
Patch:
@@ -43,6 +43,7 @@
 import org.springframework.beans.factory.ObjectFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.http.MediaType;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -51,13 +52,15 @@
 import static org.springdoc.core.utils.Constants.API_DOCS_URL;
 import static org.springdoc.core.utils.Constants.APPLICATION_OPENAPI_YAML;
 import static org.springdoc.core.utils.Constants.DEFAULT_API_DOCS_URL_YAML;
+import static org.springdoc.core.utils.Constants.SPRINGDOC_ENABLE_DEFAULT_API_DOCS;
 
 /**
  * The type Open api resource.
  *
  * @author bnasslahsen
  */
 @RestController
+@ConditionalOnProperty(name = SPRINGDOC_ENABLE_DEFAULT_API_DOCS, havingValue = "true", matchIfMissing = true)
 public class OpenApiWebfluxResource extends OpenApiResource {
 
 

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/core/configuration/SpringDocWebFluxConfiguration.java
Patch:
@@ -96,7 +96,7 @@ public class SpringDocWebFluxConfiguration {
 	 */
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnProperty(name = SPRINGDOC_USE_MANAGEMENT_PORT, havingValue = "false", matchIfMissing = true)
+	@ConditionalOnExpression("(${springdoc.use-management-port:false} == false ) and ${springdoc.enable-default-api-docs:true}")
 	@Lazy(false)
 	OpenApiWebfluxResource openApiResource(ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory, AbstractRequestService requestBuilder,
 			GenericResponseService responseBuilder, OperationService operationParser,
@@ -205,7 +205,7 @@ ActuatorProvider actuatorProvider(ServerProperties serverProperties,
 		 */
 		@Bean
 		@ConditionalOnMissingBean(MultipleOpenApiSupportConfiguration.class)
-		@ConditionalOnProperty(SPRINGDOC_USE_MANAGEMENT_PORT)
+		@ConditionalOnExpression("${springdoc.use-management-port:false} and ${springdoc.enable-default-api-docs:true}")
 		@ConditionalOnManagementPort(ManagementPortType.DIFFERENT)
 		@Lazy(false)
 		OpenApiActuatorResource actuatorOpenApiResource(ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory, AbstractRequestService requestBuilder,

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/api/OpenApiActuatorResource.java
Patch:
@@ -39,13 +39,15 @@
 
 import org.springframework.beans.factory.ObjectFactory;
 import org.springframework.boot.actuate.endpoint.web.annotation.RestControllerEndpoint;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.GetMapping;
 
 import static org.apache.commons.lang3.StringUtils.EMPTY;
 import static org.springdoc.core.utils.Constants.APPLICATION_OPENAPI_YAML;
 import static org.springdoc.core.utils.Constants.DEFAULT_API_DOCS_ACTUATOR_URL;
 import static org.springdoc.core.utils.Constants.DEFAULT_YAML_API_DOCS_ACTUATOR_PATH;
+import static org.springdoc.core.utils.Constants.SPRINGDOC_ENABLE_DEFAULT_API_DOCS;
 import static org.springdoc.core.utils.Constants.YAML;
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 
@@ -54,6 +56,7 @@
  * @author bnasslashen
  */
 @RestControllerEndpoint(id = DEFAULT_API_DOCS_ACTUATOR_URL)
+@ConditionalOnProperty(name = SPRINGDOC_ENABLE_DEFAULT_API_DOCS, havingValue = "true", matchIfMissing = true)
 public class OpenApiActuatorResource extends OpenApiResource {
 
 	/**

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/api/OpenApiWebMvcResource.java
Patch:
@@ -43,19 +43,22 @@
 import org.springframework.beans.factory.ObjectFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
 import static org.springdoc.core.utils.Constants.API_DOCS_URL;
 import static org.springdoc.core.utils.Constants.APPLICATION_OPENAPI_YAML;
 import static org.springdoc.core.utils.Constants.DEFAULT_API_DOCS_URL_YAML;
+import static org.springdoc.core.utils.Constants.SPRINGDOC_ENABLE_DEFAULT_API_DOCS;
 
 /**
  * The type Open api resource.
  * @author bnasslahsen
  */
 @RestController
+@ConditionalOnProperty(name = SPRINGDOC_ENABLE_DEFAULT_API_DOCS, havingValue = "true", matchIfMissing = true)
 public class OpenApiWebMvcResource extends OpenApiResource {
 
 	/**

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/core/configuration/SpringDocWebMvcConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public class SpringDocWebMvcConfiguration {
 	 */
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnProperty(name = SPRINGDOC_USE_MANAGEMENT_PORT, havingValue = "false", matchIfMissing = true)
+	@ConditionalOnExpression("(${springdoc.use-management-port:false} == false ) and ${springdoc.enable-default-api-docs:true}")
 	@Lazy(false)
 	OpenApiWebMvcResource openApiResource(ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory, AbstractRequestService requestBuilder,
 			GenericResponseService responseBuilder, OperationService operationParser,
@@ -233,7 +233,7 @@ ActuatorProvider actuatorProvider(ServerProperties serverProperties,
 		 */
 		@Bean
 		@ConditionalOnMissingBean(MultipleOpenApiSupportConfiguration.class)
-		@ConditionalOnProperty(SPRINGDOC_USE_MANAGEMENT_PORT)
+		@ConditionalOnExpression("${springdoc.use-management-port:false} and ${springdoc.enable-default-api-docs:true}")
 		@ConditionalOnManagementPort(ManagementPortType.DIFFERENT)
 		@Lazy(false)
 		OpenApiActuatorResource openApiActuatorResource(ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory, AbstractRequestService requestBuilder,

File: springdoc-openapi-starter-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeWebFlux.java
Patch:
@@ -38,8 +38,8 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.util.UriComponentsBuilder;
 
-import static org.springdoc.core.utils.Constants.SWAGGER_UI_PATH;
 import static org.springdoc.core.utils.Constants.SWAGGER_CONFIG_FILE;
+import static org.springdoc.core.utils.Constants.SWAGGER_UI_PATH;
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 
 /**

File: springdoc-openapi-tests/springdoc-openapi-javadoc-tests/src/test/java/test/org/springdoc/api/app173/ExampleController.java
Patch:
@@ -1,15 +1,16 @@
 package test.org.springdoc.api.app173;
 
+import java.util.UUID;
+
 import io.swagger.v3.oas.annotations.Operation;
+
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.PatchMapping;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.PutMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RestController;
 
-import java.util.UUID;
-
 import static org.springframework.http.HttpStatus.OK;
 
 /**

File: springdoc-openapi-tests/springdoc-openapi-javadoc-tests/src/test/java/test/org/springdoc/api/app173/SpringDocApp173Test.java
Patch:
@@ -1,8 +1,9 @@
 package test.org.springdoc.api.app173;
 
+import test.org.springdoc.api.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
-import test.org.springdoc.api.AbstractSpringDocTest;
 
 /**
  * The type Spring doc app 173 test.

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/converters/models/SortObject.java
Patch:
@@ -24,11 +24,14 @@
 package org.springdoc.core.converters.models;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+import io.swagger.v3.oas.annotations.media.ArraySchema;
+import io.swagger.v3.oas.annotations.media.Schema;
 
 /**
  * The type Sort response.
  * @author bnasslahsen
  */
+@ArraySchema(arraySchema = @Schema(implementation = SortObject.class))
 public class SortObject {
 
 	/**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericResponseService.java
Patch:
@@ -712,7 +712,7 @@ private Map<String, ApiResponse> getGenericMapResponse(Class<?> beanType) {
 
 			LinkedHashMap<String, ApiResponse> genericApiResponsesClone;
 			try {
-				ObjectMapper objectMapper = ObjectMapperProvider.createJson(springDocConfigProperties);
+				ObjectMapper objectMapper = new ObjectMapper();
 				genericApiResponsesClone = objectMapper.readValue(objectMapper.writeValueAsString(genericApiResponseMap), ApiResponses.class);
 				return genericApiResponsesClone;
 			}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocSortConfiguration.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Optional;
 
 import org.springdoc.core.converters.SortOpenAPIConverter;
+import org.springdoc.core.converters.models.SortObject;
 import org.springdoc.core.customizers.DataRestDelegatingMethodParameterCustomizer;
 import org.springdoc.core.customizers.DelegatingMethodParameterCustomizer;
 import org.springdoc.core.providers.ObjectMapperProvider;
@@ -71,6 +72,7 @@ public class SpringDocSortConfiguration {
 	@Lazy(false)
 	SortOpenAPIConverter sortOpenAPIConverter(ObjectMapperProvider objectMapperProvider) {
 		getConfig().replaceParameterObjectWithClass(org.springframework.data.domain.Sort.class, org.springdoc.core.converters.models.Sort.class);
+		getConfig().replaceWithClass(org.springframework.data.domain.Sort.class, SortObject.class);
 		return new SortOpenAPIConverter(objectMapperProvider);
 	}
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/utils/Constants.java
Patch:
@@ -403,7 +403,7 @@ public final class Constants {
 	/**
 	 * The constant SPRINGDOC_SORT_CONVERTER_ENABLED.
 	 */
-	public static final String SPRINGDOC_SORT_CONVERTER_ENABLED = "springdoc.model-converters.sort-converter.enabled";
+	public static final String SPRINGDOC_SORT_CONVERTER_ENABLED = "springdoc.sort-converter.enabled";
 
 	/**
 	 * The constant SPRINGDOC_NULLABLE_REQUEST_PARAMETER_ENABLED.

File: springdoc-openapi-starter-webmvc-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeWebMvc.java
Patch:
@@ -57,7 +57,7 @@ public class SwaggerWelcomeWebMvc extends SwaggerWelcomeCommon {
 	/**
 	 * The Mvc servlet path.
 	 */
-// To keep compatiblity with spring-boot 1 - WebMvcProperties changed package from srping 4 to spring 5
+// To keep compatibility with spring-boot 1 - WebMvcProperties changed package from spring 4 to spring 5
 	@Value(MVC_SERVLET_PATH)
 	private String mvcServletPath;
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/utils/Constants.java
Patch:
@@ -55,14 +55,14 @@ public final class Constants {
 	public static final String API_DOCS_URL = "${springdoc.api-docs.path:#{T(org.springdoc.core.utils.Constants).DEFAULT_API_DOCS_URL}}";
 
 	/**
-	 * The constant SWAGGGER_CONFIG_FILE.
+	 * The constant SWAGGER_CONFIG_FILE.
 	 */
-	public static final String SWAGGGER_CONFIG_FILE = "swagger-config";
+	public static final String SWAGGER_CONFIG_FILE = "swagger-config";
 
 	/**
 	 * The constant SWAGGER_CONFIG_URL.
 	 */
-	public static final String SWAGGER_CONFIG_URL = API_DOCS_URL + DEFAULT_PATH_SEPARATOR + SWAGGGER_CONFIG_FILE;
+	public static final String SWAGGER_CONFIG_URL = API_DOCS_URL + DEFAULT_PATH_SEPARATOR + SWAGGER_CONFIG_FILE;
 
 	/**
 	 * The constant YAML.

File: springdoc-openapi-starter-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeActuator.java
Patch:
@@ -45,7 +45,7 @@
 
 import static org.springdoc.core.utils.Constants.DEFAULT_API_DOCS_ACTUATOR_URL;
 import static org.springdoc.core.utils.Constants.DEFAULT_SWAGGER_UI_ACTUATOR_PATH;
-import static org.springdoc.core.utils.Constants.SWAGGGER_CONFIG_FILE;
+import static org.springdoc.core.utils.Constants.SWAGGER_CONFIG_FILE;
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 
 /**
@@ -58,7 +58,7 @@ public class SwaggerWelcomeActuator extends SwaggerWelcomeCommon {
 	/**
 	 * The constant SWAGGER_CONFIG_ACTUATOR_URL.
 	 */
-	private static final String SWAGGER_CONFIG_ACTUATOR_URL = DEFAULT_PATH_SEPARATOR + SWAGGGER_CONFIG_FILE;
+	private static final String SWAGGER_CONFIG_ACTUATOR_URL = DEFAULT_PATH_SEPARATOR + SWAGGER_CONFIG_FILE;
 
 	/**
 	 * The Web endpoint properties.
@@ -147,7 +147,7 @@ protected String buildUrlWithContextPath(String swaggerUiUrl) {
 	protected String buildSwaggerConfigUrl() {
 		return contextPath + webEndpointProperties.getBasePath()
 				+ DEFAULT_PATH_SEPARATOR + DEFAULT_SWAGGER_UI_ACTUATOR_PATH
-				+ DEFAULT_PATH_SEPARATOR + SWAGGGER_CONFIG_FILE;
+				+ DEFAULT_PATH_SEPARATOR + SWAGGER_CONFIG_FILE;
 	}
 
 }

File: springdoc-openapi-starter-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeWebFlux.java
Patch:
@@ -39,7 +39,7 @@
 import org.springframework.web.util.UriComponentsBuilder;
 
 import static org.springdoc.core.utils.Constants.SWAGGER_UI_PATH;
-import static org.springdoc.core.utils.Constants.SWAGGGER_CONFIG_FILE;
+import static org.springdoc.core.utils.Constants.SWAGGER_CONFIG_FILE;
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 
 /**
@@ -137,7 +137,7 @@ protected String buildUrlWithContextPath(String swaggerUiUrl) {
 	 */
 	@Override
 	protected String buildSwaggerConfigUrl() {
-		return this.apiDocsUrl + DEFAULT_PATH_SEPARATOR + SWAGGGER_CONFIG_FILE;
+		return this.apiDocsUrl + DEFAULT_PATH_SEPARATOR + SWAGGER_CONFIG_FILE;
 	}
 
 }

File: springdoc-openapi-starter-webmvc-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeActuator.java
Patch:
@@ -41,7 +41,7 @@
 
 import static org.springdoc.core.utils.Constants.DEFAULT_API_DOCS_ACTUATOR_URL;
 import static org.springdoc.core.utils.Constants.DEFAULT_SWAGGER_UI_ACTUATOR_PATH;
-import static org.springdoc.core.utils.Constants.SWAGGGER_CONFIG_FILE;
+import static org.springdoc.core.utils.Constants.SWAGGER_CONFIG_FILE;
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 
 /**
@@ -50,7 +50,7 @@
 @ControllerEndpoint(id = DEFAULT_SWAGGER_UI_ACTUATOR_PATH)
 public class SwaggerWelcomeActuator extends SwaggerWelcomeCommon {
 
-	private static final String SWAGGER_CONFIG_ACTUATOR_URL = DEFAULT_PATH_SEPARATOR + SWAGGGER_CONFIG_FILE;
+	private static final String SWAGGER_CONFIG_ACTUATOR_URL = DEFAULT_PATH_SEPARATOR + SWAGGER_CONFIG_FILE;
 
 	/**
 	 * The Web endpoint properties.
@@ -117,7 +117,7 @@ protected String buildUrlWithContextPath(String swaggerUiUrl) {
 	protected String buildSwaggerConfigUrl() {
 		return contextPath + webEndpointProperties.getBasePath()
 				+ DEFAULT_PATH_SEPARATOR + DEFAULT_SWAGGER_UI_ACTUATOR_PATH
-				+ DEFAULT_PATH_SEPARATOR + SWAGGGER_CONFIG_FILE;
+				+ DEFAULT_PATH_SEPARATOR + SWAGGER_CONFIG_FILE;
 	}
 
 }

File: springdoc-openapi-starter-webmvc-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeWebMvc.java
Patch:
@@ -39,7 +39,7 @@
 
 import static org.springdoc.core.utils.Constants.MVC_SERVLET_PATH;
 import static org.springdoc.core.utils.Constants.SWAGGER_UI_PATH;
-import static org.springdoc.core.utils.Constants.SWAGGGER_CONFIG_FILE;
+import static org.springdoc.core.utils.Constants.SWAGGER_CONFIG_FILE;
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 
 /**
@@ -57,7 +57,7 @@ public class SwaggerWelcomeWebMvc extends SwaggerWelcomeCommon {
 	/**
 	 * The Mvc servlet path.
 	 */
-// To keep compatiblity with spring-boot 1 - WebMvcProperties changed package from srping 4 to spring 5
+// To keep compatiblity with spring-boot 1 - WebMvcProperties changed package from spring 4 to spring 5
 	@Value(MVC_SERVLET_PATH)
 	private String mvcServletPath;
 
@@ -142,7 +142,7 @@ protected String buildUrlWithContextPath(String swaggerUiUrl) {
 	 */
 	@Override
 	protected String buildSwaggerConfigUrl() {
-		return apiDocsUrl + DEFAULT_PATH_SEPARATOR + SWAGGGER_CONFIG_FILE;
+		return apiDocsUrl + DEFAULT_PATH_SEPARATOR + SWAGGER_CONFIG_FILE;
 	}
 
 }
\ No newline at end of file

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -490,7 +490,7 @@ protected void calculatePath(HandlerMethod handlerMethod, RouterOperation router
 			// RequestBody in Operation
 			requestBuilder.getRequestBodyBuilder()
 					.buildRequestBodyFromDoc(requestBodyDoc, methodAttributes, components,
-							methodAttributes.getJsonViewAnnotationForRequestBody())
+							methodAttributes.getJsonViewAnnotationForRequestBody(), locale)
 					.ifPresent(operation::setRequestBody);
 			// requests
 			operation = requestBuilder.build(handlerMethod, requestMethod, operation, methodAttributes, openAPI);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocConfiguration.java
Patch:
@@ -343,8 +343,8 @@ PropertyResolverUtils propertyResolverUtils(ConfigurableBeanFactory factory, Mes
 	@Bean
 	@ConditionalOnMissingBean
 	@Lazy(false)
-	RequestBodyService requestBodyBuilder(GenericParameterService parameterBuilder) {
-		return new RequestBodyService(parameterBuilder);
+	RequestBodyService requestBodyBuilder(GenericParameterService parameterBuilder, PropertyResolverUtils propertyResolverUtils) {
+		return new RequestBodyService(parameterBuilder, propertyResolverUtils);
 	}
 
 	/**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/OperationService.java
Patch:
@@ -153,7 +153,8 @@ public OpenAPI parse(io.swagger.v3.oas.annotations.Operation apiOperation,
 		}
 
 		// RequestBody in Operation
-		requestBodyService.buildRequestBodyFromDoc(apiOperation.requestBody(), operation.getRequestBody(), methodAttributes, components).ifPresent(operation::setRequestBody);
+		requestBodyService.buildRequestBodyFromDoc(apiOperation.requestBody(), operation.getRequestBody(), methodAttributes, components, locale)
+			.ifPresent(operation::setRequestBody);
 
 		// build response
 		buildResponse(components, apiOperation, operation, methodAttributes);

File: springdoc-openapi-starter-webmvc-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeWebMvc.java
Patch:
@@ -57,7 +57,7 @@ public class SwaggerWelcomeWebMvc extends SwaggerWelcomeCommon {
 	/**
 	 * The Mvc servlet path.
 	 */
-// To keep compatiblity with spring-boot 1 - WebMvcProperties changed package from srping 4 to spring 5
+// To keep compatibility with spring-boot 1 - WebMvcProperties changed package from spring 4 to spring 5
 	@Value(MVC_SERVLET_PATH)
 	private String mvcServletPath;
 

File: springdoc-openapi-tests/springdoc-openapi-javadoc-tests/src/test/java/test/org/springdoc/api/app97/StudentV2.java
Patch:
@@ -10,7 +10,7 @@ public class StudentV2 {
 	/**
 	 * The Name.
 	 */
-	@JsonProperty("name")
+	@JsonProperty("bb")
 	private String name;
 
 	/**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/extractor/MethodParameterPojoExtractor.java
Patch:
@@ -93,6 +93,7 @@ public class MethodParameterPojoExtractor {
 		SIMPLE_TYPE_PREDICATES.add(Class::isEnum);
 		SIMPLE_TYPE_PREDICATES.add(Class::isArray);
 		SIMPLE_TYPE_PREDICATES.add(MethodParameterPojoExtractor::isSwaggerPrimitiveType);
+		SIMPLE_TYPE_PREDICATES.add(aClass -> aClass.getName().startsWith("org.codehaus.groovy.reflection"));
 	}
 
 	/**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocHateoasConfiguration.java
Patch:
@@ -97,11 +97,11 @@ CollectionModelContentConverter collectionModelContentConverter(HateoasHalProvid
 	 * @param halProvider the hal provider
 	 * @param springDocConfigProperties the spring doc config properties
 	 * @param objectMapperProvider the object mapper provider
-	 * @return the open api customiser
+	 * @return the open api customizer
 	 * @see org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalLinkListSerializer#serialize(Links, JsonGenerator, SerializerProvider) org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalLinkListSerializer#serialize(Links, JsonGenerator, SerializerProvider)org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalLinkListSerializer#serialize(Links, JsonGenerator, SerializerProvider)org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalLinkListSerializer#serialize(Links, JsonGenerator, SerializerProvider)org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalLinkListSerializer#serialize(Links, JsonGenerator, SerializerProvider)org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalLinkListSerializer#serialize(Links, JsonGenerator, SerializerProvider)
 	 */
 	@Bean(Constants.LINKS_SCHEMA_CUSTOMISER)
-	@ConditionalOnMissingBean
+	@ConditionalOnMissingBean(name = Constants.LINKS_SCHEMA_CUSTOMISER)
 	@Lazy(false)
 	GlobalOpenApiCustomizer linksSchemaCustomizer(HateoasHalProvider halProvider, SpringDocConfigProperties springDocConfigProperties,
 			ObjectMapperProvider objectMapperProvider) {

File: springdoc-openapi-tests/springdoc-openapi-javadoc-tests/src/test/java/test/org/springdoc/api/app172/JavadocPropertyCustomizerTest.java
Patch:
@@ -128,7 +128,7 @@ void ifRecordObjectShouldGetField() throws IOException, ClassNotFoundException,
 					.addProperty("name", new StringSchema().name("name"));
 
 			List<PropertyDescriptor> propertyDescriptors = Arrays.asList(Introspector.getBeanInfo(cls).getPropertyDescriptors());
-			javadocPropertyCustomizer.setJavadocDescription(cls, fields, propertyDescriptors, existingSchema);
+			javadocPropertyCustomizer.setJavadocDescription(cls, fields, propertyDescriptors, existingSchema,false);
 
 			assertEquals("Record Object", existingSchema.getDescription());
 			Map<String, Schema> properties = existingSchema.getProperties();

File: springdoc-openapi-starter-common/src/test/java/org/springdoc/ui/AbstractSwaggerResourceResolverTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.springdoc.ui;
 
+import java.io.File;
 import java.util.Objects;
 
 import org.junit.jupiter.api.BeforeEach;
@@ -28,7 +29,7 @@ void findWebJarResourcePath() {
 		String path = "swagger-ui/swagger-initializer.js";
 
 		String actual = abstractSwaggerResourceResolver.findWebJarResourcePath(path);
-		assertEquals("swagger-ui/4.18.2/swagger-initializer.js", actual);
+		assertEquals("swagger-ui" + File.separator + "4.18.2" + File.separator + "swagger-initializer.js", actual);
 	}
 
 	@Test

File: springdoc-openapi-starter-common/src/test/java/org/springdoc/ui/AbstractSwaggerResourceResolverTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.springdoc.ui;
 
+import java.io.File;
 import java.util.Objects;
 
 import org.junit.jupiter.api.BeforeEach;
@@ -28,7 +29,7 @@ void findWebJarResourcePath() {
 		String path = "swagger-ui/swagger-initializer.js";
 
 		String actual = abstractSwaggerResourceResolver.findWebJarResourcePath(path);
-		assertEquals("swagger-ui/4.18.2/swagger-initializer.js", actual);
+		assertEquals("swagger-ui" + File.separator + "4.18.2" + File.separator + "swagger-initializer.js", actual);
 	}
 
 	@Test

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocConfiguration.java
Patch:
@@ -458,15 +458,14 @@ static class SpringDocActuatorConfiguration {
 		 * Springdoc bean factory post processor 3 bean factory post processor.
 		 *
 		 * @param groupedOpenApis           the grouped open apis
-		 * @param springDocConfigProperties the spring doc config properties
 		 * @return the bean factory post processor
 		 */
 		@Bean
 		@Lazy(false)
 		@ConditionalOnManagementPort(ManagementPortType.DIFFERENT)
 		@Conditional(MultipleOpenApiSupportCondition.class)
-		static BeanFactoryPostProcessor springdocBeanFactoryPostProcessor3(List<GroupedOpenApi> groupedOpenApis, SpringDocConfigProperties springDocConfigProperties) {
-			return new SpringdocActuatorBeanFactoryConfigurer(groupedOpenApis, springDocConfigProperties);
+		static BeanFactoryPostProcessor springdocBeanFactoryPostProcessor3(List<GroupedOpenApi> groupedOpenApis) {
+			return new SpringdocActuatorBeanFactoryConfigurer(groupedOpenApis);
 		}
 
 		/**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/customizers/OpenApiHateoasLinksCustomizer.java
Patch:
@@ -59,7 +59,7 @@ public OpenApiHateoasLinksCustomizer(SpringDocConfigProperties springDocConfigPr
 
 	@Override
 	public void customise(OpenAPI openApi) {
-		ResolvedSchema resolvedLinkSchema = ModelConverters.getInstance()
+		ResolvedSchema resolvedLinkSchema = ModelConverters.getInstance(springDocConfigProperties.isOpenapi31())
 				.resolveAsResolvedSchema(new AnnotatedType(Link.class));
 		openApi
 				.schema("Link", resolvedLinkSchema.schema)

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/data/DataRestOperationService.java
Patch:
@@ -208,7 +208,7 @@ private Operation buildSearchOperation(HandlerMethod handlerMethod, DataRestRepo
 			ResourceDescription description = parameterMetadatum.getDescription();
 			if (description instanceof TypedResourceDescription) {
 				Type type = getParameterType(pName,method,description);
-				Schema<?> schema = SpringDocAnnotationsUtils.extractSchema(openAPI.getComponents(), type, null, null);
+				Schema<?> schema = SpringDocAnnotationsUtils.extractSchema(openAPI.getComponents(), type, null, null, openAPI.getSpecVersion());
 				Parameter parameter = getParameterFromAnnotations(openAPI, methodAttributes, method, pName);
 				if (parameter == null) {
 					parameter = new Parameter().name(pName).in(ParameterIn.QUERY.toString()).schema(schema);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/data/DataRestRequestService.java
Patch:
@@ -161,7 +161,7 @@ public void buildCommonParameters(OpenAPI openAPI, RequestMethod requestMethod,
 			ParameterInfo parameterInfo = new ParameterInfo(pName, methodParameter, parameterBuilder, parameterDoc);
 			if (isParamToIgnore(methodParameter)) {
 				if (PersistentEntityResource.class.equals(methodParameter.getParameterType())) {
-					Schema<?> schema = SpringDocAnnotationsUtils.resolveSchemaFromType(domainType, openAPI.getComponents(), null, methodParameter.getParameterAnnotations());
+					Schema<?> schema = SpringDocAnnotationsUtils.resolveSchemaFromType(domainType, openAPI.getComponents(), null, methodParameter.getParameterAnnotations(), openAPI.getSpecVersion());
 					parameterInfo.setParameterModel(new Parameter().schema(schema));
 				}
 				else if (methodParameter.getParameterAnnotation(BackendId.class) != null) {

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/providers/SpringCloudFunctionProvider.java
Patch:
@@ -210,7 +210,7 @@ private void getRouterOperationsCommon(String name, RequestMethod requestMethod,
 	 */
 	private void buildRequest(OpenAPI openAPI, String name, FunctionInvocationWrapper function, RequestMethod requestMethod, RouterOperation routerOperation) {
 		Type paramType = function.getInputType();
-		Schema<?> schema = SpringDocAnnotationsUtils.extractSchema(openAPI.getComponents(), paramType, null, null);
+		Schema<?> schema = SpringDocAnnotationsUtils.extractSchema(openAPI.getComponents(), paramType, null, null, openAPI.getSpecVersion());
 		if (GET.equals(requestMethod)) {
 			Parameter parameter = new PathParameter().name(name).schema(schema);
 			routerOperation.getOperationModel().addParametersItem(parameter);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/RequestBodyService.java
Patch:
@@ -104,7 +104,7 @@ public Optional<RequestBody> buildRequestBodyFromDoc(
 			isEmpty = false;
 		}
 		if (requestBody.extensions().length > 0) {
-			Map<String, Object> extensions = AnnotationsUtils.getExtensions(requestBody.extensions());
+			Map<String, Object> extensions = AnnotationsUtils.getExtensions(parameterBuilder.isOpenapi31(), requestBody.extensions());
 			extensions.forEach(requestBodyObject::addExtension);
 			isEmpty = false;
 		}
@@ -135,7 +135,7 @@ public Optional<RequestBody> buildRequestBodyFromDoc(
 	private void buildResquestBodyContent(io.swagger.v3.oas.annotations.parameters.RequestBody requestBody, RequestBody requestBodyOp, MethodAttributes methodAttributes, Components components, JsonView jsonViewAnnotation, String[] classConsumes, String[] methodConsumes, RequestBody requestBodyObject) {
 		Optional<Content> optionalContent = SpringDocAnnotationsUtils
 				.getContent(requestBody.content(), getConsumes(classConsumes),
-						getConsumes(methodConsumes), null, components, jsonViewAnnotation);
+						getConsumes(methodConsumes), null, components, jsonViewAnnotation, parameterBuilder.isOpenapi31());
 		if (requestBodyOp == null) {
 			if (optionalContent.isPresent()) {
 				Content content = optionalContent.get();

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/SecurityService.java
Patch:
@@ -258,7 +258,7 @@ public Optional<SecuritySchemePair> getSecurityScheme(
 			securitySchemeObject.setName(securityScheme.paramName());
 
 		if (securityScheme.extensions().length > 0) {
-			Map<String, Object> extensions = AnnotationsUtils.getExtensions(securityScheme.extensions());
+			Map<String, Object> extensions = AnnotationsUtils.getExtensions(propertyResolverUtils.isOpenapi31(), securityScheme.extensions());
 			extensions.forEach(securitySchemeObject::addExtension);
 		}
 
@@ -295,7 +295,7 @@ private Optional<OAuthFlows> getOAuthFlows(io.swagger.v3.oas.annotations.securit
 
 		OAuthFlows oAuthFlowsObject = new OAuthFlows();
 		if (oAuthFlows.extensions().length > 0) {
-			Map<String, Object> extensions = AnnotationsUtils.getExtensions(oAuthFlows.extensions());
+			Map<String, Object> extensions = AnnotationsUtils.getExtensions(propertyResolverUtils.isOpenapi31(), oAuthFlows.extensions());
 			extensions.forEach(oAuthFlowsObject::addExtension);
 		}
 		getOAuthFlow(oAuthFlows.authorizationCode(), locale).ifPresent(oAuthFlowsObject::setAuthorizationCode);
@@ -327,7 +327,7 @@ private Optional<OAuthFlow> getOAuthFlow(io.swagger.v3.oas.annotations.security.
 			oAuthFlowObject.setTokenUrl(propertyResolverUtils.resolve(oAuthFlow.tokenUrl(), locale));
 
 		if (oAuthFlow.extensions().length > 0) {
-			Map<String, Object> extensions = AnnotationsUtils.getExtensions(oAuthFlow.extensions());
+			Map<String, Object> extensions = AnnotationsUtils.getExtensions(propertyResolverUtils.isOpenapi31(), oAuthFlow.extensions());
 			extensions.forEach(oAuthFlowObject::addExtension);
 		}
 		getScopes(oAuthFlow.scopes()).ifPresent(oAuthFlowObject::setScopes);

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app188/HelloController.java
Patch:
@@ -32,6 +32,7 @@
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.OpenAPI;
 import io.swagger.v3.oas.models.Operation;
+import io.swagger.v3.oas.models.SpecVersion;
 import io.swagger.v3.oas.models.media.Content;
 import io.swagger.v3.oas.models.responses.ApiResponse;
 import org.springdoc.core.customizers.OperationCustomizer;
@@ -67,7 +68,7 @@ public OperationCustomizer operationCustomizer(OpenAPI api) {
 				api.getComponents(),
 				ErrorResponse.class,
 				null,
-				null
+				null, SpecVersion.V30
 		);
 
 		ApiResponse errorApiResponse = new ApiResponse().content(new Content().addMediaType(

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/customizers/OpenApiHateoasLinksCustomizer.java
Patch:
@@ -34,6 +34,7 @@
 import io.swagger.v3.oas.models.media.ObjectSchema;
 import io.swagger.v3.oas.models.media.StringSchema;
 import org.springdoc.core.properties.SpringDocConfigProperties;
+import org.springdoc.core.properties.SpringDocConfigProperties.ApiDocs.OpenApiVersion;
 
 import org.springframework.hateoas.Link;
 
@@ -59,7 +60,8 @@ public OpenApiHateoasLinksCustomizer(SpringDocConfigProperties springDocConfigPr
 
 	@Override
 	public void customise(OpenAPI openApi) {
-		ResolvedSchema resolvedLinkSchema = ModelConverters.getInstance()
+		boolean openapi31 = OpenApiVersion.OPENAPI_3_1 == springDocConfigProperties.getApiDocs().getVersion();
+		ResolvedSchema resolvedLinkSchema = ModelConverters.getInstance(openapi31)
 				.resolveAsResolvedSchema(new AnnotatedType(Link.class));
 		openApi
 				.schema("Link", resolvedLinkSchema.schema)

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/properties/AbstractSwaggerUiConfigProperties.java
Patch:
@@ -32,7 +32,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import org.apache.commons.lang3.StringUtils;
 
-import static org.springdoc.core.utils.Constants.GROUP_NAME_NOT_NULL;
+import static org.springdoc.core.utils.Constants.GROUP_NAME_NOT_NULL_OR_EMPTY;
 
 /**
  * Please refer to the swagger
@@ -724,7 +724,7 @@ public SwaggerUrl() {
 		 * @param displayName the display name
 		 */
 		public SwaggerUrl(String group, String url, String displayName) {
-			Objects.requireNonNull(group, GROUP_NAME_NOT_NULL);
+			Objects.requireNonNull(group, GROUP_NAME_NOT_NULL_OR_EMPTY);
 			this.url = url;
 			this.name = group;
 			this.displayName = StringUtils.defaultIfEmpty(displayName, this.name);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/utils/Constants.java
Patch:
@@ -243,7 +243,7 @@ public final class Constants {
 	/**
 	 * The constant GROUP_NAME_NOT_NULL.
 	 */
-	public static final String GROUP_NAME_NOT_NULL = "Group name can not be null";
+	public static final String GROUP_NAME_NOT_NULL_OR_EMPTY = "Group name can not be null or empty";
 
 	/**
 	 * The constant GET_METHOD.

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -97,6 +97,7 @@
 import org.springdoc.core.service.GenericResponseService;
 import org.springdoc.core.service.OpenAPIService;
 import org.springdoc.core.service.OperationService;
+import org.springdoc.core.utils.SpringDocUtils;
 
 import org.springframework.aop.support.AopUtils;
 import org.springframework.beans.factory.ObjectFactory;
@@ -1269,7 +1270,7 @@ protected URI getActuatorURI(String scheme, String host) {
 				port = actuatorProvider.getApplicationPort();
 				path = actuatorProvider.getContextPath();
 				String mvcServletPath = this.openAPIService.getContext().getBean(Environment.class).getProperty(SPRING_MVC_SERVLET_PATH);
-				if (StringUtils.isNotEmpty(mvcServletPath))
+				if (SpringDocUtils.isValidPath(mvcServletPath))
 					path = path + mvcServletPath;
 			}
 			try {

File: springdoc-openapi-starter-webmvc-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerUiHome.java
Patch:
@@ -25,7 +25,7 @@
 package org.springdoc.webmvc.ui;
 
 import io.swagger.v3.oas.annotations.Operation;
-import org.apache.commons.lang3.StringUtils;
+import org.springdoc.core.utils.SpringDocUtils;
 
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.stereotype.Controller;
@@ -57,7 +57,7 @@ public class SwaggerUiHome {
 	@Operation(hidden = true)
 	public String index() {
 		StringBuilder uiRootPath = new StringBuilder();
-		if (StringUtils.isNotBlank(mvcServletPath))
+		if (SpringDocUtils.isValidPath(mvcServletPath))
 			uiRootPath.append(mvcServletPath);
 
 		return REDIRECT_URL_PREFIX + uiRootPath + swaggerUiPath;

File: springdoc-openapi-starter-webmvc-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeWebMvc.java
Patch:
@@ -31,6 +31,7 @@
 import org.springdoc.core.properties.SwaggerUiConfigParameters;
 import org.springdoc.core.properties.SwaggerUiConfigProperties;
 import org.springdoc.core.providers.SpringWebProvider;
+import org.springdoc.core.utils.SpringDocUtils;
 
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.ResponseEntity;
@@ -99,7 +100,7 @@ public ResponseEntity<Void> redirectToUi(HttpServletRequest request) {
 	@Override
 	protected void calculateUiRootPath(StringBuilder... sbUrls) {
 		StringBuilder sbUrl = new StringBuilder();
-		if (StringUtils.isNotBlank(mvcServletPath))
+		if (SpringDocUtils.isValidPath(mvcServletPath))
 			sbUrl.append(mvcServletPath);
 		calculateUiRootCommon(sbUrl, sbUrls);
 	}
@@ -113,7 +114,7 @@ protected void calculateUiRootPath(StringBuilder... sbUrls) {
 	 */
 	@Override
 	protected String buildUrl(String contextPath, final String docsUrl) {
-		if (StringUtils.isNotBlank(mvcServletPath))
+		if (SpringDocUtils.isValidPath(mvcServletPath))
 			contextPath += mvcServletPath;
 		return super.buildUrl(contextPath, docsUrl);
 	}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocConfiguration.java
Patch:
@@ -438,7 +438,7 @@ SpringDocProviders springDocProviders(Optional<ActuatorProvider> actuatorProvide
 	@Bean
 	@ConditionalOnMissingBean
 	@Lazy(false)
-	ObjectMapperProvider objectMapperProvider(SpringDocConfigProperties springDocConfigProperties) {
+	ObjectMapperProvider springdocObjectMapperProvider(SpringDocConfigProperties springDocConfigProperties) {
 		return new ObjectMapperProvider(springDocConfigProperties);
 	}
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocConfiguration.java
Patch:
@@ -435,7 +435,7 @@ SpringDocProviders springDocProviders(Optional<ActuatorProvider> actuatorProvide
 	 * @param springDocConfigProperties the spring doc config properties
 	 * @return the object mapper provider
 	 */
-	@Bean
+	@Bean(name = "springdocObjectMapperProvider")
 	@ConditionalOnMissingBean
 	@Lazy(false)
 	ObjectMapperProvider objectMapperProvider(SpringDocConfigProperties springDocConfigProperties) {

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/ui/AbstractSwaggerResourceResolver.java
Patch:
@@ -36,7 +36,7 @@ public AbstractSwaggerResourceResolver(SwaggerUiConfigProperties swaggerUiConfig
 	@Nullable
 	protected String findWebJarResourcePath(String path) {
 		String webjar = webjar(path);
-		if (webjar.length() > 0) {
+		if (webjar.length() > 0 && !path.equals(webjar)) {
 			String version = swaggerUiConfigProperties.getVersion();
 			if (version != null) {
 				String partialPath = path(webjar, path);
@@ -67,9 +67,9 @@ private String webjar(String path) {
 	 * @return the string
 	 */
 	private String path(String webjar, String path) {
-		if (path.startsWith(webjar)) {
+		if (path.startsWith(webjar) && path.length() > webjar.length()) {
 			path = path.substring(webjar.length() + 1);
 		}
 		return path;
 	}
-}
\ No newline at end of file
+}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/ui/AbstractSwaggerResourceResolver.java
Patch:
@@ -67,7 +67,7 @@ private String webjar(String path) {
 	 * @return the string
 	 */
 	private String path(String webjar, String path) {
-		if (path.startsWith(webjar)) {
+		if (path.startsWith(webjar) && path.length() > webjar.length()) {
 			path = path.substring(webjar.length() + 1);
 		}
 		return path;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/ui/AbstractSwaggerResourceResolver.java
Patch:
@@ -36,7 +36,7 @@ public AbstractSwaggerResourceResolver(SwaggerUiConfigProperties swaggerUiConfig
 	@Nullable
 	protected String findWebJarResourcePath(String path) {
 		String webjar = webjar(path);
-		if (webjar.length() > 0) {
+		if (webjar.length() > 0 && !path.equals(webjar)) {
 			String version = swaggerUiConfigProperties.getVersion();
 			if (version != null) {
 				String partialPath = path(webjar, path);
@@ -72,4 +72,4 @@ private String path(String webjar, String path) {
 		}
 		return path;
 	}
-}
\ No newline at end of file
+}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/ui/AbstractSwaggerIndexTransformer.java
Patch:
@@ -177,7 +177,7 @@ else if (swaggerUiConfig.getCsrf().isUseSessionStorage())
 		if (swaggerUiConfig.isDisableSwaggerDefaultUrl())
 			html = overwriteSwaggerDefaultUrl(html);
 
-		if(StringUtils.isNotEmpty(swaggerUiConfig.getUrl())){
+		if(StringUtils.isNotEmpty(swaggerUiConfig.getUrl()) && StringUtils.isEmpty(swaggerUiConfig.getConfigUrl())){
 			html = setConfiguredApiDocsUrl(html);
 		}
 

File: springdoc-openapi-starter-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerIndexPageTransformer.java
Patch:
@@ -24,6 +24,8 @@
 
 package org.springdoc.webflux.ui;
 
+import java.nio.charset.StandardCharsets;
+
 import org.springdoc.core.properties.SwaggerUiConfigParameters;
 import org.springdoc.core.properties.SwaggerUiConfigProperties;
 import org.springdoc.core.properties.SwaggerUiOAuthProperties;
@@ -75,7 +77,7 @@ public Mono<Resource> transform(ServerWebExchange serverWebExchange, Resource re
 			boolean isIndexFound = antPathMatcher.match("**/swagger-ui/**/" + SWAGGER_INITIALIZER_JS, resource.getURL().toString());
 			if (isIndexFound) {
 				String html = defaultTransformations(resource.getInputStream());
-				return Mono.just(new TransformedResource(resource, html.getBytes()));
+				return Mono.just(new TransformedResource(resource, html.getBytes(StandardCharsets.UTF_8)));
 			}
 			else {
 				return Mono.just(resource);

File: springdoc-openapi-starter-webmvc-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerIndexPageTransformer.java
Patch:
@@ -25,6 +25,7 @@
 package org.springdoc.webmvc.ui;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 
 import jakarta.servlet.http.HttpServletRequest;
 import org.springdoc.core.properties.SwaggerUiConfigParameters;
@@ -76,7 +77,7 @@ public Resource transform(HttpServletRequest request, Resource resource,
 
 		if (isIndexFound) {
 			String html = defaultTransformations(resource.getInputStream());
-			return new TransformedResource(resource, html.getBytes());
+			return new TransformedResource(resource, html.getBytes(StandardCharsets.UTF_8));
 		}
 		else
 			return resource;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocUIConfiguration.java
Patch:
@@ -33,7 +33,6 @@
 
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
@@ -47,7 +46,6 @@
  * @author bnasslahsen
  */
 @Lazy(false)
-@ConditionalOnExpression("${springdoc.api-docs.enabled:true}")
 @ConditionalOnWebApplication
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnBean(SpringDocConfiguration.class)

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericParameterService.java
Patch:
@@ -334,7 +334,7 @@ private void setSchema(io.swagger.v3.oas.annotations.Parameter parameterDoc, Com
 			catch (Exception e) {
 				LOGGER.warn(Constants.GRACEFUL_EXCEPTION_OCCURRED, e);
 			}
-			if (schema == null) {
+			if (schema == null && parameterDoc.array() != null) {
 				schema = AnnotationsUtils.getSchema(parameterDoc.schema(), parameterDoc.array(), true, parameterDoc.array().schema().implementation(), components, jsonView).orElse(null);
 				// default value not set by swagger-core for array !
 				if (schema != null) {
@@ -366,7 +366,7 @@ Schema calculateSchema(Components components, ParameterInfo parameterInfo, Reque
 				WebConversionServiceProvider webConversionServiceProvider = optionalWebConversionServiceProvider.get();
 				if (!MethodParameterPojoExtractor.isSwaggerPrimitiveType((Class) type) && methodParameter.getParameterType().getAnnotation(io.swagger.v3.oas.annotations.media.Schema.class) == null) {
 					Class<?> springConvertedType = webConversionServiceProvider.getSpringConvertedType(methodParameter.getParameterType());
-					if (!(String.class.equals(springConvertedType) && ((Class<?>) type).isEnum()) && requestBodyInfo==null)
+					if (!(String.class.equals(springConvertedType) && ((Class<?>) type).isEnum()) && requestBodyInfo == null)
 						type = springConvertedType;
 				}
 			}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocConfiguration.java
Patch:
@@ -425,6 +425,7 @@ SpringDocProviders springDocProviders(Optional<ActuatorProvider> actuatorProvide
 			Optional<RepositoryRestResourceProvider> repositoryRestResourceProvider, Optional<RouterFunctionProvider> routerFunctionProvider,
 			Optional<SpringWebProvider> springWebProvider, Optional<WebConversionServiceProvider> webConversionServiceProvider,
 			ObjectMapperProvider objectMapperProvider) {
+		objectMapperProvider.jsonMapper().registerModule(new SpringDocRequiredModule());
 		return new SpringDocProviders(actuatorProvider, springCloudFunctionProvider, springSecurityOAuth2Provider, repositoryRestResourceProvider, routerFunctionProvider, springWebProvider, webConversionServiceProvider, objectMapperProvider);
 	}
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericParameterService.java
Patch:
@@ -366,7 +366,7 @@ Schema calculateSchema(Components components, ParameterInfo parameterInfo, Reque
 				WebConversionServiceProvider webConversionServiceProvider = optionalWebConversionServiceProvider.get();
 				if (!MethodParameterPojoExtractor.isSwaggerPrimitiveType((Class) type) && methodParameter.getParameterType().getAnnotation(io.swagger.v3.oas.annotations.media.Schema.class) == null) {
 					Class<?> springConvertedType = webConversionServiceProvider.getSpringConvertedType(methodParameter.getParameterType());
-					if (!(String.class.equals(springConvertedType) && ((Class<?>) type).isEnum()))
+					if (!(String.class.equals(springConvertedType) && ((Class<?>) type).isEnum()) && requestBodyInfo==null)
 						type = springConvertedType;
 				}
 			}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -1098,7 +1098,8 @@ private PathItem buildPathItem(RequestMethod requestMethod, Operation operation,
 				Parameter parameter = paramIt.next();
 				if (ParameterIn.PATH.toString().equals(parameter.getIn())) {
 					// check it's present in the path
-					if (!operationPath.contains("{" + parameter.getName() + "}"))
+					String name = parameter.getName();
+					if(!StringUtils.containsAny(operationPath, "{" + name + "}", "{*" + name + "}"))
 						paramIt.remove();
 				}
 			}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -342,6 +342,8 @@ protected synchronized OpenAPI getOpenApi(Locale locale) {
 			);
 			if (!CollectionUtils.isEmpty(openAPI.getServers()))
 				openAPIService.setServersPresent(true);
+			else
+				openAPIService.setServersPresent(false);
 			openAPIService.updateServers(openAPI);
 
 			if (springDocConfigProperties.isRemoveBrokenReferenceDefinitions())

File: springdoc-openapi-starter-common/src/test/java/org/springdoc/api/AbstractOpenApiResourceTest.java
Patch:
@@ -123,6 +123,7 @@ public void setUp() {
 
 		when(openAPIService.build(any())).thenReturn(openAPI);
 		when(openAPIService.getContext()).thenReturn(context);
+		doAnswer(new CallsRealMethods()).when(openAPIService).setServersPresent(false);
 
 		when(openAPIBuilderObjectFactory.getObject()).thenReturn(openAPIService);
 		when(springDocProviders.jsonMapper()).thenReturn(Json.mapper());

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocSecurityConfiguration.java
Patch:
@@ -76,7 +76,7 @@
 @Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnExpression("${springdoc.api-docs.enabled:true} and ${springdoc.enable-spring-security:true}")
-@ConditionalOnClass(Authentication.class)
+@ConditionalOnClass(SecurityFilterChain.class)
 @ConditionalOnWebApplication
 @ConditionalOnBean(SpringDocConfiguration.class)
 public class SpringDocSecurityConfiguration {

File: springdoc-openapi-tests/springdoc-openapi-actuator-webflux-tests/src/test/java/test/org/springdoc/api/app144/SpringDocApp144Test.java
Patch:
@@ -31,9 +31,9 @@
 
 @SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT,
 		properties = { "management.endpoints.web.exposure.include:*",
-				"server.port=52554",
+				"server.port=52555",
 				"springdoc.use-management-port=true",
-				"management.server.port=9290",
+				"management.server.port=9289",
 				"management.endpoints.web.base-path=/application" })
 public class SpringDocApp144Test extends AbstractSpringDocActuatorTest {
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/oauth2/SpringDocOAuth2AuthorizationServerMetadata.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * The type Spring doc o auth 2 authorization server metadata.
  *
- * @ses <a href="https://github.com/spring-projects/spring-authorization-server/blob/main/oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/OAuth2AuthorizationServerMetadata.java">OAuth2AuthorizationServerMetadata</a>
+ * @see <a href="https://github.com/spring-projects/spring-authorization-server/blob/main/oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/OAuth2AuthorizationServerMetadata.java">OAuth2AuthorizationServerMetadata</a>
  * @author bnasslahsen
  * @author yuta.saito
  */

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/utils/SpringDocAnnotationsUtils.java
Patch:
@@ -75,7 +75,7 @@ public class SpringDocAnnotationsUtils extends AnnotationsUtils {
 	private static final Logger LOGGER = LoggerFactory.getLogger(SpringDocAnnotationsUtils.class);
 
 	/**
-	 * The constant ANNOTATIOSN_TO_IGNORE.
+	 * The constant ANNOTATIONS_TO_IGNORE.
 	 */
 	private static final List<Class> ANNOTATIONS_TO_IGNORE = Collections.synchronizedList(new ArrayList<>());
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/RequestBodyService.java
Patch:
@@ -288,13 +288,12 @@ else if (!methodAttributes.isWithResponseBodySchemaDoc()) {
 			mergeContent(requestBody, methodAttributes, schema);
 		}
 
-
 		// Add requestBody javadoc
 		if (StringUtils.isBlank(requestBody.getDescription()) && parameterBuilder.getJavadocProvider() != null
 				&& parameterBuilder.isRequestBodyPresent(parameterInfo)) {
 			String paramJavadocDescription = parameterBuilder.getParamJavadoc(parameterBuilder.getJavadocProvider(), parameterInfo.getMethodParameter());
 			if (!StringUtils.isBlank(paramJavadocDescription)) {
-				requestBodyInfo.getRequestBody().setDescription(paramJavadocDescription);
+				requestBody.setDescription(paramJavadocDescription);
 			}
 		}
 		return requestBody;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/OpenAPIService.java
Patch:
@@ -246,7 +246,7 @@ public OpenAPI build(Locale locale) {
 			try {
 				ObjectMapper objectMapper = ObjectMapperProvider.createJson(springDocConfigProperties);
 				calculatedOpenAPI = objectMapper.readValue(objectMapper.writeValueAsString(openAPI), OpenAPI.class);
-				objectMapper.setSerializationInclusion(Include.NON_EMPTY);
+				objectMapper.setSerializationInclusion(Include.ALWAYS);
 				Map extensionsClone = objectMapper.readValue(objectMapper.writeValueAsString(openAPI.getExtensions()), Map.class);
 				calculatedOpenAPI.extensions(extensionsClone);
 			}

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app173/SpringDocApp173Test.java
Patch:
@@ -25,6 +25,7 @@
 package test.org.springdoc.api.v30.app173;
 
 import java.util.Locale;
+import java.util.Map;
 
 import io.swagger.v3.oas.models.OpenAPI;
 import org.junit.jupiter.api.Test;
@@ -67,7 +68,7 @@ private void testApp(Locale locale) throws Exception {
 	static class SpringDocTestApp {
 		@Bean
 		public OpenAPI openAPI() {
-			return new OpenAPI();
+			return new OpenAPI().extensions(Map.of("TEST", "HELLO"));
 		}
 	}
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/RequestBodyService.java
Patch:
@@ -288,13 +288,12 @@ else if (!methodAttributes.isWithResponseBodySchemaDoc()) {
 			mergeContent(requestBody, methodAttributes, schema);
 		}
 
-
 		// Add requestBody javadoc
 		if (StringUtils.isBlank(requestBody.getDescription()) && parameterBuilder.getJavadocProvider() != null
 				&& parameterBuilder.isRequestBodyPresent(parameterInfo)) {
 			String paramJavadocDescription = parameterBuilder.getParamJavadoc(parameterBuilder.getJavadocProvider(), parameterInfo.getMethodParameter());
 			if (!StringUtils.isBlank(paramJavadocDescription)) {
-				requestBodyInfo.getRequestBody().setDescription(paramJavadocDescription);
+				requestBody.setDescription(paramJavadocDescription);
 			}
 		}
 		return requestBody;

File: springdoc-openapi-tests/springdoc-openapi-actuator-webmvc-tests/src/test/java/test/org/springdoc/api/AbstractCommonTest.java
Patch:
@@ -19,7 +19,7 @@ public abstract class AbstractCommonTest {
 	@Autowired
 	protected MockMvc mockMvc;
 
-	protected String getContent(String fileName) throws Exception {
+	protected String getContent(String fileName) {
 		try {
 			Path path = Paths.get(AbstractCommonTest.class.getClassLoader().getResource(fileName).toURI());
 			byte[] fileBytes = Files.readAllBytes(path);

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/api/MultipleOpenApiActuatorResource.java
Patch:
@@ -85,7 +85,7 @@ public MultipleOpenApiActuatorResource(List<GroupedOpenApi> groupedOpenApis, Obj
 	 */
 	@Operation(hidden = true)
 	@GetMapping(value = "/{group}", produces = MediaType.APPLICATION_JSON_VALUE)
-	public Mono<String> openapiJson(ServerHttpRequest
+	public Mono<byte[]> openapiJson(ServerHttpRequest
 			serverHttpRequest, @Value(API_DOCS_URL) String apiDocsUrl,
 			@PathVariable String group, Locale locale)
 			throws JsonProcessingException {
@@ -104,7 +104,7 @@ public Mono<String> openapiJson(ServerHttpRequest
 	 */
 	@Operation(hidden = true)
 	@GetMapping(value = "/{group}/yaml", produces = APPLICATION_OPENAPI_YAML)
-	public Mono<String> openapiYaml(ServerHttpRequest serverHttpRequest,
+	public Mono<byte[]> openapiYaml(ServerHttpRequest serverHttpRequest,
 			@Value(DEFAULT_API_DOCS_URL_YAML) String apiDocsUrl, @PathVariable String
 			group, Locale locale) throws JsonProcessingException {
 		return getOpenApiResourceOrThrow(group).openapiYaml(serverHttpRequest, apiDocsUrl + DEFAULT_PATH_SEPARATOR + group, locale);

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/api/MultipleOpenApiWebFluxResource.java
Patch:
@@ -84,7 +84,7 @@ public MultipleOpenApiWebFluxResource(List<GroupedOpenApi> groupedOpenApis, Obje
 	 */
 	@Operation(hidden = true)
 	@GetMapping(value = API_DOCS_URL + "/{group}", produces = MediaType.APPLICATION_JSON_VALUE)
-	public Mono<String> openapiJson(ServerHttpRequest
+	public Mono<byte[]> openapiJson(ServerHttpRequest
 			serverHttpRequest, @Value(API_DOCS_URL) String apiDocsUrl, @PathVariable String
 			group, Locale locale) throws JsonProcessingException {
 		return getOpenApiResourceOrThrow(group).openapiJson(serverHttpRequest, apiDocsUrl + DEFAULT_PATH_SEPARATOR + group, locale);
@@ -102,7 +102,7 @@ public Mono<String> openapiJson(ServerHttpRequest
 	 */
 	@Operation(hidden = true)
 	@GetMapping(value = DEFAULT_API_DOCS_URL_YAML + "/{group}", produces = APPLICATION_OPENAPI_YAML)
-	public Mono<String> openapiYaml(ServerHttpRequest serverHttpRequest,
+	public Mono<byte[]> openapiYaml(ServerHttpRequest serverHttpRequest,
 			@Value(DEFAULT_API_DOCS_URL_YAML) String apiDocsUrl, @PathVariable String
 			group, Locale locale) throws JsonProcessingException {
 		return getOpenApiResourceOrThrow(group).openapiYaml(serverHttpRequest, apiDocsUrl + DEFAULT_PATH_SEPARATOR + group, locale);

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/api/OpenApiActuatorResource.java
Patch:
@@ -110,7 +110,7 @@ public OpenApiActuatorResource(ObjectFactory<OpenAPIService> openAPIBuilderObjec
 	 */
 	@Operation(hidden = true)
 	@GetMapping(value = DEFAULT_PATH_SEPARATOR, produces = MediaType.APPLICATION_JSON_VALUE)
-	public Mono<String> openapiJson(ServerHttpRequest serverHttpRequest, Locale locale)
+	public Mono<byte[]> openapiJson(ServerHttpRequest serverHttpRequest, Locale locale)
 			throws JsonProcessingException {
 		return super.openapiJson(serverHttpRequest, EMPTY, locale);
 	}
@@ -126,7 +126,7 @@ public Mono<String> openapiJson(ServerHttpRequest serverHttpRequest, Locale loca
 	 */
 	@Operation(hidden = true)
 	@GetMapping(value = DEFAULT_YAML_API_DOCS_ACTUATOR_PATH, produces = APPLICATION_OPENAPI_YAML)
-	public Mono<String> openapiYaml(ServerHttpRequest serverHttpRequest, Locale locale)
+	public Mono<byte[]> openapiYaml(ServerHttpRequest serverHttpRequest, Locale locale)
 			throws JsonProcessingException {
 		return super.openapiYaml(serverHttpRequest, YAML, locale);
 	}

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/api/OpenApiResource.java
Patch:
@@ -132,7 +132,7 @@ public OpenApiResource(ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory
 	 * @return the mono
 	 * @throws JsonProcessingException the json processing exception
 	 */
-	protected Mono<String> openapiJson(ServerHttpRequest serverHttpRequest, String apiDocsUrl, Locale locale)
+	protected Mono<byte[]> openapiJson(ServerHttpRequest serverHttpRequest, String apiDocsUrl, Locale locale)
 			throws JsonProcessingException {
 		calculateServerUrl(serverHttpRequest, apiDocsUrl, locale);
 		OpenAPI openAPI = this.getOpenApi(locale);
@@ -148,7 +148,7 @@ protected Mono<String> openapiJson(ServerHttpRequest serverHttpRequest, String a
 	 * @return the mono
 	 * @throws JsonProcessingException the json processing exception
 	 */
-	protected Mono<String> openapiYaml(ServerHttpRequest serverHttpRequest, String apiDocsUrl, Locale locale)
+	protected Mono<byte[]> openapiYaml(ServerHttpRequest serverHttpRequest, String apiDocsUrl, Locale locale)
 			throws JsonProcessingException {
 		calculateServerUrl(serverHttpRequest, apiDocsUrl, locale);
 		OpenAPI openAPI = this.getOpenApi(locale);

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/api/OpenApiWebfluxResource.java
Patch:
@@ -114,7 +114,7 @@ public OpenApiWebfluxResource(ObjectFactory<OpenAPIService> openAPIBuilderObject
 	@Operation(hidden = true)
 	@GetMapping(value = API_DOCS_URL, produces = MediaType.APPLICATION_JSON_VALUE)
 	@Override
-	public Mono<String> openapiJson(ServerHttpRequest serverHttpRequest, @Value(API_DOCS_URL) String apiDocsUrl, Locale locale)
+	public Mono<byte[]> openapiJson(ServerHttpRequest serverHttpRequest, @Value(API_DOCS_URL) String apiDocsUrl, Locale locale)
 			throws JsonProcessingException {
 		return super.openapiJson(serverHttpRequest, apiDocsUrl, locale);
 	}
@@ -131,7 +131,7 @@ public Mono<String> openapiJson(ServerHttpRequest serverHttpRequest, @Value(API_
 	@Operation(hidden = true)
 	@GetMapping(value = DEFAULT_API_DOCS_URL_YAML, produces = APPLICATION_OPENAPI_YAML)
 	@Override
-	public Mono<String> openapiYaml(ServerHttpRequest serverHttpRequest,
+	public Mono<byte[]> openapiYaml(ServerHttpRequest serverHttpRequest,
 			@Value(DEFAULT_API_DOCS_URL_YAML) String apiDocsUrl, Locale locale) throws JsonProcessingException {
 		return super.openapiYaml(serverHttpRequest, apiDocsUrl, locale);
 	}

File: springdoc-openapi-starter-webflux-api/src/test/java/test/org/springdoc/api/app81/SpringDocApp81Test.java
Patch:
@@ -23,6 +23,7 @@
 package test.org.springdoc.api.app81;
 
 import java.net.URI;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.List;
@@ -69,7 +70,8 @@ public void shouldGenerateOperationIdsDeterministically() throws Exception {
 		when(request.getURI()).thenReturn(URI.create("http://localhost"));
 
 		String expected = getContent("results/app81.json");
-		String openApi = resource.openapiJson(request, "", Locale.US).block();
+		byte[] openApiBytes =resource.openapiJson(request, "", Locale.US).block();
+		String openApi = new String(openApiBytes, StandardCharsets.UTF_8); // for UTF-8 encoding		String openApi = resource.openapiJson(request, "", Locale.US).block();
 		assertEquals(expected, openApi, true);
 	}
 

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app15/SpringDocApp15Test.java
Patch:
@@ -39,7 +39,7 @@
 
 
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
-		properties = { "management.endpoints.web.exposure.include:*",
+		properties = { "management.endpoints.web.exposure.include=*",
 				"springdoc.use-management-port=true",
 				"management.server.port=9294",
 				"management.server.base-path=/test",

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/api/MultipleOpenApiActuatorResource.java
Patch:
@@ -83,7 +83,7 @@ public MultipleOpenApiActuatorResource(List<GroupedOpenApi> groupedOpenApis, Obj
 	 */
 	@Operation(hidden = true)
 	@GetMapping(value = "/{group}", produces = MediaType.APPLICATION_JSON_VALUE)
-	public String openapiJson(HttpServletRequest request, @PathVariable String group, Locale locale)
+	public byte[] openapiJson(HttpServletRequest request, @PathVariable String group, Locale locale)
 			throws JsonProcessingException {
 		return getOpenApiResourceOrThrow(group).openapiJson(request, "" + DEFAULT_PATH_SEPARATOR + group, locale);
 	}
@@ -99,7 +99,7 @@ public String openapiJson(HttpServletRequest request, @PathVariable String group
 	 */
 	@Operation(hidden = true)
 	@GetMapping(value = "/{group}/yaml", produces = APPLICATION_OPENAPI_YAML)
-	public String openapiYaml(HttpServletRequest request, @PathVariable String group, Locale locale)
+	public byte[] openapiYaml(HttpServletRequest request, @PathVariable String group, Locale locale)
 			throws JsonProcessingException {
 		return getOpenApiResourceOrThrow(group).openapiYaml(request, "" + DEFAULT_PATH_SEPARATOR + group, locale);
 	}

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/api/MultipleOpenApiWebMvcResource.java
Patch:
@@ -83,7 +83,7 @@ public MultipleOpenApiWebMvcResource(List<GroupedOpenApi> groupedOpenApis, Objec
 	 */
 	@Operation(hidden = true)
 	@GetMapping(value = API_DOCS_URL + "/{group}", produces = MediaType.APPLICATION_JSON_VALUE)
-	public String openapiJson(HttpServletRequest request, @Value(API_DOCS_URL) String apiDocsUrl,
+	public byte[] openapiJson(HttpServletRequest request, @Value(API_DOCS_URL) String apiDocsUrl,
 			@PathVariable String group, Locale locale)
 			throws JsonProcessingException {
 		return getOpenApiResourceOrThrow(group).openapiJson(request, apiDocsUrl + DEFAULT_PATH_SEPARATOR + group, locale);
@@ -101,7 +101,7 @@ public String openapiJson(HttpServletRequest request, @Value(API_DOCS_URL) Strin
 	 */
 	@Operation(hidden = true)
 	@GetMapping(value = DEFAULT_API_DOCS_URL_YAML + "/{group}", produces = APPLICATION_OPENAPI_YAML)
-	public String openapiYaml(HttpServletRequest request, @Value(DEFAULT_API_DOCS_URL_YAML) String apiDocsUrl,
+	public byte[] openapiYaml(HttpServletRequest request, @Value(DEFAULT_API_DOCS_URL_YAML) String apiDocsUrl,
 			@PathVariable String group, Locale locale)
 			throws JsonProcessingException {
 		return getOpenApiResourceOrThrow(group).openapiYaml(request, apiDocsUrl + DEFAULT_PATH_SEPARATOR + group, locale);

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/api/OpenApiActuatorResource.java
Patch:
@@ -122,7 +122,7 @@ public OpenApiActuatorResource(String groupName, ObjectFactory<OpenAPIService> o
 	 */
 	@Operation(hidden = true)
 	@GetMapping(value = DEFAULT_PATH_SEPARATOR, produces = MediaType.APPLICATION_JSON_VALUE)
-	public String openapiJson(HttpServletRequest request, Locale locale)
+	public byte[] openapiJson(HttpServletRequest request, Locale locale)
 			throws JsonProcessingException {
 		return super.openapiJson(request, EMPTY, locale);
 	}
@@ -138,7 +138,7 @@ public String openapiJson(HttpServletRequest request, Locale locale)
 	 */
 	@Operation(hidden = true)
 	@GetMapping(value = DEFAULT_YAML_API_DOCS_ACTUATOR_PATH, produces = APPLICATION_OPENAPI_YAML)
-	public String openapiYaml(HttpServletRequest request, Locale locale)
+	public byte[] openapiYaml(HttpServletRequest request, Locale locale)
 			throws JsonProcessingException {
 		return super.openapiYaml(request, YAML, locale);
 	}

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -133,7 +133,7 @@ public OpenApiResource(ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory
 	 * @return the string
 	 * @throws JsonProcessingException the json processing exception
 	 */
-	public String openapiJson(HttpServletRequest request,
+	public byte[] openapiJson(HttpServletRequest request,
 			String apiDocsUrl, Locale locale)
 			throws JsonProcessingException {
 		calculateServerUrl(request, apiDocsUrl, locale);
@@ -150,7 +150,7 @@ public String openapiJson(HttpServletRequest request,
 	 * @return the string
 	 * @throws JsonProcessingException the json processing exception
 	 */
-	public String openapiYaml(HttpServletRequest request,
+	public byte[] openapiYaml(HttpServletRequest request,
 			String apiDocsUrl, Locale locale)
 			throws JsonProcessingException {
 		calculateServerUrl(request, apiDocsUrl, locale);

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/api/OpenApiWebMvcResource.java
Patch:
@@ -112,7 +112,7 @@ public OpenApiWebMvcResource(ObjectFactory<OpenAPIService> openAPIBuilderObjectF
 	@Operation(hidden = true)
 	@GetMapping(value = API_DOCS_URL, produces = MediaType.APPLICATION_JSON_VALUE)
 	@Override
-	public String openapiJson(HttpServletRequest request, @Value(API_DOCS_URL) String apiDocsUrl, Locale locale)
+	public byte[] openapiJson(HttpServletRequest request, @Value(API_DOCS_URL) String apiDocsUrl, Locale locale)
 			throws JsonProcessingException {
 		return super.openapiJson(request, apiDocsUrl, locale);
 	}
@@ -129,7 +129,7 @@ public String openapiJson(HttpServletRequest request, @Value(API_DOCS_URL) Strin
 	@Operation(hidden = true)
 	@GetMapping(value = DEFAULT_API_DOCS_URL_YAML, produces = APPLICATION_OPENAPI_YAML)
 	@Override
-	public String openapiYaml(HttpServletRequest request, @Value(DEFAULT_API_DOCS_URL_YAML) String apiDocsUrl, Locale locale)
+	public byte[] openapiYaml(HttpServletRequest request, @Value(DEFAULT_API_DOCS_URL_YAML) String apiDocsUrl, Locale locale)
 			throws JsonProcessingException {
 		return super.openapiYaml(request, apiDocsUrl, locale);
 	}

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app136/SpringDocApp136Test.java
Patch:
@@ -23,6 +23,7 @@
  */
 package test.org.springdoc.api.v30.app136;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.List;
@@ -68,7 +69,8 @@ public void shouldGenerateOperationIdsDeterministically() throws Exception {
 		when(request.getRequestURL()).thenReturn(new StringBuffer("http://localhost"));
 
 		String expected = getContent("results/3.0.1/app136.json");
-		String openApi = resource.openapiJson(request, "", Locale.getDefault());
+		byte[] openApiBytes = resource.openapiJson(request, "", Locale.getDefault());
+		String openApi = new String(openApiBytes, StandardCharsets.UTF_8); // for UTF-8 encoding		assertEquals(expected, openApi, true);
 		assertEquals(expected, openApi, true);
 	}
 

File: springdoc-openapi-tests/springdoc-openapi-groovy-tests/src/test/groovy/test/org/springdoc/api/app1/SpringDocApp1Test.java
Patch:
@@ -13,12 +13,12 @@
 public class SpringDocApp1Test extends AbstractSpringDocTest {
 	@BeforeAll
 	public static void init() {
-		SpringDocUtils.getConfig().removeRequestWrapperToIgnore(MetaClass.class);
+		SpringDocUtils.getConfig().removeJavaTypeToIgnore(MetaClass.class);
 	}
 
 	@AfterAll
 	public static void clean() {
-		SpringDocUtils.getConfig().addRequestWrapperToIgnore(MetaClass.class);
+		SpringDocUtils.getConfig().addJavaTypeToIgnore(MetaClass.class);
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-common/src/test/java/org/springdoc/api/AbstractOpenApiResourceTest.java
Patch:
@@ -166,11 +166,11 @@ void calculatePathFromRouterOperation() {
 		final RouterOperation routerOperation = new RouterOperation();
 		routerOperation.setMethods(new RequestMethod[] { GET });
 		routerOperation.setOperationModel(operation);
-		routerOperation.setPath(PATH);
+		routerOperation.setPath(PATH+"/{"+PARAMETER_WITH_NUMBER_SCHEMA_NAME+"}");
 
 		resource.calculatePath(routerOperation, Locale.getDefault(), this.openAPI);
 
-		final List<Parameter> parameters = resource.getOpenApi(Locale.getDefault()).getPaths().get(PATH).getGet().getParameters();
+		final List<Parameter> parameters = resource.getOpenApi(Locale.getDefault()).getPaths().get(PATH+"/{"+PARAMETER_WITH_NUMBER_SCHEMA_NAME+"}").getGet().getParameters();
 		assertThat(parameters.size(), is(3));
 		assertThat(parameters, containsInAnyOrder(refParameter, numberParameterInPath, parameterWithoutSchema));
 

File: springdoc-openapi-starter-webflux-api/src/test/java/test/org/springdoc/api/app70/CoffeeService.java
Patch:
@@ -26,9 +26,9 @@ Mono<Coffee> getCoffeeById(@Parameter(in = ParameterIn.PATH) String id) {
 		return repo.findById(id);
 	}
 
-	Flux<CoffeeOrder> getOrdersForCoffeeById(@Parameter(in = ParameterIn.PATH) String coffeeId) {
+	Flux<CoffeeOrder> getOrdersForCoffeeById(@Parameter(in = ParameterIn.PATH) String id) {
 		return Flux.interval(Duration.ofSeconds(1))
 				.onBackpressureDrop()
-				.map(i -> new CoffeeOrder(coffeeId, Instant.now()));
+				.map(i -> new CoffeeOrder(id, Instant.now()));
 	}
 }

File: springdoc-openapi-starter-webflux-api/src/test/java/test/org/springdoc/api/app83/CoffeeService.java
Patch:
@@ -26,9 +26,9 @@ Mono<Coffee> getCoffeeById(@Parameter(in = ParameterIn.PATH) String id) {
 		return repo.findById(id);
 	}
 
-	Flux<CoffeeOrder> getOrdersForCoffeeById(@Parameter(in = ParameterIn.PATH) String coffeeId) {
+	Flux<CoffeeOrder> getOrdersForCoffeeById(@Parameter(in = ParameterIn.PATH) String id) {
 		return Flux.interval(Duration.ofSeconds(1))
 				.onBackpressureDrop()
-				.map(i -> new CoffeeOrder(coffeeId, Instant.now()));
+				.map(i -> new CoffeeOrder(id, Instant.now()));
 	}
 }

File: springdoc-openapi-tests/springdoc-openapi-javadoc-tests/src/test/java/test/org/springdoc/api/app120/MetaAnnotationController.java
Patch:
@@ -64,7 +64,7 @@ String simpleTest(@PathVariable @AccountId String accountId) {
 	 * @param accountId the account id
 	 * @return the string
 	 */
-	@GetMapping(value = "/testTopLevelParamAnnotationOverrides/{accountId}")
+	@GetMapping(value = "/testTopLevelParamAnnotationOverrides/{id}")
 	String testTopLevelParamAnnotationOverrides(@PathVariable @AccountId @Parameter(name = "id") String accountId) {
 		return accountId;
 	}

File: springdoc-openapi-tests/springdoc-openapi-javadoc-tests/src/test/java/test/org/springdoc/api/app42/HelloController.java
Patch:
@@ -34,7 +34,7 @@ public class HelloController {
 	 *
 	 * @param id the id
 	 */
-	@GetMapping(value = "/tweets")
+	@GetMapping(value = "/tweets/{id}")
 	public void tweets(@PathVariable TweetId id) {
 
 	}

File: springdoc-openapi-tests/springdoc-openapi-javadoc-tests/src/test/java/test/org/springdoc/api/app51/HelloController.java
Patch:
@@ -87,7 +87,7 @@ public String test3(
 	 * @param params the params 
 	 * @return the string
 	 */
-	@GetMapping("/test")
+	@GetMapping("/test/{path}")
 	public String get(
 			@PathVariable String path,
 			@RequestParam(required = false) Map<String, String> params) {

File: springdoc-openapi-tests/springdoc-openapi-javadoc-tests/src/test/java/test/org/springdoc/api/app75/HelloController.java
Patch:
@@ -40,7 +40,7 @@ public class HelloController {
 	 *
 	 * @return the string
 	 */
-	@PostMapping("/test1")
+	@PostMapping("/test1/{uuid}")
 	@Operation(summary = "Example api that realize an ECHO operation",
 			description = "The result of the echo is the input value of the api",
 			parameters = { @Parameter(in = ParameterIn.PATH,
@@ -69,7 +69,7 @@ public String postMyRequestBody1() {
 	 *
 	 * @return the string
 	 */
-	@PostMapping("/test2")
+	@PostMapping("/test2/{uuid}")
 	@Operation(summary = "Example api that realize an ECHO operation",
 			description = "The result of the echo is the input value of the api",
 			responses = {
@@ -98,7 +98,7 @@ public String postMyRequestBody2() {
 	 *
 	 * @return the string
 	 */
-	@PostMapping("/test3")
+	@PostMapping("/test3/{uuid}")
 	@Operation(summary = "Example api that realize an ECHO operation",
 			description = "The result of the echo is the input value of the api",
 			parameters = { @Parameter(in = ParameterIn.PATH,

File: springdoc-openapi-tests/springdoc-openapi-javadoc-tests/src/test/java/test/org/springdoc/api/app89/HelloController.java
Patch:
@@ -39,7 +39,7 @@ public class HelloController {
 	 * @return the address
 	 */
 	@Operation(summary = "Get Status")
-	@GetMapping(value = "/status", produces = MediaType.TEXT_HTML_VALUE)
+	@GetMapping(value = "/status/{id}", produces = MediaType.TEXT_HTML_VALUE)
 	public ModelAndView getAddress(@PathVariable String id) {
 		return null;
 	}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocConfiguration.java
Patch:
@@ -61,6 +61,7 @@
 import org.springdoc.core.customizers.OpenApiBuilderCustomizer;
 import org.springdoc.core.customizers.PropertyCustomizer;
 import org.springdoc.core.customizers.ServerBaseUrlCustomizer;
+import org.springdoc.core.discoverer.SpringDocParameterNameDiscoverer;
 import org.springdoc.core.models.GroupedOpenApi;
 import org.springdoc.core.parsers.ReturnTypeParser;
 import org.springdoc.core.properties.SpringDocConfigProperties;
@@ -102,7 +103,6 @@
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
-import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
@@ -174,8 +174,8 @@ static BeanFactoryPostProcessor springdocBeanFactoryPostProcessor2() {
 	 */
 	@Bean
 	@Lazy(false)
-	StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer() {
-		return new StandardReflectionParameterNameDiscoverer();
+	SpringDocParameterNameDiscoverer localSpringDocParameterNameDiscoverer() {
+		return new SpringDocParameterNameDiscoverer();
 	}
 
 	/**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocDataRestConfiguration.java
Patch:
@@ -36,6 +36,7 @@
 import org.springdoc.core.data.DataRestResponseService;
 import org.springdoc.core.data.DataRestRouterOperationService;
 import org.springdoc.core.data.DataRestTagsService;
+import org.springdoc.core.discoverer.SpringDocParameterNameDiscoverer;
 import org.springdoc.core.properties.SpringDocConfigProperties;
 import org.springdoc.core.providers.DataRestHalProvider;
 import org.springdoc.core.providers.ObjectMapperProvider;
@@ -60,7 +61,6 @@
 import org.springframework.context.annotation.ImportRuntimeHints;
 import org.springframework.context.annotation.Lazy;
 import org.springframework.context.annotation.Primary;
-import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.data.domain.Sort;
 import org.springframework.data.mapping.context.PersistentEntities;
 import org.springframework.data.querydsl.binding.QuerydslBindingsFactory;
@@ -192,7 +192,7 @@ DataRestOperationService dataRestOperationBuilder(DataRestRequestService dataRes
 		@Bean
 		@ConditionalOnMissingBean
 		@Lazy(false)
-		DataRestRequestService dataRestRequestBuilder(StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
+		DataRestRequestService dataRestRequestBuilder(SpringDocParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
 				RequestBodyService requestBodyService, AbstractRequestService requestBuilder, SpringDocDataRestUtils springDocDataRestUtils) {
 			return new DataRestRequestService(localSpringDocParameterNameDiscoverer, parameterBuilder,
 					requestBodyService, requestBuilder, springDocDataRestUtils);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/data/DataRestRequestService.java
Patch:
@@ -41,6 +41,7 @@
 import io.swagger.v3.oas.models.media.StringSchema;
 import io.swagger.v3.oas.models.parameters.Parameter;
 import org.apache.commons.lang3.ArrayUtils;
+import org.springdoc.core.discoverer.SpringDocParameterNameDiscoverer;
 import org.springdoc.core.extractor.DelegatingMethodParameter;
 import org.springdoc.core.models.MethodAttributes;
 import org.springdoc.core.models.ParameterInfo;
@@ -52,7 +53,6 @@
 import org.springdoc.core.utils.SpringDocDataRestUtils;
 
 import org.springframework.core.MethodParameter;
-import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.data.rest.core.mapping.ResourceMetadata;
 import org.springframework.data.rest.webmvc.PersistentEntityResource;
@@ -72,7 +72,7 @@ public class DataRestRequestService {
 	/**
 	 * The Local spring doc parameter name discoverer.
 	 */
-	private final StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
+	private final SpringDocParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
 
 	/**
 	 * The Parameter builder.
@@ -103,7 +103,7 @@ public class DataRestRequestService {
 	 * @param requestBuilder the request builder
 	 * @param springDocDataRestUtils the spring doc data rest utils
 	 */
-	public DataRestRequestService(StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
+	public DataRestRequestService(SpringDocParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
 			RequestBodyService requestBodyService, AbstractRequestService requestBuilder, SpringDocDataRestUtils springDocDataRestUtils) {
 		this.localSpringDocParameterNameDiscoverer = localSpringDocParameterNameDiscoverer;
 		this.parameterBuilder = parameterBuilder;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/AbstractRequestService.java
Patch:
@@ -64,6 +64,7 @@
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.springdoc.core.customizers.ParameterCustomizer;
+import org.springdoc.core.discoverer.SpringDocParameterNameDiscoverer;
 import org.springdoc.core.extractor.DelegatingMethodParameter;
 import org.springdoc.core.models.MethodAttributes;
 import org.springdoc.core.models.ParameterId;
@@ -74,7 +75,6 @@
 import org.springdoc.core.utils.SpringDocAnnotationsUtils;
 
 import org.springframework.core.MethodParameter;
-import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.http.HttpMethod;
 import org.springframework.util.ClassUtils;
@@ -163,7 +163,7 @@ public abstract class AbstractRequestService {
 	/**
 	 * The Local spring doc parameter name discoverer.
 	 */
-	private final StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
+	private final SpringDocParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
 
 	/**
 	 * The Parameter customizers.
@@ -191,7 +191,7 @@ public abstract class AbstractRequestService {
 	 */
 	protected AbstractRequestService(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			SpringDocParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		super();
 		this.parameterBuilder = parameterBuilder;
 		this.requestBodyService = requestBodyService;

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/core/configuration/SpringDocWebFluxConfiguration.java
Patch:
@@ -32,6 +32,7 @@
 import org.springdoc.core.customizers.OperationCustomizer;
 import org.springdoc.core.customizers.ParameterCustomizer;
 import org.springdoc.core.customizers.RouterOperationCustomizer;
+import org.springdoc.core.discoverer.SpringDocParameterNameDiscoverer;
 import org.springdoc.core.filters.OpenApiMethodFilter;
 import org.springdoc.core.parsers.ReturnTypeParser;
 import org.springdoc.core.properties.SpringDocConfigProperties;
@@ -68,7 +69,6 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
-import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 
 import static org.springdoc.core.utils.Constants.SPRINGDOC_ENABLED;
 import static org.springdoc.core.utils.Constants.SPRINGDOC_USE_MANAGEMENT_PORT;
@@ -132,7 +132,7 @@ OpenApiWebfluxResource openApiResource(ObjectFactory<OpenAPIService> openAPIBuil
 	RequestService requestBuilder(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService,
 			Optional<List<ParameterCustomizer>> parameterCustomizers,
-			StandardReflectionParameterNameDiscoverer  localSpringDocParameterNameDiscoverer) {
+			SpringDocParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		return new RequestService(parameterBuilder, requestBodyService,
 				operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/core/service/RequestService.java
Patch:
@@ -28,12 +28,12 @@
 import java.util.Optional;
 
 import org.springdoc.core.customizers.ParameterCustomizer;
+import org.springdoc.core.discoverer.SpringDocParameterNameDiscoverer;
 import org.springdoc.core.service.AbstractRequestService;
 import org.springdoc.core.service.GenericParameterService;
 import org.springdoc.core.service.OperationService;
 import org.springdoc.core.service.RequestBodyService;
 
-import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.http.codec.multipart.FilePart;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.http.server.reactive.ServerHttpResponse;
@@ -66,7 +66,7 @@ public class RequestService extends AbstractRequestService {
 	 */
 	public RequestService(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			SpringDocParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		super(parameterBuilder, requestBodyService, operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}
 }

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/core/configuration/SpringDocWebMvcConfiguration.java
Patch:
@@ -32,6 +32,7 @@
 import org.springdoc.core.customizers.OperationCustomizer;
 import org.springdoc.core.customizers.ParameterCustomizer;
 import org.springdoc.core.customizers.RouterOperationCustomizer;
+import org.springdoc.core.discoverer.SpringDocParameterNameDiscoverer;
 import org.springdoc.core.filters.OpenApiMethodFilter;
 import org.springdoc.core.parsers.ReturnTypeParser;
 import org.springdoc.core.properties.SpringDocConfigProperties;
@@ -69,7 +70,6 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
-import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.web.servlet.ModelAndView;
 import org.springframework.web.servlet.function.RouterFunction;
 import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
@@ -141,7 +141,7 @@ OpenApiWebMvcResource openApiResource(ObjectFactory<OpenAPIService> openAPIBuild
 	@Lazy(false)
 	RequestService requestBuilder(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			SpringDocParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		return new RequestService(parameterBuilder, requestBodyService,
 				operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/core/service/RequestService.java
Patch:
@@ -28,13 +28,12 @@
 import java.util.Optional;
 
 import org.springdoc.core.customizers.ParameterCustomizer;
+import org.springdoc.core.discoverer.SpringDocParameterNameDiscoverer;
 import org.springdoc.core.service.AbstractRequestService;
 import org.springdoc.core.service.GenericParameterService;
 import org.springdoc.core.service.OperationService;
 import org.springdoc.core.service.RequestBodyService;
 
-import org.springframework.core.StandardReflectionParameterNameDiscoverer;
-
 import static org.springdoc.core.utils.SpringDocUtils.getConfig;
 
 /**
@@ -63,7 +62,7 @@ public class RequestService extends AbstractRequestService {
 	 */
 	public RequestService(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			SpringDocParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		super(parameterBuilder, requestBodyService, operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}
 }

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/data/DataRestOperationService.java
Patch:
@@ -239,7 +239,7 @@ private Type getParameterType(String pName, Method method, ResourceDescription d
 		java.lang.reflect.Parameter[] parameters = method.getParameters();
 		for (int i = 0; i < parameters.length; i++) {
 			java.lang.reflect.Parameter parameter = parameters[i];
-			if (pName.equals(parameter.getName()) || pName.equals(parameter.getAnnotation(Param.class).value())) {
+			if (pName.equals(parameter.getName()) || (parameter.getAnnotation(Param.class)!=null && pName.equals(parameter.getAnnotation(Param.class).value()))) {
 				ResolvableType resolvableType = ResolvableType.forMethodParameter(method, i);
 				type = resolvableType.getType();
 				break;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocKotlinConfiguration.java
Patch:
@@ -56,12 +56,10 @@ public class SpringDocKotlinConfiguration {
 	/**
 	 * Instantiates a new Spring doc kotlin configuration.
 	 *
-	 * @param objectMapperProvider the object mapper provider
 	 */
-	public SpringDocKotlinConfiguration(ObjectMapperProvider objectMapperProvider) {
+	public SpringDocKotlinConfiguration() {
 		getConfig().addRequestWrapperToIgnore(Continuation.class)
 				.addDeprecatedType(Deprecated.class);
-		objectMapperProvider.jsonMapper().registerModule(new KotlinModule());
 	}
 
 	/**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configurer/SpringdocBeanFactoryConfigurer.java
Patch:
@@ -62,9 +62,9 @@ public class SpringdocBeanFactoryConfigurer implements EnvironmentAware, BeanFac
 	 * @param beanFactory the bean factory
 	 */
 	public static void initBeanFactoryPostProcessor(ConfigurableListableBeanFactory beanFactory) {
-		for (String beanName : beanFactory.getBeanNamesForType(OpenAPIService.class))
+		for (String beanName : beanFactory.getBeanNamesForType(OpenAPIService.class, true, false))
 			beanFactory.getBeanDefinition(beanName).setScope(SCOPE_PROTOTYPE);
-		for (String beanName : beanFactory.getBeanNamesForType(OpenAPI.class))
+		for (String beanName : beanFactory.getBeanNamesForType(OpenAPI.class, true, false))
 			beanFactory.getBeanDefinition(beanName).setScope(SCOPE_PROTOTYPE);
 	}
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocConfiguration.java
Patch:
@@ -102,7 +102,7 @@
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
-import org.springframework.core.DefaultParameterNameDiscoverer;
+import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
@@ -174,8 +174,8 @@ static BeanFactoryPostProcessor springdocBeanFactoryPostProcessor2() {
 	 */
 	@Bean
 	@Lazy(false)
-	DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer() {
-		return new DefaultParameterNameDiscoverer();
+	StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer() {
+		return new StandardReflectionParameterNameDiscoverer();
 	}
 
 	/**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocDataRestConfiguration.java
Patch:
@@ -60,7 +60,7 @@
 import org.springframework.context.annotation.ImportRuntimeHints;
 import org.springframework.context.annotation.Lazy;
 import org.springframework.context.annotation.Primary;
-import org.springframework.core.DefaultParameterNameDiscoverer;
+import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.data.domain.Sort;
 import org.springframework.data.mapping.context.PersistentEntities;
 import org.springframework.data.querydsl.binding.QuerydslBindingsFactory;
@@ -192,7 +192,7 @@ DataRestOperationService dataRestOperationBuilder(DataRestRequestService dataRes
 		@Bean
 		@ConditionalOnMissingBean
 		@Lazy(false)
-		DataRestRequestService dataRestRequestBuilder(DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
+		DataRestRequestService dataRestRequestBuilder(StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
 				RequestBodyService requestBodyService, AbstractRequestService requestBuilder, SpringDocDataRestUtils springDocDataRestUtils) {
 			return new DataRestRequestService(localSpringDocParameterNameDiscoverer, parameterBuilder,
 					requestBodyService, requestBuilder, springDocDataRestUtils);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/data/DataRestRequestService.java
Patch:
@@ -51,8 +51,8 @@
 import org.springdoc.core.utils.SpringDocAnnotationsUtils;
 import org.springdoc.core.utils.SpringDocDataRestUtils;
 
-import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.core.MethodParameter;
+import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.data.rest.core.mapping.ResourceMetadata;
 import org.springframework.data.rest.webmvc.PersistentEntityResource;
@@ -72,7 +72,7 @@ public class DataRestRequestService {
 	/**
 	 * The Local spring doc parameter name discoverer.
 	 */
-	private final DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
+	private final StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
 
 	/**
 	 * The Parameter builder.
@@ -103,7 +103,7 @@ public class DataRestRequestService {
 	 * @param requestBuilder the request builder
 	 * @param springDocDataRestUtils the spring doc data rest utils
 	 */
-	public DataRestRequestService(DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
+	public DataRestRequestService(StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
 			RequestBodyService requestBodyService, AbstractRequestService requestBuilder, SpringDocDataRestUtils springDocDataRestUtils) {
 		this.localSpringDocParameterNameDiscoverer = localSpringDocParameterNameDiscoverer;
 		this.parameterBuilder = parameterBuilder;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/AbstractRequestService.java
Patch:
@@ -73,8 +73,8 @@
 import org.springdoc.core.providers.JavadocProvider;
 import org.springdoc.core.utils.SpringDocAnnotationsUtils;
 
-import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.core.MethodParameter;
+import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.http.HttpMethod;
 import org.springframework.util.ClassUtils;
@@ -163,7 +163,7 @@ public abstract class AbstractRequestService {
 	/**
 	 * The Local spring doc parameter name discoverer.
 	 */
-	private final DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
+	private final StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
 
 	/**
 	 * The Parameter customizers.
@@ -191,7 +191,7 @@ public abstract class AbstractRequestService {
 	 */
 	protected AbstractRequestService(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		super();
 		this.parameterBuilder = parameterBuilder;
 		this.requestBodyService = requestBodyService;

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/core/configuration/SpringDocWebFluxConfiguration.java
Patch:
@@ -68,7 +68,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
-import org.springframework.core.DefaultParameterNameDiscoverer;
+import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 
 import static org.springdoc.core.utils.Constants.SPRINGDOC_ENABLED;
 import static org.springdoc.core.utils.Constants.SPRINGDOC_USE_MANAGEMENT_PORT;
@@ -132,7 +132,7 @@ OpenApiWebfluxResource openApiResource(ObjectFactory<OpenAPIService> openAPIBuil
 	RequestService requestBuilder(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService,
 			Optional<List<ParameterCustomizer>> parameterCustomizers,
-			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			StandardReflectionParameterNameDiscoverer  localSpringDocParameterNameDiscoverer) {
 		return new RequestService(parameterBuilder, requestBodyService,
 				operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/core/service/RequestService.java
Patch:
@@ -33,7 +33,7 @@
 import org.springdoc.core.service.OperationService;
 import org.springdoc.core.service.RequestBodyService;
 
-import org.springframework.core.DefaultParameterNameDiscoverer;
+import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.http.codec.multipart.FilePart;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.http.server.reactive.ServerHttpResponse;
@@ -66,7 +66,7 @@ public class RequestService extends AbstractRequestService {
 	 */
 	public RequestService(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		super(parameterBuilder, requestBodyService, operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}
 }

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/core/configuration/SpringDocWebMvcConfiguration.java
Patch:
@@ -69,7 +69,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
-import org.springframework.core.DefaultParameterNameDiscoverer;
+import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 import org.springframework.web.servlet.ModelAndView;
 import org.springframework.web.servlet.function.RouterFunction;
 import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
@@ -141,7 +141,7 @@ OpenApiWebMvcResource openApiResource(ObjectFactory<OpenAPIService> openAPIBuild
 	@Lazy(false)
 	RequestService requestBuilder(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		return new RequestService(parameterBuilder, requestBodyService,
 				operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/core/service/RequestService.java
Patch:
@@ -33,7 +33,7 @@
 import org.springdoc.core.service.OperationService;
 import org.springdoc.core.service.RequestBodyService;
 
-import org.springframework.core.DefaultParameterNameDiscoverer;
+import org.springframework.core.StandardReflectionParameterNameDiscoverer;
 
 import static org.springdoc.core.utils.SpringDocUtils.getConfig;
 
@@ -63,7 +63,7 @@ public class RequestService extends AbstractRequestService {
 	 */
 	public RequestService(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			StandardReflectionParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		super(parameterBuilder, requestBodyService, operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}
 }

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocConfiguration.java
Patch:
@@ -102,7 +102,7 @@
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
@@ -174,8 +174,8 @@ static BeanFactoryPostProcessor springdocBeanFactoryPostProcessor2() {
 	 */
 	@Bean
 	@Lazy(false)
-	LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer() {
-		return new LocalVariableTableParameterNameDiscoverer();
+	DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer() {
+		return new DefaultParameterNameDiscoverer();
 	}
 
 	/**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocDataRestConfiguration.java
Patch:
@@ -60,7 +60,7 @@
 import org.springframework.context.annotation.ImportRuntimeHints;
 import org.springframework.context.annotation.Lazy;
 import org.springframework.context.annotation.Primary;
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.data.domain.Sort;
 import org.springframework.data.mapping.context.PersistentEntities;
 import org.springframework.data.querydsl.binding.QuerydslBindingsFactory;
@@ -192,7 +192,7 @@ DataRestOperationService dataRestOperationBuilder(DataRestRequestService dataRes
 		@Bean
 		@ConditionalOnMissingBean
 		@Lazy(false)
-		DataRestRequestService dataRestRequestBuilder(LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
+		DataRestRequestService dataRestRequestBuilder(DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
 				RequestBodyService requestBodyService, AbstractRequestService requestBuilder, SpringDocDataRestUtils springDocDataRestUtils) {
 			return new DataRestRequestService(localSpringDocParameterNameDiscoverer, parameterBuilder,
 					requestBodyService, requestBuilder, springDocDataRestUtils);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/data/DataRestRequestService.java
Patch:
@@ -51,7 +51,7 @@
 import org.springdoc.core.utils.SpringDocAnnotationsUtils;
 import org.springdoc.core.utils.SpringDocDataRestUtils;
 
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.data.rest.core.mapping.ResourceMetadata;
@@ -72,7 +72,7 @@ public class DataRestRequestService {
 	/**
 	 * The Local spring doc parameter name discoverer.
 	 */
-	private final LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
+	private final DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
 
 	/**
 	 * The Parameter builder.
@@ -103,7 +103,7 @@ public class DataRestRequestService {
 	 * @param requestBuilder the request builder
 	 * @param springDocDataRestUtils the spring doc data rest utils
 	 */
-	public DataRestRequestService(LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
+	public DataRestRequestService(DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
 			RequestBodyService requestBodyService, AbstractRequestService requestBuilder, SpringDocDataRestUtils springDocDataRestUtils) {
 		this.localSpringDocParameterNameDiscoverer = localSpringDocParameterNameDiscoverer;
 		this.parameterBuilder = parameterBuilder;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/AbstractRequestService.java
Patch:
@@ -73,7 +73,7 @@
 import org.springdoc.core.providers.JavadocProvider;
 import org.springdoc.core.utils.SpringDocAnnotationsUtils;
 
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.http.HttpMethod;
@@ -163,7 +163,7 @@ public abstract class AbstractRequestService {
 	/**
 	 * The Local spring doc parameter name discoverer.
 	 */
-	private final LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
+	private final DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
 
 	/**
 	 * The Parameter customizers.
@@ -191,7 +191,7 @@ public abstract class AbstractRequestService {
 	 */
 	protected AbstractRequestService(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		super();
 		this.parameterBuilder = parameterBuilder;
 		this.requestBodyService = requestBodyService;

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/core/configuration/SpringDocWebFluxConfiguration.java
Patch:
@@ -68,7 +68,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 
 import static org.springdoc.core.utils.Constants.SPRINGDOC_ENABLED;
 import static org.springdoc.core.utils.Constants.SPRINGDOC_USE_MANAGEMENT_PORT;
@@ -132,7 +132,7 @@ OpenApiWebfluxResource openApiResource(ObjectFactory<OpenAPIService> openAPIBuil
 	RequestService requestBuilder(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService,
 			Optional<List<ParameterCustomizer>> parameterCustomizers,
-			LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		return new RequestService(parameterBuilder, requestBodyService,
 				operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/core/service/RequestService.java
Patch:
@@ -33,7 +33,7 @@
 import org.springdoc.core.service.OperationService;
 import org.springdoc.core.service.RequestBodyService;
 
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.http.codec.multipart.FilePart;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.http.server.reactive.ServerHttpResponse;
@@ -66,7 +66,7 @@ public class RequestService extends AbstractRequestService {
 	 */
 	public RequestService(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		super(parameterBuilder, requestBodyService, operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}
 }

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/core/configuration/SpringDocWebMvcConfiguration.java
Patch:
@@ -69,7 +69,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.web.servlet.ModelAndView;
 import org.springframework.web.servlet.function.RouterFunction;
 import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
@@ -141,7 +141,7 @@ OpenApiWebMvcResource openApiResource(ObjectFactory<OpenAPIService> openAPIBuild
 	@Lazy(false)
 	RequestService requestBuilder(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		return new RequestService(parameterBuilder, requestBodyService,
 				operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/core/service/RequestService.java
Patch:
@@ -33,7 +33,7 @@
 import org.springdoc.core.service.OperationService;
 import org.springdoc.core.service.RequestBodyService;
 
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 
 import static org.springdoc.core.utils.SpringDocUtils.getConfig;
 
@@ -63,7 +63,7 @@ public class RequestService extends AbstractRequestService {
 	 */
 	public RequestService(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		super(parameterBuilder, requestBodyService, operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}
 }

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocConfiguration.java
Patch:
@@ -102,7 +102,7 @@
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
@@ -174,8 +174,8 @@ static BeanFactoryPostProcessor springdocBeanFactoryPostProcessor2() {
 	 */
 	@Bean
 	@Lazy(false)
-	LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer() {
-		return new LocalVariableTableParameterNameDiscoverer();
+	DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer() {
+		return new DefaultParameterNameDiscoverer();
 	}
 
 	/**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocDataRestConfiguration.java
Patch:
@@ -60,7 +60,7 @@
 import org.springframework.context.annotation.ImportRuntimeHints;
 import org.springframework.context.annotation.Lazy;
 import org.springframework.context.annotation.Primary;
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.data.domain.Sort;
 import org.springframework.data.mapping.context.PersistentEntities;
 import org.springframework.data.querydsl.binding.QuerydslBindingsFactory;
@@ -192,7 +192,7 @@ DataRestOperationService dataRestOperationBuilder(DataRestRequestService dataRes
 		@Bean
 		@ConditionalOnMissingBean
 		@Lazy(false)
-		DataRestRequestService dataRestRequestBuilder(LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
+		DataRestRequestService dataRestRequestBuilder(DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
 				RequestBodyService requestBodyService, AbstractRequestService requestBuilder, SpringDocDataRestUtils springDocDataRestUtils) {
 			return new DataRestRequestService(localSpringDocParameterNameDiscoverer, parameterBuilder,
 					requestBodyService, requestBuilder, springDocDataRestUtils);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/data/DataRestRequestService.java
Patch:
@@ -51,7 +51,7 @@
 import org.springdoc.core.utils.SpringDocAnnotationsUtils;
 import org.springdoc.core.utils.SpringDocDataRestUtils;
 
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.data.rest.core.mapping.ResourceMetadata;
@@ -72,7 +72,7 @@ public class DataRestRequestService {
 	/**
 	 * The Local spring doc parameter name discoverer.
 	 */
-	private final LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
+	private final DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
 
 	/**
 	 * The Parameter builder.
@@ -103,7 +103,7 @@ public class DataRestRequestService {
 	 * @param requestBuilder the request builder
 	 * @param springDocDataRestUtils the spring doc data rest utils
 	 */
-	public DataRestRequestService(LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
+	public DataRestRequestService(DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer, GenericParameterService parameterBuilder,
 			RequestBodyService requestBodyService, AbstractRequestService requestBuilder, SpringDocDataRestUtils springDocDataRestUtils) {
 		this.localSpringDocParameterNameDiscoverer = localSpringDocParameterNameDiscoverer;
 		this.parameterBuilder = parameterBuilder;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/AbstractRequestService.java
Patch:
@@ -73,7 +73,7 @@
 import org.springdoc.core.providers.JavadocProvider;
 import org.springdoc.core.utils.SpringDocAnnotationsUtils;
 
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.http.HttpMethod;
@@ -163,7 +163,7 @@ public abstract class AbstractRequestService {
 	/**
 	 * The Local spring doc parameter name discoverer.
 	 */
-	private final LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
+	private final DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer;
 
 	/**
 	 * The Parameter customizers.
@@ -191,7 +191,7 @@ public abstract class AbstractRequestService {
 	 */
 	protected AbstractRequestService(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		super();
 		this.parameterBuilder = parameterBuilder;
 		this.requestBodyService = requestBodyService;

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/core/configuration/SpringDocWebFluxConfiguration.java
Patch:
@@ -68,7 +68,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 
 import static org.springdoc.core.utils.Constants.SPRINGDOC_ENABLED;
 import static org.springdoc.core.utils.Constants.SPRINGDOC_USE_MANAGEMENT_PORT;
@@ -132,7 +132,7 @@ OpenApiWebfluxResource openApiResource(ObjectFactory<OpenAPIService> openAPIBuil
 	RequestService requestBuilder(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService,
 			Optional<List<ParameterCustomizer>> parameterCustomizers,
-			LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		return new RequestService(parameterBuilder, requestBodyService,
 				operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/core/service/RequestService.java
Patch:
@@ -33,7 +33,7 @@
 import org.springdoc.core.service.OperationService;
 import org.springdoc.core.service.RequestBodyService;
 
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.http.codec.multipart.FilePart;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.http.server.reactive.ServerHttpResponse;
@@ -66,7 +66,7 @@ public class RequestService extends AbstractRequestService {
 	 */
 	public RequestService(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		super(parameterBuilder, requestBodyService, operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}
 }

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/core/configuration/SpringDocWebMvcConfiguration.java
Patch:
@@ -69,7 +69,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Lazy;
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 import org.springframework.web.servlet.ModelAndView;
 import org.springframework.web.servlet.function.RouterFunction;
 import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
@@ -141,7 +141,7 @@ OpenApiWebMvcResource openApiResource(ObjectFactory<OpenAPIService> openAPIBuild
 	@Lazy(false)
 	RequestService requestBuilder(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		return new RequestService(parameterBuilder, requestBodyService,
 				operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/core/service/RequestService.java
Patch:
@@ -33,7 +33,7 @@
 import org.springdoc.core.service.OperationService;
 import org.springdoc.core.service.RequestBodyService;
 
-import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
+import org.springframework.core.DefaultParameterNameDiscoverer;
 
 import static org.springdoc.core.utils.SpringDocUtils.getConfig;
 
@@ -63,7 +63,7 @@ public class RequestService extends AbstractRequestService {
 	 */
 	public RequestService(GenericParameterService parameterBuilder, RequestBodyService requestBodyService,
 			OperationService operationService, Optional<List<ParameterCustomizer>> parameterCustomizers,
-			LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
+			DefaultParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
 		super(parameterBuilder, requestBodyService, operationService, parameterCustomizers, localSpringDocParameterNameDiscoverer);
 	}
 }

File: springdoc-openapi-starter-webmvc-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWebMvcConfigurer.java
Patch:
@@ -51,9 +51,9 @@
 
 import static org.springdoc.core.utils.Constants.CLASSPATH_RESOURCE_LOCATION;
 import static org.springdoc.core.utils.Constants.DEFAULT_WEB_JARS_PREFIX_URL;
+import static org.springdoc.core.utils.Constants.SWAGGER_INITIALIZER_JS;
 import static org.springdoc.core.utils.Constants.SWAGGER_UI_PREFIX;
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
-import static org.springdoc.core.utils.Constants.SWAGGER_INITIALIZER_JS;
 /**
  * The type Swagger web mvc configurer.
  * @author bnasslahsen

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/properties/SwaggerUiOAuthProperties.java
Patch:
@@ -87,7 +87,7 @@ public class SwaggerUiOAuthProperties {
 	/**
 	 * The Use basic authentication with access code grant.
 	 */
-	private String useBasicAuthenticationWithAccessCodeGrant;
+	private Boolean useBasicAuthenticationWithAccessCodeGrant;
 
 	/**
 	 * The Use pkce with authorization code grant.
@@ -233,7 +233,7 @@ public void setAdditionalQueryStringParams(Map<String, String> additionalQuerySt
 	 *
 	 * @return the use basic authentication with access code grant
 	 */
-	public String getUseBasicAuthenticationWithAccessCodeGrant() {
+	public Boolean getUseBasicAuthenticationWithAccessCodeGrant() {
 		return useBasicAuthenticationWithAccessCodeGrant;
 	}
 
@@ -242,7 +242,7 @@ public String getUseBasicAuthenticationWithAccessCodeGrant() {
 	 *
 	 * @param useBasicAuthenticationWithAccessCodeGrant the use basic authentication with access code grant
 	 */
-	public void setUseBasicAuthenticationWithAccessCodeGrant(String useBasicAuthenticationWithAccessCodeGrant) {
+	public void setUseBasicAuthenticationWithAccessCodeGrant(Boolean useBasicAuthenticationWithAccessCodeGrant) {
 		this.useBasicAuthenticationWithAccessCodeGrant = useBasicAuthenticationWithAccessCodeGrant;
 	}
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericParameterService.java
Patch:
@@ -200,7 +200,7 @@ public static Parameter mergeParameter(List<Parameter> existingParamDoc, Paramet
 	 * @param paramCalcul the param calcul
 	 * @param paramDoc the param doc
 	 */
-	private static void mergeParameter(Parameter paramCalcul, Parameter paramDoc) {
+	public static void mergeParameter(Parameter paramCalcul, Parameter paramDoc) {
 		if (StringUtils.isBlank(paramDoc.getDescription()))
 			paramDoc.setDescription(paramCalcul.getDescription());
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -1265,7 +1265,7 @@ protected boolean isActuatorRestController(String operationPath, HandlerMethod h
 		boolean isActuatorRestController = false;
 		if (actuatorProviderOptional.isPresent())
 			isActuatorRestController = actuatorProviderOptional.get().isRestController(operationPath, handlerMethod);
-		return springDocConfigProperties.isShowActuator() && isActuatorRestController;
+		return springDocConfigProperties.isShowActuator() && isActuatorRestController && (modelAndViewClass == null || !modelAndViewClass.isAssignableFrom(handlerMethod.getMethod().getReturnType()));
 	}
 
 	/**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/extractor/MethodParameterPojoExtractor.java
Patch:
@@ -181,7 +181,9 @@ private static Stream<MethodParameter> fromSimpleClass(Class<?> paramClass, Fiel
 			boolean isNotRequired = parameter == null || !parameter.required();
 			Annotation[] finalFieldAnnotations = fieldAnnotations;
 			if (paramClass.isRecord()) {
-				return Stream.of( paramClass.getRecordComponents()).map(recordComponent -> recordComponent.getAccessor())
+				return Stream.of(paramClass.getRecordComponents())
+						.filter(d -> d.getName().equals(field.getName()))
+						.map(recordComponent -> recordComponent.getAccessor())
 						.map(method -> new MethodParameter(method, -1))
 						.map(methodParameter -> DelegatingMethodParameter.changeContainingClass(methodParameter, paramClass))
 						.map(param -> new DelegatingMethodParameter(param, fieldNamePrefix + field.getName(), finalFieldAnnotations, true, isNotRequired));

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/extractor/MethodParameterPojoExtractor.java
Patch:
@@ -181,7 +181,9 @@ private static Stream<MethodParameter> fromSimpleClass(Class<?> paramClass, Fiel
 			boolean isNotRequired = parameter == null || !parameter.required();
 			Annotation[] finalFieldAnnotations = fieldAnnotations;
 			if (paramClass.isRecord()) {
-				return Stream.of( paramClass.getRecordComponents()).map(recordComponent -> recordComponent.getAccessor())
+				return Stream.of(paramClass.getRecordComponents())
+						.filter(d -> d.getName().equals(field.getName()))
+						.map(recordComponent -> recordComponent.getAccessor())
 						.map(method -> new MethodParameter(method, -1))
 						.map(methodParameter -> DelegatingMethodParameter.changeContainingClass(methodParameter, paramClass))
 						.map(param -> new DelegatingMethodParameter(param, fieldNamePrefix + field.getName(), finalFieldAnnotations, true, isNotRequired));

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/OpenAPIService.java
Patch:
@@ -290,7 +290,6 @@ private void initializeHiddenRestController() {
 	 * Update servers open api.
 	 *
 	 * @param openAPI the open api
-	 * @return the open api
 	 */
 	public void updateServers(OpenAPI openAPI) {
 		if (!isServersPresent && serverBaseUrl != null)        // default server value

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/parsers/ReturnTypeParser.java
Patch:
@@ -153,7 +153,7 @@ static void findTypeForGenerics(Class<?>[] generics, Type[] typeArguments, Resol
 	 */
 	static ResolvableType resolveVariable(TypeVariable<?> typeVariable, ResolvableType contextType) {
 		ResolvableType resolvedType;
-		if (contextType.hasGenerics() && contextType.getRawClass().equals(typeVariable.getGenericDeclaration())) {
+		if (contextType.hasGenerics() && Objects.equals(contextType.getRawClass(), typeVariable.getGenericDeclaration())) {
 			resolvedType = ResolvableType.forType(typeVariable, contextType);
 			if (resolvedType.resolve() != null) {
 				return resolvedType;

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/parsers/ReturnTypeParser.java
Patch:
@@ -153,7 +153,7 @@ static void findTypeForGenerics(Class<?>[] generics, Type[] typeArguments, Resol
 	 */
 	static ResolvableType resolveVariable(TypeVariable<?> typeVariable, ResolvableType contextType) {
 		ResolvableType resolvedType;
-		if (contextType.hasGenerics()) {
+		if (contextType.hasGenerics() && contextType.getRawClass().equals(typeVariable.getGenericDeclaration())) {
 			resolvedType = ResolvableType.forType(typeVariable, contextType);
 			if (resolvedType.resolve() != null) {
 				return resolvedType;

File: springdoc-openapi-starter-webmvc-api/src/test/java/test/org/springdoc/api/v30/app59/HelloExceptionHandler.java
Patch:
@@ -30,6 +30,7 @@
 import org.springframework.core.annotation.Order;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
+import org.springframework.http.HttpStatusCode;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.MethodArgumentNotValidException;
 import org.springframework.web.bind.annotation.ExceptionHandler;
@@ -55,7 +56,8 @@ protected ResponseEntity<Object> handleException() {
 	@ApiResponse(responseCode = "400",
 			description = "The request is malformed or information is missing."
 	)
-	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {
+	protected ResponseEntity<Object> handleMethodArgumentNotValid(
+			MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) {
 		return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
 	}
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/GenericParameterService.java
Patch:
@@ -340,7 +340,7 @@ Schema calculateSchema(Components components, ParameterInfo parameterInfo, Reque
 			Type type = ReturnTypeParser.getType(methodParameter);
 			if(type instanceof Class clazz && optionalWebConversionServiceProvider.isPresent()){
 				WebConversionServiceProvider webConversionServiceProvider = optionalWebConversionServiceProvider.get();
-				if (!MethodParameterPojoExtractor.isSwaggerPrimitiveType(clazz))
+				if (!MethodParameterPojoExtractor.isSwaggerPrimitiveType((Class) type) && methodParameter.getParameterType().getAnnotation(io.swagger.v3.oas.annotations.media.Schema.class)==null)
 					type = webConversionServiceProvider.getSpringConvertedType(methodParameter.getParameterType());
 			}
 			schemaN = SpringDocAnnotationsUtils.extractSchema(components, type, jsonView, methodParameter.getParameterAnnotations());

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configurer/SpringdocActuatorBeanFactoryConfigurer.java
Patch:
@@ -80,8 +80,6 @@ public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
 			GroupedOpenApi actuatorGroup = GroupedOpenApi.builder().group(ACTUATOR_DEFAULT_GROUP)
 					.pathsToMatch(webEndpointProperties.getBasePath() + ALL_PATTERN)
 					.pathsToExclude(webEndpointProperties.getBasePath() + HEALTH_PATTERN)
-					.addOperationCustomizer(actuatorCustomizer)
-					.addOpenApiCustomizer(actuatorOpenApiCustomizer)
 					.build();
 			// Add the actuator group
 			newGroups.add(actuatorGroup);

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/configuration/SpringDocHints.java
Patch:
@@ -297,7 +297,8 @@
 		io.swagger.v3.oas.models.links.Link.class,
 		io.swagger.v3.oas.models.parameters.Parameter.class,
 		io.swagger.v3.oas.models.Operation.class,
-		io.swagger.v3.oas.models.headers.Header.class
+		io.swagger.v3.oas.models.headers.Header.class,
+		org.springframework.core.MethodParameter.class
 }, access = { TypeAccess.RESOURCE, TypeAccess.PUBLIC_CLASSES, TypeAccess.DECLARED_CLASSES, TypeAccess.DECLARED_CONSTRUCTORS, TypeAccess.PUBLIC_CONSTRUCTORS, TypeAccess.DECLARED_METHODS, TypeAccess.PUBLIC_METHODS
 		, TypeAccess.PUBLIC_FIELDS, TypeAccess.DECLARED_FIELDS })
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/properties/SwaggerUiConfigProperties.java
Patch:
@@ -432,7 +432,7 @@ public void setSyntaxHighlight(SyntaxHighlight syntaxHighlight) {
 	 * @return the set
 	 */
 	public Set<SwaggerUrl> cloneUrls(){
-		return this.urls.stream().map(swaggerUrl -> new SwaggerUrl(swaggerUrl.getName(), swaggerUrl.getUrl())).collect(Collectors.toSet());
+		return this.urls.stream().map(swaggerUrl -> new SwaggerUrl(swaggerUrl.getName(), swaggerUrl.getUrl(), swaggerUrl.getDisplayName())).collect(Collectors.toSet());
 	}
 
 }
\ No newline at end of file

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/ui/AbstractSwaggerWelcome.java
Patch:
@@ -88,7 +88,7 @@ public AbstractSwaggerWelcome(SwaggerUiConfigProperties swaggerUiConfig, SpringD
 	}
 
 	protected void init() {
-		springDocConfigProperties.getGroupConfigs().forEach(groupConfig -> swaggerUiConfigParameters.addGroup(groupConfig.getGroup()));
+		springDocConfigProperties.getGroupConfigs().forEach(groupConfig -> swaggerUiConfigParameters.addGroup(groupConfig.getGroup(), groupConfig.getDisplayName()));
 		calculateUiRootPath();
 	}
 

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/api/MultipleOpenApiResource.java
Patch:
@@ -129,7 +129,7 @@ public void afterPropertiesSet() {
 		this.groupedOpenApiResources = groupedOpenApis.stream()
 				.collect(Collectors.toMap(GroupedOpenApi::getGroup, item ->
 						{
-							GroupConfig groupConfig = new GroupConfig(item.getGroup(), item.getPathsToMatch(), item.getPackagesToScan(), item.getPackagesToExclude(), item.getPathsToExclude(), item.getProducesToMatch(), item.getConsumesToMatch(),item.getHeadersToMatch());
+							GroupConfig groupConfig = new GroupConfig(item.getGroup(), item.getPathsToMatch(), item.getPackagesToScan(), item.getPackagesToExclude(), item.getPathsToExclude(), item.getProducesToMatch(), item.getConsumesToMatch(), item.getHeadersToMatch(),item.getDisplayName());
 							springDocConfigProperties.addGroupConfig(groupConfig);
 							return buildWebFluxOpenApiResource(item);
 						}

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/api/MultipleOpenApiResource.java
Patch:
@@ -129,7 +129,7 @@ public void afterPropertiesSet()  {
 		this.groupedOpenApiResources = groupedOpenApis.stream()
 				.collect(Collectors.toMap(GroupedOpenApi::getGroup, item ->
 						{
-							GroupConfig groupConfig = new GroupConfig(item.getGroup(), item.getPathsToMatch(), item.getPackagesToScan(), item.getPackagesToExclude(), item.getPathsToExclude(), item.getProducesToMatch(), item.getConsumesToMatch(), item.getHeadersToMatch());
+							GroupConfig groupConfig = new GroupConfig(item.getGroup(), item.getPathsToMatch(), item.getPackagesToScan(), item.getPackagesToExclude(), item.getPathsToExclude(), item.getProducesToMatch(), item.getConsumesToMatch(), item.getHeadersToMatch(),item.getDisplayName());
 							springDocConfigProperties.addGroupConfig(groupConfig);
 							return buildWebMvcOpenApiResource(item);
 						}

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app4/SpringDocApp4Test.java
Patch:
@@ -40,7 +40,7 @@ public void swagger_config_for_multiple_groups() throws Exception {
 				.andExpect(jsonPath("urls[0].url", equalTo("/v3/api-docs/stores")))
 				.andExpect(jsonPath("urls[0].name", equalTo("stores")))
 				.andExpect(jsonPath("urls[1].url", equalTo("/v3/api-docs/pets")))
-				.andExpect(jsonPath("urls[1].name", equalTo("pets")))
+				.andExpect(jsonPath("urls[1].name", equalTo("The pets")))
 				.andExpect(jsonPath("$['urls.primaryName']", equalTo("pets")));
 	}
 }
\ No newline at end of file

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/converters/models/PageableAsQueryParam.java
Patch:
@@ -47,7 +47,7 @@
 		, name = "size"
 		, schema = @Schema(type = "integer", defaultValue = "20"))
 @Parameter(in = ParameterIn.QUERY
-		, description = "Sorting criteria in the format: property(,asc|desc). "
+		, description = "Sorting criteria in the format: property,(asc|desc). "
 		+ "Default sort order is ascending. " + "Multiple sort criteria are supported."
 		, name = "sort"
 		, array = @ArraySchema(schema = @Schema(type = "string")))

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/converters/models/Pageable.java
Patch:
@@ -53,7 +53,7 @@ public class Pageable {
 	/**
 	 * The Sort.
 	 */
-	@Parameter(description = "Sorting criteria in the format: property(,asc|desc). "
+	@Parameter(description = "Sorting criteria in the format: property,(asc|desc). "
 			+ "Default sort order is ascending. " + "Multiple sort criteria are supported."
 			, name = "sort"
 			, array = @ArraySchema(schema = @Schema(type = "string")))

File: springdoc-openapi-starter-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerIndexPageTransformer.java
Patch:
@@ -35,6 +35,8 @@
 import org.springframework.web.reactive.resource.TransformedResource;
 import org.springframework.web.server.ServerWebExchange;
 
+import static org.springdoc.core.utils.Constants.SWAGGER_INITIALIZER_JS;
+
 /**
  * The type Swagger index transformer.
  * @author bnasslahsen
@@ -65,7 +67,7 @@ public Mono<Resource> transform(ServerWebExchange serverWebExchange, Resource re
 
 		final AntPathMatcher antPathMatcher = new AntPathMatcher();
 		try {
-			boolean isIndexFound = antPathMatcher.match("**/swagger-ui/**/index.html", resource.getURL().toString());
+			boolean isIndexFound = antPathMatcher.match("**/swagger-ui/**/" + SWAGGER_INITIALIZER_JS, resource.getURL().toString());
 			if (isIndexFound) {
 				String html = defaultTransformations(resource.getInputStream());
 				return Mono.just(new TransformedResource(resource, html.getBytes()));

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirecFilterTest.java
Patch:
@@ -37,7 +37,7 @@ public void shouldRedirectWithConfigUrlIgnoringQueryParams() {
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
 				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
-		super.checkHTML("index1-filter");
+		super.checkJS("index1-filter");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectConfigUrlTest.java
Patch:
@@ -41,7 +41,7 @@ public void shouldRedirectWithConfigUrlIgnoringQueryParams() {
 		responseSpec.expectHeader()
 				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
 
-		super.checkHTML("index1-configurl");
+		super.checkJS("index1-configurl");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectDefaultTest.java
Patch:
@@ -38,7 +38,7 @@ public void shouldRedirectWithDefaultQueryParams() {
 		webTestClient.get().uri("/v3/api-docs/swagger-config").exchange()
 				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl").isEqualTo("");
 
-		super.checkHTML("index1-default");
+		super.checkJS("index1-default");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectLayoutTest.java
Patch:
@@ -38,7 +38,7 @@ public void shouldRedirectWithConfigUrlIgnoringQueryParams() {
 		responseSpec.expectHeader()
 				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
 
-		super.checkHTML("index1-layout");
+		super.checkJS("index1-layout");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectWithConfigTest.java
Patch:
@@ -43,7 +43,7 @@ public void shouldRedirectWithConfiguredParams() {
 		webTestClient.get().uri("/baf/batz/swagger-config").exchange()
 				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl").isEqualTo("/foo/validate");
 
-		super.checkHTML("index1");
+		super.checkJS("index1");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app3/SpringDocApp3RedirectDefaultTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Test;
+import org.springdoc.core.utils.Constants;
 import test.org.springdoc.ui.AbstractSpringDocTest;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -45,7 +46,7 @@ public void shouldRedirectWithDefaultQueryParams() {
 				.jsonPath("$.validatorUrl").isEqualTo("")
 				.jsonPath("$.oauth2RedirectUrl").isEqualTo("/documentation/webjars/swagger-ui/oauth2-redirect.html");
 
-		super.checkHTML("index3", "/documentation/webjars/swagger-ui/index.html");
+		super.checkJS("index3", "/documentation/webjars"+ Constants.SWAGGER_INITIALIZER_URL);
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app5/SpringDocApp5Test.java
Patch:
@@ -29,7 +29,7 @@ public class SpringDocApp5Test extends AbstractSpringDocTest {
 
 	@Test
 	public void transformed_index_with_oauth() {
-		super.checkHTML("index5");
+		super.checkJS("index5");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app6/SpringDocApp6Test.java
Patch:
@@ -24,6 +24,7 @@
 package test.org.springdoc.ui.app6;
 
 import org.junit.jupiter.api.Test;
+import org.springdoc.core.utils.Constants;
 import test.org.springdoc.ui.AbstractSpringDocTest;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -35,11 +36,11 @@ public class SpringDocApp6Test extends AbstractSpringDocTest {
 
 	@Test
 	public void transformed_index_with_oauth() throws Exception {
-		EntityExchangeResult<byte[]> getResult = webTestClient.get().uri("/webjars/swagger-ui/index.html")
+		EntityExchangeResult<byte[]> getResult = webTestClient.get().uri("/webjars"+ Constants.SWAGGER_INITIALIZER_URL)
 				.exchange()
 				.expectStatus().isOk()
 				.expectBody().returnResult();
-		checkHTMLResult("index6", new String(getResult.getResponseBody()));
+		checkJSResult("index6", new String(getResult.getResponseBody()));
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app7/SpringDocApp7Test.java
Patch:
@@ -24,6 +24,7 @@
 package test.org.springdoc.ui.app7;
 
 import org.junit.jupiter.api.Test;
+import org.springdoc.core.utils.Constants;
 import test.org.springdoc.ui.AbstractSpringDocTest;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -35,11 +36,11 @@ public class SpringDocApp7Test extends AbstractSpringDocTest {
 
 	@Test
 	public void transformed_index_with_oauth() throws Exception {
-		EntityExchangeResult<byte[]> getResult = webTestClient.get().uri("/webjars/swagger-ui/index.html")
+		EntityExchangeResult<byte[]> getResult = webTestClient.get().uri("/webjars"+ Constants.SWAGGER_INITIALIZER_URL)
 				.exchange()
 				.expectStatus().isOk()
 				.expectBody().returnResult();
-		checkHTMLResult("index7", new String(getResult.getResponseBody()));
+		checkJSResult("index7", new String(getResult.getResponseBody()));
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/AbstractSpringDocActuatorTest.java
Patch:
@@ -1,5 +1,6 @@
 package test.org.springdoc.ui;
 
+
 import jakarta.annotation.PostConstruct;
 
 import org.springframework.beans.factory.annotation.Autowired;

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app1/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app1;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1Test.java
Patch:
@@ -40,7 +40,7 @@ public void shouldDisplaySwaggerUiPage() throws Exception {
 
     @Test
     public void originalIndex() throws Exception {
-       super.chekHTML();
+       super.chekJS();
     }
 
     @SpringBootApplication

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocAppRedirectWithPrefixTest.java
Patch:
@@ -19,6 +19,7 @@
 package test.org.springdoc.ui.app1;
 
 import org.junit.jupiter.api.Test;
+import org.springdoc.core.utils.Constants;
 import test.org.springdoc.ui.AbstractSpringDocTest;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -44,7 +45,7 @@ public void shouldRedirectWithPrefix() throws Exception {
 				.andExpect(jsonPath("validatorUrl", equalTo("")))
 				.andExpect(jsonPath("oauth2RedirectUrl", equalTo("http://localhost/documentation/swagger-ui/oauth2-redirect.html")));
 
-		super.checkHTML("results/app1-prefix", "/documentation/swagger-ui/index.html");
+		super.checkJS("results/app1-prefix", "/documentation"+ Constants.SWAGGER_INITIALIZER_URL);
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app10/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app10;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app10/SpringDocApp10Test.java
Patch:
@@ -42,7 +42,7 @@ public void shouldDisplaySwaggerUiPage() throws Exception {
 
 	@Test
 	public void originalIndex() throws Exception {
-		super.chekHTML();
+		super.chekJS();
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app12/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app12;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app12/SpringDocApp12Test.java
Patch:
@@ -30,7 +30,7 @@ class SpringDocApp12Test extends AbstractSpringDocTest {
 
 	@Test
 	void transformed_index_with_oauth() throws Exception {
-		super.chekHTML();
+		super.chekJS();
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app13/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app13;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app14/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app14;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 import org.springdoc.core.models.GroupedOpenApi;

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app15/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app15;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app17/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app17;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app18/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app18;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app18/SpringDocApp18Test.java
Patch:
@@ -43,8 +43,8 @@ public void testTryItOutEnabled() throws Exception {
 				.andExpect(jsonPath("tryItOutEnabled", equalTo(true)));
 	}
 
-	@SpringBootApplication
-	static class SpringDocTestApp {
-	}
+    @SpringBootApplication
+    static class SpringDocTestApp {
+    }
 
 }
\ No newline at end of file

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app19/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app19;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app2/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app2;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app20/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app20;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app21/SpringDocApp21Test.java
Patch:
@@ -37,7 +37,7 @@ public void testAddSwaggerUiVersionToPath() throws Exception {
 				.andExpect(status().isFound())
 				.andExpect(header().string("Location", "/swagger-ui/index.html"));
 
-		super.chekHTML();
+		super.chekJS();
 	}
 
 	@Test

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app22/SpringDocTestApp.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app22;
 
+
 import org.springdoc.core.configuration.SpringDocConfiguration;
 import org.springdoc.core.properties.SpringDocConfigProperties;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app23/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app23;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app23/SpringDocApp23Test.java
Patch:
@@ -29,7 +29,7 @@ class SpringDocApp23Test extends AbstractSpringDocTest {
 
 	@Test
 	void transformed_index_with_queryConfigEnabled() throws Exception {
-		super.chekHTML();
+		super.chekJS();
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app24/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app24;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app24/SpringDocApp24Test.java
Patch:
@@ -40,7 +40,7 @@ public void shouldRedirectWithConfigUrlIgnoringQueryParams() throws Exception {
 				.andExpect(status().isFound())
 				.andExpect(header().string("Location", "/swagger-ui/index.html"));
 
-		super.chekHTML();
+		super.chekJS();
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app25/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app25;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app25/SpringDocApp25Test.java
Patch:
@@ -45,7 +45,7 @@ public void shouldRedirectWithConfiguredParams() throws Exception {
 		mockMvc.perform(get("/baf/batz/swagger-config"))
 				.andExpect(status().isOk()).andExpect(jsonPath("$.validatorUrl", is("/foo/validate")));
 
-		super.chekHTML();
+		super.chekJS();
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app26/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app26;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app26/SpringDocApp26Test.java
Patch:
@@ -37,7 +37,7 @@ public void shouldRedirectWithBaseLayout() throws Exception {
 				.andExpect(status().isFound())
 				.andExpect(header().string("Location", "/swagger-ui/index.html"));
 
-		super.chekHTML();
+		super.chekJS();
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app27/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app27;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app27/SpringDocApp27Test.java
Patch:
@@ -39,7 +39,7 @@ public void shouldRedirectWithQueryParams() throws Exception {
 				.andExpect(status().isFound())
 				.andExpect(header().string("Location", "/swagger-ui/index.html?operationsSorter=method&configUrl=/v3/api-docs/swagger-config"));
 
-		super.chekHTML();
+		super.chekJS();
 	}
 
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app28/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app28;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app28/SpringDocApp28Test.java
Patch:
@@ -36,7 +36,7 @@ public void shouldRedirectWithFilter() throws Exception {
 		mockMvc.perform(get("/swagger-ui.html"))
 				.andExpect(status().isFound())
 				.andExpect(header().string("Location", "/swagger-ui/index.html"));
-		super.chekHTML();
+		super.chekJS();
 	}
 
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app4/SpringDocTestApp.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app4;
 
+
 import org.springdoc.core.models.GroupedOpenApi;
 
 import org.springframework.boot.SpringApplication;

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app5/SpringDocApp5Test.java
Patch:
@@ -37,7 +37,7 @@ public void oauth2_redirect_url_calculated_with_context_path() throws Exception
 		mockMvc.perform(get("/context-path/v3/api-docs/swagger-config").contextPath("/context-path"))
 				.andExpect(status().isOk())
 				.andExpect(jsonPath("oauth2RedirectUrl", equalTo("http://localhost/context-path/swagger-ui/oauth2-redirect.html")));
-		super.chekHTML();
+		super.chekJS();
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app5/SpringDocOauthServletPathsTest.java
Patch:
@@ -19,6 +19,7 @@
 package test.org.springdoc.ui.app5;
 
 import org.junit.jupiter.api.Test;
+import org.springdoc.core.utils.Constants;
 import test.org.springdoc.ui.AbstractSpringDocTest;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -43,9 +44,9 @@ public void should_display_oauth2_redirect_page() throws Exception {
 
 		mockMvc.perform(get("/context-path/servlet-path/test/swagger-ui/oauth2-redirect.html").servletPath("/servlet-path").contextPath("/context-path")).andExpect(status().isOk()).andReturn();
 
-		MvcResult mvcResult = mockMvc.perform(get("/context-path/servlet-path/test/swagger-ui/index.html").servletPath("/servlet-path").contextPath("/context-path")).andExpect(status().isOk()).andReturn();
+		MvcResult mvcResult = mockMvc.perform(get("/context-path/servlet-path/test"+ Constants.SWAGGER_INITIALIZER_URL).servletPath("/servlet-path").contextPath("/context-path")).andExpect(status().isOk()).andReturn();
 		String transformedIndex = mvcResult.getResponse().getContentAsString();
-		checkHTMLResult("results/app5-contextpath", transformedIndex);
+		checkJSResult("results/app5-contextpath", transformedIndex);
 	}
 
 	@Test

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app6/SpringDocTestApp.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app6;
 
+
 import org.springdoc.core.models.GroupedOpenApi;
 
 import org.springframework.boot.SpringApplication;

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app7/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app7;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app7/SpringDocApp7Test.java
Patch:
@@ -32,7 +32,7 @@ public class SpringDocApp7Test extends AbstractSpringDocTest {
 
 	@Test
 	public void transformed_index_with_oauth() throws Exception {
-		super.chekHTML();
+		super.chekJS();
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app8/HelloController.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui.app8;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app9/HelloController.java
Patch:
@@ -23,6 +23,7 @@
 
 package test.org.springdoc.ui.app9;
 
+
 import jakarta.validation.Valid;
 import jakarta.validation.constraints.Size;
 

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app9/SpringDocApp9Test.java
Patch:
@@ -37,7 +37,7 @@ public class SpringDocApp9Test extends AbstractSpringDocTest {
 
 	@Test
 	public void transformed_index_with_oauth() throws Exception {
-		super.chekHTML();
+		super.chekJS();
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-tests/springdoc-openapi-actuator-webmvc-tests/src/test/java/test/org/springdoc/api/app148/SpringDocApp148Test.java
Patch:
@@ -55,6 +55,7 @@ public void testApp() throws Exception {
 	@Test
 	public void testApp2() throws Exception {
 		String result = actuatorRestTemplate.getForObject("/test/application/openapi/x-actuator", String.class);
+		System.out.println(result);
 		String expected = getContent("results/app148-2.json");
 		assertEquals(expected, result, true);
 	}

File: springdoc-openapi-tests/springdoc-openapi-data-rest-tests/src/test/java/test/org/springdoc/api/app301/Person.java
Patch:
@@ -21,7 +21,7 @@
  *
  */
 
-package test.org.springdoc.api.app30;
+package test.org.springdoc.api.app301;
 
 import jakarta.persistence.Entity;
 import jakarta.persistence.GeneratedValue;

File: springdoc-openapi-tests/springdoc-openapi-data-rest-tests/src/test/java/test/org/springdoc/api/app301/PersonApi.java
Patch:
@@ -21,7 +21,7 @@
  *
  */
 
-package test.org.springdoc.api.app30;
+package test.org.springdoc.api.app301;
 
 import org.springframework.data.rest.webmvc.BasePathAwareController;
 import org.springframework.web.bind.annotation.GetMapping;

File: springdoc-openapi-tests/springdoc-openapi-data-rest-tests/src/test/java/test/org/springdoc/api/app301/PersonRepository.java
Patch:
@@ -21,7 +21,7 @@
  *
  */
 
-package test.org.springdoc.api.app30;
+package test.org.springdoc.api.app301;
 
 import org.springframework.data.repository.PagingAndSortingRepository;
 import org.springframework.data.rest.core.annotation.RepositoryRestResource;

File: springdoc-openapi-starter-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeActuator.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Map;
 
 import io.swagger.v3.oas.annotations.Operation;
+import org.apache.commons.lang3.StringUtils;
 import org.springdoc.core.properties.SpringDocConfigProperties;
 import org.springdoc.core.properties.SwaggerUiConfigParameters;
 import org.springdoc.core.properties.SwaggerUiConfigProperties;
@@ -124,7 +125,7 @@ protected void calculateUiRootPath(StringBuilder... sbUrls) {
 
 	@Override
 	protected void calculateOauth2RedirectUrl(UriComponentsBuilder uriComponentsBuilder) {
-		if ((oauthPrefix == null && !swaggerUiConfigParameters.isValidUrl(swaggerUiConfigParameters.getOauth2RedirectUrl())) || springDocConfigProperties.isCacheDisabled()) {
+		if (StringUtils.isBlank(swaggerUiConfig.getOauth2RedirectUrl()) || !swaggerUiConfigParameters.isValidUrl(swaggerUiConfig.getOauth2RedirectUrl())) {
 			this.oauthPrefix = uriComponentsBuilder.path(managementServerProperties.getBasePath() + swaggerUiConfigParameters.getUiRootPath()).path(webJarsPrefixUrl);
 			swaggerUiConfigParameters.setOauth2RedirectUrl(this.oauthPrefix.path(getOauth2RedirectUrl()).build().toString());
 		}

File: springdoc-openapi-starter-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeWebFlux.java
Patch:
@@ -23,6 +23,7 @@
 package org.springdoc.webflux.ui;
 
 import io.swagger.v3.oas.annotations.Operation;
+import org.apache.commons.lang3.StringUtils;
 import org.springdoc.core.properties.SpringDocConfigProperties;
 import org.springdoc.core.properties.SwaggerUiConfigParameters;
 import org.springdoc.core.properties.SwaggerUiConfigProperties;
@@ -104,7 +105,7 @@ protected void calculateUiRootPath(StringBuilder... sbUrls) {
 	 */
 	@Override
 	protected void calculateOauth2RedirectUrl(UriComponentsBuilder uriComponentsBuilder) {
-		if ((oauthPrefix == null && !swaggerUiConfigParameters.isValidUrl(swaggerUiConfigParameters.getOauth2RedirectUrl())) || springDocConfigProperties.isCacheDisabled()) {
+		if (StringUtils.isBlank(swaggerUiConfig.getOauth2RedirectUrl()) || !swaggerUiConfigParameters.isValidUrl(swaggerUiConfig.getOauth2RedirectUrl())) {
 			this.oauthPrefix = uriComponentsBuilder.path(contextPath).path(swaggerUiConfigParameters.getUiRootPath()).path(webJarsPrefixUrl);
 			swaggerUiConfigParameters.setOauth2RedirectUrl(this.oauthPrefix.path(getOauth2RedirectUrl()).build().toString());
 		}

File: springdoc-openapi-starter-webflux-ui/src/test/java/test/org/springdoc/ui/app4/SpringDocOauthRedirectUrlRecalculateTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
 
-@TestPropertySource(properties = {"server.forward-headers-strategy=framework", "springdoc.cache.disabled=true"})
+@TestPropertySource(properties = {"server.forward-headers-strategy=framework"})
 public class SpringDocOauthRedirectUrlRecalculateTest extends AbstractSpringDocTest {
 
 	@Test

File: springdoc-openapi-starter-webmvc-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeCommon.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Map;
 
 import jakarta.servlet.http.HttpServletRequest;
+import org.apache.commons.lang3.StringUtils;
 import org.springdoc.core.properties.SpringDocConfigProperties;
 import org.springdoc.core.properties.SwaggerUiConfigParameters;
 import org.springdoc.core.properties.SwaggerUiConfigProperties;
@@ -83,7 +84,7 @@ protected Map<String, Object> openapiJson(HttpServletRequest request) {
 
 	@Override
 	protected void calculateOauth2RedirectUrl(UriComponentsBuilder uriComponentsBuilder) {
-		if (!swaggerUiConfigParameters.isValidUrl(swaggerUiConfigParameters.getOauth2RedirectUrl()) || springDocConfigProperties.isCacheDisabled())
+		if (StringUtils.isBlank(swaggerUiConfig.getOauth2RedirectUrl()) || !swaggerUiConfigParameters.isValidUrl(swaggerUiConfig.getOauth2RedirectUrl()) )
 			swaggerUiConfigParameters.setOauth2RedirectUrl(uriComponentsBuilder
 					.path(swaggerUiConfigParameters.getUiRootPath())
 					.path(getOauth2RedirectUrl()).build().toString());

File: springdoc-openapi-starter-webmvc-ui/src/test/java/test/org/springdoc/ui/app5/SpringDocOauthRedirectUrlRecalculateTest.java
Patch:
@@ -29,7 +29,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-@TestPropertySource(properties = {"server.forward-headers-strategy=framework", "springdoc.cache.disabled=true"})
+@TestPropertySource(properties = {"server.forward-headers-strategy=framework"})
 public class SpringDocOauthRedirectUrlRecalculateTest extends AbstractSpringDocTest {
 
 	@Test

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -611,8 +611,8 @@ protected void calculatePath(RouterOperation routerOperation, Locale locale) {
 	 * @param locale the locale
 	 */
 	protected void calculatePath(HandlerMethod handlerMethod, String operationPath,
-			Set<RequestMethod> requestMethods, Locale locale) {
-		this.calculatePath(handlerMethod, new RouterOperation(operationPath, requestMethods.toArray(new RequestMethod[requestMethods.size()])), locale);
+			Set<RequestMethod> requestMethods,String[] consumes, String[] produces, String[] headers, Locale locale) {
+		this.calculatePath(handlerMethod, new RouterOperation(operationPath, requestMethods.toArray(new RequestMethod[requestMethods.size()]), consumes, produces, headers), locale);
 	}
 
 	/**

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/data/DataRestRouterOperationService.java
Patch:
@@ -279,7 +279,7 @@ else if (ControllerType.PROPERTY.equals(controllerType))
 			MethodResourceMapping methodResourceMapping, HandlerMethod handlerMethod,
 			RequestMethod requestMethod, ResourceMetadata resourceMetadata, String
 			operationPath, ControllerType controllerType) {
-		RouterOperation routerOperation = new RouterOperation(operationPath, new RequestMethod[] { requestMethod });
+		RouterOperation routerOperation = new RouterOperation(operationPath, new RequestMethod[] { requestMethod }, null, null, null);
 		MethodAttributes methodAttributes = new MethodAttributes(springDocConfigProperties.getDefaultConsumesMediaType(), springDocConfigProperties.getDefaultProducesMediaType(), dataRestRepository.getLocale());
 		methodAttributes.calculateConsumesProduces(handlerMethod.getMethod());
 		routerOperation.setConsumes(methodAttributes.getMethodConsumes());

File: springdoc-openapi-starter-webflux-api/src/main/java/org/springdoc/webflux/api/OpenApiResource.java
Patch:
@@ -199,7 +199,7 @@ && isFilterCondition(handlerMethod, operationPath, produces, consumes, headers))
 						// default allowed requestmethods
 						if (requestMethods.isEmpty())
 							requestMethods = this.getDefaultAllowedHttpMethods();
-						calculatePath(handlerMethod, operationPath, requestMethods, locale);
+						calculatePath(handlerMethod, operationPath, requestMethods, consumes, produces , headers, locale);
 					}
 				}
 			}

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -223,7 +223,7 @@ && isFilterCondition(handlerMethod, operationPath, produces, consumes, headers))
 							// default allowed requestmethods
 							if (requestMethods.isEmpty())
 								requestMethods = this.getDefaultAllowedHttpMethods();
-							calculatePath(handlerMethod, operationPath, requestMethods, locale);
+							calculatePath(handlerMethod, operationPath, requestMethods, consumes, produces, headers, locale);
 						}
 					}
 				}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/extractor/MethodParameterPojoExtractor.java
Patch:
@@ -226,7 +226,7 @@ static boolean isSimpleType(Class<?> clazz) {
 	 * @param clazz the clazz
 	 * @return the boolean
 	 */
-	private static boolean isSwaggerPrimitiveType(Class<?> clazz) {
+	public static boolean isSwaggerPrimitiveType(Class<?> clazz) {
 		PrimitiveType primitiveType = PrimitiveType.fromType(clazz);
 		return primitiveType != null;
 	}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/properties/SwaggerUiOAuthProperties.java
Patch:
@@ -27,8 +27,8 @@
 import java.util.Map;
 import java.util.TreeMap;
 
+import org.springdoc.core.SpringDocPropertiesUtils;
 import org.springdoc.core.configuration.SpringDocConfiguration;
-import org.springdoc.core.utils.SpringDocPropertiesUtils;
 
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;

File: springdoc-openapi-tests/springdoc-openapi-hateoas-tests/src/test/java/test/org/springdoc/api/app5/SpringDocApp5Test.java
Patch:
@@ -20,6 +20,7 @@
 
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.OpenAPI;
+import io.swagger.v3.oas.models.media.ObjectSchema;
 import io.swagger.v3.oas.models.media.Schema;
 import io.swagger.v3.oas.models.media.StringSchema;
 import test.org.springdoc.api.AbstractSpringDocTest;
@@ -34,7 +35,7 @@ static class SpringDocTestApp {
 		@Bean
 		public OpenAPI customOpenAPI() {
 			return new OpenAPI().components(new Components()
-					.addSchemas("CompanyDtoNew",new Schema().addProperties("id", new StringSchema().format("uuid"
+					.addSchemas("CompanyDtoNew",new ObjectSchema().addProperties("id", new StringSchema().format("uuid"
 					)).addProperties("name", new StringSchema())));
 		}
 	}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/mixins/SortedOpenAPIMixin.java
Patch:
@@ -26,6 +26,8 @@
 
 import com.fasterxml.jackson.annotation.JsonAnyGetter;
 import com.fasterxml.jackson.annotation.JsonAnySetter;
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 import io.swagger.v3.core.jackson.PathsSerializer;
@@ -38,6 +40,7 @@
 public interface SortedOpenAPIMixin {
 
 	@JsonAnyGetter
+	@JsonInclude(value = Include.ALWAYS)
 	@JsonPropertyOrder(alphabetic = true)
 	Map<String, Object> getExtensions();
 

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/service/OpenAPIService.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.stream.Stream;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import io.swagger.v3.core.jackson.TypeNameResolver;
 import io.swagger.v3.core.util.AnnotationsUtils;
 import io.swagger.v3.core.util.Json;
@@ -241,8 +242,8 @@ public void build(Locale locale) {
 		}
 		else {
 			try {
-				this.calculatedOpenAPI = Json.mapper()
-						.readValue(Json.mapper().writeValueAsString(openAPI), OpenAPI.class);
+				ObjectMapper objectMapper = new ObjectMapper();
+				this.calculatedOpenAPI = objectMapper.readValue(objectMapper.writeValueAsString(openAPI), OpenAPI.class );
 			}
 			catch (JsonProcessingException e) {
 				LOGGER.warn("Json Processing Exception occurred: {}", e.getMessage());

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/core/properties/SwaggerUiConfigParameters.java
Patch:
@@ -140,6 +140,7 @@ public SwaggerUiConfigParameters(SwaggerUiConfigProperties swaggerUiConfig) {
 		this.tryItOutEnabled = swaggerUiConfig.getTryItOutEnabled();
 		this.persistAuthorization = swaggerUiConfig.getPersistAuthorization();
 		this.queryConfigEnabled = swaggerUiConfig.getQueryConfigEnabled();
+		this.withCredentials=swaggerUiConfig.getWithCredentials();
 	}
 
 	/**
@@ -232,6 +233,7 @@ public Map<String, Object> getConfigParameters() {
 		SpringDocPropertiesUtils.put("tryItOutEnabled", tryItOutEnabled, params);
 		SpringDocPropertiesUtils.put("persistAuthorization", persistAuthorization, params);
 		SpringDocPropertiesUtils.put(FILTER_PROPERTY, filter, params);
+		SpringDocPropertiesUtils.put("withCredentials", withCredentials, params);
 		return params;
 	}
 

File: springdoc-openapi-starter-webmvc-api/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -53,6 +53,7 @@
 import org.springdoc.core.service.OpenAPIService;
 import org.springdoc.core.service.OperationService;
 
+import org.springframework.aop.support.AopUtils;
 import org.springframework.beans.factory.ObjectFactory;
 import org.springframework.util.CollectionUtils;
 import org.springframework.util.MimeType;
@@ -164,7 +165,7 @@ protected void getPaths(Map<String, Object> restControllers, Locale locale) {
 				restResourceProvider.customize(openAPIService.getCalculatedOpenAPI());
 				Map<RequestMappingInfo, HandlerMethod> mapDataRest = restResourceProvider.getHandlerMethods();
 				Map<String, Object> requestMappingMap = restResourceProvider.getBasePathAwareControllerEndpoints();
-				Class[] additionalRestClasses = requestMappingMap.values().stream().map(Object::getClass).toArray(Class[]::new);
+				Class[] additionalRestClasses = requestMappingMap.values().stream().map(AopUtils::getTargetClass).toArray(Class[]::new);
 				AbstractOpenApiResource.addRestControllers(additionalRestClasses);
 				map.putAll(mapDataRest);
 			});
@@ -183,7 +184,7 @@ protected void getPaths(Map<String, Object> restControllers, Locale locale) {
 			SecurityOAuth2Provider securityOAuth2Provider = securityOAuth2ProviderOptional.get();
 			Map<RequestMappingInfo, HandlerMethod> mapOauth = securityOAuth2Provider.getHandlerMethods();
 			Map<String, Object> requestMappingMapSec = securityOAuth2Provider.getFrameworkEndpoints();
-			Class[] additionalRestClasses = requestMappingMapSec.values().stream().map(Object::getClass).toArray(Class[]::new);
+			Class[] additionalRestClasses = requestMappingMapSec.values().stream().map(AopUtils::getTargetClass).toArray(Class[]::new);
 			AbstractOpenApiResource.addRestControllers(additionalRestClasses);
 			calculatePath(requestMappingMapSec, mapOauth, locale);
 		}

File: springdoc-openapi-starter-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -326,7 +326,7 @@ protected synchronized OpenAPI getOpenApi(Locale locale) {
 			Map<String, Object> findControllerAdvice = openAPIService.getControllerAdviceMap();
 			// calculate generic responses
 			openApi = openAPIService.getCalculatedOpenAPI();
-			if (springDocConfigProperties.isOverrideWithGenericResponse() && !CollectionUtils.isEmpty(findControllerAdvice)) {
+			if (springDocConfigProperties.isOverrideWithGenericResponse()) {
 				if (!CollectionUtils.isEmpty(mappingsMap))
 					findControllerAdvice.putAll(mappingsMap);
 				responseBuilder.buildGenericResponse(openApi.getComponents(), findControllerAdvice, finalLocale);

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestRequestService.java
Patch:
@@ -174,7 +174,7 @@ else if (methodParameter.getParameterAnnotation(BackendId.class) != null) {
 					parameterInfo.setParameterModel(parameter);
 				}
 				if (!ArrayUtils.isEmpty(methodParameter.getParameterAnnotations()))
-					parameter = requestBuilder.buildParams(parameterInfo, parameters.length, openAPI.getComponents(), requestMethod, null);
+					parameter = requestBuilder.buildParams(parameterInfo, openAPI.getComponents(), requestMethod, null);
 
 				addParameters(openAPI, requestMethod, methodAttributes, operation, methodParameter, parameterInfo, parameter);
 			}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestService.java
Patch:
@@ -676,8 +676,9 @@ private boolean isRequestBodyParam(RequestMethod requestMethod, ParameterInfo pa
 				&&
 				((methodParameter.getParameterAnnotation(io.swagger.v3.oas.annotations.parameters.RequestBody.class) != null
 						|| methodParameter.getParameterAnnotation(org.springframework.web.bind.annotation.RequestBody.class) != null
-						|| methodParameter.getParameterAnnotation(org.springframework.web.bind.annotation.RequestPart.class) != null)
-						|| (!ClassUtils.isPrimitiveOrWrapper(methodParameter.getParameterType()) && (!ArrayUtils.isEmpty(methodParameter.getParameterAnnotations()) || length == 1)));
+						|| methodParameter.getParameterAnnotation(org.springframework.web.bind.annotation.RequestPart.class) != null
+						|| methodParameter.getMethod().getAnnotation(io.swagger.v3.oas.annotations.parameters.RequestBody.class) !=null)
+						|| (!ClassUtils.isPrimitiveOrWrapper(methodParameter.getParameterType()) && (!ArrayUtils.isEmpty(methodParameter.getParameterAnnotations()))));
 	}
 
 	/**

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestService.java
Patch:
@@ -57,7 +57,6 @@
 import io.swagger.v3.oas.models.parameters.Parameter;
 import io.swagger.v3.oas.models.parameters.RequestBody;
 import org.apache.commons.lang3.ArrayUtils;
-import org.apache.commons.lang3.ClassUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.reflect.FieldUtils;
 import org.springdoc.core.customizers.ParameterCustomizer;
@@ -67,6 +66,7 @@
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.http.HttpMethod;
+import org.springframework.util.ClassUtils;
 import org.springframework.util.CollectionUtils;
 import org.springframework.validation.BindingResult;
 import org.springframework.validation.Errors;
@@ -677,7 +677,7 @@ private boolean isRequestBodyParam(RequestMethod requestMethod, ParameterInfo pa
 				((methodParameter.getParameterAnnotation(io.swagger.v3.oas.annotations.parameters.RequestBody.class) != null
 						|| methodParameter.getParameterAnnotation(org.springframework.web.bind.annotation.RequestBody.class) != null
 						|| methodParameter.getParameterAnnotation(org.springframework.web.bind.annotation.RequestPart.class) != null)
-						|| (!ClassUtils.isPrimitiveOrWrapper(methodParameter.getParameter().getType()) && (!ArrayUtils.isEmpty(methodParameter.getParameterAnnotations()) || length == 1)));
+						|| (!ClassUtils.isPrimitiveOrWrapper(methodParameter.getParameterType()) && (!ArrayUtils.isEmpty(methodParameter.getParameterAnnotations()) || length == 1)));
 	}
 
 	/**

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigParameters.java
Patch:
@@ -129,7 +129,7 @@ public SwaggerUiConfigParameters(SwaggerUiConfigProperties swaggerUiConfig) {
 		this.showExtensions = swaggerUiConfig.getShowExtensions();
 		this.supportedSubmitMethods = swaggerUiConfig.getSupportedSubmitMethods();
 		this.url = swaggerUiConfig.getUrl();
-		this.urls = swaggerUiConfig.getUrls() == null ? new HashSet<>() : swaggerUiConfig.getUrls();
+		this.urls = swaggerUiConfig.getUrls() == null ? new HashSet<>() : swaggerUiConfig.cloneUrls();
 		this.urlsPrimaryName = swaggerUiConfig.getUrlsPrimaryName();
 		this.groupsOrder = swaggerUiConfig.getGroupsOrder();
 		this.tryItOutEnabled = swaggerUiConfig.getTryItOutEnabled();

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -383,7 +383,7 @@ static BeanFactoryPostProcessor springdocBeanFactoryPostProcessor2() {
 	@ConditionalOnMissingBean
 	@Lazy(false)
 	SpringDocProviders springDocProviders(Optional<ActuatorProvider> actuatorProvider, Optional<CloudFunctionProvider> springCloudFunctionProvider, Optional<SecurityOAuth2Provider> springSecurityOAuth2Provider,
-			Optional<RepositoryRestResourceProvider> repositoryRestResourceProvider, Optional<RouterFunctionProvider> routerFunctionProvider, SpringWebProvider springWebProvider) {
+			Optional<RepositoryRestResourceProvider> repositoryRestResourceProvider, Optional<RouterFunctionProvider> routerFunctionProvider, Optional<SpringWebProvider> springWebProvider) {
 		return new SpringDocProviders(actuatorProvider, springCloudFunctionProvider, springSecurityOAuth2Provider, repositoryRestResourceProvider, routerFunctionProvider, springWebProvider);
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestService.java
Patch:
@@ -292,7 +292,6 @@ else if (!RequestMethod.GET.equals(requestMethod)) {
 					}
 					applyBeanValidatorAnnotations(requestBodyInfo.getRequestBody(), parameterAnnotations, methodParameter.isOptional());
 				}
-
 				customiseParameter(parameter, parameterInfo, operationParameters);
 			}
 		}

File: springdoc-openapi-common/src/main/java/org/springdoc/ui/AbstractSwaggerIndexTransformer.java
Patch:
@@ -30,6 +30,7 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import io.swagger.v3.core.util.Json;
 import org.apache.commons.lang3.StringUtils;
 import org.springdoc.core.Constants;
 import org.springdoc.core.SwaggerUiConfigParameters;
@@ -77,13 +78,12 @@ public class AbstractSwaggerIndexTransformer {
 	 * @param swaggerUiConfig the swagger ui config
 	 * @param swaggerUiOAuthProperties the swagger ui o auth properties
 	 * @param swaggerUiConfigParameters the swagger ui config parameters
-	 * @param objectMapper the object mapper
 	 */
-	public AbstractSwaggerIndexTransformer(SwaggerUiConfigProperties swaggerUiConfig, SwaggerUiOAuthProperties swaggerUiOAuthProperties, SwaggerUiConfigParameters swaggerUiConfigParameters, ObjectMapper objectMapper) {
+	public AbstractSwaggerIndexTransformer(SwaggerUiConfigProperties swaggerUiConfig, SwaggerUiOAuthProperties swaggerUiOAuthProperties, SwaggerUiConfigParameters swaggerUiConfigParameters) {
 		this.swaggerUiConfig = swaggerUiConfig;
 		this.swaggerUiOAuthProperties = swaggerUiOAuthProperties;
 		this.swaggerUiConfigParameters = swaggerUiConfigParameters;
-		this.objectMapper = objectMapper;
+		this.objectMapper = Json.mapper();
 	}
 
 	/**

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import nonapi.io.github.classgraph.utils.FileUtils;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -54,9 +53,9 @@ public abstract class AbstractSpringDocTest {
 	@Autowired
 	protected MockMvc mockMvc;
 
-	public static String getContent(String fileName) throws Exception {
+	public static String getContent(String fileName) {
 		try {
-			Path path = Paths.get(FileUtils.class.getClassLoader().getResource(fileName).toURI());
+			Path path = Paths.get(AbstractSpringDocTest.class.getClassLoader().getResource(fileName).toURI());
 			byte[] fileBytes = Files.readAllBytes(path);
 			return new String(fileBytes, StandardCharsets.UTF_8);
 		}

File: springdoc-openapi-groovy/src/test/groovy/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import nonapi.io.github.classgraph.utils.FileUtils;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -56,7 +55,7 @@ public abstract class AbstractSpringDocTest {
 
 	public static String getContent(String fileName) throws Exception {
 		try {
-			Path path = Paths.get(FileUtils.class.getClassLoader().getResource(fileName).toURI());
+			Path path = Paths.get(AbstractSpringDocTest.class.getClassLoader().getResource(fileName).toURI());
 			byte[] fileBytes = Files.readAllBytes(path);
 			return new String(fileBytes, StandardCharsets.UTF_8);
 		}

File: springdoc-openapi-hateoas/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import nonapi.io.github.classgraph.utils.FileUtils;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -54,9 +53,9 @@ public abstract class AbstractSpringDocTest {
 	@Autowired
 	protected MockMvc mockMvc;
 
-	public static String getContent(String fileName) throws Exception {
+	public static String getContent(String fileName)  {
 		try {
-			Path path = Paths.get(FileUtils.class.getClassLoader().getResource(fileName).toURI());
+			Path path = Paths.get(AbstractSpringDocTest.class.getClassLoader().getResource(fileName).toURI());
 			byte[] fileBytes = Files.readAllBytes(path);
 			return new String(fileBytes, StandardCharsets.UTF_8);
 		}

File: springdoc-openapi-javadoc/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import nonapi.io.github.classgraph.utils.FileUtils;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -75,7 +74,7 @@ public abstract class AbstractSpringDocTest {
 	 */
 	public static String getContent(String fileName) throws Exception {
 		try {
-			Path path = Paths.get(FileUtils.class.getClassLoader().getResource(fileName).toURI());
+			Path path = Paths.get(AbstractSpringDocTest.class.getClassLoader().getResource(fileName).toURI());
 			byte[] fileBytes = Files.readAllBytes(path);
 			return new String(fileBytes, StandardCharsets.UTF_8);
 		}

File: springdoc-openapi-kotlin/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import nonapi.io.github.classgraph.utils.FileUtils;
 import org.junit.jupiter.api.Test;
 import org.skyscreamer.jsonassert.JSONAssert;
 import org.springdoc.core.Constants;
@@ -41,9 +40,9 @@ public abstract class AbstractSpringDocTest {
 	@Autowired
 	private WebTestClient webTestClient;
 
-	public static String getContent(String fileName) throws Exception {
+	public static String getContent(String fileName) {
 		try {
-			Path path = Paths.get(FileUtils.class.getClassLoader().getResource(fileName).toURI());
+			Path path = Paths.get(AbstractSpringDocTest.class.getClassLoader().getResource(fileName).toURI());
 			byte[] fileBytes = Files.readAllBytes(path);
 			return new String(fileBytes, StandardCharsets.UTF_8);
 		}

File: springdoc-openapi-security/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import nonapi.io.github.classgraph.utils.FileUtils;
 import org.junit.jupiter.api.Test;
 import org.springdoc.core.Constants;
 
@@ -53,9 +52,9 @@ public abstract class AbstractSpringDocTest {
 	@Autowired
 	protected MockMvc mockMvc;
 
-	public static String getContent(String fileName) throws Exception {
+	public static String getContent(String fileName) {
 		try {
-			Path path = Paths.get(FileUtils.class.getClassLoader().getResource(fileName).toURI());
+			Path path = Paths.get(AbstractSpringDocTest.class.getClassLoader().getResource(fileName).toURI());
 			byte[] fileBytes = Files.readAllBytes(path);
 			return new String(fileBytes, StandardCharsets.UTF_8);
 		}

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/AbstractCommonTest.java
Patch:
@@ -5,7 +5,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import nonapi.io.github.classgraph.utils.FileUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -23,9 +22,9 @@ public abstract class AbstractCommonTest {
 	@Autowired
 	protected MockMvc mockMvc;
 
-	protected String getContent(String fileName) throws Exception {
+	protected String getContent(String fileName) {
 		try {
-			Path path = Paths.get(FileUtils.class.getClassLoader().getResource(fileName).toURI());
+			Path path = Paths.get(AbstractCommonTest.class.getClassLoader().getResource(fileName).toURI());
 			byte[] fileBytes = Files.readAllBytes(path);
 			return new String(fileBytes, StandardCharsets.UTF_8);
 		}

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/AbstractCommonTest.java
Patch:
@@ -5,7 +5,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import nonapi.io.github.classgraph.utils.FileUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -30,7 +29,7 @@ public abstract class AbstractCommonTest {
 
 	protected String getContent(String fileName) {
 		try {
-			Path path = Paths.get(FileUtils.class.getClassLoader().getResource(fileName).toURI());
+			Path path = Paths.get(AbstractCommonTest.class.getClassLoader().getResource(fileName).toURI());
 			byte[] fileBytes = Files.readAllBytes(path);
 			return new String(fileBytes, StandardCharsets.UTF_8);
 		}

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/AbstractCommonTest.java
Patch:
@@ -5,7 +5,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import nonapi.io.github.classgraph.utils.FileUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -23,9 +22,9 @@ public abstract class AbstractCommonTest {
 	@Autowired
 	protected WebTestClient webTestClient;
 
-	protected String getContent(String fileName) throws Exception {
+	protected String getContent(String fileName) {
 		try {
-			Path path = Paths.get(FileUtils.class.getClassLoader().getResource(fileName).toURI());
+			Path path = Paths.get(AbstractCommonTest.class.getClassLoader().getResource(fileName).toURI());
 			byte[] fileBytes = Files.readAllBytes(path);
 			return new String(fileBytes, StandardCharsets.UTF_8);
 		}

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/AbstractSpringDocTest.java
Patch:
@@ -23,7 +23,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import nonapi.io.github.classgraph.utils.FileUtils;
 import org.springdoc.core.Constants;
 import org.springdoc.core.SpringDocConfigProperties;
 import org.springdoc.core.SpringDocConfiguration;
@@ -54,7 +53,7 @@ public abstract class AbstractSpringDocTest extends AbstractCommonTest {
 
 	protected String getContent(String fileName) {
 		try {
-			Path path = Paths.get(FileUtils.class.getClassLoader().getResource(fileName).toURI());
+			Path path = Paths.get(AbstractSpringDocTest.class.getClassLoader().getResource(fileName).toURI());
 			byte[] fileBytes = Files.readAllBytes(path);
 			return new String(fileBytes, StandardCharsets.UTF_8);
 		}

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/AbstractCommonTest.java
Patch:
@@ -5,8 +5,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import nonapi.io.github.classgraph.utils.FileUtils;
-
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.test.context.ActiveProfiles;
@@ -26,7 +24,7 @@ public abstract class AbstractCommonTest {
 
 	protected String getContent(String fileName) throws Exception {
 		try {
-			Path path = Paths.get(FileUtils.class.getClassLoader().getResource(fileName).toURI());
+			Path path = Paths.get(AbstractCommonTest.class.getClassLoader().getResource(fileName).toURI());
 			byte[] fileBytes = Files.readAllBytes(path);
 			return new String(fileBytes, StandardCharsets.UTF_8);
 		}

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWebMvcConfigurer.java
Patch:
@@ -26,7 +26,7 @@
 import org.springdoc.core.providers.ActuatorProvider;
 
 import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
-import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 
 import static org.springdoc.core.Constants.CLASSPATH_RESOURCE_LOCATION;
 import static org.springdoc.core.Constants.DEFAULT_WEB_JARS_PREFIX_URL;
@@ -38,7 +38,7 @@
  * @author bnasslahsen
  */
 @SuppressWarnings("deprecation")
-public class SwaggerWebMvcConfigurer extends WebMvcConfigurerAdapter { // NOSONAR
+public class SwaggerWebMvcConfigurer implements WebMvcConfigurer { // NOSONAR
 
 	/**
 	 * The Swagger path.
@@ -78,7 +78,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {
 		if (actuatorProvider.isPresent() && actuatorProvider.get().isUseManagementPort())
 			uiRootPath.append(actuatorProvider.get().getBasePath());
 
-		registry.addResourceHandler(uiRootPath +SWAGGER_UI_PREFIX +"*/**")
+		registry.addResourceHandler(uiRootPath + SWAGGER_UI_PREFIX + "*/**")
 				.addResourceLocations(CLASSPATH_RESOURCE_LOCATION + DEFAULT_WEB_JARS_PREFIX_URL + DEFAULT_PATH_SEPARATOR)
 				.resourceChain(false)
 				.addTransformer(swaggerIndexTransformer);

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWebMvcConfigurer.java
Patch:
@@ -78,7 +78,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {
 		if (actuatorProvider.isPresent() && actuatorProvider.get().isUseManagementPort())
 			uiRootPath.append(actuatorProvider.get().getBasePath());
 
-		registry.addResourceHandler(uiRootPath +SWAGGER_UI_PREFIX +"*/**")
+		registry.addResourceHandler(uiRootPath + SWAGGER_UI_PREFIX + "*/**")
 				.addResourceLocations(CLASSPATH_RESOURCE_LOCATION + DEFAULT_WEB_JARS_PREFIX_URL + DEFAULT_PATH_SEPARATOR)
 				.resourceChain(false)
 				.addTransformer(swaggerIndexTransformer);

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWebMvcConfigurer.java
Patch:
@@ -26,7 +26,7 @@
 import org.springdoc.core.providers.ActuatorProvider;
 
 import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
-import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 
 import static org.springdoc.core.Constants.CLASSPATH_RESOURCE_LOCATION;
 import static org.springdoc.core.Constants.DEFAULT_WEB_JARS_PREFIX_URL;
@@ -38,7 +38,7 @@
  * @author bnasslahsen
  */
 @SuppressWarnings("deprecation")
-public class SwaggerWebMvcConfigurer extends WebMvcConfigurerAdapter { // NOSONAR
+public class SwaggerWebMvcConfigurer implements WebMvcConfigurer { // NOSONAR
 
 	/**
 	 * The Swagger path.

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app154/SpringDocApp154Test.java
Patch:
@@ -29,7 +29,9 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
+import org.springframework.test.context.TestPropertySource;
 
+@TestPropertySource(properties = "spring.cloud.function.web.path=/toto")
 public class SpringDocApp154Test extends AbstractSpringDocFunctionTest {
 
 	@SpringBootApplication

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestService.java
Patch:
@@ -61,6 +61,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.reflect.FieldUtils;
 import org.springdoc.core.customizers.ParameterCustomizer;
+import org.springdoc.core.providers.JavadocProvider;
 
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
 import org.springframework.core.MethodParameter;
@@ -249,7 +250,7 @@ public Operation build(HandlerMethod handlerMethod, RequestMethod requestMethod,
 					io.swagger.v3.oas.annotations.Parameter.class);
 
 			final String pName = methodParameter.getParameterName();
-			ParameterInfo parameterInfo = new ParameterInfo(pName, methodParameter, parameterBuilder, methodAttributes.getLocale());
+			ParameterInfo parameterInfo = new ParameterInfo(pName, methodParameter, parameterBuilder);
 
 			if (parameterDoc == null)
 				parameterDoc = parametersDocMap.get(parameterInfo.getpName());

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericParameterService.java
Patch:
@@ -50,6 +50,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springdoc.core.customizers.DelegatingMethodParameterCustomizer;
+import org.springdoc.core.providers.WebConversionServiceProvider;
 
 import org.springframework.beans.factory.config.BeanExpressionContext;
 import org.springframework.beans.factory.config.BeanExpressionResolver;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericResponseService.java
Patch:
@@ -49,6 +49,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springdoc.core.providers.JavadocProvider;
 
 import org.springframework.core.MethodParameter;
 import org.springframework.core.ResolvableType;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OperationService.java
Patch:
@@ -48,6 +48,7 @@
 import io.swagger.v3.oas.models.responses.ApiResponse;
 import io.swagger.v3.oas.models.responses.ApiResponses;
 import org.apache.commons.lang3.StringUtils;
+import org.springdoc.core.providers.JavadocProvider;
 
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.util.CollectionUtils;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/ParameterInfo.java
Patch:
@@ -21,7 +21,6 @@
 package org.springdoc.core;
 
 import java.lang.reflect.Parameter;
-import java.util.Locale;
 
 import io.swagger.v3.oas.annotations.enums.ParameterIn;
 import org.apache.commons.lang3.StringUtils;
@@ -87,9 +86,8 @@ public class ParameterInfo {
 	 * @param pName the parameter name
 	 * @param methodParameter the method parameter
 	 * @param genericParameterService the parameter builder
-	 * @param locale the locale
 	 */
-	public ParameterInfo(String pName, MethodParameter methodParameter, GenericParameterService genericParameterService, Locale locale) {
+	public ParameterInfo(String pName, MethodParameter methodParameter, GenericParameterService genericParameterService) {
 		RequestHeader requestHeader = methodParameter.getParameterAnnotation(RequestHeader.class);
 		RequestParam requestParam = methodParameter.getParameterAnnotation(RequestParam.class);
 		PathVariable pathVar = methodParameter.getParameterAnnotation(PathVariable.class);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/customizers/ActuatorOperationCustomizer.java
Patch:
@@ -32,7 +32,7 @@
 import org.springframework.web.method.HandlerMethod;
 
 import static org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE;
-import static org.springdoc.core.ActuatorProvider.getTag;
+import static org.springdoc.core.providers.ActuatorProvider.getTag;
 
 /**
  * The type Actuator operation customizer.

File: springdoc-openapi-common/src/main/java/org/springdoc/core/providers/ActuatorProvider.java
Patch:
@@ -18,14 +18,16 @@
  *
  */
 
-package org.springdoc.core;
+package org.springdoc.core.providers;
 
 import java.util.Map;
 import java.util.Optional;
 
 import io.swagger.v3.oas.models.ExternalDocumentation;
 import io.swagger.v3.oas.models.tags.Tag;
 import org.springdoc.api.AbstractOpenApiResource;
+import org.springdoc.core.Constants;
+import org.springdoc.core.SpringDocConfigProperties;
 
 import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
 import org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/providers/JavadocProvider.java
Patch:
@@ -18,7 +18,7 @@
  *
  */
 
-package org.springdoc.core;
+package org.springdoc.core.providers;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/providers/RepositoryRestResourceProvider.java
Patch:
@@ -1,4 +1,4 @@
-package org.springdoc.core;
+package org.springdoc.core.providers;
 
 import java.util.List;
 import java.util.Locale;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/providers/SecurityOAuth2Provider.java
Patch:
@@ -18,7 +18,7 @@
  *
  */
 
-package org.springdoc.core;
+package org.springdoc.core.providers;
 
 import java.util.Map;
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/providers/WebConversionServiceProvider.java
Patch:
@@ -1,4 +1,4 @@
-package org.springdoc.core;
+package org.springdoc.core.providers;
 
 import java.util.Optional;
 

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/SpringRepositoryRestResourceProvider.java
Patch:
@@ -37,8 +37,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springdoc.api.AbstractOpenApiResource;
-import org.springdoc.core.RepositoryRestResourceProvider;
 import org.springdoc.core.fn.RouterOperation;
+import org.springdoc.core.providers.RepositoryRestResourceProvider;
 import org.springdoc.data.rest.core.ControllerType;
 import org.springdoc.data.rest.core.DataRestRepository;
 import org.springdoc.data.rest.core.DataRestRouterOperationService;

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestRequestService.java
Patch:
@@ -154,7 +154,7 @@ public void buildCommonParameters(OpenAPI openAPI, RequestMethod requestMethod,
 		Class<?> domainType = dataRestRepository.getDomainType();
 		for (MethodParameter methodParameter : parameters) {
 			final String pName = methodParameter.getParameterName();
-			ParameterInfo parameterInfo = new ParameterInfo(pName, methodParameter, parameterBuilder, methodAttributes.getLocale());
+			ParameterInfo parameterInfo = new ParameterInfo(pName, methodParameter, parameterBuilder);
 			if (isParamToIgnore(methodParameter)) {
 				if (PersistentEntityResource.class.equals(methodParameter.getParameterType())) {
 					Schema<?> schema = SpringDocAnnotationsUtils.resolveSchemaFromType(domainType, openAPI.getComponents(), null, methodParameter.getParameterAnnotations());

File: springdoc-openapi-javadoc/src/main/java/org/springdoc/openapi/javadoc/JavadocPropertyCustomizer.java
Patch:
@@ -33,7 +33,7 @@
 import io.swagger.v3.oas.models.media.Schema;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.reflect.FieldUtils;
-import org.springdoc.core.JavadocProvider;
+import org.springdoc.core.providers.JavadocProvider;
 
 import org.springframework.util.CollectionUtils;
 

File: springdoc-openapi-javadoc/src/main/java/org/springdoc/openapi/javadoc/SpringDocJavadocConfiguration.java
Patch:
@@ -20,7 +20,7 @@
 
 package org.springdoc.openapi.javadoc;
 
-import org.springdoc.core.JavadocProvider;
+import org.springdoc.core.providers.JavadocProvider;
 
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;

File: springdoc-openapi-javadoc/src/main/java/org/springdoc/openapi/javadoc/SpringDocJavadocProvider.java
Patch:
@@ -32,7 +32,7 @@
 import com.github.therapi.runtimejavadoc.MethodJavadoc;
 import com.github.therapi.runtimejavadoc.ParamJavadoc;
 import com.github.therapi.runtimejavadoc.RuntimeJavadoc;
-import org.springdoc.core.JavadocProvider;
+import org.springdoc.core.providers.JavadocProvider;
 
 /**
  * The type Spring doc javadoc provider.

File: springdoc-openapi-native/src/main/java/org/springdoc/nativex/core/SpringDocHints.java
Patch:
@@ -120,14 +120,14 @@
 import org.springdoc.core.SwaggerUiConfigParameters;
 import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springdoc.core.SwaggerUiOAuthProperties;
-import org.springdoc.core.WebConversionServiceProvider;
 import org.springdoc.core.converters.AdditionalModelsConverter;
 import org.springdoc.core.converters.FileSupportConverter;
 import org.springdoc.core.converters.ModelConverterRegistrar;
 import org.springdoc.core.converters.PolymorphicModelConverter;
 import org.springdoc.core.converters.PropertyCustomizingConverter;
 import org.springdoc.core.converters.ResponseSupportConverter;
 import org.springdoc.core.converters.SchemaPropertyDeprecatingConverter;
+import org.springdoc.core.providers.WebConversionServiceProvider;
 import org.springdoc.ui.AbstractSwaggerWelcome;
 
 import org.springframework.beans.factory.InitializingBean;

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerConfig.java
Patch:
@@ -23,12 +23,12 @@
 import java.util.Optional;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.springdoc.core.ActuatorProvider;
 import org.springdoc.core.SpringDocConfigProperties;
 import org.springdoc.core.SpringDocConfiguration;
 import org.springdoc.core.SwaggerUiConfigParameters;
 import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springdoc.core.SwaggerUiOAuthProperties;
+import org.springdoc.core.providers.ActuatorProvider;
 
 import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
 import org.springframework.boot.actuate.autoconfigure.web.server.ConditionalOnManagementPort;

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWebMvcConfigurer.java
Patch:
@@ -22,8 +22,8 @@
 
 import java.util.Optional;
 
-import org.springdoc.core.ActuatorProvider;
 import org.springdoc.core.SwaggerUiConfigParameters;
+import org.springdoc.core.providers.ActuatorProvider;
 
 import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/ActuatorWebFluxProvider.java
Patch:
@@ -24,8 +24,8 @@
 import java.util.Map;
 import java.util.Optional;
 
-import org.springdoc.core.ActuatorProvider;
 import org.springdoc.core.SpringDocConfigProperties;
+import org.springdoc.core.providers.ActuatorProvider;
 
 import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
 import org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties;

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app146/SpringDocApp146Test.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.cloud.function.web.flux.ReactorAutoConfiguration;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
 
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;
@@ -33,14 +34,14 @@
 		properties = { "management.endpoints.web.exposure.include:*",
 				"springdoc.show-actuator=true",
 				"management.server.port=9096",
+				"management.endpoints.web.exposure.exclude=functions",
 				"management.server.base-path=/test",
 				"management.endpoints.web.base-path=/application" })
 public class SpringDocApp146Test  extends AbstractSpringDocActuatorTest {
 
-	@SpringBootApplication
+	@SpringBootApplication(exclude = {ReactorAutoConfiguration.class })
 	static class SpringDocTestApp {}
 
-
 	@Test
 	public void testApp() throws Exception {
 		EntityExchangeResult<byte[]> getResult =  webTestClient.get().uri(Constants.DEFAULT_API_DOCS_URL + "/"+Constants.ACTUATOR_DEFAULT_GROUP)

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app147/SpringDocApp147Test.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.cloud.function.web.flux.ReactorAutoConfiguration;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
 
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;
@@ -32,12 +33,13 @@
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
 		properties = { "management.endpoints.web.exposure.include:*",
 				"springdoc.show-actuator=true",
+				"management.endpoints.web.exposure.exclude=functions",
 				"management.server.port=9097",
 				"management.server.base-path=/test",
 				"management.endpoints.web.base-path=/application" })
 public class SpringDocApp147Test extends AbstractSpringDocActuatorTest {
 
-	@SpringBootApplication
+	@SpringBootApplication(exclude = { ReactorAutoConfiguration.class })
 	static class SpringDocTestApp {}
 
 

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app148/SpringDocApp148Test.java
Patch:
@@ -24,21 +24,23 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
+import org.springframework.cloud.function.web.flux.ReactorAutoConfiguration;
 
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;
 
 
 @SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT,
 		properties = { "management.endpoints.web.exposure.include:*",
 				"springdoc.show-actuator=true",
+				"management.endpoints.web.exposure.exclude=functions",
 				"management.server.port=9098",
 				"server.port=6666",
 				"springdoc.use-management-port=true",
 				"management.server.base-path=/test",
 				"management.endpoints.web.base-path=/application" })
 public class SpringDocApp148Test  extends AbstractSpringDocActuatorTest {
 
-	@SpringBootApplication
+	@SpringBootApplication(exclude = { ReactorAutoConfiguration.class })
 	static class SpringDocTestApp {}
 
 

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerConfig.java
Patch:
@@ -23,12 +23,12 @@
 import java.util.Optional;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.springdoc.core.ActuatorProvider;
 import org.springdoc.core.SpringDocConfigProperties;
 import org.springdoc.core.SpringDocConfiguration;
 import org.springdoc.core.SwaggerUiConfigParameters;
 import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springdoc.core.SwaggerUiOAuthProperties;
+import org.springdoc.core.providers.ActuatorProvider;
 
 import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
 import org.springframework.boot.actuate.autoconfigure.web.server.ConditionalOnManagementPort;

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWebFluxConfigurer.java
Patch:
@@ -22,9 +22,9 @@
 
 import java.util.Optional;
 
-import org.springdoc.core.ActuatorProvider;
 import org.springdoc.core.SpringDocConfigProperties;
 import org.springdoc.core.SwaggerUiConfigParameters;
+import org.springdoc.core.providers.ActuatorProvider;
 
 import org.springframework.web.reactive.config.ResourceHandlerRegistry;
 import org.springframework.web.reactive.config.WebFluxConfigurer;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app146/SpringDocApp146Test.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.cloud.function.web.mvc.ReactorAutoConfiguration;
 
 import static org.hamcrest.Matchers.is;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
@@ -36,12 +37,13 @@
 		properties = { "management.endpoints.web.exposure.include:*",
 				"springdoc.show-actuator=true",
 				"management.server.port=9096",
+				"management.endpoints.web.exposure.exclude=functions",
 				"server.servlet.context-path=/sample",
 				"management.server.base-path=/test",
 				"management.endpoints.web.base-path=/application" })
 public class SpringDocApp146Test extends AbstractSpringDocActuatorTest {
 
-	@SpringBootApplication
+	@SpringBootApplication(exclude = { ReactorAutoConfiguration.class })
 	static class SpringDocTestApp {}
 
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app147/SpringDocApp147Test.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.cloud.function.web.mvc.ReactorAutoConfiguration;
 
 import static org.hamcrest.Matchers.is;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
@@ -36,12 +37,13 @@
 		properties = { "management.endpoints.web.exposure.include:*",
 				"springdoc.show-actuator=true",
 				"management.server.port=9097",
+				"management.endpoints.web.exposure.exclude=functions",
 				"server.servlet.context-path=/sample",
 				"management.server.base-path=/test",
 				"management.endpoints.web.base-path=/application" })
 public class SpringDocApp147Test extends AbstractSpringDocActuatorTest {
 
-	@SpringBootApplication
+	@SpringBootApplication(exclude = { ReactorAutoConfiguration.class })
 	static class SpringDocTestApp {}
 
 	@Test

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app148/SpringDocApp148Test.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
+import org.springframework.cloud.function.web.mvc.ReactorAutoConfiguration;
 
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;
 
@@ -36,11 +37,12 @@
 				"server.servlet.context-path=/toto",
 				"springdoc.use-management-port=true",
 				"spring.mvc.servlet.path=/titi",
+				"management.endpoints.web.exposure.exclude=functions",
 				"management.server.base-path=/test",
 				"management.endpoints.web.base-path=/application" })
 public class SpringDocApp148Test extends AbstractSpringDocActuatorTest {
 
-	@SpringBootApplication
+	@SpringBootApplication(exclude = { ReactorAutoConfiguration.class })
 	static class SpringDocTestApp {}
 
 

File: springdoc-openapi-native/src/main/java/org/springdoc/nativex/core/SpringDocHints.java
Patch:
@@ -296,6 +296,7 @@
 @Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
+@ResourceHint(patterns = SpringDocHints.SPRINGDOC_CONFIG_PROPERTIES)
 public class SpringDocHints implements InitializingBean {
 
 	/**
@@ -306,7 +307,7 @@ public class SpringDocHints implements InitializingBean {
 	/**
 	 * The constant SPRINGDOC_CONFIG_PROPERTIES.
 	 */
-	private static final String SPRINGDOC_CONFIG_PROPERTIES = "springdoc.config.properties";
+	public static final String SPRINGDOC_CONFIG_PROPERTIES = "springdoc.config.properties";
 
 	/**
 	 * The constant SPRINGDOC_SWAGGERUI_VERSION.

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeCommon.java
Patch:
@@ -74,6 +74,7 @@ protected void calculateOauth2RedirectUrl(UriComponentsBuilder uriComponentsBuil
 	 * @param request the request
 	 */
 	void buildFromCurrentContextPath(HttpServletRequest request) {
+		super.init();
 		contextPath = request.getContextPath();
 		buildConfigUrl(ServletUriComponentsBuilder.fromCurrentContextPath());
 	}

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeCommon.java
Patch:
@@ -96,6 +96,7 @@ protected Map<String, Object> getSwaggerUiConfig(ServerHttpRequest request) {
 	 * @return the string
 	 */
 	void buildFromCurrentContextPath(ServerHttpRequest request) {
+		super.init();
 		contextPath = request.getPath().contextPath().value();
 		String url = UriComponentsBuilder.fromHttpRequest(request).toUriString();
 		if (!AntPathMatcher.DEFAULT_PATH_SEPARATOR.equals(request.getPath().toString()))

File: springdoc-openapi-common/src/main/java/org/springdoc/ui/AbstractSwaggerIndexTransformer.java
Patch:
@@ -171,7 +171,7 @@ protected String addParameters(String html) throws JsonProcessingException {
 				.filter(entry -> !SwaggerUiConfigParameters.OAUTH2_REDIRECT_URL_PROPERTY.equals(entry.getKey()))
 				.filter(entry -> !SwaggerUiConfigParameters.URL_PROPERTY.equals(entry.getKey()))
 				.filter(entry -> !SwaggerUiConfigParameters.URLS_PROPERTY.equals(entry.getKey()))
-				.filter(entry -> StringUtils.isNotEmpty((String) entry.getValue()))
+				.filter(entry -> SwaggerUiConfigParameters.VALIDATOR_URL_PROPERTY.equals(entry.getKey()) || StringUtils.isNotEmpty((String) entry.getValue()))
 				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,(e1, e2) -> e2,
 						LinkedHashMap::new));
 

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerConfig.java
Patch:
@@ -106,12 +106,13 @@ SwaggerUiHome swaggerUiHome(){
 	 * @param swaggerUiOAuthProperties the swagger ui o auth properties
 	 * @param swaggerUiConfigParameters the swagger ui config parameters
 	 * @param objectMapper the object mapper
+	 * @param swaggerWelcomeCommon the swagger welcome common
 	 * @return the swagger index transformer
 	 */
 	@Bean
 	@ConditionalOnMissingBean
-	SwaggerIndexTransformer indexPageTransformer(SwaggerUiConfigProperties swaggerUiConfig, SwaggerUiOAuthProperties swaggerUiOAuthProperties,  SwaggerUiConfigParameters swaggerUiConfigParameters, ObjectMapper objectMapper) {
-		return new SwaggerIndexPageTransformer(swaggerUiConfig, swaggerUiOAuthProperties,swaggerUiConfigParameters, objectMapper);
+	SwaggerIndexTransformer indexPageTransformer(SwaggerUiConfigProperties swaggerUiConfig, SwaggerUiOAuthProperties swaggerUiOAuthProperties,  SwaggerUiConfigParameters swaggerUiConfigParameters, ObjectMapper objectMapper,SwaggerWelcomeCommon swaggerWelcomeCommon) {
+		return new SwaggerIndexPageTransformer(swaggerUiConfig, swaggerUiOAuthProperties,swaggerUiConfigParameters, objectMapper, swaggerWelcomeCommon);
 	}
 
 	/**

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeCommon.java
Patch:
@@ -73,7 +73,7 @@ protected void calculateOauth2RedirectUrl(UriComponentsBuilder uriComponentsBuil
 	 *
 	 * @param request the request
 	 */
-	private void buildFromCurrentContextPath(HttpServletRequest request) {
+	void buildFromCurrentContextPath(HttpServletRequest request) {
 		contextPath = request.getContextPath();
 		buildConfigUrl(ServletUriComponentsBuilder.fromCurrentContextPath());
 	}

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app24/SpringDocApp24Test.java
Patch:
@@ -23,10 +23,7 @@
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
-import org.springframework.test.web.servlet.MvcResult;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerConfig.java
Patch:
@@ -125,12 +125,13 @@ SwaggerWebFluxConfigurer swaggerWebFluxConfigurer(SwaggerUiConfigParameters swag
 	 * @param swaggerUiOAuthProperties the swagger ui o auth properties
 	 * @param swaggerUiConfigParameters the swagger ui config parameters
 	 * @param objectMapper the object mapper
+	 * @param swaggerWelcomeCommon the swagger welcome common
 	 * @return the swagger index transformer
 	 */
 	@Bean
 	@ConditionalOnMissingBean
-	SwaggerIndexTransformer indexPageTransformer(SwaggerUiConfigProperties swaggerUiConfig ,SwaggerUiOAuthProperties swaggerUiOAuthProperties, SwaggerUiConfigParameters swaggerUiConfigParameters, ObjectMapper objectMapper) {
-		return new SwaggerIndexPageTransformer(swaggerUiConfig, swaggerUiOAuthProperties,swaggerUiConfigParameters,  objectMapper);
+	SwaggerIndexTransformer indexPageTransformer(SwaggerUiConfigProperties swaggerUiConfig ,SwaggerUiOAuthProperties swaggerUiOAuthProperties, SwaggerUiConfigParameters swaggerUiConfigParameters, ObjectMapper objectMapper, SwaggerWelcomeCommon swaggerWelcomeCommon) {
+		return new SwaggerIndexPageTransformer(swaggerUiConfig, swaggerUiOAuthProperties,swaggerUiConfigParameters,  objectMapper, swaggerWelcomeCommon);
 	}
 
 	/**

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeCommon.java
Patch:
@@ -95,7 +95,7 @@ protected Map<String, Object> getSwaggerUiConfig(ServerHttpRequest request) {
 	 * @param request the request
 	 * @return the string
 	 */
-	private void buildFromCurrentContextPath(ServerHttpRequest request) {
+	void buildFromCurrentContextPath(ServerHttpRequest request) {
 		contextPath = request.getPath().contextPath().value();
 		String url = UriComponentsBuilder.fromHttpRequest(request).toUriString();
 		if (!AntPathMatcher.DEFAULT_PATH_SEPARATOR.equals(request.getPath().toString()))

File: springdoc-openapi-common/src/main/java/org/springdoc/ui/AbstractSwaggerIndexTransformer.java
Patch:
@@ -173,7 +173,7 @@ protected String addParameters(String html) throws JsonProcessingException {
 				.filter(entry -> !SwaggerUiConfigParameters.OAUTH2_REDIRECT_URL_PROPERTY.equals(entry.getKey()) || !Constants.SWAGGER_UI_OAUTH_REDIRECT_URL.equals(entry.getValue()))
 				.filter(entry -> !SwaggerUiConfigParameters.URL_PROPERTY.equals(entry.getKey()))
 				.filter(entry -> !SwaggerUiConfigParameters.LAYOUT_PROPERTY.equals(entry.getKey()))
-				.filter(entry -> SwaggerUiConfigParameters.URLS_PROPERTY.equals(entry.getKey()) || StringUtils.isNotEmpty((String) entry.getValue()))
+				.filter(entry -> SwaggerUiConfigParameters.URLS_PROPERTY.equals(entry.getKey()) || SwaggerUiConfigParameters.VALIDATOR_URL_PROPERTY.equals(entry.getKey()) || StringUtils.isNotEmpty((String) entry.getValue()))
 				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
 
 		if (!CollectionUtils.isEmpty(parametersObjectMap)) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RepositoryRestResourceProvider.java
Patch:
@@ -23,11 +23,11 @@ public interface RepositoryRestResourceProvider {
 	List<RouterOperation> getRouterOperations(OpenAPI openAPI, Locale locale);
 
 	/**
-	 * Gets repository rest controller endpoints.
+	 * Gets Base PathAwar eController endpoints.
 	 *
-	 * @return the repository rest controller endpoints
+	 * @return the Base PathAware Controller endpoints
 	 */
-	Map<String, Object> getRepositoryRestControllerEndpoints();
+	Map<String, Object> getBasePathAwareControllerEndpoints();
 
 	/**
 	 * Gets handler methods.

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -191,7 +191,7 @@ protected void getPaths(Map<String, Object> restControllers, Locale locale) {
 				calculatePath(operationList, locale);
 				restResourceProvider.customize(openAPIService.getCalculatedOpenAPI());
 				Map<RequestMappingInfo, HandlerMethod> mapDataRest = restResourceProvider.getHandlerMethods();
-				Map<String, Object> requestMappingMap = restResourceProvider.getRepositoryRestControllerEndpoints();
+				Map<String, Object> requestMappingMap = restResourceProvider.getBasePathAwareControllerEndpoints();
 				Class[] additionalRestClasses = requestMappingMap.values().stream().map(Object::getClass).toArray(Class[]::new);
 				AbstractOpenApiResource.addRestControllers(additionalRestClasses);
 				calculatePath(requestMappingMap, mapDataRest, locale);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -400,7 +400,6 @@ static BeanFactoryPostProcessor springdocBeanFactoryPostProcessor3(List<GroupedO
 		 */
 		@Bean
 		@Lazy(false)
-		@ConditionalOnMissingBean
 		@ConditionalOnManagementPort(ManagementPortType.SAME)
 		OperationCustomizer actuatorCustomizer() {
 			return new ActuatorOperationCustomizer();
@@ -414,7 +413,6 @@ OperationCustomizer actuatorCustomizer() {
 		 */
 		@Bean
 		@Lazy(false)
-		@ConditionalOnMissingBean
 		@ConditionalOnManagementPort(ManagementPortType.SAME)
 		OpenApiCustomiser actuatorOpenApiCustomiser(WebEndpointProperties webEndpointProperties) {
 			return new ActuatorOpenApiCustomizer(webEndpointProperties);

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/SpringDocApp68Test.java
Patch:
@@ -83,7 +83,7 @@ public void testActuator() throws Exception {
 	public void testActuatorDescription() throws Exception {
 		mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL)).andExpect(status().isOk())
 				.andExpect(jsonPath("$.openapi", is("3.0.1")))
-				.andExpect(jsonPath("$.tags", hasSize(1)))
+				.andExpect(jsonPath("$.tags", hasSize(4)))
 				.andExpect(jsonPath("$.tags[?(@.name == '" + Constants.SPRINGDOC_ACTUATOR_TAG + "')].name", contains(Constants.SPRINGDOC_ACTUATOR_TAG)))
 				.andExpect(jsonPath("$.tags[?(@.name == '" + Constants.SPRINGDOC_ACTUATOR_TAG + "')].description", contains(Constants.SPRINGDOC_ACTUATOR_DESCRIPTION)))
 				.andExpect(jsonPath("$.tags[?(@.name == '" + Constants.SPRINGDOC_ACTUATOR_TAG + "')].externalDocs.description", contains(Constants.SPRINGDOC_ACTUATOR_DOC_DESCRIPTION)))

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerUiHome.java
Patch:
@@ -29,6 +29,7 @@
 
 import static org.springdoc.core.Constants.MVC_SERVLET_PATH;
 import static org.springdoc.core.Constants.SWAGGER_UI_PATH;
+import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 import static org.springframework.web.servlet.view.UrlBasedViewResolver.REDIRECT_URL_PREFIX;
 
 /**
@@ -43,7 +44,7 @@ public class SwaggerUiHome {
 	@Value(MVC_SERVLET_PATH)
 	private String mvcServletPath;
 
-	@GetMapping
+	@GetMapping(DEFAULT_PATH_SEPARATOR)
 	@Operation(hidden = true)
 	public String index() {
 		StringBuilder uiRootPath = new StringBuilder();

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerUiHome.java
Patch:
@@ -36,6 +36,7 @@
 import org.springframework.web.util.UriComponentsBuilder;
 
 import static org.springdoc.core.Constants.SWAGGER_UI_PATH;
+import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 
 /**
  * Home redirection to swagger api documentation
@@ -70,7 +71,7 @@ public SwaggerUiHome(Optional<WebFluxProperties> optionalWebFluxProperties) {
 	 * @param response the response
 	 * @return the mono
 	 */
-	@GetMapping
+	@GetMapping(DEFAULT_PATH_SEPARATOR)
 	@Operation(hidden = true)
 	public Mono<Void> index(ServerHttpResponse response) {
 		UriComponentsBuilder uriBuilder =  UriComponentsBuilder.fromUriString(this.basePath + swaggerUiPath);

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerUiHome.java
Patch:
@@ -36,7 +36,6 @@
 import org.springframework.web.util.UriComponentsBuilder;
 
 import static org.springdoc.core.Constants.SWAGGER_UI_PATH;
-import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 
 /**
  * Home redirection to swagger api documentation
@@ -71,7 +70,7 @@ public SwaggerUiHome(Optional<WebFluxProperties> optionalWebFluxProperties) {
 	 * @param response the response
 	 * @return the mono
 	 */
-	@GetMapping(DEFAULT_PATH_SEPARATOR)
+	@GetMapping
 	@Operation(hidden = true)
 	public Mono<Void> index(ServerHttpResponse response) {
 		UriComponentsBuilder uriBuilder =  UriComponentsBuilder.fromUriString(this.basePath + swaggerUiPath);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigParameters.java
Patch:
@@ -122,7 +122,6 @@ public SwaggerUiConfigParameters(SwaggerUiConfigProperties swaggerUiConfig) {
 		this.urls = swaggerUiConfig.getUrls() == null ? new HashSet<>() : swaggerUiConfig.getUrls();
 		this.urlsPrimaryName = swaggerUiConfig.getUrlsPrimaryName();
 		this.groupsOrder = swaggerUiConfig.getGroupsOrder();
-		this.syntaxHighlight = swaggerUiConfig.getSyntaxHighlight();
 		this.tryItOutEnabled = swaggerUiConfig.getTryItOutEnabled();
 		this.persistAuthorization = swaggerUiConfig.getPersistAuthorization();
 		this.queryConfigEnabled = swaggerUiConfig.getQueryConfigEnabled();

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerConfig.java
Patch:
@@ -104,13 +104,14 @@ SwaggerUiHome swaggerUiHome(){
 	 *
 	 * @param swaggerUiConfig the swagger ui config
 	 * @param swaggerUiOAuthProperties the swagger ui o auth properties
+	 * @param swaggerUiConfigParameters the swagger ui config parameters
 	 * @param objectMapper the object mapper
 	 * @return the swagger index transformer
 	 */
 	@Bean
 	@ConditionalOnMissingBean
-	SwaggerIndexTransformer indexPageTransformer(SwaggerUiConfigProperties swaggerUiConfig, SwaggerUiOAuthProperties swaggerUiOAuthProperties, ObjectMapper objectMapper) {
-		return new SwaggerIndexPageTransformer(swaggerUiConfig, swaggerUiOAuthProperties, objectMapper);
+	SwaggerIndexTransformer indexPageTransformer(SwaggerUiConfigProperties swaggerUiConfig, SwaggerUiOAuthProperties swaggerUiOAuthProperties,  SwaggerUiConfigParameters swaggerUiConfigParameters, ObjectMapper objectMapper) {
+		return new SwaggerIndexPageTransformer(swaggerUiConfig, swaggerUiOAuthProperties,swaggerUiConfigParameters, objectMapper);
 	}
 
 	/**

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocAppRedirectWithPrefixTest.java
Patch:
@@ -43,6 +43,8 @@ public void shouldRedirectWithPrefix() throws Exception {
 				.andExpect(status().isOk())
 				.andExpect(jsonPath("validatorUrl", equalTo("")))
 				.andExpect(jsonPath("oauth2RedirectUrl", equalTo("http://localhost/documentation/swagger-ui/oauth2-redirect.html")));
+
+		super.checkHTML("results/app1-prefix", "/documentation/swagger-ui/index.html");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocRedirectDefaultTest.java
Patch:
@@ -33,7 +33,7 @@ public class SpringDocRedirectDefaultTest extends AbstractSpringDocTest {
 	public void shouldRedirectWithDefaultQueryParams() throws Exception {
 		mockMvc.perform(get("/swagger-ui.html"))
 				.andExpect(status().isFound())
-				.andExpect(header().string("Location", "/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config"));
+				.andExpect(header().string("Location", "/swagger-ui/index.html"));
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocRedirectFilterTest.java
Patch:
@@ -35,7 +35,7 @@ public class SpringDocRedirectFilterTest extends AbstractSpringDocTest {
 	public void shouldRedirectWithConfigUrlIgnoringQueryParams() throws Exception {
 		mockMvc.perform(get("/swagger-ui.html"))
 				.andExpect(status().isFound())
-				.andExpect(header().string("Location", "/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config&filter=false"));
+				.andExpect(header().string("Location", "/swagger-ui/index.html"));
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocRedirectOriginalQueryParamsTest.java
Patch:
@@ -34,15 +34,15 @@ public void shouldRedirectWithOriginalQueryParams() throws Exception {
         mockMvc.perform(get("/swagger-ui.html").queryParam("paramA", "123").queryParam("paramB", "e n c o d e d ! % &"))
                 .andExpect(status().isFound())
                 .andExpect(header().string("Location",
-                        "/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config&paramA=123&paramB=e%20n%20c%20o%20d%20e%20d%20!%20%25%20%26"));
+                        "/swagger-ui/index.html?paramA=123&paramB=e%20n%20c%20o%20d%20e%20d%20!%20%25%20%26"));
     }
 
     @Test
     public void shouldRedirectWithOriginalQueryParamsHavingMultipleValues() throws Exception {
         mockMvc.perform(get("/swagger-ui.html").queryParam("paramA", "1", "2", "3"))
                 .andExpect(status().isFound())
                 .andExpect(header().string("Location",
-                        "/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config&paramA=1&paramA=2&paramA=3"));
+                        "/swagger-ui/index.html?paramA=1&paramA=2&paramA=3"));
     }
 
     @SpringBootApplication

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app20/SpringDocApp20Test.java
Patch:
@@ -41,7 +41,7 @@ public class SpringDocApp20Test extends AbstractSpringDocTest {
 	public void testAddSwaggerUiVersionToPath() throws Exception {
 		mockMvc.perform(get("/swagger-ui.html"))
 				.andExpect(status().isFound())
-				.andExpect(header().string("Location", "/swagger-ui/"+swaggerUiConfig.getVersion()+"/index.html?configUrl=/v3/api-docs/swagger-config"));
+				.andExpect(header().string("Location", "/swagger-ui/"+swaggerUiConfig.getVersion()+"/index.html"));
 	}
 
 

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app5/SpringDocApp5Test.java
Patch:
@@ -30,13 +30,14 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 @TestPropertySource(properties = "server.servlet.context-path=/context-path")
-public class SpringDocOauthContextPathTest extends AbstractSpringDocTest {
+public class SpringDocApp5Test extends AbstractSpringDocTest {
 
 	@Test
 	public void oauth2_redirect_url_calculated_with_context_path() throws Exception {
 		mockMvc.perform(get("/context-path/v3/api-docs/swagger-config").contextPath("/context-path"))
 				.andExpect(status().isOk())
 				.andExpect(jsonPath("oauth2RedirectUrl", equalTo("http://localhost/context-path/swagger-ui/oauth2-redirect.html")));
+		super.chekHTML();
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerConfig.java
Patch:
@@ -123,13 +123,14 @@ SwaggerWebFluxConfigurer swaggerWebFluxConfigurer(SwaggerUiConfigParameters swag
 	 *
 	 * @param swaggerUiConfig the swagger ui config
 	 * @param swaggerUiOAuthProperties the swagger ui o auth properties
+	 * @param swaggerUiConfigParameters the swagger ui config parameters
 	 * @param objectMapper the object mapper
 	 * @return the swagger index transformer
 	 */
 	@Bean
 	@ConditionalOnMissingBean
-	SwaggerIndexTransformer indexPageTransformer(SwaggerUiConfigProperties swaggerUiConfig ,SwaggerUiOAuthProperties swaggerUiOAuthProperties, ObjectMapper objectMapper) {
-		return new SwaggerIndexPageTransformer(swaggerUiConfig, swaggerUiOAuthProperties, objectMapper);
+	SwaggerIndexTransformer indexPageTransformer(SwaggerUiConfigProperties swaggerUiConfig ,SwaggerUiOAuthProperties swaggerUiOAuthProperties, SwaggerUiConfigParameters swaggerUiConfigParameters, ObjectMapper objectMapper) {
+		return new SwaggerIndexPageTransformer(swaggerUiConfig, swaggerUiOAuthProperties,swaggerUiConfigParameters,  objectMapper);
 	}
 
 	/**

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirecFilterTest.java
Patch:
@@ -36,8 +36,8 @@ public void shouldRedirectWithConfigUrlIgnoringQueryParams() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config&filter=false"));
-
+				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
+		super.checkHTML("index1-filter");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectConfigUrlTest.java
Patch:
@@ -39,8 +39,9 @@ public void shouldRedirectWithConfigUrlIgnoringQueryParams() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html?configUrl=/foo/bar"));
+				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
 
+		super.checkHTML("index1-configurl");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectDefaultTest.java
Patch:
@@ -33,11 +33,12 @@ public void shouldRedirectWithDefaultQueryParams() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config"));
+				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
 
 		webTestClient.get().uri("/v3/api-docs/swagger-config").exchange()
 				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl").isEqualTo("");
 
+		super.checkHTML("index1-default");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectLayoutTest.java
Patch:
@@ -36,8 +36,9 @@ public void shouldRedirectWithConfigUrlIgnoringQueryParams() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config&layout=BaseLayout"));
+				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
 
+		super.checkHTML("index1-layout");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectWithConfigTest.java
Patch:
@@ -38,10 +38,12 @@ public void shouldRedirectWithConfiguredParams() {
 				.expectStatus().isFound();
 
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/index.html?configUrl=/baf/batz/swagger-config"));
+				.value("Location", Matchers.is("/webjars/swagger-ui/index.html"));
 
 		webTestClient.get().uri("/baf/batz/swagger-config").exchange()
 				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl").isEqualTo("/foo/validate");
+
+		super.checkHTML("index1");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app22/SpringDocApp22Test.java
Patch:
@@ -39,7 +39,7 @@ public void testAddSwaggerUiVersionToPath() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/webjars/swagger-ui/"+swaggerUiConfig.getVersion()+"/index.html?configUrl=/v3/api-docs/swagger-config"));
+				.value("Location", Matchers.is("/webjars/swagger-ui/"+swaggerUiConfig.getVersion()+"/index.html"));
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app3/SpringDocApp3RedirectDefaultTest.java
Patch:
@@ -38,12 +38,14 @@ public void shouldRedirectWithDefaultQueryParams() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/documentation/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/documentation/webjars/swagger-ui/index.html?configUrl=/documentation/v3/api-docs/swagger-config"));
+				.value("Location", Matchers.is("/documentation/webjars/swagger-ui/index.html"));
 
 		webTestClient.get().uri("/documentation/v3/api-docs/swagger-config").exchange()
 				.expectStatus().isOk().expectBody()
 				.jsonPath("$.validatorUrl").isEqualTo("")
 				.jsonPath("$.oauth2RedirectUrl").isEqualTo("/documentation/webjars/swagger-ui/oauth2-redirect.html");
+
+		super.checkHTML("index3", "/documentation/webjars/swagger-ui/index.html");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app3/SpringDocApp3RedirectWithPrefixTest.java
Patch:
@@ -38,7 +38,7 @@ public void shouldRedirectWithPrefix() {
 		WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/documentation/swagger-ui.html").exchange()
 				.expectStatus().isFound();
 		responseSpec.expectHeader()
-				.value("Location", Matchers.is("/documentation/webjars-pref/swagger-ui/index.html?configUrl=/documentation/v3/api-docs/swagger-config"));
+				.value("Location", Matchers.is("/documentation/webjars-pref/swagger-ui/index.html"));
 		webTestClient.get().uri("/documentation/webjars-pref/swagger-ui/index.html").exchange()
 				.expectStatus().isOk();
 		webTestClient.get().uri("/documentation/v3/api-docs/swagger-config").exchange()

File: springdoc-openapi-javadoc/src/main/java/org/springdoc/openapi/javadoc/JavadocPropertyCustomizer.java
Patch:
@@ -78,7 +78,7 @@ public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterato
 						Schema existingSchema = context.resolve(type);
 						setJavadocDescription(fields, existingSchema);
 					}
-					else if (resolvedSchema.get$ref() != null && resolvedSchema.get$ref().contains(AnnotationsUtils.COMPONENTS_REF)) {
+					else if (resolvedSchema != null && resolvedSchema.get$ref() != null && resolvedSchema.get$ref().contains(AnnotationsUtils.COMPONENTS_REF)) {
 						String schemaName = resolvedSchema.get$ref().substring(21);
 						Schema existingSchema = context.getDefinedModels().get(schemaName);
 						setJavadocDescription(fields, existingSchema);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocAnnotationsUtils.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.Map;
 import java.util.Optional;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonView;
 import io.swagger.v3.core.converter.AnnotatedType;
 import io.swagger.v3.core.converter.ModelConverters;
@@ -74,6 +75,7 @@ public class SpringDocAnnotationsUtils extends AnnotationsUtils {
 
 	static {
 		ANNOTATIONS_TO_IGNORE.add(Hidden.class);
+		ANNOTATIONS_TO_IGNORE.add(JsonIgnore.class);
 		ANNOTATIONS_TO_IGNORE.add(RequestAttribute.class);
 	}
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app102/RequestParams.java
Patch:
@@ -4,13 +4,15 @@
 import java.util.List;
 import java.util.Optional;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import io.swagger.v3.oas.annotations.Parameter;
 
 import org.springframework.lang.Nullable;
 
 public class RequestParams {
 
 	@Parameter(description = "string parameter")
+	@JsonIgnore
 	private String stringParam;
 
 	@Deprecated

File: springdoc-openapi-security/src/main/java/org/springdoc/security/SpringDocSecurityConfiguration.java
Patch:
@@ -123,7 +123,7 @@ OpenApiCustomiser springSecurityLoginEndpointCustomiser(ApplicationContext appli
 						Schema<?> schema = new ObjectSchema()
 								.addProperties(usernamePasswordAuthenticationFilter.getUsernameParameter(), new StringSchema())
 								.addProperties(usernamePasswordAuthenticationFilter.getPasswordParameter(), new StringSchema());
-						RequestBody requestBody = new RequestBody().content(new Content().addMediaType("loginRequestBody", new MediaType().schema(schema)));
+						RequestBody requestBody = new RequestBody().content(new Content().addMediaType(org.springframework.http.MediaType.APPLICATION_JSON_VALUE, new MediaType().schema(schema)));
 						operation.requestBody(requestBody);
 						ApiResponses apiResponses = new ApiResponses();
 						apiResponses.addApiResponse(String.valueOf(HttpStatus.OK.value()), new ApiResponse().description(HttpStatus.OK.getReasonPhrase()));

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app171/HelloLocaleController.java
Patch:
@@ -21,12 +21,12 @@
 import javax.validation.Valid;
 import javax.validation.constraints.NotBlank;
 
+import io.swagger.v3.oas.annotations.tags.Tag;
+
 import org.springframework.http.HttpEntity;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import io.swagger.v3.oas.annotations.tags.Tag;
-
 @RestController
 @Tag(name = "greeting", description = "test")
 public class HelloLocaleController {

File: springdoc-openapi-javadoc/src/test/java/test/org/springdoc/api/app94/SpringDocApp94Test.java
Patch:
@@ -45,7 +45,6 @@
 
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.ObjectFactory;
-import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
@@ -138,11 +137,10 @@ public RequestMappingHandlerMapping defaultTestHandlerMapping(GreetingController
 		@Bean(name = "openApiResource")
 		public OpenApiWebMvcResource openApiResource(ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory, AbstractRequestService requestBuilder, GenericResponseService responseBuilder,
 				OperationService operationParser,Optional<List<OperationCustomizer>> operationCustomizers,
-				@Qualifier("defaultTestHandlerMapping") RequestMappingHandlerMapping requestMappingHandlerMapping,
 				Optional<ActuatorProvider> actuatorProvider, SpringDocConfigProperties springDocConfigProperties,
 				Optional<List<OpenApiCustomiser>> openApiCustomisers, Optional<SecurityOAuth2Provider> springSecurityOAuth2Provider,
 				Optional<RouterFunctionProvider> routerFunctionProvider, Optional<RepositoryRestResourceProvider> repositoryRestResourceProvider) {
-			return new OpenApiWebMvcResource(DEFAULT_GROUP_NAME, openAPIBuilderObjectFactory, requestBuilder, responseBuilder, operationParser, requestMappingHandlerMapping,
+			return new OpenApiWebMvcResource(DEFAULT_GROUP_NAME, openAPIBuilderObjectFactory, requestBuilder, responseBuilder, operationParser,
 					actuatorProvider,operationCustomizers, openApiCustomisers, springDocConfigProperties, springSecurityOAuth2Provider,routerFunctionProvider, repositoryRestResourceProvider);
 		}
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app94/SpringDocApp94Test.java
Patch:
@@ -45,7 +45,6 @@
 
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.ObjectFactory;
-import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
@@ -94,11 +93,10 @@ public RequestMappingHandlerMapping defaultTestHandlerMapping(GreetingController
 		@Bean(name = "openApiResource")
 		public OpenApiWebMvcResource openApiResource(ObjectFactory<OpenAPIService> openAPIBuilderObjectFactory, AbstractRequestService requestBuilder, GenericResponseService responseBuilder,
 				OperationService operationParser,Optional<List<OperationCustomizer>> operationCustomizers,
-				@Qualifier("defaultTestHandlerMapping") RequestMappingHandlerMapping requestMappingHandlerMapping,
 				Optional<ActuatorProvider> actuatorProvider, SpringDocConfigProperties springDocConfigProperties,
 				Optional<List<OpenApiCustomiser>> openApiCustomisers, Optional<SecurityOAuth2Provider> springSecurityOAuth2Provider,
 				Optional<RouterFunctionProvider> routerFunctionProvider, Optional<RepositoryRestResourceProvider> repositoryRestResourceProvider) {
-			return new OpenApiWebMvcResource(DEFAULT_GROUP_NAME, openAPIBuilderObjectFactory, requestBuilder, responseBuilder, operationParser, requestMappingHandlerMapping,
+			return new OpenApiWebMvcResource(DEFAULT_GROUP_NAME, openAPIBuilderObjectFactory, requestBuilder, responseBuilder, operationParser,
 					actuatorProvider,operationCustomizers, openApiCustomisers, springDocConfigProperties, springSecurityOAuth2Provider,routerFunctionProvider, repositoryRestResourceProvider);
 		}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 
 package org.springdoc.core;
 
+import java.nio.charset.Charset;
 import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
@@ -101,6 +102,7 @@ public class SpringDocConfiguration {
 
 	static {
 		getConfig().replaceWithSchema(ObjectNode.class, new ObjectSchema())
+				.replaceWithClass(Charset.class, String.class)
 				.addResponseWrapperToIgnore(DeferredResult.class);
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -319,19 +319,18 @@ GenericParameterService parameterBuilder(PropertyResolverUtils propertyResolverU
 	/**
 	 * Properties resolver for schema open api customiser.
 	 *
-	 * @param propertyResolverUtils the property resolver utils
 	 * @param openAPIService the open api builder
 	 * @return the open api customiser
 	 */
 	@Bean
 	@ConditionalOnProperty(SPRINGDOC_SCHEMA_RESOLVE_PROPERTIES)
 	@Lazy(false)
-	OpenApiCustomiser propertiesResolverForSchema(PropertyResolverUtils propertyResolverUtils, OpenAPIService openAPIService) {
+	OpenApiCustomiser propertiesResolverForSchema(OpenAPIService openAPIService) {
 		return openApi -> {
 			Components components = openApi.getComponents();
 			Map<String, Schema> schemas = components.getSchemas();
 			if (!CollectionUtils.isEmpty(schemas))
-				schemas.values().forEach(schema -> openAPIService.resolveProperties(schema, propertyResolverUtils, Locale.getDefault()));
+				schemas.values().forEach(schema -> openAPIService.resolveProperties(schema, Locale.getDefault()));
 		};
 	}
 

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestTagsService.java
Patch:
@@ -103,7 +103,7 @@ private void buildTags(Operation operation, HandlerMethod handlerMethod,
 			Set<Tag> tags = new HashSet<>();
 			Set<String> tagsStr = new HashSet<>();
 			Class<?> repositoryType = dataRestRepository.getRepositoryType();
-			openAPIService.buildTagsFromClass(repositoryType, tags, tagsStr);
+			openAPIService.buildTagsFromClass(repositoryType, tags, tagsStr, dataRestRepository.getLocale());
 			if (!CollectionUtils.isEmpty(tagsStr))
 				tagsStr.forEach(operation::addTagsItem);
 			else {

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app14/HelloController.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.web.bind.annotation.RestController;
 
 @RestController
-@Tag(name = "greeting")
+@Tag(name = "greeting", description = "test")
 public class HelloController {
 
 	@GetMapping("/persons")

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerUiHome.java
Patch:
@@ -62,7 +62,7 @@ public class SwaggerUiHome {
 	 * @param optionalWebFluxProperties the optional web flux properties
 	 */
 	public SwaggerUiHome(Optional<WebFluxProperties> optionalWebFluxProperties) {
-		optionalWebFluxProperties.ifPresent(webFluxProperties -> this.basePath = webFluxProperties.getBasePath());
+		optionalWebFluxProperties.ifPresent(webFluxProperties -> this.basePath = StringUtils.defaultIfEmpty(webFluxProperties.getBasePath(),StringUtils.EMPTY ));
 	}
 
 	/**

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -80,6 +80,7 @@
 import static org.springdoc.core.Constants.SPRINGDOC_DEPRECATING_CONVERTER_ENABLED;
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
 import static org.springdoc.core.Constants.SPRINGDOC_PAGEABLE_CONVERTER_ENABLED;
+import static org.springdoc.core.Constants.SPRINGDOC_POLYMORPHIC_CONVERTER_ENABLED;
 import static org.springdoc.core.Constants.SPRINGDOC_SCHEMA_RESOLVE_PROPERTIES;
 import static org.springdoc.core.Constants.SPRINGDOC_SHOW_ACTUATOR;
 import static org.springdoc.core.SpringDocUtils.getConfig;
@@ -193,6 +194,7 @@ PageableOpenAPIConverter pageableOpenAPIConverter() {
 	 */
 	@Bean
 	@ConditionalOnMissingBean
+	@ConditionalOnProperty(name = SPRINGDOC_POLYMORPHIC_CONVERTER_ENABLED, matchIfMissing = true)
 	@Lazy(false)
 	PolymorphicModelConverter polymorphicModelConverter() {
 		return new PolymorphicModelConverter();

File: springdoc-openapi-javadoc/src/main/java/org/springdoc/openapi/javadoc/JavadocPropertyCustomizer.java
Patch:
@@ -75,7 +75,7 @@ public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterato
 				List<Field> fields = FieldUtils.getAllFieldsList(cls);
 				if (!CollectionUtils.isEmpty(fields)) {
 					if (!type.isSchemaProperty()) {
-						Schema existingSchema = context.getDefinedModels().get((cls).getSimpleName());
+						Schema existingSchema = context.resolve(type);
 						setJavadocDescription(fields, existingSchema);
 					}
 					else if (resolvedSchema.get$ref() != null && resolvedSchema.get$ref().contains(AnnotationsUtils.COMPONENTS_REF)) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -253,11 +253,12 @@ OperationService operationBuilder(GenericParameterService parameterBuilder, Requ
 	 *
 	 * @param factory the factory
 	 * @param messageSource the message source
+	 * @param springDocConfigProperties the spring doc config properties
 	 * @return the property resolver utils
 	 */
 	@Bean
-	PropertyResolverUtils propertyResolverUtils(ConfigurableBeanFactory factory, MessageSource messageSource) {
-		return new PropertyResolverUtils(factory, messageSource);
+	PropertyResolverUtils propertyResolverUtils(ConfigurableBeanFactory factory, MessageSource messageSource, SpringDocConfigProperties springDocConfigProperties) {
+		return new PropertyResolverUtils(factory, messageSource,springDocConfigProperties);
 	}
 
 	/**

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -106,6 +106,7 @@
 import org.springframework.web.method.HandlerMethod;
 
 import static org.springdoc.core.Constants.ACTUATOR_DEFAULT_GROUP;
+import static org.springdoc.core.Constants.DOT;
 import static org.springdoc.core.Constants.LINKS_SCHEMA_CUSTOMISER;
 import static org.springdoc.core.Constants.OPERATION_ATTRIBUTE;
 import static org.springdoc.core.Constants.SPRING_MVC_SERVLET_PATH;
@@ -667,10 +668,10 @@ protected boolean isPackageToScan(Package aPackage) {
 		}
 		boolean include = CollectionUtils.isEmpty(packagesToScan)
 				|| packagesToScan.stream().anyMatch(pack -> packageName.equals(pack)
-				|| packageName.startsWith(pack + "."));
+				|| packageName.startsWith(pack + DOT));
 		boolean exclude = !CollectionUtils.isEmpty(packagesToExclude)
 				&& (packagesToExclude.stream().anyMatch(pack -> packageName.equals(pack)
-				|| packageName.startsWith(pack + ".")));
+				|| packageName.startsWith(pack + DOT)));
 
 		return include && !exclude;
 	}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/MethodParameterPojoExtractor.java
Patch:
@@ -49,6 +49,8 @@
 
 import org.springframework.core.MethodParameter;
 
+import static org.springdoc.core.Constants.DOT;
+
 /**
  * The type Method parameter pojo extractor.
  * @author bnasslahsen
@@ -129,7 +131,7 @@ private static Stream<MethodParameter> fromGetterOfField(Class<?> paramClass, Fi
 		else if (field.getGenericType() instanceof TypeVariable<?>)
 			return extractTypeParameter(paramClass, (TypeVariable<?>) field.getGenericType(), field, fieldNamePrefix);
 		else
-			return extractFrom(field.getType(), fieldNamePrefix + field.getName() + ".");
+			return extractFrom(field.getType(), fieldNamePrefix + field.getName() + DOT);
 	}
 
 	/**

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OpenAPIService.java
Patch:
@@ -705,7 +705,7 @@ public Map<String, Object> getControllerAdviceMap() {
 		Map<String, Object> controllerAdviceMap = context.getBeansWithAnnotation(ControllerAdvice.class);
 		return Stream.of(controllerAdviceMap).flatMap(mapEl -> mapEl.entrySet().stream()).filter(
 				controller -> (AnnotationUtils.findAnnotation(controller.getValue().getClass(), Hidden.class) == null))
-				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (a1, a2) -> a1));
+				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (a1, a2) -> a1, LinkedHashMap::new));
 	}
 
 	/**

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OpenAPIService.java
Patch:
@@ -705,7 +705,7 @@ public Map<String, Object> getControllerAdviceMap() {
 		Map<String, Object> controllerAdviceMap = context.getBeansWithAnnotation(ControllerAdvice.class);
 		return Stream.of(controllerAdviceMap).flatMap(mapEl -> mapEl.entrySet().stream()).filter(
 				controller -> (AnnotationUtils.findAnnotation(controller.getValue().getClass(), Hidden.class) == null))
-				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (a1, a2) -> a1));
+				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (a1, a2) -> a1, LinkedHashMap::new));
 	}
 
 	/**

File: springdoc-openapi-javadoc/src/test/java/test/org/springdoc/api/app149/SpringDocApp149Test.java
Patch:
@@ -21,10 +21,12 @@
 import test.org.springdoc.api.AbstractSpringDocTest;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.test.context.TestPropertySource;
 
 /**
  * The type Spring doc app 149 test.
  */
+@TestPropertySource(properties = "springdoc.model-and-view-allowed=true")
 public class SpringDocApp149Test extends AbstractSpringDocTest {
 
 	/**

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/ResponseSupportConverter.java
Patch:
@@ -31,9 +31,9 @@
 import io.swagger.v3.oas.models.media.Schema;
 import io.swagger.v3.oas.models.media.StringSchema;
 
+import static org.springdoc.core.converters.ConverterUtils.isFluxTypeWrapper;
 import static org.springdoc.core.converters.ConverterUtils.isResponseTypeToIgnore;
 import static org.springdoc.core.converters.ConverterUtils.isResponseTypeWrapper;
-import static org.springdoc.core.converters.ConverterUtils.isFluxTypeWrapper;
 
 /**
  * The type Response support converter.

File: springdoc-openapi-javadoc/src/test/java/test/org/springdoc/api/app2/model/ModelApiResponse.java
Patch:
@@ -19,7 +19,6 @@
 package test.org.springdoc.api.app2.model;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
-import io.swagger.v3.oas.annotations.media.Schema;
 
 /**
  * The type Model api response.

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app152/HelloController.java
Patch:
@@ -20,10 +20,11 @@
 
 import org.reactivestreams.Publisher;
 import org.springdoc.core.GroupedOpenApi;
+import reactor.core.publisher.Mono;
+
 import org.springframework.context.annotation.Bean;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
-import reactor.core.publisher.Mono;
 
 @RestController
 public class HelloController {

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app152/SpringDocApp152Test.java
Patch:
@@ -20,9 +20,10 @@
 
 package test.org.springdoc.api.app152;
 
+import test.org.springdoc.api.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.ComponentScan;
-import test.org.springdoc.api.AbstractSpringDocTest;
 
 public class SpringDocApp152Test extends AbstractSpringDocTest {
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app157/StringyConverter.java
Patch:
@@ -1,14 +1,14 @@
 package test.org.springdoc.api.app157;
 
+import java.util.Iterator;
+
 import com.fasterxml.jackson.databind.JavaType;
 import io.swagger.v3.core.converter.AnnotatedType;
 import io.swagger.v3.core.converter.ModelConverter;
 import io.swagger.v3.core.converter.ModelConverterContext;
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.oas.models.media.Schema;
 
-import java.util.Iterator;
-
 public class StringyConverter implements ModelConverter {
 
   @Override

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app158/HelloController.java
Patch:
@@ -21,6 +21,7 @@
 import io.swagger.v3.oas.annotations.OpenAPIDefinition;
 import io.swagger.v3.oas.annotations.info.Info;
 import io.swagger.v3.oas.annotations.tags.Tag;
+
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app159/HelloController.java
Patch:
@@ -3,6 +3,7 @@
 import io.swagger.v3.oas.annotations.OpenAPIDefinition;
 import io.swagger.v3.oas.annotations.info.Info;
 import io.swagger.v3.oas.annotations.tags.Tag;
+
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -306,7 +306,7 @@ protected synchronized OpenAPI getOpenApi(Locale locale) {
 			// run the optional customisers
 			List<Server> servers = openApi.getServers();
 			openApiCustomisers.ifPresent(apiCustomisers -> apiCustomisers.forEach(openApiCustomiser -> openApiCustomiser.customise(openApi)));
-			if (servers != null && !servers.equals(openApi.getServers()))
+			if ((!CollectionUtils.isEmpty(openApi.getServers()) && !Objects.equals(servers, openApi.getServers())))
 				openAPIService.setServersPresent(true);
 
 			openAPIService.setCachedOpenAPI(openApi);

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -306,7 +306,7 @@ protected synchronized OpenAPI getOpenApi(Locale locale) {
 			// run the optional customisers
 			List<Server> servers = openApi.getServers();
 			openApiCustomisers.ifPresent(apiCustomisers -> apiCustomisers.forEach(openApiCustomiser -> openApiCustomiser.customise(openApi)));
-			if (servers != null && !servers.equals(openApi.getServers()))
+			if ((!CollectionUtils.isEmpty(openApi.getServers()) && !Objects.equals(servers, openApi.getServers())))
 				openAPIService.setServersPresent(true);
 
 			openAPIService.setCachedOpenAPI(openApi);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/ResponseSupportConverter.java
Patch:
@@ -33,6 +33,7 @@
 
 import static org.springdoc.core.converters.ConverterUtils.isResponseTypeToIgnore;
 import static org.springdoc.core.converters.ConverterUtils.isResponseTypeWrapper;
+import static org.springdoc.core.converters.ConverterUtils.isFluxTypeWrapper;
 
 /**
  * The type Response support converter.
@@ -45,7 +46,7 @@ public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterato
 		JavaType javaType = Json.mapper().constructType(type.getType());
 		if (javaType != null) {
 			Class<?> cls = javaType.getRawClass();
-			if (isResponseTypeWrapper(cls)) {
+			if (isResponseTypeWrapper(cls) && !isFluxTypeWrapper(cls)) {
 				JavaType innerType = javaType.getBindings().getBoundType(0);
 				if (innerType == null)
 					return new StringSchema();

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/converters/WebFluxSupportConverter.java
Patch:
@@ -30,8 +30,8 @@
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.oas.models.media.Schema;
 import io.swagger.v3.oas.models.media.StringSchema;
+import org.reactivestreams.Publisher;
 import reactor.core.publisher.Flux;
-import reactor.core.publisher.Mono;
 
 import static org.springdoc.core.SpringDocUtils.getConfig;
 import static org.springdoc.core.converters.ConverterUtils.isFluxTypeWrapper;
@@ -45,7 +45,7 @@
 public class WebFluxSupportConverter implements ModelConverter {
 
 	static {
-		getConfig().addResponseWrapperToIgnore(Mono.class)
+		getConfig().addResponseWrapperToIgnore(Publisher.class)
 				.addFluxWrapperToIgnore(Flux.class);
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/ResponseSupportConverter.java
Patch:
@@ -33,6 +33,7 @@
 
 import static org.springdoc.core.converters.ConverterUtils.isResponseTypeToIgnore;
 import static org.springdoc.core.converters.ConverterUtils.isResponseTypeWrapper;
+import static org.springdoc.core.converters.ConverterUtils.isFluxTypeWrapper;
 
 /**
  * The type Response support converter.
@@ -45,7 +46,7 @@ public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterato
 		JavaType javaType = Json.mapper().constructType(type.getType());
 		if (javaType != null) {
 			Class<?> cls = javaType.getRawClass();
-			if (isResponseTypeWrapper(cls)) {
+			if (isResponseTypeWrapper(cls) && !isFluxTypeWrapper(cls)) {
 				JavaType innerType = javaType.getBindings().getBoundType(0);
 				if (innerType == null)
 					return new StringSchema();

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/converters/WebFluxSupportConverter.java
Patch:
@@ -30,8 +30,8 @@
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.oas.models.media.Schema;
 import io.swagger.v3.oas.models.media.StringSchema;
+import org.reactivestreams.Publisher;
 import reactor.core.publisher.Flux;
-import reactor.core.publisher.Mono;
 
 import static org.springdoc.core.SpringDocUtils.getConfig;
 import static org.springdoc.core.converters.ConverterUtils.isFluxTypeWrapper;
@@ -45,7 +45,7 @@
 public class WebFluxSupportConverter implements ModelConverter {
 
 	static {
-		getConfig().addResponseWrapperToIgnore(Mono.class)
+		getConfig().addResponseWrapperToIgnore(Publisher.class)
 				.addFluxWrapperToIgnore(Flux.class);
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -306,7 +306,7 @@ protected synchronized OpenAPI getOpenApi(Locale locale) {
 			// run the optional customisers
 			List<Server> servers = openApi.getServers();
 			openApiCustomisers.ifPresent(apiCustomisers -> apiCustomisers.forEach(openApiCustomiser -> openApiCustomiser.customise(openApi)));
-			if (servers != null && !servers.equals(openApi.getServers()))
+			if ((!CollectionUtils.isEmpty(openApi.getServers()) && !Objects.equals(servers, openApi.getServers())))
 				openAPIService.setServersPresent(true);
 
 			openAPIService.setCachedOpenAPI(openApi);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -71,6 +71,7 @@
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
+import org.springframework.util.CollectionUtils;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.bind.annotation.RestControllerAdvice;
@@ -326,7 +327,8 @@ OpenApiCustomiser propertiesResolverForSchema(PropertyResolverUtils propertyReso
 		return openApi -> {
 			Components components = openApi.getComponents();
 			Map<String, Schema> schemas = components.getSchemas();
-			schemas.values().forEach(schema -> openAPIService.resolveProperties(schema, propertyResolverUtils, Locale.getDefault()));
+			if (!CollectionUtils.isEmpty(schemas))
+				schemas.values().forEach(schema -> openAPIService.resolveProperties(schema, propertyResolverUtils, Locale.getDefault()));
 		};
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfigProperties.java
Patch:
@@ -718,7 +718,7 @@ public void setEnabled(boolean enabled) {
 		}
 
 		/**
-		 * The type Deprecating converter.
+		 * The type Pageable converter.
 		 * @author bnasslashen
 		 */
 		public static class PageableConverter {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfigProperties.java
Patch:
@@ -718,7 +718,7 @@ public void setEnabled(boolean enabled) {
 		}
 
 		/**
-		 * The type Deprecating converter.
+		 * The type Pageable converter.
 		 * @author bnasslashen
 		 */
 		public static class PageableConverter {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractSwaggerUiConfigProperties.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Objects;
 import java.util.Set;
 
+import com.fasterxml.jackson.annotation.JsonProperty;
 import org.springdoc.core.SwaggerUiConfigProperties.SyntaxHighlight;
 
 import static org.springdoc.core.Constants.GROUP_NAME_NOT_NULL;
@@ -643,11 +644,13 @@ public static class SwaggerUrl {
 		/**
 		 * The Url.
 		 */
+		@JsonProperty("url")
 		private String url;
 
 		/**
 		 * The Name.
 		 */
+		@JsonProperty("name")
 		private String name;
 
 		/**

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RequestBodyService.java
Patch:
@@ -124,8 +124,8 @@ public Optional<RequestBody> buildRequestBodyFromDoc(
 	 * @param requestBodyObject the request body object
 	 */
 	private void buildResquestBodyContent(io.swagger.v3.oas.annotations.parameters.RequestBody requestBody, RequestBody requestBodyOp, MethodAttributes methodAttributes, Components components, JsonView jsonViewAnnotation, String[] classConsumes, String[] methodConsumes, RequestBody requestBodyObject) {
-		Optional<Content> optionalContent = AnnotationsUtils
-				.getContent(requestBody.content(), getConsumes(classConsumes),
+		Optional<Content> optionalContent = SpringDocAnnotationsUtils
+				.getContent(requestBody.content(),getConsumes(classConsumes),
 						getConsumes(methodConsumes), null, components, jsonViewAnnotation);
 		if (requestBodyOp == null) {
 			if (optionalContent.isPresent()) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocAnnotationsUtils.java
Patch:
@@ -169,7 +169,7 @@ public static Optional<Content> getContent(io.swagger.v3.oas.annotations.media.C
 				content.addMediaType(annotationContent.mediaType(), mediaType);
 			}
 			else {
-				if (mediaType.getSchema() != null)
+				if (mediaType.getSchema() != null || mediaType.getEncoding() != null || mediaType.getExample() != null || mediaType.getExamples() != null || mediaType.getExtensions() != null)
 					applyTypes(classTypes, methodTypes, content, mediaType);
 			}
 		}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestService.java
Patch:
@@ -246,7 +246,7 @@ public Operation build(HandlerMethod handlerMethod, RequestMethod requestMethod,
 					io.swagger.v3.oas.annotations.Parameter.class);
 
 			final String pName = methodParameter.getParameterName();
-			ParameterInfo parameterInfo = new ParameterInfo(pName, methodParameter, parameterBuilder);
+			ParameterInfo parameterInfo = new ParameterInfo(pName, methodParameter, parameterBuilder, methodAttributes.getLocale());
 
 			if (parameterDoc == null)
 				parameterDoc = parametersDocMap.get(parameterInfo.getpName());
@@ -255,7 +255,7 @@ public Operation build(HandlerMethod handlerMethod, RequestMethod requestMethod,
 				if (parameterDoc.hidden() || parameterDoc.schema().hidden())
 					continue;
 
-				parameter = parameterBuilder.buildParameterFromDoc(parameterDoc, components, methodAttributes.getJsonViewAnnotation());
+				parameter = parameterBuilder.buildParameterFromDoc(parameterDoc, components, methodAttributes.getJsonViewAnnotation(), methodAttributes.getLocale());
 				parameterInfo.setParameterModel(parameter);
 			}
 
@@ -322,7 +322,7 @@ private LinkedHashMap<String, Parameter> getParameterLinkedHashMap(Components co
 			if (entry.getKey() != null && !map.containsKey(entry.getKey()) && !entry.getValue().hidden()) {
 				//Convert
 				Parameter parameter = parameterBuilder.buildParameterFromDoc(entry.getValue(), components,
-						methodAttributes.getJsonViewAnnotation());
+						methodAttributes.getJsonViewAnnotation(), methodAttributes.getLocale());
 				map.put(entry.getKey(), parameter);
 			}
 		}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RepositoryRestResourceProvider.java
Patch:
@@ -1,6 +1,7 @@
 package org.springdoc.core;
 
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 
 import io.swagger.v3.oas.models.OpenAPI;
@@ -16,9 +17,10 @@ public interface RepositoryRestResourceProvider {
 	 * Gets router operations.
 	 *
 	 * @param openAPI the open api
+	 * @param locale the locale
 	 * @return the router operations
 	 */
-	List<RouterOperation> getRouterOperations(OpenAPI openAPI);
+	List<RouterOperation> getRouterOperations(OpenAPI openAPI, Locale locale);
 
 	/**
 	 * Gets repository rest controller endpoints.

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestOperationService.java
Patch:
@@ -250,7 +250,7 @@ private Parameter getParameterFromAnnotations(OpenAPI openAPI, MethodAttributes
 						AnnotatedElementUtils.forAnnotations(reflectParameter.getAnnotations()),
 						io.swagger.v3.oas.annotations.Parameter.class);
 				if (parameterDoc != null && (!parameterDoc.hidden() || parameterDoc.schema().hidden())) {
-					parameter = dataRestRequestService.buildParameterFromDoc(parameterDoc, openAPI.getComponents(), methodAttributes.getJsonViewAnnotation());
+					parameter = dataRestRequestService.buildParameterFromDoc(parameterDoc, openAPI.getComponents(), methodAttributes.getJsonViewAnnotation(), methodAttributes.getLocale());
 					parameter.setName(pName);
 				}
 			}

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app81/SpringDocApp81Test.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.ThreadLocalRandom;
 
@@ -73,7 +74,7 @@ public void shouldGenerateOperationIdsDeterministically() throws Exception {
         when(request.getURI()).thenReturn(URI.create("http://localhost"));
 
         String expected = getContent("results/app81.json");
-        String openApi = resource.openapiJson(request, "").block();
+        String openApi = resource.openapiJson(request, "", Locale.US).block();
         assertEquals(expected, openApi, true);
     }
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app1/HelloController.java
Patch:
@@ -32,7 +32,7 @@ public class HelloController {
 
 	@GetMapping(value = "/hello/{numTelco}")
 	@ResponseStatus(HttpStatus.I_AM_A_TEAPOT)
-	@Tag(name = "tea")
+	@Tag(name = "${prop.toto}")
 	public String index(@PathVariable("numTelco") String numTel, String adresse) {
 		return "Greetings from Spring Boot!";
 	}

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app1/SpringDocApp1Test.java
Patch:
@@ -29,7 +29,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.test.context.TestPropertySource;
 
-@TestPropertySource(properties = "springdoc.default-produces-media-type=application/json")
+@TestPropertySource(properties = {"springdoc.default-produces-media-type=application/json", "prop.toto=tea"})
 public class SpringDocApp1Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app136/SpringDocApp136Test.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.concurrent.ThreadLocalRandom;
 
@@ -70,7 +71,7 @@ public void shouldGenerateOperationIdsDeterministically() throws Exception {
         when(request.getRequestURL()).thenReturn(new StringBuffer("http://localhost"));
 
         String expected = getContent("results/app136.json");
-        String openApi = resource.openapiJson(request, "");
+        String openApi = resource.openapiJson(request, "", Locale.getDefault());
         assertEquals(expected, openApi, true);
     }
 

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -75,7 +75,7 @@ public abstract class OpenApiResource extends AbstractOpenApiResource {
 	/**
 	 * The Request mapping handler mapping.
 	 */
-	private final RequestMappingInfoHandlerMapping requestMappingHandlerMapping;
+	protected final RequestMappingInfoHandlerMapping requestMappingHandlerMapping;
 
 	/**
 	 * The Spring security o auth 2 provider.

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -298,7 +298,7 @@ protected synchronized OpenAPI getOpenApi() {
 			// run the optional customisers
 			List<Server> servers = openApi.getServers();
 			openApiCustomisers.ifPresent(apiCustomisers -> apiCustomisers.forEach(openApiCustomiser -> openApiCustomiser.customise(openApi)));
-			if(!servers.equals(openApi.getServers()))
+			if (servers != null && !servers.equals(openApi.getServers()))
 				openAPIService.setServersPresent(true);
 
 			openAPIService.setCachedOpenAPI(openApi);

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -307,7 +307,7 @@ protected boolean isRestController(Map<String, Object> restControllers, HandlerM
 		if (hasOperationAnnotation)
 			return true;
 
-		return (containsResponseBody(handlerMethod) & restControllers.containsKey(handlerMethod.getBean().toString()) || isAdditionalRestController(handlerMethod.getBeanType()))
+		return (containsResponseBody(handlerMethod) && restControllers.containsKey(handlerMethod.getBean().toString()) || isAdditionalRestController(handlerMethod.getBeanType()))
 				&& operationPath.startsWith(DEFAULT_PATH_SEPARATOR)
 				&& (springDocConfigProperties.isModelAndViewAllowed() || !ModelAndView.class.isAssignableFrom(handlerMethod.getMethod().getReturnType()));
 	}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -177,7 +177,7 @@ SchemaPropertyDeprecatingConverter schemaPropertyDeprecatingConverter() {
 	 */
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnProperty(name = SPRINGDOC_PAGEABLE_CONVERTER_ENABLED, matchIfMissing = true)
+	@ConditionalOnProperty(name = SPRINGDOC_PAGEABLE_CONVERTER_ENABLED)
 	@Lazy(false)
 	PageableOpenAPIConverter pageableOpenAPIConverter() {
 		return new PageableOpenAPIConverter();

File: springdoc-openapi-common/src/main/java/org/springdoc/core/DelegatingMethodParameter.java
Patch:
@@ -103,7 +103,7 @@ public static MethodParameter[] customize(String[] pNames, MethodParameter[] par
 		List<MethodParameter> explodedParameters = new ArrayList<>();
 		for (int i = 0; i < parameters.length; ++i) {
 			MethodParameter p = parameters[i];
-			Class<?> paramClass = AdditionalModelsConverter.getReplacement(p.getParameterType());
+			Class<?> paramClass = AdditionalModelsConverter.getParameterObjectReplacement(p.getParameterType());
 
 			if (!MethodParameterPojoExtractor.isSimpleType(paramClass) && (p.hasParameterAnnotation(ParameterObject.class) || AnnotatedElementUtils.isAnnotated(paramClass, ParameterObject.class))) {
 				MethodParameterPojoExtractor.extractFrom(paramClass).forEach(methodParameter -> {

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/app14/SpringDocApp14Test.java
Patch:
@@ -53,8 +53,8 @@
 public class SpringDocApp14Test extends AbstractSpringDocTest {
 
 	static {
-		getConfig().replaceWithClass(org.springframework.data.domain.Pageable.class, Pageable.class)
-				.replaceWithClass(org.springframework.data.domain.PageRequest.class, Pageable.class);
+		getConfig().replaceParameterObjectWithClass(org.springframework.data.domain.Pageable.class, Pageable.class)
+				.replaceParameterObjectWithClass(org.springframework.data.domain.PageRequest.class, Pageable.class);
 	}
 
 

File: springdoc-openapi-hateoas/src/test/java/test/org/springdoc/api/app2/SpringDocApp2Test.java
Patch:
@@ -28,8 +28,8 @@
 public class SpringDocApp2Test extends AbstractSpringDocTest {
 
 	static {
-		getConfig().replaceWithClass(org.springframework.data.domain.Pageable.class, Pageable.class)
-				.replaceWithClass(org.springframework.data.domain.PageRequest.class, Pageable.class);
+		getConfig().replaceParameterObjectWithClass(org.springframework.data.domain.Pageable.class, Pageable.class)
+				.replaceParameterObjectWithClass(org.springframework.data.domain.PageRequest.class, Pageable.class);
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app144/SpringDocApp144Test.java
Patch:
@@ -31,7 +31,7 @@
 
 @SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT,
 		properties = { "management.endpoints.web.exposure.include:*",
-				"server.port=55555",
+				"server.port=55554",
 				"springdoc.use-management-port=true",
 				"management.server.port=9090",
 				"management.endpoints.web.base-path=/application" })

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app148/SpringDocApp148Test.java
Patch:
@@ -46,7 +46,6 @@ static class SpringDocTestApp {}
 	public void testApp() throws Exception {
 		String result =webClient.get().uri("/test/application/openapi/users").retrieve()
 				.bodyToMono(String.class).block();
-
 		String expected = getContent("results/app148-1.json");
 		assertEquals(expected, result, true);
 	}

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app144/SpringDocApp144Test.java
Patch:
@@ -33,7 +33,7 @@
 
 @SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT,
 		properties = { "management.endpoints.web.exposure.include:*",
-				"server.port=55555",
+				"server.port=55554",
 				"springdoc.use-management-port=true",
 				"management.server.port=9090",
 				"management.endpoints.web.base-path=/application" })

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app36/SpringDocApp36Test.java
Patch:
@@ -40,8 +40,8 @@ public class SpringDocApp36Test extends AbstractSpringDocTest {
 	public void testApp() throws Exception {
 		mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL)).andExpect(status().isOk())
 				.andExpect(jsonPath("$.openapi", is("3.0.1")))
-				.andExpect(jsonPath("$.paths./actuator/info.get.operationId", containsString("handle")))
-				.andExpect(jsonPath("$.paths./actuator/health.get.operationId", containsString("handle")))
+				.andExpect(jsonPath("$.paths./actuator/info.get.operationId", containsString("info")))
+				.andExpect(jsonPath("$.paths./actuator/health.get.operationId", containsString("health")))
 				.andExpect(jsonPath("$.paths./actuator/metrics/{requiredMetricName}.get.parameters[0].in", is("path")))
 				.andExpect(jsonPath("$.paths./actuator/metrics/{requiredMetricName}.get.parameters[0].name", is("requiredMetricName")));
 	}

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/SpringDocApp68Test.java
Patch:
@@ -76,7 +76,7 @@ public void testActuator() throws Exception {
 		mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL)).andExpect(status().isOk())
 				.andExpect(jsonPath("$.openapi", is("3.0.1")))
 				.andExpect(jsonPath("$.paths./actuator/health.get.summary", Matchers.is("Actuator web endpoint 'health'")))
-				.andExpect(jsonPath("$.paths./actuator/health.get.operationId", containsString("handle_")));
+				.andExpect(jsonPath("$.paths./actuator/health.get.operationId", containsString("health")));
 	}
 
 	@Test

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -301,8 +301,10 @@ protected synchronized OpenAPI getOpenApi() {
 			LOGGER.info("Init duration for springdoc-openapi is: {} ms",
 					Duration.between(start, Instant.now()).toMillis());
 		}
-		else
+		else{
+			LOGGER.debug("Fetching openApi document from cache");
 			openApi = openAPIService.updateServers(openAPIService.getCachedOpenAPI());
+		}
 		return openApi;
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestService.java
Patch:
@@ -647,7 +647,8 @@ private boolean isRequestBodyParam(RequestMethod requestMethod, ParameterInfo pa
 		return (!RequestMethod.GET.equals(requestMethod) && (parameterInfo.getParameterModel() == null || parameterInfo.getParameterModel().getIn() == null) && !delegatingMethodParameter.isParameterObject())
 				&&
 				((methodParameter.getParameterAnnotation(io.swagger.v3.oas.annotations.parameters.RequestBody.class) != null
-						|| methodParameter.getParameterAnnotation(org.springframework.web.bind.annotation.RequestBody.class) != null)
+						|| methodParameter.getParameterAnnotation(org.springframework.web.bind.annotation.RequestBody.class) != null
+						|| methodParameter.getParameterAnnotation(org.springframework.web.bind.annotation.RequestPart.class) != null)
 						|| (!ClassUtils.isPrimitiveOrWrapper(methodParameter.getParameter().getType()) && (!ArrayUtils.isEmpty(methodParameter.getParameterAnnotations()) || length == 1)));
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OpenAPIService.java
Patch:
@@ -477,6 +477,8 @@ private List<Server> resolveProperties(List<Server> servers) {
 		servers.forEach(server -> {
 			resolveProperty(server::getUrl, server::url, propertyResolverUtils);
 			resolveProperty(server::getDescription, server::description, propertyResolverUtils);
+			if(CollectionUtils.isEmpty(server.getVariables()))
+				server.setVariables(null);
 		});
 		return servers;
 	}

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app137/OpenApiConfig.java
Patch:
@@ -24,8 +24,9 @@
 import io.swagger.v3.oas.annotations.security.OAuthFlow;
 import io.swagger.v3.oas.annotations.security.OAuthFlows;
 import io.swagger.v3.oas.annotations.security.SecurityScheme;
+import io.swagger.v3.oas.annotations.servers.Server;
 
-@OpenAPIDefinition(info = @Info(title = "My App",
+@OpenAPIDefinition(servers = @Server(url = "${test.server}", description = "${test.desc}"), info = @Info(title = "My App",
 		description = "Some long and useful description", version = "v1"))
 @SecurityScheme(name = "security_auth", type = SecuritySchemeType.OAUTH2,
 		flows = @OAuthFlows(authorizationCode = @OAuthFlow(

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app137/SpringDocApp137Test.java
Patch:
@@ -25,11 +25,13 @@
 import test.org.springdoc.api.AbstractSpringDocTest;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.test.context.TestPropertySource;
 
 
 /**
  * Tests Spring meta-annotations as method parameters
  */
+@TestPropertySource(properties = {"test.server=http://test.toto.com", "test.desc=toto desc"})
 public class SpringDocApp137Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericParameterService.java
Patch:
@@ -336,7 +336,7 @@ private Schema calculateRequestBodySchema(Components components, ParameterInfo p
 			requestBodyInfo.getMergedSchema().addProperties(paramName, schemaN);
 			schemaN = requestBodyInfo.getMergedSchema();
 		}
-		else if (schemaN instanceof FileSchema || schemaN instanceof ArraySchema && ((ArraySchema) schemaN).getItems() instanceof FileSchema) {
+		else if (parameterInfo.isRequestPart() || schemaN instanceof FileSchema || schemaN instanceof ArraySchema && ((ArraySchema) schemaN).getItems() instanceof FileSchema) {
 			schemaN = new ObjectSchema().addProperties(paramName, schemaN);
 			requestBodyInfo.setMergedSchema(schemaN);
 		}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RequestBodyService.java
Patch:
@@ -240,6 +240,7 @@ public void calculateRequestBodyInfo(Components components, MethodAttributes met
 		if (requestPart != null){
 			paramName = StringUtils.defaultIfEmpty(requestPart.value(), requestPart.name());
 			parameterInfo.setRequired(requestPart.required());
+			parameterInfo.setRequestPart(true);
 		}
 		paramName = StringUtils.defaultIfEmpty(paramName, parameterInfo.getpName());
 		parameterInfo.setpName(paramName);

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerConfig.java
Patch:
@@ -73,7 +73,7 @@ public class SwaggerConfig implements WebFluxConfigurer {
 	@Bean
 	@ConditionalOnMissingBean
 	@ConditionalOnProperty(name = SPRINGDOC_USE_MANAGEMENT_PORT, havingValue = "false", matchIfMissing = true)
-	SwaggerWelcomeWebFlux swaggerWelcome(SwaggerUiConfigProperties swaggerUiConfig, SpringDocConfigProperties springDocConfigProperties,SwaggerUiConfigParameters swaggerUiConfigParameters, RequestMappingInfoHandlerMapping requestMappingHandlerMapping) {
+	SwaggerWelcomeWebFlux swaggerWelcome(SwaggerUiConfigProperties swaggerUiConfig, SpringDocConfigProperties springDocConfigProperties,SwaggerUiConfigParameters swaggerUiConfigParameters, Optional<RequestMappingInfoHandlerMapping>  requestMappingHandlerMapping) {
 		return new SwaggerWelcomeWebFlux(swaggerUiConfig,springDocConfigProperties,swaggerUiConfigParameters,requestMappingHandlerMapping);
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -500,7 +500,9 @@ protected void calculatePath(RouterOperation routerOperation) {
 
 			fillParametersList(operation, queryParams, methodAttributes);
 			if (!CollectionUtils.isEmpty(operation.getParameters()))
-				operation.getParameters().forEach(parameter -> {
+				operation.getParameters().stream()
+						.filter(parameter -> StringUtils.isEmpty(parameter.get$ref()))
+						.forEach(parameter -> {
 							if (parameter.getSchema() == null)
 								parameter.setSchema(new StringSchema());
 							if (parameter.getIn() == null)

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -500,7 +500,9 @@ protected void calculatePath(RouterOperation routerOperation) {
 
 			fillParametersList(operation, queryParams, methodAttributes);
 			if (!CollectionUtils.isEmpty(operation.getParameters()))
-				operation.getParameters().forEach(parameter -> {
+				operation.getParameters().stream()
+						.filter(parameter -> StringUtils.isEmpty(parameter.get$ref()))
+						.forEach(parameter -> {
 							if (parameter.getSchema() == null)
 								parameter.setSchema(new StringSchema());
 							if (parameter.getIn() == null)

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/utils/SpringDocDataRestUtils.java
Patch:
@@ -414,8 +414,9 @@ private List<String> getIgnoredFields(ResourceMetadata
 	 * @param content the content
 	 */
 	public void buildTextUriContent(Content content) {
-		content.computeIfPresent(RestMediaTypes.TEXT_URI_LIST_VALUE,
-				(key, value) -> new MediaType().schema(new StringSchema()));
+		if (content != null)
+			content.computeIfPresent(RestMediaTypes.TEXT_URI_LIST_VALUE,
+					(key, value) -> new MediaType().schema(new StringSchema()));
 	}
 
 }

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/app26/SpringRestConfiguration.java
Patch:
@@ -3,11 +3,12 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
 import org.springframework.data.rest.webmvc.config.RepositoryRestConfigurer;
+import org.springframework.web.servlet.config.annotation.CorsRegistry;
 
 @Configuration
 public class SpringRestConfiguration implements RepositoryRestConfigurer {
 	@Override
-	public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {
+	public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config, CorsRegistry cors) {
 		config.exposeIdsFor(Person.class);
 	}
 }
\ No newline at end of file

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/app9/core/config/SpringRestConfiguration.java
Patch:
@@ -4,11 +4,12 @@
 import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
 import org.springframework.data.rest.webmvc.config.RepositoryRestConfigurer;
 import org.springframework.http.MediaType;
+import org.springframework.web.servlet.config.annotation.CorsRegistry;
 
 @Configuration
 public class SpringRestConfiguration implements RepositoryRestConfigurer {
 	@Override
-	public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {
+	public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config, CorsRegistry cors) {
 		config.setDefaultMediaType(MediaType.APPLICATION_JSON);
 		config.useHalAsDefaultJsonMediaType(false);
 	}

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -47,7 +47,6 @@ public void testApp() throws Exception {
 			result = new String(getResult.getResponseBody());
 			String className = getClass().getSimpleName();
 			String testNumber = className.replaceAll("[^0-9]", "");
-
 			String expected = getContent("results/app" + testNumber + ".json");
 			assertEquals(expected, result, true);
 		}

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app76/SpringDocApp76Test.java
Patch:
@@ -41,7 +41,6 @@ public SpringDocApp76Test() {
 	public void testApp() throws Exception {
 		webTestClient.get().uri(Constants.DEFAULT_API_DOCS_URL + groupName).exchange().expectStatus().isOk().expectBody()
 				.jsonPath("$.openapi").isEqualTo("3.0.1")
-				.jsonPath("$.paths./actuator/info.get.operationId").exists()
 				.jsonPath("$.paths./actuator/health.get.operationId").exists();
 	}
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app1/HelloController.java
Patch:
@@ -18,7 +18,8 @@
 
 package test.org.springdoc.api.app1;
 
-import org.hibernate.validator.constraints.SafeHtml.Tag;
+
+import io.swagger.v3.oas.annotations.tags.Tag;
 
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.GetMapping;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app105/api/ExceptionTranslator.java
Patch:
@@ -22,6 +22,7 @@
 
 import javax.validation.ConstraintViolationException;
 
+import org.springframework.boot.web.error.ErrorAttributeOptions;
 import org.springframework.boot.web.servlet.error.ErrorAttributes;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.ExceptionHandler;
@@ -43,6 +44,6 @@ public ExceptionTranslator(ErrorAttributes errorAttributes) {
 	@ResponseStatus(HttpStatus.BAD_REQUEST)
 	public Map<String, Object> processConstraintViolationException(WebRequest request) {
 		request.setAttribute("javax.servlet.error.status_code", HttpStatus.BAD_REQUEST.value(), RequestAttributes.SCOPE_REQUEST);
-		return errorAttributes.getErrorAttributes(request, false);
+		return errorAttributes.getErrorAttributes(request, ErrorAttributeOptions.defaults());
 	}
 }

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app2/api/ExceptionTranslator.java
Patch:
@@ -22,6 +22,7 @@
 
 import javax.validation.ConstraintViolationException;
 
+import org.springframework.boot.web.error.ErrorAttributeOptions;
 import org.springframework.boot.web.servlet.error.ErrorAttributes;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.ExceptionHandler;
@@ -43,6 +44,6 @@ public ExceptionTranslator(ErrorAttributes errorAttributes) {
 	@ResponseStatus(HttpStatus.BAD_REQUEST)
 	public Map<String, Object> processConstraintViolationException(WebRequest request) {
 		request.setAttribute("javax.servlet.error.status_code", HttpStatus.BAD_REQUEST.value(), RequestAttributes.SCOPE_REQUEST);
-		return errorAttributes.getErrorAttributes(request, false);
+		return errorAttributes.getErrorAttributes(request, ErrorAttributeOptions.defaults());
 	}
 }

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/SpringDocApp68Test.java
Patch:
@@ -75,8 +75,7 @@ public void testApp4() throws Exception {
 	public void testActuator() throws Exception {
 		mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL)).andExpect(status().isOk())
 				.andExpect(jsonPath("$.openapi", is("3.0.1")))
-				.andExpect(jsonPath("$.paths./actuator/info.get.operationId", containsString("handle_")))
-				.andExpect(jsonPath("$.paths./actuator/info.get.summary", Matchers.is("Actuator web endpoint 'info'")))
+				.andExpect(jsonPath("$.paths./actuator/health.get.summary", Matchers.is("Actuator web endpoint 'health'")))
 				.andExpect(jsonPath("$.paths./actuator/health.get.operationId", containsString("handle_")));
 	}
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/ExceptionTranslator.java
Patch:
@@ -22,6 +22,7 @@
 
 import javax.validation.ConstraintViolationException;
 
+import org.springframework.boot.web.error.ErrorAttributeOptions;
 import org.springframework.boot.web.servlet.error.ErrorAttributes;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.ExceptionHandler;
@@ -43,6 +44,6 @@ public ExceptionTranslator(ErrorAttributes errorAttributes) {
 	@ResponseStatus(HttpStatus.BAD_REQUEST)
 	public Map<String, Object> processConstraintViolationException(WebRequest request) {
 		request.setAttribute("javax.servlet.error.status_code", HttpStatus.BAD_REQUEST.value(), RequestAttributes.SCOPE_REQUEST);
-		return errorAttributes.getErrorAttributes(request, false);
+		return errorAttributes.getErrorAttributes(request, ErrorAttributeOptions.defaults());
 	}
 }

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeCommon.java
Patch:
@@ -14,8 +14,6 @@
 import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
 import org.springframework.web.util.UriComponentsBuilder;
 
-import static org.springdoc.core.Constants.SWAGGER_UI_URL;
-
 /**
  * The type Swagger welcome common.
  * @author bnasslashen
@@ -40,7 +38,7 @@ public SwaggerWelcomeCommon(SwaggerUiConfigProperties swaggerUiConfig, SpringDoc
 	 */
 	protected ResponseEntity<Void> redirectToUi(HttpServletRequest request) {
 		buildFromCurrentContextPath(request);
-		String sbUrl = contextPath + swaggerUiConfigParameters.getUiRootPath() + SWAGGER_UI_URL;
+		String sbUrl = contextPath + swaggerUiConfigParameters.getUiRootPath() + getSwaggerUiUrl();
 		UriComponentsBuilder uriBuilder = getUriComponentsBuilder(sbUrl);
 
 		// forward all queryParams from original request

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeCommon.java
Patch:
@@ -35,8 +35,6 @@
 import org.springframework.util.AntPathMatcher;
 import org.springframework.web.util.UriComponentsBuilder;
 
-import static org.springdoc.core.Constants.SWAGGER_UI_URL;
-
 /**
  * The type Swagger welcome common.
  * @author bnasslashen
@@ -73,7 +71,7 @@ public SwaggerWelcomeCommon(SwaggerUiConfigProperties swaggerUiConfig, SpringDoc
 	 */
 	protected Mono<Void> redirectToUi(ServerHttpRequest request, ServerHttpResponse response) {
 		this.buildFromCurrentContextPath(request);
-		String sbUrl = this.buildUrl(contextPath, swaggerUiConfigParameters.getUiRootPath() + springDocConfigProperties.getWebjars().getPrefix() + SWAGGER_UI_URL);
+		String sbUrl = this.buildUrl(contextPath, swaggerUiConfigParameters.getUiRootPath() + springDocConfigProperties.getWebjars().getPrefix() + getSwaggerUiUrl());
 		UriComponentsBuilder uriBuilder = getUriComponentsBuilder(sbUrl);
 		response.setStatusCode(HttpStatus.FOUND);
 		response.getHeaders().setLocation(URI.create(uriBuilder.build().encode().toString()));

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/AbstractSpringDocTest.java
Patch:
@@ -26,6 +26,7 @@
 import nonapi.io.github.classgraph.utils.FileUtils;
 import org.springdoc.core.SpringDocConfigProperties;
 import org.springdoc.core.SpringDocConfiguration;
+import org.springdoc.core.SwaggerUiConfigParameters;
 import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springdoc.core.SwaggerUiOAuthProperties;
 import org.springdoc.webflux.core.SpringDocWebFluxConfiguration;
@@ -38,7 +39,7 @@
 
 
 @WebFluxTest
-@ContextConfiguration(classes = { SpringDocConfiguration.class, SpringDocConfigProperties.class, SpringDocWebFluxConfiguration.class, SwaggerUiConfigProperties.class, SwaggerConfig.class, SwaggerUiOAuthProperties.class })
+@ContextConfiguration(classes = { SpringDocConfiguration.class, SpringDocConfigProperties.class, SpringDocWebFluxConfiguration.class, SwaggerUiConfigParameters.class,  SwaggerUiConfigProperties.class, SwaggerConfig.class, SwaggerUiOAuthProperties.class })
 public abstract class AbstractSpringDocTest extends AbstractCommonTest {
 
 	@Autowired

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/SpringDocDataRestConfiguration.java
Patch:
@@ -259,12 +259,13 @@ DataRestTagsService dataRestTagsBuilder(OpenAPIService openAPIService) {
 		 * Spring doc data rest utils spring doc data rest utils.
 		 *
 		 * @param linkRelationProvider the link relation provider
+		 * @param repositoryRestConfiguration the repository rest configuration
 		 * @return the spring doc data rest utils
 		 */
 		@Bean
 		@ConditionalOnMissingBean
-		SpringDocDataRestUtils springDocDataRestUtils(LinkRelationProvider linkRelationProvider) {
-			return new SpringDocDataRestUtils(linkRelationProvider);
+		SpringDocDataRestUtils springDocDataRestUtils(LinkRelationProvider linkRelationProvider, RepositoryRestConfiguration repositoryRestConfiguration) {
+			return new SpringDocDataRestUtils(linkRelationProvider, repositoryRestConfiguration);
 		}
 	}
 

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/utils/EntityInfo.java
Patch:
@@ -1,5 +1,6 @@
 package org.springdoc.data.rest.utils;
 
+import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -11,7 +12,7 @@ public class EntityInfo {
 	/**
 	 * The Ignored fields.
 	 */
-	private List<String> ignoredFields;
+	private List<String> ignoredFields = new ArrayList<>();
 
 	/**
 	 * The Associations fields.

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app69/UserHandler.java
Patch:
@@ -35,7 +35,7 @@ public Mono<ServerResponse> getAll(ServerRequest request) {
      */
     public Mono<ServerResponse> getUser(ServerRequest request) {
         // parse path-variable
-        long customerId = Long.valueOf(request.pathVariable("id"));
+		long customerId = Long.valueOf(request.queryParam("id").get());
 
         // build notFound response 
         Mono<ServerResponse> notFound = ServerResponse.notFound().build();

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app69/UserRepository.java
Patch:
@@ -3,6 +3,7 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.enums.ParameterIn;
+import io.swagger.v3.oas.annotations.parameters.RequestBody;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 
@@ -18,7 +19,7 @@ public interface UserRepository {
 
     public Mono<Void> saveUser(Mono<User> user);
 
-    public Mono<User> putUser(@Parameter(in = ParameterIn.PATH) Long id, Mono<User> user);
+    public Mono<User> putUser(@Parameter(in = ParameterIn.PATH) Long id, @RequestBody Mono<User> user);
 
     public Mono<String> deleteUser(@Parameter(in = ParameterIn.PATH) Long id);
 }
\ No newline at end of file

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app82/UserHandler.java
Patch:
@@ -35,7 +35,7 @@ public Mono<ServerResponse> getAll(ServerRequest request) {
      */
     public Mono<ServerResponse> getUser(ServerRequest request) {
         // parse path-variable
-        long customerId = Long.valueOf(request.pathVariable("id"));
+		long customerId = Long.valueOf(request.queryParam("id").get());
 
         // build notFound response 
         Mono<ServerResponse> notFound = ServerResponse.notFound().build();

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app82/UserRepository.java
Patch:
@@ -3,6 +3,7 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.enums.ParameterIn;
+import io.swagger.v3.oas.annotations.parameters.RequestBody;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 
@@ -18,7 +19,7 @@ public interface UserRepository {
 
     public Mono<Void> saveUser(Mono<User> user);
 
-    public Mono<User> putUser(@Parameter(in = ParameterIn.QUERY) Long id, Mono<User> user);
+    public Mono<User> putUser(@Parameter(in = ParameterIn.QUERY) Long id, @RequestBody Mono<User> user);
 
     public Mono<String> deleteUser(@Parameter(in = ParameterIn.PATH) Long id);
 }
\ No newline at end of file

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app129/HelloController.java
Patch:
@@ -21,7 +21,7 @@
 import io.swagger.v3.oas.annotations.responses.ApiResponse;
 import io.swagger.v3.oas.annotations.responses.ApiResponses;
 
-import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
@@ -31,7 +31,7 @@
 @RequestMapping(path = "/api", headers = {"userId", "registrationId"})
 public class HelloController {
 
-	@GetMapping("/test")
+	@PostMapping("/test")
 	@ApiResponses({@ApiResponse(responseCode = "200")})
 	public DeferredResult<OperationResponse<ActualReturnedEntity>> update(
 			@RequestBody ActualReturnedEntity entity) throws Exception {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/DelegatingMethodParameter.java
Patch:
@@ -97,7 +97,8 @@ public static MethodParameter[] customize(String[] pNames, MethodParameter[] par
 		for (int i = 0; i < parameters.length; ++i) {
 			MethodParameter p = parameters[i];
 			Class<?> paramClass = AdditionalModelsConverter.getReplacement(p.getParameterType());
-			if (p.hasParameterAnnotation(ParameterObject.class) || AnnotatedElementUtils.isAnnotated(paramClass, ParameterObject.class)) {
+
+			if (!MethodParameterPojoExtractor.isSimpleType(paramClass) && (p.hasParameterAnnotation(ParameterObject.class) || AnnotatedElementUtils.isAnnotated(paramClass, ParameterObject.class))) {
 				MethodParameterPojoExtractor.extractFrom(paramClass).forEach(methodParameter -> {
 					optionalDelegatingMethodParameterCustomizer.ifPresent(customizer -> customizer.customize(p, methodParameter));
 					explodedParameters.add(methodParameter);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/MethodParameterPojoExtractor.java
Patch:
@@ -220,7 +220,7 @@ private static List<Field> allFieldsOf(Class<?> clazz) {
 	 * @param clazz the clazz
 	 * @return the boolean
 	 */
-	private static boolean isSimpleType(Class<?> clazz) {
+	static boolean isSimpleType(Class<?> clazz) {
 		return SIMPLE_TYPE_PREDICATES.stream().anyMatch(p -> p.test(clazz)) ||
 				SIMPLE_TYPES.stream().anyMatch(c -> c.isAssignableFrom(clazz));
 	}

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeActuator.java
Patch:
@@ -81,13 +81,13 @@ protected void calculateUiRootPath(StringBuilder... sbUrls) {
 	}
 
 	@Override
-	protected String buildApiDocUrl(String contextPath) {
+	protected String buildApiDocUrl() {
 		return buildUrl(contextPath + webEndpointProperties.getBasePath(), DEFAULT_API_DOCS_ACTUATOR_URL);
 	}
 
 	@Override
-	protected String buildSwaggerConfigUrl(String contextPath) {
-		return contextPath + webEndpointProperties.getBasePath()
+	protected String buildSwaggerConfigUrl() {
+		return   contextPath + webEndpointProperties.getBasePath()
 				+ DEFAULT_PATH_SEPARATOR + DEFAULT_SWAGGER_UI_ACTUATOR_PATH
 				+ DEFAULT_PATH_SEPARATOR + SWAGGGER_CONFIG_FILE;
 	}

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeWebMvc.java
Patch:
@@ -111,12 +111,12 @@ protected String buildUrl(String contextPath, final String docsUrl) {
 	}
 
 	@Override
-	protected String buildApiDocUrl(String contextPath) {
+	protected String buildApiDocUrl() {
 		return buildUrl(contextPath, springDocConfigProperties.getApiDocs().getPath());
 	}
 
 	@Override
-	protected String buildSwaggerConfigUrl(String contextPath) {
+	protected String buildSwaggerConfigUrl() {
 		return  apiDocsUrl + DEFAULT_PATH_SEPARATOR + SWAGGGER_CONFIG_FILE;
 	}
 }
\ No newline at end of file

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app18/HelloController.java
Patch:
@@ -18,13 +18,13 @@
 
 package test.org.springdoc.ui.app18;
 
+import javax.validation.Valid;
+import javax.validation.constraints.Size;
+
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
-import javax.validation.Valid;
-import javax.validation.constraints.Size;
-
 @RestController
 public class HelloController {
 

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeActuator.java
Patch:
@@ -129,12 +129,12 @@ protected void calculateOauth2RedirectUrl(UriComponentsBuilder uriComponentsBuil
 	}
 
 	@Override
-	protected String buildApiDocUrl(String contextPath) {
+	protected String buildApiDocUrl() {
 		return buildUrl(contextPath + webEndpointProperties.getBasePath(), DEFAULT_API_DOCS_ACTUATOR_URL);
 	}
 
 	@Override
-	protected String buildSwaggerConfigUrl(String contextPath) {
+	protected String buildSwaggerConfigUrl() {
 		return contextPath + webEndpointProperties.getBasePath()
 				+ DEFAULT_PATH_SEPARATOR + DEFAULT_SWAGGER_UI_ACTUATOR_PATH
 				+ DEFAULT_PATH_SEPARATOR + SWAGGGER_CONFIG_FILE;

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app18/SpringDocApp18Test.java
Patch:
@@ -40,7 +40,6 @@
 				"server.port=9018",
 				"springdoc.swagger-ui.path=/documentation/swagger-ui.html",
 				"springdoc.api-docs.path=/documentation/v3/api-docs",
-				"spring.webflux.base-path=/test",
 				"springdoc.webjars.prefix= /webjars-pref" })
 class SpringDocApp18Test extends AbstractCommonTest {
 
@@ -59,7 +58,7 @@ void init(){
 	}
 
 	@Test
-	public void testIndexActuator() throws Exception {
+	public void testIndex() throws Exception {
 		HttpStatus httpStatusMono = webClient.get().uri("/test/documentation/swagger-ui.html")
 				.exchangeToMono(clientResponse -> Mono.just(clientResponse.statusCode())).block();
 		assertThat(httpStatusMono).isEqualTo(HttpStatus.FOUND);

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeActuator.java
Patch:
@@ -122,9 +122,9 @@ protected void calculateUiRootPath(StringBuilder... sbUrls) {
 
 	@Override
 	protected void calculateOauth2RedirectUrl(UriComponentsBuilder uriComponentsBuilder) {
-		if (oauthPrefix == null && !swaggerUiConfigParameters.isValidUrl(swaggerUiConfigParameters.getOauth2RedirectUrl())) {
+		if ((oauthPrefix == null && !swaggerUiConfigParameters.isValidUrl(swaggerUiConfigParameters.getOauth2RedirectUrl())) || springDocConfigProperties.isCacheDisabled()) {
 			this.oauthPrefix = uriComponentsBuilder.path(managementServerProperties.getBasePath() + swaggerUiConfigParameters.getUiRootPath()).path(webJarsPrefixUrl);
-			swaggerUiConfigParameters.setOauth2RedirectUrl(this.oauthPrefix.path(swaggerUiConfigParameters.getOauth2RedirectUrl()).build().toString());
+			swaggerUiConfigParameters.setOauth2RedirectUrl(this.oauthPrefix.path(getOauth2RedirectUrl()).build().toString());
 		}
 	}
 

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeWebFlux.java
Patch:
@@ -144,9 +144,9 @@ protected void calculateUiRootPath(StringBuilder... sbUrls) {
 
 	@Override
 	protected void calculateOauth2RedirectUrl(UriComponentsBuilder uriComponentsBuilder) {
-		if (oauthPrefix == null && !swaggerUiConfigParameters.isValidUrl(swaggerUiConfigParameters.getOauth2RedirectUrl())) {
+		if ((oauthPrefix == null && !swaggerUiConfigParameters.isValidUrl(swaggerUiConfigParameters.getOauth2RedirectUrl())) || springDocConfigProperties.isCacheDisabled())  {
 			this.oauthPrefix = uriComponentsBuilder.path(webfluxBasePath).path(swaggerUiConfigParameters.getUiRootPath()).path(webJarsPrefixUrl);
-			swaggerUiConfigParameters.setOauth2RedirectUrl(this.oauthPrefix.path(swaggerUiConfigParameters.getOauth2RedirectUrl()).build().toString());
+			swaggerUiConfigParameters.setOauth2RedirectUrl(this.oauthPrefix.path(getOauth2RedirectUrl()).build().toString());
 		}
 	}
 }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RequestBodyService.java
Patch:
@@ -237,8 +237,10 @@ public void calculateRequestBodyInfo(Components components, MethodAttributes met
 
 		RequestPart requestPart = methodParameter.getParameterAnnotation(RequestPart.class);
 		String paramName = null;
-		if (requestPart != null)
+		if (requestPart != null){
 			paramName = StringUtils.defaultIfEmpty(requestPart.value(), requestPart.name());
+			parameterInfo.setRequired(requestPart.required());
+		}
 		paramName = StringUtils.defaultIfEmpty(paramName, parameterInfo.getpName());
 		parameterInfo.setpName(paramName);
 

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeActuator.java
Patch:
@@ -12,6 +12,7 @@
 import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
 import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpoint;
 import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.ResponseBody;
 
@@ -54,7 +55,7 @@ public SwaggerWelcomeActuator(SwaggerUiConfigProperties swaggerUiConfig, SpringD
 	@Operation(hidden = true)
 	@GetMapping(DEFAULT_PATH_SEPARATOR)
 	@Override
-	public String redirectToUi(HttpServletRequest request) {
+	public ResponseEntity<Void> redirectToUi(HttpServletRequest request) {
 		return super.redirectToUi(request);
 	}
 

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeWebMvc.java
Patch:
@@ -32,6 +32,7 @@
 
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.ResponseBody;
@@ -76,7 +77,7 @@ public SwaggerWelcomeWebMvc(SwaggerUiConfigProperties swaggerUiConfig, SpringDoc
 	@Operation(hidden = true)
 	@GetMapping(SWAGGER_UI_PATH)
 	@Override
-	public String redirectToUi(HttpServletRequest request) {
+	public ResponseEntity<Void> redirectToUi(HttpServletRequest request) {
 		return super.redirectToUi(request);
 	}
 

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/SpringDocDataRestConfiguration.java
Patch:
@@ -175,9 +175,9 @@ static class SpringRepositoryRestResourceProviderConfiguration {
 		SpringRepositoryRestResourceProvider springRepositoryRestResourceProvider(ResourceMappings mappings,
 				Repositories repositories, Associations associations, ApplicationContext applicationContext,
 				DataRestRouterOperationService dataRestRouterOperationService, PersistentEntities persistentEntities,
-				ObjectMapper mapper) {
+				ObjectMapper mapper,SpringDocDataRestUtils springDocDataRestUtils) {
 			return new SpringRepositoryRestResourceProvider(mappings, repositories, associations, applicationContext,
-					dataRestRouterOperationService, persistentEntities, mapper);
+					dataRestRouterOperationService, persistentEntities, mapper, springDocDataRestUtils);
 		}
 
 		/**

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestOperationService.java
Patch:
@@ -156,7 +156,7 @@ private Operation buildEntityOperation(HandlerMethod handlerMethod, DataRestRepo
 			domainType = dataRestRepository.getDomainType();
 		Operation operation = initOperation(handlerMethod, domainType, requestMethod);
 		dataRestRequestService.buildParameters(openAPI, handlerMethod, requestMethod, methodAttributes, operation, resourceMetadata, dataRestRepository);
-		dataRestResponseService.buildEntityResponse(operation, handlerMethod, openAPI, requestMethod, operationPath, domainType, methodAttributes, dataRestRepository, resourceMetadata);
+		dataRestResponseService.buildEntityResponse(operation, handlerMethod, openAPI, requestMethod, operationPath, methodAttributes, dataRestRepository, resourceMetadata);
 		tagsBuilder.buildEntityTags(operation, handlerMethod, dataRestRepository);
 		if (domainType != null)
 			addOperationDescription(operation, requestMethod, domainType.getSimpleName().toLowerCase(), dataRestRepository);

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestRequestService.java
Patch:
@@ -233,7 +233,7 @@ else if (!RequestMethod.GET.equals(requestMethod)) {
 			requestBuilder.applyBeanValidatorAnnotations(requestBodyInfo.getRequestBody(), parameterAnnotations, methodParameter.isOptional());
 			operation.setRequestBody(requestBodyInfo.getRequestBody());
 			Content content = operation.getRequestBody().getContent();
-			springDocDataRestUtils.enhanceRequestBodyContent(openAPI, resourceMetadata, content, dataRestRepository);
+			springDocDataRestUtils.buildTextUriContent(content);
 			operation.getRequestBody().setRequired(true);
 		}
 	}

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeActuator.java
Patch:
@@ -12,6 +12,7 @@
 import org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;
 import org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpoint;
 import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.ResponseBody;
 
@@ -54,7 +55,7 @@ public SwaggerWelcomeActuator(SwaggerUiConfigProperties swaggerUiConfig, SpringD
 	@Operation(hidden = true)
 	@GetMapping(DEFAULT_PATH_SEPARATOR)
 	@Override
-	public String redirectToUi(HttpServletRequest request) {
+	public ResponseEntity<Void> redirectToUi(HttpServletRequest request) {
 		return super.redirectToUi(request);
 	}
 

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcomeWebMvc.java
Patch:
@@ -32,6 +32,7 @@
 
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.ResponseBody;
@@ -76,7 +77,7 @@ public SwaggerWelcomeWebMvc(SwaggerUiConfigProperties swaggerUiConfig, SpringDoc
 	@Operation(hidden = true)
 	@GetMapping(SWAGGER_UI_PATH)
 	@Override
-	public String redirectToUi(HttpServletRequest request) {
+	public ResponseEntity<Void> redirectToUi(HttpServletRequest request) {
 		return super.redirectToUi(request);
 	}
 

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/utils/SpringDocDataRestUtils.java
Patch:
@@ -114,7 +114,8 @@ public void enhanceRequestBodyContent(OpenAPI openAPI, ResourceMetadata resource
 					Schema newSchema = new ObjectSchema();
 					newSchema.setRequired(existingSchema.getRequired());
 					Map<String, Schema> properties = existingSchema.getProperties();
-					properties.forEach((propId, val) -> updateRequestBodySchema(associationsFields, newSchema, propId, val));
+					if (!CollectionUtils.isEmpty(properties))
+						properties.forEach((propId, val) -> updateRequestBodySchema(associationsFields, newSchema, propId, val));
 					schemas.put(newKey, newSchema);
 					schema.set$ref(Components.COMPONENTS_SCHEMAS_REF + newKey);
 				}
@@ -208,7 +209,7 @@ private void updateRequestBodySchema(List<String> associationsFields, Schema new
 	 * @param propId the prop id
 	 * @param val the val
 	 */
-	private void updateResponseSchema(Schema newSchema, Class<?> returnType, List<String> ignoredFields,  String propId, Schema val) {
+	private void updateResponseSchema(Schema newSchema, Class<?> returnType, List<String> ignoredFields, String propId, Schema val) {
 		if (EMBEDDED.equals(propId)) {
 			String entityClassName = linkRelationProvider.getCollectionResourceRelFor(returnType).value();
 			ArraySchema arraySchema = (ArraySchema) ((ObjectSchema) val).getProperties().get(entityClassName);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/ParameterInfo.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.commons.lang3.StringUtils;
 
 import org.springframework.core.MethodParameter;
+import org.springframework.core.convert.TypeDescriptor;
 import org.springframework.web.bind.annotation.CookieValue;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestHeader;
@@ -101,7 +102,7 @@ else if (cookieValue != null)
 		if (this.defaultValue !=null && !ValueConstants.DEFAULT_NONE.equals(this.defaultValue.toString())){
 			this.defaultValue = propertyResolverUtils.resolve(this.defaultValue.toString());
 			parameterBuilder.getOptionalWebConversionServiceProvider()
-					.ifPresent(conversionService ->this.defaultValue= conversionService.convert(this.defaultValue, methodParameter.getParameterType()));
+					.ifPresent(conversionService ->this.defaultValue= conversionService.convert(this.defaultValue, new TypeDescriptor(methodParameter)));
 		}
 
 		this.required = this.required && !methodParameter.isOptional();

File: springdoc-openapi-common/src/main/java/org/springdoc/core/ParameterInfo.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.commons.lang3.StringUtils;
 
 import org.springframework.core.MethodParameter;
+import org.springframework.core.convert.TypeDescriptor;
 import org.springframework.web.bind.annotation.CookieValue;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestHeader;
@@ -101,7 +102,7 @@ else if (cookieValue != null)
 		if (this.defaultValue !=null && !ValueConstants.DEFAULT_NONE.equals(this.defaultValue.toString())){
 			this.defaultValue = propertyResolverUtils.resolve(this.defaultValue.toString());
 			parameterBuilder.getOptionalWebConversionServiceProvider()
-					.ifPresent(conversionService ->this.defaultValue= conversionService.convert(this.defaultValue, methodParameter.getParameterType()));
+					.ifPresent(conversionService ->this.defaultValue= conversionService.convert(this.defaultValue, new TypeDescriptor(methodParameter)));
 		}
 
 		this.required = this.required && !methodParameter.isOptional();

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/SpringRepositoryRestResourceProvider.java
Patch:
@@ -181,6 +181,7 @@ public List<RouterOperation> getRouterOperations(OpenAPI openAPI) {
 			DataRestRepository dataRestRepository = new DataRestRepository(domainType, repository);
 			ResourceMetadata resourceMetadata = mappings.getMetadataFor(domainType);
 			final PersistentEntity<?, ?> entity = persistentEntities.getRequiredPersistentEntity(domainType);
+			dataRestRepository.setPersistentEntity(entity);
 			final JacksonMetadata jackson = new JacksonMetadata(mapper, domainType);
 
 			if (resourceMetadata.isExported()) {
@@ -339,7 +340,8 @@ private void findSearchResourceMappings(OpenAPI openAPI, List<RouterOperation> r
 	 * @return the list
 	 */
 	private List<RouterOperation> findSearchControllers(List<RouterOperation> routerOperationList,
-			Map<RequestMappingInfo, HandlerMethod> handlerMethodMap, ResourceMetadata resourceMetadata, DataRestRepository dataRestRepository, OpenAPI openAPI, SearchResourceMappings searchResourceMappings) {
+			Map<RequestMappingInfo, HandlerMethod> handlerMethodMap, ResourceMetadata resourceMetadata, DataRestRepository dataRestRepository,
+			OpenAPI openAPI, SearchResourceMappings searchResourceMappings) {
 		Stream<MethodResourceMapping> methodResourceMappingStream = searchResourceMappings.getExportedMappings();
 		methodResourceMappingStream.forEach(methodResourceMapping -> dataRestRouterOperationService.buildSearchRouterOperationList(
 				routerOperationList, handlerMethodMap, resourceMetadata, dataRestRepository, openAPI, methodResourceMapping));

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestRouterOperationService.java
Patch:
@@ -139,7 +139,7 @@ public void buildSearchRouterOperationList(List<RouterOperation> routerOperation
 		Optional<Entry<RequestMappingInfo, HandlerMethod>> entryOptional = getSearchEntry(handlerMethodMap);
 		if (entryOptional.isPresent()) {
 			Entry<RequestMappingInfo, HandlerMethod> entry = entryOptional.get();
-			buildRouterOperationList(routerOperationList, null, dataRestRepository, openAPI, path, entry, subPath.toString(), ControllerType.SEARCH, methodResourceMapping);
+			buildRouterOperationList(routerOperationList, resourceMetadata, dataRestRepository, openAPI, path, entry, subPath.toString(), ControllerType.SEARCH, methodResourceMapping);
 		}
 	}
 
@@ -162,7 +162,7 @@ private void buildRouterOperationList(List<RouterOperation> routerOperationList,
 		RequestMappingInfo requestMappingInfo = entry.getKey();
 		HandlerMethod handlerMethod = entry.getValue();
 		Set<RequestMethod> requestMethods = requestMappingInfo.getMethodsCondition().getMethods();
-		if (resourceMetadata != null) {
+		if (resourceMetadata != null && !controllerType.equals(ControllerType.SEARCH) ) {
 			HttpMethods httpMethodsItem = resourceMetadata.getSupportedHttpMethods().getMethodsFor(ResourceType.ITEM);
 			Set<RequestMethod> requestMethodsItem = requestMethods.stream().filter(requestMethod -> httpMethodsItem.contains(HttpMethod.valueOf(requestMethod.toString())))
 					.collect(Collectors.toSet());

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestOperationService.java
Patch:
@@ -155,7 +155,7 @@ private Operation buildEntityOperation(HandlerMethod handlerMethod, DataRestRepo
 			domainType = dataRestRepository.getDomainType();
 		Operation operation = initOperation(handlerMethod, domainType, requestMethod);
 		dataRestRequestService.buildParameters(domainType, openAPI, handlerMethod, requestMethod, methodAttributes, operation, resourceMetadata);
-		dataRestResponseService.buildEntityResponse(operation, handlerMethod, openAPI, requestMethod, operationPath, domainType, methodAttributes, dataRestRepository);
+		dataRestResponseService.buildEntityResponse(operation, handlerMethod, openAPI, requestMethod, operationPath, domainType, methodAttributes, dataRestRepository, resourceMetadata);
 		tagsBuilder.buildEntityTags(operation, handlerMethod, dataRestRepository);
 		if (domainType != null)
 			addOperationDescription(operation, requestMethod, domainType.getSimpleName().toLowerCase(), dataRestRepository);

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestRequestService.java
Patch:
@@ -216,6 +216,7 @@ else if (!RequestMethod.GET.equals(requestMethod)) {
 					parameterInfo, requestBodyInfo);
 			requestBuilder.applyBeanValidatorAnnotations(requestBodyInfo.getRequestBody(), parameterAnnotations, methodParameter.isOptional());
 			operation.setRequestBody(requestBodyInfo.getRequestBody());
+			operation.getRequestBody().setRequired(true);
 		}
 	}
 

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/customisers/QuerydslPredicateOperationCustomizer.java
Patch:
@@ -118,7 +118,7 @@ public Operation customize(Operation operation, HandlerMethod handlerMethod) {
 
 			// if only listed properties should be included, remove all other fields from fieldsToAdd
 			if (getFieldValueOfBoolean(bindings, "excludeUnlistedProperties")) {
-				fieldsToAdd.removeIf(s -> !whiteList.contains(s));
+				fieldsToAdd.removeIf(s -> !whiteList.contains(s) && !aliases.contains(s) );
 			}
 
 			for (String fieldName : fieldsToAdd) {

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestResponseService.java
Patch:
@@ -254,7 +254,7 @@ else if ((HttpEntity.class.equals(parameterizedType.getRawType())
 			}
 			else if ((CollectionModel.class.equals(parameterizedType.getRawType())
 					&& Object.class.equals(parameterizedType.getActualTypeArguments()[0]))) {
-				return ResolvableType.forClassWithGenerics(CollectionModel.class, returnedEntityType).getType();
+				return resolveGenericType(CollectionModel.class, EntityModel.class, returnedEntityType);
 			}
 		}
 		return returnType;

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -359,6 +359,7 @@ protected void calculatePath(HandlerMethod handlerMethod, RouterOperation router
 				methodAttributes.setClassProduces(reqMappingClass.produces());
 			}
 
+			methodAttributes.calculateHeadersForClass(method.getDeclaringClass());
 			methodAttributes.calculateConsumesProduces(method);
 
 			Operation operation = (existingOperation != null) ? existingOperation : new Operation();

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app129/HelloController.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.web.context.request.async.DeferredResult;
 
 @RestController
-@RequestMapping("/api")
+@RequestMapping(path = "/api", headers = {"userId", "registrationId"})
 public class HelloController {
 
 	@GetMapping("/test")

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/SpringRepositoryRestResourceProvider.java
Patch:
@@ -84,7 +84,7 @@ public class SpringRepositoryRestResourceProvider implements RepositoryRestResou
 	/**
 	 * The constant REPOSITORY_ENTITY_CONTROLLER.
 	 */
-	private static final String REPOSITORY_ENTITY_CONTROLLER = SPRING_DATA_REST_PACKAGE + ".webmvc.RepositoryEntityController";
+	public static final String REPOSITORY_ENTITY_CONTROLLER = SPRING_DATA_REST_PACKAGE + ".webmvc.RepositoryEntityController";
 
 	/**
 	 * The constant REPOSITORY_SEARCH_CONTROLLER.

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SecurityService.java
Patch:
@@ -135,7 +135,7 @@ public io.swagger.v3.oas.annotations.security.SecurityRequirement[] getSecurityR
 	 * @param allSecurityTags the all security tags
 	 * @return the security requirements for method
 	 */
-	private Set<io.swagger.v3.oas.annotations.security.SecurityRequirement> getSecurityRequirementsForMethod(Method method, Set<io.swagger.v3.oas.annotations.security.SecurityRequirement> allSecurityTags) {
+	public Set<io.swagger.v3.oas.annotations.security.SecurityRequirement> getSecurityRequirementsForMethod(Method method, Set<io.swagger.v3.oas.annotations.security.SecurityRequirement> allSecurityTags) {
 		io.swagger.v3.oas.annotations.security.SecurityRequirements methodSecurity = AnnotatedElementUtils.findMergedAnnotation(method, io.swagger.v3.oas.annotations.security.SecurityRequirements.class);
 		if (methodSecurity != null)
 			allSecurityTags = addSecurityRequirements(allSecurityTags, new HashSet<>(Arrays.asList(methodSecurity.value())));

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestOperationService.java
Patch:
@@ -225,7 +225,7 @@ private Operation buildSearchOperation(HandlerMethod handlerMethod, DataRestRepo
 					.ifPresent(methodParameterPage -> dataRestRequestService.buildCommonParameters(domainType, openAPI, requestMethod, methodAttributes, operation, new String[] { methodParameterPage.getParameterName() }, new MethodParameter[] { methodParameterPage }));
 		}
 		dataRestResponseService.buildSearchResponse(operation, handlerMethod, openAPI, methodResourceMapping, domainType, methodAttributes);
-		tagsBuilder.buildSearchTags(operation, handlerMethod, dataRestRepository);
+		tagsBuilder.buildSearchTags(operation, handlerMethod, dataRestRepository, method);
 		return operation;
 	}
 

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/app16/CustomerRepository.java
Patch:
@@ -23,6 +23,7 @@
 
 package test.org.springdoc.api.app16;
 
+import io.swagger.v3.oas.annotations.security.SecurityRequirement;
 import io.swagger.v3.oas.annotations.tags.Tag;
 
 import org.springframework.data.domain.Page;
@@ -49,6 +50,7 @@ public interface CustomerRepository extends CrudRepository<Customer, Long>, JpaS
 	 * @param pageable
 	 * @return
 	 */
+	@SecurityRequirement(name = "bearer")
 	Page<Customer> findByLastname(@Param("lastname")  String lastname, Pageable pageable);
 
 	@Override

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/api/OpenApiResource.java
Patch:
@@ -72,7 +72,7 @@ public abstract class OpenApiResource extends AbstractOpenApiResource {
 	/**
 	 * The Request mapping handler mapping.
 	 */
-	private final RequestMappingInfoHandlerMapping requestMappingHandlerMapping;
+	protected final RequestMappingInfoHandlerMapping requestMappingHandlerMapping;
 
 	/**
 	 * Instantiates a new Open api resource.

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app19/SpringDocApp19Test.java
Patch:
@@ -55,7 +55,7 @@ void init(){
 	}
 
 	@Test
-	public void testIndexActuator() throws Exception {
+	public void testIndex() throws Exception {
 		HttpStatus httpStatusMono = webClient.get().uri("/")
 				.exchangeToMono(clientResponse -> Mono.just(clientResponse.statusCode())).block();
 		assertTrue(httpStatusMono.equals(HttpStatus.TEMPORARY_REDIRECT));
@@ -66,7 +66,6 @@ public void testIndexActuator() throws Exception {
 
 		String contentAsString  = webClient.get().uri("/v3/api-docs/swagger-config").retrieve()
 				.bodyToMono(String.class).block();
-		System.out.println(contentAsString);
 		String expected = getContent("results/app19-1.json");
 		assertEquals(expected, contentAsString, true);
 	}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -71,7 +71,6 @@
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.bind.annotation.RestControllerAdvice;
-import org.springframework.web.context.request.WebRequest;
 import org.springframework.web.context.request.async.DeferredResult;
 
 import static org.springdoc.core.Constants.SPRINGDOC_DEPRECATING_CONVERTER_ENABLED;
@@ -350,12 +349,11 @@ class OpenApiResourceAdvice {
 		 * Handle no handler found response entity.
 		 *
 		 * @param e the e
-		 * @param request the request
 		 * @return the response entity
 		 */
 		@ExceptionHandler(OpenApiResourceNotFoundException.class)
 		@ResponseStatus(HttpStatus.NOT_FOUND)
-		public ResponseEntity<ErrorMessage> handleNoHandlerFound(OpenApiResourceNotFoundException e, WebRequest request) {
+		public ResponseEntity<ErrorMessage> handleNoHandlerFound(OpenApiResourceNotFoundException e) {
 			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ErrorMessage(e.getMessage()));
 		}
 	}

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerConfig.java
Patch:
@@ -65,13 +65,14 @@ public class SwaggerConfig implements WebFluxConfigurer {
 	 * @param swaggerUiConfig the swagger ui config
 	 * @param springDocConfigProperties the spring doc config properties
 	 * @param swaggerUiConfigParameters the swagger ui config parameters
+	 * @param optionalWebFluxProperties the optional web flux properties
 	 * @return the swagger welcome web flux
 	 */
 	@Bean
 	@ConditionalOnMissingBean
 	@ConditionalOnProperty(name = SPRINGDOC_USE_MANAGEMENT_PORT, havingValue = "false", matchIfMissing = true)
-	SwaggerWelcomeWebFlux swaggerWelcome(SwaggerUiConfigProperties swaggerUiConfig, SpringDocConfigProperties springDocConfigProperties,SwaggerUiConfigParameters swaggerUiConfigParameters, WebFluxProperties webFluxProperties) {
-		return new SwaggerWelcomeWebFlux(swaggerUiConfig,springDocConfigProperties,swaggerUiConfigParameters,webFluxProperties);
+	SwaggerWelcomeWebFlux swaggerWelcome(SwaggerUiConfigProperties swaggerUiConfig, SpringDocConfigProperties springDocConfigProperties,SwaggerUiConfigParameters swaggerUiConfigParameters, Optional<WebFluxProperties> optionalWebFluxProperties) {
+		return new SwaggerWelcomeWebFlux(swaggerUiConfig,springDocConfigProperties,swaggerUiConfigParameters,optionalWebFluxProperties);
 	}
 
 	/**

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerWelcomeCommon.java
Patch:
@@ -108,7 +108,7 @@ protected void calculateOauth2RedirectUrl(UriComponentsBuilder uriComponentsBuil
 	private String fromCurrentContextPath(ServerHttpRequest request) {
 		String contextPath = request.getPath().contextPath().value();
 		String url = UriComponentsBuilder.fromHttpRequest(request).toUriString();
-		url = url.replace(request.getPath().toString(), "");
+		url = url.replace(request.getPath().toString(), "/");
 		buildConfigUrl(contextPath, UriComponentsBuilder.fromUriString(url));
 		return contextPath;
 	}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericResponseService.java
Patch:
@@ -318,7 +318,7 @@ private void buildApiResponses(Components components, MethodParameter methodPara
 	 * @param method the method
 	 * @return the api responses
 	 */
-	private Set<io.swagger.v3.oas.annotations.responses.ApiResponse> getApiResponses(Method method) {
+	public Set<io.swagger.v3.oas.annotations.responses.ApiResponse> getApiResponses(Method method) {
 		Class<?> declaringClass = method.getDeclaringClass();
 
 		Set<io.swagger.v3.oas.annotations.responses.ApiResponses> apiResponsesDoc = AnnotatedElementUtils

File: springdoc-openapi-hateoas/src/main/java/org/springdoc/hateoas/SpringDocHateoasConfiguration.java
Patch:
@@ -42,6 +42,7 @@
 import org.springframework.hateoas.RepresentationModel;
 import org.springframework.hateoas.server.LinkRelationProvider;
 
+import static org.springdoc.core.Constants.LINKS_SCHEMA_CUSTOMISER;
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
 
 /**
@@ -90,7 +91,7 @@ CollectionModelContentConverter collectionModelContentConverter(HateoasHalProvid
 	 * @return the open api customiser
 	 * @see org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalLinkListSerializer#serialize(Links, JsonGenerator, SerializerProvider) org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalLinkListSerializer#serialize(Links, JsonGenerator, SerializerProvider)org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalLinkListSerializer#serialize(Links, JsonGenerator, SerializerProvider)org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalLinkListSerializer#serialize(Links, JsonGenerator, SerializerProvider)
 	 */
-	@Bean
+	@Bean(LINKS_SCHEMA_CUSTOMISER)
 	@ConditionalOnMissingBean
 	@Lazy(false)
 	OpenApiCustomiser linksSchemaCustomiser(HateoasHalProvider halProvider, SpringDocConfigProperties springDocConfigProperties) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocAnnotationsUtils.java
Patch:
@@ -106,7 +106,7 @@ public static Schema resolveSchemaFromType(Class<?> schemaImplementation, Compon
 	 */
 	public static Schema extractSchema(Components components, Type returnType, JsonView jsonView, Annotation[] annotations) {
 		Schema schemaN = null;
-		ResolvedSchema resolvedSchema = null;
+		ResolvedSchema resolvedSchema;
 		try {
 			resolvedSchema = ModelConverters.getInstance()
 					.resolveAsResolvedSchema(

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/customisers/QuerydslPredicateOperationCustomizer.java
Patch:
@@ -275,7 +275,7 @@ private io.swagger.v3.oas.models.parameters.Parameter buildParam(Type type, Stri
 		}
 
 		if (parameter.getSchema() == null) {
-			Schema<?> schema = null;
+			Schema<?> schema ;
 			PrimitiveType primitiveType = PrimitiveType.fromType(type);
 			if (primitiveType != null) {
 				schema = primitiveType.createProperty();

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestResponseService.java
Patch:
@@ -168,7 +168,8 @@ private Type findSearchReturnType(HandlerMethod handlerMethod, MethodResourceMap
 		if (methodResourceMapping.isPagingResource()) {
 			returnType = ResolvableType.forClassWithGenerics(PagedModel.class, domainType).getType();
 		}
-		else if (Iterable.class.isAssignableFrom(ResolvableType.forType(returnRepoType).getRawClass())) {
+		else if (ResolvableType.forType(returnRepoType).getRawClass() != null
+				&& Iterable.class.isAssignableFrom(ResolvableType.forType(returnRepoType).getRawClass())) {
 			returnType = ResolvableType.forClassWithGenerics(CollectionModel.class, domainType).getType();
 		}
 		else if (!ClassUtils.isPrimitiveOrWrapper(domainType)) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericParameterService.java
Patch:
@@ -54,8 +54,6 @@
 import org.springframework.core.io.Resource;
 import org.springframework.web.multipart.MultipartFile;
 
-import static java.util.Objects.isNull;
-
 /**
  * The type Generic parameter builder.
  * @author bnasslahsen, coutin
@@ -400,9 +398,10 @@ private void setParameterStyle(Parameter parameter, io.swagger.v3.oas.annotation
 	private boolean isExplodable(io.swagger.v3.oas.annotations.Parameter p) {
 		io.swagger.v3.oas.annotations.media.Schema schema = p.schema();
 		io.swagger.v3.oas.annotations.media.ArraySchema arraySchema = p.array();
+
 		boolean explode = true;
 		Class<?> implementation = schema.implementation();
-		if (implementation == Void.class && !schema.type().equals("object") && !schema.type().equals("array") && isNull(arraySchema)) {
+		if (implementation == Void.class && !schema.type().equals("object") && !schema.type().equals("array") && !AnnotationsUtils.hasArrayAnnotation(arraySchema)) {
 			explode = false;
 		}
 		return explode;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestService.java
Patch:
@@ -420,7 +420,7 @@ public Parameter buildParams(ParameterInfo parameterInfo, Components components,
 		// By default
 		DelegatingMethodParameter delegatingMethodParameter = (DelegatingMethodParameter) methodParameter;
 		if (RequestMethod.GET.equals(requestMethod)
-				|| (parameterInfo.getParameterModel() != null && (ParameterIn.PATH.toString().equals(parameterInfo.getParameterModel().getIn())))
+				|| (parameterInfo.getParameterModel() != null && parameterInfo.getParameterModel().getIn() !=null)
 				|| delegatingMethodParameter.isParameterObject()){
 			parameterInfo.setRequired(!methodParameter.isOptional());
 			parameterInfo.setParamType(QUERY_PARAM);

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app82/RoutingConfiguration.java
Patch:
@@ -29,7 +29,7 @@ public RouterFunction<ServerResponse> monoRouterFunction(UserHandler userHandler
 				.and(route(POST("/api/user/post").and(accept(APPLICATION_JSON)), userHandler::postUser)
 						.withAttribute(OPERATION_ATTRIBUTE, operationBuilder().beanClass(UserRepository.class).beanMethod("saveUser")))
 
-				.and(route(PUT("/api/user/put/{id}").and(accept(APPLICATION_JSON)), userHandler::putUser)
+				.and(route(PUT("/api/user/put").and(accept(APPLICATION_JSON)), userHandler::putUser)
 						.withAttribute(OPERATION_ATTRIBUTE, operationBuilder().beanClass(UserRepository.class).beanMethod("putUser")))
 
 				.and(route(DELETE("/api/user/delete/{id}").and(accept(APPLICATION_JSON)), userHandler::deleteUser)

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app82/UserRepository.java
Patch:
@@ -18,7 +18,7 @@ public interface UserRepository {
 
     public Mono<Void> saveUser(Mono<User> user);
 
-    public Mono<User> putUser(@Parameter(in = ParameterIn.PATH) Long id, Mono<User> user);
+    public Mono<User> putUser(@Parameter(in = ParameterIn.QUERY) Long id, Mono<User> user);
 
     public Mono<String> deleteUser(@Parameter(in = ParameterIn.PATH) Long id);
 }
\ No newline at end of file

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestService.java
Patch:
@@ -462,7 +462,7 @@ private Parameter buildParam(ParameterInfo parameterInfo, Components components,
 		if (parameter.getSchema() == null && parameter.getContent() == null) {
 			Schema<?> schema = parameterBuilder.calculateSchema(components, parameterInfo, null,
 					jsonView);
-			if (parameterInfo.getDefaultValue() != null)
+			if (parameterInfo.getDefaultValue() != null && schema !=null)
 				schema.setDefault(parameterInfo.getDefaultValue());
 			parameter.setSchema(schema);
 		}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestService.java
Patch:
@@ -237,7 +237,7 @@ public Operation build(HandlerMethod handlerMethod, RequestMethod requestMethod,
 
 		for (MethodParameter methodParameter : parameters) {
 			// check if query param
-			Parameter parameter = null;
+			Parameter parameter;
 			io.swagger.v3.oas.annotations.Parameter parameterDoc = AnnotatedElementUtils.findMergedAnnotation(
 					AnnotatedElementUtils.forAnnotations(methodParameter.getParameterAnnotations()),
 					io.swagger.v3.oas.annotations.Parameter.class);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/ActuatorProvider.java
Patch:
@@ -114,7 +114,7 @@ else if ("application:management".equals(event.getApplicationContext().getId()))
 	 *
 	 * @return the tag
 	 */
-	public Tag getTag() {
+	public static Tag getTag() {
 		Tag actuatorTag = new Tag();
 		actuatorTag.setName(Constants.SPRINGDOC_ACTUATOR_TAG);
 		actuatorTag.setDescription(Constants.SPRINGDOC_ACTUATOR_DESCRIPTION);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -318,7 +318,7 @@ public final class Constants {
 	/**
 	 * The constant DEFAULT_SWAGGER_UI_ACTUATOR_PATH.
 	 */
-	public static final String DEFAULT_SWAGGER_UI_ACTUATOR_PATH= "swagger-ui";
+	public static final String DEFAULT_SWAGGER_UI_ACTUATOR_PATH= "swaggerui";
 
 	/**
 	 * The constant DEFAULT_API_DOCS_ACTUATOR_URL.

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app13/SpringDocApp13Test.java
Patch:
@@ -48,13 +48,13 @@ void testIndex() throws Exception {
 
 	@Test
 	public void testIndexActuator() {
-		String contentAsString = actuatorRestTemplate.getForObject("/application/swagger-ui", String.class);
+		String contentAsString = actuatorRestTemplate.getForObject("/application/swaggerui", String.class);
 		assertTrue(contentAsString.contains("Swagger UI"));
 	}
 
 	@Test
 	public void testIndexSwaggerConfig() throws Exception {
-		String contentAsString = actuatorRestTemplate.getForObject("/application/swagger-ui/swagger-config", String.class);
+		String contentAsString = actuatorRestTemplate.getForObject("/application/swaggerui/swagger-config", String.class);
 		String expected = getContent("results/app13-1.json");
 		assertEquals(expected, contentAsString, true);
 	}

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app14/SpringDocApp14Test.java
Patch:
@@ -48,13 +48,13 @@ void testIndex() throws Exception {
 
 	@Test
 	public void testIndexActuator() {
-		String contentAsString = actuatorRestTemplate.getForObject("/application/swagger-ui", String.class);
+		String contentAsString = actuatorRestTemplate.getForObject("/application/swaggerui", String.class);
 		assertTrue(contentAsString.contains("Swagger UI"));
 	}
 
 	@Test
 	public void testIndexSwaggerConfig() throws Exception {
-		String contentAsString = actuatorRestTemplate.getForObject("/application/swagger-ui/swagger-config", String.class);
+		String contentAsString = actuatorRestTemplate.getForObject("/application/swaggerui/swagger-config", String.class);
 		String expected = getContent("results/app14-1.json");
 		assertEquals(expected, contentAsString, true);
 	}

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app15/SpringDocApp15Test.java
Patch:
@@ -51,13 +51,13 @@ void testIndex() throws Exception {
 
 	@Test
 	public void testIndexActuator() {
-		String contentAsString = actuatorRestTemplate.getForObject("/test/application/swagger-ui", String.class);
+		String contentAsString = actuatorRestTemplate.getForObject("/test/application/swaggerui", String.class);
 		assertTrue(contentAsString.contains("Swagger UI"));
 	}
 
 	@Test
 	public void testIndexSwaggerConfig() throws Exception {
-		String contentAsString = actuatorRestTemplate.getForObject("/test/application/swagger-ui/swagger-config", String.class);
+		String contentAsString = actuatorRestTemplate.getForObject("/test/application/swaggerui/swagger-config", String.class);
 		String expected = getContent("results/app15-1.json");
 		assertEquals(expected, contentAsString, true);
 	}

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app16/SpringDocApp16Test.java
Patch:
@@ -51,13 +51,13 @@ void testIndex() throws Exception {
 
 	@Test
 	public void testIndexActuator() {
-		String contentAsString = actuatorRestTemplate.getForObject("/test/application/swagger-ui", String.class);
+		String contentAsString = actuatorRestTemplate.getForObject("/test/application/swaggerui", String.class);
 		assertTrue(contentAsString.contains("Swagger UI"));
 	}
 
 	@Test
 	public void testIndexSwaggerConfig() throws Exception {
-		String contentAsString = actuatorRestTemplate.getForObject("/test/application/swagger-ui/swagger-config", String.class);
+		String contentAsString = actuatorRestTemplate.getForObject("/test/application/swaggerui/swagger-config", String.class);
 		String expected = getContent("results/app16-1.json");
 		assertEquals(expected, contentAsString, true);
 	}

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/api/OpenApiResource.java
Patch:
@@ -57,6 +57,7 @@
 import org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping;
 import org.springframework.web.util.pattern.PathPattern;
 
+import static org.springdoc.core.ActuatorProvider.getTag;
 import static org.springdoc.core.Constants.DEFAULT_GROUP_NAME;
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 
@@ -158,7 +159,7 @@ protected void getPaths(Map<String, Object> restControllers) {
 		calculatePath(restControllers, map);
 		if (isShowActuator()) {
 			map = optionalActuatorProvider.get().getMethods();
-			this.openAPIService.addTag(new HashSet<>(map.values()), optionalActuatorProvider.get().getTag());
+			this.openAPIService.addTag(new HashSet<>(map.values()), getTag());
 			calculatePath(restControllers, map);
 		}
 		getWebFluxRouterFunctionPaths();

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/MultipleOpenApiSupportConfiguration.java
Patch:
@@ -64,7 +64,7 @@
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 @Conditional(MultipleOpenApiSupportCondition.class)
-public class MultipleOpenApiWebFluxConfiguration {
+public class MultipleOpenApiSupportConfiguration {
 
 	/**
 	 * Multiple open api resource multiple open api resource.

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app148/SpringDocApp148Test.java
Patch:
@@ -55,7 +55,6 @@ public void testApp() throws Exception {
 	public void testApp2() throws Exception {
 		String result = webClient.get().uri("/test/application/openapi/x-actuator").retrieve()
 				.bodyToMono(String.class).block();
-
 		String expected = getContent("results/app148-2.json");
 		assertEquals(expected, result, true);
 	}

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app13/SpringDocApp13Test.java
Patch:
@@ -55,14 +55,14 @@ void testIndex() throws Exception {
 
 	@Test
 	public void testIndexActuator() {
-		HttpStatus httpStatusMono = webClient.get().uri("/application/swagger-ui")
+		HttpStatus httpStatusMono = webClient.get().uri("/application/swaggerui")
 				.exchangeToMono( clientResponse -> Mono.just(clientResponse.statusCode())).block();
 		assertTrue(httpStatusMono.equals(HttpStatus.TEMPORARY_REDIRECT));
 	}
 
 	@Test
 	public void testIndexSwaggerConfig() throws Exception {
-		String contentAsString = webClient.get().uri("/application/swagger-ui/swagger-config").retrieve()
+		String contentAsString = webClient.get().uri("/application/swaggerui/swagger-config").retrieve()
 				.bodyToMono(String.class).block();
 		String expected = getContent("results/app13-1.json");
 		assertEquals(expected, contentAsString, true);

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app14/SpringDocApp14Test.java
Patch:
@@ -53,14 +53,14 @@ void testIndex() throws Exception {
 
 	@Test
 	public void testIndexActuator() {
-		HttpStatus httpStatusMono = webClient.get().uri("/application/swagger-ui")
+		HttpStatus httpStatusMono = webClient.get().uri("/application/swaggerui")
 				.exchangeToMono( clientResponse -> Mono.just(clientResponse.statusCode())).block();
 		assertTrue(httpStatusMono.equals(HttpStatus.TEMPORARY_REDIRECT));
 	}
 
 	@Test
 	public void testIndexSwaggerConfig() throws Exception {
-		String contentAsString = webClient.get().uri("/application/swagger-ui/swagger-config").retrieve()
+		String contentAsString = webClient.get().uri("/application/swaggerui/swagger-config").retrieve()
 				.bodyToMono(String.class).block();
 		String expected = getContent("results/app14-1.json");
 		assertEquals(expected, contentAsString, true);

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app15/SpringDocApp15Test.java
Patch:
@@ -55,14 +55,14 @@ void testIndex() {
 
 	@Test
 	public void testIndexActuator() {
-		HttpStatus httpStatusMono = webClient.get().uri("/test/application/swagger-ui")
+		HttpStatus httpStatusMono = webClient.get().uri("/test/application/swaggerui")
 				.exchangeToMono( clientResponse -> Mono.just(clientResponse.statusCode())).block();
 		assertTrue(httpStatusMono.equals(HttpStatus.TEMPORARY_REDIRECT));
 	}
 
 	@Test
 	public void testIndexSwaggerConfig() throws Exception {
-		String contentAsString = webClient.get().uri("/test/application/swagger-ui/swagger-config").retrieve()
+		String contentAsString = webClient.get().uri("/test/application/swaggerui/swagger-config").retrieve()
 				.bodyToMono(String.class).block();
 		String expected = getContent("results/app15-1.json");
 		assertEquals(expected, contentAsString, true);

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app16/SpringDocApp16Test.java
Patch:
@@ -54,14 +54,14 @@ void testIndex() throws Exception {
 
 	@Test
 	public void testIndexActuator() {
-		HttpStatus httpStatusMono = webClient.get().uri("/test/application/swagger-ui")
+		HttpStatus httpStatusMono = webClient.get().uri("/test/application/swaggerui")
 				.exchangeToMono( clientResponse -> Mono.just(clientResponse.statusCode())).block();
 		assertTrue(httpStatusMono.equals(HttpStatus.TEMPORARY_REDIRECT));
 	}
 
 	@Test
 	public void testIndexSwaggerConfig() throws Exception {
-		String contentAsString = webClient.get().uri("/test/application/swagger-ui/swagger-config").retrieve()
+		String contentAsString = webClient.get().uri("/test/application/swaggerui/swagger-config").retrieve()
 				.bodyToMono(String.class).block();
 		String expected = getContent("results/app16-1.json");
 		assertEquals(expected, contentAsString, true);

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -60,6 +60,7 @@
 import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
 import org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping;
 
+import static org.springdoc.core.ActuatorProvider.getTag;
 import static org.springdoc.core.Constants.DEFAULT_GROUP_NAME;
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 
@@ -196,7 +197,7 @@ protected void getPaths(Map<String, Object> restControllers) {
 
 		if (isShowActuator()) {
 			map = optionalActuatorProvider.get().getMethods();
-			this.openAPIService.addTag(new HashSet<>(map.values()), optionalActuatorProvider.get().getTag());
+			this.openAPIService.addTag(new HashSet<>(map.values()), getTag());
 			calculatePath(restControllers, map);
 		}
 		if (this.springSecurityOAuth2Provider.isPresent()) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigParameters.java
Patch:
@@ -117,6 +117,7 @@ public SwaggerUiConfigParameters(SwaggerUiConfigProperties swaggerUiConfig) {
 		this.urlsPrimaryName = swaggerUiConfig.getUrlsPrimaryName();
 		this.groupsOrder = swaggerUiConfig.getGroupsOrder();
 		this.syntaxHighlight = swaggerUiConfig.getSyntaxHighlight();
+		this.persistAuthorization = swaggerUiConfig.getPersistAuthorization();
 	}
 
 	/**
@@ -205,6 +206,7 @@ public Map<String, Object> getConfigParameters() {
 		SpringDocPropertiesUtils.put("url", url, params);
 		put(URLS_PROPERTY, urls, params);
 		SpringDocPropertiesUtils.put("urls.primaryName", urlsPrimaryName, params);
+		SpringDocPropertiesUtils.put("persistAuthorization", persistAuthorization, params);
 		return params;
 	}
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app143/SpringDocApp143Test.java
Patch:
@@ -53,7 +53,7 @@ public void testApp() throws Exception {
 				.andExpect(jsonPath("$.paths./actuator/health.get.operationId", containsString("handle_")))
 				.andReturn();
 		String result = mockMvcResult.getResponse().getContentAsString();
-		String expected = getContent("results/app139.json");
+		String expected = getContent("results/app143.json");
 		Assertions.assertEquals(expected, result);
 	}
 }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/AbstractSpringdocRouteBuilder.java
Patch:
@@ -25,15 +25,15 @@
 
 import java.util.function.Consumer;
 
-import org.springdoc.core.fn.builders.OperationBuilder;
+import org.springdoc.core.fn.builders.operation.Builder;
 
 /**
  * @author bnasslahsen
  */
 public abstract class AbstractSpringdocRouteBuilder {
 
-	protected OperationBuilder getOperationBuilder(Consumer<OperationBuilder> operationsConsumer) {
-		OperationBuilder builder = OperationBuilder.builder();
+	protected Builder getOperationBuilder(Consumer<Builder> operationsConsumer) {
+		Builder builder = Builder.operationBuilder();
 		operationsConsumer.accept(builder);
 		return builder;
 	}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/RouterOperation.java
Patch:
@@ -27,7 +27,7 @@
 import io.swagger.v3.oas.annotations.Operation;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
-import org.springdoc.core.fn.builders.OperationBuilder;
+import org.springdoc.core.fn.builders.operation.Builder;
 
 import org.springframework.web.bind.annotation.RequestMethod;
 
@@ -161,7 +161,7 @@ public RouterOperation(RouterFunctionData routerFunctionData) {
 
 		Map<String, Object> attributes = routerFunctionData.getAttributes();
 		if (attributes.containsKey(OPERATION_ATTRIBUTE)) {
-			OperationBuilder routerOperationBuilder = (OperationBuilder) attributes.get(OPERATION_ATTRIBUTE);
+			Builder routerOperationBuilder = (Builder) attributes.get(OPERATION_ATTRIBUTE);
 			RouterOperation routerOperation = routerOperationBuilder.build();
 			this.beanClass = routerOperation.getBeanClass();
 			this.beanMethod = routerOperation.getBeanMethod();

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocAnnotationsUtils.java
Patch:
@@ -233,7 +233,7 @@ public static void mergeSchema(Content existingContent, Schema<?> schemaN, Strin
 	@SuppressWarnings("unchecked")
 	public static boolean isAnnotationToIgnore(MethodParameter parameter) {
 		boolean annotationFirstCheck = ANNOTATIONS_TO_IGNORE.stream().anyMatch(annotation ->
-				(parameter.getParameterIndex() != -1 && AnnotationUtils.findAnnotation(parameter.getParameter(), annotation) != null)
+				(parameter.getParameterIndex() != -1 && AnnotationUtils.findAnnotation(parameter.getMethod().getParameters()[parameter.getParameterIndex()], annotation) != null)
 						|| AnnotationUtils.findAnnotation(parameter.getParameterType(), annotation) != null);
 
 		boolean annotationSecondCheck = Arrays.stream(parameter.getParameterAnnotations()).anyMatch(annotation ->

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestRequestBuilder.java
Patch:
@@ -139,7 +139,7 @@ public void buildCommonParameters(Class<?> domainType, OpenAPI openAPI, RequestM
 		parameters = DelegatingMethodParameter.customize(pNames, parameters, parameterBuilder.getDelegatingMethodParameterCustomizer());
 		for (MethodParameter methodParameter : parameters) {
 			final String pName = methodParameter.getParameterName();
-			ParameterInfo parameterInfo = new ParameterInfo(pName, methodParameter);
+			ParameterInfo parameterInfo = new ParameterInfo(pName, methodParameter, parameterBuilder);
 			if (isParamToIgnore(methodParameter)) {
 				if (PersistentEntityResource.class.equals(methodParameter.getParameterType())) {
 					Schema<?> schema = SpringDocAnnotationsUtils.resolveSchemaFromType(domainType, openAPI.getComponents(), null, methodParameter.getParameterAnnotations());

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/app9/core/config/WebMvcConfiguration.java
Patch:
@@ -14,7 +14,7 @@ public class WebMvcConfiguration implements WebMvcConfigurer {
 	@Override
 	public void addCorsMappings(CorsRegistry registry) {
 		registry.addMapping("/**") //
-				.allowedOrigins("*") //
+				.allowedOrigins("http://localhost") //
 				.allowedMethods("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS") //
 				.allowedHeaders("*") //
 				.allowCredentials(true) //

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/RouterOperation.java
Patch:
@@ -340,7 +340,7 @@ public void setOperationModel(io.swagger.v3.oas.models.Operation operationModel)
 	@Override
 	public int compareTo(RouterOperation routerOperation) {
 		int result = path.compareTo(routerOperation.getPath());
-		if (result == 0)
+		if (result == 0 && !ArrayUtils.isEmpty(methods))
 			result = methods[0].compareTo(routerOperation.getMethods()[0]);
 		if (result == 0 && operationModel != null && routerOperation.getOperationModel() != null)
 			result = operationModel.getOperationId().compareTo(routerOperation.getOperationModel().getOperationId());

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/visitor/RouterFunctionVisitor.java
Patch:
@@ -49,6 +49,7 @@ public void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction
 
 	@Override
 	public void startNested(RequestPredicate predicate) {
+		this.isNested = true;
 		predicate.accept(this);
 	}
 

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/RouterFunctionProvider.java
Patch:
@@ -107,6 +107,7 @@ public void unknown(RequestPredicate predicate) {
 
 		@Override
 		public void startNested(RequestPredicate predicate) {
+			this.isNested = true;
 			predicate.accept(this);
 		}
 

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/visitor/RouterFunctionVisitor.java
Patch:
@@ -49,12 +49,12 @@ public void route(RequestPredicate predicate, HandlerFunction<?> handlerFunction
 
 	@Override
 	public void startNested(RequestPredicate predicate) {
-		// Not yet needed
+		predicate.accept(this);
 	}
 
 	@Override
 	public void endNested(RequestPredicate predicate) {
-		// Not yet needed
+		computeNested();
 	}
 
 	@Override

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app74/BookRouter.java
Patch:
@@ -48,8 +48,8 @@ class BookRouter {
 							,parameters = { @Parameter(in = ParameterIn.PATH, name = "author")})) })
 	RouterFunction<?> routes(BookRepository br) {
 		return
-				route(GET("/books").and(accept(MediaType.APPLICATION_JSON)).and(accept(MediaType.APPLICATION_XML)), req -> ok().body(br.findAll(), Book.class))
-						.and(route(GET("/books").and(accept(MediaType.APPLICATION_XML)).and(accept(MediaType.TEXT_PLAIN)), req -> ok().body(br.findAll(), Book.class)))
+				route(GET("/books").and(accept(MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML)), req -> ok().body(br.findAll(), Book.class))
+						.and(route(GET("/books").and(accept(MediaType.APPLICATION_XML,MediaType.TEXT_PLAIN)), req -> ok().body(br.findAll(), Book.class)))
 						.andRoute(GET("/books/{author}"), req -> ok().body(br.findByAuthor(req.pathVariable("author")), Book.class));
 	}
 }
\ No newline at end of file

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/RouterFunctionProvider.java
Patch:
@@ -107,12 +107,13 @@ public void unknown(RequestPredicate predicate) {
 
 		@Override
 		public void startNested(RequestPredicate predicate) {
-			// Not yet needed
+			predicate.accept(this);
 		}
 
+
 		@Override
 		public void endNested(RequestPredicate predicate) {
-			// Not yet needed
+			computeNested();
 		}
 
 	}

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app12/SpringDocApp12Test.java
Patch:
@@ -32,10 +32,10 @@
 
 @TestPropertySource(properties = { "springdoc.swagger-ui.syntaxHighlight.activated=false",
 		"springdoc.swagger-ui.syntaxHighlight.theme=monokai" })
-public class SpringDocApp12Test extends AbstractSpringDocTest {
+class SpringDocApp12Test extends AbstractSpringDocTest {
 
 	@Test
-	public void transformed_index_with_oauth() throws Exception {
+	void transformed_index_with_oauth() throws Exception {
 		MvcResult mvcResult = mockMvc.perform(get("/swagger-ui/index.html")).andExpect(status().isOk()).andReturn();
 		String transformedIndex = mvcResult.getResponse().getContentAsString();
 		assertTrue(transformedIndex.contains("Swagger UI"));

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigParameters.java
Patch:
@@ -116,6 +116,7 @@ public SwaggerUiConfigParameters(SwaggerUiConfigProperties swaggerUiConfig) {
 		this.urls = swaggerUiConfig.getUrls() == null ? new HashSet<>() : swaggerUiConfig.getUrls();
 		this.urlsPrimaryName = swaggerUiConfig.getUrlsPrimaryName();
 		this.groupsOrder = swaggerUiConfig.getGroupsOrder();
+		this.syntaxHighlight = swaggerUiConfig.getSyntaxHighlight();
 	}
 
 	/**

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/customisers/DataRestDelegatingMethodParameterCustomizer.java
Patch:
@@ -62,7 +62,8 @@ public DataRestDelegatingMethodParameterCustomizer(Optional<SpringDataWebPropert
 	@Override
 	public void customize(MethodParameter originalParameter, MethodParameter methodParameter) {
 		PageableDefault pageableDefault = originalParameter.getParameterAnnotation(PageableDefault.class);
-		if (pageableDefault != null || optionalSpringDataWebProperties.isPresent() || optionalRepositoryRestConfiguration.isPresent()) {
+		if (pageableDefault != null || (org.springframework.data.domain.Pageable.class.isAssignableFrom(originalParameter.getParameterType()) && (optionalSpringDataWebProperties.isPresent() || optionalRepositoryRestConfiguration.isPresent())))
+		{
 			Field field = FieldUtils.getDeclaredField(DelegatingMethodParameter.class, "additionalParameterAnnotations", true);
 			try {
 				Annotation[] parameterAnnotations = (Annotation[]) field.get(methodParameter);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfigProperties.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 import org.springframework.http.MediaType;
 
 import static org.springdoc.core.Constants.DEFAULT_WEB_JARS_PREFIX_URL;
@@ -35,6 +36,7 @@
  * The type Spring doc config properties.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConfigurationProperties(prefix = Constants.SPRINGDOC_PREFIX)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -76,6 +76,7 @@
  * The type Spring doc configuration.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 public class SpringDocConfiguration {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigParameters.java
Patch:
@@ -34,6 +34,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 import org.springframework.util.CollectionUtils;
 
 import static org.springdoc.core.Constants.SPRINGDOC_SWAGGER_UI_ENABLED;
@@ -44,6 +45,7 @@
  * The type Swagger ui config parameters.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
 @ConditionalOnBean(SpringDocConfiguration.class)

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigProperties.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 
 import static org.springdoc.core.Constants.SPRINGDOC_SWAGGER_UI_ENABLED;
 
@@ -32,6 +33,7 @@
  * The type Swagger ui config properties.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConfigurationProperties(prefix = "springdoc.swagger-ui")
 @ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiOAuthProperties.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 import org.springframework.util.CollectionUtils;
 
 import static org.springdoc.core.Constants.SPRINGDOC_SWAGGER_UI_ENABLED;
@@ -39,6 +40,7 @@
  * to get the idea what each parameter does.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConfigurationProperties(prefix = "springdoc.swagger-ui.oauth")
 @ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/SpringDocDataRestConfiguration.java
Patch:
@@ -75,6 +75,7 @@
  * The type Spring doc data rest configuration.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 public class SpringDocDataRestConfiguration {
@@ -143,6 +144,7 @@ QuerydslPredicateOperationCustomizer queryDslQuerydslPredicateOperationCustomize
 	 * The type Spring repository rest resource provider configuration.
 	 * @author bnasslahsen
 	 */
+	@Lazy(false)
 	@Configuration(proxyBeanMethods = false)
 	@ConditionalOnClass(RepositoryRestHandlerMapping.class)
 	static class SpringRepositoryRestResourceProviderConfiguration {

File: springdoc-openapi-groovy/src/main/java/org/springdoc/groovy/SpringDocGroovyConfiguration.java
Patch:
@@ -33,6 +33,7 @@
  * The type Spring doc groovy configuration.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 public class SpringDocGroovyConfiguration {

File: springdoc-openapi-hateoas/src/main/java/org/springdoc/hateoas/SpringDocHateoasConfiguration.java
Patch:
@@ -48,6 +48,7 @@
  * The type Spring doc hateoas configuration.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 @ConditionalOnClass(LinkRelationProvider.class)

File: springdoc-openapi-kotlin/src/main/java/org/springdoc/kotlin/SpringDocKotlinConfiguration.java
Patch:
@@ -38,6 +38,7 @@
  * The type Spring doc kotlin configuration.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 public class SpringDocKotlinConfiguration {

File: springdoc-openapi-kotlin/src/main/java/org/springdoc/kotlin/SpringDocKotlinxConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
 import static org.springdoc.core.SpringDocUtils.getConfig;
@@ -33,6 +34,7 @@
  * The type Spring doc kotlinx configuration.
  * @author bnasslahsen
  */
+@Lazy(false)
 @ConditionalOnClass(Flow.class)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)

File: springdoc-openapi-security/src/test/java/test/org/springdoc/api/app6/SpringDocApp6Test.java
Patch:
@@ -34,7 +34,6 @@ static class SpringDocTestApp {
 		MyUserDetailsService userDetailsService() {
 			return new MyUserDetailsService();
 		}
-
 	}
 
 }

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerConfig.java
Patch:
@@ -32,6 +32,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 
 import static org.springdoc.core.Constants.SPRINGDOC_SWAGGER_UI_ENABLED;
 
@@ -40,6 +41,7 @@
  * The type Swagger config.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
 @ConditionalOnBean(SpringDocConfiguration.class)

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/MultipleOpenApiWebFluxConfiguration.java
Patch:
@@ -50,6 +50,7 @@
  * The type Multiple open api web flux configuration.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/SpringDocWebFluxConfiguration.java
Patch:
@@ -63,6 +63,7 @@
  * The type Spring doc web flux configuration.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerConfig.java
Patch:
@@ -32,6 +32,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 import org.springframework.web.reactive.config.WebFluxConfigurer;
 
 import static org.springdoc.core.Constants.SPRINGDOC_SWAGGER_UI_ENABLED;
@@ -41,6 +42,7 @@
  * The type Swagger config.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
 @ConditionalOnBean(SpringDocConfiguration.class)

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/core/MultipleOpenApiSupportConfiguration.java
Patch:
@@ -53,6 +53,7 @@
  * The type Multiple open api support configuration.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/core/SpringDocWebMvcConfiguration.java
Patch:
@@ -68,6 +68,7 @@
  * The type Spring doc web mvc configuration.
  * @author bnasslahsen
  */
+@Lazy(false)
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -231,7 +231,7 @@ public Operation build(HandlerMethod handlerMethod, RequestMethod requestMethod,
 		String[] reflectionParametersNames = Arrays.stream(handlerMethod.getMethod().getParameters()).map(java.lang.reflect.Parameter::getName).toArray(String[]::new);
 		if (pNames == null || Arrays.stream(pNames).anyMatch(Objects::isNull))
 			pNames = reflectionParametersNames;
-		parameters = DelegatingMethodParameter.customize(pNames, parameters,parameterBuilder.getDelegatingMethodParameterCustomizer());
+		parameters = DelegatingMethodParameter.customize(pNames, parameters, parameterBuilder.getDelegatingMethodParameterCustomizer());
 		RequestBodyInfo requestBodyInfo = new RequestBodyInfo();
 		List<Parameter> operationParameters = (operation.getParameters() != null) ? operation.getParameters() : new ArrayList<>();
 		Map<String, io.swagger.v3.oas.annotations.Parameter> parametersDocMap = getApiParameters(handlerMethod.getMethod());
@@ -326,7 +326,8 @@ public static Collection<Parameter> getHeaders(MethodAttributes methodAttributes
 			Parameter parameter = new Parameter().in(ParameterIn.HEADER.toString()).name(entry.getKey()).schema(new StringSchema().addEnumItem(entry.getValue()));
 			if (map.containsKey(entry.getKey())) {
 				parameter = map.get(entry.getKey());
-				parameter.getSchema().addEnumItemObject(entry.getValue());
+				if (StringUtils.isNotEmpty(entry.getValue()))
+					parameter.getSchema().addEnumItemObject(entry.getValue());
 				parameter.setSchema(parameter.getSchema());
 			}
 			map.put(entry.getKey(), parameter);

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/DataRestHalProvider.java
Patch:
@@ -30,6 +30,7 @@
 import io.swagger.v3.core.util.Json;
 import org.springdoc.hateoas.HateoasHalProvider;
 
+import org.springframework.boot.autoconfigure.hateoas.HateoasProperties;
 import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
 import org.springframework.hateoas.mediatype.hal.Jackson2HalModule;
 
@@ -49,7 +50,8 @@ public class DataRestHalProvider extends HateoasHalProvider {
 	 *
 	 * @param repositoryRestConfigurationOptional the repository rest configuration optional
 	 */
-	public DataRestHalProvider(Optional<RepositoryRestConfiguration> repositoryRestConfigurationOptional) {
+	public DataRestHalProvider(Optional<RepositoryRestConfiguration> repositoryRestConfigurationOptional,Optional<HateoasProperties> hateoasPropertiesOptional) {
+		super(hateoasPropertiesOptional);
 		this.repositoryRestConfigurationOptional = repositoryRestConfigurationOptional;
 	}
 

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/SpringRepositoryRestResourceProvider.java
Patch:
@@ -173,8 +173,7 @@ public List<RouterOperation> getRouterOperations(OpenAPI openAPI) {
 						entity.doWithAssociations((SimpleAssociationHandler) association -> {
 							PersistentProperty<?> property = association.getInverse();
 							if (jackson.isExported(property) && associations.isLinkableAssociation(property)) {
-								ResourceMetadata targetTypeMetadata = associations.getMetadataFor(property.getActualType());
-								dataRestRepository.setRelationName(targetTypeMetadata.getItemResourceRel().toString());
+								dataRestRepository.setRelationName(resourceMetadata.getMappingFor(property).getRel().value());
 								dataRestRepository.setControllerType(ControllerType.PROPERTY);
 								findControllers(routerOperationList, handlerMethodMapFilteredMethodMap, resourceMetadata, dataRestRepository, openAPI);
 							}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericParameterBuilder.java
Patch:
@@ -304,7 +304,8 @@ private Schema calculateRequestBodySchema(Components components, ParameterInfo p
 			if (schemaN.get$ref() != null && schemaN.get$ref().contains(AnnotationsUtils.COMPONENTS_REF)) {
 				String key = schemaN.get$ref().substring(21);
 				Schema existingSchema = components.getSchemas().get(key);
-				existingSchema.setDescription(description);
+				if (!StringUtils.isEmpty(description))
+					existingSchema.setDescription(description);
 			}
 			else
 				schemaN.setDescription(description);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OpenAPIBuilder.java
Patch:
@@ -225,7 +225,7 @@ else if (calculatedOpenAPI.getInfo() == null) {
 	 * @return the open api
 	 */
 	public OpenAPI updateServers(OpenAPI openAPI) {
-		if (!isServersPresent)        // default server value
+		if (!isServersPresent && serverBaseUrl!=null)        // default server value
 		{
 			Server server = new Server().url(serverBaseUrl).description(DEFAULT_SERVER_DESCRIPTION);
 			List<Server> servers = new ArrayList<>();

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app18/SpringDocApp18Test.java
Patch:
@@ -21,7 +21,9 @@
 import test.org.springdoc.api.AbstractSpringDocTest;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.test.context.TestPropertySource;
 
+@TestPropertySource(properties = "springdoc.pre-loading-enabled=true")
 public class SpringDocApp18Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication

File: springdoc-openapi-hateoas/src/main/java/org/springdoc/hateoas/converters/CollectionModelContentConverter.java
Patch:
@@ -86,8 +86,8 @@ public Schema<?> resolve(AnnotatedType type, ModelConverterContext context, Iter
 	 */
 	private Class<?> getEntityType(AnnotatedType type) {
 		Class<?> containerEntityType = ((CollectionType) (type.getType())).getContentType().getRawClass();
-		if (containerEntityType.isAssignableFrom(EntityModel.class)) {
-			TypeBindings typeBindings = ((CollectionType) type.getType()).getContentType().getBindings() ;
+		if (EntityModel.class.isAssignableFrom(containerEntityType)) {
+			TypeBindings typeBindings = ((CollectionType) type.getType()).getContentType().getBindings();
 			if (!CollectionUtils.isEmpty(typeBindings.getTypeParameters()))
 				return typeBindings.getBoundType(0).getRawClass();
 		}

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestOperationBuilder.java
Patch:
@@ -111,7 +111,9 @@ public Operation buildOperation(HandlerMethod handlerMethod, DataRestRepository
 			OpenAPI openAPI, RequestMethod requestMethod, String operationPath, MethodAttributes methodAttributes,
 			ResourceMetadata resourceMetadata, MethodResourceMapping methodResourceMapping, ControllerType controllerType) {
 		Operation operation = null;
-		if (ControllerType.ENTITY.equals(controllerType)) {
+		if (ControllerType.ENTITY.equals(controllerType)
+				|| ControllerType.PROPERTY.equals(controllerType)
+				|| ControllerType.SCHEMA.equals(controllerType)) {
 			operation = buildEntityOperation(handlerMethod, dataRestRepository,
 					openAPI, requestMethod, operationPath, methodAttributes, resourceMetadata);
 		}

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestRequestBuilder.java
Patch:
@@ -172,7 +172,9 @@ else if (methodParameter.getParameterAnnotation(BackendId.class) != null) {
 	 * @return the boolean
 	 */
 	private boolean isParamToIgnore(MethodParameter methodParameter) {
-		return !requestBuilder.isParamToIgnore(methodParameter) && !isHeaderToIgnore(methodParameter);
+		return !requestBuilder.isParamToIgnore(methodParameter)
+				&& !isHeaderToIgnore(methodParameter)
+				&& !"property".equals(methodParameter.getParameterName());
 	}
 
 	/**

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerWelcome.java
Patch:
@@ -41,6 +41,7 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.ResponseBody;
 import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
+import org.springframework.web.servlet.view.UrlBasedViewResolver;
 import org.springframework.web.util.UriComponentsBuilder;
 
 import static org.springdoc.core.Constants.MVC_SERVLET_PATH;
@@ -49,7 +50,6 @@
 import static org.springdoc.core.Constants.SWAGGER_UI_PATH;
 import static org.springdoc.core.Constants.SWAGGER_UI_URL;
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
-import static org.springframework.web.servlet.view.UrlBasedViewResolver.REDIRECT_URL_PREFIX;
 
 /**
  * The type Swagger welcome.
@@ -88,9 +88,9 @@ public SwaggerWelcome(SwaggerUiConfigProperties swaggerUiConfig, SpringDocConfig
 	@GetMapping(SWAGGER_UI_PATH)
 	public String redirectToUi(HttpServletRequest request) {
 		buildConfigUrl(request.getContextPath(), ServletUriComponentsBuilder.fromCurrentContextPath());
-		String sbUrl = REDIRECT_URL_PREFIX + swaggerUiConfigParameters.getUiRootPath() + SWAGGER_UI_URL;
+		String sbUrl =   swaggerUiConfigParameters.getUiRootPath() + SWAGGER_UI_URL;
 		UriComponentsBuilder uriBuilder = getUriComponentsBuilder(sbUrl);
-		return uriBuilder.build().encode().toString();
+		return UrlBasedViewResolver.REDIRECT_URL_PREFIX + uriBuilder.build().encode().toString();
 	}
 
 	/**

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -231,7 +231,7 @@ public Operation build(HandlerMethod handlerMethod, RequestMethod requestMethod,
 		String[] reflectionParametersNames = Arrays.stream(handlerMethod.getMethod().getParameters()).map(java.lang.reflect.Parameter::getName).toArray(String[]::new);
 		if (pNames == null || Arrays.stream(pNames).anyMatch(Objects::isNull))
 			pNames = reflectionParametersNames;
-		parameters = DelegatingMethodParameter.customize(pNames, parameters);
+		parameters = DelegatingMethodParameter.customize(pNames, parameters,parameterBuilder.getDelegatingMethodParameterCustomizer());
 		RequestBodyInfo requestBodyInfo = new RequestBodyInfo();
 		List<Parameter> operationParameters = (operation.getParameters() != null) ? operation.getParameters() : new ArrayList<>();
 		Map<String, io.swagger.v3.oas.annotations.Parameter> parametersDocMap = getApiParameters(handlerMethod.getMethod());

File: springdoc-openapi-common/src/main/java/org/springdoc/core/ActuatorProvider.java
Patch:
@@ -63,6 +63,7 @@ default Tag getTag() {
 	 * Is rest controller boolean.
 	 *
 	 * @param operationPath the operation path
+	 * @param controllerClass the controller class
 	 * @return the boolean
 	 */
 	default boolean isRestController(String operationPath, Class<?>  controllerClass) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/ConverterUtils.java
Patch:
@@ -84,7 +84,7 @@ public static void addResponseTypeToIgnore(Class<?> cls) {
 	/**
 	 * Is response type wrapper boolean.
 	 *
-	 * @param rawClass the raw class 
+	 * @param rawClass the raw class
 	 * @return the boolean
 	 */
 	public static boolean isResponseTypeWrapper(Class<?> rawClass) {
@@ -94,7 +94,7 @@ public static boolean isResponseTypeWrapper(Class<?> rawClass) {
 	/**
 	 * Is response type to ignore boolean.
 	 *
-	 * @param rawClass the raw class 
+	 * @param rawClass the raw class
 	 * @return the boolean
 	 */
 	public static boolean isResponseTypeToIgnore(Class<?> rawClass) {
@@ -126,7 +126,7 @@ public static void removeResponseTypeToIgnore(Class<?> classes) {
 	/**
 	 * Is flux type wrapper boolean.
 	 *
-	 * @param rawClass the raw class 
+	 * @param rawClass the raw class
 	 * @return the boolean
 	 */
 	public static boolean isFluxTypeWrapper(Class<?> rawClass) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/models/DefaultPageable.java
Patch:
@@ -34,8 +34,8 @@ public class DefaultPageable extends Pageable {
 	/**
 	 * Instantiates a new Default pageable.
 	 *
-	 * @param page the page 
-	 * @param size the size 
+	 * @param page the page
+	 * @param size the size
 	 * @param sort the sort
 	 */
 	public DefaultPageable(int page, int size, List<String> sort) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/models/Pageable.java
Patch:
@@ -61,8 +61,8 @@ public class Pageable {
 	/**
 	 * Instantiates a new Pageable.
 	 *
-	 * @param page the page 
-	 * @param size the size 
+	 * @param page the page
+	 * @param size the size
 	 * @param sort the sort
 	 */
 	public Pageable(int page, int size, List<String> sort) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/customizers/ActuatorOpenApiCustomiser.java
Patch:
@@ -19,6 +19,9 @@
  */
 public class ActuatorOpenApiCustomiser implements OpenApiCustomiser {
 
+	/**
+	 * The Path pathern.
+	 */
 	private final Pattern pathPathern = Pattern.compile("\\{(.*?)}");
 
 	@Override

File: springdoc-openapi-common/src/main/java/org/springdoc/core/customizers/ParameterCustomizer.java
Patch:
@@ -34,8 +34,8 @@ public interface ParameterCustomizer {
 	/**
 	 * Customize parameter.
 	 *
-	 * @param parameterModel to be customized 
-	 * @param methodParameter original parameter from handler method 
+	 * @param parameterModel to be customized
+	 * @param methodParameter original parameter from handler method
 	 * @return customized parameter
 	 */
 	Parameter customize(Parameter parameterModel, MethodParameter methodParameter);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/AbstractRouterFunctionVisitor.java
Patch:
@@ -64,7 +64,7 @@ public void path(String pattern) {
 	/**
 	 * Header.
 	 *
-	 * @param name the name 
+	 * @param name the name
 	 * @param value the value
 	 */
 	public void header(String name, String value) {
@@ -88,7 +88,7 @@ public List<RouterFunctionData> getRouterFunctionDatas() {
 	/**
 	 * Query param.
 	 *
-	 * @param name the name 
+	 * @param name the name
 	 * @param value the value
 	 */
 	public void queryParam(String name, String value) {
@@ -107,7 +107,7 @@ public void pathExtension(String extension) {
 	/**
 	 * Param.
 	 *
-	 * @param name the name 
+	 * @param name the name
 	 * @param value the value
 	 */
 	public void param(String name, String value) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/RouterFunctionData.java
Patch:
@@ -99,7 +99,7 @@ public Map<String, String> getQueryParams() {
 	/**
 	 * Add query params.
 	 *
-	 * @param name the name 
+	 * @param name the name
 	 * @param value the value
 	 */
 	public void addQueryParams(String name, String value) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/RouterOperation.java
Patch:
@@ -112,7 +112,7 @@ public RouterOperation(org.springdoc.core.annotations.RouterOperation routerOper
 	/**
 	 * Instantiates a new Router operation.
 	 *
-	 * @param routerOperationAnnotation the router operation annotation 
+	 * @param routerOperationAnnotation the router operation annotation
 	 * @param routerFunctionData the router function data
 	 */
 	public RouterOperation(org.springdoc.core.annotations.RouterOperation routerOperationAnnotation, RouterFunctionData routerFunctionData) {
@@ -131,7 +131,7 @@ public RouterOperation(org.springdoc.core.annotations.RouterOperation routerOper
 	/**
 	 * Instantiates a new Router operation.
 	 *
-	 * @param path the path 
+	 * @param path the path
 	 * @param methods the methods
 	 */
 	public RouterOperation(String path, RequestMethod[] methods) {
@@ -344,7 +344,7 @@ public int compareTo(RouterOperation routerOperation) {
 			result = methods[0].compareTo(routerOperation.getMethods()[0]);
 		if (result == 0 && operationModel != null && routerOperation.getOperationModel() != null)
 			result = operationModel.getOperationId().compareTo(routerOperation.getOperationModel().getOperationId());
-		if (result == 0 && operation != null && operation.operationId() != null && routerOperation.getOperation().operationId() != null)
+		if (result == 0 && operation != null)
 			result = operation.operationId().compareTo(routerOperation.getOperation().operationId());
 		return result;
 	}

File: springdoc-openapi-common/src/main/java/org/springdoc/ui/SpringDocUIException.java
Patch:
@@ -29,7 +29,7 @@ public class SpringDocUIException extends RuntimeException {
 	/**
 	 * Instantiates a new Spring doc ui exception.
 	 *
-	 * @param message the message 
+	 * @param message the message
 	 * @param cause the cause
 	 */
 	public SpringDocUIException(String message, Throwable cause) {

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/core/DataRestRequestBuilder.java
Patch:
@@ -136,7 +136,7 @@ public void buildParameters(Class<?> domainType, OpenAPI openAPI, HandlerMethod
 	 * @param parameters the parameters
 	 */
 	public void buildCommonParameters(Class<?> domainType, OpenAPI openAPI, RequestMethod requestMethod, MethodAttributes methodAttributes, Operation operation, String[] pNames, MethodParameter[] parameters) {
-		parameters = DelegatingMethodParameter.customize(pNames, parameters);
+		parameters = DelegatingMethodParameter.customize(pNames, parameters, parameterBuilder.getDelegatingMethodParameterCustomizer());
 		for (MethodParameter methodParameter : parameters) {
 			final String pName = methodParameter.getParameterName();
 			ParameterInfo parameterInfo = new ParameterInfo(pName, methodParameter);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -353,7 +353,7 @@ protected Parameter customiseParameter(Parameter parameter, ParameterInfo parame
 	 * @return the boolean
 	 */
 	public boolean isParamToIgnore(MethodParameter parameter) {
-		if (parameterBuilder.isAnnotationToIgnore(parameter))
+		if (SpringDocAnnotationsUtils.isAnnotationToIgnore(parameter))
 			return true;
 		if ((parameter.getParameterAnnotation(PathVariable.class) != null && parameter.getParameterAnnotation(PathVariable.class).required())
 				|| (parameter.getParameterAnnotation(RequestParam.class) != null && parameter.getParameterAnnotation(RequestParam.class).required())

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericResponseBuilder.java
Patch:
@@ -414,7 +414,9 @@ private Type getReturnType(MethodParameter methodParameter) {
 	 * @return the schema
 	 */
 	private Schema<?> calculateSchema(Components components, Type returnType, JsonView jsonView, Annotation[] annotations) {
-		return !isVoid(returnType) ? extractSchema(components, returnType, jsonView,annotations) : null;
+		if (!isVoid(returnType) && !SpringDocAnnotationsUtils.isAnnotationToIgnore(returnType))
+			return extractSchema(components, returnType, jsonView, annotations);
+		return null;
 	}
 
 	/**

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocUtils.java
Patch:
@@ -207,7 +207,7 @@ public SpringDocUtils removeResponseTypeToIgnore(Class<?> cls) {
 	 * @return the spring doc utils
 	 */
 	public SpringDocUtils addAnnotationsToIgnore(Class<?>... classes) {
-		GenericParameterBuilder.addAnnotationsToIgnore(classes);
+		SpringDocAnnotationsUtils.addAnnotationsToIgnore(classes);
 		return this;
 	}
 
@@ -218,7 +218,7 @@ public SpringDocUtils addAnnotationsToIgnore(Class<?>... classes) {
 	 * @return the spring doc utils
 	 */
 	public SpringDocUtils removeAnnotationsToIgnore(Class<?>... classes) {
-		GenericParameterBuilder.removeAnnotationsToIgnore(classes);
+		SpringDocAnnotationsUtils.removeAnnotationsToIgnore(classes);
 		return this;
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -64,6 +64,7 @@
 import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.bind.annotation.RestControllerAdvice;
 import org.springframework.web.context.request.WebRequest;
+import org.springframework.web.context.request.async.DeferredResult;
 
 import static org.springdoc.core.Constants.SPRINGDOC_DEPRECATING_CONVERTER_ENABLED;
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
@@ -84,7 +85,8 @@ public class SpringDocConfiguration {
 	private static final String BINDRESULT_CLASS = "org.springframework.boot.context.properties.bind.BindResult";
 
 	static {
-		getConfig().replaceWithSchema(ObjectNode.class, new ObjectSchema());
+		getConfig().replaceWithSchema(ObjectNode.class, new ObjectSchema())
+				.addResponseWrapperToIgnore(DeferredResult.class);
 	}
 
 	/**

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -248,7 +248,7 @@ protected void calculatePath(Map<String, Object> restControllers, Map<RequestMap
 			Map<String, String> regexMap = new LinkedHashMap<>();
 			for (String pattern : patterns) {
 				String operationPath = PathUtils.parsePath(pattern, regexMap);
-				if (((actuatorProvider.isPresent() && actuatorProvider.get().isRestController(operationPath))
+				if (((actuatorProvider.isPresent() && actuatorProvider.get().isRestController(operationPath, handlerMethod.getBeanType()))
 						|| isRestController(restControllers, handlerMethod, operationPath))
 						&& isPackageToScan(handlerMethod.getBeanType().getPackage())
 						&& isPathToMatch(operationPath)) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -493,7 +493,7 @@ private Parameter buildParam(String in, Components components, ParameterInfo par
 		if (containsDeprecatedAnnotation(parameterInfo.getMethodParameter().getParameterAnnotations()))
 			parameter.setDeprecated(true);
 
-		if (parameter.getSchema() == null) {
+		if (parameter.getSchema() == null && parameter.getContent() == null) {
 			Schema<?> schema = parameterBuilder.calculateSchema(components, parameterInfo, null,
 					jsonView);
 			if (defaultValue != null)

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/api/OpenApiResource.java
Patch:
@@ -28,10 +28,8 @@
 import java.util.Set;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.databind.ObjectMapper;
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.core.util.PathUtils;
-import io.swagger.v3.core.util.Yaml;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.models.OpenAPI;
 import org.springdoc.api.AbstractOpenApiResource;

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -32,7 +32,6 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.core.util.PathUtils;
-import io.swagger.v3.core.util.Yaml;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.models.OpenAPI;
 import org.springdoc.api.AbstractOpenApiResource;

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/api/OpenApiResource.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Set;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.core.util.PathUtils;
 import io.swagger.v3.core.util.Yaml;
@@ -164,9 +165,9 @@ public Mono<String> openapiYaml(ServerHttpRequest serverHttpRequest,
 		calculateServerUrl(serverHttpRequest, apiDocsUrl);
 		OpenAPI openAPI = this.getOpenApi();
 		if (!springDocConfigProperties.isWriterWithDefaultPrettyPrinter())
-			return Mono.just(Yaml.mapper().writeValueAsString(openAPI));
+			return Mono.just(getYamlMapper().writeValueAsString(openAPI));
 		else
-			return Mono.just(Yaml.mapper().writerWithDefaultPrettyPrinter().writeValueAsString(openAPI));
+			return Mono.just(getYamlMapper().writerWithDefaultPrettyPrinter().writeValueAsString(openAPI));
 	}
 
 	@Override

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -199,9 +199,9 @@ public String openapiYaml(HttpServletRequest request, @Value(DEFAULT_API_DOCS_UR
 		calculateServerUrl(request, apiDocsUrl);
 		OpenAPI openAPI = this.getOpenApi();
 		if (!springDocConfigProperties.isWriterWithDefaultPrettyPrinter())
-			return Yaml.mapper().writeValueAsString(openAPI);
+			return getYamlMapper().writeValueAsString(openAPI);
 		else
-			return Yaml.mapper().writerWithDefaultPrettyPrinter().writeValueAsString(openAPI);
+			return getYamlMapper().writerWithDefaultPrettyPrinter().writeValueAsString(openAPI);
 	}
 
 	@Override

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/ConverterUtils.java
Patch:
@@ -84,7 +84,7 @@ public static void addResponseTypeToIgnore(Class<?> cls) {
 	/**
 	 * Is response type wrapper boolean.
 	 *
-	 * @param rawClass the raw class
+	 * @param rawClass the raw class 
 	 * @return the boolean
 	 */
 	public static boolean isResponseTypeWrapper(Class<?> rawClass) {
@@ -94,7 +94,7 @@ public static boolean isResponseTypeWrapper(Class<?> rawClass) {
 	/**
 	 * Is response type to ignore boolean.
 	 *
-	 * @param rawClass the raw class
+	 * @param rawClass the raw class 
 	 * @return the boolean
 	 */
 	public static boolean isResponseTypeToIgnore(Class<?> rawClass) {
@@ -126,7 +126,7 @@ public static void removeResponseTypeToIgnore(Class<?> classes) {
 	/**
 	 * Is flux type wrapper boolean.
 	 *
-	 * @param rawClass the raw class
+	 * @param rawClass the raw class 
 	 * @return the boolean
 	 */
 	public static boolean isFluxTypeWrapper(Class<?> rawClass) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/models/DefaultPageable.java
Patch:
@@ -34,8 +34,8 @@ public class DefaultPageable extends Pageable {
 	/**
 	 * Instantiates a new Default pageable.
 	 *
-	 * @param page the page
-	 * @param size the size
+	 * @param page the page 
+	 * @param size the size 
 	 * @param sort the sort
 	 */
 	public DefaultPageable(int page, int size, List<String> sort) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/models/Pageable.java
Patch:
@@ -61,8 +61,8 @@ public class Pageable {
 	/**
 	 * Instantiates a new Pageable.
 	 *
-	 * @param page the page
-	 * @param size the size
+	 * @param page the page 
+	 * @param size the size 
 	 * @param sort the sort
 	 */
 	public Pageable(int page, int size, List<String> sort) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/customizers/ParameterCustomizer.java
Patch:
@@ -34,8 +34,8 @@ public interface ParameterCustomizer {
 	/**
 	 * Customize parameter.
 	 *
-	 * @param parameterModel to be customized
-	 * @param methodParameter original parameter from handler method
+	 * @param parameterModel to be customized 
+	 * @param methodParameter original parameter from handler method 
 	 * @return customized parameter
 	 */
 	Parameter customize(Parameter parameterModel, MethodParameter methodParameter);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/AbstractRouterFunctionVisitor.java
Patch:
@@ -64,7 +64,7 @@ public void path(String pattern) {
 	/**
 	 * Header.
 	 *
-	 * @param name the name
+	 * @param name the name 
 	 * @param value the value
 	 */
 	public void header(String name, String value) {
@@ -88,7 +88,7 @@ public List<RouterFunctionData> getRouterFunctionDatas() {
 	/**
 	 * Query param.
 	 *
-	 * @param name the name
+	 * @param name the name 
 	 * @param value the value
 	 */
 	public void queryParam(String name, String value) {
@@ -107,7 +107,7 @@ public void pathExtension(String extension) {
 	/**
 	 * Param.
 	 *
-	 * @param name the name
+	 * @param name the name 
 	 * @param value the value
 	 */
 	public void param(String name, String value) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/RouterFunctionData.java
Patch:
@@ -99,7 +99,7 @@ public Map<String, String> getQueryParams() {
 	/**
 	 * Add query params.
 	 *
-	 * @param name the name
+	 * @param name the name 
 	 * @param value the value
 	 */
 	public void addQueryParams(String name, String value) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/RouterOperation.java
Patch:
@@ -112,7 +112,7 @@ public RouterOperation(org.springdoc.core.annotations.RouterOperation routerOper
 	/**
 	 * Instantiates a new Router operation.
 	 *
-	 * @param routerOperationAnnotation the router operation annotation
+	 * @param routerOperationAnnotation the router operation annotation 
 	 * @param routerFunctionData the router function data
 	 */
 	public RouterOperation(org.springdoc.core.annotations.RouterOperation routerOperationAnnotation, RouterFunctionData routerFunctionData) {
@@ -131,7 +131,7 @@ public RouterOperation(org.springdoc.core.annotations.RouterOperation routerOper
 	/**
 	 * Instantiates a new Router operation.
 	 *
-	 * @param path the path
+	 * @param path the path 
 	 * @param methods the methods
 	 */
 	public RouterOperation(String path, RequestMethod[] methods) {

File: springdoc-openapi-common/src/main/java/org/springdoc/ui/SpringDocUIException.java
Patch:
@@ -29,7 +29,7 @@ public class SpringDocUIException extends RuntimeException {
 	/**
 	 * Instantiates a new Spring doc ui exception.
 	 *
-	 * @param message the message
+	 * @param message the message 
 	 * @param cause the cause
 	 */
 	public SpringDocUIException(String message, Throwable cause) {

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app4/SpringDocApp4Test.java
Patch:
@@ -18,7 +18,6 @@
 
 package test.org.springdoc.api.app4;
 
-import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
 import io.swagger.v3.core.jackson.TypeNameResolver;
 import org.junit.jupiter.api.AfterAll;
 import test.org.springdoc.api.AbstractSpringDocTest;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigParameters.java
Patch:
@@ -103,6 +103,7 @@ public SwaggerUiConfigParameters(SwaggerUiConfigProperties swaggerUiConfig) {
 		this.displayOperationId = swaggerUiConfig.getDisplayOperationId();
 		this.defaultModelExpandDepth = swaggerUiConfig.getDefaultModelExpandDepth();
 		this.defaultModelsExpandDepth = swaggerUiConfig.getDefaultModelsExpandDepth();
+		this.defaultModelRendering = swaggerUiConfig.getDefaultModelRendering();
 		this.displayRequestDuration = swaggerUiConfig.getDisplayRequestDuration();
 		this.docExpansion = swaggerUiConfig.getDocExpansion();
 		this.maxDisplayedTags = swaggerUiConfig.getMaxDisplayedTags();

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -263,11 +263,12 @@ protected synchronized OpenAPI getOpenApi() {
 				openAPIBuilder.setServersPresent(true);
 			openAPIBuilder.updateServers(openApi);
 
+			if (springDocConfigProperties.isRemoveBrokenReferenceDefinitions())
+				this.removeBrokenReferenceDefinitions(openApi);
+
 			// run the optional customisers
 			openApiCustomisers.ifPresent(apiCustomisers -> apiCustomisers.forEach(openApiCustomiser -> openApiCustomiser.customise(openApi)));
 
-			if (springDocConfigProperties.isRemoveBrokenReferenceDefinitions())
-				this.removeBrokenReferenceDefinitions(openApi);
 			openAPIBuilder.setCachedOpenAPI(openApi);
 			openAPIBuilder.resetCalculatedOpenAPI();
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app126/SpringDocApp126Test.java
Patch:
@@ -42,7 +42,6 @@
 /**
  * Tests Spring meta-annotations as method parameters
  */
-@TestPropertySource(properties = "springdoc.remove-broken-reference-definitions=false")
 public class SpringDocApp126Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -56,6 +56,7 @@
 import org.springframework.context.annotation.Lazy;
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
 
+import static org.springdoc.core.Constants.SPRINGDOC_DEPRECATING_CONVERTER_ENABLED;
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
 import static org.springdoc.core.Constants.SPRINGDOC_SCHEMA_RESOLVE_PROPERTIES;
 import static org.springdoc.core.SpringDocUtils.getConfig;
@@ -141,6 +142,7 @@ ResponseSupportConverter responseSupportConverter() {
 	 */
 	@Bean
 	@ConditionalOnMissingBean
+	@ConditionalOnProperty(name = SPRINGDOC_DEPRECATING_CONVERTER_ENABLED, matchIfMissing = true)
 	@Lazy(false)
 	SchemaPropertyDeprecatingConverter schemaPropertyDeprecatingConverter() {
 		return new SchemaPropertyDeprecatingConverter();

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfigProperties.java
Patch:
@@ -466,7 +466,7 @@ public static class ApiDocs {
 		private String path = Constants.DEFAULT_API_DOCS_URL;
 
 		/**
-		 * Weather to generate and serve a OpenAPI document.
+		 * Whether to generate and serve an OpenAPI document.
 		 */
 		private boolean enabled = true;
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfigProperties.java
Patch:
@@ -466,7 +466,7 @@ public static class ApiDocs {
 		private String path = Constants.DEFAULT_API_DOCS_URL;
 
 		/**
-		 * Weather to generate and serve a OpenAPI document.
+		 * Whether to generate and serve an OpenAPI document.
 		 */
 		private boolean enabled = true;
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractSwaggerUiConfigProperties.java
Patch:
@@ -570,7 +570,7 @@ public void setUrlsPrimaryName(String urlsPrimaryName) {
 	/**
 	 * The type Swagger url.
 	 */
-	static class SwaggerUrl {
+	public static class SwaggerUrl {
 		/**
 		 * The Url.
 		 */

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/AdditionalModelsConverter.java
Patch:
@@ -50,7 +50,7 @@ public class AdditionalModelsConverter implements ModelConverter {
 	/**
 	 * Replace with class.
 	 *
-	 * @param source the source
+	 * @param source the source 
 	 * @param target the target
 	 */
 	public static void replaceWithClass(Class source, Class target) {
@@ -60,7 +60,7 @@ public static void replaceWithClass(Class source, Class target) {
 	/**
 	 * Replace with schema.
 	 *
-	 * @param source the source
+	 * @param source the source 
 	 * @param target the target
 	 */
 	public static void replaceWithSchema(Class source, Schema target) {
@@ -70,7 +70,7 @@ public static void replaceWithSchema(Class source, Schema target) {
 	/**
 	 * Gets replacement.
 	 *
-	 * @param clazz the clazz
+	 * @param clazz the clazz 
 	 * @return the replacement
 	 */
 	public static Class getReplacement(Class clazz) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/ConverterUtils.java
Patch:
@@ -84,7 +84,7 @@ public static void addResponseTypeToIgnore(Class<?> cls) {
 	/**
 	 * Is response type wrapper boolean.
 	 *
-	 * @param rawClass the raw class
+	 * @param rawClass the raw class 
 	 * @return the boolean
 	 */
 	public static boolean isResponseTypeWrapper(Class<?> rawClass) {
@@ -94,7 +94,7 @@ public static boolean isResponseTypeWrapper(Class<?> rawClass) {
 	/**
 	 * Is response type to ignore boolean.
 	 *
-	 * @param rawClass the raw class
+	 * @param rawClass the raw class 
 	 * @return the boolean
 	 */
 	public static boolean isResponseTypeToIgnore(Class<?> rawClass) {
@@ -126,7 +126,7 @@ public static void removeResponseTypeToIgnore(Class<?> classes) {
 	/**
 	 * Is flux type wrapper boolean.
 	 *
-	 * @param rawClass the raw class
+	 * @param rawClass the raw class 
 	 * @return the boolean
 	 */
 	public static boolean isFluxTypeWrapper(Class<?> rawClass) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/models/DefaultPageable.java
Patch:
@@ -34,8 +34,8 @@ public class DefaultPageable extends Pageable {
 	/**
 	 * Instantiates a new Default pageable.
 	 *
-	 * @param page the page
-	 * @param size the size
+	 * @param page the page 
+	 * @param size the size 
 	 * @param sort the sort
 	 */
 	public DefaultPageable(int page, int size, List<String> sort) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/models/Pageable.java
Patch:
@@ -61,8 +61,8 @@ public class Pageable {
 	/**
 	 * Instantiates a new Pageable.
 	 *
-	 * @param page the page
-	 * @param size the size
+	 * @param page the page 
+	 * @param size the size 
 	 * @param sort the sort
 	 */
 	public Pageable(int page, int size, List<String> sort) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/customizers/ParameterCustomizer.java
Patch:
@@ -34,8 +34,8 @@ public interface ParameterCustomizer {
 	/**
 	 * Customize parameter.
 	 *
-	 * @param parameterModel to be customized
-	 * @param methodParameter original parameter from handler method
+	 * @param parameterModel to be customized 
+	 * @param methodParameter original parameter from handler method 
 	 * @return customized parameter
 	 */
 	Parameter customize(Parameter parameterModel, MethodParameter methodParameter);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/customizers/PropertyCustomizer.java
Patch:
@@ -34,8 +34,8 @@ public interface PropertyCustomizer {
 	/**
 	 * Customize schema.
 	 *
-	 * @param property to be customized
-	 * @param type form the model class
+	 * @param property to be customized 
+	 * @param type form the model class 
 	 * @return customized property
 	 */
 	Schema customize(Schema property, AnnotatedType type);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/AbstractRouterFunctionVisitor.java
Patch:
@@ -64,7 +64,7 @@ public void path(String pattern) {
 	/**
 	 * Header.
 	 *
-	 * @param name the name
+	 * @param name the name 
 	 * @param value the value
 	 */
 	public void header(String name, String value) {
@@ -88,7 +88,7 @@ public List<RouterFunctionData> getRouterFunctionDatas() {
 	/**
 	 * Query param.
 	 *
-	 * @param name the name
+	 * @param name the name 
 	 * @param value the value
 	 */
 	public void queryParam(String name, String value) {
@@ -107,7 +107,7 @@ public void pathExtension(String extension) {
 	/**
 	 * Param.
 	 *
-	 * @param name the name
+	 * @param name the name 
 	 * @param value the value
 	 */
 	public void param(String name, String value) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/RouterFunctionData.java
Patch:
@@ -99,7 +99,7 @@ public Map<String, String> getQueryParams() {
 	/**
 	 * Add query params.
 	 *
-	 * @param name the name
+	 * @param name the name 
 	 * @param value the value
 	 */
 	public void addQueryParams(String name, String value) {

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerIndexTransformer.java
Patch:
@@ -44,8 +44,8 @@ public class SwaggerIndexTransformer extends AbstractSwaggerIndexTransformer imp
 	/**
 	 * Instantiates a new Swagger index transformer.
 	 *
-	 * @param swaggerUiConfig the swagger ui config 
-	 * @param swaggerUiOAuthProperties the swagger ui o auth properties 
+	 * @param swaggerUiConfig the swagger ui config
+	 * @param swaggerUiOAuthProperties the swagger ui o auth properties
 	 * @param objectMapper the object mapper
 	 */
 	public SwaggerIndexTransformer(SwaggerUiConfigProperties swaggerUiConfig, SwaggerUiOAuthProperties swaggerUiOAuthProperties, ObjectMapper objectMapper) {

File: springdoc-openapi-hateoas/src/main/java/org/springdoc/hateoas/SpringDocHateoasConfiguration.java
Patch:
@@ -34,6 +34,7 @@
 import org.springdoc.hateoas.converters.CollectionModelContentConverter;
 import org.springdoc.hateoas.converters.RepresentationModelLinksOASMixin;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
@@ -52,6 +53,7 @@
  */
 @Configuration
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
+@ConditionalOnClass(LinkRelationProvider.class)
 public class SpringDocHateoasConfiguration {
 
 	/**

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -112,6 +112,8 @@ public final class Constants {
 
 	public static final String GRACEFUL_EXCEPTION_OCCURRED = "Graceful exception occurred";
 
+	public static final String SWAGGER_UI_DEFAULT_URL = "https://petstore.swagger.io/v2/swagger.json";
+
 	private Constants() {
 		super();
 	}

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerConfig.java
Patch:
@@ -48,8 +48,8 @@ SwaggerWelcome swaggerWelcome(SwaggerUiConfigProperties swaggerUiConfig, SpringD
 
 	@Bean
 	@ConditionalOnMissingBean
-	SwaggerIndexTransformer indexPageTransformer(SwaggerUiOAuthProperties swaggerUiOAuthProperties, ObjectMapper objectMapper) {
-		return new SwaggerIndexTransformer(swaggerUiOAuthProperties, objectMapper);
+	SwaggerIndexTransformer indexPageTransformer(SwaggerUiConfigProperties swaggerUiConfig, SwaggerUiOAuthProperties swaggerUiOAuthProperties, ObjectMapper objectMapper) {
+		return new SwaggerIndexTransformer(swaggerUiConfig, swaggerUiOAuthProperties, objectMapper);
 	}
 
 	@Bean

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerConfig.java
Patch:
@@ -49,7 +49,7 @@ SwaggerWebFluxConfigurer swaggerWebFluxConfigurer(SwaggerUiConfigProperties swag
 
 	@Bean
 	@ConditionalOnMissingBean
-	SwaggerIndexTransformer indexPageTransformer(SwaggerUiOAuthProperties swaggerUiOAuthProperties, ObjectMapper objectMapper) {
-		return new SwaggerIndexTransformer(swaggerUiOAuthProperties, objectMapper);
+	SwaggerIndexTransformer indexPageTransformer(SwaggerUiConfigProperties swaggerUiConfig ,SwaggerUiOAuthProperties swaggerUiOAuthProperties, ObjectMapper objectMapper) {
+		return new SwaggerIndexTransformer(swaggerUiConfig, swaggerUiOAuthProperties, objectMapper);
 	}
 }

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -170,7 +170,8 @@ protected synchronized OpenAPI getOpenApi() {
 			Map<String, Object> findControllerAdvice = openAPIBuilder.getControllerAdviceMap();
 			// calculate generic responses
 			openApi = openAPIBuilder.getCalculatedOpenAPI();
-			responseBuilder.buildGenericResponse(openApi.getComponents(), findControllerAdvice);
+			if (springDocConfigProperties.isOverrideWithGenericResponse())
+				responseBuilder.buildGenericResponse(openApi.getComponents(), findControllerAdvice);
 			getPaths(mappingsMap);
 			// run the optional customisers
 			openApiCustomisers.ifPresent(apiCustomisers -> apiCustomisers.forEach(openApiCustomiser -> openApiCustomiser.customise(openApi)));

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/core/MultipleOpenApiSupportConfiguration.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Optional;
 
 import org.springdoc.core.AbstractRequestBuilder;
+import org.springdoc.core.ActuatorProvider;
 import org.springdoc.core.GenericResponseBuilder;
 import org.springdoc.core.GroupedOpenApi;
 import org.springdoc.core.MultipleOpenApiSupportCondition;
@@ -32,7 +33,6 @@
 import org.springdoc.core.RepositoryRestResourceProvider;
 import org.springdoc.core.SecurityOAuth2Provider;
 import org.springdoc.core.SpringDocConfigProperties;
-import org.springdoc.webmvc.api.ActuatorProvider;
 import org.springdoc.webmvc.api.MultipleOpenApiResource;
 import org.springdoc.webmvc.api.RouterFunctionProvider;
 
@@ -62,15 +62,15 @@ MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpen
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,
 			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping,
-			Optional<ActuatorProvider> servletContextProvider,
+			Optional<ActuatorProvider> actuatorProvider,
 			SpringDocConfigProperties springDocConfigProperties,
 			Optional<SecurityOAuth2Provider> springSecurityOAuth2Provider,
 			Optional<RouterFunctionProvider> routerFunctionProvider,
 			Optional<RepositoryRestResourceProvider> repositoryRestResourceProvider) {
 		return new MultipleOpenApiResource(groupedOpenApis,
 				defaultOpenAPIBuilder, requestBuilder,
 				responseBuilder, operationParser,
-				requestMappingHandlerMapping, servletContextProvider,
+				requestMappingHandlerMapping, actuatorProvider,
 				springDocConfigProperties,
 				springSecurityOAuth2Provider,
 				routerFunctionProvider,repositoryRestResourceProvider);

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app94/SpringDocApp94Test.java
Patch:
@@ -28,6 +28,7 @@
 import io.swagger.v3.oas.annotations.tags.Tag;
 import org.apache.commons.lang3.RandomStringUtils;
 import org.springdoc.core.AbstractRequestBuilder;
+import org.springdoc.core.ActuatorProvider;
 import org.springdoc.core.GenericResponseBuilder;
 import org.springdoc.core.OpenAPIBuilder;
 import org.springdoc.core.OperationBuilder;
@@ -37,7 +38,6 @@
 import org.springdoc.core.customizers.OpenApiBuilderCustomiser;
 import org.springdoc.core.customizers.OpenApiCustomiser;
 import org.springdoc.core.customizers.OperationCustomizer;
-import org.springdoc.webmvc.api.ActuatorProvider;
 import org.springdoc.webmvc.api.OpenApiResource;
 import org.springdoc.webmvc.api.RouterFunctionProvider;
 import test.org.springdoc.api.AbstractSpringDocTest;
@@ -95,11 +95,11 @@ public RequestMappingHandlerMapping defaultTestHandlerMapping(GreetingController
 		public OpenApiResource openApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder, GenericResponseBuilder responseBuilder,
 				OperationBuilder operationParser,Optional<List<OperationCustomizer>> operationCustomizers,
 				@Qualifier("defaultTestHandlerMapping") RequestMappingHandlerMapping requestMappingHandlerMapping,
-				Optional<ActuatorProvider> servletContextProvider, SpringDocConfigProperties springDocConfigProperties,
+				Optional<ActuatorProvider> actuatorProvider, SpringDocConfigProperties springDocConfigProperties,
 				Optional<List<OpenApiCustomiser>> openApiCustomisers, Optional<SecurityOAuth2Provider> springSecurityOAuth2Provider,
 				Optional<RouterFunctionProvider> routerFunctionProvider, Optional<RepositoryRestResourceProvider> repositoryRestResourceProvider) {
 			return new OpenApiResource(DEFAULT_GROUP_NAME, openAPIBuilder, requestBuilder, responseBuilder, operationParser, requestMappingHandlerMapping,
-					servletContextProvider,operationCustomizers, openApiCustomisers, springDocConfigProperties, springSecurityOAuth2Provider,routerFunctionProvider, repositoryRestResourceProvider);
+					actuatorProvider,operationCustomizers, openApiCustomisers, springDocConfigProperties, springSecurityOAuth2Provider,routerFunctionProvider, repositoryRestResourceProvider);
 		}
 
 		@Override

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app121/RequestParams.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.List;
 import java.util.Optional;
 
-import com.sun.istack.internal.Nullable;
 import io.swagger.v3.oas.annotations.Parameter;
 
 
@@ -54,12 +53,11 @@ public void setIntParam2(Optional<String> intParam2) {
 		this.intParam2 = intParam2;
 	}
 
-	@Nullable
 	public String getIntParam3() {
 		return intParam3;
 	}
 
-	public void setIntParam3(@Nullable String intParam3) {
+	public void setIntParam3(String intParam3) {
 		this.intParam3 = intParam3;
 	}
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app121/TestController.java
Patch:
@@ -1,6 +1,5 @@
 package test.org.springdoc.api.app121;
 
-import com.sun.istack.internal.Nullable;
 import org.springdoc.api.annotations.ParameterObject;
 
 import org.springframework.web.bind.annotation.PostMapping;
@@ -11,7 +10,7 @@
 public class TestController {
 
 	@PostMapping("test")
-	public InheritedRequestParams getTest(@RequestParam @Nullable String param, @ParameterObject InheritedRequestParams requestParams) {
+	public InheritedRequestParams getTest(@RequestParam String param, @ParameterObject InheritedRequestParams requestParams) {
 		return requestParams;
 	}
 }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/MethodParameterPojoExtractor.java
Patch:
@@ -101,7 +101,7 @@ private static Stream<MethodParameter> fromSimpleClass(Class<?> paramClass, Fiel
 					.map(PropertyDescriptor::getReadMethod)
 					.filter(Objects::nonNull)
 					.map(method -> new MethodParameter(method, -1))
-					.map(param -> new DelegatingMethodParameter(param, fieldNamePrefix + field.getName(), finalFieldAnnotations));
+					.map(param -> new DelegatingMethodParameter(param, fieldNamePrefix + field.getName(), finalFieldAnnotations, true));
 		}
 		catch (IntrospectionException e) {
 			return Stream.of();

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericParameterBuilder.java
Patch:
@@ -52,6 +52,7 @@
 import org.springframework.core.ResolvableType;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.core.io.Resource;
+import org.springframework.web.bind.annotation.RequestAttribute;
 import org.springframework.web.multipart.MultipartFile;
 
 @SuppressWarnings("rawtypes")
@@ -67,6 +68,7 @@ public class GenericParameterBuilder {
 		FILE_TYPES.add(MultipartFile.class);
 		FILE_TYPES.add(Resource.class);
 		ANNOTATIOSN_TO_IGNORE.add(Hidden.class);
+		ANNOTATIOSN_TO_IGNORE.add(RequestAttribute.class);
 	}
 
 	private final PropertyResolverUtils propertyResolverUtils;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app10/HelloController.java
Patch:
@@ -37,7 +37,7 @@ public void test(HttpSession header, HttpServletRequest request, HttpServletResp
 	}
 
 	@GetMapping("/testreq")
-	public void testRequestAttribute(RequestAttribute sample, String s) {
+	public void testRequestAttribute(@RequestAttribute String sample, String s) {
 
 	}
 }

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -145,7 +145,7 @@ public static void addHiddenRestControllers(String... classes) {
 				hiddenClasses.add(Class.forName(aClass));
 			}
 			catch (ClassNotFoundException e) {
-				LOGGER.warn("The following class doesn't exist and cannot be hidden: " + aClass);
+				LOGGER.warn("The following class doesn't exist and cannot be hidden: {}",  aClass);
 			}
 		}
 		HIDDEN_REST_CONTROLLERS.addAll(hiddenClasses);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -194,7 +194,7 @@ static BeanFactoryPostProcessor springdocBeanFactoryPostProcessor() {
 	@ConditionalOnMissingClass(value = BINDRESULT_CLASS)
 	@Lazy(false)
 	static BeanFactoryPostProcessor springdocBeanFactoryPostProcessor2() {
-		return beanFactory -> SpringdocBeanFactoryConfigurer.initBeanFactoryPostProcessor(beanFactory);
+		return SpringdocBeanFactoryConfigurer::initBeanFactoryPostProcessor;
 	}
 
 }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringdocBeanFactoryConfigurer.java
Patch:
@@ -28,7 +28,6 @@
 
 import io.swagger.v3.oas.models.OpenAPI;
 
-import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
 import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
 import org.springframework.boot.context.properties.bind.BindResult;
@@ -52,7 +51,7 @@ public void setEnvironment(Environment environment) {
 	}
 
 	@Override
-	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
+	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)  {
 		final BindResult<SpringDocConfigProperties> result = Binder.get(environment)
 				.bind(SPRINGDOC_PREFIX, SpringDocConfigProperties.class);
 		if (result.isBound()) {

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -158,8 +158,8 @@ protected void getPaths(Map<String, Object> restControllers) {
 				.ifPresent(routerBeans -> routerBeans.forEach(this::getRouterFunctionPaths)));
 
 		if(repositoryRestResourceProvider.isPresent()){
-			RepositoryRestResourceProvider repositoryRestResourceProvider = this.repositoryRestResourceProvider.get();
-			List<RouterOperation>  operationList = repositoryRestResourceProvider.getRouterOperations(openAPIBuilder.getCalculatedOpenAPI());
+			RepositoryRestResourceProvider restResourceProvider = this.repositoryRestResourceProvider.get();
+			List<RouterOperation>  operationList = restResourceProvider.getRouterOperations(openAPIBuilder.getCalculatedOpenAPI());
 			calculatePath(operationList);
 		}
 	}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/DelegatingMethodParameter.java
Patch:
@@ -43,7 +43,7 @@
 /**
  * @author zarebski.m
  */
-class DelegatingMethodParameter extends MethodParameter {
+public class DelegatingMethodParameter extends MethodParameter {
 
 	private MethodParameter delegate;
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericParameterBuilder.java
Patch:
@@ -149,7 +149,7 @@ private static void mergeParameter(Parameter paramCalcul, Parameter paramDoc) {
 			paramDoc.setExplode(paramCalcul.getExplode());
 	}
 
-	Parameter buildParameterFromDoc(io.swagger.v3.oas.annotations.Parameter parameterDoc,
+	public Parameter buildParameterFromDoc(io.swagger.v3.oas.annotations.Parameter parameterDoc,
 			Components components, JsonView jsonView) {
 		Parameter parameter = new Parameter();
 		if (StringUtils.isNotBlank(parameterDoc.description()))

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OpenAPIBuilder.java
Patch:
@@ -403,7 +403,7 @@ private OpenAPIDefinition getApiDefClass(ClassPathScanningCandidateComponentProv
 		return null;
 	}
 
-	private boolean isAutoTagClasses(Operation operation) {
+	public boolean isAutoTagClasses(Operation operation) {
 		return CollectionUtils.isEmpty(operation.getTags()) && springDocConfigProperties.isAutoTagClasses();
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/ParameterInfo.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestParam;
 
-class ParameterInfo {
+public class ParameterInfo {
 
 	private final MethodParameter methodParameter;
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RequestBodyInfo.java
Patch:
@@ -25,7 +25,7 @@
 import io.swagger.v3.oas.models.parameters.RequestBody;
 
 @SuppressWarnings("rawtypes")
-class RequestBodyInfo {
+public class RequestBodyInfo {
 
 	private RequestBody requestBody;
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/ResponseSupportConverter.java
Patch:
@@ -46,11 +46,11 @@ public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterato
 				if (innerType == null)
 					return new StringSchema();
 				else if (innerType.getBindings() != null && isResponseTypeWrapper(innerType.getRawClass())) {
-					type = new AnnotatedType(innerType).jsonViewAnnotation(type.getJsonViewAnnotation()).resolveAsRef(true);
+					type = new AnnotatedType(innerType).jsonViewAnnotation(type.getJsonViewAnnotation()).ctxAnnotations(type.getCtxAnnotations()).resolveAsRef(true);
 					return this.resolve(type, context, chain);
 				}
 				else
-					type = new AnnotatedType(innerType).jsonViewAnnotation(type.getJsonViewAnnotation()).resolveAsRef(true);
+					type = new AnnotatedType(innerType).jsonViewAnnotation(type.getJsonViewAnnotation()).ctxAnnotations((type.getCtxAnnotations())).resolveAsRef(true);
 			}
 			else if (isResponseTypeToIgnore(cls))
 				return null;

File: springdoc-openapi-hateoas/src/main/java/org/springdoc/hateoas/converters/CollectionModelContentConverter.java
Patch:
@@ -70,6 +70,8 @@ public Schema<?> resolve(AnnotatedType type, ModelConverterContext context, Iter
 	private Class<?> getEntityType(AnnotatedType type) {
 		Class<?> containerEntityType = ((CollectionType) (type.getType())).getContentType().getRawClass();
 
+		if(((CollectionType) type.getType()).getContentType().getBindings().getTypeParameters().size()==0)
+			return containerEntityType;
 		if (containerEntityType.isAssignableFrom(EntityModel.class)) {
 			return ((CollectionType) type.getType()).getContentType().getBindings().getBoundType(0).getRawClass();
 		}

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app120/AccountId.java
Patch:
@@ -24,6 +24,7 @@
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.enums.ParameterIn;
 import io.swagger.v3.oas.annotations.media.Schema;
+
 import org.springframework.core.annotation.AliasFor;
 
 import static java.lang.annotation.ElementType.ANNOTATION_TYPE;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app120/MetaAnnotationController.java
Patch:
@@ -30,6 +30,7 @@
 import io.swagger.v3.oas.annotations.media.Content;
 import io.swagger.v3.oas.annotations.media.ExampleObject;
 import io.swagger.v3.oas.annotations.media.Schema;
+
 import org.springframework.core.annotation.AliasFor;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app120/SpringDocApp120Test.java
Patch:
@@ -17,9 +17,10 @@
  */
 package test.org.springdoc.api.app120;
 
-import org.springframework.boot.autoconfigure.SpringBootApplication;
 import test.org.springdoc.api.AbstractSpringDocTest;
 
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
 
 /**
  * Tests Spring meta-annotations as method parameters

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app94/SpringDocApp94Test.java
Patch:
@@ -31,6 +31,7 @@
 import org.springdoc.core.GenericResponseBuilder;
 import org.springdoc.core.OpenAPIBuilder;
 import org.springdoc.core.OperationBuilder;
+import org.springdoc.core.RepositoryRestResourceProvider;
 import org.springdoc.core.SecurityOAuth2Provider;
 import org.springdoc.core.SpringDocConfigProperties;
 import org.springdoc.core.customizers.OpenApiBuilderCustomiser;
@@ -96,9 +97,9 @@ public OpenApiResource openApiResource(OpenAPIBuilder openAPIBuilder, AbstractRe
 				@Qualifier("defaultTestHandlerMapping") RequestMappingHandlerMapping requestMappingHandlerMapping,
 				Optional<ActuatorProvider> servletContextProvider, SpringDocConfigProperties springDocConfigProperties,
 				Optional<List<OpenApiCustomiser>> openApiCustomisers, Optional<SecurityOAuth2Provider> springSecurityOAuth2Provider,
-				Optional<RouterFunctionProvider> routerFunctionProvider) {
+				Optional<RouterFunctionProvider> routerFunctionProvider, Optional<RepositoryRestResourceProvider> repositoryRestResourceProvider) {
 			return new OpenApiResource(DEFAULT_GROUP_NAME, openAPIBuilder, requestBuilder, responseBuilder, operationParser, requestMappingHandlerMapping,
-					servletContextProvider,operationCustomizers, openApiCustomisers, springDocConfigProperties, springSecurityOAuth2Provider,routerFunctionProvider);
+					servletContextProvider,operationCustomizers, openApiCustomisers, springDocConfigProperties, springSecurityOAuth2Provider,routerFunctionProvider, repositoryRestResourceProvider);
 		}
 
 		@Override

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/models/MonetaryAmount.java
Patch:
@@ -18,7 +18,7 @@
  *
  */
 
-package org.springdoc.core.converters;
+package org.springdoc.core.converters.models;
 
 import java.math.BigDecimal;
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/models/Pageable.java
Patch:
@@ -18,7 +18,7 @@
  *
  */
 
-package org.springdoc.data.rest.converters;
+package org.springdoc.core.converters.models;
 
 import java.util.List;
 import java.util.Objects;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/models/PageableAsQueryParam.java
Patch:
@@ -18,7 +18,7 @@
  *
  */
 
-package org.springdoc.data.rest.converters;
+package org.springdoc.core.converters.models;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/AbstractRouterFunctionVisitor.java
Patch:
@@ -18,14 +18,12 @@
  *
  */
 
-package org.springdoc.core.visitor;
+package org.springdoc.core.fn;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 
-import org.springdoc.core.models.RouterFunctionData;
-
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpMethod;
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/RouterFunctionData.java
Patch:
@@ -18,7 +18,7 @@
  *
  */
 
-package org.springdoc.core.models;
+package org.springdoc.core.fn;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/fn/RouterOperation.java
Patch:
@@ -18,7 +18,7 @@
  *
  */
 
-package org.springdoc.core.models;
+package org.springdoc.core.fn;
 
 import java.util.Map;
 

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/app3/HelloController.java
Patch:
@@ -18,7 +18,7 @@
 
 package test.org.springdoc.api.app3;
 
-import org.springdoc.data.rest.converters.PageableAsQueryParam;
+import org.springdoc.core.converters.models.PageableAsQueryParam;
 
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.GetMapping;

File: springdoc-openapi-hateoas/src/main/java/org/springdoc/hateoas/converters/CollectionModelContentConverter.java
Patch:
@@ -18,7 +18,7 @@
  *
  */
 
-package org.springdoc.data.rest.converters;
+package org.springdoc.hateoas.converters;
 
 import java.util.Collection;
 import java.util.Iterator;

File: springdoc-openapi-hateoas/src/main/java/org/springdoc/hateoas/converters/RepresentationModelLinksOASMixin.java
Patch:
@@ -18,7 +18,7 @@
  *
  */
 
-package org.springdoc.data.rest.converters;
+package org.springdoc.hateoas.converters;
 
 import io.swagger.v3.core.util.AnnotationsUtils;
 import io.swagger.v3.oas.annotations.media.Schema;

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/visitor/RouterFunctionVisitor.java
Patch:
@@ -22,8 +22,8 @@
 
 import java.util.function.Function;
 
-import org.springdoc.core.models.RouterFunctionData;
-import org.springdoc.core.visitor.AbstractRouterFunctionVisitor;
+import org.springdoc.core.fn.AbstractRouterFunctionVisitor;
+import org.springdoc.core.fn.RouterFunctionData;
 import reactor.core.publisher.Mono;
 
 import org.springframework.core.io.Resource;

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/RouterFunctionProvider.java
Patch:
@@ -25,8 +25,8 @@
 import java.util.Optional;
 import java.util.function.Function;
 
-import org.springdoc.core.models.RouterFunctionData;
-import org.springdoc.core.visitor.AbstractRouterFunctionVisitor;
+import org.springdoc.core.fn.AbstractRouterFunctionVisitor;
+import org.springdoc.core.fn.RouterFunctionData;
 
 import org.springframework.context.ApplicationContext;
 import org.springframework.core.io.Resource;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app114/SpringDocApp114Test.java
Patch:
@@ -14,6 +14,6 @@ public class SpringDocApp114Test extends AbstractSpringDocTest {
 	static class SpringDocTestApp {}
 
 	static {
-		SpringDocUtils.getConfig().replaceWithClass(MonetaryAmount.class, org.springdoc.core.converters.MonetaryAmount.class);
+		SpringDocUtils.getConfig().replaceWithClass(MonetaryAmount.class, org.springdoc.core.converters.models.MonetaryAmount.class);
 	}
 }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/PolymorphicModelConverter.java
Patch:
@@ -30,6 +30,7 @@
 import io.swagger.v3.core.converter.AnnotatedType;
 import io.swagger.v3.core.converter.ModelConverter;
 import io.swagger.v3.core.converter.ModelConverterContext;
+import io.swagger.v3.core.util.AnnotationsUtils;
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.oas.models.media.ComposedSchema;
 import io.swagger.v3.oas.models.media.Schema;
@@ -52,7 +53,7 @@ private Schema composePolymorphicSchema(AnnotatedType type, Schema schema, Colle
 				.map(s -> (ComposedSchema) s)
 				.filter(s -> s.getAllOf() != null)
 				.filter(s -> s.getAllOf().stream().anyMatch(s2 -> ref.equals(s2.get$ref())))
-				.map(s -> new Schema().$ref("#/components/schemas/" + s.getName()))
+				.map(s -> new Schema().$ref(AnnotationsUtils.COMPONENTS_REF + s.getName()))
 				.collect(Collectors.toList());
 		if (composedSchemas.isEmpty()) return schema;
 

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/SpringDocDataRestConfiguration.java
Patch:
@@ -28,6 +28,7 @@
 import io.swagger.v3.core.converter.AnnotatedType;
 import io.swagger.v3.core.converter.ModelConverters;
 import io.swagger.v3.core.converter.ResolvedSchema;
+import io.swagger.v3.core.util.AnnotationsUtils;
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.oas.models.media.MapSchema;
 import io.swagger.v3.oas.models.media.ObjectSchema;
@@ -100,7 +101,7 @@ OpenApiCustomiser linksSchemaCustomiser(HalProvider halProvider) {
 				.schema("Link", resolvedLinkSchema.schema)
 				.schema("Links", new MapSchema()
 						.additionalProperties(new StringSchema())
-						.additionalProperties(new ObjectSchema().$ref("#/components/schemas/Link")));
+						.additionalProperties(new ObjectSchema().$ref(AnnotationsUtils.COMPONENTS_REF +"Link")));
 	}
 
 	@ConditionalOnClass(value = { QuerydslBindingsFactory.class })

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/converters/RepresentationModelLinksOASMixin.java
Patch:
@@ -20,13 +20,14 @@
 
 package org.springdoc.data.rest.converters;
 
+import io.swagger.v3.core.util.AnnotationsUtils;
 import io.swagger.v3.oas.annotations.media.Schema;
 
 import org.springframework.hateoas.Links;
 import org.springframework.hateoas.mediatype.hal.RepresentationModelMixin;
 
 public abstract class RepresentationModelLinksOASMixin extends RepresentationModelMixin {
 	@Override
-	@Schema(ref = "#/components/schemas/Links")
+	@Schema(ref = AnnotationsUtils.COMPONENTS_REF +"Links")
 	public abstract Links getLinks();
 }

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app1/InventoryApi.java
Patch:
@@ -52,7 +52,7 @@ public interface InventoryApi {
 			@ApiResponse(responseCode = "409", description = "an existing item already exists") })
 	@PostMapping(value = "/inventory", consumes = { "application/json" })
 	ResponseEntity<Void> addInventory(
-			@Parameter(description = "Inventory item to do") @Valid @RequestBody InventoryItem body);
+			@io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Inventory item to do") @Valid @RequestBody InventoryItem body);
 
 	@Operation(description = "searches inventory", operationId = "searchInventory", summary = "By passing in the appropriate options, you can search for available inventory in the system ", tags = {
 			"developers", }, parameters = {

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app1/InventoryApiController.java
Patch:
@@ -51,7 +51,7 @@ public InventoryApiController(ObjectMapper objectMapper, HttpServletRequest requ
 	}
 
 	public ResponseEntity<Void> addInventory(
-			@Parameter(description = "Inventory item to add") @Valid @RequestBody InventoryItem body) {
+			@io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Inventory item to add") @Valid @RequestBody InventoryItem body) {
 		@SuppressWarnings("unused")
 		String accept = request.getHeader("Accept");
 		return new ResponseEntity<Void>(HttpStatus.NOT_IMPLEMENTED);

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app2/api/PetApi.java
Patch:
@@ -75,7 +75,7 @@ default PetApiDelegate getDelegate() {
 	@ApiResponses(value = { @ApiResponse(responseCode = "405", description = "Invalid input") })
 	@PostMapping(value = "/pet", consumes = { "application/json", "application/xml" })
 	default void addPet(
-			@Parameter(description = "Pet object that needs to be added to the store", required = true) @Valid @RequestBody Pet pet) {
+			@io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Pet object that needs to be added to the store", required = true) @Valid @RequestBody Pet pet) {
 		// return getDelegate().addPet(pet);
 	}
 
@@ -131,7 +131,7 @@ default ResponseEntity<Pet> getPetById(
 			@ApiResponse(responseCode = "405", description = "Validation exception") })
 	@PutMapping(value = "/pet", consumes = { "application/json", "application/xml" })
 	default ResponseEntity<Void> updatePet(
-			@Parameter(description = "Pet object that needs to be added to the store", required = true) @Valid @RequestBody Pet pet) {
+			@io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Pet object that needs to be added to the store", required = true) @Valid @RequestBody Pet pet) {
 		return getDelegate().updatePet(pet);
 	}
 

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/api/MultipleOpenApiResource.java
Patch:
@@ -106,7 +106,7 @@ public void afterPropertiesSet() throws Exception {
 									responseBuilder,
 									operationParser,
 									requestMappingHandlerMapping,
-									operationCustomizers,
+									Optional.of(item.getOperationCustomizers()),
 									Optional.of(item.getOpenApiCustomisers()), springDocConfigProperties
 							);
 						}

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/MultipleOpenApiResource.java
Patch:
@@ -117,7 +117,7 @@ public void afterPropertiesSet() throws Exception {
 									operationParser,
 									requestMappingHandlerMapping,
 									servletContextProvider,
-									operationCustomizers,
+									Optional.of(item.getOperationCustomizers()),
 									Optional.of(item.getOpenApiCustomisers()),
 									springDocConfigProperties,
 									springSecurityOAuth2Provider,

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/pet/PetApi.java
Patch:
@@ -43,6 +43,7 @@
 import io.swagger.v3.oas.annotations.security.SecurityRequirement;
 import io.swagger.v3.oas.annotations.security.SecurityScheme;
 import io.swagger.v3.oas.annotations.tags.Tag;
+import test.org.springdoc.api.app68.CustomizedOperation;
 import test.org.springdoc.api.app68.model.ModelApiResponse;
 import test.org.springdoc.api.app68.model.Pet;
 
@@ -73,6 +74,7 @@ default PetApiDelegate getDelegate() {
 			@SecurityRequirement(name = "petstore_auth", scopes = { "write:pets", "read:pets" }) }, tags = { "pet" })
 	@ApiResponses(value = { @ApiResponse(responseCode = "405", description = "Invalid input") })
 	@PostMapping(value = "/pet", consumes = { "application/json", "application/xml" })
+	@CustomizedOperation
 	default void addPet(
 			@Parameter(description = "Pet object that needs to be added to the store", required = true) @Valid @RequestBody Pet pet) {
 		// return getDelegate().addPet(pet);
@@ -83,6 +85,7 @@ default void addPet(
 	@ApiResponses(value = { @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
 			@ApiResponse(responseCode = "404", description = "Pet not found") })
 	@DeleteMapping(value = "/pet/{petId}")
+	@CustomizedOperation
 	default ResponseEntity<Void> deletePet(
 			@Parameter(description = "Pet id to delete", required = true) @PathVariable("petId") Long petId,
 			@Parameter(description = "") @RequestHeader(value = "api_key", required = false) String apiKey) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocAnnotationsUtils.java
Patch:
@@ -56,7 +56,7 @@ public static Schema resolveSchemaFromType(Class<?> schemaImplementation, Compon
 			JsonView jsonView, Annotation[] annotations) {
 		Schema schemaObject = extractSchema(components, schemaImplementation, jsonView, annotations);
 		if (schemaObject != null && StringUtils.isBlank(schemaObject.get$ref())
-				&& StringUtils.isBlank(schemaObject.getType())) {
+				&& StringUtils.isBlank(schemaObject.getType()) && !(schemaObject instanceof ComposedSchema)) {
 			// default to string
 			schemaObject.setType("string");
 		}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericResponseBuilder.java
Patch:
@@ -195,8 +195,9 @@ private void buildApiResponses(Components components, MethodParameter methodPara
 			String httpCode = evaluateResponseStatus(methodParameter.getMethod(), methodParameter.getMethod().getClass(), isGeneric);
 			ApiResponse apiResponse = methodAttributes.getGenericMapResponse().containsKey(httpCode) ? methodAttributes.getGenericMapResponse().get(httpCode)
 					: new ApiResponse();
-			buildApiResponses(components, methodParameter, apiResponsesOp, methodAttributes, httpCode, apiResponse,
-					isGeneric);
+			if (httpCode != null)
+				buildApiResponses(components, methodParameter, apiResponsesOp, methodAttributes, httpCode, apiResponse,
+						isGeneric);
 		}
 	}
 

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/api/MultipleOpenApiResource.java
Patch:
@@ -112,7 +112,7 @@ public void afterPropertiesSet() throws Exception {
 	}
 
 	@Operation(hidden = true)
-	@GetMapping(value = API_DOCS_URL + "/{group}", produces = MediaType.TEXT_PLAIN_VALUE)
+	@GetMapping(value = API_DOCS_URL + "/{group}", produces = MediaType.APPLICATION_JSON_VALUE)
 	public Mono<String> openapiJson(ServerHttpRequest
 			serverHttpRequest, @Value(API_DOCS_URL) String apiDocsUrl, @PathVariable String
 			group)

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/api/OpenApiResource.java
Patch:
@@ -84,7 +84,7 @@ public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder req
 	}
 
 	@Operation(hidden = true)
-	@GetMapping(value = API_DOCS_URL, produces = MediaType.TEXT_PLAIN_VALUE)
+	@GetMapping(value = API_DOCS_URL, produces = MediaType.APPLICATION_JSON_VALUE)
 	public Mono<String> openapiJson(ServerHttpRequest serverHttpRequest, @Value(API_DOCS_URL) String apiDocsUrl)
 			throws JsonProcessingException {
 		calculateServerUrl(serverHttpRequest, apiDocsUrl);

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/MultipleOpenApiResource.java
Patch:
@@ -121,7 +121,7 @@ public void afterPropertiesSet() throws Exception {
 	}
 
 	@Operation(hidden = true)
-	@GetMapping(value = API_DOCS_URL + "/{group}", produces = MediaType.TEXT_PLAIN_VALUE)
+	@GetMapping(value = API_DOCS_URL + "/{group}", produces = MediaType.APPLICATION_JSON_VALUE)
 	public String openapiJson(HttpServletRequest request, @Value(API_DOCS_URL) String apiDocsUrl,
 			@PathVariable String group)
 			throws JsonProcessingException {

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -102,7 +102,7 @@ public OpenApiResource( OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder re
 	}
 
 	@Operation(hidden = true)
-	@GetMapping(value = API_DOCS_URL, produces = MediaType.TEXT_PLAIN_VALUE)
+	@GetMapping(value = API_DOCS_URL, produces = MediaType.APPLICATION_JSON_VALUE)
 	public String openapiJson(HttpServletRequest request, @Value(API_DOCS_URL) String apiDocsUrl)
 			throws JsonProcessingException {
 		calculateServerUrl(request, apiDocsUrl);

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/SpringDocDataRestConfiguration.java
Patch:
@@ -54,7 +54,7 @@
 
 @Configuration
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
-class SpringDocDataRestConfiguration {
+public class SpringDocDataRestConfiguration {
 
 	static {
 		getConfig().replaceWithClass(org.springframework.data.domain.Pageable.class, Pageable.class)

File: springdoc-openapi-kotlin/src/main/java/org/springdoc/kotlin/SpringDocKotlinConfiguration.java
Patch:
@@ -34,7 +34,7 @@
 
 @Configuration
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
-class SpringDocKotlinConfiguration {
+public class SpringDocKotlinConfiguration {
 
 	static {
 		getConfig().addRequestWrapperToIgnore(Continuation.class)

File: springdoc-openapi-kotlin/src/main/java/org/springdoc/kotlin/SpringDocKotlinxConfiguration.java
Patch:
@@ -12,7 +12,7 @@
 @ConditionalOnClass(Flow.class)
 @Configuration
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
-class SpringDocKotlinxConfiguration {
+public class SpringDocKotlinxConfiguration {
 
 	static {
 		getConfig().addFluxWrapperToIgnore(Flow.class);

File: springdoc-openapi-security/src/main/java/org/springdoc/security/SpringDocSecurityConfiguration.java
Patch:
@@ -32,7 +32,7 @@
 
 @Configuration
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
-class SpringDocSecurityConfiguration {
+public class SpringDocSecurityConfiguration {
 
 	static {
 		getConfig().addRequestWrapperToIgnore(Authentication.class)

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerConfig.java
Patch:
@@ -36,7 +36,7 @@
 @Configuration
 @ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
 @ConditionalOnBean(SpringDocConfiguration.class)
-class SwaggerConfig {
+public class SwaggerConfig {
 
 	@Bean
 	@ConditionalOnMissingBean

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/MultipleOpenApiWebFluxConfiguration.java
Patch:
@@ -48,7 +48,7 @@
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 @Conditional(MultipleOpenApiSupportCondition.class)
-class MultipleOpenApiWebFluxConfiguration {
+public class MultipleOpenApiWebFluxConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/core/MultipleOpenApiSupportConfiguration.java
Patch:
@@ -50,7 +50,7 @@
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 @Conditional(MultipleOpenApiSupportCondition.class)
-class MultipleOpenApiSupportConfiguration {
+public class MultipleOpenApiSupportConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/core/SpringDocWebMvcConfiguration.java
Patch:
@@ -58,7 +58,7 @@
 @Configuration
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
-class SpringDocWebMvcConfiguration {
+public class SpringDocWebMvcConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/core/SpringDocWebMvcConfiguration.java
Patch:
@@ -38,6 +38,8 @@
 import org.springdoc.webmvc.api.ActuatorProvider;
 import org.springdoc.webmvc.api.OpenApiResource;
 
+import org.springframework.boot.actuate.autoconfigure.web.server.ConditionalOnManagementPort;
+import org.springframework.boot.actuate.autoconfigure.web.server.ManagementPortType;
 import org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
@@ -92,6 +94,7 @@ GenericResponseBuilder responseBuilder(OperationBuilder operationBuilder, List<R
 
 	@ConditionalOnProperty(SPRINGDOC_SHOW_ACTUATOR)
 	@ConditionalOnClass(WebMvcEndpointHandlerMapping.class)
+	@ConditionalOnManagementPort(ManagementPortType.SAME)
 	class SpringDocWebMvcActuatorConfiguration {
 
 		@Bean

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/core/MultipleOpenApiSupportConfiguration.java
Patch:
@@ -29,6 +29,7 @@
 import org.springdoc.core.OperationBuilder;
 import org.springdoc.core.SecurityOAuth2Provider;
 import org.springdoc.core.SpringDocConfigProperties;
+import org.springdoc.core.customizers.OperationCustomizer;
 import org.springdoc.webmvc.api.ActuatorProvider;
 import org.springdoc.webmvc.api.MultipleOpenApiResource;
 
@@ -57,13 +58,14 @@ class MultipleOpenApiSupportConfiguration {
 	MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,
 			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
+			Optional<List<OperationCustomizer>> operationCustomizers,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping,
 			Optional<ActuatorProvider> servletContextProvider,
 			SpringDocConfigProperties springDocConfigProperties,
 			Optional<SecurityOAuth2Provider> springSecurityOAuth2Provider) {
 		return new MultipleOpenApiResource(groupedOpenApis,
 				defaultOpenAPIBuilder, requestBuilder,
-				responseBuilder, operationParser,
+				responseBuilder, operationParser,operationCustomizers,
 				requestMappingHandlerMapping, servletContextProvider,
 				springDocConfigProperties,
 				springSecurityOAuth2Provider);

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app94/SpringDocApp94Test.java
Patch:
@@ -35,6 +35,7 @@
 import org.springdoc.core.SpringDocConfigProperties;
 import org.springdoc.core.customizers.OpenApiBuilderCustomiser;
 import org.springdoc.core.customizers.OpenApiCustomiser;
+import org.springdoc.core.customizers.OperationCustomizer;
 import org.springdoc.webmvc.api.ActuatorProvider;
 import org.springdoc.webmvc.api.OpenApiResource;
 import test.org.springdoc.api.AbstractSpringDocTest;
@@ -90,12 +91,12 @@ public RequestMappingHandlerMapping defaultTestHandlerMapping(GreetingController
 
 		@Bean(name = "openApiResource")
 		public OpenApiResource openApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder, GenericResponseBuilder responseBuilder,
-				OperationBuilder operationParser,
+				OperationBuilder operationParser,Optional<List<OperationCustomizer>> operationCustomizers,
 				@Qualifier("defaultTestHandlerMapping") RequestMappingHandlerMapping requestMappingHandlerMapping,
 				Optional<ActuatorProvider> servletContextProvider, SpringDocConfigProperties springDocConfigProperties,
 				Optional<List<OpenApiCustomiser>> openApiCustomisers, Optional<SecurityOAuth2Provider> springSecurityOAuth2Provider) {
 			return new OpenApiResource(DEFAULT_GROUP_NAME, openAPIBuilder, requestBuilder, responseBuilder, operationParser, requestMappingHandlerMapping,
-					servletContextProvider, openApiCustomisers, springDocConfigProperties, springSecurityOAuth2Provider);
+					servletContextProvider,operationCustomizers, openApiCustomisers, springDocConfigProperties, springSecurityOAuth2Provider);
 		}
 
 		@Override

File: springdoc-openapi-groovy/src/main/java/org/springdoc/groovy/SpringDocGroovyConfiguration.java
Patch:
@@ -31,7 +31,7 @@
 
 @Configuration
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
-class SpringDocGroovyConfiguration {
+public class SpringDocGroovyConfiguration {
 
 	@Bean
 	@Lazy(false)

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/api/MultipleOpenApiResource.java
Patch:
@@ -103,7 +103,7 @@ public void afterPropertiesSet() throws Exception {
 	}
 
 	@Operation(hidden = true)
-	@GetMapping(value = API_DOCS_URL + "/{group}", produces = MediaType.APPLICATION_JSON_VALUE)
+	@GetMapping(value = API_DOCS_URL + "/{group}", produces = MediaType.TEXT_PLAIN_VALUE)
 	public Mono<String> openapiJson(ServerHttpRequest
 			serverHttpRequest, @Value(API_DOCS_URL) String apiDocsUrl, @PathVariable String
 			group)

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/api/OpenApiResource.java
Patch:
@@ -81,7 +81,7 @@ public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder req
 	}
 
 	@Operation(hidden = true)
-	@GetMapping(value = API_DOCS_URL, produces = MediaType.APPLICATION_JSON_VALUE)
+	@GetMapping(value = API_DOCS_URL, produces = MediaType.TEXT_PLAIN_VALUE)
 	public Mono<String> openapiJson(ServerHttpRequest serverHttpRequest, @Value(API_DOCS_URL) String apiDocsUrl)
 			throws JsonProcessingException {
 		calculateServerUrl(serverHttpRequest, apiDocsUrl);
@@ -122,7 +122,7 @@ protected void getPaths(Map<String, Object> restControllers) {
 		}
 	}
 
-	private void calculateServerUrl(ServerHttpRequest serverHttpRequest, String apiDocsUrl) {
+	protected void calculateServerUrl(ServerHttpRequest serverHttpRequest, String apiDocsUrl) {
 		String requestUrl = decode(serverHttpRequest.getURI().toString());
 		String serverBaseUrl = requestUrl.substring(0, requestUrl.length() - apiDocsUrl.length());
 		openAPIBuilder.setServerBaseUrl(serverBaseUrl);

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/MultipleOpenApiResource.java
Patch:
@@ -113,7 +113,7 @@ public void afterPropertiesSet() throws Exception {
 	}
 
 	@Operation(hidden = true)
-	@GetMapping(value = API_DOCS_URL + "/{group}", produces = MediaType.APPLICATION_JSON_VALUE)
+	@GetMapping(value = API_DOCS_URL + "/{group}", produces = MediaType.TEXT_PLAIN_VALUE)
 	public String openapiJson(HttpServletRequest request, @Value(API_DOCS_URL) String apiDocsUrl,
 			@PathVariable String group)
 			throws JsonProcessingException {

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -99,7 +99,7 @@ public OpenApiResource( OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder re
 	}
 
 	@Operation(hidden = true)
-	@GetMapping(value = API_DOCS_URL, produces = MediaType.APPLICATION_JSON_VALUE)
+	@GetMapping(value = API_DOCS_URL, produces = MediaType.TEXT_PLAIN_VALUE)
 	public String openapiJson(HttpServletRequest request, @Value(API_DOCS_URL) String apiDocsUrl)
 			throws JsonProcessingException {
 		calculateServerUrl(request, apiDocsUrl);
@@ -159,7 +159,7 @@ && isPathToMatch(operationPath)) {
 		}
 	}
 
-	private boolean isRestController(Map<String, Object> restControllers, HandlerMethod handlerMethod,
+	protected boolean isRestController(Map<String, Object> restControllers, HandlerMethod handlerMethod,
 			String operationPath) {
 		ResponseBody responseBodyAnnotation = AnnotationUtils.findAnnotation(handlerMethod.getBeanType(), ResponseBody.class);
 		if (responseBodyAnnotation == null)
@@ -170,7 +170,7 @@ private boolean isRestController(Map<String, Object> restControllers, HandlerMet
 				&& (springDocConfigProperties.isModelAndViewAllowed() || !ModelAndView.class.isAssignableFrom(handlerMethod.getMethod().getReturnType()));
 	}
 
-	private void calculateServerUrl(HttpServletRequest request, String apiDocsUrl) {
+	protected void calculateServerUrl(HttpServletRequest request, String apiDocsUrl) {
 		String requestUrl = decode(request.getRequestURL().toString());
 		String calculatedUrl = requestUrl.substring(0, requestUrl.length() - apiDocsUrl.length());
 		openAPIBuilder.setServerBaseUrl(calculatedUrl);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/MonetaryAmount.java
Patch:
@@ -6,7 +6,7 @@
 import io.swagger.v3.oas.annotations.media.Schema;
 
 @Schema
-class MonetaryAmount {
+public class MonetaryAmount {
 
 	@JsonProperty("amount")
 	@Schema(example = "99.96")

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/MonetaryAmount.java
Patch:
@@ -6,7 +6,7 @@
 import io.swagger.v3.oas.annotations.media.Schema;
 
 @Schema
-public class MonetaryAmount {
+class MonetaryAmount {
 
 	@JsonProperty("amount")
 	@Schema(example = "99.96")

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/SpringDocMonetaryAmountConfiguration.java
Patch:
@@ -1,8 +1,10 @@
-package org.springdoc.core;
+package org.springdoc.core.converters;
 
 
 import javax.money.MonetaryAmount;
 
+import org.springdoc.core.SpringDocUtils;
+
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Configuration;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app114/HelloController.java
Patch:
@@ -18,8 +18,9 @@
 
 package test.org.springdoc.api.app114;
 
+import javax.money.MonetaryAmount;
+
 import com.fasterxml.jackson.annotation.JsonProperty;
-import org.springdoc.core.converters.MonetaryAmount;
 
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.PostMapping;

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/SpringDocDataRestConfiguration.java
Patch:
@@ -107,7 +107,7 @@ OpenApiCustomiser linksSchemaCustomiser(HalProvider halProvider) {
 		Json.mapper().addMixIn(RepresentationModel.class, RepresentationModelLinksOASMixin.class);
 
 		ResolvedSchema resolvedLinkSchema = ModelConverters.getInstance()
-				.resolveAsResolvedSchema(new AnnotatedType(Link.class).resolveAsRef(true));
+				.resolveAsResolvedSchema(new AnnotatedType(Link.class));
 
 		return openApi -> openApi
 				.schema("Link", resolvedLinkSchema.schema)

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -180,9 +180,9 @@ public Operation build(HandlerMethod handlerMethod, RequestMethod requestMethod,
 				parameterDoc = parametersDocMap.get(parameterInfo.getpName());
 			// use documentation as reference
 			if (parameterDoc != null) {
-				if (parameterDoc.hidden())
+				if (parameterDoc.hidden() || parameterDoc.schema().hidden())
 					continue;
-				parameter = parameterBuilder.buildParameterFromDoc(parameterDoc, null, methodAttributes.getJsonViewAnnotation());
+				parameter = parameterBuilder.buildParameterFromDoc(parameterDoc, components, methodAttributes.getJsonViewAnnotation());
 				parameterInfo.setParameterModel(parameter);
 			}
 

File: springdoc-openapi-security/src/main/java/org/springdoc/security/SpringDocSecurityConfiguration.java
Patch:
@@ -44,7 +44,7 @@ public class SpringDocSecurityConfiguration {
 	@ConditionalOnBean(FrameworkEndpointHandlerMapping.class)
 	class SpringSecurityOAuth2ProviderConfiguration {
 		@Bean
-		@ConditionalOnMissingBean
+		@ConditionalOnMissingBean(name = "springSecurityOAuth2Provider")
 		SpringSecurityOAuth2Provider springSecurityOAuth2Provider(FrameworkEndpointHandlerMapping oauth2EndpointHandlerMapping) {
 			return new SpringSecurityOAuth2Provider(oauth2EndpointHandlerMapping);
 		}

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/MultipleOpenApiWebFluxConfiguration.java
Patch:
@@ -49,7 +49,7 @@
 public class MultipleOpenApiWebFluxConfiguration {
 
 	@Bean
-	@ConditionalOnMissingBean
+	@ConditionalOnMissingBean(name = "multipleOpenApiResource")
 	@Lazy(false)
 	MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/core/MultipleOpenApiSupportConfiguration.java
Patch:
@@ -52,7 +52,7 @@
 public class MultipleOpenApiSupportConfiguration {
 
 	@Bean
-	@ConditionalOnMissingBean
+	@ConditionalOnMissingBean(name ="multipleOpenApiResource")
 	@Lazy(false)
 	MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app94/SpringDocApp94Test.java
Patch:
@@ -88,7 +88,7 @@ public RequestMappingHandlerMapping defaultTestHandlerMapping(GreetingController
 			return result;
 		}
 
-		@Bean(name = "mvcOpenApiResource")
+		@Bean(name = "openApiResource")
 		public OpenApiResource openApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder, GenericResponseBuilder responseBuilder,
 				OperationBuilder operationParser,
 				@Qualifier("defaultTestHandlerMapping") RequestMappingHandlerMapping requestMappingHandlerMapping,

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app110/ErrorMessage.java
Patch:
@@ -1,4 +1,4 @@
-package sample;
+package test.org.springdoc.api.app110;
 
 import java.util.Arrays;
 import java.util.Collections;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app110/Person.java
Patch:
@@ -1,4 +1,4 @@
-package sample;
+package test.org.springdoc.api.app110;
 
 import javax.validation.constraints.Email;
 import javax.validation.constraints.Max;
@@ -8,7 +8,6 @@
 import javax.validation.constraints.Pattern;
 import javax.validation.constraints.Size;
 
-
 import org.hibernate.validator.constraints.CreditCardNumber;
 
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app110/PersonController.java
Patch:
@@ -1,4 +1,4 @@
-package sample;
+package test.org.springdoc.api.app110;
 
 import java.util.ArrayList;
 import java.util.List;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app110/PersonController2.java
Patch:
@@ -1,4 +1,4 @@
-package sample;
+package test.org.springdoc.api.app110;
 
 import java.util.ArrayList;
 import java.util.List;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app110/Problem.java
Patch:
@@ -1,4 +1,4 @@
-package sample;
+package test.org.springdoc.api.app110;
 
 public class Problem {
 	

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app111/ErrorMessage.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app110;
+package test.org.springdoc.api.app111;
 
 import java.util.Arrays;
 import java.util.Collections;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app111/Person.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app110;
+package test.org.springdoc.api.app111;
 
 import javax.validation.constraints.Email;
 import javax.validation.constraints.Max;
@@ -8,7 +8,6 @@
 import javax.validation.constraints.Pattern;
 import javax.validation.constraints.Size;
 
-
 import org.hibernate.validator.constraints.CreditCardNumber;
 
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app111/PersonController.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app110;
+package test.org.springdoc.api.app111;
 
 import java.util.ArrayList;
 import java.util.List;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app111/PersonController2.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app110;
+package test.org.springdoc.api.app111;
 
 import java.util.ArrayList;
 import java.util.List;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app111/Problem.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app110;
+package test.org.springdoc.api.app111;
 
 public class Problem {
 	

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app111/SpringDocApp111Test.java
Patch:
@@ -13,7 +13,7 @@
 @TestPropertySource(properties = {
 		"application-description=description",
 		"application-version=v1" })
-public class SpringDocApp110Test extends AbstractSpringDocTest {
+public class SpringDocApp111Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication
 	static class SpringDocTestApp {

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app112/ErrorMessage.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app111;
+package test.org.springdoc.api.app112;
 
 import java.util.Arrays;
 import java.util.Collections;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app112/GlobalControllerAdvice.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app111;
+package test.org.springdoc.api.app112;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -25,7 +25,7 @@
 import org.springframework.web.bind.annotation.ResponseStatus;
 
 
-@ControllerAdvice(basePackages = "test.org.springdoc.api.appzzz")
+@ControllerAdvice(basePackages = "test.org.springdoc.api.app112.sample")
 public class GlobalControllerAdvice //extends ResponseEntityExceptionHandler
 {
 	/**

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app112/Person.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app111;
+package test.org.springdoc.api.app112;
 
 import javax.validation.constraints.Email;
 import javax.validation.constraints.Max;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app112/PersonController.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app111;
+package test.org.springdoc.api.app112;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -22,8 +22,8 @@ public class PersonController {
 	private Random ran = new Random(); 
 	@RequestMapping(path = "/person", method = RequestMethod.POST)
 	public Person person(@Valid @RequestBody Person person) {
-		 
-	     int nxt = ran.nextInt(10); 
+
+	     int nxt = ran.nextInt(10);
 	     if(nxt>=5)
 	     {
 	    	 throw new RuntimeException("Breaking logic");

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app112/Problem.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app111;
+package test.org.springdoc.api.app112;
 
 public class Problem {
 	

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app112/SpringDocApp112Test.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app111;
+package test.org.springdoc.api.app112;
 
 import io.swagger.v3.oas.models.OpenAPI;
 import io.swagger.v3.oas.models.info.Info;
@@ -13,7 +13,7 @@
 @TestPropertySource(properties = {
 		"application-description=description",
 		"application-version=v1" })
-public class SpringDocApp111Test extends AbstractSpringDocTest {
+public class SpringDocApp112Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication
 	static class SpringDocTestApp {

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app112/sample/PersonController2.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app111;
+package test.org.springdoc.api.app112.sample;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -9,6 +9,8 @@
 import javax.validation.constraints.NotNull;
 import javax.validation.constraints.Size;
 
+import test.org.springdoc.api.app112.Person;
+
 import org.springframework.validation.annotation.Validated;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfigProperties.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.http.MediaType;
 
+import static org.springdoc.core.Constants.DEFAULT_WEB_JARS_PREFIX_URL;
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
 
 @Configuration
@@ -190,7 +191,7 @@ public void setRemoveBrokenReferenceDefinitions(boolean removeBrokenReferenceDef
 	}
 
 	public static class Webjars {
-		private String prefix = "/webjars";
+		private String prefix = DEFAULT_WEB_JARS_PREFIX_URL;
 
 		public String getPrefix() {
 			return prefix;

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/converters/CollectionModelContentConverter.java
Patch:
@@ -30,6 +30,7 @@
 import io.swagger.v3.oas.models.media.ArraySchema;
 import io.swagger.v3.oas.models.media.ObjectSchema;
 import io.swagger.v3.oas.models.media.Schema;
+
 import org.springframework.hateoas.EntityModel;
 import org.springframework.hateoas.server.LinkRelationProvider;
 

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app5/SpringDocOauthPathsWithPropertyTest.java
Patch:
@@ -29,7 +29,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-@TestPropertySource(properties = "springdoc.swagger-ui.oauth2RedirectUrl=http://localhost:8080/toto/test/swagger-ui/oauth2-redirect.html")
+@TestPropertySource(properties = "springdoc.swagger-ui.oauth2-redirect-url=http://localhost:8080/toto/test/swagger-ui/oauth2-redirect.html")
 public class SpringDocOauthPathsWithPropertyTest extends AbstractSpringDocTest {
 
 	@Test

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app4/SpringDocOauthPathsWithPropertyTest.java
Patch:
@@ -26,7 +26,7 @@
 
 import static org.hamcrest.CoreMatchers.equalTo;
 
-@TestPropertySource(properties = "springdoc.swagger-ui.oauth2RedirectUrl=http://localhost:8080/toto/test/swagger-ui/oauth2-redirect.html")
+@TestPropertySource(properties = "springdoc.swagger-ui.oauth2-redirect-url=http://localhost:8080/toto/test/swagger-ui/oauth2-redirect.html")
 public class SpringDocOauthPathsWithPropertyTest extends AbstractSpringDocTest {
 
 	@Test

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfigProperties.java
Patch:
@@ -135,6 +135,8 @@ public void setPathsToMatch(List<String> pathsToMatch) {
 		this.pathsToMatch = pathsToMatch;
 	}
 
+	public Cache getCache() { return cache; }
+
 	public void setCache(Cache cache) {
 		this.cache = cache;
 	}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -255,7 +255,9 @@ protected Parameter customiseParameter(Parameter parameter, ParameterInfo parame
 	protected boolean isParamToIgnore(MethodParameter parameter) {
 		if (parameterBuilder.isAnnotationToIgnore(parameter))
 			return true;
-		if ((parameter.getParameterAnnotation(PathVariable.class) != null && parameter.getParameterAnnotation(PathVariable.class) .required()) || (parameter.getParameterAnnotation(RequestParam.class) != null && parameter.getParameterAnnotation(RequestParam.class).required()))
+		if ((parameter.getParameterAnnotation(PathVariable.class) != null && parameter.getParameterAnnotation(PathVariable.class) .required())
+				|| (parameter.getParameterAnnotation(RequestParam.class) != null && parameter.getParameterAnnotation(RequestParam.class).required())
+				|| (parameter.getParameterAnnotation(org.springframework.web.bind.annotation.RequestBody.class) != null && parameter.getParameterAnnotation(org.springframework.web.bind.annotation.RequestBody.class).required()))
 			return false;
 		return isRequestTypeToIgnore(parameter.getParameterType());
 	}

File: springdoc-openapi-kotlin/src/main/java/org/springdoc/kotlin/SpringDocKotlinConfiguration.java
Patch:
@@ -22,7 +22,6 @@
 import io.swagger.v3.core.util.Json;
 import kotlin.Deprecated;
 import kotlin.coroutines.Continuation;
-import kotlinx.coroutines.flow.Flow;
 
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
@@ -38,8 +37,7 @@ public class SpringDocKotlinConfiguration {
 
 	static {
 		getConfig().addRequestWrapperToIgnore(Continuation.class)
-				.addDeprecatedType(Deprecated.class)
-				.addFluxWrapperToIgnore(Flow.class);
+				.addDeprecatedType(Deprecated.class);
 		Json.mapper().registerModule(new KotlinModule());
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericParameterBuilder.java
Patch:
@@ -47,6 +47,7 @@
 import org.springframework.core.MethodParameter;
 import org.springframework.core.ResolvableType;
 import org.springframework.core.annotation.AnnotationUtils;
+import org.springframework.core.io.Resource;
 import org.springframework.web.multipart.MultipartFile;
 
 @SuppressWarnings("rawtypes")
@@ -58,6 +59,7 @@ public class GenericParameterBuilder {
 
 	static {
 		FILE_TYPES.add(MultipartFile.class);
+		FILE_TYPES.add(Resource.class);
 		ANNOTATIOSN_TO_IGNORE.add(Hidden.class);
 	}
 

File: springdoc-openapi-kotlin/src/main/java/org/springdoc/kotlin/SpringDocKotlinConfiguration.java
Patch:
@@ -22,6 +22,7 @@
 import io.swagger.v3.core.util.Json;
 import kotlin.Deprecated;
 import kotlin.coroutines.Continuation;
+import kotlinx.coroutines.flow.Flow;
 
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
@@ -37,7 +38,8 @@ public class SpringDocKotlinConfiguration {
 
 	static {
 		getConfig().addRequestWrapperToIgnore(Continuation.class)
-				.addDeprecatedType(Deprecated.class);
+				.addDeprecatedType(Deprecated.class)
+				.addFluxWrapperToIgnore(Flow.class);
 		Json.mapper().registerModule(new KotlinModule());
 	}
 

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app4/SpringDocApp4Test.java
Patch:
@@ -28,7 +28,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-@TestPropertySource(properties = "springdoc.swagger-ui.groups-order=DESC")
+@TestPropertySource(properties = {"springdoc.swagger-ui.groups-order=DESC", "springdoc.swagger-ui.urlsPrimaryName=pets"})
 public class SpringDocApp4Test extends AbstractSpringDocTest {
 
 	@Test
@@ -40,6 +40,7 @@ public void swagger_config_for_multiple_groups() throws Exception {
 				.andExpect(jsonPath("urls[0].url", equalTo("/v3/api-docs/stores")))
 				.andExpect(jsonPath("urls[0].name", equalTo("stores")))
 				.andExpect(jsonPath("urls[1].url", equalTo("/v3/api-docs/pets")))
-				.andExpect(jsonPath("urls[1].name", equalTo("pets")));
+				.andExpect(jsonPath("urls[1].name", equalTo("pets")))
+				.andExpect(jsonPath("$['urls.primaryName']", equalTo("pets")));
 	}
 }
\ No newline at end of file

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app4/SpringDocApp4Test.java
Patch:
@@ -28,7 +28,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-@TestPropertySource(properties = "springdoc.swagger-ui.groups-order=DESC")
+@TestPropertySource(properties = {"springdoc.swagger-ui.groups-order=DESC", "springdoc.swagger-ui.urlsPrimaryName=pets"})
 public class SpringDocApp4Test extends AbstractSpringDocTest {
 
 	@Test
@@ -40,6 +40,7 @@ public void swagger_config_for_multiple_groups() throws Exception {
 				.andExpect(jsonPath("urls[0].url", equalTo("/v3/api-docs/stores")))
 				.andExpect(jsonPath("urls[0].name", equalTo("stores")))
 				.andExpect(jsonPath("urls[1].url", equalTo("/v3/api-docs/pets")))
-				.andExpect(jsonPath("urls[1].name", equalTo("pets")));
+				.andExpect(jsonPath("urls[1].name", equalTo("pets")))
+				.andExpect(jsonPath("$['urls.primaryName']", equalTo("pets")));
 	}
 }
\ No newline at end of file

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app7/SpringDocApp7Test.java
Patch:
@@ -30,7 +30,9 @@
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-@TestPropertySource(properties = "springdoc.swagger-ui.oauth.clientId=myClientId")
+@TestPropertySource(properties = { "springdoc.swagger-ui.oauth.clientId=myClientId",
+		"springdoc.swagger-ui.oauth.additionalQueryStringParams.test1=test1",
+		"springdoc.swagger-ui.oauth.additionalQueryStringParams.test2=test2" })
 public class SpringDocApp7Test extends AbstractSpringDocTest {
 
 	@Test

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/app8/AlbumController.java
Patch:
@@ -1,7 +1,5 @@
 package test.org.springdoc.api.app8;
 
-import java.util.Arrays;
-
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.PageImpl;
@@ -10,8 +8,10 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
+import java.util.Arrays;
+
 @RestController
-public class WebController {
+public class AlbumController {
 
     @Autowired
     private AlbumModelAssembler albumModelAssembler;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericParameterBuilder.java
Patch:
@@ -266,7 +266,8 @@ private Schema getFileSchema(RequestBodyInfo requestBodyInfo) {
 
 	private boolean isFile(ParameterizedType parameterizedType) {
 		Type type = parameterizedType.getActualTypeArguments()[0];
-		if (isFile(ResolvableType.forType(type).getRawClass()))
+		Class fileClass = ResolvableType.forType(type).getRawClass();
+		if (fileClass!=null && isFile(fileClass))
 			return true;
 		else if (type instanceof WildcardType) {
 			WildcardType wildcardType = (WildcardType) type;

File: springdoc-openapi-groovy/src/main/java/org/springdoc/groovy/SpringDocGroovyConfiguration.java
Patch:
@@ -25,6 +25,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
 
@@ -33,12 +34,14 @@
 public class SpringDocGroovyConfiguration {
 
 	@Bean
+	@Lazy(false)
 	Object ignoreGroovyMetaClass() {
 		SpringDocUtils.getConfig().addRequestWrapperToIgnore(MetaClass.class);
 		return null;
 	}
 
 	@Bean
+	@Lazy(false)
 	RequestTypeToIgnoreConverter requestTypeToIgnoreConverter() {
 		return new RequestTypeToIgnoreConverter();
 	}

File: springdoc-openapi-kotlin/src/main/java/org/springdoc/kotlin/SpringDocKotlinConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 import org.springframework.context.annotation.Primary;
 
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
@@ -42,7 +43,7 @@ public class SpringDocKotlinConfiguration {
 	}
 
 	@Bean
-	@Primary
+	@Lazy(false)
 	KotlinCoroutinesReturnTypeParser kotlinCoroutinesReturnTypeParser() {
 		return new KotlinCoroutinesReturnTypeParser();
 	}

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/MultipleOpenApiWebFluxConfiguration.java
Patch:
@@ -36,6 +36,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 import org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping;
 
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
@@ -49,6 +50,7 @@ public class MultipleOpenApiWebFluxConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
+	@Lazy(false)
 	MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,
 			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/SpringDocWebFluxConfiguration.java
Patch:
@@ -41,6 +41,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
 import org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping;
 
@@ -54,6 +55,7 @@ public class SpringDocWebFluxConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
+	@Lazy(false)
 	OpenApiResource openApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
 			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping,
@@ -82,6 +84,7 @@ GenericResponseBuilder responseBuilder(OperationBuilder operationBuilder, List<R
 
 	@Bean
 	@ConditionalOnMissingBean
+	@Lazy(false)
 	WebFluxSupportConverter webFluxSupportConverter() {
 		return new WebFluxSupportConverter();
 	}

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/core/MultipleOpenApiSupportConfiguration.java
Patch:
@@ -39,6 +39,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 import org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping;
 
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
@@ -52,6 +53,7 @@ public class MultipleOpenApiSupportConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
+	@Lazy(false)
 	MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,
 			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/core/SpringDocWebMvcConfiguration.java
Patch:
@@ -45,6 +45,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
 import org.springframework.web.method.HandlerMethod;
 import org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping;
@@ -60,6 +61,7 @@ public class SpringDocWebMvcConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
+	@Lazy(false)
 	OpenApiResource openApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
 			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping,
@@ -100,6 +102,7 @@ ActuatorProvider actuatorProvider(WebMvcEndpointHandlerMapping webMvcEndpointHan
 		}
 
 		@Bean
+		@Lazy(false)
 		OperationCustomizer actuatorCustomizer(ActuatorProvider actuatorProvider) {
 			return new OperationCustomizer() {
 				private int methodCount;

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -122,7 +122,7 @@ public static void addDeprecatedType(Class<?> cls) {
 		DEPRECATED_TYPES.add(cls);
 	}
 
-	protected OpenAPI getOpenApi() {
+	protected synchronized OpenAPI getOpenApi() {
 		OpenAPI openApi;
 		if (openAPIBuilder.getCachedOpenAPI() == null || springDocConfigProperties.isCacheDisabled()) {
 			Instant start = Instant.now();

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericResponseBuilder.java
Patch:
@@ -44,6 +44,7 @@
 import org.apache.commons.lang3.StringUtils;
 
 import org.springframework.core.MethodParameter;
+import org.springframework.core.ResolvableType;
 import org.springframework.core.annotation.AnnotatedElementUtils;
 import org.springframework.http.HttpStatus;
 import org.springframework.util.CollectionUtils;
@@ -53,6 +54,7 @@
 import org.springframework.web.method.HandlerMethod;
 
 import static org.springdoc.core.Constants.DEFAULT_DESCRIPTION;
+import static org.springdoc.core.converters.ConverterUtils.isResponseTypeWrapper;
 
 @SuppressWarnings("rawtypes")
 public class GenericResponseBuilder {
@@ -336,7 +338,7 @@ private boolean isVoid(Type returnType) {
 			result = true;
 		else if (returnType instanceof ParameterizedType) {
 			Type[] types = ((ParameterizedType) returnType).getActualTypeArguments();
-			if (types != null)
+			if (types != null && isResponseTypeWrapper(ResolvableType.forType(returnType).getRawClass()))
 				return isVoid(types[0]);
 		}
 		if (Void.class.equals(returnType))

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -255,7 +255,7 @@ protected Parameter customiseParameter(Parameter parameter, ParameterInfo parame
 	protected boolean isParamToIgnore(MethodParameter parameter) {
 		if (parameterBuilder.isAnnotationToIgnore(parameter))
 			return true;
-		if (parameter.getParameterAnnotation(PathVariable.class) != null || parameter.getParameterAnnotation(RequestParam.class) != null)
+		if ((parameter.getParameterAnnotation(PathVariable.class) != null && parameter.getParameterAnnotation(PathVariable.class) .required()) || (parameter.getParameterAnnotation(RequestParam.class) != null && parameter.getParameterAnnotation(RequestParam.class).required()))
 			return false;
 		return isRequestTypeToIgnore(parameter.getParameterType());
 	}

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/converters/Pageable.java
Patch:
@@ -29,8 +29,6 @@
 import io.swagger.v3.oas.annotations.media.ArraySchema;
 import io.swagger.v3.oas.annotations.media.Schema;
 
-import org.springframework.lang.Nullable;
-
 @NotNull
 public class Pageable {
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericResponseBuilder.java
Patch:
@@ -67,7 +67,7 @@ public class GenericResponseBuilder {
 
 	private final PropertyResolverUtils propertyResolverUtils;
 
-	GenericResponseBuilder(OperationBuilder operationBuilder, List<ReturnTypeParser> returnTypeParsers,
+	public GenericResponseBuilder(OperationBuilder operationBuilder, List<ReturnTypeParser> returnTypeParsers,
 			SpringDocConfigProperties springDocConfigProperties,
 			PropertyResolverUtils propertyResolverUtils) {
 		super();

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/ConverterUtils.java
Patch:
@@ -51,7 +51,7 @@ public static void addResponseTypeToIgnore(Class<?> cls) {
 		RESPONSE_TYPES_TO_IGNORE.add(cls);
 	}
 
-	static boolean isResponseTypeWrapper(Class<?> rawClass) {
+	public static boolean isResponseTypeWrapper(Class<?> rawClass) {
 		return RESULT_WRAPPERS_TO_IGNORE.stream().anyMatch(clazz -> clazz.isAssignableFrom(rawClass));
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/ui/AbstractSwaggerWelcome.java
Patch:
@@ -97,8 +97,8 @@ protected UriComponentsBuilder getUriComponentsBuilder(String sbUrl) {
 		return uriBuilder;
 	}
 
-	abstract void calculateOauth2RedirectUrl(UriComponentsBuilder uriComponentsBuilder);
+	protected abstract void calculateOauth2RedirectUrl(UriComponentsBuilder uriComponentsBuilder);
 
-	abstract void calculateUiRootPath(StringBuilder... sbUrls);
+	protected abstract void calculateUiRootPath(StringBuilder... sbUrls);
 
 }
\ No newline at end of file

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/HalProvider.java
Patch:
@@ -16,13 +16,13 @@
  *
  */
 
-package org.springdoc.core;
+package org.springdoc.data.rest;
 
 import javax.annotation.PostConstruct;
 
 import io.swagger.v3.core.converter.ModelConverters;
 import io.swagger.v3.core.util.Json;
-import org.springdoc.core.converters.CollectionModelContentConverter;
+import org.springdoc.data.rest.converters.CollectionModelContentConverter;
 
 import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
 import org.springframework.hateoas.mediatype.hal.Jackson2HalModule;

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/converters/CollectionModelContentConverter.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.core.converters;
+package org.springdoc.data.rest.converters;
 
 import java.util.Collection;
 import java.util.Iterator;

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/converters/Pageable.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.core.converters;
+package org.springdoc.data.rest.converters;
 
 import java.util.List;
 import java.util.Objects;

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/converters/PageableAsQueryParam.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.core.converters;
+package org.springdoc.data.rest.converters;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/converters/RepresentationModelLinksOASMixin.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.core.converters;
+package org.springdoc.data.rest.converters;
 
 import io.swagger.v3.oas.annotations.media.Schema;
 

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/data/rest/customisers/QuerydslPredicateOperationCustomizer.java
Patch:
@@ -1,4 +1,4 @@
-package org.springdoc.core.customisers;
+package org.springdoc.data.rest.customisers;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springdoc.core.Constants;
-import org.springdoc.core.converters.CollectionModelContentConverter;
+import org.springdoc.data.rest.converters.CollectionModelContentConverter;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/app3/HelloController.java
Patch:
@@ -18,7 +18,7 @@
 
 package test.org.springdoc.api.app3;
 
-import org.springdoc.core.converters.PageableAsQueryParam;
+import org.springdoc.data.rest.converters.PageableAsQueryParam;
 
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.GetMapping;

File: springdoc-openapi-kotlin/src/main/java/org/springdoc/kotlin/KotlinCoroutinesReturnTypeParser.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.core;
+package org.springdoc.kotlin;
 
 import java.lang.reflect.Method;
 import java.lang.reflect.Parameter;
@@ -27,6 +27,7 @@
 import java.util.Optional;
 
 import kotlin.coroutines.Continuation;
+import org.springdoc.core.ReturnTypeParser;
 
 import org.springframework.core.MethodParameter;
 

File: springdoc-openapi-kotlin/src/main/java/org/springdoc/kotlin/SpringDocKotlinConfiguration.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.core;
+package org.springdoc.kotlin;
 
 import com.fasterxml.jackson.module.kotlin.KotlinModule;
 import io.swagger.v3.core.util.Json;

File: springdoc-openapi-security/src/main/java/org/springdoc/security/SpringDocSecurityConfiguration.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.core;
+package org.springdoc.security;
 
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: springdoc-openapi-security/src/main/java/org/springdoc/security/SpringSecurityOAuth2Provider.java
Patch:
@@ -16,10 +16,12 @@
  *
  */
 
-package org.springdoc.core;
+package org.springdoc.security;
 
 import java.util.Map;
 
+import org.springdoc.core.SecurityOAuth2Provider;
+
 import org.springframework.security.oauth2.provider.endpoint.FrameworkEndpoint;
 import org.springframework.security.oauth2.provider.endpoint.FrameworkEndpointHandlerMapping;
 import org.springframework.web.method.HandlerMethod;

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerConfig.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.ui;
+package org.springdoc.webmvc.ui;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.springdoc.core.SpringDocConfigProperties;

File: springdoc-openapi-ui/src/main/java/org/springdoc/webmvc/ui/SwaggerIndexTransformer.java
Patch:
@@ -16,14 +16,15 @@
  *
  */
 
-package org.springdoc.ui;
+package org.springdoc.webmvc.ui;
 
 import java.io.IOException;
 
 import javax.servlet.http.HttpServletRequest;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.springdoc.core.SwaggerUiOAuthProperties;
+import org.springdoc.ui.AbstractSwaggerIndexTransformer;
 
 import org.springframework.core.io.Resource;
 import org.springframework.util.AntPathMatcher;

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/api/MultipleOpenApiResource.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.api;
+package org.springdoc.webflux.api;
 
 import java.util.List;
 import java.util.Map;

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/api/OpenApiResource.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.api;
+package org.springdoc.webflux.api;
 
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -30,6 +30,7 @@
 import io.swagger.v3.core.util.Yaml;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.models.OpenAPI;
+import org.springdoc.api.AbstractOpenApiResource;
 import org.springdoc.core.AbstractRequestBuilder;
 import org.springdoc.core.GenericResponseBuilder;
 import org.springdoc.core.OpenAPIBuilder;

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/webflux/core/converters/WebFluxSupportConverter.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.core.converters;
+package org.springdoc.webflux.core.converters;
 
 import java.util.Iterator;
 

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerConfig.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.ui;
+package org.springdoc.webflux.ui;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.springdoc.core.SpringDocConfiguration;

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/webflux/ui/SwaggerIndexTransformer.java
Patch:
@@ -16,10 +16,12 @@
  *
  */
 
-package org.springdoc.ui;
+package org.springdoc.webflux.ui;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.springdoc.core.SwaggerUiOAuthProperties;
+import org.springdoc.ui.AbstractSwaggerIndexTransformer;
+import org.springdoc.ui.SpringDocUIException;
 import reactor.core.publisher.Mono;
 
 import org.springframework.core.io.Resource;

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/AbstractSpringDocTest.java
Patch:
@@ -26,11 +26,11 @@
 import nonapi.io.github.classgraph.utils.FileUtils;
 import org.springdoc.core.SpringDocConfigProperties;
 import org.springdoc.core.SpringDocConfiguration;
-import org.springdoc.core.SpringDocWebFluxConfiguration;
+import org.springdoc.webflux.core.SpringDocWebFluxConfiguration;
 import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springdoc.core.SwaggerUiOAuthProperties;
-import org.springdoc.ui.SwaggerConfig;
-import org.springdoc.ui.SwaggerWelcome;
+import org.springdoc.webflux.ui.SwaggerConfig;
+import org.springdoc.webflux.ui.SwaggerWelcome;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/ActuatorProvider.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.api;
+package org.springdoc.webmvc.api;
 
 import java.util.Map;
 

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/MultipleOpenApiResource.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.api;
+package org.springdoc.webmvc.api;
 
 import java.util.List;
 import java.util.Map;

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/webmvc/api/OpenApiResource.java
Patch:
@@ -16,7 +16,7 @@
  *
  */
 
-package org.springdoc.api;
+package org.springdoc.webmvc.api;
 
 import java.util.HashSet;
 import java.util.LinkedHashMap;
@@ -33,6 +33,7 @@
 import io.swagger.v3.core.util.Yaml;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.models.OpenAPI;
+import org.springdoc.api.AbstractOpenApiResource;
 import org.springdoc.core.AbstractRequestBuilder;
 import org.springdoc.core.GenericResponseBuilder;
 import org.springdoc.core.OpenAPIBuilder;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app94/SpringDocApp94Test.java
Patch:
@@ -27,8 +27,8 @@
 import io.swagger.v3.oas.annotations.responses.ApiResponses;
 import io.swagger.v3.oas.annotations.tags.Tag;
 import org.apache.commons.lang3.RandomStringUtils;
-import org.springdoc.api.ActuatorProvider;
-import org.springdoc.api.OpenApiResource;
+import org.springdoc.webmvc.api.ActuatorProvider;
+import org.springdoc.webmvc.api.OpenApiResource;
 import org.springdoc.core.AbstractRequestBuilder;
 import org.springdoc.core.GenericResponseBuilder;
 import org.springdoc.core.OpenAPIBuilder;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GroupedOpenApi.java
Patch:
@@ -27,6 +27,8 @@
 
 import org.springframework.util.CollectionUtils;
 
+import static org.springdoc.core.Constants.GROUP_NAME_NOT_NULL;
+
 public class GroupedOpenApi {
 
 	private final String group;
@@ -42,7 +44,7 @@ public class GroupedOpenApi {
 	private final List<String> pathsToExclude;
 
 	private GroupedOpenApi(Builder builder) {
-		this.group = Objects.requireNonNull(builder.group, "group");
+		this.group = Objects.requireNonNull(builder.group, GROUP_NAME_NOT_NULL);
 		this.pathsToMatch = builder.pathsToMatch;
 		this.packagesToScan = builder.packagesToScan;
 		this.packagesToExclude = builder.packagesToExclude;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfigProperties.java
Patch:
@@ -29,7 +29,7 @@
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
 
 @Configuration
-@ConfigurationProperties(prefix = "springdoc")
+@ConfigurationProperties(prefix = Constants.SPRINGDOC_PREFIX)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 public class SpringDocConfigProperties {
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigProperties.java
Patch:
@@ -37,6 +37,7 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.util.CollectionUtils;
 
+import static org.springdoc.core.Constants.GROUP_NAME_NOT_NULL;
 import static org.springdoc.core.Constants.SPRINGDOC_SWAGGER_UI_ENABLED;
 import static org.springdoc.core.Constants.SWAGGER_UI_OAUTH_REDIRECT_URL;
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
@@ -415,11 +416,13 @@ public SwaggerUrl() {
 		}
 
 		public SwaggerUrl(String group, String url) {
+			Objects.requireNonNull(group, GROUP_NAME_NOT_NULL);
 			this.url = url;
 			this.name = group;
 		}
 
 		public SwaggerUrl(String group) {
+			Objects.requireNonNull(group, GROUP_NAME_NOT_NULL);
 			this.name = group;
 		}
 

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/MultipleOpenApiWebFluxConfiguration.java
Patch:
@@ -23,11 +23,11 @@
 import org.springdoc.api.MultipleOpenApiResource;
 
 import org.springframework.beans.factory.ObjectFactory;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping;
 
@@ -36,8 +36,8 @@
 
 @Configuration
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
-@ConditionalOnBean(GroupedOpenApi.class)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
+@Conditional(MultipleOpenApiSupportCondition.class)
 public class MultipleOpenApiWebFluxConfiguration {
 
 	@Bean

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/MultipleOpenApiSupportConfiguration.java
Patch:
@@ -25,11 +25,11 @@
 import org.springdoc.api.MultipleOpenApiResource;
 
 import org.springframework.beans.factory.ObjectFactory;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping;
 
@@ -38,8 +38,8 @@
 
 @Configuration
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
-@ConditionalOnBean(GroupedOpenApi.class)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
+@Conditional(MultipleOpenApiSupportCondition.class)
 public class MultipleOpenApiSupportConfiguration {
 
 	@Bean

File: springdoc-openapi-common/src/main/java/org/springdoc/core/ReturnTypeParser.java
Patch:
@@ -21,13 +21,14 @@
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 
+import org.springframework.core.GenericTypeResolver;
 import org.springframework.core.MethodParameter;
 
 public interface ReturnTypeParser {
 
 	default Type getReturnType(MethodParameter methodParameter) {
 		if (methodParameter.getGenericParameterType() instanceof ParameterizedType)
-			return methodParameter.getGenericParameterType();
+			return GenericTypeResolver.resolveType(methodParameter.getGenericParameterType(),methodParameter.getContainingClass());
 		return methodParameter.getParameterType();
 	}
 }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocPropertiesUtils.java
Patch:
@@ -46,7 +46,7 @@ static void put(final String name, final Boolean value, final Map<String, Object
 	}
 
 	static void put(final String name, final String value, final Map<String, Object> params) {
-		if (!StringUtils.isEmpty(value)) {
+		if (StringUtils.isNotEmpty(value)) {
 			params.put(name, value);
 		}
 	}

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerWelcome.java
Patch:
@@ -65,8 +65,8 @@ public SwaggerWelcome(SwaggerUiConfigProperties swaggerUiConfig, SpringDocConfig
 	public String redirectToUi(HttpServletRequest request) {
 		buildConfigUrl(request.getContextPath(), ServletUriComponentsBuilder.fromCurrentContextPath());
 		String sbUrl = REDIRECT_URL_PREFIX + this.uiRootPath + SWAGGER_UI_URL;
-		UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromUriString(sbUrl);
-		return uriBuilder.queryParam(SwaggerUiConfigProperties.CONFIG_URL_PROPERTY, swaggerUiConfig.getConfigUrl()).build().encode().toString();
+		UriComponentsBuilder uriBuilder = getUriComponentsBuilder(sbUrl);
+		return uriBuilder.build().encode().toString();
 	}
 
 	@Operation(hidden = true)

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/ui/SwaggerWelcome.java
Patch:
@@ -66,13 +66,13 @@ public SwaggerWelcome(SwaggerUiConfigProperties swaggerUiConfig, SpringDocConfig
 	public Mono<Void> redirectToUi(ServerHttpRequest request, ServerHttpResponse response) {
 		String contextPath = this.fromCurrentContextPath(request);
 		String sbUrl = this.buildUrl(contextPath, this.uiRootPath + springDocConfigProperties.getWebjars().getPrefix() + SWAGGER_UI_URL);
-		UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromUriString(sbUrl);
-		uriBuilder.queryParam(SwaggerUiConfigProperties.CONFIG_URL_PROPERTY, swaggerUiConfig.getConfigUrl());
+		UriComponentsBuilder uriBuilder = getUriComponentsBuilder(sbUrl);
 		response.setStatusCode(HttpStatus.TEMPORARY_REDIRECT);
 		response.getHeaders().setLocation(URI.create(uriBuilder.build().encode().toString()));
 		return response.setComplete();
 	}
 
+
 	@Operation(hidden = true)
 	@GetMapping(value = SWAGGER_CONFIG_URL, produces = MediaType.APPLICATION_JSON_VALUE)
 	@ResponseBody

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RequestBodyBuilder.java
Patch:
@@ -148,6 +148,7 @@ private void buildContent(RequestBody requestBody, MethodAttributes methodAttrib
 			if (content.get(value) != null) {
 				mediaTypeObject.setExample(content.get(value).getExample());
 				mediaTypeObject.setExamples(content.get(value).getExamples());
+				mediaTypeObject.setEncoding(content.get(value).getEncoding());
 			}
 			content.addMediaType(value, mediaTypeObject);
 		}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RequestBodyBuilder.java
Patch:
@@ -148,6 +148,7 @@ private void buildContent(RequestBody requestBody, MethodAttributes methodAttrib
 			if (content.get(value) != null) {
 				mediaTypeObject.setExample(content.get(value).getExample());
 				mediaTypeObject.setExamples(content.get(value).getExamples());
+				mediaTypeObject.setEncoding(content.get(value).getEncoding());
 			}
 			content.addMediaType(value, mediaTypeObject);
 		}

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/app7/SpringDocApp7Test.java
Patch:
@@ -18,9 +18,10 @@
 
 package test.org.springdoc.api.app7;
 
-import org.springframework.boot.autoconfigure.SpringBootApplication;
 import test.org.springdoc.api.AbstractSpringDocTest;
 
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
 public class SpringDocApp7Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication

File: springdoc-openapi-security/src/main/java/org/springdoc/core/SpringDocSecurityConfiguration.java
Patch:
@@ -43,7 +43,7 @@ public class SpringDocSecurityConfiguration {
 	@ConditionalOnBean(FrameworkEndpointHandlerMapping.class)
 	class SpringSecurityOAuth2ProviderConfiguration {
 		@Bean
-		public SpringSecurityOAuth2Provider springSecurityOAuth2Provider(FrameworkEndpointHandlerMapping oauth2EndpointHandlerMapping) {
+		SpringSecurityOAuth2Provider springSecurityOAuth2Provider(FrameworkEndpointHandlerMapping oauth2EndpointHandlerMapping) {
 			return new SpringSecurityOAuth2Provider(oauth2EndpointHandlerMapping);
 		}
 	}

File: springdoc-openapi-security/src/test/java/test/org/springdoc/api/app2/User.java
Patch:
@@ -1,10 +1,10 @@
 package test.org.springdoc.api.app2;
 
+import java.util.Collection;
+
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.GrantedAuthority;
 
-import java.util.Collection;
-
 public class User implements Authentication {
     @Override
     public Collection<? extends GrantedAuthority> getAuthorities() {

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerConfig.java
Patch:
@@ -66,13 +66,13 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {
 
 	@Bean
 	@ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
-	public SwaggerWelcome swaggerWelcome(SwaggerUiConfigProperties swaggerUiConfig, SpringDocConfigProperties springDocConfigProperties) {
+	SwaggerWelcome swaggerWelcome(SwaggerUiConfigProperties swaggerUiConfig, SpringDocConfigProperties springDocConfigProperties) {
 		return new SwaggerWelcome(swaggerUiConfig, springDocConfigProperties);
 	}
 
 	@Bean
 	@ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
-	public SwaggerIndexTransformer indexPageTransformer(SwaggerUiOAuthProperties swaggerUiOAuthProperties, ObjectMapper objectMapper) {
+	SwaggerIndexTransformer indexPageTransformer(SwaggerUiOAuthProperties swaggerUiOAuthProperties, ObjectMapper objectMapper) {
 		return new SwaggerIndexTransformer(swaggerUiOAuthProperties, objectMapper);
 	}
 }

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/MultipleOpenApiWebFluxConfiguration.java
Patch:
@@ -42,7 +42,7 @@ public class MultipleOpenApiWebFluxConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
+	MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,
 			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping, SpringDocConfigProperties springDocConfigProperties) {

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/SpringDocWebFluxConfiguration.java
Patch:
@@ -45,7 +45,7 @@ public class SpringDocWebFluxConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public OpenApiResource openApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
+	OpenApiResource openApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
 			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping,
 			Optional<List<OpenApiCustomiser>> openApiCustomisers, SpringDocConfigProperties springDocConfigProperties) {
@@ -57,7 +57,7 @@ public OpenApiResource openApiResource(OpenAPIBuilder openAPIBuilder, AbstractRe
 
 	@Bean
 	@ConditionalOnMissingBean
-	public RequestBuilder requestBuilder(GenericParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
+	RequestBuilder requestBuilder(GenericParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
 			OperationBuilder operationBuilder, Optional<List<OperationCustomizer>> operationCustomizers,
 			Optional<List<ParameterCustomizer>> parameterCustomizers,
 			LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
@@ -67,7 +67,7 @@ public RequestBuilder requestBuilder(GenericParameterBuilder parameterBuilder, R
 
 	@Bean
 	@ConditionalOnMissingBean
-	public GenericResponseBuilder responseBuilder(OperationBuilder operationBuilder, List<ReturnTypeParser> returnTypeParsers, SpringDocConfigProperties springDocConfigProperties, PropertyResolverUtils propertyResolverUtils) {
+	GenericResponseBuilder responseBuilder(OperationBuilder operationBuilder, List<ReturnTypeParser> returnTypeParsers, SpringDocConfigProperties springDocConfigProperties, PropertyResolverUtils propertyResolverUtils) {
 		return new GenericResponseBuilder(operationBuilder, returnTypeParsers, springDocConfigProperties, propertyResolverUtils);
 	}
 

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/ui/SwaggerConfig.java
Patch:
@@ -67,7 +67,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {
 
 	@Bean
 	@ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
-	public SwaggerIndexTransformer indexPageTransformer(SwaggerUiOAuthProperties swaggerUiOAuthProperties, ObjectMapper objectMapper) {
+	SwaggerIndexTransformer indexPageTransformer(SwaggerUiOAuthProperties swaggerUiOAuthProperties, ObjectMapper objectMapper) {
 		return new SwaggerIndexTransformer(swaggerUiOAuthProperties, objectMapper);
 	}
 }

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/MultipleOpenApiSupportConfiguration.java
Patch:
@@ -44,7 +44,7 @@ public class MultipleOpenApiSupportConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
+	MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,
 			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping,

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app102/RequestParams.java
Patch:
@@ -1,6 +1,7 @@
 package test.org.springdoc.api.app102;
 
 import io.swagger.v3.oas.annotations.Parameter;
+
 import org.springframework.lang.Nullable;
 
 public class RequestParams {

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app102/SpringDocApp102Test.java
Patch:
@@ -1,8 +1,9 @@
 package test.org.springdoc.api.app102;
 
-import org.springframework.boot.autoconfigure.SpringBootApplication;
 import test.org.springdoc.api.AbstractSpringDocTest;
 
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
 public class SpringDocApp102Test extends AbstractSpringDocTest {
 	@SpringBootApplication
 	static class SpringDocTestApp {}

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app102/TestController.java
Patch:
@@ -1,6 +1,7 @@
 package test.org.springdoc.api.app102;
 
 import org.springdoc.api.annotations.ParameterObject;
+
 import org.springframework.lang.Nullable;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestParam;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RequestBodyBuilder.java
Patch:
@@ -148,6 +148,7 @@ private void buildContent(RequestBody requestBody, MethodAttributes methodAttrib
 			if (content.get(value) != null) {
 				mediaTypeObject.setExample(content.get(value).getExample());
 				mediaTypeObject.setExamples(content.get(value).getExamples());
+				mediaTypeObject.setEncoding(content.get(value).getEncoding());
 			}
 			content.addMediaType(value, mediaTypeObject);
 		}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -160,8 +160,8 @@ public Operation build(HandlerMethod handlerMethod, RequestMethod requestMethod,
 		// requests
 		String[] pNames = this.localSpringDocParameterNameDiscoverer.getParameterNames(handlerMethod.getMethod());
 		MethodParameter[] parameters = handlerMethod.getMethodParameters();
-		String[] reflectionParametersNames = Arrays.stream(parameters).map(MethodParameter::getParameterName).toArray(String[]::new);
-		if (pNames == null)
+		String[] reflectionParametersNames = Arrays.stream(handlerMethod.getMethod().getParameters()).map(java.lang.reflect.Parameter::getName).toArray(String[]::new);
+		if (pNames == null || Arrays.stream(pNames).anyMatch(Objects::isNull))
 			pNames = reflectionParametersNames;
 		parameters = DelegatingMethodParameter.customize(pNames, parameters);
 		RequestBodyInfo requestBodyInfo = new RequestBodyInfo();

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -160,8 +160,8 @@ public Operation build(HandlerMethod handlerMethod, RequestMethod requestMethod,
 		// requests
 		String[] pNames = this.localSpringDocParameterNameDiscoverer.getParameterNames(handlerMethod.getMethod());
 		MethodParameter[] parameters = handlerMethod.getMethodParameters();
-		String[] reflectionParametersNames = Arrays.stream(parameters).map(MethodParameter::getParameterName).toArray(String[]::new);
-		if (pNames == null)
+		String[] reflectionParametersNames = Arrays.stream(handlerMethod.getMethod().getParameters()).map(java.lang.reflect.Parameter::getName).toArray(String[]::new);
+		if (pNames == null || Arrays.stream(pNames).anyMatch(Objects::isNull))
 			pNames = reflectionParametersNames;
 		parameters = DelegatingMethodParameter.customize(pNames, parameters);
 		RequestBodyInfo requestBodyInfo = new RequestBodyInfo();

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/core/converters/PageableAsQueryParam.java
Patch:
@@ -31,10 +31,10 @@
 
 /**
  * @deprecated Use {@link org.springdoc.api.annotations.ParameterObject} annotation
- * 		on {@link org.springframework.data.domain.Pageable} method parameter instead.
+ * on {@link org.springframework.data.domain.Pageable} method parameter instead.
  */
 @Deprecated
-@Target({ ElementType.METHOD, ElementType.ANNOTATION_TYPE })
+@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 @Parameter(in = ParameterIn.QUERY
 		, description = "Zero-based page index (0..N)"

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -257,7 +257,7 @@ protected boolean isParamToIgnore(MethodParameter parameter) {
 			return true;
 		if (parameter.getParameterAnnotation(PathVariable.class) != null || parameter.getParameterAnnotation(RequestParam.class) != null)
 			return false;
-		return PARAM_TYPES_TO_IGNORE.contains(parameter.getParameterType());
+		return PARAM_TYPES_TO_IGNORE.stream().anyMatch(paramToIgnore -> paramToIgnore.isAssignableFrom(parameter.getParameterType()));
 	}
 
 	private void setParams(Operation operation, List<Parameter> operationParameters, RequestBodyInfo requestBodyInfo) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -257,7 +257,7 @@ protected boolean isParamToIgnore(MethodParameter parameter) {
 			return true;
 		if (parameter.getParameterAnnotation(PathVariable.class) != null || parameter.getParameterAnnotation(RequestParam.class) != null)
 			return false;
-		return PARAM_TYPES_TO_IGNORE.contains(parameter.getParameterType());
+		return PARAM_TYPES_TO_IGNORE.stream().anyMatch(paramToIgnore -> paramToIgnore.isAssignableFrom(parameter.getParameterType()));
 	}
 
 	private void setParams(Operation operation, List<Parameter> operationParameters, RequestBodyInfo requestBodyInfo) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -279,8 +279,7 @@ private Parameter buildParams(ParameterInfo parameterInfo, Components components
 
 		}
 		else if (requestParam != null && !parameterBuilder.isFile(parameterInfo.getParameter())) {
-			boolean isOptional = Optional.class.equals(methodParameter.getParameterType());
-			requestInfo = new RequestInfo(ParameterIn.QUERY.toString(), requestParam.value(), requestParam.required() && !isOptional,
+			requestInfo = new RequestInfo(ParameterIn.QUERY.toString(), requestParam.value(), requestParam.required() && !methodParameter.isOptional(),
 					requestParam.defaultValue());
 			parameter = buildParam(parameterInfo, components, requestInfo, jsonView);
 		}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -279,8 +279,7 @@ private Parameter buildParams(ParameterInfo parameterInfo, Components components
 
 		}
 		else if (requestParam != null && !parameterBuilder.isFile(parameterInfo.getParameter())) {
-			boolean isOptional = Optional.class.equals(methodParameter.getParameterType());
-			requestInfo = new RequestInfo(ParameterIn.QUERY.toString(), requestParam.value(), requestParam.required() && !isOptional,
+			requestInfo = new RequestInfo(ParameterIn.QUERY.toString(), requestParam.value(), requestParam.required() && !methodParameter.isOptional(),
 					requestParam.defaultValue());
 			parameter = buildParam(parameterInfo, components, requestInfo, jsonView);
 		}

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app99/HelloController.java
Patch:
@@ -1,9 +1,8 @@
 package test.org.springdoc.api.app99;
 
-import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.responses.ApiResponse;
 import io.swagger.v3.oas.annotations.responses.ApiResponses;
+
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app99/SpringDocApp99Test.java
Patch:
@@ -19,9 +19,10 @@
 package test.org.springdoc.api.app99;
 
 
+import test.org.springdoc.api.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.ActiveProfiles;
-import test.org.springdoc.api.AbstractSpringDocTest;
 
 @ActiveProfiles("99")
 public class SpringDocApp99Test extends AbstractSpringDocTest {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/AdditionalModelsConverter.java
Patch:
@@ -43,7 +43,7 @@ public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterato
 			if(modelToSchemaMap.containsKey(cls))
 				return modelToSchemaMap.get(cls);
 			if(modelToClassMap.containsKey(cls))
-				type = new AnnotatedType(modelToClassMap.get(cls));
+				type = new AnnotatedType(modelToClassMap.get(cls)).resolveAsRef(true);
 		}
 		if (chain.hasNext()) {
 			return chain.next().resolve(type, context, chain);

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/core/SpringDocDataRestConfiguration.java
Patch:
@@ -95,7 +95,7 @@ public OpenApiCustomiser linksSchemaCustomiser(Optional<RepositoryRestConfigurat
 			Json.mapper().addMixIn(RepresentationModel.class, RepresentationModelLinksOASMixin.class);
 
 			ResolvedSchema resolvedLinkSchema = ModelConverters.getInstance()
-					.resolveAsResolvedSchema(new AnnotatedType(Link.class));
+					.resolveAsResolvedSchema(new AnnotatedType(Link.class).resolveAsRef(true));
 
 			return openApi -> openApi
 					.schema("Link", resolvedLinkSchema.schema)

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/core/converters/Pageable.java
Patch:
@@ -37,6 +37,7 @@ public class Pageable {
 	@Max(2000)
 	private int size;
 
+	@NotNull
 	private List<String> sort;
 
 	public Pageable(@NotNull @Min(0) int page, @NotNull @Min(1) @Max(2000) int size, List<String> sort) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocAnnotationsUtils.java
Patch:
@@ -28,7 +28,6 @@
 import io.swagger.v3.core.converter.ModelConverters;
 import io.swagger.v3.core.converter.ResolvedSchema;
 import io.swagger.v3.core.util.AnnotationsUtils;
-import io.swagger.v3.core.util.PrimitiveType;
 import io.swagger.v3.oas.annotations.media.ExampleObject;
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.media.Content;

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app8/SpringDocApp8Test.java
Patch:
@@ -23,11 +23,8 @@
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.TestPropertySource;
-import org.springframework.test.web.servlet.MvcResult;
 
 import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app93/BaseController.java
Patch:
@@ -7,7 +7,7 @@
 public abstract class BaseController<TClientModel extends BaseClientModel> {
 	@Operation
 	@GetMapping
-	TClientModel get() {
+	TClientModel get(TClientModel param) {
 		return null;
 	}
 }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GroupedOpenApi.java
Patch:
@@ -48,7 +48,6 @@ private GroupedOpenApi(Builder builder) {
 		this.packagesToExclude=builder.packagesToExclude;
 		this.pathsToExclude=builder.pathsToExclude;
 		this.openApiCustomisers = Objects.requireNonNull(builder.openApiCustomisers);
-		SwaggerUiConfigProperties.addGroup(this.group);
 		if (CollectionUtils.isEmpty(this.pathsToMatch)
 				&& CollectionUtils.isEmpty(this.packagesToScan)
 				&& CollectionUtils.isEmpty(this.pathsToExclude)

File: springdoc-openapi-common/src/main/java/org/springdoc/ui/AbstractSwaggerWelcome.java
Patch:
@@ -57,6 +57,7 @@ public AbstractSwaggerWelcome(SwaggerUiConfigProperties swaggerUiConfig, SpringD
 
 	@Override
 	public void afterPropertiesSet() {
+		springDocConfigProperties.getGroupConfigs().forEach( groupConfig -> swaggerUiConfig.addGroup(groupConfig.getGroup()));
 		calculateUiRootPath();
 	}
 
@@ -73,14 +74,14 @@ protected void buildConfigUrl(String contextPath, UriComponentsBuilder uriCompon
 			String url = buildUrl(contextPath, apiDocsUrl);
 			String swaggerConfigUrl = url + DEFAULT_PATH_SEPARATOR + SWAGGGER_CONFIG_FILE;
 			swaggerUiConfig.setConfigUrl(swaggerConfigUrl);
-			if (SwaggerUiConfigProperties.getSwaggerUrls().isEmpty()) {
+			if (swaggerUiConfig.getUrls().isEmpty()) {
 				if (StringUtils.isEmpty(swaggerUiUrl))
 					swaggerUiConfig.setUrl(url);
 				else
 					swaggerUiConfig.setUrl(swaggerUiUrl);
 			}
 			else
-				SwaggerUiConfigProperties.addUrl(url);
+				swaggerUiConfig.addUrl(url);
 		}
 		calculateOauth2RedirectUrl(uriComponentsBuilder);
 	}

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springdoc.api.AbstractOpenApiResource;
 import org.springdoc.core.Constants;
 
 import org.springframework.beans.factory.annotation.Autowired;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app95/HelloController.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
+
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app95/SpringDocApp95Test.java
Patch:
@@ -19,9 +19,10 @@
 package test.org.springdoc.api.app95;
 
 
+import test.org.springdoc.api.AbstractSpringDocTest;
+
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.test.context.ActiveProfiles;
-import test.org.springdoc.api.AbstractSpringDocTest;
 
 @ActiveProfiles("95")
 public class SpringDocApp95Test extends AbstractSpringDocTest {

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app97/HelloController.java
Patch:
@@ -19,20 +19,19 @@
 package test.org.springdoc.api.app97;
 
 import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
 @RestController
 @RequestMapping("/api")
 public class HelloController {
 
-	@GetMapping(value = "/student/header", headers = "X-API-VERSION=1")
+	@GetMapping(value = "/student/header1", headers = "X-API-VERSION=1")
 	public StudentV1 headerV1() {
 		return new StudentV1("Bob Charlie");
 	}
 
-	@GetMapping(value = "/student/header", headers = "X-API-VERSION=2")
+	@GetMapping(value = "/student/header2", headers = "X-API-VERSION=2")
 	public StudentV2 headerV2() {
 		return new StudentV2( "Charlie");
 	}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -184,7 +184,7 @@ else if (!RequestMethod.GET.equals(requestMethod)) {
 					requestBodyBuilder.calculateRequestBodyInfo(components, handlerMethod, methodAttributes, i,
 							parameterInfo, requestBodyInfo);
 				}
-				parameter = customiseParameter(parameter, parameterInfo, handlerMethod);
+				customiseParameter(parameter, parameterInfo, handlerMethod);
 			}
 		}
 

File: springdoc-openapi-kotlin/src/main/java/org/springdoc/core/KotlinCoroutinesReturnTypeParser.java
Patch:
@@ -31,7 +31,7 @@
 public class KotlinCoroutinesReturnTypeParser implements ReturnTypeParser {
 
 	@Override
-	public Type getReturnType(Method method) {
+	public Type getReturnType(Method method, Class<?>  clazz) {
 		Type returnType = Object.class;
 		Optional<Parameter> continuationParameter = Arrays.stream(method.getParameters())
 				.filter(parameter -> parameter.getType().getCanonicalName().equals(Continuation.class.getCanonicalName()))

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -177,8 +177,10 @@ public Operation build(Components components, HandlerMethod handlerMethod, Reque
 				parameter = parameterBuilder.mergeParameter(operationParameters, parameter);
 				if (isValidParameter(parameter)) {
 					applyBeanValidatorAnnotations(parameter, Arrays.asList(parameters[i].getAnnotations()));
+					parameter = customiseParameter(parameter, parameterInfo, handlerMethod);
 				}
 				else if (!RequestMethod.GET.equals(requestMethod)) {
+					parameter = customiseParameter(parameter, parameterInfo, handlerMethod);
 					if (operation.getRequestBody() != null)
 						requestBodyInfo.setRequestBody(operation.getRequestBody());
 					requestBodyBuilder.calculateRequestBodyInfo(components, handlerMethod, methodAttributes, i,
@@ -293,7 +295,6 @@ else if (pathVar != null) {
 			parameter = this.buildParam(QUERY_PARAM, components, parameterInfo, Boolean.TRUE, null, jsonView);
 		}
 
-		parameter = customiseParameter(parameter, parameterInfo, handlerMethod);
 		return parameter;
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocAnnotationsUtils.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.commons.lang3.StringUtils;
 
 @SuppressWarnings({ "rawtypes" })
-class SpringDocAnnotationsUtils extends AnnotationsUtils {
+public class SpringDocAnnotationsUtils extends AnnotationsUtils {
 
 	public static Schema resolveSchemaFromType(Class<?> schemaImplementation, Components components,
 			JsonView jsonView) {
@@ -160,4 +160,4 @@ private static MediaType getMediaType(Schema schema, Components components, Json
 		return mediaType;
 	}
 
-}
\ No newline at end of file
+}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericResponseBuilder.java
Patch:
@@ -255,7 +255,7 @@ private Type getReturnType(Method method) {
 		return returnType;
 	}
 
-	private Schema<?> calculateSchema(Components components, Type returnType, JsonView jsonView) {
+	public Schema<?> calculateSchema(Components components, Type returnType, JsonView jsonView) {
 		if (isVoid(returnType)) {
 			// if void, no content
 			return null;

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/AbstractSpringDocTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.springdoc.core.SpringDocConfiguration;
 import org.springdoc.core.SpringDocWebFluxConfiguration;
 import org.springdoc.core.SwaggerUiConfigProperties;
+import org.springdoc.ui.SwaggerConfig;
 import org.springdoc.ui.SwaggerWelcome;
 
 import org.springframework.beans.factory.annotation.Autowired;
@@ -33,7 +34,7 @@
 
 @ActiveProfiles("test")
 @WebFluxTest
-@ContextConfiguration(classes = { SpringDocConfiguration.class, SpringDocConfigProperties.class, SpringDocWebFluxConfiguration.class, SwaggerUiConfigProperties.class, SwaggerWelcome.class })
+@ContextConfiguration(classes = { SpringDocConfiguration.class, SpringDocConfigProperties.class, SpringDocWebFluxConfiguration.class, SwaggerUiConfigProperties.class, SwaggerConfig.class, SwaggerWelcome.class })
 public abstract class AbstractSpringDocTest {
 
 

File: springdoc-openapi-kotlin/src/test/java/test/org/springdoc/api/app1/SpringDocTestApp.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.context.annotation.ComponentScan;
 
 @SpringBootApplication
-@ComponentScan(basePackages = { "org.springdoc", "test.org.springdoc.api.app1" })
+@ComponentScan(basePackages = { "org.springdoc.core", "test.org.springdoc.api.app1" })
 public class SpringDocTestApp {
 	public static void main(String[] args) {
 		SpringApplication.run(SpringDocTestApp.class, args);

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/MultipleOpenApiWebFluxConfiguration.java
Patch:
@@ -36,7 +36,6 @@
 
 @Configuration
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
-@ConditionalOnBean(GroupedOpenApi.class)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 public class MultipleOpenApiWebFluxConfiguration {
 

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app3/SpringDocTestApp.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.context.annotation.ComponentScan;
 
 @SpringBootApplication
-@ComponentScan(basePackages = { "org.springdoc", "test.org.springdoc.api.app3" })
+@ComponentScan(basePackages = { "org.springdoc.core", "test.org.springdoc.api.app3" })
 public class SpringDocTestApp {
 	public static void main(String[] args) {
 		SpringApplication.run(SpringDocTestApp.class, args);

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app39/SpringDocTestApp.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.context.annotation.ComponentScan;
 
 @SpringBootApplication
-@ComponentScan(basePackages = { "org.springdoc", "test.org.springdoc.api.app39" })
+@ComponentScan(basePackages = { "org.springdoc.core", "test.org.springdoc.api.app39" })
 public class SpringDocTestApp {
 
 	public static void main(String[] args) {

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app4/SpringDocTestApp.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.context.annotation.ComponentScan;
 
 @SpringBootApplication
-@ComponentScan(basePackages = { "org.springdoc", "test.org.springdoc.api.app4" })
+@ComponentScan(basePackages = { "org.springdoc.core", "test.org.springdoc.api.app4" })
 public class SpringDocTestApp {
 	public static void main(String[] args) {
 		SpringApplication.run(SpringDocTestApp.class, args);

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app5/SpringDocTestApp.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.context.annotation.ComponentScan;
 
 @SpringBootApplication
-@ComponentScan(basePackages = { "org.springdoc", "test.org.springdoc.api.app5" })
+@ComponentScan(basePackages = { "org.springdoc.core", "test.org.springdoc.api.app5" })
 public class SpringDocTestApp {
 	public static void main(String[] args) {
 		SpringApplication.run(SpringDocTestApp.class, args);

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app63/SpringDocApp63Test.java
Patch:
@@ -38,6 +38,6 @@ public static void afterClass() {
 	}
 
 	@SpringBootApplication
-	@ComponentScan(basePackages = { "org.springdoc", "test.org.springdoc.api.app63" })
+	@ComponentScan(basePackages = { "org.springdoc.core", "test.org.springdoc.api.app63" })
 	static class SpringDocTestApp {}
-}
\ No newline at end of file
+}

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app64/SpringDocApp64Test.java
Patch:
@@ -38,6 +38,6 @@ public static void afterClass() {
 	}
 
 	@SpringBootApplication
-	@ComponentScan(basePackages = { "org.springdoc", "test.org.springdoc.api.app64" })
+	@ComponentScan(basePackages = { "org.springdoc.core", "test.org.springdoc.api.app64" })
 	static class SpringDocTestApp {}
 }

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app65/SpringDocApp65Test.java
Patch:
@@ -26,6 +26,6 @@
 public class SpringDocApp65Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication
-	@ComponentScan(basePackages = { "org.springdoc", "test.org.springdoc.api.app65" })
+	@ComponentScan(basePackages = { "org.springdoc.core", "test.org.springdoc.api.app65" })
 	static class SpringDocTestApp {}
 }

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app67/SpringDocApp67Test.java
Patch:
@@ -28,7 +28,7 @@
 public class SpringDocApp67Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication
-	@ComponentScan(basePackages = { "org.springdoc", "test.org.springdoc.api.app67" })
+	@ComponentScan(basePackages = { "org.springdoc.core", "test.org.springdoc.api.app67" })
 	static class SpringDocTestApp {}
 
 	@Test

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app91/SpringDocApp91Test.java
Patch:
@@ -22,7 +22,9 @@
 import test.org.springdoc.api.AbstractSpringDocTest;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.test.context.TestPropertySource;
 
+@TestPropertySource(properties = "springdoc.override-with-generic-response=false")
 public class SpringDocApp91Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication

File: springdoc-openapi-kotlin/src/main/java/org/springdoc/core/SpringDocKotlinConfiguration.java
Patch:
@@ -18,6 +18,8 @@
 
 package org.springdoc.core;
 
+import com.fasterxml.jackson.module.kotlin.KotlinModule;
+import io.swagger.v3.core.util.Json;
 import kotlin.Deprecated;
 import kotlin.coroutines.Continuation;
 
@@ -36,6 +38,7 @@ public class SpringDocKotlinConfiguration {
 	static {
 		getConfig().addRequestWrapperToIgnore(Continuation.class)
 		.addDeprecatedType(Deprecated.class);
+		Json.mapper().registerModule(new KotlinModule());
 	}
 
 	@Bean

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/SpringDocWebFluxConfiguration.java
Patch:
@@ -63,8 +63,8 @@ public RequestBuilder requestBuilder(GenericParameterBuilder parameterBuilder, R
 
 	@Bean
 	@ConditionalOnMissingBean
-	public GenericResponseBuilder responseBuilder(OperationBuilder operationBuilder, List<ReturnTypeParser> returnTypeParsers) {
-		return new GenericResponseBuilder(operationBuilder, returnTypeParsers);
+	public GenericResponseBuilder responseBuilder(OperationBuilder operationBuilder, List<ReturnTypeParser> returnTypeParsers, SpringDocConfigProperties springDocConfigProperties) {
+		return new GenericResponseBuilder(operationBuilder, returnTypeParsers, springDocConfigProperties);
 	}
 
 	@Bean

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/SpringDocWebMvcConfiguration.java
Patch:
@@ -69,8 +69,8 @@ public RequestBuilder requestBuilder(GenericParameterBuilder parameterBuilder, R
 
 	@Bean
 	@ConditionalOnMissingBean
-	public GenericResponseBuilder responseBuilder(OperationBuilder operationBuilder, List<ReturnTypeParser> returnTypeParsers) {
-		return new GenericResponseBuilder(operationBuilder, returnTypeParsers);
+	public GenericResponseBuilder responseBuilder(OperationBuilder operationBuilder, List<ReturnTypeParser> returnTypeParsers, SpringDocConfigProperties springDocConfigProperties) {
+		return new GenericResponseBuilder(operationBuilder, returnTypeParsers, springDocConfigProperties);
 	}
 
 	@Configuration

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app1/SpringDocApp1Test.java
Patch:
@@ -27,7 +27,9 @@
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Bean;
+import org.springframework.test.context.TestPropertySource;
 
+@TestPropertySource(properties = "springdoc.default-produces-media-type=application/json")
 public class SpringDocApp1Test extends AbstractSpringDocTest {
 
 	@SpringBootApplication

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RequestBodyBuilder.java
Patch:
@@ -150,8 +150,10 @@ private void buildContent(RequestBody requestBody, MethodAttributes methodAttrib
 		for (String value : methodAttributes.getMethodConsumes()) {
 			io.swagger.v3.oas.models.media.MediaType mediaTypeObject = new io.swagger.v3.oas.models.media.MediaType();
 			mediaTypeObject.setSchema(schema);
-			if (content.get(value) != null)
+			if (content.get(value) != null) {
 				mediaTypeObject.setExample(content.get(value).getExample());
+				mediaTypeObject.setExamples(content.get(value).getExamples());
+			}
 			content.addMediaType(value, mediaTypeObject);
 		}
 		requestBody.setContent(content);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericResponseBuilder.java
Patch:
@@ -77,7 +77,7 @@ public ApiResponses build(Components components, HandlerMethod handlerMethod, Op
 		genericMapResponse.forEach(apiResponses::addApiResponse);
 		//Then use the apiResponses from documentation
 		ApiResponses apiResponsesFromDoc = operation.getResponses();
-		if (apiResponsesFromDoc != null)
+		if (!CollectionUtils.isEmpty(apiResponsesFromDoc))
 			apiResponsesFromDoc.forEach(apiResponses::addApiResponse);
 		// for each one build ApiResponse and add it to existing responses
 		// Fill api Responses
@@ -172,7 +172,7 @@ private void buildContentFromDoc(Components components, ApiResponses apiResponse
 
 	private void buildApiResponses(Components components, Method method, ApiResponses apiResponsesOp,
 			MethodAttributes methodAttributes, boolean isGeneric) {
-		if (!CollectionUtils.isEmpty(apiResponsesOp) && (apiResponsesOp.size() != genericMapResponse.size())) {
+		if (!CollectionUtils.isEmpty(apiResponsesOp) && ((apiResponsesOp.size() != genericMapResponse.size() || isGeneric))) {
 			// API Responses at operation and @ApiResponse annotation
 			for (Map.Entry<String, ApiResponse> entry : apiResponsesOp.entrySet()) {
 				String httpCode = entry.getKey();

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/core/SpringDocDataRestConfiguration.java
Patch:
@@ -28,8 +28,8 @@
 import io.swagger.v3.oas.models.media.ObjectSchema;
 import io.swagger.v3.oas.models.media.StringSchema;
 import org.springdoc.core.converters.Pageable;
-import org.springdoc.core.customizers.OpenApiCustomiser;
 import org.springdoc.core.converters.RepresentationModelLinksOASMixin;
+import org.springdoc.core.customizers.OpenApiCustomiser;
 
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -189,9 +189,6 @@ protected void calculatePath(HandlerMethod handlerMethod, String operationPath,
 				operation.setDeprecated(true);
 			}
 
-			// compute tags
-			operation = openAPIBuilder.buildTags(handlerMethod, operation, openAPI);
-
 			// Add documentation from operation annotation
 			io.swagger.v3.oas.annotations.Operation apiOperation = ReflectionUtils.getAnnotation(method,
 					io.swagger.v3.oas.annotations.Operation.class);
@@ -202,6 +199,9 @@ protected void calculatePath(HandlerMethod handlerMethod, String operationPath,
 				openAPI = operationParser.parse(components, apiOperation, operation, openAPI, methodAttributes);
 			}
 
+			// compute tags
+			operation = openAPIBuilder.buildTags(handlerMethod, operation, openAPI);
+
 			io.swagger.v3.oas.annotations.parameters.RequestBody requestBodyDoc = ReflectionUtils.getAnnotation(method,
 					io.swagger.v3.oas.annotations.parameters.RequestBody.class);
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -82,8 +82,6 @@ public final class Constants {
 
 	public static final String SWAGGER_UI_PATH = "${springdoc.swagger-ui.path:#{T(org.springdoc.core.Constants).DEFAULT_SWAGGER_UI_PATH}}";
 
-	public static final String MVC_SERVLET_PATH = "${spring.mvc.servlet.path" + NULL + "}";
-
 	public static final String DEFAULT_GROUP_NAME="springdocDefault";
 
 	public static final String GET_METHOD = "get";

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigProperties.java
Patch:
@@ -21,6 +21,7 @@
 import java.net.URL;
 import java.util.Comparator;
 import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
@@ -379,11 +380,11 @@ public boolean isValidUrl(String url) {
 	private void put(String urls, Set<SwaggerUrl> swaggerUrls, Map<String, Object> params) {
 		Comparator<SwaggerUrl> swaggerUrlComparator;
 		if (groupsOrder.isAscending())
-			swaggerUrlComparator = (h1, h2) -> h1.getName().compareTo(h2.getName());
+			swaggerUrlComparator = Comparator.comparing(SwaggerUrl::getName);
 		else
 			swaggerUrlComparator = (h1, h2) -> h2.getName().compareTo(h1.getName());
 
-		swaggerUrls = swaggerUrls.stream().sorted(swaggerUrlComparator).filter(elt -> StringUtils.isNotEmpty(elt.getUrl())).collect(Collectors.toSet());
+		swaggerUrls = swaggerUrls.stream().sorted(swaggerUrlComparator).filter(elt -> StringUtils.isNotEmpty(elt.getUrl())).collect(Collectors.toCollection(LinkedHashSet::new));
 		if (!CollectionUtils.isEmpty(swaggerUrls)) {
 			params.put(urls, swaggerUrls);
 		}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/AdditionalModelsConverter.java
Patch:
@@ -32,8 +32,9 @@
 
 public class AdditionalModelsConverter implements ModelConverter {
 
-	private static Map<Class, Class> modelToClassMap= new HashMap();
-	private static Map<Class, Schema> modelToSchemaMap= new HashMap();
+	private static final Map<Class, Class> modelToClassMap= new HashMap();
+	private static final Map<Class, Schema> modelToSchemaMap= new HashMap();
+
 	@Override
 	public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterator<ModelConverter> chain) {
 		JavaType javaType = Json.mapper().constructType(type.getType());

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/app1/HelloController.java
Patch:
@@ -32,7 +32,6 @@ public class HelloController {
 
 	@GetMapping(value = "/search", produces = { "application/xml", "application/json" })
 	public ResponseEntity<List<PersonDTO>> getAllPets(@NotNull Pageable pageable) {
-		System.out.println(pageable);
 		return null;
 	}
 

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/SpringDocWebFluxConfiguration.java
Patch:
@@ -43,7 +43,6 @@
 public class SpringDocWebFluxConfiguration {
 
 	@Bean
-	@ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 	public OpenApiResource openApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
 			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping,
@@ -55,6 +54,7 @@ public OpenApiResource openApiResource(OpenAPIBuilder openAPIBuilder, AbstractRe
 	}
 
 	@Bean
+	@ConditionalOnMissingBean
 	public RequestBuilder requestBuilder(GenericParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
 			OperationBuilder operationBuilder, Optional<List<OperationCustomizer>> operationCustomizers, Optional<List<ParameterCustomizer>> parameterCustomizers) {
 		return new RequestBuilder(parameterBuilder, requestBodyBuilder,

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -81,7 +81,7 @@ public abstract class AbstractOpenApiResource extends SpecFilter {
 
 	private final AntPathMatcher antPathMatcher = new AntPathMatcher();
 
-	private final SpringDocConfigProperties springDocConfigProperties;
+	protected final SpringDocConfigProperties springDocConfigProperties;
 
 	private static final List<Class<?>> ADDITIONAL_REST_CONTROLLERS = new ArrayList<>();
 	private static final List<Class<?>> HIDDEN_REST_CONTROLLERS = new ArrayList<>();
@@ -110,7 +110,7 @@ protected AbstractOpenApiResource(String groupName, OpenAPIBuilder openAPIBuilde
 
 	protected synchronized OpenAPI getOpenApi() {
 		OpenAPI openApi;
-		if (!computeDone || Boolean.TRUE.equals(springDocConfigProperties.getCache().getDisabled())) {
+		if (!computeDone || springDocConfigProperties.getCache().isDisabled()) {
 			Instant start = Instant.now();
 			openAPIBuilder.build();
 			Map<String, Object> restControllersMap = openAPIBuilder.getRestControllersMap();

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OpenAPIBuilder.java
Patch:
@@ -213,7 +213,7 @@ public Operation buildTags(HandlerMethod handlerMethod, Operation operation, Ope
 			operation.setTags(new ArrayList<>(tagsStr));
 		}
 
-		if (CollectionUtils.isEmpty(operation.getTags()) && Boolean.TRUE.equals(springDocConfigProperties.getAutoTagClasses())) {
+		if (CollectionUtils.isEmpty(operation.getTags()) && springDocConfigProperties.isAutoTagClasses()) {
 			operation.addTagsItem(splitCamelCase(handlerMethod.getBeanType().getSimpleName()));
 		}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/ConverterUtils.java
Patch:
@@ -48,7 +48,7 @@ public static void addResponseTypeToIgnore(Class<?> cls){
 		RESPONSE_TYPES_TO_IGNORE.add(cls);
 	}
 
-	public static boolean isResponseTypeWrapper(Class<?> rawClass) {
+	static boolean isResponseTypeWrapper(Class<?> rawClass) {
 		return RESULT_WRAPPERS_TO_IGNORE.stream().anyMatch(clazz -> clazz.isAssignableFrom(rawClass));
 	}
 

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -145,7 +145,7 @@ private boolean isRestController(Map<String, Object> restControllers, HandlerMet
 
 		return (responseBodyAnnotation != null && restControllers.containsKey(handlerMethod.getBean().toString()) || isAdditionalRestController(handlerMethod.getBeanType()))
 				&& operationPath.startsWith(DEFAULT_PATH_SEPARATOR)
-				&& !ModelAndView.class.isAssignableFrom(handlerMethod.getMethod().getReturnType());
+				&& (springDocConfigProperties.isModelAndViewAllowed()|| !ModelAndView.class.isAssignableFrom(handlerMethod.getMethod().getReturnType()));
 	}
 
 	private void calculateServerUrl(HttpServletRequest request, String apiDocsUrl) {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -75,8 +75,8 @@ IgnoredParameterAnnotationsDefault ignoredParameterAnnotationsDefault() {
 	}
 
 	@Bean
-	public OpenAPIBuilder openAPIBuilder(Optional<OpenAPI> openAPI, ApplicationContext context, SecurityParser securityParser, Optional<SecurityOAuth2Provider> springSecurityOAuth2Provider) {
-		return new OpenAPIBuilder(openAPI, context, securityParser, springSecurityOAuth2Provider);
+	public OpenAPIBuilder openAPIBuilder(Optional<OpenAPI> openAPI, ApplicationContext context, SecurityParser securityParser, Optional<SecurityOAuth2Provider> springSecurityOAuth2Provider,SpringDocConfigProperties springDocConfigProperties) {
+		return new OpenAPIBuilder(openAPI, context, securityParser, springSecurityOAuth2Provider,springDocConfigProperties);
 	}
 
 	@Bean

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RequestBodyBuilder.java
Patch:
@@ -147,7 +147,7 @@ private void buildContent(RequestBody requestBody, MethodAttributes methodAttrib
 	}
 
 	private void buildContent(RequestBody requestBody, MethodAttributes methodAttributes, Schema<?> schema, Content content) {
-		for (String value : methodAttributes.getAllConsumes()) {
+		for (String value : methodAttributes.getMethodConsumes()) {
 			io.swagger.v3.oas.models.media.MediaType mediaTypeObject = new io.swagger.v3.oas.models.media.MediaType();
 			mediaTypeObject.setSchema(schema);
 			if (content.get(value) != null)

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GenericResponseBuilder.java
Patch:
@@ -54,6 +54,7 @@
 import org.springframework.web.method.HandlerMethod;
 
 import static org.springdoc.core.Constants.DEFAULT_DESCRIPTION;
+import static org.springdoc.core.converters.ConverterUtils.isResponseTypeToIgnore;
 
 @SuppressWarnings("rawtypes")
 public class GenericResponseBuilder {
@@ -256,7 +257,7 @@ private Schema<?> calculateSchema(Components components, Type returnType, JsonVi
 			return null;
 		}
 		Schema<?> schemaN  = SpringDocAnnotationsUtils.extractSchema(components, returnType, jsonView);
-		if (schemaN == null && returnType instanceof Class) {
+		if (schemaN == null && returnType instanceof Class && !isResponseTypeToIgnore((Class) returnType)) {
 			schemaN = AnnotationsUtils.resolveSchemaFromType((Class) returnType, null, jsonView);
 		}
 		return schemaN;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/ResponseSupportConverter.java
Patch:
@@ -29,6 +29,7 @@
 import io.swagger.v3.oas.models.media.Schema;
 import io.swagger.v3.oas.models.media.StringSchema;
 
+import static org.springdoc.core.converters.ConverterUtils.isResponseTypeToIgnore;
 import static org.springdoc.core.converters.ConverterUtils.isResponseTypeWrapper;
 
 public class ResponseSupportConverter implements ModelConverter {
@@ -51,6 +52,8 @@ else if (innerType.getBindings() != null && isResponseTypeWrapper(innerType.getR
 					type = new AnnotatedType(innerType).jsonViewAnnotation(type.getJsonViewAnnotation()).resolveAsRef(true);
 				}
 			}
+			else if (isResponseTypeToIgnore(cls))
+				return null;
 		}
 		if (chain.hasNext()) {
 			return chain.next().resolve(type, context, chain);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RequestInfo.java
Patch:
@@ -52,7 +52,7 @@ public String type() {
 	}
 
 	public enum ParameterType {
-		QUERY_PARAM("query"), HEADER_PARAM("header"), PATH_PARAM("path");
+		QUERY_PARAM("query"), HEADER_PARAM("header"), PATH_PARAM("path"), COOKIE("cookie");
 
 		private final String value;
 

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/MultipleOpenApiResource.java
Patch:
@@ -88,7 +88,7 @@ public void afterPropertiesSet() throws Exception {
 		this.groupedOpenApiResources = groupedOpenApis.stream()
 				.collect(Collectors.toMap(GroupedOpenApi::getGroup, item ->
 						{
-							GroupConfig groupConfig = new GroupConfig(item.getGroup(), item.getPathsToMatch(), item.getPackagesToScan());
+							GroupConfig groupConfig = new GroupConfig(item.getGroup(), item.getPathsToMatch(), item.getPackagesToScan(), item.getPackagesToExclude(), item.getPathsToExclude());
 							springDocConfigProperties.addGroupConfig(groupConfig);
 							return new OpenApiResource(item.getGroup(),
 									defaultOpenAPIBuilder.getObject(),

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/MultipleOpenApiResource.java
Patch:
@@ -91,7 +91,7 @@ public void afterPropertiesSet() throws Exception {
 		this.groupedOpenApiResources = groupedOpenApis.stream()
 				.collect(Collectors.toMap(GroupedOpenApi::getGroup, item ->
 						{
-							GroupConfig groupConfig = new GroupConfig(item.getGroup(), item.getPathsToMatch(),item.getPackagesToScan());
+							GroupConfig groupConfig = new GroupConfig(item.getGroup(), item.getPathsToMatch(), item.getPackagesToScan(), item.getPackagesToExclude(), item.getPathsToExclude());
 							springDocConfigProperties.addGroupConfig(groupConfig);
 							return new OpenApiResource(item.getGroup(),
 									defaultOpenAPIBuilder.getObject(),

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app63/SpringDocApp63Test.java
Patch:
@@ -29,11 +29,13 @@ public class SpringDocApp63Test extends AbstractSpringDocTest {
 	@BeforeAll
 	public static void beforeClass() {
 		System.setProperty("springdoc.packagesToScan", "hell,hello1, hello.me");
+		System.setProperty("springdoc.packagesToExclude", "test.org.springdoc.api.app63.65");
 	}
 
 	@AfterAll
 	public static void afterClass() {
 		System.clearProperty("springdoc.packagesToScan");
+		System.clearProperty("springdoc.packagesToExclude");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/SpringDocTestApp.java
Patch:
@@ -63,7 +63,7 @@ public GroupedOpenApi petOpenApi() {
 	public GroupedOpenApi groupOpenApi() {
 		return GroupedOpenApi.builder()
 				.setGroup("groups test")
-				.pathsToMatch("/v1/**")
+				.pathsToMatch("/v1/**").pathsToExclude("/v1/users")
 				.packagesToScan("test.org.springdoc.api.app68.api.user", "test.org.springdoc.api.app68.api.store")
 				.build();
 	}

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app85/HelloController.java
Patch:
@@ -21,7 +21,6 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 
-import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.stream.Stream;
 
 import com.fasterxml.jackson.annotation.JsonView;
+import io.swagger.v3.core.filter.SpecFilter;
 import io.swagger.v3.core.util.ReflectionUtils;
 import io.swagger.v3.oas.annotations.Hidden;
 import io.swagger.v3.oas.models.Components;
@@ -64,7 +65,7 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.method.HandlerMethod;
 
-public abstract class AbstractOpenApiResource {
+public abstract class AbstractOpenApiResource extends SpecFilter {
 
 	private static final Logger LOGGER = LoggerFactory.getLogger(AbstractOpenApiResource.class);
 
@@ -127,6 +128,7 @@ protected synchronized OpenAPI getOpenApi() {
 			// run the optional customisers
 			openApiCustomisers.ifPresent(apiCustomisers -> apiCustomisers.forEach(openApiCustomiser -> openApiCustomiser.customise(openApi)));
 			computeDone = true;
+			this.removeBrokenReferenceDefinitions(openApi);
 			openAPIBuilder.setCachedOpenAPI(openApi);
 			openAPIBuilder.resetCalculatedOpenAPI();
 			LOGGER.info("Init duration for springdoc-openapi is: {} ms",

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -199,7 +199,7 @@ else if (!RequestMethod.GET.equals(requestMethod)) {
 	private LinkedHashMap<String, Parameter> getParameterLinkedHashMap(Components components, MethodAttributes methodAttributes, List<Parameter> operationParameters, Map<String, io.swagger.v3.oas.annotations.Parameter> parametersDocMap) {
 		LinkedHashMap<String, Parameter> map = operationParameters.stream()
 				.collect(Collectors.toMap(
-						Parameter::getName,
+						parameter -> parameter.getName() !=null ? parameter.getName(): Integer.toString(parameter.hashCode()),
 						parameter -> parameter,
 						(u, v) -> {
 							throw new IllegalStateException(String.format("Duplicate key %s", u));

File: springdoc-openapi-kotlin/src/main/java/org/springdoc/core/KotlinCoroutinesRequestBuilder.java
Patch:
@@ -29,7 +29,7 @@
 public class KotlinCoroutinesRequestBuilder extends AbstractRequestBuilder {
 
 	static {
-		AbstractRequestBuilder.addResponseWrapperToIgnore(Continuation.class);
+		AbstractRequestBuilder.addRequestWrapperToIgnore(Continuation.class);
 	}
 
 	public KotlinCoroutinesRequestBuilder(GenericParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,

File: springdoc-openapi-security/src/main/java/org/springdoc/core/IgnoredParameterTypes.java
Patch:
@@ -23,7 +23,7 @@
 public class IgnoredParameterTypes {
 
 	public IgnoredParameterTypes() {
-		AbstractRequestBuilder.addResponseWrapperToIgnore(Authentication.class);
+		AbstractRequestBuilder.addRequestWrapperToIgnore(Authentication.class);
 	}
 
 }

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/RequestBuilder.java
Patch:
@@ -34,7 +34,7 @@
 public class RequestBuilder extends AbstractRequestBuilder {
 
 	static {
-		addResponseWrapperToIgnore(ServerWebExchange.class,ServerHttpRequest.class,ServerHttpResponse.class);
+		addRequestWrapperToIgnore(ServerWebExchange.class,ServerHttpRequest.class,ServerHttpResponse.class);
 		addFileType(FilePart.class);
 	}
 

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app4/SpringDocApp4Test.java
Patch:
@@ -25,11 +25,14 @@
 import org.springdoc.core.SwaggerUiConfigProperties;
 import test.org.springdoc.ui.AbstractSpringDocTest;
 
+import org.springframework.test.context.TestPropertySource;
+
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+@TestPropertySource(properties = "springdoc.swagger-ui.groups-order=DESC")
 public class SpringDocApp4Test extends AbstractSpringDocTest {
 
 	@Test

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -44,6 +44,7 @@
 import io.swagger.v3.oas.annotations.Hidden;
 import io.swagger.v3.oas.annotations.enums.ParameterIn;
 import io.swagger.v3.oas.models.Components;
+import io.swagger.v3.oas.models.OpenAPI;
 import io.swagger.v3.oas.models.Operation;
 import io.swagger.v3.oas.models.media.Schema;
 import io.swagger.v3.oas.models.parameters.Parameter;
@@ -131,10 +132,10 @@ protected AbstractRequestBuilder(GenericParameterBuilder parameterBuilder, Reque
 
 
 	public Operation build(Components components, HandlerMethod handlerMethod, RequestMethod requestMethod,
-			Operation operation, MethodAttributes methodAttributes) {
+			Operation operation, MethodAttributes methodAttributes, OpenAPI openAPI) {
 		// Documentation
 		String operationId = operationBuilder.getOperationId(handlerMethod.getMethod().getName(),
-				operation.getOperationId());
+				operation.getOperationId(), openAPI);
 
 		operation.setOperationId(operationId);
 		// requests

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -87,9 +87,9 @@ public ModelConverterRegistrar modelConverterRegistrar(Optional<List<ModelConver
 	@Bean
 	@ConditionalOnWebApplication
 	public OperationBuilder operationBuilder(GenericParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
-			SecurityParser securityParser, OpenAPIBuilder openAPIBuilder, PropertyResolverUtils propertyResolverUtils) {
+			SecurityParser securityParser, PropertyResolverUtils propertyResolverUtils) {
 		return new OperationBuilder(parameterBuilder, requestBodyBuilder,
-				securityParser, openAPIBuilder, propertyResolverUtils);
+				securityParser, propertyResolverUtils);
 	}
 
 	@Bean

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -105,7 +105,7 @@ protected void getPaths(Map<String, Object> restControllers) {
 					// default allowed requestmethods
 					if (requestMethods.isEmpty())
 						requestMethods = this.getDefaultAllowedHttpMethods();
-					calculatePath(openAPIBuilder, handlerMethod, operationPath, requestMethods);
+					calculatePath(handlerMethod, operationPath, requestMethods);
 				}
 			}
 		}

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -131,7 +131,7 @@ && isPathToMatch(operationPath)) {
 					// default allowed requestmethods
 					if (requestMethods.isEmpty())
 						requestMethods = this.getDefaultAllowedHttpMethods();
-					calculatePath(openAPIBuilder, handlerMethod, operationPath, requestMethods);
+					calculatePath(handlerMethod, operationPath, requestMethods);
 				}
 			}
 		}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigProperties.java
Patch:
@@ -178,7 +178,8 @@ public Map<String, Object> getConfigParameters() {
 		final Map<String, Object> params = new TreeMap<>();
 		SpringDocPropertiesUtils.put("layout", layout, params);
 		SpringDocPropertiesUtils.put(CONFIG_URL_PROPERTY, configUrl, params);
-		SpringDocPropertiesUtils.put("validatorUrl", validatorUrl, params);
+		// empty-string prevents swagger-ui default validation
+		params.put("validatorUrl", validatorUrl != null ? validatorUrl : "");
 		SpringDocPropertiesUtils.put("filter", filter, params);
 		SpringDocPropertiesUtils.put("deepLinking", this.deepLinking, params);
 		SpringDocPropertiesUtils.put("displayOperationId", displayOperationId, params);

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectDefaultTest.java
Patch:
@@ -35,6 +35,9 @@ public void shouldRedirectWithDefaultQueryParams() throws Exception {
 		responseSpec.expectHeader()
 				.value("Location", Matchers.is("/webjars/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config"));
 
+		webTestClient.get().uri("/v3/api-docs/swagger-config").exchange()
+				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl").isEqualTo("");
+
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectWithConfigTest.java
Patch:
@@ -41,7 +41,7 @@ public void shouldRedirectWithConfiguredParams() throws Exception {
 				.value("Location", Matchers.is("/webjars/swagger-ui/index.html?configUrl=/baf/batz/swagger-config"));
 
 		webTestClient.get().uri("/baf/batz/swagger-config").exchange()
-				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl", "/foo/validate");
+				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl").isEqualTo("/foo/validate");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigProperties.java
Patch:
@@ -178,7 +178,8 @@ public Map<String, Object> getConfigParameters() {
 		final Map<String, Object> params = new TreeMap<>();
 		SpringDocPropertiesUtils.put("layout", layout, params);
 		SpringDocPropertiesUtils.put(CONFIG_URL_PROPERTY, configUrl, params);
-		SpringDocPropertiesUtils.put("validatorUrl", validatorUrl, params);
+		// empty-string prevents swagger-ui default validation
+		params.put("validatorUrl", validatorUrl != null ? validatorUrl : "");
 		SpringDocPropertiesUtils.put("filter", filter, params);
 		SpringDocPropertiesUtils.put("deepLinking", this.deepLinking, params);
 		SpringDocPropertiesUtils.put("displayOperationId", displayOperationId, params);

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectDefaultTest.java
Patch:
@@ -35,6 +35,9 @@ public void shouldRedirectWithDefaultQueryParams() throws Exception {
 		responseSpec.expectHeader()
 				.value("Location", Matchers.is("/webjars/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config"));
 
+		webTestClient.get().uri("/v3/api-docs/swagger-config").exchange()
+				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl").isEqualTo("");
+
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectWithConfigTest.java
Patch:
@@ -41,7 +41,7 @@ public void shouldRedirectWithConfiguredParams() throws Exception {
 				.value("Location", Matchers.is("/webjars/swagger-ui/index.html?configUrl=/baf/batz/swagger-config"));
 
 		webTestClient.get().uri("/baf/batz/swagger-config").exchange()
-				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl", "/foo/validate");
+				.expectStatus().isOk().expectBody().jsonPath("$.validatorUrl").isEqualTo("/foo/validate");
 	}
 
 	@SpringBootApplication

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app23/HelloController.java
Patch:
@@ -31,7 +31,7 @@
 import org.springframework.web.bind.annotation.RestController;
 
 @RestController
-@SecurityScheme(type = SecuritySchemeType.APIKEY, in = SecuritySchemeIn.HEADER, name = "Authorization", description = "A core-auth Bearer token")
+@SecurityScheme(type = SecuritySchemeType.APIKEY, in = SecuritySchemeIn.HEADER, name = "Authorization", paramName = "JWT",description = "A core-auth Bearer token")
 public class HelloController {
 
 	@Operation(summary = "Add a new person to the store", description = "", security = {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OperationBuilder.java
Patch:
@@ -30,7 +30,6 @@
 import java.util.stream.Collectors;
 
 import io.swagger.v3.core.util.AnnotationsUtils;
-import io.swagger.v3.core.util.ReflectionUtils;
 import io.swagger.v3.oas.annotations.Hidden;
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.OpenAPI;
@@ -45,6 +44,7 @@
 import io.swagger.v3.oas.models.responses.ApiResponses;
 import org.apache.commons.lang3.StringUtils;
 
+import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.util.CollectionUtils;
 
 import static org.springdoc.core.Constants.DEFAULT_DESCRIPTION;
@@ -128,10 +128,10 @@ public OpenAPI parse(Components components, io.swagger.v3.oas.annotations.Operat
 	}
 
 	public boolean isHidden(Method method) {
-		io.swagger.v3.oas.annotations.Operation apiOperation = ReflectionUtils.getAnnotation(method,
+		io.swagger.v3.oas.annotations.Operation apiOperation = AnnotationUtils.findAnnotation(method,
 				io.swagger.v3.oas.annotations.Operation.class);
 		return (apiOperation != null && (apiOperation.hidden()))
-				|| (ReflectionUtils.getAnnotation(method, Hidden.class) != null);
+				|| (AnnotationUtils.findAnnotation(method, Hidden.class) != null);
 	}
 
 	public Optional<Map<String, Callback>> buildCallbacks(

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -102,6 +102,9 @@ protected void getPaths(Map<String, Object> restControllers) {
 				if (operationPath.startsWith(DEFAULT_PATH_SEPARATOR)
 						&& restControllers.containsKey(handlerMethod.getBean().toString()) && isPackageToScan(handlerMethod.getBeanType().getPackage().getName()) && isPathToMatch(operationPath)) {
 					Set<RequestMethod> requestMethods = requestMappingInfo.getMethodsCondition().getMethods();
+					// default allowed requestmethods
+					if (requestMethods.isEmpty())
+						requestMethods = this.getDefaultAllowedHttpMethods();
 					calculatePath(openAPIBuilder, handlerMethod, operationPath, requestMethods);
 				}
 			}

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -45,7 +45,7 @@ public abstract class AbstractSpringDocTest {
 	protected String groupName = "";
 
 	@Autowired
-	private WebTestClient webTestClient;
+	protected WebTestClient webTestClient;
 
 	public static String getContent(String fileName) throws Exception {
 		try {

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app2/api/PetApi.java
Patch:
@@ -55,12 +55,14 @@
 import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RequestPart;
+import org.springframework.web.bind.annotation.ResponseBody;
 import org.springframework.web.multipart.MultipartFile;
 
 @SecurityScheme(name = "petstore_auth", type = SecuritySchemeType.OAUTH2, flows = @OAuthFlows(implicit = @OAuthFlow(authorizationUrl = "http://petstore.swagger.io/oauth/dialog", scopes = {
 		@OAuthScope(name = "write:pets", description = "modify pets in your account"),
 		@OAuthScope(name = "read:pets", description = "read your pets") })))
 @Tag(name = "pet", description = "the pet API")
+@ResponseBody
 public interface PetApi {
 
 	default PetApiDelegate getDelegate() {

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app2/api/UserApiController.java
Patch:
@@ -22,10 +22,12 @@
 
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.ResponseBody;
 
 @javax.annotation.Generated(value = "org.springdoc.demo.app2.codegen.languages.SpringCodegen", date = "2019-07-11T00:09:29.839+02:00[Europe/Paris]")
 
 @Controller
+@ResponseBody
 @RequestMapping("${openapi.openAPIPetstore.base-path:/}")
 public class UserApiController implements UserApi {
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/pet/PetApiController.java
Patch:
@@ -20,12 +20,12 @@
 
 import java.util.Optional;
 
-import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
 
 @javax.annotation.Generated(value = "org.springdoc.demo.app2.codegen.languages.SpringCodegen", date = "2019-07-11T00:09:29.839+02:00[Europe/Paris]")
 
-@Controller
+@RestController
 @RequestMapping("${openapi.openAPIPetstore.base-path:/}")
 public class PetApiController implements PetApi {
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/store/StoreApiController.java
Patch:
@@ -20,12 +20,12 @@
 
 import java.util.Optional;
 
-import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
 
 @javax.annotation.Generated(value = "org.springdoc.demo.app2.codegen.languages.SpringCodegen", date = "2019-07-11T00:09:29.839+02:00[Europe/Paris]")
 
-@Controller
+@RestController
 @RequestMapping("${openapi.openAPIPetstore.base-path:/}")
 public class StoreApiController implements StoreApi {
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/user/UserApiController.java
Patch:
@@ -20,12 +20,12 @@
 
 import java.util.Optional;
 
-import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
 
 @javax.annotation.Generated(value = "org.springdoc.demo.app2.codegen.languages.SpringCodegen", date = "2019-07-11T00:09:29.839+02:00[Europe/Paris]")
 
-@Controller
+@RestController
 @RequestMapping("${openapi.openAPIPetstore.base-path:/}")
 public class UserApiController implements UserApi {
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app79/HelloController.java
Patch:
@@ -18,13 +18,13 @@
 
 package test.org.springdoc.api.app79;
 
+import java.util.Optional;
+
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
-import java.util.Optional;
-
 @RestController
 public class HelloController {
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OpenAPIBuilder.java
Patch:
@@ -141,7 +141,7 @@ else if (openAPI.getInfo() == null) {
 		// default server value
 		if (CollectionUtils.isEmpty(openAPI.getServers()) || !isServersPresent) {
 			Server server = new Server().url(serverBaseUrl).description(DEFAULT_SERVER_DESCRIPTION);
-			List servers = new ArrayList();
+			List<Server> servers = new ArrayList();
 			servers.add(server);
 			openAPI.setServers(servers);
 		}

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerConfig.java
Patch:
@@ -57,7 +57,7 @@ public class SwaggerConfig extends WebMvcConfigurerAdapter { // NOSONAR
 	public void addResourceHandlers(ResourceHandlerRegistry registry) {
 		StringBuilder uiRootPath = new StringBuilder();
 		if (swaggerPath.contains("/")) {
-			uiRootPath.append(swaggerPath.substring(0, swaggerPath.lastIndexOf('/')));
+			uiRootPath.append(swaggerPath, 0, swaggerPath.lastIndexOf('/'));
 		}
 		uiRootPath.append("/**");
 		String webJarsLocation = webJarsPrefixUrl + DEFAULT_PATH_SEPARATOR;

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerIndexTransformer.java
Patch:
@@ -75,7 +75,7 @@ private String readFullyAsString(InputStream inputStream)
 			throws IOException {
 		ByteArrayOutputStream baos = new ByteArrayOutputStream();
 		byte[] buffer = new byte[1024];
-		int length = 0;
+		int length;
 		while ((length = inputStream.read(buffer)) != -1) {
 			baos.write(buffer, 0, length);
 		}

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/MultipleOpenApiWebFluxConfiguration.java
Patch:
@@ -43,10 +43,10 @@ public class MultipleOpenApiWebFluxConfiguration {
 	public MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,
 			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
-			RequestMappingInfoHandlerMapping requestMappingHandlerMapping) {
+			RequestMappingInfoHandlerMapping requestMappingHandlerMapping, SpringDocConfigProperties springDocConfigProperties) {
 		return new MultipleOpenApiResource(groupedOpenApis,
 				defaultOpenAPIBuilder, requestBuilder,
 				responseBuilder, operationParser,
-				requestMappingHandlerMapping);
+				requestMappingHandlerMapping,springDocConfigProperties);
 	}
 }
\ No newline at end of file

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/AbstractSpringDocTest.java
Patch:
@@ -18,6 +18,7 @@
 
 package test.org.springdoc.ui;
 
+import org.springdoc.core.SpringDocConfigProperties;
 import org.springdoc.core.SpringDocConfiguration;
 import org.springdoc.core.SpringDocWebFluxConfiguration;
 import org.springdoc.core.SwaggerUiConfigProperties;
@@ -32,7 +33,7 @@
 
 @ActiveProfiles("test")
 @WebFluxTest
-@ContextConfiguration(classes = { SpringDocConfiguration.class, SpringDocWebFluxConfiguration.class, SwaggerUiConfigProperties.class, SwaggerWelcome.class })
+@ContextConfiguration(classes = { SpringDocConfiguration.class, SpringDocConfigProperties.class, SpringDocWebFluxConfiguration.class, SwaggerUiConfigProperties.class, SwaggerWelcome.class })
 public abstract class AbstractSpringDocTest {
 
 

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/MultipleOpenApiSupportConfiguration.java
Patch:
@@ -46,10 +46,10 @@ public MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> grou
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,
 			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping,
-			Optional<ActuatorProvider> servletContextProvider) {
+			Optional<ActuatorProvider> servletContextProvider, SpringDocConfigProperties springDocConfigProperties) {
 		return new MultipleOpenApiResource(groupedOpenApis,
 				defaultOpenAPIBuilder, requestBuilder,
 				responseBuilder, operationParser,
-				requestMappingHandlerMapping, servletContextProvider);
+				requestMappingHandlerMapping, servletContextProvider,springDocConfigProperties);
 	}
 }
\ No newline at end of file

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -262,7 +262,7 @@ private Parameter buildParams(ParameterInfo parameterInfo, Components components
 			parameter = buildParam(parameterInfo, components, requestInfo, jsonView);
 
 		}
-		else if (requestParam != null) {
+		else if (requestParam != null && !parameterBuilder.isFile(parameterInfo.getParameter())) {
 			boolean isOptional = Optional.class.equals(parameters.getType());
 			requestInfo = new RequestInfo(ParameterType.QUERY_PARAM, requestParam.value(), requestParam.required() && !isOptional,
 					requestParam.defaultValue());

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/MultipleOpenApiResource.java
Patch:
@@ -26,7 +26,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import io.swagger.v3.oas.annotations.Operation;
 import org.springdoc.core.AbstractRequestBuilder;
-import org.springdoc.core.AbstractResponseBuilder;
+import org.springdoc.core.GenericResponseBuilder;
 import org.springdoc.core.GroupedOpenApi;
 import org.springdoc.core.OpenAPIBuilder;
 import org.springdoc.core.OperationBuilder;
@@ -57,7 +57,7 @@ public class MultipleOpenApiResource implements InitializingBean {
 
 	private final AbstractRequestBuilder requestBuilder;
 
-	private final AbstractResponseBuilder responseBuilder;
+	private final GenericResponseBuilder responseBuilder;
 
 	private final OperationBuilder operationParser;
 
@@ -70,7 +70,7 @@ public class MultipleOpenApiResource implements InitializingBean {
 
 	public MultipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,
-			AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
+			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping) {
 
 		this.groupedOpenApis = groupedOpenApis;

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -31,7 +31,7 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.models.OpenAPI;
 import org.springdoc.core.AbstractRequestBuilder;
-import org.springdoc.core.AbstractResponseBuilder;
+import org.springdoc.core.GenericResponseBuilder;
 import org.springdoc.core.OpenAPIBuilder;
 import org.springdoc.core.OperationBuilder;
 import org.springdoc.core.customizers.OpenApiCustomiser;
@@ -60,15 +60,15 @@ public class OpenApiResource extends AbstractOpenApiResource {
 	private final RequestMappingInfoHandlerMapping requestMappingHandlerMapping;
 
 	public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
-			AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
+			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping,
 			Optional<List<OpenApiCustomiser>> openApiCustomisers) {
 		super(openAPIBuilder, requestBuilder, responseBuilder, operationParser, openApiCustomisers);
 		this.requestMappingHandlerMapping = requestMappingHandlerMapping;
 	}
 
 	public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
-			AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
+			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping,
 			Optional<List<OpenApiCustomiser>> openApiCustomisers, List<String> pathsToMatch, List<String> packagesToScan, boolean cacheDisabled) {
 		super(openAPIBuilder, requestBuilder, responseBuilder, operationParser, openApiCustomisers, pathsToMatch, packagesToScan, cacheDisabled);

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/MultipleOpenApiWebFluxConfiguration.java
Patch:
@@ -42,7 +42,7 @@ public class MultipleOpenApiWebFluxConfiguration {
 	@Bean
 	public MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,
-			AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
+			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping) {
 		return new MultipleOpenApiResource(groupedOpenApis,
 				defaultOpenAPIBuilder, requestBuilder,

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.springdoc.core.Constants;
 
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.web.reactive.server.EntityExchangeResult;
@@ -36,6 +37,7 @@
 import static org.skyscreamer.jsonassert.JSONAssert.assertEquals;
 
 
+@AutoConfigureWebTestClient(timeout = "3600000")
 @WebFluxTest
 @ActiveProfiles("test")
 public abstract class AbstractSpringDocTest {

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/MultipleOpenApiResource.java
Patch:
@@ -28,7 +28,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import io.swagger.v3.oas.annotations.Operation;
 import org.springdoc.core.AbstractRequestBuilder;
-import org.springdoc.core.AbstractResponseBuilder;
+import org.springdoc.core.GenericResponseBuilder;
 import org.springdoc.core.GroupedOpenApi;
 import org.springdoc.core.OpenAPIBuilder;
 import org.springdoc.core.OperationBuilder;
@@ -57,7 +57,7 @@ public class MultipleOpenApiResource implements InitializingBean {
 
 	private final AbstractRequestBuilder requestBuilder;
 
-	private final AbstractResponseBuilder responseBuilder;
+	private final GenericResponseBuilder responseBuilder;
 
 	private final OperationBuilder operationParser;
 
@@ -72,7 +72,7 @@ public class MultipleOpenApiResource implements InitializingBean {
 
 	public MultipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,
-			AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
+			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping, Optional<ActuatorProvider> servletContextProvider) {
 
 		this.groupedOpenApis = groupedOpenApis;

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -36,7 +36,7 @@
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.models.OpenAPI;
 import org.springdoc.core.AbstractRequestBuilder;
-import org.springdoc.core.AbstractResponseBuilder;
+import org.springdoc.core.GenericResponseBuilder;
 import org.springdoc.core.OpenAPIBuilder;
 import org.springdoc.core.OperationBuilder;
 import org.springdoc.core.SecurityOAuth2Provider;
@@ -67,7 +67,7 @@ public class OpenApiResource extends AbstractOpenApiResource {
 	private final Optional<ActuatorProvider> servletContextProvider;
 
 	public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
-			AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
+			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping, Optional<ActuatorProvider> servletContextProvider,
 			Optional<List<OpenApiCustomiser>> openApiCustomisers) {
 		super(openAPIBuilder, requestBuilder, responseBuilder, operationParser, openApiCustomisers);
@@ -76,7 +76,7 @@ public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder req
 	}
 
 	public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
-			AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
+			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping, Optional<ActuatorProvider> servletContextProvider,
 			Optional<List<OpenApiCustomiser>> openApiCustomisers, List<String> pathsToMatch, List<String> packagesToScan,
 			boolean cacheDisabled) {

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/MultipleOpenApiSupportConfiguration.java
Patch:
@@ -44,7 +44,7 @@ public class MultipleOpenApiSupportConfiguration {
 	@Bean
 	public MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
 			ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,
-			AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
+			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping,
 			Optional<ActuatorProvider> servletContextProvider) {
 		return new MultipleOpenApiResource(groupedOpenApis,

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/SpringDocWebMvcConfiguration.java
Patch:
@@ -49,7 +49,7 @@ public class SpringDocWebMvcConfiguration {
 
 	@Bean
 	public OpenApiResource openApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
-			AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
+			GenericResponseBuilder responseBuilder, OperationBuilder operationParser,
 			RequestMappingInfoHandlerMapping requestMappingHandlerMapping, Optional<ActuatorProvider> servletContextProvider,
 			Optional<List<OpenApiCustomiser>> openApiCustomisers) {
 		return new OpenApiResource(openAPIBuilder, requestBuilder,
@@ -74,8 +74,8 @@ public RequestBuilder requestBuilder(AbstractParameterBuilder parameterBuilder,
 
 	@Bean
 	@ConditionalOnMissingBean
-	public ResponseBuilder responseBuilder(OperationBuilder operationBuilder, List<ReturnTypeParser> returnTypeParsers) {
-		return new ResponseBuilder(operationBuilder, returnTypeParsers);
+	public GenericResponseBuilder responseBuilder(OperationBuilder operationBuilder, List<ReturnTypeParser> returnTypeParsers) {
+		return new GenericResponseBuilder(operationBuilder, returnTypeParsers);
 	}
 
 	@Configuration

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractResponseBuilder.java
Patch:
@@ -152,6 +152,9 @@ private Map<String, ApiResponse> computeResponse(Components components, Method m
 				io.swagger.v3.oas.annotations.media.Content[] contentdoc = apiResponseAnnotations.content();
 				buildContentFromDoc(components, apiResponsesOp, methodAttributes,
 						apiResponseAnnotations, apiResponse, contentdoc);
+				Map<String, Object> extensions = AnnotationsUtils.getExtensions(apiResponseAnnotations.extensions());
+				if (!CollectionUtils.isEmpty(extensions))
+					apiResponse.extensions(extensions);
 				AnnotationsUtils.getHeaders(apiResponseAnnotations.headers(), methodAttributes.getJsonViewAnnotation())
 						.ifPresent(apiResponse::headers);
 				apiResponsesOp.addApiResponse(apiResponseAnnotations.responseCode(), apiResponse);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocAnnotationsUtils.java
Patch:
@@ -123,7 +123,6 @@ private static void addEncodingToMediaType(JsonView jsonViewAnnotation, MediaTyp
 
 	private static void addExtension(io.swagger.v3.oas.annotations.media.Content annotationContent,
 			MediaType mediaType) {
-		annotationContent.extensions();
 		if (annotationContent.extensions().length > 0) {
 			Map<String, Object> extensions = AnnotationsUtils.getExtensions(annotationContent.extensions());
 			extensions.forEach(mediaType::addExtension);

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app72/CacheAutoConfigurationTest1.java
Patch:
@@ -49,7 +49,6 @@ public void cache_configurations_successfully_disabled() {
 
 
 
-    @SpringBootConfiguration
     @EnableAutoConfiguration
     static class TestApp {
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app72/CacheAutoConfigurationTest2.java
Patch:
@@ -49,7 +49,6 @@ public void cache_configurations_successfully_disabled() {
 
 
 
-    @SpringBootApplication
     @EnableAutoConfiguration
     static class TestApp {
         @Bean

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app72/CacheAutoConfigurationTest2.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.junit.Test;
 import org.springdoc.core.GroupedOpenApi;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.runner.WebApplicationContextRunner;
 import org.springframework.context.annotation.Bean;
@@ -49,6 +50,7 @@ public void cache_configurations_successfully_disabled() {
 
 
     @SpringBootApplication
+    @EnableAutoConfiguration
     static class TestApp {
         @Bean
         GroupedOpenApi testGroupedOpenApi() {

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/ResponseBuilder.java
Patch:
@@ -10,12 +10,13 @@
 import reactor.core.publisher.Mono;
 
 import java.lang.reflect.ParameterizedType;
+import java.util.List;
 
 @SuppressWarnings("rawtypes")
 public class ResponseBuilder extends AbstractResponseBuilder {
 
-    public ResponseBuilder(OperationBuilder operationBuilder) {
-        super(operationBuilder);
+    public ResponseBuilder(OperationBuilder operationBuilder, List<ReturnTypeParser> returnTypeParsers) {
+        super(operationBuilder, returnTypeParsers);
     }
 
     @Override

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/SpringDocWebFluxConfiguration.java
Patch:
@@ -46,8 +46,8 @@ public RequestBuilder requestBuilder(AbstractParameterBuilder parameterBuilder,
     }
 
     @Bean
-    public ResponseBuilder responseBuilder(OperationBuilder operationBuilder) {
-        return new ResponseBuilder(operationBuilder);
+    public ResponseBuilder responseBuilder(OperationBuilder operationBuilder, List<AbstractResponseBuilder.ReturnTypeParser> returnTypeParsers) {
+        return new ResponseBuilder(operationBuilder, returnTypeParsers);
     }
 
 }

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/ResponseBuilder.java
Patch:
@@ -8,13 +8,14 @@
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
+import java.util.List;
 import java.util.concurrent.Callable;
 
 @SuppressWarnings("rawtypes")
 public class ResponseBuilder extends AbstractResponseBuilder {
 
-    public ResponseBuilder(OperationBuilder operationBuilder) {
-        super(operationBuilder);
+    public ResponseBuilder(OperationBuilder operationBuilder, List<ReturnTypeParser> returnTypeParsers) {
+        super(operationBuilder, returnTypeParsers);
     }
 
     @Override

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/SpringDocWebMvcConfiguration.java
Patch:
@@ -55,8 +55,8 @@ public RequestBuilder requestBuilder(AbstractParameterBuilder parameterBuilder,
 
     @Bean
     @ConditionalOnMissingBean
-    public ResponseBuilder responseBuilder(OperationBuilder operationBuilder) {
-        return new ResponseBuilder(operationBuilder);
+    public ResponseBuilder responseBuilder(OperationBuilder operationBuilder, List<AbstractResponseBuilder.ReturnTypeParser> returnTypeParsers) {
+        return new ResponseBuilder(operationBuilder, returnTypeParsers);
     }
 
     @Configuration

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app72/CacheAutoConfigurationTest1.java
Patch:
@@ -1,6 +1,7 @@
 package test.org.springdoc.api.app72;
 
 import org.junit.Test;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.test.context.runner.WebApplicationContextRunner;
 
@@ -17,7 +18,7 @@ public void cache_configuration_loaded_when_not_disabled_explicitly() {
                 .run(context -> assertThat(context)
                         .hasNotFailed()
                         .hasBean("openApiResource")
-                        .doesNotHaveBean("beanFactoryPostProcessor1")
+                        .hasBean("beanFactoryPostProcessor1")
                         .doesNotHaveBean("beanFactoryPostProcessor2")
                 );
     }
@@ -29,7 +30,7 @@ public void cache_configuration_loaded_when_disabled_explicitly() {
                 .run(context -> assertThat(context)
                         .hasNotFailed()
                         .hasBean("openApiResource")
-                        .doesNotHaveBean("beanFactoryPostProcessor1")
+                        .hasBean("beanFactoryPostProcessor1")
                         .doesNotHaveBean("beanFactoryPostProcessor2")
                 );
     }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -29,7 +29,8 @@ public final class Constants {
     public static final String SPRINGDOC_ACTUATOR_DOC_URL = "https://docs.spring.io/spring-boot/docs/current/actuator-api/html/";
     public static final String SPRINGDOC_ACTUATOR_DOC_DESCRIPTION = "Spring Boot Actuator Web API Documentation";
     public static final String DEFAULT_WEB_JARS_PREFIX_URL = "/webjars";
-    public static final String WEB_JARS_PREFIX_URL = "${springdoc.webjars.prefix:#{T(org.springdoc.core.Constants).DEFAULT_WEB_JARS_PREFIX_URL}}";
+    public static final String WEB_JARS_PREFIX_URL = "${springdoc.webjars.prefix:"+DEFAULT_WEB_JARS_PREFIX_URL+"}";
+    public static final String CLASSPATH_RESOURCE_LOCATION = "classpath:/META-INF/resources";
     public static final String SWAGGER_UI_URL = "/swagger-ui/index.html";
     public static final String SWAGGER_UI_OAUTH_REDIRECT_URL = "/swagger-ui/oauth2-redirect.html";
     public static final String APPLICATION_OPENAPI_YAML = "application/vnd.oai.openapi";

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerConfig.java
Patch:
@@ -39,7 +39,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {
         }
         uiRootPath.append("/**");
         String webJarsLocation = webJarsPrefixUrl + DEFAULT_PATH_SEPARATOR;
-        registry.addResourceHandler(uiRootPath + "/swagger-ui/**").addResourceLocations(webJarsLocation)
+        registry.addResourceHandler(uiRootPath + "/swagger-ui/**").addResourceLocations(CLASSPATH_RESOURCE_LOCATION+webJarsLocation)
                 .resourceChain(false)
                 .addTransformer(swaggerIndexTransformer);
     }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -17,6 +17,8 @@ public final class Constants {
     public static final String SPRINGDOC_SWAGGER_UI_CONFIG_URL  ="springdoc.swagger-ui.configUrl";
     public static final String SPRINGDOC_SWAGGER_UI_URL  ="springdoc.swagger-ui.url";
     public static final String SPRINGDOC_SWAGGER_UI_URL_VALUE  ="${" + SPRINGDOC_SWAGGER_UI_URL + ":#{null}}";
+    public static final String SPRINGDOC_OAUTH2_REDIRECT_URL  ="springdoc.swagger-ui.oauth2RedirectUrl";
+    public static final String SPRINGDOC_OAUTH2_REDIRECT_URL_VALUE  ="${" + SPRINGDOC_OAUTH2_REDIRECT_URL + ":#{null}}";
     public static final String SPRINGDOC_SWAGGER_UI_CONFIG_URL_VALUE  ="${" + SPRINGDOC_SWAGGER_UI_CONFIG_URL + ":#{null}}";
     public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show-actuator";
     public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app3/SpringDocApp3Test.java
Patch:
@@ -19,7 +19,7 @@ public class SpringDocApp3Test extends AbstractSpringDocTest {
     static class SpringDocTestApp { }
 
     @Test
-    public void appLoads() throws Exception {
+    public void app_loads_ok() throws Exception {
         this.mockMvc.perform(MockMvcRequestBuilders.get("/"))
                 .andExpect(MockMvcResultMatchers.status().isOk())
                 .andExpect(MockMvcResultMatchers.forwardedUrl("index.html"));

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -175,7 +175,7 @@ protected Parameter customiseParameter(Parameter parameter, ParameterInfo parame
     }
 
     protected boolean isParamToIgnore(java.lang.reflect.Parameter parameter) {
-        if (parameter.isAnnotationPresent(PathVariable.class)) {
+        if (parameter.isAnnotationPresent(PathVariable.class) || parameter.isAnnotationPresent(RequestParam.class)) {
             return false;
         }
         return parameterBuilder.isAnnotationToIgnore(parameter) || PARAM_TYPES_TO_IGNORE.contains(parameter.getType()) || (AnnotationUtils.findAnnotation(parameter.getType(), Hidden.class) != null);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -46,8 +46,8 @@ IgnoredParameterAnnotationsDefault ignoredParameterAnnotationsDefault() {
     }
 
     @Bean
-    public OpenAPIBuilder openAPIBuilder(Optional<OpenAPI> openAPI, ApplicationContext context, SecurityParser securityParser) {
-        return new OpenAPIBuilder(openAPI, context, securityParser);
+    public OpenAPIBuilder openAPIBuilder(Optional<OpenAPI> openAPI, ApplicationContext context, SecurityParser securityParser,Optional<SecurityOAuth2Provider> springSecurityOAuth2Provider) {
+        return new OpenAPIBuilder(openAPI, context, securityParser,springSecurityOAuth2Provider);
     }
 
     @Bean

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -15,6 +15,8 @@ public final class Constants {
     public static final String SPRINGDOC_CACHE_DISABLED_VALUE= "${" + SPRINGDOC_CACHE_DISABLED + ":false}";
     public static final String SPRINGDOC_SWAGGER_UI_ENABLED = "springdoc.swagger-ui.enabled";
     public static final String SPRINGDOC_SWAGGER_UI_CONFIG_URL  ="springdoc.swagger-ui.configUrl";
+    public static final String SPRINGDOC_SWAGGER_UI_URL  ="springdoc.swagger-ui.url";
+    public static final String SPRINGDOC_SWAGGER_UI_URL_VALUE  ="${" + SPRINGDOC_SWAGGER_UI_URL + ":#{null}}";
     public static final String SPRINGDOC_SWAGGER_UI_CONFIG_URL_VALUE  ="${" + SPRINGDOC_SWAGGER_UI_CONFIG_URL + ":#{null}}";
     public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show-actuator";
     public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app73/HelloController.java
Patch:
@@ -4,7 +4,6 @@
 import io.swagger.v3.oas.annotations.enums.ParameterIn;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.*;
-import test.org.springdoc.api.app71.Dog;
 
 
 @RestController

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -18,8 +18,8 @@ public final class Constants {
     public static final String SPRINGDOC_SWAGGER_UI_CONFIG_URL_VALUE  ="${" + SPRINGDOC_SWAGGER_UI_CONFIG_URL + ":#{null}}";
     public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show-actuator";
     public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";
-    public static final String SPRINGDOC_PACKAGES_TO_SCAN = "${springdoc.packagesToScan:#{null}}";
-    public static final String SPRINGDOC_PATHS_TO_MATCH = "${springdoc.pathsToMatch:#{null}}";
+    public static final String SPRINGDOC_PACKAGES_TO_SCAN = "${springdoc.packages-to-scan:#{null}}";
+    public static final String SPRINGDOC_PATHS_TO_MATCH = "${springdoc.paths-to-match:#{null}}";
     public static final String SPRINGDOC_ACTUATOR_TAG = "Actuator";
     public static final String DEFAULT_WEB_JARS_PREFIX_URL = "/webjars";
     public static final String WEB_JARS_PREFIX_URL = "${springdoc.webjars.prefix:#{T(org.springdoc.core.Constants).DEFAULT_WEB_JARS_PREFIX_URL}}";

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app64/SpringDocApp64Test.java
Patch:
@@ -8,11 +8,11 @@ public class SpringDocApp64Test extends AbstractSpringDocTest {
 
     @BeforeClass
     public static void beforeClass() {
-        System.setProperty("springdoc.pathsToMatch", "/v1, /api/**");
+        System.setProperty("springdoc.paths-to-match", "/v1, /api/**");
     }
 
     @AfterClass
     public static void afterClass() {
-        System.clearProperty("springdoc.pathsToMatch");
+        System.clearProperty("springdoc.paths-to-match");
     }
 }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.annotation.JsonView;
 import io.swagger.v3.oas.annotations.Hidden;
+import io.swagger.v3.oas.annotations.enums.ParameterIn;
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.Operation;
 import io.swagger.v3.oas.models.media.Schema;
@@ -224,9 +225,8 @@ private Parameter buildParams(ParameterInfo parameterInfo, Components components
             requestInfo = new RequestInfo(ParameterType.PATH_PARAM, pathVar.value(), Boolean.TRUE, null);
             parameter = buildParam(parameterInfo, components, requestInfo, jsonView);
         }
-
         // By default
-        if (RequestMethod.GET.equals(requestMethod)) {
+        if (RequestMethod.GET.equals(requestMethod) || (parameterInfo.getParameterModel() != null && ParameterIn.PATH.toString().equals(parameterInfo.getParameterModel().getIn()))) {
             parameter = this.buildParam(QUERY_PARAM, components, parameterInfo, Boolean.TRUE, null, jsonView);
         }
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigProperties.java
Patch:
@@ -134,8 +134,7 @@ public static void setSwaggerUrls(List<SwaggerUrl> swaggerUrls) {
     public static void addUrl(String url) {
         swaggerUrls.forEach(elt ->
         {
-            if (StringUtils.isEmpty(elt.url))
-                elt.setUrl(url + DEFAULT_PATH_SEPARATOR + elt.getName());
+            elt.setUrl(url + DEFAULT_PATH_SEPARATOR + elt.getName());
         });
     }
 

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -45,8 +45,8 @@ public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder req
     public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
                            AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
                            RequestMappingInfoHandlerMapping requestMappingHandlerMapping,
-                           Optional<List<OpenApiCustomiser>> openApiCustomisers, List<String> pathsToMatch, List<String> packagesToScan) {
-        super(openAPIBuilder, requestBuilder, responseBuilder, operationParser, openApiCustomisers, pathsToMatch, packagesToScan);
+                           Optional<List<OpenApiCustomiser>> openApiCustomisers, List<String> pathsToMatch, List<String> packagesToScan, boolean cacheDisabled) {
+        super(openAPIBuilder, requestBuilder, responseBuilder, operationParser, openApiCustomisers, pathsToMatch, packagesToScan, cacheDisabled);
         this.requestMappingHandlerMapping = requestMappingHandlerMapping;
     }
 

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -54,8 +54,8 @@ public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder req
                            AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
                            RequestMappingInfoHandlerMapping requestMappingHandlerMapping, Optional<ActuatorProvider> servletContextProvider,
                            Optional<List<OpenApiCustomiser>> openApiCustomisers, List<String> pathsToMatch, List<String> packagesToScan,
-                           boolean showActuator) {
-        super(openAPIBuilder, requestBuilder, responseBuilder, operationParser, openApiCustomisers, pathsToMatch, packagesToScan);
+                           boolean showActuator,boolean cacheDisabled) {
+        super(openAPIBuilder, requestBuilder, responseBuilder, operationParser, openApiCustomisers, pathsToMatch, packagesToScan,cacheDisabled);
         this.requestMappingHandlerMapping = requestMappingHandlerMapping;
         this.servletContextProvider = servletContextProvider;
         this.showActuator = showActuator;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -20,7 +20,7 @@ public final class Constants {
     public static final String DEFAULT_WEB_JARS_PREFIX_URL = "/webjars";
     public static final String WEB_JARS_PREFIX_URL = "${springdoc.webjars.prefix:#{T(org.springdoc.core.Constants).DEFAULT_WEB_JARS_PREFIX_URL}}";
     public static final String SWAGGER_UI_URL = "/swagger-ui/index.html";
-    public static final String  SWAGGER_UI_OAUTH_REDIRECT_URL  = "/swagger-ui/oauth2-redirect.html";
+    public static final String SWAGGER_UI_OAUTH_REDIRECT_URL = "/swagger-ui/oauth2-redirect.html";
     public static final String APPLICATION_OPENAPI_YAML = "application/vnd.oai.openapi";
     public static final String DEFAULT_SWAGGER_UI_PATH = DEFAULT_PATH_SEPARATOR + "swagger-ui.html";
     public static final String SWAGGER_UI_PATH = "${springdoc.swagger-ui.path:#{T(org.springdoc.core.Constants).DEFAULT_SWAGGER_UI_PATH}}";

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigProperties.java
Patch:
@@ -110,7 +110,7 @@ public class SwaggerUiConfigProperties {
     /**
      * OAuth redirect URL.
      */
-    private String oauth2RedirectUrl=SWAGGER_UI_OAUTH_REDIRECT_URL;
+    private String oauth2RedirectUrl = SWAGGER_UI_OAUTH_REDIRECT_URL;
     private String url;
 
     public static void addGroup(String group) {

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerWelcome.java
Patch:
@@ -97,6 +97,6 @@ private void calculateUiRootPath() {
             sbUrl.append(mvcServletPath);
         if (swaggerPath.contains(DEFAULT_PATH_SEPARATOR))
             sbUrl.append(swaggerPath.substring(0, swaggerPath.lastIndexOf(DEFAULT_PATH_SEPARATOR)));
-        this.uiRootPath=sbUrl.toString();
+        this.uiRootPath = sbUrl.toString();
     }
 }
\ No newline at end of file

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app5/SpringDocOauthContextPathTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-@SpringBootTest(properties ="server.servlet.context-path=/context-path")
+@SpringBootTest(properties = "server.servlet.context-path=/context-path")
 public class SpringDocOauthContextPathTest extends AbstractSpringDocTest {
 
     @Test

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -23,15 +23,15 @@
 @ActiveProfiles("test")
 public abstract class AbstractSpringDocTest {
 
+    protected String groupName = "";
     @Autowired
     private WebTestClient webTestClient;
-
     @Autowired
     private ObjectMapper objectMapper;
 
     @Test
     public void testApp() throws Exception {
-        EntityExchangeResult<byte[]> getResult = webTestClient.get().uri(Constants.DEFAULT_API_DOCS_URL).exchange()
+        EntityExchangeResult<byte[]> getResult = webTestClient.get().uri(Constants.DEFAULT_API_DOCS_URL + groupName).exchange()
                 .expectStatus().isOk().expectBody().returnResult();
 
         String result = new String(getResult.getResponseBody());

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/MultipleOpenApiResource.java
Patch:
@@ -24,15 +24,14 @@
 @RestController
 public class MultipleOpenApiResource implements InitializingBean {
 
-    private Map<String, OpenApiResource> groupedOpenApiResources;
     private final List<GroupedOpenApi> groupedOpenApis;
     private final ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder;
     private final AbstractRequestBuilder requestBuilder;
     private final AbstractResponseBuilder responseBuilder;
     private final OperationBuilder operationParser;
     private final RequestMappingInfoHandlerMapping requestMappingHandlerMapping;
     private final Optional<ActuatorProvider> servletContextProvider;
-
+    private Map<String, OpenApiResource> groupedOpenApiResources;
     @Value(SPRINGDOC_SHOW_ACTUATOR_VALUE)
     private boolean showActuator;
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app71/Dog.java
Patch:
@@ -16,5 +16,4 @@ public class Dog {
     String displayName;
 
 
-
 }
\ No newline at end of file

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigProperties.java
Patch:
@@ -27,7 +27,7 @@
 @Configuration
 @ConfigurationProperties(prefix = "springdoc.swagger-ui")
 @ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
-@ConditionalOnBean(OpenAPIBuilder.class)
+@ConditionalOnBean(SpringDocConfiguration.class)
 public class SwaggerUiConfigProperties {
 
     public static final String CONFIG_URL_PROPERTY = "configUrl";

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerConfig.java
Patch:
@@ -1,6 +1,6 @@
 package org.springdoc.ui;
 
-import org.springdoc.core.OpenAPIBuilder;
+import org.springdoc.core.SpringDocConfiguration;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
@@ -15,7 +15,7 @@
 
 @Configuration
 @ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
-@ConditionalOnBean(OpenAPIBuilder.class)
+@ConditionalOnBean(SpringDocConfiguration.class)
 @SuppressWarnings("deprecation")
 public class SwaggerConfig extends WebMvcConfigurerAdapter { // NOSONAR
 

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocConfigPathsTest.java
Patch:
@@ -5,10 +5,8 @@
 import org.springframework.test.web.servlet.MvcResult;
 import test.org.springdoc.ui.AbstractSpringDocTest;
 
-import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertTrue;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 @SpringBootTest(properties = {

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocRedirectConfigUrlTest.java
Patch:
@@ -13,7 +13,7 @@
         "springdoc.swagger-ui.configUrl=/foo/bar",
         "springdoc.swagger-ui.url=/batz" // ignored since configUrl is configured
 })
-public class SpringDocApp1RedirectConfigUrlTest extends AbstractSpringDocTest {
+public class SpringDocRedirectConfigUrlTest extends AbstractSpringDocTest {
 
     @Test
     public void shouldRedirectWithConfigUrlIgnoringQueryParams() throws Exception {

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocRedirectDefaultTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
-public class SpringDocApp1RedirectDefaultTest extends AbstractSpringDocTest {
+public class SpringDocRedirectDefaultTest extends AbstractSpringDocTest {
 
     @Test
     public void shouldRedirectWithDefaultQueryParams() throws Exception {

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocRedirectWithConfigTest.java
Patch:
@@ -15,7 +15,7 @@
         "springdoc.swagger-ui.validatorUrl=/foo/validate",
         "springdoc.api-docs.path=/baf/batz"
 })
-public class SpringDocApp1RedirectWithConfigTest extends AbstractSpringDocTest {
+public class SpringDocRedirectWithConfigTest extends AbstractSpringDocTest {
 
     @Test
     public void shouldRedirectWithConfiguredParams() throws Exception {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -20,6 +20,7 @@ public final class Constants {
     public static final String DEFAULT_WEB_JARS_PREFIX_URL = "/webjars";
     public static final String WEB_JARS_PREFIX_URL = "${springdoc.webjars.prefix:#{T(org.springdoc.core.Constants).DEFAULT_WEB_JARS_PREFIX_URL}}";
     public static final String SWAGGER_UI_URL = "/swagger-ui/index.html";
+    public static final String  SWAGGER_UI_OAUTH_REDIRECT_URL  = "/swagger-ui/oauth2-redirect.html";
     public static final String APPLICATION_OPENAPI_YAML = "application/vnd.oai.openapi";
     public static final String DEFAULT_SWAGGER_UI_PATH = DEFAULT_PATH_SEPARATOR + "swagger-ui.html";
     public static final String SWAGGER_UI_PATH = "${springdoc.swagger-ui.path:#{T(org.springdoc.core.Constants).DEFAULT_SWAGGER_UI_PATH}}";

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SwaggerUiConfigProperties.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.stream.Collectors;
 
 import static org.springdoc.core.Constants.SPRINGDOC_SWAGGER_UI_ENABLED;
+import static org.springdoc.core.Constants.SWAGGER_UI_OAUTH_REDIRECT_URL;
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 
 /**
@@ -109,7 +110,7 @@ public class SwaggerUiConfigProperties {
     /**
      * OAuth redirect URL.
      */
-    private String oauth2RedirectUrl;
+    private String oauth2RedirectUrl=SWAGGER_UI_OAUTH_REDIRECT_URL;
     private String url;
 
     public static void addGroup(String group) {

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -14,6 +14,7 @@
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.util.AntPathMatcher;
 import org.springframework.util.CollectionUtils;
+import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.method.HandlerMethod;
@@ -200,8 +201,8 @@ private void calculateJsonView(io.swagger.v3.oas.annotations.Operation apiOperat
              */
             jsonViewAnnotationForRequestBody = (JsonView) Arrays.stream(ReflectionUtils.getParameterAnnotations(method))
                     .filter(arr -> Arrays.stream(arr)
-                            .anyMatch(annotation -> annotation.annotationType()
-                                    .equals(io.swagger.v3.oas.annotations.parameters.RequestBody.class)))
+                            .anyMatch(annotation -> (annotation.annotationType()
+                                    .equals(io.swagger.v3.oas.annotations.parameters.RequestBody.class) || annotation.annotationType().equals(RequestBody.class))))
                     .flatMap(Arrays::stream).filter(annotation -> annotation.annotationType().equals(JsonView.class))
                     .reduce((a, b) -> null).orElse(jsonViewAnnotation);
         }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -14,7 +14,7 @@ public final class Constants {
     public static final String SPRINGDOC_SWAGGER_UI_ENABLED = "springdoc.swagger-ui.enabled";
     public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show-actuator";
     public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";
-    public static final String SPRINGDOC_PROTOCOL_RELATIVE_BASEURL = "springdoc.protocol-relativ-baseurl";
+    public static final String SPRINGDOC_PROTOCOL_RELATIVE_BASEURL = "springdoc.protocol-relative-baseurl";
     public static final String SPRINGDOC_PROTOCOL_RELATIVE_BASEURL_VALUE = "${" + SPRINGDOC_PROTOCOL_RELATIVE_BASEURL + ":false}";
     public static final String SPRINGDOC_PACKAGES_TO_SCAN = "${springdoc.packagesToScan:#{null}}";
     public static final String SPRINGDOC_PATHS_TO_MATCH = "${springdoc.pathsToMatch:#{null}}";

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app71/SpringDocApp71Test.java
Patch:
@@ -3,6 +3,6 @@
 import org.springframework.test.context.TestPropertySource;
 import test.org.springdoc.api.AbstractSpringDocTest;
 
-@TestPropertySource(properties = "springdoc.protocol-relativ-baseurl=true")
+@TestPropertySource(properties = "springdoc.protocol-relative-baseurl=true")
 public class SpringDocApp71Test extends AbstractSpringDocTest {
 }

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -81,7 +81,7 @@ protected void getPaths(Map<String, Object> restControllers) {
     }
 
     private void calculateServerUrl(ServerHttpRequest serverHttpRequest, String apiDocsUrl) {
-        String requestUrl = serverHttpRequest.getURI().toString();
+        String requestUrl = decode(serverHttpRequest.getURI().toString());
         String serverBaseUrl = requestUrl.substring(0, requestUrl.length() - apiDocsUrl.length());
         openAPIBuilder.setServerBaseUrl(serverBaseUrl);
     }

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/SpringDocApp68Test.java
Patch:
@@ -59,7 +59,7 @@ public void testApp3() throws Exception {
 
     @Test
     public void testApp4() throws Exception {
-        mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL + "/groups"))
+        mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL + "/groups test"))
                 .andExpect(status().isOk())
                 .andExpect(jsonPath("$.openapi", is("3.0.1")))
                 .andExpect(content().json(getContent("results/app684.json"), true));

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/SpringDocTestApp.java
Patch:
@@ -43,7 +43,7 @@ public GroupedOpenApi petOpenApi() {
     @Bean
     public GroupedOpenApi groupOpenApi() {
         return GroupedOpenApi.builder()
-                .setGroup("groups")
+                .setGroup("groups test")
                 .pathsToMatch("/v1/**")
                 .packagesToScan("test.org.springdoc.api.app68.api.user", "test.org.springdoc.api.app68.api.store")
                 .build();

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -7,6 +7,7 @@
 import org.springdoc.core.customizers.PropertyCustomizer;
 import org.springframework.beans.factory.config.ConfigurableBeanFactory;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -47,6 +48,7 @@ public OpenAPIBuilder openAPIBuilder(Optional<OpenAPI> openAPI, ApplicationConte
     }
 
     @Bean
+    @ConditionalOnWebApplication
     public OperationBuilder operationBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
                                              SecurityParser securityParser, OpenAPIBuilder openAPIBuilder, PropertyResolverUtils propertyResolverUtils) {
         return new OperationBuilder(parameterBuilder, requestBodyBuilder,
@@ -59,6 +61,7 @@ public PropertyResolverUtils propertyResolverUtils(ConfigurableBeanFactory facto
     }
 
     @Bean
+    @ConditionalOnWebApplication
     public RequestBodyBuilder requestBodyBuilder(AbstractParameterBuilder parameterBuilder) {
         return new RequestBodyBuilder(parameterBuilder);
     }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/PropertyCustomizingConverter.java
Patch:
@@ -5,7 +5,6 @@
 import io.swagger.v3.core.converter.ModelConverterContext;
 import io.swagger.v3.oas.models.media.Schema;
 import org.springdoc.core.customizers.PropertyCustomizer;
-import org.springframework.util.CollectionUtils;
 
 import java.util.Iterator;
 import java.util.List;

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/SpringDocWebFluxConfiguration.java
Patch:
@@ -5,6 +5,7 @@
 import org.springdoc.core.customizers.OperationCustomizer;
 import org.springdoc.core.customizers.ParameterCustomizer;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
@@ -16,6 +17,7 @@
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
 
 @Configuration
+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 public class SpringDocWebFluxConfiguration {
 

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/MultipleOpenApiSupportConfiguration.java
Patch:
@@ -7,6 +7,7 @@
 import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping;
@@ -18,6 +19,7 @@
 
 
 @Configuration
+@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
 @ConditionalOnBean(GroupedOpenApi.class)
 @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 public class MultipleOpenApiSupportConfiguration {

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/SpringDocApp68Test.java
Patch:
@@ -15,9 +15,7 @@
 
 import static org.hamcrest.Matchers.is;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
 import static test.org.springdoc.utils.FileUtils.getContent;
 
 @RunWith(SpringRunner.class)

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app70/customizer/OperationCustomizer.java
Patch:
@@ -1,10 +1,9 @@
 package test.org.springdoc.api.app70.customizer;
 
+import io.swagger.v3.oas.models.Operation;
 import org.springframework.stereotype.Component;
 import org.springframework.web.method.HandlerMethod;
 
-import io.swagger.v3.oas.models.Operation;
-
 @Component
 public class OperationCustomizer implements org.springdoc.core.customizers.OperationCustomizer {
 	@Override

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app70/customizer/ParameterCustomizer.java
Patch:
@@ -1,10 +1,9 @@
 package test.org.springdoc.api.app70.customizer;
 
+import io.swagger.v3.oas.models.parameters.Parameter;
 import org.springframework.stereotype.Component;
 import org.springframework.web.method.HandlerMethod;
 
-import io.swagger.v3.oas.models.parameters.Parameter;
-
 @Component
 public class ParameterCustomizer implements org.springdoc.core.customizers.ParameterCustomizer {
 	@Override

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerConfig.java
Patch:
@@ -1,6 +1,8 @@
 package org.springdoc.ui;
 
+import org.springdoc.core.OpenAPIBuilder;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -13,6 +15,7 @@
 
 @Configuration
 @ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
+@ConditionalOnBean(OpenAPIBuilder.class)
 @SuppressWarnings("deprecation")
 public class SwaggerConfig extends WebMvcConfigurerAdapter { // NOSONAR
 

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/SpringDocWebFluxConfiguration.java
Patch:
@@ -14,6 +14,7 @@
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
 
 @Configuration
+@ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 public class SpringDocWebFluxConfiguration {
 
     @Bean

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectConfigUrlTest.java
Patch:
@@ -3,6 +3,8 @@
 import org.hamcrest.Matchers;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.springdoc.core.SpringDocConfiguration;
+import org.springdoc.core.SpringDocWebFluxConfiguration;
 import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springdoc.ui.SwaggerWelcome;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -19,7 +21,7 @@
         "springdoc.swagger-ui.url=/batz" // ignored since configUrl is configured
 })
 @ActiveProfiles("test")
-@ContextConfiguration(classes = {SwaggerWelcome.class, SwaggerUiConfigProperties.class})
+@ContextConfiguration(classes = {SpringDocConfiguration.class, SpringDocWebFluxConfiguration.class, SwaggerUiConfigProperties.class ,SwaggerWelcome.class})
 public class SpringDocApp1RedirectConfigUrlTest {
 
     @Autowired

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectDefaultTest.java
Patch:
@@ -3,6 +3,8 @@
 import org.hamcrest.Matchers;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.springdoc.core.SpringDocConfiguration;
+import org.springdoc.core.SpringDocWebFluxConfiguration;
 import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springdoc.ui.SwaggerWelcome;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -16,7 +18,7 @@
 @RunWith(SpringRunner.class)
 @WebFluxTest()
 @ActiveProfiles("test")
-@ContextConfiguration(classes = {SwaggerWelcome.class, SwaggerUiConfigProperties.class})
+@ContextConfiguration(classes = {SpringDocConfiguration.class, SpringDocWebFluxConfiguration.class, SwaggerUiConfigProperties.class ,SwaggerWelcome.class})
 public class SpringDocApp1RedirectDefaultTest {
 
     @Autowired

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectWithConfigTest.java
Patch:
@@ -3,6 +3,8 @@
 import org.hamcrest.Matchers;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.springdoc.core.SpringDocConfiguration;
+import org.springdoc.core.SpringDocWebFluxConfiguration;
 import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springdoc.ui.SwaggerWelcome;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -18,7 +20,7 @@
         "springdoc.api-docs.path=/baf/batz"
 })
 @ActiveProfiles("test")
-@ContextConfiguration(classes = {SwaggerWelcome.class, SwaggerUiConfigProperties.class})
+@ContextConfiguration(classes = {SpringDocConfiguration.class, SpringDocWebFluxConfiguration.class, SwaggerUiConfigProperties.class ,SwaggerWelcome.class})
 public class SpringDocApp1RedirectWithConfigTest {
     @Autowired
     private WebTestClient webTestClient;

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1Test.java
Patch:
@@ -3,6 +3,8 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.springdoc.core.SpringDocConfiguration;
+import org.springdoc.core.SpringDocWebFluxConfiguration;
 import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springdoc.ui.SwaggerWelcome;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -15,7 +17,7 @@
 @RunWith(SpringRunner.class)
 @WebFluxTest
 @ActiveProfiles("test")
-@ContextConfiguration(classes = {SwaggerWelcome.class, SwaggerUiConfigProperties.class})
+@ContextConfiguration(classes = {SpringDocConfiguration.class, SpringDocWebFluxConfiguration.class, SwaggerUiConfigProperties.class ,SwaggerWelcome.class})
 public class SpringDocApp1Test {
 
     @Autowired

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app2/SpringDocApp2Test.java
Patch:
@@ -3,6 +3,8 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.springdoc.core.SpringDocConfiguration;
+import org.springdoc.core.SpringDocWebFluxConfiguration;
 import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springdoc.ui.SwaggerWelcome;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -15,7 +17,7 @@
 @RunWith(SpringRunner.class)
 @WebFluxTest(properties = "springdoc.swagger-ui.enabled=false")
 @ActiveProfiles("test")
-@ContextConfiguration(classes = {SwaggerWelcome.class, SwaggerUiConfigProperties.class})
+@ContextConfiguration(classes = {SpringDocConfiguration.class, SpringDocWebFluxConfiguration.class, SwaggerUiConfigProperties.class ,SwaggerWelcome.class})
 public class SpringDocApp2Test {
 
     @Autowired

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/SpringDocWebMvcConfiguration.java
Patch:
@@ -15,10 +15,10 @@
 import static org.springdoc.core.Constants.SPRINGDOC_ENABLED;
 
 @Configuration
+@ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 public class SpringDocWebMvcConfiguration {
 
     @Bean
-    @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
     public OpenApiResource openApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
                                            AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
                                            RequestMappingInfoHandlerMapping requestMappingHandlerMapping, Optional<ActuatorProvider> servletContextProvider,

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerConfig.java
Patch:
@@ -4,7 +4,6 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.web.servlet.config.annotation.EnableWebMvc;
 import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
 
@@ -13,7 +12,6 @@
 
 
 @Configuration
-@EnableWebMvc
 @ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
 @SuppressWarnings("deprecation")
 public class SwaggerConfig extends WebMvcConfigurerAdapter { // NOSONAR

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -8,11 +8,11 @@ public final class Constants {
     public static final String DEFAULT_SERVER_DESCRIPTION = "Generated server url";
     public static final String API_DOCS_URL = "${springdoc.api-docs.path:#{T(org.springdoc.core.Constants).DEFAULT_API_DOCS_URL}}";
     public static final String SWAGGGER_CONFIG_FILE = "swagger-config";
-    public static final String SWAGGER_CONFIG_URL =API_DOCS_URL +DEFAULT_PATH_SEPARATOR+ SWAGGGER_CONFIG_FILE;
+    public static final String SWAGGER_CONFIG_URL = API_DOCS_URL + DEFAULT_PATH_SEPARATOR + SWAGGGER_CONFIG_FILE;
     public static final String DEFAULT_API_DOCS_URL_YAML = API_DOCS_URL + ".yaml";
     public static final String SPRINGDOC_ENABLED = "springdoc.api-docs.enabled";
     public static final String SPRINGDOC_GROUPS_ENABLED = "springdoc.api-docs.groups.enabled";
-    public static final String SPRINGDOC_GROUPS_ENABLED_VALUE =  "${" + SPRINGDOC_GROUPS_ENABLED + ":false}";
+    public static final String SPRINGDOC_GROUPS_ENABLED_VALUE = "${" + SPRINGDOC_GROUPS_ENABLED + ":false}";
     public static final String SPRINGDOC_SWAGGER_UI_ENABLED = "springdoc.swagger-ui.enabled";
     public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show-actuator";
     public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GroupedOpenApi.java
Patch:
@@ -22,7 +22,7 @@ private GroupedOpenApi(Builder builder) {
         this.openApiCustomisers = Objects.requireNonNull(builder.openApiCustomisers);
         SwaggerUiConfigProperties.addGroup(this.group);
         if (CollectionUtils.isEmpty(this.pathsToMatch) && CollectionUtils.isEmpty(this.packagesToScan))
-            throw new IllegalStateException("Packages to scan or paths to filter can not be both null for the group:"+ this.group);
+            throw new IllegalStateException("Packages to scan or paths to filter can not be both null for the group:" + this.group);
     }
 
     public static Builder builder() {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OperationBuilder.java
Patch:
@@ -38,7 +38,7 @@ public OperationBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBu
         this.requestBodyBuilder = requestBodyBuilder;
         this.securityParser = securityParser;
         this.openAPIBuilder = openAPIBuilder;
-        this.propertyResolverUtils=propertyResolverUtils;
+        this.propertyResolverUtils = propertyResolverUtils;
     }
 
     public OpenAPI parse(Components components, io.swagger.v3.oas.annotations.Operation apiOperation,

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -39,7 +39,7 @@ public OpenAPIBuilder openAPIBuilder(Optional<OpenAPI> openAPI, ApplicationConte
     public OperationBuilder operationBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
                                              SecurityParser securityParser, OpenAPIBuilder openAPIBuilder, PropertyResolverUtils propertyResolverUtils) {
         return new OperationBuilder(parameterBuilder, requestBodyBuilder,
-                securityParser, openAPIBuilder,propertyResolverUtils);
+                securityParser, openAPIBuilder, propertyResolverUtils);
     }
 
     @Bean

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerWelcome.java
Patch:
@@ -79,7 +79,7 @@ private void buildConfigUrl(HttpServletRequest request) {
             String swaggerConfigUrl = url + DEFAULT_PATH_SEPARATOR + SWAGGGER_CONFIG_FILE;
             swaggerUiConfig.setConfigUrl(swaggerConfigUrl);
             if (groupsEnabled)
-                swaggerUiConfig.addUrl(url);
+                SwaggerUiConfigProperties.addUrl(url);
             else
                 swaggerUiConfig.setUrl(url);
         }

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectConfigUrlTest.java
Patch:
@@ -1,14 +1,11 @@
 package test.org.springdoc.ui.app1;
 
 import org.junit.Test;
-import org.springdoc.core.SwaggerUiConfigProperties;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.web.servlet.MvcResult;
 import test.org.springdoc.ui.AbstractSpringDocTest;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectWithConfigTest.java
Patch:
@@ -32,7 +32,7 @@ public void shouldRedirectWithConfiguredParams() throws Exception {
                 .value("Location", Matchers.is("/webjars/swagger-ui/index.html?configUrl=/baf/batz/swagger-config"));
 
         webTestClient.get().uri("/baf/batz/swagger-config").exchange()
-                .expectStatus().isOk().expectBody().jsonPath("$.validatorUrl","/foo/validate" );
+                .expectStatus().isOk().expectBody().jsonPath("$.validatorUrl", "/foo/validate");
     }
 
 }
\ No newline at end of file

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -55,7 +55,7 @@ public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder req
                            AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
                            RequestMappingInfoHandlerMapping requestMappingHandlerMapping, Optional<ActuatorProvider> servletContextProvider,
                            Optional<List<OpenApiCustomiser>> openApiCustomisers, List<String> pathsToMatch, List<String> packagesToScan) {
-        super(openAPIBuilder, requestBuilder, responseBuilder, operationParser, openApiCustomisers, pathsToMatch,packagesToScan);
+        super(openAPIBuilder, requestBuilder, responseBuilder, operationParser, openApiCustomisers, pathsToMatch, packagesToScan);
         this.requestMappingHandlerMapping = requestMappingHandlerMapping;
         this.servletContextProvider = servletContextProvider;
     }

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/SpringDocWebMvcConfiguration.java
Patch:
@@ -24,11 +24,11 @@ public class SpringDocWebMvcConfiguration {
     @Bean
     @ConditionalOnProperty(name = SPRINGDOC_GROUPS_ENABLED, matchIfMissing = false)
     public MultipleOpenApiResource multipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
-                                                           ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
+                                                           ObjectFactory<OpenAPIBuilder> defaultOpenAPIBuilder, AbstractRequestBuilder requestBuilder,
                                                            AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
                                                            RequestMappingInfoHandlerMapping requestMappingHandlerMapping, Optional<ActuatorProvider> servletContextProvider) {
         return new MultipleOpenApiResource(groupedOpenApis,
-                defaultOpenAPIBuilder, openAPIBuilder, requestBuilder,
+                defaultOpenAPIBuilder, requestBuilder,
                 responseBuilder, operationParser,
                 requestMappingHandlerMapping, servletContextProvider);
     }

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app14/HelloController.java
Patch:
@@ -10,7 +10,7 @@
 @RestController
 public class HelloController {
 
-    @GetMapping( "/persons")
+    @GetMapping("/persons")
     public void persons(@Valid @NotBlank String name) {
 
     }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -14,7 +14,7 @@ public final class Constants {
     public static final String SPRINGDOC_GROUPS_ENABLED = "springdoc.api-docs.groups.enabled";
     public static final String SPRINGDOC_GROUPS_ENABLED_VALUE =  "${" + SPRINGDOC_GROUPS_ENABLED + ":false}";
     public static final String SPRINGDOC_SWAGGER_UI_ENABLED = "springdoc.swagger-ui.enabled";
-    public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show.actuator";
+    public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show-actuator";
     public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";
     public static final String SPRINGDOC_PACKAGES_TO_SCAN = "${springdoc.packagesToScan:#{null}}";
     public static final String SPRINGDOC_PATHS_TO_MATCH = "${springdoc.pathsToMatch:#{null}}";

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app36/SpringDocApp36Test.java
Patch:
@@ -17,7 +17,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest(properties = "springdoc.show.actuator=true")
+@SpringBootTest(properties = "springdoc.show-actuator=true")
 @ActiveProfiles("test")
 @AutoConfigureMockMvc
 public class SpringDocApp36Test {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/MethodAttributes.java
Patch:
@@ -86,7 +86,7 @@ public void calculateConsumesProduces(Method method) {
 
     private void fillMethods(String[] produces, String[] consumes) {
         methodProduces = ArrayUtils.isNotEmpty(produces) ? produces : new String[]{MediaType.ALL_VALUE};
-        methodConsumes = ArrayUtils.isNotEmpty(consumes) ? consumes : new String[]{MediaType.ALL_VALUE};
+        methodConsumes = ArrayUtils.isNotEmpty(consumes) ? consumes : new String[]{MediaType.APPLICATION_JSON_VALUE};
     }
 
     public String[] getAllConsumes() {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -7,9 +7,12 @@ public final class Constants {
     public static final String DEFAULT_API_DOCS_URL = "/v3/api-docs";
     public static final String DEFAULT_SERVER_DESCRIPTION = "Generated server url";
     public static final String API_DOCS_URL = "${springdoc.api-docs.path:#{T(org.springdoc.core.Constants).DEFAULT_API_DOCS_URL}}";
+    public static final String SWAGGGER_CONFIG_FILE = "swagger-config";
+    public static final String SWAGGER_CONFIG_URL =API_DOCS_URL +DEFAULT_PATH_SEPARATOR+ SWAGGGER_CONFIG_FILE;
     public static final String DEFAULT_API_DOCS_URL_YAML = API_DOCS_URL + ".yaml";
     public static final String SPRINGDOC_ENABLED = "springdoc.api-docs.enabled";
     public static final String SPRINGDOC_GROUPS_ENABLED = "springdoc.api-docs.groups.enabled";
+    public static final String SPRINGDOC_GROUPS_ENABLED_VALUE =  "${" + SPRINGDOC_GROUPS_ENABLED + ":false}";
     public static final String SPRINGDOC_SWAGGER_UI_ENABLED = "springdoc.swagger-ui.enabled";
     public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show.actuator";
     public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GroupedOpenApi.java
Patch:
@@ -20,6 +20,7 @@ private GroupedOpenApi(Builder builder) {
         this.pathsToMatch = builder.pathsToMatch;
         this.packagesToScan = builder.packagesToScan;
         this.openApiCustomisers = Objects.requireNonNull(builder.openApiCustomisers);
+        SwaggerUiConfigProperties.addGroup(this.group);
         if (CollectionUtils.isEmpty(this.pathsToMatch) && CollectionUtils.isEmpty(this.packagesToScan))
             throw new IllegalStateException("Packages to scan or paths to filter can not be both null for the group:"+ this.group);
     }

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectDefaultTest.java
Patch:
@@ -16,7 +16,7 @@ public void shouldRedirectWithDefaultQueryParams() throws Exception {
                 .andExpect(status().isFound()).andReturn();
 
         String locationHeader = mvcResult.getResponse().getHeader("Location");
-        assertEquals("/swagger-ui/index.html?url=/v3/api-docs&validatorUrl=", locationHeader);
+        assertEquals("/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config", locationHeader);
     }
 
 }
\ No newline at end of file

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1RedirectDefaultTest.java
Patch:
@@ -27,7 +27,7 @@ public void shouldRedirectWithDefaultQueryParams() throws Exception {
         WebTestClient.ResponseSpec responseSpec = webTestClient.get().uri("/swagger-ui.html").exchange()
                 .expectStatus().isTemporaryRedirect();
         responseSpec.expectHeader()
-                .value("Location", Matchers.is("/webjars/swagger-ui/index.html?url=/v3/api-docs&validatorUrl="));
+                .value("Location", Matchers.is("/webjars/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config"));
 
     }
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractResponseBuilder.java
Patch:
@@ -13,6 +13,7 @@
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.core.annotation.AnnotatedElementUtils;
+import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
@@ -226,7 +227,7 @@ private Schema<?> calculateSchema(Components components, Type returnType, JsonVi
         }
         if (returnType instanceof ParameterizedType) {
             schemaN = calculateSchemaFromParameterizedType(components, (ParameterizedType) returnType, jsonView);
-        } else if (ResponseEntity.class.getName().equals(returnType.getTypeName())) {
+        } else if (ResponseEntity.class.getName().equals(returnType.getTypeName()) || HttpEntity.class.getName().equals(returnType.getTypeName())) {
             schemaN = AnnotationsUtils.resolveSchemaFromType(String.class, null, jsonView);
         }
         if (schemaN == null) {

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/ResponseBuilder.java
Patch:
@@ -4,6 +4,7 @@
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.media.ArraySchema;
 import io.swagger.v3.oas.models.media.Schema;
+import org.springframework.http.HttpEntity;
 import org.springframework.http.ResponseEntity;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
@@ -41,7 +42,7 @@ protected Schema calculateSchemaFromParameterizedType(Components components, Par
             } else {
                 schemaN = calculateFluxSchema(components, parameterizedType, jsonView);
             }
-        } else if (ResponseEntity.class.getName().contentEquals(parameterizedType.getRawType().getTypeName())) {
+        } else if (ResponseEntity.class.getName().contentEquals(parameterizedType.getRawType().getTypeName()) || HttpEntity.class.getName().contentEquals(parameterizedType.getRawType().getTypeName())) {
             schemaN = calculateSchemaParameterizedType(components, parameterizedType, jsonView);
         }
         return schemaN;

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/ResponseBuilder.java
Patch:
@@ -3,6 +3,7 @@
 import com.fasterxml.jackson.annotation.JsonView;
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.media.Schema;
+import org.springframework.http.HttpEntity;
 import org.springframework.http.ResponseEntity;
 
 import java.lang.reflect.ParameterizedType;
@@ -18,7 +19,7 @@ public ResponseBuilder(OperationBuilder operationBuilder) {
     protected Schema calculateSchemaFromParameterizedType(Components components, ParameterizedType parameterizedType,
                                                           JsonView jsonView) {
         Schema<?> schemaN = null;
-        if (ResponseEntity.class.getName().contentEquals(parameterizedType.getRawType().getTypeName())) {
+        if (ResponseEntity.class.getName().contentEquals(parameterizedType.getRawType().getTypeName()) || HttpEntity.class.getName().contentEquals(parameterizedType.getRawType().getTypeName())) {
             schemaN = calculateSchemaParameterizedType(components, parameterizedType, jsonView);
         }
         return schemaN;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -18,8 +18,8 @@ public final class Constants {
     public static final String SPRINGDOC_ACTUATOR_TAG = "Actuator";
     public static final String DEFAULT_WEB_JARS_PREFIX_URL = "/webjars";
     public static final String WEB_JARS_PREFIX_URL = "${springdoc.webjars.prefix:#{T(org.springdoc.core.Constants).DEFAULT_WEB_JARS_PREFIX_URL}}";
-    public static final String SWAGGER_UI_URL = "/swagger-ui/index.html?url=";
-    public static final String DEFAULT_VALIDATOR_URL = "&validatorUrl=";
+    public static final String SWAGGER_UI_URL = "/swagger-ui/index.html";
+    public static final String DEFAULT_VALIDATOR_URL = "";
     public static final String APPLICATION_OPENAPI_YAML = "application/vnd.oai.openapi";
     public static final String DEFAULT_SWAGGER_UI_PATH = DEFAULT_PATH_SEPARATOR + "swagger-ui.html";
     public static final String SWAGGER_UI_PATH = "${springdoc.swagger-ui.path:#{T(org.springdoc.core.Constants).DEFAULT_SWAGGER_UI_PATH}}";

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -18,8 +18,8 @@ public final class Constants {
     public static final String SPRINGDOC_ACTUATOR_TAG = "Actuator";
     public static final String DEFAULT_WEB_JARS_PREFIX_URL = "/webjars";
     public static final String WEB_JARS_PREFIX_URL = "${springdoc.webjars.prefix:#{T(org.springdoc.core.Constants).DEFAULT_WEB_JARS_PREFIX_URL}}";
-    public static final String SWAGGER_UI_URL = "/swagger-ui/index.html?url=";
-    public static final String DEFAULT_VALIDATOR_URL = "&validatorUrl=";
+    public static final String SWAGGER_UI_URL = "/swagger-ui/index.html";
+    public static final String DEFAULT_VALIDATOR_URL = "";
     public static final String APPLICATION_OPENAPI_YAML = "application/vnd.oai.openapi";
     public static final String DEFAULT_SWAGGER_UI_PATH = DEFAULT_PATH_SEPARATOR + "swagger-ui.html";
     public static final String SWAGGER_UI_PATH = "${springdoc.swagger-ui.path:#{T(org.springdoc.core.Constants).DEFAULT_SWAGGER_UI_PATH}}";

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocConfiguration.java
Patch:
@@ -37,9 +37,9 @@ public OpenAPIBuilder openAPIBuilder(Optional<OpenAPI> openAPI, ApplicationConte
 
     @Bean
     public OperationBuilder operationBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
-                                             SecurityParser securityParser, OpenAPIBuilder openAPIBuilder) {
+                                             SecurityParser securityParser, OpenAPIBuilder openAPIBuilder, PropertyResolverUtils propertyResolverUtils) {
         return new OperationBuilder(parameterBuilder, requestBodyBuilder,
-                securityParser, openAPIBuilder);
+                securityParser, openAPIBuilder,propertyResolverUtils);
     }
 
     @Bean

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app15/HelloController.java
Patch:
@@ -12,7 +12,7 @@
 public class HelloController {
 
     @GetMapping(value = "/persons")
-    @Operation(responses = @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(hidden = true))))
+    @Operation(description = "${springdoc.operation-descriptions.myOperation}", responses = @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(hidden = true))))
     public JSONObject persons() {
         return new JSONObject();
     }

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app15/SpringDocApp15Test.java
Patch:
@@ -1,7 +1,9 @@
 package test.org.springdoc.api.app15;
 
+import org.springframework.test.context.TestPropertySource;
 import test.org.springdoc.api.AbstractSpringDocTest;
 
+@TestPropertySource(properties = "springdoc.operation-descriptions.myOperation=My Desc")
 public class SpringDocApp15Test extends AbstractSpringDocTest {
 
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -342,8 +342,9 @@ private Map<String, io.swagger.v3.oas.annotations.Parameter> getApiParameters(Me
 
         Set<io.swagger.v3.oas.annotations.Parameters> apiParametersDoc = AnnotatedElementUtils
                 .findAllMergedAnnotations(method, io.swagger.v3.oas.annotations.Parameters.class);
-        Map<String, io.swagger.v3.oas.annotations.Parameter> apiParametersMap = apiParametersDoc.stream()
-                .flatMap(x -> Stream.of(x.value())).collect(Collectors.toMap(io.swagger.v3.oas.annotations.Parameter::name, x -> x));
+        LinkedHashMap<String, io.swagger.v3.oas.annotations.Parameter> apiParametersMap = apiParametersDoc.stream()
+                .flatMap(x -> Stream.of(x.value())).collect(Collectors.toMap(io.swagger.v3.oas.annotations.Parameter::name, x -> x, (e1, e2) -> e2,
+                        LinkedHashMap::new));
 
         Set<io.swagger.v3.oas.annotations.Parameters> apiParametersDocDeclaringClass = AnnotatedElementUtils
                 .findAllMergedAnnotations(declaringClass, io.swagger.v3.oas.annotations.Parameters.class);

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -55,14 +55,15 @@ protected AbstractOpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequest
 
     protected AbstractOpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
                                       AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
-                                      Optional<List<OpenApiCustomiser>> openApiCustomisers, List<String> pathsToMatch) {
+                                      Optional<List<OpenApiCustomiser>> openApiCustomisers, List<String> pathsToMatch, List<String> packagesToScan) {
         super();
         this.openAPIBuilder = openAPIBuilder;
         this.requestBuilder = requestBuilder;
         this.responseBuilder = responseBuilder;
         this.operationParser = operationParser;
         this.openApiCustomisers = openApiCustomisers;
         this.pathsToMatch = pathsToMatch;
+        this.packagesToScan = packagesToScan;
     }
 
     protected synchronized OpenAPI getOpenApi() {

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/MultipleOpenApiResource.java
Patch:
@@ -46,7 +46,7 @@ public MultipleOpenApiResource(List<GroupedOpenApi> groupedOpenApis,
                                 operationParser,
                                 requestMappingHandlerMapping,
                                 servletContextProvider,
-                                Optional.of(item.getOpenApiCustomisers()), item.getPathsToMatch()
+                                Optional.of(item.getOpenApiCustomisers()), item.getPathsToMatch(), item.getPackagesToScan()
                         )
                 ));
     }

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -54,8 +54,8 @@ public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder req
     public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
                            AbstractResponseBuilder responseBuilder, OperationBuilder operationParser,
                            RequestMappingInfoHandlerMapping requestMappingHandlerMapping, Optional<ActuatorProvider> servletContextProvider,
-                           Optional<List<OpenApiCustomiser>> openApiCustomisers, List<String> pathsToMatch) {
-        super(openAPIBuilder, requestBuilder, responseBuilder, operationParser, openApiCustomisers, pathsToMatch);
+                           Optional<List<OpenApiCustomiser>> openApiCustomisers, List<String> pathsToMatch, List<String> packagesToScan) {
+        super(openAPIBuilder, requestBuilder, responseBuilder, operationParser, openApiCustomisers, pathsToMatch,packagesToScan);
         this.requestMappingHandlerMapping = requestMappingHandlerMapping;
         this.servletContextProvider = servletContextProvider;
     }

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/pet/PetApiController.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app68.api;
+package test.org.springdoc.api.app68.api.pet;
 
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/pet/PetApiDelegate.java
Patch:
@@ -1,10 +1,11 @@
-package test.org.springdoc.api.app68.api;
+package test.org.springdoc.api.app68.api.pet;
 
 import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.context.request.NativeWebRequest;
 import org.springframework.web.multipart.MultipartFile;
+import test.org.springdoc.api.app68.api.ApiUtil;
 import test.org.springdoc.api.app68.model.ModelApiResponse;
 import test.org.springdoc.api.app68.model.Pet;
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/pet/PetApiDelegateImpl.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app68.api;
+package test.org.springdoc.api.app68.api.pet;
 
 import org.springframework.stereotype.Service;
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/store/StoreApiController.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app68.api;
+package test.org.springdoc.api.app68.api.store;
 
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/store/StoreApiDelegate.java
Patch:
@@ -1,9 +1,10 @@
-package test.org.springdoc.api.app68.api;
+package test.org.springdoc.api.app68.api.store;
 
 import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.context.request.NativeWebRequest;
+import test.org.springdoc.api.app68.api.ApiUtil;
 import test.org.springdoc.api.app68.model.Order;
 
 import java.util.Map;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/store/StoreApiDelegateImpl.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app68.api;
+package test.org.springdoc.api.app68.api.store;
 
 import org.springframework.stereotype.Service;
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/user/UserApiController.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app68.api;
+package test.org.springdoc.api.app68.api.user;
 
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/user/UserApiDelegate.java
Patch:
@@ -1,9 +1,10 @@
-package test.org.springdoc.api.app68.api;
+package test.org.springdoc.api.app68.api.user;
 
 import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.context.request.NativeWebRequest;
+import test.org.springdoc.api.app68.api.ApiUtil;
 import test.org.springdoc.api.app68.model.User;
 
 import java.util.List;

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app68/api/user/UserApiDelegateImpl.java
Patch:
@@ -1,4 +1,4 @@
-package test.org.springdoc.api.app68.api;
+package test.org.springdoc.api.app68.api.user;
 
 import org.springframework.stereotype.Service;
 

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerWelcome.java
Patch:
@@ -5,7 +5,6 @@
 import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.util.UriComponentsBuilder;

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerWelcome.java
Patch:
@@ -5,6 +5,8 @@
 import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.util.UriComponentsBuilder;
 
@@ -15,6 +17,7 @@
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 import static org.springframework.web.servlet.view.UrlBasedViewResolver.REDIRECT_URL_PREFIX;
 
+@Controller
 class SwaggerWelcome {
 
     @Value(API_DOCS_URL)

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -62,7 +62,7 @@ protected AbstractOpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequest
         this.responseBuilder = responseBuilder;
         this.operationParser = operationParser;
         this.openApiCustomisers = openApiCustomisers;
-        this.pathsToMatch=pathsToMatch;
+        this.pathsToMatch = pathsToMatch;
     }
 
     protected synchronized OpenAPI getOpenApi() {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -23,7 +23,7 @@ public final class Constants {
     public static final String APPLICATION_OPENAPI_YAML = "application/vnd.oai.openapi";
     public static final String DEFAULT_SWAGGER_UI_PATH = DEFAULT_PATH_SEPARATOR + "swagger-ui.html";
     public static final String SWAGGER_UI_PATH = "${springdoc.swagger-ui.path:#{T(org.springdoc.core.Constants).DEFAULT_SWAGGER_UI_PATH}}";
-    public static final String MVC_SERVLET_PATH ="${spring.mvc.servlet.path:#{null}}";
+    public static final String MVC_SERVLET_PATH = "${spring.mvc.servlet.path:#{null}}";
     public static final String GET_METHOD = "get";
     public static final String POST_METHOD = "post";
     public static final String PUT_METHOD = "put";

File: springdoc-openapi-common/src/main/java/org/springdoc/core/IgnoredParameterAnnotationsDefault.java
Patch:
@@ -1,8 +1,5 @@
 package org.springdoc.core;
 
-import org.springframework.stereotype.Component;
-
-@Component
 public class IgnoredParameterAnnotationsDefault implements IgnoredParameterAnnotations {
 
 }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/MultipleOpenApiSupportConfiguration.java
Patch:
@@ -22,4 +22,4 @@ public BeanFactoryPostProcessor beanFactoryPostProcessor() {
             }
         };
     }
-}
+}
\ No newline at end of file

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OpenAPIBuilder.java
Patch:
@@ -21,7 +21,6 @@
 import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.core.type.filter.AnnotationTypeFilter;
-import org.springframework.stereotype.Component;
 import org.springframework.util.CollectionUtils;
 import org.springframework.web.bind.annotation.ControllerAdvice;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -34,7 +33,6 @@
 
 import static org.springdoc.core.Constants.*;
 
-@Component
 public class OpenAPIBuilder {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(OpenAPIBuilder.class);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OperationBuilder.java
Patch:
@@ -15,7 +15,6 @@
 import io.swagger.v3.oas.models.responses.ApiResponse;
 import io.swagger.v3.oas.models.responses.ApiResponses;
 import org.apache.commons.lang3.StringUtils;
-import org.springframework.stereotype.Component;
 import org.springframework.util.CollectionUtils;
 
 import java.lang.reflect.Method;
@@ -24,7 +23,6 @@
 
 import static org.springdoc.core.Constants.*;
 
-@Component
 public class OperationBuilder {
 
     private final AbstractParameterBuilder parameterBuilder;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RequestBodyBuilder.java
Patch:
@@ -7,15 +7,13 @@
 import io.swagger.v3.oas.models.media.Schema;
 import io.swagger.v3.oas.models.parameters.RequestBody;
 import org.apache.commons.lang3.StringUtils;
-import org.springframework.stereotype.Component;
 import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.method.HandlerMethod;
 
 import java.util.Map;
 import java.util.Optional;
 
 @SuppressWarnings("rawtypes")
-@Component
 public class RequestBodyBuilder {
 
     private final AbstractParameterBuilder parameterBuilder;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SecurityParser.java
Patch:
@@ -7,13 +7,11 @@
 import io.swagger.v3.oas.models.Operation;
 import io.swagger.v3.oas.models.security.*;
 import org.apache.commons.lang3.StringUtils;
-import org.springframework.stereotype.Component;
 import org.springframework.util.CollectionUtils;
 import org.springframework.web.method.HandlerMethod;
 
 import java.util.*;
 
-@Component
 class SecurityParser {
 
     private final PropertyResolverUtils propertyResolverUtils;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocAnnotationsUtils.java
Patch:
@@ -14,7 +14,6 @@
 import io.swagger.v3.oas.models.media.Schema;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
-import org.springframework.stereotype.Component;
 
 import java.lang.reflect.Type;
 import java.util.LinkedHashMap;
@@ -23,7 +22,6 @@
 import java.util.Optional;
 
 @SuppressWarnings({"rawtypes"})
-@Component
 class SpringDocAnnotationsUtils extends AnnotationsUtils {
 
     private final List<ModelConverter> modelConverters;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/ObjectNodeConverter.java
Patch:
@@ -8,13 +8,11 @@
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.oas.models.media.ObjectSchema;
 import io.swagger.v3.oas.models.media.Schema;
-import org.springframework.stereotype.Component;
 
 import java.util.Iterator;
 
 @SuppressWarnings("rawtypes")
-@Component
-class ObjectNodeConverter implements ModelConverter {
+public class ObjectNodeConverter implements ModelConverter {
 
     @Override
     public Schema resolve(AnnotatedType type, ModelConverterContext context, Iterator<ModelConverter> chain) {

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/core/converters/PageableSupportConverter.java
Patch:
@@ -5,12 +5,10 @@
 import io.swagger.v3.core.converter.ModelConverter;
 import io.swagger.v3.core.converter.ModelConverterContext;
 import io.swagger.v3.oas.models.media.Schema;
-import org.springframework.stereotype.Component;
 
 import java.util.Iterator;
 
-@Component
-class PageableSupportConverter implements ModelConverter {
+public class PageableSupportConverter implements ModelConverter {
 
     private static final String PAGEABLE_TO_REPLACE = "org.springframework.data.domain.Pageable";
     private static final String PAGE_REQUEST_TO_REPLACE = "org.springframework.data.domain.PageRequest";

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/app2/EmployeeController.java
Patch:
@@ -113,7 +113,7 @@ ResponseEntity<Void> updateEmployee(@RequestBody Employee employee, @PathVariabl
 
         Link newlyCreatedLink = linkTo(methodOn(EmployeeController.class).findOne(id)).withSelfRel();
 
-            return ResponseEntity.noContent().location(new URI(newlyCreatedLink.getHref())).build();
+        return ResponseEntity.noContent().location(new URI(newlyCreatedLink.getHref())).build();
 
     }
 

File: springdoc-openapi-data-rest/src/test/java/test/org/springdoc/api/app2/EmployeeRepository.java
Patch:
@@ -22,4 +22,5 @@
  *
  * @author Greg Turnquist
  */
-interface EmployeeRepository extends CrudRepository<Employee, Long> {}
+interface EmployeeRepository extends CrudRepository<Employee, Long> {
+}

File: springdoc-openapi-security/src/main/java/org/springdoc/core/IgnoredParameterTypes.java
Patch:
@@ -1,9 +1,7 @@
 package org.springdoc.core;
 
 import org.springframework.security.core.Authentication;
-import org.springframework.stereotype.Component;
 
-@Component
 public class IgnoredParameterTypes {
 
     public IgnoredParameterTypes() {

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -11,7 +11,6 @@
 import org.springdoc.core.OpenAPIBuilder;
 import org.springdoc.core.OperationBuilder;
 import org.springframework.beans.factory.annotation.Value;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.http.MediaType;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -30,7 +29,6 @@
 import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
 
 @RestController
-@ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 public class OpenApiResource extends AbstractOpenApiResource {
 
     private final RequestMappingInfoHandlerMapping requestMappingHandlerMapping;

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/ParameterBuilder.java
Patch:
@@ -6,7 +6,6 @@
 import io.swagger.v3.oas.models.media.Schema;
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
 import org.springframework.http.codec.multipart.FilePart;
-import org.springframework.stereotype.Component;
 import org.springframework.web.multipart.MultipartFile;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
@@ -15,7 +14,6 @@
 import java.lang.reflect.Type;
 import java.lang.reflect.WildcardType;
 
-@Component
 public class ParameterBuilder extends AbstractParameterBuilder {
 
     public ParameterBuilder(LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer, IgnoredParameterAnnotations ignoredParameterAnnotations) {

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.springdoc.api.OpenApiResource;
 import org.springdoc.core.Constants;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
@@ -18,7 +19,7 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(SpringRunner.class)
-@WebFluxTest
+@WebFluxTest(controllers = {OpenApiResource.class})
 @ActiveProfiles("test")
 public abstract class AbstractSpringDocTest {
 

File: springdoc-openapi-webflux-core/src/test/java/test/org/springdoc/api/app65/HelloController.java
Patch:
@@ -7,12 +7,12 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-@Tag(name = "Health" , description = "Health check / ping API")
+@Tag(name = "Health", description = "Health check / ping API")
 @RestController
 public class HelloController {
 
     @Operation(summary = "Check server status", description = "Check server status, will return 200 with simple string if alive. Do nothing else.")
-    @GetMapping(value = { "/ping", "/health", "/" }, produces = MediaType.TEXT_PLAIN_VALUE)
+    @GetMapping(value = {"/ping", "/health", "/"}, produces = MediaType.TEXT_PLAIN_VALUE)
     public ResponseEntity<String> ping() {
         return ResponseEntity.ok("Healthy");
     }

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/ui/SwaggerWelcome.java
Patch:
@@ -5,6 +5,7 @@
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.reactive.function.server.RouterFunction;
 import org.springframework.web.reactive.function.server.ServerResponse;
@@ -18,6 +19,8 @@
 import static org.springframework.web.reactive.function.server.RouterFunctions.route;
 
 @Controller
+@Configuration
+@ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
 public class SwaggerWelcome {
 
     @Value(API_DOCS_URL)

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/MultipleOpenApiResource.java
Patch:
@@ -5,7 +5,6 @@
 import org.springdoc.core.*;
 import org.springframework.beans.factory.ObjectFactory;
 import org.springframework.beans.factory.annotation.Value;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -21,7 +20,6 @@
 import static org.springdoc.core.Constants.*;
 
 @RestController
-@ConditionalOnProperty(name = SPRINGDOC_GROUPS_ENABLED, matchIfMissing = false)
 public class MultipleOpenApiResource {
 
     private final RequestMappingInfoHandlerMapping requestMappingHandlerMapping;

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/ParameterBuilder.java
Patch:
@@ -5,14 +5,12 @@
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.media.Schema;
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
-import org.springframework.stereotype.Component;
 import org.springframework.web.multipart.MultipartFile;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.lang.reflect.WildcardType;
 
-@Component
 public class ParameterBuilder extends AbstractParameterBuilder {
 
     public ParameterBuilder(LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer, IgnoredParameterAnnotations ignoredParameterAnnotations) {

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/ResponseBuilder.java
Patch:
@@ -4,12 +4,10 @@
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.media.Schema;
 import org.springframework.http.ResponseEntity;
-import org.springframework.stereotype.Component;
 
 import java.lang.reflect.ParameterizedType;
 
 @SuppressWarnings("rawtypes")
-@Component
 public class ResponseBuilder extends AbstractResponseBuilder {
 
     public ResponseBuilder(OperationBuilder operationBuilder) {

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -8,7 +8,6 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.context.annotation.ComponentScan;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
@@ -27,7 +26,6 @@
 @RunWith(SpringRunner.class)
 @SpringBootTest
 @ActiveProfiles("test")
-@ComponentScan(basePackages = {"test.org.springdoc.aop"})
 @AutoConfigureMockMvc
 public abstract class AbstractSpringDocTest {
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app10/HelloController.java
Patch:
@@ -18,7 +18,7 @@ public void test(HttpSession header, HttpServletRequest request, HttpServletResp
     }
 
     @GetMapping("/testreq")
-    public void testRequestAttribute (RequestAttribute sample, String s){
+    public void testRequestAttribute(RequestAttribute sample, String s) {
 
     }
 }

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app65/HelloController.java
Patch:
@@ -7,12 +7,12 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-@Tag(name = "Health" , description = "Health check / ping API")
+@Tag(name = "Health", description = "Health check / ping API")
 @RestController
 public class HelloController {
 
     @Operation(summary = "Check server status", description = "Check server status, will return 200 with simple string if alive. Do nothing else.")
-    @GetMapping(value = { "/ping", "/health", "/" }, produces = MediaType.TEXT_PLAIN_VALUE)
+    @GetMapping(value = {"/ping", "/health", "/"}, produces = MediaType.TEXT_PLAIN_VALUE)
     public ResponseEntity<String> ping() {
         return ResponseEntity.ok("Healthy");
     }

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app66/HelloController.java
Patch:
@@ -7,12 +7,12 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-@Tag(name = "Health" , description = "Health check / ping API")
+@Tag(name = "Health", description = "Health check / ping API")
 @RestController
 public class HelloController {
 
     @Operation(summary = "Check server status", description = "Check server status, will return 200 with simple string if alive. Do nothing else.")
-    @GetMapping(value = { "/ping", "/health", "/" }, produces = MediaType.TEXT_PLAIN_VALUE)
+    @GetMapping(value = {"/ping", "/health", "/"}, produces = MediaType.TEXT_PLAIN_VALUE)
     public ResponseEntity<String> ping(UndocumentedClass possiblyInjectedByAspect) {
         return ResponseEntity.ok("Healthy");
     }

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app67/HelloController.java
Patch:
@@ -62,7 +62,7 @@ public String operation4() {
     }
 
     @Retention(RetentionPolicy.RUNTIME)
-    @Target({ ElementType.METHOD })
+    @Target({ElementType.METHOD})
     @Parameters({
             @Parameter(name = "pageNumber", description = "page number",
                     in = ParameterIn.QUERY, schema = @Schema(type = "integer")),
@@ -74,7 +74,7 @@ public String operation4() {
     }
 
     @Retention(RetentionPolicy.RUNTIME)
-    @Target({ ElementType.METHOD })
+    @Target({ElementType.METHOD})
     @Parameters({
             @Parameter(name = "sort", description = "sort specification",
                     in = ParameterIn.QUERY, schema = @Schema(type = "string"))

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -62,6 +62,7 @@ public abstract class AbstractRequestBuilder {
         PARAM_TYPES_TO_IGNORE.add(BindingResult.class);
         PARAM_TYPES_TO_IGNORE.add(SessionStatus.class);
         PARAM_TYPES_TO_IGNORE.add(UriComponentsBuilder.class);
+        PARAM_TYPES_TO_IGNORE.add(RequestAttribute.class);
     }
 
     protected AbstractRequestBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -59,8 +59,9 @@ public Operation build(Components components, HandlerMethod handlerMethod, Reque
         LocalVariableTableParameterNameDiscoverer d = parameterBuilder.getLocalSpringDocParameterNameDiscoverer();
         String[] pNames = d.getParameterNames(handlerMethod.getMethod());
         java.lang.reflect.Parameter[] parameters = handlerMethod.getMethod().getParameters();
+        String[] reflectionParametersNames = Arrays.stream(parameters).map(java.lang.reflect.Parameter::getName).toArray(String[]::new);
         if (pNames == null) {
-            pNames = Arrays.stream(parameters).map(java.lang.reflect.Parameter::getName).toArray(String[]::new);
+            pNames = reflectionParametersNames;
         }
         RequestBodyInfo requestBodyInfo = new RequestBodyInfo(methodAttributes);
         List<Parameter> operationParameters = (operation.getParameters() != null) ? operation.getParameters()
@@ -70,7 +71,7 @@ public Operation build(Components components, HandlerMethod handlerMethod, Reque
         for (int i = 0; i < pNames.length; i++) {
             // check if query param
             Parameter parameter = null;
-            final String pName = pNames[i];
+            final String pName = pNames[i] == null ? reflectionParametersNames[i] : pNames[i];
             io.swagger.v3.oas.annotations.Parameter parameterDoc = parameterBuilder.getParameterAnnotation(
                     handlerMethod, parameters[i], i, io.swagger.v3.oas.annotations.Parameter.class);
             if (parameterDoc == null) {

File: springdoc-openapi-security/src/main/java/org/springdoc/core/IgnoredParameterAnnotationsWithSecurity.java
Patch:
@@ -1,6 +1,7 @@
 package org.springdoc.core;
 
 import org.springframework.context.annotation.Primary;
+import org.springframework.security.core.Authentication;
 import org.springframework.security.core.annotation.AuthenticationPrincipal;
 import org.springframework.stereotype.Component;
 
@@ -12,5 +13,4 @@ public class IgnoredParameterAnnotationsWithSecurity implements IgnoredParameter
     public boolean isAnnotationToIgnore(java.lang.reflect.Parameter parameter) {
         return parameter.isAnnotationPresent(AuthenticationPrincipal.class);
     }
-
 }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -22,6 +22,7 @@ public final class Constants {
     public static final String APPLICATION_OPENAPI_YAML = "application/vnd.oai.openapi";
     public static final String DEFAULT_SWAGGER_UI_PATH = DEFAULT_PATH_SEPARATOR + "swagger-ui.html";
     public static final String SWAGGER_UI_PATH = "${springdoc.swagger-ui.path:#{T(org.springdoc.core.Constants).DEFAULT_SWAGGER_UI_PATH}}";
+    public static final String MVC_SERVLET_PATH ="${spring.mvc.servlet.path:#{null}}";
     public static final String GET_METHOD = "get";
     public static final String POST_METHOD = "post";
     public static final String PUT_METHOD = "put";

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/ResponseBuilder.java
Patch:
@@ -44,6 +44,9 @@ protected Schema calculateSchemaFromParameterizedType(Components components, Par
                 schemaN = calculateFluxSchema(components, parameterizedType, jsonView);
             }
         }
+        else if (ResponseEntity.class.getName().contentEquals(parameterizedType.getRawType().getTypeName())) {
+            schemaN = calculateSchemaParameterizedType(components, parameterizedType, jsonView);
+        }
         return schemaN;
     }
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -13,6 +13,7 @@ public final class Constants {
     public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show.actuator";
     public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";
     public static final String SPRINGDOC_PACKAGES_TO_SCAN ="${springdoc.packagesToScan:#{null}}";
+    public static final String SPRINGDOC_PATHS_TO_MATCH ="${springdoc.pathsToMatch:#{null}}";
     public static final String SPRINGDOC_ACTUATOR_TAG = "Actuator";
     public static final String DEFAULT_WEB_JARS_PREFIX_URL = "/webjars";
     public static final String WEB_JARS_PREFIX_URL = "${springdoc.webjars.prefix:#{T(org.springdoc.core.Constants).DEFAULT_WEB_JARS_PREFIX_URL}}";

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -74,7 +74,7 @@ protected void getPaths(Map<String, Object> restControllers) {
                 Map<String, String> regexMap = new LinkedHashMap<>();
                 operationPath = PathUtils.parsePath(operationPath, regexMap);
                 if (operationPath.startsWith(DEFAULT_PATH_SEPARATOR)
-                        && restControllers.containsKey(handlerMethod.getBean().toString()) && isPackageToScan(handlerMethod.getBeanType().getPackage().getName())) {
+                        && restControllers.containsKey(handlerMethod.getBean().toString()) && isPackageToScan(handlerMethod.getBeanType().getPackage().getName()) && isPathToMatch(operationPath)) {
                     Set<RequestMethod> requestMethods = requestMappingInfo.getMethodsCondition().getMethods();
                     calculatePath(openAPIBuilder, handlerMethod, operationPath, requestMethods);
                 }
@@ -87,4 +87,5 @@ private void calculateServerUrl(ServerHttpRequest serverHttpRequest, String apiD
         String serverBaseUrl = requestUrl.substring(0, requestUrl.length() - apiDocsUrl.length());
         openAPIBuilder.setServerBaseUrl(serverBaseUrl);
     }
+
 }

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -14,6 +14,7 @@
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.http.MediaType;
+import org.springframework.util.AntPathMatcher;
 import org.springframework.util.CollectionUtils;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
@@ -89,13 +90,13 @@ private void calculatePath(Map<String, Object> restControllers, Map<RequestMappi
             String operationPath = CollectionUtils.isEmpty(patterns) ? "/" : patterns.iterator().next();
             Map<String, String> regexMap = new LinkedHashMap<>();
             operationPath = PathUtils.parsePath(operationPath, regexMap);
-            if (isRestController(restControllers, handlerMethod, operationPath) && isPackageToScan(handlerMethod.getBeanType().getPackage().getName())) {
+
+            if (isRestController(restControllers, handlerMethod, operationPath) && isPackageToScan(handlerMethod.getBeanType().getPackage().getName()) && isPathToMatch(operationPath)) {
                 Set<RequestMethod> requestMethods = requestMappingInfo.getMethodsCondition().getMethods();
                 calculatePath(openAPIBuilder, handlerMethod, operationPath, requestMethods);
             }
         }
     }
-
     private boolean isRestController(Map<String, Object> restControllers, HandlerMethod handlerMethod,
                                      String operationPath) {
         boolean result;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -12,6 +12,7 @@ public final class Constants {
     public static final String SPRINGDOC_SWAGGER_UI_ENABLED = "springdoc.swagger-ui.enabled";
     public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show.actuator";
     public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";
+    public static final String SPRINGDOC_PACKAGES_TO_SCAN ="${springdoc.packagesToScan:#{null}}";
     public static final String SPRINGDOC_ACTUATOR_TAG = "Actuator";
     public static final String DEFAULT_WEB_JARS_PREFIX_URL = "/webjars";
     public static final String WEB_JARS_PREFIX_URL = "${springdoc.webjars.prefix:#{T(org.springdoc.core.Constants).DEFAULT_WEB_JARS_PREFIX_URL}}";

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -74,7 +74,7 @@ protected void getPaths(Map<String, Object> restControllers) {
                 Map<String, String> regexMap = new LinkedHashMap<>();
                 operationPath = PathUtils.parsePath(operationPath, regexMap);
                 if (operationPath.startsWith(DEFAULT_PATH_SEPARATOR)
-                        && restControllers.containsKey(handlerMethod.getBean().toString())) {
+                        && restControllers.containsKey(handlerMethod.getBean().toString()) && isPackageToScan(handlerMethod.getBeanType().getPackage().getName())) {
                     Set<RequestMethod> requestMethods = requestMappingInfo.getMethodsCondition().getMethods();
                     calculatePath(openAPIBuilder, handlerMethod, operationPath, requestMethods);
                 }

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -89,7 +89,7 @@ private void calculatePath(Map<String, Object> restControllers, Map<RequestMappi
             String operationPath = CollectionUtils.isEmpty(patterns) ? "/" : patterns.iterator().next();
             Map<String, String> regexMap = new LinkedHashMap<>();
             operationPath = PathUtils.parsePath(operationPath, regexMap);
-            if (isRestController(restControllers, handlerMethod, operationPath)) {
+            if (isRestController(restControllers, handlerMethod, operationPath) && isPackageToScan(handlerMethod.getBeanType().getPackage().getName())) {
                 Set<RequestMethod> requestMethods = requestMappingInfo.getMethodsCondition().getMethods();
                 calculatePath(openAPIBuilder, handlerMethod, operationPath, requestMethods);
             }

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app36/SpringDocApp36Test.java
Patch:
@@ -18,10 +18,9 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 @RunWith(SpringRunner.class)
-@SpringBootTest
+@SpringBootTest(properties = "springdoc.show.actuator=true")
 @ActiveProfiles("test")
 @AutoConfigureMockMvc
-@TestPropertySource("classpath:/properties/36.properties")
 public class SpringDocApp36Test {
 
 

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app36/SpringDocTestApp.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.test.context.SpringBootTest;
 
 @SpringBootApplication
 public class SpringDocTestApp {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -110,7 +110,7 @@ protected boolean isParamToIgnore(java.lang.reflect.Parameter parameter) {
         if (parameter.isAnnotationPresent(PathVariable.class)) {
             return false;
         }
-        return isParamTypeToIgnore(parameter.getType());
+        return parameterBuilder.isAnnotationToIgnore(parameter) || isParamTypeToIgnore(parameter.getType());
     }
 
     private void setParams(Operation operation, List<Parameter> operationParameters, RequestBodyInfo requestBodyInfo) {

File: springdoc-openapi-kotlin/src/test/java/test/org/springdoc/api/app1/SpringDocTestApp.java
Patch:
@@ -1,10 +1,8 @@
 package test.org.springdoc.api.app1;
 
-import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.OpenAPI;
 import io.swagger.v3.oas.models.info.Info;
 import io.swagger.v3.oas.models.info.License;
-import io.swagger.v3.oas.models.security.SecurityScheme;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Bean;

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/ParameterBuilder.java
Patch:
@@ -18,8 +18,8 @@
 @Component
 public class ParameterBuilder extends AbstractParameterBuilder {
 
-    public ParameterBuilder(LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
-        super(localSpringDocParameterNameDiscoverer);
+    public ParameterBuilder(LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer, IgnoredParameterAnnotations ignoredParameterAnnotations) {
+        super(localSpringDocParameterNameDiscoverer, ignoredParameterAnnotations);
     }
 
     @Override

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/core/ParameterBuilder.java
Patch:
@@ -15,8 +15,8 @@
 @Component
 public class ParameterBuilder extends AbstractParameterBuilder {
 
-    public ParameterBuilder(LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer) {
-        super(localSpringDocParameterNameDiscoverer);
+    public ParameterBuilder(LocalVariableTableParameterNameDiscoverer localSpringDocParameterNameDiscoverer, IgnoredParameterAnnotations ignoredParameterAnnotations) {
+        super(localSpringDocParameterNameDiscoverer, ignoredParameterAnnotations);
     }
 
     @Override

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OperationBuilder.java
Patch:
@@ -207,7 +207,8 @@ private boolean existOperationId(String operationId, OpenAPI openAPI) {
         if (openAPI.getPaths() == null || openAPI.getPaths().isEmpty()) {
             return false;
         }
-        for (PathItem path : openAPI.getPaths().values()) {
+        for (Iterator<PathItem> iterator = openAPI.getPaths().values().iterator(); iterator.hasNext();) {
+            PathItem path = iterator.next();
             Set<String> pathOperationIds = extractOperationIdFromPathItem(path);
             if (pathOperationIds.contains(operationId)) {
                 return true;

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -1,7 +1,6 @@
 package org.springdoc.api;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.databind.MapperFeature;
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.core.util.PathUtils;
 import io.swagger.v3.core.util.Yaml;
@@ -50,7 +49,7 @@ public Mono<String> openapiJson(ServerHttpRequest serverHttpRequest, @Value(API_
             throws JsonProcessingException {
         calculateServerUrl(serverHttpRequest, apiDocsUrl);
         OpenAPI openAPI = this.getOpenApi();
-        return Mono.just(Json.mapper().configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true).writeValueAsString(openAPI));
+        return Mono.just(Json.mapper().writeValueAsString(openAPI));
     }
 
     @Operation(hidden = true)
@@ -59,7 +58,7 @@ public Mono<String> openapiYaml(ServerHttpRequest serverHttpRequest,
                                     @Value(DEFAULT_API_DOCS_URL_YAML) String apiDocsUrl) throws JsonProcessingException {
         calculateServerUrl(serverHttpRequest, apiDocsUrl);
         OpenAPI openAPI = this.getOpenApi();
-        return Mono.just(Yaml.mapper().configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true).writeValueAsString(openAPI));
+        return Mono.just(Yaml.mapper().writeValueAsString(openAPI));
     }
 
     @Override

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SecuritySchemePair.java
Patch:
@@ -4,8 +4,8 @@
 
 class SecuritySchemePair {
 
-    private String key;
-    private SecurityScheme securityScheme;
+    private final String key;
+    private final SecurityScheme securityScheme;
 
     public SecuritySchemePair(String key, SecurityScheme securityScheme) {
         super();

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SpringDocAnnotationsUtils.java
Patch:
@@ -26,9 +26,9 @@
 @Component
 class SpringDocAnnotationsUtils extends AnnotationsUtils {
 
-    static final String COMPONENTS_REF = "#/components/schemas/";
+    private static final String COMPONENTS_REF = "#/components/schemas/";
 
-    private List<ModelConverter> modelConverters;
+    private final List<ModelConverter> modelConverters;
 
     public SpringDocAnnotationsUtils(List<ModelConverter> modelConverters) {
         this.modelConverters = modelConverters;

File: springdoc-openapi-data-rest/src/main/java/org/springdoc/core/converters/Pageable.java
Patch:
@@ -3,7 +3,6 @@
 import javax.validation.constraints.Max;
 import javax.validation.constraints.Min;
 import javax.validation.constraints.NotNull;
-import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
 
@@ -19,7 +18,7 @@ public class Pageable {
     @Max(2000)
     private int size;
 
-    private List<String> sort = new ArrayList<>() ;
+    private List<String> sort;
 
     public Pageable(@NotNull @Min(0) int page, @NotNull @Min(1) @Max(2000) int size, List<String> sort) {
         this.page = page;

File: springdoc-openapi-kotlin/src/main/java/org/springdoc/core/KotlinCoroutinesRequestBuilder.java
Patch:
@@ -12,7 +12,7 @@
 @Component
 public class KotlinCoroutinesRequestBuilder extends AbstractRequestBuilder {
 
-    private List<AbstractRequestBuilder> requestBuilders;
+    private final List<AbstractRequestBuilder> requestBuilders;
 
     public KotlinCoroutinesRequestBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
                           OperationBuilder operationBuilder, List<AbstractRequestBuilder> requestBuilders) {

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerWelcome.java
Patch:
@@ -1,7 +1,7 @@
 package org.springdoc.ui;
 
 import io.swagger.v3.oas.annotations.Operation;
-import org.springdoc.core.SwaggerUiConfig;
+import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
@@ -27,7 +27,7 @@ class SwaggerWelcome {
     private String swaggerPath;
 
     @Autowired
-    private SwaggerUiConfig swaggerUiConfig;
+    private SwaggerUiConfigProperties swaggerUiConfig;
 
     @Operation(hidden = true)
     @GetMapping(SWAGGER_UI_PATH)

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/ui/SwaggerWelcome.java
Patch:
@@ -1,6 +1,6 @@
 package org.springdoc.ui;
 
-import org.springdoc.core.SwaggerUiConfig;
+import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
@@ -30,7 +30,7 @@ public class SwaggerWelcome {
     private String webJarsPrefixUrl;
 
     @Autowired
-    private SwaggerUiConfig swaggerUiConfig;
+    private SwaggerUiConfigProperties swaggerUiConfig;
 
     @Bean
     @ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
@@ -48,7 +48,7 @@ RouterFunction<ServerResponse> routerFunction() {
                 .stream()
                 .reduce(
                         UriComponentsBuilder
-                                .fromUriString(url.toString()),
+                                .fromUriString(url),
                         (b, e) -> b.queryParam(e.getKey(), e.getValue()),
                         (left, right) -> left);
 

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1Test.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.springdoc.core.SwaggerUiConfig;
+import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springdoc.ui.SwaggerWelcome;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
@@ -15,7 +15,7 @@
 @RunWith(SpringRunner.class)
 @WebFluxTest
 @ActiveProfiles("test")
-@ContextConfiguration(classes = {SwaggerWelcome.class,SwaggerUiConfig.class})
+@ContextConfiguration(classes = {SwaggerWelcome.class, SwaggerUiConfigProperties.class})
 public class SpringDocApp1Test {
 
     @Autowired

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocTestApp.java
Patch:
@@ -1,9 +1,7 @@
 package test.org.springdoc.ui.app1;
 
-import org.springdoc.core.SwaggerUiConfig;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.boot.context.properties.EnableConfigurationProperties;
 
 @SpringBootApplication
 public class SpringDocTestApp {

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app2/SpringDocApp2Test.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.springdoc.core.SwaggerUiConfig;
+import org.springdoc.core.SwaggerUiConfigProperties;
 import org.springdoc.ui.SwaggerWelcome;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
@@ -15,7 +15,7 @@
 @RunWith(SpringRunner.class)
 @WebFluxTest(properties = "springdoc.swagger-ui.enabled=false")
 @ActiveProfiles("test")
-@ContextConfiguration(classes = {SwaggerWelcome.class,SwaggerUiConfig.class})
+@ContextConfiguration(classes = {SwaggerWelcome.class, SwaggerUiConfigProperties.class})
 public class SpringDocApp2Test  {
 
     @Autowired

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractResponseBuilder.java
Patch:
@@ -184,7 +184,7 @@ private Set<io.swagger.v3.oas.annotations.responses.ApiResponse> getApiResponses
                 .flatMap(x -> Stream.of(x.value())).collect(Collectors.toSet());
 
         Set<io.swagger.v3.oas.annotations.responses.ApiResponses> apiResponsesDocDeclaringClass = AnnotatedElementUtils
-                .findAllMergedAnnotations(method, io.swagger.v3.oas.annotations.responses.ApiResponses.class);
+                .findAllMergedAnnotations(declaringClass, io.swagger.v3.oas.annotations.responses.ApiResponses.class);
         responses.addAll(
                 apiResponsesDocDeclaringClass.stream().flatMap(x -> Stream.of(x.value())).collect(Collectors.toSet()));
 

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app2/SpringDocApp2Test.java
Patch:
@@ -27,10 +27,7 @@ public class SpringDocApp2Test  {
     @Test
     public void shouldDisplaySwaggerUiPage() throws Exception {
         webTestClient.get().uri("/swagger-ui.html").exchange()
-                .expectStatus().isTemporaryRedirect();
-        webTestClient.get().uri("/persons?name=toto").exchange()
                 .expectStatus().isNotFound();
-
     }
 
 

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1Test.java
Patch:
@@ -3,6 +3,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.springdoc.core.SwaggerUiConfig;
 import org.springdoc.ui.SwaggerWelcome;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
@@ -14,7 +15,7 @@
 @RunWith(SpringRunner.class)
 @WebFluxTest
 @ActiveProfiles("test")
-@ContextConfiguration(classes = {SwaggerWelcome.class})
+@ContextConfiguration(classes = {SwaggerWelcome.class,SwaggerUiConfig.class})
 public class SpringDocApp1Test {
 
     @Autowired

File: springdoc-openapi-webflux-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocTestApp.java
Patch:
@@ -1,7 +1,9 @@
 package test.org.springdoc.ui.app1;
 
+import org.springdoc.core.SwaggerUiConfig;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
 
 @SpringBootApplication
 public class SpringDocTestApp {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -9,6 +9,7 @@ public final class Constants {
     public static final String API_DOCS_URL = "${springdoc.api-docs.path:#{T(org.springdoc.core.Constants).DEFAULT_API_DOCS_URL}}";
     public static final String DEFAULT_API_DOCS_URL_YAML = API_DOCS_URL + ".yaml";
     public static final String SPRINGDOC_ENABLED = "springdoc.api-docs.enabled";
+    public static final String SPRINGDOC_SWAGGER_UI_ENABLED = "springdoc.swagger-ui.enabled";
     public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show.actuator";
     public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";
     public static final String SPRINGDOC_ACTUATOR_TAG = "Actuator";

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerConfig.java
Patch:
@@ -1,16 +1,17 @@
 package org.springdoc.ui;
 
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.config.annotation.EnableWebMvc;
 import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
 
-import static org.springdoc.core.Constants.SWAGGER_UI_PATH;
-import static org.springdoc.core.Constants.WEB_JARS_PREFIX_URL;
+import static org.springdoc.core.Constants.*;
 
 @Configuration
 @EnableWebMvc
+@ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
 @SuppressWarnings("deprecation")
 public class SwaggerConfig extends WebMvcConfigurerAdapter { // NOSONAR
 

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerWelcome.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.swagger.v3.oas.annotations.Operation;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.GetMapping;
 
@@ -12,6 +13,7 @@
 import static org.springframework.web.servlet.view.UrlBasedViewResolver.REDIRECT_URL_PREFIX;
 
 @Controller
+@ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
  class SwaggerWelcome {
 
     @Value(API_DOCS_URL)

File: springdoc-openapi-ui/src/test/java/test/org/springdoc/ui/app1/SpringDocApp1Test.java
Patch:
@@ -16,4 +16,5 @@ public void shouldDisplaySwaggerUiPage() throws Exception {
         String contentAsString = mvcResult.getResponse().getContentAsString();
         assertTrue(contentAsString.contains("Swagger UI"));
     }
+
 }
\ No newline at end of file

File: springdoc-openapi-webflux-ui/src/main/java/org/springdoc/ui/SwaggerWelcome.java
Patch:
@@ -1,6 +1,7 @@
 package org.springdoc.ui;
 
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.reactive.function.server.RouterFunction;
@@ -25,6 +26,7 @@ public class SwaggerWelcome {
     private String webJarsPrefixUrl;
 
     @Bean
+    @ConditionalOnProperty(name = SPRINGDOC_SWAGGER_UI_ENABLED, matchIfMissing = true)
     RouterFunction<ServerResponse> routerFunction() {
         String url = webJarsPrefixUrl +
                 SWAGGER_UI_URL +

File: springdoc-openapi-common/src/main/java/org/springdoc/core/converters/ObjectNodeConverter.java
Patch:
@@ -1,4 +1,4 @@
-package org.springdoc.core;
+package org.springdoc.core.converters;
 
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.node.ObjectNode;
@@ -8,10 +8,12 @@
 import io.swagger.v3.core.util.Json;
 import io.swagger.v3.oas.models.media.ObjectSchema;
 import io.swagger.v3.oas.models.media.Schema;
+import org.springframework.stereotype.Component;
 
 import java.util.Iterator;
 
 @SuppressWarnings("rawtypes")
+@Component
 class ObjectNodeConverter implements ModelConverter {
 
     @Override

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -12,9 +12,9 @@ public final class Constants {
     public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show.actuator";
     public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";
     public static final String SPRINGDOC_ACTUATOR_TAG = "Actuator";
-    public static final String WEB_JARS_PREFIX_URL = "/webjars";
+    public static final String DEFAULT_WEB_JARS_PREFIX_URL = "/webjars";
+    public static final String WEB_JARS_PREFIX_URL = "${springdoc.webjars.prefix:#{T(org.springdoc.core.Constants).DEFAULT_WEB_JARS_PREFIX_URL}}";
     public static final String SWAGGER_UI_URL = "/swagger-ui/index.html?url=";
-    public static final String WEB_JARS_URL = WEB_JARS_PREFIX_URL + SWAGGER_UI_URL;
     public static final String DEFAULT_VALIDATOR_URL = "&validatorUrl=";
     public static final String APPLICATION_OPENAPI_YAML = "application/vnd.oai.openapi";
     public static final String DEFAULT_SWAGGER_UI_PATH = DEFAULT_PATH_SEPARATOR + "swagger-ui.html";

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -12,9 +12,9 @@ public final class Constants {
     public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show.actuator";
     public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";
     public static final String SPRINGDOC_ACTUATOR_TAG = "Actuator";
-    public static final String WEB_JARS_PREFIX_URL = "/webjars";
+    public static final String DEFAULT_WEB_JARS_PREFIX_URL = "/webjars";
+    public static final String WEB_JARS_PREFIX_URL = "${springdoc.webjars.prefix:#{T(org.springdoc.core.Constants).DEFAULT_WEB_JARS_PREFIX_URL}}";
     public static final String SWAGGER_UI_URL = "/swagger-ui/index.html?url=";
-    public static final String WEB_JARS_URL = WEB_JARS_PREFIX_URL + SWAGGER_UI_URL;
     public static final String DEFAULT_VALIDATOR_URL = "&validatorUrl=";
     public static final String APPLICATION_OPENAPI_YAML = "application/vnd.oai.openapi";
     public static final String DEFAULT_SWAGGER_UI_PATH = DEFAULT_PATH_SEPARATOR + "swagger-ui.html";

File: springdoc-openapi-common/src/test/java/org/springdoc/core/ParameterBuilder.java
Patch:
@@ -1,10 +1,9 @@
-package org.springdoc.subclass;
+package org.springdoc.core;
 
 import com.fasterxml.jackson.annotation.JsonView;
 import com.fasterxml.jackson.databind.JavaType;
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.media.Schema;
-import org.springdoc.core.AbstractParameterBuilder;
 import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
 
 import java.lang.reflect.ParameterizedType;

File: springdoc-openapi-common/src/test/java/org/springdoc/core/ResponseBuilder.java
Patch:
@@ -1,10 +1,8 @@
-package org.springdoc.subclass;
+package org.springdoc.core;
 
 import com.fasterxml.jackson.annotation.JsonView;
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.media.Schema;
-import org.springdoc.core.AbstractResponseBuilder;
-import org.springdoc.core.OperationBuilder;
 
 import java.lang.reflect.ParameterizedType;
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -12,9 +12,9 @@ public final class Constants {
     public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show.actuator";
     public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";
     public static final String SPRINGDOC_ACTUATOR_TAG = "Actuator";
-    public static final String WEB_JARS_PREFIX_URL = "/webjars";
+    public static final String DEFAULT_WEB_JARS_PREFIX_URL = "/webjars";
+    public static final String WEB_JARS_PREFIX_URL = "${springdoc.webjars.prefix:#{T(org.springdoc.core.Constants).DEFAULT_WEB_JARS_PREFIX_URL}}";
     public static final String SWAGGER_UI_URL = "/swagger-ui/index.html?url=";
-    public static final String WEB_JARS_URL = WEB_JARS_PREFIX_URL + SWAGGER_UI_URL;
     public static final String DEFAULT_VALIDATOR_URL = "&validatorUrl=";
     public static final String APPLICATION_OPENAPI_YAML = "application/vnd.oai.openapi";
     public static final String DEFAULT_SWAGGER_UI_PATH = DEFAULT_PATH_SEPARATOR + "swagger-ui.html";

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -79,7 +79,6 @@ public Operation build(Components components, HandlerMethod handlerMethod, Reque
                     applyBeanValidatorAnnotations(parameter, Arrays.asList(parameters[i].getAnnotations()));
                 } else if (!RequestMethod.GET.equals(requestMethod)) {
                     requestBodyInfo.incrementNbParam();
-                    parameterInfo = new ParameterInfo(pName, parameters[i], parameterDoc);
                     requestBodyInfo.setRequestBody(operation.getRequestBody());
                     requestBodyBuilder.calculateRequestBodyInfo(components, handlerMethod, methodAttributes, i,
                             parameterInfo, requestBodyInfo);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -25,7 +25,7 @@ public abstract class AbstractRequestBuilder {
     private final RequestBodyBuilder requestBodyBuilder;
     private final OperationBuilder operationBuilder;
 
-    AbstractRequestBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
+    protected AbstractRequestBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
                            OperationBuilder operationBuilder) {
         super();
         this.parameterBuilder = parameterBuilder;
@@ -98,7 +98,7 @@ public Operation build(Components components, HandlerMethod handlerMethod, Reque
 
     protected abstract Operation customiseOperation(Operation operation, HandlerMethod handlerMethod);
 
-    private boolean isParamToIgnore(java.lang.reflect.Parameter parameter) {
+    protected boolean isParamToIgnore(java.lang.reflect.Parameter parameter) {
         if (parameter.isAnnotationPresent(PathVariable.class)) {
             return false;
         }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -25,7 +25,7 @@ public abstract class AbstractRequestBuilder {
     private final RequestBodyBuilder requestBodyBuilder;
     private final OperationBuilder operationBuilder;
 
-    AbstractRequestBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
+    protected AbstractRequestBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
                            OperationBuilder operationBuilder) {
         super();
         this.parameterBuilder = parameterBuilder;
@@ -98,7 +98,7 @@ public Operation build(Components components, HandlerMethod handlerMethod, Reque
 
     protected abstract Operation customiseOperation(Operation operation, HandlerMethod handlerMethod);
 
-    private boolean isParamToIgnore(java.lang.reflect.Parameter parameter) {
+    protected boolean isParamToIgnore(java.lang.reflect.Parameter parameter) {
         if (parameter.isAnnotationPresent(PathVariable.class)) {
             return false;
         }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -26,7 +26,7 @@ public abstract class AbstractRequestBuilder {
     private final OperationBuilder operationBuilder;
 
     AbstractRequestBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
-                                     OperationBuilder operationBuilder) {
+                           OperationBuilder operationBuilder) {
         super();
         this.parameterBuilder = parameterBuilder;
         this.requestBodyBuilder = requestBodyBuilder;
@@ -43,8 +43,8 @@ public Operation build(Components components, HandlerMethod handlerMethod, Reque
 
         operation.setOperationId(operationId);
         // requests
-        LocalVariableTableParameterNameDiscoverer d = new LocalVariableTableParameterNameDiscoverer();
-        String[] pNames = d.getParameterNames(handlerMethod.getMethod());
+        LocalVariableTableParameterNameDiscoverer d = parameterBuilder.getLocalSpringDocParameterNameDiscoverer();
+                String[]pNames = d.getParameterNames(handlerMethod.getMethod());
         List<Parameter> operationParameters = (operation.getParameters() != null) ? operation.getParameters()
                 : new ArrayList<>();
 

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import io.swagger.v3.core.util.Json;
+import io.swagger.v3.core.util.PathUtils;
 import io.swagger.v3.core.util.ReflectionUtils;
 import io.swagger.v3.core.util.Yaml;
 import io.swagger.v3.oas.annotations.Operation;
@@ -87,6 +88,8 @@ private void calculatePath(Map<String, Object> restControllers, Map<RequestMappi
             PatternsRequestCondition patternsRequestCondition = requestMappingInfo.getPatternsCondition();
             Set<String> patterns = patternsRequestCondition.getPatterns();
             String operationPath = CollectionUtils.isEmpty(patterns) ? "/" : patterns.iterator().next();
+            Map<String, String> regexMap = new LinkedHashMap<>();
+            operationPath = PathUtils.parsePath(operationPath, regexMap);
             if (isRestController(restControllers, handlerMethod, operationPath)) {
                 Set<RequestMethod> requestMethods = requestMappingInfo.getMethodsCondition().getMethods();
                 calculatePath(openAPIBuilder, handlerMethod, operationPath, requestMethods);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -26,7 +26,7 @@ public abstract class AbstractRequestBuilder {
     private final OperationBuilder operationBuilder;
 
     AbstractRequestBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
-                                     OperationBuilder operationBuilder) {
+                           OperationBuilder operationBuilder) {
         super();
         this.parameterBuilder = parameterBuilder;
         this.requestBodyBuilder = requestBodyBuilder;
@@ -43,8 +43,8 @@ public Operation build(Components components, HandlerMethod handlerMethod, Reque
 
         operation.setOperationId(operationId);
         // requests
-        LocalVariableTableParameterNameDiscoverer d = new LocalVariableTableParameterNameDiscoverer();
-        String[] pNames = d.getParameterNames(handlerMethod.getMethod());
+        LocalVariableTableParameterNameDiscoverer d = parameterBuilder.getLocalSpringDocParameterNameDiscoverer();
+                String[]pNames = d.getParameterNames(handlerMethod.getMethod());
         List<Parameter> operationParameters = (operation.getParameters() != null) ? operation.getParameters()
                 : new ArrayList<>();
 

File: springdoc-openapi-webmvc-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import io.swagger.v3.core.util.Json;
+import io.swagger.v3.core.util.PathUtils;
 import io.swagger.v3.core.util.ReflectionUtils;
 import io.swagger.v3.core.util.Yaml;
 import io.swagger.v3.oas.annotations.Operation;
@@ -87,6 +88,8 @@ private void calculatePath(Map<String, Object> restControllers, Map<RequestMappi
             PatternsRequestCondition patternsRequestCondition = requestMappingInfo.getPatternsCondition();
             Set<String> patterns = patternsRequestCondition.getPatterns();
             String operationPath = CollectionUtils.isEmpty(patterns) ? "/" : patterns.iterator().next();
+            Map<String, String> regexMap = new LinkedHashMap<>();
+            operationPath = PathUtils.parsePath(operationPath, regexMap);
             if (isRestController(restControllers, handlerMethod, operationPath)) {
                 Set<RequestMethod> requestMethods = requestMappingInfo.getMethodsCondition().getMethods();
                 calculatePath(openAPIBuilder, handlerMethod, operationPath, requestMethods);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractResponseBuilder.java
Patch:
@@ -278,6 +278,8 @@ private void buildApiResponses(Components components, Method method, ApiResponse
 				Content content = buildContent(components, method, methodAttributes.getAllProduces(),
 						methodAttributes.getJsonViewAnnotation());
 				apiResponse.setContent(content);
+			}else if(CollectionUtils.isEmpty(apiResponse.getContent())){
+				apiResponse.setContent(null);
 			}
 			if (StringUtils.isBlank(apiResponse.getDescription())) {
 				apiResponse.setDescription(DEFAULT_DESCRIPTION);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RequestBodyBuilder.java
Patch:
@@ -113,7 +113,8 @@ private RequestBody buildRequestBody(RequestBody requestBody, Components compone
 				|| (requestBody.getContent() != null && methodAttributes.isMethodOverloaded())) {
 
 			Schema<?> schema = parameterBuilder.calculateSchema(components, parameterInfo.getParameter(),
-					parameterInfo.getpName(), null, requestBodyInfo);
+					parameterInfo.getpName(), null, requestBodyInfo,
+					methodAttributes.getJsonViewAnnotationForRequestBody());
 			Content content = requestBody.getContent();
 
 			if (methodAttributes.isMethodOverloaded() && content != null) {

File: springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app28/HelloController.java
Patch:
@@ -11,8 +11,6 @@ public class HelloController {
 
 	@PostMapping(value = "/upload2", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
 	public String upload2(@RequestPart("one") MultipartFile one, @RequestPart("two") MultipartFile two) {
-		System.out.println(one.getName());
-		System.out.println(two.getName());
 		return "Ok";
 	}
 }

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -64,7 +64,7 @@ public Operation build(Components components, HandlerMethod handlerMethod, Reque
 		
 		java.lang.reflect.Parameter[] parameters = handlerMethod.getMethod().getParameters();
 
-		RequestBodyInfo requestBodyInfo = new RequestBodyInfo();
+		RequestBodyInfo requestBodyInfo = new RequestBodyInfo(methodAttributes);
 
 		for (int i = 0; i < pNames.length; i++) {
 			// check if query param

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractParameterBuilder.java
Patch:
@@ -17,7 +17,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.AnnotationUtils;
-import org.springframework.util.CollectionUtils;
 import org.springframework.web.method.HandlerMethod;
 
 import com.fasterxml.jackson.databind.JavaType;
@@ -43,13 +42,15 @@ public abstract class AbstractParameterBuilder {
 
 	public Parameter mergeParameter(List<Parameter> existingParamDoc, Parameter paramCalcul) {
 		Parameter result = paramCalcul;
-		if (!CollectionUtils.isEmpty(existingParamDoc) && paramCalcul != null && paramCalcul.getName() != null) {
+		if (paramCalcul != null && paramCalcul.getName() != null) {
 			final String name = paramCalcul.getName();
 			Parameter paramDoc = existingParamDoc.stream().filter(p -> name.equals(p.getName())).findAny().orElse(null);
 			if (paramDoc != null) {
 				mergeParameter(paramCalcul, paramDoc);
 				result = paramDoc;
 			}
+			else
+				existingParamDoc.add(result);
 		}
 		return result;
 	}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractResponseBuilder.java
Patch:
@@ -140,7 +140,7 @@ private Map<String, ApiResponse> computeResponse(Components components, Method m
 				if (apiResponsesOp.containsKey(apiResponse2.responseCode())) {
 					// Merge with the existing content
 					Content existingContent = apiResponsesOp.get(apiResponse2.responseCode()).getContent();
-					if (optionalContent.isPresent()) {
+					if (optionalContent.isPresent() && existingContent != null) {
 						Content newContent = optionalContent.get();
 						for (String mediaTypeStr : methodAttributes.getAllProduces()) {
 							io.swagger.v3.oas.models.media.MediaType mediaType = newContent.get(mediaTypeStr);

File: springdoc-openapi-core/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -39,7 +39,7 @@ public void testApp() throws Exception {
 		Path path = Paths.get(getClass().getClassLoader().getResource("results/app" + testNumber + ".json").toURI());
 		byte[] fileBytes = Files.readAllBytes(path);
 		String expected = new String(fileBytes);
-		assertEquals(expected, result, false);
+		assertEquals(expected, result, true);
 	}
 
 }

File: springdoc-openapi-core/src/test/java/test/org/springdoc/api/app44/HelloController.java
Patch:
@@ -18,7 +18,7 @@ public class HelloController {
 	@ApiResponses({
 			@ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(schema = @Schema(implementation = HelloDTO1.class))),
 			@ApiResponse(responseCode = "400", description = "Bad name", content = @Content(schema = @Schema(implementation = ErrorDTO.class))) })
-	public ResponseEntity<?> hellov1(@RequestBody RequestV1 request) {
+	public ResponseEntity<?> hello(@RequestBody RequestV1 request) {
 		final String name = request.getNameV1();
 		if ("error".equalsIgnoreCase(name)) {
 			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new ErrorDTO("invalid name: " + name));
@@ -30,7 +30,7 @@ public ResponseEntity<?> hellov1(@RequestBody RequestV1 request) {
 	@ApiResponses({
 			@ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(schema = @Schema(implementation = HelloDTO2.class))),
 			@ApiResponse(responseCode = "400", description = "Bad name", content = @Content(schema = @Schema(implementation = ErrorDTO.class))) })
-	public ResponseEntity<?> hellov2(@RequestBody RequestV2 request) {
+	public ResponseEntity<?> hello(@RequestBody RequestV2 request) {
 		final String name = request.getNameV2();
 		if ("error".equalsIgnoreCase(name)) {
 			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new ErrorDTO("invalid name: " + name));

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -52,7 +52,8 @@ protected AbstractRequestBuilder(AbstractParameterBuilder parameterBuilder, Requ
 	public Operation build(Components components, HandlerMethod handlerMethod, RequestMethod requestMethod,
 			Operation operation, MethodAttributes methodAttributes) {
 		// Documentation
-		String operationId = operationBuilder.getOperationId(handlerMethod.getMethod().getName());
+		String operationId = operationBuilder.getOperationId(handlerMethod.getMethod().getName(),
+				operation.getOperationId());
 		
 		operation.setOperationId(operationId);
 		// requests

File: springdoc-openapi-core/src/test/java/test/org/springdoc/api/AbstractSpringDocTest.java
Patch:
@@ -27,7 +27,7 @@
 public abstract class AbstractSpringDocTest {
 
 	@Autowired
-	private MockMvc mockMvc;
+	protected MockMvc mockMvc;
 
 	@Test
 	public void testApp() throws Exception {

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -9,6 +9,8 @@ public final class Constants {
 	public static final String API_DOCS_URL = "${springdoc.api-docs.path:#{T(org.springdoc.core.Constants).DEFAULT_API_DOCS_URL}}";
 	public static final String DEFAULT_API_DOCS_URL_YAML = API_DOCS_URL + ".yaml";
 	public static final String SPRINGDOC_ENABLED = "springdoc.api-docs.enabled";
+	public static final String SPRINGDOC_SHOW_ACTUATOR = "springdoc.show.actuator";
+	public static final String SPRINGDOC_SHOW_ACTUATOR_VALUE = "${" + SPRINGDOC_SHOW_ACTUATOR + ":false}";
 	public static final String WEB_JARS_PREFIX_URL = "/webjars";
 	public static final String SWAGGER_UI_URL = "/swagger-ui/index.html?url=";
 	public static final String WEB_JARS_URL = WEB_JARS_PREFIX_URL + SWAGGER_UI_URL;

File: springdoc-openapi-core/src/main/java/org/springdoc/core/RequestBuilder.java
Patch:
@@ -13,8 +13,9 @@
 @Component
 public class RequestBuilder extends AbstractRequestBuilder {
 
-	public RequestBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder) {
-		super(parameterBuilder, requestBodyBuilder);
+	public RequestBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
+			OperationBuilder operationBuilder) {
+		super(parameterBuilder, requestBodyBuilder, operationBuilder);
 	}
 
 	@Override

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/RequestBuilder.java
Patch:
@@ -5,8 +5,9 @@
 @Component
 public class RequestBuilder extends AbstractRequestBuilder {
 
-	public RequestBuilder(ParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder) {
-		super(parameterBuilder, requestBodyBuilder);
+	public RequestBuilder(AbstractParameterBuilder parameterBuilder, RequestBodyBuilder requestBodyBuilder,
+			OperationBuilder operationBuilder) {
+		super(parameterBuilder, requestBodyBuilder, operationBuilder);
 	}
 
 	@Override

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractResponseBuilder.java
Patch:
@@ -5,7 +5,6 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
-import java.lang.reflect.TypeVariable;
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -198,8 +197,6 @@ private Schema<?> calculateSchema(Components components, Type returnType) {
 		}
 		if (returnType instanceof ParameterizedType) {
 			schemaN = calculateSchemaFromParameterizedType(components, (ParameterizedType) returnType);
-		} else if (returnType instanceof TypeVariable) {
-			schemaN = AnnotationsUtils.resolveSchemaFromType((Class) returnType, null, null);
 		} else if (ResponseEntity.class.getName().equals(returnType.getTypeName())) {
 			schemaN = AnnotationsUtils.resolveSchemaFromType(String.class, null, null);
 		}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -31,7 +31,6 @@
 import io.swagger.v3.oas.models.Operation;
 import io.swagger.v3.oas.models.media.Schema;
 import io.swagger.v3.oas.models.parameters.Parameter;
-import io.swagger.v3.oas.models.parameters.RequestBody;
 
 public abstract class AbstractRequestBuilder {
 
@@ -87,9 +86,9 @@ public Operation build(Components components, HandlerMethod handlerMethod, Reque
 				} else if (!RequestMethod.GET.equals(requestMethod)) {
 					requestBodyInfo.incrementNbParam();
 					ParameterInfo parameterInfo = new ParameterInfo(pName, parameters[i], parameterDoc);
-					RequestBody requestBody = requestBodyBuilder.calculateRequestBody(components, handlerMethod,
+					requestBodyInfo.setRequestBody(operation.getRequestBody());
+					requestBodyBuilder.calculateRequestBodyInfo(components, handlerMethod,
 							mediaAttributes, i, parameterInfo, requestBodyInfo);
-					requestBodyInfo.setRequestBody(requestBody);
 				}
 			}
 		}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -116,7 +116,7 @@ private Parameter buildParams(String pName, Components components, java.lang.ref
 		// By default
 		if (RequestMethod.GET.equals(requestMethod)) {
 			if (parameter == null) {
-				parameter = this.buildParam(QUERY_PARAM, null, parameters, Boolean.TRUE, pName, null);
+				parameter = this.buildParam(QUERY_PARAM, components, parameters, Boolean.TRUE, pName, null);
 			} else if (parameter.getName() == null) {
 				parameter.setName(pName);
 			}
@@ -132,7 +132,7 @@ private Parameter buildParam(String in, Components components, java.lang.reflect
 		parameter.setRequired(required);
 		parameter.setName(name);
 		if (parameter.getSchema() == null) {
-			Schema<?> schema = parameterBuilder.calculateSchema(components, parameters, name);
+			Schema<?> schema = parameterBuilder.calculateSchema(components, parameters, name, null);
 			parameter.setSchema(schema);
 		}
 		return parameter;

File: springdoc-openapi-common/src/main/java/org/springdoc/core/RequestBodyBuilder.java
Patch:
@@ -111,7 +111,7 @@ protected RequestBody buildRequestBody(RequestBody requestBody, Components compo
 		if (requestBody == null)
 			requestBody = new RequestBody();
 
-		Schema<?> schema = parameterBuilder.calculateSchema(components, parameter, paramName);
+		Schema<?> schema = parameterBuilder.calculateSchema(components, parameter, paramName, null);
 		io.swagger.v3.oas.models.media.MediaType mediaType = null;
 		if (schema != null && schema.getType() != null) {
 			mediaType = new io.swagger.v3.oas.models.media.MediaType();

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -45,7 +45,7 @@ protected AbstractRequestBuilder(ParameterBuilder parameterBuilder, RequestBodyB
 		this.requestBodyBuilder = requestBodyBuilder;
 	}
 
-	abstract boolean isParamTypeToIgnore(Class<?> paramType);
+	protected abstract boolean isParamTypeToIgnore(Class<?> paramType);
 
 	public Operation build(Components components, HandlerMethod handlerMethod, RequestMethod requestMethod,
 			Operation operation, MediaAttributes mediaAttributes) {

File: springdoc-openapi-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -63,7 +63,8 @@ public String openapiYaml(HttpServletRequest request, @Value(DEFAULT_API_DOCS_UR
 		return Yaml.mapper().writeValueAsString(openAPI);
 	}
 
-	public void getPaths(Map<String, Object> restControllers) {
+	@Override
+	protected void getPaths(Map<String, Object> restControllers) {
 		Map<RequestMappingInfo, HandlerMethod> map = requestMappingHandlerMapping.getHandlerMethods();
 		for (Map.Entry<RequestMappingInfo, HandlerMethod> entry : map.entrySet()) {
 			RequestMappingInfo requestMappingInfo = entry.getKey();

File: springdoc-openapi-core/src/main/java/org/springdoc/core/RequestBuilder.java
Patch:
@@ -17,7 +17,8 @@ public RequestBuilder(ParameterBuilder parameterBuilder, RequestBodyBuilder requ
 		super(parameterBuilder, requestBodyBuilder);
 	}
 
-	boolean isParamTypeToIgnore(Class<?> paramType) {
+	@Override
+	protected boolean isParamTypeToIgnore(Class<?> paramType) {
 		return WebRequest.class.equals(paramType) || NativeWebRequest.class.equals(paramType)
 				|| javax.servlet.ServletRequest.class.equals(paramType)
 				|| javax.servlet.ServletResponse.class.equals(paramType)

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -64,7 +64,8 @@ public Mono<String> openapiYaml(ServerHttpRequest serverHttpRequest,
 		return Mono.just(Yaml.mapper().writeValueAsString(openAPI));
 	}
 
-	public void getPaths(Map<String, Object> restControllers) {
+	@Override
+	protected void getPaths(Map<String, Object> restControllers) {
 		Map<RequestMappingInfo, HandlerMethod> map = requestMappingHandlerMapping.getHandlerMethods();
 		for (Map.Entry<RequestMappingInfo, HandlerMethod> entry : map.entrySet()) {
 			RequestMappingInfo requestMappingInfo = entry.getKey();

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/RequestBuilder.java
Patch:
@@ -9,7 +9,8 @@ public RequestBuilder(ParameterBuilder parameterBuilder, RequestBodyBuilder requ
 		super(parameterBuilder, requestBodyBuilder);
 	}
 
-	boolean isParamTypeToIgnore(Class<?> paramType) {
+	@Override
+	protected boolean isParamTypeToIgnore(Class<?> paramType) {
 		return false;
 	}
 }

File: springdoc-openapi-core/src/main/java/org/springdoc/core/RequestBuilder.java
Patch:
@@ -21,6 +21,8 @@ boolean isParamTypeToIgnore(Class<?> paramType) {
 		return WebRequest.class.equals(paramType) || NativeWebRequest.class.equals(paramType)
 				|| javax.servlet.ServletRequest.class.equals(paramType)
 				|| javax.servlet.ServletResponse.class.equals(paramType)
+				|| javax.servlet.http.HttpServletRequest.class.equals(paramType)
+				|| javax.servlet.http.HttpServletResponse.class.equals(paramType)
 				|| javax.servlet.http.HttpSession.class.equals(paramType)
 				|| java.security.Principal.class.equals(paramType) || HttpMethod.class.equals(paramType)
 				|| java.util.Locale.class.equals(paramType) || java.util.TimeZone.class.equals(paramType)

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractResponseBuilder.java
Patch:
@@ -242,10 +242,10 @@ private String evaluateResponseStatus(Method method, Class<?> beanType, boolean
 			annotation = AnnotatedElementUtils.findMergedAnnotation(beanType, ResponseStatus.class);
 		}
 		if (annotation != null) {
-			responseStatus = annotation.code().toString();
+			responseStatus = String.valueOf(annotation.code().value());
 		}
 		if (annotation == null && !isGeneric) {
-			responseStatus = HttpStatus.OK.toString();
+			responseStatus = String.valueOf(HttpStatus.OK.value());
 		}
 		return responseStatus;
 	}

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -90,9 +90,7 @@ protected void calculatePath(OpenAPIBuilder openAPIBuilder, HandlerMethod handle
 			io.swagger.v3.oas.annotations.Operation apiOperation = ReflectionUtils
 					.getAnnotation(handlerMethod.getMethod(), io.swagger.v3.oas.annotations.Operation.class);
 
-			boolean hiddenMethod = (ReflectionUtils.getAnnotation(handlerMethod.getMethod(), Hidden.class) != null);
-
-			if (apiOperation != null && (apiOperation.hidden() || hiddenMethod)) {
+			if (operationParser.isHidden(handlerMethod.getMethod())) {
 				continue;
 			}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -9,8 +9,8 @@ public final class Constants {
 	public static final String API_DOCS_URL = "${springdoc.api-docs.path:#{T(org.springdoc.core.Constants).DEFAULT_API_DOCS_URL}}";
 	public static final String DEFAULT_API_DOCS_URL_YAML = API_DOCS_URL + ".yaml";
 	public static final String SPRINGDOC_ENABLED = "springdoc.api-docs.enabled";
-	public static final String WEB_JARS_PATH = "/webjars/";
-	public static final String WEB_JARS_URL = WEB_JARS_PATH + "swagger-ui/index.html?url=";
+	public static final String WEB_JARS_PATH = "/webjars";
+	public static final String WEB_JARS_URL = WEB_JARS_PATH + "/swagger-ui/index.html?url=";
 	public static final String DEFAULT_VALIDATOR_URL = "&validatorUrl=";
 	public static final String APPLICATION_OPENAPI_YAML = "application/vnd.oai.openapi";
 	public static final String DEFAULT_SWAGGER_UI_PATH = DEFAULT_PATH_SEPARATOR + "swagger-ui.html";

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerConfig.java
Patch:
@@ -18,8 +18,8 @@ public class SwaggerConfig extends WebMvcConfigurerAdapter {
 
 	@Override
 	public void addResourceHandlers(ResourceHandlerRegistry registry) {
-		String uiRootPath = swaggerPath.substring(0, swaggerPath.lastIndexOf("/"));
-		registry.addResourceHandler(uiRootPath + WEB_JARS_PATH + "**").addResourceLocations(WEB_JARS_PATH)
+		String uiRootPath = swaggerPath.substring(0, swaggerPath.lastIndexOf('/'));
+		registry.addResourceHandler(uiRootPath + WEB_JARS_PATH + "/**").addResourceLocations(WEB_JARS_PATH + "/")
 				.resourceChain(false);
 	}
 }

File: springdoc-openapi-ui/src/main/java/org/springdoc/ui/SwaggerWelcome.java
Patch:
@@ -25,7 +25,7 @@ public class SwaggerWelcome {
 	@GetMapping(SWAGGER_UI_PATH)
 	public String redirectToUi(HttpServletRequest request) {
 		String contextPath = request.getContextPath();
-		String uiRootPath = swaggerPath.substring(0, swaggerPath.lastIndexOf("/"));
+		String uiRootPath = swaggerPath.substring(0, swaggerPath.lastIndexOf('/'));
 		StringBuilder sbUrl = new StringBuilder();
 		sbUrl.append(REDIRECT_URL_PREFIX);
 		sbUrl.append(uiRootPath);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -9,7 +9,8 @@ public final class Constants {
 	public static final String API_DOCS_URL = "${springdoc.api-docs.path:#{T(org.springdoc.core.Constants).DEFAULT_API_DOCS_URL}}";
 	public static final String DEFAULT_API_DOCS_URL_YAML = API_DOCS_URL + ".yaml";
 	public static final String SPRINGDOC_ENABLED = "springdoc.api-docs.enabled";
-	public static final String WEB_JARS_URL = "/webjars/swagger-ui/index.html?url=";
+	public static final String WEB_JARS_PATH = "/webjars/";
+	public static final String WEB_JARS_URL = WEB_JARS_PATH + "swagger-ui/index.html?url=";
 	public static final String DEFAULT_VALIDATOR_URL = "&validatorUrl=";
 	public static final String APPLICATION_OPENAPI_YAML = "application/vnd.oai.openapi";
 	public static final String DEFAULT_SWAGGER_UI_PATH = DEFAULT_PATH_SEPARATOR + "swagger-ui.html";

File: springdoc-openapi-common/src/main/java/org/springdoc/core/GeneralInfoBuilder.java
Patch:
@@ -151,7 +151,7 @@ private void addSecurityScheme(List<io.swagger.v3.oas.annotations.security.Secur
 					Map<String, SecurityScheme> securitySchemeMap = new HashMap<>();
 					if (StringUtils.isNotBlank(securityScheme.get().getKey())) {
 						securitySchemeMap.put(securityScheme.get().getKey(), securityScheme.get().getSecurityScheme());
-						if (!CollectionUtils.isEmpty(securitySchemeMap)) {
+						if (!CollectionUtils.isEmpty(components.getSecuritySchemes())) {
 							components.getSecuritySchemes().putAll(securitySchemeMap);
 						} else {
 							components.setSecuritySchemes(securitySchemeMap);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OpenAPIBuilder.java
Patch:
@@ -28,6 +28,7 @@ public OpenAPIBuilder(Optional<OpenAPI> openAPI) {
 	}
 
 	public OpenAPI getOpenAPI() {
+		System.out.println(openAPI.getComponents());
 		return openAPI;
 	}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/SecurityParser.java
Patch:
@@ -23,8 +23,8 @@ private SecurityParser() {
 	}
 
 	public static class SecuritySchemePair {
-		String key;
-		SecurityScheme securityScheme;
+		public String key;
+		public SecurityScheme securityScheme;
 	}
 
 	public static Optional<List<SecurityRequirement>> getSecurityRequirements(

File: springdoc-openapi-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -10,7 +10,7 @@
 
 import org.springdoc.core.AbstractRequestBuilder;
 import org.springdoc.core.AbstractResponseBuilder;
-import org.springdoc.core.InfoBuilder;
+import org.springdoc.core.GeneralInfoBuilder;
 import org.springdoc.core.OpenAPIBuilder;
 import org.springdoc.core.OperationBuilder;
 import org.springdoc.core.TagsBuilder;
@@ -40,7 +40,7 @@ public class OpenApiResource extends AbstractOpenApiResource {
 
 	public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
 			AbstractResponseBuilder responseBuilder, TagsBuilder tagbuiBuilder, OperationBuilder operationParser,
-			InfoBuilder infoBuilder, RequestMappingInfoHandlerMapping requestMappingHandlerMapping) {
+			GeneralInfoBuilder infoBuilder, RequestMappingInfoHandlerMapping requestMappingHandlerMapping) {
 		super(openAPIBuilder, requestBuilder, responseBuilder, tagbuiBuilder, operationParser, infoBuilder);
 		this.requestMappingHandlerMapping = requestMappingHandlerMapping;
 	}
@@ -82,6 +82,6 @@ public void getPaths(Map<String, Object> restControllers) {
 	private void calculateServerUrl(HttpServletRequest request, String apiDocsUrl) {
 		StringBuffer requestUrl = request.getRequestURL();
 		String serverBaseUrl = requestUrl.substring(0, requestUrl.length() - apiDocsUrl.length());
-		infoBuilder.setServerBaseUrl(serverBaseUrl);
+		generalInfoBuilder.setServerBaseUrl(serverBaseUrl);
 	}
 }

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -8,7 +8,7 @@
 
 import org.springdoc.core.AbstractRequestBuilder;
 import org.springdoc.core.AbstractResponseBuilder;
-import org.springdoc.core.InfoBuilder;
+import org.springdoc.core.GeneralInfoBuilder;
 import org.springdoc.core.OpenAPIBuilder;
 import org.springdoc.core.OperationBuilder;
 import org.springdoc.core.TagsBuilder;
@@ -41,7 +41,7 @@ public class OpenApiResource extends AbstractOpenApiResource {
 
 	public OpenApiResource(OpenAPIBuilder openAPIBuilder, AbstractRequestBuilder requestBuilder,
 			AbstractResponseBuilder responseBuilder, TagsBuilder tagbuiBuilder, OperationBuilder operationParser,
-			InfoBuilder infoBuilder, RequestMappingInfoHandlerMapping requestMappingHandlerMapping) {
+			GeneralInfoBuilder infoBuilder, RequestMappingInfoHandlerMapping requestMappingHandlerMapping) {
 		super(openAPIBuilder, requestBuilder, responseBuilder, tagbuiBuilder, operationParser, infoBuilder);
 		this.requestMappingHandlerMapping = requestMappingHandlerMapping;
 	}
@@ -85,6 +85,6 @@ public void getPaths(Map<String, Object> restControllers) {
 	private void calculateServerUrl(ServerHttpRequest serverHttpRequest, String apiDocsUrl) {
 		String requestUrl = serverHttpRequest.getURI().toString();
 		String serverBaseUrl = requestUrl.substring(0, requestUrl.length() - apiDocsUrl.length());
-		infoBuilder.setServerBaseUrl(serverBaseUrl);
+		generalInfoBuilder.setServerBaseUrl(serverBaseUrl);
 	}
 }

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -17,6 +17,7 @@
 import org.springdoc.core.OperationBuilder;
 import org.springdoc.core.TagsBuilder;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.http.MediaType;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.web.bind.annotation.ControllerAdvice;
@@ -38,6 +39,7 @@
 import reactor.core.publisher.Mono;
 
 @RestController
+@ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 public class OpenApiResource extends AbstractOpenApiResource {
 
 	private static final Logger LOGGER = LoggerFactory.getLogger(OpenApiResource.class);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -8,6 +8,7 @@ public final class Constants {
 	public static final String DEFAULT_SERVER_DESCRIPTION = "Generated server url";
 	public static final String API_DOCS_URL = "${springdoc.api-docs.path:#{T(org.springdoc.core.Constants).DEFAULT_API_DOCS_URL}}";
 	public static final String DEFAULT_API_DOCS_URL_YAML = API_DOCS_URL + ".yaml";
+	public static final String SPRINGDOC_ENABLED = "springdoc.api-docs.enabled";
 	public static final String WEB_JARS_URL = "/webjars/swagger-ui/index.html?url=";
 	public static final String DEFAULT_VALIDATOR_URL = "&validatorUrl=";
 	public static final String APPLICATION_OPENAPI_YAML = "application/vnd.oai.openapi";

File: springdoc-openapi-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -19,6 +19,7 @@
 import org.springdoc.core.OperationBuilder;
 import org.springdoc.core.TagsBuilder;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.ControllerAdvice;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -37,6 +38,7 @@
 import io.swagger.v3.oas.models.OpenAPI;
 
 @RestController
+@ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true)
 public class OpenApiResource extends AbstractOpenApiResource {
 
 	private static final Logger LOGGER = LoggerFactory.getLogger(OpenApiResource.class);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OperationBuilder.java
Patch:
@@ -185,7 +185,9 @@ private Optional<ApiResponses> getApiResponses(
 			}
 			setDescription(response, apiResponseObject);
 			setExtensions(response, apiResponseObject);
-			AnnotationsUtils.getContent(response.content(), classProduces == null ? new String[0] : classProduces,
+
+			org.springdoc.core.AnnotationsUtils.getContent(response.content(),
+					classProduces == null ? new String[0] : classProduces,
 					methodProduces == null ? new String[0] : methodProduces, null, components, jsonViewAnnotation)
 					.ifPresent(apiResponseObject::content);
 			AnnotationsUtils.getHeaders(response.headers(), jsonViewAnnotation).ifPresent(apiResponseObject::headers);

File: springdoc-openapi-common/src/main/java/org/springdoc/api/AbstractOpenApiResource.java
Patch:
@@ -81,7 +81,7 @@ protected void calculatePath(OpenAPIBuilder openAPIBuilder, HandlerMethod handle
 
 			// requests
 			operation = requestBuilder.build(components, handlerMethod, requestMethod, operation,
-					mediaAttributes.getAllConsumes());
+					mediaAttributes);
 
 			// responses
 			ApiResponses apiResponses = responseBuilder.build(components, handlerMethod, operation,

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -5,6 +5,7 @@
 public final class Constants {
 
 	public static final String DEFAULT_API_DOCS_URL = "/v3/api-docs";
+	public static final String DEFAULT_SERVER_DESCRIPTION = "Generated server url";
 	public static final String API_DOCS_URL = "${springdoc.api-docs.path:#{T(org.springdoc.core.Constants).DEFAULT_API_DOCS_URL}}";
 	public static final String DEFAULT_API_DOCS_URL_YAML = API_DOCS_URL + ".yaml";
 	public static final String WEB_JARS_URL = "/webjars/swagger-ui/index.html?url=";

File: springdoc-openapi-common/src/main/java/org/springdoc/core/OperationBuilder.java
Patch:
@@ -65,7 +65,7 @@ public OpenAPI parse(Components components, io.swagger.v3.oas.annotations.Operat
 
 		// build parameters
 		for (io.swagger.v3.oas.annotations.Parameter parameterDoc : apiOperation.parameters()) {
-			Parameter parameter = parameterBuilder.buildParameterFromDoc(parameterDoc, components);
+			Parameter parameter = parameterBuilder.buildParameterFromDoc(parameterDoc, components, null);
 			operation.addParametersItem(parameter);
 		}
 

File: springdoc-openapi-common/src/main/java/org/springdoc/core/ParameterBuilder.java
Patch:
@@ -35,13 +35,15 @@
 public class ParameterBuilder {
 
 	public Parameter buildParameterFromDoc(io.swagger.v3.oas.annotations.Parameter parameterDoc,
-			Components components) {
+			Components components, String pNames) {
 		Parameter parameter = new Parameter();
 		if (StringUtils.isNotBlank(parameterDoc.description())) {
 			parameter.setDescription(parameterDoc.description());
 		}
 		if (StringUtils.isNotBlank(parameterDoc.name())) {
 			parameter.setName(parameterDoc.name());
+		} else {
+			parameter.setName(pNames);
 		}
 		if (StringUtils.isNotBlank(parameterDoc.in().toString())) {
 			parameter.setIn(parameterDoc.in().toString());

File: springdoc-openapi-core/src/main/java/org/springdoc/core/RequestBuilder.java
Patch:
@@ -51,7 +51,7 @@ public Operation build(Components components, HandlerMethod handlerMethod, Reque
 				if (parameterDoc.hidden()) {
 					continue;
 				}
-				parameter = parameterBuilder.buildParameterFromDoc(parameterDoc, null);
+				parameter = parameterBuilder.buildParameterFromDoc(parameterDoc, null, pNames[i]);
 			}
 
 			if (!isParamTypeToIgnore(paramType)) {

File: springdoc-openapi-webflux-core/src/main/java/org/springdoc/core/RequestBuilder.java
Patch:
@@ -41,7 +41,7 @@ public Operation build(Components components, HandlerMethod handlerMethod, Reque
 				if (parameterDoc.hidden()) {
 					continue;
 				}
-				parameter = parameterBuilder.buildParameterFromDoc(parameterDoc, null);
+				parameter = parameterBuilder.buildParameterFromDoc(parameterDoc, null, pNames[i]);
 			}
 
 			parameter = buildParams(pNames[i], components, parameters[i], i, parameter, handlerMethod);

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractRequestBuilder.java
Patch:
@@ -69,7 +69,7 @@ protected <A extends Annotation> A getParameterAnnotation(HandlerMethod handlerM
 	protected Parameter buildParamDefault(RequestMethod requestMethod, String pNames,
 			java.lang.reflect.Parameter parameters, Parameter parameter) {
 		if (RequestMethod.GET.equals(requestMethod) && parameter == null) {
-			parameter = this.buildParam(QUERY_PARAM, null, parameters, Boolean.FALSE, pNames, null);
+			parameter = this.buildParam(QUERY_PARAM, null, parameters, Boolean.TRUE, pNames, null);
 		}
 		return parameter;
 	}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/AbstractResponseBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package org.springdoc.core;
 
-import static org.springdoc.core.Constants.DEFAULT_DESCRIPTION;
+import static org.springdoc.core.Constants.*;
 
 import java.lang.reflect.Method;
 import java.lang.reflect.ParameterizedType;
@@ -111,7 +111,6 @@ private Map<String, ApiResponse> computeResponse(Components components, Method m
 				for (int i = 0; i < contentdoc.length; i++) {
 					contentElt = new Content();
 					io.swagger.v3.oas.models.media.MediaType mediaTypeEl = new io.swagger.v3.oas.models.media.MediaType();
-					AnnotationsUtils.getSchema(contentdoc[i], components, null).orElse(null);
 					mediaTypeEl.schema(AnnotationsUtils.getSchema(contentdoc[i], components, null).orElse(null));
 					setContent(methodProduces, contentElt, mediaTypeEl);
 				}

File: springdoc-openapi-common/src/main/java/org/springdoc/core/Constants.java
Patch:
@@ -1,6 +1,6 @@
 package org.springdoc.core;
 
-import static org.springframework.util.AntPathMatcher.DEFAULT_PATH_SEPARATOR;
+import static org.springframework.util.AntPathMatcher.*;
 
 public final class Constants {
 
@@ -34,6 +34,8 @@ public final class Constants {
 	public static final String DEFAULT_PROPS_LOCATION = "/swagger.properties";
 	public static final String DEFAULT_LICENSE_VALUE = "Apache 2.0 License";
 	public static final String DEFAULT_LICENSE_URL = "http://www.apache.org/licenses/LICENSE-2.0.html";
+	public static final String OPENAPI_STRING_TYPE = "string";
+	public static final String OPENAPI_ARRAY_TYPE = "array";
 
 	private Constants() {
 		super();

File: springdoc-openapi-core/src/main/java/org/springdoc/core/RequestBuilder.java
Patch:
@@ -70,7 +70,6 @@ public Operation build(Components components, HandlerMethod handlerMethod, Reque
 				}
 			}
 		}
-
 		if (!CollectionUtils.isEmpty(operationParameters)) {
 			operation.setParameters(operationParameters);
 		}

File: springdoc-openapi-core/src/main/java/org/springdoc/api/OpenApiResource.java
Patch:
@@ -168,7 +168,7 @@ private OpenAPI getOpenApi() {
 				}
 			}
 		}
-		LOGGER.info("Init duration for springdoc-openapi is: {0}  ms", (System.currentTimeMillis() - start));
+		LOGGER.info("Init duration for springdoc-openapi is: {} ms", (System.currentTimeMillis() - start));
 		return openAPI;
 	}
 

File: springdoc-openapi-core/src/main/java/org/springdoc/core/InfoBuilder.java
Patch:
@@ -89,7 +89,7 @@ private OpenAPIDefinition getApiDefClass(ClassPathScanningCandidateComponentProv
 					return AnnotationUtils.findAnnotation(Class.forName(bd.getBeanClassName()),
 							OpenAPIDefinition.class);
 				} catch (ClassNotFoundException e) {
-					LOGGER.error("Class Not Found in classpath: {0}", e.getMessage());
+					LOGGER.error("Class Not Found in classpath : {}", e.getMessage());
 				}
 			}
 		}

