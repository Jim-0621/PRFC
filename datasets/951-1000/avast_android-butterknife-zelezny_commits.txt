File: src/com/avast/android/butterknifezelezny/common/Definitions.java
Patch:
@@ -12,6 +12,7 @@ public class Definitions {
         // special classes; default package is android.widget.*
         paths.put("WebView", "android.webkit.WebView");
         paths.put("View", "android.view.View");
+        paths.put("ViewStub", "android.view.ViewStub");
 
         // adapters
         adapters.add("android.widget.ListAdapter");

File: src/com/avast/android/butterknifezelezny/InjectAction.java
Patch:
@@ -92,6 +92,9 @@ public void onConfirm(Project project, Editor editor, ArrayList<Element> element
         }
 
         if (cnt > 0) { // generate injections
+            if (layout == null) {
+                return;
+            }
             new InjectWriter(file, getTargetClass(editor, file), "Generate Injections", elements, layout.getName(), fieldNamePrefix, createHolder).execute();
 
             if (cnt == 1) {

File: src/com/avast/android/butterknifezelezny/navigation/NavigationMarker.java
Patch:
@@ -10,6 +10,7 @@
 import com.intellij.psi.PsiElement;
 import com.intellij.psi.PsiField;
 import com.intellij.psi.PsiMember;
+import com.intellij.psi.PsiTypeElement;
 import org.jetbrains.annotations.NotNull;
 
 import static com.intellij.codeHighlighting.Pass.UPDATE_ALL;
@@ -40,8 +41,8 @@ Builder to(@NotNull PsiMember destination) {
 
         @NotNull
         NavigationMarker build() {
-            final TextRange textRange = source instanceof PsiField ?
-                ((PsiField)source).getTypeElement().getTextRange() : source.getTextRange();
+            final PsiTypeElement typeElement = source instanceof PsiField ? ((PsiField)source).getTypeElement() : null;
+            final TextRange textRange = typeElement != null ? typeElement.getTextRange() : source.getTextRange();
             return new NavigationMarker(source, destination, textRange);
         }
     }

File: src/com/avast/android/butterknifezelezny/navigation/PsiHelper.java
Patch:
@@ -17,7 +17,7 @@ public static boolean hasAnnotationWithValue(@NotNull final PsiModifierListOwner
             final PsiNameValuePair[] attributes = psiAnnotation.getParameterList().getAttributes();
             if (attributes.length > 0) {
                 final PsiAnnotationMemberValue psiValue = attributes[0].getValue();
-                if (value.equals(psiValue.getText())) {
+                if (psiValue != null && value.equals(psiValue.getText())) {
                     return true;
                 }
             }

File: src/com/avast/android/butterknifezelezny/InjectAction.java
Patch:
@@ -110,6 +110,9 @@ protected void showDialog(Project project, Editor editor, ArrayList<Element> ele
         PsiClass clazz = getTargetClass(editor, file);
 
         final IButterKnife butterKnife = ButterKnifeFactory.findButterKnifeForPsiElement(project, file);
+        if (butterKnife == null) {
+            return;
+        }
 
         // get parent classes and check if it's an adapter
         boolean createHolder = false;

File: src/eu/inmite/android/plugin/butterknifezelezny/InjectWriter.java
Patch:
@@ -1,5 +1,6 @@
 package eu.inmite.android.plugin.butterknifezelezny;
 
+import com.intellij.codeInsight.actions.ReformatCodeProcessor;
 import com.intellij.openapi.command.WriteCommandAction;
 import com.intellij.openapi.project.Project;
 import com.intellij.psi.JavaPsiFacade;
@@ -62,8 +63,7 @@ public void run() throws Throwable {
 		JavaCodeStyleManager styleManager = JavaCodeStyleManager.getInstance(mProject);
 		styleManager.optimizeImports(mFile);
 		styleManager.shortenClassReferences(mClass);
-
-		// TODO: can't build this, removing for now: new ReformatAndOptimizeImportsProcessor(mProject, mClass.getContainingFile(), false).runWithoutProgress();
+        new ReformatCodeProcessor(mProject, mClass.getContainingFile(), null, false).runWithoutProgress();
 	}
 
 	/**

File: src/eu/inmite/android/plugin/butterknifezelezny/common/Defintions.java
Patch:
@@ -11,6 +11,7 @@ public class Defintions {
 	static {
 		// special classes; default package is android.widget.*
 		paths.put("WebView", "android.webkit.WebView");
+		paths.put("View", "android.view.View");
 
 		// adapters
 		adapters.add("android.widget.ListAdapter");

File: src/eu/inmite/android/plugin/butterknifezelezny/InjectWriter.java
Patch:
@@ -76,7 +76,7 @@ protected void generateAdapter() {
 		StringBuilder holderBuilder = new StringBuilder();
 		holderBuilder.append(sViewHolderName);
 		holderBuilder.append("(android.view.View view) {");
-		holderBuilder.append("butterknife.Views.inject(this, view);");
+		holderBuilder.append("butterknife.ButterKnife.inject(this, view);");
 		holderBuilder.append("}");
 
 		PsiClass viewHolder = mFactory.createClassFromText(holderBuilder.toString(), mClass);

File: src/eu/inmite/android/plugin/butterknifezelezny/InjectAction.java
Patch:
@@ -138,6 +138,7 @@ protected void showDialog(Project project, Editor editor, ArrayList<Element> ele
 
 		mDialog = new JFrame();
 		mDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
+		mDialog.getRootPane().setDefaultButton(panel.getConfirmButton());
 		mDialog.getContentPane().add(panel);
 		mDialog.pack();
 		mDialog.setLocationRelativeTo(null);

File: src/eu/inmite/android/plugin/butterknifezelezny/form/EntryList.java
Patch:
@@ -168,6 +168,9 @@ protected boolean checkValidity() {
 		return valid;
 	}
 
+	public JButton getConfirmButton() {
+		return mConfirm;
+	}
 	// classes
 
 	public class CheckHolderListener implements ChangeListener {

