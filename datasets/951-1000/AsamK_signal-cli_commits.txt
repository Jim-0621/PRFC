File: lib/src/main/java/org/asamk/signal/manager/storage/keyValue/KeyValueStore.java
Patch:
@@ -40,7 +40,7 @@ public <T> T getEntry(KeyValueEntry<T> key) {
         try (final var connection = database.getConnection()) {
             return getEntry(connection, key);
         } catch (SQLException e) {
-            throw new RuntimeException("Failed read from pre_key store", e);
+            throw new RuntimeException("Failed read from key_value store", e);
         }
     }
 

File: src/main/java/org/asamk/signal/App.java
Patch:
@@ -99,6 +99,9 @@ static ArgumentParser buildArgumentParser() {
                 .help("Disable message send log (for resending messages that recipient couldn't decrypt)")
                 .action(Arguments.storeTrue());
 
+        parser.epilog(
+                "The global arguments are shown with 'signal-cli -h' and need to come before the subcommand, while the subcommand-specific arguments (shown with 'signal-cli SUBCOMMAND -h') need to be given after the subcommand.");
+
         var subparsers = parser.addSubparsers().title("subcommands").dest("command");
 
         Commands.getCommandSubparserAttachers().forEach((key, value) -> {

File: src/main/java/org/asamk/signal/http/HttpServerHandler.java
Patch:
@@ -156,7 +156,7 @@ private void handleEventsEndpoint(HttpExchange httpExchange) throws IOException
         }
 
         try {
-            final var queryString = httpExchange.getRequestURI().getQuery();
+            final var queryString = httpExchange.getRequestURI().getRawQuery();
             final var query = queryString == null ? Map.<String, String>of() : Util.getQueryMap(queryString);
 
             List<Manager> managers = getManagerFromQuery(query);

File: lib/src/main/java/org/asamk/signal/manager/helper/SyncHelper.java
Patch:
@@ -366,7 +366,7 @@ public void handleSyncDeviceContacts(final InputStream input) throws IOException
                 c = s.read();
             } catch (IOException e) {
                 if (e.getMessage() != null && e.getMessage().contains("Missing contact address!")) {
-                    logger.warn("Sync contacts contained invalid contact, ignoring: {}", e.getMessage());
+                    logger.debug("Sync contacts contained invalid contact, ignoring: {}", e.getMessage());
                     continue;
                 } else {
                     throw e;

File: lib/src/main/java/org/asamk/signal/manager/syncStorage/ContactRecordProcessor.java
Patch:
@@ -270,7 +270,9 @@ protected void updateLocal(StorageRecordUpdate<SignalContactRecord> update) thro
                     .withNickNameGivenName(nullIfEmpty(contactProto.givenName))
                     .withNickNameFamilyName(nullIfEmpty(contactProto.familyName))
                     .withNote(nullIfEmpty(contactProto.note))
-                    .withUnregisteredTimestamp(contactProto.unregisteredAtTimestamp);
+                    .withUnregisteredTimestamp(contactProto.unregisteredAtTimestamp == 0
+                            ? null
+                            : contactProto.unregisteredAtTimestamp);
             account.getRecipientStore().storeContact(connection, recipientId, newContact.build());
         }
 

File: lib/src/main/java/org/asamk/signal/manager/storage/keyValue/KeyValueStore.java
Patch:
@@ -78,7 +78,7 @@ public <T> boolean storeEntry(
             final KeyValueEntry<T> key,
             final T value
     ) throws SQLException {
-        final var entry = getEntry(key);
+        final var entry = getEntry(connection, key);
         if (Objects.equals(entry, value)) {
             return false;
         }

File: lib/src/main/java/org/asamk/signal/manager/helper/IncomingMessageHandler.java
Patch:
@@ -962,7 +962,7 @@ private DeviceAddress getSender(SignalServiceEnvelope envelope, SignalServiceCon
 
     private DeviceAddress getDestination(SignalServiceEnvelope envelope) {
         final var destination = envelope.getDestinationServiceId();
-        if (destination == null) {
+        if (destination == null || destination.isUnknown()) {
             return new DeviceAddress(account.getSelfRecipientId(), account.getAci(), account.getDeviceId());
         }
         return new DeviceAddress(account.getRecipientResolver().resolveRecipient(destination),

File: lib/src/main/java/org/asamk/signal/manager/helper/AccountHelper.java
Patch:
@@ -502,6 +502,7 @@ public void addDevice(DeviceLinkUrl deviceLinkInfo) throws IOException, org.asam
                         account.getProfileKey(),
                         account.getOrCreatePinMasterKey(),
                         account.getOrCreateMediaRootBackupKey(),
+                        account.getOrCreateAccountEntropyPool(),
                         verificationCode.getVerificationCode(),
                         null));
         account.setMultiDevice(true);

File: lib/src/main/java/org/asamk/signal/manager/internal/ProvisioningManagerImpl.java
Patch:
@@ -150,7 +150,9 @@ public String finishDeviceLink(String deviceName) throws IOException, TimeoutExc
                     ret.getAciIdentity(),
                     ret.getPniIdentity(),
                     profileKey,
-                    ret.getMasterKey());
+                    ret.getMasterKey(),
+                    ret.getAccountEntropyPool(),
+                    ret.getMediaRootBackupKey());
 
             account.getConfigurationStore().setReadReceipts(ret.isReadReceipts());
 

File: src/main/java/org/asamk/signal/BaseConfig.java
Patch:
@@ -8,7 +8,7 @@ public class BaseConfig {
     public static final String PROJECT_VERSION = BaseConfig.class.getPackage().getImplementationVersion();
 
     static final String USER_AGENT_SIGNAL_ANDROID = Optional.ofNullable(System.getenv("SIGNAL_CLI_USER_AGENT"))
-            .orElse("Signal-Android/7.21.4");
+            .orElse("Signal-Android/7.26.1");
     static final String USER_AGENT_SIGNAL_CLI = PROJECT_NAME == null
             ? "signal-cli"
             : PROJECT_NAME + "/" + PROJECT_VERSION;

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/RecipientAddress.java
Patch:
@@ -27,7 +27,7 @@ public record RecipientAddress(
             pni = Optional.empty();
         }
         if (aci.isEmpty() && pni.isEmpty() && number.isEmpty() && username.isEmpty()) {
-            throw new AssertionError("Must have either a ServiceId, username or E164 number!");
+            throw new InvalidAddress("Must have either a ServiceId, username or E164 number!");
         }
     }
 

File: lib/src/main/java/org/asamk/signal/manager/api/Profile.java
Patch:
@@ -161,7 +161,8 @@ public static UnidentifiedAccessMode valueOfOrUnknown(String value) {
     }
 
     public enum Capability {
-        storage;
+        storage,
+        storageServiceEncryptionV2Capability;
 
         public static Capability valueOfOrNull(String value) {
             try {

File: lib/src/main/java/org/asamk/signal/manager/config/LiveConfig.java
Patch:
@@ -51,7 +51,7 @@ class LiveConfig {
     private static final byte[] backupServerPublicParams = Base64.getDecoder()
             .decode("AJwNSU55fsFCbgaxGRD11wO1juAs8Yr5GF8FPlGzzvdJJIKH5/4CC7ZJSOe3yL2vturVaRU2Cx0n751Vt8wkj1bozK3CBV1UokxV09GWf+hdVImLGjXGYLLhnI1J2TWEe7iWHyb553EEnRb5oxr9n3lUbNAJuRmFM7hrr0Al0F0wrDD4S8lo2mGaXe0MJCOM166F8oYRQqpFeEHfiLnxA1O8ZLh7vMdv4g9jI5phpRBTsJ5IjiJrWeP0zdIGHEssUeprDZ9OUJ14m0v61eYJMKsf59Bn+mAT2a7YfB+Don9O");
 
-    private static Environment LIBSIGNAL_NET_ENV = Environment.PRODUCTION;
+    private static final Environment LIBSIGNAL_NET_ENV = Environment.PRODUCTION;
 
     static SignalServiceConfiguration createDefaultServiceConfiguration(
             final List<Interceptor> interceptors
@@ -71,7 +71,8 @@ static SignalServiceConfiguration createDefaultServiceConfiguration(
                 proxy,
                 zkGroupServerPublicParams,
                 genericServerPublicParams,
-                backupServerPublicParams);
+                backupServerPublicParams,
+                false);
     }
 
     static ECPublicKey getUnidentifiedSenderTrustRoot() {

File: lib/src/main/java/org/asamk/signal/manager/config/ServiceConfig.java
Patch:
@@ -29,7 +29,8 @@ public class ServiceConfig {
 
     public static AccountAttributes.Capabilities getCapabilities(boolean isPrimaryDevice) {
         final var deleteSync = !isPrimaryDevice;
-        return new AccountAttributes.Capabilities(true, deleteSync, true);
+        final var storageEncryptionV2 = !isPrimaryDevice;
+        return new AccountAttributes.Capabilities(true, deleteSync, true, storageEncryptionV2);
     }
 
     public static ServiceEnvironmentConfig getServiceEnvironmentConfig(

File: lib/src/main/java/org/asamk/signal/manager/config/StagingConfig.java
Patch:
@@ -51,7 +51,7 @@ class StagingConfig {
     private static final byte[] backupServerPublicParams = Base64.getDecoder()
             .decode("AHYrGb9IfugAAJiPKp+mdXUx+OL9zBolPYHYQz6GI1gWjpEu5me3zVNSvmYY4zWboZHif+HG1sDHSuvwFd0QszSwuSF4X4kRP3fJREdTZ5MCR0n55zUppTwfHRW2S4sdQ0JGz7YDQIJCufYSKh0pGNEHL6hv79Agrdnr4momr3oXdnkpVBIp3HWAQ6IbXQVSG18X36GaicI1vdT0UFmTwU2KTneluC2eyL9c5ff8PcmiS+YcLzh0OKYQXB5ZfQ06d6DiINvDQLy75zcfUOniLAj0lGJiHxGczin/RXisKSR8");
 
-    private static Network.Environment LIBSIGNAL_NET_ENV = Network.Environment.STAGING;
+    private static final Network.Environment LIBSIGNAL_NET_ENV = Network.Environment.STAGING;
 
     static SignalServiceConfiguration createDefaultServiceConfiguration(
             final List<Interceptor> interceptors
@@ -71,7 +71,8 @@ static SignalServiceConfiguration createDefaultServiceConfiguration(
                 proxy,
                 zkGroupServerPublicParams,
                 genericServerPublicParams,
-                backupServerPublicParams);
+                backupServerPublicParams,
+                false);
     }
 
     static ECPublicKey getUnidentifiedSenderTrustRoot() {

File: lib/src/main/java/org/asamk/signal/manager/helper/GroupV2Helper.java
Patch:
@@ -82,7 +82,7 @@ DecryptedGroupResponse getDecryptedGroup(final GroupSecretParams groupSecretPara
             final var groupsV2AuthorizationString = getGroupAuthForToday(groupSecretParams);
             return dependencies.getGroupsV2Api().getGroup(groupSecretParams, groupsV2AuthorizationString);
         } catch (NonSuccessfulResponseCodeException e) {
-            if (e.getCode() == 403) {
+            if (e.code == 403) {
                 throw new NotAGroupMemberException(GroupUtils.getGroupIdV2(groupSecretParams), null);
             }
             logger.warn("Failed to retrieve Group V2 info, ignoring: {}", e.getMessage());
@@ -119,7 +119,7 @@ GroupHistoryPage getDecryptedGroupHistoryPage(
                             false,
                             sendEndorsementsExpirationMs);
         } catch (NonSuccessfulResponseCodeException e) {
-            if (e.getCode() == 403) {
+            if (e.code == 403) {
                 throw new NotAGroupMemberException(GroupUtils.getGroupIdV2(groupSecretParams), null);
             }
             logger.warn("Failed to retrieve Group V2 history, ignoring: {}", e.getMessage());

File: lib/src/main/java/org/asamk/signal/manager/helper/PreKeyHelper.java
Patch:
@@ -172,7 +172,7 @@ private boolean refreshPreKeysIfNecessary(
             // This can happen when the primary device has changed phone number
             logger.warn("Failed to updated pre keys: {}", e.getMessage());
         } catch (NonSuccessfulResponseCodeException e) {
-            if (serviceIdType != ServiceIdType.PNI || e.getCode() != 422) {
+            if (serviceIdType != ServiceIdType.PNI || e.code != 422) {
                 throw e;
             }
             logger.warn("Failed to set PNI pre keys, ignoring for now. Account needs to be reregistered to fix this.");

File: lib/src/main/java/org/asamk/signal/manager/helper/RecipientHelper.java
Patch:
@@ -239,7 +239,6 @@ private Map<String, RegisteredUser> getRegisteredUsersV2(
                             newNumbers,
                             account.getRecipientStore().getServiceIdToProfileKeyMap(),
                             token,
-                            dependencies.getServiceEnvironmentConfig().cdsiMrenclave(),
                             null,
                             dependencies.getLibSignalNetwork(),
                             newToken -> {

File: lib/src/main/java/org/asamk/signal/manager/syncStorage/WriteOperationResult.java
Patch:
@@ -21,8 +21,8 @@ public String toString() {
         } else {
             return String.format(Locale.ROOT,
                     "ManifestVersion: %d, Total Keys: %d, Inserts: %d, Deletes: %d",
-                    manifest.getVersion(),
-                    manifest.getStorageIds().size(),
+                    manifest.version,
+                    manifest.storageIds.size(),
                     inserts.size(),
                     deletes.size());
         }

File: lib/src/main/java/org/asamk/signal/manager/util/NumberVerificationUtils.java
Patch:
@@ -184,7 +184,7 @@ private static RegistrationSessionMetadataResponse submitCaptcha(
                  TokenNotAcceptedException _e) {
             throw new CaptchaRequiredException("Captcha not accepted");
         } catch (NonSuccessfulResponseCodeException e) {
-            if (e.getCode() == 400) {
+            if (e.code == 400) {
                 throw new CaptchaRequiredException("Captcha has invalid format");
             }
             throw e;

File: lib/src/main/java/org/asamk/signal/manager/util/ProfileUtils.java
Patch:
@@ -84,6 +84,9 @@ public static HashSet<Profile.Capability> getCapabilities(final SignalServicePro
         if (encryptedProfile.getCapabilities().isStorage()) {
             capabilities.add(Profile.Capability.storage);
         }
+        if (encryptedProfile.getCapabilities().isStorageServiceEncryptionV2()) {
+            capabilities.add(Profile.Capability.storageServiceEncryptionV2Capability);
+        }
 
         return capabilities;
     }

File: lib/src/main/java/org/asamk/signal/manager/helper/AccountHelper.java
Patch:
@@ -283,7 +283,7 @@ private void finishChangeNumberInternal(
                 (sessionId1, verificationCode1, registrationLock) -> {
                     final var registrationApi = dependencies.getRegistrationApi();
                     try {
-                        Utils.handleResponseException(registrationApi.verifyAccount(verificationCode1, sessionId1));
+                        Utils.handleResponseException(registrationApi.verifyAccount(sessionId1, verificationCode1));
                     } catch (AlreadyVerifiedException e) {
                         // Already verified so can continue changing number
                     }

File: lib/src/main/java/org/asamk/signal/manager/internal/RegistrationManagerImpl.java
Patch:
@@ -258,7 +258,7 @@ private VerifyAccountResponse verifyAccountWithCode(
     ) throws IOException {
         final var registrationApi = unauthenticatedAccountManager.getRegistrationApi();
         try {
-            Utils.handleResponseException(registrationApi.verifyAccount(verificationCode, sessionId));
+            Utils.handleResponseException(registrationApi.verifyAccount(sessionId, verificationCode));
         } catch (AlreadyVerifiedException e) {
             // Already verified so can continue registering
         }

File: lib/src/main/java/org/asamk/signal/manager/config/ServiceConfig.java
Patch:
@@ -29,8 +29,7 @@ public class ServiceConfig {
 
     public static AccountAttributes.Capabilities getCapabilities(boolean isPrimaryDevice) {
         final var deleteSync = !isPrimaryDevice;
-        final var versionedExpirationTimer = !isPrimaryDevice;
-        return new AccountAttributes.Capabilities(true, deleteSync, versionedExpirationTimer);
+        return new AccountAttributes.Capabilities(true, deleteSync, true);
     }
 
     public static ServiceEnvironmentConfig getServiceEnvironmentConfig(

File: lib/src/main/java/org/asamk/signal/manager/helper/IncomingMessageHandler.java
Patch:
@@ -802,7 +802,9 @@ private List<HandleAction> handleSignalServiceDataMessage(
                 }
             } else if (conversationPartnerAddress != null) {
                 context.getContactHelper()
-                        .setExpirationTimer(conversationPartnerAddress.recipientId(), message.getExpiresInSeconds());
+                        .setExpirationTimer(conversationPartnerAddress.recipientId(),
+                                message.getExpiresInSeconds(),
+                                message.getExpireTimerVersion());
             }
         }
         if (!ignoreAttachments) {

File: lib/src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -864,6 +864,7 @@ private void loadLegacyStores(
                                 null,
                                 contact.color,
                                 contact.messageExpirationTime,
+                                1,
                                 0,
                                 false,
                                 contact.blocked,
@@ -939,6 +940,7 @@ private void loadLegacyThreadStore(final JsonNode rootNode) {
                             getContactStore().storeContact(recipientId,
                                     Contact.newBuilder(contact)
                                             .withMessageExpirationTime(thread.messageExpirationTime)
+                                            .withMessageExpirationTimeVersion(1)
                                             .build());
                         }
                     } else {

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/LegacyRecipientStore2.java
Patch:
@@ -46,6 +46,7 @@ public static void migrate(File file, RecipientStore recipientStore) {
                             null,
                             r.contact.color,
                             r.contact.messageExpirationTime,
+                            1,
                             0,
                             false,
                             r.contact.blocked,

File: src/main/java/org/asamk/signal/dbus/DbusManagerImpl.java
Patch:
@@ -699,6 +699,7 @@ public List<Recipient> getRecipients(
                             null,
                             null,
                             0,
+                            1,
                             0,
                             false,
                             contactBlocked,

File: lib/src/main/java/org/asamk/signal/manager/internal/ManagerImpl.java
Patch:
@@ -771,6 +771,8 @@ private void applyMessage(
             } else {
                 messageBuilder.withAttachments(uploadedAttachments);
             }
+        } else if (!additionalAttachments.isEmpty()) {
+            messageBuilder.withAttachments(additionalAttachments);
         }
         if (!message.mentions().isEmpty()) {
             messageBuilder.withMentions(resolveMentions(message.mentions()));

File: lib/src/main/java/org/asamk/signal/manager/helper/Context.java
Patch:
@@ -114,7 +114,7 @@ public IncomingMessageHandler getIncomingMessageHandler() {
     }
 
     PinHelper getPinHelper() {
-        return getOrCreate(() -> pinHelper, () -> pinHelper = new PinHelper(dependencies.getSecureValueRecoveryV2()));
+        return getOrCreate(() -> pinHelper, () -> pinHelper = new PinHelper(dependencies.getSecureValueRecovery()));
     }
 
     public PreKeyHelper getPreKeyHelper() {

File: lib/src/main/java/org/asamk/signal/manager/helper/PinHelper.java
Patch:
@@ -32,11 +32,11 @@ public void setRegistrationLockPin(
                     case SecureValueRecovery.BackupResponse.Success success -> {
                     }
                     case SecureValueRecovery.BackupResponse.ServerRejected serverRejected ->
-                            logger.warn("Backup svr2 failed: ServerRejected");
+                            logger.warn("Backup svr failed: ServerRejected");
                     case SecureValueRecovery.BackupResponse.EnclaveNotFound enclaveNotFound ->
-                            logger.warn("Backup svr2 failed: EnclaveNotFound");
+                            logger.warn("Backup svr failed: EnclaveNotFound");
                     case SecureValueRecovery.BackupResponse.ExposeFailure exposeFailure ->
-                            logger.warn("Backup svr2 failed: ExposeFailure");
+                            logger.warn("Backup svr failed: ExposeFailure");
                     case SecureValueRecovery.BackupResponse.ApplicationError error ->
                             throw new IOException(error.getException());
                     case SecureValueRecovery.BackupResponse.NetworkError error -> throw error.getException();

File: lib/src/main/java/org/asamk/signal/manager/internal/RegistrationManagerImpl.java
Patch:
@@ -96,11 +96,11 @@ public RegistrationManagerImpl(
                 userAgent,
                 ServiceConfig.AUTOMATIC_NETWORK_RETRY,
                 ServiceConfig.GROUP_MAX_SIZE);
-        final var secureValueRecoveryV2 = serviceEnvironmentConfig.svr2Mrenclaves()
+        final var secureValueRecovery = serviceEnvironmentConfig.svr2Mrenclaves()
                 .stream()
-                .map(mr -> (SecureValueRecovery) accountManager.getSecureValueRecoveryV2(mr))
+                .map(mr -> (SecureValueRecovery) this.unauthenticatedAccountManager.getSecureValueRecoveryV2(mr))
                 .toList();
-        this.pinHelper = new PinHelper(secureValueRecoveryV2);
+        this.pinHelper = new PinHelper(secureValueRecovery);
     }
 
     @Override

File: lib/src/main/java/org/asamk/signal/manager/helper/RecipientHelper.java
Patch:
@@ -14,6 +14,7 @@
 import org.whispersystems.signalservice.api.push.ServiceId.ACI;
 import org.whispersystems.signalservice.api.push.ServiceId.PNI;
 import org.whispersystems.signalservice.api.push.SignalServiceAddress;
+import org.whispersystems.signalservice.api.push.exceptions.CdsiInvalidArgumentException;
 import org.whispersystems.signalservice.api.push.exceptions.CdsiInvalidTokenException;
 import org.whispersystems.signalservice.api.services.CdsiV2Service;
 
@@ -254,7 +255,7 @@ private Map<String, RegisteredUser> getRegisteredUsersV2(
                                     account.setLastRecipientsRefresh(System.currentTimeMillis());
                                 }
                             });
-        } catch (CdsiInvalidTokenException e) {
+        } catch (CdsiInvalidTokenException | CdsiInvalidArgumentException e) {
             account.setCdsiToken(null);
             account.getCdsiStore().clearAll();
             throw e;

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/CdsiStore.java
Patch:
@@ -156,7 +156,7 @@ private static void updateLastSeen(
     public void clearAll() {
         final var sql = (
                 """
-                TRUNCATE %s
+                DELETE FROM %s
                 """
         ).formatted(TABLE_CDSI);
         try (final var connection = database.getConnection()) {

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/MergeRecipientHelper.java
Patch:
@@ -34,8 +34,7 @@ static Pair<RecipientId, List<RecipientId>> resolveRecipientTrustedLocked(
 
             if (recipient.address().aci().isEmpty() || (
                     address.aci().isEmpty() && (
-                            address.pni().isEmpty()
-                                    || recipient.address().pni().equals(address.pni())
+                            address.pni().isEmpty() || recipient.address().pni().equals(address.pni())
                     )
             ) || recipient.address().aci().equals(address.aci())) {
                 logger.debug("Got existing recipient {}, updating with high trust address", recipient.id());
@@ -104,7 +103,7 @@ static Pair<RecipientId, List<RecipientId>> resolveRecipientTrustedLocked(
         }
 
         for (final var recipient : recipientsToBeStripped) {
-            store.updateRecipientAddress(recipient.id(), recipient.address().removeIdentifiersFrom(address));
+            store.updateRecipientAddress(recipient.id(), recipient.address().removeIdentifiersFrom(finalAddress));
         }
 
         // Create fixed RecipientIds that won't update its id after merged

File: lib/src/main/java/org/asamk/signal/manager/storage/groups/GroupStore.java
Patch:
@@ -271,7 +271,7 @@ public GroupInfoV2 getGroupOrPartialMigrate(
     private GroupInfoV2 getGroupOrPartialMigrate(
             Connection connection, final GroupMasterKey groupMasterKey, final GroupIdV2 groupId
     ) throws SQLException {
-        switch (getGroup(groupId)) {
+        switch (getGroup(connection, (GroupId) groupId)) {
             case GroupInfoV1 groupInfoV1 -> {
                 // Received a v2 group message for a v1 group, we need to locally migrate the group
                 deleteGroup(connection, groupInfoV1.getGroupId());

File: lib/src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -6,6 +6,7 @@
 import org.asamk.signal.manager.api.CaptchaRequiredException;
 import org.asamk.signal.manager.api.Configuration;
 import org.asamk.signal.manager.api.Device;
+import org.asamk.signal.manager.api.DeviceLimitExceededException;
 import org.asamk.signal.manager.api.DeviceLinkUrl;
 import org.asamk.signal.manager.api.Group;
 import org.asamk.signal.manager.api.GroupId;
@@ -148,7 +149,7 @@ void submitRateLimitRecaptchaChallenge(
 
     void removeLinkedDevices(int deviceId) throws IOException, NotPrimaryDeviceException;
 
-    void addDeviceLink(DeviceLinkUrl linkUri) throws IOException, InvalidDeviceLinkException, NotPrimaryDeviceException;
+    void addDeviceLink(DeviceLinkUrl linkUri) throws IOException, InvalidDeviceLinkException, NotPrimaryDeviceException, DeviceLimitExceededException;
 
     void setRegistrationLockPin(Optional<String> pin) throws IOException, NotPrimaryDeviceException;
 

File: lib/src/main/java/org/asamk/signal/manager/internal/ManagerImpl.java
Patch:
@@ -23,6 +23,7 @@
 import org.asamk.signal.manager.api.CaptchaRequiredException;
 import org.asamk.signal.manager.api.Configuration;
 import org.asamk.signal.manager.api.Device;
+import org.asamk.signal.manager.api.DeviceLimitExceededException;
 import org.asamk.signal.manager.api.DeviceLinkUrl;
 import org.asamk.signal.manager.api.Group;
 import org.asamk.signal.manager.api.GroupId;
@@ -487,7 +488,7 @@ public void removeLinkedDevices(int deviceId) throws IOException, NotPrimaryDevi
     }
 
     @Override
-    public void addDeviceLink(DeviceLinkUrl linkUrl) throws IOException, InvalidDeviceLinkException, NotPrimaryDeviceException {
+    public void addDeviceLink(DeviceLinkUrl linkUrl) throws IOException, InvalidDeviceLinkException, NotPrimaryDeviceException, DeviceLimitExceededException {
         if (!account.isPrimaryDevice()) {
             throw new NotPrimaryDeviceException();
         }

File: src/main/java/org/asamk/signal/dbus/DbusSignalImpl.java
Patch:
@@ -5,6 +5,7 @@
 import org.asamk.signal.manager.Manager;
 import org.asamk.signal.manager.api.AttachmentInvalidException;
 import org.asamk.signal.manager.api.CaptchaRejectedException;
+import org.asamk.signal.manager.api.DeviceLimitExceededException;
 import org.asamk.signal.manager.api.DeviceLinkUrl;
 import org.asamk.signal.manager.api.GroupId;
 import org.asamk.signal.manager.api.GroupInviteLinkUrl;
@@ -189,7 +190,7 @@ public void addDevice(String uri) {
         try {
             var deviceLinkUrl = DeviceLinkUrl.parseDeviceLinkUri(new URI(uri));
             m.addDeviceLink(deviceLinkUrl);
-        } catch (IOException | InvalidDeviceLinkException e) {
+        } catch (IOException | InvalidDeviceLinkException | DeviceLimitExceededException e) {
             throw new Error.Failure(e.getClass().getSimpleName() + " Add device link failed. " + e.getMessage());
         } catch (NotPrimaryDeviceException e) {
             throw new Error.Failure("This command doesn't work on linked devices.");

File: lib/src/main/java/org/asamk/signal/manager/helper/RecipientHelper.java
Patch:
@@ -231,7 +231,7 @@ private Map<String, RegisteredUser> getRegisteredUsersV2(
         final CdsiV2Service.Response response;
         try {
             response = dependencies.getAccountManager()
-                    .getRegisteredUsersWithCdsi(previousNumbers,
+                    .getRegisteredUsersWithCdsi(token.isEmpty() ? Set.of() : previousNumbers,
                             newNumbers,
                             account.getRecipientStore().getServiceIdToProfileKeyMap(),
                             token,

File: lib/src/main/java/org/asamk/signal/manager/helper/SendHelper.java
Patch:
@@ -532,7 +532,7 @@ private Set<RecipientId> getSenderKeyCapableRecipientIds(final Set<RecipientId>
         final var recipientList = new ArrayList<>(recipientIds);
         for (final var recipientId : recipientList) {
             final var access = context.getUnidentifiedAccessHelper().getSealedSenderAccessFor(recipientId);
-            if (access != null) {
+            if (access == null) {
                 continue;
             }
 

File: lib/src/main/java/org/asamk/signal/manager/helper/SendHelper.java
Patch:
@@ -261,7 +261,7 @@ public SendMessageResult resendMessage(
         }
 
         final var groupId = messageSendLogEntry.groupId().get();
-        final var group = account.getGroupStore().getGroup(groupId);
+        final var group = context.getGroupHelper().getGroup(groupId);
 
         if (group == null) {
             logger.debug("Could not find a matching group for the groupId {}! Skipping message send.",

File: lib/src/main/java/org/asamk/signal/manager/internal/ManagerImpl.java
Patch:
@@ -511,7 +511,7 @@ void refreshPreKeys() throws IOException {
 
     @Override
     public List<Group> getGroups() {
-        return account.getGroupStore().getGroups().stream().map(this::toGroup).toList();
+        return context.getGroupHelper().getGroups().stream().map(this::toGroup).toList();
     }
 
     private Group toGroup(final GroupInfo groupInfo) {

File: src/main/java/org/asamk/signal/commands/GetUserStatusCommand.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.util.HashSet;
 import java.util.Map;
+import java.util.Set;
 import java.util.stream.Stream;
 
 public class GetUserStatusCommand implements JsonRpcLocalCommand {
@@ -47,7 +48,8 @@ public void handleCommand(
         // Get a map of registration statuses
         Map<String, UserStatus> registered;
         try {
-            registered = m.getUserStatus(new HashSet<>(ns.getList("recipient")));
+            final var recipient = ns.<String>getList("recipient");
+            registered = m.getUserStatus(recipient == null ? Set.of() : new HashSet<>(recipient));
         } catch (RateLimitException e) {
             final var message = CommandUtil.getRateLimitMessage(e);
             throw new RateLimitErrorException(message, e);

File: lib/src/main/java/org/asamk/signal/manager/helper/RecipientHelper.java
Patch:
@@ -77,6 +77,8 @@ public Set<RecipientId> resolveRecipients(Collection<RecipientIdentifier.Single>
     public RecipientId resolveRecipient(final RecipientIdentifier.Single recipient) throws UnregisteredRecipientException {
         if (recipient instanceof RecipientIdentifier.Uuid uuidRecipient) {
             return account.getRecipientResolver().resolveRecipient(ACI.from(uuidRecipient.uuid()));
+        } else if (recipient instanceof RecipientIdentifier.Pni pniRecipient) {
+            return account.getRecipientResolver().resolveRecipient(PNI.parseOrThrow(pniRecipient.pni()));
         } else if (recipient instanceof RecipientIdentifier.Number numberRecipient) {
             final var number = numberRecipient.number();
             return account.getRecipientStore().resolveRecipientByNumber(number, () -> {

File: lib/src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -1338,6 +1338,7 @@ public UsernameLinkComponents getUsernameLink() {
 
     public void setUsernameLink(final UsernameLinkComponents usernameLink) {
         this.usernameLink = usernameLink;
+        save();
     }
 
     public ServiceEnvironment getServiceEnvironment() {

File: lib/src/main/java/org/asamk/signal/manager/internal/ManagerImpl.java
Patch:
@@ -1366,7 +1366,7 @@ private Identity toIdentity(final IdentityInfo identityInfo) {
         final var scannableFingerprint = context.getIdentityHelper()
                 .computeSafetyNumberForScanning(identityInfo.getServiceId(), identityInfo.getIdentityKey());
         return new Identity(address.toApiRecipientAddress(),
-                identityInfo.getIdentityKey(),
+                identityInfo.getIdentityKey().getPublicKey().serialize(),
                 context.getIdentityHelper()
                         .computeSafetyNumber(identityInfo.getServiceId(), identityInfo.getIdentityKey()),
                 scannableFingerprint == null ? null : scannableFingerprint.getSerialized(),

File: src/main/java/org/asamk/Signal.java
Patch:
@@ -642,7 +642,7 @@ public String getNumber() {
     @DBusProperty(name = "Fingerprint", type = Byte[].class, access = DBusProperty.Access.READ)
     @DBusProperty(name = "SafetyNumber", type = String.class, access = DBusProperty.Access.READ)
     @DBusProperty(name = "TrustLevel", type = String.class, access = DBusProperty.Access.READ)
-    @DBusProperty(name = "AddedDate", type = Integer.class, access = DBusProperty.Access.READ)
+    @DBusProperty(name = "AddedDate", type = Long.class, access = DBusProperty.Access.READ)
     @DBusProperty(name = "ScannableSafetyNumber", type = Byte[].class, access = DBusProperty.Access.READ)
     interface Identity extends DBusInterface, Properties {
 

File: src/main/java/org/asamk/signal/commands/ListIdentitiesCommand.java
Patch:
@@ -34,7 +34,7 @@ private static void printIdentityFingerprint(PlainTextWriter writer, Identity th
                 theirId.recipient().getLegacyIdentifier(),
                 theirId.trustLevel(),
                 DateUtils.formatTimestamp(theirId.dateAddedTimestamp()),
-                Hex.toString(theirId.getFingerprint()),
+                Hex.toString(theirId.fingerprint()),
                 Util.formatSafetyNumber(theirId.safetyNumber()));
     }
 
@@ -70,7 +70,7 @@ public void handleCommand(
                     var scannableSafetyNumber = id.scannableSafetyNumber();
                     return new JsonIdentity(address.number().orElse(null),
                             address.uuid().map(UUID::toString).orElse(null),
-                            Hex.toString(id.getFingerprint()),
+                            Hex.toString(id.fingerprint()),
                             safetyNumber,
                             scannableSafetyNumber == null
                                     ? null

File: src/main/java/org/asamk/signal/dbus/DbusSignalImpl.java
Patch:
@@ -1105,7 +1105,7 @@ public DbusSignalIdentityImpl(final org.asamk.signal.manager.api.Identity identi
                     List.of(new DbusProperty<>("Number", () -> identity.recipient().number().orElse("")),
                             new DbusProperty<>("Uuid",
                                     () -> identity.recipient().uuid().map(UUID::toString).orElse("")),
-                            new DbusProperty<>("Fingerprint", identity::getFingerprint),
+                            new DbusProperty<>("Fingerprint", identity::fingerprint),
                             new DbusProperty<>("SafetyNumber", identity::safetyNumber),
                             new DbusProperty<>("ScannableSafetyNumber", identity::scannableSafetyNumber),
                             new DbusProperty<>("TrustLevel", identity::trustLevel),

File: lib/src/main/java/org/asamk/signal/manager/RegistrationManager.java
Patch:
@@ -5,7 +5,7 @@
 import org.asamk.signal.manager.api.NonNormalizedPhoneNumberException;
 import org.asamk.signal.manager.api.PinLockedException;
 import org.asamk.signal.manager.api.RateLimitException;
-import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
+import org.asamk.signal.manager.api.VerificationMethodNotAvailableException;
 
 import java.io.Closeable;
 import java.io.IOException;
@@ -14,7 +14,7 @@ public interface RegistrationManager extends Closeable {
 
     void register(
             boolean voiceVerification, String captcha, final boolean forceRegister
-    ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, RateLimitException, VerificationMethoNotAvailableException;
+    ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, RateLimitException, VerificationMethodNotAvailableException;
 
     void verifyAccount(
             String verificationCode, String pin

File: lib/src/main/java/org/asamk/signal/manager/helper/AccountHelper.java
Patch:
@@ -7,7 +7,7 @@
 import org.asamk.signal.manager.api.NonNormalizedPhoneNumberException;
 import org.asamk.signal.manager.api.PinLockedException;
 import org.asamk.signal.manager.api.RateLimitException;
-import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
+import org.asamk.signal.manager.api.VerificationMethodNotAvailableException;
 import org.asamk.signal.manager.internal.SignalDependencies;
 import org.asamk.signal.manager.jobs.SyncStorageJob;
 import org.asamk.signal.manager.storage.SignalAccount;
@@ -165,7 +165,7 @@ public void setPni(
 
     public void startChangeNumber(
             String newNumber, boolean voiceVerification, String captcha
-    ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, RateLimitException, VerificationMethoNotAvailableException {
+    ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, RateLimitException, VerificationMethodNotAvailableException {
         final var accountManager = dependencies.createUnauthenticatedAccountManager(newNumber, account.getPassword());
         String sessionId = NumberVerificationUtils.handleVerificationSession(accountManager,
                 account.getSessionId(newNumber),

File: lib/src/main/java/org/asamk/signal/manager/internal/ManagerImpl.java
Patch:
@@ -65,7 +65,7 @@
 import org.asamk.signal.manager.api.UpdateProfile;
 import org.asamk.signal.manager.api.UserStatus;
 import org.asamk.signal.manager.api.UsernameLinkUrl;
-import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
+import org.asamk.signal.manager.api.VerificationMethodNotAvailableException;
 import org.asamk.signal.manager.config.ServiceEnvironmentConfig;
 import org.asamk.signal.manager.helper.AccountFileUpdater;
 import org.asamk.signal.manager.helper.Context;
@@ -380,7 +380,7 @@ public void deleteUsername() throws IOException {
     @Override
     public void startChangeNumber(
             String newNumber, boolean voiceVerification, String captcha
-    ) throws RateLimitException, IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, NotPrimaryDeviceException, VerificationMethoNotAvailableException {
+    ) throws RateLimitException, IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, NotPrimaryDeviceException, VerificationMethodNotAvailableException {
         if (!account.isPrimaryDevice()) {
             throw new NotPrimaryDeviceException();
         }

File: lib/src/main/java/org/asamk/signal/manager/internal/RegistrationManagerImpl.java
Patch:
@@ -24,7 +24,7 @@
 import org.asamk.signal.manager.api.PinLockedException;
 import org.asamk.signal.manager.api.RateLimitException;
 import org.asamk.signal.manager.api.UpdateProfile;
-import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
+import org.asamk.signal.manager.api.VerificationMethodNotAvailableException;
 import org.asamk.signal.manager.config.ServiceConfig;
 import org.asamk.signal.manager.config.ServiceEnvironmentConfig;
 import org.asamk.signal.manager.helper.AccountFileUpdater;
@@ -105,7 +105,7 @@ public RegistrationManagerImpl(
     @Override
     public void register(
             boolean voiceVerification, String captcha, final boolean forceRegister
-    ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, RateLimitException, VerificationMethoNotAvailableException {
+    ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, RateLimitException, VerificationMethodNotAvailableException {
         if (account.isRegistered()
                 && account.getServiceEnvironment() != null
                 && account.getServiceEnvironment() != serviceEnvironmentConfig.type()) {

File: lib/src/main/java/org/asamk/signal/manager/util/NumberVerificationUtils.java
Patch:
@@ -6,7 +6,7 @@
 import org.asamk.signal.manager.api.Pair;
 import org.asamk.signal.manager.api.PinLockedException;
 import org.asamk.signal.manager.api.RateLimitException;
-import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
+import org.asamk.signal.manager.api.VerificationMethodNotAvailableException;
 import org.asamk.signal.manager.helper.PinHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -35,7 +35,7 @@ public static String handleVerificationSession(
             Consumer<String> sessionIdSaver,
             boolean voiceVerification,
             String captcha
-    ) throws CaptchaRequiredException, IOException, RateLimitException, VerificationMethoNotAvailableException {
+    ) throws CaptchaRequiredException, IOException, RateLimitException, VerificationMethodNotAvailableException {
         RegistrationSessionMetadataResponse sessionResponse;
         try {
             sessionResponse = getValidSession(accountManager, sessionId);
@@ -63,7 +63,7 @@ public static String handleVerificationSession(
                 ? sessionResponse.getBody().getNextCall()
                 : sessionResponse.getBody().getNextSms();
         if (nextAttempt == null) {
-            throw new VerificationMethoNotAvailableException();
+            throw new VerificationMethodNotAvailableException();
         } else if (nextAttempt > 0) {
             final var timestamp = sessionResponse.getHeaders().getTimestamp() + nextAttempt * 1000;
             throw new RateLimitException(timestamp);

File: src/main/java/org/asamk/signal/commands/RegisterCommand.java
Patch:
@@ -15,7 +15,7 @@
 import org.asamk.signal.manager.api.CaptchaRequiredException;
 import org.asamk.signal.manager.api.NonNormalizedPhoneNumberException;
 import org.asamk.signal.manager.api.RateLimitException;
-import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
+import org.asamk.signal.manager.api.VerificationMethodNotAvailableException;
 import org.asamk.signal.output.JsonWriter;
 import org.asamk.signal.util.CommandUtil;
 
@@ -84,7 +84,7 @@ private void register(
         } catch (IOException e) {
             throw new IOErrorException("Failed to register: %s (%s)".formatted(e.getMessage(),
                     e.getClass().getSimpleName()), e);
-        } catch (VerificationMethoNotAvailableException e) {
+        } catch (VerificationMethodNotAvailableException e) {
             throw new UserErrorException("Failed to register: " + e.getMessage() + (
                     voiceVerification
                             ? ": Before requesting voice verification you need to request SMS verification and wait a minute."

File: src/main/java/org/asamk/signal/commands/StartChangeNumberCommand.java
Patch:
@@ -13,7 +13,7 @@
 import org.asamk.signal.manager.api.NonNormalizedPhoneNumberException;
 import org.asamk.signal.manager.api.NotPrimaryDeviceException;
 import org.asamk.signal.manager.api.RateLimitException;
-import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
+import org.asamk.signal.manager.api.VerificationMethodNotAvailableException;
 import org.asamk.signal.output.OutputWriter;
 import org.asamk.signal.util.CommandUtil;
 
@@ -60,7 +60,7 @@ public void handleCommand(
         } catch (IOException e) {
             throw new IOErrorException("Failed to change number: %s (%s)".formatted(e.getMessage(),
                     e.getClass().getSimpleName()), e);
-        } catch (VerificationMethoNotAvailableException e) {
+        } catch (VerificationMethodNotAvailableException e) {
             throw new UserErrorException("Failed to register: " + e.getMessage() + (
                     voiceVerification
                             ? ": Before requesting voice verification you need to request SMS verification and wait a minute."

File: src/main/java/org/asamk/signal/dbus/DbusSignalControlImpl.java
Patch:
@@ -13,7 +13,7 @@
 import org.asamk.signal.manager.api.PinLockedException;
 import org.asamk.signal.manager.api.RateLimitException;
 import org.asamk.signal.manager.api.UserAlreadyExistsException;
-import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
+import org.asamk.signal.manager.api.VerificationMethodNotAvailableException;
 import org.freedesktop.dbus.DBusPath;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -74,7 +74,7 @@ public void registerWithCaptcha(
             throw new Error.InvalidNumber(e.getMessage());
         } catch (OverlappingFileLockException e) {
             throw new SignalControl.Error.Failure("Account is already in use");
-        } catch (IOException | VerificationMethoNotAvailableException e) {
+        } catch (IOException | VerificationMethodNotAvailableException e) {
             throw new SignalControl.Error.Failure(e.getClass().getSimpleName() + " " + e.getMessage());
         }
     }

File: lib/src/main/java/org/asamk/signal/manager/internal/ManagerImpl.java
Patch:
@@ -409,8 +409,7 @@ public void deleteAccount() throws IOException {
 
     @Override
     public void submitRateLimitRecaptchaChallenge(
-            String challenge,
-            String captcha
+            String challenge, String captcha
     ) throws IOException, CaptchaRejectedException {
         captcha = captcha == null ? null : captcha.replace("signalcaptcha://", "");
 
@@ -1389,7 +1388,7 @@ private boolean trustIdentity(
         final var recipientId = context.getRecipientHelper().resolveRecipient(recipient);
         final var updated = trustMethod.apply(recipientId);
         if (updated && this.isReceiving()) {
-            context.getReceiveHelper().setNeedsToRetryFailedMessages(true);
+            account.setNeedsToRetryFailedMessages(true);
         }
         return updated;
     }

File: lib/src/main/java/org/asamk/signal/manager/helper/UnidentifiedAccessHelper.java
Patch:
@@ -98,7 +98,7 @@ public Optional<UnidentifiedAccessPair> getAccessForSync() {
 
     private byte[] getSenderCertificateFor(final RecipientId recipientId) {
         final var sharingMode = account.getConfigurationStore().getPhoneNumberSharingMode();
-        if (sharingMode == null || sharingMode == PhoneNumberSharingMode.EVERYBODY || (
+        if (sharingMode == PhoneNumberSharingMode.EVERYBODY || (
                 sharingMode == PhoneNumberSharingMode.CONTACTS
                         && account.getContactStore().getContact(recipientId) != null
         )) {

File: lib/src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -43,6 +43,7 @@
 import org.asamk.signal.manager.api.UpdateProfile;
 import org.asamk.signal.manager.api.UserStatus;
 import org.asamk.signal.manager.api.UsernameLinkUrl;
+import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.whispersystems.signalservice.api.util.PhoneNumberFormatter;
@@ -125,7 +126,7 @@ void updateAccountAttributes(
 
     void startChangeNumber(
             String newNumber, boolean voiceVerification, String captcha
-    ) throws RateLimitException, IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, NotPrimaryDeviceException;
+    ) throws RateLimitException, IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, NotPrimaryDeviceException, VerificationMethoNotAvailableException;
 
     void finishChangeNumber(
             String newNumber, String verificationCode, String pin

File: lib/src/main/java/org/asamk/signal/manager/RegistrationManager.java
Patch:
@@ -5,6 +5,7 @@
 import org.asamk.signal.manager.api.NonNormalizedPhoneNumberException;
 import org.asamk.signal.manager.api.PinLockedException;
 import org.asamk.signal.manager.api.RateLimitException;
+import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
 
 import java.io.Closeable;
 import java.io.IOException;
@@ -13,7 +14,7 @@ public interface RegistrationManager extends Closeable {
 
     void register(
             boolean voiceVerification, String captcha
-    ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, RateLimitException;
+    ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, RateLimitException, VerificationMethoNotAvailableException;
 
     void verifyAccount(
             String verificationCode, String pin

File: lib/src/main/java/org/asamk/signal/manager/helper/AccountHelper.java
Patch:
@@ -7,6 +7,7 @@
 import org.asamk.signal.manager.api.NonNormalizedPhoneNumberException;
 import org.asamk.signal.manager.api.PinLockedException;
 import org.asamk.signal.manager.api.RateLimitException;
+import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
 import org.asamk.signal.manager.internal.SignalDependencies;
 import org.asamk.signal.manager.jobs.SyncStorageJob;
 import org.asamk.signal.manager.storage.SignalAccount;
@@ -164,7 +165,7 @@ public void setPni(
 
     public void startChangeNumber(
             String newNumber, boolean voiceVerification, String captcha
-    ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, RateLimitException {
+    ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, RateLimitException, VerificationMethoNotAvailableException {
         final var accountManager = dependencies.createUnauthenticatedAccountManager(newNumber, account.getPassword());
         String sessionId = NumberVerificationUtils.handleVerificationSession(accountManager,
                 account.getSessionId(newNumber),

File: lib/src/main/java/org/asamk/signal/manager/internal/ManagerImpl.java
Patch:
@@ -64,6 +64,7 @@
 import org.asamk.signal.manager.api.UpdateProfile;
 import org.asamk.signal.manager.api.UserStatus;
 import org.asamk.signal.manager.api.UsernameLinkUrl;
+import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
 import org.asamk.signal.manager.config.ServiceEnvironmentConfig;
 import org.asamk.signal.manager.helper.AccountFileUpdater;
 import org.asamk.signal.manager.helper.Context;
@@ -374,7 +375,7 @@ public void deleteUsername() throws IOException {
     @Override
     public void startChangeNumber(
             String newNumber, boolean voiceVerification, String captcha
-    ) throws RateLimitException, IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, NotPrimaryDeviceException {
+    ) throws RateLimitException, IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, NotPrimaryDeviceException, VerificationMethoNotAvailableException {
         if (!account.isPrimaryDevice()) {
             throw new NotPrimaryDeviceException();
         }

File: lib/src/main/java/org/asamk/signal/manager/internal/RegistrationManagerImpl.java
Patch:
@@ -24,6 +24,7 @@
 import org.asamk.signal.manager.api.PinLockedException;
 import org.asamk.signal.manager.api.RateLimitException;
 import org.asamk.signal.manager.api.UpdateProfile;
+import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
 import org.asamk.signal.manager.config.ServiceConfig;
 import org.asamk.signal.manager.config.ServiceEnvironmentConfig;
 import org.asamk.signal.manager.helper.AccountFileUpdater;
@@ -104,7 +105,7 @@ public RegistrationManagerImpl(
     @Override
     public void register(
             boolean voiceVerification, String captcha
-    ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, RateLimitException {
+    ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException, RateLimitException, VerificationMethoNotAvailableException {
         if (account.isRegistered()
                 && account.getServiceEnvironment() != null
                 && account.getServiceEnvironment() != serviceEnvironmentConfig.type()) {

File: src/main/java/org/asamk/signal/dbus/DbusSignalControlImpl.java
Patch:
@@ -13,6 +13,7 @@
 import org.asamk.signal.manager.api.PinLockedException;
 import org.asamk.signal.manager.api.RateLimitException;
 import org.asamk.signal.manager.api.UserAlreadyExistsException;
+import org.asamk.signal.manager.api.VerificationMethoNotAvailableException;
 import org.freedesktop.dbus.DBusPath;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -73,7 +74,7 @@ public void registerWithCaptcha(
             throw new Error.InvalidNumber(e.getMessage());
         } catch (OverlappingFileLockException e) {
             throw new SignalControl.Error.Failure("Account is already in use");
-        } catch (IOException e) {
+        } catch (IOException | VerificationMethoNotAvailableException e) {
             throw new SignalControl.Error.Failure(e.getClass().getSimpleName() + " " + e.getMessage());
         }
     }

File: lib/src/main/java/org/asamk/signal/manager/internal/SignalWebSocketHealthMonitor.java
Patch:
@@ -147,7 +147,7 @@ public void run() {
                         }
                     }
                 } catch (Throwable e) {
-                    logger.warn("Error occured in KeepAliveSender, ignoring ...", e);
+                    logger.warn("Error occurred in KeepAliveSender, ignoring ...", e);
                 }
             }
         }

File: lib/src/main/java/org/asamk/signal/manager/storage/groups/GroupStore.java
Patch:
@@ -733,7 +733,7 @@ private GroupInfoV1 getGroupInfoV1FromResultSet(ResultSet resultSet) throws SQLE
         final var expirationTime = resultSet.getInt("expiration_time");
         final var blocked = resultSet.getBoolean("blocked");
         final var archived = resultSet.getBoolean("archived");
-        final var storagRecord = resultSet.getBytes("storage_record");
+        final var storageRecord = resultSet.getBytes("storage_record");
         return new GroupInfoV1(GroupId.v1(groupId),
                 groupIdV2 == null ? null : GroupId.v2(groupIdV2),
                 name,
@@ -742,7 +742,7 @@ private GroupInfoV1 getGroupInfoV1FromResultSet(ResultSet resultSet) throws SQLE
                 expirationTime,
                 blocked,
                 archived,
-                storagRecord);
+                storageRecord);
     }
 
     private GroupInfoV2 getGroupV2ByV1Id(final Connection connection, final GroupIdV1 groupId) throws SQLException {

File: src/main/java/org/asamk/signal/commands/TrustCommand.java
Patch:
@@ -35,8 +35,8 @@ public void attachToSubparser(final Subparser subparser) {
     public void handleCommand(
             final Namespace ns, final Manager m, final OutputWriter outputWriter
     ) throws CommandException {
-        var recipentString = ns.getString("recipient");
-        var recipient = CommandUtil.getSingleRecipientIdentifier(recipentString, m.getSelfNumber());
+        var recipientString = ns.getString("recipient");
+        var recipient = CommandUtil.getSingleRecipientIdentifier(recipientString, m.getSelfNumber());
         if (Boolean.TRUE.equals(ns.getBoolean("trust-all-known-keys"))) {
             try {
                 final var res = m.trustIdentityAllKeys(recipient);

File: lib/src/main/java/org/asamk/signal/manager/storage/AccountDatabase.java
Patch:
@@ -495,7 +495,7 @@ CREATE TABLE cdsi (
                                         CREATE TABLE storage_id (
                                           _id INTEGER PRIMARY KEY,
                                           type INTEGER NOT NULL,
-                                          storage_id BLOB NOT NULL
+                                          storage_id BLOB UNIQUE NOT NULL
                                         ) STRICT;
                                         ALTER TABLE group_v1 ADD COLUMN storage_id BLOB;
                                         ALTER TABLE group_v1 ADD COLUMN storage_record BLOB;

File: lib/src/main/java/org/asamk/signal/manager/storage/UnknownStorageIdStore.java
Patch:
@@ -7,6 +7,7 @@
 import java.sql.SQLException;
 import java.util.Collection;
 import java.util.List;
+import java.util.Set;
 import java.util.stream.Collectors;
 
 public class UnknownStorageIdStore {
@@ -26,7 +27,7 @@ CREATE TABLE storage_id (
         }
     }
 
-    public Collection<StorageId> getUnknownStorageIds(Connection connection) throws SQLException {
+    public Set<StorageId> getUnknownStorageIds(Connection connection) throws SQLException {
         final var sql = (
                 """
                 SELECT s.type, s.storage_id
@@ -35,7 +36,7 @@ public Collection<StorageId> getUnknownStorageIds(Connection connection) throws
         ).formatted(TABLE_STORAGE_ID);
         try (final var statement = connection.prepareStatement(sql)) {
             try (var result = Utils.executeQueryForStream(statement, this::getStorageIdFromResultSet)) {
-                return result.toList();
+                return result.collect(Collectors.toSet());
             }
         }
     }

File: lib/src/main/java/org/asamk/signal/manager/api/RecipientAddress.java
Patch:
@@ -19,7 +19,7 @@ public record RecipientAddress(Optional<UUID> uuid, Optional<String> number, Opt
     public RecipientAddress {
         uuid = uuid.isPresent() && uuid.get().equals(UNKNOWN_UUID) ? Optional.empty() : uuid;
         if (uuid.isEmpty() && number.isEmpty() && username.isEmpty()) {
-            throw new AssertionError("Must have either a UUID or E164 number!");
+            throw new AssertionError("Must have either a UUID, username or E164 number!");
         }
     }
 

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/RecipientAddress.java
Patch:
@@ -26,8 +26,8 @@ public record RecipientAddress(
         if (pni.isPresent() && pni.get().isUnknown()) {
             pni = Optional.empty();
         }
-        if (aci.isEmpty() && pni.isEmpty() && number.isEmpty()) {
-            throw new AssertionError("Must have either a ServiceId or E164 number!");
+        if (aci.isEmpty() && pni.isEmpty() && number.isEmpty() && username.isEmpty()) {
+            throw new AssertionError("Must have either a ServiceId, username or E164 number!");
         }
     }
 

File: lib/src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -114,7 +114,7 @@ public class SignalAccount implements Closeable {
     private static final Logger logger = LoggerFactory.getLogger(SignalAccount.class);
 
     private static final int MINIMUM_STORAGE_VERSION = 1;
-    private static final int CURRENT_STORAGE_VERSION = 8;
+    private static final int CURRENT_STORAGE_VERSION = 9;
 
     private final Object LOCK = new Object();
 
@@ -1111,7 +1111,7 @@ public void addKyberPreKeys(ServiceIdType serviceIdType, List<KyberPreKeyRecord>
                 serviceIdType,
                 preKeyMetadata.nextKyberPreKeyId);
         accountData.getSignalServiceAccountDataStore()
-                .markAllOneTimeEcPreKeysStaleIfNecessary(System.currentTimeMillis());
+                .markAllOneTimeKyberPreKeysStaleIfNecessary(System.currentTimeMillis());
         for (var record : records) {
             if (preKeyMetadata.nextKyberPreKeyId != record.getId()) {
                 logger.error("Invalid kyber pre key id {}, expected {}",

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/RecipientAddress.java
Patch:
@@ -165,11 +165,11 @@ public boolean hasOnlyPniAndNumber() {
     }
 
     public SignalServiceAddress toSignalServiceAddress() {
-        return new SignalServiceAddress(aci.orElse(ACI.UNKNOWN), number);
+        return new SignalServiceAddress(serviceId().orElse(ACI.UNKNOWN), number);
     }
 
     public org.asamk.signal.manager.api.RecipientAddress toApiRecipientAddress() {
-        return new org.asamk.signal.manager.api.RecipientAddress(aci().map(ServiceId::getRawUuid),
+        return new org.asamk.signal.manager.api.RecipientAddress(serviceId().map(ServiceId::getRawUuid),
                 number(),
                 username());
     }

File: lib/src/main/java/org/asamk/signal/manager/api/StickerPackId.java
Patch:
@@ -1,7 +1,8 @@
 package org.asamk.signal.manager.api;
 
+import org.whispersystems.signalservice.internal.util.Hex;
+
 import java.util.Arrays;
-import java.util.Base64;
 
 public class StickerPackId {
 
@@ -36,6 +37,6 @@ public int hashCode() {
 
     @Override
     public String toString() {
-        return "StickerPackId{" + Base64.getUrlEncoder().encodeToString(id) + '}';
+        return "StickerPackId{" + Hex.toStringCondensed(id) + '}';
     }
 }

File: src/main/java/org/asamk/signal/commands/Commands.java
Patch:
@@ -17,6 +17,8 @@ public class Commands {
         addCommand(new FinishChangeNumberCommand());
         addCommand(new FinishLinkCommand());
         addCommand(new GetAttachmentCommand());
+        addCommand(new GetAvatarCommand());
+        addCommand(new GetStickerCommand());
         addCommand(new GetUserStatusCommand());
         addCommand(new AddStickerPackCommand());
         addCommand(new JoinGroupCommand());

File: src/main/java/org/asamk/signal/commands/GetAttachmentCommand.java
Patch:
@@ -26,6 +26,7 @@ public String getName() {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Retrieve an already downloaded attachment base64 encoded.");
         subparser.addArgument("--id").required(true).help("The ID of the attachment file.");
         var mut = subparser.addMutuallyExclusiveGroup().required(true);
         mut.addArgument("--recipient").help("Sender of the attachment");

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/RecipientStore.java
Patch:
@@ -393,6 +393,7 @@ public List<Recipient> getRecipients(
     ) {
         final var sqlWhere = new ArrayList<String>();
         if (onlyContacts) {
+            sqlWhere.add("r.unregistered_timestamp IS NULL");
             sqlWhere.add("(" + SQL_IS_CONTACT + ")");
             sqlWhere.add("r.hidden = FALSE");
         }

File: src/main/java/org/asamk/signal/logging/LogConfigurator.java
Patch:
@@ -52,6 +52,8 @@ public ExecutionStatus configure(LoggerContext lc) {
         rootLogger.addAppender(consoleAppender);
 
         lc.getLogger("org.asamk").setLevel(verboseLevel > 1 ? Level.ALL : verboseLevel > 0 ? Level.DEBUG : Level.INFO);
+        lc.getLogger("org.asamk.Signal")
+                .setLevel(verboseLevel > 2 ? Level.ALL : verboseLevel > 1 ? Level.INFO : Level.WARN);
         lc.getLogger("com.zaxxer.hikari.pool.PoolBase")
                 .setLevel(verboseLevel > 2 ? Level.ALL : verboseLevel > 1 ? Level.INFO : Level.WARN);
         lc.getLogger("org.sqlite.core.NativeDB")

File: lib/src/main/java/org/asamk/signal/manager/helper/StorageHelper.java
Patch:
@@ -155,7 +155,7 @@ private boolean readDataFromStorage(
 
                 if (updated > 0) {
                     logger.warn(
-                            "Found {} records that were deleted remotely but only marked unregistered locally. Removed those from local store. Recalculating diff.",
+                            "Found {} records that were deleted remotely but only marked unregistered locally. Removed those from local store.",
                             updated);
                 }
             }
@@ -502,7 +502,7 @@ private static IdDifferenceResult findIdDifference(
             final var remote = remoteByRawId.get(rawId);
             final var local = localByRawId.get(rawId);
 
-            if (remote.getType() != local.getType()) {
+            if (remote.getType() != local.getType() && local.getType() != 0) {
                 remoteOnlyRawIds.remove(rawId);
                 localOnlyRawIds.remove(rawId);
                 hasTypeMismatch = true;

File: lib/src/main/java/org/asamk/signal/manager/internal/ManagerImpl.java
Patch:
@@ -1355,8 +1355,8 @@ public void close() {
         if (thread != null) {
             stopReceiveThread(thread);
         }
-        executor.close();
         context.close();
+        executor.close();
 
         dependencies.getSignalWebSocket().disconnect();
         dependencies.getPushServiceSocket().close();

File: lib/src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -362,7 +362,7 @@ public void initDatabase() {
     }
 
     private void init() {
-        this.selfRecipientId = getRecipientResolver().resolveRecipient(getSelfRecipientAddress());
+        this.selfRecipientId = getRecipientTrustedResolver().resolveSelfRecipientTrusted(getSelfRecipientAddress());
     }
 
     private void migrateLegacyConfigs() {

File: lib/src/main/java/org/asamk/signal/manager/syncStorage/DefaultStorageRecordProcessor.java
Patch:
@@ -55,7 +55,9 @@ public void process(E remote) throws SQLException {
         }
 
         if (matchedRecords.contains(local.get())) {
-            debug(remote.getId(), remote, "Multiple remote records map to the same local record! Ignoring this one.");
+            debug(remote.getId(),
+                    remote,
+                    "Multiple remote records map to the same local record " + local.get() + "! Ignoring this one.");
             return;
         }
 

File: lib/src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -172,7 +172,7 @@ SendMessageResults sendViewedReceipt(
     );
 
     SendMessageResults sendMessage(
-            Message message, Set<RecipientIdentifier> recipients
+            Message message, Set<RecipientIdentifier> recipients, boolean notifySelf
     ) throws IOException, AttachmentInvalidException, NotAGroupMemberException, GroupNotFoundException, GroupSendingNotAllowedException, UnregisteredRecipientException, InvalidStickerException;
 
     SendMessageResults sendEditMessage(

File: lib/src/main/java/org/asamk/signal/manager/helper/GroupHelper.java
Patch:
@@ -551,7 +551,7 @@ private void setExpirationTimer(
 
     private void sendExpirationTimerUpdate(GroupIdV1 groupId) throws IOException, NotAGroupMemberException, GroupNotFoundException, GroupSendingNotAllowedException {
         final var messageBuilder = SignalServiceDataMessage.newBuilder().asExpirationUpdate();
-        context.getSendHelper().sendAsGroupMessage(messageBuilder, groupId, Optional.empty());
+        context.getSendHelper().sendAsGroupMessage(messageBuilder, groupId, false, Optional.empty());
     }
 
     private SendGroupMessageResults updateGroupV2(

File: src/main/java/org/asamk/signal/dbus/DbusManagerImpl.java
Patch:
@@ -397,7 +397,7 @@ public SendMessageResults sendViewedReceipt(
 
     @Override
     public SendMessageResults sendMessage(
-            final Message message, final Set<RecipientIdentifier> recipients
+            final Message message, final Set<RecipientIdentifier> recipients, final boolean notifySelf
     ) throws IOException, AttachmentInvalidException, NotAGroupMemberException, GroupNotFoundException, GroupSendingNotAllowedException {
         return handleMessage(recipients,
                 numbers -> signal.sendMessage(message.messageText(), message.attachments(), numbers),

File: lib/src/main/java/org/asamk/signal/manager/helper/SendHelper.java
Patch:
@@ -220,7 +220,7 @@ public SendMessageResult sendTypingMessage(
                 (messageSender, address, unidentifiedAccess) -> messageSender.sendTyping(List.of(address),
                         List.of(unidentifiedAccess),
                         message,
-                        null).get(0));
+                        null).getFirst());
         handleSendMessageResult(result);
         return result;
     }

File: lib/src/main/java/org/asamk/signal/manager/helper/StorageHelper.java
Patch:
@@ -302,7 +302,7 @@ private SignalStorageRecord getSignalStorageRecord(final StorageId accountId) th
             logger.warn("Failed to read storage records, ignoring.");
             return null;
         }
-        return !records.isEmpty() ? records.get(0) : null;
+        return !records.isEmpty() ? records.getFirst() : null;
     }
 
     private List<SignalStorageRecord> getSignalStorageRecords(final Collection<StorageId> storageIds) throws IOException {

File: lib/src/main/java/org/asamk/signal/manager/internal/ManagerImpl.java
Patch:
@@ -1291,7 +1291,7 @@ public boolean trustIdentityVerified(
                     r -> context.getIdentityHelper().trustIdentityVerifiedSafetyNumber(r, safetyNumber.safetyNumber()));
             case IdentityVerificationCode.ScannableSafetyNumber safetyNumber -> trustIdentity(recipient,
                     r -> context.getIdentityHelper().trustIdentityVerifiedSafetyNumber(r, safetyNumber.safetyNumber()));
-            case null, default -> throw new AssertionError("Invalid verification code type");
+            case null -> throw new AssertionError("Invalid verification code type");
         };
     }
 

File: src/main/java/org/asamk/signal/dbus/DbusCommandHandler.java
Patch:
@@ -94,7 +94,7 @@ private static String tryGetSingleAccountObjectPath(final DBusConnection dBusCon
                         "Multiple users found, you need to specify an account (phone number) with -a");
             }
 
-            return accounts.get(0).getPath();
+            return accounts.getFirst().getPath();
         } catch (UnknownMethod e) {
             // dbus daemon not running in multi-account mode
             return null;

File: src/main/java/org/asamk/signal/dbus/DbusProperties.java
Patch:
@@ -52,7 +52,6 @@ public <A> void Set(final String interface_name, final String property_name, fin
     }
 
     @Override
-    @SuppressWarnings("unchecked")
     public Map<String, Variant<?>> GetAll(final String interface_name) {
         final var handler = getHandlerOptional(interface_name);
         if (handler.isEmpty()) {

File: src/main/java/org/asamk/signal/dbus/DbusSignalImpl.java
Patch:
@@ -668,7 +668,7 @@ public boolean isRegistered() {
     @Override
     public boolean isRegistered(String number) {
         var result = isRegistered(List.of(number));
-        return result.get(0);
+        return result.getFirst();
     }
 
     @Override

File: src/main/java/org/asamk/signal/jsonrpc/JsonRpcRequest.java
Patch:
@@ -6,7 +6,7 @@
 
 /**
  * Represents a JSON-RPC request.
- * https://www.jsonrpc.org/specification#request_object
+ * <a href="https://www.jsonrpc.org/specification#request_object">https://www.jsonrpc.org/specification#request_object</a>
  */
 public final class JsonRpcRequest extends JsonRpcMessage {
 

File: src/main/java/org/asamk/signal/jsonrpc/JsonRpcResponse.java
Patch:
@@ -6,7 +6,7 @@
 
 /**
  * Represents a JSON-RPC response.
- * https://www.jsonrpc.org/specification#response_object
+ * <a href="https://www.jsonrpc.org/specification#response_object">https://www.jsonrpc.org/specification#response_object</a>
  */
 public final class JsonRpcResponse extends JsonRpcMessage {
 

File: src/main/java/org/asamk/signal/jsonrpc/SignalJsonRpcCommandHandler.java
Patch:
@@ -94,7 +94,7 @@ public JsonNode handleRequest(
             if (manager == null) {
                 final var managers = c.getManagers();
                 if (managers.size() == 1) {
-                    manager = managers.get(0);
+                    manager = managers.getFirst();
                 }
             }
             if (manager != null) {

File: src/main/java/org/asamk/signal/jsonrpc/SignalJsonRpcDispatcherHandler.java
Patch:
@@ -126,7 +126,7 @@ private boolean unsubscribeReceive(final int subscriptionId) {
     private void unsubscribeReceive(final Manager m) {
         final var subscriptionId = receiveHandlers.entrySet()
                 .stream()
-                .filter(e -> e.getValue().size() == 1 && e.getValue().get(0).first().equals(m))
+                .filter(e -> e.getValue().size() == 1 && e.getValue().getFirst().first().equals(m))
                 .map(Map.Entry::getKey)
                 .findFirst();
         subscriptionId.ifPresent(this::unsubscribeReceive);

File: src/main/java/org/asamk/signal/util/Util.java
Patch:
@@ -42,7 +42,7 @@ private static String toCamelCaseString(List<String> strings) {
         if (strings.isEmpty()) {
             return "";
         }
-        return strings.get(0) + strings.stream()
+        return strings.getFirst() + strings.stream()
                 .skip(1)
                 .filter(s -> !s.isEmpty())
                 .map(s -> Character.toUpperCase(s.charAt(0)) + s.substring(1).toLowerCase(Locale.ROOT))

File: lib/src/main/java/org/asamk/signal/manager/config/ServiceConfig.java
Patch:
@@ -27,7 +27,9 @@ public class ServiceConfig {
 
     public static AccountAttributes.Capabilities getCapabilities(boolean isPrimaryDevice) {
         final var giftBadges = !isPrimaryDevice;
-        return new AccountAttributes.Capabilities(false, true, true, true, true, giftBadges, false, false);
+        final var pni = !isPrimaryDevice;
+        final var paymentActivation = !isPrimaryDevice;
+        return new AccountAttributes.Capabilities(false, true, true, true, true, giftBadges, pni, paymentActivation);
     }
 
     public static ServiceEnvironmentConfig getServiceEnvironmentConfig(

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/MergeRecipientHelper.java
Patch:
@@ -17,12 +17,12 @@ public class MergeRecipientHelper {
     static Pair<RecipientId, List<RecipientId>> resolveRecipientTrustedLocked(
             Store store, RecipientAddress address
     ) throws SQLException {
-        // address has serviceId and number, optionally also pni
+        // address has at least one of serviceId/pni and optionally number/username
 
         final var recipients = store.findAllByAddress(address);
 
         if (recipients.isEmpty()) {
-            logger.debug("Got new recipient, serviceId, PNI and number are unknown");
+            logger.debug("Got new recipient, serviceId, PNI, number, username are unknown");
             return new Pair<>(store.addNewRecipient(address), List.of());
         }
 
@@ -47,7 +47,7 @@ static Pair<RecipientId, List<RecipientId>> resolveRecipientTrustedLocked(
             }
 
             logger.debug(
-                    "Got recipient {} existing with number/pni, but different serviceId, so stripping its number and adding new recipient",
+                    "Got recipient {} existing with number/pni/username, but different serviceId, so stripping its number and adding new recipient",
                     recipient.id());
             store.updateRecipientAddress(recipient.id(), recipient.address().removeIdentifiersFrom(address));
 

File: lib/src/main/java/org/asamk/signal/manager/api/MessageEnvelope.java
Patch:
@@ -140,7 +140,9 @@ static Data from(
                     dataMessage.isProfileKeyUpdate(),
                     dataMessage.getProfileKey().isPresent(),
                     dataMessage.getReaction().map(r -> Reaction.from(r, recipientResolver, addressResolver)),
-                    dataMessage.getQuote().map(q -> Quote.from(q, recipientResolver, addressResolver, fileProvider)),
+                    dataMessage.getQuote()
+                            .filter(q -> q.getAuthor() != null && q.getAuthor().isValid())
+                            .map(q -> Quote.from(q, recipientResolver, addressResolver, fileProvider)),
                     dataMessage.getPayment().map(p -> p.getPaymentNotification().isPresent() ? Payment.from(p) : null),
                     dataMessage.getAttachments()
                             .map(a -> a.stream().map(as -> Attachment.from(as, fileProvider)).toList())

File: src/main/java/org/asamk/signal/Main.java
Patch:
@@ -115,7 +115,7 @@ private static int getStatusForError(final CommandException e) {
             case IOErrorException ioErrorException -> 3;
             case UntrustedKeyErrorException untrustedKeyErrorException -> 4;
             case RateLimitErrorException rateLimitErrorException -> 5;
-            case null, default -> 2;
+            case null -> 2;
         };
     }
 }

File: src/main/java/org/asamk/signal/commands/exceptions/CommandException.java
Patch:
@@ -1,6 +1,6 @@
 package org.asamk.signal.commands.exceptions;
 
-public class CommandException extends Exception {
+public sealed abstract class CommandException extends Exception permits IOErrorException, RateLimitErrorException, UnexpectedErrorException, UntrustedKeyErrorException, UserErrorException {
 
     public CommandException(final String message) {
         super(message);

File: lib/src/main/java/org/asamk/signal/manager/Settings.java
Patch:
@@ -4,5 +4,5 @@
 
 public record Settings(TrustNewIdentity trustNewIdentity, boolean disableMessageSendLog) {
 
-    public static Settings DEFAULT = new Settings(TrustNewIdentity.ON_FIRST_USE, false);
+    public static final Settings DEFAULT = new Settings(TrustNewIdentity.ON_FIRST_USE, false);
 }

File: lib/src/main/java/org/asamk/signal/manager/actions/SendRetryMessageRequestAction.java
Patch:
@@ -50,7 +50,9 @@ public void execute(Context context) throws Throwable {
             envelopeType = messageContent.getType();
         } else {
             originalContent = envelope.getContent();
-            envelopeType = envelopeTypeToCiphertextMessageType(envelope.getType());
+            envelopeType = envelope.getType() == null
+                    ? CiphertextMessage.WHISPER_TYPE
+                    : envelopeTypeToCiphertextMessageType(envelope.getType());
         }
 
         DecryptionErrorMessage decryptionErrorMessage = DecryptionErrorMessage.forOriginalMessage(originalContent,

File: lib/src/main/java/org/asamk/signal/manager/helper/GroupHelper.java
Patch:
@@ -822,8 +822,8 @@ private byte[] readAvatarBytes(final String avatarFile) throws IOException {
         if (avatarFile == null) {
             return null;
         }
-        try (final var avatar = Utils.createStreamDetails(avatarFile).first().getStream()) {
-            return IOUtils.readFully(avatar);
+        try (final var avatar = Utils.createStreamDetails(avatarFile).first()) {
+            return IOUtils.readFully(avatar.getStream());
         }
     }
 }

File: lib/src/main/java/org/asamk/signal/manager/storage/Database.java
Patch:
@@ -47,7 +47,7 @@ public final Connection getConnection() throws SQLException {
     }
 
     @Override
-    public void close() throws SQLException {
+    public void close() {
         dataSource.close();
     }
 

File: lib/src/main/java/org/asamk/signal/manager/storage/protocol/LegacyIdentityInfo.java
Patch:
@@ -9,9 +9,9 @@
 public class LegacyIdentityInfo {
 
     RecipientAddress address;
-    IdentityKey identityKey;
-    TrustLevel trustLevel;
-    Date added;
+    final IdentityKey identityKey;
+    final TrustLevel trustLevel;
+    final Date added;
 
     LegacyIdentityInfo(RecipientAddress address, IdentityKey identityKey, TrustLevel trustLevel, Date added) {
         this.address = address;

File: lib/src/main/java/org/asamk/signal/manager/storage/protocol/LegacySessionInfo.java
Patch:
@@ -4,11 +4,11 @@
 
 public class LegacySessionInfo {
 
-    public RecipientAddress address;
+    public final RecipientAddress address;
 
-    public int deviceId;
+    public final int deviceId;
 
-    public byte[] sessionRecord;
+    public final byte[] sessionRecord;
 
     LegacySessionInfo(final RecipientAddress address, final int deviceId, final byte[] sessionRecord) {
         this.address = address;

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/RecipientWithAddress.java
Patch:
@@ -1,3 +1,3 @@
 package org.asamk.signal.manager.storage.recipients;
 
-record RecipientWithAddress(RecipientId id, RecipientAddress address) {}
+public record RecipientWithAddress(RecipientId id, RecipientAddress address) {}

File: lib/src/main/java/org/asamk/signal/manager/storage/sessions/SessionStore.java
Patch:
@@ -328,7 +328,7 @@ private Key getKeyFromResultSet(ResultSet resultSet) throws SQLException {
         return new Key(address, deviceId);
     }
 
-    private SessionRecord getSessionRecordFromResultSet(ResultSet resultSet) throws SQLException {
+    private SessionRecord getSessionRecordFromResultSet(ResultSet resultSet) {
         try {
             final var record = resultSet.getBytes("record");
             return new SessionRecord(record);

File: lib/src/main/java/org/asamk/signal/manager/storage/threads/LegacyJsonThreadStore.java
Patch:
@@ -25,7 +25,7 @@ public class LegacyJsonThreadStore {
     @JsonProperty("threads")
     @JsonSerialize(using = MapToListSerializer.class)
     @JsonDeserialize(using = ThreadsDeserializer.class)
-    private Map<String, LegacyThreadInfo> threads = new HashMap<>();
+    private final Map<String, LegacyThreadInfo> threads = new HashMap<>();
 
     public List<LegacyThreadInfo> getThreads() {
         return new ArrayList<>(threads.values());

File: lib/src/main/java/org/asamk/signal/manager/util/MessageCacheUtils.java
Patch:
@@ -69,7 +69,7 @@ public static SignalServiceEnvelope loadEnvelope(File file) throws IOException {
                 if (version >= 2) {
                     serverReceivedTimestamp = in.readLong();
                     uuid = in.readUTF();
-                    if ("".equals(uuid)) {
+                    if (uuid.isEmpty()) {
                         uuid = null;
                     }
                 }

File: src/main/java/org/asamk/signal/dbus/DbusManagerImpl.java
Patch:
@@ -136,7 +136,7 @@ public Configuration getConfiguration() {
     }
 
     @Override
-    public void updateConfiguration(Configuration newConfiguration) throws IOException {
+    public void updateConfiguration(Configuration newConfiguration) {
         final var configuration = getRemoteObject(new DBusPath(signal.getObjectPath() + "/Configuration"),
                 Signal.Configuration.class);
         newConfiguration.readReceipts()

File: lib/src/main/java/org/asamk/signal/manager/config/ServiceConfig.java
Patch:
@@ -29,6 +29,7 @@ public class ServiceConfig {
     public final static long AVATAR_DOWNLOAD_FAILSAFE_MAX_SIZE = 10 * 1024 * 1024;
     public final static boolean AUTOMATIC_NETWORK_RETRY = true;
     public final static int GROUP_MAX_SIZE = 1001;
+    public final static int MAXIMUM_ONE_OFF_REQUEST_SIZE = 3;
 
     private final static KeyStore iasKeyStore;
 

File: src/main/java/org/asamk/signal/Main.java
Patch:
@@ -24,6 +24,7 @@
 
 import org.asamk.signal.commands.exceptions.CommandException;
 import org.asamk.signal.commands.exceptions.IOErrorException;
+import org.asamk.signal.commands.exceptions.RateLimitErrorException;
 import org.asamk.signal.commands.exceptions.UnexpectedErrorException;
 import org.asamk.signal.commands.exceptions.UntrustedKeyErrorException;
 import org.asamk.signal.commands.exceptions.UserErrorException;
@@ -116,6 +117,8 @@ private static int getStatusForError(final CommandException e) {
             return 3;
         } else if (e instanceof UntrustedKeyErrorException) {
             return 4;
+        } else if (e instanceof RateLimitErrorException) {
+            return 5;
         } else {
             return 2;
         }

File: src/main/java/org/asamk/signal/commands/RegisterCommand.java
Patch:
@@ -9,6 +9,7 @@
 import org.asamk.signal.OutputType;
 import org.asamk.signal.commands.exceptions.CommandException;
 import org.asamk.signal.commands.exceptions.IOErrorException;
+import org.asamk.signal.commands.exceptions.RateLimitErrorException;
 import org.asamk.signal.commands.exceptions.UserErrorException;
 import org.asamk.signal.manager.RegistrationManager;
 import org.asamk.signal.manager.api.CaptchaRequiredException;
@@ -64,15 +65,15 @@ public void handleCommand(
 
     private void register(
             final RegistrationManager m, final boolean voiceVerification, final String captcha
-    ) throws UserErrorException, IOErrorException {
+    ) throws CommandException {
         try {
             m.register(voiceVerification, captcha);
         } catch (RateLimitException e) {
             String message = "Rate limit reached";
             if (e.getNextAttemptTimestamp() > 0) {
                 message += "\nNext attempt may be tried at " + DateUtils.formatTimestamp(e.getNextAttemptTimestamp());
             }
-            throw new UserErrorException(message);
+            throw new RateLimitErrorException(message, e);
         } catch (CaptchaRequiredException e) {
             String message;
             if (captcha == null) {

File: lib/src/main/java/org/asamk/signal/manager/storage/AccountDatabase.java
Patch:
@@ -5,6 +5,7 @@
 import org.asamk.signal.manager.api.Pair;
 import org.asamk.signal.manager.storage.groups.GroupStore;
 import org.asamk.signal.manager.storage.identities.IdentityKeyStore;
+import org.asamk.signal.manager.storage.keyValue.KeyValueStore;
 import org.asamk.signal.manager.storage.prekeys.KyberPreKeyStore;
 import org.asamk.signal.manager.storage.prekeys.PreKeyStore;
 import org.asamk.signal.manager.storage.prekeys.SignedPreKeyStore;
@@ -53,6 +54,7 @@ protected void createDatabase(final Connection connection) throws SQLException {
         IdentityKeyStore.createSql(connection);
         SenderKeyRecordStore.createSql(connection);
         SenderKeySharedStore.createSql(connection);
+        KeyValueStore.createSql(connection);
     }
 
     @Override

File: src/main/java/org/asamk/signal/jsonrpc/JsonRpcReader.java
Patch:
@@ -95,7 +95,9 @@ private void handleMessage(
                 return handleRequest(requestHandler, request);
             }).filter(Objects::nonNull).toList();
 
-            jsonRpcSender.sendBatchResponses(responseList);
+            if (responseList.size() > 0) {
+                jsonRpcSender.sendBatchResponses(responseList);
+            }
         }
     }
 

File: lib/src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -1841,8 +1841,7 @@ public SessionStore getSessionStore() {
 
         public SignalIdentityKeyStore getIdentityKeyStore() {
             return getOrCreate(() -> identityKeyStore,
-                    () -> identityKeyStore = new SignalIdentityKeyStore(getRecipientResolver(),
-                            () -> identityKeyPair,
+                    () -> identityKeyStore = new SignalIdentityKeyStore(() -> identityKeyPair,
                             localRegistrationId,
                             SignalAccount.this.getIdentityKeyStore()));
         }

File: lib/src/main/java/org/asamk/signal/manager/storage/Utils.java
Patch:
@@ -56,7 +56,7 @@ public static JsonNode getNotNullNode(JsonNode parent, String name) throws Inval
         return node;
     }
 
-    public static RecipientAddress getRecipientAddressFromIdentifier(final String identifier) {
+    public static RecipientAddress getRecipientAddressFromLegacyIdentifier(final String identifier) {
         if (UuidUtil.isUuid(identifier)) {
             return new RecipientAddress(ServiceId.parseOrThrow(identifier));
         } else {

File: lib/src/main/java/org/asamk/signal/manager/storage/identities/LegacyIdentityKeyStore.java
Patch:
@@ -84,7 +84,7 @@ private static IdentityInfo loadIdentityLocked(
             var added = storage.addedTimestamp();
 
             final var serviceId = address.serviceId().get();
-            return new IdentityInfo(serviceId, id, trustLevel, added);
+            return new IdentityInfo(serviceId.toString(), id, trustLevel, added);
         } catch (IOException | InvalidKeyException e) {
             logger.warn("Failed to load identity key: {}", e.getMessage());
             return null;

File: lib/src/main/java/org/asamk/signal/manager/storage/protocol/LegacyJsonIdentityKeyStore.java
Patch:
@@ -100,7 +100,7 @@ public LegacyJsonIdentityKeyStore deserialize(
                             ? UuidUtil.parseOrNull(trustedKey.get("uuid").asText())
                             : null;
                     final var address = uuid == null
-                            ? Utils.getRecipientAddressFromIdentifier(trustedKeyName)
+                            ? Utils.getRecipientAddressFromLegacyIdentifier(trustedKeyName)
                             : new RecipientAddress(ACI.from(uuid), trustedKeyName);
                     try {
                         var id = new IdentityKey(Base64.getDecoder().decode(trustedKey.get("identityKey").asText()), 0);

File: lib/src/main/java/org/asamk/signal/manager/storage/protocol/LegacyJsonSessionStore.java
Patch:
@@ -47,7 +47,7 @@ public LegacyJsonSessionStore deserialize(
 
                     var uuid = session.hasNonNull("uuid") ? UuidUtil.parseOrNull(session.get("uuid").asText()) : null;
                     final var address = uuid == null
-                            ? Utils.getRecipientAddressFromIdentifier(sessionName)
+                            ? Utils.getRecipientAddressFromLegacyIdentifier(sessionName)
                             : new RecipientAddress(ACI.from(uuid), sessionName);
                     final var deviceId = session.get("deviceId").asInt();
                     final var record = Base64.getDecoder().decode(session.get("record").asText());

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/RecipientStore.java
Patch:
@@ -151,8 +151,9 @@ public RecipientId resolveRecipient(final long rawRecipientId) {
 
     @Override
     public RecipientId resolveRecipient(final String identifier) {
-        if (UuidUtil.isUuid(identifier)) {
-            return resolveRecipient(ServiceId.parseOrThrow(identifier));
+        final var serviceId = ServiceId.parseOrNull(identifier);
+        if (serviceId != null) {
+            return resolveRecipient(serviceId);
         } else {
             return resolveRecipientByNumber(identifier);
         }

File: lib/src/main/java/org/asamk/signal/manager/storage/senderKeys/LegacySenderKeyRecordStore.java
Patch:
@@ -41,7 +41,9 @@ final var record = loadSenderKeyLocked(key, senderKeysPath);
             if (record == null || serviceId.isEmpty()) {
                 return null;
             }
-            return new Pair<>(new SenderKeyRecordStore.Key(serviceId.get(), key.deviceId, key.distributionId), record);
+            return new Pair<>(new SenderKeyRecordStore.Key(serviceId.get().toString(),
+                    key.deviceId,
+                    key.distributionId), record);
         }).filter(Objects::nonNull).toList();
 
         senderKeyStore.addLegacySenderKeys(senderKeys);

File: lib/src/main/java/org/asamk/signal/manager/storage/senderKeys/LegacySenderKeySharedStore.java
Patch:
@@ -40,7 +40,7 @@ public static void migrate(
                 if (serviceId.isEmpty()) {
                     continue;
                 }
-                final var entry = new SenderKeySharedEntry(serviceId.get(), senderKey.deviceId);
+                final var entry = new SenderKeySharedEntry(serviceId.get().toString(), senderKey.deviceId);
                 final var distributionId = DistributionId.from(senderKey.distributionId);
                 var entries = sharedSenderKeys.get(distributionId);
                 if (entries == null) {

File: lib/src/main/java/org/asamk/signal/manager/storage/sessions/LegacySessionStore.java
Patch:
@@ -37,7 +37,7 @@ final var record = loadSessionLocked(key, sessionsPath);
             if (record == null || serviceId.isEmpty()) {
                 return null;
             }
-            return new Pair<>(new SessionStore.Key(serviceId.get(), key.deviceId()), record);
+            return new Pair<>(new SessionStore.Key(serviceId.get().toString(), key.deviceId()), record);
         }).filter(Objects::nonNull).toList();
         sessionStore.addLegacySessions(sessions);
         deleteAllSessions(sessionsPath);

File: src/main/java/org/asamk/signal/dbus/DbusSignalImpl.java
Patch:
@@ -185,6 +185,8 @@ public void addDevice(String uri) {
             m.addDeviceLink(deviceLinkUrl);
         } catch (IOException | InvalidDeviceLinkException e) {
             throw new Error.Failure(e.getClass().getSimpleName() + " Add device link failed. " + e.getMessage());
+        } catch (NotPrimaryDeviceException e) {
+            throw new Error.Failure("This command doesn't work on linked devices.");
         } catch (URISyntaxException e) {
             throw new Error.InvalidUri(e.getClass().getSimpleName()
                     + " Device link uri has invalid format: "

File: lib/src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -117,7 +117,7 @@ static boolean isSignalClientAvailable() {
 
     void removeLinkedDevices(int deviceId) throws IOException;
 
-    void addDeviceLink(DeviceLinkUrl linkUri) throws IOException, InvalidDeviceLinkException;
+    void addDeviceLink(DeviceLinkUrl linkUri) throws IOException, InvalidDeviceLinkException, NotPrimaryDeviceException;
 
     void setRegistrationLockPin(Optional<String> pin) throws IOException, NotPrimaryDeviceException;
 

File: src/main/java/org/asamk/signal/commands/AddStickerPackCommand.java
Patch:
@@ -51,10 +51,10 @@ public void handleCommand(
                 var stickerPackUrl = StickerPackUrl.fromUri(stickerUri);
                 m.installStickerPack(stickerPackUrl);
             } catch (IOException e) {
-                logger.error("Install sticker pack failed", e);
+                logger.error("Install sticker pack failed: {}", e.getMessage());
                 throw new IOErrorException("Install sticker pack failed", e);
             } catch (StickerPackUrl.InvalidStickerPackLinkException e) {
-                logger.error("Invalid sticker pack link", e);
+                logger.error("Invalid sticker pack link");
                 throw new UserErrorException("Invalid sticker pack link", e);
             }
         }

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/RecipientStore.java
Patch:
@@ -884,7 +884,7 @@ private Optional<RecipientWithAddress> findByServiceId(
         final var sql = """
                         SELECT r._id, r.number, r.uuid, r.pni, r.username
                         FROM %s r
-                        WHERE r.uuid = ? OR r.pni = ?
+                        WHERE r.uuid = ?1 OR r.pni = ?1
                         LIMIT 1
                         """.formatted(TABLE_RECIPIENT);
         try (final var statement = connection.prepareStatement(sql)) {

File: lib/src/main/java/org/asamk/signal/manager/helper/PreKeyHelper.java
Patch:
@@ -46,16 +46,16 @@ public void refreshPreKeysIfNecessary(ServiceIdType serviceIdType) throws IOExce
             preKeyCounts = new OneTimePreKeyCounts(0, 0);
         }
         if (preKeyCounts.getEcCount() < ServiceConfig.PREKEY_MINIMUM_COUNT) {
-            logger.debug("Refreshing {} ec pre keys, because only {} of {} pre keys remain",
+            logger.debug("Refreshing {} ec pre keys, because only {} of min {} pre keys remain",
                     serviceIdType,
                     preKeyCounts.getEcCount(),
                     ServiceConfig.PREKEY_MINIMUM_COUNT);
             refreshPreKeys(serviceIdType);
         }
         if (preKeyCounts.getKyberCount() < ServiceConfig.PREKEY_MINIMUM_COUNT) {
-            logger.debug("Refreshing {} kyber pre keys, because only {} of {} pre keys remain",
+            logger.debug("Refreshing {} kyber pre keys, because only {} of min {} pre keys remain",
                     serviceIdType,
-                    preKeyCounts.getEcCount(),
+                    preKeyCounts.getKyberCount(),
                     ServiceConfig.PREKEY_MINIMUM_COUNT);
             refreshKyberPreKeys(serviceIdType);
         }

File: lib/src/main/java/org/asamk/signal/manager/helper/AccountHelper.java
Patch:
@@ -29,6 +29,7 @@
 import org.whispersystems.signalservice.api.push.exceptions.AuthorizationFailedException;
 import org.whispersystems.signalservice.api.push.exceptions.DeprecatedVersionException;
 import org.whispersystems.signalservice.api.util.DeviceNameUtil;
+import org.whispersystems.signalservice.api.util.UuidUtil;
 import org.whispersystems.signalservice.internal.push.KyberPreKeyEntity;
 import org.whispersystems.signalservice.internal.push.OutgoingPushMessage;
 import org.whispersystems.util.Base64UrlSafe;
@@ -101,8 +102,8 @@ public void checkAccountState() throws IOException {
     public void checkWhoAmiI() throws IOException {
         final var whoAmI = dependencies.getAccountManager().getWhoAmI();
         final var number = whoAmI.getNumber();
-        final var aci = ACI.parseOrNull(whoAmI.getAci());
-        final var pni = PNI.parseOrNull(whoAmI.getPni());
+        final var aci = ACI.parseOrThrow(whoAmI.getAci());
+        final var pni = PNI.from(UuidUtil.parseOrThrow(whoAmI.getPni()));
         if (number.equals(account.getNumber()) && aci.equals(account.getAci()) && pni.equals(account.getPni())) {
             return;
         }

File: lib/src/main/java/org/asamk/signal/manager/internal/RegistrationManagerImpl.java
Patch:
@@ -45,6 +45,7 @@
 import org.whispersystems.signalservice.api.push.SignalServiceAddress;
 import org.whispersystems.signalservice.api.push.exceptions.AlreadyVerifiedException;
 import org.whispersystems.signalservice.api.push.exceptions.DeprecatedVersionException;
+import org.whispersystems.signalservice.api.util.UuidUtil;
 import org.whispersystems.signalservice.internal.push.VerifyAccountResponse;
 import org.whispersystems.signalservice.internal.util.DynamicCredentialsProvider;
 
@@ -164,8 +165,8 @@ public void verifyAccount(
         }
 
         //accountManager.setGcmId(Optional.of(GoogleCloudMessaging.getInstance(this).register(REGISTRATION_ID)));
-        final var aci = ACI.parseOrNull(response.getUuid());
-        final var pni = PNI.parseOrNull(response.getPni());
+        final var aci = ACI.parseOrThrow(response.getUuid());
+        final var pni = PNI.from(UuidUtil.parseOrThrow(response.getPni()));
         account.finishRegistration(aci, pni, masterKey, pin, aciPreKeys, pniPreKeys);
         accountFileUpdater.updateAccountIdentifiers(account.getNumber(), aci);
 

File: src/main/java/org/asamk/signal/BaseConfig.java
Patch:
@@ -5,7 +5,7 @@ public class BaseConfig {
     public final static String PROJECT_NAME = BaseConfig.class.getPackage().getImplementationTitle();
     public final static String PROJECT_VERSION = BaseConfig.class.getPackage().getImplementationVersion();
 
-    final static String USER_AGENT_SIGNAL_ANDROID = "Signal-Android/6.22.0";
+    final static String USER_AGENT_SIGNAL_ANDROID = "Signal-Android/6.28.1";
     final static String USER_AGENT_SIGNAL_CLI = PROJECT_NAME == null
             ? "signal-cli"
             : PROJECT_NAME + "/" + PROJECT_VERSION;

File: src/main/java/org/asamk/signal/commands/ReceiveCommand.java
Patch:
@@ -112,5 +112,5 @@ public void handleCommand(
         }
     }
 
-    record ReceiveParams(Double timeout, Integer maxMessages) {}
+    public record ReceiveParams(Double timeout, Integer maxMessages) {}
 }

File: src/main/java/org/asamk/signal/commands/RegisterCommand.java
Patch:
@@ -97,5 +97,5 @@ Check the developer tools (F12) console for a failed redirect to signalcaptcha:/
         }
     }
 
-    record RegistrationParams(Boolean voice, String captcha) {}
+    public record RegistrationParams(Boolean voice, String captcha) {}
 }

File: src/main/java/org/asamk/signal/commands/VerifyCommand.java
Patch:
@@ -77,5 +77,5 @@ private void verify(
         }
     }
 
-    record VerifyParams(String verificationCode, String pin) {}
+    public record VerifyParams(String verificationCode, String pin) {}
 }

File: src/main/java/org/asamk/signal/ReceiveMessageHandler.java
Patch:
@@ -4,6 +4,7 @@
 import org.asamk.signal.manager.api.MessageEnvelope;
 import org.asamk.signal.manager.api.RecipientAddress;
 import org.asamk.signal.manager.api.RecipientIdentifier;
+import org.asamk.signal.manager.api.TextStyle;
 import org.asamk.signal.manager.api.UntrustedIdentityException;
 import org.asamk.signal.manager.groups.GroupId;
 import org.asamk.signal.output.PlainTextWriter;
@@ -573,7 +574,7 @@ private void printMention(
     }
 
     private void printTextStyle(
-            PlainTextWriter writer, MessageEnvelope.Data.TextStyle textStyle
+            PlainTextWriter writer, TextStyle textStyle
     ) {
         writer.println("- {}: {} (length: {})", textStyle.style().name(), textStyle.start(), textStyle.length());
     }

File: lib/src/main/java/org/asamk/signal/manager/storage/identities/LegacyIdentityKeyStore.java
Patch:
@@ -111,5 +111,5 @@ private static void removeIdentityFiles(File identitiesPath) {
         }
     }
 
-    private record IdentityStorage(String identityKey, int trustLevel, long addedTimestamp) {}
+    public record IdentityStorage(String identityKey, int trustLevel, long addedTimestamp) {}
 }

File: lib/src/main/java/org/asamk/signal/manager/storage/stickers/LegacyStickerStore.java
Patch:
@@ -28,7 +28,7 @@ public static void migrate(Storage storage, StickerStore stickerStore) {
 
     public record Storage(List<Sticker> stickers) {
 
-        private record Sticker(String packId, String packKey, boolean installed) {
+        public record Sticker(String packId, String packKey, boolean installed) {
 
         }
     }

File: lib/src/main/java/org/asamk/signal/manager/storage/senderKeys/LegacySenderKeySharedStore.java
Patch:
@@ -61,8 +61,8 @@ public static void migrate(
         }
     }
 
-    private record Storage(List<SharedSenderKey> sharedSenderKeys) {
+    public record Storage(List<SharedSenderKey> sharedSenderKeys) {
 
-        private record SharedSenderKey(long recipientId, int deviceId, String distributionId) {}
+        public record SharedSenderKey(long recipientId, int deviceId, String distributionId) {}
     }
 }

File: lib/src/main/java/org/asamk/signal/manager/ProvisioningManagerImpl.java
Patch:
@@ -41,7 +41,7 @@
 import java.util.concurrent.TimeoutException;
 import java.util.function.Consumer;
 
-import static org.asamk.signal.manager.config.ServiceConfig.capabilities;
+import static org.asamk.signal.manager.config.ServiceConfig.getCapabilities;
 
 class ProvisioningManagerImpl implements ProvisioningManager {
 
@@ -132,7 +132,7 @@ public String finishDeviceLink(String deviceName) throws IOException, TimeoutExc
                         registrationId,
                         pniRegistrationId,
                         encryptedDeviceName,
-                        capabilities));
+                        getCapabilities(false)));
 
         // Create new account with the synced identity
         var profileKey = ret.getProfileKey() == null ? KeyUtils.createProfileKey() : ret.getProfileKey();

File: lib/src/main/java/org/asamk/signal/manager/helper/IdentityHelper.java
Patch:
@@ -18,8 +18,6 @@
 import java.util.Arrays;
 import java.util.function.BiFunction;
 
-import static org.asamk.signal.manager.config.ServiceConfig.capabilities;
-
 public class IdentityHelper {
 
     private final static Logger logger = LoggerFactory.getLogger(IdentityHelper.class);
@@ -75,7 +73,7 @@ private Fingerprint computeSafetyNumberFingerprint(
         final var recipientId = account.getRecipientResolver().resolveRecipient(serviceId);
         final var address = account.getRecipientAddressResolver().resolveRecipientAddress(recipientId);
 
-        if (capabilities.getUuid()) {
+        if (account.getAccountCapabilities().getUuid()) {
             if (serviceId.isUnknown()) {
                 return null;
             }

File: src/main/java/org/asamk/signal/dbus/DbusSignalImpl.java
Patch:
@@ -1193,8 +1193,10 @@ public String getObjectPath() {
         public void quitGroup() throws Error.Failure {
             try {
                 m.quitGroup(groupId, Set.of());
-            } catch (GroupNotFoundException | NotAGroupMemberException e) {
+            } catch (GroupNotFoundException e) {
                 throw new Error.GroupNotFound(e.getMessage());
+            } catch (NotAGroupMemberException e) {
+                throw new Error.NotAGroupMember(e.getMessage());
             } catch (IOException e) {
                 throw new Error.Failure(e.getMessage());
             } catch (LastGroupAdminException e) {

File: src/main/java/org/asamk/signal/http/HttpServerHandler.java
Patch:
@@ -89,7 +89,8 @@ private void handleRpcEndpoint(HttpExchange httpExchange) throws IOException {
             return;
         }
 
-        if (!"application/json".equals(httpExchange.getRequestHeaders().getFirst("Content-Type"))) {
+        final var contentType = httpExchange.getRequestHeaders().getFirst("Content-Type");
+        if (contentType == null || !contentType.startsWith("application/json")) {
             sendResponse(415, null, httpExchange);
             return;
         }

File: lib/src/main/java/org/asamk/signal/manager/ManagerImpl.java
Patch:
@@ -569,7 +569,7 @@ private void applyMessage(
             final var textAttachment = AttachmentUtils.createAttachmentStream(new StreamDetails(new ByteArrayInputStream(
                     messageBytes), MimeUtils.LONG_TEXT, messageBytes.length), Optional.empty());
             messageBuilder.withBody(message.messageText().substring(0, 2000));
-            messageBuilder.withAttachment(textAttachment);
+            messageBuilder.withAttachment(context.getAttachmentHelper().uploadAttachment(textAttachment));
         } else {
             messageBuilder.withBody(message.messageText());
         }

File: lib/src/main/java/org/asamk/signal/manager/helper/SendHelper.java
Patch:
@@ -200,6 +200,7 @@ public SendMessageResult sendSyncMessage(SignalServiceSyncMessage message) {
         } catch (IOException e) {
             var address = context.getRecipientHelper().resolveSignalServiceAddress(account.getSelfRecipientId());
             logger.warn("Failed to send message due to IO exception: {}", e.getMessage());
+            logger.debug("Exception", e);
             return SendMessageResult.networkFailure(address);
         }
     }
@@ -642,6 +643,7 @@ private SendMessageResult handleSendMessage(RecipientId recipientId, SenderHandl
             return SendMessageResult.identityFailure(address, e.getIdentityKey());
         } catch (IOException e) {
             logger.warn("Failed to send message due to IO exception: {}", e.getMessage());
+            logger.debug("Exception", e);
             return SendMessageResult.networkFailure(address);
         }
     }

File: lib/src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -415,9 +415,9 @@ private void mergeRecipients(
     }
 
     public void removeRecipient(final RecipientId recipientId) {
+        final var recipientAddress = getRecipientStore().resolveRecipientAddress(recipientId);
         getRecipientStore().deleteRecipientData(recipientId);
         getMessageCache().deleteMessages(recipientId);
-        final var recipientAddress = getRecipientStore().resolveRecipientAddress(recipientId);
         if (recipientAddress.serviceId().isPresent()) {
             final var serviceId = recipientAddress.serviceId().get();
             getAciSessionStore().deleteAllSessions(serviceId);

File: src/main/java/org/asamk/signal/commands/GetAttachmentCommand.java
Patch:
@@ -40,12 +40,12 @@ public void handleCommand(
         final var id = ns.getString("id");
 
         try (InputStream attachment = m.retrieveAttachment(id)) {
+            final var bytes = attachment.readAllBytes();
+            final var base64 = Base64.getEncoder().encodeToString(bytes);
             if (outputWriter instanceof PlainTextWriter writer) {
-                final var bytes = attachment.readAllBytes();
-                final var base64 = Base64.getEncoder().encodeToString(bytes);
                 writer.println(base64);
             } else if (outputWriter instanceof JsonWriter writer) {
-                writer.write(new JsonAttachmentData(attachment));
+                writer.write(new JsonAttachmentData(base64));
             }
         } catch (FileNotFoundException ex) {
             throw new UserErrorException("Could not find attachment with ID: " + id, ex);

File: lib/src/main/java/org/asamk/signal/manager/util/NumberVerificationUtils.java
Patch:
@@ -15,6 +15,7 @@
 import org.whispersystems.signalservice.internal.push.VerifyAccountResponse;
 
 import java.io.IOException;
+import java.util.Locale;
 import java.util.Optional;
 
 public class NumberVerificationUtils {
@@ -23,10 +24,9 @@ public static void requestVerificationCode(
             SignalServiceAccountManager accountManager, String captcha, boolean voiceVerification
     ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException {
         captcha = captcha == null ? null : captcha.replace("signalcaptcha://", "");
-
         final ServiceResponse<RequestVerificationCodeResponse> response;
         if (voiceVerification) {
-            response = accountManager.requestVoiceVerificationCode(Utils.getDefaultLocale(null),
+            response = accountManager.requestVoiceVerificationCode(Utils.getDefaultLocale(Locale.US),
                     Optional.ofNullable(captcha),
                     Optional.empty(),
                     Optional.empty());

File: lib/src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -102,7 +102,7 @@ SendGroupMessageResults quitGroup(
     void deleteGroup(GroupId groupId) throws IOException;
 
     Pair<GroupId, SendGroupMessageResults> createGroup(
-            String name, Set<RecipientIdentifier.Single> members, File avatarFile
+            String name, Set<RecipientIdentifier.Single> members, String avatarFile
     ) throws IOException, AttachmentInvalidException, UnregisteredRecipientException;
 
     SendGroupMessageResults updateGroup(

File: lib/src/main/java/org/asamk/signal/manager/ManagerImpl.java
Patch:
@@ -394,7 +394,7 @@ public void deleteGroup(GroupId groupId) throws IOException {
 
     @Override
     public Pair<GroupId, SendGroupMessageResults> createGroup(
-            String name, Set<RecipientIdentifier.Single> members, File avatarFile
+            String name, Set<RecipientIdentifier.Single> members, String avatarFile
     ) throws IOException, AttachmentInvalidException, UnregisteredRecipientException {
         return context.getGroupHelper()
                 .createGroup(name,

File: src/main/java/org/asamk/signal/commands/UpdateProfileCommand.java
Patch:
@@ -10,7 +10,6 @@
 import org.asamk.signal.manager.api.UpdateProfile;
 import org.asamk.signal.output.OutputWriter;
 
-import java.io.File;
 import java.io.IOException;
 import java.util.Base64;
 
@@ -50,7 +49,7 @@ public void handleCommand(
 
         var avatarPath = ns.getString("avatar");
         boolean removeAvatar = Boolean.TRUE.equals(ns.getBoolean("remove-avatar"));
-        File avatarFile = removeAvatar || avatarPath == null ? null : new File(avatarPath);
+        String avatarFile = removeAvatar || avatarPath == null ? null : avatarPath;
 
         try {
             m.updateProfile(UpdateProfile.newBuilder()

File: lib/src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -506,6 +506,7 @@ private void load(
     ) throws IOException {
         this.dataPath = dataPath;
         this.accountPath = accountPath;
+        this.settings = settings;
         final JsonNode rootNode;
         synchronized (fileChannel) {
             fileChannel.position(0);
@@ -685,7 +686,6 @@ private void load(
 
         this.aciIdentityKeyPair = aciIdentityKeyPair;
         this.localRegistrationId = registrationId;
-        this.settings = settings;
 
         migratedLegacyConfig = loadLegacyStores(rootNode, legacySignalProtocolStore) || migratedLegacyConfig;
 

File: lib/src/main/java/org/asamk/signal/manager/storage/sessions/SessionStore.java
Patch:
@@ -3,7 +3,6 @@
 import org.asamk.signal.manager.api.Pair;
 import org.asamk.signal.manager.storage.Database;
 import org.asamk.signal.manager.storage.Utils;
-import org.signal.libsignal.protocol.InvalidMessageException;
 import org.signal.libsignal.protocol.NoSessionException;
 import org.signal.libsignal.protocol.SignalProtocolAddress;
 import org.signal.libsignal.protocol.ecc.ECPublicKey;
@@ -339,7 +338,7 @@ private SessionRecord getSessionRecordFromResultSet(ResultSet resultSet) throws
         try {
             final var record = resultSet.getBytes("record");
             return new SessionRecord(record);
-        } catch (InvalidMessageException e) {
+        } catch (Exception e) {
             logger.warn("Failed to load session, resetting session: {}", e.getMessage());
             return null;
         }

File: src/main/java/org/asamk/signal/http/HttpServerHandler.java
Patch:
@@ -59,7 +59,7 @@ private void sendResponse(int status, Object response, HttpExchange httpExchange
 
             httpExchange.getResponseBody().write(byteResponse);
         } else {
-            httpExchange.sendResponseHeaders(status, 0);
+            httpExchange.sendResponseHeaders(status, -1);
         }
 
         httpExchange.getResponseBody().close();

File: src/main/java/org/asamk/signal/jsonrpc/SignalJsonRpcCommandHandler.java
Patch:
@@ -52,7 +52,7 @@ public SignalJsonRpcCommandHandler(final MultiAccountManager c, final Function<S
         this.commandProvider = commandProvider;
     }
 
-    JsonNode handleRequest(
+    public JsonNode handleRequest(
             final ObjectMapper objectMapper, final String method, ContainerNode<?> params
     ) throws JsonRpcException {
         var command = getCommand(method);

File: src/main/java/org/asamk/signal/ReceiveMessageHandler.java
Patch:
@@ -33,9 +33,10 @@ public void handleMessage(MessageEnvelope envelope, Throwable exception) {
 
     private void handleMessageInternal(MessageEnvelope envelope, Throwable exception) {
         var source = envelope.sourceAddress();
-        writer.println("Envelope from: {} (device: {})",
+        writer.println("Envelope from: {} (device: {}) to {}",
                 source.map(this::formatContact).orElse("unknown source"),
-                envelope.sourceDevice());
+                envelope.sourceDevice(),
+                m.getSelfNumber());
         writer.println("Timestamp: {}", DateUtils.formatTimestamp(envelope.timestamp()));
         writer.println("Server timestamps: received: {} delivered: {}",
                 DateUtils.formatTimestamp(envelope.serverReceivedTimestamp()),

File: lib/src/main/java/org/asamk/signal/manager/helper/ReceiveHelper.java
Patch:
@@ -7,6 +7,7 @@
 import org.asamk.signal.manager.api.UntrustedIdentityException;
 import org.asamk.signal.manager.storage.SignalAccount;
 import org.asamk.signal.manager.storage.messageCache.CachedMessage;
+import org.asamk.signal.manager.storage.recipients.RecipientAddress;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.whispersystems.signalservice.api.SignalWebSocket;
@@ -261,7 +262,8 @@ private List<HandleAction> retryFailedReceivedMessage(
             }
             if (!envelope.hasSourceUuid()) {
                 final var identifier = ((UntrustedIdentityException) exception).getSender();
-                final var recipientId = account.getRecipientResolver().resolveRecipient(identifier.getServiceId());
+                final var recipientId = account.getRecipientResolver()
+                        .resolveRecipient(new RecipientAddress(identifier));
                 try {
                     account.getMessageCache().replaceSender(cachedMessage, recipientId);
                 } catch (IOException ioException) {

File: lib/src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -402,6 +402,7 @@ private void migrateLegacyConfigs() {
             // Old config file, creating new profile key
             setProfileKey(KeyUtils.createProfileKey());
         }
+        getProfileStore().storeProfileKey(getSelfRecipientId(), getProfileKey());
         if (isPrimaryDevice() && getPniIdentityKeyPair() == null && getPni() != null) {
             setPniIdentityKeyPair(KeyUtils.generateIdentityKeyPair());
         }

File: lib/src/main/java/org/asamk/signal/manager/ManagerImpl.java
Patch:
@@ -546,7 +546,7 @@ public SendMessageResults sendMessage(
         final var selfProfile = context.getProfileHelper().getSelfProfile();
         if (selfProfile == null || selfProfile.getDisplayName().isEmpty()) {
             logger.warn(
-                    "No profile name set. When sending a message it's recommended to set a profile name wit the updateProfile command. This may become mandatory in the future.");
+                    "No profile name set. When sending a message it's recommended to set a profile name with the updateProfile command. This may become mandatory in the future.");
         }
         final var messageBuilder = SignalServiceDataMessage.newBuilder();
         applyMessage(messageBuilder, message);

File: lib/src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -12,6 +12,7 @@
 import org.asamk.signal.manager.api.MessageEnvelope;
 import org.asamk.signal.manager.api.NotPrimaryDeviceException;
 import org.asamk.signal.manager.api.Pair;
+import org.asamk.signal.manager.api.PendingAdminApprovalException;
 import org.asamk.signal.manager.api.ReceiveConfig;
 import org.asamk.signal.manager.api.RecipientIdentifier;
 import org.asamk.signal.manager.api.SendGroupMessageResults;
@@ -108,7 +109,7 @@ SendGroupMessageResults updateGroup(
 
     Pair<GroupId, SendGroupMessageResults> joinGroup(
             GroupInviteLinkUrl inviteLinkUrl
-    ) throws IOException, InactiveGroupLinkException;
+    ) throws IOException, InactiveGroupLinkException, PendingAdminApprovalException;
 
     SendMessageResults sendTypingMessage(
             TypingAction action, Set<RecipientIdentifier> recipients

File: lib/src/main/java/org/asamk/signal/manager/ManagerImpl.java
Patch:
@@ -27,6 +27,7 @@
 import org.asamk.signal.manager.api.Message;
 import org.asamk.signal.manager.api.NotPrimaryDeviceException;
 import org.asamk.signal.manager.api.Pair;
+import org.asamk.signal.manager.api.PendingAdminApprovalException;
 import org.asamk.signal.manager.api.ReceiveConfig;
 import org.asamk.signal.manager.api.RecipientIdentifier;
 import org.asamk.signal.manager.api.SendGroupMessageResults;
@@ -431,7 +432,7 @@ public SendGroupMessageResults updateGroup(
     @Override
     public Pair<GroupId, SendGroupMessageResults> joinGroup(
             GroupInviteLinkUrl inviteLinkUrl
-    ) throws IOException, InactiveGroupLinkException {
+    ) throws IOException, InactiveGroupLinkException, PendingAdminApprovalException {
         return context.getGroupHelper().joinGroup(inviteLinkUrl);
     }
 

File: src/main/java/org/asamk/signal/commands/JoinGroupCommand.java
Patch:
@@ -9,6 +9,7 @@
 import org.asamk.signal.commands.exceptions.UserErrorException;
 import org.asamk.signal.manager.Manager;
 import org.asamk.signal.manager.api.InactiveGroupLinkException;
+import org.asamk.signal.manager.api.PendingAdminApprovalException;
 import org.asamk.signal.manager.groups.GroupInviteLinkUrl;
 import org.asamk.signal.output.JsonWriter;
 import org.asamk.signal.output.OutputWriter;
@@ -94,6 +95,8 @@ public void handleCommand(
                     .getSimpleName() + ")", e);
         } catch (InactiveGroupLinkException e) {
             throw new UserErrorException("Group link is not valid: " + e.getMessage());
+        } catch (PendingAdminApprovalException e) {
+            throw new UserErrorException("Pending admin approval: " + e.getMessage());
         }
     }
 }

File: src/main/java/org/asamk/signal/dbus/DbusSignalImpl.java
Patch:
@@ -10,6 +10,7 @@
 import org.asamk.signal.manager.api.InvalidStickerException;
 import org.asamk.signal.manager.api.Message;
 import org.asamk.signal.manager.api.NotPrimaryDeviceException;
+import org.asamk.signal.manager.api.PendingAdminApprovalException;
 import org.asamk.signal.manager.api.RecipientIdentifier;
 import org.asamk.signal.manager.api.SendMessageResult;
 import org.asamk.signal.manager.api.SendMessageResults;
@@ -778,6 +779,8 @@ public byte[] joinGroup(final String groupLink) {
             }
             final var result = m.joinGroup(linkUrl);
             return result.first().serialize();
+        } catch (PendingAdminApprovalException e) {
+            throw new Error.Failure("Pending admin approval: " + e.getMessage());
         } catch (GroupInviteLinkUrl.InvalidGroupLinkException | InactiveGroupLinkException e) {
             throw new Error.Failure("Group link is invalid: " + e.getMessage());
         } catch (GroupInviteLinkUrl.UnknownGroupLinkVersionException e) {

File: lib/src/main/java/org/asamk/signal/manager/storage/sendLog/MessageSendLogStore.java
Patch:
@@ -86,7 +86,7 @@ public List<MessageSendLogEntry> findMessages(
             final ServiceId serviceId, final int deviceId, final long timestamp, final boolean isSenderKey
     ) {
         final var sql = """
-                        SELECT group_id, content, content_hint
+                        SELECT group_id, content, content_hint, urgent
                         FROM %s l
                              INNER JOIN %s lc ON l.content_id = lc._id
                         WHERE l.uuid = ? AND l.device_id = ? AND lc.timestamp = ?

File: lib/src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -402,7 +402,7 @@ private void migrateLegacyConfigs() {
             // Old config file, creating new profile key
             setProfileKey(KeyUtils.createProfileKey());
         }
-        if (isPrimaryDevice() && getPniIdentityKeyPair() == null) {
+        if (isPrimaryDevice() && getPniIdentityKeyPair() == null && getPni() != null) {
             setPniIdentityKeyPair(KeyUtils.generateIdentityKeyPair());
         }
     }

File: src/main/java/org/asamk/signal/BaseConfig.java
Patch:
@@ -5,7 +5,7 @@ public class BaseConfig {
     public final static String PROJECT_NAME = BaseConfig.class.getPackage().getImplementationTitle();
     public final static String PROJECT_VERSION = BaseConfig.class.getPackage().getImplementationVersion();
 
-    final static String USER_AGENT_SIGNAL_ANDROID = "Signal-Android/5.22.3";
+    final static String USER_AGENT_SIGNAL_ANDROID = "Signal-Android/5.51.7";
     final static String USER_AGENT_SIGNAL_CLI = PROJECT_NAME == null
             ? "signal-cli"
             : PROJECT_NAME + "/" + PROJECT_VERSION;

File: lib/src/main/java/org/asamk/signal/manager/storage/sessions/SessionStore.java
Patch:
@@ -9,6 +9,7 @@
 import org.signal.libsignal.protocol.ecc.ECPublicKey;
 import org.signal.libsignal.protocol.message.CiphertextMessage;
 import org.signal.libsignal.protocol.state.SessionRecord;
+import org.signal.libsignal.protocol.util.Hex;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.whispersystems.signalservice.api.SignalServiceSessionStore;
@@ -208,7 +209,8 @@ public void archiveSession(final SignalProtocolAddress address) {
     public Set<SignalProtocolAddress> getAllAddressesWithActiveSessions(final List<String> addressNames) {
         final var serviceIdsCommaSeparated = addressNames.stream()
                 .map(ServiceId::parseOrThrow)
-                .map(ServiceId::toString)
+                .map(ServiceId::toByteArray)
+                .map(uuid -> "x'" + Hex.toStringCondensed(uuid) + "'")
                 .collect(Collectors.joining(","));
         final var sql = (
                 """

File: lib/src/main/java/org/asamk/signal/manager/helper/UnidentifiedAccessHelper.java
Patch:
@@ -96,7 +96,7 @@ public Optional<UnidentifiedAccessPair> getAccessForSync() {
 
     private byte[] getSenderCertificateFor(final RecipientId recipientId) {
         final var sharingMode = account.getConfigurationStore().getPhoneNumberSharingMode();
-        if (sharingMode == PhoneNumberSharingMode.EVERYBODY || (
+        if (sharingMode == null || sharingMode == PhoneNumberSharingMode.EVERYBODY || (
                 sharingMode == PhoneNumberSharingMode.CONTACTS
                         && account.getContactStore().getContact(recipientId) != null
         )) {

File: lib/src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -1545,7 +1545,8 @@ public boolean isUnrestrictedUnidentifiedAccess() {
     }
 
     public boolean isDiscoverableByPhoneNumber() {
-        return configurationStore.getPhoneNumberUnlisted() == null || !configurationStore.getPhoneNumberUnlisted();
+        final var phoneNumberUnlisted = configurationStore.getPhoneNumberUnlisted();
+        return phoneNumberUnlisted == null || !phoneNumberUnlisted;
     }
 
     public void finishRegistration(final ACI aci, final PNI pni, final MasterKey masterKey, final String pin) {

File: lib/src/main/java/org/asamk/signal/manager/SignalAccountFiles.java
Patch:
@@ -65,6 +65,9 @@ public MultiAccountManager initMultiAccountManager() throws IOException {
             } catch (NotRegisteredException | IOException | AccountCheckException e) {
                 logger.warn("Ignoring {}: {} ({})", a.number(), e.getMessage(), e.getClass().getSimpleName());
                 return null;
+            } catch (Throwable e) {
+                logger.error("Failed to load {}: {} ({})", a.number(), e.getMessage(), e.getClass().getSimpleName());
+                throw e;
             }
         }).filter(Objects::nonNull).toList();
 

File: lib/src/main/java/org/asamk/signal/manager/config/LiveConfig.java
Patch:
@@ -28,10 +28,10 @@ class LiveConfig {
             .decode("BXu6QIKVz5MA8gstzfOgRQGqyLqOwNKHL6INkv3IHWMF");
     private final static String CDS_MRENCLAVE = "c98e00a4e3ff977a56afefe7362a27e4961e4f19e211febfbb19b897e6b80b15";
 
-    private final static String KEY_BACKUP_ENCLAVE_NAME = "fe7c1bfae98f9b073d220366ea31163ee82f6d04bead774f71ca8e5c40847bfe";
+    private final static String KEY_BACKUP_ENCLAVE_NAME = "0cedba03535b41b67729ce9924185f831d7767928a1d1689acb689bc079c375f";
     private final static byte[] KEY_BACKUP_SERVICE_ID = Hex.decode(
-            "fe7c1bfae98f9b073d220366ea31163ee82f6d04bead774f71ca8e5c40847bfe");
-    private final static String KEY_BACKUP_MRENCLAVE = "a3baab19ef6ce6f34ab9ebb25ba722725ae44a8872dc0ff08ad6d83a9489de87";
+            "187d2739d22be65e74b65f0055e74d31310e4267e5fac2b1246cc8beba81af39");
+    private final static String KEY_BACKUP_MRENCLAVE = "ee19f1965b1eefa3dc4204eb70c04f397755f771b8c1909d080c04dad2a6a9ba";
 
     private final static String URL = "https://chat.signal.org";
     private final static String CDN_URL = "https://cdn.signal.org";

File: lib/src/main/java/org/asamk/signal/manager/config/StagingConfig.java
Patch:
@@ -28,10 +28,10 @@ class StagingConfig {
             .decode("BbqY1DzohE4NUZoVF+L18oUPrK3kILllLEJh2UnPSsEx");
     private final static String CDS_MRENCLAVE = "c98e00a4e3ff977a56afefe7362a27e4961e4f19e211febfbb19b897e6b80b15";
 
-    private final static String KEY_BACKUP_ENCLAVE_NAME = "823a3b2c037ff0cbe305cc48928cfcc97c9ed4a8ca6d49af6f7d6981fb60a4e9";
+    private final static String KEY_BACKUP_ENCLAVE_NAME = "dd6f66d397d9e8cf6ec6db238e59a7be078dd50e9715427b9c89b409ffe53f99";
     private final static byte[] KEY_BACKUP_SERVICE_ID = Hex.decode(
-            "16b94ac6d2b7f7b9d72928f36d798dbb35ed32e7bb14c42b4301ad0344b46f29");
-    private final static String KEY_BACKUP_MRENCLAVE = "a3baab19ef6ce6f34ab9ebb25ba722725ae44a8872dc0ff08ad6d83a9489de87";
+            "4200003414528c151e2dccafbc87aa6d3d66a5eb8f8c05979a6e97cb33cd493a");
+    private final static String KEY_BACKUP_MRENCLAVE = "ee19f1965b1eefa3dc4204eb70c04f397755f771b8c1909d080c04dad2a6a9ba";
 
     private final static String URL = "https://chat.staging.signal.org";
     private final static String CDN_URL = "https://cdn-staging.signal.org";

File: src/main/java/org/asamk/signal/util/IOUtils.java
Patch:
@@ -121,13 +121,13 @@ public static InetSocketAddress parseInetSocketAddress(final String tcpAddress)
         return socketAddress;
     }
 
-    public static UnixDomainPrincipal getUnixDomainPrincipal(final SocketChannel channel) throws IOException {
+    public static String getUnixDomainPrincipal(final SocketChannel channel) throws IOException {
         UnixDomainPrincipal principal = null;
         try {
             principal = channel.getOption(ExtendedSocketOptions.SO_PEERCRED);
         } catch (UnsupportedOperationException | NoClassDefFoundError ignored) {
         }
-        return principal;
+        return principal == null ? null : principal.toString();
     }
 
     public static ServerSocketChannel bindSocket(final SocketAddress address) throws IOErrorException {

File: src/main/java/org/asamk/signal/util/IOUtils.java
Patch:
@@ -125,7 +125,7 @@ public static UnixDomainPrincipal getUnixDomainPrincipal(final SocketChannel cha
         UnixDomainPrincipal principal = null;
         try {
             principal = channel.getOption(ExtendedSocketOptions.SO_PEERCRED);
-        } catch (UnsupportedOperationException ignored) {
+        } catch (UnsupportedOperationException | NoClassDefFoundError ignored) {
         }
         return principal;
     }

File: lib/src/main/java/org/asamk/signal/manager/storage/profiles/LegacyProfileStore.java
Patch:
@@ -60,7 +60,7 @@ public List<LegacySignalProfileEntry> deserialize(
                         }
                     }
                     var lastUpdateTimestamp = entry.get("lastUpdateTimestamp").asLong();
-                    var profile = jsonProcessor.treeToValue(entry.get("profile"), SignalProfile.class);
+                    var profile = jsonProcessor.treeToValue(entry.get("profile"), LegacySignalProfile.class);
                     profileEntries.add(new LegacySignalProfileEntry(address,
                             profileKey,
                             lastUpdateTimestamp,

File: lib/src/main/java/org/asamk/signal/manager/storage/profiles/LegacySignalProfileEntry.java
Patch:
@@ -12,15 +12,15 @@ public class LegacySignalProfileEntry {
 
     private final long lastUpdateTimestamp;
 
-    private final SignalProfile profile;
+    private final LegacySignalProfile profile;
 
     private final ProfileKeyCredential profileKeyCredential;
 
     public LegacySignalProfileEntry(
             final RecipientAddress address,
             final ProfileKey profileKey,
             final long lastUpdateTimestamp,
-            final SignalProfile profile,
+            final LegacySignalProfile profile,
             final ProfileKeyCredential profileKeyCredential
     ) {
         this.address = address;
@@ -42,7 +42,7 @@ public long getLastUpdateTimestamp() {
         return lastUpdateTimestamp;
     }
 
-    public SignalProfile getProfile() {
+    public LegacySignalProfile getProfile() {
         return profile;
     }
 

File: lib/src/main/java/org/asamk/signal/manager/ProvisioningManagerImpl.java
Patch:
@@ -161,15 +161,16 @@ public String finishDeviceLink(String deviceName) throws IOException, TimeoutExc
                 try {
                     m.refreshPreKeys();
                 } catch (Exception e) {
-                    logger.error("Failed to refresh pre keys.");
+                    logger.error("Failed to refresh pre keys.", e);
                 }
 
                 logger.debug("Requesting sync data");
                 try {
                     m.requestAllSyncData();
                 } catch (Exception e) {
                     logger.error(
-                            "Failed to request sync messages from linked device, data can be requested again with `sendSyncRequest`.");
+                            "Failed to request sync messages from linked device, data can be requested again with `sendSyncRequest`.",
+                            e);
                 }
 
                 if (newManagerListener != null) {

File: lib/src/main/java/org/asamk/signal/manager/storage/senderKeys/SenderKeyRecordStore.java
Patch:
@@ -6,6 +6,7 @@
 import org.signal.libsignal.protocol.InvalidMessageException;
 import org.signal.libsignal.protocol.SignalProtocolAddress;
 import org.signal.libsignal.protocol.groups.state.SenderKeyRecord;
+import org.signal.libsignal.protocol.groups.state.SenderKeyStore;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -23,7 +24,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-public class SenderKeyRecordStore implements org.signal.libsignal.protocol.groups.state.SenderKeyStore {
+public class SenderKeyRecordStore implements SenderKeyStore {
 
     private final static Logger logger = LoggerFactory.getLogger(SenderKeyRecordStore.class);
 
@@ -138,7 +139,7 @@ void mergeRecipients(RecipientId recipientId, RecipientId toBeMergedRecipientId)
     }
 
     /**
-     * @param identifier can be either a serialized uuid or a e164 phone number
+     * @param identifier can be either a serialized uuid or an e164 phone number
      */
     private RecipientId resolveRecipient(String identifier) {
         return resolver.resolveRecipient(identifier);

File: src/main/java/org/asamk/signal/commands/RegisterCommand.java
Patch:
@@ -80,7 +80,7 @@ Check the developer tools (F12) console for a failed redirect to signalcaptcha:/
         } catch (NonNormalizedPhoneNumberException e) {
             throw new UserErrorException("Failed to register: " + e.getMessage(), e);
         } catch (IOException e) {
-            throw new IOErrorException("Request verify error: " + e.getMessage(), e);
+            throw new IOErrorException("Failed to register: " + e.getMessage(), e);
         }
     }
 

File: lib/src/main/java/org/asamk/signal/manager/api/ReceiveConfig.java
Patch:
@@ -1,3 +1,3 @@
 package org.asamk.signal.manager.api;
 
-public record ReceiveConfig(boolean ignoreAttachments) {}
+public record ReceiveConfig(boolean ignoreAttachments, boolean sendReadReceipts) {}

File: lib/src/main/java/org/asamk/signal/manager/helper/ReceiveHelper.java
Patch:
@@ -35,7 +35,7 @@ public class ReceiveHelper {
     private final SignalDependencies dependencies;
     private final Context context;
 
-    private ReceiveConfig receiveConfig = new ReceiveConfig(false);
+    private ReceiveConfig receiveConfig = new ReceiveConfig(false, false);
     private boolean needsToRetryFailedMessages = false;
     private boolean hasCaughtUpWithOldMessages = false;
     private boolean isWaitingForMessage = false;

File: lib/src/main/java/org/asamk/signal/manager/ProvisioningManagerImpl.java
Patch:
@@ -150,10 +150,9 @@ public String finishDeviceLink(String deviceName) throws IOException, TimeoutExc
 
             ManagerImpl m = null;
             try {
-                final var accountPathFinal = accountPath;
                 m = new ManagerImpl(account,
                         pathConfig,
-                        new AccountFileUpdaterImpl(accountsStore, accountPathFinal),
+                        new AccountFileUpdaterImpl(accountsStore, accountPath),
                         serviceEnvironmentConfig,
                         userAgent);
                 account = null;

File: lib/src/main/java/org/asamk/signal/manager/api/RecipientIdentifier.java
Patch:
@@ -15,7 +15,7 @@ public sealed interface RecipientIdentifier {
 
     record NoteToSelf() implements RecipientIdentifier {
 
-        public static NoteToSelf INSTANCE = new NoteToSelf();
+        public static final NoteToSelf INSTANCE = new NoteToSelf();
 
         @Override
         public String getIdentifier() {

File: lib/src/main/java/org/asamk/signal/manager/api/UpdateGroup.java
Patch:
@@ -47,7 +47,7 @@ public static Builder newBuilder() {
     }
 
     public static Builder newBuilder(final UpdateGroup copy) {
-        Builder builder = new Builder(copy.name,
+        return new Builder(copy.name,
                 copy.description,
                 copy.members,
                 copy.removeMembers,
@@ -62,7 +62,6 @@ public static Builder newBuilder(final UpdateGroup copy) {
                 copy.avatarFile,
                 copy.expirationTimer,
                 copy.isAnnouncementGroup);
-        return builder;
     }
 
     public static Builder newBuilder(

File: lib/src/main/java/org/asamk/signal/manager/storage/identities/IdentityKeyStore.java
Patch:
@@ -186,7 +186,7 @@ public IdentityInfo getIdentity(RecipientId recipientId) {
         }
     }
 
-    final Pattern identityFileNamePattern = Pattern.compile("([0-9]+)");
+    final Pattern identityFileNamePattern = Pattern.compile("(\\d+)");
 
     public List<IdentityInfo> getIdentities() {
         final var files = identitiesPath.listFiles();
@@ -198,6 +198,7 @@ public List<IdentityInfo> getIdentities() {
                 .map(f -> resolver.resolveRecipient(Long.parseLong(f.getName())))
                 .filter(Objects::nonNull)
                 .map(this::loadIdentityLocked)
+                .filter(Objects::nonNull)
                 .toList();
     }
 

File: lib/src/main/java/org/asamk/signal/manager/storage/prekeys/SignedPreKeyStore.java
Patch:
@@ -36,7 +36,7 @@ public SignedPreKeyRecord loadSignedPreKey(int signedPreKeyId) throws InvalidKey
         return loadSignedPreKeyRecord(file);
     }
 
-    final Pattern signedPreKeyFileNamePattern = Pattern.compile("([0-9]+)");
+    final Pattern signedPreKeyFileNamePattern = Pattern.compile("(\\d+)");
 
     @Override
     public List<SignedPreKeyRecord> loadSignedPreKeys() {

File: lib/src/main/java/org/asamk/signal/manager/storage/senderKeys/SenderKeyRecordStore.java
Patch:
@@ -161,7 +161,7 @@ private List<Key> getKeysLocked(RecipientId recipientId) {
         return parseFileNames(files);
     }
 
-    final Pattern senderKeyFileNamePattern = Pattern.compile("([0-9]+)_([0-9]+)_([0-9a-z\\-]+)");
+    final Pattern senderKeyFileNamePattern = Pattern.compile("(\\d+)_(\\d+)_([\\da-z\\-]+)");
 
     private List<Key> parseFileNames(final File[] files) {
         return Arrays.stream(files)

File: lib/src/main/java/org/asamk/signal/manager/storage/sessions/SessionStore.java
Patch:
@@ -242,7 +242,7 @@ private Collection<Key> getKeysLocked() {
         return parseFileNames(files);
     }
 
-    final Pattern sessionFileNamePattern = Pattern.compile("([0-9]+)_([0-9]+)");
+    final Pattern sessionFileNamePattern = Pattern.compile("(\\d+)_(\\d+)");
 
     private List<Key> parseFileNames(final File[] files) {
         return Arrays.stream(files)

File: src/main/java/org/asamk/signal/commands/SendCommand.java
Patch:
@@ -189,7 +189,7 @@ private List<Message.Mention> parseMentions(
             final Manager m, final List<String> mentionStrings
     ) throws UserErrorException {
         List<Message.Mention> mentions;
-        final Pattern mentionPattern = Pattern.compile("([0-9]+):([0-9]+):(.+)");
+        final Pattern mentionPattern = Pattern.compile("(\\d+):(\\d+):(.+)");
         mentions = new ArrayList<>();
         for (final var mention : mentionStrings) {
             final var matcher = mentionPattern.matcher(mention);
@@ -205,7 +205,7 @@ private List<Message.Mention> parseMentions(
     }
 
     private Message.Sticker parseSticker(final String stickerString) throws UserErrorException {
-        final Pattern stickerPattern = Pattern.compile("([0-9a-f]+):([0-9]+)");
+        final Pattern stickerPattern = Pattern.compile("([\\da-f]+):(\\d+)");
         final var matcher = stickerPattern.matcher(stickerString);
         if (!matcher.matches() || matcher.group(1).length() % 2 != 0) {
             throw new UserErrorException("Invalid sticker syntax ("

File: lib/src/main/java/org/asamk/signal/manager/helper/AccountHelper.java
Patch:
@@ -5,6 +5,7 @@
 import org.asamk.signal.manager.api.CaptchaRequiredException;
 import org.asamk.signal.manager.api.IncorrectPinException;
 import org.asamk.signal.manager.api.InvalidDeviceLinkException;
+import org.asamk.signal.manager.api.NonNormalizedPhoneNumberException;
 import org.asamk.signal.manager.api.PinLockedException;
 import org.asamk.signal.manager.config.ServiceConfig;
 import org.asamk.signal.manager.storage.SignalAccount;
@@ -95,7 +96,7 @@ private void updateSelfIdentifiers(final String number, final ACI aci, final PNI
 
     public void startChangeNumber(
             String newNumber, String captcha, boolean voiceVerification
-    ) throws IOException, CaptchaRequiredException {
+    ) throws IOException, CaptchaRequiredException, NonNormalizedPhoneNumberException {
         final var accountManager = dependencies.createUnauthenticatedAccountManager(newNumber, account.getPassword());
         NumberVerificationUtils.requestVerificationCode(accountManager, captcha, voiceVerification);
     }

File: src/main/java/org/asamk/signal/commands/RegisterCommand.java
Patch:
@@ -12,6 +12,7 @@
 import org.asamk.signal.commands.exceptions.UserErrorException;
 import org.asamk.signal.manager.RegistrationManager;
 import org.asamk.signal.manager.api.CaptchaRequiredException;
+import org.asamk.signal.manager.api.NonNormalizedPhoneNumberException;
 import org.asamk.signal.output.JsonWriter;
 
 import java.io.IOException;
@@ -76,6 +77,8 @@ Check the developer tools (F12) console for a failed redirect to signalcaptcha:/
                 message = "Invalid captcha given.";
             }
             throw new UserErrorException(message);
+        } catch (NonNormalizedPhoneNumberException e) {
+            throw new UserErrorException("Failed to register: " + e.getMessage(), e);
         } catch (IOException e) {
             throw new IOErrorException("Request verify error: " + e.getMessage(), e);
         }

File: src/main/java/org/asamk/signal/dbus/DbusSignalControlImpl.java
Patch:
@@ -9,6 +9,7 @@
 import org.asamk.signal.manager.RegistrationManager;
 import org.asamk.signal.manager.api.CaptchaRequiredException;
 import org.asamk.signal.manager.api.IncorrectPinException;
+import org.asamk.signal.manager.api.NonNormalizedPhoneNumberException;
 import org.asamk.signal.manager.api.PinLockedException;
 import org.asamk.signal.manager.api.UserAlreadyExistsException;
 import org.freedesktop.dbus.DBusPath;
@@ -61,6 +62,8 @@ public void registerWithCaptcha(
         } catch (CaptchaRequiredException e) {
             String message = captcha == null ? "Captcha required for verification." : "Invalid captcha given.";
             throw new SignalControl.Error.RequiresCaptcha(message);
+        } catch (NonNormalizedPhoneNumberException e) {
+            throw new Error.InvalidNumber(e.getMessage());
         } catch (OverlappingFileLockException e) {
             throw new SignalControl.Error.Failure("Account is already in use");
         } catch (IOException e) {

File: lib/src/main/java/org/asamk/signal/manager/helper/GroupHelper.java
Patch:
@@ -262,7 +262,7 @@ public Pair<GroupId, SendGroupMessageResults> joinGroup(
             groupJoinInfo = context.getGroupV2Helper()
                     .getDecryptedGroupJoinInfo(inviteLinkUrl.getGroupMasterKey(), inviteLinkUrl.getPassword());
         } catch (GroupLinkNotActiveException e) {
-            throw new InactiveGroupLinkException("Group link inactive", e);
+            throw new InactiveGroupLinkException("Group link inactive (reason: " + e.getReason() + ")", e);
         }
         final var groupChange = context.getGroupV2Helper()
                 .joinGroup(inviteLinkUrl.getGroupMasterKey(), inviteLinkUrl.getPassword(), groupJoinInfo);

File: lib/src/main/java/org/asamk/signal/manager/ProvisioningManagerImpl.java
Patch:
@@ -153,7 +153,7 @@ public String finishDeviceLink(String deviceName) throws IOException, TimeoutExc
                 final var accountPathFinal = accountPath;
                 m = new ManagerImpl(account,
                         pathConfig,
-                        (newNumber, newAci) -> accountsStore.updateAccount(accountPathFinal, newNumber, newAci),
+                        new AccountFileUpdaterImpl(accountsStore, accountPathFinal),
                         serviceEnvironmentConfig,
                         userAgent);
                 account = null;
@@ -220,7 +220,7 @@ private boolean canRelinkExistingAccount(final String accountPath) throws IOExce
 
             final var m = new ManagerImpl(signalAccount,
                     pathConfig,
-                    (newNumber, newAci) -> accountsStore.updateAccount(accountPath, newNumber, newAci),
+                    new AccountFileUpdaterImpl(accountsStore, accountPath),
                     serviceEnvironmentConfig,
                     userAgent);
             try (m) {

File: lib/src/main/java/org/asamk/signal/manager/SignalAccountFiles.java
Patch:
@@ -95,7 +95,7 @@ private Manager initManager(
 
         final var manager = new ManagerImpl(account,
                 pathConfig,
-                (newNumber, newAci) -> accountsStore.updateAccount(accountPath, newNumber, newAci),
+                new AccountFileUpdaterImpl(accountsStore, accountPath),
                 serviceEnvironmentConfig,
                 userAgent);
 
@@ -155,7 +155,7 @@ public RegistrationManager initRegistrationManager(
                     serviceEnvironmentConfig,
                     userAgent,
                     newManagerListener,
-                    (newNumber, newAci) -> accountsStore.updateAccount(newAccountPath, newNumber, newAci));
+                    new AccountFileUpdaterImpl(accountsStore, newAccountPath));
         }
 
         var account = SignalAccount.load(pathConfig.dataPath(), accountPath, true, trustNewIdentity);
@@ -169,6 +169,6 @@ public RegistrationManager initRegistrationManager(
                 serviceEnvironmentConfig,
                 userAgent,
                 newManagerListener,
-                (newNumber, newAci) -> accountsStore.updateAccount(accountPath, newNumber, newAci));
+                new AccountFileUpdaterImpl(accountsStore, accountPath));
     }
 }

File: lib/src/main/java/org/asamk/signal/manager/helper/AccountFileUpdater.java
Patch:
@@ -5,4 +5,6 @@
 public interface AccountFileUpdater {
 
     void updateAccountIdentifiers(String number, ACI aci);
+
+    void removeAccount();
 }

File: src/main/java/org/asamk/signal/commands/Commands.java
Patch:
@@ -13,6 +13,7 @@ public class Commands {
         addCommand(new AddDeviceCommand());
         addCommand(new BlockCommand());
         addCommand(new DaemonCommand());
+        addCommand(new DeleteLocalAccountDataCommand());
         addCommand(new FinishLinkCommand());
         addCommand(new GetUserStatusCommand());
         addCommand(new JoinGroupCommand());

File: lib/src/main/java/org/asamk/signal/manager/api/SendMessageResult.java
Patch:
@@ -48,7 +48,7 @@ public static SendMessageResult from(
                 sendMessageResult.isNetworkFailure(),
                 sendMessageResult.isUnregisteredFailure(),
                 sendMessageResult.getIdentityFailure() != null,
-                sendMessageResult.getRateLimitFailure() != null,
+                sendMessageResult.getRateLimitFailure() != null || sendMessageResult.getProofRequiredFailure() != null,
                 sendMessageResult.getProofRequiredFailure() == null
                         ? null
                         : new ProofRequiredException(sendMessageResult.getProofRequiredFailure()));

File: src/main/java/org/asamk/signal/dbus/DbusSignalImpl.java
Patch:
@@ -874,7 +874,7 @@ private static void checkGroupSendMessageResults(
         }
 
         var errors = SendMessageResultUtils.getErrorMessagesFromSendMessageResults(results);
-        if (errors.size() < results.size()) {
+        if (errors.size() == 0 || errors.size() < results.size()) {
             return;
         }
 

File: lib/src/main/java/org/asamk/signal/manager/helper/SendHelper.java
Patch:
@@ -175,7 +175,7 @@ public SendMessageResult sendSyncMessage(SignalServiceSyncMessage message) {
         } catch (RateLimitException e) {
             var address = context.getRecipientHelper().resolveSignalServiceAddress(account.getSelfRecipientId());
             logger.warn("Sending failed due to rate limiting from the signal server: {}", e.getMessage());
-            return SendMessageResult.networkFailure(address);
+            return SendMessageResult.rateLimitFailure(address, e);
         } catch (org.whispersystems.signalservice.api.crypto.UntrustedIdentityException e) {
             var address = context.getRecipientHelper().resolveSignalServiceAddress(account.getSelfRecipientId());
             return SendMessageResult.identityFailure(address, e.getIdentityKey());
@@ -603,7 +603,7 @@ private SendMessageResult handleSendMessage(RecipientId recipientId, SenderHandl
             return SendMessageResult.proofRequiredFailure(address, e);
         } catch (RateLimitException e) {
             logger.warn("Sending failed due to rate limiting from the signal server: {}", e.getMessage());
-            return SendMessageResult.networkFailure(address);
+            return SendMessageResult.rateLimitFailure(address, e);
         } catch (org.whispersystems.signalservice.api.crypto.UntrustedIdentityException e) {
             return SendMessageResult.identityFailure(address, e.getIdentityKey());
         } catch (IOException e) {

File: src/main/java/org/asamk/signal/ReceiveMessageHandler.java
Patch:
@@ -1,9 +1,9 @@
 package org.asamk.signal;
 
 import org.asamk.signal.manager.Manager;
-import org.asamk.signal.manager.api.UntrustedIdentityException;
 import org.asamk.signal.manager.api.MessageEnvelope;
 import org.asamk.signal.manager.api.RecipientIdentifier;
+import org.asamk.signal.manager.api.UntrustedIdentityException;
 import org.asamk.signal.manager.groups.GroupId;
 import org.asamk.signal.manager.storage.recipients.RecipientAddress;
 import org.asamk.signal.output.PlainTextWriter;
@@ -309,7 +309,7 @@ private void printSyncMessage(
                 writer.println("- {}", address.getLegacyIdentifier());
             }
             for (var groupId : blockedList.groupIds()) {
-                writer.println("- {}", groupId);
+                writer.println("- {}", groupId.toBase64());
             }
         }
         if (syncMessage.viewOnceOpen().isPresent()) {

File: lib/src/main/java/org/asamk/signal/manager/SignalAccountFiles.java
Patch:
@@ -49,7 +49,7 @@ public Set<String> getAllLocalAccountNumbers() {
     public MultiAccountManager initMultiAccountManager() {
         final var managers = accountsStore.getAllAccounts().parallelStream().map(a -> {
             try {
-                return initManager(a.path());
+                return initManager(a.number(), a.path());
             } catch (NotRegisteredException | IOException | AccountCheckException e) {
                 logger.warn("Ignoring {}: {} ({})", a.number(), e.getMessage(), e.getClass().getSimpleName());
                 return null;

File: src/main/java/org/asamk/signal/json/JsonMessageEnvelope.java
Patch:
@@ -3,9 +3,9 @@
 import com.fasterxml.jackson.annotation.JsonInclude;
 
 import org.asamk.signal.manager.Manager;
-import org.asamk.signal.manager.api.UntrustedIdentityException;
 import org.asamk.signal.manager.api.MessageEnvelope;
 import org.asamk.signal.manager.api.RecipientIdentifier;
+import org.asamk.signal.manager.api.UntrustedIdentityException;
 import org.asamk.signal.manager.storage.recipients.RecipientAddress;
 
 import java.util.UUID;
@@ -48,8 +48,7 @@ public static JsonMessageEnvelope from(
             source = sourceAddress.getLegacyIdentifier();
             sourceNumber = sourceAddress.number().orElse(null);
             sourceUuid = sourceAddress.uuid().map(UUID::toString).orElse(null);
-            sourceName = m.getContactOrProfileName(RecipientIdentifier.Single.fromAddress(envelope.sourceAddress()
-                    .get()));
+            sourceName = m.getContactOrProfileName(RecipientIdentifier.Single.fromAddress(sourceAddress));
         } else {
             source = null;
             sourceNumber = null;

File: src/main/java/org/asamk/signal/commands/SendReceiptCommand.java
Patch:
@@ -28,6 +28,7 @@ public void attachToSubparser(final Subparser subparser) {
         subparser.addArgument("-t", "--target-timestamp")
                 .type(long.class)
                 .nargs("+")
+                .required(true)
                 .help("Specify the timestamp of the messages for which a receipt should be sent.");
         subparser.addArgument("--type")
                 .help("Specify the receipt type (default is read receipt).")

File: src/main/java/org/asamk/signal/json/JsonReceiveMessageHandler.java
Patch:
@@ -25,7 +25,7 @@ public void handleMessage(MessageEnvelope envelope, Throwable exception) {
         final var object = new HashMap<String, Object>();
         object.put("account", m.getSelfNumber());
         if (exception != null) {
-            object.put("error", JsonError.from(exception));
+            object.put("exception", JsonError.from(exception));
         }
 
         if (envelope != null) {

File: lib/src/main/java/org/asamk/signal/manager/ManagerImpl.java
Patch:
@@ -770,7 +770,7 @@ private void startReceiveThreadIfRequired() {
                     Stream.concat(messageHandlers.stream(), weakHandlers.stream()).forEach(h -> {
                         try {
                             h.handleMessage(envelope, e);
-                        } catch (Exception ex) {
+                        } catch (Throwable ex) {
                             logger.warn("Message handler failed, ignoring", ex);
                         }
                     });

File: src/main/java/org/asamk/signal/commands/Commands.java
Patch:
@@ -29,8 +29,8 @@ public class Commands {
         addCommand(new RegisterCommand());
         addCommand(new RemoveContactCommand());
         addCommand(new RemoveDeviceCommand());
-        addCommand(new RemoteDeleteCommand());
         addCommand(new RemovePinCommand());
+        addCommand(new RemoteDeleteCommand());
         addCommand(new SendCommand());
         addCommand(new SendContactsCommand());
         addCommand(new SendReactionCommand());

File: src/main/java/org/asamk/signal/util/IOUtils.java
Patch:
@@ -136,7 +136,7 @@ public static ServerSocketChannel bindSocket(final SocketAddress address) throws
             logger.info("Listening on socket: " + address);
             postBind(address);
         } catch (IOException e) {
-            throw new IOErrorException("Failed to bind socket: " + e.getMessage(), e);
+            throw new IOErrorException("Failed to bind socket " + address + ": " + e.getMessage(), e);
         }
         return serverChannel;
     }

File: lib/src/main/java/org/asamk/signal/manager/helper/SendHelper.java
Patch:
@@ -213,6 +213,7 @@ public List<SendMessageResult> sendGroupTypingMessage(
     public SendMessageResult resendMessage(
             final RecipientId recipientId, final long timestamp, final MessageSendLogEntry messageSendLogEntry
     ) {
+        logger.trace("Resending message {} to {}", timestamp, recipientId);
         if (messageSendLogEntry.groupId().isEmpty()) {
             return handleSendMessage(recipientId,
                     (messageSender, address, unidentifiedAccess) -> messageSender.resendContent(address,

File: src/main/java/org/asamk/Signal.java
Patch:
@@ -466,7 +466,7 @@ public String getName() {
         }
     }
 
-    @DBusProperty(name = "Id", type = Long.class, access = DBusProperty.Access.READ)
+    @DBusProperty(name = "Id", type = Integer.class, access = DBusProperty.Access.READ)
     @DBusProperty(name = "Name", type = String.class)
     @DBusProperty(name = "Created", type = String.class, access = DBusProperty.Access.READ)
     @DBusProperty(name = "LastSeen", type = String.class, access = DBusProperty.Access.READ)

File: src/main/java/org/asamk/signal/dbus/DbusManagerImpl.java
Patch:
@@ -169,7 +169,7 @@ public List<Device> getLinkedDevices() throws IOException {
         return signal.listDevices().stream().map(d -> {
             final var device = getRemoteObject(d.getObjectPath(),
                     Signal.Device.class).GetAll("org.asamk.Signal.Device");
-            return new Device(((Long) device.get("Id").getValue()).intValue(),
+            return new Device((Integer) device.get("Id").getValue(),
                     (String) device.get("Name").getValue(),
                     (long) device.get("Created").getValue(),
                     (long) device.get("LastSeen").getValue(),

File: src/main/java/org/asamk/signal/App.java
Patch:
@@ -69,6 +69,9 @@ static ArgumentParser buildArgumentParser() {
         parser.addArgument("--verbose")
                 .help("Raise log level and include lib signal logs. Specify multiple times for even more logs.")
                 .action(Arguments.count());
+        parser.addArgument("--log-file")
+                .type(File.class)
+                .help("Write log output to the given file. If --verbose is also given, the detailed logs will only be written to the log file.");
         parser.addArgument("-c", "--config")
                 .help("Set the path, where to store the config (Default: $XDG_DATA_HOME/signal-cli , $HOME/.local/share/signal-cli).");
 

File: lib/src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -67,6 +67,7 @@ static Manager init(
             throw new NotRegisteredException();
         }
 
+        account.initDatabase();
         final var serviceEnvironmentConfig = ServiceConfig.getServiceEnvironmentConfig(serviceEnvironment, userAgent);
 
         return new ManagerImpl(account, pathConfig, serviceEnvironmentConfig, userAgent);

File: lib/src/main/java/org/asamk/signal/manager/helper/IncomingMessageHandler.java
Patch:
@@ -127,7 +127,7 @@ public Pair<List<HandleAction>, Exception> handleEnvelope(
                     final var senderProfile = context.getProfileHelper().getRecipientProfile(sender);
                     final var selfProfile = context.getProfileHelper()
                             .getRecipientProfile(account.getSelfRecipientId());
-                    if (e.getSenderDevice() != account.getDeviceId()
+                    if ((!sender.equals(account.getSelfRecipientId()) || e.getSenderDevice() != account.getDeviceId())
                             && senderProfile != null
                             && senderProfile.getCapabilities().contains(Profile.Capability.senderKey)
                             && selfProfile != null

File: lib/src/main/java/org/asamk/signal/manager/api/MessageEnvelope.java
Patch:
@@ -816,7 +816,9 @@ public static MessageEnvelope from(
                     .orNull());
             call = Optional.ofNullable(content.getCallMessage().transform(Call::from).orNull());
         } else {
-            receipt = Optional.empty();
+            receipt = envelope.isReceipt() ? Optional.of(new Receipt(envelope.getServerReceivedTimestamp(),
+                    Receipt.Type.DELIVERY,
+                    List.of(envelope.getTimestamp()))) : Optional.empty();
             typing = Optional.empty();
             data = Optional.empty();
             sync = Optional.empty();

File: lib/src/main/java/org/asamk/signal/manager/helper/RecipientHelper.java
Patch:
@@ -105,7 +105,7 @@ public Map<String, ACI> getRegisteredUsers(final Set<String> numbers) throws IOE
                     .getRegisteredUsers(ServiceConfig.getIasKeyStore(),
                             numbers,
                             serviceEnvironmentConfig.getCdsMrenclave());
-        } catch (Quote.InvalidQuoteFormatException | UnauthenticatedQuoteException | SignatureException | UnauthenticatedResponseException | InvalidKeyException e) {
+        } catch (Quote.InvalidQuoteFormatException | UnauthenticatedQuoteException | SignatureException | UnauthenticatedResponseException | InvalidKeyException | NumberFormatException e) {
             throw new IOException(e);
         }
 

File: lib/src/main/java/org/asamk/signal/manager/RegistrationManagerImpl.java
Patch:
@@ -131,7 +131,7 @@ public void register(boolean voiceVerification, String captcha) throws IOExcepti
         }
         final ServiceResponse<RequestVerificationCodeResponse> response;
         if (voiceVerification) {
-            response = accountManager.requestVoiceVerificationCode(Utils.getDefaultLocale(),
+            response = accountManager.requestVoiceVerificationCode(Utils.getDefaultLocale(null),
                     Optional.fromNullable(captcha),
                     Optional.absent(),
                     Optional.absent());

File: lib/src/main/java/org/asamk/signal/manager/helper/ProfileHelper.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.Base64;
 import java.util.Date;
 import java.util.List;
+import java.util.Locale;
 import java.util.Objects;
 import java.util.Set;
 
@@ -199,7 +200,7 @@ private boolean isProfileRefreshRequired(final Profile profile) {
     }
 
     private SignalServiceProfile retrieveProfileSync(String username) throws IOException {
-        final var locale = Utils.getDefaultLocale();
+        final var locale = Utils.getDefaultLocale(Locale.US);
         return dependencies.getMessageReceiver().retrieveProfileByUsername(username, Optional.absent(), locale);
     }
 
@@ -319,7 +320,7 @@ private Single<ProfileAndCredential> retrieveProfile(
             SignalServiceProfile.RequestType requestType
     ) {
         final var profileService = dependencies.getProfileService();
-        final var locale = Utils.getDefaultLocale();
+        final var locale = Utils.getDefaultLocale(Locale.US);
 
         return profileService.getProfile(address, profileKey, unidentifiedAccess, requestType, locale).map(pair -> {
             var processor = new ProfileService.ProfileResponseProcessor(pair);

File: lib/src/main/java/org/asamk/signal/manager/util/Utils.java
Patch:
@@ -84,16 +84,16 @@ public static Fingerprint computeSafetyNumber(
                 theirIdentityKey);
     }
 
-    public static Locale getDefaultLocale() {
+    public static Locale getDefaultLocale(Locale fallback) {
         final var locale = Locale.getDefault();
         if (locale == null) {
-            return null;
+            return fallback;
         }
         try {
             Locale.LanguageRange.parse(locale.getLanguage() + "-" + locale.getCountry());
         } catch (IllegalArgumentException e) {
             logger.debug("Invalid locale, ignoring: {}", locale);
-            return null;
+            return fallback;
         }
 
         return locale;

File: lib/src/main/java/org/asamk/signal/manager/helper/SendHelper.java
Patch:
@@ -332,7 +332,7 @@ private List<SendMessageResult> sendGroupMessageInternal(
             allResults.addAll(results);
         }
         final var duration = Duration.ofMillis(System.currentTimeMillis() - startTime);
-        logger.debug("Sending took {} seconds", duration.toString());
+        logger.debug("Sending took {}", duration.toString());
         return allResults;
     }
 

File: lib/src/main/java/org/asamk/signal/manager/helper/IncomingMessageHandler.java
Patch:
@@ -119,6 +119,7 @@ public Pair<List<HandleAction>, Exception> handleEnvelope(
                 exception = new UntrustedIdentityException(account.getRecipientStore()
                         .resolveRecipientAddress(recipientId), e.getSenderDevice());
             } catch (ProtocolInvalidKeyIdException | ProtocolInvalidKeyException | ProtocolNoSessionException | ProtocolInvalidMessageException e) {
+                logger.debug("Failed to decrypt incoming message", e);
                 final var sender = account.getRecipientStore().resolveRecipient(e.getSender());
                 final var senderProfile = context.getProfileHelper().getRecipientProfile(sender);
                 final var selfProfile = context.getProfileHelper().getRecipientProfile(account.getSelfRecipientId());
@@ -138,6 +139,7 @@ public Pair<List<HandleAction>, Exception> handleEnvelope(
                 logger.debug("Dropping unidentified message from self.");
                 return new Pair<>(List.of(), null);
             } catch (Exception e) {
+                logger.debug("Failed to handle incoming message", e);
                 exception = e;
             }
         }

File: lib/src/main/java/org/asamk/signal/manager/storage/senderKeys/SenderKeyRecordStore.java
Patch:
@@ -181,7 +181,7 @@ private File getSenderKeyFile(Key key) {
         try {
             IOUtils.createPrivateDirectories(senderKeysPath);
         } catch (IOException e) {
-            throw new AssertionError("Failed to create sender keys path", e);
+            throw new AssertionError("Failed to create sender keys path: " + e.getMessage(), e);
         }
         return new File(senderKeysPath,
                 key.recipientId().id() + "_" + key.deviceId() + "_" + key.distributionId.toString());

File: lib/src/main/java/org/asamk/signal/manager/storage/senderKeys/SenderKeyRecordStore.java
Patch:
@@ -75,7 +75,9 @@ void deleteSenderKey(final RecipientId recipientId, final UUID distributionId) {
             cachedSenderKeys.clear();
             final var keys = getKeysLocked(recipientId);
             for (var key : keys) {
-                if (key.distributionId.equals(distributionId)) deleteSenderKeyLocked(key);
+                if (key.distributionId.equals(distributionId)) {
+                    deleteSenderKeyLocked(key);
+                }
             }
         }
     }

File: lib/src/main/java/org/asamk/signal/manager/storage/senderKeys/SenderKeySharedStore.java
Patch:
@@ -163,8 +163,9 @@ public void deleteAllFor(final RecipientId recipientId) {
 
     public void deleteAllFor(final DistributionId distributionId) {
         synchronized (sharedSenderKeys) {
-            sharedSenderKeys.remove(distributionId.asUuid());
-            saveLocked();
+            if (sharedSenderKeys.remove(distributionId.asUuid()) != null) {
+                saveLocked();
+            }
         }
     }
 

File: lib/src/main/java/org/asamk/signal/manager/util/Utils.java
Patch:
@@ -76,6 +76,9 @@ public static Fingerprint computeSafetyNumber(
 
     public static Locale getDefaultLocale() {
         final var locale = Locale.getDefault();
+        if (locale == null) {
+            return null;
+        }
         try {
             Locale.LanguageRange.parse(locale.getLanguage() + "-" + locale.getCountry());
         } catch (IllegalArgumentException e) {

File: src/main/java/org/asamk/signal/commands/SendCommand.java
Patch:
@@ -104,6 +104,7 @@ public void handleCommand(
 
         var messageText = ns.getString("message");
         if (messageText == null) {
+            logger.debug("Reading message from stdin...");
             try {
                 messageText = IOUtils.readAll(System.in, Charset.defaultCharset());
             } catch (IOException e) {

File: src/main/java/org/asamk/signal/App.java
Patch:
@@ -196,7 +196,7 @@ public void init() throws CommandException {
         }
 
         if (!(command instanceof LocalCommand)) {
-            throw new UserErrorException("Command only works via dbus");
+            throw new UserErrorException("Command only works in multi-account mode");
         }
 
         handleLocalCommand((LocalCommand) command,

File: lib/src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -532,7 +532,7 @@ private boolean loadLegacyStores(
             if (legacyRecipientStore != null) {
                 recipientStore.resolveRecipientsTrusted(legacyRecipientStore.getAddresses());
             }
-            recipientStore.resolveRecipientTrusted(getSelfAddress());
+            getSelfRecipientId();
             migrated = true;
         }
 

File: lib/src/main/java/org/asamk/signal/manager/groups/GroupUtils.java
Patch:
@@ -6,7 +6,7 @@
 import org.signal.zkgroup.InvalidInputException;
 import org.signal.zkgroup.groups.GroupMasterKey;
 import org.signal.zkgroup.groups.GroupSecretParams;
-import org.whispersystems.libsignal.kdf.HKDFv3;
+import org.whispersystems.libsignal.kdf.HKDF;
 import org.whispersystems.signalservice.api.messages.SignalServiceDataMessage;
 import org.whispersystems.signalservice.api.messages.SignalServiceGroup;
 import org.whispersystems.signalservice.api.messages.SignalServiceGroupContext;
@@ -57,7 +57,7 @@ public static GroupIdV2 getGroupIdV2(GroupIdV1 groupIdV1) {
 
     private static GroupMasterKey deriveV2MigrationMasterKey(GroupIdV1 groupIdV1) {
         try {
-            return new GroupMasterKey(new HKDFv3().deriveSecrets(groupIdV1.serialize(),
+            return new GroupMasterKey(HKDF.deriveSecrets(groupIdV1.serialize(),
                     "GV2 Migration".getBytes(),
                     GroupMasterKey.SIZE));
         } catch (InvalidInputException e) {

File: src/main/java/org/asamk/signal/dbus/DbusSignalImpl.java
Patch:
@@ -111,7 +111,7 @@ public String getSelfNumber() {
     @Override
     public void subscribeReceive() {
         if (dbusMessageHandler == null) {
-            dbusMessageHandler = new DbusReceiveMessageHandler(m, connection, objectPath);
+            dbusMessageHandler = new DbusReceiveMessageHandler(connection, objectPath);
             m.addReceiveHandler(dbusMessageHandler);
         }
         subscriberCount++;

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/RecipientStore.java
Patch:
@@ -309,9 +309,6 @@ private RecipientId resolveRecipient(RecipientAddress address, boolean isHighTru
         final Pair<RecipientId, Optional<RecipientId>> pair;
         synchronized (recipients) {
             pair = resolveRecipientLocked(address, isHighTrust);
-            if (pair.second().isPresent()) {
-                recipientsMerged.put(pair.second().get(), pair.first());
-            }
         }
 
         if (pair.second().isPresent()) {
@@ -378,6 +375,7 @@ private Pair<RecipientId, Optional<RecipientId>> resolveRecipientLocked(
         logger.debug("Got separate recipients for high trust number and uuid, need to merge them");
         updateRecipientAddressLocked(byUuid.get().getRecipientId(), address);
         mergeRecipientsLocked(byUuid.get().getRecipientId(), byNumber.get().getRecipientId());
+        recipientsMerged.put(byNumber.get().getRecipientId(), byUuid.get().getRecipientId());
         return new Pair<>(byUuid.get().getRecipientId(), byNumber.map(Recipient::getRecipientId));
     }
 

File: src/main/java/org/asamk/signal/dbus/DbusSignalImpl.java
Patch:
@@ -199,7 +199,7 @@ public long sendMessage(final String message, final List<String> attachments, fi
     @Override
     public long sendMessage(final String message, final List<String> attachments, final List<String> recipients) {
         try {
-            final var results = m.sendMessage(new Message(message, attachments, List.of()),
+            final var results = m.sendMessage(new Message(message, attachments, List.of(), Optional.empty()),
                     getSingleRecipientIdentifiers(recipients, m.getSelfNumber()).stream()
                             .map(RecipientIdentifier.class::cast)
                             .collect(Collectors.toSet()));
@@ -364,7 +364,7 @@ public long sendNoteToSelfMessage(
             final String message, final List<String> attachments
     ) throws Error.AttachmentInvalid, Error.Failure, Error.UntrustedIdentity {
         try {
-            final var results = m.sendMessage(new Message(message, attachments, List.of()),
+            final var results = m.sendMessage(new Message(message, attachments, List.of(), Optional.empty()),
                     Set.of(RecipientIdentifier.NoteToSelf.INSTANCE));
             checkSendMessageResults(results.timestamp(), results.results());
             return results.timestamp();
@@ -390,7 +390,7 @@ public void sendEndSessionMessage(final List<String> recipients) {
     @Override
     public long sendGroupMessage(final String message, final List<String> attachments, final byte[] groupId) {
         try {
-            var results = m.sendMessage(new Message(message, attachments, List.of()),
+            var results = m.sendMessage(new Message(message, attachments, List.of(), Optional.empty()),
                     Set.of(new RecipientIdentifier.Group(getGroupId(groupId))));
             checkSendMessageResults(results.timestamp(), results.results());
             return results.timestamp();

File: src/main/java/org/asamk/signal/util/CommandUtil.java
Patch:
@@ -93,7 +93,7 @@ public static RecipientIdentifier.Single getSingleRecipientIdentifier(
         try {
             return RecipientIdentifier.Single.fromString(recipientString, localNumber);
         } catch (InvalidNumberException e) {
-            throw new UserErrorException("Invalid phone number '" + recipientString + "': " + e.getMessage());
+            throw new UserErrorException("Invalid phone number '" + recipientString + "': " + e.getMessage(), e);
         }
     }
 }

File: src/main/java/org/asamk/signal/commands/SendCommand.java
Patch:
@@ -83,7 +83,9 @@ public void handleCommand(
             }
 
             try {
-                m.sendEndSessionMessage(singleRecipients);
+                final var results = m.sendEndSessionMessage(singleRecipients);
+                outputResult(outputWriter, results.timestamp());
+                ErrorUtils.handleSendMessageResults(results.results());
                 return;
             } catch (IOException e) {
                 throw new UnexpectedErrorException("Failed to send message: " + e.getMessage() + " (" + e.getClass()

File: lib/src/main/java/org/asamk/signal/manager/helper/ProfileHelper.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.Date;
 import java.util.HashSet;
 import java.util.List;
-import java.util.Locale;
 import java.util.Objects;
 import java.util.Set;
 
@@ -229,7 +228,7 @@ private SignalServiceProfile retrieveEncryptedProfile(RecipientId recipientId) {
     }
 
     private SignalServiceProfile retrieveProfileSync(String username) throws IOException {
-        final var locale = Locale.getDefault();
+        final var locale = Utils.getDefaultLocale();
         return dependencies.getMessageReceiver().retrieveProfileByUsername(username, Optional.absent(), locale);
     }
 
@@ -310,7 +309,7 @@ private Single<ProfileAndCredential> retrieveProfile(
         var profileService = dependencies.getProfileService();
 
         Single<ServiceResponse<ProfileAndCredential>> responseSingle;
-        final var locale = Locale.getDefault();
+        final var locale = Utils.getDefaultLocale();
         try {
             responseSingle = profileService.getProfile(address, profileKey, unidentifiedAccess, requestType, locale);
         } catch (NoClassDefFoundError e) {

File: src/main/java/org/asamk/signal/DbusReceiveMessageHandler.java
Patch:
@@ -145,7 +145,7 @@ private HashMap<String, Variant<?>> getMessageExtras(MessageEnvelope.Data messag
         }
         if (message.remoteDeleteId().isPresent()) {
             extras.put("remoteDelete",
-                    new Variant<>(Map.of("timestamp", new Variant<>(message.remoteDeleteId())), "a{sv}"));
+                    new Variant<>(Map.of("timestamp", new Variant<>(message.remoteDeleteId().get())), "a{sv}"));
         }
         if (message.sticker().isPresent()) {
             final var sticker = message.sticker().get();

File: src/main/java/org/asamk/signal/commands/JsonRpcDispatcherCommand.java
Patch:
@@ -54,6 +54,7 @@ public void handleCommand(
 
         final var handler = new SignalJsonRpcDispatcherHandler(m, jsonOutputWriter, lineSupplier);
         handler.handleConnection();
+    }
 
     private Supplier<String> getLineSupplier(final Reader reader) {
         final var bufferedReader = new BufferedReader(reader);

File: lib/src/main/java/org/asamk/signal/manager/ManagerImpl.java
Patch:
@@ -956,12 +956,12 @@ private void startReceiveThreadIfRequired() {
     public void removeReceiveHandler(final ReceiveMessageHandler handler) {
         final Thread thread;
         synchronized (messageHandlers) {
-            thread = receiveThread;
-            receiveThread = null;
             messageHandlers.remove(handler);
             if (!messageHandlers.isEmpty() || isReceivingSynchronous) {
                 return;
             }
+            thread = receiveThread;
+            receiveThread = null;
         }
 
         stopReceiveThread(thread);

File: lib/src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -845,7 +845,7 @@ public SignalServiceAddress getSelfAddress() {
     }
 
     public RecipientId getSelfRecipientId() {
-        return recipientStore.resolveRecipientTrusted(new RecipientAddress(aci.uuid(), username));
+        return recipientStore.resolveRecipientTrusted(new RecipientAddress(aci == null ? null : aci.uuid(), username));
     }
 
     public String getEncryptedDeviceName() {

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/RecipientStore.java
Patch:
@@ -139,7 +139,7 @@ public Recipient getRecipient(RecipientId recipientId) {
 
     @Override
     public RecipientId resolveRecipient(ACI aci) {
-        return resolveRecipient(new RecipientAddress(aci.uuid()), false);
+        return resolveRecipient(new RecipientAddress(aci == null ? null : aci.uuid()), false);
     }
 
     @Override

File: src/main/java/org/asamk/signal/commands/DaemonCommand.java
Patch:
@@ -69,6 +69,7 @@ public void handleCommand(
             var t = run(conn, objectPath, m, outputWriter);
 
             conn.requestBusName(DbusConfig.getBusname());
+            logger.info("DBus daemon running in single-user mode for " + m.getSelfNumber());
 
             try {
                 t.join();
@@ -114,6 +115,7 @@ public void handleCommand(
             }
 
             conn.requestBusName(DbusConfig.getBusname());
+            logger.info("DBus daemon running in mulit-account mode");
 
             signalControl.run();
         } catch (DBusException | IOException e) {
@@ -130,7 +132,7 @@ private Thread run(
         final var initThread = new Thread(signal::initObjects);
         initThread.start();
 
-        logger.info("Exported dbus object: " + objectPath);
+        logger.debug("Exported dbus object: " + objectPath);
 
         final var handler = outputWriter instanceof JsonWriter ? new JsonReceiveMessageHandler(m,
                 (JsonWriter) outputWriter) : new ReceiveMessageHandler(m, (PlainTextWriter) outputWriter);

File: src/main/java/org/asamk/Signal.java
Patch:
@@ -1,6 +1,5 @@
 package org.asamk;
 
-import org.asamk.signal.commands.exceptions.IOErrorException;
 import org.freedesktop.dbus.DBusPath;
 import org.freedesktop.dbus.Struct;
 import org.freedesktop.dbus.annotations.DBusProperty;
@@ -166,7 +165,7 @@ void updateProfile(
 
     String uploadStickerPack(String stickerPackPath) throws Error.Failure;
 
-    void submitRateLimitChallenge(String challenge, String captchaString) throws IOErrorException;
+    void submitRateLimitChallenge(String challenge, String captchaString) throws Error.Failure;
 
     class MessageReceivedV2 extends DBusSignal {
 

File: src/main/java/org/asamk/signal/dbus/DbusSignalImpl.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.asamk.Signal;
 import org.asamk.signal.BaseConfig;
-import org.asamk.signal.commands.exceptions.IOErrorException;
 import org.asamk.signal.manager.AttachmentInvalidException;
 import org.asamk.signal.manager.Manager;
 import org.asamk.signal.manager.NotMasterDeviceException;
@@ -90,13 +89,13 @@ public String getSelfNumber() {
     }
 
     @Override
-    public void submitRateLimitChallenge(String challenge, String captchaString) throws IOErrorException {
+    public void submitRateLimitChallenge(String challenge, String captchaString) {
         final var captcha = captchaString == null ? null : captchaString.replace("signalcaptcha://", "");
 
         try {
             m.submitRateLimitRecaptchaChallenge(challenge, captcha);
         } catch (IOException e) {
-            throw new IOErrorException("Submit challenge error: " + e.getMessage(), e);
+            throw new Error.Failure("Submit challenge error: " + e.getMessage());
         }
 
     }

File: src/main/java/org/asamk/signal/dbus/DbusSignalImpl.java
Patch:
@@ -158,7 +158,7 @@ public long sendMessage(final String message, final List<String> attachments, fi
         } catch (AttachmentInvalidException e) {
             throw new Error.AttachmentInvalid(e.getMessage());
         } catch (IOException e) {
-            throw new Error.Failure(e.getMessage());
+            throw new Error.Failure(e);
         } catch (GroupNotFoundException | NotAGroupMemberException | GroupSendingNotAllowedException e) {
             throw new Error.GroupNotFound(e.getMessage());
         }

File: lib/src/main/java/org/asamk/signal/manager/storage/senderKeys/SenderKeyRecordStore.java
Patch:
@@ -95,7 +95,7 @@ public void mergeRecipients(RecipientId recipientId, RecipientId toBeMergedRecip
                 return;
             }
 
-            logger.debug("Only to be merged recipient had sender keys, re-assigning to the new recipient.");
+            logger.debug("To be merged recipient had sender keys, re-assigning to the new recipient.");
             for (var key : keys) {
                 final var toBeMergedSenderKey = loadSenderKeyLocked(key);
                 deleteSenderKeyLocked(key);
@@ -108,7 +108,7 @@ public void mergeRecipients(RecipientId recipientId, RecipientId toBeMergedRecip
                 if (senderKeyRecord != null) {
                     continue;
                 }
-                storeSenderKeyLocked(newKey, senderKeyRecord);
+                storeSenderKeyLocked(newKey, toBeMergedSenderKey);
             }
         }
     }

File: lib/src/main/java/org/asamk/signal/manager/util/MessageCacheUtils.java
Patch:
@@ -59,7 +59,7 @@ public static SignalServiceEnvelope loadEnvelope(File file) throws IOException {
             if (version >= 4) {
                 serverDeliveredTimestamp = in.readLong();
             }
-            Optional<SignalServiceAddress> addressOptional = sourceUuid == null && source.isEmpty()
+            Optional<SignalServiceAddress> addressOptional = sourceUuid == null
                     ? Optional.absent()
                     : Optional.of(new SignalServiceAddress(sourceUuid, source));
             return new SignalServiceEnvelope(type,

File: src/main/java/org/asamk/signal/commands/JsonRpcLocalCommand.java
Patch:
@@ -32,7 +32,7 @@ default List<OutputType> getSupportedOutputTypes() {
     }
 
     /**
-     * Namepace implementation, that defaults booleans to false and converts camel case keys to dashed strings
+     * Namespace implementation, that has plural handling for list arguments and converts camel case keys to dashed strings
      */
     final class JsonRpcNamespace extends Namespace {
 

File: lib/src/main/java/org/asamk/signal/manager/ManagerImpl.java
Patch:
@@ -1081,11 +1081,12 @@ private Identity toIdentity(final IdentityInfo identityInfo) {
         }
 
         final var address = account.getRecipientStore().resolveRecipientAddress(identityInfo.getRecipientId());
+        final var scannableFingerprint = identityHelper.computeSafetyNumberForScanning(identityInfo.getRecipientId(),
+                identityInfo.getIdentityKey());
         return new Identity(address,
                 identityInfo.getIdentityKey(),
                 identityHelper.computeSafetyNumber(identityInfo.getRecipientId(), identityInfo.getIdentityKey()),
-                identityHelper.computeSafetyNumberForScanning(identityInfo.getRecipientId(),
-                        identityInfo.getIdentityKey()).getSerialized(),
+                scannableFingerprint == null ? null : scannableFingerprint.getSerialized(),
                 identityInfo.getTrustLevel(),
                 identityInfo.getDateAdded());
     }

File: lib/src/main/java/org/asamk/signal/manager/SignalWebSocketHealthMonitor.java
Patch:
@@ -101,6 +101,7 @@ public void onMessageError(int status, boolean isIdentifiedWebSocket) {
             if (healthState.mismatchErrorTracker.addSample(System.currentTimeMillis())) {
                 logger.warn("Received too many mismatch device errors, forcing new websockets.");
                 signalWebSocket.forceNewWebSockets();
+                signalWebSocket.connect();
             }
         }
     }
@@ -146,6 +147,7 @@ public void run() {
                                     + " needed by: "
                                     + keepAliveRequiredSinceTime);
                             signalWebSocket.forceNewWebSockets();
+                            signalWebSocket.connect();
                         } else {
                             signalWebSocket.sendKeepAlive();
                         }

File: src/main/java/org/asamk/Signal.java
Patch:
@@ -262,7 +262,7 @@ public List<String> getAttachments() {
         }
     }
 
-    @DBusProperty(name = "Id", type = Integer.class, access = DBusProperty.Access.READ)
+    @DBusProperty(name = "Id", type = Long.class, access = DBusProperty.Access.READ)
     @DBusProperty(name = "Name", type = String.class)
     @DBusProperty(name = "Created", type = String.class, access = DBusProperty.Access.READ)
     @DBusProperty(name = "LastSeen", type = String.class, access = DBusProperty.Access.READ)

File: lib/src/main/java/org/asamk/signal/manager/helper/IncomingMessageHandler.java
Patch:
@@ -416,7 +416,7 @@ private boolean isNotAllowedToSendToGroup(SignalServiceEnvelope envelope, Signal
         }
 
         final var recipientId = recipientResolver.resolveRecipient(source);
-        if (!group.isMember(recipientId)) {
+        if (!group.isMember(recipientId) && !(group.isPendingMember(recipientId) && message.isGroupV2Update())) {
             return true;
         }
 

File: src/main/java/org/asamk/signal/Main.java
Patch:
@@ -56,6 +56,9 @@ public static void main(String[] args) {
                 e.getCause().printStackTrace();
             }
             status = getStatusForError(e);
+        } catch (Throwable e) {
+            e.printStackTrace();
+            status = 2;
         }
         System.exit(status);
     }

File: src/main/java/org/asamk/signal/commands/GetUserStatusCommand.java
Patch:
@@ -61,7 +61,8 @@ public void handleCommand(
             final var writer = (PlainTextWriter) outputWriter;
 
             for (var entry : registered.entrySet()) {
-                writer.println("{}: {}", entry.getKey(), entry.getValue());
+                final var uuid = entry.getValue().second();
+                writer.println("{}: {}", entry.getKey(), uuid != null);
             }
         }
     }

File: lib/src/main/java/org/asamk/signal/manager/helper/AttachmentHelper.java
Patch:
@@ -88,9 +88,9 @@ public void retrieveAttachment(
             SignalServiceAttachment attachment, AttachmentHandler consumer
     ) throws IOException {
         if (attachment.isStream()) {
-            try (var input = attachment.asStream().getInputStream()) {
-                consumer.handle(input);
-            }
+            var input = attachment.asStream().getInputStream();
+            // don't close input stream here, it might be reused later (e.g. with contact sync messages ...)
+            consumer.handle(input);
             return;
         }
 

File: lib/src/main/java/org/asamk/signal/manager/helper/SyncHelper.java
Patch:
@@ -215,7 +215,7 @@ public void sendVerifiedMessage(
         sendHelper.sendSyncMessage(SignalServiceSyncMessage.forVerified(verifiedMessage));
     }
 
-    public void handleSyncDeviceContacts(final InputStream input) {
+    public void handleSyncDeviceContacts(final InputStream input) throws IOException {
         final var s = new DeviceContactsInputStream(input);
         DeviceContact c;
         while (true) {
@@ -226,8 +226,7 @@ public void handleSyncDeviceContacts(final InputStream input) {
                     logger.warn("Sync contacts contained invalid contact, ignoring: {}", e.getMessage());
                     continue;
                 } else {
-                    logger.warn("Failed to read sync contacts", e);
-                    break;
+                    throw e;
                 }
             }
             if (c == null) {

File: lib/src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -21,6 +21,7 @@
 import org.asamk.signal.manager.storage.recipients.Contact;
 import org.asamk.signal.manager.storage.recipients.LegacyRecipientStore;
 import org.asamk.signal.manager.storage.recipients.Profile;
+import org.asamk.signal.manager.storage.recipients.RecipientAddress;
 import org.asamk.signal.manager.storage.recipients.RecipientId;
 import org.asamk.signal.manager.storage.recipients.RecipientStore;
 import org.asamk.signal.manager.storage.sessions.SessionStore;
@@ -789,7 +790,7 @@ public SignalServiceAddress getSelfAddress() {
     }
 
     public RecipientId getSelfRecipientId() {
-        return recipientStore.resolveRecipientTrusted(getSelfAddress());
+        return recipientStore.resolveRecipientTrusted(new RecipientAddress(uuid, username));
     }
 
     public String getEncryptedDeviceName() {

File: src/main/java/org/asamk/signal/BaseConfig.java
Patch:
@@ -5,7 +5,7 @@ public class BaseConfig {
     public final static String PROJECT_NAME = BaseConfig.class.getPackage().getImplementationTitle();
     public final static String PROJECT_VERSION = BaseConfig.class.getPackage().getImplementationVersion();
 
-    final static String USER_AGENT_SIGNAL_ANDROID = "Signal-Android/5.12.4";
+    final static String USER_AGENT_SIGNAL_ANDROID = "Signal-Android/5.22.3";
     final static String USER_AGENT_SIGNAL_CLI = PROJECT_NAME == null
             ? "signal-cli"
             : PROJECT_NAME + "/" + PROJECT_VERSION;

File: src/main/java/org/asamk/signal/JsonReceiveMessageHandler.java
Patch:
@@ -28,8 +28,9 @@ public void handleMessage(SignalServiceEnvelope envelope, SignalServiceContent c
         if (exception != null) {
             object.put("error", new JsonError(exception));
         }
+
         if (envelope != null) {
-            object.put("envelope", new JsonMessageEnvelope(envelope, content, m));
+            object.put("envelope", new JsonMessageEnvelope(envelope, content, exception, m));
         }
 
         jsonWriter.write(object);

File: lib/src/main/java/org/asamk/signal/manager/HandleAction.java
Patch:
@@ -4,6 +4,7 @@
 import org.asamk.signal.manager.storage.recipients.RecipientId;
 import org.whispersystems.signalservice.api.push.SignalServiceAddress;
 
+import java.util.List;
 import java.util.Objects;
 
 interface HandleAction {
@@ -23,7 +24,7 @@ public SendReceiptAction(final SignalServiceAddress address, final long timestam
 
     @Override
     public void execute(Manager m) throws Throwable {
-        m.sendReceipt(address, timestamp);
+        m.sendDeliveryReceipt(address, List.of(timestamp));
     }
 
     @Override

File: src/main/java/org/asamk/signal/commands/Commands.java
Patch:
@@ -30,6 +30,7 @@ public class Commands {
         addCommand(new SendCommand());
         addCommand(new SendContactsCommand());
         addCommand(new SendReactionCommand());
+        addCommand(new SendReceiptCommand());
         addCommand(new SendSyncRequestCommand());
         addCommand(new SendTypingCommand());
         addCommand(new SetPinCommand());

File: src/main/java/org/asamk/signal/commands/JsonRpcLocalCommand.java
Patch:
@@ -13,9 +13,7 @@
 import java.util.Map;
 import java.util.Set;
 
-public interface JsonRpcLocalCommand extends JsonRpcCommand<Map<String, Object>> {
-
-    void handleCommand(Namespace ns, Manager m) throws CommandException;
+public interface JsonRpcLocalCommand extends JsonRpcCommand<Map<String, Object>>, LocalCommand {
 
     default TypeReference<Map<String, Object>> getRequestType() {
         return new TypeReference<>() {

File: src/main/java/org/asamk/signal/commands/JsonRpcDispatcherCommand.java
Patch:
@@ -31,6 +31,7 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 
@@ -129,7 +130,7 @@ private JsonNode handleRequest(
                     null));
         }
 
-        Object output = result[0] == null ? new Object() : result[0];
+        Object output = result[0] == null ? Map.of() : result[0];
         return objectMapper.valueToTree(output);
     }
 

File: src/main/java/org/asamk/signal/commands/UploadStickerPackCommand.java
Patch:
@@ -35,7 +35,7 @@ public void handleCommand(final Namespace ns, final Manager m) throws CommandExc
             var url = m.uploadStickerPack(path);
             writer.println("{}", url);
         } catch (IOException e) {
-            throw new IOErrorException("Upload error: " + e.getMessage());
+            throw new IOErrorException("Upload error (maybe image size too large):" + e.getMessage());
         } catch (StickerPackInvalidException e) {
             throw new UserErrorException("Invalid sticker pack: " + e.getMessage());
         }

File: src/main/java/org/asamk/signal/commands/RegisterCommand.java
Patch:
@@ -27,7 +27,8 @@ public void attachToSubparser(final Subparser subparser) {
     @Override
     public void handleCommand(final Namespace ns, final RegistrationManager m) throws CommandException {
         final boolean voiceVerification = ns.getBoolean("voice");
-        final var captcha = ns.getString("captcha").replace("signalcaptcha://", "");
+        final var captchaString = ns.getString("captcha");
+        final var captcha = captchaString == null ? null : captchaString.replace("signalcaptcha://", "");
 
         try {
             m.register(voiceVerification, captcha);

File: lib/src/main/java/org/asamk/signal/manager/JsonStickerPack.java
Patch:
@@ -25,5 +25,8 @@ public static class JsonSticker {
 
         @JsonProperty
         public String file;
+
+        @JsonProperty
+        public String contentType;
     }
 }

File: src/main/java/org/asamk/signal/commands/Commands.java
Patch:
@@ -28,6 +28,7 @@ public class Commands {
         addCommand("sendContacts", new SendContactsCommand());
         addCommand("sendReaction", new SendReactionCommand());
         addCommand("sendSyncRequest", new SendSyncRequestCommand());
+        addCommand("sendTyping", new SendTypingCommand());
         addCommand("setPin", new SetPinCommand());
         addCommand("trust", new TrustCommand());
         addCommand("unblock", new UnblockCommand());

File: src/main/java/org/asamk/signal/commands/AddDeviceCommand.java
Patch:
@@ -36,7 +36,7 @@ public void handleCommand(final Namespace ns, final Manager m) throws CommandExc
             logger.error("Add device link failed", e);
             throw new IOErrorException("Add device link failed");
         } catch (URISyntaxException e) {
-            throw new UserErrorException("Device link uri has invalid format: {}" + e.getMessage());
+            throw new UserErrorException("Device link uri has invalid format: " + e.getMessage());
         } catch (InvalidKeyException e) {
             logger.error("Add device link failed", e);
             throw new UnexpectedErrorException("Add device link failed.");

File: src/main/java/org/asamk/signal/App.java
Patch:
@@ -70,7 +70,7 @@ static ArgumentParser buildArgumentParser() {
                 .setDefault(OutputType.PLAIN_TEXT);
 
         parser.addArgument("--service-environment")
-                .help("Choose the server environment to use, SANDBOX or LIVE.")
+                .help("Choose the server environment to use.")
                 .type(Arguments.enumStringType(ServiceEnvironmentCli.class))
                 .setDefault(ServiceEnvironmentCli.LIVE);
 

File: src/main/java/org/asamk/signal/commands/AddDeviceCommand.java
Patch:
@@ -22,6 +22,7 @@ public class AddDeviceCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Link another device to this device. Only works, if this is the master device.");
         subparser.addArgument("--uri")
                 .required(true)
                 .help("Specify the uri contained in the QR code shown by the new device.");

File: src/main/java/org/asamk/signal/commands/BlockCommand.java
Patch:
@@ -20,9 +20,9 @@ public class BlockCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Block the given contacts or groups (no messages will be received)");
         subparser.addArgument("contact").help("Contact number").nargs("*");
         subparser.addArgument("-g", "--group").help("Group ID").nargs("*");
-        subparser.help("Block the given contacts or groups (no messages will be received)");
     }
 
     @Override

File: src/main/java/org/asamk/signal/commands/Commands.java
Patch:
@@ -1,11 +1,11 @@
 package org.asamk.signal.commands;
 
-import java.util.HashMap;
 import java.util.Map;
+import java.util.TreeMap;
 
 public class Commands {
 
-    private static final Map<String, Command> commands = new HashMap<>();
+    private static final Map<String, Command> commands = new TreeMap<>();
 
     static {
         addCommand("addDevice", new AddDeviceCommand());

File: src/main/java/org/asamk/signal/commands/DaemonCommand.java
Patch:
@@ -29,6 +29,7 @@ public class DaemonCommand implements MultiLocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Run in daemon mode and provide an experimental dbus interface.");
         subparser.addArgument("--system")
                 .action(Arguments.storeTrue())
                 .help("Use DBus system bus instead of user bus.");

File: src/main/java/org/asamk/signal/commands/GetUserStatusCommand.java
Patch:
@@ -25,8 +25,8 @@ public class GetUserStatusCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
-        subparser.addArgument("number").help("Phone number").nargs("+");
         subparser.help("Check if the specified phone number/s have been registered");
+        subparser.addArgument("number").help("Phone number").nargs("+");
         subparser.addArgument("--json")
                 .help("WARNING: This parameter is now deprecated! Please use the global \"--output=json\" option instead.\n\nOutput received messages in json format, one json object per line.")
                 .action(Arguments.storeTrue());

File: src/main/java/org/asamk/signal/commands/JoinGroupCommand.java
Patch:
@@ -22,6 +22,7 @@ public class JoinGroupCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Join a group via an invitation link.");
         subparser.addArgument("--uri").required(true).help("Specify the uri with the group invitation link.");
     }
 

File: src/main/java/org/asamk/signal/commands/LinkCommand.java
Patch:
@@ -21,6 +21,7 @@ public class LinkCommand implements ProvisioningCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Link to an existing device, instead of registering a new number.");
         subparser.addArgument("-n", "--name").help("Specify a name to describe this new device.");
     }
 

File: src/main/java/org/asamk/signal/commands/ListContactsCommand.java
Patch:
@@ -12,6 +12,7 @@ public class ListContactsCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Show a list of known contacts with names.");
     }
 
     @Override

File: src/main/java/org/asamk/signal/commands/ListDevicesCommand.java
Patch:
@@ -21,6 +21,7 @@ public class ListDevicesCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Show a list of linked devices.");
     }
 
     @Override

File: src/main/java/org/asamk/signal/commands/ListGroupsCommand.java
Patch:
@@ -60,11 +60,10 @@ private static void printGroupPlainText(
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("List group information including names, ids, active status, blocked status and members");
         subparser.addArgument("-d", "--detailed")
                 .action(Arguments.storeTrue())
                 .help("List the members and group invite links of each group. If output=json, then this is always set");
-
-        subparser.help("List group information including names, ids, active status, blocked status and members");
     }
 
     @Override

File: src/main/java/org/asamk/signal/commands/ListIdentitiesCommand.java
Patch:
@@ -35,6 +35,7 @@ private static void printIdentityFingerprint(PlainTextWriter writer, Manager m,
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("List all known identity keys and their trust status, fingerprint and safety number.");
         subparser.addArgument("-n", "--number").help("Only show identity keys for the given phone number.");
     }
 

File: src/main/java/org/asamk/signal/commands/QuitGroupCommand.java
Patch:
@@ -26,6 +26,7 @@ public class QuitGroupCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Send a quit group message to all group members and remove self from member list.");
         subparser.addArgument("-g", "--group").required(true).help("Specify the recipient group ID.");
         subparser.addArgument("--admin")
                 .nargs("*")

File: src/main/java/org/asamk/signal/commands/ReceiveCommand.java
Patch:
@@ -33,6 +33,7 @@ public class ReceiveCommand implements ExtendedDbusCommand, LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Query the server for new messages.");
         subparser.addArgument("-t", "--timeout")
                 .type(double.class)
                 .setDefault(3.0)

File: src/main/java/org/asamk/signal/commands/RegisterCommand.java
Patch:
@@ -16,8 +16,9 @@ public class RegisterCommand implements RegistrationCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Register a phone number with SMS or voice verification.");
         subparser.addArgument("-v", "--voice")
-                .help("The verification should be done over voice, not sms.")
+                .help("The verification should be done over voice, not SMS.")
                 .action(Arguments.storeTrue());
         subparser.addArgument("--captcha")
                 .help("The captcha token, required if registration failed with a captcha required error.");

File: src/main/java/org/asamk/signal/commands/RemoveDeviceCommand.java
Patch:
@@ -13,6 +13,7 @@ public class RemoveDeviceCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Remove a linked device.");
         subparser.addArgument("-d", "--device-id", "--deviceId")
                 .type(int.class)
                 .required(true)

File: src/main/java/org/asamk/signal/commands/RemovePinCommand.java
Patch:
@@ -16,6 +16,7 @@ public class RemovePinCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Remove the registration lock pin.");
     }
 
     @Override

File: src/main/java/org/asamk/signal/commands/SendCommand.java
Patch:
@@ -28,6 +28,7 @@ public class SendCommand implements DbusCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Send a message to another user or group.");
         subparser.addArgument("recipient").help("Specify the recipients' phone number.").nargs("*");
         final var mutuallyExclusiveGroup = subparser.addMutuallyExclusiveGroup();
         mutuallyExclusiveGroup.addArgument("-g", "--group").help("Specify the recipient group ID.");

File: src/main/java/org/asamk/signal/commands/SetPinCommand.java
Patch:
@@ -16,6 +16,7 @@ public class SetPinCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Set a registration lock pin, to prevent others from registering this number.");
         subparser.addArgument("registrationLockPin")
                 .help("The registration lock PIN, that will be required for new registrations (resets after 7 days of inactivity)");
     }

File: src/main/java/org/asamk/signal/commands/TrustCommand.java
Patch:
@@ -16,6 +16,7 @@ public class TrustCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Set the trust level of a given number.");
         subparser.addArgument("number").help("Specify the phone number, for which to set the trust.").required(true);
         var mutTrust = subparser.addMutuallyExclusiveGroup();
         mutTrust.addArgument("-a", "--trust-all-known-keys")

File: src/main/java/org/asamk/signal/commands/UnblockCommand.java
Patch:
@@ -20,9 +20,9 @@ public class UnblockCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Unblock the given contacts or groups (messages will be received again)");
         subparser.addArgument("contact").help("Contact number").nargs("*");
         subparser.addArgument("-g", "--group").help("Group ID").nargs("*");
-        subparser.help("Unblock the given contacts or groups (messages will be received again)");
     }
 
     @Override

File: src/main/java/org/asamk/signal/commands/UpdateContactCommand.java
Patch:
@@ -16,13 +16,13 @@ public class UpdateContactCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Update the details of a given contact");
         subparser.addArgument("number").help("Contact number");
         subparser.addArgument("-n", "--name").required(true).help("New contact name");
         subparser.addArgument("-e", "--expiration")
                 .required(false)
                 .type(int.class)
                 .help("Set expiration time of messages (seconds)");
-        subparser.help("Update the details of a given contact");
     }
 
     @Override

File: src/main/java/org/asamk/signal/commands/UpdateGroupCommand.java
Patch:
@@ -36,6 +36,7 @@ public class UpdateGroupCommand implements DbusCommand, LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Create or update a group.");
         subparser.addArgument("-g", "--group").help("Specify the recipient group ID.");
         subparser.addArgument("-n", "--name").help("Specify the new group name.");
         subparser.addArgument("-d", "--description").help("Specify the new group description.");

File: src/main/java/org/asamk/signal/commands/UpdateProfileCommand.java
Patch:
@@ -16,6 +16,7 @@ public class UpdateProfileCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Set a name, about and avatar image for the user profile");
         subparser.addArgument("--given-name", "--name").help("New profile (given) name");
         subparser.addArgument("--family-name").help("New profile family name (optional)");
         subparser.addArgument("--about").help("New profile about text");
@@ -24,8 +25,6 @@ public void attachToSubparser(final Subparser subparser) {
         final var avatarOptions = subparser.addMutuallyExclusiveGroup();
         avatarOptions.addArgument("--avatar").help("Path to new profile avatar");
         avatarOptions.addArgument("--remove-avatar").action(Arguments.storeTrue());
-
-        subparser.help("Set a name, about and avatar image for the user profile");
     }
 
     @Override

File: src/main/java/org/asamk/signal/commands/UploadStickerPackCommand.java
Patch:
@@ -21,6 +21,7 @@ public class UploadStickerPackCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Upload a new sticker pack, consisting of a manifest file and the stickers images.");
         subparser.addArgument("path")
                 .help("The path of the manifest.json or a zip file containing the sticker pack you wish to upload.");
     }

File: src/main/java/org/asamk/signal/commands/VerifyCommand.java
Patch:
@@ -18,6 +18,7 @@ public class VerifyCommand implements RegistrationCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
+        subparser.help("Verify the number using the code received via SMS or voice.");
         subparser.addArgument("verificationCode").help("The verification code you received via sms or voice call.");
         subparser.addArgument("-p", "--pin").help("The registration lock PIN, that was set by the user (Optional)");
     }

File: src/main/java/org/asamk/signal/commands/RemoveDeviceCommand.java
Patch:
@@ -13,7 +13,7 @@ public class RemoveDeviceCommand implements LocalCommand {
 
     @Override
     public void attachToSubparser(final Subparser subparser) {
-        subparser.addArgument("-d", "--deviceId")
+        subparser.addArgument("-d", "--device-id", "--deviceId")
                 .type(int.class)
                 .required(true)
                 .help("Specify the device you want to remove. Use listDevices to see the deviceIds.");
@@ -22,7 +22,7 @@ public void attachToSubparser(final Subparser subparser) {
     @Override
     public void handleCommand(final Namespace ns, final Manager m) throws CommandException {
         try {
-            int deviceId = ns.getInt("deviceId");
+            int deviceId = ns.getInt("device-id");
             m.removeLinkedDevices(deviceId);
         } catch (IOException e) {
             throw new IOErrorException("Error while removing device: " + e.getMessage());

File: src/main/java/org/asamk/signal/commands/SendCommand.java
Patch:
@@ -58,7 +58,7 @@ public void handleCommand(final Namespace ns, final Signal signal) throws Comman
         }
         if (!noRecipients && isNoteToSelf) {
             throw new UserErrorException(
-                    "You cannot specify recipients by phone number and not to self at the same time");
+                    "You cannot specify recipients by phone number and note to self at the same time");
         }
 
         if (isEndSession) {

File: lib/src/main/java/org/asamk/signal/manager/RegistrationManager.java
Patch:
@@ -124,7 +124,7 @@ public void register(boolean voiceVerification, String captcha) throws IOExcepti
 
     public Manager verifyAccount(
             String verificationCode, String pin
-    ) throws IOException, KeyBackupSystemNoDataException, KeyBackupServicePinException {
+    ) throws IOException, LockedException, KeyBackupSystemNoDataException, KeyBackupServicePinException {
         verificationCode = verificationCode.replace("-", "");
         VerifyAccountResponse response;
         MasterKey masterKey;

File: lib/src/main/java/org/asamk/signal/manager/helper/PinHelper.java
Patch:
@@ -53,7 +53,7 @@ private KbsPinData getRegistrationLockData(
     ) throws IOException, KeyBackupSystemNoDataException, KeyBackupServicePinException {
         var tokenResponse = keyBackupService.getToken(basicStorageCredentials);
         if (tokenResponse == null || tokenResponse.getTries() == 0) {
-            throw new IOException("KBS Account locked");
+            throw new IOException("KBS Account locked, maximum pin attempts reached.");
         }
 
         var registrationLockData = restoreMasterKey(pin, basicStorageCredentials, tokenResponse);

File: lib/src/main/java/org/asamk/signal/manager/storage/recipients/RecipientStore.java
Patch:
@@ -136,7 +136,7 @@ public Recipient getRecipient(RecipientId recipientId) {
 
     @Deprecated
     public SignalServiceAddress resolveServiceAddress(SignalServiceAddress address) {
-        return resolveServiceAddress(resolveRecipient(address, true));
+        return resolveServiceAddress(resolveRecipient(address, false));
     }
 
     public RecipientId resolveRecipient(UUID uuid) {
@@ -331,9 +331,8 @@ private RecipientId addNewRecipientLocked(final SignalServiceAddress serviceAddr
     private void updateRecipientAddressLocked(
             final RecipientId recipientId, final SignalServiceAddress address
     ) {
-        final var nextRecipientId = nextIdLocked();
         final var recipient = recipients.get(recipientId);
-        storeRecipientLocked(nextRecipientId, Recipient.newBuilder(recipient).withAddress(address).build());
+        storeRecipientLocked(recipientId, Recipient.newBuilder(recipient).withAddress(address).build());
     }
 
     private void storeRecipientLocked(

File: lib/src/main/java/org/asamk/signal/manager/util/ProfileUtils.java
Patch:
@@ -71,6 +71,9 @@ private static String decryptName(
     }
 
     private static Pair<String, String> splitName(String name) {
+        if (name == null) {
+            return new Pair<>(null, null);
+        }
         String[] parts = name.split("\0");
 
         switch (parts.length) {

File: lib/src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -1754,6 +1754,7 @@ public void receiveMessages(
                 // Store uuid if we don't have it already
                 resolveRecipientTrusted(envelope.getSourceAddress());
             }
+            final var notAGroupMember = isNotAGroupMember(envelope, content);
             if (!envelope.isReceipt()) {
                 try {
                     content = decryptMessage(envelope);
@@ -1779,7 +1780,7 @@ public void receiveMessages(
             account.save();
             if (isMessageBlocked(envelope, content)) {
                 logger.info("Ignoring a message from blocked user/group: {}", envelope.getTimestamp());
-            } else if (isNotAGroupMember(envelope, content)) {
+            } else if (notAGroupMember) {
                 logger.info("Ignoring a message from a non group member: {}", envelope.getTimestamp());
             } else {
                 handler.handleMessage(envelope, content, exception);

File: src/main/java/org/asamk/signal/commands/SendReactionCommand.java
Patch:
@@ -67,7 +67,7 @@ public void handleCommand(final Namespace ns, final Manager m) throws CommandExc
         final Pair<Long, List<SendMessageResult>> results;
 
         GroupId groupId = null;
-        if (groupId != null) {
+        if (groupIdString != null) {
             try {
                 groupId = Util.decodeGroupId(groupIdString);
             } catch (GroupIdFormatException e) {

File: lib/src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -2367,7 +2367,6 @@ public String getContactOrProfileName(String number) {
         if (profileEntry != null && profileEntry.getProfile() != null) {
             return profileEntry.getProfile().getDisplayName();
         }
-
         return null;
     }
 

File: lib/src/main/java/org/asamk/signal/manager/storage/profiles/SignalProfile.java
Patch:
@@ -77,7 +77,7 @@ public String getName() {
 
     public String getDisplayName() {
         // First name and last name (if set) are separated by a NULL char + trim space in case only one is filled
-        return name == null ? null : name.replace("\0", " ").trim();
+        return name == null ? "" : name.replace("\0", " ").trim();
     }
 
     public String getAbout() {

File: src/main/java/org/asamk/signal/ReceiveMessageHandler.java
Patch:
@@ -665,7 +665,7 @@ private void printAttachment(PlainTextWriter writer, SignalServiceAttachment att
     private String formatContact(SignalServiceAddress address) {
         final var number = address.getLegacyIdentifier();
         var name = m.getContactOrProfileName(number);
-        if (name == null) {
+        if (name == null || name.isEmpty()) {
             return number;
         } else {
             return MessageFormatter.arrayFormat("“{}” {}", new Object[]{name, number}).getMessage();

File: src/main/java/org/asamk/signal/dbus/DbusSignalImpl.java
Patch:
@@ -333,6 +333,9 @@ public void quitGroup(final byte[] groupId) {
     public void joinGroup(final String groupLink) {
         try {
             final var linkUrl = GroupInviteLinkUrl.fromUri(groupLink);
+            if (linkUrl == null) {
+                throw new Error.Failure("Group link is invalid:");
+            }
             m.joinGroup(linkUrl);
         } catch (GroupInviteLinkUrl.InvalidGroupLinkException | GroupLinkNotActiveException e) {
             throw new Error.Failure("Group link is invalid: " + e.getMessage());

File: lib/src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -529,7 +529,7 @@ private SignalServiceMessageSender createMessageSender() {
                 ServiceConfig.AUTOMATIC_NETWORK_RETRY);
     }
 
-    private SignalProfile getRecipientProfile(
+    public SignalProfile getRecipientProfile(
             SignalServiceAddress address
     ) {
         return getRecipientProfile(address, false);

File: lib/src/main/java/org/asamk/signal/manager/storage/profiles/SignalProfile.java
Patch:
@@ -76,8 +76,8 @@ public String getName() {
     }
 
     public String getDisplayName() {
-        // First name and last name (if set) are separated by a NULL char
-        return name == null ? null : name.replace("\0", " ");
+        // First name and last name (if set) are separated by a NULL char + trim space in case only one is filled
+        return name == null ? null : name.replace("\0", " ").trim();
     }
 
     public String getAbout() {

File: src/main/java/org/asamk/signal/ReceiveMessageHandler.java
Patch:
@@ -630,7 +630,7 @@ private void printMention(
         writer.println("- {}: {} (length: {})", formatContact(address), mention.getStart(), mention.getLength());
     }
 
-    private void printAttachment(PlainTextWriter writer, SignalServiceAttachment attachment) throws IOException {
+    private void printAttachment(PlainTextWriter writer, SignalServiceAttachment attachment) {
         writer.println("Content-Type: {}", attachment.getContentType());
         writer.println("Type: {}", attachment.isPointer() ? "Pointer" : attachment.isStream() ? "Stream" : "<unknown>");
         if (attachment.isPointer()) {

File: src/main/java/org/asamk/signal/commands/ExtendedDbusCommand.java
Patch:
@@ -3,9 +3,10 @@
 import net.sourceforge.argparse4j.inf.Namespace;
 
 import org.asamk.Signal;
+import org.asamk.signal.commands.exceptions.CommandException;
 import org.freedesktop.dbus.connections.impl.DBusConnection;
 
 public interface ExtendedDbusCommand extends Command {
 
-    int handleCommand(Namespace ns, Signal signal, DBusConnection dbusconnection);
+    void handleCommand(Namespace ns, Signal signal, DBusConnection dbusconnection) throws CommandException;
 }

File: src/main/java/org/asamk/signal/commands/LocalCommand.java
Patch:
@@ -2,9 +2,10 @@
 
 import net.sourceforge.argparse4j.inf.Namespace;
 
+import org.asamk.signal.commands.exceptions.CommandException;
 import org.asamk.signal.manager.Manager;
 
 public interface LocalCommand extends Command {
 
-    int handleCommand(Namespace ns, Manager m);
+    void handleCommand(Namespace ns, Manager m) throws CommandException;
 }

File: src/main/java/org/asamk/signal/commands/ProvisioningCommand.java
Patch:
@@ -2,9 +2,10 @@
 
 import net.sourceforge.argparse4j.inf.Namespace;
 
+import org.asamk.signal.commands.exceptions.CommandException;
 import org.asamk.signal.manager.ProvisioningManager;
 
 public interface ProvisioningCommand extends Command {
 
-    int handleCommand(Namespace ns, ProvisioningManager m);
+    void handleCommand(Namespace ns, ProvisioningManager m) throws CommandException;
 }

File: src/main/java/org/asamk/signal/commands/RegistrationCommand.java
Patch:
@@ -2,9 +2,10 @@
 
 import net.sourceforge.argparse4j.inf.Namespace;
 
+import org.asamk.signal.commands.exceptions.CommandException;
 import org.asamk.signal.manager.RegistrationManager;
 
 public interface RegistrationCommand extends Command {
 
-    int handleCommand(Namespace ns, RegistrationManager m);
+    void handleCommand(Namespace ns, RegistrationManager m) throws CommandException;
 }

File: lib/src/main/java/org/asamk/signal/manager/AvatarStore.java
Patch:
@@ -29,7 +29,7 @@ public StreamDetails retrieveProfileAvatar(SignalServiceAddress address) throws
     }
 
     public StreamDetails retrieveGroupAvatar(GroupId groupId) throws IOException {
-        final File groupAvatarFile = getGroupAvatarFile(groupId);
+        final var groupAvatarFile = getGroupAvatarFile(groupId);
         return retrieveAvatar(groupAvatarFile);
     }
 

File: lib/src/main/java/org/asamk/signal/manager/LibSignalLogger.java
Patch:
@@ -18,7 +18,7 @@ private LibSignalLogger() {
 
     @Override
     public void log(final int priority, final String tag, final String message) {
-        final String logMessage = String.format("[%s]: %s", tag, message);
+        final var logMessage = String.format("[%s]: %s", tag, message);
         switch (priority) {
             case SignalProtocolLogger.VERBOSE:
                 logger.trace(logMessage);

File: lib/src/main/java/org/asamk/signal/manager/config/ServiceConfig.java
Patch:
@@ -39,7 +39,7 @@ public class ServiceConfig {
         try {
             TrustStore contactTrustStore = new IasTrustStore();
 
-            KeyStore keyStore = KeyStore.getInstance("BKS");
+            var keyStore = KeyStore.getInstance("BKS");
             keyStore.load(contactTrustStore.getKeyStoreInputStream(),
                     contactTrustStore.getKeyStorePassword().toCharArray());
 
@@ -74,7 +74,7 @@ public static ServiceEnvironmentConfig getServiceEnvironmentConfig(
                 .header("User-Agent", userAgent)
                 .build());
 
-        final List<Interceptor> interceptors = List.of(userAgentInterceptor);
+        final var interceptors = List.of(userAgentInterceptor);
 
         switch (serviceEnvironment) {
             case LIVE:

File: lib/src/main/java/org/asamk/signal/manager/groups/GroupId.java
Patch:
@@ -50,7 +50,7 @@ public boolean equals(final Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
 
-        final GroupId groupId = (GroupId) o;
+        final var groupId = (GroupId) o;
 
         return Arrays.equals(id, groupId.id);
     }

File: lib/src/main/java/org/asamk/signal/manager/storage/contacts/JsonContactsStore.java
Patch:
@@ -13,8 +13,8 @@ public class JsonContactsStore {
     private List<ContactInfo> contacts = new ArrayList<>();
 
     public void updateContact(ContactInfo contact) {
-        final SignalServiceAddress contactAddress = contact.getAddress();
-        for (int i = 0; i < contacts.size(); i++) {
+        final var contactAddress = contact.getAddress();
+        for (var i = 0; i < contacts.size(); i++) {
             if (contacts.get(i).getAddress().matches(contactAddress)) {
                 contacts.set(i, contact);
                 return;
@@ -25,7 +25,7 @@ public void updateContact(ContactInfo contact) {
     }
 
     public ContactInfo getContact(SignalServiceAddress address) {
-        for (ContactInfo contact : contacts) {
+        for (var contact : contacts) {
             if (contact.getAddress().matches(address)) {
                 if (contact.uuid == null) {
                     contact.uuid = address.getUuid().orNull();

File: lib/src/main/java/org/asamk/signal/manager/storage/groups/GroupInfo.java
Patch:
@@ -57,7 +57,7 @@ public Set<SignalServiceAddress> getMembersIncludingPendingWithout(SignalService
 
     @JsonIgnore
     public boolean isMember(SignalServiceAddress address) {
-        for (SignalServiceAddress member : getMembers()) {
+        for (var member : getMembers()) {
             if (member.matches(address)) {
                 return true;
             }
@@ -67,7 +67,7 @@ public boolean isMember(SignalServiceAddress address) {
 
     @JsonIgnore
     public boolean isPendingMember(SignalServiceAddress address) {
-        for (SignalServiceAddress member : getPendingMembers()) {
+        for (var member : getPendingMembers()) {
             if (member.matches(address)) {
                 return true;
             }

File: lib/src/main/java/org/asamk/signal/manager/storage/threads/LegacyJsonThreadStore.java
Patch:
@@ -47,10 +47,10 @@ private static class ThreadsDeserializer extends JsonDeserializer<Map<String, Th
         public Map<String, ThreadInfo> deserialize(
                 JsonParser jsonParser, DeserializationContext deserializationContext
         ) throws IOException {
-            Map<String, ThreadInfo> threads = new HashMap<>();
+            var threads = new HashMap<String, ThreadInfo>();
             JsonNode node = jsonParser.getCodec().readTree(jsonParser);
-            for (JsonNode n : node) {
-                ThreadInfo t = jsonProcessor.treeToValue(n, ThreadInfo.class);
+            for (var n : node) {
+                var t = jsonProcessor.treeToValue(n, ThreadInfo.class);
                 threads.put(t.id, t);
             }
 

File: lib/src/main/java/org/asamk/signal/manager/util/AttachmentUtils.java
Patch:
@@ -18,7 +18,7 @@ public static List<SignalServiceAttachment> getSignalServiceAttachments(List<Str
         List<SignalServiceAttachment> signalServiceAttachments = null;
         if (attachments != null) {
             signalServiceAttachments = new ArrayList<>(attachments.size());
-            for (String attachment : attachments) {
+            for (var attachment : attachments) {
                 try {
                     signalServiceAttachments.add(createAttachment(new File(attachment)));
                 } catch (IOException e) {
@@ -30,15 +30,15 @@ public static List<SignalServiceAttachment> getSignalServiceAttachments(List<Str
     }
 
     public static SignalServiceAttachmentStream createAttachment(File attachmentFile) throws IOException {
-        final StreamDetails streamDetails = Utils.createStreamDetailsFromFile(attachmentFile);
+        final var streamDetails = Utils.createStreamDetailsFromFile(attachmentFile);
         return createAttachment(streamDetails, Optional.of(attachmentFile.getName()));
     }
 
     public static SignalServiceAttachmentStream createAttachment(
             StreamDetails streamDetails, Optional<String> name
     ) {
         // TODO mabybe add a parameter to set the voiceNote, borderless, preview, width, height and caption option
-        final long uploadTimestamp = System.currentTimeMillis();
+        final var uploadTimestamp = System.currentTimeMillis();
         Optional<byte[]> preview = Optional.absent();
         Optional<String> caption = Optional.absent();
         Optional<String> blurHash = Optional.absent();

File: lib/src/main/java/org/asamk/signal/manager/util/PinHashing.java
Patch:
@@ -12,18 +12,18 @@ private PinHashing() {
     }
 
     public static HashedPin hashPin(String pin, KeyBackupService.HashSession hashSession) {
-        final Argon2Parameters params = new Argon2Parameters.Builder(Argon2Parameters.ARGON2_id).withParallelism(1)
+        final var params = new Argon2Parameters.Builder(Argon2Parameters.ARGON2_id).withParallelism(1)
                 .withIterations(32)
                 .withVersion(Argon2Parameters.ARGON2_VERSION_13)
                 .withMemoryAsKB(16 * 1024)
                 .withSalt(hashSession.hashSalt())
                 .build();
 
-        final Argon2BytesGenerator generator = new Argon2BytesGenerator();
+        final var generator = new Argon2BytesGenerator();
         generator.init(params);
 
         return PinHasher.hashPin(PinHasher.normalize(pin), password -> {
-            byte[] output = new byte[64];
+            var output = new byte[64];
             generator.generateBytes(password, output);
             return output;
         });

File: src/main/java/org/asamk/signal/JsonReceiveMessageHandler.java
Patch:
@@ -10,7 +10,6 @@
 
 import java.io.IOException;
 import java.util.HashMap;
-import java.util.Map;
 
 public class JsonReceiveMessageHandler implements Manager.ReceiveMessageHandler {
 
@@ -26,7 +25,7 @@ public JsonReceiveMessageHandler(Manager m) {
 
     @Override
     public void handleMessage(SignalServiceEnvelope envelope, SignalServiceContent content, Throwable exception) {
-        final Map<String, Object> object = new HashMap<>();
+        final var object = new HashMap<String, Object>();
         if (exception != null) {
             object.put("error", new JsonError(exception));
         }

File: src/main/java/org/asamk/signal/PlainTextWriterImpl.java
Patch:
@@ -20,7 +20,7 @@ public PlainTextWriterImpl(final OutputStream outputStream) {
 
     @Override
     public void println(String format, Object... args) throws IOException {
-        final String message = MessageFormatter.arrayFormat(format, args).getMessage();
+        final var message = MessageFormatter.arrayFormat(format, args).getMessage();
 
         writer.write(message);
         writer.write(System.lineSeparator());

File: src/main/java/org/asamk/signal/commands/LinkCommand.java
Patch:
@@ -21,13 +21,13 @@ public void attachToSubparser(final Subparser subparser) {
 
     @Override
     public int handleCommand(final Namespace ns, final ProvisioningManager m) {
-        String deviceName = ns.getString("name");
+        var deviceName = ns.getString("name");
         if (deviceName == null) {
             deviceName = "cli";
         }
         try {
             System.out.println(m.getDeviceLinkUri());
-            String username = m.finishDeviceLink(deviceName);
+            var username = m.finishDeviceLink(deviceName);
             System.out.println("Associated with: " + username);
         } catch (TimeoutException e) {
             System.err.println("Link request timed out, please try again.");

File: src/main/java/org/asamk/signal/commands/RegisterCommand.java
Patch:
@@ -23,7 +23,7 @@ public void attachToSubparser(final Subparser subparser) {
     @Override
     public int handleCommand(final Namespace ns, final RegistrationManager m) {
         final boolean voiceVerification = ns.getBoolean("voice");
-        final String captcha = ns.getString("captcha");
+        final var captcha = ns.getString("captcha");
 
         try {
             m.register(voiceVerification, captcha);

File: src/main/java/org/asamk/signal/commands/SetPinCommand.java
Patch:
@@ -20,7 +20,7 @@ public void attachToSubparser(final Subparser subparser) {
     @Override
     public int handleCommand(final Namespace ns, final Manager m) {
         try {
-            String registrationLockPin = ns.getString("registrationLockPin");
+            var registrationLockPin = ns.getString("registrationLockPin");
             m.setRegistrationLockPin(Optional.of(registrationLockPin));
             return 0;
         } catch (UnauthenticatedResponseException e) {

File: src/main/java/org/asamk/signal/commands/UpdateContactCommand.java
Patch:
@@ -23,13 +23,13 @@ public void attachToSubparser(final Subparser subparser) {
 
     @Override
     public int handleCommand(final Namespace ns, final Manager m) {
-        String number = ns.getString("number");
-        String name = ns.getString("name");
+        var number = ns.getString("number");
+        var name = ns.getString("name");
 
         try {
             m.setContactName(number, name);
 
-            Integer expiration = ns.getInt("expiration");
+            var expiration = ns.getInt("expiration");
             if (expiration != null) {
                 m.setExpirationTimer(number, expiration);
             }

File: src/main/java/org/asamk/signal/commands/UpdateGroupCommand.java
Patch:
@@ -40,7 +40,7 @@ public int handleCommand(final Namespace ns, final Signal signal) {
             groupId = new byte[0];
         }
 
-        String groupName = ns.getString("name");
+        var groupName = ns.getString("name");
         if (groupName == null) {
             groupName = "";
         }
@@ -50,13 +50,13 @@ public int handleCommand(final Namespace ns, final Signal signal) {
             groupMembers = new ArrayList<>();
         }
 
-        String groupAvatar = ns.getString("avatar");
+        var groupAvatar = ns.getString("avatar");
         if (groupAvatar == null) {
             groupAvatar = "";
         }
 
         try {
-            byte[] newGroupId = signal.updateGroup(groupId, groupName, groupMembers, groupAvatar);
+            var newGroupId = signal.updateGroup(groupId, groupName, groupMembers, groupAvatar);
             if (groupId.length != newGroupId.length) {
                 System.out.println("Creating new group \"" + Base64.getEncoder().encodeToString(newGroupId) + "\" …");
             }

File: src/main/java/org/asamk/signal/commands/UploadStickerPackCommand.java
Patch:
@@ -20,8 +20,8 @@ public void attachToSubparser(final Subparser subparser) {
     @Override
     public int handleCommand(final Namespace ns, final Manager m) {
         try {
-            File path = new File(ns.getString("path"));
-            String url = m.uploadStickerPack(path);
+            var path = new File(ns.getString("path"));
+            var url = m.uploadStickerPack(path);
             System.out.println(url);
             return 0;
         } catch (IOException e) {

File: src/main/java/org/asamk/signal/commands/VerifyCommand.java
Patch:
@@ -21,8 +21,8 @@ public void attachToSubparser(final Subparser subparser) {
     @Override
     public int handleCommand(final Namespace ns, final RegistrationManager m) {
         try {
-            String verificationCode = ns.getString("verificationCode");
-            String pin = ns.getString("pin");
+            var verificationCode = ns.getString("verificationCode");
+            var pin = ns.getString("pin");
             m.verifyAccount(verificationCode, pin);
             return 0;
         } catch (LockedException e) {

File: src/main/java/org/asamk/signal/json/JsonMessageEnvelope.java
Patch:
@@ -7,7 +7,6 @@
 import org.asamk.signal.manager.Manager;
 import org.whispersystems.signalservice.api.messages.SignalServiceContent;
 import org.whispersystems.signalservice.api.messages.SignalServiceEnvelope;
-import org.whispersystems.signalservice.api.push.SignalServiceAddress;
 
 import java.util.List;
 
@@ -48,7 +47,7 @@ public class JsonMessageEnvelope {
 
     public JsonMessageEnvelope(SignalServiceEnvelope envelope, SignalServiceContent content, Manager m) {
         if (!envelope.isUnidentifiedSender() && envelope.hasSource()) {
-            SignalServiceAddress source = envelope.getSourceAddress();
+            var source = envelope.getSourceAddress();
             this.source = source.getLegacyIdentifier();
             this.sourceDevice = envelope.getSourceDevice();
             this.relay = source.getRelay().orNull();

File: src/main/java/org/asamk/signal/json/JsonSyncMessage.java
Patch:
@@ -45,7 +45,7 @@ class JsonSyncMessage {
                 ? new JsonSyncDataMessage(syncMessage.getSent().get(), m)
                 : null;
         if (syncMessage.getBlockedList().isPresent()) {
-            final Base64.Encoder base64 = Base64.getEncoder();
+            final var base64 = Base64.getEncoder();
             this.blockedNumbers = syncMessage.getBlockedList()
                     .get()
                     .getAddresses()

File: src/main/java/org/asamk/signal/json/JsonTypingMessage.java
Patch:
@@ -22,7 +22,7 @@ class JsonTypingMessage {
     JsonTypingMessage(SignalServiceTypingMessage typingMessage) {
         this.action = typingMessage.getAction().name();
         this.timestamp = typingMessage.getTimestamp();
-        final Base64.Encoder encoder = Base64.getEncoder();
+        final var encoder = Base64.getEncoder();
         this.groupId = typingMessage.getGroupId().transform(encoder::encodeToString).orNull();
     }
 }

File: src/main/java/org/asamk/signal/util/DateUtils.java
Patch:
@@ -13,7 +13,7 @@ private DateUtils() {
     }
 
     public static String formatTimestamp(long timestamp) {
-        Date date = new Date(timestamp);
+        var date = new Date(timestamp);
         final DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSX"); // Quoted "Z" to indicate UTC, no timezone offset
         df.setTimeZone(tzUTC);
         return timestamp + " (" + df.format(date) + ")";

File: src/main/java/org/asamk/signal/util/IOUtils.java
Patch:
@@ -12,8 +12,8 @@ private IOUtils() {
     }
 
     public static String readAll(InputStream in, Charset charset) throws IOException {
-        StringWriter output = new StringWriter();
-        byte[] buffer = new byte[4096];
+        var output = new StringWriter();
+        var buffer = new byte[4096];
         int n;
         while (-1 != (n = in.read(buffer))) {
             output.write(new String(buffer, 0, n, charset));
@@ -22,7 +22,7 @@ public static String readAll(InputStream in, Charset charset) throws IOException
     }
 
     public static File getDataHomeDir() {
-        String dataHome = System.getenv("XDG_DATA_HOME");
+        var dataHome = System.getenv("XDG_DATA_HOME");
         if (dataHome != null) {
             return new File(dataHome);
         }

File: src/main/java/org/asamk/signal/util/RandomUtils.java
Patch:
@@ -6,7 +6,7 @@
 public class RandomUtils {
 
     private static final ThreadLocal<SecureRandom> LOCAL_RANDOM = ThreadLocal.withInitial(() -> {
-        SecureRandom rand = getSecureRandomUnseeded();
+        var rand = getSecureRandomUnseeded();
 
         // Let the SecureRandom seed it self initially
         rand.nextBoolean();

File: src/main/java/org/asamk/Signal.java
Patch:
@@ -51,6 +51,8 @@ byte[] updateGroup(
 
     boolean isRegistered();
 
+    void updateProfile(String name,String about,String aboutEmoji,String avatarPath,boolean removeAvatar) throws Error.Failure;
+
     class MessageReceived extends DBusSignal {
 
         private final long timestamp;

File: lib/src/main/java/org/asamk/signal/manager/AvatarStore.java
Patch:
@@ -64,7 +64,9 @@ private void storeAvatar(final File avatarFile, final AvatarStorer storer) throw
     }
 
     private void deleteAvatar(final File avatarFile) throws IOException {
-        Files.delete(avatarFile.toPath());
+        if (avatarFile.exists()) {
+            Files.delete(avatarFile.toPath());
+        }
     }
 
     private File getGroupAvatarFile(GroupId groupId) {

File: src/main/java/org/asamk/signal/commands/UpdateProfileCommand.java
Patch:
@@ -40,7 +40,7 @@ public int handleCommand(final Namespace ns, final Manager m) {
                     : avatarPath == null ? null : Optional.of(new File(avatarPath));
             m.setProfile(name, about, aboutEmoji, avatarFile);
         } catch (IOException e) {
-            System.err.println("UpdateAccount error: " + e.getMessage());
+            System.err.println("Update profile error: " + e.getMessage());
             return 3;
         }
 

File: src/main/java/org/asamk/signal/manager/storage/groups/JsonGroupStore.java
Patch:
@@ -183,7 +183,7 @@ public Map<GroupId, GroupInfo> deserialize(
             JsonNode node = jsonParser.getCodec().readTree(jsonParser);
             for (JsonNode n : node) {
                 GroupInfo g;
-                if (n.has("masterKey")) {
+                if (n.hasNonNull("masterKey")) {
                     // a v2 group
                     GroupIdV2 groupId = GroupIdV2.fromBase64(n.get("groupId").asText());
                     try {

File: src/main/java/org/asamk/signal/manager/util/Utils.java
Patch:
@@ -84,7 +84,7 @@ public static SignalServiceAddress getSignalServiceAddressFromIdentifier(final S
 
     public static JsonNode getNotNullNode(JsonNode parent, String name) throws InvalidObjectException {
         JsonNode node = parent.get(name);
-        if (node == null) {
+        if (node == null || node.isNull()) {
             throw new InvalidObjectException(String.format("Incorrect file format: expected parameter %s not found ",
                     name));
         }

File: src/main/java/org/asamk/signal/JsonWriter.java
Patch:
@@ -20,7 +20,7 @@ public JsonWriter(final OutputStream writer) {
         this.writer = new OutputStreamWriter(writer, StandardCharsets.UTF_8);
 
         objectMapper = new ObjectMapper();
-        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
+        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.PUBLIC_ONLY);
         objectMapper.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);
     }
 

File: src/main/java/org/asamk/signal/json/JsonDataMessage.java
Patch:
@@ -69,7 +69,7 @@ class JsonDataMessage {
     public JsonDataMessage(Signal.MessageReceived messageReceived) {
         timestamp = messageReceived.getTimestamp();
         message = messageReceived.getMessage();
-        groupInfo = new JsonGroupInfo(messageReceived.getGroupId());
+        groupInfo = messageReceived.getGroupId().length > 0 ? new JsonGroupInfo(messageReceived.getGroupId()) : null;
         reaction = null;    // TODO Replace these 4 with the proper commands
         quote = null;
         mentions = null;
@@ -80,7 +80,7 @@ public JsonDataMessage(Signal.MessageReceived messageReceived) {
     public JsonDataMessage(Signal.SyncMessageReceived messageReceived) {
         timestamp = messageReceived.getTimestamp();
         message = messageReceived.getMessage();
-        groupInfo = new JsonGroupInfo(messageReceived.getGroupId());
+        groupInfo = messageReceived.getGroupId().length > 0 ? new JsonGroupInfo(messageReceived.getGroupId()) : null;
         reaction = null;    // TODO Replace these 4 with the proper commands
         quote = null;
         mentions = null;

File: src/main/java/org/asamk/signal/Cli.java
Patch:
@@ -39,7 +39,7 @@
 
 public class Cli {
 
-    private final static Logger logger = LoggerFactory.getLogger(Main.class);
+    private final static Logger logger = LoggerFactory.getLogger(Cli.class);
 
     private final Namespace ns;
 

File: src/main/java/org/asamk/signal/commands/DaemonCommand.java
Patch:
@@ -22,7 +22,7 @@
 
 public class DaemonCommand implements MultiLocalCommand {
 
-    private final static Logger logger = LoggerFactory.getLogger(ReceiveCommand.class);
+    private final static Logger logger = LoggerFactory.getLogger(DaemonCommand.class);
 
     @Override
     public void attachToSubparser(final Subparser subparser) {

File: src/main/java/org/asamk/signal/manager/ProvisioningManager.java
Patch:
@@ -40,7 +40,7 @@
 
 public class ProvisioningManager {
 
-    private final static Logger logger = LoggerFactory.getLogger(Manager.class);
+    private final static Logger logger = LoggerFactory.getLogger(ProvisioningManager.class);
 
     private final PathConfig pathConfig;
     private final SignalServiceConfiguration serviceConfiguration;

File: src/main/java/org/asamk/signal/Cli.java
Patch:
@@ -65,8 +65,8 @@ static ArgumentParser buildArgumentParser() {
 
         parser.addArgument("-o", "--output")
                 .help("Choose to output in plain text or JSON")
-                .choices("plain-text", "json")
-                .setDefault("plain-text");
+                .type(Arguments.enumStringType(OutputType.class))
+                .setDefault(OutputType.PLAIN_TEXT);
 
         Subparsers subparsers = parser.addSubparsers().title("subcommands").dest("command");
 

File: src/main/java/org/asamk/signal/commands/DaemonCommand.java
Patch:
@@ -7,6 +7,7 @@
 import org.asamk.signal.DbusConfig;
 import org.asamk.signal.DbusReceiveMessageHandler;
 import org.asamk.signal.JsonDbusReceiveMessageHandler;
+import org.asamk.signal.OutputType;
 import org.asamk.signal.dbus.DbusSignalImpl;
 import org.asamk.signal.manager.Manager;
 import org.freedesktop.dbus.connections.impl.DBusConnection;
@@ -38,7 +39,7 @@ public void attachToSubparser(final Subparser subparser) {
 
     @Override
     public int handleCommand(final Namespace ns, final Manager m) {
-        boolean inJson = ns.getString("output").equals("json") || ns.getBoolean("json");
+        boolean inJson = ns.get("output") == OutputType.JSON || ns.getBoolean("json");
 
         // TODO delete later when "json" variable is removed
         if (ns.getBoolean("json")) {
@@ -73,7 +74,7 @@ public int handleCommand(final Namespace ns, final Manager m) {
 
     @Override
     public int handleCommand(final Namespace ns, final List<Manager> managers) {
-        boolean inJson = ns.getString("output").equals("json") || ns.getBoolean("json");
+        boolean inJson = ns.get("output") == OutputType.JSON || ns.getBoolean("json");
 
         // TODO delete later when "json" variable is removed
         if (ns.getBoolean("json")) {

File: src/main/java/org/asamk/signal/commands/GetUserStatusCommand.java
Patch:
@@ -7,6 +7,7 @@
 import net.sourceforge.argparse4j.inf.Namespace;
 import net.sourceforge.argparse4j.inf.Subparser;
 
+import org.asamk.signal.OutputType;
 import org.asamk.signal.manager.Manager;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -37,7 +38,7 @@ public int handleCommand(final Namespace ns, final Manager m) {
         ObjectMapper jsonProcessor = new ObjectMapper();
         jsonProcessor.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);
 
-        boolean inJson = ns.getString("output").equals("json") || ns.getBoolean("json");
+        boolean inJson = ns.get("output") == OutputType.JSON || ns.getBoolean("json");
 
         // TODO delete later when "json" variable is removed
         if (ns.getBoolean("json")) {

File: src/main/java/org/asamk/signal/commands/ListGroupsCommand.java
Patch:
@@ -9,6 +9,7 @@
 import net.sourceforge.argparse4j.inf.Namespace;
 import net.sourceforge.argparse4j.inf.Subparser;
 
+import org.asamk.signal.OutputType;
 import org.asamk.signal.manager.Manager;
 import org.asamk.signal.manager.groups.GroupInviteLinkUrl;
 import org.asamk.signal.manager.storage.groups.GroupInfo;
@@ -75,7 +76,7 @@ public void attachToSubparser(final Subparser subparser) {
 
     @Override
     public int handleCommand(final Namespace ns, final Manager m) {
-        if (ns.getString("output").equals("json")) {
+        if (ns.get("output") == OutputType.JSON) {
             final ObjectMapper jsonProcessor = new ObjectMapper();
             jsonProcessor.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
             jsonProcessor.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);

File: src/main/java/org/asamk/signal/commands/ReceiveCommand.java
Patch:
@@ -12,6 +12,7 @@
 
 import org.asamk.Signal;
 import org.asamk.signal.JsonReceiveMessageHandler;
+import org.asamk.signal.OutputType;
 import org.asamk.signal.ReceiveMessageHandler;
 import org.asamk.signal.json.JsonMessageEnvelope;
 import org.asamk.signal.manager.Manager;
@@ -48,7 +49,7 @@ public void attachToSubparser(final Subparser subparser) {
     public int handleCommand(final Namespace ns, final Signal signal, DBusConnection dbusconnection) {
         final ObjectMapper jsonProcessor;
 
-        boolean inJson = ns.getString("output").equals("json") || ns.getBoolean("json");
+        boolean inJson = ns.get("output") == OutputType.JSON || ns.getBoolean("json");
 
         // TODO delete later when "json" variable is removed
         if (ns.getBoolean("json")) {
@@ -156,7 +157,7 @@ public int handleCommand(final Namespace ns, final Signal signal, DBusConnection
 
     @Override
     public int handleCommand(final Namespace ns, final Manager m) {
-        boolean inJson = ns.getString("output").equals("json") || ns.getBoolean("json");
+        boolean inJson = ns.get("output") == OutputType.JSON || ns.getBoolean("json");
 
         // TODO delete later when "json" variable is removed
         if (ns.getBoolean("json")) {

File: src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -953,7 +953,7 @@ public Pair<Long, List<SendMessageResult>> sendMessage(
         return sendMessage(messageBuilder, getSignalServiceAddresses(recipients));
     }
 
-    public Pair<Long, List<SendMessageResult>> sendSelfMessage(
+    public Pair<Long, SendMessageResult> sendSelfMessage(
             String messageText, List<String> attachments
     ) throws IOException, AttachmentInvalidException {
         final SignalServiceDataMessage.Builder messageBuilder = SignalServiceDataMessage.newBuilder()
@@ -1278,7 +1278,7 @@ private Pair<Long, List<SendMessageResult>> sendMessage(
         }
     }
 
-    private Pair<Long, List<SendMessageResult>> sendSelfMessage(
+    private Pair<Long, SendMessageResult> sendSelfMessage(
             SignalServiceDataMessage.Builder messageBuilder
     ) throws IOException {
         final long timestamp = System.currentTimeMillis();
@@ -1294,7 +1294,7 @@ private Pair<Long, List<SendMessageResult>> sendSelfMessage(
 
             SignalServiceDataMessage message = messageBuilder.build();
             final SendMessageResult result = sendSelfMessage(message);
-            return new Pair<>(timestamp, List.of(result));
+            return new Pair<>(timestamp, result);
         } finally {
             account.save();
         }

File: src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -585,7 +585,9 @@ public boolean isDiscoverableByPhoneNumber() {
 
     @Override
     public void close() throws IOException {
-        save();
+        if (fileChannel.isOpen()) {
+            save();
+        }
         synchronized (fileChannel) {
             try {
                 lock.close();

File: src/main/java/org/asamk/signal/Main.java
Patch:
@@ -42,7 +42,7 @@ public static void main(String[] args) {
 
         // Configuring the logger needs to happen before any logger is initialized
         if (isVerbose(args)) {
-            System.setProperty("org.slf4j.simpleLogger.defaultLogLevel", "trace");
+            System.setProperty("org.slf4j.simpleLogger.defaultLogLevel", "debug");
             System.setProperty("org.slf4j.simpleLogger.showThreadName", "true");
             System.setProperty("org.slf4j.simpleLogger.showShortLogName", "false");
             System.setProperty("org.slf4j.simpleLogger.showDateTime", "true");

File: src/main/java/org/asamk/signal/manager/storage/SignalAccount.java
Patch:
@@ -358,7 +358,7 @@ private void load(File dataPath) throws IOException {
         messageCache = new MessageCache(getMessageCachePath(dataPath, username));
 
         JsonNode threadStoreNode = rootNode.get("threadStore");
-        if (threadStoreNode != null) {
+        if (threadStoreNode != null && !threadStoreNode.isNull()) {
             LegacyJsonThreadStore threadStore = jsonProcessor.convertValue(threadStoreNode,
                     LegacyJsonThreadStore.class);
             // Migrate thread info to group and contact store

File: src/main/java/org/asamk/signal/manager/AvatarStore.java
Patch:
@@ -72,7 +72,7 @@ private File getGroupAvatarFile(GroupId groupId) {
     }
 
     private File getContactAvatarFile(SignalServiceAddress address) {
-        return new File(avatarsPath, "contact-" + address);
+        return new File(avatarsPath, "contact-" + address.getLegacyIdentifier());
     }
 
     private File getProfileAvatarFile(SignalServiceAddress address) {

File: src/main/java/org/asamk/signal/Main.java
Patch:
@@ -299,6 +299,9 @@ private static ArgumentParser buildArgumentParser() {
         mut.addArgument("--dbus").help("Make request via user dbus.").action(Arguments.storeTrue());
         mut.addArgument("--dbus-system").help("Make request via system dbus.").action(Arguments.storeTrue());
 
+        parser.addArgument("-o", "--output").help("Choose to output in plain text or JSON")
+                .choices("plain-text", "json").setDefault("plain-text");
+
         Subparsers subparsers = parser.addSubparsers()
                 .title("subcommands")
                 .dest("command")

File: src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -312,7 +312,7 @@ public void checkAccountState() throws IOException {
      *
      * @param numbers The set of phone number in question
      * @return A map of numbers to booleans. True if registered, false otherwise. Should never be null
-     * @throws IOException if its unable to check if the users are registered
+     * @throws IOException if its unable to get the contacts to check if they're registered
      */
     public Map<String, Boolean> areUsersRegistered(Set<String> numbers) throws IOException {
         // Note "contactDetails" has no optionals. It only gives us info on users who are registered

File: src/main/java/org/asamk/signal/manager/storage/groups/GroupInfoV1.java
Patch:
@@ -101,7 +101,7 @@ public GroupIdV2 getExpectedV2Id() {
 
     @JsonProperty("expectedV2Id")
     private byte[] getExpectedV2IdJackson() {
-        return expectedV2Id.serialize();
+        return getExpectedV2Id().serialize();
     }
 
     @Override

File: src/main/java/org/asamk/signal/manager/util/PinHashing.java
Patch:
@@ -14,7 +14,7 @@ private PinHashing() {
     public static HashedPin hashPin(String pin, KeyBackupService.HashSession hashSession) {
         final Argon2Parameters params = new Argon2Parameters.Builder(Argon2Parameters.ARGON2_id).withParallelism(1)
                 .withIterations(32)
-                .withVersion(13)
+                .withVersion(Argon2Parameters.ARGON2_VERSION_13)
                 .withMemoryAsKB(16 * 1024)
                 .withSalt(hashSession.hashSalt())
                 .build();

File: src/main/java/org/asamk/signal/commands/Commands.java
Patch:
@@ -11,6 +11,7 @@ public class Commands {
         addCommand("addDevice", new AddDeviceCommand());
         addCommand("block", new BlockCommand());
         addCommand("daemon", new DaemonCommand());
+        addCommand("getUserStatus", new GetUserStatusCommand());
         addCommand("link", new LinkCommand());
         addCommand("listContacts", new ListContactsCommand());
         addCommand("listDevices", new ListDevicesCommand());

File: src/main/java/org/asamk/signal/commands/RemovePinCommand.java
Patch:
@@ -5,6 +5,7 @@
 
 import org.asamk.signal.manager.Manager;
 import org.whispersystems.libsignal.util.guava.Optional;
+import org.whispersystems.signalservice.internal.contacts.crypto.UnauthenticatedResponseException;
 
 import java.io.IOException;
 
@@ -23,7 +24,7 @@ public int handleCommand(final Namespace ns, final Manager m) {
         try {
             m.setRegistrationLockPin(Optional.absent());
             return 0;
-        } catch (IOException e) {
+        } catch (IOException | UnauthenticatedResponseException e) {
             System.err.println("Remove pin error: " + e.getMessage());
             return 3;
         }

File: src/main/java/org/asamk/signal/commands/SetPinCommand.java
Patch:
@@ -5,6 +5,7 @@
 
 import org.asamk.signal.manager.Manager;
 import org.whispersystems.libsignal.util.guava.Optional;
+import org.whispersystems.signalservice.internal.contacts.crypto.UnauthenticatedResponseException;
 
 import java.io.IOException;
 
@@ -26,7 +27,7 @@ public int handleCommand(final Namespace ns, final Manager m) {
             String registrationLockPin = ns.getString("registrationLockPin");
             m.setRegistrationLockPin(Optional.of(registrationLockPin));
             return 0;
-        } catch (IOException e) {
+        } catch (IOException | UnauthenticatedResponseException e) {
             System.err.println("Set pin error: " + e.getMessage());
             return 3;
         }

File: src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -298,17 +298,17 @@ public boolean isRegistered() {
         return account.isRegistered();
     }
 
-    public void register(boolean voiceVerification) throws IOException {
+    public void register(boolean voiceVerification, String captcha) throws IOException {
         account.setPassword(KeyUtils.createPassword());
 
         // Resetting UUID, because registering doesn't work otherwise
         account.setUuid(null);
         accountManager = createSignalServiceAccountManager();
 
         if (voiceVerification) {
-            accountManager.requestVoiceVerificationCode(Locale.getDefault(), Optional.absent(), Optional.absent());
+            accountManager.requestVoiceVerificationCode(Locale.getDefault(), Optional.fromNullable(captcha), Optional.absent());
         } else {
-            accountManager.requestSmsVerificationCode(false, Optional.absent(), Optional.absent());
+            accountManager.requestSmsVerificationCode(false, Optional.fromNullable(captcha), Optional.absent());
         }
 
         account.setRegistered(false);

File: src/main/java/org/asamk/signal/storage/contacts/ContactInfo.java
Patch:
@@ -7,6 +7,8 @@
 
 import java.util.UUID;
 
+import static com.fasterxml.jackson.annotation.JsonProperty.Access.WRITE_ONLY;
+
 public class ContactInfo {
 
     @JsonProperty
@@ -24,7 +26,7 @@ public class ContactInfo {
     @JsonProperty(defaultValue = "0")
     public int messageExpirationTime;
 
-    @JsonProperty
+    @JsonProperty(access = WRITE_ONLY)
     public String profileKey;
 
     @JsonProperty(defaultValue = "false")

File: src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -1469,6 +1469,7 @@ public void receiveMessages(long timeout, TimeUnit unit, boolean returnOnTimeout
                                 e.printStackTrace();
                             }
                         }
+                        account.save();
                         queuedActions.clear();
                         queuedActions = null;
                     }

File: src/main/java/org/asamk/signal/json/JsonGroupInfo.java
Patch:
@@ -19,7 +19,7 @@ class JsonGroupInfo {
         if (groupInfo.getMembers().isPresent()) {
             this.members = new ArrayList<>(groupInfo.getMembers().get().size());
             for (SignalServiceAddress address : groupInfo.getMembers().get()) {
-                this.members.add(address.getNumber().get());
+                this.members.add(address.getLegacyIdentifier());
             }
         }
         if (groupInfo.getName().isPresent()) {

File: src/main/java/org/asamk/signal/json/JsonMessageEnvelope.java
Patch:
@@ -20,15 +20,15 @@ public class JsonMessageEnvelope {
     public JsonMessageEnvelope(SignalServiceEnvelope envelope, SignalServiceContent content) {
         if (!envelope.isUnidentifiedSender() && envelope.hasSource()) {
             SignalServiceAddress source = envelope.getSourceAddress();
-            this.source = source.getNumber().get();
+            this.source = source.getLegacyIdentifier();
             this.relay = source.getRelay().isPresent() ? source.getRelay().get() : null;
         }
         this.sourceDevice = envelope.getSourceDevice();
         this.timestamp = envelope.getTimestamp();
         this.isReceipt = envelope.isReceipt();
         if (content != null) {
             if (envelope.isUnidentifiedSender()) {
-                this.source = content.getSender().getNumber().get();
+                this.source = content.getSender().getLegacyIdentifier();
                 this.sourceDevice = content.getSenderDevice();
             }
             if (content.getDataMessage().isPresent()) {

File: src/main/java/org/asamk/signal/json/JsonSyncDataMessage.java
Patch:
@@ -10,7 +10,7 @@ class JsonSyncDataMessage extends JsonDataMessage {
     JsonSyncDataMessage(SentTranscriptMessage transcriptMessage) {
         super(transcriptMessage.getMessage());
         if (transcriptMessage.getDestination().isPresent()) {
-            this.destination = transcriptMessage.getDestination().get().getNumber().get();
+            this.destination = transcriptMessage.getDestination().get().getLegacyIdentifier();
         }
     }
 

File: src/main/java/org/asamk/signal/json/JsonSyncMessage.java
Patch:
@@ -28,7 +28,7 @@ class JsonSyncMessage {
         if (syncMessage.getBlockedList().isPresent()) {
             this.blockedNumbers = new ArrayList<>(syncMessage.getBlockedList().get().getAddresses().size());
             for (SignalServiceAddress address : syncMessage.getBlockedList().get().getAddresses()) {
-                this.blockedNumbers.add(address.getNumber().get());
+                this.blockedNumbers.add(address.getLegacyIdentifier());
             }
         }
         if (syncMessage.getRead().isPresent()) {

File: src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -1510,7 +1510,8 @@ public void receiveMessages(long timeout, TimeUnit unit, boolean returnOnTimeout
             if (!(exception instanceof org.whispersystems.libsignal.UntrustedIdentityException)) {
                 File cacheFile = null;
                 try {
-                    cacheFile = getMessageCacheFile(envelope.getSourceE164().get(), now, envelope.getTimestamp());
+                    String source = envelope.getSourceE164().isPresent() ? envelope.getSourceE164().get() : "";
+                    cacheFile = getMessageCacheFile(source, now, envelope.getTimestamp());
                     Files.delete(cacheFile.toPath());
                     // Try to delete directory if empty
                     new File(getMessageCachePath()).delete();

File: src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -461,8 +461,8 @@ private SignalProfile retrieveRecipientProfile(SignalServiceAddress address, Opt
         File avatarFile = null;
         try {
             avatarFile = encryptedProfile.getAvatar() == null ? null : retrieveProfileAvatar(address, encryptedProfile.getAvatar(), profileKey);
-        } catch (AssertionError e) {
-            System.err.println("Failed to retrieve profile avatar: " + e.getMessage());
+        } catch (Throwable e) {
+            System.err.println("Failed to retrieve profile avatar, ignoring: " + e.getMessage());
         }
 
         ProfileCipher profileCipher = new ProfileCipher(profileKey);

File: src/main/java/org/asamk/signal/storage/protocol/JsonIdentityKeyStore.java
Patch:
@@ -190,7 +190,7 @@ public JsonIdentityKeyStore deserialize(JsonParser jsonParser, DeserializationCo
                 JsonNode trustedKeysNode = node.get("trustedKeys");
                 if (trustedKeysNode.isArray()) {
                     for (JsonNode trustedKey : trustedKeysNode) {
-                        String trustedKeyName = trustedKey.has("name")
+                        String trustedKeyName = trustedKey.hasNonNull("name")
                                 ? trustedKey.get("name").asText()
                                 : null;
 

File: src/main/java/org/asamk/signal/storage/protocol/JsonSessionStore.java
Patch:
@@ -133,7 +133,7 @@ public JsonSessionStore deserialize(JsonParser jsonParser, DeserializationContex
 
             if (node.isArray()) {
                 for (JsonNode session : node) {
-                    String sessionName = session.has("name")
+                    String sessionName = session.hasNonNull("name")
                             ? session.get("name").asText()
                             : null;
                     if (UuidUtil.isUuid(sessionName)) {

File: src/main/java/org/asamk/Signal.java
Patch:
@@ -2,9 +2,9 @@
 
 import org.asamk.signal.AttachmentInvalidException;
 import org.asamk.signal.GroupNotFoundException;
-import org.freedesktop.dbus.DBusInterface;
-import org.freedesktop.dbus.DBusSignal;
 import org.freedesktop.dbus.exceptions.DBusException;
+import org.freedesktop.dbus.interfaces.DBusInterface;
+import org.freedesktop.dbus.messages.DBusSignal;
 import org.whispersystems.signalservice.api.push.exceptions.EncapsulatedExceptions;
 import org.whispersystems.signalservice.api.util.InvalidNumberException;
 
@@ -98,6 +98,7 @@ public String getSender() {
     }
 
     class SyncMessageReceived extends DBusSignal {
+
         private long timestamp;
         private String source;
         private String destination;

File: src/main/java/org/asamk/signal/DbusReceiveMessageHandler.java
Patch:
@@ -1,7 +1,7 @@
 package org.asamk.signal;
 
 import org.asamk.signal.manager.Manager;
-import org.freedesktop.dbus.DBusConnection;
+import org.freedesktop.dbus.connections.impl.DBusConnection;
 import org.whispersystems.signalservice.api.messages.SignalServiceContent;
 import org.whispersystems.signalservice.api.messages.SignalServiceEnvelope;
 

File: src/main/java/org/asamk/signal/commands/ExtendedDbusCommand.java
Patch:
@@ -3,7 +3,7 @@
 import net.sourceforge.argparse4j.inf.Namespace;
 
 import org.asamk.Signal;
-import org.freedesktop.dbus.DBusConnection;
+import org.freedesktop.dbus.connections.impl.DBusConnection;
 
 public interface ExtendedDbusCommand extends Command {
 

File: src/main/java/org/asamk/signal/commands/ReceiveCommand.java
Patch:
@@ -16,7 +16,7 @@
 import org.asamk.signal.json.JsonMessageEnvelope;
 import org.asamk.signal.manager.Manager;
 import org.asamk.signal.util.DateUtils;
-import org.freedesktop.dbus.DBusConnection;
+import org.freedesktop.dbus.connections.impl.DBusConnection;
 import org.freedesktop.dbus.exceptions.DBusException;
 import org.whispersystems.util.Base64;
 

File: src/main/java/org/asamk/signal/JsonReceiveMessageHandler.java
Patch:
@@ -8,6 +8,8 @@
 import com.fasterxml.jackson.databind.SerializationFeature;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 
+import org.asamk.signal.json.JsonError;
+import org.asamk.signal.json.JsonMessageEnvelope;
 import org.asamk.signal.manager.Manager;
 import org.whispersystems.signalservice.api.messages.SignalServiceContent;
 import org.whispersystems.signalservice.api.messages.SignalServiceEnvelope;

File: src/main/java/org/asamk/signal/json/JsonCallMessage.java
Patch:
@@ -1,4 +1,4 @@
-package org.asamk.signal;
+package org.asamk.signal.json;
 
 import org.whispersystems.signalservice.api.messages.calls.AnswerMessage;
 import org.whispersystems.signalservice.api.messages.calls.BusyMessage;

File: src/main/java/org/asamk/signal/json/JsonReceiptMessage.java
Patch:
@@ -1,4 +1,4 @@
-package org.asamk.signal;
+package org.asamk.signal.json;
 
 import org.whispersystems.signalservice.api.messages.SignalServiceReceiptMessage;
 

File: src/main/java/org/asamk/signal/manager/JsonStickerPack.java
Patch:
@@ -1,10 +1,10 @@
-package org.asamk.signal;
+package org.asamk.signal.manager;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 
 import java.util.List;
 
-public class JsonStickerPack {
+class JsonStickerPack {
 
     @JsonProperty
     public String title;

File: src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -21,7 +21,6 @@
 import org.asamk.Signal;
 import org.asamk.signal.AttachmentInvalidException;
 import org.asamk.signal.GroupNotFoundException;
-import org.asamk.signal.JsonStickerPack;
 import org.asamk.signal.NotAGroupMemberException;
 import org.asamk.signal.StickerPackInvalidException;
 import org.asamk.signal.TrustLevel;

File: src/main/java/org/asamk/Signal.java
Patch:
@@ -13,13 +13,13 @@
 
 public interface Signal extends DBusInterface {
 
-    void sendMessage(String message, List<String> attachments, String recipient) throws EncapsulatedExceptions, AttachmentInvalidException, IOException, InvalidNumberException;
+    long sendMessage(String message, List<String> attachments, String recipient) throws EncapsulatedExceptions, AttachmentInvalidException, IOException, InvalidNumberException;
 
-    void sendMessage(String message, List<String> attachments, List<String> recipients) throws EncapsulatedExceptions, AttachmentInvalidException, IOException, InvalidNumberException;
+    long sendMessage(String message, List<String> attachments, List<String> recipients) throws EncapsulatedExceptions, AttachmentInvalidException, IOException, InvalidNumberException;
 
     void sendEndSessionMessage(List<String> recipients) throws IOException, EncapsulatedExceptions, InvalidNumberException;
 
-    void sendGroupMessage(String message, List<String> attachments, byte[] groupId) throws EncapsulatedExceptions, GroupNotFoundException, AttachmentInvalidException, IOException;
+    long sendGroupMessage(String message, List<String> attachments, byte[] groupId) throws EncapsulatedExceptions, GroupNotFoundException, AttachmentInvalidException, IOException;
 
     String getContactName(String number) throws InvalidNumberException;
 

File: src/main/java/org/asamk/signal/manager/Utils.java
Patch:
@@ -252,6 +252,9 @@ static String computeSafetyNumber(SignalServiceAddress ownAddress, IdentityKey o
         } else {
             // Version 1: E164 user
             version = 1;
+            if (!ownAddress.getNumber().isPresent() || !theirAddress.getNumber().isPresent()) {
+                return "INVALID ID";
+            }
             ownId = ownAddress.getNumber().get().getBytes();
             theirId = theirAddress.getNumber().get().getBytes();
         }

File: src/main/java/org/asamk/signal/storage/groups/GroupInfo.java
Patch:
@@ -103,6 +103,9 @@ public Set<SignalServiceAddress> getMembersWithout(SignalServiceAddress address)
 
     public void addMembers(Collection<SignalServiceAddress> addresses) {
         for (SignalServiceAddress address : addresses) {
+            if (this.members.contains(address)) {
+                continue;
+            }
             removeMember(address);
             this.members.add(address);
         }

File: src/main/java/org/asamk/signal/storage/SignalAccount.java
Patch:
@@ -203,6 +203,9 @@ private void load() throws IOException {
             LegacyJsonThreadStore threadStore = jsonProcessor.convertValue(threadStoreNode, LegacyJsonThreadStore.class);
             // Migrate thread info to group and contact store
             for (ThreadInfo thread : threadStore.getThreads()) {
+                if (thread.id == null || thread.id.isEmpty()) {
+                    continue;
+                }
                 try {
                     ContactInfo contactInfo = contactStore.getContact(new SignalServiceAddress(null, thread.id));
                     if (contactInfo != null) {

File: src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -1236,6 +1236,7 @@ private void handleSignalServiceDataMessage(SignalServiceDataMessage message, bo
                 contact.number = source;
             }
             contact.profileKey = Base64.encodeBytes(message.getProfileKey().get());
+            account.getContactStore().updateContact(contact);
         }
         if (message.getPreviews().isPresent()) {
             final List<SignalServiceDataMessage.Preview> previews = message.getPreviews().get();

File: src/main/java/org/asamk/signal/commands/RemovePinCommand.java
Patch:
@@ -21,7 +21,7 @@ public int handleCommand(final Namespace ns, final Manager m) {
             return 1;
         }
         try {
-            m.setRegistrationLockPin(Optional.<String>absent());
+            m.setRegistrationLockPin(Optional.absent());
             return 0;
         } catch (IOException e) {
             System.err.println("Remove pin error: " + e.getMessage());

File: src/main/java/org/asamk/signal/commands/SendCommand.java
Patch:
@@ -61,7 +61,7 @@ public int handleCommand(final Namespace ns, final Signal signal) {
 
         if (ns.getBoolean("endsession")) {
             try {
-                signal.sendEndSessionMessage(ns.<String>getList("recipient"));
+                signal.sendEndSessionMessage(ns.getList("recipient"));
                 return 0;
             } catch (IOException e) {
                 handleIOException(e);
@@ -98,7 +98,7 @@ public int handleCommand(final Namespace ns, final Signal signal) {
                 byte[] groupId = Util.decodeGroupId(ns.getString("group"));
                 signal.sendGroupMessage(messageText, attachments, groupId);
             } else {
-                signal.sendMessage(messageText, attachments, ns.<String>getList("recipient"));
+                signal.sendMessage(messageText, attachments, ns.getList("recipient"));
             }
             return 0;
         } catch (IOException e) {

File: src/main/java/org/asamk/signal/commands/SendReactionCommand.java
Patch:
@@ -69,7 +69,7 @@ public int handleCommand(final Namespace ns, final Manager m) {
                 byte[] groupId = Util.decodeGroupId(ns.getString("group"));
                 m.sendGroupMessageReaction(emoji, isRemove, targetAuthor, targetTimestamp, groupId);
             } else {
-                m.sendMessageReaction(emoji, isRemove, targetAuthor, targetTimestamp, ns.<String>getList("recipient"));
+                m.sendMessageReaction(emoji, isRemove, targetAuthor, targetTimestamp, ns.getList("recipient"));
             }
             return 0;
         } catch (IOException e) {

File: src/main/java/org/asamk/signal/storage/protocol/JsonIdentityKeyStore.java
Patch:
@@ -185,7 +185,7 @@ public void serialize(JsonIdentityKeyStore jsonIdentityKeyStore, JsonGenerator j
         }
     }
 
-    public class Identity {
+    public static class Identity {
 
         IdentityKey identityKey;
         TrustLevel trustLevel;

File: src/main/java/org/asamk/signal/ReceiveMessageHandler.java
Patch:
@@ -76,7 +76,8 @@ public void handleMessage(SignalServiceEnvelope envelope, SignalServiceContent c
             if (content == null) {
                 System.out.println("Failed to decrypt message.");
             } else {
-                System.out.println(String.format("Sender: %s (device: %d)", content.getSender().getNumber().get(), content.getSenderDevice()));
+                ContactInfo sourceContact = m.getContact(content.getSender().getNumber().get());
+                System.out.println(String.format("Sender: %s (device: %d)", (sourceContact == null ? "" : "“" + sourceContact.name + "” ") + content.getSender().getNumber().get(), content.getSenderDevice()));
                 if (content.getDataMessage().isPresent()) {
                     SignalServiceDataMessage message = content.getDataMessage().get();
                     handleSignalServiceDataMessage(message);

File: src/main/java/org/asamk/signal/commands/Commands.java
Patch:
@@ -9,6 +9,7 @@ public class Commands {
 
     static {
         addCommand("addDevice", new AddDeviceCommand());
+        addCommand("block", new BlockCommand());
         addCommand("daemon", new DaemonCommand());
         addCommand("link", new LinkCommand());
         addCommand("listContacts", new ListContactsCommand());
@@ -25,6 +26,7 @@ public class Commands {
         addCommand("updateContact", new UpdateContactCommand());
         addCommand("setPin", new SetPinCommand());
         addCommand("trust", new TrustCommand());
+        addCommand("unblock", new UnblockCommand());
         addCommand("unregister", new UnregisterCommand());
         addCommand("updateAccount", new UpdateAccountCommand());
         addCommand("updateGroup", new UpdateGroupCommand());

File: src/main/java/org/asamk/signal/commands/ListContactsCommand.java
Patch:
@@ -20,7 +20,7 @@ public int handleCommand(final Namespace ns, final Manager m) {
         }
         List<ContactInfo> contacts = m.getContacts();
         for (ContactInfo c : contacts) {
-            System.out.println(String.format("Number: %s Name: %s", c.number, c.name));
+            System.out.println(String.format("Number: %s Name: %s  Blocked: %b", c.number, c.name, c.blocked));
         }
         return 0;
     }

File: src/main/java/org/asamk/signal/storage/contacts/ContactInfo.java
Patch:
@@ -19,6 +19,9 @@ public class ContactInfo {
     @JsonProperty
     public String profileKey;
 
+    @JsonProperty(defaultValue = "false")
+    public boolean blocked;
+
     @JsonIgnore
     public SignalServiceAddress getAddress() {
         return new SignalServiceAddress(null, number);

File: src/main/java/org/asamk/signal/ReceiveMessageHandler.java
Patch:
@@ -100,7 +100,7 @@ public void handleMessage(SignalServiceEnvelope envelope, SignalServiceContent c
                         System.out.println("Received sync read messages list");
                         for (ReadMessage rm : syncMessage.getRead().get()) {
                             ContactInfo fromContact = m.getContact(rm.getSender().getNumber().get());
-                            System.out.println("From: " + (fromContact == null ? "" : "“" + fromContact.name + "” ") + rm.getSender() + " Message timestamp: " + DateUtils.formatTimestamp(rm.getTimestamp()));
+                            System.out.println("From: " + (fromContact == null ? "" : "“" + fromContact.name + "” ") + rm.getSender().getNumber() + " Message timestamp: " + DateUtils.formatTimestamp(rm.getTimestamp()));
                         }
                     }
                     if (syncMessage.getRequest().isPresent()) {

File: src/main/java/org/asamk/signal/JsonAttachment.java
Patch:
@@ -7,15 +7,15 @@ class JsonAttachment {
 
     String contentType;
     String filename;
-    long id;
+    String id;
     int size;
 
     JsonAttachment(SignalServiceAttachment attachment) {
         this.contentType = attachment.getContentType();
 
         final SignalServiceAttachmentPointer pointer = attachment.asPointer();
         if (attachment.isPointer()) {
-            this.id = pointer.getId();
+            this.id = String.valueOf(pointer.getId());
             if (pointer.getFileName().isPresent()) {
                 this.filename = pointer.getFileName().get();
             }

File: src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -779,7 +779,7 @@ private List<SendMessageResult> sendMessage(SignalServiceDataMessage.Builder mes
             message = messageBuilder.build();
             if (message.getGroupInfo().isPresent()) {
                 try {
-                    final boolean isRecipientUpdate = true;
+                    final boolean isRecipientUpdate = false;
                     List<SendMessageResult> result = messageSender.sendMessage(new ArrayList<>(recipientsTS), getAccessFor(recipientsTS), isRecipientUpdate, message);
                     for (SendMessageResult r : result) {
                         if (r.getIdentityFailure() != null) {

File: src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -137,6 +137,7 @@ public void init() throws IOException {
             }
         } catch (AuthorizationFailedException e) {
             System.err.println("Authorization failed, was the number registered elsewhere?");
+            throw e;
         }
     }
 

File: src/main/java/org/asamk/signal/commands/SendCommand.java
Patch:
@@ -46,7 +46,7 @@ public int handleCommand(final Namespace ns, final Signal signal) {
             return 1;
         }
 
-        if (ns.getList("recipient") == null || ns.getList("recipient").size() == 0) {
+        if ((ns.getList("recipient") == null || ns.getList("recipient").size() == 0) && (ns.getBoolean("endsession") || ns.getString("group") == null)) {
             System.err.println("No recipients given");
             System.err.println("Aborting sending.");
             return 1;

File: src/main/java/org/asamk/signal/Main.java
Patch:
@@ -216,7 +216,7 @@ private static Namespace parseArgs(String[] args) {
             }
         }
         if (ns.getList("recipient") != null && !ns.getList("recipient").isEmpty() && ns.getString("group") != null) {
-            System.err.println("You cannot specify recipients by phone number and groups a the same time");
+            System.err.println("You cannot specify recipients by phone number and groups at the same time");
             System.exit(2);
         }
         return ns;

File: src/main/java/org/asamk/signal/UserAlreadyExists.java
Patch:
@@ -2,8 +2,8 @@
 
 public class UserAlreadyExists extends Exception {
 
-    private String username;
-    private String fileName;
+    private final String username;
+    private final String fileName;
 
     public UserAlreadyExists(String username, String fileName) {
         this.username = username;

File: src/main/java/org/asamk/signal/manager/Manager.java
Patch:
@@ -73,16 +73,14 @@ public class Manager implements Signal {
     private final String dataPath;
     private final String attachmentsPath;
     private final String avatarsPath;
+    private final SleepTimer timer = new UptimeSleepTimer();
 
     private SignalAccount account;
-
     private String username;
     private SignalServiceAccountManager accountManager;
     private SignalServiceMessagePipe messagePipe = null;
     private SignalServiceMessagePipe unidentifiedMessagePipe = null;
 
-    private SleepTimer timer = new UptimeSleepTimer();
-
     public Manager(String username, String settingsPath) {
         this.username = username;
         this.settingsPath = settingsPath;

File: src/main/java/org/asamk/signal/manager/Utils.java
Patch:
@@ -223,8 +223,8 @@ static String computeSafetyNumber(String ownUsername, IdentityKey ownIdentityKey
 
     static class DeviceLinkInfo {
 
-        String deviceIdentifier;
-        ECPublicKey deviceKey;
+        final String deviceIdentifier;
+        final ECPublicKey deviceKey;
 
         DeviceLinkInfo(final String deviceIdentifier, final ECPublicKey deviceKey) {
             this.deviceIdentifier = deviceIdentifier;

File: src/main/java/org/asamk/signal/storage/contacts/JsonContactsStore.java
Patch:
@@ -40,15 +40,15 @@ public void clear() {
         contacts.clear();
     }
 
-    public static class MapToListSerializer extends JsonSerializer<Map<?, ?>> {
+    private static class MapToListSerializer extends JsonSerializer<Map<?, ?>> {
 
         @Override
         public void serialize(final Map<?, ?> value, final JsonGenerator jgen, final SerializerProvider provider) throws IOException {
             jgen.writeObject(value.values());
         }
     }
 
-    public static class ContactsDeserializer extends JsonDeserializer<Map<String, ContactInfo>> {
+    private static class ContactsDeserializer extends JsonDeserializer<Map<String, ContactInfo>> {
 
         @Override
         public Map<String, ContactInfo> deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {

File: src/main/java/org/asamk/signal/storage/groups/JsonGroupStore.java
Patch:
@@ -37,15 +37,15 @@ public List<GroupInfo> getGroups() {
         return new ArrayList<>(groups.values());
     }
 
-    public static class MapToListSerializer extends JsonSerializer<Map<?, ?>> {
+    private static class MapToListSerializer extends JsonSerializer<Map<?, ?>> {
 
         @Override
         public void serialize(final Map<?, ?> value, final JsonGenerator jgen, final SerializerProvider provider) throws IOException {
             jgen.writeObject(value.values());
         }
     }
 
-    public static class GroupsDeserializer extends JsonDeserializer<Map<String, GroupInfo>> {
+    private static class GroupsDeserializer extends JsonDeserializer<Map<String, GroupInfo>> {
 
         @Override
         public Map<String, GroupInfo> deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {

File: src/main/java/org/asamk/signal/storage/protocol/JsonIdentityKeyStore.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.*;
 import org.asamk.signal.TrustLevel;
 import org.whispersystems.libsignal.IdentityKey;
@@ -189,13 +188,13 @@ public Identity(IdentityKey identityKey, TrustLevel trustLevel) {
             this.added = new Date();
         }
 
-        public Identity(IdentityKey identityKey, TrustLevel trustLevel, Date added) {
+        Identity(IdentityKey identityKey, TrustLevel trustLevel, Date added) {
             this.identityKey = identityKey;
             this.trustLevel = trustLevel;
             this.added = added;
         }
 
-        public boolean isTrusted() {
+        boolean isTrusted() {
             return trustLevel == TrustLevel.TRUSTED_UNVERIFIED ||
                     trustLevel == TrustLevel.TRUSTED_VERIFIED;
         }

File: src/main/java/org/asamk/signal/storage/protocol/JsonPreKeyStore.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.*;
 import org.whispersystems.libsignal.InvalidKeyIdException;
 import org.whispersystems.libsignal.state.PreKeyRecord;
@@ -21,7 +20,7 @@ public JsonPreKeyStore() {
 
     }
 
-    public void addPreKeys(Map<Integer, byte[]> preKeys) {
+    private void addPreKeys(Map<Integer, byte[]> preKeys) {
         store.putAll(preKeys);
     }
 

File: src/main/java/org/asamk/signal/storage/protocol/JsonSessionStore.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.*;
 import org.whispersystems.libsignal.SignalProtocolAddress;
 import org.whispersystems.libsignal.state.SessionRecord;
@@ -20,7 +19,7 @@ public JsonSessionStore() {
 
     }
 
-    public void addSessions(Map<SignalProtocolAddress, byte[]> sessions) {
+    private void addSessions(Map<SignalProtocolAddress, byte[]> sessions) {
         this.sessions.putAll(sessions);
     }
 

File: src/main/java/org/asamk/signal/storage/protocol/JsonSignedPreKeyStore.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.*;
 import org.whispersystems.libsignal.InvalidKeyIdException;
 import org.whispersystems.libsignal.state.SignedPreKeyRecord;
@@ -23,7 +22,7 @@ public JsonSignedPreKeyStore() {
 
     }
 
-    public void addSignedPreKeys(Map<Integer, byte[]> preKeys) {
+    private void addSignedPreKeys(Map<Integer, byte[]> preKeys) {
         store.putAll(preKeys);
     }
 

File: src/main/java/org/asamk/signal/storage/threads/JsonThreadStore.java
Patch:
@@ -34,15 +34,15 @@ public List<ThreadInfo> getThreads() {
         return new ArrayList<>(threads.values());
     }
 
-    public static class MapToListSerializer extends JsonSerializer<Map<?, ?>> {
+    private static class MapToListSerializer extends JsonSerializer<Map<?, ?>> {
 
         @Override
         public void serialize(final Map<?, ?> value, final JsonGenerator jgen, final SerializerProvider provider) throws IOException {
             jgen.writeObject(value.values());
         }
     }
 
-    public static class ThreadsDeserializer extends JsonDeserializer<Map<String, ThreadInfo>> {
+    private static class ThreadsDeserializer extends JsonDeserializer<Map<String, ThreadInfo>> {
 
         @Override
         public Map<String, ThreadInfo> deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {

File: src/main/java/org/asamk/signal/storage/groups/JsonGroupStore.java
Patch:
@@ -30,8 +30,7 @@ public void updateGroup(GroupInfo group) {
     }
 
     public GroupInfo getGroup(byte[] groupId) {
-        GroupInfo g = groups.get(Base64.encodeBytes(groupId));
-        return g;
+        return groups.get(Base64.encodeBytes(groupId));
     }
 
     public List<GroupInfo> getGroups() {

File: src/main/java/org/asamk/signal/storage/protocol/JsonPreKeyStore.java
Patch:
@@ -56,7 +56,7 @@ public void removePreKey(int preKeyId) {
     public static class JsonPreKeyStoreDeserializer extends JsonDeserializer<JsonPreKeyStore> {
 
         @Override
-        public JsonPreKeyStore deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JsonProcessingException {
+        public JsonPreKeyStore deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
             JsonNode node = jsonParser.getCodec().readTree(jsonParser);
 
             Map<Integer, byte[]> preKeyMap = new HashMap<>();
@@ -82,7 +82,7 @@ public JsonPreKeyStore deserialize(JsonParser jsonParser, DeserializationContext
     public static class JsonPreKeyStoreSerializer extends JsonSerializer<JsonPreKeyStore> {
 
         @Override
-        public void serialize(JsonPreKeyStore jsonPreKeyStore, JsonGenerator json, SerializerProvider serializerProvider) throws IOException, JsonProcessingException {
+        public void serialize(JsonPreKeyStore jsonPreKeyStore, JsonGenerator json, SerializerProvider serializerProvider) throws IOException {
             json.writeStartArray();
             for (Map.Entry<Integer, byte[]> preKey : jsonPreKeyStore.store.entrySet()) {
                 json.writeStartObject();

File: src/main/java/org/asamk/signal/storage/protocol/JsonSessionStore.java
Patch:
@@ -78,7 +78,7 @@ public synchronized void deleteAllSessions(String name) {
     public static class JsonSessionStoreDeserializer extends JsonDeserializer<JsonSessionStore> {
 
         @Override
-        public JsonSessionStore deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JsonProcessingException {
+        public JsonSessionStore deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
             JsonNode node = jsonParser.getCodec().readTree(jsonParser);
 
             Map<SignalProtocolAddress, byte[]> sessionMap = new HashMap<>();
@@ -104,7 +104,7 @@ public JsonSessionStore deserialize(JsonParser jsonParser, DeserializationContex
     public static class JsonPreKeyStoreSerializer extends JsonSerializer<JsonSessionStore> {
 
         @Override
-        public void serialize(JsonSessionStore jsonSessionStore, JsonGenerator json, SerializerProvider serializerProvider) throws IOException, JsonProcessingException {
+        public void serialize(JsonSessionStore jsonSessionStore, JsonGenerator json, SerializerProvider serializerProvider) throws IOException {
             json.writeStartArray();
             for (Map.Entry<SignalProtocolAddress, byte[]> preKey : jsonSessionStore.sessions.entrySet()) {
                 json.writeStartObject();

File: src/main/java/org/asamk/signal/storage/protocol/JsonSignedPreKeyStore.java
Patch:
@@ -73,7 +73,7 @@ public void removeSignedPreKey(int signedPreKeyId) {
     public static class JsonSignedPreKeyStoreDeserializer extends JsonDeserializer<JsonSignedPreKeyStore> {
 
         @Override
-        public JsonSignedPreKeyStore deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JsonProcessingException {
+        public JsonSignedPreKeyStore deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
             JsonNode node = jsonParser.getCodec().readTree(jsonParser);
 
             Map<Integer, byte[]> preKeyMap = new HashMap<>();
@@ -99,7 +99,7 @@ public JsonSignedPreKeyStore deserialize(JsonParser jsonParser, DeserializationC
     public static class JsonSignedPreKeyStoreSerializer extends JsonSerializer<JsonSignedPreKeyStore> {
 
         @Override
-        public void serialize(JsonSignedPreKeyStore jsonPreKeyStore, JsonGenerator json, SerializerProvider serializerProvider) throws IOException, JsonProcessingException {
+        public void serialize(JsonSignedPreKeyStore jsonPreKeyStore, JsonGenerator json, SerializerProvider serializerProvider) throws IOException {
             json.writeStartArray();
             for (Map.Entry<Integer, byte[]> signedPreKey : jsonPreKeyStore.store.entrySet()) {
                 json.writeStartObject();

File: src/main/java/org/asamk/signal/util/Hex.java
Patch:
@@ -11,8 +11,8 @@ private Hex() {
 
     public static String toStringCondensed(byte[] bytes) {
         StringBuffer buf = new StringBuffer();
-        for (int i = 0; i < bytes.length; i++) {
-            appendHexChar(buf, bytes[i]);
+        for (final byte aByte : bytes) {
+            appendHexChar(buf, aByte);
         }
         return buf.toString();
     }

File: src/main/java/org/asamk/signal/Main.java
Patch:
@@ -1182,7 +1182,9 @@ private void handleSignalServiceDataMessage(SignalServiceDataMessage message) {
                         System.out.println("  Filename: " + attachment.getFileName());
                         System.out.println("  Type: " + attachment.getContentType());
                         System.out.println("  Thumbnail:");
-                        printAttachment(attachment.getThumbnail());
+                        if (attachment.getThumbnail() != null) {
+                            printAttachment(attachment.getThumbnail());
+                        }
                     }
                 }
             }

File: src/main/java/org/asamk/Signal.java
Patch:
@@ -27,7 +27,7 @@ public interface Signal extends DBusInterface {
 
     List<String> getGroupMembers(byte[] groupId);
 
-    void updateGroup(byte[] groupId, String name, List<String> members, String avatar) throws IOException, EncapsulatedExceptions, GroupNotFoundException, AttachmentInvalidException;
+    byte[] updateGroup(byte[] groupId, String name, List<String> members, String avatar) throws IOException, EncapsulatedExceptions, GroupNotFoundException, AttachmentInvalidException;
 
     class MessageReceived extends DBusSignal {
         private long timestamp;

File: src/main/java/org/asamk/signal/Main.java
Patch:
@@ -1038,6 +1038,7 @@ private void printAttachment(SignalServiceAttachment attachment) {
             if (attachment.isPointer()) {
                 final SignalServiceAttachmentPointer pointer = attachment.asPointer();
                 System.out.println("  Id: " + pointer.getId() + " Key length: " + pointer.getKey().length + (pointer.getRelay().isPresent() ? " Relay: " + pointer.getRelay().get() : ""));
+                System.out.println("  Filename: " + (pointer.getFileName().isPresent() ? pointer.getFileName().get() : "-"));
                 System.out.println("  Size: " + (pointer.getSize().isPresent() ? pointer.getSize().get() + " bytes" : "<unavailable>") + (pointer.getPreview().isPresent() ? " (Preview is available: " + pointer.getPreview().get().length + " bytes)" : ""));
                 File file = m.getAttachmentFile(pointer.getId());
                 if (file.exists()) {

File: src/main/java/org/asamk/signal/Manager.java
Patch:
@@ -582,7 +582,7 @@ private GroupInfo getGroupForSending(byte[] groupId) throws GroupNotFoundExcepti
     }
     
     public List<GroupInfo> getGroups() {
-    	return groupStore.getGroups();
+        return groupStore.getGroups();
     }
 
     @Override

File: src/main/java/org/asamk/signal/JsonContactsStore.java
Patch:
@@ -19,7 +19,7 @@ public class JsonContactsStore {
     @JsonDeserialize(using = ContactsDeserializer.class)
     private Map<String, ContactInfo> contacts = new HashMap<>();
 
-    private static final ObjectMapper jsonProcessot = new ObjectMapper();
+    private static final ObjectMapper jsonProcessor = new ObjectMapper();
 
     void updateContact(ContactInfo contact) {
         contacts.put(contact.number, contact);
@@ -47,7 +47,7 @@ public Map<String, ContactInfo> deserialize(JsonParser jsonParser, Deserializati
             Map<String, ContactInfo> contacts = new HashMap<>();
             JsonNode node = jsonParser.getCodec().readTree(jsonParser);
             for (JsonNode n : node) {
-                ContactInfo c = jsonProcessot.treeToValue(n, ContactInfo.class);
+                ContactInfo c = jsonProcessor.treeToValue(n, ContactInfo.class);
                 contacts.put(c.number, c);
             }
 

File: src/main/java/org/asamk/signal/JsonGroupStore.java
Patch:
@@ -21,7 +21,7 @@ public class JsonGroupStore {
 
     public static List<GroupInfo> groupsWithLegacyAvatarId = new ArrayList<>();
 
-    private static final ObjectMapper jsonProcessot = new ObjectMapper();
+    private static final ObjectMapper jsonProcessor = new ObjectMapper();
 
     void updateGroup(GroupInfo group) {
         groups.put(Base64.encodeBytes(group.groupId), group);
@@ -49,7 +49,7 @@ public Map<String, GroupInfo> deserialize(JsonParser jsonParser, Deserialization
             Map<String, GroupInfo> groups = new HashMap<>();
             JsonNode node = jsonParser.getCodec().readTree(jsonParser);
             for (JsonNode n : node) {
-                GroupInfo g = jsonProcessot.treeToValue(n, GroupInfo.class);
+                GroupInfo g = jsonProcessor.treeToValue(n, GroupInfo.class);
                 // Check if a legacy avatarId exists
                 if (g.getAvatarId() != 0) {
                     groupsWithLegacyAvatarId.add(g);

File: src/main/java/org/asamk/signal/JsonIdentityKeyStore.java
Patch:
@@ -58,7 +58,9 @@ public void saveIdentity(String name, IdentityKey identityKey, TrustLevel trustL
                 if (!id.identityKey.equals(identityKey))
                     continue;
 
-                id.trustLevel = trustLevel;
+                if (id.trustLevel.compareTo(trustLevel) < 0) {
+                    id.trustLevel = trustLevel;
+                }
                 if (added != null) {
                     id.added = added;
                 }

File: src/main/java/org/asamk/Signal.java
Patch:
@@ -5,7 +5,6 @@
 import org.freedesktop.dbus.DBusInterface;
 import org.freedesktop.dbus.DBusSignal;
 import org.freedesktop.dbus.exceptions.DBusException;
-import org.whispersystems.signalservice.api.crypto.UntrustedIdentityException;
 import org.whispersystems.signalservice.api.push.exceptions.EncapsulatedExceptions;
 
 import java.io.IOException;

File: src/main/java/org/asamk/signal/Manager.java
Patch:
@@ -464,6 +464,9 @@ private static SignalServiceAttachmentStream createAttachment(File attachmentFil
         InputStream attachmentStream = new FileInputStream(attachmentFile);
         final long attachmentSize = attachmentFile.length();
         String mime = Files.probeContentType(attachmentFile.toPath());
+        if (mime == null) {
+            mime = "application/octet-stream";
+        }
         return new SignalServiceAttachmentStream(attachmentStream, mime, attachmentSize, null);
     }
 

File: src/main/java/org/asamk/signal/Manager.java
Patch:
@@ -274,12 +274,12 @@ public boolean isRegistered() {
         return registered;
     }
 
-    public void register(boolean voiceVerication) throws IOException {
+    public void register(boolean voiceVerification) throws IOException {
         password = Util.getSecret(18);
 
         accountManager = new SignalServiceAccountManager(URL, TRUST_STORE, username, password, USER_AGENT);
 
-        if (voiceVerication)
+        if (voiceVerification)
             accountManager.requestVoiceVerificationCode();
         else
             accountManager.requestSmsVerificationCode();

File: src/main/java/org/asamk/signal/Manager.java
Patch:
@@ -555,7 +555,7 @@ public byte[] sendUpdateGroupMessage(byte[] groupId, String name, Collection<Str
                 .asGroupMessage(group.build())
                 .build();
 
-        final Set<String> membersSend = g.members;
+        final List<String> membersSend = new ArrayList<>(g.members);
         membersSend.remove(this.username);
         sendMessage(message, membersSend);
         return g.groupId;

File: src/main/java/org/asamk/signal/Main.java
Patch:
@@ -504,7 +504,7 @@ private static Namespace parseArgs(String[] args) {
                 .help("Show package version.")
                 .action(Arguments.version());
         parser.addArgument("--config")
-                .help("Set the path, where to store the config (Default: $HOME/.config/signal-cli).");
+                .help("Set the path, where to store the config (Default: $HOME/.config/signal).");
 
         MutuallyExclusiveGroup mut = parser.addMutuallyExclusiveGroup();
         mut.addArgument("-u", "--username")

File: src/main/java/org/asamk/signal/Manager.java
Patch:
@@ -290,7 +290,7 @@ public static Map<String, String> getQueryMap(String query) {
     }
 
     public void addDeviceLink(URI linkUri) throws IOException, InvalidKeyException {
-        Map<String, String> query = getQueryMap(linkUri.getQuery());
+        Map<String, String> query = getQueryMap(linkUri.getRawQuery());
         String deviceIdentifier = query.get("uuid");
         String publicKeyEncoded = query.get("pub_key");
 
@@ -300,10 +300,10 @@ public void addDeviceLink(URI linkUri) throws IOException, InvalidKeyException {
 
         ECPublicKey deviceKey = Curve.decodePoint(Base64.decode(publicKeyEncoded), 0);
 
-        addDeviceLink(deviceIdentifier, deviceKey);
+        addDevice(deviceIdentifier, deviceKey);
     }
 
-    private void addDeviceLink(String deviceIdentifier, ECPublicKey deviceKey) throws IOException, InvalidKeyException {
+    private void addDevice(String deviceIdentifier, ECPublicKey deviceKey) throws IOException, InvalidKeyException {
         IdentityKeyPair identityKeyPair = signalProtocolStore.getIdentityKeyPair();
         String verificationCode = accountManager.getNewDeviceVerificationCode();
 

File: src/main/java/org/asamk/signal/Main.java
Patch:
@@ -48,7 +48,7 @@ public class Main {
 
     public static void main(String[] args) {
         // Workaround for BKS truststore
-        Security.insertProviderAt(new org.spongycastle.jce.provider.BouncyCastleProvider(), 1);
+        Security.insertProviderAt(new org.bouncycastle.jce.provider.BouncyCastleProvider(), 1);
 
         Namespace ns = parseArgs(args);
         if (ns == null) {

File: src/main/java/org/asamk/textsecure/Main.java
Patch:
@@ -180,7 +180,7 @@ public static void main(String[] args) {
                         } catch (GroupNotFoundException e) {
                             handleGroupNotFoundException(e);
                         } catch (AttachmentInvalidException e) {
-                            System.err.println("Failed to add attachment (\"" + e.getAttachment() + "\"): " + e.getMessage());
+                            System.err.println("Failed to add attachment: " + e.getMessage());
                             System.err.println("Aborting sending.");
                             System.exit(1);
                         }
@@ -259,7 +259,7 @@ public static void main(String[] args) {
                     } catch (IOException e) {
                         handleIOException(e);
                     } catch (AttachmentInvalidException e) {
-                        System.err.println("Failed to add avatar attachment (\"" + e.getAttachment() + ") for group\": " + e.getMessage());
+                        System.err.println("Failed to add avatar attachment for group\": " + e.getMessage());
                         System.err.println("Aborting sending.");
                         System.exit(1);
                     } catch (GroupNotFoundException e) {
@@ -319,7 +319,7 @@ public static void main(String[] args) {
     }
 
     private static void handleGroupNotFoundException(GroupNotFoundException e) {
-        System.err.println("Failed to send to group \"" + Base64.encodeBytes(e.getGroupId()) + "\": Unknown group");
+        System.err.println("Failed to send to group: " + e.getMessage());
         System.err.println("Aborting sending.");
         System.exit(1);
     }

File: src/main/java/cli/Main.java
Patch:
@@ -95,7 +95,7 @@ public static void main(String[] args) {
                         System.exit(1);
                     }
                     try {
-                        m.sendEndSessionMessage(ns.getList("recipient"));
+                        m.sendEndSessionMessage(ns.<String>getList("recipient"));
                     } catch (IOException e) {
                         handleIOException(e);
                     } catch (EncapsulatedExceptions e) {
@@ -120,7 +120,7 @@ public static void main(String[] args) {
                             byte[] groupId = decodeGroupId(ns.getString("group"));
                             m.sendGroupMessage(messageText, ns.<String>getList("attachment"), groupId);
                         } else {
-                            m.sendMessage(messageText, ns.<String>getList("attachment"), ns.getList("recipient"));
+                            m.sendMessage(messageText, ns.<String>getList("attachment"), ns.<String>getList("recipient"));
                         }
                     } catch (IOException e) {
                         handleIOException(e);
@@ -194,7 +194,7 @@ public static void main(String[] args) {
                     if (ns.getString("group") != null) {
                         groupId = decodeGroupId(ns.getString("group"));
                     }
-                    byte[] newGroupId = m.sendUpdateGroupMessage(groupId, ns.getString("name"), ns.getList("member"), ns.getString("avatar"));
+                    byte[] newGroupId = m.sendUpdateGroupMessage(groupId, ns.getString("name"), ns.<String>getList("member"), ns.getString("avatar"));
                     if (groupId == null) {
                         System.out.println("Creating new group \"" + Base64.encodeBytes(newGroupId) + "\" …");
                     }

File: src/main/java/cli/Manager.java
Patch:
@@ -128,6 +128,9 @@ public void load() throws IOException, InvalidKeyException {
         if (groupStoreNode != null) {
             groupStore = jsonProcessot.convertValue(groupStoreNode, JsonGroupStore.class);
         }
+        if (groupStore == null) {
+            groupStore = new JsonGroupStore();
+        }
         accountManager = new TextSecureAccountManager(URL, TRUST_STORE, username, password, USER_AGENT);
     }
 

File: src/main/java/cli/JsonIdentityKeyStore.java
Patch:
@@ -69,7 +69,7 @@ public JsonIdentityKeyStore deserialize(JsonParser jsonParser, DeserializationCo
                         String trustedKeyName = trustedKey.get("name").asText();
                         try {
                             trustedKeyMap.put(trustedKeyName, new IdentityKey(Base64.decode(trustedKey.get("identityKey").asText()), 0));
-                        }  catch (InvalidKeyException | IOException e) {
+                        } catch (InvalidKeyException | IOException e) {
                             System.out.println(String.format("Error while decoding key for: %s", trustedKeyName));
                         }
                     }

File: src/main/java/cli/JsonPreKeyStore.java
Patch:
@@ -66,7 +66,7 @@ public JsonPreKeyStore deserialize(JsonParser jsonParser, DeserializationContext
                     Integer preKeyId = preKey.get("id").asInt();
                     try {
                         preKeyMap.put(preKeyId, Base64.decode(preKey.get("record").asText()));
-                    }  catch (IOException e) {
+                    } catch (IOException e) {
                         System.out.println(String.format("Error while decoding prekey for: %s", preKeyId));
                     }
                 }

File: src/main/java/cli/JsonSessionStore.java
Patch:
@@ -87,7 +87,7 @@ public JsonSessionStore deserialize(JsonParser jsonParser, DeserializationContex
                     String sessionName = session.get("name").asText();
                     try {
                         sessionMap.put(new AxolotlAddress(sessionName, session.get("deviceId").asInt()), Base64.decode(session.get("record").asText()));
-                    }  catch (IOException e) {
+                    } catch (IOException e) {
                         System.out.println(String.format("Error while decoding session for: %s", sessionName));
                     }
                 }

File: src/main/java/cli/JsonSignedPreKeyStore.java
Patch:
@@ -83,7 +83,7 @@ public JsonSignedPreKeyStore deserialize(JsonParser jsonParser, DeserializationC
                     Integer preKeyId = preKey.get("id").asInt();
                     try {
                         preKeyMap.put(preKeyId, Base64.decode(preKey.get("record").asText()));
-                    }  catch (IOException e) {
+                    } catch (IOException e) {
                         System.out.println(String.format("Error while decoding prekey for: %s", preKeyId));
                     }
                 }

File: src/main/java/cli/Manager.java
Patch:
@@ -56,8 +56,8 @@ class Manager {
     private final static String URL = "https://textsecure-service.whispersystems.org";
     private final static TrustStore TRUST_STORE = new WhisperTrustStore();
 
-    public final static String PROJECT_NAME =  Manager.class.getPackage().getImplementationTitle();
-    public final static String PROJECT_VERSION =  Manager.class.getPackage().getImplementationVersion();
+    public final static String PROJECT_NAME = Manager.class.getPackage().getImplementationTitle();
+    public final static String PROJECT_VERSION = Manager.class.getPackage().getImplementationVersion();
     private final static String USER_AGENT = PROJECT_NAME + " " + PROJECT_VERSION;
 
     private final static String settingsPath = System.getProperty("user.home") + "/.config/textsecure";

File: src/main/java/cli/Main.java
Patch:
@@ -275,7 +275,7 @@ public void handleMessage(TextSecureEnvelope envelope) {
                                 if (attachment.isPointer()) {
                                     final TextSecureAttachmentPointer pointer = attachment.asPointer();
                                     System.out.println("  Id: " + pointer.getId() + " Key length: " + pointer.getKey().length + (pointer.getRelay().isPresent() ? " Relay: " + pointer.getRelay().get() : ""));
-                                    System.out.println((pointer.getSize().isPresent() ? " Size: " + pointer.getSize().get() : " bytes") + (pointer.getPreview().isPresent() ? " (Preview is available: " + pointer.getPreview().get().length + " bytes)" : ""));
+                                    System.out.println("  Size: " + (pointer.getSize().isPresent() ? pointer.getSize().get() + " bytes" : "<unavailable>") + (pointer.getPreview().isPresent() ? " (Preview is available: " + pointer.getPreview().get().length + " bytes)" : ""));
                                     try {
                                         File file = m.retrieveAttachment(pointer);
                                         System.out.println("  Stored plaintext in: " + file);

File: src/main/java/cli/Manager.java
Patch:
@@ -293,7 +293,9 @@ public File retrieveAttachment(TextSecureAttachmentPointer pointer) throws IOExc
             if (output != null) {
                 output.close();
             }
-            tmpFile.delete();
+            if (!tmpFile.delete()) {
+                System.err.println("Failed to delete temp file: " + tmpFile);
+            }
         }
         return outputFile;
     }

File: src/main/java/cli/Main.java
Patch:
@@ -105,10 +105,10 @@ public static void main(String[] args) {
                     }
                 }
 
-                final List<String> attachments = ns.<String>getList("attachment");
+                final List<String> attachments = ns.getList("attachment");
                 List<TextSecureAttachment> textSecureAttachments = null;
                 if (attachments != null) {
-                    textSecureAttachments = new ArrayList<TextSecureAttachment>(attachments.size());
+                    textSecureAttachments = new ArrayList<>(attachments.size());
                     for (String attachment : attachments) {
                         try {
                             File attachmentFile = new File(attachment);

File: src/main/java/cli/Manager.java
Patch:
@@ -122,7 +122,7 @@ public void save() {
             writer.flush();
             writer.close();
         } catch (Exception e) {
-            System.out.println("Saving file error: " + e.getMessage());
+            System.err.println("Saving file error: " + e.getMessage());
         }
     }
 
@@ -259,7 +259,7 @@ public void receiveMessages(int timeoutSeconds, boolean returnOnTimeout, Receive
                     if (returnOnTimeout)
                         return;
                 } catch (InvalidVersionException e) {
-                    System.out.println("Ignoring error: " + e.getMessage());
+                    System.err.println("Ignoring error: " + e.getMessage());
                 }
                 save();
             }

File: src/main/java/cli/JsonAxolotlStore.java
Patch:
@@ -10,7 +10,7 @@
 import java.io.IOException;
 import java.util.List;
 
-public class JsonAxolotlStore implements AxolotlStore {
+class JsonAxolotlStore implements AxolotlStore {
     private final JsonPreKeyStore preKeyStore;
     private final JsonSessionStore sessionStore;
     private final JsonSignedPreKeyStore signedPreKeyStore;

File: src/main/java/cli/JsonIdentityKeyStore.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-public class JsonIdentityKeyStore implements IdentityKeyStore {
+class JsonIdentityKeyStore implements IdentityKeyStore {
 
     private final Map<String, IdentityKey> trustedKeys = new HashMap<>();
 

File: src/main/java/cli/JsonPreKeyStore.java
Patch:
@@ -10,15 +10,15 @@
 import java.util.HashMap;
 import java.util.Map;
 
-public class JsonPreKeyStore implements PreKeyStore {
+class JsonPreKeyStore implements PreKeyStore {
 
     private final Map<Integer, byte[]> store = new HashMap<>();
 
     public JsonPreKeyStore() {
 
     }
 
-    public JsonPreKeyStore(JSONArray list) throws IOException {
+    public JsonPreKeyStore(JSONArray list) {
         for (int i = 0; i < list.length(); i++) {
             JSONObject k = list.getJSONObject(i);
             try {

File: src/main/java/cli/JsonSessionStore.java
Patch:
@@ -9,15 +9,15 @@
 import java.io.IOException;
 import java.util.*;
 
-public class JsonSessionStore implements SessionStore {
+class JsonSessionStore implements SessionStore {
 
-    private Map<AxolotlAddress, byte[]> sessions = new HashMap<>();
+    private final Map<AxolotlAddress, byte[]> sessions = new HashMap<>();
 
     public JsonSessionStore() {
 
     }
 
-    public JsonSessionStore(JSONArray list) throws IOException {
+    public JsonSessionStore(JSONArray list) {
         for (int i = 0; i < list.length(); i++) {
             JSONObject k = list.getJSONObject(i);
             try {

File: src/main/java/cli/JsonSignedPreKeyStore.java
Patch:
@@ -12,15 +12,15 @@
 import java.util.List;
 import java.util.Map;
 
-public class JsonSignedPreKeyStore implements SignedPreKeyStore {
+class JsonSignedPreKeyStore implements SignedPreKeyStore {
 
     private final Map<Integer, byte[]> store = new HashMap<>();
 
     public JsonSignedPreKeyStore() {
 
     }
 
-    public JsonSignedPreKeyStore(JSONArray list) throws IOException {
+    public JsonSignedPreKeyStore(JSONArray list) {
         for (int i = 0; i < list.length(); i++) {
             JSONObject k = list.getJSONObject(i);
             try {

File: src/main/java/cli/Main.java
Patch:
@@ -232,7 +232,7 @@ private static void sendMessage(Manager m, String messageText, List<TextSecureAt
     }
 
     private static class ReceiveMessageHandler implements Manager.ReceiveMessageHandler {
-        Manager m;
+        final Manager m;
 
         public ReceiveMessageHandler(Manager m) {
             this.m = m;

File: src/main/java/cli/Util.java
Patch:
@@ -3,19 +3,19 @@
 import java.security.NoSuchAlgorithmException;
 import java.security.SecureRandom;
 
-public class Util {
+class Util {
     public static String getSecret(int size) {
         byte[] secret = getSecretBytes(size);
         return Base64.encodeBytes(secret);
     }
 
-    public static byte[] getSecretBytes(int size) {
+    private static byte[] getSecretBytes(int size) {
         byte[] secret = new byte[size];
         getSecureRandom().nextBytes(secret);
         return secret;
     }
 
-    public static SecureRandom getSecureRandom() {
+    private static SecureRandom getSecureRandom() {
         try {
             return SecureRandom.getInstance("SHA1PRNG");
         } catch (NoSuchAlgorithmException e) {

File: src/main/java/cli/WhisperTrustStore.java
Patch:
@@ -4,7 +4,7 @@
 
 import java.io.InputStream;
 
-public class WhisperTrustStore implements TrustStore {
+class WhisperTrustStore implements TrustStore {
 
     @Override
     public InputStream getKeyStoreInputStream() {

