File: src/main/java/net/querz/mcaselector/version/anvil118/Anvil118ChunkFilter.java
Patch:
@@ -333,7 +333,9 @@ public void replaceBlocks(CompoundTag data, Map<String, BlockReplaceData> replac
 			}
 
 			for (CompoundTag section : sections.iterateType(CompoundTag.class)) {
-				CompoundTag blockStatesTag = section.getCompound("block_states");
+				CompoundTag blockStatesTag = section.getCompoundTag("block_states");
+				if(blockStatesTag == null) continue;
+
 				ListTag palette = Helper.tagFromCompound(blockStatesTag, "palette");
 				long[] blockStates = Helper.longArrayFromCompound(blockStatesTag, "data");
 				if (palette == null) {

File: src/main/java/net/querz/mcaselector/version/anvil119/Anvil119ChunkFilter.java
Patch:
@@ -236,7 +236,9 @@ public void replaceBlocks(CompoundTag data, Map<String, BlockReplaceData> replac
 		}
 
 		for (CompoundTag section : sections.iterateType(CompoundTag.class)) {
-			CompoundTag blockStatesTag = section.getCompound("block_states");
+			CompoundTag blockStatesTag = section.getCompoundTag("block_states");
+			if(blockStatesTag == null) continue;
+
 			ListTag palette = Helper.tagFromCompound(blockStatesTag, "palette");
 			long[] blockStates = Helper.longArrayFromCompound(blockStatesTag, "data");
 			if (palette == null) {

File: src/main/java/net/querz/mcaselector/ui/DialogHelper.java
Patch:
@@ -595,12 +595,14 @@ public static void openWorld(TileMap tileMap, Stage primaryStage) {
 		File file = createDirectoryChooser(lastOpenDirectory).showDialog(primaryStage);
 		if (file != null && file.isDirectory()) {
 			List<File> dimensions = FileHelper.detectDimensionDirectories(file);
-			if (dimensions.size() == 0) {
+			if (dimensions.isEmpty()) {
 				new ErrorDialog(primaryStage, String.format("no dimensions found in %s", file.getAbsolutePath()));
 				LOGGER.warn("no dimensions found in {}", file.getAbsolutePath());
 				return;
 			}
 
+			FileHelper.setLastOpenedDirectory("open_world", file.getAbsolutePath());
+
 			// if there is only one dimension, open it instantly
 			if (dimensions.size() == 1) {
 				setWorld(FileHelper.detectWorldDirectories(dimensions.get(0)), dimensions, tileMap, primaryStage);

File: src/main/java/net/querz/mcaselector/selection/ChunkSet.java
Patch:
@@ -61,6 +61,7 @@ public ChunkSet flip() {
 		for (int i = 0; i < 16; i++) {
 			result.words[i] = ~words[i];
 		}
+		result.setBits = (short) (1024 - setBits);
 		return result;
 	}
 

File: src/main/java/net/querz/mcaselector/ui/ProgressTask.java
Patch:
@@ -46,7 +46,7 @@ public void incrementProgress(String info) {
 
 	@Override
 	public void incrementProgress(String info, int count) {
-		updateProgress(info, current.getAndAdd(count), max);
+		updateProgress(info, current.addAndGet(count), max);
 	}
 
 	public void setLocked(boolean locked) {

File: src/main/java/net/querz/mcaselector/version/anvil118/Anvil118EntityFilter.java
Patch:
@@ -12,7 +12,7 @@ public class Anvil118EntityFilter extends Anvil117EntityFilter {
 	@Override
 	public void deleteEntities(ChunkData data, List<Range> ranges) {
 		if (data.entities() != null) {
-			ListTag entities = Helper.tagFromLevelFromRoot(data.entities().getData(), "Entities", null);
+			ListTag entities = LegacyHelper.getEntities(data.entities().getData(), data.entities().getData().getIntOrDefault("DataVersion", 0));
 			deleteEntities(entities, ranges);
 		}
 

File: src/main/java/net/querz/mcaselector/config/OverlayConfig.java
Patch:
@@ -14,7 +14,7 @@ public class OverlayConfig extends Config {
 
 	static {
 		GsonBuilder builder = new GsonBuilder();
-		builder.registerTypeAdapter(Overlay.class, new OverlayAdapter());
+		builder.registerTypeHierarchyAdapter(Overlay.class, new OverlayAdapter());
 		gsonInstance = builder.create();
 	}
 

File: src/main/java/net/querz/mcaselector/version/anvil118/Anvil118ChunkFilter.java
Patch:
@@ -1,6 +1,7 @@
 package net.querz.mcaselector.version.anvil118;
 
 import net.querz.mcaselector.io.registry.BiomeRegistry;
+import net.querz.mcaselector.io.registry.StatusRegistry;
 import net.querz.mcaselector.point.Point2i;
 import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.range.Range;
@@ -757,12 +758,12 @@ public StringTag getStatus(CompoundTag data) {
 	}
 
 	@Override
-	public void setStatus(CompoundTag data, String status) {
+	public void setStatus(CompoundTag data, StatusRegistry.StatusIdentifier status) {
 		Integer dataVersion = Helper.intFromCompound(data, "DataVersion");
 		if (dataVersion == null) {
 			return;
 		}
-		LegacyHelper.setStatus(data, status, dataVersion);
+		LegacyHelper.setStatus(data, status.getStatus(), dataVersion);
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/io/mca/MCAFile.java
Patch:
@@ -156,12 +156,12 @@ public void deFragment(File dest) throws IOException {
 			// loop over all offsets, readHeader the raw byte data (complete sections) and write it to new file
 			for (int i = 0; i < offsets.length; i++) {
 				// don't do anything if this chunk is empty
-				if (offsets[i] == 0 || sectors[i] <= 0) {
+				if (offsets[i] == 0 || sectors[i] == 0) {
 					skippedChunks++;
 					continue;
 				}
 
-				int sectors = this.sectors[i];
+				int sectors = this.sectors[i] & 0xFF;
 
 				// write offset and sector size to tmp file
 				rafTmp.seek(i * 4L);

File: src/main/java/net/querz/mcaselector/ui/DialogHelper.java
Patch:
@@ -387,7 +387,7 @@ public static void swapChunks(TileMap tileMap, Stage primaryStage) {
 			LongArrayList chunks = new LongArrayList(2);
 			for (Long2ObjectMap.Entry<ChunkSet> entry : markedChunks) {
 				for (int markedChunk : entry.getValue()) {
-					chunks.add(new Point2i(entry.getLongKey()).add(new Point2i(markedChunk)).asLong());
+					chunks.add(new Point2i(entry.getLongKey()).regionToChunk().add(new Point2i(markedChunk)).asLong());
 				}
 			}
 			if (chunks.size() != 2) {

File: src/main/java/net/querz/mcaselector/changer/fields/BiomeField.java
Patch:
@@ -57,11 +57,11 @@ public BiomeRegistry.BiomeIdentifier getOldValue(ChunkData data) {
 
 	@Override
 	public void change(ChunkData data) {
-		VersionController.getChunkFilter(data.region().getData().getInt("DataVersion")).changeBiome(data.region().getData(), getNewValue());
+		VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0)).changeBiome(data.region().getData(), getNewValue());
 	}
 
 	@Override
 	public void force(ChunkData data) {
-		VersionController.getChunkFilter(data.region().getData().getInt("DataVersion")).forceBiome(data.region().getData(), getNewValue());
+		VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0)).forceBiome(data.region().getData(), getNewValue());
 	}
 }

File: src/main/java/net/querz/mcaselector/changer/fields/DeleteEntitiesField.java
Patch:
@@ -27,7 +27,7 @@ public boolean parseNewValue(String s) {
 
 	@Override
 	public void change(ChunkData data) {
-		VersionController.getEntityFilter(data.region().getData().getInt("DataVersion")).deleteEntities(data, null);
+		VersionController.getEntityFilter(data.region().getData().getIntOrDefault("DataVersion", 0)).deleteEntities(data, null);
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/changer/fields/DeleteSectionsField.java
Patch:
@@ -39,7 +39,7 @@ public boolean parseNewValue(String s) {
 	@Override
 	public void change(ChunkData data) {
 		if (data.region() != null && data.region().getData() != null) {
-			int dataVersion = data.region().getData().getInt("DataVersion");
+			int dataVersion = data.region().getData().getIntOrDefault("DataVersion", 0);
 			ChunkFilter chunkFilter = VersionController.getChunkFilter(dataVersion);
 			chunkFilter.deleteSections(data.region().getData(), getNewValue());
 
@@ -52,7 +52,7 @@ public void change(ChunkData data) {
 		}
 		// delete entities and poi as well
 		if (data.entities() != null && data.entities().getData() != null) {
-			EntityFilter entityFilter = VersionController.getEntityFilter(data.entities().getData().getInt("DataVersion"));
+			EntityFilter entityFilter = VersionController.getEntityFilter(data.entities().getData().getIntOrDefault("DataVersion", 0));
 			entityFilter.deleteEntities(data, getNewValue());
 		}
 	}

File: src/main/java/net/querz/mcaselector/changer/fields/DeleteStructureField.java
Patch:
@@ -52,7 +52,7 @@ public boolean parseNewValue(String s) {
 
 	@Override
 	public void change(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		CompoundTag references = chunkFilter.getStructureReferences(data.region().getData());
 		CompoundTag starts = chunkFilter.getStructureStarts(data.region().getData());
 		for (String structure : getNewValue()) {

File: src/main/java/net/querz/mcaselector/changer/fields/FixHeightmapsField.java
Patch:
@@ -28,7 +28,7 @@ public boolean parseNewValue(String s) {
 
 	@Override
 	public void change(ChunkData data) {
-		HeightmapCalculator heightmapCalculator = VersionController.getHeightmapCalculator(data.region().getData().getInt("DataVersion"));
+		HeightmapCalculator heightmapCalculator = VersionController.getHeightmapCalculator(data.region().getData().getIntOrDefault("DataVersion", 0));
 		heightmapCalculator.worldSurface(data.region().getData());
 		heightmapCalculator.oceanFloor(data.region().getData());
 		heightmapCalculator.motionBlocking(data.region().getData());

File: src/main/java/net/querz/mcaselector/changer/fields/FixStatusField.java
Patch:
@@ -30,7 +30,7 @@ public boolean parseNewValue(String s) {
 
 	@Override
 	public void change(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		StringTag status = chunkFilter.getStatus(data.region().getData());
 
 		if ("empty".equals(status.getValue())) {

File: src/main/java/net/querz/mcaselector/changer/fields/ForceBlendField.java
Patch:
@@ -28,7 +28,7 @@ public boolean parseNewValue(String s) {
 
 	@Override
 	public void change(ChunkData root) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(root.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(root.region().getData().getIntOrDefault("DataVersion", 0));
 		chunkFilter.forceBlending(root.region().getData());
 	}
 

File: src/main/java/net/querz/mcaselector/changer/fields/InhabitedTimeField.java
Patch:
@@ -15,7 +15,7 @@ public InhabitedTimeField() {
 
 	@Override
 	public Long getOldValue(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		LongTag inhabitedTime = chunkFilter.getInhabitedTime(data.region().getData());
 		return inhabitedTime == null ? null : inhabitedTime.asLong();
 	}
@@ -32,7 +32,7 @@ public boolean parseNewValue(String s) {
 
 	@Override
 	public void change(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		LongTag tag = chunkFilter.getInhabitedTime(data.region().getData());
 		if (tag != null) {
 			chunkFilter.setInhabitedTime(data.region().getData(), getNewValue());
@@ -41,7 +41,7 @@ public void change(ChunkData data) {
 
 	@Override
 	public void force(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		chunkFilter.setInhabitedTime(data.region().getData(), getNewValue());
 	}
 }

File: src/main/java/net/querz/mcaselector/changer/fields/LastUpdateField.java
Patch:
@@ -15,7 +15,7 @@ public LastUpdateField() {
 
 	@Override
 	public Long getOldValue(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		LongTag lastUpdate = chunkFilter.getLastUpdate(data.region().getData());
 		return lastUpdate == null ? null : lastUpdate.asLong();
 	}
@@ -32,7 +32,7 @@ public boolean parseNewValue(String s) {
 
 	@Override
 	public void change(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		LongTag tag = chunkFilter.getLastUpdate(data.region().getData());
 		if (tag != null) {
 			chunkFilter.setLastUpdate(data.region().getData(), getNewValue());
@@ -41,7 +41,7 @@ public void change(ChunkData data) {
 
 	@Override
 	public void force(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		chunkFilter.setLastUpdate(data.region().getData(), getNewValue());
 	}
 }

File: src/main/java/net/querz/mcaselector/changer/fields/LightPopulatedField.java
Patch:
@@ -15,7 +15,7 @@ public LightPopulatedField() {
 
 	@Override
 	public Byte getOldValue(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		ByteTag lightPopulated = chunkFilter.getLightPopulated(data.region().getData());
 		return lightPopulated == null ? null : lightPopulated.asByte();
 	}
@@ -35,7 +35,7 @@ public boolean parseNewValue(String s) {
 
 	@Override
 	public void change(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		ByteTag tag = chunkFilter.getLightPopulated(data.region().getData());
 		if (tag != null) {
 			chunkFilter.setLightPopulated(data.region().getData(), getNewValue());
@@ -44,7 +44,7 @@ public void change(ChunkData data) {
 
 	@Override
 	public void force(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		chunkFilter.setLightPopulated(data.region().getData(), getNewValue());
 	}
 }

File: src/main/java/net/querz/mcaselector/changer/fields/ReferenceField.java
Patch:
@@ -38,7 +38,7 @@ public void change(ChunkData data) {
 
 		// attempt to fix chunk coordinates of structure references
 
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		CompoundTag references = chunkFilter.getStructureReferences(data.region().getData());
 		int xPos = chunkFilter.getXPos(data.region().getData()).asInt();
 		int zPos = chunkFilter.getZPos(data.region().getData()).asInt();

File: src/main/java/net/querz/mcaselector/changer/fields/ReplaceBlocksField.java
Patch:
@@ -181,7 +181,7 @@ public Map<String, ChunkFilter.BlockReplaceData> getOldValue(ChunkData data) {
 
 	@Override
 	public void change(ChunkData data) {
-		int dataVersion = data.region().getData().getInt("DataVersion");
+		int dataVersion = data.region().getData().getIntOrDefault("DataVersion", 0);
 		ChunkFilter chunkFilter = VersionController.getChunkFilter(dataVersion);
 		chunkFilter.replaceBlocks(data.region().getData(), getNewValue());
 

File: src/main/java/net/querz/mcaselector/changer/fields/StatusField.java
Patch:
@@ -40,7 +40,7 @@ public StatusField() {
 
 	@Override
 	public String getOldValue(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		StringTag status = chunkFilter.getStatus(data.region().getData());
 		return status == null ? null : status.getValue();
 	}
@@ -56,7 +56,7 @@ public boolean parseNewValue(String s) {
 
 	@Override
 	public void change(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		StringTag tag = chunkFilter.getStatus(data.region().getData());
 		if (tag != null) {
 			chunkFilter.setStatus(data.region().getData(), getNewValue());
@@ -65,7 +65,7 @@ public void change(ChunkData data) {
 
 	@Override
 	public void force(ChunkData data) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		chunkFilter.setStatus(data.region().getData(), getNewValue());
 	}
 }

File: src/main/java/net/querz/mcaselector/filter/filters/BiomeFilter.java
Patch:
@@ -38,7 +38,7 @@ public boolean contains(List<BiomeRegistry.BiomeIdentifier> value, ChunkData dat
 		if (data.region() == null) {
 			return false;
 		}
-		return VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"))
+		return VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0))
 				.matchBiomes(data.region().getData(), value);
 	}
 
@@ -52,7 +52,7 @@ public boolean intersects(List<BiomeRegistry.BiomeIdentifier> value, ChunkData d
 		if (data.region() == null) {
 			return false;
 		}
-		return VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"))
+		return VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0))
 				.matchAnyBiome(data.region().getData(), value);
 	}
 

File: src/main/java/net/querz/mcaselector/filter/filters/BorderFilter.java
Patch:
@@ -46,7 +46,7 @@ protected Integer getNumber(ChunkData data) {
 			return 9;
 		}
 
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		StringTag tag = chunkFilter.getStatus(data.region().getData());
 		if (tag == null || !tag.getValue().equals("full")) {
 			return 9;

File: src/main/java/net/querz/mcaselector/filter/filters/CircleFilter.java
Patch:
@@ -86,7 +86,7 @@ public boolean contains(List<CircleFilterDefinition> value, ChunkData data) {
 			return false;
 		}
 
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		IntTag xPos = chunkFilter.getXPos(data.region().getData());
 		IntTag zPos = chunkFilter.getZPos(data.region().getData());
 		if (xPos == null || zPos == null) {

File: src/main/java/net/querz/mcaselector/filter/filters/DataVersionFilter.java
Patch:
@@ -5,6 +5,7 @@
 import net.querz.mcaselector.filter.IntFilter;
 import net.querz.mcaselector.filter.Operator;
 import net.querz.mcaselector.io.mca.ChunkData;
+import net.querz.nbt.IntTag;
 
 public class DataVersionFilter extends IntFilter {
 
@@ -21,7 +22,8 @@ protected Integer getNumber(ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return 0;
 		}
-		return data.region().getData().getInt("DataVersion");
+		IntTag tag = data.region().getData().getIntTag("DataVersion");
+		return tag == null ? null : tag.asInt();
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/filter/filters/EntityAmountFilter.java
Patch:
@@ -23,9 +23,9 @@ private EntityAmountFilter(Operator operator, Comparator comparator, int value)
 	protected Integer getNumber(ChunkData data) {
 		int dataVersion;
 		if (data.region() != null && data.region().getData() != null) {
-			dataVersion = data.region().getData().getInt("DataVersion");
+			dataVersion = data.region().getData().getIntOrDefault("DataVersion", 0);
 		} else if (data.entities() != null && data.entities().getData() != null) {
-			dataVersion = data.entities().getData().getInt("DataVersion");
+			dataVersion = data.entities().getData().getIntOrDefault("DataVersion", 0);
 		} else {
 			return 0;
 		}

File: src/main/java/net/querz/mcaselector/filter/filters/EntityFilter.java
Patch:
@@ -56,9 +56,9 @@ private EntityFilter(Operator operator, Comparator comparator, List<String> valu
 	public boolean contains(List<String> value, ChunkData data) {
 		int dataVersion;
 		if (data.region() != null && data.region().getData() != null) {
-			dataVersion = data.region().getData().getInt("DataVersion");
+			dataVersion = data.region().getData().getIntOrDefault("DataVersion", 0);
 		} else if (data.entities() != null && data.entities().getData() != null) {
-			dataVersion = data.entities().getData().getInt("DataVersion");
+			dataVersion = data.entities().getData().getIntOrDefault("DataVersion", 0);
 		} else {
 			return false;
 		}
@@ -84,7 +84,7 @@ public boolean intersects(List<String> value, ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return false;
 		}
-		ListTag entities = VersionController.getEntityFilter(data.region().getData().getInt("DataVersion")).getEntities(data);
+		ListTag entities = VersionController.getEntityFilter(data.region().getData().getIntOrDefault("DataVersion", 0)).getEntities(data);
 		if (entities == null || entities.getType() == Tag.Type.LONG_ARRAY) {
 			return false;
 		}

File: src/main/java/net/querz/mcaselector/filter/filters/InhabitedTimeFilter.java
Patch:
@@ -25,7 +25,7 @@ protected Long getNumber(ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return 0L;
 		}
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		LongTag tag = chunkFilter.getInhabitedTime(data.region().getData());
 		return tag == null ? 0L : tag.asLong();
 	}

File: src/main/java/net/querz/mcaselector/filter/filters/LastUpdateFilter.java
Patch:
@@ -25,7 +25,7 @@ protected Long getNumber(ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return 0L;
 		}
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		LongTag tag = chunkFilter.getLastUpdate(data.region().getData());
 		return tag == null ? 0L : tag.asLong();
 	}

File: src/main/java/net/querz/mcaselector/filter/filters/LightPopulatedFilter.java
Patch:
@@ -34,7 +34,7 @@ protected Byte getNumber(ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return 0;
 		}
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		ByteTag tag = chunkFilter.getLightPopulated(data.region().getData());
 		return tag == null ? 0 : tag.asByte();
 	}

File: src/main/java/net/querz/mcaselector/filter/filters/PaletteFilter.java
Patch:
@@ -52,7 +52,7 @@ public boolean contains(List<String> value, ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return false;
 		}
-		return VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"))
+		return VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0))
 				.matchBlockNames(data.region().getData(), value);
 	}
 
@@ -66,15 +66,15 @@ public boolean intersects(List<String> value, ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return false;
 		}
-		return VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"))
+		return VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0))
 				.matchAnyBlockName(data.region().getData(), value);
 	}
 
 	public boolean equals(List<String> value, ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return false;
 		}
-		return VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"))
+		return VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0))
 			.paletteEquals(data.region().getData(), value);
 	}
 

File: src/main/java/net/querz/mcaselector/filter/filters/PlayerLocationFilter.java
Patch:
@@ -107,7 +107,7 @@ public boolean contains(PlayerLocationFilterDefinition value, ChunkData data) {
 			}
 		}
 
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		IntTag xPos = chunkFilter.getXPos(data.region().getData());
 		IntTag zPos = chunkFilter.getZPos(data.region().getData());
 		if (xPos == null || zPos == null) {

File: src/main/java/net/querz/mcaselector/filter/filters/SelectionFilter.java
Patch:
@@ -63,7 +63,7 @@ public boolean contains(File value, ChunkData data) {
 			}
 		}
 
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		IntTag xPos = chunkFilter.getXPos(data.region().getData());
 		IntTag zPos = chunkFilter.getZPos(data.region().getData());
 		if (xPos == null || zPos == null) {

File: src/main/java/net/querz/mcaselector/filter/filters/StatusFilter.java
Patch:
@@ -71,7 +71,7 @@ public boolean isEqual(String value, ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return false;
 		}
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		StringTag tag = chunkFilter.getStatus(data.region().getData());
 		return tag != null && value.equals(tag.getValue());
 	}

File: src/main/java/net/querz/mcaselector/filter/filters/StructureFilter.java
Patch:
@@ -27,7 +27,7 @@ public boolean contains(List<String> value, ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return false;
 		}
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		CompoundTag references = chunkFilter.getStructureReferences(data.region().getData());
 		if (references == null) {
 			return false;
@@ -56,7 +56,7 @@ public boolean intersects(List<String> value, ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return false;
 		}
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		CompoundTag references = chunkFilter.getStructureReferences(data.region().getData());
 		if (references == null) {
 			return false;

File: src/main/java/net/querz/mcaselector/filter/filters/TileEntityAmountFilter.java
Patch:
@@ -24,7 +24,7 @@ protected Integer getNumber(ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return 0;
 		}
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		ListTag tileEntities = chunkFilter.getTileEntities(data.region().getData());
 		return tileEntities == null ? 0 : tileEntities.size();
 	}

File: src/main/java/net/querz/mcaselector/filter/filters/XPosFilter.java
Patch:
@@ -22,7 +22,7 @@ protected Integer getNumber(ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return null;
 		}
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		IntTag tag = chunkFilter.getXPos(data.region().getData());
 		return tag.asInt();
 	}

File: src/main/java/net/querz/mcaselector/filter/filters/YPosFilter.java
Patch:
@@ -24,7 +24,7 @@ protected Integer getNumber(ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return null;
 		}
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		IntTag tag = chunkFilter.getYPos(data.region().getData());
 		return tag.asInt();
 	}

File: src/main/java/net/querz/mcaselector/filter/filters/ZPosFilter.java
Patch:
@@ -22,7 +22,7 @@ protected Integer getNumber(ChunkData data) {
 		if (data.region() == null || data.region().getData() == null) {
 			return null;
 		}
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault("DataVersion", 0));
 		IntTag tag = chunkFilter.getZPos(data.region().getData());
 		return tag.asInt();
 	}

File: src/main/java/net/querz/mcaselector/io/mca/EntitiesChunk.java
Patch:
@@ -19,13 +19,13 @@ public EntitiesChunk(Point2i absoluteLocation) {
 
 	@Override
 	public boolean relocate(Point3i offset) {
-		ChunkRelocator relocator = VersionController.getEntityRelocator(data.getInt("DataVersion"));
+		ChunkRelocator relocator = VersionController.getEntityRelocator(data.getIntOrDefault("DataVersion", 0));
 		return relocator.relocate(data, offset);
 	}
 
 	@Override
 	public void merge(CompoundTag destination, List<Range> ranges, int yOffset) {
-		ChunkMerger merger = VersionController.getEntityMerger(data.getInt("DataVersion"));
+		ChunkMerger merger = VersionController.getEntityMerger(data.getIntOrDefault("DataVersion", 0));
 		merger.mergeChunks(data, destination, ranges, yOffset);
 	}
 

File: src/main/java/net/querz/mcaselector/io/mca/MCAFile.java
Patch:
@@ -452,7 +452,7 @@ protected void mergeChunksInto(MCAFile<T> destination, Point3i offset, boolean o
 					}
 
 					if (ranges != null) {
-						int sourceVersion = sourceChunk.getData().getInt("DataVersion");
+						int sourceVersion = sourceChunk.getData().getIntOrDefault("DataVersion", 0);
 						if (sourceVersion == 0) {
 							continue;
 						}
@@ -461,7 +461,7 @@ protected void mergeChunksInto(MCAFile<T> destination, Point3i offset, boolean o
 						if (destinationChunk == null || destinationChunk.isEmpty()) {
 							destinationChunk = chunkCreator.apply(destChunk, sourceVersion);
 							destination.chunks[destIndex] = destinationChunk;
-						} else if (sourceVersion != (destinationVersion = destinationChunk.getData().getInt("DataVersion"))) {
+						} else if (sourceVersion != (destinationVersion = destinationChunk.getData().getIntOrDefault("DataVersion", 0))) {
 							Point2i srcChunk = location.regionToChunk().add(x, z);
 							LOGGER.warn("failed to merge chunk at {} into chunk at {} because their DataVersion does not match ({} != {})",
 									srcChunk, destChunk, sourceVersion, destinationVersion);

File: src/main/java/net/querz/mcaselector/io/mca/PoiChunk.java
Patch:
@@ -19,13 +19,13 @@ public PoiChunk(Point2i absoluteLocation) {
 
 	@Override
 	public boolean relocate(Point3i offset) {
-		ChunkRelocator relocator = VersionController.getPoiRelocator(data.getInt("DataVersion"));
+		ChunkRelocator relocator = VersionController.getPoiRelocator(data.getIntOrDefault("DataVersion", 0));
 		return relocator.relocate(data, offset);
 	}
 
 	@Override
 	public void merge(CompoundTag destination, List<Range> ranges, int yOffset) {
-		ChunkMerger merger = VersionController.getPoiMerger(data.getInt("DataVersion"));
+		ChunkMerger merger = VersionController.getPoiMerger(data.getIntOrDefault("DataVersion", 0));
 		merger.mergeChunks(data, destination, ranges, yOffset);
 	}
 

File: src/main/java/net/querz/mcaselector/io/mca/RegionChunk.java
Patch:
@@ -19,13 +19,13 @@ public RegionChunk(Point2i absoluteLocation) {
 
 	@Override
 	public boolean relocate(Point3i offset) {
-		ChunkRelocator relocator = VersionController.getChunkRelocator(data.getInt("DataVersion"));
+		ChunkRelocator relocator = VersionController.getChunkRelocator(data.getIntOrDefault("DataVersion", 0));
 		return relocator.relocate(data, offset);
 	}
 
 	@Override
 	public void merge(CompoundTag destination, List<Range> ranges, int yOffset) {
-		ChunkMerger merger = VersionController.getChunkMerger(data.getInt("DataVersion"));
+		ChunkMerger merger = VersionController.getChunkMerger(data.getIntOrDefault("DataVersion", 0));
 		merger.mergeChunks(data, destination, ranges, yOffset);
 	}
 

File: src/main/java/net/querz/mcaselector/io/mca/RegionMCAFile.java
Patch:
@@ -65,7 +65,7 @@ public void mergeChunksInto(MCAFile<RegionChunk> destination, Point3i offset, bo
 						continue;
 					}
 
-					HeightmapCalculator heightmapCalculator = VersionController.getHeightmapCalculator(destinationChunk.getData().getInt("DataVersion"));
+					HeightmapCalculator heightmapCalculator = VersionController.getHeightmapCalculator(destinationChunk.getData().getIntOrDefault("DataVersion", 0));
 					heightmapCalculator.worldSurface(destinationChunk.getData());
 					heightmapCalculator.oceanFloor(destinationChunk.getData());
 					heightmapCalculator.motionBlocking(destinationChunk.getData());
@@ -87,7 +87,7 @@ public RegionMCAFile minimizeForRendering() {
 			}
 
 			try {
-				ChunkRenderer chunkRenderer = VersionController.getChunkRenderer(chunk.data.getInt("DataVersion"));
+				ChunkRenderer chunkRenderer = VersionController.getChunkRenderer(chunk.data.getIntOrDefault("DataVersion", 0));
 				CompoundTag minData = chunkRenderer.minimizeChunk(chunk.data);
 
 				RegionChunk minChunk = new RegionChunk(chunk.absoluteLocation.clone());

File: src/main/java/net/querz/mcaselector/overlay/overlays/CustomOverlay.java
Patch:
@@ -68,7 +68,7 @@ private int getValue(Chunk chunk) {
 			return number.asInt();
 		} else if (current instanceof CompoundTag compound && size) {
 			return compound.size();
-		} else if (current instanceof CollectionTag collection && size) {
+		} else if (current instanceof CollectionTag<?> collection && size) {
 			return collection.size();
 		}
 		return 0;

File: src/main/java/net/querz/mcaselector/overlay/overlays/DataVersionOverlay.java
Patch:
@@ -15,7 +15,7 @@ public int parseValue(ChunkData chunkData) {
 		if (chunkData.region() == null || chunkData.region().getData() == null) {
 			return 0;
 		}
-		return chunkData.region().getData().getInt("DataVersion");
+		return chunkData.region().getData().getIntOrDefault("DataVersion", 0);
 	}
 
 	@Override
@@ -29,7 +29,7 @@ public boolean setMin(String raw) {
 		try {
 			return setMinInt(Integer.parseInt(raw));
 		} catch (NumberFormatException ex) {
-			return setMinInt((Integer) null);
+			return setMinInt(null);
 		}
 	}
 
@@ -39,7 +39,7 @@ public boolean setMax(String raw) {
 		try {
 			return setMaxInt(Integer.parseInt(raw));
 		} catch (NumberFormatException ex) {
-			return setMaxInt((Integer) null);
+			return setMaxInt(null);
 		}
 	}
 }

File: src/main/java/net/querz/mcaselector/overlay/overlays/EntityAmountOverlay.java
Patch:
@@ -18,7 +18,7 @@ public int parseValue(ChunkData chunkData) {
 		if (chunkData.region() == null || chunkData.region().getData() == null) {
 			return 0;
 		}
-		EntityFilter entityFilter = VersionController.getEntityFilter(chunkData.region().getData().getInt("DataVersion"));
+		EntityFilter entityFilter = VersionController.getEntityFilter(chunkData.region().getData().getIntOrDefault("DataVersion", 0));
 		ListTag entities = entityFilter.getEntities(chunkData);
 		return entities == null ? 0 : entities.size();
 	}

File: src/main/java/net/querz/mcaselector/overlay/overlays/TileEntityAmountOverlay.java
Patch:
@@ -18,7 +18,7 @@ public int parseValue(ChunkData chunkData) {
 		if (chunkData.region() == null) {
 			return 0;
 		}
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.region().getData().getInt("DataVersion"));
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.region().getData().getIntOrDefault("DataVersion", 0));
 		ListTag tileEntities = chunkFilter.getTileEntities(chunkData.region().getData());
 		return tileEntities == null ? 0 : tileEntities.size();
 	}

File: src/main/java/net/querz/mcaselector/tile/TileImage.java
Patch:
@@ -140,7 +140,7 @@ private static void drawChunkImage(Chunk chunkData, int x, int z, int scale, int
 		if (chunkData.getData() == null) {
 			return;
 		}
-		int dataVersion = chunkData.getData().getInt("DataVersion");
+		int dataVersion = chunkData.getData().getIntOrDefault("DataVersion", 0);
 		try {
 			if (ConfigProvider.WORLD.getRenderCaves()) {
 				VersionController.getChunkRenderer(dataVersion).drawCaves(

File: src/main/java/net/querz/mcaselector/ui/component/filter/FilterBox.java
Patch:
@@ -102,7 +102,7 @@ public FilterBox(FilterBox parent, Filter<?> filter, boolean root) {
 
 		operator.setTooltip(UIFactory.tooltip(Translation.DIALOG_FILTER_CHUNKS_FILTER_OPERATOR_TOOLTIP));
 		operator.getItems().addAll(Operator.values());
-		operator.setOnAction(e -> onOperator(filter));
+		operator.setOnAction(e -> onOperator(this.filter));
 		operator.getStyleClass().add("filter-operator-combo-box");
 		filterOperators.add(operator, 0, 0, 1, 1);
 

File: src/main/java/net/querz/mcaselector/version/anvil118/Anvil118EntityFilter.java
Patch:
@@ -17,7 +17,7 @@ public void deleteEntities(ChunkData data, List<Range> ranges) {
 		}
 
 		// delete proto-entities
-		ListTag protoEntities = LegacyHelper.getProtoEntities(data.region().getData(), data.region().getData().getInt("DataVersion"));
+		ListTag protoEntities = LegacyHelper.getProtoEntities(data.region().getData(), data.region().getData().getIntOrDefault("DataVersion", 0));
 		deleteEntities(protoEntities, ranges);
 	}
 }

File: src/main/java/net/querz/mcaselector/version/anvil118/Anvil118HeightmapCalculator.java
Patch:
@@ -14,7 +14,7 @@ protected void setHeightMap(CompoundTag root, String name, long[] heightmap) {
 		if (heightmap == null) {
 			return;
 		}
-		int dataVersion = root.getInt("DataVersion");
+		int dataVersion = root.getIntOrDefault("DataVersion", 0);
 		CompoundTag heightmaps = LegacyHelper.getHeightmaps(root, dataVersion);
 		if (heightmaps == null) {
 			heightmaps = new CompoundTag();

File: src/main/java/net/querz/mcaselector/ui/component/filter/FilterBox.java
Patch:
@@ -110,8 +110,8 @@ public FilterBox(FilterBox parent, Filter<?> filter, boolean root) {
 
 		setLeft(filterOperators);
 
-		add.setOnMouseReleased(e -> onAdd(filter));
-		delete.setOnMouseReleased(e -> onDelete(filter));
+		add.setOnMouseReleased(e -> onAdd(this.filter));
+		delete.setOnMouseReleased(e -> onDelete(this.filter));
 
 		setFilter(filter);
 	}

File: src/main/java/net/querz/mcaselector/io/job/ChunkFilterSelector.java
Patch:
@@ -26,7 +26,6 @@ private ChunkFilterSelector() {}
 
 	public static void selectFilter(GroupFilter filter, Selection selection, int radius, Consumer<Selection> callback, Progress progressChannel, boolean cli) {
 		WorldDirectories wd = ConfigProvider.WORLD.getWorldDirs();
-		System.out.println(wd);
 		RegionDirectories[] rd = wd.listRegions(selection);
 		if (rd == null || rd.length == 0) {
 			if (cli) {
@@ -37,8 +36,6 @@ public static void selectFilter(GroupFilter filter, Selection selection, int rad
 			return;
 		}
 
-		System.out.println(Arrays.toString(rd));
-
 		JobHandler.clearQueues();
 
 		progressChannel.setMax(rd.length);

File: src/main/java/net/querz/mcaselector/changer/FieldType.java
Patch:
@@ -18,6 +18,7 @@ public enum FieldType {
 	DELETE_ENTITIES("DeleteEntities", DeleteEntitiesField::new, false, false),
 	DELETE_SECTIONS("DeleteSections", DeleteSectionsField::new, false, true),
 	FIX_STATUS("FixStatus", FixStatusField::new, false, true),
+	FIX_HEIGHTMAPS("FixHeightmaps", FixHeightmapsField::new, false, false),
 	DELETE_STRUCTURE("DeleteStructureReference", DeleteStructureField::new, false, false),
 	STRUCTURE_REFERENCE("FixStructureReferences", ReferenceField::new, true, false),
 	PREVENT_RETROGEN("PreventRetrogen", PreventRetrogenField::new, false, false),

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112ChunkRenderer.java
Patch:
@@ -22,7 +22,7 @@ public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z,
 		byte[][] dataArray = new byte[16][];
 		for (CompoundTag s : sections.iterateType(CompoundTag.class)) {
 			if (!s.containsKey("Blocks") || !s.containsKey("Data")) {
-				return;
+				continue;
 			}
 			int y = Helper.numberFromCompound(s, "Y", -1).intValue();
 			byte[] b = Helper.byteArrayFromCompound(s, "Blocks");

File: src/main/java/net/querz/mcaselector/io/job/ChunkImporter.java
Patch:
@@ -337,7 +337,7 @@ public boolean execute() {
 
 				ChunkSet targetChunks = null;
 				if (targetSelection != null) {
-					targetChunks = sourceSelection.getSelectedChunks(target);
+					targetChunks = targetSelection.getSelectedChunks(target);
 				}
 
 				for (Map.Entry<Point2i, byte[]> sourceData : sourceDataMappingRegion.entrySet()) {

File: src/main/java/net/querz/mcaselector/ui/component/OptionBar.java
Patch:
@@ -267,7 +267,6 @@ public void setWorldDependentMenuItemsEnabled(boolean enabled, TileMap tileMap,
 
 		openDimension.setDisable(!enabled || openDimension.getItems().size() == 0);
 
-		openRecent.setDisable(ConfigProvider.GLOBAL.getRecentWorlds().size() == 0);
 		if (ConfigProvider.GLOBAL.getRecentWorlds().size() > 0) {
 			openRecent.getItems().clear();
 			File currentWorld = ConfigProvider.WORLD.getRegionDir();
@@ -288,6 +287,8 @@ public void setWorldDependentMenuItemsEnabled(boolean enabled, TileMap tileMap,
 			});
 			openRecent.getItems().add(clear);
 		}
+
+		openRecent.setDisable(openRecent.getItems().size() <= 2); // "empty" means it either has no items or it only has the separator and the clear button
 	}
 
 	public void setEditOverlaysEnabled(boolean enabled) {

File: src/main/java/net/querz/mcaselector/io/job/ChunkImporter.java
Patch:
@@ -337,7 +337,7 @@ public boolean execute() {
 
 				ChunkSet targetChunks = null;
 				if (targetSelection != null) {
-					targetChunks = sourceSelection.getSelectedChunks(target);
+					targetChunks = targetSelection.getSelectedChunks(target);
 				}
 
 				for (Map.Entry<Point2i, byte[]> sourceData : sourceDataMappingRegion.entrySet()) {

File: src/main/java/net/querz/mcaselector/cli/ParamExecutor.java
Patch:
@@ -109,6 +109,7 @@ public final class ParamExecutor {
 		options.addOption(Option.builder()
 			.longOpt("sections")
 			.desc("One or a range of section indices to import into the target world during chunk import")
+			.hasArg()
 			.build());
 		options.addOption(Option.builder()
 			.longOpt("render-height")
@@ -344,7 +345,7 @@ public Future<Boolean> run() {
 	private void printHelp() {
 		String[] helpOrder = new String[]{
 			"help", "version", "mode", "output", "query", "selection", "source-selection", "radius", "x-offset",
-			"y-offset", "z-offset", "overwrite", "force", "render-height", "render-caves", "render-layer-only",
+			"y-offset", "z-offset", "overwrite", "force", "sections", "render-height", "render-caves", "render-layer-only",
 			"render-shade", "render-water-shade", "overlay-type", "overlay-min-value", "overlay-max-value",
 			"overlay-data", "overlay-min-hue", "overlay-max-hue", "zoom-level", "world", "region", "poi", "entities",
 			"source-world", "source-region", "source-poi", "source-entities", "output-world", "output-region",
@@ -517,7 +518,7 @@ private WorldDirectories parseAndCreateWorldDirectories(String prefix) throws Pa
 			poi = parseDirAndCreate(poiName);
 		} else {
 			poi = new File(world, "poi");
-			if (!region.mkdirs()) {
+			if (!poi.mkdirs()) {
 				throw new ParseException(String.format("failed to create poi directory %s", poi));
 			}
 		}

File: src/main/java/net/querz/mcaselector/Config.java
Patch:
@@ -321,7 +321,6 @@ public static String getTileMapBackground() {
 	}
 
 	public static void setRenderHeight(int renderHeight) {
-		System.out.println("set render height to " + renderHeight);
 		Config.renderHeight = renderHeight;
 	}
 

File: src/main/java/net/querz/mcaselector/cli/ParamExecutor.java
Patch:
@@ -301,6 +301,8 @@ public Future<Boolean> run() {
 		try {
 			parseConfig();
 
+			JobHandler.setTrimSaveData(false);
+
 			String mode = line.getOptionValue("mode");
 			switch (mode) {
 				case "select" -> select(future);

File: src/main/java/net/querz/mcaselector/changer/FieldType.java
Patch:
@@ -21,7 +21,8 @@ public enum FieldType {
 	DELETE_STRUCTURE("DeleteStructureReference", DeleteStructureField::new, false, false),
 	STRUCTURE_REFERENCE("FixStructureReferences", ReferenceField::new, true, false),
 	PREVENT_RETROGEN("PreventRetrogen", PreventRetrogenField::new, false, false),
-	FORCE_BLEND("ForceBlend", ForceBlendField::new, false, false);
+	FORCE_BLEND("ForceBlend", ForceBlendField::new, false, false),
+	CUSTOM("Custom", CustomField::new, false, false);
 
 	private final String name;
 	private final Supplier<? extends Field<?>> constructor;

File: src/main/java/net/querz/mcaselector/changer/fields/DeleteEntitiesField.java
Patch:
@@ -27,7 +27,7 @@ public boolean parseNewValue(String s) {
 
 	@Override
 	public void change(ChunkData data) {
-		VersionController.getEntityFilter(data.region().getData().getInt("DataVersion")).deleteEntities(data);
+		VersionController.getEntityFilter(data.region().getData().getInt("DataVersion")).deleteEntities(data, null);
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/filter/FilterType.java
Patch:
@@ -24,9 +24,11 @@ public enum FilterType {
 	ENTITIES("Entities", EntityFilter::new, Format.TEXT),
 	STRUCTURES("Structures", StructureFilter::new, Format.TEXT),
 	ENTITY_AMOUNT("#Entities", EntityAmountFilter::new, Format.NUMBER),
+	PROTO_ENTITY_AMOUNT("#ProtoEntities", ProtoEntityAmountFilter::new, Format.NUMBER),
 	TILE_ENTITY_AMOUNT("#TileEntities", TileEntityAmountFilter::new, Format.NUMBER),
 	CIRCLE("Circle", CircleFilter::new, Format.TEXT),
-	BORDER("Border", BorderFilter::new, Format.NUMBER);
+	BORDER("Border", BorderFilter::new, Format.NUMBER),
+	CUSTOM("Custom", CustomFilter::new, Format.TEXT);
 
 	private final String string;
 	private final Supplier<? extends Filter<?>> creator;

File: src/main/java/net/querz/mcaselector/io/CacheHelper.java
Patch:
@@ -106,8 +106,8 @@ public static void clearSelectionCache(TileMap tileMap) {
 						LOGGER.warn("could not delete file {}", file);
 					}
 				}
-				tileMap.clearTile(entry.getLongKey());
 			}
+			tileMap.clearTile(entry.getLongKey());
 			tileMap.getOverlayPool().discardData(region);
 		}
 		RegionImageGenerator.invalidateCachedMCAFiles();

File: src/main/java/net/querz/mcaselector/io/mca/ChunkData.java
Patch:
@@ -1,6 +1,7 @@
 package net.querz.mcaselector.io.mca;
 
 import net.querz.mcaselector.changer.Field;
+import net.querz.mcaselector.point.Point2i;
 import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.overlay.Overlay;
 import java.util.List;

File: src/main/java/net/querz/mcaselector/io/mca/Region.java
Patch:
@@ -214,6 +214,7 @@ public ChunkData getChunkData(int index) {
 		if (entities != null) {
 			entitiesChunk = entities.getChunk(index);
 		}
+		Point2i location = this.location == null ? new Point2i() : new Point2i(index).add(this.location.regionToChunk());
 		return new ChunkData(regionChunk, poiChunk, entitiesChunk);
 	}
 

File: src/main/java/net/querz/mcaselector/version/VersionController.java
Patch:
@@ -76,8 +76,8 @@ private enum Mapping {
 		ANVIL115(2202, 2526, Anvil115ChunkFilter::new, Anvil115ChunkMerger::new, Anvil114PoiMerger::new, Anvil112EntityMerger::new, Anvil115ChunkRelocator::new, Anvil114PoiRelocator::new, Anvil112EntityRelocator::new, Anvil112EntityFilter::new, Anvil115ChunkRenderer::new, Anvil115ColorMapping::new),
 		ANVIL116(2527, 2686, Anvil116ChunkFilter::new, Anvil115ChunkMerger::new, Anvil114PoiMerger::new, Anvil112EntityMerger::new, Anvil116ChunkRelocator::new, Anvil114PoiRelocator::new, Anvil112EntityRelocator::new, Anvil112EntityFilter::new, Anvil116ChunkRenderer::new, Anvil116ColorMapping::new),
 		ANVIL117(2687, 2824, Anvil117ChunkFilter::new, Anvil117ChunkMerger::new, Anvil114PoiMerger::new, Anvil117EntityMerger::new, Anvil117ChunkRelocator::new, Anvil114PoiRelocator::new, Anvil117EntityRelocator::new, Anvil117EntityFilter::new, Anvil117ChunkRenderer::new, Anvil117ColorMapping::new),
-		ANVIL118(2825, 3065, Anvil118ChunkFilter::new, Anvil118ChunkMerger::new, Anvil114PoiMerger::new, Anvil117EntityMerger::new, Anvil118ChunkRelocator::new, Anvil114PoiRelocator::new, Anvil117EntityRelocator::new, Anvil117EntityFilter::new, Anvil118ChunkRenderer::new, Anvil118ColorMapping::new),
-		ANVIL119(3066, Integer.MAX_VALUE, Anvil119ChunkFilter::new, Anvil119ChunkMerger::new, Anvil114PoiMerger::new, Anvil117EntityMerger::new, Anvil119ChunkRelocator::new, Anvil114PoiRelocator::new, Anvil117EntityRelocator::new, Anvil117EntityFilter::new, Anvil119ChunkRenderer::new, Anvil119ColorMapping::new);
+		ANVIL118(2825, 3065, Anvil118ChunkFilter::new, Anvil118ChunkMerger::new, Anvil114PoiMerger::new, Anvil117EntityMerger::new, Anvil118ChunkRelocator::new, Anvil114PoiRelocator::new, Anvil117EntityRelocator::new, Anvil118EntityFilter::new, Anvil118ChunkRenderer::new, Anvil118ColorMapping::new),
+		ANVIL119(3066, Integer.MAX_VALUE, Anvil119ChunkFilter::new, Anvil119ChunkMerger::new, Anvil114PoiMerger::new, Anvil117EntityMerger::new, Anvil119ChunkRelocator::new, Anvil114PoiRelocator::new, Anvil117EntityRelocator::new, Anvil118EntityFilter::new, Anvil119ChunkRenderer::new, Anvil119ColorMapping::new);
 
 
 		private final int minVersion, maxVersion;

File: src/main/java/net/querz/mcaselector/logging/Logging.java
Patch:
@@ -26,7 +26,7 @@ private Logging() {}
 
 	public static void setLogLevel(String logLevel) {
 		Logging.logLevel = logLevel;
-		LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
+		LoggerContext ctx = (LoggerContext) LogManager.getContext(LogManager.class.getClassLoader(), false);
 		Configuration config = ctx.getConfiguration();
 		LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME);
 		loggerConfig.setLevel(fromString(logLevel));

File: src/main/java/net/querz/mcaselector/cli/ParamExecutor.java
Patch:
@@ -114,7 +114,7 @@ public final class ParamExecutor {
 			.build());
 		options.addOption(Option.builder()
 			.longOpt("render-layer-only")
-			.desc("Only render the layer spcified by --render-height in image mode")
+			.desc("Only render the layer specified by --render-height in image mode")
 			.build());
 		options.addOption(Option.builder()
 			.longOpt("render-shade")

File: src/main/java/net/querz/mcaselector/filter/filters/LightPopulatedFilter.java
Patch:
@@ -30,7 +30,7 @@ public Comparator[] getComparators() {
 	}
 
 	@Override
-	Byte getNumber(ChunkData data) {
+	protected Byte getNumber(ChunkData data) {
 		if (data.region() == null) {
 			return 0;
 		}

File: src/main/java/net/querz/mcaselector/overlay/OverlayType.java
Patch:
@@ -1,8 +1,6 @@
 package net.querz.mcaselector.overlay;
 
 import net.querz.mcaselector.overlay.parsers.*;
-import net.querz.mcaselector.tile.overlay.parsers.*;
-
 import java.util.function.Supplier;
 
 public enum OverlayType {

File: src/main/java/net/querz/mcaselector/selection/SelectionData.java
Patch:
@@ -86,7 +86,7 @@ protected void calculateMinMax() {
 					maxRegionX = region.getX();
 					maxChunkX = 0;
 				}
-				maxChunkX = entry.getValue() == null ? 0 : entry.getValue().getMaxX(maxChunkX);
+				maxChunkX = entry.getValue() == null ? 31 : entry.getValue().getMaxX(maxChunkX);
 			}
 			if (region.getZ() <= minRegionZ) {
 				if (region.getZ() < minRegionZ) {
@@ -100,7 +100,7 @@ protected void calculateMinMax() {
 					maxRegionZ = region.getZ();
 					maxChunkZ = 0;
 				}
-				maxChunkZ = entry.getValue() == null ? 0 : entry.getValue().getMaxZ(maxChunkZ);
+				maxChunkZ = entry.getValue() == null ? 31 : entry.getValue().getMaxZ(maxChunkZ);
 			}
 		}
 		min = new Point2i(minRegionX, minRegionZ).regionToChunk().add(minChunkX, minChunkZ);

File: src/main/java/net/querz/mcaselector/selection/ChunkSet.java
Patch:
@@ -32,6 +32,7 @@ public void clear() {
 		for (int i = 0; i < 16; i++) {
 			words[i] = 0L;
 		}
+		setBits = 0;
 	}
 
 	public boolean get(int index) {
@@ -90,6 +91,7 @@ public void fill() {
 		for (int i = 0; i < 16; i++) {
 			words[i] = 0xFFFFFFFFFFFFFFFFL;
 		}
+		setBits = 1024;
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/selection/Selection.java
Patch:
@@ -85,7 +85,7 @@ public void saveToFile(File csvFile) throws IOException {
 				for (int i : entry.getValue()) {
 					writePoint(bw, region);
 					bw.write(';');
-					Point2i c = new Point2i(i);
+					Point2i c = new Point2i(i).add(region.regionToChunk());
 					writePoint(bw, c);
 					bw.write('\n');
 				}

File: src/main/java/net/querz/mcaselector/text/Translation.java
Patch:
@@ -189,7 +189,7 @@ public enum Translation {
 	DIALOG_ERROR_HEADER("dialog.error.header"),
 	DIALOG_ERROR_COPIED_TO_CLIPBOARD("dialog.error.copied_to_clipboard"),
 	DIALOG_UNSAVED_SELECTION_TITLE("dialog.unsaved_selection.title"),
-	DIALOG_UNSAVED_CHANGES_HEADER("dialog.unsaved_changes.header"),
+	DIALOG_UNSAVED_SELECTION_HEADER("dialog.unsaved_selection.header"),
 	BUTTON_CANCEL("button.cancel"),
 	BUTTON_OK("button.ok");
 

File: src/main/java/net/querz/mcaselector/cli/CLIHelper.java
Patch:
@@ -1,8 +1,8 @@
-package net.querz.mcaselector.headless;
+package net.querz.mcaselector.cli;
 
-public final class HeadlessHelper {
+public final class CLIHelper {
 
-	private HeadlessHelper() {}
+	private CLIHelper() {}
 
 	public static boolean hasJavaFX() {
 		try  {

File: src/main/java/net/querz/mcaselector/cli/CLIJFX.java
Patch:
@@ -1,10 +1,10 @@
-package net.querz.mcaselector.headless;
+package net.querz.mcaselector.cli;
 
 import javafx.application.Platform;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
 
-public class HeadlessJFX {
+public class CLIJFX {
 
 	public static void launch() throws ExecutionException, InterruptedException {
 		CompletableFuture<Void> started = new CompletableFuture<>();

File: src/main/java/net/querz/mcaselector/cli/CLIProgress.java
Patch:
@@ -1,16 +1,16 @@
-package net.querz.mcaselector.headless;
+package net.querz.mcaselector.cli;
 
 import net.querz.mcaselector.io.JobHandler;
 import net.querz.mcaselector.progress.Progress;
 import java.util.concurrent.atomic.AtomicInteger;
 
-public class ConsoleProgress implements Progress {
+public class CLIProgress implements Progress {
 
 	private int max;
 	private final AtomicInteger progress = new AtomicInteger(0);
 	private Runnable doneAction;
 
-	public ConsoleProgress() {
+	public CLIProgress() {
 		JobHandler.setTrimSaveData(false);
 	}
 

File: src/main/java/net/querz/mcaselector/ui/FilterBox.java
Patch:
@@ -18,7 +18,6 @@
 import net.querz.mcaselector.filter.NumberFilter;
 import net.querz.mcaselector.filter.Operator;
 import net.querz.mcaselector.filter.TextFilter;
-import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.io.FileHelper;
 import net.querz.mcaselector.text.Translation;
 import java.util.Objects;
@@ -357,12 +356,12 @@ protected void update(FilterType type) {
 			}
 
 			// remove this filter from view and add new filterbox
-			FilterBox newBox = null;
+			FilterBox newBox;
 			switch (type.getFormat()) {
 				case GROUP -> newBox = new GroupFilterBox(this.parent, (GroupFilter) f, false);
 				case TEXT -> newBox = new TextFilterBox(this.parent, (TextFilter<?>) f, false);
 				case NUMBER -> newBox = new NumberFilterBox(this.parent, (NumberFilter<?>) f, false);
-				default -> Debug.dump("unknown FilterType format: " + type.getFormat());
+				default -> throw new RuntimeException("unknown FilterType format: " + type.getFormat());
 			}
 
 			if (this.parent != null) {

File: src/main/java/net/querz/mcaselector/ui/GroupFilterBox.java
Patch:
@@ -2,7 +2,6 @@
 
 import javafx.scene.layout.VBox;
 import net.querz.mcaselector.filter.*;
-import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.text.Translation;
 
 public class GroupFilterBox extends FilterBox {
@@ -46,7 +45,7 @@ private void setFilter(FilterBox parent, GroupFilter filter, boolean root) {
 			} else if (f instanceof GroupFilter) {
 				filters.getChildren().add(new GroupFilterBox(this, (GroupFilter) f, false));
 			} else {
-				Debug.error("cannot display filter " + f.getClass().getSimpleName());
+				throw new RuntimeException("failed to display filter " + f.getClass().getSimpleName());
 			}
 		}
 		setBottom(filters);

File: src/main/java/net/querz/mcaselector/ui/TileMapBox.java
Patch:
@@ -19,7 +19,6 @@
 import net.querz.mcaselector.io.ImageHelper;
 import net.querz.mcaselector.tiles.Tile;
 import net.querz.mcaselector.tiles.TileMap;
-import net.querz.mcaselector.debug.Debug;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -114,7 +113,6 @@ public TileMapBox(TileMap tileMap, Stage primaryStage) {
 		getStyleClass().add("tile-map-box");
 		ChangeListener<Number> sizeListener = (o, r, n) -> {
 			tileMap.resize(primaryStage.getWidth(), primaryStage.getHeight());
-			Debug.dump("resizing to " + primaryStage.getWidth() + " " + primaryStage.getHeight());
 		};
 		primaryStage.widthProperty().addListener(sizeListener);
 		primaryStage.heightProperty().addListener(sizeListener);

File: src/main/java/net/querz/mcaselector/ui/Window.java
Patch:
@@ -6,6 +6,7 @@
 import javafx.scene.input.KeyCode;
 import javafx.scene.layout.BorderPane;
 import javafx.stage.Stage;
+import net.querz.mcaselector.logging.Logging;
 import net.querz.mcaselector.tiles.TileMap;
 import net.querz.mcaselector.io.FileHelper;
 import net.querz.mcaselector.ui.dialog.PreviewDisclaimerDialog;
@@ -92,6 +93,7 @@ public void start(Stage primaryStage) {
 			}
 		});
 
+		Logging.updateThreadContext();
 		primaryStage.show();
 	}
 

File: src/main/java/net/querz/mcaselector/ui/dialog/AboutDialog.java
Patch:
@@ -15,7 +15,6 @@
 import javafx.scene.layout.Region;
 import javafx.stage.Stage;
 import javafx.stage.StageStyle;
-import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.io.FileHelper;
 import net.querz.mcaselector.github.VersionChecker;
 import net.querz.mcaselector.text.Translation;
@@ -101,7 +100,6 @@ private void handleCheckUpdate(String applicationVersion, Consumer<Node> resultU
 					Platform.runLater(() -> resultUIHandler.accept(upToDate));
 				}
 			} catch (Exception ex) {
-				Debug.dumpException("failed to check for latest version", ex);
 				Label error = UIFactory.label(Translation.DIALOG_ABOUT_VERSION_ERROR);
 				error.getStyleClass().add("label-hint");
 				Platform.runLater(() -> resultUIHandler.accept(error));

File: src/main/java/net/querz/mcaselector/Config.java
Patch:
@@ -1,6 +1,5 @@
 package net.querz.mcaselector;
 
-import net.querz.mcaselector.io.CacheHelper;
 import net.querz.mcaselector.io.FileHelper;
 import net.querz.mcaselector.io.WorldDirectories;
 import net.querz.mcaselector.tiles.Tile;

File: src/main/java/net/querz/mcaselector/changer/BiomeField.java
Patch:
@@ -55,11 +55,11 @@ public BiomeRegistry.BiomeIdentifier getOldValue(ChunkData data) {
 
 	@Override
 	public void change(ChunkData data) {
-		VersionController.getChunkFilter(data.getRegion().getData().getInt("DataVersion")).changeBiome(data.getRegion().getData(), getNewValue());
+		VersionController.getChunkFilter(data.region().getData().getInt("DataVersion")).changeBiome(data.region().getData(), getNewValue());
 	}
 
 	@Override
 	public void force(ChunkData data) {
-		VersionController.getChunkFilter(data.getRegion().getData().getInt("DataVersion")).forceBiome(data.getRegion().getData(), getNewValue());
+		VersionController.getChunkFilter(data.region().getData().getInt("DataVersion")).forceBiome(data.region().getData(), getNewValue());
 	}
 }

File: src/main/java/net/querz/mcaselector/changer/DeleteEntitiesField.java
Patch:
@@ -25,7 +25,7 @@ public boolean parseNewValue(String s) {
 
 	@Override
 	public void change(ChunkData data) {
-		VersionController.getEntityFilter(data.getRegion().getData().getInt("DataVersion")).deleteEntities(data);
+		VersionController.getEntityFilter(data.region().getData().getInt("DataVersion")).deleteEntities(data);
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/changer/ForceBlendField.java
Patch:
@@ -3,7 +3,6 @@
 import net.querz.mcaselector.io.mca.ChunkData;
 import net.querz.mcaselector.version.ChunkFilter;
 import net.querz.mcaselector.version.VersionController;
-import net.querz.nbt.tag.CompoundTag;
 
 public class ForceBlendField extends Field<Boolean> {
 
@@ -27,8 +26,8 @@ public boolean parseNewValue(String s) {
 
 	@Override
 	public void change(ChunkData root) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(root.getRegion().getData().getInt("DataVersion"));
-		chunkFilter.forceBlending(root.getRegion().getData());
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(root.region().getData().getInt("DataVersion"));
+		chunkFilter.forceBlending(root.region().getData());
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/changer/PreventRetrogenField.java
Patch:
@@ -24,11 +24,11 @@ public boolean parseNewValue(String s) {
 
 	@Override
 	public void change(ChunkData data) {
-		if (data.getRegion() == null || data.getRegion().getData() == null) {
+		if (data.region() == null || data.region().getData() == null) {
 			return;
 		}
-		data.getRegion().getData().remove("below_zero_retrogen");
-		data.getRegion().getData().putString("Status", "full");
+		data.region().getData().remove("below_zero_retrogen");
+		data.region().getData().putString("Status", "full");
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/filter/DataVersionFilter.java
Patch:
@@ -14,10 +14,10 @@ public DataVersionFilter(Operator operator, Comparator comparator, int value) {
 
 	@Override
 	protected Integer getNumber(ChunkData data) {
-		if (data.getRegion() == null || data.getRegion().getData() == null) {
+		if (data.region() == null || data.region().getData() == null) {
 			return 0;
 		}
-		return data.getRegion().getData().getInt("DataVersion");
+		return data.region().getData().getInt("DataVersion");
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/filter/EntityAmountFilter.java
Patch:
@@ -3,7 +3,7 @@
 import net.querz.mcaselector.io.mca.ChunkData;
 import net.querz.mcaselector.version.EntityFilter;
 import net.querz.mcaselector.version.VersionController;
-import net.querz.nbt.tag.ListTag;
+import net.querz.nbt.ListTag;
 
 public class EntityAmountFilter extends IntFilter {
 
@@ -17,8 +17,8 @@ private EntityAmountFilter(Operator operator, Comparator comparator, int value)
 
 	@Override
 	protected Integer getNumber(ChunkData data) {
-		EntityFilter entityFilter = VersionController.getEntityFilter(data.getRegion().getData().getInt("DataVersion"));
-		ListTag<?> entities = entityFilter.getEntities(data);
+		EntityFilter entityFilter = VersionController.getEntityFilter(data.region().getData().getInt("DataVersion"));
+		ListTag entities = entityFilter.getEntities(data);
 		if (entities == null) {
 			return 0;
 		}

File: src/main/java/net/querz/mcaselector/filter/TimestampFilter.java
Patch:
@@ -15,7 +15,7 @@ private TimestampFilter(Operator operator, Comparator comparator, int value) {
 
 	@Override
 	protected Integer getNumber(ChunkData data) {
-		return data.getRegion().getTimestamp();
+		return data.region().getTimestamp();
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/io/PausableThreadPoolExecutor.java
Patch:
@@ -13,8 +13,8 @@
 class PausableThreadPoolExecutor extends ThreadPoolExecutor {
 
 	private boolean isPaused;
-	private ReentrantLock pauseLock = new ReentrantLock();
-	private Condition unpaused = pauseLock.newCondition();
+	private final ReentrantLock pauseLock = new ReentrantLock();
+	private final Condition unpaused = pauseLock.newCondition();
 	private Consumer<Job> beforeExecute, afterExecute;
 
 	public PausableThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue) {

File: src/main/java/net/querz/mcaselector/io/SelectionHelper.java
Patch:
@@ -14,7 +14,7 @@
 import java.io.FileWriter;
 import java.io.IOException;
 
-public class SelectionHelper {
+public final class SelectionHelper {
 
 	private SelectionHelper() {}
 

File: src/main/java/net/querz/mcaselector/io/mca/EntitiesChunk.java
Patch:
@@ -7,7 +7,7 @@
 import net.querz.mcaselector.version.ChunkMerger;
 import net.querz.mcaselector.version.ChunkRelocator;
 import net.querz.mcaselector.version.VersionController;
-import net.querz.nbt.tag.CompoundTag;
+import net.querz.nbt.CompoundTag;
 import java.io.File;
 import java.util.List;
 

File: src/main/java/net/querz/mcaselector/io/mca/EntitiesMCAFile.java
Patch:
@@ -6,7 +6,7 @@
 import net.querz.mcaselector.range.Range;
 import net.querz.mcaselector.version.ChunkMerger;
 import net.querz.mcaselector.version.VersionController;
-import net.querz.nbt.tag.CompoundTag;
+import net.querz.nbt.CompoundTag;
 import java.io.File;
 import java.util.List;
 

File: src/main/java/net/querz/mcaselector/io/mca/MCAFile.java
Patch:
@@ -7,8 +7,6 @@
 import net.querz.mcaselector.point.Point2i;
 import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.range.Range;
-import net.querz.mcaselector.version.ChunkMerger;
-import net.querz.mcaselector.version.VersionController;
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
 import java.io.DataInputStream;

File: src/main/java/net/querz/mcaselector/io/mca/PoiChunk.java
Patch:
@@ -7,7 +7,7 @@
 import net.querz.mcaselector.version.ChunkMerger;
 import net.querz.mcaselector.version.ChunkRelocator;
 import net.querz.mcaselector.version.VersionController;
-import net.querz.nbt.tag.CompoundTag;
+import net.querz.nbt.CompoundTag;
 import java.io.File;
 import java.util.List;
 

File: src/main/java/net/querz/mcaselector/io/mca/PoiMCAFile.java
Patch:
@@ -6,7 +6,7 @@
 import net.querz.mcaselector.range.Range;
 import net.querz.mcaselector.version.ChunkMerger;
 import net.querz.mcaselector.version.VersionController;
-import net.querz.nbt.tag.CompoundTag;
+import net.querz.nbt.CompoundTag;
 import java.io.File;
 import java.util.List;
 

File: src/main/java/net/querz/mcaselector/io/mca/Region.java
Patch:
@@ -225,13 +225,13 @@ public void setChunkDataAt(ChunkData chunkData, Point2i location) {
 			entities = new EntitiesMCAFile(directories.getEntities());
 		}
 		if (region != null) {
-			region.setChunkAt(location, chunkData.getRegion());
+			region.setChunkAt(location, chunkData.region());
 		}
 		if (poi != null) {
-			poi.setChunkAt(location, chunkData.getPoi());
+			poi.setChunkAt(location, chunkData.poi());
 		}
 		if (entities != null) {
-			entities.setChunkAt(location, chunkData.getEntities());
+			entities.setChunkAt(location, chunkData.entities());
 		}
 	}
 

File: src/main/java/net/querz/mcaselector/io/mca/RegionChunk.java
Patch:
@@ -7,8 +7,7 @@
 import net.querz.mcaselector.version.ChunkMerger;
 import net.querz.mcaselector.version.ChunkRelocator;
 import net.querz.mcaselector.version.VersionController;
-import net.querz.nbt.tag.CompoundTag;
-
+import net.querz.nbt.CompoundTag;
 import java.io.File;
 import java.util.List;
 

File: src/main/java/net/querz/mcaselector/io/mca/RegionMCAFile.java
Patch:
@@ -7,7 +7,7 @@
 import net.querz.mcaselector.version.ChunkMerger;
 import net.querz.mcaselector.version.ChunkRenderer;
 import net.querz.mcaselector.version.VersionController;
-import net.querz.nbt.tag.CompoundTag;
+import net.querz.nbt.CompoundTag;
 import java.io.File;
 import java.util.List;
 

File: src/main/java/net/querz/mcaselector/text/TextHelper.java
Patch:
@@ -17,7 +17,6 @@
 import java.time.format.DateTimeParseException;
 import java.time.temporal.ChronoField;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;

File: src/main/java/net/querz/mcaselector/tiles/ImagePool.java
Patch:
@@ -261,9 +261,7 @@ public void loadRegions(ProgressTask task) {
 					})
 					.filter(Objects::nonNull)
 					.toList()).get();
-			points.forEach(p -> {
-				regions.add(p.asLong());
-			});
+			points.forEach(p -> regions.add(p.asLong()));
 			Debug.dumpf("loaded all world files");
 		} catch (InterruptedException | ExecutionException e) {
 			e.printStackTrace();

File: src/main/java/net/querz/mcaselector/tiles/overlay/AverageHeightParser.java
Patch:
@@ -15,11 +15,11 @@ public AverageHeightParser() {
 
 	@Override
 	public int parseValue(ChunkData chunkData) {
-		if (chunkData.getRegion() == null || chunkData.getRegion().getData() == null) {
+		if (chunkData.region() == null || chunkData.region().getData() == null) {
 			return 0;
 		}
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.getRegion().getData().getInt("DataVersion"));
-		return chunkFilter.getAverageHeight(chunkData.getRegion().getData());
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.region().getData().getInt("DataVersion"));
+		return chunkFilter.getAverageHeight(chunkData.region().getData());
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/tiles/overlay/BlockAmountParser.java
Patch:
@@ -17,11 +17,11 @@ public BlockAmountParser() {
 
 	@Override
 	public int parseValue(ChunkData chunkData) {
-		if (chunkData.getRegion() == null || chunkData.getRegion().getData() == null) {
+		if (chunkData.region() == null || chunkData.region().getData() == null) {
 			return 0;
 		}
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.getRegion().getData().getInt("DataVersion"));
-		return chunkFilter.getBlockAmount(chunkData.getRegion().getData(), multiValues());
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.region().getData().getInt("DataVersion"));
+		return chunkFilter.getBlockAmount(chunkData.region().getData(), multiValues());
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/tiles/overlay/DataVersionParser.java
Patch:
@@ -10,10 +10,10 @@ public DataVersionParser() {
 
 	@Override
 	public int parseValue(ChunkData chunkData) {
-		if (chunkData.getRegion() == null || chunkData.getRegion().getData() == null) {
+		if (chunkData.region() == null || chunkData.region().getData() == null) {
 			return 0;
 		}
-		return chunkData.getRegion().getData().getInt("DataVersion");
+		return chunkData.region().getData().getInt("DataVersion");
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/tiles/overlay/InhabitedTimeParser.java
Patch:
@@ -4,7 +4,7 @@
 import net.querz.mcaselector.text.TextHelper;
 import net.querz.mcaselector.version.ChunkFilter;
 import net.querz.mcaselector.version.VersionController;
-import net.querz.nbt.tag.LongTag;
+import net.querz.nbt.LongTag;
 
 public class InhabitedTimeParser extends OverlayParser {
 
@@ -19,8 +19,8 @@ public InhabitedTimeParser() {
 
 	@Override
 	public int parseValue(ChunkData chunkData) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.getRegion().getData().getInt("DataVersion"));
-		LongTag tag = chunkFilter.getInhabitedTime(chunkData.getRegion().getData());
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.region().getData().getInt("DataVersion"));
+		LongTag tag = chunkFilter.getInhabitedTime(chunkData.region().getData());
 		return tag == null ? 0 : tag.asInt();
 	}
 

File: src/main/java/net/querz/mcaselector/tiles/overlay/LastUpdateParser.java
Patch:
@@ -4,7 +4,7 @@
 import net.querz.mcaselector.text.TextHelper;
 import net.querz.mcaselector.version.ChunkFilter;
 import net.querz.mcaselector.version.VersionController;
-import net.querz.nbt.tag.LongTag;
+import net.querz.nbt.LongTag;
 
 public class LastUpdateParser extends OverlayParser {
 
@@ -19,8 +19,8 @@ public LastUpdateParser() {
 
 	@Override
 	public int parseValue(ChunkData chunkData) {
-		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.getRegion().getData().getInt("DataVersion"));
-		LongTag tag = chunkFilter.getLastUpdate(chunkData.getRegion().getData());
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.region().getData().getInt("DataVersion"));
+		LongTag tag = chunkFilter.getLastUpdate(chunkData.region().getData());
 		return tag == null ? 0 : tag.asInt();
 	}
 

File: src/main/java/net/querz/mcaselector/tiles/overlay/TimestampParser.java
Patch:
@@ -14,10 +14,10 @@ public TimestampParser() {
 
 	@Override
 	public int parseValue(ChunkData chunkData) {
-		if (chunkData.getRegion() == null) {
+		if (chunkData.region() == null) {
 			return 0;
 		}
-		return chunkData.getRegion().getTimestamp();
+		return chunkData.region().getTimestamp();
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/ui/dialog/EditArrayDialog.java
Patch:
@@ -490,8 +490,8 @@ private enum BitCount {
 		ELEVEN(11),
 		TWELVE(12);
 
-		int bits;
-		String string;
+		final int bits;
+		final String string;
 
 		BitCount(int bits) {
 			this(bits, "" + bits);

File: src/main/java/net/querz/mcaselector/version/ChunkMerger.java
Patch:
@@ -5,7 +5,6 @@
 import net.querz.nbt.CompoundTag;
 import net.querz.nbt.ListTag;
 import net.querz.nbt.Tag;
-
 import java.util.*;
 import java.util.function.Function;
 

File: src/main/java/net/querz/mcaselector/version/ChunkRenderer.java
Patch:
@@ -1,6 +1,6 @@
 package net.querz.mcaselector.version;
 
-import net.querz.nbt.tag.CompoundTag;
+import net.querz.nbt.CompoundTag;
 
 public interface ChunkRenderer {
 

File: src/main/java/net/querz/mcaselector/version/EntityFilter.java
Patch:
@@ -1,11 +1,11 @@
 package net.querz.mcaselector.version;
 
 import net.querz.mcaselector.io.mca.ChunkData;
-import net.querz.nbt.tag.ListTag;
+import net.querz.nbt.ListTag;
 
 public interface EntityFilter {
 
 	void deleteEntities(ChunkData data);
 
-	ListTag<?> getEntities(ChunkData data);
+	ListTag getEntities(ChunkData data);
 }

File: src/main/java/net/querz/mcaselector/version/VersionController.java
Patch:
@@ -8,7 +8,6 @@
 import net.querz.mcaselector.version.anvil117.*;
 import net.querz.mcaselector.version.anvil118.*;
 import net.querz.mcaselector.version.anvil119.*;
-
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112EntityMerger.java
Patch:
@@ -3,7 +3,7 @@
 import net.querz.mcaselector.point.Point2i;
 import net.querz.mcaselector.range.Range;
 import net.querz.mcaselector.version.ChunkMerger;
-import net.querz.nbt.tag.CompoundTag;
+import net.querz.nbt.CompoundTag;
 import java.util.List;
 
 public class Anvil112EntityMerger implements ChunkMerger {

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112EntityRelocator.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.version.ChunkRelocator;
-import net.querz.nbt.tag.CompoundTag;
+import net.querz.nbt.CompoundTag;
 
 public class Anvil112EntityRelocator implements ChunkRelocator {
 

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112PoiMerger.java
Patch:
@@ -3,7 +3,7 @@
 import net.querz.mcaselector.point.Point2i;
 import net.querz.mcaselector.range.Range;
 import net.querz.mcaselector.version.ChunkMerger;
-import net.querz.nbt.tag.CompoundTag;
+import net.querz.nbt.CompoundTag;
 import java.util.List;
 
 public class Anvil112PoiMerger implements ChunkMerger {

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112PoiRelocator.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.version.ChunkRelocator;
-import net.querz.nbt.tag.CompoundTag;
+import net.querz.nbt.CompoundTag;
 
 public class Anvil112PoiRelocator implements ChunkRelocator {
 

File: src/main/java/net/querz/mcaselector/version/anvil114/Anvil114PoiMerger.java
Patch:
@@ -3,7 +3,7 @@
 import net.querz.mcaselector.point.Point2i;
 import net.querz.mcaselector.range.Range;
 import net.querz.mcaselector.version.ChunkMerger;
-import net.querz.nbt.tag.CompoundTag;
+import net.querz.nbt.CompoundTag;
 import java.util.List;
 
 public class Anvil114PoiMerger implements ChunkMerger {

File: src/main/java/net/querz/mcaselector/version/anvil115/Anvil115ChunkFilter.java
Patch:
@@ -3,7 +3,7 @@
 import net.querz.mcaselector.io.registry.BiomeRegistry;
 import net.querz.mcaselector.version.Helper;
 import net.querz.mcaselector.version.anvil113.Anvil113ChunkFilter;
-import net.querz.nbt.tag.CompoundTag;
+import net.querz.nbt.CompoundTag;
 import java.util.Arrays;
 
 public class Anvil115ChunkFilter extends Anvil113ChunkFilter {

File: src/main/java/net/querz/mcaselector/version/anvil117/Anvil117ChunkFilter.java
Patch:
@@ -3,7 +3,7 @@
 import net.querz.mcaselector.io.registry.BiomeRegistry;
 import net.querz.mcaselector.version.Helper;
 import net.querz.mcaselector.version.anvil116.Anvil116ChunkFilter;
-import net.querz.nbt.tag.CompoundTag;
+import net.querz.nbt.CompoundTag;
 import java.util.Arrays;
 
 public class Anvil117ChunkFilter extends Anvil116ChunkFilter {

File: src/main/java/net/querz/mcaselector/version/ChunkFilter.java
Patch:
@@ -65,6 +65,8 @@ public interface ChunkFilter {
 
 	void setLightPopulated(CompoundTag data, byte lightPopulated);
 
+	void forceBlending(CompoundTag data);
+
 	class BlockReplaceData {
 
 		private String name;

File: src/main/java/net/querz/mcaselector/Config.java
Patch:
@@ -13,6 +13,7 @@
 import java.io.*;
 import java.nio.file.Files;
 import java.util.*;
+import java.util.stream.Stream;
 
 public final class Config {
 
@@ -384,8 +385,8 @@ public static void loadFromIni() {
 		if (DEFAULT_BASE_CONFIG_FILE.exists()) {
 			String userDir = DEFAULT_BASE_DIR.getAbsolutePath();
 			Map<String, String> config = new HashMap<>();
-			try {
-				Files.lines(DEFAULT_BASE_CONFIG_FILE.toPath()).forEach(l -> {
+			try (Stream<String> lines = Files.lines(DEFAULT_BASE_CONFIG_FILE.toPath())) {
+				lines.forEach(l -> {
 					if (l.charAt(0) == ';') {
 						return;
 					}

File: src/main/java/net/querz/mcaselector/filter/BorderFilter.java
Patch:
@@ -191,7 +191,7 @@ private RegionMCAFile getRegionHeader(Point2i region) {
 
 			// load region header
 			RegionMCAFile regionMCAFile = new RegionMCAFile(FileHelper.createMCAFilePath(region));
-			if (!regionMCAFile.getFile().exists() || regionMCAFile.getFile().length() <= 8192) {
+			if (!regionMCAFile.getFile().exists() || regionMCAFile.getFile().length() <= FileHelper.HEADER_SIZE) {
 				push(key, null);
 				return null;
 			}

File: src/main/java/net/querz/mcaselector/io/FileHelper.java
Patch:
@@ -31,6 +31,7 @@
 
 public final class FileHelper {
 
+	public static final int HEADER_SIZE = 8192;
 	public static final Pattern MCA_FILE_PATTERN = Pattern.compile("^r\\.-?\\d+\\.-?\\d+\\.mca$");
 	public static final Pattern REGION_GROUP_PATTERN = Pattern.compile("^r\\.(?<regionX>-?\\d+)\\.(?<regionZ>-?\\d+)\\.mca$");
 	public static final Pattern DAT_REGION_GROUP_PATTERN = Pattern.compile("^r\\.(?<regionX>-?\\d+)\\.(?<regionZ>-?\\d+)\\.dat$");

File: src/main/java/net/querz/mcaselector/io/mca/MCAFile.java
Patch:
@@ -301,7 +301,7 @@ public void loadHeader(ByteArrayPointer ptr) throws IOException {
 
 	public T loadSingleChunk(Point2i chunk) throws IOException {
 		// ignore files that don't have a full header
-		if (file.length() < 8192) {
+		if (file.length() < FileHelper.HEADER_SIZE) {
 			return null;
 		}
 

File: src/main/java/net/querz/mcaselector/io/mca/Region.java
Patch:
@@ -5,6 +5,7 @@
 import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.filter.Filter;
 import net.querz.mcaselector.io.ByteArrayPointer;
+import net.querz.mcaselector.io.FileHelper;
 import net.querz.mcaselector.io.RegionDirectories;
 import net.querz.mcaselector.io.SelectionData;
 import net.querz.mcaselector.point.Point2i;
@@ -28,7 +29,7 @@ public class Region {
 
 	public static Region loadRegion(RegionDirectories dirs, byte[] regionData, byte[] poiData, byte[] entitiesData) throws IOException {
 		Region r = new Region();
-		if (dirs.getRegion() != null && regionData != null) {
+		if (dirs.getRegion() != null && dirs.getRegion().length() > FileHelper.HEADER_SIZE && regionData != null) {
 			r.loadRegion(dirs.getRegion(), new ByteArrayPointer(regionData));
 			r.location = dirs.getLocation();
 		}

File: src/main/java/net/querz/mcaselector/tiles/ImagePool.java
Patch:
@@ -251,7 +251,7 @@ public void loadRegions(ProgressTask task) {
 		ForkJoinPool threadPool = new ForkJoinPool(Config.getProcessThreads());
 		try {
 			List<Point2i> points = threadPool.submit(() -> Arrays.stream(files).parallel()
-					.filter(file -> file.length() > 8192) // only files that have more data than just the header
+					.filter(file -> file.length() > FileHelper.HEADER_SIZE) // only files that have more data than just the header
 					.map(file -> {
 						Point2i p = FileHelper.parseMCAFileName(file);
 						if (task != null && p != null) {

File: src/main/java/net/querz/mcaselector/Config.java
Patch:
@@ -13,6 +13,7 @@
 import java.io.*;
 import java.nio.file.Files;
 import java.util.*;
+import java.util.stream.Stream;
 
 public final class Config {
 
@@ -384,8 +385,8 @@ public static void loadFromIni() {
 		if (DEFAULT_BASE_CONFIG_FILE.exists()) {
 			String userDir = DEFAULT_BASE_DIR.getAbsolutePath();
 			Map<String, String> config = new HashMap<>();
-			try {
-				Files.lines(DEFAULT_BASE_CONFIG_FILE.toPath()).forEach(l -> {
+			try (Stream<String> lines = Files.lines(DEFAULT_BASE_CONFIG_FILE.toPath())) {
+				lines.forEach(l -> {
 					if (l.charAt(0) == ';') {
 						return;
 					}

File: src/main/java/net/querz/mcaselector/tiles/ImagePool.java
Patch:
@@ -242,6 +242,8 @@ public void discardImage(Point2i region) {
 				scale.getValue().remove(region.asLong());
 			}
 		}
+		if (!cache.isInitialized())
+			return;
 		try {
 			cache.deleteData(region);
 		} catch (SQLException e) {

File: src/main/java/net/querz/mcaselector/tiles/ImagePool.java
Patch:
@@ -255,7 +255,7 @@ public void loadRegions(ProgressTask task) {
 						.filter(file -> file.length() > 8192) // only files that have more data than just the header
 						.map(file -> {
 							Point2i p = FileHelper.parseMCAFileName(file);
-							if (task != null) {
+							if (task != null && p != null) {
 								task.incrementProgress(String.format("%d, %d", p.getX(), p.getZ()));
 							}
 							return p;

File: src/main/java/net/querz/mcaselector/tiles/ImagePool.java
Patch:
@@ -242,6 +242,8 @@ public void discardImage(Point2i region) {
 				scale.getValue().remove(region.asLong());
 			}
 		}
+		if (!cache.isInitialized())
+			return;
 		try {
 			cache.deleteData(region);
 		} catch (SQLException e) {

File: src/main/java/net/querz/mcaselector/io/CacheHelper.java
Patch:
@@ -49,9 +49,9 @@ public static void clearAllCache(TileMap tileMap) {
 		for (File cacheDir : Config.getCacheDirs()) {
 			FileHelper.deleteDirectory(cacheDir);
 		}
+		RegionImageGenerator.invalidateCachedMCAFiles();
 		updateVersionFile();
 		updateWorldSettingsFile();
-		RegionImageGenerator.invalidateCachedMCAFiles();
 		tileMap.clear();
 		tileMap.draw();
 	}

File: src/main/java/net/querz/mcaselector/Config.java
Patch:
@@ -453,7 +453,7 @@ public static void loadFromIni() {
 			}
 		}
 
-		System.out.println(asString());
+		Debug.dump(asString());
 	}
 
 	public static void exportConfig() {

File: src/main/java/net/querz/mcaselector/io/CacheHelper.java
Patch:
@@ -252,7 +252,7 @@ public static void readWorldSettingsFile(TileMap tileMap) {
 		}
 		Config.setShowNonExistentRegions(showNonexistentRegions);
 
-		System.out.println(Config.asString());
+		Debug.dump(Config.asString());
 	}
 
 	public static void updateWorldSettingsFile() {

File: src/main/java/net/querz/mcaselector/tiles/TileMap.java
Patch:
@@ -294,7 +294,6 @@ public void reload() {
 				if (tile != null) {
 					tile.loaded = false;
 				}
-				System.out.println("reloaded " + region);
 			}
 		}, new Point2f(), () -> scale, Integer.MAX_VALUE);
 	}

File: src/main/java/net/querz/mcaselector/changer/ReplaceBlocksField.java
Patch:
@@ -176,7 +176,8 @@ public Map<String, ChunkFilter.BlockReplaceData> getOldValue(ChunkData data) {
 
 	@Override
 	public void change(ChunkData data) {
-		VersionController.getChunkFilter(data.getRegion().getData().getInt("DataVersion")).replaceBlocks(data.getRegion().getData(), getNewValue());
+		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.getRegion().getData().getInt("DataVersion"));
+		chunkFilter.replaceBlocks(data.getRegion().getData(), getNewValue());
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/filter/FilterType.java
Patch:
@@ -9,6 +9,7 @@ public enum FilterType {
 	DATA_VERSION("DataVersion", DataVersionFilter::new, Format.NUMBER),
 	INHABITED_TIME("InhabitedTime", InhabitedTimeFilter::new, Format.NUMBER),
 	X_POS("xPos", XPosFilter::new, Format.NUMBER),
+	Y_POS("yPos", YPosFilter::new, Format.NUMBER),
 	Z_POS("zPos", ZPosFilter::new, Format.NUMBER),
 	TIMESTAMP("Timestamp", TimestampFilter::new, Format.NUMBER),
 	LAST_UPDATE("LastUpdate", LastUpdateFilter::new, Format.NUMBER),

File: src/main/java/net/querz/mcaselector/version/ChunkMerger.java
Patch:
@@ -1,5 +1,6 @@
 package net.querz.mcaselector.version;
 
+import net.querz.mcaselector.point.Point2i;
 import net.querz.mcaselector.range.Range;
 import net.querz.nbt.tag.CompoundTag;
 import net.querz.nbt.tag.ListTag;
@@ -12,6 +13,8 @@ public interface ChunkMerger {
 
 	void mergeChunks(CompoundTag source, CompoundTag destination, List<Range> ranges, int yOffset);
 
+	CompoundTag newEmptyChunk(Point2i absoluteLocation, int dataVersion);
+
 	default <T extends Tag<?>> ListTag<T> mergeLists(ListTag<T> source, ListTag<T> destination, List<Range> ranges, Function<T, Integer> ySupplier, int yOffset) {
 
 		Map<Integer, T> resultSet = new HashMap<>();

File: src/main/java/net/querz/mcaselector/version/ChunkRenderer.java
Patch:
@@ -9,4 +9,6 @@ public interface ChunkRenderer {
 	void drawLayer(CompoundTag root, ColorMapping colorMapping, int x, int z, int scale, int[] pixelBuffer, int height);
 
 	void drawCaves(CompoundTag root, ColorMapping colorMapping, int x, int z, int scale, int[] pixelBuffer, short[] terrainHeights, int height);
+
+	CompoundTag minimizeChunk(CompoundTag root);
 }

File: src/main/java/net/querz/mcaselector/version/anvil118/LegacyHelper.java
Patch:
@@ -98,12 +98,12 @@ static Point2i getChunkCoordinates(CompoundTag root, int dataVersion) {
 
 	static void applyOffsetToChunkCoordinates(CompoundTag root, Point3i offset, int dataVersion) {
 		if (dataVersion < 2844) {
-			root.putInt("xPos", root.getInt("xPos") + offset.blockToChunk().getX());
-			root.putInt("zPos", root.getInt("zPos") + offset.blockToChunk().getZ());
-		} else {
 			CompoundTag level = Helper.levelFromRoot(root);
 			level.putInt("xPos", level.getInt("xPos") + offset.blockToChunk().getX());
 			level.putInt("zPos", level.getInt("zPos") + offset.blockToChunk().getZ());
+		} else {
+			root.putInt("xPos", root.getInt("xPos") + offset.blockToChunk().getX());
+			root.putInt("zPos", root.getInt("zPos") + offset.blockToChunk().getZ());
 		}
 	}
 

File: src/main/java/net/querz/mcaselector/filter/InhabitedTimeFilter.java
Patch:
@@ -9,7 +9,7 @@ public InhabitedTimeFilter() {
 		this(Operator.AND, Comparator.EQUAL, 0);
 	}
 
-	private InhabitedTimeFilter(Operator operator, Comparator comparator, long value) {
+	public InhabitedTimeFilter(Operator operator, Comparator comparator, long value) {
 		super(FilterType.INHABITED_TIME, operator, comparator, value);
 	}
 

File: src/main/java/net/querz/mcaselector/io/mca/MCAFile.java
Patch:
@@ -428,9 +428,8 @@ protected void mergeChunksInto(MCAFile<T> destination, Point3i offset, boolean o
 									srcChunk, destChunk, sourceVersion, destinationVersion);
 						}
 
-						ChunkMerger m = VersionController.getChunkMerger(sourceChunk.getData().getInt("DataVersion"));
 						try {
-							m.mergeChunks(sourceChunk.getData(), destinationChunk.getData(), ranges, offset.getY());
+							sourceChunk.merge(destinationChunk.getData(), ranges, offset.getY());
 						} catch (Exception ex) {
 							Point2i srcChunk = location.regionToChunk().add(x, z);
 							Debug.dump(new Exception("failed to merge chunk " + srcChunk + " into " + destChunk, ex));

File: src/main/java/net/querz/mcaselector/tiles/overlay/EntityAmountParser.java
Patch:
@@ -13,6 +13,9 @@ public EntityAmountParser() {
 
 	@Override
 	public int parseValue(ChunkData chunkData) {
+		if (chunkData.getRegion() == null || chunkData.getRegion().getData() == null) {
+			return 0;
+		}
 		EntityFilter entityFilter = VersionController.getEntityFilter(chunkData.getRegion().getData().getInt("DataVersion"));
 		ListTag<?> entities = entityFilter.getEntities(chunkData);
 		if (entities == null) {

File: src/main/java/net/querz/mcaselector/tiles/overlay/TileEntityAmountParser.java
Patch:
@@ -13,7 +13,7 @@ public TileEntityAmountParser() {
 
 	@Override
 	public int parseValue(ChunkData chunkData) {
-		if (chunkData.getRegion() == null) {
+		if (chunkData.getRegion() == null || chunkData.getRegion().getData() == null) {
 			return 0;
 		}
 		Tag<?> rawTileEntities = chunkData.getRegion().getData().getCompoundTag("Level").get("TileEntities");

File: src/main/java/net/querz/mcaselector/ui/DialogHelper.java
Patch:
@@ -382,7 +382,7 @@ public static void swapChunks(TileMap tileMap, Stage primaryStage) {
 			Point2i fromRegion = fromChunk.chunkToRegion();
 			Point2i toRegion = toChunk.chunkToRegion();
 
-			System.out.printf("swapping chunk %s:%s with %s:%s", fromChunk, fromRegion, toChunk, toRegion);
+			Debug.dumpf("swapping chunk %s:%s with %s:%s", fromChunk, fromRegion, toChunk, toRegion);
 
 			t.incrementProgress(FileHelper.createMCAFileName(fromRegion));
 

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112ChunkRelocator.java
Patch:
@@ -12,7 +12,7 @@
 
 public class Anvil112ChunkRelocator implements ChunkRelocator {
 
-	public boolean relocateChunk(CompoundTag root, Point3i offset) {
+	public boolean relocate(CompoundTag root, Point3i offset) {
 		CompoundTag level = Helper.tagFromCompound(root, "Level");
 		if (level == null) {
 			return false;

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112EntityRelocator.java
Patch:
@@ -1,13 +1,13 @@
 package net.querz.mcaselector.version.anvil112;
 
 import net.querz.mcaselector.point.Point3i;
-import net.querz.mcaselector.version.EntityRelocator;
+import net.querz.mcaselector.version.ChunkRelocator;
 import net.querz.nbt.tag.CompoundTag;
 
-public class Anvil112EntityRelocator implements EntityRelocator {
+public class Anvil112EntityRelocator implements ChunkRelocator {
 
 	@Override
-	public boolean relocateEntities(CompoundTag root, Point3i offset) {
+	public boolean relocate(CompoundTag root, Point3i offset) {
 		// nothing to do until 1.17
 		return true;
 	}

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112PoiRelocator.java
Patch:
@@ -1,13 +1,13 @@
 package net.querz.mcaselector.version.anvil112;
 
 import net.querz.mcaselector.point.Point3i;
-import net.querz.mcaselector.version.PoiRelocator;
+import net.querz.mcaselector.version.ChunkRelocator;
 import net.querz.nbt.tag.CompoundTag;
 
-public class Anvil112PoiRelocator implements PoiRelocator {
+public class Anvil112PoiRelocator implements ChunkRelocator {
 
 	@Override
-	public boolean relocatePoi(CompoundTag root, Point3i offset) {
+	public boolean relocate(CompoundTag root, Point3i offset) {
 		// poi was introduced in 1.14, so we do nothing here
 		return true;
 	}

File: src/main/java/net/querz/mcaselector/version/anvil113/Anvil113ChunkRelocator.java
Patch:
@@ -16,7 +16,7 @@
 public class Anvil113ChunkRelocator implements ChunkRelocator {
 
 	@Override
-	public boolean relocateChunk(CompoundTag root, Point3i offset) {
+	public boolean relocate(CompoundTag root, Point3i offset) {
 		CompoundTag level = Helper.tagFromCompound(root, "Level");
 		if (level == null) {
 			return false;

File: src/main/java/net/querz/mcaselector/version/anvil114/Anvil114ChunkRelocator.java
Patch:
@@ -16,7 +16,7 @@
 public class Anvil114ChunkRelocator implements ChunkRelocator {
 
 	@Override
-	public boolean relocateChunk(CompoundTag root, Point3i offset) {
+	public boolean relocate(CompoundTag root, Point3i offset) {
 		CompoundTag level = Helper.tagFromCompound(root, "Level");
 		if (level == null) {
 			return false;

File: src/main/java/net/querz/mcaselector/version/anvil114/Anvil114PoiRelocator.java
Patch:
@@ -1,19 +1,19 @@
 package net.querz.mcaselector.version.anvil114;
 
 import net.querz.mcaselector.point.Point3i;
+import net.querz.mcaselector.version.ChunkRelocator;
 import net.querz.mcaselector.version.Helper;
-import net.querz.mcaselector.version.PoiRelocator;
 import net.querz.nbt.tag.CompoundTag;
 import net.querz.nbt.tag.ListTag;
 import net.querz.nbt.tag.LongArrayTag;
 import net.querz.nbt.tag.Tag;
 import java.util.Map;
 import static net.querz.mcaselector.validation.ValidationHelper.silent;
 
-public class Anvil114PoiRelocator implements PoiRelocator {
+public class Anvil114PoiRelocator implements ChunkRelocator {
 
 	@Override
-	public boolean relocatePoi(CompoundTag root, Point3i offset) {
+	public boolean relocate(CompoundTag root, Point3i offset) {
 		CompoundTag sections = Helper.tagFromCompound(root, "Sections");
 		if (sections == null) {
 			return false;

File: src/main/java/net/querz/mcaselector/version/anvil115/Anvil115ChunkRelocator.java
Patch:
@@ -16,7 +16,7 @@
 public class Anvil115ChunkRelocator implements ChunkRelocator {
 
 	@Override
-	public boolean relocateChunk(CompoundTag root, Point3i offset) {
+	public boolean relocate(CompoundTag root, Point3i offset) {
 		CompoundTag level = Helper.tagFromCompound(root, "Level");
 		if (level == null) {
 			return false;

File: src/main/java/net/querz/mcaselector/version/anvil116/Anvil116ChunkRelocator.java
Patch:
@@ -16,7 +16,7 @@
 public class Anvil116ChunkRelocator implements ChunkRelocator {
 
 	@Override
-	public boolean relocateChunk(CompoundTag root, Point3i offset) {
+	public boolean relocate(CompoundTag root, Point3i offset) {
 		CompoundTag level = Helper.tagFromCompound(root, "Level");
 		if (level == null) {
 			return false;

File: src/main/java/net/querz/mcaselector/version/anvil117/Anvil117ChunkRelocator.java
Patch:
@@ -15,7 +15,7 @@
 public class Anvil117ChunkRelocator implements ChunkRelocator {
 
 	@Override
-	public boolean relocateChunk(CompoundTag root, Point3i offset) {
+	public boolean relocate(CompoundTag root, Point3i offset) {
 		CompoundTag level = Helper.tagFromCompound(root, "Level");
 		if (level == null) {
 			return false;

File: src/main/java/net/querz/mcaselector/version/anvil117/Anvil117EntityRelocator.java
Patch:
@@ -1,7 +1,7 @@
 package net.querz.mcaselector.version.anvil117;
 
 import net.querz.mcaselector.point.Point3i;
-import net.querz.mcaselector.version.EntityRelocator;
+import net.querz.mcaselector.version.ChunkRelocator;
 import net.querz.mcaselector.version.Helper;
 import net.querz.nbt.tag.CompoundTag;
 import net.querz.nbt.tag.DoubleTag;
@@ -10,10 +10,10 @@
 import net.querz.nbt.tag.ListTag;
 import static net.querz.mcaselector.version.anvil117.Anvil117ChunkRelocator.*;
 
-public class Anvil117EntityRelocator implements EntityRelocator {
+public class Anvil117EntityRelocator implements ChunkRelocator {
 
 	@Override
-	public boolean relocateEntities(CompoundTag root, Point3i offset) {
+	public boolean relocate(CompoundTag root, Point3i offset) {
 		int[] position = Helper.intArrayFromCompound(root, "Position");
 		if (position == null || position.length != 2) {
 			return false;

File: src/main/java/net/querz/mcaselector/version/anvil118/Anvil118ChunkRelocator.java
Patch:
@@ -16,7 +16,7 @@
 public class Anvil118ChunkRelocator implements ChunkRelocator {
 
 	@Override
-	public boolean relocateChunk(CompoundTag root, Point3i offset) {
+	public boolean relocate(CompoundTag root, Point3i offset) {
 		CompoundTag level = Helper.tagFromCompound(root, "Level");
 		if (level == null) {
 			return false;

File: src/main/java/net/querz/mcaselector/version/anvil118/Anvil118PoiRelocator.java
Patch:
@@ -1,19 +1,19 @@
 package net.querz.mcaselector.version.anvil118;
 
 import net.querz.mcaselector.point.Point3i;
+import net.querz.mcaselector.version.ChunkRelocator;
 import net.querz.mcaselector.version.Helper;
-import net.querz.mcaselector.version.PoiRelocator;
 import net.querz.nbt.tag.CompoundTag;
 import net.querz.nbt.tag.ListTag;
 import net.querz.nbt.tag.LongArrayTag;
 import net.querz.nbt.tag.Tag;
 import java.util.Map;
 import static net.querz.mcaselector.validation.ValidationHelper.catchClassCastException;
 
-public class Anvil118PoiRelocator implements PoiRelocator {
+public class Anvil118PoiRelocator implements ChunkRelocator {
 
 	@Override
-	public boolean relocatePoi(CompoundTag root, Point3i offset) {
+	public boolean relocate(CompoundTag root, Point3i offset) {
 		if (root == null || !root.containsKey("Sections")) {
 			return false;
 		}

File: src/main/java/net/querz/mcaselector/changer/BiomeField.java
Patch:
@@ -24,6 +24,8 @@ public boolean parseNewValue(String s) {
 		if (low.startsWith("'") && low.endsWith("'") && low.length() > 1) {
 			low = low.substring(1, low.length() - 1);
 			quoted = true;
+		} else if (!low.startsWith("minecraft:")) {
+			low = "minecraft:" + low;
 		}
 
 		if (low.matches("^[0-9]+$")) {

File: src/main/java/net/querz/mcaselector/filter/BiomeFilter.java
Patch:
@@ -72,6 +72,8 @@ public void setFilterValue(String raw) {
 				if (name.startsWith("'") && name.endsWith("'") && name.length() > 1) {
 					name = name.substring(1, name.length() - 1);
 					quoted = true;
+				} else if (!name.startsWith("minecraft:")) {
+					name = "minecraft:" + name;
 				}
 
 				if (name.matches("^[0-9]+$")) {

File: src/main/java/net/querz/mcaselector/filter/StructureFilter.java
Patch:
@@ -60,11 +60,11 @@ public boolean intersects(List<String> value, ChunkData data) {
 		CompoundTag rawStructures = data.getRegion().getData().getCompoundTag("Level").getCompoundTag("Structures").getCompoundTag("References");
 
 		for (String name : getFilterValue()) {
-			long[] references = ValidationHelper.withDefaultSilent(() -> rawStructures.getLongArray(name), null);
+			long[] references = ValidationHelper.silent(() -> rawStructures.getLongArray(name), null);
 			if (references != null && references.length > 0) {
 				return true;
 			}
-			references = ValidationHelper.withDefaultSilent(() -> rawStructures.getLongArray(validNames.get(name)), null);
+			references = ValidationHelper.silent(() -> rawStructures.getLongArray(validNames.get(name)), null);
 			if (references != null && references.length > 0) {
 				return true;
 			}

File: src/main/java/net/querz/mcaselector/headless/ParamExecutor.java
Patch:
@@ -20,6 +20,7 @@
 import net.querz.mcaselector.io.job.SelectionExporter;
 import net.querz.mcaselector.io.job.SelectionImageExporter;
 import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.property.DataProperty;
 import net.querz.mcaselector.range.Range;
 import net.querz.mcaselector.range.RangeParser;
@@ -172,7 +173,7 @@ private void imp(FutureTask<Boolean> future) throws IOException {
 		progress.onDone(future);
 
 		DataProperty<Map<Point2i, RegionDirectories>> tempFiles = new DataProperty<>();
-		ChunkImporter.importChunks(inputDirectories, progress, true, overwrite, sourceSelection, targetSelection, sections, new Point2i(offsetX, offsetZ), tempFiles);
+		ChunkImporter.importChunks(inputDirectories, progress, true, overwrite, sourceSelection, targetSelection, sections, new Point3i(offsetX, 0, offsetZ), tempFiles);
 		if (tempFiles.get() != null) {
 			for (RegionDirectories tempFile : tempFiles.get().values()) {
 				if (!tempFile.getRegion().delete()) {

File: src/main/java/net/querz/mcaselector/io/BiomeRegistry.java
Patch:
@@ -35,8 +35,8 @@ private BiomeRegistry() {}
 					Debug.dumpf("invalid biome id: %s", line);
 					continue;
 				}
-				idMapping.put(id, split[0]);
-				nameMapping.put(split[0], id);
+				idMapping.put(id, "minecraft:" + split[0]);
+				nameMapping.put("minecraft:" + split[0], id);
 			}
 		} catch (IOException ex) {
 			Debug.dumpException("error reading mapping/biome_name_to_id.txt", ex);
@@ -46,7 +46,7 @@ private BiomeRegistry() {}
 				new InputStreamReader(Objects.requireNonNull(BiomeFilter.class.getClassLoader().getResourceAsStream("mapping/all_biome_names.txt"))))) {
 			String line;
 			while ((line = bis.readLine()) != null) {
-				mapping.add(line);
+				mapping.add("minecraft:" + line);
 			}
 		} catch (IOException ex) {
 			Debug.dumpException("error reading mapping/all_biome_names.txt", ex);

File: src/main/java/net/querz/mcaselector/io/mca/Chunk.java
Patch:
@@ -2,6 +2,7 @@
 
 import net.querz.mcaselector.io.ByteArrayPointer;
 import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.validation.ValidationHelper;
 import net.querz.nbt.io.NBTDeserializer;
 import net.querz.nbt.io.NBTSerializer;
@@ -115,7 +116,7 @@ public int save(RandomAccessFile raf) throws IOException {
 		}
 	}
 
-	public abstract boolean relocate(Point2i offset);
+	public abstract boolean relocate(Point3i offset);
 
 	public abstract File getMCCFile();
 

File: src/main/java/net/querz/mcaselector/io/mca/ChunkData.java
Patch:
@@ -2,6 +2,7 @@
 
 import net.querz.mcaselector.changer.Field;
 import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.tiles.overlay.OverlayParser;
 import java.util.List;
 
@@ -29,7 +30,7 @@ public PoiChunk getPoi() {
 		return poi;
 	}
 
-	public boolean relocate(Point2i offset) {
+	public boolean relocate(Point3i offset) {
 		boolean result = true;
 		if (region != null && region.getData() != null && region.getData().containsKey("DataVersion")) {
 			result = region.relocate(offset);

File: src/main/java/net/querz/mcaselector/io/mca/EntitiesChunk.java
Patch:
@@ -2,6 +2,7 @@
 
 import net.querz.mcaselector.io.FileHelper;
 import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.version.EntityRelocator;
 import net.querz.mcaselector.version.VersionController;
 import java.io.File;
@@ -13,7 +14,7 @@ public EntitiesChunk(Point2i absoluteLocation) {
 	}
 
 	@Override
-	public boolean relocate(Point2i offset) {
+	public boolean relocate(Point3i offset) {
 		EntityRelocator relocator = VersionController.getEntityRelocator(data.getInt("DataVersion"));
 		return relocator.relocateEntities(data, offset);
 	}

File: src/main/java/net/querz/mcaselector/io/mca/EntitiesMCAFile.java
Patch:
@@ -2,11 +2,11 @@
 
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.range.Range;
 import net.querz.nbt.tag.CompoundTag;
 import java.io.File;
 import java.util.List;
-import java.util.Set;
 
 public class EntitiesMCAFile extends MCAFile<EntitiesChunk> {
 
@@ -25,7 +25,7 @@ static EntitiesChunk newEmptyChunk(Point2i absoluteLocation, int dataVersion) {
 	}
 
 	@Override
-	public void mergeChunksInto(MCAFile<EntitiesChunk> destination, Point2i offset, boolean overwrite, LongOpenHashSet sourceChunks, LongOpenHashSet selection, List<Range> ranges) {
+	public void mergeChunksInto(MCAFile<EntitiesChunk> destination, Point3i offset, boolean overwrite, LongOpenHashSet sourceChunks, LongOpenHashSet selection, List<Range> ranges) {
 		mergeChunksInto(destination, offset, overwrite, sourceChunks, selection, ranges, EntitiesMCAFile::newEmptyChunk);
 	}
 }

File: src/main/java/net/querz/mcaselector/io/mca/PoiChunk.java
Patch:
@@ -2,6 +2,7 @@
 
 import net.querz.mcaselector.io.FileHelper;
 import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.version.PoiRelocator;
 import net.querz.mcaselector.version.VersionController;
 import java.io.File;
@@ -13,7 +14,7 @@ public PoiChunk(Point2i absoluteLocation) {
 	}
 
 	@Override
-	public boolean relocate(Point2i offset) {
+	public boolean relocate(Point3i offset) {
 		PoiRelocator relocator = VersionController.getPoiRelocator(data.getInt("DataVersion"));
 		return relocator.relocatePoi(data, offset);
 	}

File: src/main/java/net/querz/mcaselector/io/mca/PoiMCAFile.java
Patch:
@@ -2,11 +2,11 @@
 
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.range.Range;
 import net.querz.nbt.tag.CompoundTag;
 import java.io.File;
 import java.util.List;
-import java.util.Set;
 
 public class PoiMCAFile extends MCAFile<PoiChunk> {
 
@@ -25,7 +25,7 @@ static PoiChunk newEmptyChunk(Point2i absoluteLocation, int dataVersion) {
 	}
 
 	@Override
-	public void mergeChunksInto(MCAFile<PoiChunk> destination, Point2i offset, boolean overwrite, LongOpenHashSet sourceChunks, LongOpenHashSet selection, List<Range> ranges) {
+	public void mergeChunksInto(MCAFile<PoiChunk> destination, Point3i offset, boolean overwrite, LongOpenHashSet sourceChunks, LongOpenHashSet selection, List<Range> ranges) {
 		mergeChunksInto(destination, offset, overwrite, sourceChunks, selection, ranges, PoiMCAFile::newEmptyChunk);
 	}
 }

File: src/main/java/net/querz/mcaselector/io/mca/Region.java
Patch:
@@ -8,13 +8,12 @@
 import net.querz.mcaselector.io.RegionDirectories;
 import net.querz.mcaselector.io.SelectionData;
 import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.progress.Timer;
 import net.querz.mcaselector.range.Range;
 import java.io.File;
 import java.io.IOException;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
 
 // holds data for chunks, poi and entities
 public class Region {
@@ -429,7 +428,7 @@ public void applyFieldChanges(List<Field<?>> fields, boolean force, SelectionDat
 		Debug.printf("took %s to apply field changes to region %s", t, location);
 	}
 
-	public void mergeInto(Region region, Point2i offset, boolean overwrite, LongOpenHashSet sourceChunks,LongOpenHashSet selection, List<Range> ranges) {
+	public void mergeInto(Region region, Point3i offset, boolean overwrite, LongOpenHashSet sourceChunks, LongOpenHashSet selection, List<Range> ranges) {
 		if (this.region != null) {
 			this.region.mergeChunksInto(region.region, offset, overwrite, sourceChunks, selection, ranges);
 		}

File: src/main/java/net/querz/mcaselector/io/mca/RegionChunk.java
Patch:
@@ -2,6 +2,7 @@
 
 import net.querz.mcaselector.io.FileHelper;
 import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.version.ChunkRelocator;
 import net.querz.mcaselector.version.VersionController;
 import java.io.File;
@@ -13,7 +14,7 @@ public RegionChunk(Point2i absoluteLocation) {
 	}
 
 	@Override
-	public boolean relocate(Point2i offset) {
+	public boolean relocate(Point3i offset) {
 		ChunkRelocator relocator = VersionController.getChunkRelocator(data.getInt("DataVersion"));
 		return relocator.relocateChunk(data, offset);
 	}

File: src/main/java/net/querz/mcaselector/io/mca/RegionMCAFile.java
Patch:
@@ -2,11 +2,11 @@
 
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.range.Range;
 import net.querz.nbt.tag.CompoundTag;
 import java.io.File;
 import java.util.List;
-import java.util.Set;
 
 public class RegionMCAFile extends MCAFile<RegionChunk> {
 
@@ -34,7 +34,7 @@ static RegionChunk newEmptyChunk(Point2i absoluteLocation, int dataVersion) {
 	}
 
 	@Override
-	public void mergeChunksInto(MCAFile<RegionChunk> destination, Point2i offset, boolean overwrite, LongOpenHashSet sourceChunks, LongOpenHashSet selection, List<Range> ranges) {
+	public void mergeChunksInto(MCAFile<RegionChunk> destination, Point3i offset, boolean overwrite, LongOpenHashSet sourceChunks, LongOpenHashSet selection, List<Range> ranges) {
 		mergeChunksInto(destination, offset, overwrite, sourceChunks, selection, ranges, RegionMCAFile::newEmptyChunk);
 	}
 

File: src/main/java/net/querz/mcaselector/tiles/overlay/DataVersionParser.java
Patch:
@@ -11,7 +11,7 @@ public DataVersionParser() {
 
 	@Override
 	public int parseValue(ChunkData chunkData) {
-		return ValidationHelper.withDefaultSilent(() -> chunkData.getRegion().getData().getInt("DataVersion"), 0);
+		return ValidationHelper.silent(() -> chunkData.getRegion().getData().getInt("DataVersion"), 0);
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/tiles/overlay/InhabitedTimeParser.java
Patch:
@@ -17,7 +17,7 @@ public InhabitedTimeParser() {
 
 	@Override
 	public int parseValue(ChunkData chunkData) {
-		return ValidationHelper.withDefaultSilent(() -> chunkData.getRegion().getData().getCompoundTag("Level").getNumber("InhabitedTime").intValue(), 0);
+		return ValidationHelper.silent(() -> chunkData.getRegion().getData().getCompoundTag("Level").getNumber("InhabitedTime").intValue(), 0);
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/tiles/overlay/LastUpdateParser.java
Patch:
@@ -17,7 +17,7 @@ public LastUpdateParser() {
 
 	@Override
 	public int parseValue(ChunkData chunkData) {
-		return ValidationHelper.withDefaultSilent(() -> chunkData.getRegion().getData().getCompoundTag("Level").getNumber("LastUpdate").intValue(), 0);
+		return ValidationHelper.silent(() -> chunkData.getRegion().getData().getCompoundTag("Level").getNumber("LastUpdate").intValue(), 0);
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/validation/ValidationHelper.java
Patch:
@@ -16,7 +16,7 @@ public static <T> T withDefault(Supplier<T> s, T def) {
 		}
 	}
 
-	public static <T> T withDefaultSilent(Supplier<T> s, T def) {
+	public static <T> T silent(Supplier<T> s, T def) {
 		try {
 			return s.get();
 		} catch (Exception ex) {

File: src/main/java/net/querz/mcaselector/version/PoiRelocator.java
Patch:
@@ -1,9 +1,9 @@
 package net.querz.mcaselector.version;
 
-import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.point.Point3i;
 import net.querz.nbt.tag.CompoundTag;
 
 public interface PoiRelocator {
 
-	boolean relocatePoi(CompoundTag root, Point2i offset);
+	boolean relocatePoi(CompoundTag root, Point3i offset);
 }

File: src/main/java/net/querz/mcaselector/version/VersionController.java
Patch:
@@ -65,7 +65,7 @@ private enum Mapping {
 		ANVIL115(2202, 2526, Anvil115ChunkFilter::new, Anvil115ChunkMerger::new, Anvil115ChunkRelocator::new, Anvil114PoiRelocator::new, Anvil112EntityRelocator::new, Anvil112EntityFilter::new, Anvil115ChunkRenderer::new, Anvil115ColorMapping::new),
 		ANVIL116(2527, 2686, Anvil116ChunkFilter::new, Anvil115ChunkMerger::new, Anvil116ChunkRelocator::new, Anvil114PoiRelocator::new, Anvil112EntityRelocator::new, Anvil112EntityFilter::new, Anvil116ChunkRenderer::new, Anvil116ColorMapping::new),
 		ANVIL117(2687, 2824, Anvil117ChunkFilter::new, Anvil115ChunkMerger::new, Anvil117ChunkRelocator::new, Anvil114PoiRelocator::new, Anvil117EntityRelocator::new, Anvil117EntityFilter::new, Anvil117ChunkRenderer::new, Anvil117ColorMapping::new),
-		ANVIL118(2825, Integer.MAX_VALUE, Anvil117ChunkFilter::new, Anvil115ChunkMerger::new, Anvil117ChunkRelocator::new, Anvil114PoiRelocator::new, Anvil117EntityRelocator::new, Anvil117EntityFilter::new, Anvil118ChunkRenderer::new, Anvil118ColorMapping::new);
+		ANVIL118(2825, Integer.MAX_VALUE, Anvil118ChunkFilter::new, Anvil115ChunkMerger::new, Anvil118ChunkRelocator::new, Anvil118PoiRelocator::new, Anvil117EntityRelocator::new, Anvil117EntityFilter::new, Anvil118ChunkRenderer::new, Anvil118ColorMapping::new);
 
 
 		private final int minVersion, maxVersion;

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112EntityRelocator.java
Patch:
@@ -1,13 +1,13 @@
 package net.querz.mcaselector.version.anvil112;
 
-import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.version.EntityRelocator;
 import net.querz.nbt.tag.CompoundTag;
 
 public class Anvil112EntityRelocator implements EntityRelocator {
 
 	@Override
-	public boolean relocateEntities(CompoundTag root, Point2i offset) {
+	public boolean relocateEntities(CompoundTag root, Point3i offset) {
 		// nothing to do until 1.17
 		return true;
 	}

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112PoiRelocator.java
Patch:
@@ -1,12 +1,13 @@
 package net.querz.mcaselector.version.anvil112;
 
-import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.point.Point3i;
 import net.querz.mcaselector.version.PoiRelocator;
 import net.querz.nbt.tag.CompoundTag;
 
 public class Anvil112PoiRelocator implements PoiRelocator {
+
 	@Override
-	public boolean relocatePoi(CompoundTag root, Point2i offset) {
+	public boolean relocatePoi(CompoundTag root, Point3i offset) {
 		// poi was introduced in 1.14, so we do nothing here
 		return true;
 	}

File: src/main/java/net/querz/mcaselector/version/anvil113/Anvil113ColorMapping.java
Patch:
@@ -3,14 +3,14 @@
 import net.querz.mcaselector.text.TextHelper;
 import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.version.ColorMapping;
+import net.querz.mcaselector.version.Helper;
 import net.querz.nbt.tag.CompoundTag;
 import net.querz.nbt.tag.StringTag;
 import net.querz.nbt.tag.Tag;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.*;
-import static net.querz.mcaselector.validation.ValidationHelper.*;
 
 public class Anvil113ColorMapping implements ColorMapping {
 
@@ -102,12 +102,12 @@ public Anvil113ColorMapping() {
 
 	@Override
 	public int getRGB(Object o, int biome) {
-		String name = withDefault(() -> ((CompoundTag) o).getString("Name"), "");
+		String name = Helper.stringFromCompound((CompoundTag) o, "Name", "");
 		Object value = mapping.get(name);
 		if (value instanceof Integer) {
 			return applyBiomeTint(name, biome, (int) value);
 		} else if (value instanceof BlockStateMapping) {
-			int color = ((BlockStateMapping) value).getColor(withDefault(() -> ((CompoundTag) o).getCompoundTag("Properties"), null));
+			int color = ((BlockStateMapping) value).getColor(Helper.tagFromCompound((CompoundTag) o, "Properties"));
 			return applyBiomeTint(name, biome, color);
 		}
 		return 0xFF000000;

File: src/main/java/net/querz/mcaselector/version/anvil114/Anvil114ColorMapping.java
Patch:
@@ -3,14 +3,14 @@
 import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.text.TextHelper;
 import net.querz.mcaselector.version.ColorMapping;
+import net.querz.mcaselector.version.Helper;
 import net.querz.nbt.tag.CompoundTag;
 import net.querz.nbt.tag.StringTag;
 import net.querz.nbt.tag.Tag;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.*;
-import static net.querz.mcaselector.validation.ValidationHelper.withDefault;
 
 public class Anvil114ColorMapping implements ColorMapping {
 
@@ -102,12 +102,12 @@ public Anvil114ColorMapping() {
 
 	@Override
 	public int getRGB(Object o, int biome) {
-		String name = withDefault(() -> ((CompoundTag) o).getString("Name"), "");
+		String name = Helper.stringFromCompound((CompoundTag) o, "Name", "");
 		Object value = mapping.get(name);
 		if (value instanceof Integer) {
 			return applyBiomeTint(name, biome, (int) value);
 		} else if (value instanceof BlockStateMapping) {
-			int color = ((BlockStateMapping) value).getColor(withDefault(() -> ((CompoundTag) o).getCompoundTag("Properties"), null));
+			int color = ((BlockStateMapping) value).getColor(Helper.tagFromCompound((CompoundTag) o, "Properties"));
 			return applyBiomeTint(name, biome, color);
 		}
 		return 0xFF000000;

File: src/main/java/net/querz/mcaselector/version/anvil117/Anvil117ColorMapping.java
Patch:
@@ -3,14 +3,14 @@
 import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.text.TextHelper;
 import net.querz.mcaselector.version.ColorMapping;
+import net.querz.mcaselector.version.Helper;
 import net.querz.nbt.tag.CompoundTag;
 import net.querz.nbt.tag.StringTag;
 import net.querz.nbt.tag.Tag;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.*;
-import static net.querz.mcaselector.validation.ValidationHelper.withDefault;
 
 public class Anvil117ColorMapping implements ColorMapping {
 
@@ -102,12 +102,12 @@ public Anvil117ColorMapping() {
 
 	@Override
 	public int getRGB(Object o, int biome) {
-		String name = withDefault(() -> ((CompoundTag) o).getString("Name"), "");
+		String name = Helper.stringFromCompound((CompoundTag) o, "Name", "");
 		Object value = mapping.get(name);
 		if (value instanceof Integer) {
 			return applyBiomeTint(name, biome, (int) value);
 		} else if (value instanceof BlockStateMapping) {
-			int color = ((BlockStateMapping) value).getColor(withDefault(() -> ((CompoundTag) o).getCompoundTag("Properties"), null));
+			int color = ((BlockStateMapping) value).getColor(Helper.tagFromCompound((CompoundTag) o, "Properties"));
 			return applyBiomeTint(name, biome, color);
 		}
 		return 0xFF000000;

File: src/main/java/net/querz/mcaselector/Config.java
Patch:
@@ -108,10 +108,10 @@ private static boolean attemptCreateDirectory(File file) {
 			return false;
 		}
 		try {
-			Files.createDirectories(parent.toPath());
+			Files.createDirectories(parent.getCanonicalFile().toPath());
 			return true;
 		} catch (IOException ex) {
-			System.out.println("failed to create directory " + parent + ": " + ex.getMessage());
+			System.out.println("failed to create directory " + parent + ": " + ex.getMessage() + "(" + ex.getClass().getSimpleName() + ")");
 			return false;
 		}
 	}

File: src/main/java/net/querz/mcaselector/ui/DialogHelper.java
Patch:
@@ -273,6 +273,8 @@ public static void editSettings(TileMap tileMap, Stage primaryStage, boolean ren
 			Config.setChunkSelectionColor(new Color(r.regionColor));
 			Config.setPasteChunksColor(new Color(r.pasteColor));
 			tileMap.redrawOverlays();
+			Config.setMCSavesDir(r.mcSavesDir + "");
+			Config.setDebug(r.debug);
 
 			if (!tileMap.getDisabled()) {
 				Config.setShowNonExistentRegions(r.showNonexistentRegions);
@@ -282,8 +284,6 @@ public static void editSettings(TileMap tileMap, Stage primaryStage, boolean ren
 				Config.setSmoothOverlays(r.smoothOverlays);
 				Config.setTileMapBackground(r.tileMapBackground.name());
 				tileMap.getWindow().getTileMapBox().setBackground(r.tileMapBackground.getBackground());
-				Config.setMCSavesDir(r.mcSavesDir + "");
-				Config.setDebug(r.debug);
 
 				if (r.height != Config.getRenderHeight() || r.layerOnly != Config.renderLayerOnly()
 					|| r.shade != Config.shade() || r.shadeWater != Config.shadeWater() || r.caves != Config.renderCaves()) {

File: src/main/java/net/querz/mcaselector/ui/dialog/SettingsDialog.java
Patch:
@@ -53,7 +53,7 @@ public class SettingsDialog extends Dialog<SettingsDialog.Result> {
 
 	private final Slider processThreadsSlider = createSlider(1, processorCount * 2, 1, Config.getProcessThreads());
 	private final Slider writeThreadsSlider = createSlider(1, processorCount, 1, Config.getWriteThreads());
-	private final Slider maxLoadedFilesSlider = createSlider(1, (int) Math.max(Math.ceil(maxMemory / 1_000_000_000D) * 6, 4), 1, 6);
+	private final Slider maxLoadedFilesSlider = createSlider(1, (int) Math.max(Math.ceil(maxMemory / 1_000_000_000D) * 6, 4), 1, Config.getMaxLoadedFiles());
 	private final Slider heightSlider = new Slider(-64, 319, 319);
 	private final CheckBox layerOnly = new CheckBox();
 	private final CheckBox caves = new CheckBox();

File: src/main/java/net/querz/mcaselector/io/job/RegionImageGenerator.java
Patch:
@@ -50,7 +50,7 @@ public static void cacheRegionMCAFile(RegionMCAFile regionMCAFile, UniqueID uniq
 				return;
 			}
 			if (cacheEligibilityChecker != null && cacheEligibilityChecker.apply(regionMCAFile.getLocation())) {
-				if (cachedMCAFiles.size() > Config.getMaxLoadedFiles()) {
+				if (cachedMCAFiles.size() > Math.min(Config.getMaxLoadedFiles(), 6)) {
 					cachedMCAFiles.entrySet().iterator().next();
 				}
 				if (!cachedMCAFiles.containsKey(regionMCAFile.getLocation())) {

File: src/main/java/net/querz/mcaselector/tiles/TileMap.java
Patch:
@@ -278,9 +278,6 @@ private void onKeyPressed(KeyEvent event) {
 		if (event.getCode() == KeyCode.SHIFT) {
 			keyActivator.pressActionKey(event.getCode());
 		} else {
-			switch (event.getCode()) {
-				case UP, DOWN, LEFT, RIGHT -> event.consume();
-			}
 			keyActivator.pressKey(event.getCode());
 		}
 

File: src/main/java/net/querz/mcaselector/ui/DialogHelper.java
Patch:
@@ -285,9 +285,10 @@ public static void editSettings(TileMap tileMap, Stage primaryStage, boolean ren
 				Config.setDebug(r.debug);
 
 				if (r.height != Config.getRenderHeight() || r.layerOnly != Config.renderLayerOnly()
-					|| r.shade != Config.shade() || r.shadeWater != Config.shadeWater()) {
+					|| r.shade != Config.shade() || r.shadeWater != Config.shadeWater() || r.caves != Config.renderCaves()) {
 					Config.setRenderHeight(r.height);
 					Config.setRenderLayerOnly(r.layerOnly);
+					Config.setRenderCaves(r.caves);
 					tileMap.getWindow().getOptionBar().setRenderHeight(r.height);
 					Config.setShade(r.shade);
 					Config.setShadeWater(r.shadeWater);

File: src/main/java/net/querz/mcaselector/version/anvil117/Anvil117ChunkRenderer.java
Patch:
@@ -63,7 +63,7 @@ public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z,
 			zLoop:
 			for (int cz = 0; cz < Tile.CHUNK_SIZE; cz++) {
 
-				//loop over sections
+				// loop over sections
 				boolean waterDepth = false;
 				for (int i = palettes.length - (24 - (absHeight >> 4)); i >= 0; i--) {
 					if (blockStatesArray[i] == null) {

File: src/main/java/net/querz/mcaselector/ui/dialog/NBTEditorDialog.java
Patch:
@@ -242,7 +242,7 @@ private <T extends Chunk> void readSingleChunkAsync(MCAFile<T> mcaFile, NBTTreeV
 				try {
 					T chunkData = mcaFile.loadSingleChunk(selectedChunk);
 					if (chunkData.getData() == null) {
-						Debug.dump("no chunk data found for:" + selectedChunk);
+						Debug.dump("no chunk data found for: " + selectedChunk);
 						enableAddTagLabels(new int[]{10}, addTagLabels);
 						Platform.runLater(() -> treeViewHolder.setCenter(UIFactory.label(Translation.DIALOG_EDIT_NBT_PLACEHOLDER_NO_CHUNK_DATA)));
 						return;
@@ -254,7 +254,7 @@ private <T extends Chunk> void readSingleChunkAsync(MCAFile<T> mcaFile, NBTTreeV
 						getDialogPane().lookupButton(ButtonType.APPLY).setDisable(false);
 					});
 				} catch (IOException ex) {
-					Debug.dumpException("failed to load chunk", ex);
+					Debug.dumpException("failed to load chunk from file " + mcaFile.getFile(), ex);
 				}
 			} else {
 				enableAddTagLabels(new int[]{10}, addTagLabels);

File: src/main/java/net/querz/mcaselector/tiles/TileMap.java
Patch:
@@ -334,8 +334,6 @@ private void onMouseExited() {
 	}
 
 	private void onScroll(ScrollEvent event) {
-		System.out.println(event.getX() + " / " + event.getY());
-
 		if (trackpadScrolling || event.isInertia()) {
 			if (window.isKeyPressed(KeyCode.COMMAND)) {
 				// zoom

File: src/main/java/net/querz/mcaselector/ui/dialog/SettingsDialog.java
Patch:
@@ -255,8 +255,9 @@ public void updateIndex(int i) {
 
 	private Slider createSlider(int min, int max, int steps, int init) {
 		Slider slider = new Slider(min, max, init);
-		slider.setMajorTickUnit(steps);
-		slider.setMinorTickCount(0);
+		int majorTicks = (int) (Math.ceil(max - min) / 5);
+		slider.setMajorTickUnit(majorTicks);
+		slider.setMinorTickCount(majorTicks - 1);
 		slider.setBlockIncrement(steps);
 		return slider;
 	}

File: src/main/java/net/querz/mcaselector/filter/EntityFilter.java
Patch:
@@ -2,6 +2,7 @@
 
 import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.io.mca.ChunkData;
+import net.querz.mcaselector.version.VersionController;
 import net.querz.nbt.tag.CompoundTag;
 import net.querz.nbt.tag.ListTag;
 import net.querz.nbt.tag.LongArrayTag;
@@ -49,7 +50,7 @@ public boolean contains(List<String> value, ChunkData data) {
 		if (data.getEntities() == null) {
 			return false;
 		}
-		Tag<?> rawEntities = data.getEntities().getData().getCompoundTag("Level").get("Entities");
+		Tag<?> rawEntities = VersionController.getEntityFilter(data.getRegion().getData().getInt("DataVersion")).getEntities(data);
 		if (rawEntities == null || rawEntities.getID() == LongArrayTag.ID) {
 			return false;
 		}
@@ -72,7 +73,7 @@ public boolean intersects(List<String> value, ChunkData data) {
 		if (data.getEntities() == null) {
 			return false;
 		}
-		Tag<?> rawEntities = data.getEntities().getData().getCompoundTag("Level").get("Entities");
+		Tag<?> rawEntities = VersionController.getEntityFilter(data.getRegion().getData().getInt("DataVersion")).getEntities(data);
 		if (rawEntities == null || rawEntities.getID() == LongArrayTag.ID) {
 			return false;
 		}

File: src/main/java/net/querz/mcaselector/version/anvil117/Anvil117ChunkFilter.java
Patch:
@@ -25,7 +25,7 @@ public void forceBiome(CompoundTag data, int id) {
 			if (biomes != null && (biomes.length == 1024 || biomes.length == 1536)) {
 				biomes = new int[biomes.length];
 			} else {
-				biomes = new int[1536];
+				biomes = new int[1024];
 			}
 			Arrays.fill(biomes, id);
 			data.getCompoundTag("Level").putIntArray("Biomes", biomes);

File: src/main/java/net/querz/mcaselector/tiles/OverlayPool.java
Patch:
@@ -60,7 +60,7 @@ public OverlayParser getParser() {
 
 	public void setParser(OverlayParser overlay) {
 		this.parser = overlay;
-		if (overlay != null) {
+		if (overlay != null && overlay.isValid() && overlay.isActive()) {
 			try {
 				dataCache.initTables(Collections.singletonList(overlay));
 				hoveredRegion = null;

File: src/main/java/net/querz/mcaselector/text/Translation.java
Patch:
@@ -77,6 +77,7 @@ public enum Translation {
 	DIALOG_SETTINGS_SHADE("dialog.settings.shade"),
 	DIALOG_SETTINGS_SHADE_WATER("dialog.settings.shade_water"),
 	DIALOG_SETTINGS_SHOW_NONEXISTENT_REGIONS("dialog.settings.show_nonexistent_regions"),
+	DIALOG_SETTINGS_SMOOTH_RENDERING("dialog.settings.smooth_rendering"),
 	DIALOG_SETTINGS_BACKGROUND_PATTERN("dialog.settings.background_pattern"),
 	DIALOG_SETTINGS_MC_SAVES_DIR("dialog.settings.mc_saves_dir"),
 	DIALOG_SETTINGS_PRINT_DEBUG("dialog.settings.print_debug"),

File: src/main/java/net/querz/mcaselector/tiles/Tile.java
Patch:
@@ -11,10 +11,10 @@
 
 public class Tile {
 
-	public static Color REGION_GRID_COLOR = Color.BLACK;
-	public static Color CHUNK_GRID_COLOR = Color.DARK_GRAY;
+	public static Color REGION_GRID_COLOR = new Color(0, 0, 0, 0.5);
+	public static Color CHUNK_GRID_COLOR = new Color(0.6627451f, 0.6627451f, 0.6627451f, 0.5);
 	public static Color EMPTY_COLOR = new Color(0.2, 0.2, 0.2, 1);
-	public static double GRID_LINE_WIDTH = 0.5;
+	public static double GRID_LINE_WIDTH = 1;
 
 	public static final int SIZE = 512;
 	public static final int CHUNK_SIZE = 16;

File: src/main/java/net/querz/mcaselector/text/Translation.java
Patch:
@@ -63,6 +63,7 @@ public enum Translation {
 	MENU_TOOLS_SWAP_CHUNKS("menu.tools.swap_chunks"),
 	MENU_TOOLS_EDIT_OVERLAYS("menu.tools.edit_overlays"),
 	MENU_TOOLS_NEXT_OVERLAY("menu.tools.next_overlay"),
+	MENU_TOOLS_NEXT_OVERLAY_TYPE("menu.tools.next_overlay_type"),
 	DIALOG_SELECT_WORLD_TITLE("dialog.select_world.title"),
 	DIALOG_SETTINGS_TITLE("dialog.settings.title"),
 	DIALOG_SETTINGS_LANGUAGE("dialog.settings.language"),

File: src/main/java/net/querz/mcaselector/ui/DialogHelper.java
Patch:
@@ -172,7 +172,7 @@ public static void filterChunks(TileMap tileMap, Stage primaryStage) {
 	}
 
 	public static void editOverlays(TileMap tileMap, Stage primaryStage) {
-		Optional<OverlayEditorDialog.Result> result = new OverlayEditorDialog(primaryStage, tileMap.getOverlayParsers()).showAndWait();
+		Optional<OverlayEditorDialog.Result> result = new OverlayEditorDialog(primaryStage, Config.getOverlays()).showAndWait();
 		result.ifPresent(r -> {
 			Config.setOverlays(r.getOverlays());
 			tileMap.setOverlays(r.getOverlays());

File: src/main/java/net/querz/mcaselector/ui/dialog/EditArrayDialog.java
Patch:
@@ -384,7 +384,7 @@ private <V extends Number> void updateArrayIndex(int index, V value) {
 				int startBit = (int) ((blockStatesIndex - Math.floor(longIndex)) * 64D);
 				if (startBit + bits > 64) {
 					l[longIndex] = Bits.setBits(value.shortValue(), l[longIndex], startBit, 64);
-					l[longIndex + 1] = Bits.setBits(value.shortValue(), l[longIndex + 1], startBit - 64, startBit + bits - 64);
+					l[longIndex + 1] = Bits.setBits(value.shortValue() >> (64 - startBit), l[longIndex + 1], 0, startBit + bits - 64);
 				} else {
 					l[longIndex] = Bits.setBits(value.shortValue(), l[longIndex], startBit, startBit + bits);
 				}

File: src/main/java/net/querz/mcaselector/version/anvil113/Anvil113ChunkFilter.java
Patch:
@@ -362,7 +362,7 @@ protected void setPaletteIndex(int blockIndex, int paletteIndex, long[] blockSta
 		int startBit = (int) ((blockStatesIndex - Math.floor(longIndex)) * 64D);
 		if (startBit + bits > 64) {
 			blockStates[longIndex] = Bits.setBits(paletteIndex, blockStates[longIndex], startBit, 64);
-			blockStates[longIndex + 1] = Bits.setBits(paletteIndex, blockStates[longIndex + 1], startBit - 64, startBit + bits - 64);
+			blockStates[longIndex + 1] = Bits.setBits(paletteIndex >> (64 - startBit), blockStates[longIndex + 1], 0, startBit + bits - 64);
 		} else {
 			blockStates[longIndex] = Bits.setBits(paletteIndex, blockStates[longIndex], startBit, startBit + bits);
 		}

File: src/main/java/net/querz/mcaselector/tiles/overlay/LastUpdateParser.java
Patch:
@@ -12,7 +12,7 @@ public class LastUpdateParser extends OverlayParser {
 	private String maxDuration;
 
 	public LastUpdateParser() {
-		super(OverlayType.INHABITED_TIME);
+		super(OverlayType.LAST_UPDATE);
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/headless/ParamExecutor.java
Patch:
@@ -493,12 +493,12 @@ private File parseAndCreateDirectory(String key) throws IOException {
 			throw new ParseException("missing " + key + " directory");
 		}
 		File file = new File(f);
-		if (!file.isDirectory()) {
-			throw new ParseException(file + " is not a directory");
-		}
 		if (!file.exists() && !file.mkdirs()) {
 			throw new IOException("failed to create directory " + file);
 		}
+		if (!file.isDirectory()) {
+			throw new ParseException(file + " is not a directory");
+		}
 		return file;
 	}
 

File: src/main/java/net/querz/mcaselector/io/CacheHelper.java
Patch:
@@ -7,7 +7,6 @@
 import net.querz.mcaselector.tiles.TileMap;
 import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.progress.Progress;
-import net.querz.mcaselector.tiles.overlay.OverlayType;
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
 import java.io.File;

File: src/main/java/net/querz/mcaselector/io/CacheHelper.java
Patch:
@@ -7,7 +7,6 @@
 import net.querz.mcaselector.tiles.TileMap;
 import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.progress.Progress;
-import net.querz.mcaselector.tiles.overlay.OverlayType;
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
 import java.io.File;

File: src/main/java/net/querz/mcaselector/ui/dialog/EditArrayDialog.java
Patch:
@@ -65,6 +65,7 @@ public EditArrayDialog(T array, Stage primaryStage) {
 		indexColumn.setResizable(false);
 		valueColumn.setResizable(false);
 		valueColumn.setEditable(true);
+		valueColumn.prefWidthProperty().bind(table.widthProperty().subtract(70));
 		indexColumn.setPrefWidth(50);
 
 		table.getColumns().addAll(indexColumn, valueColumn);

File: src/main/java/net/querz/mcaselector/filter/StructureFilter.java
Patch:
@@ -24,7 +24,6 @@ public class StructureFilter extends TextFilter<List<String>> {
 		} catch (IOException ex) {
 			Debug.dumpException("error reading mapping/all_structures.txt", ex);
 		}
-		System.out.println(validNames);
 	}
 
 	public StructureFilter() {

File: src/main/java/net/querz/mcaselector/ui/OptionBar.java
Patch:
@@ -101,8 +101,8 @@ public OptionBar(TileMap tileMap, Stage primaryStage) {
 
 		getMenus().addAll(file, view, selection, tools, aboutMenu);
 
-		openWorld.setOnAction(e -> DialogHelper.openWorld(tileMap, primaryStage, this));
-		openRegion.setOnAction(e -> DialogHelper.openRegion(tileMap, primaryStage, this));
+		openWorld.setOnAction(e -> DialogHelper.openWorld(tileMap, primaryStage));
+		openRegion.setOnAction(e -> DialogHelper.openRegion(tileMap, primaryStage));
 		settings.setOnAction(e -> DialogHelper.editSettings(tileMap, primaryStage));
 		worldSettings.setOnAction(e -> DialogHelper.editWorldSettings(tileMap, primaryStage));
 		quit.setOnAction(e -> System.exit(0));

File: src/main/java/net/querz/mcaselector/ui/dialog/SelectWorldDialog.java
Patch:
@@ -20,7 +20,7 @@ public class SelectWorldDialog extends Dialog<File> {
 
 	private static final double cellHeight = 26D;
 
-	public SelectWorldDialog(List<File> worldDirectories, TileMap tileMap, Stage primaryStage) {
+	public SelectWorldDialog(List<File> worldDirectories, Stage primaryStage) {
 		titleProperty().bind(Translation.DIALOG_SELECT_WORLD_TITLE.getProperty());
 
 		initStyle(StageStyle.UTILITY);

File: src/test/java/net/querz/mcaselector/tiles/TileImageTest.java
Patch:
@@ -32,6 +32,7 @@ public void testGenerateImage112() throws IOException {
 				() -> 1.0f,
 				data
 		);
+
 		assertImageEquals("anvil112/r.0.0.png", image);
 
 		Config.setShadeWater(false);
@@ -67,6 +68,7 @@ public void testGenerateImage113() throws IOException {
 				() -> 1.0f,
 				data
 		);
+
 		assertImageEquals("anvil113/r.0.0.png", image);
 
 		Config.setShadeWater(false);
@@ -204,6 +206,7 @@ private void writeImage(Image image, File file) throws IOException {
 	}
 
 	private void assertImageEquals(String expected, Image actual) throws IOException {
+//		writeImage(actual, new File("actual/" + expected));
 		Image expectedImage = SwingFXUtils.toFXImage(ImageIO.read(getResourceFile(expected)), null);
 		assertArrayEquals(getImageData(expectedImage), getImageData(actual));
 	}

File: src/main/java/net/querz/mcaselector/version/ChunkRenderer.java
Patch:
@@ -4,5 +4,5 @@
 
 public interface ChunkRenderer {
 
-	void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z, int[] pixelBuffer, int[] waterPixels, byte[] terrainHeights, byte[] waterHeights, boolean water);
+	void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z, int[] pixelBuffer, int[] waterPixels, short[] terrainHeights, short[] waterHeights, boolean water);
 }

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112ChunkRenderer.java
Patch:
@@ -11,7 +11,7 @@
 public class Anvil112ChunkRenderer implements ChunkRenderer {
 
 	@Override
-	public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z, int[] pixelBuffer, int[] waterPixels, byte[] terrainHeights, byte[] waterHeights, boolean water) {
+	public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z, int[] pixelBuffer, int[] waterPixels, short[] terrainHeights, short[] waterHeights, boolean water) {
 		ListTag<CompoundTag> sections = withDefault(() -> root.getCompoundTag("Level").getListTag("Sections").asCompoundTagList(), null);
 		if (sections == null) {
 			return;
@@ -65,7 +65,7 @@ public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z,
 							if (water) {
 								if (!waterDepth) {
 									pixelBuffer[regionIndex] = colorMapping.getRGB(((block << 4) + blockData)) | 0xFF000000;
-									waterHeights[regionIndex] = (byte) (sectionHeight + cy);
+									waterHeights[regionIndex] = (short) (sectionHeight + cy);
 								}
 								if (isWater(block)) {
 									waterDepth = true;
@@ -76,7 +76,7 @@ public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z,
 							} else {
 								pixelBuffer[regionIndex] = colorMapping.getRGB(((block << 4) + blockData)) | 0xFF000000;
 							}
-							terrainHeights[regionIndex] = (byte) (sectionHeight + cy);
+							terrainHeights[regionIndex] = (short) (sectionHeight + cy);
 							continue zLoop;
 						}
 					}

File: src/main/java/net/querz/mcaselector/tiles/overlay/AmountParser.java
Patch:
@@ -10,7 +10,7 @@ public AmountParser(OverlayType type) {
 	public boolean setMin(String raw) {
 		setRawMin(raw);
 		if (raw == null || raw.isEmpty()) {
-			return setMin(0);
+			return setMin((Integer) null);
 		}
 		try {
 			return setMin(Integer.parseInt(raw));
@@ -23,7 +23,7 @@ public boolean setMin(String raw) {
 	public boolean setMax(String raw) {
 		setRawMax(raw);
 		if (raw == null || raw.isEmpty()) {
-			return setMax(0);
+			return setMax((Integer) null);
 		}
 		try {
 			return setMax(Integer.parseInt(raw));

File: src/main/java/net/querz/mcaselector/tiles/overlay/InhabitedTimeParser.java
Patch:
@@ -45,7 +45,7 @@ public boolean setMin(String raw) {
 		setRawMin(raw);
 		minDuration = null;
 		if (raw == null || raw.isEmpty()) {
-			return setMin(0);
+			return setMin((Integer) null);
 		}
 		try {
 			return setMin(Integer.parseInt(raw));
@@ -71,7 +71,7 @@ public boolean setMax(String raw) {
 		setRawMax(raw);
 		maxDuration = null;
 		if (raw == null || raw.isEmpty()) {
-			return setMax(0);
+			return setMax((Integer) null);
 		}
 		try {
 			return setMax(Integer.parseInt(raw));

File: src/main/java/net/querz/mcaselector/tiles/overlay/OverlayParser.java
Patch:
@@ -14,8 +14,8 @@ public abstract class OverlayParser implements Cloneable {
 	private String rawMin;
 	private String rawMax;
 	protected String[] multiValues = null;
-	private float minHue = 0;
-	private float maxHue = 0.85f;
+	private float minHue = 0.66666667f; // blue
+	private float maxHue = 0f; // red
 
 	public OverlayParser(OverlayType type) {
 		this.type = type;

File: src/main/java/net/querz/mcaselector/io/db/CacheDBController.java
Patch:
@@ -2,8 +2,6 @@
 
 import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.point.Point2i;
-import net.querz.mcaselector.tiles.overlay.EntityAmountParser;
-import net.querz.mcaselector.tiles.overlay.InhabitedTimeParser;
 import net.querz.mcaselector.tiles.overlay.OverlayParser;
 import net.querz.mcaselector.validation.ShutdownHooks;
 import java.io.ByteArrayInputStream;
@@ -32,6 +30,7 @@ public final class CacheDBController {
 
 	static {
 		try {
+			new org.sqlite.JDBC();
 			Class.forName("org.sqlite.JDBC");
 		} catch (ClassNotFoundException ex) {
 			System.err.println("failed to load jdbc driver");

File: src/main/java/net/querz/mcaselector/tiles/TileMap.java
Patch:
@@ -153,6 +153,8 @@ public void nextOverlay() {
 		// try until we find either null or a parser that is active and valid
 		} while ((parser = overlayParsers.get(index)) != null && (!parser.isActive() || !parser.isValid()));
 
+		System.out.println("switching to parser index " + index + ": " + parser);
+
 		setOverlay(parser);
 		MCAFilePipe.clearParserQueue();
 	}

File: src/main/java/net/querz/mcaselector/ui/DialogHelper.java
Patch:
@@ -173,6 +173,7 @@ public static void filterChunks(TileMap tileMap, Stage primaryStage) {
 	public static void editOverlays(TileMap tileMap, Stage primaryStage) {
 		Optional<OverlayEditorDialog.Result> result = new OverlayEditorDialog(primaryStage, tileMap.getOverlayParsers()).showAndWait();
 		result.ifPresent(r -> {
+			System.out.println(r.getOverlays());
 			tileMap.setOverlays(r.getOverlays());
 		});
 	}

File: src/main/java/net/querz/mcaselector/text/Translation.java
Patch:
@@ -28,6 +28,7 @@ public enum Translation {
 	STATUS_VISIBLE_TOOLTIP("status.visible.tooltip"),
 	STATUS_TOTAL("status.total"),
 	STATUS_TOTAL_TOOLTIP("status.total.tooltip"),
+	STATUS_OVERLAY("status.overlay"),
 	MENU_FILE("menu.file"),
 	MENU_VIEW("menu.view"),
 	MENU_SELECTION("menu.selection"),

File: src/main/java/net/querz/mcaselector/ui/DialogHelper.java
Patch:
@@ -171,7 +171,7 @@ public static void filterChunks(TileMap tileMap, Stage primaryStage) {
 	}
 
 	public static void editOverlays(TileMap tileMap, Stage primaryStage) {
-		Optional<OverlayEditorDialog.Result> result = new OverlayEditorDialog(primaryStage).showAndWait();
+		Optional<OverlayEditorDialog.Result> result = new OverlayEditorDialog(primaryStage, tileMap.getOverlayParsers()).showAndWait();
 		result.ifPresent(r -> {
 			tileMap.setOverlays(r.getOverlays());
 		});

File: src/main/java/net/querz/mcaselector/ui/StatusBar.java
Patch:
@@ -28,7 +28,7 @@ public class StatusBar extends StackPane {
 	private final Label hoveredBlock = new Label(Translation.STATUS_BLOCK + ": -, -");
 	private final Label visibleRegions = new Label(Translation.STATUS_VISIBLE + ": 0");
 	private final Label totalRegions = new Label(Translation.STATUS_TOTAL + ": 0");
-	private final Label overlay = new Label(Translation.STATUS_TOTAL + ": -");
+	private final Label overlay = new Label(Translation.STATUS_OVERLAY + ": -");
 
 	ImageView loadIcon = new ImageView(FileHelper.getIconFromResources("img/load"));
 	BorderPane bp = new BorderPane();
@@ -124,9 +124,9 @@ private void update(TileMap tileMap) {
 	private void updateOverlay(TileMap tileMap) {
 		OverlayParser p = tileMap.getOverlay();
 		if (p != null) {
-			overlay.setText(Translation.STATUS_TOTAL + ": " + p.getType() + "(" + p.min() + "," + p.max() + ")");
+			overlay.setText(Translation.STATUS_OVERLAY + ": " + p.getType() + "(" + p.min() + "," + p.max() + ")");
 		} else {
-			overlay.setText(Translation.STATUS_TOTAL + ": -");
+			overlay.setText(Translation.STATUS_OVERLAY + ": -");
 		}
 	}
 }

File: src/main/java/net/querz/mcaselector/io/Job.java
Patch:
@@ -11,4 +11,7 @@ public Job(RegionDirectories rd) {
 	public RegionDirectories getRegionDirectories() {
 		return rd;
 	}
+
+	// can be overwritten by individual jobs when something has to be done when this job is cancelled
+	public void cancel() {}
 }
\ No newline at end of file

File: src/main/java/net/querz/mcaselector/io/db/CacheDBController.java
Patch:
@@ -142,7 +142,6 @@ public int[] getData(OverlayParser parser, String suffix, Point2i region) throws
 		ResultSet result = statement.executeQuery(String.format(
 				"SELECT d FROM %s WHERE p=%s;", parser.name() + (suffix == null ? "" : "_" + suffix), pointToLong(region)));
 		if (!result.next()) {
-			System.out.println("NOTHING FOUND FOR " + region);
 			return null;
 		}
 		int[] data = new int[1024];

File: src/main/java/net/querz/mcaselector/text/Translation.java
Patch:
@@ -58,6 +58,7 @@ public enum Translation {
 	MENU_TOOLS_IMPORT_CHUNKS("menu.tools.import_chunks"),
 	MENU_TOOLS_FILTER_CHUNKS("menu.tools.filter_chunks"),
 	MENU_TOOLS_CHANGE_FIELDS("menu.tools.change_fields"),
+	MENU_TOOLS_EDIT_OVERLAYS("menu.tools.edit_overlays"),
 	MENU_TOOLS_EDIT_NBT("menu.tools.edit_nbt"),
 	MENU_TOOLS_SWAP_CHUNKS("menu.tools.swap_chunks"),
 	DIALOG_SELECT_WORLD_TITLE("dialog.select_world.title"),
@@ -113,6 +114,7 @@ public enum Translation {
 	DIALOG_FILTER_CHUNKS_SELECTION_ONLY("dialog.filter_chunks.selection_only"),
 	DIALOG_FILTER_CHUNKS_SELECTION_RADIUS("dialog.filter_chunks.selection_radius"),
 	DIALOG_FILTER_CHUNKS_SELECTION_ONLY_TOOLTIP("dialog.filter_chunks.selection_only.tooltip"),
+	DIALOG_EDIT_OVERLAYS_TITLE("dialog.edit_overlays.title"),
 	DIALOG_CHANGE_NBT_TITLE("dialog.change_nbt.title"),
 	DIALOG_CHANGE_NBT_CHANGE("dialog.change_nbt.change"),
 	DIALOG_CHANGE_NBT_CHANGE_TOOLTIP("dialog.change_nbt.change.tooltip"),

File: src/main/java/net/querz/mcaselector/tiles/ImagePool.java
Patch:
@@ -37,7 +37,7 @@ public ImagePool(TileMap tileMap, OverlayDataPool dataPool, double poolSize) {
 		this.poolSize = poolSize;
 	}
 
-	public void requestImage(Tile tile, int scale) {
+	public void requestImage(Tile tile, int scale, long min, long max) {
 		if (noMCA.contains(tile.location)) {
 			return;
 		}
@@ -102,7 +102,7 @@ public void requestImage(Tile tile, int scale) {
 				synchronized (Config.getWorldUUID()) {
 					if (u.equals(Config.getWorldUUID())) {
 						dataPool.push(tile.location, l);
-						dataPool.requestImage(tile, tile.location, 0, 100000);
+						dataPool.requestImage(tile, tile.location, min, max);
 						Debug.dumpf("pushed data for %s to pool", tile.location);
 						Platform.runLater(tileMap::update);
 					}

File: src/main/java/net/querz/mcaselector/tiles/TileMap.java
Patch:
@@ -182,7 +182,7 @@ private void onKeyPressed(KeyEvent event) {
 		}
 
 		if (event.getCode() == KeyCode.M) {
-			setOverlayType(overlayType == null ? OverlayType.INHABITED_TIME : null);
+			setOverlayType(overlayType == null ? OverlayType.ENTITY_AMOUNT : null);
 //			dumpMetrics();
 		}
 	}
@@ -696,11 +696,11 @@ private void draw(GraphicsContext ctx) {
 			Point2i regionOffset = region.regionToBlock().sub((int) offset.getX(), (int) offset.getY());
 
 			if (Config.getWorldDir() != null && !tile.isLoaded() && !tile.isLoading()) {
-				imgPool.requestImage(tile, getZoomLevel());
+				imgPool.requestImage(tile, getZoomLevel(), 0, 20);
 			}
 
 			if (overlayType != null && !tile.overlayLoading && !tile.isOverlayLoaded()) {
-				overlayDataPool.requestImage(tile, tile.location, 0, 100000);
+				overlayDataPool.requestImage(tile, tile.location, 0, 20);
 			}
 
 			Point2f p = new Point2f(regionOffset.getX() / scale, regionOffset.getZ() / scale);

File: src/main/java/net/querz/mcaselector/tiles/overlay/OverlayType.java
Patch:
@@ -2,7 +2,8 @@
 
 public enum OverlayType {
 
-	INHABITED_TIME(new InhabitedTimeParser());
+	INHABITED_TIME(new InhabitedTimeParser()),
+	ENTITY_AMOUNT(new EntityAmountParser());
 
 	private final OverlayDataParser instance;
 

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112EntityFilter.java
Patch:
@@ -18,7 +18,7 @@ public void deleteEntities(ChunkData data) {
 
 	@Override
 	public ListTag<?> getEntities(ChunkData data) {
-		Tag<?> rawEntities = data.getEntities().getData().getCompoundTag("Level").get("Entities");
+		Tag<?> rawEntities = data.getRegion().getData().getCompoundTag("Level").get("Entities");
 		if (rawEntities == null || rawEntities.getID() != ListTag.ID) {
 			return null;
 		}

File: src/main/java/net/querz/mcaselector/changer/FieldType.java
Patch:
@@ -15,6 +15,7 @@ public enum FieldType {
 	REPLACE_BLOCKS("ReplaceBlocks", ReplaceBlocksField.class, false, true),
 	DELETE_ENTITIES("DeleteEntities", DeleteEntitiesField.class, false, false),
 	DELETE_SECTIONS("DeleteSections", DeleteSectionsField.class, false, true),
+	FIX_STATUS("FixStatus", FixStatusField.class, false, true),
 	STRUCTURE_REFERENCE("FixStructureReferences", ReferenceField.class, true, false);
 
 	private final String name;

File: src/main/java/net/querz/mcaselector/io/mca/Region.java
Patch:
@@ -344,12 +344,12 @@ public void applyFieldChanges(List<Field<?>> fields, boolean force, Set<Point2i>
 					try {
 						chunkData.applyFieldChanges(fields, force);
 					} catch (Exception ex) {
-						Debug.dumpException("failed to apply fields to chunk " + absoluteLocation, ex);
+						Debug.dumpException("failed to apply field changes to chunk " + absoluteLocation, ex);
 					}
 				}
 			}
 		}
-		Debug.printf("took %s to replace blocks in region %s", t, location);
+		Debug.printf("took %s to apply field changes to region %s", t, location);
 	}
 
 	public void mergeInto(Region region, Point2i offset, boolean overwrite, Set<Point2i> sourceChunks, Set<Point2i> selection, List<Range> ranges) {

File: src/main/java/net/querz/mcaselector/io/CacheHelper.java
Patch:
@@ -55,6 +55,7 @@ public static void clearAllCache(TileMap tileMap) {
 				}
 			}
 		}
+		MCAFilePipe.clearQueues();
 		updateVersionFile();
 		tileMap.clear();
 		tileMap.update();

File: src/main/java/net/querz/mcaselector/io/RegionImageGenerator.java
Patch:
@@ -108,14 +108,13 @@ private MCAImageProcessJob(File file, byte[] data, Tile tile, UUID world, BiCons
 		public void execute() {
 			Debug.dumpf("generating image for %s", file.getAbsolutePath());
 			Image image = TileImage.generateImage(tile, world, callback, scaleSupplier, getRegionData());
+			setLoading(tile, false);
 			if (image != null) {
 				MCAFilePipe.executeSaveData(new MCAImageSaveCacheJob(image, tile, world, scaleSupplier, scaleOnly, progressChannel));
 			} else {
-				setLoading(tile, false);
 				if (progressChannel != null) {
 					progressChannel.incrementProgress(FileHelper.createMCAFileName(tile.getLocation()));
 				}
-
 			}
 		}
 

File: src/main/java/net/querz/mcaselector/tiles/TileImage.java
Patch:
@@ -114,7 +114,7 @@ public static Image generateImage(Tile tile, UUID world, BiConsumer<Image, UUID>
 			mcaFile.load(ptr);
 		} catch (IOException ex) {
 			Debug.errorf("failed to read mca file header from %s", file);
-			tile.loaded = true;
+			tile.setLoaded(true);
 			return tile.image;
 		}
 
@@ -131,7 +131,7 @@ public static Image generateImage(Tile tile, UUID world, BiConsumer<Image, UUID>
 			Image scaledImage = SwingFXUtils.toFXImage(scaled, null);
 
 			tile.image = scaledImage;
-			tile.loaded = true;
+			tile.setLoaded(true);
 
 			callback.accept(scaledImage, world);
 

File: src/main/java/net/querz/mcaselector/changer/DeleteSectionsField.java
Patch:
@@ -44,7 +44,7 @@ public void change(ChunkData data) {
 		for (int i = 0; i < sections.size(); i++) {
 			CompoundTag section = sections.get(i);
 			for (Range range : getNewValue()) {
-				if (range.contains(section.getByte("Y"))) {
+				if (range.contains(section.getNumber("Y").intValue())) {
 					sections.remove(i);
 					i--;
 				}

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112ChunkFilter.java
Patch:
@@ -179,8 +179,8 @@ public void replaceBlocks(CompoundTag data, Map<String, BlockReplaceData> replac
 			Map<Integer, CompoundTag> sectionMap = new HashMap<>();
 			List<Integer> heights = new ArrayList<>(18);
 			for (CompoundTag section : sections) {
-				sectionMap.put((int) section.getByte("Y"), section);
-				heights.add((int) section.getByte("Y"));
+				sectionMap.put(section.getNumber("Y").intValue(), section);
+				heights.add(section.getNumber("Y").intValue());
 			}
 
 			for (int y = 0; y < 16; y++) {

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112ChunkMerger.java
Patch:
@@ -12,7 +12,7 @@ public class Anvil112ChunkMerger implements ChunkMerger {
 
 	@Override
 	public void mergeChunks(CompoundTag source, CompoundTag destination, List<Range> ranges) {
-		mergeCompoundTagLists(source, destination, ranges, "Sections", c -> (int) c.getByte("Y"));
+		mergeCompoundTagLists(source, destination, ranges, "Sections", c -> c.getNumber("Y").intValue());
 		mergeCompoundTagLists(source, destination, ranges, "Entities", c -> c.getListTag("Pos").asDoubleTagList().get(1).asInt() >> 4);
 		mergeCompoundTagLists(source, destination, ranges, "TileEntities", c -> c.getInt("y") >> 4);
 		mergeCompoundTagLists(source, destination, ranges, "TileTicks", c -> c.getInt("y") >> 4);

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112ChunkRenderer.java
Patch:
@@ -42,8 +42,8 @@ public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z,
 						continue;
 					}
 
-					Byte height = withDefault(() -> sections.get(si).getByte("Y"), null);
-					if (height == null) {
+					Integer height = withDefault(() -> sections.get(si).getNumber("Y").intValue(), null);
+					if (height == null || height > 15 || height < 0) {
 						continue;
 					}
 					int sectionHeight = height * 16;
@@ -117,6 +117,6 @@ private int getBlockIndex(int x, int y, int z) {
 	}
 
 	private int filterSections(CompoundTag sectionA, CompoundTag sectionB) {
-		return withDefault(() -> sectionB.getByte("Y"), (byte) -1) - withDefault(() -> sectionA.getByte("Y"), (byte) -1);
+		return withDefault(() -> sectionB.getNumber("Y").intValue(), -1) - withDefault(() -> sectionA.getNumber("Y").intValue(), -1);
 	}
 }

File: src/main/java/net/querz/mcaselector/version/anvil113/Anvil113ChunkFilter.java
Patch:
@@ -114,8 +114,8 @@ public void replaceBlocks(CompoundTag data, Map<String, BlockReplaceData> replac
 			Map<Integer, CompoundTag> sectionMap = new HashMap<>();
 			List<Integer> heights = new ArrayList<>(18);
 			for (CompoundTag section : sections) {
-				sectionMap.put((int) section.getByte("Y"), section);
-				heights.add((int) section.getByte("Y"));
+				sectionMap.put(section.getNumber("Y").intValue(), section);
+				heights.add(section.getNumber("Y").intValue());
 			}
 
 			for (int y = 0; y < 16; y++) {

File: src/main/java/net/querz/mcaselector/version/anvil115/Anvil115ChunkRenderer.java
Patch:
@@ -59,8 +59,8 @@ public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z,
 						continue;
 					}
 
-					Byte height = withDefault(() -> sections.get(si).getByte("Y"), null);
-					if (height == null) {
+					Integer height = withDefault(() -> sections.get(si).getNumber("Y").intValue(), null);
+					if (height == null || height > 15 || height < 0) {
 						continue;
 					}
 
@@ -180,6 +180,6 @@ private int getPaletteIndex(int index, long[] blockStates, int bits, int clean)
 	}
 
 	private int filterSections(CompoundTag sectionA, CompoundTag sectionB) {
-		return withDefault(() -> sectionB.getByte("Y"), (byte) -1) - withDefault(() -> sectionA.getByte("Y"), (byte) -1);
+		return withDefault(() -> sectionB.getNumber("Y").intValue(), -1) - withDefault(() -> sectionA.getNumber("Y").intValue(), -1);
 	}
 }

File: src/main/java/net/querz/mcaselector/version/anvil116/Anvil116ChunkRenderer.java
Patch:
@@ -59,8 +59,8 @@ public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z,
 						continue;
 					}
 
-					Byte height = withDefault(() -> sections.get(si).getByte("Y"), null);
-					if (height == null) {
+					Integer height = withDefault(() -> sections.get(si).getNumber("Y").intValue(), null);
+					if (height == null || height > 15 || height < 0) {
 						continue;
 					}
 
@@ -170,6 +170,6 @@ private int getPaletteIndex(int index, long[] blockStates, int bits, int clean)
 	}
 
 	private int filterSections(CompoundTag sectionA, CompoundTag sectionB) {
-		return withDefault(() -> sectionB.getByte("Y"), (byte) -1) - withDefault(() -> sectionA.getByte("Y"), (byte) -1);
+		return withDefault(() -> sectionB.getNumber("Y").intValue(), -1) - withDefault(() -> sectionA.getNumber("Y").intValue(), -1);
 	}
 }

File: src/main/java/net/querz/mcaselector/version/anvil117/Anvil117ChunkFilter.java
Patch:
@@ -57,8 +57,8 @@ public void replaceBlocks(CompoundTag data, Map<String, BlockReplaceData> replac
 			Map<Integer, CompoundTag> sectionMap = new HashMap<>();
 			List<Integer> heights = new ArrayList<>(26);
 			for (CompoundTag section : sections) {
-				sectionMap.put((int) section.getByte("Y"), section);
-				heights.add((int) section.getByte("Y"));
+				sectionMap.put(section.getNumber("Y").intValue(), section);
+				heights.add(section.getNumber("Y").intValue());
 			}
 
 			for (int y = -4; y < 20; y++) {
@@ -102,7 +102,7 @@ public void replaceBlocks(CompoundTag data, Map<String, BlockReplaceData> replac
 				continue;
 			}
 
-			int y = section.getByte("Y");
+			int y = section.getNumber("Y").intValue();
 
 			for (int i = 0; i < 4096; i++) {
 				CompoundTag blockState = getBlockAt(i, blockStates, palette);

File: src/main/java/net/querz/mcaselector/version/anvil117/Anvil117ChunkRenderer.java
Patch:
@@ -59,8 +59,8 @@ public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z,
 						continue;
 					}
 
-					Byte height = withDefault(() -> sections.get(si).getByte("Y"), null);
-					if (height == null) {
+					Integer height = withDefault(() -> sections.get(si).getNumber("Y").intValue(), null);
+					if (height == null || height > 20 || height < -4) {
 						continue;
 					}
 
@@ -175,6 +175,6 @@ private int getPaletteIndex(int index, long[] blockStates, int bits, int clean)
 	}
 
 	private int filterSections(CompoundTag sectionA, CompoundTag sectionB) {
-		return withDefault(() -> sectionB.getByte("Y"), (byte) -5) - withDefault(() -> sectionA.getByte("Y"), (byte) -5);
+		return withDefault(() -> sectionB.getNumber("Y").intValue(), -5) - withDefault(() -> sectionA.getNumber("Y").intValue(), -5);
 	}
 }

File: src/main/java/net/querz/mcaselector/version/VersionController.java
Patch:
@@ -61,7 +61,7 @@ private enum Mapping {
 		ANVIL113(1344, 1631, Anvil113ChunkFilter.class, Anvil113ChunkMerger.class, Anvil113ChunkRelocator.class, Anvil112PoiRelocator.class, Anvil112EntityRelocator.class, Anvil112EntityFilter.class, Anvil113ChunkRenderer.class, Anvil113ColorMapping.class),
 		ANVIL114(1632, 2201, Anvil113ChunkFilter.class, Anvil113ChunkMerger.class, Anvil114ChunkRelocator.class, Anvil114PoiRelocator.class, Anvil112EntityRelocator.class, Anvil112EntityFilter.class, Anvil113ChunkRenderer.class, Anvil114ColorMapping.class),
 		ANVIL115(2202, 2526, Anvil115ChunkFilter.class, Anvil115ChunkMerger.class, Anvil115ChunkRelocator.class, Anvil114PoiRelocator.class, Anvil112EntityRelocator.class, Anvil112EntityFilter.class, Anvil115ChunkRenderer.class, Anvil115ColorMapping.class),
-		ANVIL116(2527, 2680, Anvil115ChunkFilter.class, Anvil115ChunkMerger.class, Anvil116ChunkRelocator.class, Anvil114PoiRelocator.class, Anvil112EntityRelocator.class, Anvil112EntityFilter.class, Anvil116ChunkRenderer.class, Anvil116ColorMapping.class),
+		ANVIL116(2527, 2686, Anvil115ChunkFilter.class, Anvil115ChunkMerger.class, Anvil116ChunkRelocator.class, Anvil114PoiRelocator.class, Anvil112EntityRelocator.class, Anvil112EntityFilter.class, Anvil116ChunkRenderer.class, Anvil116ColorMapping.class),
 		ANVIL117(2681, Integer.MAX_VALUE, Anvil117ChunkFilter.class, Anvil115ChunkMerger.class, Anvil117ChunkRelocator.class, Anvil114PoiRelocator.class, Anvil117EntityRelocator.class, Anvil117EntityFilter.class, Anvil117ChunkRenderer.class, Anvil117ColorMapping.class);
 
 		private final int minVersion, maxVersion;

File: src/main/java/net/querz/mcaselector/io/ChunkImporter.java
Patch:
@@ -201,7 +201,7 @@ public void execute() {
 					allCopied = false;
 				}
 
-				if (!getRegionDirectories().getPoi().exists()) {
+				if (!getRegionDirectories().getPoi().exists() && sourceDirs.getPoi() != null) {
 					File source = new File(sourceDirs.getPoi(), getRegionDirectories().getLocationAsFileName());
 					try {
 						Files.copy(source.toPath(), getRegionDirectories().getPoi().toPath());
@@ -212,7 +212,7 @@ public void execute() {
 					allCopied = false;
 				}
 
-				if (!getRegionDirectories().getEntities().exists()) {
+				if (!getRegionDirectories().getEntities().exists() && sourceDirs.getEntities() != null) {
 					File source = new File(sourceDirs.getEntities(), getRegionDirectories().getLocationAsFileName());
 					try {
 						Files.copy(source.toPath(), getRegionDirectories().getEntities().toPath());

File: src/main/java/net/querz/mcaselector/io/FileHelper.java
Patch:
@@ -133,10 +133,10 @@ public static WorldDirectories validateWorldDirectories(File dir) {
 		File region = new File(dir, "region");
 		File poi = new File(dir, "poi");
 		File entities = new File(dir, "entities");
-		if (!region.exists() || !poi.exists() || !entities.exists()) {
+		if (!region.exists()) {
 			return null;
 		}
-		return new WorldDirectories(region, poi, entities);
+		return new WorldDirectories(region, poi.exists() ? poi : null, entities.exists() ? entities : null);
 	}
 
 	public static RegionDirectories createRegionDirectories(Point2i r) {

File: src/main/java/net/querz/mcaselector/ui/DialogHelper.java
Patch:
@@ -208,8 +208,7 @@ public static void importChunks(TileMap tileMap, Stage primaryStage) {
 
 					WorldDirectories wd = FileHelper.validateWorldDirectories(dir);
 					if (wd == null) {
-						// TODO: show error dialog
-
+						new ErrorDialog(primaryStage, "invalid world directory, missing 'region' directory");
 						return;
 					}
 

File: src/main/java/net/querz/mcaselector/ui/ProgressTask.java
Patch:
@@ -76,7 +76,6 @@ public void updateProgress(String info, int progress) {
 
 	public void updateProgress(String info, double progress, int max) {
 		if (!locked) {
-			System.out.printf("updating progress: %f / %d\n", progress, max);
 			Platform.runLater(() -> infoProperty.setValue(info));
 			updateProgress(progress, max);
 			if (progress == max && onFinish != null) {

File: src/main/java/net/querz/mcaselector/io/ChunkFilterSelector.java
Patch:
@@ -110,7 +110,7 @@ public void execute() {
 			try {
 				Region region = Region.loadRegion(getRegionDirectories(), getRegionData(), getPoiData(), getEntitiesData());
 
-				Set<Point2i> chunks = region.getFilteredChunks(filter, selection.get(getRegionDirectories().getLocation()));
+				Set<Point2i> chunks = region.getFilteredChunks(filter, selection == null ? null : selection.get(getRegionDirectories().getLocation()));
 				if (chunks.size() > 0) {
 					if (chunks.size() == Tile.CHUNKS) {
 						chunks = null;

File: src/main/java/net/querz/mcaselector/io/SelectionHelper.java
Patch:
@@ -105,7 +105,7 @@ public static Map<Point2i, Set<Point2i>> getTrueSelection(SelectionData selectio
 		return sel;
 	}
 
-	public static Point2i getSizeInChunks(Map<Point2i, Set<Point2i>> selection) {
+	public static SelectionInfo getSelectionInfo(Map<Point2i, Set<Point2i>> selection) {
 		int minX, maxX, minZ, maxZ;
 		minX = minZ = Integer.MAX_VALUE;
 		maxX = maxZ = Integer.MIN_VALUE;
@@ -142,6 +142,6 @@ public static Point2i getSizeInChunks(Map<Point2i, Set<Point2i>> selection) {
 				}
 			}
 		}
-		return new Point2i(maxX - minX + 1, maxZ - minZ + 1);
+		return new SelectionInfo(new Point2i(minX, minZ), new Point2i(maxX, maxZ));
 	}
 }

File: src/main/java/net/querz/mcaselector/ui/dialog/ProgressDialog.java
Patch:
@@ -61,9 +61,7 @@ protected Void call() {
 		};
 		progressBar.progressProperty().bind(currentTask.progressProperty());
 		label.textProperty().bind(currentTask.infoProperty());
-		currentTask.setOnFinish(() -> {
-			this.close();
-		});
+		currentTask.setOnFinish(this::close);
 		Thread thread = new Thread(currentTask);
 		thread.start();
 		showAndWait();

File: src/main/java/net/querz/mcaselector/headless/ParamExecutor.java
Patch:
@@ -95,6 +95,7 @@ private void select(FutureTask<Boolean> future) throws IOException {
 		Config.setWorldDirs(parseWorldDirectories("region", "poi", "entities"));
 		File output = parseFileAndCreateParentDirectories("output", "csv");
 		GroupFilter query = parseQuery();
+		SelectionData selectionData = loadSelection();
 		int radius = parseRadius();
 
 		Map<Point2i, Set<Point2i>> selection = new HashMap<>();
@@ -103,7 +104,7 @@ private void select(FutureTask<Boolean> future) throws IOException {
 			SelectionHelper.exportSelection(new SelectionData(selection, false), output);
 			future.run();
 		});
-		ChunkFilterSelector.selectFilter(query, null, radius, (src) -> mergeSelections(src, selection), progress, true);
+		ChunkFilterSelector.selectFilter(query, selectionData, radius, (src) -> mergeSelections(src, selection), progress, true);
 	}
 
 	private void export(FutureTask<Boolean> future) throws IOException {

File: src/main/java/net/querz/mcaselector/io/ChunkFilterSelector.java
Patch:
@@ -21,13 +21,11 @@ private ChunkFilterSelector() {}
 
 	public static void selectFilter(GroupFilter filter, SelectionData selection, int radius, Consumer<Map<Point2i, Set<Point2i>>> callback, Progress progressChannel, boolean headless) {
 		WorldDirectories wd = Config.getWorldDirs();
-		System.out.println(selection);
 		RegionDirectories[] rd = wd.listRegions(selection);
 		if (rd == null || rd.length == 0) {
 			if (headless) {
 				progressChannel.done("no files");
 			} else {
-				System.out.println("no files");
 				progressChannel.done(Translation.DIALOG_PROGRESS_NO_FILES.toString());
 			}
 			return;

File: src/main/java/net/querz/mcaselector/ui/ProgressTask.java
Patch:
@@ -66,7 +66,6 @@ public void updateProgress(String info, double progress, int max) {
 			Platform.runLater(() -> infoProperty.setValue(info));
 			updateProgress(progress, max);
 			if (progress == max && onFinish != null) {
-				System.out.println("GOING TO RUN ONFINISH");
 				Platform.runLater(onFinish);
 			}
 		}

File: src/main/java/net/querz/mcaselector/ui/dialog/ProgressDialog.java
Patch:
@@ -56,14 +56,12 @@ public void showProgressBar(Consumer<ProgressTask> r) {
 			@Override
 			protected Void call() {
 				r.accept(this);
-				System.out.println("DONE CALLING");
 				return null;
 			}
 		};
 		progressBar.progressProperty().bind(currentTask.progressProperty());
 		label.textProperty().bind(currentTask.infoProperty());
 		currentTask.setOnFinish(() -> {
-			System.out.println("CLOSING PROGRESS DIALOG");
 			this.close();
 		});
 		Thread thread = new Thread(currentTask);

File: src/main/java/net/querz/mcaselector/Config.java
Patch:
@@ -141,6 +141,7 @@ public static WorldDirectories getWorldDirs() {
 
 	public static void setWorldDir(File worldDir) {
 		Config.worldDir = worldDir;
+		Config.worldDirs = new WorldDirectories(worldDir, null, null);
 		worldUUID = UUID.nameUUIDFromBytes(worldDir.getAbsolutePath().getBytes());
 		cacheDir = new File(baseCacheDir, worldUUID.toString().replace("-", ""));
 	}

File: src/main/java/net/querz/mcaselector/ui/FileTextField.java
Patch:
@@ -44,7 +44,7 @@ public FileTextField() {
 			}
 		});
 
-		DataProperty<Integer> location = new DataProperty<>();
+		DataProperty<Integer> location = new DataProperty<>(0);
 		textField.textProperty().addListener((observable, oldValue, newValue) ->
 				location.set(textField.getText().length()));
 		textField.focusedProperty().addListener((observable, oldValue, newValue) ->

File: src/main/java/net/querz/mcaselector/filter/FilterType.java
Patch:
@@ -16,9 +16,9 @@ public enum FilterType {
 	STATUS("Status", StatusFilter::new, Format.TEXT),
 	LIGHT_POPULATED("LightPopulated", LightPopulatedFilter::new, Format.NUMBER),
 	ENTITIES("Entities", EntityFilter::new, Format.TEXT),
+	STRUCTURES("Structures", StructureFilter::new, Format.TEXT),
 	ENTITY_AMOUNT("#Entities", EntityAmountFilter::new, Format.NUMBER),
-	TILE_ENTITY_AMOUNT("#TileEntities", TileEntityAmountFilter::new, Format.NUMBER),
-	STRUCTURES("Structures", StructureFilter::new, Format.TEXT);
+	TILE_ENTITY_AMOUNT("#TileEntities", TileEntityAmountFilter::new, Format.NUMBER);
 
 	private final String string;
 	private final Supplier<? extends Filter<?>> creator;

File: src/main/java/net/querz/mcaselector/filter/FilterType.java
Patch:
@@ -20,7 +20,7 @@ public enum FilterType {
 	TILE_ENTITY_AMOUNT("#TileEntities", TileEntityAmountFilter::new, Format.NUMBER),
 	STRUCTURES("Structures", StructureFilter::new, Format.TEXT);
 
-    private final String string;
+	private final String string;
 	private final Supplier<? extends Filter<?>> creator;
 	private final Format format;
 

File: src/main/java/net/querz/mcaselector/text/Translation.java
Patch:
@@ -146,6 +146,7 @@ public enum Translation {
 	DIALOG_PROGRESS_TITLE_EXPORTING_FILTERED_CHUNKS("dialog.progress.title.exporting_filtered_chunks"),
 	DIALOG_PROGRESS_TITLE_SELECTING_FILTERED_CHUNKS("dialog.progress.title.selecting_filtered_chunks"),
 	DIALOG_PROGRESS_TITLE_CHANGING_NBT_DATA("dialog.progress.title.changing_nbt_data"),
+	DIALOG_PROGRESS_TITLE_SAVING_CHUNK("dialog.progress.title.saving_chunk"),
 	DIALOG_ERROR_BUTTON_COPY_TO_CLIPBOARD("dialog.error.button.copy_to_clipboard"),
 	DIALOG_ERROR_TITLE("dialog.error.title"),
 	DIALOG_ERROR_HEADER("dialog.error.header"),

File: src/main/java/net/querz/mcaselector/ui/ProgressTask.java
Patch:
@@ -9,7 +9,7 @@
 
 public abstract class ProgressTask extends Task<Void> implements Progress {
 
-	public int max;
+	private int max;
 	private int current = 0;
 	private final StringProperty infoProperty = new SimpleStringProperty(Translation.DIALOG_PROGRESS_RUNNING.toString());
 	private Runnable onFinish;
@@ -62,9 +62,11 @@ public void updateProgress(String info, int progress) {
 
 	public void updateProgress(String info, double progress, int max) {
 		if (!locked) {
+			current = (int) progress;
 			Platform.runLater(() -> infoProperty.setValue(info));
 			updateProgress(progress, max);
 			if (progress == max && onFinish != null) {
+				System.out.println("GOING TO RUN ONFINISH");
 				Platform.runLater(onFinish);
 			}
 		}

File: src/main/java/net/querz/mcaselector/ui/DialogHelper.java
Patch:
@@ -426,7 +426,7 @@ public static void openRegion(TileMap tileMap, Stage primaryStage, OptionBar opt
 			} else {
 				new ErrorDialog(primaryStage, String.format("no mca files found in %s", file));
 			}
-		} else {
+		} else if (file != null) {
 			new ErrorDialog(primaryStage, String.format("%s is not a directory", file));
 		}
 	}
@@ -453,7 +453,7 @@ public static void openWorld(TileMap tileMap, Stage primaryStage, OptionBar opti
 				tileMap.disable(false);
 				optionBar.setWorldDependentMenuItemsEnabled(true, tileMap);
 			});
-		} else {
+		} else if (file != null) {
 			new ErrorDialog(primaryStage, String.format("%s is not a directory", file));
 		}
 	}

File: src/main/java/net/querz/mcaselector/ui/DialogHelper.java
Patch:
@@ -21,6 +21,7 @@
 import net.querz.mcaselector.ui.dialog.ChangeFieldsConfirmationDialog;
 import net.querz.mcaselector.ui.dialog.ChangeNBTDialog;
 import net.querz.mcaselector.ui.dialog.DeleteConfirmationDialog;
+import net.querz.mcaselector.ui.dialog.ErrorDialog;
 import net.querz.mcaselector.ui.dialog.ExportConfirmationDialog;
 import net.querz.mcaselector.ui.dialog.FilterChunksDialog;
 import net.querz.mcaselector.ui.dialog.GotoDialog;
@@ -427,7 +428,7 @@ public static void openWorld(TileMap tileMap, Stage primaryStage, OptionBar opti
 		if (file != null && file.isDirectory()) {
 			List<File> dimensions = detectDimensionDirectories(file);
 			if (dimensions.size() == 0) {
-				// TODO: show error dialog that we didn't find any dimension
+				new ErrorDialog(primaryStage, String.format("no dimensions found in %s", file.getAbsolutePath())).showAndWait();
 				Debug.dumpf("no dimensions found in %s", file.getAbsolutePath());
 				return;
 			}

File: src/main/java/net/querz/mcaselector/tiles/TileImage.java
Patch:
@@ -153,9 +153,8 @@ private static Image createMCAImage(MCAFile mcaFile, ByteArrayPointer ptr) {
 
 					MCAChunkData data = mcaFile.getChunkData(index);
 
-					data.readHeader(ptr);
-
 					try {
+						data.readHeader(ptr);
 						data.loadData(ptr);
 					} catch (Exception ex) {
 						Debug.dumpException(String.format("failed to load chunk %s from raw data in %s", new Point2i(cx, cz), mcaFile.getFile().getName()), ex);

File: src/main/java/net/querz/mcaselector/io/ChunkFilterSelector.java
Patch:
@@ -118,7 +118,7 @@ public void execute() {
 
 					callback.accept(region);
 
-					Debug.dumpf("took %s to delete chunk indices in %s", t, getFile().getName());
+					Debug.dumpf("took %s to select chunks in %s", t, getFile().getName());
 				}
 			} catch (Exception ex) {
 				Debug.dumpException("error selecting chunks in " + getFile().getName(), ex);

File: src/main/java/net/querz/mcaselector/tiles/ImagePool.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Map;
 import java.util.Set;
 
-public class ImagePool {
+public final class ImagePool {
 
 	private final Map<Integer, LinkedHashMap<Point2i, Image>> pool = new HashMap<>();
 	private final Set<Point2i> noMCA = new HashSet<>();

File: src/main/java/net/querz/mcaselector/tiles/TileMap.java
Patch:
@@ -625,7 +625,7 @@ private void draw(GraphicsContext ctx) {
 
 			Point2i regionOffset = region.regionToBlock().sub((int) offset.getX(), (int) offset.getY());
 
-			if (!tile.isLoaded() && !tile.isLoading()) {
+			if (Config.getWorldDir() != null && !tile.isLoaded() && !tile.isLoading()) {
 				imgPool.requestImage(tile, getZoomLevel());
 			}
 			Point2f p = new Point2f(regionOffset.getX() / scale, regionOffset.getY() / scale);

File: src/main/java/net/querz/mcaselector/ui/NBTTreeView.java
Patch:
@@ -321,7 +321,7 @@ private static NBTTreeItem toTreeItem(String name, Tag<?> tag, Tag<?> parent) {
 		}
 	}
 
-	static class NamedTag implements Serializable {
+	public static class NamedTag implements Serializable {
 		String name;
 		Tag<?> tag;
 		Tag<?> parent;
@@ -333,7 +333,7 @@ public NamedTag(String name, Tag<?> tag, Tag<?> parent) {
 		}
 	}
 
-	static class NBTTreeItem extends TreeItem<NamedTag> {
+	public static class NBTTreeItem extends TreeItem<NamedTag> {
 
 		public NBTTreeItem(NamedTag tag) {
 			super(tag);

File: src/main/java/net/querz/mcaselector/filter/PaletteFilter.java
Patch:
@@ -64,6 +64,8 @@ public void setFilterValue(String raw) {
 					setValue(null);
 					setValid(false);
 					return;
+				} else {
+					rawBlockNames[i] = "minecraft:" + rawBlockNames[i];
 				}
 			}
 			setValid(true);

File: src/main/java/net/querz/mcaselector/version/anvil113/Anvil113ChunkFilter.java
Patch:
@@ -37,7 +37,7 @@ public boolean matchBlockNames(CompoundTag data, String... names) {
 					continue;
 				}
 				for (CompoundTag p : palette) {
-					if (("minecraft:" + name).equals(withDefault(() -> p.getString("Name"), null))) {
+					if (name.equals(withDefault(() -> p.getString("Name"), null))) {
 						c++;
 						continue nameLoop;
 					}

File: src/main/java/net/querz/mcaselector/Config.java
Patch:
@@ -37,9 +37,9 @@ public final class Config {
 	public static final Color DEFAULT_PASTE_CHUNKS_COLOR = new Color(0, 1, 0, 0.8);
 	public static final Locale DEFAULT_LOCALE = Locale.UK;
 	public static final int DEFAULT_LOAD_THREADS = 1;
-	public static final int DEFAULT_PROCESS_THREADS = Runtime.getRuntime().availableProcessors();
-	public static final int DEFAULT_WRITE_THREADS = 4;
-	public static final int DEFAULT_MAX_LOADED_FILES = DEFAULT_PROCESS_THREADS + (DEFAULT_PROCESS_THREADS / 2);
+	public static final int DEFAULT_PROCESS_THREADS = Math.max(Runtime.getRuntime().availableProcessors() - 2, 1);
+	public static final int DEFAULT_WRITE_THREADS = Math.min(Runtime.getRuntime().availableProcessors(), 4);
+	public static final int DEFAULT_MAX_LOADED_FILES = (int) Math.max(Math.ceil(Runtime.getRuntime().maxMemory() / 1_000_000_000D) * 2, 1);
 	public static final boolean DEFAULT_SHADE = true;
 	public static final boolean DEFAULT_SHADE_WATER = true;
 	public static final boolean DEFAULT_DEBUG = false;

File: src/main/java/net/querz/mcaselector/tiles/Selection.java
Patch:
@@ -81,7 +81,7 @@ private void calculateMinMax() {
 		} else {
 			for (Point2i chunk : minRegionZChunks) {
 				if (chunk.getY() < min.getY()) {
-					min.setX(chunk.getY());
+					min.setY(chunk.getY());
 				}
 			}
 		}

File: src/main/java/net/querz/mcaselector/point/Point2i.java
Patch:
@@ -1,8 +1,9 @@
 package net.querz.mcaselector.point;
 
+import java.io.Serializable;
 import java.util.Objects;
 
-public class Point2i implements Cloneable {
+public class Point2i implements Cloneable, Serializable {
 
 	private int x, z;
 

File: src/main/java/net/querz/mcaselector/filter/InhabitedTimeFilter.java
Patch:
@@ -1,7 +1,6 @@
 package net.querz.mcaselector.filter;
 
 import net.querz.mcaselector.text.TextHelper;
-import net.querz.nbt.tag.CompoundTag;
 
 public class InhabitedTimeFilter extends LongFilter {
 
@@ -15,7 +14,7 @@ private InhabitedTimeFilter(Operator operator, Comparator comparator, long value
 
 	@Override
 	protected Long getNumber(FilterData data) {
-		return ((CompoundTag) data.getChunk().get("Level")).getLong("InhabitedTime");
+		return data.getChunk().getCompoundTag("Level").getLong("InhabitedTime");
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/filter/LongFilter.java
Patch:
@@ -39,12 +39,12 @@ public void setFilterValue(String raw) {
 
 	@Override
 	boolean isEqual(Long a, Long b) {
-		return a.intValue() == b.intValue();
+		return a.longValue() == b.longValue();
 	}
 
 	@Override
 	boolean isNotEqual(Long a, Long b) {
-		return a.intValue() != b.intValue();
+		return a.longValue() != b.longValue();
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/filter/XPosFilter.java
Patch:
@@ -1,7 +1,6 @@
 package net.querz.mcaselector.filter;
 
 import net.querz.mcaselector.point.Point2i;
-import net.querz.nbt.tag.CompoundTag;
 
 public class XPosFilter extends IntFilter implements RegionMatcher {
 
@@ -15,7 +14,7 @@ public XPosFilter(Operator operator, Comparator comparator, int value) {
 
 	@Override
 	protected Integer getNumber(FilterData data) {
-		return ((CompoundTag) data.getChunk().get("Level")).getInt("xPos");
+		return data.getChunk().getCompoundTag("Level").getInt("xPos");
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/filter/ZPosFilter.java
Patch:
@@ -1,7 +1,6 @@
 package net.querz.mcaselector.filter;
 
 import net.querz.mcaselector.point.Point2i;
-import net.querz.nbt.tag.CompoundTag;
 
 public class ZPosFilter extends IntFilter implements RegionMatcher {
 
@@ -15,7 +14,7 @@ public ZPosFilter(Operator operator, Comparator comparator, int value) {
 
 	@Override
 	protected Integer getNumber(FilterData data) {
-		return ((CompoundTag) data.getChunk().get("Level")).getInt("zPos");
+		return data.getChunk().getCompoundTag("Level").getInt("zPos");
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/io/MCAChunkData.java
Patch:
@@ -172,7 +172,7 @@ public void changeData(List<Field<?>> fields, boolean force) {
 					field.change(data);
 				}
 			} catch (Exception ex) {
-				Debug.dumpf("error trying to update field: %s", ex.getMessage());
+				Debug.dumpf("failed to change field %s in chunk %s: %s", field.getType(), absoluteLocation, ex);
 			}
 		}
 	}

File: src/main/java/net/querz/mcaselector/version/anvil113/Anvil113ChunkDataProcessor.java
Patch:
@@ -5,6 +5,7 @@
 import net.querz.mcaselector.version.anvil112.Anvil112ChunkDataProcessor;
 import net.querz.nbt.tag.CompoundTag;
 import net.querz.nbt.tag.ListTag;
+import net.querz.nbt.tag.LongArrayTag;
 import net.querz.nbt.tag.Tag;
 import static net.querz.mcaselector.validation.ValidationHelper.*;
 
@@ -23,7 +24,7 @@ public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z,
 		}
 
 		Tag<?> rawSections = level.get("Sections");
-		if (rawSections == null || rawSections.getID() != ListTag.ID) {
+		if (rawSections == null || rawSections.getID() == LongArrayTag.ID) {
 			return;
 		}
 

File: src/main/java/net/querz/mcaselector/version/anvil113/Anvil113ChunkFilter.java
Patch:
@@ -3,6 +3,7 @@
 import net.querz.mcaselector.version.ChunkFilter;
 import net.querz.nbt.tag.CompoundTag;
 import net.querz.nbt.tag.ListTag;
+import net.querz.nbt.tag.LongArrayTag;
 import net.querz.nbt.tag.Tag;
 import java.util.Arrays;
 import static net.querz.mcaselector.validation.ValidationHelper.*;
@@ -16,7 +17,7 @@ public boolean matchBlockNames(CompoundTag data, String... names) {
 			return false;
 		}
 		Tag<?> rawSections = level.get("Sections");
-		if (rawSections == null) {
+		if (rawSections == null || rawSections.getID() == LongArrayTag.ID) {
 			return false;
 		}
 		ListTag<CompoundTag> sections = catchClassCastException(((ListTag<?>) rawSections)::asCompoundTagList);

File: src/main/java/net/querz/mcaselector/text/Translation.java
Patch:
@@ -75,6 +75,7 @@ public enum Translation {
 	DIALOG_IMPORT_CHUNKS_CONFIRMATION_OPTIONS_OFFSET("dialog.import_chunks_confirmation.options.offset"),
 	DIALOG_IMPORT_CHUNKS_CONFIRMATION_OPTIONS_OVERWRITE("dialog.import_chunks_confirmation.options.overwrite"),
 	DIALOG_IMPORT_CHUNKS_CONFIRMATION_OPTIONS_SELECTION_ONLY("dialog.import_chunks_confirmation.options.selection_only"),
+	DIALOG_IMPORT_CHUNKS_CONFIRMATION_OPTIONS_RANGE("dialog.import_chunks_confirmation.options.range"),
 	DIALOG_IMPORT_CHUNKS_CONFIRMATION_WARNING("dialog.import_chunks_confirmation.warning"),
 	DIALOG_EXPORT_CHUNKS_CONFIRMATION_TITLE("dialog.export_chunks_confirmation.title"),
 	DIALOG_EXPORT_CHUNKS_CONFIRMATION_HEADER_SHORT("dialog.export_chunks_confirmation.header_short"),

File: src/main/java/net/querz/mcaselector/tiles/TileImage.java
Patch:
@@ -139,7 +139,6 @@ private static Image createMCAImage(MCAFile mcaFile, ByteArrayPointer ptr) {
 					try {
 						data.loadData(ptr);
 					} catch (Exception ex) {
-						System.out.println("here 1");
 						Debug.error(ex);
 					}
 
@@ -155,7 +154,6 @@ private static Image createMCAImage(MCAFile mcaFile, ByteArrayPointer ptr) {
 
 			return finalImage;
 		} catch (Exception ex) {
-			System.out.println("here 2");
 			Debug.error(ex);
 		}
 		return null;

File: src/main/java/net/querz/mcaselector/ui/ImportConfirmationDialog.java
Patch:
@@ -12,7 +12,6 @@
 import net.querz.mcaselector.range.Range;
 import net.querz.mcaselector.range.RangeParser;
 import net.querz.mcaselector.text.Translation;
-
 import java.util.List;
 import java.util.function.Consumer;
 
@@ -88,7 +87,7 @@ public ImportConfirmationDialog(Stage primaryStage, Consumer<ChunkImportConfirma
 		optionGrid.add(overwrite, 1, 1);
 		optionGrid.add(UIFactory.label(Translation.DIALOG_IMPORT_CHUNKS_CONFIRMATION_OPTIONS_SELECTION_ONLY), 0, 2);
 		optionGrid.add(selectionOnly, 1, 2);
-		optionGrid.add(UIFactory.label(Translation.DIALOG_IMPORT_CHUNKS_CONFIRMATION_OPTIONS_SELECTION_ONLY), 0, 3);
+		optionGrid.add(UIFactory.label(Translation.DIALOG_IMPORT_CHUNKS_CONFIRMATION_OPTIONS_RANGE), 0, 3);
 		optionGrid.add(range, 1, 3);
 
 		BorderedTitledPane options = new BorderedTitledPane(Translation.DIALOG_IMPORT_CHUNKS_CONFIRMATION_OPTIONS, optionGrid);

File: src/main/java/net/querz/mcaselector/ui/OptionBar.java
Patch:
@@ -110,7 +110,7 @@ public OptionBar(TileMap tileMap, Stage primaryStage) {
 		swapChunks.setAccelerator(new KeyCodeCombination(KeyCode.M, KeyCodeCombination.SHORTCUT_DOWN));
 
 		setSelectionDependentMenuItemsEnabled(tileMap.getSelectedChunks());
-//		setWorldDependentMenuItemsEnabled(false);
+		setWorldDependentMenuItemsEnabled(false);
 	}
 
 	private void onUpdate(TileMap tileMap) {

File: src/main/java/net/querz/mcaselector/version/ChunkDataProcessor.java
Patch:
@@ -3,9 +3,12 @@
 import net.querz.mcaselector.range.Range;
 import net.querz.nbt.tag.CompoundTag;
 import java.util.List;
+import java.util.Random;
 
 public interface ChunkDataProcessor {
 
+	Random random = new Random();
+
 	void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z, int[] pixelBuffer, int[] waterPixels, byte[] terrainHeights, byte[] waterHeights, boolean water);
 
 	void mergeChunks(CompoundTag source, CompoundTag destination, List<Range> ranges);

File: src/main/java/net/querz/mcaselector/version/anvil116/Anvil116ChunkDataProcessor.java
Patch:
@@ -1,8 +1,8 @@
 package net.querz.mcaselector.version.anvil116;
 
-import net.querz.mcaselector.version.anvil113.Anvil113ChunkDataProcessor;
+import net.querz.mcaselector.version.anvil115.Anvil115ChunkDataProcessor;
 
-public class Anvil116ChunkDataProcessor extends Anvil113ChunkDataProcessor {
+public class Anvil116ChunkDataProcessor extends Anvil115ChunkDataProcessor {
 
 	@Override
 	protected int getPaletteIndex(int index, long[] blockStates, int bits, int clean) {

File: src/main/java/net/querz/mcaselector/tiles/TileImage.java
Patch:
@@ -139,6 +139,7 @@ private static Image createMCAImage(MCAFile mcaFile, ByteArrayPointer ptr) {
 					try {
 						data.loadData(ptr);
 					} catch (Exception ex) {
+						System.out.println("here 1");
 						Debug.error(ex);
 					}
 
@@ -154,6 +155,7 @@ private static Image createMCAImage(MCAFile mcaFile, ByteArrayPointer ptr) {
 
 			return finalImage;
 		} catch (Exception ex) {
+			System.out.println("here 2");
 			Debug.error(ex);
 		}
 		return null;

File: src/main/java/net/querz/mcaselector/ui/DialogHelper.java
Patch:
@@ -156,6 +156,7 @@ public static void importChunks(TileMap tileMap, Stage primaryStage) {
 							.showProgressBar(t -> ChunkImporter.importChunks(
 									dir, t, false, dataProperty.get().overwrite(),
 									dataProperty.get().selectionOnly() ? tileMap.getMarkedChunks() : null,
+									dataProperty.get().getRanges(),
 									dataProperty.get().getOffset()));
 					CacheHelper.clearAllCache(tileMap);
 				}

File: src/main/java/net/querz/mcaselector/ui/OptionBar.java
Patch:
@@ -110,7 +110,7 @@ public OptionBar(TileMap tileMap, Stage primaryStage) {
 		swapChunks.setAccelerator(new KeyCodeCombination(KeyCode.M, KeyCodeCombination.SHORTCUT_DOWN));
 
 		setSelectionDependentMenuItemsEnabled(tileMap.getSelectedChunks());
-		setWorldDependentMenuItemsEnabled(false);
+//		setWorldDependentMenuItemsEnabled(false);
 	}
 
 	private void onUpdate(TileMap tileMap) {

File: src/main/java/net/querz/mcaselector/version/VersionController.java
Patch:
@@ -7,6 +7,7 @@
 import net.querz.mcaselector.version.anvil113.Anvil113ChunkDataProcessor;
 import net.querz.mcaselector.version.anvil113.Anvil113ChunkFilter;
 import net.querz.mcaselector.version.anvil113.Anvil113ColorMapping;
+import net.querz.mcaselector.version.anvil115.Anvil115ChunkDataProcessor;
 import net.querz.mcaselector.version.anvil115.Anvil115ChunkFilter;
 import net.querz.mcaselector.version.anvil116.Anvil116ChunkDataProcessor;
 
@@ -32,7 +33,7 @@ private enum Mapping {
 
 		ANVIL_1_12(0, 1343, Anvil112ChunkDataProcessor.class, Anvil112ColorMapping.class, Anvil112ChunkFilter.class),
 		ANVIL_1_13(1344, 2201, Anvil113ChunkDataProcessor.class, Anvil113ColorMapping.class, Anvil113ChunkFilter.class),
-		ANVIL_1_15(2202, 2526, Anvil113ChunkDataProcessor.class, Anvil113ColorMapping.class, Anvil115ChunkFilter.class),
+		ANVIL_1_15(2202, 2526, Anvil115ChunkDataProcessor.class, Anvil113ColorMapping.class, Anvil115ChunkFilter.class),
 		ANVIL_1_16(2527, Integer.MAX_VALUE, Anvil116ChunkDataProcessor.class, Anvil113ColorMapping.class, Anvil115ChunkFilter.class);
 
 		private int from, to;

File: src/main/java/net/querz/mcaselector/version/anvil113/Anvil113ChunkDataProcessor.java
Patch:
@@ -1,13 +1,13 @@
 package net.querz.mcaselector.version.anvil113;
 
-import net.querz.mcaselector.version.ChunkDataProcessor;
 import net.querz.mcaselector.version.ColorMapping;
 import net.querz.mcaselector.tiles.Tile;
+import net.querz.mcaselector.version.anvil112.Anvil112ChunkDataProcessor;
 import net.querz.nbt.tag.CompoundTag;
 import net.querz.nbt.tag.ListTag;
 import static net.querz.mcaselector.validation.ValidationHelper.*;
 
-public class Anvil113ChunkDataProcessor implements ChunkDataProcessor {
+public class Anvil113ChunkDataProcessor extends Anvil112ChunkDataProcessor {
 
 	@Override
 	public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z, int[] pixelBuffer, int[] waterPixels, byte[] terrainHeights, byte[] waterHeights, boolean water) {
@@ -29,7 +29,7 @@ public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z,
 
 				//loop over sections
 				boolean waterDepth = false;
-				sLoop: for (int i = 0; i < sections.size(); i++) {
+				for (int i = 0; i < sections.size(); i++) {
 					final int si = i;
 					CompoundTag section;
 					ListTag<?> rawPalette;

File: src/main/java/net/querz/mcaselector/filter/Filter.java
Patch:
@@ -8,7 +8,7 @@ public abstract class Filter<T> implements Serializable {
 	private boolean valid = true;
 	private FilterType type;
 	private Operator operator;
-	private Filter parent;
+	private Filter<?> parent;
 
 	public Filter(FilterType type) {
 		this(type, Operator.AND);
@@ -47,11 +47,11 @@ public FilterType getType() {
 		return type;
 	}
 
-	public void setParent(Filter parent) {
+	public void setParent(Filter<?> parent) {
 		this.parent = parent;
 	}
 
-	public Filter getParent() {
+	public Filter<?> getParent() {
 		return parent;
 	}
 

File: src/main/java/net/querz/mcaselector/ui/GroupFilterBox.java
Patch:
@@ -23,6 +23,7 @@ private void setFilter(FilterBox parent, GroupFilter filter, boolean root) {
 		filters.getChildren().clear();
 		add.setTooltip(UIFactory.tooltip(Translation.DIALOG_FILTER_CHUNKS_FILTER_ADD_TOOLTIP));
 		delete.setVisible(!root);
+		move.setVisible(!root);
 
 		if (root) {
 			getStyleClass().add("group-filter-box-root");

File: src/main/java/net/querz/mcaselector/ui/AboutDialog.java
Patch:
@@ -44,7 +44,7 @@ public AboutDialog(Stage primaryStage) {
 
 		grid.add(UIFactory.label(Translation.DIALOG_ABOUT_VERSION), 0, 0);
 		HBox versionLabel = new HBox();
-		versionLabel.setAlignment(Pos.CENTER);
+		versionLabel.setAlignment(Pos.CENTER_LEFT);
 		String applicationVersion = "0";
 		try {
 			applicationVersion = FileHelper.getManifestAttributes().getValue("Application-Version");

File: src/main/java/net/querz/mcaselector/tiles/ImagePool.java
Patch:
@@ -45,7 +45,7 @@ public void requestImage(Tile tile, int scale) {
 		// check if image exists in pool
 		Image img = pool.get(scale).get(tile.location);
 		if (img != null) {
-			Debug.dumpf("image was cached in image pool: %d/%s\n", scale, tile.location);
+			Debug.dumpf("image was cached in image pool: %d/%s", scale, tile.location);
 			tile.setImage(img);
 			tile.setLoaded(true);
 			tile.setLoading(false);

File: src/main/java/net/querz/mcaselector/Config.java
Patch:
@@ -94,11 +94,12 @@ public static File[] getCacheDirs() {
 
 	public static void setDebug(boolean debug) {
 		if (debug && !Config.debug) {
+			Config.debug = true;
 			Debug.initLogWriter();
 		} else if (!debug && Config.debug) {
+			Config.debug = false;
 			Debug.flushAndCloseLogWriter();
 		}
-		Config.debug = debug;
 	}
 
 	public static boolean debug() {

File: src/main/java/net/querz/mcaselector/io/MCAFile.java
Patch:
@@ -390,7 +390,7 @@ private Point2i getChunkOffsetFromIndex(int index) {
 	}
 
 	public MCAChunkData getChunkData(int index) {
-		return new MCAChunkData(location.add(getChunkOffsetFromIndex(index)), offsets[index], timestamps[index], sectors[index]);
+		return new MCAChunkData(location.regionToChunk().add(getChunkOffsetFromIndex(index)), offsets[index], timestamps[index], sectors[index]);
 	}
 
 	public void setChunkData(int index, MCAChunkData chunk) {

File: src/main/java/net/querz/mcaselector/headless/ParamExecutor.java
Patch:
@@ -67,7 +67,7 @@ public Future<Boolean> parseAndRun() {
 			pi.registerSoftDependencies("query", null, new ActionKey("mode", "select"), new ActionKey("mode", "export"), new ActionKey("mode", "delete"), new ActionKey("mode", "change"));
 			pi.registerSoftDependencies("radius", null, new ActionKey("mode", "select"));
 			pi.registerDependencies("force", null, new ActionKey("mode", "change"));
-			pi.registerDependencies("id-map", null, new ActionKey("mode", "change"));
+//			pi.registerDependencies("id-map", null, new ActionKey("mode", "change"));
 			pi.registerDependencies("offset-x", null, new ActionKey("mode", "import"));
 			pi.registerDependencies("offset-z", null, new ActionKey("mode", "import"));
 			pi.registerDependencies("overwrite", null, new ActionKey("mode", "import"));

File: src/main/java/net/querz/mcaselector/ui/ChangeNBTDialog.java
Patch:
@@ -72,7 +72,7 @@ public ChangeNBTDialog(TileMap tileMap, Stage primaryStage) {
 		getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);
 
 		FieldView fieldView = new FieldView();
-		for (FieldType fieldType : FieldType.values()) {
+		for (FieldType fieldType : FieldType.uiValues()) {
 			Field field = fieldType.newInstance();
 			fieldView.addField(field);
 			fields.add(field);

File: src/main/java/net/querz/mcaselector/io/ChunkImporter.java
Patch:
@@ -204,12 +204,10 @@ public void execute() {
 					source.mergeChunksInto(destination, offset, overwrite, selection == null ? null : selection.size() == 0 ? null : selection);
 				}
 
-
-
 				MCAFilePipe.executeSaveData(new MCAChunkImporterSaveJob(getFile(), destination, progressChannel));
 
 			} catch (Exception ex) {
-				Debug.errorf("error merging chunks into %s with offset %s: %s", getFile(), offset, ex.getMessage());
+				Debug.error(ex);
 				progressChannel.incrementProgress(getFile().getName());
 			}
 

File: src/main/java/net/querz/mcaselector/Config.java
Patch:
@@ -57,6 +57,7 @@ public final class Config {
 
 	public static final float MAX_SCALE = 7.9999f;
 	public static final float MIN_SCALE = 0.2f;
+	public static final double IMAGE_POOL_SIZE = 2.5;
 
 	private Config() {}
 

File: src/main/java/net/querz/mcaselector/io/CacheHelper.java
Patch:
@@ -31,7 +31,7 @@ public static void forceGenerateCache(Integer zoomLevel, Progress progressChanne
 				int z = Integer.parseInt(m.group("regionZ"));
 				boolean scaleOnly = zoomLevel != null;
 				float zoomLevelSupplier = scaleOnly ? zoomLevel : 1;
-				RegionImageGenerator.generate(new Tile(new Point2i(x, z)), i -> {}, () -> zoomLevelSupplier, true, scaleOnly, progressChannel);
+				RegionImageGenerator.generate(new Tile(new Point2i(x, z)), i -> {}, () -> zoomLevelSupplier, scaleOnly, progressChannel);
 			}
 		}
 	}

File: src/main/java/net/querz/mcaselector/debug/Debug.java
Patch:
@@ -151,7 +151,9 @@ private void repeatedFlush() {
 			while (br != null) {
 				try {
 					Thread.sleep(10000);
-					br.flush();
+					if (br != null) {
+						br.flush();
+					}
 				} catch (InterruptedException | IOException ex) {
 					System.out.println("failed to flush debug log file");
 					ex.printStackTrace();

File: src/main/java/net/querz/mcaselector/io/CacheHelper.java
Patch:
@@ -31,7 +31,7 @@ public static void forceGenerateCache(Integer zoomLevel, Progress progressChanne
 				int z = Integer.parseInt(m.group("regionZ"));
 				boolean scaleOnly = zoomLevel != null;
 				float zoomLevelSupplier = scaleOnly ? zoomLevel : 1;
-				RegionImageGenerator.generate(new Tile(new Point2i(x, z)), () -> {}, () -> zoomLevelSupplier, true, scaleOnly, progressChannel);
+				RegionImageGenerator.generate(new Tile(new Point2i(x, z)), i -> {}, () -> zoomLevelSupplier, true, scaleOnly, progressChannel);
 			}
 		}
 	}

File: src/main/java/net/querz/mcaselector/progress/Timer.java
Patch:
@@ -18,6 +18,7 @@ public void reset() {
 
 	@Override
 	public String toString() {
-		return getMillis() + "ms";
+		long nano = getNano();
+		return String.format("%d.%06dms", nano / 1_000_000, nano % 1_000_000);
 	}
 }

File: src/main/java/net/querz/mcaselector/ui/Window.java
Patch:
@@ -5,6 +5,9 @@
 import javafx.scene.input.KeyCode;
 import javafx.scene.layout.BorderPane;
 import javafx.stage.Stage;
+import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.tiles.ImagePool;
+import net.querz.mcaselector.tiles.Tile;
 import net.querz.mcaselector.tiles.TileMap;
 import net.querz.mcaselector.io.FileHelper;
 import java.net.URL;

File: src/main/java/net/querz/mcaselector/debug/Debug.java
Patch:
@@ -172,10 +172,12 @@ public static void initLogWriter() {
 
 		Debug.dumpf("os.name:                      %s", System.getProperty("os.name"));
 		Debug.dumpf("os.version:                   %s", System.getProperty("os.version"));
+		Debug.dumpf("user.dir:                     %s", System.getProperty("user.dir"));
+		Debug.dumpf("cache.dir:                    %s", Config.DEFAULT_BASE_CACHE_DIR.getAbsolutePath());
 		Debug.dumpf("proc.cores:                   %s", Runtime.getRuntime().availableProcessors());
 		Debug.dumpf("java.version:                 %s", System.getProperty("java.version"));
 		Debug.dumpf("java.vm.specification.vendor: %s", System.getProperty("java.vm.specification.vendor"));
-		Debug.dumpf("jvm max mem:                  %d", Runtime.getRuntime().maxMemory());
+		Debug.dumpf("jvm.max.mem:                  %d", Runtime.getRuntime().maxMemory());
 	}
 
 	public static void flushAndCloseLogWriter() {

File: src/main/java/net/querz/mcaselector/io/ChunkFilterExporter.java
Patch:
@@ -72,7 +72,7 @@ public void execute() {
 				//copy file to new directory
 				File to = new File(destination, getFile().getName());
 				if (to.exists()) {
-					Debug.dump(to.getAbsolutePath() + " exists, not overwriting");
+					Debug.dumpf("%s exists, not overwriting", to.getAbsolutePath());
 					progressChannel.incrementProgress(getFile().getName());
 					return;
 				}

File: src/main/java/net/querz/mcaselector/io/MCAFilePipe.java
Patch:
@@ -100,10 +100,10 @@ static void refillDataLoadExecutorQueue() {
 	public static void addJob(LoadDataJob job) {
 		if (processDataExecutor.getQueue().size() + loadDataExecutor.getQueue().size() > maxLoadedFiles
 				|| saveDataExecutor.getQueue().size() > maxLoadedFiles) {
-			Debug.dumpf("adding LoadDataJob %s for %s to wait queue", job, job.getFile().getName());
+			Debug.dumpf("adding LoadDataJob %s for %s to wait queue", job.getClass().getSimpleName(), job.getFile().getName());
 			waitingForLoad.offer(job);
 		} else {
-			Debug.dumpf("adding LoadDataJob %s for %s to executor queue", job, job.getFile().getName());
+			Debug.dumpf("adding LoadDataJob %s for %s to executor queue", job.getClass().getSimpleName(), job.getFile().getName());
 			loadDataExecutor.execute(job);
 		}
 	}

File: src/main/java/net/querz/mcaselector/tiles/TileMap.java
Patch:
@@ -238,7 +238,7 @@ public void update() {
 		}
 		draw(context);
 		totalUpdates++;
-		Debug.dumpf("update took: %s #%d", t, totalUpdates);
+		Debug.dumpfToConsoleOnly("map update #%d: %s ", totalUpdates, t);
 	}
 
 	public void disable(boolean disabled) {

File: src/main/java/net/querz/mcaselector/ui/GotoDialog.java
Patch:
@@ -15,9 +15,9 @@ public GotoDialog(Stage primaryStage) {
 		getDialogPane().getStyleClass().add("goto-dialog-pane");
 		getDialogPane().getStylesheets().addAll(primaryStage.getScene().getStylesheets());
 
-		LocationInput locationInput = new LocationInput(true);
+		LocationInput locationInput = new LocationInput(false);
 
-		setResultConverter(p -> locationInput.getValue());
+		setResultConverter(p -> p == ButtonType.OK ? locationInput.getValue() : null);
 
 		getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);
 		getDialogPane().lookupButton(ButtonType.OK).setDisable(!locationInput.emptyIsZero());

File: src/main/java/net/querz/mcaselector/ui/DialogHelper.java
Patch:
@@ -179,7 +179,7 @@ public static void editSettings(TileMap tileMap, Stage primaryStage) {
 	public static void editNBT(TileMap tileMap, Stage primaryStage) {
 		Optional<NBTEditor.Result> result = new NBTEditor(tileMap, primaryStage).showAndWait();
 		result.ifPresent(r -> System.out.println(r.getData()));
-		System.exit(0);
+
 	}
 
 	public static void openWorld(TileMap tileMap, Stage primaryStage, OptionBar optionBar) {

File: src/main/java/net/querz/mcaselector/validation/ValidationHelper.java
Patch:
@@ -11,7 +11,7 @@ public static <T> T withDefault(Supplier<T> s, T def) {
 		try {
 			return s.get();
 		} catch (Exception ex) {
-			Debug.dumpf("validation error: ", ex.getMessage());
+			Debug.dumpf("validation error: ", ex.getMessage() + "(" + ex.getClass() + ")");
 			return def;
 		}
 	}
@@ -20,7 +20,7 @@ public static <T> T catchClassCastException(Supplier<T> s) {
 		try {
 			return s.get();
 		} catch (ClassCastException ex) {
-			Debug.dumpf("validation error: ", ex.getMessage());
+			Debug.dumpf("validation error: ", ex.getMessage() + "(" + ex.getClass() + ")");
 			return null;
 		}
 	}

File: src/main/java/net/querz/mcaselector/ui/ImportConfirmationDialog.java
Patch:
@@ -34,10 +34,10 @@ public ImportConfirmationDialog(Stage primaryStage, Consumer<ChunkImportConfirma
 			getDialogPane().lookupButton(ButtonType.OK).setDisable(!valid);
 			data.offset = locationInput.getValue();
 			dataAction.accept(data);
-			if (data.offset.getX() != 0 || data.offset.getY() != 0 && !warningVisible.get()) {
+			if (valid && (data.offset.getX() != 0 || data.offset.getY() != 0)) {
 				warning.getStyleClass().remove("import-chunks-warning-invisible");
 				warningVisible.set(true);
-			} else {
+			} else if (warningVisible.get()) {
 				warning.getStyleClass().add("import-chunks-warning-invisible");
 				warningVisible.set(false);
 			}

File: src/main/java/net/querz/mcaselector/ui/LocationInput.java
Patch:
@@ -63,7 +63,7 @@ public void requestFocus() {
 	//allow only + / -
 
 	private void onXInput(String o, String n) {
-		if (emptyIsZero && n.isEmpty()) {
+		if (emptyIsZero && (n.isEmpty() || "-".equals(n) || "+".equals(n))) {
 			x = 0;
 			setValue();
 			return;
@@ -80,7 +80,7 @@ private void onXInput(String o, String n) {
 	}
 
 	private void onZInput(String o, String n) {
-		if (emptyIsZero && n.isEmpty()) {
+		if (emptyIsZero && (n.isEmpty() || "-".equals(n) || "+".equals(n))) {
 			z = 0;
 			setValue();
 			return;

File: src/main/java/net/querz/mcaselector/io/ChunkImporter.java
Patch:
@@ -33,7 +33,6 @@ public static void importChunks(File importDir, Progress progressChannel, boolea
 
 			MCAFilePipe.clearQueues();
 
-			progressChannel.setMax(importFiles.length * (offset.getX() % 32 != 0 ? 2 : 1) * (offset.getY() % 32 != 0 ? 2 : 1));
 			if (headless) {
 				progressChannel.setMessage("collecting data...");
 			} else {
@@ -42,7 +41,6 @@ public static void importChunks(File importDir, Progress progressChannel, boolea
 
 			Map<Point2i, Set<Point2i>> targetMapping = new HashMap<>();
 
-
 			// find target files
 			for (File file : importFiles) {
 				Point2i source = FileHelper.parseMCAFileName(file);
@@ -58,6 +56,7 @@ public static void importChunks(File importDir, Progress progressChannel, boolea
 					ex.printStackTrace();
 				}
 			}
+			progressChannel.setMax(targetMapping.size());
 
 			progressChannel.updateProgress(importFiles[0].getName(), 0);
 

File: src/main/java/net/querz/mcaselector/Main.java
Patch:
@@ -2,8 +2,8 @@
 
 import net.querz.mcaselector.headless.ParamExecutor;
 import net.querz.mcaselector.ui.Window;
-import net.querz.mcaselector.util.Debug;
-import net.querz.mcaselector.util.Translation;
+import net.querz.mcaselector.debug.Debug;
+import net.querz.mcaselector.text.Translation;
 import java.util.Locale;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;

File: src/main/java/net/querz/mcaselector/debug/Debug.java
Patch:
@@ -1,7 +1,6 @@
-package net.querz.mcaselector.util;
+package net.querz.mcaselector.debug;
 
 import net.querz.mcaselector.Config;
-
 import java.util.Arrays;
 
 public class Debug {

File: src/main/java/net/querz/mcaselector/filter/GroupFilter.java
Patch:
@@ -1,6 +1,6 @@
 package net.querz.mcaselector.filter;
 
-import net.querz.mcaselector.util.Point2i;
+import net.querz.mcaselector.point.Point2i;
 import java.util.ArrayList;
 import java.util.List;
 

File: src/main/java/net/querz/mcaselector/filter/InhabitedTimeFilter.java
Patch:
@@ -1,6 +1,6 @@
 package net.querz.mcaselector.filter;
 
-import net.querz.mcaselector.util.Helper;
+import net.querz.mcaselector.text.TextHelper;
 import net.querz.nbt.CompoundTag;
 
 public class InhabitedTimeFilter extends LongFilter {
@@ -24,7 +24,7 @@ public void setFilterValue(String raw) {
 		if (!isValid()) {
 			try {
 				//InhabitedTime is in ticks, not seconds
-				setFilterNumber(Helper.parseDuration(raw) * 20);
+				setFilterNumber(TextHelper.parseDuration(raw) * 20);
 				setValid(true);
 				setRawValue(raw);
 			} catch (IllegalArgumentException ex) {

File: src/main/java/net/querz/mcaselector/filter/LastUpdateFilter.java
Patch:
@@ -1,6 +1,6 @@
 package net.querz.mcaselector.filter;
 
-import net.querz.mcaselector.util.Helper;
+import net.querz.mcaselector.text.TextHelper;
 
 public class LastUpdateFilter extends IntegerFilter {
 
@@ -22,7 +22,7 @@ public void setFilterValue(String raw) {
 		super.setFilterValue(raw);
 		if (!isValid()) {
 			try {
-				setFilterNumber(Helper.parseTimestamp(raw));
+				setFilterNumber(TextHelper.parseTimestamp(raw));
 				setValid(true);
 				setRawValue(raw);
 			} catch (IllegalArgumentException ex) {

File: src/main/java/net/querz/mcaselector/filter/XPosFilter.java
Patch:
@@ -1,7 +1,6 @@
 package net.querz.mcaselector.filter;
 
-import net.querz.mcaselector.util.Helper;
-import net.querz.mcaselector.util.Point2i;
+import net.querz.mcaselector.point.Point2i;
 import net.querz.nbt.CompoundTag;
 
 public class XPosFilter extends IntegerFilter {
@@ -20,7 +19,7 @@ protected Integer getNumber(FilterData data) {
 	}
 
 	public boolean matchesRegion(Point2i region) {
-		Point2i chunk = Helper.regionToChunk(region);
+		Point2i chunk = region.regionToChunk();
 		for (int i = 0; i < 32; i++) {
 			Point2i p = chunk.add(i);
 			if (matches(getFilterNumber(), p.getX())) {

File: src/main/java/net/querz/mcaselector/filter/ZPosFilter.java
Patch:
@@ -1,7 +1,6 @@
 package net.querz.mcaselector.filter;
 
-import net.querz.mcaselector.util.Helper;
-import net.querz.mcaselector.util.Point2i;
+import net.querz.mcaselector.point.Point2i;
 import net.querz.nbt.CompoundTag;
 
 public class ZPosFilter extends IntegerFilter {
@@ -20,7 +19,7 @@ protected Integer getNumber(FilterData data) {
 	}
 
 	public boolean matchesRegion(Point2i region) {
-		Point2i chunk = Helper.regionToChunk(region);
+		Point2i chunk = region.regionToChunk();
 		for (int i = 0; i < 32; i++) {
 			Point2i p = chunk.add(i);
 			if (matches(getFilterNumber(), p.getY())) {

File: src/main/java/net/querz/mcaselector/github/VersionChecker.java
Patch:
@@ -1,4 +1,4 @@
-package net.querz.mcaselector.util;
+package net.querz.mcaselector.github;
 
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
@@ -9,7 +9,7 @@
 import java.net.URL;
 import java.util.Map;
 
-public class GithubVersionChecker {
+public class VersionChecker {
 
 	private static final String endpointTemplate = "https://api.github.com/repos/%s/%s/releases/latest";
 
@@ -18,7 +18,7 @@ public class GithubVersionChecker {
 	private String owner;
 	private String repository;
 
-	public GithubVersionChecker(String owner, String repository) {
+	public VersionChecker(String owner, String repository) {
 		this.owner = owner;
 		this.repository = repository;
 		ScriptEngineManager scriptEngineManager = new ScriptEngineManager();

File: src/main/java/net/querz/mcaselector/headless/ConsoleProgress.java
Patch:
@@ -1,7 +1,7 @@
 package net.querz.mcaselector.headless;
 
-import net.querz.mcaselector.util.Debug;
-import net.querz.mcaselector.util.Progress;
+import net.querz.mcaselector.debug.Debug;
+import net.querz.mcaselector.progress.Progress;
 import java.util.concurrent.atomic.AtomicInteger;
 
 public class ConsoleProgress implements Progress {

File: src/main/java/net/querz/mcaselector/io/LoadDataJob.java
Patch:
@@ -1,7 +1,7 @@
 package net.querz.mcaselector.io;
 
-import net.querz.mcaselector.util.Debug;
-import net.querz.mcaselector.util.Timer;
+import net.querz.mcaselector.debug.Debug;
+import net.querz.mcaselector.progress.Timer;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;

File: src/main/java/net/querz/mcaselector/io/MCAFilePipe.java
Patch:
@@ -1,7 +1,6 @@
 package net.querz.mcaselector.io;
 
-import javafx.application.Platform;
-import net.querz.mcaselector.util.Debug;
+import net.querz.mcaselector.debug.Debug;
 import java.util.Queue;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
@@ -150,7 +149,7 @@ public static void cancelAllJobs(Runnable callback) {
 					break;
 				}
 			}
-			Platform.runLater(callback);
+			callback.run();
 		});
 		thread.start();
 	}

File: src/main/java/net/querz/mcaselector/key/KeyActivator.java
Patch:
@@ -1,4 +1,4 @@
-package net.querz.mcaselector.util;
+package net.querz.mcaselector.key;
 
 import javafx.scene.input.KeyCode;
 import java.util.ArrayList;

File: src/main/java/net/querz/mcaselector/point/Point2f.java
Patch:
@@ -1,4 +1,4 @@
-package net.querz.mcaselector.util;
+package net.querz.mcaselector.point;
 
 import java.util.Objects;
 

File: src/main/java/net/querz/mcaselector/progress/Progress.java
Patch:
@@ -1,4 +1,4 @@
-package net.querz.mcaselector.util;
+package net.querz.mcaselector.progress;
 
 public interface Progress {
 

File: src/main/java/net/querz/mcaselector/progress/Timer.java
Patch:
@@ -1,4 +1,4 @@
-package net.querz.mcaselector.util;
+package net.querz.mcaselector.progress;
 
 public class Timer {
 

File: src/main/java/net/querz/mcaselector/property/DataProperty.java
Patch:
@@ -1,4 +1,4 @@
-package net.querz.mcaselector.util;
+package net.querz.mcaselector.property;
 
 public class DataProperty<T> {
 

File: src/main/java/net/querz/mcaselector/text/Translation.java
Patch:
@@ -1,8 +1,8 @@
-package net.querz.mcaselector.util;
+package net.querz.mcaselector.text;
 
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.property.StringProperty;
-
+import net.querz.mcaselector.debug.Debug;
 import java.io.*;
 import java.net.URISyntaxException;
 import java.net.URL;
@@ -70,6 +70,7 @@ public enum Translation {
 	DIALOG_IMPORT_CHUNKS_CONFIRMATION_OPTIONS("dialog.import_chunks_confirmation.options"),
 	DIALOG_IMPORT_CHUNKS_CONFIRMATION_OPTIONS_OFFSET("dialog.import_chunks_confirmation.options.offset"),
 	DIALOG_IMPORT_CHUNKS_CONFIRMATION_OPTIONS_OVERWRITE("dialog.import_chunks_confirmation.options.overwrite"),
+	DIALOG_IMPORT_CHUNKS_CONFIRMATION_WARNING("dialog.import_chunks_confirmation.warning"),
 	DIALOG_EXPORT_CHUNKS_CONFIRMATION_TITLE("dialog.export_chunks_confirmation.title"),
 	DIALOG_EXPORT_CHUNKS_CONFIRMATION_HEADER_SHORT("dialog.export_chunks_confirmation.header_short"),
 	DIALOG_EXPORT_CHUNKS_CONFIRMATION_HEADER_VERBOSE("dialog.export_chunks_confirmation.header_verbose"),

File: src/main/java/net/querz/mcaselector/ui/BorderedTitledPane.java
Patch:
@@ -4,7 +4,7 @@
 import javafx.scene.Node;
 import javafx.scene.control.Label;
 import javafx.scene.layout.StackPane;
-import net.querz.mcaselector.util.Translation;
+import net.querz.mcaselector.text.Translation;
 
 class BorderedTitledPane extends StackPane {
 

File: src/main/java/net/querz/mcaselector/ui/ChangeFieldsConfirmationDialog.java
Patch:
@@ -2,7 +2,7 @@
 
 import javafx.stage.Stage;
 import net.querz.mcaselector.tiles.TileMap;
-import net.querz.mcaselector.util.Translation;
+import net.querz.mcaselector.text.Translation;
 
 public class ChangeFieldsConfirmationDialog extends ConfirmationDialog {
 

File: src/main/java/net/querz/mcaselector/ui/ConfirmationDialog.java
Patch:
@@ -4,7 +4,7 @@
 import javafx.scene.control.ButtonType;
 import javafx.stage.Stage;
 import javafx.stage.StageStyle;
-import net.querz.mcaselector.util.Translation;
+import net.querz.mcaselector.text.Translation;
 
 public class ConfirmationDialog extends Alert {
 

File: src/main/java/net/querz/mcaselector/ui/DeleteConfirmationDialog.java
Patch:
@@ -2,7 +2,7 @@
 
 import javafx.stage.Stage;
 import net.querz.mcaselector.tiles.TileMap;
-import net.querz.mcaselector.util.Translation;
+import net.querz.mcaselector.text.Translation;
 
 public class DeleteConfirmationDialog extends ConfirmationDialog {
 

File: src/main/java/net/querz/mcaselector/ui/ExportConfirmationDialog.java
Patch:
@@ -2,7 +2,7 @@
 
 import javafx.stage.Stage;
 import net.querz.mcaselector.tiles.TileMap;
-import net.querz.mcaselector.util.Translation;
+import net.querz.mcaselector.text.Translation;
 
 public class ExportConfirmationDialog extends ConfirmationDialog {
 

File: src/main/java/net/querz/mcaselector/ui/FilterChunksDialog.java
Patch:
@@ -16,9 +16,8 @@
 import net.querz.mcaselector.filter.Operator;
 import net.querz.mcaselector.filter.XPosFilter;
 import net.querz.mcaselector.filter.ZPosFilter;
-import net.querz.mcaselector.util.Debug;
-import net.querz.mcaselector.util.Translation;
-import net.querz.mcaselector.util.UIFactory;
+import net.querz.mcaselector.debug.Debug;
+import net.querz.mcaselector.text.Translation;
 
 public class FilterChunksDialog extends Dialog<FilterChunksDialog.Result> {
 

File: src/main/java/net/querz/mcaselector/ui/GotoDialog.java
Patch:
@@ -4,8 +4,8 @@
 import javafx.scene.control.Dialog;
 import javafx.stage.Stage;
 import javafx.stage.StageStyle;
-import net.querz.mcaselector.util.Point2i;
-import net.querz.mcaselector.util.Translation;
+import net.querz.mcaselector.point.Point2i;
+import net.querz.mcaselector.text.Translation;
 
 public class GotoDialog extends Dialog<Point2i> {
 

File: src/main/java/net/querz/mcaselector/ui/GroupFilterBox.java
Patch:
@@ -5,9 +5,8 @@
 import net.querz.mcaselector.filter.GroupFilter;
 import net.querz.mcaselector.filter.NumberFilter;
 import net.querz.mcaselector.filter.TextFilter;
-import net.querz.mcaselector.util.Debug;
-import net.querz.mcaselector.util.Translation;
-import net.querz.mcaselector.util.UIFactory;
+import net.querz.mcaselector.debug.Debug;
+import net.querz.mcaselector.text.Translation;
 
 public class GroupFilterBox extends FilterBox {
 

File: src/main/java/net/querz/mcaselector/ui/LocationInput.java
Patch:
@@ -2,7 +2,7 @@
 
 import javafx.scene.control.TextField;
 import javafx.scene.layout.HBox;
-import net.querz.mcaselector.util.Point2i;
+import net.querz.mcaselector.point.Point2i;
 import java.util.function.Consumer;
 
 public class LocationInput extends HBox {

File: src/main/java/net/querz/mcaselector/ui/NumberFilterBox.java
Patch:
@@ -6,8 +6,7 @@
 import net.querz.mcaselector.filter.Comparator;
 import net.querz.mcaselector.filter.Filter;
 import net.querz.mcaselector.filter.NumberFilter;
-import net.querz.mcaselector.util.Translation;
-import net.querz.mcaselector.util.UIFactory;
+import net.querz.mcaselector.text.Translation;
 
 public class NumberFilterBox extends FilterBox {
 

File: src/main/java/net/querz/mcaselector/ui/ProgressTask.java
Patch:
@@ -4,8 +4,8 @@
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.property.StringProperty;
 import javafx.concurrent.Task;
-import net.querz.mcaselector.util.Progress;
-import net.querz.mcaselector.util.Translation;
+import net.querz.mcaselector.progress.Progress;
+import net.querz.mcaselector.text.Translation;
 
 public abstract class ProgressTask extends Task<Void> implements Progress {
 
@@ -47,7 +47,7 @@ public void done(String info) {
 
 	@Override
 	public void setMessage(String msg) {
-		infoProperty.setValue(msg);
+		Platform.runLater(() -> infoProperty.setValue(msg));
 	}
 
 	public void setIndeterminate(String info) {

File: src/main/java/net/querz/mcaselector/ui/TextFilterBox.java
Patch:
@@ -6,8 +6,7 @@
 import net.querz.mcaselector.filter.Comparator;
 import net.querz.mcaselector.filter.Filter;
 import net.querz.mcaselector.filter.TextFilter;
-import net.querz.mcaselector.util.Translation;
-import net.querz.mcaselector.util.UIFactory;
+import net.querz.mcaselector.text.Translation;
 
 public class TextFilterBox extends FilterBox {
 

File: src/main/java/net/querz/mcaselector/ui/TransparentStage.java
Patch:
@@ -10,7 +10,7 @@
 import javafx.stage.Modality;
 import javafx.stage.Stage;
 import javafx.stage.StageStyle;
-import net.querz.mcaselector.util.Debug;
+import net.querz.mcaselector.debug.Debug;
 
 public class TransparentStage extends Stage {
 

File: src/main/java/net/querz/mcaselector/ui/Window.java
Patch:
@@ -6,7 +6,7 @@
 import javafx.scene.layout.BorderPane;
 import javafx.stage.Stage;
 import net.querz.mcaselector.tiles.TileMap;
-import net.querz.mcaselector.util.Helper;
+import net.querz.mcaselector.io.FileHelper;
 import java.net.URL;
 import java.util.*;
 
@@ -20,7 +20,7 @@ public class Window extends Application {
 	@Override
 	public void start(Stage primaryStage) {
 		primaryStage.setTitle("MCA Selector");
-		primaryStage.getIcons().add(Helper.getIconFromResources("img/icon"));
+		primaryStage.getIcons().add(FileHelper.getIconFromResources("img/icon"));
 
 		TileMap tileMap = new TileMap(this, width, height);
 

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112ChunkFilter.java
Patch:
@@ -1,6 +1,6 @@
 package net.querz.mcaselector.version.anvil112;
 
-import net.querz.mcaselector.util.Debug;
+import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.version.ChunkFilter;
 import net.querz.nbt.CompoundTag;
 import net.querz.nbt.ListTag;

File: src/main/java/net/querz/mcaselector/version/anvil113/Anvil113ColorMapping.java
Patch:
@@ -1,8 +1,8 @@
 package net.querz.mcaselector.version.anvil113;
 
-import net.querz.mcaselector.util.Debug;
+import net.querz.mcaselector.text.TextHelper;
+import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.version.ColorMapping;
-import net.querz.mcaselector.util.Helper;
 import net.querz.nbt.CompoundTag;
 import net.querz.nbt.StringTag;
 import net.querz.nbt.Tag;
@@ -32,7 +32,7 @@ public Anvil113ColorMapping() {
 					Debug.dumpf("invalid line in color file: \"%s\"", line);
 					continue;
 				}
-				Integer color = Helper.parseInt(elements[1], 16);
+				Integer color = TextHelper.parseInt(elements[1], 16);
 				if (color == null || color < 0x0 || color > 0xFFFFFF) {
 					Debug.dumpf("Invalid color code in color file: \"%s\"", elements[1]);
 				}

File: src/main/java/net/querz/mcaselector/headless/ParamExecutor.java
Patch:
@@ -352,7 +352,7 @@ private static void checkDirectoryIsEmpty(File dir) {
 	}
 
 	private static void createParentDirectoryIfNotExists(File file) throws IOException {
-		if (!file.getParentFile().exists() && !file.getParentFile().mkdirs()) {
+		if (file.getParentFile() != null && !file.getParentFile().exists() && !file.getParentFile().mkdirs()) {
 			throw new IOException("unable to create directory for \"" + file + "\"");
 		}
 	}

File: src/main/java/net/querz/mcaselector/io/MCAFilePipe.java
Patch:
@@ -1,6 +1,5 @@
 package net.querz.mcaselector.io;
 
-import javafx.application.Platform;
 import net.querz.mcaselector.debug.Debug;
 import java.util.Queue;
 import java.util.concurrent.LinkedBlockingQueue;
@@ -150,7 +149,7 @@ public static void cancelAllJobs(Runnable callback) {
 					break;
 				}
 			}
-			Platform.runLater(callback);
+			callback.run();
 		});
 		thread.start();
 	}

File: src/main/java/net/querz/mcaselector/io/RegionImageGenerator.java
Patch:
@@ -4,6 +4,7 @@
 import javafx.scene.image.Image;
 import net.querz.mcaselector.Config;
 import net.querz.mcaselector.tiles.Tile;
+import net.querz.mcaselector.tiles.TileImage;
 import net.querz.mcaselector.ui.ImageHelper;
 import net.querz.mcaselector.debug.Debug;
 import net.querz.mcaselector.point.Point2i;
@@ -102,7 +103,7 @@ public static class MCAImageProcessJob extends ProcessDataJob {
 
 		@Override
 		public void execute() {
-			Image image = tile.generateImage(callback, getData());
+			Image image = TileImage.generateImage(tile, callback, getData());
 			if (image != null) {
 				MCAFilePipe.executeSaveData(new MCAImageSaveCacheJob(getFile(), image, tile, scaleSupplier, scaleOnly, progressChannel));
 			} else {

File: src/main/java/net/querz/mcaselector/tiles/TileMap.java
Patch:
@@ -416,7 +416,7 @@ private void mark(double mouseX, double mouseY, boolean marked) {
 					}
 				}
 			}
-			changedTiles.forEach(tile -> tile.createMarkedChunksImage(getZoomLevel()));
+			changedTiles.forEach(tile -> TileImage.createMarkedChunksImage(tile, getZoomLevel()));
 		}
 	}
 
@@ -436,7 +436,7 @@ private void draw(GraphicsContext ctx) {
 				RegionImageGenerator.generate(tile, () -> Platform.runLater(this::update), this::getScale, false, false, null);
 			}
 			Point2f p = new Point2f(regionOffset.getX() / scale, regionOffset.getY() / scale);
-			tile.draw(ctx, scale, p);
+			TileImage.draw(tile, ctx, scale, p);
 		});
 
 		if (showRegionGrid) {

File: src/main/java/net/querz/mcaselector/ui/ProgressDialog.java
Patch:
@@ -1,5 +1,6 @@
 package net.querz.mcaselector.ui;
 
+import javafx.application.Platform;
 import javafx.scene.Scene;
 import javafx.scene.control.Button;
 import javafx.scene.control.Label;
@@ -44,10 +45,10 @@ public ProgressDialog(Translation title, Stage primaryStage) {
 		cancel.setOnAction(e -> {
 			currentTask.setLocked(true);
 			currentTask.setIndeterminate(Translation.DIALOG_PROGRESS_CANCELLING.toString());
-			MCAFilePipe.cancelAllJobs(() -> {
+			MCAFilePipe.cancelAllJobs(() -> Platform.runLater(() -> {
 				currentTask.done(Translation.DIALOG_PROGRESS_DONE.toString());
 				close();
-			});
+			}));
 		});
 
 		progressBar.prefWidthProperty().bind(box.widthProperty());

File: src/main/java/net/querz/mcaselector/ui/ProgressTask.java
Patch:
@@ -47,7 +47,7 @@ public void done(String info) {
 
 	@Override
 	public void setMessage(String msg) {
-		infoProperty.setValue(msg);
+		Platform.runLater(() -> infoProperty.setValue(msg));
 	}
 
 	public void setIndeterminate(String info) {

File: src/main/java/net/querz/mcaselector/tiles/Tile.java
Patch:
@@ -84,7 +84,7 @@ public Point2i getLocation() {
 	}
 
 	public boolean isEmpty() {
-		return isLoaded() && (image == null || image == empty);
+		return image == null || image == empty;
 	}
 
 	public boolean isLoaded() {
@@ -261,7 +261,6 @@ public void loadFromCache(Runnable callback, Supplier<Float> scaleSupplier) {
 			callback.run();
 		} catch (IOException ex) {
 			Debug.dump("region " + location + " not cached");
-			//do nothing
 		}
 	}
 

File: src/main/java/net/querz/mcaselector/tiles/TileMap.java
Patch:
@@ -262,6 +262,7 @@ public void clearTile(Point2i p) {
 			visibleTiles.remove(tile);
 			selectedChunks -= tile.getMarkedChunks().size();
 			selectedChunks -= tile.isMarked() ? Tile.CHUNKS : 0;
+			tile.unload();
 		}
 	}
 

File: src/main/java/net/querz/mcaselector/util/Helper.java
Patch:
@@ -412,7 +412,7 @@ public static void clearSelectionCache(TileMap tileMap) {
 						Debug.error("could not delete file " + file);
 					}
 				}
-				tileMap.clearTile(Helper.regionToBlock(entry.getKey()));
+				tileMap.clearTile(entry.getKey());
 			}
 		}
 		tileMap.update();

File: src/main/java/net/querz/mcaselector/Config.java
Patch:
@@ -193,7 +193,6 @@ public static int getProcessThreads() {
 	}
 
 	public static void setProcessThreads(int processThreads) {
-		System.out.println("setting process threads to " + processThreads);
 		Config.processThreads = processThreads;
 	}
 

File: src/main/java/net/querz/mcaselector/Config.java
Patch:
@@ -193,6 +193,7 @@ public static int getProcessThreads() {
 	}
 
 	public static void setProcessThreads(int processThreads) {
+		System.out.println("setting process threads to " + processThreads);
 		Config.processThreads = processThreads;
 	}
 

File: src/main/java/net/querz/mcaselector/Main.java
Patch:
@@ -17,7 +17,7 @@ public static void main(String[] args) throws ExecutionException, InterruptedExc
 		Future<Boolean> headless = new ParamExecutor(args).parseAndRun();
 		if (headless != null && headless.get()) {
 			// we already ran headless mode, so we exit here
-			System.out.println("exiting");
+			Debug.print("exiting");
 			System.exit(0);
 		}
 

File: src/main/java/net/querz/mcaselector/headless/ChangeParser.java
Patch:
@@ -2,7 +2,6 @@
 
 import net.querz.mcaselector.changer.Field;
 import net.querz.mcaselector.changer.FieldType;
-
 import java.util.ArrayList;
 import java.util.List;
 

File: src/main/java/net/querz/mcaselector/headless/ConsoleProgress.java
Patch:
@@ -1,7 +1,7 @@
 package net.querz.mcaselector.headless;
 
+import net.querz.mcaselector.util.Debug;
 import net.querz.mcaselector.util.Progress;
-
 import java.util.concurrent.atomic.AtomicInteger;
 
 public class ConsoleProgress implements Progress {
@@ -46,14 +46,14 @@ public void incrementProgress(String msg, int progress) {
 
 	@Override
 	public void setMessage(String msg) {
-		System.out.println(msg);
+		Debug.print(msg);
 	}
 
 	public void onDone(Runnable doneAction) {
 		this.doneAction = doneAction;
 	}
 
 	private void printProgress(String msg) {
-		System.out.printf("%.2f%%\t%s\n", ((double) progress.get() / max * 100), msg);
+		Debug.printf("%.2f%%\t%s", ((double) progress.get() / max * 100), msg);
 	}
 }

File: src/main/java/net/querz/mcaselector/headless/FilterParser.java
Patch:
@@ -30,7 +30,7 @@ public GroupFilter parse() throws ParseException {
 
 			ptr.skipWhitespace();
 
-			//parse group
+			// parse group
 			if (ptr.currentChar() == '(') {
 				ptr.next();
 				GroupFilter child = parse();
@@ -51,7 +51,7 @@ public GroupFilter parse() throws ParseException {
 	}
 
 	private Filter<?> parseFilterType(Operator operator) throws ParseException {
-		//parse value
+		// parse value
 		String type = ptr.parseSimpleString();
 		FilterType t = FilterType.getByName(type);
 

File: src/main/java/net/querz/mcaselector/filter/BiomeFilter.java
Patch:
@@ -110,12 +110,12 @@ public void setFilterValue(String raw) {
 
 	@Override
 	public String toString(FilterData data) {
-		return "BiomeFilter " + getComparator() + " <data>";
+		return "BiomeFilter " + getComparator().getQueryString() + " <data>";
 	}
 
 	@Override
 	public String toString() {
-		return "Biome " + getComparator() + " " + (getFilterValue() != null ? Arrays.toString(getFilterValue().toArray()) : "null");
+		return "Biome " + getComparator().getQueryString() + " \"" + getRawValue() + "\"";
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/filter/NumberFilter.java
Patch:
@@ -62,12 +62,12 @@ public boolean matches(FilterData data) {
 
 	@Override
 	public String toString(FilterData data) {
-		return getFilterValue() + " " + comparator + " " + getNumber(data);
+		return getFilterValue() + " " + comparator.getQueryString() + " " + getNumber(data);
 	}
 
 	@Override
 	public String toString() {
-		return getType() + " " + comparator + " " + getFilterValue();
+		return getType() + " " + comparator.getQueryString() + " " + getFilterValue();
 	}
 
 	public abstract String getFormatText();

File: src/main/java/net/querz/mcaselector/filter/StatusFilter.java
Patch:
@@ -62,12 +62,12 @@ public void setFilterValue(String raw) {
 	@Override
 	public String toString(FilterData data) {
 		StringTag tag = data.getChunk().getCompoundTag("Level").getStringTag("Status");
-		return getFilterValue() + " " + getComparator() + " " + (tag == null ? "null" : tag.getValue());
+		return getFilterValue() + " " + getComparator().getQueryString() + " " + (tag == null ? "null" : tag.getValue());
 	}
 
 	@Override
 	public String toString() {
-		return "Status " + getComparator() + " " + (getFilterValue() != null ? getFilterValue() : "null");
+		return "Status " + getComparator().getQueryString() + " " + getFilterValue();
 	}
 
 	@Override

File: src/main/java/net/querz/mcaselector/headless/ParamExecutor.java
Patch:
@@ -105,6 +105,7 @@ private void parseConfig(Map<String, String> params) throws IOException {
 		Config.setLoadThreads(parsePositiveInt(params.getOrDefault("read-threads", "" + Config.DEFAULT_LOAD_THREADS)));
 		Config.setProcessThreads(parsePositiveInt(params.getOrDefault("process-threads", "" + Config.DEFAULT_PROCESS_THREADS)));
 		Config.setWriteThreads(parsePositiveInt(params.getOrDefault("write-threads", "" + Config.DEFAULT_WRITE_THREADS)));
+		Config.setMaxLoadedFiles(parsePositiveInt(params.getOrDefault("max-loaded-files", "" + Config.DEFAULT_MAX_LOADED_FILES)));
 	}
 
 	private static void runModeCache(Map<String, String> params, FutureTask<Boolean> future) throws IOException {

File: src/main/java/net/querz/mcaselector/ui/FilterChunksDialog.java
Patch:
@@ -68,7 +68,9 @@ public FilterChunksDialog(Stage primaryStage) {
 
 		groupFilterBox.setOnUpdate(f -> {
 			getDialogPane().lookupButton(ButtonType.OK).setDisable(!value.isValid());
-			Debug.dump(value);
+			if (value.isValid()) {
+				Debug.dump(value);
+			}
 		});
 
 		VBox actionBox = new VBox();

File: src/main/java/net/querz/mcaselector/ui/OptionBar.java
Patch:
@@ -101,8 +101,8 @@ public OptionBar(TileMap tileMap, Stage primaryStage) {
 		filterChunks.setAccelerator(KeyCombination.keyCombination("Ctrl+F"));
 		changeFields.setAccelerator(KeyCombination.keyCombination("Ctrl+N"));
 
-		setSelectionDependentMenuItemsEnabled(false);
-		setWorldDependentMenuItemsEnabled(false);
+//		setSelectionDependentMenuItemsEnabled(false);
+//		setWorldDependentMenuItemsEnabled(false);
 	}
 
 	private void onUpdate(TileMap tileMap) {

File: src/main/java/net/querz/mcaselector/ui/ImportConfirmationDialog.java
Patch:
@@ -37,6 +37,8 @@ public ImportConfirmationDialog(Stage primaryStage, Consumer<ChunkImportConfirma
 		});
 
 		overwrite.setSelected(true);
+
+		data.offset = locationInput.getValue();
 		data.overwrite = true;
 		dataAction.accept(data);
 
@@ -54,6 +56,7 @@ public ImportConfirmationDialog(Stage primaryStage, Consumer<ChunkImportConfirma
 		content.getStyleClass().add("import-confirmation-dialog-content");
 		content.getChildren().addAll(options, contentLabel);
 		getDialogPane().setContent(content);
+
 	}
 
 	private void setOverwriteCheckbox(CheckBox checkbox, Consumer<ChunkImportConfirmationData> action, ChunkImportConfirmationData data, boolean status) {

File: src/main/java/net/querz/mcaselector/ui/LocationInput.java
Patch:
@@ -20,6 +20,7 @@ public LocationInput(boolean emptyIsZero) {
 
 		if (emptyIsZero) {
 			x = z = 0;
+			value = new Point2i(0, 0);
 		}
 
 		getStyleClass().add("location-input");

File: src/main/java/net/querz/mcaselector/ui/OptionBar.java
Patch:
@@ -41,7 +41,7 @@ public class OptionBar extends MenuBar {
 	private MenuItem exportSelection = UIFactory.menuItem(Translation.MENU_SELECTION_EXPORT_SELECTION);
 	private MenuItem clearSelectionCache = UIFactory.menuItem(Translation.MENU_SELECTION_CLEAR_CACHE);
 	private MenuItem filterChunks = UIFactory.menuItem(Translation.MENU_TOOLS_FILTER_CHUNKS);
-	private MenuItem changeFields = UIFactory.menuItem(Translation.MENU_TOOLS_FILTER_CHUNKS);
+	private MenuItem changeFields = UIFactory.menuItem(Translation.MENU_TOOLS_CHANGE_FIELDS);
 
 	private int previousSelectedChunks = 0;
 

File: src/main/java/net/querz/mcaselector/ui/ProgressDialog.java
Patch:
@@ -18,20 +18,20 @@
 
 public class ProgressDialog extends Stage {
 
-	private Label title = UIFactory.label(Translation.DIALOG_PROGRESS_TITLE);
+	private Label title = new Label();
 	private ProgressBar progressBar = new ProgressBar(-1);
 	private Label label = UIFactory.label(Translation.DIALOG_PROGRESS_RUNNING);
 	private Button cancel = UIFactory.button(Translation.BUTTON_CANCEL);
 
 	private ProgressTask currentTask;
 
-	public ProgressDialog(String title, Stage primaryStage) {
+	public ProgressDialog(Translation title, Stage primaryStage) {
 		initStyle(StageStyle.TRANSPARENT);
 		setResizable(false);
 		initModality(Modality.APPLICATION_MODAL);
 		initOwner(primaryStage);
 
-		this.title.setText(title);
+		this.title.textProperty().bind(title.getProperty());
 		this.title.getStyleClass().add("progress-title");
 
 		label.getStyleClass().add("progress-info");

File: src/main/java/net/querz/mcaselector/util/UIFactory.java
Patch:
@@ -21,7 +21,7 @@ public static Menu menu(Translation translation) {
 	}
 
 	public static MenuItem menuItem(Translation translation) {
-		MenuItem item = new Menu();
+		MenuItem item = new MenuItem();
 		item.textProperty().bind(translation.getProperty());
 		return item;
 	}

File: src/main/java/net/querz/mcaselector/Config.java
Patch:
@@ -4,7 +4,6 @@
 import net.querz.mcaselector.util.Debug;
 import net.querz.mcaselector.util.Helper;
 import net.querz.mcaselector.util.Translation;
-
 import java.io.*;
 import java.nio.file.Files;
 import java.util.*;

File: src/main/java/net/querz/mcaselector/Main.java
Patch:
@@ -3,7 +3,6 @@
 import net.querz.mcaselector.ui.Window;
 import net.querz.mcaselector.util.Debug;
 import net.querz.mcaselector.util.Translation;
-
 import java.util.Locale;
 
 public class Main {

File: src/main/java/net/querz/mcaselector/io2/RegionImageGenerator.java
Patch:
@@ -20,7 +20,9 @@
 public class RegionImageGenerator {
 
 	public static void generate(Tile tile, TileMap tileMap) {
-
+		tile.setLoading(true);
+		tile.setLoaded(false);
+		JobExecutor.addLoadDataJob(new RegionImageGeneratorLoadDataJob(tile, tileMap));
 	}
 
 	public static class RegionImageGeneratorLoadDataJob extends LoadDataJob {

File: src/main/java/net/querz/mcaselector/io/ChunkFilterSelector.java
Patch:
@@ -111,7 +111,7 @@ public void execute() {
 					Debug.dumpf("took %s to delete chunk indices in %s", t, getFile().getName());
 				}
 			} catch (Exception ex) {
-				Debug.errorf("error deleting chunk indices in %s", getFile().getName());
+				Debug.errorf("error selecting chunks in %s", getFile().getName());
 			}
 			progressChannel.incrementProgress(getFile().getName());
 		}

File: src/main/java/net/querz/mcaselector/Main.java
Patch:
@@ -9,7 +9,8 @@ public class Main {
 	public static void main(String[] args) {
 		Locale.setDefault(Locale.ENGLISH);
 		Config.importArgs(args);
-		Debug.dump("java version: " + System.getProperty("java.version"));
+		Debug.dumpf("java version: %s", System.getProperty("java.version"));
+		Debug.dumpf("jvm max mem:  %d", Runtime.getRuntime().maxMemory());
 		Window.launch(Window.class, args);
 	}
 }

File: src/main/java/net/querz/mcaselector/ui/Window.java
Patch:
@@ -4,6 +4,7 @@
 import javafx.scene.Scene;
 import javafx.scene.input.KeyCode;
 import javafx.scene.layout.BorderPane;
+import javafx.scene.paint.Color;
 import javafx.stage.Stage;
 import net.querz.mcaselector.tiles.TileMap;
 import net.querz.mcaselector.util.Helper;

File: src/main/java/net/querz/mcaselector/tiles/Tile.java
Patch:
@@ -236,6 +236,7 @@ public void loadFromCache(TileMap tileMap) {
 		if (Config.getCacheDir() == null) {
 			//load empty map (start screen)
 			loaded = true;
+			Platform.runLater(tileMap::update);
 			return;
 		}
 
@@ -246,11 +247,11 @@ public void loadFromCache(TileMap tileMap) {
 		try (InputStream inputStream = new FileInputStream(res)) {
 			image = new Image(inputStream);
 			loaded = true;
+			Platform.runLater(tileMap::update);
 		} catch (IOException ex) {
 			Debug.dump("region " + p + " not cached");
 			//do nothing
 		}
-		Platform.runLater(tileMap::update);
 	}
 
 	public Image generateImage(TileMap tileMap, byte[] rawData) {

File: src/main/java/net/querz/mcaselector/io/MCAFilePipe.java
Patch:
@@ -82,10 +82,10 @@ static void refillDataLoadExecutorQueue() {
 	public static void addJob(LoadDataJob job) {
 		if (processDataExecutor.getQueue().size() + loadDataExecutor.getQueue().size() > MAX_LOADED_FILES
 				|| saveDataExecutor.getQueue().size() > MAX_LOADED_FILES) {
-			Debug.dumpf("adding DataLoadJob for %s to wait queue", job.getFile().getName());
+			Debug.dumpf("adding DataLoadJob %s for %s to wait queue", job, job.getFile().getName());
 			waitingForLoad.offer(job);
 		} else {
-			Debug.dumpf("adding DataLoadJob for %s to executor queue", job.getFile().getName());
+			Debug.dumpf("adding DataLoadJob %s for %s to executor queue", job, job.getFile().getName());
 			loadDataExecutor.execute(job);
 		}
 	}

File: src/main/java/net/querz/mcaselector/io/SelectionExporter.java
Patch:
@@ -77,7 +77,6 @@ public static Map<Point2i, Set<Point2i>> importSelection(File file) {
 		return chunks;
 	}
 
-	//TODO: progressChannel
 	public static void exportSelectedChunks(Map<Point2i, Set<Point2i>> chunks, File dir, ProgressTask progressChannel) {
 		double filesCount = chunks.size();
 		int i = 0;

File: src/main/java/net/querz/mcaselector/ui/NumberFilterBox.java
Patch:
@@ -17,7 +17,7 @@ public NumberFilterBox(FilterBox parent, NumberFilter filter, boolean root) {
 		getStyleClass().add("number-filter-box");
 		input.setPromptText(filter.getFormatText());
 		input.textProperty().addListener((a, b, c) -> onTextInput(filter, c));
-		input.setAlignment(Pos.TOP_CENTER);
+		input.setAlignment(Pos.CENTER);
 
 		comparator.getItems().addAll(filter.getComparators());
 		comparator.getSelectionModel().select(filter.getComparator());

File: src/main/java/net/querz/mcaselector/ui/TextFilterBox.java
Patch:
@@ -17,7 +17,7 @@ public TextFilterBox(FilterBox parent, TextFilter filter, boolean root) {
 		getStyleClass().add("text-filter-box");
 		input.setPromptText(filter.getFormatText());
 		input.textProperty().addListener((a, b, c) -> onTextInput(filter, c));
-		input.setAlignment(Pos.TOP_CENTER);
+		input.setAlignment(Pos.CENTER);
 
 		comparator.getItems().addAll(filter.getComparators());
 		comparator.getSelectionModel().select(filter.getComparator());

File: src/main/java/net/querz/mcaselector/version/anvil113/Anvil113ChunkDataProcessor.java
Patch:
@@ -13,6 +13,9 @@ public class Anvil113ChunkDataProcessor implements ChunkDataProcessor {
 	@Override
 	public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z, PixelWriter writer) {
 		ListTag sections = (ListTag) ((CompoundTag) root.get("Level")).get("Sections");
+		if ("empty".equals(((CompoundTag) root.get("Level")).getString("Status"))) {
+			return;
+		}
 		sections.getValue().sort(this::filterSections);
 
 		for (int cx = 0; cx < Tile.CHUNK_SIZE; cx++) {

File: src/main/java/net/querz/mcaselector/ui/NumberFilterBox.java
Patch:
@@ -16,7 +16,6 @@ public NumberFilterBox(FilterBox parent, NumberFilter filter, boolean root) {
 		super(parent, filter, root);
 		getStyleClass().add("number-filter-box");
 		input.setPromptText(filter.getFormatText());
-		input.setText(filter.getFilterValue().toString());
 		input.textProperty().addListener((a, b, c) -> onTextInput(filter, c));
 		input.setAlignment(Pos.TOP_CENTER);
 

File: src/main/java/net/querz/mcaselector/ui/TextFilterBox.java
Patch:
@@ -16,7 +16,6 @@ public TextFilterBox(FilterBox parent, TextFilter filter, boolean root) {
 		super(parent, filter, root);
 		getStyleClass().add("text-filter-box");
 		input.setPromptText(filter.getFormatText());
-		input.setText(filter.getRawValue());
 		input.textProperty().addListener((a, b, c) -> onTextInput(filter, c));
 		input.setAlignment(Pos.TOP_CENTER);
 
@@ -38,7 +37,6 @@ public void setText(String text) {
 	}
 
 	private void onTextInput(Filter filter, String newValue) {
-		System.out.println("input");
 		filter.setFilterValue(newValue);
 		if (!filter.isValid()) {
 			if (!getStyleClass().contains("text-filter-box-invalid")) {

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112ChunkFilter.java
Patch:
@@ -20,7 +20,7 @@ public class Anvil112ChunkFilter implements ChunkFilter {
 
 	public Anvil112ChunkFilter() {
 		try (BufferedReader bis = new BufferedReader(
-				new InputStreamReader(Anvil112ColorMapping.class.getClass().getResourceAsStream("/block-id-mapping.csv")))) {
+				new InputStreamReader(Anvil112ChunkFilter.class.getClassLoader().getResourceAsStream("block-id-mapping.csv")))) {
 			String line;
 			while ((line = bis.readLine()) != null) {
 				line = line.trim();

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112ColorMapping.java
Patch:
@@ -12,7 +12,7 @@ public class Anvil112ColorMapping implements ColorMapping {
 
 	public Anvil112ColorMapping() {
 		try (BufferedReader bis = new BufferedReader(
-				new InputStreamReader(Anvil112ColorMapping.class.getClass().getResourceAsStream("/colors112.csv")))) {
+				new InputStreamReader(Anvil112ColorMapping.class.getClassLoader().getResourceAsStream("colors112.csv")))) {
 			String line;
 			while ((line = bis.readLine()) != null) {
 				String[] elements = line.split(";");

File: src/main/java/net/querz/mcaselector/version/anvil113/Anvil113ColorMapping.java
Patch:
@@ -19,7 +19,7 @@ public class Anvil113ColorMapping implements ColorMapping {
 	public Anvil113ColorMapping() {
 		// note_block:pitch=1,powered=true,instrument=flute;01ab9f
 		try (BufferedReader bis = new BufferedReader(
-				new InputStreamReader(Anvil112ColorMapping.class.getClass().getResourceAsStream("/colors113.csv")))) {
+				new InputStreamReader(Anvil113ColorMapping.class.getClassLoader().getResourceAsStream("colors113.csv")))) {
 			String line;
 			while ((line = bis.readLine()) != null) {
 				String[] elements = line.split(";");

File: src/main/java/net/querz/mcaselector/filter/structure/IntegerFilter.java
Patch:
@@ -16,7 +16,7 @@ Integer getFilterNumber() {
 
 	@Override
 	public boolean setFilterValue(String raw) {
-		if (raw == null || raw.isEmpty()) {
+		if (raw == null || raw.isEmpty() || raw.equals("-") || raw.equals("+")) {
 			value = 0;
 			return true;
 		} else {

File: src/main/java/net/querz/mcaselector/filter/structure/LongFilter.java
Patch:
@@ -16,7 +16,7 @@ Long getFilterNumber() {
 
 	@Override
 	public boolean setFilterValue(String raw) {
-		if (raw == null || raw.isEmpty()) {
+		if (raw == null || raw.isEmpty() || raw.equals("-") || raw.equals("+")) {
 			value = 0;
 			return true;
 		} else {

File: src/main/java/net/querz/mcaselector/util/Helper.java
Patch:
@@ -239,11 +239,13 @@ public static void filterChunks(TileMap tileMap, Stage primaryStage) {
 				pd.show();
 				MCALoader.deleteChunks(r.getFilter(), pd::updateProgress);
 				clearAllCache(tileMap);
+				break;
 			case EXPORT:
 				System.out.println("export");
 				File dir = createDirectoryChooser(null).showDialog(primaryStage);
 				pd.show();
 				SelectionExporter.exportFilteredChunks(r.getFilter(), dir, pd::updateProgress);
+				break;
 			default:
 				Debug.dump("i have no idea how you got no selection there...");
 			}

File: src/main/java/net/querz/mcaselector/Main.java
Patch:
@@ -1,8 +1,11 @@
 package net.querz.mcaselector;
 
+import java.util.Locale;
+
 public class Main {
 
 	public static void main(String[] args) {
+		Locale.setDefault(Locale.ENGLISH);
 		Config.importArgs(args);
 		Window.launch(Window.class, args);
 	}

File: src/main/java/net/querz/mcaselector/Window.java
Patch:
@@ -7,6 +7,7 @@
 import javafx.stage.Stage;
 import net.querz.mcaselector.tiles.TileMap;
 import net.querz.mcaselector.tiles.TileMapBox;
+import net.querz.mcaselector.util.Helper;
 import java.net.URL;
 import java.util.*;
 
@@ -20,6 +21,7 @@ public class Window extends Application {
 	@Override
 	public void start(Stage primaryStage) {
 		primaryStage.setTitle("MCA Selector");
+		primaryStage.getIcons().add(Helper.getIconFromResources("img/icon"));
 
 		TileMap tileMap = new TileMap(this, width, height);
 

File: src/main/java/net/querz/mcaselector/filter/structure/Comparator.java
Patch:
@@ -1,6 +1,7 @@
 package net.querz.mcaselector.filter.structure;
 
 public enum Comparator {
+
 	EQ("=="),
 	NEQ("!="),
 	ST("<"),

File: src/main/java/net/querz/mcaselector/filter/GroupFilterBox.java
Patch:
@@ -18,10 +18,10 @@ public GroupFilterBox(FilterBox parent, GroupFilter filter, boolean root) {
 			getStyleClass().add("group-filter-box");
 		}
 
-		if (!filter.getFilterValue().isEmpty()) {
-			typeComboBox.setDisable(true);
+		if (!filter.getFilterValue().isEmpty() || root && parent == null) {
+			type.setDisable(true);
 		} else {
-			typeComboBox.setDisable(false);
+			type.setDisable(false);
 		}
 
 		for (Filter f : filter.getFilterValue()) {

File: src/main/java/net/querz/mcaselector/io/SelectionExporter.java
Patch:
@@ -103,7 +103,7 @@ public static void exportSelectedChunks(Map<Point2i, Set<Point2i>> chunks, File
 				}
 				Map<Point2i, Set<Point2i>> inverted = new HashMap<>(1);
 				inverted.put(entry.getKey(), c);
-				MCALoader.deleteChunks(inverted, dir, false);
+				MCALoader.deleteChunks(inverted, (s, d) -> {}, dir, false);
 			}
 		}
 	}

File: src/main/java/net/querz/mcaselector/version/VersionController.java
Patch:
@@ -4,6 +4,8 @@
 import net.querz.mcaselector.ColorMapping;
 import net.querz.mcaselector.version.anvil112.Anvil112ChunkDataProcessor;
 import net.querz.mcaselector.version.anvil112.Anvil112ColorMapping;
+import net.querz.mcaselector.version.anvil113.Anvil113ChunkDataProcessor;
+import net.querz.mcaselector.version.anvil113.Anvil113ColorMapping;
 
 public class VersionController {
 
@@ -19,7 +21,7 @@ public static ColorMapping getColorMapping(int dataVersion) {
 
 	private enum Mapping {
 		ANVIL_1_12(0, 1343, new Anvil112ChunkDataProcessor(), new Anvil112ColorMapping()),
-		ANVIL_1_13(1344, Integer.MAX_VALUE, null, null); //TODO
+		ANVIL_1_13(1344, Integer.MAX_VALUE, new Anvil113ChunkDataProcessor(), new Anvil113ColorMapping());
 
 		private int from, to;
 		private ChunkDataProcessor cdp;

File: src/main/java/net/querz/mcaselector/ColorMapping.java
Patch:
@@ -2,5 +2,6 @@
 
 public interface ColorMapping {
 
+	//returns a color based on the block data given as the parameter
 	int getRGB(Object o);
 }

File: src/main/java/net/querz/mcaselector/version/anvil112/Anvil112ChunkDataProcessor.java
Patch:
@@ -17,7 +17,8 @@ public void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z,
 
 		//loop over x / z
 		for (int cx = 0; cx < Tile.CHUNK_SIZE; cx++) {
-			zLoop: for (int cz = 0; cz < Tile.CHUNK_SIZE; cz++) {
+			zLoop:
+			for (int cz = 0; cz < Tile.CHUNK_SIZE; cz++) {
 				//loop over sections
 				for (int i = 0; i < sections.size(); i++) {
 

File: src/main/java/net/querz/mcaselector/tiles/Tile.java
Patch:
@@ -15,7 +15,6 @@
 import net.querz.mcaselector.util.Point2f;
 import net.querz.mcaselector.util.Point2i;
 import javax.imageio.ImageIO;
-import java.awt.image.BufferedImage;
 import java.io.*;
 import java.util.HashSet;
 import java.util.Set;
@@ -31,6 +30,7 @@ public class Tile {
 	public static final Color CHUNK_MARKED_COLOR = new Color(1, 0.45, 0, 0.8);
 	public static final Color REGION_GRID_COLOR = Color.BLACK;
 	public static final Color CHUNK_GRID_COLOR = Color.DARKGRAY;
+	public static final Color EMPTY_CHUNK_BACKGROUND_COLOR = Color.BLACK;
 	public static final double GRID_LINE_WIDTH = 0.5;
 
 	private static final Image empty;

File: src/main/java/net/querz/mcaselector/tiles/TileMap.java
Patch:
@@ -311,6 +311,8 @@ private void mark(double mouseX, double mouseY, boolean marked) {
 	}
 
 	private void draw(GraphicsContext ctx) {
+		ctx.setFill(Tile.EMPTY_CHUNK_BACKGROUND_COLOR);
+		ctx.fillRect(0, 0, getWidth(), getHeight());
 		runOnVisibleRegions(region -> {
 			if (!tiles.containsKey(region)) {
 				tiles.put(region, new Tile(region));

File: src/main/java/net/querz/mcaselector/StatusBar.java
Patch:
@@ -16,7 +16,7 @@ public class StatusBar extends BorderPane {
 
 
 	public StatusBar(TileMap tileMap) {
-		setId("status-bar");
+		getStyleClass().add("status-bar");
 
 		tileMap.setOnUpdate(this::update);
 		tileMap.setOnHover(this::update);

File: src/main/java/net/querz/mcaselector/Window.java
Patch:
@@ -34,7 +34,7 @@ public void start(Stage primaryStage) {
 
 		//tilemap
 		HBox tileMapBox = new HBox();
-		tileMapBox.setId("tile-map-box");
+		tileMapBox.getStyleClass().add("tile-map-box");
 		ChangeListener<Number> sizeListener = (o, r, n) -> {
 			tileMap.resize(primaryStage.getWidth(), primaryStage.getHeight());
 			Debug.dump("resizing to " + primaryStage.getWidth() + " " + primaryStage.getHeight());

File: src/main/java/net/querz/mcaselector/Main.java
Patch:
@@ -3,6 +3,7 @@
 public class Main {
 
 	public static void main(String[] args) {
+		Config.importArgs(args);
 		Window.launch(Window.class, args);
 	}
 }

File: src/main/java/net/querz/mcaselector/Window.java
Patch:
@@ -11,6 +11,7 @@
 import javafx.stage.Stage;
 import javafx.stage.StageStyle;
 import net.querz.mcaselector.tiles.TileMap;
+import net.querz.mcaselector.util.Debug;
 
 import java.net.URL;
 import java.util.HashSet;
@@ -38,7 +39,7 @@ public void start(Stage primaryStage) {
 		HBox tileMapBox = new HBox();
 		ChangeListener<Number> sizeListener = (o, r, n) -> {
 			tileMap.resize(primaryStage.getWidth(), primaryStage.getHeight());
-			System.out.println("resize to " + primaryStage.getWidth() + " " + primaryStage.getHeight());
+			Debug.dump("resizing to " + primaryStage.getWidth() + " " + primaryStage.getHeight());
 		};
 		primaryStage.widthProperty().addListener(sizeListener);
 		primaryStage.heightProperty().addListener(sizeListener);

File: src/main/java/net/querz/mcaselector/io/MCAFile.java
Patch:
@@ -41,7 +41,6 @@ public void read(RandomAccessFile raf) throws IOException {
 	public void deleteChunkIndices(Set<Point2i> chunks, RandomAccessFile raf) throws Exception {
 		for (Point2i chunk : chunks) {
 			int index = getChunkIndex(chunk);
-			System.out.println("deleting index " + index + " of " + chunk);
 			raf.seek(index * 4);
 			raf.writeInt(0);
 			//set timestamp to 0

File: src/main/java/net/querz/mcaselector/util/Helper.java
Patch:
@@ -184,8 +184,8 @@ public static void clearSelectionCache(TileMap tileMap) {
 					System.out.println("could not delete file " + file);
 				}
 			}
+			tileMap.clearTile(Helper.regionToBlock(entry.getKey()));
 		}
-		tileMap.clear();
 		tileMap.update();
 	}
 

File: src/main/java/net/querz/mcaselector/OptionBar.java
Patch:
@@ -37,7 +37,7 @@ public OptionBar(TileMap tileMap, Stage primaryStage) {
 		getMenus().addAll(file, view, selection);
 		file.getItems().addAll(open, quit);
 		view.getItems().addAll(chunkGrid, regionGrid, separator(), goTo, separator(), clearViewCache, clearAllCache);
-		selection.getItems().addAll(clear, delete, separator(), clearSelectionCache);
+		selection.getItems().addAll(clear, delete, separator(), importSelection, exportSelection, separator(), clearSelectionCache);
 		chunkGrid.setSelected(true);
 		regionGrid.setSelected(true);
 

File: src/main/java/net/querz/mcaselector/io/MCAChunkData.java
Patch:
@@ -76,7 +76,7 @@ public void saveData(RandomAccessFile raf, long offset) throws Exception {
 				nbtos.writeTag(data);
 				rawData = baos.toByteArray();
 				length = rawData.length;
-				sectors = (byte) (length / 4096 + (length % 4069 == 0 ? 0 : 1));
+				sectors = (byte) getLengthInSectors();
 			} finally {
 				if (nbtos != null) {
 					nbtos.close();

File: src/main/java/net/querz/mcaselector/StatusBar.java
Patch:
@@ -4,22 +4,23 @@
 import javafx.scene.control.Label;
 import javafx.scene.layout.*;
 import javafx.scene.paint.Color;
-import javafx.scene.text.Font;
 import net.querz.mcaselector.tiles.TileMap;
 import net.querz.mcaselector.util.Helper;
 import net.querz.mcaselector.util.Point2i;
 
 public class StatusBar extends BorderPane {
+
 	private GridPane grid = new GridPane();
 	private Label selectedChunks = new Label("selected: 0");
 	private Label hoveredBlock = new Label("block: 0, 0");
 	private Label hoveredChunk = new Label("chunk: 0, 0");
 	private Label hoveredRegion = new Label("region: 0, 0");
 
 	private static final Color textColor = Color.WHITE;
+	private static final Color backgroundColor = new Color(0.15, 0.15, 0.15, 1);
 
 	public StatusBar(TileMap tileMap) {
-		setBackground(new Background(new BackgroundFill(new Color(0.15, 0.15, 0.15, 1), CornerRadii.EMPTY, Insets.EMPTY)));
+		setBackground(new Background(new BackgroundFill(backgroundColor, CornerRadii.EMPTY, Insets.EMPTY)));
 
 		tileMap.setOnUpdate(this::update);
 		tileMap.setOnHover(this::update);

